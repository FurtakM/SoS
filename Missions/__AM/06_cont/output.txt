// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 41
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7203 0 0
// CreateNature ;
  57: CALL 19579 0 0
// PrepareRussian ;
  61: CALL 5702 0 0
// PrepareVehicles ;
  65: CALL 1572 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 1981 0 0
// PreparePlayerApemans ;
  77: CALL 2119 0 0
// Action ;
  81: CALL 9842 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 41
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 42
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 43
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 22
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 23
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 39
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 40
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 29
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 45
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 38
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 24
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 25
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 26
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 28
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 32
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 44
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 30
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 31
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 36
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 37
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 33
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 27
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 41
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 41
 611: NOT
 612: PPUSH
 613: LD_EXP 43
 617: PPUSH
 618: CALL 38075 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 14
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 38075 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 41
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 41
 804: NOT
 805: PPUSH
 806: LD_EXP 43
 810: PPUSH
 811: CALL 38075 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 43
 925: PPUSH
 926: CALL 38075 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 43
1040: PPUSH
1041: CALL 38075 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 41
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 41
1154: NOT
1155: PPUSH
1156: LD_EXP 43
1160: PPUSH
1161: CALL 38075 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 41
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 41
1274: NOT
1275: PPUSH
1276: LD_EXP 43
1280: PPUSH
1281: CALL 38075 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 41
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 41
1394: NOT
1395: PPUSH
1396: LD_EXP 43
1400: PPUSH
1401: CALL 38075 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 41
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 41
1514: NOT
1515: PPUSH
1516: LD_EXP 43
1520: PPUSH
1521: CALL 38075 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; end ;
1567: LD_VAR 0 1
1571: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1580: LD_ADDR_VAR 0 5
1584: PUSH
1585: LD_STRING 06_VehiclesIn06_1
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: CALL_OW 30
1594: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1595: LD_ADDR_EXP 39
1599: PUSH
1600: LD_STRING 06_ResourcesInCargo06_1
1602: PPUSH
1603: EMPTY
1604: PPUSH
1605: CALL_OW 30
1609: ST_TO_ADDR
// cargoList := [ ] ;
1610: LD_ADDR_VAR 0 6
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// uc_side := 1 ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if vehicles then
1625: LD_VAR 0 5
1629: IFFALSE 1976
// begin for i := 1 to vehicles do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_VAR 0 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 21
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 37
1673: PUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1709: LD_ADDR_OWVAR 38
1713: PUSH
1714: LD_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1729: LD_ADDR_OWVAR 40
1733: PUSH
1734: LD_VAR 0 5
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 5
1747: ARRAY
1748: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1749: LD_ADDR_OWVAR 41
1753: PUSH
1754: LD_INT 40
1756: ST_TO_ADDR
// veh := CreateVehicle ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1767: LD_VAR 0 4
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1779: LD_VAR 0 4
1783: PPUSH
1784: LD_INT 2
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 49
// end ;
1794: GO 1646
1796: POP
1797: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1798: LD_ADDR_VAR 0 6
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: ST_TO_ADDR
// if cargoList then
1843: LD_VAR 0 6
1847: IFFALSE 1976
// for i := 1 to cargoList do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: DOUBLE
1855: LD_INT 1
1857: DEC
1858: ST_TO_ADDR
1859: LD_VAR 0 6
1863: PUSH
1864: FOR_TO
1865: IFFALSE 1974
// begin if resources then
1867: LD_EXP 39
1871: IFFALSE 1972
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_EXP 39
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_EXP 39
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 2
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1939: LD_VAR 0 6
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_EXP 39
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PUSH
1964: LD_INT 3
1966: ARRAY
1967: PPUSH
1968: CALL_OW 291
// end ; end ;
1972: GO 1864
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// export function PrepareOthers ; var i , veh ; begin
1981: LD_INT 0
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 1 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// uc_nation := 1 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2002: LD_ADDR_EXP 11
2006: PUSH
2007: LD_STRING OthersIn06
2009: PPUSH
2010: CALL_OW 31
2014: ST_TO_ADDR
// for i in others do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 11
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: ST_TO_ADDR
// if veh then
2069: LD_VAR 0 3
2073: IFFALSE 2095
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
2093: GO 2110
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2095: LD_VAR 0 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// end ;
2110: GO 2025
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// uc_side = 1 ;
2124: LD_ADDR_OWVAR 20
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// uc_nation = 0 ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 0
2139: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2140: LD_ADDR_EXP 12
2144: PUSH
2145: LD_STRING ApeIn06
2147: PPUSH
2148: CALL_OW 31
2152: ST_TO_ADDR
// if not ape then
2153: LD_EXP 12
2157: NOT
2158: IFFALSE 2162
// exit ;
2160: GO 2194
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side := 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation := 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_EXP 43
2330: PPUSH
2331: CALL 38075 0 3
2335: ST_TO_ADDR
// if not Denis then
2336: LD_EXP 9
2340: NOT
2341: IFFALSE 2345
// exit ;
2343: GO 2486
// for i = 1 to xy do
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_VAR 0 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2460
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 2
2382: PUSH
2383: LD_VAR 0 3
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: CALL_OW 428
2397: PUSH
2398: LD_INT 0
2400: EQUAL
2401: IFFALSE 2458
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2403: LD_EXP 9
2407: PPUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 48
// if IsPlaced ( Denis ) then
2445: LD_EXP 9
2449: PPUSH
2450: CALL_OW 305
2454: IFFALSE 2458
// break ;
2456: GO 2460
// end ;
2458: GO 2360
2460: POP
2461: POP
// SetClass ( Denis , 4 ) ;
2462: LD_EXP 9
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2474: LD_EXP 9
2478: PPUSH
2479: LD_INT 750
2481: PPUSH
2482: CALL_OW 234
// end ;
2486: LD_VAR 0 1
2490: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
// area := HarrisonSupportArea ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_INT 3
2505: ST_TO_ADDR
// dir := 2 ;
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 2
2513: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2514: LD_VAR 0 4
2518: PPUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 70
2533: IFFALSE 2551
// begin area := HarrisonSupportArea2 ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 31
2542: ST_TO_ADDR
// dir := 1 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; uc_side = 1 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// uc_nation = 1 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// vc_engine := engine_combustion ;
2567: LD_ADDR_OWVAR 39
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// vc_control := control_manual ;
2575: LD_ADDR_OWVAR 38
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2583: LD_ADDR_OWVAR 40
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 2
2619: ST_TO_ADDR
// veh := CreateVehicle ;
2620: LD_ADDR_VAR 0 3
2624: PUSH
2625: CALL_OW 45
2629: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_VAR 0 5
2639: PPUSH
2640: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 50
2668: PPUSH
2669: CALL_OW 240
// hc_class := class_engineer ;
2673: LD_ADDR_OWVAR 28
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// hc_sex := sex_male ;
2681: LD_ADDR_OWVAR 27
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2689: LD_ADDR_OWVAR 33
2693: PUSH
2694: LD_STRING SecondCharsGal
2696: ST_TO_ADDR
// hc_face_number := 52 ;
2697: LD_ADDR_OWVAR 34
2701: PUSH
2702: LD_INT 52
2704: ST_TO_ADDR
// hc_name := Craig Brown ;
2705: LD_ADDR_OWVAR 26
2709: PUSH
2710: LD_STRING Craig Brown
2712: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2713: LD_ADDR_OWVAR 29
2717: PUSH
2718: LD_INT 10
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2728: LD_ADDR_OWVAR 30
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2751: LD_ADDR_OWVAR 31
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2774: LD_ADDR_EXP 17
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: CALL_OW 52
// vc_engine := engine_combustion ;
2798: LD_ADDR_OWVAR 39
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// vc_control := control_manual ;
2806: LD_ADDR_OWVAR 38
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2814: LD_ADDR_OWVAR 40
2818: PUSH
2819: LD_INT 5
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2843: LD_ADDR_OWVAR 37
2847: PUSH
2848: LD_INT 2
2850: ST_TO_ADDR
// veh := CreateVehicle ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 45
2860: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2892: LD_VAR 0 3
2896: PPUSH
2897: LD_INT 50
2899: PPUSH
2900: CALL_OW 240
// hc_class := class_soldier ;
2904: LD_ADDR_OWVAR 28
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_sex := sex_female ;
2912: LD_ADDR_OWVAR 27
2916: PUSH
2917: LD_INT 2
2919: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING SecondCharsGal
2927: ST_TO_ADDR
// hc_face_number := 42 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 42
2935: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2936: LD_ADDR_OWVAR 29
2940: PUSH
2941: LD_INT 11
2943: PUSH
2944: LD_INT 10
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2951: LD_ADDR_OWVAR 26
2955: PUSH
2956: LD_STRING Ingrid Jonsson
2958: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2959: LD_ADDR_OWVAR 30
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2982: LD_ADDR_OWVAR 31
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3015: LD_EXP 18
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 23
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 26
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: LD_EXP 3
3089: PUSH
3090: LD_EXP 4
3094: PUSH
3095: LD_EXP 8
3099: PUSH
3100: LD_EXP 9
3104: PUSH
3105: LD_EXP 5
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: DIFF
3117: ST_TO_ADDR
// for i in _tmp do
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_VAR 0 4
3127: PUSH
3128: FOR_IN
3129: IFFALSE 3170
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 32
3138: PPUSH
3139: CALL_OW 308
3143: PUSH
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL_OW 302
3153: AND
3154: IFFALSE 3168
// begin tmp := i ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_VAR 0 2
3165: ST_TO_ADDR
// break ;
3166: GO 3170
// end ;
3168: GO 3128
3170: POP
3171: POP
// if not tmp then
3172: LD_VAR 0 3
3176: NOT
3177: IFFALSE 3189
// tmp := JMM ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_EXP 1
3188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3189: LD_INT 35
3191: PPUSH
3192: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3196: LD_INT 81
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: LD_INT 92
3208: PUSH
3209: LD_VAR 0 3
3213: PPUSH
3214: CALL_OW 250
3218: PUSH
3219: LD_VAR 0 3
3223: PPUSH
3224: CALL_OW 251
3228: PUSH
3229: LD_INT 22
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: NOT
3247: PUSH
3248: LD_INT 22
3250: PUSH
3251: LD_INT 1
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 21
3260: PUSH
3261: LD_INT 3
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 92
3270: PUSH
3271: LD_VAR 0 3
3275: PPUSH
3276: CALL_OW 250
3280: PUSH
3281: LD_VAR 0 3
3285: PPUSH
3286: CALL_OW 251
3290: PUSH
3291: LD_INT 20
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: AND
3310: IFFALSE 3189
// blockSpawn := 1 ;
3312: LD_ADDR_EXP 29
3316: PUSH
3317: LD_INT 1
3319: ST_TO_ADDR
// uc_side := 4 ;
3320: LD_ADDR_OWVAR 20
3324: PUSH
3325: LD_INT 4
3327: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3328: LD_ADDR_EXP 15
3332: PUSH
3333: LD_STRING Joan
3335: PPUSH
3336: LD_INT 0
3338: PPUSH
3339: LD_EXP 43
3343: PPUSH
3344: CALL 38075 0 3
3348: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3349: LD_EXP 15
3353: PPUSH
3354: LD_VAR 0 3
3358: PPUSH
3359: CALL_OW 250
3363: PPUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: CALL_OW 251
3373: PPUSH
3374: LD_INT 5
3376: PPUSH
3377: LD_INT 1
3379: PPUSH
3380: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3384: LD_EXP 15
3388: PPUSH
3389: LD_INT 250
3391: PPUSH
3392: CALL_OW 234
// InGameOn ;
3396: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3400: LD_EXP 15
3404: PPUSH
3405: CALL_OW 87
// wait ( 0 0$2 ) ;
3409: LD_INT 70
3411: PPUSH
3412: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3416: LD_VAR 0 3
3420: PPUSH
3421: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3425: LD_VAR 0 3
3429: PPUSH
3430: CALL_OW 122
// wait ( 0 0$1 ) ;
3434: LD_INT 35
3436: PPUSH
3437: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3441: LD_VAR 0 3
3445: PPUSH
3446: LD_EXP 15
3450: PPUSH
3451: CALL_OW 112
// wait ( 0 0$2 ) ;
3455: LD_INT 70
3457: PPUSH
3458: CALL_OW 67
// DialogueOn ;
3462: CALL_OW 6
// if tmp = JMM then
3466: LD_VAR 0 3
3470: PUSH
3471: LD_EXP 1
3475: EQUAL
3476: IFFALSE 3625
// begin ComTurnUnit ( JMM , Joan ) ;
3478: LD_EXP 1
3482: PPUSH
3483: LD_EXP 15
3487: PPUSH
3488: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3492: LD_EXP 1
3496: PPUSH
3497: LD_STRING D5b-JMM-1
3499: PPUSH
3500: CALL_OW 88
// DialogueOff ;
3504: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3508: LD_EXP 15
3512: PPUSH
3513: LD_INT 500
3515: PPUSH
3516: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3520: LD_EXP 15
3524: PPUSH
3525: LD_EXP 1
3529: PPUSH
3530: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3534: LD_EXP 1
3538: PPUSH
3539: LD_EXP 15
3543: PPUSH
3544: CALL_OW 119
// wait ( 0 0$1 ) ;
3548: LD_INT 35
3550: PPUSH
3551: CALL_OW 67
// DialogueOn ;
3555: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_STRING D5b-Joan-1
3566: PPUSH
3567: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3571: LD_EXP 1
3575: PPUSH
3576: LD_STRING D5b-JMM-2
3578: PPUSH
3579: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3583: LD_EXP 15
3587: PPUSH
3588: LD_STRING D5b-Joan-2
3590: PPUSH
3591: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3595: LD_EXP 1
3599: PPUSH
3600: LD_STRING D5b-JMM-3
3602: PPUSH
3603: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_STRING D5b-Joan-3
3614: PPUSH
3615: CALL_OW 88
// DialogueOff ;
3619: CALL_OW 7
// end else
3623: GO 3990
// begin ComTurnUnit ( tmp , Joan ) ;
3625: LD_VAR 0 3
3629: PPUSH
3630: LD_EXP 15
3634: PPUSH
3635: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3639: LD_VAR 0 3
3643: PPUSH
3644: LD_STRING D5a-Sol1-1
3646: PPUSH
3647: CALL_OW 88
// DialogueOff ;
3651: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3655: LD_EXP 15
3659: PPUSH
3660: LD_INT 500
3662: PPUSH
3663: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3667: LD_EXP 15
3671: PPUSH
3672: LD_VAR 0 3
3676: PPUSH
3677: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3681: LD_VAR 0 3
3685: PPUSH
3686: LD_EXP 15
3690: PPUSH
3691: CALL_OW 119
// wait ( 0 0$1 ) ;
3695: LD_INT 35
3697: PPUSH
3698: CALL_OW 67
// DialogueOn ;
3702: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3706: LD_EXP 15
3710: PPUSH
3711: LD_STRING D5a-Joan-1
3713: PPUSH
3714: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_STRING D5a-Sol1-2
3725: PPUSH
3726: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3730: LD_EXP 15
3734: PPUSH
3735: LD_STRING D5a-Joan-2
3737: PPUSH
3738: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3742: LD_VAR 0 3
3746: PPUSH
3747: LD_STRING D5a-Sol1-3
3749: PPUSH
3750: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3754: LD_EXP 15
3758: PPUSH
3759: LD_STRING D5a-Joan-3
3761: PPUSH
3762: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3766: LD_VAR 0 3
3770: PPUSH
3771: LD_STRING D5a-Sol1-4
3773: PPUSH
3774: CALL_OW 88
// DialogueOff ;
3778: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3782: LD_EXP 1
3786: PUSH
3787: LD_INT 55
3789: PUSH
3790: EMPTY
3791: LIST
3792: PPUSH
3793: CALL_OW 69
3797: IN
3798: IFFALSE 3821
// begin ComMoveUnit ( JMM , Joan ) ;
3800: LD_EXP 1
3804: PPUSH
3805: LD_EXP 15
3809: PPUSH
3810: CALL_OW 112
// wait ( 0 0$05 ) ;
3814: LD_INT 175
3816: PPUSH
3817: CALL_OW 67
// end ; ComExit ( JMM ) ;
3821: LD_EXP 1
3825: PPUSH
3826: CALL 75200 0 1
// wait ( 0 0$1 ) ;
3830: LD_INT 35
3832: PPUSH
3833: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3837: LD_INT 35
3839: PPUSH
3840: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3844: LD_EXP 15
3848: PUSH
3849: LD_VAR 0 3
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PPUSH
3858: LD_EXP 1
3862: PPUSH
3863: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3867: LD_EXP 15
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 296
3881: PUSH
3882: LD_INT 5
3884: LESS
3885: IFFALSE 3837
// ComTurnUnit ( Joan , JMM ) ;
3887: LD_EXP 15
3891: PPUSH
3892: LD_EXP 1
3896: PPUSH
3897: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_EXP 15
3910: PPUSH
3911: CALL_OW 119
// wait ( 0 0$1 ) ;
3915: LD_INT 35
3917: PPUSH
3918: CALL_OW 67
// DialogueOn ;
3922: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_STRING D5a-Joan-4
3933: PPUSH
3934: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3938: LD_EXP 1
3942: PPUSH
3943: LD_STRING D5a-JMM-4
3945: PPUSH
3946: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3950: LD_EXP 15
3954: PPUSH
3955: LD_STRING D5a-Joan-5
3957: PPUSH
3958: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3962: LD_EXP 1
3966: PPUSH
3967: LD_STRING D5a-JMM-5
3969: PPUSH
3970: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3974: LD_EXP 15
3978: PPUSH
3979: LD_STRING D5a-Joan-6
3981: PPUSH
3982: CALL_OW 88
// DialogueOff ;
3986: CALL_OW 7
// end ; DialogueOn ;
3990: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3994: LD_EXP 1
3998: PPUSH
3999: LD_STRING D6-JMM-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4006: LD_EXP 15
4010: PPUSH
4011: LD_STRING D6-Joan-1
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D6-JMM-2
4025: PPUSH
4026: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4030: LD_EXP 15
4034: PPUSH
4035: LD_STRING D6-Joan-2
4037: PPUSH
4038: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4042: LD_EXP 1
4046: PPUSH
4047: LD_STRING D6-JMM-3
4049: PPUSH
4050: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4054: LD_EXP 15
4058: PPUSH
4059: LD_STRING D6-Joan-3
4061: PPUSH
4062: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4066: LD_EXP 1
4070: PPUSH
4071: LD_STRING D6-JMM-4
4073: PPUSH
4074: CALL_OW 88
// DialogueOff ;
4078: CALL_OW 7
// InGameOff ;
4082: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4086: LD_EXP 15
4090: PPUSH
4091: LD_INT 1
4093: PPUSH
4094: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4098: LD_STRING MJ
4100: PPUSH
4101: CALL_OW 337
// joanStatus = 1 ;
4105: LD_ADDR_EXP 16
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// blockSpawn = 0 ;
4113: LD_ADDR_EXP 29
4117: PUSH
4118: LD_INT 0
4120: ST_TO_ADDR
// end ;
4121: LD_VAR 0 1
4125: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
// if not number or number > 8 then
4130: LD_VAR 0 1
4134: NOT
4135: PUSH
4136: LD_VAR 0 1
4140: PUSH
4141: LD_INT 8
4143: GREATER
4144: OR
4145: IFFALSE 4149
// exit ;
4147: GO 5697
// repeat wait ( 0 0$7 ) ;
4149: LD_INT 245
4151: PPUSH
4152: CALL_OW 67
// until blockSpawn = 0 ;
4156: LD_EXP 29
4160: PUSH
4161: LD_INT 0
4163: EQUAL
4164: IFFALSE 4149
// uc_side := 1 ;
4166: LD_ADDR_OWVAR 20
4170: PUSH
4171: LD_INT 1
4173: ST_TO_ADDR
// uc_nation := 1 ;
4174: LD_ADDR_OWVAR 21
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// InitHc ;
4182: CALL_OW 19
// if number = 1 then
4186: LD_VAR 0 1
4190: PUSH
4191: LD_INT 1
4193: EQUAL
4194: IFFALSE 4370
// begin hc_class := 3 ;
4196: LD_ADDR_OWVAR 28
4200: PUSH
4201: LD_INT 3
4203: ST_TO_ADDR
// hc_sex := sex_male ;
4204: LD_ADDR_OWVAR 27
4208: PUSH
4209: LD_INT 1
4211: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4212: LD_ADDR_OWVAR 33
4216: PUSH
4217: LD_STRING SecondCharsGal
4219: ST_TO_ADDR
// hc_face_number := 55 ;
4220: LD_ADDR_OWVAR 34
4224: PUSH
4225: LD_INT 55
4227: ST_TO_ADDR
// hc_name := George McCarthy ;
4228: LD_ADDR_OWVAR 26
4232: PUSH
4233: LD_STRING George McCarthy
4235: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4236: LD_ADDR_OWVAR 29
4240: PUSH
4241: LD_INT 11
4243: PUSH
4244: LD_INT 10
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4251: LD_ADDR_OWVAR 30
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 2
4264: PUSH
4265: LD_INT 0
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4274: LD_ADDR_OWVAR 31
4278: PUSH
4279: LD_INT 1
4281: PUSH
4282: LD_INT 2
4284: PUSH
4285: LD_INT 3
4287: PUSH
4288: LD_INT 1
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: ST_TO_ADDR
// un = CreateHuman ;
4297: LD_ADDR_VAR 0 3
4301: PUSH
4302: CALL_OW 44
4306: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_INT 23
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4322: LD_VAR 0 3
4326: PPUSH
4327: CALL_OW 87
// wait ( 0 0$1 ) ;
4331: LD_INT 35
4333: PPUSH
4334: CALL_OW 67
// DialogueOn ;
4338: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_STRING D11d-Sol4-1
4349: PPUSH
4350: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4354: LD_EXP 1
4358: PPUSH
4359: LD_STRING D11d-JMM-1
4361: PPUSH
4362: CALL_OW 88
// DialogueOff ;
4366: CALL_OW 7
// end ; if number = 2 then
4370: LD_VAR 0 1
4374: PUSH
4375: LD_INT 2
4377: EQUAL
4378: IFFALSE 4554
// begin hc_class := 1 ;
4380: LD_ADDR_OWVAR 28
4384: PUSH
4385: LD_INT 1
4387: ST_TO_ADDR
// hc_sex := sex_male ;
4388: LD_ADDR_OWVAR 27
4392: PUSH
4393: LD_INT 1
4395: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING AmGalRemake
4403: ST_TO_ADDR
// hc_face_number := 7 ;
4404: LD_ADDR_OWVAR 34
4408: PUSH
4409: LD_INT 7
4411: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4412: LD_ADDR_OWVAR 26
4416: PUSH
4417: LD_STRING Bobby Jordan
4419: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4420: LD_ADDR_OWVAR 29
4424: PUSH
4425: LD_INT 9
4427: PUSH
4428: LD_INT 11
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4435: LD_ADDR_OWVAR 30
4439: PUSH
4440: LD_INT 1
4442: PUSH
4443: LD_INT 0
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 1
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4458: LD_ADDR_OWVAR 31
4462: PUSH
4463: LD_INT 2
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: ST_TO_ADDR
// un = CreateHuman ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4491: LD_VAR 0 3
4495: PPUSH
4496: LD_INT 24
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL_OW 49
// wait ( 0 0$1 ) ;
4506: LD_INT 35
4508: PPUSH
4509: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4513: LD_VAR 0 3
4517: PPUSH
4518: CALL_OW 87
// DialogueOn ;
4522: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4526: LD_VAR 0 3
4530: PPUSH
4531: LD_STRING D11b-Sol3-1
4533: PPUSH
4534: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4538: LD_EXP 1
4542: PPUSH
4543: LD_STRING D11b-JMM-1
4545: PPUSH
4546: CALL_OW 88
// DialogueOff ;
4550: CALL_OW 7
// end ; if number = 3 then
4554: LD_VAR 0 1
4558: PUSH
4559: LD_INT 3
4561: EQUAL
4562: IFFALSE 4726
// begin hc_class := 1 ;
4564: LD_ADDR_OWVAR 28
4568: PUSH
4569: LD_INT 1
4571: ST_TO_ADDR
// hc_sex := sex_male ;
4572: LD_ADDR_OWVAR 27
4576: PUSH
4577: LD_INT 1
4579: ST_TO_ADDR
// hc_gallery := DJ ;
4580: LD_ADDR_OWVAR 33
4584: PUSH
4585: LD_STRING DJ
4587: ST_TO_ADDR
// hc_face_number := 1 ;
4588: LD_ADDR_OWVAR 34
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// hc_name := Darius Dajay ;
4596: LD_ADDR_OWVAR 26
4600: PUSH
4601: LD_STRING Darius Dajay
4603: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4604: LD_ADDR_OWVAR 29
4608: PUSH
4609: LD_INT 11
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4619: LD_ADDR_OWVAR 30
4623: PUSH
4624: LD_INT 2
4626: PUSH
4627: LD_INT 0
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4642: LD_ADDR_OWVAR 31
4646: PUSH
4647: LD_INT 4
4649: PUSH
4650: LD_INT 0
4652: PUSH
4653: LD_INT 1
4655: PUSH
4656: LD_INT 0
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: ST_TO_ADDR
// un = CreateHuman ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: CALL_OW 44
4674: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4675: LD_VAR 0 3
4679: PPUSH
4680: LD_INT 25
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4690: LD_VAR 0 3
4694: PPUSH
4695: CALL_OW 87
// wait ( 0 0$1 ) ;
4699: LD_INT 35
4701: PPUSH
4702: CALL_OW 67
// DialogueOn ;
4706: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4710: LD_VAR 0 3
4714: PPUSH
4715: LD_STRING D11f-Sol5-1
4717: PPUSH
4718: CALL_OW 88
// DialogueOff ;
4722: CALL_OW 7
// end ; if number = 4 then
4726: LD_VAR 0 1
4730: PUSH
4731: LD_INT 4
4733: EQUAL
4734: IFFALSE 4871
// begin hc_class := 2 ;
4736: LD_ADDR_OWVAR 28
4740: PUSH
4741: LD_INT 2
4743: ST_TO_ADDR
// hc_sex := sex_female ;
4744: LD_ADDR_OWVAR 27
4748: PUSH
4749: LD_INT 2
4751: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4752: LD_ADDR_OWVAR 33
4756: PUSH
4757: LD_STRING SecondCharsGal
4759: ST_TO_ADDR
// hc_face_number := 46 ;
4760: LD_ADDR_OWVAR 34
4764: PUSH
4765: LD_INT 46
4767: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4768: LD_ADDR_OWVAR 26
4772: PUSH
4773: LD_STRING Sylvia Creak
4775: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4776: LD_ADDR_OWVAR 29
4780: PUSH
4781: LD_INT 10
4783: PUSH
4784: LD_INT 9
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4791: LD_ADDR_OWVAR 30
4795: PUSH
4796: LD_INT 0
4798: PUSH
4799: LD_INT 1
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4814: LD_ADDR_OWVAR 31
4818: PUSH
4819: LD_INT 1
4821: PUSH
4822: LD_INT 3
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: ST_TO_ADDR
// un = CreateHuman ;
4837: LD_ADDR_VAR 0 3
4841: PUSH
4842: CALL_OW 44
4846: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4847: LD_VAR 0 3
4851: PPUSH
4852: LD_INT 26
4854: PPUSH
4855: LD_INT 1
4857: PPUSH
4858: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4862: LD_VAR 0 3
4866: PPUSH
4867: CALL_OW 87
// end ; if number = 5 then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_INT 5
4878: EQUAL
4879: IFFALSE 5055
// begin hc_class := 1 ;
4881: LD_ADDR_OWVAR 28
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// hc_sex := sex_female ;
4889: LD_ADDR_OWVAR 27
4893: PUSH
4894: LD_INT 2
4896: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4897: LD_ADDR_OWVAR 33
4901: PUSH
4902: LD_STRING SecondCharsGal
4904: ST_TO_ADDR
// hc_face_number := 37 ;
4905: LD_ADDR_OWVAR 34
4909: PUSH
4910: LD_INT 37
4912: ST_TO_ADDR
// hc_name := Malena Johnson ;
4913: LD_ADDR_OWVAR 26
4917: PUSH
4918: LD_STRING Malena Johnson
4920: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4921: LD_ADDR_OWVAR 29
4925: PUSH
4926: LD_INT 11
4928: PUSH
4929: LD_INT 10
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4936: LD_ADDR_OWVAR 30
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4959: LD_ADDR_OWVAR 31
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: ST_TO_ADDR
// un = CreateHuman ;
4982: LD_ADDR_VAR 0 3
4986: PUSH
4987: CALL_OW 44
4991: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4992: LD_VAR 0 3
4996: PPUSH
4997: LD_INT 27
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5007: LD_VAR 0 3
5011: PPUSH
5012: CALL_OW 87
// wait ( 0 0$1 ) ;
5016: LD_INT 35
5018: PPUSH
5019: CALL_OW 67
// DialogueOn ;
5023: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_STRING D11c-FSol3-1
5034: PPUSH
5035: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5039: LD_EXP 1
5043: PPUSH
5044: LD_STRING D11c-JMM-1
5046: PPUSH
5047: CALL_OW 88
// DialogueOff ;
5051: CALL_OW 7
// end ; if number = 6 then
5055: LD_VAR 0 1
5059: PUSH
5060: LD_INT 6
5062: EQUAL
5063: IFFALSE 5237
// begin hc_class := 1 ;
5065: LD_ADDR_OWVAR 28
5069: PUSH
5070: LD_INT 1
5072: ST_TO_ADDR
// hc_sex := sex_male ;
5073: LD_ADDR_OWVAR 27
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5081: LD_ADDR_OWVAR 33
5085: PUSH
5086: LD_STRING AmGalRemake
5088: ST_TO_ADDR
// hc_face_number := 1 ;
5089: LD_ADDR_OWVAR 34
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// hc_name := Charles Brown ;
5097: LD_ADDR_OWVAR 26
5101: PUSH
5102: LD_STRING Charles Brown
5104: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5105: LD_ADDR_OWVAR 29
5109: PUSH
5110: LD_INT 12
5112: PUSH
5113: LD_INT 11
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5120: LD_ADDR_OWVAR 30
5124: PUSH
5125: LD_INT 2
5127: PUSH
5128: LD_INT 0
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5143: LD_ADDR_OWVAR 31
5147: PUSH
5148: LD_INT 3
5150: PUSH
5151: LD_INT 0
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: ST_TO_ADDR
// un = CreateHuman ;
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: CALL_OW 44
5175: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5176: LD_VAR 0 3
5180: PPUSH
5181: LD_INT 28
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5191: LD_VAR 0 3
5195: PPUSH
5196: CALL_OW 87
// wait ( 0 0$1 ) ;
5200: LD_INT 35
5202: PPUSH
5203: CALL_OW 67
// DialogueOn ;
5207: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_STRING D4-Sol1-5
5218: PPUSH
5219: CALL_OW 88
// DialogueOff ;
5223: CALL_OW 7
// tempCharles = un ;
5227: LD_ADDR_EXP 13
5231: PUSH
5232: LD_VAR 0 3
5236: ST_TO_ADDR
// end ; if number = 7 then
5237: LD_VAR 0 1
5241: PUSH
5242: LD_INT 7
5244: EQUAL
5245: IFFALSE 5517
// begin hc_class := 1 ;
5247: LD_ADDR_OWVAR 28
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// hc_sex := sex_female ;
5255: LD_ADDR_OWVAR 27
5259: PUSH
5260: LD_INT 2
5262: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5263: LD_ADDR_OWVAR 33
5267: PUSH
5268: LD_STRING AmGalRemake
5270: ST_TO_ADDR
// hc_face_number := 2 ;
5271: LD_ADDR_OWVAR 34
5275: PUSH
5276: LD_INT 2
5278: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5279: LD_ADDR_OWVAR 26
5283: PUSH
5284: LD_STRING Rebecca Macdonald
5286: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5287: LD_ADDR_OWVAR 29
5291: PUSH
5292: LD_INT 10
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5302: LD_ADDR_OWVAR 30
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: LD_INT 0
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5325: LD_ADDR_OWVAR 31
5329: PUSH
5330: LD_INT 1
5332: PUSH
5333: LD_INT 0
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: ST_TO_ADDR
// un = CreateHuman ;
5348: LD_ADDR_VAR 0 3
5352: PUSH
5353: CALL_OW 44
5357: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5358: LD_VAR 0 3
5362: PPUSH
5363: LD_INT 29
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5373: LD_VAR 0 3
5377: PPUSH
5378: CALL_OW 87
// wait ( 0 0$1 ) ;
5382: LD_INT 35
5384: PPUSH
5385: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5389: LD_INT 30
5391: PPUSH
5392: LD_INT 22
5394: PUSH
5395: LD_INT 3
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PPUSH
5402: CALL_OW 70
5406: IFFALSE 5517
// begin DialogueOn ;
5408: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5412: LD_VAR 0 3
5416: PPUSH
5417: CALL_OW 250
5421: PPUSH
5422: LD_VAR 0 3
5426: PPUSH
5427: CALL_OW 251
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: LD_INT 15
5437: NEG
5438: PPUSH
5439: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5443: LD_VAR 0 3
5447: PPUSH
5448: CALL_OW 250
5452: PPUSH
5453: LD_VAR 0 3
5457: PPUSH
5458: CALL_OW 251
5462: PPUSH
5463: LD_INT 1
5465: PPUSH
5466: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5470: LD_VAR 0 3
5474: PPUSH
5475: LD_STRING D11a-FSol2-1
5477: PPUSH
5478: CALL_OW 88
// DialogueOff ;
5482: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5486: LD_INT 3
5488: PPUSH
5489: LD_VAR 0 3
5493: PPUSH
5494: CALL_OW 471
// wait ( 0 0$2 ) ;
5498: LD_INT 70
5500: PPUSH
5501: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5505: LD_INT 3
5507: PPUSH
5508: LD_VAR 0 3
5512: PPUSH
5513: CALL_OW 472
// end ; end ; if number = 8 then
5517: LD_VAR 0 1
5521: PUSH
5522: LD_INT 8
5524: EQUAL
5525: IFFALSE 5681
// begin hc_class := 1 ;
5527: LD_ADDR_OWVAR 28
5531: PUSH
5532: LD_INT 1
5534: ST_TO_ADDR
// hc_sex := sex_female ;
5535: LD_ADDR_OWVAR 27
5539: PUSH
5540: LD_INT 2
5542: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5543: LD_ADDR_OWVAR 33
5547: PUSH
5548: LD_STRING SecondCharsGal
5550: ST_TO_ADDR
// hc_face_number := 45 ;
5551: LD_ADDR_OWVAR 34
5555: PUSH
5556: LD_INT 45
5558: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5559: LD_ADDR_OWVAR 26
5563: PUSH
5564: LD_STRING Margherite Simpson
5566: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5567: LD_ADDR_OWVAR 29
5571: PUSH
5572: LD_INT 12
5574: PUSH
5575: LD_INT 10
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5582: LD_ADDR_OWVAR 30
5586: PUSH
5587: LD_INT 1
5589: PUSH
5590: LD_INT 2
5592: PUSH
5593: LD_INT 0
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5605: LD_ADDR_OWVAR 31
5609: PUSH
5610: LD_INT 1
5612: PUSH
5613: LD_INT 2
5615: PUSH
5616: LD_INT 0
5618: PUSH
5619: LD_INT 1
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: ST_TO_ADDR
// un = CreateHuman ;
5628: LD_ADDR_VAR 0 3
5632: PUSH
5633: CALL_OW 44
5637: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_INT 33
5645: PPUSH
5646: LD_INT 1
5648: PPUSH
5649: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5653: LD_VAR 0 3
5657: PPUSH
5658: CALL_OW 87
// wait ( 0 0$1 ) ;
5662: LD_INT 35
5664: PPUSH
5665: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5669: LD_VAR 0 3
5673: PPUSH
5674: LD_STRING D11e-FSol4-1
5676: PPUSH
5677: CALL_OW 88
// end ; arrivals := arrivals union un ;
5681: LD_ADDR_EXP 44
5685: PUSH
5686: LD_EXP 44
5690: PUSH
5691: LD_VAR 0 3
5695: UNION
5696: ST_TO_ADDR
// end ; end_of_file
5697: LD_VAR 0 2
5701: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5702: LD_INT 0
5704: PPUSH
5705: PPUSH
// ruAttackers := [ ] ;
5706: LD_ADDR_EXP 47
5710: PUSH
5711: EMPTY
5712: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5713: LD_ADDR_EXP 48
5717: PUSH
5718: EMPTY
5719: ST_TO_ADDR
// if Difficulty < 3 then
5720: LD_OWVAR 67
5724: PUSH
5725: LD_INT 3
5727: LESS
5728: IFFALSE 5745
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5730: LD_INT 130
5732: PPUSH
5733: LD_INT 81
5735: PPUSH
5736: CALL_OW 428
5740: PPUSH
5741: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5745: LD_INT 3
5747: PPUSH
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_EXP 34
5758: PPUSH
5759: LD_EXP 35
5763: PPUSH
5764: CALL_OW 12
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: CALL 6957 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5779: LD_INT 3
5781: PPUSH
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 8
5787: PPUSH
5788: LD_EXP 34
5792: PPUSH
5793: LD_EXP 35
5797: PPUSH
5798: CALL_OW 12
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: LD_INT 4
5808: PPUSH
5809: CALL 6957 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5813: LD_INT 3
5815: PPUSH
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 67
5821: PPUSH
5822: LD_EXP 34
5826: PPUSH
5827: LD_EXP 35
5831: PPUSH
5832: CALL_OW 12
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: CALL 6957 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5847: LD_INT 3
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 21
5855: PPUSH
5856: LD_EXP 34
5860: PPUSH
5861: LD_EXP 35
5865: PPUSH
5866: CALL_OW 12
5870: PPUSH
5871: LD_INT 3
5873: PPUSH
5874: LD_INT 6
5876: PPUSH
5877: CALL 6957 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5881: LD_INT 3
5883: PPUSH
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 17
5889: PPUSH
5890: LD_EXP 34
5894: PPUSH
5895: LD_EXP 35
5899: PPUSH
5900: CALL_OW 12
5904: PPUSH
5905: LD_INT 3
5907: PPUSH
5908: LD_INT 6
5910: PPUSH
5911: CALL 6957 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5915: LD_INT 3
5917: PPUSH
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 32
5923: PPUSH
5924: LD_EXP 34
5928: PPUSH
5929: LD_EXP 35
5933: PPUSH
5934: CALL_OW 12
5938: PPUSH
5939: LD_INT 4
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: CALL 6957 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5949: LD_ADDR_VAR 0 2
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 21
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 30
5976: PUSH
5977: LD_INT 32
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 69
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6035
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5997: LD_INT 3
5999: PPUSH
6000: LD_INT 3
6002: PPUSH
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 34
6012: PPUSH
6013: LD_EXP 35
6017: PPUSH
6018: CALL_OW 12
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: CALL 6957 0 6
6033: GO 5994
6035: POP
6036: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6037: LD_ADDR_VAR 0 2
6041: PUSH
6042: LD_INT 22
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 21
6054: PUSH
6055: LD_INT 3
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 30
6064: PUSH
6065: LD_INT 31
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: PPUSH
6077: CALL_OW 69
6081: PUSH
6082: FOR_IN
6083: IFFALSE 6111
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6085: LD_EXP 34
6089: PPUSH
6090: LD_EXP 35
6094: PPUSH
6095: CALL_OW 12
6099: PPUSH
6100: LD_VAR 0 2
6104: PPUSH
6105: CALL 7067 0 2
6109: GO 6082
6111: POP
6112: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6113: LD_INT 3
6115: PPUSH
6116: LD_INT 32
6118: PPUSH
6119: LD_INT 3
6121: PPUSH
6122: CALL 7346 0 3
// end ;
6126: LD_VAR 0 1
6130: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6131: LD_INT 22
6133: PUSH
6134: LD_INT 3
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: LD_INT 32
6143: PUSH
6144: LD_INT 1
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PPUSH
6155: CALL_OW 69
6159: IFFALSE 6236
6161: GO 6163
6163: DISABLE
6164: LD_INT 0
6166: PPUSH
// begin enable ;
6167: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6168: LD_ADDR_VAR 0 1
6172: PUSH
6173: LD_INT 22
6175: PUSH
6176: LD_INT 3
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 32
6185: PUSH
6186: LD_INT 1
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: PUSH
6202: FOR_IN
6203: IFFALSE 6234
// if GetFuel ( i ) < 3 then
6205: LD_VAR 0 1
6209: PPUSH
6210: CALL_OW 261
6214: PUSH
6215: LD_INT 3
6217: LESS
6218: IFFALSE 6232
// SetFuel ( i , 3 ) ;
6220: LD_VAR 0 1
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: CALL_OW 240
6232: GO 6202
6234: POP
6235: POP
// end ;
6236: PPOPN 1
6238: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6239: LD_OWVAR 67
6243: PUSH
6244: LD_INT 1
6246: GREATER
6247: IFFALSE 6816
6249: GO 6251
6251: DISABLE
6252: LD_INT 0
6254: PPUSH
6255: PPUSH
6256: PPUSH
6257: PPUSH
// begin uc_side := 3 ;
6258: LD_ADDR_OWVAR 20
6262: PUSH
6263: LD_INT 3
6265: ST_TO_ADDR
// uc_nation := 3 ;
6266: LD_ADDR_OWVAR 21
6270: PUSH
6271: LD_INT 3
6273: ST_TO_ADDR
// for i := 1 to 2 do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: DOUBLE
6280: LD_INT 1
6282: DEC
6283: ST_TO_ADDR
6284: LD_INT 2
6286: PUSH
6287: FOR_TO
6288: IFFALSE 6402
// begin InitHC_All ( ) ;
6290: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6294: LD_INT 0
6296: PPUSH
6297: LD_INT 4
6299: PUSH
6300: LD_INT 5
6302: PUSH
6303: LD_INT 6
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: LD_OWVAR 67
6319: ARRAY
6320: PPUSH
6321: CALL_OW 381
// un := CreateHuman ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: CALL_OW 44
6334: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: LD_INT 91
6342: PPUSH
6343: LD_INT 87
6345: PPUSH
6346: LD_INT 3
6348: PPUSH
6349: LD_INT 0
6351: PPUSH
6352: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6356: LD_ADDR_EXP 48
6360: PUSH
6361: LD_EXP 48
6365: PPUSH
6366: LD_EXP 48
6370: PUSH
6371: LD_INT 1
6373: PLUS
6374: PPUSH
6375: LD_VAR 0 2
6379: PPUSH
6380: CALL_OW 1
6384: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6385: LD_VAR 0 2
6389: PPUSH
6390: LD_INT 46
6392: PPUSH
6393: LD_INT 78
6395: PPUSH
6396: CALL_OW 114
// end ;
6400: GO 6287
6402: POP
6403: POP
// if Difficulty > 2 then
6404: LD_OWVAR 67
6408: PUSH
6409: LD_INT 2
6411: GREATER
6412: IFFALSE 6544
// begin for i := 1 to 3 do
6414: LD_ADDR_VAR 0 1
6418: PUSH
6419: DOUBLE
6420: LD_INT 1
6422: DEC
6423: ST_TO_ADDR
6424: LD_INT 3
6426: PUSH
6427: FOR_TO
6428: IFFALSE 6542
// begin InitHC_All ( ) ;
6430: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6434: LD_INT 0
6436: PPUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PUSH
6455: LD_OWVAR 67
6459: ARRAY
6460: PPUSH
6461: CALL_OW 381
// un := CreateHuman ;
6465: LD_ADDR_VAR 0 2
6469: PUSH
6470: CALL_OW 44
6474: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6475: LD_VAR 0 2
6479: PPUSH
6480: LD_INT 91
6482: PPUSH
6483: LD_INT 87
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: LD_INT 0
6491: PPUSH
6492: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6496: LD_ADDR_EXP 48
6500: PUSH
6501: LD_EXP 48
6505: PPUSH
6506: LD_EXP 48
6510: PUSH
6511: LD_INT 1
6513: PLUS
6514: PPUSH
6515: LD_VAR 0 2
6519: PPUSH
6520: CALL_OW 1
6524: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6525: LD_VAR 0 2
6529: PPUSH
6530: LD_INT 89
6532: PPUSH
6533: LD_INT 148
6535: PPUSH
6536: CALL_OW 114
// end ;
6540: GO 6427
6542: POP
6543: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6544: LD_ADDR_VAR 0 3
6548: PUSH
6549: LD_INT 33
6551: PUSH
6552: LD_INT 61
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 49
6561: PUSH
6562: LD_INT 85
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 76
6571: PUSH
6572: LD_INT 99
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 81
6581: PUSH
6582: LD_INT 135
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 111
6591: PUSH
6592: LD_INT 155
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 147
6601: PUSH
6602: LD_INT 158
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6617: LD_INT 1050
6619: PPUSH
6620: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6624: LD_ADDR_VAR 0 1
6628: PUSH
6629: DOUBLE
6630: LD_INT 1
6632: DEC
6633: ST_TO_ADDR
6634: LD_EXP 48
6638: PUSH
6639: FOR_TO
6640: IFFALSE 6807
// begin un := ruAttackersInForest [ i ] ;
6642: LD_ADDR_VAR 0 2
6646: PUSH
6647: LD_EXP 48
6651: PUSH
6652: LD_VAR 0 1
6656: ARRAY
6657: ST_TO_ADDR
// tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 4
6662: PUSH
6663: LD_VAR 0 2
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6673: LD_VAR 0 2
6677: PPUSH
6678: CALL_OW 302
6682: PUSH
6683: LD_VAR 0 2
6687: PPUSH
6688: CALL_OW 314
6692: NOT
6693: AND
6694: IFFALSE 6805
// begin if tag <> i then
6696: LD_VAR 0 4
6700: PUSH
6701: LD_VAR 0 1
6705: NONEQUAL
6706: IFFALSE 6734
// begin SetTag ( un , i ) ;
6708: LD_VAR 0 2
6712: PPUSH
6713: LD_VAR 0 1
6717: PPUSH
6718: CALL_OW 109
// tag := i ;
6722: LD_ADDR_VAR 0 4
6726: PUSH
6727: LD_VAR 0 1
6731: ST_TO_ADDR
// end else
6732: GO 6766
// begin SetTag ( un , i + 1 ) ;
6734: LD_VAR 0 2
6738: PPUSH
6739: LD_VAR 0 1
6743: PUSH
6744: LD_INT 1
6746: PLUS
6747: PPUSH
6748: CALL_OW 109
// tag := i + 1 ;
6752: LD_ADDR_VAR 0 4
6756: PUSH
6757: LD_VAR 0 1
6761: PUSH
6762: LD_INT 1
6764: PLUS
6765: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6766: LD_VAR 0 2
6770: PPUSH
6771: LD_VAR 0 3
6775: PUSH
6776: LD_VAR 0 4
6780: ARRAY
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PPUSH
6786: LD_VAR 0 3
6790: PUSH
6791: LD_VAR 0 4
6795: ARRAY
6796: PUSH
6797: LD_INT 2
6799: ARRAY
6800: PPUSH
6801: CALL_OW 114
// end ; end ;
6805: GO 6639
6807: POP
6808: POP
// until not ruAttackersInForest ;
6809: LD_EXP 48
6813: NOT
6814: IFFALSE 6617
// end ; end_of_file
6816: PPOPN 4
6818: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6819: LD_INT 0
6821: PPUSH
6822: PPUSH
6823: PPUSH
// if not characters then
6824: LD_VAR 0 1
6828: NOT
6829: IFFALSE 6833
// exit ;
6831: GO 6912
// speaker := characters [ rand ( 1 , characters ) ] ;
6833: LD_ADDR_VAR 0 6
6837: PUSH
6838: LD_VAR 0 1
6842: PUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_VAR 0 1
6850: PPUSH
6851: CALL_OW 12
6855: ARRAY
6856: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6857: LD_VAR 0 6
6861: PPUSH
6862: CALL_OW 258
6866: PUSH
6867: LD_INT 1
6869: EQUAL
6870: IFFALSE 6888
// Say ( speaker , dialogMID ) else
6872: LD_VAR 0 6
6876: PPUSH
6877: LD_VAR 0 2
6881: PPUSH
6882: CALL_OW 88
6886: GO 6902
// Say ( speaker , dialogFID ) ;
6888: LD_VAR 0 6
6892: PPUSH
6893: LD_VAR 0 3
6897: PPUSH
6898: CALL_OW 88
// result := speaker ;
6902: LD_ADDR_VAR 0 4
6906: PUSH
6907: LD_VAR 0 6
6911: ST_TO_ADDR
// end ;
6912: LD_VAR 0 4
6916: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6917: LD_INT 0
6919: PPUSH
6920: PPUSH
// for i in charactersList do
6921: LD_ADDR_VAR 0 4
6925: PUSH
6926: LD_VAR 0 1
6930: PUSH
6931: FOR_IN
6932: IFFALSE 6950
// SaveCharacters ( i , ident ) ;
6934: LD_VAR 0 4
6938: PPUSH
6939: LD_VAR 0 2
6943: PPUSH
6944: CALL_OW 38
6948: GO 6931
6950: POP
6951: POP
// end ;
6952: LD_VAR 0 3
6956: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6957: LD_INT 0
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
// for i = 1 to count do
6963: LD_ADDR_VAR 0 8
6967: PUSH
6968: DOUBLE
6969: LD_INT 1
6971: DEC
6972: ST_TO_ADDR
6973: LD_VAR 0 6
6977: PUSH
6978: FOR_TO
6979: IFFALSE 7060
// begin uc_side = side ;
6981: LD_ADDR_OWVAR 20
6985: PUSH
6986: LD_VAR 0 1
6990: ST_TO_ADDR
// uc_nation = nation ;
6991: LD_ADDR_OWVAR 21
6995: PUSH
6996: LD_VAR 0 2
7000: ST_TO_ADDR
// hc_gallery =  ;
7001: LD_ADDR_OWVAR 33
7005: PUSH
7006: LD_STRING 
7008: ST_TO_ADDR
// hc_name =  ;
7009: LD_ADDR_OWVAR 26
7013: PUSH
7014: LD_STRING 
7016: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7017: LD_INT 0
7019: PPUSH
7020: LD_VAR 0 5
7024: PPUSH
7025: LD_VAR 0 4
7029: PPUSH
7030: CALL_OW 380
// un = CreateHuman ;
7034: LD_ADDR_VAR 0 10
7038: PUSH
7039: CALL_OW 44
7043: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7044: LD_VAR 0 10
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: CALL_OW 52
// end ;
7058: GO 6978
7060: POP
7061: POP
// end ;
7062: LD_VAR 0 7
7066: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7067: LD_INT 0
7069: PPUSH
7070: PPUSH
7071: PPUSH
// uc_side := GetSide ( b ) ;
7072: LD_ADDR_OWVAR 20
7076: PUSH
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 255
7086: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7087: LD_ADDR_OWVAR 21
7091: PUSH
7092: LD_VAR 0 2
7096: PPUSH
7097: CALL_OW 248
7101: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7102: LD_INT 0
7104: PPUSH
7105: LD_INT 1
7107: PPUSH
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_VAR 0 2
7126: PPUSH
7127: CALL_OW 254
7131: PUSH
7132: LD_INT 3
7134: MINUS
7135: ST_TO_ADDR
// if dir < 0 then
7136: LD_VAR 0 5
7140: PUSH
7141: LD_INT 0
7143: LESS
7144: IFFALSE 7160
// dir := 6 + dir ;
7146: LD_ADDR_VAR 0 5
7150: PUSH
7151: LD_INT 6
7153: PUSH
7154: LD_VAR 0 5
7158: PLUS
7159: ST_TO_ADDR
// un := CreateHuman ;
7160: LD_ADDR_VAR 0 4
7164: PUSH
7165: CALL_OW 44
7169: ST_TO_ADDR
// SetDir ( un , dir ) ;
7170: LD_VAR 0 4
7174: PPUSH
7175: LD_VAR 0 5
7179: PPUSH
7180: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7184: LD_VAR 0 4
7188: PPUSH
7189: LD_VAR 0 2
7193: PPUSH
7194: CALL_OW 52
// end ;
7198: LD_VAR 0 3
7202: RET
// export function PrepareDifficulty ; begin
7203: LD_INT 0
7205: PPUSH
// case Difficulty of 1 :
7206: LD_OWVAR 67
7210: PUSH
7211: LD_INT 1
7213: DOUBLE
7214: EQUAL
7215: IFTRUE 7219
7217: GO 7238
7219: POP
// begin RuSolMinLevel = 2 ;
7220: LD_ADDR_EXP 34
7224: PUSH
7225: LD_INT 2
7227: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7228: LD_ADDR_EXP 35
7232: PUSH
7233: LD_INT 3
7235: ST_TO_ADDR
// end ; 2 :
7236: GO 7299
7238: LD_INT 2
7240: DOUBLE
7241: EQUAL
7242: IFTRUE 7246
7244: GO 7265
7246: POP
// begin RuSolMinLevel = 3 ;
7247: LD_ADDR_EXP 34
7251: PUSH
7252: LD_INT 3
7254: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7255: LD_ADDR_EXP 35
7259: PUSH
7260: LD_INT 5
7262: ST_TO_ADDR
// end ; 3 .. 4 :
7263: GO 7299
7265: LD_INT 3
7267: DOUBLE
7268: GREATEREQUAL
7269: IFFALSE 7277
7271: LD_INT 4
7273: DOUBLE
7274: LESSEQUAL
7275: IFTRUE 7279
7277: GO 7298
7279: POP
// begin RuSolMinLevel = 4 ;
7280: LD_ADDR_EXP 34
7284: PUSH
7285: LD_INT 4
7287: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7288: LD_ADDR_EXP 35
7292: PUSH
7293: LD_INT 6
7295: ST_TO_ADDR
// end ; end ;
7296: GO 7299
7298: POP
// end ;
7299: LD_VAR 0 1
7303: RET
// export function ShowQuery1 ; begin
7304: LD_INT 0
7306: PPUSH
// result := Query ( QKill ) ;
7307: LD_ADDR_VAR 0 1
7311: PUSH
7312: LD_STRING QKill
7314: PPUSH
7315: CALL_OW 97
7319: ST_TO_ADDR
// end ;
7320: LD_VAR 0 1
7324: RET
// export function ShowQuery2 ; begin
7325: LD_INT 0
7327: PPUSH
// result := Query ( QKill2 ) ;
7328: LD_ADDR_VAR 0 1
7332: PUSH
7333: LD_STRING QKill2
7335: PPUSH
7336: CALL_OW 97
7340: ST_TO_ADDR
// end ;
7341: LD_VAR 0 1
7345: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7346: LD_INT 0
7348: PPUSH
7349: PPUSH
7350: PPUSH
7351: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
7352: LD_ADDR_VAR 0 7
7356: PUSH
7357: LD_INT 48
7359: PUSH
7360: LD_INT 49
7362: PUSH
7363: LD_INT 50
7365: PUSH
7366: LD_INT 20
7368: PUSH
7369: LD_INT 1
7371: PUSH
7372: LD_INT 51
7374: PUSH
7375: LD_INT 52
7377: PUSH
7378: LD_INT 69
7380: PUSH
7381: LD_INT 39
7383: PUSH
7384: LD_INT 34
7386: PUSH
7387: LD_INT 40
7389: PUSH
7390: LD_INT 53
7392: PUSH
7393: LD_INT 71
7395: PUSH
7396: LD_INT 57
7398: PUSH
7399: LD_INT 58
7401: PUSH
7402: LD_INT 44
7404: PUSH
7405: LD_INT 32
7407: PUSH
7408: LD_INT 27
7410: PUSH
7411: LD_INT 23
7413: PUSH
7414: LD_INT 33
7416: PUSH
7417: LD_INT 59
7419: PUSH
7420: LD_INT 54
7422: PUSH
7423: LD_INT 55
7425: PUSH
7426: LD_INT 56
7428: PUSH
7429: LD_INT 63
7431: PUSH
7432: LD_INT 64
7434: PUSH
7435: LD_INT 65
7437: PUSH
7438: LD_INT 30
7440: PUSH
7441: LD_INT 31
7443: PUSH
7444: LD_INT 21
7446: PUSH
7447: LD_INT 22
7449: PUSH
7450: LD_INT 25
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: ST_TO_ADDR
// for i = 1 to list do
7487: LD_ADDR_VAR 0 5
7491: PUSH
7492: DOUBLE
7493: LD_INT 1
7495: DEC
7496: ST_TO_ADDR
7497: LD_VAR 0 7
7501: PUSH
7502: FOR_TO
7503: IFFALSE 7575
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7505: LD_VAR 0 7
7509: PUSH
7510: LD_VAR 0 5
7514: ARRAY
7515: PPUSH
7516: LD_VAR 0 1
7520: PPUSH
7521: CALL_OW 321
7525: PUSH
7526: LD_INT 1
7528: EQUAL
7529: PUSH
7530: LD_VAR 0 7
7534: PUSH
7535: LD_VAR 0 5
7539: ARRAY
7540: PPUSH
7541: LD_VAR 0 3
7545: PPUSH
7546: CALL_OW 482
7550: AND
7551: IFFALSE 7573
// AddComResearch ( lab , list [ i ] ) ;
7553: LD_VAR 0 2
7557: PPUSH
7558: LD_VAR 0 7
7562: PUSH
7563: LD_VAR 0 5
7567: ARRAY
7568: PPUSH
7569: CALL_OW 184
7573: GO 7502
7575: POP
7576: POP
// end ;
7577: LD_VAR 0 4
7581: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7582: LD_INT 0
7584: PPUSH
7585: PPUSH
7586: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7587: LD_INT 22
7589: PUSH
7590: LD_VAR 0 1
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 2
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 69
7617: PUSH
7618: LD_VAR 0 3
7622: LESSEQUAL
7623: IFFALSE 7731
// begin for i = 1 to vehCount do
7625: LD_ADDR_VAR 0 9
7629: PUSH
7630: DOUBLE
7631: LD_INT 1
7633: DEC
7634: ST_TO_ADDR
7635: LD_VAR 0 3
7639: PUSH
7640: FOR_TO
7641: IFFALSE 7729
// begin weapon := weaponTab [ i ] ;
7643: LD_ADDR_VAR 0 10
7647: PUSH
7648: LD_VAR 0 4
7652: PUSH
7653: LD_VAR 0 9
7657: ARRAY
7658: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7659: LD_VAR 0 10
7663: PUSH
7664: LD_INT 46
7666: EQUAL
7667: IFFALSE 7698
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7669: LD_VAR 0 2
7673: PPUSH
7674: LD_INT 24
7676: PPUSH
7677: LD_VAR 0 5
7681: PPUSH
7682: LD_VAR 0 6
7686: PPUSH
7687: LD_VAR 0 10
7691: PPUSH
7692: CALL_OW 185
7696: GO 7727
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7698: LD_VAR 0 2
7702: PPUSH
7703: LD_VAR 0 7
7707: PPUSH
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_VAR 0 6
7717: PPUSH
7718: LD_VAR 0 10
7722: PPUSH
7723: CALL_OW 185
// end ;
7727: GO 7640
7729: POP
7730: POP
// end ; end ;
7731: LD_VAR 0 8
7735: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7736: LD_INT 0
7738: PPUSH
7739: PPUSH
7740: PPUSH
7741: PPUSH
7742: PPUSH
7743: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7744: LD_ADDR_VAR 0 8
7748: PUSH
7749: LD_VAR 0 2
7753: PPUSH
7754: CALL_OW 313
7758: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7759: LD_ADDR_VAR 0 9
7763: PUSH
7764: LD_VAR 0 3
7768: PPUSH
7769: LD_INT 22
7771: PUSH
7772: LD_VAR 0 1
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 25
7783: PUSH
7784: LD_INT 2
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 24
7793: PUSH
7794: LD_INT 750
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 3
7803: PUSH
7804: LD_INT 54
7806: PUSH
7807: EMPTY
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: PPUSH
7820: CALL_OW 70
7824: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7825: LD_ADDR_VAR 0 6
7829: PUSH
7830: LD_VAR 0 3
7834: PPUSH
7835: LD_INT 22
7837: PUSH
7838: LD_VAR 0 1
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: LD_INT 21
7849: PUSH
7850: LD_INT 3
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: LD_INT 24
7862: PUSH
7863: LD_INT 1000
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: LIST
7878: PUSH
7879: EMPTY
7880: LIST
7881: PPUSH
7882: CALL_OW 70
7886: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7887: LD_VAR 0 6
7891: NOT
7892: PUSH
7893: LD_INT 22
7895: PUSH
7896: LD_VAR 0 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 24
7917: PUSH
7918: LD_INT 250
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: PPUSH
7930: CALL_OW 69
7934: NOT
7935: AND
7936: IFFALSE 7940
// exit ;
7938: GO 8098
// if buildingsList and engineerOkInside then
7940: LD_VAR 0 6
7944: PUSH
7945: LD_VAR 0 8
7949: AND
7950: IFFALSE 7961
// ComExitBuilding ( engineerOkInside ) ;
7952: LD_VAR 0 8
7956: PPUSH
7957: CALL_OW 122
// if buildingsList and engineerOkOutside then
7961: LD_VAR 0 6
7965: PUSH
7966: LD_VAR 0 9
7970: AND
7971: IFFALSE 7991
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7973: LD_VAR 0 9
7977: PPUSH
7978: LD_VAR 0 6
7982: PUSH
7983: LD_INT 1
7985: ARRAY
7986: PPUSH
7987: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
7991: LD_VAR 0 6
7995: PUSH
7996: LD_INT 0
7998: EQUAL
7999: PUSH
8000: LD_VAR 0 4
8004: PUSH
8005: LD_INT 0
8007: EQUAL
8008: AND
8009: PUSH
8010: LD_VAR 0 9
8014: AND
8015: IFFALSE 8031
// ComEnterUnit ( engineerOkOutside , depot ) ;
8017: LD_VAR 0 9
8021: PPUSH
8022: LD_VAR 0 2
8026: PPUSH
8027: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8031: LD_VAR 0 9
8035: PUSH
8036: LD_VAR 0 6
8040: PUSH
8041: LD_INT 0
8043: EQUAL
8044: AND
8045: PUSH
8046: LD_VAR 0 4
8050: AND
8051: IFFALSE 8098
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8053: LD_VAR 0 9
8057: PPUSH
8058: LD_VAR 0 4
8062: PUSH
8063: LD_INT 1
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 4
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: PPUSH
8076: LD_VAR 0 4
8080: PUSH
8081: LD_INT 3
8083: ARRAY
8084: PPUSH
8085: LD_VAR 0 4
8089: PUSH
8090: LD_INT 4
8092: ARRAY
8093: PPUSH
8094: CALL_OW 145
// end ;
8098: LD_VAR 0 5
8102: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8103: LD_INT 0
8105: PPUSH
8106: PPUSH
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
8111: PPUSH
8112: PPUSH
8113: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8114: LD_ADDR_VAR 0 6
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_VAR 0 1
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 25
8133: PUSH
8134: LD_INT 4
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 23
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 24
8153: PUSH
8154: LD_INT 251
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8172: LD_ADDR_VAR 0 7
8176: PUSH
8177: LD_VAR 0 3
8181: PPUSH
8182: LD_INT 22
8184: PUSH
8185: LD_VAR 0 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 23
8196: PUSH
8197: LD_INT 2
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 25
8206: PUSH
8207: LD_INT 4
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 50
8216: PUSH
8217: EMPTY
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 70
8230: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8231: LD_ADDR_VAR 0 10
8235: PUSH
8236: LD_VAR 0 3
8240: PPUSH
8241: LD_INT 22
8243: PUSH
8244: LD_VAR 0 1
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: LD_INT 21
8255: PUSH
8256: LD_INT 1
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: LD_INT 25
8268: PUSH
8269: LD_INT 3
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 3
8282: PUSH
8283: LD_INT 24
8285: PUSH
8286: LD_INT 750
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: PPUSH
8303: CALL_OW 70
8307: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8308: LD_ADDR_VAR 0 11
8312: PUSH
8313: LD_VAR 0 2
8317: PPUSH
8318: LD_INT 22
8320: PUSH
8321: LD_VAR 0 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 21
8332: PUSH
8333: LD_INT 1
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 3
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: LD_INT 3
8359: PUSH
8360: LD_INT 24
8362: PUSH
8363: LD_INT 1000
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: PPUSH
8380: CALL_OW 70
8384: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8385: LD_VAR 0 10
8389: NOT
8390: PUSH
8391: LD_VAR 0 11
8395: NOT
8396: AND
8397: PUSH
8398: LD_VAR 0 6
8402: NOT
8403: AND
8404: IFFALSE 8408
// exit ;
8406: GO 8614
// if damageUnits and sci_list then
8408: LD_VAR 0 10
8412: PUSH
8413: LD_VAR 0 6
8417: AND
8418: IFFALSE 8434
// ComMoveToArea ( damageUnits , healArea ) ;
8420: LD_VAR 0 10
8424: PPUSH
8425: LD_VAR 0 2
8429: PPUSH
8430: CALL_OW 113
// if unitsToHeal and sci_list then
8434: LD_VAR 0 11
8438: PUSH
8439: LD_VAR 0 6
8443: AND
8444: IFFALSE 8455
// ComExitBuilding ( sci_list ) ;
8446: LD_VAR 0 6
8450: PPUSH
8451: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8455: LD_VAR 0 11
8459: PUSH
8460: LD_VAR 0 7
8464: AND
8465: IFFALSE 8485
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8467: LD_VAR 0 7
8471: PPUSH
8472: LD_VAR 0 11
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: PPUSH
8481: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8485: LD_VAR 0 10
8489: PUSH
8490: LD_INT 0
8492: EQUAL
8493: PUSH
8494: LD_VAR 0 11
8498: PUSH
8499: LD_INT 0
8501: EQUAL
8502: AND
8503: PUSH
8504: LD_VAR 0 7
8508: AND
8509: IFFALSE 8614
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8511: LD_ADDR_VAR 0 12
8515: PUSH
8516: LD_INT 22
8518: PUSH
8519: LD_VAR 0 1
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 21
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 30
8540: PUSH
8541: LD_INT 8
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 69
8557: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8558: LD_ADDR_VAR 0 13
8562: PUSH
8563: LD_INT 1
8565: PPUSH
8566: LD_VAR 0 12
8570: PPUSH
8571: CALL_OW 12
8575: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8576: LD_VAR 0 7
8580: PPUSH
8581: LD_INT 3
8583: PUSH
8584: LD_INT 60
8586: PUSH
8587: EMPTY
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PPUSH
8594: CALL_OW 72
8598: PPUSH
8599: LD_VAR 0 12
8603: PUSH
8604: LD_VAR 0 13
8608: ARRAY
8609: PPUSH
8610: CALL_OW 120
// end ; end ;
8614: LD_VAR 0 5
8618: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8619: LD_INT 0
8621: PPUSH
8622: PPUSH
8623: PPUSH
8624: PPUSH
8625: PPUSH
// tmp := [ ] ;
8626: LD_ADDR_VAR 0 6
8630: PUSH
8631: EMPTY
8632: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8633: LD_ADDR_VAR 0 7
8637: PUSH
8638: LD_INT 22
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 30
8652: PUSH
8653: LD_INT 32
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PPUSH
8664: CALL_OW 69
8668: ST_TO_ADDR
// if bunkers then
8669: LD_VAR 0 7
8673: IFFALSE 8743
// for i in bunkers do
8675: LD_ADDR_VAR 0 4
8679: PUSH
8680: LD_VAR 0 7
8684: PUSH
8685: FOR_IN
8686: IFFALSE 8741
// for j in UnitsInside ( i ) do
8688: LD_ADDR_VAR 0 5
8692: PUSH
8693: LD_VAR 0 4
8697: PPUSH
8698: CALL_OW 313
8702: PUSH
8703: FOR_IN
8704: IFFALSE 8737
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8706: LD_ADDR_VAR 0 6
8710: PUSH
8711: LD_VAR 0 6
8715: PPUSH
8716: LD_VAR 0 6
8720: PUSH
8721: LD_INT 1
8723: PLUS
8724: PPUSH
8725: LD_VAR 0 5
8729: PPUSH
8730: CALL_OW 1
8734: ST_TO_ADDR
8735: GO 8703
8737: POP
8738: POP
8739: GO 8685
8741: POP
8742: POP
// if tmp then
8743: LD_VAR 0 6
8747: IFFALSE 8787
// begin ComExitBuilding ( tmp ) ;
8749: LD_VAR 0 6
8753: PPUSH
8754: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8758: LD_VAR 0 6
8762: PPUSH
8763: LD_VAR 0 2
8767: PPUSH
8768: CALL_OW 250
8772: PPUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 251
8782: PPUSH
8783: CALL_OW 174
// end ; end ;
8787: LD_VAR 0 3
8791: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8792: LD_INT 0
8794: PPUSH
8795: PPUSH
8796: PPUSH
// enable ;
8797: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8798: LD_ADDR_VAR 0 6
8802: PUSH
8803: LD_VAR 0 3
8807: PPUSH
8808: CALL_OW 435
8812: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8813: LD_ADDR_VAR 0 5
8817: PUSH
8818: LD_INT 22
8820: PUSH
8821: LD_VAR 0 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 34
8832: PUSH
8833: LD_VAR 0 2
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 69
8850: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8851: LD_VAR 0 5
8855: PUSH
8856: LD_VAR 0 3
8860: PPUSH
8861: CALL_OW 435
8865: AND
8866: PUSH
8867: LD_VAR 0 6
8871: AND
8872: IFFALSE 8905
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 6
8887: PUSH
8888: LD_INT 1
8890: ARRAY
8891: PPUSH
8892: LD_VAR 0 6
8896: PUSH
8897: LD_INT 2
8899: ARRAY
8900: PPUSH
8901: CALL_OW 177
// end ;
8905: LD_VAR 0 4
8909: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8910: LD_INT 0
8912: PPUSH
8913: PPUSH
8914: PPUSH
8915: PPUSH
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8920: LD_ADDR_VAR 0 6
8924: PUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: LD_INT 22
8932: PUSH
8933: LD_VAR 0 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: LD_INT 56
8944: PUSH
8945: EMPTY
8946: LIST
8947: PUSH
8948: LD_INT 24
8950: PUSH
8951: LD_INT 700
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 3
8960: PUSH
8961: LD_INT 60
8963: PUSH
8964: EMPTY
8965: LIST
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 2
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: LD_INT 1
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: LD_INT 25
8986: PUSH
8987: LD_INT 5
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 25
8996: PUSH
8997: LD_INT 8
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 25
9006: PUSH
9007: LD_INT 9
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 70
9032: PUSH
9033: LD_EXP 47
9037: PUSH
9038: LD_EXP 48
9042: UNION
9043: DIFF
9044: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9045: LD_ADDR_VAR 0 7
9049: PUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: LD_INT 22
9057: PUSH
9058: LD_VAR 0 1
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PUSH
9067: LD_INT 30
9069: PUSH
9070: LD_INT 32
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 58
9079: PUSH
9080: EMPTY
9081: LIST
9082: PUSH
9083: LD_INT 24
9085: PUSH
9086: LD_INT 251
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: PPUSH
9099: CALL_OW 70
9103: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9104: LD_ADDR_VAR 0 9
9108: PUSH
9109: LD_VAR 0 2
9113: PPUSH
9114: LD_INT 22
9116: PUSH
9117: LD_VAR 0 1
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 2
9128: PUSH
9129: LD_INT 30
9131: PUSH
9132: LD_INT 4
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 5
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: LIST
9153: PUSH
9154: LD_INT 24
9156: PUSH
9157: LD_INT 251
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: LIST
9168: PPUSH
9169: CALL_OW 70
9173: ST_TO_ADDR
// if barrackList then
9174: LD_VAR 0 9
9178: IFFALSE 9334
// begin if turretList = 0 then
9180: LD_VAR 0 7
9184: PUSH
9185: LD_INT 0
9187: EQUAL
9188: IFFALSE 9226
// begin if soldiersList then
9190: LD_VAR 0 6
9194: IFFALSE 9224
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9196: LD_VAR 0 6
9200: PPUSH
9201: LD_VAR 0 9
9205: PUSH
9206: LD_INT 1
9208: PPUSH
9209: LD_VAR 0 9
9213: PPUSH
9214: CALL_OW 12
9218: ARRAY
9219: PPUSH
9220: CALL_OW 120
// end else
9224: GO 9334
// begin for i in barrackList do
9226: LD_ADDR_VAR 0 4
9230: PUSH
9231: LD_VAR 0 9
9235: PUSH
9236: FOR_IN
9237: IFFALSE 9332
// begin if not turretList then
9239: LD_VAR 0 7
9243: NOT
9244: IFFALSE 9250
// exit ;
9246: POP
9247: POP
9248: GO 9334
// insideUnits = UnitsInside ( i ) ;
9250: LD_ADDR_VAR 0 10
9254: PUSH
9255: LD_VAR 0 4
9259: PPUSH
9260: CALL_OW 313
9264: ST_TO_ADDR
// if insideUnits then
9265: LD_VAR 0 10
9269: IFFALSE 9330
// begin tmp := insideUnits [ 1 ] ;
9271: LD_ADDR_VAR 0 8
9275: PUSH
9276: LD_VAR 0 10
9280: PUSH
9281: LD_INT 1
9283: ARRAY
9284: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9285: LD_VAR 0 8
9289: PPUSH
9290: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9294: LD_VAR 0 8
9298: PPUSH
9299: LD_VAR 0 7
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: PPUSH
9308: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9312: LD_ADDR_VAR 0 7
9316: PUSH
9317: LD_VAR 0 7
9321: PPUSH
9322: LD_INT 1
9324: PPUSH
9325: CALL_OW 3
9329: ST_TO_ADDR
// end ; end ;
9330: GO 9236
9332: POP
9333: POP
// end ; end ; end ;
9334: LD_VAR 0 3
9338: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9339: LD_INT 0
9341: PPUSH
9342: PPUSH
9343: PPUSH
9344: PPUSH
9345: PPUSH
9346: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9347: LD_ADDR_VAR 0 8
9351: PUSH
9352: LD_INT 22
9354: PUSH
9355: LD_VAR 0 1
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 21
9366: PUSH
9367: LD_INT 2
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 34
9376: PUSH
9377: LD_INT 52
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: LIST
9388: PPUSH
9389: CALL_OW 69
9393: ST_TO_ADDR
// if not craneList then
9394: LD_VAR 0 8
9398: NOT
9399: IFFALSE 9403
// exit ;
9401: GO 9837
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9403: LD_ADDR_VAR 0 9
9407: PUSH
9408: LD_INT 22
9410: PUSH
9411: LD_VAR 0 1
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 21
9422: PUSH
9423: LD_INT 3
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: LD_INT 24
9435: PUSH
9436: LD_INT 1000
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: PPUSH
9455: CALL_OW 69
9459: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9460: LD_VAR 0 9
9464: PUSH
9465: LD_VAR 0 8
9469: PPUSH
9470: LD_INT 24
9472: PUSH
9473: LD_INT 750
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PPUSH
9480: CALL_OW 72
9484: AND
9485: IFFALSE 9520
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9487: LD_VAR 0 8
9491: PPUSH
9492: LD_INT 24
9494: PUSH
9495: LD_INT 750
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PPUSH
9502: CALL_OW 72
9506: PPUSH
9507: LD_VAR 0 9
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9520: LD_VAR 0 8
9524: PPUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 24
9530: PUSH
9531: LD_INT 750
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PPUSH
9542: CALL_OW 72
9546: IFFALSE 9584
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9548: LD_VAR 0 8
9552: PPUSH
9553: LD_INT 3
9555: PUSH
9556: LD_INT 24
9558: PUSH
9559: LD_INT 750
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PPUSH
9570: CALL_OW 72
9574: PPUSH
9575: LD_VAR 0 2
9579: PPUSH
9580: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9584: LD_VAR 0 8
9588: PUSH
9589: LD_VAR 0 9
9593: PUSH
9594: LD_INT 0
9596: EQUAL
9597: AND
9598: PUSH
9599: LD_VAR 0 3
9603: AND
9604: IFFALSE 9651
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9606: LD_VAR 0 8
9610: PPUSH
9611: LD_VAR 0 3
9615: PUSH
9616: LD_INT 1
9618: ARRAY
9619: PPUSH
9620: LD_VAR 0 3
9624: PUSH
9625: LD_INT 2
9627: ARRAY
9628: PPUSH
9629: LD_VAR 0 3
9633: PUSH
9634: LD_INT 3
9636: ARRAY
9637: PPUSH
9638: LD_VAR 0 3
9642: PUSH
9643: LD_INT 4
9645: ARRAY
9646: PPUSH
9647: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9651: LD_ADDR_VAR 0 7
9655: PUSH
9656: LD_VAR 0 2
9660: PPUSH
9661: LD_INT 22
9663: PUSH
9664: LD_VAR 0 1
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 21
9675: PUSH
9676: LD_INT 2
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 34
9685: PUSH
9686: LD_INT 52
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: LD_INT 24
9698: PUSH
9699: LD_INT 750
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 70
9720: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9721: LD_ADDR_VAR 0 6
9725: PUSH
9726: LD_VAR 0 2
9730: PPUSH
9731: LD_INT 22
9733: PUSH
9734: LD_VAR 0 1
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 2
9745: PUSH
9746: LD_INT 30
9748: PUSH
9749: LD_INT 0
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 30
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PPUSH
9775: CALL_OW 70
9779: ST_TO_ADDR
// if crane then
9780: LD_VAR 0 7
9784: IFFALSE 9837
// for i in crane do
9786: LD_ADDR_VAR 0 5
9790: PUSH
9791: LD_VAR 0 7
9795: PUSH
9796: FOR_IN
9797: IFFALSE 9835
// begin if dep then
9799: LD_VAR 0 6
9803: IFFALSE 9819
// ComMoveUnit ( i , dep ) ;
9805: LD_VAR 0 5
9809: PPUSH
9810: LD_VAR 0 6
9814: PPUSH
9815: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9819: LD_VAR 0 5
9823: PPUSH
9824: CALL_OW 311
9828: PPUSH
9829: CALL 76624 0 1
// end ;
9833: GO 9796
9835: POP
9836: POP
// end ; end_of_file
9837: LD_VAR 0 4
9841: RET
// export function Action ; begin
9842: LD_INT 0
9844: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
9845: LD_INT 66
9847: PPUSH
9848: LD_INT 4
9850: PPUSH
9851: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
9855: LD_INT 22
9857: PUSH
9858: LD_INT 1
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 25
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PPUSH
9879: CALL_OW 69
9883: PUSH
9884: LD_INT 0
9886: EQUAL
9887: IFFALSE 9901
// SetClass ( JMM , 2 ) ;
9889: LD_EXP 1
9893: PPUSH
9894: LD_INT 2
9896: PPUSH
9897: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
9901: LD_STRING M1
9903: PPUSH
9904: CALL_OW 337
// case Difficulty of 1 :
9908: LD_OWVAR 67
9912: PUSH
9913: LD_INT 1
9915: DOUBLE
9916: EQUAL
9917: IFTRUE 9921
9919: GO 9931
9921: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
9922: LD_STRING M1-1
9924: PPUSH
9925: CALL_OW 337
9929: GO 9974
9931: LD_INT 2
9933: DOUBLE
9934: EQUAL
9935: IFTRUE 9939
9937: GO 9949
9939: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
9940: LD_STRING M1-2
9942: PPUSH
9943: CALL_OW 337
9947: GO 9974
9949: LD_INT 3
9951: DOUBLE
9952: GREATEREQUAL
9953: IFFALSE 9961
9955: LD_INT 4
9957: DOUBLE
9958: LESSEQUAL
9959: IFTRUE 9963
9961: GO 9973
9963: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
9964: LD_STRING M1-3
9966: PPUSH
9967: CALL_OW 337
9971: GO 9974
9973: POP
// ChangeMissionObjectives ( M1cont ) ;
9974: LD_STRING M1cont
9976: PPUSH
9977: CALL_OW 337
// wait ( 0 0$2 ) ;
9981: LD_INT 70
9983: PPUSH
9984: CALL_OW 67
// SaveForQuickRestart ;
9988: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
9992: LD_INT 525
9994: PPUSH
9995: LD_INT 700
9997: PPUSH
9998: CALL_OW 12
10002: PPUSH
10003: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10007: LD_INT 5
10009: PPUSH
10010: LD_INT 82
10012: PPUSH
10013: LD_INT 38
10015: PPUSH
10016: LD_INT 10
10018: PPUSH
10019: LD_INT 1
10021: PPUSH
10022: CALL_OW 56
// wait ( 0 0$14 ) ;
10026: LD_INT 490
10028: PPUSH
10029: CALL_OW 67
// firstCrateSpawn := true ;
10033: LD_ADDR_EXP 40
10037: PUSH
10038: LD_INT 1
10040: ST_TO_ADDR
// end ;
10041: LD_VAR 0 1
10045: RET
// every 0 0$02 trigger firstCrateSpawn do
10046: LD_EXP 40
10050: IFFALSE 10413
10052: GO 10054
10054: DISABLE
// begin if IsOk ( Lisa ) then
10055: LD_EXP 2
10059: PPUSH
10060: CALL_OW 302
10064: IFFALSE 10080
// Say ( Lisa , DR0-Lisa-1 ) else
10066: LD_EXP 2
10070: PPUSH
10071: LD_STRING DR0-Lisa-1
10073: PPUSH
10074: CALL_OW 88
10078: GO 10226
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10080: LD_INT 22
10082: PUSH
10083: LD_INT 1
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 26
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 2
10112: PUSH
10113: LD_INT 25
10115: PUSH
10116: LD_INT 1
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 25
10125: PUSH
10126: LD_INT 2
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 25
10135: PUSH
10136: LD_INT 3
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 25
10145: PUSH
10146: LD_INT 4
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: PPUSH
10166: CALL_OW 69
10170: PUSH
10171: LD_EXP 1
10175: PUSH
10176: LD_EXP 8
10180: PUSH
10181: LD_EXP 5
10185: PUSH
10186: LD_EXP 6
10190: PUSH
10191: LD_EXP 7
10195: PUSH
10196: LD_EXP 4
10200: PUSH
10201: LD_EXP 3
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: DIFF
10215: PPUSH
10216: LD_STRING DR0-Sol1-1
10218: PPUSH
10219: LD_STRING DR0-Sol1-1
10221: PPUSH
10222: CALL 6819 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10226: LD_INT 22
10228: PUSH
10229: LD_INT 1
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 26
10248: PUSH
10249: LD_INT 1
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: LD_INT 25
10261: PUSH
10262: LD_INT 1
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 25
10271: PUSH
10272: LD_INT 2
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 25
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 25
10291: PUSH
10292: LD_INT 4
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: LD_EXP 1
10321: PUSH
10322: LD_EXP 8
10326: PUSH
10327: LD_EXP 5
10331: PUSH
10332: LD_EXP 2
10336: PUSH
10337: LD_EXP 6
10341: PUSH
10342: LD_EXP 7
10346: PUSH
10347: LD_EXP 4
10351: PUSH
10352: LD_EXP 3
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: DIFF
10367: PPUSH
10368: LD_STRING DR0-Sol2-1
10370: PPUSH
10371: LD_STRING DR0-Sol2-1
10373: PPUSH
10374: CALL 6819 0 3
// if IsOk ( Cyrus ) then
10378: LD_EXP 4
10382: PPUSH
10383: CALL_OW 302
10387: IFFALSE 10401
// Say ( Cyrus , DR0-Cyrus-1 ) ;
10389: LD_EXP 4
10393: PPUSH
10394: LD_STRING DR0-Cyrus-1
10396: PPUSH
10397: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
10401: LD_EXP 1
10405: PPUSH
10406: LD_STRING DR0-JMM-1
10408: PPUSH
10409: CALL_OW 88
// end ;
10413: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
10414: LD_EXP 5
10418: PPUSH
10419: CALL_OW 302
10423: PUSH
10424: LD_INT 22
10426: PUSH
10427: LD_INT 1
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 25
10436: PUSH
10437: LD_INT 16
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PPUSH
10448: CALL_OW 69
10452: PUSH
10453: LD_INT 0
10455: GREATER
10456: AND
10457: PUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 463
10465: NOT
10466: AND
10467: IFFALSE 10745
10469: GO 10471
10471: DISABLE
// begin DialogueOn ;
10472: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10476: LD_EXP 5
10480: PPUSH
10481: LD_STRING D10-Frank-1
10483: PPUSH
10484: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10488: LD_INT 22
10490: PUSH
10491: LD_INT 1
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 21
10500: PUSH
10501: LD_INT 1
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 2
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 1
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 25
10533: PUSH
10534: LD_INT 3
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: PUSH
10568: LD_EXP 1
10572: PUSH
10573: LD_EXP 5
10577: PUSH
10578: LD_EXP 2
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: DIFF
10588: PPUSH
10589: LD_STRING D10-Sol1-1
10591: PPUSH
10592: LD_STRING D10-FSol1-1
10594: PPUSH
10595: CALL 6819 0 3
// Say ( Frank , D10-Frank-2 ) ;
10599: LD_EXP 5
10603: PPUSH
10604: LD_STRING D10-Frank-2
10606: PPUSH
10607: CALL_OW 88
// if IsOK ( Lisa ) then
10611: LD_EXP 2
10615: PPUSH
10616: CALL_OW 302
10620: IFFALSE 10636
// begin Say ( Lisa , D10-Lisa-2 ) ;
10622: LD_EXP 2
10626: PPUSH
10627: LD_STRING D10-Lisa-2
10629: PPUSH
10630: CALL_OW 88
// end else
10634: GO 10741
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10636: LD_INT 22
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 21
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 2
10658: PUSH
10659: LD_INT 25
10661: PUSH
10662: LD_INT 1
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 25
10671: PUSH
10672: LD_INT 2
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: LD_INT 25
10681: PUSH
10682: LD_INT 3
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 25
10691: PUSH
10692: LD_INT 4
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: PPUSH
10711: CALL_OW 69
10715: PUSH
10716: LD_EXP 1
10720: PUSH
10721: LD_EXP 5
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: DIFF
10730: PPUSH
10731: LD_STRING D10-Sol1-2
10733: PPUSH
10734: LD_STRING D10-FSol1-2
10736: PPUSH
10737: CALL 6819 0 3
// end ; DialogueOff ;
10741: CALL_OW 7
// end ;
10745: END
// every 10 10$30 trigger not InBattle ( 1 ) do
10746: LD_INT 1
10748: PPUSH
10749: CALL_OW 463
10753: NOT
10754: IFFALSE 11049
10756: GO 10758
10758: DISABLE
// begin HarrisonSupport ;
10759: CALL 2491 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10763: LD_EXP 17
10767: PPUSH
10768: CALL_OW 310
10772: PPUSH
10773: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10777: LD_EXP 17
10781: PPUSH
10782: LD_STRING DEng-Eng1-1
10784: PPUSH
10785: CALL_OW 88
// wait ( 1 1$0 ) ;
10789: LD_INT 2100
10791: PPUSH
10792: CALL_OW 67
// DialogueOn ;
10796: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10800: LD_EXP 14
10804: PPUSH
10805: LD_STRING DRem-Har-1
10807: PPUSH
10808: CALL_OW 94
// if contactWithRussian = 1 then
10812: LD_EXP 22
10816: PUSH
10817: LD_INT 1
10819: EQUAL
10820: IFFALSE 10836
// begin Say ( JMM , DRem-JMM-1 ) ;
10822: LD_EXP 1
10826: PPUSH
10827: LD_STRING DRem-JMM-1
10829: PPUSH
10830: CALL_OW 88
// end else
10834: GO 10848
// begin Say ( JMM , DRem-JMM-1a ) ;
10836: LD_EXP 1
10840: PPUSH
10841: LD_STRING DRem-JMM-1a
10843: PPUSH
10844: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
10848: LD_EXP 14
10852: PPUSH
10853: LD_STRING DRem-Har-2
10855: PPUSH
10856: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
10860: LD_STRING DenisInDelta
10862: PPUSH
10863: LD_INT 0
10865: PPUSH
10866: CALL_OW 30
10870: PUSH
10871: LD_INT 1
10873: EQUAL
10874: IFFALSE 10890
// begin Say ( JMM , DRem-JMM-2 ) ;
10876: LD_EXP 1
10880: PPUSH
10881: LD_STRING DRem-JMM-2
10883: PPUSH
10884: CALL_OW 88
// end else
10888: GO 10902
// begin Say ( JMM , DRem-JMM-2a ) ;
10890: LD_EXP 1
10894: PPUSH
10895: LD_STRING DRem-JMM-2a
10897: PPUSH
10898: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
10902: LD_EXP 14
10906: PPUSH
10907: LD_STRING DRem-Har-3
10909: PPUSH
10910: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
10914: LD_EXP 1
10918: PPUSH
10919: LD_STRING DRem-JMM-3
10921: PPUSH
10922: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
10926: LD_EXP 14
10930: PPUSH
10931: LD_STRING DRem-Har-4
10933: PPUSH
10934: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
10938: LD_STRING DenisInDelta
10940: PPUSH
10941: LD_INT 0
10943: PPUSH
10944: CALL_OW 30
10948: PUSH
10949: LD_INT 1
10951: EQUAL
10952: IFFALSE 11012
// begin Say ( JMM , DRem-JMM-4 ) ;
10954: LD_EXP 1
10958: PPUSH
10959: LD_STRING DRem-JMM-4
10961: PPUSH
10962: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
10966: LD_EXP 14
10970: PPUSH
10971: LD_STRING DRem-Har-5
10973: PPUSH
10974: CALL_OW 94
// DialogueOff ;
10978: CALL_OW 7
// wait ( 4 4$00 ) ;
10982: LD_INT 8400
10984: PPUSH
10985: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10989: LD_INT 35
10991: PPUSH
10992: CALL_OW 67
// until not InBattle ( 1 ) ;
10996: LD_INT 1
10998: PPUSH
10999: CALL_OW 463
11003: NOT
11004: IFFALSE 10989
// SpawnDenis ;
11006: CALL 11050 0 0
// end else
11010: GO 11049
// begin DialogueOff ;
11012: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11016: LD_INT 36
11018: PPUSH
11019: LD_INT 1
11021: PPUSH
11022: LD_INT 1
11024: PPUSH
11025: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11029: LD_INT 15
11031: PPUSH
11032: LD_INT 1
11034: PPUSH
11035: LD_INT 1
11037: PPUSH
11038: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11042: LD_STRING MR
11044: PPUSH
11045: CALL_OW 337
// end ; end ;
11049: END
// export function SpawnDenis ; var tmp ; begin
11050: LD_INT 0
11052: PPUSH
11053: PPUSH
// PrepareDenis ;
11054: CALL 2199 0 0
// if not Denis then
11058: LD_EXP 9
11062: NOT
11063: IFFALSE 11067
// exit ;
11065: GO 11288
// CenterNowOnUnits ( Denis ) ;
11067: LD_EXP 9
11071: PPUSH
11072: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: LD_INT 22
11083: PUSH
11084: LD_INT 1
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11096: LD_EXP 9
11100: PPUSH
11101: LD_VAR 0 2
11105: PPUSH
11106: LD_EXP 9
11110: PPUSH
11111: CALL_OW 74
11115: PPUSH
11116: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11120: LD_INT 35
11122: PPUSH
11123: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11127: LD_INT 22
11129: PUSH
11130: LD_INT 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 91
11139: PUSH
11140: LD_EXP 9
11144: PUSH
11145: LD_INT 10
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PPUSH
11157: CALL_OW 69
11161: IFFALSE 11120
// SetSide ( Denis , 1 ) ;
11163: LD_EXP 9
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 235
// DialogueOn ;
11175: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11179: LD_EXP 9
11183: PPUSH
11184: LD_STRING DDen-Den-1
11186: PPUSH
11187: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11191: LD_EXP 1
11195: PPUSH
11196: LD_STRING DDen-JMM-1
11198: PPUSH
11199: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11203: LD_EXP 9
11207: PPUSH
11208: LD_STRING DDen-Den-2
11210: PPUSH
11211: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11215: LD_EXP 1
11219: PPUSH
11220: LD_STRING DDen-JMM-2
11222: PPUSH
11223: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11227: LD_EXP 9
11231: PPUSH
11232: LD_STRING DDen-Den-3
11234: PPUSH
11235: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11239: LD_EXP 1
11243: PPUSH
11244: LD_STRING DDen-JMM-3
11246: PPUSH
11247: CALL_OW 88
// DialogueOff ;
11251: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11255: LD_INT 36
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11268: LD_INT 15
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11281: LD_STRING MR
11283: PPUSH
11284: CALL_OW 337
// end ;
11288: LD_VAR 0 1
11292: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11293: LD_INT 22
11295: PUSH
11296: LD_INT 1
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 30
11305: PUSH
11306: LD_INT 15
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PPUSH
11317: CALL_OW 69
11321: PUSH
11322: LD_EXP 9
11326: PPUSH
11327: CALL_OW 302
11331: AND
11332: PUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 463
11340: NOT
11341: AND
11342: IFFALSE 11371
11344: GO 11346
11346: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11347: LD_EXP 9
11351: PPUSH
11352: LD_STRING DR1-Den-1
11354: PPUSH
11355: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11359: LD_EXP 1
11363: PPUSH
11364: LD_STRING DR1-JMM-1
11366: PPUSH
11367: CALL_OW 88
// end ;
11371: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
11372: LD_INT 15
11374: PPUSH
11375: LD_INT 1
11377: PPUSH
11378: CALL_OW 321
11382: PUSH
11383: LD_INT 2
11385: EQUAL
11386: PUSH
11387: LD_EXP 9
11391: PPUSH
11392: CALL_OW 302
11396: AND
11397: PUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 463
11405: NOT
11406: AND
11407: IFFALSE 11639
11409: GO 11411
11411: DISABLE
// begin DialogueOn ;
11412: CALL_OW 6
// if IsOK ( Denis ) then
11416: LD_EXP 9
11420: PPUSH
11421: CALL_OW 302
11425: IFFALSE 11441
// Say ( Denis , DR2-Den-1 ) else
11427: LD_EXP 9
11431: PPUSH
11432: LD_STRING DR2-Den-1
11434: PPUSH
11435: CALL_OW 88
11439: GO 11500
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11441: LD_INT 22
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 21
11453: PUSH
11454: LD_INT 1
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 25
11463: PUSH
11464: LD_INT 4
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: LIST
11475: PPUSH
11476: CALL_OW 69
11480: PUSH
11481: LD_EXP 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: DIFF
11489: PPUSH
11490: LD_STRING DR2-Sci1-1
11492: PPUSH
11493: LD_STRING DR2-FSci1-1
11495: PPUSH
11496: CALL 6819 0 3
// Say ( JMM , DR2-JMM-1 ) ;
11500: LD_EXP 1
11504: PPUSH
11505: LD_STRING DR2-JMM-1
11507: PPUSH
11508: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11512: LD_INT 22
11514: PUSH
11515: LD_INT 1
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 21
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 2
11534: PUSH
11535: LD_INT 25
11537: PUSH
11538: LD_INT 1
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 25
11547: PUSH
11548: LD_INT 2
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 3
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 25
11567: PUSH
11568: LD_INT 4
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 69
11591: PUSH
11592: LD_EXP 1
11596: PUSH
11597: LD_EXP 9
11601: PUSH
11602: LD_EXP 8
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: LIST
11611: DIFF
11612: PPUSH
11613: LD_STRING DR2-Sol1-1
11615: PPUSH
11616: LD_STRING DR2-Sol1-11
11618: PPUSH
11619: CALL 6819 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11623: LD_EXP 1
11627: PPUSH
11628: LD_STRING DR2-JMM-2
11630: PPUSH
11631: CALL_OW 88
// DialogueOff ;
11635: CALL_OW 7
// end ;
11639: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
11640: LD_INT 22
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 30
11652: PUSH
11653: LD_INT 36
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 69
11668: PUSH
11669: LD_INT 0
11671: EQUAL
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 1
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 21
11685: PUSH
11686: LD_INT 2
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 33
11695: PUSH
11696: LD_INT 2
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL_OW 69
11712: PUSH
11713: LD_INT 0
11715: GREATER
11716: AND
11717: PUSH
11718: LD_EXP 23
11722: PUSH
11723: LD_INT 0
11725: EQUAL
11726: AND
11727: PUSH
11728: LD_INT 1
11730: PPUSH
11731: CALL_OW 463
11735: NOT
11736: AND
11737: IFFALSE 11874
11739: GO 11741
11741: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11742: LD_INT 22
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 21
11754: PUSH
11755: LD_INT 1
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 25
11764: PUSH
11765: LD_INT 3
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 26
11774: PUSH
11775: LD_INT 1
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 69
11792: PUSH
11793: LD_EXP 1
11797: PUSH
11798: LD_EXP 6
11802: PUSH
11803: LD_EXP 7
11807: PUSH
11808: LD_EXP 9
11812: PUSH
11813: LD_EXP 15
11817: PUSH
11818: LD_EXP 3
11822: PUSH
11823: LD_EXP 4
11827: PUSH
11828: LD_EXP 2
11832: PUSH
11833: LD_EXP 5
11837: PUSH
11838: LD_EXP 8
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: DIFF
11855: PPUSH
11856: LD_STRING D3a-Mech1-1
11858: PPUSH
11859: LD_STRING D3a-Mech1-1
11861: PPUSH
11862: CALL 6819 0 3
// firstTower = 2 ;
11866: LD_ADDR_EXP 23
11870: PUSH
11871: LD_INT 2
11873: ST_TO_ADDR
// end ;
11874: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11875: LD_INT 22
11877: PUSH
11878: LD_INT 3
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 21
11887: PUSH
11888: LD_INT 3
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PPUSH
11899: CALL_OW 69
11903: PUSH
11904: LD_INT 0
11906: EQUAL
11907: IFFALSE 12022
11909: GO 11911
11911: DISABLE
11912: LD_INT 0
11914: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
11915: LD_ADDR_VAR 0 1
11919: PUSH
11920: LD_INT 22
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 21
11932: PUSH
11933: LD_INT 1
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: LD_INT 25
11945: PUSH
11946: LD_INT 1
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 25
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 3
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 4
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: PPUSH
11995: CALL_OW 69
11999: PUSH
12000: FOR_IN
12001: IFFALSE 12020
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12003: LD_VAR 0 1
12007: PPUSH
12008: LD_INT 1
12010: PPUSH
12011: LD_INT 7500
12013: PPUSH
12014: CALL_OW 591
12018: GO 12000
12020: POP
12021: POP
// end ;
12022: PPOPN 1
12024: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12025: LD_INT 22
12027: PUSH
12028: LD_INT 1
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 30
12037: PUSH
12038: LD_INT 36
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 69
12053: PUSH
12054: LD_INT 22
12056: PUSH
12057: LD_INT 1
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 21
12066: PUSH
12067: LD_INT 2
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: LD_INT 33
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: PPUSH
12089: CALL_OW 69
12093: AND
12094: PUSH
12095: CALL 12647 0 0
12099: AND
12100: PUSH
12101: LD_INT 1
12103: PPUSH
12104: CALL_OW 463
12108: NOT
12109: AND
12110: IFFALSE 12644
12112: GO 12114
12114: DISABLE
12115: LD_INT 0
12117: PPUSH
12118: PPUSH
12119: PPUSH
12120: PPUSH
12121: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12122: LD_ADDR_VAR 0 3
12126: PUSH
12127: LD_INT 22
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 30
12139: PUSH
12140: LD_INT 36
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PPUSH
12151: CALL_OW 69
12155: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12156: LD_ADDR_VAR 0 4
12160: PUSH
12161: LD_INT 22
12163: PUSH
12164: LD_INT 1
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 21
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 33
12183: PUSH
12184: LD_INT 2
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 69
12200: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12201: LD_ADDR_VAR 0 5
12205: PUSH
12206: EMPTY
12207: ST_TO_ADDR
// for i in tmpControlTowers do
12208: LD_ADDR_VAR 0 1
12212: PUSH
12213: LD_VAR 0 3
12217: PUSH
12218: FOR_IN
12219: IFFALSE 12642
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12221: LD_EXP 1
12225: PPUSH
12226: CALL_OW 310
12230: PUSH
12231: LD_VAR 0 1
12235: EQUAL
12236: PUSH
12237: LD_EXP 1
12241: PPUSH
12242: CALL_OW 257
12246: PUSH
12247: LD_INT 3
12249: EQUAL
12250: AND
12251: IFFALSE 12385
// begin InGameOn ;
12253: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12257: LD_VAR 0 4
12261: PUSH
12262: LD_INT 1
12264: ARRAY
12265: PPUSH
12266: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12270: LD_EXP 1
12274: PPUSH
12275: LD_STRING D4a-JMM-1
12277: PPUSH
12278: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12282: LD_VAR 0 4
12286: PUSH
12287: LD_INT 1
12289: ARRAY
12290: PPUSH
12291: LD_EXP 1
12295: PPUSH
12296: CALL_OW 53
// wait ( 0 0$1 ) ;
12300: LD_INT 35
12302: PPUSH
12303: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12307: LD_VAR 0 4
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PPUSH
12316: LD_VAR 0 4
12320: PUSH
12321: LD_INT 1
12323: ARRAY
12324: PPUSH
12325: CALL_OW 250
12329: PUSH
12330: LD_INT 3
12332: PLUS
12333: PPUSH
12334: LD_VAR 0 4
12338: PUSH
12339: LD_INT 1
12341: ARRAY
12342: PPUSH
12343: CALL_OW 251
12347: PUSH
12348: LD_INT 2
12350: MINUS
12351: PPUSH
12352: CALL_OW 111
// wait ( 0 0$2 ) ;
12356: LD_INT 70
12358: PPUSH
12359: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12363: LD_EXP 1
12367: PPUSH
12368: LD_STRING D4b-JMM-1
12370: PPUSH
12371: CALL_OW 88
// InGameOff ;
12375: CALL_OW 9
// exit ;
12379: POP
12380: POP
12381: GO 12644
// end else
12383: GO 12640
// begin InGameOn ;
12385: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
12389: LD_ADDR_VAR 0 5
12393: PUSH
12394: LD_VAR 0 1
12398: PPUSH
12399: CALL_OW 313
12403: PPUSH
12404: LD_INT 25
12406: PUSH
12407: LD_INT 3
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PPUSH
12414: CALL_OW 72
12418: ST_TO_ADDR
// if not tmpMechanicInside then
12419: LD_VAR 0 5
12423: NOT
12424: IFFALSE 12428
// continue ;
12426: GO 12218
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12428: LD_VAR 0 5
12432: PUSH
12433: LD_INT 1
12435: ARRAY
12436: PPUSH
12437: CALL_OW 258
12441: PUSH
12442: LD_INT 1
12444: EQUAL
12445: IFFALSE 12465
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
12447: LD_VAR 0 5
12451: PUSH
12452: LD_INT 1
12454: ARRAY
12455: PPUSH
12456: LD_STRING D4a-Mech1-1
12458: PPUSH
12459: CALL_OW 88
12463: GO 12481
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12465: LD_VAR 0 5
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: LD_STRING D4a-FMech1-1
12476: PPUSH
12477: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12481: LD_VAR 0 4
12485: PUSH
12486: LD_INT 1
12488: ARRAY
12489: PPUSH
12490: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12494: LD_VAR 0 4
12498: PUSH
12499: LD_INT 1
12501: ARRAY
12502: PPUSH
12503: LD_VAR 0 5
12507: PUSH
12508: LD_INT 1
12510: ARRAY
12511: PPUSH
12512: CALL_OW 53
// wait ( 0 0$1 ) ;
12516: LD_INT 35
12518: PPUSH
12519: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12523: LD_VAR 0 4
12527: PUSH
12528: LD_INT 1
12530: ARRAY
12531: PPUSH
12532: LD_VAR 0 4
12536: PUSH
12537: LD_INT 1
12539: ARRAY
12540: PPUSH
12541: CALL_OW 250
12545: PUSH
12546: LD_INT 3
12548: PLUS
12549: PPUSH
12550: LD_VAR 0 4
12554: PUSH
12555: LD_INT 1
12557: ARRAY
12558: PPUSH
12559: CALL_OW 251
12563: PUSH
12564: LD_INT 2
12566: MINUS
12567: PPUSH
12568: CALL_OW 111
// wait ( 0 0$2 ) ;
12572: LD_INT 70
12574: PPUSH
12575: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12579: LD_VAR 0 5
12583: PUSH
12584: LD_INT 1
12586: ARRAY
12587: PPUSH
12588: CALL_OW 258
12592: PUSH
12593: LD_INT 1
12595: EQUAL
12596: IFFALSE 12616
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
12598: LD_VAR 0 5
12602: PUSH
12603: LD_INT 1
12605: ARRAY
12606: PPUSH
12607: LD_STRING D4b-Mech1-1
12609: PPUSH
12610: CALL_OW 88
12614: GO 12632
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12616: LD_VAR 0 5
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: LD_STRING D4b-FMech1-1
12627: PPUSH
12628: CALL_OW 88
// InGameOff ;
12632: CALL_OW 9
// exit ;
12636: POP
12637: POP
12638: GO 12644
// end ; end ;
12640: GO 12218
12642: POP
12643: POP
// end ;
12644: PPOPN 5
12646: END
// function CheckMehInside ; var i , j , tmp ; begin
12647: LD_INT 0
12649: PPUSH
12650: PPUSH
12651: PPUSH
12652: PPUSH
// result := false ;
12653: LD_ADDR_VAR 0 1
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12661: LD_ADDR_VAR 0 4
12665: PUSH
12666: LD_INT 22
12668: PUSH
12669: LD_INT 1
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 30
12678: PUSH
12679: LD_INT 36
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: ST_TO_ADDR
// if not tmp then
12695: LD_VAR 0 4
12699: NOT
12700: IFFALSE 12704
// exit ;
12702: GO 12768
// for i in tmp do
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: LD_VAR 0 4
12713: PUSH
12714: FOR_IN
12715: IFFALSE 12766
// for j in UnitsInside ( i ) do
12717: LD_ADDR_VAR 0 3
12721: PUSH
12722: LD_VAR 0 2
12726: PPUSH
12727: CALL_OW 313
12731: PUSH
12732: FOR_IN
12733: IFFALSE 12762
// if GetClass ( j ) = class_mechanic then
12735: LD_VAR 0 3
12739: PPUSH
12740: CALL_OW 257
12744: PUSH
12745: LD_INT 3
12747: EQUAL
12748: IFFALSE 12760
// begin result := true ;
12750: LD_ADDR_VAR 0 1
12754: PUSH
12755: LD_INT 1
12757: ST_TO_ADDR
// break ;
12758: GO 12762
// end ;
12760: GO 12732
12762: POP
12763: POP
12764: GO 12714
12766: POP
12767: POP
// end ;
12768: LD_VAR 0 1
12772: RET
// every 12 12$0 do
12773: GO 12775
12775: DISABLE
// begin repeat wait ( 0 0$1 ) ;
12776: LD_INT 35
12778: PPUSH
12779: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 463
12790: NOT
12791: PUSH
12792: LD_INT 32
12794: PPUSH
12795: LD_INT 81
12797: PUSH
12798: LD_INT 1
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PPUSH
12805: CALL_OW 70
12809: NOT
12810: AND
12811: IFFALSE 12776
// PrepareKurt ;
12813: CALL 15237 0 0
// end ;
12817: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
12818: LD_EXP 15
12822: PPUSH
12823: CALL_OW 302
12827: PUSH
12828: LD_EXP 15
12832: PPUSH
12833: CALL_OW 255
12837: PUSH
12838: LD_INT 1
12840: EQUAL
12841: AND
12842: PUSH
12843: LD_EXP 2
12847: AND
12848: IFFALSE 13013
12850: GO 12852
12852: DISABLE
// begin wait ( 0 0$50 ) ;
12853: LD_INT 1750
12855: PPUSH
12856: CALL_OW 67
// if not IsOk ( Joan ) then
12860: LD_EXP 15
12864: PPUSH
12865: CALL_OW 302
12869: NOT
12870: IFFALSE 12874
// exit ;
12872: GO 13013
// if IsOK ( Lisa ) then
12874: LD_EXP 2
12878: PPUSH
12879: CALL_OW 302
12883: IFFALSE 13013
// begin DialogueOn ;
12885: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
12889: LD_EXP 2
12893: PPUSH
12894: LD_STRING D7-Lisa-1
12896: PPUSH
12897: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
12901: LD_EXP 1
12905: PPUSH
12906: LD_STRING D7-JMM-1
12908: PPUSH
12909: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
12913: LD_EXP 2
12917: PPUSH
12918: LD_STRING D7-Lisa-2
12920: PPUSH
12921: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
12925: LD_EXP 1
12929: PPUSH
12930: LD_STRING D7-JMM-2
12932: PPUSH
12933: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
12937: LD_EXP 2
12941: PPUSH
12942: LD_STRING D7-Lisa-3
12944: PPUSH
12945: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
12949: LD_EXP 1
12953: PPUSH
12954: LD_STRING D7-JMM-3
12956: PPUSH
12957: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
12961: LD_EXP 2
12965: PPUSH
12966: LD_STRING D7-Lisa-4
12968: PPUSH
12969: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
12973: LD_EXP 1
12977: PPUSH
12978: LD_STRING D7-JMM-4
12980: PPUSH
12981: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
12985: LD_EXP 1
12989: PPUSH
12990: LD_STRING D7-JMM-4a
12992: PPUSH
12993: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
12997: LD_EXP 2
13001: PPUSH
13002: LD_STRING D7-Lisa-5
13004: PPUSH
13005: CALL_OW 88
// DialogueOff ;
13009: CALL_OW 7
// end ; end ;
13013: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13014: LD_EXP 13
13018: PUSH
13019: LD_INT 22
13021: PUSH
13022: LD_INT 1
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 91
13031: PUSH
13032: LD_EXP 13
13036: PUSH
13037: LD_INT 10
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 2
13047: PUSH
13048: LD_INT 25
13050: PUSH
13051: LD_INT 1
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 25
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 25
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 25
13080: PUSH
13081: LD_INT 4
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: PPUSH
13100: CALL_OW 69
13104: PUSH
13105: LD_INT 1
13107: GREATER
13108: AND
13109: IFFALSE 13126
13111: GO 13113
13113: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13114: LD_EXP 13
13118: PPUSH
13119: LD_STRING D5-Sol1-1
13121: PPUSH
13122: CALL_OW 88
13126: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13127: LD_INT 22
13129: PUSH
13130: LD_INT 1
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 33
13139: PUSH
13140: LD_INT 2
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: PUSH
13156: LD_INT 2
13158: GREATEREQUAL
13159: IFFALSE 13179
13161: GO 13163
13163: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13164: LD_STRING MRa
13166: PPUSH
13167: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13171: LD_ADDR_EXP 28
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// end ;
13179: END
// every 2 2$00 do var i , last ;
13180: GO 13182
13182: DISABLE
13183: LD_INT 0
13185: PPUSH
13186: PPUSH
// begin last := 8 ;
13187: LD_ADDR_VAR 0 2
13191: PUSH
13192: LD_INT 8
13194: ST_TO_ADDR
// for i = 1 to last do
13195: LD_ADDR_VAR 0 1
13199: PUSH
13200: DOUBLE
13201: LD_INT 1
13203: DEC
13204: ST_TO_ADDR
13205: LD_VAR 0 2
13209: PUSH
13210: FOR_TO
13211: IFFALSE 13239
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13213: LD_INT 6300
13215: PPUSH
13216: LD_INT 12600
13218: PPUSH
13219: CALL_OW 12
13223: PPUSH
13224: CALL_OW 67
// PrepareRandoms ( i ) ;
13228: LD_VAR 0 1
13232: PPUSH
13233: CALL 4126 0 1
// end ;
13237: GO 13210
13239: POP
13240: POP
// end ;
13241: PPOPN 2
13243: END
// every 5 5$20 do
13244: GO 13246
13246: DISABLE
// begin DialogueOn ;
13247: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13251: LD_EXP 10
13255: PPUSH
13256: LD_STRING D12a-Sci-1
13258: PPUSH
13259: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13263: LD_EXP 1
13267: PPUSH
13268: LD_STRING D12a-JMM-1
13270: PPUSH
13271: CALL_OW 88
// DialogueOff ;
13275: CALL_OW 7
// cratesStatus = 1 ;
13279: LD_ADDR_EXP 38
13283: PUSH
13284: LD_INT 1
13286: ST_TO_ADDR
// end ;
13287: END
// every 13 13$0 do
13288: GO 13290
13290: DISABLE
// begin DialogueOn ;
13291: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13295: LD_EXP 10
13299: PPUSH
13300: LD_STRING D12b-Sci-1
13302: PPUSH
13303: CALL_OW 94
// DialogueOff ;
13307: CALL_OW 7
// cratesStatus = 2 ;
13311: LD_ADDR_EXP 38
13315: PUSH
13316: LD_INT 2
13318: ST_TO_ADDR
// end ;
13319: END
// every 32 32$0 do
13320: GO 13322
13322: DISABLE
// begin DialogueOn ;
13323: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
13327: LD_EXP 10
13331: PPUSH
13332: LD_STRING D12c-Sci-1
13334: PPUSH
13335: CALL_OW 94
// DialogueOff ;
13339: CALL_OW 7
// wait ( 3 3$0 ) ;
13343: LD_INT 6300
13345: PPUSH
13346: CALL_OW 67
// DialogueOn ;
13350: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
13354: LD_EXP 10
13358: PPUSH
13359: LD_STRING D12d-Sci-1
13361: PPUSH
13362: CALL_OW 94
// DialogueOff ;
13366: CALL_OW 7
// cratesStatus = 1 ;
13370: LD_ADDR_EXP 38
13374: PUSH
13375: LD_INT 1
13377: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
13378: CALL 19357 0 0
// wait ( 2 2$30 ) ;
13382: LD_INT 5250
13384: PPUSH
13385: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13389: LD_INT 35
13391: PPUSH
13392: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
13396: LD_INT 1
13398: PPUSH
13399: CALL_OW 463
13403: NOT
13404: PUSH
13405: LD_INT 32
13407: PPUSH
13408: LD_INT 81
13410: PUSH
13411: LD_INT 1
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PPUSH
13418: CALL_OW 70
13422: NOT
13423: AND
13424: IFFALSE 13389
// PrepareJoan ;
13426: CALL 3034 0 0
// end ;
13430: END
// every 42 42$0 do
13431: GO 13433
13433: DISABLE
// begin DialogueOn ;
13434: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13438: LD_EXP 10
13442: PPUSH
13443: LD_STRING D12e-Sci-1
13445: PPUSH
13446: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13450: LD_EXP 1
13454: PPUSH
13455: LD_STRING D12e-JMM-1
13457: PPUSH
13458: CALL_OW 88
// DialogueOff ;
13462: CALL_OW 7
// cratesStatus := 2 ;
13466: LD_ADDR_EXP 38
13470: PUSH
13471: LD_INT 2
13473: ST_TO_ADDR
// end ; end_of_file
13474: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13475: LD_VAR 0 1
13479: PUSH
13480: LD_INT 1
13482: EQUAL
13483: PUSH
13484: LD_VAR 0 2
13488: PUSH
13489: LD_INT 3
13491: EQUAL
13492: AND
13493: IFFALSE 13503
// contactWithRussian := 1 ;
13495: LD_ADDR_EXP 22
13499: PUSH
13500: LD_INT 1
13502: ST_TO_ADDR
// end ;
13503: PPOPN 2
13505: END
// on BuildingComplete ( building ) do var i ;
13506: LD_INT 0
13508: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
13509: LD_VAR 0 1
13513: PPUSH
13514: CALL_OW 266
13518: PUSH
13519: LD_INT 36
13521: EQUAL
13522: PUSH
13523: LD_VAR 0 1
13527: PPUSH
13528: CALL_OW 255
13532: PUSH
13533: LD_INT 1
13535: EQUAL
13536: AND
13537: PUSH
13538: LD_EXP 23
13542: PUSH
13543: LD_INT 0
13545: EQUAL
13546: AND
13547: IFFALSE 13627
// begin firstTower = 1 ;
13549: LD_ADDR_EXP 23
13553: PUSH
13554: LD_INT 1
13556: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13557: LD_INT 22
13559: PUSH
13560: LD_INT 1
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 21
13569: PUSH
13570: LD_INT 1
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 25
13579: PUSH
13580: LD_INT 3
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 26
13589: PUSH
13590: LD_INT 1
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: PPUSH
13603: CALL_OW 69
13607: PUSH
13608: LD_EXP 1
13612: PUSH
13613: EMPTY
13614: LIST
13615: DIFF
13616: PPUSH
13617: LD_STRING D3b-Mech1-1
13619: PPUSH
13620: LD_STRING D3b-Mech1-1
13622: PPUSH
13623: CALL 6819 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
13627: LD_VAR 0 1
13631: PPUSH
13632: CALL_OW 266
13636: PUSH
13637: LD_INT 0
13639: EQUAL
13640: PUSH
13641: LD_VAR 0 1
13645: PPUSH
13646: CALL_OW 255
13650: PUSH
13651: LD_INT 1
13653: EQUAL
13654: AND
13655: IFFALSE 13669
// SetBName ( building , theta ) ;
13657: LD_VAR 0 1
13661: PPUSH
13662: LD_STRING theta
13664: PPUSH
13665: CALL_OW 500
// if GetSide ( building ) = 3 then
13669: LD_VAR 0 1
13673: PPUSH
13674: CALL_OW 255
13678: PUSH
13679: LD_INT 3
13681: EQUAL
13682: IFFALSE 13722
// begin for i := 1 to 4 do
13684: LD_ADDR_VAR 0 2
13688: PUSH
13689: DOUBLE
13690: LD_INT 1
13692: DEC
13693: ST_TO_ADDR
13694: LD_INT 4
13696: PUSH
13697: FOR_TO
13698: IFFALSE 13720
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13700: LD_ADDR_EXP 31
13704: PUSH
13705: LD_EXP 31
13709: PPUSH
13710: LD_INT 1
13712: PPUSH
13713: CALL_OW 3
13717: ST_TO_ADDR
13718: GO 13697
13720: POP
13721: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 255
13731: PUSH
13732: LD_INT 3
13734: EQUAL
13735: PUSH
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 266
13745: PUSH
13746: LD_INT 0
13748: EQUAL
13749: PUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 266
13759: PUSH
13760: LD_INT 2
13762: EQUAL
13763: OR
13764: PUSH
13765: LD_VAR 0 1
13769: PPUSH
13770: CALL_OW 266
13774: PUSH
13775: LD_INT 4
13777: EQUAL
13778: OR
13779: PUSH
13780: EMPTY
13781: LIST
13782: AND
13783: IFFALSE 13794
// ComUpgrade ( building ) ;
13785: LD_VAR 0 1
13789: PPUSH
13790: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
13794: LD_VAR 0 1
13798: PPUSH
13799: CALL_OW 255
13803: PUSH
13804: LD_INT 3
13806: EQUAL
13807: PUSH
13808: LD_VAR 0 1
13812: PPUSH
13813: CALL_OW 266
13817: PUSH
13818: LD_INT 32
13820: EQUAL
13821: AND
13822: IFFALSE 13863
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
13824: LD_VAR 0 1
13828: PPUSH
13829: LD_INT 42
13831: PUSH
13832: LD_INT 43
13834: PUSH
13835: LD_INT 44
13837: PUSH
13838: LD_INT 46
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 1
13849: PPUSH
13850: LD_INT 4
13852: PPUSH
13853: CALL_OW 12
13857: ARRAY
13858: PPUSH
13859: CALL_OW 208
// end ;
13863: PPOPN 2
13865: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
13866: LD_VAR 0 1
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_INT 1
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 21
13883: PUSH
13884: LD_INT 1
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 23
13893: PUSH
13894: LD_INT 1
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: PPUSH
13906: CALL_OW 69
13910: IN
13911: IFFALSE 13927
// killCounter := killCounter + 1 ;
13913: LD_ADDR_EXP 45
13917: PUSH
13918: LD_EXP 45
13922: PUSH
13923: LD_INT 1
13925: PLUS
13926: ST_TO_ADDR
// if unit in ruAttackersInForest then
13927: LD_VAR 0 1
13931: PUSH
13932: LD_EXP 48
13936: IN
13937: IFFALSE 13955
// ruAttackersInForest := ruAttackersInForest diff unit ;
13939: LD_ADDR_EXP 48
13943: PUSH
13944: LD_EXP 48
13948: PUSH
13949: LD_VAR 0 1
13953: DIFF
13954: ST_TO_ADDR
// if unit in ruAttackers then
13955: LD_VAR 0 1
13959: PUSH
13960: LD_EXP 47
13964: IN
13965: IFFALSE 13983
// ruAttackers := ruAttackers diff unit ;
13967: LD_ADDR_EXP 47
13971: PUSH
13972: LD_EXP 47
13976: PUSH
13977: LD_VAR 0 1
13981: DIFF
13982: ST_TO_ADDR
// if unit = JMM then
13983: LD_VAR 0 1
13987: PUSH
13988: LD_EXP 1
13992: EQUAL
13993: IFFALSE 14002
// YouLost ( JMM ) ;
13995: LD_STRING JMM
13997: PPUSH
13998: CALL_OW 104
// if unit = Joan then
14002: LD_VAR 0 1
14006: PUSH
14007: LD_EXP 15
14011: EQUAL
14012: IFFALSE 14022
// JoanStatus := 0 ;
14014: LD_ADDR_EXP 16
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14022: LD_VAR 0 1
14026: PPUSH
14027: CALL_OW 255
14031: PUSH
14032: LD_INT 1
14034: EQUAL
14035: PUSH
14036: LD_VAR 0 1
14040: PPUSH
14041: CALL_OW 247
14045: PUSH
14046: LD_INT 1
14048: EQUAL
14049: AND
14050: PUSH
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 248
14060: PUSH
14061: LD_INT 1
14063: EQUAL
14064: AND
14065: IFFALSE 14081
// unitLost = unitLost + 1 ;
14067: LD_ADDR_EXP 30
14071: PUSH
14072: LD_EXP 30
14076: PUSH
14077: LD_INT 1
14079: PLUS
14080: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 255
14090: PUSH
14091: LD_INT 3
14093: EQUAL
14094: PUSH
14095: LD_VAR 0 1
14099: PPUSH
14100: CALL_OW 247
14104: PUSH
14105: LD_INT 3
14107: EQUAL
14108: AND
14109: PUSH
14110: LD_VAR 0 1
14114: PPUSH
14115: CALL_OW 266
14119: PUSH
14120: LD_INT 4
14122: PUSH
14123: LD_INT 5
14125: PUSH
14126: LD_INT 32
14128: PUSH
14129: LD_INT 31
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: IN
14138: AND
14139: IFFALSE 14225
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14141: LD_ADDR_EXP 31
14145: PUSH
14146: LD_EXP 31
14150: PUSH
14151: LD_VAR 0 1
14155: PPUSH
14156: CALL_OW 266
14160: ADD
14161: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14162: LD_ADDR_EXP 31
14166: PUSH
14167: LD_EXP 31
14171: PUSH
14172: LD_VAR 0 1
14176: PPUSH
14177: CALL_OW 250
14181: ADD
14182: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14183: LD_ADDR_EXP 31
14187: PUSH
14188: LD_EXP 31
14192: PUSH
14193: LD_VAR 0 1
14197: PPUSH
14198: CALL_OW 251
14202: ADD
14203: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14204: LD_ADDR_EXP 31
14208: PUSH
14209: LD_EXP 31
14213: PUSH
14214: LD_VAR 0 1
14218: PPUSH
14219: CALL_OW 254
14223: ADD
14224: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14225: LD_EXP 46
14229: PUSH
14230: LD_VAR 0 1
14234: PPUSH
14235: CALL_OW 257
14239: PUSH
14240: LD_INT 3
14242: EQUAL
14243: AND
14244: PUSH
14245: LD_VAR 0 1
14249: PPUSH
14250: CALL_OW 255
14254: PUSH
14255: LD_INT 3
14257: EQUAL
14258: AND
14259: PUSH
14260: LD_INT 21
14262: PPUSH
14263: CALL_OW 302
14267: AND
14268: PUSH
14269: LD_INT 21
14271: PPUSH
14272: CALL_OW 255
14276: PUSH
14277: LD_INT 3
14279: EQUAL
14280: AND
14281: IFFALSE 14363
// begin ruMechCounter := ruMechCounter - 1 ;
14283: LD_ADDR_EXP 46
14287: PUSH
14288: LD_EXP 46
14292: PUSH
14293: LD_INT 1
14295: MINUS
14296: ST_TO_ADDR
// uc_side := 3 ;
14297: LD_ADDR_OWVAR 20
14301: PUSH
14302: LD_INT 3
14304: ST_TO_ADDR
// uc_nation := 3 ;
14305: LD_ADDR_OWVAR 21
14309: PUSH
14310: LD_INT 3
14312: ST_TO_ADDR
// hc_gallery :=  ;
14313: LD_ADDR_OWVAR 33
14317: PUSH
14318: LD_STRING 
14320: ST_TO_ADDR
// hc_name :=  ;
14321: LD_ADDR_OWVAR 26
14325: PUSH
14326: LD_STRING 
14328: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
14329: LD_INT 0
14331: PPUSH
14332: LD_EXP 34
14336: PPUSH
14337: LD_EXP 35
14341: PPUSH
14342: CALL_OW 12
14346: PPUSH
14347: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
14351: CALL_OW 44
14355: PPUSH
14356: LD_INT 21
14358: PPUSH
14359: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 255
14372: PUSH
14373: LD_INT 3
14375: EQUAL
14376: PUSH
14377: LD_VAR 0 1
14381: PPUSH
14382: CALL_OW 264
14386: PUSH
14387: LD_INT 52
14389: EQUAL
14390: AND
14391: PUSH
14392: LD_INT 21
14394: PPUSH
14395: CALL_OW 302
14399: AND
14400: PUSH
14401: LD_INT 21
14403: PPUSH
14404: CALL_OW 255
14408: PUSH
14409: LD_INT 3
14411: EQUAL
14412: AND
14413: IFFALSE 14434
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
14415: LD_INT 21
14417: PPUSH
14418: LD_INT 22
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: LD_INT 1
14426: PPUSH
14427: LD_INT 52
14429: PPUSH
14430: CALL_OW 125
// end ;
14434: PPOPN 1
14436: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14437: LD_INT 0
14439: PPUSH
14440: PPUSH
14441: PPUSH
// begin if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL_OW 255
14451: PUSH
14452: LD_INT 3
14454: EQUAL
14455: PUSH
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 264
14465: PUSH
14466: LD_INT 51
14468: PUSH
14469: LD_INT 52
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: IN
14476: NOT
14477: AND
14478: IFFALSE 14509
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
14480: LD_ADDR_EXP 47
14484: PUSH
14485: LD_EXP 47
14489: PPUSH
14490: LD_EXP 47
14494: PUSH
14495: LD_INT 1
14497: PLUS
14498: PPUSH
14499: LD_VAR 0 1
14503: PPUSH
14504: CALL_OW 1
14508: ST_TO_ADDR
// end ;
14509: PPOPN 5
14511: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL_OW 255
14521: PUSH
14522: LD_INT 3
14524: EQUAL
14525: IFFALSE 14556
// begin tamedApemans = tamedApemans + 1 ;
14527: LD_ADDR_EXP 32
14531: PUSH
14532: LD_EXP 32
14536: PUSH
14537: LD_INT 1
14539: PLUS
14540: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
14541: LD_VAR 0 1
14545: PPUSH
14546: LD_INT 106
14548: PPUSH
14549: LD_INT 85
14551: PPUSH
14552: CALL_OW 111
// end ; end ;
14556: PPOPN 2
14558: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
14559: LD_VAR 0 2
14563: PPUSH
14564: CALL_OW 255
14568: PUSH
14569: LD_INT 3
14571: EQUAL
14572: PUSH
14573: LD_VAR 0 1
14577: PPUSH
14578: CALL_OW 255
14582: PUSH
14583: LD_INT 3
14585: EQUAL
14586: AND
14587: PUSH
14588: LD_INT 21
14590: PPUSH
14591: CALL_OW 302
14595: AND
14596: IFFALSE 14610
// ComEnterUnit ( human , rufab ) ;
14598: LD_VAR 0 1
14602: PPUSH
14603: LD_INT 21
14605: PPUSH
14606: CALL_OW 120
// end ;
14610: PPOPN 4
14612: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
14613: LD_VAR 0 1
14617: PUSH
14618: LD_INT 21
14620: EQUAL
14621: PUSH
14622: LD_VAR 0 2
14626: PPUSH
14627: CALL_OW 255
14631: PUSH
14632: LD_INT 3
14634: EQUAL
14635: AND
14636: IFFALSE 14650
// SetLives ( human , 1000 ) ;
14638: LD_VAR 0 2
14642: PPUSH
14643: LD_INT 1000
14645: PPUSH
14646: CALL_OW 234
// end ;
14650: PPOPN 2
14652: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14653: LD_VAR 0 1
14657: PPUSH
14658: CALL 34176 0 1
// end ; end_of_file
14662: PPOPN 1
14664: END
// every 0 0$30 trigger cratesStatus = 1 do
14665: LD_EXP 38
14669: PUSH
14670: LD_INT 1
14672: EQUAL
14673: IFFALSE 14726
14675: GO 14677
14677: DISABLE
// begin enable ;
14678: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
14679: LD_INT 350
14681: PUSH
14682: LD_INT 875
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 1
14691: PPUSH
14692: LD_INT 2
14694: PPUSH
14695: CALL_OW 12
14699: ARRAY
14700: PPUSH
14701: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
14705: LD_INT 1
14707: PPUSH
14708: LD_INT 5
14710: PPUSH
14711: CALL_OW 12
14715: PPUSH
14716: LD_INT 7
14718: PPUSH
14719: LD_INT 1
14721: PPUSH
14722: CALL_OW 55
// end ;
14726: END
// every 1 1$0 trigger cratesStatus = 2 do
14727: LD_EXP 38
14731: PUSH
14732: LD_INT 2
14734: EQUAL
14735: IFFALSE 14818
14737: GO 14739
14739: DISABLE
// begin enable ;
14740: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
14741: LD_INT 3150
14743: PUSH
14744: LD_INT 4550
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 1
14753: PPUSH
14754: LD_INT 2
14756: PPUSH
14757: CALL_OW 12
14761: ARRAY
14762: PPUSH
14763: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
14767: LD_INT 2
14769: PUSH
14770: LD_INT 5
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 1
14779: PPUSH
14780: LD_INT 2
14782: PPUSH
14783: CALL_OW 12
14787: ARRAY
14788: PPUSH
14789: LD_INT 6
14791: PUSH
14792: LD_INT 7
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 1
14801: PPUSH
14802: LD_INT 2
14804: PPUSH
14805: CALL_OW 12
14809: ARRAY
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 55
// end ;
14818: END
// every 0 0$30 + 0 0$10 do
14819: GO 14821
14821: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14822: LD_INT 4
14824: PUSH
14825: LD_INT 5
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 1
14834: PPUSH
14835: LD_INT 2
14837: PPUSH
14838: CALL_OW 12
14842: ARRAY
14843: PPUSH
14844: LD_INT 7
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 55
// Wait ( 0 0$15 ) ;
14854: LD_INT 525
14856: PPUSH
14857: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14861: LD_INT 4
14863: PUSH
14864: LD_INT 5
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 1
14873: PPUSH
14874: LD_INT 2
14876: PPUSH
14877: CALL_OW 12
14881: ARRAY
14882: PPUSH
14883: LD_INT 7
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 55
// Wait ( 0 0$20 ) ;
14893: LD_INT 700
14895: PPUSH
14896: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14900: LD_INT 4
14902: PUSH
14903: LD_INT 5
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 1
14912: PPUSH
14913: LD_INT 2
14915: PPUSH
14916: CALL_OW 12
14920: ARRAY
14921: PPUSH
14922: LD_INT 7
14924: PPUSH
14925: LD_INT 1
14927: PPUSH
14928: CALL_OW 55
// end ; end_of_file
14932: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
14933: LD_EXP 24
14937: PUSH
14938: LD_INT 1
14940: EQUAL
14941: IFFALSE 15234
14943: GO 14945
14945: DISABLE
14946: LD_INT 0
14948: PPUSH
14949: PPUSH
14950: PPUSH
// begin enable ;
14951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14952: LD_ADDR_VAR 0 2
14956: PUSH
14957: LD_INT 22
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 21
14969: PUSH
14970: LD_INT 3
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: LD_INT 30
14982: PUSH
14983: LD_INT 0
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 30
14992: PUSH
14993: LD_INT 1
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: PPUSH
15010: CALL_OW 69
15014: ST_TO_ADDR
// for i in tmp do
15015: LD_ADDR_VAR 0 1
15019: PUSH
15020: LD_VAR 0 2
15024: PUSH
15025: FOR_IN
15026: IFFALSE 15059
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_VAR 0 3
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: CALL_OW 274
15047: PPUSH
15048: LD_INT 1
15050: PPUSH
15051: CALL_OW 275
15055: PLUS
15056: ST_TO_ADDR
15057: GO 15025
15059: POP
15060: POP
// strings = [ ] ;
15061: LD_ADDR_EXP 27
15065: PUSH
15066: EMPTY
15067: ST_TO_ADDR
// if tmp = 0 then
15068: LD_VAR 0 2
15072: PUSH
15073: LD_INT 0
15075: EQUAL
15076: IFFALSE 15101
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15078: LD_ADDR_EXP 27
15082: PUSH
15083: LD_EXP 27
15087: PUSH
15088: LD_STRING #Am06-1
15090: PUSH
15091: LD_EXP 25
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: ADD
15100: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15101: LD_VAR 0 2
15105: PUSH
15106: LD_EXP 25
15110: PUSH
15111: LD_VAR 0 3
15115: GREATER
15116: AND
15117: IFFALSE 15148
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15119: LD_ADDR_EXP 27
15123: PUSH
15124: LD_EXP 27
15128: PUSH
15129: LD_STRING #Am06-1
15131: PUSH
15132: LD_EXP 25
15136: PUSH
15137: LD_VAR 0 3
15141: MINUS
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: ADD
15147: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
15148: LD_VAR 0 2
15152: PUSH
15153: LD_EXP 25
15157: PUSH
15158: LD_VAR 0 3
15162: LESSEQUAL
15163: AND
15164: IFFALSE 15187
// strings = strings ^ [ #Am06-1 , 0 ] ;
15166: LD_ADDR_EXP 27
15170: PUSH
15171: LD_EXP 27
15175: PUSH
15176: LD_STRING #Am06-1
15178: PUSH
15179: LD_INT 0
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: ADD
15186: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15187: LD_ADDR_EXP 26
15191: PUSH
15192: LD_EXP 26
15196: PUSH
15197: LD_INT 35
15199: MINUS
15200: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15201: LD_ADDR_EXP 27
15205: PUSH
15206: LD_EXP 27
15210: PUSH
15211: LD_STRING #Am06-2
15213: PUSH
15214: LD_EXP 26
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: ADD
15223: ST_TO_ADDR
// display_strings = strings ;
15224: LD_ADDR_OWVAR 47
15228: PUSH
15229: LD_EXP 27
15233: ST_TO_ADDR
// end ; end_of_file
15234: PPOPN 3
15236: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
15237: LD_INT 0
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15246: LD_ADDR_VAR 0 3
15250: PUSH
15251: LD_INT 22
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 2
15263: PUSH
15264: LD_INT 30
15266: PUSH
15267: LD_INT 0
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 30
15276: PUSH
15277: LD_INT 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: LIST
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PPUSH
15293: CALL_OW 69
15297: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15298: LD_INT 35
15300: PPUSH
15301: CALL_OW 67
// until depot ;
15305: LD_VAR 0 3
15309: IFFALSE 15246
// repeat wait ( 0 0$1 ) ;
15311: LD_INT 35
15313: PPUSH
15314: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
15318: LD_ADDR_VAR 0 4
15322: PUSH
15323: LD_INT 22
15325: PUSH
15326: LD_INT 1
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 91
15335: PUSH
15336: LD_VAR 0 3
15340: PUSH
15341: LD_INT 1
15343: ARRAY
15344: PUSH
15345: LD_INT 15
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 21
15355: PUSH
15356: LD_INT 1
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 2
15365: PUSH
15366: LD_INT 25
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 25
15378: PUSH
15379: LD_INT 2
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 25
15388: PUSH
15389: LD_INT 3
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: LD_INT 25
15398: PUSH
15399: LD_INT 4
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 3
15415: PUSH
15416: LD_INT 54
15418: PUSH
15419: EMPTY
15420: LIST
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 3
15428: PUSH
15429: LD_INT 55
15431: PUSH
15432: EMPTY
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: PUSH
15452: LD_EXP 2
15456: PUSH
15457: LD_EXP 3
15461: PUSH
15462: LD_EXP 4
15466: PUSH
15467: LD_EXP 5
15471: PUSH
15472: LD_EXP 7
15476: PUSH
15477: LD_EXP 8
15481: PUSH
15482: LD_EXP 9
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: PUSH
15496: LD_EXP 44
15500: ADD
15501: DIFF
15502: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
15503: LD_VAR 0 4
15507: PUSH
15508: LD_INT 1
15510: PPUSH
15511: CALL_OW 463
15515: NOT
15516: AND
15517: IFFALSE 15311
// tmp := tmp [ rand ( 1 , tmp ) ] ;
15519: LD_ADDR_VAR 0 4
15523: PUSH
15524: LD_VAR 0 4
15528: PUSH
15529: LD_INT 1
15531: PPUSH
15532: LD_VAR 0 4
15536: PPUSH
15537: CALL_OW 12
15541: ARRAY
15542: ST_TO_ADDR
// blockSpawn := 1 ;
15543: LD_ADDR_EXP 29
15547: PUSH
15548: LD_INT 1
15550: ST_TO_ADDR
// uc_side := 2 ;
15551: LD_ADDR_OWVAR 20
15555: PUSH
15556: LD_INT 2
15558: ST_TO_ADDR
// uc_nation := 2 ;
15559: LD_ADDR_OWVAR 21
15563: PUSH
15564: LD_INT 2
15566: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
15567: LD_ADDR_EXP 19
15571: PUSH
15572: LD_STRING Kurt
15574: PPUSH
15575: LD_INT 0
15577: PPUSH
15578: LD_STRING 
15580: PPUSH
15581: CALL 38075 0 3
15585: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
15586: LD_EXP 19
15590: PPUSH
15591: LD_VAR 0 4
15595: PPUSH
15596: CALL_OW 250
15600: PPUSH
15601: LD_VAR 0 4
15605: PPUSH
15606: CALL_OW 251
15610: PPUSH
15611: LD_INT 5
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 50
// InGameOn ;
15621: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15625: LD_EXP 19
15629: PPUSH
15630: CALL_OW 87
// wait ( 0 0$2 ) ;
15634: LD_INT 70
15636: PPUSH
15637: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
15641: LD_EXP 19
15645: PPUSH
15646: LD_VAR 0 4
15650: PPUSH
15651: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
15655: LD_VAR 0 4
15659: PPUSH
15660: LD_EXP 19
15664: PPUSH
15665: CALL_OW 112
// wait ( 0 0$1 ) ;
15669: LD_INT 35
15671: PPUSH
15672: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
15676: LD_VAR 0 4
15680: PPUSH
15681: LD_EXP 19
15685: PPUSH
15686: CALL_OW 119
// DialogueOn ;
15690: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15694: LD_EXP 19
15698: PPUSH
15699: LD_STRING D2-Kurt-1
15701: PPUSH
15702: CALL_OW 88
// if tmp = JMM then
15706: LD_VAR 0 4
15710: PUSH
15711: LD_EXP 1
15715: EQUAL
15716: IFFALSE 15808
// begin Say ( JMM , D2-JMM-1 ) ;
15718: LD_EXP 1
15722: PPUSH
15723: LD_STRING D2-JMM-1
15725: PPUSH
15726: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15730: LD_EXP 19
15734: PPUSH
15735: LD_STRING D2-Kurt-2
15737: PPUSH
15738: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15742: LD_EXP 1
15746: PPUSH
15747: LD_STRING D2-JMM-2
15749: PPUSH
15750: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15754: LD_EXP 19
15758: PPUSH
15759: LD_STRING D2-Kurt-3
15761: PPUSH
15762: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
15766: LD_EXP 1
15770: PPUSH
15771: LD_STRING D2-JMM-3
15773: PPUSH
15774: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15778: LD_EXP 19
15782: PPUSH
15783: LD_STRING D2-Kurt-4
15785: PPUSH
15786: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
15790: LD_EXP 1
15794: PPUSH
15795: LD_STRING D2-JMM-4
15797: PPUSH
15798: CALL_OW 88
// DialogueOff ;
15802: CALL_OW 7
// end else
15806: GO 16036
// begin if GetSex ( tmp ) = 1 then
15808: LD_VAR 0 4
15812: PPUSH
15813: CALL_OW 258
15817: PUSH
15818: LD_INT 1
15820: EQUAL
15821: IFFALSE 15837
// Say ( tmp , D2-Sol1-1 ) else
15823: LD_VAR 0 4
15827: PPUSH
15828: LD_STRING D2-Sol1-1
15830: PPUSH
15831: CALL_OW 88
15835: GO 15849
// Say ( tmp , D2-FSol1-1 ) ;
15837: LD_VAR 0 4
15841: PPUSH
15842: LD_STRING D2-FSol1-1
15844: PPUSH
15845: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15849: LD_EXP 19
15853: PPUSH
15854: LD_STRING D2-Kurt-2
15856: PPUSH
15857: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15861: LD_VAR 0 4
15865: PPUSH
15866: CALL_OW 258
15870: PUSH
15871: LD_INT 1
15873: EQUAL
15874: IFFALSE 15890
// Say ( tmp , D2-Sol1-2 ) else
15876: LD_VAR 0 4
15880: PPUSH
15881: LD_STRING D2-Sol1-2
15883: PPUSH
15884: CALL_OW 88
15888: GO 15902
// Say ( tmp , D2-FSol1-2 ) ;
15890: LD_VAR 0 4
15894: PPUSH
15895: LD_STRING D2-FSol1-2
15897: PPUSH
15898: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15902: LD_EXP 19
15906: PPUSH
15907: LD_STRING D2-Kurt-3
15909: PPUSH
15910: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15914: LD_VAR 0 4
15918: PPUSH
15919: CALL_OW 258
15923: PUSH
15924: LD_INT 1
15926: EQUAL
15927: IFFALSE 15943
// Say ( tmp , D2-Sol1-3 ) else
15929: LD_VAR 0 4
15933: PPUSH
15934: LD_STRING D2-Sol1-3
15936: PPUSH
15937: CALL_OW 88
15941: GO 15955
// Say ( tmp , D2-FSol1-3 ) ;
15943: LD_VAR 0 4
15947: PPUSH
15948: LD_STRING D2-FSol1-3
15950: PPUSH
15951: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15955: LD_EXP 19
15959: PPUSH
15960: LD_STRING D2-Kurt-4
15962: PPUSH
15963: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15967: LD_VAR 0 4
15971: PPUSH
15972: CALL_OW 258
15976: PUSH
15977: LD_INT 1
15979: EQUAL
15980: IFFALSE 16008
// begin Say ( tmp , D2-Sol1-4 ) ;
15982: LD_VAR 0 4
15986: PPUSH
15987: LD_STRING D2-Sol1-4
15989: PPUSH
15990: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
15994: LD_VAR 0 4
15998: PPUSH
15999: LD_STRING D2-Sol1-5
16001: PPUSH
16002: CALL_OW 88
// end else
16006: GO 16032
// begin Say ( tmp , D2-FSol1-4 ) ;
16008: LD_VAR 0 4
16012: PPUSH
16013: LD_STRING D2-FSol1-4
16015: PPUSH
16016: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16020: LD_VAR 0 4
16024: PPUSH
16025: LD_STRING D2-FSol1-5
16027: PPUSH
16028: CALL_OW 88
// end ; DialogueOff ;
16032: CALL_OW 7
// end ; dec := ShowQuery1 ;
16036: LD_ADDR_VAR 0 6
16040: PUSH
16041: CALL 7304 0 0
16045: ST_TO_ADDR
// if dec = 1 then
16046: LD_VAR 0 6
16050: PUSH
16051: LD_INT 1
16053: EQUAL
16054: IFFALSE 16116
// begin DialogueOn ;
16056: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16060: LD_EXP 19
16064: PPUSH
16065: LD_STRING D2a-Kurt-1
16067: PPUSH
16068: CALL_OW 88
// DialogueOff ;
16072: CALL_OW 7
// InGameOff ;
16076: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16080: LD_INT 1
16082: PPUSH
16083: LD_INT 2
16085: PPUSH
16086: LD_INT 2
16088: PPUSH
16089: LD_INT 1
16091: PPUSH
16092: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16096: LD_EXP 19
16100: PPUSH
16101: LD_INT 8
16103: PPUSH
16104: CALL_OW 113
// readyToEscape := 1 ;
16108: LD_ADDR_EXP 21
16112: PUSH
16113: LD_INT 1
16115: ST_TO_ADDR
// end ; if dec = 2 then
16116: LD_VAR 0 6
16120: PUSH
16121: LD_INT 2
16123: EQUAL
16124: IFFALSE 16592
// begin DialogueOn ;
16126: CALL_OW 6
// if tmp = JMM then
16130: LD_VAR 0 4
16134: PUSH
16135: LD_EXP 1
16139: EQUAL
16140: IFFALSE 16196
// begin Say ( JMM , D2b-JMM-1 ) ;
16142: LD_EXP 1
16146: PPUSH
16147: LD_STRING D2b-JMM-1
16149: PPUSH
16150: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16154: LD_EXP 19
16158: PPUSH
16159: LD_STRING D2b-Kurt-1
16161: PPUSH
16162: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16166: LD_EXP 1
16170: PPUSH
16171: LD_STRING D2b-JMM-2
16173: PPUSH
16174: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16178: LD_EXP 19
16182: PPUSH
16183: LD_STRING D2b-Kurt-2
16185: PPUSH
16186: CALL_OW 88
// DialogueOff ;
16190: CALL_OW 7
// end else
16194: GO 16347
// begin if GetSex ( tmp ) = 1 then
16196: LD_VAR 0 4
16200: PPUSH
16201: CALL_OW 258
16205: PUSH
16206: LD_INT 1
16208: EQUAL
16209: IFFALSE 16225
// Say ( tmp , D2b-Sol1-1 ) else
16211: LD_VAR 0 4
16215: PPUSH
16216: LD_STRING D2b-Sol1-1
16218: PPUSH
16219: CALL_OW 88
16223: GO 16237
// Say ( tmp , D2b-FSol1-1 ) ;
16225: LD_VAR 0 4
16229: PPUSH
16230: LD_STRING D2b-FSol1-1
16232: PPUSH
16233: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16237: LD_EXP 19
16241: PPUSH
16242: LD_STRING D2b-Kurt-1
16244: PPUSH
16245: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16249: LD_VAR 0 4
16253: PPUSH
16254: CALL_OW 258
16258: PUSH
16259: LD_INT 1
16261: EQUAL
16262: IFFALSE 16278
// Say ( tmp , D2b-Sol1-2 ) else
16264: LD_VAR 0 4
16268: PPUSH
16269: LD_STRING D2b-Sol1-2
16271: PPUSH
16272: CALL_OW 88
16276: GO 16290
// Say ( tmp , D2b-FSol1-2 ) ;
16278: LD_VAR 0 4
16282: PPUSH
16283: LD_STRING D2b-FSol1-2
16285: PPUSH
16286: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16290: LD_EXP 19
16294: PPUSH
16295: LD_STRING D2b-Kurt-2
16297: PPUSH
16298: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16302: LD_VAR 0 4
16306: PPUSH
16307: CALL_OW 258
16311: PUSH
16312: LD_INT 1
16314: EQUAL
16315: IFFALSE 16331
// Say ( tmp , D2c-Sol1-2 ) else
16317: LD_VAR 0 4
16321: PPUSH
16322: LD_STRING D2c-Sol1-2
16324: PPUSH
16325: CALL_OW 88
16329: GO 16343
// Say ( tmp , D2c-FSol1-2 ) ;
16331: LD_VAR 0 4
16335: PPUSH
16336: LD_STRING D2c-FSol1-2
16338: PPUSH
16339: CALL_OW 88
// DialogueOff ;
16343: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
16347: LD_ADDR_VAR 0 7
16351: PUSH
16352: CALL 7325 0 0
16356: ST_TO_ADDR
// if dec2 = 1 then
16357: LD_VAR 0 7
16361: PUSH
16362: LD_INT 1
16364: EQUAL
16365: IFFALSE 16427
// begin DialogueOn ;
16367: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16371: LD_EXP 19
16375: PPUSH
16376: LD_STRING D2a-Kurt-1
16378: PPUSH
16379: CALL_OW 88
// DialogueOff ;
16383: CALL_OW 7
// InGameOff ;
16387: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16391: LD_INT 1
16393: PPUSH
16394: LD_INT 2
16396: PPUSH
16397: LD_INT 2
16399: PPUSH
16400: LD_INT 1
16402: PPUSH
16403: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16407: LD_EXP 19
16411: PPUSH
16412: LD_INT 8
16414: PPUSH
16415: CALL_OW 113
// readyToEscape := 1 ;
16419: LD_ADDR_EXP 21
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// end ; if dec2 = 2 then
16427: LD_VAR 0 7
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: IFFALSE 16592
// begin if tmp = JMM then
16437: LD_VAR 0 4
16441: PUSH
16442: LD_EXP 1
16446: EQUAL
16447: IFFALSE 16507
// begin DialogueOn ;
16449: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16453: LD_EXP 1
16457: PPUSH
16458: LD_STRING D2c-JMM-1
16460: PPUSH
16461: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16465: LD_EXP 19
16469: PPUSH
16470: LD_STRING D2c-Kurt-1
16472: PPUSH
16473: CALL_OW 88
// DialogueOff ;
16477: CALL_OW 7
// InGameOff ;
16481: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16485: LD_EXP 19
16489: PPUSH
16490: LD_INT 8
16492: PPUSH
16493: CALL_OW 113
// readyToEscape := 1 ;
16497: LD_ADDR_EXP 21
16501: PUSH
16502: LD_INT 1
16504: ST_TO_ADDR
// end else
16505: GO 16592
// begin DialogueOn ;
16507: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16511: LD_VAR 0 4
16515: PPUSH
16516: CALL_OW 258
16520: PUSH
16521: LD_INT 1
16523: EQUAL
16524: IFFALSE 16540
// Say ( tmp , D2c-Sol1-1 ) else
16526: LD_VAR 0 4
16530: PPUSH
16531: LD_STRING D2c-Sol1-1
16533: PPUSH
16534: CALL_OW 88
16538: GO 16552
// Say ( tmp , D2c-FSol1-1 ) ;
16540: LD_VAR 0 4
16544: PPUSH
16545: LD_STRING D2c-FSol1-1
16547: PPUSH
16548: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16552: LD_EXP 19
16556: PPUSH
16557: LD_STRING D2c-Kurt-1
16559: PPUSH
16560: CALL_OW 88
// DialogueOff ;
16564: CALL_OW 7
// InGameOff ;
16568: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16572: LD_EXP 19
16576: PPUSH
16577: LD_INT 8
16579: PPUSH
16580: CALL_OW 113
// readyToEscape := 1 ;
16584: LD_ADDR_EXP 21
16588: PUSH
16589: LD_INT 1
16591: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
16592: LD_VAR 0 6
16596: PUSH
16597: LD_INT 3
16599: EQUAL
16600: IFFALSE 16761
// begin DialogueOn ;
16602: CALL_OW 6
// if tmp = JMM then
16606: LD_VAR 0 4
16610: PUSH
16611: LD_EXP 1
16615: EQUAL
16616: IFFALSE 16676
// begin DialogueOn ;
16618: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16622: LD_EXP 1
16626: PPUSH
16627: LD_STRING D2c-JMM-1
16629: PPUSH
16630: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16634: LD_EXP 19
16638: PPUSH
16639: LD_STRING D2c-Kurt-1
16641: PPUSH
16642: CALL_OW 88
// DialogueOff ;
16646: CALL_OW 7
// InGameOff ;
16650: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16654: LD_EXP 19
16658: PPUSH
16659: LD_INT 8
16661: PPUSH
16662: CALL_OW 113
// readyToEscape := 1 ;
16666: LD_ADDR_EXP 21
16670: PUSH
16671: LD_INT 1
16673: ST_TO_ADDR
// end else
16674: GO 16761
// begin DialogueOn ;
16676: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16680: LD_VAR 0 4
16684: PPUSH
16685: CALL_OW 258
16689: PUSH
16690: LD_INT 1
16692: EQUAL
16693: IFFALSE 16709
// Say ( tmp , D2c-Sol1-1 ) else
16695: LD_VAR 0 4
16699: PPUSH
16700: LD_STRING D2c-Sol1-1
16702: PPUSH
16703: CALL_OW 88
16707: GO 16721
// Say ( tmp , D2c-FSol1-1 ) ;
16709: LD_VAR 0 4
16713: PPUSH
16714: LD_STRING D2c-FSol1-1
16716: PPUSH
16717: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16721: LD_EXP 19
16725: PPUSH
16726: LD_STRING D2c-Kurt-1
16728: PPUSH
16729: CALL_OW 88
// DialogueOff ;
16733: CALL_OW 7
// InGameOff ;
16737: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16741: LD_EXP 19
16745: PPUSH
16746: LD_INT 8
16748: PPUSH
16749: CALL_OW 113
// readyToEscape := 1 ;
16753: LD_ADDR_EXP 21
16757: PUSH
16758: LD_INT 1
16760: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
16761: LD_ADDR_EXP 29
16765: PUSH
16766: LD_INT 0
16768: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16769: LD_INT 35
16771: PPUSH
16772: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
16776: LD_EXP 19
16780: PPUSH
16781: LD_INT 8
16783: PPUSH
16784: CALL_OW 308
16788: PUSH
16789: LD_EXP 21
16793: AND
16794: PUSH
16795: LD_EXP 19
16799: PPUSH
16800: CALL_OW 301
16804: OR
16805: IFFALSE 16769
// if IsDead ( Kurt ) then
16807: LD_EXP 19
16811: PPUSH
16812: CALL_OW 301
16816: IFFALSE 16820
// exit ;
16818: GO 16875
// RemoveUnit ( Kurt ) ;
16820: LD_EXP 19
16824: PPUSH
16825: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
16829: LD_EXP 19
16833: PPUSH
16834: LD_STRING Kurt
16836: PPUSH
16837: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
16841: LD_INT 1
16843: PPUSH
16844: LD_INT 2
16846: PPUSH
16847: CALL_OW 81
16851: PUSH
16852: LD_INT 0
16854: EQUAL
16855: IFFALSE 16867
// kurtStatus = 1 else
16857: LD_ADDR_EXP 20
16861: PUSH
16862: LD_INT 1
16864: ST_TO_ADDR
16865: GO 16875
// kurtStatus = 2 ;
16867: LD_ADDR_EXP 20
16871: PUSH
16872: LD_INT 2
16874: ST_TO_ADDR
// end ; end_of_file
16875: LD_VAR 0 1
16879: RET
// every 0 0$2 do
16880: GO 16882
16882: DISABLE
// begin enable ;
16883: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
16884: LD_INT 3
16886: PPUSH
16887: LD_INT 2
16889: PPUSH
16890: LD_INT 10
16892: PPUSH
16893: LD_EXP 31
16897: PPUSH
16898: CALL 7736 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
16902: LD_INT 3
16904: PPUSH
16905: LD_INT 12
16907: PPUSH
16908: LD_EXP 31
16912: PPUSH
16913: CALL 9339 0 3
// if disableHealAI = 0 then
16917: LD_EXP 33
16921: PUSH
16922: LD_INT 0
16924: EQUAL
16925: IFFALSE 16946
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
16927: LD_INT 3
16929: PPUSH
16930: LD_INT 9
16932: PPUSH
16933: LD_INT 10
16935: PPUSH
16936: LD_INT 32
16938: PUSH
16939: EMPTY
16940: LIST
16941: PPUSH
16942: CALL 8103 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
16946: LD_INT 3
16948: PPUSH
16949: LD_INT 51
16951: PPUSH
16952: LD_INT 6
16954: PPUSH
16955: CALL 8792 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
16959: LD_INT 2
16961: PPUSH
16962: CALL_OW 303
16966: PUSH
16967: LD_INT 2
16969: PPUSH
16970: CALL_OW 255
16974: PUSH
16975: LD_INT 1
16977: EQUAL
16978: OR
16979: IFFALSE 16993
// DefendDepot ( 3 , rudepo ) else
16981: LD_INT 3
16983: PPUSH
16984: LD_INT 2
16986: PPUSH
16987: CALL 8619 0 2
16991: GO 17003
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
16993: LD_INT 3
16995: PPUSH
16996: LD_INT 10
16998: PPUSH
16999: CALL 8910 0 2
// end ;
17003: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17004: LD_INT 22
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 21
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 55
17026: PUSH
17027: EMPTY
17028: LIST
17029: PUSH
17030: LD_INT 3
17032: PUSH
17033: LD_INT 34
17035: PUSH
17036: LD_INT 51
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: PUSH
17058: LD_INT 0
17060: EQUAL
17061: PUSH
17062: LD_INT 21
17064: PPUSH
17065: CALL_OW 255
17069: PUSH
17070: LD_INT 3
17072: EQUAL
17073: AND
17074: PUSH
17075: LD_INT 21
17077: PPUSH
17078: CALL_OW 302
17082: AND
17083: PUSH
17084: LD_INT 2
17086: PPUSH
17087: CALL_OW 255
17091: PUSH
17092: LD_INT 3
17094: EQUAL
17095: AND
17096: PUSH
17097: LD_INT 2
17099: PPUSH
17100: CALL_OW 302
17104: AND
17105: PUSH
17106: LD_INT 21
17108: PPUSH
17109: CALL_OW 313
17113: AND
17114: PUSH
17115: LD_EXP 47
17119: PUSH
17120: LD_INT 4
17122: PUSH
17123: LD_INT 5
17125: PUSH
17126: LD_INT 6
17128: PUSH
17129: LD_INT 6
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: LD_OWVAR 67
17142: ARRAY
17143: LESS
17144: AND
17145: IFFALSE 17366
17147: GO 17149
17149: DISABLE
// begin enable ;
17150: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
17151: LD_INT 2
17153: PPUSH
17154: CALL_OW 274
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: LD_INT 2000
17164: PPUSH
17165: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
17169: LD_INT 3
17171: PPUSH
17172: LD_INT 21
17174: PPUSH
17175: LD_INT 4
17177: PUSH
17178: LD_INT 5
17180: PUSH
17181: LD_INT 6
17183: PUSH
17184: LD_INT 6
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: PUSH
17193: LD_OWVAR 67
17197: ARRAY
17198: PUSH
17199: LD_EXP 47
17203: MINUS
17204: PPUSH
17205: LD_INT 43
17207: PUSH
17208: LD_INT 43
17210: PUSH
17211: LD_INT 44
17213: PUSH
17214: LD_INT 44
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 43
17225: PUSH
17226: LD_INT 43
17228: PUSH
17229: LD_INT 43
17231: PUSH
17232: LD_INT 44
17234: PUSH
17235: LD_INT 44
17237: PUSH
17238: LD_INT 46
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 43
17251: PUSH
17252: LD_INT 43
17254: PUSH
17255: LD_INT 43
17257: PUSH
17258: LD_INT 44
17260: PUSH
17261: LD_INT 44
17263: PUSH
17264: LD_INT 46
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 43
17277: PUSH
17278: LD_INT 43
17280: PUSH
17281: LD_INT 44
17283: PUSH
17284: LD_INT 46
17286: PUSH
17287: LD_INT 46
17289: PUSH
17290: LD_INT 46
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: PUSH
17307: LD_OWVAR 67
17311: ARRAY
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: LD_INT 1
17318: PPUSH
17319: LD_INT 22
17321: PUSH
17322: LD_INT 22
17324: PUSH
17325: LD_INT 24
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: PPUSH
17335: LD_INT 2
17337: PPUSH
17338: CALL_OW 12
17342: ARRAY
17343: PUSH
17344: LD_INT 24
17346: PUSH
17347: LD_INT 24
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: PUSH
17356: LD_OWVAR 67
17360: ARRAY
17361: PPUSH
17362: CALL 7582 0 7
// end ;
17366: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17367: LD_INT 17
17369: PPUSH
17370: CALL_OW 255
17374: PUSH
17375: LD_INT 3
17377: EQUAL
17378: PUSH
17379: LD_INT 17
17381: PPUSH
17382: CALL_OW 302
17386: AND
17387: PUSH
17388: LD_INT 2
17390: PPUSH
17391: CALL_OW 255
17395: PUSH
17396: LD_INT 3
17398: EQUAL
17399: AND
17400: PUSH
17401: LD_INT 2
17403: PPUSH
17404: CALL_OW 302
17408: AND
17409: PUSH
17410: LD_EXP 47
17414: PUSH
17415: LD_INT 4
17417: PUSH
17418: LD_INT 5
17420: PUSH
17421: LD_INT 6
17423: PUSH
17424: LD_INT 7
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: PUSH
17433: LD_OWVAR 67
17437: ARRAY
17438: LESS
17439: AND
17440: IFFALSE 17488
17442: GO 17444
17444: DISABLE
// begin enable ;
17445: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17446: LD_INT 17
17448: PPUSH
17449: LD_INT 22
17451: PPUSH
17452: LD_INT 1
17454: PPUSH
17455: LD_INT 1
17457: PPUSH
17458: LD_INT 42
17460: PUSH
17461: LD_INT 43
17463: PUSH
17464: LD_INT 44
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: PPUSH
17475: LD_INT 3
17477: PPUSH
17478: CALL_OW 12
17482: ARRAY
17483: PPUSH
17484: CALL_OW 185
// end ;
17488: END
// every 2 2$0 do var i , j ;
17489: GO 17491
17491: DISABLE
17492: LD_INT 0
17494: PPUSH
17495: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17496: LD_INT 14700
17498: PUSH
17499: LD_INT 33600
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 2
17511: PPUSH
17512: CALL_OW 12
17516: ARRAY
17517: PPUSH
17518: CALL_OW 67
// disableHealAI = 1 ;
17522: LD_ADDR_EXP 33
17526: PUSH
17527: LD_INT 1
17529: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17530: LD_ADDR_VAR 0 1
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_INT 3
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 25
17547: PUSH
17548: LD_INT 4
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PPUSH
17559: CALL_OW 69
17563: PUSH
17564: FOR_IN
17565: IFFALSE 17578
// ComExitBuilding ( i ) ;
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL_OW 122
17576: GO 17564
17578: POP
17579: POP
// wait ( 0 0$1 ) ;
17580: LD_INT 35
17582: PPUSH
17583: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17587: LD_INT 35
17589: PPUSH
17590: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17594: LD_ADDR_VAR 0 1
17598: PUSH
17599: LD_INT 22
17601: PUSH
17602: LD_INT 3
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 25
17611: PUSH
17612: LD_INT 4
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PPUSH
17623: CALL_OW 69
17627: PUSH
17628: FOR_IN
17629: IFFALSE 17706
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17631: LD_ADDR_VAR 0 2
17635: PUSH
17636: LD_INT 17
17638: PPUSH
17639: LD_INT 22
17641: PUSH
17642: LD_INT 0
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 25
17651: PUSH
17652: LD_INT 12
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PPUSH
17663: CALL_OW 70
17667: PUSH
17668: FOR_IN
17669: IFFALSE 17702
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17671: LD_VAR 0 1
17675: PPUSH
17676: LD_VAR 0 2
17680: PPUSH
17681: CALL_OW 250
17685: PPUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: CALL_OW 251
17695: PPUSH
17696: CALL_OW 191
17700: GO 17668
17702: POP
17703: POP
17704: GO 17628
17706: POP
17707: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17708: LD_INT 22
17710: PUSH
17711: LD_INT 3
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 25
17720: PUSH
17721: LD_INT 4
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PPUSH
17732: CALL_OW 69
17736: PUSH
17737: LD_INT 0
17739: EQUAL
17740: PUSH
17741: LD_EXP 32
17745: PUSH
17746: LD_INT 6
17748: PUSH
17749: LD_INT 7
17751: PUSH
17752: LD_INT 8
17754: PUSH
17755: LD_INT 8
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: PUSH
17764: LD_OWVAR 67
17768: ARRAY
17769: GREATEREQUAL
17770: OR
17771: PUSH
17772: LD_INT 17
17774: PPUSH
17775: LD_INT 22
17777: PUSH
17778: LD_INT 0
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 25
17787: PUSH
17788: LD_INT 12
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 70
17803: PUSH
17804: LD_INT 0
17806: EQUAL
17807: OR
17808: IFFALSE 17587
// disableHealAI = 0 ;
17810: LD_ADDR_EXP 33
17814: PUSH
17815: LD_INT 0
17817: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
17818: LD_ADDR_VAR 0 1
17822: PUSH
17823: LD_INT 22
17825: PUSH
17826: LD_INT 3
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 25
17835: PUSH
17836: LD_INT 12
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PPUSH
17847: CALL_OW 69
17851: PUSH
17852: FOR_IN
17853: IFFALSE 17869
// SetClass ( i , 16 ) ;
17855: LD_VAR 0 1
17859: PPUSH
17860: LD_INT 16
17862: PPUSH
17863: CALL_OW 336
17867: GO 17852
17869: POP
17870: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17871: LD_ADDR_VAR 0 1
17875: PUSH
17876: LD_INT 22
17878: PUSH
17879: LD_INT 3
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 25
17888: PUSH
17889: LD_INT 4
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 69
17904: PUSH
17905: FOR_IN
17906: IFFALSE 17922
// ComEnterUnit ( i , rulab ) ;
17908: LD_VAR 0 1
17912: PPUSH
17913: LD_INT 32
17915: PPUSH
17916: CALL_OW 120
17920: GO 17905
17922: POP
17923: POP
// end ; end_of_file
17924: PPOPN 2
17926: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
17927: LD_EXP 26
17931: PUSH
17932: LD_INT 0
17934: LESSEQUAL
17935: IFFALSE 18084
17937: GO 17939
17939: DISABLE
17940: LD_INT 0
17942: PPUSH
17943: PPUSH
17944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17945: LD_ADDR_VAR 0 2
17949: PUSH
17950: LD_INT 22
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 21
17962: PUSH
17963: LD_INT 3
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 2
17972: PUSH
17973: LD_INT 30
17975: PUSH
17976: LD_INT 0
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 30
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 69
18007: ST_TO_ADDR
// for i in tmp do
18008: LD_ADDR_VAR 0 1
18012: PUSH
18013: LD_VAR 0 2
18017: PUSH
18018: FOR_IN
18019: IFFALSE 18052
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_VAR 0 3
18030: PUSH
18031: LD_VAR 0 1
18035: PPUSH
18036: CALL_OW 274
18040: PPUSH
18041: LD_INT 1
18043: PPUSH
18044: CALL_OW 275
18048: PLUS
18049: ST_TO_ADDR
18050: GO 18018
18052: POP
18053: POP
// if yourCrates >= needCrates then
18054: LD_VAR 0 3
18058: PUSH
18059: LD_EXP 25
18063: GREATEREQUAL
18064: IFFALSE 18077
// FinishMission ( yourCrates ) else
18066: LD_VAR 0 3
18070: PPUSH
18071: CALL 18087 0 1
18075: GO 18084
// YouLost ( matmin ) ;
18077: LD_STRING matmin
18079: PPUSH
18080: CALL_OW 104
// end ;
18084: PPOPN 3
18086: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
18087: LD_INT 0
18089: PPUSH
18090: PPUSH
18091: PPUSH
18092: PPUSH
// if killCounter = 0 then
18093: LD_EXP 45
18097: PUSH
18098: LD_INT 0
18100: EQUAL
18101: IFFALSE 18110
// SetAchievement ( ACH_SURV ) ;
18103: LD_STRING ACH_SURV
18105: PPUSH
18106: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
18110: LD_INT 22
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 21
18122: PUSH
18123: LD_INT 3
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: PUSH
18139: LD_INT 0
18141: EQUAL
18142: IFFALSE 18158
// begin wait ( 3 ) ;
18144: LD_INT 3
18146: PPUSH
18147: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
18151: LD_STRING ACH_BASEDESTROYER
18153: PPUSH
18154: CALL_OW 543
// end ; m1 := false ;
18158: LD_ADDR_VAR 0 3
18162: PUSH
18163: LD_INT 0
18165: ST_TO_ADDR
// m2 := false ;
18166: LD_ADDR_VAR 0 4
18170: PUSH
18171: LD_INT 0
18173: ST_TO_ADDR
// m3 := false ;
18174: LD_ADDR_VAR 0 5
18178: PUSH
18179: LD_INT 0
18181: ST_TO_ADDR
// if crates + 100 > crates then
18182: LD_VAR 0 1
18186: PUSH
18187: LD_INT 100
18189: PLUS
18190: PUSH
18191: LD_VAR 0 1
18195: GREATER
18196: IFFALSE 18228
// begin AddMedal ( cans , 1 ) ;
18198: LD_STRING cans
18200: PPUSH
18201: LD_INT 1
18203: PPUSH
18204: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18208: LD_INT 1
18210: PPUSH
18211: LD_STRING 06_crates_1
18213: PPUSH
18214: CALL_OW 39
// m1 := true ;
18218: LD_ADDR_VAR 0 3
18222: PUSH
18223: LD_INT 1
18225: ST_TO_ADDR
// end else
18226: GO 18249
// begin AddMedal ( cans , - 1 ) ;
18228: LD_STRING cans
18230: PPUSH
18231: LD_INT 1
18233: NEG
18234: PPUSH
18235: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18239: LD_INT 0
18241: PPUSH
18242: LD_STRING 06_crates_1
18244: PPUSH
18245: CALL_OW 39
// end ; if unitLost < 3 then
18249: LD_EXP 30
18253: PUSH
18254: LD_INT 3
18256: LESS
18257: IFFALSE 18279
// begin AddMedal ( people , 1 ) ;
18259: LD_STRING people
18261: PPUSH
18262: LD_INT 1
18264: PPUSH
18265: CALL_OW 101
// m2 := true ;
18269: LD_ADDR_VAR 0 4
18273: PUSH
18274: LD_INT 1
18276: ST_TO_ADDR
// end else
18277: GO 18290
// AddMedal ( people , - 1 ) ;
18279: LD_STRING people
18281: PPUSH
18282: LD_INT 1
18284: NEG
18285: PPUSH
18286: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18290: LD_EXP 28
18294: PPUSH
18295: LD_STRING 06_remoteVehs_1
18297: PPUSH
18298: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18302: LD_EXP 28
18306: PUSH
18307: LD_INT 1
18309: EQUAL
18310: IFFALSE 18332
// begin AddMedal ( remote , 1 ) ;
18312: LD_STRING remote
18314: PPUSH
18315: LD_INT 1
18317: PPUSH
18318: CALL_OW 101
// m3 := true ;
18322: LD_ADDR_VAR 0 5
18326: PUSH
18327: LD_INT 1
18329: ST_TO_ADDR
// end else
18330: GO 18372
// begin if GetTech ( 18 , 1 ) = state_enabled then
18332: LD_INT 18
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: CALL_OW 321
18342: PUSH
18343: LD_INT 1
18345: EQUAL
18346: IFFALSE 18361
// AddMedal ( remote , - 1 ) else
18348: LD_STRING remote
18350: PPUSH
18351: LD_INT 1
18353: NEG
18354: PPUSH
18355: CALL_OW 101
18359: GO 18372
// AddMedal ( remote , - 2 ) ;
18361: LD_STRING remote
18363: PPUSH
18364: LD_INT 2
18366: NEG
18367: PPUSH
18368: CALL_OW 101
// end ; if m1 and m2 and m3 then
18372: LD_VAR 0 3
18376: PUSH
18377: LD_VAR 0 4
18381: AND
18382: PUSH
18383: LD_VAR 0 5
18387: AND
18388: IFFALSE 18404
// begin wait ( 3 ) ;
18390: LD_INT 3
18392: PPUSH
18393: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
18397: LD_STRING ACH_ASPEED_6
18399: PPUSH
18400: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
18404: LD_OWVAR 67
18408: PUSH
18409: LD_INT 3
18411: GREATEREQUAL
18412: PUSH
18413: LD_VAR 0 3
18417: AND
18418: PUSH
18419: LD_VAR 0 4
18423: AND
18424: PUSH
18425: LD_VAR 0 5
18429: AND
18430: IFFALSE 18442
// SetAchievementEX ( ACH_AMER , 6 ) ;
18432: LD_STRING ACH_AMER
18434: PPUSH
18435: LD_INT 6
18437: PPUSH
18438: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
18442: LD_EXP 20
18446: PPUSH
18447: LD_STRING 06_KurtStatus_1
18449: PPUSH
18450: CALL_OW 39
// GiveMedals ( Main ) ;
18454: LD_STRING Main
18456: PPUSH
18457: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18461: LD_INT 22
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 21
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 50
18483: PUSH
18484: EMPTY
18485: LIST
18486: PUSH
18487: LD_INT 2
18489: PUSH
18490: LD_INT 25
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 25
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 25
18512: PUSH
18513: LD_INT 3
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 25
18522: PUSH
18523: LD_INT 4
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: PPUSH
18548: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18552: LD_EXP 1
18556: PPUSH
18557: LD_EXP 42
18561: PUSH
18562: LD_STRING JMM
18564: STR
18565: PPUSH
18566: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18570: LD_EXP 2
18574: PPUSH
18575: LD_EXP 42
18579: PUSH
18580: LD_STRING Lisa
18582: STR
18583: PPUSH
18584: CALL 6917 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18588: LD_EXP 3
18592: PPUSH
18593: LD_EXP 42
18597: PUSH
18598: LD_STRING Bobby
18600: STR
18601: PPUSH
18602: CALL 6917 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18606: LD_EXP 4
18610: PPUSH
18611: LD_EXP 42
18615: PUSH
18616: LD_STRING Cyrus
18618: STR
18619: PPUSH
18620: CALL 6917 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18624: LD_EXP 5
18628: PPUSH
18629: LD_EXP 42
18633: PUSH
18634: LD_STRING Frank
18636: STR
18637: PPUSH
18638: CALL 6917 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18642: LD_EXP 6
18646: PPUSH
18647: LD_EXP 42
18651: PUSH
18652: LD_STRING Brown
18654: STR
18655: PPUSH
18656: CALL 6917 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18660: LD_EXP 7
18664: PPUSH
18665: LD_EXP 42
18669: PUSH
18670: LD_STRING Donaldson
18672: STR
18673: PPUSH
18674: CALL 6917 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18678: LD_EXP 8
18682: PPUSH
18683: LD_EXP 42
18687: PUSH
18688: LD_STRING Gladstone
18690: STR
18691: PPUSH
18692: CALL 6917 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18696: LD_EXP 9
18700: PPUSH
18701: LD_EXP 42
18705: PUSH
18706: LD_STRING Denis
18708: STR
18709: PPUSH
18710: CALL 6917 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
18714: LD_EXP 15
18718: PPUSH
18719: LD_EXP 42
18723: PUSH
18724: LD_STRING Joan
18726: STR
18727: PPUSH
18728: CALL 6917 0 2
// if IsLive ( Joan ) then
18732: LD_EXP 15
18736: PPUSH
18737: CALL_OW 300
18741: IFFALSE 18755
// SaveCharacters ( Joan , Joan ) ;
18743: LD_EXP 15
18747: PPUSH
18748: LD_STRING Joan
18750: PPUSH
18751: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
18755: LD_EXP 16
18759: PPUSH
18760: LD_STRING 06_JoanStatus_1
18762: PPUSH
18763: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18767: LD_INT 50
18769: PUSH
18770: EMPTY
18771: LIST
18772: PUSH
18773: LD_INT 22
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 21
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 25
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 25
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 25
18818: PUSH
18819: LD_INT 3
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 25
18828: PUSH
18829: LD_INT 4
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: PPUSH
18849: CALL_OW 69
18853: PUSH
18854: LD_EXP 1
18858: PUSH
18859: LD_EXP 2
18863: PUSH
18864: LD_EXP 3
18868: PUSH
18869: LD_EXP 4
18873: PUSH
18874: LD_EXP 5
18878: PUSH
18879: LD_EXP 6
18883: PUSH
18884: LD_EXP 7
18888: PUSH
18889: LD_EXP 8
18893: PUSH
18894: LD_EXP 9
18898: PUSH
18899: LD_EXP 15
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: DIFF
18916: PPUSH
18917: LD_STRING 06_other_survivors
18919: PPUSH
18920: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
18924: LD_INT 50
18926: PUSH
18927: EMPTY
18928: LIST
18929: PUSH
18930: LD_INT 22
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 2
18952: PUSH
18953: LD_INT 25
18955: PUSH
18956: LD_INT 12
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 25
18965: PUSH
18966: LD_INT 16
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: PPUSH
18984: CALL_OW 69
18988: PPUSH
18989: LD_STRING 06_other_apemans
18991: PPUSH
18992: CALL_OW 38
// YouWin ;
18996: CALL_OW 103
// end ; end_of_file
19000: LD_VAR 0 2
19004: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19005: LD_EXP 47
19009: PUSH
19010: LD_OWVAR 1
19014: PUSH
19015: LD_INT 23100
19017: PUSH
19018: LD_INT 21000
19020: PUSH
19021: LD_INT 18900
19023: PUSH
19024: LD_INT 16800
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: PUSH
19033: LD_OWVAR 67
19037: ARRAY
19038: GREATER
19039: AND
19040: IFFALSE 19354
19042: GO 19044
19044: DISABLE
19045: LD_INT 0
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
// begin enable ;
19051: ENABLE
// for i in ruAttackers do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_EXP 47
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19352
// begin if not IsDrivenBy ( i ) then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 311
19074: NOT
19075: IFFALSE 19079
// continue ;
19077: GO 19062
// if i mod 2 = 0 then
19079: LD_VAR 0 1
19083: PUSH
19084: LD_INT 2
19086: MOD
19087: PUSH
19088: LD_INT 0
19090: EQUAL
19091: IFFALSE 19146
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 80 , 12 ] ] else
19093: LD_ADDR_VAR 0 3
19097: PUSH
19098: LD_INT 91
19100: PUSH
19101: LD_INT 52
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 82
19110: PUSH
19111: LD_INT 34
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 90
19120: PUSH
19121: LD_INT 26
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 80
19130: PUSH
19131: LD_INT 12
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: ST_TO_ADDR
19144: GO 19208
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] ] ;
19146: LD_ADDR_VAR 0 3
19150: PUSH
19151: LD_INT 91
19153: PUSH
19154: LD_INT 52
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 68
19163: PUSH
19164: LD_INT 46
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 48
19173: PUSH
19174: LD_INT 43
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 33
19183: PUSH
19184: LD_INT 34
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 30
19193: PUSH
19194: LD_INT 19
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
19208: LD_VAR 0 1
19212: PPUSH
19213: CALL_OW 256
19217: PUSH
19218: LD_INT 1000
19220: EQUAL
19221: IFFALSE 19239
// AgressiveMove ( i , path ) else
19223: LD_VAR 0 1
19227: PPUSH
19228: LD_VAR 0 3
19232: PPUSH
19233: CALL 77408 0 2
19237: GO 19350
// if GetLives ( i ) < 650 then
19239: LD_VAR 0 1
19243: PPUSH
19244: CALL_OW 256
19248: PUSH
19249: LD_INT 650
19251: LESS
19252: IFFALSE 19350
// begin if not IsInArea ( i , russianRepairArea ) then
19254: LD_VAR 0 1
19258: PPUSH
19259: LD_INT 12
19261: PPUSH
19262: CALL_OW 308
19266: NOT
19267: IFFALSE 19336
// begin SetTag ( i , 0 ) ;
19269: LD_VAR 0 1
19273: PPUSH
19274: LD_INT 0
19276: PPUSH
19277: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
19281: LD_VAR 0 1
19285: PPUSH
19286: CALL_OW 261
19290: PUSH
19291: LD_INT 50
19293: LESS
19294: PUSH
19295: LD_INT 21
19297: PPUSH
19298: CALL_OW 302
19302: AND
19303: IFFALSE 19319
// ComMoveUnit ( i , rufab ) else
19305: LD_VAR 0 1
19309: PPUSH
19310: LD_INT 21
19312: PPUSH
19313: CALL_OW 112
19317: GO 19334
// ComMoveXY ( i , 121 , 99 ) ;
19319: LD_VAR 0 1
19323: PPUSH
19324: LD_INT 121
19326: PPUSH
19327: LD_INT 99
19329: PPUSH
19330: CALL_OW 111
// end else
19334: GO 19350
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
19336: LD_VAR 0 1
19340: PPUSH
19341: CALL_OW 311
19345: PPUSH
19346: CALL 76504 0 1
// end ; end ;
19350: GO 19062
19352: POP
19353: POP
// end ;
19354: PPOPN 4
19356: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
19357: LD_INT 0
19359: PPUSH
19360: PPUSH
19361: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
19362: LD_ADDR_VAR 0 2
19366: PUSH
19367: DOUBLE
19368: LD_INT 1
19370: DEC
19371: ST_TO_ADDR
19372: LD_INT 4
19374: PUSH
19375: LD_INT 5
19377: PUSH
19378: LD_INT 6
19380: PUSH
19381: LD_INT 6
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: PUSH
19390: LD_OWVAR 67
19394: ARRAY
19395: PUSH
19396: FOR_TO
19397: IFFALSE 19572
// begin uc_side := 3 ;
19399: LD_ADDR_OWVAR 20
19403: PUSH
19404: LD_INT 3
19406: ST_TO_ADDR
// uc_nation := 3 ;
19407: LD_ADDR_OWVAR 21
19411: PUSH
19412: LD_INT 3
19414: ST_TO_ADDR
// InitHC_All ( ) ;
19415: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
19419: LD_INT 0
19421: PPUSH
19422: LD_INT 4
19424: PUSH
19425: LD_INT 5
19427: PUSH
19428: LD_INT 6
19430: PUSH
19431: LD_INT 6
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: PUSH
19440: LD_OWVAR 67
19444: ARRAY
19445: PPUSH
19446: CALL_OW 381
// un := CreateHuman ;
19450: LD_ADDR_VAR 0 3
19454: PUSH
19455: CALL_OW 44
19459: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
19460: LD_VAR 0 3
19464: PPUSH
19465: LD_INT 127
19467: PPUSH
19468: LD_INT 62
19470: PPUSH
19471: LD_INT 3
19473: PPUSH
19474: LD_INT 0
19476: PPUSH
19477: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
19481: LD_ADDR_EXP 48
19485: PUSH
19486: LD_EXP 48
19490: PPUSH
19491: LD_EXP 48
19495: PUSH
19496: LD_INT 1
19498: PLUS
19499: PPUSH
19500: LD_VAR 0 3
19504: PPUSH
19505: CALL_OW 1
19509: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
19510: LD_VAR 0 3
19514: PPUSH
19515: LD_INT 83
19517: PPUSH
19518: LD_INT 49
19520: PPUSH
19521: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
19525: LD_VAR 0 3
19529: PPUSH
19530: LD_INT 49
19532: PPUSH
19533: LD_INT 43
19535: PPUSH
19536: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
19540: LD_VAR 0 3
19544: PPUSH
19545: LD_INT 31
19547: PPUSH
19548: LD_INT 15
19550: PPUSH
19551: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
19555: LD_VAR 0 3
19559: PPUSH
19560: LD_INT 63
19562: PPUSH
19563: LD_INT 9
19565: PPUSH
19566: CALL_OW 174
// end ;
19570: GO 19396
19572: POP
19573: POP
// end ; end_of_file
19574: LD_VAR 0 1
19578: RET
// export function CreateNature ; var i , un ; begin
19579: LD_INT 0
19581: PPUSH
19582: PPUSH
19583: PPUSH
// for i := 1 to Difficulty + 2 do
19584: LD_ADDR_VAR 0 2
19588: PUSH
19589: DOUBLE
19590: LD_INT 1
19592: DEC
19593: ST_TO_ADDR
19594: LD_OWVAR 67
19598: PUSH
19599: LD_INT 2
19601: PLUS
19602: PUSH
19603: FOR_TO
19604: IFFALSE 19713
// begin hc_sex := sex_male ;
19606: LD_ADDR_OWVAR 27
19610: PUSH
19611: LD_INT 1
19613: ST_TO_ADDR
// uc_side := 0 ;
19614: LD_ADDR_OWVAR 20
19618: PUSH
19619: LD_INT 0
19621: ST_TO_ADDR
// uc_nation := nation_nature ;
19622: LD_ADDR_OWVAR 21
19626: PUSH
19627: LD_INT 0
19629: ST_TO_ADDR
// hc_class := class_tiger ;
19630: LD_ADDR_OWVAR 28
19634: PUSH
19635: LD_INT 14
19637: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19638: LD_ADDR_OWVAR 31
19642: PUSH
19643: LD_EXP 35
19647: PUSH
19648: LD_INT 0
19650: PUSH
19651: LD_INT 0
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
19663: LD_ADDR_OWVAR 35
19667: PUSH
19668: LD_INT 5
19670: NEG
19671: PPUSH
19672: LD_INT 5
19674: PPUSH
19675: CALL_OW 12
19679: PUSH
19680: LD_OWVAR 67
19684: MUL
19685: ST_TO_ADDR
// un := CreateHuman ;
19686: LD_ADDR_VAR 0 3
19690: PUSH
19691: CALL_OW 44
19695: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19696: LD_VAR 0 3
19700: PPUSH
19701: LD_INT 18
19703: PPUSH
19704: LD_INT 0
19706: PPUSH
19707: CALL_OW 49
// end ;
19711: GO 19603
19713: POP
19714: POP
// for i = 1 to rand ( 3 , 4 ) do
19715: LD_ADDR_VAR 0 2
19719: PUSH
19720: DOUBLE
19721: LD_INT 1
19723: DEC
19724: ST_TO_ADDR
19725: LD_INT 3
19727: PPUSH
19728: LD_INT 4
19730: PPUSH
19731: CALL_OW 12
19735: PUSH
19736: FOR_TO
19737: IFFALSE 19807
// begin hc_class := class_phororhacos ;
19739: LD_ADDR_OWVAR 28
19743: PUSH
19744: LD_INT 18
19746: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19747: LD_ADDR_OWVAR 31
19751: PUSH
19752: LD_EXP 35
19756: PUSH
19757: LD_INT 0
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: ST_TO_ADDR
// hc_agressivity := 0 ;
19772: LD_ADDR_OWVAR 35
19776: PUSH
19777: LD_INT 0
19779: ST_TO_ADDR
// un = CreateHuman ;
19780: LD_ADDR_VAR 0 3
19784: PUSH
19785: CALL_OW 44
19789: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19790: LD_VAR 0 3
19794: PPUSH
19795: LD_INT 18
19797: PPUSH
19798: LD_INT 0
19800: PPUSH
19801: CALL_OW 49
// end ;
19805: GO 19736
19807: POP
19808: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
19809: LD_ADDR_VAR 0 2
19813: PUSH
19814: DOUBLE
19815: LD_INT 1
19817: DEC
19818: ST_TO_ADDR
19819: LD_INT 1
19821: PPUSH
19822: LD_INT 3
19824: PPUSH
19825: CALL_OW 12
19829: PUSH
19830: LD_OWVAR 67
19834: PLUS
19835: PUSH
19836: FOR_TO
19837: IFFALSE 19974
// begin hc_class := class_apeman ;
19839: LD_ADDR_OWVAR 28
19843: PUSH
19844: LD_INT 12
19846: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
19847: LD_ADDR_OWVAR 31
19851: PUSH
19852: LD_INT 2
19854: PPUSH
19855: LD_INT 5
19857: PPUSH
19858: CALL_OW 12
19862: PUSH
19863: LD_INT 0
19865: PPUSH
19866: LD_INT 2
19868: PPUSH
19869: CALL_OW 12
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: ST_TO_ADDR
// hc_agressivity := [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 45 , 55 ) ] [ Difficulty ] ;
19886: LD_ADDR_OWVAR 35
19890: PUSH
19891: LD_INT 20
19893: PPUSH
19894: LD_INT 30
19896: PPUSH
19897: CALL_OW 12
19901: PUSH
19902: LD_INT 30
19904: PPUSH
19905: LD_INT 40
19907: PPUSH
19908: CALL_OW 12
19912: PUSH
19913: LD_INT 40
19915: PPUSH
19916: LD_INT 50
19918: PPUSH
19919: CALL_OW 12
19923: PUSH
19924: LD_INT 45
19926: PPUSH
19927: LD_INT 55
19929: PPUSH
19930: CALL_OW 12
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: PUSH
19941: LD_OWVAR 67
19945: ARRAY
19946: ST_TO_ADDR
// un := CreateHuman ;
19947: LD_ADDR_VAR 0 3
19951: PUSH
19952: CALL_OW 44
19956: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
19957: LD_VAR 0 3
19961: PPUSH
19962: LD_INT 19
19964: PPUSH
19965: LD_INT 0
19967: PPUSH
19968: CALL_OW 49
// end ;
19972: GO 19836
19974: POP
19975: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: DOUBLE
19982: LD_INT 1
19984: DEC
19985: ST_TO_ADDR
19986: LD_INT 5
19988: PPUSH
19989: LD_INT 6
19991: PPUSH
19992: CALL_OW 12
19996: PUSH
19997: LD_OWVAR 67
20001: PLUS
20002: PUSH
20003: FOR_TO
20004: IFFALSE 20088
// begin hc_class := class_apeman ;
20006: LD_ADDR_OWVAR 28
20010: PUSH
20011: LD_INT 12
20013: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20014: LD_ADDR_OWVAR 31
20018: PUSH
20019: LD_INT 2
20021: PPUSH
20022: LD_INT 5
20024: PPUSH
20025: CALL_OW 12
20029: PUSH
20030: LD_INT 0
20032: PPUSH
20033: LD_INT 2
20035: PPUSH
20036: CALL_OW 12
20040: PUSH
20041: LD_INT 0
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: ST_TO_ADDR
// hc_agressivity := 0 ;
20053: LD_ADDR_OWVAR 35
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// un = CreateHuman ;
20061: LD_ADDR_VAR 0 3
20065: PUSH
20066: CALL_OW 44
20070: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20071: LD_VAR 0 3
20075: PPUSH
20076: LD_INT 20
20078: PPUSH
20079: LD_INT 0
20081: PPUSH
20082: CALL_OW 49
// end ;
20086: GO 20003
20088: POP
20089: POP
// end ; end_of_file
20090: LD_VAR 0 1
20094: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20095: LD_INT 0
20097: PPUSH
// ar_miner := 81 ;
20098: LD_ADDR_EXP 56
20102: PUSH
20103: LD_INT 81
20105: ST_TO_ADDR
// ar_crane := 88 ;
20106: LD_ADDR_EXP 55
20110: PUSH
20111: LD_INT 88
20113: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20114: LD_ADDR_EXP 50
20118: PUSH
20119: LD_INT 89
20121: ST_TO_ADDR
// us_hack := 99 ;
20122: LD_ADDR_EXP 51
20126: PUSH
20127: LD_INT 99
20129: ST_TO_ADDR
// us_artillery := 97 ;
20130: LD_ADDR_EXP 52
20134: PUSH
20135: LD_INT 97
20137: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20138: LD_ADDR_EXP 53
20142: PUSH
20143: LD_INT 91
20145: ST_TO_ADDR
// ar_mortar := 92 ;
20146: LD_ADDR_EXP 54
20150: PUSH
20151: LD_INT 92
20153: ST_TO_ADDR
// ru_radar := 98 ;
20154: LD_ADDR_EXP 49
20158: PUSH
20159: LD_INT 98
20161: ST_TO_ADDR
// tech_Artillery := 80 ;
20162: LD_ADDR_EXP 57
20166: PUSH
20167: LD_INT 80
20169: ST_TO_ADDR
// tech_RadMat := 81 ;
20170: LD_ADDR_EXP 58
20174: PUSH
20175: LD_INT 81
20177: ST_TO_ADDR
// tech_BasicTools := 82 ;
20178: LD_ADDR_EXP 59
20182: PUSH
20183: LD_INT 82
20185: ST_TO_ADDR
// tech_Cargo := 83 ;
20186: LD_ADDR_EXP 60
20190: PUSH
20191: LD_INT 83
20193: ST_TO_ADDR
// tech_Track := 84 ;
20194: LD_ADDR_EXP 61
20198: PUSH
20199: LD_INT 84
20201: ST_TO_ADDR
// tech_Crane := 85 ;
20202: LD_ADDR_EXP 62
20206: PUSH
20207: LD_INT 85
20209: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20210: LD_ADDR_EXP 63
20214: PUSH
20215: LD_INT 86
20217: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20218: LD_ADDR_EXP 64
20222: PUSH
20223: LD_INT 87
20225: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
20226: LD_ADDR_EXP 65
20230: PUSH
20231: LD_INT 88
20233: ST_TO_ADDR
// class_mastodont := 31 ;
20234: LD_ADDR_EXP 66
20238: PUSH
20239: LD_INT 31
20241: ST_TO_ADDR
// class_horse := 21 ;
20242: LD_ADDR_EXP 67
20246: PUSH
20247: LD_INT 21
20249: ST_TO_ADDR
// end ;
20250: LD_VAR 0 1
20254: RET
// every 1 do
20255: GO 20257
20257: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
20258: CALL 20095 0 0
20262: END
// every 0 0$1 do
20263: GO 20265
20265: DISABLE
// begin enable ;
20266: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20267: LD_STRING updateTimer(
20269: PUSH
20270: LD_OWVAR 1
20274: STR
20275: PUSH
20276: LD_STRING );
20278: STR
20279: PPUSH
20280: CALL_OW 559
// end ;
20284: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20285: LD_INT 0
20287: PPUSH
// if p2 = 100 then
20288: LD_VAR 0 2
20292: PUSH
20293: LD_INT 100
20295: EQUAL
20296: IFFALSE 21299
// begin if not StreamModeActive then
20298: LD_EXP 68
20302: NOT
20303: IFFALSE 20313
// StreamModeActive := true ;
20305: LD_ADDR_EXP 68
20309: PUSH
20310: LD_INT 1
20312: ST_TO_ADDR
// if p3 = 0 then
20313: LD_VAR 0 3
20317: PUSH
20318: LD_INT 0
20320: EQUAL
20321: IFFALSE 20327
// InitStreamMode ;
20323: CALL 21459 0 0
// if p3 = 1 then
20327: LD_VAR 0 3
20331: PUSH
20332: LD_INT 1
20334: EQUAL
20335: IFFALSE 20345
// sRocket := true ;
20337: LD_ADDR_EXP 73
20341: PUSH
20342: LD_INT 1
20344: ST_TO_ADDR
// if p3 = 2 then
20345: LD_VAR 0 3
20349: PUSH
20350: LD_INT 2
20352: EQUAL
20353: IFFALSE 20363
// sSpeed := true ;
20355: LD_ADDR_EXP 72
20359: PUSH
20360: LD_INT 1
20362: ST_TO_ADDR
// if p3 = 3 then
20363: LD_VAR 0 3
20367: PUSH
20368: LD_INT 3
20370: EQUAL
20371: IFFALSE 20381
// sEngine := true ;
20373: LD_ADDR_EXP 74
20377: PUSH
20378: LD_INT 1
20380: ST_TO_ADDR
// if p3 = 4 then
20381: LD_VAR 0 3
20385: PUSH
20386: LD_INT 4
20388: EQUAL
20389: IFFALSE 20399
// sSpec := true ;
20391: LD_ADDR_EXP 71
20395: PUSH
20396: LD_INT 1
20398: ST_TO_ADDR
// if p3 = 5 then
20399: LD_VAR 0 3
20403: PUSH
20404: LD_INT 5
20406: EQUAL
20407: IFFALSE 20417
// sLevel := true ;
20409: LD_ADDR_EXP 75
20413: PUSH
20414: LD_INT 1
20416: ST_TO_ADDR
// if p3 = 6 then
20417: LD_VAR 0 3
20421: PUSH
20422: LD_INT 6
20424: EQUAL
20425: IFFALSE 20435
// sArmoury := true ;
20427: LD_ADDR_EXP 76
20431: PUSH
20432: LD_INT 1
20434: ST_TO_ADDR
// if p3 = 7 then
20435: LD_VAR 0 3
20439: PUSH
20440: LD_INT 7
20442: EQUAL
20443: IFFALSE 20453
// sRadar := true ;
20445: LD_ADDR_EXP 77
20449: PUSH
20450: LD_INT 1
20452: ST_TO_ADDR
// if p3 = 8 then
20453: LD_VAR 0 3
20457: PUSH
20458: LD_INT 8
20460: EQUAL
20461: IFFALSE 20471
// sBunker := true ;
20463: LD_ADDR_EXP 78
20467: PUSH
20468: LD_INT 1
20470: ST_TO_ADDR
// if p3 = 9 then
20471: LD_VAR 0 3
20475: PUSH
20476: LD_INT 9
20478: EQUAL
20479: IFFALSE 20489
// sHack := true ;
20481: LD_ADDR_EXP 79
20485: PUSH
20486: LD_INT 1
20488: ST_TO_ADDR
// if p3 = 10 then
20489: LD_VAR 0 3
20493: PUSH
20494: LD_INT 10
20496: EQUAL
20497: IFFALSE 20507
// sFire := true ;
20499: LD_ADDR_EXP 80
20503: PUSH
20504: LD_INT 1
20506: ST_TO_ADDR
// if p3 = 11 then
20507: LD_VAR 0 3
20511: PUSH
20512: LD_INT 11
20514: EQUAL
20515: IFFALSE 20525
// sRefresh := true ;
20517: LD_ADDR_EXP 81
20521: PUSH
20522: LD_INT 1
20524: ST_TO_ADDR
// if p3 = 12 then
20525: LD_VAR 0 3
20529: PUSH
20530: LD_INT 12
20532: EQUAL
20533: IFFALSE 20543
// sExp := true ;
20535: LD_ADDR_EXP 82
20539: PUSH
20540: LD_INT 1
20542: ST_TO_ADDR
// if p3 = 13 then
20543: LD_VAR 0 3
20547: PUSH
20548: LD_INT 13
20550: EQUAL
20551: IFFALSE 20561
// sDepot := true ;
20553: LD_ADDR_EXP 83
20557: PUSH
20558: LD_INT 1
20560: ST_TO_ADDR
// if p3 = 14 then
20561: LD_VAR 0 3
20565: PUSH
20566: LD_INT 14
20568: EQUAL
20569: IFFALSE 20579
// sFlag := true ;
20571: LD_ADDR_EXP 84
20575: PUSH
20576: LD_INT 1
20578: ST_TO_ADDR
// if p3 = 15 then
20579: LD_VAR 0 3
20583: PUSH
20584: LD_INT 15
20586: EQUAL
20587: IFFALSE 20597
// sKamikadze := true ;
20589: LD_ADDR_EXP 92
20593: PUSH
20594: LD_INT 1
20596: ST_TO_ADDR
// if p3 = 16 then
20597: LD_VAR 0 3
20601: PUSH
20602: LD_INT 16
20604: EQUAL
20605: IFFALSE 20615
// sTroll := true ;
20607: LD_ADDR_EXP 93
20611: PUSH
20612: LD_INT 1
20614: ST_TO_ADDR
// if p3 = 17 then
20615: LD_VAR 0 3
20619: PUSH
20620: LD_INT 17
20622: EQUAL
20623: IFFALSE 20633
// sSlow := true ;
20625: LD_ADDR_EXP 94
20629: PUSH
20630: LD_INT 1
20632: ST_TO_ADDR
// if p3 = 18 then
20633: LD_VAR 0 3
20637: PUSH
20638: LD_INT 18
20640: EQUAL
20641: IFFALSE 20651
// sLack := true ;
20643: LD_ADDR_EXP 95
20647: PUSH
20648: LD_INT 1
20650: ST_TO_ADDR
// if p3 = 19 then
20651: LD_VAR 0 3
20655: PUSH
20656: LD_INT 19
20658: EQUAL
20659: IFFALSE 20669
// sTank := true ;
20661: LD_ADDR_EXP 97
20665: PUSH
20666: LD_INT 1
20668: ST_TO_ADDR
// if p3 = 20 then
20669: LD_VAR 0 3
20673: PUSH
20674: LD_INT 20
20676: EQUAL
20677: IFFALSE 20687
// sRemote := true ;
20679: LD_ADDR_EXP 98
20683: PUSH
20684: LD_INT 1
20686: ST_TO_ADDR
// if p3 = 21 then
20687: LD_VAR 0 3
20691: PUSH
20692: LD_INT 21
20694: EQUAL
20695: IFFALSE 20705
// sPowell := true ;
20697: LD_ADDR_EXP 99
20701: PUSH
20702: LD_INT 1
20704: ST_TO_ADDR
// if p3 = 22 then
20705: LD_VAR 0 3
20709: PUSH
20710: LD_INT 22
20712: EQUAL
20713: IFFALSE 20723
// sTeleport := true ;
20715: LD_ADDR_EXP 102
20719: PUSH
20720: LD_INT 1
20722: ST_TO_ADDR
// if p3 = 23 then
20723: LD_VAR 0 3
20727: PUSH
20728: LD_INT 23
20730: EQUAL
20731: IFFALSE 20741
// sOilTower := true ;
20733: LD_ADDR_EXP 104
20737: PUSH
20738: LD_INT 1
20740: ST_TO_ADDR
// if p3 = 24 then
20741: LD_VAR 0 3
20745: PUSH
20746: LD_INT 24
20748: EQUAL
20749: IFFALSE 20759
// sShovel := true ;
20751: LD_ADDR_EXP 105
20755: PUSH
20756: LD_INT 1
20758: ST_TO_ADDR
// if p3 = 25 then
20759: LD_VAR 0 3
20763: PUSH
20764: LD_INT 25
20766: EQUAL
20767: IFFALSE 20777
// sSheik := true ;
20769: LD_ADDR_EXP 106
20773: PUSH
20774: LD_INT 1
20776: ST_TO_ADDR
// if p3 = 26 then
20777: LD_VAR 0 3
20781: PUSH
20782: LD_INT 26
20784: EQUAL
20785: IFFALSE 20795
// sEarthquake := true ;
20787: LD_ADDR_EXP 108
20791: PUSH
20792: LD_INT 1
20794: ST_TO_ADDR
// if p3 = 27 then
20795: LD_VAR 0 3
20799: PUSH
20800: LD_INT 27
20802: EQUAL
20803: IFFALSE 20813
// sAI := true ;
20805: LD_ADDR_EXP 109
20809: PUSH
20810: LD_INT 1
20812: ST_TO_ADDR
// if p3 = 28 then
20813: LD_VAR 0 3
20817: PUSH
20818: LD_INT 28
20820: EQUAL
20821: IFFALSE 20831
// sCargo := true ;
20823: LD_ADDR_EXP 112
20827: PUSH
20828: LD_INT 1
20830: ST_TO_ADDR
// if p3 = 29 then
20831: LD_VAR 0 3
20835: PUSH
20836: LD_INT 29
20838: EQUAL
20839: IFFALSE 20849
// sDLaser := true ;
20841: LD_ADDR_EXP 113
20845: PUSH
20846: LD_INT 1
20848: ST_TO_ADDR
// if p3 = 30 then
20849: LD_VAR 0 3
20853: PUSH
20854: LD_INT 30
20856: EQUAL
20857: IFFALSE 20867
// sExchange := true ;
20859: LD_ADDR_EXP 114
20863: PUSH
20864: LD_INT 1
20866: ST_TO_ADDR
// if p3 = 31 then
20867: LD_VAR 0 3
20871: PUSH
20872: LD_INT 31
20874: EQUAL
20875: IFFALSE 20885
// sFac := true ;
20877: LD_ADDR_EXP 115
20881: PUSH
20882: LD_INT 1
20884: ST_TO_ADDR
// if p3 = 32 then
20885: LD_VAR 0 3
20889: PUSH
20890: LD_INT 32
20892: EQUAL
20893: IFFALSE 20903
// sPower := true ;
20895: LD_ADDR_EXP 116
20899: PUSH
20900: LD_INT 1
20902: ST_TO_ADDR
// if p3 = 33 then
20903: LD_VAR 0 3
20907: PUSH
20908: LD_INT 33
20910: EQUAL
20911: IFFALSE 20921
// sRandom := true ;
20913: LD_ADDR_EXP 117
20917: PUSH
20918: LD_INT 1
20920: ST_TO_ADDR
// if p3 = 34 then
20921: LD_VAR 0 3
20925: PUSH
20926: LD_INT 34
20928: EQUAL
20929: IFFALSE 20939
// sShield := true ;
20931: LD_ADDR_EXP 118
20935: PUSH
20936: LD_INT 1
20938: ST_TO_ADDR
// if p3 = 35 then
20939: LD_VAR 0 3
20943: PUSH
20944: LD_INT 35
20946: EQUAL
20947: IFFALSE 20957
// sTime := true ;
20949: LD_ADDR_EXP 119
20953: PUSH
20954: LD_INT 1
20956: ST_TO_ADDR
// if p3 = 36 then
20957: LD_VAR 0 3
20961: PUSH
20962: LD_INT 36
20964: EQUAL
20965: IFFALSE 20975
// sTools := true ;
20967: LD_ADDR_EXP 120
20971: PUSH
20972: LD_INT 1
20974: ST_TO_ADDR
// if p3 = 101 then
20975: LD_VAR 0 3
20979: PUSH
20980: LD_INT 101
20982: EQUAL
20983: IFFALSE 20993
// sSold := true ;
20985: LD_ADDR_EXP 85
20989: PUSH
20990: LD_INT 1
20992: ST_TO_ADDR
// if p3 = 102 then
20993: LD_VAR 0 3
20997: PUSH
20998: LD_INT 102
21000: EQUAL
21001: IFFALSE 21011
// sDiff := true ;
21003: LD_ADDR_EXP 86
21007: PUSH
21008: LD_INT 1
21010: ST_TO_ADDR
// if p3 = 103 then
21011: LD_VAR 0 3
21015: PUSH
21016: LD_INT 103
21018: EQUAL
21019: IFFALSE 21029
// sFog := true ;
21021: LD_ADDR_EXP 89
21025: PUSH
21026: LD_INT 1
21028: ST_TO_ADDR
// if p3 = 104 then
21029: LD_VAR 0 3
21033: PUSH
21034: LD_INT 104
21036: EQUAL
21037: IFFALSE 21047
// sReset := true ;
21039: LD_ADDR_EXP 90
21043: PUSH
21044: LD_INT 1
21046: ST_TO_ADDR
// if p3 = 105 then
21047: LD_VAR 0 3
21051: PUSH
21052: LD_INT 105
21054: EQUAL
21055: IFFALSE 21065
// sSun := true ;
21057: LD_ADDR_EXP 91
21061: PUSH
21062: LD_INT 1
21064: ST_TO_ADDR
// if p3 = 106 then
21065: LD_VAR 0 3
21069: PUSH
21070: LD_INT 106
21072: EQUAL
21073: IFFALSE 21083
// sTiger := true ;
21075: LD_ADDR_EXP 87
21079: PUSH
21080: LD_INT 1
21082: ST_TO_ADDR
// if p3 = 107 then
21083: LD_VAR 0 3
21087: PUSH
21088: LD_INT 107
21090: EQUAL
21091: IFFALSE 21101
// sBomb := true ;
21093: LD_ADDR_EXP 88
21097: PUSH
21098: LD_INT 1
21100: ST_TO_ADDR
// if p3 = 108 then
21101: LD_VAR 0 3
21105: PUSH
21106: LD_INT 108
21108: EQUAL
21109: IFFALSE 21119
// sWound := true ;
21111: LD_ADDR_EXP 96
21115: PUSH
21116: LD_INT 1
21118: ST_TO_ADDR
// if p3 = 109 then
21119: LD_VAR 0 3
21123: PUSH
21124: LD_INT 109
21126: EQUAL
21127: IFFALSE 21137
// sBetray := true ;
21129: LD_ADDR_EXP 100
21133: PUSH
21134: LD_INT 1
21136: ST_TO_ADDR
// if p3 = 110 then
21137: LD_VAR 0 3
21141: PUSH
21142: LD_INT 110
21144: EQUAL
21145: IFFALSE 21155
// sContamin := true ;
21147: LD_ADDR_EXP 101
21151: PUSH
21152: LD_INT 1
21154: ST_TO_ADDR
// if p3 = 111 then
21155: LD_VAR 0 3
21159: PUSH
21160: LD_INT 111
21162: EQUAL
21163: IFFALSE 21173
// sOil := true ;
21165: LD_ADDR_EXP 103
21169: PUSH
21170: LD_INT 1
21172: ST_TO_ADDR
// if p3 = 112 then
21173: LD_VAR 0 3
21177: PUSH
21178: LD_INT 112
21180: EQUAL
21181: IFFALSE 21191
// sStu := true ;
21183: LD_ADDR_EXP 107
21187: PUSH
21188: LD_INT 1
21190: ST_TO_ADDR
// if p3 = 113 then
21191: LD_VAR 0 3
21195: PUSH
21196: LD_INT 113
21198: EQUAL
21199: IFFALSE 21209
// sBazooka := true ;
21201: LD_ADDR_EXP 110
21205: PUSH
21206: LD_INT 1
21208: ST_TO_ADDR
// if p3 = 114 then
21209: LD_VAR 0 3
21213: PUSH
21214: LD_INT 114
21216: EQUAL
21217: IFFALSE 21227
// sMortar := true ;
21219: LD_ADDR_EXP 111
21223: PUSH
21224: LD_INT 1
21226: ST_TO_ADDR
// if p3 = 115 then
21227: LD_VAR 0 3
21231: PUSH
21232: LD_INT 115
21234: EQUAL
21235: IFFALSE 21245
// sRanger := true ;
21237: LD_ADDR_EXP 121
21241: PUSH
21242: LD_INT 1
21244: ST_TO_ADDR
// if p3 = 116 then
21245: LD_VAR 0 3
21249: PUSH
21250: LD_INT 116
21252: EQUAL
21253: IFFALSE 21263
// sComputer := true ;
21255: LD_ADDR_EXP 122
21259: PUSH
21260: LD_INT 1
21262: ST_TO_ADDR
// if p3 = 117 then
21263: LD_VAR 0 3
21267: PUSH
21268: LD_INT 117
21270: EQUAL
21271: IFFALSE 21281
// s30 := true ;
21273: LD_ADDR_EXP 123
21277: PUSH
21278: LD_INT 1
21280: ST_TO_ADDR
// if p3 = 118 then
21281: LD_VAR 0 3
21285: PUSH
21286: LD_INT 118
21288: EQUAL
21289: IFFALSE 21299
// s60 := true ;
21291: LD_ADDR_EXP 124
21295: PUSH
21296: LD_INT 1
21298: ST_TO_ADDR
// end ; if p2 = 101 then
21299: LD_VAR 0 2
21303: PUSH
21304: LD_INT 101
21306: EQUAL
21307: IFFALSE 21435
// begin case p3 of 1 :
21309: LD_VAR 0 3
21313: PUSH
21314: LD_INT 1
21316: DOUBLE
21317: EQUAL
21318: IFTRUE 21322
21320: GO 21329
21322: POP
// hHackUnlimitedResources ; 2 :
21323: CALL 33031 0 0
21327: GO 21435
21329: LD_INT 2
21331: DOUBLE
21332: EQUAL
21333: IFTRUE 21337
21335: GO 21344
21337: POP
// hHackSetLevel10 ; 3 :
21338: CALL 33164 0 0
21342: GO 21435
21344: LD_INT 3
21346: DOUBLE
21347: EQUAL
21348: IFTRUE 21352
21350: GO 21359
21352: POP
// hHackSetLevel10YourUnits ; 4 :
21353: CALL 33249 0 0
21357: GO 21435
21359: LD_INT 4
21361: DOUBLE
21362: EQUAL
21363: IFTRUE 21367
21365: GO 21374
21367: POP
// hHackInvincible ; 5 :
21368: CALL 33697 0 0
21372: GO 21435
21374: LD_INT 5
21376: DOUBLE
21377: EQUAL
21378: IFTRUE 21382
21380: GO 21389
21382: POP
// hHackInvisible ; 6 :
21383: CALL 33808 0 0
21387: GO 21435
21389: LD_INT 6
21391: DOUBLE
21392: EQUAL
21393: IFTRUE 21397
21395: GO 21404
21397: POP
// hHackChangeYourSide ; 7 :
21398: CALL 33865 0 0
21402: GO 21435
21404: LD_INT 7
21406: DOUBLE
21407: EQUAL
21408: IFTRUE 21412
21410: GO 21419
21412: POP
// hHackChangeUnitSide ; 8 :
21413: CALL 33907 0 0
21417: GO 21435
21419: LD_INT 8
21421: DOUBLE
21422: EQUAL
21423: IFTRUE 21427
21425: GO 21434
21427: POP
// hHackFog ; end ;
21428: CALL 34008 0 0
21432: GO 21435
21434: POP
// end ; end ;
21435: LD_VAR 0 7
21439: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21440: GO 21442
21442: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21443: LD_STRING initStreamRollete();
21445: PPUSH
21446: CALL_OW 559
// InitStreamMode ;
21450: CALL 21459 0 0
// DefineStreamItems ( ) ;
21454: CALL 21923 0 0
// end ;
21458: END
// function InitStreamMode ; begin
21459: LD_INT 0
21461: PPUSH
// streamModeActive := false ;
21462: LD_ADDR_EXP 68
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// normalCounter := 36 ;
21470: LD_ADDR_EXP 69
21474: PUSH
21475: LD_INT 36
21477: ST_TO_ADDR
// hardcoreCounter := 16 ;
21478: LD_ADDR_EXP 70
21482: PUSH
21483: LD_INT 16
21485: ST_TO_ADDR
// sRocket := false ;
21486: LD_ADDR_EXP 73
21490: PUSH
21491: LD_INT 0
21493: ST_TO_ADDR
// sSpeed := false ;
21494: LD_ADDR_EXP 72
21498: PUSH
21499: LD_INT 0
21501: ST_TO_ADDR
// sEngine := false ;
21502: LD_ADDR_EXP 74
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
// sSpec := false ;
21510: LD_ADDR_EXP 71
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
// sLevel := false ;
21518: LD_ADDR_EXP 75
21522: PUSH
21523: LD_INT 0
21525: ST_TO_ADDR
// sArmoury := false ;
21526: LD_ADDR_EXP 76
21530: PUSH
21531: LD_INT 0
21533: ST_TO_ADDR
// sRadar := false ;
21534: LD_ADDR_EXP 77
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
// sBunker := false ;
21542: LD_ADDR_EXP 78
21546: PUSH
21547: LD_INT 0
21549: ST_TO_ADDR
// sHack := false ;
21550: LD_ADDR_EXP 79
21554: PUSH
21555: LD_INT 0
21557: ST_TO_ADDR
// sFire := false ;
21558: LD_ADDR_EXP 80
21562: PUSH
21563: LD_INT 0
21565: ST_TO_ADDR
// sRefresh := false ;
21566: LD_ADDR_EXP 81
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// sExp := false ;
21574: LD_ADDR_EXP 82
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
// sDepot := false ;
21582: LD_ADDR_EXP 83
21586: PUSH
21587: LD_INT 0
21589: ST_TO_ADDR
// sFlag := false ;
21590: LD_ADDR_EXP 84
21594: PUSH
21595: LD_INT 0
21597: ST_TO_ADDR
// sKamikadze := false ;
21598: LD_ADDR_EXP 92
21602: PUSH
21603: LD_INT 0
21605: ST_TO_ADDR
// sTroll := false ;
21606: LD_ADDR_EXP 93
21610: PUSH
21611: LD_INT 0
21613: ST_TO_ADDR
// sSlow := false ;
21614: LD_ADDR_EXP 94
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// sLack := false ;
21622: LD_ADDR_EXP 95
21626: PUSH
21627: LD_INT 0
21629: ST_TO_ADDR
// sTank := false ;
21630: LD_ADDR_EXP 97
21634: PUSH
21635: LD_INT 0
21637: ST_TO_ADDR
// sRemote := false ;
21638: LD_ADDR_EXP 98
21642: PUSH
21643: LD_INT 0
21645: ST_TO_ADDR
// sPowell := false ;
21646: LD_ADDR_EXP 99
21650: PUSH
21651: LD_INT 0
21653: ST_TO_ADDR
// sTeleport := false ;
21654: LD_ADDR_EXP 102
21658: PUSH
21659: LD_INT 0
21661: ST_TO_ADDR
// sOilTower := false ;
21662: LD_ADDR_EXP 104
21666: PUSH
21667: LD_INT 0
21669: ST_TO_ADDR
// sShovel := false ;
21670: LD_ADDR_EXP 105
21674: PUSH
21675: LD_INT 0
21677: ST_TO_ADDR
// sSheik := false ;
21678: LD_ADDR_EXP 106
21682: PUSH
21683: LD_INT 0
21685: ST_TO_ADDR
// sEarthquake := false ;
21686: LD_ADDR_EXP 108
21690: PUSH
21691: LD_INT 0
21693: ST_TO_ADDR
// sAI := false ;
21694: LD_ADDR_EXP 109
21698: PUSH
21699: LD_INT 0
21701: ST_TO_ADDR
// sCargo := false ;
21702: LD_ADDR_EXP 112
21706: PUSH
21707: LD_INT 0
21709: ST_TO_ADDR
// sDLaser := false ;
21710: LD_ADDR_EXP 113
21714: PUSH
21715: LD_INT 0
21717: ST_TO_ADDR
// sExchange := false ;
21718: LD_ADDR_EXP 114
21722: PUSH
21723: LD_INT 0
21725: ST_TO_ADDR
// sFac := false ;
21726: LD_ADDR_EXP 115
21730: PUSH
21731: LD_INT 0
21733: ST_TO_ADDR
// sPower := false ;
21734: LD_ADDR_EXP 116
21738: PUSH
21739: LD_INT 0
21741: ST_TO_ADDR
// sRandom := false ;
21742: LD_ADDR_EXP 117
21746: PUSH
21747: LD_INT 0
21749: ST_TO_ADDR
// sShield := false ;
21750: LD_ADDR_EXP 118
21754: PUSH
21755: LD_INT 0
21757: ST_TO_ADDR
// sTime := false ;
21758: LD_ADDR_EXP 119
21762: PUSH
21763: LD_INT 0
21765: ST_TO_ADDR
// sTools := false ;
21766: LD_ADDR_EXP 120
21770: PUSH
21771: LD_INT 0
21773: ST_TO_ADDR
// sSold := false ;
21774: LD_ADDR_EXP 85
21778: PUSH
21779: LD_INT 0
21781: ST_TO_ADDR
// sDiff := false ;
21782: LD_ADDR_EXP 86
21786: PUSH
21787: LD_INT 0
21789: ST_TO_ADDR
// sFog := false ;
21790: LD_ADDR_EXP 89
21794: PUSH
21795: LD_INT 0
21797: ST_TO_ADDR
// sReset := false ;
21798: LD_ADDR_EXP 90
21802: PUSH
21803: LD_INT 0
21805: ST_TO_ADDR
// sSun := false ;
21806: LD_ADDR_EXP 91
21810: PUSH
21811: LD_INT 0
21813: ST_TO_ADDR
// sTiger := false ;
21814: LD_ADDR_EXP 87
21818: PUSH
21819: LD_INT 0
21821: ST_TO_ADDR
// sBomb := false ;
21822: LD_ADDR_EXP 88
21826: PUSH
21827: LD_INT 0
21829: ST_TO_ADDR
// sWound := false ;
21830: LD_ADDR_EXP 96
21834: PUSH
21835: LD_INT 0
21837: ST_TO_ADDR
// sBetray := false ;
21838: LD_ADDR_EXP 100
21842: PUSH
21843: LD_INT 0
21845: ST_TO_ADDR
// sContamin := false ;
21846: LD_ADDR_EXP 101
21850: PUSH
21851: LD_INT 0
21853: ST_TO_ADDR
// sOil := false ;
21854: LD_ADDR_EXP 103
21858: PUSH
21859: LD_INT 0
21861: ST_TO_ADDR
// sStu := false ;
21862: LD_ADDR_EXP 107
21866: PUSH
21867: LD_INT 0
21869: ST_TO_ADDR
// sBazooka := false ;
21870: LD_ADDR_EXP 110
21874: PUSH
21875: LD_INT 0
21877: ST_TO_ADDR
// sMortar := false ;
21878: LD_ADDR_EXP 111
21882: PUSH
21883: LD_INT 0
21885: ST_TO_ADDR
// sRanger := false ;
21886: LD_ADDR_EXP 121
21890: PUSH
21891: LD_INT 0
21893: ST_TO_ADDR
// sComputer := false ;
21894: LD_ADDR_EXP 122
21898: PUSH
21899: LD_INT 0
21901: ST_TO_ADDR
// s30 := false ;
21902: LD_ADDR_EXP 123
21906: PUSH
21907: LD_INT 0
21909: ST_TO_ADDR
// s60 := false ;
21910: LD_ADDR_EXP 124
21914: PUSH
21915: LD_INT 0
21917: ST_TO_ADDR
// end ;
21918: LD_VAR 0 1
21922: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21923: LD_INT 0
21925: PPUSH
21926: PPUSH
21927: PPUSH
21928: PPUSH
21929: PPUSH
// result := [ ] ;
21930: LD_ADDR_VAR 0 1
21934: PUSH
21935: EMPTY
21936: ST_TO_ADDR
// if campaign_id = 1 then
21937: LD_OWVAR 69
21941: PUSH
21942: LD_INT 1
21944: EQUAL
21945: IFFALSE 25111
// begin case mission_number of 1 :
21947: LD_OWVAR 70
21951: PUSH
21952: LD_INT 1
21954: DOUBLE
21955: EQUAL
21956: IFTRUE 21960
21958: GO 22036
21960: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21961: LD_ADDR_VAR 0 1
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: LD_INT 4
21971: PUSH
21972: LD_INT 11
21974: PUSH
21975: LD_INT 12
21977: PUSH
21978: LD_INT 15
21980: PUSH
21981: LD_INT 16
21983: PUSH
21984: LD_INT 22
21986: PUSH
21987: LD_INT 23
21989: PUSH
21990: LD_INT 26
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 101
22006: PUSH
22007: LD_INT 102
22009: PUSH
22010: LD_INT 106
22012: PUSH
22013: LD_INT 116
22015: PUSH
22016: LD_INT 117
22018: PUSH
22019: LD_INT 118
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: ST_TO_ADDR
22034: GO 25109
22036: LD_INT 2
22038: DOUBLE
22039: EQUAL
22040: IFTRUE 22044
22042: GO 22128
22044: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 4
22055: PUSH
22056: LD_INT 11
22058: PUSH
22059: LD_INT 12
22061: PUSH
22062: LD_INT 15
22064: PUSH
22065: LD_INT 16
22067: PUSH
22068: LD_INT 22
22070: PUSH
22071: LD_INT 23
22073: PUSH
22074: LD_INT 26
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 101
22090: PUSH
22091: LD_INT 102
22093: PUSH
22094: LD_INT 105
22096: PUSH
22097: LD_INT 106
22099: PUSH
22100: LD_INT 108
22102: PUSH
22103: LD_INT 116
22105: PUSH
22106: LD_INT 117
22108: PUSH
22109: LD_INT 118
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: ST_TO_ADDR
22126: GO 25109
22128: LD_INT 3
22130: DOUBLE
22131: EQUAL
22132: IFTRUE 22136
22134: GO 22224
22136: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22137: LD_ADDR_VAR 0 1
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: LD_INT 4
22147: PUSH
22148: LD_INT 5
22150: PUSH
22151: LD_INT 11
22153: PUSH
22154: LD_INT 12
22156: PUSH
22157: LD_INT 15
22159: PUSH
22160: LD_INT 16
22162: PUSH
22163: LD_INT 22
22165: PUSH
22166: LD_INT 26
22168: PUSH
22169: LD_INT 36
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 101
22186: PUSH
22187: LD_INT 102
22189: PUSH
22190: LD_INT 105
22192: PUSH
22193: LD_INT 106
22195: PUSH
22196: LD_INT 108
22198: PUSH
22199: LD_INT 116
22201: PUSH
22202: LD_INT 117
22204: PUSH
22205: LD_INT 118
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: ST_TO_ADDR
22222: GO 25109
22224: LD_INT 4
22226: DOUBLE
22227: EQUAL
22228: IFTRUE 22232
22230: GO 22328
22232: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22233: LD_ADDR_VAR 0 1
22237: PUSH
22238: LD_INT 2
22240: PUSH
22241: LD_INT 4
22243: PUSH
22244: LD_INT 5
22246: PUSH
22247: LD_INT 8
22249: PUSH
22250: LD_INT 11
22252: PUSH
22253: LD_INT 12
22255: PUSH
22256: LD_INT 15
22258: PUSH
22259: LD_INT 16
22261: PUSH
22262: LD_INT 22
22264: PUSH
22265: LD_INT 23
22267: PUSH
22268: LD_INT 26
22270: PUSH
22271: LD_INT 36
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 101
22290: PUSH
22291: LD_INT 102
22293: PUSH
22294: LD_INT 105
22296: PUSH
22297: LD_INT 106
22299: PUSH
22300: LD_INT 108
22302: PUSH
22303: LD_INT 116
22305: PUSH
22306: LD_INT 117
22308: PUSH
22309: LD_INT 118
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: ST_TO_ADDR
22326: GO 25109
22328: LD_INT 5
22330: DOUBLE
22331: EQUAL
22332: IFTRUE 22336
22334: GO 22448
22336: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22337: LD_ADDR_VAR 0 1
22341: PUSH
22342: LD_INT 2
22344: PUSH
22345: LD_INT 4
22347: PUSH
22348: LD_INT 5
22350: PUSH
22351: LD_INT 6
22353: PUSH
22354: LD_INT 8
22356: PUSH
22357: LD_INT 11
22359: PUSH
22360: LD_INT 12
22362: PUSH
22363: LD_INT 15
22365: PUSH
22366: LD_INT 16
22368: PUSH
22369: LD_INT 22
22371: PUSH
22372: LD_INT 23
22374: PUSH
22375: LD_INT 25
22377: PUSH
22378: LD_INT 26
22380: PUSH
22381: LD_INT 36
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 101
22402: PUSH
22403: LD_INT 102
22405: PUSH
22406: LD_INT 105
22408: PUSH
22409: LD_INT 106
22411: PUSH
22412: LD_INT 108
22414: PUSH
22415: LD_INT 109
22417: PUSH
22418: LD_INT 112
22420: PUSH
22421: LD_INT 116
22423: PUSH
22424: LD_INT 117
22426: PUSH
22427: LD_INT 118
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: ST_TO_ADDR
22446: GO 25109
22448: LD_INT 6
22450: DOUBLE
22451: EQUAL
22452: IFTRUE 22456
22454: GO 22588
22456: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22457: LD_ADDR_VAR 0 1
22461: PUSH
22462: LD_INT 2
22464: PUSH
22465: LD_INT 4
22467: PUSH
22468: LD_INT 5
22470: PUSH
22471: LD_INT 6
22473: PUSH
22474: LD_INT 8
22476: PUSH
22477: LD_INT 11
22479: PUSH
22480: LD_INT 12
22482: PUSH
22483: LD_INT 15
22485: PUSH
22486: LD_INT 16
22488: PUSH
22489: LD_INT 20
22491: PUSH
22492: LD_INT 21
22494: PUSH
22495: LD_INT 22
22497: PUSH
22498: LD_INT 23
22500: PUSH
22501: LD_INT 25
22503: PUSH
22504: LD_INT 26
22506: PUSH
22507: LD_INT 30
22509: PUSH
22510: LD_INT 31
22512: PUSH
22513: LD_INT 32
22515: PUSH
22516: LD_INT 36
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 101
22542: PUSH
22543: LD_INT 102
22545: PUSH
22546: LD_INT 105
22548: PUSH
22549: LD_INT 106
22551: PUSH
22552: LD_INT 108
22554: PUSH
22555: LD_INT 109
22557: PUSH
22558: LD_INT 112
22560: PUSH
22561: LD_INT 116
22563: PUSH
22564: LD_INT 117
22566: PUSH
22567: LD_INT 118
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: ST_TO_ADDR
22586: GO 25109
22588: LD_INT 7
22590: DOUBLE
22591: EQUAL
22592: IFTRUE 22596
22594: GO 22708
22596: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22597: LD_ADDR_VAR 0 1
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: LD_INT 4
22607: PUSH
22608: LD_INT 5
22610: PUSH
22611: LD_INT 7
22613: PUSH
22614: LD_INT 11
22616: PUSH
22617: LD_INT 12
22619: PUSH
22620: LD_INT 15
22622: PUSH
22623: LD_INT 16
22625: PUSH
22626: LD_INT 20
22628: PUSH
22629: LD_INT 21
22631: PUSH
22632: LD_INT 22
22634: PUSH
22635: LD_INT 23
22637: PUSH
22638: LD_INT 25
22640: PUSH
22641: LD_INT 26
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 101
22662: PUSH
22663: LD_INT 102
22665: PUSH
22666: LD_INT 103
22668: PUSH
22669: LD_INT 105
22671: PUSH
22672: LD_INT 106
22674: PUSH
22675: LD_INT 108
22677: PUSH
22678: LD_INT 112
22680: PUSH
22681: LD_INT 116
22683: PUSH
22684: LD_INT 117
22686: PUSH
22687: LD_INT 118
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: ST_TO_ADDR
22706: GO 25109
22708: LD_INT 8
22710: DOUBLE
22711: EQUAL
22712: IFTRUE 22716
22714: GO 22856
22716: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22717: LD_ADDR_VAR 0 1
22721: PUSH
22722: LD_INT 2
22724: PUSH
22725: LD_INT 4
22727: PUSH
22728: LD_INT 5
22730: PUSH
22731: LD_INT 6
22733: PUSH
22734: LD_INT 7
22736: PUSH
22737: LD_INT 8
22739: PUSH
22740: LD_INT 11
22742: PUSH
22743: LD_INT 12
22745: PUSH
22746: LD_INT 15
22748: PUSH
22749: LD_INT 16
22751: PUSH
22752: LD_INT 20
22754: PUSH
22755: LD_INT 21
22757: PUSH
22758: LD_INT 22
22760: PUSH
22761: LD_INT 23
22763: PUSH
22764: LD_INT 25
22766: PUSH
22767: LD_INT 26
22769: PUSH
22770: LD_INT 30
22772: PUSH
22773: LD_INT 31
22775: PUSH
22776: LD_INT 32
22778: PUSH
22779: LD_INT 36
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 101
22806: PUSH
22807: LD_INT 102
22809: PUSH
22810: LD_INT 103
22812: PUSH
22813: LD_INT 105
22815: PUSH
22816: LD_INT 106
22818: PUSH
22819: LD_INT 108
22821: PUSH
22822: LD_INT 109
22824: PUSH
22825: LD_INT 112
22827: PUSH
22828: LD_INT 116
22830: PUSH
22831: LD_INT 117
22833: PUSH
22834: LD_INT 118
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: ST_TO_ADDR
22854: GO 25109
22856: LD_INT 9
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 23012
22864: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22865: LD_ADDR_VAR 0 1
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: LD_INT 4
22875: PUSH
22876: LD_INT 5
22878: PUSH
22879: LD_INT 6
22881: PUSH
22882: LD_INT 7
22884: PUSH
22885: LD_INT 8
22887: PUSH
22888: LD_INT 11
22890: PUSH
22891: LD_INT 12
22893: PUSH
22894: LD_INT 15
22896: PUSH
22897: LD_INT 16
22899: PUSH
22900: LD_INT 20
22902: PUSH
22903: LD_INT 21
22905: PUSH
22906: LD_INT 22
22908: PUSH
22909: LD_INT 23
22911: PUSH
22912: LD_INT 25
22914: PUSH
22915: LD_INT 26
22917: PUSH
22918: LD_INT 28
22920: PUSH
22921: LD_INT 30
22923: PUSH
22924: LD_INT 31
22926: PUSH
22927: LD_INT 32
22929: PUSH
22930: LD_INT 36
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 101
22958: PUSH
22959: LD_INT 102
22961: PUSH
22962: LD_INT 103
22964: PUSH
22965: LD_INT 105
22967: PUSH
22968: LD_INT 106
22970: PUSH
22971: LD_INT 108
22973: PUSH
22974: LD_INT 109
22976: PUSH
22977: LD_INT 112
22979: PUSH
22980: LD_INT 114
22982: PUSH
22983: LD_INT 116
22985: PUSH
22986: LD_INT 117
22988: PUSH
22989: LD_INT 118
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: ST_TO_ADDR
23010: GO 25109
23012: LD_INT 10
23014: DOUBLE
23015: EQUAL
23016: IFTRUE 23020
23018: GO 23216
23020: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23021: LD_ADDR_VAR 0 1
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: LD_INT 4
23031: PUSH
23032: LD_INT 5
23034: PUSH
23035: LD_INT 6
23037: PUSH
23038: LD_INT 7
23040: PUSH
23041: LD_INT 8
23043: PUSH
23044: LD_INT 9
23046: PUSH
23047: LD_INT 10
23049: PUSH
23050: LD_INT 11
23052: PUSH
23053: LD_INT 12
23055: PUSH
23056: LD_INT 13
23058: PUSH
23059: LD_INT 14
23061: PUSH
23062: LD_INT 15
23064: PUSH
23065: LD_INT 16
23067: PUSH
23068: LD_INT 17
23070: PUSH
23071: LD_INT 18
23073: PUSH
23074: LD_INT 19
23076: PUSH
23077: LD_INT 20
23079: PUSH
23080: LD_INT 21
23082: PUSH
23083: LD_INT 22
23085: PUSH
23086: LD_INT 23
23088: PUSH
23089: LD_INT 24
23091: PUSH
23092: LD_INT 25
23094: PUSH
23095: LD_INT 26
23097: PUSH
23098: LD_INT 28
23100: PUSH
23101: LD_INT 30
23103: PUSH
23104: LD_INT 31
23106: PUSH
23107: LD_INT 32
23109: PUSH
23110: LD_INT 36
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 101
23146: PUSH
23147: LD_INT 102
23149: PUSH
23150: LD_INT 103
23152: PUSH
23153: LD_INT 104
23155: PUSH
23156: LD_INT 105
23158: PUSH
23159: LD_INT 106
23161: PUSH
23162: LD_INT 107
23164: PUSH
23165: LD_INT 108
23167: PUSH
23168: LD_INT 109
23170: PUSH
23171: LD_INT 110
23173: PUSH
23174: LD_INT 111
23176: PUSH
23177: LD_INT 112
23179: PUSH
23180: LD_INT 114
23182: PUSH
23183: LD_INT 116
23185: PUSH
23186: LD_INT 117
23188: PUSH
23189: LD_INT 118
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: ST_TO_ADDR
23214: GO 25109
23216: LD_INT 11
23218: DOUBLE
23219: EQUAL
23220: IFTRUE 23224
23222: GO 23428
23224: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23225: LD_ADDR_VAR 0 1
23229: PUSH
23230: LD_INT 2
23232: PUSH
23233: LD_INT 3
23235: PUSH
23236: LD_INT 4
23238: PUSH
23239: LD_INT 5
23241: PUSH
23242: LD_INT 6
23244: PUSH
23245: LD_INT 7
23247: PUSH
23248: LD_INT 8
23250: PUSH
23251: LD_INT 9
23253: PUSH
23254: LD_INT 10
23256: PUSH
23257: LD_INT 11
23259: PUSH
23260: LD_INT 12
23262: PUSH
23263: LD_INT 13
23265: PUSH
23266: LD_INT 14
23268: PUSH
23269: LD_INT 15
23271: PUSH
23272: LD_INT 16
23274: PUSH
23275: LD_INT 17
23277: PUSH
23278: LD_INT 18
23280: PUSH
23281: LD_INT 19
23283: PUSH
23284: LD_INT 20
23286: PUSH
23287: LD_INT 21
23289: PUSH
23290: LD_INT 22
23292: PUSH
23293: LD_INT 23
23295: PUSH
23296: LD_INT 24
23298: PUSH
23299: LD_INT 25
23301: PUSH
23302: LD_INT 26
23304: PUSH
23305: LD_INT 28
23307: PUSH
23308: LD_INT 30
23310: PUSH
23311: LD_INT 31
23313: PUSH
23314: LD_INT 32
23316: PUSH
23317: LD_INT 34
23319: PUSH
23320: LD_INT 36
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 101
23358: PUSH
23359: LD_INT 102
23361: PUSH
23362: LD_INT 103
23364: PUSH
23365: LD_INT 104
23367: PUSH
23368: LD_INT 105
23370: PUSH
23371: LD_INT 106
23373: PUSH
23374: LD_INT 107
23376: PUSH
23377: LD_INT 108
23379: PUSH
23380: LD_INT 109
23382: PUSH
23383: LD_INT 110
23385: PUSH
23386: LD_INT 111
23388: PUSH
23389: LD_INT 112
23391: PUSH
23392: LD_INT 114
23394: PUSH
23395: LD_INT 116
23397: PUSH
23398: LD_INT 117
23400: PUSH
23401: LD_INT 118
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: ST_TO_ADDR
23426: GO 25109
23428: LD_INT 12
23430: DOUBLE
23431: EQUAL
23432: IFTRUE 23436
23434: GO 23656
23436: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23437: LD_ADDR_VAR 0 1
23441: PUSH
23442: LD_INT 1
23444: PUSH
23445: LD_INT 2
23447: PUSH
23448: LD_INT 3
23450: PUSH
23451: LD_INT 4
23453: PUSH
23454: LD_INT 5
23456: PUSH
23457: LD_INT 6
23459: PUSH
23460: LD_INT 7
23462: PUSH
23463: LD_INT 8
23465: PUSH
23466: LD_INT 9
23468: PUSH
23469: LD_INT 10
23471: PUSH
23472: LD_INT 11
23474: PUSH
23475: LD_INT 12
23477: PUSH
23478: LD_INT 13
23480: PUSH
23481: LD_INT 14
23483: PUSH
23484: LD_INT 15
23486: PUSH
23487: LD_INT 16
23489: PUSH
23490: LD_INT 17
23492: PUSH
23493: LD_INT 18
23495: PUSH
23496: LD_INT 19
23498: PUSH
23499: LD_INT 20
23501: PUSH
23502: LD_INT 21
23504: PUSH
23505: LD_INT 22
23507: PUSH
23508: LD_INT 23
23510: PUSH
23511: LD_INT 24
23513: PUSH
23514: LD_INT 25
23516: PUSH
23517: LD_INT 26
23519: PUSH
23520: LD_INT 27
23522: PUSH
23523: LD_INT 28
23525: PUSH
23526: LD_INT 30
23528: PUSH
23529: LD_INT 31
23531: PUSH
23532: LD_INT 32
23534: PUSH
23535: LD_INT 33
23537: PUSH
23538: LD_INT 34
23540: PUSH
23541: LD_INT 36
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 101
23582: PUSH
23583: LD_INT 102
23585: PUSH
23586: LD_INT 103
23588: PUSH
23589: LD_INT 104
23591: PUSH
23592: LD_INT 105
23594: PUSH
23595: LD_INT 106
23597: PUSH
23598: LD_INT 107
23600: PUSH
23601: LD_INT 108
23603: PUSH
23604: LD_INT 109
23606: PUSH
23607: LD_INT 110
23609: PUSH
23610: LD_INT 111
23612: PUSH
23613: LD_INT 112
23615: PUSH
23616: LD_INT 113
23618: PUSH
23619: LD_INT 114
23621: PUSH
23622: LD_INT 116
23624: PUSH
23625: LD_INT 117
23627: PUSH
23628: LD_INT 118
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: ST_TO_ADDR
23654: GO 25109
23656: LD_INT 13
23658: DOUBLE
23659: EQUAL
23660: IFTRUE 23664
23662: GO 23872
23664: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23665: LD_ADDR_VAR 0 1
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: LD_INT 3
23678: PUSH
23679: LD_INT 4
23681: PUSH
23682: LD_INT 5
23684: PUSH
23685: LD_INT 8
23687: PUSH
23688: LD_INT 9
23690: PUSH
23691: LD_INT 10
23693: PUSH
23694: LD_INT 11
23696: PUSH
23697: LD_INT 12
23699: PUSH
23700: LD_INT 14
23702: PUSH
23703: LD_INT 15
23705: PUSH
23706: LD_INT 16
23708: PUSH
23709: LD_INT 17
23711: PUSH
23712: LD_INT 18
23714: PUSH
23715: LD_INT 19
23717: PUSH
23718: LD_INT 20
23720: PUSH
23721: LD_INT 21
23723: PUSH
23724: LD_INT 22
23726: PUSH
23727: LD_INT 23
23729: PUSH
23730: LD_INT 24
23732: PUSH
23733: LD_INT 25
23735: PUSH
23736: LD_INT 26
23738: PUSH
23739: LD_INT 27
23741: PUSH
23742: LD_INT 28
23744: PUSH
23745: LD_INT 30
23747: PUSH
23748: LD_INT 31
23750: PUSH
23751: LD_INT 32
23753: PUSH
23754: LD_INT 33
23756: PUSH
23757: LD_INT 34
23759: PUSH
23760: LD_INT 36
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 101
23798: PUSH
23799: LD_INT 102
23801: PUSH
23802: LD_INT 103
23804: PUSH
23805: LD_INT 104
23807: PUSH
23808: LD_INT 105
23810: PUSH
23811: LD_INT 106
23813: PUSH
23814: LD_INT 107
23816: PUSH
23817: LD_INT 108
23819: PUSH
23820: LD_INT 109
23822: PUSH
23823: LD_INT 110
23825: PUSH
23826: LD_INT 111
23828: PUSH
23829: LD_INT 112
23831: PUSH
23832: LD_INT 113
23834: PUSH
23835: LD_INT 114
23837: PUSH
23838: LD_INT 116
23840: PUSH
23841: LD_INT 117
23843: PUSH
23844: LD_INT 118
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: ST_TO_ADDR
23870: GO 25109
23872: LD_INT 14
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 24104
23880: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23881: LD_ADDR_VAR 0 1
23885: PUSH
23886: LD_INT 1
23888: PUSH
23889: LD_INT 2
23891: PUSH
23892: LD_INT 3
23894: PUSH
23895: LD_INT 4
23897: PUSH
23898: LD_INT 5
23900: PUSH
23901: LD_INT 6
23903: PUSH
23904: LD_INT 7
23906: PUSH
23907: LD_INT 8
23909: PUSH
23910: LD_INT 9
23912: PUSH
23913: LD_INT 10
23915: PUSH
23916: LD_INT 11
23918: PUSH
23919: LD_INT 12
23921: PUSH
23922: LD_INT 13
23924: PUSH
23925: LD_INT 14
23927: PUSH
23928: LD_INT 15
23930: PUSH
23931: LD_INT 16
23933: PUSH
23934: LD_INT 17
23936: PUSH
23937: LD_INT 18
23939: PUSH
23940: LD_INT 19
23942: PUSH
23943: LD_INT 20
23945: PUSH
23946: LD_INT 21
23948: PUSH
23949: LD_INT 22
23951: PUSH
23952: LD_INT 23
23954: PUSH
23955: LD_INT 24
23957: PUSH
23958: LD_INT 25
23960: PUSH
23961: LD_INT 26
23963: PUSH
23964: LD_INT 27
23966: PUSH
23967: LD_INT 28
23969: PUSH
23970: LD_INT 29
23972: PUSH
23973: LD_INT 30
23975: PUSH
23976: LD_INT 31
23978: PUSH
23979: LD_INT 32
23981: PUSH
23982: LD_INT 33
23984: PUSH
23985: LD_INT 34
23987: PUSH
23988: LD_INT 36
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 101
24030: PUSH
24031: LD_INT 102
24033: PUSH
24034: LD_INT 103
24036: PUSH
24037: LD_INT 104
24039: PUSH
24040: LD_INT 105
24042: PUSH
24043: LD_INT 106
24045: PUSH
24046: LD_INT 107
24048: PUSH
24049: LD_INT 108
24051: PUSH
24052: LD_INT 109
24054: PUSH
24055: LD_INT 110
24057: PUSH
24058: LD_INT 111
24060: PUSH
24061: LD_INT 112
24063: PUSH
24064: LD_INT 113
24066: PUSH
24067: LD_INT 114
24069: PUSH
24070: LD_INT 116
24072: PUSH
24073: LD_INT 117
24075: PUSH
24076: LD_INT 118
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: ST_TO_ADDR
24102: GO 25109
24104: LD_INT 15
24106: DOUBLE
24107: EQUAL
24108: IFTRUE 24112
24110: GO 24336
24112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24113: LD_ADDR_VAR 0 1
24117: PUSH
24118: LD_INT 1
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: LD_INT 3
24126: PUSH
24127: LD_INT 4
24129: PUSH
24130: LD_INT 5
24132: PUSH
24133: LD_INT 6
24135: PUSH
24136: LD_INT 7
24138: PUSH
24139: LD_INT 8
24141: PUSH
24142: LD_INT 9
24144: PUSH
24145: LD_INT 10
24147: PUSH
24148: LD_INT 11
24150: PUSH
24151: LD_INT 12
24153: PUSH
24154: LD_INT 13
24156: PUSH
24157: LD_INT 14
24159: PUSH
24160: LD_INT 15
24162: PUSH
24163: LD_INT 16
24165: PUSH
24166: LD_INT 17
24168: PUSH
24169: LD_INT 18
24171: PUSH
24172: LD_INT 19
24174: PUSH
24175: LD_INT 20
24177: PUSH
24178: LD_INT 21
24180: PUSH
24181: LD_INT 22
24183: PUSH
24184: LD_INT 23
24186: PUSH
24187: LD_INT 24
24189: PUSH
24190: LD_INT 25
24192: PUSH
24193: LD_INT 26
24195: PUSH
24196: LD_INT 27
24198: PUSH
24199: LD_INT 28
24201: PUSH
24202: LD_INT 29
24204: PUSH
24205: LD_INT 30
24207: PUSH
24208: LD_INT 31
24210: PUSH
24211: LD_INT 32
24213: PUSH
24214: LD_INT 33
24216: PUSH
24217: LD_INT 34
24219: PUSH
24220: LD_INT 36
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 101
24262: PUSH
24263: LD_INT 102
24265: PUSH
24266: LD_INT 103
24268: PUSH
24269: LD_INT 104
24271: PUSH
24272: LD_INT 105
24274: PUSH
24275: LD_INT 106
24277: PUSH
24278: LD_INT 107
24280: PUSH
24281: LD_INT 108
24283: PUSH
24284: LD_INT 109
24286: PUSH
24287: LD_INT 110
24289: PUSH
24290: LD_INT 111
24292: PUSH
24293: LD_INT 112
24295: PUSH
24296: LD_INT 113
24298: PUSH
24299: LD_INT 114
24301: PUSH
24302: LD_INT 116
24304: PUSH
24305: LD_INT 117
24307: PUSH
24308: LD_INT 118
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: ST_TO_ADDR
24334: GO 25109
24336: LD_INT 16
24338: DOUBLE
24339: EQUAL
24340: IFTRUE 24344
24342: GO 24480
24344: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24345: LD_ADDR_VAR 0 1
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: LD_INT 4
24355: PUSH
24356: LD_INT 5
24358: PUSH
24359: LD_INT 7
24361: PUSH
24362: LD_INT 11
24364: PUSH
24365: LD_INT 12
24367: PUSH
24368: LD_INT 15
24370: PUSH
24371: LD_INT 16
24373: PUSH
24374: LD_INT 20
24376: PUSH
24377: LD_INT 21
24379: PUSH
24380: LD_INT 22
24382: PUSH
24383: LD_INT 23
24385: PUSH
24386: LD_INT 25
24388: PUSH
24389: LD_INT 26
24391: PUSH
24392: LD_INT 30
24394: PUSH
24395: LD_INT 31
24397: PUSH
24398: LD_INT 32
24400: PUSH
24401: LD_INT 33
24403: PUSH
24404: LD_INT 34
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 101
24430: PUSH
24431: LD_INT 102
24433: PUSH
24434: LD_INT 103
24436: PUSH
24437: LD_INT 106
24439: PUSH
24440: LD_INT 108
24442: PUSH
24443: LD_INT 112
24445: PUSH
24446: LD_INT 113
24448: PUSH
24449: LD_INT 114
24451: PUSH
24452: LD_INT 116
24454: PUSH
24455: LD_INT 117
24457: PUSH
24458: LD_INT 118
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: ST_TO_ADDR
24478: GO 25109
24480: LD_INT 17
24482: DOUBLE
24483: EQUAL
24484: IFTRUE 24488
24486: GO 24712
24488: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24489: LD_ADDR_VAR 0 1
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: LD_INT 2
24499: PUSH
24500: LD_INT 3
24502: PUSH
24503: LD_INT 4
24505: PUSH
24506: LD_INT 5
24508: PUSH
24509: LD_INT 6
24511: PUSH
24512: LD_INT 7
24514: PUSH
24515: LD_INT 8
24517: PUSH
24518: LD_INT 9
24520: PUSH
24521: LD_INT 10
24523: PUSH
24524: LD_INT 11
24526: PUSH
24527: LD_INT 12
24529: PUSH
24530: LD_INT 13
24532: PUSH
24533: LD_INT 14
24535: PUSH
24536: LD_INT 15
24538: PUSH
24539: LD_INT 16
24541: PUSH
24542: LD_INT 17
24544: PUSH
24545: LD_INT 18
24547: PUSH
24548: LD_INT 19
24550: PUSH
24551: LD_INT 20
24553: PUSH
24554: LD_INT 21
24556: PUSH
24557: LD_INT 22
24559: PUSH
24560: LD_INT 23
24562: PUSH
24563: LD_INT 24
24565: PUSH
24566: LD_INT 25
24568: PUSH
24569: LD_INT 26
24571: PUSH
24572: LD_INT 27
24574: PUSH
24575: LD_INT 28
24577: PUSH
24578: LD_INT 29
24580: PUSH
24581: LD_INT 30
24583: PUSH
24584: LD_INT 31
24586: PUSH
24587: LD_INT 32
24589: PUSH
24590: LD_INT 33
24592: PUSH
24593: LD_INT 34
24595: PUSH
24596: LD_INT 36
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 101
24638: PUSH
24639: LD_INT 102
24641: PUSH
24642: LD_INT 103
24644: PUSH
24645: LD_INT 104
24647: PUSH
24648: LD_INT 105
24650: PUSH
24651: LD_INT 106
24653: PUSH
24654: LD_INT 107
24656: PUSH
24657: LD_INT 108
24659: PUSH
24660: LD_INT 109
24662: PUSH
24663: LD_INT 110
24665: PUSH
24666: LD_INT 111
24668: PUSH
24669: LD_INT 112
24671: PUSH
24672: LD_INT 113
24674: PUSH
24675: LD_INT 114
24677: PUSH
24678: LD_INT 116
24680: PUSH
24681: LD_INT 117
24683: PUSH
24684: LD_INT 118
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: ST_TO_ADDR
24710: GO 25109
24712: LD_INT 18
24714: DOUBLE
24715: EQUAL
24716: IFTRUE 24720
24718: GO 24868
24720: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24721: LD_ADDR_VAR 0 1
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: LD_INT 4
24731: PUSH
24732: LD_INT 5
24734: PUSH
24735: LD_INT 7
24737: PUSH
24738: LD_INT 11
24740: PUSH
24741: LD_INT 12
24743: PUSH
24744: LD_INT 15
24746: PUSH
24747: LD_INT 16
24749: PUSH
24750: LD_INT 20
24752: PUSH
24753: LD_INT 21
24755: PUSH
24756: LD_INT 22
24758: PUSH
24759: LD_INT 23
24761: PUSH
24762: LD_INT 25
24764: PUSH
24765: LD_INT 26
24767: PUSH
24768: LD_INT 30
24770: PUSH
24771: LD_INT 31
24773: PUSH
24774: LD_INT 32
24776: PUSH
24777: LD_INT 33
24779: PUSH
24780: LD_INT 34
24782: PUSH
24783: LD_INT 35
24785: PUSH
24786: LD_INT 36
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 101
24814: PUSH
24815: LD_INT 102
24817: PUSH
24818: LD_INT 103
24820: PUSH
24821: LD_INT 106
24823: PUSH
24824: LD_INT 108
24826: PUSH
24827: LD_INT 112
24829: PUSH
24830: LD_INT 113
24832: PUSH
24833: LD_INT 114
24835: PUSH
24836: LD_INT 115
24838: PUSH
24839: LD_INT 116
24841: PUSH
24842: LD_INT 117
24844: PUSH
24845: LD_INT 118
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: ST_TO_ADDR
24866: GO 25109
24868: LD_INT 19
24870: DOUBLE
24871: EQUAL
24872: IFTRUE 24876
24874: GO 25108
24876: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24877: LD_ADDR_VAR 0 1
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: LD_INT 2
24887: PUSH
24888: LD_INT 3
24890: PUSH
24891: LD_INT 4
24893: PUSH
24894: LD_INT 5
24896: PUSH
24897: LD_INT 6
24899: PUSH
24900: LD_INT 7
24902: PUSH
24903: LD_INT 8
24905: PUSH
24906: LD_INT 9
24908: PUSH
24909: LD_INT 10
24911: PUSH
24912: LD_INT 11
24914: PUSH
24915: LD_INT 12
24917: PUSH
24918: LD_INT 13
24920: PUSH
24921: LD_INT 14
24923: PUSH
24924: LD_INT 15
24926: PUSH
24927: LD_INT 16
24929: PUSH
24930: LD_INT 17
24932: PUSH
24933: LD_INT 18
24935: PUSH
24936: LD_INT 19
24938: PUSH
24939: LD_INT 20
24941: PUSH
24942: LD_INT 21
24944: PUSH
24945: LD_INT 22
24947: PUSH
24948: LD_INT 23
24950: PUSH
24951: LD_INT 24
24953: PUSH
24954: LD_INT 25
24956: PUSH
24957: LD_INT 26
24959: PUSH
24960: LD_INT 27
24962: PUSH
24963: LD_INT 28
24965: PUSH
24966: LD_INT 29
24968: PUSH
24969: LD_INT 30
24971: PUSH
24972: LD_INT 31
24974: PUSH
24975: LD_INT 32
24977: PUSH
24978: LD_INT 33
24980: PUSH
24981: LD_INT 34
24983: PUSH
24984: LD_INT 35
24986: PUSH
24987: LD_INT 36
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 101
25030: PUSH
25031: LD_INT 102
25033: PUSH
25034: LD_INT 103
25036: PUSH
25037: LD_INT 104
25039: PUSH
25040: LD_INT 105
25042: PUSH
25043: LD_INT 106
25045: PUSH
25046: LD_INT 107
25048: PUSH
25049: LD_INT 108
25051: PUSH
25052: LD_INT 109
25054: PUSH
25055: LD_INT 110
25057: PUSH
25058: LD_INT 111
25060: PUSH
25061: LD_INT 112
25063: PUSH
25064: LD_INT 113
25066: PUSH
25067: LD_INT 114
25069: PUSH
25070: LD_INT 115
25072: PUSH
25073: LD_INT 116
25075: PUSH
25076: LD_INT 117
25078: PUSH
25079: LD_INT 118
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: ST_TO_ADDR
25106: GO 25109
25108: POP
// end else
25109: GO 25340
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25111: LD_ADDR_VAR 0 1
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: LD_INT 2
25121: PUSH
25122: LD_INT 3
25124: PUSH
25125: LD_INT 4
25127: PUSH
25128: LD_INT 5
25130: PUSH
25131: LD_INT 6
25133: PUSH
25134: LD_INT 7
25136: PUSH
25137: LD_INT 8
25139: PUSH
25140: LD_INT 9
25142: PUSH
25143: LD_INT 10
25145: PUSH
25146: LD_INT 11
25148: PUSH
25149: LD_INT 12
25151: PUSH
25152: LD_INT 13
25154: PUSH
25155: LD_INT 14
25157: PUSH
25158: LD_INT 15
25160: PUSH
25161: LD_INT 16
25163: PUSH
25164: LD_INT 17
25166: PUSH
25167: LD_INT 18
25169: PUSH
25170: LD_INT 19
25172: PUSH
25173: LD_INT 20
25175: PUSH
25176: LD_INT 21
25178: PUSH
25179: LD_INT 22
25181: PUSH
25182: LD_INT 23
25184: PUSH
25185: LD_INT 24
25187: PUSH
25188: LD_INT 25
25190: PUSH
25191: LD_INT 26
25193: PUSH
25194: LD_INT 27
25196: PUSH
25197: LD_INT 28
25199: PUSH
25200: LD_INT 29
25202: PUSH
25203: LD_INT 30
25205: PUSH
25206: LD_INT 31
25208: PUSH
25209: LD_INT 32
25211: PUSH
25212: LD_INT 33
25214: PUSH
25215: LD_INT 34
25217: PUSH
25218: LD_INT 35
25220: PUSH
25221: LD_INT 36
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 101
25264: PUSH
25265: LD_INT 102
25267: PUSH
25268: LD_INT 103
25270: PUSH
25271: LD_INT 104
25273: PUSH
25274: LD_INT 105
25276: PUSH
25277: LD_INT 106
25279: PUSH
25280: LD_INT 107
25282: PUSH
25283: LD_INT 108
25285: PUSH
25286: LD_INT 109
25288: PUSH
25289: LD_INT 110
25291: PUSH
25292: LD_INT 111
25294: PUSH
25295: LD_INT 112
25297: PUSH
25298: LD_INT 113
25300: PUSH
25301: LD_INT 114
25303: PUSH
25304: LD_INT 115
25306: PUSH
25307: LD_INT 116
25309: PUSH
25310: LD_INT 117
25312: PUSH
25313: LD_INT 118
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: ST_TO_ADDR
// if result then
25340: LD_VAR 0 1
25344: IFFALSE 25633
// begin normal :=  ;
25346: LD_ADDR_VAR 0 3
25350: PUSH
25351: LD_STRING 
25353: ST_TO_ADDR
// hardcore :=  ;
25354: LD_ADDR_VAR 0 4
25358: PUSH
25359: LD_STRING 
25361: ST_TO_ADDR
// for i = 1 to normalCounter do
25362: LD_ADDR_VAR 0 5
25366: PUSH
25367: DOUBLE
25368: LD_INT 1
25370: DEC
25371: ST_TO_ADDR
25372: LD_EXP 69
25376: PUSH
25377: FOR_TO
25378: IFFALSE 25479
// begin tmp := 0 ;
25380: LD_ADDR_VAR 0 2
25384: PUSH
25385: LD_STRING 0
25387: ST_TO_ADDR
// if result [ 1 ] then
25388: LD_VAR 0 1
25392: PUSH
25393: LD_INT 1
25395: ARRAY
25396: IFFALSE 25461
// if result [ 1 ] [ 1 ] = i then
25398: LD_VAR 0 1
25402: PUSH
25403: LD_INT 1
25405: ARRAY
25406: PUSH
25407: LD_INT 1
25409: ARRAY
25410: PUSH
25411: LD_VAR 0 5
25415: EQUAL
25416: IFFALSE 25461
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25418: LD_ADDR_VAR 0 1
25422: PUSH
25423: LD_VAR 0 1
25427: PPUSH
25428: LD_INT 1
25430: PPUSH
25431: LD_VAR 0 1
25435: PUSH
25436: LD_INT 1
25438: ARRAY
25439: PPUSH
25440: LD_INT 1
25442: PPUSH
25443: CALL_OW 3
25447: PPUSH
25448: CALL_OW 1
25452: ST_TO_ADDR
// tmp := 1 ;
25453: LD_ADDR_VAR 0 2
25457: PUSH
25458: LD_STRING 1
25460: ST_TO_ADDR
// end ; normal := normal & tmp ;
25461: LD_ADDR_VAR 0 3
25465: PUSH
25466: LD_VAR 0 3
25470: PUSH
25471: LD_VAR 0 2
25475: STR
25476: ST_TO_ADDR
// end ;
25477: GO 25377
25479: POP
25480: POP
// for i = 1 to hardcoreCounter do
25481: LD_ADDR_VAR 0 5
25485: PUSH
25486: DOUBLE
25487: LD_INT 1
25489: DEC
25490: ST_TO_ADDR
25491: LD_EXP 70
25495: PUSH
25496: FOR_TO
25497: IFFALSE 25602
// begin tmp := 0 ;
25499: LD_ADDR_VAR 0 2
25503: PUSH
25504: LD_STRING 0
25506: ST_TO_ADDR
// if result [ 2 ] then
25507: LD_VAR 0 1
25511: PUSH
25512: LD_INT 2
25514: ARRAY
25515: IFFALSE 25584
// if result [ 2 ] [ 1 ] = 100 + i then
25517: LD_VAR 0 1
25521: PUSH
25522: LD_INT 2
25524: ARRAY
25525: PUSH
25526: LD_INT 1
25528: ARRAY
25529: PUSH
25530: LD_INT 100
25532: PUSH
25533: LD_VAR 0 5
25537: PLUS
25538: EQUAL
25539: IFFALSE 25584
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25541: LD_ADDR_VAR 0 1
25545: PUSH
25546: LD_VAR 0 1
25550: PPUSH
25551: LD_INT 2
25553: PPUSH
25554: LD_VAR 0 1
25558: PUSH
25559: LD_INT 2
25561: ARRAY
25562: PPUSH
25563: LD_INT 1
25565: PPUSH
25566: CALL_OW 3
25570: PPUSH
25571: CALL_OW 1
25575: ST_TO_ADDR
// tmp := 1 ;
25576: LD_ADDR_VAR 0 2
25580: PUSH
25581: LD_STRING 1
25583: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25584: LD_ADDR_VAR 0 4
25588: PUSH
25589: LD_VAR 0 4
25593: PUSH
25594: LD_VAR 0 2
25598: STR
25599: ST_TO_ADDR
// end ;
25600: GO 25496
25602: POP
25603: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
25604: LD_STRING getStreamItemsFromMission("
25606: PUSH
25607: LD_VAR 0 3
25611: STR
25612: PUSH
25613: LD_STRING ","
25615: STR
25616: PUSH
25617: LD_VAR 0 4
25621: STR
25622: PUSH
25623: LD_STRING ")
25625: STR
25626: PPUSH
25627: CALL_OW 559
// end else
25631: GO 25640
// ToLua ( getStreamItemsFromMission("","") ) ;
25633: LD_STRING getStreamItemsFromMission("","")
25635: PPUSH
25636: CALL_OW 559
// end ;
25640: LD_VAR 0 1
25644: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25645: LD_EXP 68
25649: PUSH
25650: LD_EXP 73
25654: AND
25655: IFFALSE 25779
25657: GO 25659
25659: DISABLE
25660: LD_INT 0
25662: PPUSH
25663: PPUSH
// begin enable ;
25664: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25665: LD_ADDR_VAR 0 2
25669: PUSH
25670: LD_INT 22
25672: PUSH
25673: LD_OWVAR 2
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: LD_INT 34
25687: PUSH
25688: LD_INT 7
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 34
25697: PUSH
25698: LD_INT 45
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 34
25707: PUSH
25708: LD_INT 28
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 34
25717: PUSH
25718: LD_INT 47
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PPUSH
25736: CALL_OW 69
25740: ST_TO_ADDR
// if not tmp then
25741: LD_VAR 0 2
25745: NOT
25746: IFFALSE 25750
// exit ;
25748: GO 25779
// for i in tmp do
25750: LD_ADDR_VAR 0 1
25754: PUSH
25755: LD_VAR 0 2
25759: PUSH
25760: FOR_IN
25761: IFFALSE 25777
// begin SetLives ( i , 0 ) ;
25763: LD_VAR 0 1
25767: PPUSH
25768: LD_INT 0
25770: PPUSH
25771: CALL_OW 234
// end ;
25775: GO 25760
25777: POP
25778: POP
// end ;
25779: PPOPN 2
25781: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25782: LD_EXP 68
25786: PUSH
25787: LD_EXP 74
25791: AND
25792: IFFALSE 25876
25794: GO 25796
25796: DISABLE
25797: LD_INT 0
25799: PPUSH
25800: PPUSH
// begin enable ;
25801: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25802: LD_ADDR_VAR 0 2
25806: PUSH
25807: LD_INT 22
25809: PUSH
25810: LD_OWVAR 2
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 32
25821: PUSH
25822: LD_INT 3
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PPUSH
25833: CALL_OW 69
25837: ST_TO_ADDR
// if not tmp then
25838: LD_VAR 0 2
25842: NOT
25843: IFFALSE 25847
// exit ;
25845: GO 25876
// for i in tmp do
25847: LD_ADDR_VAR 0 1
25851: PUSH
25852: LD_VAR 0 2
25856: PUSH
25857: FOR_IN
25858: IFFALSE 25874
// begin SetLives ( i , 0 ) ;
25860: LD_VAR 0 1
25864: PPUSH
25865: LD_INT 0
25867: PPUSH
25868: CALL_OW 234
// end ;
25872: GO 25857
25874: POP
25875: POP
// end ;
25876: PPOPN 2
25878: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25879: LD_EXP 68
25883: PUSH
25884: LD_EXP 71
25888: AND
25889: IFFALSE 25982
25891: GO 25893
25893: DISABLE
25894: LD_INT 0
25896: PPUSH
// begin enable ;
25897: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25898: LD_ADDR_VAR 0 1
25902: PUSH
25903: LD_INT 22
25905: PUSH
25906: LD_OWVAR 2
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: LD_INT 25
25920: PUSH
25921: LD_INT 5
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 25
25930: PUSH
25931: LD_INT 9
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 25
25940: PUSH
25941: LD_INT 8
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PPUSH
25958: CALL_OW 69
25962: PUSH
25963: FOR_IN
25964: IFFALSE 25980
// begin SetClass ( i , 1 ) ;
25966: LD_VAR 0 1
25970: PPUSH
25971: LD_INT 1
25973: PPUSH
25974: CALL_OW 336
// end ;
25978: GO 25963
25980: POP
25981: POP
// end ;
25982: PPOPN 1
25984: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25985: LD_EXP 68
25989: PUSH
25990: LD_EXP 72
25994: AND
25995: PUSH
25996: LD_OWVAR 65
26000: PUSH
26001: LD_INT 7
26003: LESS
26004: AND
26005: IFFALSE 26019
26007: GO 26009
26009: DISABLE
// begin enable ;
26010: ENABLE
// game_speed := 7 ;
26011: LD_ADDR_OWVAR 65
26015: PUSH
26016: LD_INT 7
26018: ST_TO_ADDR
// end ;
26019: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26020: LD_EXP 68
26024: PUSH
26025: LD_EXP 75
26029: AND
26030: IFFALSE 26232
26032: GO 26034
26034: DISABLE
26035: LD_INT 0
26037: PPUSH
26038: PPUSH
26039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26040: LD_ADDR_VAR 0 3
26044: PUSH
26045: LD_INT 81
26047: PUSH
26048: LD_OWVAR 2
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 21
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PPUSH
26071: CALL_OW 69
26075: ST_TO_ADDR
// if not tmp then
26076: LD_VAR 0 3
26080: NOT
26081: IFFALSE 26085
// exit ;
26083: GO 26232
// if tmp > 5 then
26085: LD_VAR 0 3
26089: PUSH
26090: LD_INT 5
26092: GREATER
26093: IFFALSE 26105
// k := 5 else
26095: LD_ADDR_VAR 0 2
26099: PUSH
26100: LD_INT 5
26102: ST_TO_ADDR
26103: GO 26115
// k := tmp ;
26105: LD_ADDR_VAR 0 2
26109: PUSH
26110: LD_VAR 0 3
26114: ST_TO_ADDR
// for i := 1 to k do
26115: LD_ADDR_VAR 0 1
26119: PUSH
26120: DOUBLE
26121: LD_INT 1
26123: DEC
26124: ST_TO_ADDR
26125: LD_VAR 0 2
26129: PUSH
26130: FOR_TO
26131: IFFALSE 26230
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26133: LD_VAR 0 3
26137: PUSH
26138: LD_VAR 0 1
26142: ARRAY
26143: PPUSH
26144: LD_VAR 0 1
26148: PUSH
26149: LD_INT 4
26151: MOD
26152: PUSH
26153: LD_INT 1
26155: PLUS
26156: PPUSH
26157: CALL_OW 259
26161: PUSH
26162: LD_INT 10
26164: LESS
26165: IFFALSE 26228
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26167: LD_VAR 0 3
26171: PUSH
26172: LD_VAR 0 1
26176: ARRAY
26177: PPUSH
26178: LD_VAR 0 1
26182: PUSH
26183: LD_INT 4
26185: MOD
26186: PUSH
26187: LD_INT 1
26189: PLUS
26190: PPUSH
26191: LD_VAR 0 3
26195: PUSH
26196: LD_VAR 0 1
26200: ARRAY
26201: PPUSH
26202: LD_VAR 0 1
26206: PUSH
26207: LD_INT 4
26209: MOD
26210: PUSH
26211: LD_INT 1
26213: PLUS
26214: PPUSH
26215: CALL_OW 259
26219: PUSH
26220: LD_INT 1
26222: PLUS
26223: PPUSH
26224: CALL_OW 237
26228: GO 26130
26230: POP
26231: POP
// end ;
26232: PPOPN 3
26234: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26235: LD_EXP 68
26239: PUSH
26240: LD_EXP 76
26244: AND
26245: IFFALSE 26265
26247: GO 26249
26249: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26250: LD_INT 4
26252: PPUSH
26253: LD_OWVAR 2
26257: PPUSH
26258: LD_INT 0
26260: PPUSH
26261: CALL_OW 324
26265: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26266: LD_EXP 68
26270: PUSH
26271: LD_EXP 105
26275: AND
26276: IFFALSE 26296
26278: GO 26280
26280: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26281: LD_INT 19
26283: PPUSH
26284: LD_OWVAR 2
26288: PPUSH
26289: LD_INT 0
26291: PPUSH
26292: CALL_OW 324
26296: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26297: LD_EXP 68
26301: PUSH
26302: LD_EXP 77
26306: AND
26307: IFFALSE 26409
26309: GO 26311
26311: DISABLE
26312: LD_INT 0
26314: PPUSH
26315: PPUSH
// begin enable ;
26316: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26317: LD_ADDR_VAR 0 2
26321: PUSH
26322: LD_INT 22
26324: PUSH
26325: LD_OWVAR 2
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: LD_INT 34
26339: PUSH
26340: LD_INT 11
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 34
26349: PUSH
26350: LD_INT 30
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PPUSH
26366: CALL_OW 69
26370: ST_TO_ADDR
// if not tmp then
26371: LD_VAR 0 2
26375: NOT
26376: IFFALSE 26380
// exit ;
26378: GO 26409
// for i in tmp do
26380: LD_ADDR_VAR 0 1
26384: PUSH
26385: LD_VAR 0 2
26389: PUSH
26390: FOR_IN
26391: IFFALSE 26407
// begin SetLives ( i , 0 ) ;
26393: LD_VAR 0 1
26397: PPUSH
26398: LD_INT 0
26400: PPUSH
26401: CALL_OW 234
// end ;
26405: GO 26390
26407: POP
26408: POP
// end ;
26409: PPOPN 2
26411: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26412: LD_EXP 68
26416: PUSH
26417: LD_EXP 78
26421: AND
26422: IFFALSE 26442
26424: GO 26426
26426: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26427: LD_INT 32
26429: PPUSH
26430: LD_OWVAR 2
26434: PPUSH
26435: LD_INT 0
26437: PPUSH
26438: CALL_OW 324
26442: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26443: LD_EXP 68
26447: PUSH
26448: LD_EXP 79
26452: AND
26453: IFFALSE 26634
26455: GO 26457
26457: DISABLE
26458: LD_INT 0
26460: PPUSH
26461: PPUSH
26462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26463: LD_ADDR_VAR 0 2
26467: PUSH
26468: LD_INT 22
26470: PUSH
26471: LD_OWVAR 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 33
26482: PUSH
26483: LD_INT 3
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PPUSH
26494: CALL_OW 69
26498: ST_TO_ADDR
// if not tmp then
26499: LD_VAR 0 2
26503: NOT
26504: IFFALSE 26508
// exit ;
26506: GO 26634
// side := 0 ;
26508: LD_ADDR_VAR 0 3
26512: PUSH
26513: LD_INT 0
26515: ST_TO_ADDR
// for i := 1 to 8 do
26516: LD_ADDR_VAR 0 1
26520: PUSH
26521: DOUBLE
26522: LD_INT 1
26524: DEC
26525: ST_TO_ADDR
26526: LD_INT 8
26528: PUSH
26529: FOR_TO
26530: IFFALSE 26578
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26532: LD_OWVAR 2
26536: PUSH
26537: LD_VAR 0 1
26541: NONEQUAL
26542: PUSH
26543: LD_OWVAR 2
26547: PPUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL_OW 81
26557: PUSH
26558: LD_INT 2
26560: EQUAL
26561: AND
26562: IFFALSE 26576
// begin side := i ;
26564: LD_ADDR_VAR 0 3
26568: PUSH
26569: LD_VAR 0 1
26573: ST_TO_ADDR
// break ;
26574: GO 26578
// end ;
26576: GO 26529
26578: POP
26579: POP
// if not side then
26580: LD_VAR 0 3
26584: NOT
26585: IFFALSE 26589
// exit ;
26587: GO 26634
// for i := 1 to tmp do
26589: LD_ADDR_VAR 0 1
26593: PUSH
26594: DOUBLE
26595: LD_INT 1
26597: DEC
26598: ST_TO_ADDR
26599: LD_VAR 0 2
26603: PUSH
26604: FOR_TO
26605: IFFALSE 26632
// if Prob ( 60 ) then
26607: LD_INT 60
26609: PPUSH
26610: CALL_OW 13
26614: IFFALSE 26630
// SetSide ( i , side ) ;
26616: LD_VAR 0 1
26620: PPUSH
26621: LD_VAR 0 3
26625: PPUSH
26626: CALL_OW 235
26630: GO 26604
26632: POP
26633: POP
// end ;
26634: PPOPN 3
26636: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26637: LD_EXP 68
26641: PUSH
26642: LD_EXP 81
26646: AND
26647: IFFALSE 26766
26649: GO 26651
26651: DISABLE
26652: LD_INT 0
26654: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26655: LD_ADDR_VAR 0 1
26659: PUSH
26660: LD_INT 22
26662: PUSH
26663: LD_OWVAR 2
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 21
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 3
26684: PUSH
26685: LD_INT 23
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: LIST
26703: PPUSH
26704: CALL_OW 69
26708: PUSH
26709: FOR_IN
26710: IFFALSE 26764
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26712: LD_VAR 0 1
26716: PPUSH
26717: CALL_OW 257
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: LD_INT 3
26730: PUSH
26731: LD_INT 4
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: IN
26740: IFFALSE 26762
// SetClass ( un , rand ( 1 , 4 ) ) ;
26742: LD_VAR 0 1
26746: PPUSH
26747: LD_INT 1
26749: PPUSH
26750: LD_INT 4
26752: PPUSH
26753: CALL_OW 12
26757: PPUSH
26758: CALL_OW 336
26762: GO 26709
26764: POP
26765: POP
// end ;
26766: PPOPN 1
26768: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26769: LD_EXP 68
26773: PUSH
26774: LD_EXP 80
26778: AND
26779: IFFALSE 26858
26781: GO 26783
26783: DISABLE
26784: LD_INT 0
26786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26787: LD_ADDR_VAR 0 1
26791: PUSH
26792: LD_INT 22
26794: PUSH
26795: LD_OWVAR 2
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 21
26806: PUSH
26807: LD_INT 3
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PPUSH
26818: CALL_OW 69
26822: ST_TO_ADDR
// if not tmp then
26823: LD_VAR 0 1
26827: NOT
26828: IFFALSE 26832
// exit ;
26830: GO 26858
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26832: LD_VAR 0 1
26836: PUSH
26837: LD_INT 1
26839: PPUSH
26840: LD_VAR 0 1
26844: PPUSH
26845: CALL_OW 12
26849: ARRAY
26850: PPUSH
26851: LD_INT 100
26853: PPUSH
26854: CALL_OW 234
// end ;
26858: PPOPN 1
26860: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26861: LD_EXP 68
26865: PUSH
26866: LD_EXP 82
26870: AND
26871: IFFALSE 26969
26873: GO 26875
26875: DISABLE
26876: LD_INT 0
26878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26879: LD_ADDR_VAR 0 1
26883: PUSH
26884: LD_INT 22
26886: PUSH
26887: LD_OWVAR 2
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 21
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PPUSH
26910: CALL_OW 69
26914: ST_TO_ADDR
// if not tmp then
26915: LD_VAR 0 1
26919: NOT
26920: IFFALSE 26924
// exit ;
26922: GO 26969
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26924: LD_VAR 0 1
26928: PUSH
26929: LD_INT 1
26931: PPUSH
26932: LD_VAR 0 1
26936: PPUSH
26937: CALL_OW 12
26941: ARRAY
26942: PPUSH
26943: LD_INT 1
26945: PPUSH
26946: LD_INT 4
26948: PPUSH
26949: CALL_OW 12
26953: PPUSH
26954: LD_INT 3000
26956: PPUSH
26957: LD_INT 9000
26959: PPUSH
26960: CALL_OW 12
26964: PPUSH
26965: CALL_OW 492
// end ;
26969: PPOPN 1
26971: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26972: LD_EXP 68
26976: PUSH
26977: LD_EXP 83
26981: AND
26982: IFFALSE 27002
26984: GO 26986
26986: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26987: LD_INT 1
26989: PPUSH
26990: LD_OWVAR 2
26994: PPUSH
26995: LD_INT 0
26997: PPUSH
26998: CALL_OW 324
27002: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27003: LD_EXP 68
27007: PUSH
27008: LD_EXP 84
27012: AND
27013: IFFALSE 27096
27015: GO 27017
27017: DISABLE
27018: LD_INT 0
27020: PPUSH
27021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27022: LD_ADDR_VAR 0 2
27026: PUSH
27027: LD_INT 22
27029: PUSH
27030: LD_OWVAR 2
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 21
27041: PUSH
27042: LD_INT 3
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PPUSH
27053: CALL_OW 69
27057: ST_TO_ADDR
// if not tmp then
27058: LD_VAR 0 2
27062: NOT
27063: IFFALSE 27067
// exit ;
27065: GO 27096
// for i in tmp do
27067: LD_ADDR_VAR 0 1
27071: PUSH
27072: LD_VAR 0 2
27076: PUSH
27077: FOR_IN
27078: IFFALSE 27094
// SetBLevel ( i , 10 ) ;
27080: LD_VAR 0 1
27084: PPUSH
27085: LD_INT 10
27087: PPUSH
27088: CALL_OW 241
27092: GO 27077
27094: POP
27095: POP
// end ;
27096: PPOPN 2
27098: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27099: LD_EXP 68
27103: PUSH
27104: LD_EXP 85
27108: AND
27109: IFFALSE 27220
27111: GO 27113
27113: DISABLE
27114: LD_INT 0
27116: PPUSH
27117: PPUSH
27118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27119: LD_ADDR_VAR 0 3
27123: PUSH
27124: LD_INT 22
27126: PUSH
27127: LD_OWVAR 2
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 25
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PPUSH
27150: CALL_OW 69
27154: ST_TO_ADDR
// if not tmp then
27155: LD_VAR 0 3
27159: NOT
27160: IFFALSE 27164
// exit ;
27162: GO 27220
// un := tmp [ rand ( 1 , tmp ) ] ;
27164: LD_ADDR_VAR 0 2
27168: PUSH
27169: LD_VAR 0 3
27173: PUSH
27174: LD_INT 1
27176: PPUSH
27177: LD_VAR 0 3
27181: PPUSH
27182: CALL_OW 12
27186: ARRAY
27187: ST_TO_ADDR
// if Crawls ( un ) then
27188: LD_VAR 0 2
27192: PPUSH
27193: CALL_OW 318
27197: IFFALSE 27208
// ComWalk ( un ) ;
27199: LD_VAR 0 2
27203: PPUSH
27204: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27208: LD_VAR 0 2
27212: PPUSH
27213: LD_INT 5
27215: PPUSH
27216: CALL_OW 336
// end ;
27220: PPOPN 3
27222: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27223: LD_EXP 68
27227: PUSH
27228: LD_EXP 86
27232: AND
27233: PUSH
27234: LD_OWVAR 67
27238: PUSH
27239: LD_INT 4
27241: LESS
27242: AND
27243: IFFALSE 27262
27245: GO 27247
27247: DISABLE
// begin Difficulty := Difficulty + 1 ;
27248: LD_ADDR_OWVAR 67
27252: PUSH
27253: LD_OWVAR 67
27257: PUSH
27258: LD_INT 1
27260: PLUS
27261: ST_TO_ADDR
// end ;
27262: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27263: LD_EXP 68
27267: PUSH
27268: LD_EXP 87
27272: AND
27273: IFFALSE 27376
27275: GO 27277
27277: DISABLE
27278: LD_INT 0
27280: PPUSH
// begin for i := 1 to 5 do
27281: LD_ADDR_VAR 0 1
27285: PUSH
27286: DOUBLE
27287: LD_INT 1
27289: DEC
27290: ST_TO_ADDR
27291: LD_INT 5
27293: PUSH
27294: FOR_TO
27295: IFFALSE 27374
// begin uc_nation := nation_nature ;
27297: LD_ADDR_OWVAR 21
27301: PUSH
27302: LD_INT 0
27304: ST_TO_ADDR
// uc_side := 0 ;
27305: LD_ADDR_OWVAR 20
27309: PUSH
27310: LD_INT 0
27312: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27313: LD_ADDR_OWVAR 29
27317: PUSH
27318: LD_INT 12
27320: PUSH
27321: LD_INT 12
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: ST_TO_ADDR
// hc_agressivity := 20 ;
27328: LD_ADDR_OWVAR 35
27332: PUSH
27333: LD_INT 20
27335: ST_TO_ADDR
// hc_class := class_tiger ;
27336: LD_ADDR_OWVAR 28
27340: PUSH
27341: LD_INT 14
27343: ST_TO_ADDR
// hc_gallery :=  ;
27344: LD_ADDR_OWVAR 33
27348: PUSH
27349: LD_STRING 
27351: ST_TO_ADDR
// hc_name :=  ;
27352: LD_ADDR_OWVAR 26
27356: PUSH
27357: LD_STRING 
27359: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27360: CALL_OW 44
27364: PPUSH
27365: LD_INT 0
27367: PPUSH
27368: CALL_OW 51
// end ;
27372: GO 27294
27374: POP
27375: POP
// end ;
27376: PPOPN 1
27378: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27379: LD_EXP 68
27383: PUSH
27384: LD_EXP 88
27388: AND
27389: IFFALSE 27398
27391: GO 27393
27393: DISABLE
// StreamSibBomb ;
27394: CALL 27399 0 0
27398: END
// export function StreamSibBomb ; var i , x , y ; begin
27399: LD_INT 0
27401: PPUSH
27402: PPUSH
27403: PPUSH
27404: PPUSH
// result := false ;
27405: LD_ADDR_VAR 0 1
27409: PUSH
27410: LD_INT 0
27412: ST_TO_ADDR
// for i := 1 to 16 do
27413: LD_ADDR_VAR 0 2
27417: PUSH
27418: DOUBLE
27419: LD_INT 1
27421: DEC
27422: ST_TO_ADDR
27423: LD_INT 16
27425: PUSH
27426: FOR_TO
27427: IFFALSE 27626
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27429: LD_ADDR_VAR 0 3
27433: PUSH
27434: LD_INT 10
27436: PUSH
27437: LD_INT 20
27439: PUSH
27440: LD_INT 30
27442: PUSH
27443: LD_INT 40
27445: PUSH
27446: LD_INT 50
27448: PUSH
27449: LD_INT 60
27451: PUSH
27452: LD_INT 70
27454: PUSH
27455: LD_INT 80
27457: PUSH
27458: LD_INT 90
27460: PUSH
27461: LD_INT 100
27463: PUSH
27464: LD_INT 110
27466: PUSH
27467: LD_INT 120
27469: PUSH
27470: LD_INT 130
27472: PUSH
27473: LD_INT 140
27475: PUSH
27476: LD_INT 150
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PPUSH
27499: LD_INT 15
27501: PPUSH
27502: CALL_OW 12
27506: ARRAY
27507: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27508: LD_ADDR_VAR 0 4
27512: PUSH
27513: LD_INT 10
27515: PUSH
27516: LD_INT 20
27518: PUSH
27519: LD_INT 30
27521: PUSH
27522: LD_INT 40
27524: PUSH
27525: LD_INT 50
27527: PUSH
27528: LD_INT 60
27530: PUSH
27531: LD_INT 70
27533: PUSH
27534: LD_INT 80
27536: PUSH
27537: LD_INT 90
27539: PUSH
27540: LD_INT 100
27542: PUSH
27543: LD_INT 110
27545: PUSH
27546: LD_INT 120
27548: PUSH
27549: LD_INT 130
27551: PUSH
27552: LD_INT 140
27554: PUSH
27555: LD_INT 150
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: PPUSH
27578: LD_INT 15
27580: PPUSH
27581: CALL_OW 12
27585: ARRAY
27586: ST_TO_ADDR
// if ValidHex ( x , y ) then
27587: LD_VAR 0 3
27591: PPUSH
27592: LD_VAR 0 4
27596: PPUSH
27597: CALL_OW 488
27601: IFFALSE 27624
// begin result := [ x , y ] ;
27603: LD_ADDR_VAR 0 1
27607: PUSH
27608: LD_VAR 0 3
27612: PUSH
27613: LD_VAR 0 4
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: ST_TO_ADDR
// break ;
27622: GO 27626
// end ; end ;
27624: GO 27426
27626: POP
27627: POP
// if result then
27628: LD_VAR 0 1
27632: IFFALSE 27692
// begin ToLua ( playSibBomb() ) ;
27634: LD_STRING playSibBomb()
27636: PPUSH
27637: CALL_OW 559
// wait ( 0 0$14 ) ;
27641: LD_INT 490
27643: PPUSH
27644: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27648: LD_VAR 0 1
27652: PUSH
27653: LD_INT 1
27655: ARRAY
27656: PPUSH
27657: LD_VAR 0 1
27661: PUSH
27662: LD_INT 2
27664: ARRAY
27665: PPUSH
27666: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27670: LD_VAR 0 1
27674: PUSH
27675: LD_INT 1
27677: ARRAY
27678: PPUSH
27679: LD_VAR 0 1
27683: PUSH
27684: LD_INT 2
27686: ARRAY
27687: PPUSH
27688: CALL_OW 429
// end ; end ;
27692: LD_VAR 0 1
27696: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27697: LD_EXP 68
27701: PUSH
27702: LD_EXP 90
27706: AND
27707: IFFALSE 27719
27709: GO 27711
27711: DISABLE
// YouLost (  ) ;
27712: LD_STRING 
27714: PPUSH
27715: CALL_OW 104
27719: END
// every 0 0$1 trigger StreamModeActive and sFog do
27720: LD_EXP 68
27724: PUSH
27725: LD_EXP 89
27729: AND
27730: IFFALSE 27744
27732: GO 27734
27734: DISABLE
// FogOff ( your_side ) ;
27735: LD_OWVAR 2
27739: PPUSH
27740: CALL_OW 344
27744: END
// every 0 0$1 trigger StreamModeActive and sSun do
27745: LD_EXP 68
27749: PUSH
27750: LD_EXP 91
27754: AND
27755: IFFALSE 27783
27757: GO 27759
27759: DISABLE
// begin solar_recharge_percent := 0 ;
27760: LD_ADDR_OWVAR 79
27764: PUSH
27765: LD_INT 0
27767: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27768: LD_INT 10500
27770: PPUSH
27771: CALL_OW 67
// solar_recharge_percent := 100 ;
27775: LD_ADDR_OWVAR 79
27779: PUSH
27780: LD_INT 100
27782: ST_TO_ADDR
// end ;
27783: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27784: LD_EXP 68
27788: PUSH
27789: LD_EXP 92
27793: AND
27794: IFFALSE 28033
27796: GO 27798
27798: DISABLE
27799: LD_INT 0
27801: PPUSH
27802: PPUSH
27803: PPUSH
// begin tmp := [ ] ;
27804: LD_ADDR_VAR 0 3
27808: PUSH
27809: EMPTY
27810: ST_TO_ADDR
// for i := 1 to 6 do
27811: LD_ADDR_VAR 0 1
27815: PUSH
27816: DOUBLE
27817: LD_INT 1
27819: DEC
27820: ST_TO_ADDR
27821: LD_INT 6
27823: PUSH
27824: FOR_TO
27825: IFFALSE 27930
// begin uc_nation := nation_nature ;
27827: LD_ADDR_OWVAR 21
27831: PUSH
27832: LD_INT 0
27834: ST_TO_ADDR
// uc_side := 0 ;
27835: LD_ADDR_OWVAR 20
27839: PUSH
27840: LD_INT 0
27842: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27843: LD_ADDR_OWVAR 29
27847: PUSH
27848: LD_INT 12
27850: PUSH
27851: LD_INT 12
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: ST_TO_ADDR
// hc_agressivity := 20 ;
27858: LD_ADDR_OWVAR 35
27862: PUSH
27863: LD_INT 20
27865: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27866: LD_ADDR_OWVAR 28
27870: PUSH
27871: LD_INT 17
27873: ST_TO_ADDR
// hc_gallery :=  ;
27874: LD_ADDR_OWVAR 33
27878: PUSH
27879: LD_STRING 
27881: ST_TO_ADDR
// hc_name :=  ;
27882: LD_ADDR_OWVAR 26
27886: PUSH
27887: LD_STRING 
27889: ST_TO_ADDR
// un := CreateHuman ;
27890: LD_ADDR_VAR 0 2
27894: PUSH
27895: CALL_OW 44
27899: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27900: LD_VAR 0 2
27904: PPUSH
27905: LD_INT 1
27907: PPUSH
27908: CALL_OW 51
// tmp := tmp ^ un ;
27912: LD_ADDR_VAR 0 3
27916: PUSH
27917: LD_VAR 0 3
27921: PUSH
27922: LD_VAR 0 2
27926: ADD
27927: ST_TO_ADDR
// end ;
27928: GO 27824
27930: POP
27931: POP
// repeat wait ( 0 0$1 ) ;
27932: LD_INT 35
27934: PPUSH
27935: CALL_OW 67
// for un in tmp do
27939: LD_ADDR_VAR 0 2
27943: PUSH
27944: LD_VAR 0 3
27948: PUSH
27949: FOR_IN
27950: IFFALSE 28024
// begin if IsDead ( un ) then
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 301
27961: IFFALSE 27981
// begin tmp := tmp diff un ;
27963: LD_ADDR_VAR 0 3
27967: PUSH
27968: LD_VAR 0 3
27972: PUSH
27973: LD_VAR 0 2
27977: DIFF
27978: ST_TO_ADDR
// continue ;
27979: GO 27949
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27981: LD_VAR 0 2
27985: PPUSH
27986: LD_INT 3
27988: PUSH
27989: LD_INT 22
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PPUSH
28003: CALL_OW 69
28007: PPUSH
28008: LD_VAR 0 2
28012: PPUSH
28013: CALL_OW 74
28017: PPUSH
28018: CALL_OW 115
// end ;
28022: GO 27949
28024: POP
28025: POP
// until not tmp ;
28026: LD_VAR 0 3
28030: NOT
28031: IFFALSE 27932
// end ;
28033: PPOPN 3
28035: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28036: LD_EXP 68
28040: PUSH
28041: LD_EXP 93
28045: AND
28046: IFFALSE 28100
28048: GO 28050
28050: DISABLE
// begin ToLua ( displayTroll(); ) ;
28051: LD_STRING displayTroll();
28053: PPUSH
28054: CALL_OW 559
// wait ( 3 3$00 ) ;
28058: LD_INT 6300
28060: PPUSH
28061: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28065: LD_STRING hideTroll();
28067: PPUSH
28068: CALL_OW 559
// wait ( 1 1$00 ) ;
28072: LD_INT 2100
28074: PPUSH
28075: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28079: LD_STRING displayTroll();
28081: PPUSH
28082: CALL_OW 559
// wait ( 1 1$00 ) ;
28086: LD_INT 2100
28088: PPUSH
28089: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28093: LD_STRING hideTroll();
28095: PPUSH
28096: CALL_OW 559
// end ;
28100: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28101: LD_EXP 68
28105: PUSH
28106: LD_EXP 94
28110: AND
28111: IFFALSE 28174
28113: GO 28115
28115: DISABLE
28116: LD_INT 0
28118: PPUSH
// begin p := 0 ;
28119: LD_ADDR_VAR 0 1
28123: PUSH
28124: LD_INT 0
28126: ST_TO_ADDR
// repeat game_speed := 1 ;
28127: LD_ADDR_OWVAR 65
28131: PUSH
28132: LD_INT 1
28134: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28135: LD_INT 35
28137: PPUSH
28138: CALL_OW 67
// p := p + 1 ;
28142: LD_ADDR_VAR 0 1
28146: PUSH
28147: LD_VAR 0 1
28151: PUSH
28152: LD_INT 1
28154: PLUS
28155: ST_TO_ADDR
// until p >= 60 ;
28156: LD_VAR 0 1
28160: PUSH
28161: LD_INT 60
28163: GREATEREQUAL
28164: IFFALSE 28127
// game_speed := 4 ;
28166: LD_ADDR_OWVAR 65
28170: PUSH
28171: LD_INT 4
28173: ST_TO_ADDR
// end ;
28174: PPOPN 1
28176: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28177: LD_EXP 68
28181: PUSH
28182: LD_EXP 95
28186: AND
28187: IFFALSE 28333
28189: GO 28191
28191: DISABLE
28192: LD_INT 0
28194: PPUSH
28195: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28196: LD_ADDR_VAR 0 1
28200: PUSH
28201: LD_INT 22
28203: PUSH
28204: LD_OWVAR 2
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 2
28215: PUSH
28216: LD_INT 30
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 30
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: LIST
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PPUSH
28245: CALL_OW 69
28249: ST_TO_ADDR
// if not depot then
28250: LD_VAR 0 1
28254: NOT
28255: IFFALSE 28259
// exit ;
28257: GO 28333
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28259: LD_ADDR_VAR 0 2
28263: PUSH
28264: LD_VAR 0 1
28268: PUSH
28269: LD_INT 1
28271: PPUSH
28272: LD_VAR 0 1
28276: PPUSH
28277: CALL_OW 12
28281: ARRAY
28282: PPUSH
28283: CALL_OW 274
28287: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28288: LD_VAR 0 2
28292: PPUSH
28293: LD_INT 1
28295: PPUSH
28296: LD_INT 0
28298: PPUSH
28299: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28303: LD_VAR 0 2
28307: PPUSH
28308: LD_INT 2
28310: PPUSH
28311: LD_INT 0
28313: PPUSH
28314: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28318: LD_VAR 0 2
28322: PPUSH
28323: LD_INT 3
28325: PPUSH
28326: LD_INT 0
28328: PPUSH
28329: CALL_OW 277
// end ;
28333: PPOPN 2
28335: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28336: LD_EXP 68
28340: PUSH
28341: LD_EXP 96
28345: AND
28346: IFFALSE 28443
28348: GO 28350
28350: DISABLE
28351: LD_INT 0
28353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28354: LD_ADDR_VAR 0 1
28358: PUSH
28359: LD_INT 22
28361: PUSH
28362: LD_OWVAR 2
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 21
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 3
28383: PUSH
28384: LD_INT 23
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: LIST
28402: PPUSH
28403: CALL_OW 69
28407: ST_TO_ADDR
// if not tmp then
28408: LD_VAR 0 1
28412: NOT
28413: IFFALSE 28417
// exit ;
28415: GO 28443
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28417: LD_VAR 0 1
28421: PUSH
28422: LD_INT 1
28424: PPUSH
28425: LD_VAR 0 1
28429: PPUSH
28430: CALL_OW 12
28434: ARRAY
28435: PPUSH
28436: LD_INT 200
28438: PPUSH
28439: CALL_OW 234
// end ;
28443: PPOPN 1
28445: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28446: LD_EXP 68
28450: PUSH
28451: LD_EXP 97
28455: AND
28456: IFFALSE 28535
28458: GO 28460
28460: DISABLE
28461: LD_INT 0
28463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28464: LD_ADDR_VAR 0 1
28468: PUSH
28469: LD_INT 22
28471: PUSH
28472: LD_OWVAR 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 21
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PPUSH
28495: CALL_OW 69
28499: ST_TO_ADDR
// if not tmp then
28500: LD_VAR 0 1
28504: NOT
28505: IFFALSE 28509
// exit ;
28507: GO 28535
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28509: LD_VAR 0 1
28513: PUSH
28514: LD_INT 1
28516: PPUSH
28517: LD_VAR 0 1
28521: PPUSH
28522: CALL_OW 12
28526: ARRAY
28527: PPUSH
28528: LD_INT 60
28530: PPUSH
28531: CALL_OW 234
// end ;
28535: PPOPN 1
28537: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28538: LD_EXP 68
28542: PUSH
28543: LD_EXP 98
28547: AND
28548: IFFALSE 28647
28550: GO 28552
28552: DISABLE
28553: LD_INT 0
28555: PPUSH
28556: PPUSH
// begin enable ;
28557: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28558: LD_ADDR_VAR 0 1
28562: PUSH
28563: LD_INT 22
28565: PUSH
28566: LD_OWVAR 2
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 61
28577: PUSH
28578: EMPTY
28579: LIST
28580: PUSH
28581: LD_INT 33
28583: PUSH
28584: LD_INT 2
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: PPUSH
28596: CALL_OW 69
28600: ST_TO_ADDR
// if not tmp then
28601: LD_VAR 0 1
28605: NOT
28606: IFFALSE 28610
// exit ;
28608: GO 28647
// for i in tmp do
28610: LD_ADDR_VAR 0 2
28614: PUSH
28615: LD_VAR 0 1
28619: PUSH
28620: FOR_IN
28621: IFFALSE 28645
// if IsControledBy ( i ) then
28623: LD_VAR 0 2
28627: PPUSH
28628: CALL_OW 312
28632: IFFALSE 28643
// ComUnlink ( i ) ;
28634: LD_VAR 0 2
28638: PPUSH
28639: CALL_OW 136
28643: GO 28620
28645: POP
28646: POP
// end ;
28647: PPOPN 2
28649: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28650: LD_EXP 68
28654: PUSH
28655: LD_EXP 99
28659: AND
28660: IFFALSE 28800
28662: GO 28664
28664: DISABLE
28665: LD_INT 0
28667: PPUSH
28668: PPUSH
// begin ToLua ( displayPowell(); ) ;
28669: LD_STRING displayPowell();
28671: PPUSH
28672: CALL_OW 559
// uc_side := 0 ;
28676: LD_ADDR_OWVAR 20
28680: PUSH
28681: LD_INT 0
28683: ST_TO_ADDR
// uc_nation := 2 ;
28684: LD_ADDR_OWVAR 21
28688: PUSH
28689: LD_INT 2
28691: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28692: LD_ADDR_OWVAR 37
28696: PUSH
28697: LD_INT 14
28699: ST_TO_ADDR
// vc_engine := engine_siberite ;
28700: LD_ADDR_OWVAR 39
28704: PUSH
28705: LD_INT 3
28707: ST_TO_ADDR
// vc_control := control_apeman ;
28708: LD_ADDR_OWVAR 38
28712: PUSH
28713: LD_INT 5
28715: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28716: LD_ADDR_OWVAR 40
28720: PUSH
28721: LD_INT 29
28723: ST_TO_ADDR
// un := CreateVehicle ;
28724: LD_ADDR_VAR 0 2
28728: PUSH
28729: CALL_OW 45
28733: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28734: LD_VAR 0 2
28738: PPUSH
28739: LD_INT 1
28741: PPUSH
28742: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28746: LD_INT 35
28748: PPUSH
28749: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28753: LD_VAR 0 2
28757: PPUSH
28758: LD_INT 22
28760: PUSH
28761: LD_OWVAR 2
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PPUSH
28770: CALL_OW 69
28774: PPUSH
28775: LD_VAR 0 2
28779: PPUSH
28780: CALL_OW 74
28784: PPUSH
28785: CALL_OW 115
// until IsDead ( un ) ;
28789: LD_VAR 0 2
28793: PPUSH
28794: CALL_OW 301
28798: IFFALSE 28746
// end ;
28800: PPOPN 2
28802: END
// every 0 0$1 trigger StreamModeActive and sStu do
28803: LD_EXP 68
28807: PUSH
28808: LD_EXP 107
28812: AND
28813: IFFALSE 28829
28815: GO 28817
28817: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28818: LD_STRING displayStucuk();
28820: PPUSH
28821: CALL_OW 559
// ResetFog ;
28825: CALL_OW 335
// end ;
28829: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28830: LD_EXP 68
28834: PUSH
28835: LD_EXP 100
28839: AND
28840: IFFALSE 28981
28842: GO 28844
28844: DISABLE
28845: LD_INT 0
28847: PPUSH
28848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28849: LD_ADDR_VAR 0 2
28853: PUSH
28854: LD_INT 22
28856: PUSH
28857: LD_OWVAR 2
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 21
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PPUSH
28880: CALL_OW 69
28884: ST_TO_ADDR
// if not tmp then
28885: LD_VAR 0 2
28889: NOT
28890: IFFALSE 28894
// exit ;
28892: GO 28981
// un := tmp [ rand ( 1 , tmp ) ] ;
28894: LD_ADDR_VAR 0 1
28898: PUSH
28899: LD_VAR 0 2
28903: PUSH
28904: LD_INT 1
28906: PPUSH
28907: LD_VAR 0 2
28911: PPUSH
28912: CALL_OW 12
28916: ARRAY
28917: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28918: LD_VAR 0 1
28922: PPUSH
28923: LD_INT 0
28925: PPUSH
28926: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28930: LD_VAR 0 1
28934: PPUSH
28935: LD_OWVAR 3
28939: PUSH
28940: LD_VAR 0 1
28944: DIFF
28945: PPUSH
28946: LD_VAR 0 1
28950: PPUSH
28951: CALL_OW 74
28955: PPUSH
28956: CALL_OW 115
// wait ( 0 0$20 ) ;
28960: LD_INT 700
28962: PPUSH
28963: CALL_OW 67
// SetSide ( un , your_side ) ;
28967: LD_VAR 0 1
28971: PPUSH
28972: LD_OWVAR 2
28976: PPUSH
28977: CALL_OW 235
// end ;
28981: PPOPN 2
28983: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28984: LD_EXP 68
28988: PUSH
28989: LD_EXP 101
28993: AND
28994: IFFALSE 29100
28996: GO 28998
28998: DISABLE
28999: LD_INT 0
29001: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29002: LD_ADDR_VAR 0 1
29006: PUSH
29007: LD_INT 22
29009: PUSH
29010: LD_OWVAR 2
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 2
29021: PUSH
29022: LD_INT 30
29024: PUSH
29025: LD_INT 0
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 30
29034: PUSH
29035: LD_INT 1
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: LIST
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PPUSH
29051: CALL_OW 69
29055: ST_TO_ADDR
// if not depot then
29056: LD_VAR 0 1
29060: NOT
29061: IFFALSE 29065
// exit ;
29063: GO 29100
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29065: LD_VAR 0 1
29069: PUSH
29070: LD_INT 1
29072: ARRAY
29073: PPUSH
29074: CALL_OW 250
29078: PPUSH
29079: LD_VAR 0 1
29083: PUSH
29084: LD_INT 1
29086: ARRAY
29087: PPUSH
29088: CALL_OW 251
29092: PPUSH
29093: LD_INT 70
29095: PPUSH
29096: CALL_OW 495
// end ;
29100: PPOPN 1
29102: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29103: LD_EXP 68
29107: PUSH
29108: LD_EXP 102
29112: AND
29113: IFFALSE 29324
29115: GO 29117
29117: DISABLE
29118: LD_INT 0
29120: PPUSH
29121: PPUSH
29122: PPUSH
29123: PPUSH
29124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29125: LD_ADDR_VAR 0 5
29129: PUSH
29130: LD_INT 22
29132: PUSH
29133: LD_OWVAR 2
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 21
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PPUSH
29156: CALL_OW 69
29160: ST_TO_ADDR
// if not tmp then
29161: LD_VAR 0 5
29165: NOT
29166: IFFALSE 29170
// exit ;
29168: GO 29324
// for i in tmp do
29170: LD_ADDR_VAR 0 1
29174: PUSH
29175: LD_VAR 0 5
29179: PUSH
29180: FOR_IN
29181: IFFALSE 29322
// begin d := rand ( 0 , 5 ) ;
29183: LD_ADDR_VAR 0 4
29187: PUSH
29188: LD_INT 0
29190: PPUSH
29191: LD_INT 5
29193: PPUSH
29194: CALL_OW 12
29198: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29199: LD_ADDR_VAR 0 2
29203: PUSH
29204: LD_VAR 0 1
29208: PPUSH
29209: CALL_OW 250
29213: PPUSH
29214: LD_VAR 0 4
29218: PPUSH
29219: LD_INT 3
29221: PPUSH
29222: LD_INT 12
29224: PPUSH
29225: CALL_OW 12
29229: PPUSH
29230: CALL_OW 272
29234: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29235: LD_ADDR_VAR 0 3
29239: PUSH
29240: LD_VAR 0 1
29244: PPUSH
29245: CALL_OW 251
29249: PPUSH
29250: LD_VAR 0 4
29254: PPUSH
29255: LD_INT 3
29257: PPUSH
29258: LD_INT 12
29260: PPUSH
29261: CALL_OW 12
29265: PPUSH
29266: CALL_OW 273
29270: ST_TO_ADDR
// if ValidHex ( x , y ) then
29271: LD_VAR 0 2
29275: PPUSH
29276: LD_VAR 0 3
29280: PPUSH
29281: CALL_OW 488
29285: IFFALSE 29320
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29287: LD_VAR 0 1
29291: PPUSH
29292: LD_VAR 0 2
29296: PPUSH
29297: LD_VAR 0 3
29301: PPUSH
29302: LD_INT 3
29304: PPUSH
29305: LD_INT 6
29307: PPUSH
29308: CALL_OW 12
29312: PPUSH
29313: LD_INT 1
29315: PPUSH
29316: CALL_OW 483
// end ;
29320: GO 29180
29322: POP
29323: POP
// end ;
29324: PPOPN 5
29326: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29327: LD_EXP 68
29331: PUSH
29332: LD_EXP 103
29336: AND
29337: IFFALSE 29431
29339: GO 29341
29341: DISABLE
29342: LD_INT 0
29344: PPUSH
29345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29346: LD_ADDR_VAR 0 2
29350: PUSH
29351: LD_INT 22
29353: PUSH
29354: LD_OWVAR 2
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 32
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 21
29375: PUSH
29376: LD_INT 2
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: LIST
29387: PPUSH
29388: CALL_OW 69
29392: ST_TO_ADDR
// if not tmp then
29393: LD_VAR 0 2
29397: NOT
29398: IFFALSE 29402
// exit ;
29400: GO 29431
// for i in tmp do
29402: LD_ADDR_VAR 0 1
29406: PUSH
29407: LD_VAR 0 2
29411: PUSH
29412: FOR_IN
29413: IFFALSE 29429
// SetFuel ( i , 0 ) ;
29415: LD_VAR 0 1
29419: PPUSH
29420: LD_INT 0
29422: PPUSH
29423: CALL_OW 240
29427: GO 29412
29429: POP
29430: POP
// end ;
29431: PPOPN 2
29433: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29434: LD_EXP 68
29438: PUSH
29439: LD_EXP 104
29443: AND
29444: IFFALSE 29510
29446: GO 29448
29448: DISABLE
29449: LD_INT 0
29451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29452: LD_ADDR_VAR 0 1
29456: PUSH
29457: LD_INT 22
29459: PUSH
29460: LD_OWVAR 2
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 30
29471: PUSH
29472: LD_INT 29
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PPUSH
29483: CALL_OW 69
29487: ST_TO_ADDR
// if not tmp then
29488: LD_VAR 0 1
29492: NOT
29493: IFFALSE 29497
// exit ;
29495: GO 29510
// DestroyUnit ( tmp [ 1 ] ) ;
29497: LD_VAR 0 1
29501: PUSH
29502: LD_INT 1
29504: ARRAY
29505: PPUSH
29506: CALL_OW 65
// end ;
29510: PPOPN 1
29512: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29513: LD_EXP 68
29517: PUSH
29518: LD_EXP 106
29522: AND
29523: IFFALSE 29652
29525: GO 29527
29527: DISABLE
29528: LD_INT 0
29530: PPUSH
// begin uc_side := 0 ;
29531: LD_ADDR_OWVAR 20
29535: PUSH
29536: LD_INT 0
29538: ST_TO_ADDR
// uc_nation := nation_arabian ;
29539: LD_ADDR_OWVAR 21
29543: PUSH
29544: LD_INT 2
29546: ST_TO_ADDR
// hc_gallery :=  ;
29547: LD_ADDR_OWVAR 33
29551: PUSH
29552: LD_STRING 
29554: ST_TO_ADDR
// hc_name :=  ;
29555: LD_ADDR_OWVAR 26
29559: PUSH
29560: LD_STRING 
29562: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29563: LD_INT 1
29565: PPUSH
29566: LD_INT 11
29568: PPUSH
29569: LD_INT 10
29571: PPUSH
29572: CALL_OW 380
// un := CreateHuman ;
29576: LD_ADDR_VAR 0 1
29580: PUSH
29581: CALL_OW 44
29585: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29586: LD_VAR 0 1
29590: PPUSH
29591: LD_INT 1
29593: PPUSH
29594: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29598: LD_INT 35
29600: PPUSH
29601: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29605: LD_VAR 0 1
29609: PPUSH
29610: LD_INT 22
29612: PUSH
29613: LD_OWVAR 2
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PPUSH
29622: CALL_OW 69
29626: PPUSH
29627: LD_VAR 0 1
29631: PPUSH
29632: CALL_OW 74
29636: PPUSH
29637: CALL_OW 115
// until IsDead ( un ) ;
29641: LD_VAR 0 1
29645: PPUSH
29646: CALL_OW 301
29650: IFFALSE 29598
// end ;
29652: PPOPN 1
29654: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29655: LD_EXP 68
29659: PUSH
29660: LD_EXP 108
29664: AND
29665: IFFALSE 29677
29667: GO 29669
29669: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29670: LD_STRING earthquake(getX(game), 0, 32)
29672: PPUSH
29673: CALL_OW 559
29677: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29678: LD_EXP 68
29682: PUSH
29683: LD_EXP 109
29687: AND
29688: IFFALSE 29779
29690: GO 29692
29692: DISABLE
29693: LD_INT 0
29695: PPUSH
// begin enable ;
29696: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29697: LD_ADDR_VAR 0 1
29701: PUSH
29702: LD_INT 22
29704: PUSH
29705: LD_OWVAR 2
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 21
29716: PUSH
29717: LD_INT 2
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 33
29726: PUSH
29727: LD_INT 3
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: LIST
29738: PPUSH
29739: CALL_OW 69
29743: ST_TO_ADDR
// if not tmp then
29744: LD_VAR 0 1
29748: NOT
29749: IFFALSE 29753
// exit ;
29751: GO 29779
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29753: LD_VAR 0 1
29757: PUSH
29758: LD_INT 1
29760: PPUSH
29761: LD_VAR 0 1
29765: PPUSH
29766: CALL_OW 12
29770: ARRAY
29771: PPUSH
29772: LD_INT 1
29774: PPUSH
29775: CALL_OW 234
// end ;
29779: PPOPN 1
29781: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29782: LD_EXP 68
29786: PUSH
29787: LD_EXP 110
29791: AND
29792: IFFALSE 29933
29794: GO 29796
29796: DISABLE
29797: LD_INT 0
29799: PPUSH
29800: PPUSH
29801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29802: LD_ADDR_VAR 0 3
29806: PUSH
29807: LD_INT 22
29809: PUSH
29810: LD_OWVAR 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 25
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PPUSH
29833: CALL_OW 69
29837: ST_TO_ADDR
// if not tmp then
29838: LD_VAR 0 3
29842: NOT
29843: IFFALSE 29847
// exit ;
29845: GO 29933
// un := tmp [ rand ( 1 , tmp ) ] ;
29847: LD_ADDR_VAR 0 2
29851: PUSH
29852: LD_VAR 0 3
29856: PUSH
29857: LD_INT 1
29859: PPUSH
29860: LD_VAR 0 3
29864: PPUSH
29865: CALL_OW 12
29869: ARRAY
29870: ST_TO_ADDR
// if Crawls ( un ) then
29871: LD_VAR 0 2
29875: PPUSH
29876: CALL_OW 318
29880: IFFALSE 29891
// ComWalk ( un ) ;
29882: LD_VAR 0 2
29886: PPUSH
29887: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29891: LD_VAR 0 2
29895: PPUSH
29896: LD_INT 9
29898: PPUSH
29899: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29903: LD_INT 28
29905: PPUSH
29906: LD_OWVAR 2
29910: PPUSH
29911: LD_INT 2
29913: PPUSH
29914: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29918: LD_INT 29
29920: PPUSH
29921: LD_OWVAR 2
29925: PPUSH
29926: LD_INT 2
29928: PPUSH
29929: CALL_OW 322
// end ;
29933: PPOPN 3
29935: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29936: LD_EXP 68
29940: PUSH
29941: LD_EXP 111
29945: AND
29946: IFFALSE 30057
29948: GO 29950
29950: DISABLE
29951: LD_INT 0
29953: PPUSH
29954: PPUSH
29955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29956: LD_ADDR_VAR 0 3
29960: PUSH
29961: LD_INT 22
29963: PUSH
29964: LD_OWVAR 2
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 25
29975: PUSH
29976: LD_INT 1
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PPUSH
29987: CALL_OW 69
29991: ST_TO_ADDR
// if not tmp then
29992: LD_VAR 0 3
29996: NOT
29997: IFFALSE 30001
// exit ;
29999: GO 30057
// un := tmp [ rand ( 1 , tmp ) ] ;
30001: LD_ADDR_VAR 0 2
30005: PUSH
30006: LD_VAR 0 3
30010: PUSH
30011: LD_INT 1
30013: PPUSH
30014: LD_VAR 0 3
30018: PPUSH
30019: CALL_OW 12
30023: ARRAY
30024: ST_TO_ADDR
// if Crawls ( un ) then
30025: LD_VAR 0 2
30029: PPUSH
30030: CALL_OW 318
30034: IFFALSE 30045
// ComWalk ( un ) ;
30036: LD_VAR 0 2
30040: PPUSH
30041: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30045: LD_VAR 0 2
30049: PPUSH
30050: LD_INT 8
30052: PPUSH
30053: CALL_OW 336
// end ;
30057: PPOPN 3
30059: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30060: LD_EXP 68
30064: PUSH
30065: LD_EXP 112
30069: AND
30070: IFFALSE 30214
30072: GO 30074
30074: DISABLE
30075: LD_INT 0
30077: PPUSH
30078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30079: LD_ADDR_VAR 0 2
30083: PUSH
30084: LD_INT 22
30086: PUSH
30087: LD_OWVAR 2
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 21
30098: PUSH
30099: LD_INT 2
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: PUSH
30109: LD_INT 34
30111: PUSH
30112: LD_INT 12
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 34
30121: PUSH
30122: LD_INT 51
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 34
30131: PUSH
30132: LD_INT 32
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: LIST
30149: PPUSH
30150: CALL_OW 69
30154: ST_TO_ADDR
// if not tmp then
30155: LD_VAR 0 2
30159: NOT
30160: IFFALSE 30164
// exit ;
30162: GO 30214
// for i in tmp do
30164: LD_ADDR_VAR 0 1
30168: PUSH
30169: LD_VAR 0 2
30173: PUSH
30174: FOR_IN
30175: IFFALSE 30212
// if GetCargo ( i , mat_artifact ) = 0 then
30177: LD_VAR 0 1
30181: PPUSH
30182: LD_INT 4
30184: PPUSH
30185: CALL_OW 289
30189: PUSH
30190: LD_INT 0
30192: EQUAL
30193: IFFALSE 30210
// SetCargo ( i , mat_siberit , 100 ) ;
30195: LD_VAR 0 1
30199: PPUSH
30200: LD_INT 3
30202: PPUSH
30203: LD_INT 100
30205: PPUSH
30206: CALL_OW 290
30210: GO 30174
30212: POP
30213: POP
// end ;
30214: PPOPN 2
30216: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30217: LD_EXP 68
30221: PUSH
30222: LD_EXP 113
30226: AND
30227: IFFALSE 30410
30229: GO 30231
30231: DISABLE
30232: LD_INT 0
30234: PPUSH
30235: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30236: LD_ADDR_VAR 0 2
30240: PUSH
30241: LD_INT 22
30243: PUSH
30244: LD_OWVAR 2
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PPUSH
30253: CALL_OW 69
30257: ST_TO_ADDR
// if not tmp then
30258: LD_VAR 0 2
30262: NOT
30263: IFFALSE 30267
// exit ;
30265: GO 30410
// for i := 1 to 2 do
30267: LD_ADDR_VAR 0 1
30271: PUSH
30272: DOUBLE
30273: LD_INT 1
30275: DEC
30276: ST_TO_ADDR
30277: LD_INT 2
30279: PUSH
30280: FOR_TO
30281: IFFALSE 30408
// begin uc_side := your_side ;
30283: LD_ADDR_OWVAR 20
30287: PUSH
30288: LD_OWVAR 2
30292: ST_TO_ADDR
// uc_nation := nation_american ;
30293: LD_ADDR_OWVAR 21
30297: PUSH
30298: LD_INT 1
30300: ST_TO_ADDR
// vc_chassis := us_morphling ;
30301: LD_ADDR_OWVAR 37
30305: PUSH
30306: LD_INT 5
30308: ST_TO_ADDR
// vc_engine := engine_siberite ;
30309: LD_ADDR_OWVAR 39
30313: PUSH
30314: LD_INT 3
30316: ST_TO_ADDR
// vc_control := control_computer ;
30317: LD_ADDR_OWVAR 38
30321: PUSH
30322: LD_INT 3
30324: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30325: LD_ADDR_OWVAR 40
30329: PUSH
30330: LD_INT 10
30332: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30333: LD_VAR 0 2
30337: PUSH
30338: LD_INT 1
30340: ARRAY
30341: PPUSH
30342: CALL_OW 310
30346: NOT
30347: IFFALSE 30394
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30349: CALL_OW 45
30353: PPUSH
30354: LD_VAR 0 2
30358: PUSH
30359: LD_INT 1
30361: ARRAY
30362: PPUSH
30363: CALL_OW 250
30367: PPUSH
30368: LD_VAR 0 2
30372: PUSH
30373: LD_INT 1
30375: ARRAY
30376: PPUSH
30377: CALL_OW 251
30381: PPUSH
30382: LD_INT 12
30384: PPUSH
30385: LD_INT 1
30387: PPUSH
30388: CALL_OW 50
30392: GO 30406
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30394: CALL_OW 45
30398: PPUSH
30399: LD_INT 1
30401: PPUSH
30402: CALL_OW 51
// end ;
30406: GO 30280
30408: POP
30409: POP
// end ;
30410: PPOPN 2
30412: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30413: LD_EXP 68
30417: PUSH
30418: LD_EXP 114
30422: AND
30423: IFFALSE 30645
30425: GO 30427
30427: DISABLE
30428: LD_INT 0
30430: PPUSH
30431: PPUSH
30432: PPUSH
30433: PPUSH
30434: PPUSH
30435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30436: LD_ADDR_VAR 0 6
30440: PUSH
30441: LD_INT 22
30443: PUSH
30444: LD_OWVAR 2
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 21
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 3
30465: PUSH
30466: LD_INT 23
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: LIST
30484: PPUSH
30485: CALL_OW 69
30489: ST_TO_ADDR
// if not tmp then
30490: LD_VAR 0 6
30494: NOT
30495: IFFALSE 30499
// exit ;
30497: GO 30645
// s1 := rand ( 1 , 4 ) ;
30499: LD_ADDR_VAR 0 2
30503: PUSH
30504: LD_INT 1
30506: PPUSH
30507: LD_INT 4
30509: PPUSH
30510: CALL_OW 12
30514: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30515: LD_ADDR_VAR 0 4
30519: PUSH
30520: LD_VAR 0 6
30524: PUSH
30525: LD_INT 1
30527: ARRAY
30528: PPUSH
30529: LD_VAR 0 2
30533: PPUSH
30534: CALL_OW 259
30538: ST_TO_ADDR
// if s1 = 1 then
30539: LD_VAR 0 2
30543: PUSH
30544: LD_INT 1
30546: EQUAL
30547: IFFALSE 30567
// s2 := rand ( 2 , 4 ) else
30549: LD_ADDR_VAR 0 3
30553: PUSH
30554: LD_INT 2
30556: PPUSH
30557: LD_INT 4
30559: PPUSH
30560: CALL_OW 12
30564: ST_TO_ADDR
30565: GO 30575
// s2 := 1 ;
30567: LD_ADDR_VAR 0 3
30571: PUSH
30572: LD_INT 1
30574: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30575: LD_ADDR_VAR 0 5
30579: PUSH
30580: LD_VAR 0 6
30584: PUSH
30585: LD_INT 1
30587: ARRAY
30588: PPUSH
30589: LD_VAR 0 3
30593: PPUSH
30594: CALL_OW 259
30598: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30599: LD_VAR 0 6
30603: PUSH
30604: LD_INT 1
30606: ARRAY
30607: PPUSH
30608: LD_VAR 0 2
30612: PPUSH
30613: LD_VAR 0 5
30617: PPUSH
30618: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30622: LD_VAR 0 6
30626: PUSH
30627: LD_INT 1
30629: ARRAY
30630: PPUSH
30631: LD_VAR 0 3
30635: PPUSH
30636: LD_VAR 0 4
30640: PPUSH
30641: CALL_OW 237
// end ;
30645: PPOPN 6
30647: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30648: LD_EXP 68
30652: PUSH
30653: LD_EXP 115
30657: AND
30658: IFFALSE 30737
30660: GO 30662
30662: DISABLE
30663: LD_INT 0
30665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30666: LD_ADDR_VAR 0 1
30670: PUSH
30671: LD_INT 22
30673: PUSH
30674: LD_OWVAR 2
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 30
30685: PUSH
30686: LD_INT 3
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PPUSH
30697: CALL_OW 69
30701: ST_TO_ADDR
// if not tmp then
30702: LD_VAR 0 1
30706: NOT
30707: IFFALSE 30711
// exit ;
30709: GO 30737
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30711: LD_VAR 0 1
30715: PUSH
30716: LD_INT 1
30718: PPUSH
30719: LD_VAR 0 1
30723: PPUSH
30724: CALL_OW 12
30728: ARRAY
30729: PPUSH
30730: LD_INT 1
30732: PPUSH
30733: CALL_OW 234
// end ;
30737: PPOPN 1
30739: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30740: LD_EXP 68
30744: PUSH
30745: LD_EXP 116
30749: AND
30750: IFFALSE 30862
30752: GO 30754
30754: DISABLE
30755: LD_INT 0
30757: PPUSH
30758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30759: LD_ADDR_VAR 0 2
30763: PUSH
30764: LD_INT 22
30766: PUSH
30767: LD_OWVAR 2
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 2
30778: PUSH
30779: LD_INT 30
30781: PUSH
30782: LD_INT 27
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 30
30791: PUSH
30792: LD_INT 26
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 30
30801: PUSH
30802: LD_INT 28
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PPUSH
30819: CALL_OW 69
30823: ST_TO_ADDR
// if not tmp then
30824: LD_VAR 0 2
30828: NOT
30829: IFFALSE 30833
// exit ;
30831: GO 30862
// for i in tmp do
30833: LD_ADDR_VAR 0 1
30837: PUSH
30838: LD_VAR 0 2
30842: PUSH
30843: FOR_IN
30844: IFFALSE 30860
// SetLives ( i , 1 ) ;
30846: LD_VAR 0 1
30850: PPUSH
30851: LD_INT 1
30853: PPUSH
30854: CALL_OW 234
30858: GO 30843
30860: POP
30861: POP
// end ;
30862: PPOPN 2
30864: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30865: LD_EXP 68
30869: PUSH
30870: LD_EXP 117
30874: AND
30875: IFFALSE 31162
30877: GO 30879
30879: DISABLE
30880: LD_INT 0
30882: PPUSH
30883: PPUSH
30884: PPUSH
// begin i := rand ( 1 , 7 ) ;
30885: LD_ADDR_VAR 0 1
30889: PUSH
30890: LD_INT 1
30892: PPUSH
30893: LD_INT 7
30895: PPUSH
30896: CALL_OW 12
30900: ST_TO_ADDR
// case i of 1 :
30901: LD_VAR 0 1
30905: PUSH
30906: LD_INT 1
30908: DOUBLE
30909: EQUAL
30910: IFTRUE 30914
30912: GO 30924
30914: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30915: LD_STRING earthquake(getX(game), 0, 32)
30917: PPUSH
30918: CALL_OW 559
30922: GO 31162
30924: LD_INT 2
30926: DOUBLE
30927: EQUAL
30928: IFTRUE 30932
30930: GO 30946
30932: POP
// begin ToLua ( displayStucuk(); ) ;
30933: LD_STRING displayStucuk();
30935: PPUSH
30936: CALL_OW 559
// ResetFog ;
30940: CALL_OW 335
// end ; 3 :
30944: GO 31162
30946: LD_INT 3
30948: DOUBLE
30949: EQUAL
30950: IFTRUE 30954
30952: GO 31058
30954: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30955: LD_ADDR_VAR 0 2
30959: PUSH
30960: LD_INT 22
30962: PUSH
30963: LD_OWVAR 2
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 25
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PPUSH
30986: CALL_OW 69
30990: ST_TO_ADDR
// if not tmp then
30991: LD_VAR 0 2
30995: NOT
30996: IFFALSE 31000
// exit ;
30998: GO 31162
// un := tmp [ rand ( 1 , tmp ) ] ;
31000: LD_ADDR_VAR 0 3
31004: PUSH
31005: LD_VAR 0 2
31009: PUSH
31010: LD_INT 1
31012: PPUSH
31013: LD_VAR 0 2
31017: PPUSH
31018: CALL_OW 12
31022: ARRAY
31023: ST_TO_ADDR
// if Crawls ( un ) then
31024: LD_VAR 0 3
31028: PPUSH
31029: CALL_OW 318
31033: IFFALSE 31044
// ComWalk ( un ) ;
31035: LD_VAR 0 3
31039: PPUSH
31040: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31044: LD_VAR 0 3
31048: PPUSH
31049: LD_INT 8
31051: PPUSH
31052: CALL_OW 336
// end ; 4 :
31056: GO 31162
31058: LD_INT 4
31060: DOUBLE
31061: EQUAL
31062: IFTRUE 31066
31064: GO 31140
31066: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31067: LD_ADDR_VAR 0 2
31071: PUSH
31072: LD_INT 22
31074: PUSH
31075: LD_OWVAR 2
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 30
31086: PUSH
31087: LD_INT 29
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PPUSH
31098: CALL_OW 69
31102: ST_TO_ADDR
// if not tmp then
31103: LD_VAR 0 2
31107: NOT
31108: IFFALSE 31112
// exit ;
31110: GO 31162
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31112: LD_VAR 0 2
31116: PUSH
31117: LD_INT 1
31119: ARRAY
31120: PPUSH
31121: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31125: LD_VAR 0 2
31129: PUSH
31130: LD_INT 1
31132: ARRAY
31133: PPUSH
31134: CALL_OW 65
// end ; 5 .. 7 :
31138: GO 31162
31140: LD_INT 5
31142: DOUBLE
31143: GREATEREQUAL
31144: IFFALSE 31152
31146: LD_INT 7
31148: DOUBLE
31149: LESSEQUAL
31150: IFTRUE 31154
31152: GO 31161
31154: POP
// StreamSibBomb ; end ;
31155: CALL 27399 0 0
31159: GO 31162
31161: POP
// end ;
31162: PPOPN 3
31164: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31165: LD_EXP 68
31169: PUSH
31170: LD_EXP 118
31174: AND
31175: IFFALSE 31331
31177: GO 31179
31179: DISABLE
31180: LD_INT 0
31182: PPUSH
31183: PPUSH
31184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31185: LD_ADDR_VAR 0 2
31189: PUSH
31190: LD_INT 81
31192: PUSH
31193: LD_OWVAR 2
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: PUSH
31205: LD_INT 21
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 21
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: LIST
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PPUSH
31234: CALL_OW 69
31238: ST_TO_ADDR
// if not tmp then
31239: LD_VAR 0 2
31243: NOT
31244: IFFALSE 31248
// exit ;
31246: GO 31331
// p := 0 ;
31248: LD_ADDR_VAR 0 3
31252: PUSH
31253: LD_INT 0
31255: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31256: LD_INT 35
31258: PPUSH
31259: CALL_OW 67
// p := p + 1 ;
31263: LD_ADDR_VAR 0 3
31267: PUSH
31268: LD_VAR 0 3
31272: PUSH
31273: LD_INT 1
31275: PLUS
31276: ST_TO_ADDR
// for i in tmp do
31277: LD_ADDR_VAR 0 1
31281: PUSH
31282: LD_VAR 0 2
31286: PUSH
31287: FOR_IN
31288: IFFALSE 31319
// if GetLives ( i ) < 1000 then
31290: LD_VAR 0 1
31294: PPUSH
31295: CALL_OW 256
31299: PUSH
31300: LD_INT 1000
31302: LESS
31303: IFFALSE 31317
// SetLives ( i , 1000 ) ;
31305: LD_VAR 0 1
31309: PPUSH
31310: LD_INT 1000
31312: PPUSH
31313: CALL_OW 234
31317: GO 31287
31319: POP
31320: POP
// until p > 20 ;
31321: LD_VAR 0 3
31325: PUSH
31326: LD_INT 20
31328: GREATER
31329: IFFALSE 31256
// end ;
31331: PPOPN 3
31333: END
// every 0 0$1 trigger StreamModeActive and sTime do
31334: LD_EXP 68
31338: PUSH
31339: LD_EXP 119
31343: AND
31344: IFFALSE 31379
31346: GO 31348
31348: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31349: LD_INT 28
31351: PPUSH
31352: LD_OWVAR 2
31356: PPUSH
31357: LD_INT 2
31359: PPUSH
31360: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31364: LD_INT 30
31366: PPUSH
31367: LD_OWVAR 2
31371: PPUSH
31372: LD_INT 2
31374: PPUSH
31375: CALL_OW 322
// end ;
31379: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31380: LD_EXP 68
31384: PUSH
31385: LD_EXP 120
31389: AND
31390: IFFALSE 31511
31392: GO 31394
31394: DISABLE
31395: LD_INT 0
31397: PPUSH
31398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31399: LD_ADDR_VAR 0 2
31403: PUSH
31404: LD_INT 22
31406: PUSH
31407: LD_OWVAR 2
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 21
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 3
31428: PUSH
31429: LD_INT 23
31431: PUSH
31432: LD_INT 0
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: LIST
31447: PPUSH
31448: CALL_OW 69
31452: ST_TO_ADDR
// if not tmp then
31453: LD_VAR 0 2
31457: NOT
31458: IFFALSE 31462
// exit ;
31460: GO 31511
// for i in tmp do
31462: LD_ADDR_VAR 0 1
31466: PUSH
31467: LD_VAR 0 2
31471: PUSH
31472: FOR_IN
31473: IFFALSE 31509
// begin if Crawls ( i ) then
31475: LD_VAR 0 1
31479: PPUSH
31480: CALL_OW 318
31484: IFFALSE 31495
// ComWalk ( i ) ;
31486: LD_VAR 0 1
31490: PPUSH
31491: CALL_OW 138
// SetClass ( i , 2 ) ;
31495: LD_VAR 0 1
31499: PPUSH
31500: LD_INT 2
31502: PPUSH
31503: CALL_OW 336
// end ;
31507: GO 31472
31509: POP
31510: POP
// end ;
31511: PPOPN 2
31513: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31514: LD_EXP 68
31518: PUSH
31519: LD_EXP 121
31523: AND
31524: IFFALSE 31812
31526: GO 31528
31528: DISABLE
31529: LD_INT 0
31531: PPUSH
31532: PPUSH
31533: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31534: LD_OWVAR 2
31538: PPUSH
31539: LD_INT 9
31541: PPUSH
31542: LD_INT 1
31544: PPUSH
31545: LD_INT 1
31547: PPUSH
31548: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31552: LD_INT 9
31554: PPUSH
31555: LD_OWVAR 2
31559: PPUSH
31560: CALL_OW 343
// uc_side := 9 ;
31564: LD_ADDR_OWVAR 20
31568: PUSH
31569: LD_INT 9
31571: ST_TO_ADDR
// uc_nation := 2 ;
31572: LD_ADDR_OWVAR 21
31576: PUSH
31577: LD_INT 2
31579: ST_TO_ADDR
// hc_name := Dark Warrior ;
31580: LD_ADDR_OWVAR 26
31584: PUSH
31585: LD_STRING Dark Warrior
31587: ST_TO_ADDR
// hc_gallery :=  ;
31588: LD_ADDR_OWVAR 33
31592: PUSH
31593: LD_STRING 
31595: ST_TO_ADDR
// hc_noskilllimit := true ;
31596: LD_ADDR_OWVAR 76
31600: PUSH
31601: LD_INT 1
31603: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31604: LD_ADDR_OWVAR 31
31608: PUSH
31609: LD_INT 30
31611: PUSH
31612: LD_INT 30
31614: PUSH
31615: LD_INT 30
31617: PUSH
31618: LD_INT 30
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: ST_TO_ADDR
// un := CreateHuman ;
31627: LD_ADDR_VAR 0 3
31631: PUSH
31632: CALL_OW 44
31636: ST_TO_ADDR
// hc_noskilllimit := false ;
31637: LD_ADDR_OWVAR 76
31641: PUSH
31642: LD_INT 0
31644: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31645: LD_VAR 0 3
31649: PPUSH
31650: LD_INT 1
31652: PPUSH
31653: CALL_OW 51
// ToLua ( playRanger() ) ;
31657: LD_STRING playRanger()
31659: PPUSH
31660: CALL_OW 559
// p := 0 ;
31664: LD_ADDR_VAR 0 2
31668: PUSH
31669: LD_INT 0
31671: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31672: LD_INT 35
31674: PPUSH
31675: CALL_OW 67
// p := p + 1 ;
31679: LD_ADDR_VAR 0 2
31683: PUSH
31684: LD_VAR 0 2
31688: PUSH
31689: LD_INT 1
31691: PLUS
31692: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31693: LD_VAR 0 3
31697: PPUSH
31698: CALL_OW 256
31702: PUSH
31703: LD_INT 1000
31705: LESS
31706: IFFALSE 31720
// SetLives ( un , 1000 ) ;
31708: LD_VAR 0 3
31712: PPUSH
31713: LD_INT 1000
31715: PPUSH
31716: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31720: LD_VAR 0 3
31724: PPUSH
31725: LD_INT 81
31727: PUSH
31728: LD_OWVAR 2
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 91
31739: PUSH
31740: LD_VAR 0 3
31744: PUSH
31745: LD_INT 30
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PPUSH
31757: CALL_OW 69
31761: PPUSH
31762: LD_VAR 0 3
31766: PPUSH
31767: CALL_OW 74
31771: PPUSH
31772: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31776: LD_VAR 0 2
31780: PUSH
31781: LD_INT 80
31783: GREATER
31784: PUSH
31785: LD_VAR 0 3
31789: PPUSH
31790: CALL_OW 301
31794: OR
31795: IFFALSE 31672
// if un then
31797: LD_VAR 0 3
31801: IFFALSE 31812
// RemoveUnit ( un ) ;
31803: LD_VAR 0 3
31807: PPUSH
31808: CALL_OW 64
// end ;
31812: PPOPN 3
31814: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31815: LD_EXP 122
31819: IFFALSE 31935
31821: GO 31823
31823: DISABLE
31824: LD_INT 0
31826: PPUSH
31827: PPUSH
31828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31829: LD_ADDR_VAR 0 2
31833: PUSH
31834: LD_INT 81
31836: PUSH
31837: LD_OWVAR 2
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 21
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PPUSH
31860: CALL_OW 69
31864: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31865: LD_STRING playComputer()
31867: PPUSH
31868: CALL_OW 559
// if not tmp then
31872: LD_VAR 0 2
31876: NOT
31877: IFFALSE 31881
// exit ;
31879: GO 31935
// for i in tmp do
31881: LD_ADDR_VAR 0 1
31885: PUSH
31886: LD_VAR 0 2
31890: PUSH
31891: FOR_IN
31892: IFFALSE 31933
// for j := 1 to 4 do
31894: LD_ADDR_VAR 0 3
31898: PUSH
31899: DOUBLE
31900: LD_INT 1
31902: DEC
31903: ST_TO_ADDR
31904: LD_INT 4
31906: PUSH
31907: FOR_TO
31908: IFFALSE 31929
// SetSkill ( i , j , 10 ) ;
31910: LD_VAR 0 1
31914: PPUSH
31915: LD_VAR 0 3
31919: PPUSH
31920: LD_INT 10
31922: PPUSH
31923: CALL_OW 237
31927: GO 31907
31929: POP
31930: POP
31931: GO 31891
31933: POP
31934: POP
// end ;
31935: PPOPN 3
31937: END
// every 0 0$1 trigger s30 do var i , tmp ;
31938: LD_EXP 123
31942: IFFALSE 32011
31944: GO 31946
31946: DISABLE
31947: LD_INT 0
31949: PPUSH
31950: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31951: LD_ADDR_VAR 0 2
31955: PUSH
31956: LD_INT 22
31958: PUSH
31959: LD_OWVAR 2
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PPUSH
31968: CALL_OW 69
31972: ST_TO_ADDR
// if not tmp then
31973: LD_VAR 0 2
31977: NOT
31978: IFFALSE 31982
// exit ;
31980: GO 32011
// for i in tmp do
31982: LD_ADDR_VAR 0 1
31986: PUSH
31987: LD_VAR 0 2
31991: PUSH
31992: FOR_IN
31993: IFFALSE 32009
// SetLives ( i , 300 ) ;
31995: LD_VAR 0 1
31999: PPUSH
32000: LD_INT 300
32002: PPUSH
32003: CALL_OW 234
32007: GO 31992
32009: POP
32010: POP
// end ;
32011: PPOPN 2
32013: END
// every 0 0$1 trigger s60 do var i , tmp ;
32014: LD_EXP 124
32018: IFFALSE 32087
32020: GO 32022
32022: DISABLE
32023: LD_INT 0
32025: PPUSH
32026: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32027: LD_ADDR_VAR 0 2
32031: PUSH
32032: LD_INT 22
32034: PUSH
32035: LD_OWVAR 2
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PPUSH
32044: CALL_OW 69
32048: ST_TO_ADDR
// if not tmp then
32049: LD_VAR 0 2
32053: NOT
32054: IFFALSE 32058
// exit ;
32056: GO 32087
// for i in tmp do
32058: LD_ADDR_VAR 0 1
32062: PUSH
32063: LD_VAR 0 2
32067: PUSH
32068: FOR_IN
32069: IFFALSE 32085
// SetLives ( i , 600 ) ;
32071: LD_VAR 0 1
32075: PPUSH
32076: LD_INT 600
32078: PPUSH
32079: CALL_OW 234
32083: GO 32068
32085: POP
32086: POP
// end ;
32087: PPOPN 2
32089: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32090: LD_INT 0
32092: PPUSH
// case cmd of 301 :
32093: LD_VAR 0 1
32097: PUSH
32098: LD_INT 301
32100: DOUBLE
32101: EQUAL
32102: IFTRUE 32106
32104: GO 32138
32106: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32107: LD_VAR 0 6
32111: PPUSH
32112: LD_VAR 0 7
32116: PPUSH
32117: LD_VAR 0 8
32121: PPUSH
32122: LD_VAR 0 4
32126: PPUSH
32127: LD_VAR 0 5
32131: PPUSH
32132: CALL 33339 0 5
32136: GO 32259
32138: LD_INT 302
32140: DOUBLE
32141: EQUAL
32142: IFTRUE 32146
32144: GO 32183
32146: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32147: LD_VAR 0 6
32151: PPUSH
32152: LD_VAR 0 7
32156: PPUSH
32157: LD_VAR 0 8
32161: PPUSH
32162: LD_VAR 0 9
32166: PPUSH
32167: LD_VAR 0 4
32171: PPUSH
32172: LD_VAR 0 5
32176: PPUSH
32177: CALL 33430 0 6
32181: GO 32259
32183: LD_INT 303
32185: DOUBLE
32186: EQUAL
32187: IFTRUE 32191
32189: GO 32228
32191: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32192: LD_VAR 0 6
32196: PPUSH
32197: LD_VAR 0 7
32201: PPUSH
32202: LD_VAR 0 8
32206: PPUSH
32207: LD_VAR 0 9
32211: PPUSH
32212: LD_VAR 0 4
32216: PPUSH
32217: LD_VAR 0 5
32221: PPUSH
32222: CALL 32264 0 6
32226: GO 32259
32228: LD_INT 304
32230: DOUBLE
32231: EQUAL
32232: IFTRUE 32236
32234: GO 32258
32236: POP
// hHackTeleport ( unit , x , y ) ; end ;
32237: LD_VAR 0 2
32241: PPUSH
32242: LD_VAR 0 4
32246: PPUSH
32247: LD_VAR 0 5
32251: PPUSH
32252: CALL 34023 0 3
32256: GO 32259
32258: POP
// end ;
32259: LD_VAR 0 12
32263: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32264: LD_INT 0
32266: PPUSH
32267: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32268: LD_VAR 0 1
32272: PUSH
32273: LD_INT 1
32275: LESS
32276: PUSH
32277: LD_VAR 0 1
32281: PUSH
32282: LD_INT 3
32284: GREATER
32285: OR
32286: PUSH
32287: LD_VAR 0 5
32291: PPUSH
32292: LD_VAR 0 6
32296: PPUSH
32297: CALL_OW 428
32301: OR
32302: IFFALSE 32306
// exit ;
32304: GO 33026
// uc_side := your_side ;
32306: LD_ADDR_OWVAR 20
32310: PUSH
32311: LD_OWVAR 2
32315: ST_TO_ADDR
// uc_nation := nation ;
32316: LD_ADDR_OWVAR 21
32320: PUSH
32321: LD_VAR 0 1
32325: ST_TO_ADDR
// bc_level = 1 ;
32326: LD_ADDR_OWVAR 43
32330: PUSH
32331: LD_INT 1
32333: ST_TO_ADDR
// case btype of 1 :
32334: LD_VAR 0 2
32338: PUSH
32339: LD_INT 1
32341: DOUBLE
32342: EQUAL
32343: IFTRUE 32347
32345: GO 32358
32347: POP
// bc_type := b_depot ; 2 :
32348: LD_ADDR_OWVAR 42
32352: PUSH
32353: LD_INT 0
32355: ST_TO_ADDR
32356: GO 32970
32358: LD_INT 2
32360: DOUBLE
32361: EQUAL
32362: IFTRUE 32366
32364: GO 32377
32366: POP
// bc_type := b_warehouse ; 3 :
32367: LD_ADDR_OWVAR 42
32371: PUSH
32372: LD_INT 1
32374: ST_TO_ADDR
32375: GO 32970
32377: LD_INT 3
32379: DOUBLE
32380: EQUAL
32381: IFTRUE 32385
32383: GO 32396
32385: POP
// bc_type := b_lab ; 4 .. 9 :
32386: LD_ADDR_OWVAR 42
32390: PUSH
32391: LD_INT 6
32393: ST_TO_ADDR
32394: GO 32970
32396: LD_INT 4
32398: DOUBLE
32399: GREATEREQUAL
32400: IFFALSE 32408
32402: LD_INT 9
32404: DOUBLE
32405: LESSEQUAL
32406: IFTRUE 32410
32408: GO 32462
32410: POP
// begin bc_type := b_lab_half ;
32411: LD_ADDR_OWVAR 42
32415: PUSH
32416: LD_INT 7
32418: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32419: LD_ADDR_OWVAR 44
32423: PUSH
32424: LD_INT 10
32426: PUSH
32427: LD_INT 11
32429: PUSH
32430: LD_INT 12
32432: PUSH
32433: LD_INT 15
32435: PUSH
32436: LD_INT 14
32438: PUSH
32439: LD_INT 13
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: PUSH
32450: LD_VAR 0 2
32454: PUSH
32455: LD_INT 3
32457: MINUS
32458: ARRAY
32459: ST_TO_ADDR
// end ; 10 .. 13 :
32460: GO 32970
32462: LD_INT 10
32464: DOUBLE
32465: GREATEREQUAL
32466: IFFALSE 32474
32468: LD_INT 13
32470: DOUBLE
32471: LESSEQUAL
32472: IFTRUE 32476
32474: GO 32553
32476: POP
// begin bc_type := b_lab_full ;
32477: LD_ADDR_OWVAR 42
32481: PUSH
32482: LD_INT 8
32484: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32485: LD_ADDR_OWVAR 44
32489: PUSH
32490: LD_INT 10
32492: PUSH
32493: LD_INT 12
32495: PUSH
32496: LD_INT 14
32498: PUSH
32499: LD_INT 13
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: PUSH
32508: LD_VAR 0 2
32512: PUSH
32513: LD_INT 9
32515: MINUS
32516: ARRAY
32517: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32518: LD_ADDR_OWVAR 45
32522: PUSH
32523: LD_INT 11
32525: PUSH
32526: LD_INT 15
32528: PUSH
32529: LD_INT 12
32531: PUSH
32532: LD_INT 15
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: PUSH
32541: LD_VAR 0 2
32545: PUSH
32546: LD_INT 9
32548: MINUS
32549: ARRAY
32550: ST_TO_ADDR
// end ; 14 :
32551: GO 32970
32553: LD_INT 14
32555: DOUBLE
32556: EQUAL
32557: IFTRUE 32561
32559: GO 32572
32561: POP
// bc_type := b_workshop ; 15 :
32562: LD_ADDR_OWVAR 42
32566: PUSH
32567: LD_INT 2
32569: ST_TO_ADDR
32570: GO 32970
32572: LD_INT 15
32574: DOUBLE
32575: EQUAL
32576: IFTRUE 32580
32578: GO 32591
32580: POP
// bc_type := b_factory ; 16 :
32581: LD_ADDR_OWVAR 42
32585: PUSH
32586: LD_INT 3
32588: ST_TO_ADDR
32589: GO 32970
32591: LD_INT 16
32593: DOUBLE
32594: EQUAL
32595: IFTRUE 32599
32597: GO 32610
32599: POP
// bc_type := b_ext_gun ; 17 :
32600: LD_ADDR_OWVAR 42
32604: PUSH
32605: LD_INT 17
32607: ST_TO_ADDR
32608: GO 32970
32610: LD_INT 17
32612: DOUBLE
32613: EQUAL
32614: IFTRUE 32618
32616: GO 32646
32618: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32619: LD_ADDR_OWVAR 42
32623: PUSH
32624: LD_INT 19
32626: PUSH
32627: LD_INT 23
32629: PUSH
32630: LD_INT 19
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: PUSH
32638: LD_VAR 0 1
32642: ARRAY
32643: ST_TO_ADDR
32644: GO 32970
32646: LD_INT 18
32648: DOUBLE
32649: EQUAL
32650: IFTRUE 32654
32652: GO 32665
32654: POP
// bc_type := b_ext_radar ; 19 :
32655: LD_ADDR_OWVAR 42
32659: PUSH
32660: LD_INT 20
32662: ST_TO_ADDR
32663: GO 32970
32665: LD_INT 19
32667: DOUBLE
32668: EQUAL
32669: IFTRUE 32673
32671: GO 32684
32673: POP
// bc_type := b_ext_radio ; 20 :
32674: LD_ADDR_OWVAR 42
32678: PUSH
32679: LD_INT 22
32681: ST_TO_ADDR
32682: GO 32970
32684: LD_INT 20
32686: DOUBLE
32687: EQUAL
32688: IFTRUE 32692
32690: GO 32703
32692: POP
// bc_type := b_ext_siberium ; 21 :
32693: LD_ADDR_OWVAR 42
32697: PUSH
32698: LD_INT 21
32700: ST_TO_ADDR
32701: GO 32970
32703: LD_INT 21
32705: DOUBLE
32706: EQUAL
32707: IFTRUE 32711
32709: GO 32722
32711: POP
// bc_type := b_ext_computer ; 22 :
32712: LD_ADDR_OWVAR 42
32716: PUSH
32717: LD_INT 24
32719: ST_TO_ADDR
32720: GO 32970
32722: LD_INT 22
32724: DOUBLE
32725: EQUAL
32726: IFTRUE 32730
32728: GO 32741
32730: POP
// bc_type := b_ext_track ; 23 :
32731: LD_ADDR_OWVAR 42
32735: PUSH
32736: LD_INT 16
32738: ST_TO_ADDR
32739: GO 32970
32741: LD_INT 23
32743: DOUBLE
32744: EQUAL
32745: IFTRUE 32749
32747: GO 32760
32749: POP
// bc_type := b_ext_laser ; 24 :
32750: LD_ADDR_OWVAR 42
32754: PUSH
32755: LD_INT 25
32757: ST_TO_ADDR
32758: GO 32970
32760: LD_INT 24
32762: DOUBLE
32763: EQUAL
32764: IFTRUE 32768
32766: GO 32779
32768: POP
// bc_type := b_control_tower ; 25 :
32769: LD_ADDR_OWVAR 42
32773: PUSH
32774: LD_INT 36
32776: ST_TO_ADDR
32777: GO 32970
32779: LD_INT 25
32781: DOUBLE
32782: EQUAL
32783: IFTRUE 32787
32785: GO 32798
32787: POP
// bc_type := b_breastwork ; 26 :
32788: LD_ADDR_OWVAR 42
32792: PUSH
32793: LD_INT 31
32795: ST_TO_ADDR
32796: GO 32970
32798: LD_INT 26
32800: DOUBLE
32801: EQUAL
32802: IFTRUE 32806
32804: GO 32817
32806: POP
// bc_type := b_bunker ; 27 :
32807: LD_ADDR_OWVAR 42
32811: PUSH
32812: LD_INT 32
32814: ST_TO_ADDR
32815: GO 32970
32817: LD_INT 27
32819: DOUBLE
32820: EQUAL
32821: IFTRUE 32825
32823: GO 32836
32825: POP
// bc_type := b_turret ; 28 :
32826: LD_ADDR_OWVAR 42
32830: PUSH
32831: LD_INT 33
32833: ST_TO_ADDR
32834: GO 32970
32836: LD_INT 28
32838: DOUBLE
32839: EQUAL
32840: IFTRUE 32844
32842: GO 32855
32844: POP
// bc_type := b_armoury ; 29 :
32845: LD_ADDR_OWVAR 42
32849: PUSH
32850: LD_INT 4
32852: ST_TO_ADDR
32853: GO 32970
32855: LD_INT 29
32857: DOUBLE
32858: EQUAL
32859: IFTRUE 32863
32861: GO 32874
32863: POP
// bc_type := b_barracks ; 30 :
32864: LD_ADDR_OWVAR 42
32868: PUSH
32869: LD_INT 5
32871: ST_TO_ADDR
32872: GO 32970
32874: LD_INT 30
32876: DOUBLE
32877: EQUAL
32878: IFTRUE 32882
32880: GO 32893
32882: POP
// bc_type := b_solar_power ; 31 :
32883: LD_ADDR_OWVAR 42
32887: PUSH
32888: LD_INT 27
32890: ST_TO_ADDR
32891: GO 32970
32893: LD_INT 31
32895: DOUBLE
32896: EQUAL
32897: IFTRUE 32901
32899: GO 32912
32901: POP
// bc_type := b_oil_power ; 32 :
32902: LD_ADDR_OWVAR 42
32906: PUSH
32907: LD_INT 26
32909: ST_TO_ADDR
32910: GO 32970
32912: LD_INT 32
32914: DOUBLE
32915: EQUAL
32916: IFTRUE 32920
32918: GO 32931
32920: POP
// bc_type := b_siberite_power ; 33 :
32921: LD_ADDR_OWVAR 42
32925: PUSH
32926: LD_INT 28
32928: ST_TO_ADDR
32929: GO 32970
32931: LD_INT 33
32933: DOUBLE
32934: EQUAL
32935: IFTRUE 32939
32937: GO 32950
32939: POP
// bc_type := b_oil_mine ; 34 :
32940: LD_ADDR_OWVAR 42
32944: PUSH
32945: LD_INT 29
32947: ST_TO_ADDR
32948: GO 32970
32950: LD_INT 34
32952: DOUBLE
32953: EQUAL
32954: IFTRUE 32958
32956: GO 32969
32958: POP
// bc_type := b_siberite_mine ; end ;
32959: LD_ADDR_OWVAR 42
32963: PUSH
32964: LD_INT 30
32966: ST_TO_ADDR
32967: GO 32970
32969: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32970: LD_ADDR_VAR 0 8
32974: PUSH
32975: LD_VAR 0 5
32979: PPUSH
32980: LD_VAR 0 6
32984: PPUSH
32985: LD_VAR 0 3
32989: PPUSH
32990: CALL_OW 47
32994: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32995: LD_OWVAR 42
32999: PUSH
33000: LD_INT 32
33002: PUSH
33003: LD_INT 33
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: IN
33010: IFFALSE 33026
// PlaceWeaponTurret ( b , weapon ) ;
33012: LD_VAR 0 8
33016: PPUSH
33017: LD_VAR 0 4
33021: PPUSH
33022: CALL_OW 431
// end ;
33026: LD_VAR 0 7
33030: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33031: LD_INT 0
33033: PPUSH
33034: PPUSH
33035: PPUSH
33036: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33037: LD_ADDR_VAR 0 4
33041: PUSH
33042: LD_INT 22
33044: PUSH
33045: LD_OWVAR 2
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: LD_INT 30
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 30
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PPUSH
33086: CALL_OW 69
33090: ST_TO_ADDR
// if not tmp then
33091: LD_VAR 0 4
33095: NOT
33096: IFFALSE 33100
// exit ;
33098: GO 33159
// for i in tmp do
33100: LD_ADDR_VAR 0 2
33104: PUSH
33105: LD_VAR 0 4
33109: PUSH
33110: FOR_IN
33111: IFFALSE 33157
// for j = 1 to 3 do
33113: LD_ADDR_VAR 0 3
33117: PUSH
33118: DOUBLE
33119: LD_INT 1
33121: DEC
33122: ST_TO_ADDR
33123: LD_INT 3
33125: PUSH
33126: FOR_TO
33127: IFFALSE 33153
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33129: LD_VAR 0 2
33133: PPUSH
33134: CALL_OW 274
33138: PPUSH
33139: LD_VAR 0 3
33143: PPUSH
33144: LD_INT 99999
33146: PPUSH
33147: CALL_OW 277
33151: GO 33126
33153: POP
33154: POP
33155: GO 33110
33157: POP
33158: POP
// end ;
33159: LD_VAR 0 1
33163: RET
// export function hHackSetLevel10 ; var i , j ; begin
33164: LD_INT 0
33166: PPUSH
33167: PPUSH
33168: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33169: LD_ADDR_VAR 0 2
33173: PUSH
33174: LD_INT 21
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PPUSH
33184: CALL_OW 69
33188: PUSH
33189: FOR_IN
33190: IFFALSE 33242
// if IsSelected ( i ) then
33192: LD_VAR 0 2
33196: PPUSH
33197: CALL_OW 306
33201: IFFALSE 33240
// begin for j := 1 to 4 do
33203: LD_ADDR_VAR 0 3
33207: PUSH
33208: DOUBLE
33209: LD_INT 1
33211: DEC
33212: ST_TO_ADDR
33213: LD_INT 4
33215: PUSH
33216: FOR_TO
33217: IFFALSE 33238
// SetSkill ( i , j , 10 ) ;
33219: LD_VAR 0 2
33223: PPUSH
33224: LD_VAR 0 3
33228: PPUSH
33229: LD_INT 10
33231: PPUSH
33232: CALL_OW 237
33236: GO 33216
33238: POP
33239: POP
// end ;
33240: GO 33189
33242: POP
33243: POP
// end ;
33244: LD_VAR 0 1
33248: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33249: LD_INT 0
33251: PPUSH
33252: PPUSH
33253: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33254: LD_ADDR_VAR 0 2
33258: PUSH
33259: LD_INT 22
33261: PUSH
33262: LD_OWVAR 2
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 21
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PPUSH
33285: CALL_OW 69
33289: PUSH
33290: FOR_IN
33291: IFFALSE 33332
// begin for j := 1 to 4 do
33293: LD_ADDR_VAR 0 3
33297: PUSH
33298: DOUBLE
33299: LD_INT 1
33301: DEC
33302: ST_TO_ADDR
33303: LD_INT 4
33305: PUSH
33306: FOR_TO
33307: IFFALSE 33328
// SetSkill ( i , j , 10 ) ;
33309: LD_VAR 0 2
33313: PPUSH
33314: LD_VAR 0 3
33318: PPUSH
33319: LD_INT 10
33321: PPUSH
33322: CALL_OW 237
33326: GO 33306
33328: POP
33329: POP
// end ;
33330: GO 33290
33332: POP
33333: POP
// end ;
33334: LD_VAR 0 1
33338: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33339: LD_INT 0
33341: PPUSH
// uc_side := your_side ;
33342: LD_ADDR_OWVAR 20
33346: PUSH
33347: LD_OWVAR 2
33351: ST_TO_ADDR
// uc_nation := nation ;
33352: LD_ADDR_OWVAR 21
33356: PUSH
33357: LD_VAR 0 1
33361: ST_TO_ADDR
// InitHc ;
33362: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33366: LD_INT 0
33368: PPUSH
33369: LD_VAR 0 2
33373: PPUSH
33374: LD_VAR 0 3
33378: PPUSH
33379: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33383: LD_VAR 0 4
33387: PPUSH
33388: LD_VAR 0 5
33392: PPUSH
33393: CALL_OW 428
33397: PUSH
33398: LD_INT 0
33400: EQUAL
33401: IFFALSE 33425
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33403: CALL_OW 44
33407: PPUSH
33408: LD_VAR 0 4
33412: PPUSH
33413: LD_VAR 0 5
33417: PPUSH
33418: LD_INT 1
33420: PPUSH
33421: CALL_OW 48
// end ;
33425: LD_VAR 0 6
33429: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33430: LD_INT 0
33432: PPUSH
33433: PPUSH
// uc_side := your_side ;
33434: LD_ADDR_OWVAR 20
33438: PUSH
33439: LD_OWVAR 2
33443: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33444: LD_VAR 0 1
33448: PUSH
33449: LD_INT 1
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: LD_INT 3
33457: PUSH
33458: LD_INT 4
33460: PUSH
33461: LD_INT 5
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: IN
33471: IFFALSE 33483
// uc_nation := nation_american else
33473: LD_ADDR_OWVAR 21
33477: PUSH
33478: LD_INT 1
33480: ST_TO_ADDR
33481: GO 33526
// if chassis in [ 11 , 12 , 13 , 14 ] then
33483: LD_VAR 0 1
33487: PUSH
33488: LD_INT 11
33490: PUSH
33491: LD_INT 12
33493: PUSH
33494: LD_INT 13
33496: PUSH
33497: LD_INT 14
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: IN
33506: IFFALSE 33518
// uc_nation := nation_arabian else
33508: LD_ADDR_OWVAR 21
33512: PUSH
33513: LD_INT 2
33515: ST_TO_ADDR
33516: GO 33526
// uc_nation := nation_russian ;
33518: LD_ADDR_OWVAR 21
33522: PUSH
33523: LD_INT 3
33525: ST_TO_ADDR
// vc_chassis := chassis ;
33526: LD_ADDR_OWVAR 37
33530: PUSH
33531: LD_VAR 0 1
33535: ST_TO_ADDR
// vc_engine := engine ;
33536: LD_ADDR_OWVAR 39
33540: PUSH
33541: LD_VAR 0 2
33545: ST_TO_ADDR
// vc_control := control ;
33546: LD_ADDR_OWVAR 38
33550: PUSH
33551: LD_VAR 0 3
33555: ST_TO_ADDR
// vc_weapon := weapon ;
33556: LD_ADDR_OWVAR 40
33560: PUSH
33561: LD_VAR 0 4
33565: ST_TO_ADDR
// un := CreateVehicle ;
33566: LD_ADDR_VAR 0 8
33570: PUSH
33571: CALL_OW 45
33575: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33576: LD_VAR 0 8
33580: PPUSH
33581: LD_INT 0
33583: PPUSH
33584: LD_INT 5
33586: PPUSH
33587: CALL_OW 12
33591: PPUSH
33592: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33596: LD_VAR 0 8
33600: PPUSH
33601: LD_VAR 0 5
33605: PPUSH
33606: LD_VAR 0 6
33610: PPUSH
33611: LD_INT 1
33613: PPUSH
33614: CALL_OW 48
// end ;
33618: LD_VAR 0 7
33622: RET
// export hInvincible ; every 1 do
33623: GO 33625
33625: DISABLE
// hInvincible := [ ] ;
33626: LD_ADDR_EXP 125
33630: PUSH
33631: EMPTY
33632: ST_TO_ADDR
33633: END
// every 10 do var i ;
33634: GO 33636
33636: DISABLE
33637: LD_INT 0
33639: PPUSH
// begin enable ;
33640: ENABLE
// if not hInvincible then
33641: LD_EXP 125
33645: NOT
33646: IFFALSE 33650
// exit ;
33648: GO 33694
// for i in hInvincible do
33650: LD_ADDR_VAR 0 1
33654: PUSH
33655: LD_EXP 125
33659: PUSH
33660: FOR_IN
33661: IFFALSE 33692
// if GetLives ( i ) < 1000 then
33663: LD_VAR 0 1
33667: PPUSH
33668: CALL_OW 256
33672: PUSH
33673: LD_INT 1000
33675: LESS
33676: IFFALSE 33690
// SetLives ( i , 1000 ) ;
33678: LD_VAR 0 1
33682: PPUSH
33683: LD_INT 1000
33685: PPUSH
33686: CALL_OW 234
33690: GO 33660
33692: POP
33693: POP
// end ;
33694: PPOPN 1
33696: END
// export function hHackInvincible ; var i ; begin
33697: LD_INT 0
33699: PPUSH
33700: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33701: LD_ADDR_VAR 0 2
33705: PUSH
33706: LD_INT 2
33708: PUSH
33709: LD_INT 21
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 21
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: LIST
33733: PPUSH
33734: CALL_OW 69
33738: PUSH
33739: FOR_IN
33740: IFFALSE 33801
// if IsSelected ( i ) then
33742: LD_VAR 0 2
33746: PPUSH
33747: CALL_OW 306
33751: IFFALSE 33799
// begin if i in hInvincible then
33753: LD_VAR 0 2
33757: PUSH
33758: LD_EXP 125
33762: IN
33763: IFFALSE 33783
// hInvincible := hInvincible diff i else
33765: LD_ADDR_EXP 125
33769: PUSH
33770: LD_EXP 125
33774: PUSH
33775: LD_VAR 0 2
33779: DIFF
33780: ST_TO_ADDR
33781: GO 33799
// hInvincible := hInvincible union i ;
33783: LD_ADDR_EXP 125
33787: PUSH
33788: LD_EXP 125
33792: PUSH
33793: LD_VAR 0 2
33797: UNION
33798: ST_TO_ADDR
// end ;
33799: GO 33739
33801: POP
33802: POP
// end ;
33803: LD_VAR 0 1
33807: RET
// export function hHackInvisible ; var i , j ; begin
33808: LD_INT 0
33810: PPUSH
33811: PPUSH
33812: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33813: LD_ADDR_VAR 0 2
33817: PUSH
33818: LD_INT 21
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PPUSH
33828: CALL_OW 69
33832: PUSH
33833: FOR_IN
33834: IFFALSE 33858
// if IsSelected ( i ) then
33836: LD_VAR 0 2
33840: PPUSH
33841: CALL_OW 306
33845: IFFALSE 33856
// ComForceInvisible ( i ) ;
33847: LD_VAR 0 2
33851: PPUSH
33852: CALL_OW 496
33856: GO 33833
33858: POP
33859: POP
// end ;
33860: LD_VAR 0 1
33864: RET
// export function hHackChangeYourSide ; begin
33865: LD_INT 0
33867: PPUSH
// if your_side = 8 then
33868: LD_OWVAR 2
33872: PUSH
33873: LD_INT 8
33875: EQUAL
33876: IFFALSE 33888
// your_side := 0 else
33878: LD_ADDR_OWVAR 2
33882: PUSH
33883: LD_INT 0
33885: ST_TO_ADDR
33886: GO 33902
// your_side := your_side + 1 ;
33888: LD_ADDR_OWVAR 2
33892: PUSH
33893: LD_OWVAR 2
33897: PUSH
33898: LD_INT 1
33900: PLUS
33901: ST_TO_ADDR
// end ;
33902: LD_VAR 0 1
33906: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33907: LD_INT 0
33909: PPUSH
33910: PPUSH
33911: PPUSH
// for i in all_units do
33912: LD_ADDR_VAR 0 2
33916: PUSH
33917: LD_OWVAR 3
33921: PUSH
33922: FOR_IN
33923: IFFALSE 34001
// if IsSelected ( i ) then
33925: LD_VAR 0 2
33929: PPUSH
33930: CALL_OW 306
33934: IFFALSE 33999
// begin j := GetSide ( i ) ;
33936: LD_ADDR_VAR 0 3
33940: PUSH
33941: LD_VAR 0 2
33945: PPUSH
33946: CALL_OW 255
33950: ST_TO_ADDR
// if j = 8 then
33951: LD_VAR 0 3
33955: PUSH
33956: LD_INT 8
33958: EQUAL
33959: IFFALSE 33971
// j := 0 else
33961: LD_ADDR_VAR 0 3
33965: PUSH
33966: LD_INT 0
33968: ST_TO_ADDR
33969: GO 33985
// j := j + 1 ;
33971: LD_ADDR_VAR 0 3
33975: PUSH
33976: LD_VAR 0 3
33980: PUSH
33981: LD_INT 1
33983: PLUS
33984: ST_TO_ADDR
// SetSide ( i , j ) ;
33985: LD_VAR 0 2
33989: PPUSH
33990: LD_VAR 0 3
33994: PPUSH
33995: CALL_OW 235
// end ;
33999: GO 33922
34001: POP
34002: POP
// end ;
34003: LD_VAR 0 1
34007: RET
// export function hHackFog ; begin
34008: LD_INT 0
34010: PPUSH
// FogOff ( true ) ;
34011: LD_INT 1
34013: PPUSH
34014: CALL_OW 344
// end ;
34018: LD_VAR 0 1
34022: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34023: LD_INT 0
34025: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34026: LD_VAR 0 1
34030: PPUSH
34031: LD_VAR 0 2
34035: PPUSH
34036: LD_VAR 0 3
34040: PPUSH
34041: LD_INT 1
34043: PPUSH
34044: LD_INT 1
34046: PPUSH
34047: CALL_OW 483
// CenterOnXY ( x , y ) ;
34051: LD_VAR 0 2
34055: PPUSH
34056: LD_VAR 0 3
34060: PPUSH
34061: CALL_OW 84
// end ; end_of_file
34065: LD_VAR 0 4
34069: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34070: LD_INT 0
34072: PPUSH
34073: PPUSH
34074: PPUSH
34075: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34076: LD_VAR 0 1
34080: PPUSH
34081: CALL_OW 264
34085: PUSH
34086: LD_EXP 53
34090: EQUAL
34091: IFFALSE 34163
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34093: LD_INT 68
34095: PPUSH
34096: LD_VAR 0 1
34100: PPUSH
34101: CALL_OW 255
34105: PPUSH
34106: CALL_OW 321
34110: PUSH
34111: LD_INT 2
34113: EQUAL
34114: IFFALSE 34126
// eff := 70 else
34116: LD_ADDR_VAR 0 4
34120: PUSH
34121: LD_INT 70
34123: ST_TO_ADDR
34124: GO 34134
// eff := 30 ;
34126: LD_ADDR_VAR 0 4
34130: PUSH
34131: LD_INT 30
34133: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34134: LD_VAR 0 1
34138: PPUSH
34139: CALL_OW 250
34143: PPUSH
34144: LD_VAR 0 1
34148: PPUSH
34149: CALL_OW 251
34153: PPUSH
34154: LD_VAR 0 4
34158: PPUSH
34159: CALL_OW 495
// end ; end ;
34163: LD_VAR 0 2
34167: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34168: LD_INT 0
34170: PPUSH
// end ;
34171: LD_VAR 0 4
34175: RET
// export function SOS_Command ( cmd ) ; begin
34176: LD_INT 0
34178: PPUSH
// end ;
34179: LD_VAR 0 2
34183: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34184: LD_INT 0
34186: PPUSH
// end ;
34187: LD_VAR 0 6
34191: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34192: LD_INT 0
34194: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34195: LD_VAR 0 1
34199: PUSH
34200: LD_INT 250
34202: EQUAL
34203: PUSH
34204: LD_VAR 0 2
34208: PPUSH
34209: CALL_OW 264
34213: PUSH
34214: LD_EXP 56
34218: EQUAL
34219: AND
34220: IFFALSE 34241
// MinerPlaceMine ( unit , x , y ) ;
34222: LD_VAR 0 2
34226: PPUSH
34227: LD_VAR 0 4
34231: PPUSH
34232: LD_VAR 0 5
34236: PPUSH
34237: CALL 36590 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34241: LD_VAR 0 1
34245: PUSH
34246: LD_INT 251
34248: EQUAL
34249: PUSH
34250: LD_VAR 0 2
34254: PPUSH
34255: CALL_OW 264
34259: PUSH
34260: LD_EXP 56
34264: EQUAL
34265: AND
34266: IFFALSE 34287
// MinerDetonateMine ( unit , x , y ) ;
34268: LD_VAR 0 2
34272: PPUSH
34273: LD_VAR 0 4
34277: PPUSH
34278: LD_VAR 0 5
34282: PPUSH
34283: CALL 36867 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34287: LD_VAR 0 1
34291: PUSH
34292: LD_INT 252
34294: EQUAL
34295: PUSH
34296: LD_VAR 0 2
34300: PPUSH
34301: CALL_OW 264
34305: PUSH
34306: LD_EXP 56
34310: EQUAL
34311: AND
34312: IFFALSE 34333
// MinerCreateMinefield ( unit , x , y ) ;
34314: LD_VAR 0 2
34318: PPUSH
34319: LD_VAR 0 4
34323: PPUSH
34324: LD_VAR 0 5
34328: PPUSH
34329: CALL 37284 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34333: LD_VAR 0 1
34337: PUSH
34338: LD_INT 253
34340: EQUAL
34341: PUSH
34342: LD_VAR 0 2
34346: PPUSH
34347: CALL_OW 257
34351: PUSH
34352: LD_INT 5
34354: EQUAL
34355: AND
34356: IFFALSE 34377
// ComBinocular ( unit , x , y ) ;
34358: LD_VAR 0 2
34362: PPUSH
34363: LD_VAR 0 4
34367: PPUSH
34368: LD_VAR 0 5
34372: PPUSH
34373: CALL 37655 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34377: LD_VAR 0 1
34381: PUSH
34382: LD_INT 254
34384: EQUAL
34385: PUSH
34386: LD_VAR 0 2
34390: PPUSH
34391: CALL_OW 264
34395: PUSH
34396: LD_EXP 51
34400: EQUAL
34401: AND
34402: PUSH
34403: LD_VAR 0 3
34407: PPUSH
34408: CALL_OW 263
34412: PUSH
34413: LD_INT 3
34415: EQUAL
34416: AND
34417: IFFALSE 34433
// HackDestroyVehicle ( unit , selectedUnit ) ;
34419: LD_VAR 0 2
34423: PPUSH
34424: LD_VAR 0 3
34428: PPUSH
34429: CALL 35950 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34433: LD_VAR 0 1
34437: PUSH
34438: LD_INT 255
34440: EQUAL
34441: PUSH
34442: LD_VAR 0 2
34446: PPUSH
34447: CALL_OW 264
34451: PUSH
34452: LD_INT 14
34454: PUSH
34455: LD_INT 53
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: IN
34462: AND
34463: PUSH
34464: LD_VAR 0 4
34468: PPUSH
34469: LD_VAR 0 5
34473: PPUSH
34474: CALL_OW 488
34478: AND
34479: IFFALSE 34503
// CutTreeXYR ( unit , x , y , 12 ) ;
34481: LD_VAR 0 2
34485: PPUSH
34486: LD_VAR 0 4
34490: PPUSH
34491: LD_VAR 0 5
34495: PPUSH
34496: LD_INT 12
34498: PPUSH
34499: CALL 34516 0 4
// end ;
34503: LD_VAR 0 6
34507: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
34508: LD_INT 0
34510: PPUSH
// end ;
34511: LD_VAR 0 4
34515: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34516: LD_INT 0
34518: PPUSH
34519: PPUSH
34520: PPUSH
34521: PPUSH
34522: PPUSH
34523: PPUSH
34524: PPUSH
34525: PPUSH
34526: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34527: LD_VAR 0 1
34531: NOT
34532: PUSH
34533: LD_VAR 0 2
34537: PPUSH
34538: LD_VAR 0 3
34542: PPUSH
34543: CALL_OW 488
34547: NOT
34548: OR
34549: PUSH
34550: LD_VAR 0 4
34554: NOT
34555: OR
34556: IFFALSE 34560
// exit ;
34558: GO 34900
// list := [ ] ;
34560: LD_ADDR_VAR 0 13
34564: PUSH
34565: EMPTY
34566: ST_TO_ADDR
// if x - r < 0 then
34567: LD_VAR 0 2
34571: PUSH
34572: LD_VAR 0 4
34576: MINUS
34577: PUSH
34578: LD_INT 0
34580: LESS
34581: IFFALSE 34593
// min_x := 0 else
34583: LD_ADDR_VAR 0 7
34587: PUSH
34588: LD_INT 0
34590: ST_TO_ADDR
34591: GO 34609
// min_x := x - r ;
34593: LD_ADDR_VAR 0 7
34597: PUSH
34598: LD_VAR 0 2
34602: PUSH
34603: LD_VAR 0 4
34607: MINUS
34608: ST_TO_ADDR
// if y - r < 0 then
34609: LD_VAR 0 3
34613: PUSH
34614: LD_VAR 0 4
34618: MINUS
34619: PUSH
34620: LD_INT 0
34622: LESS
34623: IFFALSE 34635
// min_y := 0 else
34625: LD_ADDR_VAR 0 8
34629: PUSH
34630: LD_INT 0
34632: ST_TO_ADDR
34633: GO 34651
// min_y := y - r ;
34635: LD_ADDR_VAR 0 8
34639: PUSH
34640: LD_VAR 0 3
34644: PUSH
34645: LD_VAR 0 4
34649: MINUS
34650: ST_TO_ADDR
// max_x := x + r ;
34651: LD_ADDR_VAR 0 9
34655: PUSH
34656: LD_VAR 0 2
34660: PUSH
34661: LD_VAR 0 4
34665: PLUS
34666: ST_TO_ADDR
// max_y := y + r ;
34667: LD_ADDR_VAR 0 10
34671: PUSH
34672: LD_VAR 0 3
34676: PUSH
34677: LD_VAR 0 4
34681: PLUS
34682: ST_TO_ADDR
// for _x = min_x to max_x do
34683: LD_ADDR_VAR 0 11
34687: PUSH
34688: DOUBLE
34689: LD_VAR 0 7
34693: DEC
34694: ST_TO_ADDR
34695: LD_VAR 0 9
34699: PUSH
34700: FOR_TO
34701: IFFALSE 34818
// for _y = min_y to max_y do
34703: LD_ADDR_VAR 0 12
34707: PUSH
34708: DOUBLE
34709: LD_VAR 0 8
34713: DEC
34714: ST_TO_ADDR
34715: LD_VAR 0 10
34719: PUSH
34720: FOR_TO
34721: IFFALSE 34814
// begin if not ValidHex ( _x , _y ) then
34723: LD_VAR 0 11
34727: PPUSH
34728: LD_VAR 0 12
34732: PPUSH
34733: CALL_OW 488
34737: NOT
34738: IFFALSE 34742
// continue ;
34740: GO 34720
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34742: LD_VAR 0 11
34746: PPUSH
34747: LD_VAR 0 12
34751: PPUSH
34752: CALL_OW 351
34756: PUSH
34757: LD_VAR 0 11
34761: PPUSH
34762: LD_VAR 0 12
34766: PPUSH
34767: CALL_OW 554
34771: AND
34772: IFFALSE 34812
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34774: LD_ADDR_VAR 0 13
34778: PUSH
34779: LD_VAR 0 13
34783: PPUSH
34784: LD_VAR 0 13
34788: PUSH
34789: LD_INT 1
34791: PLUS
34792: PPUSH
34793: LD_VAR 0 11
34797: PUSH
34798: LD_VAR 0 12
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PPUSH
34807: CALL_OW 2
34811: ST_TO_ADDR
// end ;
34812: GO 34720
34814: POP
34815: POP
34816: GO 34700
34818: POP
34819: POP
// if not list then
34820: LD_VAR 0 13
34824: NOT
34825: IFFALSE 34829
// exit ;
34827: GO 34900
// for i in list do
34829: LD_ADDR_VAR 0 6
34833: PUSH
34834: LD_VAR 0 13
34838: PUSH
34839: FOR_IN
34840: IFFALSE 34898
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34842: LD_VAR 0 1
34846: PPUSH
34847: LD_STRING M
34849: PUSH
34850: LD_VAR 0 6
34854: PUSH
34855: LD_INT 1
34857: ARRAY
34858: PUSH
34859: LD_VAR 0 6
34863: PUSH
34864: LD_INT 2
34866: ARRAY
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: PUSH
34889: EMPTY
34890: LIST
34891: PPUSH
34892: CALL_OW 447
34896: GO 34839
34898: POP
34899: POP
// end ;
34900: LD_VAR 0 5
34904: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34905: LD_EXP 128
34909: NOT
34910: IFFALSE 34960
34912: GO 34914
34914: DISABLE
// begin initHack := true ;
34915: LD_ADDR_EXP 128
34919: PUSH
34920: LD_INT 1
34922: ST_TO_ADDR
// hackTanks := [ ] ;
34923: LD_ADDR_EXP 129
34927: PUSH
34928: EMPTY
34929: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34930: LD_ADDR_EXP 130
34934: PUSH
34935: EMPTY
34936: ST_TO_ADDR
// hackLimit := 3 ;
34937: LD_ADDR_EXP 131
34941: PUSH
34942: LD_INT 3
34944: ST_TO_ADDR
// hackDist := 12 ;
34945: LD_ADDR_EXP 132
34949: PUSH
34950: LD_INT 12
34952: ST_TO_ADDR
// hackCounter := [ ] ;
34953: LD_ADDR_EXP 133
34957: PUSH
34958: EMPTY
34959: ST_TO_ADDR
// end ;
34960: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34961: LD_EXP 128
34965: PUSH
34966: LD_INT 34
34968: PUSH
34969: LD_EXP 51
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PPUSH
34978: CALL_OW 69
34982: AND
34983: IFFALSE 35238
34985: GO 34987
34987: DISABLE
34988: LD_INT 0
34990: PPUSH
34991: PPUSH
// begin enable ;
34992: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34993: LD_ADDR_VAR 0 1
34997: PUSH
34998: LD_INT 34
35000: PUSH
35001: LD_EXP 51
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PPUSH
35010: CALL_OW 69
35014: PUSH
35015: FOR_IN
35016: IFFALSE 35236
// begin if not i in hackTanks then
35018: LD_VAR 0 1
35022: PUSH
35023: LD_EXP 129
35027: IN
35028: NOT
35029: IFFALSE 35112
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35031: LD_ADDR_EXP 129
35035: PUSH
35036: LD_EXP 129
35040: PPUSH
35041: LD_EXP 129
35045: PUSH
35046: LD_INT 1
35048: PLUS
35049: PPUSH
35050: LD_VAR 0 1
35054: PPUSH
35055: CALL_OW 1
35059: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35060: LD_ADDR_EXP 130
35064: PUSH
35065: LD_EXP 130
35069: PPUSH
35070: LD_EXP 130
35074: PUSH
35075: LD_INT 1
35077: PLUS
35078: PPUSH
35079: EMPTY
35080: PPUSH
35081: CALL_OW 1
35085: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35086: LD_ADDR_EXP 133
35090: PUSH
35091: LD_EXP 133
35095: PPUSH
35096: LD_EXP 133
35100: PUSH
35101: LD_INT 1
35103: PLUS
35104: PPUSH
35105: EMPTY
35106: PPUSH
35107: CALL_OW 1
35111: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35112: LD_VAR 0 1
35116: PPUSH
35117: CALL_OW 302
35121: NOT
35122: IFFALSE 35135
// begin HackUnlinkAll ( i ) ;
35124: LD_VAR 0 1
35128: PPUSH
35129: CALL 35241 0 1
// continue ;
35133: GO 35015
// end ; HackCheckCapturedStatus ( i ) ;
35135: LD_VAR 0 1
35139: PPUSH
35140: CALL 35684 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35144: LD_ADDR_VAR 0 2
35148: PUSH
35149: LD_INT 81
35151: PUSH
35152: LD_VAR 0 1
35156: PPUSH
35157: CALL_OW 255
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 33
35168: PUSH
35169: LD_INT 3
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 91
35178: PUSH
35179: LD_VAR 0 1
35183: PUSH
35184: LD_EXP 132
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 50
35196: PUSH
35197: EMPTY
35198: LIST
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: PPUSH
35206: CALL_OW 69
35210: ST_TO_ADDR
// if not tmp then
35211: LD_VAR 0 2
35215: NOT
35216: IFFALSE 35220
// continue ;
35218: GO 35015
// HackLink ( i , tmp ) ;
35220: LD_VAR 0 1
35224: PPUSH
35225: LD_VAR 0 2
35229: PPUSH
35230: CALL 35377 0 2
// end ;
35234: GO 35015
35236: POP
35237: POP
// end ;
35238: PPOPN 2
35240: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35241: LD_INT 0
35243: PPUSH
35244: PPUSH
35245: PPUSH
// if not hack in hackTanks then
35246: LD_VAR 0 1
35250: PUSH
35251: LD_EXP 129
35255: IN
35256: NOT
35257: IFFALSE 35261
// exit ;
35259: GO 35372
// index := GetElementIndex ( hackTanks , hack ) ;
35261: LD_ADDR_VAR 0 4
35265: PUSH
35266: LD_EXP 129
35270: PPUSH
35271: LD_VAR 0 1
35275: PPUSH
35276: CALL 42846 0 2
35280: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35281: LD_EXP 130
35285: PUSH
35286: LD_VAR 0 4
35290: ARRAY
35291: IFFALSE 35372
// begin for i in hackTanksCaptured [ index ] do
35293: LD_ADDR_VAR 0 3
35297: PUSH
35298: LD_EXP 130
35302: PUSH
35303: LD_VAR 0 4
35307: ARRAY
35308: PUSH
35309: FOR_IN
35310: IFFALSE 35336
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35312: LD_VAR 0 3
35316: PUSH
35317: LD_INT 1
35319: ARRAY
35320: PPUSH
35321: LD_VAR 0 3
35325: PUSH
35326: LD_INT 2
35328: ARRAY
35329: PPUSH
35330: CALL_OW 235
35334: GO 35309
35336: POP
35337: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35338: LD_ADDR_EXP 130
35342: PUSH
35343: LD_EXP 130
35347: PPUSH
35348: LD_VAR 0 4
35352: PPUSH
35353: EMPTY
35354: PPUSH
35355: CALL_OW 1
35359: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35360: LD_VAR 0 1
35364: PPUSH
35365: LD_INT 0
35367: PPUSH
35368: CALL_OW 505
// end ; end ;
35372: LD_VAR 0 2
35376: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35377: LD_INT 0
35379: PPUSH
35380: PPUSH
35381: PPUSH
// if not hack in hackTanks or not vehicles then
35382: LD_VAR 0 1
35386: PUSH
35387: LD_EXP 129
35391: IN
35392: NOT
35393: PUSH
35394: LD_VAR 0 2
35398: NOT
35399: OR
35400: IFFALSE 35404
// exit ;
35402: GO 35679
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35404: LD_ADDR_VAR 0 2
35408: PUSH
35409: LD_VAR 0 1
35413: PPUSH
35414: LD_VAR 0 2
35418: PPUSH
35419: LD_INT 1
35421: PPUSH
35422: LD_INT 1
35424: PPUSH
35425: CALL 43496 0 4
35429: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35430: LD_ADDR_VAR 0 5
35434: PUSH
35435: LD_EXP 129
35439: PPUSH
35440: LD_VAR 0 1
35444: PPUSH
35445: CALL 42846 0 2
35449: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35450: LD_EXP 130
35454: PUSH
35455: LD_VAR 0 5
35459: ARRAY
35460: PUSH
35461: LD_EXP 131
35465: LESS
35466: IFFALSE 35655
// begin for i := 1 to vehicles do
35468: LD_ADDR_VAR 0 4
35472: PUSH
35473: DOUBLE
35474: LD_INT 1
35476: DEC
35477: ST_TO_ADDR
35478: LD_VAR 0 2
35482: PUSH
35483: FOR_TO
35484: IFFALSE 35653
// begin if hackTanksCaptured [ index ] = hackLimit then
35486: LD_EXP 130
35490: PUSH
35491: LD_VAR 0 5
35495: ARRAY
35496: PUSH
35497: LD_EXP 131
35501: EQUAL
35502: IFFALSE 35506
// break ;
35504: GO 35653
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35506: LD_ADDR_EXP 133
35510: PUSH
35511: LD_EXP 133
35515: PPUSH
35516: LD_VAR 0 5
35520: PPUSH
35521: LD_EXP 133
35525: PUSH
35526: LD_VAR 0 5
35530: ARRAY
35531: PUSH
35532: LD_INT 1
35534: PLUS
35535: PPUSH
35536: CALL_OW 1
35540: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35541: LD_ADDR_EXP 130
35545: PUSH
35546: LD_EXP 130
35550: PPUSH
35551: LD_VAR 0 5
35555: PUSH
35556: LD_EXP 130
35560: PUSH
35561: LD_VAR 0 5
35565: ARRAY
35566: PUSH
35567: LD_INT 1
35569: PLUS
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PPUSH
35575: LD_VAR 0 2
35579: PUSH
35580: LD_VAR 0 4
35584: ARRAY
35585: PUSH
35586: LD_VAR 0 2
35590: PUSH
35591: LD_VAR 0 4
35595: ARRAY
35596: PPUSH
35597: CALL_OW 255
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PPUSH
35606: CALL 43061 0 3
35610: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35611: LD_VAR 0 2
35615: PUSH
35616: LD_VAR 0 4
35620: ARRAY
35621: PPUSH
35622: LD_VAR 0 1
35626: PPUSH
35627: CALL_OW 255
35631: PPUSH
35632: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35636: LD_VAR 0 2
35640: PUSH
35641: LD_VAR 0 4
35645: ARRAY
35646: PPUSH
35647: CALL_OW 141
// end ;
35651: GO 35483
35653: POP
35654: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35655: LD_VAR 0 1
35659: PPUSH
35660: LD_EXP 130
35664: PUSH
35665: LD_VAR 0 5
35669: ARRAY
35670: PUSH
35671: LD_INT 0
35673: PLUS
35674: PPUSH
35675: CALL_OW 505
// end ;
35679: LD_VAR 0 3
35683: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35684: LD_INT 0
35686: PPUSH
35687: PPUSH
35688: PPUSH
35689: PPUSH
// if not hack in hackTanks then
35690: LD_VAR 0 1
35694: PUSH
35695: LD_EXP 129
35699: IN
35700: NOT
35701: IFFALSE 35705
// exit ;
35703: GO 35945
// index := GetElementIndex ( hackTanks , hack ) ;
35705: LD_ADDR_VAR 0 4
35709: PUSH
35710: LD_EXP 129
35714: PPUSH
35715: LD_VAR 0 1
35719: PPUSH
35720: CALL 42846 0 2
35724: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35725: LD_ADDR_VAR 0 3
35729: PUSH
35730: DOUBLE
35731: LD_EXP 130
35735: PUSH
35736: LD_VAR 0 4
35740: ARRAY
35741: INC
35742: ST_TO_ADDR
35743: LD_INT 1
35745: PUSH
35746: FOR_DOWNTO
35747: IFFALSE 35919
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35749: LD_ADDR_VAR 0 5
35753: PUSH
35754: LD_EXP 130
35758: PUSH
35759: LD_VAR 0 4
35763: ARRAY
35764: PUSH
35765: LD_VAR 0 3
35769: ARRAY
35770: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35771: LD_VAR 0 5
35775: PUSH
35776: LD_INT 1
35778: ARRAY
35779: PPUSH
35780: CALL_OW 302
35784: NOT
35785: PUSH
35786: LD_VAR 0 5
35790: PUSH
35791: LD_INT 1
35793: ARRAY
35794: PPUSH
35795: CALL_OW 255
35799: PUSH
35800: LD_VAR 0 1
35804: PPUSH
35805: CALL_OW 255
35809: NONEQUAL
35810: OR
35811: IFFALSE 35917
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35813: LD_VAR 0 5
35817: PUSH
35818: LD_INT 1
35820: ARRAY
35821: PPUSH
35822: CALL_OW 305
35826: PUSH
35827: LD_VAR 0 5
35831: PUSH
35832: LD_INT 1
35834: ARRAY
35835: PPUSH
35836: CALL_OW 255
35840: PUSH
35841: LD_VAR 0 1
35845: PPUSH
35846: CALL_OW 255
35850: EQUAL
35851: AND
35852: IFFALSE 35876
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35854: LD_VAR 0 5
35858: PUSH
35859: LD_INT 1
35861: ARRAY
35862: PPUSH
35863: LD_VAR 0 5
35867: PUSH
35868: LD_INT 2
35870: ARRAY
35871: PPUSH
35872: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35876: LD_ADDR_EXP 130
35880: PUSH
35881: LD_EXP 130
35885: PPUSH
35886: LD_VAR 0 4
35890: PPUSH
35891: LD_EXP 130
35895: PUSH
35896: LD_VAR 0 4
35900: ARRAY
35901: PPUSH
35902: LD_VAR 0 3
35906: PPUSH
35907: CALL_OW 3
35911: PPUSH
35912: CALL_OW 1
35916: ST_TO_ADDR
// end ; end ;
35917: GO 35746
35919: POP
35920: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35921: LD_VAR 0 1
35925: PPUSH
35926: LD_EXP 130
35930: PUSH
35931: LD_VAR 0 4
35935: ARRAY
35936: PUSH
35937: LD_INT 0
35939: PLUS
35940: PPUSH
35941: CALL_OW 505
// end ;
35945: LD_VAR 0 2
35949: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35950: LD_INT 0
35952: PPUSH
35953: PPUSH
35954: PPUSH
35955: PPUSH
// if not hack in hackTanks then
35956: LD_VAR 0 1
35960: PUSH
35961: LD_EXP 129
35965: IN
35966: NOT
35967: IFFALSE 35971
// exit ;
35969: GO 36056
// index := GetElementIndex ( hackTanks , hack ) ;
35971: LD_ADDR_VAR 0 5
35975: PUSH
35976: LD_EXP 129
35980: PPUSH
35981: LD_VAR 0 1
35985: PPUSH
35986: CALL 42846 0 2
35990: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35991: LD_ADDR_VAR 0 4
35995: PUSH
35996: DOUBLE
35997: LD_INT 1
35999: DEC
36000: ST_TO_ADDR
36001: LD_EXP 130
36005: PUSH
36006: LD_VAR 0 5
36010: ARRAY
36011: PUSH
36012: FOR_TO
36013: IFFALSE 36054
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36015: LD_EXP 130
36019: PUSH
36020: LD_VAR 0 5
36024: ARRAY
36025: PUSH
36026: LD_VAR 0 4
36030: ARRAY
36031: PUSH
36032: LD_INT 1
36034: ARRAY
36035: PUSH
36036: LD_VAR 0 2
36040: EQUAL
36041: IFFALSE 36052
// KillUnit ( vehicle ) ;
36043: LD_VAR 0 2
36047: PPUSH
36048: CALL_OW 66
36052: GO 36012
36054: POP
36055: POP
// end ;
36056: LD_VAR 0 3
36060: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36061: LD_EXP 134
36065: NOT
36066: IFFALSE 36101
36068: GO 36070
36070: DISABLE
// begin initMiner := true ;
36071: LD_ADDR_EXP 134
36075: PUSH
36076: LD_INT 1
36078: ST_TO_ADDR
// minersList := [ ] ;
36079: LD_ADDR_EXP 135
36083: PUSH
36084: EMPTY
36085: ST_TO_ADDR
// minerMinesList := [ ] ;
36086: LD_ADDR_EXP 136
36090: PUSH
36091: EMPTY
36092: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36093: LD_ADDR_EXP 137
36097: PUSH
36098: LD_INT 5
36100: ST_TO_ADDR
// end ;
36101: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36102: LD_EXP 134
36106: PUSH
36107: LD_INT 34
36109: PUSH
36110: LD_EXP 56
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PPUSH
36119: CALL_OW 69
36123: AND
36124: IFFALSE 36587
36126: GO 36128
36128: DISABLE
36129: LD_INT 0
36131: PPUSH
36132: PPUSH
36133: PPUSH
36134: PPUSH
// begin enable ;
36135: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36136: LD_ADDR_VAR 0 1
36140: PUSH
36141: LD_INT 34
36143: PUSH
36144: LD_EXP 56
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PPUSH
36153: CALL_OW 69
36157: PUSH
36158: FOR_IN
36159: IFFALSE 36231
// begin if not i in minersList then
36161: LD_VAR 0 1
36165: PUSH
36166: LD_EXP 135
36170: IN
36171: NOT
36172: IFFALSE 36229
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36174: LD_ADDR_EXP 135
36178: PUSH
36179: LD_EXP 135
36183: PPUSH
36184: LD_EXP 135
36188: PUSH
36189: LD_INT 1
36191: PLUS
36192: PPUSH
36193: LD_VAR 0 1
36197: PPUSH
36198: CALL_OW 1
36202: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36203: LD_ADDR_EXP 136
36207: PUSH
36208: LD_EXP 136
36212: PPUSH
36213: LD_EXP 136
36217: PUSH
36218: LD_INT 1
36220: PLUS
36221: PPUSH
36222: EMPTY
36223: PPUSH
36224: CALL_OW 1
36228: ST_TO_ADDR
// end end ;
36229: GO 36158
36231: POP
36232: POP
// for i := minerMinesList downto 1 do
36233: LD_ADDR_VAR 0 1
36237: PUSH
36238: DOUBLE
36239: LD_EXP 136
36243: INC
36244: ST_TO_ADDR
36245: LD_INT 1
36247: PUSH
36248: FOR_DOWNTO
36249: IFFALSE 36585
// begin if IsLive ( minersList [ i ] ) then
36251: LD_EXP 135
36255: PUSH
36256: LD_VAR 0 1
36260: ARRAY
36261: PPUSH
36262: CALL_OW 300
36266: IFFALSE 36294
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36268: LD_EXP 135
36272: PUSH
36273: LD_VAR 0 1
36277: ARRAY
36278: PPUSH
36279: LD_EXP 136
36283: PUSH
36284: LD_VAR 0 1
36288: ARRAY
36289: PPUSH
36290: CALL_OW 505
// if not minerMinesList [ i ] then
36294: LD_EXP 136
36298: PUSH
36299: LD_VAR 0 1
36303: ARRAY
36304: NOT
36305: IFFALSE 36309
// continue ;
36307: GO 36248
// for j := minerMinesList [ i ] downto 1 do
36309: LD_ADDR_VAR 0 2
36313: PUSH
36314: DOUBLE
36315: LD_EXP 136
36319: PUSH
36320: LD_VAR 0 1
36324: ARRAY
36325: INC
36326: ST_TO_ADDR
36327: LD_INT 1
36329: PUSH
36330: FOR_DOWNTO
36331: IFFALSE 36581
// begin side := GetSide ( minersList [ i ] ) ;
36333: LD_ADDR_VAR 0 3
36337: PUSH
36338: LD_EXP 135
36342: PUSH
36343: LD_VAR 0 1
36347: ARRAY
36348: PPUSH
36349: CALL_OW 255
36353: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36354: LD_ADDR_VAR 0 4
36358: PUSH
36359: LD_EXP 136
36363: PUSH
36364: LD_VAR 0 1
36368: ARRAY
36369: PUSH
36370: LD_VAR 0 2
36374: ARRAY
36375: PUSH
36376: LD_INT 1
36378: ARRAY
36379: PPUSH
36380: LD_EXP 136
36384: PUSH
36385: LD_VAR 0 1
36389: ARRAY
36390: PUSH
36391: LD_VAR 0 2
36395: ARRAY
36396: PUSH
36397: LD_INT 2
36399: ARRAY
36400: PPUSH
36401: CALL_OW 428
36405: ST_TO_ADDR
// if not tmp then
36406: LD_VAR 0 4
36410: NOT
36411: IFFALSE 36415
// continue ;
36413: GO 36330
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36415: LD_VAR 0 4
36419: PUSH
36420: LD_INT 81
36422: PUSH
36423: LD_VAR 0 3
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PPUSH
36432: CALL_OW 69
36436: IN
36437: PUSH
36438: LD_EXP 136
36442: PUSH
36443: LD_VAR 0 1
36447: ARRAY
36448: PUSH
36449: LD_VAR 0 2
36453: ARRAY
36454: PUSH
36455: LD_INT 1
36457: ARRAY
36458: PPUSH
36459: LD_EXP 136
36463: PUSH
36464: LD_VAR 0 1
36468: ARRAY
36469: PUSH
36470: LD_VAR 0 2
36474: ARRAY
36475: PUSH
36476: LD_INT 2
36478: ARRAY
36479: PPUSH
36480: CALL_OW 458
36484: AND
36485: IFFALSE 36579
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36487: LD_EXP 136
36491: PUSH
36492: LD_VAR 0 1
36496: ARRAY
36497: PUSH
36498: LD_VAR 0 2
36502: ARRAY
36503: PUSH
36504: LD_INT 1
36506: ARRAY
36507: PPUSH
36508: LD_EXP 136
36512: PUSH
36513: LD_VAR 0 1
36517: ARRAY
36518: PUSH
36519: LD_VAR 0 2
36523: ARRAY
36524: PUSH
36525: LD_INT 2
36527: ARRAY
36528: PPUSH
36529: LD_VAR 0 3
36533: PPUSH
36534: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36538: LD_ADDR_EXP 136
36542: PUSH
36543: LD_EXP 136
36547: PPUSH
36548: LD_VAR 0 1
36552: PPUSH
36553: LD_EXP 136
36557: PUSH
36558: LD_VAR 0 1
36562: ARRAY
36563: PPUSH
36564: LD_VAR 0 2
36568: PPUSH
36569: CALL_OW 3
36573: PPUSH
36574: CALL_OW 1
36578: ST_TO_ADDR
// end ; end ;
36579: GO 36330
36581: POP
36582: POP
// end ;
36583: GO 36248
36585: POP
36586: POP
// end ;
36587: PPOPN 4
36589: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36590: LD_INT 0
36592: PPUSH
36593: PPUSH
// result := false ;
36594: LD_ADDR_VAR 0 4
36598: PUSH
36599: LD_INT 0
36601: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36602: LD_VAR 0 1
36606: PPUSH
36607: CALL_OW 264
36611: PUSH
36612: LD_EXP 56
36616: EQUAL
36617: NOT
36618: IFFALSE 36622
// exit ;
36620: GO 36862
// index := GetElementIndex ( minersList , unit ) ;
36622: LD_ADDR_VAR 0 5
36626: PUSH
36627: LD_EXP 135
36631: PPUSH
36632: LD_VAR 0 1
36636: PPUSH
36637: CALL 42846 0 2
36641: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36642: LD_EXP 136
36646: PUSH
36647: LD_VAR 0 5
36651: ARRAY
36652: PUSH
36653: LD_EXP 137
36657: GREATEREQUAL
36658: IFFALSE 36662
// exit ;
36660: GO 36862
// ComMoveXY ( unit , x , y ) ;
36662: LD_VAR 0 1
36666: PPUSH
36667: LD_VAR 0 2
36671: PPUSH
36672: LD_VAR 0 3
36676: PPUSH
36677: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36681: LD_INT 35
36683: PPUSH
36684: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36688: LD_VAR 0 1
36692: PPUSH
36693: LD_VAR 0 2
36697: PPUSH
36698: LD_VAR 0 3
36702: PPUSH
36703: CALL 73618 0 3
36707: NOT
36708: PUSH
36709: LD_VAR 0 1
36713: PPUSH
36714: CALL_OW 314
36718: AND
36719: IFFALSE 36723
// exit ;
36721: GO 36862
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36723: LD_VAR 0 2
36727: PPUSH
36728: LD_VAR 0 3
36732: PPUSH
36733: CALL_OW 428
36737: PUSH
36738: LD_VAR 0 1
36742: EQUAL
36743: PUSH
36744: LD_VAR 0 1
36748: PPUSH
36749: CALL_OW 314
36753: NOT
36754: AND
36755: IFFALSE 36681
// PlaySoundXY ( x , y , PlantMine ) ;
36757: LD_VAR 0 2
36761: PPUSH
36762: LD_VAR 0 3
36766: PPUSH
36767: LD_STRING PlantMine
36769: PPUSH
36770: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36774: LD_VAR 0 2
36778: PPUSH
36779: LD_VAR 0 3
36783: PPUSH
36784: LD_VAR 0 1
36788: PPUSH
36789: CALL_OW 255
36793: PPUSH
36794: LD_INT 0
36796: PPUSH
36797: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36801: LD_ADDR_EXP 136
36805: PUSH
36806: LD_EXP 136
36810: PPUSH
36811: LD_VAR 0 5
36815: PUSH
36816: LD_EXP 136
36820: PUSH
36821: LD_VAR 0 5
36825: ARRAY
36826: PUSH
36827: LD_INT 1
36829: PLUS
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PPUSH
36835: LD_VAR 0 2
36839: PUSH
36840: LD_VAR 0 3
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PPUSH
36849: CALL 43061 0 3
36853: ST_TO_ADDR
// result := true ;
36854: LD_ADDR_VAR 0 4
36858: PUSH
36859: LD_INT 1
36861: ST_TO_ADDR
// end ;
36862: LD_VAR 0 4
36866: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36867: LD_INT 0
36869: PPUSH
36870: PPUSH
36871: PPUSH
// if not unit in minersList then
36872: LD_VAR 0 1
36876: PUSH
36877: LD_EXP 135
36881: IN
36882: NOT
36883: IFFALSE 36887
// exit ;
36885: GO 37279
// index := GetElementIndex ( minersList , unit ) ;
36887: LD_ADDR_VAR 0 6
36891: PUSH
36892: LD_EXP 135
36896: PPUSH
36897: LD_VAR 0 1
36901: PPUSH
36902: CALL 42846 0 2
36906: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36907: LD_ADDR_VAR 0 5
36911: PUSH
36912: DOUBLE
36913: LD_EXP 136
36917: PUSH
36918: LD_VAR 0 6
36922: ARRAY
36923: INC
36924: ST_TO_ADDR
36925: LD_INT 1
36927: PUSH
36928: FOR_DOWNTO
36929: IFFALSE 37090
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36931: LD_EXP 136
36935: PUSH
36936: LD_VAR 0 6
36940: ARRAY
36941: PUSH
36942: LD_VAR 0 5
36946: ARRAY
36947: PUSH
36948: LD_INT 1
36950: ARRAY
36951: PUSH
36952: LD_VAR 0 2
36956: EQUAL
36957: PUSH
36958: LD_EXP 136
36962: PUSH
36963: LD_VAR 0 6
36967: ARRAY
36968: PUSH
36969: LD_VAR 0 5
36973: ARRAY
36974: PUSH
36975: LD_INT 2
36977: ARRAY
36978: PUSH
36979: LD_VAR 0 3
36983: EQUAL
36984: AND
36985: IFFALSE 37088
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36987: LD_EXP 136
36991: PUSH
36992: LD_VAR 0 6
36996: ARRAY
36997: PUSH
36998: LD_VAR 0 5
37002: ARRAY
37003: PUSH
37004: LD_INT 1
37006: ARRAY
37007: PPUSH
37008: LD_EXP 136
37012: PUSH
37013: LD_VAR 0 6
37017: ARRAY
37018: PUSH
37019: LD_VAR 0 5
37023: ARRAY
37024: PUSH
37025: LD_INT 2
37027: ARRAY
37028: PPUSH
37029: LD_VAR 0 1
37033: PPUSH
37034: CALL_OW 255
37038: PPUSH
37039: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37043: LD_ADDR_EXP 136
37047: PUSH
37048: LD_EXP 136
37052: PPUSH
37053: LD_VAR 0 6
37057: PPUSH
37058: LD_EXP 136
37062: PUSH
37063: LD_VAR 0 6
37067: ARRAY
37068: PPUSH
37069: LD_VAR 0 5
37073: PPUSH
37074: CALL_OW 3
37078: PPUSH
37079: CALL_OW 1
37083: ST_TO_ADDR
// exit ;
37084: POP
37085: POP
37086: GO 37279
// end ; end ;
37088: GO 36928
37090: POP
37091: POP
// for i := minerMinesList [ index ] downto 1 do
37092: LD_ADDR_VAR 0 5
37096: PUSH
37097: DOUBLE
37098: LD_EXP 136
37102: PUSH
37103: LD_VAR 0 6
37107: ARRAY
37108: INC
37109: ST_TO_ADDR
37110: LD_INT 1
37112: PUSH
37113: FOR_DOWNTO
37114: IFFALSE 37277
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37116: LD_EXP 136
37120: PUSH
37121: LD_VAR 0 6
37125: ARRAY
37126: PUSH
37127: LD_VAR 0 5
37131: ARRAY
37132: PUSH
37133: LD_INT 1
37135: ARRAY
37136: PPUSH
37137: LD_EXP 136
37141: PUSH
37142: LD_VAR 0 6
37146: ARRAY
37147: PUSH
37148: LD_VAR 0 5
37152: ARRAY
37153: PUSH
37154: LD_INT 2
37156: ARRAY
37157: PPUSH
37158: LD_VAR 0 2
37162: PPUSH
37163: LD_VAR 0 3
37167: PPUSH
37168: CALL_OW 298
37172: PUSH
37173: LD_INT 6
37175: LESS
37176: IFFALSE 37275
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37178: LD_EXP 136
37182: PUSH
37183: LD_VAR 0 6
37187: ARRAY
37188: PUSH
37189: LD_VAR 0 5
37193: ARRAY
37194: PUSH
37195: LD_INT 1
37197: ARRAY
37198: PPUSH
37199: LD_EXP 136
37203: PUSH
37204: LD_VAR 0 6
37208: ARRAY
37209: PUSH
37210: LD_VAR 0 5
37214: ARRAY
37215: PUSH
37216: LD_INT 2
37218: ARRAY
37219: PPUSH
37220: LD_VAR 0 1
37224: PPUSH
37225: CALL_OW 255
37229: PPUSH
37230: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37234: LD_ADDR_EXP 136
37238: PUSH
37239: LD_EXP 136
37243: PPUSH
37244: LD_VAR 0 6
37248: PPUSH
37249: LD_EXP 136
37253: PUSH
37254: LD_VAR 0 6
37258: ARRAY
37259: PPUSH
37260: LD_VAR 0 5
37264: PPUSH
37265: CALL_OW 3
37269: PPUSH
37270: CALL_OW 1
37274: ST_TO_ADDR
// end ; end ;
37275: GO 37113
37277: POP
37278: POP
// end ;
37279: LD_VAR 0 4
37283: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37284: LD_INT 0
37286: PPUSH
37287: PPUSH
37288: PPUSH
37289: PPUSH
37290: PPUSH
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37295: LD_VAR 0 1
37299: PPUSH
37300: CALL_OW 264
37304: PUSH
37305: LD_EXP 56
37309: EQUAL
37310: NOT
37311: PUSH
37312: LD_VAR 0 1
37316: PUSH
37317: LD_EXP 135
37321: IN
37322: NOT
37323: OR
37324: IFFALSE 37328
// exit ;
37326: GO 37650
// index := GetElementIndex ( minersList , unit ) ;
37328: LD_ADDR_VAR 0 6
37332: PUSH
37333: LD_EXP 135
37337: PPUSH
37338: LD_VAR 0 1
37342: PPUSH
37343: CALL 42846 0 2
37347: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37348: LD_ADDR_VAR 0 8
37352: PUSH
37353: LD_EXP 137
37357: PUSH
37358: LD_EXP 136
37362: PUSH
37363: LD_VAR 0 6
37367: ARRAY
37368: MINUS
37369: ST_TO_ADDR
// if not minesFreeAmount then
37370: LD_VAR 0 8
37374: NOT
37375: IFFALSE 37379
// exit ;
37377: GO 37650
// tmp := [ ] ;
37379: LD_ADDR_VAR 0 7
37383: PUSH
37384: EMPTY
37385: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37386: LD_ADDR_VAR 0 5
37390: PUSH
37391: DOUBLE
37392: LD_INT 1
37394: DEC
37395: ST_TO_ADDR
37396: LD_VAR 0 8
37400: PUSH
37401: FOR_TO
37402: IFFALSE 37597
// begin _d := rand ( 0 , 5 ) ;
37404: LD_ADDR_VAR 0 11
37408: PUSH
37409: LD_INT 0
37411: PPUSH
37412: LD_INT 5
37414: PPUSH
37415: CALL_OW 12
37419: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37420: LD_ADDR_VAR 0 12
37424: PUSH
37425: LD_INT 2
37427: PPUSH
37428: LD_INT 6
37430: PPUSH
37431: CALL_OW 12
37435: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37436: LD_ADDR_VAR 0 9
37440: PUSH
37441: LD_VAR 0 2
37445: PPUSH
37446: LD_VAR 0 11
37450: PPUSH
37451: LD_VAR 0 12
37455: PPUSH
37456: CALL_OW 272
37460: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37461: LD_ADDR_VAR 0 10
37465: PUSH
37466: LD_VAR 0 3
37470: PPUSH
37471: LD_VAR 0 11
37475: PPUSH
37476: LD_VAR 0 12
37480: PPUSH
37481: CALL_OW 273
37485: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37486: LD_VAR 0 9
37490: PPUSH
37491: LD_VAR 0 10
37495: PPUSH
37496: CALL_OW 488
37500: PUSH
37501: LD_VAR 0 9
37505: PUSH
37506: LD_VAR 0 10
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_VAR 0 7
37519: IN
37520: NOT
37521: AND
37522: PUSH
37523: LD_VAR 0 9
37527: PPUSH
37528: LD_VAR 0 10
37532: PPUSH
37533: CALL_OW 458
37537: NOT
37538: AND
37539: IFFALSE 37581
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37541: LD_ADDR_VAR 0 7
37545: PUSH
37546: LD_VAR 0 7
37550: PPUSH
37551: LD_VAR 0 7
37555: PUSH
37556: LD_INT 1
37558: PLUS
37559: PPUSH
37560: LD_VAR 0 9
37564: PUSH
37565: LD_VAR 0 10
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PPUSH
37574: CALL_OW 1
37578: ST_TO_ADDR
37579: GO 37595
// i := i - 1 ;
37581: LD_ADDR_VAR 0 5
37585: PUSH
37586: LD_VAR 0 5
37590: PUSH
37591: LD_INT 1
37593: MINUS
37594: ST_TO_ADDR
// end ;
37595: GO 37401
37597: POP
37598: POP
// for i in tmp do
37599: LD_ADDR_VAR 0 5
37603: PUSH
37604: LD_VAR 0 7
37608: PUSH
37609: FOR_IN
37610: IFFALSE 37648
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37612: LD_VAR 0 1
37616: PPUSH
37617: LD_VAR 0 5
37621: PUSH
37622: LD_INT 1
37624: ARRAY
37625: PPUSH
37626: LD_VAR 0 5
37630: PUSH
37631: LD_INT 2
37633: ARRAY
37634: PPUSH
37635: CALL 36590 0 3
37639: NOT
37640: IFFALSE 37646
// exit ;
37642: POP
37643: POP
37644: GO 37650
37646: GO 37609
37648: POP
37649: POP
// end ;
37650: LD_VAR 0 4
37654: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37655: LD_INT 0
37657: PPUSH
37658: PPUSH
37659: PPUSH
37660: PPUSH
37661: PPUSH
37662: PPUSH
37663: PPUSH
// if not GetClass ( unit ) = class_sniper then
37664: LD_VAR 0 1
37668: PPUSH
37669: CALL_OW 257
37673: PUSH
37674: LD_INT 5
37676: EQUAL
37677: NOT
37678: IFFALSE 37682
// exit ;
37680: GO 38070
// dist := 8 ;
37682: LD_ADDR_VAR 0 5
37686: PUSH
37687: LD_INT 8
37689: ST_TO_ADDR
// viewRange := 12 ;
37690: LD_ADDR_VAR 0 7
37694: PUSH
37695: LD_INT 12
37697: ST_TO_ADDR
// side := GetSide ( unit ) ;
37698: LD_ADDR_VAR 0 6
37702: PUSH
37703: LD_VAR 0 1
37707: PPUSH
37708: CALL_OW 255
37712: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37713: LD_INT 61
37715: PPUSH
37716: LD_VAR 0 6
37720: PPUSH
37721: CALL_OW 321
37725: PUSH
37726: LD_INT 2
37728: EQUAL
37729: IFFALSE 37739
// viewRange := 16 ;
37731: LD_ADDR_VAR 0 7
37735: PUSH
37736: LD_INT 16
37738: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37739: LD_VAR 0 1
37743: PPUSH
37744: LD_VAR 0 2
37748: PPUSH
37749: LD_VAR 0 3
37753: PPUSH
37754: CALL_OW 297
37758: PUSH
37759: LD_VAR 0 5
37763: GREATER
37764: IFFALSE 37843
// begin ComMoveXY ( unit , x , y ) ;
37766: LD_VAR 0 1
37770: PPUSH
37771: LD_VAR 0 2
37775: PPUSH
37776: LD_VAR 0 3
37780: PPUSH
37781: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37785: LD_INT 35
37787: PPUSH
37788: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37792: LD_VAR 0 1
37796: PPUSH
37797: LD_VAR 0 2
37801: PPUSH
37802: LD_VAR 0 3
37806: PPUSH
37807: CALL 73618 0 3
37811: NOT
37812: IFFALSE 37816
// exit ;
37814: GO 38070
// until GetDistUnitXY ( unit , x , y ) < dist ;
37816: LD_VAR 0 1
37820: PPUSH
37821: LD_VAR 0 2
37825: PPUSH
37826: LD_VAR 0 3
37830: PPUSH
37831: CALL_OW 297
37835: PUSH
37836: LD_VAR 0 5
37840: LESS
37841: IFFALSE 37785
// end ; ComTurnXY ( unit , x , y ) ;
37843: LD_VAR 0 1
37847: PPUSH
37848: LD_VAR 0 2
37852: PPUSH
37853: LD_VAR 0 3
37857: PPUSH
37858: CALL_OW 118
// wait ( 5 ) ;
37862: LD_INT 5
37864: PPUSH
37865: CALL_OW 67
// _d := GetDir ( unit ) ;
37869: LD_ADDR_VAR 0 10
37873: PUSH
37874: LD_VAR 0 1
37878: PPUSH
37879: CALL_OW 254
37883: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37884: LD_ADDR_VAR 0 8
37888: PUSH
37889: LD_VAR 0 1
37893: PPUSH
37894: CALL_OW 250
37898: PPUSH
37899: LD_VAR 0 10
37903: PPUSH
37904: LD_VAR 0 5
37908: PPUSH
37909: CALL_OW 272
37913: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37914: LD_ADDR_VAR 0 9
37918: PUSH
37919: LD_VAR 0 1
37923: PPUSH
37924: CALL_OW 251
37928: PPUSH
37929: LD_VAR 0 10
37933: PPUSH
37934: LD_VAR 0 5
37938: PPUSH
37939: CALL_OW 273
37943: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37944: LD_VAR 0 8
37948: PPUSH
37949: LD_VAR 0 9
37953: PPUSH
37954: CALL_OW 488
37958: NOT
37959: IFFALSE 37963
// exit ;
37961: GO 38070
// ComAnimCustom ( unit , 1 ) ;
37963: LD_VAR 0 1
37967: PPUSH
37968: LD_INT 1
37970: PPUSH
37971: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37975: LD_VAR 0 8
37979: PPUSH
37980: LD_VAR 0 9
37984: PPUSH
37985: LD_VAR 0 6
37989: PPUSH
37990: LD_VAR 0 7
37994: PPUSH
37995: CALL_OW 330
// repeat wait ( 1 ) ;
37999: LD_INT 1
38001: PPUSH
38002: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38006: LD_VAR 0 1
38010: PPUSH
38011: CALL_OW 316
38015: PUSH
38016: LD_VAR 0 1
38020: PPUSH
38021: CALL_OW 314
38025: OR
38026: PUSH
38027: LD_VAR 0 1
38031: PPUSH
38032: CALL_OW 302
38036: NOT
38037: OR
38038: PUSH
38039: LD_VAR 0 1
38043: PPUSH
38044: CALL_OW 301
38048: OR
38049: IFFALSE 37999
// RemoveSeeing ( _x , _y , side ) ;
38051: LD_VAR 0 8
38055: PPUSH
38056: LD_VAR 0 9
38060: PPUSH
38061: LD_VAR 0 6
38065: PPUSH
38066: CALL_OW 331
// end ; end_of_file
38070: LD_VAR 0 4
38074: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38075: LD_INT 0
38077: PPUSH
38078: PPUSH
// if exist_mode then
38079: LD_VAR 0 2
38083: IFFALSE 38108
// unit := CreateCharacter ( prefix & ident ) else
38085: LD_ADDR_VAR 0 5
38089: PUSH
38090: LD_VAR 0 3
38094: PUSH
38095: LD_VAR 0 1
38099: STR
38100: PPUSH
38101: CALL_OW 34
38105: ST_TO_ADDR
38106: GO 38123
// unit := NewCharacter ( ident ) ;
38108: LD_ADDR_VAR 0 5
38112: PUSH
38113: LD_VAR 0 1
38117: PPUSH
38118: CALL_OW 25
38122: ST_TO_ADDR
// result := unit ;
38123: LD_ADDR_VAR 0 4
38127: PUSH
38128: LD_VAR 0 5
38132: ST_TO_ADDR
// end ;
38133: LD_VAR 0 4
38137: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38138: LD_INT 0
38140: PPUSH
38141: PPUSH
// if not side or not nation then
38142: LD_VAR 0 1
38146: NOT
38147: PUSH
38148: LD_VAR 0 2
38152: NOT
38153: OR
38154: IFFALSE 38158
// exit ;
38156: GO 38926
// case nation of nation_american :
38158: LD_VAR 0 2
38162: PUSH
38163: LD_INT 1
38165: DOUBLE
38166: EQUAL
38167: IFTRUE 38171
38169: GO 38385
38171: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38172: LD_ADDR_VAR 0 4
38176: PUSH
38177: LD_INT 35
38179: PUSH
38180: LD_INT 45
38182: PUSH
38183: LD_INT 46
38185: PUSH
38186: LD_INT 47
38188: PUSH
38189: LD_INT 82
38191: PUSH
38192: LD_INT 83
38194: PUSH
38195: LD_INT 84
38197: PUSH
38198: LD_INT 85
38200: PUSH
38201: LD_INT 86
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: LD_INT 6
38212: PUSH
38213: LD_INT 15
38215: PUSH
38216: LD_INT 16
38218: PUSH
38219: LD_INT 7
38221: PUSH
38222: LD_INT 12
38224: PUSH
38225: LD_INT 13
38227: PUSH
38228: LD_INT 10
38230: PUSH
38231: LD_INT 14
38233: PUSH
38234: LD_INT 20
38236: PUSH
38237: LD_INT 21
38239: PUSH
38240: LD_INT 22
38242: PUSH
38243: LD_INT 25
38245: PUSH
38246: LD_INT 32
38248: PUSH
38249: LD_INT 27
38251: PUSH
38252: LD_INT 36
38254: PUSH
38255: LD_INT 69
38257: PUSH
38258: LD_INT 39
38260: PUSH
38261: LD_INT 34
38263: PUSH
38264: LD_INT 40
38266: PUSH
38267: LD_INT 48
38269: PUSH
38270: LD_INT 49
38272: PUSH
38273: LD_INT 50
38275: PUSH
38276: LD_INT 51
38278: PUSH
38279: LD_INT 52
38281: PUSH
38282: LD_INT 53
38284: PUSH
38285: LD_INT 54
38287: PUSH
38288: LD_INT 55
38290: PUSH
38291: LD_INT 56
38293: PUSH
38294: LD_INT 57
38296: PUSH
38297: LD_INT 58
38299: PUSH
38300: LD_INT 59
38302: PUSH
38303: LD_INT 60
38305: PUSH
38306: LD_INT 61
38308: PUSH
38309: LD_INT 62
38311: PUSH
38312: LD_INT 80
38314: PUSH
38315: LD_INT 82
38317: PUSH
38318: LD_INT 83
38320: PUSH
38321: LD_INT 84
38323: PUSH
38324: LD_INT 85
38326: PUSH
38327: LD_INT 86
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: ST_TO_ADDR
38383: GO 38850
38385: LD_INT 2
38387: DOUBLE
38388: EQUAL
38389: IFTRUE 38393
38391: GO 38619
38393: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38394: LD_ADDR_VAR 0 4
38398: PUSH
38399: LD_INT 35
38401: PUSH
38402: LD_INT 45
38404: PUSH
38405: LD_INT 46
38407: PUSH
38408: LD_INT 47
38410: PUSH
38411: LD_INT 82
38413: PUSH
38414: LD_INT 83
38416: PUSH
38417: LD_INT 84
38419: PUSH
38420: LD_INT 85
38422: PUSH
38423: LD_INT 87
38425: PUSH
38426: LD_INT 70
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 11
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: LD_INT 4
38440: PUSH
38441: LD_INT 5
38443: PUSH
38444: LD_INT 6
38446: PUSH
38447: LD_INT 15
38449: PUSH
38450: LD_INT 18
38452: PUSH
38453: LD_INT 7
38455: PUSH
38456: LD_INT 17
38458: PUSH
38459: LD_INT 8
38461: PUSH
38462: LD_INT 20
38464: PUSH
38465: LD_INT 21
38467: PUSH
38468: LD_INT 22
38470: PUSH
38471: LD_INT 72
38473: PUSH
38474: LD_INT 26
38476: PUSH
38477: LD_INT 69
38479: PUSH
38480: LD_INT 39
38482: PUSH
38483: LD_INT 40
38485: PUSH
38486: LD_INT 41
38488: PUSH
38489: LD_INT 42
38491: PUSH
38492: LD_INT 43
38494: PUSH
38495: LD_INT 48
38497: PUSH
38498: LD_INT 49
38500: PUSH
38501: LD_INT 50
38503: PUSH
38504: LD_INT 51
38506: PUSH
38507: LD_INT 52
38509: PUSH
38510: LD_INT 53
38512: PUSH
38513: LD_INT 54
38515: PUSH
38516: LD_INT 55
38518: PUSH
38519: LD_INT 56
38521: PUSH
38522: LD_INT 60
38524: PUSH
38525: LD_INT 61
38527: PUSH
38528: LD_INT 62
38530: PUSH
38531: LD_INT 66
38533: PUSH
38534: LD_INT 67
38536: PUSH
38537: LD_INT 68
38539: PUSH
38540: LD_INT 81
38542: PUSH
38543: LD_INT 82
38545: PUSH
38546: LD_INT 83
38548: PUSH
38549: LD_INT 84
38551: PUSH
38552: LD_INT 85
38554: PUSH
38555: LD_INT 87
38557: PUSH
38558: LD_INT 88
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: ST_TO_ADDR
38617: GO 38850
38619: LD_INT 3
38621: DOUBLE
38622: EQUAL
38623: IFTRUE 38627
38625: GO 38849
38627: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38628: LD_ADDR_VAR 0 4
38632: PUSH
38633: LD_INT 46
38635: PUSH
38636: LD_INT 47
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: LD_INT 82
38647: PUSH
38648: LD_INT 83
38650: PUSH
38651: LD_INT 84
38653: PUSH
38654: LD_INT 85
38656: PUSH
38657: LD_INT 86
38659: PUSH
38660: LD_INT 11
38662: PUSH
38663: LD_INT 9
38665: PUSH
38666: LD_INT 20
38668: PUSH
38669: LD_INT 19
38671: PUSH
38672: LD_INT 21
38674: PUSH
38675: LD_INT 24
38677: PUSH
38678: LD_INT 22
38680: PUSH
38681: LD_INT 25
38683: PUSH
38684: LD_INT 28
38686: PUSH
38687: LD_INT 29
38689: PUSH
38690: LD_INT 30
38692: PUSH
38693: LD_INT 31
38695: PUSH
38696: LD_INT 37
38698: PUSH
38699: LD_INT 38
38701: PUSH
38702: LD_INT 32
38704: PUSH
38705: LD_INT 27
38707: PUSH
38708: LD_INT 33
38710: PUSH
38711: LD_INT 69
38713: PUSH
38714: LD_INT 39
38716: PUSH
38717: LD_INT 34
38719: PUSH
38720: LD_INT 40
38722: PUSH
38723: LD_INT 71
38725: PUSH
38726: LD_INT 23
38728: PUSH
38729: LD_INT 44
38731: PUSH
38732: LD_INT 48
38734: PUSH
38735: LD_INT 49
38737: PUSH
38738: LD_INT 50
38740: PUSH
38741: LD_INT 51
38743: PUSH
38744: LD_INT 52
38746: PUSH
38747: LD_INT 53
38749: PUSH
38750: LD_INT 54
38752: PUSH
38753: LD_INT 55
38755: PUSH
38756: LD_INT 56
38758: PUSH
38759: LD_INT 57
38761: PUSH
38762: LD_INT 58
38764: PUSH
38765: LD_INT 59
38767: PUSH
38768: LD_INT 63
38770: PUSH
38771: LD_INT 64
38773: PUSH
38774: LD_INT 65
38776: PUSH
38777: LD_INT 82
38779: PUSH
38780: LD_INT 83
38782: PUSH
38783: LD_INT 84
38785: PUSH
38786: LD_INT 85
38788: PUSH
38789: LD_INT 86
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: ST_TO_ADDR
38847: GO 38850
38849: POP
// if state > - 1 and state < 3 then
38850: LD_VAR 0 3
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: GREATER
38859: PUSH
38860: LD_VAR 0 3
38864: PUSH
38865: LD_INT 3
38867: LESS
38868: AND
38869: IFFALSE 38926
// for i in result do
38871: LD_ADDR_VAR 0 5
38875: PUSH
38876: LD_VAR 0 4
38880: PUSH
38881: FOR_IN
38882: IFFALSE 38924
// if GetTech ( i , side ) <> state then
38884: LD_VAR 0 5
38888: PPUSH
38889: LD_VAR 0 1
38893: PPUSH
38894: CALL_OW 321
38898: PUSH
38899: LD_VAR 0 3
38903: NONEQUAL
38904: IFFALSE 38922
// result := result diff i ;
38906: LD_ADDR_VAR 0 4
38910: PUSH
38911: LD_VAR 0 4
38915: PUSH
38916: LD_VAR 0 5
38920: DIFF
38921: ST_TO_ADDR
38922: GO 38881
38924: POP
38925: POP
// end ;
38926: LD_VAR 0 4
38930: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38931: LD_INT 0
38933: PPUSH
38934: PPUSH
38935: PPUSH
// result := true ;
38936: LD_ADDR_VAR 0 3
38940: PUSH
38941: LD_INT 1
38943: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38944: LD_ADDR_VAR 0 5
38948: PUSH
38949: LD_VAR 0 2
38953: PPUSH
38954: CALL_OW 480
38958: ST_TO_ADDR
// if not tmp then
38959: LD_VAR 0 5
38963: NOT
38964: IFFALSE 38968
// exit ;
38966: GO 39017
// for i in tmp do
38968: LD_ADDR_VAR 0 4
38972: PUSH
38973: LD_VAR 0 5
38977: PUSH
38978: FOR_IN
38979: IFFALSE 39015
// if GetTech ( i , side ) <> state_researched then
38981: LD_VAR 0 4
38985: PPUSH
38986: LD_VAR 0 1
38990: PPUSH
38991: CALL_OW 321
38995: PUSH
38996: LD_INT 2
38998: NONEQUAL
38999: IFFALSE 39013
// begin result := false ;
39001: LD_ADDR_VAR 0 3
39005: PUSH
39006: LD_INT 0
39008: ST_TO_ADDR
// exit ;
39009: POP
39010: POP
39011: GO 39017
// end ;
39013: GO 38978
39015: POP
39016: POP
// end ;
39017: LD_VAR 0 3
39021: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39022: LD_INT 0
39024: PPUSH
39025: PPUSH
39026: PPUSH
39027: PPUSH
39028: PPUSH
39029: PPUSH
39030: PPUSH
39031: PPUSH
39032: PPUSH
39033: PPUSH
39034: PPUSH
39035: PPUSH
39036: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39037: LD_VAR 0 1
39041: NOT
39042: PUSH
39043: LD_VAR 0 1
39047: PPUSH
39048: CALL_OW 257
39052: PUSH
39053: LD_INT 9
39055: NONEQUAL
39056: OR
39057: IFFALSE 39061
// exit ;
39059: GO 39634
// side := GetSide ( unit ) ;
39061: LD_ADDR_VAR 0 9
39065: PUSH
39066: LD_VAR 0 1
39070: PPUSH
39071: CALL_OW 255
39075: ST_TO_ADDR
// tech_space := tech_spacanom ;
39076: LD_ADDR_VAR 0 12
39080: PUSH
39081: LD_INT 29
39083: ST_TO_ADDR
// tech_time := tech_taurad ;
39084: LD_ADDR_VAR 0 13
39088: PUSH
39089: LD_INT 28
39091: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39092: LD_ADDR_VAR 0 11
39096: PUSH
39097: LD_VAR 0 1
39101: PPUSH
39102: CALL_OW 310
39106: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39107: LD_VAR 0 11
39111: PPUSH
39112: CALL_OW 247
39116: PUSH
39117: LD_INT 2
39119: EQUAL
39120: IFFALSE 39124
// exit ;
39122: GO 39634
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39124: LD_ADDR_VAR 0 8
39128: PUSH
39129: LD_INT 81
39131: PUSH
39132: LD_VAR 0 9
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 3
39143: PUSH
39144: LD_INT 21
39146: PUSH
39147: LD_INT 3
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PPUSH
39162: CALL_OW 69
39166: ST_TO_ADDR
// if not tmp then
39167: LD_VAR 0 8
39171: NOT
39172: IFFALSE 39176
// exit ;
39174: GO 39634
// if in_unit then
39176: LD_VAR 0 11
39180: IFFALSE 39204
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39182: LD_ADDR_VAR 0 10
39186: PUSH
39187: LD_VAR 0 8
39191: PPUSH
39192: LD_VAR 0 11
39196: PPUSH
39197: CALL_OW 74
39201: ST_TO_ADDR
39202: GO 39224
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39204: LD_ADDR_VAR 0 10
39208: PUSH
39209: LD_VAR 0 8
39213: PPUSH
39214: LD_VAR 0 1
39218: PPUSH
39219: CALL_OW 74
39223: ST_TO_ADDR
// if not enemy then
39224: LD_VAR 0 10
39228: NOT
39229: IFFALSE 39233
// exit ;
39231: GO 39634
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39233: LD_VAR 0 11
39237: PUSH
39238: LD_VAR 0 11
39242: PPUSH
39243: LD_VAR 0 10
39247: PPUSH
39248: CALL_OW 296
39252: PUSH
39253: LD_INT 13
39255: GREATER
39256: AND
39257: PUSH
39258: LD_VAR 0 1
39262: PPUSH
39263: LD_VAR 0 10
39267: PPUSH
39268: CALL_OW 296
39272: PUSH
39273: LD_INT 12
39275: GREATER
39276: OR
39277: IFFALSE 39281
// exit ;
39279: GO 39634
// missile := [ 1 ] ;
39281: LD_ADDR_VAR 0 14
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: EMPTY
39290: LIST
39291: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39292: LD_VAR 0 9
39296: PPUSH
39297: LD_VAR 0 12
39301: PPUSH
39302: CALL_OW 325
39306: IFFALSE 39335
// missile := Insert ( missile , missile + 1 , 2 ) ;
39308: LD_ADDR_VAR 0 14
39312: PUSH
39313: LD_VAR 0 14
39317: PPUSH
39318: LD_VAR 0 14
39322: PUSH
39323: LD_INT 1
39325: PLUS
39326: PPUSH
39327: LD_INT 2
39329: PPUSH
39330: CALL_OW 2
39334: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39335: LD_VAR 0 9
39339: PPUSH
39340: LD_VAR 0 13
39344: PPUSH
39345: CALL_OW 325
39349: PUSH
39350: LD_VAR 0 10
39354: PPUSH
39355: CALL_OW 255
39359: PPUSH
39360: LD_VAR 0 13
39364: PPUSH
39365: CALL_OW 325
39369: NOT
39370: AND
39371: IFFALSE 39400
// missile := Insert ( missile , missile + 1 , 3 ) ;
39373: LD_ADDR_VAR 0 14
39377: PUSH
39378: LD_VAR 0 14
39382: PPUSH
39383: LD_VAR 0 14
39387: PUSH
39388: LD_INT 1
39390: PLUS
39391: PPUSH
39392: LD_INT 3
39394: PPUSH
39395: CALL_OW 2
39399: ST_TO_ADDR
// if missile < 2 then
39400: LD_VAR 0 14
39404: PUSH
39405: LD_INT 2
39407: LESS
39408: IFFALSE 39412
// exit ;
39410: GO 39634
// x := GetX ( enemy ) ;
39412: LD_ADDR_VAR 0 4
39416: PUSH
39417: LD_VAR 0 10
39421: PPUSH
39422: CALL_OW 250
39426: ST_TO_ADDR
// y := GetY ( enemy ) ;
39427: LD_ADDR_VAR 0 5
39431: PUSH
39432: LD_VAR 0 10
39436: PPUSH
39437: CALL_OW 251
39441: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39442: LD_ADDR_VAR 0 6
39446: PUSH
39447: LD_VAR 0 4
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PPUSH
39456: LD_INT 1
39458: PPUSH
39459: CALL_OW 12
39463: PLUS
39464: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39465: LD_ADDR_VAR 0 7
39469: PUSH
39470: LD_VAR 0 5
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PPUSH
39479: LD_INT 1
39481: PPUSH
39482: CALL_OW 12
39486: PLUS
39487: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39488: LD_VAR 0 6
39492: PPUSH
39493: LD_VAR 0 7
39497: PPUSH
39498: CALL_OW 488
39502: NOT
39503: IFFALSE 39525
// begin _x := x ;
39505: LD_ADDR_VAR 0 6
39509: PUSH
39510: LD_VAR 0 4
39514: ST_TO_ADDR
// _y := y ;
39515: LD_ADDR_VAR 0 7
39519: PUSH
39520: LD_VAR 0 5
39524: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39525: LD_ADDR_VAR 0 3
39529: PUSH
39530: LD_INT 1
39532: PPUSH
39533: LD_VAR 0 14
39537: PPUSH
39538: CALL_OW 12
39542: ST_TO_ADDR
// case i of 1 :
39543: LD_VAR 0 3
39547: PUSH
39548: LD_INT 1
39550: DOUBLE
39551: EQUAL
39552: IFTRUE 39556
39554: GO 39573
39556: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39557: LD_VAR 0 1
39561: PPUSH
39562: LD_VAR 0 10
39566: PPUSH
39567: CALL_OW 115
39571: GO 39634
39573: LD_INT 2
39575: DOUBLE
39576: EQUAL
39577: IFTRUE 39581
39579: GO 39603
39581: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39582: LD_VAR 0 1
39586: PPUSH
39587: LD_VAR 0 6
39591: PPUSH
39592: LD_VAR 0 7
39596: PPUSH
39597: CALL_OW 153
39601: GO 39634
39603: LD_INT 3
39605: DOUBLE
39606: EQUAL
39607: IFTRUE 39611
39609: GO 39633
39611: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39612: LD_VAR 0 1
39616: PPUSH
39617: LD_VAR 0 6
39621: PPUSH
39622: LD_VAR 0 7
39626: PPUSH
39627: CALL_OW 154
39631: GO 39634
39633: POP
// end ;
39634: LD_VAR 0 2
39638: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39639: LD_INT 0
39641: PPUSH
39642: PPUSH
39643: PPUSH
39644: PPUSH
39645: PPUSH
39646: PPUSH
// if not unit or not building then
39647: LD_VAR 0 1
39651: NOT
39652: PUSH
39653: LD_VAR 0 2
39657: NOT
39658: OR
39659: IFFALSE 39663
// exit ;
39661: GO 39821
// x := GetX ( building ) ;
39663: LD_ADDR_VAR 0 5
39667: PUSH
39668: LD_VAR 0 2
39672: PPUSH
39673: CALL_OW 250
39677: ST_TO_ADDR
// y := GetY ( building ) ;
39678: LD_ADDR_VAR 0 6
39682: PUSH
39683: LD_VAR 0 2
39687: PPUSH
39688: CALL_OW 251
39692: ST_TO_ADDR
// for i = 0 to 5 do
39693: LD_ADDR_VAR 0 4
39697: PUSH
39698: DOUBLE
39699: LD_INT 0
39701: DEC
39702: ST_TO_ADDR
39703: LD_INT 5
39705: PUSH
39706: FOR_TO
39707: IFFALSE 39819
// begin _x := ShiftX ( x , i , 3 ) ;
39709: LD_ADDR_VAR 0 7
39713: PUSH
39714: LD_VAR 0 5
39718: PPUSH
39719: LD_VAR 0 4
39723: PPUSH
39724: LD_INT 3
39726: PPUSH
39727: CALL_OW 272
39731: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39732: LD_ADDR_VAR 0 8
39736: PUSH
39737: LD_VAR 0 6
39741: PPUSH
39742: LD_VAR 0 4
39746: PPUSH
39747: LD_INT 3
39749: PPUSH
39750: CALL_OW 273
39754: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39755: LD_VAR 0 7
39759: PPUSH
39760: LD_VAR 0 8
39764: PPUSH
39765: CALL_OW 488
39769: NOT
39770: IFFALSE 39774
// continue ;
39772: GO 39706
// if HexInfo ( _x , _y ) = 0 then
39774: LD_VAR 0 7
39778: PPUSH
39779: LD_VAR 0 8
39783: PPUSH
39784: CALL_OW 428
39788: PUSH
39789: LD_INT 0
39791: EQUAL
39792: IFFALSE 39817
// begin ComMoveXY ( unit , _x , _y ) ;
39794: LD_VAR 0 1
39798: PPUSH
39799: LD_VAR 0 7
39803: PPUSH
39804: LD_VAR 0 8
39808: PPUSH
39809: CALL_OW 111
// exit ;
39813: POP
39814: POP
39815: GO 39821
// end ; end ;
39817: GO 39706
39819: POP
39820: POP
// end ;
39821: LD_VAR 0 3
39825: RET
// export function ScanBase ( side , base_area ) ; begin
39826: LD_INT 0
39828: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39829: LD_ADDR_VAR 0 3
39833: PUSH
39834: LD_VAR 0 2
39838: PPUSH
39839: LD_INT 81
39841: PUSH
39842: LD_VAR 0 1
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PPUSH
39851: CALL_OW 70
39855: ST_TO_ADDR
// end ;
39856: LD_VAR 0 3
39860: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39861: LD_INT 0
39863: PPUSH
39864: PPUSH
39865: PPUSH
39866: PPUSH
// result := false ;
39867: LD_ADDR_VAR 0 2
39871: PUSH
39872: LD_INT 0
39874: ST_TO_ADDR
// side := GetSide ( unit ) ;
39875: LD_ADDR_VAR 0 3
39879: PUSH
39880: LD_VAR 0 1
39884: PPUSH
39885: CALL_OW 255
39889: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39890: LD_ADDR_VAR 0 4
39894: PUSH
39895: LD_VAR 0 1
39899: PPUSH
39900: CALL_OW 248
39904: ST_TO_ADDR
// case nat of 1 :
39905: LD_VAR 0 4
39909: PUSH
39910: LD_INT 1
39912: DOUBLE
39913: EQUAL
39914: IFTRUE 39918
39916: GO 39929
39918: POP
// tech := tech_lassight ; 2 :
39919: LD_ADDR_VAR 0 5
39923: PUSH
39924: LD_INT 12
39926: ST_TO_ADDR
39927: GO 39968
39929: LD_INT 2
39931: DOUBLE
39932: EQUAL
39933: IFTRUE 39937
39935: GO 39948
39937: POP
// tech := tech_mortar ; 3 :
39938: LD_ADDR_VAR 0 5
39942: PUSH
39943: LD_INT 41
39945: ST_TO_ADDR
39946: GO 39968
39948: LD_INT 3
39950: DOUBLE
39951: EQUAL
39952: IFTRUE 39956
39954: GO 39967
39956: POP
// tech := tech_bazooka ; end ;
39957: LD_ADDR_VAR 0 5
39961: PUSH
39962: LD_INT 44
39964: ST_TO_ADDR
39965: GO 39968
39967: POP
// if Researched ( side , tech ) then
39968: LD_VAR 0 3
39972: PPUSH
39973: LD_VAR 0 5
39977: PPUSH
39978: CALL_OW 325
39982: IFFALSE 40009
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39984: LD_ADDR_VAR 0 2
39988: PUSH
39989: LD_INT 5
39991: PUSH
39992: LD_INT 8
39994: PUSH
39995: LD_INT 9
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: LIST
40002: PUSH
40003: LD_VAR 0 4
40007: ARRAY
40008: ST_TO_ADDR
// end ;
40009: LD_VAR 0 2
40013: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40014: LD_INT 0
40016: PPUSH
40017: PPUSH
40018: PPUSH
// if not mines then
40019: LD_VAR 0 2
40023: NOT
40024: IFFALSE 40028
// exit ;
40026: GO 40172
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40028: LD_ADDR_VAR 0 5
40032: PUSH
40033: LD_INT 81
40035: PUSH
40036: LD_VAR 0 1
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 3
40047: PUSH
40048: LD_INT 21
40050: PUSH
40051: LD_INT 3
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PPUSH
40066: CALL_OW 69
40070: ST_TO_ADDR
// for i in mines do
40071: LD_ADDR_VAR 0 4
40075: PUSH
40076: LD_VAR 0 2
40080: PUSH
40081: FOR_IN
40082: IFFALSE 40170
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40084: LD_VAR 0 4
40088: PUSH
40089: LD_INT 1
40091: ARRAY
40092: PPUSH
40093: LD_VAR 0 4
40097: PUSH
40098: LD_INT 2
40100: ARRAY
40101: PPUSH
40102: CALL_OW 458
40106: NOT
40107: IFFALSE 40111
// continue ;
40109: GO 40081
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40111: LD_VAR 0 4
40115: PUSH
40116: LD_INT 1
40118: ARRAY
40119: PPUSH
40120: LD_VAR 0 4
40124: PUSH
40125: LD_INT 2
40127: ARRAY
40128: PPUSH
40129: CALL_OW 428
40133: PUSH
40134: LD_VAR 0 5
40138: IN
40139: IFFALSE 40168
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40141: LD_VAR 0 4
40145: PUSH
40146: LD_INT 1
40148: ARRAY
40149: PPUSH
40150: LD_VAR 0 4
40154: PUSH
40155: LD_INT 2
40157: ARRAY
40158: PPUSH
40159: LD_VAR 0 1
40163: PPUSH
40164: CALL_OW 456
// end ;
40168: GO 40081
40170: POP
40171: POP
// end ;
40172: LD_VAR 0 3
40176: RET
// export function Count ( array ) ; var i ; begin
40177: LD_INT 0
40179: PPUSH
40180: PPUSH
// result := 0 ;
40181: LD_ADDR_VAR 0 2
40185: PUSH
40186: LD_INT 0
40188: ST_TO_ADDR
// for i in array do
40189: LD_ADDR_VAR 0 3
40193: PUSH
40194: LD_VAR 0 1
40198: PUSH
40199: FOR_IN
40200: IFFALSE 40224
// if i then
40202: LD_VAR 0 3
40206: IFFALSE 40222
// result := result + 1 ;
40208: LD_ADDR_VAR 0 2
40212: PUSH
40213: LD_VAR 0 2
40217: PUSH
40218: LD_INT 1
40220: PLUS
40221: ST_TO_ADDR
40222: GO 40199
40224: POP
40225: POP
// end ;
40226: LD_VAR 0 2
40230: RET
// export function IsEmpty ( building ) ; begin
40231: LD_INT 0
40233: PPUSH
// if not building then
40234: LD_VAR 0 1
40238: NOT
40239: IFFALSE 40243
// exit ;
40241: GO 40286
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40243: LD_ADDR_VAR 0 2
40247: PUSH
40248: LD_VAR 0 1
40252: PUSH
40253: LD_INT 22
40255: PUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 255
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 58
40272: PUSH
40273: EMPTY
40274: LIST
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PPUSH
40280: CALL_OW 69
40284: IN
40285: ST_TO_ADDR
// end ;
40286: LD_VAR 0 2
40290: RET
// export function IsNotFull ( building ) ; begin
40291: LD_INT 0
40293: PPUSH
// if not building then
40294: LD_VAR 0 1
40298: NOT
40299: IFFALSE 40303
// exit ;
40301: GO 40322
// result := UnitsInside ( building ) < 6 ;
40303: LD_ADDR_VAR 0 2
40307: PUSH
40308: LD_VAR 0 1
40312: PPUSH
40313: CALL_OW 313
40317: PUSH
40318: LD_INT 6
40320: LESS
40321: ST_TO_ADDR
// end ;
40322: LD_VAR 0 2
40326: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40327: LD_INT 0
40329: PPUSH
40330: PPUSH
40331: PPUSH
40332: PPUSH
// tmp := [ ] ;
40333: LD_ADDR_VAR 0 3
40337: PUSH
40338: EMPTY
40339: ST_TO_ADDR
// list := [ ] ;
40340: LD_ADDR_VAR 0 5
40344: PUSH
40345: EMPTY
40346: ST_TO_ADDR
// for i = 16 to 25 do
40347: LD_ADDR_VAR 0 4
40351: PUSH
40352: DOUBLE
40353: LD_INT 16
40355: DEC
40356: ST_TO_ADDR
40357: LD_INT 25
40359: PUSH
40360: FOR_TO
40361: IFFALSE 40434
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40363: LD_ADDR_VAR 0 3
40367: PUSH
40368: LD_VAR 0 3
40372: PUSH
40373: LD_INT 22
40375: PUSH
40376: LD_VAR 0 1
40380: PPUSH
40381: CALL_OW 255
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 91
40392: PUSH
40393: LD_VAR 0 1
40397: PUSH
40398: LD_INT 6
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 30
40408: PUSH
40409: LD_VAR 0 4
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: LIST
40422: PUSH
40423: EMPTY
40424: LIST
40425: PPUSH
40426: CALL_OW 69
40430: ADD
40431: ST_TO_ADDR
40432: GO 40360
40434: POP
40435: POP
// for i = 1 to tmp do
40436: LD_ADDR_VAR 0 4
40440: PUSH
40441: DOUBLE
40442: LD_INT 1
40444: DEC
40445: ST_TO_ADDR
40446: LD_VAR 0 3
40450: PUSH
40451: FOR_TO
40452: IFFALSE 40540
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40454: LD_ADDR_VAR 0 5
40458: PUSH
40459: LD_VAR 0 5
40463: PUSH
40464: LD_VAR 0 3
40468: PUSH
40469: LD_VAR 0 4
40473: ARRAY
40474: PPUSH
40475: CALL_OW 266
40479: PUSH
40480: LD_VAR 0 3
40484: PUSH
40485: LD_VAR 0 4
40489: ARRAY
40490: PPUSH
40491: CALL_OW 250
40495: PUSH
40496: LD_VAR 0 3
40500: PUSH
40501: LD_VAR 0 4
40505: ARRAY
40506: PPUSH
40507: CALL_OW 251
40511: PUSH
40512: LD_VAR 0 3
40516: PUSH
40517: LD_VAR 0 4
40521: ARRAY
40522: PPUSH
40523: CALL_OW 254
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: PUSH
40534: EMPTY
40535: LIST
40536: ADD
40537: ST_TO_ADDR
40538: GO 40451
40540: POP
40541: POP
// result := list ;
40542: LD_ADDR_VAR 0 2
40546: PUSH
40547: LD_VAR 0 5
40551: ST_TO_ADDR
// end ;
40552: LD_VAR 0 2
40556: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40557: LD_INT 0
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
// if not factory then
40566: LD_VAR 0 1
40570: NOT
40571: IFFALSE 40575
// exit ;
40573: GO 41168
// if control = control_apeman then
40575: LD_VAR 0 4
40579: PUSH
40580: LD_INT 5
40582: EQUAL
40583: IFFALSE 40692
// begin tmp := UnitsInside ( factory ) ;
40585: LD_ADDR_VAR 0 8
40589: PUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: CALL_OW 313
40599: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40600: LD_VAR 0 8
40604: PPUSH
40605: LD_INT 25
40607: PUSH
40608: LD_INT 12
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PPUSH
40615: CALL_OW 72
40619: NOT
40620: IFFALSE 40630
// control := control_manual ;
40622: LD_ADDR_VAR 0 4
40626: PUSH
40627: LD_INT 1
40629: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40630: LD_ADDR_VAR 0 8
40634: PUSH
40635: LD_VAR 0 1
40639: PPUSH
40640: CALL 40327 0 1
40644: ST_TO_ADDR
// if tmp then
40645: LD_VAR 0 8
40649: IFFALSE 40692
// begin for i in tmp do
40651: LD_ADDR_VAR 0 7
40655: PUSH
40656: LD_VAR 0 8
40660: PUSH
40661: FOR_IN
40662: IFFALSE 40690
// if i [ 1 ] = b_ext_radio then
40664: LD_VAR 0 7
40668: PUSH
40669: LD_INT 1
40671: ARRAY
40672: PUSH
40673: LD_INT 22
40675: EQUAL
40676: IFFALSE 40688
// begin control := control_remote ;
40678: LD_ADDR_VAR 0 4
40682: PUSH
40683: LD_INT 2
40685: ST_TO_ADDR
// break ;
40686: GO 40690
// end ;
40688: GO 40661
40690: POP
40691: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40692: LD_VAR 0 1
40696: PPUSH
40697: LD_VAR 0 2
40701: PPUSH
40702: LD_VAR 0 3
40706: PPUSH
40707: LD_VAR 0 4
40711: PPUSH
40712: LD_VAR 0 5
40716: PPUSH
40717: CALL_OW 448
40721: IFFALSE 40756
// begin result := [ chassis , engine , control , weapon ] ;
40723: LD_ADDR_VAR 0 6
40727: PUSH
40728: LD_VAR 0 2
40732: PUSH
40733: LD_VAR 0 3
40737: PUSH
40738: LD_VAR 0 4
40742: PUSH
40743: LD_VAR 0 5
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: ST_TO_ADDR
// exit ;
40754: GO 41168
// end ; _chassis := AvailableChassisList ( factory ) ;
40756: LD_ADDR_VAR 0 9
40760: PUSH
40761: LD_VAR 0 1
40765: PPUSH
40766: CALL_OW 475
40770: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40771: LD_ADDR_VAR 0 11
40775: PUSH
40776: LD_VAR 0 1
40780: PPUSH
40781: CALL_OW 476
40785: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40786: LD_ADDR_VAR 0 12
40790: PUSH
40791: LD_VAR 0 1
40795: PPUSH
40796: CALL_OW 477
40800: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40801: LD_ADDR_VAR 0 10
40805: PUSH
40806: LD_VAR 0 1
40810: PPUSH
40811: CALL_OW 478
40815: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40816: LD_VAR 0 9
40820: NOT
40821: PUSH
40822: LD_VAR 0 11
40826: NOT
40827: OR
40828: PUSH
40829: LD_VAR 0 12
40833: NOT
40834: OR
40835: PUSH
40836: LD_VAR 0 10
40840: NOT
40841: OR
40842: IFFALSE 40877
// begin result := [ chassis , engine , control , weapon ] ;
40844: LD_ADDR_VAR 0 6
40848: PUSH
40849: LD_VAR 0 2
40853: PUSH
40854: LD_VAR 0 3
40858: PUSH
40859: LD_VAR 0 4
40863: PUSH
40864: LD_VAR 0 5
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
// exit ;
40875: GO 41168
// end ; if not chassis in _chassis then
40877: LD_VAR 0 2
40881: PUSH
40882: LD_VAR 0 9
40886: IN
40887: NOT
40888: IFFALSE 40914
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40890: LD_ADDR_VAR 0 2
40894: PUSH
40895: LD_VAR 0 9
40899: PUSH
40900: LD_INT 1
40902: PPUSH
40903: LD_VAR 0 9
40907: PPUSH
40908: CALL_OW 12
40912: ARRAY
40913: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40914: LD_VAR 0 2
40918: PPUSH
40919: LD_VAR 0 3
40923: PPUSH
40924: CALL 41173 0 2
40928: NOT
40929: IFFALSE 40988
// repeat engine := _engine [ 1 ] ;
40931: LD_ADDR_VAR 0 3
40935: PUSH
40936: LD_VAR 0 11
40940: PUSH
40941: LD_INT 1
40943: ARRAY
40944: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40945: LD_ADDR_VAR 0 11
40949: PUSH
40950: LD_VAR 0 11
40954: PPUSH
40955: LD_INT 1
40957: PPUSH
40958: CALL_OW 3
40962: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40963: LD_VAR 0 2
40967: PPUSH
40968: LD_VAR 0 3
40972: PPUSH
40973: CALL 41173 0 2
40977: PUSH
40978: LD_VAR 0 11
40982: PUSH
40983: EMPTY
40984: EQUAL
40985: OR
40986: IFFALSE 40931
// if not control in _control then
40988: LD_VAR 0 4
40992: PUSH
40993: LD_VAR 0 12
40997: IN
40998: NOT
40999: IFFALSE 41025
// control := _control [ rand ( 1 , _control ) ] ;
41001: LD_ADDR_VAR 0 4
41005: PUSH
41006: LD_VAR 0 12
41010: PUSH
41011: LD_INT 1
41013: PPUSH
41014: LD_VAR 0 12
41018: PPUSH
41019: CALL_OW 12
41023: ARRAY
41024: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41025: LD_VAR 0 2
41029: PPUSH
41030: LD_VAR 0 5
41034: PPUSH
41035: CALL 41393 0 2
41039: NOT
41040: IFFALSE 41099
// repeat weapon := _weapon [ 1 ] ;
41042: LD_ADDR_VAR 0 5
41046: PUSH
41047: LD_VAR 0 10
41051: PUSH
41052: LD_INT 1
41054: ARRAY
41055: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41056: LD_ADDR_VAR 0 10
41060: PUSH
41061: LD_VAR 0 10
41065: PPUSH
41066: LD_INT 1
41068: PPUSH
41069: CALL_OW 3
41073: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41074: LD_VAR 0 2
41078: PPUSH
41079: LD_VAR 0 5
41083: PPUSH
41084: CALL 41393 0 2
41088: PUSH
41089: LD_VAR 0 10
41093: PUSH
41094: EMPTY
41095: EQUAL
41096: OR
41097: IFFALSE 41042
// result := [ ] ;
41099: LD_ADDR_VAR 0 6
41103: PUSH
41104: EMPTY
41105: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41106: LD_VAR 0 1
41110: PPUSH
41111: LD_VAR 0 2
41115: PPUSH
41116: LD_VAR 0 3
41120: PPUSH
41121: LD_VAR 0 4
41125: PPUSH
41126: LD_VAR 0 5
41130: PPUSH
41131: CALL_OW 448
41135: IFFALSE 41168
// result := [ chassis , engine , control , weapon ] ;
41137: LD_ADDR_VAR 0 6
41141: PUSH
41142: LD_VAR 0 2
41146: PUSH
41147: LD_VAR 0 3
41151: PUSH
41152: LD_VAR 0 4
41156: PUSH
41157: LD_VAR 0 5
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: ST_TO_ADDR
// end ;
41168: LD_VAR 0 6
41172: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41173: LD_INT 0
41175: PPUSH
// if not chassis or not engine then
41176: LD_VAR 0 1
41180: NOT
41181: PUSH
41182: LD_VAR 0 2
41186: NOT
41187: OR
41188: IFFALSE 41192
// exit ;
41190: GO 41388
// case engine of engine_solar :
41192: LD_VAR 0 2
41196: PUSH
41197: LD_INT 2
41199: DOUBLE
41200: EQUAL
41201: IFTRUE 41205
41203: GO 41243
41205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41206: LD_ADDR_VAR 0 3
41210: PUSH
41211: LD_INT 11
41213: PUSH
41214: LD_INT 12
41216: PUSH
41217: LD_INT 13
41219: PUSH
41220: LD_INT 14
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: LD_INT 3
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: ST_TO_ADDR
41241: GO 41372
41243: LD_INT 1
41245: DOUBLE
41246: EQUAL
41247: IFTRUE 41251
41249: GO 41313
41251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41252: LD_ADDR_VAR 0 3
41256: PUSH
41257: LD_INT 11
41259: PUSH
41260: LD_INT 12
41262: PUSH
41263: LD_INT 13
41265: PUSH
41266: LD_INT 14
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: LD_INT 3
41277: PUSH
41278: LD_INT 4
41280: PUSH
41281: LD_INT 5
41283: PUSH
41284: LD_INT 21
41286: PUSH
41287: LD_INT 23
41289: PUSH
41290: LD_INT 22
41292: PUSH
41293: LD_INT 24
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: ST_TO_ADDR
41311: GO 41372
41313: LD_INT 3
41315: DOUBLE
41316: EQUAL
41317: IFTRUE 41321
41319: GO 41371
41321: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41322: LD_ADDR_VAR 0 3
41326: PUSH
41327: LD_INT 13
41329: PUSH
41330: LD_INT 14
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: LD_INT 3
41338: PUSH
41339: LD_INT 4
41341: PUSH
41342: LD_INT 5
41344: PUSH
41345: LD_INT 21
41347: PUSH
41348: LD_INT 22
41350: PUSH
41351: LD_INT 23
41353: PUSH
41354: LD_INT 24
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: ST_TO_ADDR
41369: GO 41372
41371: POP
// result := ( chassis in result ) ;
41372: LD_ADDR_VAR 0 3
41376: PUSH
41377: LD_VAR 0 1
41381: PUSH
41382: LD_VAR 0 3
41386: IN
41387: ST_TO_ADDR
// end ;
41388: LD_VAR 0 3
41392: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41393: LD_INT 0
41395: PPUSH
// if not chassis or not weapon then
41396: LD_VAR 0 1
41400: NOT
41401: PUSH
41402: LD_VAR 0 2
41406: NOT
41407: OR
41408: IFFALSE 41412
// exit ;
41410: GO 42474
// case weapon of us_machine_gun :
41412: LD_VAR 0 2
41416: PUSH
41417: LD_INT 2
41419: DOUBLE
41420: EQUAL
41421: IFTRUE 41425
41423: GO 41455
41425: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41426: LD_ADDR_VAR 0 3
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: LD_INT 2
41436: PUSH
41437: LD_INT 3
41439: PUSH
41440: LD_INT 4
41442: PUSH
41443: LD_INT 5
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: ST_TO_ADDR
41453: GO 42458
41455: LD_INT 3
41457: DOUBLE
41458: EQUAL
41459: IFTRUE 41463
41461: GO 41493
41463: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41464: LD_ADDR_VAR 0 3
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: LD_INT 3
41477: PUSH
41478: LD_INT 4
41480: PUSH
41481: LD_INT 5
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: ST_TO_ADDR
41491: GO 42458
41493: LD_INT 11
41495: DOUBLE
41496: EQUAL
41497: IFTRUE 41501
41499: GO 41531
41501: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41502: LD_ADDR_VAR 0 3
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: LD_INT 3
41515: PUSH
41516: LD_INT 4
41518: PUSH
41519: LD_INT 5
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: ST_TO_ADDR
41529: GO 42458
41531: LD_INT 4
41533: DOUBLE
41534: EQUAL
41535: IFTRUE 41539
41537: GO 41565
41539: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41540: LD_ADDR_VAR 0 3
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: LD_INT 3
41550: PUSH
41551: LD_INT 4
41553: PUSH
41554: LD_INT 5
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: ST_TO_ADDR
41563: GO 42458
41565: LD_INT 5
41567: DOUBLE
41568: EQUAL
41569: IFTRUE 41573
41571: GO 41599
41573: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41574: LD_ADDR_VAR 0 3
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: LD_INT 3
41584: PUSH
41585: LD_INT 4
41587: PUSH
41588: LD_INT 5
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: ST_TO_ADDR
41597: GO 42458
41599: LD_INT 9
41601: DOUBLE
41602: EQUAL
41603: IFTRUE 41607
41605: GO 41633
41607: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41608: LD_ADDR_VAR 0 3
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: LD_INT 4
41621: PUSH
41622: LD_INT 5
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: ST_TO_ADDR
41631: GO 42458
41633: LD_INT 7
41635: DOUBLE
41636: EQUAL
41637: IFTRUE 41641
41639: GO 41667
41641: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41642: LD_ADDR_VAR 0 3
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 3
41652: PUSH
41653: LD_INT 4
41655: PUSH
41656: LD_INT 5
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: ST_TO_ADDR
41665: GO 42458
41667: LD_INT 12
41669: DOUBLE
41670: EQUAL
41671: IFTRUE 41675
41673: GO 41701
41675: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41676: LD_ADDR_VAR 0 3
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: LD_INT 3
41686: PUSH
41687: LD_INT 4
41689: PUSH
41690: LD_INT 5
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: ST_TO_ADDR
41699: GO 42458
41701: LD_INT 13
41703: DOUBLE
41704: EQUAL
41705: IFTRUE 41709
41707: GO 41735
41709: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41710: LD_ADDR_VAR 0 3
41714: PUSH
41715: LD_INT 2
41717: PUSH
41718: LD_INT 3
41720: PUSH
41721: LD_INT 4
41723: PUSH
41724: LD_INT 5
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: ST_TO_ADDR
41733: GO 42458
41735: LD_INT 14
41737: DOUBLE
41738: EQUAL
41739: IFTRUE 41743
41741: GO 41761
41743: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41744: LD_ADDR_VAR 0 3
41748: PUSH
41749: LD_INT 4
41751: PUSH
41752: LD_INT 5
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: ST_TO_ADDR
41759: GO 42458
41761: LD_INT 6
41763: DOUBLE
41764: EQUAL
41765: IFTRUE 41769
41767: GO 41787
41769: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41770: LD_ADDR_VAR 0 3
41774: PUSH
41775: LD_INT 4
41777: PUSH
41778: LD_INT 5
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: ST_TO_ADDR
41785: GO 42458
41787: LD_INT 10
41789: DOUBLE
41790: EQUAL
41791: IFTRUE 41795
41793: GO 41813
41795: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41796: LD_ADDR_VAR 0 3
41800: PUSH
41801: LD_INT 4
41803: PUSH
41804: LD_INT 5
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: ST_TO_ADDR
41811: GO 42458
41813: LD_INT 22
41815: DOUBLE
41816: EQUAL
41817: IFTRUE 41821
41819: GO 41847
41821: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41822: LD_ADDR_VAR 0 3
41826: PUSH
41827: LD_INT 11
41829: PUSH
41830: LD_INT 12
41832: PUSH
41833: LD_INT 13
41835: PUSH
41836: LD_INT 14
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: ST_TO_ADDR
41845: GO 42458
41847: LD_INT 23
41849: DOUBLE
41850: EQUAL
41851: IFTRUE 41855
41853: GO 41881
41855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41856: LD_ADDR_VAR 0 3
41860: PUSH
41861: LD_INT 11
41863: PUSH
41864: LD_INT 12
41866: PUSH
41867: LD_INT 13
41869: PUSH
41870: LD_INT 14
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: ST_TO_ADDR
41879: GO 42458
41881: LD_INT 24
41883: DOUBLE
41884: EQUAL
41885: IFTRUE 41889
41887: GO 41915
41889: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41890: LD_ADDR_VAR 0 3
41894: PUSH
41895: LD_INT 11
41897: PUSH
41898: LD_INT 12
41900: PUSH
41901: LD_INT 13
41903: PUSH
41904: LD_INT 14
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: ST_TO_ADDR
41913: GO 42458
41915: LD_INT 30
41917: DOUBLE
41918: EQUAL
41919: IFTRUE 41923
41921: GO 41949
41923: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41924: LD_ADDR_VAR 0 3
41928: PUSH
41929: LD_INT 11
41931: PUSH
41932: LD_INT 12
41934: PUSH
41935: LD_INT 13
41937: PUSH
41938: LD_INT 14
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: ST_TO_ADDR
41947: GO 42458
41949: LD_INT 25
41951: DOUBLE
41952: EQUAL
41953: IFTRUE 41957
41955: GO 41975
41957: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41958: LD_ADDR_VAR 0 3
41962: PUSH
41963: LD_INT 13
41965: PUSH
41966: LD_INT 14
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: ST_TO_ADDR
41973: GO 42458
41975: LD_INT 27
41977: DOUBLE
41978: EQUAL
41979: IFTRUE 41983
41981: GO 42001
41983: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41984: LD_ADDR_VAR 0 3
41988: PUSH
41989: LD_INT 13
41991: PUSH
41992: LD_INT 14
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: ST_TO_ADDR
41999: GO 42458
42001: LD_EXP 54
42005: DOUBLE
42006: EQUAL
42007: IFTRUE 42011
42009: GO 42037
42011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42012: LD_ADDR_VAR 0 3
42016: PUSH
42017: LD_INT 11
42019: PUSH
42020: LD_INT 12
42022: PUSH
42023: LD_INT 13
42025: PUSH
42026: LD_INT 14
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
42035: GO 42458
42037: LD_INT 28
42039: DOUBLE
42040: EQUAL
42041: IFTRUE 42045
42043: GO 42063
42045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42046: LD_ADDR_VAR 0 3
42050: PUSH
42051: LD_INT 13
42053: PUSH
42054: LD_INT 14
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: ST_TO_ADDR
42061: GO 42458
42063: LD_INT 29
42065: DOUBLE
42066: EQUAL
42067: IFTRUE 42071
42069: GO 42089
42071: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42072: LD_ADDR_VAR 0 3
42076: PUSH
42077: LD_INT 13
42079: PUSH
42080: LD_INT 14
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: ST_TO_ADDR
42087: GO 42458
42089: LD_INT 31
42091: DOUBLE
42092: EQUAL
42093: IFTRUE 42097
42095: GO 42115
42097: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42098: LD_ADDR_VAR 0 3
42102: PUSH
42103: LD_INT 13
42105: PUSH
42106: LD_INT 14
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: ST_TO_ADDR
42113: GO 42458
42115: LD_INT 26
42117: DOUBLE
42118: EQUAL
42119: IFTRUE 42123
42121: GO 42141
42123: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42124: LD_ADDR_VAR 0 3
42128: PUSH
42129: LD_INT 13
42131: PUSH
42132: LD_INT 14
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: ST_TO_ADDR
42139: GO 42458
42141: LD_INT 42
42143: DOUBLE
42144: EQUAL
42145: IFTRUE 42149
42147: GO 42175
42149: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42150: LD_ADDR_VAR 0 3
42154: PUSH
42155: LD_INT 21
42157: PUSH
42158: LD_INT 22
42160: PUSH
42161: LD_INT 23
42163: PUSH
42164: LD_INT 24
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: ST_TO_ADDR
42173: GO 42458
42175: LD_INT 43
42177: DOUBLE
42178: EQUAL
42179: IFTRUE 42183
42181: GO 42209
42183: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42184: LD_ADDR_VAR 0 3
42188: PUSH
42189: LD_INT 21
42191: PUSH
42192: LD_INT 22
42194: PUSH
42195: LD_INT 23
42197: PUSH
42198: LD_INT 24
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: ST_TO_ADDR
42207: GO 42458
42209: LD_INT 44
42211: DOUBLE
42212: EQUAL
42213: IFTRUE 42217
42215: GO 42243
42217: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42218: LD_ADDR_VAR 0 3
42222: PUSH
42223: LD_INT 21
42225: PUSH
42226: LD_INT 22
42228: PUSH
42229: LD_INT 23
42231: PUSH
42232: LD_INT 24
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: ST_TO_ADDR
42241: GO 42458
42243: LD_INT 45
42245: DOUBLE
42246: EQUAL
42247: IFTRUE 42251
42249: GO 42277
42251: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42252: LD_ADDR_VAR 0 3
42256: PUSH
42257: LD_INT 21
42259: PUSH
42260: LD_INT 22
42262: PUSH
42263: LD_INT 23
42265: PUSH
42266: LD_INT 24
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: ST_TO_ADDR
42275: GO 42458
42277: LD_INT 49
42279: DOUBLE
42280: EQUAL
42281: IFTRUE 42285
42283: GO 42311
42285: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42286: LD_ADDR_VAR 0 3
42290: PUSH
42291: LD_INT 21
42293: PUSH
42294: LD_INT 22
42296: PUSH
42297: LD_INT 23
42299: PUSH
42300: LD_INT 24
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: ST_TO_ADDR
42309: GO 42458
42311: LD_INT 51
42313: DOUBLE
42314: EQUAL
42315: IFTRUE 42319
42317: GO 42345
42319: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42320: LD_ADDR_VAR 0 3
42324: PUSH
42325: LD_INT 21
42327: PUSH
42328: LD_INT 22
42330: PUSH
42331: LD_INT 23
42333: PUSH
42334: LD_INT 24
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: ST_TO_ADDR
42343: GO 42458
42345: LD_INT 52
42347: DOUBLE
42348: EQUAL
42349: IFTRUE 42353
42351: GO 42379
42353: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42354: LD_ADDR_VAR 0 3
42358: PUSH
42359: LD_INT 21
42361: PUSH
42362: LD_INT 22
42364: PUSH
42365: LD_INT 23
42367: PUSH
42368: LD_INT 24
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: ST_TO_ADDR
42377: GO 42458
42379: LD_INT 53
42381: DOUBLE
42382: EQUAL
42383: IFTRUE 42387
42385: GO 42405
42387: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42388: LD_ADDR_VAR 0 3
42392: PUSH
42393: LD_INT 23
42395: PUSH
42396: LD_INT 24
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: ST_TO_ADDR
42403: GO 42458
42405: LD_INT 46
42407: DOUBLE
42408: EQUAL
42409: IFTRUE 42413
42411: GO 42431
42413: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42414: LD_ADDR_VAR 0 3
42418: PUSH
42419: LD_INT 23
42421: PUSH
42422: LD_INT 24
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: ST_TO_ADDR
42429: GO 42458
42431: LD_INT 47
42433: DOUBLE
42434: EQUAL
42435: IFTRUE 42439
42437: GO 42457
42439: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42440: LD_ADDR_VAR 0 3
42444: PUSH
42445: LD_INT 23
42447: PUSH
42448: LD_INT 24
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: ST_TO_ADDR
42455: GO 42458
42457: POP
// result := ( chassis in result ) ;
42458: LD_ADDR_VAR 0 3
42462: PUSH
42463: LD_VAR 0 1
42467: PUSH
42468: LD_VAR 0 3
42472: IN
42473: ST_TO_ADDR
// end ;
42474: LD_VAR 0 3
42478: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42479: LD_INT 0
42481: PPUSH
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
// result := array ;
42488: LD_ADDR_VAR 0 5
42492: PUSH
42493: LD_VAR 0 1
42497: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42498: LD_VAR 0 1
42502: NOT
42503: PUSH
42504: LD_VAR 0 2
42508: NOT
42509: OR
42510: PUSH
42511: LD_VAR 0 3
42515: NOT
42516: OR
42517: PUSH
42518: LD_VAR 0 2
42522: PUSH
42523: LD_VAR 0 1
42527: GREATER
42528: OR
42529: PUSH
42530: LD_VAR 0 3
42534: PUSH
42535: LD_VAR 0 1
42539: GREATER
42540: OR
42541: IFFALSE 42545
// exit ;
42543: GO 42841
// if direction then
42545: LD_VAR 0 4
42549: IFFALSE 42613
// begin d := 1 ;
42551: LD_ADDR_VAR 0 9
42555: PUSH
42556: LD_INT 1
42558: ST_TO_ADDR
// if i_from > i_to then
42559: LD_VAR 0 2
42563: PUSH
42564: LD_VAR 0 3
42568: GREATER
42569: IFFALSE 42595
// length := ( array - i_from ) + i_to else
42571: LD_ADDR_VAR 0 11
42575: PUSH
42576: LD_VAR 0 1
42580: PUSH
42581: LD_VAR 0 2
42585: MINUS
42586: PUSH
42587: LD_VAR 0 3
42591: PLUS
42592: ST_TO_ADDR
42593: GO 42611
// length := i_to - i_from ;
42595: LD_ADDR_VAR 0 11
42599: PUSH
42600: LD_VAR 0 3
42604: PUSH
42605: LD_VAR 0 2
42609: MINUS
42610: ST_TO_ADDR
// end else
42611: GO 42674
// begin d := - 1 ;
42613: LD_ADDR_VAR 0 9
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: ST_TO_ADDR
// if i_from > i_to then
42622: LD_VAR 0 2
42626: PUSH
42627: LD_VAR 0 3
42631: GREATER
42632: IFFALSE 42652
// length := i_from - i_to else
42634: LD_ADDR_VAR 0 11
42638: PUSH
42639: LD_VAR 0 2
42643: PUSH
42644: LD_VAR 0 3
42648: MINUS
42649: ST_TO_ADDR
42650: GO 42674
// length := ( array - i_to ) + i_from ;
42652: LD_ADDR_VAR 0 11
42656: PUSH
42657: LD_VAR 0 1
42661: PUSH
42662: LD_VAR 0 3
42666: MINUS
42667: PUSH
42668: LD_VAR 0 2
42672: PLUS
42673: ST_TO_ADDR
// end ; if not length then
42674: LD_VAR 0 11
42678: NOT
42679: IFFALSE 42683
// exit ;
42681: GO 42841
// tmp := array ;
42683: LD_ADDR_VAR 0 10
42687: PUSH
42688: LD_VAR 0 1
42692: ST_TO_ADDR
// for i = 1 to length do
42693: LD_ADDR_VAR 0 6
42697: PUSH
42698: DOUBLE
42699: LD_INT 1
42701: DEC
42702: ST_TO_ADDR
42703: LD_VAR 0 11
42707: PUSH
42708: FOR_TO
42709: IFFALSE 42829
// begin for j = 1 to array do
42711: LD_ADDR_VAR 0 7
42715: PUSH
42716: DOUBLE
42717: LD_INT 1
42719: DEC
42720: ST_TO_ADDR
42721: LD_VAR 0 1
42725: PUSH
42726: FOR_TO
42727: IFFALSE 42815
// begin k := j + d ;
42729: LD_ADDR_VAR 0 8
42733: PUSH
42734: LD_VAR 0 7
42738: PUSH
42739: LD_VAR 0 9
42743: PLUS
42744: ST_TO_ADDR
// if k > array then
42745: LD_VAR 0 8
42749: PUSH
42750: LD_VAR 0 1
42754: GREATER
42755: IFFALSE 42765
// k := 1 ;
42757: LD_ADDR_VAR 0 8
42761: PUSH
42762: LD_INT 1
42764: ST_TO_ADDR
// if not k then
42765: LD_VAR 0 8
42769: NOT
42770: IFFALSE 42782
// k := array ;
42772: LD_ADDR_VAR 0 8
42776: PUSH
42777: LD_VAR 0 1
42781: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42782: LD_ADDR_VAR 0 10
42786: PUSH
42787: LD_VAR 0 10
42791: PPUSH
42792: LD_VAR 0 8
42796: PPUSH
42797: LD_VAR 0 1
42801: PUSH
42802: LD_VAR 0 7
42806: ARRAY
42807: PPUSH
42808: CALL_OW 1
42812: ST_TO_ADDR
// end ;
42813: GO 42726
42815: POP
42816: POP
// array := tmp ;
42817: LD_ADDR_VAR 0 1
42821: PUSH
42822: LD_VAR 0 10
42826: ST_TO_ADDR
// end ;
42827: GO 42708
42829: POP
42830: POP
// result := array ;
42831: LD_ADDR_VAR 0 5
42835: PUSH
42836: LD_VAR 0 1
42840: ST_TO_ADDR
// end ;
42841: LD_VAR 0 5
42845: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42846: LD_INT 0
42848: PPUSH
42849: PPUSH
// result := 0 ;
42850: LD_ADDR_VAR 0 3
42854: PUSH
42855: LD_INT 0
42857: ST_TO_ADDR
// if not array or not value in array then
42858: LD_VAR 0 1
42862: NOT
42863: PUSH
42864: LD_VAR 0 2
42868: PUSH
42869: LD_VAR 0 1
42873: IN
42874: NOT
42875: OR
42876: IFFALSE 42880
// exit ;
42878: GO 42934
// for i = 1 to array do
42880: LD_ADDR_VAR 0 4
42884: PUSH
42885: DOUBLE
42886: LD_INT 1
42888: DEC
42889: ST_TO_ADDR
42890: LD_VAR 0 1
42894: PUSH
42895: FOR_TO
42896: IFFALSE 42932
// if value = array [ i ] then
42898: LD_VAR 0 2
42902: PUSH
42903: LD_VAR 0 1
42907: PUSH
42908: LD_VAR 0 4
42912: ARRAY
42913: EQUAL
42914: IFFALSE 42930
// begin result := i ;
42916: LD_ADDR_VAR 0 3
42920: PUSH
42921: LD_VAR 0 4
42925: ST_TO_ADDR
// exit ;
42926: POP
42927: POP
42928: GO 42934
// end ;
42930: GO 42895
42932: POP
42933: POP
// end ;
42934: LD_VAR 0 3
42938: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42939: LD_INT 0
42941: PPUSH
// vc_chassis := chassis ;
42942: LD_ADDR_OWVAR 37
42946: PUSH
42947: LD_VAR 0 1
42951: ST_TO_ADDR
// vc_engine := engine ;
42952: LD_ADDR_OWVAR 39
42956: PUSH
42957: LD_VAR 0 2
42961: ST_TO_ADDR
// vc_control := control ;
42962: LD_ADDR_OWVAR 38
42966: PUSH
42967: LD_VAR 0 3
42971: ST_TO_ADDR
// vc_weapon := weapon ;
42972: LD_ADDR_OWVAR 40
42976: PUSH
42977: LD_VAR 0 4
42981: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42982: LD_ADDR_OWVAR 41
42986: PUSH
42987: LD_VAR 0 5
42991: ST_TO_ADDR
// end ;
42992: LD_VAR 0 6
42996: RET
// export function WantPlant ( unit ) ; var task ; begin
42997: LD_INT 0
42999: PPUSH
43000: PPUSH
// result := false ;
43001: LD_ADDR_VAR 0 2
43005: PUSH
43006: LD_INT 0
43008: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43009: LD_ADDR_VAR 0 3
43013: PUSH
43014: LD_VAR 0 1
43018: PPUSH
43019: CALL_OW 437
43023: ST_TO_ADDR
// if task then
43024: LD_VAR 0 3
43028: IFFALSE 43056
// if task [ 1 ] [ 1 ] = p then
43030: LD_VAR 0 3
43034: PUSH
43035: LD_INT 1
43037: ARRAY
43038: PUSH
43039: LD_INT 1
43041: ARRAY
43042: PUSH
43043: LD_STRING p
43045: EQUAL
43046: IFFALSE 43056
// result := true ;
43048: LD_ADDR_VAR 0 2
43052: PUSH
43053: LD_INT 1
43055: ST_TO_ADDR
// end ;
43056: LD_VAR 0 2
43060: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43061: LD_INT 0
43063: PPUSH
43064: PPUSH
43065: PPUSH
43066: PPUSH
// if pos < 1 then
43067: LD_VAR 0 2
43071: PUSH
43072: LD_INT 1
43074: LESS
43075: IFFALSE 43079
// exit ;
43077: GO 43382
// if pos = 1 then
43079: LD_VAR 0 2
43083: PUSH
43084: LD_INT 1
43086: EQUAL
43087: IFFALSE 43120
// result := Replace ( arr , pos [ 1 ] , value ) else
43089: LD_ADDR_VAR 0 4
43093: PUSH
43094: LD_VAR 0 1
43098: PPUSH
43099: LD_VAR 0 2
43103: PUSH
43104: LD_INT 1
43106: ARRAY
43107: PPUSH
43108: LD_VAR 0 3
43112: PPUSH
43113: CALL_OW 1
43117: ST_TO_ADDR
43118: GO 43382
// begin tmp := arr ;
43120: LD_ADDR_VAR 0 6
43124: PUSH
43125: LD_VAR 0 1
43129: ST_TO_ADDR
// s_arr := [ tmp ] ;
43130: LD_ADDR_VAR 0 7
43134: PUSH
43135: LD_VAR 0 6
43139: PUSH
43140: EMPTY
43141: LIST
43142: ST_TO_ADDR
// for i = 1 to pos - 1 do
43143: LD_ADDR_VAR 0 5
43147: PUSH
43148: DOUBLE
43149: LD_INT 1
43151: DEC
43152: ST_TO_ADDR
43153: LD_VAR 0 2
43157: PUSH
43158: LD_INT 1
43160: MINUS
43161: PUSH
43162: FOR_TO
43163: IFFALSE 43208
// begin tmp := tmp [ pos [ i ] ] ;
43165: LD_ADDR_VAR 0 6
43169: PUSH
43170: LD_VAR 0 6
43174: PUSH
43175: LD_VAR 0 2
43179: PUSH
43180: LD_VAR 0 5
43184: ARRAY
43185: ARRAY
43186: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43187: LD_ADDR_VAR 0 7
43191: PUSH
43192: LD_VAR 0 7
43196: PUSH
43197: LD_VAR 0 6
43201: PUSH
43202: EMPTY
43203: LIST
43204: ADD
43205: ST_TO_ADDR
// end ;
43206: GO 43162
43208: POP
43209: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43210: LD_ADDR_VAR 0 6
43214: PUSH
43215: LD_VAR 0 6
43219: PPUSH
43220: LD_VAR 0 2
43224: PUSH
43225: LD_VAR 0 2
43229: ARRAY
43230: PPUSH
43231: LD_VAR 0 3
43235: PPUSH
43236: CALL_OW 1
43240: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43241: LD_ADDR_VAR 0 7
43245: PUSH
43246: LD_VAR 0 7
43250: PPUSH
43251: LD_VAR 0 7
43255: PPUSH
43256: LD_VAR 0 6
43260: PPUSH
43261: CALL_OW 1
43265: ST_TO_ADDR
// for i = s_arr downto 2 do
43266: LD_ADDR_VAR 0 5
43270: PUSH
43271: DOUBLE
43272: LD_VAR 0 7
43276: INC
43277: ST_TO_ADDR
43278: LD_INT 2
43280: PUSH
43281: FOR_DOWNTO
43282: IFFALSE 43366
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43284: LD_ADDR_VAR 0 6
43288: PUSH
43289: LD_VAR 0 7
43293: PUSH
43294: LD_VAR 0 5
43298: PUSH
43299: LD_INT 1
43301: MINUS
43302: ARRAY
43303: PPUSH
43304: LD_VAR 0 2
43308: PUSH
43309: LD_VAR 0 5
43313: PUSH
43314: LD_INT 1
43316: MINUS
43317: ARRAY
43318: PPUSH
43319: LD_VAR 0 7
43323: PUSH
43324: LD_VAR 0 5
43328: ARRAY
43329: PPUSH
43330: CALL_OW 1
43334: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43335: LD_ADDR_VAR 0 7
43339: PUSH
43340: LD_VAR 0 7
43344: PPUSH
43345: LD_VAR 0 5
43349: PUSH
43350: LD_INT 1
43352: MINUS
43353: PPUSH
43354: LD_VAR 0 6
43358: PPUSH
43359: CALL_OW 1
43363: ST_TO_ADDR
// end ;
43364: GO 43281
43366: POP
43367: POP
// result := s_arr [ 1 ] ;
43368: LD_ADDR_VAR 0 4
43372: PUSH
43373: LD_VAR 0 7
43377: PUSH
43378: LD_INT 1
43380: ARRAY
43381: ST_TO_ADDR
// end ; end ;
43382: LD_VAR 0 4
43386: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43387: LD_INT 0
43389: PPUSH
43390: PPUSH
// if not list then
43391: LD_VAR 0 1
43395: NOT
43396: IFFALSE 43400
// exit ;
43398: GO 43491
// i := list [ pos1 ] ;
43400: LD_ADDR_VAR 0 5
43404: PUSH
43405: LD_VAR 0 1
43409: PUSH
43410: LD_VAR 0 2
43414: ARRAY
43415: ST_TO_ADDR
// if not i then
43416: LD_VAR 0 5
43420: NOT
43421: IFFALSE 43425
// exit ;
43423: GO 43491
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43425: LD_ADDR_VAR 0 1
43429: PUSH
43430: LD_VAR 0 1
43434: PPUSH
43435: LD_VAR 0 2
43439: PPUSH
43440: LD_VAR 0 1
43444: PUSH
43445: LD_VAR 0 3
43449: ARRAY
43450: PPUSH
43451: CALL_OW 1
43455: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43456: LD_ADDR_VAR 0 1
43460: PUSH
43461: LD_VAR 0 1
43465: PPUSH
43466: LD_VAR 0 3
43470: PPUSH
43471: LD_VAR 0 5
43475: PPUSH
43476: CALL_OW 1
43480: ST_TO_ADDR
// result := list ;
43481: LD_ADDR_VAR 0 4
43485: PUSH
43486: LD_VAR 0 1
43490: ST_TO_ADDR
// end ;
43491: LD_VAR 0 4
43495: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43496: LD_INT 0
43498: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43499: LD_ADDR_VAR 0 5
43503: PUSH
43504: LD_VAR 0 1
43508: PPUSH
43509: CALL_OW 250
43513: PPUSH
43514: LD_VAR 0 1
43518: PPUSH
43519: CALL_OW 251
43523: PPUSH
43524: LD_VAR 0 2
43528: PPUSH
43529: LD_VAR 0 3
43533: PPUSH
43534: LD_VAR 0 4
43538: PPUSH
43539: CALL 43549 0 5
43543: ST_TO_ADDR
// end ;
43544: LD_VAR 0 5
43548: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43549: LD_INT 0
43551: PPUSH
43552: PPUSH
43553: PPUSH
43554: PPUSH
// if not list then
43555: LD_VAR 0 3
43559: NOT
43560: IFFALSE 43564
// exit ;
43562: GO 43952
// result := [ ] ;
43564: LD_ADDR_VAR 0 6
43568: PUSH
43569: EMPTY
43570: ST_TO_ADDR
// for i in list do
43571: LD_ADDR_VAR 0 7
43575: PUSH
43576: LD_VAR 0 3
43580: PUSH
43581: FOR_IN
43582: IFFALSE 43784
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43584: LD_ADDR_VAR 0 9
43588: PUSH
43589: LD_VAR 0 7
43593: PPUSH
43594: LD_VAR 0 1
43598: PPUSH
43599: LD_VAR 0 2
43603: PPUSH
43604: CALL_OW 297
43608: ST_TO_ADDR
// if not result then
43609: LD_VAR 0 6
43613: NOT
43614: IFFALSE 43640
// result := [ [ i , tmp ] ] else
43616: LD_ADDR_VAR 0 6
43620: PUSH
43621: LD_VAR 0 7
43625: PUSH
43626: LD_VAR 0 9
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: EMPTY
43636: LIST
43637: ST_TO_ADDR
43638: GO 43782
// begin if result [ result ] [ 2 ] < tmp then
43640: LD_VAR 0 6
43644: PUSH
43645: LD_VAR 0 6
43649: ARRAY
43650: PUSH
43651: LD_INT 2
43653: ARRAY
43654: PUSH
43655: LD_VAR 0 9
43659: LESS
43660: IFFALSE 43702
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43662: LD_ADDR_VAR 0 6
43666: PUSH
43667: LD_VAR 0 6
43671: PPUSH
43672: LD_VAR 0 6
43676: PUSH
43677: LD_INT 1
43679: PLUS
43680: PPUSH
43681: LD_VAR 0 7
43685: PUSH
43686: LD_VAR 0 9
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PPUSH
43695: CALL_OW 2
43699: ST_TO_ADDR
43700: GO 43782
// for j = 1 to result do
43702: LD_ADDR_VAR 0 8
43706: PUSH
43707: DOUBLE
43708: LD_INT 1
43710: DEC
43711: ST_TO_ADDR
43712: LD_VAR 0 6
43716: PUSH
43717: FOR_TO
43718: IFFALSE 43780
// begin if tmp < result [ j ] [ 2 ] then
43720: LD_VAR 0 9
43724: PUSH
43725: LD_VAR 0 6
43729: PUSH
43730: LD_VAR 0 8
43734: ARRAY
43735: PUSH
43736: LD_INT 2
43738: ARRAY
43739: LESS
43740: IFFALSE 43778
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43742: LD_ADDR_VAR 0 6
43746: PUSH
43747: LD_VAR 0 6
43751: PPUSH
43752: LD_VAR 0 8
43756: PPUSH
43757: LD_VAR 0 7
43761: PUSH
43762: LD_VAR 0 9
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PPUSH
43771: CALL_OW 2
43775: ST_TO_ADDR
// break ;
43776: GO 43780
// end ; end ;
43778: GO 43717
43780: POP
43781: POP
// end ; end ;
43782: GO 43581
43784: POP
43785: POP
// if result and not asc then
43786: LD_VAR 0 6
43790: PUSH
43791: LD_VAR 0 4
43795: NOT
43796: AND
43797: IFFALSE 43872
// begin tmp := result ;
43799: LD_ADDR_VAR 0 9
43803: PUSH
43804: LD_VAR 0 6
43808: ST_TO_ADDR
// for i = tmp downto 1 do
43809: LD_ADDR_VAR 0 7
43813: PUSH
43814: DOUBLE
43815: LD_VAR 0 9
43819: INC
43820: ST_TO_ADDR
43821: LD_INT 1
43823: PUSH
43824: FOR_DOWNTO
43825: IFFALSE 43870
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43827: LD_ADDR_VAR 0 6
43831: PUSH
43832: LD_VAR 0 6
43836: PPUSH
43837: LD_VAR 0 9
43841: PUSH
43842: LD_VAR 0 7
43846: MINUS
43847: PUSH
43848: LD_INT 1
43850: PLUS
43851: PPUSH
43852: LD_VAR 0 9
43856: PUSH
43857: LD_VAR 0 7
43861: ARRAY
43862: PPUSH
43863: CALL_OW 1
43867: ST_TO_ADDR
43868: GO 43824
43870: POP
43871: POP
// end ; tmp := [ ] ;
43872: LD_ADDR_VAR 0 9
43876: PUSH
43877: EMPTY
43878: ST_TO_ADDR
// if mode then
43879: LD_VAR 0 5
43883: IFFALSE 43952
// begin for i = 1 to result do
43885: LD_ADDR_VAR 0 7
43889: PUSH
43890: DOUBLE
43891: LD_INT 1
43893: DEC
43894: ST_TO_ADDR
43895: LD_VAR 0 6
43899: PUSH
43900: FOR_TO
43901: IFFALSE 43940
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43903: LD_ADDR_VAR 0 9
43907: PUSH
43908: LD_VAR 0 9
43912: PPUSH
43913: LD_VAR 0 7
43917: PPUSH
43918: LD_VAR 0 6
43922: PUSH
43923: LD_VAR 0 7
43927: ARRAY
43928: PUSH
43929: LD_INT 1
43931: ARRAY
43932: PPUSH
43933: CALL_OW 1
43937: ST_TO_ADDR
43938: GO 43900
43940: POP
43941: POP
// result := tmp ;
43942: LD_ADDR_VAR 0 6
43946: PUSH
43947: LD_VAR 0 9
43951: ST_TO_ADDR
// end ; end ;
43952: LD_VAR 0 6
43956: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43957: LD_INT 0
43959: PPUSH
43960: PPUSH
43961: PPUSH
43962: PPUSH
43963: PPUSH
43964: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43965: LD_ADDR_VAR 0 5
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: EMPTY
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: ST_TO_ADDR
// if not x or not y then
43987: LD_VAR 0 2
43991: NOT
43992: PUSH
43993: LD_VAR 0 3
43997: NOT
43998: OR
43999: IFFALSE 44003
// exit ;
44001: GO 45655
// if not range then
44003: LD_VAR 0 4
44007: NOT
44008: IFFALSE 44018
// range := 10 ;
44010: LD_ADDR_VAR 0 4
44014: PUSH
44015: LD_INT 10
44017: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44018: LD_ADDR_VAR 0 8
44022: PUSH
44023: LD_INT 81
44025: PUSH
44026: LD_VAR 0 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 92
44037: PUSH
44038: LD_VAR 0 2
44042: PUSH
44043: LD_VAR 0 3
44047: PUSH
44048: LD_VAR 0 4
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: LD_INT 21
44064: PUSH
44065: LD_INT 3
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: PPUSH
44081: CALL_OW 69
44085: ST_TO_ADDR
// if not tmp then
44086: LD_VAR 0 8
44090: NOT
44091: IFFALSE 44095
// exit ;
44093: GO 45655
// for i in tmp do
44095: LD_ADDR_VAR 0 6
44099: PUSH
44100: LD_VAR 0 8
44104: PUSH
44105: FOR_IN
44106: IFFALSE 45630
// begin points := [ 0 , 0 , 0 ] ;
44108: LD_ADDR_VAR 0 9
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: LIST
44126: ST_TO_ADDR
// bpoints := 1 ;
44127: LD_ADDR_VAR 0 10
44131: PUSH
44132: LD_INT 1
44134: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44135: LD_VAR 0 6
44139: PPUSH
44140: CALL_OW 247
44144: PUSH
44145: LD_INT 1
44147: DOUBLE
44148: EQUAL
44149: IFTRUE 44153
44151: GO 44731
44153: POP
// begin if GetClass ( i ) = 1 then
44154: LD_VAR 0 6
44158: PPUSH
44159: CALL_OW 257
44163: PUSH
44164: LD_INT 1
44166: EQUAL
44167: IFFALSE 44188
// points := [ 10 , 5 , 3 ] ;
44169: LD_ADDR_VAR 0 9
44173: PUSH
44174: LD_INT 10
44176: PUSH
44177: LD_INT 5
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: LIST
44187: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44188: LD_VAR 0 6
44192: PPUSH
44193: CALL_OW 257
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: LD_INT 3
44203: PUSH
44204: LD_INT 4
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: IN
44212: IFFALSE 44233
// points := [ 3 , 2 , 1 ] ;
44214: LD_ADDR_VAR 0 9
44218: PUSH
44219: LD_INT 3
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44233: LD_VAR 0 6
44237: PPUSH
44238: CALL_OW 257
44242: PUSH
44243: LD_INT 5
44245: EQUAL
44246: IFFALSE 44267
// points := [ 130 , 5 , 2 ] ;
44248: LD_ADDR_VAR 0 9
44252: PUSH
44253: LD_INT 130
44255: PUSH
44256: LD_INT 5
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: LIST
44266: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44267: LD_VAR 0 6
44271: PPUSH
44272: CALL_OW 257
44276: PUSH
44277: LD_INT 8
44279: EQUAL
44280: IFFALSE 44301
// points := [ 35 , 35 , 30 ] ;
44282: LD_ADDR_VAR 0 9
44286: PUSH
44287: LD_INT 35
44289: PUSH
44290: LD_INT 35
44292: PUSH
44293: LD_INT 30
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44301: LD_VAR 0 6
44305: PPUSH
44306: CALL_OW 257
44310: PUSH
44311: LD_INT 9
44313: EQUAL
44314: IFFALSE 44335
// points := [ 20 , 55 , 40 ] ;
44316: LD_ADDR_VAR 0 9
44320: PUSH
44321: LD_INT 20
44323: PUSH
44324: LD_INT 55
44326: PUSH
44327: LD_INT 40
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: LIST
44334: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44335: LD_VAR 0 6
44339: PPUSH
44340: CALL_OW 257
44344: PUSH
44345: LD_INT 12
44347: PUSH
44348: LD_INT 16
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: IN
44355: IFFALSE 44376
// points := [ 5 , 3 , 2 ] ;
44357: LD_ADDR_VAR 0 9
44361: PUSH
44362: LD_INT 5
44364: PUSH
44365: LD_INT 3
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: LIST
44375: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44376: LD_VAR 0 6
44380: PPUSH
44381: CALL_OW 257
44385: PUSH
44386: LD_INT 17
44388: EQUAL
44389: IFFALSE 44410
// points := [ 100 , 50 , 75 ] ;
44391: LD_ADDR_VAR 0 9
44395: PUSH
44396: LD_INT 100
44398: PUSH
44399: LD_INT 50
44401: PUSH
44402: LD_INT 75
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44410: LD_VAR 0 6
44414: PPUSH
44415: CALL_OW 257
44419: PUSH
44420: LD_INT 15
44422: EQUAL
44423: IFFALSE 44444
// points := [ 10 , 5 , 3 ] ;
44425: LD_ADDR_VAR 0 9
44429: PUSH
44430: LD_INT 10
44432: PUSH
44433: LD_INT 5
44435: PUSH
44436: LD_INT 3
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: LIST
44443: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44444: LD_VAR 0 6
44448: PPUSH
44449: CALL_OW 257
44453: PUSH
44454: LD_INT 14
44456: EQUAL
44457: IFFALSE 44478
// points := [ 10 , 0 , 0 ] ;
44459: LD_ADDR_VAR 0 9
44463: PUSH
44464: LD_INT 10
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: LIST
44477: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44478: LD_VAR 0 6
44482: PPUSH
44483: CALL_OW 257
44487: PUSH
44488: LD_INT 11
44490: EQUAL
44491: IFFALSE 44512
// points := [ 30 , 10 , 5 ] ;
44493: LD_ADDR_VAR 0 9
44497: PUSH
44498: LD_INT 30
44500: PUSH
44501: LD_INT 10
44503: PUSH
44504: LD_INT 5
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: LIST
44511: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44512: LD_VAR 0 1
44516: PPUSH
44517: LD_INT 5
44519: PPUSH
44520: CALL_OW 321
44524: PUSH
44525: LD_INT 2
44527: EQUAL
44528: IFFALSE 44545
// bpoints := bpoints * 1.8 ;
44530: LD_ADDR_VAR 0 10
44534: PUSH
44535: LD_VAR 0 10
44539: PUSH
44540: LD_REAL  1.80000000000000E+0000
44543: MUL
44544: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44545: LD_VAR 0 6
44549: PPUSH
44550: CALL_OW 257
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: LD_INT 3
44563: PUSH
44564: LD_INT 4
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: IN
44573: PUSH
44574: LD_VAR 0 1
44578: PPUSH
44579: LD_INT 51
44581: PPUSH
44582: CALL_OW 321
44586: PUSH
44587: LD_INT 2
44589: EQUAL
44590: AND
44591: IFFALSE 44608
// bpoints := bpoints * 1.2 ;
44593: LD_ADDR_VAR 0 10
44597: PUSH
44598: LD_VAR 0 10
44602: PUSH
44603: LD_REAL  1.20000000000000E+0000
44606: MUL
44607: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44608: LD_VAR 0 6
44612: PPUSH
44613: CALL_OW 257
44617: PUSH
44618: LD_INT 5
44620: PUSH
44621: LD_INT 7
44623: PUSH
44624: LD_INT 9
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: IN
44632: PUSH
44633: LD_VAR 0 1
44637: PPUSH
44638: LD_INT 52
44640: PPUSH
44641: CALL_OW 321
44645: PUSH
44646: LD_INT 2
44648: EQUAL
44649: AND
44650: IFFALSE 44667
// bpoints := bpoints * 1.5 ;
44652: LD_ADDR_VAR 0 10
44656: PUSH
44657: LD_VAR 0 10
44661: PUSH
44662: LD_REAL  1.50000000000000E+0000
44665: MUL
44666: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44667: LD_VAR 0 1
44671: PPUSH
44672: LD_INT 66
44674: PPUSH
44675: CALL_OW 321
44679: PUSH
44680: LD_INT 2
44682: EQUAL
44683: IFFALSE 44700
// bpoints := bpoints * 1.1 ;
44685: LD_ADDR_VAR 0 10
44689: PUSH
44690: LD_VAR 0 10
44694: PUSH
44695: LD_REAL  1.10000000000000E+0000
44698: MUL
44699: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44700: LD_ADDR_VAR 0 10
44704: PUSH
44705: LD_VAR 0 10
44709: PUSH
44710: LD_VAR 0 6
44714: PPUSH
44715: LD_INT 1
44717: PPUSH
44718: CALL_OW 259
44722: PUSH
44723: LD_REAL  1.15000000000000E+0000
44726: MUL
44727: MUL
44728: ST_TO_ADDR
// end ; unit_vehicle :
44729: GO 45559
44731: LD_INT 2
44733: DOUBLE
44734: EQUAL
44735: IFTRUE 44739
44737: GO 45547
44739: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44740: LD_VAR 0 6
44744: PPUSH
44745: CALL_OW 264
44749: PUSH
44750: LD_INT 2
44752: PUSH
44753: LD_INT 42
44755: PUSH
44756: LD_INT 24
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: LIST
44763: IN
44764: IFFALSE 44785
// points := [ 25 , 5 , 3 ] ;
44766: LD_ADDR_VAR 0 9
44770: PUSH
44771: LD_INT 25
44773: PUSH
44774: LD_INT 5
44776: PUSH
44777: LD_INT 3
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44785: LD_VAR 0 6
44789: PPUSH
44790: CALL_OW 264
44794: PUSH
44795: LD_INT 4
44797: PUSH
44798: LD_INT 43
44800: PUSH
44801: LD_INT 25
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: LIST
44808: IN
44809: IFFALSE 44830
// points := [ 40 , 15 , 5 ] ;
44811: LD_ADDR_VAR 0 9
44815: PUSH
44816: LD_INT 40
44818: PUSH
44819: LD_INT 15
44821: PUSH
44822: LD_INT 5
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: LIST
44829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44830: LD_VAR 0 6
44834: PPUSH
44835: CALL_OW 264
44839: PUSH
44840: LD_INT 3
44842: PUSH
44843: LD_INT 23
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: IN
44850: IFFALSE 44871
// points := [ 7 , 25 , 8 ] ;
44852: LD_ADDR_VAR 0 9
44856: PUSH
44857: LD_INT 7
44859: PUSH
44860: LD_INT 25
44862: PUSH
44863: LD_INT 8
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44871: LD_VAR 0 6
44875: PPUSH
44876: CALL_OW 264
44880: PUSH
44881: LD_INT 5
44883: PUSH
44884: LD_INT 27
44886: PUSH
44887: LD_INT 44
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: IN
44895: IFFALSE 44916
// points := [ 14 , 50 , 16 ] ;
44897: LD_ADDR_VAR 0 9
44901: PUSH
44902: LD_INT 14
44904: PUSH
44905: LD_INT 50
44907: PUSH
44908: LD_INT 16
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: LIST
44915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44916: LD_VAR 0 6
44920: PPUSH
44921: CALL_OW 264
44925: PUSH
44926: LD_INT 6
44928: PUSH
44929: LD_INT 46
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: IN
44936: IFFALSE 44957
// points := [ 32 , 120 , 70 ] ;
44938: LD_ADDR_VAR 0 9
44942: PUSH
44943: LD_INT 32
44945: PUSH
44946: LD_INT 120
44948: PUSH
44949: LD_INT 70
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44957: LD_VAR 0 6
44961: PPUSH
44962: CALL_OW 264
44966: PUSH
44967: LD_INT 7
44969: PUSH
44970: LD_INT 28
44972: PUSH
44973: LD_INT 45
44975: PUSH
44976: LD_EXP 54
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: IN
44987: IFFALSE 45008
// points := [ 35 , 20 , 45 ] ;
44989: LD_ADDR_VAR 0 9
44993: PUSH
44994: LD_INT 35
44996: PUSH
44997: LD_INT 20
44999: PUSH
45000: LD_INT 45
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45008: LD_VAR 0 6
45012: PPUSH
45013: CALL_OW 264
45017: PUSH
45018: LD_INT 47
45020: PUSH
45021: EMPTY
45022: LIST
45023: IN
45024: IFFALSE 45045
// points := [ 67 , 45 , 75 ] ;
45026: LD_ADDR_VAR 0 9
45030: PUSH
45031: LD_INT 67
45033: PUSH
45034: LD_INT 45
45036: PUSH
45037: LD_INT 75
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45045: LD_VAR 0 6
45049: PPUSH
45050: CALL_OW 264
45054: PUSH
45055: LD_INT 26
45057: PUSH
45058: EMPTY
45059: LIST
45060: IN
45061: IFFALSE 45082
// points := [ 120 , 30 , 80 ] ;
45063: LD_ADDR_VAR 0 9
45067: PUSH
45068: LD_INT 120
45070: PUSH
45071: LD_INT 30
45073: PUSH
45074: LD_INT 80
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45082: LD_VAR 0 6
45086: PPUSH
45087: CALL_OW 264
45091: PUSH
45092: LD_INT 22
45094: PUSH
45095: EMPTY
45096: LIST
45097: IN
45098: IFFALSE 45119
// points := [ 40 , 1 , 1 ] ;
45100: LD_ADDR_VAR 0 9
45104: PUSH
45105: LD_INT 40
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: LIST
45118: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45119: LD_VAR 0 6
45123: PPUSH
45124: CALL_OW 264
45128: PUSH
45129: LD_INT 29
45131: PUSH
45132: EMPTY
45133: LIST
45134: IN
45135: IFFALSE 45156
// points := [ 70 , 200 , 400 ] ;
45137: LD_ADDR_VAR 0 9
45141: PUSH
45142: LD_INT 70
45144: PUSH
45145: LD_INT 200
45147: PUSH
45148: LD_INT 400
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: LIST
45155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45156: LD_VAR 0 6
45160: PPUSH
45161: CALL_OW 264
45165: PUSH
45166: LD_INT 14
45168: PUSH
45169: LD_INT 53
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: IN
45176: IFFALSE 45197
// points := [ 40 , 10 , 20 ] ;
45178: LD_ADDR_VAR 0 9
45182: PUSH
45183: LD_INT 40
45185: PUSH
45186: LD_INT 10
45188: PUSH
45189: LD_INT 20
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: LIST
45196: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45197: LD_VAR 0 6
45201: PPUSH
45202: CALL_OW 264
45206: PUSH
45207: LD_INT 9
45209: PUSH
45210: EMPTY
45211: LIST
45212: IN
45213: IFFALSE 45234
// points := [ 5 , 70 , 20 ] ;
45215: LD_ADDR_VAR 0 9
45219: PUSH
45220: LD_INT 5
45222: PUSH
45223: LD_INT 70
45225: PUSH
45226: LD_INT 20
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: LIST
45233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45234: LD_VAR 0 6
45238: PPUSH
45239: CALL_OW 264
45243: PUSH
45244: LD_INT 10
45246: PUSH
45247: EMPTY
45248: LIST
45249: IN
45250: IFFALSE 45271
// points := [ 35 , 110 , 70 ] ;
45252: LD_ADDR_VAR 0 9
45256: PUSH
45257: LD_INT 35
45259: PUSH
45260: LD_INT 110
45262: PUSH
45263: LD_INT 70
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45271: LD_VAR 0 6
45275: PPUSH
45276: CALL_OW 265
45280: PUSH
45281: LD_INT 25
45283: EQUAL
45284: IFFALSE 45305
// points := [ 80 , 65 , 100 ] ;
45286: LD_ADDR_VAR 0 9
45290: PUSH
45291: LD_INT 80
45293: PUSH
45294: LD_INT 65
45296: PUSH
45297: LD_INT 100
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: LIST
45304: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45305: LD_VAR 0 6
45309: PPUSH
45310: CALL_OW 263
45314: PUSH
45315: LD_INT 1
45317: EQUAL
45318: IFFALSE 45353
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45320: LD_ADDR_VAR 0 10
45324: PUSH
45325: LD_VAR 0 10
45329: PUSH
45330: LD_VAR 0 6
45334: PPUSH
45335: CALL_OW 311
45339: PPUSH
45340: LD_INT 3
45342: PPUSH
45343: CALL_OW 259
45347: PUSH
45348: LD_INT 4
45350: MUL
45351: MUL
45352: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45353: LD_VAR 0 6
45357: PPUSH
45358: CALL_OW 263
45362: PUSH
45363: LD_INT 2
45365: EQUAL
45366: IFFALSE 45417
// begin j := IsControledBy ( i ) ;
45368: LD_ADDR_VAR 0 7
45372: PUSH
45373: LD_VAR 0 6
45377: PPUSH
45378: CALL_OW 312
45382: ST_TO_ADDR
// if j then
45383: LD_VAR 0 7
45387: IFFALSE 45417
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45389: LD_ADDR_VAR 0 10
45393: PUSH
45394: LD_VAR 0 10
45398: PUSH
45399: LD_VAR 0 7
45403: PPUSH
45404: LD_INT 3
45406: PPUSH
45407: CALL_OW 259
45411: PUSH
45412: LD_INT 3
45414: MUL
45415: MUL
45416: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45417: LD_VAR 0 6
45421: PPUSH
45422: CALL_OW 264
45426: PUSH
45427: LD_INT 5
45429: PUSH
45430: LD_INT 6
45432: PUSH
45433: LD_INT 46
45435: PUSH
45436: LD_INT 44
45438: PUSH
45439: LD_INT 47
45441: PUSH
45442: LD_INT 45
45444: PUSH
45445: LD_INT 28
45447: PUSH
45448: LD_INT 7
45450: PUSH
45451: LD_INT 27
45453: PUSH
45454: LD_INT 29
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: IN
45469: PUSH
45470: LD_VAR 0 1
45474: PPUSH
45475: LD_INT 52
45477: PPUSH
45478: CALL_OW 321
45482: PUSH
45483: LD_INT 2
45485: EQUAL
45486: AND
45487: IFFALSE 45504
// bpoints := bpoints * 1.2 ;
45489: LD_ADDR_VAR 0 10
45493: PUSH
45494: LD_VAR 0 10
45498: PUSH
45499: LD_REAL  1.20000000000000E+0000
45502: MUL
45503: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45504: LD_VAR 0 6
45508: PPUSH
45509: CALL_OW 264
45513: PUSH
45514: LD_INT 6
45516: PUSH
45517: LD_INT 46
45519: PUSH
45520: LD_INT 47
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: LIST
45527: IN
45528: IFFALSE 45545
// bpoints := bpoints * 1.2 ;
45530: LD_ADDR_VAR 0 10
45534: PUSH
45535: LD_VAR 0 10
45539: PUSH
45540: LD_REAL  1.20000000000000E+0000
45543: MUL
45544: ST_TO_ADDR
// end ; unit_building :
45545: GO 45559
45547: LD_INT 3
45549: DOUBLE
45550: EQUAL
45551: IFTRUE 45555
45553: GO 45558
45555: POP
// ; end ;
45556: GO 45559
45558: POP
// for j = 1 to 3 do
45559: LD_ADDR_VAR 0 7
45563: PUSH
45564: DOUBLE
45565: LD_INT 1
45567: DEC
45568: ST_TO_ADDR
45569: LD_INT 3
45571: PUSH
45572: FOR_TO
45573: IFFALSE 45626
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45575: LD_ADDR_VAR 0 5
45579: PUSH
45580: LD_VAR 0 5
45584: PPUSH
45585: LD_VAR 0 7
45589: PPUSH
45590: LD_VAR 0 5
45594: PUSH
45595: LD_VAR 0 7
45599: ARRAY
45600: PUSH
45601: LD_VAR 0 9
45605: PUSH
45606: LD_VAR 0 7
45610: ARRAY
45611: PUSH
45612: LD_VAR 0 10
45616: MUL
45617: PLUS
45618: PPUSH
45619: CALL_OW 1
45623: ST_TO_ADDR
45624: GO 45572
45626: POP
45627: POP
// end ;
45628: GO 44105
45630: POP
45631: POP
// result := Replace ( result , 4 , tmp ) ;
45632: LD_ADDR_VAR 0 5
45636: PUSH
45637: LD_VAR 0 5
45641: PPUSH
45642: LD_INT 4
45644: PPUSH
45645: LD_VAR 0 8
45649: PPUSH
45650: CALL_OW 1
45654: ST_TO_ADDR
// end ;
45655: LD_VAR 0 5
45659: RET
// export function DangerAtRange ( unit , range ) ; begin
45660: LD_INT 0
45662: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45663: LD_ADDR_VAR 0 3
45667: PUSH
45668: LD_VAR 0 1
45672: PPUSH
45673: CALL_OW 255
45677: PPUSH
45678: LD_VAR 0 1
45682: PPUSH
45683: CALL_OW 250
45687: PPUSH
45688: LD_VAR 0 1
45692: PPUSH
45693: CALL_OW 251
45697: PPUSH
45698: LD_VAR 0 2
45702: PPUSH
45703: CALL 43957 0 4
45707: ST_TO_ADDR
// end ;
45708: LD_VAR 0 3
45712: RET
// export function DangerInArea ( side , area ) ; begin
45713: LD_INT 0
45715: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45716: LD_ADDR_VAR 0 3
45720: PUSH
45721: LD_VAR 0 2
45725: PPUSH
45726: LD_INT 81
45728: PUSH
45729: LD_VAR 0 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PPUSH
45738: CALL_OW 70
45742: ST_TO_ADDR
// end ;
45743: LD_VAR 0 3
45747: RET
// export function IsExtension ( b ) ; begin
45748: LD_INT 0
45750: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45751: LD_ADDR_VAR 0 2
45755: PUSH
45756: LD_VAR 0 1
45760: PUSH
45761: LD_INT 23
45763: PUSH
45764: LD_INT 20
45766: PUSH
45767: LD_INT 22
45769: PUSH
45770: LD_INT 17
45772: PUSH
45773: LD_INT 24
45775: PUSH
45776: LD_INT 21
45778: PUSH
45779: LD_INT 19
45781: PUSH
45782: LD_INT 16
45784: PUSH
45785: LD_INT 25
45787: PUSH
45788: LD_INT 18
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: IN
45803: ST_TO_ADDR
// end ;
45804: LD_VAR 0 2
45808: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45809: LD_INT 0
45811: PPUSH
45812: PPUSH
45813: PPUSH
// result := [ ] ;
45814: LD_ADDR_VAR 0 4
45818: PUSH
45819: EMPTY
45820: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45821: LD_ADDR_VAR 0 5
45825: PUSH
45826: LD_VAR 0 2
45830: PPUSH
45831: LD_INT 21
45833: PUSH
45834: LD_INT 3
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PPUSH
45841: CALL_OW 70
45845: ST_TO_ADDR
// if not tmp then
45846: LD_VAR 0 5
45850: NOT
45851: IFFALSE 45855
// exit ;
45853: GO 45919
// if checkLink then
45855: LD_VAR 0 3
45859: IFFALSE 45909
// begin for i in tmp do
45861: LD_ADDR_VAR 0 6
45865: PUSH
45866: LD_VAR 0 5
45870: PUSH
45871: FOR_IN
45872: IFFALSE 45907
// if GetBase ( i ) <> base then
45874: LD_VAR 0 6
45878: PPUSH
45879: CALL_OW 274
45883: PUSH
45884: LD_VAR 0 1
45888: NONEQUAL
45889: IFFALSE 45905
// ComLinkToBase ( base , i ) ;
45891: LD_VAR 0 1
45895: PPUSH
45896: LD_VAR 0 6
45900: PPUSH
45901: CALL_OW 169
45905: GO 45871
45907: POP
45908: POP
// end ; result := tmp ;
45909: LD_ADDR_VAR 0 4
45913: PUSH
45914: LD_VAR 0 5
45918: ST_TO_ADDR
// end ;
45919: LD_VAR 0 4
45923: RET
// export function ComComplete ( units , b ) ; var i ; begin
45924: LD_INT 0
45926: PPUSH
45927: PPUSH
// if not units then
45928: LD_VAR 0 1
45932: NOT
45933: IFFALSE 45937
// exit ;
45935: GO 46027
// for i in units do
45937: LD_ADDR_VAR 0 4
45941: PUSH
45942: LD_VAR 0 1
45946: PUSH
45947: FOR_IN
45948: IFFALSE 46025
// if BuildingStatus ( b ) = bs_build then
45950: LD_VAR 0 2
45954: PPUSH
45955: CALL_OW 461
45959: PUSH
45960: LD_INT 1
45962: EQUAL
45963: IFFALSE 46023
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45965: LD_VAR 0 4
45969: PPUSH
45970: LD_STRING h
45972: PUSH
45973: LD_VAR 0 2
45977: PPUSH
45978: CALL_OW 250
45982: PUSH
45983: LD_VAR 0 2
45987: PPUSH
45988: CALL_OW 251
45992: PUSH
45993: LD_VAR 0 2
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: PUSH
46016: EMPTY
46017: LIST
46018: PPUSH
46019: CALL_OW 446
46023: GO 45947
46025: POP
46026: POP
// end ;
46027: LD_VAR 0 3
46031: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46032: LD_INT 0
46034: PPUSH
46035: PPUSH
46036: PPUSH
46037: PPUSH
46038: PPUSH
46039: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46040: LD_VAR 0 1
46044: NOT
46045: PUSH
46046: LD_VAR 0 1
46050: PPUSH
46051: CALL_OW 263
46055: PUSH
46056: LD_INT 2
46058: NONEQUAL
46059: OR
46060: IFFALSE 46064
// exit ;
46062: GO 46380
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46064: LD_ADDR_VAR 0 6
46068: PUSH
46069: LD_INT 22
46071: PUSH
46072: LD_VAR 0 1
46076: PPUSH
46077: CALL_OW 255
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 30
46091: PUSH
46092: LD_INT 36
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 34
46101: PUSH
46102: LD_INT 31
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PPUSH
46118: CALL_OW 69
46122: ST_TO_ADDR
// if not tmp then
46123: LD_VAR 0 6
46127: NOT
46128: IFFALSE 46132
// exit ;
46130: GO 46380
// result := [ ] ;
46132: LD_ADDR_VAR 0 2
46136: PUSH
46137: EMPTY
46138: ST_TO_ADDR
// for i in tmp do
46139: LD_ADDR_VAR 0 3
46143: PUSH
46144: LD_VAR 0 6
46148: PUSH
46149: FOR_IN
46150: IFFALSE 46221
// begin t := UnitsInside ( i ) ;
46152: LD_ADDR_VAR 0 4
46156: PUSH
46157: LD_VAR 0 3
46161: PPUSH
46162: CALL_OW 313
46166: ST_TO_ADDR
// if t then
46167: LD_VAR 0 4
46171: IFFALSE 46219
// for j in t do
46173: LD_ADDR_VAR 0 7
46177: PUSH
46178: LD_VAR 0 4
46182: PUSH
46183: FOR_IN
46184: IFFALSE 46217
// result := Replace ( result , result + 1 , j ) ;
46186: LD_ADDR_VAR 0 2
46190: PUSH
46191: LD_VAR 0 2
46195: PPUSH
46196: LD_VAR 0 2
46200: PUSH
46201: LD_INT 1
46203: PLUS
46204: PPUSH
46205: LD_VAR 0 7
46209: PPUSH
46210: CALL_OW 1
46214: ST_TO_ADDR
46215: GO 46183
46217: POP
46218: POP
// end ;
46219: GO 46149
46221: POP
46222: POP
// if not result then
46223: LD_VAR 0 2
46227: NOT
46228: IFFALSE 46232
// exit ;
46230: GO 46380
// mech := result [ 1 ] ;
46232: LD_ADDR_VAR 0 5
46236: PUSH
46237: LD_VAR 0 2
46241: PUSH
46242: LD_INT 1
46244: ARRAY
46245: ST_TO_ADDR
// if result > 1 then
46246: LD_VAR 0 2
46250: PUSH
46251: LD_INT 1
46253: GREATER
46254: IFFALSE 46366
// begin for i = 2 to result do
46256: LD_ADDR_VAR 0 3
46260: PUSH
46261: DOUBLE
46262: LD_INT 2
46264: DEC
46265: ST_TO_ADDR
46266: LD_VAR 0 2
46270: PUSH
46271: FOR_TO
46272: IFFALSE 46364
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46274: LD_ADDR_VAR 0 4
46278: PUSH
46279: LD_VAR 0 2
46283: PUSH
46284: LD_VAR 0 3
46288: ARRAY
46289: PPUSH
46290: LD_INT 3
46292: PPUSH
46293: CALL_OW 259
46297: PUSH
46298: LD_VAR 0 2
46302: PUSH
46303: LD_VAR 0 3
46307: ARRAY
46308: PPUSH
46309: CALL_OW 432
46313: MINUS
46314: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46315: LD_VAR 0 4
46319: PUSH
46320: LD_VAR 0 5
46324: PPUSH
46325: LD_INT 3
46327: PPUSH
46328: CALL_OW 259
46332: PUSH
46333: LD_VAR 0 5
46337: PPUSH
46338: CALL_OW 432
46342: MINUS
46343: GREATEREQUAL
46344: IFFALSE 46362
// mech := result [ i ] ;
46346: LD_ADDR_VAR 0 5
46350: PUSH
46351: LD_VAR 0 2
46355: PUSH
46356: LD_VAR 0 3
46360: ARRAY
46361: ST_TO_ADDR
// end ;
46362: GO 46271
46364: POP
46365: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46366: LD_VAR 0 1
46370: PPUSH
46371: LD_VAR 0 5
46375: PPUSH
46376: CALL_OW 135
// end ;
46380: LD_VAR 0 2
46384: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46385: LD_INT 0
46387: PPUSH
46388: PPUSH
46389: PPUSH
46390: PPUSH
46391: PPUSH
46392: PPUSH
46393: PPUSH
46394: PPUSH
46395: PPUSH
46396: PPUSH
46397: PPUSH
46398: PPUSH
46399: PPUSH
// result := [ ] ;
46400: LD_ADDR_VAR 0 7
46404: PUSH
46405: EMPTY
46406: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46407: LD_VAR 0 1
46411: PPUSH
46412: CALL_OW 266
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: IN
46427: NOT
46428: IFFALSE 46432
// exit ;
46430: GO 48066
// if name then
46432: LD_VAR 0 3
46436: IFFALSE 46452
// SetBName ( base_dep , name ) ;
46438: LD_VAR 0 1
46442: PPUSH
46443: LD_VAR 0 3
46447: PPUSH
46448: CALL_OW 500
// base := GetBase ( base_dep ) ;
46452: LD_ADDR_VAR 0 15
46456: PUSH
46457: LD_VAR 0 1
46461: PPUSH
46462: CALL_OW 274
46466: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46467: LD_ADDR_VAR 0 16
46471: PUSH
46472: LD_VAR 0 1
46476: PPUSH
46477: CALL_OW 255
46481: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46482: LD_ADDR_VAR 0 17
46486: PUSH
46487: LD_VAR 0 1
46491: PPUSH
46492: CALL_OW 248
46496: ST_TO_ADDR
// if sources then
46497: LD_VAR 0 5
46501: IFFALSE 46548
// for i = 1 to 3 do
46503: LD_ADDR_VAR 0 8
46507: PUSH
46508: DOUBLE
46509: LD_INT 1
46511: DEC
46512: ST_TO_ADDR
46513: LD_INT 3
46515: PUSH
46516: FOR_TO
46517: IFFALSE 46546
// AddResourceType ( base , i , sources [ i ] ) ;
46519: LD_VAR 0 15
46523: PPUSH
46524: LD_VAR 0 8
46528: PPUSH
46529: LD_VAR 0 5
46533: PUSH
46534: LD_VAR 0 8
46538: ARRAY
46539: PPUSH
46540: CALL_OW 276
46544: GO 46516
46546: POP
46547: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46548: LD_ADDR_VAR 0 18
46552: PUSH
46553: LD_VAR 0 15
46557: PPUSH
46558: LD_VAR 0 2
46562: PPUSH
46563: LD_INT 1
46565: PPUSH
46566: CALL 45809 0 3
46570: ST_TO_ADDR
// InitHc ;
46571: CALL_OW 19
// InitUc ;
46575: CALL_OW 18
// uc_side := side ;
46579: LD_ADDR_OWVAR 20
46583: PUSH
46584: LD_VAR 0 16
46588: ST_TO_ADDR
// uc_nation := nation ;
46589: LD_ADDR_OWVAR 21
46593: PUSH
46594: LD_VAR 0 17
46598: ST_TO_ADDR
// if buildings then
46599: LD_VAR 0 18
46603: IFFALSE 47925
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46605: LD_ADDR_VAR 0 19
46609: PUSH
46610: LD_VAR 0 18
46614: PPUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 30
46620: PUSH
46621: LD_INT 29
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 30
46630: PUSH
46631: LD_INT 30
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: LIST
46642: PPUSH
46643: CALL_OW 72
46647: ST_TO_ADDR
// if tmp then
46648: LD_VAR 0 19
46652: IFFALSE 46700
// for i in tmp do
46654: LD_ADDR_VAR 0 8
46658: PUSH
46659: LD_VAR 0 19
46663: PUSH
46664: FOR_IN
46665: IFFALSE 46698
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46667: LD_VAR 0 8
46671: PPUSH
46672: CALL_OW 250
46676: PPUSH
46677: LD_VAR 0 8
46681: PPUSH
46682: CALL_OW 251
46686: PPUSH
46687: LD_VAR 0 16
46691: PPUSH
46692: CALL_OW 441
46696: GO 46664
46698: POP
46699: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46700: LD_VAR 0 18
46704: PPUSH
46705: LD_INT 2
46707: PUSH
46708: LD_INT 30
46710: PUSH
46711: LD_INT 32
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 30
46720: PUSH
46721: LD_INT 33
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: LIST
46732: PPUSH
46733: CALL_OW 72
46737: IFFALSE 46825
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46739: LD_ADDR_VAR 0 8
46743: PUSH
46744: LD_VAR 0 18
46748: PPUSH
46749: LD_INT 2
46751: PUSH
46752: LD_INT 30
46754: PUSH
46755: LD_INT 32
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 30
46764: PUSH
46765: LD_INT 33
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: LIST
46776: PPUSH
46777: CALL_OW 72
46781: PUSH
46782: FOR_IN
46783: IFFALSE 46823
// begin if not GetBWeapon ( i ) then
46785: LD_VAR 0 8
46789: PPUSH
46790: CALL_OW 269
46794: NOT
46795: IFFALSE 46821
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46797: LD_VAR 0 8
46801: PPUSH
46802: LD_VAR 0 8
46806: PPUSH
46807: LD_VAR 0 2
46811: PPUSH
46812: CALL 48071 0 2
46816: PPUSH
46817: CALL_OW 431
// end ;
46821: GO 46782
46823: POP
46824: POP
// end ; for i = 1 to personel do
46825: LD_ADDR_VAR 0 8
46829: PUSH
46830: DOUBLE
46831: LD_INT 1
46833: DEC
46834: ST_TO_ADDR
46835: LD_VAR 0 6
46839: PUSH
46840: FOR_TO
46841: IFFALSE 47905
// begin if i > 4 then
46843: LD_VAR 0 8
46847: PUSH
46848: LD_INT 4
46850: GREATER
46851: IFFALSE 46855
// break ;
46853: GO 47905
// case i of 1 :
46855: LD_VAR 0 8
46859: PUSH
46860: LD_INT 1
46862: DOUBLE
46863: EQUAL
46864: IFTRUE 46868
46866: GO 46948
46868: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46869: LD_ADDR_VAR 0 12
46873: PUSH
46874: LD_VAR 0 18
46878: PPUSH
46879: LD_INT 22
46881: PUSH
46882: LD_VAR 0 16
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 58
46893: PUSH
46894: EMPTY
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: LD_INT 30
46902: PUSH
46903: LD_INT 32
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 30
46912: PUSH
46913: LD_INT 4
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 30
46922: PUSH
46923: LD_INT 5
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: LIST
46940: PPUSH
46941: CALL_OW 72
46945: ST_TO_ADDR
46946: GO 47170
46948: LD_INT 2
46950: DOUBLE
46951: EQUAL
46952: IFTRUE 46956
46954: GO 47018
46956: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46957: LD_ADDR_VAR 0 12
46961: PUSH
46962: LD_VAR 0 18
46966: PPUSH
46967: LD_INT 22
46969: PUSH
46970: LD_VAR 0 16
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: LD_INT 30
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 30
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PPUSH
47011: CALL_OW 72
47015: ST_TO_ADDR
47016: GO 47170
47018: LD_INT 3
47020: DOUBLE
47021: EQUAL
47022: IFTRUE 47026
47024: GO 47088
47026: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47027: LD_ADDR_VAR 0 12
47031: PUSH
47032: LD_VAR 0 18
47036: PPUSH
47037: LD_INT 22
47039: PUSH
47040: LD_VAR 0 16
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: LD_INT 30
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 30
47064: PUSH
47065: LD_INT 3
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: LIST
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PPUSH
47081: CALL_OW 72
47085: ST_TO_ADDR
47086: GO 47170
47088: LD_INT 4
47090: DOUBLE
47091: EQUAL
47092: IFTRUE 47096
47094: GO 47169
47096: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47097: LD_ADDR_VAR 0 12
47101: PUSH
47102: LD_VAR 0 18
47106: PPUSH
47107: LD_INT 22
47109: PUSH
47110: LD_VAR 0 16
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: LD_INT 30
47124: PUSH
47125: LD_INT 6
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 30
47134: PUSH
47135: LD_INT 7
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 30
47144: PUSH
47145: LD_INT 8
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PPUSH
47162: CALL_OW 72
47166: ST_TO_ADDR
47167: GO 47170
47169: POP
// if i = 1 then
47170: LD_VAR 0 8
47174: PUSH
47175: LD_INT 1
47177: EQUAL
47178: IFFALSE 47289
// begin tmp := [ ] ;
47180: LD_ADDR_VAR 0 19
47184: PUSH
47185: EMPTY
47186: ST_TO_ADDR
// for j in f do
47187: LD_ADDR_VAR 0 9
47191: PUSH
47192: LD_VAR 0 12
47196: PUSH
47197: FOR_IN
47198: IFFALSE 47271
// if GetBType ( j ) = b_bunker then
47200: LD_VAR 0 9
47204: PPUSH
47205: CALL_OW 266
47209: PUSH
47210: LD_INT 32
47212: EQUAL
47213: IFFALSE 47240
// tmp := Insert ( tmp , 1 , j ) else
47215: LD_ADDR_VAR 0 19
47219: PUSH
47220: LD_VAR 0 19
47224: PPUSH
47225: LD_INT 1
47227: PPUSH
47228: LD_VAR 0 9
47232: PPUSH
47233: CALL_OW 2
47237: ST_TO_ADDR
47238: GO 47269
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47240: LD_ADDR_VAR 0 19
47244: PUSH
47245: LD_VAR 0 19
47249: PPUSH
47250: LD_VAR 0 19
47254: PUSH
47255: LD_INT 1
47257: PLUS
47258: PPUSH
47259: LD_VAR 0 9
47263: PPUSH
47264: CALL_OW 2
47268: ST_TO_ADDR
47269: GO 47197
47271: POP
47272: POP
// if tmp then
47273: LD_VAR 0 19
47277: IFFALSE 47289
// f := tmp ;
47279: LD_ADDR_VAR 0 12
47283: PUSH
47284: LD_VAR 0 19
47288: ST_TO_ADDR
// end ; x := personel [ i ] ;
47289: LD_ADDR_VAR 0 13
47293: PUSH
47294: LD_VAR 0 6
47298: PUSH
47299: LD_VAR 0 8
47303: ARRAY
47304: ST_TO_ADDR
// if x = - 1 then
47305: LD_VAR 0 13
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: EQUAL
47314: IFFALSE 47523
// begin for j in f do
47316: LD_ADDR_VAR 0 9
47320: PUSH
47321: LD_VAR 0 12
47325: PUSH
47326: FOR_IN
47327: IFFALSE 47519
// repeat InitHc ;
47329: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47333: LD_VAR 0 9
47337: PPUSH
47338: CALL_OW 266
47342: PUSH
47343: LD_INT 5
47345: EQUAL
47346: IFFALSE 47416
// begin if UnitsInside ( j ) < 3 then
47348: LD_VAR 0 9
47352: PPUSH
47353: CALL_OW 313
47357: PUSH
47358: LD_INT 3
47360: LESS
47361: IFFALSE 47397
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47363: LD_INT 0
47365: PPUSH
47366: LD_INT 5
47368: PUSH
47369: LD_INT 8
47371: PUSH
47372: LD_INT 9
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: LIST
47379: PUSH
47380: LD_VAR 0 17
47384: ARRAY
47385: PPUSH
47386: LD_VAR 0 4
47390: PPUSH
47391: CALL_OW 380
47395: GO 47414
// PrepareHuman ( false , i , skill ) ;
47397: LD_INT 0
47399: PPUSH
47400: LD_VAR 0 8
47404: PPUSH
47405: LD_VAR 0 4
47409: PPUSH
47410: CALL_OW 380
// end else
47414: GO 47433
// PrepareHuman ( false , i , skill ) ;
47416: LD_INT 0
47418: PPUSH
47419: LD_VAR 0 8
47423: PPUSH
47424: LD_VAR 0 4
47428: PPUSH
47429: CALL_OW 380
// un := CreateHuman ;
47433: LD_ADDR_VAR 0 14
47437: PUSH
47438: CALL_OW 44
47442: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47443: LD_ADDR_VAR 0 7
47447: PUSH
47448: LD_VAR 0 7
47452: PPUSH
47453: LD_INT 1
47455: PPUSH
47456: LD_VAR 0 14
47460: PPUSH
47461: CALL_OW 2
47465: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47466: LD_VAR 0 14
47470: PPUSH
47471: LD_VAR 0 9
47475: PPUSH
47476: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47480: LD_VAR 0 9
47484: PPUSH
47485: CALL_OW 313
47489: PUSH
47490: LD_INT 6
47492: EQUAL
47493: PUSH
47494: LD_VAR 0 9
47498: PPUSH
47499: CALL_OW 266
47503: PUSH
47504: LD_INT 32
47506: PUSH
47507: LD_INT 31
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: IN
47514: OR
47515: IFFALSE 47329
47517: GO 47326
47519: POP
47520: POP
// end else
47521: GO 47903
// for j = 1 to x do
47523: LD_ADDR_VAR 0 9
47527: PUSH
47528: DOUBLE
47529: LD_INT 1
47531: DEC
47532: ST_TO_ADDR
47533: LD_VAR 0 13
47537: PUSH
47538: FOR_TO
47539: IFFALSE 47901
// begin InitHc ;
47541: CALL_OW 19
// if not f then
47545: LD_VAR 0 12
47549: NOT
47550: IFFALSE 47639
// begin PrepareHuman ( false , i , skill ) ;
47552: LD_INT 0
47554: PPUSH
47555: LD_VAR 0 8
47559: PPUSH
47560: LD_VAR 0 4
47564: PPUSH
47565: CALL_OW 380
// un := CreateHuman ;
47569: LD_ADDR_VAR 0 14
47573: PUSH
47574: CALL_OW 44
47578: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47579: LD_ADDR_VAR 0 7
47583: PUSH
47584: LD_VAR 0 7
47588: PPUSH
47589: LD_INT 1
47591: PPUSH
47592: LD_VAR 0 14
47596: PPUSH
47597: CALL_OW 2
47601: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47602: LD_VAR 0 14
47606: PPUSH
47607: LD_VAR 0 1
47611: PPUSH
47612: CALL_OW 250
47616: PPUSH
47617: LD_VAR 0 1
47621: PPUSH
47622: CALL_OW 251
47626: PPUSH
47627: LD_INT 10
47629: PPUSH
47630: LD_INT 0
47632: PPUSH
47633: CALL_OW 50
// continue ;
47637: GO 47538
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47639: LD_VAR 0 12
47643: PUSH
47644: LD_INT 1
47646: ARRAY
47647: PPUSH
47648: CALL_OW 313
47652: PUSH
47653: LD_VAR 0 12
47657: PUSH
47658: LD_INT 1
47660: ARRAY
47661: PPUSH
47662: CALL_OW 266
47666: PUSH
47667: LD_INT 32
47669: PUSH
47670: LD_INT 31
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: IN
47677: AND
47678: PUSH
47679: LD_VAR 0 12
47683: PUSH
47684: LD_INT 1
47686: ARRAY
47687: PPUSH
47688: CALL_OW 313
47692: PUSH
47693: LD_INT 6
47695: EQUAL
47696: OR
47697: IFFALSE 47717
// f := Delete ( f , 1 ) ;
47699: LD_ADDR_VAR 0 12
47703: PUSH
47704: LD_VAR 0 12
47708: PPUSH
47709: LD_INT 1
47711: PPUSH
47712: CALL_OW 3
47716: ST_TO_ADDR
// if not f then
47717: LD_VAR 0 12
47721: NOT
47722: IFFALSE 47740
// begin x := x + 2 ;
47724: LD_ADDR_VAR 0 13
47728: PUSH
47729: LD_VAR 0 13
47733: PUSH
47734: LD_INT 2
47736: PLUS
47737: ST_TO_ADDR
// continue ;
47738: GO 47538
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47740: LD_VAR 0 12
47744: PUSH
47745: LD_INT 1
47747: ARRAY
47748: PPUSH
47749: CALL_OW 266
47753: PUSH
47754: LD_INT 5
47756: EQUAL
47757: IFFALSE 47831
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47759: LD_VAR 0 12
47763: PUSH
47764: LD_INT 1
47766: ARRAY
47767: PPUSH
47768: CALL_OW 313
47772: PUSH
47773: LD_INT 3
47775: LESS
47776: IFFALSE 47812
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47778: LD_INT 0
47780: PPUSH
47781: LD_INT 5
47783: PUSH
47784: LD_INT 8
47786: PUSH
47787: LD_INT 9
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: PUSH
47795: LD_VAR 0 17
47799: ARRAY
47800: PPUSH
47801: LD_VAR 0 4
47805: PPUSH
47806: CALL_OW 380
47810: GO 47829
// PrepareHuman ( false , i , skill ) ;
47812: LD_INT 0
47814: PPUSH
47815: LD_VAR 0 8
47819: PPUSH
47820: LD_VAR 0 4
47824: PPUSH
47825: CALL_OW 380
// end else
47829: GO 47848
// PrepareHuman ( false , i , skill ) ;
47831: LD_INT 0
47833: PPUSH
47834: LD_VAR 0 8
47838: PPUSH
47839: LD_VAR 0 4
47843: PPUSH
47844: CALL_OW 380
// un := CreateHuman ;
47848: LD_ADDR_VAR 0 14
47852: PUSH
47853: CALL_OW 44
47857: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47858: LD_ADDR_VAR 0 7
47862: PUSH
47863: LD_VAR 0 7
47867: PPUSH
47868: LD_INT 1
47870: PPUSH
47871: LD_VAR 0 14
47875: PPUSH
47876: CALL_OW 2
47880: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47881: LD_VAR 0 14
47885: PPUSH
47886: LD_VAR 0 12
47890: PUSH
47891: LD_INT 1
47893: ARRAY
47894: PPUSH
47895: CALL_OW 52
// end ;
47899: GO 47538
47901: POP
47902: POP
// end ;
47903: GO 46840
47905: POP
47906: POP
// result := result ^ buildings ;
47907: LD_ADDR_VAR 0 7
47911: PUSH
47912: LD_VAR 0 7
47916: PUSH
47917: LD_VAR 0 18
47921: ADD
47922: ST_TO_ADDR
// end else
47923: GO 48066
// begin for i = 1 to personel do
47925: LD_ADDR_VAR 0 8
47929: PUSH
47930: DOUBLE
47931: LD_INT 1
47933: DEC
47934: ST_TO_ADDR
47935: LD_VAR 0 6
47939: PUSH
47940: FOR_TO
47941: IFFALSE 48064
// begin if i > 4 then
47943: LD_VAR 0 8
47947: PUSH
47948: LD_INT 4
47950: GREATER
47951: IFFALSE 47955
// break ;
47953: GO 48064
// x := personel [ i ] ;
47955: LD_ADDR_VAR 0 13
47959: PUSH
47960: LD_VAR 0 6
47964: PUSH
47965: LD_VAR 0 8
47969: ARRAY
47970: ST_TO_ADDR
// if x = - 1 then
47971: LD_VAR 0 13
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: EQUAL
47980: IFFALSE 47984
// continue ;
47982: GO 47940
// PrepareHuman ( false , i , skill ) ;
47984: LD_INT 0
47986: PPUSH
47987: LD_VAR 0 8
47991: PPUSH
47992: LD_VAR 0 4
47996: PPUSH
47997: CALL_OW 380
// un := CreateHuman ;
48001: LD_ADDR_VAR 0 14
48005: PUSH
48006: CALL_OW 44
48010: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48011: LD_VAR 0 14
48015: PPUSH
48016: LD_VAR 0 1
48020: PPUSH
48021: CALL_OW 250
48025: PPUSH
48026: LD_VAR 0 1
48030: PPUSH
48031: CALL_OW 251
48035: PPUSH
48036: LD_INT 10
48038: PPUSH
48039: LD_INT 0
48041: PPUSH
48042: CALL_OW 50
// result := result ^ un ;
48046: LD_ADDR_VAR 0 7
48050: PUSH
48051: LD_VAR 0 7
48055: PUSH
48056: LD_VAR 0 14
48060: ADD
48061: ST_TO_ADDR
// end ;
48062: GO 47940
48064: POP
48065: POP
// end ; end ;
48066: LD_VAR 0 7
48070: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48071: LD_INT 0
48073: PPUSH
48074: PPUSH
48075: PPUSH
48076: PPUSH
48077: PPUSH
48078: PPUSH
48079: PPUSH
48080: PPUSH
48081: PPUSH
48082: PPUSH
48083: PPUSH
48084: PPUSH
48085: PPUSH
48086: PPUSH
48087: PPUSH
48088: PPUSH
// result := false ;
48089: LD_ADDR_VAR 0 3
48093: PUSH
48094: LD_INT 0
48096: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48097: LD_VAR 0 1
48101: NOT
48102: PUSH
48103: LD_VAR 0 1
48107: PPUSH
48108: CALL_OW 266
48112: PUSH
48113: LD_INT 32
48115: PUSH
48116: LD_INT 33
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: IN
48123: NOT
48124: OR
48125: IFFALSE 48129
// exit ;
48127: GO 49238
// nat := GetNation ( tower ) ;
48129: LD_ADDR_VAR 0 12
48133: PUSH
48134: LD_VAR 0 1
48138: PPUSH
48139: CALL_OW 248
48143: ST_TO_ADDR
// side := GetSide ( tower ) ;
48144: LD_ADDR_VAR 0 16
48148: PUSH
48149: LD_VAR 0 1
48153: PPUSH
48154: CALL_OW 255
48158: ST_TO_ADDR
// x := GetX ( tower ) ;
48159: LD_ADDR_VAR 0 10
48163: PUSH
48164: LD_VAR 0 1
48168: PPUSH
48169: CALL_OW 250
48173: ST_TO_ADDR
// y := GetY ( tower ) ;
48174: LD_ADDR_VAR 0 11
48178: PUSH
48179: LD_VAR 0 1
48183: PPUSH
48184: CALL_OW 251
48188: ST_TO_ADDR
// if not x or not y then
48189: LD_VAR 0 10
48193: NOT
48194: PUSH
48195: LD_VAR 0 11
48199: NOT
48200: OR
48201: IFFALSE 48205
// exit ;
48203: GO 49238
// weapon := 0 ;
48205: LD_ADDR_VAR 0 18
48209: PUSH
48210: LD_INT 0
48212: ST_TO_ADDR
// fac_list := [ ] ;
48213: LD_ADDR_VAR 0 17
48217: PUSH
48218: EMPTY
48219: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48220: LD_ADDR_VAR 0 6
48224: PUSH
48225: LD_VAR 0 1
48229: PPUSH
48230: CALL_OW 274
48234: PPUSH
48235: LD_VAR 0 2
48239: PPUSH
48240: LD_INT 0
48242: PPUSH
48243: CALL 45809 0 3
48247: PPUSH
48248: LD_INT 30
48250: PUSH
48251: LD_INT 3
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PPUSH
48258: CALL_OW 72
48262: ST_TO_ADDR
// if not factories then
48263: LD_VAR 0 6
48267: NOT
48268: IFFALSE 48272
// exit ;
48270: GO 49238
// for i in factories do
48272: LD_ADDR_VAR 0 8
48276: PUSH
48277: LD_VAR 0 6
48281: PUSH
48282: FOR_IN
48283: IFFALSE 48308
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48285: LD_ADDR_VAR 0 17
48289: PUSH
48290: LD_VAR 0 17
48294: PUSH
48295: LD_VAR 0 8
48299: PPUSH
48300: CALL_OW 478
48304: UNION
48305: ST_TO_ADDR
48306: GO 48282
48308: POP
48309: POP
// if not fac_list then
48310: LD_VAR 0 17
48314: NOT
48315: IFFALSE 48319
// exit ;
48317: GO 49238
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48319: LD_ADDR_VAR 0 5
48323: PUSH
48324: LD_INT 4
48326: PUSH
48327: LD_INT 5
48329: PUSH
48330: LD_INT 9
48332: PUSH
48333: LD_INT 10
48335: PUSH
48336: LD_INT 6
48338: PUSH
48339: LD_INT 7
48341: PUSH
48342: LD_INT 11
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 27
48356: PUSH
48357: LD_INT 28
48359: PUSH
48360: LD_INT 26
48362: PUSH
48363: LD_INT 30
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 43
48374: PUSH
48375: LD_INT 44
48377: PUSH
48378: LD_INT 46
48380: PUSH
48381: LD_INT 45
48383: PUSH
48384: LD_INT 47
48386: PUSH
48387: LD_INT 49
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: LIST
48402: PUSH
48403: LD_VAR 0 12
48407: ARRAY
48408: ST_TO_ADDR
// list := list isect fac_list ;
48409: LD_ADDR_VAR 0 5
48413: PUSH
48414: LD_VAR 0 5
48418: PUSH
48419: LD_VAR 0 17
48423: ISECT
48424: ST_TO_ADDR
// if not list then
48425: LD_VAR 0 5
48429: NOT
48430: IFFALSE 48434
// exit ;
48432: GO 49238
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48434: LD_VAR 0 12
48438: PUSH
48439: LD_INT 3
48441: EQUAL
48442: PUSH
48443: LD_INT 49
48445: PUSH
48446: LD_VAR 0 5
48450: IN
48451: AND
48452: PUSH
48453: LD_INT 31
48455: PPUSH
48456: LD_VAR 0 16
48460: PPUSH
48461: CALL_OW 321
48465: PUSH
48466: LD_INT 2
48468: EQUAL
48469: AND
48470: IFFALSE 48530
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48472: LD_INT 22
48474: PUSH
48475: LD_VAR 0 16
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 35
48486: PUSH
48487: LD_INT 49
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 91
48496: PUSH
48497: LD_VAR 0 1
48501: PUSH
48502: LD_INT 10
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: LIST
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: LIST
48514: PPUSH
48515: CALL_OW 69
48519: NOT
48520: IFFALSE 48530
// weapon := ru_time_lapser ;
48522: LD_ADDR_VAR 0 18
48526: PUSH
48527: LD_INT 49
48529: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48530: LD_VAR 0 12
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: IN
48545: PUSH
48546: LD_INT 11
48548: PUSH
48549: LD_VAR 0 5
48553: IN
48554: PUSH
48555: LD_INT 30
48557: PUSH
48558: LD_VAR 0 5
48562: IN
48563: OR
48564: AND
48565: PUSH
48566: LD_INT 6
48568: PPUSH
48569: LD_VAR 0 16
48573: PPUSH
48574: CALL_OW 321
48578: PUSH
48579: LD_INT 2
48581: EQUAL
48582: AND
48583: IFFALSE 48748
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48585: LD_INT 22
48587: PUSH
48588: LD_VAR 0 16
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: LD_INT 35
48602: PUSH
48603: LD_INT 11
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 35
48612: PUSH
48613: LD_INT 30
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 91
48627: PUSH
48628: LD_VAR 0 1
48632: PUSH
48633: LD_INT 18
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: LIST
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: LIST
48645: PPUSH
48646: CALL_OW 69
48650: NOT
48651: PUSH
48652: LD_INT 22
48654: PUSH
48655: LD_VAR 0 16
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: LD_INT 30
48669: PUSH
48670: LD_INT 32
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 30
48679: PUSH
48680: LD_INT 33
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 91
48694: PUSH
48695: LD_VAR 0 1
48699: PUSH
48700: LD_INT 12
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: LIST
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: LIST
48712: PUSH
48713: EMPTY
48714: LIST
48715: PPUSH
48716: CALL_OW 69
48720: PUSH
48721: LD_INT 2
48723: GREATER
48724: AND
48725: IFFALSE 48748
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48727: LD_ADDR_VAR 0 18
48731: PUSH
48732: LD_INT 11
48734: PUSH
48735: LD_INT 30
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_VAR 0 12
48746: ARRAY
48747: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48748: LD_VAR 0 18
48752: NOT
48753: PUSH
48754: LD_INT 40
48756: PPUSH
48757: LD_VAR 0 16
48761: PPUSH
48762: CALL_OW 321
48766: PUSH
48767: LD_INT 2
48769: EQUAL
48770: AND
48771: PUSH
48772: LD_INT 7
48774: PUSH
48775: LD_VAR 0 5
48779: IN
48780: PUSH
48781: LD_INT 28
48783: PUSH
48784: LD_VAR 0 5
48788: IN
48789: OR
48790: PUSH
48791: LD_INT 45
48793: PUSH
48794: LD_VAR 0 5
48798: IN
48799: OR
48800: AND
48801: IFFALSE 49055
// begin hex := GetHexInfo ( x , y ) ;
48803: LD_ADDR_VAR 0 4
48807: PUSH
48808: LD_VAR 0 10
48812: PPUSH
48813: LD_VAR 0 11
48817: PPUSH
48818: CALL_OW 546
48822: ST_TO_ADDR
// if hex [ 1 ] then
48823: LD_VAR 0 4
48827: PUSH
48828: LD_INT 1
48830: ARRAY
48831: IFFALSE 48835
// exit ;
48833: GO 49238
// height := hex [ 2 ] ;
48835: LD_ADDR_VAR 0 15
48839: PUSH
48840: LD_VAR 0 4
48844: PUSH
48845: LD_INT 2
48847: ARRAY
48848: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48849: LD_ADDR_VAR 0 14
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: LD_INT 3
48862: PUSH
48863: LD_INT 5
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: ST_TO_ADDR
// for i in tmp do
48872: LD_ADDR_VAR 0 8
48876: PUSH
48877: LD_VAR 0 14
48881: PUSH
48882: FOR_IN
48883: IFFALSE 49053
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48885: LD_ADDR_VAR 0 9
48889: PUSH
48890: LD_VAR 0 10
48894: PPUSH
48895: LD_VAR 0 8
48899: PPUSH
48900: LD_INT 5
48902: PPUSH
48903: CALL_OW 272
48907: PUSH
48908: LD_VAR 0 11
48912: PPUSH
48913: LD_VAR 0 8
48917: PPUSH
48918: LD_INT 5
48920: PPUSH
48921: CALL_OW 273
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48930: LD_VAR 0 9
48934: PUSH
48935: LD_INT 1
48937: ARRAY
48938: PPUSH
48939: LD_VAR 0 9
48943: PUSH
48944: LD_INT 2
48946: ARRAY
48947: PPUSH
48948: CALL_OW 488
48952: IFFALSE 49051
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48954: LD_ADDR_VAR 0 4
48958: PUSH
48959: LD_VAR 0 9
48963: PUSH
48964: LD_INT 1
48966: ARRAY
48967: PPUSH
48968: LD_VAR 0 9
48972: PUSH
48973: LD_INT 2
48975: ARRAY
48976: PPUSH
48977: CALL_OW 546
48981: ST_TO_ADDR
// if hex [ 1 ] then
48982: LD_VAR 0 4
48986: PUSH
48987: LD_INT 1
48989: ARRAY
48990: IFFALSE 48994
// continue ;
48992: GO 48882
// h := hex [ 2 ] ;
48994: LD_ADDR_VAR 0 13
48998: PUSH
48999: LD_VAR 0 4
49003: PUSH
49004: LD_INT 2
49006: ARRAY
49007: ST_TO_ADDR
// if h + 7 < height then
49008: LD_VAR 0 13
49012: PUSH
49013: LD_INT 7
49015: PLUS
49016: PUSH
49017: LD_VAR 0 15
49021: LESS
49022: IFFALSE 49051
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49024: LD_ADDR_VAR 0 18
49028: PUSH
49029: LD_INT 7
49031: PUSH
49032: LD_INT 28
49034: PUSH
49035: LD_INT 45
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: LIST
49042: PUSH
49043: LD_VAR 0 12
49047: ARRAY
49048: ST_TO_ADDR
// break ;
49049: GO 49053
// end ; end ; end ;
49051: GO 48882
49053: POP
49054: POP
// end ; if not weapon then
49055: LD_VAR 0 18
49059: NOT
49060: IFFALSE 49120
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49062: LD_ADDR_VAR 0 5
49066: PUSH
49067: LD_VAR 0 5
49071: PUSH
49072: LD_INT 11
49074: PUSH
49075: LD_INT 30
49077: PUSH
49078: LD_INT 49
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: DIFF
49086: ST_TO_ADDR
// if not list then
49087: LD_VAR 0 5
49091: NOT
49092: IFFALSE 49096
// exit ;
49094: GO 49238
// weapon := list [ rand ( 1 , list ) ] ;
49096: LD_ADDR_VAR 0 18
49100: PUSH
49101: LD_VAR 0 5
49105: PUSH
49106: LD_INT 1
49108: PPUSH
49109: LD_VAR 0 5
49113: PPUSH
49114: CALL_OW 12
49118: ARRAY
49119: ST_TO_ADDR
// end ; if weapon then
49120: LD_VAR 0 18
49124: IFFALSE 49238
// begin tmp := CostOfWeapon ( weapon ) ;
49126: LD_ADDR_VAR 0 14
49130: PUSH
49131: LD_VAR 0 18
49135: PPUSH
49136: CALL_OW 451
49140: ST_TO_ADDR
// j := GetBase ( tower ) ;
49141: LD_ADDR_VAR 0 9
49145: PUSH
49146: LD_VAR 0 1
49150: PPUSH
49151: CALL_OW 274
49155: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49156: LD_VAR 0 9
49160: PPUSH
49161: LD_INT 1
49163: PPUSH
49164: CALL_OW 275
49168: PUSH
49169: LD_VAR 0 14
49173: PUSH
49174: LD_INT 1
49176: ARRAY
49177: GREATEREQUAL
49178: PUSH
49179: LD_VAR 0 9
49183: PPUSH
49184: LD_INT 2
49186: PPUSH
49187: CALL_OW 275
49191: PUSH
49192: LD_VAR 0 14
49196: PUSH
49197: LD_INT 2
49199: ARRAY
49200: GREATEREQUAL
49201: AND
49202: PUSH
49203: LD_VAR 0 9
49207: PPUSH
49208: LD_INT 3
49210: PPUSH
49211: CALL_OW 275
49215: PUSH
49216: LD_VAR 0 14
49220: PUSH
49221: LD_INT 3
49223: ARRAY
49224: GREATEREQUAL
49225: AND
49226: IFFALSE 49238
// result := weapon ;
49228: LD_ADDR_VAR 0 3
49232: PUSH
49233: LD_VAR 0 18
49237: ST_TO_ADDR
// end ; end ;
49238: LD_VAR 0 3
49242: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49243: LD_INT 0
49245: PPUSH
49246: PPUSH
// result := true ;
49247: LD_ADDR_VAR 0 3
49251: PUSH
49252: LD_INT 1
49254: ST_TO_ADDR
// if array1 = array2 then
49255: LD_VAR 0 1
49259: PUSH
49260: LD_VAR 0 2
49264: EQUAL
49265: IFFALSE 49325
// begin for i = 1 to array1 do
49267: LD_ADDR_VAR 0 4
49271: PUSH
49272: DOUBLE
49273: LD_INT 1
49275: DEC
49276: ST_TO_ADDR
49277: LD_VAR 0 1
49281: PUSH
49282: FOR_TO
49283: IFFALSE 49321
// if array1 [ i ] <> array2 [ i ] then
49285: LD_VAR 0 1
49289: PUSH
49290: LD_VAR 0 4
49294: ARRAY
49295: PUSH
49296: LD_VAR 0 2
49300: PUSH
49301: LD_VAR 0 4
49305: ARRAY
49306: NONEQUAL
49307: IFFALSE 49319
// begin result := false ;
49309: LD_ADDR_VAR 0 3
49313: PUSH
49314: LD_INT 0
49316: ST_TO_ADDR
// break ;
49317: GO 49321
// end ;
49319: GO 49282
49321: POP
49322: POP
// end else
49323: GO 49333
// result := false ;
49325: LD_ADDR_VAR 0 3
49329: PUSH
49330: LD_INT 0
49332: ST_TO_ADDR
// end ;
49333: LD_VAR 0 3
49337: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49338: LD_INT 0
49340: PPUSH
49341: PPUSH
// if not array1 or not array2 then
49342: LD_VAR 0 1
49346: NOT
49347: PUSH
49348: LD_VAR 0 2
49352: NOT
49353: OR
49354: IFFALSE 49358
// exit ;
49356: GO 49422
// result := true ;
49358: LD_ADDR_VAR 0 3
49362: PUSH
49363: LD_INT 1
49365: ST_TO_ADDR
// for i = 1 to array1 do
49366: LD_ADDR_VAR 0 4
49370: PUSH
49371: DOUBLE
49372: LD_INT 1
49374: DEC
49375: ST_TO_ADDR
49376: LD_VAR 0 1
49380: PUSH
49381: FOR_TO
49382: IFFALSE 49420
// if array1 [ i ] <> array2 [ i ] then
49384: LD_VAR 0 1
49388: PUSH
49389: LD_VAR 0 4
49393: ARRAY
49394: PUSH
49395: LD_VAR 0 2
49399: PUSH
49400: LD_VAR 0 4
49404: ARRAY
49405: NONEQUAL
49406: IFFALSE 49418
// begin result := false ;
49408: LD_ADDR_VAR 0 3
49412: PUSH
49413: LD_INT 0
49415: ST_TO_ADDR
// break ;
49416: GO 49420
// end ;
49418: GO 49381
49420: POP
49421: POP
// end ;
49422: LD_VAR 0 3
49426: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49427: LD_INT 0
49429: PPUSH
49430: PPUSH
49431: PPUSH
// pom := GetBase ( fac ) ;
49432: LD_ADDR_VAR 0 5
49436: PUSH
49437: LD_VAR 0 1
49441: PPUSH
49442: CALL_OW 274
49446: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49447: LD_ADDR_VAR 0 4
49451: PUSH
49452: LD_VAR 0 2
49456: PUSH
49457: LD_INT 1
49459: ARRAY
49460: PPUSH
49461: LD_VAR 0 2
49465: PUSH
49466: LD_INT 2
49468: ARRAY
49469: PPUSH
49470: LD_VAR 0 2
49474: PUSH
49475: LD_INT 3
49477: ARRAY
49478: PPUSH
49479: LD_VAR 0 2
49483: PUSH
49484: LD_INT 4
49486: ARRAY
49487: PPUSH
49488: CALL_OW 449
49492: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49493: LD_ADDR_VAR 0 3
49497: PUSH
49498: LD_VAR 0 5
49502: PPUSH
49503: LD_INT 1
49505: PPUSH
49506: CALL_OW 275
49510: PUSH
49511: LD_VAR 0 4
49515: PUSH
49516: LD_INT 1
49518: ARRAY
49519: GREATEREQUAL
49520: PUSH
49521: LD_VAR 0 5
49525: PPUSH
49526: LD_INT 2
49528: PPUSH
49529: CALL_OW 275
49533: PUSH
49534: LD_VAR 0 4
49538: PUSH
49539: LD_INT 2
49541: ARRAY
49542: GREATEREQUAL
49543: AND
49544: PUSH
49545: LD_VAR 0 5
49549: PPUSH
49550: LD_INT 3
49552: PPUSH
49553: CALL_OW 275
49557: PUSH
49558: LD_VAR 0 4
49562: PUSH
49563: LD_INT 3
49565: ARRAY
49566: GREATEREQUAL
49567: AND
49568: ST_TO_ADDR
// end ;
49569: LD_VAR 0 3
49573: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49574: LD_INT 0
49576: PPUSH
49577: PPUSH
49578: PPUSH
49579: PPUSH
// pom := GetBase ( building ) ;
49580: LD_ADDR_VAR 0 3
49584: PUSH
49585: LD_VAR 0 1
49589: PPUSH
49590: CALL_OW 274
49594: ST_TO_ADDR
// if not pom then
49595: LD_VAR 0 3
49599: NOT
49600: IFFALSE 49604
// exit ;
49602: GO 49774
// btype := GetBType ( building ) ;
49604: LD_ADDR_VAR 0 5
49608: PUSH
49609: LD_VAR 0 1
49613: PPUSH
49614: CALL_OW 266
49618: ST_TO_ADDR
// if btype = b_armoury then
49619: LD_VAR 0 5
49623: PUSH
49624: LD_INT 4
49626: EQUAL
49627: IFFALSE 49637
// btype := b_barracks ;
49629: LD_ADDR_VAR 0 5
49633: PUSH
49634: LD_INT 5
49636: ST_TO_ADDR
// if btype = b_depot then
49637: LD_VAR 0 5
49641: PUSH
49642: LD_INT 0
49644: EQUAL
49645: IFFALSE 49655
// btype := b_warehouse ;
49647: LD_ADDR_VAR 0 5
49651: PUSH
49652: LD_INT 1
49654: ST_TO_ADDR
// if btype = b_workshop then
49655: LD_VAR 0 5
49659: PUSH
49660: LD_INT 2
49662: EQUAL
49663: IFFALSE 49673
// btype := b_factory ;
49665: LD_ADDR_VAR 0 5
49669: PUSH
49670: LD_INT 3
49672: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49673: LD_ADDR_VAR 0 4
49677: PUSH
49678: LD_VAR 0 5
49682: PPUSH
49683: LD_VAR 0 1
49687: PPUSH
49688: CALL_OW 248
49692: PPUSH
49693: CALL_OW 450
49697: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49698: LD_ADDR_VAR 0 2
49702: PUSH
49703: LD_VAR 0 3
49707: PPUSH
49708: LD_INT 1
49710: PPUSH
49711: CALL_OW 275
49715: PUSH
49716: LD_VAR 0 4
49720: PUSH
49721: LD_INT 1
49723: ARRAY
49724: GREATEREQUAL
49725: PUSH
49726: LD_VAR 0 3
49730: PPUSH
49731: LD_INT 2
49733: PPUSH
49734: CALL_OW 275
49738: PUSH
49739: LD_VAR 0 4
49743: PUSH
49744: LD_INT 2
49746: ARRAY
49747: GREATEREQUAL
49748: AND
49749: PUSH
49750: LD_VAR 0 3
49754: PPUSH
49755: LD_INT 3
49757: PPUSH
49758: CALL_OW 275
49762: PUSH
49763: LD_VAR 0 4
49767: PUSH
49768: LD_INT 3
49770: ARRAY
49771: GREATEREQUAL
49772: AND
49773: ST_TO_ADDR
// end ;
49774: LD_VAR 0 2
49778: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49779: LD_INT 0
49781: PPUSH
49782: PPUSH
49783: PPUSH
// pom := GetBase ( building ) ;
49784: LD_ADDR_VAR 0 4
49788: PUSH
49789: LD_VAR 0 1
49793: PPUSH
49794: CALL_OW 274
49798: ST_TO_ADDR
// if not pom then
49799: LD_VAR 0 4
49803: NOT
49804: IFFALSE 49808
// exit ;
49806: GO 49909
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49808: LD_ADDR_VAR 0 5
49812: PUSH
49813: LD_VAR 0 2
49817: PPUSH
49818: LD_VAR 0 1
49822: PPUSH
49823: CALL_OW 248
49827: PPUSH
49828: CALL_OW 450
49832: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49833: LD_ADDR_VAR 0 3
49837: PUSH
49838: LD_VAR 0 4
49842: PPUSH
49843: LD_INT 1
49845: PPUSH
49846: CALL_OW 275
49850: PUSH
49851: LD_VAR 0 5
49855: PUSH
49856: LD_INT 1
49858: ARRAY
49859: GREATEREQUAL
49860: PUSH
49861: LD_VAR 0 4
49865: PPUSH
49866: LD_INT 2
49868: PPUSH
49869: CALL_OW 275
49873: PUSH
49874: LD_VAR 0 5
49878: PUSH
49879: LD_INT 2
49881: ARRAY
49882: GREATEREQUAL
49883: AND
49884: PUSH
49885: LD_VAR 0 4
49889: PPUSH
49890: LD_INT 3
49892: PPUSH
49893: CALL_OW 275
49897: PUSH
49898: LD_VAR 0 5
49902: PUSH
49903: LD_INT 3
49905: ARRAY
49906: GREATEREQUAL
49907: AND
49908: ST_TO_ADDR
// end ;
49909: LD_VAR 0 3
49913: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49914: LD_INT 0
49916: PPUSH
49917: PPUSH
49918: PPUSH
49919: PPUSH
49920: PPUSH
49921: PPUSH
49922: PPUSH
49923: PPUSH
49924: PPUSH
49925: PPUSH
49926: PPUSH
// result := false ;
49927: LD_ADDR_VAR 0 8
49931: PUSH
49932: LD_INT 0
49934: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49935: LD_VAR 0 5
49939: NOT
49940: PUSH
49941: LD_VAR 0 1
49945: NOT
49946: OR
49947: PUSH
49948: LD_VAR 0 2
49952: NOT
49953: OR
49954: PUSH
49955: LD_VAR 0 3
49959: NOT
49960: OR
49961: IFFALSE 49965
// exit ;
49963: GO 50779
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49965: LD_ADDR_VAR 0 14
49969: PUSH
49970: LD_VAR 0 1
49974: PPUSH
49975: LD_VAR 0 2
49979: PPUSH
49980: LD_VAR 0 3
49984: PPUSH
49985: LD_VAR 0 4
49989: PPUSH
49990: LD_VAR 0 5
49994: PUSH
49995: LD_INT 1
49997: ARRAY
49998: PPUSH
49999: CALL_OW 248
50003: PPUSH
50004: LD_INT 0
50006: PPUSH
50007: CALL 52016 0 6
50011: ST_TO_ADDR
// if not hexes then
50012: LD_VAR 0 14
50016: NOT
50017: IFFALSE 50021
// exit ;
50019: GO 50779
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50021: LD_ADDR_VAR 0 17
50025: PUSH
50026: LD_VAR 0 5
50030: PPUSH
50031: LD_INT 22
50033: PUSH
50034: LD_VAR 0 13
50038: PPUSH
50039: CALL_OW 255
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: LD_INT 30
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 30
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: LIST
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PPUSH
50080: CALL_OW 72
50084: ST_TO_ADDR
// for i = 1 to hexes do
50085: LD_ADDR_VAR 0 9
50089: PUSH
50090: DOUBLE
50091: LD_INT 1
50093: DEC
50094: ST_TO_ADDR
50095: LD_VAR 0 14
50099: PUSH
50100: FOR_TO
50101: IFFALSE 50777
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50103: LD_ADDR_VAR 0 13
50107: PUSH
50108: LD_VAR 0 14
50112: PUSH
50113: LD_VAR 0 9
50117: ARRAY
50118: PUSH
50119: LD_INT 1
50121: ARRAY
50122: PPUSH
50123: LD_VAR 0 14
50127: PUSH
50128: LD_VAR 0 9
50132: ARRAY
50133: PUSH
50134: LD_INT 2
50136: ARRAY
50137: PPUSH
50138: CALL_OW 428
50142: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50143: LD_VAR 0 14
50147: PUSH
50148: LD_VAR 0 9
50152: ARRAY
50153: PUSH
50154: LD_INT 1
50156: ARRAY
50157: PPUSH
50158: LD_VAR 0 14
50162: PUSH
50163: LD_VAR 0 9
50167: ARRAY
50168: PUSH
50169: LD_INT 2
50171: ARRAY
50172: PPUSH
50173: CALL_OW 351
50177: PUSH
50178: LD_VAR 0 14
50182: PUSH
50183: LD_VAR 0 9
50187: ARRAY
50188: PUSH
50189: LD_INT 1
50191: ARRAY
50192: PPUSH
50193: LD_VAR 0 14
50197: PUSH
50198: LD_VAR 0 9
50202: ARRAY
50203: PUSH
50204: LD_INT 2
50206: ARRAY
50207: PPUSH
50208: CALL_OW 488
50212: NOT
50213: OR
50214: PUSH
50215: LD_VAR 0 13
50219: PPUSH
50220: CALL_OW 247
50224: PUSH
50225: LD_INT 3
50227: EQUAL
50228: OR
50229: IFFALSE 50235
// exit ;
50231: POP
50232: POP
50233: GO 50779
// if not tmp then
50235: LD_VAR 0 13
50239: NOT
50240: IFFALSE 50244
// continue ;
50242: GO 50100
// result := true ;
50244: LD_ADDR_VAR 0 8
50248: PUSH
50249: LD_INT 1
50251: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50252: LD_VAR 0 6
50256: PUSH
50257: LD_VAR 0 13
50261: PPUSH
50262: CALL_OW 247
50266: PUSH
50267: LD_INT 2
50269: EQUAL
50270: AND
50271: PUSH
50272: LD_VAR 0 13
50276: PPUSH
50277: CALL_OW 263
50281: PUSH
50282: LD_INT 1
50284: EQUAL
50285: AND
50286: IFFALSE 50450
// begin if IsDrivenBy ( tmp ) then
50288: LD_VAR 0 13
50292: PPUSH
50293: CALL_OW 311
50297: IFFALSE 50301
// continue ;
50299: GO 50100
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50301: LD_VAR 0 6
50305: PPUSH
50306: LD_INT 3
50308: PUSH
50309: LD_INT 60
50311: PUSH
50312: EMPTY
50313: LIST
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 3
50321: PUSH
50322: LD_INT 55
50324: PUSH
50325: EMPTY
50326: LIST
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PPUSH
50336: CALL_OW 72
50340: IFFALSE 50448
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50342: LD_ADDR_VAR 0 18
50346: PUSH
50347: LD_VAR 0 6
50351: PPUSH
50352: LD_INT 3
50354: PUSH
50355: LD_INT 60
50357: PUSH
50358: EMPTY
50359: LIST
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: LD_INT 55
50370: PUSH
50371: EMPTY
50372: LIST
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PPUSH
50382: CALL_OW 72
50386: PUSH
50387: LD_INT 1
50389: ARRAY
50390: ST_TO_ADDR
// if IsInUnit ( driver ) then
50391: LD_VAR 0 18
50395: PPUSH
50396: CALL_OW 310
50400: IFFALSE 50411
// ComExit ( driver ) ;
50402: LD_VAR 0 18
50406: PPUSH
50407: CALL 75200 0 1
// AddComEnterUnit ( driver , tmp ) ;
50411: LD_VAR 0 18
50415: PPUSH
50416: LD_VAR 0 13
50420: PPUSH
50421: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50425: LD_VAR 0 18
50429: PPUSH
50430: LD_VAR 0 7
50434: PPUSH
50435: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50439: LD_VAR 0 18
50443: PPUSH
50444: CALL_OW 181
// end ; continue ;
50448: GO 50100
// end ; if not cleaners or not tmp in cleaners then
50450: LD_VAR 0 6
50454: NOT
50455: PUSH
50456: LD_VAR 0 13
50460: PUSH
50461: LD_VAR 0 6
50465: IN
50466: NOT
50467: OR
50468: IFFALSE 50775
// begin if dep then
50470: LD_VAR 0 17
50474: IFFALSE 50610
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50476: LD_ADDR_VAR 0 16
50480: PUSH
50481: LD_VAR 0 17
50485: PUSH
50486: LD_INT 1
50488: ARRAY
50489: PPUSH
50490: CALL_OW 250
50494: PPUSH
50495: LD_VAR 0 17
50499: PUSH
50500: LD_INT 1
50502: ARRAY
50503: PPUSH
50504: CALL_OW 254
50508: PPUSH
50509: LD_INT 5
50511: PPUSH
50512: CALL_OW 272
50516: PUSH
50517: LD_VAR 0 17
50521: PUSH
50522: LD_INT 1
50524: ARRAY
50525: PPUSH
50526: CALL_OW 251
50530: PPUSH
50531: LD_VAR 0 17
50535: PUSH
50536: LD_INT 1
50538: ARRAY
50539: PPUSH
50540: CALL_OW 254
50544: PPUSH
50545: LD_INT 5
50547: PPUSH
50548: CALL_OW 273
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50557: LD_VAR 0 16
50561: PUSH
50562: LD_INT 1
50564: ARRAY
50565: PPUSH
50566: LD_VAR 0 16
50570: PUSH
50571: LD_INT 2
50573: ARRAY
50574: PPUSH
50575: CALL_OW 488
50579: IFFALSE 50610
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50581: LD_VAR 0 13
50585: PPUSH
50586: LD_VAR 0 16
50590: PUSH
50591: LD_INT 1
50593: ARRAY
50594: PPUSH
50595: LD_VAR 0 16
50599: PUSH
50600: LD_INT 2
50602: ARRAY
50603: PPUSH
50604: CALL_OW 111
// continue ;
50608: GO 50100
// end ; end ; r := GetDir ( tmp ) ;
50610: LD_ADDR_VAR 0 15
50614: PUSH
50615: LD_VAR 0 13
50619: PPUSH
50620: CALL_OW 254
50624: ST_TO_ADDR
// if r = 5 then
50625: LD_VAR 0 15
50629: PUSH
50630: LD_INT 5
50632: EQUAL
50633: IFFALSE 50643
// r := 0 ;
50635: LD_ADDR_VAR 0 15
50639: PUSH
50640: LD_INT 0
50642: ST_TO_ADDR
// for j = r to 5 do
50643: LD_ADDR_VAR 0 10
50647: PUSH
50648: DOUBLE
50649: LD_VAR 0 15
50653: DEC
50654: ST_TO_ADDR
50655: LD_INT 5
50657: PUSH
50658: FOR_TO
50659: IFFALSE 50773
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50661: LD_ADDR_VAR 0 11
50665: PUSH
50666: LD_VAR 0 13
50670: PPUSH
50671: CALL_OW 250
50675: PPUSH
50676: LD_VAR 0 10
50680: PPUSH
50681: LD_INT 2
50683: PPUSH
50684: CALL_OW 272
50688: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50689: LD_ADDR_VAR 0 12
50693: PUSH
50694: LD_VAR 0 13
50698: PPUSH
50699: CALL_OW 251
50703: PPUSH
50704: LD_VAR 0 10
50708: PPUSH
50709: LD_INT 2
50711: PPUSH
50712: CALL_OW 273
50716: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50717: LD_VAR 0 11
50721: PPUSH
50722: LD_VAR 0 12
50726: PPUSH
50727: CALL_OW 488
50731: PUSH
50732: LD_VAR 0 11
50736: PPUSH
50737: LD_VAR 0 12
50741: PPUSH
50742: CALL_OW 428
50746: NOT
50747: AND
50748: IFFALSE 50771
// begin ComMoveXY ( tmp , _x , _y ) ;
50750: LD_VAR 0 13
50754: PPUSH
50755: LD_VAR 0 11
50759: PPUSH
50760: LD_VAR 0 12
50764: PPUSH
50765: CALL_OW 111
// break ;
50769: GO 50773
// end ; end ;
50771: GO 50658
50773: POP
50774: POP
// end ; end ;
50775: GO 50100
50777: POP
50778: POP
// end ;
50779: LD_VAR 0 8
50783: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50784: LD_INT 0
50786: PPUSH
// result := true ;
50787: LD_ADDR_VAR 0 3
50791: PUSH
50792: LD_INT 1
50794: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50795: LD_VAR 0 2
50799: PUSH
50800: LD_INT 24
50802: DOUBLE
50803: EQUAL
50804: IFTRUE 50814
50806: LD_INT 33
50808: DOUBLE
50809: EQUAL
50810: IFTRUE 50814
50812: GO 50839
50814: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50815: LD_ADDR_VAR 0 3
50819: PUSH
50820: LD_INT 32
50822: PPUSH
50823: LD_VAR 0 1
50827: PPUSH
50828: CALL_OW 321
50832: PUSH
50833: LD_INT 2
50835: EQUAL
50836: ST_TO_ADDR
50837: GO 51159
50839: LD_INT 20
50841: DOUBLE
50842: EQUAL
50843: IFTRUE 50847
50845: GO 50872
50847: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50848: LD_ADDR_VAR 0 3
50852: PUSH
50853: LD_INT 6
50855: PPUSH
50856: LD_VAR 0 1
50860: PPUSH
50861: CALL_OW 321
50865: PUSH
50866: LD_INT 2
50868: EQUAL
50869: ST_TO_ADDR
50870: GO 51159
50872: LD_INT 22
50874: DOUBLE
50875: EQUAL
50876: IFTRUE 50886
50878: LD_INT 36
50880: DOUBLE
50881: EQUAL
50882: IFTRUE 50886
50884: GO 50911
50886: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50887: LD_ADDR_VAR 0 3
50891: PUSH
50892: LD_INT 15
50894: PPUSH
50895: LD_VAR 0 1
50899: PPUSH
50900: CALL_OW 321
50904: PUSH
50905: LD_INT 2
50907: EQUAL
50908: ST_TO_ADDR
50909: GO 51159
50911: LD_INT 30
50913: DOUBLE
50914: EQUAL
50915: IFTRUE 50919
50917: GO 50944
50919: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50920: LD_ADDR_VAR 0 3
50924: PUSH
50925: LD_INT 20
50927: PPUSH
50928: LD_VAR 0 1
50932: PPUSH
50933: CALL_OW 321
50937: PUSH
50938: LD_INT 2
50940: EQUAL
50941: ST_TO_ADDR
50942: GO 51159
50944: LD_INT 28
50946: DOUBLE
50947: EQUAL
50948: IFTRUE 50958
50950: LD_INT 21
50952: DOUBLE
50953: EQUAL
50954: IFTRUE 50958
50956: GO 50983
50958: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50959: LD_ADDR_VAR 0 3
50963: PUSH
50964: LD_INT 21
50966: PPUSH
50967: LD_VAR 0 1
50971: PPUSH
50972: CALL_OW 321
50976: PUSH
50977: LD_INT 2
50979: EQUAL
50980: ST_TO_ADDR
50981: GO 51159
50983: LD_INT 16
50985: DOUBLE
50986: EQUAL
50987: IFTRUE 50991
50989: GO 51018
50991: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50992: LD_ADDR_VAR 0 3
50996: PUSH
50997: LD_EXP 61
51001: PPUSH
51002: LD_VAR 0 1
51006: PPUSH
51007: CALL_OW 321
51011: PUSH
51012: LD_INT 2
51014: EQUAL
51015: ST_TO_ADDR
51016: GO 51159
51018: LD_INT 19
51020: DOUBLE
51021: EQUAL
51022: IFTRUE 51032
51024: LD_INT 23
51026: DOUBLE
51027: EQUAL
51028: IFTRUE 51032
51030: GO 51059
51032: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51033: LD_ADDR_VAR 0 3
51037: PUSH
51038: LD_EXP 60
51042: PPUSH
51043: LD_VAR 0 1
51047: PPUSH
51048: CALL_OW 321
51052: PUSH
51053: LD_INT 2
51055: EQUAL
51056: ST_TO_ADDR
51057: GO 51159
51059: LD_INT 17
51061: DOUBLE
51062: EQUAL
51063: IFTRUE 51067
51065: GO 51092
51067: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51068: LD_ADDR_VAR 0 3
51072: PUSH
51073: LD_INT 39
51075: PPUSH
51076: LD_VAR 0 1
51080: PPUSH
51081: CALL_OW 321
51085: PUSH
51086: LD_INT 2
51088: EQUAL
51089: ST_TO_ADDR
51090: GO 51159
51092: LD_INT 18
51094: DOUBLE
51095: EQUAL
51096: IFTRUE 51100
51098: GO 51125
51100: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51101: LD_ADDR_VAR 0 3
51105: PUSH
51106: LD_INT 40
51108: PPUSH
51109: LD_VAR 0 1
51113: PPUSH
51114: CALL_OW 321
51118: PUSH
51119: LD_INT 2
51121: EQUAL
51122: ST_TO_ADDR
51123: GO 51159
51125: LD_INT 27
51127: DOUBLE
51128: EQUAL
51129: IFTRUE 51133
51131: GO 51158
51133: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51134: LD_ADDR_VAR 0 3
51138: PUSH
51139: LD_INT 35
51141: PPUSH
51142: LD_VAR 0 1
51146: PPUSH
51147: CALL_OW 321
51151: PUSH
51152: LD_INT 2
51154: EQUAL
51155: ST_TO_ADDR
51156: GO 51159
51158: POP
// end ;
51159: LD_VAR 0 3
51163: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51164: LD_INT 0
51166: PPUSH
51167: PPUSH
51168: PPUSH
51169: PPUSH
51170: PPUSH
51171: PPUSH
51172: PPUSH
51173: PPUSH
51174: PPUSH
51175: PPUSH
51176: PPUSH
// result := false ;
51177: LD_ADDR_VAR 0 6
51181: PUSH
51182: LD_INT 0
51184: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51185: LD_VAR 0 1
51189: NOT
51190: PUSH
51191: LD_VAR 0 1
51195: PPUSH
51196: CALL_OW 266
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: IN
51211: NOT
51212: OR
51213: PUSH
51214: LD_VAR 0 2
51218: NOT
51219: OR
51220: PUSH
51221: LD_VAR 0 5
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: LD_INT 3
51237: PUSH
51238: LD_INT 4
51240: PUSH
51241: LD_INT 5
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: IN
51252: NOT
51253: OR
51254: PUSH
51255: LD_VAR 0 3
51259: PPUSH
51260: LD_VAR 0 4
51264: PPUSH
51265: CALL_OW 488
51269: NOT
51270: OR
51271: IFFALSE 51275
// exit ;
51273: GO 52011
// side := GetSide ( depot ) ;
51275: LD_ADDR_VAR 0 9
51279: PUSH
51280: LD_VAR 0 1
51284: PPUSH
51285: CALL_OW 255
51289: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51290: LD_VAR 0 9
51294: PPUSH
51295: LD_VAR 0 2
51299: PPUSH
51300: CALL 50784 0 2
51304: NOT
51305: IFFALSE 51309
// exit ;
51307: GO 52011
// pom := GetBase ( depot ) ;
51309: LD_ADDR_VAR 0 10
51313: PUSH
51314: LD_VAR 0 1
51318: PPUSH
51319: CALL_OW 274
51323: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51324: LD_ADDR_VAR 0 11
51328: PUSH
51329: LD_VAR 0 2
51333: PPUSH
51334: LD_VAR 0 1
51338: PPUSH
51339: CALL_OW 248
51343: PPUSH
51344: CALL_OW 450
51348: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51349: LD_VAR 0 10
51353: PPUSH
51354: LD_INT 1
51356: PPUSH
51357: CALL_OW 275
51361: PUSH
51362: LD_VAR 0 11
51366: PUSH
51367: LD_INT 1
51369: ARRAY
51370: GREATEREQUAL
51371: PUSH
51372: LD_VAR 0 10
51376: PPUSH
51377: LD_INT 2
51379: PPUSH
51380: CALL_OW 275
51384: PUSH
51385: LD_VAR 0 11
51389: PUSH
51390: LD_INT 2
51392: ARRAY
51393: GREATEREQUAL
51394: AND
51395: PUSH
51396: LD_VAR 0 10
51400: PPUSH
51401: LD_INT 3
51403: PPUSH
51404: CALL_OW 275
51408: PUSH
51409: LD_VAR 0 11
51413: PUSH
51414: LD_INT 3
51416: ARRAY
51417: GREATEREQUAL
51418: AND
51419: NOT
51420: IFFALSE 51424
// exit ;
51422: GO 52011
// if GetBType ( depot ) = b_depot then
51424: LD_VAR 0 1
51428: PPUSH
51429: CALL_OW 266
51433: PUSH
51434: LD_INT 0
51436: EQUAL
51437: IFFALSE 51449
// dist := 28 else
51439: LD_ADDR_VAR 0 14
51443: PUSH
51444: LD_INT 28
51446: ST_TO_ADDR
51447: GO 51457
// dist := 36 ;
51449: LD_ADDR_VAR 0 14
51453: PUSH
51454: LD_INT 36
51456: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51457: LD_VAR 0 1
51461: PPUSH
51462: LD_VAR 0 3
51466: PPUSH
51467: LD_VAR 0 4
51471: PPUSH
51472: CALL_OW 297
51476: PUSH
51477: LD_VAR 0 14
51481: GREATER
51482: IFFALSE 51486
// exit ;
51484: GO 52011
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51486: LD_ADDR_VAR 0 12
51490: PUSH
51491: LD_VAR 0 2
51495: PPUSH
51496: LD_VAR 0 3
51500: PPUSH
51501: LD_VAR 0 4
51505: PPUSH
51506: LD_VAR 0 5
51510: PPUSH
51511: LD_VAR 0 1
51515: PPUSH
51516: CALL_OW 248
51520: PPUSH
51521: LD_INT 0
51523: PPUSH
51524: CALL 52016 0 6
51528: ST_TO_ADDR
// if not hexes then
51529: LD_VAR 0 12
51533: NOT
51534: IFFALSE 51538
// exit ;
51536: GO 52011
// hex := GetHexInfo ( x , y ) ;
51538: LD_ADDR_VAR 0 15
51542: PUSH
51543: LD_VAR 0 3
51547: PPUSH
51548: LD_VAR 0 4
51552: PPUSH
51553: CALL_OW 546
51557: ST_TO_ADDR
// if hex [ 1 ] then
51558: LD_VAR 0 15
51562: PUSH
51563: LD_INT 1
51565: ARRAY
51566: IFFALSE 51570
// exit ;
51568: GO 52011
// height := hex [ 2 ] ;
51570: LD_ADDR_VAR 0 13
51574: PUSH
51575: LD_VAR 0 15
51579: PUSH
51580: LD_INT 2
51582: ARRAY
51583: ST_TO_ADDR
// for i = 1 to hexes do
51584: LD_ADDR_VAR 0 7
51588: PUSH
51589: DOUBLE
51590: LD_INT 1
51592: DEC
51593: ST_TO_ADDR
51594: LD_VAR 0 12
51598: PUSH
51599: FOR_TO
51600: IFFALSE 51930
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51602: LD_VAR 0 12
51606: PUSH
51607: LD_VAR 0 7
51611: ARRAY
51612: PUSH
51613: LD_INT 1
51615: ARRAY
51616: PPUSH
51617: LD_VAR 0 12
51621: PUSH
51622: LD_VAR 0 7
51626: ARRAY
51627: PUSH
51628: LD_INT 2
51630: ARRAY
51631: PPUSH
51632: CALL_OW 488
51636: NOT
51637: PUSH
51638: LD_VAR 0 12
51642: PUSH
51643: LD_VAR 0 7
51647: ARRAY
51648: PUSH
51649: LD_INT 1
51651: ARRAY
51652: PPUSH
51653: LD_VAR 0 12
51657: PUSH
51658: LD_VAR 0 7
51662: ARRAY
51663: PUSH
51664: LD_INT 2
51666: ARRAY
51667: PPUSH
51668: CALL_OW 428
51672: PUSH
51673: LD_INT 0
51675: GREATER
51676: OR
51677: PUSH
51678: LD_VAR 0 12
51682: PUSH
51683: LD_VAR 0 7
51687: ARRAY
51688: PUSH
51689: LD_INT 1
51691: ARRAY
51692: PPUSH
51693: LD_VAR 0 12
51697: PUSH
51698: LD_VAR 0 7
51702: ARRAY
51703: PUSH
51704: LD_INT 2
51706: ARRAY
51707: PPUSH
51708: CALL_OW 351
51712: OR
51713: IFFALSE 51719
// exit ;
51715: POP
51716: POP
51717: GO 52011
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51719: LD_ADDR_VAR 0 8
51723: PUSH
51724: LD_VAR 0 12
51728: PUSH
51729: LD_VAR 0 7
51733: ARRAY
51734: PUSH
51735: LD_INT 1
51737: ARRAY
51738: PPUSH
51739: LD_VAR 0 12
51743: PUSH
51744: LD_VAR 0 7
51748: ARRAY
51749: PUSH
51750: LD_INT 2
51752: ARRAY
51753: PPUSH
51754: CALL_OW 546
51758: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51759: LD_VAR 0 8
51763: PUSH
51764: LD_INT 1
51766: ARRAY
51767: PUSH
51768: LD_VAR 0 8
51772: PUSH
51773: LD_INT 2
51775: ARRAY
51776: PUSH
51777: LD_VAR 0 13
51781: PUSH
51782: LD_INT 2
51784: PLUS
51785: GREATER
51786: OR
51787: PUSH
51788: LD_VAR 0 8
51792: PUSH
51793: LD_INT 2
51795: ARRAY
51796: PUSH
51797: LD_VAR 0 13
51801: PUSH
51802: LD_INT 2
51804: MINUS
51805: LESS
51806: OR
51807: PUSH
51808: LD_VAR 0 8
51812: PUSH
51813: LD_INT 3
51815: ARRAY
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 8
51822: PUSH
51823: LD_INT 9
51825: PUSH
51826: LD_INT 10
51828: PUSH
51829: LD_INT 11
51831: PUSH
51832: LD_INT 12
51834: PUSH
51835: LD_INT 13
51837: PUSH
51838: LD_INT 16
51840: PUSH
51841: LD_INT 17
51843: PUSH
51844: LD_INT 18
51846: PUSH
51847: LD_INT 19
51849: PUSH
51850: LD_INT 20
51852: PUSH
51853: LD_INT 21
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: IN
51871: NOT
51872: OR
51873: PUSH
51874: LD_VAR 0 8
51878: PUSH
51879: LD_INT 5
51881: ARRAY
51882: NOT
51883: OR
51884: PUSH
51885: LD_VAR 0 8
51889: PUSH
51890: LD_INT 6
51892: ARRAY
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: LD_INT 7
51902: PUSH
51903: LD_INT 9
51905: PUSH
51906: LD_INT 10
51908: PUSH
51909: LD_INT 11
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: IN
51920: NOT
51921: OR
51922: IFFALSE 51928
// exit ;
51924: POP
51925: POP
51926: GO 52011
// end ;
51928: GO 51599
51930: POP
51931: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51932: LD_VAR 0 9
51936: PPUSH
51937: LD_VAR 0 3
51941: PPUSH
51942: LD_VAR 0 4
51946: PPUSH
51947: LD_INT 20
51949: PPUSH
51950: CALL 43957 0 4
51954: PUSH
51955: LD_INT 4
51957: ARRAY
51958: IFFALSE 51962
// exit ;
51960: GO 52011
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51962: LD_VAR 0 2
51966: PUSH
51967: LD_INT 29
51969: PUSH
51970: LD_INT 30
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: IN
51977: PUSH
51978: LD_VAR 0 3
51982: PPUSH
51983: LD_VAR 0 4
51987: PPUSH
51988: LD_VAR 0 9
51992: PPUSH
51993: CALL_OW 440
51997: NOT
51998: AND
51999: IFFALSE 52003
// exit ;
52001: GO 52011
// result := true ;
52003: LD_ADDR_VAR 0 6
52007: PUSH
52008: LD_INT 1
52010: ST_TO_ADDR
// end ;
52011: LD_VAR 0 6
52015: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52016: LD_INT 0
52018: PPUSH
52019: PPUSH
52020: PPUSH
52021: PPUSH
52022: PPUSH
52023: PPUSH
52024: PPUSH
52025: PPUSH
52026: PPUSH
52027: PPUSH
52028: PPUSH
52029: PPUSH
52030: PPUSH
52031: PPUSH
52032: PPUSH
52033: PPUSH
52034: PPUSH
52035: PPUSH
52036: PPUSH
52037: PPUSH
52038: PPUSH
52039: PPUSH
52040: PPUSH
52041: PPUSH
52042: PPUSH
52043: PPUSH
52044: PPUSH
52045: PPUSH
52046: PPUSH
52047: PPUSH
52048: PPUSH
52049: PPUSH
52050: PPUSH
52051: PPUSH
52052: PPUSH
52053: PPUSH
52054: PPUSH
52055: PPUSH
52056: PPUSH
52057: PPUSH
52058: PPUSH
52059: PPUSH
52060: PPUSH
52061: PPUSH
52062: PPUSH
52063: PPUSH
52064: PPUSH
52065: PPUSH
52066: PPUSH
52067: PPUSH
52068: PPUSH
52069: PPUSH
52070: PPUSH
52071: PPUSH
52072: PPUSH
52073: PPUSH
52074: PPUSH
52075: PPUSH
// result = [ ] ;
52076: LD_ADDR_VAR 0 7
52080: PUSH
52081: EMPTY
52082: ST_TO_ADDR
// temp_list = [ ] ;
52083: LD_ADDR_VAR 0 9
52087: PUSH
52088: EMPTY
52089: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52090: LD_VAR 0 4
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 2
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: LD_INT 4
52109: PUSH
52110: LD_INT 5
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: IN
52121: NOT
52122: PUSH
52123: LD_VAR 0 1
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: IN
52138: PUSH
52139: LD_VAR 0 5
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: LIST
52157: IN
52158: NOT
52159: AND
52160: OR
52161: IFFALSE 52165
// exit ;
52163: GO 70556
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52165: LD_VAR 0 1
52169: PUSH
52170: LD_INT 6
52172: PUSH
52173: LD_INT 7
52175: PUSH
52176: LD_INT 8
52178: PUSH
52179: LD_INT 13
52181: PUSH
52182: LD_INT 12
52184: PUSH
52185: LD_INT 15
52187: PUSH
52188: LD_INT 11
52190: PUSH
52191: LD_INT 14
52193: PUSH
52194: LD_INT 10
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: IN
52208: IFFALSE 52218
// btype = b_lab ;
52210: LD_ADDR_VAR 0 1
52214: PUSH
52215: LD_INT 6
52217: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52218: LD_VAR 0 6
52222: PUSH
52223: LD_INT 0
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: LIST
52236: IN
52237: NOT
52238: PUSH
52239: LD_VAR 0 1
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: LD_INT 6
52258: PUSH
52259: LD_INT 36
52261: PUSH
52262: LD_INT 4
52264: PUSH
52265: LD_INT 5
52267: PUSH
52268: LD_INT 31
52270: PUSH
52271: LD_INT 32
52273: PUSH
52274: LD_INT 33
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: IN
52290: NOT
52291: PUSH
52292: LD_VAR 0 6
52296: PUSH
52297: LD_INT 1
52299: EQUAL
52300: AND
52301: OR
52302: PUSH
52303: LD_VAR 0 1
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: IN
52318: NOT
52319: PUSH
52320: LD_VAR 0 6
52324: PUSH
52325: LD_INT 2
52327: EQUAL
52328: AND
52329: OR
52330: IFFALSE 52340
// mode = 0 ;
52332: LD_ADDR_VAR 0 6
52336: PUSH
52337: LD_INT 0
52339: ST_TO_ADDR
// case mode of 0 :
52340: LD_VAR 0 6
52344: PUSH
52345: LD_INT 0
52347: DOUBLE
52348: EQUAL
52349: IFTRUE 52353
52351: GO 63806
52353: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52354: LD_ADDR_VAR 0 11
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: LD_INT 3
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 3
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52547: LD_ADDR_VAR 0 12
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 3
52704: NEG
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 3
52715: NEG
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52743: LD_ADDR_VAR 0 13
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: LD_INT 3
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 3
52902: NEG
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 3
52914: NEG
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52942: LD_ADDR_VAR 0 14
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 2
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 3
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: LD_INT 3
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53138: LD_ADDR_VAR 0 15
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: NEG
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 3
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 3
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53331: LD_ADDR_VAR 0 16
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 3
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 3
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53524: LD_ADDR_VAR 0 17
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 2
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53754: LD_ADDR_VAR 0 18
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 2
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53984: LD_ADDR_VAR 0 19
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 2
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54214: LD_ADDR_VAR 0 20
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54444: LD_ADDR_VAR 0 21
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54674: LD_ADDR_VAR 0 22
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54904: LD_ADDR_VAR 0 23
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55184: LD_ADDR_VAR 0 24
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: NEG
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 3
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55460: LD_ADDR_VAR 0 25
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 3
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55734: LD_ADDR_VAR 0 26
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 3
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 3
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56010: LD_ADDR_VAR 0 27
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: LD_INT 2
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: NEG
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 3
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56290: LD_ADDR_VAR 0 28
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: LD_INT 2
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: NEG
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: LD_INT 3
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: LD_INT 3
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 3
56525: NEG
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56572: LD_ADDR_VAR 0 29
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: LD_INT 2
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: NEG
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 2
56762: NEG
56763: PUSH
56764: LD_INT 3
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 3
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 3
56816: NEG
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56851: LD_ADDR_VAR 0 30
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 3
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 3
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: LD_INT 3
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 3
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57129: LD_ADDR_VAR 0 31
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: LD_INT 2
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 2
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: NEG
57319: PUSH
57320: LD_INT 3
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 3
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 3
57372: NEG
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57407: LD_ADDR_VAR 0 32
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: LD_INT 2
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 2
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: LD_INT 3
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: LD_INT 2
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 3
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: LD_INT 3
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57685: LD_ADDR_VAR 0 33
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: LD_INT 2
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: LD_INT 3
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: LD_INT 3
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57964: LD_ADDR_VAR 0 34
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: NEG
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: LD_INT 1
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: LD_INT 3
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 3
58209: NEG
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58244: LD_ADDR_VAR 0 35
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58356: LD_ADDR_VAR 0 36
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58468: LD_ADDR_VAR 0 37
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58580: LD_ADDR_VAR 0 38
58584: PUSH
58585: LD_INT 0
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 1
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 2
58671: NEG
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58692: LD_ADDR_VAR 0 39
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58804: LD_ADDR_VAR 0 40
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58916: LD_ADDR_VAR 0 41
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 2
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: LD_INT 0
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: NEG
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 3
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 2
59179: NEG
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 3
59190: NEG
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: NEG
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 3
59213: NEG
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 3
59225: NEG
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59266: LD_ADDR_VAR 0 42
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 2
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: LD_INT 2
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: NEG
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: LD_INT 2
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: LD_INT 3
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 0
59480: PUSH
59481: LD_INT 3
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 3
59512: PUSH
59513: LD_INT 3
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: LD_INT 3
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: LD_INT 3
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: NEG
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59616: LD_ADDR_VAR 0 43
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: LD_INT 3
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: LD_INT 3
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 2
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 3
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 3
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: LD_INT 3
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: LD_INT 3
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: NEG
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 3
59912: NEG
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 3
59923: NEG
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59964: LD_ADDR_VAR 0 44
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 2
60119: NEG
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 2
60130: NEG
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 2
60142: NEG
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: LD_INT 3
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: LD_INT 3
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 2
60227: NEG
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 3
60238: NEG
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 3
60249: NEG
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 3
60261: NEG
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: LD_INT 3
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60314: LD_ADDR_VAR 0 45
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 2
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 2
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: LD_INT 3
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: LD_INT 3
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 0
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 3
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 3
60560: PUSH
60561: LD_INT 3
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: LD_INT 3
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 3
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: LD_INT 2
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 3
60611: NEG
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 3
60623: NEG
60624: PUSH
60625: LD_INT 3
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60664: LD_ADDR_VAR 0 46
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 2
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 2
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: NEG
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: LD_INT 3
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: LD_INT 3
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 2
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 3
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: LD_INT 3
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: LD_INT 3
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: LD_INT 2
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: NEG
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 3
60971: NEG
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61012: LD_ADDR_VAR 0 47
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 1
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 1
61081: NEG
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: LD_INT 2
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: NEG
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 2
61139: NEG
61140: PUSH
61141: LD_INT 2
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61163: LD_ADDR_VAR 0 48
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: LD_INT 2
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61310: LD_ADDR_VAR 0 49
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: LD_INT 1
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: LD_INT 1
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 1
61379: NEG
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: LD_INT 0
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 2
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: LD_INT 2
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61454: LD_ADDR_VAR 0 50
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61598: LD_ADDR_VAR 0 51
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: LD_INT 2
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 2
61710: NEG
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61745: LD_ADDR_VAR 0 52
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: LD_INT 2
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 2
61872: NEG
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61896: LD_ADDR_VAR 0 53
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 1
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: LD_INT 2
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: LD_INT 1
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 2
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 2
62072: NEG
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 2
62083: NEG
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 2
62095: NEG
62096: PUSH
62097: LD_INT 2
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62126: LD_ADDR_VAR 0 54
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 2
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 2
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 2
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 2
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 2
62261: PUSH
62262: LD_INT 2
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 2
62302: NEG
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: NEG
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: NEG
62326: PUSH
62327: LD_INT 2
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62356: LD_ADDR_VAR 0 55
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 1
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: LD_INT 1
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: LD_INT 2
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: LD_INT 2
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 2
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: NEG
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 2
62532: NEG
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 2
62555: NEG
62556: PUSH
62557: LD_INT 2
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62586: LD_ADDR_VAR 0 56
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: LD_INT 1
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 2
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 1
62751: NEG
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: LD_INT 2
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62816: LD_ADDR_VAR 0 57
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: NEG
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 1
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: LD_INT 2
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 2
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: PUSH
62983: LD_INT 1
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 2
62992: NEG
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: LD_INT 2
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63046: LD_ADDR_VAR 0 58
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: LD_INT 2
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: LD_INT 2
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 2
63181: PUSH
63182: LD_INT 2
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: LD_INT 2
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: LD_INT 1
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 2
63233: NEG
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 2
63245: NEG
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63276: LD_ADDR_VAR 0 59
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: LD_INT 1
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 1
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63364: LD_ADDR_VAR 0 60
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 1
63422: NEG
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: LD_INT 1
63437: NEG
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63452: LD_ADDR_VAR 0 61
63456: PUSH
63457: LD_INT 0
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 1
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: LD_INT 1
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63540: LD_ADDR_VAR 0 62
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 1
63598: NEG
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: LD_INT 1
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63628: LD_ADDR_VAR 0 63
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: LD_INT 1
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: LD_INT 1
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: LD_INT 1
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63716: LD_ADDR_VAR 0 64
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 0
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 1
63744: PUSH
63745: LD_INT 0
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 1
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 1
63774: NEG
63775: PUSH
63776: LD_INT 0
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: ST_TO_ADDR
// end ; 1 :
63804: GO 69701
63806: LD_INT 1
63808: DOUBLE
63809: EQUAL
63810: IFTRUE 63814
63812: GO 66437
63814: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63815: LD_ADDR_VAR 0 11
63819: PUSH
63820: LD_INT 1
63822: NEG
63823: PUSH
63824: LD_INT 3
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: LD_INT 3
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: LD_INT 2
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: LIST
63858: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63859: LD_ADDR_VAR 0 12
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 3
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 3
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: LIST
63899: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63900: LD_ADDR_VAR 0 13
63904: PUSH
63905: LD_INT 3
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 3
63917: PUSH
63918: LD_INT 3
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 2
63927: PUSH
63928: LD_INT 3
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: LIST
63939: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63940: LD_ADDR_VAR 0 14
63944: PUSH
63945: LD_INT 1
63947: PUSH
63948: LD_INT 3
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 0
63957: PUSH
63958: LD_INT 3
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 1
63967: NEG
63968: PUSH
63969: LD_INT 2
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63981: LD_ADDR_VAR 0 15
63985: PUSH
63986: LD_INT 2
63988: NEG
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 3
63999: NEG
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 3
64010: NEG
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64025: LD_ADDR_VAR 0 16
64029: PUSH
64030: LD_INT 2
64032: NEG
64033: PUSH
64034: LD_INT 3
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 3
64044: NEG
64045: PUSH
64046: LD_INT 2
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 3
64056: NEG
64057: PUSH
64058: LD_INT 3
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: LIST
64070: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64071: LD_ADDR_VAR 0 17
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: LD_INT 3
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: LD_INT 3
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: LD_INT 2
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64115: LD_ADDR_VAR 0 18
64119: PUSH
64120: LD_INT 2
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 3
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 3
64143: PUSH
64144: LD_INT 1
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: LIST
64155: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64156: LD_ADDR_VAR 0 19
64160: PUSH
64161: LD_INT 3
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 3
64173: PUSH
64174: LD_INT 3
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 2
64183: PUSH
64184: LD_INT 3
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: LIST
64195: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64196: LD_ADDR_VAR 0 20
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: LD_INT 3
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: LD_INT 3
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: LD_INT 2
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: LIST
64236: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64237: LD_ADDR_VAR 0 21
64241: PUSH
64242: LD_INT 2
64244: NEG
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 3
64255: NEG
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 3
64266: NEG
64267: PUSH
64268: LD_INT 1
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: LIST
64280: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64281: LD_ADDR_VAR 0 22
64285: PUSH
64286: LD_INT 2
64288: NEG
64289: PUSH
64290: LD_INT 3
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 3
64300: NEG
64301: PUSH
64302: LD_INT 2
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 3
64312: NEG
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: LIST
64326: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64327: LD_ADDR_VAR 0 23
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 3
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: LD_INT 4
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: LD_INT 3
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: LIST
64370: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64371: LD_ADDR_VAR 0 24
64375: PUSH
64376: LD_INT 3
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 3
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 4
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: LIST
64411: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64412: LD_ADDR_VAR 0 25
64416: PUSH
64417: LD_INT 3
64419: PUSH
64420: LD_INT 3
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 4
64429: PUSH
64430: LD_INT 3
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 3
64439: PUSH
64440: LD_INT 4
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: LIST
64451: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64452: LD_ADDR_VAR 0 26
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: LD_INT 3
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: LD_INT 4
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: LD_INT 3
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: LIST
64492: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64493: LD_ADDR_VAR 0 27
64497: PUSH
64498: LD_INT 3
64500: NEG
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 3
64511: NEG
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 4
64522: NEG
64523: PUSH
64524: LD_INT 1
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: LIST
64536: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64537: LD_ADDR_VAR 0 28
64541: PUSH
64542: LD_INT 3
64544: NEG
64545: PUSH
64546: LD_INT 3
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 3
64556: NEG
64557: PUSH
64558: LD_INT 4
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 4
64568: NEG
64569: PUSH
64570: LD_INT 3
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: LIST
64582: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64583: LD_ADDR_VAR 0 29
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: LD_INT 3
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: LD_INT 3
64605: NEG
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 1
64613: PUSH
64614: LD_INT 2
64616: NEG
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: LD_INT 4
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 0
64636: PUSH
64637: LD_INT 4
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 1
64647: PUSH
64648: LD_INT 3
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: LD_INT 5
64662: NEG
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: LD_INT 5
64673: NEG
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: LD_INT 4
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: LD_INT 6
64696: NEG
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: LD_INT 6
64707: NEG
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: LD_INT 5
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64738: LD_ADDR_VAR 0 30
64742: PUSH
64743: LD_INT 2
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 3
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 3
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 3
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 4
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 4
64797: PUSH
64798: LD_INT 1
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 4
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 5
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 5
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 5
64838: PUSH
64839: LD_INT 1
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 6
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 6
64859: PUSH
64860: LD_INT 1
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64881: LD_ADDR_VAR 0 31
64885: PUSH
64886: LD_INT 3
64888: PUSH
64889: LD_INT 2
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 3
64898: PUSH
64899: LD_INT 3
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 2
64908: PUSH
64909: LD_INT 3
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 4
64918: PUSH
64919: LD_INT 3
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 4
64928: PUSH
64929: LD_INT 4
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 3
64938: PUSH
64939: LD_INT 4
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 5
64948: PUSH
64949: LD_INT 4
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 5
64958: PUSH
64959: LD_INT 5
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 4
64968: PUSH
64969: LD_INT 5
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 6
64978: PUSH
64979: LD_INT 5
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 6
64988: PUSH
64989: LD_INT 6
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 5
64998: PUSH
64999: LD_INT 6
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65020: LD_ADDR_VAR 0 32
65024: PUSH
65025: LD_INT 1
65027: PUSH
65028: LD_INT 3
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: LD_INT 3
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: LD_INT 2
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: PUSH
65059: LD_INT 4
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: LD_INT 4
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 1
65078: NEG
65079: PUSH
65080: LD_INT 3
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: LD_INT 5
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: LD_INT 5
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 1
65109: NEG
65110: PUSH
65111: LD_INT 4
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: LD_INT 6
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 6
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: LD_INT 5
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65163: LD_ADDR_VAR 0 33
65167: PUSH
65168: LD_INT 2
65170: NEG
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 3
65181: NEG
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 3
65192: NEG
65193: PUSH
65194: LD_INT 1
65196: NEG
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 3
65204: NEG
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 4
65215: NEG
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 4
65226: NEG
65227: PUSH
65228: LD_INT 1
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 4
65238: NEG
65239: PUSH
65240: LD_INT 1
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 5
65249: NEG
65250: PUSH
65251: LD_INT 0
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 5
65260: NEG
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 5
65272: NEG
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 6
65283: NEG
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 6
65294: NEG
65295: PUSH
65296: LD_INT 1
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65318: LD_ADDR_VAR 0 34
65322: PUSH
65323: LD_INT 2
65325: NEG
65326: PUSH
65327: LD_INT 3
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 3
65337: NEG
65338: PUSH
65339: LD_INT 2
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 3
65349: NEG
65350: PUSH
65351: LD_INT 3
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 3
65361: NEG
65362: PUSH
65363: LD_INT 4
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 4
65373: NEG
65374: PUSH
65375: LD_INT 3
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 4
65385: NEG
65386: PUSH
65387: LD_INT 4
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 4
65397: NEG
65398: PUSH
65399: LD_INT 5
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 5
65409: NEG
65410: PUSH
65411: LD_INT 4
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 5
65421: NEG
65422: PUSH
65423: LD_INT 5
65425: NEG
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 5
65433: NEG
65434: PUSH
65435: LD_INT 6
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 6
65445: NEG
65446: PUSH
65447: LD_INT 5
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 6
65457: NEG
65458: PUSH
65459: LD_INT 6
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65481: LD_ADDR_VAR 0 41
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: LD_INT 2
65491: NEG
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: LD_INT 3
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: LD_INT 2
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: LIST
65524: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65525: LD_ADDR_VAR 0 42
65529: PUSH
65530: LD_INT 2
65532: PUSH
65533: LD_INT 0
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 2
65542: PUSH
65543: LD_INT 1
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 3
65553: PUSH
65554: LD_INT 1
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: LIST
65565: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65566: LD_ADDR_VAR 0 43
65570: PUSH
65571: LD_INT 2
65573: PUSH
65574: LD_INT 2
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 3
65583: PUSH
65584: LD_INT 2
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 2
65593: PUSH
65594: LD_INT 3
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: LIST
65605: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65606: LD_ADDR_VAR 0 44
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 1
65623: PUSH
65624: LD_INT 3
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: LD_INT 2
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: LIST
65646: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65647: LD_ADDR_VAR 0 45
65651: PUSH
65652: LD_INT 2
65654: NEG
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 2
65665: NEG
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 3
65676: NEG
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: LIST
65690: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65691: LD_ADDR_VAR 0 46
65695: PUSH
65696: LD_INT 2
65698: NEG
65699: PUSH
65700: LD_INT 2
65702: NEG
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 2
65710: NEG
65711: PUSH
65712: LD_INT 3
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 3
65722: NEG
65723: PUSH
65724: LD_INT 2
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65737: LD_ADDR_VAR 0 47
65741: PUSH
65742: LD_INT 2
65744: NEG
65745: PUSH
65746: LD_INT 3
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: LD_INT 3
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65770: LD_ADDR_VAR 0 48
65774: PUSH
65775: LD_INT 1
65777: PUSH
65778: LD_INT 2
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 2
65788: PUSH
65789: LD_INT 1
65791: NEG
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65801: LD_ADDR_VAR 0 49
65805: PUSH
65806: LD_INT 3
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 3
65818: PUSH
65819: LD_INT 2
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65830: LD_ADDR_VAR 0 50
65834: PUSH
65835: LD_INT 2
65837: PUSH
65838: LD_INT 3
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: LD_INT 3
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65859: LD_ADDR_VAR 0 51
65863: PUSH
65864: LD_INT 1
65866: NEG
65867: PUSH
65868: LD_INT 2
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 2
65877: NEG
65878: PUSH
65879: LD_INT 1
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65890: LD_ADDR_VAR 0 52
65894: PUSH
65895: LD_INT 3
65897: NEG
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 3
65909: NEG
65910: PUSH
65911: LD_INT 2
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65923: LD_ADDR_VAR 0 53
65927: PUSH
65928: LD_INT 1
65930: NEG
65931: PUSH
65932: LD_INT 3
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: LD_INT 3
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 1
65953: PUSH
65954: LD_INT 2
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65967: LD_ADDR_VAR 0 54
65971: PUSH
65972: LD_INT 2
65974: PUSH
65975: LD_INT 1
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 3
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 3
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: LIST
66007: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66008: LD_ADDR_VAR 0 55
66012: PUSH
66013: LD_INT 3
66015: PUSH
66016: LD_INT 2
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 3
66025: PUSH
66026: LD_INT 3
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: LD_INT 3
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: LIST
66047: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66048: LD_ADDR_VAR 0 56
66052: PUSH
66053: LD_INT 1
66055: PUSH
66056: LD_INT 3
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: LD_INT 3
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: LD_INT 2
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: LIST
66088: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66089: LD_ADDR_VAR 0 57
66093: PUSH
66094: LD_INT 2
66096: NEG
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 3
66107: NEG
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 3
66118: NEG
66119: PUSH
66120: LD_INT 1
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: LIST
66132: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66133: LD_ADDR_VAR 0 58
66137: PUSH
66138: LD_INT 2
66140: NEG
66141: PUSH
66142: LD_INT 3
66144: NEG
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 3
66152: NEG
66153: PUSH
66154: LD_INT 2
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 3
66164: NEG
66165: PUSH
66166: LD_INT 3
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: LIST
66178: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66179: LD_ADDR_VAR 0 59
66183: PUSH
66184: LD_INT 1
66186: NEG
66187: PUSH
66188: LD_INT 2
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 0
66198: PUSH
66199: LD_INT 2
66201: NEG
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 1
66209: PUSH
66210: LD_INT 1
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: LIST
66222: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66223: LD_ADDR_VAR 0 60
66227: PUSH
66228: LD_INT 1
66230: PUSH
66231: LD_INT 1
66233: NEG
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 2
66241: PUSH
66242: LD_INT 0
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 2
66251: PUSH
66252: LD_INT 1
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: LIST
66263: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66264: LD_ADDR_VAR 0 61
66268: PUSH
66269: LD_INT 2
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 2
66281: PUSH
66282: LD_INT 2
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: LD_INT 2
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: LIST
66303: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66304: LD_ADDR_VAR 0 62
66308: PUSH
66309: LD_INT 1
66311: PUSH
66312: LD_INT 2
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: LD_INT 2
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 1
66331: NEG
66332: PUSH
66333: LD_INT 1
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: LIST
66344: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66345: LD_ADDR_VAR 0 63
66349: PUSH
66350: LD_INT 1
66352: NEG
66353: PUSH
66354: LD_INT 1
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 2
66363: NEG
66364: PUSH
66365: LD_INT 0
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 2
66374: NEG
66375: PUSH
66376: LD_INT 1
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66389: LD_ADDR_VAR 0 64
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: LD_INT 2
66400: NEG
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 2
66408: NEG
66409: PUSH
66410: LD_INT 1
66412: NEG
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 2
66420: NEG
66421: PUSH
66422: LD_INT 2
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: ST_TO_ADDR
// end ; 2 :
66435: GO 69701
66437: LD_INT 2
66439: DOUBLE
66440: EQUAL
66441: IFTRUE 66445
66443: GO 69700
66445: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66446: LD_ADDR_VAR 0 29
66450: PUSH
66451: LD_INT 4
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 4
66463: PUSH
66464: LD_INT 1
66466: NEG
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 5
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 5
66484: PUSH
66485: LD_INT 1
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 4
66494: PUSH
66495: LD_INT 1
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 3
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 3
66525: PUSH
66526: LD_INT 2
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 5
66536: PUSH
66537: LD_INT 2
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 3
66546: PUSH
66547: LD_INT 3
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 3
66556: PUSH
66557: LD_INT 2
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 4
66566: PUSH
66567: LD_INT 3
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 4
66576: PUSH
66577: LD_INT 4
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 3
66586: PUSH
66587: LD_INT 4
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 2
66596: PUSH
66597: LD_INT 3
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 2
66606: PUSH
66607: LD_INT 2
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 4
66616: PUSH
66617: LD_INT 2
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 2
66626: PUSH
66627: LD_INT 4
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: LD_INT 4
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: LD_INT 3
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 1
66656: PUSH
66657: LD_INT 4
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 1
66666: PUSH
66667: LD_INT 5
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 0
66676: PUSH
66677: LD_INT 5
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 1
66686: NEG
66687: PUSH
66688: LD_INT 4
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: LD_INT 3
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 2
66708: PUSH
66709: LD_INT 5
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 2
66718: NEG
66719: PUSH
66720: LD_INT 3
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 3
66729: NEG
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 3
66740: NEG
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 2
66752: NEG
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 2
66763: NEG
66764: PUSH
66765: LD_INT 1
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 3
66774: NEG
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 4
66785: NEG
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 4
66796: NEG
66797: PUSH
66798: LD_INT 1
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 4
66808: NEG
66809: PUSH
66810: LD_INT 2
66812: NEG
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 2
66820: NEG
66821: PUSH
66822: LD_INT 2
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 4
66831: NEG
66832: PUSH
66833: LD_INT 4
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 4
66843: NEG
66844: PUSH
66845: LD_INT 5
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 3
66855: NEG
66856: PUSH
66857: LD_INT 4
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 3
66867: NEG
66868: PUSH
66869: LD_INT 3
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 4
66879: NEG
66880: PUSH
66881: LD_INT 3
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 5
66891: NEG
66892: PUSH
66893: LD_INT 4
66895: NEG
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 5
66903: NEG
66904: PUSH
66905: LD_INT 5
66907: NEG
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 3
66915: NEG
66916: PUSH
66917: LD_INT 5
66919: NEG
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 5
66927: NEG
66928: PUSH
66929: LD_INT 3
66931: NEG
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66984: LD_ADDR_VAR 0 30
66988: PUSH
66989: LD_INT 4
66991: PUSH
66992: LD_INT 4
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 4
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 5
67011: PUSH
67012: LD_INT 4
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 5
67021: PUSH
67022: LD_INT 5
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 4
67031: PUSH
67032: LD_INT 5
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 3
67041: PUSH
67042: LD_INT 4
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 3
67051: PUSH
67052: LD_INT 3
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 5
67061: PUSH
67062: LD_INT 3
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 3
67071: PUSH
67072: LD_INT 5
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: LD_INT 3
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 0
67091: PUSH
67092: LD_INT 2
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 1
67101: PUSH
67102: LD_INT 3
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 1
67111: PUSH
67112: LD_INT 4
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 4
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 1
67131: NEG
67132: PUSH
67133: LD_INT 3
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: NEG
67143: PUSH
67144: LD_INT 2
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 2
67153: PUSH
67154: LD_INT 4
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 2
67163: NEG
67164: PUSH
67165: LD_INT 2
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 4
67174: NEG
67175: PUSH
67176: LD_INT 0
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 4
67185: NEG
67186: PUSH
67187: LD_INT 1
67189: NEG
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 3
67197: NEG
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: NEG
67209: PUSH
67210: LD_INT 1
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 4
67219: NEG
67220: PUSH
67221: LD_INT 1
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 5
67230: NEG
67231: PUSH
67232: LD_INT 0
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 5
67241: NEG
67242: PUSH
67243: LD_INT 1
67245: NEG
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 5
67253: NEG
67254: PUSH
67255: LD_INT 2
67257: NEG
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 3
67265: NEG
67266: PUSH
67267: LD_INT 2
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 3
67276: NEG
67277: PUSH
67278: LD_INT 3
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 3
67288: NEG
67289: PUSH
67290: LD_INT 4
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 2
67300: NEG
67301: PUSH
67302: LD_INT 3
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 2
67312: NEG
67313: PUSH
67314: LD_INT 2
67316: NEG
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 3
67324: NEG
67325: PUSH
67326: LD_INT 2
67328: NEG
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 4
67336: NEG
67337: PUSH
67338: LD_INT 3
67340: NEG
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 4
67348: NEG
67349: PUSH
67350: LD_INT 4
67352: NEG
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 2
67360: NEG
67361: PUSH
67362: LD_INT 4
67364: NEG
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 4
67372: NEG
67373: PUSH
67374: LD_INT 2
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: LD_INT 4
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 0
67395: PUSH
67396: LD_INT 5
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 1
67406: PUSH
67407: LD_INT 4
67409: NEG
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 1
67417: PUSH
67418: LD_INT 3
67420: NEG
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: LD_INT 3
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 1
67439: NEG
67440: PUSH
67441: LD_INT 4
67443: NEG
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 1
67451: NEG
67452: PUSH
67453: LD_INT 5
67455: NEG
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 2
67463: PUSH
67464: LD_INT 3
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 2
67474: NEG
67475: PUSH
67476: LD_INT 5
67478: NEG
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67531: LD_ADDR_VAR 0 31
67535: PUSH
67536: LD_INT 0
67538: PUSH
67539: LD_INT 4
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: LD_INT 3
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 1
67558: PUSH
67559: LD_INT 4
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 1
67568: PUSH
67569: LD_INT 5
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 0
67578: PUSH
67579: LD_INT 5
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 1
67588: NEG
67589: PUSH
67590: LD_INT 4
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 1
67599: NEG
67600: PUSH
67601: LD_INT 3
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 2
67610: PUSH
67611: LD_INT 5
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 2
67620: NEG
67621: PUSH
67622: LD_INT 3
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 3
67631: NEG
67632: PUSH
67633: LD_INT 0
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 3
67642: NEG
67643: PUSH
67644: LD_INT 1
67646: NEG
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 2
67654: NEG
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 2
67665: NEG
67666: PUSH
67667: LD_INT 1
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 3
67676: NEG
67677: PUSH
67678: LD_INT 1
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 4
67687: NEG
67688: PUSH
67689: LD_INT 0
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 4
67698: NEG
67699: PUSH
67700: LD_INT 1
67702: NEG
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 4
67710: NEG
67711: PUSH
67712: LD_INT 2
67714: NEG
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 2
67722: NEG
67723: PUSH
67724: LD_INT 2
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 4
67733: NEG
67734: PUSH
67735: LD_INT 4
67737: NEG
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 4
67745: NEG
67746: PUSH
67747: LD_INT 5
67749: NEG
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 3
67757: NEG
67758: PUSH
67759: LD_INT 4
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 3
67769: NEG
67770: PUSH
67771: LD_INT 3
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 4
67781: NEG
67782: PUSH
67783: LD_INT 3
67785: NEG
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 5
67793: NEG
67794: PUSH
67795: LD_INT 4
67797: NEG
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 5
67805: NEG
67806: PUSH
67807: LD_INT 5
67809: NEG
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 3
67817: NEG
67818: PUSH
67819: LD_INT 5
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 5
67829: NEG
67830: PUSH
67831: LD_INT 3
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 0
67841: PUSH
67842: LD_INT 3
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 0
67852: PUSH
67853: LD_INT 4
67855: NEG
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 1
67863: PUSH
67864: LD_INT 3
67866: NEG
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 1
67874: PUSH
67875: LD_INT 2
67877: NEG
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: LD_INT 2
67888: NEG
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 1
67896: NEG
67897: PUSH
67898: LD_INT 3
67900: NEG
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 1
67908: NEG
67909: PUSH
67910: LD_INT 4
67912: NEG
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 2
67920: PUSH
67921: LD_INT 2
67923: NEG
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 2
67931: NEG
67932: PUSH
67933: LD_INT 4
67935: NEG
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 4
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 4
67953: PUSH
67954: LD_INT 1
67956: NEG
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 5
67964: PUSH
67965: LD_INT 0
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 5
67974: PUSH
67975: LD_INT 1
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 4
67984: PUSH
67985: LD_INT 1
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 3
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 3
68004: PUSH
68005: LD_INT 1
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 3
68015: PUSH
68016: LD_INT 2
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 5
68026: PUSH
68027: LD_INT 2
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68081: LD_ADDR_VAR 0 32
68085: PUSH
68086: LD_INT 4
68088: NEG
68089: PUSH
68090: LD_INT 0
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 4
68099: NEG
68100: PUSH
68101: LD_INT 1
68103: NEG
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 3
68111: NEG
68112: PUSH
68113: LD_INT 0
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 3
68122: NEG
68123: PUSH
68124: LD_INT 1
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 4
68133: NEG
68134: PUSH
68135: LD_INT 1
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 5
68144: NEG
68145: PUSH
68146: LD_INT 0
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 5
68155: NEG
68156: PUSH
68157: LD_INT 1
68159: NEG
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 5
68167: NEG
68168: PUSH
68169: LD_INT 2
68171: NEG
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 3
68179: NEG
68180: PUSH
68181: LD_INT 2
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 3
68190: NEG
68191: PUSH
68192: LD_INT 3
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 3
68202: NEG
68203: PUSH
68204: LD_INT 4
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: LD_INT 3
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 2
68226: NEG
68227: PUSH
68228: LD_INT 2
68230: NEG
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 3
68238: NEG
68239: PUSH
68240: LD_INT 2
68242: NEG
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 4
68250: NEG
68251: PUSH
68252: LD_INT 3
68254: NEG
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 4
68262: NEG
68263: PUSH
68264: LD_INT 4
68266: NEG
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 2
68274: NEG
68275: PUSH
68276: LD_INT 4
68278: NEG
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 4
68286: NEG
68287: PUSH
68288: LD_INT 2
68290: NEG
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: LD_INT 4
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 0
68309: PUSH
68310: LD_INT 5
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 1
68320: PUSH
68321: LD_INT 4
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 1
68331: PUSH
68332: LD_INT 3
68334: NEG
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 0
68342: PUSH
68343: LD_INT 3
68345: NEG
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 1
68353: NEG
68354: PUSH
68355: LD_INT 4
68357: NEG
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 1
68365: NEG
68366: PUSH
68367: LD_INT 5
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 2
68377: PUSH
68378: LD_INT 3
68380: NEG
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 2
68388: NEG
68389: PUSH
68390: LD_INT 5
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 3
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 3
68410: PUSH
68411: LD_INT 1
68413: NEG
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 4
68421: PUSH
68422: LD_INT 0
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: LD_INT 4
68431: PUSH
68432: LD_INT 1
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: LD_INT 3
68441: PUSH
68442: LD_INT 1
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 2
68451: PUSH
68452: LD_INT 0
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 2
68461: PUSH
68462: LD_INT 1
68464: NEG
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 2
68472: PUSH
68473: LD_INT 2
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 4
68483: PUSH
68484: LD_INT 2
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 4
68493: PUSH
68494: LD_INT 4
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 4
68503: PUSH
68504: LD_INT 3
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 5
68513: PUSH
68514: LD_INT 4
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 5
68523: PUSH
68524: LD_INT 5
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 4
68533: PUSH
68534: LD_INT 5
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 3
68543: PUSH
68544: LD_INT 4
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 3
68553: PUSH
68554: LD_INT 3
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 5
68563: PUSH
68564: LD_INT 3
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 3
68573: PUSH
68574: LD_INT 5
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68628: LD_ADDR_VAR 0 33
68632: PUSH
68633: LD_INT 4
68635: NEG
68636: PUSH
68637: LD_INT 4
68639: NEG
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 4
68647: NEG
68648: PUSH
68649: LD_INT 5
68651: NEG
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 3
68659: NEG
68660: PUSH
68661: LD_INT 4
68663: NEG
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 3
68671: NEG
68672: PUSH
68673: LD_INT 3
68675: NEG
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 4
68683: NEG
68684: PUSH
68685: LD_INT 3
68687: NEG
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 5
68695: NEG
68696: PUSH
68697: LD_INT 4
68699: NEG
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 5
68707: NEG
68708: PUSH
68709: LD_INT 5
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 3
68719: NEG
68720: PUSH
68721: LD_INT 5
68723: NEG
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 5
68731: NEG
68732: PUSH
68733: LD_INT 3
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 0
68743: PUSH
68744: LD_INT 3
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 0
68754: PUSH
68755: LD_INT 4
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 1
68765: PUSH
68766: LD_INT 3
68768: NEG
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 1
68776: PUSH
68777: LD_INT 2
68779: NEG
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 0
68787: PUSH
68788: LD_INT 2
68790: NEG
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 1
68798: NEG
68799: PUSH
68800: LD_INT 3
68802: NEG
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 1
68810: NEG
68811: PUSH
68812: LD_INT 4
68814: NEG
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 2
68822: PUSH
68823: LD_INT 2
68825: NEG
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 2
68833: NEG
68834: PUSH
68835: LD_INT 4
68837: NEG
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 4
68845: PUSH
68846: LD_INT 0
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 4
68855: PUSH
68856: LD_INT 1
68858: NEG
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 5
68866: PUSH
68867: LD_INT 0
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 5
68876: PUSH
68877: LD_INT 1
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 4
68886: PUSH
68887: LD_INT 1
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 3
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 3
68906: PUSH
68907: LD_INT 1
68909: NEG
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 3
68917: PUSH
68918: LD_INT 2
68920: NEG
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 5
68928: PUSH
68929: LD_INT 2
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 3
68938: PUSH
68939: LD_INT 3
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 3
68948: PUSH
68949: LD_INT 2
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 4
68958: PUSH
68959: LD_INT 3
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 4
68968: PUSH
68969: LD_INT 4
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 3
68978: PUSH
68979: LD_INT 4
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 2
68988: PUSH
68989: LD_INT 3
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 2
68998: PUSH
68999: LD_INT 2
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 4
69008: PUSH
69009: LD_INT 2
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 2
69018: PUSH
69019: LD_INT 4
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 0
69028: PUSH
69029: LD_INT 4
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 0
69038: PUSH
69039: LD_INT 3
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 1
69048: PUSH
69049: LD_INT 4
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 1
69058: PUSH
69059: LD_INT 5
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 0
69068: PUSH
69069: LD_INT 5
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 1
69078: NEG
69079: PUSH
69080: LD_INT 4
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 1
69089: NEG
69090: PUSH
69091: LD_INT 3
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 2
69100: PUSH
69101: LD_INT 5
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 2
69110: NEG
69111: PUSH
69112: LD_INT 3
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69166: LD_ADDR_VAR 0 34
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: LD_INT 4
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: LD_INT 5
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 1
69195: PUSH
69196: LD_INT 4
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 1
69206: PUSH
69207: LD_INT 3
69209: NEG
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 0
69217: PUSH
69218: LD_INT 3
69220: NEG
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 1
69228: NEG
69229: PUSH
69230: LD_INT 4
69232: NEG
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 1
69240: NEG
69241: PUSH
69242: LD_INT 5
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 2
69252: PUSH
69253: LD_INT 3
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 2
69263: NEG
69264: PUSH
69265: LD_INT 5
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 3
69275: PUSH
69276: LD_INT 0
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 3
69285: PUSH
69286: LD_INT 1
69288: NEG
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 4
69296: PUSH
69297: LD_INT 0
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 4
69306: PUSH
69307: LD_INT 1
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 3
69316: PUSH
69317: LD_INT 1
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 2
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 2
69336: PUSH
69337: LD_INT 1
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 2
69347: PUSH
69348: LD_INT 2
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 4
69358: PUSH
69359: LD_INT 2
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 4
69368: PUSH
69369: LD_INT 4
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 4
69378: PUSH
69379: LD_INT 3
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 5
69388: PUSH
69389: LD_INT 4
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 5
69398: PUSH
69399: LD_INT 5
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 4
69408: PUSH
69409: LD_INT 5
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 3
69418: PUSH
69419: LD_INT 4
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 3
69428: PUSH
69429: LD_INT 3
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 5
69438: PUSH
69439: LD_INT 3
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 3
69448: PUSH
69449: LD_INT 5
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 0
69458: PUSH
69459: LD_INT 3
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 0
69468: PUSH
69469: LD_INT 2
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 1
69478: PUSH
69479: LD_INT 3
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: PUSH
69489: LD_INT 4
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 0
69498: PUSH
69499: LD_INT 4
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 1
69508: NEG
69509: PUSH
69510: LD_INT 3
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 1
69519: NEG
69520: PUSH
69521: LD_INT 2
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 2
69530: PUSH
69531: LD_INT 4
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 2
69540: NEG
69541: PUSH
69542: LD_INT 2
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 4
69551: NEG
69552: PUSH
69553: LD_INT 0
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 4
69562: NEG
69563: PUSH
69564: LD_INT 1
69566: NEG
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 3
69574: NEG
69575: PUSH
69576: LD_INT 0
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 3
69585: NEG
69586: PUSH
69587: LD_INT 1
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 4
69596: NEG
69597: PUSH
69598: LD_INT 1
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 5
69607: NEG
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 5
69618: NEG
69619: PUSH
69620: LD_INT 1
69622: NEG
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 5
69630: NEG
69631: PUSH
69632: LD_INT 2
69634: NEG
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 3
69642: NEG
69643: PUSH
69644: LD_INT 2
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: ST_TO_ADDR
// end ; end ;
69698: GO 69701
69700: POP
// case btype of b_depot , b_warehouse :
69701: LD_VAR 0 1
69705: PUSH
69706: LD_INT 0
69708: DOUBLE
69709: EQUAL
69710: IFTRUE 69720
69712: LD_INT 1
69714: DOUBLE
69715: EQUAL
69716: IFTRUE 69720
69718: GO 69921
69720: POP
// case nation of nation_american :
69721: LD_VAR 0 5
69725: PUSH
69726: LD_INT 1
69728: DOUBLE
69729: EQUAL
69730: IFTRUE 69734
69732: GO 69790
69734: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69735: LD_ADDR_VAR 0 9
69739: PUSH
69740: LD_VAR 0 11
69744: PUSH
69745: LD_VAR 0 12
69749: PUSH
69750: LD_VAR 0 13
69754: PUSH
69755: LD_VAR 0 14
69759: PUSH
69760: LD_VAR 0 15
69764: PUSH
69765: LD_VAR 0 16
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: PUSH
69778: LD_VAR 0 4
69782: PUSH
69783: LD_INT 1
69785: PLUS
69786: ARRAY
69787: ST_TO_ADDR
69788: GO 69919
69790: LD_INT 2
69792: DOUBLE
69793: EQUAL
69794: IFTRUE 69798
69796: GO 69854
69798: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69799: LD_ADDR_VAR 0 9
69803: PUSH
69804: LD_VAR 0 17
69808: PUSH
69809: LD_VAR 0 18
69813: PUSH
69814: LD_VAR 0 19
69818: PUSH
69819: LD_VAR 0 20
69823: PUSH
69824: LD_VAR 0 21
69828: PUSH
69829: LD_VAR 0 22
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: PUSH
69842: LD_VAR 0 4
69846: PUSH
69847: LD_INT 1
69849: PLUS
69850: ARRAY
69851: ST_TO_ADDR
69852: GO 69919
69854: LD_INT 3
69856: DOUBLE
69857: EQUAL
69858: IFTRUE 69862
69860: GO 69918
69862: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69863: LD_ADDR_VAR 0 9
69867: PUSH
69868: LD_VAR 0 23
69872: PUSH
69873: LD_VAR 0 24
69877: PUSH
69878: LD_VAR 0 25
69882: PUSH
69883: LD_VAR 0 26
69887: PUSH
69888: LD_VAR 0 27
69892: PUSH
69893: LD_VAR 0 28
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: PUSH
69906: LD_VAR 0 4
69910: PUSH
69911: LD_INT 1
69913: PLUS
69914: ARRAY
69915: ST_TO_ADDR
69916: GO 69919
69918: POP
69919: GO 70474
69921: LD_INT 2
69923: DOUBLE
69924: EQUAL
69925: IFTRUE 69935
69927: LD_INT 3
69929: DOUBLE
69930: EQUAL
69931: IFTRUE 69935
69933: GO 69991
69935: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69936: LD_ADDR_VAR 0 9
69940: PUSH
69941: LD_VAR 0 29
69945: PUSH
69946: LD_VAR 0 30
69950: PUSH
69951: LD_VAR 0 31
69955: PUSH
69956: LD_VAR 0 32
69960: PUSH
69961: LD_VAR 0 33
69965: PUSH
69966: LD_VAR 0 34
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: PUSH
69979: LD_VAR 0 4
69983: PUSH
69984: LD_INT 1
69986: PLUS
69987: ARRAY
69988: ST_TO_ADDR
69989: GO 70474
69991: LD_INT 16
69993: DOUBLE
69994: EQUAL
69995: IFTRUE 70053
69997: LD_INT 17
69999: DOUBLE
70000: EQUAL
70001: IFTRUE 70053
70003: LD_INT 18
70005: DOUBLE
70006: EQUAL
70007: IFTRUE 70053
70009: LD_INT 19
70011: DOUBLE
70012: EQUAL
70013: IFTRUE 70053
70015: LD_INT 22
70017: DOUBLE
70018: EQUAL
70019: IFTRUE 70053
70021: LD_INT 20
70023: DOUBLE
70024: EQUAL
70025: IFTRUE 70053
70027: LD_INT 21
70029: DOUBLE
70030: EQUAL
70031: IFTRUE 70053
70033: LD_INT 23
70035: DOUBLE
70036: EQUAL
70037: IFTRUE 70053
70039: LD_INT 24
70041: DOUBLE
70042: EQUAL
70043: IFTRUE 70053
70045: LD_INT 25
70047: DOUBLE
70048: EQUAL
70049: IFTRUE 70053
70051: GO 70109
70053: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70054: LD_ADDR_VAR 0 9
70058: PUSH
70059: LD_VAR 0 35
70063: PUSH
70064: LD_VAR 0 36
70068: PUSH
70069: LD_VAR 0 37
70073: PUSH
70074: LD_VAR 0 38
70078: PUSH
70079: LD_VAR 0 39
70083: PUSH
70084: LD_VAR 0 40
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: PUSH
70097: LD_VAR 0 4
70101: PUSH
70102: LD_INT 1
70104: PLUS
70105: ARRAY
70106: ST_TO_ADDR
70107: GO 70474
70109: LD_INT 6
70111: DOUBLE
70112: EQUAL
70113: IFTRUE 70165
70115: LD_INT 7
70117: DOUBLE
70118: EQUAL
70119: IFTRUE 70165
70121: LD_INT 8
70123: DOUBLE
70124: EQUAL
70125: IFTRUE 70165
70127: LD_INT 13
70129: DOUBLE
70130: EQUAL
70131: IFTRUE 70165
70133: LD_INT 12
70135: DOUBLE
70136: EQUAL
70137: IFTRUE 70165
70139: LD_INT 15
70141: DOUBLE
70142: EQUAL
70143: IFTRUE 70165
70145: LD_INT 11
70147: DOUBLE
70148: EQUAL
70149: IFTRUE 70165
70151: LD_INT 14
70153: DOUBLE
70154: EQUAL
70155: IFTRUE 70165
70157: LD_INT 10
70159: DOUBLE
70160: EQUAL
70161: IFTRUE 70165
70163: GO 70221
70165: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70166: LD_ADDR_VAR 0 9
70170: PUSH
70171: LD_VAR 0 41
70175: PUSH
70176: LD_VAR 0 42
70180: PUSH
70181: LD_VAR 0 43
70185: PUSH
70186: LD_VAR 0 44
70190: PUSH
70191: LD_VAR 0 45
70195: PUSH
70196: LD_VAR 0 46
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: PUSH
70209: LD_VAR 0 4
70213: PUSH
70214: LD_INT 1
70216: PLUS
70217: ARRAY
70218: ST_TO_ADDR
70219: GO 70474
70221: LD_INT 36
70223: DOUBLE
70224: EQUAL
70225: IFTRUE 70229
70227: GO 70285
70229: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70230: LD_ADDR_VAR 0 9
70234: PUSH
70235: LD_VAR 0 47
70239: PUSH
70240: LD_VAR 0 48
70244: PUSH
70245: LD_VAR 0 49
70249: PUSH
70250: LD_VAR 0 50
70254: PUSH
70255: LD_VAR 0 51
70259: PUSH
70260: LD_VAR 0 52
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: PUSH
70273: LD_VAR 0 4
70277: PUSH
70278: LD_INT 1
70280: PLUS
70281: ARRAY
70282: ST_TO_ADDR
70283: GO 70474
70285: LD_INT 4
70287: DOUBLE
70288: EQUAL
70289: IFTRUE 70311
70291: LD_INT 5
70293: DOUBLE
70294: EQUAL
70295: IFTRUE 70311
70297: LD_INT 34
70299: DOUBLE
70300: EQUAL
70301: IFTRUE 70311
70303: LD_INT 37
70305: DOUBLE
70306: EQUAL
70307: IFTRUE 70311
70309: GO 70367
70311: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70312: LD_ADDR_VAR 0 9
70316: PUSH
70317: LD_VAR 0 53
70321: PUSH
70322: LD_VAR 0 54
70326: PUSH
70327: LD_VAR 0 55
70331: PUSH
70332: LD_VAR 0 56
70336: PUSH
70337: LD_VAR 0 57
70341: PUSH
70342: LD_VAR 0 58
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: PUSH
70355: LD_VAR 0 4
70359: PUSH
70360: LD_INT 1
70362: PLUS
70363: ARRAY
70364: ST_TO_ADDR
70365: GO 70474
70367: LD_INT 31
70369: DOUBLE
70370: EQUAL
70371: IFTRUE 70417
70373: LD_INT 32
70375: DOUBLE
70376: EQUAL
70377: IFTRUE 70417
70379: LD_INT 33
70381: DOUBLE
70382: EQUAL
70383: IFTRUE 70417
70385: LD_INT 27
70387: DOUBLE
70388: EQUAL
70389: IFTRUE 70417
70391: LD_INT 26
70393: DOUBLE
70394: EQUAL
70395: IFTRUE 70417
70397: LD_INT 28
70399: DOUBLE
70400: EQUAL
70401: IFTRUE 70417
70403: LD_INT 29
70405: DOUBLE
70406: EQUAL
70407: IFTRUE 70417
70409: LD_INT 30
70411: DOUBLE
70412: EQUAL
70413: IFTRUE 70417
70415: GO 70473
70417: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70418: LD_ADDR_VAR 0 9
70422: PUSH
70423: LD_VAR 0 59
70427: PUSH
70428: LD_VAR 0 60
70432: PUSH
70433: LD_VAR 0 61
70437: PUSH
70438: LD_VAR 0 62
70442: PUSH
70443: LD_VAR 0 63
70447: PUSH
70448: LD_VAR 0 64
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: PUSH
70461: LD_VAR 0 4
70465: PUSH
70466: LD_INT 1
70468: PLUS
70469: ARRAY
70470: ST_TO_ADDR
70471: GO 70474
70473: POP
// temp_list2 = [ ] ;
70474: LD_ADDR_VAR 0 10
70478: PUSH
70479: EMPTY
70480: ST_TO_ADDR
// for i in temp_list do
70481: LD_ADDR_VAR 0 8
70485: PUSH
70486: LD_VAR 0 9
70490: PUSH
70491: FOR_IN
70492: IFFALSE 70544
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70494: LD_ADDR_VAR 0 10
70498: PUSH
70499: LD_VAR 0 10
70503: PUSH
70504: LD_VAR 0 8
70508: PUSH
70509: LD_INT 1
70511: ARRAY
70512: PUSH
70513: LD_VAR 0 2
70517: PLUS
70518: PUSH
70519: LD_VAR 0 8
70523: PUSH
70524: LD_INT 2
70526: ARRAY
70527: PUSH
70528: LD_VAR 0 3
70532: PLUS
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: EMPTY
70539: LIST
70540: ADD
70541: ST_TO_ADDR
70542: GO 70491
70544: POP
70545: POP
// result = temp_list2 ;
70546: LD_ADDR_VAR 0 7
70550: PUSH
70551: LD_VAR 0 10
70555: ST_TO_ADDR
// end ;
70556: LD_VAR 0 7
70560: RET
// export function EnemyInRange ( unit , dist ) ; begin
70561: LD_INT 0
70563: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70564: LD_ADDR_VAR 0 3
70568: PUSH
70569: LD_VAR 0 1
70573: PPUSH
70574: CALL_OW 255
70578: PPUSH
70579: LD_VAR 0 1
70583: PPUSH
70584: CALL_OW 250
70588: PPUSH
70589: LD_VAR 0 1
70593: PPUSH
70594: CALL_OW 251
70598: PPUSH
70599: LD_VAR 0 2
70603: PPUSH
70604: CALL 43957 0 4
70608: PUSH
70609: LD_INT 4
70611: ARRAY
70612: ST_TO_ADDR
// end ;
70613: LD_VAR 0 3
70617: RET
// export function PlayerSeeMe ( unit ) ; begin
70618: LD_INT 0
70620: PPUSH
// result := See ( your_side , unit ) ;
70621: LD_ADDR_VAR 0 2
70625: PUSH
70626: LD_OWVAR 2
70630: PPUSH
70631: LD_VAR 0 1
70635: PPUSH
70636: CALL_OW 292
70640: ST_TO_ADDR
// end ;
70641: LD_VAR 0 2
70645: RET
// export function ReverseDir ( unit ) ; begin
70646: LD_INT 0
70648: PPUSH
// if not unit then
70649: LD_VAR 0 1
70653: NOT
70654: IFFALSE 70658
// exit ;
70656: GO 70681
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70658: LD_ADDR_VAR 0 2
70662: PUSH
70663: LD_VAR 0 1
70667: PPUSH
70668: CALL_OW 254
70672: PUSH
70673: LD_INT 3
70675: PLUS
70676: PUSH
70677: LD_INT 6
70679: MOD
70680: ST_TO_ADDR
// end ;
70681: LD_VAR 0 2
70685: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70686: LD_INT 0
70688: PPUSH
70689: PPUSH
70690: PPUSH
70691: PPUSH
70692: PPUSH
// if not hexes then
70693: LD_VAR 0 2
70697: NOT
70698: IFFALSE 70702
// exit ;
70700: GO 70850
// dist := 9999 ;
70702: LD_ADDR_VAR 0 5
70706: PUSH
70707: LD_INT 9999
70709: ST_TO_ADDR
// for i = 1 to hexes do
70710: LD_ADDR_VAR 0 4
70714: PUSH
70715: DOUBLE
70716: LD_INT 1
70718: DEC
70719: ST_TO_ADDR
70720: LD_VAR 0 2
70724: PUSH
70725: FOR_TO
70726: IFFALSE 70838
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70728: LD_VAR 0 1
70732: PPUSH
70733: LD_VAR 0 2
70737: PUSH
70738: LD_VAR 0 4
70742: ARRAY
70743: PUSH
70744: LD_INT 1
70746: ARRAY
70747: PPUSH
70748: LD_VAR 0 2
70752: PUSH
70753: LD_VAR 0 4
70757: ARRAY
70758: PUSH
70759: LD_INT 2
70761: ARRAY
70762: PPUSH
70763: CALL_OW 297
70767: PUSH
70768: LD_VAR 0 5
70772: LESS
70773: IFFALSE 70836
// begin hex := hexes [ i ] ;
70775: LD_ADDR_VAR 0 7
70779: PUSH
70780: LD_VAR 0 2
70784: PUSH
70785: LD_VAR 0 4
70789: ARRAY
70790: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70791: LD_ADDR_VAR 0 5
70795: PUSH
70796: LD_VAR 0 1
70800: PPUSH
70801: LD_VAR 0 2
70805: PUSH
70806: LD_VAR 0 4
70810: ARRAY
70811: PUSH
70812: LD_INT 1
70814: ARRAY
70815: PPUSH
70816: LD_VAR 0 2
70820: PUSH
70821: LD_VAR 0 4
70825: ARRAY
70826: PUSH
70827: LD_INT 2
70829: ARRAY
70830: PPUSH
70831: CALL_OW 297
70835: ST_TO_ADDR
// end ; end ;
70836: GO 70725
70838: POP
70839: POP
// result := hex ;
70840: LD_ADDR_VAR 0 3
70844: PUSH
70845: LD_VAR 0 7
70849: ST_TO_ADDR
// end ;
70850: LD_VAR 0 3
70854: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70855: LD_INT 0
70857: PPUSH
70858: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70859: LD_VAR 0 1
70863: NOT
70864: PUSH
70865: LD_VAR 0 1
70869: PUSH
70870: LD_INT 21
70872: PUSH
70873: LD_INT 2
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 23
70882: PUSH
70883: LD_INT 2
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PPUSH
70894: CALL_OW 69
70898: IN
70899: NOT
70900: OR
70901: IFFALSE 70905
// exit ;
70903: GO 70952
// for i = 1 to 3 do
70905: LD_ADDR_VAR 0 3
70909: PUSH
70910: DOUBLE
70911: LD_INT 1
70913: DEC
70914: ST_TO_ADDR
70915: LD_INT 3
70917: PUSH
70918: FOR_TO
70919: IFFALSE 70950
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70921: LD_VAR 0 1
70925: PPUSH
70926: CALL_OW 250
70930: PPUSH
70931: LD_VAR 0 1
70935: PPUSH
70936: CALL_OW 251
70940: PPUSH
70941: LD_INT 1
70943: PPUSH
70944: CALL_OW 453
70948: GO 70918
70950: POP
70951: POP
// end ;
70952: LD_VAR 0 2
70956: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70957: LD_INT 0
70959: PPUSH
70960: PPUSH
70961: PPUSH
70962: PPUSH
70963: PPUSH
70964: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70965: LD_VAR 0 1
70969: NOT
70970: PUSH
70971: LD_VAR 0 2
70975: NOT
70976: OR
70977: PUSH
70978: LD_VAR 0 1
70982: PPUSH
70983: CALL_OW 314
70987: OR
70988: IFFALSE 70992
// exit ;
70990: GO 71433
// x := GetX ( enemy_unit ) ;
70992: LD_ADDR_VAR 0 7
70996: PUSH
70997: LD_VAR 0 2
71001: PPUSH
71002: CALL_OW 250
71006: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71007: LD_ADDR_VAR 0 8
71011: PUSH
71012: LD_VAR 0 2
71016: PPUSH
71017: CALL_OW 251
71021: ST_TO_ADDR
// if not x or not y then
71022: LD_VAR 0 7
71026: NOT
71027: PUSH
71028: LD_VAR 0 8
71032: NOT
71033: OR
71034: IFFALSE 71038
// exit ;
71036: GO 71433
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71038: LD_ADDR_VAR 0 6
71042: PUSH
71043: LD_VAR 0 7
71047: PPUSH
71048: LD_INT 0
71050: PPUSH
71051: LD_INT 4
71053: PPUSH
71054: CALL_OW 272
71058: PUSH
71059: LD_VAR 0 8
71063: PPUSH
71064: LD_INT 0
71066: PPUSH
71067: LD_INT 4
71069: PPUSH
71070: CALL_OW 273
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_VAR 0 7
71083: PPUSH
71084: LD_INT 1
71086: PPUSH
71087: LD_INT 4
71089: PPUSH
71090: CALL_OW 272
71094: PUSH
71095: LD_VAR 0 8
71099: PPUSH
71100: LD_INT 1
71102: PPUSH
71103: LD_INT 4
71105: PPUSH
71106: CALL_OW 273
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_VAR 0 7
71119: PPUSH
71120: LD_INT 2
71122: PPUSH
71123: LD_INT 4
71125: PPUSH
71126: CALL_OW 272
71130: PUSH
71131: LD_VAR 0 8
71135: PPUSH
71136: LD_INT 2
71138: PPUSH
71139: LD_INT 4
71141: PPUSH
71142: CALL_OW 273
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_VAR 0 7
71155: PPUSH
71156: LD_INT 3
71158: PPUSH
71159: LD_INT 4
71161: PPUSH
71162: CALL_OW 272
71166: PUSH
71167: LD_VAR 0 8
71171: PPUSH
71172: LD_INT 3
71174: PPUSH
71175: LD_INT 4
71177: PPUSH
71178: CALL_OW 273
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_VAR 0 7
71191: PPUSH
71192: LD_INT 4
71194: PPUSH
71195: LD_INT 4
71197: PPUSH
71198: CALL_OW 272
71202: PUSH
71203: LD_VAR 0 8
71207: PPUSH
71208: LD_INT 4
71210: PPUSH
71211: LD_INT 4
71213: PPUSH
71214: CALL_OW 273
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_VAR 0 7
71227: PPUSH
71228: LD_INT 5
71230: PPUSH
71231: LD_INT 4
71233: PPUSH
71234: CALL_OW 272
71238: PUSH
71239: LD_VAR 0 8
71243: PPUSH
71244: LD_INT 5
71246: PPUSH
71247: LD_INT 4
71249: PPUSH
71250: CALL_OW 273
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: ST_TO_ADDR
// for i = tmp downto 1 do
71267: LD_ADDR_VAR 0 4
71271: PUSH
71272: DOUBLE
71273: LD_VAR 0 6
71277: INC
71278: ST_TO_ADDR
71279: LD_INT 1
71281: PUSH
71282: FOR_DOWNTO
71283: IFFALSE 71384
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71285: LD_VAR 0 6
71289: PUSH
71290: LD_VAR 0 4
71294: ARRAY
71295: PUSH
71296: LD_INT 1
71298: ARRAY
71299: PPUSH
71300: LD_VAR 0 6
71304: PUSH
71305: LD_VAR 0 4
71309: ARRAY
71310: PUSH
71311: LD_INT 2
71313: ARRAY
71314: PPUSH
71315: CALL_OW 488
71319: NOT
71320: PUSH
71321: LD_VAR 0 6
71325: PUSH
71326: LD_VAR 0 4
71330: ARRAY
71331: PUSH
71332: LD_INT 1
71334: ARRAY
71335: PPUSH
71336: LD_VAR 0 6
71340: PUSH
71341: LD_VAR 0 4
71345: ARRAY
71346: PUSH
71347: LD_INT 2
71349: ARRAY
71350: PPUSH
71351: CALL_OW 428
71355: PUSH
71356: LD_INT 0
71358: NONEQUAL
71359: OR
71360: IFFALSE 71382
// tmp := Delete ( tmp , i ) ;
71362: LD_ADDR_VAR 0 6
71366: PUSH
71367: LD_VAR 0 6
71371: PPUSH
71372: LD_VAR 0 4
71376: PPUSH
71377: CALL_OW 3
71381: ST_TO_ADDR
71382: GO 71282
71384: POP
71385: POP
// j := GetClosestHex ( unit , tmp ) ;
71386: LD_ADDR_VAR 0 5
71390: PUSH
71391: LD_VAR 0 1
71395: PPUSH
71396: LD_VAR 0 6
71400: PPUSH
71401: CALL 70686 0 2
71405: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71406: LD_VAR 0 1
71410: PPUSH
71411: LD_VAR 0 5
71415: PUSH
71416: LD_INT 1
71418: ARRAY
71419: PPUSH
71420: LD_VAR 0 5
71424: PUSH
71425: LD_INT 2
71427: ARRAY
71428: PPUSH
71429: CALL_OW 111
// end ;
71433: LD_VAR 0 3
71437: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71438: LD_INT 0
71440: PPUSH
71441: PPUSH
71442: PPUSH
// uc_side = 0 ;
71443: LD_ADDR_OWVAR 20
71447: PUSH
71448: LD_INT 0
71450: ST_TO_ADDR
// uc_nation = 0 ;
71451: LD_ADDR_OWVAR 21
71455: PUSH
71456: LD_INT 0
71458: ST_TO_ADDR
// InitHc_All ( ) ;
71459: CALL_OW 584
// InitVc ;
71463: CALL_OW 20
// if mastodonts then
71467: LD_VAR 0 6
71471: IFFALSE 71538
// for i = 1 to mastodonts do
71473: LD_ADDR_VAR 0 11
71477: PUSH
71478: DOUBLE
71479: LD_INT 1
71481: DEC
71482: ST_TO_ADDR
71483: LD_VAR 0 6
71487: PUSH
71488: FOR_TO
71489: IFFALSE 71536
// begin vc_chassis := 31 ;
71491: LD_ADDR_OWVAR 37
71495: PUSH
71496: LD_INT 31
71498: ST_TO_ADDR
// vc_control := control_rider ;
71499: LD_ADDR_OWVAR 38
71503: PUSH
71504: LD_INT 4
71506: ST_TO_ADDR
// animal := CreateVehicle ;
71507: LD_ADDR_VAR 0 12
71511: PUSH
71512: CALL_OW 45
71516: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71517: LD_VAR 0 12
71521: PPUSH
71522: LD_VAR 0 8
71526: PPUSH
71527: LD_INT 0
71529: PPUSH
71530: CALL 73726 0 3
// end ;
71534: GO 71488
71536: POP
71537: POP
// if horses then
71538: LD_VAR 0 5
71542: IFFALSE 71609
// for i = 1 to horses do
71544: LD_ADDR_VAR 0 11
71548: PUSH
71549: DOUBLE
71550: LD_INT 1
71552: DEC
71553: ST_TO_ADDR
71554: LD_VAR 0 5
71558: PUSH
71559: FOR_TO
71560: IFFALSE 71607
// begin hc_class := 21 ;
71562: LD_ADDR_OWVAR 28
71566: PUSH
71567: LD_INT 21
71569: ST_TO_ADDR
// hc_gallery :=  ;
71570: LD_ADDR_OWVAR 33
71574: PUSH
71575: LD_STRING 
71577: ST_TO_ADDR
// animal := CreateHuman ;
71578: LD_ADDR_VAR 0 12
71582: PUSH
71583: CALL_OW 44
71587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71588: LD_VAR 0 12
71592: PPUSH
71593: LD_VAR 0 8
71597: PPUSH
71598: LD_INT 0
71600: PPUSH
71601: CALL 73726 0 3
// end ;
71605: GO 71559
71607: POP
71608: POP
// if birds then
71609: LD_VAR 0 1
71613: IFFALSE 71680
// for i = 1 to birds do
71615: LD_ADDR_VAR 0 11
71619: PUSH
71620: DOUBLE
71621: LD_INT 1
71623: DEC
71624: ST_TO_ADDR
71625: LD_VAR 0 1
71629: PUSH
71630: FOR_TO
71631: IFFALSE 71678
// begin hc_class = 18 ;
71633: LD_ADDR_OWVAR 28
71637: PUSH
71638: LD_INT 18
71640: ST_TO_ADDR
// hc_gallery =  ;
71641: LD_ADDR_OWVAR 33
71645: PUSH
71646: LD_STRING 
71648: ST_TO_ADDR
// animal := CreateHuman ;
71649: LD_ADDR_VAR 0 12
71653: PUSH
71654: CALL_OW 44
71658: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71659: LD_VAR 0 12
71663: PPUSH
71664: LD_VAR 0 8
71668: PPUSH
71669: LD_INT 0
71671: PPUSH
71672: CALL 73726 0 3
// end ;
71676: GO 71630
71678: POP
71679: POP
// if tigers then
71680: LD_VAR 0 2
71684: IFFALSE 71768
// for i = 1 to tigers do
71686: LD_ADDR_VAR 0 11
71690: PUSH
71691: DOUBLE
71692: LD_INT 1
71694: DEC
71695: ST_TO_ADDR
71696: LD_VAR 0 2
71700: PUSH
71701: FOR_TO
71702: IFFALSE 71766
// begin hc_class = class_tiger ;
71704: LD_ADDR_OWVAR 28
71708: PUSH
71709: LD_INT 14
71711: ST_TO_ADDR
// hc_gallery =  ;
71712: LD_ADDR_OWVAR 33
71716: PUSH
71717: LD_STRING 
71719: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71720: LD_ADDR_OWVAR 35
71724: PUSH
71725: LD_INT 7
71727: NEG
71728: PPUSH
71729: LD_INT 7
71731: PPUSH
71732: CALL_OW 12
71736: ST_TO_ADDR
// animal := CreateHuman ;
71737: LD_ADDR_VAR 0 12
71741: PUSH
71742: CALL_OW 44
71746: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71747: LD_VAR 0 12
71751: PPUSH
71752: LD_VAR 0 8
71756: PPUSH
71757: LD_INT 0
71759: PPUSH
71760: CALL 73726 0 3
// end ;
71764: GO 71701
71766: POP
71767: POP
// if apemans then
71768: LD_VAR 0 3
71772: IFFALSE 71895
// for i = 1 to apemans do
71774: LD_ADDR_VAR 0 11
71778: PUSH
71779: DOUBLE
71780: LD_INT 1
71782: DEC
71783: ST_TO_ADDR
71784: LD_VAR 0 3
71788: PUSH
71789: FOR_TO
71790: IFFALSE 71893
// begin hc_class = class_apeman ;
71792: LD_ADDR_OWVAR 28
71796: PUSH
71797: LD_INT 12
71799: ST_TO_ADDR
// hc_gallery =  ;
71800: LD_ADDR_OWVAR 33
71804: PUSH
71805: LD_STRING 
71807: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71808: LD_ADDR_OWVAR 35
71812: PUSH
71813: LD_INT 2
71815: NEG
71816: PPUSH
71817: LD_INT 2
71819: PPUSH
71820: CALL_OW 12
71824: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71825: LD_ADDR_OWVAR 31
71829: PUSH
71830: LD_INT 1
71832: PPUSH
71833: LD_INT 3
71835: PPUSH
71836: CALL_OW 12
71840: PUSH
71841: LD_INT 1
71843: PPUSH
71844: LD_INT 3
71846: PPUSH
71847: CALL_OW 12
71851: PUSH
71852: LD_INT 0
71854: PUSH
71855: LD_INT 0
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: ST_TO_ADDR
// animal := CreateHuman ;
71864: LD_ADDR_VAR 0 12
71868: PUSH
71869: CALL_OW 44
71873: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71874: LD_VAR 0 12
71878: PPUSH
71879: LD_VAR 0 8
71883: PPUSH
71884: LD_INT 0
71886: PPUSH
71887: CALL 73726 0 3
// end ;
71891: GO 71789
71893: POP
71894: POP
// if enchidnas then
71895: LD_VAR 0 4
71899: IFFALSE 71966
// for i = 1 to enchidnas do
71901: LD_ADDR_VAR 0 11
71905: PUSH
71906: DOUBLE
71907: LD_INT 1
71909: DEC
71910: ST_TO_ADDR
71911: LD_VAR 0 4
71915: PUSH
71916: FOR_TO
71917: IFFALSE 71964
// begin hc_class = 13 ;
71919: LD_ADDR_OWVAR 28
71923: PUSH
71924: LD_INT 13
71926: ST_TO_ADDR
// hc_gallery =  ;
71927: LD_ADDR_OWVAR 33
71931: PUSH
71932: LD_STRING 
71934: ST_TO_ADDR
// animal := CreateHuman ;
71935: LD_ADDR_VAR 0 12
71939: PUSH
71940: CALL_OW 44
71944: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71945: LD_VAR 0 12
71949: PPUSH
71950: LD_VAR 0 8
71954: PPUSH
71955: LD_INT 0
71957: PPUSH
71958: CALL 73726 0 3
// end ;
71962: GO 71916
71964: POP
71965: POP
// if fishes then
71966: LD_VAR 0 7
71970: IFFALSE 72037
// for i = 1 to fishes do
71972: LD_ADDR_VAR 0 11
71976: PUSH
71977: DOUBLE
71978: LD_INT 1
71980: DEC
71981: ST_TO_ADDR
71982: LD_VAR 0 7
71986: PUSH
71987: FOR_TO
71988: IFFALSE 72035
// begin hc_class = 20 ;
71990: LD_ADDR_OWVAR 28
71994: PUSH
71995: LD_INT 20
71997: ST_TO_ADDR
// hc_gallery =  ;
71998: LD_ADDR_OWVAR 33
72002: PUSH
72003: LD_STRING 
72005: ST_TO_ADDR
// animal := CreateHuman ;
72006: LD_ADDR_VAR 0 12
72010: PUSH
72011: CALL_OW 44
72015: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72016: LD_VAR 0 12
72020: PPUSH
72021: LD_VAR 0 9
72025: PPUSH
72026: LD_INT 0
72028: PPUSH
72029: CALL 73726 0 3
// end ;
72033: GO 71987
72035: POP
72036: POP
// end ;
72037: LD_VAR 0 10
72041: RET
// export function WantHeal ( sci , unit ) ; begin
72042: LD_INT 0
72044: PPUSH
// if GetTaskList ( sci ) > 0 then
72045: LD_VAR 0 1
72049: PPUSH
72050: CALL_OW 437
72054: PUSH
72055: LD_INT 0
72057: GREATER
72058: IFFALSE 72128
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72060: LD_VAR 0 1
72064: PPUSH
72065: CALL_OW 437
72069: PUSH
72070: LD_INT 1
72072: ARRAY
72073: PUSH
72074: LD_INT 1
72076: ARRAY
72077: PUSH
72078: LD_STRING l
72080: EQUAL
72081: PUSH
72082: LD_VAR 0 1
72086: PPUSH
72087: CALL_OW 437
72091: PUSH
72092: LD_INT 1
72094: ARRAY
72095: PUSH
72096: LD_INT 4
72098: ARRAY
72099: PUSH
72100: LD_VAR 0 2
72104: EQUAL
72105: AND
72106: IFFALSE 72118
// result := true else
72108: LD_ADDR_VAR 0 3
72112: PUSH
72113: LD_INT 1
72115: ST_TO_ADDR
72116: GO 72126
// result := false ;
72118: LD_ADDR_VAR 0 3
72122: PUSH
72123: LD_INT 0
72125: ST_TO_ADDR
// end else
72126: GO 72136
// result := false ;
72128: LD_ADDR_VAR 0 3
72132: PUSH
72133: LD_INT 0
72135: ST_TO_ADDR
// end ;
72136: LD_VAR 0 3
72140: RET
// export function HealTarget ( sci ) ; begin
72141: LD_INT 0
72143: PPUSH
// if not sci then
72144: LD_VAR 0 1
72148: NOT
72149: IFFALSE 72153
// exit ;
72151: GO 72218
// result := 0 ;
72153: LD_ADDR_VAR 0 2
72157: PUSH
72158: LD_INT 0
72160: ST_TO_ADDR
// if GetTaskList ( sci ) then
72161: LD_VAR 0 1
72165: PPUSH
72166: CALL_OW 437
72170: IFFALSE 72218
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72172: LD_VAR 0 1
72176: PPUSH
72177: CALL_OW 437
72181: PUSH
72182: LD_INT 1
72184: ARRAY
72185: PUSH
72186: LD_INT 1
72188: ARRAY
72189: PUSH
72190: LD_STRING l
72192: EQUAL
72193: IFFALSE 72218
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72195: LD_ADDR_VAR 0 2
72199: PUSH
72200: LD_VAR 0 1
72204: PPUSH
72205: CALL_OW 437
72209: PUSH
72210: LD_INT 1
72212: ARRAY
72213: PUSH
72214: LD_INT 4
72216: ARRAY
72217: ST_TO_ADDR
// end ;
72218: LD_VAR 0 2
72222: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72223: LD_INT 0
72225: PPUSH
72226: PPUSH
72227: PPUSH
72228: PPUSH
// if not base_units then
72229: LD_VAR 0 1
72233: NOT
72234: IFFALSE 72238
// exit ;
72236: GO 72325
// result := false ;
72238: LD_ADDR_VAR 0 2
72242: PUSH
72243: LD_INT 0
72245: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72246: LD_ADDR_VAR 0 5
72250: PUSH
72251: LD_VAR 0 1
72255: PPUSH
72256: LD_INT 21
72258: PUSH
72259: LD_INT 3
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PPUSH
72266: CALL_OW 72
72270: ST_TO_ADDR
// if not tmp then
72271: LD_VAR 0 5
72275: NOT
72276: IFFALSE 72280
// exit ;
72278: GO 72325
// for i in tmp do
72280: LD_ADDR_VAR 0 3
72284: PUSH
72285: LD_VAR 0 5
72289: PUSH
72290: FOR_IN
72291: IFFALSE 72323
// begin result := EnemyInRange ( i , 22 ) ;
72293: LD_ADDR_VAR 0 2
72297: PUSH
72298: LD_VAR 0 3
72302: PPUSH
72303: LD_INT 22
72305: PPUSH
72306: CALL 70561 0 2
72310: ST_TO_ADDR
// if result then
72311: LD_VAR 0 2
72315: IFFALSE 72321
// exit ;
72317: POP
72318: POP
72319: GO 72325
// end ;
72321: GO 72290
72323: POP
72324: POP
// end ;
72325: LD_VAR 0 2
72329: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
72330: LD_INT 0
72332: PPUSH
72333: PPUSH
// if not units then
72334: LD_VAR 0 1
72338: NOT
72339: IFFALSE 72343
// exit ;
72341: GO 72413
// result := [ ] ;
72343: LD_ADDR_VAR 0 3
72347: PUSH
72348: EMPTY
72349: ST_TO_ADDR
// for i in units do
72350: LD_ADDR_VAR 0 4
72354: PUSH
72355: LD_VAR 0 1
72359: PUSH
72360: FOR_IN
72361: IFFALSE 72411
// if GetTag ( i ) = tag then
72363: LD_VAR 0 4
72367: PPUSH
72368: CALL_OW 110
72372: PUSH
72373: LD_VAR 0 2
72377: EQUAL
72378: IFFALSE 72409
// result := Replace ( result , result + 1 , i ) ;
72380: LD_ADDR_VAR 0 3
72384: PUSH
72385: LD_VAR 0 3
72389: PPUSH
72390: LD_VAR 0 3
72394: PUSH
72395: LD_INT 1
72397: PLUS
72398: PPUSH
72399: LD_VAR 0 4
72403: PPUSH
72404: CALL_OW 1
72408: ST_TO_ADDR
72409: GO 72360
72411: POP
72412: POP
// end ;
72413: LD_VAR 0 3
72417: RET
// export function IsDriver ( un ) ; begin
72418: LD_INT 0
72420: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72421: LD_ADDR_VAR 0 2
72425: PUSH
72426: LD_VAR 0 1
72430: PUSH
72431: LD_INT 55
72433: PUSH
72434: EMPTY
72435: LIST
72436: PPUSH
72437: CALL_OW 69
72441: IN
72442: ST_TO_ADDR
// end ;
72443: LD_VAR 0 2
72447: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72448: LD_INT 0
72450: PPUSH
72451: PPUSH
// list := [ ] ;
72452: LD_ADDR_VAR 0 5
72456: PUSH
72457: EMPTY
72458: ST_TO_ADDR
// case d of 0 :
72459: LD_VAR 0 3
72463: PUSH
72464: LD_INT 0
72466: DOUBLE
72467: EQUAL
72468: IFTRUE 72472
72470: GO 72605
72472: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72473: LD_ADDR_VAR 0 5
72477: PUSH
72478: LD_VAR 0 1
72482: PUSH
72483: LD_INT 4
72485: MINUS
72486: PUSH
72487: LD_VAR 0 2
72491: PUSH
72492: LD_INT 4
72494: MINUS
72495: PUSH
72496: LD_INT 2
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: LIST
72503: PUSH
72504: LD_VAR 0 1
72508: PUSH
72509: LD_INT 3
72511: MINUS
72512: PUSH
72513: LD_VAR 0 2
72517: PUSH
72518: LD_INT 1
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: LIST
72525: PUSH
72526: LD_VAR 0 1
72530: PUSH
72531: LD_INT 4
72533: PLUS
72534: PUSH
72535: LD_VAR 0 2
72539: PUSH
72540: LD_INT 4
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: LIST
72547: PUSH
72548: LD_VAR 0 1
72552: PUSH
72553: LD_INT 3
72555: PLUS
72556: PUSH
72557: LD_VAR 0 2
72561: PUSH
72562: LD_INT 3
72564: PLUS
72565: PUSH
72566: LD_INT 5
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: LIST
72573: PUSH
72574: LD_VAR 0 1
72578: PUSH
72579: LD_VAR 0 2
72583: PUSH
72584: LD_INT 4
72586: PLUS
72587: PUSH
72588: LD_INT 0
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: LIST
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: ST_TO_ADDR
// end ; 1 :
72603: GO 73303
72605: LD_INT 1
72607: DOUBLE
72608: EQUAL
72609: IFTRUE 72613
72611: GO 72746
72613: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72614: LD_ADDR_VAR 0 5
72618: PUSH
72619: LD_VAR 0 1
72623: PUSH
72624: LD_VAR 0 2
72628: PUSH
72629: LD_INT 4
72631: MINUS
72632: PUSH
72633: LD_INT 3
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: LIST
72640: PUSH
72641: LD_VAR 0 1
72645: PUSH
72646: LD_INT 3
72648: MINUS
72649: PUSH
72650: LD_VAR 0 2
72654: PUSH
72655: LD_INT 3
72657: MINUS
72658: PUSH
72659: LD_INT 2
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: LIST
72666: PUSH
72667: LD_VAR 0 1
72671: PUSH
72672: LD_INT 4
72674: MINUS
72675: PUSH
72676: LD_VAR 0 2
72680: PUSH
72681: LD_INT 1
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: LIST
72688: PUSH
72689: LD_VAR 0 1
72693: PUSH
72694: LD_VAR 0 2
72698: PUSH
72699: LD_INT 3
72701: PLUS
72702: PUSH
72703: LD_INT 0
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: LIST
72710: PUSH
72711: LD_VAR 0 1
72715: PUSH
72716: LD_INT 4
72718: PLUS
72719: PUSH
72720: LD_VAR 0 2
72724: PUSH
72725: LD_INT 4
72727: PLUS
72728: PUSH
72729: LD_INT 5
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: LIST
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: ST_TO_ADDR
// end ; 2 :
72744: GO 73303
72746: LD_INT 2
72748: DOUBLE
72749: EQUAL
72750: IFTRUE 72754
72752: GO 72883
72754: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72755: LD_ADDR_VAR 0 5
72759: PUSH
72760: LD_VAR 0 1
72764: PUSH
72765: LD_VAR 0 2
72769: PUSH
72770: LD_INT 3
72772: MINUS
72773: PUSH
72774: LD_INT 3
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: LIST
72781: PUSH
72782: LD_VAR 0 1
72786: PUSH
72787: LD_INT 4
72789: PLUS
72790: PUSH
72791: LD_VAR 0 2
72795: PUSH
72796: LD_INT 4
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: LIST
72803: PUSH
72804: LD_VAR 0 1
72808: PUSH
72809: LD_VAR 0 2
72813: PUSH
72814: LD_INT 4
72816: PLUS
72817: PUSH
72818: LD_INT 0
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: LIST
72825: PUSH
72826: LD_VAR 0 1
72830: PUSH
72831: LD_INT 3
72833: MINUS
72834: PUSH
72835: LD_VAR 0 2
72839: PUSH
72840: LD_INT 1
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: LIST
72847: PUSH
72848: LD_VAR 0 1
72852: PUSH
72853: LD_INT 4
72855: MINUS
72856: PUSH
72857: LD_VAR 0 2
72861: PUSH
72862: LD_INT 4
72864: MINUS
72865: PUSH
72866: LD_INT 2
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: LIST
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: ST_TO_ADDR
// end ; 3 :
72881: GO 73303
72883: LD_INT 3
72885: DOUBLE
72886: EQUAL
72887: IFTRUE 72891
72889: GO 73024
72891: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72892: LD_ADDR_VAR 0 5
72896: PUSH
72897: LD_VAR 0 1
72901: PUSH
72902: LD_INT 3
72904: PLUS
72905: PUSH
72906: LD_VAR 0 2
72910: PUSH
72911: LD_INT 4
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: LIST
72918: PUSH
72919: LD_VAR 0 1
72923: PUSH
72924: LD_INT 4
72926: PLUS
72927: PUSH
72928: LD_VAR 0 2
72932: PUSH
72933: LD_INT 4
72935: PLUS
72936: PUSH
72937: LD_INT 5
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: LIST
72944: PUSH
72945: LD_VAR 0 1
72949: PUSH
72950: LD_INT 4
72952: MINUS
72953: PUSH
72954: LD_VAR 0 2
72958: PUSH
72959: LD_INT 1
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: LIST
72966: PUSH
72967: LD_VAR 0 1
72971: PUSH
72972: LD_VAR 0 2
72976: PUSH
72977: LD_INT 4
72979: MINUS
72980: PUSH
72981: LD_INT 3
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: LIST
72988: PUSH
72989: LD_VAR 0 1
72993: PUSH
72994: LD_INT 3
72996: MINUS
72997: PUSH
72998: LD_VAR 0 2
73002: PUSH
73003: LD_INT 3
73005: MINUS
73006: PUSH
73007: LD_INT 2
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: LIST
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: ST_TO_ADDR
// end ; 4 :
73022: GO 73303
73024: LD_INT 4
73026: DOUBLE
73027: EQUAL
73028: IFTRUE 73032
73030: GO 73165
73032: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73033: LD_ADDR_VAR 0 5
73037: PUSH
73038: LD_VAR 0 1
73042: PUSH
73043: LD_VAR 0 2
73047: PUSH
73048: LD_INT 4
73050: PLUS
73051: PUSH
73052: LD_INT 0
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: LIST
73059: PUSH
73060: LD_VAR 0 1
73064: PUSH
73065: LD_INT 3
73067: PLUS
73068: PUSH
73069: LD_VAR 0 2
73073: PUSH
73074: LD_INT 3
73076: PLUS
73077: PUSH
73078: LD_INT 5
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: LIST
73085: PUSH
73086: LD_VAR 0 1
73090: PUSH
73091: LD_INT 4
73093: PLUS
73094: PUSH
73095: LD_VAR 0 2
73099: PUSH
73100: LD_INT 4
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: LIST
73107: PUSH
73108: LD_VAR 0 1
73112: PUSH
73113: LD_VAR 0 2
73117: PUSH
73118: LD_INT 3
73120: MINUS
73121: PUSH
73122: LD_INT 3
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: LIST
73129: PUSH
73130: LD_VAR 0 1
73134: PUSH
73135: LD_INT 4
73137: MINUS
73138: PUSH
73139: LD_VAR 0 2
73143: PUSH
73144: LD_INT 4
73146: MINUS
73147: PUSH
73148: LD_INT 2
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: LIST
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: ST_TO_ADDR
// end ; 5 :
73163: GO 73303
73165: LD_INT 5
73167: DOUBLE
73168: EQUAL
73169: IFTRUE 73173
73171: GO 73302
73173: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73174: LD_ADDR_VAR 0 5
73178: PUSH
73179: LD_VAR 0 1
73183: PUSH
73184: LD_INT 4
73186: MINUS
73187: PUSH
73188: LD_VAR 0 2
73192: PUSH
73193: LD_INT 1
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: LIST
73200: PUSH
73201: LD_VAR 0 1
73205: PUSH
73206: LD_VAR 0 2
73210: PUSH
73211: LD_INT 4
73213: MINUS
73214: PUSH
73215: LD_INT 3
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: LIST
73222: PUSH
73223: LD_VAR 0 1
73227: PUSH
73228: LD_INT 4
73230: PLUS
73231: PUSH
73232: LD_VAR 0 2
73236: PUSH
73237: LD_INT 4
73239: PLUS
73240: PUSH
73241: LD_INT 5
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: LIST
73248: PUSH
73249: LD_VAR 0 1
73253: PUSH
73254: LD_INT 3
73256: PLUS
73257: PUSH
73258: LD_VAR 0 2
73262: PUSH
73263: LD_INT 4
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: LIST
73270: PUSH
73271: LD_VAR 0 1
73275: PUSH
73276: LD_VAR 0 2
73280: PUSH
73281: LD_INT 3
73283: PLUS
73284: PUSH
73285: LD_INT 0
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: LIST
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: ST_TO_ADDR
// end ; end ;
73300: GO 73303
73302: POP
// result := list ;
73303: LD_ADDR_VAR 0 4
73307: PUSH
73308: LD_VAR 0 5
73312: ST_TO_ADDR
// end ;
73313: LD_VAR 0 4
73317: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73318: LD_INT 0
73320: PPUSH
73321: PPUSH
73322: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73323: LD_VAR 0 1
73327: NOT
73328: PUSH
73329: LD_VAR 0 2
73333: PUSH
73334: LD_INT 1
73336: PUSH
73337: LD_INT 2
73339: PUSH
73340: LD_INT 3
73342: PUSH
73343: LD_INT 4
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: IN
73352: NOT
73353: OR
73354: IFFALSE 73358
// exit ;
73356: GO 73450
// tmp := [ ] ;
73358: LD_ADDR_VAR 0 5
73362: PUSH
73363: EMPTY
73364: ST_TO_ADDR
// for i in units do
73365: LD_ADDR_VAR 0 4
73369: PUSH
73370: LD_VAR 0 1
73374: PUSH
73375: FOR_IN
73376: IFFALSE 73419
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73378: LD_ADDR_VAR 0 5
73382: PUSH
73383: LD_VAR 0 5
73387: PPUSH
73388: LD_VAR 0 5
73392: PUSH
73393: LD_INT 1
73395: PLUS
73396: PPUSH
73397: LD_VAR 0 4
73401: PPUSH
73402: LD_VAR 0 2
73406: PPUSH
73407: CALL_OW 259
73411: PPUSH
73412: CALL_OW 2
73416: ST_TO_ADDR
73417: GO 73375
73419: POP
73420: POP
// if not tmp then
73421: LD_VAR 0 5
73425: NOT
73426: IFFALSE 73430
// exit ;
73428: GO 73450
// result := SortListByListDesc ( units , tmp ) ;
73430: LD_ADDR_VAR 0 3
73434: PUSH
73435: LD_VAR 0 1
73439: PPUSH
73440: LD_VAR 0 5
73444: PPUSH
73445: CALL_OW 77
73449: ST_TO_ADDR
// end ;
73450: LD_VAR 0 3
73454: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73455: LD_INT 0
73457: PPUSH
73458: PPUSH
73459: PPUSH
// result := false ;
73460: LD_ADDR_VAR 0 3
73464: PUSH
73465: LD_INT 0
73467: ST_TO_ADDR
// x := GetX ( building ) ;
73468: LD_ADDR_VAR 0 4
73472: PUSH
73473: LD_VAR 0 2
73477: PPUSH
73478: CALL_OW 250
73482: ST_TO_ADDR
// y := GetY ( building ) ;
73483: LD_ADDR_VAR 0 5
73487: PUSH
73488: LD_VAR 0 2
73492: PPUSH
73493: CALL_OW 251
73497: ST_TO_ADDR
// if not building or not x or not y then
73498: LD_VAR 0 2
73502: NOT
73503: PUSH
73504: LD_VAR 0 4
73508: NOT
73509: OR
73510: PUSH
73511: LD_VAR 0 5
73515: NOT
73516: OR
73517: IFFALSE 73521
// exit ;
73519: GO 73613
// if GetTaskList ( unit ) then
73521: LD_VAR 0 1
73525: PPUSH
73526: CALL_OW 437
73530: IFFALSE 73613
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73532: LD_STRING e
73534: PUSH
73535: LD_VAR 0 1
73539: PPUSH
73540: CALL_OW 437
73544: PUSH
73545: LD_INT 1
73547: ARRAY
73548: PUSH
73549: LD_INT 1
73551: ARRAY
73552: EQUAL
73553: PUSH
73554: LD_VAR 0 4
73558: PUSH
73559: LD_VAR 0 1
73563: PPUSH
73564: CALL_OW 437
73568: PUSH
73569: LD_INT 1
73571: ARRAY
73572: PUSH
73573: LD_INT 2
73575: ARRAY
73576: EQUAL
73577: AND
73578: PUSH
73579: LD_VAR 0 5
73583: PUSH
73584: LD_VAR 0 1
73588: PPUSH
73589: CALL_OW 437
73593: PUSH
73594: LD_INT 1
73596: ARRAY
73597: PUSH
73598: LD_INT 3
73600: ARRAY
73601: EQUAL
73602: AND
73603: IFFALSE 73613
// result := true end ;
73605: LD_ADDR_VAR 0 3
73609: PUSH
73610: LD_INT 1
73612: ST_TO_ADDR
// end ;
73613: LD_VAR 0 3
73617: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73618: LD_INT 0
73620: PPUSH
// result := false ;
73621: LD_ADDR_VAR 0 4
73625: PUSH
73626: LD_INT 0
73628: ST_TO_ADDR
// if GetTaskList ( unit ) then
73629: LD_VAR 0 1
73633: PPUSH
73634: CALL_OW 437
73638: IFFALSE 73721
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73640: LD_STRING M
73642: PUSH
73643: LD_VAR 0 1
73647: PPUSH
73648: CALL_OW 437
73652: PUSH
73653: LD_INT 1
73655: ARRAY
73656: PUSH
73657: LD_INT 1
73659: ARRAY
73660: EQUAL
73661: PUSH
73662: LD_VAR 0 2
73666: PUSH
73667: LD_VAR 0 1
73671: PPUSH
73672: CALL_OW 437
73676: PUSH
73677: LD_INT 1
73679: ARRAY
73680: PUSH
73681: LD_INT 2
73683: ARRAY
73684: EQUAL
73685: AND
73686: PUSH
73687: LD_VAR 0 3
73691: PUSH
73692: LD_VAR 0 1
73696: PPUSH
73697: CALL_OW 437
73701: PUSH
73702: LD_INT 1
73704: ARRAY
73705: PUSH
73706: LD_INT 3
73708: ARRAY
73709: EQUAL
73710: AND
73711: IFFALSE 73721
// result := true ;
73713: LD_ADDR_VAR 0 4
73717: PUSH
73718: LD_INT 1
73720: ST_TO_ADDR
// end ; end ;
73721: LD_VAR 0 4
73725: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73726: LD_INT 0
73728: PPUSH
73729: PPUSH
73730: PPUSH
73731: PPUSH
// if not unit or not area then
73732: LD_VAR 0 1
73736: NOT
73737: PUSH
73738: LD_VAR 0 2
73742: NOT
73743: OR
73744: IFFALSE 73748
// exit ;
73746: GO 73912
// tmp := AreaToList ( area , i ) ;
73748: LD_ADDR_VAR 0 6
73752: PUSH
73753: LD_VAR 0 2
73757: PPUSH
73758: LD_VAR 0 5
73762: PPUSH
73763: CALL_OW 517
73767: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73768: LD_ADDR_VAR 0 5
73772: PUSH
73773: DOUBLE
73774: LD_INT 1
73776: DEC
73777: ST_TO_ADDR
73778: LD_VAR 0 6
73782: PUSH
73783: LD_INT 1
73785: ARRAY
73786: PUSH
73787: FOR_TO
73788: IFFALSE 73910
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73790: LD_ADDR_VAR 0 7
73794: PUSH
73795: LD_VAR 0 6
73799: PUSH
73800: LD_INT 1
73802: ARRAY
73803: PUSH
73804: LD_VAR 0 5
73808: ARRAY
73809: PUSH
73810: LD_VAR 0 6
73814: PUSH
73815: LD_INT 2
73817: ARRAY
73818: PUSH
73819: LD_VAR 0 5
73823: ARRAY
73824: PUSH
73825: EMPTY
73826: LIST
73827: LIST
73828: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73829: LD_VAR 0 7
73833: PUSH
73834: LD_INT 1
73836: ARRAY
73837: PPUSH
73838: LD_VAR 0 7
73842: PUSH
73843: LD_INT 2
73845: ARRAY
73846: PPUSH
73847: CALL_OW 428
73851: PUSH
73852: LD_INT 0
73854: EQUAL
73855: IFFALSE 73908
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73857: LD_VAR 0 1
73861: PPUSH
73862: LD_VAR 0 7
73866: PUSH
73867: LD_INT 1
73869: ARRAY
73870: PPUSH
73871: LD_VAR 0 7
73875: PUSH
73876: LD_INT 2
73878: ARRAY
73879: PPUSH
73880: LD_VAR 0 3
73884: PPUSH
73885: CALL_OW 48
// result := IsPlaced ( unit ) ;
73889: LD_ADDR_VAR 0 4
73893: PUSH
73894: LD_VAR 0 1
73898: PPUSH
73899: CALL_OW 305
73903: ST_TO_ADDR
// exit ;
73904: POP
73905: POP
73906: GO 73912
// end ; end ;
73908: GO 73787
73910: POP
73911: POP
// end ;
73912: LD_VAR 0 4
73916: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73917: LD_INT 0
73919: PPUSH
73920: PPUSH
73921: PPUSH
// if not side or side > 8 then
73922: LD_VAR 0 1
73926: NOT
73927: PUSH
73928: LD_VAR 0 1
73932: PUSH
73933: LD_INT 8
73935: GREATER
73936: OR
73937: IFFALSE 73941
// exit ;
73939: GO 74128
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73941: LD_ADDR_VAR 0 4
73945: PUSH
73946: LD_INT 22
73948: PUSH
73949: LD_VAR 0 1
73953: PUSH
73954: EMPTY
73955: LIST
73956: LIST
73957: PUSH
73958: LD_INT 21
73960: PUSH
73961: LD_INT 3
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PPUSH
73972: CALL_OW 69
73976: ST_TO_ADDR
// if not tmp then
73977: LD_VAR 0 4
73981: NOT
73982: IFFALSE 73986
// exit ;
73984: GO 74128
// enable_addtolog := true ;
73986: LD_ADDR_OWVAR 81
73990: PUSH
73991: LD_INT 1
73993: ST_TO_ADDR
// AddToLog ( [ ) ;
73994: LD_STRING [
73996: PPUSH
73997: CALL_OW 561
// for i in tmp do
74001: LD_ADDR_VAR 0 3
74005: PUSH
74006: LD_VAR 0 4
74010: PUSH
74011: FOR_IN
74012: IFFALSE 74119
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74014: LD_STRING [
74016: PUSH
74017: LD_VAR 0 3
74021: PPUSH
74022: CALL_OW 266
74026: STR
74027: PUSH
74028: LD_STRING , 
74030: STR
74031: PUSH
74032: LD_VAR 0 3
74036: PPUSH
74037: CALL_OW 250
74041: STR
74042: PUSH
74043: LD_STRING , 
74045: STR
74046: PUSH
74047: LD_VAR 0 3
74051: PPUSH
74052: CALL_OW 251
74056: STR
74057: PUSH
74058: LD_STRING , 
74060: STR
74061: PUSH
74062: LD_VAR 0 3
74066: PPUSH
74067: CALL_OW 254
74071: STR
74072: PUSH
74073: LD_STRING , 
74075: STR
74076: PUSH
74077: LD_VAR 0 3
74081: PPUSH
74082: LD_INT 1
74084: PPUSH
74085: CALL_OW 268
74089: STR
74090: PUSH
74091: LD_STRING , 
74093: STR
74094: PUSH
74095: LD_VAR 0 3
74099: PPUSH
74100: LD_INT 2
74102: PPUSH
74103: CALL_OW 268
74107: STR
74108: PUSH
74109: LD_STRING ],
74111: STR
74112: PPUSH
74113: CALL_OW 561
// end ;
74117: GO 74011
74119: POP
74120: POP
// AddToLog ( ]; ) ;
74121: LD_STRING ];
74123: PPUSH
74124: CALL_OW 561
// end ;
74128: LD_VAR 0 2
74132: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74133: LD_INT 0
74135: PPUSH
74136: PPUSH
74137: PPUSH
74138: PPUSH
74139: PPUSH
// if not area or not rate or not max then
74140: LD_VAR 0 1
74144: NOT
74145: PUSH
74146: LD_VAR 0 2
74150: NOT
74151: OR
74152: PUSH
74153: LD_VAR 0 4
74157: NOT
74158: OR
74159: IFFALSE 74163
// exit ;
74161: GO 74355
// while 1 do
74163: LD_INT 1
74165: IFFALSE 74355
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74167: LD_ADDR_VAR 0 9
74171: PUSH
74172: LD_VAR 0 1
74176: PPUSH
74177: LD_INT 1
74179: PPUSH
74180: CALL_OW 287
74184: PUSH
74185: LD_INT 10
74187: MUL
74188: ST_TO_ADDR
// r := rate / 10 ;
74189: LD_ADDR_VAR 0 7
74193: PUSH
74194: LD_VAR 0 2
74198: PUSH
74199: LD_INT 10
74201: DIVREAL
74202: ST_TO_ADDR
// time := 1 1$00 ;
74203: LD_ADDR_VAR 0 8
74207: PUSH
74208: LD_INT 2100
74210: ST_TO_ADDR
// if amount < min then
74211: LD_VAR 0 9
74215: PUSH
74216: LD_VAR 0 3
74220: LESS
74221: IFFALSE 74239
// r := r * 2 else
74223: LD_ADDR_VAR 0 7
74227: PUSH
74228: LD_VAR 0 7
74232: PUSH
74233: LD_INT 2
74235: MUL
74236: ST_TO_ADDR
74237: GO 74265
// if amount > max then
74239: LD_VAR 0 9
74243: PUSH
74244: LD_VAR 0 4
74248: GREATER
74249: IFFALSE 74265
// r := r / 2 ;
74251: LD_ADDR_VAR 0 7
74255: PUSH
74256: LD_VAR 0 7
74260: PUSH
74261: LD_INT 2
74263: DIVREAL
74264: ST_TO_ADDR
// time := time / r ;
74265: LD_ADDR_VAR 0 8
74269: PUSH
74270: LD_VAR 0 8
74274: PUSH
74275: LD_VAR 0 7
74279: DIVREAL
74280: ST_TO_ADDR
// if time < 0 then
74281: LD_VAR 0 8
74285: PUSH
74286: LD_INT 0
74288: LESS
74289: IFFALSE 74306
// time := time * - 1 ;
74291: LD_ADDR_VAR 0 8
74295: PUSH
74296: LD_VAR 0 8
74300: PUSH
74301: LD_INT 1
74303: NEG
74304: MUL
74305: ST_TO_ADDR
// wait ( time ) ;
74306: LD_VAR 0 8
74310: PPUSH
74311: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
74315: LD_INT 35
74317: PPUSH
74318: LD_INT 875
74320: PPUSH
74321: CALL_OW 12
74325: PPUSH
74326: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74330: LD_INT 1
74332: PPUSH
74333: LD_INT 5
74335: PPUSH
74336: CALL_OW 12
74340: PPUSH
74341: LD_VAR 0 1
74345: PPUSH
74346: LD_INT 1
74348: PPUSH
74349: CALL_OW 55
// end ;
74353: GO 74163
// end ;
74355: LD_VAR 0 5
74359: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74360: LD_INT 0
74362: PPUSH
74363: PPUSH
74364: PPUSH
74365: PPUSH
74366: PPUSH
74367: PPUSH
74368: PPUSH
74369: PPUSH
// if not turrets or not factories then
74370: LD_VAR 0 1
74374: NOT
74375: PUSH
74376: LD_VAR 0 2
74380: NOT
74381: OR
74382: IFFALSE 74386
// exit ;
74384: GO 74693
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74386: LD_ADDR_VAR 0 10
74390: PUSH
74391: LD_INT 5
74393: PUSH
74394: LD_INT 6
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: PUSH
74401: LD_INT 2
74403: PUSH
74404: LD_INT 4
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: PUSH
74411: LD_INT 3
74413: PUSH
74414: LD_INT 5
74416: PUSH
74417: EMPTY
74418: LIST
74419: LIST
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: LIST
74425: PUSH
74426: LD_INT 24
74428: PUSH
74429: LD_INT 25
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PUSH
74436: LD_INT 23
74438: PUSH
74439: LD_INT 27
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: PUSH
74450: LD_INT 42
74452: PUSH
74453: LD_INT 43
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: PUSH
74460: LD_INT 44
74462: PUSH
74463: LD_INT 46
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: PUSH
74470: LD_INT 45
74472: PUSH
74473: LD_INT 47
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: LIST
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: LIST
74489: ST_TO_ADDR
// result := [ ] ;
74490: LD_ADDR_VAR 0 3
74494: PUSH
74495: EMPTY
74496: ST_TO_ADDR
// for i in turrets do
74497: LD_ADDR_VAR 0 4
74501: PUSH
74502: LD_VAR 0 1
74506: PUSH
74507: FOR_IN
74508: IFFALSE 74691
// begin nat := GetNation ( i ) ;
74510: LD_ADDR_VAR 0 7
74514: PUSH
74515: LD_VAR 0 4
74519: PPUSH
74520: CALL_OW 248
74524: ST_TO_ADDR
// weapon := 0 ;
74525: LD_ADDR_VAR 0 8
74529: PUSH
74530: LD_INT 0
74532: ST_TO_ADDR
// if not nat then
74533: LD_VAR 0 7
74537: NOT
74538: IFFALSE 74542
// continue ;
74540: GO 74507
// for j in list [ nat ] do
74542: LD_ADDR_VAR 0 5
74546: PUSH
74547: LD_VAR 0 10
74551: PUSH
74552: LD_VAR 0 7
74556: ARRAY
74557: PUSH
74558: FOR_IN
74559: IFFALSE 74600
// if GetBWeapon ( i ) = j [ 1 ] then
74561: LD_VAR 0 4
74565: PPUSH
74566: CALL_OW 269
74570: PUSH
74571: LD_VAR 0 5
74575: PUSH
74576: LD_INT 1
74578: ARRAY
74579: EQUAL
74580: IFFALSE 74598
// begin weapon := j [ 2 ] ;
74582: LD_ADDR_VAR 0 8
74586: PUSH
74587: LD_VAR 0 5
74591: PUSH
74592: LD_INT 2
74594: ARRAY
74595: ST_TO_ADDR
// break ;
74596: GO 74600
// end ;
74598: GO 74558
74600: POP
74601: POP
// if not weapon then
74602: LD_VAR 0 8
74606: NOT
74607: IFFALSE 74611
// continue ;
74609: GO 74507
// for k in factories do
74611: LD_ADDR_VAR 0 6
74615: PUSH
74616: LD_VAR 0 2
74620: PUSH
74621: FOR_IN
74622: IFFALSE 74687
// begin weapons := AvailableWeaponList ( k ) ;
74624: LD_ADDR_VAR 0 9
74628: PUSH
74629: LD_VAR 0 6
74633: PPUSH
74634: CALL_OW 478
74638: ST_TO_ADDR
// if not weapons then
74639: LD_VAR 0 9
74643: NOT
74644: IFFALSE 74648
// continue ;
74646: GO 74621
// if weapon in weapons then
74648: LD_VAR 0 8
74652: PUSH
74653: LD_VAR 0 9
74657: IN
74658: IFFALSE 74685
// begin result := [ i , weapon ] ;
74660: LD_ADDR_VAR 0 3
74664: PUSH
74665: LD_VAR 0 4
74669: PUSH
74670: LD_VAR 0 8
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: ST_TO_ADDR
// exit ;
74679: POP
74680: POP
74681: POP
74682: POP
74683: GO 74693
// end ; end ;
74685: GO 74621
74687: POP
74688: POP
// end ;
74689: GO 74507
74691: POP
74692: POP
// end ;
74693: LD_VAR 0 3
74697: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74698: LD_INT 0
74700: PPUSH
// if not side or side > 8 then
74701: LD_VAR 0 3
74705: NOT
74706: PUSH
74707: LD_VAR 0 3
74711: PUSH
74712: LD_INT 8
74714: GREATER
74715: OR
74716: IFFALSE 74720
// exit ;
74718: GO 74779
// if not range then
74720: LD_VAR 0 4
74724: NOT
74725: IFFALSE 74736
// range := - 12 ;
74727: LD_ADDR_VAR 0 4
74731: PUSH
74732: LD_INT 12
74734: NEG
74735: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74736: LD_VAR 0 1
74740: PPUSH
74741: LD_VAR 0 2
74745: PPUSH
74746: LD_VAR 0 3
74750: PPUSH
74751: LD_VAR 0 4
74755: PPUSH
74756: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74760: LD_VAR 0 1
74764: PPUSH
74765: LD_VAR 0 2
74769: PPUSH
74770: LD_VAR 0 3
74774: PPUSH
74775: CALL_OW 331
// end ;
74779: LD_VAR 0 5
74783: RET
// export function Video ( mode ) ; begin
74784: LD_INT 0
74786: PPUSH
// ingame_video = mode ;
74787: LD_ADDR_OWVAR 52
74791: PUSH
74792: LD_VAR 0 1
74796: ST_TO_ADDR
// interface_hidden = mode ;
74797: LD_ADDR_OWVAR 54
74801: PUSH
74802: LD_VAR 0 1
74806: ST_TO_ADDR
// end ;
74807: LD_VAR 0 2
74811: RET
// export function Join ( array , element ) ; begin
74812: LD_INT 0
74814: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74815: LD_ADDR_VAR 0 3
74819: PUSH
74820: LD_VAR 0 1
74824: PPUSH
74825: LD_VAR 0 1
74829: PUSH
74830: LD_INT 1
74832: PLUS
74833: PPUSH
74834: LD_VAR 0 2
74838: PPUSH
74839: CALL_OW 1
74843: ST_TO_ADDR
// end ;
74844: LD_VAR 0 3
74848: RET
// export function JoinUnion ( array , element ) ; begin
74849: LD_INT 0
74851: PPUSH
// result := array union element ;
74852: LD_ADDR_VAR 0 3
74856: PUSH
74857: LD_VAR 0 1
74861: PUSH
74862: LD_VAR 0 2
74866: UNION
74867: ST_TO_ADDR
// end ;
74868: LD_VAR 0 3
74872: RET
// export function GetBehemoths ( side ) ; begin
74873: LD_INT 0
74875: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74876: LD_ADDR_VAR 0 2
74880: PUSH
74881: LD_INT 22
74883: PUSH
74884: LD_VAR 0 1
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 31
74895: PUSH
74896: LD_INT 25
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: PPUSH
74907: CALL_OW 69
74911: ST_TO_ADDR
// end ;
74912: LD_VAR 0 2
74916: RET
// export function Shuffle ( array ) ; var i , index ; begin
74917: LD_INT 0
74919: PPUSH
74920: PPUSH
74921: PPUSH
// result := [ ] ;
74922: LD_ADDR_VAR 0 2
74926: PUSH
74927: EMPTY
74928: ST_TO_ADDR
// if not array then
74929: LD_VAR 0 1
74933: NOT
74934: IFFALSE 74938
// exit ;
74936: GO 75037
// Randomize ;
74938: CALL_OW 10
// for i = array downto 1 do
74942: LD_ADDR_VAR 0 3
74946: PUSH
74947: DOUBLE
74948: LD_VAR 0 1
74952: INC
74953: ST_TO_ADDR
74954: LD_INT 1
74956: PUSH
74957: FOR_DOWNTO
74958: IFFALSE 75035
// begin index := rand ( 1 , array ) ;
74960: LD_ADDR_VAR 0 4
74964: PUSH
74965: LD_INT 1
74967: PPUSH
74968: LD_VAR 0 1
74972: PPUSH
74973: CALL_OW 12
74977: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74978: LD_ADDR_VAR 0 2
74982: PUSH
74983: LD_VAR 0 2
74987: PPUSH
74988: LD_VAR 0 2
74992: PUSH
74993: LD_INT 1
74995: PLUS
74996: PPUSH
74997: LD_VAR 0 1
75001: PUSH
75002: LD_VAR 0 4
75006: ARRAY
75007: PPUSH
75008: CALL_OW 2
75012: ST_TO_ADDR
// array := Delete ( array , index ) ;
75013: LD_ADDR_VAR 0 1
75017: PUSH
75018: LD_VAR 0 1
75022: PPUSH
75023: LD_VAR 0 4
75027: PPUSH
75028: CALL_OW 3
75032: ST_TO_ADDR
// end ;
75033: GO 74957
75035: POP
75036: POP
// end ;
75037: LD_VAR 0 2
75041: RET
// export function GetBaseMaterials ( base ) ; begin
75042: LD_INT 0
75044: PPUSH
// result := [ 0 , 0 , 0 ] ;
75045: LD_ADDR_VAR 0 2
75049: PUSH
75050: LD_INT 0
75052: PUSH
75053: LD_INT 0
75055: PUSH
75056: LD_INT 0
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: LIST
75063: ST_TO_ADDR
// if not base then
75064: LD_VAR 0 1
75068: NOT
75069: IFFALSE 75073
// exit ;
75071: GO 75122
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75073: LD_ADDR_VAR 0 2
75077: PUSH
75078: LD_VAR 0 1
75082: PPUSH
75083: LD_INT 1
75085: PPUSH
75086: CALL_OW 275
75090: PUSH
75091: LD_VAR 0 1
75095: PPUSH
75096: LD_INT 2
75098: PPUSH
75099: CALL_OW 275
75103: PUSH
75104: LD_VAR 0 1
75108: PPUSH
75109: LD_INT 3
75111: PPUSH
75112: CALL_OW 275
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: LIST
75121: ST_TO_ADDR
// end ;
75122: LD_VAR 0 2
75126: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75127: LD_INT 0
75129: PPUSH
75130: PPUSH
// result := array ;
75131: LD_ADDR_VAR 0 3
75135: PUSH
75136: LD_VAR 0 1
75140: ST_TO_ADDR
// if size > 0 then
75141: LD_VAR 0 2
75145: PUSH
75146: LD_INT 0
75148: GREATER
75149: IFFALSE 75195
// for i := array downto size do
75151: LD_ADDR_VAR 0 4
75155: PUSH
75156: DOUBLE
75157: LD_VAR 0 1
75161: INC
75162: ST_TO_ADDR
75163: LD_VAR 0 2
75167: PUSH
75168: FOR_DOWNTO
75169: IFFALSE 75193
// result := Delete ( result , result ) ;
75171: LD_ADDR_VAR 0 3
75175: PUSH
75176: LD_VAR 0 3
75180: PPUSH
75181: LD_VAR 0 3
75185: PPUSH
75186: CALL_OW 3
75190: ST_TO_ADDR
75191: GO 75168
75193: POP
75194: POP
// end ;
75195: LD_VAR 0 3
75199: RET
// export function ComExit ( unit ) ; var tmp ; begin
75200: LD_INT 0
75202: PPUSH
75203: PPUSH
// if not IsInUnit ( unit ) then
75204: LD_VAR 0 1
75208: PPUSH
75209: CALL_OW 310
75213: NOT
75214: IFFALSE 75218
// exit ;
75216: GO 75278
// tmp := IsInUnit ( unit ) ;
75218: LD_ADDR_VAR 0 3
75222: PUSH
75223: LD_VAR 0 1
75227: PPUSH
75228: CALL_OW 310
75232: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75233: LD_VAR 0 3
75237: PPUSH
75238: CALL_OW 247
75242: PUSH
75243: LD_INT 2
75245: EQUAL
75246: IFFALSE 75259
// ComExitVehicle ( unit ) else
75248: LD_VAR 0 1
75252: PPUSH
75253: CALL_OW 121
75257: GO 75268
// ComExitBuilding ( unit ) ;
75259: LD_VAR 0 1
75263: PPUSH
75264: CALL_OW 122
// result := tmp ;
75268: LD_ADDR_VAR 0 2
75272: PUSH
75273: LD_VAR 0 3
75277: ST_TO_ADDR
// end ;
75278: LD_VAR 0 2
75282: RET
// export function ComExitAll ( units ) ; var i ; begin
75283: LD_INT 0
75285: PPUSH
75286: PPUSH
// if not units then
75287: LD_VAR 0 1
75291: NOT
75292: IFFALSE 75296
// exit ;
75294: GO 75322
// for i in units do
75296: LD_ADDR_VAR 0 3
75300: PUSH
75301: LD_VAR 0 1
75305: PUSH
75306: FOR_IN
75307: IFFALSE 75320
// ComExit ( i ) ;
75309: LD_VAR 0 3
75313: PPUSH
75314: CALL 75200 0 1
75318: GO 75306
75320: POP
75321: POP
// end ;
75322: LD_VAR 0 2
75326: RET
// export function ResetHc ; begin
75327: LD_INT 0
75329: PPUSH
// InitHc ;
75330: CALL_OW 19
// hc_importance := 0 ;
75334: LD_ADDR_OWVAR 32
75338: PUSH
75339: LD_INT 0
75341: ST_TO_ADDR
// end ;
75342: LD_VAR 0 1
75346: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75347: LD_INT 0
75349: PPUSH
75350: PPUSH
75351: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75352: LD_ADDR_VAR 0 6
75356: PUSH
75357: LD_VAR 0 1
75361: PUSH
75362: LD_VAR 0 3
75366: PLUS
75367: PUSH
75368: LD_INT 2
75370: DIV
75371: ST_TO_ADDR
// if _x < 0 then
75372: LD_VAR 0 6
75376: PUSH
75377: LD_INT 0
75379: LESS
75380: IFFALSE 75397
// _x := _x * - 1 ;
75382: LD_ADDR_VAR 0 6
75386: PUSH
75387: LD_VAR 0 6
75391: PUSH
75392: LD_INT 1
75394: NEG
75395: MUL
75396: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75397: LD_ADDR_VAR 0 7
75401: PUSH
75402: LD_VAR 0 2
75406: PUSH
75407: LD_VAR 0 4
75411: PLUS
75412: PUSH
75413: LD_INT 2
75415: DIV
75416: ST_TO_ADDR
// if _y < 0 then
75417: LD_VAR 0 7
75421: PUSH
75422: LD_INT 0
75424: LESS
75425: IFFALSE 75442
// _y := _y * - 1 ;
75427: LD_ADDR_VAR 0 7
75431: PUSH
75432: LD_VAR 0 7
75436: PUSH
75437: LD_INT 1
75439: NEG
75440: MUL
75441: ST_TO_ADDR
// result := [ _x , _y ] ;
75442: LD_ADDR_VAR 0 5
75446: PUSH
75447: LD_VAR 0 6
75451: PUSH
75452: LD_VAR 0 7
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: ST_TO_ADDR
// end ;
75461: LD_VAR 0 5
75465: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75466: LD_INT 0
75468: PPUSH
75469: PPUSH
75470: PPUSH
75471: PPUSH
// task := GetTaskList ( unit ) ;
75472: LD_ADDR_VAR 0 7
75476: PUSH
75477: LD_VAR 0 1
75481: PPUSH
75482: CALL_OW 437
75486: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75487: LD_VAR 0 7
75491: NOT
75492: PUSH
75493: LD_VAR 0 1
75497: PPUSH
75498: LD_VAR 0 2
75502: PPUSH
75503: CALL_OW 308
75507: NOT
75508: AND
75509: IFFALSE 75513
// exit ;
75511: GO 75631
// if IsInArea ( unit , area ) then
75513: LD_VAR 0 1
75517: PPUSH
75518: LD_VAR 0 2
75522: PPUSH
75523: CALL_OW 308
75527: IFFALSE 75545
// begin ComMoveToArea ( unit , goAway ) ;
75529: LD_VAR 0 1
75533: PPUSH
75534: LD_VAR 0 3
75538: PPUSH
75539: CALL_OW 113
// exit ;
75543: GO 75631
// end ; if task [ 1 ] [ 1 ] <> M then
75545: LD_VAR 0 7
75549: PUSH
75550: LD_INT 1
75552: ARRAY
75553: PUSH
75554: LD_INT 1
75556: ARRAY
75557: PUSH
75558: LD_STRING M
75560: NONEQUAL
75561: IFFALSE 75565
// exit ;
75563: GO 75631
// x := task [ 1 ] [ 2 ] ;
75565: LD_ADDR_VAR 0 5
75569: PUSH
75570: LD_VAR 0 7
75574: PUSH
75575: LD_INT 1
75577: ARRAY
75578: PUSH
75579: LD_INT 2
75581: ARRAY
75582: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75583: LD_ADDR_VAR 0 6
75587: PUSH
75588: LD_VAR 0 7
75592: PUSH
75593: LD_INT 1
75595: ARRAY
75596: PUSH
75597: LD_INT 3
75599: ARRAY
75600: ST_TO_ADDR
// if InArea ( x , y , area ) then
75601: LD_VAR 0 5
75605: PPUSH
75606: LD_VAR 0 6
75610: PPUSH
75611: LD_VAR 0 2
75615: PPUSH
75616: CALL_OW 309
75620: IFFALSE 75631
// ComStop ( unit ) ;
75622: LD_VAR 0 1
75626: PPUSH
75627: CALL_OW 141
// end ;
75631: LD_VAR 0 4
75635: RET
// export function Abs ( value ) ; begin
75636: LD_INT 0
75638: PPUSH
// result := value ;
75639: LD_ADDR_VAR 0 2
75643: PUSH
75644: LD_VAR 0 1
75648: ST_TO_ADDR
// if value < 0 then
75649: LD_VAR 0 1
75653: PUSH
75654: LD_INT 0
75656: LESS
75657: IFFALSE 75674
// result := value * - 1 ;
75659: LD_ADDR_VAR 0 2
75663: PUSH
75664: LD_VAR 0 1
75668: PUSH
75669: LD_INT 1
75671: NEG
75672: MUL
75673: ST_TO_ADDR
// end ;
75674: LD_VAR 0 2
75678: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75679: LD_INT 0
75681: PPUSH
75682: PPUSH
75683: PPUSH
75684: PPUSH
75685: PPUSH
75686: PPUSH
75687: PPUSH
75688: PPUSH
// if not unit or not building then
75689: LD_VAR 0 1
75693: NOT
75694: PUSH
75695: LD_VAR 0 2
75699: NOT
75700: OR
75701: IFFALSE 75705
// exit ;
75703: GO 75931
// x := GetX ( building ) ;
75705: LD_ADDR_VAR 0 4
75709: PUSH
75710: LD_VAR 0 2
75714: PPUSH
75715: CALL_OW 250
75719: ST_TO_ADDR
// y := GetY ( building ) ;
75720: LD_ADDR_VAR 0 6
75724: PUSH
75725: LD_VAR 0 2
75729: PPUSH
75730: CALL_OW 251
75734: ST_TO_ADDR
// d := GetDir ( building ) ;
75735: LD_ADDR_VAR 0 8
75739: PUSH
75740: LD_VAR 0 2
75744: PPUSH
75745: CALL_OW 254
75749: ST_TO_ADDR
// r := 4 ;
75750: LD_ADDR_VAR 0 9
75754: PUSH
75755: LD_INT 4
75757: ST_TO_ADDR
// for i := 1 to 5 do
75758: LD_ADDR_VAR 0 10
75762: PUSH
75763: DOUBLE
75764: LD_INT 1
75766: DEC
75767: ST_TO_ADDR
75768: LD_INT 5
75770: PUSH
75771: FOR_TO
75772: IFFALSE 75929
// begin _x := ShiftX ( x , d , r + i ) ;
75774: LD_ADDR_VAR 0 5
75778: PUSH
75779: LD_VAR 0 4
75783: PPUSH
75784: LD_VAR 0 8
75788: PPUSH
75789: LD_VAR 0 9
75793: PUSH
75794: LD_VAR 0 10
75798: PLUS
75799: PPUSH
75800: CALL_OW 272
75804: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75805: LD_ADDR_VAR 0 7
75809: PUSH
75810: LD_VAR 0 6
75814: PPUSH
75815: LD_VAR 0 8
75819: PPUSH
75820: LD_VAR 0 9
75824: PUSH
75825: LD_VAR 0 10
75829: PLUS
75830: PPUSH
75831: CALL_OW 273
75835: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75836: LD_VAR 0 5
75840: PPUSH
75841: LD_VAR 0 7
75845: PPUSH
75846: CALL_OW 488
75850: PUSH
75851: LD_VAR 0 5
75855: PPUSH
75856: LD_VAR 0 7
75860: PPUSH
75861: CALL_OW 428
75865: PPUSH
75866: CALL_OW 247
75870: PUSH
75871: LD_INT 3
75873: PUSH
75874: LD_INT 2
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: IN
75881: NOT
75882: AND
75883: IFFALSE 75927
// begin ComMoveXY ( unit , _x , _y ) ;
75885: LD_VAR 0 1
75889: PPUSH
75890: LD_VAR 0 5
75894: PPUSH
75895: LD_VAR 0 7
75899: PPUSH
75900: CALL_OW 111
// result := [ _x , _y ] ;
75904: LD_ADDR_VAR 0 3
75908: PUSH
75909: LD_VAR 0 5
75913: PUSH
75914: LD_VAR 0 7
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: ST_TO_ADDR
// exit ;
75923: POP
75924: POP
75925: GO 75931
// end ; end ;
75927: GO 75771
75929: POP
75930: POP
// end ;
75931: LD_VAR 0 3
75935: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75936: LD_INT 0
75938: PPUSH
75939: PPUSH
75940: PPUSH
// result := 0 ;
75941: LD_ADDR_VAR 0 3
75945: PUSH
75946: LD_INT 0
75948: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75949: LD_VAR 0 1
75953: PUSH
75954: LD_INT 0
75956: LESS
75957: PUSH
75958: LD_VAR 0 1
75962: PUSH
75963: LD_INT 8
75965: GREATER
75966: OR
75967: PUSH
75968: LD_VAR 0 2
75972: PUSH
75973: LD_INT 0
75975: LESS
75976: OR
75977: PUSH
75978: LD_VAR 0 2
75982: PUSH
75983: LD_INT 8
75985: GREATER
75986: OR
75987: IFFALSE 75991
// exit ;
75989: GO 76066
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75991: LD_ADDR_VAR 0 4
75995: PUSH
75996: LD_INT 22
75998: PUSH
75999: LD_VAR 0 2
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: PPUSH
76008: CALL_OW 69
76012: PUSH
76013: FOR_IN
76014: IFFALSE 76064
// begin un := UnitShoot ( i ) ;
76016: LD_ADDR_VAR 0 5
76020: PUSH
76021: LD_VAR 0 4
76025: PPUSH
76026: CALL_OW 504
76030: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76031: LD_VAR 0 5
76035: PPUSH
76036: CALL_OW 255
76040: PUSH
76041: LD_VAR 0 1
76045: EQUAL
76046: IFFALSE 76062
// begin result := un ;
76048: LD_ADDR_VAR 0 3
76052: PUSH
76053: LD_VAR 0 5
76057: ST_TO_ADDR
// exit ;
76058: POP
76059: POP
76060: GO 76066
// end ; end ;
76062: GO 76013
76064: POP
76065: POP
// end ;
76066: LD_VAR 0 3
76070: RET
// export function GetCargoBay ( units ) ; begin
76071: LD_INT 0
76073: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76074: LD_ADDR_VAR 0 2
76078: PUSH
76079: LD_VAR 0 1
76083: PPUSH
76084: LD_INT 2
76086: PUSH
76087: LD_INT 34
76089: PUSH
76090: LD_INT 12
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: PUSH
76097: LD_INT 34
76099: PUSH
76100: LD_INT 51
76102: PUSH
76103: EMPTY
76104: LIST
76105: LIST
76106: PUSH
76107: LD_INT 34
76109: PUSH
76110: LD_INT 32
76112: PUSH
76113: EMPTY
76114: LIST
76115: LIST
76116: PUSH
76117: LD_INT 34
76119: PUSH
76120: LD_EXP 50
76124: PUSH
76125: EMPTY
76126: LIST
76127: LIST
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: PPUSH
76136: CALL_OW 72
76140: ST_TO_ADDR
// end ;
76141: LD_VAR 0 2
76145: RET
// export function Negate ( value ) ; begin
76146: LD_INT 0
76148: PPUSH
// result := not value ;
76149: LD_ADDR_VAR 0 2
76153: PUSH
76154: LD_VAR 0 1
76158: NOT
76159: ST_TO_ADDR
// end ;
76160: LD_VAR 0 2
76164: RET
// export function Inc ( value ) ; begin
76165: LD_INT 0
76167: PPUSH
// result := value + 1 ;
76168: LD_ADDR_VAR 0 2
76172: PUSH
76173: LD_VAR 0 1
76177: PUSH
76178: LD_INT 1
76180: PLUS
76181: ST_TO_ADDR
// end ;
76182: LD_VAR 0 2
76186: RET
// export function Dec ( value ) ; begin
76187: LD_INT 0
76189: PPUSH
// result := value - 1 ;
76190: LD_ADDR_VAR 0 2
76194: PUSH
76195: LD_VAR 0 1
76199: PUSH
76200: LD_INT 1
76202: MINUS
76203: ST_TO_ADDR
// end ;
76204: LD_VAR 0 2
76208: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76209: LD_INT 0
76211: PPUSH
76212: PPUSH
76213: PPUSH
76214: PPUSH
76215: PPUSH
76216: PPUSH
76217: PPUSH
76218: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76219: LD_VAR 0 1
76223: PPUSH
76224: LD_VAR 0 2
76228: PPUSH
76229: CALL_OW 488
76233: NOT
76234: PUSH
76235: LD_VAR 0 3
76239: PPUSH
76240: LD_VAR 0 4
76244: PPUSH
76245: CALL_OW 488
76249: NOT
76250: OR
76251: IFFALSE 76264
// begin result := - 1 ;
76253: LD_ADDR_VAR 0 5
76257: PUSH
76258: LD_INT 1
76260: NEG
76261: ST_TO_ADDR
// exit ;
76262: GO 76499
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76264: LD_ADDR_VAR 0 12
76268: PUSH
76269: LD_VAR 0 1
76273: PPUSH
76274: LD_VAR 0 2
76278: PPUSH
76279: LD_VAR 0 3
76283: PPUSH
76284: LD_VAR 0 4
76288: PPUSH
76289: CALL 75347 0 4
76293: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76294: LD_ADDR_VAR 0 11
76298: PUSH
76299: LD_VAR 0 1
76303: PPUSH
76304: LD_VAR 0 2
76308: PPUSH
76309: LD_VAR 0 12
76313: PUSH
76314: LD_INT 1
76316: ARRAY
76317: PPUSH
76318: LD_VAR 0 12
76322: PUSH
76323: LD_INT 2
76325: ARRAY
76326: PPUSH
76327: CALL_OW 298
76331: ST_TO_ADDR
// distance := 9999 ;
76332: LD_ADDR_VAR 0 10
76336: PUSH
76337: LD_INT 9999
76339: ST_TO_ADDR
// for i := 0 to 5 do
76340: LD_ADDR_VAR 0 6
76344: PUSH
76345: DOUBLE
76346: LD_INT 0
76348: DEC
76349: ST_TO_ADDR
76350: LD_INT 5
76352: PUSH
76353: FOR_TO
76354: IFFALSE 76497
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76356: LD_ADDR_VAR 0 7
76360: PUSH
76361: LD_VAR 0 1
76365: PPUSH
76366: LD_VAR 0 6
76370: PPUSH
76371: LD_VAR 0 11
76375: PPUSH
76376: CALL_OW 272
76380: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76381: LD_ADDR_VAR 0 8
76385: PUSH
76386: LD_VAR 0 2
76390: PPUSH
76391: LD_VAR 0 6
76395: PPUSH
76396: LD_VAR 0 11
76400: PPUSH
76401: CALL_OW 273
76405: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76406: LD_VAR 0 7
76410: PPUSH
76411: LD_VAR 0 8
76415: PPUSH
76416: CALL_OW 488
76420: NOT
76421: IFFALSE 76425
// continue ;
76423: GO 76353
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76425: LD_ADDR_VAR 0 9
76429: PUSH
76430: LD_VAR 0 12
76434: PUSH
76435: LD_INT 1
76437: ARRAY
76438: PPUSH
76439: LD_VAR 0 12
76443: PUSH
76444: LD_INT 2
76446: ARRAY
76447: PPUSH
76448: LD_VAR 0 7
76452: PPUSH
76453: LD_VAR 0 8
76457: PPUSH
76458: CALL_OW 298
76462: ST_TO_ADDR
// if tmp < distance then
76463: LD_VAR 0 9
76467: PUSH
76468: LD_VAR 0 10
76472: LESS
76473: IFFALSE 76495
// begin result := i ;
76475: LD_ADDR_VAR 0 5
76479: PUSH
76480: LD_VAR 0 6
76484: ST_TO_ADDR
// distance := tmp ;
76485: LD_ADDR_VAR 0 10
76489: PUSH
76490: LD_VAR 0 9
76494: ST_TO_ADDR
// end ; end ;
76495: GO 76353
76497: POP
76498: POP
// end ;
76499: LD_VAR 0 5
76503: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76504: LD_INT 0
76506: PPUSH
76507: PPUSH
// if not driver or not IsInUnit ( driver ) then
76508: LD_VAR 0 1
76512: NOT
76513: PUSH
76514: LD_VAR 0 1
76518: PPUSH
76519: CALL_OW 310
76523: NOT
76524: OR
76525: IFFALSE 76529
// exit ;
76527: GO 76619
// vehicle := IsInUnit ( driver ) ;
76529: LD_ADDR_VAR 0 3
76533: PUSH
76534: LD_VAR 0 1
76538: PPUSH
76539: CALL_OW 310
76543: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76544: LD_VAR 0 1
76548: PPUSH
76549: LD_STRING \
76551: PUSH
76552: LD_INT 0
76554: PUSH
76555: LD_INT 0
76557: PUSH
76558: LD_INT 0
76560: PUSH
76561: LD_INT 0
76563: PUSH
76564: LD_INT 0
76566: PUSH
76567: LD_INT 0
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: LIST
76578: PUSH
76579: LD_STRING E
76581: PUSH
76582: LD_INT 0
76584: PUSH
76585: LD_INT 0
76587: PUSH
76588: LD_VAR 0 3
76592: PUSH
76593: LD_INT 0
76595: PUSH
76596: LD_INT 0
76598: PUSH
76599: LD_INT 0
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: LIST
76606: LIST
76607: LIST
76608: LIST
76609: LIST
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: PPUSH
76615: CALL_OW 446
// end ;
76619: LD_VAR 0 2
76623: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76624: LD_INT 0
76626: PPUSH
76627: PPUSH
// if not driver or not IsInUnit ( driver ) then
76628: LD_VAR 0 1
76632: NOT
76633: PUSH
76634: LD_VAR 0 1
76638: PPUSH
76639: CALL_OW 310
76643: NOT
76644: OR
76645: IFFALSE 76649
// exit ;
76647: GO 76739
// vehicle := IsInUnit ( driver ) ;
76649: LD_ADDR_VAR 0 3
76653: PUSH
76654: LD_VAR 0 1
76658: PPUSH
76659: CALL_OW 310
76663: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76664: LD_VAR 0 1
76668: PPUSH
76669: LD_STRING \
76671: PUSH
76672: LD_INT 0
76674: PUSH
76675: LD_INT 0
76677: PUSH
76678: LD_INT 0
76680: PUSH
76681: LD_INT 0
76683: PUSH
76684: LD_INT 0
76686: PUSH
76687: LD_INT 0
76689: PUSH
76690: EMPTY
76691: LIST
76692: LIST
76693: LIST
76694: LIST
76695: LIST
76696: LIST
76697: LIST
76698: PUSH
76699: LD_STRING E
76701: PUSH
76702: LD_INT 0
76704: PUSH
76705: LD_INT 0
76707: PUSH
76708: LD_VAR 0 3
76712: PUSH
76713: LD_INT 0
76715: PUSH
76716: LD_INT 0
76718: PUSH
76719: LD_INT 0
76721: PUSH
76722: EMPTY
76723: LIST
76724: LIST
76725: LIST
76726: LIST
76727: LIST
76728: LIST
76729: LIST
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: PPUSH
76735: CALL_OW 447
// end ;
76739: LD_VAR 0 2
76743: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76744: LD_INT 0
76746: PPUSH
76747: PPUSH
76748: PPUSH
// tmp := [ ] ;
76749: LD_ADDR_VAR 0 5
76753: PUSH
76754: EMPTY
76755: ST_TO_ADDR
// for i in units do
76756: LD_ADDR_VAR 0 4
76760: PUSH
76761: LD_VAR 0 1
76765: PUSH
76766: FOR_IN
76767: IFFALSE 76805
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76769: LD_ADDR_VAR 0 5
76773: PUSH
76774: LD_VAR 0 5
76778: PPUSH
76779: LD_VAR 0 5
76783: PUSH
76784: LD_INT 1
76786: PLUS
76787: PPUSH
76788: LD_VAR 0 4
76792: PPUSH
76793: CALL_OW 256
76797: PPUSH
76798: CALL_OW 2
76802: ST_TO_ADDR
76803: GO 76766
76805: POP
76806: POP
// if not tmp then
76807: LD_VAR 0 5
76811: NOT
76812: IFFALSE 76816
// exit ;
76814: GO 76864
// if asc then
76816: LD_VAR 0 2
76820: IFFALSE 76844
// result := SortListByListAsc ( units , tmp ) else
76822: LD_ADDR_VAR 0 3
76826: PUSH
76827: LD_VAR 0 1
76831: PPUSH
76832: LD_VAR 0 5
76836: PPUSH
76837: CALL_OW 76
76841: ST_TO_ADDR
76842: GO 76864
// result := SortListByListDesc ( units , tmp ) ;
76844: LD_ADDR_VAR 0 3
76848: PUSH
76849: LD_VAR 0 1
76853: PPUSH
76854: LD_VAR 0 5
76858: PPUSH
76859: CALL_OW 77
76863: ST_TO_ADDR
// end ;
76864: LD_VAR 0 3
76868: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76869: LD_INT 0
76871: PPUSH
76872: PPUSH
// task := GetTaskList ( mech ) ;
76873: LD_ADDR_VAR 0 4
76877: PUSH
76878: LD_VAR 0 1
76882: PPUSH
76883: CALL_OW 437
76887: ST_TO_ADDR
// if not task then
76888: LD_VAR 0 4
76892: NOT
76893: IFFALSE 76897
// exit ;
76895: GO 76939
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76897: LD_ADDR_VAR 0 3
76901: PUSH
76902: LD_VAR 0 4
76906: PUSH
76907: LD_INT 1
76909: ARRAY
76910: PUSH
76911: LD_INT 1
76913: ARRAY
76914: PUSH
76915: LD_STRING r
76917: EQUAL
76918: PUSH
76919: LD_VAR 0 4
76923: PUSH
76924: LD_INT 1
76926: ARRAY
76927: PUSH
76928: LD_INT 4
76930: ARRAY
76931: PUSH
76932: LD_VAR 0 2
76936: EQUAL
76937: AND
76938: ST_TO_ADDR
// end ;
76939: LD_VAR 0 3
76943: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76944: LD_INT 0
76946: PPUSH
// SetDir ( unit , d ) ;
76947: LD_VAR 0 1
76951: PPUSH
76952: LD_VAR 0 4
76956: PPUSH
76957: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76961: LD_VAR 0 1
76965: PPUSH
76966: LD_VAR 0 2
76970: PPUSH
76971: LD_VAR 0 3
76975: PPUSH
76976: LD_VAR 0 5
76980: PPUSH
76981: CALL_OW 48
// end ;
76985: LD_VAR 0 6
76989: RET
// export function ToNaturalNumber ( number ) ; begin
76990: LD_INT 0
76992: PPUSH
// result := number div 1 ;
76993: LD_ADDR_VAR 0 2
76997: PUSH
76998: LD_VAR 0 1
77002: PUSH
77003: LD_INT 1
77005: DIV
77006: ST_TO_ADDR
// if number < 0 then
77007: LD_VAR 0 1
77011: PUSH
77012: LD_INT 0
77014: LESS
77015: IFFALSE 77025
// result := 0 ;
77017: LD_ADDR_VAR 0 2
77021: PUSH
77022: LD_INT 0
77024: ST_TO_ADDR
// end ;
77025: LD_VAR 0 2
77029: RET
// export function SortByClass ( units , class ) ; var un ; begin
77030: LD_INT 0
77032: PPUSH
77033: PPUSH
// if not units or not class then
77034: LD_VAR 0 1
77038: NOT
77039: PUSH
77040: LD_VAR 0 2
77044: NOT
77045: OR
77046: IFFALSE 77050
// exit ;
77048: GO 77145
// result := [ ] ;
77050: LD_ADDR_VAR 0 3
77054: PUSH
77055: EMPTY
77056: ST_TO_ADDR
// for un in units do
77057: LD_ADDR_VAR 0 4
77061: PUSH
77062: LD_VAR 0 1
77066: PUSH
77067: FOR_IN
77068: IFFALSE 77143
// if GetClass ( un ) = class then
77070: LD_VAR 0 4
77074: PPUSH
77075: CALL_OW 257
77079: PUSH
77080: LD_VAR 0 2
77084: EQUAL
77085: IFFALSE 77112
// result := Insert ( result , 1 , un ) else
77087: LD_ADDR_VAR 0 3
77091: PUSH
77092: LD_VAR 0 3
77096: PPUSH
77097: LD_INT 1
77099: PPUSH
77100: LD_VAR 0 4
77104: PPUSH
77105: CALL_OW 2
77109: ST_TO_ADDR
77110: GO 77141
// result := Replace ( result , result + 1 , un ) ;
77112: LD_ADDR_VAR 0 3
77116: PUSH
77117: LD_VAR 0 3
77121: PPUSH
77122: LD_VAR 0 3
77126: PUSH
77127: LD_INT 1
77129: PLUS
77130: PPUSH
77131: LD_VAR 0 4
77135: PPUSH
77136: CALL_OW 1
77140: ST_TO_ADDR
77141: GO 77067
77143: POP
77144: POP
// end ;
77145: LD_VAR 0 3
77149: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77150: LD_INT 0
77152: PPUSH
77153: PPUSH
77154: PPUSH
77155: PPUSH
77156: PPUSH
77157: PPUSH
77158: PPUSH
// result := [ ] ;
77159: LD_ADDR_VAR 0 4
77163: PUSH
77164: EMPTY
77165: ST_TO_ADDR
// if x - r < 0 then
77166: LD_VAR 0 1
77170: PUSH
77171: LD_VAR 0 3
77175: MINUS
77176: PUSH
77177: LD_INT 0
77179: LESS
77180: IFFALSE 77192
// min_x := 0 else
77182: LD_ADDR_VAR 0 8
77186: PUSH
77187: LD_INT 0
77189: ST_TO_ADDR
77190: GO 77208
// min_x := x - r ;
77192: LD_ADDR_VAR 0 8
77196: PUSH
77197: LD_VAR 0 1
77201: PUSH
77202: LD_VAR 0 3
77206: MINUS
77207: ST_TO_ADDR
// if y - r < 0 then
77208: LD_VAR 0 2
77212: PUSH
77213: LD_VAR 0 3
77217: MINUS
77218: PUSH
77219: LD_INT 0
77221: LESS
77222: IFFALSE 77234
// min_y := 0 else
77224: LD_ADDR_VAR 0 7
77228: PUSH
77229: LD_INT 0
77231: ST_TO_ADDR
77232: GO 77250
// min_y := y - r ;
77234: LD_ADDR_VAR 0 7
77238: PUSH
77239: LD_VAR 0 2
77243: PUSH
77244: LD_VAR 0 3
77248: MINUS
77249: ST_TO_ADDR
// max_x := x + r ;
77250: LD_ADDR_VAR 0 9
77254: PUSH
77255: LD_VAR 0 1
77259: PUSH
77260: LD_VAR 0 3
77264: PLUS
77265: ST_TO_ADDR
// max_y := y + r ;
77266: LD_ADDR_VAR 0 10
77270: PUSH
77271: LD_VAR 0 2
77275: PUSH
77276: LD_VAR 0 3
77280: PLUS
77281: ST_TO_ADDR
// for _x = min_x to max_x do
77282: LD_ADDR_VAR 0 5
77286: PUSH
77287: DOUBLE
77288: LD_VAR 0 8
77292: DEC
77293: ST_TO_ADDR
77294: LD_VAR 0 9
77298: PUSH
77299: FOR_TO
77300: IFFALSE 77401
// for _y = min_y to max_y do
77302: LD_ADDR_VAR 0 6
77306: PUSH
77307: DOUBLE
77308: LD_VAR 0 7
77312: DEC
77313: ST_TO_ADDR
77314: LD_VAR 0 10
77318: PUSH
77319: FOR_TO
77320: IFFALSE 77397
// begin if not ValidHex ( _x , _y ) then
77322: LD_VAR 0 5
77326: PPUSH
77327: LD_VAR 0 6
77331: PPUSH
77332: CALL_OW 488
77336: NOT
77337: IFFALSE 77341
// continue ;
77339: GO 77319
// if GetResourceTypeXY ( _x , _y ) then
77341: LD_VAR 0 5
77345: PPUSH
77346: LD_VAR 0 6
77350: PPUSH
77351: CALL_OW 283
77355: IFFALSE 77395
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77357: LD_ADDR_VAR 0 4
77361: PUSH
77362: LD_VAR 0 4
77366: PPUSH
77367: LD_VAR 0 4
77371: PUSH
77372: LD_INT 1
77374: PLUS
77375: PPUSH
77376: LD_VAR 0 5
77380: PUSH
77381: LD_VAR 0 6
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PPUSH
77390: CALL_OW 1
77394: ST_TO_ADDR
// end ;
77395: GO 77319
77397: POP
77398: POP
77399: GO 77299
77401: POP
77402: POP
// end ;
77403: LD_VAR 0 4
77407: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77408: LD_INT 0
77410: PPUSH
77411: PPUSH
77412: PPUSH
77413: PPUSH
77414: PPUSH
77415: PPUSH
77416: PPUSH
77417: PPUSH
// if not units then
77418: LD_VAR 0 1
77422: NOT
77423: IFFALSE 77427
// exit ;
77425: GO 77852
// result := UnitFilter ( units , [ f_ok ] ) ;
77427: LD_ADDR_VAR 0 3
77431: PUSH
77432: LD_VAR 0 1
77436: PPUSH
77437: LD_INT 50
77439: PUSH
77440: EMPTY
77441: LIST
77442: PPUSH
77443: CALL_OW 72
77447: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77448: LD_ADDR_VAR 0 8
77452: PUSH
77453: LD_VAR 0 1
77457: PUSH
77458: LD_INT 1
77460: ARRAY
77461: PPUSH
77462: CALL_OW 255
77466: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
77467: LD_ADDR_VAR 0 10
77471: PUSH
77472: LD_INT 29
77474: PUSH
77475: LD_EXP 53
77479: PUSH
77480: EMPTY
77481: LIST
77482: LIST
77483: ST_TO_ADDR
// if not result then
77484: LD_VAR 0 3
77488: NOT
77489: IFFALSE 77493
// exit ;
77491: GO 77852
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77493: LD_ADDR_VAR 0 5
77497: PUSH
77498: LD_INT 81
77500: PUSH
77501: LD_VAR 0 8
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: PPUSH
77510: CALL_OW 69
77514: ST_TO_ADDR
// for i in result do
77515: LD_ADDR_VAR 0 4
77519: PUSH
77520: LD_VAR 0 3
77524: PUSH
77525: FOR_IN
77526: IFFALSE 77850
// begin tag := GetTag ( i ) + 1 ;
77528: LD_ADDR_VAR 0 9
77532: PUSH
77533: LD_VAR 0 4
77537: PPUSH
77538: CALL_OW 110
77542: PUSH
77543: LD_INT 1
77545: PLUS
77546: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77547: LD_ADDR_VAR 0 7
77551: PUSH
77552: LD_VAR 0 4
77556: PPUSH
77557: CALL_OW 250
77561: PPUSH
77562: LD_VAR 0 4
77566: PPUSH
77567: CALL_OW 251
77571: PPUSH
77572: LD_INT 6
77574: PPUSH
77575: CALL 77150 0 3
77579: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77580: LD_VAR 0 7
77584: PUSH
77585: LD_VAR 0 4
77589: PPUSH
77590: CALL_OW 264
77594: PUSH
77595: LD_VAR 0 10
77599: IN
77600: NOT
77601: AND
77602: IFFALSE 77641
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77604: LD_VAR 0 4
77608: PPUSH
77609: LD_VAR 0 7
77613: PUSH
77614: LD_INT 1
77616: ARRAY
77617: PUSH
77618: LD_INT 1
77620: ARRAY
77621: PPUSH
77622: LD_VAR 0 7
77626: PUSH
77627: LD_INT 1
77629: ARRAY
77630: PUSH
77631: LD_INT 2
77633: ARRAY
77634: PPUSH
77635: CALL_OW 116
77639: GO 77848
// if path > tag then
77641: LD_VAR 0 2
77645: PUSH
77646: LD_VAR 0 9
77650: GREATER
77651: IFFALSE 77818
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77653: LD_ADDR_VAR 0 6
77657: PUSH
77658: LD_VAR 0 5
77662: PPUSH
77663: LD_INT 91
77665: PUSH
77666: LD_VAR 0 4
77670: PUSH
77671: LD_INT 12
77673: PUSH
77674: EMPTY
77675: LIST
77676: LIST
77677: LIST
77678: PPUSH
77679: CALL_OW 72
77683: ST_TO_ADDR
// if nearEnemy then
77684: LD_VAR 0 6
77688: IFFALSE 77716
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77690: LD_VAR 0 4
77694: PPUSH
77695: LD_VAR 0 6
77699: PPUSH
77700: LD_VAR 0 4
77704: PPUSH
77705: CALL_OW 74
77709: PPUSH
77710: CALL_OW 115
77714: GO 77816
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77716: LD_VAR 0 4
77720: PPUSH
77721: LD_VAR 0 2
77725: PUSH
77726: LD_VAR 0 9
77730: ARRAY
77731: PUSH
77732: LD_INT 1
77734: ARRAY
77735: PPUSH
77736: LD_VAR 0 2
77740: PUSH
77741: LD_VAR 0 9
77745: ARRAY
77746: PUSH
77747: LD_INT 2
77749: ARRAY
77750: PPUSH
77751: CALL_OW 297
77755: PUSH
77756: LD_INT 6
77758: GREATER
77759: IFFALSE 77802
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77761: LD_VAR 0 4
77765: PPUSH
77766: LD_VAR 0 2
77770: PUSH
77771: LD_VAR 0 9
77775: ARRAY
77776: PUSH
77777: LD_INT 1
77779: ARRAY
77780: PPUSH
77781: LD_VAR 0 2
77785: PUSH
77786: LD_VAR 0 9
77790: ARRAY
77791: PUSH
77792: LD_INT 2
77794: ARRAY
77795: PPUSH
77796: CALL_OW 114
77800: GO 77816
// SetTag ( i , tag ) ;
77802: LD_VAR 0 4
77806: PPUSH
77807: LD_VAR 0 9
77811: PPUSH
77812: CALL_OW 109
// end else
77816: GO 77848
// if enemy then
77818: LD_VAR 0 5
77822: IFFALSE 77848
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77824: LD_VAR 0 4
77828: PPUSH
77829: LD_VAR 0 5
77833: PPUSH
77834: LD_VAR 0 4
77838: PPUSH
77839: CALL_OW 74
77843: PPUSH
77844: CALL_OW 115
// end ;
77848: GO 77525
77850: POP
77851: POP
// end ;
77852: LD_VAR 0 3
77856: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77857: LD_INT 0
77859: PPUSH
77860: PPUSH
77861: PPUSH
// if not unit or IsInUnit ( unit ) then
77862: LD_VAR 0 1
77866: NOT
77867: PUSH
77868: LD_VAR 0 1
77872: PPUSH
77873: CALL_OW 310
77877: OR
77878: IFFALSE 77882
// exit ;
77880: GO 77973
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77882: LD_ADDR_VAR 0 4
77886: PUSH
77887: LD_VAR 0 1
77891: PPUSH
77892: CALL_OW 250
77896: PPUSH
77897: LD_VAR 0 2
77901: PPUSH
77902: LD_INT 1
77904: PPUSH
77905: CALL_OW 272
77909: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77910: LD_ADDR_VAR 0 5
77914: PUSH
77915: LD_VAR 0 1
77919: PPUSH
77920: CALL_OW 251
77924: PPUSH
77925: LD_VAR 0 2
77929: PPUSH
77930: LD_INT 1
77932: PPUSH
77933: CALL_OW 273
77937: ST_TO_ADDR
// if ValidHex ( x , y ) then
77938: LD_VAR 0 4
77942: PPUSH
77943: LD_VAR 0 5
77947: PPUSH
77948: CALL_OW 488
77952: IFFALSE 77973
// ComTurnXY ( unit , x , y ) ;
77954: LD_VAR 0 1
77958: PPUSH
77959: LD_VAR 0 4
77963: PPUSH
77964: LD_VAR 0 5
77968: PPUSH
77969: CALL_OW 118
// end ;
77973: LD_VAR 0 3
77977: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77978: LD_INT 0
77980: PPUSH
77981: PPUSH
// result := false ;
77982: LD_ADDR_VAR 0 3
77986: PUSH
77987: LD_INT 0
77989: ST_TO_ADDR
// if not units then
77990: LD_VAR 0 2
77994: NOT
77995: IFFALSE 77999
// exit ;
77997: GO 78044
// for i in units do
77999: LD_ADDR_VAR 0 4
78003: PUSH
78004: LD_VAR 0 2
78008: PUSH
78009: FOR_IN
78010: IFFALSE 78042
// if See ( side , i ) then
78012: LD_VAR 0 1
78016: PPUSH
78017: LD_VAR 0 4
78021: PPUSH
78022: CALL_OW 292
78026: IFFALSE 78040
// begin result := true ;
78028: LD_ADDR_VAR 0 3
78032: PUSH
78033: LD_INT 1
78035: ST_TO_ADDR
// exit ;
78036: POP
78037: POP
78038: GO 78044
// end ;
78040: GO 78009
78042: POP
78043: POP
// end ;
78044: LD_VAR 0 3
78048: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78049: LD_INT 0
78051: PPUSH
78052: PPUSH
78053: PPUSH
78054: PPUSH
// if not unit or not points then
78055: LD_VAR 0 1
78059: NOT
78060: PUSH
78061: LD_VAR 0 2
78065: NOT
78066: OR
78067: IFFALSE 78071
// exit ;
78069: GO 78161
// dist := 99999 ;
78071: LD_ADDR_VAR 0 5
78075: PUSH
78076: LD_INT 99999
78078: ST_TO_ADDR
// for i in points do
78079: LD_ADDR_VAR 0 4
78083: PUSH
78084: LD_VAR 0 2
78088: PUSH
78089: FOR_IN
78090: IFFALSE 78159
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78092: LD_ADDR_VAR 0 6
78096: PUSH
78097: LD_VAR 0 1
78101: PPUSH
78102: LD_VAR 0 4
78106: PUSH
78107: LD_INT 1
78109: ARRAY
78110: PPUSH
78111: LD_VAR 0 4
78115: PUSH
78116: LD_INT 2
78118: ARRAY
78119: PPUSH
78120: CALL_OW 297
78124: ST_TO_ADDR
// if tmpDist < dist then
78125: LD_VAR 0 6
78129: PUSH
78130: LD_VAR 0 5
78134: LESS
78135: IFFALSE 78157
// begin result := i ;
78137: LD_ADDR_VAR 0 3
78141: PUSH
78142: LD_VAR 0 4
78146: ST_TO_ADDR
// dist := tmpDist ;
78147: LD_ADDR_VAR 0 5
78151: PUSH
78152: LD_VAR 0 6
78156: ST_TO_ADDR
// end ; end ;
78157: GO 78089
78159: POP
78160: POP
// end ; end_of_file
78161: LD_VAR 0 3
78165: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78166: LD_VAR 0 1
78170: PUSH
78171: LD_INT 200
78173: DOUBLE
78174: GREATEREQUAL
78175: IFFALSE 78183
78177: LD_INT 299
78179: DOUBLE
78180: LESSEQUAL
78181: IFTRUE 78185
78183: GO 78217
78185: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78186: LD_VAR 0 1
78190: PPUSH
78191: LD_VAR 0 2
78195: PPUSH
78196: LD_VAR 0 3
78200: PPUSH
78201: LD_VAR 0 4
78205: PPUSH
78206: LD_VAR 0 5
78210: PPUSH
78211: CALL 34192 0 5
78215: GO 78294
78217: LD_INT 300
78219: DOUBLE
78220: GREATEREQUAL
78221: IFFALSE 78229
78223: LD_INT 399
78225: DOUBLE
78226: LESSEQUAL
78227: IFTRUE 78231
78229: GO 78293
78231: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78232: LD_VAR 0 1
78236: PPUSH
78237: LD_VAR 0 2
78241: PPUSH
78242: LD_VAR 0 3
78246: PPUSH
78247: LD_VAR 0 4
78251: PPUSH
78252: LD_VAR 0 5
78256: PPUSH
78257: LD_VAR 0 6
78261: PPUSH
78262: LD_VAR 0 7
78266: PPUSH
78267: LD_VAR 0 8
78271: PPUSH
78272: LD_VAR 0 9
78276: PPUSH
78277: LD_VAR 0 10
78281: PPUSH
78282: LD_VAR 0 11
78286: PPUSH
78287: CALL 32090 0 11
78291: GO 78294
78293: POP
// end ;
78294: PPOPN 11
78296: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78297: LD_VAR 0 1
78301: PPUSH
78302: LD_VAR 0 2
78306: PPUSH
78307: LD_VAR 0 3
78311: PPUSH
78312: LD_VAR 0 4
78316: PPUSH
78317: LD_VAR 0 5
78321: PPUSH
78322: CALL 34184 0 5
// end ; end_of_file
78326: PPOPN 5
78328: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78329: LD_VAR 0 1
78333: PPUSH
78334: LD_VAR 0 2
78338: PPUSH
78339: LD_VAR 0 3
78343: PPUSH
78344: LD_VAR 0 4
78348: PPUSH
78349: LD_VAR 0 5
78353: PPUSH
78354: LD_VAR 0 6
78358: PPUSH
78359: CALL 20285 0 6
// end ;
78363: PPOPN 6
78365: END
