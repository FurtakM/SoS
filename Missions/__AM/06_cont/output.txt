// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// sendedConvoys = 0 ;
 177: LD_ADDR_EXP 39
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// tamedApemans = 0 ;
 185: LD_ADDR_EXP 32
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// ignoreTarget := [ ] ;
 193: LD_ADDR_EXP 45
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// arrivals := [ ] ;
 200: LD_ADDR_EXP 46
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// unitLost = 0 ;
 207: LD_ADDR_EXP 30
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 215: LD_ADDR_EXP 31
 219: PUSH
 220: EMPTY
 221: ST_TO_ADDR
// russianTanks = [ ] ;
 222: LD_ADDR_EXP 36
 226: PUSH
 227: EMPTY
 228: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 229: LD_ADDR_EXP 37
 233: PUSH
 234: EMPTY
 235: ST_TO_ADDR
// disableHealAI = 0 ;
 236: LD_ADDR_EXP 33
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// strings = [ ] ;
 244: LD_ADDR_EXP 27
 248: PUSH
 249: EMPTY
 250: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 251: LD_INT 4
 253: PPUSH
 254: LD_INT 1
 256: PPUSH
 257: CALL_OW 343
// PrepareDifficulty ;
 261: CALL 6360 0 0
// PrepareNature ;
 265: CALL 23521 0 0
// PrepareRussian ;
 269: CALL 5545 0 0
// PrepareVehicles ;
 273: CALL 1565 0 0
// PrepareHeroes ;
 277: CALL 573 0 0
// PrepareOthers ;
 281: CALL 1986 0 0
// PreparePlayerApemans ;
 285: CALL 2128 0 0
// end ;
 289: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 290: LD_EXP 42
 294: PUSH
 295: LD_INT 1
 297: EQUAL
 298: IFFALSE 525
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// fogoff ( true ) ;
 307: LD_INT 1
 309: PPUSH
 310: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 314: LD_ADDR_VAR 0 1
 318: PUSH
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 21
 331: PUSH
 332: LD_INT 1
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 367: LD_ADDR_VAR 0 1
 371: PUSH
 372: LD_INT 22
 374: PUSH
 375: LD_INT 1
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PUSH
 382: LD_INT 30
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PPUSH
 396: CALL_OW 69
 400: PUSH
 401: FOR_IN
 402: IFFALSE 426
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 404: LD_VAR 0 1
 408: PPUSH
 409: CALL_OW 274
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 401
 426: POP
 427: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 428: LD_ADDR_VAR 0 1
 432: PUSH
 433: LD_INT 22
 435: PUSH
 436: LD_INT 1
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PUSH
 443: LD_INT 30
 445: PUSH
 446: LD_INT 0
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PPUSH
 457: CALL_OW 69
 461: PUSH
 462: FOR_IN
 463: IFFALSE 487
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_INT 2
 477: PPUSH
 478: LD_INT 9999
 480: PPUSH
 481: CALL_OW 277
 485: GO 462
 487: POP
 488: POP
// if IsSelected ( rudepo ) then
 489: LD_INT 2
 491: PPUSH
 492: CALL_OW 306
 496: IFFALSE 506
// your_side = 3 ;
 498: LD_ADDR_OWVAR 2
 502: PUSH
 503: LD_INT 3
 505: ST_TO_ADDR
// if IsSelected ( JMM ) then
 506: LD_EXP 1
 510: PPUSH
 511: CALL_OW 306
 515: IFFALSE 525
// your_side = 1 ;
 517: LD_ADDR_OWVAR 2
 521: PUSH
 522: LD_INT 1
 524: ST_TO_ADDR
// end ;
 525: PPOPN 1
 527: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 528: LD_INT 22
 530: PUSH
 531: LD_INT 1
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PUSH
 538: LD_INT 34
 540: PUSH
 541: LD_INT 12
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PPUSH
 552: CALL_OW 69
 556: PUSH
 557: LD_INT 3
 559: GREATEREQUAL
 560: IFFALSE 572
 562: GO 564
 564: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 565: LD_STRING ACH_FULLCARGO
 567: PPUSH
 568: CALL_OW 543
 572: END
// export function PrepareHeroes ; var veh ; begin
 573: LD_INT 0
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// uc_nation = 1 ;
 585: LD_ADDR_OWVAR 21
 589: PUSH
 590: LD_INT 1
 592: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 593: LD_ADDR_EXP 1
 597: PUSH
 598: LD_STRING JMM
 600: PPUSH
 601: LD_INT 1
 603: PPUSH
 604: CALL 5922 0 2
 608: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 609: LD_ADDR_EXP 14
 613: PUSH
 614: LD_STRING Harisson
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL 5922 0 2
 624: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 625: LD_ADDR_EXP 10
 629: PUSH
 630: LD_STRING DeltaDoctor
 632: PPUSH
 633: CALL_OW 34
 637: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 638: LD_ADDR_VAR 0 2
 642: PUSH
 643: LD_INT 22
 645: PUSH
 646: LD_INT 1
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PUSH
 653: LD_INT 21
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 58
 665: PUSH
 666: EMPTY
 667: LIST
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: PPUSH
 674: CALL_OW 69
 678: ST_TO_ADDR
// if veh > 0 then
 679: LD_VAR 0 2
 683: PUSH
 684: LD_INT 0
 686: GREATER
 687: IFFALSE 709
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 689: LD_EXP 1
 693: PPUSH
 694: LD_VAR 0 2
 698: PUSH
 699: LD_INT 1
 701: ARRAY
 702: PPUSH
 703: CALL_OW 52
// end else
 707: GO 724
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_INT 2
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 724: LD_STRING LisaIn06
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 30
 734: PUSH
 735: LD_INT 1
 737: EQUAL
 738: IFFALSE 842
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 740: LD_ADDR_VAR 0 2
 744: PUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: LD_INT 2
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 58
 767: PUSH
 768: EMPTY
 769: LIST
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PPUSH
 776: CALL_OW 69
 780: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 781: LD_ADDR_EXP 2
 785: PUSH
 786: LD_STRING Lisa
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: CALL 5922 0 2
 796: ST_TO_ADDR
// if veh > 0 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_INT 0
 804: GREATER
 805: IFFALSE 827
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_VAR 0 2
 816: PUSH
 817: LD_INT 1
 819: ARRAY
 820: PPUSH
 821: CALL_OW 52
// end else
 825: GO 842
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 827: LD_EXP 2
 831: PPUSH
 832: LD_INT 2
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 842: LD_STRING BobbyIn06
 844: PPUSH
 845: LD_INT 0
 847: PPUSH
 848: CALL_OW 30
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: IFFALSE 960
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 858: LD_ADDR_VAR 0 2
 862: PUSH
 863: LD_INT 22
 865: PUSH
 866: LD_INT 1
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PUSH
 873: LD_INT 21
 875: PUSH
 876: LD_INT 2
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 58
 885: PUSH
 886: EMPTY
 887: LIST
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: LIST
 893: PPUSH
 894: CALL_OW 69
 898: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 899: LD_ADDR_EXP 3
 903: PUSH
 904: LD_STRING Bobby
 906: PPUSH
 907: LD_INT 1
 909: PPUSH
 910: CALL 5922 0 2
 914: ST_TO_ADDR
// if veh > 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 0
 922: GREATER
 923: IFFALSE 945
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 925: LD_EXP 3
 929: PPUSH
 930: LD_VAR 0 2
 934: PUSH
 935: LD_INT 1
 937: ARRAY
 938: PPUSH
 939: CALL_OW 52
// end else
 943: GO 960
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 945: LD_EXP 3
 949: PPUSH
 950: LD_INT 2
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 960: LD_STRING CyrusIn06
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 30
 970: PUSH
 971: LD_INT 1
 973: EQUAL
 974: IFFALSE 1078
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 976: LD_ADDR_VAR 0 2
 980: PUSH
 981: LD_INT 22
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 21
 993: PUSH
 994: LD_INT 2
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 58
1003: PUSH
1004: EMPTY
1005: LIST
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PPUSH
1012: CALL_OW 69
1016: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
1017: LD_ADDR_EXP 4
1021: PUSH
1022: LD_STRING Cyrus
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: CALL 5922 0 2
1032: ST_TO_ADDR
// if veh > 0 then
1033: LD_VAR 0 2
1037: PUSH
1038: LD_INT 0
1040: GREATER
1041: IFFALSE 1063
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1043: LD_EXP 4
1047: PPUSH
1048: LD_VAR 0 2
1052: PUSH
1053: LD_INT 1
1055: ARRAY
1056: PPUSH
1057: CALL_OW 52
// end else
1061: GO 1078
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1063: LD_EXP 4
1067: PPUSH
1068: LD_INT 2
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1078: LD_STRING FrankIn06
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1196
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1094: LD_ADDR_VAR 0 2
1098: PUSH
1099: LD_INT 22
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 21
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 58
1121: PUSH
1122: EMPTY
1123: LIST
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: PPUSH
1130: CALL_OW 69
1134: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1135: LD_ADDR_EXP 5
1139: PUSH
1140: LD_STRING Frank
1142: PPUSH
1143: LD_INT 1
1145: PPUSH
1146: CALL 5922 0 2
1150: ST_TO_ADDR
// if veh > 0 then
1151: LD_VAR 0 2
1155: PUSH
1156: LD_INT 0
1158: GREATER
1159: IFFALSE 1181
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1161: LD_EXP 5
1165: PPUSH
1166: LD_VAR 0 2
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: PPUSH
1175: CALL_OW 52
// end else
1179: GO 1196
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1181: LD_EXP 5
1185: PPUSH
1186: LD_INT 2
1188: PPUSH
1189: LD_INT 0
1191: PPUSH
1192: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1196: LD_STRING BrownIn06
1198: PPUSH
1199: LD_INT 0
1201: PPUSH
1202: CALL_OW 30
1206: PUSH
1207: LD_INT 1
1209: EQUAL
1210: IFFALSE 1314
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1212: LD_ADDR_VAR 0 2
1216: PUSH
1217: LD_INT 22
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 21
1229: PUSH
1230: LD_INT 2
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PUSH
1237: LD_INT 58
1239: PUSH
1240: EMPTY
1241: LIST
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: LIST
1247: PPUSH
1248: CALL_OW 69
1252: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1253: LD_ADDR_EXP 6
1257: PUSH
1258: LD_STRING Brown
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL 5922 0 2
1268: ST_TO_ADDR
// if veh > 0 then
1269: LD_VAR 0 2
1273: PUSH
1274: LD_INT 0
1276: GREATER
1277: IFFALSE 1299
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1279: LD_EXP 6
1283: PPUSH
1284: LD_VAR 0 2
1288: PUSH
1289: LD_INT 1
1291: ARRAY
1292: PPUSH
1293: CALL_OW 52
// end else
1297: GO 1314
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1299: LD_EXP 6
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1314: LD_STRING DonaldsonIn06
1316: PPUSH
1317: LD_INT 0
1319: PPUSH
1320: CALL_OW 30
1324: PUSH
1325: LD_INT 1
1327: EQUAL
1328: IFFALSE 1432
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1330: LD_ADDR_VAR 0 2
1334: PUSH
1335: LD_INT 22
1337: PUSH
1338: LD_INT 1
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: PUSH
1345: LD_INT 21
1347: PUSH
1348: LD_INT 2
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: LD_INT 58
1357: PUSH
1358: EMPTY
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: PPUSH
1366: CALL_OW 69
1370: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1371: LD_ADDR_EXP 7
1375: PUSH
1376: LD_STRING Donaldson
1378: PPUSH
1379: LD_INT 1
1381: PPUSH
1382: CALL 5922 0 2
1386: ST_TO_ADDR
// if veh > 0 then
1387: LD_VAR 0 2
1391: PUSH
1392: LD_INT 0
1394: GREATER
1395: IFFALSE 1417
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1397: LD_EXP 7
1401: PPUSH
1402: LD_VAR 0 2
1406: PUSH
1407: LD_INT 1
1409: ARRAY
1410: PPUSH
1411: CALL_OW 52
// end else
1415: GO 1432
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1417: LD_EXP 7
1421: PPUSH
1422: LD_INT 2
1424: PPUSH
1425: LD_INT 0
1427: PPUSH
1428: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1432: LD_STRING GladstoneIn06
1434: PPUSH
1435: LD_INT 0
1437: PPUSH
1438: CALL_OW 30
1442: PUSH
1443: LD_INT 1
1445: EQUAL
1446: IFFALSE 1550
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1448: LD_ADDR_VAR 0 2
1452: PUSH
1453: LD_INT 22
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: LD_INT 21
1465: PUSH
1466: LD_INT 2
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 58
1475: PUSH
1476: EMPTY
1477: LIST
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: LIST
1483: PPUSH
1484: CALL_OW 69
1488: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1489: LD_ADDR_EXP 8
1493: PUSH
1494: LD_STRING Gladstone
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: CALL 5922 0 2
1504: ST_TO_ADDR
// if veh > 0 then
1505: LD_VAR 0 2
1509: PUSH
1510: LD_INT 0
1512: GREATER
1513: IFFALSE 1535
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1515: LD_EXP 8
1519: PPUSH
1520: LD_VAR 0 2
1524: PUSH
1525: LD_INT 1
1527: ARRAY
1528: PPUSH
1529: CALL_OW 52
// end else
1533: GO 1550
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1535: LD_EXP 8
1539: PPUSH
1540: LD_INT 2
1542: PPUSH
1543: LD_INT 0
1545: PPUSH
1546: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1550: LD_INT 66
1552: PPUSH
1553: LD_INT 4
1555: PPUSH
1556: CALL_OW 86
// end ;
1560: LD_VAR 0 1
1564: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1565: LD_INT 0
1567: PPUSH
1568: PPUSH
1569: PPUSH
1570: PPUSH
1571: PPUSH
1572: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1573: LD_ADDR_VAR 0 5
1577: PUSH
1578: LD_STRING 06_VehiclesIn06_1
1580: PPUSH
1581: EMPTY
1582: PPUSH
1583: CALL_OW 30
1587: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1588: LD_ADDR_EXP 40
1592: PUSH
1593: LD_STRING 06_ResourcesInCargo06_1
1595: PPUSH
1596: EMPTY
1597: PPUSH
1598: CALL_OW 30
1602: ST_TO_ADDR
// cargoList = [ ] ;
1603: LD_ADDR_VAR 0 6
1607: PUSH
1608: EMPTY
1609: ST_TO_ADDR
// uc_side = 1 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 1
1617: ST_TO_ADDR
// if vehicles > 0 then
1618: LD_VAR 0 5
1622: PUSH
1623: LD_INT 0
1625: GREATER
1626: IFFALSE 1981
// begin for i := 1 to vehicles do
1628: LD_ADDR_VAR 0 2
1632: PUSH
1633: DOUBLE
1634: LD_INT 1
1636: DEC
1637: ST_TO_ADDR
1638: LD_VAR 0 5
1642: PUSH
1643: FOR_TO
1644: IFFALSE 1793
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1646: LD_ADDR_OWVAR 21
1650: PUSH
1651: LD_VAR 0 5
1655: PUSH
1656: LD_VAR 0 2
1660: ARRAY
1661: PUSH
1662: LD_INT 1
1664: ARRAY
1665: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1666: LD_ADDR_OWVAR 37
1670: PUSH
1671: LD_VAR 0 5
1675: PUSH
1676: LD_VAR 0 2
1680: ARRAY
1681: PUSH
1682: LD_INT 2
1684: ARRAY
1685: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1686: LD_ADDR_OWVAR 39
1690: PUSH
1691: LD_VAR 0 5
1695: PUSH
1696: LD_VAR 0 2
1700: ARRAY
1701: PUSH
1702: LD_INT 3
1704: ARRAY
1705: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1706: LD_ADDR_OWVAR 38
1710: PUSH
1711: LD_VAR 0 5
1715: PUSH
1716: LD_VAR 0 2
1720: ARRAY
1721: PUSH
1722: LD_INT 4
1724: ARRAY
1725: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1726: LD_ADDR_OWVAR 40
1730: PUSH
1731: LD_VAR 0 5
1735: PUSH
1736: LD_VAR 0 2
1740: ARRAY
1741: PUSH
1742: LD_INT 5
1744: ARRAY
1745: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1746: LD_ADDR_OWVAR 41
1750: PUSH
1751: LD_INT 40
1753: ST_TO_ADDR
// veh = CreateVehicle ;
1754: LD_ADDR_VAR 0 4
1758: PUSH
1759: CALL_OW 45
1763: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_INT 3
1771: PPUSH
1772: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1776: LD_VAR 0 4
1780: PPUSH
1781: LD_INT 2
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 49
// end ;
1791: GO 1643
1793: POP
1794: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1795: LD_ADDR_VAR 0 6
1799: PUSH
1800: LD_INT 22
1802: PUSH
1803: LD_INT 1
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 21
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PUSH
1820: LD_INT 34
1822: PUSH
1823: LD_INT 12
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PPUSH
1835: CALL_OW 69
1839: ST_TO_ADDR
// if cargoList > 0 then
1840: LD_VAR 0 6
1844: PUSH
1845: LD_INT 0
1847: GREATER
1848: IFFALSE 1981
// for i = 1 to cargoList do
1850: LD_ADDR_VAR 0 2
1854: PUSH
1855: DOUBLE
1856: LD_INT 1
1858: DEC
1859: ST_TO_ADDR
1860: LD_VAR 0 6
1864: PUSH
1865: FOR_TO
1866: IFFALSE 1979
// begin if resources > 0 then
1868: LD_EXP 40
1872: PUSH
1873: LD_INT 0
1875: GREATER
1876: IFFALSE 1977
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1878: LD_VAR 0 6
1882: PUSH
1883: LD_VAR 0 2
1887: ARRAY
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: LD_EXP 40
1896: PUSH
1897: LD_VAR 0 2
1901: ARRAY
1902: PUSH
1903: LD_INT 1
1905: ARRAY
1906: PPUSH
1907: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1911: LD_VAR 0 6
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PPUSH
1922: LD_INT 2
1924: PPUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_VAR 0 2
1934: ARRAY
1935: PUSH
1936: LD_INT 2
1938: ARRAY
1939: PPUSH
1940: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1944: LD_VAR 0 6
1948: PUSH
1949: LD_VAR 0 2
1953: ARRAY
1954: PPUSH
1955: LD_INT 3
1957: PPUSH
1958: LD_EXP 40
1962: PUSH
1963: LD_VAR 0 2
1967: ARRAY
1968: PUSH
1969: LD_INT 3
1971: ARRAY
1972: PPUSH
1973: CALL_OW 291
// end ; end ;
1977: GO 1865
1979: POP
1980: POP
// end ; end ;
1981: LD_VAR 0 1
1985: RET
// export function PrepareOthers ; var i , veh ; begin
1986: LD_INT 0
1988: PPUSH
1989: PPUSH
1990: PPUSH
// uc_side = 1 ;
1991: LD_ADDR_OWVAR 20
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// uc_nation = 1 ;
1999: LD_ADDR_OWVAR 21
2003: PUSH
2004: LD_INT 1
2006: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2007: LD_ADDR_EXP 11
2011: PUSH
2012: LD_STRING OthersIn06
2014: PPUSH
2015: CALL_OW 31
2019: ST_TO_ADDR
// for i in others do
2020: LD_ADDR_VAR 0 2
2024: PUSH
2025: LD_EXP 11
2029: PUSH
2030: FOR_IN
2031: IFFALSE 2121
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2033: LD_ADDR_VAR 0 3
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 1
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 21
2050: PUSH
2051: LD_INT 2
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 58
2060: PUSH
2061: EMPTY
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: PPUSH
2069: CALL_OW 69
2073: ST_TO_ADDR
// if veh > 0 then
2074: LD_VAR 0 3
2078: PUSH
2079: LD_INT 0
2081: GREATER
2082: IFFALSE 2104
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2084: LD_VAR 0 2
2088: PPUSH
2089: LD_VAR 0 3
2093: PUSH
2094: LD_INT 1
2096: ARRAY
2097: PPUSH
2098: CALL_OW 52
// end else
2102: GO 2119
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2104: LD_VAR 0 2
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 0
2114: PPUSH
2115: CALL_OW 49
// end ; end ;
2119: GO 2030
2121: POP
2122: POP
// end ;
2123: LD_VAR 0 1
2127: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2128: LD_INT 0
2130: PPUSH
2131: PPUSH
2132: PPUSH
// uc_side = 1 ;
2133: LD_ADDR_OWVAR 20
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// uc_nation = 0 ;
2141: LD_ADDR_OWVAR 21
2145: PUSH
2146: LD_INT 0
2148: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2149: LD_ADDR_EXP 12
2153: PUSH
2154: LD_STRING ApeIn06
2156: PPUSH
2157: CALL_OW 31
2161: ST_TO_ADDR
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side = 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation = 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: CALL 5922 0 2
2330: ST_TO_ADDR
// for i = 1 to xy do
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: DOUBLE
2337: LD_INT 1
2339: DEC
2340: ST_TO_ADDR
2341: LD_VAR 0 2
2345: PUSH
2346: FOR_TO
2347: IFFALSE 2446
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2349: LD_VAR 0 2
2353: PUSH
2354: LD_VAR 0 3
2358: ARRAY
2359: PUSH
2360: LD_INT 1
2362: ARRAY
2363: PPUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_VAR 0 3
2373: ARRAY
2374: PUSH
2375: LD_INT 2
2377: ARRAY
2378: PPUSH
2379: CALL_OW 428
2383: PUSH
2384: LD_INT 0
2386: EQUAL
2387: IFFALSE 2444
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2389: LD_EXP 9
2393: PPUSH
2394: LD_VAR 0 2
2398: PUSH
2399: LD_VAR 0 3
2403: ARRAY
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: PPUSH
2409: LD_VAR 0 2
2413: PUSH
2414: LD_VAR 0 3
2418: ARRAY
2419: PUSH
2420: LD_INT 2
2422: ARRAY
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 48
// if IsPlaced ( Denis ) then
2431: LD_EXP 9
2435: PPUSH
2436: CALL_OW 305
2440: IFFALSE 2444
// break ;
2442: GO 2446
// end ;
2444: GO 2346
2446: POP
2447: POP
// SetClass ( Denis , 4 ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_INT 4
2455: PPUSH
2456: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2460: LD_EXP 9
2464: PPUSH
2465: LD_INT 750
2467: PPUSH
2468: CALL_OW 234
// end ;
2472: LD_VAR 0 1
2476: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2477: LD_INT 0
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
// area := HarrisonSupportArea ;
2484: LD_ADDR_VAR 0 4
2488: PUSH
2489: LD_INT 3
2491: ST_TO_ADDR
// dir := 2 ;
2492: LD_ADDR_VAR 0 5
2496: PUSH
2497: LD_INT 2
2499: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2500: LD_VAR 0 4
2504: PPUSH
2505: LD_INT 21
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PPUSH
2515: CALL_OW 70
2519: IFFALSE 2537
// begin area := HarrisonSupportArea2 ;
2521: LD_ADDR_VAR 0 4
2525: PUSH
2526: LD_INT 31
2528: ST_TO_ADDR
// dir := 1 ;
2529: LD_ADDR_VAR 0 5
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// end ; uc_side = 1 ;
2537: LD_ADDR_OWVAR 20
2541: PUSH
2542: LD_INT 1
2544: ST_TO_ADDR
// uc_nation = 1 ;
2545: LD_ADDR_OWVAR 21
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// vc_engine = 1 ;
2553: LD_ADDR_OWVAR 39
2557: PUSH
2558: LD_INT 1
2560: ST_TO_ADDR
// vc_control = 1 ;
2561: LD_ADDR_OWVAR 38
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2569: LD_ADDR_OWVAR 40
2573: PUSH
2574: LD_INT 4
2576: PUSH
2577: LD_INT 4
2579: PUSH
2580: LD_INT 2
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_OWVAR 67
2592: ARRAY
2593: ST_TO_ADDR
// vc_chassis = 2 ;
2594: LD_ADDR_OWVAR 37
2598: PUSH
2599: LD_INT 2
2601: ST_TO_ADDR
// veh = CreateVehicle ;
2602: LD_ADDR_VAR 0 3
2606: PUSH
2607: CALL_OW 45
2611: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2612: LD_VAR 0 3
2616: PPUSH
2617: LD_VAR 0 5
2621: PPUSH
2622: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2626: LD_VAR 0 3
2630: PPUSH
2631: LD_VAR 0 4
2635: PPUSH
2636: LD_INT 0
2638: PPUSH
2639: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2643: LD_VAR 0 3
2647: PPUSH
2648: LD_INT 50
2650: PPUSH
2651: CALL_OW 240
// hc_class := 2 ;
2655: LD_ADDR_OWVAR 28
2659: PUSH
2660: LD_INT 2
2662: ST_TO_ADDR
// hc_sex := sex_male ;
2663: LD_ADDR_OWVAR 27
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2671: LD_ADDR_OWVAR 33
2675: PUSH
2676: LD_STRING SecondCharsGal
2678: ST_TO_ADDR
// hc_face_number := 52 ;
2679: LD_ADDR_OWVAR 34
2683: PUSH
2684: LD_INT 52
2686: ST_TO_ADDR
// hc_name := Craig Brown ;
2687: LD_ADDR_OWVAR 26
2691: PUSH
2692: LD_STRING Craig Brown
2694: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2695: LD_ADDR_OWVAR 29
2699: PUSH
2700: LD_INT 10
2702: PUSH
2703: LD_INT 10
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2710: LD_ADDR_OWVAR 30
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: LD_INT 2
2720: PUSH
2721: LD_INT 0
2723: PUSH
2724: LD_INT 0
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2733: LD_ADDR_OWVAR 31
2737: PUSH
2738: LD_INT 2
2740: PUSH
2741: LD_INT 3
2743: PUSH
2744: LD_INT 0
2746: PUSH
2747: LD_INT 0
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2756: LD_ADDR_EXP 17
2760: PUSH
2761: CALL_OW 44
2765: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2766: LD_EXP 17
2770: PPUSH
2771: LD_VAR 0 3
2775: PPUSH
2776: CALL_OW 52
// vc_engine = 1 ;
2780: LD_ADDR_OWVAR 39
2784: PUSH
2785: LD_INT 1
2787: ST_TO_ADDR
// vc_control = 1 ;
2788: LD_ADDR_OWVAR 38
2792: PUSH
2793: LD_INT 1
2795: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2796: LD_ADDR_OWVAR 40
2800: PUSH
2801: LD_INT 3
2803: ST_TO_ADDR
// vc_chassis = 2 ;
2804: LD_ADDR_OWVAR 37
2808: PUSH
2809: LD_INT 2
2811: ST_TO_ADDR
// veh = CreateVehicle ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 45
2821: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2822: LD_VAR 0 3
2826: PPUSH
2827: LD_VAR 0 5
2831: PPUSH
2832: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2836: LD_VAR 0 3
2840: PPUSH
2841: LD_VAR 0 4
2845: PPUSH
2846: LD_INT 0
2848: PPUSH
2849: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2853: LD_VAR 0 3
2857: PPUSH
2858: LD_INT 50
2860: PPUSH
2861: CALL_OW 240
// hc_class := 1 ;
2865: LD_ADDR_OWVAR 28
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// hc_sex := sex_female ;
2873: LD_ADDR_OWVAR 27
2877: PUSH
2878: LD_INT 2
2880: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2881: LD_ADDR_OWVAR 33
2885: PUSH
2886: LD_STRING SecondCharsGal
2888: ST_TO_ADDR
// hc_face_number := 45 ;
2889: LD_ADDR_OWVAR 34
2893: PUSH
2894: LD_INT 45
2896: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2897: LD_ADDR_OWVAR 29
2901: PUSH
2902: LD_INT 11
2904: PUSH
2905: LD_INT 10
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2912: LD_ADDR_OWVAR 26
2916: PUSH
2917: LD_STRING Ingrid Jonsson
2919: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2920: LD_ADDR_OWVAR 30
2924: PUSH
2925: LD_INT 1
2927: PUSH
2928: LD_INT 1
2930: PUSH
2931: LD_INT 0
2933: PUSH
2934: LD_INT 0
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2943: LD_ADDR_OWVAR 31
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 1
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: LD_INT 0
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: LIST
2964: LIST
2965: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2966: LD_ADDR_EXP 18
2970: PUSH
2971: CALL_OW 44
2975: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2976: LD_EXP 18
2980: PPUSH
2981: LD_VAR 0 3
2985: PPUSH
2986: CALL_OW 52
// end ;
2990: LD_VAR 0 1
2994: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2995: LD_INT 0
2997: PPUSH
2998: PPUSH
2999: PPUSH
3000: PPUSH
3001: PPUSH
// j = 0 ;
3002: LD_ADDR_VAR 0 3
3006: PUSH
3007: LD_INT 0
3009: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3010: LD_INT 35
3012: PPUSH
3013: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
3017: LD_ADDR_VAR 0 2
3021: PUSH
3022: LD_INT 22
3024: PUSH
3025: LD_INT 1
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 21
3034: PUSH
3035: LD_INT 1
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 26
3044: PUSH
3045: LD_INT 1
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PUSH
3052: LD_INT 2
3054: PUSH
3055: LD_INT 25
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 25
3067: PUSH
3068: LD_INT 2
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: LD_INT 25
3077: PUSH
3078: LD_INT 3
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: PUSH
3085: LD_INT 25
3087: PUSH
3088: LD_INT 4
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: PPUSH
3108: CALL_OW 69
3112: PUSH
3113: FOR_IN
3114: IFFALSE 3240
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3116: LD_INT 22
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 2
3128: PUSH
3129: LD_INT 21
3131: PUSH
3132: LD_INT 1
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: PUSH
3139: LD_INT 21
3141: PUSH
3142: LD_INT 2
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: LD_INT 21
3151: PUSH
3152: LD_INT 3
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: LD_INT 59
3161: PUSH
3162: EMPTY
3163: LIST
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 91
3174: PUSH
3175: LD_VAR 0 2
3179: PUSH
3180: LD_INT 25
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: LIST
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PPUSH
3193: CALL_OW 69
3197: NOT
3198: PUSH
3199: LD_VAR 0 2
3203: PPUSH
3204: LD_EXP 1
3208: PPUSH
3209: CALL_OW 296
3213: PUSH
3214: LD_INT 15
3216: LESS
3217: AND
3218: IFFALSE 3238
// begin tmp = i ;
3220: LD_ADDR_VAR 0 4
3224: PUSH
3225: LD_VAR 0 2
3229: ST_TO_ADDR
// j = 1 ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_INT 1
3237: ST_TO_ADDR
// end ; end ;
3238: GO 3113
3240: POP
3241: POP
// until j = 1 ;
3242: LD_VAR 0 3
3246: PUSH
3247: LD_INT 1
3249: EQUAL
3250: IFFALSE 3010
// blockSpawn = 1 ;
3252: LD_ADDR_EXP 29
3256: PUSH
3257: LD_INT 1
3259: ST_TO_ADDR
// uc_side = 4 ;
3260: LD_ADDR_OWVAR 20
3264: PUSH
3265: LD_INT 4
3267: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3268: LD_ADDR_EXP 15
3272: PUSH
3273: LD_STRING Joan
3275: PPUSH
3276: LD_INT 0
3278: PPUSH
3279: CALL 5922 0 2
3283: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3284: LD_EXP 15
3288: PPUSH
3289: LD_VAR 0 4
3293: PPUSH
3294: CALL_OW 250
3298: PPUSH
3299: LD_VAR 0 4
3303: PPUSH
3304: CALL_OW 251
3308: PPUSH
3309: LD_INT 5
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3319: LD_EXP 15
3323: PPUSH
3324: LD_INT 250
3326: PPUSH
3327: CALL_OW 234
// InGameOn ;
3331: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3335: LD_EXP 15
3339: PPUSH
3340: CALL_OW 87
// wait ( 0 0$2 ) ;
3344: LD_INT 70
3346: PPUSH
3347: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3351: LD_VAR 0 4
3355: PPUSH
3356: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3360: LD_VAR 0 4
3364: PPUSH
3365: CALL_OW 122
// wait ( 0 0$1 ) ;
3369: LD_INT 35
3371: PPUSH
3372: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3376: LD_VAR 0 4
3380: PPUSH
3381: LD_EXP 15
3385: PPUSH
3386: CALL_OW 112
// wait ( 0 0$2 ) ;
3390: LD_INT 70
3392: PPUSH
3393: CALL_OW 67
// DialogueOn ;
3397: CALL_OW 6
// if tmp = JMM then
3401: LD_VAR 0 4
3405: PUSH
3406: LD_EXP 1
3410: EQUAL
3411: IFFALSE 3560
// begin ComTurnUnit ( JMM , Joan ) ;
3413: LD_EXP 1
3417: PPUSH
3418: LD_EXP 15
3422: PPUSH
3423: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3427: LD_EXP 1
3431: PPUSH
3432: LD_STRING D5b-JMM-1
3434: PPUSH
3435: CALL_OW 88
// DialogueOff ;
3439: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3443: LD_EXP 15
3447: PPUSH
3448: LD_INT 500
3450: PPUSH
3451: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3455: LD_EXP 15
3459: PPUSH
3460: LD_EXP 1
3464: PPUSH
3465: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3469: LD_EXP 1
3473: PPUSH
3474: LD_EXP 15
3478: PPUSH
3479: CALL_OW 119
// wait ( 0 0$1 ) ;
3483: LD_INT 35
3485: PPUSH
3486: CALL_OW 67
// DialogueOn ;
3490: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3494: LD_EXP 15
3498: PPUSH
3499: LD_STRING D5b-Joan-1
3501: PPUSH
3502: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3506: LD_EXP 1
3510: PPUSH
3511: LD_STRING D5b-JMM-2
3513: PPUSH
3514: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3518: LD_EXP 15
3522: PPUSH
3523: LD_STRING D5b-Joan-2
3525: PPUSH
3526: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3530: LD_EXP 1
3534: PPUSH
3535: LD_STRING D5b-JMM-3
3537: PPUSH
3538: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3542: LD_EXP 15
3546: PPUSH
3547: LD_STRING D5b-Joan-3
3549: PPUSH
3550: CALL_OW 88
// DialogueOff ;
3554: CALL_OW 7
// end else
3558: GO 3895
// begin ComTurnUnit ( tmp , Joan ) ;
3560: LD_VAR 0 4
3564: PPUSH
3565: LD_EXP 15
3569: PPUSH
3570: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3574: LD_VAR 0 4
3578: PPUSH
3579: LD_STRING D5a-Sol1-1
3581: PPUSH
3582: CALL_OW 88
// DialogueOff ;
3586: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3590: LD_EXP 15
3594: PPUSH
3595: LD_INT 500
3597: PPUSH
3598: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3602: LD_EXP 15
3606: PPUSH
3607: LD_VAR 0 4
3611: PPUSH
3612: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3616: LD_VAR 0 4
3620: PPUSH
3621: LD_EXP 15
3625: PPUSH
3626: CALL_OW 119
// wait ( 0 0$1 ) ;
3630: LD_INT 35
3632: PPUSH
3633: CALL_OW 67
// DialogueOn ;
3637: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3641: LD_EXP 15
3645: PPUSH
3646: LD_STRING D5a-Joan-1
3648: PPUSH
3649: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3653: LD_VAR 0 4
3657: PPUSH
3658: LD_STRING D5a-Sol1-2
3660: PPUSH
3661: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3665: LD_EXP 15
3669: PPUSH
3670: LD_STRING D5a-Joan-2
3672: PPUSH
3673: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3677: LD_VAR 0 4
3681: PPUSH
3682: LD_STRING D5a-Sol1-3
3684: PPUSH
3685: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3689: LD_EXP 15
3693: PPUSH
3694: LD_STRING D5a-Joan-3
3696: PPUSH
3697: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3701: LD_VAR 0 4
3705: PPUSH
3706: LD_STRING D5a-Sol1-4
3708: PPUSH
3709: CALL_OW 88
// DialogueOff ;
3713: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3717: LD_EXP 1
3721: PPUSH
3722: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3726: LD_EXP 1
3730: PPUSH
3731: CALL_OW 122
// wait ( 0 0$1 ) ;
3735: LD_INT 35
3737: PPUSH
3738: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3742: LD_INT 35
3744: PPUSH
3745: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3749: LD_EXP 15
3753: PUSH
3754: LD_VAR 0 4
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PPUSH
3763: LD_EXP 1
3767: PPUSH
3768: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3772: LD_EXP 15
3776: PPUSH
3777: LD_EXP 1
3781: PPUSH
3782: CALL_OW 296
3786: PUSH
3787: LD_INT 5
3789: LESS
3790: IFFALSE 3742
// ComTurnUnit ( Joan , JMM ) ;
3792: LD_EXP 15
3796: PPUSH
3797: LD_EXP 1
3801: PPUSH
3802: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3806: LD_EXP 1
3810: PPUSH
3811: LD_EXP 15
3815: PPUSH
3816: CALL_OW 119
// wait ( 0 0$1 ) ;
3820: LD_INT 35
3822: PPUSH
3823: CALL_OW 67
// DialogueOn ;
3827: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3831: LD_EXP 15
3835: PPUSH
3836: LD_STRING D5a-Joan-4
3838: PPUSH
3839: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3843: LD_EXP 1
3847: PPUSH
3848: LD_STRING D5a-JMM-4
3850: PPUSH
3851: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3855: LD_EXP 15
3859: PPUSH
3860: LD_STRING D5a-Joan-5
3862: PPUSH
3863: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3867: LD_EXP 1
3871: PPUSH
3872: LD_STRING D5a-JMM-5
3874: PPUSH
3875: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3879: LD_EXP 15
3883: PPUSH
3884: LD_STRING D5a-Joan-6
3886: PPUSH
3887: CALL_OW 88
// DialogueOff ;
3891: CALL_OW 7
// end ; DialogueOn ;
3895: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3899: LD_EXP 1
3903: PPUSH
3904: LD_STRING D6-JMM-1
3906: PPUSH
3907: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3911: LD_EXP 15
3915: PPUSH
3916: LD_STRING D6-Joan-1
3918: PPUSH
3919: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3923: LD_EXP 1
3927: PPUSH
3928: LD_STRING D6-JMM-2
3930: PPUSH
3931: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3935: LD_EXP 15
3939: PPUSH
3940: LD_STRING D6-Joan-2
3942: PPUSH
3943: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3947: LD_EXP 1
3951: PPUSH
3952: LD_STRING D6-JMM-3
3954: PPUSH
3955: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3959: LD_EXP 15
3963: PPUSH
3964: LD_STRING D6-Joan-3
3966: PPUSH
3967: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3971: LD_EXP 1
3975: PPUSH
3976: LD_STRING D6-JMM-4
3978: PPUSH
3979: CALL_OW 88
// DialogueOff ;
3983: CALL_OW 7
// InGameOff ;
3987: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3991: LD_EXP 15
3995: PPUSH
3996: LD_INT 1
3998: PPUSH
3999: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4003: LD_STRING MJ
4005: PPUSH
4006: CALL_OW 337
// JoanStatus = 1 ;
4010: LD_ADDR_EXP 16
4014: PUSH
4015: LD_INT 1
4017: ST_TO_ADDR
// blockSpawn = 0 ;
4018: LD_ADDR_EXP 29
4022: PUSH
4023: LD_INT 0
4025: ST_TO_ADDR
// end ;
4026: LD_VAR 0 1
4030: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4031: LD_INT 0
4033: PPUSH
4034: PPUSH
// repeat wait ( 0 0$7 ) ;
4035: LD_INT 245
4037: PPUSH
4038: CALL_OW 67
// until blockSpawn = 0 ;
4042: LD_EXP 29
4046: PUSH
4047: LD_INT 0
4049: EQUAL
4050: IFFALSE 4035
// uc_side = 1 ;
4052: LD_ADDR_OWVAR 20
4056: PUSH
4057: LD_INT 1
4059: ST_TO_ADDR
// uc_nation = 1 ;
4060: LD_ADDR_OWVAR 21
4064: PUSH
4065: LD_INT 1
4067: ST_TO_ADDR
// InitHc ;
4068: CALL_OW 19
// if number = 1 then
4072: LD_VAR 0 1
4076: PUSH
4077: LD_INT 1
4079: EQUAL
4080: IFFALSE 4256
// begin hc_class := 3 ;
4082: LD_ADDR_OWVAR 28
4086: PUSH
4087: LD_INT 3
4089: ST_TO_ADDR
// hc_sex := sex_male ;
4090: LD_ADDR_OWVAR 27
4094: PUSH
4095: LD_INT 1
4097: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4098: LD_ADDR_OWVAR 33
4102: PUSH
4103: LD_STRING SecondCharsGal
4105: ST_TO_ADDR
// hc_face_number := 55 ;
4106: LD_ADDR_OWVAR 34
4110: PUSH
4111: LD_INT 55
4113: ST_TO_ADDR
// hc_name := George McCarthy ;
4114: LD_ADDR_OWVAR 26
4118: PUSH
4119: LD_STRING George McCarthy
4121: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4122: LD_ADDR_OWVAR 29
4126: PUSH
4127: LD_INT 11
4129: PUSH
4130: LD_INT 10
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4137: LD_ADDR_OWVAR 30
4141: PUSH
4142: LD_INT 0
4144: PUSH
4145: LD_INT 0
4147: PUSH
4148: LD_INT 2
4150: PUSH
4151: LD_INT 0
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4160: LD_ADDR_OWVAR 31
4164: PUSH
4165: LD_INT 1
4167: PUSH
4168: LD_INT 2
4170: PUSH
4171: LD_INT 3
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: ST_TO_ADDR
// un = CreateHuman ;
4183: LD_ADDR_VAR 0 3
4187: PUSH
4188: CALL_OW 44
4192: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4193: LD_VAR 0 3
4197: PPUSH
4198: LD_INT 23
4200: PPUSH
4201: LD_INT 1
4203: PPUSH
4204: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4208: LD_VAR 0 3
4212: PPUSH
4213: CALL_OW 87
// wait ( 0 0$1 ) ;
4217: LD_INT 35
4219: PPUSH
4220: CALL_OW 67
// DialogueOn ;
4224: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4228: LD_VAR 0 3
4232: PPUSH
4233: LD_STRING D11d-Sol4-1
4235: PPUSH
4236: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4240: LD_EXP 1
4244: PPUSH
4245: LD_STRING D11d-JMM-1
4247: PPUSH
4248: CALL_OW 88
// DialogueOff ;
4252: CALL_OW 7
// end ; if number = 2 then
4256: LD_VAR 0 1
4260: PUSH
4261: LD_INT 2
4263: EQUAL
4264: IFFALSE 4440
// begin hc_class := 1 ;
4266: LD_ADDR_OWVAR 28
4270: PUSH
4271: LD_INT 1
4273: ST_TO_ADDR
// hc_sex := sex_male ;
4274: LD_ADDR_OWVAR 27
4278: PUSH
4279: LD_INT 1
4281: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4282: LD_ADDR_OWVAR 33
4286: PUSH
4287: LD_STRING AmGalRemake
4289: ST_TO_ADDR
// hc_face_number := 7 ;
4290: LD_ADDR_OWVAR 34
4294: PUSH
4295: LD_INT 7
4297: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4298: LD_ADDR_OWVAR 26
4302: PUSH
4303: LD_STRING Bobby Jordan
4305: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4306: LD_ADDR_OWVAR 29
4310: PUSH
4311: LD_INT 9
4313: PUSH
4314: LD_INT 11
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4321: LD_ADDR_OWVAR 30
4325: PUSH
4326: LD_INT 1
4328: PUSH
4329: LD_INT 0
4331: PUSH
4332: LD_INT 0
4334: PUSH
4335: LD_INT 1
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4344: LD_ADDR_OWVAR 31
4348: PUSH
4349: LD_INT 2
4351: PUSH
4352: LD_INT 1
4354: PUSH
4355: LD_INT 1
4357: PUSH
4358: LD_INT 1
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: ST_TO_ADDR
// un = CreateHuman ;
4367: LD_ADDR_VAR 0 3
4371: PUSH
4372: CALL_OW 44
4376: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4377: LD_VAR 0 3
4381: PPUSH
4382: LD_INT 24
4384: PPUSH
4385: LD_INT 1
4387: PPUSH
4388: CALL_OW 49
// wait ( 0 0$1 ) ;
4392: LD_INT 35
4394: PPUSH
4395: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: CALL_OW 87
// DialogueOn ;
4408: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4412: LD_VAR 0 3
4416: PPUSH
4417: LD_STRING D11b-Sol3-1
4419: PPUSH
4420: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4424: LD_EXP 1
4428: PPUSH
4429: LD_STRING D11b-JMM-1
4431: PPUSH
4432: CALL_OW 88
// DialogueOff ;
4436: CALL_OW 7
// end ; if number = 3 then
4440: LD_VAR 0 1
4444: PUSH
4445: LD_INT 3
4447: EQUAL
4448: IFFALSE 4612
// begin hc_class := 1 ;
4450: LD_ADDR_OWVAR 28
4454: PUSH
4455: LD_INT 1
4457: ST_TO_ADDR
// hc_sex := sex_male ;
4458: LD_ADDR_OWVAR 27
4462: PUSH
4463: LD_INT 1
4465: ST_TO_ADDR
// hc_gallery := DJ ;
4466: LD_ADDR_OWVAR 33
4470: PUSH
4471: LD_STRING DJ
4473: ST_TO_ADDR
// hc_face_number := 1 ;
4474: LD_ADDR_OWVAR 34
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// hc_name := Darius Dajay ;
4482: LD_ADDR_OWVAR 26
4486: PUSH
4487: LD_STRING Darius Dajay
4489: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4490: LD_ADDR_OWVAR 29
4494: PUSH
4495: LD_INT 11
4497: PUSH
4498: LD_INT 11
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4505: LD_ADDR_OWVAR 30
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 0
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4528: LD_ADDR_OWVAR 31
4532: PUSH
4533: LD_INT 4
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: LD_INT 1
4541: PUSH
4542: LD_INT 0
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: ST_TO_ADDR
// un = CreateHuman ;
4551: LD_ADDR_VAR 0 3
4555: PUSH
4556: CALL_OW 44
4560: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4561: LD_VAR 0 3
4565: PPUSH
4566: LD_INT 25
4568: PPUSH
4569: LD_INT 1
4571: PPUSH
4572: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4576: LD_VAR 0 3
4580: PPUSH
4581: CALL_OW 87
// wait ( 0 0$1 ) ;
4585: LD_INT 35
4587: PPUSH
4588: CALL_OW 67
// DialogueOn ;
4592: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4596: LD_VAR 0 3
4600: PPUSH
4601: LD_STRING D11f-Sol5-1
4603: PPUSH
4604: CALL_OW 88
// DialogueOff ;
4608: CALL_OW 7
// end ; if number = 4 then
4612: LD_VAR 0 1
4616: PUSH
4617: LD_INT 4
4619: EQUAL
4620: IFFALSE 4784
// begin hc_class := 3 ;
4622: LD_ADDR_OWVAR 28
4626: PUSH
4627: LD_INT 3
4629: ST_TO_ADDR
// hc_sex := sex_female ;
4630: LD_ADDR_OWVAR 27
4634: PUSH
4635: LD_INT 2
4637: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4638: LD_ADDR_OWVAR 33
4642: PUSH
4643: LD_STRING SecondCharsGal
4645: ST_TO_ADDR
// hc_face_number := 46 ;
4646: LD_ADDR_OWVAR 34
4650: PUSH
4651: LD_INT 46
4653: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4654: LD_ADDR_OWVAR 26
4658: PUSH
4659: LD_STRING Sylvia Creak
4661: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4662: LD_ADDR_OWVAR 29
4666: PUSH
4667: LD_INT 10
4669: PUSH
4670: LD_INT 9
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4677: LD_ADDR_OWVAR 30
4681: PUSH
4682: LD_INT 0
4684: PUSH
4685: LD_INT 1
4687: PUSH
4688: LD_INT 1
4690: PUSH
4691: LD_INT 1
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4700: LD_ADDR_OWVAR 31
4704: PUSH
4705: LD_INT 1
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: LD_INT 1
4713: PUSH
4714: LD_INT 1
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: ST_TO_ADDR
// un = CreateHuman ;
4723: LD_ADDR_VAR 0 3
4727: PUSH
4728: CALL_OW 44
4732: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4733: LD_VAR 0 3
4737: PPUSH
4738: LD_INT 26
4740: PPUSH
4741: LD_INT 1
4743: PPUSH
4744: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4748: LD_VAR 0 3
4752: PPUSH
4753: CALL_OW 87
// wait ( 0 0$1 ) ;
4757: LD_INT 35
4759: PPUSH
4760: CALL_OW 67
// DialogueOn ;
4764: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4768: LD_VAR 0 3
4772: PPUSH
4773: LD_STRING D11e-FSol4-1
4775: PPUSH
4776: CALL_OW 88
// DialogueOff ;
4780: CALL_OW 7
// end ; if number = 5 then
4784: LD_VAR 0 1
4788: PUSH
4789: LD_INT 5
4791: EQUAL
4792: IFFALSE 4968
// begin hc_class := 1 ;
4794: LD_ADDR_OWVAR 28
4798: PUSH
4799: LD_INT 1
4801: ST_TO_ADDR
// hc_sex := sex_female ;
4802: LD_ADDR_OWVAR 27
4806: PUSH
4807: LD_INT 2
4809: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4810: LD_ADDR_OWVAR 33
4814: PUSH
4815: LD_STRING SecondCharsGal
4817: ST_TO_ADDR
// hc_face_number := 37 ;
4818: LD_ADDR_OWVAR 34
4822: PUSH
4823: LD_INT 37
4825: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4826: LD_ADDR_OWVAR 26
4830: PUSH
4831: LD_STRING Margherite Simpson
4833: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4834: LD_ADDR_OWVAR 29
4838: PUSH
4839: LD_INT 11
4841: PUSH
4842: LD_INT 10
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4849: LD_ADDR_OWVAR 30
4853: PUSH
4854: LD_INT 1
4856: PUSH
4857: LD_INT 1
4859: PUSH
4860: LD_INT 0
4862: PUSH
4863: LD_INT 0
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4872: LD_ADDR_OWVAR 31
4876: PUSH
4877: LD_INT 1
4879: PUSH
4880: LD_INT 1
4882: PUSH
4883: LD_INT 1
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: ST_TO_ADDR
// un = CreateHuman ;
4895: LD_ADDR_VAR 0 3
4899: PUSH
4900: CALL_OW 44
4904: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4905: LD_VAR 0 3
4909: PPUSH
4910: LD_INT 27
4912: PPUSH
4913: LD_INT 1
4915: PPUSH
4916: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4920: LD_VAR 0 3
4924: PPUSH
4925: CALL_OW 87
// wait ( 0 0$1 ) ;
4929: LD_INT 35
4931: PPUSH
4932: CALL_OW 67
// DialogueOn ;
4936: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4940: LD_VAR 0 3
4944: PPUSH
4945: LD_STRING D11c-FSol3-1
4947: PPUSH
4948: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4952: LD_EXP 1
4956: PPUSH
4957: LD_STRING D11c-JMM-1
4959: PPUSH
4960: CALL_OW 88
// DialogueOff ;
4964: CALL_OW 7
// end ; if number = 6 then
4968: LD_VAR 0 1
4972: PUSH
4973: LD_INT 6
4975: EQUAL
4976: IFFALSE 5150
// begin hc_class := 1 ;
4978: LD_ADDR_OWVAR 28
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// hc_sex := sex_male ;
4986: LD_ADDR_OWVAR 27
4990: PUSH
4991: LD_INT 1
4993: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4994: LD_ADDR_OWVAR 33
4998: PUSH
4999: LD_STRING AmGalRemake
5001: ST_TO_ADDR
// hc_face_number := 1 ;
5002: LD_ADDR_OWVAR 34
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// hc_name := Charles Brown ;
5010: LD_ADDR_OWVAR 26
5014: PUSH
5015: LD_STRING Charles Brown
5017: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5018: LD_ADDR_OWVAR 29
5022: PUSH
5023: LD_INT 12
5025: PUSH
5026: LD_INT 11
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5033: LD_ADDR_OWVAR 30
5037: PUSH
5038: LD_INT 2
5040: PUSH
5041: LD_INT 0
5043: PUSH
5044: LD_INT 0
5046: PUSH
5047: LD_INT 0
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5056: LD_ADDR_OWVAR 31
5060: PUSH
5061: LD_INT 3
5063: PUSH
5064: LD_INT 0
5066: PUSH
5067: LD_INT 1
5069: PUSH
5070: LD_INT 1
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: ST_TO_ADDR
// un = CreateHuman ;
5079: LD_ADDR_VAR 0 3
5083: PUSH
5084: CALL_OW 44
5088: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5089: LD_VAR 0 3
5093: PPUSH
5094: LD_INT 28
5096: PPUSH
5097: LD_INT 1
5099: PPUSH
5100: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5104: LD_VAR 0 3
5108: PPUSH
5109: CALL_OW 87
// wait ( 0 0$1 ) ;
5113: LD_INT 35
5115: PPUSH
5116: CALL_OW 67
// DialogueOn ;
5120: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5124: LD_VAR 0 3
5128: PPUSH
5129: LD_STRING D4-Sol1-5
5131: PPUSH
5132: CALL_OW 88
// DialogueOff ;
5136: CALL_OW 7
// tempCharles = un ;
5140: LD_ADDR_EXP 13
5144: PUSH
5145: LD_VAR 0 3
5149: ST_TO_ADDR
// end ; if number = 7 then
5150: LD_VAR 0 1
5154: PUSH
5155: LD_INT 7
5157: EQUAL
5158: IFFALSE 5408
// begin hc_class := 1 ;
5160: LD_ADDR_OWVAR 28
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// hc_sex := sex_female ;
5168: LD_ADDR_OWVAR 27
5172: PUSH
5173: LD_INT 2
5175: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5176: LD_ADDR_OWVAR 33
5180: PUSH
5181: LD_STRING AmGalRemake
5183: ST_TO_ADDR
// hc_face_number := 2 ;
5184: LD_ADDR_OWVAR 34
5188: PUSH
5189: LD_INT 2
5191: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5192: LD_ADDR_OWVAR 26
5196: PUSH
5197: LD_STRING Rebecca Macdonald
5199: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5200: LD_ADDR_OWVAR 29
5204: PUSH
5205: LD_INT 10
5207: PUSH
5208: LD_INT 10
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5215: LD_ADDR_OWVAR 30
5219: PUSH
5220: LD_INT 1
5222: PUSH
5223: LD_INT 0
5225: PUSH
5226: LD_INT 0
5228: PUSH
5229: LD_INT 1
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5238: LD_ADDR_OWVAR 31
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: LD_INT 0
5248: PUSH
5249: LD_INT 0
5251: PUSH
5252: LD_INT 1
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: ST_TO_ADDR
// un = CreateHuman ;
5261: LD_ADDR_VAR 0 3
5265: PUSH
5266: CALL_OW 44
5270: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5271: LD_VAR 0 3
5275: PPUSH
5276: LD_INT 29
5278: PPUSH
5279: LD_INT 1
5281: PPUSH
5282: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5286: LD_VAR 0 3
5290: PPUSH
5291: CALL_OW 87
// wait ( 0 0$1 ) ;
5295: LD_INT 35
5297: PPUSH
5298: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5302: LD_INT 30
5304: PPUSH
5305: LD_INT 22
5307: PUSH
5308: LD_INT 3
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PPUSH
5315: CALL_OW 70
5319: IFFALSE 5408
// begin DialogueOn ;
5321: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5325: LD_VAR 0 3
5329: PPUSH
5330: CALL_OW 250
5334: PPUSH
5335: LD_VAR 0 3
5339: PPUSH
5340: CALL_OW 251
5344: PPUSH
5345: LD_INT 1
5347: PPUSH
5348: LD_INT 15
5350: NEG
5351: PPUSH
5352: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5356: LD_VAR 0 3
5360: PPUSH
5361: CALL_OW 250
5365: PPUSH
5366: LD_VAR 0 3
5370: PPUSH
5371: CALL_OW 251
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5383: LD_VAR 0 3
5387: PPUSH
5388: LD_STRING D11a-FSol2-1
5390: PPUSH
5391: CALL_OW 88
// ComCrawl ( un ) ;
5395: LD_VAR 0 3
5399: PPUSH
5400: CALL_OW 137
// DialogueOff ;
5404: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5408: LD_ADDR_EXP 45
5412: PUSH
5413: LD_EXP 45
5417: PUSH
5418: LD_VAR 0 3
5422: UNION
5423: ST_TO_ADDR
// arrivals := arrivals union un ;
5424: LD_ADDR_EXP 46
5428: PUSH
5429: LD_EXP 46
5433: PUSH
5434: LD_VAR 0 3
5438: UNION
5439: ST_TO_ADDR
// end ;
5440: LD_VAR 0 2
5444: RET
// every 0 0$1 do var i ;
5445: GO 5447
5447: DISABLE
5448: LD_INT 0
5450: PPUSH
// begin enable ;
5451: ENABLE
// if not ignoreTarget then
5452: LD_EXP 45
5456: NOT
5457: IFFALSE 5461
// exit ;
5459: GO 5542
// for i in ignoreTarget do
5461: LD_ADDR_VAR 0 1
5465: PUSH
5466: LD_EXP 45
5470: PUSH
5471: FOR_IN
5472: IFFALSE 5540
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5474: LD_INT 22
5476: PUSH
5477: LD_INT 1
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 91
5486: PUSH
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 10
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PPUSH
5504: CALL_OW 69
5508: PUSH
5509: LD_EXP 45
5513: DIFF
5514: PUSH
5515: LD_INT 1
5517: GREATER
5518: IFFALSE 5538
// begin ignoreTarget := ignoreTarget diff i ;
5520: LD_ADDR_EXP 45
5524: PUSH
5525: LD_EXP 45
5529: PUSH
5530: LD_VAR 0 1
5534: DIFF
5535: ST_TO_ADDR
// break ;
5536: GO 5540
// end ;
5538: GO 5471
5540: POP
5541: POP
// end ; end_of_file
5542: PPOPN 1
5544: END
// export function PrepareRussian ; var i ; begin
5545: LD_INT 0
5547: PPUSH
5548: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5549: LD_INT 3
5551: PPUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 2
5557: PPUSH
5558: LD_EXP 34
5562: PPUSH
5563: LD_EXP 35
5567: PPUSH
5568: CALL_OW 12
5572: PPUSH
5573: LD_INT 2
5575: PPUSH
5576: LD_INT 4
5578: PPUSH
5579: CALL 6114 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5583: LD_INT 3
5585: PPUSH
5586: LD_INT 3
5588: PPUSH
5589: LD_INT 8
5591: PPUSH
5592: LD_EXP 34
5596: PPUSH
5597: LD_EXP 35
5601: PPUSH
5602: CALL_OW 12
5606: PPUSH
5607: LD_INT 1
5609: PPUSH
5610: LD_INT 4
5612: PPUSH
5613: CALL 6114 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5617: LD_INT 3
5619: PPUSH
5620: LD_INT 3
5622: PPUSH
5623: LD_INT 67
5625: PPUSH
5626: LD_EXP 34
5630: PPUSH
5631: LD_EXP 35
5635: PPUSH
5636: CALL_OW 12
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: LD_INT 2
5646: PPUSH
5647: CALL 6114 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5651: LD_INT 3
5653: PPUSH
5654: LD_INT 3
5656: PPUSH
5657: LD_INT 21
5659: PPUSH
5660: LD_EXP 34
5664: PPUSH
5665: LD_EXP 35
5669: PPUSH
5670: CALL_OW 12
5674: PPUSH
5675: LD_INT 3
5677: PPUSH
5678: LD_INT 6
5680: PPUSH
5681: CALL 6114 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5685: LD_INT 3
5687: PPUSH
5688: LD_INT 3
5690: PPUSH
5691: LD_INT 17
5693: PPUSH
5694: LD_EXP 34
5698: PPUSH
5699: LD_EXP 35
5703: PPUSH
5704: CALL_OW 12
5708: PPUSH
5709: LD_INT 3
5711: PPUSH
5712: LD_INT 6
5714: PPUSH
5715: CALL 6114 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5719: LD_INT 3
5721: PPUSH
5722: LD_INT 3
5724: PPUSH
5725: LD_INT 32
5727: PPUSH
5728: LD_EXP 34
5732: PPUSH
5733: LD_EXP 35
5737: PPUSH
5738: CALL_OW 12
5742: PPUSH
5743: LD_INT 4
5745: PPUSH
5746: LD_INT 2
5748: PPUSH
5749: CALL 6114 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5753: LD_ADDR_VAR 0 2
5757: PUSH
5758: LD_INT 22
5760: PUSH
5761: LD_INT 3
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 21
5770: PUSH
5771: LD_INT 3
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 30
5780: PUSH
5781: LD_INT 32
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: PPUSH
5793: CALL_OW 69
5797: PUSH
5798: FOR_IN
5799: IFFALSE 5839
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5801: LD_INT 3
5803: PPUSH
5804: LD_INT 3
5806: PPUSH
5807: LD_VAR 0 2
5811: PPUSH
5812: LD_EXP 34
5816: PPUSH
5817: LD_EXP 35
5821: PPUSH
5822: CALL_OW 12
5826: PPUSH
5827: LD_INT 1
5829: PPUSH
5830: LD_INT 1
5832: PPUSH
5833: CALL 6114 0 6
5837: GO 5798
5839: POP
5840: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_INT 22
5848: PUSH
5849: LD_INT 3
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: PUSH
5856: LD_INT 21
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: LD_INT 30
5868: PUSH
5869: LD_INT 31
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: LIST
5880: PPUSH
5881: CALL_OW 69
5885: PUSH
5886: FOR_IN
5887: IFFALSE 5915
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5889: LD_EXP 34
5893: PPUSH
5894: LD_EXP 35
5898: PPUSH
5899: CALL_OW 12
5903: PPUSH
5904: LD_VAR 0 2
5908: PPUSH
5909: CALL 6224 0 2
5913: GO 5886
5915: POP
5916: POP
// end ; end_of_file
5917: LD_VAR 0 1
5921: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5922: LD_INT 0
5924: PPUSH
5925: PPUSH
// if exist_mode then
5926: LD_VAR 0 2
5930: IFFALSE 5955
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5932: LD_ADDR_VAR 0 4
5936: PUSH
5937: LD_EXP 44
5941: PUSH
5942: LD_VAR 0 1
5946: STR
5947: PPUSH
5948: CALL_OW 34
5952: ST_TO_ADDR
// end else
5953: GO 5970
// begin unit := NewCharacter ( ident ) ;
5955: LD_ADDR_VAR 0 4
5959: PUSH
5960: LD_VAR 0 1
5964: PPUSH
5965: CALL_OW 25
5969: ST_TO_ADDR
// end ; result := unit ;
5970: LD_ADDR_VAR 0 3
5974: PUSH
5975: LD_VAR 0 4
5979: ST_TO_ADDR
// end ;
5980: LD_VAR 0 3
5984: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
5985: LD_INT 0
5987: PPUSH
5988: PPUSH
5989: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
5990: LD_ADDR_VAR 0 6
5994: PUSH
5995: LD_VAR 0 1
5999: PUSH
6000: LD_INT 1
6002: PPUSH
6003: LD_VAR 0 1
6007: PPUSH
6008: CALL_OW 12
6012: ARRAY
6013: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6014: LD_VAR 0 6
6018: PPUSH
6019: CALL_OW 258
6023: PUSH
6024: LD_INT 1
6026: EQUAL
6027: IFFALSE 6045
// Say ( speaker , dialogMID ) else
6029: LD_VAR 0 6
6033: PPUSH
6034: LD_VAR 0 2
6038: PPUSH
6039: CALL_OW 88
6043: GO 6059
// Say ( speaker , dialogFID ) ;
6045: LD_VAR 0 6
6049: PPUSH
6050: LD_VAR 0 3
6054: PPUSH
6055: CALL_OW 88
// result := speaker ;
6059: LD_ADDR_VAR 0 4
6063: PUSH
6064: LD_VAR 0 6
6068: ST_TO_ADDR
// end ;
6069: LD_VAR 0 4
6073: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6074: LD_INT 0
6076: PPUSH
6077: PPUSH
// for i in charactersList do
6078: LD_ADDR_VAR 0 4
6082: PUSH
6083: LD_VAR 0 1
6087: PUSH
6088: FOR_IN
6089: IFFALSE 6107
// SaveCharacters ( i , ident ) ;
6091: LD_VAR 0 4
6095: PPUSH
6096: LD_VAR 0 2
6100: PPUSH
6101: CALL_OW 38
6105: GO 6088
6107: POP
6108: POP
// end ;
6109: LD_VAR 0 3
6113: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6114: LD_INT 0
6116: PPUSH
6117: PPUSH
6118: PPUSH
6119: PPUSH
// for i = 1 to count do
6120: LD_ADDR_VAR 0 8
6124: PUSH
6125: DOUBLE
6126: LD_INT 1
6128: DEC
6129: ST_TO_ADDR
6130: LD_VAR 0 6
6134: PUSH
6135: FOR_TO
6136: IFFALSE 6217
// begin uc_side = side ;
6138: LD_ADDR_OWVAR 20
6142: PUSH
6143: LD_VAR 0 1
6147: ST_TO_ADDR
// uc_nation = nation ;
6148: LD_ADDR_OWVAR 21
6152: PUSH
6153: LD_VAR 0 2
6157: ST_TO_ADDR
// hc_gallery =  ;
6158: LD_ADDR_OWVAR 33
6162: PUSH
6163: LD_STRING 
6165: ST_TO_ADDR
// hc_name =  ;
6166: LD_ADDR_OWVAR 26
6170: PUSH
6171: LD_STRING 
6173: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6174: LD_INT 0
6176: PPUSH
6177: LD_VAR 0 5
6181: PPUSH
6182: LD_VAR 0 4
6186: PPUSH
6187: CALL_OW 380
// un = CreateHuman ;
6191: LD_ADDR_VAR 0 10
6195: PUSH
6196: CALL_OW 44
6200: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6201: LD_VAR 0 10
6205: PPUSH
6206: LD_VAR 0 3
6210: PPUSH
6211: CALL_OW 52
// end ;
6215: GO 6135
6217: POP
6218: POP
// end ;
6219: LD_VAR 0 7
6223: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
6228: PPUSH
// uc_side := GetSide ( b ) ;
6229: LD_ADDR_OWVAR 20
6233: PUSH
6234: LD_VAR 0 2
6238: PPUSH
6239: CALL_OW 255
6243: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6244: LD_ADDR_OWVAR 21
6248: PUSH
6249: LD_VAR 0 2
6253: PPUSH
6254: CALL_OW 248
6258: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6274: LD_ADDR_VAR 0 5
6278: PUSH
6279: LD_VAR 0 2
6283: PPUSH
6284: CALL_OW 254
6288: PUSH
6289: LD_INT 3
6291: MINUS
6292: ST_TO_ADDR
// if dir < 0 then
6293: LD_VAR 0 5
6297: PUSH
6298: LD_INT 0
6300: LESS
6301: IFFALSE 6317
// dir := 6 + dir ;
6303: LD_ADDR_VAR 0 5
6307: PUSH
6308: LD_INT 6
6310: PUSH
6311: LD_VAR 0 5
6315: PLUS
6316: ST_TO_ADDR
// un := CreateHuman ;
6317: LD_ADDR_VAR 0 4
6321: PUSH
6322: CALL_OW 44
6326: ST_TO_ADDR
// SetDir ( un , dir ) ;
6327: LD_VAR 0 4
6331: PPUSH
6332: LD_VAR 0 5
6336: PPUSH
6337: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6341: LD_VAR 0 4
6345: PPUSH
6346: LD_VAR 0 2
6350: PPUSH
6351: CALL_OW 52
// end ;
6355: LD_VAR 0 3
6359: RET
// export function PrepareDifficulty ; begin
6360: LD_INT 0
6362: PPUSH
// if Difficulty = 1 then
6363: LD_OWVAR 67
6367: PUSH
6368: LD_INT 1
6370: EQUAL
6371: IFFALSE 6389
// begin RuSolMinLevel = 2 ;
6373: LD_ADDR_EXP 34
6377: PUSH
6378: LD_INT 2
6380: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6381: LD_ADDR_EXP 35
6385: PUSH
6386: LD_INT 3
6388: ST_TO_ADDR
// end ; if Difficulty = 2 then
6389: LD_OWVAR 67
6393: PUSH
6394: LD_INT 2
6396: EQUAL
6397: IFFALSE 6415
// begin RuSolMinLevel = 3 ;
6399: LD_ADDR_EXP 34
6403: PUSH
6404: LD_INT 3
6406: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6407: LD_ADDR_EXP 35
6411: PUSH
6412: LD_INT 5
6414: ST_TO_ADDR
// end ; if Difficulty = 3 then
6415: LD_OWVAR 67
6419: PUSH
6420: LD_INT 3
6422: EQUAL
6423: IFFALSE 6441
// begin RuSolMinLevel = 4 ;
6425: LD_ADDR_EXP 34
6429: PUSH
6430: LD_INT 4
6432: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6433: LD_ADDR_EXP 35
6437: PUSH
6438: LD_INT 6
6440: ST_TO_ADDR
// end ; end ;
6441: LD_VAR 0 1
6445: RET
// export function ShowQuery1 ; begin
6446: LD_INT 0
6448: PPUSH
// case query ( QKill ) of 1 :
6449: LD_STRING QKill
6451: PPUSH
6452: CALL_OW 97
6456: PUSH
6457: LD_INT 1
6459: DOUBLE
6460: EQUAL
6461: IFTRUE 6465
6463: GO 6476
6465: POP
// begin result = 1 ;
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_INT 1
6473: ST_TO_ADDR
// end ; 2 :
6474: GO 6515
6476: LD_INT 2
6478: DOUBLE
6479: EQUAL
6480: IFTRUE 6484
6482: GO 6495
6484: POP
// begin result = 2 ;
6485: LD_ADDR_VAR 0 1
6489: PUSH
6490: LD_INT 2
6492: ST_TO_ADDR
// end ; 3 :
6493: GO 6515
6495: LD_INT 3
6497: DOUBLE
6498: EQUAL
6499: IFTRUE 6503
6501: GO 6514
6503: POP
// begin result = 3 ;
6504: LD_ADDR_VAR 0 1
6508: PUSH
6509: LD_INT 3
6511: ST_TO_ADDR
// end ; end ;
6512: GO 6515
6514: POP
// end ;
6515: LD_VAR 0 1
6519: RET
// export function ShowQuery2 ; begin
6520: LD_INT 0
6522: PPUSH
// case query ( QKill2 ) of 1 :
6523: LD_STRING QKill2
6525: PPUSH
6526: CALL_OW 97
6530: PUSH
6531: LD_INT 1
6533: DOUBLE
6534: EQUAL
6535: IFTRUE 6539
6537: GO 6550
6539: POP
// begin result = 1 ;
6540: LD_ADDR_VAR 0 1
6544: PUSH
6545: LD_INT 1
6547: ST_TO_ADDR
// end ; 2 :
6548: GO 6570
6550: LD_INT 2
6552: DOUBLE
6553: EQUAL
6554: IFTRUE 6558
6556: GO 6569
6558: POP
// begin result = 2 ;
6559: LD_ADDR_VAR 0 1
6563: PUSH
6564: LD_INT 2
6566: ST_TO_ADDR
// end ; end ;
6567: GO 6570
6569: POP
// end ;
6570: LD_VAR 0 1
6574: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6575: LD_INT 0
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6582: LD_ADDR_VAR 0 8
6586: PUSH
6587: LD_INT 48
6589: PUSH
6590: LD_INT 49
6592: PUSH
6593: LD_INT 50
6595: PUSH
6596: LD_INT 20
6598: PUSH
6599: LD_INT 1
6601: PUSH
6602: LD_INT 51
6604: PUSH
6605: LD_INT 52
6607: PUSH
6608: LD_INT 69
6610: PUSH
6611: LD_INT 39
6613: PUSH
6614: LD_INT 34
6616: PUSH
6617: LD_INT 40
6619: PUSH
6620: LD_INT 53
6622: PUSH
6623: LD_INT 71
6625: PUSH
6626: LD_INT 57
6628: PUSH
6629: LD_INT 58
6631: PUSH
6632: LD_INT 44
6634: PUSH
6635: LD_INT 32
6637: PUSH
6638: LD_INT 27
6640: PUSH
6641: LD_INT 23
6643: PUSH
6644: LD_INT 33
6646: PUSH
6647: LD_INT 59
6649: PUSH
6650: LD_INT 54
6652: PUSH
6653: LD_INT 55
6655: PUSH
6656: LD_INT 56
6658: PUSH
6659: LD_INT 63
6661: PUSH
6662: LD_INT 64
6664: PUSH
6665: LD_INT 65
6667: PUSH
6668: LD_INT 30
6670: PUSH
6671: LD_INT 31
6673: PUSH
6674: LD_INT 21
6676: PUSH
6677: LD_INT 22
6679: PUSH
6680: LD_INT 25
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: DOUBLE
6723: LD_INT 1
6725: DEC
6726: ST_TO_ADDR
6727: LD_VAR 0 8
6731: PUSH
6732: FOR_TO
6733: IFFALSE 6809
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6735: LD_VAR 0 8
6739: PUSH
6740: LD_VAR 0 5
6744: ARRAY
6745: PPUSH
6746: LD_VAR 0 1
6750: PPUSH
6751: CALL_OW 321
6755: PUSH
6756: LD_INT 1
6758: EQUAL
6759: PUSH
6760: LD_VAR 0 8
6764: PUSH
6765: LD_VAR 0 5
6769: ARRAY
6770: PPUSH
6771: LD_VAR 0 3
6775: PPUSH
6776: CALL_OW 482
6780: PUSH
6781: LD_INT 1
6783: EQUAL
6784: AND
6785: IFFALSE 6807
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6787: LD_VAR 0 2
6791: PPUSH
6792: LD_VAR 0 8
6796: PUSH
6797: LD_VAR 0 5
6801: ARRAY
6802: PPUSH
6803: CALL_OW 184
6807: GO 6732
6809: POP
6810: POP
// end ;
6811: LD_VAR 0 4
6815: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6816: LD_INT 0
6818: PPUSH
6819: PPUSH
6820: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6821: LD_INT 22
6823: PUSH
6824: LD_VAR 0 1
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 21
6835: PUSH
6836: LD_INT 2
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PPUSH
6847: CALL_OW 69
6851: PUSH
6852: LD_VAR 0 3
6856: LESSEQUAL
6857: IFFALSE 6965
// begin for i = 1 to vehCount do
6859: LD_ADDR_VAR 0 9
6863: PUSH
6864: DOUBLE
6865: LD_INT 1
6867: DEC
6868: ST_TO_ADDR
6869: LD_VAR 0 3
6873: PUSH
6874: FOR_TO
6875: IFFALSE 6963
// begin weapon = weaponTab [ i ] ;
6877: LD_ADDR_VAR 0 10
6881: PUSH
6882: LD_VAR 0 4
6886: PUSH
6887: LD_VAR 0 9
6891: ARRAY
6892: ST_TO_ADDR
// if weapon = 46 then
6893: LD_VAR 0 10
6897: PUSH
6898: LD_INT 46
6900: EQUAL
6901: IFFALSE 6932
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6903: LD_VAR 0 2
6907: PPUSH
6908: LD_INT 24
6910: PPUSH
6911: LD_VAR 0 5
6915: PPUSH
6916: LD_VAR 0 6
6920: PPUSH
6921: LD_VAR 0 10
6925: PPUSH
6926: CALL_OW 185
// end else
6930: GO 6961
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6932: LD_VAR 0 2
6936: PPUSH
6937: LD_VAR 0 7
6941: PPUSH
6942: LD_VAR 0 5
6946: PPUSH
6947: LD_VAR 0 6
6951: PPUSH
6952: LD_VAR 0 10
6956: PPUSH
6957: CALL_OW 185
// end ; end ;
6961: GO 6874
6963: POP
6964: POP
// end ; end ;
6965: LD_VAR 0 8
6969: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6970: LD_INT 0
6972: PPUSH
6973: PPUSH
6974: PPUSH
6975: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6976: LD_ADDR_VAR 0 8
6980: PUSH
6981: LD_INT 22
6983: PUSH
6984: LD_VAR 0 1
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 21
6995: PUSH
6996: LD_INT 2
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 3
7005: PUSH
7006: LD_INT 24
7008: PUSH
7009: LD_INT 650
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: LIST
7024: PPUSH
7025: CALL_OW 69
7029: ST_TO_ADDR
// if damageVehicles > 0 then
7030: LD_VAR 0 8
7034: PUSH
7035: LD_INT 0
7037: GREATER
7038: IFFALSE 7059
// ComMoveXY ( damageVehicles , repX , repY ) ;
7040: LD_VAR 0 8
7044: PPUSH
7045: LD_VAR 0 3
7049: PPUSH
7050: LD_VAR 0 4
7054: PPUSH
7055: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7059: LD_VAR 0 8
7063: PPUSH
7064: LD_INT 95
7066: PUSH
7067: LD_VAR 0 2
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 3
7078: PUSH
7079: LD_INT 58
7081: PUSH
7082: EMPTY
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PPUSH
7093: CALL_OW 72
7097: PUSH
7098: LD_INT 0
7100: GREATER
7101: IFFALSE 7168
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7103: LD_ADDR_VAR 0 6
7107: PUSH
7108: LD_VAR 0 8
7112: PPUSH
7113: LD_INT 95
7115: PUSH
7116: LD_VAR 0 2
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 3
7127: PUSH
7128: LD_INT 58
7130: PUSH
7131: EMPTY
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PPUSH
7142: CALL_OW 72
7146: PUSH
7147: FOR_IN
7148: IFFALSE 7166
// ComExitVehicle ( UnitsInside ( i ) ) ;
7150: LD_VAR 0 6
7154: PPUSH
7155: CALL_OW 313
7159: PPUSH
7160: CALL_OW 121
7164: GO 7147
7166: POP
7167: POP
// end ;
7168: LD_VAR 0 5
7172: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7173: LD_INT 0
7175: PPUSH
7176: PPUSH
7177: PPUSH
7178: PPUSH
7179: PPUSH
7180: PPUSH
7181: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7182: LD_ADDR_VAR 0 8
7186: PUSH
7187: LD_INT 22
7189: PUSH
7190: LD_VAR 0 1
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 21
7201: PUSH
7202: LD_INT 2
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: LD_INT 24
7211: PUSH
7212: LD_INT 660
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 3
7221: PUSH
7222: LD_INT 58
7224: PUSH
7225: EMPTY
7226: LIST
7227: PUSH
7228: LD_INT 2
7230: PUSH
7231: LD_INT 34
7233: PUSH
7234: LD_INT 43
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 34
7243: PUSH
7244: LD_INT 44
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 34
7253: PUSH
7254: LD_INT 46
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: PPUSH
7278: CALL_OW 69
7282: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7283: LD_INT 22
7285: PUSH
7286: LD_VAR 0 1
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 21
7297: PUSH
7298: LD_INT 2
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 24
7307: PUSH
7308: LD_INT 1000
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 3
7317: PUSH
7318: LD_INT 58
7320: PUSH
7321: EMPTY
7322: LIST
7323: PUSH
7324: LD_INT 2
7326: PUSH
7327: LD_INT 34
7329: PUSH
7330: LD_INT 43
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 34
7339: PUSH
7340: LD_INT 44
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: LD_INT 34
7349: PUSH
7350: LD_INT 46
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: LIST
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 69
7378: PUSH
7379: LD_INT 5
7381: PUSH
7382: LD_INT 6
7384: PUSH
7385: LD_INT 6
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: PUSH
7393: LD_OWVAR 67
7397: ARRAY
7398: EQUAL
7399: IFFALSE 7655
// if seeEnemy = 0 then
7401: LD_VAR 0 11
7405: PUSH
7406: LD_INT 0
7408: EQUAL
7409: IFFALSE 7655
// repeat wait ( 0 0$1 ) ;
7411: LD_INT 35
7413: PPUSH
7414: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7418: LD_ADDR_VAR 0 8
7422: PUSH
7423: LD_INT 22
7425: PUSH
7426: LD_VAR 0 1
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 21
7437: PUSH
7438: LD_INT 2
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 24
7447: PUSH
7448: LD_INT 660
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: LD_INT 58
7460: PUSH
7461: EMPTY
7462: LIST
7463: PUSH
7464: LD_INT 2
7466: PUSH
7467: LD_INT 34
7469: PUSH
7470: LD_INT 43
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PUSH
7477: LD_INT 34
7479: PUSH
7480: LD_INT 44
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: PUSH
7487: LD_INT 34
7489: PUSH
7490: LD_INT 46
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: PPUSH
7514: CALL_OW 69
7518: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7519: LD_INT 22
7521: PUSH
7522: LD_VAR 0 1
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: LD_INT 95
7533: PUSH
7534: LD_VAR 0 2
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PPUSH
7547: CALL_OW 69
7551: NOT
7552: PUSH
7553: LD_VAR 0 11
7557: PUSH
7558: LD_INT 0
7560: EQUAL
7561: AND
7562: IFFALSE 7617
// for i := 1 to wayX do
7564: LD_ADDR_VAR 0 6
7568: PUSH
7569: DOUBLE
7570: LD_INT 1
7572: DEC
7573: ST_TO_ADDR
7574: LD_VAR 0 3
7578: PUSH
7579: FOR_TO
7580: IFFALSE 7615
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7582: LD_VAR 0 8
7586: PPUSH
7587: LD_VAR 0 3
7591: PUSH
7592: LD_VAR 0 6
7596: ARRAY
7597: PPUSH
7598: LD_VAR 0 4
7602: PUSH
7603: LD_VAR 0 6
7607: ARRAY
7608: PPUSH
7609: CALL_OW 114
7613: GO 7579
7615: POP
7616: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7617: LD_INT 22
7619: PUSH
7620: LD_VAR 0 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: LD_INT 95
7631: PUSH
7632: LD_VAR 0 2
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PPUSH
7645: CALL_OW 69
7649: PUSH
7650: LD_INT 0
7652: GREATER
7653: IFFALSE 7411
// seeEnemy = 1 ;
7655: LD_ADDR_VAR 0 11
7659: PUSH
7660: LD_INT 1
7662: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7663: LD_INT 35
7665: PPUSH
7666: CALL_OW 67
// for j in vehiclesOK do
7670: LD_ADDR_VAR 0 7
7674: PUSH
7675: LD_VAR 0 8
7679: PUSH
7680: FOR_IN
7681: IFFALSE 7894
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7683: LD_ADDR_VAR 0 9
7687: PUSH
7688: LD_INT 81
7690: PUSH
7691: LD_VAR 0 1
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: LD_INT 101
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 69
7718: PUSH
7719: LD_EXP 45
7723: DIFF
7724: PPUSH
7725: LD_VAR 0 7
7729: PPUSH
7730: CALL_OW 74
7734: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7735: LD_ADDR_VAR 0 10
7739: PUSH
7740: LD_INT 81
7742: PUSH
7743: LD_VAR 0 1
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: LD_INT 101
7754: PUSH
7755: LD_INT 1
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: LD_INT 59
7767: PUSH
7768: EMPTY
7769: LIST
7770: PUSH
7771: LD_INT 21
7773: PUSH
7774: LD_INT 1
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 21
7783: PUSH
7784: LD_INT 2
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: PPUSH
7805: CALL_OW 69
7809: PUSH
7810: LD_EXP 45
7814: DIFF
7815: PPUSH
7816: LD_VAR 0 7
7820: PPUSH
7821: CALL_OW 74
7825: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7826: LD_VAR 0 7
7830: PPUSH
7831: LD_VAR 0 9
7835: PPUSH
7836: CALL_OW 296
7840: PUSH
7841: LD_INT 8
7843: PLUS
7844: PUSH
7845: LD_VAR 0 7
7849: PPUSH
7850: LD_VAR 0 10
7854: PPUSH
7855: CALL_OW 296
7859: LESS
7860: IFFALSE 7878
// ComAttackUnit ( j , target1 ) else
7862: LD_VAR 0 7
7866: PPUSH
7867: LD_VAR 0 9
7871: PPUSH
7872: CALL_OW 115
7876: GO 7892
// ComAttackUnit ( j , target2 ) ;
7878: LD_VAR 0 7
7882: PPUSH
7883: LD_VAR 0 10
7887: PPUSH
7888: CALL_OW 115
// end ;
7892: GO 7680
7894: POP
7895: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7896: LD_INT 22
7898: PUSH
7899: LD_VAR 0 1
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: PUSH
7908: LD_INT 21
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 24
7920: PUSH
7921: LD_INT 1000
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 3
7930: PUSH
7931: LD_INT 58
7933: PUSH
7934: EMPTY
7935: LIST
7936: PUSH
7937: LD_INT 2
7939: PUSH
7940: LD_INT 34
7942: PUSH
7943: LD_INT 43
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 34
7952: PUSH
7953: LD_INT 44
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: LD_INT 34
7962: PUSH
7963: LD_INT 46
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: PPUSH
7987: CALL_OW 69
7991: PUSH
7992: LD_INT 0
7994: EQUAL
7995: IFFALSE 7663
// seeEnemy = 0 ;
7997: LD_ADDR_VAR 0 11
8001: PUSH
8002: LD_INT 0
8004: ST_TO_ADDR
// end ;
8005: LD_VAR 0 5
8009: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8018: LD_ADDR_VAR 0 8
8022: PUSH
8023: LD_VAR 0 2
8027: PPUSH
8028: CALL_OW 313
8032: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8033: LD_ADDR_VAR 0 9
8037: PUSH
8038: LD_VAR 0 3
8042: PPUSH
8043: LD_INT 22
8045: PUSH
8046: LD_VAR 0 1
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 25
8057: PUSH
8058: LD_INT 2
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 24
8067: PUSH
8068: LD_INT 750
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 3
8077: PUSH
8078: LD_INT 54
8080: PUSH
8081: EMPTY
8082: LIST
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: PPUSH
8094: CALL_OW 70
8098: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8099: LD_ADDR_VAR 0 6
8103: PUSH
8104: LD_VAR 0 3
8108: PPUSH
8109: LD_INT 22
8111: PUSH
8112: LD_VAR 0 1
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: LD_INT 21
8123: PUSH
8124: LD_INT 3
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 3
8133: PUSH
8134: LD_INT 24
8136: PUSH
8137: LD_INT 1000
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: PPUSH
8156: CALL_OW 70
8160: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8161: LD_VAR 0 6
8165: NOT
8166: PUSH
8167: LD_INT 22
8169: PUSH
8170: LD_VAR 0 1
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PUSH
8179: LD_INT 25
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_INT 24
8191: PUSH
8192: LD_INT 250
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: LIST
8203: PPUSH
8204: CALL_OW 69
8208: NOT
8209: AND
8210: IFFALSE 8214
// exit ;
8212: GO 8396
// if buildings_list > 0 and engineerOkInside then
8214: LD_VAR 0 6
8218: PUSH
8219: LD_INT 0
8221: GREATER
8222: PUSH
8223: LD_VAR 0 8
8227: AND
8228: IFFALSE 8239
// ComExitBuilding ( engineerOkInside ) ;
8230: LD_VAR 0 8
8234: PPUSH
8235: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8239: LD_VAR 0 6
8243: PUSH
8244: LD_INT 0
8246: GREATER
8247: PUSH
8248: LD_VAR 0 9
8252: PUSH
8253: LD_INT 0
8255: GREATER
8256: AND
8257: IFFALSE 8277
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8259: LD_VAR 0 9
8263: PPUSH
8264: LD_VAR 0 6
8268: PUSH
8269: LD_INT 1
8271: ARRAY
8272: PPUSH
8273: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8277: LD_VAR 0 6
8281: PUSH
8282: LD_INT 0
8284: EQUAL
8285: PUSH
8286: LD_VAR 0 4
8290: PUSH
8291: LD_INT 0
8293: EQUAL
8294: AND
8295: PUSH
8296: LD_VAR 0 9
8300: PUSH
8301: LD_INT 0
8303: GREATER
8304: AND
8305: IFFALSE 8321
// ComEnterUnit ( engineerOkOutside , building ) ;
8307: LD_VAR 0 9
8311: PPUSH
8312: LD_VAR 0 2
8316: PPUSH
8317: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8321: LD_VAR 0 9
8325: PUSH
8326: LD_INT 0
8328: GREATER
8329: PUSH
8330: LD_VAR 0 6
8334: PUSH
8335: LD_INT 0
8337: EQUAL
8338: AND
8339: PUSH
8340: LD_VAR 0 4
8344: PUSH
8345: LD_INT 0
8347: GREATER
8348: AND
8349: IFFALSE 8396
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8351: LD_VAR 0 9
8355: PPUSH
8356: LD_VAR 0 4
8360: PUSH
8361: LD_INT 1
8363: ARRAY
8364: PPUSH
8365: LD_VAR 0 4
8369: PUSH
8370: LD_INT 2
8372: ARRAY
8373: PPUSH
8374: LD_VAR 0 4
8378: PUSH
8379: LD_INT 3
8381: ARRAY
8382: PPUSH
8383: LD_VAR 0 4
8387: PUSH
8388: LD_INT 4
8390: ARRAY
8391: PPUSH
8392: CALL_OW 145
// end ;
8396: LD_VAR 0 5
8400: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8401: LD_INT 0
8403: PPUSH
8404: PPUSH
8405: PPUSH
8406: PPUSH
8407: PPUSH
8408: PPUSH
8409: PPUSH
8410: PPUSH
8411: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8412: LD_ADDR_VAR 0 6
8416: PUSH
8417: LD_INT 22
8419: PUSH
8420: LD_VAR 0 1
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 4
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: LD_INT 23
8441: PUSH
8442: LD_INT 2
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 24
8451: PUSH
8452: LD_INT 251
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: PPUSH
8465: CALL_OW 69
8469: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8470: LD_ADDR_VAR 0 7
8474: PUSH
8475: LD_VAR 0 3
8479: PPUSH
8480: LD_INT 22
8482: PUSH
8483: LD_VAR 0 1
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: LD_INT 23
8494: PUSH
8495: LD_INT 2
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PUSH
8502: LD_INT 25
8504: PUSH
8505: LD_INT 4
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: LD_INT 50
8514: PUSH
8515: EMPTY
8516: LIST
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: PPUSH
8524: CALL_OW 70
8528: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8529: LD_ADDR_VAR 0 10
8533: PUSH
8534: LD_VAR 0 3
8538: PPUSH
8539: LD_INT 22
8541: PUSH
8542: LD_VAR 0 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 1
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 3
8563: PUSH
8564: LD_INT 25
8566: PUSH
8567: LD_INT 3
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 3
8580: PUSH
8581: LD_INT 24
8583: PUSH
8584: LD_INT 750
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: PPUSH
8601: CALL_OW 70
8605: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8606: LD_ADDR_VAR 0 11
8610: PUSH
8611: LD_VAR 0 2
8615: PPUSH
8616: LD_INT 22
8618: PUSH
8619: LD_VAR 0 1
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 21
8630: PUSH
8631: LD_INT 1
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: LD_INT 3
8640: PUSH
8641: LD_INT 25
8643: PUSH
8644: LD_INT 3
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 3
8657: PUSH
8658: LD_INT 24
8660: PUSH
8661: LD_INT 1000
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: PPUSH
8678: CALL_OW 70
8682: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8683: LD_VAR 0 10
8687: NOT
8688: PUSH
8689: LD_VAR 0 11
8693: NOT
8694: AND
8695: PUSH
8696: LD_VAR 0 6
8700: NOT
8701: AND
8702: IFFALSE 8706
// exit ;
8704: GO 8940
// if damageUnits > 0 and sci_list > 0 then
8706: LD_VAR 0 10
8710: PUSH
8711: LD_INT 0
8713: GREATER
8714: PUSH
8715: LD_VAR 0 6
8719: PUSH
8720: LD_INT 0
8722: GREATER
8723: AND
8724: IFFALSE 8740
// ComMoveToArea ( damageUnits , healArea ) ;
8726: LD_VAR 0 10
8730: PPUSH
8731: LD_VAR 0 2
8735: PPUSH
8736: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8740: LD_VAR 0 11
8744: PUSH
8745: LD_INT 0
8747: GREATER
8748: PUSH
8749: LD_VAR 0 6
8753: PUSH
8754: LD_INT 0
8756: GREATER
8757: AND
8758: IFFALSE 8769
// ComExitBuilding ( sci_list ) ;
8760: LD_VAR 0 6
8764: PPUSH
8765: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8769: LD_VAR 0 11
8773: PUSH
8774: LD_INT 0
8776: GREATER
8777: PUSH
8778: LD_VAR 0 7
8782: PUSH
8783: LD_INT 0
8785: GREATER
8786: AND
8787: IFFALSE 8807
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8789: LD_VAR 0 7
8793: PPUSH
8794: LD_VAR 0 11
8798: PUSH
8799: LD_INT 1
8801: ARRAY
8802: PPUSH
8803: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8807: LD_VAR 0 10
8811: PUSH
8812: LD_INT 0
8814: EQUAL
8815: PUSH
8816: LD_VAR 0 11
8820: PUSH
8821: LD_INT 0
8823: EQUAL
8824: AND
8825: PUSH
8826: LD_VAR 0 7
8830: PUSH
8831: LD_INT 0
8833: GREATER
8834: AND
8835: IFFALSE 8940
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8837: LD_ADDR_VAR 0 12
8841: PUSH
8842: LD_INT 22
8844: PUSH
8845: LD_VAR 0 1
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_INT 21
8856: PUSH
8857: LD_INT 3
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: LD_INT 30
8866: PUSH
8867: LD_INT 8
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: PPUSH
8879: CALL_OW 69
8883: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8884: LD_ADDR_VAR 0 13
8888: PUSH
8889: LD_INT 1
8891: PPUSH
8892: LD_VAR 0 12
8896: PPUSH
8897: CALL_OW 12
8901: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8902: LD_VAR 0 7
8906: PPUSH
8907: LD_INT 3
8909: PUSH
8910: LD_INT 60
8912: PUSH
8913: EMPTY
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 72
8924: PPUSH
8925: LD_VAR 0 12
8929: PUSH
8930: LD_VAR 0 13
8934: ARRAY
8935: PPUSH
8936: CALL_OW 120
// end ; end ;
8940: LD_VAR 0 5
8944: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8945: LD_INT 0
8947: PPUSH
8948: PPUSH
8949: PPUSH
8950: PPUSH
// tmpTab = [ ] ;
8951: LD_ADDR_VAR 0 6
8955: PUSH
8956: EMPTY
8957: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8958: LD_INT 22
8960: PUSH
8961: LD_VAR 0 1
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 30
8972: PUSH
8973: LD_INT 32
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PPUSH
8984: CALL_OW 69
8988: PUSH
8989: LD_INT 0
8991: GREATER
8992: IFFALSE 9075
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8994: LD_ADDR_VAR 0 4
8998: PUSH
8999: LD_INT 22
9001: PUSH
9002: LD_VAR 0 1
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: LD_INT 30
9013: PUSH
9014: LD_INT 32
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 69
9029: PUSH
9030: FOR_IN
9031: IFFALSE 9073
// begin for j in UnitsInside ( i ) do
9033: LD_ADDR_VAR 0 5
9037: PUSH
9038: LD_VAR 0 4
9042: PPUSH
9043: CALL_OW 313
9047: PUSH
9048: FOR_IN
9049: IFFALSE 9069
// tmpTab = tmpTab ^ j ;
9051: LD_ADDR_VAR 0 6
9055: PUSH
9056: LD_VAR 0 6
9060: PUSH
9061: LD_VAR 0 5
9065: ADD
9066: ST_TO_ADDR
9067: GO 9048
9069: POP
9070: POP
// end ;
9071: GO 9030
9073: POP
9074: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9075: LD_VAR 0 6
9079: PPUSH
9080: LD_VAR 0 2
9084: PPUSH
9085: CALL_OW 250
9089: PPUSH
9090: LD_VAR 0 2
9094: PPUSH
9095: CALL_OW 251
9099: PPUSH
9100: CALL_OW 114
// end ;
9104: LD_VAR 0 3
9108: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9109: LD_INT 0
9111: PPUSH
9112: PPUSH
9113: PPUSH
9114: PPUSH
// enable ;
9115: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9116: LD_ADDR_VAR 0 7
9120: PUSH
9121: LD_VAR 0 3
9125: PPUSH
9126: CALL_OW 435
9130: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 34
9150: PUSH
9151: LD_VAR 0 2
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9169: LD_VAR 0 6
9173: PUSH
9174: LD_INT 0
9176: GREATER
9177: PUSH
9178: LD_VAR 0 3
9182: PPUSH
9183: CALL_OW 435
9187: AND
9188: PUSH
9189: LD_VAR 0 7
9193: PUSH
9194: LD_INT 0
9196: GREATER
9197: AND
9198: IFFALSE 9247
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9200: LD_VAR 0 6
9204: PUSH
9205: LD_INT 1
9207: ARRAY
9208: PPUSH
9209: LD_VAR 0 7
9213: PUSH
9214: LD_INT 1
9216: ARRAY
9217: PPUSH
9218: LD_VAR 0 7
9222: PUSH
9223: LD_INT 2
9225: ARRAY
9226: PPUSH
9227: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9231: LD_VAR 0 6
9235: PUSH
9236: LD_INT 1
9238: ARRAY
9239: PPUSH
9240: LD_INT 100
9242: PPUSH
9243: CALL_OW 240
// end ; end ;
9247: LD_VAR 0 4
9251: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9252: LD_INT 0
9254: PPUSH
9255: PPUSH
9256: PPUSH
9257: PPUSH
9258: PPUSH
9259: PPUSH
9260: PPUSH
9261: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9262: LD_ADDR_VAR 0 6
9266: PUSH
9267: LD_VAR 0 2
9271: PPUSH
9272: LD_INT 22
9274: PUSH
9275: LD_VAR 0 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 56
9286: PUSH
9287: EMPTY
9288: LIST
9289: PUSH
9290: LD_INT 24
9292: PUSH
9293: LD_INT 700
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 3
9302: PUSH
9303: LD_INT 60
9305: PUSH
9306: EMPTY
9307: LIST
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 2
9315: PUSH
9316: LD_INT 25
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 25
9328: PUSH
9329: LD_INT 5
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 25
9338: PUSH
9339: LD_INT 8
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 25
9348: PUSH
9349: LD_INT 9
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: PPUSH
9370: CALL_OW 70
9374: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9375: LD_ADDR_VAR 0 7
9379: PUSH
9380: LD_VAR 0 2
9384: PPUSH
9385: LD_INT 22
9387: PUSH
9388: LD_VAR 0 1
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 30
9399: PUSH
9400: LD_INT 32
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 58
9409: PUSH
9410: EMPTY
9411: LIST
9412: PUSH
9413: LD_INT 24
9415: PUSH
9416: LD_INT 251
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: PPUSH
9429: CALL_OW 70
9433: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9434: LD_ADDR_VAR 0 9
9438: PUSH
9439: LD_VAR 0 2
9443: PPUSH
9444: LD_INT 22
9446: PUSH
9447: LD_VAR 0 1
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 30
9461: PUSH
9462: LD_INT 4
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 30
9471: PUSH
9472: LD_INT 5
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 24
9486: PUSH
9487: LD_INT 251
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 70
9503: ST_TO_ADDR
// if barrackList > 0 then
9504: LD_VAR 0 9
9508: PUSH
9509: LD_INT 0
9511: GREATER
9512: IFFALSE 9660
// begin if turretList = 0 then
9514: LD_VAR 0 7
9518: PUSH
9519: LD_INT 0
9521: EQUAL
9522: IFFALSE 9564
// begin if soldiers_list > 0 then
9524: LD_VAR 0 6
9528: PUSH
9529: LD_INT 0
9531: GREATER
9532: IFFALSE 9562
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9534: LD_VAR 0 6
9538: PPUSH
9539: LD_VAR 0 9
9543: PUSH
9544: LD_INT 1
9546: PPUSH
9547: LD_VAR 0 9
9551: PPUSH
9552: CALL_OW 12
9556: ARRAY
9557: PPUSH
9558: CALL_OW 120
// end else
9562: GO 9660
// begin for i in barrackList do
9564: LD_ADDR_VAR 0 4
9568: PUSH
9569: LD_VAR 0 9
9573: PUSH
9574: FOR_IN
9575: IFFALSE 9658
// begin insideUnits = UnitsInside ( i ) ;
9577: LD_ADDR_VAR 0 10
9581: PUSH
9582: LD_VAR 0 4
9586: PPUSH
9587: CALL_OW 313
9591: ST_TO_ADDR
// if insideUnits > 0 then
9592: LD_VAR 0 10
9596: PUSH
9597: LD_INT 0
9599: GREATER
9600: IFFALSE 9624
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9602: LD_VAR 0 10
9606: PUSH
9607: LD_INT 1
9609: ARRAY
9610: PPUSH
9611: LD_VAR 0 7
9615: PUSH
9616: LD_INT 1
9618: ARRAY
9619: PPUSH
9620: CALL_OW 120
// if soldiers_list > 0 then
9624: LD_VAR 0 6
9628: PUSH
9629: LD_INT 0
9631: GREATER
9632: IFFALSE 9656
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9634: LD_VAR 0 6
9638: PUSH
9639: LD_INT 1
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 7
9647: PUSH
9648: LD_INT 1
9650: ARRAY
9651: PPUSH
9652: CALL_OW 120
// end ;
9656: GO 9574
9658: POP
9659: POP
// end ; end ; end ;
9660: LD_VAR 0 3
9664: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9665: LD_INT 0
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9672: LD_ADDR_VAR 0 6
9676: PUSH
9677: LD_INT 22
9679: PUSH
9680: LD_VAR 0 1
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: LD_INT 2
9691: PUSH
9692: LD_INT 30
9694: PUSH
9695: LD_INT 31
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: LD_INT 30
9704: PUSH
9705: LD_INT 32
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 30
9714: PUSH
9715: LD_INT 33
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: LD_INT 30
9724: PUSH
9725: LD_INT 4
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PUSH
9732: LD_INT 30
9734: PUSH
9735: LD_INT 5
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PPUSH
9754: CALL_OW 69
9758: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9759: LD_ADDR_VAR 0 7
9763: PUSH
9764: LD_INT 22
9766: PUSH
9767: LD_VAR 0 2
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 21
9778: PUSH
9779: LD_INT 3
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: LD_INT 58
9788: PUSH
9789: EMPTY
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: PPUSH
9797: CALL_OW 69
9801: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9802: LD_VAR 0 6
9806: PUSH
9807: LD_INT 0
9809: GREATER
9810: PUSH
9811: LD_VAR 0 7
9815: PUSH
9816: LD_INT 0
9818: GREATER
9819: AND
9820: IFFALSE 9890
// begin for i in turretsList do
9822: LD_ADDR_VAR 0 4
9826: PUSH
9827: LD_VAR 0 6
9831: PUSH
9832: FOR_IN
9833: IFFALSE 9888
// begin for j in enemyBuildings do
9835: LD_ADDR_VAR 0 5
9839: PUSH
9840: LD_VAR 0 7
9844: PUSH
9845: FOR_IN
9846: IFFALSE 9884
// begin if GetDistUnits ( i , j ) < 20 then
9848: LD_VAR 0 4
9852: PPUSH
9853: LD_VAR 0 5
9857: PPUSH
9858: CALL_OW 296
9862: PUSH
9863: LD_INT 20
9865: LESS
9866: IFFALSE 9882
// begin ComAttackUnit ( i , j ) ;
9868: LD_VAR 0 4
9872: PPUSH
9873: LD_VAR 0 5
9877: PPUSH
9878: CALL_OW 115
// end ; end ;
9882: GO 9845
9884: POP
9885: POP
// end ;
9886: GO 9832
9888: POP
9889: POP
// end ; end ;
9890: LD_VAR 0 3
9894: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9895: LD_INT 0
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
9901: PPUSH
9902: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9903: LD_ADDR_VAR 0 8
9907: PUSH
9908: LD_INT 22
9910: PUSH
9911: LD_VAR 0 1
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 21
9922: PUSH
9923: LD_INT 2
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: LD_INT 34
9932: PUSH
9933: LD_INT 52
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: LIST
9944: PPUSH
9945: CALL_OW 69
9949: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9950: LD_ADDR_VAR 0 9
9954: PUSH
9955: LD_INT 22
9957: PUSH
9958: LD_VAR 0 1
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 21
9969: PUSH
9970: LD_INT 3
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 3
9979: PUSH
9980: LD_INT 24
9982: PUSH
9983: LD_INT 1000
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10007: LD_VAR 0 9
10011: PUSH
10012: LD_INT 0
10014: GREATER
10015: PUSH
10016: LD_VAR 0 8
10020: PPUSH
10021: LD_INT 24
10023: PUSH
10024: LD_INT 750
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PPUSH
10031: CALL_OW 72
10035: PUSH
10036: LD_INT 0
10038: GREATER
10039: AND
10040: IFFALSE 10075
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10042: LD_VAR 0 8
10046: PPUSH
10047: LD_INT 24
10049: PUSH
10050: LD_INT 750
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PPUSH
10057: CALL_OW 72
10061: PPUSH
10062: LD_VAR 0 9
10066: PUSH
10067: LD_INT 1
10069: ARRAY
10070: PPUSH
10071: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10075: LD_VAR 0 8
10079: PPUSH
10080: LD_INT 3
10082: PUSH
10083: LD_INT 24
10085: PUSH
10086: LD_INT 750
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PPUSH
10097: CALL_OW 72
10101: PUSH
10102: LD_INT 0
10104: GREATER
10105: IFFALSE 10143
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10107: LD_VAR 0 8
10111: PPUSH
10112: LD_INT 3
10114: PUSH
10115: LD_INT 24
10117: PUSH
10118: LD_INT 750
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PPUSH
10129: CALL_OW 72
10133: PPUSH
10134: LD_VAR 0 2
10138: PPUSH
10139: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10143: LD_VAR 0 8
10147: PUSH
10148: LD_INT 0
10150: GREATER
10151: PUSH
10152: LD_VAR 0 9
10156: PUSH
10157: LD_INT 0
10159: EQUAL
10160: AND
10161: PUSH
10162: LD_VAR 0 3
10166: PUSH
10167: LD_INT 0
10169: GREATER
10170: AND
10171: IFFALSE 10218
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10173: LD_VAR 0 8
10177: PPUSH
10178: LD_VAR 0 3
10182: PUSH
10183: LD_INT 1
10185: ARRAY
10186: PPUSH
10187: LD_VAR 0 3
10191: PUSH
10192: LD_INT 2
10194: ARRAY
10195: PPUSH
10196: LD_VAR 0 3
10200: PUSH
10201: LD_INT 3
10203: ARRAY
10204: PPUSH
10205: LD_VAR 0 3
10209: PUSH
10210: LD_INT 4
10212: ARRAY
10213: PPUSH
10214: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10218: LD_VAR 0 2
10222: PPUSH
10223: LD_INT 22
10225: PUSH
10226: LD_VAR 0 1
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 21
10237: PUSH
10238: LD_INT 2
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 34
10247: PUSH
10248: LD_INT 52
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: LD_INT 3
10257: PUSH
10258: LD_INT 24
10260: PUSH
10261: LD_INT 750
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 70
10282: PUSH
10283: LD_INT 0
10285: GREATER
10286: IFFALSE 10488
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10288: LD_ADDR_VAR 0 5
10292: PUSH
10293: LD_VAR 0 2
10297: PPUSH
10298: LD_INT 22
10300: PUSH
10301: LD_VAR 0 1
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 21
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 34
10322: PUSH
10323: LD_INT 52
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 3
10332: PUSH
10333: LD_INT 24
10335: PUSH
10336: LD_INT 750
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: PPUSH
10353: CALL_OW 70
10357: PUSH
10358: FOR_IN
10359: IFFALSE 10486
// begin mechTmp = UnitsInside ( i ) ;
10361: LD_ADDR_VAR 0 6
10365: PUSH
10366: LD_VAR 0 5
10370: PPUSH
10371: CALL_OW 313
10375: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10376: LD_VAR 0 6
10380: PPUSH
10381: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10385: LD_VAR 0 6
10389: PPUSH
10390: LD_VAR 0 7
10394: PPUSH
10395: CALL_OW 189
// wait ( 0 0$2 ) ;
10399: LD_INT 70
10401: PPUSH
10402: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10406: LD_VAR 0 6
10410: PPUSH
10411: LD_VAR 0 2
10415: PPUSH
10416: LD_INT 22
10418: PUSH
10419: LD_VAR 0 1
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PUSH
10428: LD_INT 21
10430: PUSH
10431: LD_INT 2
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PUSH
10438: LD_INT 34
10440: PUSH
10441: LD_INT 52
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 24
10450: PUSH
10451: LD_INT 1000
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 58
10460: PUSH
10461: EMPTY
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: PPUSH
10471: CALL_OW 70
10475: PUSH
10476: LD_INT 1
10478: ARRAY
10479: PPUSH
10480: CALL_OW 180
// end ;
10484: GO 10358
10486: POP
10487: POP
// end ; end ;
10488: LD_VAR 0 4
10492: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10493: LD_INT 0
10495: PPUSH
10496: PPUSH
10497: PPUSH
10498: PPUSH
10499: PPUSH
10500: PPUSH
10501: PPUSH
10502: PPUSH
10503: PPUSH
10504: PPUSH
10505: PPUSH
// for i = 1 to medicCount do
10506: LD_ADDR_VAR 0 14
10510: PUSH
10511: DOUBLE
10512: LD_INT 1
10514: DEC
10515: ST_TO_ADDR
10516: LD_VAR 0 7
10520: PUSH
10521: FOR_TO
10522: IFFALSE 10604
// begin uc_side = side ;
10524: LD_ADDR_OWVAR 20
10528: PUSH
10529: LD_VAR 0 1
10533: ST_TO_ADDR
// uc_nation = nation ;
10534: LD_ADDR_OWVAR 21
10538: PUSH
10539: LD_VAR 0 2
10543: ST_TO_ADDR
// hc_name =  ;
10544: LD_ADDR_OWVAR 26
10548: PUSH
10549: LD_STRING 
10551: ST_TO_ADDR
// hc_gallery =  ;
10552: LD_ADDR_OWVAR 33
10556: PUSH
10557: LD_STRING 
10559: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10560: LD_INT 0
10562: PPUSH
10563: LD_INT 4
10565: PPUSH
10566: LD_VAR 0 8
10570: PPUSH
10571: CALL_OW 380
// un = CreateHuman ;
10575: LD_ADDR_VAR 0 16
10579: PUSH
10580: CALL_OW 44
10584: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10585: LD_VAR 0 16
10589: PPUSH
10590: LD_VAR 0 9
10594: PPUSH
10595: LD_INT 0
10597: PPUSH
10598: CALL_OW 49
// end ;
10602: GO 10521
10604: POP
10605: POP
// for i = 1 to soldierCount do
10606: LD_ADDR_VAR 0 14
10610: PUSH
10611: DOUBLE
10612: LD_INT 1
10614: DEC
10615: ST_TO_ADDR
10616: LD_VAR 0 3
10620: PUSH
10621: FOR_TO
10622: IFFALSE 10704
// begin uc_side = side ;
10624: LD_ADDR_OWVAR 20
10628: PUSH
10629: LD_VAR 0 1
10633: ST_TO_ADDR
// uc_nation = nation ;
10634: LD_ADDR_OWVAR 21
10638: PUSH
10639: LD_VAR 0 2
10643: ST_TO_ADDR
// hc_name =  ;
10644: LD_ADDR_OWVAR 26
10648: PUSH
10649: LD_STRING 
10651: ST_TO_ADDR
// hc_gallery =  ;
10652: LD_ADDR_OWVAR 33
10656: PUSH
10657: LD_STRING 
10659: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10660: LD_INT 0
10662: PPUSH
10663: LD_INT 1
10665: PPUSH
10666: LD_VAR 0 8
10670: PPUSH
10671: CALL_OW 380
// un = CreateHuman ;
10675: LD_ADDR_VAR 0 16
10679: PUSH
10680: CALL_OW 44
10684: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10685: LD_VAR 0 16
10689: PPUSH
10690: LD_VAR 0 9
10694: PPUSH
10695: LD_INT 0
10697: PPUSH
10698: CALL_OW 49
// end ;
10702: GO 10621
10704: POP
10705: POP
// for i = 1 to sniperCount do
10706: LD_ADDR_VAR 0 14
10710: PUSH
10711: DOUBLE
10712: LD_INT 1
10714: DEC
10715: ST_TO_ADDR
10716: LD_VAR 0 4
10720: PUSH
10721: FOR_TO
10722: IFFALSE 10804
// begin uc_side = side ;
10724: LD_ADDR_OWVAR 20
10728: PUSH
10729: LD_VAR 0 1
10733: ST_TO_ADDR
// uc_nation = nation ;
10734: LD_ADDR_OWVAR 21
10738: PUSH
10739: LD_VAR 0 2
10743: ST_TO_ADDR
// hc_name =  ;
10744: LD_ADDR_OWVAR 26
10748: PUSH
10749: LD_STRING 
10751: ST_TO_ADDR
// hc_gallery =  ;
10752: LD_ADDR_OWVAR 33
10756: PUSH
10757: LD_STRING 
10759: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10760: LD_INT 0
10762: PPUSH
10763: LD_INT 5
10765: PPUSH
10766: LD_VAR 0 8
10770: PPUSH
10771: CALL_OW 380
// un = CreateHuman ;
10775: LD_ADDR_VAR 0 16
10779: PUSH
10780: CALL_OW 44
10784: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10785: LD_VAR 0 16
10789: PPUSH
10790: LD_VAR 0 9
10794: PPUSH
10795: LD_INT 0
10797: PPUSH
10798: CALL_OW 49
// end ;
10802: GO 10721
10804: POP
10805: POP
// for i = 1 to bazookCount do
10806: LD_ADDR_VAR 0 14
10810: PUSH
10811: DOUBLE
10812: LD_INT 1
10814: DEC
10815: ST_TO_ADDR
10816: LD_VAR 0 5
10820: PUSH
10821: FOR_TO
10822: IFFALSE 10904
// begin uc_side = side ;
10824: LD_ADDR_OWVAR 20
10828: PUSH
10829: LD_VAR 0 1
10833: ST_TO_ADDR
// uc_nation = nation ;
10834: LD_ADDR_OWVAR 21
10838: PUSH
10839: LD_VAR 0 2
10843: ST_TO_ADDR
// hc_name =  ;
10844: LD_ADDR_OWVAR 26
10848: PUSH
10849: LD_STRING 
10851: ST_TO_ADDR
// hc_gallery =  ;
10852: LD_ADDR_OWVAR 33
10856: PUSH
10857: LD_STRING 
10859: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10860: LD_INT 0
10862: PPUSH
10863: LD_INT 9
10865: PPUSH
10866: LD_VAR 0 8
10870: PPUSH
10871: CALL_OW 380
// un = CreateHuman ;
10875: LD_ADDR_VAR 0 16
10879: PUSH
10880: CALL_OW 44
10884: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10885: LD_VAR 0 16
10889: PPUSH
10890: LD_VAR 0 9
10894: PPUSH
10895: LD_INT 0
10897: PPUSH
10898: CALL_OW 49
// end ;
10902: GO 10821
10904: POP
10905: POP
// for i = 1 to mortalCount do
10906: LD_ADDR_VAR 0 14
10910: PUSH
10911: DOUBLE
10912: LD_INT 1
10914: DEC
10915: ST_TO_ADDR
10916: LD_VAR 0 6
10920: PUSH
10921: FOR_TO
10922: IFFALSE 11004
// begin uc_side = side ;
10924: LD_ADDR_OWVAR 20
10928: PUSH
10929: LD_VAR 0 1
10933: ST_TO_ADDR
// uc_nation = nation ;
10934: LD_ADDR_OWVAR 21
10938: PUSH
10939: LD_VAR 0 2
10943: ST_TO_ADDR
// hc_name =  ;
10944: LD_ADDR_OWVAR 26
10948: PUSH
10949: LD_STRING 
10951: ST_TO_ADDR
// hc_gallery =  ;
10952: LD_ADDR_OWVAR 33
10956: PUSH
10957: LD_STRING 
10959: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10960: LD_INT 0
10962: PPUSH
10963: LD_INT 8
10965: PPUSH
10966: LD_VAR 0 8
10970: PPUSH
10971: CALL_OW 380
// un = CreateHuman ;
10975: LD_ADDR_VAR 0 16
10979: PUSH
10980: CALL_OW 44
10984: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10985: LD_VAR 0 16
10989: PPUSH
10990: LD_VAR 0 9
10994: PPUSH
10995: LD_INT 0
10997: PPUSH
10998: CALL_OW 49
// end ;
11002: GO 10921
11004: POP
11005: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11006: LD_ADDR_VAR 0 19
11010: PUSH
11011: LD_INT 22
11013: PUSH
11014: LD_VAR 0 1
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 2
11025: PUSH
11026: LD_INT 25
11028: PUSH
11029: LD_INT 1
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 25
11038: PUSH
11039: LD_INT 5
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 25
11048: PUSH
11049: LD_INT 8
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: LD_INT 25
11058: PUSH
11059: LD_INT 9
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 69
11081: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11082: LD_ADDR_VAR 0 18
11086: PUSH
11087: LD_INT 22
11089: PUSH
11090: LD_VAR 0 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 25
11101: PUSH
11102: LD_INT 4
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PPUSH
11113: CALL_OW 69
11117: ST_TO_ADDR
// for i in medic_list do
11118: LD_ADDR_VAR 0 14
11122: PUSH
11123: LD_VAR 0 18
11127: PUSH
11128: FOR_IN
11129: IFFALSE 11147
// ComMoveToArea ( i , healArea ) ;
11131: LD_VAR 0 14
11135: PPUSH
11136: LD_VAR 0 10
11140: PPUSH
11141: CALL_OW 113
11145: GO 11128
11147: POP
11148: POP
// if strategy = 1 then
11149: LD_VAR 0 12
11153: PUSH
11154: LD_INT 1
11156: EQUAL
11157: IFFALSE 11874
// begin repeat wait ( 0 0$3 ) ;
11159: LD_INT 105
11161: PPUSH
11162: CALL_OW 67
// for i in soldiersOK_list do
11166: LD_ADDR_VAR 0 14
11170: PUSH
11171: LD_VAR 0 19
11175: PUSH
11176: FOR_IN
11177: IFFALSE 11211
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11179: LD_VAR 0 14
11183: PPUSH
11184: LD_INT 80
11186: PPUSH
11187: LD_INT 109
11189: PPUSH
11190: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11194: LD_VAR 0 14
11198: PPUSH
11199: LD_INT 39
11201: PPUSH
11202: LD_INT 49
11204: PPUSH
11205: CALL_OW 174
// end ;
11209: GO 11176
11211: POP
11212: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11213: LD_INT 13
11215: PPUSH
11216: LD_INT 22
11218: PUSH
11219: LD_VAR 0 1
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PPUSH
11228: CALL_OW 70
11232: PUSH
11233: LD_INT 0
11235: GREATER
11236: IFFALSE 11159
// repeat wait ( 0 0$1 ) ;
11238: LD_INT 35
11240: PPUSH
11241: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11245: LD_ADDR_VAR 0 17
11249: PUSH
11250: LD_INT 22
11252: PUSH
11253: LD_VAR 0 1
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 1
11264: PUSH
11265: LD_INT 3
11267: PUSH
11268: LD_INT 24
11270: PUSH
11271: LD_INT 550
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 24
11284: PUSH
11285: LD_INT 250
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PPUSH
11301: CALL_OW 69
11305: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11306: LD_ADDR_VAR 0 19
11310: PUSH
11311: LD_INT 22
11313: PUSH
11314: LD_VAR 0 1
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: LD_INT 2
11325: PUSH
11326: LD_INT 25
11328: PUSH
11329: LD_INT 1
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 25
11338: PUSH
11339: LD_INT 5
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PUSH
11346: LD_INT 25
11348: PUSH
11349: LD_INT 8
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: LD_INT 25
11358: PUSH
11359: LD_INT 9
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 24
11375: PUSH
11376: LD_INT 1000
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: PPUSH
11388: CALL_OW 69
11392: ST_TO_ADDR
// if medicCount > 0 then
11393: LD_VAR 0 7
11397: PUSH
11398: LD_INT 0
11400: GREATER
11401: IFFALSE 11475
// begin if damageUnit_list > 0 then
11403: LD_VAR 0 17
11407: PUSH
11408: LD_INT 0
11410: GREATER
11411: IFFALSE 11475
// begin for i in damageUnit_list do
11413: LD_ADDR_VAR 0 14
11417: PUSH
11418: LD_VAR 0 17
11422: PUSH
11423: FOR_IN
11424: IFFALSE 11473
// begin ComMoveToArea ( i , healArea ) ;
11426: LD_VAR 0 14
11430: PPUSH
11431: LD_VAR 0 10
11435: PPUSH
11436: CALL_OW 113
// for j in medic_list do
11440: LD_ADDR_VAR 0 15
11444: PUSH
11445: LD_VAR 0 18
11449: PUSH
11450: FOR_IN
11451: IFFALSE 11469
// AddComHeal ( j , i ) ;
11453: LD_VAR 0 15
11457: PPUSH
11458: LD_VAR 0 14
11462: PPUSH
11463: CALL_OW 188
11467: GO 11450
11469: POP
11470: POP
// end ;
11471: GO 11423
11473: POP
11474: POP
// end ; end ; for i in soldiersOK_list do
11475: LD_ADDR_VAR 0 14
11479: PUSH
11480: LD_VAR 0 19
11484: PUSH
11485: FOR_IN
11486: IFFALSE 11668
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11488: LD_ADDR_VAR 0 22
11492: PUSH
11493: LD_INT 22
11495: PUSH
11496: LD_VAR 0 11
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PPUSH
11505: CALL_OW 69
11509: PUSH
11510: LD_EXP 45
11514: DIFF
11515: PPUSH
11516: LD_VAR 0 14
11520: PPUSH
11521: CALL_OW 74
11525: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11526: LD_ADDR_VAR 0 23
11530: PUSH
11531: LD_INT 22
11533: PUSH
11534: LD_VAR 0 11
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 2
11545: PUSH
11546: LD_INT 59
11548: PUSH
11549: EMPTY
11550: LIST
11551: PUSH
11552: LD_INT 21
11554: PUSH
11555: LD_INT 1
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 21
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: PPUSH
11585: CALL_OW 69
11589: PPUSH
11590: LD_VAR 0 14
11594: PPUSH
11595: CALL_OW 74
11599: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11600: LD_VAR 0 14
11604: PPUSH
11605: LD_VAR 0 22
11609: PPUSH
11610: CALL_OW 296
11614: PUSH
11615: LD_INT 8
11617: PLUS
11618: PUSH
11619: LD_VAR 0 14
11623: PPUSH
11624: LD_VAR 0 23
11628: PPUSH
11629: CALL_OW 296
11633: LESS
11634: IFFALSE 11652
// begin ComAttackUnit ( i , target1 ) ;
11636: LD_VAR 0 14
11640: PPUSH
11641: LD_VAR 0 22
11645: PPUSH
11646: CALL_OW 115
// end else
11650: GO 11666
// begin ComAttackUnit ( i , target2 ) ;
11652: LD_VAR 0 14
11656: PPUSH
11657: LD_VAR 0 23
11661: PPUSH
11662: CALL_OW 115
// end ; end ;
11666: GO 11485
11668: POP
11669: POP
// for i in soldiersOK_list do
11670: LD_ADDR_VAR 0 14
11674: PUSH
11675: LD_VAR 0 19
11679: PUSH
11680: FOR_IN
11681: IFFALSE 11863
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11683: LD_ADDR_VAR 0 22
11687: PUSH
11688: LD_INT 22
11690: PUSH
11691: LD_VAR 0 11
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 69
11704: PUSH
11705: LD_EXP 45
11709: DIFF
11710: PPUSH
11711: LD_VAR 0 14
11715: PPUSH
11716: CALL_OW 74
11720: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11721: LD_ADDR_VAR 0 23
11725: PUSH
11726: LD_INT 22
11728: PUSH
11729: LD_VAR 0 11
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PUSH
11738: LD_INT 2
11740: PUSH
11741: LD_INT 59
11743: PUSH
11744: EMPTY
11745: LIST
11746: PUSH
11747: LD_INT 21
11749: PUSH
11750: LD_INT 1
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 21
11759: PUSH
11760: LD_INT 2
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: EMPTY
11778: LIST
11779: PPUSH
11780: CALL_OW 69
11784: PPUSH
11785: LD_VAR 0 14
11789: PPUSH
11790: CALL_OW 74
11794: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11795: LD_VAR 0 14
11799: PPUSH
11800: LD_VAR 0 22
11804: PPUSH
11805: CALL_OW 296
11809: PUSH
11810: LD_INT 8
11812: PLUS
11813: PUSH
11814: LD_VAR 0 14
11818: PPUSH
11819: LD_VAR 0 23
11823: PPUSH
11824: CALL_OW 296
11828: LESS
11829: IFFALSE 11847
// begin ComAttackUnit ( i , target1 ) ;
11831: LD_VAR 0 14
11835: PPUSH
11836: LD_VAR 0 22
11840: PPUSH
11841: CALL_OW 115
// end else
11845: GO 11861
// begin ComAttackUnit ( i , target2 ) ;
11847: LD_VAR 0 14
11851: PPUSH
11852: LD_VAR 0 23
11856: PPUSH
11857: CALL_OW 115
// end ; end ;
11861: GO 11680
11863: POP
11864: POP
// until soldiersOK_list = [ ] ;
11865: LD_VAR 0 19
11869: PUSH
11870: EMPTY
11871: EQUAL
11872: IFFALSE 11238
// end ; if strategy = 2 then
11874: LD_VAR 0 12
11878: PUSH
11879: LD_INT 2
11881: EQUAL
11882: IFFALSE 12587
// begin repeat wait ( 0 0$1 ) ;
11884: LD_INT 35
11886: PPUSH
11887: CALL_OW 67
// for i in soldiersOK_list do
11891: LD_ADDR_VAR 0 14
11895: PUSH
11896: LD_VAR 0 19
11900: PUSH
11901: FOR_IN
11902: IFFALSE 11936
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11904: LD_VAR 0 14
11908: PPUSH
11909: LD_INT 117
11911: PPUSH
11912: LD_INT 97
11914: PPUSH
11915: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11919: LD_VAR 0 14
11923: PPUSH
11924: LD_INT 94
11926: PPUSH
11927: LD_INT 50
11929: PPUSH
11930: CALL_OW 174
// end ;
11934: GO 11901
11936: POP
11937: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11938: LD_INT 14
11940: PPUSH
11941: LD_INT 22
11943: PUSH
11944: LD_VAR 0 1
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PPUSH
11953: CALL_OW 70
11957: PUSH
11958: LD_INT 0
11960: GREATER
11961: IFFALSE 11884
// repeat wait ( 0 0$3 ) ;
11963: LD_INT 105
11965: PPUSH
11966: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11970: LD_ADDR_VAR 0 17
11974: PUSH
11975: LD_INT 22
11977: PUSH
11978: LD_VAR 0 1
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: LD_INT 1
11989: PUSH
11990: LD_INT 3
11992: PUSH
11993: LD_INT 24
11995: PUSH
11996: LD_INT 550
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 24
12009: PUSH
12010: LD_INT 250
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: LIST
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PPUSH
12026: CALL_OW 69
12030: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12031: LD_ADDR_VAR 0 19
12035: PUSH
12036: LD_INT 22
12038: PUSH
12039: LD_VAR 0 1
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 2
12050: PUSH
12051: LD_INT 25
12053: PUSH
12054: LD_INT 1
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 25
12063: PUSH
12064: LD_INT 5
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 25
12073: PUSH
12074: LD_INT 8
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 25
12083: PUSH
12084: LD_INT 9
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 24
12100: PUSH
12101: LD_INT 1000
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: PPUSH
12113: CALL_OW 69
12117: ST_TO_ADDR
// if medicCount > 0 then
12118: LD_VAR 0 7
12122: PUSH
12123: LD_INT 0
12125: GREATER
12126: IFFALSE 12200
// begin if damageUnit_list > 0 then
12128: LD_VAR 0 17
12132: PUSH
12133: LD_INT 0
12135: GREATER
12136: IFFALSE 12200
// begin for i in damageUnit_list do
12138: LD_ADDR_VAR 0 14
12142: PUSH
12143: LD_VAR 0 17
12147: PUSH
12148: FOR_IN
12149: IFFALSE 12198
// begin ComMoveToArea ( i , healArea ) ;
12151: LD_VAR 0 14
12155: PPUSH
12156: LD_VAR 0 10
12160: PPUSH
12161: CALL_OW 113
// for j in medic_list do
12165: LD_ADDR_VAR 0 15
12169: PUSH
12170: LD_VAR 0 18
12174: PUSH
12175: FOR_IN
12176: IFFALSE 12194
// AddComHeal ( j , i ) ;
12178: LD_VAR 0 15
12182: PPUSH
12183: LD_VAR 0 14
12187: PPUSH
12188: CALL_OW 188
12192: GO 12175
12194: POP
12195: POP
// end ;
12196: GO 12148
12198: POP
12199: POP
// end ; end ; for i in soldiersOK_list do
12200: LD_ADDR_VAR 0 14
12204: PUSH
12205: LD_VAR 0 19
12209: PUSH
12210: FOR_IN
12211: IFFALSE 12387
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12213: LD_ADDR_VAR 0 22
12217: PUSH
12218: LD_INT 22
12220: PUSH
12221: LD_VAR 0 11
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PPUSH
12230: CALL_OW 69
12234: PPUSH
12235: LD_VAR 0 14
12239: PPUSH
12240: CALL_OW 74
12244: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12245: LD_ADDR_VAR 0 23
12249: PUSH
12250: LD_INT 22
12252: PUSH
12253: LD_VAR 0 11
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 2
12264: PUSH
12265: LD_INT 59
12267: PUSH
12268: EMPTY
12269: LIST
12270: PUSH
12271: LD_INT 21
12273: PUSH
12274: LD_INT 1
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 21
12283: PUSH
12284: LD_INT 2
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: PPUSH
12304: CALL_OW 69
12308: PPUSH
12309: LD_VAR 0 14
12313: PPUSH
12314: CALL_OW 74
12318: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12319: LD_VAR 0 14
12323: PPUSH
12324: LD_VAR 0 22
12328: PPUSH
12329: CALL_OW 296
12333: PUSH
12334: LD_INT 8
12336: PLUS
12337: PUSH
12338: LD_VAR 0 14
12342: PPUSH
12343: LD_VAR 0 23
12347: PPUSH
12348: CALL_OW 296
12352: LESS
12353: IFFALSE 12371
// begin ComAttackUnit ( i , target1 ) ;
12355: LD_VAR 0 14
12359: PPUSH
12360: LD_VAR 0 22
12364: PPUSH
12365: CALL_OW 115
// end else
12369: GO 12385
// begin ComAttackUnit ( i , target2 ) ;
12371: LD_VAR 0 14
12375: PPUSH
12376: LD_VAR 0 23
12380: PPUSH
12381: CALL_OW 115
// end ; end ;
12385: GO 12210
12387: POP
12388: POP
// for i in soldiersOK_list do
12389: LD_ADDR_VAR 0 14
12393: PUSH
12394: LD_VAR 0 19
12398: PUSH
12399: FOR_IN
12400: IFFALSE 12576
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12402: LD_ADDR_VAR 0 22
12406: PUSH
12407: LD_INT 22
12409: PUSH
12410: LD_VAR 0 11
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PPUSH
12419: CALL_OW 69
12423: PPUSH
12424: LD_VAR 0 14
12428: PPUSH
12429: CALL_OW 74
12433: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12434: LD_ADDR_VAR 0 23
12438: PUSH
12439: LD_INT 22
12441: PUSH
12442: LD_VAR 0 11
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 2
12453: PUSH
12454: LD_INT 59
12456: PUSH
12457: EMPTY
12458: LIST
12459: PUSH
12460: LD_INT 21
12462: PUSH
12463: LD_INT 1
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 21
12472: PUSH
12473: LD_INT 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: PPUSH
12493: CALL_OW 69
12497: PPUSH
12498: LD_VAR 0 14
12502: PPUSH
12503: CALL_OW 74
12507: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12508: LD_VAR 0 14
12512: PPUSH
12513: LD_VAR 0 22
12517: PPUSH
12518: CALL_OW 296
12522: PUSH
12523: LD_INT 8
12525: PLUS
12526: PUSH
12527: LD_VAR 0 14
12531: PPUSH
12532: LD_VAR 0 23
12536: PPUSH
12537: CALL_OW 296
12541: LESS
12542: IFFALSE 12560
// begin ComAttackUnit ( i , target1 ) ;
12544: LD_VAR 0 14
12548: PPUSH
12549: LD_VAR 0 22
12553: PPUSH
12554: CALL_OW 115
// end else
12558: GO 12574
// begin ComAttackUnit ( i , target2 ) ;
12560: LD_VAR 0 14
12564: PPUSH
12565: LD_VAR 0 23
12569: PPUSH
12570: CALL_OW 115
// end ; end ;
12574: GO 12399
12576: POP
12577: POP
// until soldiersOK_list = [ ] ;
12578: LD_VAR 0 19
12582: PUSH
12583: EMPTY
12584: EQUAL
12585: IFFALSE 11963
// end ; end ; end_of_file
12587: LD_VAR 0 13
12591: RET
// every 0 0$01 do
12592: GO 12594
12594: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12595: LD_INT 22
12597: PUSH
12598: LD_INT 1
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 25
12607: PUSH
12608: LD_INT 2
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PPUSH
12619: CALL_OW 69
12623: PUSH
12624: LD_INT 0
12626: EQUAL
12627: IFFALSE 12641
// SetClass ( JMM , 2 ) ;
12629: LD_EXP 1
12633: PPUSH
12634: LD_INT 2
12636: PPUSH
12637: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12641: LD_STRING M1
12643: PPUSH
12644: CALL_OW 337
// case difficulty of 1 :
12648: LD_OWVAR 67
12652: PUSH
12653: LD_INT 1
12655: DOUBLE
12656: EQUAL
12657: IFTRUE 12661
12659: GO 12671
12661: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12662: LD_STRING M1-1
12664: PPUSH
12665: CALL_OW 337
12669: GO 12708
12671: LD_INT 2
12673: DOUBLE
12674: EQUAL
12675: IFTRUE 12679
12677: GO 12689
12679: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12680: LD_STRING M1-2
12682: PPUSH
12683: CALL_OW 337
12687: GO 12708
12689: LD_INT 3
12691: DOUBLE
12692: EQUAL
12693: IFTRUE 12697
12695: GO 12707
12697: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12698: LD_STRING M1-3
12700: PPUSH
12701: CALL_OW 337
12705: GO 12708
12707: POP
// ChangeMissionObjectives ( M1cont ) ;
12708: LD_STRING M1cont
12710: PPUSH
12711: CALL_OW 337
// SaveForQuickRestart ;
12715: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12719: LD_INT 525
12721: PPUSH
12722: LD_INT 700
12724: PPUSH
12725: CALL_OW 12
12729: PPUSH
12730: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12734: LD_INT 5
12736: PPUSH
12737: LD_INT 82
12739: PPUSH
12740: LD_INT 38
12742: PPUSH
12743: LD_INT 10
12745: PPUSH
12746: LD_INT 1
12748: PPUSH
12749: CALL_OW 56
// wait ( 0 0$14 ) ;
12753: LD_INT 490
12755: PPUSH
12756: CALL_OW 67
// firstCrateSpawn := true ;
12760: LD_ADDR_EXP 41
12764: PUSH
12765: LD_INT 1
12767: ST_TO_ADDR
// end ;
12768: END
// every 0 0$02 trigger firstCrateSpawn do
12769: LD_EXP 41
12773: IFFALSE 13136
12775: GO 12777
12777: DISABLE
// begin if IsOk ( Lisa ) then
12778: LD_EXP 2
12782: PPUSH
12783: CALL_OW 302
12787: IFFALSE 12803
// Say ( Lisa , DR0-Lisa-1 ) else
12789: LD_EXP 2
12793: PPUSH
12794: LD_STRING DR0-Lisa-1
12796: PPUSH
12797: CALL_OW 88
12801: GO 12949
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12803: LD_INT 22
12805: PUSH
12806: LD_INT 1
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: PUSH
12813: LD_INT 21
12815: PUSH
12816: LD_INT 1
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 26
12825: PUSH
12826: LD_INT 1
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 2
12835: PUSH
12836: LD_INT 25
12838: PUSH
12839: LD_INT 1
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 25
12848: PUSH
12849: LD_INT 2
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 25
12858: PUSH
12859: LD_INT 3
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 25
12868: PUSH
12869: LD_INT 4
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: PPUSH
12889: CALL_OW 69
12893: PUSH
12894: LD_EXP 1
12898: PUSH
12899: LD_EXP 8
12903: PUSH
12904: LD_EXP 5
12908: PUSH
12909: LD_EXP 6
12913: PUSH
12914: LD_EXP 7
12918: PUSH
12919: LD_EXP 4
12923: PUSH
12924: LD_EXP 3
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: DIFF
12938: PPUSH
12939: LD_STRING DR0-Sol1-1
12941: PPUSH
12942: LD_STRING DR0-Sol1-1
12944: PPUSH
12945: CALL 5985 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12949: LD_INT 22
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 21
12961: PUSH
12962: LD_INT 1
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 26
12971: PUSH
12972: LD_INT 1
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: LD_INT 2
12981: PUSH
12982: LD_INT 25
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 25
12994: PUSH
12995: LD_INT 2
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 25
13004: PUSH
13005: LD_INT 3
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 25
13014: PUSH
13015: LD_INT 4
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: PPUSH
13035: CALL_OW 69
13039: PUSH
13040: LD_EXP 1
13044: PUSH
13045: LD_EXP 8
13049: PUSH
13050: LD_EXP 5
13054: PUSH
13055: LD_EXP 2
13059: PUSH
13060: LD_EXP 6
13064: PUSH
13065: LD_EXP 7
13069: PUSH
13070: LD_EXP 4
13074: PUSH
13075: LD_EXP 3
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: DIFF
13090: PPUSH
13091: LD_STRING DR0-Sol2-1
13093: PPUSH
13094: LD_STRING DR0-Sol2-1
13096: PPUSH
13097: CALL 5985 0 3
// if IsOk ( Cyrus ) then
13101: LD_EXP 4
13105: PPUSH
13106: CALL_OW 302
13110: IFFALSE 13124
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13112: LD_EXP 4
13116: PPUSH
13117: LD_STRING DR0-Cyrus-1
13119: PPUSH
13120: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13124: LD_EXP 1
13128: PPUSH
13129: LD_STRING DR0-JMM-1
13131: PPUSH
13132: CALL_OW 88
// end ;
13136: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13137: LD_EXP 5
13141: PPUSH
13142: CALL_OW 302
13146: PUSH
13147: LD_INT 22
13149: PUSH
13150: LD_INT 1
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 25
13159: PUSH
13160: LD_INT 16
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PPUSH
13171: CALL_OW 69
13175: PUSH
13176: LD_INT 0
13178: GREATER
13179: AND
13180: PUSH
13181: LD_INT 1
13183: PPUSH
13184: CALL_OW 463
13188: NOT
13189: AND
13190: IFFALSE 13468
13192: GO 13194
13194: DISABLE
// begin DialogueOn ;
13195: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13199: LD_EXP 5
13203: PPUSH
13204: LD_STRING D10-Frank-1
13206: PPUSH
13207: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13211: LD_INT 22
13213: PUSH
13214: LD_INT 1
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 2
13233: PUSH
13234: LD_INT 25
13236: PUSH
13237: LD_INT 1
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 25
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 25
13256: PUSH
13257: LD_INT 3
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 25
13266: PUSH
13267: LD_INT 4
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: LIST
13285: PPUSH
13286: CALL_OW 69
13290: PUSH
13291: LD_EXP 1
13295: PUSH
13296: LD_EXP 5
13300: PUSH
13301: LD_EXP 2
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: DIFF
13311: PPUSH
13312: LD_STRING D10-Sol1-1
13314: PPUSH
13315: LD_STRING D10-FSol1-1
13317: PPUSH
13318: CALL 5985 0 3
// Say ( Frank , D10-Frank-2 ) ;
13322: LD_EXP 5
13326: PPUSH
13327: LD_STRING D10-Frank-2
13329: PPUSH
13330: CALL_OW 88
// if IsOK ( Lisa ) then
13334: LD_EXP 2
13338: PPUSH
13339: CALL_OW 302
13343: IFFALSE 13359
// begin Say ( Lisa , D10-Lisa-2 ) ;
13345: LD_EXP 2
13349: PPUSH
13350: LD_STRING D10-Lisa-2
13352: PPUSH
13353: CALL_OW 88
// end else
13357: GO 13464
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13359: LD_INT 22
13361: PUSH
13362: LD_INT 1
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 21
13371: PUSH
13372: LD_INT 1
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: LD_INT 25
13384: PUSH
13385: LD_INT 1
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 25
13394: PUSH
13395: LD_INT 2
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 25
13404: PUSH
13405: LD_INT 3
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 25
13414: PUSH
13415: LD_INT 4
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL_OW 69
13438: PUSH
13439: LD_EXP 1
13443: PUSH
13444: LD_EXP 5
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: DIFF
13453: PPUSH
13454: LD_STRING D10-Sol1-2
13456: PPUSH
13457: LD_STRING D10-FSol1-2
13459: PPUSH
13460: CALL 5985 0 3
// end ; DialogueOff ;
13464: CALL_OW 7
// end ;
13468: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13469: LD_INT 1
13471: PPUSH
13472: CALL_OW 463
13476: NOT
13477: IFFALSE 13740
13479: GO 13481
13481: DISABLE
// begin HarrisonSupport ;
13482: CALL 2477 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13486: LD_EXP 17
13490: PPUSH
13491: CALL_OW 310
13495: PPUSH
13496: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13500: LD_EXP 17
13504: PPUSH
13505: LD_STRING DEng-Eng1-1
13507: PPUSH
13508: CALL_OW 88
// wait ( 1 1$0 ) ;
13512: LD_INT 2100
13514: PPUSH
13515: CALL_OW 67
// DialogueOn ;
13519: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13523: LD_EXP 14
13527: PPUSH
13528: LD_STRING DRem-Har-1
13530: PPUSH
13531: CALL_OW 94
// if contactWithRussian = 1 then
13535: LD_EXP 22
13539: PUSH
13540: LD_INT 1
13542: EQUAL
13543: IFFALSE 13559
// begin Say ( JMM , DRem-JMM-1 ) ;
13545: LD_EXP 1
13549: PPUSH
13550: LD_STRING DRem-JMM-1
13552: PPUSH
13553: CALL_OW 88
// end else
13557: GO 13571
// begin Say ( JMM , DRem-JMM-1a ) ;
13559: LD_EXP 1
13563: PPUSH
13564: LD_STRING DRem-JMM-1a
13566: PPUSH
13567: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13571: LD_EXP 14
13575: PPUSH
13576: LD_STRING DRem-Har-2
13578: PPUSH
13579: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13583: LD_STRING DenisInDelta
13585: PPUSH
13586: LD_INT 0
13588: PPUSH
13589: CALL_OW 30
13593: PUSH
13594: LD_INT 1
13596: EQUAL
13597: IFFALSE 13613
// begin Say ( JMM , DRem-JMM-2 ) ;
13599: LD_EXP 1
13603: PPUSH
13604: LD_STRING DRem-JMM-2
13606: PPUSH
13607: CALL_OW 88
// end else
13611: GO 13625
// begin Say ( JMM , DRem-JMM-2a ) ;
13613: LD_EXP 1
13617: PPUSH
13618: LD_STRING DRem-JMM-2a
13620: PPUSH
13621: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13625: LD_EXP 14
13629: PPUSH
13630: LD_STRING DRem-Har-3
13632: PPUSH
13633: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13637: LD_EXP 1
13641: PPUSH
13642: LD_STRING DRem-JMM-3
13644: PPUSH
13645: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13649: LD_EXP 14
13653: PPUSH
13654: LD_STRING DRem-Har-4
13656: PPUSH
13657: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13661: LD_STRING DenisInDelta
13663: PPUSH
13664: LD_INT 0
13666: PPUSH
13667: CALL_OW 30
13671: PUSH
13672: LD_INT 1
13674: EQUAL
13675: IFFALSE 13703
// begin Say ( JMM , DRem-JMM-4 ) ;
13677: LD_EXP 1
13681: PPUSH
13682: LD_STRING DRem-JMM-4
13684: PPUSH
13685: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13689: LD_EXP 14
13693: PPUSH
13694: LD_STRING DRem-Har-5
13696: PPUSH
13697: CALL_OW 94
// end else
13701: GO 13736
// begin SetRestrict ( 36 , 1 , true ) ;
13703: LD_INT 36
13705: PPUSH
13706: LD_INT 1
13708: PPUSH
13709: LD_INT 1
13711: PPUSH
13712: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13716: LD_INT 15
13718: PPUSH
13719: LD_INT 1
13721: PPUSH
13722: LD_INT 1
13724: PPUSH
13725: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13729: LD_STRING MR
13731: PPUSH
13732: CALL_OW 337
// end ; DialogueOff ;
13736: CALL_OW 7
// end ;
13740: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do var tmp ;
13741: LD_STRING DenisInDelta
13743: PPUSH
13744: LD_INT 0
13746: PPUSH
13747: CALL_OW 30
13751: PUSH
13752: LD_INT 1
13754: EQUAL
13755: PUSH
13756: LD_INT 1
13758: PPUSH
13759: CALL_OW 463
13763: NOT
13764: AND
13765: IFFALSE 13998
13767: GO 13769
13769: DISABLE
13770: LD_INT 0
13772: PPUSH
// begin PrepareDenis ;
13773: CALL 2199 0 0
// CenterNowOnUnits ( Denis ) ;
13777: LD_EXP 9
13781: PPUSH
13782: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13786: LD_ADDR_VAR 0 1
13790: PUSH
13791: LD_INT 22
13793: PUSH
13794: LD_INT 1
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PPUSH
13801: CALL_OW 69
13805: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13806: LD_EXP 9
13810: PPUSH
13811: LD_VAR 0 1
13815: PPUSH
13816: LD_EXP 9
13820: PPUSH
13821: CALL_OW 74
13825: PPUSH
13826: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13830: LD_INT 35
13832: PPUSH
13833: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13837: LD_INT 22
13839: PUSH
13840: LD_INT 1
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 91
13849: PUSH
13850: LD_EXP 9
13854: PUSH
13855: LD_INT 10
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PPUSH
13867: CALL_OW 69
13871: IFFALSE 13830
// SetSide ( Denis , 1 ) ;
13873: LD_EXP 9
13877: PPUSH
13878: LD_INT 1
13880: PPUSH
13881: CALL_OW 235
// DialogueOn ;
13885: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13889: LD_EXP 9
13893: PPUSH
13894: LD_STRING DDen-Den-1
13896: PPUSH
13897: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13901: LD_EXP 1
13905: PPUSH
13906: LD_STRING DDen-JMM-1
13908: PPUSH
13909: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13913: LD_EXP 9
13917: PPUSH
13918: LD_STRING DDen-Den-2
13920: PPUSH
13921: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13925: LD_EXP 1
13929: PPUSH
13930: LD_STRING DDen-JMM-2
13932: PPUSH
13933: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13937: LD_EXP 9
13941: PPUSH
13942: LD_STRING DDen-Den-3
13944: PPUSH
13945: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13949: LD_EXP 1
13953: PPUSH
13954: LD_STRING DDen-JMM-3
13956: PPUSH
13957: CALL_OW 88
// DialogueOff ;
13961: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13965: LD_INT 36
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_INT 1
13973: PPUSH
13974: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13978: LD_INT 15
13980: PPUSH
13981: LD_INT 1
13983: PPUSH
13984: LD_INT 1
13986: PPUSH
13987: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13991: LD_STRING MR
13993: PPUSH
13994: CALL_OW 337
// end ;
13998: PPOPN 1
14000: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14001: CALL 14056 0 0
14005: PUSH
14006: LD_EXP 9
14010: PPUSH
14011: CALL_OW 302
14015: AND
14016: PUSH
14017: LD_INT 1
14019: PPUSH
14020: CALL_OW 463
14024: NOT
14025: AND
14026: IFFALSE 14055
14028: GO 14030
14030: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14031: LD_EXP 9
14035: PPUSH
14036: LD_STRING DR1-Den-1
14038: PPUSH
14039: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14043: LD_EXP 1
14047: PPUSH
14048: LD_STRING DR1-JMM-1
14050: PPUSH
14051: CALL_OW 88
// end ;
14055: END
// function CheckOptoLab ; var i ; begin
14056: LD_INT 0
14058: PPUSH
14059: PPUSH
// result = false ;
14060: LD_ADDR_VAR 0 1
14064: PUSH
14065: LD_INT 0
14067: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14068: LD_ADDR_VAR 0 2
14072: PUSH
14073: LD_INT 22
14075: PUSH
14076: LD_INT 1
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 2
14085: PUSH
14086: LD_INT 30
14088: PUSH
14089: LD_INT 7
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 30
14098: PUSH
14099: LD_INT 8
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PPUSH
14115: CALL_OW 69
14119: PUSH
14120: FOR_IN
14121: IFFALSE 14173
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14123: LD_VAR 0 2
14127: PPUSH
14128: LD_INT 1
14130: PPUSH
14131: CALL_OW 268
14135: PUSH
14136: LD_INT 15
14138: EQUAL
14139: PUSH
14140: LD_VAR 0 2
14144: PPUSH
14145: LD_INT 2
14147: PPUSH
14148: CALL_OW 268
14152: PUSH
14153: LD_INT 15
14155: EQUAL
14156: OR
14157: IFFALSE 14169
// begin result = true ;
14159: LD_ADDR_VAR 0 1
14163: PUSH
14164: LD_INT 1
14166: ST_TO_ADDR
// break ;
14167: GO 14173
// end ; break ;
14169: GO 14173
// end ;
14171: GO 14120
14173: POP
14174: POP
// end ;
14175: LD_VAR 0 1
14179: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14180: LD_INT 15
14182: PPUSH
14183: LD_INT 1
14185: PPUSH
14186: CALL_OW 321
14190: PUSH
14191: LD_INT 2
14193: EQUAL
14194: PUSH
14195: LD_EXP 9
14199: PPUSH
14200: CALL_OW 302
14204: AND
14205: PUSH
14206: LD_INT 1
14208: PPUSH
14209: CALL_OW 463
14213: NOT
14214: AND
14215: IFFALSE 14447
14217: GO 14219
14219: DISABLE
// begin DialogueOn ;
14220: CALL_OW 6
// if IsOK ( Denis ) then
14224: LD_EXP 9
14228: PPUSH
14229: CALL_OW 302
14233: IFFALSE 14249
// begin Say ( Denis , DR2-Den-1 ) ;
14235: LD_EXP 9
14239: PPUSH
14240: LD_STRING DR2-Den-1
14242: PPUSH
14243: CALL_OW 88
// end else
14247: GO 14308
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14249: LD_INT 22
14251: PUSH
14252: LD_INT 1
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 1
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 25
14271: PUSH
14272: LD_INT 4
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: LIST
14283: PPUSH
14284: CALL_OW 69
14288: PUSH
14289: LD_EXP 1
14293: PUSH
14294: EMPTY
14295: LIST
14296: DIFF
14297: PPUSH
14298: LD_STRING DR2-Sci1-1
14300: PPUSH
14301: LD_STRING DR2-FSci1-1
14303: PPUSH
14304: CALL 5985 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14308: LD_EXP 1
14312: PPUSH
14313: LD_STRING DR2-JMM-1
14315: PPUSH
14316: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14320: LD_INT 22
14322: PUSH
14323: LD_INT 1
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 21
14332: PUSH
14333: LD_INT 1
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: LD_INT 25
14345: PUSH
14346: LD_INT 1
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 25
14355: PUSH
14356: LD_INT 2
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 25
14365: PUSH
14366: LD_INT 3
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 25
14375: PUSH
14376: LD_INT 4
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: PPUSH
14395: CALL_OW 69
14399: PUSH
14400: LD_EXP 1
14404: PUSH
14405: LD_EXP 9
14409: PUSH
14410: LD_EXP 8
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: DIFF
14420: PPUSH
14421: LD_STRING DR2-Sol1-1
14423: PPUSH
14424: LD_STRING DR2-Sol1-11
14426: PPUSH
14427: CALL 5985 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14431: LD_EXP 1
14435: PPUSH
14436: LD_STRING DR2-JMM-2
14438: PPUSH
14439: CALL_OW 88
// DialogueOff ;
14443: CALL_OW 7
// end ;
14447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14448: LD_INT 22
14450: PUSH
14451: LD_INT 1
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 30
14460: PUSH
14461: LD_INT 36
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PPUSH
14472: CALL_OW 69
14476: PUSH
14477: LD_INT 0
14479: EQUAL
14480: PUSH
14481: LD_INT 22
14483: PUSH
14484: LD_INT 1
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 21
14493: PUSH
14494: LD_INT 2
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 33
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: PPUSH
14516: CALL_OW 69
14520: PUSH
14521: LD_INT 0
14523: GREATER
14524: AND
14525: PUSH
14526: LD_EXP 23
14530: PUSH
14531: LD_INT 0
14533: EQUAL
14534: AND
14535: PUSH
14536: LD_INT 1
14538: PPUSH
14539: CALL_OW 463
14543: NOT
14544: AND
14545: IFFALSE 14671
14547: GO 14549
14549: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14550: LD_INT 22
14552: PUSH
14553: LD_INT 1
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 21
14562: PUSH
14563: LD_INT 1
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 25
14572: PUSH
14573: LD_INT 3
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: PPUSH
14585: CALL_OW 69
14589: PUSH
14590: LD_EXP 1
14594: PUSH
14595: LD_EXP 6
14599: PUSH
14600: LD_EXP 7
14604: PUSH
14605: LD_EXP 9
14609: PUSH
14610: LD_EXP 15
14614: PUSH
14615: LD_EXP 3
14619: PUSH
14620: LD_EXP 4
14624: PUSH
14625: LD_EXP 2
14629: PUSH
14630: LD_EXP 5
14634: PUSH
14635: LD_EXP 8
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: DIFF
14652: PPUSH
14653: LD_STRING D3a-Mech1-1
14655: PPUSH
14656: LD_STRING D3a-Mech1-1
14658: PPUSH
14659: CALL 5985 0 3
// firstTower = 2 ;
14663: LD_ADDR_EXP 23
14667: PUSH
14668: LD_INT 2
14670: ST_TO_ADDR
// end ;
14671: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14672: LD_INT 22
14674: PUSH
14675: LD_INT 3
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 21
14684: PUSH
14685: LD_INT 3
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PPUSH
14696: CALL_OW 69
14700: PUSH
14701: LD_INT 0
14703: EQUAL
14704: IFFALSE 14819
14706: GO 14708
14708: DISABLE
14709: LD_INT 0
14711: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14712: LD_ADDR_VAR 0 1
14716: PUSH
14717: LD_INT 22
14719: PUSH
14720: LD_INT 1
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 21
14729: PUSH
14730: LD_INT 1
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 2
14739: PUSH
14740: LD_INT 25
14742: PUSH
14743: LD_INT 1
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 25
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 25
14762: PUSH
14763: LD_INT 3
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: LD_INT 25
14772: PUSH
14773: LD_INT 4
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: PUSH
14797: FOR_IN
14798: IFFALSE 14817
// AddExperience ( i , 1 , 10000 ) ;
14800: LD_VAR 0 1
14804: PPUSH
14805: LD_INT 1
14807: PPUSH
14808: LD_INT 10000
14810: PPUSH
14811: CALL_OW 492
14815: GO 14797
14817: POP
14818: POP
// end ;
14819: PPOPN 1
14821: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14822: LD_INT 22
14824: PUSH
14825: LD_INT 1
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 30
14834: PUSH
14835: LD_INT 36
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PPUSH
14846: CALL_OW 69
14850: PUSH
14851: LD_INT 0
14853: GREATER
14854: PUSH
14855: LD_INT 22
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 21
14867: PUSH
14868: LD_INT 2
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 33
14877: PUSH
14878: LD_INT 2
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: LIST
14889: PPUSH
14890: CALL_OW 69
14894: PUSH
14895: LD_INT 0
14897: GREATER
14898: AND
14899: PUSH
14900: CALL 15492 0 0
14904: AND
14905: PUSH
14906: LD_INT 1
14908: PPUSH
14909: CALL_OW 463
14913: NOT
14914: AND
14915: IFFALSE 15489
14917: GO 14919
14919: DISABLE
14920: LD_INT 0
14922: PPUSH
14923: PPUSH
14924: PPUSH
14925: PPUSH
14926: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14927: LD_ADDR_VAR 0 3
14931: PUSH
14932: LD_INT 22
14934: PUSH
14935: LD_INT 1
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 30
14944: PUSH
14945: LD_INT 36
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PPUSH
14956: CALL_OW 69
14960: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
14961: LD_ADDR_VAR 0 4
14965: PUSH
14966: LD_INT 22
14968: PUSH
14969: LD_INT 1
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 21
14978: PUSH
14979: LD_INT 2
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 33
14988: PUSH
14989: LD_INT 2
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: PPUSH
15001: CALL_OW 69
15005: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15006: LD_ADDR_VAR 0 5
15010: PUSH
15011: EMPTY
15012: ST_TO_ADDR
// for i in tmpControlTowers do
15013: LD_ADDR_VAR 0 1
15017: PUSH
15018: LD_VAR 0 3
15022: PUSH
15023: FOR_IN
15024: IFFALSE 15487
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15026: LD_EXP 1
15030: PPUSH
15031: CALL_OW 310
15035: PUSH
15036: LD_VAR 0 1
15040: EQUAL
15041: PUSH
15042: LD_EXP 1
15046: PPUSH
15047: CALL_OW 257
15051: PUSH
15052: LD_INT 3
15054: EQUAL
15055: AND
15056: IFFALSE 15186
// begin InGameOn ;
15058: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15062: LD_VAR 0 4
15066: PUSH
15067: LD_INT 1
15069: ARRAY
15070: PPUSH
15071: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15075: LD_EXP 1
15079: PPUSH
15080: LD_STRING D4a-JMM-1
15082: PPUSH
15083: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15087: LD_VAR 0 4
15091: PUSH
15092: LD_INT 1
15094: ARRAY
15095: PPUSH
15096: LD_EXP 1
15100: PPUSH
15101: CALL_OW 53
// wait ( 0 0$1 ) ;
15105: LD_INT 35
15107: PPUSH
15108: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15112: LD_VAR 0 4
15116: PUSH
15117: LD_INT 1
15119: ARRAY
15120: PPUSH
15121: LD_VAR 0 4
15125: PUSH
15126: LD_INT 1
15128: ARRAY
15129: PPUSH
15130: CALL_OW 250
15134: PUSH
15135: LD_INT 3
15137: PLUS
15138: PPUSH
15139: LD_VAR 0 4
15143: PUSH
15144: LD_INT 1
15146: ARRAY
15147: PPUSH
15148: CALL_OW 251
15152: PUSH
15153: LD_INT 2
15155: MINUS
15156: PPUSH
15157: CALL_OW 111
// wait ( 0 0$2 ) ;
15161: LD_INT 70
15163: PPUSH
15164: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15168: LD_EXP 1
15172: PPUSH
15173: LD_STRING D4b-JMM-1
15175: PPUSH
15176: CALL_OW 88
// InGameOff ;
15180: CALL_OW 9
// end else
15184: GO 15485
// begin InGameOn ;
15186: CALL_OW 8
// for j in UnitsInside ( i ) do
15190: LD_ADDR_VAR 0 2
15194: PUSH
15195: LD_VAR 0 1
15199: PPUSH
15200: CALL_OW 313
15204: PUSH
15205: FOR_IN
15206: IFFALSE 15241
// if GetClass ( j ) = 3 then
15208: LD_VAR 0 2
15212: PPUSH
15213: CALL_OW 257
15217: PUSH
15218: LD_INT 3
15220: EQUAL
15221: IFFALSE 15239
// tmpMechanicInside = tmpMechanicInside ^ j ;
15223: LD_ADDR_VAR 0 5
15227: PUSH
15228: LD_VAR 0 5
15232: PUSH
15233: LD_VAR 0 2
15237: ADD
15238: ST_TO_ADDR
15239: GO 15205
15241: POP
15242: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15243: LD_VAR 0 5
15247: PUSH
15248: LD_INT 1
15250: ARRAY
15251: PPUSH
15252: CALL_OW 258
15256: PUSH
15257: LD_INT 1
15259: EQUAL
15260: IFFALSE 15278
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15262: LD_VAR 0 5
15266: PUSH
15267: LD_INT 1
15269: ARRAY
15270: PPUSH
15271: LD_STRING D4a-Mech1-1
15273: PPUSH
15274: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15278: LD_VAR 0 5
15282: PUSH
15283: LD_INT 1
15285: ARRAY
15286: PPUSH
15287: CALL_OW 258
15291: PUSH
15292: LD_INT 2
15294: EQUAL
15295: IFFALSE 15313
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15297: LD_VAR 0 5
15301: PUSH
15302: LD_INT 1
15304: ARRAY
15305: PPUSH
15306: LD_STRING D4a-FMech1-1
15308: PPUSH
15309: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15313: LD_VAR 0 4
15317: PUSH
15318: LD_INT 1
15320: ARRAY
15321: PPUSH
15322: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15326: LD_VAR 0 4
15330: PUSH
15331: LD_INT 1
15333: ARRAY
15334: PPUSH
15335: LD_VAR 0 5
15339: PUSH
15340: LD_INT 1
15342: ARRAY
15343: PPUSH
15344: CALL_OW 53
// wait ( 0 0$1 ) ;
15348: LD_INT 35
15350: PPUSH
15351: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15355: LD_VAR 0 4
15359: PUSH
15360: LD_INT 1
15362: ARRAY
15363: PPUSH
15364: LD_VAR 0 4
15368: PUSH
15369: LD_INT 1
15371: ARRAY
15372: PPUSH
15373: CALL_OW 250
15377: PUSH
15378: LD_INT 3
15380: PLUS
15381: PPUSH
15382: LD_VAR 0 4
15386: PUSH
15387: LD_INT 1
15389: ARRAY
15390: PPUSH
15391: CALL_OW 251
15395: PUSH
15396: LD_INT 2
15398: MINUS
15399: PPUSH
15400: CALL_OW 111
// wait ( 0 0$2 ) ;
15404: LD_INT 70
15406: PPUSH
15407: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15411: LD_VAR 0 5
15415: PUSH
15416: LD_INT 1
15418: ARRAY
15419: PPUSH
15420: CALL_OW 258
15424: PUSH
15425: LD_INT 1
15427: EQUAL
15428: IFFALSE 15446
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15430: LD_VAR 0 5
15434: PUSH
15435: LD_INT 1
15437: ARRAY
15438: PPUSH
15439: LD_STRING D4b-Mech1-1
15441: PPUSH
15442: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15446: LD_VAR 0 5
15450: PUSH
15451: LD_INT 1
15453: ARRAY
15454: PPUSH
15455: CALL_OW 258
15459: PUSH
15460: LD_INT 2
15462: EQUAL
15463: IFFALSE 15481
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15465: LD_VAR 0 5
15469: PUSH
15470: LD_INT 1
15472: ARRAY
15473: PPUSH
15474: LD_STRING D4b-FMech1-1
15476: PPUSH
15477: CALL_OW 88
// InGameOff ;
15481: CALL_OW 9
// end ; end ;
15485: GO 15023
15487: POP
15488: POP
// end ;
15489: PPOPN 5
15491: END
// function CheckMehInside ; var i , j ; begin
15492: LD_INT 0
15494: PPUSH
15495: PPUSH
15496: PPUSH
// result = false ;
15497: LD_ADDR_VAR 0 1
15501: PUSH
15502: LD_INT 0
15504: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15505: LD_ADDR_VAR 0 2
15509: PUSH
15510: LD_INT 22
15512: PUSH
15513: LD_INT 1
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 30
15522: PUSH
15523: LD_INT 36
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 69
15538: PUSH
15539: FOR_IN
15540: IFFALSE 15591
// begin for j in UnitsInside ( i ) do
15542: LD_ADDR_VAR 0 3
15546: PUSH
15547: LD_VAR 0 2
15551: PPUSH
15552: CALL_OW 313
15556: PUSH
15557: FOR_IN
15558: IFFALSE 15587
// begin if GetClass ( j ) = 3 then
15560: LD_VAR 0 3
15564: PPUSH
15565: CALL_OW 257
15569: PUSH
15570: LD_INT 3
15572: EQUAL
15573: IFFALSE 15585
// begin result = true ;
15575: LD_ADDR_VAR 0 1
15579: PUSH
15580: LD_INT 1
15582: ST_TO_ADDR
// break ;
15583: GO 15587
// end ; end ;
15585: GO 15557
15587: POP
15588: POP
// end ;
15589: GO 15539
15591: POP
15592: POP
// end ;
15593: LD_VAR 0 1
15597: RET
// every 25 25$0 do
15598: GO 15600
15600: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15601: LD_INT 35
15603: PPUSH
15604: CALL_OW 67
// until not InBattle ( 1 ) ;
15608: LD_INT 1
15610: PPUSH
15611: CALL_OW 463
15615: NOT
15616: IFFALSE 15601
// PrepareKurt ;
15618: CALL 19156 0 0
// end ;
15622: END
// every 35 35$0 do
15623: GO 15625
15625: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15626: LD_INT 35
15628: PPUSH
15629: CALL_OW 67
// until not InBattle ( 1 ) ;
15633: LD_INT 1
15635: PPUSH
15636: CALL_OW 463
15640: NOT
15641: IFFALSE 15626
// PrepareJoan ;
15643: CALL 2995 0 0
// wait ( 1 1$0 ) ;
15647: LD_INT 2100
15649: PPUSH
15650: CALL_OW 67
// if IsOK ( Lisa ) then
15654: LD_EXP 2
15658: PPUSH
15659: CALL_OW 302
15663: IFFALSE 15793
// begin DialogueOn ;
15665: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15669: LD_EXP 2
15673: PPUSH
15674: LD_STRING D7-Lisa-1
15676: PPUSH
15677: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15681: LD_EXP 1
15685: PPUSH
15686: LD_STRING D7-JMM-1
15688: PPUSH
15689: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15693: LD_EXP 2
15697: PPUSH
15698: LD_STRING D7-Lisa-2
15700: PPUSH
15701: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15705: LD_EXP 1
15709: PPUSH
15710: LD_STRING D7-JMM-2
15712: PPUSH
15713: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15717: LD_EXP 2
15721: PPUSH
15722: LD_STRING D7-Lisa-3
15724: PPUSH
15725: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15729: LD_EXP 1
15733: PPUSH
15734: LD_STRING D7-JMM-3
15736: PPUSH
15737: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15741: LD_EXP 2
15745: PPUSH
15746: LD_STRING D7-Lisa-4
15748: PPUSH
15749: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15753: LD_EXP 1
15757: PPUSH
15758: LD_STRING D7-JMM-4
15760: PPUSH
15761: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15765: LD_EXP 1
15769: PPUSH
15770: LD_STRING D7-JMM-4a
15772: PPUSH
15773: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15777: LD_EXP 2
15781: PPUSH
15782: LD_STRING D7-Lisa-5
15784: PPUSH
15785: CALL_OW 88
// DialogueOff ;
15789: CALL_OW 7
// end ; end ;
15793: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15794: LD_EXP 13
15798: PUSH
15799: LD_INT 22
15801: PUSH
15802: LD_INT 1
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 91
15811: PUSH
15812: LD_EXP 13
15816: PUSH
15817: LD_INT 10
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 2
15827: PUSH
15828: LD_INT 25
15830: PUSH
15831: LD_INT 1
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 25
15840: PUSH
15841: LD_INT 2
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 25
15850: PUSH
15851: LD_INT 3
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: LD_INT 25
15860: PUSH
15861: LD_INT 4
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: LIST
15879: PPUSH
15880: CALL_OW 69
15884: PUSH
15885: LD_INT 1
15887: GREATER
15888: AND
15889: IFFALSE 15906
15891: GO 15893
15893: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15894: LD_EXP 13
15898: PPUSH
15899: LD_STRING D5-Sol1-1
15901: PPUSH
15902: CALL_OW 88
// end ;
15906: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15907: LD_INT 22
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 33
15919: PUSH
15920: LD_INT 2
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PPUSH
15931: CALL_OW 69
15935: PUSH
15936: LD_INT 2
15938: GREATEREQUAL
15939: IFFALSE 15959
15941: GO 15943
15943: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15944: LD_STRING MRa
15946: PPUSH
15947: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15951: LD_ADDR_EXP 28
15955: PUSH
15956: LD_INT 1
15958: ST_TO_ADDR
// end ;
15959: END
// every 0 0$10 do var i , last ;
15960: GO 15962
15962: DISABLE
15963: LD_INT 0
15965: PPUSH
15966: PPUSH
// begin last := 7 ;
15967: LD_ADDR_VAR 0 2
15971: PUSH
15972: LD_INT 7
15974: ST_TO_ADDR
// for i = 1 to last do
15975: LD_ADDR_VAR 0 1
15979: PUSH
15980: DOUBLE
15981: LD_INT 1
15983: DEC
15984: ST_TO_ADDR
15985: LD_VAR 0 2
15989: PUSH
15990: FOR_TO
15991: IFFALSE 16019
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
15993: LD_INT 6300
15995: PPUSH
15996: LD_INT 14700
15998: PPUSH
15999: CALL_OW 12
16003: PPUSH
16004: CALL_OW 67
// PrepareRandoms ( i ) ;
16008: LD_VAR 0 1
16012: PPUSH
16013: CALL 4031 0 1
// end ;
16017: GO 15990
16019: POP
16020: POP
// end ;
16021: PPOPN 2
16023: END
// every 5 5$20 do
16024: GO 16026
16026: DISABLE
// begin DialogueOn ;
16027: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16031: LD_EXP 10
16035: PPUSH
16036: LD_STRING D12a-Sci-1
16038: PPUSH
16039: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16043: LD_EXP 1
16047: PPUSH
16048: LD_STRING D12a-JMM-1
16050: PPUSH
16051: CALL_OW 88
// DialogueOff ;
16055: CALL_OW 7
// cratesStatus = 1 ;
16059: LD_ADDR_EXP 38
16063: PUSH
16064: LD_INT 1
16066: ST_TO_ADDR
// end ;
16067: END
// every 13 13$0 do
16068: GO 16070
16070: DISABLE
// begin DialogueOn ;
16071: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16075: LD_EXP 10
16079: PPUSH
16080: LD_STRING D12b-Sci-1
16082: PPUSH
16083: CALL_OW 94
// DialogueOff ;
16087: CALL_OW 7
// cratesStatus = 2 ;
16091: LD_ADDR_EXP 38
16095: PUSH
16096: LD_INT 2
16098: ST_TO_ADDR
// end ;
16099: END
// every 32 32$0 do
16100: GO 16102
16102: DISABLE
// begin DialogueOn ;
16103: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16107: LD_EXP 10
16111: PPUSH
16112: LD_STRING D12c-Sci-1
16114: PPUSH
16115: CALL_OW 94
// DialogueOff ;
16119: CALL_OW 7
// wait ( 3 3$0 ) ;
16123: LD_INT 6300
16125: PPUSH
16126: CALL_OW 67
// DialogueOn ;
16130: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16134: LD_EXP 10
16138: PPUSH
16139: LD_STRING D12d-Sci-1
16141: PPUSH
16142: CALL_OW 94
// DialogueOff ;
16146: CALL_OW 7
// cratesStatus = 1 ;
16150: LD_ADDR_EXP 38
16154: PUSH
16155: LD_INT 1
16157: ST_TO_ADDR
// end ;
16158: END
// every 42 42$0 do
16159: GO 16161
16161: DISABLE
// begin DialogueOn ;
16162: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16166: LD_EXP 10
16170: PPUSH
16171: LD_STRING D12e-Sci-1
16173: PPUSH
16174: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16178: LD_EXP 1
16182: PPUSH
16183: LD_STRING D12e-JMM-1
16185: PPUSH
16186: CALL_OW 88
// DialogueOff ;
16190: CALL_OW 7
// cratesStatus = 2 ;
16194: LD_ADDR_EXP 38
16198: PUSH
16199: LD_INT 2
16201: ST_TO_ADDR
// end ;
16202: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16203: LD_INT 22
16205: PUSH
16206: LD_INT 6
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 21
16215: PUSH
16216: LD_INT 2
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 34
16225: PUSH
16226: LD_INT 51
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: PPUSH
16238: CALL_OW 69
16242: PUSH
16243: LD_INT 0
16245: GREATER
16246: IFFALSE 16329
16248: GO 16250
16250: DISABLE
16251: LD_INT 0
16253: PPUSH
// begin enable ;
16254: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16255: LD_ADDR_VAR 0 1
16259: PUSH
16260: LD_INT 22
16262: PUSH
16263: LD_INT 6
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 2
16272: PUSH
16273: LD_INT 21
16275: PUSH
16276: LD_INT 1
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: PUSH
16283: LD_INT 21
16285: PUSH
16286: LD_INT 2
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: LIST
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PPUSH
16302: CALL_OW 69
16306: PUSH
16307: FOR_IN
16308: IFFALSE 16327
// ComAgressiveMove ( i , 138 , 168 ) ;
16310: LD_VAR 0 1
16314: PPUSH
16315: LD_INT 138
16317: PPUSH
16318: LD_INT 168
16320: PPUSH
16321: CALL_OW 114
16325: GO 16307
16327: POP
16328: POP
// end ;
16329: PPOPN 1
16331: END
// every 0 0$1 do var i ;
16332: GO 16334
16334: DISABLE
16335: LD_INT 0
16337: PPUSH
// begin enable ;
16338: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16339: LD_ADDR_VAR 0 1
16343: PUSH
16344: LD_INT 4
16346: PPUSH
16347: LD_INT 2
16349: PUSH
16350: LD_INT 22
16352: PUSH
16353: LD_INT 3
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 22
16362: PUSH
16363: LD_INT 6
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: LIST
16374: PUSH
16375: EMPTY
16376: LIST
16377: PPUSH
16378: CALL_OW 70
16382: PUSH
16383: FOR_IN
16384: IFFALSE 16448
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16386: LD_INT 4
16388: PPUSH
16389: LD_INT 22
16391: PUSH
16392: LD_INT 6
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 34
16401: PUSH
16402: LD_INT 51
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PPUSH
16413: CALL_OW 70
16417: PUSH
16418: LD_INT 0
16420: GREATER
16421: IFFALSE 16437
// sendedConvoys = sendedConvoys + 1 ;
16423: LD_ADDR_EXP 39
16427: PUSH
16428: LD_EXP 39
16432: PUSH
16433: LD_INT 1
16435: PLUS
16436: ST_TO_ADDR
// RemoveUnit ( i ) ;
16437: LD_VAR 0 1
16441: PPUSH
16442: CALL_OW 64
// end ;
16446: GO 16383
16448: POP
16449: POP
// end ; end_of_file
16450: PPOPN 1
16452: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16453: LD_VAR 0 1
16457: PUSH
16458: LD_INT 1
16460: EQUAL
16461: PUSH
16462: LD_VAR 0 2
16466: PUSH
16467: LD_INT 3
16469: EQUAL
16470: AND
16471: IFFALSE 16481
// contactWithRussian = 1 ;
16473: LD_ADDR_EXP 22
16477: PUSH
16478: LD_INT 1
16480: ST_TO_ADDR
// end ;
16481: PPOPN 2
16483: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16484: LD_VAR 0 1
16488: PPUSH
16489: CALL_OW 266
16493: PUSH
16494: LD_INT 36
16496: EQUAL
16497: PUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 255
16507: PUSH
16508: LD_INT 1
16510: EQUAL
16511: AND
16512: PUSH
16513: LD_INT 22
16515: PUSH
16516: LD_INT 1
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 21
16525: PUSH
16526: LD_INT 2
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 33
16535: PUSH
16536: LD_INT 2
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: PUSH
16553: LD_INT 0
16555: EQUAL
16556: AND
16557: PUSH
16558: LD_EXP 23
16562: PUSH
16563: LD_INT 0
16565: EQUAL
16566: AND
16567: IFFALSE 16647
// begin firstTower = 1 ;
16569: LD_ADDR_EXP 23
16573: PUSH
16574: LD_INT 1
16576: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16577: LD_INT 22
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 21
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 25
16599: PUSH
16600: LD_INT 3
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 26
16609: PUSH
16610: LD_INT 1
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PPUSH
16623: CALL_OW 69
16627: PUSH
16628: LD_EXP 1
16632: PUSH
16633: EMPTY
16634: LIST
16635: DIFF
16636: PPUSH
16637: LD_STRING D3b-Mech1-1
16639: PPUSH
16640: LD_STRING D3b-Mech1-1
16642: PPUSH
16643: CALL 5985 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16647: LD_VAR 0 1
16651: PPUSH
16652: CALL_OW 266
16656: PUSH
16657: LD_INT 0
16659: EQUAL
16660: PUSH
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 255
16670: PUSH
16671: LD_INT 1
16673: EQUAL
16674: AND
16675: IFFALSE 16689
// SetBName ( building , theta ) ;
16677: LD_VAR 0 1
16681: PPUSH
16682: LD_STRING theta
16684: PPUSH
16685: CALL_OW 500
// if GetSide ( building ) = 3 then
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 255
16698: PUSH
16699: LD_INT 3
16701: EQUAL
16702: IFFALSE 16776
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16704: LD_ADDR_EXP 31
16708: PUSH
16709: LD_EXP 31
16713: PPUSH
16714: LD_INT 1
16716: PPUSH
16717: CALL_OW 3
16721: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16722: LD_ADDR_EXP 31
16726: PUSH
16727: LD_EXP 31
16731: PPUSH
16732: LD_INT 1
16734: PPUSH
16735: CALL_OW 3
16739: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16740: LD_ADDR_EXP 31
16744: PUSH
16745: LD_EXP 31
16749: PPUSH
16750: LD_INT 1
16752: PPUSH
16753: CALL_OW 3
16757: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16758: LD_ADDR_EXP 31
16762: PUSH
16763: LD_EXP 31
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16776: LD_VAR 0 1
16780: PPUSH
16781: CALL_OW 255
16785: PUSH
16786: LD_INT 3
16788: EQUAL
16789: PUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 266
16799: PUSH
16800: LD_INT 0
16802: EQUAL
16803: PUSH
16804: LD_VAR 0 1
16808: PPUSH
16809: CALL_OW 266
16813: PUSH
16814: LD_INT 2
16816: EQUAL
16817: OR
16818: PUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 266
16828: PUSH
16829: LD_INT 4
16831: EQUAL
16832: OR
16833: PUSH
16834: EMPTY
16835: LIST
16836: AND
16837: IFFALSE 16848
// ComUpgrade ( building ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16848: LD_VAR 0 1
16852: PPUSH
16853: CALL_OW 255
16857: PUSH
16858: LD_INT 3
16860: EQUAL
16861: PUSH
16862: LD_VAR 0 1
16866: PPUSH
16867: CALL_OW 266
16871: PUSH
16872: LD_INT 32
16874: EQUAL
16875: AND
16876: IFFALSE 16917
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16878: LD_VAR 0 1
16882: PPUSH
16883: LD_INT 42
16885: PUSH
16886: LD_INT 43
16888: PUSH
16889: LD_INT 44
16891: PUSH
16892: LD_INT 46
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 1
16903: PPUSH
16904: LD_INT 4
16906: PPUSH
16907: CALL_OW 12
16911: ARRAY
16912: PPUSH
16913: CALL_OW 208
// end ; end ;
16917: PPOPN 1
16919: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
16920: LD_VAR 0 1
16924: PUSH
16925: LD_INT 22
16927: PUSH
16928: LD_INT 1
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 21
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 23
16947: PUSH
16948: LD_INT 1
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: PPUSH
16960: CALL_OW 69
16964: IN
16965: IFFALSE 16981
// killCounter := killCounter + 1 ;
16967: LD_ADDR_EXP 47
16971: PUSH
16972: LD_EXP 47
16976: PUSH
16977: LD_INT 1
16979: PLUS
16980: ST_TO_ADDR
// if unit = JMM then
16981: LD_VAR 0 1
16985: PUSH
16986: LD_EXP 1
16990: EQUAL
16991: IFFALSE 17000
// YouLost ( JMM ) ;
16993: LD_STRING JMM
16995: PPUSH
16996: CALL_OW 104
// if unit = Joan then
17000: LD_VAR 0 1
17004: PUSH
17005: LD_EXP 15
17009: EQUAL
17010: IFFALSE 17020
// JoanStatus = 0 ;
17012: LD_ADDR_EXP 16
17016: PUSH
17017: LD_INT 0
17019: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17020: LD_VAR 0 1
17024: PPUSH
17025: CALL_OW 255
17029: PUSH
17030: LD_INT 1
17032: EQUAL
17033: PUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: CALL_OW 247
17043: PUSH
17044: LD_INT 1
17046: EQUAL
17047: AND
17048: IFFALSE 17124
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17050: LD_VAR 0 1
17054: PPUSH
17055: CALL_OW 257
17059: PUSH
17060: LD_INT 1
17062: EQUAL
17063: PUSH
17064: LD_VAR 0 1
17068: PPUSH
17069: CALL_OW 257
17073: PUSH
17074: LD_INT 2
17076: EQUAL
17077: OR
17078: PUSH
17079: LD_VAR 0 1
17083: PPUSH
17084: CALL_OW 257
17088: PUSH
17089: LD_INT 3
17091: EQUAL
17092: OR
17093: PUSH
17094: LD_VAR 0 1
17098: PPUSH
17099: CALL_OW 257
17103: PUSH
17104: LD_INT 4
17106: EQUAL
17107: OR
17108: IFFALSE 17124
// unitLost = unitLost + 1 ;
17110: LD_ADDR_EXP 30
17114: PUSH
17115: LD_EXP 30
17119: PUSH
17120: LD_INT 1
17122: PLUS
17123: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 255
17133: PUSH
17134: LD_INT 3
17136: EQUAL
17137: PUSH
17138: LD_VAR 0 1
17142: PPUSH
17143: CALL_OW 247
17147: PUSH
17148: LD_INT 3
17150: EQUAL
17151: AND
17152: IFFALSE 17844
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17154: LD_VAR 0 1
17158: PPUSH
17159: CALL_OW 266
17163: PUSH
17164: LD_INT 31
17166: EQUAL
17167: PUSH
17168: LD_VAR 0 1
17172: PPUSH
17173: CALL_OW 266
17177: PUSH
17178: LD_INT 32
17180: EQUAL
17181: OR
17182: PUSH
17183: LD_VAR 0 1
17187: PPUSH
17188: CALL_OW 266
17192: PUSH
17193: LD_INT 36
17195: EQUAL
17196: OR
17197: PUSH
17198: LD_VAR 0 1
17202: PPUSH
17203: CALL_OW 266
17207: PUSH
17208: LD_INT 0
17210: EQUAL
17211: OR
17212: PUSH
17213: LD_VAR 0 1
17217: PPUSH
17218: CALL_OW 266
17222: PUSH
17223: LD_INT 24
17225: EQUAL
17226: OR
17227: PUSH
17228: LD_VAR 0 1
17232: PPUSH
17233: CALL_OW 266
17237: PUSH
17238: LD_INT 17
17240: EQUAL
17241: OR
17242: PUSH
17243: LD_VAR 0 1
17247: PPUSH
17248: CALL_OW 266
17252: PUSH
17253: LD_INT 25
17255: EQUAL
17256: OR
17257: PUSH
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 266
17267: PUSH
17268: LD_INT 19
17270: EQUAL
17271: OR
17272: PUSH
17273: LD_VAR 0 1
17277: PPUSH
17278: CALL_OW 266
17282: PUSH
17283: LD_INT 20
17285: EQUAL
17286: OR
17287: PUSH
17288: LD_VAR 0 1
17292: PPUSH
17293: CALL_OW 266
17297: PUSH
17298: LD_INT 18
17300: EQUAL
17301: OR
17302: PUSH
17303: LD_VAR 0 1
17307: PPUSH
17308: CALL_OW 266
17312: PUSH
17313: LD_INT 21
17315: EQUAL
17316: OR
17317: PUSH
17318: LD_VAR 0 1
17322: PPUSH
17323: CALL_OW 266
17327: PUSH
17328: LD_INT 23
17330: EQUAL
17331: OR
17332: PUSH
17333: LD_VAR 0 1
17337: PPUSH
17338: CALL_OW 266
17342: PUSH
17343: LD_INT 16
17345: EQUAL
17346: OR
17347: PUSH
17348: LD_VAR 0 1
17352: PPUSH
17353: CALL_OW 266
17357: PUSH
17358: LD_INT 6
17360: EQUAL
17361: OR
17362: PUSH
17363: LD_VAR 0 1
17367: PPUSH
17368: CALL_OW 266
17372: PUSH
17373: LD_INT 29
17375: EQUAL
17376: OR
17377: PUSH
17378: LD_VAR 0 1
17382: PPUSH
17383: CALL_OW 266
17387: PUSH
17388: LD_INT 26
17390: EQUAL
17391: OR
17392: PUSH
17393: LD_VAR 0 1
17397: PPUSH
17398: CALL_OW 266
17402: PUSH
17403: LD_INT 30
17405: EQUAL
17406: OR
17407: PUSH
17408: LD_VAR 0 1
17412: PPUSH
17413: CALL_OW 266
17417: PUSH
17418: LD_INT 28
17420: EQUAL
17421: OR
17422: PUSH
17423: LD_VAR 0 1
17427: PPUSH
17428: CALL_OW 266
17432: PUSH
17433: LD_INT 27
17435: EQUAL
17436: OR
17437: PUSH
17438: LD_VAR 0 1
17442: PPUSH
17443: CALL_OW 266
17447: PUSH
17448: LD_INT 33
17450: EQUAL
17451: OR
17452: PUSH
17453: LD_VAR 0 1
17457: PPUSH
17458: CALL_OW 266
17462: PUSH
17463: LD_INT 2
17465: EQUAL
17466: OR
17467: PUSH
17468: LD_VAR 0 1
17472: PPUSH
17473: CALL_OW 266
17477: PUSH
17478: LD_INT 4
17480: EQUAL
17481: OR
17482: IFFALSE 17568
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17484: LD_ADDR_EXP 31
17488: PUSH
17489: LD_EXP 31
17493: PUSH
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 266
17503: ADD
17504: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17505: LD_ADDR_EXP 31
17509: PUSH
17510: LD_EXP 31
17514: PUSH
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 250
17524: ADD
17525: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17526: LD_ADDR_EXP 31
17530: PUSH
17531: LD_EXP 31
17535: PUSH
17536: LD_VAR 0 1
17540: PPUSH
17541: CALL_OW 251
17545: ADD
17546: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17547: LD_ADDR_EXP 31
17551: PUSH
17552: LD_EXP 31
17556: PUSH
17557: LD_VAR 0 1
17561: PPUSH
17562: CALL_OW 254
17566: ADD
17567: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17568: LD_VAR 0 1
17572: PPUSH
17573: CALL_OW 266
17577: PUSH
17578: LD_INT 1
17580: EQUAL
17581: IFFALSE 17660
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17583: LD_ADDR_EXP 31
17587: PUSH
17588: LD_EXP 31
17592: PUSH
17593: LD_INT 0
17595: ADD
17596: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17597: LD_ADDR_EXP 31
17601: PUSH
17602: LD_EXP 31
17606: PUSH
17607: LD_VAR 0 1
17611: PPUSH
17612: CALL_OW 250
17616: ADD
17617: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17618: LD_ADDR_EXP 31
17622: PUSH
17623: LD_EXP 31
17627: PUSH
17628: LD_VAR 0 1
17632: PPUSH
17633: CALL_OW 251
17637: ADD
17638: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17639: LD_ADDR_EXP 31
17643: PUSH
17644: LD_EXP 31
17648: PUSH
17649: LD_VAR 0 1
17653: PPUSH
17654: CALL_OW 254
17658: ADD
17659: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17660: LD_VAR 0 1
17664: PPUSH
17665: CALL_OW 266
17669: PUSH
17670: LD_INT 3
17672: EQUAL
17673: IFFALSE 17752
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17675: LD_ADDR_EXP 31
17679: PUSH
17680: LD_EXP 31
17684: PUSH
17685: LD_INT 2
17687: ADD
17688: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17689: LD_ADDR_EXP 31
17693: PUSH
17694: LD_EXP 31
17698: PUSH
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 250
17708: ADD
17709: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17710: LD_ADDR_EXP 31
17714: PUSH
17715: LD_EXP 31
17719: PUSH
17720: LD_VAR 0 1
17724: PPUSH
17725: CALL_OW 251
17729: ADD
17730: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17731: LD_ADDR_EXP 31
17735: PUSH
17736: LD_EXP 31
17740: PUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: CALL_OW 254
17750: ADD
17751: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17752: LD_VAR 0 1
17756: PPUSH
17757: CALL_OW 266
17761: PUSH
17762: LD_INT 5
17764: EQUAL
17765: IFFALSE 17844
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17767: LD_ADDR_EXP 31
17771: PUSH
17772: LD_EXP 31
17776: PUSH
17777: LD_INT 4
17779: ADD
17780: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17781: LD_ADDR_EXP 31
17785: PUSH
17786: LD_EXP 31
17790: PUSH
17791: LD_VAR 0 1
17795: PPUSH
17796: CALL_OW 250
17800: ADD
17801: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17802: LD_ADDR_EXP 31
17806: PUSH
17807: LD_EXP 31
17811: PUSH
17812: LD_VAR 0 1
17816: PPUSH
17817: CALL_OW 251
17821: ADD
17822: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17823: LD_ADDR_EXP 31
17827: PUSH
17828: LD_EXP 31
17832: PUSH
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 254
17842: ADD
17843: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 257
17853: PUSH
17854: LD_INT 3
17856: EQUAL
17857: PUSH
17858: LD_VAR 0 1
17862: PPUSH
17863: CALL_OW 255
17867: PUSH
17868: LD_INT 3
17870: EQUAL
17871: AND
17872: PUSH
17873: LD_INT 21
17875: PPUSH
17876: CALL_OW 302
17880: AND
17881: PUSH
17882: LD_INT 21
17884: PPUSH
17885: CALL_OW 255
17889: PUSH
17890: LD_INT 3
17892: EQUAL
17893: AND
17894: IFFALSE 17962
// begin uc_side = 3 ;
17896: LD_ADDR_OWVAR 20
17900: PUSH
17901: LD_INT 3
17903: ST_TO_ADDR
// uc_nation = 3 ;
17904: LD_ADDR_OWVAR 21
17908: PUSH
17909: LD_INT 3
17911: ST_TO_ADDR
// hc_gallery :=  ;
17912: LD_ADDR_OWVAR 33
17916: PUSH
17917: LD_STRING 
17919: ST_TO_ADDR
// hc_name :=  ;
17920: LD_ADDR_OWVAR 26
17924: PUSH
17925: LD_STRING 
17927: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17928: LD_INT 0
17930: PPUSH
17931: LD_EXP 34
17935: PPUSH
17936: LD_EXP 35
17940: PPUSH
17941: CALL_OW 12
17945: PPUSH
17946: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
17950: CALL_OW 44
17954: PPUSH
17955: LD_INT 21
17957: PPUSH
17958: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17962: LD_VAR 0 1
17966: PPUSH
17967: CALL_OW 255
17971: PUSH
17972: LD_INT 3
17974: EQUAL
17975: PUSH
17976: LD_VAR 0 1
17980: PPUSH
17981: CALL_OW 264
17985: PUSH
17986: LD_INT 52
17988: EQUAL
17989: AND
17990: PUSH
17991: LD_INT 21
17993: PPUSH
17994: CALL_OW 302
17998: AND
17999: PUSH
18000: LD_INT 21
18002: PPUSH
18003: CALL_OW 255
18007: PUSH
18008: LD_INT 3
18010: EQUAL
18011: AND
18012: IFFALSE 18033
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18014: LD_INT 21
18016: PPUSH
18017: LD_INT 22
18019: PPUSH
18020: LD_INT 1
18022: PPUSH
18023: LD_INT 1
18025: PPUSH
18026: LD_INT 52
18028: PPUSH
18029: CALL_OW 125
// end ;
18033: PPOPN 1
18035: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18036: LD_INT 0
18038: PPUSH
18039: PPUSH
18040: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 264
18050: PUSH
18051: LD_INT 51
18053: EQUAL
18054: PUSH
18055: LD_VAR 0 1
18059: PPUSH
18060: CALL_OW 255
18064: PUSH
18065: LD_INT 3
18067: EQUAL
18068: AND
18069: IFFALSE 18131
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18071: LD_ADDR_VAR 0 5
18075: PUSH
18076: LD_INT 2
18078: PPUSH
18079: CALL_OW 274
18083: PPUSH
18084: LD_INT 1
18086: PPUSH
18087: CALL_OW 275
18091: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18092: LD_INT 2
18094: PPUSH
18095: CALL_OW 274
18099: PPUSH
18100: LD_INT 1
18102: PPUSH
18103: LD_VAR 0 5
18107: PUSH
18108: LD_INT 100
18110: MINUS
18111: PPUSH
18112: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18116: LD_VAR 0 1
18120: PPUSH
18121: LD_INT 1
18123: PPUSH
18124: LD_INT 100
18126: PPUSH
18127: CALL_OW 291
// end ; if building = rufabsupp then
18131: LD_VAR 0 2
18135: PUSH
18136: LD_INT 17
18138: EQUAL
18139: IFFALSE 18153
// SetSide ( vehicle , 6 ) ;
18141: LD_VAR 0 1
18145: PPUSH
18146: LD_INT 6
18148: PPUSH
18149: CALL_OW 235
// end ;
18153: PPOPN 5
18155: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18156: LD_VAR 0 1
18160: PPUSH
18161: CALL_OW 255
18165: PUSH
18166: LD_INT 3
18168: EQUAL
18169: IFFALSE 18200
// begin tamedApemans = tamedApemans + 1 ;
18171: LD_ADDR_EXP 32
18175: PUSH
18176: LD_EXP 32
18180: PUSH
18181: LD_INT 1
18183: PLUS
18184: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18185: LD_VAR 0 1
18189: PPUSH
18190: LD_INT 106
18192: PPUSH
18193: LD_INT 85
18195: PPUSH
18196: CALL_OW 111
// end ; end ;
18200: PPOPN 2
18202: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18203: LD_INT 0
18205: PPUSH
18206: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18207: LD_VAR 0 1
18211: PPUSH
18212: CALL_OW 255
18216: PUSH
18217: LD_INT 3
18219: EQUAL
18220: PUSH
18221: LD_VAR 0 1
18225: PPUSH
18226: CALL_OW 247
18230: PUSH
18231: LD_INT 2
18233: EQUAL
18234: AND
18235: IFFALSE 18344
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18237: LD_VAR 0 1
18241: PPUSH
18242: CALL_OW 264
18246: PUSH
18247: LD_INT 42
18249: EQUAL
18250: PUSH
18251: LD_VAR 0 1
18255: PPUSH
18256: CALL_OW 264
18260: PUSH
18261: LD_INT 43
18263: EQUAL
18264: OR
18265: PUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: CALL_OW 264
18275: PUSH
18276: LD_INT 44
18278: EQUAL
18279: OR
18280: PUSH
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 264
18290: PUSH
18291: LD_INT 46
18293: EQUAL
18294: OR
18295: IFFALSE 18344
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18297: LD_INT 21
18299: PPUSH
18300: LD_VAR 0 1
18304: PPUSH
18305: CALL_OW 265
18309: PPUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL_OW 262
18319: PPUSH
18320: LD_VAR 0 1
18324: PPUSH
18325: CALL_OW 263
18329: PPUSH
18330: LD_VAR 0 1
18334: PPUSH
18335: CALL_OW 264
18339: PPUSH
18340: CALL_OW 185
// end ;
18344: PPOPN 3
18346: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18347: LD_VAR 0 1
18351: PPUSH
18352: CALL_OW 255
18356: PUSH
18357: LD_INT 3
18359: EQUAL
18360: PUSH
18361: LD_VAR 0 2
18365: PPUSH
18366: CALL_OW 255
18370: PUSH
18371: LD_INT 3
18373: EQUAL
18374: AND
18375: PUSH
18376: LD_VAR 0 1
18380: PPUSH
18381: CALL_OW 302
18385: AND
18386: IFFALSE 18428
// begin ComRepairVehicle ( human , vehicle ) ;
18388: LD_VAR 0 2
18392: PPUSH
18393: LD_VAR 0 1
18397: PPUSH
18398: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18402: LD_VAR 0 2
18406: PPUSH
18407: LD_VAR 0 1
18411: PPUSH
18412: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18416: LD_VAR 0 1
18420: PPUSH
18421: LD_INT 100
18423: PPUSH
18424: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 255
18437: PUSH
18438: LD_INT 3
18440: EQUAL
18441: PUSH
18442: LD_VAR 0 2
18446: PPUSH
18447: CALL_OW 255
18451: PUSH
18452: LD_INT 3
18454: EQUAL
18455: AND
18456: PUSH
18457: LD_INT 21
18459: PPUSH
18460: CALL_OW 302
18464: AND
18465: PUSH
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL_OW 302
18475: NOT
18476: AND
18477: IFFALSE 18491
// ComEnterUnit ( human , rufab ) ;
18479: LD_VAR 0 2
18483: PPUSH
18484: LD_INT 21
18486: PPUSH
18487: CALL_OW 120
// end ;
18491: PPOPN 2
18493: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18494: LD_VAR 0 1
18498: PUSH
18499: LD_INT 21
18501: EQUAL
18502: PUSH
18503: LD_VAR 0 2
18507: PPUSH
18508: CALL_OW 255
18512: PUSH
18513: LD_INT 3
18515: EQUAL
18516: AND
18517: IFFALSE 18531
// SetLives ( human , 1000 ) ;
18519: LD_VAR 0 2
18523: PPUSH
18524: LD_INT 1000
18526: PPUSH
18527: CALL_OW 234
// end ;
18531: PPOPN 2
18533: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18534: LD_VAR 0 1
18538: PPUSH
18539: CALL 24239 0 1
// end ; end_of_file
18543: PPOPN 1
18545: END
// every 0 0$30 trigger cratesStatus = 1 do
18546: LD_EXP 38
18550: PUSH
18551: LD_INT 1
18553: EQUAL
18554: IFFALSE 18637
18556: GO 18558
18558: DISABLE
// begin enable ;
18559: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18560: LD_INT 350
18562: PUSH
18563: LD_INT 1050
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 1
18572: PPUSH
18573: LD_INT 2
18575: PPUSH
18576: CALL_OW 12
18580: ARRAY
18581: PPUSH
18582: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18586: LD_INT 4
18588: PUSH
18589: LD_INT 5
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: PPUSH
18599: LD_INT 2
18601: PPUSH
18602: CALL_OW 12
18606: ARRAY
18607: PPUSH
18608: LD_INT 6
18610: PUSH
18611: LD_INT 7
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: PPUSH
18621: LD_INT 2
18623: PPUSH
18624: CALL_OW 12
18628: ARRAY
18629: PPUSH
18630: LD_INT 1
18632: PPUSH
18633: CALL_OW 55
// end ;
18637: END
// every 1 1$0 trigger cratesStatus = 2 do
18638: LD_EXP 38
18642: PUSH
18643: LD_INT 2
18645: EQUAL
18646: IFFALSE 18729
18648: GO 18650
18650: DISABLE
// begin enable ;
18651: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18652: LD_INT 3150
18654: PUSH
18655: LD_INT 4550
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 1
18664: PPUSH
18665: LD_INT 2
18667: PPUSH
18668: CALL_OW 12
18672: ARRAY
18673: PPUSH
18674: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18678: LD_INT 2
18680: PUSH
18681: LD_INT 5
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 1
18690: PPUSH
18691: LD_INT 2
18693: PPUSH
18694: CALL_OW 12
18698: ARRAY
18699: PPUSH
18700: LD_INT 6
18702: PUSH
18703: LD_INT 7
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 1
18712: PPUSH
18713: LD_INT 2
18715: PPUSH
18716: CALL_OW 12
18720: ARRAY
18721: PPUSH
18722: LD_INT 1
18724: PPUSH
18725: CALL_OW 55
// end ;
18729: END
// every 0 0$30 + 0 0$10 do
18730: GO 18732
18732: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18733: LD_INT 4
18735: PUSH
18736: LD_INT 5
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 1
18745: PPUSH
18746: LD_INT 2
18748: PPUSH
18749: CALL_OW 12
18753: ARRAY
18754: PPUSH
18755: LD_INT 7
18757: PPUSH
18758: LD_INT 1
18760: PPUSH
18761: CALL_OW 55
// Wait ( 0 0$15 ) ;
18765: LD_INT 525
18767: PPUSH
18768: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18772: LD_INT 4
18774: PUSH
18775: LD_INT 5
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 1
18784: PPUSH
18785: LD_INT 2
18787: PPUSH
18788: CALL_OW 12
18792: ARRAY
18793: PPUSH
18794: LD_INT 7
18796: PPUSH
18797: LD_INT 1
18799: PPUSH
18800: CALL_OW 55
// Wait ( 0 0$20 ) ;
18804: LD_INT 700
18806: PPUSH
18807: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18811: LD_INT 4
18813: PUSH
18814: LD_INT 5
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 1
18823: PPUSH
18824: LD_INT 2
18826: PPUSH
18827: CALL_OW 12
18831: ARRAY
18832: PPUSH
18833: LD_INT 7
18835: PPUSH
18836: LD_INT 1
18838: PPUSH
18839: CALL_OW 55
// end ; end_of_file
18843: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18844: LD_EXP 24
18848: PUSH
18849: LD_INT 1
18851: EQUAL
18852: IFFALSE 19153
18854: GO 18856
18856: DISABLE
18857: LD_INT 0
18859: PPUSH
18860: PPUSH
18861: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18862: LD_ADDR_VAR 0 2
18866: PUSH
18867: LD_INT 22
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 21
18879: PUSH
18880: LD_INT 3
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: LD_INT 30
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 30
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: LIST
18919: PPUSH
18920: CALL_OW 69
18924: ST_TO_ADDR
// for i in tmp do
18925: LD_ADDR_VAR 0 1
18929: PUSH
18930: LD_VAR 0 2
18934: PUSH
18935: FOR_IN
18936: IFFALSE 18969
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18938: LD_ADDR_VAR 0 3
18942: PUSH
18943: LD_VAR 0 3
18947: PUSH
18948: LD_VAR 0 1
18952: PPUSH
18953: CALL_OW 274
18957: PPUSH
18958: LD_INT 1
18960: PPUSH
18961: CALL_OW 275
18965: PLUS
18966: ST_TO_ADDR
18967: GO 18935
18969: POP
18970: POP
// strings = [ ] ;
18971: LD_ADDR_EXP 27
18975: PUSH
18976: EMPTY
18977: ST_TO_ADDR
// if tmp = 0 then
18978: LD_VAR 0 2
18982: PUSH
18983: LD_INT 0
18985: EQUAL
18986: IFFALSE 19011
// strings = strings ^ [ #Am06-1 , needCrates ] ;
18988: LD_ADDR_EXP 27
18992: PUSH
18993: LD_EXP 27
18997: PUSH
18998: LD_STRING #Am06-1
19000: PUSH
19001: LD_EXP 25
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: ADD
19010: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19011: LD_VAR 0 2
19015: PUSH
19016: LD_INT 0
19018: GREATER
19019: PUSH
19020: LD_EXP 25
19024: PUSH
19025: LD_VAR 0 3
19029: GREATER
19030: AND
19031: IFFALSE 19062
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19033: LD_ADDR_EXP 27
19037: PUSH
19038: LD_EXP 27
19042: PUSH
19043: LD_STRING #Am06-1
19045: PUSH
19046: LD_EXP 25
19050: PUSH
19051: LD_VAR 0 3
19055: MINUS
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: ADD
19061: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19062: LD_VAR 0 2
19066: PUSH
19067: LD_INT 0
19069: GREATER
19070: PUSH
19071: LD_EXP 25
19075: PUSH
19076: LD_VAR 0 3
19080: LESSEQUAL
19081: AND
19082: IFFALSE 19105
// strings = strings ^ [ #Am06-1 , 0 ] ;
19084: LD_ADDR_EXP 27
19088: PUSH
19089: LD_EXP 27
19093: PUSH
19094: LD_STRING #Am06-1
19096: PUSH
19097: LD_INT 0
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: ADD
19104: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19105: LD_ADDR_EXP 26
19109: PUSH
19110: LD_EXP 26
19114: PUSH
19115: LD_INT 35
19117: MINUS
19118: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19119: LD_ADDR_EXP 27
19123: PUSH
19124: LD_EXP 27
19128: PUSH
19129: LD_STRING #Am06-2
19131: PUSH
19132: LD_EXP 26
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: ADD
19141: ST_TO_ADDR
// display_strings = strings ;
19142: LD_ADDR_OWVAR 47
19146: PUSH
19147: LD_EXP 27
19151: ST_TO_ADDR
// enable ;
19152: ENABLE
// end ; end_of_file
19153: PPOPN 3
19155: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19156: LD_INT 0
19158: PPUSH
19159: PPUSH
19160: PPUSH
19161: PPUSH
19162: PPUSH
19163: PPUSH
19164: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19165: LD_ADDR_VAR 0 3
19169: PUSH
19170: LD_INT 22
19172: PUSH
19173: LD_INT 1
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: LD_INT 30
19185: PUSH
19186: LD_INT 0
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 30
19195: PUSH
19196: LD_INT 1
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: LIST
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PPUSH
19212: CALL_OW 69
19216: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19217: LD_INT 35
19219: PPUSH
19220: CALL_OW 67
// until depot ;
19224: LD_VAR 0 3
19228: IFFALSE 19165
// repeat wait ( 0 0$1 ) ;
19230: LD_INT 35
19232: PPUSH
19233: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19237: LD_ADDR_VAR 0 4
19241: PUSH
19242: LD_INT 22
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 91
19254: PUSH
19255: LD_VAR 0 3
19259: PUSH
19260: LD_INT 1
19262: ARRAY
19263: PUSH
19264: LD_INT 15
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 21
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 2
19284: PUSH
19285: LD_INT 25
19287: PUSH
19288: LD_INT 1
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 25
19297: PUSH
19298: LD_INT 2
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 25
19307: PUSH
19308: LD_INT 3
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 25
19317: PUSH
19318: LD_INT 4
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 3
19334: PUSH
19335: LD_INT 54
19337: PUSH
19338: EMPTY
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 3
19347: PUSH
19348: LD_INT 55
19350: PUSH
19351: EMPTY
19352: LIST
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: PPUSH
19366: CALL_OW 69
19370: PUSH
19371: LD_EXP 2
19375: PUSH
19376: LD_EXP 3
19380: PUSH
19381: LD_EXP 4
19385: PUSH
19386: LD_EXP 5
19390: PUSH
19391: LD_EXP 7
19395: PUSH
19396: LD_EXP 8
19400: PUSH
19401: LD_EXP 9
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: PUSH
19415: LD_EXP 46
19419: ADD
19420: DIFF
19421: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19422: LD_VAR 0 4
19426: PUSH
19427: LD_INT 1
19429: PPUSH
19430: CALL_OW 463
19434: NOT
19435: AND
19436: IFFALSE 19230
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19438: LD_ADDR_VAR 0 4
19442: PUSH
19443: LD_VAR 0 4
19447: PUSH
19448: LD_INT 1
19450: PPUSH
19451: LD_VAR 0 4
19455: PPUSH
19456: CALL_OW 12
19460: ARRAY
19461: ST_TO_ADDR
// blockSpawn = 1 ;
19462: LD_ADDR_EXP 29
19466: PUSH
19467: LD_INT 1
19469: ST_TO_ADDR
// uc_side = 2 ;
19470: LD_ADDR_OWVAR 20
19474: PUSH
19475: LD_INT 2
19477: ST_TO_ADDR
// uc_nation = 2 ;
19478: LD_ADDR_OWVAR 21
19482: PUSH
19483: LD_INT 2
19485: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19486: LD_ADDR_EXP 19
19490: PUSH
19491: LD_STRING Kurt
19493: PPUSH
19494: LD_INT 0
19496: PPUSH
19497: CALL 5922 0 2
19501: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19502: LD_EXP 19
19506: PPUSH
19507: LD_VAR 0 4
19511: PPUSH
19512: CALL_OW 250
19516: PPUSH
19517: LD_VAR 0 4
19521: PPUSH
19522: CALL_OW 251
19526: PPUSH
19527: LD_INT 5
19529: PPUSH
19530: LD_INT 1
19532: PPUSH
19533: CALL_OW 50
// InGameOn ;
19537: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19541: LD_EXP 19
19545: PPUSH
19546: CALL_OW 87
// wait ( 0 0$2 ) ;
19550: LD_INT 70
19552: PPUSH
19553: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19557: LD_EXP 19
19561: PPUSH
19562: LD_VAR 0 4
19566: PPUSH
19567: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19571: LD_VAR 0 4
19575: PPUSH
19576: LD_EXP 19
19580: PPUSH
19581: CALL_OW 112
// wait ( 0 0$1 ) ;
19585: LD_INT 35
19587: PPUSH
19588: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19592: LD_VAR 0 4
19596: PPUSH
19597: LD_EXP 19
19601: PPUSH
19602: CALL_OW 119
// DialogueOn ;
19606: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19610: LD_EXP 19
19614: PPUSH
19615: LD_STRING D2-Kurt-1
19617: PPUSH
19618: CALL_OW 88
// if tmp = JMM then
19622: LD_VAR 0 4
19626: PUSH
19627: LD_EXP 1
19631: EQUAL
19632: IFFALSE 19724
// begin Say ( JMM , D2-JMM-1 ) ;
19634: LD_EXP 1
19638: PPUSH
19639: LD_STRING D2-JMM-1
19641: PPUSH
19642: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19646: LD_EXP 19
19650: PPUSH
19651: LD_STRING D2-Kurt-2
19653: PPUSH
19654: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19658: LD_EXP 1
19662: PPUSH
19663: LD_STRING D2-JMM-2
19665: PPUSH
19666: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19670: LD_EXP 19
19674: PPUSH
19675: LD_STRING D2-Kurt-3
19677: PPUSH
19678: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19682: LD_EXP 1
19686: PPUSH
19687: LD_STRING D2-JMM-3
19689: PPUSH
19690: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19694: LD_EXP 19
19698: PPUSH
19699: LD_STRING D2-Kurt-4
19701: PPUSH
19702: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19706: LD_EXP 1
19710: PPUSH
19711: LD_STRING D2-JMM-4
19713: PPUSH
19714: CALL_OW 88
// DialogueOff ;
19718: CALL_OW 7
// end else
19722: GO 20034
// begin if GetSex ( tmp ) = 1 then
19724: LD_VAR 0 4
19728: PPUSH
19729: CALL_OW 258
19733: PUSH
19734: LD_INT 1
19736: EQUAL
19737: IFFALSE 19751
// Say ( tmp , D2-Sol1-1 ) ;
19739: LD_VAR 0 4
19743: PPUSH
19744: LD_STRING D2-Sol1-1
19746: PPUSH
19747: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19751: LD_VAR 0 4
19755: PPUSH
19756: CALL_OW 258
19760: PUSH
19761: LD_INT 2
19763: EQUAL
19764: IFFALSE 19778
// Say ( tmp , D2-FSol1-1 ) ;
19766: LD_VAR 0 4
19770: PPUSH
19771: LD_STRING D2-FSol1-1
19773: PPUSH
19774: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19778: LD_EXP 19
19782: PPUSH
19783: LD_STRING D2-Kurt-2
19785: PPUSH
19786: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19790: LD_VAR 0 4
19794: PPUSH
19795: CALL_OW 258
19799: PUSH
19800: LD_INT 1
19802: EQUAL
19803: IFFALSE 19817
// Say ( tmp , D2-Sol1-2 ) ;
19805: LD_VAR 0 4
19809: PPUSH
19810: LD_STRING D2-Sol1-2
19812: PPUSH
19813: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19817: LD_VAR 0 4
19821: PPUSH
19822: CALL_OW 258
19826: PUSH
19827: LD_INT 2
19829: EQUAL
19830: IFFALSE 19844
// Say ( tmp , D2-FSol1-2 ) ;
19832: LD_VAR 0 4
19836: PPUSH
19837: LD_STRING D2-FSol1-2
19839: PPUSH
19840: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19844: LD_EXP 19
19848: PPUSH
19849: LD_STRING D2-Kurt-3
19851: PPUSH
19852: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19856: LD_VAR 0 4
19860: PPUSH
19861: CALL_OW 258
19865: PUSH
19866: LD_INT 1
19868: EQUAL
19869: IFFALSE 19883
// Say ( tmp , D2-Sol1-3 ) ;
19871: LD_VAR 0 4
19875: PPUSH
19876: LD_STRING D2-Sol1-3
19878: PPUSH
19879: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19883: LD_VAR 0 4
19887: PPUSH
19888: CALL_OW 258
19892: PUSH
19893: LD_INT 2
19895: EQUAL
19896: IFFALSE 19910
// Say ( tmp , D2-FSol1-3 ) ;
19898: LD_VAR 0 4
19902: PPUSH
19903: LD_STRING D2-FSol1-3
19905: PPUSH
19906: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19910: LD_EXP 19
19914: PPUSH
19915: LD_STRING D2-Kurt-4
19917: PPUSH
19918: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19922: LD_VAR 0 4
19926: PPUSH
19927: CALL_OW 258
19931: PUSH
19932: LD_INT 1
19934: EQUAL
19935: IFFALSE 19949
// Say ( tmp , D2-Sol1-4 ) ;
19937: LD_VAR 0 4
19941: PPUSH
19942: LD_STRING D2-Sol1-4
19944: PPUSH
19945: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19949: LD_VAR 0 4
19953: PPUSH
19954: CALL_OW 258
19958: PUSH
19959: LD_INT 2
19961: EQUAL
19962: IFFALSE 19976
// Say ( tmp , D2-FSol1-4 ) ;
19964: LD_VAR 0 4
19968: PPUSH
19969: LD_STRING D2-FSol1-4
19971: PPUSH
19972: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19976: LD_VAR 0 4
19980: PPUSH
19981: CALL_OW 258
19985: PUSH
19986: LD_INT 1
19988: EQUAL
19989: IFFALSE 20003
// Say ( tmp , D2-Sol1-5 ) ;
19991: LD_VAR 0 4
19995: PPUSH
19996: LD_STRING D2-Sol1-5
19998: PPUSH
19999: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20003: LD_VAR 0 4
20007: PPUSH
20008: CALL_OW 258
20012: PUSH
20013: LD_INT 2
20015: EQUAL
20016: IFFALSE 20030
// Say ( tmp , D2-FSol1-5 ) ;
20018: LD_VAR 0 4
20022: PPUSH
20023: LD_STRING D2-FSol1-5
20025: PPUSH
20026: CALL_OW 88
// DialogueOff ;
20030: CALL_OW 7
// end ; dec = ShowQuery1 ;
20034: LD_ADDR_VAR 0 6
20038: PUSH
20039: CALL 6446 0 0
20043: ST_TO_ADDR
// if dec = 1 then
20044: LD_VAR 0 6
20048: PUSH
20049: LD_INT 1
20051: EQUAL
20052: IFFALSE 20094
// begin DialogueOn ;
20054: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20058: LD_EXP 19
20062: PPUSH
20063: LD_STRING D2a-Kurt-1
20065: PPUSH
20066: CALL_OW 88
// DialogueOff ;
20070: CALL_OW 7
// InGameOff ;
20074: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20078: LD_INT 1
20080: PPUSH
20081: LD_INT 2
20083: PPUSH
20084: LD_INT 2
20086: PPUSH
20087: LD_INT 1
20089: PPUSH
20090: CALL_OW 80
// end ; if dec = 2 then
20094: LD_VAR 0 6
20098: PUSH
20099: LD_INT 2
20101: EQUAL
20102: IFFALSE 20602
// begin DialogueOn ;
20104: CALL_OW 6
// if tmp = JMM then
20108: LD_VAR 0 4
20112: PUSH
20113: LD_EXP 1
20117: EQUAL
20118: IFFALSE 20174
// begin Say ( JMM , D2b-JMM-1 ) ;
20120: LD_EXP 1
20124: PPUSH
20125: LD_STRING D2b-JMM-1
20127: PPUSH
20128: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20132: LD_EXP 19
20136: PPUSH
20137: LD_STRING D2b-Kurt-1
20139: PPUSH
20140: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20144: LD_EXP 1
20148: PPUSH
20149: LD_STRING D2b-JMM-2
20151: PPUSH
20152: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20156: LD_EXP 19
20160: PPUSH
20161: LD_STRING D2b-Kurt-2
20163: PPUSH
20164: CALL_OW 88
// DialogueOff ;
20168: CALL_OW 7
// end else
20172: GO 20364
// begin if GetSex ( tmp ) = 1 then
20174: LD_VAR 0 4
20178: PPUSH
20179: CALL_OW 258
20183: PUSH
20184: LD_INT 1
20186: EQUAL
20187: IFFALSE 20201
// Say ( tmp , D2b-Sol1-1 ) ;
20189: LD_VAR 0 4
20193: PPUSH
20194: LD_STRING D2b-Sol1-1
20196: PPUSH
20197: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20201: LD_VAR 0 4
20205: PPUSH
20206: CALL_OW 258
20210: PUSH
20211: LD_INT 2
20213: EQUAL
20214: IFFALSE 20228
// Say ( tmp , D2b-FSol1-1 ) ;
20216: LD_VAR 0 4
20220: PPUSH
20221: LD_STRING D2b-FSol1-1
20223: PPUSH
20224: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20228: LD_EXP 19
20232: PPUSH
20233: LD_STRING D2b-Kurt-1
20235: PPUSH
20236: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20240: LD_VAR 0 4
20244: PPUSH
20245: CALL_OW 258
20249: PUSH
20250: LD_INT 1
20252: EQUAL
20253: IFFALSE 20267
// Say ( tmp , D2b-Sol1-2 ) ;
20255: LD_VAR 0 4
20259: PPUSH
20260: LD_STRING D2b-Sol1-2
20262: PPUSH
20263: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20267: LD_VAR 0 4
20271: PPUSH
20272: CALL_OW 258
20276: PUSH
20277: LD_INT 2
20279: EQUAL
20280: IFFALSE 20294
// Say ( tmp , D2b-FSol1-2 ) ;
20282: LD_VAR 0 4
20286: PPUSH
20287: LD_STRING D2b-FSol1-2
20289: PPUSH
20290: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20294: LD_EXP 19
20298: PPUSH
20299: LD_STRING D2b-Kurt-2
20301: PPUSH
20302: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20306: LD_VAR 0 4
20310: PPUSH
20311: CALL_OW 258
20315: PUSH
20316: LD_INT 1
20318: EQUAL
20319: IFFALSE 20333
// Say ( tmp , D2c-Sol1-2 ) ;
20321: LD_VAR 0 4
20325: PPUSH
20326: LD_STRING D2c-Sol1-2
20328: PPUSH
20329: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20333: LD_VAR 0 4
20337: PPUSH
20338: CALL_OW 258
20342: PUSH
20343: LD_INT 2
20345: EQUAL
20346: IFFALSE 20360
// Say ( tmp , D2c-FSol1-2 ) ;
20348: LD_VAR 0 4
20352: PPUSH
20353: LD_STRING D2c-FSol1-2
20355: PPUSH
20356: CALL_OW 88
// DialogueOff ;
20360: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20364: LD_ADDR_VAR 0 7
20368: PUSH
20369: CALL 6520 0 0
20373: ST_TO_ADDR
// if dec2 = 1 then
20374: LD_VAR 0 7
20378: PUSH
20379: LD_INT 1
20381: EQUAL
20382: IFFALSE 20424
// begin DialogueOn ;
20384: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20388: LD_EXP 19
20392: PPUSH
20393: LD_STRING D2a-Kurt-1
20395: PPUSH
20396: CALL_OW 88
// DialogueOff ;
20400: CALL_OW 7
// InGameOff ;
20404: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20408: LD_INT 1
20410: PPUSH
20411: LD_INT 2
20413: PPUSH
20414: LD_INT 2
20416: PPUSH
20417: LD_INT 1
20419: PPUSH
20420: CALL_OW 80
// end ; if dec2 = 2 then
20424: LD_VAR 0 7
20428: PUSH
20429: LD_INT 2
20431: EQUAL
20432: IFFALSE 20602
// begin if tmp = JMM then
20434: LD_VAR 0 4
20438: PUSH
20439: LD_EXP 1
20443: EQUAL
20444: IFFALSE 20504
// begin DialogueOn ;
20446: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20450: LD_EXP 1
20454: PPUSH
20455: LD_STRING D2c-JMM-1
20457: PPUSH
20458: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20462: LD_EXP 19
20466: PPUSH
20467: LD_STRING D2c-Kurt-1
20469: PPUSH
20470: CALL_OW 88
// DialogueOff ;
20474: CALL_OW 7
// InGameOff ;
20478: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20482: LD_EXP 19
20486: PPUSH
20487: LD_INT 8
20489: PPUSH
20490: CALL_OW 113
// readyToEscape = 1 ;
20494: LD_ADDR_EXP 21
20498: PUSH
20499: LD_INT 1
20501: ST_TO_ADDR
// end else
20502: GO 20602
// begin DialogueOn ;
20504: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20508: LD_VAR 0 4
20512: PPUSH
20513: CALL_OW 258
20517: PUSH
20518: LD_INT 1
20520: EQUAL
20521: IFFALSE 20535
// Say ( tmp , D2c-Sol1-1 ) ;
20523: LD_VAR 0 4
20527: PPUSH
20528: LD_STRING D2c-Sol1-1
20530: PPUSH
20531: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20535: LD_VAR 0 4
20539: PPUSH
20540: CALL_OW 258
20544: PUSH
20545: LD_INT 2
20547: EQUAL
20548: IFFALSE 20562
// Say ( tmp , D2c-FSol1-1 ) ;
20550: LD_VAR 0 4
20554: PPUSH
20555: LD_STRING D2c-FSol1-1
20557: PPUSH
20558: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20562: LD_EXP 19
20566: PPUSH
20567: LD_STRING D2c-Kurt-1
20569: PPUSH
20570: CALL_OW 88
// DialogueOff ;
20574: CALL_OW 7
// InGameOff ;
20578: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20582: LD_EXP 19
20586: PPUSH
20587: LD_INT 8
20589: PPUSH
20590: CALL_OW 113
// readyToEscape = 1 ;
20594: LD_ADDR_EXP 21
20598: PUSH
20599: LD_INT 1
20601: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20602: LD_VAR 0 6
20606: PUSH
20607: LD_INT 3
20609: EQUAL
20610: IFFALSE 20784
// begin DialogueOn ;
20612: CALL_OW 6
// if tmp = JMM then
20616: LD_VAR 0 4
20620: PUSH
20621: LD_EXP 1
20625: EQUAL
20626: IFFALSE 20686
// begin DialogueOn ;
20628: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20632: LD_EXP 1
20636: PPUSH
20637: LD_STRING D2c-JMM-1
20639: PPUSH
20640: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20644: LD_EXP 19
20648: PPUSH
20649: LD_STRING D2c-Kurt-1
20651: PPUSH
20652: CALL_OW 88
// DialogueOff ;
20656: CALL_OW 7
// InGameOff ;
20660: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20664: LD_EXP 19
20668: PPUSH
20669: LD_INT 8
20671: PPUSH
20672: CALL_OW 113
// readyToEscape = 1 ;
20676: LD_ADDR_EXP 21
20680: PUSH
20681: LD_INT 1
20683: ST_TO_ADDR
// end else
20684: GO 20784
// begin DialogueOn ;
20686: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20690: LD_VAR 0 4
20694: PPUSH
20695: CALL_OW 258
20699: PUSH
20700: LD_INT 1
20702: EQUAL
20703: IFFALSE 20717
// Say ( tmp , D2c-Sol1-1 ) ;
20705: LD_VAR 0 4
20709: PPUSH
20710: LD_STRING D2c-Sol1-1
20712: PPUSH
20713: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20717: LD_VAR 0 4
20721: PPUSH
20722: CALL_OW 258
20726: PUSH
20727: LD_INT 2
20729: EQUAL
20730: IFFALSE 20744
// Say ( tmp , D2c-FSol1-1 ) ;
20732: LD_VAR 0 4
20736: PPUSH
20737: LD_STRING D2c-FSol1-1
20739: PPUSH
20740: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20744: LD_EXP 19
20748: PPUSH
20749: LD_STRING D2c-Kurt-1
20751: PPUSH
20752: CALL_OW 88
// DialogueOff ;
20756: CALL_OW 7
// InGameOff ;
20760: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20764: LD_EXP 19
20768: PPUSH
20769: LD_INT 8
20771: PPUSH
20772: CALL_OW 113
// readyToEscape = 1 ;
20776: LD_ADDR_EXP 21
20780: PUSH
20781: LD_INT 1
20783: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20784: LD_ADDR_EXP 29
20788: PUSH
20789: LD_INT 0
20791: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20792: LD_INT 35
20794: PPUSH
20795: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20799: LD_EXP 19
20803: PPUSH
20804: LD_INT 8
20806: PPUSH
20807: CALL_OW 308
20811: PUSH
20812: LD_EXP 21
20816: AND
20817: PUSH
20818: LD_EXP 19
20822: PPUSH
20823: CALL_OW 301
20827: OR
20828: IFFALSE 20792
// if IsDead ( Kurt ) then
20830: LD_EXP 19
20834: PPUSH
20835: CALL_OW 301
20839: IFFALSE 20843
// exit ;
20841: GO 20912
// RemoveUnit ( Kurt ) ;
20843: LD_EXP 19
20847: PPUSH
20848: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20852: LD_EXP 19
20856: PPUSH
20857: LD_STRING Kurt
20859: PPUSH
20860: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20864: LD_INT 1
20866: PPUSH
20867: LD_INT 2
20869: PPUSH
20870: CALL_OW 81
20874: PUSH
20875: LD_INT 0
20877: EQUAL
20878: IFFALSE 20888
// KurtStatus = 1 ;
20880: LD_ADDR_EXP 20
20884: PUSH
20885: LD_INT 1
20887: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20888: LD_INT 1
20890: PPUSH
20891: LD_INT 2
20893: PPUSH
20894: CALL_OW 81
20898: PUSH
20899: LD_INT 2
20901: EQUAL
20902: IFFALSE 20912
// KurtStatus = 2 ;
20904: LD_ADDR_EXP 20
20908: PUSH
20909: LD_INT 2
20911: ST_TO_ADDR
// end ; end_of_file
20912: LD_VAR 0 1
20916: RET
// every 0 0$1 do
20917: GO 20919
20919: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
20920: LD_INT 3
20922: PPUSH
20923: LD_INT 32
20925: PPUSH
20926: LD_INT 3
20928: PPUSH
20929: CALL 6575 0 3
20933: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20934: GO 20936
20936: DISABLE
20937: LD_INT 0
20939: PPUSH
// begin enemyWayX = [ ] ;
20940: LD_ADDR_EXP 48
20944: PUSH
20945: EMPTY
20946: ST_TO_ADDR
// enemyWayY = [ ] ;
20947: LD_ADDR_EXP 49
20951: PUSH
20952: EMPTY
20953: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
20954: LD_ADDR_VAR 0 1
20958: PUSH
20959: LD_INT 1
20961: PPUSH
20962: LD_INT 2
20964: PPUSH
20965: CALL_OW 12
20969: ST_TO_ADDR
// if rnd = 1 then
20970: LD_VAR 0 1
20974: PUSH
20975: LD_INT 1
20977: EQUAL
20978: IFFALSE 21018
// begin enemyWayX = [ 93 , 84 , 104 ] ;
20980: LD_ADDR_EXP 48
20984: PUSH
20985: LD_INT 93
20987: PUSH
20988: LD_INT 84
20990: PUSH
20991: LD_INT 104
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
20999: LD_ADDR_EXP 49
21003: PUSH
21004: LD_INT 51
21006: PUSH
21007: LD_INT 35
21009: PUSH
21010: LD_INT 28
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: LIST
21017: ST_TO_ADDR
// end ; if rnd = 2 then
21018: LD_VAR 0 1
21022: PUSH
21023: LD_INT 2
21025: EQUAL
21026: IFFALSE 21082
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21028: LD_ADDR_EXP 48
21032: PUSH
21033: LD_INT 93
21035: PUSH
21036: LD_INT 52
21038: PUSH
21039: LD_INT 34
21041: PUSH
21042: LD_INT 28
21044: PUSH
21045: LD_INT 30
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21055: LD_ADDR_EXP 49
21059: PUSH
21060: LD_INT 51
21062: PUSH
21063: LD_INT 45
21065: PUSH
21066: LD_INT 35
21068: PUSH
21069: LD_INT 26
21071: PUSH
21072: LD_INT 20
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: ST_TO_ADDR
// end ; enable ;
21082: ENABLE
// end ;
21083: PPOPN 1
21085: END
// every 0 0$1 do
21086: GO 21088
21088: DISABLE
// begin enable ;
21089: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21090: LD_INT 3
21092: PPUSH
21093: LD_INT 2
21095: PPUSH
21096: LD_INT 10
21098: PPUSH
21099: LD_EXP 31
21103: PPUSH
21104: CALL 8010 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21108: LD_INT 3
21110: PPUSH
21111: LD_INT 12
21113: PPUSH
21114: LD_EXP 31
21118: PPUSH
21119: CALL 9895 0 3
// if disableHealAI = 0 then
21123: LD_EXP 33
21127: PUSH
21128: LD_INT 0
21130: EQUAL
21131: IFFALSE 21152
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21133: LD_INT 3
21135: PPUSH
21136: LD_INT 9
21138: PPUSH
21139: LD_INT 10
21141: PPUSH
21142: LD_INT 32
21144: PUSH
21145: EMPTY
21146: LIST
21147: PPUSH
21148: CALL 8401 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21152: LD_INT 3
21154: PPUSH
21155: LD_INT 51
21157: PPUSH
21158: LD_INT 6
21160: PPUSH
21161: CALL 9109 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21165: LD_INT 3
21167: PPUSH
21168: LD_INT 12
21170: PPUSH
21171: LD_INT 121
21173: PPUSH
21174: LD_INT 100
21176: PPUSH
21177: CALL 6970 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21181: LD_INT 3
21183: PPUSH
21184: LD_INT 22
21186: PPUSH
21187: LD_EXP 48
21191: PPUSH
21192: LD_EXP 49
21196: PPUSH
21197: CALL 7173 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21201: LD_INT 3
21203: PPUSH
21204: LD_INT 10
21206: PPUSH
21207: CALL 9252 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21211: LD_INT 3
21213: PPUSH
21214: LD_INT 1
21216: PPUSH
21217: CALL 9665 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21221: LD_INT 2
21223: PPUSH
21224: CALL_OW 303
21228: PUSH
21229: LD_INT 2
21231: PPUSH
21232: CALL_OW 255
21236: PUSH
21237: LD_INT 1
21239: EQUAL
21240: OR
21241: IFFALSE 21253
// DefendDepot ( 3 , rudepo ) ;
21243: LD_INT 3
21245: PPUSH
21246: LD_INT 2
21248: PPUSH
21249: CALL 8945 0 2
// end ;
21253: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21254: LD_INT 22
21256: PUSH
21257: LD_INT 3
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 21
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 55
21276: PUSH
21277: EMPTY
21278: LIST
21279: PUSH
21280: LD_INT 3
21282: PUSH
21283: LD_INT 34
21285: PUSH
21286: LD_INT 51
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: PPUSH
21303: CALL_OW 69
21307: PUSH
21308: LD_INT 0
21310: EQUAL
21311: PUSH
21312: LD_INT 21
21314: PPUSH
21315: CALL_OW 255
21319: PUSH
21320: LD_INT 3
21322: EQUAL
21323: AND
21324: PUSH
21325: LD_INT 21
21327: PPUSH
21328: CALL_OW 302
21332: AND
21333: PUSH
21334: LD_INT 2
21336: PPUSH
21337: CALL_OW 255
21341: PUSH
21342: LD_INT 3
21344: EQUAL
21345: AND
21346: PUSH
21347: LD_INT 2
21349: PPUSH
21350: CALL_OW 302
21354: AND
21355: IFFALSE 21535
21357: GO 21359
21359: DISABLE
// begin enable ;
21360: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21361: LD_INT 2
21363: PPUSH
21364: CALL_OW 274
21368: PPUSH
21369: LD_INT 1
21371: PPUSH
21372: LD_INT 1000
21374: PPUSH
21375: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21379: LD_INT 3
21381: PPUSH
21382: LD_INT 21
21384: PPUSH
21385: LD_INT 4
21387: PUSH
21388: LD_INT 5
21390: PUSH
21391: LD_INT 6
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: LIST
21398: PUSH
21399: LD_OWVAR 67
21403: ARRAY
21404: PPUSH
21405: LD_INT 43
21407: PUSH
21408: LD_INT 43
21410: PUSH
21411: LD_INT 44
21413: PUSH
21414: LD_INT 44
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 43
21425: PUSH
21426: LD_INT 43
21428: PUSH
21429: LD_INT 43
21431: PUSH
21432: LD_INT 44
21434: PUSH
21435: LD_INT 44
21437: PUSH
21438: LD_INT 46
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 43
21451: PUSH
21452: LD_INT 43
21454: PUSH
21455: LD_INT 43
21457: PUSH
21458: LD_INT 44
21460: PUSH
21461: LD_INT 44
21463: PUSH
21464: LD_INT 46
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: LIST
21479: PUSH
21480: LD_OWVAR 67
21484: ARRAY
21485: PPUSH
21486: LD_INT 1
21488: PPUSH
21489: LD_INT 1
21491: PPUSH
21492: LD_INT 22
21494: PUSH
21495: LD_INT 22
21497: PUSH
21498: LD_INT 24
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 1
21507: PPUSH
21508: LD_INT 2
21510: PPUSH
21511: CALL_OW 12
21515: ARRAY
21516: PUSH
21517: LD_INT 24
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: PUSH
21525: LD_OWVAR 67
21529: ARRAY
21530: PPUSH
21531: CALL 6816 0 7
// end ;
21535: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21536: LD_INT 17
21538: PPUSH
21539: CALL_OW 255
21543: PUSH
21544: LD_INT 3
21546: EQUAL
21547: PUSH
21548: LD_INT 17
21550: PPUSH
21551: CALL_OW 302
21555: AND
21556: PUSH
21557: LD_INT 2
21559: PPUSH
21560: CALL_OW 255
21564: PUSH
21565: LD_INT 3
21567: EQUAL
21568: AND
21569: PUSH
21570: LD_INT 2
21572: PPUSH
21573: CALL_OW 302
21577: AND
21578: IFFALSE 21645
21580: GO 21582
21582: DISABLE
// begin enable ;
21583: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21584: LD_INT 17
21586: PPUSH
21587: LD_INT 22
21589: PPUSH
21590: LD_INT 1
21592: PPUSH
21593: LD_INT 1
21595: PPUSH
21596: LD_INT 42
21598: PUSH
21599: LD_INT 43
21601: PUSH
21602: LD_INT 44
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 1
21612: PPUSH
21613: LD_INT 3
21615: PPUSH
21616: CALL_OW 12
21620: ARRAY
21621: PPUSH
21622: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21626: LD_INT 17
21628: PPUSH
21629: LD_INT 22
21631: PPUSH
21632: LD_INT 1
21634: PPUSH
21635: LD_INT 1
21637: PPUSH
21638: LD_INT 51
21640: PPUSH
21641: CALL_OW 185
// end ;
21645: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21646: LD_INT 17
21648: PPUSH
21649: CALL_OW 302
21653: PUSH
21654: LD_INT 17
21656: PPUSH
21657: CALL_OW 255
21661: PUSH
21662: LD_INT 3
21664: EQUAL
21665: AND
21666: PUSH
21667: LD_INT 2
21669: PPUSH
21670: CALL_OW 302
21674: AND
21675: PUSH
21676: LD_INT 2
21678: PPUSH
21679: CALL_OW 255
21683: PUSH
21684: LD_INT 3
21686: EQUAL
21687: AND
21688: PUSH
21689: LD_INT 17
21691: PPUSH
21692: CALL_OW 313
21696: NOT
21697: AND
21698: IFFALSE 21792
21700: GO 21702
21702: DISABLE
21703: LD_INT 0
21705: PPUSH
// begin for i = 1 to 6 do
21706: LD_ADDR_VAR 0 1
21710: PUSH
21711: DOUBLE
21712: LD_INT 1
21714: DEC
21715: ST_TO_ADDR
21716: LD_INT 6
21718: PUSH
21719: FOR_TO
21720: IFFALSE 21790
// begin uc_side = 3 ;
21722: LD_ADDR_OWVAR 20
21726: PUSH
21727: LD_INT 3
21729: ST_TO_ADDR
// uc_nation = 3 ;
21730: LD_ADDR_OWVAR 21
21734: PUSH
21735: LD_INT 3
21737: ST_TO_ADDR
// hc_gallery :=  ;
21738: LD_ADDR_OWVAR 33
21742: PUSH
21743: LD_STRING 
21745: ST_TO_ADDR
// hc_name :=  ;
21746: LD_ADDR_OWVAR 26
21750: PUSH
21751: LD_STRING 
21753: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21754: LD_INT 0
21756: PPUSH
21757: LD_EXP 34
21761: PPUSH
21762: LD_EXP 35
21766: PPUSH
21767: CALL_OW 12
21771: PPUSH
21772: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21776: CALL_OW 44
21780: PPUSH
21781: LD_INT 17
21783: PPUSH
21784: CALL_OW 52
// end ;
21788: GO 21719
21790: POP
21791: POP
// end ;
21792: PPOPN 1
21794: END
// every 2 2$0 do var i , j ;
21795: GO 21797
21797: DISABLE
21798: LD_INT 0
21800: PPUSH
21801: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21802: LD_INT 14700
21804: PUSH
21805: LD_INT 33600
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: PPUSH
21815: LD_INT 2
21817: PPUSH
21818: CALL_OW 12
21822: ARRAY
21823: PPUSH
21824: CALL_OW 67
// disableHealAI = 1 ;
21828: LD_ADDR_EXP 33
21832: PUSH
21833: LD_INT 1
21835: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21836: LD_ADDR_VAR 0 1
21840: PUSH
21841: LD_INT 22
21843: PUSH
21844: LD_INT 3
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 25
21853: PUSH
21854: LD_INT 4
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PPUSH
21865: CALL_OW 69
21869: PUSH
21870: FOR_IN
21871: IFFALSE 21884
// ComExitBuilding ( i ) ;
21873: LD_VAR 0 1
21877: PPUSH
21878: CALL_OW 122
21882: GO 21870
21884: POP
21885: POP
// wait ( 0 0$1 ) ;
21886: LD_INT 35
21888: PPUSH
21889: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21893: LD_INT 35
21895: PPUSH
21896: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21900: LD_ADDR_VAR 0 1
21904: PUSH
21905: LD_INT 22
21907: PUSH
21908: LD_INT 3
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 25
21917: PUSH
21918: LD_INT 4
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PPUSH
21929: CALL_OW 69
21933: PUSH
21934: FOR_IN
21935: IFFALSE 22012
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
21937: LD_ADDR_VAR 0 2
21941: PUSH
21942: LD_INT 17
21944: PPUSH
21945: LD_INT 22
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 25
21957: PUSH
21958: LD_INT 12
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PPUSH
21969: CALL_OW 70
21973: PUSH
21974: FOR_IN
21975: IFFALSE 22008
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
21977: LD_VAR 0 1
21981: PPUSH
21982: LD_VAR 0 2
21986: PPUSH
21987: CALL_OW 250
21991: PPUSH
21992: LD_VAR 0 2
21996: PPUSH
21997: CALL_OW 251
22001: PPUSH
22002: CALL_OW 191
// end ;
22006: GO 21974
22008: POP
22009: POP
// end ;
22010: GO 21934
22012: POP
22013: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22014: LD_INT 22
22016: PUSH
22017: LD_INT 3
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 25
22026: PUSH
22027: LD_INT 4
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PPUSH
22038: CALL_OW 69
22042: PUSH
22043: LD_INT 0
22045: EQUAL
22046: PUSH
22047: LD_EXP 32
22051: PUSH
22052: LD_INT 6
22054: PUSH
22055: LD_INT 7
22057: PUSH
22058: LD_INT 8
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: LIST
22065: PUSH
22066: LD_OWVAR 67
22070: ARRAY
22071: GREATEREQUAL
22072: OR
22073: PUSH
22074: LD_INT 17
22076: PPUSH
22077: LD_INT 22
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 25
22089: PUSH
22090: LD_INT 12
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PPUSH
22101: CALL_OW 70
22105: PUSH
22106: LD_INT 0
22108: EQUAL
22109: OR
22110: IFFALSE 21893
// disableHealAI = 0 ;
22112: LD_ADDR_EXP 33
22116: PUSH
22117: LD_INT 0
22119: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22120: LD_ADDR_VAR 0 1
22124: PUSH
22125: LD_INT 22
22127: PUSH
22128: LD_INT 3
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 25
22137: PUSH
22138: LD_INT 12
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PPUSH
22149: CALL_OW 69
22153: PUSH
22154: FOR_IN
22155: IFFALSE 22171
// SetClass ( i , 16 ) ;
22157: LD_VAR 0 1
22161: PPUSH
22162: LD_INT 16
22164: PPUSH
22165: CALL_OW 336
22169: GO 22154
22171: POP
22172: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22173: LD_ADDR_VAR 0 1
22177: PUSH
22178: LD_INT 22
22180: PUSH
22181: LD_INT 3
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 25
22190: PUSH
22191: LD_INT 4
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PPUSH
22202: CALL_OW 69
22206: PUSH
22207: FOR_IN
22208: IFFALSE 22227
// ComMoveXY ( i , 113 , 94 ) ;
22210: LD_VAR 0 1
22214: PPUSH
22215: LD_INT 113
22217: PPUSH
22218: LD_INT 94
22220: PPUSH
22221: CALL_OW 111
22225: GO 22207
22227: POP
22228: POP
// end ;
22229: PPOPN 2
22231: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22232: LD_INT 21
22234: PPUSH
22235: CALL_OW 255
22239: PUSH
22240: LD_INT 3
22242: EQUAL
22243: PUSH
22244: LD_INT 21
22246: PPUSH
22247: CALL_OW 302
22251: AND
22252: PUSH
22253: LD_INT 22
22255: PUSH
22256: LD_INT 3
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 34
22265: PUSH
22266: LD_INT 51
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PPUSH
22277: CALL_OW 69
22281: PUSH
22282: LD_INT 0
22284: EQUAL
22285: AND
22286: IFFALSE 22318
22288: GO 22290
22290: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22291: LD_INT 21
22293: PPUSH
22294: LD_INT 23
22296: PPUSH
22297: LD_INT 1
22299: PPUSH
22300: LD_INT 1
22302: PPUSH
22303: LD_INT 51
22305: PPUSH
22306: CALL_OW 185
// wait ( 5 5$0 ) ;
22310: LD_INT 10500
22312: PPUSH
22313: CALL_OW 67
// enable ;
22317: ENABLE
// end ; end_of_file
22318: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22319: LD_EXP 26
22323: PUSH
22324: LD_INT 0
22326: LESSEQUAL
22327: IFFALSE 22476
22329: GO 22331
22331: DISABLE
22332: LD_INT 0
22334: PPUSH
22335: PPUSH
22336: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22337: LD_ADDR_VAR 0 2
22341: PUSH
22342: LD_INT 22
22344: PUSH
22345: LD_INT 1
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 21
22354: PUSH
22355: LD_INT 3
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: LD_INT 30
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 30
22377: PUSH
22378: LD_INT 1
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: LIST
22394: PPUSH
22395: CALL_OW 69
22399: ST_TO_ADDR
// for i in tmp do
22400: LD_ADDR_VAR 0 1
22404: PUSH
22405: LD_VAR 0 2
22409: PUSH
22410: FOR_IN
22411: IFFALSE 22444
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22413: LD_ADDR_VAR 0 3
22417: PUSH
22418: LD_VAR 0 3
22422: PUSH
22423: LD_VAR 0 1
22427: PPUSH
22428: CALL_OW 274
22432: PPUSH
22433: LD_INT 1
22435: PPUSH
22436: CALL_OW 275
22440: PLUS
22441: ST_TO_ADDR
22442: GO 22410
22444: POP
22445: POP
// if yourCrates >= needCrates then
22446: LD_VAR 0 3
22450: PUSH
22451: LD_EXP 25
22455: GREATEREQUAL
22456: IFFALSE 22469
// begin FinishMission ( yourCrates ) ;
22458: LD_VAR 0 3
22462: PPUSH
22463: CALL 22479 0 1
// end else
22467: GO 22476
// begin YouLost ( matmin ) ;
22469: LD_STRING matmin
22471: PPUSH
22472: CALL_OW 104
// end ; end ;
22476: PPOPN 3
22478: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22479: LD_INT 0
22481: PPUSH
22482: PPUSH
22483: PPUSH
22484: PPUSH
// if killCounter = 0 then
22485: LD_EXP 47
22489: PUSH
22490: LD_INT 0
22492: EQUAL
22493: IFFALSE 22502
// SetAchievement ( ACH_SURV ) ;
22495: LD_STRING ACH_SURV
22497: PPUSH
22498: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22502: LD_INT 22
22504: PUSH
22505: LD_INT 3
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 21
22514: PUSH
22515: LD_INT 3
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PPUSH
22526: CALL_OW 69
22530: PUSH
22531: LD_INT 0
22533: EQUAL
22534: IFFALSE 22550
// begin wait ( 3 ) ;
22536: LD_INT 3
22538: PPUSH
22539: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22543: LD_STRING ACH_BASEDESTROYER
22545: PPUSH
22546: CALL_OW 543
// end ; m1 := false ;
22550: LD_ADDR_VAR 0 3
22554: PUSH
22555: LD_INT 0
22557: ST_TO_ADDR
// m2 := false ;
22558: LD_ADDR_VAR 0 4
22562: PUSH
22563: LD_INT 0
22565: ST_TO_ADDR
// m3 := false ;
22566: LD_ADDR_VAR 0 5
22570: PUSH
22571: LD_INT 0
22573: ST_TO_ADDR
// if crates + 100 > crates then
22574: LD_VAR 0 1
22578: PUSH
22579: LD_INT 100
22581: PLUS
22582: PUSH
22583: LD_VAR 0 1
22587: GREATER
22588: IFFALSE 22620
// begin AddMedal ( cans , 1 ) ;
22590: LD_STRING cans
22592: PPUSH
22593: LD_INT 1
22595: PPUSH
22596: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22600: LD_INT 1
22602: PPUSH
22603: LD_STRING 06_crates_1
22605: PPUSH
22606: CALL_OW 39
// m1 := true ;
22610: LD_ADDR_VAR 0 3
22614: PUSH
22615: LD_INT 1
22617: ST_TO_ADDR
// end else
22618: GO 22641
// begin AddMedal ( cans , - 1 ) ;
22620: LD_STRING cans
22622: PPUSH
22623: LD_INT 1
22625: NEG
22626: PPUSH
22627: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22631: LD_INT 0
22633: PPUSH
22634: LD_STRING 06_crates_1
22636: PPUSH
22637: CALL_OW 39
// end ; if unitLost < 3 then
22641: LD_EXP 30
22645: PUSH
22646: LD_INT 3
22648: LESS
22649: IFFALSE 22671
// begin AddMedal ( people , 1 ) ;
22651: LD_STRING people
22653: PPUSH
22654: LD_INT 1
22656: PPUSH
22657: CALL_OW 101
// m2 := true ;
22661: LD_ADDR_VAR 0 4
22665: PUSH
22666: LD_INT 1
22668: ST_TO_ADDR
// end else
22669: GO 22682
// begin AddMedal ( people , - 1 ) ;
22671: LD_STRING people
22673: PPUSH
22674: LD_INT 1
22676: NEG
22677: PPUSH
22678: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22682: LD_EXP 28
22686: PPUSH
22687: LD_STRING 06_remoteVehs_1
22689: PPUSH
22690: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22694: LD_EXP 28
22698: PUSH
22699: LD_INT 1
22701: EQUAL
22702: IFFALSE 22724
// begin AddMedal ( remote , 1 ) ;
22704: LD_STRING remote
22706: PPUSH
22707: LD_INT 1
22709: PPUSH
22710: CALL_OW 101
// m3 := true ;
22714: LD_ADDR_VAR 0 5
22718: PUSH
22719: LD_INT 1
22721: ST_TO_ADDR
// end else
22722: GO 22764
// begin if GetTech ( 18 , 1 ) = state_enabled then
22724: LD_INT 18
22726: PPUSH
22727: LD_INT 1
22729: PPUSH
22730: CALL_OW 321
22734: PUSH
22735: LD_INT 1
22737: EQUAL
22738: IFFALSE 22753
// begin AddMedal ( remote , - 1 ) ;
22740: LD_STRING remote
22742: PPUSH
22743: LD_INT 1
22745: NEG
22746: PPUSH
22747: CALL_OW 101
// end else
22751: GO 22764
// begin AddMedal ( remote , - 2 ) ;
22753: LD_STRING remote
22755: PPUSH
22756: LD_INT 2
22758: NEG
22759: PPUSH
22760: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
22764: LD_VAR 0 3
22768: PUSH
22769: LD_VAR 0 4
22773: AND
22774: PUSH
22775: LD_VAR 0 5
22779: AND
22780: IFFALSE 22796
// begin wait ( 3 ) ;
22782: LD_INT 3
22784: PPUSH
22785: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
22789: LD_STRING ACH_ASPEED_6
22791: PPUSH
22792: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
22796: LD_OWVAR 67
22800: PUSH
22801: LD_INT 3
22803: EQUAL
22804: PUSH
22805: LD_VAR 0 3
22809: AND
22810: PUSH
22811: LD_VAR 0 4
22815: AND
22816: PUSH
22817: LD_VAR 0 5
22821: AND
22822: IFFALSE 22834
// SetAchievementEX ( ACH_AMER , 6 ) ;
22824: LD_STRING ACH_AMER
22826: PPUSH
22827: LD_INT 6
22829: PPUSH
22830: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22834: LD_EXP 20
22838: PPUSH
22839: LD_STRING 06_KurtStatus_1
22841: PPUSH
22842: CALL_OW 39
// GiveMedals ( Main ) ;
22846: LD_STRING Main
22848: PPUSH
22849: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22853: LD_INT 22
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 21
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 50
22875: PUSH
22876: EMPTY
22877: LIST
22878: PUSH
22879: LD_INT 2
22881: PUSH
22882: LD_INT 25
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 25
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 25
22904: PUSH
22905: LD_INT 3
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 25
22914: PUSH
22915: LD_INT 4
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: PPUSH
22935: CALL_OW 69
22939: PPUSH
22940: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22944: LD_EXP 1
22948: PPUSH
22949: LD_EXP 43
22953: PUSH
22954: LD_STRING JMM
22956: STR
22957: PPUSH
22958: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22962: LD_EXP 2
22966: PPUSH
22967: LD_EXP 43
22971: PUSH
22972: LD_STRING Lisa
22974: STR
22975: PPUSH
22976: CALL 6074 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22980: LD_EXP 3
22984: PPUSH
22985: LD_EXP 43
22989: PUSH
22990: LD_STRING Bobby
22992: STR
22993: PPUSH
22994: CALL 6074 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22998: LD_EXP 4
23002: PPUSH
23003: LD_EXP 43
23007: PUSH
23008: LD_STRING Cyrus
23010: STR
23011: PPUSH
23012: CALL 6074 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23016: LD_EXP 5
23020: PPUSH
23021: LD_EXP 43
23025: PUSH
23026: LD_STRING Frank
23028: STR
23029: PPUSH
23030: CALL 6074 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23034: LD_EXP 6
23038: PPUSH
23039: LD_EXP 43
23043: PUSH
23044: LD_STRING Brown
23046: STR
23047: PPUSH
23048: CALL 6074 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23052: LD_EXP 7
23056: PPUSH
23057: LD_EXP 43
23061: PUSH
23062: LD_STRING Donaldson
23064: STR
23065: PPUSH
23066: CALL 6074 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23070: LD_EXP 8
23074: PPUSH
23075: LD_EXP 43
23079: PUSH
23080: LD_STRING Gladstone
23082: STR
23083: PPUSH
23084: CALL 6074 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23088: LD_EXP 9
23092: PPUSH
23093: LD_EXP 43
23097: PUSH
23098: LD_STRING Denis
23100: STR
23101: PPUSH
23102: CALL 6074 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23106: LD_EXP 15
23110: PPUSH
23111: LD_EXP 43
23115: PUSH
23116: LD_STRING Joan
23118: STR
23119: PPUSH
23120: CALL 6074 0 2
// if IsLive ( Joan ) then
23124: LD_EXP 15
23128: PPUSH
23129: CALL_OW 300
23133: IFFALSE 23147
// SaveCharacters ( Joan , Joan ) ;
23135: LD_EXP 15
23139: PPUSH
23140: LD_STRING Joan
23142: PPUSH
23143: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23147: LD_EXP 16
23151: PPUSH
23152: LD_STRING 06_JoanStatus_1
23154: PPUSH
23155: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23159: LD_INT 50
23161: PUSH
23162: EMPTY
23163: LIST
23164: PUSH
23165: LD_INT 22
23167: PUSH
23168: LD_INT 1
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 21
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: LD_INT 25
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 25
23200: PUSH
23201: LD_INT 2
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 25
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 25
23220: PUSH
23221: LD_INT 4
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: PPUSH
23241: CALL_OW 69
23245: PUSH
23246: LD_EXP 1
23250: PUSH
23251: LD_EXP 2
23255: PUSH
23256: LD_EXP 3
23260: PUSH
23261: LD_EXP 4
23265: PUSH
23266: LD_EXP 5
23270: PUSH
23271: LD_EXP 6
23275: PUSH
23276: LD_EXP 7
23280: PUSH
23281: LD_EXP 8
23285: PUSH
23286: LD_EXP 9
23290: PUSH
23291: LD_EXP 15
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: DIFF
23308: PPUSH
23309: LD_STRING 06_other_survivors
23311: PPUSH
23312: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23316: LD_INT 50
23318: PUSH
23319: EMPTY
23320: LIST
23321: PUSH
23322: LD_INT 22
23324: PUSH
23325: LD_INT 1
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 21
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 25
23347: PUSH
23348: LD_INT 12
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 25
23357: PUSH
23358: LD_INT 16
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: PPUSH
23376: CALL_OW 69
23380: PPUSH
23381: LD_STRING 06_other_apemans
23383: PPUSH
23384: CALL_OW 38
// YouWin ;
23388: CALL_OW 103
// end ; end_of_file
23392: LD_VAR 0 2
23396: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23397: LD_EXP 39
23401: PUSH
23402: LD_INT 3
23404: EQUAL
23405: IFFALSE 23520
23407: GO 23409
23409: DISABLE
// begin enable ;
23410: ENABLE
// sendedConvoys = 0 ;
23411: LD_ADDR_EXP 39
23415: PUSH
23416: LD_INT 0
23418: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23419: LD_INT 6
23421: PPUSH
23422: LD_INT 3
23424: PPUSH
23425: LD_INT 5
23427: PPUSH
23428: LD_INT 10
23430: PPUSH
23431: CALL_OW 12
23435: PUSH
23436: LD_INT 5
23438: PPUSH
23439: LD_INT 11
23441: PPUSH
23442: CALL_OW 12
23446: PUSH
23447: LD_INT 8
23449: PPUSH
23450: LD_INT 12
23452: PPUSH
23453: CALL_OW 12
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: PUSH
23463: LD_OWVAR 67
23467: ARRAY
23468: PPUSH
23469: LD_INT 0
23471: PPUSH
23472: LD_INT 0
23474: PPUSH
23475: LD_INT 0
23477: PPUSH
23478: LD_INT 0
23480: PPUSH
23481: LD_EXP 34
23485: PPUSH
23486: LD_EXP 35
23490: PPUSH
23491: CALL_OW 12
23495: PPUSH
23496: LD_INT 16
23498: PPUSH
23499: LD_INT 15
23501: PPUSH
23502: LD_INT 1
23504: PPUSH
23505: LD_INT 1
23507: PPUSH
23508: LD_INT 2
23510: PPUSH
23511: CALL_OW 12
23515: PPUSH
23516: CALL 10493 0 12
// end ; end_of_file
23520: END
// export function PrepareNature ; var i , un ; begin
23521: LD_INT 0
23523: PPUSH
23524: PPUSH
23525: PPUSH
// for i = 1 to Difficulty + 2 do
23526: LD_ADDR_VAR 0 2
23530: PUSH
23531: DOUBLE
23532: LD_INT 1
23534: DEC
23535: ST_TO_ADDR
23536: LD_OWVAR 67
23540: PUSH
23541: LD_INT 2
23543: PLUS
23544: PUSH
23545: FOR_TO
23546: IFFALSE 23655
// begin hc_sex = sex_male ;
23548: LD_ADDR_OWVAR 27
23552: PUSH
23553: LD_INT 1
23555: ST_TO_ADDR
// uc_side = 0 ;
23556: LD_ADDR_OWVAR 20
23560: PUSH
23561: LD_INT 0
23563: ST_TO_ADDR
// uc_nation = nation_nature ;
23564: LD_ADDR_OWVAR 21
23568: PUSH
23569: LD_INT 0
23571: ST_TO_ADDR
// hc_class = class_tiger ;
23572: LD_ADDR_OWVAR 28
23576: PUSH
23577: LD_INT 14
23579: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23580: LD_ADDR_OWVAR 31
23584: PUSH
23585: LD_EXP 35
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23605: LD_ADDR_OWVAR 35
23609: PUSH
23610: LD_INT 5
23612: NEG
23613: PPUSH
23614: LD_INT 5
23616: PPUSH
23617: CALL_OW 12
23621: PUSH
23622: LD_OWVAR 67
23626: MUL
23627: ST_TO_ADDR
// un = CreateHuman ;
23628: LD_ADDR_VAR 0 3
23632: PUSH
23633: CALL_OW 44
23637: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23638: LD_VAR 0 3
23642: PPUSH
23643: LD_INT 18
23645: PPUSH
23646: LD_INT 0
23648: PPUSH
23649: CALL_OW 49
// end ;
23653: GO 23545
23655: POP
23656: POP
// for i = 1 to rand ( 3 , 4 ) do
23657: LD_ADDR_VAR 0 2
23661: PUSH
23662: DOUBLE
23663: LD_INT 1
23665: DEC
23666: ST_TO_ADDR
23667: LD_INT 3
23669: PPUSH
23670: LD_INT 4
23672: PPUSH
23673: CALL_OW 12
23677: PUSH
23678: FOR_TO
23679: IFFALSE 23773
// begin hc_sex = sex_male ;
23681: LD_ADDR_OWVAR 27
23685: PUSH
23686: LD_INT 1
23688: ST_TO_ADDR
// uc_side = 0 ;
23689: LD_ADDR_OWVAR 20
23693: PUSH
23694: LD_INT 0
23696: ST_TO_ADDR
// uc_nation = nation_nature ;
23697: LD_ADDR_OWVAR 21
23701: PUSH
23702: LD_INT 0
23704: ST_TO_ADDR
// hc_class = 18 ;
23705: LD_ADDR_OWVAR 28
23709: PUSH
23710: LD_INT 18
23712: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23713: LD_ADDR_OWVAR 31
23717: PUSH
23718: LD_EXP 35
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: LD_INT 0
23728: PUSH
23729: LD_INT 0
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: ST_TO_ADDR
// hc_agressivity = 0 ;
23738: LD_ADDR_OWVAR 35
23742: PUSH
23743: LD_INT 0
23745: ST_TO_ADDR
// un = CreateHuman ;
23746: LD_ADDR_VAR 0 3
23750: PUSH
23751: CALL_OW 44
23755: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23756: LD_VAR 0 3
23760: PPUSH
23761: LD_INT 18
23763: PPUSH
23764: LD_INT 0
23766: PPUSH
23767: CALL_OW 49
// end ;
23771: GO 23678
23773: POP
23774: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23775: LD_ADDR_VAR 0 2
23779: PUSH
23780: DOUBLE
23781: LD_INT 1
23783: DEC
23784: ST_TO_ADDR
23785: LD_INT 1
23787: PPUSH
23788: LD_INT 3
23790: PPUSH
23791: CALL_OW 12
23795: PUSH
23796: LD_OWVAR 67
23800: PLUS
23801: PUSH
23802: FOR_TO
23803: IFFALSE 23952
// begin hc_sex = sex_male ;
23805: LD_ADDR_OWVAR 27
23809: PUSH
23810: LD_INT 1
23812: ST_TO_ADDR
// uc_side = 0 ;
23813: LD_ADDR_OWVAR 20
23817: PUSH
23818: LD_INT 0
23820: ST_TO_ADDR
// uc_nation = nation_nature ;
23821: LD_ADDR_OWVAR 21
23825: PUSH
23826: LD_INT 0
23828: ST_TO_ADDR
// hc_class = class_apeman ;
23829: LD_ADDR_OWVAR 28
23833: PUSH
23834: LD_INT 12
23836: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23837: LD_ADDR_OWVAR 31
23841: PUSH
23842: LD_INT 2
23844: PPUSH
23845: LD_INT 5
23847: PPUSH
23848: CALL_OW 12
23852: PUSH
23853: LD_INT 0
23855: PPUSH
23856: LD_INT 2
23858: PPUSH
23859: CALL_OW 12
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23876: LD_ADDR_OWVAR 35
23880: PUSH
23881: LD_INT 20
23883: PPUSH
23884: LD_INT 30
23886: PPUSH
23887: CALL_OW 12
23891: PUSH
23892: LD_INT 30
23894: PPUSH
23895: LD_INT 40
23897: PPUSH
23898: CALL_OW 12
23902: PUSH
23903: LD_INT 40
23905: PPUSH
23906: LD_INT 50
23908: PPUSH
23909: CALL_OW 12
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: PUSH
23919: LD_OWVAR 67
23923: ARRAY
23924: ST_TO_ADDR
// un = CreateHuman ;
23925: LD_ADDR_VAR 0 3
23929: PUSH
23930: CALL_OW 44
23934: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
23935: LD_VAR 0 3
23939: PPUSH
23940: LD_INT 19
23942: PPUSH
23943: LD_INT 0
23945: PPUSH
23946: CALL_OW 49
// end ;
23950: GO 23802
23952: POP
23953: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
23954: LD_ADDR_VAR 0 2
23958: PUSH
23959: DOUBLE
23960: LD_INT 1
23962: DEC
23963: ST_TO_ADDR
23964: LD_INT 5
23966: PPUSH
23967: LD_INT 6
23969: PPUSH
23970: CALL_OW 12
23974: PUSH
23975: LD_OWVAR 67
23979: PLUS
23980: PUSH
23981: FOR_TO
23982: IFFALSE 24090
// begin hc_sex = sex_male ;
23984: LD_ADDR_OWVAR 27
23988: PUSH
23989: LD_INT 1
23991: ST_TO_ADDR
// uc_side = 0 ;
23992: LD_ADDR_OWVAR 20
23996: PUSH
23997: LD_INT 0
23999: ST_TO_ADDR
// uc_nation = nation_nature ;
24000: LD_ADDR_OWVAR 21
24004: PUSH
24005: LD_INT 0
24007: ST_TO_ADDR
// hc_class = class_apeman ;
24008: LD_ADDR_OWVAR 28
24012: PUSH
24013: LD_INT 12
24015: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24016: LD_ADDR_OWVAR 31
24020: PUSH
24021: LD_INT 2
24023: PPUSH
24024: LD_INT 5
24026: PPUSH
24027: CALL_OW 12
24031: PUSH
24032: LD_INT 0
24034: PPUSH
24035: LD_INT 2
24037: PPUSH
24038: CALL_OW 12
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: ST_TO_ADDR
// hc_agressivity = 0 ;
24055: LD_ADDR_OWVAR 35
24059: PUSH
24060: LD_INT 0
24062: ST_TO_ADDR
// un = CreateHuman ;
24063: LD_ADDR_VAR 0 3
24067: PUSH
24068: CALL_OW 44
24072: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24073: LD_VAR 0 3
24077: PPUSH
24078: LD_INT 20
24080: PPUSH
24081: LD_INT 0
24083: PPUSH
24084: CALL_OW 49
// end ;
24088: GO 23981
24090: POP
24091: POP
// end ; end_of_file end_of_file
24092: LD_VAR 0 1
24096: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
24097: GO 24099
24099: DISABLE
// begin ru_radar := 98 ;
24100: LD_ADDR_EXP 50
24104: PUSH
24105: LD_INT 98
24107: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24108: LD_ADDR_EXP 51
24112: PUSH
24113: LD_INT 89
24115: ST_TO_ADDR
// us_hack := 99 ;
24116: LD_ADDR_EXP 52
24120: PUSH
24121: LD_INT 99
24123: ST_TO_ADDR
// us_artillery := 97 ;
24124: LD_ADDR_EXP 53
24128: PUSH
24129: LD_INT 97
24131: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24132: LD_ADDR_EXP 54
24136: PUSH
24137: LD_INT 91
24139: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
24140: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
24141: LD_INT 0
24143: PPUSH
24144: PPUSH
24145: PPUSH
24146: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24147: LD_VAR 0 1
24151: PPUSH
24152: CALL_OW 264
24156: PUSH
24157: LD_EXP 54
24161: EQUAL
24162: IFFALSE 24234
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24164: LD_INT 68
24166: PPUSH
24167: LD_VAR 0 1
24171: PPUSH
24172: CALL_OW 255
24176: PPUSH
24177: CALL_OW 321
24181: PUSH
24182: LD_INT 2
24184: EQUAL
24185: IFFALSE 24197
// eff := 70 else
24187: LD_ADDR_VAR 0 6
24191: PUSH
24192: LD_INT 70
24194: ST_TO_ADDR
24195: GO 24205
// eff := 30 ;
24197: LD_ADDR_VAR 0 6
24201: PUSH
24202: LD_INT 30
24204: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24205: LD_VAR 0 1
24209: PPUSH
24210: CALL_OW 250
24214: PPUSH
24215: LD_VAR 0 1
24219: PPUSH
24220: CALL_OW 251
24224: PPUSH
24225: LD_VAR 0 6
24229: PPUSH
24230: CALL_OW 495
// end ; end ;
24234: LD_VAR 0 4
24238: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
24239: LD_INT 0
24241: PPUSH
24242: PPUSH
24243: PPUSH
24244: PPUSH
24245: PPUSH
24246: PPUSH
// if cmd = 124 then
24247: LD_VAR 0 1
24251: PUSH
24252: LD_INT 124
24254: EQUAL
24255: IFFALSE 24461
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
24257: LD_ADDR_VAR 0 5
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: LD_INT 34
24267: PUSH
24268: LD_INT 53
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 34
24277: PUSH
24278: LD_INT 14
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: LIST
24289: PPUSH
24290: CALL_OW 69
24294: ST_TO_ADDR
// if not tmp then
24295: LD_VAR 0 5
24299: NOT
24300: IFFALSE 24304
// exit ;
24302: GO 24461
// for i in tmp do
24304: LD_ADDR_VAR 0 3
24308: PUSH
24309: LD_VAR 0 5
24313: PUSH
24314: FOR_IN
24315: IFFALSE 24459
// begin taskList := GetTaskList ( i ) ;
24317: LD_ADDR_VAR 0 6
24321: PUSH
24322: LD_VAR 0 3
24326: PPUSH
24327: CALL_OW 437
24331: ST_TO_ADDR
// if not taskList then
24332: LD_VAR 0 6
24336: NOT
24337: IFFALSE 24341
// continue ;
24339: GO 24314
// for j = 1 to taskList do
24341: LD_ADDR_VAR 0 4
24345: PUSH
24346: DOUBLE
24347: LD_INT 1
24349: DEC
24350: ST_TO_ADDR
24351: LD_VAR 0 6
24355: PUSH
24356: FOR_TO
24357: IFFALSE 24455
// if taskList [ j ] [ 1 ] = | then
24359: LD_VAR 0 6
24363: PUSH
24364: LD_VAR 0 4
24368: ARRAY
24369: PUSH
24370: LD_INT 1
24372: ARRAY
24373: PUSH
24374: LD_STRING |
24376: EQUAL
24377: IFFALSE 24453
// begin _taskList := Delete ( taskList , 1 ) ;
24379: LD_ADDR_VAR 0 7
24383: PUSH
24384: LD_VAR 0 6
24388: PPUSH
24389: LD_INT 1
24391: PPUSH
24392: CALL_OW 3
24396: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
24397: LD_VAR 0 3
24401: PPUSH
24402: LD_VAR 0 7
24406: PPUSH
24407: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
24411: LD_VAR 0 3
24415: PPUSH
24416: LD_VAR 0 6
24420: PUSH
24421: LD_VAR 0 4
24425: ARRAY
24426: PUSH
24427: LD_INT 2
24429: ARRAY
24430: PPUSH
24431: LD_VAR 0 6
24435: PUSH
24436: LD_VAR 0 4
24440: ARRAY
24441: PUSH
24442: LD_INT 3
24444: ARRAY
24445: PPUSH
24446: LD_INT 8
24448: PPUSH
24449: CALL 24466 0 4
// end ;
24453: GO 24356
24455: POP
24456: POP
// end ;
24457: GO 24314
24459: POP
24460: POP
// end ; end ;
24461: LD_VAR 0 2
24465: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24466: LD_INT 0
24468: PPUSH
24469: PPUSH
24470: PPUSH
24471: PPUSH
24472: PPUSH
24473: PPUSH
24474: PPUSH
24475: PPUSH
24476: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24477: LD_VAR 0 1
24481: NOT
24482: PUSH
24483: LD_VAR 0 2
24487: PPUSH
24488: LD_VAR 0 3
24492: PPUSH
24493: CALL_OW 488
24497: NOT
24498: OR
24499: PUSH
24500: LD_VAR 0 4
24504: NOT
24505: OR
24506: IFFALSE 24510
// exit ;
24508: GO 24850
// list := [ ] ;
24510: LD_ADDR_VAR 0 13
24514: PUSH
24515: EMPTY
24516: ST_TO_ADDR
// if x - r < 0 then
24517: LD_VAR 0 2
24521: PUSH
24522: LD_VAR 0 4
24526: MINUS
24527: PUSH
24528: LD_INT 0
24530: LESS
24531: IFFALSE 24543
// min_x := 0 else
24533: LD_ADDR_VAR 0 7
24537: PUSH
24538: LD_INT 0
24540: ST_TO_ADDR
24541: GO 24559
// min_x := x - r ;
24543: LD_ADDR_VAR 0 7
24547: PUSH
24548: LD_VAR 0 2
24552: PUSH
24553: LD_VAR 0 4
24557: MINUS
24558: ST_TO_ADDR
// if y - r < 0 then
24559: LD_VAR 0 3
24563: PUSH
24564: LD_VAR 0 4
24568: MINUS
24569: PUSH
24570: LD_INT 0
24572: LESS
24573: IFFALSE 24585
// min_y := 0 else
24575: LD_ADDR_VAR 0 8
24579: PUSH
24580: LD_INT 0
24582: ST_TO_ADDR
24583: GO 24601
// min_y := y - r ;
24585: LD_ADDR_VAR 0 8
24589: PUSH
24590: LD_VAR 0 3
24594: PUSH
24595: LD_VAR 0 4
24599: MINUS
24600: ST_TO_ADDR
// max_x := x + r ;
24601: LD_ADDR_VAR 0 9
24605: PUSH
24606: LD_VAR 0 2
24610: PUSH
24611: LD_VAR 0 4
24615: PLUS
24616: ST_TO_ADDR
// max_y := y + r ;
24617: LD_ADDR_VAR 0 10
24621: PUSH
24622: LD_VAR 0 3
24626: PUSH
24627: LD_VAR 0 4
24631: PLUS
24632: ST_TO_ADDR
// for _x = min_x to max_x do
24633: LD_ADDR_VAR 0 11
24637: PUSH
24638: DOUBLE
24639: LD_VAR 0 7
24643: DEC
24644: ST_TO_ADDR
24645: LD_VAR 0 9
24649: PUSH
24650: FOR_TO
24651: IFFALSE 24768
// for _y = min_y to max_y do
24653: LD_ADDR_VAR 0 12
24657: PUSH
24658: DOUBLE
24659: LD_VAR 0 8
24663: DEC
24664: ST_TO_ADDR
24665: LD_VAR 0 10
24669: PUSH
24670: FOR_TO
24671: IFFALSE 24764
// begin if not ValidHex ( _x , _y ) then
24673: LD_VAR 0 11
24677: PPUSH
24678: LD_VAR 0 12
24682: PPUSH
24683: CALL_OW 488
24687: NOT
24688: IFFALSE 24692
// continue ;
24690: GO 24670
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24692: LD_VAR 0 11
24696: PPUSH
24697: LD_VAR 0 12
24701: PPUSH
24702: CALL_OW 351
24706: PUSH
24707: LD_VAR 0 11
24711: PPUSH
24712: LD_VAR 0 12
24716: PPUSH
24717: CALL_OW 554
24721: AND
24722: IFFALSE 24762
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24724: LD_ADDR_VAR 0 13
24728: PUSH
24729: LD_VAR 0 13
24733: PPUSH
24734: LD_VAR 0 13
24738: PUSH
24739: LD_INT 1
24741: PLUS
24742: PPUSH
24743: LD_VAR 0 11
24747: PUSH
24748: LD_VAR 0 12
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PPUSH
24757: CALL_OW 2
24761: ST_TO_ADDR
// end ;
24762: GO 24670
24764: POP
24765: POP
24766: GO 24650
24768: POP
24769: POP
// if not list then
24770: LD_VAR 0 13
24774: NOT
24775: IFFALSE 24779
// exit ;
24777: GO 24850
// for i in list do
24779: LD_ADDR_VAR 0 6
24783: PUSH
24784: LD_VAR 0 13
24788: PUSH
24789: FOR_IN
24790: IFFALSE 24848
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24792: LD_VAR 0 1
24796: PPUSH
24797: LD_STRING M
24799: PUSH
24800: LD_VAR 0 6
24804: PUSH
24805: LD_INT 1
24807: ARRAY
24808: PUSH
24809: LD_VAR 0 6
24813: PUSH
24814: LD_INT 2
24816: ARRAY
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: PUSH
24839: EMPTY
24840: LIST
24841: PPUSH
24842: CALL_OW 447
24846: GO 24789
24848: POP
24849: POP
// end ;
24850: LD_VAR 0 5
24854: RET
