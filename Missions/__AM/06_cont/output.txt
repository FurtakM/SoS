// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 41
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7155 0 0
// CreateNature ;
  57: CALL 19596 0 0
// PrepareRussian ;
  61: CALL 5654 0 0
// PrepareVehicles ;
  65: CALL 1572 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 1981 0 0
// PreparePlayerApemans ;
  77: CALL 2119 0 0
// Action ;
  81: CALL 9794 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 41
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 42
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 43
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 22
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 23
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 39
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 40
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 29
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 45
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 38
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 24
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 25
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 26
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 28
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 32
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 44
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 30
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 31
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 36
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 37
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 33
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 27
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 41
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 41
 611: NOT
 612: PPUSH
 613: LD_EXP 43
 617: PPUSH
 618: CALL 39262 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 14
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 39262 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 41
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 41
 804: NOT
 805: PPUSH
 806: LD_EXP 43
 810: PPUSH
 811: CALL 39262 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 43
 925: PPUSH
 926: CALL 39262 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 43
1040: PPUSH
1041: CALL 39262 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 41
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 41
1154: NOT
1155: PPUSH
1156: LD_EXP 43
1160: PPUSH
1161: CALL 39262 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 41
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 41
1274: NOT
1275: PPUSH
1276: LD_EXP 43
1280: PPUSH
1281: CALL 39262 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 41
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 41
1394: NOT
1395: PPUSH
1396: LD_EXP 43
1400: PPUSH
1401: CALL 39262 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 41
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 41
1514: NOT
1515: PPUSH
1516: LD_EXP 43
1520: PPUSH
1521: CALL 39262 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; end ;
1567: LD_VAR 0 1
1571: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1580: LD_ADDR_VAR 0 5
1584: PUSH
1585: LD_STRING 06_VehiclesIn06_1
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: CALL_OW 30
1594: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1595: LD_ADDR_EXP 39
1599: PUSH
1600: LD_STRING 06_ResourcesInCargo06_1
1602: PPUSH
1603: EMPTY
1604: PPUSH
1605: CALL_OW 30
1609: ST_TO_ADDR
// cargoList := [ ] ;
1610: LD_ADDR_VAR 0 6
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// uc_side := 1 ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if vehicles then
1625: LD_VAR 0 5
1629: IFFALSE 1976
// begin for i := 1 to vehicles do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_VAR 0 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 21
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 37
1673: PUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1709: LD_ADDR_OWVAR 38
1713: PUSH
1714: LD_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1729: LD_ADDR_OWVAR 40
1733: PUSH
1734: LD_VAR 0 5
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 5
1747: ARRAY
1748: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1749: LD_ADDR_OWVAR 41
1753: PUSH
1754: LD_INT 40
1756: ST_TO_ADDR
// veh := CreateVehicle ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1767: LD_VAR 0 4
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1779: LD_VAR 0 4
1783: PPUSH
1784: LD_INT 2
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 49
// end ;
1794: GO 1646
1796: POP
1797: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1798: LD_ADDR_VAR 0 6
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: ST_TO_ADDR
// if cargoList then
1843: LD_VAR 0 6
1847: IFFALSE 1976
// for i := 1 to cargoList do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: DOUBLE
1855: LD_INT 1
1857: DEC
1858: ST_TO_ADDR
1859: LD_VAR 0 6
1863: PUSH
1864: FOR_TO
1865: IFFALSE 1974
// begin if resources then
1867: LD_EXP 39
1871: IFFALSE 1972
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_EXP 39
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_EXP 39
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 2
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1939: LD_VAR 0 6
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_EXP 39
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PUSH
1964: LD_INT 3
1966: ARRAY
1967: PPUSH
1968: CALL_OW 291
// end ; end ;
1972: GO 1864
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// export function PrepareOthers ; var i , veh ; begin
1981: LD_INT 0
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 1 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// uc_nation := 1 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2002: LD_ADDR_EXP 11
2006: PUSH
2007: LD_STRING OthersIn06
2009: PPUSH
2010: CALL_OW 31
2014: ST_TO_ADDR
// for i in others do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 11
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: ST_TO_ADDR
// if veh then
2069: LD_VAR 0 3
2073: IFFALSE 2095
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
2093: GO 2110
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2095: LD_VAR 0 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// end ;
2110: GO 2025
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// uc_side = 1 ;
2124: LD_ADDR_OWVAR 20
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// uc_nation = 0 ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 0
2139: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2140: LD_ADDR_EXP 12
2144: PUSH
2145: LD_STRING ApeIn06
2147: PPUSH
2148: CALL_OW 31
2152: ST_TO_ADDR
// if not ape then
2153: LD_EXP 12
2157: NOT
2158: IFFALSE 2162
// exit ;
2160: GO 2194
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side := 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation := 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_EXP 43
2330: PPUSH
2331: CALL 39262 0 3
2335: ST_TO_ADDR
// if not Denis then
2336: LD_EXP 9
2340: NOT
2341: IFFALSE 2345
// exit ;
2343: GO 2486
// for i = 1 to xy do
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_VAR 0 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2460
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 2
2382: PUSH
2383: LD_VAR 0 3
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: CALL_OW 428
2397: PUSH
2398: LD_INT 0
2400: EQUAL
2401: IFFALSE 2458
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2403: LD_EXP 9
2407: PPUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 48
// if IsPlaced ( Denis ) then
2445: LD_EXP 9
2449: PPUSH
2450: CALL_OW 305
2454: IFFALSE 2458
// break ;
2456: GO 2460
// end ;
2458: GO 2360
2460: POP
2461: POP
// SetClass ( Denis , 4 ) ;
2462: LD_EXP 9
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2474: LD_EXP 9
2478: PPUSH
2479: LD_INT 750
2481: PPUSH
2482: CALL_OW 234
// end ;
2486: LD_VAR 0 1
2490: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
// area := HarrisonSupportArea ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_INT 3
2505: ST_TO_ADDR
// dir := 2 ;
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 2
2513: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2514: LD_VAR 0 4
2518: PPUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 70
2533: IFFALSE 2551
// begin area := HarrisonSupportArea2 ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 31
2542: ST_TO_ADDR
// dir := 1 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; uc_side = 1 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// uc_nation = 1 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// vc_engine := engine_combustion ;
2567: LD_ADDR_OWVAR 39
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// vc_control := control_manual ;
2575: LD_ADDR_OWVAR 38
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2583: LD_ADDR_OWVAR 40
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 2
2619: ST_TO_ADDR
// veh := CreateVehicle ;
2620: LD_ADDR_VAR 0 3
2624: PUSH
2625: CALL_OW 45
2629: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_VAR 0 5
2639: PPUSH
2640: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 50
2668: PPUSH
2669: CALL_OW 240
// hc_class := class_engineer ;
2673: LD_ADDR_OWVAR 28
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// hc_sex := sex_male ;
2681: LD_ADDR_OWVAR 27
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2689: LD_ADDR_OWVAR 33
2693: PUSH
2694: LD_STRING SecondCharsGal
2696: ST_TO_ADDR
// hc_face_number := 52 ;
2697: LD_ADDR_OWVAR 34
2701: PUSH
2702: LD_INT 52
2704: ST_TO_ADDR
// hc_name := Craig Brown ;
2705: LD_ADDR_OWVAR 26
2709: PUSH
2710: LD_STRING Craig Brown
2712: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2713: LD_ADDR_OWVAR 29
2717: PUSH
2718: LD_INT 10
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2728: LD_ADDR_OWVAR 30
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2751: LD_ADDR_OWVAR 31
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2774: LD_ADDR_EXP 17
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: CALL_OW 52
// vc_engine := engine_combustion ;
2798: LD_ADDR_OWVAR 39
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// vc_control := control_manual ;
2806: LD_ADDR_OWVAR 38
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2814: LD_ADDR_OWVAR 40
2818: PUSH
2819: LD_INT 5
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2843: LD_ADDR_OWVAR 37
2847: PUSH
2848: LD_INT 2
2850: ST_TO_ADDR
// veh := CreateVehicle ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 45
2860: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2892: LD_VAR 0 3
2896: PPUSH
2897: LD_INT 50
2899: PPUSH
2900: CALL_OW 240
// hc_class := class_soldier ;
2904: LD_ADDR_OWVAR 28
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_sex := sex_female ;
2912: LD_ADDR_OWVAR 27
2916: PUSH
2917: LD_INT 2
2919: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING SecondCharsGal
2927: ST_TO_ADDR
// hc_face_number := 42 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 42
2935: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2936: LD_ADDR_OWVAR 29
2940: PUSH
2941: LD_INT 11
2943: PUSH
2944: LD_INT 10
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2951: LD_ADDR_OWVAR 26
2955: PUSH
2956: LD_STRING Ingrid Jonsson
2958: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2959: LD_ADDR_OWVAR 30
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2982: LD_ADDR_OWVAR 31
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3015: LD_EXP 18
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 23
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 26
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: LD_EXP 3
3089: PUSH
3090: LD_EXP 4
3094: PUSH
3095: LD_EXP 8
3099: PUSH
3100: LD_EXP 9
3104: PUSH
3105: LD_EXP 5
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: DIFF
3117: ST_TO_ADDR
// for i in _tmp do
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_VAR 0 4
3127: PUSH
3128: FOR_IN
3129: IFFALSE 3170
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 32
3138: PPUSH
3139: CALL_OW 308
3143: PUSH
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL_OW 302
3153: AND
3154: IFFALSE 3168
// begin tmp := i ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_VAR 0 2
3165: ST_TO_ADDR
// break ;
3166: GO 3170
// end ;
3168: GO 3128
3170: POP
3171: POP
// if not tmp then
3172: LD_VAR 0 3
3176: NOT
3177: IFFALSE 3189
// tmp := JMM ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_EXP 1
3188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3189: LD_INT 35
3191: PPUSH
3192: CALL_OW 67
// if IsDead ( tmp ) then
3196: LD_VAR 0 3
3200: PPUSH
3201: CALL_OW 301
3205: IFFALSE 3217
// tmp := JMM ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_EXP 1
3216: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3217: LD_INT 81
3219: PUSH
3220: LD_INT 1
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 91
3229: PUSH
3230: LD_VAR 0 3
3234: PUSH
3235: LD_INT 15
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: NOT
3252: PUSH
3253: LD_EXP 26
3257: PUSH
3258: LD_INT 6300
3260: LESS
3261: OR
3262: IFFALSE 3189
// blockSpawn := 1 ;
3264: LD_ADDR_EXP 29
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// uc_side := 4 ;
3272: LD_ADDR_OWVAR 20
3276: PUSH
3277: LD_INT 4
3279: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3280: LD_ADDR_EXP 15
3284: PUSH
3285: LD_STRING Joan
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: LD_EXP 43
3295: PPUSH
3296: CALL 39262 0 3
3300: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3301: LD_EXP 15
3305: PPUSH
3306: LD_VAR 0 3
3310: PPUSH
3311: CALL_OW 250
3315: PPUSH
3316: LD_VAR 0 3
3320: PPUSH
3321: CALL_OW 251
3325: PPUSH
3326: LD_INT 5
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3336: LD_EXP 15
3340: PPUSH
3341: LD_INT 250
3343: PPUSH
3344: CALL_OW 234
// InGameOn ;
3348: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3352: LD_EXP 15
3356: PPUSH
3357: CALL_OW 87
// wait ( 0 0$2 ) ;
3361: LD_INT 70
3363: PPUSH
3364: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3368: LD_VAR 0 3
3372: PPUSH
3373: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3377: LD_VAR 0 3
3381: PPUSH
3382: CALL_OW 122
// wait ( 0 0$1 ) ;
3386: LD_INT 35
3388: PPUSH
3389: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: LD_EXP 15
3402: PPUSH
3403: CALL_OW 112
// wait ( 0 0$2 ) ;
3407: LD_INT 70
3409: PPUSH
3410: CALL_OW 67
// DialogueOn ;
3414: CALL_OW 6
// if tmp = JMM then
3418: LD_VAR 0 3
3422: PUSH
3423: LD_EXP 1
3427: EQUAL
3428: IFFALSE 3577
// begin ComTurnUnit ( JMM , Joan ) ;
3430: LD_EXP 1
3434: PPUSH
3435: LD_EXP 15
3439: PPUSH
3440: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3444: LD_EXP 1
3448: PPUSH
3449: LD_STRING D5b-JMM-1
3451: PPUSH
3452: CALL_OW 88
// DialogueOff ;
3456: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3460: LD_EXP 15
3464: PPUSH
3465: LD_INT 500
3467: PPUSH
3468: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3472: LD_EXP 15
3476: PPUSH
3477: LD_EXP 1
3481: PPUSH
3482: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3486: LD_EXP 1
3490: PPUSH
3491: LD_EXP 15
3495: PPUSH
3496: CALL_OW 119
// wait ( 0 0$1 ) ;
3500: LD_INT 35
3502: PPUSH
3503: CALL_OW 67
// DialogueOn ;
3507: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3511: LD_EXP 15
3515: PPUSH
3516: LD_STRING D5b-Joan-1
3518: PPUSH
3519: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3523: LD_EXP 1
3527: PPUSH
3528: LD_STRING D5b-JMM-2
3530: PPUSH
3531: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3535: LD_EXP 15
3539: PPUSH
3540: LD_STRING D5b-Joan-2
3542: PPUSH
3543: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_STRING D5b-JMM-3
3554: PPUSH
3555: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_STRING D5b-Joan-3
3566: PPUSH
3567: CALL_OW 88
// DialogueOff ;
3571: CALL_OW 7
// end else
3575: GO 3942
// begin ComTurnUnit ( tmp , Joan ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_EXP 15
3586: PPUSH
3587: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3591: LD_VAR 0 3
3595: PPUSH
3596: LD_STRING D5a-Sol1-1
3598: PPUSH
3599: CALL_OW 88
// DialogueOff ;
3603: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_INT 500
3614: PPUSH
3615: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3619: LD_EXP 15
3623: PPUSH
3624: LD_VAR 0 3
3628: PPUSH
3629: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3633: LD_VAR 0 3
3637: PPUSH
3638: LD_EXP 15
3642: PPUSH
3643: CALL_OW 119
// wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// DialogueOn ;
3654: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3658: LD_EXP 15
3662: PPUSH
3663: LD_STRING D5a-Joan-1
3665: PPUSH
3666: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3670: LD_VAR 0 3
3674: PPUSH
3675: LD_STRING D5a-Sol1-2
3677: PPUSH
3678: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3682: LD_EXP 15
3686: PPUSH
3687: LD_STRING D5a-Joan-2
3689: PPUSH
3690: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_STRING D5a-Sol1-3
3701: PPUSH
3702: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3706: LD_EXP 15
3710: PPUSH
3711: LD_STRING D5a-Joan-3
3713: PPUSH
3714: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_STRING D5a-Sol1-4
3725: PPUSH
3726: CALL_OW 88
// DialogueOff ;
3730: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3734: LD_EXP 1
3738: PUSH
3739: LD_INT 55
3741: PUSH
3742: EMPTY
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: IN
3750: IFFALSE 3773
// begin ComMoveUnit ( JMM , Joan ) ;
3752: LD_EXP 1
3756: PPUSH
3757: LD_EXP 15
3761: PPUSH
3762: CALL_OW 112
// wait ( 0 0$05 ) ;
3766: LD_INT 175
3768: PPUSH
3769: CALL_OW 67
// end ; ComExit ( JMM ) ;
3773: LD_EXP 1
3777: PPUSH
3778: CALL 76331 0 1
// wait ( 0 0$1 ) ;
3782: LD_INT 35
3784: PPUSH
3785: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3789: LD_INT 35
3791: PPUSH
3792: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3796: LD_EXP 15
3800: PUSH
3801: LD_VAR 0 3
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PPUSH
3810: LD_EXP 1
3814: PPUSH
3815: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3819: LD_EXP 15
3823: PPUSH
3824: LD_EXP 1
3828: PPUSH
3829: CALL_OW 296
3833: PUSH
3834: LD_INT 5
3836: LESS
3837: IFFALSE 3789
// ComTurnUnit ( Joan , JMM ) ;
3839: LD_EXP 15
3843: PPUSH
3844: LD_EXP 1
3848: PPUSH
3849: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3853: LD_EXP 1
3857: PPUSH
3858: LD_EXP 15
3862: PPUSH
3863: CALL_OW 119
// wait ( 0 0$1 ) ;
3867: LD_INT 35
3869: PPUSH
3870: CALL_OW 67
// DialogueOn ;
3874: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3878: LD_EXP 15
3882: PPUSH
3883: LD_STRING D5a-Joan-4
3885: PPUSH
3886: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3890: LD_EXP 1
3894: PPUSH
3895: LD_STRING D5a-JMM-4
3897: PPUSH
3898: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3902: LD_EXP 15
3906: PPUSH
3907: LD_STRING D5a-Joan-5
3909: PPUSH
3910: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_STRING D5a-JMM-5
3921: PPUSH
3922: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_STRING D5a-Joan-6
3933: PPUSH
3934: CALL_OW 88
// DialogueOff ;
3938: CALL_OW 7
// end ; DialogueOn ;
3942: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3946: LD_EXP 1
3950: PPUSH
3951: LD_STRING D6-JMM-1
3953: PPUSH
3954: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3958: LD_EXP 15
3962: PPUSH
3963: LD_STRING D6-Joan-1
3965: PPUSH
3966: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3970: LD_EXP 1
3974: PPUSH
3975: LD_STRING D6-JMM-2
3977: PPUSH
3978: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3982: LD_EXP 15
3986: PPUSH
3987: LD_STRING D6-Joan-2
3989: PPUSH
3990: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3994: LD_EXP 1
3998: PPUSH
3999: LD_STRING D6-JMM-3
4001: PPUSH
4002: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4006: LD_EXP 15
4010: PPUSH
4011: LD_STRING D6-Joan-3
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D6-JMM-4
4025: PPUSH
4026: CALL_OW 88
// DialogueOff ;
4030: CALL_OW 7
// InGameOff ;
4034: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4038: LD_EXP 15
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4050: LD_STRING MJ
4052: PPUSH
4053: CALL_OW 337
// joanStatus = 1 ;
4057: LD_ADDR_EXP 16
4061: PUSH
4062: LD_INT 1
4064: ST_TO_ADDR
// blockSpawn = 0 ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_INT 0
4072: ST_TO_ADDR
// end ;
4073: LD_VAR 0 1
4077: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4078: LD_INT 0
4080: PPUSH
4081: PPUSH
// if not number or number > 8 then
4082: LD_VAR 0 1
4086: NOT
4087: PUSH
4088: LD_VAR 0 1
4092: PUSH
4093: LD_INT 8
4095: GREATER
4096: OR
4097: IFFALSE 4101
// exit ;
4099: GO 5649
// repeat wait ( 0 0$7 ) ;
4101: LD_INT 245
4103: PPUSH
4104: CALL_OW 67
// until blockSpawn = 0 ;
4108: LD_EXP 29
4112: PUSH
4113: LD_INT 0
4115: EQUAL
4116: IFFALSE 4101
// uc_side := 1 ;
4118: LD_ADDR_OWVAR 20
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// uc_nation := 1 ;
4126: LD_ADDR_OWVAR 21
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// InitHc ;
4134: CALL_OW 19
// if number = 1 then
4138: LD_VAR 0 1
4142: PUSH
4143: LD_INT 1
4145: EQUAL
4146: IFFALSE 4322
// begin hc_class := 3 ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 3
4155: ST_TO_ADDR
// hc_sex := sex_male ;
4156: LD_ADDR_OWVAR 27
4160: PUSH
4161: LD_INT 1
4163: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING SecondCharsGal
4171: ST_TO_ADDR
// hc_face_number := 55 ;
4172: LD_ADDR_OWVAR 34
4176: PUSH
4177: LD_INT 55
4179: ST_TO_ADDR
// hc_name := George McCarthy ;
4180: LD_ADDR_OWVAR 26
4184: PUSH
4185: LD_STRING George McCarthy
4187: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4188: LD_ADDR_OWVAR 29
4192: PUSH
4193: LD_INT 11
4195: PUSH
4196: LD_INT 10
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4203: LD_ADDR_OWVAR 30
4207: PUSH
4208: LD_INT 0
4210: PUSH
4211: LD_INT 0
4213: PUSH
4214: LD_INT 2
4216: PUSH
4217: LD_INT 0
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4226: LD_ADDR_OWVAR 31
4230: PUSH
4231: LD_INT 1
4233: PUSH
4234: LD_INT 2
4236: PUSH
4237: LD_INT 3
4239: PUSH
4240: LD_INT 1
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: ST_TO_ADDR
// un = CreateHuman ;
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: CALL_OW 44
4258: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_INT 23
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: CALL_OW 87
// wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// DialogueOn ;
4290: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4294: LD_VAR 0 3
4298: PPUSH
4299: LD_STRING D11d-Sol4-1
4301: PPUSH
4302: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4306: LD_EXP 1
4310: PPUSH
4311: LD_STRING D11d-JMM-1
4313: PPUSH
4314: CALL_OW 88
// DialogueOff ;
4318: CALL_OW 7
// end ; if number = 2 then
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 2
4329: EQUAL
4330: IFFALSE 4506
// begin hc_class := 1 ;
4332: LD_ADDR_OWVAR 28
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// hc_sex := sex_male ;
4340: LD_ADDR_OWVAR 27
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4348: LD_ADDR_OWVAR 33
4352: PUSH
4353: LD_STRING AmGalRemake
4355: ST_TO_ADDR
// hc_face_number := 7 ;
4356: LD_ADDR_OWVAR 34
4360: PUSH
4361: LD_INT 7
4363: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING Bobby Jordan
4371: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4372: LD_ADDR_OWVAR 29
4376: PUSH
4377: LD_INT 9
4379: PUSH
4380: LD_INT 11
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4387: LD_ADDR_OWVAR 30
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: LD_INT 0
4397: PUSH
4398: LD_INT 0
4400: PUSH
4401: LD_INT 1
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4410: LD_ADDR_OWVAR 31
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: LD_INT 1
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: ST_TO_ADDR
// un = CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_INT 24
4450: PPUSH
4451: LD_INT 1
4453: PPUSH
4454: CALL_OW 49
// wait ( 0 0$1 ) ;
4458: LD_INT 35
4460: PPUSH
4461: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4465: LD_VAR 0 3
4469: PPUSH
4470: CALL_OW 87
// DialogueOn ;
4474: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4478: LD_VAR 0 3
4482: PPUSH
4483: LD_STRING D11b-Sol3-1
4485: PPUSH
4486: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4490: LD_EXP 1
4494: PPUSH
4495: LD_STRING D11b-JMM-1
4497: PPUSH
4498: CALL_OW 88
// DialogueOff ;
4502: CALL_OW 7
// end ; if number = 3 then
4506: LD_VAR 0 1
4510: PUSH
4511: LD_INT 3
4513: EQUAL
4514: IFFALSE 4678
// begin hc_class := 1 ;
4516: LD_ADDR_OWVAR 28
4520: PUSH
4521: LD_INT 1
4523: ST_TO_ADDR
// hc_sex := sex_male ;
4524: LD_ADDR_OWVAR 27
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// hc_gallery := DJ ;
4532: LD_ADDR_OWVAR 33
4536: PUSH
4537: LD_STRING DJ
4539: ST_TO_ADDR
// hc_face_number := 1 ;
4540: LD_ADDR_OWVAR 34
4544: PUSH
4545: LD_INT 1
4547: ST_TO_ADDR
// hc_name := Darius Dajay ;
4548: LD_ADDR_OWVAR 26
4552: PUSH
4553: LD_STRING Darius Dajay
4555: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4556: LD_ADDR_OWVAR 29
4560: PUSH
4561: LD_INT 11
4563: PUSH
4564: LD_INT 11
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4571: LD_ADDR_OWVAR 30
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: LD_INT 0
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: LD_INT 0
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4594: LD_ADDR_OWVAR 31
4598: PUSH
4599: LD_INT 4
4601: PUSH
4602: LD_INT 0
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: ST_TO_ADDR
// un = CreateHuman ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: CALL_OW 44
4626: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4627: LD_VAR 0 3
4631: PPUSH
4632: LD_INT 25
4634: PPUSH
4635: LD_INT 1
4637: PPUSH
4638: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL_OW 87
// wait ( 0 0$1 ) ;
4651: LD_INT 35
4653: PPUSH
4654: CALL_OW 67
// DialogueOn ;
4658: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4662: LD_VAR 0 3
4666: PPUSH
4667: LD_STRING D11f-Sol5-1
4669: PPUSH
4670: CALL_OW 88
// DialogueOff ;
4674: CALL_OW 7
// end ; if number = 4 then
4678: LD_VAR 0 1
4682: PUSH
4683: LD_INT 4
4685: EQUAL
4686: IFFALSE 4823
// begin hc_class := 2 ;
4688: LD_ADDR_OWVAR 28
4692: PUSH
4693: LD_INT 2
4695: ST_TO_ADDR
// hc_sex := sex_female ;
4696: LD_ADDR_OWVAR 27
4700: PUSH
4701: LD_INT 2
4703: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4704: LD_ADDR_OWVAR 33
4708: PUSH
4709: LD_STRING SecondCharsGal
4711: ST_TO_ADDR
// hc_face_number := 46 ;
4712: LD_ADDR_OWVAR 34
4716: PUSH
4717: LD_INT 46
4719: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4720: LD_ADDR_OWVAR 26
4724: PUSH
4725: LD_STRING Sylvia Creak
4727: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4728: LD_ADDR_OWVAR 29
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: LD_INT 9
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4743: LD_ADDR_OWVAR 30
4747: PUSH
4748: LD_INT 0
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4766: LD_ADDR_OWVAR 31
4770: PUSH
4771: LD_INT 1
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: LD_INT 1
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: ST_TO_ADDR
// un = CreateHuman ;
4789: LD_ADDR_VAR 0 3
4793: PUSH
4794: CALL_OW 44
4798: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 26
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: CALL_OW 87
// end ; if number = 5 then
4823: LD_VAR 0 1
4827: PUSH
4828: LD_INT 5
4830: EQUAL
4831: IFFALSE 5007
// begin hc_class := 1 ;
4833: LD_ADDR_OWVAR 28
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// hc_sex := sex_female ;
4841: LD_ADDR_OWVAR 27
4845: PUSH
4846: LD_INT 2
4848: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4849: LD_ADDR_OWVAR 33
4853: PUSH
4854: LD_STRING SecondCharsGal
4856: ST_TO_ADDR
// hc_face_number := 37 ;
4857: LD_ADDR_OWVAR 34
4861: PUSH
4862: LD_INT 37
4864: ST_TO_ADDR
// hc_name := Malena Johnson ;
4865: LD_ADDR_OWVAR 26
4869: PUSH
4870: LD_STRING Malena Johnson
4872: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4873: LD_ADDR_OWVAR 29
4877: PUSH
4878: LD_INT 11
4880: PUSH
4881: LD_INT 10
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4888: LD_ADDR_OWVAR 30
4892: PUSH
4893: LD_INT 1
4895: PUSH
4896: LD_INT 1
4898: PUSH
4899: LD_INT 0
4901: PUSH
4902: LD_INT 0
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4911: LD_ADDR_OWVAR 31
4915: PUSH
4916: LD_INT 1
4918: PUSH
4919: LD_INT 1
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: LD_INT 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// un = CreateHuman ;
4934: LD_ADDR_VAR 0 3
4938: PUSH
4939: CALL_OW 44
4943: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4944: LD_VAR 0 3
4948: PPUSH
4949: LD_INT 27
4951: PPUSH
4952: LD_INT 1
4954: PPUSH
4955: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4959: LD_VAR 0 3
4963: PPUSH
4964: CALL_OW 87
// wait ( 0 0$1 ) ;
4968: LD_INT 35
4970: PPUSH
4971: CALL_OW 67
// DialogueOn ;
4975: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4979: LD_VAR 0 3
4983: PPUSH
4984: LD_STRING D11c-FSol3-1
4986: PPUSH
4987: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4991: LD_EXP 1
4995: PPUSH
4996: LD_STRING D11c-JMM-1
4998: PPUSH
4999: CALL_OW 88
// DialogueOff ;
5003: CALL_OW 7
// end ; if number = 6 then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 6
5014: EQUAL
5015: IFFALSE 5189
// begin hc_class := 1 ;
5017: LD_ADDR_OWVAR 28
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// hc_sex := sex_male ;
5025: LD_ADDR_OWVAR 27
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5033: LD_ADDR_OWVAR 33
5037: PUSH
5038: LD_STRING AmGalRemake
5040: ST_TO_ADDR
// hc_face_number := 1 ;
5041: LD_ADDR_OWVAR 34
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// hc_name := Charles Brown ;
5049: LD_ADDR_OWVAR 26
5053: PUSH
5054: LD_STRING Charles Brown
5056: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5057: LD_ADDR_OWVAR 29
5061: PUSH
5062: LD_INT 12
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5072: LD_ADDR_OWVAR 30
5076: PUSH
5077: LD_INT 2
5079: PUSH
5080: LD_INT 0
5082: PUSH
5083: LD_INT 0
5085: PUSH
5086: LD_INT 0
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5095: LD_ADDR_OWVAR 31
5099: PUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 0
5105: PUSH
5106: LD_INT 1
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: ST_TO_ADDR
// un = CreateHuman ;
5118: LD_ADDR_VAR 0 3
5122: PUSH
5123: CALL_OW 44
5127: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5128: LD_VAR 0 3
5132: PPUSH
5133: LD_INT 28
5135: PPUSH
5136: LD_INT 1
5138: PPUSH
5139: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5143: LD_VAR 0 3
5147: PPUSH
5148: CALL_OW 87
// wait ( 0 0$1 ) ;
5152: LD_INT 35
5154: PPUSH
5155: CALL_OW 67
// DialogueOn ;
5159: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5163: LD_VAR 0 3
5167: PPUSH
5168: LD_STRING D4-Sol1-5
5170: PPUSH
5171: CALL_OW 88
// DialogueOff ;
5175: CALL_OW 7
// tempCharles = un ;
5179: LD_ADDR_EXP 13
5183: PUSH
5184: LD_VAR 0 3
5188: ST_TO_ADDR
// end ; if number = 7 then
5189: LD_VAR 0 1
5193: PUSH
5194: LD_INT 7
5196: EQUAL
5197: IFFALSE 5469
// begin hc_class := 1 ;
5199: LD_ADDR_OWVAR 28
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// hc_sex := sex_female ;
5207: LD_ADDR_OWVAR 27
5211: PUSH
5212: LD_INT 2
5214: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5215: LD_ADDR_OWVAR 33
5219: PUSH
5220: LD_STRING AmGalRemake
5222: ST_TO_ADDR
// hc_face_number := 2 ;
5223: LD_ADDR_OWVAR 34
5227: PUSH
5228: LD_INT 2
5230: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5231: LD_ADDR_OWVAR 26
5235: PUSH
5236: LD_STRING Rebecca Macdonald
5238: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5239: LD_ADDR_OWVAR 29
5243: PUSH
5244: LD_INT 10
5246: PUSH
5247: LD_INT 10
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5254: LD_ADDR_OWVAR 30
5258: PUSH
5259: LD_INT 1
5261: PUSH
5262: LD_INT 0
5264: PUSH
5265: LD_INT 0
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5277: LD_ADDR_OWVAR 31
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 0
5287: PUSH
5288: LD_INT 0
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: ST_TO_ADDR
// un = CreateHuman ;
5300: LD_ADDR_VAR 0 3
5304: PUSH
5305: CALL_OW 44
5309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5310: LD_VAR 0 3
5314: PPUSH
5315: LD_INT 29
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5325: LD_VAR 0 3
5329: PPUSH
5330: CALL_OW 87
// wait ( 0 0$1 ) ;
5334: LD_INT 35
5336: PPUSH
5337: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5341: LD_INT 30
5343: PPUSH
5344: LD_INT 22
5346: PUSH
5347: LD_INT 3
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PPUSH
5354: CALL_OW 70
5358: IFFALSE 5469
// begin DialogueOn ;
5360: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: CALL_OW 250
5373: PPUSH
5374: LD_VAR 0 3
5378: PPUSH
5379: CALL_OW 251
5383: PPUSH
5384: LD_INT 1
5386: PPUSH
5387: LD_INT 15
5389: NEG
5390: PPUSH
5391: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5395: LD_VAR 0 3
5399: PPUSH
5400: CALL_OW 250
5404: PPUSH
5405: LD_VAR 0 3
5409: PPUSH
5410: CALL_OW 251
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5422: LD_VAR 0 3
5426: PPUSH
5427: LD_STRING D11a-FSol2-1
5429: PPUSH
5430: CALL_OW 88
// DialogueOff ;
5434: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5438: LD_INT 3
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: CALL_OW 471
// wait ( 0 0$2 ) ;
5450: LD_INT 70
5452: PPUSH
5453: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5457: LD_INT 3
5459: PPUSH
5460: LD_VAR 0 3
5464: PPUSH
5465: CALL_OW 472
// end ; end ; if number = 8 then
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 8
5476: EQUAL
5477: IFFALSE 5633
// begin hc_class := 1 ;
5479: LD_ADDR_OWVAR 28
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// hc_sex := sex_female ;
5487: LD_ADDR_OWVAR 27
5491: PUSH
5492: LD_INT 2
5494: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5495: LD_ADDR_OWVAR 33
5499: PUSH
5500: LD_STRING SecondCharsGal
5502: ST_TO_ADDR
// hc_face_number := 45 ;
5503: LD_ADDR_OWVAR 34
5507: PUSH
5508: LD_INT 45
5510: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5511: LD_ADDR_OWVAR 26
5515: PUSH
5516: LD_STRING Margherite Simpson
5518: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5519: LD_ADDR_OWVAR 29
5523: PUSH
5524: LD_INT 12
5526: PUSH
5527: LD_INT 10
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5534: LD_ADDR_OWVAR 30
5538: PUSH
5539: LD_INT 1
5541: PUSH
5542: LD_INT 2
5544: PUSH
5545: LD_INT 0
5547: PUSH
5548: LD_INT 0
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5557: LD_ADDR_OWVAR 31
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: LD_INT 2
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: ST_TO_ADDR
// un = CreateHuman ;
5580: LD_ADDR_VAR 0 3
5584: PUSH
5585: CALL_OW 44
5589: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5590: LD_VAR 0 3
5594: PPUSH
5595: LD_INT 33
5597: PPUSH
5598: LD_INT 1
5600: PPUSH
5601: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5605: LD_VAR 0 3
5609: PPUSH
5610: CALL_OW 87
// wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5621: LD_VAR 0 3
5625: PPUSH
5626: LD_STRING D11e-FSol4-1
5628: PPUSH
5629: CALL_OW 88
// end ; arrivals := arrivals union un ;
5633: LD_ADDR_EXP 44
5637: PUSH
5638: LD_EXP 44
5642: PUSH
5643: LD_VAR 0 3
5647: UNION
5648: ST_TO_ADDR
// end ; end_of_file
5649: LD_VAR 0 2
5653: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5654: LD_INT 0
5656: PPUSH
5657: PPUSH
// ruAttackers := [ ] ;
5658: LD_ADDR_EXP 47
5662: PUSH
5663: EMPTY
5664: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5665: LD_ADDR_EXP 48
5669: PUSH
5670: EMPTY
5671: ST_TO_ADDR
// if Difficulty < 3 then
5672: LD_OWVAR 67
5676: PUSH
5677: LD_INT 3
5679: LESS
5680: IFFALSE 5697
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5682: LD_INT 130
5684: PPUSH
5685: LD_INT 81
5687: PPUSH
5688: CALL_OW 428
5692: PPUSH
5693: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5697: LD_INT 3
5699: PPUSH
5700: LD_INT 3
5702: PPUSH
5703: LD_INT 2
5705: PPUSH
5706: LD_EXP 34
5710: PPUSH
5711: LD_EXP 35
5715: PPUSH
5716: CALL_OW 12
5720: PPUSH
5721: LD_INT 2
5723: PPUSH
5724: LD_INT 4
5726: PPUSH
5727: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5731: LD_INT 3
5733: PPUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 8
5739: PPUSH
5740: LD_EXP 34
5744: PPUSH
5745: LD_EXP 35
5749: PPUSH
5750: CALL_OW 12
5754: PPUSH
5755: LD_INT 1
5757: PPUSH
5758: LD_INT 4
5760: PPUSH
5761: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: LD_INT 67
5773: PPUSH
5774: LD_EXP 34
5778: PPUSH
5779: LD_EXP 35
5783: PPUSH
5784: CALL_OW 12
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_INT 2
5794: PPUSH
5795: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5799: LD_INT 3
5801: PPUSH
5802: LD_INT 3
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_EXP 34
5812: PPUSH
5813: LD_EXP 35
5817: PPUSH
5818: CALL_OW 12
5822: PPUSH
5823: LD_INT 3
5825: PPUSH
5826: LD_INT 6
5828: PPUSH
5829: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5833: LD_INT 3
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 17
5841: PPUSH
5842: LD_EXP 34
5846: PPUSH
5847: LD_EXP 35
5851: PPUSH
5852: CALL_OW 12
5856: PPUSH
5857: LD_INT 3
5859: PPUSH
5860: LD_INT 6
5862: PPUSH
5863: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5867: LD_INT 3
5869: PPUSH
5870: LD_INT 3
5872: PPUSH
5873: LD_INT 32
5875: PPUSH
5876: LD_EXP 34
5880: PPUSH
5881: LD_EXP 35
5885: PPUSH
5886: CALL_OW 12
5890: PPUSH
5891: LD_INT 4
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL 6909 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 3
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 21
5918: PUSH
5919: LD_INT 3
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 30
5928: PUSH
5929: LD_INT 32
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 69
5945: PUSH
5946: FOR_IN
5947: IFFALSE 5987
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5949: LD_INT 3
5951: PPUSH
5952: LD_INT 3
5954: PPUSH
5955: LD_VAR 0 2
5959: PPUSH
5960: LD_EXP 34
5964: PPUSH
5965: LD_EXP 35
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: CALL 6909 0 6
5985: GO 5946
5987: POP
5988: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
5989: LD_ADDR_VAR 0 2
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 3
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 21
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 30
6016: PUSH
6017: LD_INT 31
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 69
6033: PUSH
6034: FOR_IN
6035: IFFALSE 6063
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6037: LD_EXP 34
6041: PPUSH
6042: LD_EXP 35
6046: PPUSH
6047: CALL_OW 12
6051: PPUSH
6052: LD_VAR 0 2
6056: PPUSH
6057: CALL 7019 0 2
6061: GO 6034
6063: POP
6064: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6065: LD_INT 3
6067: PPUSH
6068: LD_INT 32
6070: PPUSH
6071: LD_INT 3
6073: PPUSH
6074: CALL 7298 0 3
// end ;
6078: LD_VAR 0 1
6082: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6083: LD_INT 22
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 32
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PPUSH
6107: CALL_OW 69
6111: IFFALSE 6188
6113: GO 6115
6115: DISABLE
6116: LD_INT 0
6118: PPUSH
// begin enable ;
6119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6120: LD_ADDR_VAR 0 1
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 32
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: CALL_OW 69
6153: PUSH
6154: FOR_IN
6155: IFFALSE 6186
// if GetFuel ( i ) < 3 then
6157: LD_VAR 0 1
6161: PPUSH
6162: CALL_OW 261
6166: PUSH
6167: LD_INT 3
6169: LESS
6170: IFFALSE 6184
// SetFuel ( i , 3 ) ;
6172: LD_VAR 0 1
6176: PPUSH
6177: LD_INT 3
6179: PPUSH
6180: CALL_OW 240
6184: GO 6154
6186: POP
6187: POP
// end ;
6188: PPOPN 1
6190: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6191: LD_OWVAR 67
6195: PUSH
6196: LD_INT 1
6198: GREATER
6199: IFFALSE 6768
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
// begin uc_side := 3 ;
6210: LD_ADDR_OWVAR 20
6214: PUSH
6215: LD_INT 3
6217: ST_TO_ADDR
// uc_nation := 3 ;
6218: LD_ADDR_OWVAR 21
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// for i := 1 to 2 do
6226: LD_ADDR_VAR 0 1
6230: PUSH
6231: DOUBLE
6232: LD_INT 1
6234: DEC
6235: ST_TO_ADDR
6236: LD_INT 2
6238: PUSH
6239: FOR_TO
6240: IFFALSE 6354
// begin InitHC_All ( ) ;
6242: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6246: LD_INT 0
6248: PPUSH
6249: LD_INT 4
6251: PUSH
6252: LD_INT 5
6254: PUSH
6255: LD_INT 6
6257: PUSH
6258: LD_INT 6
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_OWVAR 67
6271: ARRAY
6272: PPUSH
6273: CALL_OW 381
// un := CreateHuman ;
6277: LD_ADDR_VAR 0 2
6281: PUSH
6282: CALL_OW 44
6286: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6287: LD_VAR 0 2
6291: PPUSH
6292: LD_INT 91
6294: PPUSH
6295: LD_INT 87
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: LD_INT 0
6303: PPUSH
6304: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6308: LD_ADDR_EXP 48
6312: PUSH
6313: LD_EXP 48
6317: PPUSH
6318: LD_EXP 48
6322: PUSH
6323: LD_INT 1
6325: PLUS
6326: PPUSH
6327: LD_VAR 0 2
6331: PPUSH
6332: CALL_OW 1
6336: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6337: LD_VAR 0 2
6341: PPUSH
6342: LD_INT 46
6344: PPUSH
6345: LD_INT 78
6347: PPUSH
6348: CALL_OW 114
// end ;
6352: GO 6239
6354: POP
6355: POP
// if Difficulty > 2 then
6356: LD_OWVAR 67
6360: PUSH
6361: LD_INT 2
6363: GREATER
6364: IFFALSE 6496
// begin for i := 1 to 3 do
6366: LD_ADDR_VAR 0 1
6370: PUSH
6371: DOUBLE
6372: LD_INT 1
6374: DEC
6375: ST_TO_ADDR
6376: LD_INT 3
6378: PUSH
6379: FOR_TO
6380: IFFALSE 6494
// begin InitHC_All ( ) ;
6382: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6386: LD_INT 0
6388: PPUSH
6389: LD_INT 4
6391: PUSH
6392: LD_INT 5
6394: PUSH
6395: LD_INT 6
6397: PUSH
6398: LD_INT 6
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_OWVAR 67
6411: ARRAY
6412: PPUSH
6413: CALL_OW 381
// un := CreateHuman ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: CALL_OW 44
6426: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6427: LD_VAR 0 2
6431: PPUSH
6432: LD_INT 91
6434: PPUSH
6435: LD_INT 87
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6448: LD_ADDR_EXP 48
6452: PUSH
6453: LD_EXP 48
6457: PPUSH
6458: LD_EXP 48
6462: PUSH
6463: LD_INT 1
6465: PLUS
6466: PPUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: CALL_OW 1
6476: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6477: LD_VAR 0 2
6481: PPUSH
6482: LD_INT 89
6484: PPUSH
6485: LD_INT 148
6487: PPUSH
6488: CALL_OW 114
// end ;
6492: GO 6379
6494: POP
6495: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: LD_INT 33
6503: PUSH
6504: LD_INT 61
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 49
6513: PUSH
6514: LD_INT 85
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 76
6523: PUSH
6524: LD_INT 99
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 81
6533: PUSH
6534: LD_INT 135
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 111
6543: PUSH
6544: LD_INT 155
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: LD_INT 147
6553: PUSH
6554: LD_INT 158
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6569: LD_INT 1050
6571: PPUSH
6572: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6576: LD_ADDR_VAR 0 1
6580: PUSH
6581: DOUBLE
6582: LD_INT 1
6584: DEC
6585: ST_TO_ADDR
6586: LD_EXP 48
6590: PUSH
6591: FOR_TO
6592: IFFALSE 6759
// begin un := ruAttackersInForest [ i ] ;
6594: LD_ADDR_VAR 0 2
6598: PUSH
6599: LD_EXP 48
6603: PUSH
6604: LD_VAR 0 1
6608: ARRAY
6609: ST_TO_ADDR
// tag := GetTag ( un ) ;
6610: LD_ADDR_VAR 0 4
6614: PUSH
6615: LD_VAR 0 2
6619: PPUSH
6620: CALL_OW 110
6624: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6625: LD_VAR 0 2
6629: PPUSH
6630: CALL_OW 302
6634: PUSH
6635: LD_VAR 0 2
6639: PPUSH
6640: CALL_OW 314
6644: NOT
6645: AND
6646: IFFALSE 6757
// begin if tag <> i then
6648: LD_VAR 0 4
6652: PUSH
6653: LD_VAR 0 1
6657: NONEQUAL
6658: IFFALSE 6686
// begin SetTag ( un , i ) ;
6660: LD_VAR 0 2
6664: PPUSH
6665: LD_VAR 0 1
6669: PPUSH
6670: CALL_OW 109
// tag := i ;
6674: LD_ADDR_VAR 0 4
6678: PUSH
6679: LD_VAR 0 1
6683: ST_TO_ADDR
// end else
6684: GO 6718
// begin SetTag ( un , i + 1 ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 1
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: PPUSH
6700: CALL_OW 109
// tag := i + 1 ;
6704: LD_ADDR_VAR 0 4
6708: PUSH
6709: LD_VAR 0 1
6713: PUSH
6714: LD_INT 1
6716: PLUS
6717: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6718: LD_VAR 0 2
6722: PPUSH
6723: LD_VAR 0 3
6727: PUSH
6728: LD_VAR 0 4
6732: ARRAY
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_VAR 0 3
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: PUSH
6749: LD_INT 2
6751: ARRAY
6752: PPUSH
6753: CALL_OW 114
// end ; end ;
6757: GO 6591
6759: POP
6760: POP
// until not ruAttackersInForest ;
6761: LD_EXP 48
6765: NOT
6766: IFFALSE 6569
// end ; end_of_file
6768: PPOPN 4
6770: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
// if not characters then
6776: LD_VAR 0 1
6780: NOT
6781: IFFALSE 6785
// exit ;
6783: GO 6864
// speaker := characters [ rand ( 1 , characters ) ] ;
6785: LD_ADDR_VAR 0 6
6789: PUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_INT 1
6797: PPUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 12
6807: ARRAY
6808: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6809: LD_VAR 0 6
6813: PPUSH
6814: CALL_OW 258
6818: PUSH
6819: LD_INT 1
6821: EQUAL
6822: IFFALSE 6840
// Say ( speaker , dialogMID ) else
6824: LD_VAR 0 6
6828: PPUSH
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 88
6838: GO 6854
// Say ( speaker , dialogFID ) ;
6840: LD_VAR 0 6
6844: PPUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: CALL_OW 88
// result := speaker ;
6854: LD_ADDR_VAR 0 4
6858: PUSH
6859: LD_VAR 0 6
6863: ST_TO_ADDR
// end ;
6864: LD_VAR 0 4
6868: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6869: LD_INT 0
6871: PPUSH
6872: PPUSH
// for i in charactersList do
6873: LD_ADDR_VAR 0 4
6877: PUSH
6878: LD_VAR 0 1
6882: PUSH
6883: FOR_IN
6884: IFFALSE 6902
// SaveCharacters ( i , ident ) ;
6886: LD_VAR 0 4
6890: PPUSH
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 38
6900: GO 6883
6902: POP
6903: POP
// end ;
6904: LD_VAR 0 3
6908: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// for i = 1 to count do
6915: LD_ADDR_VAR 0 8
6919: PUSH
6920: DOUBLE
6921: LD_INT 1
6923: DEC
6924: ST_TO_ADDR
6925: LD_VAR 0 6
6929: PUSH
6930: FOR_TO
6931: IFFALSE 7012
// begin uc_side = side ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_VAR 0 1
6942: ST_TO_ADDR
// uc_nation = nation ;
6943: LD_ADDR_OWVAR 21
6947: PUSH
6948: LD_VAR 0 2
6952: ST_TO_ADDR
// hc_gallery =  ;
6953: LD_ADDR_OWVAR 33
6957: PUSH
6958: LD_STRING 
6960: ST_TO_ADDR
// hc_name =  ;
6961: LD_ADDR_OWVAR 26
6965: PUSH
6966: LD_STRING 
6968: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6969: LD_INT 0
6971: PPUSH
6972: LD_VAR 0 5
6976: PPUSH
6977: LD_VAR 0 4
6981: PPUSH
6982: CALL_OW 380
// un = CreateHuman ;
6986: LD_ADDR_VAR 0 10
6990: PUSH
6991: CALL_OW 44
6995: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6996: LD_VAR 0 10
7000: PPUSH
7001: LD_VAR 0 3
7005: PPUSH
7006: CALL_OW 52
// end ;
7010: GO 6930
7012: POP
7013: POP
// end ;
7014: LD_VAR 0 7
7018: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7019: LD_INT 0
7021: PPUSH
7022: PPUSH
7023: PPUSH
// uc_side := GetSide ( b ) ;
7024: LD_ADDR_OWVAR 20
7028: PUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: CALL_OW 255
7038: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7039: LD_ADDR_OWVAR 21
7043: PUSH
7044: LD_VAR 0 2
7048: PPUSH
7049: CALL_OW 248
7053: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7054: LD_INT 0
7056: PPUSH
7057: LD_INT 1
7059: PPUSH
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: LD_VAR 0 2
7078: PPUSH
7079: CALL_OW 254
7083: PUSH
7084: LD_INT 3
7086: MINUS
7087: ST_TO_ADDR
// if dir < 0 then
7088: LD_VAR 0 5
7092: PUSH
7093: LD_INT 0
7095: LESS
7096: IFFALSE 7112
// dir := 6 + dir ;
7098: LD_ADDR_VAR 0 5
7102: PUSH
7103: LD_INT 6
7105: PUSH
7106: LD_VAR 0 5
7110: PLUS
7111: ST_TO_ADDR
// un := CreateHuman ;
7112: LD_ADDR_VAR 0 4
7116: PUSH
7117: CALL_OW 44
7121: ST_TO_ADDR
// SetDir ( un , dir ) ;
7122: LD_VAR 0 4
7126: PPUSH
7127: LD_VAR 0 5
7131: PPUSH
7132: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7136: LD_VAR 0 4
7140: PPUSH
7141: LD_VAR 0 2
7145: PPUSH
7146: CALL_OW 52
// end ;
7150: LD_VAR 0 3
7154: RET
// export function PrepareDifficulty ; begin
7155: LD_INT 0
7157: PPUSH
// case Difficulty of 1 :
7158: LD_OWVAR 67
7162: PUSH
7163: LD_INT 1
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7190
7171: POP
// begin RuSolMinLevel = 2 ;
7172: LD_ADDR_EXP 34
7176: PUSH
7177: LD_INT 2
7179: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7180: LD_ADDR_EXP 35
7184: PUSH
7185: LD_INT 3
7187: ST_TO_ADDR
// end ; 2 :
7188: GO 7251
7190: LD_INT 2
7192: DOUBLE
7193: EQUAL
7194: IFTRUE 7198
7196: GO 7217
7198: POP
// begin RuSolMinLevel = 3 ;
7199: LD_ADDR_EXP 34
7203: PUSH
7204: LD_INT 3
7206: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7207: LD_ADDR_EXP 35
7211: PUSH
7212: LD_INT 5
7214: ST_TO_ADDR
// end ; 3 .. 4 :
7215: GO 7251
7217: LD_INT 3
7219: DOUBLE
7220: GREATEREQUAL
7221: IFFALSE 7229
7223: LD_INT 4
7225: DOUBLE
7226: LESSEQUAL
7227: IFTRUE 7231
7229: GO 7250
7231: POP
// begin RuSolMinLevel = 4 ;
7232: LD_ADDR_EXP 34
7236: PUSH
7237: LD_INT 4
7239: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7240: LD_ADDR_EXP 35
7244: PUSH
7245: LD_INT 6
7247: ST_TO_ADDR
// end ; end ;
7248: GO 7251
7250: POP
// end ;
7251: LD_VAR 0 1
7255: RET
// export function ShowQuery1 ; begin
7256: LD_INT 0
7258: PPUSH
// result := Query ( QKill ) ;
7259: LD_ADDR_VAR 0 1
7263: PUSH
7264: LD_STRING QKill
7266: PPUSH
7267: CALL_OW 97
7271: ST_TO_ADDR
// end ;
7272: LD_VAR 0 1
7276: RET
// export function ShowQuery2 ; begin
7277: LD_INT 0
7279: PPUSH
// result := Query ( QKill2 ) ;
7280: LD_ADDR_VAR 0 1
7284: PUSH
7285: LD_STRING QKill2
7287: PPUSH
7288: CALL_OW 97
7292: ST_TO_ADDR
// end ;
7293: LD_VAR 0 1
7297: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7298: LD_INT 0
7300: PPUSH
7301: PPUSH
7302: PPUSH
7303: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
7304: LD_ADDR_VAR 0 7
7308: PUSH
7309: LD_INT 48
7311: PUSH
7312: LD_INT 49
7314: PUSH
7315: LD_INT 50
7317: PUSH
7318: LD_INT 20
7320: PUSH
7321: LD_INT 1
7323: PUSH
7324: LD_INT 51
7326: PUSH
7327: LD_INT 52
7329: PUSH
7330: LD_INT 69
7332: PUSH
7333: LD_INT 39
7335: PUSH
7336: LD_INT 34
7338: PUSH
7339: LD_INT 40
7341: PUSH
7342: LD_INT 53
7344: PUSH
7345: LD_INT 71
7347: PUSH
7348: LD_INT 57
7350: PUSH
7351: LD_INT 58
7353: PUSH
7354: LD_INT 44
7356: PUSH
7357: LD_INT 32
7359: PUSH
7360: LD_INT 27
7362: PUSH
7363: LD_INT 23
7365: PUSH
7366: LD_INT 33
7368: PUSH
7369: LD_INT 59
7371: PUSH
7372: LD_INT 54
7374: PUSH
7375: LD_INT 55
7377: PUSH
7378: LD_INT 56
7380: PUSH
7381: LD_INT 63
7383: PUSH
7384: LD_INT 64
7386: PUSH
7387: LD_INT 65
7389: PUSH
7390: LD_INT 30
7392: PUSH
7393: LD_INT 31
7395: PUSH
7396: LD_INT 21
7398: PUSH
7399: LD_INT 22
7401: PUSH
7402: LD_INT 25
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: ST_TO_ADDR
// for i = 1 to list do
7439: LD_ADDR_VAR 0 5
7443: PUSH
7444: DOUBLE
7445: LD_INT 1
7447: DEC
7448: ST_TO_ADDR
7449: LD_VAR 0 7
7453: PUSH
7454: FOR_TO
7455: IFFALSE 7527
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7457: LD_VAR 0 7
7461: PUSH
7462: LD_VAR 0 5
7466: ARRAY
7467: PPUSH
7468: LD_VAR 0 1
7472: PPUSH
7473: CALL_OW 321
7477: PUSH
7478: LD_INT 1
7480: EQUAL
7481: PUSH
7482: LD_VAR 0 7
7486: PUSH
7487: LD_VAR 0 5
7491: ARRAY
7492: PPUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 482
7502: AND
7503: IFFALSE 7525
// AddComResearch ( lab , list [ i ] ) ;
7505: LD_VAR 0 2
7509: PPUSH
7510: LD_VAR 0 7
7514: PUSH
7515: LD_VAR 0 5
7519: ARRAY
7520: PPUSH
7521: CALL_OW 184
7525: GO 7454
7527: POP
7528: POP
// end ;
7529: LD_VAR 0 4
7533: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7534: LD_INT 0
7536: PPUSH
7537: PPUSH
7538: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7539: LD_INT 22
7541: PUSH
7542: LD_VAR 0 1
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 21
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PPUSH
7565: CALL_OW 69
7569: PUSH
7570: LD_VAR 0 3
7574: LESSEQUAL
7575: IFFALSE 7683
// begin for i = 1 to vehCount do
7577: LD_ADDR_VAR 0 9
7581: PUSH
7582: DOUBLE
7583: LD_INT 1
7585: DEC
7586: ST_TO_ADDR
7587: LD_VAR 0 3
7591: PUSH
7592: FOR_TO
7593: IFFALSE 7681
// begin weapon := weaponTab [ i ] ;
7595: LD_ADDR_VAR 0 10
7599: PUSH
7600: LD_VAR 0 4
7604: PUSH
7605: LD_VAR 0 9
7609: ARRAY
7610: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7611: LD_VAR 0 10
7615: PUSH
7616: LD_INT 46
7618: EQUAL
7619: IFFALSE 7650
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7621: LD_VAR 0 2
7625: PPUSH
7626: LD_INT 24
7628: PPUSH
7629: LD_VAR 0 5
7633: PPUSH
7634: LD_VAR 0 6
7638: PPUSH
7639: LD_VAR 0 10
7643: PPUSH
7644: CALL_OW 185
7648: GO 7679
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7650: LD_VAR 0 2
7654: PPUSH
7655: LD_VAR 0 7
7659: PPUSH
7660: LD_VAR 0 5
7664: PPUSH
7665: LD_VAR 0 6
7669: PPUSH
7670: LD_VAR 0 10
7674: PPUSH
7675: CALL_OW 185
// end ;
7679: GO 7592
7681: POP
7682: POP
// end ; end ;
7683: LD_VAR 0 8
7687: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7688: LD_INT 0
7690: PPUSH
7691: PPUSH
7692: PPUSH
7693: PPUSH
7694: PPUSH
7695: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7696: LD_ADDR_VAR 0 8
7700: PUSH
7701: LD_VAR 0 2
7705: PPUSH
7706: CALL_OW 313
7710: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7711: LD_ADDR_VAR 0 9
7715: PUSH
7716: LD_VAR 0 3
7720: PPUSH
7721: LD_INT 22
7723: PUSH
7724: LD_VAR 0 1
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: LD_INT 25
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 24
7745: PUSH
7746: LD_INT 750
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 3
7755: PUSH
7756: LD_INT 54
7758: PUSH
7759: EMPTY
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 70
7776: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7777: LD_ADDR_VAR 0 6
7781: PUSH
7782: LD_VAR 0 3
7786: PPUSH
7787: LD_INT 22
7789: PUSH
7790: LD_VAR 0 1
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 21
7801: PUSH
7802: LD_INT 3
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 3
7811: PUSH
7812: LD_INT 24
7814: PUSH
7815: LD_INT 1000
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: PUSH
7831: EMPTY
7832: LIST
7833: PPUSH
7834: CALL_OW 70
7838: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7839: LD_VAR 0 6
7843: NOT
7844: PUSH
7845: LD_INT 22
7847: PUSH
7848: LD_VAR 0 1
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 25
7859: PUSH
7860: LD_INT 2
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: LD_INT 24
7869: PUSH
7870: LD_INT 250
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: PPUSH
7882: CALL_OW 69
7886: NOT
7887: AND
7888: IFFALSE 7892
// exit ;
7890: GO 8050
// if buildingsList and engineerOkInside then
7892: LD_VAR 0 6
7896: PUSH
7897: LD_VAR 0 8
7901: AND
7902: IFFALSE 7913
// ComExitBuilding ( engineerOkInside ) ;
7904: LD_VAR 0 8
7908: PPUSH
7909: CALL_OW 122
// if buildingsList and engineerOkOutside then
7913: LD_VAR 0 6
7917: PUSH
7918: LD_VAR 0 9
7922: AND
7923: IFFALSE 7943
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7925: LD_VAR 0 9
7929: PPUSH
7930: LD_VAR 0 6
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PPUSH
7939: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
7943: LD_VAR 0 6
7947: PUSH
7948: LD_INT 0
7950: EQUAL
7951: PUSH
7952: LD_VAR 0 4
7956: PUSH
7957: LD_INT 0
7959: EQUAL
7960: AND
7961: PUSH
7962: LD_VAR 0 9
7966: AND
7967: IFFALSE 7983
// ComEnterUnit ( engineerOkOutside , depot ) ;
7969: LD_VAR 0 9
7973: PPUSH
7974: LD_VAR 0 2
7978: PPUSH
7979: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
7983: LD_VAR 0 9
7987: PUSH
7988: LD_VAR 0 6
7992: PUSH
7993: LD_INT 0
7995: EQUAL
7996: AND
7997: PUSH
7998: LD_VAR 0 4
8002: AND
8003: IFFALSE 8050
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8005: LD_VAR 0 9
8009: PPUSH
8010: LD_VAR 0 4
8014: PUSH
8015: LD_INT 1
8017: ARRAY
8018: PPUSH
8019: LD_VAR 0 4
8023: PUSH
8024: LD_INT 2
8026: ARRAY
8027: PPUSH
8028: LD_VAR 0 4
8032: PUSH
8033: LD_INT 3
8035: ARRAY
8036: PPUSH
8037: LD_VAR 0 4
8041: PUSH
8042: LD_INT 4
8044: ARRAY
8045: PPUSH
8046: CALL_OW 145
// end ;
8050: LD_VAR 0 5
8054: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8055: LD_INT 0
8057: PPUSH
8058: PPUSH
8059: PPUSH
8060: PPUSH
8061: PPUSH
8062: PPUSH
8063: PPUSH
8064: PPUSH
8065: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8066: LD_ADDR_VAR 0 6
8070: PUSH
8071: LD_INT 22
8073: PUSH
8074: LD_VAR 0 1
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 25
8085: PUSH
8086: LD_INT 4
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 23
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 24
8105: PUSH
8106: LD_INT 251
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PPUSH
8119: CALL_OW 69
8123: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8124: LD_ADDR_VAR 0 7
8128: PUSH
8129: LD_VAR 0 3
8133: PPUSH
8134: LD_INT 22
8136: PUSH
8137: LD_VAR 0 1
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PUSH
8146: LD_INT 23
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 25
8158: PUSH
8159: LD_INT 4
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 50
8168: PUSH
8169: EMPTY
8170: LIST
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: PPUSH
8178: CALL_OW 70
8182: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8183: LD_ADDR_VAR 0 10
8187: PUSH
8188: LD_VAR 0 3
8192: PPUSH
8193: LD_INT 22
8195: PUSH
8196: LD_VAR 0 1
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PUSH
8205: LD_INT 21
8207: PUSH
8208: LD_INT 1
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: LD_INT 3
8217: PUSH
8218: LD_INT 25
8220: PUSH
8221: LD_INT 3
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 3
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 750
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: PPUSH
8255: CALL_OW 70
8259: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8260: LD_ADDR_VAR 0 11
8264: PUSH
8265: LD_VAR 0 2
8269: PPUSH
8270: LD_INT 22
8272: PUSH
8273: LD_VAR 0 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 21
8284: PUSH
8285: LD_INT 1
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PUSH
8292: LD_INT 3
8294: PUSH
8295: LD_INT 25
8297: PUSH
8298: LD_INT 3
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: PUSH
8309: LD_INT 3
8311: PUSH
8312: LD_INT 24
8314: PUSH
8315: LD_INT 1000
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PPUSH
8332: CALL_OW 70
8336: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8337: LD_VAR 0 10
8341: NOT
8342: PUSH
8343: LD_VAR 0 11
8347: NOT
8348: AND
8349: PUSH
8350: LD_VAR 0 6
8354: NOT
8355: AND
8356: IFFALSE 8360
// exit ;
8358: GO 8566
// if damageUnits and sci_list then
8360: LD_VAR 0 10
8364: PUSH
8365: LD_VAR 0 6
8369: AND
8370: IFFALSE 8386
// ComMoveToArea ( damageUnits , healArea ) ;
8372: LD_VAR 0 10
8376: PPUSH
8377: LD_VAR 0 2
8381: PPUSH
8382: CALL_OW 113
// if unitsToHeal and sci_list then
8386: LD_VAR 0 11
8390: PUSH
8391: LD_VAR 0 6
8395: AND
8396: IFFALSE 8407
// ComExitBuilding ( sci_list ) ;
8398: LD_VAR 0 6
8402: PPUSH
8403: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8407: LD_VAR 0 11
8411: PUSH
8412: LD_VAR 0 7
8416: AND
8417: IFFALSE 8437
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8419: LD_VAR 0 7
8423: PPUSH
8424: LD_VAR 0 11
8428: PUSH
8429: LD_INT 1
8431: ARRAY
8432: PPUSH
8433: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8437: LD_VAR 0 10
8441: PUSH
8442: LD_INT 0
8444: EQUAL
8445: PUSH
8446: LD_VAR 0 11
8450: PUSH
8451: LD_INT 0
8453: EQUAL
8454: AND
8455: PUSH
8456: LD_VAR 0 7
8460: AND
8461: IFFALSE 8566
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8463: LD_ADDR_VAR 0 12
8467: PUSH
8468: LD_INT 22
8470: PUSH
8471: LD_VAR 0 1
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 21
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 30
8492: PUSH
8493: LD_INT 8
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: LIST
8504: PPUSH
8505: CALL_OW 69
8509: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8510: LD_ADDR_VAR 0 13
8514: PUSH
8515: LD_INT 1
8517: PPUSH
8518: LD_VAR 0 12
8522: PPUSH
8523: CALL_OW 12
8527: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8528: LD_VAR 0 7
8532: PPUSH
8533: LD_INT 3
8535: PUSH
8536: LD_INT 60
8538: PUSH
8539: EMPTY
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 72
8550: PPUSH
8551: LD_VAR 0 12
8555: PUSH
8556: LD_VAR 0 13
8560: ARRAY
8561: PPUSH
8562: CALL_OW 120
// end ; end ;
8566: LD_VAR 0 5
8570: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8571: LD_INT 0
8573: PPUSH
8574: PPUSH
8575: PPUSH
8576: PPUSH
8577: PPUSH
// tmp := [ ] ;
8578: LD_ADDR_VAR 0 6
8582: PUSH
8583: EMPTY
8584: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8585: LD_ADDR_VAR 0 7
8589: PUSH
8590: LD_INT 22
8592: PUSH
8593: LD_VAR 0 1
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 30
8604: PUSH
8605: LD_INT 32
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PPUSH
8616: CALL_OW 69
8620: ST_TO_ADDR
// if bunkers then
8621: LD_VAR 0 7
8625: IFFALSE 8695
// for i in bunkers do
8627: LD_ADDR_VAR 0 4
8631: PUSH
8632: LD_VAR 0 7
8636: PUSH
8637: FOR_IN
8638: IFFALSE 8693
// for j in UnitsInside ( i ) do
8640: LD_ADDR_VAR 0 5
8644: PUSH
8645: LD_VAR 0 4
8649: PPUSH
8650: CALL_OW 313
8654: PUSH
8655: FOR_IN
8656: IFFALSE 8689
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8658: LD_ADDR_VAR 0 6
8662: PUSH
8663: LD_VAR 0 6
8667: PPUSH
8668: LD_VAR 0 6
8672: PUSH
8673: LD_INT 1
8675: PLUS
8676: PPUSH
8677: LD_VAR 0 5
8681: PPUSH
8682: CALL_OW 1
8686: ST_TO_ADDR
8687: GO 8655
8689: POP
8690: POP
8691: GO 8637
8693: POP
8694: POP
// if tmp then
8695: LD_VAR 0 6
8699: IFFALSE 8739
// begin ComExitBuilding ( tmp ) ;
8701: LD_VAR 0 6
8705: PPUSH
8706: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8710: LD_VAR 0 6
8714: PPUSH
8715: LD_VAR 0 2
8719: PPUSH
8720: CALL_OW 250
8724: PPUSH
8725: LD_VAR 0 2
8729: PPUSH
8730: CALL_OW 251
8734: PPUSH
8735: CALL_OW 174
// end ; end ;
8739: LD_VAR 0 3
8743: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8744: LD_INT 0
8746: PPUSH
8747: PPUSH
8748: PPUSH
// enable ;
8749: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8750: LD_ADDR_VAR 0 6
8754: PUSH
8755: LD_VAR 0 3
8759: PPUSH
8760: CALL_OW 435
8764: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8765: LD_ADDR_VAR 0 5
8769: PUSH
8770: LD_INT 22
8772: PUSH
8773: LD_VAR 0 1
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 34
8784: PUSH
8785: LD_VAR 0 2
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PPUSH
8798: CALL_OW 69
8802: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8803: LD_VAR 0 5
8807: PUSH
8808: LD_VAR 0 3
8812: PPUSH
8813: CALL_OW 435
8817: AND
8818: PUSH
8819: LD_VAR 0 6
8823: AND
8824: IFFALSE 8857
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8826: LD_VAR 0 5
8830: PUSH
8831: LD_INT 1
8833: ARRAY
8834: PPUSH
8835: LD_VAR 0 6
8839: PUSH
8840: LD_INT 1
8842: ARRAY
8843: PPUSH
8844: LD_VAR 0 6
8848: PUSH
8849: LD_INT 2
8851: ARRAY
8852: PPUSH
8853: CALL_OW 177
// end ;
8857: LD_VAR 0 4
8861: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8862: LD_INT 0
8864: PPUSH
8865: PPUSH
8866: PPUSH
8867: PPUSH
8868: PPUSH
8869: PPUSH
8870: PPUSH
8871: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8872: LD_ADDR_VAR 0 6
8876: PUSH
8877: LD_VAR 0 2
8881: PPUSH
8882: LD_INT 22
8884: PUSH
8885: LD_VAR 0 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 56
8896: PUSH
8897: EMPTY
8898: LIST
8899: PUSH
8900: LD_INT 24
8902: PUSH
8903: LD_INT 700
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 3
8912: PUSH
8913: LD_INT 60
8915: PUSH
8916: EMPTY
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 2
8925: PUSH
8926: LD_INT 25
8928: PUSH
8929: LD_INT 1
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: LD_INT 25
8938: PUSH
8939: LD_INT 5
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 25
8948: PUSH
8949: LD_INT 8
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 9
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: PPUSH
8980: CALL_OW 70
8984: PUSH
8985: LD_EXP 47
8989: PUSH
8990: LD_EXP 48
8994: UNION
8995: DIFF
8996: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8997: LD_ADDR_VAR 0 7
9001: PUSH
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_INT 22
9009: PUSH
9010: LD_VAR 0 1
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: LD_INT 30
9021: PUSH
9022: LD_INT 32
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 58
9031: PUSH
9032: EMPTY
9033: LIST
9034: PUSH
9035: LD_INT 24
9037: PUSH
9038: LD_INT 251
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 70
9055: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9056: LD_ADDR_VAR 0 9
9060: PUSH
9061: LD_VAR 0 2
9065: PPUSH
9066: LD_INT 22
9068: PUSH
9069: LD_VAR 0 1
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 2
9080: PUSH
9081: LD_INT 30
9083: PUSH
9084: LD_INT 4
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 30
9093: PUSH
9094: LD_INT 5
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 24
9108: PUSH
9109: LD_INT 251
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: PPUSH
9121: CALL_OW 70
9125: ST_TO_ADDR
// if barrackList then
9126: LD_VAR 0 9
9130: IFFALSE 9286
// begin if turretList = 0 then
9132: LD_VAR 0 7
9136: PUSH
9137: LD_INT 0
9139: EQUAL
9140: IFFALSE 9178
// begin if soldiersList then
9142: LD_VAR 0 6
9146: IFFALSE 9176
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9148: LD_VAR 0 6
9152: PPUSH
9153: LD_VAR 0 9
9157: PUSH
9158: LD_INT 1
9160: PPUSH
9161: LD_VAR 0 9
9165: PPUSH
9166: CALL_OW 12
9170: ARRAY
9171: PPUSH
9172: CALL_OW 120
// end else
9176: GO 9286
// begin for i in barrackList do
9178: LD_ADDR_VAR 0 4
9182: PUSH
9183: LD_VAR 0 9
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9284
// begin if not turretList then
9191: LD_VAR 0 7
9195: NOT
9196: IFFALSE 9202
// exit ;
9198: POP
9199: POP
9200: GO 9286
// insideUnits = UnitsInside ( i ) ;
9202: LD_ADDR_VAR 0 10
9206: PUSH
9207: LD_VAR 0 4
9211: PPUSH
9212: CALL_OW 313
9216: ST_TO_ADDR
// if insideUnits then
9217: LD_VAR 0 10
9221: IFFALSE 9282
// begin tmp := insideUnits [ 1 ] ;
9223: LD_ADDR_VAR 0 8
9227: PUSH
9228: LD_VAR 0 10
9232: PUSH
9233: LD_INT 1
9235: ARRAY
9236: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9237: LD_VAR 0 8
9241: PPUSH
9242: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9246: LD_VAR 0 8
9250: PPUSH
9251: LD_VAR 0 7
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9264: LD_ADDR_VAR 0 7
9268: PUSH
9269: LD_VAR 0 7
9273: PPUSH
9274: LD_INT 1
9276: PPUSH
9277: CALL_OW 3
9281: ST_TO_ADDR
// end ; end ;
9282: GO 9188
9284: POP
9285: POP
// end ; end ; end ;
9286: LD_VAR 0 3
9290: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9291: LD_INT 0
9293: PPUSH
9294: PPUSH
9295: PPUSH
9296: PPUSH
9297: PPUSH
9298: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9299: LD_ADDR_VAR 0 8
9303: PUSH
9304: LD_INT 22
9306: PUSH
9307: LD_VAR 0 1
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PUSH
9316: LD_INT 21
9318: PUSH
9319: LD_INT 2
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 34
9328: PUSH
9329: LD_INT 52
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: PPUSH
9341: CALL_OW 69
9345: ST_TO_ADDR
// if not craneList then
9346: LD_VAR 0 8
9350: NOT
9351: IFFALSE 9355
// exit ;
9353: GO 9789
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9355: LD_ADDR_VAR 0 9
9359: PUSH
9360: LD_INT 22
9362: PUSH
9363: LD_VAR 0 1
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 21
9374: PUSH
9375: LD_INT 3
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PUSH
9382: LD_INT 3
9384: PUSH
9385: LD_INT 24
9387: PUSH
9388: LD_INT 1000
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: PPUSH
9407: CALL_OW 69
9411: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9412: LD_VAR 0 9
9416: PUSH
9417: LD_VAR 0 8
9421: PPUSH
9422: LD_INT 24
9424: PUSH
9425: LD_INT 750
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PPUSH
9432: CALL_OW 72
9436: AND
9437: IFFALSE 9472
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9439: LD_VAR 0 8
9443: PPUSH
9444: LD_INT 24
9446: PUSH
9447: LD_INT 750
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 72
9458: PPUSH
9459: LD_VAR 0 9
9463: PUSH
9464: LD_INT 1
9466: ARRAY
9467: PPUSH
9468: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9472: LD_VAR 0 8
9476: PPUSH
9477: LD_INT 3
9479: PUSH
9480: LD_INT 24
9482: PUSH
9483: LD_INT 750
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PPUSH
9494: CALL_OW 72
9498: IFFALSE 9536
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9500: LD_VAR 0 8
9504: PPUSH
9505: LD_INT 3
9507: PUSH
9508: LD_INT 24
9510: PUSH
9511: LD_INT 750
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PPUSH
9522: CALL_OW 72
9526: PPUSH
9527: LD_VAR 0 2
9531: PPUSH
9532: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9536: LD_VAR 0 8
9540: PUSH
9541: LD_VAR 0 9
9545: PUSH
9546: LD_INT 0
9548: EQUAL
9549: AND
9550: PUSH
9551: LD_VAR 0 3
9555: AND
9556: IFFALSE 9603
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9558: LD_VAR 0 8
9562: PPUSH
9563: LD_VAR 0 3
9567: PUSH
9568: LD_INT 1
9570: ARRAY
9571: PPUSH
9572: LD_VAR 0 3
9576: PUSH
9577: LD_INT 2
9579: ARRAY
9580: PPUSH
9581: LD_VAR 0 3
9585: PUSH
9586: LD_INT 3
9588: ARRAY
9589: PPUSH
9590: LD_VAR 0 3
9594: PUSH
9595: LD_INT 4
9597: ARRAY
9598: PPUSH
9599: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9603: LD_ADDR_VAR 0 7
9607: PUSH
9608: LD_VAR 0 2
9612: PPUSH
9613: LD_INT 22
9615: PUSH
9616: LD_VAR 0 1
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: LD_INT 21
9627: PUSH
9628: LD_INT 2
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 34
9637: PUSH
9638: LD_INT 52
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 3
9647: PUSH
9648: LD_INT 24
9650: PUSH
9651: LD_INT 750
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: PPUSH
9668: CALL_OW 70
9672: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9673: LD_ADDR_VAR 0 6
9677: PUSH
9678: LD_VAR 0 2
9682: PPUSH
9683: LD_INT 22
9685: PUSH
9686: LD_VAR 0 1
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 2
9697: PUSH
9698: LD_INT 30
9700: PUSH
9701: LD_INT 0
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 30
9710: PUSH
9711: LD_INT 1
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PPUSH
9727: CALL_OW 70
9731: ST_TO_ADDR
// if crane then
9732: LD_VAR 0 7
9736: IFFALSE 9789
// for i in crane do
9738: LD_ADDR_VAR 0 5
9742: PUSH
9743: LD_VAR 0 7
9747: PUSH
9748: FOR_IN
9749: IFFALSE 9787
// begin if dep then
9751: LD_VAR 0 6
9755: IFFALSE 9771
// ComMoveUnit ( i , dep ) ;
9757: LD_VAR 0 5
9761: PPUSH
9762: LD_VAR 0 6
9766: PPUSH
9767: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9771: LD_VAR 0 5
9775: PPUSH
9776: CALL_OW 311
9780: PPUSH
9781: CALL 77755 0 1
// end ;
9785: GO 9748
9787: POP
9788: POP
// end ; end_of_file
9789: LD_VAR 0 4
9793: RET
// export function Action ; begin
9794: LD_INT 0
9796: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
9797: LD_INT 66
9799: PPUSH
9800: LD_INT 4
9802: PPUSH
9803: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
9807: LD_INT 22
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 25
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PPUSH
9831: CALL_OW 69
9835: PUSH
9836: LD_INT 0
9838: EQUAL
9839: IFFALSE 9853
// SetClass ( JMM , 2 ) ;
9841: LD_EXP 1
9845: PPUSH
9846: LD_INT 2
9848: PPUSH
9849: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
9853: LD_STRING M1
9855: PPUSH
9856: CALL_OW 337
// case Difficulty of 1 :
9860: LD_OWVAR 67
9864: PUSH
9865: LD_INT 1
9867: DOUBLE
9868: EQUAL
9869: IFTRUE 9873
9871: GO 9883
9873: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
9874: LD_STRING M1-1
9876: PPUSH
9877: CALL_OW 337
9881: GO 9926
9883: LD_INT 2
9885: DOUBLE
9886: EQUAL
9887: IFTRUE 9891
9889: GO 9901
9891: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
9892: LD_STRING M1-2
9894: PPUSH
9895: CALL_OW 337
9899: GO 9926
9901: LD_INT 3
9903: DOUBLE
9904: GREATEREQUAL
9905: IFFALSE 9913
9907: LD_INT 4
9909: DOUBLE
9910: LESSEQUAL
9911: IFTRUE 9915
9913: GO 9925
9915: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
9916: LD_STRING M1-3
9918: PPUSH
9919: CALL_OW 337
9923: GO 9926
9925: POP
// ChangeMissionObjectives ( M1cont ) ;
9926: LD_STRING M1cont
9928: PPUSH
9929: CALL_OW 337
// wait ( 0 0$2 ) ;
9933: LD_INT 70
9935: PPUSH
9936: CALL_OW 67
// SaveForQuickRestart ;
9940: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
9944: LD_INT 525
9946: PPUSH
9947: LD_INT 700
9949: PPUSH
9950: CALL_OW 12
9954: PPUSH
9955: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
9959: LD_INT 5
9961: PPUSH
9962: LD_INT 82
9964: PPUSH
9965: LD_INT 38
9967: PPUSH
9968: LD_INT 10
9970: PPUSH
9971: LD_INT 1
9973: PPUSH
9974: CALL_OW 56
// wait ( 0 0$14 ) ;
9978: LD_INT 490
9980: PPUSH
9981: CALL_OW 67
// firstCrateSpawn := true ;
9985: LD_ADDR_EXP 40
9989: PUSH
9990: LD_INT 1
9992: ST_TO_ADDR
// end ;
9993: LD_VAR 0 1
9997: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
9998: LD_EXP 40
10002: IFFALSE 10391
10004: GO 10006
10006: DISABLE
10007: LD_INT 0
10009: PPUSH
// begin if IsOk ( Lisa ) then
10010: LD_EXP 2
10014: PPUSH
10015: CALL_OW 302
10019: IFFALSE 10035
// Say ( Lisa , DR0-Lisa-1 ) else
10021: LD_EXP 2
10025: PPUSH
10026: LD_STRING DR0-Lisa-1
10028: PPUSH
10029: CALL_OW 88
10033: GO 10181
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10035: LD_INT 22
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: LD_INT 21
10047: PUSH
10048: LD_INT 1
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 26
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 2
10067: PUSH
10068: LD_INT 25
10070: PUSH
10071: LD_INT 1
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 25
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 25
10090: PUSH
10091: LD_INT 3
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: LD_INT 25
10100: PUSH
10101: LD_INT 4
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: PPUSH
10121: CALL_OW 69
10125: PUSH
10126: LD_EXP 1
10130: PUSH
10131: LD_EXP 8
10135: PUSH
10136: LD_EXP 5
10140: PUSH
10141: LD_EXP 6
10145: PUSH
10146: LD_EXP 7
10150: PUSH
10151: LD_EXP 4
10155: PUSH
10156: LD_EXP 3
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: DIFF
10170: PPUSH
10171: LD_STRING DR0-Sol1-1
10173: PPUSH
10174: LD_STRING DR0-Sol1-1
10176: PPUSH
10177: CALL 6771 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10181: LD_ADDR_VAR 0 1
10185: PUSH
10186: LD_INT 22
10188: PUSH
10189: LD_INT 1
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 21
10198: PUSH
10199: LD_INT 1
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 26
10208: PUSH
10209: LD_INT 1
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: LD_INT 2
10218: PUSH
10219: LD_INT 25
10221: PUSH
10222: LD_INT 1
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 25
10231: PUSH
10232: LD_INT 2
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 25
10241: PUSH
10242: LD_INT 3
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 25
10251: PUSH
10252: LD_INT 4
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: PPUSH
10272: CALL_OW 69
10276: PUSH
10277: LD_EXP 1
10281: PUSH
10282: LD_EXP 8
10286: PUSH
10287: LD_EXP 5
10291: PUSH
10292: LD_EXP 2
10296: PUSH
10297: LD_EXP 6
10301: PUSH
10302: LD_EXP 7
10306: PUSH
10307: LD_EXP 4
10311: PUSH
10312: LD_EXP 3
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: DIFF
10327: PPUSH
10328: LD_STRING DR0-Sol2-1
10330: PPUSH
10331: LD_STRING DR0-Sol2-1
10333: PPUSH
10334: CALL 6771 0 3
10338: ST_TO_ADDR
// if IsOk ( Cyrus ) then
10339: LD_EXP 4
10343: PPUSH
10344: CALL_OW 302
10348: IFFALSE 10362
// Say ( Cyrus , DR0-Cyrus-1 ) ;
10350: LD_EXP 4
10354: PPUSH
10355: LD_STRING DR0-Cyrus-1
10357: PPUSH
10358: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
10362: LD_EXP 2
10366: PPUSH
10367: CALL_OW 302
10371: PUSH
10372: LD_VAR 0 1
10376: OR
10377: IFFALSE 10391
// Say ( JMM , DR0-JMM-1 ) ;
10379: LD_EXP 1
10383: PPUSH
10384: LD_STRING DR0-JMM-1
10386: PPUSH
10387: CALL_OW 88
// end ;
10391: PPOPN 1
10393: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
10394: LD_EXP 5
10398: PPUSH
10399: CALL_OW 302
10403: PUSH
10404: LD_INT 22
10406: PUSH
10407: LD_INT 1
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 25
10416: PUSH
10417: LD_INT 16
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PPUSH
10428: CALL_OW 69
10432: PUSH
10433: LD_INT 0
10435: GREATER
10436: AND
10437: PUSH
10438: LD_INT 1
10440: PPUSH
10441: CALL_OW 463
10445: NOT
10446: AND
10447: IFFALSE 10725
10449: GO 10451
10451: DISABLE
// begin DialogueOn ;
10452: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10456: LD_EXP 5
10460: PPUSH
10461: LD_STRING D10-Frank-1
10463: PPUSH
10464: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10468: LD_INT 22
10470: PUSH
10471: LD_INT 1
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 21
10480: PUSH
10481: LD_INT 1
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 2
10490: PUSH
10491: LD_INT 25
10493: PUSH
10494: LD_INT 1
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 25
10503: PUSH
10504: LD_INT 2
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 3
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 4
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: LIST
10542: PPUSH
10543: CALL_OW 69
10547: PUSH
10548: LD_EXP 1
10552: PUSH
10553: LD_EXP 5
10557: PUSH
10558: LD_EXP 2
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: DIFF
10568: PPUSH
10569: LD_STRING D10-Sol1-1
10571: PPUSH
10572: LD_STRING D10-FSol1-1
10574: PPUSH
10575: CALL 6771 0 3
// Say ( Frank , D10-Frank-2 ) ;
10579: LD_EXP 5
10583: PPUSH
10584: LD_STRING D10-Frank-2
10586: PPUSH
10587: CALL_OW 88
// if IsOk ( Lisa ) then
10591: LD_EXP 2
10595: PPUSH
10596: CALL_OW 302
10600: IFFALSE 10616
// Say ( Lisa , D10-Lisa-2 ) else
10602: LD_EXP 2
10606: PPUSH
10607: LD_STRING D10-Lisa-2
10609: PPUSH
10610: CALL_OW 88
10614: GO 10721
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10616: LD_INT 22
10618: PUSH
10619: LD_INT 1
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 2
10638: PUSH
10639: LD_INT 25
10641: PUSH
10642: LD_INT 1
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 25
10651: PUSH
10652: LD_INT 2
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 25
10661: PUSH
10662: LD_INT 3
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 25
10671: PUSH
10672: LD_INT 4
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: LIST
10690: PPUSH
10691: CALL_OW 69
10695: PUSH
10696: LD_EXP 1
10700: PUSH
10701: LD_EXP 5
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: DIFF
10710: PPUSH
10711: LD_STRING D10-Sol1-2
10713: PPUSH
10714: LD_STRING D10-FSol1-2
10716: PPUSH
10717: CALL 6771 0 3
// DialogueOff ;
10721: CALL_OW 7
// end ;
10725: END
// every 10 10$30 trigger not InBattle ( 1 ) do
10726: LD_INT 1
10728: PPUSH
10729: CALL_OW 463
10733: NOT
10734: IFFALSE 11017
10736: GO 10738
10738: DISABLE
// begin HarrisonSupport ;
10739: CALL 2491 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10743: LD_EXP 17
10747: PPUSH
10748: CALL_OW 310
10752: PPUSH
10753: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10757: LD_EXP 17
10761: PPUSH
10762: LD_STRING DEng-Eng1-1
10764: PPUSH
10765: CALL_OW 88
// wait ( 1 1$0 ) ;
10769: LD_INT 2100
10771: PPUSH
10772: CALL_OW 67
// DialogueOn ;
10776: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10780: LD_EXP 14
10784: PPUSH
10785: LD_STRING DRem-Har-1
10787: PPUSH
10788: CALL_OW 94
// if contactWithRussian then
10792: LD_EXP 22
10796: IFFALSE 10812
// Say ( JMM , DRem-JMM-1 ) else
10798: LD_EXP 1
10802: PPUSH
10803: LD_STRING DRem-JMM-1
10805: PPUSH
10806: CALL_OW 88
10810: GO 10824
// Say ( JMM , DRem-JMM-1a ) ;
10812: LD_EXP 1
10816: PPUSH
10817: LD_STRING DRem-JMM-1a
10819: PPUSH
10820: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
10824: LD_EXP 14
10828: PPUSH
10829: LD_STRING DRem-Har-2
10831: PPUSH
10832: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
10836: LD_STRING DenisInDelta
10838: PPUSH
10839: LD_INT 0
10841: PPUSH
10842: CALL_OW 30
10846: IFFALSE 10862
// Say ( JMM , DRem-JMM-2 ) else
10848: LD_EXP 1
10852: PPUSH
10853: LD_STRING DRem-JMM-2
10855: PPUSH
10856: CALL_OW 88
10860: GO 10874
// Say ( JMM , DRem-JMM-2a ) ;
10862: LD_EXP 1
10866: PPUSH
10867: LD_STRING DRem-JMM-2a
10869: PPUSH
10870: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
10874: LD_EXP 14
10878: PPUSH
10879: LD_STRING DRem-Har-3
10881: PPUSH
10882: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
10886: LD_EXP 1
10890: PPUSH
10891: LD_STRING DRem-JMM-3
10893: PPUSH
10894: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
10898: LD_EXP 14
10902: PPUSH
10903: LD_STRING DRem-Har-4
10905: PPUSH
10906: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
10910: LD_STRING DenisInDelta
10912: PPUSH
10913: LD_INT 0
10915: PPUSH
10916: CALL_OW 30
10920: IFFALSE 10980
// begin Say ( JMM , DRem-JMM-4 ) ;
10922: LD_EXP 1
10926: PPUSH
10927: LD_STRING DRem-JMM-4
10929: PPUSH
10930: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
10934: LD_EXP 14
10938: PPUSH
10939: LD_STRING DRem-Har-5
10941: PPUSH
10942: CALL_OW 94
// DialogueOff ;
10946: CALL_OW 7
// wait ( 4 4$00 ) ;
10950: LD_INT 8400
10952: PPUSH
10953: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10957: LD_INT 35
10959: PPUSH
10960: CALL_OW 67
// until not InBattle ( 1 ) ;
10964: LD_INT 1
10966: PPUSH
10967: CALL_OW 463
10971: NOT
10972: IFFALSE 10957
// SpawnDenis ;
10974: CALL 11018 0 0
// end else
10978: GO 11017
// begin DialogueOff ;
10980: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
10984: LD_INT 36
10986: PPUSH
10987: LD_INT 1
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
10997: LD_INT 15
10999: PPUSH
11000: LD_INT 1
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11010: LD_STRING MR
11012: PPUSH
11013: CALL_OW 337
// end ; end ;
11017: END
// export function SpawnDenis ; var tmp ; begin
11018: LD_INT 0
11020: PPUSH
11021: PPUSH
// PrepareDenis ;
11022: CALL 2199 0 0
// if not Denis then
11026: LD_EXP 9
11030: NOT
11031: IFFALSE 11035
// exit ;
11033: GO 11256
// CenterNowOnUnits ( Denis ) ;
11035: LD_EXP 9
11039: PPUSH
11040: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11044: LD_ADDR_VAR 0 2
11048: PUSH
11049: LD_INT 22
11051: PUSH
11052: LD_INT 1
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 69
11063: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11064: LD_EXP 9
11068: PPUSH
11069: LD_VAR 0 2
11073: PPUSH
11074: LD_EXP 9
11078: PPUSH
11079: CALL_OW 74
11083: PPUSH
11084: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11088: LD_INT 35
11090: PPUSH
11091: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11095: LD_INT 22
11097: PUSH
11098: LD_INT 1
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 91
11107: PUSH
11108: LD_EXP 9
11112: PUSH
11113: LD_INT 10
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PPUSH
11125: CALL_OW 69
11129: IFFALSE 11088
// SetSide ( Denis , 1 ) ;
11131: LD_EXP 9
11135: PPUSH
11136: LD_INT 1
11138: PPUSH
11139: CALL_OW 235
// DialogueOn ;
11143: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11147: LD_EXP 9
11151: PPUSH
11152: LD_STRING DDen-Den-1
11154: PPUSH
11155: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11159: LD_EXP 1
11163: PPUSH
11164: LD_STRING DDen-JMM-1
11166: PPUSH
11167: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11171: LD_EXP 9
11175: PPUSH
11176: LD_STRING DDen-Den-2
11178: PPUSH
11179: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11183: LD_EXP 1
11187: PPUSH
11188: LD_STRING DDen-JMM-2
11190: PPUSH
11191: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11195: LD_EXP 9
11199: PPUSH
11200: LD_STRING DDen-Den-3
11202: PPUSH
11203: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11207: LD_EXP 1
11211: PPUSH
11212: LD_STRING DDen-JMM-3
11214: PPUSH
11215: CALL_OW 88
// DialogueOff ;
11219: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11223: LD_INT 36
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: LD_INT 1
11231: PPUSH
11232: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11236: LD_INT 15
11238: PPUSH
11239: LD_INT 1
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11249: LD_STRING MR
11251: PPUSH
11252: CALL_OW 337
// end ;
11256: LD_VAR 0 1
11260: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11261: LD_INT 22
11263: PUSH
11264: LD_INT 1
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 30
11273: PUSH
11274: LD_INT 15
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PPUSH
11285: CALL_OW 69
11289: PUSH
11290: LD_EXP 9
11294: PPUSH
11295: CALL_OW 302
11299: AND
11300: PUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 463
11308: NOT
11309: AND
11310: IFFALSE 11339
11312: GO 11314
11314: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11315: LD_EXP 9
11319: PPUSH
11320: LD_STRING DR1-Den-1
11322: PPUSH
11323: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11327: LD_EXP 1
11331: PPUSH
11332: LD_STRING DR1-JMM-1
11334: PPUSH
11335: CALL_OW 88
// end ;
11339: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
11340: LD_INT 15
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 321
11350: PUSH
11351: LD_INT 2
11353: EQUAL
11354: PUSH
11355: LD_EXP 9
11359: PPUSH
11360: CALL_OW 302
11364: AND
11365: PUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 463
11373: NOT
11374: AND
11375: IFFALSE 11607
11377: GO 11379
11379: DISABLE
// begin DialogueOn ;
11380: CALL_OW 6
// if IsOK ( Denis ) then
11384: LD_EXP 9
11388: PPUSH
11389: CALL_OW 302
11393: IFFALSE 11409
// Say ( Denis , DR2-Den-1 ) else
11395: LD_EXP 9
11399: PPUSH
11400: LD_STRING DR2-Den-1
11402: PPUSH
11403: CALL_OW 88
11407: GO 11468
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11409: LD_INT 22
11411: PUSH
11412: LD_INT 1
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 21
11421: PUSH
11422: LD_INT 1
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 4
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PPUSH
11444: CALL_OW 69
11448: PUSH
11449: LD_EXP 1
11453: PUSH
11454: EMPTY
11455: LIST
11456: DIFF
11457: PPUSH
11458: LD_STRING DR2-Sci1-1
11460: PPUSH
11461: LD_STRING DR2-FSci1-1
11463: PPUSH
11464: CALL 6771 0 3
// Say ( JMM , DR2-JMM-1 ) ;
11468: LD_EXP 1
11472: PPUSH
11473: LD_STRING DR2-JMM-1
11475: PPUSH
11476: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11480: LD_INT 22
11482: PUSH
11483: LD_INT 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 21
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 2
11502: PUSH
11503: LD_INT 25
11505: PUSH
11506: LD_INT 1
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 25
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 3
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 25
11535: PUSH
11536: LD_INT 4
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: LIST
11554: PPUSH
11555: CALL_OW 69
11559: PUSH
11560: LD_EXP 1
11564: PUSH
11565: LD_EXP 9
11569: PUSH
11570: LD_EXP 8
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: DIFF
11580: PPUSH
11581: LD_STRING DR2-Sol1-1
11583: PPUSH
11584: LD_STRING DR2-Sol1-11
11586: PPUSH
11587: CALL 6771 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11591: LD_EXP 1
11595: PPUSH
11596: LD_STRING DR2-JMM-2
11598: PPUSH
11599: CALL_OW 88
// DialogueOff ;
11603: CALL_OW 7
// end ;
11607: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
11608: LD_INT 22
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 30
11620: PUSH
11621: LD_INT 36
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PPUSH
11632: CALL_OW 69
11636: PUSH
11637: LD_INT 0
11639: EQUAL
11640: PUSH
11641: LD_INT 22
11643: PUSH
11644: LD_INT 1
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 21
11653: PUSH
11654: LD_INT 2
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 33
11663: PUSH
11664: LD_INT 2
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 69
11680: PUSH
11681: LD_INT 0
11683: GREATER
11684: AND
11685: PUSH
11686: LD_EXP 23
11690: PUSH
11691: LD_INT 0
11693: EQUAL
11694: AND
11695: PUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 463
11703: NOT
11704: AND
11705: IFFALSE 11842
11707: GO 11709
11709: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11710: LD_INT 22
11712: PUSH
11713: LD_INT 1
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 21
11722: PUSH
11723: LD_INT 1
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 25
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 26
11742: PUSH
11743: LD_INT 1
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: PPUSH
11756: CALL_OW 69
11760: PUSH
11761: LD_EXP 1
11765: PUSH
11766: LD_EXP 6
11770: PUSH
11771: LD_EXP 7
11775: PUSH
11776: LD_EXP 9
11780: PUSH
11781: LD_EXP 15
11785: PUSH
11786: LD_EXP 3
11790: PUSH
11791: LD_EXP 4
11795: PUSH
11796: LD_EXP 2
11800: PUSH
11801: LD_EXP 5
11805: PUSH
11806: LD_EXP 8
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: DIFF
11823: PPUSH
11824: LD_STRING D3a-Mech1-1
11826: PPUSH
11827: LD_STRING D3a-Mech1-1
11829: PPUSH
11830: CALL 6771 0 3
// firstTower = 2 ;
11834: LD_ADDR_EXP 23
11838: PUSH
11839: LD_INT 2
11841: ST_TO_ADDR
// end ;
11842: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11843: LD_INT 22
11845: PUSH
11846: LD_INT 3
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 21
11855: PUSH
11856: LD_INT 3
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PPUSH
11867: CALL_OW 69
11871: PUSH
11872: LD_INT 0
11874: EQUAL
11875: IFFALSE 12006
11877: GO 11879
11879: DISABLE
11880: LD_INT 0
11882: PPUSH
// begin stop_talking := true ;
11883: LD_ADDR_OWVAR 56
11887: PUSH
11888: LD_INT 1
11890: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
11891: LD_ADDR_VAR 0 1
11895: PUSH
11896: LD_INT 22
11898: PUSH
11899: LD_INT 1
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 21
11908: PUSH
11909: LD_INT 1
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 2
11918: PUSH
11919: LD_INT 25
11921: PUSH
11922: LD_INT 1
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: LD_INT 25
11931: PUSH
11932: LD_INT 2
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 25
11941: PUSH
11942: LD_INT 3
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: LD_INT 25
11951: PUSH
11952: LD_INT 4
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: PPUSH
11971: CALL_OW 69
11975: PUSH
11976: FOR_IN
11977: IFFALSE 11996
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
11979: LD_VAR 0 1
11983: PPUSH
11984: LD_INT 1
11986: PPUSH
11987: LD_INT 7500
11989: PPUSH
11990: CALL_OW 591
11994: GO 11976
11996: POP
11997: POP
// stop_talking := false ;
11998: LD_ADDR_OWVAR 56
12002: PUSH
12003: LD_INT 0
12005: ST_TO_ADDR
// end ;
12006: PPOPN 1
12008: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12009: LD_INT 22
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 30
12021: PUSH
12022: LD_INT 36
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PPUSH
12033: CALL_OW 69
12037: PUSH
12038: LD_INT 22
12040: PUSH
12041: LD_INT 1
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 21
12050: PUSH
12051: LD_INT 2
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 33
12060: PUSH
12061: LD_INT 2
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 69
12077: AND
12078: PUSH
12079: CALL 12631 0 0
12083: AND
12084: PUSH
12085: LD_INT 1
12087: PPUSH
12088: CALL_OW 463
12092: NOT
12093: AND
12094: IFFALSE 12628
12096: GO 12098
12098: DISABLE
12099: LD_INT 0
12101: PPUSH
12102: PPUSH
12103: PPUSH
12104: PPUSH
12105: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12106: LD_ADDR_VAR 0 3
12110: PUSH
12111: LD_INT 22
12113: PUSH
12114: LD_INT 1
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 30
12123: PUSH
12124: LD_INT 36
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PPUSH
12135: CALL_OW 69
12139: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12140: LD_ADDR_VAR 0 4
12144: PUSH
12145: LD_INT 22
12147: PUSH
12148: LD_INT 1
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 21
12157: PUSH
12158: LD_INT 2
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 33
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: LIST
12179: PPUSH
12180: CALL_OW 69
12184: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12185: LD_ADDR_VAR 0 5
12189: PUSH
12190: EMPTY
12191: ST_TO_ADDR
// for i in tmpControlTowers do
12192: LD_ADDR_VAR 0 1
12196: PUSH
12197: LD_VAR 0 3
12201: PUSH
12202: FOR_IN
12203: IFFALSE 12626
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12205: LD_EXP 1
12209: PPUSH
12210: CALL_OW 310
12214: PUSH
12215: LD_VAR 0 1
12219: EQUAL
12220: PUSH
12221: LD_EXP 1
12225: PPUSH
12226: CALL_OW 257
12230: PUSH
12231: LD_INT 3
12233: EQUAL
12234: AND
12235: IFFALSE 12369
// begin InGameOn ;
12237: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12241: LD_VAR 0 4
12245: PUSH
12246: LD_INT 1
12248: ARRAY
12249: PPUSH
12250: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12254: LD_EXP 1
12258: PPUSH
12259: LD_STRING D4a-JMM-1
12261: PPUSH
12262: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12266: LD_VAR 0 4
12270: PUSH
12271: LD_INT 1
12273: ARRAY
12274: PPUSH
12275: LD_EXP 1
12279: PPUSH
12280: CALL_OW 53
// wait ( 0 0$1 ) ;
12284: LD_INT 35
12286: PPUSH
12287: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12291: LD_VAR 0 4
12295: PUSH
12296: LD_INT 1
12298: ARRAY
12299: PPUSH
12300: LD_VAR 0 4
12304: PUSH
12305: LD_INT 1
12307: ARRAY
12308: PPUSH
12309: CALL_OW 250
12313: PUSH
12314: LD_INT 3
12316: PLUS
12317: PPUSH
12318: LD_VAR 0 4
12322: PUSH
12323: LD_INT 1
12325: ARRAY
12326: PPUSH
12327: CALL_OW 251
12331: PUSH
12332: LD_INT 2
12334: MINUS
12335: PPUSH
12336: CALL_OW 111
// wait ( 0 0$2 ) ;
12340: LD_INT 70
12342: PPUSH
12343: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12347: LD_EXP 1
12351: PPUSH
12352: LD_STRING D4b-JMM-1
12354: PPUSH
12355: CALL_OW 88
// InGameOff ;
12359: CALL_OW 9
// exit ;
12363: POP
12364: POP
12365: GO 12628
// end else
12367: GO 12624
// begin InGameOn ;
12369: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
12373: LD_ADDR_VAR 0 5
12377: PUSH
12378: LD_VAR 0 1
12382: PPUSH
12383: CALL_OW 313
12387: PPUSH
12388: LD_INT 25
12390: PUSH
12391: LD_INT 3
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: PPUSH
12398: CALL_OW 72
12402: ST_TO_ADDR
// if not tmpMechanicInside then
12403: LD_VAR 0 5
12407: NOT
12408: IFFALSE 12412
// continue ;
12410: GO 12202
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12412: LD_VAR 0 5
12416: PUSH
12417: LD_INT 1
12419: ARRAY
12420: PPUSH
12421: CALL_OW 258
12425: PUSH
12426: LD_INT 1
12428: EQUAL
12429: IFFALSE 12449
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
12431: LD_VAR 0 5
12435: PUSH
12436: LD_INT 1
12438: ARRAY
12439: PPUSH
12440: LD_STRING D4a-Mech1-1
12442: PPUSH
12443: CALL_OW 88
12447: GO 12465
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12449: LD_VAR 0 5
12453: PUSH
12454: LD_INT 1
12456: ARRAY
12457: PPUSH
12458: LD_STRING D4a-FMech1-1
12460: PPUSH
12461: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12465: LD_VAR 0 4
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12478: LD_VAR 0 4
12482: PUSH
12483: LD_INT 1
12485: ARRAY
12486: PPUSH
12487: LD_VAR 0 5
12491: PUSH
12492: LD_INT 1
12494: ARRAY
12495: PPUSH
12496: CALL_OW 53
// wait ( 0 0$1 ) ;
12500: LD_INT 35
12502: PPUSH
12503: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12507: LD_VAR 0 4
12511: PUSH
12512: LD_INT 1
12514: ARRAY
12515: PPUSH
12516: LD_VAR 0 4
12520: PUSH
12521: LD_INT 1
12523: ARRAY
12524: PPUSH
12525: CALL_OW 250
12529: PUSH
12530: LD_INT 3
12532: PLUS
12533: PPUSH
12534: LD_VAR 0 4
12538: PUSH
12539: LD_INT 1
12541: ARRAY
12542: PPUSH
12543: CALL_OW 251
12547: PUSH
12548: LD_INT 2
12550: MINUS
12551: PPUSH
12552: CALL_OW 111
// wait ( 0 0$2 ) ;
12556: LD_INT 70
12558: PPUSH
12559: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12563: LD_VAR 0 5
12567: PUSH
12568: LD_INT 1
12570: ARRAY
12571: PPUSH
12572: CALL_OW 258
12576: PUSH
12577: LD_INT 1
12579: EQUAL
12580: IFFALSE 12600
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
12582: LD_VAR 0 5
12586: PUSH
12587: LD_INT 1
12589: ARRAY
12590: PPUSH
12591: LD_STRING D4b-Mech1-1
12593: PPUSH
12594: CALL_OW 88
12598: GO 12616
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12600: LD_VAR 0 5
12604: PUSH
12605: LD_INT 1
12607: ARRAY
12608: PPUSH
12609: LD_STRING D4b-FMech1-1
12611: PPUSH
12612: CALL_OW 88
// InGameOff ;
12616: CALL_OW 9
// exit ;
12620: POP
12621: POP
12622: GO 12628
// end ; end ;
12624: GO 12202
12626: POP
12627: POP
// end ;
12628: PPOPN 5
12630: END
// function CheckMehInside ; var i , j , tmp ; begin
12631: LD_INT 0
12633: PPUSH
12634: PPUSH
12635: PPUSH
12636: PPUSH
// result := false ;
12637: LD_ADDR_VAR 0 1
12641: PUSH
12642: LD_INT 0
12644: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12645: LD_ADDR_VAR 0 4
12649: PUSH
12650: LD_INT 22
12652: PUSH
12653: LD_INT 1
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 30
12662: PUSH
12663: LD_INT 36
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PPUSH
12674: CALL_OW 69
12678: ST_TO_ADDR
// if not tmp then
12679: LD_VAR 0 4
12683: NOT
12684: IFFALSE 12688
// exit ;
12686: GO 12752
// for i in tmp do
12688: LD_ADDR_VAR 0 2
12692: PUSH
12693: LD_VAR 0 4
12697: PUSH
12698: FOR_IN
12699: IFFALSE 12750
// for j in UnitsInside ( i ) do
12701: LD_ADDR_VAR 0 3
12705: PUSH
12706: LD_VAR 0 2
12710: PPUSH
12711: CALL_OW 313
12715: PUSH
12716: FOR_IN
12717: IFFALSE 12746
// if GetClass ( j ) = class_mechanic then
12719: LD_VAR 0 3
12723: PPUSH
12724: CALL_OW 257
12728: PUSH
12729: LD_INT 3
12731: EQUAL
12732: IFFALSE 12744
// begin result := true ;
12734: LD_ADDR_VAR 0 1
12738: PUSH
12739: LD_INT 1
12741: ST_TO_ADDR
// break ;
12742: GO 12746
// end ;
12744: GO 12716
12746: POP
12747: POP
12748: GO 12698
12750: POP
12751: POP
// end ;
12752: LD_VAR 0 1
12756: RET
// every 12 12$0 do
12757: GO 12759
12759: DISABLE
// begin repeat wait ( 0 0$1 ) ;
12760: LD_INT 35
12762: PPUSH
12763: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
12767: LD_INT 1
12769: PPUSH
12770: CALL_OW 463
12774: NOT
12775: PUSH
12776: LD_INT 32
12778: PPUSH
12779: LD_INT 81
12781: PUSH
12782: LD_INT 1
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PPUSH
12789: CALL_OW 70
12793: NOT
12794: AND
12795: IFFALSE 12760
// PrepareKurt ;
12797: CALL 15254 0 0
// end ;
12801: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
12802: LD_EXP 15
12806: PPUSH
12807: CALL_OW 302
12811: PUSH
12812: LD_EXP 15
12816: PPUSH
12817: CALL_OW 255
12821: PUSH
12822: LD_INT 1
12824: EQUAL
12825: AND
12826: PUSH
12827: LD_EXP 2
12831: AND
12832: IFFALSE 12997
12834: GO 12836
12836: DISABLE
// begin wait ( 0 0$50 ) ;
12837: LD_INT 1750
12839: PPUSH
12840: CALL_OW 67
// if not IsOk ( Joan ) then
12844: LD_EXP 15
12848: PPUSH
12849: CALL_OW 302
12853: NOT
12854: IFFALSE 12858
// exit ;
12856: GO 12997
// if IsOK ( Lisa ) then
12858: LD_EXP 2
12862: PPUSH
12863: CALL_OW 302
12867: IFFALSE 12997
// begin DialogueOn ;
12869: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
12873: LD_EXP 2
12877: PPUSH
12878: LD_STRING D7-Lisa-1
12880: PPUSH
12881: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
12885: LD_EXP 1
12889: PPUSH
12890: LD_STRING D7-JMM-1
12892: PPUSH
12893: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
12897: LD_EXP 2
12901: PPUSH
12902: LD_STRING D7-Lisa-2
12904: PPUSH
12905: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
12909: LD_EXP 1
12913: PPUSH
12914: LD_STRING D7-JMM-2
12916: PPUSH
12917: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
12921: LD_EXP 2
12925: PPUSH
12926: LD_STRING D7-Lisa-3
12928: PPUSH
12929: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
12933: LD_EXP 1
12937: PPUSH
12938: LD_STRING D7-JMM-3
12940: PPUSH
12941: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
12945: LD_EXP 2
12949: PPUSH
12950: LD_STRING D7-Lisa-4
12952: PPUSH
12953: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
12957: LD_EXP 1
12961: PPUSH
12962: LD_STRING D7-JMM-4
12964: PPUSH
12965: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
12969: LD_EXP 1
12973: PPUSH
12974: LD_STRING D7-JMM-4a
12976: PPUSH
12977: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
12981: LD_EXP 2
12985: PPUSH
12986: LD_STRING D7-Lisa-5
12988: PPUSH
12989: CALL_OW 88
// DialogueOff ;
12993: CALL_OW 7
// end ; end ;
12997: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
12998: LD_EXP 13
13002: PUSH
13003: LD_INT 22
13005: PUSH
13006: LD_INT 1
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 91
13015: PUSH
13016: LD_EXP 13
13020: PUSH
13021: LD_INT 10
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 2
13031: PUSH
13032: LD_INT 25
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 25
13044: PUSH
13045: LD_INT 2
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 25
13054: PUSH
13055: LD_INT 3
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 25
13064: PUSH
13065: LD_INT 4
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 69
13088: PUSH
13089: LD_INT 1
13091: GREATER
13092: AND
13093: IFFALSE 13110
13095: GO 13097
13097: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13098: LD_EXP 13
13102: PPUSH
13103: LD_STRING D5-Sol1-1
13105: PPUSH
13106: CALL_OW 88
13110: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13111: LD_INT 22
13113: PUSH
13114: LD_INT 1
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 33
13123: PUSH
13124: LD_INT 2
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PPUSH
13135: CALL_OW 69
13139: PUSH
13140: LD_INT 2
13142: GREATEREQUAL
13143: IFFALSE 13163
13145: GO 13147
13147: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13148: LD_STRING MRa
13150: PPUSH
13151: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13155: LD_ADDR_EXP 28
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// end ;
13163: END
// every 2 2$00 do var i , last ;
13164: GO 13166
13166: DISABLE
13167: LD_INT 0
13169: PPUSH
13170: PPUSH
// begin last := 8 ;
13171: LD_ADDR_VAR 0 2
13175: PUSH
13176: LD_INT 8
13178: ST_TO_ADDR
// for i = 1 to last do
13179: LD_ADDR_VAR 0 1
13183: PUSH
13184: DOUBLE
13185: LD_INT 1
13187: DEC
13188: ST_TO_ADDR
13189: LD_VAR 0 2
13193: PUSH
13194: FOR_TO
13195: IFFALSE 13223
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13197: LD_INT 6300
13199: PPUSH
13200: LD_INT 12600
13202: PPUSH
13203: CALL_OW 12
13207: PPUSH
13208: CALL_OW 67
// PrepareRandoms ( i ) ;
13212: LD_VAR 0 1
13216: PPUSH
13217: CALL 4078 0 1
// end ;
13221: GO 13194
13223: POP
13224: POP
// end ;
13225: PPOPN 2
13227: END
// every 5 5$20 do
13228: GO 13230
13230: DISABLE
// begin DialogueOn ;
13231: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13235: LD_EXP 10
13239: PPUSH
13240: LD_STRING D12a-Sci-1
13242: PPUSH
13243: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13247: LD_EXP 1
13251: PPUSH
13252: LD_STRING D12a-JMM-1
13254: PPUSH
13255: CALL_OW 88
// DialogueOff ;
13259: CALL_OW 7
// cratesStatus = 1 ;
13263: LD_ADDR_EXP 38
13267: PUSH
13268: LD_INT 1
13270: ST_TO_ADDR
// end ;
13271: END
// every 13 13$0 do
13272: GO 13274
13274: DISABLE
// begin DialogueOn ;
13275: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13279: LD_EXP 10
13283: PPUSH
13284: LD_STRING D12b-Sci-1
13286: PPUSH
13287: CALL_OW 94
// DialogueOff ;
13291: CALL_OW 7
// cratesStatus = 2 ;
13295: LD_ADDR_EXP 38
13299: PUSH
13300: LD_INT 2
13302: ST_TO_ADDR
// end ;
13303: END
// every 32 32$0 do
13304: GO 13306
13306: DISABLE
// begin DialogueOn ;
13307: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
13311: LD_EXP 10
13315: PPUSH
13316: LD_STRING D12c-Sci-1
13318: PPUSH
13319: CALL_OW 94
// DialogueOff ;
13323: CALL_OW 7
// wait ( 3 3$0 ) ;
13327: LD_INT 6300
13329: PPUSH
13330: CALL_OW 67
// DialogueOn ;
13334: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
13338: LD_EXP 10
13342: PPUSH
13343: LD_STRING D12d-Sci-1
13345: PPUSH
13346: CALL_OW 94
// DialogueOff ;
13350: CALL_OW 7
// cratesStatus = 1 ;
13354: LD_ADDR_EXP 38
13358: PUSH
13359: LD_INT 1
13361: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
13362: CALL 19374 0 0
// wait ( 2 2$30 ) ;
13366: LD_INT 5250
13368: PPUSH
13369: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13373: LD_INT 35
13375: PPUSH
13376: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 463
13387: NOT
13388: PUSH
13389: LD_INT 32
13391: PPUSH
13392: LD_INT 81
13394: PUSH
13395: LD_INT 1
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PPUSH
13402: CALL_OW 70
13406: NOT
13407: AND
13408: PUSH
13409: LD_EXP 26
13413: PUSH
13414: LD_INT 6300
13416: LESS
13417: OR
13418: IFFALSE 13373
// PrepareJoan ;
13420: CALL 3034 0 0
// end ;
13424: END
// every 42 42$0 do
13425: GO 13427
13427: DISABLE
// begin DialogueOn ;
13428: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13432: LD_EXP 10
13436: PPUSH
13437: LD_STRING D12e-Sci-1
13439: PPUSH
13440: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13444: LD_EXP 1
13448: PPUSH
13449: LD_STRING D12e-JMM-1
13451: PPUSH
13452: CALL_OW 88
// DialogueOff ;
13456: CALL_OW 7
// cratesStatus := 2 ;
13460: LD_ADDR_EXP 38
13464: PUSH
13465: LD_INT 2
13467: ST_TO_ADDR
// end ; end_of_file
13468: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13469: LD_VAR 0 1
13473: PUSH
13474: LD_INT 1
13476: EQUAL
13477: PUSH
13478: LD_VAR 0 2
13482: PUSH
13483: LD_INT 3
13485: EQUAL
13486: AND
13487: IFFALSE 13497
// contactWithRussian := 1 ;
13489: LD_ADDR_EXP 22
13493: PUSH
13494: LD_INT 1
13496: ST_TO_ADDR
// end ;
13497: PPOPN 2
13499: END
// on BuildingComplete ( building ) do var i ;
13500: LD_INT 0
13502: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
13503: LD_VAR 0 1
13507: PPUSH
13508: CALL_OW 266
13512: PUSH
13513: LD_INT 36
13515: EQUAL
13516: PUSH
13517: LD_VAR 0 1
13521: PPUSH
13522: CALL_OW 255
13526: PUSH
13527: LD_INT 1
13529: EQUAL
13530: AND
13531: PUSH
13532: LD_EXP 23
13536: PUSH
13537: LD_INT 0
13539: EQUAL
13540: AND
13541: IFFALSE 13621
// begin firstTower = 1 ;
13543: LD_ADDR_EXP 23
13547: PUSH
13548: LD_INT 1
13550: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13551: LD_INT 22
13553: PUSH
13554: LD_INT 1
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: LD_INT 21
13563: PUSH
13564: LD_INT 1
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: LD_INT 25
13573: PUSH
13574: LD_INT 3
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 26
13583: PUSH
13584: LD_INT 1
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: PPUSH
13597: CALL_OW 69
13601: PUSH
13602: LD_EXP 1
13606: PUSH
13607: EMPTY
13608: LIST
13609: DIFF
13610: PPUSH
13611: LD_STRING D3b-Mech1-1
13613: PPUSH
13614: LD_STRING D3b-Mech1-1
13616: PPUSH
13617: CALL 6771 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
13621: LD_VAR 0 1
13625: PPUSH
13626: CALL_OW 266
13630: PUSH
13631: LD_INT 0
13633: EQUAL
13634: PUSH
13635: LD_VAR 0 1
13639: PPUSH
13640: CALL_OW 255
13644: PUSH
13645: LD_INT 1
13647: EQUAL
13648: AND
13649: IFFALSE 13663
// SetBName ( building , theta ) ;
13651: LD_VAR 0 1
13655: PPUSH
13656: LD_STRING theta
13658: PPUSH
13659: CALL_OW 500
// if GetSide ( building ) = 3 then
13663: LD_VAR 0 1
13667: PPUSH
13668: CALL_OW 255
13672: PUSH
13673: LD_INT 3
13675: EQUAL
13676: IFFALSE 13716
// begin for i := 1 to 4 do
13678: LD_ADDR_VAR 0 2
13682: PUSH
13683: DOUBLE
13684: LD_INT 1
13686: DEC
13687: ST_TO_ADDR
13688: LD_INT 4
13690: PUSH
13691: FOR_TO
13692: IFFALSE 13714
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13694: LD_ADDR_EXP 31
13698: PUSH
13699: LD_EXP 31
13703: PPUSH
13704: LD_INT 1
13706: PPUSH
13707: CALL_OW 3
13711: ST_TO_ADDR
13712: GO 13691
13714: POP
13715: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13716: LD_VAR 0 1
13720: PPUSH
13721: CALL_OW 255
13725: PUSH
13726: LD_INT 3
13728: EQUAL
13729: PUSH
13730: LD_VAR 0 1
13734: PPUSH
13735: CALL_OW 266
13739: PUSH
13740: LD_INT 0
13742: EQUAL
13743: PUSH
13744: LD_VAR 0 1
13748: PPUSH
13749: CALL_OW 266
13753: PUSH
13754: LD_INT 2
13756: EQUAL
13757: OR
13758: PUSH
13759: LD_VAR 0 1
13763: PPUSH
13764: CALL_OW 266
13768: PUSH
13769: LD_INT 4
13771: EQUAL
13772: OR
13773: PUSH
13774: EMPTY
13775: LIST
13776: AND
13777: IFFALSE 13788
// ComUpgrade ( building ) ;
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 255
13797: PUSH
13798: LD_INT 3
13800: EQUAL
13801: PUSH
13802: LD_VAR 0 1
13806: PPUSH
13807: CALL_OW 266
13811: PUSH
13812: LD_INT 32
13814: EQUAL
13815: AND
13816: IFFALSE 13857
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
13818: LD_VAR 0 1
13822: PPUSH
13823: LD_INT 42
13825: PUSH
13826: LD_INT 43
13828: PUSH
13829: LD_INT 44
13831: PUSH
13832: LD_INT 46
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 1
13843: PPUSH
13844: LD_INT 4
13846: PPUSH
13847: CALL_OW 12
13851: ARRAY
13852: PPUSH
13853: CALL_OW 208
// end ;
13857: PPOPN 2
13859: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
13860: LD_VAR 0 1
13864: PPUSH
13865: CALL 34622 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
13869: LD_VAR 0 1
13873: PUSH
13874: LD_INT 22
13876: PUSH
13877: LD_INT 1
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 21
13886: PUSH
13887: LD_INT 1
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 23
13896: PUSH
13897: LD_INT 1
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: IN
13914: IFFALSE 13930
// killCounter := killCounter + 1 ;
13916: LD_ADDR_EXP 45
13920: PUSH
13921: LD_EXP 45
13925: PUSH
13926: LD_INT 1
13928: PLUS
13929: ST_TO_ADDR
// if unit in ruAttackersInForest then
13930: LD_VAR 0 1
13934: PUSH
13935: LD_EXP 48
13939: IN
13940: IFFALSE 13958
// ruAttackersInForest := ruAttackersInForest diff unit ;
13942: LD_ADDR_EXP 48
13946: PUSH
13947: LD_EXP 48
13951: PUSH
13952: LD_VAR 0 1
13956: DIFF
13957: ST_TO_ADDR
// if unit in ruAttackers then
13958: LD_VAR 0 1
13962: PUSH
13963: LD_EXP 47
13967: IN
13968: IFFALSE 13986
// ruAttackers := ruAttackers diff unit ;
13970: LD_ADDR_EXP 47
13974: PUSH
13975: LD_EXP 47
13979: PUSH
13980: LD_VAR 0 1
13984: DIFF
13985: ST_TO_ADDR
// if unit = JMM then
13986: LD_VAR 0 1
13990: PUSH
13991: LD_EXP 1
13995: EQUAL
13996: IFFALSE 14005
// YouLost ( JMM ) ;
13998: LD_STRING JMM
14000: PPUSH
14001: CALL_OW 104
// if unit = Joan then
14005: LD_VAR 0 1
14009: PUSH
14010: LD_EXP 15
14014: EQUAL
14015: IFFALSE 14025
// JoanStatus := 0 ;
14017: LD_ADDR_EXP 16
14021: PUSH
14022: LD_INT 0
14024: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14025: LD_VAR 0 1
14029: PPUSH
14030: CALL_OW 255
14034: PUSH
14035: LD_INT 1
14037: EQUAL
14038: PUSH
14039: LD_VAR 0 1
14043: PPUSH
14044: CALL_OW 247
14048: PUSH
14049: LD_INT 1
14051: EQUAL
14052: AND
14053: PUSH
14054: LD_VAR 0 1
14058: PPUSH
14059: CALL_OW 248
14063: PUSH
14064: LD_INT 1
14066: EQUAL
14067: AND
14068: IFFALSE 14084
// unitLost = unitLost + 1 ;
14070: LD_ADDR_EXP 30
14074: PUSH
14075: LD_EXP 30
14079: PUSH
14080: LD_INT 1
14082: PLUS
14083: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14084: LD_VAR 0 1
14088: PPUSH
14089: CALL_OW 255
14093: PUSH
14094: LD_INT 3
14096: EQUAL
14097: PUSH
14098: LD_VAR 0 1
14102: PPUSH
14103: CALL_OW 247
14107: PUSH
14108: LD_INT 3
14110: EQUAL
14111: AND
14112: PUSH
14113: LD_VAR 0 1
14117: PPUSH
14118: CALL_OW 266
14122: PUSH
14123: LD_INT 4
14125: PUSH
14126: LD_INT 5
14128: PUSH
14129: LD_INT 32
14131: PUSH
14132: LD_INT 31
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: IN
14141: AND
14142: IFFALSE 14228
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14144: LD_ADDR_EXP 31
14148: PUSH
14149: LD_EXP 31
14153: PUSH
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL_OW 266
14163: ADD
14164: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14165: LD_ADDR_EXP 31
14169: PUSH
14170: LD_EXP 31
14174: PUSH
14175: LD_VAR 0 1
14179: PPUSH
14180: CALL_OW 250
14184: ADD
14185: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14186: LD_ADDR_EXP 31
14190: PUSH
14191: LD_EXP 31
14195: PUSH
14196: LD_VAR 0 1
14200: PPUSH
14201: CALL_OW 251
14205: ADD
14206: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14207: LD_ADDR_EXP 31
14211: PUSH
14212: LD_EXP 31
14216: PUSH
14217: LD_VAR 0 1
14221: PPUSH
14222: CALL_OW 254
14226: ADD
14227: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14228: LD_EXP 46
14232: PUSH
14233: LD_VAR 0 1
14237: PPUSH
14238: CALL_OW 257
14242: PUSH
14243: LD_INT 3
14245: EQUAL
14246: AND
14247: PUSH
14248: LD_VAR 0 1
14252: PPUSH
14253: CALL_OW 255
14257: PUSH
14258: LD_INT 3
14260: EQUAL
14261: AND
14262: PUSH
14263: LD_INT 21
14265: PPUSH
14266: CALL_OW 302
14270: AND
14271: PUSH
14272: LD_INT 21
14274: PPUSH
14275: CALL_OW 255
14279: PUSH
14280: LD_INT 3
14282: EQUAL
14283: AND
14284: IFFALSE 14366
// begin ruMechCounter := ruMechCounter - 1 ;
14286: LD_ADDR_EXP 46
14290: PUSH
14291: LD_EXP 46
14295: PUSH
14296: LD_INT 1
14298: MINUS
14299: ST_TO_ADDR
// uc_side := 3 ;
14300: LD_ADDR_OWVAR 20
14304: PUSH
14305: LD_INT 3
14307: ST_TO_ADDR
// uc_nation := 3 ;
14308: LD_ADDR_OWVAR 21
14312: PUSH
14313: LD_INT 3
14315: ST_TO_ADDR
// hc_gallery :=  ;
14316: LD_ADDR_OWVAR 33
14320: PUSH
14321: LD_STRING 
14323: ST_TO_ADDR
// hc_name :=  ;
14324: LD_ADDR_OWVAR 26
14328: PUSH
14329: LD_STRING 
14331: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
14332: LD_INT 0
14334: PPUSH
14335: LD_EXP 34
14339: PPUSH
14340: LD_EXP 35
14344: PPUSH
14345: CALL_OW 12
14349: PPUSH
14350: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
14354: CALL_OW 44
14358: PPUSH
14359: LD_INT 21
14361: PPUSH
14362: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14366: LD_VAR 0 1
14370: PPUSH
14371: CALL_OW 255
14375: PUSH
14376: LD_INT 3
14378: EQUAL
14379: PUSH
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 264
14389: PUSH
14390: LD_INT 52
14392: EQUAL
14393: AND
14394: PUSH
14395: LD_INT 21
14397: PPUSH
14398: CALL_OW 302
14402: AND
14403: PUSH
14404: LD_INT 21
14406: PPUSH
14407: CALL_OW 255
14411: PUSH
14412: LD_INT 3
14414: EQUAL
14415: AND
14416: IFFALSE 14437
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
14418: LD_INT 21
14420: PPUSH
14421: LD_INT 22
14423: PPUSH
14424: LD_INT 1
14426: PPUSH
14427: LD_INT 1
14429: PPUSH
14430: LD_INT 52
14432: PPUSH
14433: CALL_OW 125
// end ;
14437: PPOPN 1
14439: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14440: LD_INT 0
14442: PPUSH
14443: PPUSH
14444: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14445: LD_VAR 0 1
14449: PPUSH
14450: LD_VAR 0 2
14454: PPUSH
14455: CALL 34744 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
14459: LD_VAR 0 1
14463: PPUSH
14464: CALL_OW 255
14468: PUSH
14469: LD_INT 3
14471: EQUAL
14472: PUSH
14473: LD_VAR 0 1
14477: PPUSH
14478: CALL_OW 264
14482: PUSH
14483: LD_INT 51
14485: PUSH
14486: LD_INT 52
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: IN
14493: NOT
14494: AND
14495: IFFALSE 14526
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
14497: LD_ADDR_EXP 47
14501: PUSH
14502: LD_EXP 47
14506: PPUSH
14507: LD_EXP 47
14511: PUSH
14512: LD_INT 1
14514: PLUS
14515: PPUSH
14516: LD_VAR 0 1
14520: PPUSH
14521: CALL_OW 1
14525: ST_TO_ADDR
// end ;
14526: PPOPN 5
14528: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 255
14538: PUSH
14539: LD_INT 3
14541: EQUAL
14542: IFFALSE 14573
// begin tamedApemans = tamedApemans + 1 ;
14544: LD_ADDR_EXP 32
14548: PUSH
14549: LD_EXP 32
14553: PUSH
14554: LD_INT 1
14556: PLUS
14557: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
14558: LD_VAR 0 1
14562: PPUSH
14563: LD_INT 106
14565: PPUSH
14566: LD_INT 85
14568: PPUSH
14569: CALL_OW 111
// end ; end ;
14573: PPOPN 2
14575: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
14576: LD_VAR 0 2
14580: PPUSH
14581: CALL_OW 255
14585: PUSH
14586: LD_INT 3
14588: EQUAL
14589: PUSH
14590: LD_VAR 0 1
14594: PPUSH
14595: CALL_OW 255
14599: PUSH
14600: LD_INT 3
14602: EQUAL
14603: AND
14604: PUSH
14605: LD_INT 21
14607: PPUSH
14608: CALL_OW 302
14612: AND
14613: IFFALSE 14627
// ComEnterUnit ( human , rufab ) ;
14615: LD_VAR 0 1
14619: PPUSH
14620: LD_INT 21
14622: PPUSH
14623: CALL_OW 120
// end ;
14627: PPOPN 4
14629: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
14630: LD_VAR 0 1
14634: PUSH
14635: LD_INT 21
14637: EQUAL
14638: PUSH
14639: LD_VAR 0 2
14643: PPUSH
14644: CALL_OW 255
14648: PUSH
14649: LD_INT 3
14651: EQUAL
14652: AND
14653: IFFALSE 14667
// SetLives ( human , 1000 ) ;
14655: LD_VAR 0 2
14659: PPUSH
14660: LD_INT 1000
14662: PPUSH
14663: CALL_OW 234
// end ;
14667: PPOPN 2
14669: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14670: LD_VAR 0 1
14674: PPUSH
14675: CALL 34728 0 1
// end ; end_of_file
14679: PPOPN 1
14681: END
// every 0 0$30 trigger cratesStatus = 1 do
14682: LD_EXP 38
14686: PUSH
14687: LD_INT 1
14689: EQUAL
14690: IFFALSE 14743
14692: GO 14694
14694: DISABLE
// begin enable ;
14695: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
14696: LD_INT 350
14698: PUSH
14699: LD_INT 875
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 1
14708: PPUSH
14709: LD_INT 2
14711: PPUSH
14712: CALL_OW 12
14716: ARRAY
14717: PPUSH
14718: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
14722: LD_INT 1
14724: PPUSH
14725: LD_INT 5
14727: PPUSH
14728: CALL_OW 12
14732: PPUSH
14733: LD_INT 7
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: CALL_OW 55
// end ;
14743: END
// every 1 1$0 trigger cratesStatus = 2 do
14744: LD_EXP 38
14748: PUSH
14749: LD_INT 2
14751: EQUAL
14752: IFFALSE 14835
14754: GO 14756
14756: DISABLE
// begin enable ;
14757: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
14758: LD_INT 3150
14760: PUSH
14761: LD_INT 4550
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: LD_INT 1
14770: PPUSH
14771: LD_INT 2
14773: PPUSH
14774: CALL_OW 12
14778: ARRAY
14779: PPUSH
14780: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
14784: LD_INT 2
14786: PUSH
14787: LD_INT 5
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 1
14796: PPUSH
14797: LD_INT 2
14799: PPUSH
14800: CALL_OW 12
14804: ARRAY
14805: PPUSH
14806: LD_INT 6
14808: PUSH
14809: LD_INT 7
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 1
14818: PPUSH
14819: LD_INT 2
14821: PPUSH
14822: CALL_OW 12
14826: ARRAY
14827: PPUSH
14828: LD_INT 1
14830: PPUSH
14831: CALL_OW 55
// end ;
14835: END
// every 0 0$30 + 0 0$10 do
14836: GO 14838
14838: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14839: LD_INT 4
14841: PUSH
14842: LD_INT 5
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 1
14851: PPUSH
14852: LD_INT 2
14854: PPUSH
14855: CALL_OW 12
14859: ARRAY
14860: PPUSH
14861: LD_INT 7
14863: PPUSH
14864: LD_INT 1
14866: PPUSH
14867: CALL_OW 55
// Wait ( 0 0$15 ) ;
14871: LD_INT 525
14873: PPUSH
14874: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14878: LD_INT 4
14880: PUSH
14881: LD_INT 5
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 2
14893: PPUSH
14894: CALL_OW 12
14898: ARRAY
14899: PPUSH
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 1
14905: PPUSH
14906: CALL_OW 55
// Wait ( 0 0$20 ) ;
14910: LD_INT 700
14912: PPUSH
14913: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14917: LD_INT 4
14919: PUSH
14920: LD_INT 5
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 1
14929: PPUSH
14930: LD_INT 2
14932: PPUSH
14933: CALL_OW 12
14937: ARRAY
14938: PPUSH
14939: LD_INT 7
14941: PPUSH
14942: LD_INT 1
14944: PPUSH
14945: CALL_OW 55
// end ; end_of_file
14949: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
14950: LD_EXP 24
14954: PUSH
14955: LD_INT 1
14957: EQUAL
14958: IFFALSE 15251
14960: GO 14962
14962: DISABLE
14963: LD_INT 0
14965: PPUSH
14966: PPUSH
14967: PPUSH
// begin enable ;
14968: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_INT 22
14976: PUSH
14977: LD_INT 1
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 21
14986: PUSH
14987: LD_INT 3
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: LD_INT 30
14999: PUSH
15000: LD_INT 0
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 30
15009: PUSH
15010: LD_INT 1
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 69
15031: ST_TO_ADDR
// for i in tmp do
15032: LD_ADDR_VAR 0 1
15036: PUSH
15037: LD_VAR 0 2
15041: PUSH
15042: FOR_IN
15043: IFFALSE 15076
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: LD_VAR 0 3
15054: PUSH
15055: LD_VAR 0 1
15059: PPUSH
15060: CALL_OW 274
15064: PPUSH
15065: LD_INT 1
15067: PPUSH
15068: CALL_OW 275
15072: PLUS
15073: ST_TO_ADDR
15074: GO 15042
15076: POP
15077: POP
// strings = [ ] ;
15078: LD_ADDR_EXP 27
15082: PUSH
15083: EMPTY
15084: ST_TO_ADDR
// if tmp = 0 then
15085: LD_VAR 0 2
15089: PUSH
15090: LD_INT 0
15092: EQUAL
15093: IFFALSE 15118
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15095: LD_ADDR_EXP 27
15099: PUSH
15100: LD_EXP 27
15104: PUSH
15105: LD_STRING #Am06-1
15107: PUSH
15108: LD_EXP 25
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: ADD
15117: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15118: LD_VAR 0 2
15122: PUSH
15123: LD_EXP 25
15127: PUSH
15128: LD_VAR 0 3
15132: GREATER
15133: AND
15134: IFFALSE 15165
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15136: LD_ADDR_EXP 27
15140: PUSH
15141: LD_EXP 27
15145: PUSH
15146: LD_STRING #Am06-1
15148: PUSH
15149: LD_EXP 25
15153: PUSH
15154: LD_VAR 0 3
15158: MINUS
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: ADD
15164: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
15165: LD_VAR 0 2
15169: PUSH
15170: LD_EXP 25
15174: PUSH
15175: LD_VAR 0 3
15179: LESSEQUAL
15180: AND
15181: IFFALSE 15204
// strings = strings ^ [ #Am06-1 , 0 ] ;
15183: LD_ADDR_EXP 27
15187: PUSH
15188: LD_EXP 27
15192: PUSH
15193: LD_STRING #Am06-1
15195: PUSH
15196: LD_INT 0
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: ADD
15203: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15204: LD_ADDR_EXP 26
15208: PUSH
15209: LD_EXP 26
15213: PUSH
15214: LD_INT 35
15216: MINUS
15217: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15218: LD_ADDR_EXP 27
15222: PUSH
15223: LD_EXP 27
15227: PUSH
15228: LD_STRING #Am06-2
15230: PUSH
15231: LD_EXP 26
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: ADD
15240: ST_TO_ADDR
// display_strings = strings ;
15241: LD_ADDR_OWVAR 47
15245: PUSH
15246: LD_EXP 27
15250: ST_TO_ADDR
// end ; end_of_file
15251: PPOPN 3
15253: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
15254: LD_INT 0
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15263: LD_ADDR_VAR 0 3
15267: PUSH
15268: LD_INT 22
15270: PUSH
15271: LD_INT 1
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: LD_INT 30
15283: PUSH
15284: LD_INT 0
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 30
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: LIST
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PPUSH
15310: CALL_OW 69
15314: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15315: LD_INT 35
15317: PPUSH
15318: CALL_OW 67
// until depot ;
15322: LD_VAR 0 3
15326: IFFALSE 15263
// repeat wait ( 0 0$1 ) ;
15328: LD_INT 35
15330: PPUSH
15331: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
15335: LD_ADDR_VAR 0 4
15339: PUSH
15340: LD_INT 22
15342: PUSH
15343: LD_INT 1
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 91
15352: PUSH
15353: LD_VAR 0 3
15357: PUSH
15358: LD_INT 1
15360: ARRAY
15361: PUSH
15362: LD_INT 15
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 21
15372: PUSH
15373: LD_INT 1
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 2
15382: PUSH
15383: LD_INT 25
15385: PUSH
15386: LD_INT 1
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 25
15395: PUSH
15396: LD_INT 2
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 25
15405: PUSH
15406: LD_INT 3
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: LD_INT 25
15415: PUSH
15416: LD_INT 4
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 3
15432: PUSH
15433: LD_INT 54
15435: PUSH
15436: EMPTY
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 3
15445: PUSH
15446: LD_INT 55
15448: PUSH
15449: EMPTY
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: PPUSH
15464: CALL_OW 69
15468: PUSH
15469: LD_EXP 2
15473: PUSH
15474: LD_EXP 3
15478: PUSH
15479: LD_EXP 4
15483: PUSH
15484: LD_EXP 5
15488: PUSH
15489: LD_EXP 7
15493: PUSH
15494: LD_EXP 8
15498: PUSH
15499: LD_EXP 9
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: PUSH
15513: LD_EXP 44
15517: ADD
15518: DIFF
15519: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
15520: LD_VAR 0 4
15524: PUSH
15525: LD_INT 1
15527: PPUSH
15528: CALL_OW 463
15532: NOT
15533: AND
15534: IFFALSE 15328
// tmp := tmp [ rand ( 1 , tmp ) ] ;
15536: LD_ADDR_VAR 0 4
15540: PUSH
15541: LD_VAR 0 4
15545: PUSH
15546: LD_INT 1
15548: PPUSH
15549: LD_VAR 0 4
15553: PPUSH
15554: CALL_OW 12
15558: ARRAY
15559: ST_TO_ADDR
// blockSpawn := 1 ;
15560: LD_ADDR_EXP 29
15564: PUSH
15565: LD_INT 1
15567: ST_TO_ADDR
// uc_side := 2 ;
15568: LD_ADDR_OWVAR 20
15572: PUSH
15573: LD_INT 2
15575: ST_TO_ADDR
// uc_nation := 2 ;
15576: LD_ADDR_OWVAR 21
15580: PUSH
15581: LD_INT 2
15583: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
15584: LD_ADDR_EXP 19
15588: PUSH
15589: LD_STRING Kurt
15591: PPUSH
15592: LD_INT 0
15594: PPUSH
15595: LD_STRING 
15597: PPUSH
15598: CALL 39262 0 3
15602: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
15603: LD_EXP 19
15607: PPUSH
15608: LD_VAR 0 4
15612: PPUSH
15613: CALL_OW 250
15617: PPUSH
15618: LD_VAR 0 4
15622: PPUSH
15623: CALL_OW 251
15627: PPUSH
15628: LD_INT 5
15630: PPUSH
15631: LD_INT 1
15633: PPUSH
15634: CALL_OW 50
// InGameOn ;
15638: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15642: LD_EXP 19
15646: PPUSH
15647: CALL_OW 87
// wait ( 0 0$2 ) ;
15651: LD_INT 70
15653: PPUSH
15654: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
15658: LD_EXP 19
15662: PPUSH
15663: LD_VAR 0 4
15667: PPUSH
15668: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
15672: LD_VAR 0 4
15676: PPUSH
15677: LD_EXP 19
15681: PPUSH
15682: CALL_OW 112
// wait ( 0 0$1 ) ;
15686: LD_INT 35
15688: PPUSH
15689: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
15693: LD_VAR 0 4
15697: PPUSH
15698: LD_EXP 19
15702: PPUSH
15703: CALL_OW 119
// DialogueOn ;
15707: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15711: LD_EXP 19
15715: PPUSH
15716: LD_STRING D2-Kurt-1
15718: PPUSH
15719: CALL_OW 88
// if tmp = JMM then
15723: LD_VAR 0 4
15727: PUSH
15728: LD_EXP 1
15732: EQUAL
15733: IFFALSE 15825
// begin Say ( JMM , D2-JMM-1 ) ;
15735: LD_EXP 1
15739: PPUSH
15740: LD_STRING D2-JMM-1
15742: PPUSH
15743: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15747: LD_EXP 19
15751: PPUSH
15752: LD_STRING D2-Kurt-2
15754: PPUSH
15755: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15759: LD_EXP 1
15763: PPUSH
15764: LD_STRING D2-JMM-2
15766: PPUSH
15767: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15771: LD_EXP 19
15775: PPUSH
15776: LD_STRING D2-Kurt-3
15778: PPUSH
15779: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
15783: LD_EXP 1
15787: PPUSH
15788: LD_STRING D2-JMM-3
15790: PPUSH
15791: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15795: LD_EXP 19
15799: PPUSH
15800: LD_STRING D2-Kurt-4
15802: PPUSH
15803: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
15807: LD_EXP 1
15811: PPUSH
15812: LD_STRING D2-JMM-4
15814: PPUSH
15815: CALL_OW 88
// DialogueOff ;
15819: CALL_OW 7
// end else
15823: GO 16053
// begin if GetSex ( tmp ) = 1 then
15825: LD_VAR 0 4
15829: PPUSH
15830: CALL_OW 258
15834: PUSH
15835: LD_INT 1
15837: EQUAL
15838: IFFALSE 15854
// Say ( tmp , D2-Sol1-1 ) else
15840: LD_VAR 0 4
15844: PPUSH
15845: LD_STRING D2-Sol1-1
15847: PPUSH
15848: CALL_OW 88
15852: GO 15866
// Say ( tmp , D2-FSol1-1 ) ;
15854: LD_VAR 0 4
15858: PPUSH
15859: LD_STRING D2-FSol1-1
15861: PPUSH
15862: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15866: LD_EXP 19
15870: PPUSH
15871: LD_STRING D2-Kurt-2
15873: PPUSH
15874: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15878: LD_VAR 0 4
15882: PPUSH
15883: CALL_OW 258
15887: PUSH
15888: LD_INT 1
15890: EQUAL
15891: IFFALSE 15907
// Say ( tmp , D2-Sol1-2 ) else
15893: LD_VAR 0 4
15897: PPUSH
15898: LD_STRING D2-Sol1-2
15900: PPUSH
15901: CALL_OW 88
15905: GO 15919
// Say ( tmp , D2-FSol1-2 ) ;
15907: LD_VAR 0 4
15911: PPUSH
15912: LD_STRING D2-FSol1-2
15914: PPUSH
15915: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15919: LD_EXP 19
15923: PPUSH
15924: LD_STRING D2-Kurt-3
15926: PPUSH
15927: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15931: LD_VAR 0 4
15935: PPUSH
15936: CALL_OW 258
15940: PUSH
15941: LD_INT 1
15943: EQUAL
15944: IFFALSE 15960
// Say ( tmp , D2-Sol1-3 ) else
15946: LD_VAR 0 4
15950: PPUSH
15951: LD_STRING D2-Sol1-3
15953: PPUSH
15954: CALL_OW 88
15958: GO 15972
// Say ( tmp , D2-FSol1-3 ) ;
15960: LD_VAR 0 4
15964: PPUSH
15965: LD_STRING D2-FSol1-3
15967: PPUSH
15968: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15972: LD_EXP 19
15976: PPUSH
15977: LD_STRING D2-Kurt-4
15979: PPUSH
15980: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15984: LD_VAR 0 4
15988: PPUSH
15989: CALL_OW 258
15993: PUSH
15994: LD_INT 1
15996: EQUAL
15997: IFFALSE 16025
// begin Say ( tmp , D2-Sol1-4 ) ;
15999: LD_VAR 0 4
16003: PPUSH
16004: LD_STRING D2-Sol1-4
16006: PPUSH
16007: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
16011: LD_VAR 0 4
16015: PPUSH
16016: LD_STRING D2-Sol1-5
16018: PPUSH
16019: CALL_OW 88
// end else
16023: GO 16049
// begin Say ( tmp , D2-FSol1-4 ) ;
16025: LD_VAR 0 4
16029: PPUSH
16030: LD_STRING D2-FSol1-4
16032: PPUSH
16033: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16037: LD_VAR 0 4
16041: PPUSH
16042: LD_STRING D2-FSol1-5
16044: PPUSH
16045: CALL_OW 88
// end ; DialogueOff ;
16049: CALL_OW 7
// end ; dec := ShowQuery1 ;
16053: LD_ADDR_VAR 0 6
16057: PUSH
16058: CALL 7256 0 0
16062: ST_TO_ADDR
// if dec = 1 then
16063: LD_VAR 0 6
16067: PUSH
16068: LD_INT 1
16070: EQUAL
16071: IFFALSE 16133
// begin DialogueOn ;
16073: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16077: LD_EXP 19
16081: PPUSH
16082: LD_STRING D2a-Kurt-1
16084: PPUSH
16085: CALL_OW 88
// DialogueOff ;
16089: CALL_OW 7
// InGameOff ;
16093: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16097: LD_INT 1
16099: PPUSH
16100: LD_INT 2
16102: PPUSH
16103: LD_INT 2
16105: PPUSH
16106: LD_INT 1
16108: PPUSH
16109: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16113: LD_EXP 19
16117: PPUSH
16118: LD_INT 8
16120: PPUSH
16121: CALL_OW 113
// readyToEscape := 1 ;
16125: LD_ADDR_EXP 21
16129: PUSH
16130: LD_INT 1
16132: ST_TO_ADDR
// end ; if dec = 2 then
16133: LD_VAR 0 6
16137: PUSH
16138: LD_INT 2
16140: EQUAL
16141: IFFALSE 16609
// begin DialogueOn ;
16143: CALL_OW 6
// if tmp = JMM then
16147: LD_VAR 0 4
16151: PUSH
16152: LD_EXP 1
16156: EQUAL
16157: IFFALSE 16213
// begin Say ( JMM , D2b-JMM-1 ) ;
16159: LD_EXP 1
16163: PPUSH
16164: LD_STRING D2b-JMM-1
16166: PPUSH
16167: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16171: LD_EXP 19
16175: PPUSH
16176: LD_STRING D2b-Kurt-1
16178: PPUSH
16179: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16183: LD_EXP 1
16187: PPUSH
16188: LD_STRING D2b-JMM-2
16190: PPUSH
16191: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16195: LD_EXP 19
16199: PPUSH
16200: LD_STRING D2b-Kurt-2
16202: PPUSH
16203: CALL_OW 88
// DialogueOff ;
16207: CALL_OW 7
// end else
16211: GO 16364
// begin if GetSex ( tmp ) = 1 then
16213: LD_VAR 0 4
16217: PPUSH
16218: CALL_OW 258
16222: PUSH
16223: LD_INT 1
16225: EQUAL
16226: IFFALSE 16242
// Say ( tmp , D2b-Sol1-1 ) else
16228: LD_VAR 0 4
16232: PPUSH
16233: LD_STRING D2b-Sol1-1
16235: PPUSH
16236: CALL_OW 88
16240: GO 16254
// Say ( tmp , D2b-FSol1-1 ) ;
16242: LD_VAR 0 4
16246: PPUSH
16247: LD_STRING D2b-FSol1-1
16249: PPUSH
16250: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16254: LD_EXP 19
16258: PPUSH
16259: LD_STRING D2b-Kurt-1
16261: PPUSH
16262: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16266: LD_VAR 0 4
16270: PPUSH
16271: CALL_OW 258
16275: PUSH
16276: LD_INT 1
16278: EQUAL
16279: IFFALSE 16295
// Say ( tmp , D2b-Sol1-2 ) else
16281: LD_VAR 0 4
16285: PPUSH
16286: LD_STRING D2b-Sol1-2
16288: PPUSH
16289: CALL_OW 88
16293: GO 16307
// Say ( tmp , D2b-FSol1-2 ) ;
16295: LD_VAR 0 4
16299: PPUSH
16300: LD_STRING D2b-FSol1-2
16302: PPUSH
16303: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16307: LD_EXP 19
16311: PPUSH
16312: LD_STRING D2b-Kurt-2
16314: PPUSH
16315: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16319: LD_VAR 0 4
16323: PPUSH
16324: CALL_OW 258
16328: PUSH
16329: LD_INT 1
16331: EQUAL
16332: IFFALSE 16348
// Say ( tmp , D2c-Sol1-2 ) else
16334: LD_VAR 0 4
16338: PPUSH
16339: LD_STRING D2c-Sol1-2
16341: PPUSH
16342: CALL_OW 88
16346: GO 16360
// Say ( tmp , D2c-FSol1-2 ) ;
16348: LD_VAR 0 4
16352: PPUSH
16353: LD_STRING D2c-FSol1-2
16355: PPUSH
16356: CALL_OW 88
// DialogueOff ;
16360: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
16364: LD_ADDR_VAR 0 7
16368: PUSH
16369: CALL 7277 0 0
16373: ST_TO_ADDR
// if dec2 = 1 then
16374: LD_VAR 0 7
16378: PUSH
16379: LD_INT 1
16381: EQUAL
16382: IFFALSE 16444
// begin DialogueOn ;
16384: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16388: LD_EXP 19
16392: PPUSH
16393: LD_STRING D2a-Kurt-1
16395: PPUSH
16396: CALL_OW 88
// DialogueOff ;
16400: CALL_OW 7
// InGameOff ;
16404: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16408: LD_INT 1
16410: PPUSH
16411: LD_INT 2
16413: PPUSH
16414: LD_INT 2
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16424: LD_EXP 19
16428: PPUSH
16429: LD_INT 8
16431: PPUSH
16432: CALL_OW 113
// readyToEscape := 1 ;
16436: LD_ADDR_EXP 21
16440: PUSH
16441: LD_INT 1
16443: ST_TO_ADDR
// end ; if dec2 = 2 then
16444: LD_VAR 0 7
16448: PUSH
16449: LD_INT 2
16451: EQUAL
16452: IFFALSE 16609
// begin if tmp = JMM then
16454: LD_VAR 0 4
16458: PUSH
16459: LD_EXP 1
16463: EQUAL
16464: IFFALSE 16524
// begin DialogueOn ;
16466: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16470: LD_EXP 1
16474: PPUSH
16475: LD_STRING D2c-JMM-1
16477: PPUSH
16478: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16482: LD_EXP 19
16486: PPUSH
16487: LD_STRING D2c-Kurt-1
16489: PPUSH
16490: CALL_OW 88
// DialogueOff ;
16494: CALL_OW 7
// InGameOff ;
16498: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16502: LD_EXP 19
16506: PPUSH
16507: LD_INT 8
16509: PPUSH
16510: CALL_OW 113
// readyToEscape := 1 ;
16514: LD_ADDR_EXP 21
16518: PUSH
16519: LD_INT 1
16521: ST_TO_ADDR
// end else
16522: GO 16609
// begin DialogueOn ;
16524: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16528: LD_VAR 0 4
16532: PPUSH
16533: CALL_OW 258
16537: PUSH
16538: LD_INT 1
16540: EQUAL
16541: IFFALSE 16557
// Say ( tmp , D2c-Sol1-1 ) else
16543: LD_VAR 0 4
16547: PPUSH
16548: LD_STRING D2c-Sol1-1
16550: PPUSH
16551: CALL_OW 88
16555: GO 16569
// Say ( tmp , D2c-FSol1-1 ) ;
16557: LD_VAR 0 4
16561: PPUSH
16562: LD_STRING D2c-FSol1-1
16564: PPUSH
16565: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16569: LD_EXP 19
16573: PPUSH
16574: LD_STRING D2c-Kurt-1
16576: PPUSH
16577: CALL_OW 88
// DialogueOff ;
16581: CALL_OW 7
// InGameOff ;
16585: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16589: LD_EXP 19
16593: PPUSH
16594: LD_INT 8
16596: PPUSH
16597: CALL_OW 113
// readyToEscape := 1 ;
16601: LD_ADDR_EXP 21
16605: PUSH
16606: LD_INT 1
16608: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
16609: LD_VAR 0 6
16613: PUSH
16614: LD_INT 3
16616: EQUAL
16617: IFFALSE 16778
// begin DialogueOn ;
16619: CALL_OW 6
// if tmp = JMM then
16623: LD_VAR 0 4
16627: PUSH
16628: LD_EXP 1
16632: EQUAL
16633: IFFALSE 16693
// begin DialogueOn ;
16635: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16639: LD_EXP 1
16643: PPUSH
16644: LD_STRING D2c-JMM-1
16646: PPUSH
16647: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16651: LD_EXP 19
16655: PPUSH
16656: LD_STRING D2c-Kurt-1
16658: PPUSH
16659: CALL_OW 88
// DialogueOff ;
16663: CALL_OW 7
// InGameOff ;
16667: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16671: LD_EXP 19
16675: PPUSH
16676: LD_INT 8
16678: PPUSH
16679: CALL_OW 113
// readyToEscape := 1 ;
16683: LD_ADDR_EXP 21
16687: PUSH
16688: LD_INT 1
16690: ST_TO_ADDR
// end else
16691: GO 16778
// begin DialogueOn ;
16693: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16697: LD_VAR 0 4
16701: PPUSH
16702: CALL_OW 258
16706: PUSH
16707: LD_INT 1
16709: EQUAL
16710: IFFALSE 16726
// Say ( tmp , D2c-Sol1-1 ) else
16712: LD_VAR 0 4
16716: PPUSH
16717: LD_STRING D2c-Sol1-1
16719: PPUSH
16720: CALL_OW 88
16724: GO 16738
// Say ( tmp , D2c-FSol1-1 ) ;
16726: LD_VAR 0 4
16730: PPUSH
16731: LD_STRING D2c-FSol1-1
16733: PPUSH
16734: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16738: LD_EXP 19
16742: PPUSH
16743: LD_STRING D2c-Kurt-1
16745: PPUSH
16746: CALL_OW 88
// DialogueOff ;
16750: CALL_OW 7
// InGameOff ;
16754: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16758: LD_EXP 19
16762: PPUSH
16763: LD_INT 8
16765: PPUSH
16766: CALL_OW 113
// readyToEscape := 1 ;
16770: LD_ADDR_EXP 21
16774: PUSH
16775: LD_INT 1
16777: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
16778: LD_ADDR_EXP 29
16782: PUSH
16783: LD_INT 0
16785: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16786: LD_INT 35
16788: PPUSH
16789: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
16793: LD_EXP 19
16797: PPUSH
16798: LD_INT 8
16800: PPUSH
16801: CALL_OW 308
16805: PUSH
16806: LD_EXP 21
16810: AND
16811: PUSH
16812: LD_EXP 19
16816: PPUSH
16817: CALL_OW 301
16821: OR
16822: IFFALSE 16786
// if IsDead ( Kurt ) then
16824: LD_EXP 19
16828: PPUSH
16829: CALL_OW 301
16833: IFFALSE 16837
// exit ;
16835: GO 16892
// RemoveUnit ( Kurt ) ;
16837: LD_EXP 19
16841: PPUSH
16842: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
16846: LD_EXP 19
16850: PPUSH
16851: LD_STRING Kurt
16853: PPUSH
16854: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
16858: LD_INT 1
16860: PPUSH
16861: LD_INT 2
16863: PPUSH
16864: CALL_OW 81
16868: PUSH
16869: LD_INT 0
16871: EQUAL
16872: IFFALSE 16884
// kurtStatus = 1 else
16874: LD_ADDR_EXP 20
16878: PUSH
16879: LD_INT 1
16881: ST_TO_ADDR
16882: GO 16892
// kurtStatus = 2 ;
16884: LD_ADDR_EXP 20
16888: PUSH
16889: LD_INT 2
16891: ST_TO_ADDR
// end ; end_of_file
16892: LD_VAR 0 1
16896: RET
// every 0 0$2 do
16897: GO 16899
16899: DISABLE
// begin enable ;
16900: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
16901: LD_INT 3
16903: PPUSH
16904: LD_INT 2
16906: PPUSH
16907: LD_INT 10
16909: PPUSH
16910: LD_EXP 31
16914: PPUSH
16915: CALL 7688 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
16919: LD_INT 3
16921: PPUSH
16922: LD_INT 12
16924: PPUSH
16925: LD_EXP 31
16929: PPUSH
16930: CALL 9291 0 3
// if disableHealAI = 0 then
16934: LD_EXP 33
16938: PUSH
16939: LD_INT 0
16941: EQUAL
16942: IFFALSE 16963
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
16944: LD_INT 3
16946: PPUSH
16947: LD_INT 9
16949: PPUSH
16950: LD_INT 10
16952: PPUSH
16953: LD_INT 32
16955: PUSH
16956: EMPTY
16957: LIST
16958: PPUSH
16959: CALL 8055 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
16963: LD_INT 3
16965: PPUSH
16966: LD_INT 51
16968: PPUSH
16969: LD_INT 6
16971: PPUSH
16972: CALL 8744 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
16976: LD_INT 2
16978: PPUSH
16979: CALL_OW 303
16983: PUSH
16984: LD_INT 2
16986: PPUSH
16987: CALL_OW 255
16991: PUSH
16992: LD_INT 1
16994: EQUAL
16995: OR
16996: IFFALSE 17010
// DefendDepot ( 3 , rudepo ) else
16998: LD_INT 3
17000: PPUSH
17001: LD_INT 2
17003: PPUSH
17004: CALL 8571 0 2
17008: GO 17020
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17010: LD_INT 3
17012: PPUSH
17013: LD_INT 10
17015: PPUSH
17016: CALL 8862 0 2
// end ;
17020: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17021: LD_INT 22
17023: PUSH
17024: LD_INT 3
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 21
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 55
17043: PUSH
17044: EMPTY
17045: LIST
17046: PUSH
17047: LD_INT 3
17049: PUSH
17050: LD_INT 34
17052: PUSH
17053: LD_INT 51
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: PPUSH
17070: CALL_OW 69
17074: PUSH
17075: LD_INT 0
17077: EQUAL
17078: PUSH
17079: LD_INT 21
17081: PPUSH
17082: CALL_OW 255
17086: PUSH
17087: LD_INT 3
17089: EQUAL
17090: AND
17091: PUSH
17092: LD_INT 21
17094: PPUSH
17095: CALL_OW 302
17099: AND
17100: PUSH
17101: LD_INT 2
17103: PPUSH
17104: CALL_OW 255
17108: PUSH
17109: LD_INT 3
17111: EQUAL
17112: AND
17113: PUSH
17114: LD_INT 2
17116: PPUSH
17117: CALL_OW 302
17121: AND
17122: PUSH
17123: LD_INT 21
17125: PPUSH
17126: CALL_OW 313
17130: AND
17131: PUSH
17132: LD_EXP 47
17136: PUSH
17137: LD_INT 4
17139: PUSH
17140: LD_INT 5
17142: PUSH
17143: LD_INT 6
17145: PUSH
17146: LD_INT 6
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: PUSH
17155: LD_OWVAR 67
17159: ARRAY
17160: LESS
17161: AND
17162: IFFALSE 17383
17164: GO 17166
17166: DISABLE
// begin enable ;
17167: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
17168: LD_INT 2
17170: PPUSH
17171: CALL_OW 274
17175: PPUSH
17176: LD_INT 1
17178: PPUSH
17179: LD_INT 2000
17181: PPUSH
17182: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
17186: LD_INT 3
17188: PPUSH
17189: LD_INT 21
17191: PPUSH
17192: LD_INT 4
17194: PUSH
17195: LD_INT 5
17197: PUSH
17198: LD_INT 6
17200: PUSH
17201: LD_INT 6
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: PUSH
17210: LD_OWVAR 67
17214: ARRAY
17215: PUSH
17216: LD_EXP 47
17220: MINUS
17221: PPUSH
17222: LD_INT 43
17224: PUSH
17225: LD_INT 43
17227: PUSH
17228: LD_INT 44
17230: PUSH
17231: LD_INT 44
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 43
17242: PUSH
17243: LD_INT 43
17245: PUSH
17246: LD_INT 43
17248: PUSH
17249: LD_INT 44
17251: PUSH
17252: LD_INT 44
17254: PUSH
17255: LD_INT 46
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 43
17268: PUSH
17269: LD_INT 43
17271: PUSH
17272: LD_INT 43
17274: PUSH
17275: LD_INT 44
17277: PUSH
17278: LD_INT 44
17280: PUSH
17281: LD_INT 46
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 43
17294: PUSH
17295: LD_INT 43
17297: PUSH
17298: LD_INT 44
17300: PUSH
17301: LD_INT 46
17303: PUSH
17304: LD_INT 46
17306: PUSH
17307: LD_INT 46
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: PUSH
17324: LD_OWVAR 67
17328: ARRAY
17329: PPUSH
17330: LD_INT 1
17332: PPUSH
17333: LD_INT 1
17335: PPUSH
17336: LD_INT 22
17338: PUSH
17339: LD_INT 22
17341: PUSH
17342: LD_INT 24
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 1
17351: PPUSH
17352: LD_INT 2
17354: PPUSH
17355: CALL_OW 12
17359: ARRAY
17360: PUSH
17361: LD_INT 24
17363: PUSH
17364: LD_INT 24
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: PUSH
17373: LD_OWVAR 67
17377: ARRAY
17378: PPUSH
17379: CALL 7534 0 7
// end ;
17383: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17384: LD_INT 17
17386: PPUSH
17387: CALL_OW 255
17391: PUSH
17392: LD_INT 3
17394: EQUAL
17395: PUSH
17396: LD_INT 17
17398: PPUSH
17399: CALL_OW 302
17403: AND
17404: PUSH
17405: LD_INT 2
17407: PPUSH
17408: CALL_OW 255
17412: PUSH
17413: LD_INT 3
17415: EQUAL
17416: AND
17417: PUSH
17418: LD_INT 2
17420: PPUSH
17421: CALL_OW 302
17425: AND
17426: PUSH
17427: LD_EXP 47
17431: PUSH
17432: LD_INT 4
17434: PUSH
17435: LD_INT 5
17437: PUSH
17438: LD_INT 6
17440: PUSH
17441: LD_INT 7
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: PUSH
17450: LD_OWVAR 67
17454: ARRAY
17455: LESS
17456: AND
17457: IFFALSE 17505
17459: GO 17461
17461: DISABLE
// begin enable ;
17462: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17463: LD_INT 17
17465: PPUSH
17466: LD_INT 22
17468: PPUSH
17469: LD_INT 1
17471: PPUSH
17472: LD_INT 1
17474: PPUSH
17475: LD_INT 42
17477: PUSH
17478: LD_INT 43
17480: PUSH
17481: LD_INT 44
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 1
17491: PPUSH
17492: LD_INT 3
17494: PPUSH
17495: CALL_OW 12
17499: ARRAY
17500: PPUSH
17501: CALL_OW 185
// end ;
17505: END
// every 2 2$0 do var i , j ;
17506: GO 17508
17508: DISABLE
17509: LD_INT 0
17511: PPUSH
17512: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17513: LD_INT 14700
17515: PUSH
17516: LD_INT 33600
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 1
17525: PPUSH
17526: LD_INT 2
17528: PPUSH
17529: CALL_OW 12
17533: ARRAY
17534: PPUSH
17535: CALL_OW 67
// disableHealAI = 1 ;
17539: LD_ADDR_EXP 33
17543: PUSH
17544: LD_INT 1
17546: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17547: LD_ADDR_VAR 0 1
17551: PUSH
17552: LD_INT 22
17554: PUSH
17555: LD_INT 3
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 25
17564: PUSH
17565: LD_INT 4
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 69
17580: PUSH
17581: FOR_IN
17582: IFFALSE 17595
// ComExitBuilding ( i ) ;
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 122
17593: GO 17581
17595: POP
17596: POP
// wait ( 0 0$1 ) ;
17597: LD_INT 35
17599: PPUSH
17600: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17604: LD_INT 35
17606: PPUSH
17607: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17611: LD_ADDR_VAR 0 1
17615: PUSH
17616: LD_INT 22
17618: PUSH
17619: LD_INT 3
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 25
17628: PUSH
17629: LD_INT 4
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PPUSH
17640: CALL_OW 69
17644: PUSH
17645: FOR_IN
17646: IFFALSE 17723
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17648: LD_ADDR_VAR 0 2
17652: PUSH
17653: LD_INT 17
17655: PPUSH
17656: LD_INT 22
17658: PUSH
17659: LD_INT 0
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 25
17668: PUSH
17669: LD_INT 12
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PPUSH
17680: CALL_OW 70
17684: PUSH
17685: FOR_IN
17686: IFFALSE 17719
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17688: LD_VAR 0 1
17692: PPUSH
17693: LD_VAR 0 2
17697: PPUSH
17698: CALL_OW 250
17702: PPUSH
17703: LD_VAR 0 2
17707: PPUSH
17708: CALL_OW 251
17712: PPUSH
17713: CALL_OW 191
17717: GO 17685
17719: POP
17720: POP
17721: GO 17645
17723: POP
17724: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17725: LD_INT 22
17727: PUSH
17728: LD_INT 3
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 25
17737: PUSH
17738: LD_INT 4
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PPUSH
17749: CALL_OW 69
17753: PUSH
17754: LD_INT 0
17756: EQUAL
17757: PUSH
17758: LD_EXP 32
17762: PUSH
17763: LD_INT 6
17765: PUSH
17766: LD_INT 7
17768: PUSH
17769: LD_INT 8
17771: PUSH
17772: LD_INT 8
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: PUSH
17781: LD_OWVAR 67
17785: ARRAY
17786: GREATEREQUAL
17787: OR
17788: PUSH
17789: LD_INT 17
17791: PPUSH
17792: LD_INT 22
17794: PUSH
17795: LD_INT 0
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 25
17804: PUSH
17805: LD_INT 12
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PPUSH
17816: CALL_OW 70
17820: PUSH
17821: LD_INT 0
17823: EQUAL
17824: OR
17825: IFFALSE 17604
// disableHealAI = 0 ;
17827: LD_ADDR_EXP 33
17831: PUSH
17832: LD_INT 0
17834: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
17835: LD_ADDR_VAR 0 1
17839: PUSH
17840: LD_INT 22
17842: PUSH
17843: LD_INT 3
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 25
17852: PUSH
17853: LD_INT 12
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PPUSH
17864: CALL_OW 69
17868: PUSH
17869: FOR_IN
17870: IFFALSE 17886
// SetClass ( i , 16 ) ;
17872: LD_VAR 0 1
17876: PPUSH
17877: LD_INT 16
17879: PPUSH
17880: CALL_OW 336
17884: GO 17869
17886: POP
17887: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17888: LD_ADDR_VAR 0 1
17892: PUSH
17893: LD_INT 22
17895: PUSH
17896: LD_INT 3
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 25
17905: PUSH
17906: LD_INT 4
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PPUSH
17917: CALL_OW 69
17921: PUSH
17922: FOR_IN
17923: IFFALSE 17939
// ComEnterUnit ( i , rulab ) ;
17925: LD_VAR 0 1
17929: PPUSH
17930: LD_INT 32
17932: PPUSH
17933: CALL_OW 120
17937: GO 17922
17939: POP
17940: POP
// end ; end_of_file
17941: PPOPN 2
17943: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
17944: LD_EXP 26
17948: PUSH
17949: LD_INT 0
17951: LESSEQUAL
17952: IFFALSE 18101
17954: GO 17956
17956: DISABLE
17957: LD_INT 0
17959: PPUSH
17960: PPUSH
17961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17962: LD_ADDR_VAR 0 2
17966: PUSH
17967: LD_INT 22
17969: PUSH
17970: LD_INT 1
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 21
17979: PUSH
17980: LD_INT 3
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 2
17989: PUSH
17990: LD_INT 30
17992: PUSH
17993: LD_INT 0
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 30
18002: PUSH
18003: LD_INT 1
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: PPUSH
18020: CALL_OW 69
18024: ST_TO_ADDR
// for i in tmp do
18025: LD_ADDR_VAR 0 1
18029: PUSH
18030: LD_VAR 0 2
18034: PUSH
18035: FOR_IN
18036: IFFALSE 18069
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18038: LD_ADDR_VAR 0 3
18042: PUSH
18043: LD_VAR 0 3
18047: PUSH
18048: LD_VAR 0 1
18052: PPUSH
18053: CALL_OW 274
18057: PPUSH
18058: LD_INT 1
18060: PPUSH
18061: CALL_OW 275
18065: PLUS
18066: ST_TO_ADDR
18067: GO 18035
18069: POP
18070: POP
// if yourCrates >= needCrates then
18071: LD_VAR 0 3
18075: PUSH
18076: LD_EXP 25
18080: GREATEREQUAL
18081: IFFALSE 18094
// FinishMission ( yourCrates ) else
18083: LD_VAR 0 3
18087: PPUSH
18088: CALL 18104 0 1
18092: GO 18101
// YouLost ( matmin ) ;
18094: LD_STRING matmin
18096: PPUSH
18097: CALL_OW 104
// end ;
18101: PPOPN 3
18103: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
18104: LD_INT 0
18106: PPUSH
18107: PPUSH
18108: PPUSH
18109: PPUSH
// if killCounter = 0 then
18110: LD_EXP 45
18114: PUSH
18115: LD_INT 0
18117: EQUAL
18118: IFFALSE 18127
// SetAchievement ( ACH_SURV ) ;
18120: LD_STRING ACH_SURV
18122: PPUSH
18123: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
18127: LD_INT 22
18129: PUSH
18130: LD_INT 3
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 21
18139: PUSH
18140: LD_INT 3
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PPUSH
18151: CALL_OW 69
18155: PUSH
18156: LD_INT 0
18158: EQUAL
18159: IFFALSE 18175
// begin wait ( 3 ) ;
18161: LD_INT 3
18163: PPUSH
18164: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
18168: LD_STRING ACH_BASEDESTROYER
18170: PPUSH
18171: CALL_OW 543
// end ; m1 := false ;
18175: LD_ADDR_VAR 0 3
18179: PUSH
18180: LD_INT 0
18182: ST_TO_ADDR
// m2 := false ;
18183: LD_ADDR_VAR 0 4
18187: PUSH
18188: LD_INT 0
18190: ST_TO_ADDR
// m3 := false ;
18191: LD_ADDR_VAR 0 5
18195: PUSH
18196: LD_INT 0
18198: ST_TO_ADDR
// if crates + 100 > crates then
18199: LD_VAR 0 1
18203: PUSH
18204: LD_INT 100
18206: PLUS
18207: PUSH
18208: LD_VAR 0 1
18212: GREATER
18213: IFFALSE 18245
// begin AddMedal ( cans , 1 ) ;
18215: LD_STRING cans
18217: PPUSH
18218: LD_INT 1
18220: PPUSH
18221: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18225: LD_INT 1
18227: PPUSH
18228: LD_STRING 06_crates_1
18230: PPUSH
18231: CALL_OW 39
// m1 := true ;
18235: LD_ADDR_VAR 0 3
18239: PUSH
18240: LD_INT 1
18242: ST_TO_ADDR
// end else
18243: GO 18266
// begin AddMedal ( cans , - 1 ) ;
18245: LD_STRING cans
18247: PPUSH
18248: LD_INT 1
18250: NEG
18251: PPUSH
18252: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18256: LD_INT 0
18258: PPUSH
18259: LD_STRING 06_crates_1
18261: PPUSH
18262: CALL_OW 39
// end ; if unitLost < 3 then
18266: LD_EXP 30
18270: PUSH
18271: LD_INT 3
18273: LESS
18274: IFFALSE 18296
// begin AddMedal ( people , 1 ) ;
18276: LD_STRING people
18278: PPUSH
18279: LD_INT 1
18281: PPUSH
18282: CALL_OW 101
// m2 := true ;
18286: LD_ADDR_VAR 0 4
18290: PUSH
18291: LD_INT 1
18293: ST_TO_ADDR
// end else
18294: GO 18307
// AddMedal ( people , - 1 ) ;
18296: LD_STRING people
18298: PPUSH
18299: LD_INT 1
18301: NEG
18302: PPUSH
18303: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18307: LD_EXP 28
18311: PPUSH
18312: LD_STRING 06_remoteVehs_1
18314: PPUSH
18315: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18319: LD_EXP 28
18323: PUSH
18324: LD_INT 1
18326: EQUAL
18327: IFFALSE 18349
// begin AddMedal ( remote , 1 ) ;
18329: LD_STRING remote
18331: PPUSH
18332: LD_INT 1
18334: PPUSH
18335: CALL_OW 101
// m3 := true ;
18339: LD_ADDR_VAR 0 5
18343: PUSH
18344: LD_INT 1
18346: ST_TO_ADDR
// end else
18347: GO 18389
// begin if GetTech ( 18 , 1 ) = state_enabled then
18349: LD_INT 18
18351: PPUSH
18352: LD_INT 1
18354: PPUSH
18355: CALL_OW 321
18359: PUSH
18360: LD_INT 1
18362: EQUAL
18363: IFFALSE 18378
// AddMedal ( remote , - 1 ) else
18365: LD_STRING remote
18367: PPUSH
18368: LD_INT 1
18370: NEG
18371: PPUSH
18372: CALL_OW 101
18376: GO 18389
// AddMedal ( remote , - 2 ) ;
18378: LD_STRING remote
18380: PPUSH
18381: LD_INT 2
18383: NEG
18384: PPUSH
18385: CALL_OW 101
// end ; if m1 and m2 and m3 then
18389: LD_VAR 0 3
18393: PUSH
18394: LD_VAR 0 4
18398: AND
18399: PUSH
18400: LD_VAR 0 5
18404: AND
18405: IFFALSE 18421
// begin wait ( 3 ) ;
18407: LD_INT 3
18409: PPUSH
18410: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
18414: LD_STRING ACH_ASPEED_6
18416: PPUSH
18417: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
18421: LD_OWVAR 67
18425: PUSH
18426: LD_INT 3
18428: GREATEREQUAL
18429: PUSH
18430: LD_VAR 0 3
18434: AND
18435: PUSH
18436: LD_VAR 0 4
18440: AND
18441: PUSH
18442: LD_VAR 0 5
18446: AND
18447: IFFALSE 18459
// SetAchievementEX ( ACH_AMER , 6 ) ;
18449: LD_STRING ACH_AMER
18451: PPUSH
18452: LD_INT 6
18454: PPUSH
18455: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
18459: LD_EXP 20
18463: PPUSH
18464: LD_STRING 06_KurtStatus_1
18466: PPUSH
18467: CALL_OW 39
// GiveMedals ( Main ) ;
18471: LD_STRING Main
18473: PPUSH
18474: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18478: LD_INT 22
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 21
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 50
18500: PUSH
18501: EMPTY
18502: LIST
18503: PUSH
18504: LD_INT 2
18506: PUSH
18507: LD_INT 25
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 25
18519: PUSH
18520: LD_INT 2
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 25
18529: PUSH
18530: LD_INT 3
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 25
18539: PUSH
18540: LD_INT 4
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: PPUSH
18560: CALL_OW 69
18564: PPUSH
18565: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18569: LD_EXP 1
18573: PPUSH
18574: LD_EXP 42
18578: PUSH
18579: LD_STRING JMM
18581: STR
18582: PPUSH
18583: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18587: LD_EXP 2
18591: PPUSH
18592: LD_EXP 42
18596: PUSH
18597: LD_STRING Lisa
18599: STR
18600: PPUSH
18601: CALL 6869 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18605: LD_EXP 3
18609: PPUSH
18610: LD_EXP 42
18614: PUSH
18615: LD_STRING Bobby
18617: STR
18618: PPUSH
18619: CALL 6869 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18623: LD_EXP 4
18627: PPUSH
18628: LD_EXP 42
18632: PUSH
18633: LD_STRING Cyrus
18635: STR
18636: PPUSH
18637: CALL 6869 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18641: LD_EXP 5
18645: PPUSH
18646: LD_EXP 42
18650: PUSH
18651: LD_STRING Frank
18653: STR
18654: PPUSH
18655: CALL 6869 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18659: LD_EXP 6
18663: PPUSH
18664: LD_EXP 42
18668: PUSH
18669: LD_STRING Brown
18671: STR
18672: PPUSH
18673: CALL 6869 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18677: LD_EXP 7
18681: PPUSH
18682: LD_EXP 42
18686: PUSH
18687: LD_STRING Donaldson
18689: STR
18690: PPUSH
18691: CALL 6869 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18695: LD_EXP 8
18699: PPUSH
18700: LD_EXP 42
18704: PUSH
18705: LD_STRING Gladstone
18707: STR
18708: PPUSH
18709: CALL 6869 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18713: LD_EXP 9
18717: PPUSH
18718: LD_EXP 42
18722: PUSH
18723: LD_STRING Denis
18725: STR
18726: PPUSH
18727: CALL 6869 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
18731: LD_EXP 15
18735: PPUSH
18736: LD_EXP 42
18740: PUSH
18741: LD_STRING Joan
18743: STR
18744: PPUSH
18745: CALL 6869 0 2
// if IsLive ( Joan ) then
18749: LD_EXP 15
18753: PPUSH
18754: CALL_OW 300
18758: IFFALSE 18772
// SaveCharacters ( Joan , Joan ) ;
18760: LD_EXP 15
18764: PPUSH
18765: LD_STRING Joan
18767: PPUSH
18768: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
18772: LD_EXP 16
18776: PPUSH
18777: LD_STRING 06_JoanStatus_1
18779: PPUSH
18780: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18784: LD_INT 50
18786: PUSH
18787: EMPTY
18788: LIST
18789: PUSH
18790: LD_INT 22
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 21
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 2
18812: PUSH
18813: LD_INT 25
18815: PUSH
18816: LD_INT 1
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 25
18825: PUSH
18826: LD_INT 2
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 25
18835: PUSH
18836: LD_INT 3
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 25
18845: PUSH
18846: LD_INT 4
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: PPUSH
18866: CALL_OW 69
18870: PUSH
18871: LD_EXP 1
18875: PUSH
18876: LD_EXP 2
18880: PUSH
18881: LD_EXP 3
18885: PUSH
18886: LD_EXP 4
18890: PUSH
18891: LD_EXP 5
18895: PUSH
18896: LD_EXP 6
18900: PUSH
18901: LD_EXP 7
18905: PUSH
18906: LD_EXP 8
18910: PUSH
18911: LD_EXP 9
18915: PUSH
18916: LD_EXP 15
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: DIFF
18933: PPUSH
18934: LD_STRING 06_other_survivors
18936: PPUSH
18937: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
18941: LD_INT 50
18943: PUSH
18944: EMPTY
18945: LIST
18946: PUSH
18947: LD_INT 22
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 21
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 2
18969: PUSH
18970: LD_INT 25
18972: PUSH
18973: LD_INT 12
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 25
18982: PUSH
18983: LD_INT 16
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: PPUSH
19001: CALL_OW 69
19005: PPUSH
19006: LD_STRING 06_other_apemans
19008: PPUSH
19009: CALL_OW 38
// YouWin ;
19013: CALL_OW 103
// end ; end_of_file
19017: LD_VAR 0 2
19021: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19022: LD_EXP 47
19026: PUSH
19027: LD_OWVAR 1
19031: PUSH
19032: LD_INT 23100
19034: PUSH
19035: LD_INT 21000
19037: PUSH
19038: LD_INT 18900
19040: PUSH
19041: LD_INT 16800
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: PUSH
19050: LD_OWVAR 67
19054: ARRAY
19055: GREATER
19056: AND
19057: IFFALSE 19371
19059: GO 19061
19061: DISABLE
19062: LD_INT 0
19064: PPUSH
19065: PPUSH
19066: PPUSH
19067: PPUSH
// begin enable ;
19068: ENABLE
// for i in ruAttackers do
19069: LD_ADDR_VAR 0 1
19073: PUSH
19074: LD_EXP 47
19078: PUSH
19079: FOR_IN
19080: IFFALSE 19369
// begin if not IsDrivenBy ( i ) then
19082: LD_VAR 0 1
19086: PPUSH
19087: CALL_OW 311
19091: NOT
19092: IFFALSE 19096
// continue ;
19094: GO 19079
// if i mod 2 = 0 then
19096: LD_VAR 0 1
19100: PUSH
19101: LD_INT 2
19103: MOD
19104: PUSH
19105: LD_INT 0
19107: EQUAL
19108: IFFALSE 19163
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 80 , 12 ] ] else
19110: LD_ADDR_VAR 0 3
19114: PUSH
19115: LD_INT 91
19117: PUSH
19118: LD_INT 52
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 82
19127: PUSH
19128: LD_INT 34
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 90
19137: PUSH
19138: LD_INT 26
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 80
19147: PUSH
19148: LD_INT 12
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: ST_TO_ADDR
19161: GO 19225
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] ] ;
19163: LD_ADDR_VAR 0 3
19167: PUSH
19168: LD_INT 91
19170: PUSH
19171: LD_INT 52
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 68
19180: PUSH
19181: LD_INT 46
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 48
19190: PUSH
19191: LD_INT 43
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 33
19200: PUSH
19201: LD_INT 34
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 30
19210: PUSH
19211: LD_INT 19
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
19225: LD_VAR 0 1
19229: PPUSH
19230: CALL_OW 256
19234: PUSH
19235: LD_INT 1000
19237: EQUAL
19238: IFFALSE 19256
// AgressiveMove ( i , path ) else
19240: LD_VAR 0 1
19244: PPUSH
19245: LD_VAR 0 3
19249: PPUSH
19250: CALL 78539 0 2
19254: GO 19367
// if GetLives ( i ) < 650 then
19256: LD_VAR 0 1
19260: PPUSH
19261: CALL_OW 256
19265: PUSH
19266: LD_INT 650
19268: LESS
19269: IFFALSE 19367
// begin if not IsInArea ( i , russianRepairArea ) then
19271: LD_VAR 0 1
19275: PPUSH
19276: LD_INT 12
19278: PPUSH
19279: CALL_OW 308
19283: NOT
19284: IFFALSE 19353
// begin SetTag ( i , 0 ) ;
19286: LD_VAR 0 1
19290: PPUSH
19291: LD_INT 0
19293: PPUSH
19294: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
19298: LD_VAR 0 1
19302: PPUSH
19303: CALL_OW 261
19307: PUSH
19308: LD_INT 50
19310: LESS
19311: PUSH
19312: LD_INT 21
19314: PPUSH
19315: CALL_OW 302
19319: AND
19320: IFFALSE 19336
// ComMoveUnit ( i , rufab ) else
19322: LD_VAR 0 1
19326: PPUSH
19327: LD_INT 21
19329: PPUSH
19330: CALL_OW 112
19334: GO 19351
// ComMoveXY ( i , 121 , 99 ) ;
19336: LD_VAR 0 1
19340: PPUSH
19341: LD_INT 121
19343: PPUSH
19344: LD_INT 99
19346: PPUSH
19347: CALL_OW 111
// end else
19351: GO 19367
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
19353: LD_VAR 0 1
19357: PPUSH
19358: CALL_OW 311
19362: PPUSH
19363: CALL 77635 0 1
// end ; end ;
19367: GO 19079
19369: POP
19370: POP
// end ;
19371: PPOPN 4
19373: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
19374: LD_INT 0
19376: PPUSH
19377: PPUSH
19378: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
19379: LD_ADDR_VAR 0 2
19383: PUSH
19384: DOUBLE
19385: LD_INT 1
19387: DEC
19388: ST_TO_ADDR
19389: LD_INT 4
19391: PUSH
19392: LD_INT 5
19394: PUSH
19395: LD_INT 6
19397: PUSH
19398: LD_INT 6
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: PUSH
19407: LD_OWVAR 67
19411: ARRAY
19412: PUSH
19413: FOR_TO
19414: IFFALSE 19589
// begin uc_side := 3 ;
19416: LD_ADDR_OWVAR 20
19420: PUSH
19421: LD_INT 3
19423: ST_TO_ADDR
// uc_nation := 3 ;
19424: LD_ADDR_OWVAR 21
19428: PUSH
19429: LD_INT 3
19431: ST_TO_ADDR
// InitHC_All ( ) ;
19432: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
19436: LD_INT 0
19438: PPUSH
19439: LD_INT 4
19441: PUSH
19442: LD_INT 5
19444: PUSH
19445: LD_INT 6
19447: PUSH
19448: LD_INT 6
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: PUSH
19457: LD_OWVAR 67
19461: ARRAY
19462: PPUSH
19463: CALL_OW 381
// un := CreateHuman ;
19467: LD_ADDR_VAR 0 3
19471: PUSH
19472: CALL_OW 44
19476: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
19477: LD_VAR 0 3
19481: PPUSH
19482: LD_INT 127
19484: PPUSH
19485: LD_INT 62
19487: PPUSH
19488: LD_INT 3
19490: PPUSH
19491: LD_INT 0
19493: PPUSH
19494: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
19498: LD_ADDR_EXP 48
19502: PUSH
19503: LD_EXP 48
19507: PPUSH
19508: LD_EXP 48
19512: PUSH
19513: LD_INT 1
19515: PLUS
19516: PPUSH
19517: LD_VAR 0 3
19521: PPUSH
19522: CALL_OW 1
19526: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
19527: LD_VAR 0 3
19531: PPUSH
19532: LD_INT 83
19534: PPUSH
19535: LD_INT 49
19537: PPUSH
19538: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
19542: LD_VAR 0 3
19546: PPUSH
19547: LD_INT 49
19549: PPUSH
19550: LD_INT 43
19552: PPUSH
19553: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
19557: LD_VAR 0 3
19561: PPUSH
19562: LD_INT 31
19564: PPUSH
19565: LD_INT 15
19567: PPUSH
19568: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
19572: LD_VAR 0 3
19576: PPUSH
19577: LD_INT 63
19579: PPUSH
19580: LD_INT 9
19582: PPUSH
19583: CALL_OW 174
// end ;
19587: GO 19413
19589: POP
19590: POP
// end ; end_of_file
19591: LD_VAR 0 1
19595: RET
// export function CreateNature ; var i , un ; begin
19596: LD_INT 0
19598: PPUSH
19599: PPUSH
19600: PPUSH
// for i := 1 to Difficulty + 2 do
19601: LD_ADDR_VAR 0 2
19605: PUSH
19606: DOUBLE
19607: LD_INT 1
19609: DEC
19610: ST_TO_ADDR
19611: LD_OWVAR 67
19615: PUSH
19616: LD_INT 2
19618: PLUS
19619: PUSH
19620: FOR_TO
19621: IFFALSE 19730
// begin hc_sex := sex_male ;
19623: LD_ADDR_OWVAR 27
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// uc_side := 0 ;
19631: LD_ADDR_OWVAR 20
19635: PUSH
19636: LD_INT 0
19638: ST_TO_ADDR
// uc_nation := nation_nature ;
19639: LD_ADDR_OWVAR 21
19643: PUSH
19644: LD_INT 0
19646: ST_TO_ADDR
// hc_class := class_tiger ;
19647: LD_ADDR_OWVAR 28
19651: PUSH
19652: LD_INT 14
19654: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19655: LD_ADDR_OWVAR 31
19659: PUSH
19660: LD_EXP 35
19664: PUSH
19665: LD_INT 0
19667: PUSH
19668: LD_INT 0
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
19680: LD_ADDR_OWVAR 35
19684: PUSH
19685: LD_INT 5
19687: NEG
19688: PPUSH
19689: LD_INT 5
19691: PPUSH
19692: CALL_OW 12
19696: PUSH
19697: LD_OWVAR 67
19701: MUL
19702: ST_TO_ADDR
// un := CreateHuman ;
19703: LD_ADDR_VAR 0 3
19707: PUSH
19708: CALL_OW 44
19712: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19713: LD_VAR 0 3
19717: PPUSH
19718: LD_INT 18
19720: PPUSH
19721: LD_INT 0
19723: PPUSH
19724: CALL_OW 49
// end ;
19728: GO 19620
19730: POP
19731: POP
// for i = 1 to rand ( 3 , 4 ) do
19732: LD_ADDR_VAR 0 2
19736: PUSH
19737: DOUBLE
19738: LD_INT 1
19740: DEC
19741: ST_TO_ADDR
19742: LD_INT 3
19744: PPUSH
19745: LD_INT 4
19747: PPUSH
19748: CALL_OW 12
19752: PUSH
19753: FOR_TO
19754: IFFALSE 19824
// begin hc_class := class_phororhacos ;
19756: LD_ADDR_OWVAR 28
19760: PUSH
19761: LD_INT 18
19763: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19764: LD_ADDR_OWVAR 31
19768: PUSH
19769: LD_EXP 35
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: LD_INT 0
19779: PUSH
19780: LD_INT 0
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: ST_TO_ADDR
// hc_agressivity := 0 ;
19789: LD_ADDR_OWVAR 35
19793: PUSH
19794: LD_INT 0
19796: ST_TO_ADDR
// un = CreateHuman ;
19797: LD_ADDR_VAR 0 3
19801: PUSH
19802: CALL_OW 44
19806: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19807: LD_VAR 0 3
19811: PPUSH
19812: LD_INT 18
19814: PPUSH
19815: LD_INT 0
19817: PPUSH
19818: CALL_OW 49
// end ;
19822: GO 19753
19824: POP
19825: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
19826: LD_ADDR_VAR 0 2
19830: PUSH
19831: DOUBLE
19832: LD_INT 1
19834: DEC
19835: ST_TO_ADDR
19836: LD_INT 1
19838: PPUSH
19839: LD_INT 3
19841: PPUSH
19842: CALL_OW 12
19846: PUSH
19847: LD_OWVAR 67
19851: PLUS
19852: PUSH
19853: FOR_TO
19854: IFFALSE 19991
// begin hc_class := class_apeman ;
19856: LD_ADDR_OWVAR 28
19860: PUSH
19861: LD_INT 12
19863: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
19864: LD_ADDR_OWVAR 31
19868: PUSH
19869: LD_INT 2
19871: PPUSH
19872: LD_INT 5
19874: PPUSH
19875: CALL_OW 12
19879: PUSH
19880: LD_INT 0
19882: PPUSH
19883: LD_INT 2
19885: PPUSH
19886: CALL_OW 12
19890: PUSH
19891: LD_INT 0
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: ST_TO_ADDR
// hc_agressivity := [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 45 , 55 ) ] [ Difficulty ] ;
19903: LD_ADDR_OWVAR 35
19907: PUSH
19908: LD_INT 20
19910: PPUSH
19911: LD_INT 30
19913: PPUSH
19914: CALL_OW 12
19918: PUSH
19919: LD_INT 30
19921: PPUSH
19922: LD_INT 40
19924: PPUSH
19925: CALL_OW 12
19929: PUSH
19930: LD_INT 40
19932: PPUSH
19933: LD_INT 50
19935: PPUSH
19936: CALL_OW 12
19940: PUSH
19941: LD_INT 45
19943: PPUSH
19944: LD_INT 55
19946: PPUSH
19947: CALL_OW 12
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: PUSH
19958: LD_OWVAR 67
19962: ARRAY
19963: ST_TO_ADDR
// un := CreateHuman ;
19964: LD_ADDR_VAR 0 3
19968: PUSH
19969: CALL_OW 44
19973: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
19974: LD_VAR 0 3
19978: PPUSH
19979: LD_INT 19
19981: PPUSH
19982: LD_INT 0
19984: PPUSH
19985: CALL_OW 49
// end ;
19989: GO 19853
19991: POP
19992: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
19993: LD_ADDR_VAR 0 2
19997: PUSH
19998: DOUBLE
19999: LD_INT 1
20001: DEC
20002: ST_TO_ADDR
20003: LD_INT 5
20005: PPUSH
20006: LD_INT 6
20008: PPUSH
20009: CALL_OW 12
20013: PUSH
20014: LD_OWVAR 67
20018: PLUS
20019: PUSH
20020: FOR_TO
20021: IFFALSE 20105
// begin hc_class := class_apeman ;
20023: LD_ADDR_OWVAR 28
20027: PUSH
20028: LD_INT 12
20030: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20031: LD_ADDR_OWVAR 31
20035: PUSH
20036: LD_INT 2
20038: PPUSH
20039: LD_INT 5
20041: PPUSH
20042: CALL_OW 12
20046: PUSH
20047: LD_INT 0
20049: PPUSH
20050: LD_INT 2
20052: PPUSH
20053: CALL_OW 12
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: LD_INT 0
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: ST_TO_ADDR
// hc_agressivity := 0 ;
20070: LD_ADDR_OWVAR 35
20074: PUSH
20075: LD_INT 0
20077: ST_TO_ADDR
// un = CreateHuman ;
20078: LD_ADDR_VAR 0 3
20082: PUSH
20083: CALL_OW 44
20087: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20088: LD_VAR 0 3
20092: PPUSH
20093: LD_INT 20
20095: PPUSH
20096: LD_INT 0
20098: PPUSH
20099: CALL_OW 49
// end ;
20103: GO 20020
20105: POP
20106: POP
// end ; end_of_file
20107: LD_VAR 0 1
20111: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20112: LD_INT 0
20114: PPUSH
// ar_miner := 81 ;
20115: LD_ADDR_EXP 56
20119: PUSH
20120: LD_INT 81
20122: ST_TO_ADDR
// ar_crane := 88 ;
20123: LD_ADDR_EXP 55
20127: PUSH
20128: LD_INT 88
20130: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20131: LD_ADDR_EXP 50
20135: PUSH
20136: LD_INT 89
20138: ST_TO_ADDR
// us_hack := 99 ;
20139: LD_ADDR_EXP 51
20143: PUSH
20144: LD_INT 99
20146: ST_TO_ADDR
// us_artillery := 97 ;
20147: LD_ADDR_EXP 52
20151: PUSH
20152: LD_INT 97
20154: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20155: LD_ADDR_EXP 53
20159: PUSH
20160: LD_INT 91
20162: ST_TO_ADDR
// ar_mortar := 92 ;
20163: LD_ADDR_EXP 54
20167: PUSH
20168: LD_INT 92
20170: ST_TO_ADDR
// ru_flamethrower := 93 ;
20171: LD_ADDR_EXP 57
20175: PUSH
20176: LD_INT 93
20178: ST_TO_ADDR
// ru_radar := 98 ;
20179: LD_ADDR_EXP 49
20183: PUSH
20184: LD_INT 98
20186: ST_TO_ADDR
// tech_Artillery := 80 ;
20187: LD_ADDR_EXP 58
20191: PUSH
20192: LD_INT 80
20194: ST_TO_ADDR
// tech_RadMat := 81 ;
20195: LD_ADDR_EXP 59
20199: PUSH
20200: LD_INT 81
20202: ST_TO_ADDR
// tech_BasicTools := 82 ;
20203: LD_ADDR_EXP 60
20207: PUSH
20208: LD_INT 82
20210: ST_TO_ADDR
// tech_Cargo := 83 ;
20211: LD_ADDR_EXP 61
20215: PUSH
20216: LD_INT 83
20218: ST_TO_ADDR
// tech_Track := 84 ;
20219: LD_ADDR_EXP 62
20223: PUSH
20224: LD_INT 84
20226: ST_TO_ADDR
// tech_Crane := 85 ;
20227: LD_ADDR_EXP 63
20231: PUSH
20232: LD_INT 85
20234: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20235: LD_ADDR_EXP 64
20239: PUSH
20240: LD_INT 86
20242: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20243: LD_ADDR_EXP 65
20247: PUSH
20248: LD_INT 87
20250: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
20251: LD_ADDR_EXP 66
20255: PUSH
20256: LD_INT 88
20258: ST_TO_ADDR
// class_mastodont := 31 ;
20259: LD_ADDR_EXP 67
20263: PUSH
20264: LD_INT 31
20266: ST_TO_ADDR
// class_horse := 21 ;
20267: LD_ADDR_EXP 68
20271: PUSH
20272: LD_INT 21
20274: ST_TO_ADDR
// end ;
20275: LD_VAR 0 1
20279: RET
// every 1 do
20280: GO 20282
20282: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
20283: CALL 20112 0 0
20287: END
// every 0 0$1 do
20288: GO 20290
20290: DISABLE
// begin enable ;
20291: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20292: LD_STRING updateTimer(
20294: PUSH
20295: LD_OWVAR 1
20299: STR
20300: PUSH
20301: LD_STRING );
20303: STR
20304: PPUSH
20305: CALL_OW 559
// end ;
20309: END
// export function SOS_MapStart ( ) ; begin
20310: LD_INT 0
20312: PPUSH
// if streamModeActive then
20313: LD_EXP 69
20317: IFFALSE 20326
// DefineStreamItems ( true ) ;
20319: LD_INT 1
20321: PPUSH
20322: CALL 21976 0 1
// UpdateFactoryWaypoints ( ) ;
20326: CALL 35560 0 0
// end ;
20330: LD_VAR 0 1
20334: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20335: LD_INT 0
20337: PPUSH
// if p2 = 100 then
20338: LD_VAR 0 2
20342: PUSH
20343: LD_INT 100
20345: EQUAL
20346: IFFALSE 21349
// begin if not StreamModeActive then
20348: LD_EXP 69
20352: NOT
20353: IFFALSE 20363
// StreamModeActive := true ;
20355: LD_ADDR_EXP 69
20359: PUSH
20360: LD_INT 1
20362: ST_TO_ADDR
// if p3 = 0 then
20363: LD_VAR 0 3
20367: PUSH
20368: LD_INT 0
20370: EQUAL
20371: IFFALSE 20377
// InitStreamMode ;
20373: CALL 21512 0 0
// if p3 = 1 then
20377: LD_VAR 0 3
20381: PUSH
20382: LD_INT 1
20384: EQUAL
20385: IFFALSE 20395
// sRocket := true ;
20387: LD_ADDR_EXP 74
20391: PUSH
20392: LD_INT 1
20394: ST_TO_ADDR
// if p3 = 2 then
20395: LD_VAR 0 3
20399: PUSH
20400: LD_INT 2
20402: EQUAL
20403: IFFALSE 20413
// sSpeed := true ;
20405: LD_ADDR_EXP 73
20409: PUSH
20410: LD_INT 1
20412: ST_TO_ADDR
// if p3 = 3 then
20413: LD_VAR 0 3
20417: PUSH
20418: LD_INT 3
20420: EQUAL
20421: IFFALSE 20431
// sEngine := true ;
20423: LD_ADDR_EXP 75
20427: PUSH
20428: LD_INT 1
20430: ST_TO_ADDR
// if p3 = 4 then
20431: LD_VAR 0 3
20435: PUSH
20436: LD_INT 4
20438: EQUAL
20439: IFFALSE 20449
// sSpec := true ;
20441: LD_ADDR_EXP 72
20445: PUSH
20446: LD_INT 1
20448: ST_TO_ADDR
// if p3 = 5 then
20449: LD_VAR 0 3
20453: PUSH
20454: LD_INT 5
20456: EQUAL
20457: IFFALSE 20467
// sLevel := true ;
20459: LD_ADDR_EXP 76
20463: PUSH
20464: LD_INT 1
20466: ST_TO_ADDR
// if p3 = 6 then
20467: LD_VAR 0 3
20471: PUSH
20472: LD_INT 6
20474: EQUAL
20475: IFFALSE 20485
// sArmoury := true ;
20477: LD_ADDR_EXP 77
20481: PUSH
20482: LD_INT 1
20484: ST_TO_ADDR
// if p3 = 7 then
20485: LD_VAR 0 3
20489: PUSH
20490: LD_INT 7
20492: EQUAL
20493: IFFALSE 20503
// sRadar := true ;
20495: LD_ADDR_EXP 78
20499: PUSH
20500: LD_INT 1
20502: ST_TO_ADDR
// if p3 = 8 then
20503: LD_VAR 0 3
20507: PUSH
20508: LD_INT 8
20510: EQUAL
20511: IFFALSE 20521
// sBunker := true ;
20513: LD_ADDR_EXP 79
20517: PUSH
20518: LD_INT 1
20520: ST_TO_ADDR
// if p3 = 9 then
20521: LD_VAR 0 3
20525: PUSH
20526: LD_INT 9
20528: EQUAL
20529: IFFALSE 20539
// sHack := true ;
20531: LD_ADDR_EXP 80
20535: PUSH
20536: LD_INT 1
20538: ST_TO_ADDR
// if p3 = 10 then
20539: LD_VAR 0 3
20543: PUSH
20544: LD_INT 10
20546: EQUAL
20547: IFFALSE 20557
// sFire := true ;
20549: LD_ADDR_EXP 81
20553: PUSH
20554: LD_INT 1
20556: ST_TO_ADDR
// if p3 = 11 then
20557: LD_VAR 0 3
20561: PUSH
20562: LD_INT 11
20564: EQUAL
20565: IFFALSE 20575
// sRefresh := true ;
20567: LD_ADDR_EXP 82
20571: PUSH
20572: LD_INT 1
20574: ST_TO_ADDR
// if p3 = 12 then
20575: LD_VAR 0 3
20579: PUSH
20580: LD_INT 12
20582: EQUAL
20583: IFFALSE 20593
// sExp := true ;
20585: LD_ADDR_EXP 83
20589: PUSH
20590: LD_INT 1
20592: ST_TO_ADDR
// if p3 = 13 then
20593: LD_VAR 0 3
20597: PUSH
20598: LD_INT 13
20600: EQUAL
20601: IFFALSE 20611
// sDepot := true ;
20603: LD_ADDR_EXP 84
20607: PUSH
20608: LD_INT 1
20610: ST_TO_ADDR
// if p3 = 14 then
20611: LD_VAR 0 3
20615: PUSH
20616: LD_INT 14
20618: EQUAL
20619: IFFALSE 20629
// sFlag := true ;
20621: LD_ADDR_EXP 85
20625: PUSH
20626: LD_INT 1
20628: ST_TO_ADDR
// if p3 = 15 then
20629: LD_VAR 0 3
20633: PUSH
20634: LD_INT 15
20636: EQUAL
20637: IFFALSE 20647
// sKamikadze := true ;
20639: LD_ADDR_EXP 93
20643: PUSH
20644: LD_INT 1
20646: ST_TO_ADDR
// if p3 = 16 then
20647: LD_VAR 0 3
20651: PUSH
20652: LD_INT 16
20654: EQUAL
20655: IFFALSE 20665
// sTroll := true ;
20657: LD_ADDR_EXP 94
20661: PUSH
20662: LD_INT 1
20664: ST_TO_ADDR
// if p3 = 17 then
20665: LD_VAR 0 3
20669: PUSH
20670: LD_INT 17
20672: EQUAL
20673: IFFALSE 20683
// sSlow := true ;
20675: LD_ADDR_EXP 95
20679: PUSH
20680: LD_INT 1
20682: ST_TO_ADDR
// if p3 = 18 then
20683: LD_VAR 0 3
20687: PUSH
20688: LD_INT 18
20690: EQUAL
20691: IFFALSE 20701
// sLack := true ;
20693: LD_ADDR_EXP 96
20697: PUSH
20698: LD_INT 1
20700: ST_TO_ADDR
// if p3 = 19 then
20701: LD_VAR 0 3
20705: PUSH
20706: LD_INT 19
20708: EQUAL
20709: IFFALSE 20719
// sTank := true ;
20711: LD_ADDR_EXP 98
20715: PUSH
20716: LD_INT 1
20718: ST_TO_ADDR
// if p3 = 20 then
20719: LD_VAR 0 3
20723: PUSH
20724: LD_INT 20
20726: EQUAL
20727: IFFALSE 20737
// sRemote := true ;
20729: LD_ADDR_EXP 99
20733: PUSH
20734: LD_INT 1
20736: ST_TO_ADDR
// if p3 = 21 then
20737: LD_VAR 0 3
20741: PUSH
20742: LD_INT 21
20744: EQUAL
20745: IFFALSE 20755
// sPowell := true ;
20747: LD_ADDR_EXP 100
20751: PUSH
20752: LD_INT 1
20754: ST_TO_ADDR
// if p3 = 22 then
20755: LD_VAR 0 3
20759: PUSH
20760: LD_INT 22
20762: EQUAL
20763: IFFALSE 20773
// sTeleport := true ;
20765: LD_ADDR_EXP 103
20769: PUSH
20770: LD_INT 1
20772: ST_TO_ADDR
// if p3 = 23 then
20773: LD_VAR 0 3
20777: PUSH
20778: LD_INT 23
20780: EQUAL
20781: IFFALSE 20791
// sOilTower := true ;
20783: LD_ADDR_EXP 105
20787: PUSH
20788: LD_INT 1
20790: ST_TO_ADDR
// if p3 = 24 then
20791: LD_VAR 0 3
20795: PUSH
20796: LD_INT 24
20798: EQUAL
20799: IFFALSE 20809
// sShovel := true ;
20801: LD_ADDR_EXP 106
20805: PUSH
20806: LD_INT 1
20808: ST_TO_ADDR
// if p3 = 25 then
20809: LD_VAR 0 3
20813: PUSH
20814: LD_INT 25
20816: EQUAL
20817: IFFALSE 20827
// sSheik := true ;
20819: LD_ADDR_EXP 107
20823: PUSH
20824: LD_INT 1
20826: ST_TO_ADDR
// if p3 = 26 then
20827: LD_VAR 0 3
20831: PUSH
20832: LD_INT 26
20834: EQUAL
20835: IFFALSE 20845
// sEarthquake := true ;
20837: LD_ADDR_EXP 109
20841: PUSH
20842: LD_INT 1
20844: ST_TO_ADDR
// if p3 = 27 then
20845: LD_VAR 0 3
20849: PUSH
20850: LD_INT 27
20852: EQUAL
20853: IFFALSE 20863
// sAI := true ;
20855: LD_ADDR_EXP 110
20859: PUSH
20860: LD_INT 1
20862: ST_TO_ADDR
// if p3 = 28 then
20863: LD_VAR 0 3
20867: PUSH
20868: LD_INT 28
20870: EQUAL
20871: IFFALSE 20881
// sCargo := true ;
20873: LD_ADDR_EXP 113
20877: PUSH
20878: LD_INT 1
20880: ST_TO_ADDR
// if p3 = 29 then
20881: LD_VAR 0 3
20885: PUSH
20886: LD_INT 29
20888: EQUAL
20889: IFFALSE 20899
// sDLaser := true ;
20891: LD_ADDR_EXP 114
20895: PUSH
20896: LD_INT 1
20898: ST_TO_ADDR
// if p3 = 30 then
20899: LD_VAR 0 3
20903: PUSH
20904: LD_INT 30
20906: EQUAL
20907: IFFALSE 20917
// sExchange := true ;
20909: LD_ADDR_EXP 115
20913: PUSH
20914: LD_INT 1
20916: ST_TO_ADDR
// if p3 = 31 then
20917: LD_VAR 0 3
20921: PUSH
20922: LD_INT 31
20924: EQUAL
20925: IFFALSE 20935
// sFac := true ;
20927: LD_ADDR_EXP 116
20931: PUSH
20932: LD_INT 1
20934: ST_TO_ADDR
// if p3 = 32 then
20935: LD_VAR 0 3
20939: PUSH
20940: LD_INT 32
20942: EQUAL
20943: IFFALSE 20953
// sPower := true ;
20945: LD_ADDR_EXP 117
20949: PUSH
20950: LD_INT 1
20952: ST_TO_ADDR
// if p3 = 33 then
20953: LD_VAR 0 3
20957: PUSH
20958: LD_INT 33
20960: EQUAL
20961: IFFALSE 20971
// sRandom := true ;
20963: LD_ADDR_EXP 118
20967: PUSH
20968: LD_INT 1
20970: ST_TO_ADDR
// if p3 = 34 then
20971: LD_VAR 0 3
20975: PUSH
20976: LD_INT 34
20978: EQUAL
20979: IFFALSE 20989
// sShield := true ;
20981: LD_ADDR_EXP 119
20985: PUSH
20986: LD_INT 1
20988: ST_TO_ADDR
// if p3 = 35 then
20989: LD_VAR 0 3
20993: PUSH
20994: LD_INT 35
20996: EQUAL
20997: IFFALSE 21007
// sTime := true ;
20999: LD_ADDR_EXP 120
21003: PUSH
21004: LD_INT 1
21006: ST_TO_ADDR
// if p3 = 36 then
21007: LD_VAR 0 3
21011: PUSH
21012: LD_INT 36
21014: EQUAL
21015: IFFALSE 21025
// sTools := true ;
21017: LD_ADDR_EXP 121
21021: PUSH
21022: LD_INT 1
21024: ST_TO_ADDR
// if p3 = 101 then
21025: LD_VAR 0 3
21029: PUSH
21030: LD_INT 101
21032: EQUAL
21033: IFFALSE 21043
// sSold := true ;
21035: LD_ADDR_EXP 86
21039: PUSH
21040: LD_INT 1
21042: ST_TO_ADDR
// if p3 = 102 then
21043: LD_VAR 0 3
21047: PUSH
21048: LD_INT 102
21050: EQUAL
21051: IFFALSE 21061
// sDiff := true ;
21053: LD_ADDR_EXP 87
21057: PUSH
21058: LD_INT 1
21060: ST_TO_ADDR
// if p3 = 103 then
21061: LD_VAR 0 3
21065: PUSH
21066: LD_INT 103
21068: EQUAL
21069: IFFALSE 21079
// sFog := true ;
21071: LD_ADDR_EXP 90
21075: PUSH
21076: LD_INT 1
21078: ST_TO_ADDR
// if p3 = 104 then
21079: LD_VAR 0 3
21083: PUSH
21084: LD_INT 104
21086: EQUAL
21087: IFFALSE 21097
// sReset := true ;
21089: LD_ADDR_EXP 91
21093: PUSH
21094: LD_INT 1
21096: ST_TO_ADDR
// if p3 = 105 then
21097: LD_VAR 0 3
21101: PUSH
21102: LD_INT 105
21104: EQUAL
21105: IFFALSE 21115
// sSun := true ;
21107: LD_ADDR_EXP 92
21111: PUSH
21112: LD_INT 1
21114: ST_TO_ADDR
// if p3 = 106 then
21115: LD_VAR 0 3
21119: PUSH
21120: LD_INT 106
21122: EQUAL
21123: IFFALSE 21133
// sTiger := true ;
21125: LD_ADDR_EXP 88
21129: PUSH
21130: LD_INT 1
21132: ST_TO_ADDR
// if p3 = 107 then
21133: LD_VAR 0 3
21137: PUSH
21138: LD_INT 107
21140: EQUAL
21141: IFFALSE 21151
// sBomb := true ;
21143: LD_ADDR_EXP 89
21147: PUSH
21148: LD_INT 1
21150: ST_TO_ADDR
// if p3 = 108 then
21151: LD_VAR 0 3
21155: PUSH
21156: LD_INT 108
21158: EQUAL
21159: IFFALSE 21169
// sWound := true ;
21161: LD_ADDR_EXP 97
21165: PUSH
21166: LD_INT 1
21168: ST_TO_ADDR
// if p3 = 109 then
21169: LD_VAR 0 3
21173: PUSH
21174: LD_INT 109
21176: EQUAL
21177: IFFALSE 21187
// sBetray := true ;
21179: LD_ADDR_EXP 101
21183: PUSH
21184: LD_INT 1
21186: ST_TO_ADDR
// if p3 = 110 then
21187: LD_VAR 0 3
21191: PUSH
21192: LD_INT 110
21194: EQUAL
21195: IFFALSE 21205
// sContamin := true ;
21197: LD_ADDR_EXP 102
21201: PUSH
21202: LD_INT 1
21204: ST_TO_ADDR
// if p3 = 111 then
21205: LD_VAR 0 3
21209: PUSH
21210: LD_INT 111
21212: EQUAL
21213: IFFALSE 21223
// sOil := true ;
21215: LD_ADDR_EXP 104
21219: PUSH
21220: LD_INT 1
21222: ST_TO_ADDR
// if p3 = 112 then
21223: LD_VAR 0 3
21227: PUSH
21228: LD_INT 112
21230: EQUAL
21231: IFFALSE 21241
// sStu := true ;
21233: LD_ADDR_EXP 108
21237: PUSH
21238: LD_INT 1
21240: ST_TO_ADDR
// if p3 = 113 then
21241: LD_VAR 0 3
21245: PUSH
21246: LD_INT 113
21248: EQUAL
21249: IFFALSE 21259
// sBazooka := true ;
21251: LD_ADDR_EXP 111
21255: PUSH
21256: LD_INT 1
21258: ST_TO_ADDR
// if p3 = 114 then
21259: LD_VAR 0 3
21263: PUSH
21264: LD_INT 114
21266: EQUAL
21267: IFFALSE 21277
// sMortar := true ;
21269: LD_ADDR_EXP 112
21273: PUSH
21274: LD_INT 1
21276: ST_TO_ADDR
// if p3 = 115 then
21277: LD_VAR 0 3
21281: PUSH
21282: LD_INT 115
21284: EQUAL
21285: IFFALSE 21295
// sRanger := true ;
21287: LD_ADDR_EXP 122
21291: PUSH
21292: LD_INT 1
21294: ST_TO_ADDR
// if p3 = 116 then
21295: LD_VAR 0 3
21299: PUSH
21300: LD_INT 116
21302: EQUAL
21303: IFFALSE 21313
// sComputer := true ;
21305: LD_ADDR_EXP 123
21309: PUSH
21310: LD_INT 1
21312: ST_TO_ADDR
// if p3 = 117 then
21313: LD_VAR 0 3
21317: PUSH
21318: LD_INT 117
21320: EQUAL
21321: IFFALSE 21331
// s30 := true ;
21323: LD_ADDR_EXP 124
21327: PUSH
21328: LD_INT 1
21330: ST_TO_ADDR
// if p3 = 118 then
21331: LD_VAR 0 3
21335: PUSH
21336: LD_INT 118
21338: EQUAL
21339: IFFALSE 21349
// s60 := true ;
21341: LD_ADDR_EXP 125
21345: PUSH
21346: LD_INT 1
21348: ST_TO_ADDR
// end ; if p2 = 101 then
21349: LD_VAR 0 2
21353: PUSH
21354: LD_INT 101
21356: EQUAL
21357: IFFALSE 21485
// begin case p3 of 1 :
21359: LD_VAR 0 3
21363: PUSH
21364: LD_INT 1
21366: DOUBLE
21367: EQUAL
21368: IFTRUE 21372
21370: GO 21379
21372: POP
// hHackUnlimitedResources ; 2 :
21373: CALL 33583 0 0
21377: GO 21485
21379: LD_INT 2
21381: DOUBLE
21382: EQUAL
21383: IFTRUE 21387
21385: GO 21394
21387: POP
// hHackSetLevel10 ; 3 :
21388: CALL 33716 0 0
21392: GO 21485
21394: LD_INT 3
21396: DOUBLE
21397: EQUAL
21398: IFTRUE 21402
21400: GO 21409
21402: POP
// hHackSetLevel10YourUnits ; 4 :
21403: CALL 33801 0 0
21407: GO 21485
21409: LD_INT 4
21411: DOUBLE
21412: EQUAL
21413: IFTRUE 21417
21415: GO 21424
21417: POP
// hHackInvincible ; 5 :
21418: CALL 34249 0 0
21422: GO 21485
21424: LD_INT 5
21426: DOUBLE
21427: EQUAL
21428: IFTRUE 21432
21430: GO 21439
21432: POP
// hHackInvisible ; 6 :
21433: CALL 34360 0 0
21437: GO 21485
21439: LD_INT 6
21441: DOUBLE
21442: EQUAL
21443: IFTRUE 21447
21445: GO 21454
21447: POP
// hHackChangeYourSide ; 7 :
21448: CALL 34417 0 0
21452: GO 21485
21454: LD_INT 7
21456: DOUBLE
21457: EQUAL
21458: IFTRUE 21462
21460: GO 21469
21462: POP
// hHackChangeUnitSide ; 8 :
21463: CALL 34459 0 0
21467: GO 21485
21469: LD_INT 8
21471: DOUBLE
21472: EQUAL
21473: IFTRUE 21477
21475: GO 21484
21477: POP
// hHackFog ; end ;
21478: CALL 34560 0 0
21482: GO 21485
21484: POP
// end ; end ;
21485: LD_VAR 0 7
21489: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21490: GO 21492
21492: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21493: LD_STRING initStreamRollete();
21495: PPUSH
21496: CALL_OW 559
// InitStreamMode ;
21500: CALL 21512 0 0
// DefineStreamItems ( false ) ;
21504: LD_INT 0
21506: PPUSH
21507: CALL 21976 0 1
// end ;
21511: END
// function InitStreamMode ; begin
21512: LD_INT 0
21514: PPUSH
// streamModeActive := false ;
21515: LD_ADDR_EXP 69
21519: PUSH
21520: LD_INT 0
21522: ST_TO_ADDR
// normalCounter := 36 ;
21523: LD_ADDR_EXP 70
21527: PUSH
21528: LD_INT 36
21530: ST_TO_ADDR
// hardcoreCounter := 18 ;
21531: LD_ADDR_EXP 71
21535: PUSH
21536: LD_INT 18
21538: ST_TO_ADDR
// sRocket := false ;
21539: LD_ADDR_EXP 74
21543: PUSH
21544: LD_INT 0
21546: ST_TO_ADDR
// sSpeed := false ;
21547: LD_ADDR_EXP 73
21551: PUSH
21552: LD_INT 0
21554: ST_TO_ADDR
// sEngine := false ;
21555: LD_ADDR_EXP 75
21559: PUSH
21560: LD_INT 0
21562: ST_TO_ADDR
// sSpec := false ;
21563: LD_ADDR_EXP 72
21567: PUSH
21568: LD_INT 0
21570: ST_TO_ADDR
// sLevel := false ;
21571: LD_ADDR_EXP 76
21575: PUSH
21576: LD_INT 0
21578: ST_TO_ADDR
// sArmoury := false ;
21579: LD_ADDR_EXP 77
21583: PUSH
21584: LD_INT 0
21586: ST_TO_ADDR
// sRadar := false ;
21587: LD_ADDR_EXP 78
21591: PUSH
21592: LD_INT 0
21594: ST_TO_ADDR
// sBunker := false ;
21595: LD_ADDR_EXP 79
21599: PUSH
21600: LD_INT 0
21602: ST_TO_ADDR
// sHack := false ;
21603: LD_ADDR_EXP 80
21607: PUSH
21608: LD_INT 0
21610: ST_TO_ADDR
// sFire := false ;
21611: LD_ADDR_EXP 81
21615: PUSH
21616: LD_INT 0
21618: ST_TO_ADDR
// sRefresh := false ;
21619: LD_ADDR_EXP 82
21623: PUSH
21624: LD_INT 0
21626: ST_TO_ADDR
// sExp := false ;
21627: LD_ADDR_EXP 83
21631: PUSH
21632: LD_INT 0
21634: ST_TO_ADDR
// sDepot := false ;
21635: LD_ADDR_EXP 84
21639: PUSH
21640: LD_INT 0
21642: ST_TO_ADDR
// sFlag := false ;
21643: LD_ADDR_EXP 85
21647: PUSH
21648: LD_INT 0
21650: ST_TO_ADDR
// sKamikadze := false ;
21651: LD_ADDR_EXP 93
21655: PUSH
21656: LD_INT 0
21658: ST_TO_ADDR
// sTroll := false ;
21659: LD_ADDR_EXP 94
21663: PUSH
21664: LD_INT 0
21666: ST_TO_ADDR
// sSlow := false ;
21667: LD_ADDR_EXP 95
21671: PUSH
21672: LD_INT 0
21674: ST_TO_ADDR
// sLack := false ;
21675: LD_ADDR_EXP 96
21679: PUSH
21680: LD_INT 0
21682: ST_TO_ADDR
// sTank := false ;
21683: LD_ADDR_EXP 98
21687: PUSH
21688: LD_INT 0
21690: ST_TO_ADDR
// sRemote := false ;
21691: LD_ADDR_EXP 99
21695: PUSH
21696: LD_INT 0
21698: ST_TO_ADDR
// sPowell := false ;
21699: LD_ADDR_EXP 100
21703: PUSH
21704: LD_INT 0
21706: ST_TO_ADDR
// sTeleport := false ;
21707: LD_ADDR_EXP 103
21711: PUSH
21712: LD_INT 0
21714: ST_TO_ADDR
// sOilTower := false ;
21715: LD_ADDR_EXP 105
21719: PUSH
21720: LD_INT 0
21722: ST_TO_ADDR
// sShovel := false ;
21723: LD_ADDR_EXP 106
21727: PUSH
21728: LD_INT 0
21730: ST_TO_ADDR
// sSheik := false ;
21731: LD_ADDR_EXP 107
21735: PUSH
21736: LD_INT 0
21738: ST_TO_ADDR
// sEarthquake := false ;
21739: LD_ADDR_EXP 109
21743: PUSH
21744: LD_INT 0
21746: ST_TO_ADDR
// sAI := false ;
21747: LD_ADDR_EXP 110
21751: PUSH
21752: LD_INT 0
21754: ST_TO_ADDR
// sCargo := false ;
21755: LD_ADDR_EXP 113
21759: PUSH
21760: LD_INT 0
21762: ST_TO_ADDR
// sDLaser := false ;
21763: LD_ADDR_EXP 114
21767: PUSH
21768: LD_INT 0
21770: ST_TO_ADDR
// sExchange := false ;
21771: LD_ADDR_EXP 115
21775: PUSH
21776: LD_INT 0
21778: ST_TO_ADDR
// sFac := false ;
21779: LD_ADDR_EXP 116
21783: PUSH
21784: LD_INT 0
21786: ST_TO_ADDR
// sPower := false ;
21787: LD_ADDR_EXP 117
21791: PUSH
21792: LD_INT 0
21794: ST_TO_ADDR
// sRandom := false ;
21795: LD_ADDR_EXP 118
21799: PUSH
21800: LD_INT 0
21802: ST_TO_ADDR
// sShield := false ;
21803: LD_ADDR_EXP 119
21807: PUSH
21808: LD_INT 0
21810: ST_TO_ADDR
// sTime := false ;
21811: LD_ADDR_EXP 120
21815: PUSH
21816: LD_INT 0
21818: ST_TO_ADDR
// sTools := false ;
21819: LD_ADDR_EXP 121
21823: PUSH
21824: LD_INT 0
21826: ST_TO_ADDR
// sSold := false ;
21827: LD_ADDR_EXP 86
21831: PUSH
21832: LD_INT 0
21834: ST_TO_ADDR
// sDiff := false ;
21835: LD_ADDR_EXP 87
21839: PUSH
21840: LD_INT 0
21842: ST_TO_ADDR
// sFog := false ;
21843: LD_ADDR_EXP 90
21847: PUSH
21848: LD_INT 0
21850: ST_TO_ADDR
// sReset := false ;
21851: LD_ADDR_EXP 91
21855: PUSH
21856: LD_INT 0
21858: ST_TO_ADDR
// sSun := false ;
21859: LD_ADDR_EXP 92
21863: PUSH
21864: LD_INT 0
21866: ST_TO_ADDR
// sTiger := false ;
21867: LD_ADDR_EXP 88
21871: PUSH
21872: LD_INT 0
21874: ST_TO_ADDR
// sBomb := false ;
21875: LD_ADDR_EXP 89
21879: PUSH
21880: LD_INT 0
21882: ST_TO_ADDR
// sWound := false ;
21883: LD_ADDR_EXP 97
21887: PUSH
21888: LD_INT 0
21890: ST_TO_ADDR
// sBetray := false ;
21891: LD_ADDR_EXP 101
21895: PUSH
21896: LD_INT 0
21898: ST_TO_ADDR
// sContamin := false ;
21899: LD_ADDR_EXP 102
21903: PUSH
21904: LD_INT 0
21906: ST_TO_ADDR
// sOil := false ;
21907: LD_ADDR_EXP 104
21911: PUSH
21912: LD_INT 0
21914: ST_TO_ADDR
// sStu := false ;
21915: LD_ADDR_EXP 108
21919: PUSH
21920: LD_INT 0
21922: ST_TO_ADDR
// sBazooka := false ;
21923: LD_ADDR_EXP 111
21927: PUSH
21928: LD_INT 0
21930: ST_TO_ADDR
// sMortar := false ;
21931: LD_ADDR_EXP 112
21935: PUSH
21936: LD_INT 0
21938: ST_TO_ADDR
// sRanger := false ;
21939: LD_ADDR_EXP 122
21943: PUSH
21944: LD_INT 0
21946: ST_TO_ADDR
// sComputer := false ;
21947: LD_ADDR_EXP 123
21951: PUSH
21952: LD_INT 0
21954: ST_TO_ADDR
// s30 := false ;
21955: LD_ADDR_EXP 124
21959: PUSH
21960: LD_INT 0
21962: ST_TO_ADDR
// s60 := false ;
21963: LD_ADDR_EXP 125
21967: PUSH
21968: LD_INT 0
21970: ST_TO_ADDR
// end ;
21971: LD_VAR 0 1
21975: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21976: LD_INT 0
21978: PPUSH
21979: PPUSH
21980: PPUSH
21981: PPUSH
21982: PPUSH
21983: PPUSH
21984: PPUSH
// result := [ ] ;
21985: LD_ADDR_VAR 0 2
21989: PUSH
21990: EMPTY
21991: ST_TO_ADDR
// if campaign_id = 1 then
21992: LD_OWVAR 69
21996: PUSH
21997: LD_INT 1
21999: EQUAL
22000: IFFALSE 25166
// begin case mission_number of 1 :
22002: LD_OWVAR 70
22006: PUSH
22007: LD_INT 1
22009: DOUBLE
22010: EQUAL
22011: IFTRUE 22015
22013: GO 22091
22015: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22016: LD_ADDR_VAR 0 2
22020: PUSH
22021: LD_INT 2
22023: PUSH
22024: LD_INT 4
22026: PUSH
22027: LD_INT 11
22029: PUSH
22030: LD_INT 12
22032: PUSH
22033: LD_INT 15
22035: PUSH
22036: LD_INT 16
22038: PUSH
22039: LD_INT 22
22041: PUSH
22042: LD_INT 23
22044: PUSH
22045: LD_INT 26
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 101
22061: PUSH
22062: LD_INT 102
22064: PUSH
22065: LD_INT 106
22067: PUSH
22068: LD_INT 116
22070: PUSH
22071: LD_INT 117
22073: PUSH
22074: LD_INT 118
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: ST_TO_ADDR
22089: GO 25164
22091: LD_INT 2
22093: DOUBLE
22094: EQUAL
22095: IFTRUE 22099
22097: GO 22183
22099: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22100: LD_ADDR_VAR 0 2
22104: PUSH
22105: LD_INT 2
22107: PUSH
22108: LD_INT 4
22110: PUSH
22111: LD_INT 11
22113: PUSH
22114: LD_INT 12
22116: PUSH
22117: LD_INT 15
22119: PUSH
22120: LD_INT 16
22122: PUSH
22123: LD_INT 22
22125: PUSH
22126: LD_INT 23
22128: PUSH
22129: LD_INT 26
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 101
22145: PUSH
22146: LD_INT 102
22148: PUSH
22149: LD_INT 105
22151: PUSH
22152: LD_INT 106
22154: PUSH
22155: LD_INT 108
22157: PUSH
22158: LD_INT 116
22160: PUSH
22161: LD_INT 117
22163: PUSH
22164: LD_INT 118
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: ST_TO_ADDR
22181: GO 25164
22183: LD_INT 3
22185: DOUBLE
22186: EQUAL
22187: IFTRUE 22191
22189: GO 22279
22191: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22192: LD_ADDR_VAR 0 2
22196: PUSH
22197: LD_INT 2
22199: PUSH
22200: LD_INT 4
22202: PUSH
22203: LD_INT 5
22205: PUSH
22206: LD_INT 11
22208: PUSH
22209: LD_INT 12
22211: PUSH
22212: LD_INT 15
22214: PUSH
22215: LD_INT 16
22217: PUSH
22218: LD_INT 22
22220: PUSH
22221: LD_INT 26
22223: PUSH
22224: LD_INT 36
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 101
22241: PUSH
22242: LD_INT 102
22244: PUSH
22245: LD_INT 105
22247: PUSH
22248: LD_INT 106
22250: PUSH
22251: LD_INT 108
22253: PUSH
22254: LD_INT 116
22256: PUSH
22257: LD_INT 117
22259: PUSH
22260: LD_INT 118
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: ST_TO_ADDR
22277: GO 25164
22279: LD_INT 4
22281: DOUBLE
22282: EQUAL
22283: IFTRUE 22287
22285: GO 22383
22287: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22288: LD_ADDR_VAR 0 2
22292: PUSH
22293: LD_INT 2
22295: PUSH
22296: LD_INT 4
22298: PUSH
22299: LD_INT 5
22301: PUSH
22302: LD_INT 8
22304: PUSH
22305: LD_INT 11
22307: PUSH
22308: LD_INT 12
22310: PUSH
22311: LD_INT 15
22313: PUSH
22314: LD_INT 16
22316: PUSH
22317: LD_INT 22
22319: PUSH
22320: LD_INT 23
22322: PUSH
22323: LD_INT 26
22325: PUSH
22326: LD_INT 36
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 101
22345: PUSH
22346: LD_INT 102
22348: PUSH
22349: LD_INT 105
22351: PUSH
22352: LD_INT 106
22354: PUSH
22355: LD_INT 108
22357: PUSH
22358: LD_INT 116
22360: PUSH
22361: LD_INT 117
22363: PUSH
22364: LD_INT 118
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: ST_TO_ADDR
22381: GO 25164
22383: LD_INT 5
22385: DOUBLE
22386: EQUAL
22387: IFTRUE 22391
22389: GO 22503
22391: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22392: LD_ADDR_VAR 0 2
22396: PUSH
22397: LD_INT 2
22399: PUSH
22400: LD_INT 4
22402: PUSH
22403: LD_INT 5
22405: PUSH
22406: LD_INT 6
22408: PUSH
22409: LD_INT 8
22411: PUSH
22412: LD_INT 11
22414: PUSH
22415: LD_INT 12
22417: PUSH
22418: LD_INT 15
22420: PUSH
22421: LD_INT 16
22423: PUSH
22424: LD_INT 22
22426: PUSH
22427: LD_INT 23
22429: PUSH
22430: LD_INT 25
22432: PUSH
22433: LD_INT 26
22435: PUSH
22436: LD_INT 36
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 101
22457: PUSH
22458: LD_INT 102
22460: PUSH
22461: LD_INT 105
22463: PUSH
22464: LD_INT 106
22466: PUSH
22467: LD_INT 108
22469: PUSH
22470: LD_INT 109
22472: PUSH
22473: LD_INT 112
22475: PUSH
22476: LD_INT 116
22478: PUSH
22479: LD_INT 117
22481: PUSH
22482: LD_INT 118
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: ST_TO_ADDR
22501: GO 25164
22503: LD_INT 6
22505: DOUBLE
22506: EQUAL
22507: IFTRUE 22511
22509: GO 22643
22511: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22512: LD_ADDR_VAR 0 2
22516: PUSH
22517: LD_INT 2
22519: PUSH
22520: LD_INT 4
22522: PUSH
22523: LD_INT 5
22525: PUSH
22526: LD_INT 6
22528: PUSH
22529: LD_INT 8
22531: PUSH
22532: LD_INT 11
22534: PUSH
22535: LD_INT 12
22537: PUSH
22538: LD_INT 15
22540: PUSH
22541: LD_INT 16
22543: PUSH
22544: LD_INT 20
22546: PUSH
22547: LD_INT 21
22549: PUSH
22550: LD_INT 22
22552: PUSH
22553: LD_INT 23
22555: PUSH
22556: LD_INT 25
22558: PUSH
22559: LD_INT 26
22561: PUSH
22562: LD_INT 30
22564: PUSH
22565: LD_INT 31
22567: PUSH
22568: LD_INT 32
22570: PUSH
22571: LD_INT 36
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 101
22597: PUSH
22598: LD_INT 102
22600: PUSH
22601: LD_INT 105
22603: PUSH
22604: LD_INT 106
22606: PUSH
22607: LD_INT 108
22609: PUSH
22610: LD_INT 109
22612: PUSH
22613: LD_INT 112
22615: PUSH
22616: LD_INT 116
22618: PUSH
22619: LD_INT 117
22621: PUSH
22622: LD_INT 118
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: ST_TO_ADDR
22641: GO 25164
22643: LD_INT 7
22645: DOUBLE
22646: EQUAL
22647: IFTRUE 22651
22649: GO 22763
22651: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22652: LD_ADDR_VAR 0 2
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: LD_INT 4
22662: PUSH
22663: LD_INT 5
22665: PUSH
22666: LD_INT 7
22668: PUSH
22669: LD_INT 11
22671: PUSH
22672: LD_INT 12
22674: PUSH
22675: LD_INT 15
22677: PUSH
22678: LD_INT 16
22680: PUSH
22681: LD_INT 20
22683: PUSH
22684: LD_INT 21
22686: PUSH
22687: LD_INT 22
22689: PUSH
22690: LD_INT 23
22692: PUSH
22693: LD_INT 25
22695: PUSH
22696: LD_INT 26
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 101
22717: PUSH
22718: LD_INT 102
22720: PUSH
22721: LD_INT 103
22723: PUSH
22724: LD_INT 105
22726: PUSH
22727: LD_INT 106
22729: PUSH
22730: LD_INT 108
22732: PUSH
22733: LD_INT 112
22735: PUSH
22736: LD_INT 116
22738: PUSH
22739: LD_INT 117
22741: PUSH
22742: LD_INT 118
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: ST_TO_ADDR
22761: GO 25164
22763: LD_INT 8
22765: DOUBLE
22766: EQUAL
22767: IFTRUE 22771
22769: GO 22911
22771: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22772: LD_ADDR_VAR 0 2
22776: PUSH
22777: LD_INT 2
22779: PUSH
22780: LD_INT 4
22782: PUSH
22783: LD_INT 5
22785: PUSH
22786: LD_INT 6
22788: PUSH
22789: LD_INT 7
22791: PUSH
22792: LD_INT 8
22794: PUSH
22795: LD_INT 11
22797: PUSH
22798: LD_INT 12
22800: PUSH
22801: LD_INT 15
22803: PUSH
22804: LD_INT 16
22806: PUSH
22807: LD_INT 20
22809: PUSH
22810: LD_INT 21
22812: PUSH
22813: LD_INT 22
22815: PUSH
22816: LD_INT 23
22818: PUSH
22819: LD_INT 25
22821: PUSH
22822: LD_INT 26
22824: PUSH
22825: LD_INT 30
22827: PUSH
22828: LD_INT 31
22830: PUSH
22831: LD_INT 32
22833: PUSH
22834: LD_INT 36
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 101
22861: PUSH
22862: LD_INT 102
22864: PUSH
22865: LD_INT 103
22867: PUSH
22868: LD_INT 105
22870: PUSH
22871: LD_INT 106
22873: PUSH
22874: LD_INT 108
22876: PUSH
22877: LD_INT 109
22879: PUSH
22880: LD_INT 112
22882: PUSH
22883: LD_INT 116
22885: PUSH
22886: LD_INT 117
22888: PUSH
22889: LD_INT 118
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: ST_TO_ADDR
22909: GO 25164
22911: LD_INT 9
22913: DOUBLE
22914: EQUAL
22915: IFTRUE 22919
22917: GO 23067
22919: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22920: LD_ADDR_VAR 0 2
22924: PUSH
22925: LD_INT 2
22927: PUSH
22928: LD_INT 4
22930: PUSH
22931: LD_INT 5
22933: PUSH
22934: LD_INT 6
22936: PUSH
22937: LD_INT 7
22939: PUSH
22940: LD_INT 8
22942: PUSH
22943: LD_INT 11
22945: PUSH
22946: LD_INT 12
22948: PUSH
22949: LD_INT 15
22951: PUSH
22952: LD_INT 16
22954: PUSH
22955: LD_INT 20
22957: PUSH
22958: LD_INT 21
22960: PUSH
22961: LD_INT 22
22963: PUSH
22964: LD_INT 23
22966: PUSH
22967: LD_INT 25
22969: PUSH
22970: LD_INT 26
22972: PUSH
22973: LD_INT 28
22975: PUSH
22976: LD_INT 30
22978: PUSH
22979: LD_INT 31
22981: PUSH
22982: LD_INT 32
22984: PUSH
22985: LD_INT 36
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 101
23013: PUSH
23014: LD_INT 102
23016: PUSH
23017: LD_INT 103
23019: PUSH
23020: LD_INT 105
23022: PUSH
23023: LD_INT 106
23025: PUSH
23026: LD_INT 108
23028: PUSH
23029: LD_INT 109
23031: PUSH
23032: LD_INT 112
23034: PUSH
23035: LD_INT 114
23037: PUSH
23038: LD_INT 116
23040: PUSH
23041: LD_INT 117
23043: PUSH
23044: LD_INT 118
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: ST_TO_ADDR
23065: GO 25164
23067: LD_INT 10
23069: DOUBLE
23070: EQUAL
23071: IFTRUE 23075
23073: GO 23271
23075: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23076: LD_ADDR_VAR 0 2
23080: PUSH
23081: LD_INT 2
23083: PUSH
23084: LD_INT 4
23086: PUSH
23087: LD_INT 5
23089: PUSH
23090: LD_INT 6
23092: PUSH
23093: LD_INT 7
23095: PUSH
23096: LD_INT 8
23098: PUSH
23099: LD_INT 9
23101: PUSH
23102: LD_INT 10
23104: PUSH
23105: LD_INT 11
23107: PUSH
23108: LD_INT 12
23110: PUSH
23111: LD_INT 13
23113: PUSH
23114: LD_INT 14
23116: PUSH
23117: LD_INT 15
23119: PUSH
23120: LD_INT 16
23122: PUSH
23123: LD_INT 17
23125: PUSH
23126: LD_INT 18
23128: PUSH
23129: LD_INT 19
23131: PUSH
23132: LD_INT 20
23134: PUSH
23135: LD_INT 21
23137: PUSH
23138: LD_INT 22
23140: PUSH
23141: LD_INT 23
23143: PUSH
23144: LD_INT 24
23146: PUSH
23147: LD_INT 25
23149: PUSH
23150: LD_INT 26
23152: PUSH
23153: LD_INT 28
23155: PUSH
23156: LD_INT 30
23158: PUSH
23159: LD_INT 31
23161: PUSH
23162: LD_INT 32
23164: PUSH
23165: LD_INT 36
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 101
23201: PUSH
23202: LD_INT 102
23204: PUSH
23205: LD_INT 103
23207: PUSH
23208: LD_INT 104
23210: PUSH
23211: LD_INT 105
23213: PUSH
23214: LD_INT 106
23216: PUSH
23217: LD_INT 107
23219: PUSH
23220: LD_INT 108
23222: PUSH
23223: LD_INT 109
23225: PUSH
23226: LD_INT 110
23228: PUSH
23229: LD_INT 111
23231: PUSH
23232: LD_INT 112
23234: PUSH
23235: LD_INT 114
23237: PUSH
23238: LD_INT 116
23240: PUSH
23241: LD_INT 117
23243: PUSH
23244: LD_INT 118
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: ST_TO_ADDR
23269: GO 25164
23271: LD_INT 11
23273: DOUBLE
23274: EQUAL
23275: IFTRUE 23279
23277: GO 23483
23279: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23280: LD_ADDR_VAR 0 2
23284: PUSH
23285: LD_INT 2
23287: PUSH
23288: LD_INT 3
23290: PUSH
23291: LD_INT 4
23293: PUSH
23294: LD_INT 5
23296: PUSH
23297: LD_INT 6
23299: PUSH
23300: LD_INT 7
23302: PUSH
23303: LD_INT 8
23305: PUSH
23306: LD_INT 9
23308: PUSH
23309: LD_INT 10
23311: PUSH
23312: LD_INT 11
23314: PUSH
23315: LD_INT 12
23317: PUSH
23318: LD_INT 13
23320: PUSH
23321: LD_INT 14
23323: PUSH
23324: LD_INT 15
23326: PUSH
23327: LD_INT 16
23329: PUSH
23330: LD_INT 17
23332: PUSH
23333: LD_INT 18
23335: PUSH
23336: LD_INT 19
23338: PUSH
23339: LD_INT 20
23341: PUSH
23342: LD_INT 21
23344: PUSH
23345: LD_INT 22
23347: PUSH
23348: LD_INT 23
23350: PUSH
23351: LD_INT 24
23353: PUSH
23354: LD_INT 25
23356: PUSH
23357: LD_INT 26
23359: PUSH
23360: LD_INT 28
23362: PUSH
23363: LD_INT 30
23365: PUSH
23366: LD_INT 31
23368: PUSH
23369: LD_INT 32
23371: PUSH
23372: LD_INT 34
23374: PUSH
23375: LD_INT 36
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 101
23413: PUSH
23414: LD_INT 102
23416: PUSH
23417: LD_INT 103
23419: PUSH
23420: LD_INT 104
23422: PUSH
23423: LD_INT 105
23425: PUSH
23426: LD_INT 106
23428: PUSH
23429: LD_INT 107
23431: PUSH
23432: LD_INT 108
23434: PUSH
23435: LD_INT 109
23437: PUSH
23438: LD_INT 110
23440: PUSH
23441: LD_INT 111
23443: PUSH
23444: LD_INT 112
23446: PUSH
23447: LD_INT 114
23449: PUSH
23450: LD_INT 116
23452: PUSH
23453: LD_INT 117
23455: PUSH
23456: LD_INT 118
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: ST_TO_ADDR
23481: GO 25164
23483: LD_INT 12
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23711
23491: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23492: LD_ADDR_VAR 0 2
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: LD_INT 2
23502: PUSH
23503: LD_INT 3
23505: PUSH
23506: LD_INT 4
23508: PUSH
23509: LD_INT 5
23511: PUSH
23512: LD_INT 6
23514: PUSH
23515: LD_INT 7
23517: PUSH
23518: LD_INT 8
23520: PUSH
23521: LD_INT 9
23523: PUSH
23524: LD_INT 10
23526: PUSH
23527: LD_INT 11
23529: PUSH
23530: LD_INT 12
23532: PUSH
23533: LD_INT 13
23535: PUSH
23536: LD_INT 14
23538: PUSH
23539: LD_INT 15
23541: PUSH
23542: LD_INT 16
23544: PUSH
23545: LD_INT 17
23547: PUSH
23548: LD_INT 18
23550: PUSH
23551: LD_INT 19
23553: PUSH
23554: LD_INT 20
23556: PUSH
23557: LD_INT 21
23559: PUSH
23560: LD_INT 22
23562: PUSH
23563: LD_INT 23
23565: PUSH
23566: LD_INT 24
23568: PUSH
23569: LD_INT 25
23571: PUSH
23572: LD_INT 26
23574: PUSH
23575: LD_INT 27
23577: PUSH
23578: LD_INT 28
23580: PUSH
23581: LD_INT 30
23583: PUSH
23584: LD_INT 31
23586: PUSH
23587: LD_INT 32
23589: PUSH
23590: LD_INT 33
23592: PUSH
23593: LD_INT 34
23595: PUSH
23596: LD_INT 36
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 101
23637: PUSH
23638: LD_INT 102
23640: PUSH
23641: LD_INT 103
23643: PUSH
23644: LD_INT 104
23646: PUSH
23647: LD_INT 105
23649: PUSH
23650: LD_INT 106
23652: PUSH
23653: LD_INT 107
23655: PUSH
23656: LD_INT 108
23658: PUSH
23659: LD_INT 109
23661: PUSH
23662: LD_INT 110
23664: PUSH
23665: LD_INT 111
23667: PUSH
23668: LD_INT 112
23670: PUSH
23671: LD_INT 113
23673: PUSH
23674: LD_INT 114
23676: PUSH
23677: LD_INT 116
23679: PUSH
23680: LD_INT 117
23682: PUSH
23683: LD_INT 118
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: ST_TO_ADDR
23709: GO 25164
23711: LD_INT 13
23713: DOUBLE
23714: EQUAL
23715: IFTRUE 23719
23717: GO 23927
23719: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23720: LD_ADDR_VAR 0 2
23724: PUSH
23725: LD_INT 1
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: LD_INT 3
23733: PUSH
23734: LD_INT 4
23736: PUSH
23737: LD_INT 5
23739: PUSH
23740: LD_INT 8
23742: PUSH
23743: LD_INT 9
23745: PUSH
23746: LD_INT 10
23748: PUSH
23749: LD_INT 11
23751: PUSH
23752: LD_INT 12
23754: PUSH
23755: LD_INT 14
23757: PUSH
23758: LD_INT 15
23760: PUSH
23761: LD_INT 16
23763: PUSH
23764: LD_INT 17
23766: PUSH
23767: LD_INT 18
23769: PUSH
23770: LD_INT 19
23772: PUSH
23773: LD_INT 20
23775: PUSH
23776: LD_INT 21
23778: PUSH
23779: LD_INT 22
23781: PUSH
23782: LD_INT 23
23784: PUSH
23785: LD_INT 24
23787: PUSH
23788: LD_INT 25
23790: PUSH
23791: LD_INT 26
23793: PUSH
23794: LD_INT 27
23796: PUSH
23797: LD_INT 28
23799: PUSH
23800: LD_INT 30
23802: PUSH
23803: LD_INT 31
23805: PUSH
23806: LD_INT 32
23808: PUSH
23809: LD_INT 33
23811: PUSH
23812: LD_INT 34
23814: PUSH
23815: LD_INT 36
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 101
23853: PUSH
23854: LD_INT 102
23856: PUSH
23857: LD_INT 103
23859: PUSH
23860: LD_INT 104
23862: PUSH
23863: LD_INT 105
23865: PUSH
23866: LD_INT 106
23868: PUSH
23869: LD_INT 107
23871: PUSH
23872: LD_INT 108
23874: PUSH
23875: LD_INT 109
23877: PUSH
23878: LD_INT 110
23880: PUSH
23881: LD_INT 111
23883: PUSH
23884: LD_INT 112
23886: PUSH
23887: LD_INT 113
23889: PUSH
23890: LD_INT 114
23892: PUSH
23893: LD_INT 116
23895: PUSH
23896: LD_INT 117
23898: PUSH
23899: LD_INT 118
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: ST_TO_ADDR
23925: GO 25164
23927: LD_INT 14
23929: DOUBLE
23930: EQUAL
23931: IFTRUE 23935
23933: GO 24159
23935: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23936: LD_ADDR_VAR 0 2
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: LD_INT 2
23946: PUSH
23947: LD_INT 3
23949: PUSH
23950: LD_INT 4
23952: PUSH
23953: LD_INT 5
23955: PUSH
23956: LD_INT 6
23958: PUSH
23959: LD_INT 7
23961: PUSH
23962: LD_INT 8
23964: PUSH
23965: LD_INT 9
23967: PUSH
23968: LD_INT 10
23970: PUSH
23971: LD_INT 11
23973: PUSH
23974: LD_INT 12
23976: PUSH
23977: LD_INT 13
23979: PUSH
23980: LD_INT 14
23982: PUSH
23983: LD_INT 15
23985: PUSH
23986: LD_INT 16
23988: PUSH
23989: LD_INT 17
23991: PUSH
23992: LD_INT 18
23994: PUSH
23995: LD_INT 19
23997: PUSH
23998: LD_INT 20
24000: PUSH
24001: LD_INT 21
24003: PUSH
24004: LD_INT 22
24006: PUSH
24007: LD_INT 23
24009: PUSH
24010: LD_INT 24
24012: PUSH
24013: LD_INT 25
24015: PUSH
24016: LD_INT 26
24018: PUSH
24019: LD_INT 27
24021: PUSH
24022: LD_INT 28
24024: PUSH
24025: LD_INT 29
24027: PUSH
24028: LD_INT 30
24030: PUSH
24031: LD_INT 31
24033: PUSH
24034: LD_INT 32
24036: PUSH
24037: LD_INT 33
24039: PUSH
24040: LD_INT 34
24042: PUSH
24043: LD_INT 36
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 101
24085: PUSH
24086: LD_INT 102
24088: PUSH
24089: LD_INT 103
24091: PUSH
24092: LD_INT 104
24094: PUSH
24095: LD_INT 105
24097: PUSH
24098: LD_INT 106
24100: PUSH
24101: LD_INT 107
24103: PUSH
24104: LD_INT 108
24106: PUSH
24107: LD_INT 109
24109: PUSH
24110: LD_INT 110
24112: PUSH
24113: LD_INT 111
24115: PUSH
24116: LD_INT 112
24118: PUSH
24119: LD_INT 113
24121: PUSH
24122: LD_INT 114
24124: PUSH
24125: LD_INT 116
24127: PUSH
24128: LD_INT 117
24130: PUSH
24131: LD_INT 118
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: ST_TO_ADDR
24157: GO 25164
24159: LD_INT 15
24161: DOUBLE
24162: EQUAL
24163: IFTRUE 24167
24165: GO 24391
24167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24168: LD_ADDR_VAR 0 2
24172: PUSH
24173: LD_INT 1
24175: PUSH
24176: LD_INT 2
24178: PUSH
24179: LD_INT 3
24181: PUSH
24182: LD_INT 4
24184: PUSH
24185: LD_INT 5
24187: PUSH
24188: LD_INT 6
24190: PUSH
24191: LD_INT 7
24193: PUSH
24194: LD_INT 8
24196: PUSH
24197: LD_INT 9
24199: PUSH
24200: LD_INT 10
24202: PUSH
24203: LD_INT 11
24205: PUSH
24206: LD_INT 12
24208: PUSH
24209: LD_INT 13
24211: PUSH
24212: LD_INT 14
24214: PUSH
24215: LD_INT 15
24217: PUSH
24218: LD_INT 16
24220: PUSH
24221: LD_INT 17
24223: PUSH
24224: LD_INT 18
24226: PUSH
24227: LD_INT 19
24229: PUSH
24230: LD_INT 20
24232: PUSH
24233: LD_INT 21
24235: PUSH
24236: LD_INT 22
24238: PUSH
24239: LD_INT 23
24241: PUSH
24242: LD_INT 24
24244: PUSH
24245: LD_INT 25
24247: PUSH
24248: LD_INT 26
24250: PUSH
24251: LD_INT 27
24253: PUSH
24254: LD_INT 28
24256: PUSH
24257: LD_INT 29
24259: PUSH
24260: LD_INT 30
24262: PUSH
24263: LD_INT 31
24265: PUSH
24266: LD_INT 32
24268: PUSH
24269: LD_INT 33
24271: PUSH
24272: LD_INT 34
24274: PUSH
24275: LD_INT 36
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 101
24317: PUSH
24318: LD_INT 102
24320: PUSH
24321: LD_INT 103
24323: PUSH
24324: LD_INT 104
24326: PUSH
24327: LD_INT 105
24329: PUSH
24330: LD_INT 106
24332: PUSH
24333: LD_INT 107
24335: PUSH
24336: LD_INT 108
24338: PUSH
24339: LD_INT 109
24341: PUSH
24342: LD_INT 110
24344: PUSH
24345: LD_INT 111
24347: PUSH
24348: LD_INT 112
24350: PUSH
24351: LD_INT 113
24353: PUSH
24354: LD_INT 114
24356: PUSH
24357: LD_INT 116
24359: PUSH
24360: LD_INT 117
24362: PUSH
24363: LD_INT 118
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: ST_TO_ADDR
24389: GO 25164
24391: LD_INT 16
24393: DOUBLE
24394: EQUAL
24395: IFTRUE 24399
24397: GO 24535
24399: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24400: LD_ADDR_VAR 0 2
24404: PUSH
24405: LD_INT 2
24407: PUSH
24408: LD_INT 4
24410: PUSH
24411: LD_INT 5
24413: PUSH
24414: LD_INT 7
24416: PUSH
24417: LD_INT 11
24419: PUSH
24420: LD_INT 12
24422: PUSH
24423: LD_INT 15
24425: PUSH
24426: LD_INT 16
24428: PUSH
24429: LD_INT 20
24431: PUSH
24432: LD_INT 21
24434: PUSH
24435: LD_INT 22
24437: PUSH
24438: LD_INT 23
24440: PUSH
24441: LD_INT 25
24443: PUSH
24444: LD_INT 26
24446: PUSH
24447: LD_INT 30
24449: PUSH
24450: LD_INT 31
24452: PUSH
24453: LD_INT 32
24455: PUSH
24456: LD_INT 33
24458: PUSH
24459: LD_INT 34
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 101
24485: PUSH
24486: LD_INT 102
24488: PUSH
24489: LD_INT 103
24491: PUSH
24492: LD_INT 106
24494: PUSH
24495: LD_INT 108
24497: PUSH
24498: LD_INT 112
24500: PUSH
24501: LD_INT 113
24503: PUSH
24504: LD_INT 114
24506: PUSH
24507: LD_INT 116
24509: PUSH
24510: LD_INT 117
24512: PUSH
24513: LD_INT 118
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: ST_TO_ADDR
24533: GO 25164
24535: LD_INT 17
24537: DOUBLE
24538: EQUAL
24539: IFTRUE 24543
24541: GO 24767
24543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24544: LD_ADDR_VAR 0 2
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: LD_INT 2
24554: PUSH
24555: LD_INT 3
24557: PUSH
24558: LD_INT 4
24560: PUSH
24561: LD_INT 5
24563: PUSH
24564: LD_INT 6
24566: PUSH
24567: LD_INT 7
24569: PUSH
24570: LD_INT 8
24572: PUSH
24573: LD_INT 9
24575: PUSH
24576: LD_INT 10
24578: PUSH
24579: LD_INT 11
24581: PUSH
24582: LD_INT 12
24584: PUSH
24585: LD_INT 13
24587: PUSH
24588: LD_INT 14
24590: PUSH
24591: LD_INT 15
24593: PUSH
24594: LD_INT 16
24596: PUSH
24597: LD_INT 17
24599: PUSH
24600: LD_INT 18
24602: PUSH
24603: LD_INT 19
24605: PUSH
24606: LD_INT 20
24608: PUSH
24609: LD_INT 21
24611: PUSH
24612: LD_INT 22
24614: PUSH
24615: LD_INT 23
24617: PUSH
24618: LD_INT 24
24620: PUSH
24621: LD_INT 25
24623: PUSH
24624: LD_INT 26
24626: PUSH
24627: LD_INT 27
24629: PUSH
24630: LD_INT 28
24632: PUSH
24633: LD_INT 29
24635: PUSH
24636: LD_INT 30
24638: PUSH
24639: LD_INT 31
24641: PUSH
24642: LD_INT 32
24644: PUSH
24645: LD_INT 33
24647: PUSH
24648: LD_INT 34
24650: PUSH
24651: LD_INT 36
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 101
24693: PUSH
24694: LD_INT 102
24696: PUSH
24697: LD_INT 103
24699: PUSH
24700: LD_INT 104
24702: PUSH
24703: LD_INT 105
24705: PUSH
24706: LD_INT 106
24708: PUSH
24709: LD_INT 107
24711: PUSH
24712: LD_INT 108
24714: PUSH
24715: LD_INT 109
24717: PUSH
24718: LD_INT 110
24720: PUSH
24721: LD_INT 111
24723: PUSH
24724: LD_INT 112
24726: PUSH
24727: LD_INT 113
24729: PUSH
24730: LD_INT 114
24732: PUSH
24733: LD_INT 116
24735: PUSH
24736: LD_INT 117
24738: PUSH
24739: LD_INT 118
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: ST_TO_ADDR
24765: GO 25164
24767: LD_INT 18
24769: DOUBLE
24770: EQUAL
24771: IFTRUE 24775
24773: GO 24923
24775: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24776: LD_ADDR_VAR 0 2
24780: PUSH
24781: LD_INT 2
24783: PUSH
24784: LD_INT 4
24786: PUSH
24787: LD_INT 5
24789: PUSH
24790: LD_INT 7
24792: PUSH
24793: LD_INT 11
24795: PUSH
24796: LD_INT 12
24798: PUSH
24799: LD_INT 15
24801: PUSH
24802: LD_INT 16
24804: PUSH
24805: LD_INT 20
24807: PUSH
24808: LD_INT 21
24810: PUSH
24811: LD_INT 22
24813: PUSH
24814: LD_INT 23
24816: PUSH
24817: LD_INT 25
24819: PUSH
24820: LD_INT 26
24822: PUSH
24823: LD_INT 30
24825: PUSH
24826: LD_INT 31
24828: PUSH
24829: LD_INT 32
24831: PUSH
24832: LD_INT 33
24834: PUSH
24835: LD_INT 34
24837: PUSH
24838: LD_INT 35
24840: PUSH
24841: LD_INT 36
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 101
24869: PUSH
24870: LD_INT 102
24872: PUSH
24873: LD_INT 103
24875: PUSH
24876: LD_INT 106
24878: PUSH
24879: LD_INT 108
24881: PUSH
24882: LD_INT 112
24884: PUSH
24885: LD_INT 113
24887: PUSH
24888: LD_INT 114
24890: PUSH
24891: LD_INT 115
24893: PUSH
24894: LD_INT 116
24896: PUSH
24897: LD_INT 117
24899: PUSH
24900: LD_INT 118
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: ST_TO_ADDR
24921: GO 25164
24923: LD_INT 19
24925: DOUBLE
24926: EQUAL
24927: IFTRUE 24931
24929: GO 25163
24931: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24932: LD_ADDR_VAR 0 2
24936: PUSH
24937: LD_INT 1
24939: PUSH
24940: LD_INT 2
24942: PUSH
24943: LD_INT 3
24945: PUSH
24946: LD_INT 4
24948: PUSH
24949: LD_INT 5
24951: PUSH
24952: LD_INT 6
24954: PUSH
24955: LD_INT 7
24957: PUSH
24958: LD_INT 8
24960: PUSH
24961: LD_INT 9
24963: PUSH
24964: LD_INT 10
24966: PUSH
24967: LD_INT 11
24969: PUSH
24970: LD_INT 12
24972: PUSH
24973: LD_INT 13
24975: PUSH
24976: LD_INT 14
24978: PUSH
24979: LD_INT 15
24981: PUSH
24982: LD_INT 16
24984: PUSH
24985: LD_INT 17
24987: PUSH
24988: LD_INT 18
24990: PUSH
24991: LD_INT 19
24993: PUSH
24994: LD_INT 20
24996: PUSH
24997: LD_INT 21
24999: PUSH
25000: LD_INT 22
25002: PUSH
25003: LD_INT 23
25005: PUSH
25006: LD_INT 24
25008: PUSH
25009: LD_INT 25
25011: PUSH
25012: LD_INT 26
25014: PUSH
25015: LD_INT 27
25017: PUSH
25018: LD_INT 28
25020: PUSH
25021: LD_INT 29
25023: PUSH
25024: LD_INT 30
25026: PUSH
25027: LD_INT 31
25029: PUSH
25030: LD_INT 32
25032: PUSH
25033: LD_INT 33
25035: PUSH
25036: LD_INT 34
25038: PUSH
25039: LD_INT 35
25041: PUSH
25042: LD_INT 36
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 101
25085: PUSH
25086: LD_INT 102
25088: PUSH
25089: LD_INT 103
25091: PUSH
25092: LD_INT 104
25094: PUSH
25095: LD_INT 105
25097: PUSH
25098: LD_INT 106
25100: PUSH
25101: LD_INT 107
25103: PUSH
25104: LD_INT 108
25106: PUSH
25107: LD_INT 109
25109: PUSH
25110: LD_INT 110
25112: PUSH
25113: LD_INT 111
25115: PUSH
25116: LD_INT 112
25118: PUSH
25119: LD_INT 113
25121: PUSH
25122: LD_INT 114
25124: PUSH
25125: LD_INT 115
25127: PUSH
25128: LD_INT 116
25130: PUSH
25131: LD_INT 117
25133: PUSH
25134: LD_INT 118
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: ST_TO_ADDR
25161: GO 25164
25163: POP
// end else
25164: GO 25395
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25166: LD_ADDR_VAR 0 2
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: LD_INT 2
25176: PUSH
25177: LD_INT 3
25179: PUSH
25180: LD_INT 4
25182: PUSH
25183: LD_INT 5
25185: PUSH
25186: LD_INT 6
25188: PUSH
25189: LD_INT 7
25191: PUSH
25192: LD_INT 8
25194: PUSH
25195: LD_INT 9
25197: PUSH
25198: LD_INT 10
25200: PUSH
25201: LD_INT 11
25203: PUSH
25204: LD_INT 12
25206: PUSH
25207: LD_INT 13
25209: PUSH
25210: LD_INT 14
25212: PUSH
25213: LD_INT 15
25215: PUSH
25216: LD_INT 16
25218: PUSH
25219: LD_INT 17
25221: PUSH
25222: LD_INT 18
25224: PUSH
25225: LD_INT 19
25227: PUSH
25228: LD_INT 20
25230: PUSH
25231: LD_INT 21
25233: PUSH
25234: LD_INT 22
25236: PUSH
25237: LD_INT 23
25239: PUSH
25240: LD_INT 24
25242: PUSH
25243: LD_INT 25
25245: PUSH
25246: LD_INT 26
25248: PUSH
25249: LD_INT 27
25251: PUSH
25252: LD_INT 28
25254: PUSH
25255: LD_INT 29
25257: PUSH
25258: LD_INT 30
25260: PUSH
25261: LD_INT 31
25263: PUSH
25264: LD_INT 32
25266: PUSH
25267: LD_INT 33
25269: PUSH
25270: LD_INT 34
25272: PUSH
25273: LD_INT 35
25275: PUSH
25276: LD_INT 36
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 101
25319: PUSH
25320: LD_INT 102
25322: PUSH
25323: LD_INT 103
25325: PUSH
25326: LD_INT 104
25328: PUSH
25329: LD_INT 105
25331: PUSH
25332: LD_INT 106
25334: PUSH
25335: LD_INT 107
25337: PUSH
25338: LD_INT 108
25340: PUSH
25341: LD_INT 109
25343: PUSH
25344: LD_INT 110
25346: PUSH
25347: LD_INT 111
25349: PUSH
25350: LD_INT 112
25352: PUSH
25353: LD_INT 113
25355: PUSH
25356: LD_INT 114
25358: PUSH
25359: LD_INT 115
25361: PUSH
25362: LD_INT 116
25364: PUSH
25365: LD_INT 117
25367: PUSH
25368: LD_INT 118
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: ST_TO_ADDR
// if result then
25395: LD_VAR 0 2
25399: IFFALSE 26185
// begin normal :=  ;
25401: LD_ADDR_VAR 0 5
25405: PUSH
25406: LD_STRING 
25408: ST_TO_ADDR
// hardcore :=  ;
25409: LD_ADDR_VAR 0 6
25413: PUSH
25414: LD_STRING 
25416: ST_TO_ADDR
// active :=  ;
25417: LD_ADDR_VAR 0 7
25421: PUSH
25422: LD_STRING 
25424: ST_TO_ADDR
// for i = 1 to normalCounter do
25425: LD_ADDR_VAR 0 8
25429: PUSH
25430: DOUBLE
25431: LD_INT 1
25433: DEC
25434: ST_TO_ADDR
25435: LD_EXP 70
25439: PUSH
25440: FOR_TO
25441: IFFALSE 25542
// begin tmp := 0 ;
25443: LD_ADDR_VAR 0 3
25447: PUSH
25448: LD_STRING 0
25450: ST_TO_ADDR
// if result [ 1 ] then
25451: LD_VAR 0 2
25455: PUSH
25456: LD_INT 1
25458: ARRAY
25459: IFFALSE 25524
// if result [ 1 ] [ 1 ] = i then
25461: LD_VAR 0 2
25465: PUSH
25466: LD_INT 1
25468: ARRAY
25469: PUSH
25470: LD_INT 1
25472: ARRAY
25473: PUSH
25474: LD_VAR 0 8
25478: EQUAL
25479: IFFALSE 25524
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25481: LD_ADDR_VAR 0 2
25485: PUSH
25486: LD_VAR 0 2
25490: PPUSH
25491: LD_INT 1
25493: PPUSH
25494: LD_VAR 0 2
25498: PUSH
25499: LD_INT 1
25501: ARRAY
25502: PPUSH
25503: LD_INT 1
25505: PPUSH
25506: CALL_OW 3
25510: PPUSH
25511: CALL_OW 1
25515: ST_TO_ADDR
// tmp := 1 ;
25516: LD_ADDR_VAR 0 3
25520: PUSH
25521: LD_STRING 1
25523: ST_TO_ADDR
// end ; normal := normal & tmp ;
25524: LD_ADDR_VAR 0 5
25528: PUSH
25529: LD_VAR 0 5
25533: PUSH
25534: LD_VAR 0 3
25538: STR
25539: ST_TO_ADDR
// end ;
25540: GO 25440
25542: POP
25543: POP
// for i = 1 to hardcoreCounter do
25544: LD_ADDR_VAR 0 8
25548: PUSH
25549: DOUBLE
25550: LD_INT 1
25552: DEC
25553: ST_TO_ADDR
25554: LD_EXP 71
25558: PUSH
25559: FOR_TO
25560: IFFALSE 25665
// begin tmp := 0 ;
25562: LD_ADDR_VAR 0 3
25566: PUSH
25567: LD_STRING 0
25569: ST_TO_ADDR
// if result [ 2 ] then
25570: LD_VAR 0 2
25574: PUSH
25575: LD_INT 2
25577: ARRAY
25578: IFFALSE 25647
// if result [ 2 ] [ 1 ] = 100 + i then
25580: LD_VAR 0 2
25584: PUSH
25585: LD_INT 2
25587: ARRAY
25588: PUSH
25589: LD_INT 1
25591: ARRAY
25592: PUSH
25593: LD_INT 100
25595: PUSH
25596: LD_VAR 0 8
25600: PLUS
25601: EQUAL
25602: IFFALSE 25647
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25604: LD_ADDR_VAR 0 2
25608: PUSH
25609: LD_VAR 0 2
25613: PPUSH
25614: LD_INT 2
25616: PPUSH
25617: LD_VAR 0 2
25621: PUSH
25622: LD_INT 2
25624: ARRAY
25625: PPUSH
25626: LD_INT 1
25628: PPUSH
25629: CALL_OW 3
25633: PPUSH
25634: CALL_OW 1
25638: ST_TO_ADDR
// tmp := 1 ;
25639: LD_ADDR_VAR 0 3
25643: PUSH
25644: LD_STRING 1
25646: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25647: LD_ADDR_VAR 0 6
25651: PUSH
25652: LD_VAR 0 6
25656: PUSH
25657: LD_VAR 0 3
25661: STR
25662: ST_TO_ADDR
// end ;
25663: GO 25559
25665: POP
25666: POP
// if isGameLoad then
25667: LD_VAR 0 1
25671: IFFALSE 26146
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25673: LD_ADDR_VAR 0 4
25677: PUSH
25678: LD_EXP 74
25682: PUSH
25683: LD_EXP 73
25687: PUSH
25688: LD_EXP 75
25692: PUSH
25693: LD_EXP 72
25697: PUSH
25698: LD_EXP 76
25702: PUSH
25703: LD_EXP 77
25707: PUSH
25708: LD_EXP 78
25712: PUSH
25713: LD_EXP 79
25717: PUSH
25718: LD_EXP 80
25722: PUSH
25723: LD_EXP 81
25727: PUSH
25728: LD_EXP 82
25732: PUSH
25733: LD_EXP 83
25737: PUSH
25738: LD_EXP 84
25742: PUSH
25743: LD_EXP 85
25747: PUSH
25748: LD_EXP 93
25752: PUSH
25753: LD_EXP 94
25757: PUSH
25758: LD_EXP 95
25762: PUSH
25763: LD_EXP 96
25767: PUSH
25768: LD_EXP 98
25772: PUSH
25773: LD_EXP 99
25777: PUSH
25778: LD_EXP 100
25782: PUSH
25783: LD_EXP 103
25787: PUSH
25788: LD_EXP 105
25792: PUSH
25793: LD_EXP 106
25797: PUSH
25798: LD_EXP 107
25802: PUSH
25803: LD_EXP 109
25807: PUSH
25808: LD_EXP 110
25812: PUSH
25813: LD_EXP 113
25817: PUSH
25818: LD_EXP 114
25822: PUSH
25823: LD_EXP 115
25827: PUSH
25828: LD_EXP 116
25832: PUSH
25833: LD_EXP 117
25837: PUSH
25838: LD_EXP 118
25842: PUSH
25843: LD_EXP 119
25847: PUSH
25848: LD_EXP 120
25852: PUSH
25853: LD_EXP 121
25857: PUSH
25858: LD_EXP 86
25862: PUSH
25863: LD_EXP 87
25867: PUSH
25868: LD_EXP 90
25872: PUSH
25873: LD_EXP 91
25877: PUSH
25878: LD_EXP 92
25882: PUSH
25883: LD_EXP 88
25887: PUSH
25888: LD_EXP 89
25892: PUSH
25893: LD_EXP 97
25897: PUSH
25898: LD_EXP 101
25902: PUSH
25903: LD_EXP 102
25907: PUSH
25908: LD_EXP 104
25912: PUSH
25913: LD_EXP 108
25917: PUSH
25918: LD_EXP 111
25922: PUSH
25923: LD_EXP 112
25927: PUSH
25928: LD_EXP 122
25932: PUSH
25933: LD_EXP 123
25937: PUSH
25938: LD_EXP 124
25942: PUSH
25943: LD_EXP 125
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: ST_TO_ADDR
// tmp :=  ;
26004: LD_ADDR_VAR 0 3
26008: PUSH
26009: LD_STRING 
26011: ST_TO_ADDR
// for i = 1 to normalCounter do
26012: LD_ADDR_VAR 0 8
26016: PUSH
26017: DOUBLE
26018: LD_INT 1
26020: DEC
26021: ST_TO_ADDR
26022: LD_EXP 70
26026: PUSH
26027: FOR_TO
26028: IFFALSE 26064
// begin if flags [ i ] then
26030: LD_VAR 0 4
26034: PUSH
26035: LD_VAR 0 8
26039: ARRAY
26040: IFFALSE 26062
// tmp := tmp & i & ; ;
26042: LD_ADDR_VAR 0 3
26046: PUSH
26047: LD_VAR 0 3
26051: PUSH
26052: LD_VAR 0 8
26056: STR
26057: PUSH
26058: LD_STRING ;
26060: STR
26061: ST_TO_ADDR
// end ;
26062: GO 26027
26064: POP
26065: POP
// for i = 1 to hardcoreCounter do
26066: LD_ADDR_VAR 0 8
26070: PUSH
26071: DOUBLE
26072: LD_INT 1
26074: DEC
26075: ST_TO_ADDR
26076: LD_EXP 71
26080: PUSH
26081: FOR_TO
26082: IFFALSE 26128
// begin if flags [ normalCounter + i ] then
26084: LD_VAR 0 4
26088: PUSH
26089: LD_EXP 70
26093: PUSH
26094: LD_VAR 0 8
26098: PLUS
26099: ARRAY
26100: IFFALSE 26126
// tmp := tmp & ( 100 + i ) & ; ;
26102: LD_ADDR_VAR 0 3
26106: PUSH
26107: LD_VAR 0 3
26111: PUSH
26112: LD_INT 100
26114: PUSH
26115: LD_VAR 0 8
26119: PLUS
26120: STR
26121: PUSH
26122: LD_STRING ;
26124: STR
26125: ST_TO_ADDR
// end ;
26126: GO 26081
26128: POP
26129: POP
// if tmp then
26130: LD_VAR 0 3
26134: IFFALSE 26146
// active := tmp ;
26136: LD_ADDR_VAR 0 7
26140: PUSH
26141: LD_VAR 0 3
26145: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26146: LD_STRING getStreamItemsFromMission("
26148: PUSH
26149: LD_VAR 0 5
26153: STR
26154: PUSH
26155: LD_STRING ","
26157: STR
26158: PUSH
26159: LD_VAR 0 6
26163: STR
26164: PUSH
26165: LD_STRING ","
26167: STR
26168: PUSH
26169: LD_VAR 0 7
26173: STR
26174: PUSH
26175: LD_STRING ")
26177: STR
26178: PPUSH
26179: CALL_OW 559
// end else
26183: GO 26192
// ToLua ( getStreamItemsFromMission("","","") ) ;
26185: LD_STRING getStreamItemsFromMission("","","")
26187: PPUSH
26188: CALL_OW 559
// end ;
26192: LD_VAR 0 2
26196: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26197: LD_EXP 69
26201: PUSH
26202: LD_EXP 74
26206: AND
26207: IFFALSE 26331
26209: GO 26211
26211: DISABLE
26212: LD_INT 0
26214: PPUSH
26215: PPUSH
// begin enable ;
26216: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26217: LD_ADDR_VAR 0 2
26221: PUSH
26222: LD_INT 22
26224: PUSH
26225: LD_OWVAR 2
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 2
26236: PUSH
26237: LD_INT 34
26239: PUSH
26240: LD_INT 7
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 34
26249: PUSH
26250: LD_INT 45
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 34
26259: PUSH
26260: LD_INT 28
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 34
26269: PUSH
26270: LD_INT 47
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PPUSH
26288: CALL_OW 69
26292: ST_TO_ADDR
// if not tmp then
26293: LD_VAR 0 2
26297: NOT
26298: IFFALSE 26302
// exit ;
26300: GO 26331
// for i in tmp do
26302: LD_ADDR_VAR 0 1
26306: PUSH
26307: LD_VAR 0 2
26311: PUSH
26312: FOR_IN
26313: IFFALSE 26329
// begin SetLives ( i , 0 ) ;
26315: LD_VAR 0 1
26319: PPUSH
26320: LD_INT 0
26322: PPUSH
26323: CALL_OW 234
// end ;
26327: GO 26312
26329: POP
26330: POP
// end ;
26331: PPOPN 2
26333: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26334: LD_EXP 69
26338: PUSH
26339: LD_EXP 75
26343: AND
26344: IFFALSE 26428
26346: GO 26348
26348: DISABLE
26349: LD_INT 0
26351: PPUSH
26352: PPUSH
// begin enable ;
26353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26354: LD_ADDR_VAR 0 2
26358: PUSH
26359: LD_INT 22
26361: PUSH
26362: LD_OWVAR 2
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 32
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PPUSH
26385: CALL_OW 69
26389: ST_TO_ADDR
// if not tmp then
26390: LD_VAR 0 2
26394: NOT
26395: IFFALSE 26399
// exit ;
26397: GO 26428
// for i in tmp do
26399: LD_ADDR_VAR 0 1
26403: PUSH
26404: LD_VAR 0 2
26408: PUSH
26409: FOR_IN
26410: IFFALSE 26426
// begin SetLives ( i , 0 ) ;
26412: LD_VAR 0 1
26416: PPUSH
26417: LD_INT 0
26419: PPUSH
26420: CALL_OW 234
// end ;
26424: GO 26409
26426: POP
26427: POP
// end ;
26428: PPOPN 2
26430: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26431: LD_EXP 69
26435: PUSH
26436: LD_EXP 72
26440: AND
26441: IFFALSE 26534
26443: GO 26445
26445: DISABLE
26446: LD_INT 0
26448: PPUSH
// begin enable ;
26449: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26450: LD_ADDR_VAR 0 1
26454: PUSH
26455: LD_INT 22
26457: PUSH
26458: LD_OWVAR 2
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 25
26472: PUSH
26473: LD_INT 5
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 25
26482: PUSH
26483: LD_INT 9
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 25
26492: PUSH
26493: LD_INT 8
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PPUSH
26510: CALL_OW 69
26514: PUSH
26515: FOR_IN
26516: IFFALSE 26532
// begin SetClass ( i , 1 ) ;
26518: LD_VAR 0 1
26522: PPUSH
26523: LD_INT 1
26525: PPUSH
26526: CALL_OW 336
// end ;
26530: GO 26515
26532: POP
26533: POP
// end ;
26534: PPOPN 1
26536: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26537: LD_EXP 69
26541: PUSH
26542: LD_EXP 73
26546: AND
26547: PUSH
26548: LD_OWVAR 65
26552: PUSH
26553: LD_INT 7
26555: LESS
26556: AND
26557: IFFALSE 26571
26559: GO 26561
26561: DISABLE
// begin enable ;
26562: ENABLE
// game_speed := 7 ;
26563: LD_ADDR_OWVAR 65
26567: PUSH
26568: LD_INT 7
26570: ST_TO_ADDR
// end ;
26571: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26572: LD_EXP 69
26576: PUSH
26577: LD_EXP 76
26581: AND
26582: IFFALSE 26784
26584: GO 26586
26586: DISABLE
26587: LD_INT 0
26589: PPUSH
26590: PPUSH
26591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26592: LD_ADDR_VAR 0 3
26596: PUSH
26597: LD_INT 81
26599: PUSH
26600: LD_OWVAR 2
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 21
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PPUSH
26623: CALL_OW 69
26627: ST_TO_ADDR
// if not tmp then
26628: LD_VAR 0 3
26632: NOT
26633: IFFALSE 26637
// exit ;
26635: GO 26784
// if tmp > 5 then
26637: LD_VAR 0 3
26641: PUSH
26642: LD_INT 5
26644: GREATER
26645: IFFALSE 26657
// k := 5 else
26647: LD_ADDR_VAR 0 2
26651: PUSH
26652: LD_INT 5
26654: ST_TO_ADDR
26655: GO 26667
// k := tmp ;
26657: LD_ADDR_VAR 0 2
26661: PUSH
26662: LD_VAR 0 3
26666: ST_TO_ADDR
// for i := 1 to k do
26667: LD_ADDR_VAR 0 1
26671: PUSH
26672: DOUBLE
26673: LD_INT 1
26675: DEC
26676: ST_TO_ADDR
26677: LD_VAR 0 2
26681: PUSH
26682: FOR_TO
26683: IFFALSE 26782
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26685: LD_VAR 0 3
26689: PUSH
26690: LD_VAR 0 1
26694: ARRAY
26695: PPUSH
26696: LD_VAR 0 1
26700: PUSH
26701: LD_INT 4
26703: MOD
26704: PUSH
26705: LD_INT 1
26707: PLUS
26708: PPUSH
26709: CALL_OW 259
26713: PUSH
26714: LD_INT 10
26716: LESS
26717: IFFALSE 26780
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26719: LD_VAR 0 3
26723: PUSH
26724: LD_VAR 0 1
26728: ARRAY
26729: PPUSH
26730: LD_VAR 0 1
26734: PUSH
26735: LD_INT 4
26737: MOD
26738: PUSH
26739: LD_INT 1
26741: PLUS
26742: PPUSH
26743: LD_VAR 0 3
26747: PUSH
26748: LD_VAR 0 1
26752: ARRAY
26753: PPUSH
26754: LD_VAR 0 1
26758: PUSH
26759: LD_INT 4
26761: MOD
26762: PUSH
26763: LD_INT 1
26765: PLUS
26766: PPUSH
26767: CALL_OW 259
26771: PUSH
26772: LD_INT 1
26774: PLUS
26775: PPUSH
26776: CALL_OW 237
26780: GO 26682
26782: POP
26783: POP
// end ;
26784: PPOPN 3
26786: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26787: LD_EXP 69
26791: PUSH
26792: LD_EXP 77
26796: AND
26797: IFFALSE 26817
26799: GO 26801
26801: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26802: LD_INT 4
26804: PPUSH
26805: LD_OWVAR 2
26809: PPUSH
26810: LD_INT 0
26812: PPUSH
26813: CALL_OW 324
26817: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26818: LD_EXP 69
26822: PUSH
26823: LD_EXP 106
26827: AND
26828: IFFALSE 26848
26830: GO 26832
26832: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26833: LD_INT 19
26835: PPUSH
26836: LD_OWVAR 2
26840: PPUSH
26841: LD_INT 0
26843: PPUSH
26844: CALL_OW 324
26848: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26849: LD_EXP 69
26853: PUSH
26854: LD_EXP 78
26858: AND
26859: IFFALSE 26961
26861: GO 26863
26863: DISABLE
26864: LD_INT 0
26866: PPUSH
26867: PPUSH
// begin enable ;
26868: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26869: LD_ADDR_VAR 0 2
26873: PUSH
26874: LD_INT 22
26876: PUSH
26877: LD_OWVAR 2
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 2
26888: PUSH
26889: LD_INT 34
26891: PUSH
26892: LD_INT 11
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 34
26901: PUSH
26902: LD_INT 30
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PPUSH
26918: CALL_OW 69
26922: ST_TO_ADDR
// if not tmp then
26923: LD_VAR 0 2
26927: NOT
26928: IFFALSE 26932
// exit ;
26930: GO 26961
// for i in tmp do
26932: LD_ADDR_VAR 0 1
26936: PUSH
26937: LD_VAR 0 2
26941: PUSH
26942: FOR_IN
26943: IFFALSE 26959
// begin SetLives ( i , 0 ) ;
26945: LD_VAR 0 1
26949: PPUSH
26950: LD_INT 0
26952: PPUSH
26953: CALL_OW 234
// end ;
26957: GO 26942
26959: POP
26960: POP
// end ;
26961: PPOPN 2
26963: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26964: LD_EXP 69
26968: PUSH
26969: LD_EXP 79
26973: AND
26974: IFFALSE 26994
26976: GO 26978
26978: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26979: LD_INT 32
26981: PPUSH
26982: LD_OWVAR 2
26986: PPUSH
26987: LD_INT 0
26989: PPUSH
26990: CALL_OW 324
26994: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26995: LD_EXP 69
26999: PUSH
27000: LD_EXP 80
27004: AND
27005: IFFALSE 27186
27007: GO 27009
27009: DISABLE
27010: LD_INT 0
27012: PPUSH
27013: PPUSH
27014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27015: LD_ADDR_VAR 0 2
27019: PUSH
27020: LD_INT 22
27022: PUSH
27023: LD_OWVAR 2
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 33
27034: PUSH
27035: LD_INT 3
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PPUSH
27046: CALL_OW 69
27050: ST_TO_ADDR
// if not tmp then
27051: LD_VAR 0 2
27055: NOT
27056: IFFALSE 27060
// exit ;
27058: GO 27186
// side := 0 ;
27060: LD_ADDR_VAR 0 3
27064: PUSH
27065: LD_INT 0
27067: ST_TO_ADDR
// for i := 1 to 8 do
27068: LD_ADDR_VAR 0 1
27072: PUSH
27073: DOUBLE
27074: LD_INT 1
27076: DEC
27077: ST_TO_ADDR
27078: LD_INT 8
27080: PUSH
27081: FOR_TO
27082: IFFALSE 27130
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27084: LD_OWVAR 2
27088: PUSH
27089: LD_VAR 0 1
27093: NONEQUAL
27094: PUSH
27095: LD_OWVAR 2
27099: PPUSH
27100: LD_VAR 0 1
27104: PPUSH
27105: CALL_OW 81
27109: PUSH
27110: LD_INT 2
27112: EQUAL
27113: AND
27114: IFFALSE 27128
// begin side := i ;
27116: LD_ADDR_VAR 0 3
27120: PUSH
27121: LD_VAR 0 1
27125: ST_TO_ADDR
// break ;
27126: GO 27130
// end ;
27128: GO 27081
27130: POP
27131: POP
// if not side then
27132: LD_VAR 0 3
27136: NOT
27137: IFFALSE 27141
// exit ;
27139: GO 27186
// for i := 1 to tmp do
27141: LD_ADDR_VAR 0 1
27145: PUSH
27146: DOUBLE
27147: LD_INT 1
27149: DEC
27150: ST_TO_ADDR
27151: LD_VAR 0 2
27155: PUSH
27156: FOR_TO
27157: IFFALSE 27184
// if Prob ( 60 ) then
27159: LD_INT 60
27161: PPUSH
27162: CALL_OW 13
27166: IFFALSE 27182
// SetSide ( i , side ) ;
27168: LD_VAR 0 1
27172: PPUSH
27173: LD_VAR 0 3
27177: PPUSH
27178: CALL_OW 235
27182: GO 27156
27184: POP
27185: POP
// end ;
27186: PPOPN 3
27188: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27189: LD_EXP 69
27193: PUSH
27194: LD_EXP 82
27198: AND
27199: IFFALSE 27318
27201: GO 27203
27203: DISABLE
27204: LD_INT 0
27206: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27207: LD_ADDR_VAR 0 1
27211: PUSH
27212: LD_INT 22
27214: PUSH
27215: LD_OWVAR 2
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 21
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 3
27236: PUSH
27237: LD_INT 23
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: LIST
27255: PPUSH
27256: CALL_OW 69
27260: PUSH
27261: FOR_IN
27262: IFFALSE 27316
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27264: LD_VAR 0 1
27268: PPUSH
27269: CALL_OW 257
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: LD_INT 2
27279: PUSH
27280: LD_INT 3
27282: PUSH
27283: LD_INT 4
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: IN
27292: IFFALSE 27314
// SetClass ( un , rand ( 1 , 4 ) ) ;
27294: LD_VAR 0 1
27298: PPUSH
27299: LD_INT 1
27301: PPUSH
27302: LD_INT 4
27304: PPUSH
27305: CALL_OW 12
27309: PPUSH
27310: CALL_OW 336
27314: GO 27261
27316: POP
27317: POP
// end ;
27318: PPOPN 1
27320: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27321: LD_EXP 69
27325: PUSH
27326: LD_EXP 81
27330: AND
27331: IFFALSE 27410
27333: GO 27335
27335: DISABLE
27336: LD_INT 0
27338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27339: LD_ADDR_VAR 0 1
27343: PUSH
27344: LD_INT 22
27346: PUSH
27347: LD_OWVAR 2
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 21
27358: PUSH
27359: LD_INT 3
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PPUSH
27370: CALL_OW 69
27374: ST_TO_ADDR
// if not tmp then
27375: LD_VAR 0 1
27379: NOT
27380: IFFALSE 27384
// exit ;
27382: GO 27410
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27384: LD_VAR 0 1
27388: PUSH
27389: LD_INT 1
27391: PPUSH
27392: LD_VAR 0 1
27396: PPUSH
27397: CALL_OW 12
27401: ARRAY
27402: PPUSH
27403: LD_INT 100
27405: PPUSH
27406: CALL_OW 234
// end ;
27410: PPOPN 1
27412: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27413: LD_EXP 69
27417: PUSH
27418: LD_EXP 83
27422: AND
27423: IFFALSE 27521
27425: GO 27427
27427: DISABLE
27428: LD_INT 0
27430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27431: LD_ADDR_VAR 0 1
27435: PUSH
27436: LD_INT 22
27438: PUSH
27439: LD_OWVAR 2
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 21
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PPUSH
27462: CALL_OW 69
27466: ST_TO_ADDR
// if not tmp then
27467: LD_VAR 0 1
27471: NOT
27472: IFFALSE 27476
// exit ;
27474: GO 27521
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27476: LD_VAR 0 1
27480: PUSH
27481: LD_INT 1
27483: PPUSH
27484: LD_VAR 0 1
27488: PPUSH
27489: CALL_OW 12
27493: ARRAY
27494: PPUSH
27495: LD_INT 1
27497: PPUSH
27498: LD_INT 4
27500: PPUSH
27501: CALL_OW 12
27505: PPUSH
27506: LD_INT 3000
27508: PPUSH
27509: LD_INT 9000
27511: PPUSH
27512: CALL_OW 12
27516: PPUSH
27517: CALL_OW 492
// end ;
27521: PPOPN 1
27523: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27524: LD_EXP 69
27528: PUSH
27529: LD_EXP 84
27533: AND
27534: IFFALSE 27554
27536: GO 27538
27538: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27539: LD_INT 1
27541: PPUSH
27542: LD_OWVAR 2
27546: PPUSH
27547: LD_INT 0
27549: PPUSH
27550: CALL_OW 324
27554: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27555: LD_EXP 69
27559: PUSH
27560: LD_EXP 85
27564: AND
27565: IFFALSE 27648
27567: GO 27569
27569: DISABLE
27570: LD_INT 0
27572: PPUSH
27573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27574: LD_ADDR_VAR 0 2
27578: PUSH
27579: LD_INT 22
27581: PUSH
27582: LD_OWVAR 2
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 21
27593: PUSH
27594: LD_INT 3
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PPUSH
27605: CALL_OW 69
27609: ST_TO_ADDR
// if not tmp then
27610: LD_VAR 0 2
27614: NOT
27615: IFFALSE 27619
// exit ;
27617: GO 27648
// for i in tmp do
27619: LD_ADDR_VAR 0 1
27623: PUSH
27624: LD_VAR 0 2
27628: PUSH
27629: FOR_IN
27630: IFFALSE 27646
// SetBLevel ( i , 10 ) ;
27632: LD_VAR 0 1
27636: PPUSH
27637: LD_INT 10
27639: PPUSH
27640: CALL_OW 241
27644: GO 27629
27646: POP
27647: POP
// end ;
27648: PPOPN 2
27650: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27651: LD_EXP 69
27655: PUSH
27656: LD_EXP 86
27660: AND
27661: IFFALSE 27772
27663: GO 27665
27665: DISABLE
27666: LD_INT 0
27668: PPUSH
27669: PPUSH
27670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27671: LD_ADDR_VAR 0 3
27675: PUSH
27676: LD_INT 22
27678: PUSH
27679: LD_OWVAR 2
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 25
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PPUSH
27702: CALL_OW 69
27706: ST_TO_ADDR
// if not tmp then
27707: LD_VAR 0 3
27711: NOT
27712: IFFALSE 27716
// exit ;
27714: GO 27772
// un := tmp [ rand ( 1 , tmp ) ] ;
27716: LD_ADDR_VAR 0 2
27720: PUSH
27721: LD_VAR 0 3
27725: PUSH
27726: LD_INT 1
27728: PPUSH
27729: LD_VAR 0 3
27733: PPUSH
27734: CALL_OW 12
27738: ARRAY
27739: ST_TO_ADDR
// if Crawls ( un ) then
27740: LD_VAR 0 2
27744: PPUSH
27745: CALL_OW 318
27749: IFFALSE 27760
// ComWalk ( un ) ;
27751: LD_VAR 0 2
27755: PPUSH
27756: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27760: LD_VAR 0 2
27764: PPUSH
27765: LD_INT 5
27767: PPUSH
27768: CALL_OW 336
// end ;
27772: PPOPN 3
27774: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27775: LD_EXP 69
27779: PUSH
27780: LD_EXP 87
27784: AND
27785: PUSH
27786: LD_OWVAR 67
27790: PUSH
27791: LD_INT 4
27793: LESS
27794: AND
27795: IFFALSE 27814
27797: GO 27799
27799: DISABLE
// begin Difficulty := Difficulty + 1 ;
27800: LD_ADDR_OWVAR 67
27804: PUSH
27805: LD_OWVAR 67
27809: PUSH
27810: LD_INT 1
27812: PLUS
27813: ST_TO_ADDR
// end ;
27814: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27815: LD_EXP 69
27819: PUSH
27820: LD_EXP 88
27824: AND
27825: IFFALSE 27928
27827: GO 27829
27829: DISABLE
27830: LD_INT 0
27832: PPUSH
// begin for i := 1 to 5 do
27833: LD_ADDR_VAR 0 1
27837: PUSH
27838: DOUBLE
27839: LD_INT 1
27841: DEC
27842: ST_TO_ADDR
27843: LD_INT 5
27845: PUSH
27846: FOR_TO
27847: IFFALSE 27926
// begin uc_nation := nation_nature ;
27849: LD_ADDR_OWVAR 21
27853: PUSH
27854: LD_INT 0
27856: ST_TO_ADDR
// uc_side := 0 ;
27857: LD_ADDR_OWVAR 20
27861: PUSH
27862: LD_INT 0
27864: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27865: LD_ADDR_OWVAR 29
27869: PUSH
27870: LD_INT 12
27872: PUSH
27873: LD_INT 12
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: ST_TO_ADDR
// hc_agressivity := 20 ;
27880: LD_ADDR_OWVAR 35
27884: PUSH
27885: LD_INT 20
27887: ST_TO_ADDR
// hc_class := class_tiger ;
27888: LD_ADDR_OWVAR 28
27892: PUSH
27893: LD_INT 14
27895: ST_TO_ADDR
// hc_gallery :=  ;
27896: LD_ADDR_OWVAR 33
27900: PUSH
27901: LD_STRING 
27903: ST_TO_ADDR
// hc_name :=  ;
27904: LD_ADDR_OWVAR 26
27908: PUSH
27909: LD_STRING 
27911: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27912: CALL_OW 44
27916: PPUSH
27917: LD_INT 0
27919: PPUSH
27920: CALL_OW 51
// end ;
27924: GO 27846
27926: POP
27927: POP
// end ;
27928: PPOPN 1
27930: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27931: LD_EXP 69
27935: PUSH
27936: LD_EXP 89
27940: AND
27941: IFFALSE 27950
27943: GO 27945
27945: DISABLE
// StreamSibBomb ;
27946: CALL 27951 0 0
27950: END
// export function StreamSibBomb ; var i , x , y ; begin
27951: LD_INT 0
27953: PPUSH
27954: PPUSH
27955: PPUSH
27956: PPUSH
// result := false ;
27957: LD_ADDR_VAR 0 1
27961: PUSH
27962: LD_INT 0
27964: ST_TO_ADDR
// for i := 1 to 16 do
27965: LD_ADDR_VAR 0 2
27969: PUSH
27970: DOUBLE
27971: LD_INT 1
27973: DEC
27974: ST_TO_ADDR
27975: LD_INT 16
27977: PUSH
27978: FOR_TO
27979: IFFALSE 28178
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27981: LD_ADDR_VAR 0 3
27985: PUSH
27986: LD_INT 10
27988: PUSH
27989: LD_INT 20
27991: PUSH
27992: LD_INT 30
27994: PUSH
27995: LD_INT 40
27997: PUSH
27998: LD_INT 50
28000: PUSH
28001: LD_INT 60
28003: PUSH
28004: LD_INT 70
28006: PUSH
28007: LD_INT 80
28009: PUSH
28010: LD_INT 90
28012: PUSH
28013: LD_INT 100
28015: PUSH
28016: LD_INT 110
28018: PUSH
28019: LD_INT 120
28021: PUSH
28022: LD_INT 130
28024: PUSH
28025: LD_INT 140
28027: PUSH
28028: LD_INT 150
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: PPUSH
28051: LD_INT 15
28053: PPUSH
28054: CALL_OW 12
28058: ARRAY
28059: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28060: LD_ADDR_VAR 0 4
28064: PUSH
28065: LD_INT 10
28067: PUSH
28068: LD_INT 20
28070: PUSH
28071: LD_INT 30
28073: PUSH
28074: LD_INT 40
28076: PUSH
28077: LD_INT 50
28079: PUSH
28080: LD_INT 60
28082: PUSH
28083: LD_INT 70
28085: PUSH
28086: LD_INT 80
28088: PUSH
28089: LD_INT 90
28091: PUSH
28092: LD_INT 100
28094: PUSH
28095: LD_INT 110
28097: PUSH
28098: LD_INT 120
28100: PUSH
28101: LD_INT 130
28103: PUSH
28104: LD_INT 140
28106: PUSH
28107: LD_INT 150
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 1
28129: PPUSH
28130: LD_INT 15
28132: PPUSH
28133: CALL_OW 12
28137: ARRAY
28138: ST_TO_ADDR
// if ValidHex ( x , y ) then
28139: LD_VAR 0 3
28143: PPUSH
28144: LD_VAR 0 4
28148: PPUSH
28149: CALL_OW 488
28153: IFFALSE 28176
// begin result := [ x , y ] ;
28155: LD_ADDR_VAR 0 1
28159: PUSH
28160: LD_VAR 0 3
28164: PUSH
28165: LD_VAR 0 4
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: ST_TO_ADDR
// break ;
28174: GO 28178
// end ; end ;
28176: GO 27978
28178: POP
28179: POP
// if result then
28180: LD_VAR 0 1
28184: IFFALSE 28244
// begin ToLua ( playSibBomb() ) ;
28186: LD_STRING playSibBomb()
28188: PPUSH
28189: CALL_OW 559
// wait ( 0 0$14 ) ;
28193: LD_INT 490
28195: PPUSH
28196: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28200: LD_VAR 0 1
28204: PUSH
28205: LD_INT 1
28207: ARRAY
28208: PPUSH
28209: LD_VAR 0 1
28213: PUSH
28214: LD_INT 2
28216: ARRAY
28217: PPUSH
28218: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28222: LD_VAR 0 1
28226: PUSH
28227: LD_INT 1
28229: ARRAY
28230: PPUSH
28231: LD_VAR 0 1
28235: PUSH
28236: LD_INT 2
28238: ARRAY
28239: PPUSH
28240: CALL_OW 429
// end ; end ;
28244: LD_VAR 0 1
28248: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28249: LD_EXP 69
28253: PUSH
28254: LD_EXP 91
28258: AND
28259: IFFALSE 28271
28261: GO 28263
28263: DISABLE
// YouLost (  ) ;
28264: LD_STRING 
28266: PPUSH
28267: CALL_OW 104
28271: END
// every 0 0$1 trigger StreamModeActive and sFog do
28272: LD_EXP 69
28276: PUSH
28277: LD_EXP 90
28281: AND
28282: IFFALSE 28296
28284: GO 28286
28286: DISABLE
// FogOff ( your_side ) ;
28287: LD_OWVAR 2
28291: PPUSH
28292: CALL_OW 344
28296: END
// every 0 0$1 trigger StreamModeActive and sSun do
28297: LD_EXP 69
28301: PUSH
28302: LD_EXP 92
28306: AND
28307: IFFALSE 28335
28309: GO 28311
28311: DISABLE
// begin solar_recharge_percent := 0 ;
28312: LD_ADDR_OWVAR 79
28316: PUSH
28317: LD_INT 0
28319: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28320: LD_INT 10500
28322: PPUSH
28323: CALL_OW 67
// solar_recharge_percent := 100 ;
28327: LD_ADDR_OWVAR 79
28331: PUSH
28332: LD_INT 100
28334: ST_TO_ADDR
// end ;
28335: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28336: LD_EXP 69
28340: PUSH
28341: LD_EXP 93
28345: AND
28346: IFFALSE 28585
28348: GO 28350
28350: DISABLE
28351: LD_INT 0
28353: PPUSH
28354: PPUSH
28355: PPUSH
// begin tmp := [ ] ;
28356: LD_ADDR_VAR 0 3
28360: PUSH
28361: EMPTY
28362: ST_TO_ADDR
// for i := 1 to 6 do
28363: LD_ADDR_VAR 0 1
28367: PUSH
28368: DOUBLE
28369: LD_INT 1
28371: DEC
28372: ST_TO_ADDR
28373: LD_INT 6
28375: PUSH
28376: FOR_TO
28377: IFFALSE 28482
// begin uc_nation := nation_nature ;
28379: LD_ADDR_OWVAR 21
28383: PUSH
28384: LD_INT 0
28386: ST_TO_ADDR
// uc_side := 0 ;
28387: LD_ADDR_OWVAR 20
28391: PUSH
28392: LD_INT 0
28394: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28395: LD_ADDR_OWVAR 29
28399: PUSH
28400: LD_INT 12
28402: PUSH
28403: LD_INT 12
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: ST_TO_ADDR
// hc_agressivity := 20 ;
28410: LD_ADDR_OWVAR 35
28414: PUSH
28415: LD_INT 20
28417: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28418: LD_ADDR_OWVAR 28
28422: PUSH
28423: LD_INT 17
28425: ST_TO_ADDR
// hc_gallery :=  ;
28426: LD_ADDR_OWVAR 33
28430: PUSH
28431: LD_STRING 
28433: ST_TO_ADDR
// hc_name :=  ;
28434: LD_ADDR_OWVAR 26
28438: PUSH
28439: LD_STRING 
28441: ST_TO_ADDR
// un := CreateHuman ;
28442: LD_ADDR_VAR 0 2
28446: PUSH
28447: CALL_OW 44
28451: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28452: LD_VAR 0 2
28456: PPUSH
28457: LD_INT 1
28459: PPUSH
28460: CALL_OW 51
// tmp := tmp ^ un ;
28464: LD_ADDR_VAR 0 3
28468: PUSH
28469: LD_VAR 0 3
28473: PUSH
28474: LD_VAR 0 2
28478: ADD
28479: ST_TO_ADDR
// end ;
28480: GO 28376
28482: POP
28483: POP
// repeat wait ( 0 0$1 ) ;
28484: LD_INT 35
28486: PPUSH
28487: CALL_OW 67
// for un in tmp do
28491: LD_ADDR_VAR 0 2
28495: PUSH
28496: LD_VAR 0 3
28500: PUSH
28501: FOR_IN
28502: IFFALSE 28576
// begin if IsDead ( un ) then
28504: LD_VAR 0 2
28508: PPUSH
28509: CALL_OW 301
28513: IFFALSE 28533
// begin tmp := tmp diff un ;
28515: LD_ADDR_VAR 0 3
28519: PUSH
28520: LD_VAR 0 3
28524: PUSH
28525: LD_VAR 0 2
28529: DIFF
28530: ST_TO_ADDR
// continue ;
28531: GO 28501
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28533: LD_VAR 0 2
28537: PPUSH
28538: LD_INT 3
28540: PUSH
28541: LD_INT 22
28543: PUSH
28544: LD_INT 0
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PPUSH
28555: CALL_OW 69
28559: PPUSH
28560: LD_VAR 0 2
28564: PPUSH
28565: CALL_OW 74
28569: PPUSH
28570: CALL_OW 115
// end ;
28574: GO 28501
28576: POP
28577: POP
// until not tmp ;
28578: LD_VAR 0 3
28582: NOT
28583: IFFALSE 28484
// end ;
28585: PPOPN 3
28587: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28588: LD_EXP 69
28592: PUSH
28593: LD_EXP 94
28597: AND
28598: IFFALSE 28652
28600: GO 28602
28602: DISABLE
// begin ToLua ( displayTroll(); ) ;
28603: LD_STRING displayTroll();
28605: PPUSH
28606: CALL_OW 559
// wait ( 3 3$00 ) ;
28610: LD_INT 6300
28612: PPUSH
28613: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28617: LD_STRING hideTroll();
28619: PPUSH
28620: CALL_OW 559
// wait ( 1 1$00 ) ;
28624: LD_INT 2100
28626: PPUSH
28627: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28631: LD_STRING displayTroll();
28633: PPUSH
28634: CALL_OW 559
// wait ( 1 1$00 ) ;
28638: LD_INT 2100
28640: PPUSH
28641: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28645: LD_STRING hideTroll();
28647: PPUSH
28648: CALL_OW 559
// end ;
28652: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28653: LD_EXP 69
28657: PUSH
28658: LD_EXP 95
28662: AND
28663: IFFALSE 28726
28665: GO 28667
28667: DISABLE
28668: LD_INT 0
28670: PPUSH
// begin p := 0 ;
28671: LD_ADDR_VAR 0 1
28675: PUSH
28676: LD_INT 0
28678: ST_TO_ADDR
// repeat game_speed := 1 ;
28679: LD_ADDR_OWVAR 65
28683: PUSH
28684: LD_INT 1
28686: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28687: LD_INT 35
28689: PPUSH
28690: CALL_OW 67
// p := p + 1 ;
28694: LD_ADDR_VAR 0 1
28698: PUSH
28699: LD_VAR 0 1
28703: PUSH
28704: LD_INT 1
28706: PLUS
28707: ST_TO_ADDR
// until p >= 60 ;
28708: LD_VAR 0 1
28712: PUSH
28713: LD_INT 60
28715: GREATEREQUAL
28716: IFFALSE 28679
// game_speed := 4 ;
28718: LD_ADDR_OWVAR 65
28722: PUSH
28723: LD_INT 4
28725: ST_TO_ADDR
// end ;
28726: PPOPN 1
28728: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28729: LD_EXP 69
28733: PUSH
28734: LD_EXP 96
28738: AND
28739: IFFALSE 28885
28741: GO 28743
28743: DISABLE
28744: LD_INT 0
28746: PPUSH
28747: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28748: LD_ADDR_VAR 0 1
28752: PUSH
28753: LD_INT 22
28755: PUSH
28756: LD_OWVAR 2
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 2
28767: PUSH
28768: LD_INT 30
28770: PUSH
28771: LD_INT 0
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 30
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PPUSH
28797: CALL_OW 69
28801: ST_TO_ADDR
// if not depot then
28802: LD_VAR 0 1
28806: NOT
28807: IFFALSE 28811
// exit ;
28809: GO 28885
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28811: LD_ADDR_VAR 0 2
28815: PUSH
28816: LD_VAR 0 1
28820: PUSH
28821: LD_INT 1
28823: PPUSH
28824: LD_VAR 0 1
28828: PPUSH
28829: CALL_OW 12
28833: ARRAY
28834: PPUSH
28835: CALL_OW 274
28839: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28840: LD_VAR 0 2
28844: PPUSH
28845: LD_INT 1
28847: PPUSH
28848: LD_INT 0
28850: PPUSH
28851: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28855: LD_VAR 0 2
28859: PPUSH
28860: LD_INT 2
28862: PPUSH
28863: LD_INT 0
28865: PPUSH
28866: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28870: LD_VAR 0 2
28874: PPUSH
28875: LD_INT 3
28877: PPUSH
28878: LD_INT 0
28880: PPUSH
28881: CALL_OW 277
// end ;
28885: PPOPN 2
28887: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28888: LD_EXP 69
28892: PUSH
28893: LD_EXP 97
28897: AND
28898: IFFALSE 28995
28900: GO 28902
28902: DISABLE
28903: LD_INT 0
28905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28906: LD_ADDR_VAR 0 1
28910: PUSH
28911: LD_INT 22
28913: PUSH
28914: LD_OWVAR 2
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 21
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 3
28935: PUSH
28936: LD_INT 23
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: LIST
28954: PPUSH
28955: CALL_OW 69
28959: ST_TO_ADDR
// if not tmp then
28960: LD_VAR 0 1
28964: NOT
28965: IFFALSE 28969
// exit ;
28967: GO 28995
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28969: LD_VAR 0 1
28973: PUSH
28974: LD_INT 1
28976: PPUSH
28977: LD_VAR 0 1
28981: PPUSH
28982: CALL_OW 12
28986: ARRAY
28987: PPUSH
28988: LD_INT 200
28990: PPUSH
28991: CALL_OW 234
// end ;
28995: PPOPN 1
28997: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28998: LD_EXP 69
29002: PUSH
29003: LD_EXP 98
29007: AND
29008: IFFALSE 29087
29010: GO 29012
29012: DISABLE
29013: LD_INT 0
29015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29016: LD_ADDR_VAR 0 1
29020: PUSH
29021: LD_INT 22
29023: PUSH
29024: LD_OWVAR 2
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 21
29035: PUSH
29036: LD_INT 2
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PPUSH
29047: CALL_OW 69
29051: ST_TO_ADDR
// if not tmp then
29052: LD_VAR 0 1
29056: NOT
29057: IFFALSE 29061
// exit ;
29059: GO 29087
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29061: LD_VAR 0 1
29065: PUSH
29066: LD_INT 1
29068: PPUSH
29069: LD_VAR 0 1
29073: PPUSH
29074: CALL_OW 12
29078: ARRAY
29079: PPUSH
29080: LD_INT 60
29082: PPUSH
29083: CALL_OW 234
// end ;
29087: PPOPN 1
29089: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29090: LD_EXP 69
29094: PUSH
29095: LD_EXP 99
29099: AND
29100: IFFALSE 29199
29102: GO 29104
29104: DISABLE
29105: LD_INT 0
29107: PPUSH
29108: PPUSH
// begin enable ;
29109: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29110: LD_ADDR_VAR 0 1
29114: PUSH
29115: LD_INT 22
29117: PUSH
29118: LD_OWVAR 2
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 61
29129: PUSH
29130: EMPTY
29131: LIST
29132: PUSH
29133: LD_INT 33
29135: PUSH
29136: LD_INT 2
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: PPUSH
29148: CALL_OW 69
29152: ST_TO_ADDR
// if not tmp then
29153: LD_VAR 0 1
29157: NOT
29158: IFFALSE 29162
// exit ;
29160: GO 29199
// for i in tmp do
29162: LD_ADDR_VAR 0 2
29166: PUSH
29167: LD_VAR 0 1
29171: PUSH
29172: FOR_IN
29173: IFFALSE 29197
// if IsControledBy ( i ) then
29175: LD_VAR 0 2
29179: PPUSH
29180: CALL_OW 312
29184: IFFALSE 29195
// ComUnlink ( i ) ;
29186: LD_VAR 0 2
29190: PPUSH
29191: CALL_OW 136
29195: GO 29172
29197: POP
29198: POP
// end ;
29199: PPOPN 2
29201: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29202: LD_EXP 69
29206: PUSH
29207: LD_EXP 100
29211: AND
29212: IFFALSE 29352
29214: GO 29216
29216: DISABLE
29217: LD_INT 0
29219: PPUSH
29220: PPUSH
// begin ToLua ( displayPowell(); ) ;
29221: LD_STRING displayPowell();
29223: PPUSH
29224: CALL_OW 559
// uc_side := 0 ;
29228: LD_ADDR_OWVAR 20
29232: PUSH
29233: LD_INT 0
29235: ST_TO_ADDR
// uc_nation := 2 ;
29236: LD_ADDR_OWVAR 21
29240: PUSH
29241: LD_INT 2
29243: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29244: LD_ADDR_OWVAR 37
29248: PUSH
29249: LD_INT 14
29251: ST_TO_ADDR
// vc_engine := engine_siberite ;
29252: LD_ADDR_OWVAR 39
29256: PUSH
29257: LD_INT 3
29259: ST_TO_ADDR
// vc_control := control_apeman ;
29260: LD_ADDR_OWVAR 38
29264: PUSH
29265: LD_INT 5
29267: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29268: LD_ADDR_OWVAR 40
29272: PUSH
29273: LD_INT 29
29275: ST_TO_ADDR
// un := CreateVehicle ;
29276: LD_ADDR_VAR 0 2
29280: PUSH
29281: CALL_OW 45
29285: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29286: LD_VAR 0 2
29290: PPUSH
29291: LD_INT 1
29293: PPUSH
29294: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29298: LD_INT 35
29300: PPUSH
29301: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29305: LD_VAR 0 2
29309: PPUSH
29310: LD_INT 22
29312: PUSH
29313: LD_OWVAR 2
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PPUSH
29322: CALL_OW 69
29326: PPUSH
29327: LD_VAR 0 2
29331: PPUSH
29332: CALL_OW 74
29336: PPUSH
29337: CALL_OW 115
// until IsDead ( un ) ;
29341: LD_VAR 0 2
29345: PPUSH
29346: CALL_OW 301
29350: IFFALSE 29298
// end ;
29352: PPOPN 2
29354: END
// every 0 0$1 trigger StreamModeActive and sStu do
29355: LD_EXP 69
29359: PUSH
29360: LD_EXP 108
29364: AND
29365: IFFALSE 29381
29367: GO 29369
29369: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29370: LD_STRING displayStucuk();
29372: PPUSH
29373: CALL_OW 559
// ResetFog ;
29377: CALL_OW 335
// end ;
29381: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29382: LD_EXP 69
29386: PUSH
29387: LD_EXP 101
29391: AND
29392: IFFALSE 29533
29394: GO 29396
29396: DISABLE
29397: LD_INT 0
29399: PPUSH
29400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29401: LD_ADDR_VAR 0 2
29405: PUSH
29406: LD_INT 22
29408: PUSH
29409: LD_OWVAR 2
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 21
29420: PUSH
29421: LD_INT 1
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PPUSH
29432: CALL_OW 69
29436: ST_TO_ADDR
// if not tmp then
29437: LD_VAR 0 2
29441: NOT
29442: IFFALSE 29446
// exit ;
29444: GO 29533
// un := tmp [ rand ( 1 , tmp ) ] ;
29446: LD_ADDR_VAR 0 1
29450: PUSH
29451: LD_VAR 0 2
29455: PUSH
29456: LD_INT 1
29458: PPUSH
29459: LD_VAR 0 2
29463: PPUSH
29464: CALL_OW 12
29468: ARRAY
29469: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29470: LD_VAR 0 1
29474: PPUSH
29475: LD_INT 0
29477: PPUSH
29478: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29482: LD_VAR 0 1
29486: PPUSH
29487: LD_OWVAR 3
29491: PUSH
29492: LD_VAR 0 1
29496: DIFF
29497: PPUSH
29498: LD_VAR 0 1
29502: PPUSH
29503: CALL_OW 74
29507: PPUSH
29508: CALL_OW 115
// wait ( 0 0$20 ) ;
29512: LD_INT 700
29514: PPUSH
29515: CALL_OW 67
// SetSide ( un , your_side ) ;
29519: LD_VAR 0 1
29523: PPUSH
29524: LD_OWVAR 2
29528: PPUSH
29529: CALL_OW 235
// end ;
29533: PPOPN 2
29535: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29536: LD_EXP 69
29540: PUSH
29541: LD_EXP 102
29545: AND
29546: IFFALSE 29652
29548: GO 29550
29550: DISABLE
29551: LD_INT 0
29553: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29554: LD_ADDR_VAR 0 1
29558: PUSH
29559: LD_INT 22
29561: PUSH
29562: LD_OWVAR 2
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: LD_INT 30
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 30
29586: PUSH
29587: LD_INT 1
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PPUSH
29603: CALL_OW 69
29607: ST_TO_ADDR
// if not depot then
29608: LD_VAR 0 1
29612: NOT
29613: IFFALSE 29617
// exit ;
29615: GO 29652
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29617: LD_VAR 0 1
29621: PUSH
29622: LD_INT 1
29624: ARRAY
29625: PPUSH
29626: CALL_OW 250
29630: PPUSH
29631: LD_VAR 0 1
29635: PUSH
29636: LD_INT 1
29638: ARRAY
29639: PPUSH
29640: CALL_OW 251
29644: PPUSH
29645: LD_INT 70
29647: PPUSH
29648: CALL_OW 495
// end ;
29652: PPOPN 1
29654: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29655: LD_EXP 69
29659: PUSH
29660: LD_EXP 103
29664: AND
29665: IFFALSE 29876
29667: GO 29669
29669: DISABLE
29670: LD_INT 0
29672: PPUSH
29673: PPUSH
29674: PPUSH
29675: PPUSH
29676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29677: LD_ADDR_VAR 0 5
29681: PUSH
29682: LD_INT 22
29684: PUSH
29685: LD_OWVAR 2
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 21
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PPUSH
29708: CALL_OW 69
29712: ST_TO_ADDR
// if not tmp then
29713: LD_VAR 0 5
29717: NOT
29718: IFFALSE 29722
// exit ;
29720: GO 29876
// for i in tmp do
29722: LD_ADDR_VAR 0 1
29726: PUSH
29727: LD_VAR 0 5
29731: PUSH
29732: FOR_IN
29733: IFFALSE 29874
// begin d := rand ( 0 , 5 ) ;
29735: LD_ADDR_VAR 0 4
29739: PUSH
29740: LD_INT 0
29742: PPUSH
29743: LD_INT 5
29745: PPUSH
29746: CALL_OW 12
29750: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29751: LD_ADDR_VAR 0 2
29755: PUSH
29756: LD_VAR 0 1
29760: PPUSH
29761: CALL_OW 250
29765: PPUSH
29766: LD_VAR 0 4
29770: PPUSH
29771: LD_INT 3
29773: PPUSH
29774: LD_INT 12
29776: PPUSH
29777: CALL_OW 12
29781: PPUSH
29782: CALL_OW 272
29786: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29787: LD_ADDR_VAR 0 3
29791: PUSH
29792: LD_VAR 0 1
29796: PPUSH
29797: CALL_OW 251
29801: PPUSH
29802: LD_VAR 0 4
29806: PPUSH
29807: LD_INT 3
29809: PPUSH
29810: LD_INT 12
29812: PPUSH
29813: CALL_OW 12
29817: PPUSH
29818: CALL_OW 273
29822: ST_TO_ADDR
// if ValidHex ( x , y ) then
29823: LD_VAR 0 2
29827: PPUSH
29828: LD_VAR 0 3
29832: PPUSH
29833: CALL_OW 488
29837: IFFALSE 29872
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29839: LD_VAR 0 1
29843: PPUSH
29844: LD_VAR 0 2
29848: PPUSH
29849: LD_VAR 0 3
29853: PPUSH
29854: LD_INT 3
29856: PPUSH
29857: LD_INT 6
29859: PPUSH
29860: CALL_OW 12
29864: PPUSH
29865: LD_INT 1
29867: PPUSH
29868: CALL_OW 483
// end ;
29872: GO 29732
29874: POP
29875: POP
// end ;
29876: PPOPN 5
29878: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29879: LD_EXP 69
29883: PUSH
29884: LD_EXP 104
29888: AND
29889: IFFALSE 29983
29891: GO 29893
29893: DISABLE
29894: LD_INT 0
29896: PPUSH
29897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29898: LD_ADDR_VAR 0 2
29902: PUSH
29903: LD_INT 22
29905: PUSH
29906: LD_OWVAR 2
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 32
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 21
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PPUSH
29940: CALL_OW 69
29944: ST_TO_ADDR
// if not tmp then
29945: LD_VAR 0 2
29949: NOT
29950: IFFALSE 29954
// exit ;
29952: GO 29983
// for i in tmp do
29954: LD_ADDR_VAR 0 1
29958: PUSH
29959: LD_VAR 0 2
29963: PUSH
29964: FOR_IN
29965: IFFALSE 29981
// SetFuel ( i , 0 ) ;
29967: LD_VAR 0 1
29971: PPUSH
29972: LD_INT 0
29974: PPUSH
29975: CALL_OW 240
29979: GO 29964
29981: POP
29982: POP
// end ;
29983: PPOPN 2
29985: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29986: LD_EXP 69
29990: PUSH
29991: LD_EXP 105
29995: AND
29996: IFFALSE 30062
29998: GO 30000
30000: DISABLE
30001: LD_INT 0
30003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30004: LD_ADDR_VAR 0 1
30008: PUSH
30009: LD_INT 22
30011: PUSH
30012: LD_OWVAR 2
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 30
30023: PUSH
30024: LD_INT 29
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PPUSH
30035: CALL_OW 69
30039: ST_TO_ADDR
// if not tmp then
30040: LD_VAR 0 1
30044: NOT
30045: IFFALSE 30049
// exit ;
30047: GO 30062
// DestroyUnit ( tmp [ 1 ] ) ;
30049: LD_VAR 0 1
30053: PUSH
30054: LD_INT 1
30056: ARRAY
30057: PPUSH
30058: CALL_OW 65
// end ;
30062: PPOPN 1
30064: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30065: LD_EXP 69
30069: PUSH
30070: LD_EXP 107
30074: AND
30075: IFFALSE 30204
30077: GO 30079
30079: DISABLE
30080: LD_INT 0
30082: PPUSH
// begin uc_side := 0 ;
30083: LD_ADDR_OWVAR 20
30087: PUSH
30088: LD_INT 0
30090: ST_TO_ADDR
// uc_nation := nation_arabian ;
30091: LD_ADDR_OWVAR 21
30095: PUSH
30096: LD_INT 2
30098: ST_TO_ADDR
// hc_gallery :=  ;
30099: LD_ADDR_OWVAR 33
30103: PUSH
30104: LD_STRING 
30106: ST_TO_ADDR
// hc_name :=  ;
30107: LD_ADDR_OWVAR 26
30111: PUSH
30112: LD_STRING 
30114: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30115: LD_INT 1
30117: PPUSH
30118: LD_INT 11
30120: PPUSH
30121: LD_INT 10
30123: PPUSH
30124: CALL_OW 380
// un := CreateHuman ;
30128: LD_ADDR_VAR 0 1
30132: PUSH
30133: CALL_OW 44
30137: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30138: LD_VAR 0 1
30142: PPUSH
30143: LD_INT 1
30145: PPUSH
30146: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30150: LD_INT 35
30152: PPUSH
30153: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30157: LD_VAR 0 1
30161: PPUSH
30162: LD_INT 22
30164: PUSH
30165: LD_OWVAR 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PPUSH
30174: CALL_OW 69
30178: PPUSH
30179: LD_VAR 0 1
30183: PPUSH
30184: CALL_OW 74
30188: PPUSH
30189: CALL_OW 115
// until IsDead ( un ) ;
30193: LD_VAR 0 1
30197: PPUSH
30198: CALL_OW 301
30202: IFFALSE 30150
// end ;
30204: PPOPN 1
30206: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30207: LD_EXP 69
30211: PUSH
30212: LD_EXP 109
30216: AND
30217: IFFALSE 30229
30219: GO 30221
30221: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30222: LD_STRING earthquake(getX(game), 0, 32)
30224: PPUSH
30225: CALL_OW 559
30229: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30230: LD_EXP 69
30234: PUSH
30235: LD_EXP 110
30239: AND
30240: IFFALSE 30331
30242: GO 30244
30244: DISABLE
30245: LD_INT 0
30247: PPUSH
// begin enable ;
30248: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30249: LD_ADDR_VAR 0 1
30253: PUSH
30254: LD_INT 22
30256: PUSH
30257: LD_OWVAR 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 21
30268: PUSH
30269: LD_INT 2
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 33
30278: PUSH
30279: LD_INT 3
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: LIST
30290: PPUSH
30291: CALL_OW 69
30295: ST_TO_ADDR
// if not tmp then
30296: LD_VAR 0 1
30300: NOT
30301: IFFALSE 30305
// exit ;
30303: GO 30331
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30305: LD_VAR 0 1
30309: PUSH
30310: LD_INT 1
30312: PPUSH
30313: LD_VAR 0 1
30317: PPUSH
30318: CALL_OW 12
30322: ARRAY
30323: PPUSH
30324: LD_INT 1
30326: PPUSH
30327: CALL_OW 234
// end ;
30331: PPOPN 1
30333: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30334: LD_EXP 69
30338: PUSH
30339: LD_EXP 111
30343: AND
30344: IFFALSE 30485
30346: GO 30348
30348: DISABLE
30349: LD_INT 0
30351: PPUSH
30352: PPUSH
30353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30354: LD_ADDR_VAR 0 3
30358: PUSH
30359: LD_INT 22
30361: PUSH
30362: LD_OWVAR 2
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 25
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PPUSH
30385: CALL_OW 69
30389: ST_TO_ADDR
// if not tmp then
30390: LD_VAR 0 3
30394: NOT
30395: IFFALSE 30399
// exit ;
30397: GO 30485
// un := tmp [ rand ( 1 , tmp ) ] ;
30399: LD_ADDR_VAR 0 2
30403: PUSH
30404: LD_VAR 0 3
30408: PUSH
30409: LD_INT 1
30411: PPUSH
30412: LD_VAR 0 3
30416: PPUSH
30417: CALL_OW 12
30421: ARRAY
30422: ST_TO_ADDR
// if Crawls ( un ) then
30423: LD_VAR 0 2
30427: PPUSH
30428: CALL_OW 318
30432: IFFALSE 30443
// ComWalk ( un ) ;
30434: LD_VAR 0 2
30438: PPUSH
30439: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30443: LD_VAR 0 2
30447: PPUSH
30448: LD_INT 9
30450: PPUSH
30451: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30455: LD_INT 28
30457: PPUSH
30458: LD_OWVAR 2
30462: PPUSH
30463: LD_INT 2
30465: PPUSH
30466: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30470: LD_INT 29
30472: PPUSH
30473: LD_OWVAR 2
30477: PPUSH
30478: LD_INT 2
30480: PPUSH
30481: CALL_OW 322
// end ;
30485: PPOPN 3
30487: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30488: LD_EXP 69
30492: PUSH
30493: LD_EXP 112
30497: AND
30498: IFFALSE 30609
30500: GO 30502
30502: DISABLE
30503: LD_INT 0
30505: PPUSH
30506: PPUSH
30507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30508: LD_ADDR_VAR 0 3
30512: PUSH
30513: LD_INT 22
30515: PUSH
30516: LD_OWVAR 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 25
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PPUSH
30539: CALL_OW 69
30543: ST_TO_ADDR
// if not tmp then
30544: LD_VAR 0 3
30548: NOT
30549: IFFALSE 30553
// exit ;
30551: GO 30609
// un := tmp [ rand ( 1 , tmp ) ] ;
30553: LD_ADDR_VAR 0 2
30557: PUSH
30558: LD_VAR 0 3
30562: PUSH
30563: LD_INT 1
30565: PPUSH
30566: LD_VAR 0 3
30570: PPUSH
30571: CALL_OW 12
30575: ARRAY
30576: ST_TO_ADDR
// if Crawls ( un ) then
30577: LD_VAR 0 2
30581: PPUSH
30582: CALL_OW 318
30586: IFFALSE 30597
// ComWalk ( un ) ;
30588: LD_VAR 0 2
30592: PPUSH
30593: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30597: LD_VAR 0 2
30601: PPUSH
30602: LD_INT 8
30604: PPUSH
30605: CALL_OW 336
// end ;
30609: PPOPN 3
30611: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30612: LD_EXP 69
30616: PUSH
30617: LD_EXP 113
30621: AND
30622: IFFALSE 30766
30624: GO 30626
30626: DISABLE
30627: LD_INT 0
30629: PPUSH
30630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30631: LD_ADDR_VAR 0 2
30635: PUSH
30636: LD_INT 22
30638: PUSH
30639: LD_OWVAR 2
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 21
30650: PUSH
30651: LD_INT 2
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: LD_INT 34
30663: PUSH
30664: LD_INT 12
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 34
30673: PUSH
30674: LD_INT 51
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 34
30683: PUSH
30684: LD_INT 32
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: LIST
30701: PPUSH
30702: CALL_OW 69
30706: ST_TO_ADDR
// if not tmp then
30707: LD_VAR 0 2
30711: NOT
30712: IFFALSE 30716
// exit ;
30714: GO 30766
// for i in tmp do
30716: LD_ADDR_VAR 0 1
30720: PUSH
30721: LD_VAR 0 2
30725: PUSH
30726: FOR_IN
30727: IFFALSE 30764
// if GetCargo ( i , mat_artifact ) = 0 then
30729: LD_VAR 0 1
30733: PPUSH
30734: LD_INT 4
30736: PPUSH
30737: CALL_OW 289
30741: PUSH
30742: LD_INT 0
30744: EQUAL
30745: IFFALSE 30762
// SetCargo ( i , mat_siberit , 100 ) ;
30747: LD_VAR 0 1
30751: PPUSH
30752: LD_INT 3
30754: PPUSH
30755: LD_INT 100
30757: PPUSH
30758: CALL_OW 290
30762: GO 30726
30764: POP
30765: POP
// end ;
30766: PPOPN 2
30768: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30769: LD_EXP 69
30773: PUSH
30774: LD_EXP 114
30778: AND
30779: IFFALSE 30962
30781: GO 30783
30783: DISABLE
30784: LD_INT 0
30786: PPUSH
30787: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30788: LD_ADDR_VAR 0 2
30792: PUSH
30793: LD_INT 22
30795: PUSH
30796: LD_OWVAR 2
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PPUSH
30805: CALL_OW 69
30809: ST_TO_ADDR
// if not tmp then
30810: LD_VAR 0 2
30814: NOT
30815: IFFALSE 30819
// exit ;
30817: GO 30962
// for i := 1 to 2 do
30819: LD_ADDR_VAR 0 1
30823: PUSH
30824: DOUBLE
30825: LD_INT 1
30827: DEC
30828: ST_TO_ADDR
30829: LD_INT 2
30831: PUSH
30832: FOR_TO
30833: IFFALSE 30960
// begin uc_side := your_side ;
30835: LD_ADDR_OWVAR 20
30839: PUSH
30840: LD_OWVAR 2
30844: ST_TO_ADDR
// uc_nation := nation_american ;
30845: LD_ADDR_OWVAR 21
30849: PUSH
30850: LD_INT 1
30852: ST_TO_ADDR
// vc_chassis := us_morphling ;
30853: LD_ADDR_OWVAR 37
30857: PUSH
30858: LD_INT 5
30860: ST_TO_ADDR
// vc_engine := engine_siberite ;
30861: LD_ADDR_OWVAR 39
30865: PUSH
30866: LD_INT 3
30868: ST_TO_ADDR
// vc_control := control_computer ;
30869: LD_ADDR_OWVAR 38
30873: PUSH
30874: LD_INT 3
30876: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30877: LD_ADDR_OWVAR 40
30881: PUSH
30882: LD_INT 10
30884: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30885: LD_VAR 0 2
30889: PUSH
30890: LD_INT 1
30892: ARRAY
30893: PPUSH
30894: CALL_OW 310
30898: NOT
30899: IFFALSE 30946
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30901: CALL_OW 45
30905: PPUSH
30906: LD_VAR 0 2
30910: PUSH
30911: LD_INT 1
30913: ARRAY
30914: PPUSH
30915: CALL_OW 250
30919: PPUSH
30920: LD_VAR 0 2
30924: PUSH
30925: LD_INT 1
30927: ARRAY
30928: PPUSH
30929: CALL_OW 251
30933: PPUSH
30934: LD_INT 12
30936: PPUSH
30937: LD_INT 1
30939: PPUSH
30940: CALL_OW 50
30944: GO 30958
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30946: CALL_OW 45
30950: PPUSH
30951: LD_INT 1
30953: PPUSH
30954: CALL_OW 51
// end ;
30958: GO 30832
30960: POP
30961: POP
// end ;
30962: PPOPN 2
30964: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30965: LD_EXP 69
30969: PUSH
30970: LD_EXP 115
30974: AND
30975: IFFALSE 31197
30977: GO 30979
30979: DISABLE
30980: LD_INT 0
30982: PPUSH
30983: PPUSH
30984: PPUSH
30985: PPUSH
30986: PPUSH
30987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30988: LD_ADDR_VAR 0 6
30992: PUSH
30993: LD_INT 22
30995: PUSH
30996: LD_OWVAR 2
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 21
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 3
31017: PUSH
31018: LD_INT 23
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: LIST
31036: PPUSH
31037: CALL_OW 69
31041: ST_TO_ADDR
// if not tmp then
31042: LD_VAR 0 6
31046: NOT
31047: IFFALSE 31051
// exit ;
31049: GO 31197
// s1 := rand ( 1 , 4 ) ;
31051: LD_ADDR_VAR 0 2
31055: PUSH
31056: LD_INT 1
31058: PPUSH
31059: LD_INT 4
31061: PPUSH
31062: CALL_OW 12
31066: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31067: LD_ADDR_VAR 0 4
31071: PUSH
31072: LD_VAR 0 6
31076: PUSH
31077: LD_INT 1
31079: ARRAY
31080: PPUSH
31081: LD_VAR 0 2
31085: PPUSH
31086: CALL_OW 259
31090: ST_TO_ADDR
// if s1 = 1 then
31091: LD_VAR 0 2
31095: PUSH
31096: LD_INT 1
31098: EQUAL
31099: IFFALSE 31119
// s2 := rand ( 2 , 4 ) else
31101: LD_ADDR_VAR 0 3
31105: PUSH
31106: LD_INT 2
31108: PPUSH
31109: LD_INT 4
31111: PPUSH
31112: CALL_OW 12
31116: ST_TO_ADDR
31117: GO 31127
// s2 := 1 ;
31119: LD_ADDR_VAR 0 3
31123: PUSH
31124: LD_INT 1
31126: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31127: LD_ADDR_VAR 0 5
31131: PUSH
31132: LD_VAR 0 6
31136: PUSH
31137: LD_INT 1
31139: ARRAY
31140: PPUSH
31141: LD_VAR 0 3
31145: PPUSH
31146: CALL_OW 259
31150: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31151: LD_VAR 0 6
31155: PUSH
31156: LD_INT 1
31158: ARRAY
31159: PPUSH
31160: LD_VAR 0 2
31164: PPUSH
31165: LD_VAR 0 5
31169: PPUSH
31170: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31174: LD_VAR 0 6
31178: PUSH
31179: LD_INT 1
31181: ARRAY
31182: PPUSH
31183: LD_VAR 0 3
31187: PPUSH
31188: LD_VAR 0 4
31192: PPUSH
31193: CALL_OW 237
// end ;
31197: PPOPN 6
31199: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31200: LD_EXP 69
31204: PUSH
31205: LD_EXP 116
31209: AND
31210: IFFALSE 31289
31212: GO 31214
31214: DISABLE
31215: LD_INT 0
31217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31218: LD_ADDR_VAR 0 1
31222: PUSH
31223: LD_INT 22
31225: PUSH
31226: LD_OWVAR 2
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 30
31237: PUSH
31238: LD_INT 3
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PPUSH
31249: CALL_OW 69
31253: ST_TO_ADDR
// if not tmp then
31254: LD_VAR 0 1
31258: NOT
31259: IFFALSE 31263
// exit ;
31261: GO 31289
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31263: LD_VAR 0 1
31267: PUSH
31268: LD_INT 1
31270: PPUSH
31271: LD_VAR 0 1
31275: PPUSH
31276: CALL_OW 12
31280: ARRAY
31281: PPUSH
31282: LD_INT 1
31284: PPUSH
31285: CALL_OW 234
// end ;
31289: PPOPN 1
31291: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31292: LD_EXP 69
31296: PUSH
31297: LD_EXP 117
31301: AND
31302: IFFALSE 31414
31304: GO 31306
31306: DISABLE
31307: LD_INT 0
31309: PPUSH
31310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31311: LD_ADDR_VAR 0 2
31315: PUSH
31316: LD_INT 22
31318: PUSH
31319: LD_OWVAR 2
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: LD_INT 30
31333: PUSH
31334: LD_INT 27
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 30
31343: PUSH
31344: LD_INT 26
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 30
31353: PUSH
31354: LD_INT 28
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PPUSH
31371: CALL_OW 69
31375: ST_TO_ADDR
// if not tmp then
31376: LD_VAR 0 2
31380: NOT
31381: IFFALSE 31385
// exit ;
31383: GO 31414
// for i in tmp do
31385: LD_ADDR_VAR 0 1
31389: PUSH
31390: LD_VAR 0 2
31394: PUSH
31395: FOR_IN
31396: IFFALSE 31412
// SetLives ( i , 1 ) ;
31398: LD_VAR 0 1
31402: PPUSH
31403: LD_INT 1
31405: PPUSH
31406: CALL_OW 234
31410: GO 31395
31412: POP
31413: POP
// end ;
31414: PPOPN 2
31416: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31417: LD_EXP 69
31421: PUSH
31422: LD_EXP 118
31426: AND
31427: IFFALSE 31714
31429: GO 31431
31431: DISABLE
31432: LD_INT 0
31434: PPUSH
31435: PPUSH
31436: PPUSH
// begin i := rand ( 1 , 7 ) ;
31437: LD_ADDR_VAR 0 1
31441: PUSH
31442: LD_INT 1
31444: PPUSH
31445: LD_INT 7
31447: PPUSH
31448: CALL_OW 12
31452: ST_TO_ADDR
// case i of 1 :
31453: LD_VAR 0 1
31457: PUSH
31458: LD_INT 1
31460: DOUBLE
31461: EQUAL
31462: IFTRUE 31466
31464: GO 31476
31466: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31467: LD_STRING earthquake(getX(game), 0, 32)
31469: PPUSH
31470: CALL_OW 559
31474: GO 31714
31476: LD_INT 2
31478: DOUBLE
31479: EQUAL
31480: IFTRUE 31484
31482: GO 31498
31484: POP
// begin ToLua ( displayStucuk(); ) ;
31485: LD_STRING displayStucuk();
31487: PPUSH
31488: CALL_OW 559
// ResetFog ;
31492: CALL_OW 335
// end ; 3 :
31496: GO 31714
31498: LD_INT 3
31500: DOUBLE
31501: EQUAL
31502: IFTRUE 31506
31504: GO 31610
31506: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31507: LD_ADDR_VAR 0 2
31511: PUSH
31512: LD_INT 22
31514: PUSH
31515: LD_OWVAR 2
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 25
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PPUSH
31538: CALL_OW 69
31542: ST_TO_ADDR
// if not tmp then
31543: LD_VAR 0 2
31547: NOT
31548: IFFALSE 31552
// exit ;
31550: GO 31714
// un := tmp [ rand ( 1 , tmp ) ] ;
31552: LD_ADDR_VAR 0 3
31556: PUSH
31557: LD_VAR 0 2
31561: PUSH
31562: LD_INT 1
31564: PPUSH
31565: LD_VAR 0 2
31569: PPUSH
31570: CALL_OW 12
31574: ARRAY
31575: ST_TO_ADDR
// if Crawls ( un ) then
31576: LD_VAR 0 3
31580: PPUSH
31581: CALL_OW 318
31585: IFFALSE 31596
// ComWalk ( un ) ;
31587: LD_VAR 0 3
31591: PPUSH
31592: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31596: LD_VAR 0 3
31600: PPUSH
31601: LD_INT 8
31603: PPUSH
31604: CALL_OW 336
// end ; 4 :
31608: GO 31714
31610: LD_INT 4
31612: DOUBLE
31613: EQUAL
31614: IFTRUE 31618
31616: GO 31692
31618: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31619: LD_ADDR_VAR 0 2
31623: PUSH
31624: LD_INT 22
31626: PUSH
31627: LD_OWVAR 2
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 30
31638: PUSH
31639: LD_INT 29
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PPUSH
31650: CALL_OW 69
31654: ST_TO_ADDR
// if not tmp then
31655: LD_VAR 0 2
31659: NOT
31660: IFFALSE 31664
// exit ;
31662: GO 31714
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31664: LD_VAR 0 2
31668: PUSH
31669: LD_INT 1
31671: ARRAY
31672: PPUSH
31673: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31677: LD_VAR 0 2
31681: PUSH
31682: LD_INT 1
31684: ARRAY
31685: PPUSH
31686: CALL_OW 65
// end ; 5 .. 7 :
31690: GO 31714
31692: LD_INT 5
31694: DOUBLE
31695: GREATEREQUAL
31696: IFFALSE 31704
31698: LD_INT 7
31700: DOUBLE
31701: LESSEQUAL
31702: IFTRUE 31706
31704: GO 31713
31706: POP
// StreamSibBomb ; end ;
31707: CALL 27951 0 0
31711: GO 31714
31713: POP
// end ;
31714: PPOPN 3
31716: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31717: LD_EXP 69
31721: PUSH
31722: LD_EXP 119
31726: AND
31727: IFFALSE 31883
31729: GO 31731
31731: DISABLE
31732: LD_INT 0
31734: PPUSH
31735: PPUSH
31736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31737: LD_ADDR_VAR 0 2
31741: PUSH
31742: LD_INT 81
31744: PUSH
31745: LD_OWVAR 2
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: LD_INT 21
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 21
31769: PUSH
31770: LD_INT 2
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PPUSH
31786: CALL_OW 69
31790: ST_TO_ADDR
// if not tmp then
31791: LD_VAR 0 2
31795: NOT
31796: IFFALSE 31800
// exit ;
31798: GO 31883
// p := 0 ;
31800: LD_ADDR_VAR 0 3
31804: PUSH
31805: LD_INT 0
31807: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31808: LD_INT 35
31810: PPUSH
31811: CALL_OW 67
// p := p + 1 ;
31815: LD_ADDR_VAR 0 3
31819: PUSH
31820: LD_VAR 0 3
31824: PUSH
31825: LD_INT 1
31827: PLUS
31828: ST_TO_ADDR
// for i in tmp do
31829: LD_ADDR_VAR 0 1
31833: PUSH
31834: LD_VAR 0 2
31838: PUSH
31839: FOR_IN
31840: IFFALSE 31871
// if GetLives ( i ) < 1000 then
31842: LD_VAR 0 1
31846: PPUSH
31847: CALL_OW 256
31851: PUSH
31852: LD_INT 1000
31854: LESS
31855: IFFALSE 31869
// SetLives ( i , 1000 ) ;
31857: LD_VAR 0 1
31861: PPUSH
31862: LD_INT 1000
31864: PPUSH
31865: CALL_OW 234
31869: GO 31839
31871: POP
31872: POP
// until p > 20 ;
31873: LD_VAR 0 3
31877: PUSH
31878: LD_INT 20
31880: GREATER
31881: IFFALSE 31808
// end ;
31883: PPOPN 3
31885: END
// every 0 0$1 trigger StreamModeActive and sTime do
31886: LD_EXP 69
31890: PUSH
31891: LD_EXP 120
31895: AND
31896: IFFALSE 31931
31898: GO 31900
31900: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31901: LD_INT 28
31903: PPUSH
31904: LD_OWVAR 2
31908: PPUSH
31909: LD_INT 2
31911: PPUSH
31912: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31916: LD_INT 30
31918: PPUSH
31919: LD_OWVAR 2
31923: PPUSH
31924: LD_INT 2
31926: PPUSH
31927: CALL_OW 322
// end ;
31931: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31932: LD_EXP 69
31936: PUSH
31937: LD_EXP 121
31941: AND
31942: IFFALSE 32063
31944: GO 31946
31946: DISABLE
31947: LD_INT 0
31949: PPUSH
31950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31951: LD_ADDR_VAR 0 2
31955: PUSH
31956: LD_INT 22
31958: PUSH
31959: LD_OWVAR 2
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 21
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 3
31980: PUSH
31981: LD_INT 23
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: PPUSH
32000: CALL_OW 69
32004: ST_TO_ADDR
// if not tmp then
32005: LD_VAR 0 2
32009: NOT
32010: IFFALSE 32014
// exit ;
32012: GO 32063
// for i in tmp do
32014: LD_ADDR_VAR 0 1
32018: PUSH
32019: LD_VAR 0 2
32023: PUSH
32024: FOR_IN
32025: IFFALSE 32061
// begin if Crawls ( i ) then
32027: LD_VAR 0 1
32031: PPUSH
32032: CALL_OW 318
32036: IFFALSE 32047
// ComWalk ( i ) ;
32038: LD_VAR 0 1
32042: PPUSH
32043: CALL_OW 138
// SetClass ( i , 2 ) ;
32047: LD_VAR 0 1
32051: PPUSH
32052: LD_INT 2
32054: PPUSH
32055: CALL_OW 336
// end ;
32059: GO 32024
32061: POP
32062: POP
// end ;
32063: PPOPN 2
32065: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32066: LD_EXP 69
32070: PUSH
32071: LD_EXP 122
32075: AND
32076: IFFALSE 32364
32078: GO 32080
32080: DISABLE
32081: LD_INT 0
32083: PPUSH
32084: PPUSH
32085: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32086: LD_OWVAR 2
32090: PPUSH
32091: LD_INT 9
32093: PPUSH
32094: LD_INT 1
32096: PPUSH
32097: LD_INT 1
32099: PPUSH
32100: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32104: LD_INT 9
32106: PPUSH
32107: LD_OWVAR 2
32111: PPUSH
32112: CALL_OW 343
// uc_side := 9 ;
32116: LD_ADDR_OWVAR 20
32120: PUSH
32121: LD_INT 9
32123: ST_TO_ADDR
// uc_nation := 2 ;
32124: LD_ADDR_OWVAR 21
32128: PUSH
32129: LD_INT 2
32131: ST_TO_ADDR
// hc_name := Dark Warrior ;
32132: LD_ADDR_OWVAR 26
32136: PUSH
32137: LD_STRING Dark Warrior
32139: ST_TO_ADDR
// hc_gallery :=  ;
32140: LD_ADDR_OWVAR 33
32144: PUSH
32145: LD_STRING 
32147: ST_TO_ADDR
// hc_noskilllimit := true ;
32148: LD_ADDR_OWVAR 76
32152: PUSH
32153: LD_INT 1
32155: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32156: LD_ADDR_OWVAR 31
32160: PUSH
32161: LD_INT 30
32163: PUSH
32164: LD_INT 30
32166: PUSH
32167: LD_INT 30
32169: PUSH
32170: LD_INT 30
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: ST_TO_ADDR
// un := CreateHuman ;
32179: LD_ADDR_VAR 0 3
32183: PUSH
32184: CALL_OW 44
32188: ST_TO_ADDR
// hc_noskilllimit := false ;
32189: LD_ADDR_OWVAR 76
32193: PUSH
32194: LD_INT 0
32196: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32197: LD_VAR 0 3
32201: PPUSH
32202: LD_INT 1
32204: PPUSH
32205: CALL_OW 51
// ToLua ( playRanger() ) ;
32209: LD_STRING playRanger()
32211: PPUSH
32212: CALL_OW 559
// p := 0 ;
32216: LD_ADDR_VAR 0 2
32220: PUSH
32221: LD_INT 0
32223: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32224: LD_INT 35
32226: PPUSH
32227: CALL_OW 67
// p := p + 1 ;
32231: LD_ADDR_VAR 0 2
32235: PUSH
32236: LD_VAR 0 2
32240: PUSH
32241: LD_INT 1
32243: PLUS
32244: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32245: LD_VAR 0 3
32249: PPUSH
32250: CALL_OW 256
32254: PUSH
32255: LD_INT 1000
32257: LESS
32258: IFFALSE 32272
// SetLives ( un , 1000 ) ;
32260: LD_VAR 0 3
32264: PPUSH
32265: LD_INT 1000
32267: PPUSH
32268: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32272: LD_VAR 0 3
32276: PPUSH
32277: LD_INT 81
32279: PUSH
32280: LD_OWVAR 2
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 91
32291: PUSH
32292: LD_VAR 0 3
32296: PUSH
32297: LD_INT 30
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: LIST
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PPUSH
32309: CALL_OW 69
32313: PPUSH
32314: LD_VAR 0 3
32318: PPUSH
32319: CALL_OW 74
32323: PPUSH
32324: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32328: LD_VAR 0 2
32332: PUSH
32333: LD_INT 80
32335: GREATER
32336: PUSH
32337: LD_VAR 0 3
32341: PPUSH
32342: CALL_OW 301
32346: OR
32347: IFFALSE 32224
// if un then
32349: LD_VAR 0 3
32353: IFFALSE 32364
// RemoveUnit ( un ) ;
32355: LD_VAR 0 3
32359: PPUSH
32360: CALL_OW 64
// end ;
32364: PPOPN 3
32366: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32367: LD_EXP 123
32371: IFFALSE 32487
32373: GO 32375
32375: DISABLE
32376: LD_INT 0
32378: PPUSH
32379: PPUSH
32380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32381: LD_ADDR_VAR 0 2
32385: PUSH
32386: LD_INT 81
32388: PUSH
32389: LD_OWVAR 2
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 21
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PPUSH
32412: CALL_OW 69
32416: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32417: LD_STRING playComputer()
32419: PPUSH
32420: CALL_OW 559
// if not tmp then
32424: LD_VAR 0 2
32428: NOT
32429: IFFALSE 32433
// exit ;
32431: GO 32487
// for i in tmp do
32433: LD_ADDR_VAR 0 1
32437: PUSH
32438: LD_VAR 0 2
32442: PUSH
32443: FOR_IN
32444: IFFALSE 32485
// for j := 1 to 4 do
32446: LD_ADDR_VAR 0 3
32450: PUSH
32451: DOUBLE
32452: LD_INT 1
32454: DEC
32455: ST_TO_ADDR
32456: LD_INT 4
32458: PUSH
32459: FOR_TO
32460: IFFALSE 32481
// SetSkill ( i , j , 10 ) ;
32462: LD_VAR 0 1
32466: PPUSH
32467: LD_VAR 0 3
32471: PPUSH
32472: LD_INT 10
32474: PPUSH
32475: CALL_OW 237
32479: GO 32459
32481: POP
32482: POP
32483: GO 32443
32485: POP
32486: POP
// end ;
32487: PPOPN 3
32489: END
// every 0 0$1 trigger s30 do var i , tmp ;
32490: LD_EXP 124
32494: IFFALSE 32563
32496: GO 32498
32498: DISABLE
32499: LD_INT 0
32501: PPUSH
32502: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32503: LD_ADDR_VAR 0 2
32507: PUSH
32508: LD_INT 22
32510: PUSH
32511: LD_OWVAR 2
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PPUSH
32520: CALL_OW 69
32524: ST_TO_ADDR
// if not tmp then
32525: LD_VAR 0 2
32529: NOT
32530: IFFALSE 32534
// exit ;
32532: GO 32563
// for i in tmp do
32534: LD_ADDR_VAR 0 1
32538: PUSH
32539: LD_VAR 0 2
32543: PUSH
32544: FOR_IN
32545: IFFALSE 32561
// SetLives ( i , 300 ) ;
32547: LD_VAR 0 1
32551: PPUSH
32552: LD_INT 300
32554: PPUSH
32555: CALL_OW 234
32559: GO 32544
32561: POP
32562: POP
// end ;
32563: PPOPN 2
32565: END
// every 0 0$1 trigger s60 do var i , tmp ;
32566: LD_EXP 125
32570: IFFALSE 32639
32572: GO 32574
32574: DISABLE
32575: LD_INT 0
32577: PPUSH
32578: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32579: LD_ADDR_VAR 0 2
32583: PUSH
32584: LD_INT 22
32586: PUSH
32587: LD_OWVAR 2
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PPUSH
32596: CALL_OW 69
32600: ST_TO_ADDR
// if not tmp then
32601: LD_VAR 0 2
32605: NOT
32606: IFFALSE 32610
// exit ;
32608: GO 32639
// for i in tmp do
32610: LD_ADDR_VAR 0 1
32614: PUSH
32615: LD_VAR 0 2
32619: PUSH
32620: FOR_IN
32621: IFFALSE 32637
// SetLives ( i , 600 ) ;
32623: LD_VAR 0 1
32627: PPUSH
32628: LD_INT 600
32630: PPUSH
32631: CALL_OW 234
32635: GO 32620
32637: POP
32638: POP
// end ;
32639: PPOPN 2
32641: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32642: LD_INT 0
32644: PPUSH
// case cmd of 301 :
32645: LD_VAR 0 1
32649: PUSH
32650: LD_INT 301
32652: DOUBLE
32653: EQUAL
32654: IFTRUE 32658
32656: GO 32690
32658: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32659: LD_VAR 0 6
32663: PPUSH
32664: LD_VAR 0 7
32668: PPUSH
32669: LD_VAR 0 8
32673: PPUSH
32674: LD_VAR 0 4
32678: PPUSH
32679: LD_VAR 0 5
32683: PPUSH
32684: CALL 33891 0 5
32688: GO 32811
32690: LD_INT 302
32692: DOUBLE
32693: EQUAL
32694: IFTRUE 32698
32696: GO 32735
32698: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32699: LD_VAR 0 6
32703: PPUSH
32704: LD_VAR 0 7
32708: PPUSH
32709: LD_VAR 0 8
32713: PPUSH
32714: LD_VAR 0 9
32718: PPUSH
32719: LD_VAR 0 4
32723: PPUSH
32724: LD_VAR 0 5
32728: PPUSH
32729: CALL 33982 0 6
32733: GO 32811
32735: LD_INT 303
32737: DOUBLE
32738: EQUAL
32739: IFTRUE 32743
32741: GO 32780
32743: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32744: LD_VAR 0 6
32748: PPUSH
32749: LD_VAR 0 7
32753: PPUSH
32754: LD_VAR 0 8
32758: PPUSH
32759: LD_VAR 0 9
32763: PPUSH
32764: LD_VAR 0 4
32768: PPUSH
32769: LD_VAR 0 5
32773: PPUSH
32774: CALL 32816 0 6
32778: GO 32811
32780: LD_INT 304
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32810
32788: POP
// hHackTeleport ( unit , x , y ) ; end ;
32789: LD_VAR 0 2
32793: PPUSH
32794: LD_VAR 0 4
32798: PPUSH
32799: LD_VAR 0 5
32803: PPUSH
32804: CALL 34575 0 3
32808: GO 32811
32810: POP
// end ;
32811: LD_VAR 0 12
32815: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32816: LD_INT 0
32818: PPUSH
32819: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32820: LD_VAR 0 1
32824: PUSH
32825: LD_INT 1
32827: LESS
32828: PUSH
32829: LD_VAR 0 1
32833: PUSH
32834: LD_INT 3
32836: GREATER
32837: OR
32838: PUSH
32839: LD_VAR 0 5
32843: PPUSH
32844: LD_VAR 0 6
32848: PPUSH
32849: CALL_OW 428
32853: OR
32854: IFFALSE 32858
// exit ;
32856: GO 33578
// uc_side := your_side ;
32858: LD_ADDR_OWVAR 20
32862: PUSH
32863: LD_OWVAR 2
32867: ST_TO_ADDR
// uc_nation := nation ;
32868: LD_ADDR_OWVAR 21
32872: PUSH
32873: LD_VAR 0 1
32877: ST_TO_ADDR
// bc_level = 1 ;
32878: LD_ADDR_OWVAR 43
32882: PUSH
32883: LD_INT 1
32885: ST_TO_ADDR
// case btype of 1 :
32886: LD_VAR 0 2
32890: PUSH
32891: LD_INT 1
32893: DOUBLE
32894: EQUAL
32895: IFTRUE 32899
32897: GO 32910
32899: POP
// bc_type := b_depot ; 2 :
32900: LD_ADDR_OWVAR 42
32904: PUSH
32905: LD_INT 0
32907: ST_TO_ADDR
32908: GO 33522
32910: LD_INT 2
32912: DOUBLE
32913: EQUAL
32914: IFTRUE 32918
32916: GO 32929
32918: POP
// bc_type := b_warehouse ; 3 :
32919: LD_ADDR_OWVAR 42
32923: PUSH
32924: LD_INT 1
32926: ST_TO_ADDR
32927: GO 33522
32929: LD_INT 3
32931: DOUBLE
32932: EQUAL
32933: IFTRUE 32937
32935: GO 32948
32937: POP
// bc_type := b_lab ; 4 .. 9 :
32938: LD_ADDR_OWVAR 42
32942: PUSH
32943: LD_INT 6
32945: ST_TO_ADDR
32946: GO 33522
32948: LD_INT 4
32950: DOUBLE
32951: GREATEREQUAL
32952: IFFALSE 32960
32954: LD_INT 9
32956: DOUBLE
32957: LESSEQUAL
32958: IFTRUE 32962
32960: GO 33014
32962: POP
// begin bc_type := b_lab_half ;
32963: LD_ADDR_OWVAR 42
32967: PUSH
32968: LD_INT 7
32970: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32971: LD_ADDR_OWVAR 44
32975: PUSH
32976: LD_INT 10
32978: PUSH
32979: LD_INT 11
32981: PUSH
32982: LD_INT 12
32984: PUSH
32985: LD_INT 15
32987: PUSH
32988: LD_INT 14
32990: PUSH
32991: LD_INT 13
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: PUSH
33002: LD_VAR 0 2
33006: PUSH
33007: LD_INT 3
33009: MINUS
33010: ARRAY
33011: ST_TO_ADDR
// end ; 10 .. 13 :
33012: GO 33522
33014: LD_INT 10
33016: DOUBLE
33017: GREATEREQUAL
33018: IFFALSE 33026
33020: LD_INT 13
33022: DOUBLE
33023: LESSEQUAL
33024: IFTRUE 33028
33026: GO 33105
33028: POP
// begin bc_type := b_lab_full ;
33029: LD_ADDR_OWVAR 42
33033: PUSH
33034: LD_INT 8
33036: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33037: LD_ADDR_OWVAR 44
33041: PUSH
33042: LD_INT 10
33044: PUSH
33045: LD_INT 12
33047: PUSH
33048: LD_INT 14
33050: PUSH
33051: LD_INT 13
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: PUSH
33060: LD_VAR 0 2
33064: PUSH
33065: LD_INT 9
33067: MINUS
33068: ARRAY
33069: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33070: LD_ADDR_OWVAR 45
33074: PUSH
33075: LD_INT 11
33077: PUSH
33078: LD_INT 15
33080: PUSH
33081: LD_INT 12
33083: PUSH
33084: LD_INT 15
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: PUSH
33093: LD_VAR 0 2
33097: PUSH
33098: LD_INT 9
33100: MINUS
33101: ARRAY
33102: ST_TO_ADDR
// end ; 14 :
33103: GO 33522
33105: LD_INT 14
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33113
33111: GO 33124
33113: POP
// bc_type := b_workshop ; 15 :
33114: LD_ADDR_OWVAR 42
33118: PUSH
33119: LD_INT 2
33121: ST_TO_ADDR
33122: GO 33522
33124: LD_INT 15
33126: DOUBLE
33127: EQUAL
33128: IFTRUE 33132
33130: GO 33143
33132: POP
// bc_type := b_factory ; 16 :
33133: LD_ADDR_OWVAR 42
33137: PUSH
33138: LD_INT 3
33140: ST_TO_ADDR
33141: GO 33522
33143: LD_INT 16
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33162
33151: POP
// bc_type := b_ext_gun ; 17 :
33152: LD_ADDR_OWVAR 42
33156: PUSH
33157: LD_INT 17
33159: ST_TO_ADDR
33160: GO 33522
33162: LD_INT 17
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33198
33170: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33171: LD_ADDR_OWVAR 42
33175: PUSH
33176: LD_INT 19
33178: PUSH
33179: LD_INT 23
33181: PUSH
33182: LD_INT 19
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: LIST
33189: PUSH
33190: LD_VAR 0 1
33194: ARRAY
33195: ST_TO_ADDR
33196: GO 33522
33198: LD_INT 18
33200: DOUBLE
33201: EQUAL
33202: IFTRUE 33206
33204: GO 33217
33206: POP
// bc_type := b_ext_radar ; 19 :
33207: LD_ADDR_OWVAR 42
33211: PUSH
33212: LD_INT 20
33214: ST_TO_ADDR
33215: GO 33522
33217: LD_INT 19
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33225
33223: GO 33236
33225: POP
// bc_type := b_ext_radio ; 20 :
33226: LD_ADDR_OWVAR 42
33230: PUSH
33231: LD_INT 22
33233: ST_TO_ADDR
33234: GO 33522
33236: LD_INT 20
33238: DOUBLE
33239: EQUAL
33240: IFTRUE 33244
33242: GO 33255
33244: POP
// bc_type := b_ext_siberium ; 21 :
33245: LD_ADDR_OWVAR 42
33249: PUSH
33250: LD_INT 21
33252: ST_TO_ADDR
33253: GO 33522
33255: LD_INT 21
33257: DOUBLE
33258: EQUAL
33259: IFTRUE 33263
33261: GO 33274
33263: POP
// bc_type := b_ext_computer ; 22 :
33264: LD_ADDR_OWVAR 42
33268: PUSH
33269: LD_INT 24
33271: ST_TO_ADDR
33272: GO 33522
33274: LD_INT 22
33276: DOUBLE
33277: EQUAL
33278: IFTRUE 33282
33280: GO 33293
33282: POP
// bc_type := b_ext_track ; 23 :
33283: LD_ADDR_OWVAR 42
33287: PUSH
33288: LD_INT 16
33290: ST_TO_ADDR
33291: GO 33522
33293: LD_INT 23
33295: DOUBLE
33296: EQUAL
33297: IFTRUE 33301
33299: GO 33312
33301: POP
// bc_type := b_ext_laser ; 24 :
33302: LD_ADDR_OWVAR 42
33306: PUSH
33307: LD_INT 25
33309: ST_TO_ADDR
33310: GO 33522
33312: LD_INT 24
33314: DOUBLE
33315: EQUAL
33316: IFTRUE 33320
33318: GO 33331
33320: POP
// bc_type := b_control_tower ; 25 :
33321: LD_ADDR_OWVAR 42
33325: PUSH
33326: LD_INT 36
33328: ST_TO_ADDR
33329: GO 33522
33331: LD_INT 25
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33339
33337: GO 33350
33339: POP
// bc_type := b_breastwork ; 26 :
33340: LD_ADDR_OWVAR 42
33344: PUSH
33345: LD_INT 31
33347: ST_TO_ADDR
33348: GO 33522
33350: LD_INT 26
33352: DOUBLE
33353: EQUAL
33354: IFTRUE 33358
33356: GO 33369
33358: POP
// bc_type := b_bunker ; 27 :
33359: LD_ADDR_OWVAR 42
33363: PUSH
33364: LD_INT 32
33366: ST_TO_ADDR
33367: GO 33522
33369: LD_INT 27
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33377
33375: GO 33388
33377: POP
// bc_type := b_turret ; 28 :
33378: LD_ADDR_OWVAR 42
33382: PUSH
33383: LD_INT 33
33385: ST_TO_ADDR
33386: GO 33522
33388: LD_INT 28
33390: DOUBLE
33391: EQUAL
33392: IFTRUE 33396
33394: GO 33407
33396: POP
// bc_type := b_armoury ; 29 :
33397: LD_ADDR_OWVAR 42
33401: PUSH
33402: LD_INT 4
33404: ST_TO_ADDR
33405: GO 33522
33407: LD_INT 29
33409: DOUBLE
33410: EQUAL
33411: IFTRUE 33415
33413: GO 33426
33415: POP
// bc_type := b_barracks ; 30 :
33416: LD_ADDR_OWVAR 42
33420: PUSH
33421: LD_INT 5
33423: ST_TO_ADDR
33424: GO 33522
33426: LD_INT 30
33428: DOUBLE
33429: EQUAL
33430: IFTRUE 33434
33432: GO 33445
33434: POP
// bc_type := b_solar_power ; 31 :
33435: LD_ADDR_OWVAR 42
33439: PUSH
33440: LD_INT 27
33442: ST_TO_ADDR
33443: GO 33522
33445: LD_INT 31
33447: DOUBLE
33448: EQUAL
33449: IFTRUE 33453
33451: GO 33464
33453: POP
// bc_type := b_oil_power ; 32 :
33454: LD_ADDR_OWVAR 42
33458: PUSH
33459: LD_INT 26
33461: ST_TO_ADDR
33462: GO 33522
33464: LD_INT 32
33466: DOUBLE
33467: EQUAL
33468: IFTRUE 33472
33470: GO 33483
33472: POP
// bc_type := b_siberite_power ; 33 :
33473: LD_ADDR_OWVAR 42
33477: PUSH
33478: LD_INT 28
33480: ST_TO_ADDR
33481: GO 33522
33483: LD_INT 33
33485: DOUBLE
33486: EQUAL
33487: IFTRUE 33491
33489: GO 33502
33491: POP
// bc_type := b_oil_mine ; 34 :
33492: LD_ADDR_OWVAR 42
33496: PUSH
33497: LD_INT 29
33499: ST_TO_ADDR
33500: GO 33522
33502: LD_INT 34
33504: DOUBLE
33505: EQUAL
33506: IFTRUE 33510
33508: GO 33521
33510: POP
// bc_type := b_siberite_mine ; end ;
33511: LD_ADDR_OWVAR 42
33515: PUSH
33516: LD_INT 30
33518: ST_TO_ADDR
33519: GO 33522
33521: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33522: LD_ADDR_VAR 0 8
33526: PUSH
33527: LD_VAR 0 5
33531: PPUSH
33532: LD_VAR 0 6
33536: PPUSH
33537: LD_VAR 0 3
33541: PPUSH
33542: CALL_OW 47
33546: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33547: LD_OWVAR 42
33551: PUSH
33552: LD_INT 32
33554: PUSH
33555: LD_INT 33
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: IN
33562: IFFALSE 33578
// PlaceWeaponTurret ( b , weapon ) ;
33564: LD_VAR 0 8
33568: PPUSH
33569: LD_VAR 0 4
33573: PPUSH
33574: CALL_OW 431
// end ;
33578: LD_VAR 0 7
33582: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33583: LD_INT 0
33585: PPUSH
33586: PPUSH
33587: PPUSH
33588: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33589: LD_ADDR_VAR 0 4
33593: PUSH
33594: LD_INT 22
33596: PUSH
33597: LD_OWVAR 2
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: LD_INT 30
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 30
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PPUSH
33638: CALL_OW 69
33642: ST_TO_ADDR
// if not tmp then
33643: LD_VAR 0 4
33647: NOT
33648: IFFALSE 33652
// exit ;
33650: GO 33711
// for i in tmp do
33652: LD_ADDR_VAR 0 2
33656: PUSH
33657: LD_VAR 0 4
33661: PUSH
33662: FOR_IN
33663: IFFALSE 33709
// for j = 1 to 3 do
33665: LD_ADDR_VAR 0 3
33669: PUSH
33670: DOUBLE
33671: LD_INT 1
33673: DEC
33674: ST_TO_ADDR
33675: LD_INT 3
33677: PUSH
33678: FOR_TO
33679: IFFALSE 33705
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33681: LD_VAR 0 2
33685: PPUSH
33686: CALL_OW 274
33690: PPUSH
33691: LD_VAR 0 3
33695: PPUSH
33696: LD_INT 99999
33698: PPUSH
33699: CALL_OW 277
33703: GO 33678
33705: POP
33706: POP
33707: GO 33662
33709: POP
33710: POP
// end ;
33711: LD_VAR 0 1
33715: RET
// export function hHackSetLevel10 ; var i , j ; begin
33716: LD_INT 0
33718: PPUSH
33719: PPUSH
33720: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33721: LD_ADDR_VAR 0 2
33725: PUSH
33726: LD_INT 21
33728: PUSH
33729: LD_INT 1
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PPUSH
33736: CALL_OW 69
33740: PUSH
33741: FOR_IN
33742: IFFALSE 33794
// if IsSelected ( i ) then
33744: LD_VAR 0 2
33748: PPUSH
33749: CALL_OW 306
33753: IFFALSE 33792
// begin for j := 1 to 4 do
33755: LD_ADDR_VAR 0 3
33759: PUSH
33760: DOUBLE
33761: LD_INT 1
33763: DEC
33764: ST_TO_ADDR
33765: LD_INT 4
33767: PUSH
33768: FOR_TO
33769: IFFALSE 33790
// SetSkill ( i , j , 10 ) ;
33771: LD_VAR 0 2
33775: PPUSH
33776: LD_VAR 0 3
33780: PPUSH
33781: LD_INT 10
33783: PPUSH
33784: CALL_OW 237
33788: GO 33768
33790: POP
33791: POP
// end ;
33792: GO 33741
33794: POP
33795: POP
// end ;
33796: LD_VAR 0 1
33800: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33801: LD_INT 0
33803: PPUSH
33804: PPUSH
33805: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33806: LD_ADDR_VAR 0 2
33810: PUSH
33811: LD_INT 22
33813: PUSH
33814: LD_OWVAR 2
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 21
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PPUSH
33837: CALL_OW 69
33841: PUSH
33842: FOR_IN
33843: IFFALSE 33884
// begin for j := 1 to 4 do
33845: LD_ADDR_VAR 0 3
33849: PUSH
33850: DOUBLE
33851: LD_INT 1
33853: DEC
33854: ST_TO_ADDR
33855: LD_INT 4
33857: PUSH
33858: FOR_TO
33859: IFFALSE 33880
// SetSkill ( i , j , 10 ) ;
33861: LD_VAR 0 2
33865: PPUSH
33866: LD_VAR 0 3
33870: PPUSH
33871: LD_INT 10
33873: PPUSH
33874: CALL_OW 237
33878: GO 33858
33880: POP
33881: POP
// end ;
33882: GO 33842
33884: POP
33885: POP
// end ;
33886: LD_VAR 0 1
33890: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33891: LD_INT 0
33893: PPUSH
// uc_side := your_side ;
33894: LD_ADDR_OWVAR 20
33898: PUSH
33899: LD_OWVAR 2
33903: ST_TO_ADDR
// uc_nation := nation ;
33904: LD_ADDR_OWVAR 21
33908: PUSH
33909: LD_VAR 0 1
33913: ST_TO_ADDR
// InitHc ;
33914: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33918: LD_INT 0
33920: PPUSH
33921: LD_VAR 0 2
33925: PPUSH
33926: LD_VAR 0 3
33930: PPUSH
33931: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33935: LD_VAR 0 4
33939: PPUSH
33940: LD_VAR 0 5
33944: PPUSH
33945: CALL_OW 428
33949: PUSH
33950: LD_INT 0
33952: EQUAL
33953: IFFALSE 33977
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33955: CALL_OW 44
33959: PPUSH
33960: LD_VAR 0 4
33964: PPUSH
33965: LD_VAR 0 5
33969: PPUSH
33970: LD_INT 1
33972: PPUSH
33973: CALL_OW 48
// end ;
33977: LD_VAR 0 6
33981: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33982: LD_INT 0
33984: PPUSH
33985: PPUSH
// uc_side := your_side ;
33986: LD_ADDR_OWVAR 20
33990: PUSH
33991: LD_OWVAR 2
33995: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33996: LD_VAR 0 1
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: LD_INT 3
34009: PUSH
34010: LD_INT 4
34012: PUSH
34013: LD_INT 5
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: IN
34023: IFFALSE 34035
// uc_nation := nation_american else
34025: LD_ADDR_OWVAR 21
34029: PUSH
34030: LD_INT 1
34032: ST_TO_ADDR
34033: GO 34078
// if chassis in [ 11 , 12 , 13 , 14 ] then
34035: LD_VAR 0 1
34039: PUSH
34040: LD_INT 11
34042: PUSH
34043: LD_INT 12
34045: PUSH
34046: LD_INT 13
34048: PUSH
34049: LD_INT 14
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: IN
34058: IFFALSE 34070
// uc_nation := nation_arabian else
34060: LD_ADDR_OWVAR 21
34064: PUSH
34065: LD_INT 2
34067: ST_TO_ADDR
34068: GO 34078
// uc_nation := nation_russian ;
34070: LD_ADDR_OWVAR 21
34074: PUSH
34075: LD_INT 3
34077: ST_TO_ADDR
// vc_chassis := chassis ;
34078: LD_ADDR_OWVAR 37
34082: PUSH
34083: LD_VAR 0 1
34087: ST_TO_ADDR
// vc_engine := engine ;
34088: LD_ADDR_OWVAR 39
34092: PUSH
34093: LD_VAR 0 2
34097: ST_TO_ADDR
// vc_control := control ;
34098: LD_ADDR_OWVAR 38
34102: PUSH
34103: LD_VAR 0 3
34107: ST_TO_ADDR
// vc_weapon := weapon ;
34108: LD_ADDR_OWVAR 40
34112: PUSH
34113: LD_VAR 0 4
34117: ST_TO_ADDR
// un := CreateVehicle ;
34118: LD_ADDR_VAR 0 8
34122: PUSH
34123: CALL_OW 45
34127: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34128: LD_VAR 0 8
34132: PPUSH
34133: LD_INT 0
34135: PPUSH
34136: LD_INT 5
34138: PPUSH
34139: CALL_OW 12
34143: PPUSH
34144: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34148: LD_VAR 0 8
34152: PPUSH
34153: LD_VAR 0 5
34157: PPUSH
34158: LD_VAR 0 6
34162: PPUSH
34163: LD_INT 1
34165: PPUSH
34166: CALL_OW 48
// end ;
34170: LD_VAR 0 7
34174: RET
// export hInvincible ; every 1 do
34175: GO 34177
34177: DISABLE
// hInvincible := [ ] ;
34178: LD_ADDR_EXP 126
34182: PUSH
34183: EMPTY
34184: ST_TO_ADDR
34185: END
// every 10 do var i ;
34186: GO 34188
34188: DISABLE
34189: LD_INT 0
34191: PPUSH
// begin enable ;
34192: ENABLE
// if not hInvincible then
34193: LD_EXP 126
34197: NOT
34198: IFFALSE 34202
// exit ;
34200: GO 34246
// for i in hInvincible do
34202: LD_ADDR_VAR 0 1
34206: PUSH
34207: LD_EXP 126
34211: PUSH
34212: FOR_IN
34213: IFFALSE 34244
// if GetLives ( i ) < 1000 then
34215: LD_VAR 0 1
34219: PPUSH
34220: CALL_OW 256
34224: PUSH
34225: LD_INT 1000
34227: LESS
34228: IFFALSE 34242
// SetLives ( i , 1000 ) ;
34230: LD_VAR 0 1
34234: PPUSH
34235: LD_INT 1000
34237: PPUSH
34238: CALL_OW 234
34242: GO 34212
34244: POP
34245: POP
// end ;
34246: PPOPN 1
34248: END
// export function hHackInvincible ; var i ; begin
34249: LD_INT 0
34251: PPUSH
34252: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34253: LD_ADDR_VAR 0 2
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: LD_INT 21
34263: PUSH
34264: LD_INT 1
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 21
34273: PUSH
34274: LD_INT 2
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: LIST
34285: PPUSH
34286: CALL_OW 69
34290: PUSH
34291: FOR_IN
34292: IFFALSE 34353
// if IsSelected ( i ) then
34294: LD_VAR 0 2
34298: PPUSH
34299: CALL_OW 306
34303: IFFALSE 34351
// begin if i in hInvincible then
34305: LD_VAR 0 2
34309: PUSH
34310: LD_EXP 126
34314: IN
34315: IFFALSE 34335
// hInvincible := hInvincible diff i else
34317: LD_ADDR_EXP 126
34321: PUSH
34322: LD_EXP 126
34326: PUSH
34327: LD_VAR 0 2
34331: DIFF
34332: ST_TO_ADDR
34333: GO 34351
// hInvincible := hInvincible union i ;
34335: LD_ADDR_EXP 126
34339: PUSH
34340: LD_EXP 126
34344: PUSH
34345: LD_VAR 0 2
34349: UNION
34350: ST_TO_ADDR
// end ;
34351: GO 34291
34353: POP
34354: POP
// end ;
34355: LD_VAR 0 1
34359: RET
// export function hHackInvisible ; var i , j ; begin
34360: LD_INT 0
34362: PPUSH
34363: PPUSH
34364: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34365: LD_ADDR_VAR 0 2
34369: PUSH
34370: LD_INT 21
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PPUSH
34380: CALL_OW 69
34384: PUSH
34385: FOR_IN
34386: IFFALSE 34410
// if IsSelected ( i ) then
34388: LD_VAR 0 2
34392: PPUSH
34393: CALL_OW 306
34397: IFFALSE 34408
// ComForceInvisible ( i ) ;
34399: LD_VAR 0 2
34403: PPUSH
34404: CALL_OW 496
34408: GO 34385
34410: POP
34411: POP
// end ;
34412: LD_VAR 0 1
34416: RET
// export function hHackChangeYourSide ; begin
34417: LD_INT 0
34419: PPUSH
// if your_side = 8 then
34420: LD_OWVAR 2
34424: PUSH
34425: LD_INT 8
34427: EQUAL
34428: IFFALSE 34440
// your_side := 0 else
34430: LD_ADDR_OWVAR 2
34434: PUSH
34435: LD_INT 0
34437: ST_TO_ADDR
34438: GO 34454
// your_side := your_side + 1 ;
34440: LD_ADDR_OWVAR 2
34444: PUSH
34445: LD_OWVAR 2
34449: PUSH
34450: LD_INT 1
34452: PLUS
34453: ST_TO_ADDR
// end ;
34454: LD_VAR 0 1
34458: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34459: LD_INT 0
34461: PPUSH
34462: PPUSH
34463: PPUSH
// for i in all_units do
34464: LD_ADDR_VAR 0 2
34468: PUSH
34469: LD_OWVAR 3
34473: PUSH
34474: FOR_IN
34475: IFFALSE 34553
// if IsSelected ( i ) then
34477: LD_VAR 0 2
34481: PPUSH
34482: CALL_OW 306
34486: IFFALSE 34551
// begin j := GetSide ( i ) ;
34488: LD_ADDR_VAR 0 3
34492: PUSH
34493: LD_VAR 0 2
34497: PPUSH
34498: CALL_OW 255
34502: ST_TO_ADDR
// if j = 8 then
34503: LD_VAR 0 3
34507: PUSH
34508: LD_INT 8
34510: EQUAL
34511: IFFALSE 34523
// j := 0 else
34513: LD_ADDR_VAR 0 3
34517: PUSH
34518: LD_INT 0
34520: ST_TO_ADDR
34521: GO 34537
// j := j + 1 ;
34523: LD_ADDR_VAR 0 3
34527: PUSH
34528: LD_VAR 0 3
34532: PUSH
34533: LD_INT 1
34535: PLUS
34536: ST_TO_ADDR
// SetSide ( i , j ) ;
34537: LD_VAR 0 2
34541: PPUSH
34542: LD_VAR 0 3
34546: PPUSH
34547: CALL_OW 235
// end ;
34551: GO 34474
34553: POP
34554: POP
// end ;
34555: LD_VAR 0 1
34559: RET
// export function hHackFog ; begin
34560: LD_INT 0
34562: PPUSH
// FogOff ( true ) ;
34563: LD_INT 1
34565: PPUSH
34566: CALL_OW 344
// end ;
34570: LD_VAR 0 1
34574: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34575: LD_INT 0
34577: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34578: LD_VAR 0 1
34582: PPUSH
34583: LD_VAR 0 2
34587: PPUSH
34588: LD_VAR 0 3
34592: PPUSH
34593: LD_INT 1
34595: PPUSH
34596: LD_INT 1
34598: PPUSH
34599: CALL_OW 483
// CenterOnXY ( x , y ) ;
34603: LD_VAR 0 2
34607: PPUSH
34608: LD_VAR 0 3
34612: PPUSH
34613: CALL_OW 84
// end ; end_of_file
34617: LD_VAR 0 4
34621: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34622: LD_INT 0
34624: PPUSH
34625: PPUSH
34626: PPUSH
34627: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34628: LD_VAR 0 1
34632: PPUSH
34633: CALL_OW 264
34637: PUSH
34638: LD_EXP 53
34642: EQUAL
34643: IFFALSE 34715
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34645: LD_INT 68
34647: PPUSH
34648: LD_VAR 0 1
34652: PPUSH
34653: CALL_OW 255
34657: PPUSH
34658: CALL_OW 321
34662: PUSH
34663: LD_INT 2
34665: EQUAL
34666: IFFALSE 34678
// eff := 70 else
34668: LD_ADDR_VAR 0 4
34672: PUSH
34673: LD_INT 70
34675: ST_TO_ADDR
34676: GO 34686
// eff := 30 ;
34678: LD_ADDR_VAR 0 4
34682: PUSH
34683: LD_INT 30
34685: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34686: LD_VAR 0 1
34690: PPUSH
34691: CALL_OW 250
34695: PPUSH
34696: LD_VAR 0 1
34700: PPUSH
34701: CALL_OW 251
34705: PPUSH
34706: LD_VAR 0 4
34710: PPUSH
34711: CALL_OW 495
// end ; end ;
34715: LD_VAR 0 2
34719: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34720: LD_INT 0
34722: PPUSH
// end ;
34723: LD_VAR 0 4
34727: RET
// export function SOS_Command ( cmd ) ; begin
34728: LD_INT 0
34730: PPUSH
// end ;
34731: LD_VAR 0 2
34735: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34736: LD_INT 0
34738: PPUSH
// end ;
34739: LD_VAR 0 6
34743: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34744: LD_INT 0
34746: PPUSH
34747: PPUSH
// if not vehicle or not factory then
34748: LD_VAR 0 1
34752: NOT
34753: PUSH
34754: LD_VAR 0 2
34758: NOT
34759: OR
34760: IFFALSE 34764
// exit ;
34762: GO 34995
// if factoryWaypoints >= factory then
34764: LD_EXP 127
34768: PUSH
34769: LD_VAR 0 2
34773: GREATEREQUAL
34774: IFFALSE 34995
// if factoryWaypoints [ factory ] then
34776: LD_EXP 127
34780: PUSH
34781: LD_VAR 0 2
34785: ARRAY
34786: IFFALSE 34995
// begin if GetControl ( vehicle ) = control_manual then
34788: LD_VAR 0 1
34792: PPUSH
34793: CALL_OW 263
34797: PUSH
34798: LD_INT 1
34800: EQUAL
34801: IFFALSE 34882
// begin driver := IsDrivenBy ( vehicle ) ;
34803: LD_ADDR_VAR 0 4
34807: PUSH
34808: LD_VAR 0 1
34812: PPUSH
34813: CALL_OW 311
34817: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34818: LD_VAR 0 4
34822: PPUSH
34823: LD_EXP 127
34827: PUSH
34828: LD_VAR 0 2
34832: ARRAY
34833: PUSH
34834: LD_INT 3
34836: ARRAY
34837: PPUSH
34838: LD_EXP 127
34842: PUSH
34843: LD_VAR 0 2
34847: ARRAY
34848: PUSH
34849: LD_INT 4
34851: ARRAY
34852: PPUSH
34853: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34857: LD_VAR 0 4
34861: PPUSH
34862: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34866: LD_VAR 0 4
34870: PPUSH
34871: LD_VAR 0 2
34875: PPUSH
34876: CALL_OW 180
// end else
34880: GO 34995
// if GetControl ( vehicle ) = control_remote then
34882: LD_VAR 0 1
34886: PPUSH
34887: CALL_OW 263
34891: PUSH
34892: LD_INT 2
34894: EQUAL
34895: IFFALSE 34956
// begin wait ( 0 0$2 ) ;
34897: LD_INT 70
34899: PPUSH
34900: CALL_OW 67
// if Connect ( vehicle ) then
34904: LD_VAR 0 1
34908: PPUSH
34909: CALL 47219 0 1
34913: IFFALSE 34954
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34915: LD_VAR 0 1
34919: PPUSH
34920: LD_EXP 127
34924: PUSH
34925: LD_VAR 0 2
34929: ARRAY
34930: PUSH
34931: LD_INT 3
34933: ARRAY
34934: PPUSH
34935: LD_EXP 127
34939: PUSH
34940: LD_VAR 0 2
34944: ARRAY
34945: PUSH
34946: LD_INT 4
34948: ARRAY
34949: PPUSH
34950: CALL_OW 171
// end else
34954: GO 34995
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34956: LD_VAR 0 1
34960: PPUSH
34961: LD_EXP 127
34965: PUSH
34966: LD_VAR 0 2
34970: ARRAY
34971: PUSH
34972: LD_INT 3
34974: ARRAY
34975: PPUSH
34976: LD_EXP 127
34980: PUSH
34981: LD_VAR 0 2
34985: ARRAY
34986: PUSH
34987: LD_INT 4
34989: ARRAY
34990: PPUSH
34991: CALL_OW 171
// end ; end ;
34995: LD_VAR 0 3
34999: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35000: LD_INT 0
35002: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35003: LD_VAR 0 1
35007: PUSH
35008: LD_INT 250
35010: EQUAL
35011: PUSH
35012: LD_VAR 0 2
35016: PPUSH
35017: CALL_OW 264
35021: PUSH
35022: LD_EXP 56
35026: EQUAL
35027: AND
35028: IFFALSE 35049
// MinerPlaceMine ( unit , x , y ) ;
35030: LD_VAR 0 2
35034: PPUSH
35035: LD_VAR 0 4
35039: PPUSH
35040: LD_VAR 0 5
35044: PPUSH
35045: CALL 37777 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35049: LD_VAR 0 1
35053: PUSH
35054: LD_INT 251
35056: EQUAL
35057: PUSH
35058: LD_VAR 0 2
35062: PPUSH
35063: CALL_OW 264
35067: PUSH
35068: LD_EXP 56
35072: EQUAL
35073: AND
35074: IFFALSE 35095
// MinerDetonateMine ( unit , x , y ) ;
35076: LD_VAR 0 2
35080: PPUSH
35081: LD_VAR 0 4
35085: PPUSH
35086: LD_VAR 0 5
35090: PPUSH
35091: CALL 38054 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35095: LD_VAR 0 1
35099: PUSH
35100: LD_INT 252
35102: EQUAL
35103: PUSH
35104: LD_VAR 0 2
35108: PPUSH
35109: CALL_OW 264
35113: PUSH
35114: LD_EXP 56
35118: EQUAL
35119: AND
35120: IFFALSE 35141
// MinerCreateMinefield ( unit , x , y ) ;
35122: LD_VAR 0 2
35126: PPUSH
35127: LD_VAR 0 4
35131: PPUSH
35132: LD_VAR 0 5
35136: PPUSH
35137: CALL 38471 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35141: LD_VAR 0 1
35145: PUSH
35146: LD_INT 253
35148: EQUAL
35149: PUSH
35150: LD_VAR 0 2
35154: PPUSH
35155: CALL_OW 257
35159: PUSH
35160: LD_INT 5
35162: EQUAL
35163: AND
35164: IFFALSE 35185
// ComBinocular ( unit , x , y ) ;
35166: LD_VAR 0 2
35170: PPUSH
35171: LD_VAR 0 4
35175: PPUSH
35176: LD_VAR 0 5
35180: PPUSH
35181: CALL 38842 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35185: LD_VAR 0 1
35189: PUSH
35190: LD_INT 254
35192: EQUAL
35193: PUSH
35194: LD_VAR 0 2
35198: PPUSH
35199: CALL_OW 264
35203: PUSH
35204: LD_EXP 51
35208: EQUAL
35209: AND
35210: PUSH
35211: LD_VAR 0 3
35215: PPUSH
35216: CALL_OW 263
35220: PUSH
35221: LD_INT 3
35223: EQUAL
35224: AND
35225: IFFALSE 35241
// HackDestroyVehicle ( unit , selectedUnit ) ;
35227: LD_VAR 0 2
35231: PPUSH
35232: LD_VAR 0 3
35236: PPUSH
35237: CALL 37137 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35241: LD_VAR 0 1
35245: PUSH
35246: LD_INT 255
35248: EQUAL
35249: PUSH
35250: LD_VAR 0 2
35254: PPUSH
35255: CALL_OW 264
35259: PUSH
35260: LD_INT 14
35262: PUSH
35263: LD_INT 53
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: IN
35270: AND
35271: PUSH
35272: LD_VAR 0 4
35276: PPUSH
35277: LD_VAR 0 5
35281: PPUSH
35282: CALL_OW 488
35286: AND
35287: IFFALSE 35311
// CutTreeXYR ( unit , x , y , 12 ) ;
35289: LD_VAR 0 2
35293: PPUSH
35294: LD_VAR 0 4
35298: PPUSH
35299: LD_VAR 0 5
35303: PPUSH
35304: LD_INT 12
35306: PPUSH
35307: CALL 35703 0 4
// if cmd = 256 then
35311: LD_VAR 0 1
35315: PUSH
35316: LD_INT 256
35318: EQUAL
35319: IFFALSE 35340
// SetFactoryWaypoint ( unit , x , y ) ;
35321: LD_VAR 0 2
35325: PPUSH
35326: LD_VAR 0 4
35330: PPUSH
35331: LD_VAR 0 5
35335: PPUSH
35336: CALL 35345 0 3
// end ;
35340: LD_VAR 0 6
35344: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35345: LD_INT 0
35347: PPUSH
35348: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35349: LD_VAR 0 1
35353: NOT
35354: PUSH
35355: LD_VAR 0 2
35359: PPUSH
35360: LD_VAR 0 3
35364: PPUSH
35365: CALL_OW 488
35369: NOT
35370: OR
35371: PUSH
35372: LD_VAR 0 1
35376: PPUSH
35377: CALL_OW 266
35381: PUSH
35382: LD_INT 3
35384: NONEQUAL
35385: PUSH
35386: LD_VAR 0 1
35390: PPUSH
35391: CALL_OW 247
35395: PUSH
35396: LD_INT 1
35398: EQUAL
35399: NOT
35400: AND
35401: OR
35402: IFFALSE 35406
// exit ;
35404: GO 35555
// if GetType ( factory ) = unit_human then
35406: LD_VAR 0 1
35410: PPUSH
35411: CALL_OW 247
35415: PUSH
35416: LD_INT 1
35418: EQUAL
35419: IFFALSE 35436
// factory := IsInUnit ( factory ) ;
35421: LD_ADDR_VAR 0 1
35425: PUSH
35426: LD_VAR 0 1
35430: PPUSH
35431: CALL_OW 310
35435: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35436: LD_VAR 0 1
35440: PPUSH
35441: CALL_OW 266
35445: PUSH
35446: LD_INT 3
35448: NONEQUAL
35449: IFFALSE 35453
// exit ;
35451: GO 35555
// if HexInfo ( x , y ) = factory then
35453: LD_VAR 0 2
35457: PPUSH
35458: LD_VAR 0 3
35462: PPUSH
35463: CALL_OW 428
35467: PUSH
35468: LD_VAR 0 1
35472: EQUAL
35473: IFFALSE 35500
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35475: LD_ADDR_EXP 127
35479: PUSH
35480: LD_EXP 127
35484: PPUSH
35485: LD_VAR 0 1
35489: PPUSH
35490: LD_INT 0
35492: PPUSH
35493: CALL_OW 1
35497: ST_TO_ADDR
35498: GO 35551
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35500: LD_ADDR_EXP 127
35504: PUSH
35505: LD_EXP 127
35509: PPUSH
35510: LD_VAR 0 1
35514: PPUSH
35515: LD_VAR 0 1
35519: PPUSH
35520: CALL_OW 255
35524: PUSH
35525: LD_VAR 0 1
35529: PUSH
35530: LD_VAR 0 2
35534: PUSH
35535: LD_VAR 0 3
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: PPUSH
35546: CALL_OW 1
35550: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35551: CALL 35560 0 0
// end ;
35555: LD_VAR 0 4
35559: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
35560: LD_INT 0
35562: PPUSH
35563: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35564: LD_STRING resetFactoryWaypoint();
35566: PPUSH
35567: CALL_OW 559
// if factoryWaypoints then
35571: LD_EXP 127
35575: IFFALSE 35698
// begin for i := 1 to factoryWaypoints do
35577: LD_ADDR_VAR 0 2
35581: PUSH
35582: DOUBLE
35583: LD_INT 1
35585: DEC
35586: ST_TO_ADDR
35587: LD_EXP 127
35591: PUSH
35592: FOR_TO
35593: IFFALSE 35696
// if factoryWaypoints [ i ] then
35595: LD_EXP 127
35599: PUSH
35600: LD_VAR 0 2
35604: ARRAY
35605: IFFALSE 35694
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
35607: LD_STRING setFactoryWaypointXY(
35609: PUSH
35610: LD_EXP 127
35614: PUSH
35615: LD_VAR 0 2
35619: ARRAY
35620: PUSH
35621: LD_INT 1
35623: ARRAY
35624: STR
35625: PUSH
35626: LD_STRING ,
35628: STR
35629: PUSH
35630: LD_EXP 127
35634: PUSH
35635: LD_VAR 0 2
35639: ARRAY
35640: PUSH
35641: LD_INT 2
35643: ARRAY
35644: STR
35645: PUSH
35646: LD_STRING ,
35648: STR
35649: PUSH
35650: LD_EXP 127
35654: PUSH
35655: LD_VAR 0 2
35659: ARRAY
35660: PUSH
35661: LD_INT 3
35663: ARRAY
35664: STR
35665: PUSH
35666: LD_STRING ,
35668: STR
35669: PUSH
35670: LD_EXP 127
35674: PUSH
35675: LD_VAR 0 2
35679: ARRAY
35680: PUSH
35681: LD_INT 4
35683: ARRAY
35684: STR
35685: PUSH
35686: LD_STRING )
35688: STR
35689: PPUSH
35690: CALL_OW 559
35694: GO 35592
35696: POP
35697: POP
// end ; end ;
35698: LD_VAR 0 1
35702: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35703: LD_INT 0
35705: PPUSH
35706: PPUSH
35707: PPUSH
35708: PPUSH
35709: PPUSH
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35714: LD_VAR 0 1
35718: NOT
35719: PUSH
35720: LD_VAR 0 2
35724: PPUSH
35725: LD_VAR 0 3
35729: PPUSH
35730: CALL_OW 488
35734: NOT
35735: OR
35736: PUSH
35737: LD_VAR 0 4
35741: NOT
35742: OR
35743: IFFALSE 35747
// exit ;
35745: GO 36087
// list := [ ] ;
35747: LD_ADDR_VAR 0 13
35751: PUSH
35752: EMPTY
35753: ST_TO_ADDR
// if x - r < 0 then
35754: LD_VAR 0 2
35758: PUSH
35759: LD_VAR 0 4
35763: MINUS
35764: PUSH
35765: LD_INT 0
35767: LESS
35768: IFFALSE 35780
// min_x := 0 else
35770: LD_ADDR_VAR 0 7
35774: PUSH
35775: LD_INT 0
35777: ST_TO_ADDR
35778: GO 35796
// min_x := x - r ;
35780: LD_ADDR_VAR 0 7
35784: PUSH
35785: LD_VAR 0 2
35789: PUSH
35790: LD_VAR 0 4
35794: MINUS
35795: ST_TO_ADDR
// if y - r < 0 then
35796: LD_VAR 0 3
35800: PUSH
35801: LD_VAR 0 4
35805: MINUS
35806: PUSH
35807: LD_INT 0
35809: LESS
35810: IFFALSE 35822
// min_y := 0 else
35812: LD_ADDR_VAR 0 8
35816: PUSH
35817: LD_INT 0
35819: ST_TO_ADDR
35820: GO 35838
// min_y := y - r ;
35822: LD_ADDR_VAR 0 8
35826: PUSH
35827: LD_VAR 0 3
35831: PUSH
35832: LD_VAR 0 4
35836: MINUS
35837: ST_TO_ADDR
// max_x := x + r ;
35838: LD_ADDR_VAR 0 9
35842: PUSH
35843: LD_VAR 0 2
35847: PUSH
35848: LD_VAR 0 4
35852: PLUS
35853: ST_TO_ADDR
// max_y := y + r ;
35854: LD_ADDR_VAR 0 10
35858: PUSH
35859: LD_VAR 0 3
35863: PUSH
35864: LD_VAR 0 4
35868: PLUS
35869: ST_TO_ADDR
// for _x = min_x to max_x do
35870: LD_ADDR_VAR 0 11
35874: PUSH
35875: DOUBLE
35876: LD_VAR 0 7
35880: DEC
35881: ST_TO_ADDR
35882: LD_VAR 0 9
35886: PUSH
35887: FOR_TO
35888: IFFALSE 36005
// for _y = min_y to max_y do
35890: LD_ADDR_VAR 0 12
35894: PUSH
35895: DOUBLE
35896: LD_VAR 0 8
35900: DEC
35901: ST_TO_ADDR
35902: LD_VAR 0 10
35906: PUSH
35907: FOR_TO
35908: IFFALSE 36001
// begin if not ValidHex ( _x , _y ) then
35910: LD_VAR 0 11
35914: PPUSH
35915: LD_VAR 0 12
35919: PPUSH
35920: CALL_OW 488
35924: NOT
35925: IFFALSE 35929
// continue ;
35927: GO 35907
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35929: LD_VAR 0 11
35933: PPUSH
35934: LD_VAR 0 12
35938: PPUSH
35939: CALL_OW 351
35943: PUSH
35944: LD_VAR 0 11
35948: PPUSH
35949: LD_VAR 0 12
35953: PPUSH
35954: CALL_OW 554
35958: AND
35959: IFFALSE 35999
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35961: LD_ADDR_VAR 0 13
35965: PUSH
35966: LD_VAR 0 13
35970: PPUSH
35971: LD_VAR 0 13
35975: PUSH
35976: LD_INT 1
35978: PLUS
35979: PPUSH
35980: LD_VAR 0 11
35984: PUSH
35985: LD_VAR 0 12
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PPUSH
35994: CALL_OW 2
35998: ST_TO_ADDR
// end ;
35999: GO 35907
36001: POP
36002: POP
36003: GO 35887
36005: POP
36006: POP
// if not list then
36007: LD_VAR 0 13
36011: NOT
36012: IFFALSE 36016
// exit ;
36014: GO 36087
// for i in list do
36016: LD_ADDR_VAR 0 6
36020: PUSH
36021: LD_VAR 0 13
36025: PUSH
36026: FOR_IN
36027: IFFALSE 36085
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36029: LD_VAR 0 1
36033: PPUSH
36034: LD_STRING M
36036: PUSH
36037: LD_VAR 0 6
36041: PUSH
36042: LD_INT 1
36044: ARRAY
36045: PUSH
36046: LD_VAR 0 6
36050: PUSH
36051: LD_INT 2
36053: ARRAY
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: LD_INT 0
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: PUSH
36076: EMPTY
36077: LIST
36078: PPUSH
36079: CALL_OW 447
36083: GO 36026
36085: POP
36086: POP
// end ;
36087: LD_VAR 0 5
36091: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36092: LD_EXP 128
36096: NOT
36097: IFFALSE 36147
36099: GO 36101
36101: DISABLE
// begin initHack := true ;
36102: LD_ADDR_EXP 128
36106: PUSH
36107: LD_INT 1
36109: ST_TO_ADDR
// hackTanks := [ ] ;
36110: LD_ADDR_EXP 129
36114: PUSH
36115: EMPTY
36116: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36117: LD_ADDR_EXP 130
36121: PUSH
36122: EMPTY
36123: ST_TO_ADDR
// hackLimit := 3 ;
36124: LD_ADDR_EXP 131
36128: PUSH
36129: LD_INT 3
36131: ST_TO_ADDR
// hackDist := 12 ;
36132: LD_ADDR_EXP 132
36136: PUSH
36137: LD_INT 12
36139: ST_TO_ADDR
// hackCounter := [ ] ;
36140: LD_ADDR_EXP 133
36144: PUSH
36145: EMPTY
36146: ST_TO_ADDR
// end ;
36147: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36148: LD_EXP 128
36152: PUSH
36153: LD_INT 34
36155: PUSH
36156: LD_EXP 51
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PPUSH
36165: CALL_OW 69
36169: AND
36170: IFFALSE 36425
36172: GO 36174
36174: DISABLE
36175: LD_INT 0
36177: PPUSH
36178: PPUSH
// begin enable ;
36179: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36180: LD_ADDR_VAR 0 1
36184: PUSH
36185: LD_INT 34
36187: PUSH
36188: LD_EXP 51
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PPUSH
36197: CALL_OW 69
36201: PUSH
36202: FOR_IN
36203: IFFALSE 36423
// begin if not i in hackTanks then
36205: LD_VAR 0 1
36209: PUSH
36210: LD_EXP 129
36214: IN
36215: NOT
36216: IFFALSE 36299
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36218: LD_ADDR_EXP 129
36222: PUSH
36223: LD_EXP 129
36227: PPUSH
36228: LD_EXP 129
36232: PUSH
36233: LD_INT 1
36235: PLUS
36236: PPUSH
36237: LD_VAR 0 1
36241: PPUSH
36242: CALL_OW 1
36246: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36247: LD_ADDR_EXP 130
36251: PUSH
36252: LD_EXP 130
36256: PPUSH
36257: LD_EXP 130
36261: PUSH
36262: LD_INT 1
36264: PLUS
36265: PPUSH
36266: EMPTY
36267: PPUSH
36268: CALL_OW 1
36272: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36273: LD_ADDR_EXP 133
36277: PUSH
36278: LD_EXP 133
36282: PPUSH
36283: LD_EXP 133
36287: PUSH
36288: LD_INT 1
36290: PLUS
36291: PPUSH
36292: EMPTY
36293: PPUSH
36294: CALL_OW 1
36298: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36299: LD_VAR 0 1
36303: PPUSH
36304: CALL_OW 302
36308: NOT
36309: IFFALSE 36322
// begin HackUnlinkAll ( i ) ;
36311: LD_VAR 0 1
36315: PPUSH
36316: CALL 36428 0 1
// continue ;
36320: GO 36202
// end ; HackCheckCapturedStatus ( i ) ;
36322: LD_VAR 0 1
36326: PPUSH
36327: CALL 36871 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36331: LD_ADDR_VAR 0 2
36335: PUSH
36336: LD_INT 81
36338: PUSH
36339: LD_VAR 0 1
36343: PPUSH
36344: CALL_OW 255
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 33
36355: PUSH
36356: LD_INT 3
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 91
36365: PUSH
36366: LD_VAR 0 1
36370: PUSH
36371: LD_EXP 132
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 50
36383: PUSH
36384: EMPTY
36385: LIST
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: PPUSH
36393: CALL_OW 69
36397: ST_TO_ADDR
// if not tmp then
36398: LD_VAR 0 2
36402: NOT
36403: IFFALSE 36407
// continue ;
36405: GO 36202
// HackLink ( i , tmp ) ;
36407: LD_VAR 0 1
36411: PPUSH
36412: LD_VAR 0 2
36416: PPUSH
36417: CALL 36564 0 2
// end ;
36421: GO 36202
36423: POP
36424: POP
// end ;
36425: PPOPN 2
36427: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36428: LD_INT 0
36430: PPUSH
36431: PPUSH
36432: PPUSH
// if not hack in hackTanks then
36433: LD_VAR 0 1
36437: PUSH
36438: LD_EXP 129
36442: IN
36443: NOT
36444: IFFALSE 36448
// exit ;
36446: GO 36559
// index := GetElementIndex ( hackTanks , hack ) ;
36448: LD_ADDR_VAR 0 4
36452: PUSH
36453: LD_EXP 129
36457: PPUSH
36458: LD_VAR 0 1
36462: PPUSH
36463: CALL 44033 0 2
36467: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36468: LD_EXP 130
36472: PUSH
36473: LD_VAR 0 4
36477: ARRAY
36478: IFFALSE 36559
// begin for i in hackTanksCaptured [ index ] do
36480: LD_ADDR_VAR 0 3
36484: PUSH
36485: LD_EXP 130
36489: PUSH
36490: LD_VAR 0 4
36494: ARRAY
36495: PUSH
36496: FOR_IN
36497: IFFALSE 36523
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36499: LD_VAR 0 3
36503: PUSH
36504: LD_INT 1
36506: ARRAY
36507: PPUSH
36508: LD_VAR 0 3
36512: PUSH
36513: LD_INT 2
36515: ARRAY
36516: PPUSH
36517: CALL_OW 235
36521: GO 36496
36523: POP
36524: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36525: LD_ADDR_EXP 130
36529: PUSH
36530: LD_EXP 130
36534: PPUSH
36535: LD_VAR 0 4
36539: PPUSH
36540: EMPTY
36541: PPUSH
36542: CALL_OW 1
36546: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36547: LD_VAR 0 1
36551: PPUSH
36552: LD_INT 0
36554: PPUSH
36555: CALL_OW 505
// end ; end ;
36559: LD_VAR 0 2
36563: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36564: LD_INT 0
36566: PPUSH
36567: PPUSH
36568: PPUSH
// if not hack in hackTanks or not vehicles then
36569: LD_VAR 0 1
36573: PUSH
36574: LD_EXP 129
36578: IN
36579: NOT
36580: PUSH
36581: LD_VAR 0 2
36585: NOT
36586: OR
36587: IFFALSE 36591
// exit ;
36589: GO 36866
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36591: LD_ADDR_VAR 0 2
36595: PUSH
36596: LD_VAR 0 1
36600: PPUSH
36601: LD_VAR 0 2
36605: PPUSH
36606: LD_INT 1
36608: PPUSH
36609: LD_INT 1
36611: PPUSH
36612: CALL 44683 0 4
36616: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36617: LD_ADDR_VAR 0 5
36621: PUSH
36622: LD_EXP 129
36626: PPUSH
36627: LD_VAR 0 1
36631: PPUSH
36632: CALL 44033 0 2
36636: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36637: LD_EXP 130
36641: PUSH
36642: LD_VAR 0 5
36646: ARRAY
36647: PUSH
36648: LD_EXP 131
36652: LESS
36653: IFFALSE 36842
// begin for i := 1 to vehicles do
36655: LD_ADDR_VAR 0 4
36659: PUSH
36660: DOUBLE
36661: LD_INT 1
36663: DEC
36664: ST_TO_ADDR
36665: LD_VAR 0 2
36669: PUSH
36670: FOR_TO
36671: IFFALSE 36840
// begin if hackTanksCaptured [ index ] = hackLimit then
36673: LD_EXP 130
36677: PUSH
36678: LD_VAR 0 5
36682: ARRAY
36683: PUSH
36684: LD_EXP 131
36688: EQUAL
36689: IFFALSE 36693
// break ;
36691: GO 36840
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36693: LD_ADDR_EXP 133
36697: PUSH
36698: LD_EXP 133
36702: PPUSH
36703: LD_VAR 0 5
36707: PPUSH
36708: LD_EXP 133
36712: PUSH
36713: LD_VAR 0 5
36717: ARRAY
36718: PUSH
36719: LD_INT 1
36721: PLUS
36722: PPUSH
36723: CALL_OW 1
36727: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36728: LD_ADDR_EXP 130
36732: PUSH
36733: LD_EXP 130
36737: PPUSH
36738: LD_VAR 0 5
36742: PUSH
36743: LD_EXP 130
36747: PUSH
36748: LD_VAR 0 5
36752: ARRAY
36753: PUSH
36754: LD_INT 1
36756: PLUS
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PPUSH
36762: LD_VAR 0 2
36766: PUSH
36767: LD_VAR 0 4
36771: ARRAY
36772: PUSH
36773: LD_VAR 0 2
36777: PUSH
36778: LD_VAR 0 4
36782: ARRAY
36783: PPUSH
36784: CALL_OW 255
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PPUSH
36793: CALL 44248 0 3
36797: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36798: LD_VAR 0 2
36802: PUSH
36803: LD_VAR 0 4
36807: ARRAY
36808: PPUSH
36809: LD_VAR 0 1
36813: PPUSH
36814: CALL_OW 255
36818: PPUSH
36819: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36823: LD_VAR 0 2
36827: PUSH
36828: LD_VAR 0 4
36832: ARRAY
36833: PPUSH
36834: CALL_OW 141
// end ;
36838: GO 36670
36840: POP
36841: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36842: LD_VAR 0 1
36846: PPUSH
36847: LD_EXP 130
36851: PUSH
36852: LD_VAR 0 5
36856: ARRAY
36857: PUSH
36858: LD_INT 0
36860: PLUS
36861: PPUSH
36862: CALL_OW 505
// end ;
36866: LD_VAR 0 3
36870: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36871: LD_INT 0
36873: PPUSH
36874: PPUSH
36875: PPUSH
36876: PPUSH
// if not hack in hackTanks then
36877: LD_VAR 0 1
36881: PUSH
36882: LD_EXP 129
36886: IN
36887: NOT
36888: IFFALSE 36892
// exit ;
36890: GO 37132
// index := GetElementIndex ( hackTanks , hack ) ;
36892: LD_ADDR_VAR 0 4
36896: PUSH
36897: LD_EXP 129
36901: PPUSH
36902: LD_VAR 0 1
36906: PPUSH
36907: CALL 44033 0 2
36911: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36912: LD_ADDR_VAR 0 3
36916: PUSH
36917: DOUBLE
36918: LD_EXP 130
36922: PUSH
36923: LD_VAR 0 4
36927: ARRAY
36928: INC
36929: ST_TO_ADDR
36930: LD_INT 1
36932: PUSH
36933: FOR_DOWNTO
36934: IFFALSE 37106
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36936: LD_ADDR_VAR 0 5
36940: PUSH
36941: LD_EXP 130
36945: PUSH
36946: LD_VAR 0 4
36950: ARRAY
36951: PUSH
36952: LD_VAR 0 3
36956: ARRAY
36957: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36958: LD_VAR 0 5
36962: PUSH
36963: LD_INT 1
36965: ARRAY
36966: PPUSH
36967: CALL_OW 302
36971: NOT
36972: PUSH
36973: LD_VAR 0 5
36977: PUSH
36978: LD_INT 1
36980: ARRAY
36981: PPUSH
36982: CALL_OW 255
36986: PUSH
36987: LD_VAR 0 1
36991: PPUSH
36992: CALL_OW 255
36996: NONEQUAL
36997: OR
36998: IFFALSE 37104
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37000: LD_VAR 0 5
37004: PUSH
37005: LD_INT 1
37007: ARRAY
37008: PPUSH
37009: CALL_OW 305
37013: PUSH
37014: LD_VAR 0 5
37018: PUSH
37019: LD_INT 1
37021: ARRAY
37022: PPUSH
37023: CALL_OW 255
37027: PUSH
37028: LD_VAR 0 1
37032: PPUSH
37033: CALL_OW 255
37037: EQUAL
37038: AND
37039: IFFALSE 37063
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37041: LD_VAR 0 5
37045: PUSH
37046: LD_INT 1
37048: ARRAY
37049: PPUSH
37050: LD_VAR 0 5
37054: PUSH
37055: LD_INT 2
37057: ARRAY
37058: PPUSH
37059: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37063: LD_ADDR_EXP 130
37067: PUSH
37068: LD_EXP 130
37072: PPUSH
37073: LD_VAR 0 4
37077: PPUSH
37078: LD_EXP 130
37082: PUSH
37083: LD_VAR 0 4
37087: ARRAY
37088: PPUSH
37089: LD_VAR 0 3
37093: PPUSH
37094: CALL_OW 3
37098: PPUSH
37099: CALL_OW 1
37103: ST_TO_ADDR
// end ; end ;
37104: GO 36933
37106: POP
37107: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37108: LD_VAR 0 1
37112: PPUSH
37113: LD_EXP 130
37117: PUSH
37118: LD_VAR 0 4
37122: ARRAY
37123: PUSH
37124: LD_INT 0
37126: PLUS
37127: PPUSH
37128: CALL_OW 505
// end ;
37132: LD_VAR 0 2
37136: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37137: LD_INT 0
37139: PPUSH
37140: PPUSH
37141: PPUSH
37142: PPUSH
// if not hack in hackTanks then
37143: LD_VAR 0 1
37147: PUSH
37148: LD_EXP 129
37152: IN
37153: NOT
37154: IFFALSE 37158
// exit ;
37156: GO 37243
// index := GetElementIndex ( hackTanks , hack ) ;
37158: LD_ADDR_VAR 0 5
37162: PUSH
37163: LD_EXP 129
37167: PPUSH
37168: LD_VAR 0 1
37172: PPUSH
37173: CALL 44033 0 2
37177: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37178: LD_ADDR_VAR 0 4
37182: PUSH
37183: DOUBLE
37184: LD_INT 1
37186: DEC
37187: ST_TO_ADDR
37188: LD_EXP 130
37192: PUSH
37193: LD_VAR 0 5
37197: ARRAY
37198: PUSH
37199: FOR_TO
37200: IFFALSE 37241
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37202: LD_EXP 130
37206: PUSH
37207: LD_VAR 0 5
37211: ARRAY
37212: PUSH
37213: LD_VAR 0 4
37217: ARRAY
37218: PUSH
37219: LD_INT 1
37221: ARRAY
37222: PUSH
37223: LD_VAR 0 2
37227: EQUAL
37228: IFFALSE 37239
// KillUnit ( vehicle ) ;
37230: LD_VAR 0 2
37234: PPUSH
37235: CALL_OW 66
37239: GO 37199
37241: POP
37242: POP
// end ;
37243: LD_VAR 0 3
37247: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37248: LD_EXP 134
37252: NOT
37253: IFFALSE 37288
37255: GO 37257
37257: DISABLE
// begin initMiner := true ;
37258: LD_ADDR_EXP 134
37262: PUSH
37263: LD_INT 1
37265: ST_TO_ADDR
// minersList := [ ] ;
37266: LD_ADDR_EXP 135
37270: PUSH
37271: EMPTY
37272: ST_TO_ADDR
// minerMinesList := [ ] ;
37273: LD_ADDR_EXP 136
37277: PUSH
37278: EMPTY
37279: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37280: LD_ADDR_EXP 137
37284: PUSH
37285: LD_INT 5
37287: ST_TO_ADDR
// end ;
37288: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37289: LD_EXP 134
37293: PUSH
37294: LD_INT 34
37296: PUSH
37297: LD_EXP 56
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PPUSH
37306: CALL_OW 69
37310: AND
37311: IFFALSE 37774
37313: GO 37315
37315: DISABLE
37316: LD_INT 0
37318: PPUSH
37319: PPUSH
37320: PPUSH
37321: PPUSH
// begin enable ;
37322: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37323: LD_ADDR_VAR 0 1
37327: PUSH
37328: LD_INT 34
37330: PUSH
37331: LD_EXP 56
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PPUSH
37340: CALL_OW 69
37344: PUSH
37345: FOR_IN
37346: IFFALSE 37418
// begin if not i in minersList then
37348: LD_VAR 0 1
37352: PUSH
37353: LD_EXP 135
37357: IN
37358: NOT
37359: IFFALSE 37416
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37361: LD_ADDR_EXP 135
37365: PUSH
37366: LD_EXP 135
37370: PPUSH
37371: LD_EXP 135
37375: PUSH
37376: LD_INT 1
37378: PLUS
37379: PPUSH
37380: LD_VAR 0 1
37384: PPUSH
37385: CALL_OW 1
37389: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37390: LD_ADDR_EXP 136
37394: PUSH
37395: LD_EXP 136
37399: PPUSH
37400: LD_EXP 136
37404: PUSH
37405: LD_INT 1
37407: PLUS
37408: PPUSH
37409: EMPTY
37410: PPUSH
37411: CALL_OW 1
37415: ST_TO_ADDR
// end end ;
37416: GO 37345
37418: POP
37419: POP
// for i := minerMinesList downto 1 do
37420: LD_ADDR_VAR 0 1
37424: PUSH
37425: DOUBLE
37426: LD_EXP 136
37430: INC
37431: ST_TO_ADDR
37432: LD_INT 1
37434: PUSH
37435: FOR_DOWNTO
37436: IFFALSE 37772
// begin if IsLive ( minersList [ i ] ) then
37438: LD_EXP 135
37442: PUSH
37443: LD_VAR 0 1
37447: ARRAY
37448: PPUSH
37449: CALL_OW 300
37453: IFFALSE 37481
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37455: LD_EXP 135
37459: PUSH
37460: LD_VAR 0 1
37464: ARRAY
37465: PPUSH
37466: LD_EXP 136
37470: PUSH
37471: LD_VAR 0 1
37475: ARRAY
37476: PPUSH
37477: CALL_OW 505
// if not minerMinesList [ i ] then
37481: LD_EXP 136
37485: PUSH
37486: LD_VAR 0 1
37490: ARRAY
37491: NOT
37492: IFFALSE 37496
// continue ;
37494: GO 37435
// for j := minerMinesList [ i ] downto 1 do
37496: LD_ADDR_VAR 0 2
37500: PUSH
37501: DOUBLE
37502: LD_EXP 136
37506: PUSH
37507: LD_VAR 0 1
37511: ARRAY
37512: INC
37513: ST_TO_ADDR
37514: LD_INT 1
37516: PUSH
37517: FOR_DOWNTO
37518: IFFALSE 37768
// begin side := GetSide ( minersList [ i ] ) ;
37520: LD_ADDR_VAR 0 3
37524: PUSH
37525: LD_EXP 135
37529: PUSH
37530: LD_VAR 0 1
37534: ARRAY
37535: PPUSH
37536: CALL_OW 255
37540: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37541: LD_ADDR_VAR 0 4
37545: PUSH
37546: LD_EXP 136
37550: PUSH
37551: LD_VAR 0 1
37555: ARRAY
37556: PUSH
37557: LD_VAR 0 2
37561: ARRAY
37562: PUSH
37563: LD_INT 1
37565: ARRAY
37566: PPUSH
37567: LD_EXP 136
37571: PUSH
37572: LD_VAR 0 1
37576: ARRAY
37577: PUSH
37578: LD_VAR 0 2
37582: ARRAY
37583: PUSH
37584: LD_INT 2
37586: ARRAY
37587: PPUSH
37588: CALL_OW 428
37592: ST_TO_ADDR
// if not tmp then
37593: LD_VAR 0 4
37597: NOT
37598: IFFALSE 37602
// continue ;
37600: GO 37517
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37602: LD_VAR 0 4
37606: PUSH
37607: LD_INT 81
37609: PUSH
37610: LD_VAR 0 3
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PPUSH
37619: CALL_OW 69
37623: IN
37624: PUSH
37625: LD_EXP 136
37629: PUSH
37630: LD_VAR 0 1
37634: ARRAY
37635: PUSH
37636: LD_VAR 0 2
37640: ARRAY
37641: PUSH
37642: LD_INT 1
37644: ARRAY
37645: PPUSH
37646: LD_EXP 136
37650: PUSH
37651: LD_VAR 0 1
37655: ARRAY
37656: PUSH
37657: LD_VAR 0 2
37661: ARRAY
37662: PUSH
37663: LD_INT 2
37665: ARRAY
37666: PPUSH
37667: CALL_OW 458
37671: AND
37672: IFFALSE 37766
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37674: LD_EXP 136
37678: PUSH
37679: LD_VAR 0 1
37683: ARRAY
37684: PUSH
37685: LD_VAR 0 2
37689: ARRAY
37690: PUSH
37691: LD_INT 1
37693: ARRAY
37694: PPUSH
37695: LD_EXP 136
37699: PUSH
37700: LD_VAR 0 1
37704: ARRAY
37705: PUSH
37706: LD_VAR 0 2
37710: ARRAY
37711: PUSH
37712: LD_INT 2
37714: ARRAY
37715: PPUSH
37716: LD_VAR 0 3
37720: PPUSH
37721: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37725: LD_ADDR_EXP 136
37729: PUSH
37730: LD_EXP 136
37734: PPUSH
37735: LD_VAR 0 1
37739: PPUSH
37740: LD_EXP 136
37744: PUSH
37745: LD_VAR 0 1
37749: ARRAY
37750: PPUSH
37751: LD_VAR 0 2
37755: PPUSH
37756: CALL_OW 3
37760: PPUSH
37761: CALL_OW 1
37765: ST_TO_ADDR
// end ; end ;
37766: GO 37517
37768: POP
37769: POP
// end ;
37770: GO 37435
37772: POP
37773: POP
// end ;
37774: PPOPN 4
37776: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37777: LD_INT 0
37779: PPUSH
37780: PPUSH
// result := false ;
37781: LD_ADDR_VAR 0 4
37785: PUSH
37786: LD_INT 0
37788: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL_OW 264
37798: PUSH
37799: LD_EXP 56
37803: EQUAL
37804: NOT
37805: IFFALSE 37809
// exit ;
37807: GO 38049
// index := GetElementIndex ( minersList , unit ) ;
37809: LD_ADDR_VAR 0 5
37813: PUSH
37814: LD_EXP 135
37818: PPUSH
37819: LD_VAR 0 1
37823: PPUSH
37824: CALL 44033 0 2
37828: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37829: LD_EXP 136
37833: PUSH
37834: LD_VAR 0 5
37838: ARRAY
37839: PUSH
37840: LD_EXP 137
37844: GREATEREQUAL
37845: IFFALSE 37849
// exit ;
37847: GO 38049
// ComMoveXY ( unit , x , y ) ;
37849: LD_VAR 0 1
37853: PPUSH
37854: LD_VAR 0 2
37858: PPUSH
37859: LD_VAR 0 3
37863: PPUSH
37864: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37868: LD_INT 35
37870: PPUSH
37871: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37875: LD_VAR 0 1
37879: PPUSH
37880: LD_VAR 0 2
37884: PPUSH
37885: LD_VAR 0 3
37889: PPUSH
37890: CALL 74752 0 3
37894: NOT
37895: PUSH
37896: LD_VAR 0 1
37900: PPUSH
37901: CALL_OW 314
37905: AND
37906: IFFALSE 37910
// exit ;
37908: GO 38049
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37910: LD_VAR 0 2
37914: PPUSH
37915: LD_VAR 0 3
37919: PPUSH
37920: CALL_OW 428
37924: PUSH
37925: LD_VAR 0 1
37929: EQUAL
37930: PUSH
37931: LD_VAR 0 1
37935: PPUSH
37936: CALL_OW 314
37940: NOT
37941: AND
37942: IFFALSE 37868
// PlaySoundXY ( x , y , PlantMine ) ;
37944: LD_VAR 0 2
37948: PPUSH
37949: LD_VAR 0 3
37953: PPUSH
37954: LD_STRING PlantMine
37956: PPUSH
37957: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37961: LD_VAR 0 2
37965: PPUSH
37966: LD_VAR 0 3
37970: PPUSH
37971: LD_VAR 0 1
37975: PPUSH
37976: CALL_OW 255
37980: PPUSH
37981: LD_INT 0
37983: PPUSH
37984: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37988: LD_ADDR_EXP 136
37992: PUSH
37993: LD_EXP 136
37997: PPUSH
37998: LD_VAR 0 5
38002: PUSH
38003: LD_EXP 136
38007: PUSH
38008: LD_VAR 0 5
38012: ARRAY
38013: PUSH
38014: LD_INT 1
38016: PLUS
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PPUSH
38022: LD_VAR 0 2
38026: PUSH
38027: LD_VAR 0 3
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PPUSH
38036: CALL 44248 0 3
38040: ST_TO_ADDR
// result := true ;
38041: LD_ADDR_VAR 0 4
38045: PUSH
38046: LD_INT 1
38048: ST_TO_ADDR
// end ;
38049: LD_VAR 0 4
38053: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38054: LD_INT 0
38056: PPUSH
38057: PPUSH
38058: PPUSH
// if not unit in minersList then
38059: LD_VAR 0 1
38063: PUSH
38064: LD_EXP 135
38068: IN
38069: NOT
38070: IFFALSE 38074
// exit ;
38072: GO 38466
// index := GetElementIndex ( minersList , unit ) ;
38074: LD_ADDR_VAR 0 6
38078: PUSH
38079: LD_EXP 135
38083: PPUSH
38084: LD_VAR 0 1
38088: PPUSH
38089: CALL 44033 0 2
38093: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38094: LD_ADDR_VAR 0 5
38098: PUSH
38099: DOUBLE
38100: LD_EXP 136
38104: PUSH
38105: LD_VAR 0 6
38109: ARRAY
38110: INC
38111: ST_TO_ADDR
38112: LD_INT 1
38114: PUSH
38115: FOR_DOWNTO
38116: IFFALSE 38277
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38118: LD_EXP 136
38122: PUSH
38123: LD_VAR 0 6
38127: ARRAY
38128: PUSH
38129: LD_VAR 0 5
38133: ARRAY
38134: PUSH
38135: LD_INT 1
38137: ARRAY
38138: PUSH
38139: LD_VAR 0 2
38143: EQUAL
38144: PUSH
38145: LD_EXP 136
38149: PUSH
38150: LD_VAR 0 6
38154: ARRAY
38155: PUSH
38156: LD_VAR 0 5
38160: ARRAY
38161: PUSH
38162: LD_INT 2
38164: ARRAY
38165: PUSH
38166: LD_VAR 0 3
38170: EQUAL
38171: AND
38172: IFFALSE 38275
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38174: LD_EXP 136
38178: PUSH
38179: LD_VAR 0 6
38183: ARRAY
38184: PUSH
38185: LD_VAR 0 5
38189: ARRAY
38190: PUSH
38191: LD_INT 1
38193: ARRAY
38194: PPUSH
38195: LD_EXP 136
38199: PUSH
38200: LD_VAR 0 6
38204: ARRAY
38205: PUSH
38206: LD_VAR 0 5
38210: ARRAY
38211: PUSH
38212: LD_INT 2
38214: ARRAY
38215: PPUSH
38216: LD_VAR 0 1
38220: PPUSH
38221: CALL_OW 255
38225: PPUSH
38226: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38230: LD_ADDR_EXP 136
38234: PUSH
38235: LD_EXP 136
38239: PPUSH
38240: LD_VAR 0 6
38244: PPUSH
38245: LD_EXP 136
38249: PUSH
38250: LD_VAR 0 6
38254: ARRAY
38255: PPUSH
38256: LD_VAR 0 5
38260: PPUSH
38261: CALL_OW 3
38265: PPUSH
38266: CALL_OW 1
38270: ST_TO_ADDR
// exit ;
38271: POP
38272: POP
38273: GO 38466
// end ; end ;
38275: GO 38115
38277: POP
38278: POP
// for i := minerMinesList [ index ] downto 1 do
38279: LD_ADDR_VAR 0 5
38283: PUSH
38284: DOUBLE
38285: LD_EXP 136
38289: PUSH
38290: LD_VAR 0 6
38294: ARRAY
38295: INC
38296: ST_TO_ADDR
38297: LD_INT 1
38299: PUSH
38300: FOR_DOWNTO
38301: IFFALSE 38464
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38303: LD_EXP 136
38307: PUSH
38308: LD_VAR 0 6
38312: ARRAY
38313: PUSH
38314: LD_VAR 0 5
38318: ARRAY
38319: PUSH
38320: LD_INT 1
38322: ARRAY
38323: PPUSH
38324: LD_EXP 136
38328: PUSH
38329: LD_VAR 0 6
38333: ARRAY
38334: PUSH
38335: LD_VAR 0 5
38339: ARRAY
38340: PUSH
38341: LD_INT 2
38343: ARRAY
38344: PPUSH
38345: LD_VAR 0 2
38349: PPUSH
38350: LD_VAR 0 3
38354: PPUSH
38355: CALL_OW 298
38359: PUSH
38360: LD_INT 6
38362: LESS
38363: IFFALSE 38462
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38365: LD_EXP 136
38369: PUSH
38370: LD_VAR 0 6
38374: ARRAY
38375: PUSH
38376: LD_VAR 0 5
38380: ARRAY
38381: PUSH
38382: LD_INT 1
38384: ARRAY
38385: PPUSH
38386: LD_EXP 136
38390: PUSH
38391: LD_VAR 0 6
38395: ARRAY
38396: PUSH
38397: LD_VAR 0 5
38401: ARRAY
38402: PUSH
38403: LD_INT 2
38405: ARRAY
38406: PPUSH
38407: LD_VAR 0 1
38411: PPUSH
38412: CALL_OW 255
38416: PPUSH
38417: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38421: LD_ADDR_EXP 136
38425: PUSH
38426: LD_EXP 136
38430: PPUSH
38431: LD_VAR 0 6
38435: PPUSH
38436: LD_EXP 136
38440: PUSH
38441: LD_VAR 0 6
38445: ARRAY
38446: PPUSH
38447: LD_VAR 0 5
38451: PPUSH
38452: CALL_OW 3
38456: PPUSH
38457: CALL_OW 1
38461: ST_TO_ADDR
// end ; end ;
38462: GO 38300
38464: POP
38465: POP
// end ;
38466: LD_VAR 0 4
38470: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38471: LD_INT 0
38473: PPUSH
38474: PPUSH
38475: PPUSH
38476: PPUSH
38477: PPUSH
38478: PPUSH
38479: PPUSH
38480: PPUSH
38481: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38482: LD_VAR 0 1
38486: PPUSH
38487: CALL_OW 264
38491: PUSH
38492: LD_EXP 56
38496: EQUAL
38497: NOT
38498: PUSH
38499: LD_VAR 0 1
38503: PUSH
38504: LD_EXP 135
38508: IN
38509: NOT
38510: OR
38511: IFFALSE 38515
// exit ;
38513: GO 38837
// index := GetElementIndex ( minersList , unit ) ;
38515: LD_ADDR_VAR 0 6
38519: PUSH
38520: LD_EXP 135
38524: PPUSH
38525: LD_VAR 0 1
38529: PPUSH
38530: CALL 44033 0 2
38534: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38535: LD_ADDR_VAR 0 8
38539: PUSH
38540: LD_EXP 137
38544: PUSH
38545: LD_EXP 136
38549: PUSH
38550: LD_VAR 0 6
38554: ARRAY
38555: MINUS
38556: ST_TO_ADDR
// if not minesFreeAmount then
38557: LD_VAR 0 8
38561: NOT
38562: IFFALSE 38566
// exit ;
38564: GO 38837
// tmp := [ ] ;
38566: LD_ADDR_VAR 0 7
38570: PUSH
38571: EMPTY
38572: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38573: LD_ADDR_VAR 0 5
38577: PUSH
38578: DOUBLE
38579: LD_INT 1
38581: DEC
38582: ST_TO_ADDR
38583: LD_VAR 0 8
38587: PUSH
38588: FOR_TO
38589: IFFALSE 38784
// begin _d := rand ( 0 , 5 ) ;
38591: LD_ADDR_VAR 0 11
38595: PUSH
38596: LD_INT 0
38598: PPUSH
38599: LD_INT 5
38601: PPUSH
38602: CALL_OW 12
38606: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38607: LD_ADDR_VAR 0 12
38611: PUSH
38612: LD_INT 2
38614: PPUSH
38615: LD_INT 6
38617: PPUSH
38618: CALL_OW 12
38622: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38623: LD_ADDR_VAR 0 9
38627: PUSH
38628: LD_VAR 0 2
38632: PPUSH
38633: LD_VAR 0 11
38637: PPUSH
38638: LD_VAR 0 12
38642: PPUSH
38643: CALL_OW 272
38647: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38648: LD_ADDR_VAR 0 10
38652: PUSH
38653: LD_VAR 0 3
38657: PPUSH
38658: LD_VAR 0 11
38662: PPUSH
38663: LD_VAR 0 12
38667: PPUSH
38668: CALL_OW 273
38672: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38673: LD_VAR 0 9
38677: PPUSH
38678: LD_VAR 0 10
38682: PPUSH
38683: CALL_OW 488
38687: PUSH
38688: LD_VAR 0 9
38692: PUSH
38693: LD_VAR 0 10
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_VAR 0 7
38706: IN
38707: NOT
38708: AND
38709: PUSH
38710: LD_VAR 0 9
38714: PPUSH
38715: LD_VAR 0 10
38719: PPUSH
38720: CALL_OW 458
38724: NOT
38725: AND
38726: IFFALSE 38768
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38728: LD_ADDR_VAR 0 7
38732: PUSH
38733: LD_VAR 0 7
38737: PPUSH
38738: LD_VAR 0 7
38742: PUSH
38743: LD_INT 1
38745: PLUS
38746: PPUSH
38747: LD_VAR 0 9
38751: PUSH
38752: LD_VAR 0 10
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PPUSH
38761: CALL_OW 1
38765: ST_TO_ADDR
38766: GO 38782
// i := i - 1 ;
38768: LD_ADDR_VAR 0 5
38772: PUSH
38773: LD_VAR 0 5
38777: PUSH
38778: LD_INT 1
38780: MINUS
38781: ST_TO_ADDR
// end ;
38782: GO 38588
38784: POP
38785: POP
// for i in tmp do
38786: LD_ADDR_VAR 0 5
38790: PUSH
38791: LD_VAR 0 7
38795: PUSH
38796: FOR_IN
38797: IFFALSE 38835
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38799: LD_VAR 0 1
38803: PPUSH
38804: LD_VAR 0 5
38808: PUSH
38809: LD_INT 1
38811: ARRAY
38812: PPUSH
38813: LD_VAR 0 5
38817: PUSH
38818: LD_INT 2
38820: ARRAY
38821: PPUSH
38822: CALL 37777 0 3
38826: NOT
38827: IFFALSE 38833
// exit ;
38829: POP
38830: POP
38831: GO 38837
38833: GO 38796
38835: POP
38836: POP
// end ;
38837: LD_VAR 0 4
38841: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38842: LD_INT 0
38844: PPUSH
38845: PPUSH
38846: PPUSH
38847: PPUSH
38848: PPUSH
38849: PPUSH
38850: PPUSH
// if not GetClass ( unit ) = class_sniper then
38851: LD_VAR 0 1
38855: PPUSH
38856: CALL_OW 257
38860: PUSH
38861: LD_INT 5
38863: EQUAL
38864: NOT
38865: IFFALSE 38869
// exit ;
38867: GO 39257
// dist := 8 ;
38869: LD_ADDR_VAR 0 5
38873: PUSH
38874: LD_INT 8
38876: ST_TO_ADDR
// viewRange := 12 ;
38877: LD_ADDR_VAR 0 7
38881: PUSH
38882: LD_INT 12
38884: ST_TO_ADDR
// side := GetSide ( unit ) ;
38885: LD_ADDR_VAR 0 6
38889: PUSH
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL_OW 255
38899: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38900: LD_INT 61
38902: PPUSH
38903: LD_VAR 0 6
38907: PPUSH
38908: CALL_OW 321
38912: PUSH
38913: LD_INT 2
38915: EQUAL
38916: IFFALSE 38926
// viewRange := 16 ;
38918: LD_ADDR_VAR 0 7
38922: PUSH
38923: LD_INT 16
38925: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38926: LD_VAR 0 1
38930: PPUSH
38931: LD_VAR 0 2
38935: PPUSH
38936: LD_VAR 0 3
38940: PPUSH
38941: CALL_OW 297
38945: PUSH
38946: LD_VAR 0 5
38950: GREATER
38951: IFFALSE 39030
// begin ComMoveXY ( unit , x , y ) ;
38953: LD_VAR 0 1
38957: PPUSH
38958: LD_VAR 0 2
38962: PPUSH
38963: LD_VAR 0 3
38967: PPUSH
38968: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38972: LD_INT 35
38974: PPUSH
38975: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38979: LD_VAR 0 1
38983: PPUSH
38984: LD_VAR 0 2
38988: PPUSH
38989: LD_VAR 0 3
38993: PPUSH
38994: CALL 74752 0 3
38998: NOT
38999: IFFALSE 39003
// exit ;
39001: GO 39257
// until GetDistUnitXY ( unit , x , y ) < dist ;
39003: LD_VAR 0 1
39007: PPUSH
39008: LD_VAR 0 2
39012: PPUSH
39013: LD_VAR 0 3
39017: PPUSH
39018: CALL_OW 297
39022: PUSH
39023: LD_VAR 0 5
39027: LESS
39028: IFFALSE 38972
// end ; ComTurnXY ( unit , x , y ) ;
39030: LD_VAR 0 1
39034: PPUSH
39035: LD_VAR 0 2
39039: PPUSH
39040: LD_VAR 0 3
39044: PPUSH
39045: CALL_OW 118
// wait ( 5 ) ;
39049: LD_INT 5
39051: PPUSH
39052: CALL_OW 67
// _d := GetDir ( unit ) ;
39056: LD_ADDR_VAR 0 10
39060: PUSH
39061: LD_VAR 0 1
39065: PPUSH
39066: CALL_OW 254
39070: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39071: LD_ADDR_VAR 0 8
39075: PUSH
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL_OW 250
39085: PPUSH
39086: LD_VAR 0 10
39090: PPUSH
39091: LD_VAR 0 5
39095: PPUSH
39096: CALL_OW 272
39100: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39101: LD_ADDR_VAR 0 9
39105: PUSH
39106: LD_VAR 0 1
39110: PPUSH
39111: CALL_OW 251
39115: PPUSH
39116: LD_VAR 0 10
39120: PPUSH
39121: LD_VAR 0 5
39125: PPUSH
39126: CALL_OW 273
39130: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39131: LD_VAR 0 8
39135: PPUSH
39136: LD_VAR 0 9
39140: PPUSH
39141: CALL_OW 488
39145: NOT
39146: IFFALSE 39150
// exit ;
39148: GO 39257
// ComAnimCustom ( unit , 1 ) ;
39150: LD_VAR 0 1
39154: PPUSH
39155: LD_INT 1
39157: PPUSH
39158: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39162: LD_VAR 0 8
39166: PPUSH
39167: LD_VAR 0 9
39171: PPUSH
39172: LD_VAR 0 6
39176: PPUSH
39177: LD_VAR 0 7
39181: PPUSH
39182: CALL_OW 330
// repeat wait ( 1 ) ;
39186: LD_INT 1
39188: PPUSH
39189: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39193: LD_VAR 0 1
39197: PPUSH
39198: CALL_OW 316
39202: PUSH
39203: LD_VAR 0 1
39207: PPUSH
39208: CALL_OW 314
39212: OR
39213: PUSH
39214: LD_VAR 0 1
39218: PPUSH
39219: CALL_OW 302
39223: NOT
39224: OR
39225: PUSH
39226: LD_VAR 0 1
39230: PPUSH
39231: CALL_OW 301
39235: OR
39236: IFFALSE 39186
// RemoveSeeing ( _x , _y , side ) ;
39238: LD_VAR 0 8
39242: PPUSH
39243: LD_VAR 0 9
39247: PPUSH
39248: LD_VAR 0 6
39252: PPUSH
39253: CALL_OW 331
// end ; end_of_file
39257: LD_VAR 0 4
39261: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39262: LD_INT 0
39264: PPUSH
39265: PPUSH
// if exist_mode then
39266: LD_VAR 0 2
39270: IFFALSE 39295
// unit := CreateCharacter ( prefix & ident ) else
39272: LD_ADDR_VAR 0 5
39276: PUSH
39277: LD_VAR 0 3
39281: PUSH
39282: LD_VAR 0 1
39286: STR
39287: PPUSH
39288: CALL_OW 34
39292: ST_TO_ADDR
39293: GO 39310
// unit := NewCharacter ( ident ) ;
39295: LD_ADDR_VAR 0 5
39299: PUSH
39300: LD_VAR 0 1
39304: PPUSH
39305: CALL_OW 25
39309: ST_TO_ADDR
// result := unit ;
39310: LD_ADDR_VAR 0 4
39314: PUSH
39315: LD_VAR 0 5
39319: ST_TO_ADDR
// end ;
39320: LD_VAR 0 4
39324: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39325: LD_INT 0
39327: PPUSH
39328: PPUSH
// if not side or not nation then
39329: LD_VAR 0 1
39333: NOT
39334: PUSH
39335: LD_VAR 0 2
39339: NOT
39340: OR
39341: IFFALSE 39345
// exit ;
39343: GO 40113
// case nation of nation_american :
39345: LD_VAR 0 2
39349: PUSH
39350: LD_INT 1
39352: DOUBLE
39353: EQUAL
39354: IFTRUE 39358
39356: GO 39572
39358: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39359: LD_ADDR_VAR 0 4
39363: PUSH
39364: LD_INT 35
39366: PUSH
39367: LD_INT 45
39369: PUSH
39370: LD_INT 46
39372: PUSH
39373: LD_INT 47
39375: PUSH
39376: LD_INT 82
39378: PUSH
39379: LD_INT 83
39381: PUSH
39382: LD_INT 84
39384: PUSH
39385: LD_INT 85
39387: PUSH
39388: LD_INT 86
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: LD_INT 6
39399: PUSH
39400: LD_INT 15
39402: PUSH
39403: LD_INT 16
39405: PUSH
39406: LD_INT 7
39408: PUSH
39409: LD_INT 12
39411: PUSH
39412: LD_INT 13
39414: PUSH
39415: LD_INT 10
39417: PUSH
39418: LD_INT 14
39420: PUSH
39421: LD_INT 20
39423: PUSH
39424: LD_INT 21
39426: PUSH
39427: LD_INT 22
39429: PUSH
39430: LD_INT 25
39432: PUSH
39433: LD_INT 32
39435: PUSH
39436: LD_INT 27
39438: PUSH
39439: LD_INT 36
39441: PUSH
39442: LD_INT 69
39444: PUSH
39445: LD_INT 39
39447: PUSH
39448: LD_INT 34
39450: PUSH
39451: LD_INT 40
39453: PUSH
39454: LD_INT 48
39456: PUSH
39457: LD_INT 49
39459: PUSH
39460: LD_INT 50
39462: PUSH
39463: LD_INT 51
39465: PUSH
39466: LD_INT 52
39468: PUSH
39469: LD_INT 53
39471: PUSH
39472: LD_INT 54
39474: PUSH
39475: LD_INT 55
39477: PUSH
39478: LD_INT 56
39480: PUSH
39481: LD_INT 57
39483: PUSH
39484: LD_INT 58
39486: PUSH
39487: LD_INT 59
39489: PUSH
39490: LD_INT 60
39492: PUSH
39493: LD_INT 61
39495: PUSH
39496: LD_INT 62
39498: PUSH
39499: LD_INT 80
39501: PUSH
39502: LD_INT 82
39504: PUSH
39505: LD_INT 83
39507: PUSH
39508: LD_INT 84
39510: PUSH
39511: LD_INT 85
39513: PUSH
39514: LD_INT 86
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: ST_TO_ADDR
39570: GO 40037
39572: LD_INT 2
39574: DOUBLE
39575: EQUAL
39576: IFTRUE 39580
39578: GO 39806
39580: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39581: LD_ADDR_VAR 0 4
39585: PUSH
39586: LD_INT 35
39588: PUSH
39589: LD_INT 45
39591: PUSH
39592: LD_INT 46
39594: PUSH
39595: LD_INT 47
39597: PUSH
39598: LD_INT 82
39600: PUSH
39601: LD_INT 83
39603: PUSH
39604: LD_INT 84
39606: PUSH
39607: LD_INT 85
39609: PUSH
39610: LD_INT 87
39612: PUSH
39613: LD_INT 70
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: LD_INT 11
39621: PUSH
39622: LD_INT 3
39624: PUSH
39625: LD_INT 4
39627: PUSH
39628: LD_INT 5
39630: PUSH
39631: LD_INT 6
39633: PUSH
39634: LD_INT 15
39636: PUSH
39637: LD_INT 18
39639: PUSH
39640: LD_INT 7
39642: PUSH
39643: LD_INT 17
39645: PUSH
39646: LD_INT 8
39648: PUSH
39649: LD_INT 20
39651: PUSH
39652: LD_INT 21
39654: PUSH
39655: LD_INT 22
39657: PUSH
39658: LD_INT 72
39660: PUSH
39661: LD_INT 26
39663: PUSH
39664: LD_INT 69
39666: PUSH
39667: LD_INT 39
39669: PUSH
39670: LD_INT 40
39672: PUSH
39673: LD_INT 41
39675: PUSH
39676: LD_INT 42
39678: PUSH
39679: LD_INT 43
39681: PUSH
39682: LD_INT 48
39684: PUSH
39685: LD_INT 49
39687: PUSH
39688: LD_INT 50
39690: PUSH
39691: LD_INT 51
39693: PUSH
39694: LD_INT 52
39696: PUSH
39697: LD_INT 53
39699: PUSH
39700: LD_INT 54
39702: PUSH
39703: LD_INT 55
39705: PUSH
39706: LD_INT 56
39708: PUSH
39709: LD_INT 60
39711: PUSH
39712: LD_INT 61
39714: PUSH
39715: LD_INT 62
39717: PUSH
39718: LD_INT 66
39720: PUSH
39721: LD_INT 67
39723: PUSH
39724: LD_INT 68
39726: PUSH
39727: LD_INT 81
39729: PUSH
39730: LD_INT 82
39732: PUSH
39733: LD_INT 83
39735: PUSH
39736: LD_INT 84
39738: PUSH
39739: LD_INT 85
39741: PUSH
39742: LD_INT 87
39744: PUSH
39745: LD_INT 88
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: ST_TO_ADDR
39804: GO 40037
39806: LD_INT 3
39808: DOUBLE
39809: EQUAL
39810: IFTRUE 39814
39812: GO 40036
39814: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39815: LD_ADDR_VAR 0 4
39819: PUSH
39820: LD_INT 46
39822: PUSH
39823: LD_INT 47
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: LD_INT 82
39834: PUSH
39835: LD_INT 83
39837: PUSH
39838: LD_INT 84
39840: PUSH
39841: LD_INT 85
39843: PUSH
39844: LD_INT 86
39846: PUSH
39847: LD_INT 11
39849: PUSH
39850: LD_INT 9
39852: PUSH
39853: LD_INT 20
39855: PUSH
39856: LD_INT 19
39858: PUSH
39859: LD_INT 21
39861: PUSH
39862: LD_INT 24
39864: PUSH
39865: LD_INT 22
39867: PUSH
39868: LD_INT 25
39870: PUSH
39871: LD_INT 28
39873: PUSH
39874: LD_INT 29
39876: PUSH
39877: LD_INT 30
39879: PUSH
39880: LD_INT 31
39882: PUSH
39883: LD_INT 37
39885: PUSH
39886: LD_INT 38
39888: PUSH
39889: LD_INT 32
39891: PUSH
39892: LD_INT 27
39894: PUSH
39895: LD_INT 33
39897: PUSH
39898: LD_INT 69
39900: PUSH
39901: LD_INT 39
39903: PUSH
39904: LD_INT 34
39906: PUSH
39907: LD_INT 40
39909: PUSH
39910: LD_INT 71
39912: PUSH
39913: LD_INT 23
39915: PUSH
39916: LD_INT 44
39918: PUSH
39919: LD_INT 48
39921: PUSH
39922: LD_INT 49
39924: PUSH
39925: LD_INT 50
39927: PUSH
39928: LD_INT 51
39930: PUSH
39931: LD_INT 52
39933: PUSH
39934: LD_INT 53
39936: PUSH
39937: LD_INT 54
39939: PUSH
39940: LD_INT 55
39942: PUSH
39943: LD_INT 56
39945: PUSH
39946: LD_INT 57
39948: PUSH
39949: LD_INT 58
39951: PUSH
39952: LD_INT 59
39954: PUSH
39955: LD_INT 63
39957: PUSH
39958: LD_INT 64
39960: PUSH
39961: LD_INT 65
39963: PUSH
39964: LD_INT 82
39966: PUSH
39967: LD_INT 83
39969: PUSH
39970: LD_INT 84
39972: PUSH
39973: LD_INT 85
39975: PUSH
39976: LD_INT 86
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: ST_TO_ADDR
40034: GO 40037
40036: POP
// if state > - 1 and state < 3 then
40037: LD_VAR 0 3
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: GREATER
40046: PUSH
40047: LD_VAR 0 3
40051: PUSH
40052: LD_INT 3
40054: LESS
40055: AND
40056: IFFALSE 40113
// for i in result do
40058: LD_ADDR_VAR 0 5
40062: PUSH
40063: LD_VAR 0 4
40067: PUSH
40068: FOR_IN
40069: IFFALSE 40111
// if GetTech ( i , side ) <> state then
40071: LD_VAR 0 5
40075: PPUSH
40076: LD_VAR 0 1
40080: PPUSH
40081: CALL_OW 321
40085: PUSH
40086: LD_VAR 0 3
40090: NONEQUAL
40091: IFFALSE 40109
// result := result diff i ;
40093: LD_ADDR_VAR 0 4
40097: PUSH
40098: LD_VAR 0 4
40102: PUSH
40103: LD_VAR 0 5
40107: DIFF
40108: ST_TO_ADDR
40109: GO 40068
40111: POP
40112: POP
// end ;
40113: LD_VAR 0 4
40117: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40118: LD_INT 0
40120: PPUSH
40121: PPUSH
40122: PPUSH
// result := true ;
40123: LD_ADDR_VAR 0 3
40127: PUSH
40128: LD_INT 1
40130: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40131: LD_ADDR_VAR 0 5
40135: PUSH
40136: LD_VAR 0 2
40140: PPUSH
40141: CALL_OW 480
40145: ST_TO_ADDR
// if not tmp then
40146: LD_VAR 0 5
40150: NOT
40151: IFFALSE 40155
// exit ;
40153: GO 40204
// for i in tmp do
40155: LD_ADDR_VAR 0 4
40159: PUSH
40160: LD_VAR 0 5
40164: PUSH
40165: FOR_IN
40166: IFFALSE 40202
// if GetTech ( i , side ) <> state_researched then
40168: LD_VAR 0 4
40172: PPUSH
40173: LD_VAR 0 1
40177: PPUSH
40178: CALL_OW 321
40182: PUSH
40183: LD_INT 2
40185: NONEQUAL
40186: IFFALSE 40200
// begin result := false ;
40188: LD_ADDR_VAR 0 3
40192: PUSH
40193: LD_INT 0
40195: ST_TO_ADDR
// exit ;
40196: POP
40197: POP
40198: GO 40204
// end ;
40200: GO 40165
40202: POP
40203: POP
// end ;
40204: LD_VAR 0 3
40208: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40209: LD_INT 0
40211: PPUSH
40212: PPUSH
40213: PPUSH
40214: PPUSH
40215: PPUSH
40216: PPUSH
40217: PPUSH
40218: PPUSH
40219: PPUSH
40220: PPUSH
40221: PPUSH
40222: PPUSH
40223: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40224: LD_VAR 0 1
40228: NOT
40229: PUSH
40230: LD_VAR 0 1
40234: PPUSH
40235: CALL_OW 257
40239: PUSH
40240: LD_INT 9
40242: NONEQUAL
40243: OR
40244: IFFALSE 40248
// exit ;
40246: GO 40821
// side := GetSide ( unit ) ;
40248: LD_ADDR_VAR 0 9
40252: PUSH
40253: LD_VAR 0 1
40257: PPUSH
40258: CALL_OW 255
40262: ST_TO_ADDR
// tech_space := tech_spacanom ;
40263: LD_ADDR_VAR 0 12
40267: PUSH
40268: LD_INT 29
40270: ST_TO_ADDR
// tech_time := tech_taurad ;
40271: LD_ADDR_VAR 0 13
40275: PUSH
40276: LD_INT 28
40278: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40279: LD_ADDR_VAR 0 11
40283: PUSH
40284: LD_VAR 0 1
40288: PPUSH
40289: CALL_OW 310
40293: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40294: LD_VAR 0 11
40298: PPUSH
40299: CALL_OW 247
40303: PUSH
40304: LD_INT 2
40306: EQUAL
40307: IFFALSE 40311
// exit ;
40309: GO 40821
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40311: LD_ADDR_VAR 0 8
40315: PUSH
40316: LD_INT 81
40318: PUSH
40319: LD_VAR 0 9
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 3
40330: PUSH
40331: LD_INT 21
40333: PUSH
40334: LD_INT 3
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PPUSH
40349: CALL_OW 69
40353: ST_TO_ADDR
// if not tmp then
40354: LD_VAR 0 8
40358: NOT
40359: IFFALSE 40363
// exit ;
40361: GO 40821
// if in_unit then
40363: LD_VAR 0 11
40367: IFFALSE 40391
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40369: LD_ADDR_VAR 0 10
40373: PUSH
40374: LD_VAR 0 8
40378: PPUSH
40379: LD_VAR 0 11
40383: PPUSH
40384: CALL_OW 74
40388: ST_TO_ADDR
40389: GO 40411
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40391: LD_ADDR_VAR 0 10
40395: PUSH
40396: LD_VAR 0 8
40400: PPUSH
40401: LD_VAR 0 1
40405: PPUSH
40406: CALL_OW 74
40410: ST_TO_ADDR
// if not enemy then
40411: LD_VAR 0 10
40415: NOT
40416: IFFALSE 40420
// exit ;
40418: GO 40821
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40420: LD_VAR 0 11
40424: PUSH
40425: LD_VAR 0 11
40429: PPUSH
40430: LD_VAR 0 10
40434: PPUSH
40435: CALL_OW 296
40439: PUSH
40440: LD_INT 13
40442: GREATER
40443: AND
40444: PUSH
40445: LD_VAR 0 1
40449: PPUSH
40450: LD_VAR 0 10
40454: PPUSH
40455: CALL_OW 296
40459: PUSH
40460: LD_INT 12
40462: GREATER
40463: OR
40464: IFFALSE 40468
// exit ;
40466: GO 40821
// missile := [ 1 ] ;
40468: LD_ADDR_VAR 0 14
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: EMPTY
40477: LIST
40478: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40479: LD_VAR 0 9
40483: PPUSH
40484: LD_VAR 0 12
40488: PPUSH
40489: CALL_OW 325
40493: IFFALSE 40522
// missile := Replace ( missile , missile + 1 , 2 ) ;
40495: LD_ADDR_VAR 0 14
40499: PUSH
40500: LD_VAR 0 14
40504: PPUSH
40505: LD_VAR 0 14
40509: PUSH
40510: LD_INT 1
40512: PLUS
40513: PPUSH
40514: LD_INT 2
40516: PPUSH
40517: CALL_OW 1
40521: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40522: LD_VAR 0 9
40526: PPUSH
40527: LD_VAR 0 13
40531: PPUSH
40532: CALL_OW 325
40536: PUSH
40537: LD_VAR 0 10
40541: PPUSH
40542: CALL_OW 255
40546: PPUSH
40547: LD_VAR 0 13
40551: PPUSH
40552: CALL_OW 325
40556: NOT
40557: AND
40558: IFFALSE 40587
// missile := Replace ( missile , missile + 1 , 3 ) ;
40560: LD_ADDR_VAR 0 14
40564: PUSH
40565: LD_VAR 0 14
40569: PPUSH
40570: LD_VAR 0 14
40574: PUSH
40575: LD_INT 1
40577: PLUS
40578: PPUSH
40579: LD_INT 3
40581: PPUSH
40582: CALL_OW 1
40586: ST_TO_ADDR
// if missile < 2 then
40587: LD_VAR 0 14
40591: PUSH
40592: LD_INT 2
40594: LESS
40595: IFFALSE 40599
// exit ;
40597: GO 40821
// x := GetX ( enemy ) ;
40599: LD_ADDR_VAR 0 4
40603: PUSH
40604: LD_VAR 0 10
40608: PPUSH
40609: CALL_OW 250
40613: ST_TO_ADDR
// y := GetY ( enemy ) ;
40614: LD_ADDR_VAR 0 5
40618: PUSH
40619: LD_VAR 0 10
40623: PPUSH
40624: CALL_OW 251
40628: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40629: LD_ADDR_VAR 0 6
40633: PUSH
40634: LD_VAR 0 4
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PPUSH
40643: LD_INT 1
40645: PPUSH
40646: CALL_OW 12
40650: PLUS
40651: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40652: LD_ADDR_VAR 0 7
40656: PUSH
40657: LD_VAR 0 5
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PPUSH
40666: LD_INT 1
40668: PPUSH
40669: CALL_OW 12
40673: PLUS
40674: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40675: LD_VAR 0 6
40679: PPUSH
40680: LD_VAR 0 7
40684: PPUSH
40685: CALL_OW 488
40689: NOT
40690: IFFALSE 40712
// begin _x := x ;
40692: LD_ADDR_VAR 0 6
40696: PUSH
40697: LD_VAR 0 4
40701: ST_TO_ADDR
// _y := y ;
40702: LD_ADDR_VAR 0 7
40706: PUSH
40707: LD_VAR 0 5
40711: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40712: LD_ADDR_VAR 0 3
40716: PUSH
40717: LD_INT 1
40719: PPUSH
40720: LD_VAR 0 14
40724: PPUSH
40725: CALL_OW 12
40729: ST_TO_ADDR
// case i of 1 :
40730: LD_VAR 0 3
40734: PUSH
40735: LD_INT 1
40737: DOUBLE
40738: EQUAL
40739: IFTRUE 40743
40741: GO 40760
40743: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40744: LD_VAR 0 1
40748: PPUSH
40749: LD_VAR 0 10
40753: PPUSH
40754: CALL_OW 115
40758: GO 40821
40760: LD_INT 2
40762: DOUBLE
40763: EQUAL
40764: IFTRUE 40768
40766: GO 40790
40768: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40769: LD_VAR 0 1
40773: PPUSH
40774: LD_VAR 0 6
40778: PPUSH
40779: LD_VAR 0 7
40783: PPUSH
40784: CALL_OW 153
40788: GO 40821
40790: LD_INT 3
40792: DOUBLE
40793: EQUAL
40794: IFTRUE 40798
40796: GO 40820
40798: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40799: LD_VAR 0 1
40803: PPUSH
40804: LD_VAR 0 6
40808: PPUSH
40809: LD_VAR 0 7
40813: PPUSH
40814: CALL_OW 154
40818: GO 40821
40820: POP
// end ;
40821: LD_VAR 0 2
40825: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40826: LD_INT 0
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
40832: PPUSH
40833: PPUSH
// if not unit or not building then
40834: LD_VAR 0 1
40838: NOT
40839: PUSH
40840: LD_VAR 0 2
40844: NOT
40845: OR
40846: IFFALSE 40850
// exit ;
40848: GO 41008
// x := GetX ( building ) ;
40850: LD_ADDR_VAR 0 5
40854: PUSH
40855: LD_VAR 0 2
40859: PPUSH
40860: CALL_OW 250
40864: ST_TO_ADDR
// y := GetY ( building ) ;
40865: LD_ADDR_VAR 0 6
40869: PUSH
40870: LD_VAR 0 2
40874: PPUSH
40875: CALL_OW 251
40879: ST_TO_ADDR
// for i = 0 to 5 do
40880: LD_ADDR_VAR 0 4
40884: PUSH
40885: DOUBLE
40886: LD_INT 0
40888: DEC
40889: ST_TO_ADDR
40890: LD_INT 5
40892: PUSH
40893: FOR_TO
40894: IFFALSE 41006
// begin _x := ShiftX ( x , i , 3 ) ;
40896: LD_ADDR_VAR 0 7
40900: PUSH
40901: LD_VAR 0 5
40905: PPUSH
40906: LD_VAR 0 4
40910: PPUSH
40911: LD_INT 3
40913: PPUSH
40914: CALL_OW 272
40918: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40919: LD_ADDR_VAR 0 8
40923: PUSH
40924: LD_VAR 0 6
40928: PPUSH
40929: LD_VAR 0 4
40933: PPUSH
40934: LD_INT 3
40936: PPUSH
40937: CALL_OW 273
40941: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40942: LD_VAR 0 7
40946: PPUSH
40947: LD_VAR 0 8
40951: PPUSH
40952: CALL_OW 488
40956: NOT
40957: IFFALSE 40961
// continue ;
40959: GO 40893
// if HexInfo ( _x , _y ) = 0 then
40961: LD_VAR 0 7
40965: PPUSH
40966: LD_VAR 0 8
40970: PPUSH
40971: CALL_OW 428
40975: PUSH
40976: LD_INT 0
40978: EQUAL
40979: IFFALSE 41004
// begin ComMoveXY ( unit , _x , _y ) ;
40981: LD_VAR 0 1
40985: PPUSH
40986: LD_VAR 0 7
40990: PPUSH
40991: LD_VAR 0 8
40995: PPUSH
40996: CALL_OW 111
// exit ;
41000: POP
41001: POP
41002: GO 41008
// end ; end ;
41004: GO 40893
41006: POP
41007: POP
// end ;
41008: LD_VAR 0 3
41012: RET
// export function ScanBase ( side , base_area ) ; begin
41013: LD_INT 0
41015: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41016: LD_ADDR_VAR 0 3
41020: PUSH
41021: LD_VAR 0 2
41025: PPUSH
41026: LD_INT 81
41028: PUSH
41029: LD_VAR 0 1
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PPUSH
41038: CALL_OW 70
41042: ST_TO_ADDR
// end ;
41043: LD_VAR 0 3
41047: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41048: LD_INT 0
41050: PPUSH
41051: PPUSH
41052: PPUSH
41053: PPUSH
// result := false ;
41054: LD_ADDR_VAR 0 2
41058: PUSH
41059: LD_INT 0
41061: ST_TO_ADDR
// side := GetSide ( unit ) ;
41062: LD_ADDR_VAR 0 3
41066: PUSH
41067: LD_VAR 0 1
41071: PPUSH
41072: CALL_OW 255
41076: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41077: LD_ADDR_VAR 0 4
41081: PUSH
41082: LD_VAR 0 1
41086: PPUSH
41087: CALL_OW 248
41091: ST_TO_ADDR
// case nat of 1 :
41092: LD_VAR 0 4
41096: PUSH
41097: LD_INT 1
41099: DOUBLE
41100: EQUAL
41101: IFTRUE 41105
41103: GO 41116
41105: POP
// tech := tech_lassight ; 2 :
41106: LD_ADDR_VAR 0 5
41110: PUSH
41111: LD_INT 12
41113: ST_TO_ADDR
41114: GO 41155
41116: LD_INT 2
41118: DOUBLE
41119: EQUAL
41120: IFTRUE 41124
41122: GO 41135
41124: POP
// tech := tech_mortar ; 3 :
41125: LD_ADDR_VAR 0 5
41129: PUSH
41130: LD_INT 41
41132: ST_TO_ADDR
41133: GO 41155
41135: LD_INT 3
41137: DOUBLE
41138: EQUAL
41139: IFTRUE 41143
41141: GO 41154
41143: POP
// tech := tech_bazooka ; end ;
41144: LD_ADDR_VAR 0 5
41148: PUSH
41149: LD_INT 44
41151: ST_TO_ADDR
41152: GO 41155
41154: POP
// if Researched ( side , tech ) then
41155: LD_VAR 0 3
41159: PPUSH
41160: LD_VAR 0 5
41164: PPUSH
41165: CALL_OW 325
41169: IFFALSE 41196
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41171: LD_ADDR_VAR 0 2
41175: PUSH
41176: LD_INT 5
41178: PUSH
41179: LD_INT 8
41181: PUSH
41182: LD_INT 9
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: PUSH
41190: LD_VAR 0 4
41194: ARRAY
41195: ST_TO_ADDR
// end ;
41196: LD_VAR 0 2
41200: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41201: LD_INT 0
41203: PPUSH
41204: PPUSH
41205: PPUSH
// if not mines then
41206: LD_VAR 0 2
41210: NOT
41211: IFFALSE 41215
// exit ;
41213: GO 41359
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41215: LD_ADDR_VAR 0 5
41219: PUSH
41220: LD_INT 81
41222: PUSH
41223: LD_VAR 0 1
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 3
41234: PUSH
41235: LD_INT 21
41237: PUSH
41238: LD_INT 3
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PPUSH
41253: CALL_OW 69
41257: ST_TO_ADDR
// for i in mines do
41258: LD_ADDR_VAR 0 4
41262: PUSH
41263: LD_VAR 0 2
41267: PUSH
41268: FOR_IN
41269: IFFALSE 41357
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41271: LD_VAR 0 4
41275: PUSH
41276: LD_INT 1
41278: ARRAY
41279: PPUSH
41280: LD_VAR 0 4
41284: PUSH
41285: LD_INT 2
41287: ARRAY
41288: PPUSH
41289: CALL_OW 458
41293: NOT
41294: IFFALSE 41298
// continue ;
41296: GO 41268
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41298: LD_VAR 0 4
41302: PUSH
41303: LD_INT 1
41305: ARRAY
41306: PPUSH
41307: LD_VAR 0 4
41311: PUSH
41312: LD_INT 2
41314: ARRAY
41315: PPUSH
41316: CALL_OW 428
41320: PUSH
41321: LD_VAR 0 5
41325: IN
41326: IFFALSE 41355
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41328: LD_VAR 0 4
41332: PUSH
41333: LD_INT 1
41335: ARRAY
41336: PPUSH
41337: LD_VAR 0 4
41341: PUSH
41342: LD_INT 2
41344: ARRAY
41345: PPUSH
41346: LD_VAR 0 1
41350: PPUSH
41351: CALL_OW 456
// end ;
41355: GO 41268
41357: POP
41358: POP
// end ;
41359: LD_VAR 0 3
41363: RET
// export function Count ( array ) ; var i ; begin
41364: LD_INT 0
41366: PPUSH
41367: PPUSH
// result := 0 ;
41368: LD_ADDR_VAR 0 2
41372: PUSH
41373: LD_INT 0
41375: ST_TO_ADDR
// for i in array do
41376: LD_ADDR_VAR 0 3
41380: PUSH
41381: LD_VAR 0 1
41385: PUSH
41386: FOR_IN
41387: IFFALSE 41411
// if i then
41389: LD_VAR 0 3
41393: IFFALSE 41409
// result := result + 1 ;
41395: LD_ADDR_VAR 0 2
41399: PUSH
41400: LD_VAR 0 2
41404: PUSH
41405: LD_INT 1
41407: PLUS
41408: ST_TO_ADDR
41409: GO 41386
41411: POP
41412: POP
// end ;
41413: LD_VAR 0 2
41417: RET
// export function IsEmpty ( building ) ; begin
41418: LD_INT 0
41420: PPUSH
// if not building then
41421: LD_VAR 0 1
41425: NOT
41426: IFFALSE 41430
// exit ;
41428: GO 41473
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41430: LD_ADDR_VAR 0 2
41434: PUSH
41435: LD_VAR 0 1
41439: PUSH
41440: LD_INT 22
41442: PUSH
41443: LD_VAR 0 1
41447: PPUSH
41448: CALL_OW 255
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 58
41459: PUSH
41460: EMPTY
41461: LIST
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PPUSH
41467: CALL_OW 69
41471: IN
41472: ST_TO_ADDR
// end ;
41473: LD_VAR 0 2
41477: RET
// export function IsNotFull ( building ) ; begin
41478: LD_INT 0
41480: PPUSH
// if not building then
41481: LD_VAR 0 1
41485: NOT
41486: IFFALSE 41490
// exit ;
41488: GO 41509
// result := UnitsInside ( building ) < 6 ;
41490: LD_ADDR_VAR 0 2
41494: PUSH
41495: LD_VAR 0 1
41499: PPUSH
41500: CALL_OW 313
41504: PUSH
41505: LD_INT 6
41507: LESS
41508: ST_TO_ADDR
// end ;
41509: LD_VAR 0 2
41513: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41514: LD_INT 0
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
// tmp := [ ] ;
41520: LD_ADDR_VAR 0 3
41524: PUSH
41525: EMPTY
41526: ST_TO_ADDR
// list := [ ] ;
41527: LD_ADDR_VAR 0 5
41531: PUSH
41532: EMPTY
41533: ST_TO_ADDR
// for i = 16 to 25 do
41534: LD_ADDR_VAR 0 4
41538: PUSH
41539: DOUBLE
41540: LD_INT 16
41542: DEC
41543: ST_TO_ADDR
41544: LD_INT 25
41546: PUSH
41547: FOR_TO
41548: IFFALSE 41621
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41550: LD_ADDR_VAR 0 3
41554: PUSH
41555: LD_VAR 0 3
41559: PUSH
41560: LD_INT 22
41562: PUSH
41563: LD_VAR 0 1
41567: PPUSH
41568: CALL_OW 255
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 91
41579: PUSH
41580: LD_VAR 0 1
41584: PUSH
41585: LD_INT 6
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 30
41595: PUSH
41596: LD_VAR 0 4
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: PUSH
41610: EMPTY
41611: LIST
41612: PPUSH
41613: CALL_OW 69
41617: ADD
41618: ST_TO_ADDR
41619: GO 41547
41621: POP
41622: POP
// for i = 1 to tmp do
41623: LD_ADDR_VAR 0 4
41627: PUSH
41628: DOUBLE
41629: LD_INT 1
41631: DEC
41632: ST_TO_ADDR
41633: LD_VAR 0 3
41637: PUSH
41638: FOR_TO
41639: IFFALSE 41727
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41641: LD_ADDR_VAR 0 5
41645: PUSH
41646: LD_VAR 0 5
41650: PUSH
41651: LD_VAR 0 3
41655: PUSH
41656: LD_VAR 0 4
41660: ARRAY
41661: PPUSH
41662: CALL_OW 266
41666: PUSH
41667: LD_VAR 0 3
41671: PUSH
41672: LD_VAR 0 4
41676: ARRAY
41677: PPUSH
41678: CALL_OW 250
41682: PUSH
41683: LD_VAR 0 3
41687: PUSH
41688: LD_VAR 0 4
41692: ARRAY
41693: PPUSH
41694: CALL_OW 251
41698: PUSH
41699: LD_VAR 0 3
41703: PUSH
41704: LD_VAR 0 4
41708: ARRAY
41709: PPUSH
41710: CALL_OW 254
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: PUSH
41721: EMPTY
41722: LIST
41723: ADD
41724: ST_TO_ADDR
41725: GO 41638
41727: POP
41728: POP
// result := list ;
41729: LD_ADDR_VAR 0 2
41733: PUSH
41734: LD_VAR 0 5
41738: ST_TO_ADDR
// end ;
41739: LD_VAR 0 2
41743: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41744: LD_INT 0
41746: PPUSH
41747: PPUSH
41748: PPUSH
41749: PPUSH
41750: PPUSH
41751: PPUSH
41752: PPUSH
// if not factory then
41753: LD_VAR 0 1
41757: NOT
41758: IFFALSE 41762
// exit ;
41760: GO 42355
// if control = control_apeman then
41762: LD_VAR 0 4
41766: PUSH
41767: LD_INT 5
41769: EQUAL
41770: IFFALSE 41879
// begin tmp := UnitsInside ( factory ) ;
41772: LD_ADDR_VAR 0 8
41776: PUSH
41777: LD_VAR 0 1
41781: PPUSH
41782: CALL_OW 313
41786: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41787: LD_VAR 0 8
41791: PPUSH
41792: LD_INT 25
41794: PUSH
41795: LD_INT 12
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PPUSH
41802: CALL_OW 72
41806: NOT
41807: IFFALSE 41817
// control := control_manual ;
41809: LD_ADDR_VAR 0 4
41813: PUSH
41814: LD_INT 1
41816: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41817: LD_ADDR_VAR 0 8
41821: PUSH
41822: LD_VAR 0 1
41826: PPUSH
41827: CALL 41514 0 1
41831: ST_TO_ADDR
// if tmp then
41832: LD_VAR 0 8
41836: IFFALSE 41879
// begin for i in tmp do
41838: LD_ADDR_VAR 0 7
41842: PUSH
41843: LD_VAR 0 8
41847: PUSH
41848: FOR_IN
41849: IFFALSE 41877
// if i [ 1 ] = b_ext_radio then
41851: LD_VAR 0 7
41855: PUSH
41856: LD_INT 1
41858: ARRAY
41859: PUSH
41860: LD_INT 22
41862: EQUAL
41863: IFFALSE 41875
// begin control := control_remote ;
41865: LD_ADDR_VAR 0 4
41869: PUSH
41870: LD_INT 2
41872: ST_TO_ADDR
// break ;
41873: GO 41877
// end ;
41875: GO 41848
41877: POP
41878: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41879: LD_VAR 0 1
41883: PPUSH
41884: LD_VAR 0 2
41888: PPUSH
41889: LD_VAR 0 3
41893: PPUSH
41894: LD_VAR 0 4
41898: PPUSH
41899: LD_VAR 0 5
41903: PPUSH
41904: CALL_OW 448
41908: IFFALSE 41943
// begin result := [ chassis , engine , control , weapon ] ;
41910: LD_ADDR_VAR 0 6
41914: PUSH
41915: LD_VAR 0 2
41919: PUSH
41920: LD_VAR 0 3
41924: PUSH
41925: LD_VAR 0 4
41929: PUSH
41930: LD_VAR 0 5
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: ST_TO_ADDR
// exit ;
41941: GO 42355
// end ; _chassis := AvailableChassisList ( factory ) ;
41943: LD_ADDR_VAR 0 9
41947: PUSH
41948: LD_VAR 0 1
41952: PPUSH
41953: CALL_OW 475
41957: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41958: LD_ADDR_VAR 0 11
41962: PUSH
41963: LD_VAR 0 1
41967: PPUSH
41968: CALL_OW 476
41972: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41973: LD_ADDR_VAR 0 12
41977: PUSH
41978: LD_VAR 0 1
41982: PPUSH
41983: CALL_OW 477
41987: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41988: LD_ADDR_VAR 0 10
41992: PUSH
41993: LD_VAR 0 1
41997: PPUSH
41998: CALL_OW 478
42002: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42003: LD_VAR 0 9
42007: NOT
42008: PUSH
42009: LD_VAR 0 11
42013: NOT
42014: OR
42015: PUSH
42016: LD_VAR 0 12
42020: NOT
42021: OR
42022: PUSH
42023: LD_VAR 0 10
42027: NOT
42028: OR
42029: IFFALSE 42064
// begin result := [ chassis , engine , control , weapon ] ;
42031: LD_ADDR_VAR 0 6
42035: PUSH
42036: LD_VAR 0 2
42040: PUSH
42041: LD_VAR 0 3
42045: PUSH
42046: LD_VAR 0 4
42050: PUSH
42051: LD_VAR 0 5
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: ST_TO_ADDR
// exit ;
42062: GO 42355
// end ; if not chassis in _chassis then
42064: LD_VAR 0 2
42068: PUSH
42069: LD_VAR 0 9
42073: IN
42074: NOT
42075: IFFALSE 42101
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42077: LD_ADDR_VAR 0 2
42081: PUSH
42082: LD_VAR 0 9
42086: PUSH
42087: LD_INT 1
42089: PPUSH
42090: LD_VAR 0 9
42094: PPUSH
42095: CALL_OW 12
42099: ARRAY
42100: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42101: LD_VAR 0 2
42105: PPUSH
42106: LD_VAR 0 3
42110: PPUSH
42111: CALL 42360 0 2
42115: NOT
42116: IFFALSE 42175
// repeat engine := _engine [ 1 ] ;
42118: LD_ADDR_VAR 0 3
42122: PUSH
42123: LD_VAR 0 11
42127: PUSH
42128: LD_INT 1
42130: ARRAY
42131: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42132: LD_ADDR_VAR 0 11
42136: PUSH
42137: LD_VAR 0 11
42141: PPUSH
42142: LD_INT 1
42144: PPUSH
42145: CALL_OW 3
42149: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42150: LD_VAR 0 2
42154: PPUSH
42155: LD_VAR 0 3
42159: PPUSH
42160: CALL 42360 0 2
42164: PUSH
42165: LD_VAR 0 11
42169: PUSH
42170: EMPTY
42171: EQUAL
42172: OR
42173: IFFALSE 42118
// if not control in _control then
42175: LD_VAR 0 4
42179: PUSH
42180: LD_VAR 0 12
42184: IN
42185: NOT
42186: IFFALSE 42212
// control := _control [ rand ( 1 , _control ) ] ;
42188: LD_ADDR_VAR 0 4
42192: PUSH
42193: LD_VAR 0 12
42197: PUSH
42198: LD_INT 1
42200: PPUSH
42201: LD_VAR 0 12
42205: PPUSH
42206: CALL_OW 12
42210: ARRAY
42211: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42212: LD_VAR 0 2
42216: PPUSH
42217: LD_VAR 0 5
42221: PPUSH
42222: CALL 42580 0 2
42226: NOT
42227: IFFALSE 42286
// repeat weapon := _weapon [ 1 ] ;
42229: LD_ADDR_VAR 0 5
42233: PUSH
42234: LD_VAR 0 10
42238: PUSH
42239: LD_INT 1
42241: ARRAY
42242: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42243: LD_ADDR_VAR 0 10
42247: PUSH
42248: LD_VAR 0 10
42252: PPUSH
42253: LD_INT 1
42255: PPUSH
42256: CALL_OW 3
42260: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42261: LD_VAR 0 2
42265: PPUSH
42266: LD_VAR 0 5
42270: PPUSH
42271: CALL 42580 0 2
42275: PUSH
42276: LD_VAR 0 10
42280: PUSH
42281: EMPTY
42282: EQUAL
42283: OR
42284: IFFALSE 42229
// result := [ ] ;
42286: LD_ADDR_VAR 0 6
42290: PUSH
42291: EMPTY
42292: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42293: LD_VAR 0 1
42297: PPUSH
42298: LD_VAR 0 2
42302: PPUSH
42303: LD_VAR 0 3
42307: PPUSH
42308: LD_VAR 0 4
42312: PPUSH
42313: LD_VAR 0 5
42317: PPUSH
42318: CALL_OW 448
42322: IFFALSE 42355
// result := [ chassis , engine , control , weapon ] ;
42324: LD_ADDR_VAR 0 6
42328: PUSH
42329: LD_VAR 0 2
42333: PUSH
42334: LD_VAR 0 3
42338: PUSH
42339: LD_VAR 0 4
42343: PUSH
42344: LD_VAR 0 5
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: ST_TO_ADDR
// end ;
42355: LD_VAR 0 6
42359: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42360: LD_INT 0
42362: PPUSH
// if not chassis or not engine then
42363: LD_VAR 0 1
42367: NOT
42368: PUSH
42369: LD_VAR 0 2
42373: NOT
42374: OR
42375: IFFALSE 42379
// exit ;
42377: GO 42575
// case engine of engine_solar :
42379: LD_VAR 0 2
42383: PUSH
42384: LD_INT 2
42386: DOUBLE
42387: EQUAL
42388: IFTRUE 42392
42390: GO 42430
42392: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42393: LD_ADDR_VAR 0 3
42397: PUSH
42398: LD_INT 11
42400: PUSH
42401: LD_INT 12
42403: PUSH
42404: LD_INT 13
42406: PUSH
42407: LD_INT 14
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: LD_INT 3
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: ST_TO_ADDR
42428: GO 42559
42430: LD_INT 1
42432: DOUBLE
42433: EQUAL
42434: IFTRUE 42438
42436: GO 42500
42438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42439: LD_ADDR_VAR 0 3
42443: PUSH
42444: LD_INT 11
42446: PUSH
42447: LD_INT 12
42449: PUSH
42450: LD_INT 13
42452: PUSH
42453: LD_INT 14
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 2
42461: PUSH
42462: LD_INT 3
42464: PUSH
42465: LD_INT 4
42467: PUSH
42468: LD_INT 5
42470: PUSH
42471: LD_INT 21
42473: PUSH
42474: LD_INT 23
42476: PUSH
42477: LD_INT 22
42479: PUSH
42480: LD_INT 24
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: ST_TO_ADDR
42498: GO 42559
42500: LD_INT 3
42502: DOUBLE
42503: EQUAL
42504: IFTRUE 42508
42506: GO 42558
42508: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42509: LD_ADDR_VAR 0 3
42513: PUSH
42514: LD_INT 13
42516: PUSH
42517: LD_INT 14
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: LD_INT 3
42525: PUSH
42526: LD_INT 4
42528: PUSH
42529: LD_INT 5
42531: PUSH
42532: LD_INT 21
42534: PUSH
42535: LD_INT 22
42537: PUSH
42538: LD_INT 23
42540: PUSH
42541: LD_INT 24
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: ST_TO_ADDR
42556: GO 42559
42558: POP
// result := ( chassis in result ) ;
42559: LD_ADDR_VAR 0 3
42563: PUSH
42564: LD_VAR 0 1
42568: PUSH
42569: LD_VAR 0 3
42573: IN
42574: ST_TO_ADDR
// end ;
42575: LD_VAR 0 3
42579: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42580: LD_INT 0
42582: PPUSH
// if not chassis or not weapon then
42583: LD_VAR 0 1
42587: NOT
42588: PUSH
42589: LD_VAR 0 2
42593: NOT
42594: OR
42595: IFFALSE 42599
// exit ;
42597: GO 43661
// case weapon of us_machine_gun :
42599: LD_VAR 0 2
42603: PUSH
42604: LD_INT 2
42606: DOUBLE
42607: EQUAL
42608: IFTRUE 42612
42610: GO 42642
42612: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42613: LD_ADDR_VAR 0 3
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: LD_INT 3
42626: PUSH
42627: LD_INT 4
42629: PUSH
42630: LD_INT 5
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: ST_TO_ADDR
42640: GO 43645
42642: LD_INT 3
42644: DOUBLE
42645: EQUAL
42646: IFTRUE 42650
42648: GO 42680
42650: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42651: LD_ADDR_VAR 0 3
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: LD_INT 3
42664: PUSH
42665: LD_INT 4
42667: PUSH
42668: LD_INT 5
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: ST_TO_ADDR
42678: GO 43645
42680: LD_INT 11
42682: DOUBLE
42683: EQUAL
42684: IFTRUE 42688
42686: GO 42718
42688: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42689: LD_ADDR_VAR 0 3
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: LD_INT 3
42702: PUSH
42703: LD_INT 4
42705: PUSH
42706: LD_INT 5
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: ST_TO_ADDR
42716: GO 43645
42718: LD_INT 4
42720: DOUBLE
42721: EQUAL
42722: IFTRUE 42726
42724: GO 42752
42726: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42727: LD_ADDR_VAR 0 3
42731: PUSH
42732: LD_INT 2
42734: PUSH
42735: LD_INT 3
42737: PUSH
42738: LD_INT 4
42740: PUSH
42741: LD_INT 5
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: ST_TO_ADDR
42750: GO 43645
42752: LD_INT 5
42754: DOUBLE
42755: EQUAL
42756: IFTRUE 42760
42758: GO 42786
42760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42761: LD_ADDR_VAR 0 3
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: LD_INT 3
42771: PUSH
42772: LD_INT 4
42774: PUSH
42775: LD_INT 5
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: ST_TO_ADDR
42784: GO 43645
42786: LD_INT 9
42788: DOUBLE
42789: EQUAL
42790: IFTRUE 42794
42792: GO 42820
42794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42795: LD_ADDR_VAR 0 3
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: LD_INT 3
42805: PUSH
42806: LD_INT 4
42808: PUSH
42809: LD_INT 5
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: ST_TO_ADDR
42818: GO 43645
42820: LD_INT 7
42822: DOUBLE
42823: EQUAL
42824: IFTRUE 42828
42826: GO 42854
42828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42829: LD_ADDR_VAR 0 3
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: LD_INT 3
42839: PUSH
42840: LD_INT 4
42842: PUSH
42843: LD_INT 5
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: ST_TO_ADDR
42852: GO 43645
42854: LD_INT 12
42856: DOUBLE
42857: EQUAL
42858: IFTRUE 42862
42860: GO 42888
42862: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42863: LD_ADDR_VAR 0 3
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: LD_INT 3
42873: PUSH
42874: LD_INT 4
42876: PUSH
42877: LD_INT 5
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: ST_TO_ADDR
42886: GO 43645
42888: LD_INT 13
42890: DOUBLE
42891: EQUAL
42892: IFTRUE 42896
42894: GO 42922
42896: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42897: LD_ADDR_VAR 0 3
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: LD_INT 3
42907: PUSH
42908: LD_INT 4
42910: PUSH
42911: LD_INT 5
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: ST_TO_ADDR
42920: GO 43645
42922: LD_INT 14
42924: DOUBLE
42925: EQUAL
42926: IFTRUE 42930
42928: GO 42948
42930: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42931: LD_ADDR_VAR 0 3
42935: PUSH
42936: LD_INT 4
42938: PUSH
42939: LD_INT 5
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: ST_TO_ADDR
42946: GO 43645
42948: LD_INT 6
42950: DOUBLE
42951: EQUAL
42952: IFTRUE 42956
42954: GO 42974
42956: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: LD_INT 4
42964: PUSH
42965: LD_INT 5
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: ST_TO_ADDR
42972: GO 43645
42974: LD_INT 10
42976: DOUBLE
42977: EQUAL
42978: IFTRUE 42982
42980: GO 43000
42982: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42983: LD_ADDR_VAR 0 3
42987: PUSH
42988: LD_INT 4
42990: PUSH
42991: LD_INT 5
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: ST_TO_ADDR
42998: GO 43645
43000: LD_INT 22
43002: DOUBLE
43003: EQUAL
43004: IFTRUE 43008
43006: GO 43034
43008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43009: LD_ADDR_VAR 0 3
43013: PUSH
43014: LD_INT 11
43016: PUSH
43017: LD_INT 12
43019: PUSH
43020: LD_INT 13
43022: PUSH
43023: LD_INT 14
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: ST_TO_ADDR
43032: GO 43645
43034: LD_INT 23
43036: DOUBLE
43037: EQUAL
43038: IFTRUE 43042
43040: GO 43068
43042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43043: LD_ADDR_VAR 0 3
43047: PUSH
43048: LD_INT 11
43050: PUSH
43051: LD_INT 12
43053: PUSH
43054: LD_INT 13
43056: PUSH
43057: LD_INT 14
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: ST_TO_ADDR
43066: GO 43645
43068: LD_INT 24
43070: DOUBLE
43071: EQUAL
43072: IFTRUE 43076
43074: GO 43102
43076: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43077: LD_ADDR_VAR 0 3
43081: PUSH
43082: LD_INT 11
43084: PUSH
43085: LD_INT 12
43087: PUSH
43088: LD_INT 13
43090: PUSH
43091: LD_INT 14
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: ST_TO_ADDR
43100: GO 43645
43102: LD_INT 30
43104: DOUBLE
43105: EQUAL
43106: IFTRUE 43110
43108: GO 43136
43110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43111: LD_ADDR_VAR 0 3
43115: PUSH
43116: LD_INT 11
43118: PUSH
43119: LD_INT 12
43121: PUSH
43122: LD_INT 13
43124: PUSH
43125: LD_INT 14
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: ST_TO_ADDR
43134: GO 43645
43136: LD_INT 25
43138: DOUBLE
43139: EQUAL
43140: IFTRUE 43144
43142: GO 43162
43144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43145: LD_ADDR_VAR 0 3
43149: PUSH
43150: LD_INT 13
43152: PUSH
43153: LD_INT 14
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: ST_TO_ADDR
43160: GO 43645
43162: LD_INT 27
43164: DOUBLE
43165: EQUAL
43166: IFTRUE 43170
43168: GO 43188
43170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43171: LD_ADDR_VAR 0 3
43175: PUSH
43176: LD_INT 13
43178: PUSH
43179: LD_INT 14
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: ST_TO_ADDR
43186: GO 43645
43188: LD_EXP 54
43192: DOUBLE
43193: EQUAL
43194: IFTRUE 43198
43196: GO 43224
43198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43199: LD_ADDR_VAR 0 3
43203: PUSH
43204: LD_INT 11
43206: PUSH
43207: LD_INT 12
43209: PUSH
43210: LD_INT 13
43212: PUSH
43213: LD_INT 14
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: ST_TO_ADDR
43222: GO 43645
43224: LD_INT 28
43226: DOUBLE
43227: EQUAL
43228: IFTRUE 43232
43230: GO 43250
43232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43233: LD_ADDR_VAR 0 3
43237: PUSH
43238: LD_INT 13
43240: PUSH
43241: LD_INT 14
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: ST_TO_ADDR
43248: GO 43645
43250: LD_INT 29
43252: DOUBLE
43253: EQUAL
43254: IFTRUE 43258
43256: GO 43276
43258: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43259: LD_ADDR_VAR 0 3
43263: PUSH
43264: LD_INT 13
43266: PUSH
43267: LD_INT 14
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: ST_TO_ADDR
43274: GO 43645
43276: LD_INT 31
43278: DOUBLE
43279: EQUAL
43280: IFTRUE 43284
43282: GO 43302
43284: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43285: LD_ADDR_VAR 0 3
43289: PUSH
43290: LD_INT 13
43292: PUSH
43293: LD_INT 14
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: ST_TO_ADDR
43300: GO 43645
43302: LD_INT 26
43304: DOUBLE
43305: EQUAL
43306: IFTRUE 43310
43308: GO 43328
43310: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43311: LD_ADDR_VAR 0 3
43315: PUSH
43316: LD_INT 13
43318: PUSH
43319: LD_INT 14
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: ST_TO_ADDR
43326: GO 43645
43328: LD_INT 42
43330: DOUBLE
43331: EQUAL
43332: IFTRUE 43336
43334: GO 43362
43336: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43337: LD_ADDR_VAR 0 3
43341: PUSH
43342: LD_INT 21
43344: PUSH
43345: LD_INT 22
43347: PUSH
43348: LD_INT 23
43350: PUSH
43351: LD_INT 24
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: ST_TO_ADDR
43360: GO 43645
43362: LD_INT 43
43364: DOUBLE
43365: EQUAL
43366: IFTRUE 43370
43368: GO 43396
43370: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43371: LD_ADDR_VAR 0 3
43375: PUSH
43376: LD_INT 21
43378: PUSH
43379: LD_INT 22
43381: PUSH
43382: LD_INT 23
43384: PUSH
43385: LD_INT 24
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: ST_TO_ADDR
43394: GO 43645
43396: LD_INT 44
43398: DOUBLE
43399: EQUAL
43400: IFTRUE 43404
43402: GO 43430
43404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43405: LD_ADDR_VAR 0 3
43409: PUSH
43410: LD_INT 21
43412: PUSH
43413: LD_INT 22
43415: PUSH
43416: LD_INT 23
43418: PUSH
43419: LD_INT 24
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: ST_TO_ADDR
43428: GO 43645
43430: LD_INT 45
43432: DOUBLE
43433: EQUAL
43434: IFTRUE 43438
43436: GO 43464
43438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43439: LD_ADDR_VAR 0 3
43443: PUSH
43444: LD_INT 21
43446: PUSH
43447: LD_INT 22
43449: PUSH
43450: LD_INT 23
43452: PUSH
43453: LD_INT 24
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: ST_TO_ADDR
43462: GO 43645
43464: LD_INT 49
43466: DOUBLE
43467: EQUAL
43468: IFTRUE 43472
43470: GO 43498
43472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43473: LD_ADDR_VAR 0 3
43477: PUSH
43478: LD_INT 21
43480: PUSH
43481: LD_INT 22
43483: PUSH
43484: LD_INT 23
43486: PUSH
43487: LD_INT 24
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: ST_TO_ADDR
43496: GO 43645
43498: LD_INT 51
43500: DOUBLE
43501: EQUAL
43502: IFTRUE 43506
43504: GO 43532
43506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43507: LD_ADDR_VAR 0 3
43511: PUSH
43512: LD_INT 21
43514: PUSH
43515: LD_INT 22
43517: PUSH
43518: LD_INT 23
43520: PUSH
43521: LD_INT 24
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: ST_TO_ADDR
43530: GO 43645
43532: LD_INT 52
43534: DOUBLE
43535: EQUAL
43536: IFTRUE 43540
43538: GO 43566
43540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43541: LD_ADDR_VAR 0 3
43545: PUSH
43546: LD_INT 21
43548: PUSH
43549: LD_INT 22
43551: PUSH
43552: LD_INT 23
43554: PUSH
43555: LD_INT 24
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: ST_TO_ADDR
43564: GO 43645
43566: LD_INT 53
43568: DOUBLE
43569: EQUAL
43570: IFTRUE 43574
43572: GO 43592
43574: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43575: LD_ADDR_VAR 0 3
43579: PUSH
43580: LD_INT 23
43582: PUSH
43583: LD_INT 24
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: ST_TO_ADDR
43590: GO 43645
43592: LD_INT 46
43594: DOUBLE
43595: EQUAL
43596: IFTRUE 43600
43598: GO 43618
43600: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43601: LD_ADDR_VAR 0 3
43605: PUSH
43606: LD_INT 23
43608: PUSH
43609: LD_INT 24
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: ST_TO_ADDR
43616: GO 43645
43618: LD_INT 47
43620: DOUBLE
43621: EQUAL
43622: IFTRUE 43626
43624: GO 43644
43626: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43627: LD_ADDR_VAR 0 3
43631: PUSH
43632: LD_INT 23
43634: PUSH
43635: LD_INT 24
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: ST_TO_ADDR
43642: GO 43645
43644: POP
// result := ( chassis in result ) ;
43645: LD_ADDR_VAR 0 3
43649: PUSH
43650: LD_VAR 0 1
43654: PUSH
43655: LD_VAR 0 3
43659: IN
43660: ST_TO_ADDR
// end ;
43661: LD_VAR 0 3
43665: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43666: LD_INT 0
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
43673: PPUSH
43674: PPUSH
// result := array ;
43675: LD_ADDR_VAR 0 5
43679: PUSH
43680: LD_VAR 0 1
43684: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43685: LD_VAR 0 1
43689: NOT
43690: PUSH
43691: LD_VAR 0 2
43695: NOT
43696: OR
43697: PUSH
43698: LD_VAR 0 3
43702: NOT
43703: OR
43704: PUSH
43705: LD_VAR 0 2
43709: PUSH
43710: LD_VAR 0 1
43714: GREATER
43715: OR
43716: PUSH
43717: LD_VAR 0 3
43721: PUSH
43722: LD_VAR 0 1
43726: GREATER
43727: OR
43728: IFFALSE 43732
// exit ;
43730: GO 44028
// if direction then
43732: LD_VAR 0 4
43736: IFFALSE 43800
// begin d := 1 ;
43738: LD_ADDR_VAR 0 9
43742: PUSH
43743: LD_INT 1
43745: ST_TO_ADDR
// if i_from > i_to then
43746: LD_VAR 0 2
43750: PUSH
43751: LD_VAR 0 3
43755: GREATER
43756: IFFALSE 43782
// length := ( array - i_from ) + i_to else
43758: LD_ADDR_VAR 0 11
43762: PUSH
43763: LD_VAR 0 1
43767: PUSH
43768: LD_VAR 0 2
43772: MINUS
43773: PUSH
43774: LD_VAR 0 3
43778: PLUS
43779: ST_TO_ADDR
43780: GO 43798
// length := i_to - i_from ;
43782: LD_ADDR_VAR 0 11
43786: PUSH
43787: LD_VAR 0 3
43791: PUSH
43792: LD_VAR 0 2
43796: MINUS
43797: ST_TO_ADDR
// end else
43798: GO 43861
// begin d := - 1 ;
43800: LD_ADDR_VAR 0 9
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: ST_TO_ADDR
// if i_from > i_to then
43809: LD_VAR 0 2
43813: PUSH
43814: LD_VAR 0 3
43818: GREATER
43819: IFFALSE 43839
// length := i_from - i_to else
43821: LD_ADDR_VAR 0 11
43825: PUSH
43826: LD_VAR 0 2
43830: PUSH
43831: LD_VAR 0 3
43835: MINUS
43836: ST_TO_ADDR
43837: GO 43861
// length := ( array - i_to ) + i_from ;
43839: LD_ADDR_VAR 0 11
43843: PUSH
43844: LD_VAR 0 1
43848: PUSH
43849: LD_VAR 0 3
43853: MINUS
43854: PUSH
43855: LD_VAR 0 2
43859: PLUS
43860: ST_TO_ADDR
// end ; if not length then
43861: LD_VAR 0 11
43865: NOT
43866: IFFALSE 43870
// exit ;
43868: GO 44028
// tmp := array ;
43870: LD_ADDR_VAR 0 10
43874: PUSH
43875: LD_VAR 0 1
43879: ST_TO_ADDR
// for i = 1 to length do
43880: LD_ADDR_VAR 0 6
43884: PUSH
43885: DOUBLE
43886: LD_INT 1
43888: DEC
43889: ST_TO_ADDR
43890: LD_VAR 0 11
43894: PUSH
43895: FOR_TO
43896: IFFALSE 44016
// begin for j = 1 to array do
43898: LD_ADDR_VAR 0 7
43902: PUSH
43903: DOUBLE
43904: LD_INT 1
43906: DEC
43907: ST_TO_ADDR
43908: LD_VAR 0 1
43912: PUSH
43913: FOR_TO
43914: IFFALSE 44002
// begin k := j + d ;
43916: LD_ADDR_VAR 0 8
43920: PUSH
43921: LD_VAR 0 7
43925: PUSH
43926: LD_VAR 0 9
43930: PLUS
43931: ST_TO_ADDR
// if k > array then
43932: LD_VAR 0 8
43936: PUSH
43937: LD_VAR 0 1
43941: GREATER
43942: IFFALSE 43952
// k := 1 ;
43944: LD_ADDR_VAR 0 8
43948: PUSH
43949: LD_INT 1
43951: ST_TO_ADDR
// if not k then
43952: LD_VAR 0 8
43956: NOT
43957: IFFALSE 43969
// k := array ;
43959: LD_ADDR_VAR 0 8
43963: PUSH
43964: LD_VAR 0 1
43968: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43969: LD_ADDR_VAR 0 10
43973: PUSH
43974: LD_VAR 0 10
43978: PPUSH
43979: LD_VAR 0 8
43983: PPUSH
43984: LD_VAR 0 1
43988: PUSH
43989: LD_VAR 0 7
43993: ARRAY
43994: PPUSH
43995: CALL_OW 1
43999: ST_TO_ADDR
// end ;
44000: GO 43913
44002: POP
44003: POP
// array := tmp ;
44004: LD_ADDR_VAR 0 1
44008: PUSH
44009: LD_VAR 0 10
44013: ST_TO_ADDR
// end ;
44014: GO 43895
44016: POP
44017: POP
// result := array ;
44018: LD_ADDR_VAR 0 5
44022: PUSH
44023: LD_VAR 0 1
44027: ST_TO_ADDR
// end ;
44028: LD_VAR 0 5
44032: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44033: LD_INT 0
44035: PPUSH
44036: PPUSH
// result := 0 ;
44037: LD_ADDR_VAR 0 3
44041: PUSH
44042: LD_INT 0
44044: ST_TO_ADDR
// if not array or not value in array then
44045: LD_VAR 0 1
44049: NOT
44050: PUSH
44051: LD_VAR 0 2
44055: PUSH
44056: LD_VAR 0 1
44060: IN
44061: NOT
44062: OR
44063: IFFALSE 44067
// exit ;
44065: GO 44121
// for i = 1 to array do
44067: LD_ADDR_VAR 0 4
44071: PUSH
44072: DOUBLE
44073: LD_INT 1
44075: DEC
44076: ST_TO_ADDR
44077: LD_VAR 0 1
44081: PUSH
44082: FOR_TO
44083: IFFALSE 44119
// if value = array [ i ] then
44085: LD_VAR 0 2
44089: PUSH
44090: LD_VAR 0 1
44094: PUSH
44095: LD_VAR 0 4
44099: ARRAY
44100: EQUAL
44101: IFFALSE 44117
// begin result := i ;
44103: LD_ADDR_VAR 0 3
44107: PUSH
44108: LD_VAR 0 4
44112: ST_TO_ADDR
// exit ;
44113: POP
44114: POP
44115: GO 44121
// end ;
44117: GO 44082
44119: POP
44120: POP
// end ;
44121: LD_VAR 0 3
44125: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44126: LD_INT 0
44128: PPUSH
// vc_chassis := chassis ;
44129: LD_ADDR_OWVAR 37
44133: PUSH
44134: LD_VAR 0 1
44138: ST_TO_ADDR
// vc_engine := engine ;
44139: LD_ADDR_OWVAR 39
44143: PUSH
44144: LD_VAR 0 2
44148: ST_TO_ADDR
// vc_control := control ;
44149: LD_ADDR_OWVAR 38
44153: PUSH
44154: LD_VAR 0 3
44158: ST_TO_ADDR
// vc_weapon := weapon ;
44159: LD_ADDR_OWVAR 40
44163: PUSH
44164: LD_VAR 0 4
44168: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44169: LD_ADDR_OWVAR 41
44173: PUSH
44174: LD_VAR 0 5
44178: ST_TO_ADDR
// end ;
44179: LD_VAR 0 6
44183: RET
// export function WantPlant ( unit ) ; var task ; begin
44184: LD_INT 0
44186: PPUSH
44187: PPUSH
// result := false ;
44188: LD_ADDR_VAR 0 2
44192: PUSH
44193: LD_INT 0
44195: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44196: LD_ADDR_VAR 0 3
44200: PUSH
44201: LD_VAR 0 1
44205: PPUSH
44206: CALL_OW 437
44210: ST_TO_ADDR
// if task then
44211: LD_VAR 0 3
44215: IFFALSE 44243
// if task [ 1 ] [ 1 ] = p then
44217: LD_VAR 0 3
44221: PUSH
44222: LD_INT 1
44224: ARRAY
44225: PUSH
44226: LD_INT 1
44228: ARRAY
44229: PUSH
44230: LD_STRING p
44232: EQUAL
44233: IFFALSE 44243
// result := true ;
44235: LD_ADDR_VAR 0 2
44239: PUSH
44240: LD_INT 1
44242: ST_TO_ADDR
// end ;
44243: LD_VAR 0 2
44247: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44248: LD_INT 0
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
// if pos < 1 then
44254: LD_VAR 0 2
44258: PUSH
44259: LD_INT 1
44261: LESS
44262: IFFALSE 44266
// exit ;
44264: GO 44569
// if pos = 1 then
44266: LD_VAR 0 2
44270: PUSH
44271: LD_INT 1
44273: EQUAL
44274: IFFALSE 44307
// result := Replace ( arr , pos [ 1 ] , value ) else
44276: LD_ADDR_VAR 0 4
44280: PUSH
44281: LD_VAR 0 1
44285: PPUSH
44286: LD_VAR 0 2
44290: PUSH
44291: LD_INT 1
44293: ARRAY
44294: PPUSH
44295: LD_VAR 0 3
44299: PPUSH
44300: CALL_OW 1
44304: ST_TO_ADDR
44305: GO 44569
// begin tmp := arr ;
44307: LD_ADDR_VAR 0 6
44311: PUSH
44312: LD_VAR 0 1
44316: ST_TO_ADDR
// s_arr := [ tmp ] ;
44317: LD_ADDR_VAR 0 7
44321: PUSH
44322: LD_VAR 0 6
44326: PUSH
44327: EMPTY
44328: LIST
44329: ST_TO_ADDR
// for i = 1 to pos - 1 do
44330: LD_ADDR_VAR 0 5
44334: PUSH
44335: DOUBLE
44336: LD_INT 1
44338: DEC
44339: ST_TO_ADDR
44340: LD_VAR 0 2
44344: PUSH
44345: LD_INT 1
44347: MINUS
44348: PUSH
44349: FOR_TO
44350: IFFALSE 44395
// begin tmp := tmp [ pos [ i ] ] ;
44352: LD_ADDR_VAR 0 6
44356: PUSH
44357: LD_VAR 0 6
44361: PUSH
44362: LD_VAR 0 2
44366: PUSH
44367: LD_VAR 0 5
44371: ARRAY
44372: ARRAY
44373: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44374: LD_ADDR_VAR 0 7
44378: PUSH
44379: LD_VAR 0 7
44383: PUSH
44384: LD_VAR 0 6
44388: PUSH
44389: EMPTY
44390: LIST
44391: ADD
44392: ST_TO_ADDR
// end ;
44393: GO 44349
44395: POP
44396: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44397: LD_ADDR_VAR 0 6
44401: PUSH
44402: LD_VAR 0 6
44406: PPUSH
44407: LD_VAR 0 2
44411: PUSH
44412: LD_VAR 0 2
44416: ARRAY
44417: PPUSH
44418: LD_VAR 0 3
44422: PPUSH
44423: CALL_OW 1
44427: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44428: LD_ADDR_VAR 0 7
44432: PUSH
44433: LD_VAR 0 7
44437: PPUSH
44438: LD_VAR 0 7
44442: PPUSH
44443: LD_VAR 0 6
44447: PPUSH
44448: CALL_OW 1
44452: ST_TO_ADDR
// for i = s_arr downto 2 do
44453: LD_ADDR_VAR 0 5
44457: PUSH
44458: DOUBLE
44459: LD_VAR 0 7
44463: INC
44464: ST_TO_ADDR
44465: LD_INT 2
44467: PUSH
44468: FOR_DOWNTO
44469: IFFALSE 44553
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44471: LD_ADDR_VAR 0 6
44475: PUSH
44476: LD_VAR 0 7
44480: PUSH
44481: LD_VAR 0 5
44485: PUSH
44486: LD_INT 1
44488: MINUS
44489: ARRAY
44490: PPUSH
44491: LD_VAR 0 2
44495: PUSH
44496: LD_VAR 0 5
44500: PUSH
44501: LD_INT 1
44503: MINUS
44504: ARRAY
44505: PPUSH
44506: LD_VAR 0 7
44510: PUSH
44511: LD_VAR 0 5
44515: ARRAY
44516: PPUSH
44517: CALL_OW 1
44521: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44522: LD_ADDR_VAR 0 7
44526: PUSH
44527: LD_VAR 0 7
44531: PPUSH
44532: LD_VAR 0 5
44536: PUSH
44537: LD_INT 1
44539: MINUS
44540: PPUSH
44541: LD_VAR 0 6
44545: PPUSH
44546: CALL_OW 1
44550: ST_TO_ADDR
// end ;
44551: GO 44468
44553: POP
44554: POP
// result := s_arr [ 1 ] ;
44555: LD_ADDR_VAR 0 4
44559: PUSH
44560: LD_VAR 0 7
44564: PUSH
44565: LD_INT 1
44567: ARRAY
44568: ST_TO_ADDR
// end ; end ;
44569: LD_VAR 0 4
44573: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44574: LD_INT 0
44576: PPUSH
44577: PPUSH
// if not list then
44578: LD_VAR 0 1
44582: NOT
44583: IFFALSE 44587
// exit ;
44585: GO 44678
// i := list [ pos1 ] ;
44587: LD_ADDR_VAR 0 5
44591: PUSH
44592: LD_VAR 0 1
44596: PUSH
44597: LD_VAR 0 2
44601: ARRAY
44602: ST_TO_ADDR
// if not i then
44603: LD_VAR 0 5
44607: NOT
44608: IFFALSE 44612
// exit ;
44610: GO 44678
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44612: LD_ADDR_VAR 0 1
44616: PUSH
44617: LD_VAR 0 1
44621: PPUSH
44622: LD_VAR 0 2
44626: PPUSH
44627: LD_VAR 0 1
44631: PUSH
44632: LD_VAR 0 3
44636: ARRAY
44637: PPUSH
44638: CALL_OW 1
44642: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44643: LD_ADDR_VAR 0 1
44647: PUSH
44648: LD_VAR 0 1
44652: PPUSH
44653: LD_VAR 0 3
44657: PPUSH
44658: LD_VAR 0 5
44662: PPUSH
44663: CALL_OW 1
44667: ST_TO_ADDR
// result := list ;
44668: LD_ADDR_VAR 0 4
44672: PUSH
44673: LD_VAR 0 1
44677: ST_TO_ADDR
// end ;
44678: LD_VAR 0 4
44682: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44683: LD_INT 0
44685: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44686: LD_ADDR_VAR 0 5
44690: PUSH
44691: LD_VAR 0 1
44695: PPUSH
44696: CALL_OW 250
44700: PPUSH
44701: LD_VAR 0 1
44705: PPUSH
44706: CALL_OW 251
44710: PPUSH
44711: LD_VAR 0 2
44715: PPUSH
44716: LD_VAR 0 3
44720: PPUSH
44721: LD_VAR 0 4
44725: PPUSH
44726: CALL 44736 0 5
44730: ST_TO_ADDR
// end ;
44731: LD_VAR 0 5
44735: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44736: LD_INT 0
44738: PPUSH
44739: PPUSH
44740: PPUSH
44741: PPUSH
// if not list then
44742: LD_VAR 0 3
44746: NOT
44747: IFFALSE 44751
// exit ;
44749: GO 45139
// result := [ ] ;
44751: LD_ADDR_VAR 0 6
44755: PUSH
44756: EMPTY
44757: ST_TO_ADDR
// for i in list do
44758: LD_ADDR_VAR 0 7
44762: PUSH
44763: LD_VAR 0 3
44767: PUSH
44768: FOR_IN
44769: IFFALSE 44971
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44771: LD_ADDR_VAR 0 9
44775: PUSH
44776: LD_VAR 0 7
44780: PPUSH
44781: LD_VAR 0 1
44785: PPUSH
44786: LD_VAR 0 2
44790: PPUSH
44791: CALL_OW 297
44795: ST_TO_ADDR
// if not result then
44796: LD_VAR 0 6
44800: NOT
44801: IFFALSE 44827
// result := [ [ i , tmp ] ] else
44803: LD_ADDR_VAR 0 6
44807: PUSH
44808: LD_VAR 0 7
44812: PUSH
44813: LD_VAR 0 9
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: ST_TO_ADDR
44825: GO 44969
// begin if result [ result ] [ 2 ] < tmp then
44827: LD_VAR 0 6
44831: PUSH
44832: LD_VAR 0 6
44836: ARRAY
44837: PUSH
44838: LD_INT 2
44840: ARRAY
44841: PUSH
44842: LD_VAR 0 9
44846: LESS
44847: IFFALSE 44889
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44849: LD_ADDR_VAR 0 6
44853: PUSH
44854: LD_VAR 0 6
44858: PPUSH
44859: LD_VAR 0 6
44863: PUSH
44864: LD_INT 1
44866: PLUS
44867: PPUSH
44868: LD_VAR 0 7
44872: PUSH
44873: LD_VAR 0 9
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PPUSH
44882: CALL_OW 2
44886: ST_TO_ADDR
44887: GO 44969
// for j = 1 to result do
44889: LD_ADDR_VAR 0 8
44893: PUSH
44894: DOUBLE
44895: LD_INT 1
44897: DEC
44898: ST_TO_ADDR
44899: LD_VAR 0 6
44903: PUSH
44904: FOR_TO
44905: IFFALSE 44967
// begin if tmp < result [ j ] [ 2 ] then
44907: LD_VAR 0 9
44911: PUSH
44912: LD_VAR 0 6
44916: PUSH
44917: LD_VAR 0 8
44921: ARRAY
44922: PUSH
44923: LD_INT 2
44925: ARRAY
44926: LESS
44927: IFFALSE 44965
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44929: LD_ADDR_VAR 0 6
44933: PUSH
44934: LD_VAR 0 6
44938: PPUSH
44939: LD_VAR 0 8
44943: PPUSH
44944: LD_VAR 0 7
44948: PUSH
44949: LD_VAR 0 9
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PPUSH
44958: CALL_OW 2
44962: ST_TO_ADDR
// break ;
44963: GO 44967
// end ; end ;
44965: GO 44904
44967: POP
44968: POP
// end ; end ;
44969: GO 44768
44971: POP
44972: POP
// if result and not asc then
44973: LD_VAR 0 6
44977: PUSH
44978: LD_VAR 0 4
44982: NOT
44983: AND
44984: IFFALSE 45059
// begin tmp := result ;
44986: LD_ADDR_VAR 0 9
44990: PUSH
44991: LD_VAR 0 6
44995: ST_TO_ADDR
// for i = tmp downto 1 do
44996: LD_ADDR_VAR 0 7
45000: PUSH
45001: DOUBLE
45002: LD_VAR 0 9
45006: INC
45007: ST_TO_ADDR
45008: LD_INT 1
45010: PUSH
45011: FOR_DOWNTO
45012: IFFALSE 45057
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45014: LD_ADDR_VAR 0 6
45018: PUSH
45019: LD_VAR 0 6
45023: PPUSH
45024: LD_VAR 0 9
45028: PUSH
45029: LD_VAR 0 7
45033: MINUS
45034: PUSH
45035: LD_INT 1
45037: PLUS
45038: PPUSH
45039: LD_VAR 0 9
45043: PUSH
45044: LD_VAR 0 7
45048: ARRAY
45049: PPUSH
45050: CALL_OW 1
45054: ST_TO_ADDR
45055: GO 45011
45057: POP
45058: POP
// end ; tmp := [ ] ;
45059: LD_ADDR_VAR 0 9
45063: PUSH
45064: EMPTY
45065: ST_TO_ADDR
// if mode then
45066: LD_VAR 0 5
45070: IFFALSE 45139
// begin for i = 1 to result do
45072: LD_ADDR_VAR 0 7
45076: PUSH
45077: DOUBLE
45078: LD_INT 1
45080: DEC
45081: ST_TO_ADDR
45082: LD_VAR 0 6
45086: PUSH
45087: FOR_TO
45088: IFFALSE 45127
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45090: LD_ADDR_VAR 0 9
45094: PUSH
45095: LD_VAR 0 9
45099: PPUSH
45100: LD_VAR 0 7
45104: PPUSH
45105: LD_VAR 0 6
45109: PUSH
45110: LD_VAR 0 7
45114: ARRAY
45115: PUSH
45116: LD_INT 1
45118: ARRAY
45119: PPUSH
45120: CALL_OW 1
45124: ST_TO_ADDR
45125: GO 45087
45127: POP
45128: POP
// result := tmp ;
45129: LD_ADDR_VAR 0 6
45133: PUSH
45134: LD_VAR 0 9
45138: ST_TO_ADDR
// end ; end ;
45139: LD_VAR 0 6
45143: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45144: LD_INT 0
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45152: LD_ADDR_VAR 0 5
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: ST_TO_ADDR
// if not x or not y then
45174: LD_VAR 0 2
45178: NOT
45179: PUSH
45180: LD_VAR 0 3
45184: NOT
45185: OR
45186: IFFALSE 45190
// exit ;
45188: GO 46842
// if not range then
45190: LD_VAR 0 4
45194: NOT
45195: IFFALSE 45205
// range := 10 ;
45197: LD_ADDR_VAR 0 4
45201: PUSH
45202: LD_INT 10
45204: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45205: LD_ADDR_VAR 0 8
45209: PUSH
45210: LD_INT 81
45212: PUSH
45213: LD_VAR 0 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 92
45224: PUSH
45225: LD_VAR 0 2
45229: PUSH
45230: LD_VAR 0 3
45234: PUSH
45235: LD_VAR 0 4
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 3
45248: PUSH
45249: LD_INT 21
45251: PUSH
45252: LD_INT 3
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: LIST
45267: PPUSH
45268: CALL_OW 69
45272: ST_TO_ADDR
// if not tmp then
45273: LD_VAR 0 8
45277: NOT
45278: IFFALSE 45282
// exit ;
45280: GO 46842
// for i in tmp do
45282: LD_ADDR_VAR 0 6
45286: PUSH
45287: LD_VAR 0 8
45291: PUSH
45292: FOR_IN
45293: IFFALSE 46817
// begin points := [ 0 , 0 , 0 ] ;
45295: LD_ADDR_VAR 0 9
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: ST_TO_ADDR
// bpoints := 1 ;
45314: LD_ADDR_VAR 0 10
45318: PUSH
45319: LD_INT 1
45321: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45322: LD_VAR 0 6
45326: PPUSH
45327: CALL_OW 247
45331: PUSH
45332: LD_INT 1
45334: DOUBLE
45335: EQUAL
45336: IFTRUE 45340
45338: GO 45918
45340: POP
// begin if GetClass ( i ) = 1 then
45341: LD_VAR 0 6
45345: PPUSH
45346: CALL_OW 257
45350: PUSH
45351: LD_INT 1
45353: EQUAL
45354: IFFALSE 45375
// points := [ 10 , 5 , 3 ] ;
45356: LD_ADDR_VAR 0 9
45360: PUSH
45361: LD_INT 10
45363: PUSH
45364: LD_INT 5
45366: PUSH
45367: LD_INT 3
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: LIST
45374: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45375: LD_VAR 0 6
45379: PPUSH
45380: CALL_OW 257
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: LD_INT 3
45390: PUSH
45391: LD_INT 4
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: LIST
45398: IN
45399: IFFALSE 45420
// points := [ 3 , 2 , 1 ] ;
45401: LD_ADDR_VAR 0 9
45405: PUSH
45406: LD_INT 3
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: LIST
45419: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45420: LD_VAR 0 6
45424: PPUSH
45425: CALL_OW 257
45429: PUSH
45430: LD_INT 5
45432: EQUAL
45433: IFFALSE 45454
// points := [ 130 , 5 , 2 ] ;
45435: LD_ADDR_VAR 0 9
45439: PUSH
45440: LD_INT 130
45442: PUSH
45443: LD_INT 5
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45454: LD_VAR 0 6
45458: PPUSH
45459: CALL_OW 257
45463: PUSH
45464: LD_INT 8
45466: EQUAL
45467: IFFALSE 45488
// points := [ 35 , 35 , 30 ] ;
45469: LD_ADDR_VAR 0 9
45473: PUSH
45474: LD_INT 35
45476: PUSH
45477: LD_INT 35
45479: PUSH
45480: LD_INT 30
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: LIST
45487: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45488: LD_VAR 0 6
45492: PPUSH
45493: CALL_OW 257
45497: PUSH
45498: LD_INT 9
45500: EQUAL
45501: IFFALSE 45522
// points := [ 20 , 55 , 40 ] ;
45503: LD_ADDR_VAR 0 9
45507: PUSH
45508: LD_INT 20
45510: PUSH
45511: LD_INT 55
45513: PUSH
45514: LD_INT 40
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45522: LD_VAR 0 6
45526: PPUSH
45527: CALL_OW 257
45531: PUSH
45532: LD_INT 12
45534: PUSH
45535: LD_INT 16
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: IN
45542: IFFALSE 45563
// points := [ 5 , 3 , 2 ] ;
45544: LD_ADDR_VAR 0 9
45548: PUSH
45549: LD_INT 5
45551: PUSH
45552: LD_INT 3
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45563: LD_VAR 0 6
45567: PPUSH
45568: CALL_OW 257
45572: PUSH
45573: LD_INT 17
45575: EQUAL
45576: IFFALSE 45597
// points := [ 100 , 50 , 75 ] ;
45578: LD_ADDR_VAR 0 9
45582: PUSH
45583: LD_INT 100
45585: PUSH
45586: LD_INT 50
45588: PUSH
45589: LD_INT 75
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45597: LD_VAR 0 6
45601: PPUSH
45602: CALL_OW 257
45606: PUSH
45607: LD_INT 15
45609: EQUAL
45610: IFFALSE 45631
// points := [ 10 , 5 , 3 ] ;
45612: LD_ADDR_VAR 0 9
45616: PUSH
45617: LD_INT 10
45619: PUSH
45620: LD_INT 5
45622: PUSH
45623: LD_INT 3
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: LIST
45630: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45631: LD_VAR 0 6
45635: PPUSH
45636: CALL_OW 257
45640: PUSH
45641: LD_INT 14
45643: EQUAL
45644: IFFALSE 45665
// points := [ 10 , 0 , 0 ] ;
45646: LD_ADDR_VAR 0 9
45650: PUSH
45651: LD_INT 10
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45665: LD_VAR 0 6
45669: PPUSH
45670: CALL_OW 257
45674: PUSH
45675: LD_INT 11
45677: EQUAL
45678: IFFALSE 45699
// points := [ 30 , 10 , 5 ] ;
45680: LD_ADDR_VAR 0 9
45684: PUSH
45685: LD_INT 30
45687: PUSH
45688: LD_INT 10
45690: PUSH
45691: LD_INT 5
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45699: LD_VAR 0 1
45703: PPUSH
45704: LD_INT 5
45706: PPUSH
45707: CALL_OW 321
45711: PUSH
45712: LD_INT 2
45714: EQUAL
45715: IFFALSE 45732
// bpoints := bpoints * 1.8 ;
45717: LD_ADDR_VAR 0 10
45721: PUSH
45722: LD_VAR 0 10
45726: PUSH
45727: LD_REAL  1.80000000000000E+0000
45730: MUL
45731: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45732: LD_VAR 0 6
45736: PPUSH
45737: CALL_OW 257
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: LD_INT 4
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: IN
45760: PUSH
45761: LD_VAR 0 1
45765: PPUSH
45766: LD_INT 51
45768: PPUSH
45769: CALL_OW 321
45773: PUSH
45774: LD_INT 2
45776: EQUAL
45777: AND
45778: IFFALSE 45795
// bpoints := bpoints * 1.2 ;
45780: LD_ADDR_VAR 0 10
45784: PUSH
45785: LD_VAR 0 10
45789: PUSH
45790: LD_REAL  1.20000000000000E+0000
45793: MUL
45794: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45795: LD_VAR 0 6
45799: PPUSH
45800: CALL_OW 257
45804: PUSH
45805: LD_INT 5
45807: PUSH
45808: LD_INT 7
45810: PUSH
45811: LD_INT 9
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: IN
45819: PUSH
45820: LD_VAR 0 1
45824: PPUSH
45825: LD_INT 52
45827: PPUSH
45828: CALL_OW 321
45832: PUSH
45833: LD_INT 2
45835: EQUAL
45836: AND
45837: IFFALSE 45854
// bpoints := bpoints * 1.5 ;
45839: LD_ADDR_VAR 0 10
45843: PUSH
45844: LD_VAR 0 10
45848: PUSH
45849: LD_REAL  1.50000000000000E+0000
45852: MUL
45853: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45854: LD_VAR 0 1
45858: PPUSH
45859: LD_INT 66
45861: PPUSH
45862: CALL_OW 321
45866: PUSH
45867: LD_INT 2
45869: EQUAL
45870: IFFALSE 45887
// bpoints := bpoints * 1.1 ;
45872: LD_ADDR_VAR 0 10
45876: PUSH
45877: LD_VAR 0 10
45881: PUSH
45882: LD_REAL  1.10000000000000E+0000
45885: MUL
45886: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45887: LD_ADDR_VAR 0 10
45891: PUSH
45892: LD_VAR 0 10
45896: PUSH
45897: LD_VAR 0 6
45901: PPUSH
45902: LD_INT 1
45904: PPUSH
45905: CALL_OW 259
45909: PUSH
45910: LD_REAL  1.15000000000000E+0000
45913: MUL
45914: MUL
45915: ST_TO_ADDR
// end ; unit_vehicle :
45916: GO 46746
45918: LD_INT 2
45920: DOUBLE
45921: EQUAL
45922: IFTRUE 45926
45924: GO 46734
45926: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45927: LD_VAR 0 6
45931: PPUSH
45932: CALL_OW 264
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: LD_INT 42
45942: PUSH
45943: LD_INT 24
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: LIST
45950: IN
45951: IFFALSE 45972
// points := [ 25 , 5 , 3 ] ;
45953: LD_ADDR_VAR 0 9
45957: PUSH
45958: LD_INT 25
45960: PUSH
45961: LD_INT 5
45963: PUSH
45964: LD_INT 3
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: LIST
45971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45972: LD_VAR 0 6
45976: PPUSH
45977: CALL_OW 264
45981: PUSH
45982: LD_INT 4
45984: PUSH
45985: LD_INT 43
45987: PUSH
45988: LD_INT 25
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: LIST
45995: IN
45996: IFFALSE 46017
// points := [ 40 , 15 , 5 ] ;
45998: LD_ADDR_VAR 0 9
46002: PUSH
46003: LD_INT 40
46005: PUSH
46006: LD_INT 15
46008: PUSH
46009: LD_INT 5
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46017: LD_VAR 0 6
46021: PPUSH
46022: CALL_OW 264
46026: PUSH
46027: LD_INT 3
46029: PUSH
46030: LD_INT 23
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: IN
46037: IFFALSE 46058
// points := [ 7 , 25 , 8 ] ;
46039: LD_ADDR_VAR 0 9
46043: PUSH
46044: LD_INT 7
46046: PUSH
46047: LD_INT 25
46049: PUSH
46050: LD_INT 8
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46058: LD_VAR 0 6
46062: PPUSH
46063: CALL_OW 264
46067: PUSH
46068: LD_INT 5
46070: PUSH
46071: LD_INT 27
46073: PUSH
46074: LD_INT 44
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: IN
46082: IFFALSE 46103
// points := [ 14 , 50 , 16 ] ;
46084: LD_ADDR_VAR 0 9
46088: PUSH
46089: LD_INT 14
46091: PUSH
46092: LD_INT 50
46094: PUSH
46095: LD_INT 16
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: LIST
46102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46103: LD_VAR 0 6
46107: PPUSH
46108: CALL_OW 264
46112: PUSH
46113: LD_INT 6
46115: PUSH
46116: LD_INT 46
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: IN
46123: IFFALSE 46144
// points := [ 32 , 120 , 70 ] ;
46125: LD_ADDR_VAR 0 9
46129: PUSH
46130: LD_INT 32
46132: PUSH
46133: LD_INT 120
46135: PUSH
46136: LD_INT 70
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46144: LD_VAR 0 6
46148: PPUSH
46149: CALL_OW 264
46153: PUSH
46154: LD_INT 7
46156: PUSH
46157: LD_INT 28
46159: PUSH
46160: LD_INT 45
46162: PUSH
46163: LD_EXP 54
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: IN
46174: IFFALSE 46195
// points := [ 35 , 20 , 45 ] ;
46176: LD_ADDR_VAR 0 9
46180: PUSH
46181: LD_INT 35
46183: PUSH
46184: LD_INT 20
46186: PUSH
46187: LD_INT 45
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46195: LD_VAR 0 6
46199: PPUSH
46200: CALL_OW 264
46204: PUSH
46205: LD_INT 47
46207: PUSH
46208: EMPTY
46209: LIST
46210: IN
46211: IFFALSE 46232
// points := [ 67 , 45 , 75 ] ;
46213: LD_ADDR_VAR 0 9
46217: PUSH
46218: LD_INT 67
46220: PUSH
46221: LD_INT 45
46223: PUSH
46224: LD_INT 75
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: LIST
46231: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46232: LD_VAR 0 6
46236: PPUSH
46237: CALL_OW 264
46241: PUSH
46242: LD_INT 26
46244: PUSH
46245: EMPTY
46246: LIST
46247: IN
46248: IFFALSE 46269
// points := [ 120 , 30 , 80 ] ;
46250: LD_ADDR_VAR 0 9
46254: PUSH
46255: LD_INT 120
46257: PUSH
46258: LD_INT 30
46260: PUSH
46261: LD_INT 80
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46269: LD_VAR 0 6
46273: PPUSH
46274: CALL_OW 264
46278: PUSH
46279: LD_INT 22
46281: PUSH
46282: EMPTY
46283: LIST
46284: IN
46285: IFFALSE 46306
// points := [ 40 , 1 , 1 ] ;
46287: LD_ADDR_VAR 0 9
46291: PUSH
46292: LD_INT 40
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: LIST
46305: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46306: LD_VAR 0 6
46310: PPUSH
46311: CALL_OW 264
46315: PUSH
46316: LD_INT 29
46318: PUSH
46319: EMPTY
46320: LIST
46321: IN
46322: IFFALSE 46343
// points := [ 70 , 200 , 400 ] ;
46324: LD_ADDR_VAR 0 9
46328: PUSH
46329: LD_INT 70
46331: PUSH
46332: LD_INT 200
46334: PUSH
46335: LD_INT 400
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46343: LD_VAR 0 6
46347: PPUSH
46348: CALL_OW 264
46352: PUSH
46353: LD_INT 14
46355: PUSH
46356: LD_INT 53
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: IN
46363: IFFALSE 46384
// points := [ 40 , 10 , 20 ] ;
46365: LD_ADDR_VAR 0 9
46369: PUSH
46370: LD_INT 40
46372: PUSH
46373: LD_INT 10
46375: PUSH
46376: LD_INT 20
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: LIST
46383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46384: LD_VAR 0 6
46388: PPUSH
46389: CALL_OW 264
46393: PUSH
46394: LD_INT 9
46396: PUSH
46397: EMPTY
46398: LIST
46399: IN
46400: IFFALSE 46421
// points := [ 5 , 70 , 20 ] ;
46402: LD_ADDR_VAR 0 9
46406: PUSH
46407: LD_INT 5
46409: PUSH
46410: LD_INT 70
46412: PUSH
46413: LD_INT 20
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: LIST
46420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46421: LD_VAR 0 6
46425: PPUSH
46426: CALL_OW 264
46430: PUSH
46431: LD_INT 10
46433: PUSH
46434: EMPTY
46435: LIST
46436: IN
46437: IFFALSE 46458
// points := [ 35 , 110 , 70 ] ;
46439: LD_ADDR_VAR 0 9
46443: PUSH
46444: LD_INT 35
46446: PUSH
46447: LD_INT 110
46449: PUSH
46450: LD_INT 70
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46458: LD_VAR 0 6
46462: PPUSH
46463: CALL_OW 265
46467: PUSH
46468: LD_INT 25
46470: EQUAL
46471: IFFALSE 46492
// points := [ 80 , 65 , 100 ] ;
46473: LD_ADDR_VAR 0 9
46477: PUSH
46478: LD_INT 80
46480: PUSH
46481: LD_INT 65
46483: PUSH
46484: LD_INT 100
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46492: LD_VAR 0 6
46496: PPUSH
46497: CALL_OW 263
46501: PUSH
46502: LD_INT 1
46504: EQUAL
46505: IFFALSE 46540
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46507: LD_ADDR_VAR 0 10
46511: PUSH
46512: LD_VAR 0 10
46516: PUSH
46517: LD_VAR 0 6
46521: PPUSH
46522: CALL_OW 311
46526: PPUSH
46527: LD_INT 3
46529: PPUSH
46530: CALL_OW 259
46534: PUSH
46535: LD_INT 4
46537: MUL
46538: MUL
46539: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46540: LD_VAR 0 6
46544: PPUSH
46545: CALL_OW 263
46549: PUSH
46550: LD_INT 2
46552: EQUAL
46553: IFFALSE 46604
// begin j := IsControledBy ( i ) ;
46555: LD_ADDR_VAR 0 7
46559: PUSH
46560: LD_VAR 0 6
46564: PPUSH
46565: CALL_OW 312
46569: ST_TO_ADDR
// if j then
46570: LD_VAR 0 7
46574: IFFALSE 46604
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46576: LD_ADDR_VAR 0 10
46580: PUSH
46581: LD_VAR 0 10
46585: PUSH
46586: LD_VAR 0 7
46590: PPUSH
46591: LD_INT 3
46593: PPUSH
46594: CALL_OW 259
46598: PUSH
46599: LD_INT 3
46601: MUL
46602: MUL
46603: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46604: LD_VAR 0 6
46608: PPUSH
46609: CALL_OW 264
46613: PUSH
46614: LD_INT 5
46616: PUSH
46617: LD_INT 6
46619: PUSH
46620: LD_INT 46
46622: PUSH
46623: LD_INT 44
46625: PUSH
46626: LD_INT 47
46628: PUSH
46629: LD_INT 45
46631: PUSH
46632: LD_INT 28
46634: PUSH
46635: LD_INT 7
46637: PUSH
46638: LD_INT 27
46640: PUSH
46641: LD_INT 29
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: IN
46656: PUSH
46657: LD_VAR 0 1
46661: PPUSH
46662: LD_INT 52
46664: PPUSH
46665: CALL_OW 321
46669: PUSH
46670: LD_INT 2
46672: EQUAL
46673: AND
46674: IFFALSE 46691
// bpoints := bpoints * 1.2 ;
46676: LD_ADDR_VAR 0 10
46680: PUSH
46681: LD_VAR 0 10
46685: PUSH
46686: LD_REAL  1.20000000000000E+0000
46689: MUL
46690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46691: LD_VAR 0 6
46695: PPUSH
46696: CALL_OW 264
46700: PUSH
46701: LD_INT 6
46703: PUSH
46704: LD_INT 46
46706: PUSH
46707: LD_INT 47
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: LIST
46714: IN
46715: IFFALSE 46732
// bpoints := bpoints * 1.2 ;
46717: LD_ADDR_VAR 0 10
46721: PUSH
46722: LD_VAR 0 10
46726: PUSH
46727: LD_REAL  1.20000000000000E+0000
46730: MUL
46731: ST_TO_ADDR
// end ; unit_building :
46732: GO 46746
46734: LD_INT 3
46736: DOUBLE
46737: EQUAL
46738: IFTRUE 46742
46740: GO 46745
46742: POP
// ; end ;
46743: GO 46746
46745: POP
// for j = 1 to 3 do
46746: LD_ADDR_VAR 0 7
46750: PUSH
46751: DOUBLE
46752: LD_INT 1
46754: DEC
46755: ST_TO_ADDR
46756: LD_INT 3
46758: PUSH
46759: FOR_TO
46760: IFFALSE 46813
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46762: LD_ADDR_VAR 0 5
46766: PUSH
46767: LD_VAR 0 5
46771: PPUSH
46772: LD_VAR 0 7
46776: PPUSH
46777: LD_VAR 0 5
46781: PUSH
46782: LD_VAR 0 7
46786: ARRAY
46787: PUSH
46788: LD_VAR 0 9
46792: PUSH
46793: LD_VAR 0 7
46797: ARRAY
46798: PUSH
46799: LD_VAR 0 10
46803: MUL
46804: PLUS
46805: PPUSH
46806: CALL_OW 1
46810: ST_TO_ADDR
46811: GO 46759
46813: POP
46814: POP
// end ;
46815: GO 45292
46817: POP
46818: POP
// result := Replace ( result , 4 , tmp ) ;
46819: LD_ADDR_VAR 0 5
46823: PUSH
46824: LD_VAR 0 5
46828: PPUSH
46829: LD_INT 4
46831: PPUSH
46832: LD_VAR 0 8
46836: PPUSH
46837: CALL_OW 1
46841: ST_TO_ADDR
// end ;
46842: LD_VAR 0 5
46846: RET
// export function DangerAtRange ( unit , range ) ; begin
46847: LD_INT 0
46849: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46850: LD_ADDR_VAR 0 3
46854: PUSH
46855: LD_VAR 0 1
46859: PPUSH
46860: CALL_OW 255
46864: PPUSH
46865: LD_VAR 0 1
46869: PPUSH
46870: CALL_OW 250
46874: PPUSH
46875: LD_VAR 0 1
46879: PPUSH
46880: CALL_OW 251
46884: PPUSH
46885: LD_VAR 0 2
46889: PPUSH
46890: CALL 45144 0 4
46894: ST_TO_ADDR
// end ;
46895: LD_VAR 0 3
46899: RET
// export function DangerInArea ( side , area ) ; begin
46900: LD_INT 0
46902: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46903: LD_ADDR_VAR 0 3
46907: PUSH
46908: LD_VAR 0 2
46912: PPUSH
46913: LD_INT 81
46915: PUSH
46916: LD_VAR 0 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PPUSH
46925: CALL_OW 70
46929: ST_TO_ADDR
// end ;
46930: LD_VAR 0 3
46934: RET
// export function IsExtension ( b ) ; begin
46935: LD_INT 0
46937: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46938: LD_ADDR_VAR 0 2
46942: PUSH
46943: LD_VAR 0 1
46947: PUSH
46948: LD_INT 23
46950: PUSH
46951: LD_INT 20
46953: PUSH
46954: LD_INT 22
46956: PUSH
46957: LD_INT 17
46959: PUSH
46960: LD_INT 24
46962: PUSH
46963: LD_INT 21
46965: PUSH
46966: LD_INT 19
46968: PUSH
46969: LD_INT 16
46971: PUSH
46972: LD_INT 25
46974: PUSH
46975: LD_INT 18
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: IN
46990: ST_TO_ADDR
// end ;
46991: LD_VAR 0 2
46995: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46996: LD_INT 0
46998: PPUSH
46999: PPUSH
47000: PPUSH
// result := [ ] ;
47001: LD_ADDR_VAR 0 4
47005: PUSH
47006: EMPTY
47007: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47008: LD_ADDR_VAR 0 5
47012: PUSH
47013: LD_VAR 0 2
47017: PPUSH
47018: LD_INT 21
47020: PUSH
47021: LD_INT 3
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PPUSH
47028: CALL_OW 70
47032: ST_TO_ADDR
// if not tmp then
47033: LD_VAR 0 5
47037: NOT
47038: IFFALSE 47042
// exit ;
47040: GO 47106
// if checkLink then
47042: LD_VAR 0 3
47046: IFFALSE 47096
// begin for i in tmp do
47048: LD_ADDR_VAR 0 6
47052: PUSH
47053: LD_VAR 0 5
47057: PUSH
47058: FOR_IN
47059: IFFALSE 47094
// if GetBase ( i ) <> base then
47061: LD_VAR 0 6
47065: PPUSH
47066: CALL_OW 274
47070: PUSH
47071: LD_VAR 0 1
47075: NONEQUAL
47076: IFFALSE 47092
// ComLinkToBase ( base , i ) ;
47078: LD_VAR 0 1
47082: PPUSH
47083: LD_VAR 0 6
47087: PPUSH
47088: CALL_OW 169
47092: GO 47058
47094: POP
47095: POP
// end ; result := tmp ;
47096: LD_ADDR_VAR 0 4
47100: PUSH
47101: LD_VAR 0 5
47105: ST_TO_ADDR
// end ;
47106: LD_VAR 0 4
47110: RET
// export function ComComplete ( units , b ) ; var i ; begin
47111: LD_INT 0
47113: PPUSH
47114: PPUSH
// if not units then
47115: LD_VAR 0 1
47119: NOT
47120: IFFALSE 47124
// exit ;
47122: GO 47214
// for i in units do
47124: LD_ADDR_VAR 0 4
47128: PUSH
47129: LD_VAR 0 1
47133: PUSH
47134: FOR_IN
47135: IFFALSE 47212
// if BuildingStatus ( b ) = bs_build then
47137: LD_VAR 0 2
47141: PPUSH
47142: CALL_OW 461
47146: PUSH
47147: LD_INT 1
47149: EQUAL
47150: IFFALSE 47210
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47152: LD_VAR 0 4
47156: PPUSH
47157: LD_STRING h
47159: PUSH
47160: LD_VAR 0 2
47164: PPUSH
47165: CALL_OW 250
47169: PUSH
47170: LD_VAR 0 2
47174: PPUSH
47175: CALL_OW 251
47179: PUSH
47180: LD_VAR 0 2
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: PUSH
47203: EMPTY
47204: LIST
47205: PPUSH
47206: CALL_OW 446
47210: GO 47134
47212: POP
47213: POP
// end ;
47214: LD_VAR 0 3
47218: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47219: LD_INT 0
47221: PPUSH
47222: PPUSH
47223: PPUSH
47224: PPUSH
47225: PPUSH
47226: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47227: LD_VAR 0 1
47231: NOT
47232: PUSH
47233: LD_VAR 0 1
47237: PPUSH
47238: CALL_OW 263
47242: PUSH
47243: LD_INT 2
47245: NONEQUAL
47246: OR
47247: IFFALSE 47251
// exit ;
47249: GO 47567
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47251: LD_ADDR_VAR 0 6
47255: PUSH
47256: LD_INT 22
47258: PUSH
47259: LD_VAR 0 1
47263: PPUSH
47264: CALL_OW 255
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: PUSH
47276: LD_INT 30
47278: PUSH
47279: LD_INT 36
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 34
47288: PUSH
47289: LD_INT 31
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PPUSH
47305: CALL_OW 69
47309: ST_TO_ADDR
// if not tmp then
47310: LD_VAR 0 6
47314: NOT
47315: IFFALSE 47319
// exit ;
47317: GO 47567
// result := [ ] ;
47319: LD_ADDR_VAR 0 2
47323: PUSH
47324: EMPTY
47325: ST_TO_ADDR
// for i in tmp do
47326: LD_ADDR_VAR 0 3
47330: PUSH
47331: LD_VAR 0 6
47335: PUSH
47336: FOR_IN
47337: IFFALSE 47408
// begin t := UnitsInside ( i ) ;
47339: LD_ADDR_VAR 0 4
47343: PUSH
47344: LD_VAR 0 3
47348: PPUSH
47349: CALL_OW 313
47353: ST_TO_ADDR
// if t then
47354: LD_VAR 0 4
47358: IFFALSE 47406
// for j in t do
47360: LD_ADDR_VAR 0 7
47364: PUSH
47365: LD_VAR 0 4
47369: PUSH
47370: FOR_IN
47371: IFFALSE 47404
// result := Replace ( result , result + 1 , j ) ;
47373: LD_ADDR_VAR 0 2
47377: PUSH
47378: LD_VAR 0 2
47382: PPUSH
47383: LD_VAR 0 2
47387: PUSH
47388: LD_INT 1
47390: PLUS
47391: PPUSH
47392: LD_VAR 0 7
47396: PPUSH
47397: CALL_OW 1
47401: ST_TO_ADDR
47402: GO 47370
47404: POP
47405: POP
// end ;
47406: GO 47336
47408: POP
47409: POP
// if not result then
47410: LD_VAR 0 2
47414: NOT
47415: IFFALSE 47419
// exit ;
47417: GO 47567
// mech := result [ 1 ] ;
47419: LD_ADDR_VAR 0 5
47423: PUSH
47424: LD_VAR 0 2
47428: PUSH
47429: LD_INT 1
47431: ARRAY
47432: ST_TO_ADDR
// if result > 1 then
47433: LD_VAR 0 2
47437: PUSH
47438: LD_INT 1
47440: GREATER
47441: IFFALSE 47553
// begin for i = 2 to result do
47443: LD_ADDR_VAR 0 3
47447: PUSH
47448: DOUBLE
47449: LD_INT 2
47451: DEC
47452: ST_TO_ADDR
47453: LD_VAR 0 2
47457: PUSH
47458: FOR_TO
47459: IFFALSE 47551
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47461: LD_ADDR_VAR 0 4
47465: PUSH
47466: LD_VAR 0 2
47470: PUSH
47471: LD_VAR 0 3
47475: ARRAY
47476: PPUSH
47477: LD_INT 3
47479: PPUSH
47480: CALL_OW 259
47484: PUSH
47485: LD_VAR 0 2
47489: PUSH
47490: LD_VAR 0 3
47494: ARRAY
47495: PPUSH
47496: CALL_OW 432
47500: MINUS
47501: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47502: LD_VAR 0 4
47506: PUSH
47507: LD_VAR 0 5
47511: PPUSH
47512: LD_INT 3
47514: PPUSH
47515: CALL_OW 259
47519: PUSH
47520: LD_VAR 0 5
47524: PPUSH
47525: CALL_OW 432
47529: MINUS
47530: GREATEREQUAL
47531: IFFALSE 47549
// mech := result [ i ] ;
47533: LD_ADDR_VAR 0 5
47537: PUSH
47538: LD_VAR 0 2
47542: PUSH
47543: LD_VAR 0 3
47547: ARRAY
47548: ST_TO_ADDR
// end ;
47549: GO 47458
47551: POP
47552: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47553: LD_VAR 0 1
47557: PPUSH
47558: LD_VAR 0 5
47562: PPUSH
47563: CALL_OW 135
// end ;
47567: LD_VAR 0 2
47571: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47572: LD_INT 0
47574: PPUSH
47575: PPUSH
47576: PPUSH
47577: PPUSH
47578: PPUSH
47579: PPUSH
47580: PPUSH
47581: PPUSH
47582: PPUSH
47583: PPUSH
47584: PPUSH
47585: PPUSH
47586: PPUSH
// result := [ ] ;
47587: LD_ADDR_VAR 0 7
47591: PUSH
47592: EMPTY
47593: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47594: LD_VAR 0 1
47598: PPUSH
47599: CALL_OW 266
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: IN
47614: NOT
47615: IFFALSE 47619
// exit ;
47617: GO 49253
// if name then
47619: LD_VAR 0 3
47623: IFFALSE 47639
// SetBName ( base_dep , name ) ;
47625: LD_VAR 0 1
47629: PPUSH
47630: LD_VAR 0 3
47634: PPUSH
47635: CALL_OW 500
// base := GetBase ( base_dep ) ;
47639: LD_ADDR_VAR 0 15
47643: PUSH
47644: LD_VAR 0 1
47648: PPUSH
47649: CALL_OW 274
47653: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47654: LD_ADDR_VAR 0 16
47658: PUSH
47659: LD_VAR 0 1
47663: PPUSH
47664: CALL_OW 255
47668: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47669: LD_ADDR_VAR 0 17
47673: PUSH
47674: LD_VAR 0 1
47678: PPUSH
47679: CALL_OW 248
47683: ST_TO_ADDR
// if sources then
47684: LD_VAR 0 5
47688: IFFALSE 47735
// for i = 1 to 3 do
47690: LD_ADDR_VAR 0 8
47694: PUSH
47695: DOUBLE
47696: LD_INT 1
47698: DEC
47699: ST_TO_ADDR
47700: LD_INT 3
47702: PUSH
47703: FOR_TO
47704: IFFALSE 47733
// AddResourceType ( base , i , sources [ i ] ) ;
47706: LD_VAR 0 15
47710: PPUSH
47711: LD_VAR 0 8
47715: PPUSH
47716: LD_VAR 0 5
47720: PUSH
47721: LD_VAR 0 8
47725: ARRAY
47726: PPUSH
47727: CALL_OW 276
47731: GO 47703
47733: POP
47734: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47735: LD_ADDR_VAR 0 18
47739: PUSH
47740: LD_VAR 0 15
47744: PPUSH
47745: LD_VAR 0 2
47749: PPUSH
47750: LD_INT 1
47752: PPUSH
47753: CALL 46996 0 3
47757: ST_TO_ADDR
// InitHc ;
47758: CALL_OW 19
// InitUc ;
47762: CALL_OW 18
// uc_side := side ;
47766: LD_ADDR_OWVAR 20
47770: PUSH
47771: LD_VAR 0 16
47775: ST_TO_ADDR
// uc_nation := nation ;
47776: LD_ADDR_OWVAR 21
47780: PUSH
47781: LD_VAR 0 17
47785: ST_TO_ADDR
// if buildings then
47786: LD_VAR 0 18
47790: IFFALSE 49112
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47792: LD_ADDR_VAR 0 19
47796: PUSH
47797: LD_VAR 0 18
47801: PPUSH
47802: LD_INT 2
47804: PUSH
47805: LD_INT 30
47807: PUSH
47808: LD_INT 29
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 30
47817: PUSH
47818: LD_INT 30
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: PPUSH
47830: CALL_OW 72
47834: ST_TO_ADDR
// if tmp then
47835: LD_VAR 0 19
47839: IFFALSE 47887
// for i in tmp do
47841: LD_ADDR_VAR 0 8
47845: PUSH
47846: LD_VAR 0 19
47850: PUSH
47851: FOR_IN
47852: IFFALSE 47885
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47854: LD_VAR 0 8
47858: PPUSH
47859: CALL_OW 250
47863: PPUSH
47864: LD_VAR 0 8
47868: PPUSH
47869: CALL_OW 251
47873: PPUSH
47874: LD_VAR 0 16
47878: PPUSH
47879: CALL_OW 441
47883: GO 47851
47885: POP
47886: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47887: LD_VAR 0 18
47891: PPUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 30
47897: PUSH
47898: LD_INT 32
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 30
47907: PUSH
47908: LD_INT 33
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: LIST
47919: PPUSH
47920: CALL_OW 72
47924: IFFALSE 48012
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47926: LD_ADDR_VAR 0 8
47930: PUSH
47931: LD_VAR 0 18
47935: PPUSH
47936: LD_INT 2
47938: PUSH
47939: LD_INT 30
47941: PUSH
47942: LD_INT 32
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 30
47951: PUSH
47952: LD_INT 33
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: PPUSH
47964: CALL_OW 72
47968: PUSH
47969: FOR_IN
47970: IFFALSE 48010
// begin if not GetBWeapon ( i ) then
47972: LD_VAR 0 8
47976: PPUSH
47977: CALL_OW 269
47981: NOT
47982: IFFALSE 48008
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47984: LD_VAR 0 8
47988: PPUSH
47989: LD_VAR 0 8
47993: PPUSH
47994: LD_VAR 0 2
47998: PPUSH
47999: CALL 49258 0 2
48003: PPUSH
48004: CALL_OW 431
// end ;
48008: GO 47969
48010: POP
48011: POP
// end ; for i = 1 to personel do
48012: LD_ADDR_VAR 0 8
48016: PUSH
48017: DOUBLE
48018: LD_INT 1
48020: DEC
48021: ST_TO_ADDR
48022: LD_VAR 0 6
48026: PUSH
48027: FOR_TO
48028: IFFALSE 49092
// begin if i > 4 then
48030: LD_VAR 0 8
48034: PUSH
48035: LD_INT 4
48037: GREATER
48038: IFFALSE 48042
// break ;
48040: GO 49092
// case i of 1 :
48042: LD_VAR 0 8
48046: PUSH
48047: LD_INT 1
48049: DOUBLE
48050: EQUAL
48051: IFTRUE 48055
48053: GO 48135
48055: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48056: LD_ADDR_VAR 0 12
48060: PUSH
48061: LD_VAR 0 18
48065: PPUSH
48066: LD_INT 22
48068: PUSH
48069: LD_VAR 0 16
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 58
48080: PUSH
48081: EMPTY
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: LD_INT 30
48089: PUSH
48090: LD_INT 32
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 30
48099: PUSH
48100: LD_INT 4
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 30
48109: PUSH
48110: LD_INT 5
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: PPUSH
48128: CALL_OW 72
48132: ST_TO_ADDR
48133: GO 48357
48135: LD_INT 2
48137: DOUBLE
48138: EQUAL
48139: IFTRUE 48143
48141: GO 48205
48143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48144: LD_ADDR_VAR 0 12
48148: PUSH
48149: LD_VAR 0 18
48153: PPUSH
48154: LD_INT 22
48156: PUSH
48157: LD_VAR 0 16
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 30
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 30
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: LIST
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PPUSH
48198: CALL_OW 72
48202: ST_TO_ADDR
48203: GO 48357
48205: LD_INT 3
48207: DOUBLE
48208: EQUAL
48209: IFTRUE 48213
48211: GO 48275
48213: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48214: LD_ADDR_VAR 0 12
48218: PUSH
48219: LD_VAR 0 18
48223: PPUSH
48224: LD_INT 22
48226: PUSH
48227: LD_VAR 0 16
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 30
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 30
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PPUSH
48268: CALL_OW 72
48272: ST_TO_ADDR
48273: GO 48357
48275: LD_INT 4
48277: DOUBLE
48278: EQUAL
48279: IFTRUE 48283
48281: GO 48356
48283: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48284: LD_ADDR_VAR 0 12
48288: PUSH
48289: LD_VAR 0 18
48293: PPUSH
48294: LD_INT 22
48296: PUSH
48297: LD_VAR 0 16
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: LD_INT 30
48311: PUSH
48312: LD_INT 6
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 30
48321: PUSH
48322: LD_INT 7
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 30
48331: PUSH
48332: LD_INT 8
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PPUSH
48349: CALL_OW 72
48353: ST_TO_ADDR
48354: GO 48357
48356: POP
// if i = 1 then
48357: LD_VAR 0 8
48361: PUSH
48362: LD_INT 1
48364: EQUAL
48365: IFFALSE 48476
// begin tmp := [ ] ;
48367: LD_ADDR_VAR 0 19
48371: PUSH
48372: EMPTY
48373: ST_TO_ADDR
// for j in f do
48374: LD_ADDR_VAR 0 9
48378: PUSH
48379: LD_VAR 0 12
48383: PUSH
48384: FOR_IN
48385: IFFALSE 48458
// if GetBType ( j ) = b_bunker then
48387: LD_VAR 0 9
48391: PPUSH
48392: CALL_OW 266
48396: PUSH
48397: LD_INT 32
48399: EQUAL
48400: IFFALSE 48427
// tmp := Insert ( tmp , 1 , j ) else
48402: LD_ADDR_VAR 0 19
48406: PUSH
48407: LD_VAR 0 19
48411: PPUSH
48412: LD_INT 1
48414: PPUSH
48415: LD_VAR 0 9
48419: PPUSH
48420: CALL_OW 2
48424: ST_TO_ADDR
48425: GO 48456
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48427: LD_ADDR_VAR 0 19
48431: PUSH
48432: LD_VAR 0 19
48436: PPUSH
48437: LD_VAR 0 19
48441: PUSH
48442: LD_INT 1
48444: PLUS
48445: PPUSH
48446: LD_VAR 0 9
48450: PPUSH
48451: CALL_OW 2
48455: ST_TO_ADDR
48456: GO 48384
48458: POP
48459: POP
// if tmp then
48460: LD_VAR 0 19
48464: IFFALSE 48476
// f := tmp ;
48466: LD_ADDR_VAR 0 12
48470: PUSH
48471: LD_VAR 0 19
48475: ST_TO_ADDR
// end ; x := personel [ i ] ;
48476: LD_ADDR_VAR 0 13
48480: PUSH
48481: LD_VAR 0 6
48485: PUSH
48486: LD_VAR 0 8
48490: ARRAY
48491: ST_TO_ADDR
// if x = - 1 then
48492: LD_VAR 0 13
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: EQUAL
48501: IFFALSE 48710
// begin for j in f do
48503: LD_ADDR_VAR 0 9
48507: PUSH
48508: LD_VAR 0 12
48512: PUSH
48513: FOR_IN
48514: IFFALSE 48706
// repeat InitHc ;
48516: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48520: LD_VAR 0 9
48524: PPUSH
48525: CALL_OW 266
48529: PUSH
48530: LD_INT 5
48532: EQUAL
48533: IFFALSE 48603
// begin if UnitsInside ( j ) < 3 then
48535: LD_VAR 0 9
48539: PPUSH
48540: CALL_OW 313
48544: PUSH
48545: LD_INT 3
48547: LESS
48548: IFFALSE 48584
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48550: LD_INT 0
48552: PPUSH
48553: LD_INT 5
48555: PUSH
48556: LD_INT 8
48558: PUSH
48559: LD_INT 9
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: LIST
48566: PUSH
48567: LD_VAR 0 17
48571: ARRAY
48572: PPUSH
48573: LD_VAR 0 4
48577: PPUSH
48578: CALL_OW 380
48582: GO 48601
// PrepareHuman ( false , i , skill ) ;
48584: LD_INT 0
48586: PPUSH
48587: LD_VAR 0 8
48591: PPUSH
48592: LD_VAR 0 4
48596: PPUSH
48597: CALL_OW 380
// end else
48601: GO 48620
// PrepareHuman ( false , i , skill ) ;
48603: LD_INT 0
48605: PPUSH
48606: LD_VAR 0 8
48610: PPUSH
48611: LD_VAR 0 4
48615: PPUSH
48616: CALL_OW 380
// un := CreateHuman ;
48620: LD_ADDR_VAR 0 14
48624: PUSH
48625: CALL_OW 44
48629: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48630: LD_ADDR_VAR 0 7
48634: PUSH
48635: LD_VAR 0 7
48639: PPUSH
48640: LD_INT 1
48642: PPUSH
48643: LD_VAR 0 14
48647: PPUSH
48648: CALL_OW 2
48652: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48653: LD_VAR 0 14
48657: PPUSH
48658: LD_VAR 0 9
48662: PPUSH
48663: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48667: LD_VAR 0 9
48671: PPUSH
48672: CALL_OW 313
48676: PUSH
48677: LD_INT 6
48679: EQUAL
48680: PUSH
48681: LD_VAR 0 9
48685: PPUSH
48686: CALL_OW 266
48690: PUSH
48691: LD_INT 32
48693: PUSH
48694: LD_INT 31
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: IN
48701: OR
48702: IFFALSE 48516
48704: GO 48513
48706: POP
48707: POP
// end else
48708: GO 49090
// for j = 1 to x do
48710: LD_ADDR_VAR 0 9
48714: PUSH
48715: DOUBLE
48716: LD_INT 1
48718: DEC
48719: ST_TO_ADDR
48720: LD_VAR 0 13
48724: PUSH
48725: FOR_TO
48726: IFFALSE 49088
// begin InitHc ;
48728: CALL_OW 19
// if not f then
48732: LD_VAR 0 12
48736: NOT
48737: IFFALSE 48826
// begin PrepareHuman ( false , i , skill ) ;
48739: LD_INT 0
48741: PPUSH
48742: LD_VAR 0 8
48746: PPUSH
48747: LD_VAR 0 4
48751: PPUSH
48752: CALL_OW 380
// un := CreateHuman ;
48756: LD_ADDR_VAR 0 14
48760: PUSH
48761: CALL_OW 44
48765: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48766: LD_ADDR_VAR 0 7
48770: PUSH
48771: LD_VAR 0 7
48775: PPUSH
48776: LD_INT 1
48778: PPUSH
48779: LD_VAR 0 14
48783: PPUSH
48784: CALL_OW 2
48788: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48789: LD_VAR 0 14
48793: PPUSH
48794: LD_VAR 0 1
48798: PPUSH
48799: CALL_OW 250
48803: PPUSH
48804: LD_VAR 0 1
48808: PPUSH
48809: CALL_OW 251
48813: PPUSH
48814: LD_INT 10
48816: PPUSH
48817: LD_INT 0
48819: PPUSH
48820: CALL_OW 50
// continue ;
48824: GO 48725
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48826: LD_VAR 0 12
48830: PUSH
48831: LD_INT 1
48833: ARRAY
48834: PPUSH
48835: CALL_OW 313
48839: PUSH
48840: LD_VAR 0 12
48844: PUSH
48845: LD_INT 1
48847: ARRAY
48848: PPUSH
48849: CALL_OW 266
48853: PUSH
48854: LD_INT 32
48856: PUSH
48857: LD_INT 31
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: IN
48864: AND
48865: PUSH
48866: LD_VAR 0 12
48870: PUSH
48871: LD_INT 1
48873: ARRAY
48874: PPUSH
48875: CALL_OW 313
48879: PUSH
48880: LD_INT 6
48882: EQUAL
48883: OR
48884: IFFALSE 48904
// f := Delete ( f , 1 ) ;
48886: LD_ADDR_VAR 0 12
48890: PUSH
48891: LD_VAR 0 12
48895: PPUSH
48896: LD_INT 1
48898: PPUSH
48899: CALL_OW 3
48903: ST_TO_ADDR
// if not f then
48904: LD_VAR 0 12
48908: NOT
48909: IFFALSE 48927
// begin x := x + 2 ;
48911: LD_ADDR_VAR 0 13
48915: PUSH
48916: LD_VAR 0 13
48920: PUSH
48921: LD_INT 2
48923: PLUS
48924: ST_TO_ADDR
// continue ;
48925: GO 48725
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48927: LD_VAR 0 12
48931: PUSH
48932: LD_INT 1
48934: ARRAY
48935: PPUSH
48936: CALL_OW 266
48940: PUSH
48941: LD_INT 5
48943: EQUAL
48944: IFFALSE 49018
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48946: LD_VAR 0 12
48950: PUSH
48951: LD_INT 1
48953: ARRAY
48954: PPUSH
48955: CALL_OW 313
48959: PUSH
48960: LD_INT 3
48962: LESS
48963: IFFALSE 48999
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48965: LD_INT 0
48967: PPUSH
48968: LD_INT 5
48970: PUSH
48971: LD_INT 8
48973: PUSH
48974: LD_INT 9
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: LIST
48981: PUSH
48982: LD_VAR 0 17
48986: ARRAY
48987: PPUSH
48988: LD_VAR 0 4
48992: PPUSH
48993: CALL_OW 380
48997: GO 49016
// PrepareHuman ( false , i , skill ) ;
48999: LD_INT 0
49001: PPUSH
49002: LD_VAR 0 8
49006: PPUSH
49007: LD_VAR 0 4
49011: PPUSH
49012: CALL_OW 380
// end else
49016: GO 49035
// PrepareHuman ( false , i , skill ) ;
49018: LD_INT 0
49020: PPUSH
49021: LD_VAR 0 8
49025: PPUSH
49026: LD_VAR 0 4
49030: PPUSH
49031: CALL_OW 380
// un := CreateHuman ;
49035: LD_ADDR_VAR 0 14
49039: PUSH
49040: CALL_OW 44
49044: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49045: LD_ADDR_VAR 0 7
49049: PUSH
49050: LD_VAR 0 7
49054: PPUSH
49055: LD_INT 1
49057: PPUSH
49058: LD_VAR 0 14
49062: PPUSH
49063: CALL_OW 2
49067: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49068: LD_VAR 0 14
49072: PPUSH
49073: LD_VAR 0 12
49077: PUSH
49078: LD_INT 1
49080: ARRAY
49081: PPUSH
49082: CALL_OW 52
// end ;
49086: GO 48725
49088: POP
49089: POP
// end ;
49090: GO 48027
49092: POP
49093: POP
// result := result ^ buildings ;
49094: LD_ADDR_VAR 0 7
49098: PUSH
49099: LD_VAR 0 7
49103: PUSH
49104: LD_VAR 0 18
49108: ADD
49109: ST_TO_ADDR
// end else
49110: GO 49253
// begin for i = 1 to personel do
49112: LD_ADDR_VAR 0 8
49116: PUSH
49117: DOUBLE
49118: LD_INT 1
49120: DEC
49121: ST_TO_ADDR
49122: LD_VAR 0 6
49126: PUSH
49127: FOR_TO
49128: IFFALSE 49251
// begin if i > 4 then
49130: LD_VAR 0 8
49134: PUSH
49135: LD_INT 4
49137: GREATER
49138: IFFALSE 49142
// break ;
49140: GO 49251
// x := personel [ i ] ;
49142: LD_ADDR_VAR 0 13
49146: PUSH
49147: LD_VAR 0 6
49151: PUSH
49152: LD_VAR 0 8
49156: ARRAY
49157: ST_TO_ADDR
// if x = - 1 then
49158: LD_VAR 0 13
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: EQUAL
49167: IFFALSE 49171
// continue ;
49169: GO 49127
// PrepareHuman ( false , i , skill ) ;
49171: LD_INT 0
49173: PPUSH
49174: LD_VAR 0 8
49178: PPUSH
49179: LD_VAR 0 4
49183: PPUSH
49184: CALL_OW 380
// un := CreateHuman ;
49188: LD_ADDR_VAR 0 14
49192: PUSH
49193: CALL_OW 44
49197: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49198: LD_VAR 0 14
49202: PPUSH
49203: LD_VAR 0 1
49207: PPUSH
49208: CALL_OW 250
49212: PPUSH
49213: LD_VAR 0 1
49217: PPUSH
49218: CALL_OW 251
49222: PPUSH
49223: LD_INT 10
49225: PPUSH
49226: LD_INT 0
49228: PPUSH
49229: CALL_OW 50
// result := result ^ un ;
49233: LD_ADDR_VAR 0 7
49237: PUSH
49238: LD_VAR 0 7
49242: PUSH
49243: LD_VAR 0 14
49247: ADD
49248: ST_TO_ADDR
// end ;
49249: GO 49127
49251: POP
49252: POP
// end ; end ;
49253: LD_VAR 0 7
49257: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49258: LD_INT 0
49260: PPUSH
49261: PPUSH
49262: PPUSH
49263: PPUSH
49264: PPUSH
49265: PPUSH
49266: PPUSH
49267: PPUSH
49268: PPUSH
49269: PPUSH
49270: PPUSH
49271: PPUSH
49272: PPUSH
49273: PPUSH
49274: PPUSH
49275: PPUSH
// result := false ;
49276: LD_ADDR_VAR 0 3
49280: PUSH
49281: LD_INT 0
49283: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49284: LD_VAR 0 1
49288: NOT
49289: PUSH
49290: LD_VAR 0 1
49294: PPUSH
49295: CALL_OW 266
49299: PUSH
49300: LD_INT 32
49302: PUSH
49303: LD_INT 33
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: IN
49310: NOT
49311: OR
49312: IFFALSE 49316
// exit ;
49314: GO 50425
// nat := GetNation ( tower ) ;
49316: LD_ADDR_VAR 0 12
49320: PUSH
49321: LD_VAR 0 1
49325: PPUSH
49326: CALL_OW 248
49330: ST_TO_ADDR
// side := GetSide ( tower ) ;
49331: LD_ADDR_VAR 0 16
49335: PUSH
49336: LD_VAR 0 1
49340: PPUSH
49341: CALL_OW 255
49345: ST_TO_ADDR
// x := GetX ( tower ) ;
49346: LD_ADDR_VAR 0 10
49350: PUSH
49351: LD_VAR 0 1
49355: PPUSH
49356: CALL_OW 250
49360: ST_TO_ADDR
// y := GetY ( tower ) ;
49361: LD_ADDR_VAR 0 11
49365: PUSH
49366: LD_VAR 0 1
49370: PPUSH
49371: CALL_OW 251
49375: ST_TO_ADDR
// if not x or not y then
49376: LD_VAR 0 10
49380: NOT
49381: PUSH
49382: LD_VAR 0 11
49386: NOT
49387: OR
49388: IFFALSE 49392
// exit ;
49390: GO 50425
// weapon := 0 ;
49392: LD_ADDR_VAR 0 18
49396: PUSH
49397: LD_INT 0
49399: ST_TO_ADDR
// fac_list := [ ] ;
49400: LD_ADDR_VAR 0 17
49404: PUSH
49405: EMPTY
49406: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49407: LD_ADDR_VAR 0 6
49411: PUSH
49412: LD_VAR 0 1
49416: PPUSH
49417: CALL_OW 274
49421: PPUSH
49422: LD_VAR 0 2
49426: PPUSH
49427: LD_INT 0
49429: PPUSH
49430: CALL 46996 0 3
49434: PPUSH
49435: LD_INT 30
49437: PUSH
49438: LD_INT 3
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PPUSH
49445: CALL_OW 72
49449: ST_TO_ADDR
// if not factories then
49450: LD_VAR 0 6
49454: NOT
49455: IFFALSE 49459
// exit ;
49457: GO 50425
// for i in factories do
49459: LD_ADDR_VAR 0 8
49463: PUSH
49464: LD_VAR 0 6
49468: PUSH
49469: FOR_IN
49470: IFFALSE 49495
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49472: LD_ADDR_VAR 0 17
49476: PUSH
49477: LD_VAR 0 17
49481: PUSH
49482: LD_VAR 0 8
49486: PPUSH
49487: CALL_OW 478
49491: UNION
49492: ST_TO_ADDR
49493: GO 49469
49495: POP
49496: POP
// if not fac_list then
49497: LD_VAR 0 17
49501: NOT
49502: IFFALSE 49506
// exit ;
49504: GO 50425
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49506: LD_ADDR_VAR 0 5
49510: PUSH
49511: LD_INT 4
49513: PUSH
49514: LD_INT 5
49516: PUSH
49517: LD_INT 9
49519: PUSH
49520: LD_INT 10
49522: PUSH
49523: LD_INT 6
49525: PUSH
49526: LD_INT 7
49528: PUSH
49529: LD_INT 11
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 27
49543: PUSH
49544: LD_INT 28
49546: PUSH
49547: LD_INT 26
49549: PUSH
49550: LD_INT 30
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 43
49561: PUSH
49562: LD_INT 44
49564: PUSH
49565: LD_INT 46
49567: PUSH
49568: LD_INT 45
49570: PUSH
49571: LD_INT 47
49573: PUSH
49574: LD_INT 49
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: PUSH
49590: LD_VAR 0 12
49594: ARRAY
49595: ST_TO_ADDR
// list := list isect fac_list ;
49596: LD_ADDR_VAR 0 5
49600: PUSH
49601: LD_VAR 0 5
49605: PUSH
49606: LD_VAR 0 17
49610: ISECT
49611: ST_TO_ADDR
// if not list then
49612: LD_VAR 0 5
49616: NOT
49617: IFFALSE 49621
// exit ;
49619: GO 50425
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49621: LD_VAR 0 12
49625: PUSH
49626: LD_INT 3
49628: EQUAL
49629: PUSH
49630: LD_INT 49
49632: PUSH
49633: LD_VAR 0 5
49637: IN
49638: AND
49639: PUSH
49640: LD_INT 31
49642: PPUSH
49643: LD_VAR 0 16
49647: PPUSH
49648: CALL_OW 321
49652: PUSH
49653: LD_INT 2
49655: EQUAL
49656: AND
49657: IFFALSE 49717
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49659: LD_INT 22
49661: PUSH
49662: LD_VAR 0 16
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 35
49673: PUSH
49674: LD_INT 49
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 91
49683: PUSH
49684: LD_VAR 0 1
49688: PUSH
49689: LD_INT 10
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: LIST
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: LIST
49701: PPUSH
49702: CALL_OW 69
49706: NOT
49707: IFFALSE 49717
// weapon := ru_time_lapser ;
49709: LD_ADDR_VAR 0 18
49713: PUSH
49714: LD_INT 49
49716: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49717: LD_VAR 0 12
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: IN
49732: PUSH
49733: LD_INT 11
49735: PUSH
49736: LD_VAR 0 5
49740: IN
49741: PUSH
49742: LD_INT 30
49744: PUSH
49745: LD_VAR 0 5
49749: IN
49750: OR
49751: AND
49752: PUSH
49753: LD_INT 6
49755: PPUSH
49756: LD_VAR 0 16
49760: PPUSH
49761: CALL_OW 321
49765: PUSH
49766: LD_INT 2
49768: EQUAL
49769: AND
49770: IFFALSE 49935
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49772: LD_INT 22
49774: PUSH
49775: LD_VAR 0 16
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 35
49789: PUSH
49790: LD_INT 11
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 35
49799: PUSH
49800: LD_INT 30
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 91
49814: PUSH
49815: LD_VAR 0 1
49819: PUSH
49820: LD_INT 18
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: LIST
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: LIST
49832: PPUSH
49833: CALL_OW 69
49837: NOT
49838: PUSH
49839: LD_INT 22
49841: PUSH
49842: LD_VAR 0 16
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 30
49856: PUSH
49857: LD_INT 32
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 30
49866: PUSH
49867: LD_INT 33
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 91
49881: PUSH
49882: LD_VAR 0 1
49886: PUSH
49887: LD_INT 12
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: PUSH
49900: EMPTY
49901: LIST
49902: PPUSH
49903: CALL_OW 69
49907: PUSH
49908: LD_INT 2
49910: GREATER
49911: AND
49912: IFFALSE 49935
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49914: LD_ADDR_VAR 0 18
49918: PUSH
49919: LD_INT 11
49921: PUSH
49922: LD_INT 30
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_VAR 0 12
49933: ARRAY
49934: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49935: LD_VAR 0 18
49939: NOT
49940: PUSH
49941: LD_INT 40
49943: PPUSH
49944: LD_VAR 0 16
49948: PPUSH
49949: CALL_OW 321
49953: PUSH
49954: LD_INT 2
49956: EQUAL
49957: AND
49958: PUSH
49959: LD_INT 7
49961: PUSH
49962: LD_VAR 0 5
49966: IN
49967: PUSH
49968: LD_INT 28
49970: PUSH
49971: LD_VAR 0 5
49975: IN
49976: OR
49977: PUSH
49978: LD_INT 45
49980: PUSH
49981: LD_VAR 0 5
49985: IN
49986: OR
49987: AND
49988: IFFALSE 50242
// begin hex := GetHexInfo ( x , y ) ;
49990: LD_ADDR_VAR 0 4
49994: PUSH
49995: LD_VAR 0 10
49999: PPUSH
50000: LD_VAR 0 11
50004: PPUSH
50005: CALL_OW 546
50009: ST_TO_ADDR
// if hex [ 1 ] then
50010: LD_VAR 0 4
50014: PUSH
50015: LD_INT 1
50017: ARRAY
50018: IFFALSE 50022
// exit ;
50020: GO 50425
// height := hex [ 2 ] ;
50022: LD_ADDR_VAR 0 15
50026: PUSH
50027: LD_VAR 0 4
50031: PUSH
50032: LD_INT 2
50034: ARRAY
50035: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50036: LD_ADDR_VAR 0 14
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: LD_INT 3
50049: PUSH
50050: LD_INT 5
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: ST_TO_ADDR
// for i in tmp do
50059: LD_ADDR_VAR 0 8
50063: PUSH
50064: LD_VAR 0 14
50068: PUSH
50069: FOR_IN
50070: IFFALSE 50240
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50072: LD_ADDR_VAR 0 9
50076: PUSH
50077: LD_VAR 0 10
50081: PPUSH
50082: LD_VAR 0 8
50086: PPUSH
50087: LD_INT 5
50089: PPUSH
50090: CALL_OW 272
50094: PUSH
50095: LD_VAR 0 11
50099: PPUSH
50100: LD_VAR 0 8
50104: PPUSH
50105: LD_INT 5
50107: PPUSH
50108: CALL_OW 273
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50117: LD_VAR 0 9
50121: PUSH
50122: LD_INT 1
50124: ARRAY
50125: PPUSH
50126: LD_VAR 0 9
50130: PUSH
50131: LD_INT 2
50133: ARRAY
50134: PPUSH
50135: CALL_OW 488
50139: IFFALSE 50238
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50141: LD_ADDR_VAR 0 4
50145: PUSH
50146: LD_VAR 0 9
50150: PUSH
50151: LD_INT 1
50153: ARRAY
50154: PPUSH
50155: LD_VAR 0 9
50159: PUSH
50160: LD_INT 2
50162: ARRAY
50163: PPUSH
50164: CALL_OW 546
50168: ST_TO_ADDR
// if hex [ 1 ] then
50169: LD_VAR 0 4
50173: PUSH
50174: LD_INT 1
50176: ARRAY
50177: IFFALSE 50181
// continue ;
50179: GO 50069
// h := hex [ 2 ] ;
50181: LD_ADDR_VAR 0 13
50185: PUSH
50186: LD_VAR 0 4
50190: PUSH
50191: LD_INT 2
50193: ARRAY
50194: ST_TO_ADDR
// if h + 7 < height then
50195: LD_VAR 0 13
50199: PUSH
50200: LD_INT 7
50202: PLUS
50203: PUSH
50204: LD_VAR 0 15
50208: LESS
50209: IFFALSE 50238
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50211: LD_ADDR_VAR 0 18
50215: PUSH
50216: LD_INT 7
50218: PUSH
50219: LD_INT 28
50221: PUSH
50222: LD_INT 45
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: PUSH
50230: LD_VAR 0 12
50234: ARRAY
50235: ST_TO_ADDR
// break ;
50236: GO 50240
// end ; end ; end ;
50238: GO 50069
50240: POP
50241: POP
// end ; if not weapon then
50242: LD_VAR 0 18
50246: NOT
50247: IFFALSE 50307
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50249: LD_ADDR_VAR 0 5
50253: PUSH
50254: LD_VAR 0 5
50258: PUSH
50259: LD_INT 11
50261: PUSH
50262: LD_INT 30
50264: PUSH
50265: LD_INT 49
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: LIST
50272: DIFF
50273: ST_TO_ADDR
// if not list then
50274: LD_VAR 0 5
50278: NOT
50279: IFFALSE 50283
// exit ;
50281: GO 50425
// weapon := list [ rand ( 1 , list ) ] ;
50283: LD_ADDR_VAR 0 18
50287: PUSH
50288: LD_VAR 0 5
50292: PUSH
50293: LD_INT 1
50295: PPUSH
50296: LD_VAR 0 5
50300: PPUSH
50301: CALL_OW 12
50305: ARRAY
50306: ST_TO_ADDR
// end ; if weapon then
50307: LD_VAR 0 18
50311: IFFALSE 50425
// begin tmp := CostOfWeapon ( weapon ) ;
50313: LD_ADDR_VAR 0 14
50317: PUSH
50318: LD_VAR 0 18
50322: PPUSH
50323: CALL_OW 451
50327: ST_TO_ADDR
// j := GetBase ( tower ) ;
50328: LD_ADDR_VAR 0 9
50332: PUSH
50333: LD_VAR 0 1
50337: PPUSH
50338: CALL_OW 274
50342: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50343: LD_VAR 0 9
50347: PPUSH
50348: LD_INT 1
50350: PPUSH
50351: CALL_OW 275
50355: PUSH
50356: LD_VAR 0 14
50360: PUSH
50361: LD_INT 1
50363: ARRAY
50364: GREATEREQUAL
50365: PUSH
50366: LD_VAR 0 9
50370: PPUSH
50371: LD_INT 2
50373: PPUSH
50374: CALL_OW 275
50378: PUSH
50379: LD_VAR 0 14
50383: PUSH
50384: LD_INT 2
50386: ARRAY
50387: GREATEREQUAL
50388: AND
50389: PUSH
50390: LD_VAR 0 9
50394: PPUSH
50395: LD_INT 3
50397: PPUSH
50398: CALL_OW 275
50402: PUSH
50403: LD_VAR 0 14
50407: PUSH
50408: LD_INT 3
50410: ARRAY
50411: GREATEREQUAL
50412: AND
50413: IFFALSE 50425
// result := weapon ;
50415: LD_ADDR_VAR 0 3
50419: PUSH
50420: LD_VAR 0 18
50424: ST_TO_ADDR
// end ; end ;
50425: LD_VAR 0 3
50429: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50430: LD_INT 0
50432: PPUSH
50433: PPUSH
// result := true ;
50434: LD_ADDR_VAR 0 3
50438: PUSH
50439: LD_INT 1
50441: ST_TO_ADDR
// if array1 = array2 then
50442: LD_VAR 0 1
50446: PUSH
50447: LD_VAR 0 2
50451: EQUAL
50452: IFFALSE 50512
// begin for i = 1 to array1 do
50454: LD_ADDR_VAR 0 4
50458: PUSH
50459: DOUBLE
50460: LD_INT 1
50462: DEC
50463: ST_TO_ADDR
50464: LD_VAR 0 1
50468: PUSH
50469: FOR_TO
50470: IFFALSE 50508
// if array1 [ i ] <> array2 [ i ] then
50472: LD_VAR 0 1
50476: PUSH
50477: LD_VAR 0 4
50481: ARRAY
50482: PUSH
50483: LD_VAR 0 2
50487: PUSH
50488: LD_VAR 0 4
50492: ARRAY
50493: NONEQUAL
50494: IFFALSE 50506
// begin result := false ;
50496: LD_ADDR_VAR 0 3
50500: PUSH
50501: LD_INT 0
50503: ST_TO_ADDR
// break ;
50504: GO 50508
// end ;
50506: GO 50469
50508: POP
50509: POP
// end else
50510: GO 50520
// result := false ;
50512: LD_ADDR_VAR 0 3
50516: PUSH
50517: LD_INT 0
50519: ST_TO_ADDR
// end ;
50520: LD_VAR 0 3
50524: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50525: LD_INT 0
50527: PPUSH
50528: PPUSH
// if not array1 or not array2 then
50529: LD_VAR 0 1
50533: NOT
50534: PUSH
50535: LD_VAR 0 2
50539: NOT
50540: OR
50541: IFFALSE 50545
// exit ;
50543: GO 50609
// result := true ;
50545: LD_ADDR_VAR 0 3
50549: PUSH
50550: LD_INT 1
50552: ST_TO_ADDR
// for i = 1 to array1 do
50553: LD_ADDR_VAR 0 4
50557: PUSH
50558: DOUBLE
50559: LD_INT 1
50561: DEC
50562: ST_TO_ADDR
50563: LD_VAR 0 1
50567: PUSH
50568: FOR_TO
50569: IFFALSE 50607
// if array1 [ i ] <> array2 [ i ] then
50571: LD_VAR 0 1
50575: PUSH
50576: LD_VAR 0 4
50580: ARRAY
50581: PUSH
50582: LD_VAR 0 2
50586: PUSH
50587: LD_VAR 0 4
50591: ARRAY
50592: NONEQUAL
50593: IFFALSE 50605
// begin result := false ;
50595: LD_ADDR_VAR 0 3
50599: PUSH
50600: LD_INT 0
50602: ST_TO_ADDR
// break ;
50603: GO 50607
// end ;
50605: GO 50568
50607: POP
50608: POP
// end ;
50609: LD_VAR 0 3
50613: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50614: LD_INT 0
50616: PPUSH
50617: PPUSH
50618: PPUSH
// pom := GetBase ( fac ) ;
50619: LD_ADDR_VAR 0 5
50623: PUSH
50624: LD_VAR 0 1
50628: PPUSH
50629: CALL_OW 274
50633: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50634: LD_ADDR_VAR 0 4
50638: PUSH
50639: LD_VAR 0 2
50643: PUSH
50644: LD_INT 1
50646: ARRAY
50647: PPUSH
50648: LD_VAR 0 2
50652: PUSH
50653: LD_INT 2
50655: ARRAY
50656: PPUSH
50657: LD_VAR 0 2
50661: PUSH
50662: LD_INT 3
50664: ARRAY
50665: PPUSH
50666: LD_VAR 0 2
50670: PUSH
50671: LD_INT 4
50673: ARRAY
50674: PPUSH
50675: CALL_OW 449
50679: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50680: LD_ADDR_VAR 0 3
50684: PUSH
50685: LD_VAR 0 5
50689: PPUSH
50690: LD_INT 1
50692: PPUSH
50693: CALL_OW 275
50697: PUSH
50698: LD_VAR 0 4
50702: PUSH
50703: LD_INT 1
50705: ARRAY
50706: GREATEREQUAL
50707: PUSH
50708: LD_VAR 0 5
50712: PPUSH
50713: LD_INT 2
50715: PPUSH
50716: CALL_OW 275
50720: PUSH
50721: LD_VAR 0 4
50725: PUSH
50726: LD_INT 2
50728: ARRAY
50729: GREATEREQUAL
50730: AND
50731: PUSH
50732: LD_VAR 0 5
50736: PPUSH
50737: LD_INT 3
50739: PPUSH
50740: CALL_OW 275
50744: PUSH
50745: LD_VAR 0 4
50749: PUSH
50750: LD_INT 3
50752: ARRAY
50753: GREATEREQUAL
50754: AND
50755: ST_TO_ADDR
// end ;
50756: LD_VAR 0 3
50760: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50761: LD_INT 0
50763: PPUSH
50764: PPUSH
50765: PPUSH
50766: PPUSH
// pom := GetBase ( building ) ;
50767: LD_ADDR_VAR 0 3
50771: PUSH
50772: LD_VAR 0 1
50776: PPUSH
50777: CALL_OW 274
50781: ST_TO_ADDR
// if not pom then
50782: LD_VAR 0 3
50786: NOT
50787: IFFALSE 50791
// exit ;
50789: GO 50961
// btype := GetBType ( building ) ;
50791: LD_ADDR_VAR 0 5
50795: PUSH
50796: LD_VAR 0 1
50800: PPUSH
50801: CALL_OW 266
50805: ST_TO_ADDR
// if btype = b_armoury then
50806: LD_VAR 0 5
50810: PUSH
50811: LD_INT 4
50813: EQUAL
50814: IFFALSE 50824
// btype := b_barracks ;
50816: LD_ADDR_VAR 0 5
50820: PUSH
50821: LD_INT 5
50823: ST_TO_ADDR
// if btype = b_depot then
50824: LD_VAR 0 5
50828: PUSH
50829: LD_INT 0
50831: EQUAL
50832: IFFALSE 50842
// btype := b_warehouse ;
50834: LD_ADDR_VAR 0 5
50838: PUSH
50839: LD_INT 1
50841: ST_TO_ADDR
// if btype = b_workshop then
50842: LD_VAR 0 5
50846: PUSH
50847: LD_INT 2
50849: EQUAL
50850: IFFALSE 50860
// btype := b_factory ;
50852: LD_ADDR_VAR 0 5
50856: PUSH
50857: LD_INT 3
50859: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50860: LD_ADDR_VAR 0 4
50864: PUSH
50865: LD_VAR 0 5
50869: PPUSH
50870: LD_VAR 0 1
50874: PPUSH
50875: CALL_OW 248
50879: PPUSH
50880: CALL_OW 450
50884: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50885: LD_ADDR_VAR 0 2
50889: PUSH
50890: LD_VAR 0 3
50894: PPUSH
50895: LD_INT 1
50897: PPUSH
50898: CALL_OW 275
50902: PUSH
50903: LD_VAR 0 4
50907: PUSH
50908: LD_INT 1
50910: ARRAY
50911: GREATEREQUAL
50912: PUSH
50913: LD_VAR 0 3
50917: PPUSH
50918: LD_INT 2
50920: PPUSH
50921: CALL_OW 275
50925: PUSH
50926: LD_VAR 0 4
50930: PUSH
50931: LD_INT 2
50933: ARRAY
50934: GREATEREQUAL
50935: AND
50936: PUSH
50937: LD_VAR 0 3
50941: PPUSH
50942: LD_INT 3
50944: PPUSH
50945: CALL_OW 275
50949: PUSH
50950: LD_VAR 0 4
50954: PUSH
50955: LD_INT 3
50957: ARRAY
50958: GREATEREQUAL
50959: AND
50960: ST_TO_ADDR
// end ;
50961: LD_VAR 0 2
50965: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50966: LD_INT 0
50968: PPUSH
50969: PPUSH
50970: PPUSH
// pom := GetBase ( building ) ;
50971: LD_ADDR_VAR 0 4
50975: PUSH
50976: LD_VAR 0 1
50980: PPUSH
50981: CALL_OW 274
50985: ST_TO_ADDR
// if not pom then
50986: LD_VAR 0 4
50990: NOT
50991: IFFALSE 50995
// exit ;
50993: GO 51096
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50995: LD_ADDR_VAR 0 5
50999: PUSH
51000: LD_VAR 0 2
51004: PPUSH
51005: LD_VAR 0 1
51009: PPUSH
51010: CALL_OW 248
51014: PPUSH
51015: CALL_OW 450
51019: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51020: LD_ADDR_VAR 0 3
51024: PUSH
51025: LD_VAR 0 4
51029: PPUSH
51030: LD_INT 1
51032: PPUSH
51033: CALL_OW 275
51037: PUSH
51038: LD_VAR 0 5
51042: PUSH
51043: LD_INT 1
51045: ARRAY
51046: GREATEREQUAL
51047: PUSH
51048: LD_VAR 0 4
51052: PPUSH
51053: LD_INT 2
51055: PPUSH
51056: CALL_OW 275
51060: PUSH
51061: LD_VAR 0 5
51065: PUSH
51066: LD_INT 2
51068: ARRAY
51069: GREATEREQUAL
51070: AND
51071: PUSH
51072: LD_VAR 0 4
51076: PPUSH
51077: LD_INT 3
51079: PPUSH
51080: CALL_OW 275
51084: PUSH
51085: LD_VAR 0 5
51089: PUSH
51090: LD_INT 3
51092: ARRAY
51093: GREATEREQUAL
51094: AND
51095: ST_TO_ADDR
// end ;
51096: LD_VAR 0 3
51100: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51101: LD_INT 0
51103: PPUSH
51104: PPUSH
51105: PPUSH
51106: PPUSH
51107: PPUSH
51108: PPUSH
51109: PPUSH
51110: PPUSH
51111: PPUSH
51112: PPUSH
51113: PPUSH
// result := false ;
51114: LD_ADDR_VAR 0 8
51118: PUSH
51119: LD_INT 0
51121: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51122: LD_VAR 0 5
51126: NOT
51127: PUSH
51128: LD_VAR 0 1
51132: NOT
51133: OR
51134: PUSH
51135: LD_VAR 0 2
51139: NOT
51140: OR
51141: PUSH
51142: LD_VAR 0 3
51146: NOT
51147: OR
51148: IFFALSE 51152
// exit ;
51150: GO 51966
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51152: LD_ADDR_VAR 0 14
51156: PUSH
51157: LD_VAR 0 1
51161: PPUSH
51162: LD_VAR 0 2
51166: PPUSH
51167: LD_VAR 0 3
51171: PPUSH
51172: LD_VAR 0 4
51176: PPUSH
51177: LD_VAR 0 5
51181: PUSH
51182: LD_INT 1
51184: ARRAY
51185: PPUSH
51186: CALL_OW 248
51190: PPUSH
51191: LD_INT 0
51193: PPUSH
51194: CALL 53203 0 6
51198: ST_TO_ADDR
// if not hexes then
51199: LD_VAR 0 14
51203: NOT
51204: IFFALSE 51208
// exit ;
51206: GO 51966
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51208: LD_ADDR_VAR 0 17
51212: PUSH
51213: LD_VAR 0 5
51217: PPUSH
51218: LD_INT 22
51220: PUSH
51221: LD_VAR 0 13
51225: PPUSH
51226: CALL_OW 255
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: LD_INT 30
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 30
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PPUSH
51267: CALL_OW 72
51271: ST_TO_ADDR
// for i = 1 to hexes do
51272: LD_ADDR_VAR 0 9
51276: PUSH
51277: DOUBLE
51278: LD_INT 1
51280: DEC
51281: ST_TO_ADDR
51282: LD_VAR 0 14
51286: PUSH
51287: FOR_TO
51288: IFFALSE 51964
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51290: LD_ADDR_VAR 0 13
51294: PUSH
51295: LD_VAR 0 14
51299: PUSH
51300: LD_VAR 0 9
51304: ARRAY
51305: PUSH
51306: LD_INT 1
51308: ARRAY
51309: PPUSH
51310: LD_VAR 0 14
51314: PUSH
51315: LD_VAR 0 9
51319: ARRAY
51320: PUSH
51321: LD_INT 2
51323: ARRAY
51324: PPUSH
51325: CALL_OW 428
51329: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51330: LD_VAR 0 14
51334: PUSH
51335: LD_VAR 0 9
51339: ARRAY
51340: PUSH
51341: LD_INT 1
51343: ARRAY
51344: PPUSH
51345: LD_VAR 0 14
51349: PUSH
51350: LD_VAR 0 9
51354: ARRAY
51355: PUSH
51356: LD_INT 2
51358: ARRAY
51359: PPUSH
51360: CALL_OW 351
51364: PUSH
51365: LD_VAR 0 14
51369: PUSH
51370: LD_VAR 0 9
51374: ARRAY
51375: PUSH
51376: LD_INT 1
51378: ARRAY
51379: PPUSH
51380: LD_VAR 0 14
51384: PUSH
51385: LD_VAR 0 9
51389: ARRAY
51390: PUSH
51391: LD_INT 2
51393: ARRAY
51394: PPUSH
51395: CALL_OW 488
51399: NOT
51400: OR
51401: PUSH
51402: LD_VAR 0 13
51406: PPUSH
51407: CALL_OW 247
51411: PUSH
51412: LD_INT 3
51414: EQUAL
51415: OR
51416: IFFALSE 51422
// exit ;
51418: POP
51419: POP
51420: GO 51966
// if not tmp then
51422: LD_VAR 0 13
51426: NOT
51427: IFFALSE 51431
// continue ;
51429: GO 51287
// result := true ;
51431: LD_ADDR_VAR 0 8
51435: PUSH
51436: LD_INT 1
51438: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51439: LD_VAR 0 6
51443: PUSH
51444: LD_VAR 0 13
51448: PPUSH
51449: CALL_OW 247
51453: PUSH
51454: LD_INT 2
51456: EQUAL
51457: AND
51458: PUSH
51459: LD_VAR 0 13
51463: PPUSH
51464: CALL_OW 263
51468: PUSH
51469: LD_INT 1
51471: EQUAL
51472: AND
51473: IFFALSE 51637
// begin if IsDrivenBy ( tmp ) then
51475: LD_VAR 0 13
51479: PPUSH
51480: CALL_OW 311
51484: IFFALSE 51488
// continue ;
51486: GO 51287
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51488: LD_VAR 0 6
51492: PPUSH
51493: LD_INT 3
51495: PUSH
51496: LD_INT 60
51498: PUSH
51499: EMPTY
51500: LIST
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 3
51508: PUSH
51509: LD_INT 55
51511: PUSH
51512: EMPTY
51513: LIST
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PPUSH
51523: CALL_OW 72
51527: IFFALSE 51635
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51529: LD_ADDR_VAR 0 18
51533: PUSH
51534: LD_VAR 0 6
51538: PPUSH
51539: LD_INT 3
51541: PUSH
51542: LD_INT 60
51544: PUSH
51545: EMPTY
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 3
51554: PUSH
51555: LD_INT 55
51557: PUSH
51558: EMPTY
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PPUSH
51569: CALL_OW 72
51573: PUSH
51574: LD_INT 1
51576: ARRAY
51577: ST_TO_ADDR
// if IsInUnit ( driver ) then
51578: LD_VAR 0 18
51582: PPUSH
51583: CALL_OW 310
51587: IFFALSE 51598
// ComExit ( driver ) ;
51589: LD_VAR 0 18
51593: PPUSH
51594: CALL 76331 0 1
// AddComEnterUnit ( driver , tmp ) ;
51598: LD_VAR 0 18
51602: PPUSH
51603: LD_VAR 0 13
51607: PPUSH
51608: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51612: LD_VAR 0 18
51616: PPUSH
51617: LD_VAR 0 7
51621: PPUSH
51622: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51626: LD_VAR 0 18
51630: PPUSH
51631: CALL_OW 181
// end ; continue ;
51635: GO 51287
// end ; if not cleaners or not tmp in cleaners then
51637: LD_VAR 0 6
51641: NOT
51642: PUSH
51643: LD_VAR 0 13
51647: PUSH
51648: LD_VAR 0 6
51652: IN
51653: NOT
51654: OR
51655: IFFALSE 51962
// begin if dep then
51657: LD_VAR 0 17
51661: IFFALSE 51797
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51663: LD_ADDR_VAR 0 16
51667: PUSH
51668: LD_VAR 0 17
51672: PUSH
51673: LD_INT 1
51675: ARRAY
51676: PPUSH
51677: CALL_OW 250
51681: PPUSH
51682: LD_VAR 0 17
51686: PUSH
51687: LD_INT 1
51689: ARRAY
51690: PPUSH
51691: CALL_OW 254
51695: PPUSH
51696: LD_INT 5
51698: PPUSH
51699: CALL_OW 272
51703: PUSH
51704: LD_VAR 0 17
51708: PUSH
51709: LD_INT 1
51711: ARRAY
51712: PPUSH
51713: CALL_OW 251
51717: PPUSH
51718: LD_VAR 0 17
51722: PUSH
51723: LD_INT 1
51725: ARRAY
51726: PPUSH
51727: CALL_OW 254
51731: PPUSH
51732: LD_INT 5
51734: PPUSH
51735: CALL_OW 273
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51744: LD_VAR 0 16
51748: PUSH
51749: LD_INT 1
51751: ARRAY
51752: PPUSH
51753: LD_VAR 0 16
51757: PUSH
51758: LD_INT 2
51760: ARRAY
51761: PPUSH
51762: CALL_OW 488
51766: IFFALSE 51797
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51768: LD_VAR 0 13
51772: PPUSH
51773: LD_VAR 0 16
51777: PUSH
51778: LD_INT 1
51780: ARRAY
51781: PPUSH
51782: LD_VAR 0 16
51786: PUSH
51787: LD_INT 2
51789: ARRAY
51790: PPUSH
51791: CALL_OW 111
// continue ;
51795: GO 51287
// end ; end ; r := GetDir ( tmp ) ;
51797: LD_ADDR_VAR 0 15
51801: PUSH
51802: LD_VAR 0 13
51806: PPUSH
51807: CALL_OW 254
51811: ST_TO_ADDR
// if r = 5 then
51812: LD_VAR 0 15
51816: PUSH
51817: LD_INT 5
51819: EQUAL
51820: IFFALSE 51830
// r := 0 ;
51822: LD_ADDR_VAR 0 15
51826: PUSH
51827: LD_INT 0
51829: ST_TO_ADDR
// for j = r to 5 do
51830: LD_ADDR_VAR 0 10
51834: PUSH
51835: DOUBLE
51836: LD_VAR 0 15
51840: DEC
51841: ST_TO_ADDR
51842: LD_INT 5
51844: PUSH
51845: FOR_TO
51846: IFFALSE 51960
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51848: LD_ADDR_VAR 0 11
51852: PUSH
51853: LD_VAR 0 13
51857: PPUSH
51858: CALL_OW 250
51862: PPUSH
51863: LD_VAR 0 10
51867: PPUSH
51868: LD_INT 2
51870: PPUSH
51871: CALL_OW 272
51875: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51876: LD_ADDR_VAR 0 12
51880: PUSH
51881: LD_VAR 0 13
51885: PPUSH
51886: CALL_OW 251
51890: PPUSH
51891: LD_VAR 0 10
51895: PPUSH
51896: LD_INT 2
51898: PPUSH
51899: CALL_OW 273
51903: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51904: LD_VAR 0 11
51908: PPUSH
51909: LD_VAR 0 12
51913: PPUSH
51914: CALL_OW 488
51918: PUSH
51919: LD_VAR 0 11
51923: PPUSH
51924: LD_VAR 0 12
51928: PPUSH
51929: CALL_OW 428
51933: NOT
51934: AND
51935: IFFALSE 51958
// begin ComMoveXY ( tmp , _x , _y ) ;
51937: LD_VAR 0 13
51941: PPUSH
51942: LD_VAR 0 11
51946: PPUSH
51947: LD_VAR 0 12
51951: PPUSH
51952: CALL_OW 111
// break ;
51956: GO 51960
// end ; end ;
51958: GO 51845
51960: POP
51961: POP
// end ; end ;
51962: GO 51287
51964: POP
51965: POP
// end ;
51966: LD_VAR 0 8
51970: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51971: LD_INT 0
51973: PPUSH
// result := true ;
51974: LD_ADDR_VAR 0 3
51978: PUSH
51979: LD_INT 1
51981: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51982: LD_VAR 0 2
51986: PUSH
51987: LD_INT 24
51989: DOUBLE
51990: EQUAL
51991: IFTRUE 52001
51993: LD_INT 33
51995: DOUBLE
51996: EQUAL
51997: IFTRUE 52001
51999: GO 52026
52001: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52002: LD_ADDR_VAR 0 3
52006: PUSH
52007: LD_INT 32
52009: PPUSH
52010: LD_VAR 0 1
52014: PPUSH
52015: CALL_OW 321
52019: PUSH
52020: LD_INT 2
52022: EQUAL
52023: ST_TO_ADDR
52024: GO 52346
52026: LD_INT 20
52028: DOUBLE
52029: EQUAL
52030: IFTRUE 52034
52032: GO 52059
52034: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52035: LD_ADDR_VAR 0 3
52039: PUSH
52040: LD_INT 6
52042: PPUSH
52043: LD_VAR 0 1
52047: PPUSH
52048: CALL_OW 321
52052: PUSH
52053: LD_INT 2
52055: EQUAL
52056: ST_TO_ADDR
52057: GO 52346
52059: LD_INT 22
52061: DOUBLE
52062: EQUAL
52063: IFTRUE 52073
52065: LD_INT 36
52067: DOUBLE
52068: EQUAL
52069: IFTRUE 52073
52071: GO 52098
52073: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52074: LD_ADDR_VAR 0 3
52078: PUSH
52079: LD_INT 15
52081: PPUSH
52082: LD_VAR 0 1
52086: PPUSH
52087: CALL_OW 321
52091: PUSH
52092: LD_INT 2
52094: EQUAL
52095: ST_TO_ADDR
52096: GO 52346
52098: LD_INT 30
52100: DOUBLE
52101: EQUAL
52102: IFTRUE 52106
52104: GO 52131
52106: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52107: LD_ADDR_VAR 0 3
52111: PUSH
52112: LD_INT 20
52114: PPUSH
52115: LD_VAR 0 1
52119: PPUSH
52120: CALL_OW 321
52124: PUSH
52125: LD_INT 2
52127: EQUAL
52128: ST_TO_ADDR
52129: GO 52346
52131: LD_INT 28
52133: DOUBLE
52134: EQUAL
52135: IFTRUE 52145
52137: LD_INT 21
52139: DOUBLE
52140: EQUAL
52141: IFTRUE 52145
52143: GO 52170
52145: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52146: LD_ADDR_VAR 0 3
52150: PUSH
52151: LD_INT 21
52153: PPUSH
52154: LD_VAR 0 1
52158: PPUSH
52159: CALL_OW 321
52163: PUSH
52164: LD_INT 2
52166: EQUAL
52167: ST_TO_ADDR
52168: GO 52346
52170: LD_INT 16
52172: DOUBLE
52173: EQUAL
52174: IFTRUE 52178
52176: GO 52205
52178: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52179: LD_ADDR_VAR 0 3
52183: PUSH
52184: LD_EXP 62
52188: PPUSH
52189: LD_VAR 0 1
52193: PPUSH
52194: CALL_OW 321
52198: PUSH
52199: LD_INT 2
52201: EQUAL
52202: ST_TO_ADDR
52203: GO 52346
52205: LD_INT 19
52207: DOUBLE
52208: EQUAL
52209: IFTRUE 52219
52211: LD_INT 23
52213: DOUBLE
52214: EQUAL
52215: IFTRUE 52219
52217: GO 52246
52219: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52220: LD_ADDR_VAR 0 3
52224: PUSH
52225: LD_EXP 61
52229: PPUSH
52230: LD_VAR 0 1
52234: PPUSH
52235: CALL_OW 321
52239: PUSH
52240: LD_INT 2
52242: EQUAL
52243: ST_TO_ADDR
52244: GO 52346
52246: LD_INT 17
52248: DOUBLE
52249: EQUAL
52250: IFTRUE 52254
52252: GO 52279
52254: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52255: LD_ADDR_VAR 0 3
52259: PUSH
52260: LD_INT 39
52262: PPUSH
52263: LD_VAR 0 1
52267: PPUSH
52268: CALL_OW 321
52272: PUSH
52273: LD_INT 2
52275: EQUAL
52276: ST_TO_ADDR
52277: GO 52346
52279: LD_INT 18
52281: DOUBLE
52282: EQUAL
52283: IFTRUE 52287
52285: GO 52312
52287: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52288: LD_ADDR_VAR 0 3
52292: PUSH
52293: LD_INT 40
52295: PPUSH
52296: LD_VAR 0 1
52300: PPUSH
52301: CALL_OW 321
52305: PUSH
52306: LD_INT 2
52308: EQUAL
52309: ST_TO_ADDR
52310: GO 52346
52312: LD_INT 27
52314: DOUBLE
52315: EQUAL
52316: IFTRUE 52320
52318: GO 52345
52320: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52321: LD_ADDR_VAR 0 3
52325: PUSH
52326: LD_INT 35
52328: PPUSH
52329: LD_VAR 0 1
52333: PPUSH
52334: CALL_OW 321
52338: PUSH
52339: LD_INT 2
52341: EQUAL
52342: ST_TO_ADDR
52343: GO 52346
52345: POP
// end ;
52346: LD_VAR 0 3
52350: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52351: LD_INT 0
52353: PPUSH
52354: PPUSH
52355: PPUSH
52356: PPUSH
52357: PPUSH
52358: PPUSH
52359: PPUSH
52360: PPUSH
52361: PPUSH
52362: PPUSH
52363: PPUSH
// result := false ;
52364: LD_ADDR_VAR 0 6
52368: PUSH
52369: LD_INT 0
52371: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52372: LD_VAR 0 1
52376: NOT
52377: PUSH
52378: LD_VAR 0 1
52382: PPUSH
52383: CALL_OW 266
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: IN
52398: NOT
52399: OR
52400: PUSH
52401: LD_VAR 0 2
52405: NOT
52406: OR
52407: PUSH
52408: LD_VAR 0 5
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: LD_INT 4
52427: PUSH
52428: LD_INT 5
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: IN
52439: NOT
52440: OR
52441: PUSH
52442: LD_VAR 0 3
52446: PPUSH
52447: LD_VAR 0 4
52451: PPUSH
52452: CALL_OW 488
52456: NOT
52457: OR
52458: IFFALSE 52462
// exit ;
52460: GO 53198
// side := GetSide ( depot ) ;
52462: LD_ADDR_VAR 0 9
52466: PUSH
52467: LD_VAR 0 1
52471: PPUSH
52472: CALL_OW 255
52476: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52477: LD_VAR 0 9
52481: PPUSH
52482: LD_VAR 0 2
52486: PPUSH
52487: CALL 51971 0 2
52491: NOT
52492: IFFALSE 52496
// exit ;
52494: GO 53198
// pom := GetBase ( depot ) ;
52496: LD_ADDR_VAR 0 10
52500: PUSH
52501: LD_VAR 0 1
52505: PPUSH
52506: CALL_OW 274
52510: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52511: LD_ADDR_VAR 0 11
52515: PUSH
52516: LD_VAR 0 2
52520: PPUSH
52521: LD_VAR 0 1
52525: PPUSH
52526: CALL_OW 248
52530: PPUSH
52531: CALL_OW 450
52535: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52536: LD_VAR 0 10
52540: PPUSH
52541: LD_INT 1
52543: PPUSH
52544: CALL_OW 275
52548: PUSH
52549: LD_VAR 0 11
52553: PUSH
52554: LD_INT 1
52556: ARRAY
52557: GREATEREQUAL
52558: PUSH
52559: LD_VAR 0 10
52563: PPUSH
52564: LD_INT 2
52566: PPUSH
52567: CALL_OW 275
52571: PUSH
52572: LD_VAR 0 11
52576: PUSH
52577: LD_INT 2
52579: ARRAY
52580: GREATEREQUAL
52581: AND
52582: PUSH
52583: LD_VAR 0 10
52587: PPUSH
52588: LD_INT 3
52590: PPUSH
52591: CALL_OW 275
52595: PUSH
52596: LD_VAR 0 11
52600: PUSH
52601: LD_INT 3
52603: ARRAY
52604: GREATEREQUAL
52605: AND
52606: NOT
52607: IFFALSE 52611
// exit ;
52609: GO 53198
// if GetBType ( depot ) = b_depot then
52611: LD_VAR 0 1
52615: PPUSH
52616: CALL_OW 266
52620: PUSH
52621: LD_INT 0
52623: EQUAL
52624: IFFALSE 52636
// dist := 28 else
52626: LD_ADDR_VAR 0 14
52630: PUSH
52631: LD_INT 28
52633: ST_TO_ADDR
52634: GO 52644
// dist := 36 ;
52636: LD_ADDR_VAR 0 14
52640: PUSH
52641: LD_INT 36
52643: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52644: LD_VAR 0 1
52648: PPUSH
52649: LD_VAR 0 3
52653: PPUSH
52654: LD_VAR 0 4
52658: PPUSH
52659: CALL_OW 297
52663: PUSH
52664: LD_VAR 0 14
52668: GREATER
52669: IFFALSE 52673
// exit ;
52671: GO 53198
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52673: LD_ADDR_VAR 0 12
52677: PUSH
52678: LD_VAR 0 2
52682: PPUSH
52683: LD_VAR 0 3
52687: PPUSH
52688: LD_VAR 0 4
52692: PPUSH
52693: LD_VAR 0 5
52697: PPUSH
52698: LD_VAR 0 1
52702: PPUSH
52703: CALL_OW 248
52707: PPUSH
52708: LD_INT 0
52710: PPUSH
52711: CALL 53203 0 6
52715: ST_TO_ADDR
// if not hexes then
52716: LD_VAR 0 12
52720: NOT
52721: IFFALSE 52725
// exit ;
52723: GO 53198
// hex := GetHexInfo ( x , y ) ;
52725: LD_ADDR_VAR 0 15
52729: PUSH
52730: LD_VAR 0 3
52734: PPUSH
52735: LD_VAR 0 4
52739: PPUSH
52740: CALL_OW 546
52744: ST_TO_ADDR
// if hex [ 1 ] then
52745: LD_VAR 0 15
52749: PUSH
52750: LD_INT 1
52752: ARRAY
52753: IFFALSE 52757
// exit ;
52755: GO 53198
// height := hex [ 2 ] ;
52757: LD_ADDR_VAR 0 13
52761: PUSH
52762: LD_VAR 0 15
52766: PUSH
52767: LD_INT 2
52769: ARRAY
52770: ST_TO_ADDR
// for i = 1 to hexes do
52771: LD_ADDR_VAR 0 7
52775: PUSH
52776: DOUBLE
52777: LD_INT 1
52779: DEC
52780: ST_TO_ADDR
52781: LD_VAR 0 12
52785: PUSH
52786: FOR_TO
52787: IFFALSE 53117
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52789: LD_VAR 0 12
52793: PUSH
52794: LD_VAR 0 7
52798: ARRAY
52799: PUSH
52800: LD_INT 1
52802: ARRAY
52803: PPUSH
52804: LD_VAR 0 12
52808: PUSH
52809: LD_VAR 0 7
52813: ARRAY
52814: PUSH
52815: LD_INT 2
52817: ARRAY
52818: PPUSH
52819: CALL_OW 488
52823: NOT
52824: PUSH
52825: LD_VAR 0 12
52829: PUSH
52830: LD_VAR 0 7
52834: ARRAY
52835: PUSH
52836: LD_INT 1
52838: ARRAY
52839: PPUSH
52840: LD_VAR 0 12
52844: PUSH
52845: LD_VAR 0 7
52849: ARRAY
52850: PUSH
52851: LD_INT 2
52853: ARRAY
52854: PPUSH
52855: CALL_OW 428
52859: PUSH
52860: LD_INT 0
52862: GREATER
52863: OR
52864: PUSH
52865: LD_VAR 0 12
52869: PUSH
52870: LD_VAR 0 7
52874: ARRAY
52875: PUSH
52876: LD_INT 1
52878: ARRAY
52879: PPUSH
52880: LD_VAR 0 12
52884: PUSH
52885: LD_VAR 0 7
52889: ARRAY
52890: PUSH
52891: LD_INT 2
52893: ARRAY
52894: PPUSH
52895: CALL_OW 351
52899: OR
52900: IFFALSE 52906
// exit ;
52902: POP
52903: POP
52904: GO 53198
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52906: LD_ADDR_VAR 0 8
52910: PUSH
52911: LD_VAR 0 12
52915: PUSH
52916: LD_VAR 0 7
52920: ARRAY
52921: PUSH
52922: LD_INT 1
52924: ARRAY
52925: PPUSH
52926: LD_VAR 0 12
52930: PUSH
52931: LD_VAR 0 7
52935: ARRAY
52936: PUSH
52937: LD_INT 2
52939: ARRAY
52940: PPUSH
52941: CALL_OW 546
52945: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52946: LD_VAR 0 8
52950: PUSH
52951: LD_INT 1
52953: ARRAY
52954: PUSH
52955: LD_VAR 0 8
52959: PUSH
52960: LD_INT 2
52962: ARRAY
52963: PUSH
52964: LD_VAR 0 13
52968: PUSH
52969: LD_INT 2
52971: PLUS
52972: GREATER
52973: OR
52974: PUSH
52975: LD_VAR 0 8
52979: PUSH
52980: LD_INT 2
52982: ARRAY
52983: PUSH
52984: LD_VAR 0 13
52988: PUSH
52989: LD_INT 2
52991: MINUS
52992: LESS
52993: OR
52994: PUSH
52995: LD_VAR 0 8
52999: PUSH
53000: LD_INT 3
53002: ARRAY
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 8
53009: PUSH
53010: LD_INT 9
53012: PUSH
53013: LD_INT 10
53015: PUSH
53016: LD_INT 11
53018: PUSH
53019: LD_INT 12
53021: PUSH
53022: LD_INT 13
53024: PUSH
53025: LD_INT 16
53027: PUSH
53028: LD_INT 17
53030: PUSH
53031: LD_INT 18
53033: PUSH
53034: LD_INT 19
53036: PUSH
53037: LD_INT 20
53039: PUSH
53040: LD_INT 21
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: IN
53058: NOT
53059: OR
53060: PUSH
53061: LD_VAR 0 8
53065: PUSH
53066: LD_INT 5
53068: ARRAY
53069: NOT
53070: OR
53071: PUSH
53072: LD_VAR 0 8
53076: PUSH
53077: LD_INT 6
53079: ARRAY
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: LD_INT 7
53089: PUSH
53090: LD_INT 9
53092: PUSH
53093: LD_INT 10
53095: PUSH
53096: LD_INT 11
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: IN
53107: NOT
53108: OR
53109: IFFALSE 53115
// exit ;
53111: POP
53112: POP
53113: GO 53198
// end ;
53115: GO 52786
53117: POP
53118: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53119: LD_VAR 0 9
53123: PPUSH
53124: LD_VAR 0 3
53128: PPUSH
53129: LD_VAR 0 4
53133: PPUSH
53134: LD_INT 20
53136: PPUSH
53137: CALL 45144 0 4
53141: PUSH
53142: LD_INT 4
53144: ARRAY
53145: IFFALSE 53149
// exit ;
53147: GO 53198
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53149: LD_VAR 0 2
53153: PUSH
53154: LD_INT 29
53156: PUSH
53157: LD_INT 30
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: IN
53164: PUSH
53165: LD_VAR 0 3
53169: PPUSH
53170: LD_VAR 0 4
53174: PPUSH
53175: LD_VAR 0 9
53179: PPUSH
53180: CALL_OW 440
53184: NOT
53185: AND
53186: IFFALSE 53190
// exit ;
53188: GO 53198
// result := true ;
53190: LD_ADDR_VAR 0 6
53194: PUSH
53195: LD_INT 1
53197: ST_TO_ADDR
// end ;
53198: LD_VAR 0 6
53202: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53203: LD_INT 0
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
53210: PPUSH
53211: PPUSH
53212: PPUSH
53213: PPUSH
53214: PPUSH
53215: PPUSH
53216: PPUSH
53217: PPUSH
53218: PPUSH
53219: PPUSH
53220: PPUSH
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
53225: PPUSH
53226: PPUSH
53227: PPUSH
53228: PPUSH
53229: PPUSH
53230: PPUSH
53231: PPUSH
53232: PPUSH
53233: PPUSH
53234: PPUSH
53235: PPUSH
53236: PPUSH
53237: PPUSH
53238: PPUSH
53239: PPUSH
53240: PPUSH
53241: PPUSH
53242: PPUSH
53243: PPUSH
53244: PPUSH
53245: PPUSH
53246: PPUSH
53247: PPUSH
53248: PPUSH
53249: PPUSH
53250: PPUSH
53251: PPUSH
53252: PPUSH
53253: PPUSH
53254: PPUSH
53255: PPUSH
53256: PPUSH
53257: PPUSH
53258: PPUSH
53259: PPUSH
53260: PPUSH
53261: PPUSH
53262: PPUSH
// result = [ ] ;
53263: LD_ADDR_VAR 0 7
53267: PUSH
53268: EMPTY
53269: ST_TO_ADDR
// temp_list = [ ] ;
53270: LD_ADDR_VAR 0 9
53274: PUSH
53275: EMPTY
53276: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53277: LD_VAR 0 4
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: LD_INT 3
53293: PUSH
53294: LD_INT 4
53296: PUSH
53297: LD_INT 5
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: IN
53308: NOT
53309: PUSH
53310: LD_VAR 0 1
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: IN
53325: PUSH
53326: LD_VAR 0 5
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: LD_INT 3
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: LIST
53344: IN
53345: NOT
53346: AND
53347: OR
53348: IFFALSE 53352
// exit ;
53350: GO 71743
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53352: LD_VAR 0 1
53356: PUSH
53357: LD_INT 6
53359: PUSH
53360: LD_INT 7
53362: PUSH
53363: LD_INT 8
53365: PUSH
53366: LD_INT 13
53368: PUSH
53369: LD_INT 12
53371: PUSH
53372: LD_INT 15
53374: PUSH
53375: LD_INT 11
53377: PUSH
53378: LD_INT 14
53380: PUSH
53381: LD_INT 10
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: IN
53395: IFFALSE 53405
// btype = b_lab ;
53397: LD_ADDR_VAR 0 1
53401: PUSH
53402: LD_INT 6
53404: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53405: LD_VAR 0 6
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: LIST
53423: IN
53424: NOT
53425: PUSH
53426: LD_VAR 0 1
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 2
53439: PUSH
53440: LD_INT 3
53442: PUSH
53443: LD_INT 6
53445: PUSH
53446: LD_INT 36
53448: PUSH
53449: LD_INT 4
53451: PUSH
53452: LD_INT 5
53454: PUSH
53455: LD_INT 31
53457: PUSH
53458: LD_INT 32
53460: PUSH
53461: LD_INT 33
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: IN
53477: NOT
53478: PUSH
53479: LD_VAR 0 6
53483: PUSH
53484: LD_INT 1
53486: EQUAL
53487: AND
53488: OR
53489: PUSH
53490: LD_VAR 0 1
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: IN
53505: NOT
53506: PUSH
53507: LD_VAR 0 6
53511: PUSH
53512: LD_INT 2
53514: EQUAL
53515: AND
53516: OR
53517: IFFALSE 53527
// mode = 0 ;
53519: LD_ADDR_VAR 0 6
53523: PUSH
53524: LD_INT 0
53526: ST_TO_ADDR
// case mode of 0 :
53527: LD_VAR 0 6
53531: PUSH
53532: LD_INT 0
53534: DOUBLE
53535: EQUAL
53536: IFTRUE 53540
53538: GO 64993
53540: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53541: LD_ADDR_VAR 0 11
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 3
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53734: LD_ADDR_VAR 0 12
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 1
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 3
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53930: LD_ADDR_VAR 0 13
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: LD_INT 3
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: NEG
54102: PUSH
54103: LD_INT 3
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54129: LD_ADDR_VAR 0 14
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: LD_INT 2
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: LD_INT 3
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 3
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54325: LD_ADDR_VAR 0 15
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 3
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 3
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54518: LD_ADDR_VAR 0 16
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 3
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 3
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54711: LD_ADDR_VAR 0 17
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54941: LD_ADDR_VAR 0 18
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55171: LD_ADDR_VAR 0 19
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: LD_INT 2
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 2
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55401: LD_ADDR_VAR 0 20
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: LD_INT 2
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55631: LD_ADDR_VAR 0 21
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: LD_INT 2
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: LD_INT 2
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: LD_INT 2
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: LD_INT 2
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: LD_INT 2
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55861: LD_ADDR_VAR 0 22
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 2
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 2
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56091: LD_ADDR_VAR 0 23
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: LD_INT 2
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 2
56302: NEG
56303: PUSH
56304: LD_INT 3
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56371: LD_ADDR_VAR 0 24
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56647: LD_ADDR_VAR 0 25
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 3
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 3
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: LD_INT 3
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56921: LD_ADDR_VAR 0 26
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 2
57108: NEG
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57197: LD_ADDR_VAR 0 27
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57477: LD_ADDR_VAR 0 28
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 2
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: LD_INT 2
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: LD_INT 2
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: NEG
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 3
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 3
57724: NEG
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57759: LD_ADDR_VAR 0 29
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 2
57925: NEG
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: LD_INT 3
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 3
58003: NEG
58004: PUSH
58005: LD_INT 2
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58038: LD_ADDR_VAR 0 30
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: NEG
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: LD_INT 2
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 3
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 2
58260: PUSH
58261: LD_INT 3
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: NEG
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 3
58281: NEG
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58316: LD_ADDR_VAR 0 31
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: LD_INT 2
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 3
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 3
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 3
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 3
58559: NEG
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58594: LD_ADDR_VAR 0 32
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: LD_INT 2
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: LD_INT 2
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: LD_INT 2
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 3
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 3
58837: NEG
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58872: LD_ADDR_VAR 0 33
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: LD_INT 1
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: LD_INT 1
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: LD_INT 2
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 2
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: LD_INT 2
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 3
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: LD_INT 3
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 3
59116: NEG
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59151: LD_ADDR_VAR 0 34
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: LD_INT 2
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 2
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 2
59307: NEG
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 2
59318: NEG
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: LD_INT 3
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 2
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 3
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: PUSH
59376: LD_INT 3
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 2
59385: NEG
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59431: LD_ADDR_VAR 0 35
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: NEG
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59543: LD_ADDR_VAR 0 36
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59655: LD_ADDR_VAR 0 37
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59767: LD_ADDR_VAR 0 38
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 1
59836: NEG
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59879: LD_ADDR_VAR 0 39
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: LD_INT 2
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59991: LD_ADDR_VAR 0 40
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60103: LD_ADDR_VAR 0 41
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 2
60281: NEG
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 2
60293: NEG
60294: PUSH
60295: LD_INT 3
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: PUSH
60347: LD_INT 3
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: LD_INT 3
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 3
60377: NEG
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 3
60388: NEG
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 3
60412: NEG
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60453: LD_ADDR_VAR 0 42
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 2
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 2
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 2
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 2
60631: NEG
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: NEG
60644: PUSH
60645: LD_INT 3
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: LD_INT 3
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 3
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: LD_INT 2
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 3
60699: PUSH
60700: LD_INT 3
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: LD_INT 3
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 3
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 3
60750: NEG
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 3
60762: NEG
60763: PUSH
60764: LD_INT 3
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60803: LD_ADDR_VAR 0 43
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: LD_INT 2
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 2
60928: PUSH
60929: LD_INT 1
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 0
60948: PUSH
60949: LD_INT 2
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 2
60969: NEG
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: LD_INT 3
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: LD_INT 3
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: LD_INT 2
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 3
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 3
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: LD_INT 3
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: NEG
61078: PUSH
61079: LD_INT 2
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: NEG
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61151: LD_ADDR_VAR 0 44
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: LD_INT 1
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: NEG
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: LD_INT 2
61236: NEG
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 2
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: NEG
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 2
61317: NEG
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: LD_INT 2
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: LD_INT 3
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 3
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 3
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 3
61384: PUSH
61385: LD_INT 2
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 3
61394: PUSH
61395: LD_INT 3
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 2
61404: PUSH
61405: LD_INT 3
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 3
61425: NEG
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 3
61436: NEG
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 3
61448: NEG
61449: PUSH
61450: LD_INT 2
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 3
61460: NEG
61461: PUSH
61462: LD_INT 3
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61501: LD_ADDR_VAR 0 45
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 0
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: LD_INT 2
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 2
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: LD_INT 2
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: LD_INT 2
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 2
61679: NEG
61680: PUSH
61681: LD_INT 2
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: LD_INT 3
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: LD_INT 3
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: LD_INT 3
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 2
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 3
61737: PUSH
61738: LD_INT 2
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 3
61747: PUSH
61748: LD_INT 3
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: LD_INT 3
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: LD_INT 3
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 3
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 2
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 3
61798: NEG
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 3
61810: NEG
61811: PUSH
61812: LD_INT 3
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61851: LD_ADDR_VAR 0 46
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 1
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 1
61920: NEG
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: LD_INT 2
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 0
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 2
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 0
61996: PUSH
61997: LD_INT 2
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 2
62017: NEG
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 2
62028: NEG
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: LD_INT 3
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: LD_INT 3
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 1
62063: PUSH
62064: LD_INT 2
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 2
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 3
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 3
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: LD_INT 3
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: LD_INT 3
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: LD_INT 2
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 3
62147: NEG
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 3
62158: NEG
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62199: LD_ADDR_VAR 0 47
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 1
62268: NEG
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: LD_INT 2
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 2
62314: NEG
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: NEG
62327: PUSH
62328: LD_INT 2
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62350: LD_ADDR_VAR 0 48
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: LD_INT 2
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 2
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62497: LD_ADDR_VAR 0 49
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: PUSH
62536: LD_INT 1
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 1
62566: NEG
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62641: LD_ADDR_VAR 0 50
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: LD_INT 1
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: NEG
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 2
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62785: LD_ADDR_VAR 0 51
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 1
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: LD_INT 1
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: LD_INT 2
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: LD_INT 2
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 2
62897: NEG
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 2
62908: NEG
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62932: LD_ADDR_VAR 0 52
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: LD_INT 1
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 1
62990: NEG
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 1
63001: NEG
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: LD_INT 2
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 1
63025: NEG
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 2
63036: NEG
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 2
63047: NEG
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 2
63059: NEG
63060: PUSH
63061: LD_INT 2
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63083: LD_ADDR_VAR 0 53
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: PUSH
63154: LD_INT 1
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: LD_INT 2
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: LD_INT 2
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 2
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 2
63218: PUSH
63219: LD_INT 2
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 2
63259: NEG
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 2
63270: NEG
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 2
63282: NEG
63283: PUSH
63284: LD_INT 2
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63313: LD_ADDR_VAR 0 54
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: LD_INT 0
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: LD_INT 2
63398: NEG
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: LD_INT 2
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 2
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 2
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 2
63448: PUSH
63449: LD_INT 2
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 2
63489: NEG
63490: PUSH
63491: LD_INT 0
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 2
63500: NEG
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: LD_INT 2
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63543: LD_ADDR_VAR 0 55
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: LD_INT 1
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 1
63612: NEG
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: LD_INT 2
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 2
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 2
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 2
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 2
63678: PUSH
63679: LD_INT 2
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: LD_INT 2
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: LD_INT 2
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: LD_INT 1
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 2
63719: NEG
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 2
63730: NEG
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: LD_INT 2
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63773: LD_ADDR_VAR 0 56
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 0
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: LD_INT 2
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: LD_INT 2
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: LD_INT 1
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 2
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 2
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 2
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: LD_INT 2
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: LD_INT 2
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 2
63949: NEG
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 2
63960: NEG
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: LD_INT 2
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64003: LD_ADDR_VAR 0 57
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 0
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: LD_INT 1
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: NEG
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: LD_INT 2
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: LD_INT 2
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 2
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 2
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: PUSH
64139: LD_INT 2
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: LD_INT 2
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 2
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 2
64179: NEG
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 2
64202: NEG
64203: PUSH
64204: LD_INT 2
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64233: LD_ADDR_VAR 0 58
64237: PUSH
64238: LD_INT 0
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 0
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 1
64302: NEG
64303: PUSH
64304: LD_INT 1
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: LD_INT 2
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: LD_INT 2
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 2
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 2
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 2
64368: PUSH
64369: LD_INT 2
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 1
64378: PUSH
64379: LD_INT 2
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: LD_INT 2
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 2
64409: NEG
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 2
64432: NEG
64433: PUSH
64434: LD_INT 2
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64463: LD_ADDR_VAR 0 59
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: LD_INT 1
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: NEG
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64551: LD_ADDR_VAR 0 60
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: LD_INT 1
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64639: LD_ADDR_VAR 0 61
64643: PUSH
64644: LD_INT 0
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: LD_INT 1
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 1
64697: NEG
64698: PUSH
64699: LD_INT 0
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64727: LD_ADDR_VAR 0 62
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 1
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: LD_INT 1
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 1
64785: NEG
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: NEG
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64815: LD_ADDR_VAR 0 63
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 1
64873: NEG
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64903: LD_ADDR_VAR 0 64
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 1
64941: PUSH
64942: LD_INT 1
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: LD_INT 1
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: PUSH
64963: LD_INT 0
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: ST_TO_ADDR
// end ; 1 :
64991: GO 70888
64993: LD_INT 1
64995: DOUBLE
64996: EQUAL
64997: IFTRUE 65001
64999: GO 67624
65001: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65002: LD_ADDR_VAR 0 11
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: LD_INT 3
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 3
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: LD_INT 2
65035: NEG
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: LIST
65045: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65046: LD_ADDR_VAR 0 12
65050: PUSH
65051: LD_INT 2
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 3
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 3
65074: PUSH
65075: LD_INT 1
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65087: LD_ADDR_VAR 0 13
65091: PUSH
65092: LD_INT 3
65094: PUSH
65095: LD_INT 2
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: LD_INT 3
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: LD_INT 3
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: LIST
65126: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65127: LD_ADDR_VAR 0 14
65131: PUSH
65132: LD_INT 1
65134: PUSH
65135: LD_INT 3
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: LD_INT 3
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 1
65154: NEG
65155: PUSH
65156: LD_INT 2
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: LIST
65167: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65168: LD_ADDR_VAR 0 15
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: LD_INT 1
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 3
65186: NEG
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 3
65197: NEG
65198: PUSH
65199: LD_INT 1
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: LIST
65211: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65212: LD_ADDR_VAR 0 16
65216: PUSH
65217: LD_INT 2
65219: NEG
65220: PUSH
65221: LD_INT 3
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 3
65231: NEG
65232: PUSH
65233: LD_INT 2
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 3
65243: NEG
65244: PUSH
65245: LD_INT 3
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: LIST
65257: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65258: LD_ADDR_VAR 0 17
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: LD_INT 3
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 0
65277: PUSH
65278: LD_INT 3
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: PUSH
65289: LD_INT 2
65291: NEG
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: LIST
65301: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65302: LD_ADDR_VAR 0 18
65306: PUSH
65307: LD_INT 2
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 3
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: LD_INT 1
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: LIST
65342: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65343: LD_ADDR_VAR 0 19
65347: PUSH
65348: LD_INT 3
65350: PUSH
65351: LD_INT 2
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 3
65360: PUSH
65361: LD_INT 3
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 2
65370: PUSH
65371: LD_INT 3
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: LIST
65382: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65383: LD_ADDR_VAR 0 20
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: LD_INT 3
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 0
65400: PUSH
65401: LD_INT 3
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: NEG
65411: PUSH
65412: LD_INT 2
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: LIST
65423: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65424: LD_ADDR_VAR 0 21
65428: PUSH
65429: LD_INT 2
65431: NEG
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 3
65442: NEG
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 3
65453: NEG
65454: PUSH
65455: LD_INT 1
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: LIST
65467: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65468: LD_ADDR_VAR 0 22
65472: PUSH
65473: LD_INT 2
65475: NEG
65476: PUSH
65477: LD_INT 3
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 3
65487: NEG
65488: PUSH
65489: LD_INT 2
65491: NEG
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 3
65499: NEG
65500: PUSH
65501: LD_INT 3
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: LIST
65513: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65514: LD_ADDR_VAR 0 23
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: LD_INT 3
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 4
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 1
65544: PUSH
65545: LD_INT 3
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: LIST
65557: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65558: LD_ADDR_VAR 0 24
65562: PUSH
65563: LD_INT 3
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 3
65575: PUSH
65576: LD_INT 1
65578: NEG
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 4
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: LIST
65598: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65599: LD_ADDR_VAR 0 25
65603: PUSH
65604: LD_INT 3
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 4
65616: PUSH
65617: LD_INT 3
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 3
65626: PUSH
65627: LD_INT 4
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: LIST
65638: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65639: LD_ADDR_VAR 0 26
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: LD_INT 3
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: LD_INT 4
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: LD_INT 3
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: LIST
65679: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65680: LD_ADDR_VAR 0 27
65684: PUSH
65685: LD_INT 3
65687: NEG
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 3
65698: NEG
65699: PUSH
65700: LD_INT 1
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 4
65709: NEG
65710: PUSH
65711: LD_INT 1
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: LIST
65723: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65724: LD_ADDR_VAR 0 28
65728: PUSH
65729: LD_INT 3
65731: NEG
65732: PUSH
65733: LD_INT 3
65735: NEG
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 3
65743: NEG
65744: PUSH
65745: LD_INT 4
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 4
65755: NEG
65756: PUSH
65757: LD_INT 3
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: LIST
65769: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65770: LD_ADDR_VAR 0 29
65774: PUSH
65775: LD_INT 1
65777: NEG
65778: PUSH
65779: LD_INT 3
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: LD_INT 3
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: PUSH
65801: LD_INT 2
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: PUSH
65813: LD_INT 4
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: LD_INT 4
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 1
65834: PUSH
65835: LD_INT 3
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 1
65845: NEG
65846: PUSH
65847: LD_INT 5
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: LD_INT 5
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 1
65868: PUSH
65869: LD_INT 4
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: LD_INT 6
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: LD_INT 6
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: LD_INT 5
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65925: LD_ADDR_VAR 0 30
65929: PUSH
65930: LD_INT 2
65932: PUSH
65933: LD_INT 1
65935: NEG
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 3
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 3
65953: PUSH
65954: LD_INT 1
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 3
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 4
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 4
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 4
65994: PUSH
65995: LD_INT 1
65997: NEG
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 5
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 5
66015: PUSH
66016: LD_INT 1
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 5
66025: PUSH
66026: LD_INT 1
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 6
66036: PUSH
66037: LD_INT 0
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 6
66046: PUSH
66047: LD_INT 1
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66068: LD_ADDR_VAR 0 31
66072: PUSH
66073: LD_INT 3
66075: PUSH
66076: LD_INT 2
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 3
66085: PUSH
66086: LD_INT 3
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 2
66095: PUSH
66096: LD_INT 3
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 4
66105: PUSH
66106: LD_INT 3
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 4
66115: PUSH
66116: LD_INT 4
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 3
66125: PUSH
66126: LD_INT 4
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 5
66135: PUSH
66136: LD_INT 4
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 5
66145: PUSH
66146: LD_INT 5
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 4
66155: PUSH
66156: LD_INT 5
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 6
66165: PUSH
66166: LD_INT 5
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 6
66175: PUSH
66176: LD_INT 6
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 5
66185: PUSH
66186: LD_INT 6
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66207: LD_ADDR_VAR 0 32
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: LD_INT 3
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 0
66224: PUSH
66225: LD_INT 3
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 1
66234: NEG
66235: PUSH
66236: LD_INT 2
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 1
66245: PUSH
66246: LD_INT 4
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: LD_INT 4
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 1
66265: NEG
66266: PUSH
66267: LD_INT 3
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 1
66276: PUSH
66277: LD_INT 5
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: LD_INT 5
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 1
66296: NEG
66297: PUSH
66298: LD_INT 4
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: LD_INT 6
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: LD_INT 6
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 1
66327: NEG
66328: PUSH
66329: LD_INT 5
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66350: LD_ADDR_VAR 0 33
66354: PUSH
66355: LD_INT 2
66357: NEG
66358: PUSH
66359: LD_INT 1
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 3
66368: NEG
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 3
66379: NEG
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 3
66391: NEG
66392: PUSH
66393: LD_INT 1
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 4
66402: NEG
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 4
66413: NEG
66414: PUSH
66415: LD_INT 1
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 4
66425: NEG
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 5
66436: NEG
66437: PUSH
66438: LD_INT 0
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 5
66447: NEG
66448: PUSH
66449: LD_INT 1
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 5
66459: NEG
66460: PUSH
66461: LD_INT 1
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 6
66470: NEG
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 6
66481: NEG
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66505: LD_ADDR_VAR 0 34
66509: PUSH
66510: LD_INT 2
66512: NEG
66513: PUSH
66514: LD_INT 3
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 3
66524: NEG
66525: PUSH
66526: LD_INT 2
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 3
66536: NEG
66537: PUSH
66538: LD_INT 3
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 3
66548: NEG
66549: PUSH
66550: LD_INT 4
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 4
66560: NEG
66561: PUSH
66562: LD_INT 3
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 4
66572: NEG
66573: PUSH
66574: LD_INT 4
66576: NEG
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 4
66584: NEG
66585: PUSH
66586: LD_INT 5
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 5
66596: NEG
66597: PUSH
66598: LD_INT 4
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 5
66608: NEG
66609: PUSH
66610: LD_INT 5
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 5
66620: NEG
66621: PUSH
66622: LD_INT 6
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 6
66632: NEG
66633: PUSH
66634: LD_INT 5
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 6
66644: NEG
66645: PUSH
66646: LD_INT 6
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66668: LD_ADDR_VAR 0 41
66672: PUSH
66673: LD_INT 0
66675: PUSH
66676: LD_INT 2
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 1
66686: NEG
66687: PUSH
66688: LD_INT 3
66690: NEG
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 1
66698: PUSH
66699: LD_INT 2
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: LIST
66711: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66712: LD_ADDR_VAR 0 42
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: LD_INT 0
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 2
66729: PUSH
66730: LD_INT 1
66732: NEG
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 3
66740: PUSH
66741: LD_INT 1
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66753: LD_ADDR_VAR 0 43
66757: PUSH
66758: LD_INT 2
66760: PUSH
66761: LD_INT 2
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 3
66770: PUSH
66771: LD_INT 2
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 2
66780: PUSH
66781: LD_INT 3
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66793: LD_ADDR_VAR 0 44
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: LD_INT 2
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 1
66810: PUSH
66811: LD_INT 3
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 1
66820: NEG
66821: PUSH
66822: LD_INT 2
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66834: LD_ADDR_VAR 0 45
66838: PUSH
66839: LD_INT 2
66841: NEG
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 2
66852: NEG
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 3
66863: NEG
66864: PUSH
66865: LD_INT 1
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: LIST
66877: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66878: LD_ADDR_VAR 0 46
66882: PUSH
66883: LD_INT 2
66885: NEG
66886: PUSH
66887: LD_INT 2
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 2
66897: NEG
66898: PUSH
66899: LD_INT 3
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 3
66909: NEG
66910: PUSH
66911: LD_INT 2
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: LIST
66923: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66924: LD_ADDR_VAR 0 47
66928: PUSH
66929: LD_INT 2
66931: NEG
66932: PUSH
66933: LD_INT 3
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 1
66943: NEG
66944: PUSH
66945: LD_INT 3
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66957: LD_ADDR_VAR 0 48
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: LD_INT 2
66967: NEG
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 2
66975: PUSH
66976: LD_INT 1
66978: NEG
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66988: LD_ADDR_VAR 0 49
66992: PUSH
66993: LD_INT 3
66995: PUSH
66996: LD_INT 1
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 3
67005: PUSH
67006: LD_INT 2
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67017: LD_ADDR_VAR 0 50
67021: PUSH
67022: LD_INT 2
67024: PUSH
67025: LD_INT 3
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: LD_INT 3
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67046: LD_ADDR_VAR 0 51
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: LD_INT 2
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 2
67064: NEG
67065: PUSH
67066: LD_INT 1
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67077: LD_ADDR_VAR 0 52
67081: PUSH
67082: LD_INT 3
67084: NEG
67085: PUSH
67086: LD_INT 1
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 3
67096: NEG
67097: PUSH
67098: LD_INT 2
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67110: LD_ADDR_VAR 0 53
67114: PUSH
67115: LD_INT 1
67117: NEG
67118: PUSH
67119: LD_INT 3
67121: NEG
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 0
67129: PUSH
67130: LD_INT 3
67132: NEG
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: LD_INT 2
67143: NEG
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: LIST
67153: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67154: LD_ADDR_VAR 0 54
67158: PUSH
67159: LD_INT 2
67161: PUSH
67162: LD_INT 1
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 3
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 3
67182: PUSH
67183: LD_INT 1
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: LIST
67194: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67195: LD_ADDR_VAR 0 55
67199: PUSH
67200: LD_INT 3
67202: PUSH
67203: LD_INT 2
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 3
67212: PUSH
67213: LD_INT 3
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 2
67222: PUSH
67223: LD_INT 3
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: LIST
67234: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67235: LD_ADDR_VAR 0 56
67239: PUSH
67240: LD_INT 1
67242: PUSH
67243: LD_INT 3
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 0
67252: PUSH
67253: LD_INT 3
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 1
67262: NEG
67263: PUSH
67264: LD_INT 2
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: LIST
67275: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67276: LD_ADDR_VAR 0 57
67280: PUSH
67281: LD_INT 2
67283: NEG
67284: PUSH
67285: LD_INT 1
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 3
67294: NEG
67295: PUSH
67296: LD_INT 0
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 3
67305: NEG
67306: PUSH
67307: LD_INT 1
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: LIST
67319: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67320: LD_ADDR_VAR 0 58
67324: PUSH
67325: LD_INT 2
67327: NEG
67328: PUSH
67329: LD_INT 3
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: LD_INT 2
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 3
67351: NEG
67352: PUSH
67353: LD_INT 3
67355: NEG
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: LIST
67365: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67366: LD_ADDR_VAR 0 59
67370: PUSH
67371: LD_INT 1
67373: NEG
67374: PUSH
67375: LD_INT 2
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: LD_INT 2
67388: NEG
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 1
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: LIST
67409: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67410: LD_ADDR_VAR 0 60
67414: PUSH
67415: LD_INT 1
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 2
67428: PUSH
67429: LD_INT 0
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 2
67438: PUSH
67439: LD_INT 1
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: LIST
67450: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67451: LD_ADDR_VAR 0 61
67455: PUSH
67456: LD_INT 2
67458: PUSH
67459: LD_INT 1
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 2
67468: PUSH
67469: LD_INT 2
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: LD_INT 2
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: LIST
67490: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67491: LD_ADDR_VAR 0 62
67495: PUSH
67496: LD_INT 1
67498: PUSH
67499: LD_INT 2
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: LD_INT 2
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 1
67518: NEG
67519: PUSH
67520: LD_INT 1
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67532: LD_ADDR_VAR 0 63
67536: PUSH
67537: LD_INT 1
67539: NEG
67540: PUSH
67541: LD_INT 1
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 2
67550: NEG
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 2
67561: NEG
67562: PUSH
67563: LD_INT 1
67565: NEG
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: LIST
67575: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67576: LD_ADDR_VAR 0 64
67580: PUSH
67581: LD_INT 1
67583: NEG
67584: PUSH
67585: LD_INT 2
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 2
67595: NEG
67596: PUSH
67597: LD_INT 1
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 2
67607: NEG
67608: PUSH
67609: LD_INT 2
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: LIST
67621: ST_TO_ADDR
// end ; 2 :
67622: GO 70888
67624: LD_INT 2
67626: DOUBLE
67627: EQUAL
67628: IFTRUE 67632
67630: GO 70887
67632: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67633: LD_ADDR_VAR 0 29
67637: PUSH
67638: LD_INT 4
67640: PUSH
67641: LD_INT 0
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 4
67650: PUSH
67651: LD_INT 1
67653: NEG
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 5
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 5
67671: PUSH
67672: LD_INT 1
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 4
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 3
67691: PUSH
67692: LD_INT 0
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 3
67701: PUSH
67702: LD_INT 1
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 3
67712: PUSH
67713: LD_INT 2
67715: NEG
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 5
67723: PUSH
67724: LD_INT 2
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 3
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 3
67743: PUSH
67744: LD_INT 2
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 4
67753: PUSH
67754: LD_INT 3
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 4
67763: PUSH
67764: LD_INT 4
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 3
67773: PUSH
67774: LD_INT 4
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 2
67783: PUSH
67784: LD_INT 3
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: LD_INT 2
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 4
67803: PUSH
67804: LD_INT 2
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 2
67813: PUSH
67814: LD_INT 4
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: LD_INT 4
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: LD_INT 3
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 1
67843: PUSH
67844: LD_INT 4
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 1
67853: PUSH
67854: LD_INT 5
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 0
67863: PUSH
67864: LD_INT 5
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 1
67873: NEG
67874: PUSH
67875: LD_INT 4
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 1
67884: NEG
67885: PUSH
67886: LD_INT 3
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: LD_INT 5
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 2
67905: NEG
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 3
67916: NEG
67917: PUSH
67918: LD_INT 0
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 3
67927: NEG
67928: PUSH
67929: LD_INT 1
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 2
67939: NEG
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 2
67950: NEG
67951: PUSH
67952: LD_INT 1
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 3
67961: NEG
67962: PUSH
67963: LD_INT 1
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 4
67972: NEG
67973: PUSH
67974: LD_INT 0
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 4
67983: NEG
67984: PUSH
67985: LD_INT 1
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 4
67995: NEG
67996: PUSH
67997: LD_INT 2
67999: NEG
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 2
68007: NEG
68008: PUSH
68009: LD_INT 2
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 4
68018: NEG
68019: PUSH
68020: LD_INT 4
68022: NEG
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 4
68030: NEG
68031: PUSH
68032: LD_INT 5
68034: NEG
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 3
68042: NEG
68043: PUSH
68044: LD_INT 4
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 3
68054: NEG
68055: PUSH
68056: LD_INT 3
68058: NEG
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 4
68066: NEG
68067: PUSH
68068: LD_INT 3
68070: NEG
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 5
68078: NEG
68079: PUSH
68080: LD_INT 4
68082: NEG
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 5
68090: NEG
68091: PUSH
68092: LD_INT 5
68094: NEG
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 3
68102: NEG
68103: PUSH
68104: LD_INT 5
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 5
68114: NEG
68115: PUSH
68116: LD_INT 3
68118: NEG
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68171: LD_ADDR_VAR 0 30
68175: PUSH
68176: LD_INT 4
68178: PUSH
68179: LD_INT 4
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 4
68188: PUSH
68189: LD_INT 3
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 5
68198: PUSH
68199: LD_INT 4
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 5
68208: PUSH
68209: LD_INT 5
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 4
68218: PUSH
68219: LD_INT 5
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 3
68228: PUSH
68229: LD_INT 4
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 3
68238: PUSH
68239: LD_INT 3
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 5
68248: PUSH
68249: LD_INT 3
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 3
68258: PUSH
68259: LD_INT 5
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 0
68268: PUSH
68269: LD_INT 3
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: LD_INT 2
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 1
68288: PUSH
68289: LD_INT 3
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: LD_INT 4
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 0
68308: PUSH
68309: LD_INT 4
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 1
68318: NEG
68319: PUSH
68320: LD_INT 3
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 1
68329: NEG
68330: PUSH
68331: LD_INT 2
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 2
68340: PUSH
68341: LD_INT 4
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 2
68350: NEG
68351: PUSH
68352: LD_INT 2
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 4
68361: NEG
68362: PUSH
68363: LD_INT 0
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 4
68372: NEG
68373: PUSH
68374: LD_INT 1
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 3
68384: NEG
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 3
68395: NEG
68396: PUSH
68397: LD_INT 1
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 4
68406: NEG
68407: PUSH
68408: LD_INT 1
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 5
68417: NEG
68418: PUSH
68419: LD_INT 0
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 5
68428: NEG
68429: PUSH
68430: LD_INT 1
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 5
68440: NEG
68441: PUSH
68442: LD_INT 2
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 3
68452: NEG
68453: PUSH
68454: LD_INT 2
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 3
68463: NEG
68464: PUSH
68465: LD_INT 3
68467: NEG
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 3
68475: NEG
68476: PUSH
68477: LD_INT 4
68479: NEG
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 2
68487: NEG
68488: PUSH
68489: LD_INT 3
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 2
68499: NEG
68500: PUSH
68501: LD_INT 2
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 3
68511: NEG
68512: PUSH
68513: LD_INT 2
68515: NEG
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 4
68523: NEG
68524: PUSH
68525: LD_INT 3
68527: NEG
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 4
68535: NEG
68536: PUSH
68537: LD_INT 4
68539: NEG
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 2
68547: NEG
68548: PUSH
68549: LD_INT 4
68551: NEG
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 4
68559: NEG
68560: PUSH
68561: LD_INT 2
68563: NEG
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: LD_INT 4
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: LD_INT 5
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 1
68593: PUSH
68594: LD_INT 4
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 1
68604: PUSH
68605: LD_INT 3
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 0
68615: PUSH
68616: LD_INT 3
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 1
68626: NEG
68627: PUSH
68628: LD_INT 4
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 1
68638: NEG
68639: PUSH
68640: LD_INT 5
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 2
68650: PUSH
68651: LD_INT 3
68653: NEG
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 2
68661: NEG
68662: PUSH
68663: LD_INT 5
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68718: LD_ADDR_VAR 0 31
68722: PUSH
68723: LD_INT 0
68725: PUSH
68726: LD_INT 4
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: LD_INT 3
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 1
68745: PUSH
68746: LD_INT 4
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 1
68755: PUSH
68756: LD_INT 5
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 0
68765: PUSH
68766: LD_INT 5
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 1
68775: NEG
68776: PUSH
68777: LD_INT 4
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 1
68786: NEG
68787: PUSH
68788: LD_INT 3
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 2
68797: PUSH
68798: LD_INT 5
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 2
68807: NEG
68808: PUSH
68809: LD_INT 3
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 3
68818: NEG
68819: PUSH
68820: LD_INT 0
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 3
68829: NEG
68830: PUSH
68831: LD_INT 1
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 2
68841: NEG
68842: PUSH
68843: LD_INT 0
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 2
68852: NEG
68853: PUSH
68854: LD_INT 1
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 3
68863: NEG
68864: PUSH
68865: LD_INT 1
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 4
68874: NEG
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 4
68885: NEG
68886: PUSH
68887: LD_INT 1
68889: NEG
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 4
68897: NEG
68898: PUSH
68899: LD_INT 2
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 2
68909: NEG
68910: PUSH
68911: LD_INT 2
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 4
68920: NEG
68921: PUSH
68922: LD_INT 4
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 4
68932: NEG
68933: PUSH
68934: LD_INT 5
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 3
68944: NEG
68945: PUSH
68946: LD_INT 4
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 3
68956: NEG
68957: PUSH
68958: LD_INT 3
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 4
68968: NEG
68969: PUSH
68970: LD_INT 3
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 5
68980: NEG
68981: PUSH
68982: LD_INT 4
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 5
68992: NEG
68993: PUSH
68994: LD_INT 5
68996: NEG
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 3
69004: NEG
69005: PUSH
69006: LD_INT 5
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 5
69016: NEG
69017: PUSH
69018: LD_INT 3
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 0
69028: PUSH
69029: LD_INT 3
69031: NEG
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 0
69039: PUSH
69040: LD_INT 4
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 1
69050: PUSH
69051: LD_INT 3
69053: NEG
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 1
69061: PUSH
69062: LD_INT 2
69064: NEG
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 0
69072: PUSH
69073: LD_INT 2
69075: NEG
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 1
69083: NEG
69084: PUSH
69085: LD_INT 3
69087: NEG
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 1
69095: NEG
69096: PUSH
69097: LD_INT 4
69099: NEG
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 2
69107: PUSH
69108: LD_INT 2
69110: NEG
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 2
69118: NEG
69119: PUSH
69120: LD_INT 4
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 4
69130: PUSH
69131: LD_INT 0
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 4
69140: PUSH
69141: LD_INT 1
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 5
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 5
69161: PUSH
69162: LD_INT 1
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 4
69171: PUSH
69172: LD_INT 1
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 3
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 3
69191: PUSH
69192: LD_INT 1
69194: NEG
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 3
69202: PUSH
69203: LD_INT 2
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 5
69213: PUSH
69214: LD_INT 2
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69268: LD_ADDR_VAR 0 32
69272: PUSH
69273: LD_INT 4
69275: NEG
69276: PUSH
69277: LD_INT 0
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 4
69286: NEG
69287: PUSH
69288: LD_INT 1
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 3
69298: NEG
69299: PUSH
69300: LD_INT 0
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 3
69309: NEG
69310: PUSH
69311: LD_INT 1
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 4
69320: NEG
69321: PUSH
69322: LD_INT 1
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 5
69331: NEG
69332: PUSH
69333: LD_INT 0
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 5
69342: NEG
69343: PUSH
69344: LD_INT 1
69346: NEG
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 5
69354: NEG
69355: PUSH
69356: LD_INT 2
69358: NEG
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 3
69366: NEG
69367: PUSH
69368: LD_INT 2
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 3
69377: NEG
69378: PUSH
69379: LD_INT 3
69381: NEG
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 3
69389: NEG
69390: PUSH
69391: LD_INT 4
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 2
69401: NEG
69402: PUSH
69403: LD_INT 3
69405: NEG
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 2
69413: NEG
69414: PUSH
69415: LD_INT 2
69417: NEG
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 3
69425: NEG
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 4
69437: NEG
69438: PUSH
69439: LD_INT 3
69441: NEG
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 4
69449: NEG
69450: PUSH
69451: LD_INT 4
69453: NEG
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 2
69461: NEG
69462: PUSH
69463: LD_INT 4
69465: NEG
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 4
69473: NEG
69474: PUSH
69475: LD_INT 2
69477: NEG
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 0
69485: PUSH
69486: LD_INT 4
69488: NEG
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 0
69496: PUSH
69497: LD_INT 5
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 1
69507: PUSH
69508: LD_INT 4
69510: NEG
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 1
69518: PUSH
69519: LD_INT 3
69521: NEG
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 0
69529: PUSH
69530: LD_INT 3
69532: NEG
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 1
69540: NEG
69541: PUSH
69542: LD_INT 4
69544: NEG
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 1
69552: NEG
69553: PUSH
69554: LD_INT 5
69556: NEG
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 2
69564: PUSH
69565: LD_INT 3
69567: NEG
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 2
69575: NEG
69576: PUSH
69577: LD_INT 5
69579: NEG
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 3
69587: PUSH
69588: LD_INT 0
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 3
69597: PUSH
69598: LD_INT 1
69600: NEG
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 4
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 4
69618: PUSH
69619: LD_INT 1
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 3
69628: PUSH
69629: LD_INT 1
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 2
69638: PUSH
69639: LD_INT 0
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 2
69648: PUSH
69649: LD_INT 1
69651: NEG
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 2
69659: PUSH
69660: LD_INT 2
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 4
69670: PUSH
69671: LD_INT 2
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 4
69680: PUSH
69681: LD_INT 4
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 4
69690: PUSH
69691: LD_INT 3
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 5
69700: PUSH
69701: LD_INT 4
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 5
69710: PUSH
69711: LD_INT 5
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 4
69720: PUSH
69721: LD_INT 5
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 3
69730: PUSH
69731: LD_INT 4
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 3
69740: PUSH
69741: LD_INT 3
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 5
69750: PUSH
69751: LD_INT 3
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 3
69760: PUSH
69761: LD_INT 5
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69815: LD_ADDR_VAR 0 33
69819: PUSH
69820: LD_INT 4
69822: NEG
69823: PUSH
69824: LD_INT 4
69826: NEG
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 4
69834: NEG
69835: PUSH
69836: LD_INT 5
69838: NEG
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 3
69846: NEG
69847: PUSH
69848: LD_INT 4
69850: NEG
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 3
69858: NEG
69859: PUSH
69860: LD_INT 3
69862: NEG
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 4
69870: NEG
69871: PUSH
69872: LD_INT 3
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 5
69882: NEG
69883: PUSH
69884: LD_INT 4
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 5
69894: NEG
69895: PUSH
69896: LD_INT 5
69898: NEG
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 3
69906: NEG
69907: PUSH
69908: LD_INT 5
69910: NEG
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 5
69918: NEG
69919: PUSH
69920: LD_INT 3
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 0
69930: PUSH
69931: LD_INT 3
69933: NEG
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: LD_INT 4
69944: NEG
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 1
69952: PUSH
69953: LD_INT 3
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 1
69963: PUSH
69964: LD_INT 2
69966: NEG
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 0
69974: PUSH
69975: LD_INT 2
69977: NEG
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 1
69985: NEG
69986: PUSH
69987: LD_INT 3
69989: NEG
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 1
69997: NEG
69998: PUSH
69999: LD_INT 4
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 2
70009: PUSH
70010: LD_INT 2
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 2
70020: NEG
70021: PUSH
70022: LD_INT 4
70024: NEG
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 4
70032: PUSH
70033: LD_INT 0
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 4
70042: PUSH
70043: LD_INT 1
70045: NEG
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 5
70053: PUSH
70054: LD_INT 0
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 5
70063: PUSH
70064: LD_INT 1
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 4
70073: PUSH
70074: LD_INT 1
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 3
70083: PUSH
70084: LD_INT 0
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 3
70093: PUSH
70094: LD_INT 1
70096: NEG
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 3
70104: PUSH
70105: LD_INT 2
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 5
70115: PUSH
70116: LD_INT 2
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 3
70125: PUSH
70126: LD_INT 3
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 3
70135: PUSH
70136: LD_INT 2
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 4
70145: PUSH
70146: LD_INT 3
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 4
70155: PUSH
70156: LD_INT 4
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 3
70165: PUSH
70166: LD_INT 4
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 2
70175: PUSH
70176: LD_INT 3
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 2
70185: PUSH
70186: LD_INT 2
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 4
70195: PUSH
70196: LD_INT 2
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 2
70205: PUSH
70206: LD_INT 4
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 0
70215: PUSH
70216: LD_INT 4
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 0
70225: PUSH
70226: LD_INT 3
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 1
70235: PUSH
70236: LD_INT 4
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 1
70245: PUSH
70246: LD_INT 5
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 0
70255: PUSH
70256: LD_INT 5
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 1
70265: NEG
70266: PUSH
70267: LD_INT 4
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 1
70276: NEG
70277: PUSH
70278: LD_INT 3
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 2
70287: PUSH
70288: LD_INT 5
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 2
70297: NEG
70298: PUSH
70299: LD_INT 3
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70353: LD_ADDR_VAR 0 34
70357: PUSH
70358: LD_INT 0
70360: PUSH
70361: LD_INT 4
70363: NEG
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 5
70374: NEG
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 1
70382: PUSH
70383: LD_INT 4
70385: NEG
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 1
70393: PUSH
70394: LD_INT 3
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 0
70404: PUSH
70405: LD_INT 3
70407: NEG
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 1
70415: NEG
70416: PUSH
70417: LD_INT 4
70419: NEG
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 1
70427: NEG
70428: PUSH
70429: LD_INT 5
70431: NEG
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 2
70439: PUSH
70440: LD_INT 3
70442: NEG
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 2
70450: NEG
70451: PUSH
70452: LD_INT 5
70454: NEG
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 3
70462: PUSH
70463: LD_INT 0
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 3
70472: PUSH
70473: LD_INT 1
70475: NEG
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 4
70483: PUSH
70484: LD_INT 0
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 4
70493: PUSH
70494: LD_INT 1
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 3
70503: PUSH
70504: LD_INT 1
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 2
70513: PUSH
70514: LD_INT 0
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 2
70523: PUSH
70524: LD_INT 1
70526: NEG
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 2
70534: PUSH
70535: LD_INT 2
70537: NEG
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 4
70545: PUSH
70546: LD_INT 2
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 4
70555: PUSH
70556: LD_INT 4
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 4
70565: PUSH
70566: LD_INT 3
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 5
70575: PUSH
70576: LD_INT 4
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 5
70585: PUSH
70586: LD_INT 5
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 4
70595: PUSH
70596: LD_INT 5
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 3
70605: PUSH
70606: LD_INT 4
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 3
70615: PUSH
70616: LD_INT 3
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 5
70625: PUSH
70626: LD_INT 3
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 3
70635: PUSH
70636: LD_INT 5
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 0
70645: PUSH
70646: LD_INT 3
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 0
70655: PUSH
70656: LD_INT 2
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 1
70665: PUSH
70666: LD_INT 3
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 1
70675: PUSH
70676: LD_INT 4
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 0
70685: PUSH
70686: LD_INT 4
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 1
70695: NEG
70696: PUSH
70697: LD_INT 3
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 1
70706: NEG
70707: PUSH
70708: LD_INT 2
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 2
70717: PUSH
70718: LD_INT 4
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 2
70727: NEG
70728: PUSH
70729: LD_INT 2
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 4
70738: NEG
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 4
70749: NEG
70750: PUSH
70751: LD_INT 1
70753: NEG
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 3
70761: NEG
70762: PUSH
70763: LD_INT 0
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 3
70772: NEG
70773: PUSH
70774: LD_INT 1
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: PUSH
70781: LD_INT 4
70783: NEG
70784: PUSH
70785: LD_INT 1
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 5
70794: NEG
70795: PUSH
70796: LD_INT 0
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 5
70805: NEG
70806: PUSH
70807: LD_INT 1
70809: NEG
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 5
70817: NEG
70818: PUSH
70819: LD_INT 2
70821: NEG
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 3
70829: NEG
70830: PUSH
70831: LD_INT 2
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: ST_TO_ADDR
// end ; end ;
70885: GO 70888
70887: POP
// case btype of b_depot , b_warehouse :
70888: LD_VAR 0 1
70892: PUSH
70893: LD_INT 0
70895: DOUBLE
70896: EQUAL
70897: IFTRUE 70907
70899: LD_INT 1
70901: DOUBLE
70902: EQUAL
70903: IFTRUE 70907
70905: GO 71108
70907: POP
// case nation of nation_american :
70908: LD_VAR 0 5
70912: PUSH
70913: LD_INT 1
70915: DOUBLE
70916: EQUAL
70917: IFTRUE 70921
70919: GO 70977
70921: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70922: LD_ADDR_VAR 0 9
70926: PUSH
70927: LD_VAR 0 11
70931: PUSH
70932: LD_VAR 0 12
70936: PUSH
70937: LD_VAR 0 13
70941: PUSH
70942: LD_VAR 0 14
70946: PUSH
70947: LD_VAR 0 15
70951: PUSH
70952: LD_VAR 0 16
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: PUSH
70965: LD_VAR 0 4
70969: PUSH
70970: LD_INT 1
70972: PLUS
70973: ARRAY
70974: ST_TO_ADDR
70975: GO 71106
70977: LD_INT 2
70979: DOUBLE
70980: EQUAL
70981: IFTRUE 70985
70983: GO 71041
70985: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70986: LD_ADDR_VAR 0 9
70990: PUSH
70991: LD_VAR 0 17
70995: PUSH
70996: LD_VAR 0 18
71000: PUSH
71001: LD_VAR 0 19
71005: PUSH
71006: LD_VAR 0 20
71010: PUSH
71011: LD_VAR 0 21
71015: PUSH
71016: LD_VAR 0 22
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: PUSH
71029: LD_VAR 0 4
71033: PUSH
71034: LD_INT 1
71036: PLUS
71037: ARRAY
71038: ST_TO_ADDR
71039: GO 71106
71041: LD_INT 3
71043: DOUBLE
71044: EQUAL
71045: IFTRUE 71049
71047: GO 71105
71049: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71050: LD_ADDR_VAR 0 9
71054: PUSH
71055: LD_VAR 0 23
71059: PUSH
71060: LD_VAR 0 24
71064: PUSH
71065: LD_VAR 0 25
71069: PUSH
71070: LD_VAR 0 26
71074: PUSH
71075: LD_VAR 0 27
71079: PUSH
71080: LD_VAR 0 28
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: PUSH
71093: LD_VAR 0 4
71097: PUSH
71098: LD_INT 1
71100: PLUS
71101: ARRAY
71102: ST_TO_ADDR
71103: GO 71106
71105: POP
71106: GO 71661
71108: LD_INT 2
71110: DOUBLE
71111: EQUAL
71112: IFTRUE 71122
71114: LD_INT 3
71116: DOUBLE
71117: EQUAL
71118: IFTRUE 71122
71120: GO 71178
71122: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71123: LD_ADDR_VAR 0 9
71127: PUSH
71128: LD_VAR 0 29
71132: PUSH
71133: LD_VAR 0 30
71137: PUSH
71138: LD_VAR 0 31
71142: PUSH
71143: LD_VAR 0 32
71147: PUSH
71148: LD_VAR 0 33
71152: PUSH
71153: LD_VAR 0 34
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: PUSH
71166: LD_VAR 0 4
71170: PUSH
71171: LD_INT 1
71173: PLUS
71174: ARRAY
71175: ST_TO_ADDR
71176: GO 71661
71178: LD_INT 16
71180: DOUBLE
71181: EQUAL
71182: IFTRUE 71240
71184: LD_INT 17
71186: DOUBLE
71187: EQUAL
71188: IFTRUE 71240
71190: LD_INT 18
71192: DOUBLE
71193: EQUAL
71194: IFTRUE 71240
71196: LD_INT 19
71198: DOUBLE
71199: EQUAL
71200: IFTRUE 71240
71202: LD_INT 22
71204: DOUBLE
71205: EQUAL
71206: IFTRUE 71240
71208: LD_INT 20
71210: DOUBLE
71211: EQUAL
71212: IFTRUE 71240
71214: LD_INT 21
71216: DOUBLE
71217: EQUAL
71218: IFTRUE 71240
71220: LD_INT 23
71222: DOUBLE
71223: EQUAL
71224: IFTRUE 71240
71226: LD_INT 24
71228: DOUBLE
71229: EQUAL
71230: IFTRUE 71240
71232: LD_INT 25
71234: DOUBLE
71235: EQUAL
71236: IFTRUE 71240
71238: GO 71296
71240: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71241: LD_ADDR_VAR 0 9
71245: PUSH
71246: LD_VAR 0 35
71250: PUSH
71251: LD_VAR 0 36
71255: PUSH
71256: LD_VAR 0 37
71260: PUSH
71261: LD_VAR 0 38
71265: PUSH
71266: LD_VAR 0 39
71270: PUSH
71271: LD_VAR 0 40
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: PUSH
71284: LD_VAR 0 4
71288: PUSH
71289: LD_INT 1
71291: PLUS
71292: ARRAY
71293: ST_TO_ADDR
71294: GO 71661
71296: LD_INT 6
71298: DOUBLE
71299: EQUAL
71300: IFTRUE 71352
71302: LD_INT 7
71304: DOUBLE
71305: EQUAL
71306: IFTRUE 71352
71308: LD_INT 8
71310: DOUBLE
71311: EQUAL
71312: IFTRUE 71352
71314: LD_INT 13
71316: DOUBLE
71317: EQUAL
71318: IFTRUE 71352
71320: LD_INT 12
71322: DOUBLE
71323: EQUAL
71324: IFTRUE 71352
71326: LD_INT 15
71328: DOUBLE
71329: EQUAL
71330: IFTRUE 71352
71332: LD_INT 11
71334: DOUBLE
71335: EQUAL
71336: IFTRUE 71352
71338: LD_INT 14
71340: DOUBLE
71341: EQUAL
71342: IFTRUE 71352
71344: LD_INT 10
71346: DOUBLE
71347: EQUAL
71348: IFTRUE 71352
71350: GO 71408
71352: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71353: LD_ADDR_VAR 0 9
71357: PUSH
71358: LD_VAR 0 41
71362: PUSH
71363: LD_VAR 0 42
71367: PUSH
71368: LD_VAR 0 43
71372: PUSH
71373: LD_VAR 0 44
71377: PUSH
71378: LD_VAR 0 45
71382: PUSH
71383: LD_VAR 0 46
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: PUSH
71396: LD_VAR 0 4
71400: PUSH
71401: LD_INT 1
71403: PLUS
71404: ARRAY
71405: ST_TO_ADDR
71406: GO 71661
71408: LD_INT 36
71410: DOUBLE
71411: EQUAL
71412: IFTRUE 71416
71414: GO 71472
71416: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71417: LD_ADDR_VAR 0 9
71421: PUSH
71422: LD_VAR 0 47
71426: PUSH
71427: LD_VAR 0 48
71431: PUSH
71432: LD_VAR 0 49
71436: PUSH
71437: LD_VAR 0 50
71441: PUSH
71442: LD_VAR 0 51
71446: PUSH
71447: LD_VAR 0 52
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: PUSH
71460: LD_VAR 0 4
71464: PUSH
71465: LD_INT 1
71467: PLUS
71468: ARRAY
71469: ST_TO_ADDR
71470: GO 71661
71472: LD_INT 4
71474: DOUBLE
71475: EQUAL
71476: IFTRUE 71498
71478: LD_INT 5
71480: DOUBLE
71481: EQUAL
71482: IFTRUE 71498
71484: LD_INT 34
71486: DOUBLE
71487: EQUAL
71488: IFTRUE 71498
71490: LD_INT 37
71492: DOUBLE
71493: EQUAL
71494: IFTRUE 71498
71496: GO 71554
71498: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71499: LD_ADDR_VAR 0 9
71503: PUSH
71504: LD_VAR 0 53
71508: PUSH
71509: LD_VAR 0 54
71513: PUSH
71514: LD_VAR 0 55
71518: PUSH
71519: LD_VAR 0 56
71523: PUSH
71524: LD_VAR 0 57
71528: PUSH
71529: LD_VAR 0 58
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: PUSH
71542: LD_VAR 0 4
71546: PUSH
71547: LD_INT 1
71549: PLUS
71550: ARRAY
71551: ST_TO_ADDR
71552: GO 71661
71554: LD_INT 31
71556: DOUBLE
71557: EQUAL
71558: IFTRUE 71604
71560: LD_INT 32
71562: DOUBLE
71563: EQUAL
71564: IFTRUE 71604
71566: LD_INT 33
71568: DOUBLE
71569: EQUAL
71570: IFTRUE 71604
71572: LD_INT 27
71574: DOUBLE
71575: EQUAL
71576: IFTRUE 71604
71578: LD_INT 26
71580: DOUBLE
71581: EQUAL
71582: IFTRUE 71604
71584: LD_INT 28
71586: DOUBLE
71587: EQUAL
71588: IFTRUE 71604
71590: LD_INT 29
71592: DOUBLE
71593: EQUAL
71594: IFTRUE 71604
71596: LD_INT 30
71598: DOUBLE
71599: EQUAL
71600: IFTRUE 71604
71602: GO 71660
71604: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71605: LD_ADDR_VAR 0 9
71609: PUSH
71610: LD_VAR 0 59
71614: PUSH
71615: LD_VAR 0 60
71619: PUSH
71620: LD_VAR 0 61
71624: PUSH
71625: LD_VAR 0 62
71629: PUSH
71630: LD_VAR 0 63
71634: PUSH
71635: LD_VAR 0 64
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: PUSH
71648: LD_VAR 0 4
71652: PUSH
71653: LD_INT 1
71655: PLUS
71656: ARRAY
71657: ST_TO_ADDR
71658: GO 71661
71660: POP
// temp_list2 = [ ] ;
71661: LD_ADDR_VAR 0 10
71665: PUSH
71666: EMPTY
71667: ST_TO_ADDR
// for i in temp_list do
71668: LD_ADDR_VAR 0 8
71672: PUSH
71673: LD_VAR 0 9
71677: PUSH
71678: FOR_IN
71679: IFFALSE 71731
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71681: LD_ADDR_VAR 0 10
71685: PUSH
71686: LD_VAR 0 10
71690: PUSH
71691: LD_VAR 0 8
71695: PUSH
71696: LD_INT 1
71698: ARRAY
71699: PUSH
71700: LD_VAR 0 2
71704: PLUS
71705: PUSH
71706: LD_VAR 0 8
71710: PUSH
71711: LD_INT 2
71713: ARRAY
71714: PUSH
71715: LD_VAR 0 3
71719: PLUS
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: EMPTY
71726: LIST
71727: ADD
71728: ST_TO_ADDR
71729: GO 71678
71731: POP
71732: POP
// result = temp_list2 ;
71733: LD_ADDR_VAR 0 7
71737: PUSH
71738: LD_VAR 0 10
71742: ST_TO_ADDR
// end ;
71743: LD_VAR 0 7
71747: RET
// export function EnemyInRange ( unit , dist ) ; begin
71748: LD_INT 0
71750: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71751: LD_ADDR_VAR 0 3
71755: PUSH
71756: LD_VAR 0 1
71760: PPUSH
71761: CALL_OW 255
71765: PPUSH
71766: LD_VAR 0 1
71770: PPUSH
71771: CALL_OW 250
71775: PPUSH
71776: LD_VAR 0 1
71780: PPUSH
71781: CALL_OW 251
71785: PPUSH
71786: LD_VAR 0 2
71790: PPUSH
71791: CALL 45144 0 4
71795: PUSH
71796: LD_INT 4
71798: ARRAY
71799: ST_TO_ADDR
// end ;
71800: LD_VAR 0 3
71804: RET
// export function PlayerSeeMe ( unit ) ; begin
71805: LD_INT 0
71807: PPUSH
// result := See ( your_side , unit ) ;
71808: LD_ADDR_VAR 0 2
71812: PUSH
71813: LD_OWVAR 2
71817: PPUSH
71818: LD_VAR 0 1
71822: PPUSH
71823: CALL_OW 292
71827: ST_TO_ADDR
// end ;
71828: LD_VAR 0 2
71832: RET
// export function ReverseDir ( unit ) ; begin
71833: LD_INT 0
71835: PPUSH
// if not unit then
71836: LD_VAR 0 1
71840: NOT
71841: IFFALSE 71845
// exit ;
71843: GO 71868
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71845: LD_ADDR_VAR 0 2
71849: PUSH
71850: LD_VAR 0 1
71854: PPUSH
71855: CALL_OW 254
71859: PUSH
71860: LD_INT 3
71862: PLUS
71863: PUSH
71864: LD_INT 6
71866: MOD
71867: ST_TO_ADDR
// end ;
71868: LD_VAR 0 2
71872: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71873: LD_INT 0
71875: PPUSH
71876: PPUSH
71877: PPUSH
71878: PPUSH
71879: PPUSH
// if not hexes then
71880: LD_VAR 0 2
71884: NOT
71885: IFFALSE 71889
// exit ;
71887: GO 72037
// dist := 9999 ;
71889: LD_ADDR_VAR 0 5
71893: PUSH
71894: LD_INT 9999
71896: ST_TO_ADDR
// for i = 1 to hexes do
71897: LD_ADDR_VAR 0 4
71901: PUSH
71902: DOUBLE
71903: LD_INT 1
71905: DEC
71906: ST_TO_ADDR
71907: LD_VAR 0 2
71911: PUSH
71912: FOR_TO
71913: IFFALSE 72025
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71915: LD_VAR 0 1
71919: PPUSH
71920: LD_VAR 0 2
71924: PUSH
71925: LD_VAR 0 4
71929: ARRAY
71930: PUSH
71931: LD_INT 1
71933: ARRAY
71934: PPUSH
71935: LD_VAR 0 2
71939: PUSH
71940: LD_VAR 0 4
71944: ARRAY
71945: PUSH
71946: LD_INT 2
71948: ARRAY
71949: PPUSH
71950: CALL_OW 297
71954: PUSH
71955: LD_VAR 0 5
71959: LESS
71960: IFFALSE 72023
// begin hex := hexes [ i ] ;
71962: LD_ADDR_VAR 0 7
71966: PUSH
71967: LD_VAR 0 2
71971: PUSH
71972: LD_VAR 0 4
71976: ARRAY
71977: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71978: LD_ADDR_VAR 0 5
71982: PUSH
71983: LD_VAR 0 1
71987: PPUSH
71988: LD_VAR 0 2
71992: PUSH
71993: LD_VAR 0 4
71997: ARRAY
71998: PUSH
71999: LD_INT 1
72001: ARRAY
72002: PPUSH
72003: LD_VAR 0 2
72007: PUSH
72008: LD_VAR 0 4
72012: ARRAY
72013: PUSH
72014: LD_INT 2
72016: ARRAY
72017: PPUSH
72018: CALL_OW 297
72022: ST_TO_ADDR
// end ; end ;
72023: GO 71912
72025: POP
72026: POP
// result := hex ;
72027: LD_ADDR_VAR 0 3
72031: PUSH
72032: LD_VAR 0 7
72036: ST_TO_ADDR
// end ;
72037: LD_VAR 0 3
72041: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72042: LD_INT 0
72044: PPUSH
72045: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72046: LD_VAR 0 1
72050: NOT
72051: PUSH
72052: LD_VAR 0 1
72056: PUSH
72057: LD_INT 21
72059: PUSH
72060: LD_INT 2
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 23
72069: PUSH
72070: LD_INT 2
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PPUSH
72081: CALL_OW 69
72085: IN
72086: NOT
72087: OR
72088: IFFALSE 72092
// exit ;
72090: GO 72139
// for i = 1 to 3 do
72092: LD_ADDR_VAR 0 3
72096: PUSH
72097: DOUBLE
72098: LD_INT 1
72100: DEC
72101: ST_TO_ADDR
72102: LD_INT 3
72104: PUSH
72105: FOR_TO
72106: IFFALSE 72137
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72108: LD_VAR 0 1
72112: PPUSH
72113: CALL_OW 250
72117: PPUSH
72118: LD_VAR 0 1
72122: PPUSH
72123: CALL_OW 251
72127: PPUSH
72128: LD_INT 1
72130: PPUSH
72131: CALL_OW 453
72135: GO 72105
72137: POP
72138: POP
// end ;
72139: LD_VAR 0 2
72143: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72144: LD_INT 0
72146: PPUSH
72147: PPUSH
72148: PPUSH
72149: PPUSH
72150: PPUSH
72151: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72152: LD_VAR 0 1
72156: NOT
72157: PUSH
72158: LD_VAR 0 2
72162: NOT
72163: OR
72164: PUSH
72165: LD_VAR 0 1
72169: PPUSH
72170: CALL_OW 314
72174: OR
72175: IFFALSE 72179
// exit ;
72177: GO 72620
// x := GetX ( enemy_unit ) ;
72179: LD_ADDR_VAR 0 7
72183: PUSH
72184: LD_VAR 0 2
72188: PPUSH
72189: CALL_OW 250
72193: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72194: LD_ADDR_VAR 0 8
72198: PUSH
72199: LD_VAR 0 2
72203: PPUSH
72204: CALL_OW 251
72208: ST_TO_ADDR
// if not x or not y then
72209: LD_VAR 0 7
72213: NOT
72214: PUSH
72215: LD_VAR 0 8
72219: NOT
72220: OR
72221: IFFALSE 72225
// exit ;
72223: GO 72620
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72225: LD_ADDR_VAR 0 6
72229: PUSH
72230: LD_VAR 0 7
72234: PPUSH
72235: LD_INT 0
72237: PPUSH
72238: LD_INT 4
72240: PPUSH
72241: CALL_OW 272
72245: PUSH
72246: LD_VAR 0 8
72250: PPUSH
72251: LD_INT 0
72253: PPUSH
72254: LD_INT 4
72256: PPUSH
72257: CALL_OW 273
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_VAR 0 7
72270: PPUSH
72271: LD_INT 1
72273: PPUSH
72274: LD_INT 4
72276: PPUSH
72277: CALL_OW 272
72281: PUSH
72282: LD_VAR 0 8
72286: PPUSH
72287: LD_INT 1
72289: PPUSH
72290: LD_INT 4
72292: PPUSH
72293: CALL_OW 273
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_VAR 0 7
72306: PPUSH
72307: LD_INT 2
72309: PPUSH
72310: LD_INT 4
72312: PPUSH
72313: CALL_OW 272
72317: PUSH
72318: LD_VAR 0 8
72322: PPUSH
72323: LD_INT 2
72325: PPUSH
72326: LD_INT 4
72328: PPUSH
72329: CALL_OW 273
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_VAR 0 7
72342: PPUSH
72343: LD_INT 3
72345: PPUSH
72346: LD_INT 4
72348: PPUSH
72349: CALL_OW 272
72353: PUSH
72354: LD_VAR 0 8
72358: PPUSH
72359: LD_INT 3
72361: PPUSH
72362: LD_INT 4
72364: PPUSH
72365: CALL_OW 273
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_VAR 0 7
72378: PPUSH
72379: LD_INT 4
72381: PPUSH
72382: LD_INT 4
72384: PPUSH
72385: CALL_OW 272
72389: PUSH
72390: LD_VAR 0 8
72394: PPUSH
72395: LD_INT 4
72397: PPUSH
72398: LD_INT 4
72400: PPUSH
72401: CALL_OW 273
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_VAR 0 7
72414: PPUSH
72415: LD_INT 5
72417: PPUSH
72418: LD_INT 4
72420: PPUSH
72421: CALL_OW 272
72425: PUSH
72426: LD_VAR 0 8
72430: PPUSH
72431: LD_INT 5
72433: PPUSH
72434: LD_INT 4
72436: PPUSH
72437: CALL_OW 273
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: ST_TO_ADDR
// for i = tmp downto 1 do
72454: LD_ADDR_VAR 0 4
72458: PUSH
72459: DOUBLE
72460: LD_VAR 0 6
72464: INC
72465: ST_TO_ADDR
72466: LD_INT 1
72468: PUSH
72469: FOR_DOWNTO
72470: IFFALSE 72571
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72472: LD_VAR 0 6
72476: PUSH
72477: LD_VAR 0 4
72481: ARRAY
72482: PUSH
72483: LD_INT 1
72485: ARRAY
72486: PPUSH
72487: LD_VAR 0 6
72491: PUSH
72492: LD_VAR 0 4
72496: ARRAY
72497: PUSH
72498: LD_INT 2
72500: ARRAY
72501: PPUSH
72502: CALL_OW 488
72506: NOT
72507: PUSH
72508: LD_VAR 0 6
72512: PUSH
72513: LD_VAR 0 4
72517: ARRAY
72518: PUSH
72519: LD_INT 1
72521: ARRAY
72522: PPUSH
72523: LD_VAR 0 6
72527: PUSH
72528: LD_VAR 0 4
72532: ARRAY
72533: PUSH
72534: LD_INT 2
72536: ARRAY
72537: PPUSH
72538: CALL_OW 428
72542: PUSH
72543: LD_INT 0
72545: NONEQUAL
72546: OR
72547: IFFALSE 72569
// tmp := Delete ( tmp , i ) ;
72549: LD_ADDR_VAR 0 6
72553: PUSH
72554: LD_VAR 0 6
72558: PPUSH
72559: LD_VAR 0 4
72563: PPUSH
72564: CALL_OW 3
72568: ST_TO_ADDR
72569: GO 72469
72571: POP
72572: POP
// j := GetClosestHex ( unit , tmp ) ;
72573: LD_ADDR_VAR 0 5
72577: PUSH
72578: LD_VAR 0 1
72582: PPUSH
72583: LD_VAR 0 6
72587: PPUSH
72588: CALL 71873 0 2
72592: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72593: LD_VAR 0 1
72597: PPUSH
72598: LD_VAR 0 5
72602: PUSH
72603: LD_INT 1
72605: ARRAY
72606: PPUSH
72607: LD_VAR 0 5
72611: PUSH
72612: LD_INT 2
72614: ARRAY
72615: PPUSH
72616: CALL_OW 111
// end ;
72620: LD_VAR 0 3
72624: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72625: LD_INT 0
72627: PPUSH
72628: PPUSH
72629: PPUSH
// uc_side = 0 ;
72630: LD_ADDR_OWVAR 20
72634: PUSH
72635: LD_INT 0
72637: ST_TO_ADDR
// uc_nation = 0 ;
72638: LD_ADDR_OWVAR 21
72642: PUSH
72643: LD_INT 0
72645: ST_TO_ADDR
// InitHc_All ( ) ;
72646: CALL_OW 584
// InitVc ;
72650: CALL_OW 20
// if mastodonts then
72654: LD_VAR 0 6
72658: IFFALSE 72725
// for i = 1 to mastodonts do
72660: LD_ADDR_VAR 0 11
72664: PUSH
72665: DOUBLE
72666: LD_INT 1
72668: DEC
72669: ST_TO_ADDR
72670: LD_VAR 0 6
72674: PUSH
72675: FOR_TO
72676: IFFALSE 72723
// begin vc_chassis := 31 ;
72678: LD_ADDR_OWVAR 37
72682: PUSH
72683: LD_INT 31
72685: ST_TO_ADDR
// vc_control := control_rider ;
72686: LD_ADDR_OWVAR 38
72690: PUSH
72691: LD_INT 4
72693: ST_TO_ADDR
// animal := CreateVehicle ;
72694: LD_ADDR_VAR 0 12
72698: PUSH
72699: CALL_OW 45
72703: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72704: LD_VAR 0 12
72708: PPUSH
72709: LD_VAR 0 8
72713: PPUSH
72714: LD_INT 0
72716: PPUSH
72717: CALL 74860 0 3
// end ;
72721: GO 72675
72723: POP
72724: POP
// if horses then
72725: LD_VAR 0 5
72729: IFFALSE 72796
// for i = 1 to horses do
72731: LD_ADDR_VAR 0 11
72735: PUSH
72736: DOUBLE
72737: LD_INT 1
72739: DEC
72740: ST_TO_ADDR
72741: LD_VAR 0 5
72745: PUSH
72746: FOR_TO
72747: IFFALSE 72794
// begin hc_class := 21 ;
72749: LD_ADDR_OWVAR 28
72753: PUSH
72754: LD_INT 21
72756: ST_TO_ADDR
// hc_gallery :=  ;
72757: LD_ADDR_OWVAR 33
72761: PUSH
72762: LD_STRING 
72764: ST_TO_ADDR
// animal := CreateHuman ;
72765: LD_ADDR_VAR 0 12
72769: PUSH
72770: CALL_OW 44
72774: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72775: LD_VAR 0 12
72779: PPUSH
72780: LD_VAR 0 8
72784: PPUSH
72785: LD_INT 0
72787: PPUSH
72788: CALL 74860 0 3
// end ;
72792: GO 72746
72794: POP
72795: POP
// if birds then
72796: LD_VAR 0 1
72800: IFFALSE 72867
// for i = 1 to birds do
72802: LD_ADDR_VAR 0 11
72806: PUSH
72807: DOUBLE
72808: LD_INT 1
72810: DEC
72811: ST_TO_ADDR
72812: LD_VAR 0 1
72816: PUSH
72817: FOR_TO
72818: IFFALSE 72865
// begin hc_class = 18 ;
72820: LD_ADDR_OWVAR 28
72824: PUSH
72825: LD_INT 18
72827: ST_TO_ADDR
// hc_gallery =  ;
72828: LD_ADDR_OWVAR 33
72832: PUSH
72833: LD_STRING 
72835: ST_TO_ADDR
// animal := CreateHuman ;
72836: LD_ADDR_VAR 0 12
72840: PUSH
72841: CALL_OW 44
72845: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72846: LD_VAR 0 12
72850: PPUSH
72851: LD_VAR 0 8
72855: PPUSH
72856: LD_INT 0
72858: PPUSH
72859: CALL 74860 0 3
// end ;
72863: GO 72817
72865: POP
72866: POP
// if tigers then
72867: LD_VAR 0 2
72871: IFFALSE 72955
// for i = 1 to tigers do
72873: LD_ADDR_VAR 0 11
72877: PUSH
72878: DOUBLE
72879: LD_INT 1
72881: DEC
72882: ST_TO_ADDR
72883: LD_VAR 0 2
72887: PUSH
72888: FOR_TO
72889: IFFALSE 72953
// begin hc_class = class_tiger ;
72891: LD_ADDR_OWVAR 28
72895: PUSH
72896: LD_INT 14
72898: ST_TO_ADDR
// hc_gallery =  ;
72899: LD_ADDR_OWVAR 33
72903: PUSH
72904: LD_STRING 
72906: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72907: LD_ADDR_OWVAR 35
72911: PUSH
72912: LD_INT 7
72914: NEG
72915: PPUSH
72916: LD_INT 7
72918: PPUSH
72919: CALL_OW 12
72923: ST_TO_ADDR
// animal := CreateHuman ;
72924: LD_ADDR_VAR 0 12
72928: PUSH
72929: CALL_OW 44
72933: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72934: LD_VAR 0 12
72938: PPUSH
72939: LD_VAR 0 8
72943: PPUSH
72944: LD_INT 0
72946: PPUSH
72947: CALL 74860 0 3
// end ;
72951: GO 72888
72953: POP
72954: POP
// if apemans then
72955: LD_VAR 0 3
72959: IFFALSE 73082
// for i = 1 to apemans do
72961: LD_ADDR_VAR 0 11
72965: PUSH
72966: DOUBLE
72967: LD_INT 1
72969: DEC
72970: ST_TO_ADDR
72971: LD_VAR 0 3
72975: PUSH
72976: FOR_TO
72977: IFFALSE 73080
// begin hc_class = class_apeman ;
72979: LD_ADDR_OWVAR 28
72983: PUSH
72984: LD_INT 12
72986: ST_TO_ADDR
// hc_gallery =  ;
72987: LD_ADDR_OWVAR 33
72991: PUSH
72992: LD_STRING 
72994: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72995: LD_ADDR_OWVAR 35
72999: PUSH
73000: LD_INT 2
73002: NEG
73003: PPUSH
73004: LD_INT 2
73006: PPUSH
73007: CALL_OW 12
73011: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73012: LD_ADDR_OWVAR 31
73016: PUSH
73017: LD_INT 1
73019: PPUSH
73020: LD_INT 3
73022: PPUSH
73023: CALL_OW 12
73027: PUSH
73028: LD_INT 1
73030: PPUSH
73031: LD_INT 3
73033: PPUSH
73034: CALL_OW 12
73038: PUSH
73039: LD_INT 0
73041: PUSH
73042: LD_INT 0
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: ST_TO_ADDR
// animal := CreateHuman ;
73051: LD_ADDR_VAR 0 12
73055: PUSH
73056: CALL_OW 44
73060: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73061: LD_VAR 0 12
73065: PPUSH
73066: LD_VAR 0 8
73070: PPUSH
73071: LD_INT 0
73073: PPUSH
73074: CALL 74860 0 3
// end ;
73078: GO 72976
73080: POP
73081: POP
// if enchidnas then
73082: LD_VAR 0 4
73086: IFFALSE 73153
// for i = 1 to enchidnas do
73088: LD_ADDR_VAR 0 11
73092: PUSH
73093: DOUBLE
73094: LD_INT 1
73096: DEC
73097: ST_TO_ADDR
73098: LD_VAR 0 4
73102: PUSH
73103: FOR_TO
73104: IFFALSE 73151
// begin hc_class = 13 ;
73106: LD_ADDR_OWVAR 28
73110: PUSH
73111: LD_INT 13
73113: ST_TO_ADDR
// hc_gallery =  ;
73114: LD_ADDR_OWVAR 33
73118: PUSH
73119: LD_STRING 
73121: ST_TO_ADDR
// animal := CreateHuman ;
73122: LD_ADDR_VAR 0 12
73126: PUSH
73127: CALL_OW 44
73131: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73132: LD_VAR 0 12
73136: PPUSH
73137: LD_VAR 0 8
73141: PPUSH
73142: LD_INT 0
73144: PPUSH
73145: CALL 74860 0 3
// end ;
73149: GO 73103
73151: POP
73152: POP
// if fishes then
73153: LD_VAR 0 7
73157: IFFALSE 73224
// for i = 1 to fishes do
73159: LD_ADDR_VAR 0 11
73163: PUSH
73164: DOUBLE
73165: LD_INT 1
73167: DEC
73168: ST_TO_ADDR
73169: LD_VAR 0 7
73173: PUSH
73174: FOR_TO
73175: IFFALSE 73222
// begin hc_class = 20 ;
73177: LD_ADDR_OWVAR 28
73181: PUSH
73182: LD_INT 20
73184: ST_TO_ADDR
// hc_gallery =  ;
73185: LD_ADDR_OWVAR 33
73189: PUSH
73190: LD_STRING 
73192: ST_TO_ADDR
// animal := CreateHuman ;
73193: LD_ADDR_VAR 0 12
73197: PUSH
73198: CALL_OW 44
73202: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73203: LD_VAR 0 12
73207: PPUSH
73208: LD_VAR 0 9
73212: PPUSH
73213: LD_INT 0
73215: PPUSH
73216: CALL 74860 0 3
// end ;
73220: GO 73174
73222: POP
73223: POP
// end ;
73224: LD_VAR 0 10
73228: RET
// export function WantHeal ( sci , unit ) ; begin
73229: LD_INT 0
73231: PPUSH
// if GetTaskList ( sci ) > 0 then
73232: LD_VAR 0 1
73236: PPUSH
73237: CALL_OW 437
73241: PUSH
73242: LD_INT 0
73244: GREATER
73245: IFFALSE 73315
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73247: LD_VAR 0 1
73251: PPUSH
73252: CALL_OW 437
73256: PUSH
73257: LD_INT 1
73259: ARRAY
73260: PUSH
73261: LD_INT 1
73263: ARRAY
73264: PUSH
73265: LD_STRING l
73267: EQUAL
73268: PUSH
73269: LD_VAR 0 1
73273: PPUSH
73274: CALL_OW 437
73278: PUSH
73279: LD_INT 1
73281: ARRAY
73282: PUSH
73283: LD_INT 4
73285: ARRAY
73286: PUSH
73287: LD_VAR 0 2
73291: EQUAL
73292: AND
73293: IFFALSE 73305
// result := true else
73295: LD_ADDR_VAR 0 3
73299: PUSH
73300: LD_INT 1
73302: ST_TO_ADDR
73303: GO 73313
// result := false ;
73305: LD_ADDR_VAR 0 3
73309: PUSH
73310: LD_INT 0
73312: ST_TO_ADDR
// end else
73313: GO 73323
// result := false ;
73315: LD_ADDR_VAR 0 3
73319: PUSH
73320: LD_INT 0
73322: ST_TO_ADDR
// end ;
73323: LD_VAR 0 3
73327: RET
// export function HealTarget ( sci ) ; begin
73328: LD_INT 0
73330: PPUSH
// if not sci then
73331: LD_VAR 0 1
73335: NOT
73336: IFFALSE 73340
// exit ;
73338: GO 73405
// result := 0 ;
73340: LD_ADDR_VAR 0 2
73344: PUSH
73345: LD_INT 0
73347: ST_TO_ADDR
// if GetTaskList ( sci ) then
73348: LD_VAR 0 1
73352: PPUSH
73353: CALL_OW 437
73357: IFFALSE 73405
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73359: LD_VAR 0 1
73363: PPUSH
73364: CALL_OW 437
73368: PUSH
73369: LD_INT 1
73371: ARRAY
73372: PUSH
73373: LD_INT 1
73375: ARRAY
73376: PUSH
73377: LD_STRING l
73379: EQUAL
73380: IFFALSE 73405
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73382: LD_ADDR_VAR 0 2
73386: PUSH
73387: LD_VAR 0 1
73391: PPUSH
73392: CALL_OW 437
73396: PUSH
73397: LD_INT 1
73399: ARRAY
73400: PUSH
73401: LD_INT 4
73403: ARRAY
73404: ST_TO_ADDR
// end ;
73405: LD_VAR 0 2
73409: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73410: LD_INT 0
73412: PPUSH
73413: PPUSH
73414: PPUSH
73415: PPUSH
// if not base_units then
73416: LD_VAR 0 1
73420: NOT
73421: IFFALSE 73425
// exit ;
73423: GO 73512
// result := false ;
73425: LD_ADDR_VAR 0 2
73429: PUSH
73430: LD_INT 0
73432: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73433: LD_ADDR_VAR 0 5
73437: PUSH
73438: LD_VAR 0 1
73442: PPUSH
73443: LD_INT 21
73445: PUSH
73446: LD_INT 3
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PPUSH
73453: CALL_OW 72
73457: ST_TO_ADDR
// if not tmp then
73458: LD_VAR 0 5
73462: NOT
73463: IFFALSE 73467
// exit ;
73465: GO 73512
// for i in tmp do
73467: LD_ADDR_VAR 0 3
73471: PUSH
73472: LD_VAR 0 5
73476: PUSH
73477: FOR_IN
73478: IFFALSE 73510
// begin result := EnemyInRange ( i , 22 ) ;
73480: LD_ADDR_VAR 0 2
73484: PUSH
73485: LD_VAR 0 3
73489: PPUSH
73490: LD_INT 22
73492: PPUSH
73493: CALL 71748 0 2
73497: ST_TO_ADDR
// if result then
73498: LD_VAR 0 2
73502: IFFALSE 73508
// exit ;
73504: POP
73505: POP
73506: GO 73512
// end ;
73508: GO 73477
73510: POP
73511: POP
// end ;
73512: LD_VAR 0 2
73516: RET
// export function FilterByTag ( units , tag ) ; begin
73517: LD_INT 0
73519: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73520: LD_ADDR_VAR 0 3
73524: PUSH
73525: LD_VAR 0 1
73529: PPUSH
73530: LD_INT 120
73532: PUSH
73533: LD_VAR 0 2
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PPUSH
73542: CALL_OW 72
73546: ST_TO_ADDR
// end ;
73547: LD_VAR 0 3
73551: RET
// export function IsDriver ( un ) ; begin
73552: LD_INT 0
73554: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73555: LD_ADDR_VAR 0 2
73559: PUSH
73560: LD_VAR 0 1
73564: PUSH
73565: LD_INT 55
73567: PUSH
73568: EMPTY
73569: LIST
73570: PPUSH
73571: CALL_OW 69
73575: IN
73576: ST_TO_ADDR
// end ;
73577: LD_VAR 0 2
73581: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73582: LD_INT 0
73584: PPUSH
73585: PPUSH
// list := [ ] ;
73586: LD_ADDR_VAR 0 5
73590: PUSH
73591: EMPTY
73592: ST_TO_ADDR
// case d of 0 :
73593: LD_VAR 0 3
73597: PUSH
73598: LD_INT 0
73600: DOUBLE
73601: EQUAL
73602: IFTRUE 73606
73604: GO 73739
73606: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73607: LD_ADDR_VAR 0 5
73611: PUSH
73612: LD_VAR 0 1
73616: PUSH
73617: LD_INT 4
73619: MINUS
73620: PUSH
73621: LD_VAR 0 2
73625: PUSH
73626: LD_INT 4
73628: MINUS
73629: PUSH
73630: LD_INT 2
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: LIST
73637: PUSH
73638: LD_VAR 0 1
73642: PUSH
73643: LD_INT 3
73645: MINUS
73646: PUSH
73647: LD_VAR 0 2
73651: PUSH
73652: LD_INT 1
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: LIST
73659: PUSH
73660: LD_VAR 0 1
73664: PUSH
73665: LD_INT 4
73667: PLUS
73668: PUSH
73669: LD_VAR 0 2
73673: PUSH
73674: LD_INT 4
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: LIST
73681: PUSH
73682: LD_VAR 0 1
73686: PUSH
73687: LD_INT 3
73689: PLUS
73690: PUSH
73691: LD_VAR 0 2
73695: PUSH
73696: LD_INT 3
73698: PLUS
73699: PUSH
73700: LD_INT 5
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: LIST
73707: PUSH
73708: LD_VAR 0 1
73712: PUSH
73713: LD_VAR 0 2
73717: PUSH
73718: LD_INT 4
73720: PLUS
73721: PUSH
73722: LD_INT 0
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: LIST
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: ST_TO_ADDR
// end ; 1 :
73737: GO 74437
73739: LD_INT 1
73741: DOUBLE
73742: EQUAL
73743: IFTRUE 73747
73745: GO 73880
73747: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73748: LD_ADDR_VAR 0 5
73752: PUSH
73753: LD_VAR 0 1
73757: PUSH
73758: LD_VAR 0 2
73762: PUSH
73763: LD_INT 4
73765: MINUS
73766: PUSH
73767: LD_INT 3
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: LIST
73774: PUSH
73775: LD_VAR 0 1
73779: PUSH
73780: LD_INT 3
73782: MINUS
73783: PUSH
73784: LD_VAR 0 2
73788: PUSH
73789: LD_INT 3
73791: MINUS
73792: PUSH
73793: LD_INT 2
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: LIST
73800: PUSH
73801: LD_VAR 0 1
73805: PUSH
73806: LD_INT 4
73808: MINUS
73809: PUSH
73810: LD_VAR 0 2
73814: PUSH
73815: LD_INT 1
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: LIST
73822: PUSH
73823: LD_VAR 0 1
73827: PUSH
73828: LD_VAR 0 2
73832: PUSH
73833: LD_INT 3
73835: PLUS
73836: PUSH
73837: LD_INT 0
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: LIST
73844: PUSH
73845: LD_VAR 0 1
73849: PUSH
73850: LD_INT 4
73852: PLUS
73853: PUSH
73854: LD_VAR 0 2
73858: PUSH
73859: LD_INT 4
73861: PLUS
73862: PUSH
73863: LD_INT 5
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: LIST
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: ST_TO_ADDR
// end ; 2 :
73878: GO 74437
73880: LD_INT 2
73882: DOUBLE
73883: EQUAL
73884: IFTRUE 73888
73886: GO 74017
73888: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73889: LD_ADDR_VAR 0 5
73893: PUSH
73894: LD_VAR 0 1
73898: PUSH
73899: LD_VAR 0 2
73903: PUSH
73904: LD_INT 3
73906: MINUS
73907: PUSH
73908: LD_INT 3
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: LIST
73915: PUSH
73916: LD_VAR 0 1
73920: PUSH
73921: LD_INT 4
73923: PLUS
73924: PUSH
73925: LD_VAR 0 2
73929: PUSH
73930: LD_INT 4
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: LIST
73937: PUSH
73938: LD_VAR 0 1
73942: PUSH
73943: LD_VAR 0 2
73947: PUSH
73948: LD_INT 4
73950: PLUS
73951: PUSH
73952: LD_INT 0
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: LIST
73959: PUSH
73960: LD_VAR 0 1
73964: PUSH
73965: LD_INT 3
73967: MINUS
73968: PUSH
73969: LD_VAR 0 2
73973: PUSH
73974: LD_INT 1
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: LIST
73981: PUSH
73982: LD_VAR 0 1
73986: PUSH
73987: LD_INT 4
73989: MINUS
73990: PUSH
73991: LD_VAR 0 2
73995: PUSH
73996: LD_INT 4
73998: MINUS
73999: PUSH
74000: LD_INT 2
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: LIST
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: ST_TO_ADDR
// end ; 3 :
74015: GO 74437
74017: LD_INT 3
74019: DOUBLE
74020: EQUAL
74021: IFTRUE 74025
74023: GO 74158
74025: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74026: LD_ADDR_VAR 0 5
74030: PUSH
74031: LD_VAR 0 1
74035: PUSH
74036: LD_INT 3
74038: PLUS
74039: PUSH
74040: LD_VAR 0 2
74044: PUSH
74045: LD_INT 4
74047: PUSH
74048: EMPTY
74049: LIST
74050: LIST
74051: LIST
74052: PUSH
74053: LD_VAR 0 1
74057: PUSH
74058: LD_INT 4
74060: PLUS
74061: PUSH
74062: LD_VAR 0 2
74066: PUSH
74067: LD_INT 4
74069: PLUS
74070: PUSH
74071: LD_INT 5
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: LIST
74078: PUSH
74079: LD_VAR 0 1
74083: PUSH
74084: LD_INT 4
74086: MINUS
74087: PUSH
74088: LD_VAR 0 2
74092: PUSH
74093: LD_INT 1
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: LIST
74100: PUSH
74101: LD_VAR 0 1
74105: PUSH
74106: LD_VAR 0 2
74110: PUSH
74111: LD_INT 4
74113: MINUS
74114: PUSH
74115: LD_INT 3
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: LIST
74122: PUSH
74123: LD_VAR 0 1
74127: PUSH
74128: LD_INT 3
74130: MINUS
74131: PUSH
74132: LD_VAR 0 2
74136: PUSH
74137: LD_INT 3
74139: MINUS
74140: PUSH
74141: LD_INT 2
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: LIST
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: ST_TO_ADDR
// end ; 4 :
74156: GO 74437
74158: LD_INT 4
74160: DOUBLE
74161: EQUAL
74162: IFTRUE 74166
74164: GO 74299
74166: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74167: LD_ADDR_VAR 0 5
74171: PUSH
74172: LD_VAR 0 1
74176: PUSH
74177: LD_VAR 0 2
74181: PUSH
74182: LD_INT 4
74184: PLUS
74185: PUSH
74186: LD_INT 0
74188: PUSH
74189: EMPTY
74190: LIST
74191: LIST
74192: LIST
74193: PUSH
74194: LD_VAR 0 1
74198: PUSH
74199: LD_INT 3
74201: PLUS
74202: PUSH
74203: LD_VAR 0 2
74207: PUSH
74208: LD_INT 3
74210: PLUS
74211: PUSH
74212: LD_INT 5
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: LIST
74219: PUSH
74220: LD_VAR 0 1
74224: PUSH
74225: LD_INT 4
74227: PLUS
74228: PUSH
74229: LD_VAR 0 2
74233: PUSH
74234: LD_INT 4
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: LIST
74241: PUSH
74242: LD_VAR 0 1
74246: PUSH
74247: LD_VAR 0 2
74251: PUSH
74252: LD_INT 3
74254: MINUS
74255: PUSH
74256: LD_INT 3
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: LIST
74263: PUSH
74264: LD_VAR 0 1
74268: PUSH
74269: LD_INT 4
74271: MINUS
74272: PUSH
74273: LD_VAR 0 2
74277: PUSH
74278: LD_INT 4
74280: MINUS
74281: PUSH
74282: LD_INT 2
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: LIST
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: ST_TO_ADDR
// end ; 5 :
74297: GO 74437
74299: LD_INT 5
74301: DOUBLE
74302: EQUAL
74303: IFTRUE 74307
74305: GO 74436
74307: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74308: LD_ADDR_VAR 0 5
74312: PUSH
74313: LD_VAR 0 1
74317: PUSH
74318: LD_INT 4
74320: MINUS
74321: PUSH
74322: LD_VAR 0 2
74326: PUSH
74327: LD_INT 1
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: LIST
74334: PUSH
74335: LD_VAR 0 1
74339: PUSH
74340: LD_VAR 0 2
74344: PUSH
74345: LD_INT 4
74347: MINUS
74348: PUSH
74349: LD_INT 3
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: PUSH
74357: LD_VAR 0 1
74361: PUSH
74362: LD_INT 4
74364: PLUS
74365: PUSH
74366: LD_VAR 0 2
74370: PUSH
74371: LD_INT 4
74373: PLUS
74374: PUSH
74375: LD_INT 5
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: LIST
74382: PUSH
74383: LD_VAR 0 1
74387: PUSH
74388: LD_INT 3
74390: PLUS
74391: PUSH
74392: LD_VAR 0 2
74396: PUSH
74397: LD_INT 4
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: LIST
74404: PUSH
74405: LD_VAR 0 1
74409: PUSH
74410: LD_VAR 0 2
74414: PUSH
74415: LD_INT 3
74417: PLUS
74418: PUSH
74419: LD_INT 0
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: LIST
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: ST_TO_ADDR
// end ; end ;
74434: GO 74437
74436: POP
// result := list ;
74437: LD_ADDR_VAR 0 4
74441: PUSH
74442: LD_VAR 0 5
74446: ST_TO_ADDR
// end ;
74447: LD_VAR 0 4
74451: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74452: LD_INT 0
74454: PPUSH
74455: PPUSH
74456: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74457: LD_VAR 0 1
74461: NOT
74462: PUSH
74463: LD_VAR 0 2
74467: PUSH
74468: LD_INT 1
74470: PUSH
74471: LD_INT 2
74473: PUSH
74474: LD_INT 3
74476: PUSH
74477: LD_INT 4
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: IN
74486: NOT
74487: OR
74488: IFFALSE 74492
// exit ;
74490: GO 74584
// tmp := [ ] ;
74492: LD_ADDR_VAR 0 5
74496: PUSH
74497: EMPTY
74498: ST_TO_ADDR
// for i in units do
74499: LD_ADDR_VAR 0 4
74503: PUSH
74504: LD_VAR 0 1
74508: PUSH
74509: FOR_IN
74510: IFFALSE 74553
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74512: LD_ADDR_VAR 0 5
74516: PUSH
74517: LD_VAR 0 5
74521: PPUSH
74522: LD_VAR 0 5
74526: PUSH
74527: LD_INT 1
74529: PLUS
74530: PPUSH
74531: LD_VAR 0 4
74535: PPUSH
74536: LD_VAR 0 2
74540: PPUSH
74541: CALL_OW 259
74545: PPUSH
74546: CALL_OW 2
74550: ST_TO_ADDR
74551: GO 74509
74553: POP
74554: POP
// if not tmp then
74555: LD_VAR 0 5
74559: NOT
74560: IFFALSE 74564
// exit ;
74562: GO 74584
// result := SortListByListDesc ( units , tmp ) ;
74564: LD_ADDR_VAR 0 3
74568: PUSH
74569: LD_VAR 0 1
74573: PPUSH
74574: LD_VAR 0 5
74578: PPUSH
74579: CALL_OW 77
74583: ST_TO_ADDR
// end ;
74584: LD_VAR 0 3
74588: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74589: LD_INT 0
74591: PPUSH
74592: PPUSH
74593: PPUSH
// result := false ;
74594: LD_ADDR_VAR 0 3
74598: PUSH
74599: LD_INT 0
74601: ST_TO_ADDR
// x := GetX ( building ) ;
74602: LD_ADDR_VAR 0 4
74606: PUSH
74607: LD_VAR 0 2
74611: PPUSH
74612: CALL_OW 250
74616: ST_TO_ADDR
// y := GetY ( building ) ;
74617: LD_ADDR_VAR 0 5
74621: PUSH
74622: LD_VAR 0 2
74626: PPUSH
74627: CALL_OW 251
74631: ST_TO_ADDR
// if not building or not x or not y then
74632: LD_VAR 0 2
74636: NOT
74637: PUSH
74638: LD_VAR 0 4
74642: NOT
74643: OR
74644: PUSH
74645: LD_VAR 0 5
74649: NOT
74650: OR
74651: IFFALSE 74655
// exit ;
74653: GO 74747
// if GetTaskList ( unit ) then
74655: LD_VAR 0 1
74659: PPUSH
74660: CALL_OW 437
74664: IFFALSE 74747
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74666: LD_STRING e
74668: PUSH
74669: LD_VAR 0 1
74673: PPUSH
74674: CALL_OW 437
74678: PUSH
74679: LD_INT 1
74681: ARRAY
74682: PUSH
74683: LD_INT 1
74685: ARRAY
74686: EQUAL
74687: PUSH
74688: LD_VAR 0 4
74692: PUSH
74693: LD_VAR 0 1
74697: PPUSH
74698: CALL_OW 437
74702: PUSH
74703: LD_INT 1
74705: ARRAY
74706: PUSH
74707: LD_INT 2
74709: ARRAY
74710: EQUAL
74711: AND
74712: PUSH
74713: LD_VAR 0 5
74717: PUSH
74718: LD_VAR 0 1
74722: PPUSH
74723: CALL_OW 437
74727: PUSH
74728: LD_INT 1
74730: ARRAY
74731: PUSH
74732: LD_INT 3
74734: ARRAY
74735: EQUAL
74736: AND
74737: IFFALSE 74747
// result := true end ;
74739: LD_ADDR_VAR 0 3
74743: PUSH
74744: LD_INT 1
74746: ST_TO_ADDR
// end ;
74747: LD_VAR 0 3
74751: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74752: LD_INT 0
74754: PPUSH
// result := false ;
74755: LD_ADDR_VAR 0 4
74759: PUSH
74760: LD_INT 0
74762: ST_TO_ADDR
// if GetTaskList ( unit ) then
74763: LD_VAR 0 1
74767: PPUSH
74768: CALL_OW 437
74772: IFFALSE 74855
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74774: LD_STRING M
74776: PUSH
74777: LD_VAR 0 1
74781: PPUSH
74782: CALL_OW 437
74786: PUSH
74787: LD_INT 1
74789: ARRAY
74790: PUSH
74791: LD_INT 1
74793: ARRAY
74794: EQUAL
74795: PUSH
74796: LD_VAR 0 2
74800: PUSH
74801: LD_VAR 0 1
74805: PPUSH
74806: CALL_OW 437
74810: PUSH
74811: LD_INT 1
74813: ARRAY
74814: PUSH
74815: LD_INT 2
74817: ARRAY
74818: EQUAL
74819: AND
74820: PUSH
74821: LD_VAR 0 3
74825: PUSH
74826: LD_VAR 0 1
74830: PPUSH
74831: CALL_OW 437
74835: PUSH
74836: LD_INT 1
74838: ARRAY
74839: PUSH
74840: LD_INT 3
74842: ARRAY
74843: EQUAL
74844: AND
74845: IFFALSE 74855
// result := true ;
74847: LD_ADDR_VAR 0 4
74851: PUSH
74852: LD_INT 1
74854: ST_TO_ADDR
// end ; end ;
74855: LD_VAR 0 4
74859: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74860: LD_INT 0
74862: PPUSH
74863: PPUSH
74864: PPUSH
74865: PPUSH
// if not unit or not area then
74866: LD_VAR 0 1
74870: NOT
74871: PUSH
74872: LD_VAR 0 2
74876: NOT
74877: OR
74878: IFFALSE 74882
// exit ;
74880: GO 75046
// tmp := AreaToList ( area , i ) ;
74882: LD_ADDR_VAR 0 6
74886: PUSH
74887: LD_VAR 0 2
74891: PPUSH
74892: LD_VAR 0 5
74896: PPUSH
74897: CALL_OW 517
74901: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74902: LD_ADDR_VAR 0 5
74906: PUSH
74907: DOUBLE
74908: LD_INT 1
74910: DEC
74911: ST_TO_ADDR
74912: LD_VAR 0 6
74916: PUSH
74917: LD_INT 1
74919: ARRAY
74920: PUSH
74921: FOR_TO
74922: IFFALSE 75044
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74924: LD_ADDR_VAR 0 7
74928: PUSH
74929: LD_VAR 0 6
74933: PUSH
74934: LD_INT 1
74936: ARRAY
74937: PUSH
74938: LD_VAR 0 5
74942: ARRAY
74943: PUSH
74944: LD_VAR 0 6
74948: PUSH
74949: LD_INT 2
74951: ARRAY
74952: PUSH
74953: LD_VAR 0 5
74957: ARRAY
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74963: LD_VAR 0 7
74967: PUSH
74968: LD_INT 1
74970: ARRAY
74971: PPUSH
74972: LD_VAR 0 7
74976: PUSH
74977: LD_INT 2
74979: ARRAY
74980: PPUSH
74981: CALL_OW 428
74985: PUSH
74986: LD_INT 0
74988: EQUAL
74989: IFFALSE 75042
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74991: LD_VAR 0 1
74995: PPUSH
74996: LD_VAR 0 7
75000: PUSH
75001: LD_INT 1
75003: ARRAY
75004: PPUSH
75005: LD_VAR 0 7
75009: PUSH
75010: LD_INT 2
75012: ARRAY
75013: PPUSH
75014: LD_VAR 0 3
75018: PPUSH
75019: CALL_OW 48
// result := IsPlaced ( unit ) ;
75023: LD_ADDR_VAR 0 4
75027: PUSH
75028: LD_VAR 0 1
75032: PPUSH
75033: CALL_OW 305
75037: ST_TO_ADDR
// exit ;
75038: POP
75039: POP
75040: GO 75046
// end ; end ;
75042: GO 74921
75044: POP
75045: POP
// end ;
75046: LD_VAR 0 4
75050: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75051: LD_INT 0
75053: PPUSH
75054: PPUSH
75055: PPUSH
// if not side or side > 8 then
75056: LD_VAR 0 1
75060: NOT
75061: PUSH
75062: LD_VAR 0 1
75066: PUSH
75067: LD_INT 8
75069: GREATER
75070: OR
75071: IFFALSE 75075
// exit ;
75073: GO 75262
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75075: LD_ADDR_VAR 0 4
75079: PUSH
75080: LD_INT 22
75082: PUSH
75083: LD_VAR 0 1
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: PUSH
75092: LD_INT 21
75094: PUSH
75095: LD_INT 3
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PPUSH
75106: CALL_OW 69
75110: ST_TO_ADDR
// if not tmp then
75111: LD_VAR 0 4
75115: NOT
75116: IFFALSE 75120
// exit ;
75118: GO 75262
// enable_addtolog := true ;
75120: LD_ADDR_OWVAR 81
75124: PUSH
75125: LD_INT 1
75127: ST_TO_ADDR
// AddToLog ( [ ) ;
75128: LD_STRING [
75130: PPUSH
75131: CALL_OW 561
// for i in tmp do
75135: LD_ADDR_VAR 0 3
75139: PUSH
75140: LD_VAR 0 4
75144: PUSH
75145: FOR_IN
75146: IFFALSE 75253
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75148: LD_STRING [
75150: PUSH
75151: LD_VAR 0 3
75155: PPUSH
75156: CALL_OW 266
75160: STR
75161: PUSH
75162: LD_STRING , 
75164: STR
75165: PUSH
75166: LD_VAR 0 3
75170: PPUSH
75171: CALL_OW 250
75175: STR
75176: PUSH
75177: LD_STRING , 
75179: STR
75180: PUSH
75181: LD_VAR 0 3
75185: PPUSH
75186: CALL_OW 251
75190: STR
75191: PUSH
75192: LD_STRING , 
75194: STR
75195: PUSH
75196: LD_VAR 0 3
75200: PPUSH
75201: CALL_OW 254
75205: STR
75206: PUSH
75207: LD_STRING , 
75209: STR
75210: PUSH
75211: LD_VAR 0 3
75215: PPUSH
75216: LD_INT 1
75218: PPUSH
75219: CALL_OW 268
75223: STR
75224: PUSH
75225: LD_STRING , 
75227: STR
75228: PUSH
75229: LD_VAR 0 3
75233: PPUSH
75234: LD_INT 2
75236: PPUSH
75237: CALL_OW 268
75241: STR
75242: PUSH
75243: LD_STRING ],
75245: STR
75246: PPUSH
75247: CALL_OW 561
// end ;
75251: GO 75145
75253: POP
75254: POP
// AddToLog ( ]; ) ;
75255: LD_STRING ];
75257: PPUSH
75258: CALL_OW 561
// end ;
75262: LD_VAR 0 2
75266: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75267: LD_INT 0
75269: PPUSH
75270: PPUSH
75271: PPUSH
75272: PPUSH
75273: PPUSH
// if not area or not rate or not max then
75274: LD_VAR 0 1
75278: NOT
75279: PUSH
75280: LD_VAR 0 2
75284: NOT
75285: OR
75286: PUSH
75287: LD_VAR 0 4
75291: NOT
75292: OR
75293: IFFALSE 75297
// exit ;
75295: GO 75486
// while 1 do
75297: LD_INT 1
75299: IFFALSE 75486
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75301: LD_ADDR_VAR 0 9
75305: PUSH
75306: LD_VAR 0 1
75310: PPUSH
75311: LD_INT 1
75313: PPUSH
75314: CALL_OW 287
75318: PUSH
75319: LD_INT 10
75321: MUL
75322: ST_TO_ADDR
// r := rate / 10 ;
75323: LD_ADDR_VAR 0 7
75327: PUSH
75328: LD_VAR 0 2
75332: PUSH
75333: LD_INT 10
75335: DIVREAL
75336: ST_TO_ADDR
// time := 1 1$00 ;
75337: LD_ADDR_VAR 0 8
75341: PUSH
75342: LD_INT 2100
75344: ST_TO_ADDR
// if amount < min then
75345: LD_VAR 0 9
75349: PUSH
75350: LD_VAR 0 3
75354: LESS
75355: IFFALSE 75373
// r := r * 2 else
75357: LD_ADDR_VAR 0 7
75361: PUSH
75362: LD_VAR 0 7
75366: PUSH
75367: LD_INT 2
75369: MUL
75370: ST_TO_ADDR
75371: GO 75399
// if amount > max then
75373: LD_VAR 0 9
75377: PUSH
75378: LD_VAR 0 4
75382: GREATER
75383: IFFALSE 75399
// r := r / 2 ;
75385: LD_ADDR_VAR 0 7
75389: PUSH
75390: LD_VAR 0 7
75394: PUSH
75395: LD_INT 2
75397: DIVREAL
75398: ST_TO_ADDR
// time := time / r ;
75399: LD_ADDR_VAR 0 8
75403: PUSH
75404: LD_VAR 0 8
75408: PUSH
75409: LD_VAR 0 7
75413: DIVREAL
75414: ST_TO_ADDR
// if time < 0 then
75415: LD_VAR 0 8
75419: PUSH
75420: LD_INT 0
75422: LESS
75423: IFFALSE 75440
// time := time * - 1 ;
75425: LD_ADDR_VAR 0 8
75429: PUSH
75430: LD_VAR 0 8
75434: PUSH
75435: LD_INT 1
75437: NEG
75438: MUL
75439: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75440: LD_VAR 0 8
75444: PUSH
75445: LD_INT 35
75447: PPUSH
75448: LD_INT 875
75450: PPUSH
75451: CALL_OW 12
75455: PLUS
75456: PPUSH
75457: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75461: LD_INT 1
75463: PPUSH
75464: LD_INT 5
75466: PPUSH
75467: CALL_OW 12
75471: PPUSH
75472: LD_VAR 0 1
75476: PPUSH
75477: LD_INT 1
75479: PPUSH
75480: CALL_OW 55
// end ;
75484: GO 75297
// end ;
75486: LD_VAR 0 5
75490: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75491: LD_INT 0
75493: PPUSH
75494: PPUSH
75495: PPUSH
75496: PPUSH
75497: PPUSH
75498: PPUSH
75499: PPUSH
75500: PPUSH
// if not turrets or not factories then
75501: LD_VAR 0 1
75505: NOT
75506: PUSH
75507: LD_VAR 0 2
75511: NOT
75512: OR
75513: IFFALSE 75517
// exit ;
75515: GO 75824
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75517: LD_ADDR_VAR 0 10
75521: PUSH
75522: LD_INT 5
75524: PUSH
75525: LD_INT 6
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: PUSH
75532: LD_INT 2
75534: PUSH
75535: LD_INT 4
75537: PUSH
75538: EMPTY
75539: LIST
75540: LIST
75541: PUSH
75542: LD_INT 3
75544: PUSH
75545: LD_INT 5
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: PUSH
75552: EMPTY
75553: LIST
75554: LIST
75555: LIST
75556: PUSH
75557: LD_INT 24
75559: PUSH
75560: LD_INT 25
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 23
75569: PUSH
75570: LD_INT 27
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: PUSH
75581: LD_INT 42
75583: PUSH
75584: LD_INT 43
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: PUSH
75591: LD_INT 44
75593: PUSH
75594: LD_INT 46
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: PUSH
75601: LD_INT 45
75603: PUSH
75604: LD_INT 47
75606: PUSH
75607: EMPTY
75608: LIST
75609: LIST
75610: PUSH
75611: EMPTY
75612: LIST
75613: LIST
75614: LIST
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: LIST
75620: ST_TO_ADDR
// result := [ ] ;
75621: LD_ADDR_VAR 0 3
75625: PUSH
75626: EMPTY
75627: ST_TO_ADDR
// for i in turrets do
75628: LD_ADDR_VAR 0 4
75632: PUSH
75633: LD_VAR 0 1
75637: PUSH
75638: FOR_IN
75639: IFFALSE 75822
// begin nat := GetNation ( i ) ;
75641: LD_ADDR_VAR 0 7
75645: PUSH
75646: LD_VAR 0 4
75650: PPUSH
75651: CALL_OW 248
75655: ST_TO_ADDR
// weapon := 0 ;
75656: LD_ADDR_VAR 0 8
75660: PUSH
75661: LD_INT 0
75663: ST_TO_ADDR
// if not nat then
75664: LD_VAR 0 7
75668: NOT
75669: IFFALSE 75673
// continue ;
75671: GO 75638
// for j in list [ nat ] do
75673: LD_ADDR_VAR 0 5
75677: PUSH
75678: LD_VAR 0 10
75682: PUSH
75683: LD_VAR 0 7
75687: ARRAY
75688: PUSH
75689: FOR_IN
75690: IFFALSE 75731
// if GetBWeapon ( i ) = j [ 1 ] then
75692: LD_VAR 0 4
75696: PPUSH
75697: CALL_OW 269
75701: PUSH
75702: LD_VAR 0 5
75706: PUSH
75707: LD_INT 1
75709: ARRAY
75710: EQUAL
75711: IFFALSE 75729
// begin weapon := j [ 2 ] ;
75713: LD_ADDR_VAR 0 8
75717: PUSH
75718: LD_VAR 0 5
75722: PUSH
75723: LD_INT 2
75725: ARRAY
75726: ST_TO_ADDR
// break ;
75727: GO 75731
// end ;
75729: GO 75689
75731: POP
75732: POP
// if not weapon then
75733: LD_VAR 0 8
75737: NOT
75738: IFFALSE 75742
// continue ;
75740: GO 75638
// for k in factories do
75742: LD_ADDR_VAR 0 6
75746: PUSH
75747: LD_VAR 0 2
75751: PUSH
75752: FOR_IN
75753: IFFALSE 75818
// begin weapons := AvailableWeaponList ( k ) ;
75755: LD_ADDR_VAR 0 9
75759: PUSH
75760: LD_VAR 0 6
75764: PPUSH
75765: CALL_OW 478
75769: ST_TO_ADDR
// if not weapons then
75770: LD_VAR 0 9
75774: NOT
75775: IFFALSE 75779
// continue ;
75777: GO 75752
// if weapon in weapons then
75779: LD_VAR 0 8
75783: PUSH
75784: LD_VAR 0 9
75788: IN
75789: IFFALSE 75816
// begin result := [ i , weapon ] ;
75791: LD_ADDR_VAR 0 3
75795: PUSH
75796: LD_VAR 0 4
75800: PUSH
75801: LD_VAR 0 8
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: ST_TO_ADDR
// exit ;
75810: POP
75811: POP
75812: POP
75813: POP
75814: GO 75824
// end ; end ;
75816: GO 75752
75818: POP
75819: POP
// end ;
75820: GO 75638
75822: POP
75823: POP
// end ;
75824: LD_VAR 0 3
75828: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75829: LD_INT 0
75831: PPUSH
// if not side or side > 8 then
75832: LD_VAR 0 3
75836: NOT
75837: PUSH
75838: LD_VAR 0 3
75842: PUSH
75843: LD_INT 8
75845: GREATER
75846: OR
75847: IFFALSE 75851
// exit ;
75849: GO 75910
// if not range then
75851: LD_VAR 0 4
75855: NOT
75856: IFFALSE 75867
// range := - 12 ;
75858: LD_ADDR_VAR 0 4
75862: PUSH
75863: LD_INT 12
75865: NEG
75866: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75867: LD_VAR 0 1
75871: PPUSH
75872: LD_VAR 0 2
75876: PPUSH
75877: LD_VAR 0 3
75881: PPUSH
75882: LD_VAR 0 4
75886: PPUSH
75887: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75891: LD_VAR 0 1
75895: PPUSH
75896: LD_VAR 0 2
75900: PPUSH
75901: LD_VAR 0 3
75905: PPUSH
75906: CALL_OW 331
// end ;
75910: LD_VAR 0 5
75914: RET
// export function Video ( mode ) ; begin
75915: LD_INT 0
75917: PPUSH
// ingame_video = mode ;
75918: LD_ADDR_OWVAR 52
75922: PUSH
75923: LD_VAR 0 1
75927: ST_TO_ADDR
// interface_hidden = mode ;
75928: LD_ADDR_OWVAR 54
75932: PUSH
75933: LD_VAR 0 1
75937: ST_TO_ADDR
// end ;
75938: LD_VAR 0 2
75942: RET
// export function Join ( array , element ) ; begin
75943: LD_INT 0
75945: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75946: LD_ADDR_VAR 0 3
75950: PUSH
75951: LD_VAR 0 1
75955: PPUSH
75956: LD_VAR 0 1
75960: PUSH
75961: LD_INT 1
75963: PLUS
75964: PPUSH
75965: LD_VAR 0 2
75969: PPUSH
75970: CALL_OW 1
75974: ST_TO_ADDR
// end ;
75975: LD_VAR 0 3
75979: RET
// export function JoinUnion ( array , element ) ; begin
75980: LD_INT 0
75982: PPUSH
// result := array union element ;
75983: LD_ADDR_VAR 0 3
75987: PUSH
75988: LD_VAR 0 1
75992: PUSH
75993: LD_VAR 0 2
75997: UNION
75998: ST_TO_ADDR
// end ;
75999: LD_VAR 0 3
76003: RET
// export function GetBehemoths ( side ) ; begin
76004: LD_INT 0
76006: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
76007: LD_ADDR_VAR 0 2
76011: PUSH
76012: LD_INT 22
76014: PUSH
76015: LD_VAR 0 1
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: PUSH
76024: LD_INT 31
76026: PUSH
76027: LD_INT 25
76029: PUSH
76030: EMPTY
76031: LIST
76032: LIST
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: PPUSH
76038: CALL_OW 69
76042: ST_TO_ADDR
// end ;
76043: LD_VAR 0 2
76047: RET
// export function Shuffle ( array ) ; var i , index ; begin
76048: LD_INT 0
76050: PPUSH
76051: PPUSH
76052: PPUSH
// result := [ ] ;
76053: LD_ADDR_VAR 0 2
76057: PUSH
76058: EMPTY
76059: ST_TO_ADDR
// if not array then
76060: LD_VAR 0 1
76064: NOT
76065: IFFALSE 76069
// exit ;
76067: GO 76168
// Randomize ;
76069: CALL_OW 10
// for i = array downto 1 do
76073: LD_ADDR_VAR 0 3
76077: PUSH
76078: DOUBLE
76079: LD_VAR 0 1
76083: INC
76084: ST_TO_ADDR
76085: LD_INT 1
76087: PUSH
76088: FOR_DOWNTO
76089: IFFALSE 76166
// begin index := rand ( 1 , array ) ;
76091: LD_ADDR_VAR 0 4
76095: PUSH
76096: LD_INT 1
76098: PPUSH
76099: LD_VAR 0 1
76103: PPUSH
76104: CALL_OW 12
76108: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76109: LD_ADDR_VAR 0 2
76113: PUSH
76114: LD_VAR 0 2
76118: PPUSH
76119: LD_VAR 0 2
76123: PUSH
76124: LD_INT 1
76126: PLUS
76127: PPUSH
76128: LD_VAR 0 1
76132: PUSH
76133: LD_VAR 0 4
76137: ARRAY
76138: PPUSH
76139: CALL_OW 2
76143: ST_TO_ADDR
// array := Delete ( array , index ) ;
76144: LD_ADDR_VAR 0 1
76148: PUSH
76149: LD_VAR 0 1
76153: PPUSH
76154: LD_VAR 0 4
76158: PPUSH
76159: CALL_OW 3
76163: ST_TO_ADDR
// end ;
76164: GO 76088
76166: POP
76167: POP
// end ;
76168: LD_VAR 0 2
76172: RET
// export function GetBaseMaterials ( base ) ; begin
76173: LD_INT 0
76175: PPUSH
// result := [ 0 , 0 , 0 ] ;
76176: LD_ADDR_VAR 0 2
76180: PUSH
76181: LD_INT 0
76183: PUSH
76184: LD_INT 0
76186: PUSH
76187: LD_INT 0
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: LIST
76194: ST_TO_ADDR
// if not base then
76195: LD_VAR 0 1
76199: NOT
76200: IFFALSE 76204
// exit ;
76202: GO 76253
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76204: LD_ADDR_VAR 0 2
76208: PUSH
76209: LD_VAR 0 1
76213: PPUSH
76214: LD_INT 1
76216: PPUSH
76217: CALL_OW 275
76221: PUSH
76222: LD_VAR 0 1
76226: PPUSH
76227: LD_INT 2
76229: PPUSH
76230: CALL_OW 275
76234: PUSH
76235: LD_VAR 0 1
76239: PPUSH
76240: LD_INT 3
76242: PPUSH
76243: CALL_OW 275
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: LIST
76252: ST_TO_ADDR
// end ;
76253: LD_VAR 0 2
76257: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76258: LD_INT 0
76260: PPUSH
76261: PPUSH
// result := array ;
76262: LD_ADDR_VAR 0 3
76266: PUSH
76267: LD_VAR 0 1
76271: ST_TO_ADDR
// if size > 0 then
76272: LD_VAR 0 2
76276: PUSH
76277: LD_INT 0
76279: GREATER
76280: IFFALSE 76326
// for i := array downto size do
76282: LD_ADDR_VAR 0 4
76286: PUSH
76287: DOUBLE
76288: LD_VAR 0 1
76292: INC
76293: ST_TO_ADDR
76294: LD_VAR 0 2
76298: PUSH
76299: FOR_DOWNTO
76300: IFFALSE 76324
// result := Delete ( result , result ) ;
76302: LD_ADDR_VAR 0 3
76306: PUSH
76307: LD_VAR 0 3
76311: PPUSH
76312: LD_VAR 0 3
76316: PPUSH
76317: CALL_OW 3
76321: ST_TO_ADDR
76322: GO 76299
76324: POP
76325: POP
// end ;
76326: LD_VAR 0 3
76330: RET
// export function ComExit ( unit ) ; var tmp ; begin
76331: LD_INT 0
76333: PPUSH
76334: PPUSH
// if not IsInUnit ( unit ) then
76335: LD_VAR 0 1
76339: PPUSH
76340: CALL_OW 310
76344: NOT
76345: IFFALSE 76349
// exit ;
76347: GO 76409
// tmp := IsInUnit ( unit ) ;
76349: LD_ADDR_VAR 0 3
76353: PUSH
76354: LD_VAR 0 1
76358: PPUSH
76359: CALL_OW 310
76363: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76364: LD_VAR 0 3
76368: PPUSH
76369: CALL_OW 247
76373: PUSH
76374: LD_INT 2
76376: EQUAL
76377: IFFALSE 76390
// ComExitVehicle ( unit ) else
76379: LD_VAR 0 1
76383: PPUSH
76384: CALL_OW 121
76388: GO 76399
// ComExitBuilding ( unit ) ;
76390: LD_VAR 0 1
76394: PPUSH
76395: CALL_OW 122
// result := tmp ;
76399: LD_ADDR_VAR 0 2
76403: PUSH
76404: LD_VAR 0 3
76408: ST_TO_ADDR
// end ;
76409: LD_VAR 0 2
76413: RET
// export function ComExitAll ( units ) ; var i ; begin
76414: LD_INT 0
76416: PPUSH
76417: PPUSH
// if not units then
76418: LD_VAR 0 1
76422: NOT
76423: IFFALSE 76427
// exit ;
76425: GO 76453
// for i in units do
76427: LD_ADDR_VAR 0 3
76431: PUSH
76432: LD_VAR 0 1
76436: PUSH
76437: FOR_IN
76438: IFFALSE 76451
// ComExit ( i ) ;
76440: LD_VAR 0 3
76444: PPUSH
76445: CALL 76331 0 1
76449: GO 76437
76451: POP
76452: POP
// end ;
76453: LD_VAR 0 2
76457: RET
// export function ResetHc ; begin
76458: LD_INT 0
76460: PPUSH
// InitHc ;
76461: CALL_OW 19
// hc_importance := 0 ;
76465: LD_ADDR_OWVAR 32
76469: PUSH
76470: LD_INT 0
76472: ST_TO_ADDR
// end ;
76473: LD_VAR 0 1
76477: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76478: LD_INT 0
76480: PPUSH
76481: PPUSH
76482: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76483: LD_ADDR_VAR 0 6
76487: PUSH
76488: LD_VAR 0 1
76492: PUSH
76493: LD_VAR 0 3
76497: PLUS
76498: PUSH
76499: LD_INT 2
76501: DIV
76502: ST_TO_ADDR
// if _x < 0 then
76503: LD_VAR 0 6
76507: PUSH
76508: LD_INT 0
76510: LESS
76511: IFFALSE 76528
// _x := _x * - 1 ;
76513: LD_ADDR_VAR 0 6
76517: PUSH
76518: LD_VAR 0 6
76522: PUSH
76523: LD_INT 1
76525: NEG
76526: MUL
76527: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76528: LD_ADDR_VAR 0 7
76532: PUSH
76533: LD_VAR 0 2
76537: PUSH
76538: LD_VAR 0 4
76542: PLUS
76543: PUSH
76544: LD_INT 2
76546: DIV
76547: ST_TO_ADDR
// if _y < 0 then
76548: LD_VAR 0 7
76552: PUSH
76553: LD_INT 0
76555: LESS
76556: IFFALSE 76573
// _y := _y * - 1 ;
76558: LD_ADDR_VAR 0 7
76562: PUSH
76563: LD_VAR 0 7
76567: PUSH
76568: LD_INT 1
76570: NEG
76571: MUL
76572: ST_TO_ADDR
// result := [ _x , _y ] ;
76573: LD_ADDR_VAR 0 5
76577: PUSH
76578: LD_VAR 0 6
76582: PUSH
76583: LD_VAR 0 7
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: ST_TO_ADDR
// end ;
76592: LD_VAR 0 5
76596: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76597: LD_INT 0
76599: PPUSH
76600: PPUSH
76601: PPUSH
76602: PPUSH
// task := GetTaskList ( unit ) ;
76603: LD_ADDR_VAR 0 7
76607: PUSH
76608: LD_VAR 0 1
76612: PPUSH
76613: CALL_OW 437
76617: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76618: LD_VAR 0 7
76622: NOT
76623: PUSH
76624: LD_VAR 0 1
76628: PPUSH
76629: LD_VAR 0 2
76633: PPUSH
76634: CALL_OW 308
76638: NOT
76639: AND
76640: IFFALSE 76644
// exit ;
76642: GO 76762
// if IsInArea ( unit , area ) then
76644: LD_VAR 0 1
76648: PPUSH
76649: LD_VAR 0 2
76653: PPUSH
76654: CALL_OW 308
76658: IFFALSE 76676
// begin ComMoveToArea ( unit , goAway ) ;
76660: LD_VAR 0 1
76664: PPUSH
76665: LD_VAR 0 3
76669: PPUSH
76670: CALL_OW 113
// exit ;
76674: GO 76762
// end ; if task [ 1 ] [ 1 ] <> M then
76676: LD_VAR 0 7
76680: PUSH
76681: LD_INT 1
76683: ARRAY
76684: PUSH
76685: LD_INT 1
76687: ARRAY
76688: PUSH
76689: LD_STRING M
76691: NONEQUAL
76692: IFFALSE 76696
// exit ;
76694: GO 76762
// x := task [ 1 ] [ 2 ] ;
76696: LD_ADDR_VAR 0 5
76700: PUSH
76701: LD_VAR 0 7
76705: PUSH
76706: LD_INT 1
76708: ARRAY
76709: PUSH
76710: LD_INT 2
76712: ARRAY
76713: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76714: LD_ADDR_VAR 0 6
76718: PUSH
76719: LD_VAR 0 7
76723: PUSH
76724: LD_INT 1
76726: ARRAY
76727: PUSH
76728: LD_INT 3
76730: ARRAY
76731: ST_TO_ADDR
// if InArea ( x , y , area ) then
76732: LD_VAR 0 5
76736: PPUSH
76737: LD_VAR 0 6
76741: PPUSH
76742: LD_VAR 0 2
76746: PPUSH
76747: CALL_OW 309
76751: IFFALSE 76762
// ComStop ( unit ) ;
76753: LD_VAR 0 1
76757: PPUSH
76758: CALL_OW 141
// end ;
76762: LD_VAR 0 4
76766: RET
// export function Abs ( value ) ; begin
76767: LD_INT 0
76769: PPUSH
// result := value ;
76770: LD_ADDR_VAR 0 2
76774: PUSH
76775: LD_VAR 0 1
76779: ST_TO_ADDR
// if value < 0 then
76780: LD_VAR 0 1
76784: PUSH
76785: LD_INT 0
76787: LESS
76788: IFFALSE 76805
// result := value * - 1 ;
76790: LD_ADDR_VAR 0 2
76794: PUSH
76795: LD_VAR 0 1
76799: PUSH
76800: LD_INT 1
76802: NEG
76803: MUL
76804: ST_TO_ADDR
// end ;
76805: LD_VAR 0 2
76809: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76810: LD_INT 0
76812: PPUSH
76813: PPUSH
76814: PPUSH
76815: PPUSH
76816: PPUSH
76817: PPUSH
76818: PPUSH
76819: PPUSH
// if not unit or not building then
76820: LD_VAR 0 1
76824: NOT
76825: PUSH
76826: LD_VAR 0 2
76830: NOT
76831: OR
76832: IFFALSE 76836
// exit ;
76834: GO 77062
// x := GetX ( building ) ;
76836: LD_ADDR_VAR 0 4
76840: PUSH
76841: LD_VAR 0 2
76845: PPUSH
76846: CALL_OW 250
76850: ST_TO_ADDR
// y := GetY ( building ) ;
76851: LD_ADDR_VAR 0 6
76855: PUSH
76856: LD_VAR 0 2
76860: PPUSH
76861: CALL_OW 251
76865: ST_TO_ADDR
// d := GetDir ( building ) ;
76866: LD_ADDR_VAR 0 8
76870: PUSH
76871: LD_VAR 0 2
76875: PPUSH
76876: CALL_OW 254
76880: ST_TO_ADDR
// r := 4 ;
76881: LD_ADDR_VAR 0 9
76885: PUSH
76886: LD_INT 4
76888: ST_TO_ADDR
// for i := 1 to 5 do
76889: LD_ADDR_VAR 0 10
76893: PUSH
76894: DOUBLE
76895: LD_INT 1
76897: DEC
76898: ST_TO_ADDR
76899: LD_INT 5
76901: PUSH
76902: FOR_TO
76903: IFFALSE 77060
// begin _x := ShiftX ( x , d , r + i ) ;
76905: LD_ADDR_VAR 0 5
76909: PUSH
76910: LD_VAR 0 4
76914: PPUSH
76915: LD_VAR 0 8
76919: PPUSH
76920: LD_VAR 0 9
76924: PUSH
76925: LD_VAR 0 10
76929: PLUS
76930: PPUSH
76931: CALL_OW 272
76935: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76936: LD_ADDR_VAR 0 7
76940: PUSH
76941: LD_VAR 0 6
76945: PPUSH
76946: LD_VAR 0 8
76950: PPUSH
76951: LD_VAR 0 9
76955: PUSH
76956: LD_VAR 0 10
76960: PLUS
76961: PPUSH
76962: CALL_OW 273
76966: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76967: LD_VAR 0 5
76971: PPUSH
76972: LD_VAR 0 7
76976: PPUSH
76977: CALL_OW 488
76981: PUSH
76982: LD_VAR 0 5
76986: PPUSH
76987: LD_VAR 0 7
76991: PPUSH
76992: CALL_OW 428
76996: PPUSH
76997: CALL_OW 247
77001: PUSH
77002: LD_INT 3
77004: PUSH
77005: LD_INT 2
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: IN
77012: NOT
77013: AND
77014: IFFALSE 77058
// begin ComMoveXY ( unit , _x , _y ) ;
77016: LD_VAR 0 1
77020: PPUSH
77021: LD_VAR 0 5
77025: PPUSH
77026: LD_VAR 0 7
77030: PPUSH
77031: CALL_OW 111
// result := [ _x , _y ] ;
77035: LD_ADDR_VAR 0 3
77039: PUSH
77040: LD_VAR 0 5
77044: PUSH
77045: LD_VAR 0 7
77049: PUSH
77050: EMPTY
77051: LIST
77052: LIST
77053: ST_TO_ADDR
// exit ;
77054: POP
77055: POP
77056: GO 77062
// end ; end ;
77058: GO 76902
77060: POP
77061: POP
// end ;
77062: LD_VAR 0 3
77066: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77067: LD_INT 0
77069: PPUSH
77070: PPUSH
77071: PPUSH
// result := 0 ;
77072: LD_ADDR_VAR 0 3
77076: PUSH
77077: LD_INT 0
77079: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77080: LD_VAR 0 1
77084: PUSH
77085: LD_INT 0
77087: LESS
77088: PUSH
77089: LD_VAR 0 1
77093: PUSH
77094: LD_INT 8
77096: GREATER
77097: OR
77098: PUSH
77099: LD_VAR 0 2
77103: PUSH
77104: LD_INT 0
77106: LESS
77107: OR
77108: PUSH
77109: LD_VAR 0 2
77113: PUSH
77114: LD_INT 8
77116: GREATER
77117: OR
77118: IFFALSE 77122
// exit ;
77120: GO 77197
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77122: LD_ADDR_VAR 0 4
77126: PUSH
77127: LD_INT 22
77129: PUSH
77130: LD_VAR 0 2
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PPUSH
77139: CALL_OW 69
77143: PUSH
77144: FOR_IN
77145: IFFALSE 77195
// begin un := UnitShoot ( i ) ;
77147: LD_ADDR_VAR 0 5
77151: PUSH
77152: LD_VAR 0 4
77156: PPUSH
77157: CALL_OW 504
77161: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77162: LD_VAR 0 5
77166: PPUSH
77167: CALL_OW 255
77171: PUSH
77172: LD_VAR 0 1
77176: EQUAL
77177: IFFALSE 77193
// begin result := un ;
77179: LD_ADDR_VAR 0 3
77183: PUSH
77184: LD_VAR 0 5
77188: ST_TO_ADDR
// exit ;
77189: POP
77190: POP
77191: GO 77197
// end ; end ;
77193: GO 77144
77195: POP
77196: POP
// end ;
77197: LD_VAR 0 3
77201: RET
// export function GetCargoBay ( units ) ; begin
77202: LD_INT 0
77204: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77205: LD_ADDR_VAR 0 2
77209: PUSH
77210: LD_VAR 0 1
77214: PPUSH
77215: LD_INT 2
77217: PUSH
77218: LD_INT 34
77220: PUSH
77221: LD_INT 12
77223: PUSH
77224: EMPTY
77225: LIST
77226: LIST
77227: PUSH
77228: LD_INT 34
77230: PUSH
77231: LD_INT 51
77233: PUSH
77234: EMPTY
77235: LIST
77236: LIST
77237: PUSH
77238: LD_INT 34
77240: PUSH
77241: LD_INT 32
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: PUSH
77248: LD_INT 34
77250: PUSH
77251: LD_EXP 50
77255: PUSH
77256: EMPTY
77257: LIST
77258: LIST
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: LIST
77264: LIST
77265: LIST
77266: PPUSH
77267: CALL_OW 72
77271: ST_TO_ADDR
// end ;
77272: LD_VAR 0 2
77276: RET
// export function Negate ( value ) ; begin
77277: LD_INT 0
77279: PPUSH
// result := not value ;
77280: LD_ADDR_VAR 0 2
77284: PUSH
77285: LD_VAR 0 1
77289: NOT
77290: ST_TO_ADDR
// end ;
77291: LD_VAR 0 2
77295: RET
// export function Inc ( value ) ; begin
77296: LD_INT 0
77298: PPUSH
// result := value + 1 ;
77299: LD_ADDR_VAR 0 2
77303: PUSH
77304: LD_VAR 0 1
77308: PUSH
77309: LD_INT 1
77311: PLUS
77312: ST_TO_ADDR
// end ;
77313: LD_VAR 0 2
77317: RET
// export function Dec ( value ) ; begin
77318: LD_INT 0
77320: PPUSH
// result := value - 1 ;
77321: LD_ADDR_VAR 0 2
77325: PUSH
77326: LD_VAR 0 1
77330: PUSH
77331: LD_INT 1
77333: MINUS
77334: ST_TO_ADDR
// end ;
77335: LD_VAR 0 2
77339: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77340: LD_INT 0
77342: PPUSH
77343: PPUSH
77344: PPUSH
77345: PPUSH
77346: PPUSH
77347: PPUSH
77348: PPUSH
77349: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77350: LD_VAR 0 1
77354: PPUSH
77355: LD_VAR 0 2
77359: PPUSH
77360: CALL_OW 488
77364: NOT
77365: PUSH
77366: LD_VAR 0 3
77370: PPUSH
77371: LD_VAR 0 4
77375: PPUSH
77376: CALL_OW 488
77380: NOT
77381: OR
77382: IFFALSE 77395
// begin result := - 1 ;
77384: LD_ADDR_VAR 0 5
77388: PUSH
77389: LD_INT 1
77391: NEG
77392: ST_TO_ADDR
// exit ;
77393: GO 77630
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77395: LD_ADDR_VAR 0 12
77399: PUSH
77400: LD_VAR 0 1
77404: PPUSH
77405: LD_VAR 0 2
77409: PPUSH
77410: LD_VAR 0 3
77414: PPUSH
77415: LD_VAR 0 4
77419: PPUSH
77420: CALL 76478 0 4
77424: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77425: LD_ADDR_VAR 0 11
77429: PUSH
77430: LD_VAR 0 1
77434: PPUSH
77435: LD_VAR 0 2
77439: PPUSH
77440: LD_VAR 0 12
77444: PUSH
77445: LD_INT 1
77447: ARRAY
77448: PPUSH
77449: LD_VAR 0 12
77453: PUSH
77454: LD_INT 2
77456: ARRAY
77457: PPUSH
77458: CALL_OW 298
77462: ST_TO_ADDR
// distance := 9999 ;
77463: LD_ADDR_VAR 0 10
77467: PUSH
77468: LD_INT 9999
77470: ST_TO_ADDR
// for i := 0 to 5 do
77471: LD_ADDR_VAR 0 6
77475: PUSH
77476: DOUBLE
77477: LD_INT 0
77479: DEC
77480: ST_TO_ADDR
77481: LD_INT 5
77483: PUSH
77484: FOR_TO
77485: IFFALSE 77628
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77487: LD_ADDR_VAR 0 7
77491: PUSH
77492: LD_VAR 0 1
77496: PPUSH
77497: LD_VAR 0 6
77501: PPUSH
77502: LD_VAR 0 11
77506: PPUSH
77507: CALL_OW 272
77511: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77512: LD_ADDR_VAR 0 8
77516: PUSH
77517: LD_VAR 0 2
77521: PPUSH
77522: LD_VAR 0 6
77526: PPUSH
77527: LD_VAR 0 11
77531: PPUSH
77532: CALL_OW 273
77536: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77537: LD_VAR 0 7
77541: PPUSH
77542: LD_VAR 0 8
77546: PPUSH
77547: CALL_OW 488
77551: NOT
77552: IFFALSE 77556
// continue ;
77554: GO 77484
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77556: LD_ADDR_VAR 0 9
77560: PUSH
77561: LD_VAR 0 12
77565: PUSH
77566: LD_INT 1
77568: ARRAY
77569: PPUSH
77570: LD_VAR 0 12
77574: PUSH
77575: LD_INT 2
77577: ARRAY
77578: PPUSH
77579: LD_VAR 0 7
77583: PPUSH
77584: LD_VAR 0 8
77588: PPUSH
77589: CALL_OW 298
77593: ST_TO_ADDR
// if tmp < distance then
77594: LD_VAR 0 9
77598: PUSH
77599: LD_VAR 0 10
77603: LESS
77604: IFFALSE 77626
// begin result := i ;
77606: LD_ADDR_VAR 0 5
77610: PUSH
77611: LD_VAR 0 6
77615: ST_TO_ADDR
// distance := tmp ;
77616: LD_ADDR_VAR 0 10
77620: PUSH
77621: LD_VAR 0 9
77625: ST_TO_ADDR
// end ; end ;
77626: GO 77484
77628: POP
77629: POP
// end ;
77630: LD_VAR 0 5
77634: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77635: LD_INT 0
77637: PPUSH
77638: PPUSH
// if not driver or not IsInUnit ( driver ) then
77639: LD_VAR 0 1
77643: NOT
77644: PUSH
77645: LD_VAR 0 1
77649: PPUSH
77650: CALL_OW 310
77654: NOT
77655: OR
77656: IFFALSE 77660
// exit ;
77658: GO 77750
// vehicle := IsInUnit ( driver ) ;
77660: LD_ADDR_VAR 0 3
77664: PUSH
77665: LD_VAR 0 1
77669: PPUSH
77670: CALL_OW 310
77674: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77675: LD_VAR 0 1
77679: PPUSH
77680: LD_STRING \
77682: PUSH
77683: LD_INT 0
77685: PUSH
77686: LD_INT 0
77688: PUSH
77689: LD_INT 0
77691: PUSH
77692: LD_INT 0
77694: PUSH
77695: LD_INT 0
77697: PUSH
77698: LD_INT 0
77700: PUSH
77701: EMPTY
77702: LIST
77703: LIST
77704: LIST
77705: LIST
77706: LIST
77707: LIST
77708: LIST
77709: PUSH
77710: LD_STRING E
77712: PUSH
77713: LD_INT 0
77715: PUSH
77716: LD_INT 0
77718: PUSH
77719: LD_VAR 0 3
77723: PUSH
77724: LD_INT 0
77726: PUSH
77727: LD_INT 0
77729: PUSH
77730: LD_INT 0
77732: PUSH
77733: EMPTY
77734: LIST
77735: LIST
77736: LIST
77737: LIST
77738: LIST
77739: LIST
77740: LIST
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PPUSH
77746: CALL_OW 446
// end ;
77750: LD_VAR 0 2
77754: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77755: LD_INT 0
77757: PPUSH
77758: PPUSH
// if not driver or not IsInUnit ( driver ) then
77759: LD_VAR 0 1
77763: NOT
77764: PUSH
77765: LD_VAR 0 1
77769: PPUSH
77770: CALL_OW 310
77774: NOT
77775: OR
77776: IFFALSE 77780
// exit ;
77778: GO 77870
// vehicle := IsInUnit ( driver ) ;
77780: LD_ADDR_VAR 0 3
77784: PUSH
77785: LD_VAR 0 1
77789: PPUSH
77790: CALL_OW 310
77794: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77795: LD_VAR 0 1
77799: PPUSH
77800: LD_STRING \
77802: PUSH
77803: LD_INT 0
77805: PUSH
77806: LD_INT 0
77808: PUSH
77809: LD_INT 0
77811: PUSH
77812: LD_INT 0
77814: PUSH
77815: LD_INT 0
77817: PUSH
77818: LD_INT 0
77820: PUSH
77821: EMPTY
77822: LIST
77823: LIST
77824: LIST
77825: LIST
77826: LIST
77827: LIST
77828: LIST
77829: PUSH
77830: LD_STRING E
77832: PUSH
77833: LD_INT 0
77835: PUSH
77836: LD_INT 0
77838: PUSH
77839: LD_VAR 0 3
77843: PUSH
77844: LD_INT 0
77846: PUSH
77847: LD_INT 0
77849: PUSH
77850: LD_INT 0
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: LIST
77857: LIST
77858: LIST
77859: LIST
77860: LIST
77861: PUSH
77862: EMPTY
77863: LIST
77864: LIST
77865: PPUSH
77866: CALL_OW 447
// end ;
77870: LD_VAR 0 2
77874: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77875: LD_INT 0
77877: PPUSH
77878: PPUSH
77879: PPUSH
// tmp := [ ] ;
77880: LD_ADDR_VAR 0 5
77884: PUSH
77885: EMPTY
77886: ST_TO_ADDR
// for i in units do
77887: LD_ADDR_VAR 0 4
77891: PUSH
77892: LD_VAR 0 1
77896: PUSH
77897: FOR_IN
77898: IFFALSE 77936
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77900: LD_ADDR_VAR 0 5
77904: PUSH
77905: LD_VAR 0 5
77909: PPUSH
77910: LD_VAR 0 5
77914: PUSH
77915: LD_INT 1
77917: PLUS
77918: PPUSH
77919: LD_VAR 0 4
77923: PPUSH
77924: CALL_OW 256
77928: PPUSH
77929: CALL_OW 2
77933: ST_TO_ADDR
77934: GO 77897
77936: POP
77937: POP
// if not tmp then
77938: LD_VAR 0 5
77942: NOT
77943: IFFALSE 77947
// exit ;
77945: GO 77995
// if asc then
77947: LD_VAR 0 2
77951: IFFALSE 77975
// result := SortListByListAsc ( units , tmp ) else
77953: LD_ADDR_VAR 0 3
77957: PUSH
77958: LD_VAR 0 1
77962: PPUSH
77963: LD_VAR 0 5
77967: PPUSH
77968: CALL_OW 76
77972: ST_TO_ADDR
77973: GO 77995
// result := SortListByListDesc ( units , tmp ) ;
77975: LD_ADDR_VAR 0 3
77979: PUSH
77980: LD_VAR 0 1
77984: PPUSH
77985: LD_VAR 0 5
77989: PPUSH
77990: CALL_OW 77
77994: ST_TO_ADDR
// end ;
77995: LD_VAR 0 3
77999: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78000: LD_INT 0
78002: PPUSH
78003: PPUSH
// task := GetTaskList ( mech ) ;
78004: LD_ADDR_VAR 0 4
78008: PUSH
78009: LD_VAR 0 1
78013: PPUSH
78014: CALL_OW 437
78018: ST_TO_ADDR
// if not task then
78019: LD_VAR 0 4
78023: NOT
78024: IFFALSE 78028
// exit ;
78026: GO 78070
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78028: LD_ADDR_VAR 0 3
78032: PUSH
78033: LD_VAR 0 4
78037: PUSH
78038: LD_INT 1
78040: ARRAY
78041: PUSH
78042: LD_INT 1
78044: ARRAY
78045: PUSH
78046: LD_STRING r
78048: EQUAL
78049: PUSH
78050: LD_VAR 0 4
78054: PUSH
78055: LD_INT 1
78057: ARRAY
78058: PUSH
78059: LD_INT 4
78061: ARRAY
78062: PUSH
78063: LD_VAR 0 2
78067: EQUAL
78068: AND
78069: ST_TO_ADDR
// end ;
78070: LD_VAR 0 3
78074: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78075: LD_INT 0
78077: PPUSH
// SetDir ( unit , d ) ;
78078: LD_VAR 0 1
78082: PPUSH
78083: LD_VAR 0 4
78087: PPUSH
78088: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78092: LD_VAR 0 1
78096: PPUSH
78097: LD_VAR 0 2
78101: PPUSH
78102: LD_VAR 0 3
78106: PPUSH
78107: LD_VAR 0 5
78111: PPUSH
78112: CALL_OW 48
// end ;
78116: LD_VAR 0 6
78120: RET
// export function ToNaturalNumber ( number ) ; begin
78121: LD_INT 0
78123: PPUSH
// result := number div 1 ;
78124: LD_ADDR_VAR 0 2
78128: PUSH
78129: LD_VAR 0 1
78133: PUSH
78134: LD_INT 1
78136: DIV
78137: ST_TO_ADDR
// if number < 0 then
78138: LD_VAR 0 1
78142: PUSH
78143: LD_INT 0
78145: LESS
78146: IFFALSE 78156
// result := 0 ;
78148: LD_ADDR_VAR 0 2
78152: PUSH
78153: LD_INT 0
78155: ST_TO_ADDR
// end ;
78156: LD_VAR 0 2
78160: RET
// export function SortByClass ( units , class ) ; var un ; begin
78161: LD_INT 0
78163: PPUSH
78164: PPUSH
// if not units or not class then
78165: LD_VAR 0 1
78169: NOT
78170: PUSH
78171: LD_VAR 0 2
78175: NOT
78176: OR
78177: IFFALSE 78181
// exit ;
78179: GO 78276
// result := [ ] ;
78181: LD_ADDR_VAR 0 3
78185: PUSH
78186: EMPTY
78187: ST_TO_ADDR
// for un in units do
78188: LD_ADDR_VAR 0 4
78192: PUSH
78193: LD_VAR 0 1
78197: PUSH
78198: FOR_IN
78199: IFFALSE 78274
// if GetClass ( un ) = class then
78201: LD_VAR 0 4
78205: PPUSH
78206: CALL_OW 257
78210: PUSH
78211: LD_VAR 0 2
78215: EQUAL
78216: IFFALSE 78243
// result := Insert ( result , 1 , un ) else
78218: LD_ADDR_VAR 0 3
78222: PUSH
78223: LD_VAR 0 3
78227: PPUSH
78228: LD_INT 1
78230: PPUSH
78231: LD_VAR 0 4
78235: PPUSH
78236: CALL_OW 2
78240: ST_TO_ADDR
78241: GO 78272
// result := Replace ( result , result + 1 , un ) ;
78243: LD_ADDR_VAR 0 3
78247: PUSH
78248: LD_VAR 0 3
78252: PPUSH
78253: LD_VAR 0 3
78257: PUSH
78258: LD_INT 1
78260: PLUS
78261: PPUSH
78262: LD_VAR 0 4
78266: PPUSH
78267: CALL_OW 1
78271: ST_TO_ADDR
78272: GO 78198
78274: POP
78275: POP
// end ;
78276: LD_VAR 0 3
78280: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78281: LD_INT 0
78283: PPUSH
78284: PPUSH
78285: PPUSH
78286: PPUSH
78287: PPUSH
78288: PPUSH
78289: PPUSH
// result := [ ] ;
78290: LD_ADDR_VAR 0 4
78294: PUSH
78295: EMPTY
78296: ST_TO_ADDR
// if x - r < 0 then
78297: LD_VAR 0 1
78301: PUSH
78302: LD_VAR 0 3
78306: MINUS
78307: PUSH
78308: LD_INT 0
78310: LESS
78311: IFFALSE 78323
// min_x := 0 else
78313: LD_ADDR_VAR 0 8
78317: PUSH
78318: LD_INT 0
78320: ST_TO_ADDR
78321: GO 78339
// min_x := x - r ;
78323: LD_ADDR_VAR 0 8
78327: PUSH
78328: LD_VAR 0 1
78332: PUSH
78333: LD_VAR 0 3
78337: MINUS
78338: ST_TO_ADDR
// if y - r < 0 then
78339: LD_VAR 0 2
78343: PUSH
78344: LD_VAR 0 3
78348: MINUS
78349: PUSH
78350: LD_INT 0
78352: LESS
78353: IFFALSE 78365
// min_y := 0 else
78355: LD_ADDR_VAR 0 7
78359: PUSH
78360: LD_INT 0
78362: ST_TO_ADDR
78363: GO 78381
// min_y := y - r ;
78365: LD_ADDR_VAR 0 7
78369: PUSH
78370: LD_VAR 0 2
78374: PUSH
78375: LD_VAR 0 3
78379: MINUS
78380: ST_TO_ADDR
// max_x := x + r ;
78381: LD_ADDR_VAR 0 9
78385: PUSH
78386: LD_VAR 0 1
78390: PUSH
78391: LD_VAR 0 3
78395: PLUS
78396: ST_TO_ADDR
// max_y := y + r ;
78397: LD_ADDR_VAR 0 10
78401: PUSH
78402: LD_VAR 0 2
78406: PUSH
78407: LD_VAR 0 3
78411: PLUS
78412: ST_TO_ADDR
// for _x = min_x to max_x do
78413: LD_ADDR_VAR 0 5
78417: PUSH
78418: DOUBLE
78419: LD_VAR 0 8
78423: DEC
78424: ST_TO_ADDR
78425: LD_VAR 0 9
78429: PUSH
78430: FOR_TO
78431: IFFALSE 78532
// for _y = min_y to max_y do
78433: LD_ADDR_VAR 0 6
78437: PUSH
78438: DOUBLE
78439: LD_VAR 0 7
78443: DEC
78444: ST_TO_ADDR
78445: LD_VAR 0 10
78449: PUSH
78450: FOR_TO
78451: IFFALSE 78528
// begin if not ValidHex ( _x , _y ) then
78453: LD_VAR 0 5
78457: PPUSH
78458: LD_VAR 0 6
78462: PPUSH
78463: CALL_OW 488
78467: NOT
78468: IFFALSE 78472
// continue ;
78470: GO 78450
// if GetResourceTypeXY ( _x , _y ) then
78472: LD_VAR 0 5
78476: PPUSH
78477: LD_VAR 0 6
78481: PPUSH
78482: CALL_OW 283
78486: IFFALSE 78526
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78488: LD_ADDR_VAR 0 4
78492: PUSH
78493: LD_VAR 0 4
78497: PPUSH
78498: LD_VAR 0 4
78502: PUSH
78503: LD_INT 1
78505: PLUS
78506: PPUSH
78507: LD_VAR 0 5
78511: PUSH
78512: LD_VAR 0 6
78516: PUSH
78517: EMPTY
78518: LIST
78519: LIST
78520: PPUSH
78521: CALL_OW 1
78525: ST_TO_ADDR
// end ;
78526: GO 78450
78528: POP
78529: POP
78530: GO 78430
78532: POP
78533: POP
// end ;
78534: LD_VAR 0 4
78538: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78539: LD_INT 0
78541: PPUSH
78542: PPUSH
78543: PPUSH
78544: PPUSH
78545: PPUSH
78546: PPUSH
78547: PPUSH
78548: PPUSH
// if not units then
78549: LD_VAR 0 1
78553: NOT
78554: IFFALSE 78558
// exit ;
78556: GO 79069
// result := UnitFilter ( units , [ f_ok ] ) ;
78558: LD_ADDR_VAR 0 3
78562: PUSH
78563: LD_VAR 0 1
78567: PPUSH
78568: LD_INT 50
78570: PUSH
78571: EMPTY
78572: LIST
78573: PPUSH
78574: CALL_OW 72
78578: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78579: LD_ADDR_VAR 0 8
78583: PUSH
78584: LD_VAR 0 1
78588: PUSH
78589: LD_INT 1
78591: ARRAY
78592: PPUSH
78593: CALL_OW 255
78597: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78598: LD_ADDR_VAR 0 10
78602: PUSH
78603: LD_INT 29
78605: PUSH
78606: LD_EXP 53
78610: PUSH
78611: LD_INT 49
78613: PUSH
78614: EMPTY
78615: LIST
78616: LIST
78617: LIST
78618: ST_TO_ADDR
// if not result then
78619: LD_VAR 0 3
78623: NOT
78624: IFFALSE 78628
// exit ;
78626: GO 79069
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78628: LD_ADDR_VAR 0 5
78632: PUSH
78633: LD_INT 81
78635: PUSH
78636: LD_VAR 0 8
78640: PUSH
78641: EMPTY
78642: LIST
78643: LIST
78644: PPUSH
78645: CALL_OW 69
78649: ST_TO_ADDR
// for i in result do
78650: LD_ADDR_VAR 0 4
78654: PUSH
78655: LD_VAR 0 3
78659: PUSH
78660: FOR_IN
78661: IFFALSE 79067
// begin tag := GetTag ( i ) + 1 ;
78663: LD_ADDR_VAR 0 9
78667: PUSH
78668: LD_VAR 0 4
78672: PPUSH
78673: CALL_OW 110
78677: PUSH
78678: LD_INT 1
78680: PLUS
78681: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78682: LD_ADDR_VAR 0 7
78686: PUSH
78687: LD_VAR 0 4
78691: PPUSH
78692: CALL_OW 250
78696: PPUSH
78697: LD_VAR 0 4
78701: PPUSH
78702: CALL_OW 251
78706: PPUSH
78707: LD_INT 6
78709: PPUSH
78710: CALL 78281 0 3
78714: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78715: LD_VAR 0 7
78719: PUSH
78720: LD_VAR 0 4
78724: PPUSH
78725: CALL_OW 264
78729: PUSH
78730: LD_VAR 0 10
78734: IN
78735: NOT
78736: AND
78737: IFFALSE 78776
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78739: LD_VAR 0 4
78743: PPUSH
78744: LD_VAR 0 7
78748: PUSH
78749: LD_INT 1
78751: ARRAY
78752: PUSH
78753: LD_INT 1
78755: ARRAY
78756: PPUSH
78757: LD_VAR 0 7
78761: PUSH
78762: LD_INT 1
78764: ARRAY
78765: PUSH
78766: LD_INT 2
78768: ARRAY
78769: PPUSH
78770: CALL_OW 116
78774: GO 79065
// if path > tag then
78776: LD_VAR 0 2
78780: PUSH
78781: LD_VAR 0 9
78785: GREATER
78786: IFFALSE 78994
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78788: LD_ADDR_VAR 0 6
78792: PUSH
78793: LD_VAR 0 5
78797: PPUSH
78798: LD_INT 91
78800: PUSH
78801: LD_VAR 0 4
78805: PUSH
78806: LD_INT 12
78808: PUSH
78809: EMPTY
78810: LIST
78811: LIST
78812: LIST
78813: PPUSH
78814: CALL_OW 72
78818: ST_TO_ADDR
// if nearEnemy then
78819: LD_VAR 0 6
78823: IFFALSE 78892
// begin if GetWeapon ( i ) = ru_time_lapser then
78825: LD_VAR 0 4
78829: PPUSH
78830: CALL_OW 264
78834: PUSH
78835: LD_INT 49
78837: EQUAL
78838: IFFALSE 78866
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78840: LD_VAR 0 4
78844: PPUSH
78845: LD_VAR 0 6
78849: PPUSH
78850: LD_VAR 0 4
78854: PPUSH
78855: CALL_OW 74
78859: PPUSH
78860: CALL_OW 112
78864: GO 78890
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78866: LD_VAR 0 4
78870: PPUSH
78871: LD_VAR 0 6
78875: PPUSH
78876: LD_VAR 0 4
78880: PPUSH
78881: CALL_OW 74
78885: PPUSH
78886: CALL_OW 115
// end else
78890: GO 78992
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78892: LD_VAR 0 4
78896: PPUSH
78897: LD_VAR 0 2
78901: PUSH
78902: LD_VAR 0 9
78906: ARRAY
78907: PUSH
78908: LD_INT 1
78910: ARRAY
78911: PPUSH
78912: LD_VAR 0 2
78916: PUSH
78917: LD_VAR 0 9
78921: ARRAY
78922: PUSH
78923: LD_INT 2
78925: ARRAY
78926: PPUSH
78927: CALL_OW 297
78931: PUSH
78932: LD_INT 6
78934: GREATER
78935: IFFALSE 78978
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78937: LD_VAR 0 4
78941: PPUSH
78942: LD_VAR 0 2
78946: PUSH
78947: LD_VAR 0 9
78951: ARRAY
78952: PUSH
78953: LD_INT 1
78955: ARRAY
78956: PPUSH
78957: LD_VAR 0 2
78961: PUSH
78962: LD_VAR 0 9
78966: ARRAY
78967: PUSH
78968: LD_INT 2
78970: ARRAY
78971: PPUSH
78972: CALL_OW 114
78976: GO 78992
// SetTag ( i , tag ) ;
78978: LD_VAR 0 4
78982: PPUSH
78983: LD_VAR 0 9
78987: PPUSH
78988: CALL_OW 109
// end else
78992: GO 79065
// if enemy then
78994: LD_VAR 0 5
78998: IFFALSE 79065
// begin if GetWeapon ( i ) = ru_time_lapser then
79000: LD_VAR 0 4
79004: PPUSH
79005: CALL_OW 264
79009: PUSH
79010: LD_INT 49
79012: EQUAL
79013: IFFALSE 79041
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79015: LD_VAR 0 4
79019: PPUSH
79020: LD_VAR 0 5
79024: PPUSH
79025: LD_VAR 0 4
79029: PPUSH
79030: CALL_OW 74
79034: PPUSH
79035: CALL_OW 112
79039: GO 79065
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79041: LD_VAR 0 4
79045: PPUSH
79046: LD_VAR 0 5
79050: PPUSH
79051: LD_VAR 0 4
79055: PPUSH
79056: CALL_OW 74
79060: PPUSH
79061: CALL_OW 115
// end ; end ;
79065: GO 78660
79067: POP
79068: POP
// end ;
79069: LD_VAR 0 3
79073: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79074: LD_INT 0
79076: PPUSH
79077: PPUSH
79078: PPUSH
// if not unit or IsInUnit ( unit ) then
79079: LD_VAR 0 1
79083: NOT
79084: PUSH
79085: LD_VAR 0 1
79089: PPUSH
79090: CALL_OW 310
79094: OR
79095: IFFALSE 79099
// exit ;
79097: GO 79190
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79099: LD_ADDR_VAR 0 4
79103: PUSH
79104: LD_VAR 0 1
79108: PPUSH
79109: CALL_OW 250
79113: PPUSH
79114: LD_VAR 0 2
79118: PPUSH
79119: LD_INT 1
79121: PPUSH
79122: CALL_OW 272
79126: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79127: LD_ADDR_VAR 0 5
79131: PUSH
79132: LD_VAR 0 1
79136: PPUSH
79137: CALL_OW 251
79141: PPUSH
79142: LD_VAR 0 2
79146: PPUSH
79147: LD_INT 1
79149: PPUSH
79150: CALL_OW 273
79154: ST_TO_ADDR
// if ValidHex ( x , y ) then
79155: LD_VAR 0 4
79159: PPUSH
79160: LD_VAR 0 5
79164: PPUSH
79165: CALL_OW 488
79169: IFFALSE 79190
// ComTurnXY ( unit , x , y ) ;
79171: LD_VAR 0 1
79175: PPUSH
79176: LD_VAR 0 4
79180: PPUSH
79181: LD_VAR 0 5
79185: PPUSH
79186: CALL_OW 118
// end ;
79190: LD_VAR 0 3
79194: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79195: LD_INT 0
79197: PPUSH
79198: PPUSH
// result := false ;
79199: LD_ADDR_VAR 0 3
79203: PUSH
79204: LD_INT 0
79206: ST_TO_ADDR
// if not units then
79207: LD_VAR 0 2
79211: NOT
79212: IFFALSE 79216
// exit ;
79214: GO 79261
// for i in units do
79216: LD_ADDR_VAR 0 4
79220: PUSH
79221: LD_VAR 0 2
79225: PUSH
79226: FOR_IN
79227: IFFALSE 79259
// if See ( side , i ) then
79229: LD_VAR 0 1
79233: PPUSH
79234: LD_VAR 0 4
79238: PPUSH
79239: CALL_OW 292
79243: IFFALSE 79257
// begin result := true ;
79245: LD_ADDR_VAR 0 3
79249: PUSH
79250: LD_INT 1
79252: ST_TO_ADDR
// exit ;
79253: POP
79254: POP
79255: GO 79261
// end ;
79257: GO 79226
79259: POP
79260: POP
// end ;
79261: LD_VAR 0 3
79265: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79266: LD_INT 0
79268: PPUSH
79269: PPUSH
79270: PPUSH
79271: PPUSH
// if not unit or not points then
79272: LD_VAR 0 1
79276: NOT
79277: PUSH
79278: LD_VAR 0 2
79282: NOT
79283: OR
79284: IFFALSE 79288
// exit ;
79286: GO 79378
// dist := 99999 ;
79288: LD_ADDR_VAR 0 5
79292: PUSH
79293: LD_INT 99999
79295: ST_TO_ADDR
// for i in points do
79296: LD_ADDR_VAR 0 4
79300: PUSH
79301: LD_VAR 0 2
79305: PUSH
79306: FOR_IN
79307: IFFALSE 79376
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79309: LD_ADDR_VAR 0 6
79313: PUSH
79314: LD_VAR 0 1
79318: PPUSH
79319: LD_VAR 0 4
79323: PUSH
79324: LD_INT 1
79326: ARRAY
79327: PPUSH
79328: LD_VAR 0 4
79332: PUSH
79333: LD_INT 2
79335: ARRAY
79336: PPUSH
79337: CALL_OW 297
79341: ST_TO_ADDR
// if tmpDist < dist then
79342: LD_VAR 0 6
79346: PUSH
79347: LD_VAR 0 5
79351: LESS
79352: IFFALSE 79374
// begin result := i ;
79354: LD_ADDR_VAR 0 3
79358: PUSH
79359: LD_VAR 0 4
79363: ST_TO_ADDR
// dist := tmpDist ;
79364: LD_ADDR_VAR 0 5
79368: PUSH
79369: LD_VAR 0 6
79373: ST_TO_ADDR
// end ; end ;
79374: GO 79306
79376: POP
79377: POP
// end ;
79378: LD_VAR 0 3
79382: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79383: LD_INT 0
79385: PPUSH
// uc_side := side ;
79386: LD_ADDR_OWVAR 20
79390: PUSH
79391: LD_VAR 0 1
79395: ST_TO_ADDR
// uc_nation := 3 ;
79396: LD_ADDR_OWVAR 21
79400: PUSH
79401: LD_INT 3
79403: ST_TO_ADDR
// vc_chassis := 25 ;
79404: LD_ADDR_OWVAR 37
79408: PUSH
79409: LD_INT 25
79411: ST_TO_ADDR
// vc_engine := engine_siberite ;
79412: LD_ADDR_OWVAR 39
79416: PUSH
79417: LD_INT 3
79419: ST_TO_ADDR
// vc_control := control_computer ;
79420: LD_ADDR_OWVAR 38
79424: PUSH
79425: LD_INT 3
79427: ST_TO_ADDR
// vc_weapon := 59 ;
79428: LD_ADDR_OWVAR 40
79432: PUSH
79433: LD_INT 59
79435: ST_TO_ADDR
// result := CreateVehicle ;
79436: LD_ADDR_VAR 0 5
79440: PUSH
79441: CALL_OW 45
79445: ST_TO_ADDR
// SetDir ( result , d ) ;
79446: LD_VAR 0 5
79450: PPUSH
79451: LD_VAR 0 4
79455: PPUSH
79456: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79460: LD_VAR 0 5
79464: PPUSH
79465: LD_VAR 0 2
79469: PPUSH
79470: LD_VAR 0 3
79474: PPUSH
79475: LD_INT 0
79477: PPUSH
79478: CALL_OW 48
// end ;
79482: LD_VAR 0 5
79486: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79487: LD_INT 0
79489: PPUSH
79490: PPUSH
79491: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79492: LD_ADDR_VAR 0 2
79496: PUSH
79497: LD_INT 0
79499: PUSH
79500: LD_INT 0
79502: PUSH
79503: LD_INT 0
79505: PUSH
79506: LD_INT 0
79508: PUSH
79509: EMPTY
79510: LIST
79511: LIST
79512: LIST
79513: LIST
79514: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79515: LD_VAR 0 1
79519: NOT
79520: PUSH
79521: LD_VAR 0 1
79525: PPUSH
79526: CALL_OW 264
79530: PUSH
79531: LD_INT 12
79533: PUSH
79534: LD_INT 51
79536: PUSH
79537: LD_INT 32
79539: PUSH
79540: LD_EXP 50
79544: PUSH
79545: EMPTY
79546: LIST
79547: LIST
79548: LIST
79549: LIST
79550: IN
79551: NOT
79552: OR
79553: IFFALSE 79557
// exit ;
79555: GO 79655
// for i := 1 to 3 do
79557: LD_ADDR_VAR 0 3
79561: PUSH
79562: DOUBLE
79563: LD_INT 1
79565: DEC
79566: ST_TO_ADDR
79567: LD_INT 3
79569: PUSH
79570: FOR_TO
79571: IFFALSE 79653
// begin tmp := GetCargo ( cargo , i ) ;
79573: LD_ADDR_VAR 0 4
79577: PUSH
79578: LD_VAR 0 1
79582: PPUSH
79583: LD_VAR 0 3
79587: PPUSH
79588: CALL_OW 289
79592: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79593: LD_ADDR_VAR 0 2
79597: PUSH
79598: LD_VAR 0 2
79602: PPUSH
79603: LD_VAR 0 3
79607: PPUSH
79608: LD_VAR 0 4
79612: PPUSH
79613: CALL_OW 1
79617: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79618: LD_ADDR_VAR 0 2
79622: PUSH
79623: LD_VAR 0 2
79627: PPUSH
79628: LD_INT 4
79630: PPUSH
79631: LD_VAR 0 2
79635: PUSH
79636: LD_INT 4
79638: ARRAY
79639: PUSH
79640: LD_VAR 0 4
79644: PLUS
79645: PPUSH
79646: CALL_OW 1
79650: ST_TO_ADDR
// end ;
79651: GO 79570
79653: POP
79654: POP
// end ; end_of_file
79655: LD_VAR 0 2
79659: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79660: LD_VAR 0 1
79664: PUSH
79665: LD_INT 200
79667: DOUBLE
79668: GREATEREQUAL
79669: IFFALSE 79677
79671: LD_INT 299
79673: DOUBLE
79674: LESSEQUAL
79675: IFTRUE 79679
79677: GO 79711
79679: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79680: LD_VAR 0 1
79684: PPUSH
79685: LD_VAR 0 2
79689: PPUSH
79690: LD_VAR 0 3
79694: PPUSH
79695: LD_VAR 0 4
79699: PPUSH
79700: LD_VAR 0 5
79704: PPUSH
79705: CALL 35000 0 5
79709: GO 79788
79711: LD_INT 300
79713: DOUBLE
79714: GREATEREQUAL
79715: IFFALSE 79723
79717: LD_INT 399
79719: DOUBLE
79720: LESSEQUAL
79721: IFTRUE 79725
79723: GO 79787
79725: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79726: LD_VAR 0 1
79730: PPUSH
79731: LD_VAR 0 2
79735: PPUSH
79736: LD_VAR 0 3
79740: PPUSH
79741: LD_VAR 0 4
79745: PPUSH
79746: LD_VAR 0 5
79750: PPUSH
79751: LD_VAR 0 6
79755: PPUSH
79756: LD_VAR 0 7
79760: PPUSH
79761: LD_VAR 0 8
79765: PPUSH
79766: LD_VAR 0 9
79770: PPUSH
79771: LD_VAR 0 10
79775: PPUSH
79776: LD_VAR 0 11
79780: PPUSH
79781: CALL 32642 0 11
79785: GO 79788
79787: POP
// end ;
79788: PPOPN 11
79790: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79791: LD_VAR 0 1
79795: PPUSH
79796: LD_VAR 0 2
79800: PPUSH
79801: LD_VAR 0 3
79805: PPUSH
79806: LD_VAR 0 4
79810: PPUSH
79811: LD_VAR 0 5
79815: PPUSH
79816: CALL 34736 0 5
// end ; end_of_file
79820: PPOPN 5
79822: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79823: LD_VAR 0 1
79827: PPUSH
79828: LD_VAR 0 2
79832: PPUSH
79833: LD_VAR 0 3
79837: PPUSH
79838: LD_VAR 0 4
79842: PPUSH
79843: LD_VAR 0 5
79847: PPUSH
79848: LD_VAR 0 6
79852: PPUSH
79853: CALL 20335 0 6
// end ;
79857: PPOPN 6
79859: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79860: CALL 20310 0 0
// end ;
79864: PPOPN 1
79866: END
