// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7206 0 0
// CreateNature ;
  57: CALL 20560 0 0
// PrepareRussian ;
  61: CALL 5705 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 10525 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 41014 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 41014 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 41014 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 41014 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 41014 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 41014 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 41014 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 41014 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 41014 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 41014 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 41014 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 41014 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 3993
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3785: LD_EXP 1
3789: PUSH
3790: LD_INT 55
3792: PUSH
3793: EMPTY
3794: LIST
3795: PPUSH
3796: CALL_OW 69
3800: IN
3801: IFFALSE 3824
// begin ComMoveUnit ( JMM , Joan ) ;
3803: LD_EXP 1
3807: PPUSH
3808: LD_EXP 16
3812: PPUSH
3813: CALL_OW 112
// wait ( 0 0$05 ) ;
3817: LD_INT 175
3819: PPUSH
3820: CALL_OW 67
// end ; ComExit ( JMM ) ;
3824: LD_EXP 1
3828: PPUSH
3829: CALL 78861 0 1
// wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3847: LD_EXP 16
3851: PUSH
3852: LD_VAR 0 3
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PPUSH
3861: LD_EXP 1
3865: PPUSH
3866: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3870: LD_EXP 16
3874: PPUSH
3875: LD_EXP 1
3879: PPUSH
3880: CALL_OW 296
3884: PUSH
3885: LD_INT 5
3887: LESS
3888: IFFALSE 3840
// ComTurnUnit ( Joan , JMM ) ;
3890: LD_EXP 16
3894: PPUSH
3895: LD_EXP 1
3899: PPUSH
3900: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 119
// wait ( 0 0$1 ) ;
3918: LD_INT 35
3920: PPUSH
3921: CALL_OW 67
// DialogueOn ;
3925: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3929: LD_EXP 16
3933: PPUSH
3934: LD_STRING D5a-Joan-4
3936: PPUSH
3937: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3941: LD_EXP 1
3945: PPUSH
3946: LD_STRING D5a-JMM-4
3948: PPUSH
3949: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3953: LD_EXP 16
3957: PPUSH
3958: LD_STRING D5a-Joan-5
3960: PPUSH
3961: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3965: LD_EXP 1
3969: PPUSH
3970: LD_STRING D5a-JMM-5
3972: PPUSH
3973: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3977: LD_EXP 16
3981: PPUSH
3982: LD_STRING D5a-Joan-6
3984: PPUSH
3985: CALL_OW 88
// DialogueOff ;
3989: CALL_OW 7
// end ; DialogueOn ;
3993: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3997: LD_EXP 1
4001: PPUSH
4002: LD_STRING D6-JMM-1
4004: PPUSH
4005: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4009: LD_EXP 16
4013: PPUSH
4014: LD_STRING D6-Joan-1
4016: PPUSH
4017: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4021: LD_EXP 1
4025: PPUSH
4026: LD_STRING D6-JMM-2
4028: PPUSH
4029: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4033: LD_EXP 16
4037: PPUSH
4038: LD_STRING D6-Joan-2
4040: PPUSH
4041: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4045: LD_EXP 1
4049: PPUSH
4050: LD_STRING D6-JMM-3
4052: PPUSH
4053: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4057: LD_EXP 16
4061: PPUSH
4062: LD_STRING D6-Joan-3
4064: PPUSH
4065: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4069: LD_EXP 1
4073: PPUSH
4074: LD_STRING D6-JMM-4
4076: PPUSH
4077: CALL_OW 88
// DialogueOff ;
4081: CALL_OW 7
// InGameOff ;
4085: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4089: LD_EXP 16
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4101: LD_STRING MJ
4103: PPUSH
4104: CALL_OW 337
// joanStatus = 1 ;
4108: LD_ADDR_EXP 17
4112: PUSH
4113: LD_INT 1
4115: ST_TO_ADDR
// blockSpawn = 0 ;
4116: LD_ADDR_EXP 30
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// end ;
4124: LD_VAR 0 1
4128: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4129: LD_INT 0
4131: PPUSH
4132: PPUSH
// if not number or number > 8 then
4133: LD_VAR 0 1
4137: NOT
4138: PUSH
4139: LD_VAR 0 1
4143: PUSH
4144: LD_INT 8
4146: GREATER
4147: OR
4148: IFFALSE 4152
// exit ;
4150: GO 5700
// repeat wait ( 0 0$7 ) ;
4152: LD_INT 245
4154: PPUSH
4155: CALL_OW 67
// until blockSpawn = 0 ;
4159: LD_EXP 30
4163: PUSH
4164: LD_INT 0
4166: EQUAL
4167: IFFALSE 4152
// uc_side := 1 ;
4169: LD_ADDR_OWVAR 20
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// uc_nation := 1 ;
4177: LD_ADDR_OWVAR 21
4181: PUSH
4182: LD_INT 1
4184: ST_TO_ADDR
// InitHc ;
4185: CALL_OW 19
// if number = 1 then
4189: LD_VAR 0 1
4193: PUSH
4194: LD_INT 1
4196: EQUAL
4197: IFFALSE 4373
// begin hc_class := 3 ;
4199: LD_ADDR_OWVAR 28
4203: PUSH
4204: LD_INT 3
4206: ST_TO_ADDR
// hc_sex := sex_male ;
4207: LD_ADDR_OWVAR 27
4211: PUSH
4212: LD_INT 1
4214: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4215: LD_ADDR_OWVAR 33
4219: PUSH
4220: LD_STRING SecondCharsGal
4222: ST_TO_ADDR
// hc_face_number := 55 ;
4223: LD_ADDR_OWVAR 34
4227: PUSH
4228: LD_INT 55
4230: ST_TO_ADDR
// hc_name := George McCarthy ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING George McCarthy
4238: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4239: LD_ADDR_OWVAR 29
4243: PUSH
4244: LD_INT 11
4246: PUSH
4247: LD_INT 10
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4254: LD_ADDR_OWVAR 30
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 2
4267: PUSH
4268: LD_INT 0
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4277: LD_ADDR_OWVAR 31
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: LD_INT 2
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: ST_TO_ADDR
// un = CreateHuman ;
4300: LD_ADDR_VAR 0 3
4304: PUSH
4305: CALL_OW 44
4309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4310: LD_VAR 0 3
4314: PPUSH
4315: LD_INT 23
4317: PPUSH
4318: LD_INT 1
4320: PPUSH
4321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4325: LD_VAR 0 3
4329: PPUSH
4330: CALL_OW 87
// wait ( 0 0$1 ) ;
4334: LD_INT 35
4336: PPUSH
4337: CALL_OW 67
// DialogueOn ;
4341: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4345: LD_VAR 0 3
4349: PPUSH
4350: LD_STRING D11d-Sol4-1
4352: PPUSH
4353: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4357: LD_EXP 1
4361: PPUSH
4362: LD_STRING D11d-JMM-1
4364: PPUSH
4365: CALL_OW 88
// DialogueOff ;
4369: CALL_OW 7
// end ; if number = 2 then
4373: LD_VAR 0 1
4377: PUSH
4378: LD_INT 2
4380: EQUAL
4381: IFFALSE 4557
// begin hc_class := 1 ;
4383: LD_ADDR_OWVAR 28
4387: PUSH
4388: LD_INT 1
4390: ST_TO_ADDR
// hc_sex := sex_male ;
4391: LD_ADDR_OWVAR 27
4395: PUSH
4396: LD_INT 1
4398: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4399: LD_ADDR_OWVAR 33
4403: PUSH
4404: LD_STRING AmGalRemake
4406: ST_TO_ADDR
// hc_face_number := 7 ;
4407: LD_ADDR_OWVAR 34
4411: PUSH
4412: LD_INT 7
4414: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4415: LD_ADDR_OWVAR 26
4419: PUSH
4420: LD_STRING Bobby Jordan
4422: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4423: LD_ADDR_OWVAR 29
4427: PUSH
4428: LD_INT 9
4430: PUSH
4431: LD_INT 11
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4438: LD_ADDR_OWVAR 30
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 0
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4461: LD_ADDR_OWVAR 31
4465: PUSH
4466: LD_INT 2
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
// un = CreateHuman ;
4484: LD_ADDR_VAR 0 3
4488: PUSH
4489: CALL_OW 44
4493: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4494: LD_VAR 0 3
4498: PPUSH
4499: LD_INT 24
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: CALL_OW 49
// wait ( 0 0$1 ) ;
4509: LD_INT 35
4511: PPUSH
4512: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4516: LD_VAR 0 3
4520: PPUSH
4521: CALL_OW 87
// DialogueOn ;
4525: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4529: LD_VAR 0 3
4533: PPUSH
4534: LD_STRING D11b-Sol3-1
4536: PPUSH
4537: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4541: LD_EXP 1
4545: PPUSH
4546: LD_STRING D11b-JMM-1
4548: PPUSH
4549: CALL_OW 88
// DialogueOff ;
4553: CALL_OW 7
// end ; if number = 3 then
4557: LD_VAR 0 1
4561: PUSH
4562: LD_INT 3
4564: EQUAL
4565: IFFALSE 4729
// begin hc_class := 1 ;
4567: LD_ADDR_OWVAR 28
4571: PUSH
4572: LD_INT 1
4574: ST_TO_ADDR
// hc_sex := sex_male ;
4575: LD_ADDR_OWVAR 27
4579: PUSH
4580: LD_INT 1
4582: ST_TO_ADDR
// hc_gallery := DJ ;
4583: LD_ADDR_OWVAR 33
4587: PUSH
4588: LD_STRING DJ
4590: ST_TO_ADDR
// hc_face_number := 1 ;
4591: LD_ADDR_OWVAR 34
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// hc_name := Darius Dajay ;
4599: LD_ADDR_OWVAR 26
4603: PUSH
4604: LD_STRING Darius Dajay
4606: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4607: LD_ADDR_OWVAR 29
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: LD_INT 11
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4622: LD_ADDR_OWVAR 30
4626: PUSH
4627: LD_INT 2
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: LD_INT 0
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4645: LD_ADDR_OWVAR 31
4649: PUSH
4650: LD_INT 4
4652: PUSH
4653: LD_INT 0
4655: PUSH
4656: LD_INT 1
4658: PUSH
4659: LD_INT 0
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: ST_TO_ADDR
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 25
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4693: LD_VAR 0 3
4697: PPUSH
4698: CALL_OW 87
// wait ( 0 0$1 ) ;
4702: LD_INT 35
4704: PPUSH
4705: CALL_OW 67
// DialogueOn ;
4709: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4713: LD_VAR 0 3
4717: PPUSH
4718: LD_STRING D11f-Sol5-1
4720: PPUSH
4721: CALL_OW 88
// DialogueOff ;
4725: CALL_OW 7
// end ; if number = 4 then
4729: LD_VAR 0 1
4733: PUSH
4734: LD_INT 4
4736: EQUAL
4737: IFFALSE 4874
// begin hc_class := 2 ;
4739: LD_ADDR_OWVAR 28
4743: PUSH
4744: LD_INT 2
4746: ST_TO_ADDR
// hc_sex := sex_female ;
4747: LD_ADDR_OWVAR 27
4751: PUSH
4752: LD_INT 2
4754: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4755: LD_ADDR_OWVAR 33
4759: PUSH
4760: LD_STRING SecondCharsGal
4762: ST_TO_ADDR
// hc_face_number := 46 ;
4763: LD_ADDR_OWVAR 34
4767: PUSH
4768: LD_INT 46
4770: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4771: LD_ADDR_OWVAR 26
4775: PUSH
4776: LD_STRING Sylvia Creak
4778: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4779: LD_ADDR_OWVAR 29
4783: PUSH
4784: LD_INT 10
4786: PUSH
4787: LD_INT 9
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4794: LD_ADDR_OWVAR 30
4798: PUSH
4799: LD_INT 0
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4817: LD_ADDR_OWVAR 31
4821: PUSH
4822: LD_INT 1
4824: PUSH
4825: LD_INT 3
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: ST_TO_ADDR
// un = CreateHuman ;
4840: LD_ADDR_VAR 0 3
4844: PUSH
4845: CALL_OW 44
4849: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4850: LD_VAR 0 3
4854: PPUSH
4855: LD_INT 26
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4865: LD_VAR 0 3
4869: PPUSH
4870: CALL_OW 87
// end ; if number = 5 then
4874: LD_VAR 0 1
4878: PUSH
4879: LD_INT 5
4881: EQUAL
4882: IFFALSE 5058
// begin hc_class := 1 ;
4884: LD_ADDR_OWVAR 28
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
// hc_sex := sex_female ;
4892: LD_ADDR_OWVAR 27
4896: PUSH
4897: LD_INT 2
4899: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4900: LD_ADDR_OWVAR 33
4904: PUSH
4905: LD_STRING SecondCharsGal
4907: ST_TO_ADDR
// hc_face_number := 37 ;
4908: LD_ADDR_OWVAR 34
4912: PUSH
4913: LD_INT 37
4915: ST_TO_ADDR
// hc_name := Malena Johnson ;
4916: LD_ADDR_OWVAR 26
4920: PUSH
4921: LD_STRING Malena Johnson
4923: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4924: LD_ADDR_OWVAR 29
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: LD_INT 10
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4939: LD_ADDR_OWVAR 30
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 1
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: LD_INT 0
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4962: LD_ADDR_OWVAR 31
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// un = CreateHuman ;
4985: LD_ADDR_VAR 0 3
4989: PUSH
4990: CALL_OW 44
4994: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4995: LD_VAR 0 3
4999: PPUSH
5000: LD_INT 27
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5010: LD_VAR 0 3
5014: PPUSH
5015: CALL_OW 87
// wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// DialogueOn ;
5026: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5030: LD_VAR 0 3
5034: PPUSH
5035: LD_STRING D11c-FSol3-1
5037: PPUSH
5038: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5042: LD_EXP 1
5046: PPUSH
5047: LD_STRING D11c-JMM-1
5049: PPUSH
5050: CALL_OW 88
// DialogueOff ;
5054: CALL_OW 7
// end ; if number = 6 then
5058: LD_VAR 0 1
5062: PUSH
5063: LD_INT 6
5065: EQUAL
5066: IFFALSE 5240
// begin hc_class := 1 ;
5068: LD_ADDR_OWVAR 28
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// hc_sex := sex_male ;
5076: LD_ADDR_OWVAR 27
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5084: LD_ADDR_OWVAR 33
5088: PUSH
5089: LD_STRING AmGalRemake
5091: ST_TO_ADDR
// hc_face_number := 1 ;
5092: LD_ADDR_OWVAR 34
5096: PUSH
5097: LD_INT 1
5099: ST_TO_ADDR
// hc_name := Charles Brown ;
5100: LD_ADDR_OWVAR 26
5104: PUSH
5105: LD_STRING Charles Brown
5107: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5108: LD_ADDR_OWVAR 29
5112: PUSH
5113: LD_INT 12
5115: PUSH
5116: LD_INT 11
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5123: LD_ADDR_OWVAR 30
5127: PUSH
5128: LD_INT 2
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: LD_INT 0
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5146: LD_ADDR_OWVAR 31
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: LD_INT 0
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: ST_TO_ADDR
// un = CreateHuman ;
5169: LD_ADDR_VAR 0 3
5173: PUSH
5174: CALL_OW 44
5178: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_INT 28
5186: PPUSH
5187: LD_INT 1
5189: PPUSH
5190: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5194: LD_VAR 0 3
5198: PPUSH
5199: CALL_OW 87
// wait ( 0 0$1 ) ;
5203: LD_INT 35
5205: PPUSH
5206: CALL_OW 67
// DialogueOn ;
5210: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5214: LD_VAR 0 3
5218: PPUSH
5219: LD_STRING D4-Sol1-5
5221: PPUSH
5222: CALL_OW 88
// DialogueOff ;
5226: CALL_OW 7
// tempCharles = un ;
5230: LD_ADDR_EXP 14
5234: PUSH
5235: LD_VAR 0 3
5239: ST_TO_ADDR
// end ; if number = 7 then
5240: LD_VAR 0 1
5244: PUSH
5245: LD_INT 7
5247: EQUAL
5248: IFFALSE 5520
// begin hc_class := 1 ;
5250: LD_ADDR_OWVAR 28
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// hc_sex := sex_female ;
5258: LD_ADDR_OWVAR 27
5262: PUSH
5263: LD_INT 2
5265: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5266: LD_ADDR_OWVAR 33
5270: PUSH
5271: LD_STRING AmGalRemake
5273: ST_TO_ADDR
// hc_face_number := 2 ;
5274: LD_ADDR_OWVAR 34
5278: PUSH
5279: LD_INT 2
5281: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5282: LD_ADDR_OWVAR 26
5286: PUSH
5287: LD_STRING Rebecca Macdonald
5289: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5290: LD_ADDR_OWVAR 29
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: LD_INT 10
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5305: LD_ADDR_OWVAR 30
5309: PUSH
5310: LD_INT 1
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 0
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5328: LD_ADDR_OWVAR 31
5332: PUSH
5333: LD_INT 1
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 0
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: ST_TO_ADDR
// un = CreateHuman ;
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: CALL_OW 44
5360: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5361: LD_VAR 0 3
5365: PPUSH
5366: LD_INT 29
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: CALL_OW 87
// wait ( 0 0$1 ) ;
5385: LD_INT 35
5387: PPUSH
5388: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5392: LD_INT 30
5394: PPUSH
5395: LD_INT 22
5397: PUSH
5398: LD_INT 3
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PPUSH
5405: CALL_OW 70
5409: IFFALSE 5520
// begin DialogueOn ;
5411: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5415: LD_VAR 0 3
5419: PPUSH
5420: CALL_OW 250
5424: PPUSH
5425: LD_VAR 0 3
5429: PPUSH
5430: CALL_OW 251
5434: PPUSH
5435: LD_INT 1
5437: PPUSH
5438: LD_INT 15
5440: NEG
5441: PPUSH
5442: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5446: LD_VAR 0 3
5450: PPUSH
5451: CALL_OW 250
5455: PPUSH
5456: LD_VAR 0 3
5460: PPUSH
5461: CALL_OW 251
5465: PPUSH
5466: LD_INT 1
5468: PPUSH
5469: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5473: LD_VAR 0 3
5477: PPUSH
5478: LD_STRING D11a-FSol2-1
5480: PPUSH
5481: CALL_OW 88
// DialogueOff ;
5485: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5489: LD_INT 3
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 471
// wait ( 0 0$2 ) ;
5501: LD_INT 70
5503: PPUSH
5504: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5508: LD_INT 3
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: CALL_OW 472
// end ; end ; if number = 8 then
5520: LD_VAR 0 1
5524: PUSH
5525: LD_INT 8
5527: EQUAL
5528: IFFALSE 5684
// begin hc_class := 1 ;
5530: LD_ADDR_OWVAR 28
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// hc_sex := sex_female ;
5538: LD_ADDR_OWVAR 27
5542: PUSH
5543: LD_INT 2
5545: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5546: LD_ADDR_OWVAR 33
5550: PUSH
5551: LD_STRING SecondCharsGal
5553: ST_TO_ADDR
// hc_face_number := 45 ;
5554: LD_ADDR_OWVAR 34
5558: PUSH
5559: LD_INT 45
5561: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5562: LD_ADDR_OWVAR 26
5566: PUSH
5567: LD_STRING Margherite Simpson
5569: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5570: LD_ADDR_OWVAR 29
5574: PUSH
5575: LD_INT 12
5577: PUSH
5578: LD_INT 10
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5585: LD_ADDR_OWVAR 30
5589: PUSH
5590: LD_INT 1
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: LD_INT 0
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5608: LD_ADDR_OWVAR 31
5612: PUSH
5613: LD_INT 1
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: ST_TO_ADDR
// un = CreateHuman ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 44
5640: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5641: LD_VAR 0 3
5645: PPUSH
5646: LD_INT 33
5648: PPUSH
5649: LD_INT 1
5651: PPUSH
5652: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5656: LD_VAR 0 3
5660: PPUSH
5661: CALL_OW 87
// wait ( 0 0$1 ) ;
5665: LD_INT 35
5667: PPUSH
5668: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5672: LD_VAR 0 3
5676: PPUSH
5677: LD_STRING D11e-FSol4-1
5679: PPUSH
5680: CALL_OW 88
// end ; arrivals := arrivals union un ;
5684: LD_ADDR_EXP 45
5688: PUSH
5689: LD_EXP 45
5693: PUSH
5694: LD_VAR 0 3
5698: UNION
5699: ST_TO_ADDR
// end ; end_of_file
5700: LD_VAR 0 2
5704: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
// ruAttackers := [ ] ;
5709: LD_ADDR_EXP 48
5713: PUSH
5714: EMPTY
5715: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5716: LD_ADDR_EXP 49
5720: PUSH
5721: EMPTY
5722: ST_TO_ADDR
// if Difficulty < 3 then
5723: LD_OWVAR 67
5727: PUSH
5728: LD_INT 3
5730: LESS
5731: IFFALSE 5748
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5733: LD_INT 130
5735: PPUSH
5736: LD_INT 81
5738: PPUSH
5739: CALL_OW 428
5743: PPUSH
5744: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: LD_INT 2
5756: PPUSH
5757: LD_EXP 35
5761: PPUSH
5762: LD_EXP 36
5766: PPUSH
5767: CALL_OW 12
5771: PPUSH
5772: LD_INT 2
5774: PPUSH
5775: LD_INT 4
5777: PPUSH
5778: CALL 6960 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 3
5787: PPUSH
5788: LD_INT 8
5790: PPUSH
5791: LD_EXP 35
5795: PPUSH
5796: LD_EXP 36
5800: PPUSH
5801: CALL_OW 12
5805: PPUSH
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 4
5811: PPUSH
5812: CALL 6960 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 3
5821: PPUSH
5822: LD_INT 67
5824: PPUSH
5825: LD_EXP 35
5829: PPUSH
5830: LD_EXP 36
5834: PPUSH
5835: CALL_OW 12
5839: PPUSH
5840: LD_INT 1
5842: PPUSH
5843: LD_INT 2
5845: PPUSH
5846: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 3
5855: PPUSH
5856: LD_INT 21
5858: PPUSH
5859: LD_EXP 35
5863: PPUSH
5864: LD_EXP 36
5868: PPUSH
5869: CALL_OW 12
5873: PPUSH
5874: LD_INT 3
5876: PPUSH
5877: LD_INT 6
5879: PPUSH
5880: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 3
5889: PPUSH
5890: LD_INT 17
5892: PPUSH
5893: LD_EXP 35
5897: PPUSH
5898: LD_EXP 36
5902: PPUSH
5903: CALL_OW 12
5907: PPUSH
5908: LD_INT 3
5910: PPUSH
5911: LD_INT 6
5913: PPUSH
5914: CALL 6960 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 3
5923: PPUSH
5924: LD_INT 32
5926: PPUSH
5927: LD_EXP 35
5931: PPUSH
5932: LD_EXP 36
5936: PPUSH
5937: CALL_OW 12
5941: PPUSH
5942: LD_INT 4
5944: PPUSH
5945: LD_INT 2
5947: PPUSH
5948: CALL 6960 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 21
5969: PUSH
5970: LD_INT 3
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 30
5979: PUSH
5980: LD_INT 32
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 69
5996: PUSH
5997: FOR_IN
5998: IFFALSE 6038
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6000: LD_INT 3
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_EXP 35
6015: PPUSH
6016: LD_EXP 36
6020: PPUSH
6021: CALL_OW 12
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 1
6031: PPUSH
6032: CALL 6960 0 6
6036: GO 5997
6038: POP
6039: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_INT 3
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 21
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 30
6067: PUSH
6068: LD_INT 31
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: PPUSH
6080: CALL_OW 69
6084: PUSH
6085: FOR_IN
6086: IFFALSE 6114
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6088: LD_EXP 35
6092: PPUSH
6093: LD_EXP 36
6097: PPUSH
6098: CALL_OW 12
6102: PPUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: CALL 7070 0 2
6112: GO 6085
6114: POP
6115: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6116: LD_INT 3
6118: PPUSH
6119: LD_INT 32
6121: PPUSH
6122: LD_INT 3
6124: PPUSH
6125: CALL 7349 0 3
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6239
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
// begin enable ;
6170: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 32
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: PUSH
6205: FOR_IN
6206: IFFALSE 6237
// if GetFuel ( i ) < 3 then
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 261
6217: PUSH
6218: LD_INT 3
6220: LESS
6221: IFFALSE 6235
// SetFuel ( i , 3 ) ;
6223: LD_VAR 0 1
6227: PPUSH
6228: LD_INT 3
6230: PPUSH
6231: CALL_OW 240
6235: GO 6205
6237: POP
6238: POP
// end ;
6239: PPOPN 1
6241: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 1
6249: GREATER
6250: IFFALSE 6819
6252: GO 6254
6254: DISABLE
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
6259: PPUSH
6260: PPUSH
// begin uc_side := 3 ;
6261: LD_ADDR_OWVAR 20
6265: PUSH
6266: LD_INT 3
6268: ST_TO_ADDR
// uc_nation := 3 ;
6269: LD_ADDR_OWVAR 21
6273: PUSH
6274: LD_INT 3
6276: ST_TO_ADDR
// for i := 1 to 2 do
6277: LD_ADDR_VAR 0 1
6281: PUSH
6282: DOUBLE
6283: LD_INT 1
6285: DEC
6286: ST_TO_ADDR
6287: LD_INT 2
6289: PUSH
6290: FOR_TO
6291: IFFALSE 6405
// begin InitHC_All ( ) ;
6293: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 5
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: LD_INT 6
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_OWVAR 67
6322: ARRAY
6323: PPUSH
6324: CALL_OW 381
// un := CreateHuman ;
6328: LD_ADDR_VAR 0 2
6332: PUSH
6333: CALL_OW 44
6337: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6338: LD_VAR 0 2
6342: PPUSH
6343: LD_INT 91
6345: PPUSH
6346: LD_INT 87
6348: PPUSH
6349: LD_INT 3
6351: PPUSH
6352: LD_INT 0
6354: PPUSH
6355: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6359: LD_ADDR_EXP 49
6363: PUSH
6364: LD_EXP 49
6368: PPUSH
6369: LD_EXP 49
6373: PUSH
6374: LD_INT 1
6376: PLUS
6377: PPUSH
6378: LD_VAR 0 2
6382: PPUSH
6383: CALL_OW 1
6387: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6388: LD_VAR 0 2
6392: PPUSH
6393: LD_INT 46
6395: PPUSH
6396: LD_INT 78
6398: PPUSH
6399: CALL_OW 114
// end ;
6403: GO 6290
6405: POP
6406: POP
// if Difficulty > 2 then
6407: LD_OWVAR 67
6411: PUSH
6412: LD_INT 2
6414: GREATER
6415: IFFALSE 6547
// begin for i := 1 to 3 do
6417: LD_ADDR_VAR 0 1
6421: PUSH
6422: DOUBLE
6423: LD_INT 1
6425: DEC
6426: ST_TO_ADDR
6427: LD_INT 3
6429: PUSH
6430: FOR_TO
6431: IFFALSE 6545
// begin InitHC_All ( ) ;
6433: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 4
6442: PUSH
6443: LD_INT 5
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: LD_INT 6
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: PUSH
6458: LD_OWVAR 67
6462: ARRAY
6463: PPUSH
6464: CALL_OW 381
// un := CreateHuman ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: CALL_OW 44
6477: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6478: LD_VAR 0 2
6482: PPUSH
6483: LD_INT 91
6485: PPUSH
6486: LD_INT 87
6488: PPUSH
6489: LD_INT 3
6491: PPUSH
6492: LD_INT 0
6494: PPUSH
6495: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6499: LD_ADDR_EXP 49
6503: PUSH
6504: LD_EXP 49
6508: PPUSH
6509: LD_EXP 49
6513: PUSH
6514: LD_INT 1
6516: PLUS
6517: PPUSH
6518: LD_VAR 0 2
6522: PPUSH
6523: CALL_OW 1
6527: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6528: LD_VAR 0 2
6532: PPUSH
6533: LD_INT 89
6535: PPUSH
6536: LD_INT 148
6538: PPUSH
6539: CALL_OW 114
// end ;
6543: GO 6430
6545: POP
6546: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6547: LD_ADDR_VAR 0 3
6551: PUSH
6552: LD_INT 33
6554: PUSH
6555: LD_INT 61
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 49
6564: PUSH
6565: LD_INT 85
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 76
6574: PUSH
6575: LD_INT 99
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 81
6584: PUSH
6585: LD_INT 135
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 111
6594: PUSH
6595: LD_INT 155
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 147
6604: PUSH
6605: LD_INT 158
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6620: LD_INT 1050
6622: PPUSH
6623: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6627: LD_ADDR_VAR 0 1
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_EXP 49
6641: PUSH
6642: FOR_TO
6643: IFFALSE 6810
// begin un := ruAttackersInForest [ i ] ;
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_EXP 49
6654: PUSH
6655: LD_VAR 0 1
6659: ARRAY
6660: ST_TO_ADDR
// tag := GetTag ( un ) ;
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: LD_VAR 0 2
6670: PPUSH
6671: CALL_OW 110
6675: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6676: LD_VAR 0 2
6680: PPUSH
6681: CALL_OW 302
6685: PUSH
6686: LD_VAR 0 2
6690: PPUSH
6691: CALL_OW 314
6695: NOT
6696: AND
6697: IFFALSE 6808
// begin if tag <> i then
6699: LD_VAR 0 4
6703: PUSH
6704: LD_VAR 0 1
6708: NONEQUAL
6709: IFFALSE 6737
// begin SetTag ( un , i ) ;
6711: LD_VAR 0 2
6715: PPUSH
6716: LD_VAR 0 1
6720: PPUSH
6721: CALL_OW 109
// tag := i ;
6725: LD_ADDR_VAR 0 4
6729: PUSH
6730: LD_VAR 0 1
6734: ST_TO_ADDR
// end else
6735: GO 6769
// begin SetTag ( un , i + 1 ) ;
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_VAR 0 1
6746: PUSH
6747: LD_INT 1
6749: PLUS
6750: PPUSH
6751: CALL_OW 109
// tag := i + 1 ;
6755: LD_ADDR_VAR 0 4
6759: PUSH
6760: LD_VAR 0 1
6764: PUSH
6765: LD_INT 1
6767: PLUS
6768: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6769: LD_VAR 0 2
6773: PPUSH
6774: LD_VAR 0 3
6778: PUSH
6779: LD_VAR 0 4
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: PPUSH
6789: LD_VAR 0 3
6793: PUSH
6794: LD_VAR 0 4
6798: ARRAY
6799: PUSH
6800: LD_INT 2
6802: ARRAY
6803: PPUSH
6804: CALL_OW 114
// end ; end ;
6808: GO 6642
6810: POP
6811: POP
// until not ruAttackersInForest ;
6812: LD_EXP 49
6816: NOT
6817: IFFALSE 6620
// end ; end_of_file
6819: PPOPN 4
6821: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6822: LD_INT 0
6824: PPUSH
6825: PPUSH
6826: PPUSH
// if not characters then
6827: LD_VAR 0 1
6831: NOT
6832: IFFALSE 6836
// exit ;
6834: GO 6915
// speaker := characters [ rand ( 1 , characters ) ] ;
6836: LD_ADDR_VAR 0 6
6840: PUSH
6841: LD_VAR 0 1
6845: PUSH
6846: LD_INT 1
6848: PPUSH
6849: LD_VAR 0 1
6853: PPUSH
6854: CALL_OW 12
6858: ARRAY
6859: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6860: LD_VAR 0 6
6864: PPUSH
6865: CALL_OW 258
6869: PUSH
6870: LD_INT 1
6872: EQUAL
6873: IFFALSE 6891
// Say ( speaker , dialogMID ) else
6875: LD_VAR 0 6
6879: PPUSH
6880: LD_VAR 0 2
6884: PPUSH
6885: CALL_OW 88
6889: GO 6905
// Say ( speaker , dialogFID ) ;
6891: LD_VAR 0 6
6895: PPUSH
6896: LD_VAR 0 3
6900: PPUSH
6901: CALL_OW 88
// result := speaker ;
6905: LD_ADDR_VAR 0 4
6909: PUSH
6910: LD_VAR 0 6
6914: ST_TO_ADDR
// end ;
6915: LD_VAR 0 4
6919: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6920: LD_INT 0
6922: PPUSH
6923: PPUSH
// for i in charactersList do
6924: LD_ADDR_VAR 0 4
6928: PUSH
6929: LD_VAR 0 1
6933: PUSH
6934: FOR_IN
6935: IFFALSE 6953
// SaveCharacters ( i , ident ) ;
6937: LD_VAR 0 4
6941: PPUSH
6942: LD_VAR 0 2
6946: PPUSH
6947: CALL_OW 38
6951: GO 6934
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 3
6959: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
// for i = 1 to count do
6966: LD_ADDR_VAR 0 8
6970: PUSH
6971: DOUBLE
6972: LD_INT 1
6974: DEC
6975: ST_TO_ADDR
6976: LD_VAR 0 6
6980: PUSH
6981: FOR_TO
6982: IFFALSE 7063
// begin uc_side = side ;
6984: LD_ADDR_OWVAR 20
6988: PUSH
6989: LD_VAR 0 1
6993: ST_TO_ADDR
// uc_nation = nation ;
6994: LD_ADDR_OWVAR 21
6998: PUSH
6999: LD_VAR 0 2
7003: ST_TO_ADDR
// hc_gallery =  ;
7004: LD_ADDR_OWVAR 33
7008: PUSH
7009: LD_STRING 
7011: ST_TO_ADDR
// hc_name =  ;
7012: LD_ADDR_OWVAR 26
7016: PUSH
7017: LD_STRING 
7019: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7020: LD_INT 0
7022: PPUSH
7023: LD_VAR 0 5
7027: PPUSH
7028: LD_VAR 0 4
7032: PPUSH
7033: CALL_OW 380
// un = CreateHuman ;
7037: LD_ADDR_VAR 0 10
7041: PUSH
7042: CALL_OW 44
7046: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7047: LD_VAR 0 10
7051: PPUSH
7052: LD_VAR 0 3
7056: PPUSH
7057: CALL_OW 52
// end ;
7061: GO 6981
7063: POP
7064: POP
// end ;
7065: LD_VAR 0 7
7069: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7070: LD_INT 0
7072: PPUSH
7073: PPUSH
7074: PPUSH
// uc_side := GetSide ( b ) ;
7075: LD_ADDR_OWVAR 20
7079: PUSH
7080: LD_VAR 0 2
7084: PPUSH
7085: CALL_OW 255
7089: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7090: LD_ADDR_OWVAR 21
7094: PUSH
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 248
7104: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7105: LD_INT 0
7107: PPUSH
7108: LD_INT 1
7110: PPUSH
7111: LD_VAR 0 1
7115: PPUSH
7116: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7120: LD_ADDR_VAR 0 5
7124: PUSH
7125: LD_VAR 0 2
7129: PPUSH
7130: CALL_OW 254
7134: PUSH
7135: LD_INT 3
7137: MINUS
7138: ST_TO_ADDR
// if dir < 0 then
7139: LD_VAR 0 5
7143: PUSH
7144: LD_INT 0
7146: LESS
7147: IFFALSE 7163
// dir := 6 + dir ;
7149: LD_ADDR_VAR 0 5
7153: PUSH
7154: LD_INT 6
7156: PUSH
7157: LD_VAR 0 5
7161: PLUS
7162: ST_TO_ADDR
// un := CreateHuman ;
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: CALL_OW 44
7172: ST_TO_ADDR
// SetDir ( un , dir ) ;
7173: LD_VAR 0 4
7177: PPUSH
7178: LD_VAR 0 5
7182: PPUSH
7183: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7187: LD_VAR 0 4
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: CALL_OW 52
// end ;
7201: LD_VAR 0 3
7205: RET
// export function PrepareDifficulty ; begin
7206: LD_INT 0
7208: PPUSH
// case Difficulty of 1 :
7209: LD_OWVAR 67
7213: PUSH
7214: LD_INT 1
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7241
7222: POP
// begin RuSolMinLevel = 2 ;
7223: LD_ADDR_EXP 35
7227: PUSH
7228: LD_INT 2
7230: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7231: LD_ADDR_EXP 36
7235: PUSH
7236: LD_INT 3
7238: ST_TO_ADDR
// end ; 2 :
7239: GO 7302
7241: LD_INT 2
7243: DOUBLE
7244: EQUAL
7245: IFTRUE 7249
7247: GO 7268
7249: POP
// begin RuSolMinLevel = 3 ;
7250: LD_ADDR_EXP 35
7254: PUSH
7255: LD_INT 3
7257: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7258: LD_ADDR_EXP 36
7262: PUSH
7263: LD_INT 5
7265: ST_TO_ADDR
// end ; 3 .. 4 :
7266: GO 7302
7268: LD_INT 3
7270: DOUBLE
7271: GREATEREQUAL
7272: IFFALSE 7280
7274: LD_INT 4
7276: DOUBLE
7277: LESSEQUAL
7278: IFTRUE 7282
7280: GO 7301
7282: POP
// begin RuSolMinLevel = 4 ;
7283: LD_ADDR_EXP 35
7287: PUSH
7288: LD_INT 4
7290: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7291: LD_ADDR_EXP 36
7295: PUSH
7296: LD_INT 6
7298: ST_TO_ADDR
// end ; end ;
7299: GO 7302
7301: POP
// end ;
7302: LD_VAR 0 1
7306: RET
// export function ShowQuery1 ; begin
7307: LD_INT 0
7309: PPUSH
// result := Query ( QKill ) ;
7310: LD_ADDR_VAR 0 1
7314: PUSH
7315: LD_STRING QKill
7317: PPUSH
7318: CALL_OW 97
7322: ST_TO_ADDR
// end ;
7323: LD_VAR 0 1
7327: RET
// export function ShowQuery2 ; begin
7328: LD_INT 0
7330: PPUSH
// result := Query ( QKill2 ) ;
7331: LD_ADDR_VAR 0 1
7335: PUSH
7336: LD_STRING QKill2
7338: PPUSH
7339: CALL_OW 97
7343: ST_TO_ADDR
// end ;
7344: LD_VAR 0 1
7348: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7349: LD_INT 0
7351: PPUSH
7352: PPUSH
7353: PPUSH
7354: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7355: LD_ADDR_VAR 0 7
7359: PUSH
7360: LD_INT 48
7362: PUSH
7363: LD_INT 49
7365: PUSH
7366: LD_INT 50
7368: PUSH
7369: LD_INT 20
7371: PUSH
7372: LD_INT 1
7374: PUSH
7375: LD_INT 51
7377: PUSH
7378: LD_INT 52
7380: PUSH
7381: LD_INT 69
7383: PUSH
7384: LD_INT 39
7386: PUSH
7387: LD_INT 34
7389: PUSH
7390: LD_INT 40
7392: PUSH
7393: LD_INT 53
7395: PUSH
7396: LD_INT 71
7398: PUSH
7399: LD_INT 57
7401: PUSH
7402: LD_INT 58
7404: PUSH
7405: LD_INT 44
7407: PUSH
7408: LD_INT 32
7410: PUSH
7411: LD_INT 27
7413: PUSH
7414: LD_INT 23
7416: PUSH
7417: LD_INT 33
7419: PUSH
7420: LD_INT 59
7422: PUSH
7423: LD_INT 54
7425: PUSH
7426: LD_INT 55
7428: PUSH
7429: LD_INT 56
7431: PUSH
7432: LD_INT 63
7434: PUSH
7435: LD_INT 64
7437: PUSH
7438: LD_INT 65
7440: PUSH
7441: LD_INT 30
7443: PUSH
7444: LD_INT 31
7446: PUSH
7447: LD_INT 21
7449: PUSH
7450: LD_INT 22
7452: PUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 82
7458: PUSH
7459: LD_INT 83
7461: PUSH
7462: LD_INT 84
7464: PUSH
7465: LD_INT 85
7467: PUSH
7468: LD_INT 86
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: ST_TO_ADDR
// for i = 1 to list do
7510: LD_ADDR_VAR 0 5
7514: PUSH
7515: DOUBLE
7516: LD_INT 1
7518: DEC
7519: ST_TO_ADDR
7520: LD_VAR 0 7
7524: PUSH
7525: FOR_TO
7526: IFFALSE 7598
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7528: LD_VAR 0 7
7532: PUSH
7533: LD_VAR 0 5
7537: ARRAY
7538: PPUSH
7539: LD_VAR 0 1
7543: PPUSH
7544: CALL_OW 321
7548: PUSH
7549: LD_INT 1
7551: EQUAL
7552: PUSH
7553: LD_VAR 0 7
7557: PUSH
7558: LD_VAR 0 5
7562: ARRAY
7563: PPUSH
7564: LD_VAR 0 3
7568: PPUSH
7569: CALL_OW 482
7573: AND
7574: IFFALSE 7596
// AddComResearch ( lab , list [ i ] ) ;
7576: LD_VAR 0 2
7580: PPUSH
7581: LD_VAR 0 7
7585: PUSH
7586: LD_VAR 0 5
7590: ARRAY
7591: PPUSH
7592: CALL_OW 184
7596: GO 7525
7598: POP
7599: POP
// end ;
7600: LD_VAR 0 4
7604: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7605: LD_INT 0
7607: PPUSH
7608: PPUSH
7609: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7610: LD_INT 22
7612: PUSH
7613: LD_VAR 0 1
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 2
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL_OW 69
7640: PUSH
7641: LD_VAR 0 3
7645: LESSEQUAL
7646: IFFALSE 7754
// begin for i = 1 to vehCount do
7648: LD_ADDR_VAR 0 9
7652: PUSH
7653: DOUBLE
7654: LD_INT 1
7656: DEC
7657: ST_TO_ADDR
7658: LD_VAR 0 3
7662: PUSH
7663: FOR_TO
7664: IFFALSE 7752
// begin weapon := weaponTab [ i ] ;
7666: LD_ADDR_VAR 0 10
7670: PUSH
7671: LD_VAR 0 4
7675: PUSH
7676: LD_VAR 0 9
7680: ARRAY
7681: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7682: LD_VAR 0 10
7686: PUSH
7687: LD_INT 46
7689: EQUAL
7690: IFFALSE 7721
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7692: LD_VAR 0 2
7696: PPUSH
7697: LD_INT 24
7699: PPUSH
7700: LD_VAR 0 5
7704: PPUSH
7705: LD_VAR 0 6
7709: PPUSH
7710: LD_VAR 0 10
7714: PPUSH
7715: CALL_OW 185
7719: GO 7750
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7721: LD_VAR 0 2
7725: PPUSH
7726: LD_VAR 0 7
7730: PPUSH
7731: LD_VAR 0 5
7735: PPUSH
7736: LD_VAR 0 6
7740: PPUSH
7741: LD_VAR 0 10
7745: PPUSH
7746: CALL_OW 185
// end ;
7750: GO 7663
7752: POP
7753: POP
// end ; end ;
7754: LD_VAR 0 8
7758: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7759: LD_INT 0
7761: PPUSH
7762: PPUSH
7763: PPUSH
7764: PPUSH
7765: PPUSH
7766: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7767: LD_ADDR_VAR 0 8
7771: PUSH
7772: LD_VAR 0 2
7776: PPUSH
7777: CALL_OW 313
7781: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7782: LD_ADDR_VAR 0 9
7786: PUSH
7787: LD_VAR 0 3
7791: PPUSH
7792: LD_INT 22
7794: PUSH
7795: LD_VAR 0 1
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 25
7806: PUSH
7807: LD_INT 2
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 24
7816: PUSH
7817: LD_INT 750
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 3
7826: PUSH
7827: LD_INT 54
7829: PUSH
7830: EMPTY
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PPUSH
7843: CALL_OW 70
7847: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7848: LD_ADDR_VAR 0 6
7852: PUSH
7853: LD_VAR 0 3
7857: PPUSH
7858: LD_INT 22
7860: PUSH
7861: LD_VAR 0 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: LD_INT 21
7872: PUSH
7873: LD_INT 3
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: LD_INT 24
7885: PUSH
7886: LD_INT 1000
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: PPUSH
7905: CALL_OW 70
7909: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7910: LD_VAR 0 6
7914: NOT
7915: PUSH
7916: LD_INT 22
7918: PUSH
7919: LD_VAR 0 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 25
7930: PUSH
7931: LD_INT 2
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 24
7940: PUSH
7941: LD_INT 250
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 69
7957: NOT
7958: AND
7959: IFFALSE 7963
// exit ;
7961: GO 8121
// if buildingsList and engineerOkInside then
7963: LD_VAR 0 6
7967: PUSH
7968: LD_VAR 0 8
7972: AND
7973: IFFALSE 7984
// ComExitBuilding ( engineerOkInside ) ;
7975: LD_VAR 0 8
7979: PPUSH
7980: CALL_OW 122
// if buildingsList and engineerOkOutside then
7984: LD_VAR 0 6
7988: PUSH
7989: LD_VAR 0 9
7993: AND
7994: IFFALSE 8014
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7996: LD_VAR 0 9
8000: PPUSH
8001: LD_VAR 0 6
8005: PUSH
8006: LD_INT 1
8008: ARRAY
8009: PPUSH
8010: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8014: LD_VAR 0 6
8018: PUSH
8019: LD_INT 0
8021: EQUAL
8022: PUSH
8023: LD_VAR 0 4
8027: PUSH
8028: LD_INT 0
8030: EQUAL
8031: AND
8032: PUSH
8033: LD_VAR 0 9
8037: AND
8038: IFFALSE 8054
// ComEnterUnit ( engineerOkOutside , depot ) ;
8040: LD_VAR 0 9
8044: PPUSH
8045: LD_VAR 0 2
8049: PPUSH
8050: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8054: LD_VAR 0 9
8058: PUSH
8059: LD_VAR 0 6
8063: PUSH
8064: LD_INT 0
8066: EQUAL
8067: AND
8068: PUSH
8069: LD_VAR 0 4
8073: AND
8074: IFFALSE 8121
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8076: LD_VAR 0 9
8080: PPUSH
8081: LD_VAR 0 4
8085: PUSH
8086: LD_INT 1
8088: ARRAY
8089: PPUSH
8090: LD_VAR 0 4
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PPUSH
8099: LD_VAR 0 4
8103: PUSH
8104: LD_INT 3
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 4
8112: PUSH
8113: LD_INT 4
8115: ARRAY
8116: PPUSH
8117: CALL_OW 145
// end ;
8121: LD_VAR 0 5
8125: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8126: LD_INT 0
8128: PPUSH
8129: PPUSH
8130: PPUSH
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
8135: PPUSH
8136: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8137: LD_ADDR_VAR 0 6
8141: PUSH
8142: LD_INT 22
8144: PUSH
8145: LD_VAR 0 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 25
8156: PUSH
8157: LD_INT 4
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 23
8166: PUSH
8167: LD_INT 2
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 24
8176: PUSH
8177: LD_INT 251
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: PPUSH
8190: CALL_OW 69
8194: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8195: LD_ADDR_VAR 0 7
8199: PUSH
8200: LD_VAR 0 3
8204: PPUSH
8205: LD_INT 22
8207: PUSH
8208: LD_VAR 0 1
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 23
8219: PUSH
8220: LD_INT 2
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 25
8229: PUSH
8230: LD_INT 4
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 50
8239: PUSH
8240: EMPTY
8241: LIST
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 70
8253: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8254: LD_ADDR_VAR 0 10
8258: PUSH
8259: LD_VAR 0 3
8263: PPUSH
8264: LD_INT 22
8266: PUSH
8267: LD_VAR 0 1
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_INT 21
8278: PUSH
8279: LD_INT 1
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: LD_INT 3
8288: PUSH
8289: LD_INT 25
8291: PUSH
8292: LD_INT 3
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 3
8305: PUSH
8306: LD_INT 24
8308: PUSH
8309: LD_INT 750
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: PPUSH
8326: CALL_OW 70
8330: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8331: LD_ADDR_VAR 0 11
8335: PUSH
8336: LD_VAR 0 2
8340: PPUSH
8341: LD_INT 22
8343: PUSH
8344: LD_VAR 0 1
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 21
8355: PUSH
8356: LD_INT 1
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 25
8368: PUSH
8369: LD_INT 3
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: LD_INT 24
8385: PUSH
8386: LD_INT 1000
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 70
8407: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8408: LD_VAR 0 10
8412: NOT
8413: PUSH
8414: LD_VAR 0 11
8418: NOT
8419: AND
8420: PUSH
8421: LD_VAR 0 6
8425: NOT
8426: AND
8427: IFFALSE 8431
// exit ;
8429: GO 8637
// if damageUnits and sci_list then
8431: LD_VAR 0 10
8435: PUSH
8436: LD_VAR 0 6
8440: AND
8441: IFFALSE 8457
// ComMoveToArea ( damageUnits , healArea ) ;
8443: LD_VAR 0 10
8447: PPUSH
8448: LD_VAR 0 2
8452: PPUSH
8453: CALL_OW 113
// if unitsToHeal and sci_list then
8457: LD_VAR 0 11
8461: PUSH
8462: LD_VAR 0 6
8466: AND
8467: IFFALSE 8478
// ComExitBuilding ( sci_list ) ;
8469: LD_VAR 0 6
8473: PPUSH
8474: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8478: LD_VAR 0 11
8482: PUSH
8483: LD_VAR 0 7
8487: AND
8488: IFFALSE 8508
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8490: LD_VAR 0 7
8494: PPUSH
8495: LD_VAR 0 11
8499: PUSH
8500: LD_INT 1
8502: ARRAY
8503: PPUSH
8504: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8508: LD_VAR 0 10
8512: PUSH
8513: LD_INT 0
8515: EQUAL
8516: PUSH
8517: LD_VAR 0 11
8521: PUSH
8522: LD_INT 0
8524: EQUAL
8525: AND
8526: PUSH
8527: LD_VAR 0 7
8531: AND
8532: IFFALSE 8637
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8534: LD_ADDR_VAR 0 12
8538: PUSH
8539: LD_INT 22
8541: PUSH
8542: LD_VAR 0 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 3
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 30
8563: PUSH
8564: LD_INT 8
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 69
8580: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8581: LD_ADDR_VAR 0 13
8585: PUSH
8586: LD_INT 1
8588: PPUSH
8589: LD_VAR 0 12
8593: PPUSH
8594: CALL_OW 12
8598: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8599: LD_VAR 0 7
8603: PPUSH
8604: LD_INT 3
8606: PUSH
8607: LD_INT 60
8609: PUSH
8610: EMPTY
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 72
8621: PPUSH
8622: LD_VAR 0 12
8626: PUSH
8627: LD_VAR 0 13
8631: ARRAY
8632: PPUSH
8633: CALL_OW 120
// end ; end ;
8637: LD_VAR 0 5
8641: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8642: LD_INT 0
8644: PPUSH
8645: PPUSH
8646: PPUSH
8647: PPUSH
8648: PPUSH
// tmp := [ ] ;
8649: LD_ADDR_VAR 0 6
8653: PUSH
8654: EMPTY
8655: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8656: LD_ADDR_VAR 0 7
8660: PUSH
8661: LD_INT 22
8663: PUSH
8664: LD_VAR 0 1
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 30
8675: PUSH
8676: LD_INT 32
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 69
8691: ST_TO_ADDR
// if bunkers then
8692: LD_VAR 0 7
8696: IFFALSE 8766
// for i in bunkers do
8698: LD_ADDR_VAR 0 4
8702: PUSH
8703: LD_VAR 0 7
8707: PUSH
8708: FOR_IN
8709: IFFALSE 8764
// for j in UnitsInside ( i ) do
8711: LD_ADDR_VAR 0 5
8715: PUSH
8716: LD_VAR 0 4
8720: PPUSH
8721: CALL_OW 313
8725: PUSH
8726: FOR_IN
8727: IFFALSE 8760
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8729: LD_ADDR_VAR 0 6
8733: PUSH
8734: LD_VAR 0 6
8738: PPUSH
8739: LD_VAR 0 6
8743: PUSH
8744: LD_INT 1
8746: PLUS
8747: PPUSH
8748: LD_VAR 0 5
8752: PPUSH
8753: CALL_OW 1
8757: ST_TO_ADDR
8758: GO 8726
8760: POP
8761: POP
8762: GO 8708
8764: POP
8765: POP
// if tmp then
8766: LD_VAR 0 6
8770: IFFALSE 8810
// begin ComExitBuilding ( tmp ) ;
8772: LD_VAR 0 6
8776: PPUSH
8777: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8781: LD_VAR 0 6
8785: PPUSH
8786: LD_VAR 0 2
8790: PPUSH
8791: CALL_OW 250
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 251
8805: PPUSH
8806: CALL_OW 174
// end ; end ;
8810: LD_VAR 0 3
8814: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8815: LD_INT 0
8817: PPUSH
8818: PPUSH
8819: PPUSH
// enable ;
8820: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8821: LD_ADDR_VAR 0 6
8825: PUSH
8826: LD_VAR 0 3
8830: PPUSH
8831: CALL_OW 435
8835: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_INT 22
8843: PUSH
8844: LD_VAR 0 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 34
8855: PUSH
8856: LD_VAR 0 2
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 69
8873: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8874: LD_VAR 0 5
8878: PUSH
8879: LD_VAR 0 3
8883: PPUSH
8884: CALL_OW 435
8888: AND
8889: PUSH
8890: LD_VAR 0 6
8894: AND
8895: IFFALSE 8928
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8897: LD_VAR 0 5
8901: PUSH
8902: LD_INT 1
8904: ARRAY
8905: PPUSH
8906: LD_VAR 0 6
8910: PUSH
8911: LD_INT 1
8913: ARRAY
8914: PPUSH
8915: LD_VAR 0 6
8919: PUSH
8920: LD_INT 2
8922: ARRAY
8923: PPUSH
8924: CALL_OW 177
// end ;
8928: LD_VAR 0 4
8932: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8933: LD_INT 0
8935: PPUSH
8936: PPUSH
8937: PPUSH
8938: PPUSH
8939: PPUSH
8940: PPUSH
8941: PPUSH
8942: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8943: LD_ADDR_VAR 0 6
8947: PUSH
8948: LD_VAR 0 2
8952: PPUSH
8953: LD_INT 22
8955: PUSH
8956: LD_VAR 0 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 56
8967: PUSH
8968: EMPTY
8969: LIST
8970: PUSH
8971: LD_INT 24
8973: PUSH
8974: LD_INT 700
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: LD_INT 60
8986: PUSH
8987: EMPTY
8988: LIST
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 2
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 1
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 25
9009: PUSH
9010: LD_INT 5
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 25
9019: PUSH
9020: LD_INT 8
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 25
9029: PUSH
9030: LD_INT 9
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 70
9055: PUSH
9056: LD_EXP 48
9060: PUSH
9061: LD_EXP 49
9065: UNION
9066: DIFF
9067: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9068: LD_ADDR_VAR 0 7
9072: PUSH
9073: LD_VAR 0 2
9077: PPUSH
9078: LD_INT 22
9080: PUSH
9081: LD_VAR 0 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 30
9092: PUSH
9093: LD_INT 32
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 58
9102: PUSH
9103: EMPTY
9104: LIST
9105: PUSH
9106: LD_INT 24
9108: PUSH
9109: LD_INT 251
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: PPUSH
9122: CALL_OW 70
9126: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9127: LD_ADDR_VAR 0 9
9131: PUSH
9132: LD_VAR 0 2
9136: PPUSH
9137: LD_INT 22
9139: PUSH
9140: LD_VAR 0 1
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 2
9151: PUSH
9152: LD_INT 30
9154: PUSH
9155: LD_INT 4
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 30
9164: PUSH
9165: LD_INT 5
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 24
9179: PUSH
9180: LD_INT 251
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: LIST
9191: PPUSH
9192: CALL_OW 70
9196: ST_TO_ADDR
// if barrackList then
9197: LD_VAR 0 9
9201: IFFALSE 9357
// begin if turretList = 0 then
9203: LD_VAR 0 7
9207: PUSH
9208: LD_INT 0
9210: EQUAL
9211: IFFALSE 9249
// begin if soldiersList then
9213: LD_VAR 0 6
9217: IFFALSE 9247
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9219: LD_VAR 0 6
9223: PPUSH
9224: LD_VAR 0 9
9228: PUSH
9229: LD_INT 1
9231: PPUSH
9232: LD_VAR 0 9
9236: PPUSH
9237: CALL_OW 12
9241: ARRAY
9242: PPUSH
9243: CALL_OW 120
// end else
9247: GO 9357
// begin for i in barrackList do
9249: LD_ADDR_VAR 0 4
9253: PUSH
9254: LD_VAR 0 9
9258: PUSH
9259: FOR_IN
9260: IFFALSE 9355
// begin if not turretList then
9262: LD_VAR 0 7
9266: NOT
9267: IFFALSE 9273
// exit ;
9269: POP
9270: POP
9271: GO 9357
// insideUnits = UnitsInside ( i ) ;
9273: LD_ADDR_VAR 0 10
9277: PUSH
9278: LD_VAR 0 4
9282: PPUSH
9283: CALL_OW 313
9287: ST_TO_ADDR
// if insideUnits then
9288: LD_VAR 0 10
9292: IFFALSE 9353
// begin tmp := insideUnits [ 1 ] ;
9294: LD_ADDR_VAR 0 8
9298: PUSH
9299: LD_VAR 0 10
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9308: LD_VAR 0 8
9312: PPUSH
9313: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9317: LD_VAR 0 8
9321: PPUSH
9322: LD_VAR 0 7
9326: PUSH
9327: LD_INT 1
9329: ARRAY
9330: PPUSH
9331: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9335: LD_ADDR_VAR 0 7
9339: PUSH
9340: LD_VAR 0 7
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 3
9352: ST_TO_ADDR
// end ; end ;
9353: GO 9259
9355: POP
9356: POP
// end ; end ; end ;
9357: LD_VAR 0 3
9361: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9362: LD_INT 0
9364: PPUSH
9365: PPUSH
9366: PPUSH
9367: PPUSH
9368: PPUSH
9369: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9370: LD_ADDR_VAR 0 8
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_VAR 0 1
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 21
9389: PUSH
9390: LD_INT 2
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 34
9399: PUSH
9400: LD_INT 52
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: PPUSH
9412: CALL_OW 69
9416: ST_TO_ADDR
// if not craneList then
9417: LD_VAR 0 8
9421: NOT
9422: IFFALSE 9426
// exit ;
9424: GO 9860
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9426: LD_ADDR_VAR 0 9
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_VAR 0 1
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 21
9445: PUSH
9446: LD_INT 3
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 3
9455: PUSH
9456: LD_INT 24
9458: PUSH
9459: LD_INT 1000
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: PPUSH
9478: CALL_OW 69
9482: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9483: LD_VAR 0 9
9487: PUSH
9488: LD_VAR 0 8
9492: PPUSH
9493: LD_INT 24
9495: PUSH
9496: LD_INT 750
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PPUSH
9503: CALL_OW 72
9507: AND
9508: IFFALSE 9543
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9510: LD_VAR 0 8
9514: PPUSH
9515: LD_INT 24
9517: PUSH
9518: LD_INT 750
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PPUSH
9525: CALL_OW 72
9529: PPUSH
9530: LD_VAR 0 9
9534: PUSH
9535: LD_INT 1
9537: ARRAY
9538: PPUSH
9539: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9543: LD_VAR 0 8
9547: PPUSH
9548: LD_INT 3
9550: PUSH
9551: LD_INT 24
9553: PUSH
9554: LD_INT 750
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PPUSH
9565: CALL_OW 72
9569: IFFALSE 9607
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9571: LD_VAR 0 8
9575: PPUSH
9576: LD_INT 3
9578: PUSH
9579: LD_INT 24
9581: PUSH
9582: LD_INT 750
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 72
9597: PPUSH
9598: LD_VAR 0 2
9602: PPUSH
9603: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9607: LD_VAR 0 8
9611: PUSH
9612: LD_VAR 0 9
9616: PUSH
9617: LD_INT 0
9619: EQUAL
9620: AND
9621: PUSH
9622: LD_VAR 0 3
9626: AND
9627: IFFALSE 9674
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9629: LD_VAR 0 8
9633: PPUSH
9634: LD_VAR 0 3
9638: PUSH
9639: LD_INT 1
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 3
9647: PUSH
9648: LD_INT 2
9650: ARRAY
9651: PPUSH
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 3
9659: ARRAY
9660: PPUSH
9661: LD_VAR 0 3
9665: PUSH
9666: LD_INT 4
9668: ARRAY
9669: PPUSH
9670: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9674: LD_ADDR_VAR 0 7
9678: PUSH
9679: LD_VAR 0 2
9683: PPUSH
9684: LD_INT 22
9686: PUSH
9687: LD_VAR 0 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 21
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 34
9708: PUSH
9709: LD_INT 52
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: LD_INT 3
9718: PUSH
9719: LD_INT 24
9721: PUSH
9722: LD_INT 750
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: PPUSH
9739: CALL_OW 70
9743: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9744: LD_ADDR_VAR 0 6
9748: PUSH
9749: LD_VAR 0 2
9753: PPUSH
9754: LD_INT 22
9756: PUSH
9757: LD_VAR 0 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 2
9768: PUSH
9769: LD_INT 30
9771: PUSH
9772: LD_INT 0
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 30
9781: PUSH
9782: LD_INT 1
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 70
9802: ST_TO_ADDR
// if crane then
9803: LD_VAR 0 7
9807: IFFALSE 9860
// for i in crane do
9809: LD_ADDR_VAR 0 5
9813: PUSH
9814: LD_VAR 0 7
9818: PUSH
9819: FOR_IN
9820: IFFALSE 9858
// begin if dep then
9822: LD_VAR 0 6
9826: IFFALSE 9842
// ComMoveUnit ( i , dep ) ;
9828: LD_VAR 0 5
9832: PPUSH
9833: LD_VAR 0 6
9837: PPUSH
9838: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9842: LD_VAR 0 5
9846: PPUSH
9847: CALL_OW 311
9851: PPUSH
9852: CALL 80283 0 1
// end ;
9856: GO 9819
9858: POP
9859: POP
// end ;
9860: LD_VAR 0 4
9864: RET
// export function BuildBulldozer ; begin
9865: LD_INT 0
9867: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
9868: LD_INT 17
9870: PPUSH
9871: CALL_OW 302
9875: NOT
9876: PUSH
9877: LD_INT 17
9879: PPUSH
9880: CALL_OW 255
9884: PUSH
9885: LD_INT 3
9887: NONEQUAL
9888: OR
9889: IFFALSE 9893
// exit ;
9891: GO 9912
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
9893: LD_INT 17
9895: PPUSH
9896: LD_INT 24
9898: PPUSH
9899: LD_INT 1
9901: PPUSH
9902: LD_INT 1
9904: PPUSH
9905: LD_INT 53
9907: PPUSH
9908: CALL_OW 185
// end ;
9912: LD_VAR 0 1
9916: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
9917: LD_INT 0
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
9923: PPUSH
// if not bulldozer then
9924: LD_VAR 0 1
9928: NOT
9929: IFFALSE 9933
// exit ;
9931: GO 10215
// list := ListEnvironmentArea ( area ) ;
9933: LD_ADDR_VAR 0 5
9937: PUSH
9938: LD_VAR 0 2
9942: PPUSH
9943: CALL_OW 353
9947: ST_TO_ADDR
// tmp := [ ] ;
9948: LD_ADDR_VAR 0 6
9952: PUSH
9953: EMPTY
9954: ST_TO_ADDR
// for i = 1 to list do
9955: LD_ADDR_VAR 0 4
9959: PUSH
9960: DOUBLE
9961: LD_INT 1
9963: DEC
9964: ST_TO_ADDR
9965: LD_VAR 0 5
9969: PUSH
9970: FOR_TO
9971: IFFALSE 10069
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
9973: LD_VAR 0 5
9977: PUSH
9978: LD_VAR 0 4
9982: ARRAY
9983: PUSH
9984: LD_INT 1
9986: ARRAY
9987: PPUSH
9988: LD_VAR 0 5
9992: PUSH
9993: LD_VAR 0 4
9997: ARRAY
9998: PUSH
9999: LD_INT 2
10001: ARRAY
10002: PPUSH
10003: CALL_OW 554
10007: IFFALSE 10067
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10009: LD_ADDR_VAR 0 6
10013: PUSH
10014: LD_VAR 0 6
10018: PPUSH
10019: LD_VAR 0 6
10023: PUSH
10024: LD_INT 1
10026: PLUS
10027: PPUSH
10028: LD_VAR 0 5
10032: PUSH
10033: LD_VAR 0 4
10037: ARRAY
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PUSH
10043: LD_VAR 0 5
10047: PUSH
10048: LD_VAR 0 4
10052: ARRAY
10053: PUSH
10054: LD_INT 2
10056: ARRAY
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 1
10066: ST_TO_ADDR
// end ;
10067: GO 9970
10069: POP
10070: POP
// ComStop ( bulldozer ) ;
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10080: LD_ADDR_VAR 0 7
10084: PUSH
10085: LD_VAR 0 1
10089: PPUSH
10090: CALL_OW 250
10094: PUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 251
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: ST_TO_ADDR
// for i = tmp downto 1 do
10109: LD_ADDR_VAR 0 4
10113: PUSH
10114: DOUBLE
10115: LD_VAR 0 6
10119: INC
10120: ST_TO_ADDR
10121: LD_INT 1
10123: PUSH
10124: FOR_DOWNTO
10125: IFFALSE 10213
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10127: LD_ADDR_VAR 0 7
10131: PUSH
10132: LD_VAR 0 7
10136: PUSH
10137: LD_INT 1
10139: ARRAY
10140: PPUSH
10141: LD_VAR 0 7
10145: PUSH
10146: LD_INT 2
10148: ARRAY
10149: PPUSH
10150: LD_VAR 0 6
10154: PPUSH
10155: CALL 10316 0 3
10159: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_VAR 0 7
10169: PUSH
10170: LD_INT 1
10172: ARRAY
10173: PPUSH
10174: LD_VAR 0 7
10178: PUSH
10179: LD_INT 2
10181: ARRAY
10182: PPUSH
10183: CALL 10220 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10187: LD_ADDR_VAR 0 6
10191: PUSH
10192: LD_VAR 0 6
10196: PPUSH
10197: LD_VAR 0 7
10201: PUSH
10202: LD_INT 3
10204: ARRAY
10205: PPUSH
10206: CALL_OW 3
10210: ST_TO_ADDR
// end ;
10211: GO 10124
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 3
10219: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10220: LD_INT 0
10222: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10223: LD_VAR 0 2
10227: PPUSH
10228: LD_VAR 0 3
10232: PPUSH
10233: CALL_OW 351
10237: PUSH
10238: LD_VAR 0 2
10242: PPUSH
10243: LD_VAR 0 3
10247: PPUSH
10248: CALL_OW 554
10252: AND
10253: PUSH
10254: LD_VAR 0 2
10258: PPUSH
10259: LD_VAR 0 3
10263: PPUSH
10264: CALL_OW 488
10268: AND
10269: PUSH
10270: LD_VAR 0 2
10274: PPUSH
10275: LD_VAR 0 3
10279: PPUSH
10280: CALL_OW 428
10284: PUSH
10285: LD_INT 1
10287: NEG
10288: EQUAL
10289: AND
10290: IFFALSE 10311
// AddComMoveXY ( bulldozer , x , y ) ;
10292: LD_VAR 0 1
10296: PPUSH
10297: LD_VAR 0 2
10301: PPUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: CALL_OW 171
// end ;
10311: LD_VAR 0 4
10315: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10316: LD_INT 0
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
10322: PPUSH
10323: PPUSH
10324: PPUSH
// dist := 99999 ;
10325: LD_ADDR_VAR 0 6
10329: PUSH
10330: LD_INT 99999
10332: ST_TO_ADDR
// for i = 1 to list do
10333: LD_ADDR_VAR 0 5
10337: PUSH
10338: DOUBLE
10339: LD_INT 1
10341: DEC
10342: ST_TO_ADDR
10343: LD_VAR 0 3
10347: PUSH
10348: FOR_TO
10349: IFFALSE 10487
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10351: LD_ADDR_VAR 0 7
10355: PUSH
10356: LD_VAR 0 1
10360: PPUSH
10361: LD_VAR 0 2
10365: PPUSH
10366: LD_VAR 0 3
10370: PUSH
10371: LD_VAR 0 5
10375: ARRAY
10376: PUSH
10377: LD_INT 1
10379: ARRAY
10380: PPUSH
10381: LD_VAR 0 3
10385: PUSH
10386: LD_VAR 0 5
10390: ARRAY
10391: PUSH
10392: LD_INT 2
10394: ARRAY
10395: PPUSH
10396: CALL_OW 298
10400: ST_TO_ADDR
// if d = 0 then
10401: LD_VAR 0 7
10405: PUSH
10406: LD_INT 0
10408: EQUAL
10409: IFFALSE 10413
// continue ;
10411: GO 10348
// if d < dist then
10413: LD_VAR 0 7
10417: PUSH
10418: LD_VAR 0 6
10422: LESS
10423: IFFALSE 10485
// begin _x := list [ i ] [ 1 ] ;
10425: LD_ADDR_VAR 0 8
10429: PUSH
10430: LD_VAR 0 3
10434: PUSH
10435: LD_VAR 0 5
10439: ARRAY
10440: PUSH
10441: LD_INT 1
10443: ARRAY
10444: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10445: LD_ADDR_VAR 0 9
10449: PUSH
10450: LD_VAR 0 3
10454: PUSH
10455: LD_VAR 0 5
10459: ARRAY
10460: PUSH
10461: LD_INT 2
10463: ARRAY
10464: ST_TO_ADDR
// _i := i ;
10465: LD_ADDR_VAR 0 10
10469: PUSH
10470: LD_VAR 0 5
10474: ST_TO_ADDR
// dist := d ;
10475: LD_ADDR_VAR 0 6
10479: PUSH
10480: LD_VAR 0 7
10484: ST_TO_ADDR
// end ; end ;
10485: GO 10348
10487: POP
10488: POP
// result := [ _x , _y , _i , dist ] ;
10489: LD_ADDR_VAR 0 4
10493: PUSH
10494: LD_VAR 0 8
10498: PUSH
10499: LD_VAR 0 9
10503: PUSH
10504: LD_VAR 0 10
10508: PUSH
10509: LD_VAR 0 6
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: ST_TO_ADDR
// end ; end_of_file
10520: LD_VAR 0 4
10524: RET
// export function Action ; begin
10525: LD_INT 0
10527: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10528: LD_INT 66
10530: PPUSH
10531: LD_INT 4
10533: PPUSH
10534: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10538: LD_INT 22
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PPUSH
10562: CALL_OW 69
10566: PUSH
10567: LD_INT 0
10569: EQUAL
10570: IFFALSE 10584
// SetClass ( JMM , 2 ) ;
10572: LD_EXP 1
10576: PPUSH
10577: LD_INT 2
10579: PPUSH
10580: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10584: LD_STRING M1
10586: PPUSH
10587: CALL_OW 337
// case Difficulty of 1 :
10591: LD_OWVAR 67
10595: PUSH
10596: LD_INT 1
10598: DOUBLE
10599: EQUAL
10600: IFTRUE 10604
10602: GO 10614
10604: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10605: LD_STRING M1-1
10607: PPUSH
10608: CALL_OW 337
10612: GO 10657
10614: LD_INT 2
10616: DOUBLE
10617: EQUAL
10618: IFTRUE 10622
10620: GO 10632
10622: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
10623: LD_STRING M1-2
10625: PPUSH
10626: CALL_OW 337
10630: GO 10657
10632: LD_INT 3
10634: DOUBLE
10635: GREATEREQUAL
10636: IFFALSE 10644
10638: LD_INT 4
10640: DOUBLE
10641: LESSEQUAL
10642: IFTRUE 10646
10644: GO 10656
10646: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10647: LD_STRING M1-3
10649: PPUSH
10650: CALL_OW 337
10654: GO 10657
10656: POP
// ChangeMissionObjectives ( M1cont ) ;
10657: LD_STRING M1cont
10659: PPUSH
10660: CALL_OW 337
// SaveForQuickRestart ;
10664: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
10668: LD_INT 525
10670: PPUSH
10671: LD_INT 700
10673: PPUSH
10674: CALL_OW 12
10678: PPUSH
10679: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10683: LD_INT 5
10685: PPUSH
10686: LD_INT 82
10688: PPUSH
10689: LD_INT 38
10691: PPUSH
10692: LD_INT 10
10694: PPUSH
10695: LD_INT 1
10697: PPUSH
10698: CALL_OW 56
// wait ( 0 0$14 ) ;
10702: LD_INT 490
10704: PPUSH
10705: CALL_OW 67
// firstCrateSpawn := true ;
10709: LD_ADDR_EXP 41
10713: PUSH
10714: LD_INT 1
10716: ST_TO_ADDR
// end ;
10717: LD_VAR 0 1
10721: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
10722: LD_EXP 41
10726: IFFALSE 11115
10728: GO 10730
10730: DISABLE
10731: LD_INT 0
10733: PPUSH
// begin if IsOk ( Lisa ) then
10734: LD_EXP 2
10738: PPUSH
10739: CALL_OW 302
10743: IFFALSE 10759
// Say ( Lisa , DR0-Lisa-1 ) else
10745: LD_EXP 2
10749: PPUSH
10750: LD_STRING DR0-Lisa-1
10752: PPUSH
10753: CALL_OW 88
10757: GO 10905
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10759: LD_INT 22
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 21
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 26
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 2
10791: PUSH
10792: LD_INT 25
10794: PUSH
10795: LD_INT 1
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 25
10804: PUSH
10805: LD_INT 2
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 25
10814: PUSH
10815: LD_INT 3
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 4
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: PUSH
10850: LD_EXP 1
10854: PUSH
10855: LD_EXP 8
10859: PUSH
10860: LD_EXP 5
10864: PUSH
10865: LD_EXP 6
10869: PUSH
10870: LD_EXP 7
10874: PUSH
10875: LD_EXP 4
10879: PUSH
10880: LD_EXP 3
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: DIFF
10894: PPUSH
10895: LD_STRING DR0-Sol1-1
10897: PPUSH
10898: LD_STRING DR0-Sol1-1
10900: PPUSH
10901: CALL 6822 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10905: LD_ADDR_VAR 0 1
10909: PUSH
10910: LD_INT 22
10912: PUSH
10913: LD_INT 1
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 21
10922: PUSH
10923: LD_INT 1
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 26
10932: PUSH
10933: LD_INT 1
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 2
10942: PUSH
10943: LD_INT 25
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 25
10955: PUSH
10956: LD_INT 2
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 25
10965: PUSH
10966: LD_INT 3
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 25
10975: PUSH
10976: LD_INT 4
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: PPUSH
10996: CALL_OW 69
11000: PUSH
11001: LD_EXP 1
11005: PUSH
11006: LD_EXP 8
11010: PUSH
11011: LD_EXP 5
11015: PUSH
11016: LD_EXP 2
11020: PUSH
11021: LD_EXP 6
11025: PUSH
11026: LD_EXP 7
11030: PUSH
11031: LD_EXP 4
11035: PUSH
11036: LD_EXP 3
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: DIFF
11051: PPUSH
11052: LD_STRING DR0-Sol2-1
11054: PPUSH
11055: LD_STRING DR0-Sol2-1
11057: PPUSH
11058: CALL 6822 0 3
11062: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11063: LD_EXP 4
11067: PPUSH
11068: CALL_OW 302
11072: IFFALSE 11086
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11074: LD_EXP 4
11078: PPUSH
11079: LD_STRING DR0-Cyrus-1
11081: PPUSH
11082: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11086: LD_EXP 2
11090: PPUSH
11091: CALL_OW 302
11095: PUSH
11096: LD_VAR 0 1
11100: OR
11101: IFFALSE 11115
// Say ( JMM , DR0-JMM-1 ) ;
11103: LD_EXP 1
11107: PPUSH
11108: LD_STRING DR0-JMM-1
11110: PPUSH
11111: CALL_OW 88
// end ;
11115: PPOPN 1
11117: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11118: LD_EXP 5
11122: PPUSH
11123: CALL_OW 302
11127: PUSH
11128: LD_INT 22
11130: PUSH
11131: LD_INT 1
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 25
11140: PUSH
11141: LD_INT 16
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: PPUSH
11152: CALL_OW 69
11156: PUSH
11157: LD_INT 0
11159: GREATER
11160: AND
11161: PUSH
11162: LD_INT 1
11164: PPUSH
11165: CALL_OW 463
11169: NOT
11170: AND
11171: IFFALSE 11449
11173: GO 11175
11175: DISABLE
// begin DialogueOn ;
11176: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11180: LD_EXP 5
11184: PPUSH
11185: LD_STRING D10-Frank-1
11187: PPUSH
11188: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11192: LD_INT 22
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 21
11204: PUSH
11205: LD_INT 1
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: LD_INT 2
11214: PUSH
11215: LD_INT 25
11217: PUSH
11218: LD_INT 1
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 25
11227: PUSH
11228: LD_INT 2
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 25
11237: PUSH
11238: LD_INT 3
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 25
11247: PUSH
11248: LD_INT 4
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: PPUSH
11267: CALL_OW 69
11271: PUSH
11272: LD_EXP 1
11276: PUSH
11277: LD_EXP 5
11281: PUSH
11282: LD_EXP 2
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: DIFF
11292: PPUSH
11293: LD_STRING D10-Sol1-1
11295: PPUSH
11296: LD_STRING D10-FSol1-1
11298: PPUSH
11299: CALL 6822 0 3
// Say ( Frank , D10-Frank-2 ) ;
11303: LD_EXP 5
11307: PPUSH
11308: LD_STRING D10-Frank-2
11310: PPUSH
11311: CALL_OW 88
// if IsOk ( Lisa ) then
11315: LD_EXP 2
11319: PPUSH
11320: CALL_OW 302
11324: IFFALSE 11340
// Say ( Lisa , D10-Lisa-2 ) else
11326: LD_EXP 2
11330: PPUSH
11331: LD_STRING D10-Lisa-2
11333: PPUSH
11334: CALL_OW 88
11338: GO 11445
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11340: LD_INT 22
11342: PUSH
11343: LD_INT 1
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 2
11362: PUSH
11363: LD_INT 25
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: LD_INT 2
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 25
11385: PUSH
11386: LD_INT 3
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 25
11395: PUSH
11396: LD_INT 4
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: PPUSH
11415: CALL_OW 69
11419: PUSH
11420: LD_EXP 1
11424: PUSH
11425: LD_EXP 5
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: DIFF
11434: PPUSH
11435: LD_STRING D10-Sol1-2
11437: PPUSH
11438: LD_STRING D10-FSol1-2
11440: PPUSH
11441: CALL 6822 0 3
// DialogueOff ;
11445: CALL_OW 7
// end ;
11449: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11450: LD_INT 1
11452: PPUSH
11453: CALL_OW 463
11457: NOT
11458: IFFALSE 11741
11460: GO 11462
11462: DISABLE
// begin HarrisonSupport ;
11463: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11467: LD_EXP 18
11471: PPUSH
11472: CALL_OW 310
11476: PPUSH
11477: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11481: LD_EXP 18
11485: PPUSH
11486: LD_STRING DEng-Eng1-1
11488: PPUSH
11489: CALL_OW 88
// wait ( 1 1$0 ) ;
11493: LD_INT 2100
11495: PPUSH
11496: CALL_OW 67
// DialogueOn ;
11500: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11504: LD_EXP 15
11508: PPUSH
11509: LD_STRING DRem-Har-1
11511: PPUSH
11512: CALL_OW 94
// if contactWithRussian then
11516: LD_EXP 23
11520: IFFALSE 11536
// Say ( JMM , DRem-JMM-1 ) else
11522: LD_EXP 1
11526: PPUSH
11527: LD_STRING DRem-JMM-1
11529: PPUSH
11530: CALL_OW 88
11534: GO 11548
// Say ( JMM , DRem-JMM-1a ) ;
11536: LD_EXP 1
11540: PPUSH
11541: LD_STRING DRem-JMM-1a
11543: PPUSH
11544: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11548: LD_EXP 15
11552: PPUSH
11553: LD_STRING DRem-Har-2
11555: PPUSH
11556: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11560: LD_STRING DenisInDelta
11562: PPUSH
11563: LD_INT 0
11565: PPUSH
11566: CALL_OW 30
11570: IFFALSE 11586
// Say ( JMM , DRem-JMM-2 ) else
11572: LD_EXP 1
11576: PPUSH
11577: LD_STRING DRem-JMM-2
11579: PPUSH
11580: CALL_OW 88
11584: GO 11598
// Say ( JMM , DRem-JMM-2a ) ;
11586: LD_EXP 1
11590: PPUSH
11591: LD_STRING DRem-JMM-2a
11593: PPUSH
11594: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11598: LD_EXP 15
11602: PPUSH
11603: LD_STRING DRem-Har-3
11605: PPUSH
11606: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11610: LD_EXP 1
11614: PPUSH
11615: LD_STRING DRem-JMM-3
11617: PPUSH
11618: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11622: LD_EXP 15
11626: PPUSH
11627: LD_STRING DRem-Har-4
11629: PPUSH
11630: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11634: LD_STRING DenisInDelta
11636: PPUSH
11637: LD_INT 0
11639: PPUSH
11640: CALL_OW 30
11644: IFFALSE 11704
// begin Say ( JMM , DRem-JMM-4 ) ;
11646: LD_EXP 1
11650: PPUSH
11651: LD_STRING DRem-JMM-4
11653: PPUSH
11654: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11658: LD_EXP 15
11662: PPUSH
11663: LD_STRING DRem-Har-5
11665: PPUSH
11666: CALL_OW 94
// DialogueOff ;
11670: CALL_OW 7
// wait ( 4 4$00 ) ;
11674: LD_INT 8400
11676: PPUSH
11677: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11681: LD_INT 35
11683: PPUSH
11684: CALL_OW 67
// until not InBattle ( 1 ) ;
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 463
11695: NOT
11696: IFFALSE 11681
// SpawnDenis ;
11698: CALL 11742 0 0
// end else
11702: GO 11741
// begin DialogueOff ;
11704: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11708: LD_INT 36
11710: PPUSH
11711: LD_INT 1
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11721: LD_INT 15
11723: PPUSH
11724: LD_INT 1
11726: PPUSH
11727: LD_INT 1
11729: PPUSH
11730: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11734: LD_STRING MR
11736: PPUSH
11737: CALL_OW 337
// end ; end ;
11741: END
// export function SpawnDenis ; var tmp ; begin
11742: LD_INT 0
11744: PPUSH
11745: PPUSH
// PrepareDenis ;
11746: CALL 2244 0 0
// if not Denis then
11750: LD_EXP 9
11754: NOT
11755: IFFALSE 11759
// exit ;
11757: GO 11980
// CenterNowOnUnits ( Denis ) ;
11759: LD_EXP 9
11763: PPUSH
11764: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11768: LD_ADDR_VAR 0 2
11772: PUSH
11773: LD_INT 22
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PPUSH
11783: CALL_OW 69
11787: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11788: LD_EXP 9
11792: PPUSH
11793: LD_VAR 0 2
11797: PPUSH
11798: LD_EXP 9
11802: PPUSH
11803: CALL_OW 74
11807: PPUSH
11808: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11812: LD_INT 35
11814: PPUSH
11815: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11819: LD_INT 22
11821: PUSH
11822: LD_INT 1
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: LD_INT 91
11831: PUSH
11832: LD_EXP 9
11836: PUSH
11837: LD_INT 10
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PPUSH
11849: CALL_OW 69
11853: IFFALSE 11812
// SetSide ( Denis , 1 ) ;
11855: LD_EXP 9
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: CALL_OW 235
// DialogueOn ;
11867: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11871: LD_EXP 9
11875: PPUSH
11876: LD_STRING DDen-Den-1
11878: PPUSH
11879: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11883: LD_EXP 1
11887: PPUSH
11888: LD_STRING DDen-JMM-1
11890: PPUSH
11891: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11895: LD_EXP 9
11899: PPUSH
11900: LD_STRING DDen-Den-2
11902: PPUSH
11903: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11907: LD_EXP 1
11911: PPUSH
11912: LD_STRING DDen-JMM-2
11914: PPUSH
11915: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11919: LD_EXP 9
11923: PPUSH
11924: LD_STRING DDen-Den-3
11926: PPUSH
11927: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11931: LD_EXP 1
11935: PPUSH
11936: LD_STRING DDen-JMM-3
11938: PPUSH
11939: CALL_OW 88
// DialogueOff ;
11943: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11947: LD_INT 36
11949: PPUSH
11950: LD_INT 1
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11960: LD_INT 15
11962: PPUSH
11963: LD_INT 1
11965: PPUSH
11966: LD_INT 1
11968: PPUSH
11969: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11973: LD_STRING MR
11975: PPUSH
11976: CALL_OW 337
// end ;
11980: LD_VAR 0 1
11984: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11985: LD_INT 22
11987: PUSH
11988: LD_INT 1
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 30
11997: PUSH
11998: LD_INT 15
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PPUSH
12009: CALL_OW 69
12013: PUSH
12014: LD_EXP 9
12018: PPUSH
12019: CALL_OW 302
12023: AND
12024: PUSH
12025: LD_INT 1
12027: PPUSH
12028: CALL_OW 463
12032: NOT
12033: AND
12034: IFFALSE 12063
12036: GO 12038
12038: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12039: LD_EXP 9
12043: PPUSH
12044: LD_STRING DR1-Den-1
12046: PPUSH
12047: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12051: LD_EXP 1
12055: PPUSH
12056: LD_STRING DR1-JMM-1
12058: PPUSH
12059: CALL_OW 88
// end ;
12063: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12064: LD_INT 15
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: CALL_OW 321
12074: PUSH
12075: LD_INT 2
12077: EQUAL
12078: PUSH
12079: LD_EXP 9
12083: PPUSH
12084: CALL_OW 302
12088: AND
12089: PUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 463
12097: NOT
12098: AND
12099: IFFALSE 12308
12101: GO 12103
12103: DISABLE
// begin DialogueOn ;
12104: CALL_OW 6
// if IsOK ( Denis ) then
12108: LD_EXP 9
12112: PPUSH
12113: CALL_OW 302
12117: IFFALSE 12133
// Say ( Denis , DR2-Den-1 ) else
12119: LD_EXP 9
12123: PPUSH
12124: LD_STRING DR2-Den-1
12126: PPUSH
12127: CALL_OW 88
12131: GO 12192
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12133: LD_INT 22
12135: PUSH
12136: LD_INT 1
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 21
12145: PUSH
12146: LD_INT 1
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 25
12155: PUSH
12156: LD_INT 4
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 69
12172: PUSH
12173: LD_EXP 1
12177: PUSH
12178: EMPTY
12179: LIST
12180: DIFF
12181: PPUSH
12182: LD_STRING DR2-Sci1-1
12184: PPUSH
12185: LD_STRING DR2-FSci1-1
12187: PPUSH
12188: CALL 6822 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12192: LD_EXP 1
12196: PPUSH
12197: LD_STRING DR2-JMM-1
12199: PPUSH
12200: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12204: LD_INT 22
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 21
12216: PUSH
12217: LD_INT 1
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 26
12226: PUSH
12227: LD_INT 1
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 23
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 69
12254: PUSH
12255: LD_EXP 1
12259: PUSH
12260: LD_EXP 9
12264: PUSH
12265: LD_EXP 8
12269: PUSH
12270: LD_EXP 5
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: DIFF
12281: PPUSH
12282: LD_STRING DR2-Sol1-1
12284: PPUSH
12285: LD_STRING 
12287: PPUSH
12288: CALL 6822 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12292: LD_EXP 1
12296: PPUSH
12297: LD_STRING DR2-JMM-2
12299: PPUSH
12300: CALL_OW 88
// DialogueOff ;
12304: CALL_OW 7
// end ;
12308: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12309: LD_INT 22
12311: PUSH
12312: LD_INT 1
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 30
12321: PUSH
12322: LD_INT 36
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: PUSH
12338: LD_INT 0
12340: EQUAL
12341: PUSH
12342: LD_INT 22
12344: PUSH
12345: LD_INT 1
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 21
12354: PUSH
12355: LD_INT 2
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 33
12364: PUSH
12365: LD_INT 2
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: PUSH
12382: LD_INT 0
12384: GREATER
12385: AND
12386: PUSH
12387: LD_EXP 24
12391: PUSH
12392: LD_INT 0
12394: EQUAL
12395: AND
12396: PUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 463
12404: NOT
12405: AND
12406: IFFALSE 12543
12408: GO 12410
12410: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
12411: LD_INT 22
12413: PUSH
12414: LD_INT 1
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 21
12423: PUSH
12424: LD_INT 1
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 25
12433: PUSH
12434: LD_INT 3
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: LD_INT 26
12443: PUSH
12444: LD_INT 1
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PPUSH
12457: CALL_OW 69
12461: PUSH
12462: LD_EXP 1
12466: PUSH
12467: LD_EXP 6
12471: PUSH
12472: LD_EXP 7
12476: PUSH
12477: LD_EXP 9
12481: PUSH
12482: LD_EXP 16
12486: PUSH
12487: LD_EXP 3
12491: PUSH
12492: LD_EXP 4
12496: PUSH
12497: LD_EXP 2
12501: PUSH
12502: LD_EXP 5
12506: PUSH
12507: LD_EXP 8
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: DIFF
12524: PPUSH
12525: LD_STRING D3a-Mech1-1
12527: PPUSH
12528: LD_STRING 
12530: PPUSH
12531: CALL 6822 0 3
// firstTower = 2 ;
12535: LD_ADDR_EXP 24
12539: PUSH
12540: LD_INT 2
12542: ST_TO_ADDR
// end ;
12543: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12544: LD_INT 22
12546: PUSH
12547: LD_INT 3
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 21
12556: PUSH
12557: LD_INT 3
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PPUSH
12568: CALL_OW 69
12572: PUSH
12573: LD_INT 0
12575: EQUAL
12576: IFFALSE 12707
12578: GO 12580
12580: DISABLE
12581: LD_INT 0
12583: PPUSH
// begin stop_talking := true ;
12584: LD_ADDR_OWVAR 56
12588: PUSH
12589: LD_INT 1
12591: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12592: LD_ADDR_VAR 0 1
12596: PUSH
12597: LD_INT 22
12599: PUSH
12600: LD_INT 1
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 21
12609: PUSH
12610: LD_INT 1
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 2
12619: PUSH
12620: LD_INT 25
12622: PUSH
12623: LD_INT 1
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 2
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 25
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 25
12652: PUSH
12653: LD_INT 4
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: PUSH
12677: FOR_IN
12678: IFFALSE 12697
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12680: LD_VAR 0 1
12684: PPUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 7500
12690: PPUSH
12691: CALL_OW 591
12695: GO 12677
12697: POP
12698: POP
// stop_talking := false ;
12699: LD_ADDR_OWVAR 56
12703: PUSH
12704: LD_INT 0
12706: ST_TO_ADDR
// end ;
12707: PPOPN 1
12709: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12710: LD_INT 22
12712: PUSH
12713: LD_INT 1
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 30
12722: PUSH
12723: LD_INT 36
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 69
12738: PUSH
12739: LD_INT 22
12741: PUSH
12742: LD_INT 1
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 21
12751: PUSH
12752: LD_INT 2
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 33
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: AND
12779: PUSH
12780: CALL 13332 0 0
12784: AND
12785: PUSH
12786: LD_INT 1
12788: PPUSH
12789: CALL_OW 463
12793: NOT
12794: AND
12795: IFFALSE 13329
12797: GO 12799
12799: DISABLE
12800: LD_INT 0
12802: PPUSH
12803: PPUSH
12804: PPUSH
12805: PPUSH
12806: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12807: LD_ADDR_VAR 0 3
12811: PUSH
12812: LD_INT 22
12814: PUSH
12815: LD_INT 1
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 30
12824: PUSH
12825: LD_INT 36
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PPUSH
12836: CALL_OW 69
12840: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12841: LD_ADDR_VAR 0 4
12845: PUSH
12846: LD_INT 22
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 21
12858: PUSH
12859: LD_INT 2
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 33
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12886: LD_ADDR_VAR 0 5
12890: PUSH
12891: EMPTY
12892: ST_TO_ADDR
// for i in tmpControlTowers do
12893: LD_ADDR_VAR 0 1
12897: PUSH
12898: LD_VAR 0 3
12902: PUSH
12903: FOR_IN
12904: IFFALSE 13327
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12906: LD_EXP 1
12910: PPUSH
12911: CALL_OW 310
12915: PUSH
12916: LD_VAR 0 1
12920: EQUAL
12921: PUSH
12922: LD_EXP 1
12926: PPUSH
12927: CALL_OW 257
12931: PUSH
12932: LD_INT 3
12934: EQUAL
12935: AND
12936: IFFALSE 13070
// begin InGameOn ;
12938: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12942: LD_VAR 0 4
12946: PUSH
12947: LD_INT 1
12949: ARRAY
12950: PPUSH
12951: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12955: LD_EXP 1
12959: PPUSH
12960: LD_STRING D4a-JMM-1
12962: PPUSH
12963: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12967: LD_VAR 0 4
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: LD_EXP 1
12980: PPUSH
12981: CALL_OW 53
// wait ( 0 0$1 ) ;
12985: LD_INT 35
12987: PPUSH
12988: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12992: LD_VAR 0 4
12996: PUSH
12997: LD_INT 1
12999: ARRAY
13000: PPUSH
13001: LD_VAR 0 4
13005: PUSH
13006: LD_INT 1
13008: ARRAY
13009: PPUSH
13010: CALL_OW 250
13014: PUSH
13015: LD_INT 3
13017: PLUS
13018: PPUSH
13019: LD_VAR 0 4
13023: PUSH
13024: LD_INT 1
13026: ARRAY
13027: PPUSH
13028: CALL_OW 251
13032: PUSH
13033: LD_INT 2
13035: MINUS
13036: PPUSH
13037: CALL_OW 111
// wait ( 0 0$2 ) ;
13041: LD_INT 70
13043: PPUSH
13044: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13048: LD_EXP 1
13052: PPUSH
13053: LD_STRING D4b-JMM-1
13055: PPUSH
13056: CALL_OW 88
// InGameOff ;
13060: CALL_OW 9
// exit ;
13064: POP
13065: POP
13066: GO 13329
// end else
13068: GO 13325
// begin InGameOn ;
13070: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13074: LD_ADDR_VAR 0 5
13078: PUSH
13079: LD_VAR 0 1
13083: PPUSH
13084: CALL_OW 313
13088: PPUSH
13089: LD_INT 25
13091: PUSH
13092: LD_INT 3
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PPUSH
13099: CALL_OW 72
13103: ST_TO_ADDR
// if not tmpMechanicInside then
13104: LD_VAR 0 5
13108: NOT
13109: IFFALSE 13113
// continue ;
13111: GO 12903
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13113: LD_VAR 0 5
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: PPUSH
13122: CALL_OW 258
13126: PUSH
13127: LD_INT 1
13129: EQUAL
13130: IFFALSE 13150
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13132: LD_VAR 0 5
13136: PUSH
13137: LD_INT 1
13139: ARRAY
13140: PPUSH
13141: LD_STRING D4a-Mech1-1
13143: PPUSH
13144: CALL_OW 88
13148: GO 13166
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13150: LD_VAR 0 5
13154: PUSH
13155: LD_INT 1
13157: ARRAY
13158: PPUSH
13159: LD_STRING D4a-FMech1-1
13161: PPUSH
13162: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13166: LD_VAR 0 4
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: PPUSH
13175: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13179: LD_VAR 0 4
13183: PUSH
13184: LD_INT 1
13186: ARRAY
13187: PPUSH
13188: LD_VAR 0 5
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 53
// wait ( 0 0$1 ) ;
13201: LD_INT 35
13203: PPUSH
13204: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13208: LD_VAR 0 4
13212: PUSH
13213: LD_INT 1
13215: ARRAY
13216: PPUSH
13217: LD_VAR 0 4
13221: PUSH
13222: LD_INT 1
13224: ARRAY
13225: PPUSH
13226: CALL_OW 250
13230: PUSH
13231: LD_INT 3
13233: PLUS
13234: PPUSH
13235: LD_VAR 0 4
13239: PUSH
13240: LD_INT 1
13242: ARRAY
13243: PPUSH
13244: CALL_OW 251
13248: PUSH
13249: LD_INT 2
13251: MINUS
13252: PPUSH
13253: CALL_OW 111
// wait ( 0 0$2 ) ;
13257: LD_INT 70
13259: PPUSH
13260: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13264: LD_VAR 0 5
13268: PUSH
13269: LD_INT 1
13271: ARRAY
13272: PPUSH
13273: CALL_OW 258
13277: PUSH
13278: LD_INT 1
13280: EQUAL
13281: IFFALSE 13301
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13283: LD_VAR 0 5
13287: PUSH
13288: LD_INT 1
13290: ARRAY
13291: PPUSH
13292: LD_STRING D4b-Mech1-1
13294: PPUSH
13295: CALL_OW 88
13299: GO 13317
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13301: LD_VAR 0 5
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PPUSH
13310: LD_STRING D4b-FMech1-1
13312: PPUSH
13313: CALL_OW 88
// InGameOff ;
13317: CALL_OW 9
// exit ;
13321: POP
13322: POP
13323: GO 13329
// end ; end ;
13325: GO 12903
13327: POP
13328: POP
// end ;
13329: PPOPN 5
13331: END
// function CheckMehInside ; var i , j , tmp ; begin
13332: LD_INT 0
13334: PPUSH
13335: PPUSH
13336: PPUSH
13337: PPUSH
// result := false ;
13338: LD_ADDR_VAR 0 1
13342: PUSH
13343: LD_INT 0
13345: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13346: LD_ADDR_VAR 0 4
13350: PUSH
13351: LD_INT 22
13353: PUSH
13354: LD_INT 1
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 30
13363: PUSH
13364: LD_INT 36
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PPUSH
13375: CALL_OW 69
13379: ST_TO_ADDR
// if not tmp then
13380: LD_VAR 0 4
13384: NOT
13385: IFFALSE 13389
// exit ;
13387: GO 13453
// for i in tmp do
13389: LD_ADDR_VAR 0 2
13393: PUSH
13394: LD_VAR 0 4
13398: PUSH
13399: FOR_IN
13400: IFFALSE 13451
// for j in UnitsInside ( i ) do
13402: LD_ADDR_VAR 0 3
13406: PUSH
13407: LD_VAR 0 2
13411: PPUSH
13412: CALL_OW 313
13416: PUSH
13417: FOR_IN
13418: IFFALSE 13447
// if GetClass ( j ) = class_mechanic then
13420: LD_VAR 0 3
13424: PPUSH
13425: CALL_OW 257
13429: PUSH
13430: LD_INT 3
13432: EQUAL
13433: IFFALSE 13445
// begin result := true ;
13435: LD_ADDR_VAR 0 1
13439: PUSH
13440: LD_INT 1
13442: ST_TO_ADDR
// break ;
13443: GO 13447
// end ;
13445: GO 13417
13447: POP
13448: POP
13449: GO 13399
13451: POP
13452: POP
// end ;
13453: LD_VAR 0 1
13457: RET
// every 12 12$0 do
13458: GO 13460
13460: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13461: LD_INT 35
13463: PPUSH
13464: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) or timeToEnd < 5 5$00 ;
13468: LD_INT 1
13470: PPUSH
13471: CALL_OW 463
13475: NOT
13476: PUSH
13477: LD_INT 32
13479: PPUSH
13480: LD_INT 81
13482: PUSH
13483: LD_INT 1
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PPUSH
13490: CALL_OW 70
13494: NOT
13495: AND
13496: PUSH
13497: LD_EXP 27
13501: PUSH
13502: LD_INT 10500
13504: LESS
13505: OR
13506: IFFALSE 13461
// PrepareKurt ;
13508: CALL 16141 0 0
// end ;
13512: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13513: LD_EXP 16
13517: PPUSH
13518: CALL_OW 302
13522: PUSH
13523: LD_EXP 16
13527: PPUSH
13528: CALL_OW 255
13532: PUSH
13533: LD_INT 1
13535: EQUAL
13536: AND
13537: PUSH
13538: LD_EXP 2
13542: AND
13543: IFFALSE 13708
13545: GO 13547
13547: DISABLE
// begin wait ( 0 0$50 ) ;
13548: LD_INT 1750
13550: PPUSH
13551: CALL_OW 67
// if not IsOk ( Joan ) then
13555: LD_EXP 16
13559: PPUSH
13560: CALL_OW 302
13564: NOT
13565: IFFALSE 13569
// exit ;
13567: GO 13708
// if IsOK ( Lisa ) then
13569: LD_EXP 2
13573: PPUSH
13574: CALL_OW 302
13578: IFFALSE 13708
// begin DialogueOn ;
13580: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13584: LD_EXP 2
13588: PPUSH
13589: LD_STRING D7-Lisa-1
13591: PPUSH
13592: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13596: LD_EXP 1
13600: PPUSH
13601: LD_STRING D7-JMM-1
13603: PPUSH
13604: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13608: LD_EXP 2
13612: PPUSH
13613: LD_STRING D7-Lisa-2
13615: PPUSH
13616: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13620: LD_EXP 1
13624: PPUSH
13625: LD_STRING D7-JMM-2
13627: PPUSH
13628: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13632: LD_EXP 2
13636: PPUSH
13637: LD_STRING D7-Lisa-3
13639: PPUSH
13640: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13644: LD_EXP 1
13648: PPUSH
13649: LD_STRING D7-JMM-3
13651: PPUSH
13652: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13656: LD_EXP 2
13660: PPUSH
13661: LD_STRING D7-Lisa-4
13663: PPUSH
13664: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13668: LD_EXP 1
13672: PPUSH
13673: LD_STRING D7-JMM-4
13675: PPUSH
13676: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13680: LD_EXP 1
13684: PPUSH
13685: LD_STRING D7-JMM-4a
13687: PPUSH
13688: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13692: LD_EXP 2
13696: PPUSH
13697: LD_STRING D7-Lisa-5
13699: PPUSH
13700: CALL_OW 88
// DialogueOff ;
13704: CALL_OW 7
// end ; end ;
13708: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13709: LD_EXP 14
13713: PUSH
13714: LD_INT 22
13716: PUSH
13717: LD_INT 1
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 91
13726: PUSH
13727: LD_EXP 14
13731: PUSH
13732: LD_INT 10
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: LIST
13739: PUSH
13740: LD_INT 2
13742: PUSH
13743: LD_INT 25
13745: PUSH
13746: LD_INT 1
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: LD_INT 25
13755: PUSH
13756: LD_INT 2
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 25
13765: PUSH
13766: LD_INT 3
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 25
13775: PUSH
13776: LD_INT 4
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: PPUSH
13795: CALL_OW 69
13799: PUSH
13800: LD_INT 1
13802: GREATER
13803: AND
13804: IFFALSE 13821
13806: GO 13808
13808: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13809: LD_EXP 14
13813: PPUSH
13814: LD_STRING D5-Sol1-1
13816: PPUSH
13817: CALL_OW 88
13821: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13822: LD_INT 22
13824: PUSH
13825: LD_INT 1
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 33
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PPUSH
13846: CALL_OW 69
13850: PUSH
13851: LD_INT 2
13853: GREATEREQUAL
13854: IFFALSE 13874
13856: GO 13858
13858: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13859: LD_STRING MRa
13861: PPUSH
13862: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13866: LD_ADDR_EXP 29
13870: PUSH
13871: LD_INT 1
13873: ST_TO_ADDR
// end ;
13874: END
// every 2 2$00 do var i , last ;
13875: GO 13877
13877: DISABLE
13878: LD_INT 0
13880: PPUSH
13881: PPUSH
// begin last := 8 ;
13882: LD_ADDR_VAR 0 2
13886: PUSH
13887: LD_INT 8
13889: ST_TO_ADDR
// for i = 1 to last do
13890: LD_ADDR_VAR 0 1
13894: PUSH
13895: DOUBLE
13896: LD_INT 1
13898: DEC
13899: ST_TO_ADDR
13900: LD_VAR 0 2
13904: PUSH
13905: FOR_TO
13906: IFFALSE 13934
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13908: LD_INT 6300
13910: PPUSH
13911: LD_INT 12600
13913: PPUSH
13914: CALL_OW 12
13918: PPUSH
13919: CALL_OW 67
// PrepareRandoms ( i ) ;
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL 4129 0 1
// end ;
13932: GO 13905
13934: POP
13935: POP
// end ;
13936: PPOPN 2
13938: END
// every 5 5$20 do
13939: GO 13941
13941: DISABLE
// begin DialogueOn ;
13942: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13946: LD_EXP 10
13950: PPUSH
13951: LD_STRING D12a-Sci-1
13953: PPUSH
13954: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13958: LD_EXP 1
13962: PPUSH
13963: LD_STRING D12a-JMM-1
13965: PPUSH
13966: CALL_OW 88
// DialogueOff ;
13970: CALL_OW 7
// cratesStatus := 1 ;
13974: LD_ADDR_EXP 39
13978: PUSH
13979: LD_INT 1
13981: ST_TO_ADDR
// end ;
13982: END
// every 13 13$0 do
13983: GO 13985
13985: DISABLE
// begin DialogueOn ;
13986: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13990: LD_EXP 10
13994: PPUSH
13995: LD_STRING D12b-Sci-1
13997: PPUSH
13998: CALL_OW 94
// DialogueOff ;
14002: CALL_OW 7
// cratesStatus := 2 ;
14006: LD_ADDR_EXP 39
14010: PUSH
14011: LD_INT 2
14013: ST_TO_ADDR
// BuildBulldozer ;
14014: CALL 9865 0 0
// end ;
14018: END
// every 32 32$0 do
14019: GO 14021
14021: DISABLE
// begin DialogueOn ;
14022: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14026: LD_EXP 10
14030: PPUSH
14031: LD_STRING D12c-Sci-1
14033: PPUSH
14034: CALL_OW 94
// DialogueOff ;
14038: CALL_OW 7
// wait ( 3 3$0 ) ;
14042: LD_INT 6300
14044: PPUSH
14045: CALL_OW 67
// DialogueOn ;
14049: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14053: LD_EXP 10
14057: PPUSH
14058: LD_STRING D12d-Sci-1
14060: PPUSH
14061: CALL_OW 94
// DialogueOff ;
14065: CALL_OW 7
// cratesStatus = 1 ;
14069: LD_ADDR_EXP 39
14073: PUSH
14074: LD_INT 1
14076: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14077: CALL 20338 0 0
// wait ( 2 2$30 ) ;
14081: LD_INT 5250
14083: PPUSH
14084: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14088: LD_INT 35
14090: PPUSH
14091: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14095: LD_INT 1
14097: PPUSH
14098: CALL_OW 463
14102: NOT
14103: PUSH
14104: LD_INT 32
14106: PPUSH
14107: LD_INT 81
14109: PUSH
14110: LD_INT 1
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 70
14121: NOT
14122: AND
14123: PUSH
14124: LD_EXP 27
14128: PUSH
14129: LD_INT 6300
14131: LESS
14132: OR
14133: IFFALSE 14088
// PrepareJoan ;
14135: CALL 3085 0 0
// end ;
14139: END
// every 42 42$0 do
14140: GO 14142
14142: DISABLE
// begin DialogueOn ;
14143: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14147: LD_EXP 10
14151: PPUSH
14152: LD_STRING D12e-Sci-1
14154: PPUSH
14155: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14159: LD_EXP 1
14163: PPUSH
14164: LD_STRING D12e-JMM-1
14166: PPUSH
14167: CALL_OW 88
// DialogueOff ;
14171: CALL_OW 7
// cratesStatus := 2 ;
14175: LD_ADDR_EXP 39
14179: PUSH
14180: LD_INT 2
14182: ST_TO_ADDR
// end ; end_of_file
14183: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14184: LD_VAR 0 1
14188: PUSH
14189: LD_INT 1
14191: EQUAL
14192: PUSH
14193: LD_VAR 0 2
14197: PUSH
14198: LD_INT 3
14200: EQUAL
14201: AND
14202: IFFALSE 14212
// contactWithRussian := 1 ;
14204: LD_ADDR_EXP 23
14208: PUSH
14209: LD_INT 1
14211: ST_TO_ADDR
// end ;
14212: PPOPN 2
14214: END
// on BuildingComplete ( building ) do var i ;
14215: LD_INT 0
14217: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14218: LD_VAR 0 1
14222: PPUSH
14223: CALL_OW 266
14227: PUSH
14228: LD_INT 36
14230: EQUAL
14231: PUSH
14232: LD_VAR 0 1
14236: PPUSH
14237: CALL_OW 255
14241: PUSH
14242: LD_INT 1
14244: EQUAL
14245: AND
14246: PUSH
14247: LD_EXP 24
14251: PUSH
14252: LD_INT 0
14254: EQUAL
14255: AND
14256: IFFALSE 14336
// begin firstTower = 1 ;
14258: LD_ADDR_EXP 24
14262: PUSH
14263: LD_INT 1
14265: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14266: LD_INT 22
14268: PUSH
14269: LD_INT 1
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 21
14278: PUSH
14279: LD_INT 1
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 25
14288: PUSH
14289: LD_INT 3
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 26
14298: PUSH
14299: LD_INT 1
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: PPUSH
14312: CALL_OW 69
14316: PUSH
14317: LD_EXP 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: DIFF
14325: PPUSH
14326: LD_STRING D3b-Mech1-1
14328: PPUSH
14329: LD_STRING D3b-Mech1-1
14331: PPUSH
14332: CALL 6822 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14336: LD_VAR 0 1
14340: PPUSH
14341: CALL_OW 266
14345: PUSH
14346: LD_INT 0
14348: EQUAL
14349: PUSH
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 255
14359: PUSH
14360: LD_INT 1
14362: EQUAL
14363: AND
14364: IFFALSE 14378
// SetBName ( building , theta ) ;
14366: LD_VAR 0 1
14370: PPUSH
14371: LD_STRING theta
14373: PPUSH
14374: CALL_OW 500
// if GetSide ( building ) = 3 then
14378: LD_VAR 0 1
14382: PPUSH
14383: CALL_OW 255
14387: PUSH
14388: LD_INT 3
14390: EQUAL
14391: IFFALSE 14431
// begin for i := 1 to 4 do
14393: LD_ADDR_VAR 0 2
14397: PUSH
14398: DOUBLE
14399: LD_INT 1
14401: DEC
14402: ST_TO_ADDR
14403: LD_INT 4
14405: PUSH
14406: FOR_TO
14407: IFFALSE 14429
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14409: LD_ADDR_EXP 32
14413: PUSH
14414: LD_EXP 32
14418: PPUSH
14419: LD_INT 1
14421: PPUSH
14422: CALL_OW 3
14426: ST_TO_ADDR
14427: GO 14406
14429: POP
14430: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 255
14440: PUSH
14441: LD_INT 3
14443: EQUAL
14444: PUSH
14445: LD_VAR 0 1
14449: PPUSH
14450: CALL_OW 266
14454: PUSH
14455: LD_INT 0
14457: EQUAL
14458: PUSH
14459: LD_VAR 0 1
14463: PPUSH
14464: CALL_OW 266
14468: PUSH
14469: LD_INT 2
14471: EQUAL
14472: OR
14473: PUSH
14474: LD_VAR 0 1
14478: PPUSH
14479: CALL_OW 266
14483: PUSH
14484: LD_INT 4
14486: EQUAL
14487: OR
14488: PUSH
14489: EMPTY
14490: LIST
14491: AND
14492: IFFALSE 14503
// ComUpgrade ( building ) ;
14494: LD_VAR 0 1
14498: PPUSH
14499: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14503: LD_VAR 0 1
14507: PPUSH
14508: CALL_OW 255
14512: PUSH
14513: LD_INT 3
14515: EQUAL
14516: PUSH
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 266
14526: PUSH
14527: LD_INT 32
14529: EQUAL
14530: AND
14531: IFFALSE 14572
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14533: LD_VAR 0 1
14537: PPUSH
14538: LD_INT 42
14540: PUSH
14541: LD_INT 43
14543: PUSH
14544: LD_INT 44
14546: PUSH
14547: LD_INT 46
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 1
14558: PPUSH
14559: LD_INT 4
14561: PPUSH
14562: CALL_OW 12
14566: ARRAY
14567: PPUSH
14568: CALL_OW 208
// end ;
14572: PPOPN 2
14574: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14575: LD_VAR 0 1
14579: PPUSH
14580: CALL 36725 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14584: LD_VAR 0 1
14588: PUSH
14589: LD_INT 22
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: LD_INT 21
14601: PUSH
14602: LD_INT 1
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: LD_INT 23
14611: PUSH
14612: LD_INT 1
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: LIST
14623: PPUSH
14624: CALL_OW 69
14628: IN
14629: IFFALSE 14645
// killCounter := killCounter + 1 ;
14631: LD_ADDR_EXP 46
14635: PUSH
14636: LD_EXP 46
14640: PUSH
14641: LD_INT 1
14643: PLUS
14644: ST_TO_ADDR
// if unit in ruAttackersInForest then
14645: LD_VAR 0 1
14649: PUSH
14650: LD_EXP 49
14654: IN
14655: IFFALSE 14673
// ruAttackersInForest := ruAttackersInForest diff unit ;
14657: LD_ADDR_EXP 49
14661: PUSH
14662: LD_EXP 49
14666: PUSH
14667: LD_VAR 0 1
14671: DIFF
14672: ST_TO_ADDR
// if unit in ruAttackers then
14673: LD_VAR 0 1
14677: PUSH
14678: LD_EXP 48
14682: IN
14683: IFFALSE 14701
// ruAttackers := ruAttackers diff unit ;
14685: LD_ADDR_EXP 48
14689: PUSH
14690: LD_EXP 48
14694: PUSH
14695: LD_VAR 0 1
14699: DIFF
14700: ST_TO_ADDR
// if unit = JMM then
14701: LD_VAR 0 1
14705: PUSH
14706: LD_EXP 1
14710: EQUAL
14711: IFFALSE 14720
// YouLost ( JMM ) ;
14713: LD_STRING JMM
14715: PPUSH
14716: CALL_OW 104
// if unit = Joan then
14720: LD_VAR 0 1
14724: PUSH
14725: LD_EXP 16
14729: EQUAL
14730: IFFALSE 14740
// JoanStatus := 0 ;
14732: LD_ADDR_EXP 17
14736: PUSH
14737: LD_INT 0
14739: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14740: LD_VAR 0 1
14744: PPUSH
14745: CALL_OW 255
14749: PUSH
14750: LD_INT 1
14752: EQUAL
14753: PUSH
14754: LD_VAR 0 1
14758: PPUSH
14759: CALL_OW 247
14763: PUSH
14764: LD_INT 1
14766: EQUAL
14767: AND
14768: PUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 248
14778: PUSH
14779: LD_INT 1
14781: EQUAL
14782: AND
14783: IFFALSE 14799
// unitLost = unitLost + 1 ;
14785: LD_ADDR_EXP 31
14789: PUSH
14790: LD_EXP 31
14794: PUSH
14795: LD_INT 1
14797: PLUS
14798: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 255
14808: PUSH
14809: LD_INT 3
14811: EQUAL
14812: PUSH
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 247
14822: PUSH
14823: LD_INT 3
14825: EQUAL
14826: AND
14827: PUSH
14828: LD_VAR 0 1
14832: PPUSH
14833: CALL_OW 266
14837: PUSH
14838: LD_INT 4
14840: PUSH
14841: LD_INT 5
14843: PUSH
14844: LD_INT 32
14846: PUSH
14847: LD_INT 31
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: IN
14856: AND
14857: IFFALSE 14943
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14859: LD_ADDR_EXP 32
14863: PUSH
14864: LD_EXP 32
14868: PUSH
14869: LD_VAR 0 1
14873: PPUSH
14874: CALL_OW 266
14878: ADD
14879: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14880: LD_ADDR_EXP 32
14884: PUSH
14885: LD_EXP 32
14889: PUSH
14890: LD_VAR 0 1
14894: PPUSH
14895: CALL_OW 250
14899: ADD
14900: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14901: LD_ADDR_EXP 32
14905: PUSH
14906: LD_EXP 32
14910: PUSH
14911: LD_VAR 0 1
14915: PPUSH
14916: CALL_OW 251
14920: ADD
14921: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14922: LD_ADDR_EXP 32
14926: PUSH
14927: LD_EXP 32
14931: PUSH
14932: LD_VAR 0 1
14936: PPUSH
14937: CALL_OW 254
14941: ADD
14942: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14943: LD_EXP 47
14947: PUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 257
14957: PUSH
14958: LD_INT 3
14960: EQUAL
14961: AND
14962: PUSH
14963: LD_VAR 0 1
14967: PPUSH
14968: CALL_OW 255
14972: PUSH
14973: LD_INT 3
14975: EQUAL
14976: AND
14977: PUSH
14978: LD_INT 21
14980: PPUSH
14981: CALL_OW 302
14985: AND
14986: PUSH
14987: LD_INT 21
14989: PPUSH
14990: CALL_OW 255
14994: PUSH
14995: LD_INT 3
14997: EQUAL
14998: AND
14999: IFFALSE 15081
// begin ruMechCounter := ruMechCounter - 1 ;
15001: LD_ADDR_EXP 47
15005: PUSH
15006: LD_EXP 47
15010: PUSH
15011: LD_INT 1
15013: MINUS
15014: ST_TO_ADDR
// uc_side := 3 ;
15015: LD_ADDR_OWVAR 20
15019: PUSH
15020: LD_INT 3
15022: ST_TO_ADDR
// uc_nation := 3 ;
15023: LD_ADDR_OWVAR 21
15027: PUSH
15028: LD_INT 3
15030: ST_TO_ADDR
// hc_gallery :=  ;
15031: LD_ADDR_OWVAR 33
15035: PUSH
15036: LD_STRING 
15038: ST_TO_ADDR
// hc_name :=  ;
15039: LD_ADDR_OWVAR 26
15043: PUSH
15044: LD_STRING 
15046: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15047: LD_INT 0
15049: PPUSH
15050: LD_EXP 35
15054: PPUSH
15055: LD_EXP 36
15059: PPUSH
15060: CALL_OW 12
15064: PPUSH
15065: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15069: CALL_OW 44
15073: PPUSH
15074: LD_INT 21
15076: PPUSH
15077: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15081: LD_VAR 0 1
15085: PPUSH
15086: CALL_OW 255
15090: PUSH
15091: LD_INT 3
15093: EQUAL
15094: PUSH
15095: LD_VAR 0 1
15099: PPUSH
15100: CALL_OW 264
15104: PUSH
15105: LD_INT 52
15107: EQUAL
15108: AND
15109: PUSH
15110: LD_INT 21
15112: PPUSH
15113: CALL_OW 302
15117: AND
15118: PUSH
15119: LD_INT 21
15121: PPUSH
15122: CALL_OW 255
15126: PUSH
15127: LD_INT 3
15129: EQUAL
15130: AND
15131: IFFALSE 15152
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15133: LD_INT 21
15135: PPUSH
15136: LD_INT 22
15138: PPUSH
15139: LD_INT 1
15141: PPUSH
15142: LD_INT 1
15144: PPUSH
15145: LD_INT 52
15147: PPUSH
15148: CALL_OW 125
// end ;
15152: PPOPN 1
15154: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15155: LD_INT 0
15157: PPUSH
15158: PPUSH
15159: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15160: LD_VAR 0 1
15164: PPUSH
15165: LD_VAR 0 2
15169: PPUSH
15170: CALL 36845 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15174: LD_VAR 0 1
15178: PPUSH
15179: CALL_OW 255
15183: PUSH
15184: LD_INT 3
15186: EQUAL
15187: PUSH
15188: LD_VAR 0 1
15192: PPUSH
15193: CALL_OW 264
15197: PUSH
15198: LD_INT 51
15200: PUSH
15201: LD_INT 52
15203: PUSH
15204: LD_INT 53
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: LIST
15211: IN
15212: NOT
15213: AND
15214: IFFALSE 15245
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15216: LD_ADDR_EXP 48
15220: PUSH
15221: LD_EXP 48
15225: PPUSH
15226: LD_EXP 48
15230: PUSH
15231: LD_INT 1
15233: PLUS
15234: PPUSH
15235: LD_VAR 0 1
15239: PPUSH
15240: CALL_OW 1
15244: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15245: LD_VAR 0 1
15249: PPUSH
15250: CALL_OW 264
15254: PUSH
15255: LD_INT 53
15257: EQUAL
15258: IFFALSE 15413
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15260: LD_VAR 0 1
15264: PPUSH
15265: LD_INT 60
15267: PPUSH
15268: LD_INT 85
15270: PPUSH
15271: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15275: LD_VAR 0 1
15279: PPUSH
15280: LD_INT 43
15282: PPUSH
15283: LD_INT 69
15285: PPUSH
15286: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15290: LD_VAR 0 1
15294: PPUSH
15295: LD_INT 37
15297: PPUSH
15298: LD_INT 46
15300: PPUSH
15301: CALL_OW 171
// wait ( 0 0$1 ) ;
15305: LD_INT 35
15307: PPUSH
15308: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15312: LD_INT 35
15314: PPUSH
15315: CALL_OW 67
// until not HasTask ( vehicle ) ;
15319: LD_VAR 0 1
15323: PPUSH
15324: CALL_OW 314
15328: NOT
15329: IFFALSE 15312
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: LD_INT 34
15338: PPUSH
15339: CALL 9917 0 2
// repeat wait ( 0 0$1 ) ;
15343: LD_INT 35
15345: PPUSH
15346: CALL_OW 67
// until not HasTask ( vehicle ) ;
15350: LD_VAR 0 1
15354: PPUSH
15355: CALL_OW 314
15359: NOT
15360: IFFALSE 15343
// un := IsDrivenBy ( vehicle ) ;
15362: LD_ADDR_VAR 0 4
15366: PUSH
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL_OW 311
15376: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15377: LD_VAR 0 4
15381: PPUSH
15382: LD_INT 96
15384: PPUSH
15385: LD_INT 77
15387: PPUSH
15388: CALL_OW 171
// AddComExitVehicle ( un ) ;
15392: LD_VAR 0 4
15396: PPUSH
15397: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15401: LD_VAR 0 4
15405: PPUSH
15406: LD_INT 17
15408: PPUSH
15409: CALL_OW 180
// end ; end ;
15413: PPOPN 5
15415: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15416: LD_VAR 0 1
15420: PPUSH
15421: CALL_OW 255
15425: PUSH
15426: LD_INT 3
15428: EQUAL
15429: IFFALSE 15460
// begin tamedApemans = tamedApemans + 1 ;
15431: LD_ADDR_EXP 33
15435: PUSH
15436: LD_EXP 33
15440: PUSH
15441: LD_INT 1
15443: PLUS
15444: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15445: LD_VAR 0 1
15449: PPUSH
15450: LD_INT 106
15452: PPUSH
15453: LD_INT 85
15455: PPUSH
15456: CALL_OW 111
// end ; end ;
15460: PPOPN 2
15462: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15463: LD_VAR 0 2
15467: PPUSH
15468: CALL_OW 255
15472: PUSH
15473: LD_INT 3
15475: EQUAL
15476: PUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 255
15486: PUSH
15487: LD_INT 3
15489: EQUAL
15490: AND
15491: PUSH
15492: LD_INT 21
15494: PPUSH
15495: CALL_OW 302
15499: AND
15500: IFFALSE 15514
// ComEnterUnit ( human , rufab ) ;
15502: LD_VAR 0 1
15506: PPUSH
15507: LD_INT 21
15509: PPUSH
15510: CALL_OW 120
// end ;
15514: PPOPN 4
15516: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15517: LD_VAR 0 1
15521: PUSH
15522: LD_INT 21
15524: EQUAL
15525: PUSH
15526: LD_VAR 0 2
15530: PPUSH
15531: CALL_OW 255
15535: PUSH
15536: LD_INT 3
15538: EQUAL
15539: AND
15540: IFFALSE 15554
// SetLives ( human , 1000 ) ;
15542: LD_VAR 0 2
15546: PPUSH
15547: LD_INT 1000
15549: PPUSH
15550: CALL_OW 234
// end ;
15554: PPOPN 2
15556: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15557: LD_VAR 0 1
15561: PPUSH
15562: CALL 36829 0 1
// end ; end_of_file
15566: PPOPN 1
15568: END
// every 0 0$30 trigger cratesStatus = 1 do
15569: LD_EXP 39
15573: PUSH
15574: LD_INT 1
15576: EQUAL
15577: IFFALSE 15630
15579: GO 15581
15581: DISABLE
// begin enable ;
15582: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15583: LD_INT 350
15585: PUSH
15586: LD_INT 875
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 1
15595: PPUSH
15596: LD_INT 2
15598: PPUSH
15599: CALL_OW 12
15603: ARRAY
15604: PPUSH
15605: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15609: LD_INT 1
15611: PPUSH
15612: LD_INT 5
15614: PPUSH
15615: CALL_OW 12
15619: PPUSH
15620: LD_INT 7
15622: PPUSH
15623: LD_INT 1
15625: PPUSH
15626: CALL_OW 55
// end ;
15630: END
// every 1 1$0 trigger cratesStatus = 2 do
15631: LD_EXP 39
15635: PUSH
15636: LD_INT 2
15638: EQUAL
15639: IFFALSE 15722
15641: GO 15643
15643: DISABLE
// begin enable ;
15644: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15645: LD_INT 3150
15647: PUSH
15648: LD_INT 4550
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 1
15657: PPUSH
15658: LD_INT 2
15660: PPUSH
15661: CALL_OW 12
15665: ARRAY
15666: PPUSH
15667: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
15671: LD_INT 2
15673: PUSH
15674: LD_INT 5
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 1
15683: PPUSH
15684: LD_INT 2
15686: PPUSH
15687: CALL_OW 12
15691: ARRAY
15692: PPUSH
15693: LD_INT 6
15695: PUSH
15696: LD_INT 7
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 1
15705: PPUSH
15706: LD_INT 2
15708: PPUSH
15709: CALL_OW 12
15713: ARRAY
15714: PPUSH
15715: LD_INT 1
15717: PPUSH
15718: CALL_OW 55
// end ;
15722: END
// every 0 0$30 + 0 0$10 do
15723: GO 15725
15725: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15726: LD_INT 4
15728: PUSH
15729: LD_INT 5
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 1
15738: PPUSH
15739: LD_INT 2
15741: PPUSH
15742: CALL_OW 12
15746: ARRAY
15747: PPUSH
15748: LD_INT 7
15750: PPUSH
15751: LD_INT 1
15753: PPUSH
15754: CALL_OW 55
// Wait ( 0 0$15 ) ;
15758: LD_INT 525
15760: PPUSH
15761: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15765: LD_INT 4
15767: PUSH
15768: LD_INT 5
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 1
15777: PPUSH
15778: LD_INT 2
15780: PPUSH
15781: CALL_OW 12
15785: ARRAY
15786: PPUSH
15787: LD_INT 7
15789: PPUSH
15790: LD_INT 1
15792: PPUSH
15793: CALL_OW 55
// Wait ( 0 0$20 ) ;
15797: LD_INT 700
15799: PPUSH
15800: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15804: LD_INT 4
15806: PUSH
15807: LD_INT 5
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 1
15816: PPUSH
15817: LD_INT 2
15819: PPUSH
15820: CALL_OW 12
15824: ARRAY
15825: PPUSH
15826: LD_INT 7
15828: PPUSH
15829: LD_INT 1
15831: PPUSH
15832: CALL_OW 55
// end ; end_of_file
15836: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15837: LD_EXP 25
15841: PUSH
15842: LD_INT 1
15844: EQUAL
15845: IFFALSE 16138
15847: GO 15849
15849: DISABLE
15850: LD_INT 0
15852: PPUSH
15853: PPUSH
15854: PPUSH
// begin enable ;
15855: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15856: LD_ADDR_VAR 0 2
15860: PUSH
15861: LD_INT 22
15863: PUSH
15864: LD_INT 1
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 21
15873: PUSH
15874: LD_INT 3
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 2
15883: PUSH
15884: LD_INT 30
15886: PUSH
15887: LD_INT 0
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 30
15896: PUSH
15897: LD_INT 1
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: LIST
15913: PPUSH
15914: CALL_OW 69
15918: ST_TO_ADDR
// for i in tmp do
15919: LD_ADDR_VAR 0 1
15923: PUSH
15924: LD_VAR 0 2
15928: PUSH
15929: FOR_IN
15930: IFFALSE 15963
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15932: LD_ADDR_VAR 0 3
15936: PUSH
15937: LD_VAR 0 3
15941: PUSH
15942: LD_VAR 0 1
15946: PPUSH
15947: CALL_OW 274
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 275
15959: PLUS
15960: ST_TO_ADDR
15961: GO 15929
15963: POP
15964: POP
// strings = [ ] ;
15965: LD_ADDR_EXP 28
15969: PUSH
15970: EMPTY
15971: ST_TO_ADDR
// if tmp = 0 then
15972: LD_VAR 0 2
15976: PUSH
15977: LD_INT 0
15979: EQUAL
15980: IFFALSE 16005
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15982: LD_ADDR_EXP 28
15986: PUSH
15987: LD_EXP 28
15991: PUSH
15992: LD_STRING #Am06-1
15994: PUSH
15995: LD_EXP 26
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: ADD
16004: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16005: LD_VAR 0 2
16009: PUSH
16010: LD_EXP 26
16014: PUSH
16015: LD_VAR 0 3
16019: GREATER
16020: AND
16021: IFFALSE 16052
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16023: LD_ADDR_EXP 28
16027: PUSH
16028: LD_EXP 28
16032: PUSH
16033: LD_STRING #Am06-1
16035: PUSH
16036: LD_EXP 26
16040: PUSH
16041: LD_VAR 0 3
16045: MINUS
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: ADD
16051: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16052: LD_VAR 0 2
16056: PUSH
16057: LD_EXP 26
16061: PUSH
16062: LD_VAR 0 3
16066: LESSEQUAL
16067: AND
16068: IFFALSE 16091
// strings = strings ^ [ #Am06-1 , 0 ] ;
16070: LD_ADDR_EXP 28
16074: PUSH
16075: LD_EXP 28
16079: PUSH
16080: LD_STRING #Am06-1
16082: PUSH
16083: LD_INT 0
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: ADD
16090: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16091: LD_ADDR_EXP 27
16095: PUSH
16096: LD_EXP 27
16100: PUSH
16101: LD_INT 35
16103: MINUS
16104: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16105: LD_ADDR_EXP 28
16109: PUSH
16110: LD_EXP 28
16114: PUSH
16115: LD_STRING #Am06-2
16117: PUSH
16118: LD_EXP 27
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: ADD
16127: ST_TO_ADDR
// display_strings = strings ;
16128: LD_ADDR_OWVAR 47
16132: PUSH
16133: LD_EXP 28
16137: ST_TO_ADDR
// end ; end_of_file
16138: PPOPN 3
16140: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
16141: LD_INT 0
16143: PPUSH
16144: PPUSH
16145: PPUSH
16146: PPUSH
16147: PPUSH
16148: PPUSH
16149: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: LD_INT 22
16157: PUSH
16158: LD_INT 1
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 2
16167: PUSH
16168: LD_INT 30
16170: PUSH
16171: LD_INT 0
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 1
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PPUSH
16197: CALL_OW 69
16201: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16202: LD_INT 35
16204: PPUSH
16205: CALL_OW 67
// until depot ;
16209: LD_VAR 0 3
16213: IFFALSE 16150
// repeat wait ( 0 0$1 ) ;
16215: LD_INT 35
16217: PPUSH
16218: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
16222: LD_ADDR_VAR 0 4
16226: PUSH
16227: LD_INT 22
16229: PUSH
16230: LD_INT 1
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 91
16239: PUSH
16240: LD_VAR 0 3
16244: PUSH
16245: LD_INT 1
16247: ARRAY
16248: PUSH
16249: LD_INT 15
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 2
16269: PUSH
16270: LD_INT 25
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 25
16282: PUSH
16283: LD_INT 2
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 25
16292: PUSH
16293: LD_INT 3
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 25
16302: PUSH
16303: LD_INT 4
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 3
16319: PUSH
16320: LD_INT 54
16322: PUSH
16323: EMPTY
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 3
16332: PUSH
16333: LD_INT 55
16335: PUSH
16336: EMPTY
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: CALL_OW 69
16355: PUSH
16356: LD_EXP 2
16360: PUSH
16361: LD_EXP 3
16365: PUSH
16366: LD_EXP 4
16370: PUSH
16371: LD_EXP 5
16375: PUSH
16376: LD_EXP 7
16380: PUSH
16381: LD_EXP 8
16385: PUSH
16386: LD_EXP 9
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: PUSH
16400: LD_EXP 45
16404: ADD
16405: DIFF
16406: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
16407: LD_VAR 0 4
16411: PUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 463
16419: NOT
16420: AND
16421: IFFALSE 16215
// tmp := tmp [ rand ( 1 , tmp ) ] ;
16423: LD_ADDR_VAR 0 4
16427: PUSH
16428: LD_VAR 0 4
16432: PUSH
16433: LD_INT 1
16435: PPUSH
16436: LD_VAR 0 4
16440: PPUSH
16441: CALL_OW 12
16445: ARRAY
16446: ST_TO_ADDR
// blockSpawn := 1 ;
16447: LD_ADDR_EXP 30
16451: PUSH
16452: LD_INT 1
16454: ST_TO_ADDR
// uc_side := 2 ;
16455: LD_ADDR_OWVAR 20
16459: PUSH
16460: LD_INT 2
16462: ST_TO_ADDR
// uc_nation := 2 ;
16463: LD_ADDR_OWVAR 21
16467: PUSH
16468: LD_INT 2
16470: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16471: LD_ADDR_EXP 20
16475: PUSH
16476: LD_STRING Kurt
16478: PPUSH
16479: LD_INT 0
16481: PPUSH
16482: LD_STRING 
16484: PPUSH
16485: CALL 41014 0 3
16489: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16490: LD_EXP 20
16494: PPUSH
16495: LD_VAR 0 4
16499: PPUSH
16500: CALL_OW 250
16504: PPUSH
16505: LD_VAR 0 4
16509: PPUSH
16510: CALL_OW 251
16514: PPUSH
16515: LD_INT 5
16517: PPUSH
16518: LD_INT 1
16520: PPUSH
16521: CALL_OW 50
// InGameOn ;
16525: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16529: LD_EXP 20
16533: PPUSH
16534: CALL_OW 87
// wait ( 0 0$2 ) ;
16538: LD_INT 70
16540: PPUSH
16541: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16545: LD_EXP 20
16549: PPUSH
16550: LD_VAR 0 4
16554: PPUSH
16555: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16559: LD_VAR 0 4
16563: PPUSH
16564: LD_EXP 20
16568: PPUSH
16569: CALL_OW 112
// wait ( 0 0$1 ) ;
16573: LD_INT 35
16575: PPUSH
16576: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
16580: LD_VAR 0 4
16584: PPUSH
16585: LD_EXP 20
16589: PPUSH
16590: CALL_OW 119
// DialogueOn ;
16594: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16598: LD_EXP 20
16602: PPUSH
16603: LD_STRING D2-Kurt-1
16605: PPUSH
16606: CALL_OW 88
// if tmp = JMM then
16610: LD_VAR 0 4
16614: PUSH
16615: LD_EXP 1
16619: EQUAL
16620: IFFALSE 16712
// begin Say ( JMM , D2-JMM-1 ) ;
16622: LD_EXP 1
16626: PPUSH
16627: LD_STRING D2-JMM-1
16629: PPUSH
16630: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16634: LD_EXP 20
16638: PPUSH
16639: LD_STRING D2-Kurt-2
16641: PPUSH
16642: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16646: LD_EXP 1
16650: PPUSH
16651: LD_STRING D2-JMM-2
16653: PPUSH
16654: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16658: LD_EXP 20
16662: PPUSH
16663: LD_STRING D2-Kurt-3
16665: PPUSH
16666: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16670: LD_EXP 1
16674: PPUSH
16675: LD_STRING D2-JMM-3
16677: PPUSH
16678: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16682: LD_EXP 20
16686: PPUSH
16687: LD_STRING D2-Kurt-4
16689: PPUSH
16690: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16694: LD_EXP 1
16698: PPUSH
16699: LD_STRING D2-JMM-4
16701: PPUSH
16702: CALL_OW 88
// DialogueOff ;
16706: CALL_OW 7
// end else
16710: GO 16940
// begin if GetSex ( tmp ) = 1 then
16712: LD_VAR 0 4
16716: PPUSH
16717: CALL_OW 258
16721: PUSH
16722: LD_INT 1
16724: EQUAL
16725: IFFALSE 16741
// Say ( tmp , D2-Sol1-1 ) else
16727: LD_VAR 0 4
16731: PPUSH
16732: LD_STRING D2-Sol1-1
16734: PPUSH
16735: CALL_OW 88
16739: GO 16753
// Say ( tmp , D2-FSol1-1 ) ;
16741: LD_VAR 0 4
16745: PPUSH
16746: LD_STRING D2-FSol1-1
16748: PPUSH
16749: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16753: LD_EXP 20
16757: PPUSH
16758: LD_STRING D2-Kurt-2
16760: PPUSH
16761: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16765: LD_VAR 0 4
16769: PPUSH
16770: CALL_OW 258
16774: PUSH
16775: LD_INT 1
16777: EQUAL
16778: IFFALSE 16794
// Say ( tmp , D2-Sol1-2 ) else
16780: LD_VAR 0 4
16784: PPUSH
16785: LD_STRING D2-Sol1-2
16787: PPUSH
16788: CALL_OW 88
16792: GO 16806
// Say ( tmp , D2-FSol1-2 ) ;
16794: LD_VAR 0 4
16798: PPUSH
16799: LD_STRING D2-FSol1-2
16801: PPUSH
16802: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16806: LD_EXP 20
16810: PPUSH
16811: LD_STRING D2-Kurt-3
16813: PPUSH
16814: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16818: LD_VAR 0 4
16822: PPUSH
16823: CALL_OW 258
16827: PUSH
16828: LD_INT 1
16830: EQUAL
16831: IFFALSE 16847
// Say ( tmp , D2-Sol1-3 ) else
16833: LD_VAR 0 4
16837: PPUSH
16838: LD_STRING D2-Sol1-3
16840: PPUSH
16841: CALL_OW 88
16845: GO 16859
// Say ( tmp , D2-FSol1-3 ) ;
16847: LD_VAR 0 4
16851: PPUSH
16852: LD_STRING D2-FSol1-3
16854: PPUSH
16855: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16859: LD_EXP 20
16863: PPUSH
16864: LD_STRING D2-Kurt-4
16866: PPUSH
16867: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16871: LD_VAR 0 4
16875: PPUSH
16876: CALL_OW 258
16880: PUSH
16881: LD_INT 1
16883: EQUAL
16884: IFFALSE 16912
// begin Say ( tmp , D2-Sol1-4 ) ;
16886: LD_VAR 0 4
16890: PPUSH
16891: LD_STRING D2-Sol1-4
16893: PPUSH
16894: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
16898: LD_VAR 0 4
16902: PPUSH
16903: LD_STRING D2-Sol1-5
16905: PPUSH
16906: CALL_OW 88
// end else
16910: GO 16936
// begin Say ( tmp , D2-FSol1-4 ) ;
16912: LD_VAR 0 4
16916: PPUSH
16917: LD_STRING D2-FSol1-4
16919: PPUSH
16920: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16924: LD_VAR 0 4
16928: PPUSH
16929: LD_STRING D2-FSol1-5
16931: PPUSH
16932: CALL_OW 88
// end ; DialogueOff ;
16936: CALL_OW 7
// end ; dec := ShowQuery1 ;
16940: LD_ADDR_VAR 0 6
16944: PUSH
16945: CALL 7307 0 0
16949: ST_TO_ADDR
// if dec = 1 then
16950: LD_VAR 0 6
16954: PUSH
16955: LD_INT 1
16957: EQUAL
16958: IFFALSE 17020
// begin DialogueOn ;
16960: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16964: LD_EXP 20
16968: PPUSH
16969: LD_STRING D2a-Kurt-1
16971: PPUSH
16972: CALL_OW 88
// DialogueOff ;
16976: CALL_OW 7
// InGameOff ;
16980: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16984: LD_INT 1
16986: PPUSH
16987: LD_INT 2
16989: PPUSH
16990: LD_INT 2
16992: PPUSH
16993: LD_INT 1
16995: PPUSH
16996: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17000: LD_EXP 20
17004: PPUSH
17005: LD_INT 8
17007: PPUSH
17008: CALL_OW 113
// readyToEscape := 1 ;
17012: LD_ADDR_EXP 22
17016: PUSH
17017: LD_INT 1
17019: ST_TO_ADDR
// end ; if dec = 2 then
17020: LD_VAR 0 6
17024: PUSH
17025: LD_INT 2
17027: EQUAL
17028: IFFALSE 17496
// begin DialogueOn ;
17030: CALL_OW 6
// if tmp = JMM then
17034: LD_VAR 0 4
17038: PUSH
17039: LD_EXP 1
17043: EQUAL
17044: IFFALSE 17100
// begin Say ( JMM , D2b-JMM-1 ) ;
17046: LD_EXP 1
17050: PPUSH
17051: LD_STRING D2b-JMM-1
17053: PPUSH
17054: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17058: LD_EXP 20
17062: PPUSH
17063: LD_STRING D2b-Kurt-1
17065: PPUSH
17066: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17070: LD_EXP 1
17074: PPUSH
17075: LD_STRING D2b-JMM-2
17077: PPUSH
17078: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17082: LD_EXP 20
17086: PPUSH
17087: LD_STRING D2b-Kurt-2
17089: PPUSH
17090: CALL_OW 88
// DialogueOff ;
17094: CALL_OW 7
// end else
17098: GO 17251
// begin if GetSex ( tmp ) = 1 then
17100: LD_VAR 0 4
17104: PPUSH
17105: CALL_OW 258
17109: PUSH
17110: LD_INT 1
17112: EQUAL
17113: IFFALSE 17129
// Say ( tmp , D2b-Sol1-1 ) else
17115: LD_VAR 0 4
17119: PPUSH
17120: LD_STRING D2b-Sol1-1
17122: PPUSH
17123: CALL_OW 88
17127: GO 17141
// Say ( tmp , D2b-FSol1-1 ) ;
17129: LD_VAR 0 4
17133: PPUSH
17134: LD_STRING D2b-FSol1-1
17136: PPUSH
17137: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17141: LD_EXP 20
17145: PPUSH
17146: LD_STRING D2b-Kurt-1
17148: PPUSH
17149: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17153: LD_VAR 0 4
17157: PPUSH
17158: CALL_OW 258
17162: PUSH
17163: LD_INT 1
17165: EQUAL
17166: IFFALSE 17182
// Say ( tmp , D2b-Sol1-2 ) else
17168: LD_VAR 0 4
17172: PPUSH
17173: LD_STRING D2b-Sol1-2
17175: PPUSH
17176: CALL_OW 88
17180: GO 17194
// Say ( tmp , D2b-FSol1-2 ) ;
17182: LD_VAR 0 4
17186: PPUSH
17187: LD_STRING D2b-FSol1-2
17189: PPUSH
17190: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17194: LD_EXP 20
17198: PPUSH
17199: LD_STRING D2b-Kurt-2
17201: PPUSH
17202: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17206: LD_VAR 0 4
17210: PPUSH
17211: CALL_OW 258
17215: PUSH
17216: LD_INT 1
17218: EQUAL
17219: IFFALSE 17235
// Say ( tmp , D2c-Sol1-2 ) else
17221: LD_VAR 0 4
17225: PPUSH
17226: LD_STRING D2c-Sol1-2
17228: PPUSH
17229: CALL_OW 88
17233: GO 17247
// Say ( tmp , D2c-FSol1-2 ) ;
17235: LD_VAR 0 4
17239: PPUSH
17240: LD_STRING D2c-FSol1-2
17242: PPUSH
17243: CALL_OW 88
// DialogueOff ;
17247: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17251: LD_ADDR_VAR 0 7
17255: PUSH
17256: CALL 7328 0 0
17260: ST_TO_ADDR
// if dec2 = 1 then
17261: LD_VAR 0 7
17265: PUSH
17266: LD_INT 1
17268: EQUAL
17269: IFFALSE 17331
// begin DialogueOn ;
17271: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17275: LD_EXP 20
17279: PPUSH
17280: LD_STRING D2a-Kurt-1
17282: PPUSH
17283: CALL_OW 88
// DialogueOff ;
17287: CALL_OW 7
// InGameOff ;
17291: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17295: LD_INT 1
17297: PPUSH
17298: LD_INT 2
17300: PPUSH
17301: LD_INT 2
17303: PPUSH
17304: LD_INT 1
17306: PPUSH
17307: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17311: LD_EXP 20
17315: PPUSH
17316: LD_INT 8
17318: PPUSH
17319: CALL_OW 113
// readyToEscape := 1 ;
17323: LD_ADDR_EXP 22
17327: PUSH
17328: LD_INT 1
17330: ST_TO_ADDR
// end ; if dec2 = 2 then
17331: LD_VAR 0 7
17335: PUSH
17336: LD_INT 2
17338: EQUAL
17339: IFFALSE 17496
// begin if tmp = JMM then
17341: LD_VAR 0 4
17345: PUSH
17346: LD_EXP 1
17350: EQUAL
17351: IFFALSE 17411
// begin DialogueOn ;
17353: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17357: LD_EXP 1
17361: PPUSH
17362: LD_STRING D2c-JMM-1
17364: PPUSH
17365: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17369: LD_EXP 20
17373: PPUSH
17374: LD_STRING D2c-Kurt-1
17376: PPUSH
17377: CALL_OW 88
// DialogueOff ;
17381: CALL_OW 7
// InGameOff ;
17385: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17389: LD_EXP 20
17393: PPUSH
17394: LD_INT 8
17396: PPUSH
17397: CALL_OW 113
// readyToEscape := 1 ;
17401: LD_ADDR_EXP 22
17405: PUSH
17406: LD_INT 1
17408: ST_TO_ADDR
// end else
17409: GO 17496
// begin DialogueOn ;
17411: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17415: LD_VAR 0 4
17419: PPUSH
17420: CALL_OW 258
17424: PUSH
17425: LD_INT 1
17427: EQUAL
17428: IFFALSE 17444
// Say ( tmp , D2c-Sol1-1 ) else
17430: LD_VAR 0 4
17434: PPUSH
17435: LD_STRING D2c-Sol1-1
17437: PPUSH
17438: CALL_OW 88
17442: GO 17456
// Say ( tmp , D2c-FSol1-1 ) ;
17444: LD_VAR 0 4
17448: PPUSH
17449: LD_STRING D2c-FSol1-1
17451: PPUSH
17452: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17456: LD_EXP 20
17460: PPUSH
17461: LD_STRING D2c-Kurt-1
17463: PPUSH
17464: CALL_OW 88
// DialogueOff ;
17468: CALL_OW 7
// InGameOff ;
17472: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17476: LD_EXP 20
17480: PPUSH
17481: LD_INT 8
17483: PPUSH
17484: CALL_OW 113
// readyToEscape := 1 ;
17488: LD_ADDR_EXP 22
17492: PUSH
17493: LD_INT 1
17495: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17496: LD_VAR 0 6
17500: PUSH
17501: LD_INT 3
17503: EQUAL
17504: IFFALSE 17665
// begin DialogueOn ;
17506: CALL_OW 6
// if tmp = JMM then
17510: LD_VAR 0 4
17514: PUSH
17515: LD_EXP 1
17519: EQUAL
17520: IFFALSE 17580
// begin DialogueOn ;
17522: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17526: LD_EXP 1
17530: PPUSH
17531: LD_STRING D2c-JMM-1
17533: PPUSH
17534: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17538: LD_EXP 20
17542: PPUSH
17543: LD_STRING D2c-Kurt-1
17545: PPUSH
17546: CALL_OW 88
// DialogueOff ;
17550: CALL_OW 7
// InGameOff ;
17554: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17558: LD_EXP 20
17562: PPUSH
17563: LD_INT 8
17565: PPUSH
17566: CALL_OW 113
// readyToEscape := 1 ;
17570: LD_ADDR_EXP 22
17574: PUSH
17575: LD_INT 1
17577: ST_TO_ADDR
// end else
17578: GO 17665
// begin DialogueOn ;
17580: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17584: LD_VAR 0 4
17588: PPUSH
17589: CALL_OW 258
17593: PUSH
17594: LD_INT 1
17596: EQUAL
17597: IFFALSE 17613
// Say ( tmp , D2c-Sol1-1 ) else
17599: LD_VAR 0 4
17603: PPUSH
17604: LD_STRING D2c-Sol1-1
17606: PPUSH
17607: CALL_OW 88
17611: GO 17625
// Say ( tmp , D2c-FSol1-1 ) ;
17613: LD_VAR 0 4
17617: PPUSH
17618: LD_STRING D2c-FSol1-1
17620: PPUSH
17621: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17625: LD_EXP 20
17629: PPUSH
17630: LD_STRING D2c-Kurt-1
17632: PPUSH
17633: CALL_OW 88
// DialogueOff ;
17637: CALL_OW 7
// InGameOff ;
17641: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17645: LD_EXP 20
17649: PPUSH
17650: LD_INT 8
17652: PPUSH
17653: CALL_OW 113
// readyToEscape := 1 ;
17657: LD_ADDR_EXP 22
17661: PUSH
17662: LD_INT 1
17664: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
17665: LD_ADDR_EXP 30
17669: PUSH
17670: LD_INT 0
17672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17673: LD_INT 35
17675: PPUSH
17676: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
17680: LD_EXP 20
17684: PPUSH
17685: LD_INT 8
17687: PPUSH
17688: CALL_OW 308
17692: PUSH
17693: LD_EXP 22
17697: AND
17698: PUSH
17699: LD_EXP 20
17703: PPUSH
17704: CALL_OW 301
17708: OR
17709: IFFALSE 17673
// if IsDead ( Kurt ) then
17711: LD_EXP 20
17715: PPUSH
17716: CALL_OW 301
17720: IFFALSE 17724
// exit ;
17722: GO 17779
// RemoveUnit ( Kurt ) ;
17724: LD_EXP 20
17728: PPUSH
17729: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
17733: LD_EXP 20
17737: PPUSH
17738: LD_STRING Kurt
17740: PPUSH
17741: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
17745: LD_INT 1
17747: PPUSH
17748: LD_INT 2
17750: PPUSH
17751: CALL_OW 81
17755: PUSH
17756: LD_INT 0
17758: EQUAL
17759: IFFALSE 17771
// kurtStatus = 1 else
17761: LD_ADDR_EXP 21
17765: PUSH
17766: LD_INT 1
17768: ST_TO_ADDR
17769: GO 17779
// kurtStatus = 2 ;
17771: LD_ADDR_EXP 21
17775: PUSH
17776: LD_INT 2
17778: ST_TO_ADDR
// end ; end_of_file
17779: LD_VAR 0 1
17783: RET
// every 0 0$2 do
17784: GO 17786
17786: DISABLE
// begin enable ;
17787: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
17788: LD_INT 3
17790: PPUSH
17791: LD_INT 2
17793: PPUSH
17794: LD_INT 10
17796: PPUSH
17797: LD_EXP 32
17801: PPUSH
17802: CALL 7759 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
17806: LD_INT 3
17808: PPUSH
17809: LD_INT 12
17811: PPUSH
17812: LD_EXP 32
17816: PPUSH
17817: CALL 9362 0 3
// if disableHealAI = 0 then
17821: LD_EXP 34
17825: PUSH
17826: LD_INT 0
17828: EQUAL
17829: IFFALSE 17850
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
17831: LD_INT 3
17833: PPUSH
17834: LD_INT 9
17836: PPUSH
17837: LD_INT 10
17839: PPUSH
17840: LD_INT 32
17842: PUSH
17843: EMPTY
17844: LIST
17845: PPUSH
17846: CALL 8126 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17850: LD_INT 3
17852: PPUSH
17853: LD_INT 51
17855: PPUSH
17856: LD_INT 6
17858: PPUSH
17859: CALL 8815 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
17863: LD_INT 2
17865: PPUSH
17866: CALL_OW 303
17870: PUSH
17871: LD_INT 2
17873: PPUSH
17874: CALL_OW 255
17878: PUSH
17879: LD_INT 1
17881: EQUAL
17882: OR
17883: IFFALSE 17897
// DefendDepot ( 3 , rudepo ) else
17885: LD_INT 3
17887: PPUSH
17888: LD_INT 2
17890: PPUSH
17891: CALL 8642 0 2
17895: GO 17907
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17897: LD_INT 3
17899: PPUSH
17900: LD_INT 10
17902: PPUSH
17903: CALL 8933 0 2
// end ;
17907: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17908: LD_INT 22
17910: PUSH
17911: LD_INT 3
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 21
17920: PUSH
17921: LD_INT 2
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 55
17930: PUSH
17931: EMPTY
17932: LIST
17933: PUSH
17934: LD_INT 3
17936: PUSH
17937: LD_INT 34
17939: PUSH
17940: LD_INT 51
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: PPUSH
17957: CALL_OW 69
17961: PUSH
17962: LD_INT 0
17964: EQUAL
17965: PUSH
17966: LD_INT 21
17968: PPUSH
17969: CALL_OW 255
17973: PUSH
17974: LD_INT 3
17976: EQUAL
17977: AND
17978: PUSH
17979: LD_INT 21
17981: PPUSH
17982: CALL_OW 302
17986: AND
17987: PUSH
17988: LD_INT 2
17990: PPUSH
17991: CALL_OW 255
17995: PUSH
17996: LD_INT 3
17998: EQUAL
17999: AND
18000: PUSH
18001: LD_INT 2
18003: PPUSH
18004: CALL_OW 302
18008: AND
18009: PUSH
18010: LD_INT 21
18012: PPUSH
18013: CALL_OW 313
18017: AND
18018: PUSH
18019: LD_EXP 48
18023: PUSH
18024: LD_INT 4
18026: PUSH
18027: LD_INT 5
18029: PUSH
18030: LD_INT 6
18032: PUSH
18033: LD_INT 6
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: PUSH
18042: LD_OWVAR 67
18046: ARRAY
18047: LESS
18048: AND
18049: IFFALSE 18270
18051: GO 18053
18053: DISABLE
// begin enable ;
18054: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18055: LD_INT 2
18057: PPUSH
18058: CALL_OW 274
18062: PPUSH
18063: LD_INT 1
18065: PPUSH
18066: LD_INT 2000
18068: PPUSH
18069: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18073: LD_INT 3
18075: PPUSH
18076: LD_INT 21
18078: PPUSH
18079: LD_INT 4
18081: PUSH
18082: LD_INT 5
18084: PUSH
18085: LD_INT 6
18087: PUSH
18088: LD_INT 6
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: PUSH
18097: LD_OWVAR 67
18101: ARRAY
18102: PUSH
18103: LD_EXP 48
18107: MINUS
18108: PPUSH
18109: LD_INT 43
18111: PUSH
18112: LD_INT 43
18114: PUSH
18115: LD_INT 44
18117: PUSH
18118: LD_INT 44
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 43
18129: PUSH
18130: LD_INT 43
18132: PUSH
18133: LD_INT 43
18135: PUSH
18136: LD_INT 44
18138: PUSH
18139: LD_INT 44
18141: PUSH
18142: LD_INT 46
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 43
18155: PUSH
18156: LD_INT 43
18158: PUSH
18159: LD_INT 43
18161: PUSH
18162: LD_INT 44
18164: PUSH
18165: LD_INT 44
18167: PUSH
18168: LD_INT 46
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 43
18181: PUSH
18182: LD_INT 43
18184: PUSH
18185: LD_INT 44
18187: PUSH
18188: LD_INT 46
18190: PUSH
18191: LD_INT 46
18193: PUSH
18194: LD_INT 46
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: PUSH
18211: LD_OWVAR 67
18215: ARRAY
18216: PPUSH
18217: LD_INT 1
18219: PPUSH
18220: LD_INT 1
18222: PPUSH
18223: LD_INT 22
18225: PUSH
18226: LD_INT 22
18228: PUSH
18229: LD_INT 24
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: PPUSH
18239: LD_INT 2
18241: PPUSH
18242: CALL_OW 12
18246: ARRAY
18247: PUSH
18248: LD_INT 24
18250: PUSH
18251: LD_INT 24
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: PUSH
18260: LD_OWVAR 67
18264: ARRAY
18265: PPUSH
18266: CALL 7605 0 7
// end ;
18270: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18271: LD_INT 17
18273: PPUSH
18274: CALL_OW 255
18278: PUSH
18279: LD_INT 3
18281: EQUAL
18282: PUSH
18283: LD_INT 17
18285: PPUSH
18286: CALL_OW 302
18290: AND
18291: PUSH
18292: LD_INT 2
18294: PPUSH
18295: CALL_OW 255
18299: PUSH
18300: LD_INT 3
18302: EQUAL
18303: AND
18304: PUSH
18305: LD_INT 2
18307: PPUSH
18308: CALL_OW 302
18312: AND
18313: PUSH
18314: LD_EXP 48
18318: PUSH
18319: LD_INT 4
18321: PUSH
18322: LD_INT 5
18324: PUSH
18325: LD_INT 6
18327: PUSH
18328: LD_INT 7
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: PUSH
18337: LD_OWVAR 67
18341: ARRAY
18342: LESS
18343: AND
18344: IFFALSE 18392
18346: GO 18348
18348: DISABLE
// begin enable ;
18349: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18350: LD_INT 17
18352: PPUSH
18353: LD_INT 22
18355: PPUSH
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 1
18361: PPUSH
18362: LD_INT 42
18364: PUSH
18365: LD_INT 43
18367: PUSH
18368: LD_INT 44
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 1
18378: PPUSH
18379: LD_INT 3
18381: PPUSH
18382: CALL_OW 12
18386: ARRAY
18387: PPUSH
18388: CALL_OW 185
// end ;
18392: END
// every 2 2$0 do var i , j ;
18393: GO 18395
18395: DISABLE
18396: LD_INT 0
18398: PPUSH
18399: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18400: LD_INT 14700
18402: PUSH
18403: LD_INT 33600
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 1
18412: PPUSH
18413: LD_INT 2
18415: PPUSH
18416: CALL_OW 12
18420: ARRAY
18421: PPUSH
18422: CALL_OW 67
// disableHealAI = 1 ;
18426: LD_ADDR_EXP 34
18430: PUSH
18431: LD_INT 1
18433: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18434: LD_ADDR_VAR 0 1
18438: PUSH
18439: LD_INT 22
18441: PUSH
18442: LD_INT 3
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 25
18451: PUSH
18452: LD_INT 4
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PPUSH
18463: CALL_OW 69
18467: PUSH
18468: FOR_IN
18469: IFFALSE 18482
// ComExitBuilding ( i ) ;
18471: LD_VAR 0 1
18475: PPUSH
18476: CALL_OW 122
18480: GO 18468
18482: POP
18483: POP
// wait ( 0 0$1 ) ;
18484: LD_INT 35
18486: PPUSH
18487: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18491: LD_INT 35
18493: PPUSH
18494: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18498: LD_ADDR_VAR 0 1
18502: PUSH
18503: LD_INT 22
18505: PUSH
18506: LD_INT 3
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 25
18515: PUSH
18516: LD_INT 4
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL_OW 69
18531: PUSH
18532: FOR_IN
18533: IFFALSE 18610
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18535: LD_ADDR_VAR 0 2
18539: PUSH
18540: LD_INT 17
18542: PPUSH
18543: LD_INT 22
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 25
18555: PUSH
18556: LD_INT 12
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PPUSH
18567: CALL_OW 70
18571: PUSH
18572: FOR_IN
18573: IFFALSE 18606
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18575: LD_VAR 0 1
18579: PPUSH
18580: LD_VAR 0 2
18584: PPUSH
18585: CALL_OW 250
18589: PPUSH
18590: LD_VAR 0 2
18594: PPUSH
18595: CALL_OW 251
18599: PPUSH
18600: CALL_OW 191
18604: GO 18572
18606: POP
18607: POP
18608: GO 18532
18610: POP
18611: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18612: LD_INT 22
18614: PUSH
18615: LD_INT 3
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 25
18624: PUSH
18625: LD_INT 4
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PPUSH
18636: CALL_OW 69
18640: PUSH
18641: LD_INT 0
18643: EQUAL
18644: PUSH
18645: LD_EXP 33
18649: PUSH
18650: LD_INT 6
18652: PUSH
18653: LD_INT 7
18655: PUSH
18656: LD_INT 8
18658: PUSH
18659: LD_INT 8
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: PUSH
18668: LD_OWVAR 67
18672: ARRAY
18673: GREATEREQUAL
18674: OR
18675: PUSH
18676: LD_INT 17
18678: PPUSH
18679: LD_INT 22
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 25
18691: PUSH
18692: LD_INT 12
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PPUSH
18703: CALL_OW 70
18707: PUSH
18708: LD_INT 0
18710: EQUAL
18711: OR
18712: IFFALSE 18491
// disableHealAI = 0 ;
18714: LD_ADDR_EXP 34
18718: PUSH
18719: LD_INT 0
18721: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18722: LD_ADDR_VAR 0 1
18726: PUSH
18727: LD_INT 22
18729: PUSH
18730: LD_INT 3
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 25
18739: PUSH
18740: LD_INT 12
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PPUSH
18751: CALL_OW 69
18755: PUSH
18756: FOR_IN
18757: IFFALSE 18773
// SetClass ( i , 16 ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_INT 16
18766: PPUSH
18767: CALL_OW 336
18771: GO 18756
18773: POP
18774: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18775: LD_ADDR_VAR 0 1
18779: PUSH
18780: LD_INT 22
18782: PUSH
18783: LD_INT 3
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 25
18792: PUSH
18793: LD_INT 4
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PPUSH
18804: CALL_OW 69
18808: PUSH
18809: FOR_IN
18810: IFFALSE 18826
// ComEnterUnit ( i , rulab ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_INT 32
18819: PPUSH
18820: CALL_OW 120
18824: GO 18809
18826: POP
18827: POP
// end ; end_of_file
18828: PPOPN 2
18830: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18831: LD_EXP 27
18835: PUSH
18836: LD_INT 0
18838: LESSEQUAL
18839: IFFALSE 18993
18841: GO 18843
18843: DISABLE
18844: LD_INT 0
18846: PPUSH
18847: PPUSH
18848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18849: LD_ADDR_VAR 0 2
18853: PUSH
18854: LD_INT 22
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 21
18866: PUSH
18867: LD_INT 3
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 2
18876: PUSH
18877: LD_INT 30
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 30
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: LIST
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: LIST
18906: PPUSH
18907: CALL_OW 69
18911: ST_TO_ADDR
// for i in tmp do
18912: LD_ADDR_VAR 0 1
18916: PUSH
18917: LD_VAR 0 2
18921: PUSH
18922: FOR_IN
18923: IFFALSE 18956
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18925: LD_ADDR_VAR 0 3
18929: PUSH
18930: LD_VAR 0 3
18934: PUSH
18935: LD_VAR 0 1
18939: PPUSH
18940: CALL_OW 274
18944: PPUSH
18945: LD_INT 1
18947: PPUSH
18948: CALL_OW 275
18952: PLUS
18953: ST_TO_ADDR
18954: GO 18922
18956: POP
18957: POP
// if yourCrates >= needCrates then
18958: LD_VAR 0 3
18962: PUSH
18963: LD_EXP 26
18967: GREATEREQUAL
18968: IFFALSE 18986
// FinishMission ( yourCrates , needCrates ) else
18970: LD_VAR 0 3
18974: PPUSH
18975: LD_EXP 26
18979: PPUSH
18980: CALL 18996 0 2
18984: GO 18993
// YouLost ( matmin ) ;
18986: LD_STRING matmin
18988: PPUSH
18989: CALL_OW 104
// end ;
18993: PPOPN 3
18995: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
18996: LD_INT 0
18998: PPUSH
18999: PPUSH
19000: PPUSH
19001: PPUSH
// if killCounter = 0 then
19002: LD_EXP 46
19006: PUSH
19007: LD_INT 0
19009: EQUAL
19010: IFFALSE 19019
// SetAchievement ( ACH_SURV ) ;
19012: LD_STRING ACH_SURV
19014: PPUSH
19015: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19019: LD_INT 22
19021: PUSH
19022: LD_INT 3
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 21
19031: PUSH
19032: LD_INT 3
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: PUSH
19048: LD_INT 0
19050: EQUAL
19051: IFFALSE 19067
// begin wait ( 3 ) ;
19053: LD_INT 3
19055: PPUSH
19056: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19060: LD_STRING ACH_BASEDESTROYER
19062: PPUSH
19063: CALL_OW 543
// end ; m1 := false ;
19067: LD_ADDR_VAR 0 4
19071: PUSH
19072: LD_INT 0
19074: ST_TO_ADDR
// m2 := false ;
19075: LD_ADDR_VAR 0 5
19079: PUSH
19080: LD_INT 0
19082: ST_TO_ADDR
// m3 := false ;
19083: LD_ADDR_VAR 0 6
19087: PUSH
19088: LD_INT 0
19090: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19091: LD_VAR 0 1
19095: PUSH
19096: LD_INT 100
19098: PUSH
19099: LD_INT 140
19101: PUSH
19102: LD_INT 180
19104: PUSH
19105: LD_INT 220
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: PUSH
19114: LD_OWVAR 67
19118: ARRAY
19119: PLUS
19120: PUSH
19121: LD_VAR 0 2
19125: GREATER
19126: IFFALSE 19158
// begin AddMedal ( cans , 1 ) ;
19128: LD_STRING cans
19130: PPUSH
19131: LD_INT 1
19133: PPUSH
19134: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19138: LD_INT 1
19140: PPUSH
19141: LD_STRING 06_crates_1
19143: PPUSH
19144: CALL_OW 39
// m1 := true ;
19148: LD_ADDR_VAR 0 4
19152: PUSH
19153: LD_INT 1
19155: ST_TO_ADDR
// end else
19156: GO 19179
// begin AddMedal ( cans , - 1 ) ;
19158: LD_STRING cans
19160: PPUSH
19161: LD_INT 1
19163: NEG
19164: PPUSH
19165: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19169: LD_INT 0
19171: PPUSH
19172: LD_STRING 06_crates_1
19174: PPUSH
19175: CALL_OW 39
// end ; if unitLost < 3 then
19179: LD_EXP 31
19183: PUSH
19184: LD_INT 3
19186: LESS
19187: IFFALSE 19209
// begin AddMedal ( people , 1 ) ;
19189: LD_STRING people
19191: PPUSH
19192: LD_INT 1
19194: PPUSH
19195: CALL_OW 101
// m2 := true ;
19199: LD_ADDR_VAR 0 5
19203: PUSH
19204: LD_INT 1
19206: ST_TO_ADDR
// end else
19207: GO 19220
// AddMedal ( people , - 1 ) ;
19209: LD_STRING people
19211: PPUSH
19212: LD_INT 1
19214: NEG
19215: PPUSH
19216: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19220: LD_EXP 29
19224: PPUSH
19225: LD_STRING 06_remoteVehs_1
19227: PPUSH
19228: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19232: LD_EXP 29
19236: PUSH
19237: LD_INT 1
19239: EQUAL
19240: IFFALSE 19262
// begin AddMedal ( remote , 1 ) ;
19242: LD_STRING remote
19244: PPUSH
19245: LD_INT 1
19247: PPUSH
19248: CALL_OW 101
// m3 := true ;
19252: LD_ADDR_VAR 0 6
19256: PUSH
19257: LD_INT 1
19259: ST_TO_ADDR
// end else
19260: GO 19302
// begin if GetTech ( 18 , 1 ) = state_enabled then
19262: LD_INT 18
19264: PPUSH
19265: LD_INT 1
19267: PPUSH
19268: CALL_OW 321
19272: PUSH
19273: LD_INT 1
19275: EQUAL
19276: IFFALSE 19291
// AddMedal ( remote , - 1 ) else
19278: LD_STRING remote
19280: PPUSH
19281: LD_INT 1
19283: NEG
19284: PPUSH
19285: CALL_OW 101
19289: GO 19302
// AddMedal ( remote , - 2 ) ;
19291: LD_STRING remote
19293: PPUSH
19294: LD_INT 2
19296: NEG
19297: PPUSH
19298: CALL_OW 101
// end ; if m1 and m2 and m3 then
19302: LD_VAR 0 4
19306: PUSH
19307: LD_VAR 0 5
19311: AND
19312: PUSH
19313: LD_VAR 0 6
19317: AND
19318: IFFALSE 19334
// begin wait ( 3 ) ;
19320: LD_INT 3
19322: PPUSH
19323: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19327: LD_STRING ACH_ASPEED_6
19329: PPUSH
19330: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19334: LD_OWVAR 67
19338: PUSH
19339: LD_INT 3
19341: GREATEREQUAL
19342: PUSH
19343: LD_VAR 0 4
19347: AND
19348: PUSH
19349: LD_VAR 0 5
19353: AND
19354: PUSH
19355: LD_VAR 0 6
19359: AND
19360: IFFALSE 19372
// SetAchievementEX ( ACH_AMER , 6 ) ;
19362: LD_STRING ACH_AMER
19364: PPUSH
19365: LD_INT 6
19367: PPUSH
19368: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19372: LD_EXP 21
19376: PPUSH
19377: LD_STRING 06_KurtStatus_1
19379: PPUSH
19380: CALL_OW 39
// GiveMedals ( Main ) ;
19384: LD_STRING Main
19386: PPUSH
19387: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19391: LD_INT 22
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 21
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 50
19413: PUSH
19414: EMPTY
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: PUSH
19420: LD_INT 25
19422: PUSH
19423: LD_INT 1
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 25
19432: PUSH
19433: LD_INT 2
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 25
19442: PUSH
19443: LD_INT 3
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 25
19452: PUSH
19453: LD_INT 4
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 69
19477: PPUSH
19478: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19482: LD_EXP 1
19486: PPUSH
19487: LD_EXP 43
19491: PUSH
19492: LD_STRING JMM
19494: STR
19495: PPUSH
19496: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19500: LD_EXP 2
19504: PPUSH
19505: LD_EXP 43
19509: PUSH
19510: LD_STRING Lisa
19512: STR
19513: PPUSH
19514: CALL 6920 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19518: LD_EXP 3
19522: PPUSH
19523: LD_EXP 43
19527: PUSH
19528: LD_STRING Bobby
19530: STR
19531: PPUSH
19532: CALL 6920 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19536: LD_EXP 4
19540: PPUSH
19541: LD_EXP 43
19545: PUSH
19546: LD_STRING Cyrus
19548: STR
19549: PPUSH
19550: CALL 6920 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19554: LD_EXP 5
19558: PPUSH
19559: LD_EXP 43
19563: PUSH
19564: LD_STRING Frank
19566: STR
19567: PPUSH
19568: CALL 6920 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19572: LD_EXP 6
19576: PPUSH
19577: LD_EXP 43
19581: PUSH
19582: LD_STRING Brown
19584: STR
19585: PPUSH
19586: CALL 6920 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19590: LD_EXP 7
19594: PPUSH
19595: LD_EXP 43
19599: PUSH
19600: LD_STRING Donaldson
19602: STR
19603: PPUSH
19604: CALL 6920 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19608: LD_EXP 8
19612: PPUSH
19613: LD_EXP 43
19617: PUSH
19618: LD_STRING Gladstone
19620: STR
19621: PPUSH
19622: CALL 6920 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19626: LD_EXP 9
19630: PPUSH
19631: LD_EXP 43
19635: PUSH
19636: LD_STRING Denis
19638: STR
19639: PPUSH
19640: CALL 6920 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19644: LD_EXP 16
19648: PPUSH
19649: LD_EXP 43
19653: PUSH
19654: LD_STRING Joan
19656: STR
19657: PPUSH
19658: CALL 6920 0 2
// if IsLive ( Mike ) then
19662: LD_EXP 11
19666: PPUSH
19667: CALL_OW 300
19671: IFFALSE 19691
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
19673: LD_EXP 11
19677: PPUSH
19678: LD_EXP 43
19682: PUSH
19683: LD_STRING Mike
19685: STR
19686: PPUSH
19687: CALL_OW 38
// if IsLive ( Joan ) then
19691: LD_EXP 16
19695: PPUSH
19696: CALL_OW 300
19700: IFFALSE 19714
// SaveCharacters ( Joan , Joan ) ;
19702: LD_EXP 16
19706: PPUSH
19707: LD_STRING Joan
19709: PPUSH
19710: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
19714: LD_EXP 17
19718: PPUSH
19719: LD_STRING 06_JoanStatus_1
19721: PPUSH
19722: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19726: LD_INT 50
19728: PUSH
19729: EMPTY
19730: LIST
19731: PUSH
19732: LD_INT 22
19734: PUSH
19735: LD_INT 1
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 21
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 2
19754: PUSH
19755: LD_INT 25
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 25
19767: PUSH
19768: LD_INT 2
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 25
19777: PUSH
19778: LD_INT 3
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 25
19787: PUSH
19788: LD_INT 4
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL_OW 69
19812: PUSH
19813: LD_EXP 1
19817: PUSH
19818: LD_EXP 2
19822: PUSH
19823: LD_EXP 3
19827: PUSH
19828: LD_EXP 4
19832: PUSH
19833: LD_EXP 5
19837: PUSH
19838: LD_EXP 6
19842: PUSH
19843: LD_EXP 7
19847: PUSH
19848: LD_EXP 8
19852: PUSH
19853: LD_EXP 9
19857: PUSH
19858: LD_EXP 16
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: DIFF
19875: PPUSH
19876: LD_STRING 06_other_survivors
19878: PPUSH
19879: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19883: LD_INT 50
19885: PUSH
19886: EMPTY
19887: LIST
19888: PUSH
19889: LD_INT 22
19891: PUSH
19892: LD_INT 1
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 21
19901: PUSH
19902: LD_INT 1
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 2
19911: PUSH
19912: LD_INT 25
19914: PUSH
19915: LD_INT 12
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 25
19924: PUSH
19925: LD_INT 16
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: PPUSH
19943: CALL_OW 69
19947: PPUSH
19948: LD_STRING 06_other_apemans
19950: PPUSH
19951: CALL_OW 38
// YouWin ;
19955: CALL_OW 103
// end ; end_of_file
19959: LD_VAR 0 3
19963: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19964: LD_EXP 48
19968: PUSH
19969: LD_OWVAR 1
19973: PUSH
19974: LD_INT 23100
19976: PUSH
19977: LD_INT 21000
19979: PUSH
19980: LD_INT 18900
19982: PUSH
19983: LD_INT 16800
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: PUSH
19992: LD_OWVAR 67
19996: ARRAY
19997: GREATER
19998: AND
19999: IFFALSE 20335
20001: GO 20003
20003: DISABLE
20004: LD_INT 0
20006: PPUSH
20007: PPUSH
20008: PPUSH
20009: PPUSH
// begin enable ;
20010: ENABLE
// for i in ruAttackers do
20011: LD_ADDR_VAR 0 1
20015: PUSH
20016: LD_EXP 48
20020: PUSH
20021: FOR_IN
20022: IFFALSE 20333
// begin if not IsDrivenBy ( i ) then
20024: LD_VAR 0 1
20028: PPUSH
20029: CALL_OW 311
20033: NOT
20034: IFFALSE 20038
// continue ;
20036: GO 20021
// if i mod 2 = 0 then
20038: LD_VAR 0 1
20042: PUSH
20043: LD_INT 2
20045: MOD
20046: PUSH
20047: LD_INT 0
20049: EQUAL
20050: IFFALSE 20116
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] , [ 80 , 12 ] ] else
20052: LD_ADDR_VAR 0 3
20056: PUSH
20057: LD_INT 91
20059: PUSH
20060: LD_INT 52
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 82
20069: PUSH
20070: LD_INT 34
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 90
20079: PUSH
20080: LD_INT 26
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 86
20089: PUSH
20090: LD_INT 16
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 80
20099: PUSH
20100: LD_INT 12
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: ST_TO_ADDR
20114: GO 20189
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20116: LD_ADDR_VAR 0 3
20120: PUSH
20121: LD_INT 91
20123: PUSH
20124: LD_INT 52
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 68
20133: PUSH
20134: LD_INT 46
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 48
20143: PUSH
20144: LD_INT 43
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 33
20153: PUSH
20154: LD_INT 34
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 30
20163: PUSH
20164: LD_INT 19
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 38
20173: PUSH
20174: LD_INT 16
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20189: LD_VAR 0 1
20193: PPUSH
20194: CALL_OW 256
20198: PUSH
20199: LD_INT 1000
20201: EQUAL
20202: IFFALSE 20220
// AgressiveMove ( i , path ) else
20204: LD_VAR 0 1
20208: PPUSH
20209: LD_VAR 0 3
20213: PPUSH
20214: CALL 81067 0 2
20218: GO 20331
// if GetLives ( i ) < 650 then
20220: LD_VAR 0 1
20224: PPUSH
20225: CALL_OW 256
20229: PUSH
20230: LD_INT 650
20232: LESS
20233: IFFALSE 20331
// begin if not IsInArea ( i , russianRepairArea ) then
20235: LD_VAR 0 1
20239: PPUSH
20240: LD_INT 12
20242: PPUSH
20243: CALL_OW 308
20247: NOT
20248: IFFALSE 20317
// begin SetTag ( i , 0 ) ;
20250: LD_VAR 0 1
20254: PPUSH
20255: LD_INT 0
20257: PPUSH
20258: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 261
20271: PUSH
20272: LD_INT 50
20274: LESS
20275: PUSH
20276: LD_INT 21
20278: PPUSH
20279: CALL_OW 302
20283: AND
20284: IFFALSE 20300
// ComMoveUnit ( i , rufab ) else
20286: LD_VAR 0 1
20290: PPUSH
20291: LD_INT 21
20293: PPUSH
20294: CALL_OW 112
20298: GO 20315
// ComMoveXY ( i , 121 , 99 ) ;
20300: LD_VAR 0 1
20304: PPUSH
20305: LD_INT 121
20307: PPUSH
20308: LD_INT 99
20310: PPUSH
20311: CALL_OW 111
// end else
20315: GO 20331
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20317: LD_VAR 0 1
20321: PPUSH
20322: CALL_OW 311
20326: PPUSH
20327: CALL 80163 0 1
// end ; end ;
20331: GO 20021
20333: POP
20334: POP
// end ;
20335: PPOPN 4
20337: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20338: LD_INT 0
20340: PPUSH
20341: PPUSH
20342: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20343: LD_ADDR_VAR 0 2
20347: PUSH
20348: DOUBLE
20349: LD_INT 1
20351: DEC
20352: ST_TO_ADDR
20353: LD_INT 4
20355: PUSH
20356: LD_INT 5
20358: PUSH
20359: LD_INT 6
20361: PUSH
20362: LD_INT 6
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: PUSH
20371: LD_OWVAR 67
20375: ARRAY
20376: PUSH
20377: FOR_TO
20378: IFFALSE 20553
// begin uc_side := 3 ;
20380: LD_ADDR_OWVAR 20
20384: PUSH
20385: LD_INT 3
20387: ST_TO_ADDR
// uc_nation := 3 ;
20388: LD_ADDR_OWVAR 21
20392: PUSH
20393: LD_INT 3
20395: ST_TO_ADDR
// InitHC_All ( ) ;
20396: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20400: LD_INT 0
20402: PPUSH
20403: LD_INT 4
20405: PUSH
20406: LD_INT 5
20408: PUSH
20409: LD_INT 6
20411: PUSH
20412: LD_INT 6
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: PUSH
20421: LD_OWVAR 67
20425: ARRAY
20426: PPUSH
20427: CALL_OW 381
// un := CreateHuman ;
20431: LD_ADDR_VAR 0 3
20435: PUSH
20436: CALL_OW 44
20440: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20441: LD_VAR 0 3
20445: PPUSH
20446: LD_INT 127
20448: PPUSH
20449: LD_INT 62
20451: PPUSH
20452: LD_INT 3
20454: PPUSH
20455: LD_INT 0
20457: PPUSH
20458: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20462: LD_ADDR_EXP 49
20466: PUSH
20467: LD_EXP 49
20471: PPUSH
20472: LD_EXP 49
20476: PUSH
20477: LD_INT 1
20479: PLUS
20480: PPUSH
20481: LD_VAR 0 3
20485: PPUSH
20486: CALL_OW 1
20490: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20491: LD_VAR 0 3
20495: PPUSH
20496: LD_INT 83
20498: PPUSH
20499: LD_INT 49
20501: PPUSH
20502: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20506: LD_VAR 0 3
20510: PPUSH
20511: LD_INT 49
20513: PPUSH
20514: LD_INT 43
20516: PPUSH
20517: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20521: LD_VAR 0 3
20525: PPUSH
20526: LD_INT 31
20528: PPUSH
20529: LD_INT 15
20531: PPUSH
20532: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20536: LD_VAR 0 3
20540: PPUSH
20541: LD_INT 63
20543: PPUSH
20544: LD_INT 9
20546: PPUSH
20547: CALL_OW 174
// end ;
20551: GO 20377
20553: POP
20554: POP
// end ; end_of_file
20555: LD_VAR 0 1
20559: RET
// export function CreateNature ; var i , un ; begin
20560: LD_INT 0
20562: PPUSH
20563: PPUSH
20564: PPUSH
// for i := 1 to Difficulty + 2 do
20565: LD_ADDR_VAR 0 2
20569: PUSH
20570: DOUBLE
20571: LD_INT 1
20573: DEC
20574: ST_TO_ADDR
20575: LD_OWVAR 67
20579: PUSH
20580: LD_INT 2
20582: PLUS
20583: PUSH
20584: FOR_TO
20585: IFFALSE 20694
// begin hc_sex := sex_male ;
20587: LD_ADDR_OWVAR 27
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// uc_side := 0 ;
20595: LD_ADDR_OWVAR 20
20599: PUSH
20600: LD_INT 0
20602: ST_TO_ADDR
// uc_nation := nation_nature ;
20603: LD_ADDR_OWVAR 21
20607: PUSH
20608: LD_INT 0
20610: ST_TO_ADDR
// hc_class := class_tiger ;
20611: LD_ADDR_OWVAR 28
20615: PUSH
20616: LD_INT 14
20618: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20619: LD_ADDR_OWVAR 31
20623: PUSH
20624: LD_EXP 36
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
20644: LD_ADDR_OWVAR 35
20648: PUSH
20649: LD_INT 5
20651: NEG
20652: PPUSH
20653: LD_INT 5
20655: PPUSH
20656: CALL_OW 12
20660: PUSH
20661: LD_OWVAR 67
20665: MUL
20666: ST_TO_ADDR
// un := CreateHuman ;
20667: LD_ADDR_VAR 0 3
20671: PUSH
20672: CALL_OW 44
20676: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20677: LD_VAR 0 3
20681: PPUSH
20682: LD_INT 18
20684: PPUSH
20685: LD_INT 0
20687: PPUSH
20688: CALL_OW 49
// end ;
20692: GO 20584
20694: POP
20695: POP
// for i = 1 to rand ( 3 , 4 ) do
20696: LD_ADDR_VAR 0 2
20700: PUSH
20701: DOUBLE
20702: LD_INT 1
20704: DEC
20705: ST_TO_ADDR
20706: LD_INT 3
20708: PPUSH
20709: LD_INT 4
20711: PPUSH
20712: CALL_OW 12
20716: PUSH
20717: FOR_TO
20718: IFFALSE 20788
// begin hc_class := class_phororhacos ;
20720: LD_ADDR_OWVAR 28
20724: PUSH
20725: LD_INT 18
20727: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20728: LD_ADDR_OWVAR 31
20732: PUSH
20733: LD_EXP 36
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: ST_TO_ADDR
// hc_agressivity := 0 ;
20753: LD_ADDR_OWVAR 35
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// un = CreateHuman ;
20761: LD_ADDR_VAR 0 3
20765: PUSH
20766: CALL_OW 44
20770: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20771: LD_VAR 0 3
20775: PPUSH
20776: LD_INT 18
20778: PPUSH
20779: LD_INT 0
20781: PPUSH
20782: CALL_OW 49
// end ;
20786: GO 20717
20788: POP
20789: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
20790: LD_ADDR_VAR 0 2
20794: PUSH
20795: DOUBLE
20796: LD_INT 1
20798: DEC
20799: ST_TO_ADDR
20800: LD_INT 1
20802: PPUSH
20803: LD_INT 3
20805: PPUSH
20806: CALL_OW 12
20810: PUSH
20811: LD_OWVAR 67
20815: PLUS
20816: PUSH
20817: FOR_TO
20818: IFFALSE 20955
// begin hc_class := class_apeman ;
20820: LD_ADDR_OWVAR 28
20824: PUSH
20825: LD_INT 12
20827: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20828: LD_ADDR_OWVAR 31
20832: PUSH
20833: LD_INT 2
20835: PPUSH
20836: LD_INT 5
20838: PPUSH
20839: CALL_OW 12
20843: PUSH
20844: LD_INT 0
20846: PPUSH
20847: LD_INT 2
20849: PPUSH
20850: CALL_OW 12
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: ST_TO_ADDR
// hc_agressivity := [ rand ( 0 , 10 ) , rand ( 10 , 20 ) , rand ( 20 , 25 ) , rand ( 20 , 30 ) ] [ Difficulty ] ;
20867: LD_ADDR_OWVAR 35
20871: PUSH
20872: LD_INT 0
20874: PPUSH
20875: LD_INT 10
20877: PPUSH
20878: CALL_OW 12
20882: PUSH
20883: LD_INT 10
20885: PPUSH
20886: LD_INT 20
20888: PPUSH
20889: CALL_OW 12
20893: PUSH
20894: LD_INT 20
20896: PPUSH
20897: LD_INT 25
20899: PPUSH
20900: CALL_OW 12
20904: PUSH
20905: LD_INT 20
20907: PPUSH
20908: LD_INT 30
20910: PPUSH
20911: CALL_OW 12
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: LD_OWVAR 67
20926: ARRAY
20927: ST_TO_ADDR
// un := CreateHuman ;
20928: LD_ADDR_VAR 0 3
20932: PUSH
20933: CALL_OW 44
20937: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
20938: LD_VAR 0 3
20942: PPUSH
20943: LD_INT 19
20945: PPUSH
20946: LD_INT 0
20948: PPUSH
20949: CALL_OW 49
// end ;
20953: GO 20817
20955: POP
20956: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
20957: LD_ADDR_VAR 0 2
20961: PUSH
20962: DOUBLE
20963: LD_INT 1
20965: DEC
20966: ST_TO_ADDR
20967: LD_INT 5
20969: PPUSH
20970: LD_INT 6
20972: PPUSH
20973: CALL_OW 12
20977: PUSH
20978: LD_OWVAR 67
20982: PLUS
20983: PUSH
20984: FOR_TO
20985: IFFALSE 21069
// begin hc_class := class_apeman ;
20987: LD_ADDR_OWVAR 28
20991: PUSH
20992: LD_INT 12
20994: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20995: LD_ADDR_OWVAR 31
20999: PUSH
21000: LD_INT 2
21002: PPUSH
21003: LD_INT 5
21005: PPUSH
21006: CALL_OW 12
21010: PUSH
21011: LD_INT 0
21013: PPUSH
21014: LD_INT 2
21016: PPUSH
21017: CALL_OW 12
21021: PUSH
21022: LD_INT 0
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: ST_TO_ADDR
// hc_agressivity := 0 ;
21034: LD_ADDR_OWVAR 35
21038: PUSH
21039: LD_INT 0
21041: ST_TO_ADDR
// un = CreateHuman ;
21042: LD_ADDR_VAR 0 3
21046: PUSH
21047: CALL_OW 44
21051: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21052: LD_VAR 0 3
21056: PPUSH
21057: LD_INT 20
21059: PPUSH
21060: LD_INT 0
21062: PPUSH
21063: CALL_OW 49
// end ;
21067: GO 20984
21069: POP
21070: POP
// end ; end_of_file end_of_file
21071: LD_VAR 0 1
21075: RET
// every 0 0$1 do
21076: GO 21078
21078: DISABLE
// begin enable ;
21079: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21080: LD_STRING updateTimer(
21082: PUSH
21083: LD_OWVAR 1
21087: STR
21088: PUSH
21089: LD_STRING );
21091: STR
21092: PPUSH
21093: CALL_OW 559
// end ;
21097: END
// export function SOS_MapStart ( ) ; begin
21098: LD_INT 0
21100: PPUSH
// if streamModeActive then
21101: LD_EXP 50
21105: IFFALSE 21114
// DefineStreamItems ( true ) ;
21107: LD_INT 1
21109: PPUSH
21110: CALL 22768 0 1
// UpdateFactoryWaypoints ( ) ;
21114: CALL 35629 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21118: CALL 35886 0 0
// end ;
21122: LD_VAR 0 1
21126: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21127: LD_INT 0
21129: PPUSH
// if p2 = hack_mode then
21130: LD_VAR 0 2
21134: PUSH
21135: LD_INT 100
21137: EQUAL
21138: IFFALSE 22141
// begin if not StreamModeActive then
21140: LD_EXP 50
21144: NOT
21145: IFFALSE 21155
// StreamModeActive := true ;
21147: LD_ADDR_EXP 50
21151: PUSH
21152: LD_INT 1
21154: ST_TO_ADDR
// if p3 = 0 then
21155: LD_VAR 0 3
21159: PUSH
21160: LD_INT 0
21162: EQUAL
21163: IFFALSE 21169
// InitStreamMode ;
21165: CALL 22304 0 0
// if p3 = 1 then
21169: LD_VAR 0 3
21173: PUSH
21174: LD_INT 1
21176: EQUAL
21177: IFFALSE 21187
// sRocket := true ;
21179: LD_ADDR_EXP 55
21183: PUSH
21184: LD_INT 1
21186: ST_TO_ADDR
// if p3 = 2 then
21187: LD_VAR 0 3
21191: PUSH
21192: LD_INT 2
21194: EQUAL
21195: IFFALSE 21205
// sSpeed := true ;
21197: LD_ADDR_EXP 54
21201: PUSH
21202: LD_INT 1
21204: ST_TO_ADDR
// if p3 = 3 then
21205: LD_VAR 0 3
21209: PUSH
21210: LD_INT 3
21212: EQUAL
21213: IFFALSE 21223
// sEngine := true ;
21215: LD_ADDR_EXP 56
21219: PUSH
21220: LD_INT 1
21222: ST_TO_ADDR
// if p3 = 4 then
21223: LD_VAR 0 3
21227: PUSH
21228: LD_INT 4
21230: EQUAL
21231: IFFALSE 21241
// sSpec := true ;
21233: LD_ADDR_EXP 53
21237: PUSH
21238: LD_INT 1
21240: ST_TO_ADDR
// if p3 = 5 then
21241: LD_VAR 0 3
21245: PUSH
21246: LD_INT 5
21248: EQUAL
21249: IFFALSE 21259
// sLevel := true ;
21251: LD_ADDR_EXP 57
21255: PUSH
21256: LD_INT 1
21258: ST_TO_ADDR
// if p3 = 6 then
21259: LD_VAR 0 3
21263: PUSH
21264: LD_INT 6
21266: EQUAL
21267: IFFALSE 21277
// sArmoury := true ;
21269: LD_ADDR_EXP 58
21273: PUSH
21274: LD_INT 1
21276: ST_TO_ADDR
// if p3 = 7 then
21277: LD_VAR 0 3
21281: PUSH
21282: LD_INT 7
21284: EQUAL
21285: IFFALSE 21295
// sRadar := true ;
21287: LD_ADDR_EXP 59
21291: PUSH
21292: LD_INT 1
21294: ST_TO_ADDR
// if p3 = 8 then
21295: LD_VAR 0 3
21299: PUSH
21300: LD_INT 8
21302: EQUAL
21303: IFFALSE 21313
// sBunker := true ;
21305: LD_ADDR_EXP 60
21309: PUSH
21310: LD_INT 1
21312: ST_TO_ADDR
// if p3 = 9 then
21313: LD_VAR 0 3
21317: PUSH
21318: LD_INT 9
21320: EQUAL
21321: IFFALSE 21331
// sHack := true ;
21323: LD_ADDR_EXP 61
21327: PUSH
21328: LD_INT 1
21330: ST_TO_ADDR
// if p3 = 10 then
21331: LD_VAR 0 3
21335: PUSH
21336: LD_INT 10
21338: EQUAL
21339: IFFALSE 21349
// sFire := true ;
21341: LD_ADDR_EXP 62
21345: PUSH
21346: LD_INT 1
21348: ST_TO_ADDR
// if p3 = 11 then
21349: LD_VAR 0 3
21353: PUSH
21354: LD_INT 11
21356: EQUAL
21357: IFFALSE 21367
// sRefresh := true ;
21359: LD_ADDR_EXP 63
21363: PUSH
21364: LD_INT 1
21366: ST_TO_ADDR
// if p3 = 12 then
21367: LD_VAR 0 3
21371: PUSH
21372: LD_INT 12
21374: EQUAL
21375: IFFALSE 21385
// sExp := true ;
21377: LD_ADDR_EXP 64
21381: PUSH
21382: LD_INT 1
21384: ST_TO_ADDR
// if p3 = 13 then
21385: LD_VAR 0 3
21389: PUSH
21390: LD_INT 13
21392: EQUAL
21393: IFFALSE 21403
// sDepot := true ;
21395: LD_ADDR_EXP 65
21399: PUSH
21400: LD_INT 1
21402: ST_TO_ADDR
// if p3 = 14 then
21403: LD_VAR 0 3
21407: PUSH
21408: LD_INT 14
21410: EQUAL
21411: IFFALSE 21421
// sFlag := true ;
21413: LD_ADDR_EXP 66
21417: PUSH
21418: LD_INT 1
21420: ST_TO_ADDR
// if p3 = 15 then
21421: LD_VAR 0 3
21425: PUSH
21426: LD_INT 15
21428: EQUAL
21429: IFFALSE 21439
// sKamikadze := true ;
21431: LD_ADDR_EXP 74
21435: PUSH
21436: LD_INT 1
21438: ST_TO_ADDR
// if p3 = 16 then
21439: LD_VAR 0 3
21443: PUSH
21444: LD_INT 16
21446: EQUAL
21447: IFFALSE 21457
// sTroll := true ;
21449: LD_ADDR_EXP 75
21453: PUSH
21454: LD_INT 1
21456: ST_TO_ADDR
// if p3 = 17 then
21457: LD_VAR 0 3
21461: PUSH
21462: LD_INT 17
21464: EQUAL
21465: IFFALSE 21475
// sSlow := true ;
21467: LD_ADDR_EXP 76
21471: PUSH
21472: LD_INT 1
21474: ST_TO_ADDR
// if p3 = 18 then
21475: LD_VAR 0 3
21479: PUSH
21480: LD_INT 18
21482: EQUAL
21483: IFFALSE 21493
// sLack := true ;
21485: LD_ADDR_EXP 77
21489: PUSH
21490: LD_INT 1
21492: ST_TO_ADDR
// if p3 = 19 then
21493: LD_VAR 0 3
21497: PUSH
21498: LD_INT 19
21500: EQUAL
21501: IFFALSE 21511
// sTank := true ;
21503: LD_ADDR_EXP 79
21507: PUSH
21508: LD_INT 1
21510: ST_TO_ADDR
// if p3 = 20 then
21511: LD_VAR 0 3
21515: PUSH
21516: LD_INT 20
21518: EQUAL
21519: IFFALSE 21529
// sRemote := true ;
21521: LD_ADDR_EXP 80
21525: PUSH
21526: LD_INT 1
21528: ST_TO_ADDR
// if p3 = 21 then
21529: LD_VAR 0 3
21533: PUSH
21534: LD_INT 21
21536: EQUAL
21537: IFFALSE 21547
// sPowell := true ;
21539: LD_ADDR_EXP 81
21543: PUSH
21544: LD_INT 1
21546: ST_TO_ADDR
// if p3 = 22 then
21547: LD_VAR 0 3
21551: PUSH
21552: LD_INT 22
21554: EQUAL
21555: IFFALSE 21565
// sTeleport := true ;
21557: LD_ADDR_EXP 84
21561: PUSH
21562: LD_INT 1
21564: ST_TO_ADDR
// if p3 = 23 then
21565: LD_VAR 0 3
21569: PUSH
21570: LD_INT 23
21572: EQUAL
21573: IFFALSE 21583
// sOilTower := true ;
21575: LD_ADDR_EXP 86
21579: PUSH
21580: LD_INT 1
21582: ST_TO_ADDR
// if p3 = 24 then
21583: LD_VAR 0 3
21587: PUSH
21588: LD_INT 24
21590: EQUAL
21591: IFFALSE 21601
// sShovel := true ;
21593: LD_ADDR_EXP 87
21597: PUSH
21598: LD_INT 1
21600: ST_TO_ADDR
// if p3 = 25 then
21601: LD_VAR 0 3
21605: PUSH
21606: LD_INT 25
21608: EQUAL
21609: IFFALSE 21619
// sSheik := true ;
21611: LD_ADDR_EXP 88
21615: PUSH
21616: LD_INT 1
21618: ST_TO_ADDR
// if p3 = 26 then
21619: LD_VAR 0 3
21623: PUSH
21624: LD_INT 26
21626: EQUAL
21627: IFFALSE 21637
// sEarthquake := true ;
21629: LD_ADDR_EXP 90
21633: PUSH
21634: LD_INT 1
21636: ST_TO_ADDR
// if p3 = 27 then
21637: LD_VAR 0 3
21641: PUSH
21642: LD_INT 27
21644: EQUAL
21645: IFFALSE 21655
// sAI := true ;
21647: LD_ADDR_EXP 91
21651: PUSH
21652: LD_INT 1
21654: ST_TO_ADDR
// if p3 = 28 then
21655: LD_VAR 0 3
21659: PUSH
21660: LD_INT 28
21662: EQUAL
21663: IFFALSE 21673
// sCargo := true ;
21665: LD_ADDR_EXP 94
21669: PUSH
21670: LD_INT 1
21672: ST_TO_ADDR
// if p3 = 29 then
21673: LD_VAR 0 3
21677: PUSH
21678: LD_INT 29
21680: EQUAL
21681: IFFALSE 21691
// sDLaser := true ;
21683: LD_ADDR_EXP 95
21687: PUSH
21688: LD_INT 1
21690: ST_TO_ADDR
// if p3 = 30 then
21691: LD_VAR 0 3
21695: PUSH
21696: LD_INT 30
21698: EQUAL
21699: IFFALSE 21709
// sExchange := true ;
21701: LD_ADDR_EXP 96
21705: PUSH
21706: LD_INT 1
21708: ST_TO_ADDR
// if p3 = 31 then
21709: LD_VAR 0 3
21713: PUSH
21714: LD_INT 31
21716: EQUAL
21717: IFFALSE 21727
// sFac := true ;
21719: LD_ADDR_EXP 97
21723: PUSH
21724: LD_INT 1
21726: ST_TO_ADDR
// if p3 = 32 then
21727: LD_VAR 0 3
21731: PUSH
21732: LD_INT 32
21734: EQUAL
21735: IFFALSE 21745
// sPower := true ;
21737: LD_ADDR_EXP 98
21741: PUSH
21742: LD_INT 1
21744: ST_TO_ADDR
// if p3 = 33 then
21745: LD_VAR 0 3
21749: PUSH
21750: LD_INT 33
21752: EQUAL
21753: IFFALSE 21763
// sRandom := true ;
21755: LD_ADDR_EXP 99
21759: PUSH
21760: LD_INT 1
21762: ST_TO_ADDR
// if p3 = 34 then
21763: LD_VAR 0 3
21767: PUSH
21768: LD_INT 34
21770: EQUAL
21771: IFFALSE 21781
// sShield := true ;
21773: LD_ADDR_EXP 100
21777: PUSH
21778: LD_INT 1
21780: ST_TO_ADDR
// if p3 = 35 then
21781: LD_VAR 0 3
21785: PUSH
21786: LD_INT 35
21788: EQUAL
21789: IFFALSE 21799
// sTime := true ;
21791: LD_ADDR_EXP 101
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// if p3 = 36 then
21799: LD_VAR 0 3
21803: PUSH
21804: LD_INT 36
21806: EQUAL
21807: IFFALSE 21817
// sTools := true ;
21809: LD_ADDR_EXP 102
21813: PUSH
21814: LD_INT 1
21816: ST_TO_ADDR
// if p3 = 101 then
21817: LD_VAR 0 3
21821: PUSH
21822: LD_INT 101
21824: EQUAL
21825: IFFALSE 21835
// sSold := true ;
21827: LD_ADDR_EXP 67
21831: PUSH
21832: LD_INT 1
21834: ST_TO_ADDR
// if p3 = 102 then
21835: LD_VAR 0 3
21839: PUSH
21840: LD_INT 102
21842: EQUAL
21843: IFFALSE 21853
// sDiff := true ;
21845: LD_ADDR_EXP 68
21849: PUSH
21850: LD_INT 1
21852: ST_TO_ADDR
// if p3 = 103 then
21853: LD_VAR 0 3
21857: PUSH
21858: LD_INT 103
21860: EQUAL
21861: IFFALSE 21871
// sFog := true ;
21863: LD_ADDR_EXP 71
21867: PUSH
21868: LD_INT 1
21870: ST_TO_ADDR
// if p3 = 104 then
21871: LD_VAR 0 3
21875: PUSH
21876: LD_INT 104
21878: EQUAL
21879: IFFALSE 21889
// sReset := true ;
21881: LD_ADDR_EXP 72
21885: PUSH
21886: LD_INT 1
21888: ST_TO_ADDR
// if p3 = 105 then
21889: LD_VAR 0 3
21893: PUSH
21894: LD_INT 105
21896: EQUAL
21897: IFFALSE 21907
// sSun := true ;
21899: LD_ADDR_EXP 73
21903: PUSH
21904: LD_INT 1
21906: ST_TO_ADDR
// if p3 = 106 then
21907: LD_VAR 0 3
21911: PUSH
21912: LD_INT 106
21914: EQUAL
21915: IFFALSE 21925
// sTiger := true ;
21917: LD_ADDR_EXP 69
21921: PUSH
21922: LD_INT 1
21924: ST_TO_ADDR
// if p3 = 107 then
21925: LD_VAR 0 3
21929: PUSH
21930: LD_INT 107
21932: EQUAL
21933: IFFALSE 21943
// sBomb := true ;
21935: LD_ADDR_EXP 70
21939: PUSH
21940: LD_INT 1
21942: ST_TO_ADDR
// if p3 = 108 then
21943: LD_VAR 0 3
21947: PUSH
21948: LD_INT 108
21950: EQUAL
21951: IFFALSE 21961
// sWound := true ;
21953: LD_ADDR_EXP 78
21957: PUSH
21958: LD_INT 1
21960: ST_TO_ADDR
// if p3 = 109 then
21961: LD_VAR 0 3
21965: PUSH
21966: LD_INT 109
21968: EQUAL
21969: IFFALSE 21979
// sBetray := true ;
21971: LD_ADDR_EXP 82
21975: PUSH
21976: LD_INT 1
21978: ST_TO_ADDR
// if p3 = 110 then
21979: LD_VAR 0 3
21983: PUSH
21984: LD_INT 110
21986: EQUAL
21987: IFFALSE 21997
// sContamin := true ;
21989: LD_ADDR_EXP 83
21993: PUSH
21994: LD_INT 1
21996: ST_TO_ADDR
// if p3 = 111 then
21997: LD_VAR 0 3
22001: PUSH
22002: LD_INT 111
22004: EQUAL
22005: IFFALSE 22015
// sOil := true ;
22007: LD_ADDR_EXP 85
22011: PUSH
22012: LD_INT 1
22014: ST_TO_ADDR
// if p3 = 112 then
22015: LD_VAR 0 3
22019: PUSH
22020: LD_INT 112
22022: EQUAL
22023: IFFALSE 22033
// sStu := true ;
22025: LD_ADDR_EXP 89
22029: PUSH
22030: LD_INT 1
22032: ST_TO_ADDR
// if p3 = 113 then
22033: LD_VAR 0 3
22037: PUSH
22038: LD_INT 113
22040: EQUAL
22041: IFFALSE 22051
// sBazooka := true ;
22043: LD_ADDR_EXP 92
22047: PUSH
22048: LD_INT 1
22050: ST_TO_ADDR
// if p3 = 114 then
22051: LD_VAR 0 3
22055: PUSH
22056: LD_INT 114
22058: EQUAL
22059: IFFALSE 22069
// sMortar := true ;
22061: LD_ADDR_EXP 93
22065: PUSH
22066: LD_INT 1
22068: ST_TO_ADDR
// if p3 = 115 then
22069: LD_VAR 0 3
22073: PUSH
22074: LD_INT 115
22076: EQUAL
22077: IFFALSE 22087
// sRanger := true ;
22079: LD_ADDR_EXP 103
22083: PUSH
22084: LD_INT 1
22086: ST_TO_ADDR
// if p3 = 116 then
22087: LD_VAR 0 3
22091: PUSH
22092: LD_INT 116
22094: EQUAL
22095: IFFALSE 22105
// sComputer := true ;
22097: LD_ADDR_EXP 104
22101: PUSH
22102: LD_INT 1
22104: ST_TO_ADDR
// if p3 = 117 then
22105: LD_VAR 0 3
22109: PUSH
22110: LD_INT 117
22112: EQUAL
22113: IFFALSE 22123
// s30 := true ;
22115: LD_ADDR_EXP 105
22119: PUSH
22120: LD_INT 1
22122: ST_TO_ADDR
// if p3 = 118 then
22123: LD_VAR 0 3
22127: PUSH
22128: LD_INT 118
22130: EQUAL
22131: IFFALSE 22141
// s60 := true ;
22133: LD_ADDR_EXP 106
22137: PUSH
22138: LD_INT 1
22140: ST_TO_ADDR
// end ; if p2 = stream_mode then
22141: LD_VAR 0 2
22145: PUSH
22146: LD_INT 101
22148: EQUAL
22149: IFFALSE 22277
// begin case p3 of 1 :
22151: LD_VAR 0 3
22155: PUSH
22156: LD_INT 1
22158: DOUBLE
22159: EQUAL
22160: IFTRUE 22164
22162: GO 22171
22164: POP
// hHackUnlimitedResources ; 2 :
22165: CALL 34375 0 0
22169: GO 22277
22171: LD_INT 2
22173: DOUBLE
22174: EQUAL
22175: IFTRUE 22179
22177: GO 22186
22179: POP
// hHackSetLevel10 ; 3 :
22180: CALL 34508 0 0
22184: GO 22277
22186: LD_INT 3
22188: DOUBLE
22189: EQUAL
22190: IFTRUE 22194
22192: GO 22201
22194: POP
// hHackSetLevel10YourUnits ; 4 :
22195: CALL 34593 0 0
22199: GO 22277
22201: LD_INT 4
22203: DOUBLE
22204: EQUAL
22205: IFTRUE 22209
22207: GO 22216
22209: POP
// hHackInvincible ; 5 :
22210: CALL 35041 0 0
22214: GO 22277
22216: LD_INT 5
22218: DOUBLE
22219: EQUAL
22220: IFTRUE 22224
22222: GO 22231
22224: POP
// hHackInvisible ; 6 :
22225: CALL 35152 0 0
22229: GO 22277
22231: LD_INT 6
22233: DOUBLE
22234: EQUAL
22235: IFTRUE 22239
22237: GO 22246
22239: POP
// hHackChangeYourSide ; 7 :
22240: CALL 35209 0 0
22244: GO 22277
22246: LD_INT 7
22248: DOUBLE
22249: EQUAL
22250: IFTRUE 22254
22252: GO 22261
22254: POP
// hHackChangeUnitSide ; 8 :
22255: CALL 35251 0 0
22259: GO 22277
22261: LD_INT 8
22263: DOUBLE
22264: EQUAL
22265: IFTRUE 22269
22267: GO 22276
22269: POP
// hHackFog ; end ;
22270: CALL 35352 0 0
22274: GO 22277
22276: POP
// end ; end ;
22277: LD_VAR 0 7
22281: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
22282: GO 22284
22284: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
22285: LD_STRING initStreamRollete();
22287: PPUSH
22288: CALL_OW 559
// InitStreamMode ;
22292: CALL 22304 0 0
// DefineStreamItems ( false ) ;
22296: LD_INT 0
22298: PPUSH
22299: CALL 22768 0 1
// end ;
22303: END
// function InitStreamMode ; begin
22304: LD_INT 0
22306: PPUSH
// streamModeActive := false ;
22307: LD_ADDR_EXP 50
22311: PUSH
22312: LD_INT 0
22314: ST_TO_ADDR
// normalCounter := 36 ;
22315: LD_ADDR_EXP 51
22319: PUSH
22320: LD_INT 36
22322: ST_TO_ADDR
// hardcoreCounter := 18 ;
22323: LD_ADDR_EXP 52
22327: PUSH
22328: LD_INT 18
22330: ST_TO_ADDR
// sRocket := false ;
22331: LD_ADDR_EXP 55
22335: PUSH
22336: LD_INT 0
22338: ST_TO_ADDR
// sSpeed := false ;
22339: LD_ADDR_EXP 54
22343: PUSH
22344: LD_INT 0
22346: ST_TO_ADDR
// sEngine := false ;
22347: LD_ADDR_EXP 56
22351: PUSH
22352: LD_INT 0
22354: ST_TO_ADDR
// sSpec := false ;
22355: LD_ADDR_EXP 53
22359: PUSH
22360: LD_INT 0
22362: ST_TO_ADDR
// sLevel := false ;
22363: LD_ADDR_EXP 57
22367: PUSH
22368: LD_INT 0
22370: ST_TO_ADDR
// sArmoury := false ;
22371: LD_ADDR_EXP 58
22375: PUSH
22376: LD_INT 0
22378: ST_TO_ADDR
// sRadar := false ;
22379: LD_ADDR_EXP 59
22383: PUSH
22384: LD_INT 0
22386: ST_TO_ADDR
// sBunker := false ;
22387: LD_ADDR_EXP 60
22391: PUSH
22392: LD_INT 0
22394: ST_TO_ADDR
// sHack := false ;
22395: LD_ADDR_EXP 61
22399: PUSH
22400: LD_INT 0
22402: ST_TO_ADDR
// sFire := false ;
22403: LD_ADDR_EXP 62
22407: PUSH
22408: LD_INT 0
22410: ST_TO_ADDR
// sRefresh := false ;
22411: LD_ADDR_EXP 63
22415: PUSH
22416: LD_INT 0
22418: ST_TO_ADDR
// sExp := false ;
22419: LD_ADDR_EXP 64
22423: PUSH
22424: LD_INT 0
22426: ST_TO_ADDR
// sDepot := false ;
22427: LD_ADDR_EXP 65
22431: PUSH
22432: LD_INT 0
22434: ST_TO_ADDR
// sFlag := false ;
22435: LD_ADDR_EXP 66
22439: PUSH
22440: LD_INT 0
22442: ST_TO_ADDR
// sKamikadze := false ;
22443: LD_ADDR_EXP 74
22447: PUSH
22448: LD_INT 0
22450: ST_TO_ADDR
// sTroll := false ;
22451: LD_ADDR_EXP 75
22455: PUSH
22456: LD_INT 0
22458: ST_TO_ADDR
// sSlow := false ;
22459: LD_ADDR_EXP 76
22463: PUSH
22464: LD_INT 0
22466: ST_TO_ADDR
// sLack := false ;
22467: LD_ADDR_EXP 77
22471: PUSH
22472: LD_INT 0
22474: ST_TO_ADDR
// sTank := false ;
22475: LD_ADDR_EXP 79
22479: PUSH
22480: LD_INT 0
22482: ST_TO_ADDR
// sRemote := false ;
22483: LD_ADDR_EXP 80
22487: PUSH
22488: LD_INT 0
22490: ST_TO_ADDR
// sPowell := false ;
22491: LD_ADDR_EXP 81
22495: PUSH
22496: LD_INT 0
22498: ST_TO_ADDR
// sTeleport := false ;
22499: LD_ADDR_EXP 84
22503: PUSH
22504: LD_INT 0
22506: ST_TO_ADDR
// sOilTower := false ;
22507: LD_ADDR_EXP 86
22511: PUSH
22512: LD_INT 0
22514: ST_TO_ADDR
// sShovel := false ;
22515: LD_ADDR_EXP 87
22519: PUSH
22520: LD_INT 0
22522: ST_TO_ADDR
// sSheik := false ;
22523: LD_ADDR_EXP 88
22527: PUSH
22528: LD_INT 0
22530: ST_TO_ADDR
// sEarthquake := false ;
22531: LD_ADDR_EXP 90
22535: PUSH
22536: LD_INT 0
22538: ST_TO_ADDR
// sAI := false ;
22539: LD_ADDR_EXP 91
22543: PUSH
22544: LD_INT 0
22546: ST_TO_ADDR
// sCargo := false ;
22547: LD_ADDR_EXP 94
22551: PUSH
22552: LD_INT 0
22554: ST_TO_ADDR
// sDLaser := false ;
22555: LD_ADDR_EXP 95
22559: PUSH
22560: LD_INT 0
22562: ST_TO_ADDR
// sExchange := false ;
22563: LD_ADDR_EXP 96
22567: PUSH
22568: LD_INT 0
22570: ST_TO_ADDR
// sFac := false ;
22571: LD_ADDR_EXP 97
22575: PUSH
22576: LD_INT 0
22578: ST_TO_ADDR
// sPower := false ;
22579: LD_ADDR_EXP 98
22583: PUSH
22584: LD_INT 0
22586: ST_TO_ADDR
// sRandom := false ;
22587: LD_ADDR_EXP 99
22591: PUSH
22592: LD_INT 0
22594: ST_TO_ADDR
// sShield := false ;
22595: LD_ADDR_EXP 100
22599: PUSH
22600: LD_INT 0
22602: ST_TO_ADDR
// sTime := false ;
22603: LD_ADDR_EXP 101
22607: PUSH
22608: LD_INT 0
22610: ST_TO_ADDR
// sTools := false ;
22611: LD_ADDR_EXP 102
22615: PUSH
22616: LD_INT 0
22618: ST_TO_ADDR
// sSold := false ;
22619: LD_ADDR_EXP 67
22623: PUSH
22624: LD_INT 0
22626: ST_TO_ADDR
// sDiff := false ;
22627: LD_ADDR_EXP 68
22631: PUSH
22632: LD_INT 0
22634: ST_TO_ADDR
// sFog := false ;
22635: LD_ADDR_EXP 71
22639: PUSH
22640: LD_INT 0
22642: ST_TO_ADDR
// sReset := false ;
22643: LD_ADDR_EXP 72
22647: PUSH
22648: LD_INT 0
22650: ST_TO_ADDR
// sSun := false ;
22651: LD_ADDR_EXP 73
22655: PUSH
22656: LD_INT 0
22658: ST_TO_ADDR
// sTiger := false ;
22659: LD_ADDR_EXP 69
22663: PUSH
22664: LD_INT 0
22666: ST_TO_ADDR
// sBomb := false ;
22667: LD_ADDR_EXP 70
22671: PUSH
22672: LD_INT 0
22674: ST_TO_ADDR
// sWound := false ;
22675: LD_ADDR_EXP 78
22679: PUSH
22680: LD_INT 0
22682: ST_TO_ADDR
// sBetray := false ;
22683: LD_ADDR_EXP 82
22687: PUSH
22688: LD_INT 0
22690: ST_TO_ADDR
// sContamin := false ;
22691: LD_ADDR_EXP 83
22695: PUSH
22696: LD_INT 0
22698: ST_TO_ADDR
// sOil := false ;
22699: LD_ADDR_EXP 85
22703: PUSH
22704: LD_INT 0
22706: ST_TO_ADDR
// sStu := false ;
22707: LD_ADDR_EXP 89
22711: PUSH
22712: LD_INT 0
22714: ST_TO_ADDR
// sBazooka := false ;
22715: LD_ADDR_EXP 92
22719: PUSH
22720: LD_INT 0
22722: ST_TO_ADDR
// sMortar := false ;
22723: LD_ADDR_EXP 93
22727: PUSH
22728: LD_INT 0
22730: ST_TO_ADDR
// sRanger := false ;
22731: LD_ADDR_EXP 103
22735: PUSH
22736: LD_INT 0
22738: ST_TO_ADDR
// sComputer := false ;
22739: LD_ADDR_EXP 104
22743: PUSH
22744: LD_INT 0
22746: ST_TO_ADDR
// s30 := false ;
22747: LD_ADDR_EXP 105
22751: PUSH
22752: LD_INT 0
22754: ST_TO_ADDR
// s60 := false ;
22755: LD_ADDR_EXP 106
22759: PUSH
22760: LD_INT 0
22762: ST_TO_ADDR
// end ;
22763: LD_VAR 0 1
22767: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22768: LD_INT 0
22770: PPUSH
22771: PPUSH
22772: PPUSH
22773: PPUSH
22774: PPUSH
22775: PPUSH
22776: PPUSH
// result := [ ] ;
22777: LD_ADDR_VAR 0 2
22781: PUSH
22782: EMPTY
22783: ST_TO_ADDR
// if campaign_id = 1 then
22784: LD_OWVAR 69
22788: PUSH
22789: LD_INT 1
22791: EQUAL
22792: IFFALSE 25958
// begin case mission_number of 1 :
22794: LD_OWVAR 70
22798: PUSH
22799: LD_INT 1
22801: DOUBLE
22802: EQUAL
22803: IFTRUE 22807
22805: GO 22883
22807: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22808: LD_ADDR_VAR 0 2
22812: PUSH
22813: LD_INT 2
22815: PUSH
22816: LD_INT 4
22818: PUSH
22819: LD_INT 11
22821: PUSH
22822: LD_INT 12
22824: PUSH
22825: LD_INT 15
22827: PUSH
22828: LD_INT 16
22830: PUSH
22831: LD_INT 22
22833: PUSH
22834: LD_INT 23
22836: PUSH
22837: LD_INT 26
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 101
22853: PUSH
22854: LD_INT 102
22856: PUSH
22857: LD_INT 106
22859: PUSH
22860: LD_INT 116
22862: PUSH
22863: LD_INT 117
22865: PUSH
22866: LD_INT 118
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: ST_TO_ADDR
22881: GO 25956
22883: LD_INT 2
22885: DOUBLE
22886: EQUAL
22887: IFTRUE 22891
22889: GO 22975
22891: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22892: LD_ADDR_VAR 0 2
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: LD_INT 4
22902: PUSH
22903: LD_INT 11
22905: PUSH
22906: LD_INT 12
22908: PUSH
22909: LD_INT 15
22911: PUSH
22912: LD_INT 16
22914: PUSH
22915: LD_INT 22
22917: PUSH
22918: LD_INT 23
22920: PUSH
22921: LD_INT 26
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 101
22937: PUSH
22938: LD_INT 102
22940: PUSH
22941: LD_INT 105
22943: PUSH
22944: LD_INT 106
22946: PUSH
22947: LD_INT 108
22949: PUSH
22950: LD_INT 116
22952: PUSH
22953: LD_INT 117
22955: PUSH
22956: LD_INT 118
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: ST_TO_ADDR
22973: GO 25956
22975: LD_INT 3
22977: DOUBLE
22978: EQUAL
22979: IFTRUE 22983
22981: GO 23071
22983: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22984: LD_ADDR_VAR 0 2
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: LD_INT 4
22994: PUSH
22995: LD_INT 5
22997: PUSH
22998: LD_INT 11
23000: PUSH
23001: LD_INT 12
23003: PUSH
23004: LD_INT 15
23006: PUSH
23007: LD_INT 16
23009: PUSH
23010: LD_INT 22
23012: PUSH
23013: LD_INT 26
23015: PUSH
23016: LD_INT 36
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 101
23033: PUSH
23034: LD_INT 102
23036: PUSH
23037: LD_INT 105
23039: PUSH
23040: LD_INT 106
23042: PUSH
23043: LD_INT 108
23045: PUSH
23046: LD_INT 116
23048: PUSH
23049: LD_INT 117
23051: PUSH
23052: LD_INT 118
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: ST_TO_ADDR
23069: GO 25956
23071: LD_INT 4
23073: DOUBLE
23074: EQUAL
23075: IFTRUE 23079
23077: GO 23175
23079: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23080: LD_ADDR_VAR 0 2
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: LD_INT 4
23090: PUSH
23091: LD_INT 5
23093: PUSH
23094: LD_INT 8
23096: PUSH
23097: LD_INT 11
23099: PUSH
23100: LD_INT 12
23102: PUSH
23103: LD_INT 15
23105: PUSH
23106: LD_INT 16
23108: PUSH
23109: LD_INT 22
23111: PUSH
23112: LD_INT 23
23114: PUSH
23115: LD_INT 26
23117: PUSH
23118: LD_INT 36
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 101
23137: PUSH
23138: LD_INT 102
23140: PUSH
23141: LD_INT 105
23143: PUSH
23144: LD_INT 106
23146: PUSH
23147: LD_INT 108
23149: PUSH
23150: LD_INT 116
23152: PUSH
23153: LD_INT 117
23155: PUSH
23156: LD_INT 118
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: ST_TO_ADDR
23173: GO 25956
23175: LD_INT 5
23177: DOUBLE
23178: EQUAL
23179: IFTRUE 23183
23181: GO 23295
23183: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23184: LD_ADDR_VAR 0 2
23188: PUSH
23189: LD_INT 2
23191: PUSH
23192: LD_INT 4
23194: PUSH
23195: LD_INT 5
23197: PUSH
23198: LD_INT 6
23200: PUSH
23201: LD_INT 8
23203: PUSH
23204: LD_INT 11
23206: PUSH
23207: LD_INT 12
23209: PUSH
23210: LD_INT 15
23212: PUSH
23213: LD_INT 16
23215: PUSH
23216: LD_INT 22
23218: PUSH
23219: LD_INT 23
23221: PUSH
23222: LD_INT 25
23224: PUSH
23225: LD_INT 26
23227: PUSH
23228: LD_INT 36
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 101
23249: PUSH
23250: LD_INT 102
23252: PUSH
23253: LD_INT 105
23255: PUSH
23256: LD_INT 106
23258: PUSH
23259: LD_INT 108
23261: PUSH
23262: LD_INT 109
23264: PUSH
23265: LD_INT 112
23267: PUSH
23268: LD_INT 116
23270: PUSH
23271: LD_INT 117
23273: PUSH
23274: LD_INT 118
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: ST_TO_ADDR
23293: GO 25956
23295: LD_INT 6
23297: DOUBLE
23298: EQUAL
23299: IFTRUE 23303
23301: GO 23435
23303: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23304: LD_ADDR_VAR 0 2
23308: PUSH
23309: LD_INT 2
23311: PUSH
23312: LD_INT 4
23314: PUSH
23315: LD_INT 5
23317: PUSH
23318: LD_INT 6
23320: PUSH
23321: LD_INT 8
23323: PUSH
23324: LD_INT 11
23326: PUSH
23327: LD_INT 12
23329: PUSH
23330: LD_INT 15
23332: PUSH
23333: LD_INT 16
23335: PUSH
23336: LD_INT 20
23338: PUSH
23339: LD_INT 21
23341: PUSH
23342: LD_INT 22
23344: PUSH
23345: LD_INT 23
23347: PUSH
23348: LD_INT 25
23350: PUSH
23351: LD_INT 26
23353: PUSH
23354: LD_INT 30
23356: PUSH
23357: LD_INT 31
23359: PUSH
23360: LD_INT 32
23362: PUSH
23363: LD_INT 36
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 101
23389: PUSH
23390: LD_INT 102
23392: PUSH
23393: LD_INT 105
23395: PUSH
23396: LD_INT 106
23398: PUSH
23399: LD_INT 108
23401: PUSH
23402: LD_INT 109
23404: PUSH
23405: LD_INT 112
23407: PUSH
23408: LD_INT 116
23410: PUSH
23411: LD_INT 117
23413: PUSH
23414: LD_INT 118
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: ST_TO_ADDR
23433: GO 25956
23435: LD_INT 7
23437: DOUBLE
23438: EQUAL
23439: IFTRUE 23443
23441: GO 23555
23443: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23444: LD_ADDR_VAR 0 2
23448: PUSH
23449: LD_INT 2
23451: PUSH
23452: LD_INT 4
23454: PUSH
23455: LD_INT 5
23457: PUSH
23458: LD_INT 7
23460: PUSH
23461: LD_INT 11
23463: PUSH
23464: LD_INT 12
23466: PUSH
23467: LD_INT 15
23469: PUSH
23470: LD_INT 16
23472: PUSH
23473: LD_INT 20
23475: PUSH
23476: LD_INT 21
23478: PUSH
23479: LD_INT 22
23481: PUSH
23482: LD_INT 23
23484: PUSH
23485: LD_INT 25
23487: PUSH
23488: LD_INT 26
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 101
23509: PUSH
23510: LD_INT 102
23512: PUSH
23513: LD_INT 103
23515: PUSH
23516: LD_INT 105
23518: PUSH
23519: LD_INT 106
23521: PUSH
23522: LD_INT 108
23524: PUSH
23525: LD_INT 112
23527: PUSH
23528: LD_INT 116
23530: PUSH
23531: LD_INT 117
23533: PUSH
23534: LD_INT 118
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: ST_TO_ADDR
23553: GO 25956
23555: LD_INT 8
23557: DOUBLE
23558: EQUAL
23559: IFTRUE 23563
23561: GO 23703
23563: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23564: LD_ADDR_VAR 0 2
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: LD_INT 4
23574: PUSH
23575: LD_INT 5
23577: PUSH
23578: LD_INT 6
23580: PUSH
23581: LD_INT 7
23583: PUSH
23584: LD_INT 8
23586: PUSH
23587: LD_INT 11
23589: PUSH
23590: LD_INT 12
23592: PUSH
23593: LD_INT 15
23595: PUSH
23596: LD_INT 16
23598: PUSH
23599: LD_INT 20
23601: PUSH
23602: LD_INT 21
23604: PUSH
23605: LD_INT 22
23607: PUSH
23608: LD_INT 23
23610: PUSH
23611: LD_INT 25
23613: PUSH
23614: LD_INT 26
23616: PUSH
23617: LD_INT 30
23619: PUSH
23620: LD_INT 31
23622: PUSH
23623: LD_INT 32
23625: PUSH
23626: LD_INT 36
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 101
23653: PUSH
23654: LD_INT 102
23656: PUSH
23657: LD_INT 103
23659: PUSH
23660: LD_INT 105
23662: PUSH
23663: LD_INT 106
23665: PUSH
23666: LD_INT 108
23668: PUSH
23669: LD_INT 109
23671: PUSH
23672: LD_INT 112
23674: PUSH
23675: LD_INT 116
23677: PUSH
23678: LD_INT 117
23680: PUSH
23681: LD_INT 118
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: ST_TO_ADDR
23701: GO 25956
23703: LD_INT 9
23705: DOUBLE
23706: EQUAL
23707: IFTRUE 23711
23709: GO 23859
23711: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23712: LD_ADDR_VAR 0 2
23716: PUSH
23717: LD_INT 2
23719: PUSH
23720: LD_INT 4
23722: PUSH
23723: LD_INT 5
23725: PUSH
23726: LD_INT 6
23728: PUSH
23729: LD_INT 7
23731: PUSH
23732: LD_INT 8
23734: PUSH
23735: LD_INT 11
23737: PUSH
23738: LD_INT 12
23740: PUSH
23741: LD_INT 15
23743: PUSH
23744: LD_INT 16
23746: PUSH
23747: LD_INT 20
23749: PUSH
23750: LD_INT 21
23752: PUSH
23753: LD_INT 22
23755: PUSH
23756: LD_INT 23
23758: PUSH
23759: LD_INT 25
23761: PUSH
23762: LD_INT 26
23764: PUSH
23765: LD_INT 28
23767: PUSH
23768: LD_INT 30
23770: PUSH
23771: LD_INT 31
23773: PUSH
23774: LD_INT 32
23776: PUSH
23777: LD_INT 36
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 101
23805: PUSH
23806: LD_INT 102
23808: PUSH
23809: LD_INT 103
23811: PUSH
23812: LD_INT 105
23814: PUSH
23815: LD_INT 106
23817: PUSH
23818: LD_INT 108
23820: PUSH
23821: LD_INT 109
23823: PUSH
23824: LD_INT 112
23826: PUSH
23827: LD_INT 114
23829: PUSH
23830: LD_INT 116
23832: PUSH
23833: LD_INT 117
23835: PUSH
23836: LD_INT 118
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: ST_TO_ADDR
23857: GO 25956
23859: LD_INT 10
23861: DOUBLE
23862: EQUAL
23863: IFTRUE 23867
23865: GO 24063
23867: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23868: LD_ADDR_VAR 0 2
23872: PUSH
23873: LD_INT 2
23875: PUSH
23876: LD_INT 4
23878: PUSH
23879: LD_INT 5
23881: PUSH
23882: LD_INT 6
23884: PUSH
23885: LD_INT 7
23887: PUSH
23888: LD_INT 8
23890: PUSH
23891: LD_INT 9
23893: PUSH
23894: LD_INT 10
23896: PUSH
23897: LD_INT 11
23899: PUSH
23900: LD_INT 12
23902: PUSH
23903: LD_INT 13
23905: PUSH
23906: LD_INT 14
23908: PUSH
23909: LD_INT 15
23911: PUSH
23912: LD_INT 16
23914: PUSH
23915: LD_INT 17
23917: PUSH
23918: LD_INT 18
23920: PUSH
23921: LD_INT 19
23923: PUSH
23924: LD_INT 20
23926: PUSH
23927: LD_INT 21
23929: PUSH
23930: LD_INT 22
23932: PUSH
23933: LD_INT 23
23935: PUSH
23936: LD_INT 24
23938: PUSH
23939: LD_INT 25
23941: PUSH
23942: LD_INT 26
23944: PUSH
23945: LD_INT 28
23947: PUSH
23948: LD_INT 30
23950: PUSH
23951: LD_INT 31
23953: PUSH
23954: LD_INT 32
23956: PUSH
23957: LD_INT 36
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 101
23993: PUSH
23994: LD_INT 102
23996: PUSH
23997: LD_INT 103
23999: PUSH
24000: LD_INT 104
24002: PUSH
24003: LD_INT 105
24005: PUSH
24006: LD_INT 106
24008: PUSH
24009: LD_INT 107
24011: PUSH
24012: LD_INT 108
24014: PUSH
24015: LD_INT 109
24017: PUSH
24018: LD_INT 110
24020: PUSH
24021: LD_INT 111
24023: PUSH
24024: LD_INT 112
24026: PUSH
24027: LD_INT 114
24029: PUSH
24030: LD_INT 116
24032: PUSH
24033: LD_INT 117
24035: PUSH
24036: LD_INT 118
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: ST_TO_ADDR
24061: GO 25956
24063: LD_INT 11
24065: DOUBLE
24066: EQUAL
24067: IFTRUE 24071
24069: GO 24275
24071: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24072: LD_ADDR_VAR 0 2
24076: PUSH
24077: LD_INT 2
24079: PUSH
24080: LD_INT 3
24082: PUSH
24083: LD_INT 4
24085: PUSH
24086: LD_INT 5
24088: PUSH
24089: LD_INT 6
24091: PUSH
24092: LD_INT 7
24094: PUSH
24095: LD_INT 8
24097: PUSH
24098: LD_INT 9
24100: PUSH
24101: LD_INT 10
24103: PUSH
24104: LD_INT 11
24106: PUSH
24107: LD_INT 12
24109: PUSH
24110: LD_INT 13
24112: PUSH
24113: LD_INT 14
24115: PUSH
24116: LD_INT 15
24118: PUSH
24119: LD_INT 16
24121: PUSH
24122: LD_INT 17
24124: PUSH
24125: LD_INT 18
24127: PUSH
24128: LD_INT 19
24130: PUSH
24131: LD_INT 20
24133: PUSH
24134: LD_INT 21
24136: PUSH
24137: LD_INT 22
24139: PUSH
24140: LD_INT 23
24142: PUSH
24143: LD_INT 24
24145: PUSH
24146: LD_INT 25
24148: PUSH
24149: LD_INT 26
24151: PUSH
24152: LD_INT 28
24154: PUSH
24155: LD_INT 30
24157: PUSH
24158: LD_INT 31
24160: PUSH
24161: LD_INT 32
24163: PUSH
24164: LD_INT 34
24166: PUSH
24167: LD_INT 36
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 101
24205: PUSH
24206: LD_INT 102
24208: PUSH
24209: LD_INT 103
24211: PUSH
24212: LD_INT 104
24214: PUSH
24215: LD_INT 105
24217: PUSH
24218: LD_INT 106
24220: PUSH
24221: LD_INT 107
24223: PUSH
24224: LD_INT 108
24226: PUSH
24227: LD_INT 109
24229: PUSH
24230: LD_INT 110
24232: PUSH
24233: LD_INT 111
24235: PUSH
24236: LD_INT 112
24238: PUSH
24239: LD_INT 114
24241: PUSH
24242: LD_INT 116
24244: PUSH
24245: LD_INT 117
24247: PUSH
24248: LD_INT 118
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: ST_TO_ADDR
24273: GO 25956
24275: LD_INT 12
24277: DOUBLE
24278: EQUAL
24279: IFTRUE 24283
24281: GO 24503
24283: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24284: LD_ADDR_VAR 0 2
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: LD_INT 2
24294: PUSH
24295: LD_INT 3
24297: PUSH
24298: LD_INT 4
24300: PUSH
24301: LD_INT 5
24303: PUSH
24304: LD_INT 6
24306: PUSH
24307: LD_INT 7
24309: PUSH
24310: LD_INT 8
24312: PUSH
24313: LD_INT 9
24315: PUSH
24316: LD_INT 10
24318: PUSH
24319: LD_INT 11
24321: PUSH
24322: LD_INT 12
24324: PUSH
24325: LD_INT 13
24327: PUSH
24328: LD_INT 14
24330: PUSH
24331: LD_INT 15
24333: PUSH
24334: LD_INT 16
24336: PUSH
24337: LD_INT 17
24339: PUSH
24340: LD_INT 18
24342: PUSH
24343: LD_INT 19
24345: PUSH
24346: LD_INT 20
24348: PUSH
24349: LD_INT 21
24351: PUSH
24352: LD_INT 22
24354: PUSH
24355: LD_INT 23
24357: PUSH
24358: LD_INT 24
24360: PUSH
24361: LD_INT 25
24363: PUSH
24364: LD_INT 26
24366: PUSH
24367: LD_INT 27
24369: PUSH
24370: LD_INT 28
24372: PUSH
24373: LD_INT 30
24375: PUSH
24376: LD_INT 31
24378: PUSH
24379: LD_INT 32
24381: PUSH
24382: LD_INT 33
24384: PUSH
24385: LD_INT 34
24387: PUSH
24388: LD_INT 36
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 101
24429: PUSH
24430: LD_INT 102
24432: PUSH
24433: LD_INT 103
24435: PUSH
24436: LD_INT 104
24438: PUSH
24439: LD_INT 105
24441: PUSH
24442: LD_INT 106
24444: PUSH
24445: LD_INT 107
24447: PUSH
24448: LD_INT 108
24450: PUSH
24451: LD_INT 109
24453: PUSH
24454: LD_INT 110
24456: PUSH
24457: LD_INT 111
24459: PUSH
24460: LD_INT 112
24462: PUSH
24463: LD_INT 113
24465: PUSH
24466: LD_INT 114
24468: PUSH
24469: LD_INT 116
24471: PUSH
24472: LD_INT 117
24474: PUSH
24475: LD_INT 118
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: ST_TO_ADDR
24501: GO 25956
24503: LD_INT 13
24505: DOUBLE
24506: EQUAL
24507: IFTRUE 24511
24509: GO 24719
24511: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24512: LD_ADDR_VAR 0 2
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: LD_INT 3
24525: PUSH
24526: LD_INT 4
24528: PUSH
24529: LD_INT 5
24531: PUSH
24532: LD_INT 8
24534: PUSH
24535: LD_INT 9
24537: PUSH
24538: LD_INT 10
24540: PUSH
24541: LD_INT 11
24543: PUSH
24544: LD_INT 12
24546: PUSH
24547: LD_INT 14
24549: PUSH
24550: LD_INT 15
24552: PUSH
24553: LD_INT 16
24555: PUSH
24556: LD_INT 17
24558: PUSH
24559: LD_INT 18
24561: PUSH
24562: LD_INT 19
24564: PUSH
24565: LD_INT 20
24567: PUSH
24568: LD_INT 21
24570: PUSH
24571: LD_INT 22
24573: PUSH
24574: LD_INT 23
24576: PUSH
24577: LD_INT 24
24579: PUSH
24580: LD_INT 25
24582: PUSH
24583: LD_INT 26
24585: PUSH
24586: LD_INT 27
24588: PUSH
24589: LD_INT 28
24591: PUSH
24592: LD_INT 30
24594: PUSH
24595: LD_INT 31
24597: PUSH
24598: LD_INT 32
24600: PUSH
24601: LD_INT 33
24603: PUSH
24604: LD_INT 34
24606: PUSH
24607: LD_INT 36
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 101
24645: PUSH
24646: LD_INT 102
24648: PUSH
24649: LD_INT 103
24651: PUSH
24652: LD_INT 104
24654: PUSH
24655: LD_INT 105
24657: PUSH
24658: LD_INT 106
24660: PUSH
24661: LD_INT 107
24663: PUSH
24664: LD_INT 108
24666: PUSH
24667: LD_INT 109
24669: PUSH
24670: LD_INT 110
24672: PUSH
24673: LD_INT 111
24675: PUSH
24676: LD_INT 112
24678: PUSH
24679: LD_INT 113
24681: PUSH
24682: LD_INT 114
24684: PUSH
24685: LD_INT 116
24687: PUSH
24688: LD_INT 117
24690: PUSH
24691: LD_INT 118
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: ST_TO_ADDR
24717: GO 25956
24719: LD_INT 14
24721: DOUBLE
24722: EQUAL
24723: IFTRUE 24727
24725: GO 24951
24727: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24728: LD_ADDR_VAR 0 2
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: LD_INT 3
24741: PUSH
24742: LD_INT 4
24744: PUSH
24745: LD_INT 5
24747: PUSH
24748: LD_INT 6
24750: PUSH
24751: LD_INT 7
24753: PUSH
24754: LD_INT 8
24756: PUSH
24757: LD_INT 9
24759: PUSH
24760: LD_INT 10
24762: PUSH
24763: LD_INT 11
24765: PUSH
24766: LD_INT 12
24768: PUSH
24769: LD_INT 13
24771: PUSH
24772: LD_INT 14
24774: PUSH
24775: LD_INT 15
24777: PUSH
24778: LD_INT 16
24780: PUSH
24781: LD_INT 17
24783: PUSH
24784: LD_INT 18
24786: PUSH
24787: LD_INT 19
24789: PUSH
24790: LD_INT 20
24792: PUSH
24793: LD_INT 21
24795: PUSH
24796: LD_INT 22
24798: PUSH
24799: LD_INT 23
24801: PUSH
24802: LD_INT 24
24804: PUSH
24805: LD_INT 25
24807: PUSH
24808: LD_INT 26
24810: PUSH
24811: LD_INT 27
24813: PUSH
24814: LD_INT 28
24816: PUSH
24817: LD_INT 29
24819: PUSH
24820: LD_INT 30
24822: PUSH
24823: LD_INT 31
24825: PUSH
24826: LD_INT 32
24828: PUSH
24829: LD_INT 33
24831: PUSH
24832: LD_INT 34
24834: PUSH
24835: LD_INT 36
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 101
24877: PUSH
24878: LD_INT 102
24880: PUSH
24881: LD_INT 103
24883: PUSH
24884: LD_INT 104
24886: PUSH
24887: LD_INT 105
24889: PUSH
24890: LD_INT 106
24892: PUSH
24893: LD_INT 107
24895: PUSH
24896: LD_INT 108
24898: PUSH
24899: LD_INT 109
24901: PUSH
24902: LD_INT 110
24904: PUSH
24905: LD_INT 111
24907: PUSH
24908: LD_INT 112
24910: PUSH
24911: LD_INT 113
24913: PUSH
24914: LD_INT 114
24916: PUSH
24917: LD_INT 116
24919: PUSH
24920: LD_INT 117
24922: PUSH
24923: LD_INT 118
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: ST_TO_ADDR
24949: GO 25956
24951: LD_INT 15
24953: DOUBLE
24954: EQUAL
24955: IFTRUE 24959
24957: GO 25183
24959: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: LD_INT 2
24970: PUSH
24971: LD_INT 3
24973: PUSH
24974: LD_INT 4
24976: PUSH
24977: LD_INT 5
24979: PUSH
24980: LD_INT 6
24982: PUSH
24983: LD_INT 7
24985: PUSH
24986: LD_INT 8
24988: PUSH
24989: LD_INT 9
24991: PUSH
24992: LD_INT 10
24994: PUSH
24995: LD_INT 11
24997: PUSH
24998: LD_INT 12
25000: PUSH
25001: LD_INT 13
25003: PUSH
25004: LD_INT 14
25006: PUSH
25007: LD_INT 15
25009: PUSH
25010: LD_INT 16
25012: PUSH
25013: LD_INT 17
25015: PUSH
25016: LD_INT 18
25018: PUSH
25019: LD_INT 19
25021: PUSH
25022: LD_INT 20
25024: PUSH
25025: LD_INT 21
25027: PUSH
25028: LD_INT 22
25030: PUSH
25031: LD_INT 23
25033: PUSH
25034: LD_INT 24
25036: PUSH
25037: LD_INT 25
25039: PUSH
25040: LD_INT 26
25042: PUSH
25043: LD_INT 27
25045: PUSH
25046: LD_INT 28
25048: PUSH
25049: LD_INT 29
25051: PUSH
25052: LD_INT 30
25054: PUSH
25055: LD_INT 31
25057: PUSH
25058: LD_INT 32
25060: PUSH
25061: LD_INT 33
25063: PUSH
25064: LD_INT 34
25066: PUSH
25067: LD_INT 36
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 101
25109: PUSH
25110: LD_INT 102
25112: PUSH
25113: LD_INT 103
25115: PUSH
25116: LD_INT 104
25118: PUSH
25119: LD_INT 105
25121: PUSH
25122: LD_INT 106
25124: PUSH
25125: LD_INT 107
25127: PUSH
25128: LD_INT 108
25130: PUSH
25131: LD_INT 109
25133: PUSH
25134: LD_INT 110
25136: PUSH
25137: LD_INT 111
25139: PUSH
25140: LD_INT 112
25142: PUSH
25143: LD_INT 113
25145: PUSH
25146: LD_INT 114
25148: PUSH
25149: LD_INT 116
25151: PUSH
25152: LD_INT 117
25154: PUSH
25155: LD_INT 118
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: ST_TO_ADDR
25181: GO 25956
25183: LD_INT 16
25185: DOUBLE
25186: EQUAL
25187: IFTRUE 25191
25189: GO 25327
25191: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25192: LD_ADDR_VAR 0 2
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: LD_INT 4
25202: PUSH
25203: LD_INT 5
25205: PUSH
25206: LD_INT 7
25208: PUSH
25209: LD_INT 11
25211: PUSH
25212: LD_INT 12
25214: PUSH
25215: LD_INT 15
25217: PUSH
25218: LD_INT 16
25220: PUSH
25221: LD_INT 20
25223: PUSH
25224: LD_INT 21
25226: PUSH
25227: LD_INT 22
25229: PUSH
25230: LD_INT 23
25232: PUSH
25233: LD_INT 25
25235: PUSH
25236: LD_INT 26
25238: PUSH
25239: LD_INT 30
25241: PUSH
25242: LD_INT 31
25244: PUSH
25245: LD_INT 32
25247: PUSH
25248: LD_INT 33
25250: PUSH
25251: LD_INT 34
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 101
25277: PUSH
25278: LD_INT 102
25280: PUSH
25281: LD_INT 103
25283: PUSH
25284: LD_INT 106
25286: PUSH
25287: LD_INT 108
25289: PUSH
25290: LD_INT 112
25292: PUSH
25293: LD_INT 113
25295: PUSH
25296: LD_INT 114
25298: PUSH
25299: LD_INT 116
25301: PUSH
25302: LD_INT 117
25304: PUSH
25305: LD_INT 118
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: ST_TO_ADDR
25325: GO 25956
25327: LD_INT 17
25329: DOUBLE
25330: EQUAL
25331: IFTRUE 25335
25333: GO 25559
25335: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25336: LD_ADDR_VAR 0 2
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: LD_INT 3
25349: PUSH
25350: LD_INT 4
25352: PUSH
25353: LD_INT 5
25355: PUSH
25356: LD_INT 6
25358: PUSH
25359: LD_INT 7
25361: PUSH
25362: LD_INT 8
25364: PUSH
25365: LD_INT 9
25367: PUSH
25368: LD_INT 10
25370: PUSH
25371: LD_INT 11
25373: PUSH
25374: LD_INT 12
25376: PUSH
25377: LD_INT 13
25379: PUSH
25380: LD_INT 14
25382: PUSH
25383: LD_INT 15
25385: PUSH
25386: LD_INT 16
25388: PUSH
25389: LD_INT 17
25391: PUSH
25392: LD_INT 18
25394: PUSH
25395: LD_INT 19
25397: PUSH
25398: LD_INT 20
25400: PUSH
25401: LD_INT 21
25403: PUSH
25404: LD_INT 22
25406: PUSH
25407: LD_INT 23
25409: PUSH
25410: LD_INT 24
25412: PUSH
25413: LD_INT 25
25415: PUSH
25416: LD_INT 26
25418: PUSH
25419: LD_INT 27
25421: PUSH
25422: LD_INT 28
25424: PUSH
25425: LD_INT 29
25427: PUSH
25428: LD_INT 30
25430: PUSH
25431: LD_INT 31
25433: PUSH
25434: LD_INT 32
25436: PUSH
25437: LD_INT 33
25439: PUSH
25440: LD_INT 34
25442: PUSH
25443: LD_INT 36
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 101
25485: PUSH
25486: LD_INT 102
25488: PUSH
25489: LD_INT 103
25491: PUSH
25492: LD_INT 104
25494: PUSH
25495: LD_INT 105
25497: PUSH
25498: LD_INT 106
25500: PUSH
25501: LD_INT 107
25503: PUSH
25504: LD_INT 108
25506: PUSH
25507: LD_INT 109
25509: PUSH
25510: LD_INT 110
25512: PUSH
25513: LD_INT 111
25515: PUSH
25516: LD_INT 112
25518: PUSH
25519: LD_INT 113
25521: PUSH
25522: LD_INT 114
25524: PUSH
25525: LD_INT 116
25527: PUSH
25528: LD_INT 117
25530: PUSH
25531: LD_INT 118
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: ST_TO_ADDR
25557: GO 25956
25559: LD_INT 18
25561: DOUBLE
25562: EQUAL
25563: IFTRUE 25567
25565: GO 25715
25567: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25568: LD_ADDR_VAR 0 2
25572: PUSH
25573: LD_INT 2
25575: PUSH
25576: LD_INT 4
25578: PUSH
25579: LD_INT 5
25581: PUSH
25582: LD_INT 7
25584: PUSH
25585: LD_INT 11
25587: PUSH
25588: LD_INT 12
25590: PUSH
25591: LD_INT 15
25593: PUSH
25594: LD_INT 16
25596: PUSH
25597: LD_INT 20
25599: PUSH
25600: LD_INT 21
25602: PUSH
25603: LD_INT 22
25605: PUSH
25606: LD_INT 23
25608: PUSH
25609: LD_INT 25
25611: PUSH
25612: LD_INT 26
25614: PUSH
25615: LD_INT 30
25617: PUSH
25618: LD_INT 31
25620: PUSH
25621: LD_INT 32
25623: PUSH
25624: LD_INT 33
25626: PUSH
25627: LD_INT 34
25629: PUSH
25630: LD_INT 35
25632: PUSH
25633: LD_INT 36
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 101
25661: PUSH
25662: LD_INT 102
25664: PUSH
25665: LD_INT 103
25667: PUSH
25668: LD_INT 106
25670: PUSH
25671: LD_INT 108
25673: PUSH
25674: LD_INT 112
25676: PUSH
25677: LD_INT 113
25679: PUSH
25680: LD_INT 114
25682: PUSH
25683: LD_INT 115
25685: PUSH
25686: LD_INT 116
25688: PUSH
25689: LD_INT 117
25691: PUSH
25692: LD_INT 118
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: ST_TO_ADDR
25713: GO 25956
25715: LD_INT 19
25717: DOUBLE
25718: EQUAL
25719: IFTRUE 25723
25721: GO 25955
25723: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25724: LD_ADDR_VAR 0 2
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: LD_INT 3
25737: PUSH
25738: LD_INT 4
25740: PUSH
25741: LD_INT 5
25743: PUSH
25744: LD_INT 6
25746: PUSH
25747: LD_INT 7
25749: PUSH
25750: LD_INT 8
25752: PUSH
25753: LD_INT 9
25755: PUSH
25756: LD_INT 10
25758: PUSH
25759: LD_INT 11
25761: PUSH
25762: LD_INT 12
25764: PUSH
25765: LD_INT 13
25767: PUSH
25768: LD_INT 14
25770: PUSH
25771: LD_INT 15
25773: PUSH
25774: LD_INT 16
25776: PUSH
25777: LD_INT 17
25779: PUSH
25780: LD_INT 18
25782: PUSH
25783: LD_INT 19
25785: PUSH
25786: LD_INT 20
25788: PUSH
25789: LD_INT 21
25791: PUSH
25792: LD_INT 22
25794: PUSH
25795: LD_INT 23
25797: PUSH
25798: LD_INT 24
25800: PUSH
25801: LD_INT 25
25803: PUSH
25804: LD_INT 26
25806: PUSH
25807: LD_INT 27
25809: PUSH
25810: LD_INT 28
25812: PUSH
25813: LD_INT 29
25815: PUSH
25816: LD_INT 30
25818: PUSH
25819: LD_INT 31
25821: PUSH
25822: LD_INT 32
25824: PUSH
25825: LD_INT 33
25827: PUSH
25828: LD_INT 34
25830: PUSH
25831: LD_INT 35
25833: PUSH
25834: LD_INT 36
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 101
25877: PUSH
25878: LD_INT 102
25880: PUSH
25881: LD_INT 103
25883: PUSH
25884: LD_INT 104
25886: PUSH
25887: LD_INT 105
25889: PUSH
25890: LD_INT 106
25892: PUSH
25893: LD_INT 107
25895: PUSH
25896: LD_INT 108
25898: PUSH
25899: LD_INT 109
25901: PUSH
25902: LD_INT 110
25904: PUSH
25905: LD_INT 111
25907: PUSH
25908: LD_INT 112
25910: PUSH
25911: LD_INT 113
25913: PUSH
25914: LD_INT 114
25916: PUSH
25917: LD_INT 115
25919: PUSH
25920: LD_INT 116
25922: PUSH
25923: LD_INT 117
25925: PUSH
25926: LD_INT 118
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: ST_TO_ADDR
25953: GO 25956
25955: POP
// end else
25956: GO 26187
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25958: LD_ADDR_VAR 0 2
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: LD_INT 2
25968: PUSH
25969: LD_INT 3
25971: PUSH
25972: LD_INT 4
25974: PUSH
25975: LD_INT 5
25977: PUSH
25978: LD_INT 6
25980: PUSH
25981: LD_INT 7
25983: PUSH
25984: LD_INT 8
25986: PUSH
25987: LD_INT 9
25989: PUSH
25990: LD_INT 10
25992: PUSH
25993: LD_INT 11
25995: PUSH
25996: LD_INT 12
25998: PUSH
25999: LD_INT 13
26001: PUSH
26002: LD_INT 14
26004: PUSH
26005: LD_INT 15
26007: PUSH
26008: LD_INT 16
26010: PUSH
26011: LD_INT 17
26013: PUSH
26014: LD_INT 18
26016: PUSH
26017: LD_INT 19
26019: PUSH
26020: LD_INT 20
26022: PUSH
26023: LD_INT 21
26025: PUSH
26026: LD_INT 22
26028: PUSH
26029: LD_INT 23
26031: PUSH
26032: LD_INT 24
26034: PUSH
26035: LD_INT 25
26037: PUSH
26038: LD_INT 26
26040: PUSH
26041: LD_INT 27
26043: PUSH
26044: LD_INT 28
26046: PUSH
26047: LD_INT 29
26049: PUSH
26050: LD_INT 30
26052: PUSH
26053: LD_INT 31
26055: PUSH
26056: LD_INT 32
26058: PUSH
26059: LD_INT 33
26061: PUSH
26062: LD_INT 34
26064: PUSH
26065: LD_INT 35
26067: PUSH
26068: LD_INT 36
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 101
26111: PUSH
26112: LD_INT 102
26114: PUSH
26115: LD_INT 103
26117: PUSH
26118: LD_INT 104
26120: PUSH
26121: LD_INT 105
26123: PUSH
26124: LD_INT 106
26126: PUSH
26127: LD_INT 107
26129: PUSH
26130: LD_INT 108
26132: PUSH
26133: LD_INT 109
26135: PUSH
26136: LD_INT 110
26138: PUSH
26139: LD_INT 111
26141: PUSH
26142: LD_INT 112
26144: PUSH
26145: LD_INT 113
26147: PUSH
26148: LD_INT 114
26150: PUSH
26151: LD_INT 115
26153: PUSH
26154: LD_INT 116
26156: PUSH
26157: LD_INT 117
26159: PUSH
26160: LD_INT 118
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: ST_TO_ADDR
// if result then
26187: LD_VAR 0 2
26191: IFFALSE 26977
// begin normal :=  ;
26193: LD_ADDR_VAR 0 5
26197: PUSH
26198: LD_STRING 
26200: ST_TO_ADDR
// hardcore :=  ;
26201: LD_ADDR_VAR 0 6
26205: PUSH
26206: LD_STRING 
26208: ST_TO_ADDR
// active :=  ;
26209: LD_ADDR_VAR 0 7
26213: PUSH
26214: LD_STRING 
26216: ST_TO_ADDR
// for i = 1 to normalCounter do
26217: LD_ADDR_VAR 0 8
26221: PUSH
26222: DOUBLE
26223: LD_INT 1
26225: DEC
26226: ST_TO_ADDR
26227: LD_EXP 51
26231: PUSH
26232: FOR_TO
26233: IFFALSE 26334
// begin tmp := 0 ;
26235: LD_ADDR_VAR 0 3
26239: PUSH
26240: LD_STRING 0
26242: ST_TO_ADDR
// if result [ 1 ] then
26243: LD_VAR 0 2
26247: PUSH
26248: LD_INT 1
26250: ARRAY
26251: IFFALSE 26316
// if result [ 1 ] [ 1 ] = i then
26253: LD_VAR 0 2
26257: PUSH
26258: LD_INT 1
26260: ARRAY
26261: PUSH
26262: LD_INT 1
26264: ARRAY
26265: PUSH
26266: LD_VAR 0 8
26270: EQUAL
26271: IFFALSE 26316
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26273: LD_ADDR_VAR 0 2
26277: PUSH
26278: LD_VAR 0 2
26282: PPUSH
26283: LD_INT 1
26285: PPUSH
26286: LD_VAR 0 2
26290: PUSH
26291: LD_INT 1
26293: ARRAY
26294: PPUSH
26295: LD_INT 1
26297: PPUSH
26298: CALL_OW 3
26302: PPUSH
26303: CALL_OW 1
26307: ST_TO_ADDR
// tmp := 1 ;
26308: LD_ADDR_VAR 0 3
26312: PUSH
26313: LD_STRING 1
26315: ST_TO_ADDR
// end ; normal := normal & tmp ;
26316: LD_ADDR_VAR 0 5
26320: PUSH
26321: LD_VAR 0 5
26325: PUSH
26326: LD_VAR 0 3
26330: STR
26331: ST_TO_ADDR
// end ;
26332: GO 26232
26334: POP
26335: POP
// for i = 1 to hardcoreCounter do
26336: LD_ADDR_VAR 0 8
26340: PUSH
26341: DOUBLE
26342: LD_INT 1
26344: DEC
26345: ST_TO_ADDR
26346: LD_EXP 52
26350: PUSH
26351: FOR_TO
26352: IFFALSE 26457
// begin tmp := 0 ;
26354: LD_ADDR_VAR 0 3
26358: PUSH
26359: LD_STRING 0
26361: ST_TO_ADDR
// if result [ 2 ] then
26362: LD_VAR 0 2
26366: PUSH
26367: LD_INT 2
26369: ARRAY
26370: IFFALSE 26439
// if result [ 2 ] [ 1 ] = 100 + i then
26372: LD_VAR 0 2
26376: PUSH
26377: LD_INT 2
26379: ARRAY
26380: PUSH
26381: LD_INT 1
26383: ARRAY
26384: PUSH
26385: LD_INT 100
26387: PUSH
26388: LD_VAR 0 8
26392: PLUS
26393: EQUAL
26394: IFFALSE 26439
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26396: LD_ADDR_VAR 0 2
26400: PUSH
26401: LD_VAR 0 2
26405: PPUSH
26406: LD_INT 2
26408: PPUSH
26409: LD_VAR 0 2
26413: PUSH
26414: LD_INT 2
26416: ARRAY
26417: PPUSH
26418: LD_INT 1
26420: PPUSH
26421: CALL_OW 3
26425: PPUSH
26426: CALL_OW 1
26430: ST_TO_ADDR
// tmp := 1 ;
26431: LD_ADDR_VAR 0 3
26435: PUSH
26436: LD_STRING 1
26438: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26439: LD_ADDR_VAR 0 6
26443: PUSH
26444: LD_VAR 0 6
26448: PUSH
26449: LD_VAR 0 3
26453: STR
26454: ST_TO_ADDR
// end ;
26455: GO 26351
26457: POP
26458: POP
// if isGameLoad then
26459: LD_VAR 0 1
26463: IFFALSE 26938
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26465: LD_ADDR_VAR 0 4
26469: PUSH
26470: LD_EXP 55
26474: PUSH
26475: LD_EXP 54
26479: PUSH
26480: LD_EXP 56
26484: PUSH
26485: LD_EXP 53
26489: PUSH
26490: LD_EXP 57
26494: PUSH
26495: LD_EXP 58
26499: PUSH
26500: LD_EXP 59
26504: PUSH
26505: LD_EXP 60
26509: PUSH
26510: LD_EXP 61
26514: PUSH
26515: LD_EXP 62
26519: PUSH
26520: LD_EXP 63
26524: PUSH
26525: LD_EXP 64
26529: PUSH
26530: LD_EXP 65
26534: PUSH
26535: LD_EXP 66
26539: PUSH
26540: LD_EXP 74
26544: PUSH
26545: LD_EXP 75
26549: PUSH
26550: LD_EXP 76
26554: PUSH
26555: LD_EXP 77
26559: PUSH
26560: LD_EXP 79
26564: PUSH
26565: LD_EXP 80
26569: PUSH
26570: LD_EXP 81
26574: PUSH
26575: LD_EXP 84
26579: PUSH
26580: LD_EXP 86
26584: PUSH
26585: LD_EXP 87
26589: PUSH
26590: LD_EXP 88
26594: PUSH
26595: LD_EXP 90
26599: PUSH
26600: LD_EXP 91
26604: PUSH
26605: LD_EXP 94
26609: PUSH
26610: LD_EXP 95
26614: PUSH
26615: LD_EXP 96
26619: PUSH
26620: LD_EXP 97
26624: PUSH
26625: LD_EXP 98
26629: PUSH
26630: LD_EXP 99
26634: PUSH
26635: LD_EXP 100
26639: PUSH
26640: LD_EXP 101
26644: PUSH
26645: LD_EXP 102
26649: PUSH
26650: LD_EXP 67
26654: PUSH
26655: LD_EXP 68
26659: PUSH
26660: LD_EXP 71
26664: PUSH
26665: LD_EXP 72
26669: PUSH
26670: LD_EXP 73
26674: PUSH
26675: LD_EXP 69
26679: PUSH
26680: LD_EXP 70
26684: PUSH
26685: LD_EXP 78
26689: PUSH
26690: LD_EXP 82
26694: PUSH
26695: LD_EXP 83
26699: PUSH
26700: LD_EXP 85
26704: PUSH
26705: LD_EXP 89
26709: PUSH
26710: LD_EXP 92
26714: PUSH
26715: LD_EXP 93
26719: PUSH
26720: LD_EXP 103
26724: PUSH
26725: LD_EXP 104
26729: PUSH
26730: LD_EXP 105
26734: PUSH
26735: LD_EXP 106
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: ST_TO_ADDR
// tmp :=  ;
26796: LD_ADDR_VAR 0 3
26800: PUSH
26801: LD_STRING 
26803: ST_TO_ADDR
// for i = 1 to normalCounter do
26804: LD_ADDR_VAR 0 8
26808: PUSH
26809: DOUBLE
26810: LD_INT 1
26812: DEC
26813: ST_TO_ADDR
26814: LD_EXP 51
26818: PUSH
26819: FOR_TO
26820: IFFALSE 26856
// begin if flags [ i ] then
26822: LD_VAR 0 4
26826: PUSH
26827: LD_VAR 0 8
26831: ARRAY
26832: IFFALSE 26854
// tmp := tmp & i & ; ;
26834: LD_ADDR_VAR 0 3
26838: PUSH
26839: LD_VAR 0 3
26843: PUSH
26844: LD_VAR 0 8
26848: STR
26849: PUSH
26850: LD_STRING ;
26852: STR
26853: ST_TO_ADDR
// end ;
26854: GO 26819
26856: POP
26857: POP
// for i = 1 to hardcoreCounter do
26858: LD_ADDR_VAR 0 8
26862: PUSH
26863: DOUBLE
26864: LD_INT 1
26866: DEC
26867: ST_TO_ADDR
26868: LD_EXP 52
26872: PUSH
26873: FOR_TO
26874: IFFALSE 26920
// begin if flags [ normalCounter + i ] then
26876: LD_VAR 0 4
26880: PUSH
26881: LD_EXP 51
26885: PUSH
26886: LD_VAR 0 8
26890: PLUS
26891: ARRAY
26892: IFFALSE 26918
// tmp := tmp & ( 100 + i ) & ; ;
26894: LD_ADDR_VAR 0 3
26898: PUSH
26899: LD_VAR 0 3
26903: PUSH
26904: LD_INT 100
26906: PUSH
26907: LD_VAR 0 8
26911: PLUS
26912: STR
26913: PUSH
26914: LD_STRING ;
26916: STR
26917: ST_TO_ADDR
// end ;
26918: GO 26873
26920: POP
26921: POP
// if tmp then
26922: LD_VAR 0 3
26926: IFFALSE 26938
// active := tmp ;
26928: LD_ADDR_VAR 0 7
26932: PUSH
26933: LD_VAR 0 3
26937: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26938: LD_STRING getStreamItemsFromMission("
26940: PUSH
26941: LD_VAR 0 5
26945: STR
26946: PUSH
26947: LD_STRING ","
26949: STR
26950: PUSH
26951: LD_VAR 0 6
26955: STR
26956: PUSH
26957: LD_STRING ","
26959: STR
26960: PUSH
26961: LD_VAR 0 7
26965: STR
26966: PUSH
26967: LD_STRING ")
26969: STR
26970: PPUSH
26971: CALL_OW 559
// end else
26975: GO 26984
// ToLua ( getStreamItemsFromMission("","","") ) ;
26977: LD_STRING getStreamItemsFromMission("","","")
26979: PPUSH
26980: CALL_OW 559
// end ;
26984: LD_VAR 0 2
26988: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26989: LD_EXP 50
26993: PUSH
26994: LD_EXP 55
26998: AND
26999: IFFALSE 27123
27001: GO 27003
27003: DISABLE
27004: LD_INT 0
27006: PPUSH
27007: PPUSH
// begin enable ;
27008: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27009: LD_ADDR_VAR 0 2
27013: PUSH
27014: LD_INT 22
27016: PUSH
27017: LD_OWVAR 2
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 2
27028: PUSH
27029: LD_INT 34
27031: PUSH
27032: LD_INT 7
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 34
27041: PUSH
27042: LD_INT 45
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 34
27051: PUSH
27052: LD_INT 28
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 34
27061: PUSH
27062: LD_INT 47
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PPUSH
27080: CALL_OW 69
27084: ST_TO_ADDR
// if not tmp then
27085: LD_VAR 0 2
27089: NOT
27090: IFFALSE 27094
// exit ;
27092: GO 27123
// for i in tmp do
27094: LD_ADDR_VAR 0 1
27098: PUSH
27099: LD_VAR 0 2
27103: PUSH
27104: FOR_IN
27105: IFFALSE 27121
// begin SetLives ( i , 0 ) ;
27107: LD_VAR 0 1
27111: PPUSH
27112: LD_INT 0
27114: PPUSH
27115: CALL_OW 234
// end ;
27119: GO 27104
27121: POP
27122: POP
// end ;
27123: PPOPN 2
27125: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27126: LD_EXP 50
27130: PUSH
27131: LD_EXP 56
27135: AND
27136: IFFALSE 27220
27138: GO 27140
27140: DISABLE
27141: LD_INT 0
27143: PPUSH
27144: PPUSH
// begin enable ;
27145: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27146: LD_ADDR_VAR 0 2
27150: PUSH
27151: LD_INT 22
27153: PUSH
27154: LD_OWVAR 2
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 32
27165: PUSH
27166: LD_INT 3
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PPUSH
27177: CALL_OW 69
27181: ST_TO_ADDR
// if not tmp then
27182: LD_VAR 0 2
27186: NOT
27187: IFFALSE 27191
// exit ;
27189: GO 27220
// for i in tmp do
27191: LD_ADDR_VAR 0 1
27195: PUSH
27196: LD_VAR 0 2
27200: PUSH
27201: FOR_IN
27202: IFFALSE 27218
// begin SetLives ( i , 0 ) ;
27204: LD_VAR 0 1
27208: PPUSH
27209: LD_INT 0
27211: PPUSH
27212: CALL_OW 234
// end ;
27216: GO 27201
27218: POP
27219: POP
// end ;
27220: PPOPN 2
27222: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27223: LD_EXP 50
27227: PUSH
27228: LD_EXP 53
27232: AND
27233: IFFALSE 27326
27235: GO 27237
27237: DISABLE
27238: LD_INT 0
27240: PPUSH
// begin enable ;
27241: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27242: LD_ADDR_VAR 0 1
27246: PUSH
27247: LD_INT 22
27249: PUSH
27250: LD_OWVAR 2
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: LD_INT 25
27264: PUSH
27265: LD_INT 5
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 25
27274: PUSH
27275: LD_INT 9
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 25
27284: PUSH
27285: LD_INT 8
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PPUSH
27302: CALL_OW 69
27306: PUSH
27307: FOR_IN
27308: IFFALSE 27324
// begin SetClass ( i , 1 ) ;
27310: LD_VAR 0 1
27314: PPUSH
27315: LD_INT 1
27317: PPUSH
27318: CALL_OW 336
// end ;
27322: GO 27307
27324: POP
27325: POP
// end ;
27326: PPOPN 1
27328: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27329: LD_EXP 50
27333: PUSH
27334: LD_EXP 54
27338: AND
27339: PUSH
27340: LD_OWVAR 65
27344: PUSH
27345: LD_INT 7
27347: LESS
27348: AND
27349: IFFALSE 27363
27351: GO 27353
27353: DISABLE
// begin enable ;
27354: ENABLE
// game_speed := 7 ;
27355: LD_ADDR_OWVAR 65
27359: PUSH
27360: LD_INT 7
27362: ST_TO_ADDR
// end ;
27363: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27364: LD_EXP 50
27368: PUSH
27369: LD_EXP 57
27373: AND
27374: IFFALSE 27576
27376: GO 27378
27378: DISABLE
27379: LD_INT 0
27381: PPUSH
27382: PPUSH
27383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27384: LD_ADDR_VAR 0 3
27388: PUSH
27389: LD_INT 81
27391: PUSH
27392: LD_OWVAR 2
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 21
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PPUSH
27415: CALL_OW 69
27419: ST_TO_ADDR
// if not tmp then
27420: LD_VAR 0 3
27424: NOT
27425: IFFALSE 27429
// exit ;
27427: GO 27576
// if tmp > 5 then
27429: LD_VAR 0 3
27433: PUSH
27434: LD_INT 5
27436: GREATER
27437: IFFALSE 27449
// k := 5 else
27439: LD_ADDR_VAR 0 2
27443: PUSH
27444: LD_INT 5
27446: ST_TO_ADDR
27447: GO 27459
// k := tmp ;
27449: LD_ADDR_VAR 0 2
27453: PUSH
27454: LD_VAR 0 3
27458: ST_TO_ADDR
// for i := 1 to k do
27459: LD_ADDR_VAR 0 1
27463: PUSH
27464: DOUBLE
27465: LD_INT 1
27467: DEC
27468: ST_TO_ADDR
27469: LD_VAR 0 2
27473: PUSH
27474: FOR_TO
27475: IFFALSE 27574
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27477: LD_VAR 0 3
27481: PUSH
27482: LD_VAR 0 1
27486: ARRAY
27487: PPUSH
27488: LD_VAR 0 1
27492: PUSH
27493: LD_INT 4
27495: MOD
27496: PUSH
27497: LD_INT 1
27499: PLUS
27500: PPUSH
27501: CALL_OW 259
27505: PUSH
27506: LD_INT 10
27508: LESS
27509: IFFALSE 27572
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27511: LD_VAR 0 3
27515: PUSH
27516: LD_VAR 0 1
27520: ARRAY
27521: PPUSH
27522: LD_VAR 0 1
27526: PUSH
27527: LD_INT 4
27529: MOD
27530: PUSH
27531: LD_INT 1
27533: PLUS
27534: PPUSH
27535: LD_VAR 0 3
27539: PUSH
27540: LD_VAR 0 1
27544: ARRAY
27545: PPUSH
27546: LD_VAR 0 1
27550: PUSH
27551: LD_INT 4
27553: MOD
27554: PUSH
27555: LD_INT 1
27557: PLUS
27558: PPUSH
27559: CALL_OW 259
27563: PUSH
27564: LD_INT 1
27566: PLUS
27567: PPUSH
27568: CALL_OW 237
27572: GO 27474
27574: POP
27575: POP
// end ;
27576: PPOPN 3
27578: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27579: LD_EXP 50
27583: PUSH
27584: LD_EXP 58
27588: AND
27589: IFFALSE 27609
27591: GO 27593
27593: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27594: LD_INT 4
27596: PPUSH
27597: LD_OWVAR 2
27601: PPUSH
27602: LD_INT 0
27604: PPUSH
27605: CALL_OW 324
27609: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27610: LD_EXP 50
27614: PUSH
27615: LD_EXP 87
27619: AND
27620: IFFALSE 27640
27622: GO 27624
27624: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27625: LD_INT 19
27627: PPUSH
27628: LD_OWVAR 2
27632: PPUSH
27633: LD_INT 0
27635: PPUSH
27636: CALL_OW 324
27640: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27641: LD_EXP 50
27645: PUSH
27646: LD_EXP 59
27650: AND
27651: IFFALSE 27753
27653: GO 27655
27655: DISABLE
27656: LD_INT 0
27658: PPUSH
27659: PPUSH
// begin enable ;
27660: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27661: LD_ADDR_VAR 0 2
27665: PUSH
27666: LD_INT 22
27668: PUSH
27669: LD_OWVAR 2
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 2
27680: PUSH
27681: LD_INT 34
27683: PUSH
27684: LD_INT 11
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 34
27693: PUSH
27694: LD_INT 30
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PPUSH
27710: CALL_OW 69
27714: ST_TO_ADDR
// if not tmp then
27715: LD_VAR 0 2
27719: NOT
27720: IFFALSE 27724
// exit ;
27722: GO 27753
// for i in tmp do
27724: LD_ADDR_VAR 0 1
27728: PUSH
27729: LD_VAR 0 2
27733: PUSH
27734: FOR_IN
27735: IFFALSE 27751
// begin SetLives ( i , 0 ) ;
27737: LD_VAR 0 1
27741: PPUSH
27742: LD_INT 0
27744: PPUSH
27745: CALL_OW 234
// end ;
27749: GO 27734
27751: POP
27752: POP
// end ;
27753: PPOPN 2
27755: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27756: LD_EXP 50
27760: PUSH
27761: LD_EXP 60
27765: AND
27766: IFFALSE 27786
27768: GO 27770
27770: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27771: LD_INT 32
27773: PPUSH
27774: LD_OWVAR 2
27778: PPUSH
27779: LD_INT 0
27781: PPUSH
27782: CALL_OW 324
27786: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27787: LD_EXP 50
27791: PUSH
27792: LD_EXP 61
27796: AND
27797: IFFALSE 27978
27799: GO 27801
27801: DISABLE
27802: LD_INT 0
27804: PPUSH
27805: PPUSH
27806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27807: LD_ADDR_VAR 0 2
27811: PUSH
27812: LD_INT 22
27814: PUSH
27815: LD_OWVAR 2
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 33
27826: PUSH
27827: LD_INT 3
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PPUSH
27838: CALL_OW 69
27842: ST_TO_ADDR
// if not tmp then
27843: LD_VAR 0 2
27847: NOT
27848: IFFALSE 27852
// exit ;
27850: GO 27978
// side := 0 ;
27852: LD_ADDR_VAR 0 3
27856: PUSH
27857: LD_INT 0
27859: ST_TO_ADDR
// for i := 1 to 8 do
27860: LD_ADDR_VAR 0 1
27864: PUSH
27865: DOUBLE
27866: LD_INT 1
27868: DEC
27869: ST_TO_ADDR
27870: LD_INT 8
27872: PUSH
27873: FOR_TO
27874: IFFALSE 27922
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27876: LD_OWVAR 2
27880: PUSH
27881: LD_VAR 0 1
27885: NONEQUAL
27886: PUSH
27887: LD_OWVAR 2
27891: PPUSH
27892: LD_VAR 0 1
27896: PPUSH
27897: CALL_OW 81
27901: PUSH
27902: LD_INT 2
27904: EQUAL
27905: AND
27906: IFFALSE 27920
// begin side := i ;
27908: LD_ADDR_VAR 0 3
27912: PUSH
27913: LD_VAR 0 1
27917: ST_TO_ADDR
// break ;
27918: GO 27922
// end ;
27920: GO 27873
27922: POP
27923: POP
// if not side then
27924: LD_VAR 0 3
27928: NOT
27929: IFFALSE 27933
// exit ;
27931: GO 27978
// for i := 1 to tmp do
27933: LD_ADDR_VAR 0 1
27937: PUSH
27938: DOUBLE
27939: LD_INT 1
27941: DEC
27942: ST_TO_ADDR
27943: LD_VAR 0 2
27947: PUSH
27948: FOR_TO
27949: IFFALSE 27976
// if Prob ( 60 ) then
27951: LD_INT 60
27953: PPUSH
27954: CALL_OW 13
27958: IFFALSE 27974
// SetSide ( i , side ) ;
27960: LD_VAR 0 1
27964: PPUSH
27965: LD_VAR 0 3
27969: PPUSH
27970: CALL_OW 235
27974: GO 27948
27976: POP
27977: POP
// end ;
27978: PPOPN 3
27980: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27981: LD_EXP 50
27985: PUSH
27986: LD_EXP 63
27990: AND
27991: IFFALSE 28110
27993: GO 27995
27995: DISABLE
27996: LD_INT 0
27998: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27999: LD_ADDR_VAR 0 1
28003: PUSH
28004: LD_INT 22
28006: PUSH
28007: LD_OWVAR 2
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 21
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 3
28028: PUSH
28029: LD_INT 23
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: PPUSH
28048: CALL_OW 69
28052: PUSH
28053: FOR_IN
28054: IFFALSE 28108
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28056: LD_VAR 0 1
28060: PPUSH
28061: CALL_OW 257
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: LD_INT 3
28074: PUSH
28075: LD_INT 4
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: IN
28084: IFFALSE 28106
// SetClass ( un , rand ( 1 , 4 ) ) ;
28086: LD_VAR 0 1
28090: PPUSH
28091: LD_INT 1
28093: PPUSH
28094: LD_INT 4
28096: PPUSH
28097: CALL_OW 12
28101: PPUSH
28102: CALL_OW 336
28106: GO 28053
28108: POP
28109: POP
// end ;
28110: PPOPN 1
28112: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28113: LD_EXP 50
28117: PUSH
28118: LD_EXP 62
28122: AND
28123: IFFALSE 28202
28125: GO 28127
28127: DISABLE
28128: LD_INT 0
28130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28131: LD_ADDR_VAR 0 1
28135: PUSH
28136: LD_INT 22
28138: PUSH
28139: LD_OWVAR 2
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 21
28150: PUSH
28151: LD_INT 3
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PPUSH
28162: CALL_OW 69
28166: ST_TO_ADDR
// if not tmp then
28167: LD_VAR 0 1
28171: NOT
28172: IFFALSE 28176
// exit ;
28174: GO 28202
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28176: LD_VAR 0 1
28180: PUSH
28181: LD_INT 1
28183: PPUSH
28184: LD_VAR 0 1
28188: PPUSH
28189: CALL_OW 12
28193: ARRAY
28194: PPUSH
28195: LD_INT 100
28197: PPUSH
28198: CALL_OW 234
// end ;
28202: PPOPN 1
28204: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28205: LD_EXP 50
28209: PUSH
28210: LD_EXP 64
28214: AND
28215: IFFALSE 28313
28217: GO 28219
28219: DISABLE
28220: LD_INT 0
28222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28223: LD_ADDR_VAR 0 1
28227: PUSH
28228: LD_INT 22
28230: PUSH
28231: LD_OWVAR 2
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 21
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PPUSH
28254: CALL_OW 69
28258: ST_TO_ADDR
// if not tmp then
28259: LD_VAR 0 1
28263: NOT
28264: IFFALSE 28268
// exit ;
28266: GO 28313
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28268: LD_VAR 0 1
28272: PUSH
28273: LD_INT 1
28275: PPUSH
28276: LD_VAR 0 1
28280: PPUSH
28281: CALL_OW 12
28285: ARRAY
28286: PPUSH
28287: LD_INT 1
28289: PPUSH
28290: LD_INT 4
28292: PPUSH
28293: CALL_OW 12
28297: PPUSH
28298: LD_INT 3000
28300: PPUSH
28301: LD_INT 9000
28303: PPUSH
28304: CALL_OW 12
28308: PPUSH
28309: CALL_OW 492
// end ;
28313: PPOPN 1
28315: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28316: LD_EXP 50
28320: PUSH
28321: LD_EXP 65
28325: AND
28326: IFFALSE 28346
28328: GO 28330
28330: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28331: LD_INT 1
28333: PPUSH
28334: LD_OWVAR 2
28338: PPUSH
28339: LD_INT 0
28341: PPUSH
28342: CALL_OW 324
28346: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28347: LD_EXP 50
28351: PUSH
28352: LD_EXP 66
28356: AND
28357: IFFALSE 28440
28359: GO 28361
28361: DISABLE
28362: LD_INT 0
28364: PPUSH
28365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28366: LD_ADDR_VAR 0 2
28370: PUSH
28371: LD_INT 22
28373: PUSH
28374: LD_OWVAR 2
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 21
28385: PUSH
28386: LD_INT 3
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PPUSH
28397: CALL_OW 69
28401: ST_TO_ADDR
// if not tmp then
28402: LD_VAR 0 2
28406: NOT
28407: IFFALSE 28411
// exit ;
28409: GO 28440
// for i in tmp do
28411: LD_ADDR_VAR 0 1
28415: PUSH
28416: LD_VAR 0 2
28420: PUSH
28421: FOR_IN
28422: IFFALSE 28438
// SetBLevel ( i , 10 ) ;
28424: LD_VAR 0 1
28428: PPUSH
28429: LD_INT 10
28431: PPUSH
28432: CALL_OW 241
28436: GO 28421
28438: POP
28439: POP
// end ;
28440: PPOPN 2
28442: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28443: LD_EXP 50
28447: PUSH
28448: LD_EXP 67
28452: AND
28453: IFFALSE 28564
28455: GO 28457
28457: DISABLE
28458: LD_INT 0
28460: PPUSH
28461: PPUSH
28462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28463: LD_ADDR_VAR 0 3
28467: PUSH
28468: LD_INT 22
28470: PUSH
28471: LD_OWVAR 2
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 25
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PPUSH
28494: CALL_OW 69
28498: ST_TO_ADDR
// if not tmp then
28499: LD_VAR 0 3
28503: NOT
28504: IFFALSE 28508
// exit ;
28506: GO 28564
// un := tmp [ rand ( 1 , tmp ) ] ;
28508: LD_ADDR_VAR 0 2
28512: PUSH
28513: LD_VAR 0 3
28517: PUSH
28518: LD_INT 1
28520: PPUSH
28521: LD_VAR 0 3
28525: PPUSH
28526: CALL_OW 12
28530: ARRAY
28531: ST_TO_ADDR
// if Crawls ( un ) then
28532: LD_VAR 0 2
28536: PPUSH
28537: CALL_OW 318
28541: IFFALSE 28552
// ComWalk ( un ) ;
28543: LD_VAR 0 2
28547: PPUSH
28548: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28552: LD_VAR 0 2
28556: PPUSH
28557: LD_INT 5
28559: PPUSH
28560: CALL_OW 336
// end ;
28564: PPOPN 3
28566: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28567: LD_EXP 50
28571: PUSH
28572: LD_EXP 68
28576: AND
28577: PUSH
28578: LD_OWVAR 67
28582: PUSH
28583: LD_INT 4
28585: LESS
28586: AND
28587: IFFALSE 28606
28589: GO 28591
28591: DISABLE
// begin Difficulty := Difficulty + 1 ;
28592: LD_ADDR_OWVAR 67
28596: PUSH
28597: LD_OWVAR 67
28601: PUSH
28602: LD_INT 1
28604: PLUS
28605: ST_TO_ADDR
// end ;
28606: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28607: LD_EXP 50
28611: PUSH
28612: LD_EXP 69
28616: AND
28617: IFFALSE 28720
28619: GO 28621
28621: DISABLE
28622: LD_INT 0
28624: PPUSH
// begin for i := 1 to 5 do
28625: LD_ADDR_VAR 0 1
28629: PUSH
28630: DOUBLE
28631: LD_INT 1
28633: DEC
28634: ST_TO_ADDR
28635: LD_INT 5
28637: PUSH
28638: FOR_TO
28639: IFFALSE 28718
// begin uc_nation := nation_nature ;
28641: LD_ADDR_OWVAR 21
28645: PUSH
28646: LD_INT 0
28648: ST_TO_ADDR
// uc_side := 0 ;
28649: LD_ADDR_OWVAR 20
28653: PUSH
28654: LD_INT 0
28656: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28657: LD_ADDR_OWVAR 29
28661: PUSH
28662: LD_INT 12
28664: PUSH
28665: LD_INT 12
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: ST_TO_ADDR
// hc_agressivity := 20 ;
28672: LD_ADDR_OWVAR 35
28676: PUSH
28677: LD_INT 20
28679: ST_TO_ADDR
// hc_class := class_tiger ;
28680: LD_ADDR_OWVAR 28
28684: PUSH
28685: LD_INT 14
28687: ST_TO_ADDR
// hc_gallery :=  ;
28688: LD_ADDR_OWVAR 33
28692: PUSH
28693: LD_STRING 
28695: ST_TO_ADDR
// hc_name :=  ;
28696: LD_ADDR_OWVAR 26
28700: PUSH
28701: LD_STRING 
28703: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28704: CALL_OW 44
28708: PPUSH
28709: LD_INT 0
28711: PPUSH
28712: CALL_OW 51
// end ;
28716: GO 28638
28718: POP
28719: POP
// end ;
28720: PPOPN 1
28722: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28723: LD_EXP 50
28727: PUSH
28728: LD_EXP 70
28732: AND
28733: IFFALSE 28742
28735: GO 28737
28737: DISABLE
// StreamSibBomb ;
28738: CALL 28743 0 0
28742: END
// export function StreamSibBomb ; var i , x , y ; begin
28743: LD_INT 0
28745: PPUSH
28746: PPUSH
28747: PPUSH
28748: PPUSH
// result := false ;
28749: LD_ADDR_VAR 0 1
28753: PUSH
28754: LD_INT 0
28756: ST_TO_ADDR
// for i := 1 to 16 do
28757: LD_ADDR_VAR 0 2
28761: PUSH
28762: DOUBLE
28763: LD_INT 1
28765: DEC
28766: ST_TO_ADDR
28767: LD_INT 16
28769: PUSH
28770: FOR_TO
28771: IFFALSE 28970
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28773: LD_ADDR_VAR 0 3
28777: PUSH
28778: LD_INT 10
28780: PUSH
28781: LD_INT 20
28783: PUSH
28784: LD_INT 30
28786: PUSH
28787: LD_INT 40
28789: PUSH
28790: LD_INT 50
28792: PUSH
28793: LD_INT 60
28795: PUSH
28796: LD_INT 70
28798: PUSH
28799: LD_INT 80
28801: PUSH
28802: LD_INT 90
28804: PUSH
28805: LD_INT 100
28807: PUSH
28808: LD_INT 110
28810: PUSH
28811: LD_INT 120
28813: PUSH
28814: LD_INT 130
28816: PUSH
28817: LD_INT 140
28819: PUSH
28820: LD_INT 150
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 1
28842: PPUSH
28843: LD_INT 15
28845: PPUSH
28846: CALL_OW 12
28850: ARRAY
28851: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28852: LD_ADDR_VAR 0 4
28856: PUSH
28857: LD_INT 10
28859: PUSH
28860: LD_INT 20
28862: PUSH
28863: LD_INT 30
28865: PUSH
28866: LD_INT 40
28868: PUSH
28869: LD_INT 50
28871: PUSH
28872: LD_INT 60
28874: PUSH
28875: LD_INT 70
28877: PUSH
28878: LD_INT 80
28880: PUSH
28881: LD_INT 90
28883: PUSH
28884: LD_INT 100
28886: PUSH
28887: LD_INT 110
28889: PUSH
28890: LD_INT 120
28892: PUSH
28893: LD_INT 130
28895: PUSH
28896: LD_INT 140
28898: PUSH
28899: LD_INT 150
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: PPUSH
28922: LD_INT 15
28924: PPUSH
28925: CALL_OW 12
28929: ARRAY
28930: ST_TO_ADDR
// if ValidHex ( x , y ) then
28931: LD_VAR 0 3
28935: PPUSH
28936: LD_VAR 0 4
28940: PPUSH
28941: CALL_OW 488
28945: IFFALSE 28968
// begin result := [ x , y ] ;
28947: LD_ADDR_VAR 0 1
28951: PUSH
28952: LD_VAR 0 3
28956: PUSH
28957: LD_VAR 0 4
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: ST_TO_ADDR
// break ;
28966: GO 28970
// end ; end ;
28968: GO 28770
28970: POP
28971: POP
// if result then
28972: LD_VAR 0 1
28976: IFFALSE 29036
// begin ToLua ( playSibBomb() ) ;
28978: LD_STRING playSibBomb()
28980: PPUSH
28981: CALL_OW 559
// wait ( 0 0$14 ) ;
28985: LD_INT 490
28987: PPUSH
28988: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28992: LD_VAR 0 1
28996: PUSH
28997: LD_INT 1
28999: ARRAY
29000: PPUSH
29001: LD_VAR 0 1
29005: PUSH
29006: LD_INT 2
29008: ARRAY
29009: PPUSH
29010: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29014: LD_VAR 0 1
29018: PUSH
29019: LD_INT 1
29021: ARRAY
29022: PPUSH
29023: LD_VAR 0 1
29027: PUSH
29028: LD_INT 2
29030: ARRAY
29031: PPUSH
29032: CALL_OW 429
// end ; end ;
29036: LD_VAR 0 1
29040: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29041: LD_EXP 50
29045: PUSH
29046: LD_EXP 72
29050: AND
29051: IFFALSE 29063
29053: GO 29055
29055: DISABLE
// YouLost (  ) ;
29056: LD_STRING 
29058: PPUSH
29059: CALL_OW 104
29063: END
// every 0 0$1 trigger StreamModeActive and sFog do
29064: LD_EXP 50
29068: PUSH
29069: LD_EXP 71
29073: AND
29074: IFFALSE 29088
29076: GO 29078
29078: DISABLE
// FogOff ( your_side ) ;
29079: LD_OWVAR 2
29083: PPUSH
29084: CALL_OW 344
29088: END
// every 0 0$1 trigger StreamModeActive and sSun do
29089: LD_EXP 50
29093: PUSH
29094: LD_EXP 73
29098: AND
29099: IFFALSE 29127
29101: GO 29103
29103: DISABLE
// begin solar_recharge_percent := 0 ;
29104: LD_ADDR_OWVAR 79
29108: PUSH
29109: LD_INT 0
29111: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29112: LD_INT 10500
29114: PPUSH
29115: CALL_OW 67
// solar_recharge_percent := 100 ;
29119: LD_ADDR_OWVAR 79
29123: PUSH
29124: LD_INT 100
29126: ST_TO_ADDR
// end ;
29127: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29128: LD_EXP 50
29132: PUSH
29133: LD_EXP 74
29137: AND
29138: IFFALSE 29377
29140: GO 29142
29142: DISABLE
29143: LD_INT 0
29145: PPUSH
29146: PPUSH
29147: PPUSH
// begin tmp := [ ] ;
29148: LD_ADDR_VAR 0 3
29152: PUSH
29153: EMPTY
29154: ST_TO_ADDR
// for i := 1 to 6 do
29155: LD_ADDR_VAR 0 1
29159: PUSH
29160: DOUBLE
29161: LD_INT 1
29163: DEC
29164: ST_TO_ADDR
29165: LD_INT 6
29167: PUSH
29168: FOR_TO
29169: IFFALSE 29274
// begin uc_nation := nation_nature ;
29171: LD_ADDR_OWVAR 21
29175: PUSH
29176: LD_INT 0
29178: ST_TO_ADDR
// uc_side := 0 ;
29179: LD_ADDR_OWVAR 20
29183: PUSH
29184: LD_INT 0
29186: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29187: LD_ADDR_OWVAR 29
29191: PUSH
29192: LD_INT 12
29194: PUSH
29195: LD_INT 12
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: ST_TO_ADDR
// hc_agressivity := 20 ;
29202: LD_ADDR_OWVAR 35
29206: PUSH
29207: LD_INT 20
29209: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29210: LD_ADDR_OWVAR 28
29214: PUSH
29215: LD_INT 17
29217: ST_TO_ADDR
// hc_gallery :=  ;
29218: LD_ADDR_OWVAR 33
29222: PUSH
29223: LD_STRING 
29225: ST_TO_ADDR
// hc_name :=  ;
29226: LD_ADDR_OWVAR 26
29230: PUSH
29231: LD_STRING 
29233: ST_TO_ADDR
// un := CreateHuman ;
29234: LD_ADDR_VAR 0 2
29238: PUSH
29239: CALL_OW 44
29243: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29244: LD_VAR 0 2
29248: PPUSH
29249: LD_INT 1
29251: PPUSH
29252: CALL_OW 51
// tmp := tmp ^ un ;
29256: LD_ADDR_VAR 0 3
29260: PUSH
29261: LD_VAR 0 3
29265: PUSH
29266: LD_VAR 0 2
29270: ADD
29271: ST_TO_ADDR
// end ;
29272: GO 29168
29274: POP
29275: POP
// repeat wait ( 0 0$1 ) ;
29276: LD_INT 35
29278: PPUSH
29279: CALL_OW 67
// for un in tmp do
29283: LD_ADDR_VAR 0 2
29287: PUSH
29288: LD_VAR 0 3
29292: PUSH
29293: FOR_IN
29294: IFFALSE 29368
// begin if IsDead ( un ) then
29296: LD_VAR 0 2
29300: PPUSH
29301: CALL_OW 301
29305: IFFALSE 29325
// begin tmp := tmp diff un ;
29307: LD_ADDR_VAR 0 3
29311: PUSH
29312: LD_VAR 0 3
29316: PUSH
29317: LD_VAR 0 2
29321: DIFF
29322: ST_TO_ADDR
// continue ;
29323: GO 29293
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29325: LD_VAR 0 2
29329: PPUSH
29330: LD_INT 3
29332: PUSH
29333: LD_INT 22
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PPUSH
29347: CALL_OW 69
29351: PPUSH
29352: LD_VAR 0 2
29356: PPUSH
29357: CALL_OW 74
29361: PPUSH
29362: CALL_OW 115
// end ;
29366: GO 29293
29368: POP
29369: POP
// until not tmp ;
29370: LD_VAR 0 3
29374: NOT
29375: IFFALSE 29276
// end ;
29377: PPOPN 3
29379: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29380: LD_EXP 50
29384: PUSH
29385: LD_EXP 75
29389: AND
29390: IFFALSE 29444
29392: GO 29394
29394: DISABLE
// begin ToLua ( displayTroll(); ) ;
29395: LD_STRING displayTroll();
29397: PPUSH
29398: CALL_OW 559
// wait ( 3 3$00 ) ;
29402: LD_INT 6300
29404: PPUSH
29405: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29409: LD_STRING hideTroll();
29411: PPUSH
29412: CALL_OW 559
// wait ( 1 1$00 ) ;
29416: LD_INT 2100
29418: PPUSH
29419: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29423: LD_STRING displayTroll();
29425: PPUSH
29426: CALL_OW 559
// wait ( 1 1$00 ) ;
29430: LD_INT 2100
29432: PPUSH
29433: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29437: LD_STRING hideTroll();
29439: PPUSH
29440: CALL_OW 559
// end ;
29444: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29445: LD_EXP 50
29449: PUSH
29450: LD_EXP 76
29454: AND
29455: IFFALSE 29518
29457: GO 29459
29459: DISABLE
29460: LD_INT 0
29462: PPUSH
// begin p := 0 ;
29463: LD_ADDR_VAR 0 1
29467: PUSH
29468: LD_INT 0
29470: ST_TO_ADDR
// repeat game_speed := 1 ;
29471: LD_ADDR_OWVAR 65
29475: PUSH
29476: LD_INT 1
29478: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29479: LD_INT 35
29481: PPUSH
29482: CALL_OW 67
// p := p + 1 ;
29486: LD_ADDR_VAR 0 1
29490: PUSH
29491: LD_VAR 0 1
29495: PUSH
29496: LD_INT 1
29498: PLUS
29499: ST_TO_ADDR
// until p >= 60 ;
29500: LD_VAR 0 1
29504: PUSH
29505: LD_INT 60
29507: GREATEREQUAL
29508: IFFALSE 29471
// game_speed := 4 ;
29510: LD_ADDR_OWVAR 65
29514: PUSH
29515: LD_INT 4
29517: ST_TO_ADDR
// end ;
29518: PPOPN 1
29520: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29521: LD_EXP 50
29525: PUSH
29526: LD_EXP 77
29530: AND
29531: IFFALSE 29677
29533: GO 29535
29535: DISABLE
29536: LD_INT 0
29538: PPUSH
29539: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29540: LD_ADDR_VAR 0 1
29544: PUSH
29545: LD_INT 22
29547: PUSH
29548: LD_OWVAR 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 2
29559: PUSH
29560: LD_INT 30
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 30
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PPUSH
29589: CALL_OW 69
29593: ST_TO_ADDR
// if not depot then
29594: LD_VAR 0 1
29598: NOT
29599: IFFALSE 29603
// exit ;
29601: GO 29677
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29603: LD_ADDR_VAR 0 2
29607: PUSH
29608: LD_VAR 0 1
29612: PUSH
29613: LD_INT 1
29615: PPUSH
29616: LD_VAR 0 1
29620: PPUSH
29621: CALL_OW 12
29625: ARRAY
29626: PPUSH
29627: CALL_OW 274
29631: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29632: LD_VAR 0 2
29636: PPUSH
29637: LD_INT 1
29639: PPUSH
29640: LD_INT 0
29642: PPUSH
29643: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29647: LD_VAR 0 2
29651: PPUSH
29652: LD_INT 2
29654: PPUSH
29655: LD_INT 0
29657: PPUSH
29658: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29662: LD_VAR 0 2
29666: PPUSH
29667: LD_INT 3
29669: PPUSH
29670: LD_INT 0
29672: PPUSH
29673: CALL_OW 277
// end ;
29677: PPOPN 2
29679: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29680: LD_EXP 50
29684: PUSH
29685: LD_EXP 78
29689: AND
29690: IFFALSE 29787
29692: GO 29694
29694: DISABLE
29695: LD_INT 0
29697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29698: LD_ADDR_VAR 0 1
29702: PUSH
29703: LD_INT 22
29705: PUSH
29706: LD_OWVAR 2
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 21
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 3
29727: PUSH
29728: LD_INT 23
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: LIST
29746: PPUSH
29747: CALL_OW 69
29751: ST_TO_ADDR
// if not tmp then
29752: LD_VAR 0 1
29756: NOT
29757: IFFALSE 29761
// exit ;
29759: GO 29787
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29761: LD_VAR 0 1
29765: PUSH
29766: LD_INT 1
29768: PPUSH
29769: LD_VAR 0 1
29773: PPUSH
29774: CALL_OW 12
29778: ARRAY
29779: PPUSH
29780: LD_INT 200
29782: PPUSH
29783: CALL_OW 234
// end ;
29787: PPOPN 1
29789: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29790: LD_EXP 50
29794: PUSH
29795: LD_EXP 79
29799: AND
29800: IFFALSE 29879
29802: GO 29804
29804: DISABLE
29805: LD_INT 0
29807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29808: LD_ADDR_VAR 0 1
29812: PUSH
29813: LD_INT 22
29815: PUSH
29816: LD_OWVAR 2
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 21
29827: PUSH
29828: LD_INT 2
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PPUSH
29839: CALL_OW 69
29843: ST_TO_ADDR
// if not tmp then
29844: LD_VAR 0 1
29848: NOT
29849: IFFALSE 29853
// exit ;
29851: GO 29879
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29853: LD_VAR 0 1
29857: PUSH
29858: LD_INT 1
29860: PPUSH
29861: LD_VAR 0 1
29865: PPUSH
29866: CALL_OW 12
29870: ARRAY
29871: PPUSH
29872: LD_INT 60
29874: PPUSH
29875: CALL_OW 234
// end ;
29879: PPOPN 1
29881: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29882: LD_EXP 50
29886: PUSH
29887: LD_EXP 80
29891: AND
29892: IFFALSE 29991
29894: GO 29896
29896: DISABLE
29897: LD_INT 0
29899: PPUSH
29900: PPUSH
// begin enable ;
29901: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29902: LD_ADDR_VAR 0 1
29906: PUSH
29907: LD_INT 22
29909: PUSH
29910: LD_OWVAR 2
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 61
29921: PUSH
29922: EMPTY
29923: LIST
29924: PUSH
29925: LD_INT 33
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PPUSH
29940: CALL_OW 69
29944: ST_TO_ADDR
// if not tmp then
29945: LD_VAR 0 1
29949: NOT
29950: IFFALSE 29954
// exit ;
29952: GO 29991
// for i in tmp do
29954: LD_ADDR_VAR 0 2
29958: PUSH
29959: LD_VAR 0 1
29963: PUSH
29964: FOR_IN
29965: IFFALSE 29989
// if IsControledBy ( i ) then
29967: LD_VAR 0 2
29971: PPUSH
29972: CALL_OW 312
29976: IFFALSE 29987
// ComUnlink ( i ) ;
29978: LD_VAR 0 2
29982: PPUSH
29983: CALL_OW 136
29987: GO 29964
29989: POP
29990: POP
// end ;
29991: PPOPN 2
29993: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29994: LD_EXP 50
29998: PUSH
29999: LD_EXP 81
30003: AND
30004: IFFALSE 30144
30006: GO 30008
30008: DISABLE
30009: LD_INT 0
30011: PPUSH
30012: PPUSH
// begin ToLua ( displayPowell(); ) ;
30013: LD_STRING displayPowell();
30015: PPUSH
30016: CALL_OW 559
// uc_side := 0 ;
30020: LD_ADDR_OWVAR 20
30024: PUSH
30025: LD_INT 0
30027: ST_TO_ADDR
// uc_nation := 2 ;
30028: LD_ADDR_OWVAR 21
30032: PUSH
30033: LD_INT 2
30035: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30036: LD_ADDR_OWVAR 37
30040: PUSH
30041: LD_INT 14
30043: ST_TO_ADDR
// vc_engine := engine_siberite ;
30044: LD_ADDR_OWVAR 39
30048: PUSH
30049: LD_INT 3
30051: ST_TO_ADDR
// vc_control := control_apeman ;
30052: LD_ADDR_OWVAR 38
30056: PUSH
30057: LD_INT 5
30059: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30060: LD_ADDR_OWVAR 40
30064: PUSH
30065: LD_INT 29
30067: ST_TO_ADDR
// un := CreateVehicle ;
30068: LD_ADDR_VAR 0 2
30072: PUSH
30073: CALL_OW 45
30077: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30078: LD_VAR 0 2
30082: PPUSH
30083: LD_INT 1
30085: PPUSH
30086: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30090: LD_INT 35
30092: PPUSH
30093: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30097: LD_VAR 0 2
30101: PPUSH
30102: LD_INT 22
30104: PUSH
30105: LD_OWVAR 2
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PPUSH
30114: CALL_OW 69
30118: PPUSH
30119: LD_VAR 0 2
30123: PPUSH
30124: CALL_OW 74
30128: PPUSH
30129: CALL_OW 115
// until IsDead ( un ) ;
30133: LD_VAR 0 2
30137: PPUSH
30138: CALL_OW 301
30142: IFFALSE 30090
// end ;
30144: PPOPN 2
30146: END
// every 0 0$1 trigger StreamModeActive and sStu do
30147: LD_EXP 50
30151: PUSH
30152: LD_EXP 89
30156: AND
30157: IFFALSE 30173
30159: GO 30161
30161: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30162: LD_STRING displayStucuk();
30164: PPUSH
30165: CALL_OW 559
// ResetFog ;
30169: CALL_OW 335
// end ;
30173: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30174: LD_EXP 50
30178: PUSH
30179: LD_EXP 82
30183: AND
30184: IFFALSE 30325
30186: GO 30188
30188: DISABLE
30189: LD_INT 0
30191: PPUSH
30192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30193: LD_ADDR_VAR 0 2
30197: PUSH
30198: LD_INT 22
30200: PUSH
30201: LD_OWVAR 2
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 21
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PPUSH
30224: CALL_OW 69
30228: ST_TO_ADDR
// if not tmp then
30229: LD_VAR 0 2
30233: NOT
30234: IFFALSE 30238
// exit ;
30236: GO 30325
// un := tmp [ rand ( 1 , tmp ) ] ;
30238: LD_ADDR_VAR 0 1
30242: PUSH
30243: LD_VAR 0 2
30247: PUSH
30248: LD_INT 1
30250: PPUSH
30251: LD_VAR 0 2
30255: PPUSH
30256: CALL_OW 12
30260: ARRAY
30261: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30262: LD_VAR 0 1
30266: PPUSH
30267: LD_INT 0
30269: PPUSH
30270: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30274: LD_VAR 0 1
30278: PPUSH
30279: LD_OWVAR 3
30283: PUSH
30284: LD_VAR 0 1
30288: DIFF
30289: PPUSH
30290: LD_VAR 0 1
30294: PPUSH
30295: CALL_OW 74
30299: PPUSH
30300: CALL_OW 115
// wait ( 0 0$20 ) ;
30304: LD_INT 700
30306: PPUSH
30307: CALL_OW 67
// SetSide ( un , your_side ) ;
30311: LD_VAR 0 1
30315: PPUSH
30316: LD_OWVAR 2
30320: PPUSH
30321: CALL_OW 235
// end ;
30325: PPOPN 2
30327: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30328: LD_EXP 50
30332: PUSH
30333: LD_EXP 83
30337: AND
30338: IFFALSE 30444
30340: GO 30342
30342: DISABLE
30343: LD_INT 0
30345: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30346: LD_ADDR_VAR 0 1
30350: PUSH
30351: LD_INT 22
30353: PUSH
30354: LD_OWVAR 2
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 2
30365: PUSH
30366: LD_INT 30
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 30
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: LIST
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PPUSH
30395: CALL_OW 69
30399: ST_TO_ADDR
// if not depot then
30400: LD_VAR 0 1
30404: NOT
30405: IFFALSE 30409
// exit ;
30407: GO 30444
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30409: LD_VAR 0 1
30413: PUSH
30414: LD_INT 1
30416: ARRAY
30417: PPUSH
30418: CALL_OW 250
30422: PPUSH
30423: LD_VAR 0 1
30427: PUSH
30428: LD_INT 1
30430: ARRAY
30431: PPUSH
30432: CALL_OW 251
30436: PPUSH
30437: LD_INT 70
30439: PPUSH
30440: CALL_OW 495
// end ;
30444: PPOPN 1
30446: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30447: LD_EXP 50
30451: PUSH
30452: LD_EXP 84
30456: AND
30457: IFFALSE 30668
30459: GO 30461
30461: DISABLE
30462: LD_INT 0
30464: PPUSH
30465: PPUSH
30466: PPUSH
30467: PPUSH
30468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30469: LD_ADDR_VAR 0 5
30473: PUSH
30474: LD_INT 22
30476: PUSH
30477: LD_OWVAR 2
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 21
30488: PUSH
30489: LD_INT 1
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PPUSH
30500: CALL_OW 69
30504: ST_TO_ADDR
// if not tmp then
30505: LD_VAR 0 5
30509: NOT
30510: IFFALSE 30514
// exit ;
30512: GO 30668
// for i in tmp do
30514: LD_ADDR_VAR 0 1
30518: PUSH
30519: LD_VAR 0 5
30523: PUSH
30524: FOR_IN
30525: IFFALSE 30666
// begin d := rand ( 0 , 5 ) ;
30527: LD_ADDR_VAR 0 4
30531: PUSH
30532: LD_INT 0
30534: PPUSH
30535: LD_INT 5
30537: PPUSH
30538: CALL_OW 12
30542: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30543: LD_ADDR_VAR 0 2
30547: PUSH
30548: LD_VAR 0 1
30552: PPUSH
30553: CALL_OW 250
30557: PPUSH
30558: LD_VAR 0 4
30562: PPUSH
30563: LD_INT 3
30565: PPUSH
30566: LD_INT 12
30568: PPUSH
30569: CALL_OW 12
30573: PPUSH
30574: CALL_OW 272
30578: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30579: LD_ADDR_VAR 0 3
30583: PUSH
30584: LD_VAR 0 1
30588: PPUSH
30589: CALL_OW 251
30593: PPUSH
30594: LD_VAR 0 4
30598: PPUSH
30599: LD_INT 3
30601: PPUSH
30602: LD_INT 12
30604: PPUSH
30605: CALL_OW 12
30609: PPUSH
30610: CALL_OW 273
30614: ST_TO_ADDR
// if ValidHex ( x , y ) then
30615: LD_VAR 0 2
30619: PPUSH
30620: LD_VAR 0 3
30624: PPUSH
30625: CALL_OW 488
30629: IFFALSE 30664
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30631: LD_VAR 0 1
30635: PPUSH
30636: LD_VAR 0 2
30640: PPUSH
30641: LD_VAR 0 3
30645: PPUSH
30646: LD_INT 3
30648: PPUSH
30649: LD_INT 6
30651: PPUSH
30652: CALL_OW 12
30656: PPUSH
30657: LD_INT 1
30659: PPUSH
30660: CALL_OW 483
// end ;
30664: GO 30524
30666: POP
30667: POP
// end ;
30668: PPOPN 5
30670: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30671: LD_EXP 50
30675: PUSH
30676: LD_EXP 85
30680: AND
30681: IFFALSE 30775
30683: GO 30685
30685: DISABLE
30686: LD_INT 0
30688: PPUSH
30689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30690: LD_ADDR_VAR 0 2
30694: PUSH
30695: LD_INT 22
30697: PUSH
30698: LD_OWVAR 2
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 32
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 21
30719: PUSH
30720: LD_INT 2
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: LIST
30731: PPUSH
30732: CALL_OW 69
30736: ST_TO_ADDR
// if not tmp then
30737: LD_VAR 0 2
30741: NOT
30742: IFFALSE 30746
// exit ;
30744: GO 30775
// for i in tmp do
30746: LD_ADDR_VAR 0 1
30750: PUSH
30751: LD_VAR 0 2
30755: PUSH
30756: FOR_IN
30757: IFFALSE 30773
// SetFuel ( i , 0 ) ;
30759: LD_VAR 0 1
30763: PPUSH
30764: LD_INT 0
30766: PPUSH
30767: CALL_OW 240
30771: GO 30756
30773: POP
30774: POP
// end ;
30775: PPOPN 2
30777: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30778: LD_EXP 50
30782: PUSH
30783: LD_EXP 86
30787: AND
30788: IFFALSE 30854
30790: GO 30792
30792: DISABLE
30793: LD_INT 0
30795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30796: LD_ADDR_VAR 0 1
30800: PUSH
30801: LD_INT 22
30803: PUSH
30804: LD_OWVAR 2
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 30
30815: PUSH
30816: LD_INT 29
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PPUSH
30827: CALL_OW 69
30831: ST_TO_ADDR
// if not tmp then
30832: LD_VAR 0 1
30836: NOT
30837: IFFALSE 30841
// exit ;
30839: GO 30854
// DestroyUnit ( tmp [ 1 ] ) ;
30841: LD_VAR 0 1
30845: PUSH
30846: LD_INT 1
30848: ARRAY
30849: PPUSH
30850: CALL_OW 65
// end ;
30854: PPOPN 1
30856: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30857: LD_EXP 50
30861: PUSH
30862: LD_EXP 88
30866: AND
30867: IFFALSE 30996
30869: GO 30871
30871: DISABLE
30872: LD_INT 0
30874: PPUSH
// begin uc_side := 0 ;
30875: LD_ADDR_OWVAR 20
30879: PUSH
30880: LD_INT 0
30882: ST_TO_ADDR
// uc_nation := nation_arabian ;
30883: LD_ADDR_OWVAR 21
30887: PUSH
30888: LD_INT 2
30890: ST_TO_ADDR
// hc_gallery :=  ;
30891: LD_ADDR_OWVAR 33
30895: PUSH
30896: LD_STRING 
30898: ST_TO_ADDR
// hc_name :=  ;
30899: LD_ADDR_OWVAR 26
30903: PUSH
30904: LD_STRING 
30906: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30907: LD_INT 1
30909: PPUSH
30910: LD_INT 11
30912: PPUSH
30913: LD_INT 10
30915: PPUSH
30916: CALL_OW 380
// un := CreateHuman ;
30920: LD_ADDR_VAR 0 1
30924: PUSH
30925: CALL_OW 44
30929: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30930: LD_VAR 0 1
30934: PPUSH
30935: LD_INT 1
30937: PPUSH
30938: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30942: LD_INT 35
30944: PPUSH
30945: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30949: LD_VAR 0 1
30953: PPUSH
30954: LD_INT 22
30956: PUSH
30957: LD_OWVAR 2
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PPUSH
30966: CALL_OW 69
30970: PPUSH
30971: LD_VAR 0 1
30975: PPUSH
30976: CALL_OW 74
30980: PPUSH
30981: CALL_OW 115
// until IsDead ( un ) ;
30985: LD_VAR 0 1
30989: PPUSH
30990: CALL_OW 301
30994: IFFALSE 30942
// end ;
30996: PPOPN 1
30998: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30999: LD_EXP 50
31003: PUSH
31004: LD_EXP 90
31008: AND
31009: IFFALSE 31021
31011: GO 31013
31013: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31014: LD_STRING earthquake(getX(game), 0, 32)
31016: PPUSH
31017: CALL_OW 559
31021: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31022: LD_EXP 50
31026: PUSH
31027: LD_EXP 91
31031: AND
31032: IFFALSE 31123
31034: GO 31036
31036: DISABLE
31037: LD_INT 0
31039: PPUSH
// begin enable ;
31040: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31041: LD_ADDR_VAR 0 1
31045: PUSH
31046: LD_INT 22
31048: PUSH
31049: LD_OWVAR 2
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 21
31060: PUSH
31061: LD_INT 2
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 33
31070: PUSH
31071: LD_INT 3
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: PPUSH
31083: CALL_OW 69
31087: ST_TO_ADDR
// if not tmp then
31088: LD_VAR 0 1
31092: NOT
31093: IFFALSE 31097
// exit ;
31095: GO 31123
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31097: LD_VAR 0 1
31101: PUSH
31102: LD_INT 1
31104: PPUSH
31105: LD_VAR 0 1
31109: PPUSH
31110: CALL_OW 12
31114: ARRAY
31115: PPUSH
31116: LD_INT 1
31118: PPUSH
31119: CALL_OW 234
// end ;
31123: PPOPN 1
31125: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31126: LD_EXP 50
31130: PUSH
31131: LD_EXP 92
31135: AND
31136: IFFALSE 31277
31138: GO 31140
31140: DISABLE
31141: LD_INT 0
31143: PPUSH
31144: PPUSH
31145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31146: LD_ADDR_VAR 0 3
31150: PUSH
31151: LD_INT 22
31153: PUSH
31154: LD_OWVAR 2
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 25
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PPUSH
31177: CALL_OW 69
31181: ST_TO_ADDR
// if not tmp then
31182: LD_VAR 0 3
31186: NOT
31187: IFFALSE 31191
// exit ;
31189: GO 31277
// un := tmp [ rand ( 1 , tmp ) ] ;
31191: LD_ADDR_VAR 0 2
31195: PUSH
31196: LD_VAR 0 3
31200: PUSH
31201: LD_INT 1
31203: PPUSH
31204: LD_VAR 0 3
31208: PPUSH
31209: CALL_OW 12
31213: ARRAY
31214: ST_TO_ADDR
// if Crawls ( un ) then
31215: LD_VAR 0 2
31219: PPUSH
31220: CALL_OW 318
31224: IFFALSE 31235
// ComWalk ( un ) ;
31226: LD_VAR 0 2
31230: PPUSH
31231: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31235: LD_VAR 0 2
31239: PPUSH
31240: LD_INT 9
31242: PPUSH
31243: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31247: LD_INT 28
31249: PPUSH
31250: LD_OWVAR 2
31254: PPUSH
31255: LD_INT 2
31257: PPUSH
31258: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31262: LD_INT 29
31264: PPUSH
31265: LD_OWVAR 2
31269: PPUSH
31270: LD_INT 2
31272: PPUSH
31273: CALL_OW 322
// end ;
31277: PPOPN 3
31279: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31280: LD_EXP 50
31284: PUSH
31285: LD_EXP 93
31289: AND
31290: IFFALSE 31401
31292: GO 31294
31294: DISABLE
31295: LD_INT 0
31297: PPUSH
31298: PPUSH
31299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31300: LD_ADDR_VAR 0 3
31304: PUSH
31305: LD_INT 22
31307: PUSH
31308: LD_OWVAR 2
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 25
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PPUSH
31331: CALL_OW 69
31335: ST_TO_ADDR
// if not tmp then
31336: LD_VAR 0 3
31340: NOT
31341: IFFALSE 31345
// exit ;
31343: GO 31401
// un := tmp [ rand ( 1 , tmp ) ] ;
31345: LD_ADDR_VAR 0 2
31349: PUSH
31350: LD_VAR 0 3
31354: PUSH
31355: LD_INT 1
31357: PPUSH
31358: LD_VAR 0 3
31362: PPUSH
31363: CALL_OW 12
31367: ARRAY
31368: ST_TO_ADDR
// if Crawls ( un ) then
31369: LD_VAR 0 2
31373: PPUSH
31374: CALL_OW 318
31378: IFFALSE 31389
// ComWalk ( un ) ;
31380: LD_VAR 0 2
31384: PPUSH
31385: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31389: LD_VAR 0 2
31393: PPUSH
31394: LD_INT 8
31396: PPUSH
31397: CALL_OW 336
// end ;
31401: PPOPN 3
31403: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31404: LD_EXP 50
31408: PUSH
31409: LD_EXP 94
31413: AND
31414: IFFALSE 31558
31416: GO 31418
31418: DISABLE
31419: LD_INT 0
31421: PPUSH
31422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31423: LD_ADDR_VAR 0 2
31427: PUSH
31428: LD_INT 22
31430: PUSH
31431: LD_OWVAR 2
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 21
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: LD_INT 34
31455: PUSH
31456: LD_INT 12
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 34
31465: PUSH
31466: LD_INT 51
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 34
31475: PUSH
31476: LD_INT 32
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: PPUSH
31494: CALL_OW 69
31498: ST_TO_ADDR
// if not tmp then
31499: LD_VAR 0 2
31503: NOT
31504: IFFALSE 31508
// exit ;
31506: GO 31558
// for i in tmp do
31508: LD_ADDR_VAR 0 1
31512: PUSH
31513: LD_VAR 0 2
31517: PUSH
31518: FOR_IN
31519: IFFALSE 31556
// if GetCargo ( i , mat_artifact ) = 0 then
31521: LD_VAR 0 1
31525: PPUSH
31526: LD_INT 4
31528: PPUSH
31529: CALL_OW 289
31533: PUSH
31534: LD_INT 0
31536: EQUAL
31537: IFFALSE 31554
// SetCargo ( i , mat_siberit , 100 ) ;
31539: LD_VAR 0 1
31543: PPUSH
31544: LD_INT 3
31546: PPUSH
31547: LD_INT 100
31549: PPUSH
31550: CALL_OW 290
31554: GO 31518
31556: POP
31557: POP
// end ;
31558: PPOPN 2
31560: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31561: LD_EXP 50
31565: PUSH
31566: LD_EXP 95
31570: AND
31571: IFFALSE 31754
31573: GO 31575
31575: DISABLE
31576: LD_INT 0
31578: PPUSH
31579: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31580: LD_ADDR_VAR 0 2
31584: PUSH
31585: LD_INT 22
31587: PUSH
31588: LD_OWVAR 2
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PPUSH
31597: CALL_OW 69
31601: ST_TO_ADDR
// if not tmp then
31602: LD_VAR 0 2
31606: NOT
31607: IFFALSE 31611
// exit ;
31609: GO 31754
// for i := 1 to 2 do
31611: LD_ADDR_VAR 0 1
31615: PUSH
31616: DOUBLE
31617: LD_INT 1
31619: DEC
31620: ST_TO_ADDR
31621: LD_INT 2
31623: PUSH
31624: FOR_TO
31625: IFFALSE 31752
// begin uc_side := your_side ;
31627: LD_ADDR_OWVAR 20
31631: PUSH
31632: LD_OWVAR 2
31636: ST_TO_ADDR
// uc_nation := nation_american ;
31637: LD_ADDR_OWVAR 21
31641: PUSH
31642: LD_INT 1
31644: ST_TO_ADDR
// vc_chassis := us_morphling ;
31645: LD_ADDR_OWVAR 37
31649: PUSH
31650: LD_INT 5
31652: ST_TO_ADDR
// vc_engine := engine_siberite ;
31653: LD_ADDR_OWVAR 39
31657: PUSH
31658: LD_INT 3
31660: ST_TO_ADDR
// vc_control := control_computer ;
31661: LD_ADDR_OWVAR 38
31665: PUSH
31666: LD_INT 3
31668: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31669: LD_ADDR_OWVAR 40
31673: PUSH
31674: LD_INT 10
31676: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31677: LD_VAR 0 2
31681: PUSH
31682: LD_INT 1
31684: ARRAY
31685: PPUSH
31686: CALL_OW 310
31690: NOT
31691: IFFALSE 31738
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31693: CALL_OW 45
31697: PPUSH
31698: LD_VAR 0 2
31702: PUSH
31703: LD_INT 1
31705: ARRAY
31706: PPUSH
31707: CALL_OW 250
31711: PPUSH
31712: LD_VAR 0 2
31716: PUSH
31717: LD_INT 1
31719: ARRAY
31720: PPUSH
31721: CALL_OW 251
31725: PPUSH
31726: LD_INT 12
31728: PPUSH
31729: LD_INT 1
31731: PPUSH
31732: CALL_OW 50
31736: GO 31750
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31738: CALL_OW 45
31742: PPUSH
31743: LD_INT 1
31745: PPUSH
31746: CALL_OW 51
// end ;
31750: GO 31624
31752: POP
31753: POP
// end ;
31754: PPOPN 2
31756: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31757: LD_EXP 50
31761: PUSH
31762: LD_EXP 96
31766: AND
31767: IFFALSE 31989
31769: GO 31771
31771: DISABLE
31772: LD_INT 0
31774: PPUSH
31775: PPUSH
31776: PPUSH
31777: PPUSH
31778: PPUSH
31779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31780: LD_ADDR_VAR 0 6
31784: PUSH
31785: LD_INT 22
31787: PUSH
31788: LD_OWVAR 2
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 21
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 3
31809: PUSH
31810: LD_INT 23
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: LIST
31828: PPUSH
31829: CALL_OW 69
31833: ST_TO_ADDR
// if not tmp then
31834: LD_VAR 0 6
31838: NOT
31839: IFFALSE 31843
// exit ;
31841: GO 31989
// s1 := rand ( 1 , 4 ) ;
31843: LD_ADDR_VAR 0 2
31847: PUSH
31848: LD_INT 1
31850: PPUSH
31851: LD_INT 4
31853: PPUSH
31854: CALL_OW 12
31858: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31859: LD_ADDR_VAR 0 4
31863: PUSH
31864: LD_VAR 0 6
31868: PUSH
31869: LD_INT 1
31871: ARRAY
31872: PPUSH
31873: LD_VAR 0 2
31877: PPUSH
31878: CALL_OW 259
31882: ST_TO_ADDR
// if s1 = 1 then
31883: LD_VAR 0 2
31887: PUSH
31888: LD_INT 1
31890: EQUAL
31891: IFFALSE 31911
// s2 := rand ( 2 , 4 ) else
31893: LD_ADDR_VAR 0 3
31897: PUSH
31898: LD_INT 2
31900: PPUSH
31901: LD_INT 4
31903: PPUSH
31904: CALL_OW 12
31908: ST_TO_ADDR
31909: GO 31919
// s2 := 1 ;
31911: LD_ADDR_VAR 0 3
31915: PUSH
31916: LD_INT 1
31918: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31919: LD_ADDR_VAR 0 5
31923: PUSH
31924: LD_VAR 0 6
31928: PUSH
31929: LD_INT 1
31931: ARRAY
31932: PPUSH
31933: LD_VAR 0 3
31937: PPUSH
31938: CALL_OW 259
31942: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31943: LD_VAR 0 6
31947: PUSH
31948: LD_INT 1
31950: ARRAY
31951: PPUSH
31952: LD_VAR 0 2
31956: PPUSH
31957: LD_VAR 0 5
31961: PPUSH
31962: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31966: LD_VAR 0 6
31970: PUSH
31971: LD_INT 1
31973: ARRAY
31974: PPUSH
31975: LD_VAR 0 3
31979: PPUSH
31980: LD_VAR 0 4
31984: PPUSH
31985: CALL_OW 237
// end ;
31989: PPOPN 6
31991: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31992: LD_EXP 50
31996: PUSH
31997: LD_EXP 97
32001: AND
32002: IFFALSE 32081
32004: GO 32006
32006: DISABLE
32007: LD_INT 0
32009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32010: LD_ADDR_VAR 0 1
32014: PUSH
32015: LD_INT 22
32017: PUSH
32018: LD_OWVAR 2
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 30
32029: PUSH
32030: LD_INT 3
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PPUSH
32041: CALL_OW 69
32045: ST_TO_ADDR
// if not tmp then
32046: LD_VAR 0 1
32050: NOT
32051: IFFALSE 32055
// exit ;
32053: GO 32081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32055: LD_VAR 0 1
32059: PUSH
32060: LD_INT 1
32062: PPUSH
32063: LD_VAR 0 1
32067: PPUSH
32068: CALL_OW 12
32072: ARRAY
32073: PPUSH
32074: LD_INT 1
32076: PPUSH
32077: CALL_OW 234
// end ;
32081: PPOPN 1
32083: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32084: LD_EXP 50
32088: PUSH
32089: LD_EXP 98
32093: AND
32094: IFFALSE 32206
32096: GO 32098
32098: DISABLE
32099: LD_INT 0
32101: PPUSH
32102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32103: LD_ADDR_VAR 0 2
32107: PUSH
32108: LD_INT 22
32110: PUSH
32111: LD_OWVAR 2
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 2
32122: PUSH
32123: LD_INT 30
32125: PUSH
32126: LD_INT 27
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 30
32135: PUSH
32136: LD_INT 26
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 30
32145: PUSH
32146: LD_INT 28
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PPUSH
32163: CALL_OW 69
32167: ST_TO_ADDR
// if not tmp then
32168: LD_VAR 0 2
32172: NOT
32173: IFFALSE 32177
// exit ;
32175: GO 32206
// for i in tmp do
32177: LD_ADDR_VAR 0 1
32181: PUSH
32182: LD_VAR 0 2
32186: PUSH
32187: FOR_IN
32188: IFFALSE 32204
// SetLives ( i , 1 ) ;
32190: LD_VAR 0 1
32194: PPUSH
32195: LD_INT 1
32197: PPUSH
32198: CALL_OW 234
32202: GO 32187
32204: POP
32205: POP
// end ;
32206: PPOPN 2
32208: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32209: LD_EXP 50
32213: PUSH
32214: LD_EXP 99
32218: AND
32219: IFFALSE 32506
32221: GO 32223
32223: DISABLE
32224: LD_INT 0
32226: PPUSH
32227: PPUSH
32228: PPUSH
// begin i := rand ( 1 , 7 ) ;
32229: LD_ADDR_VAR 0 1
32233: PUSH
32234: LD_INT 1
32236: PPUSH
32237: LD_INT 7
32239: PPUSH
32240: CALL_OW 12
32244: ST_TO_ADDR
// case i of 1 :
32245: LD_VAR 0 1
32249: PUSH
32250: LD_INT 1
32252: DOUBLE
32253: EQUAL
32254: IFTRUE 32258
32256: GO 32268
32258: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32259: LD_STRING earthquake(getX(game), 0, 32)
32261: PPUSH
32262: CALL_OW 559
32266: GO 32506
32268: LD_INT 2
32270: DOUBLE
32271: EQUAL
32272: IFTRUE 32276
32274: GO 32290
32276: POP
// begin ToLua ( displayStucuk(); ) ;
32277: LD_STRING displayStucuk();
32279: PPUSH
32280: CALL_OW 559
// ResetFog ;
32284: CALL_OW 335
// end ; 3 :
32288: GO 32506
32290: LD_INT 3
32292: DOUBLE
32293: EQUAL
32294: IFTRUE 32298
32296: GO 32402
32298: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32299: LD_ADDR_VAR 0 2
32303: PUSH
32304: LD_INT 22
32306: PUSH
32307: LD_OWVAR 2
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 25
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PPUSH
32330: CALL_OW 69
32334: ST_TO_ADDR
// if not tmp then
32335: LD_VAR 0 2
32339: NOT
32340: IFFALSE 32344
// exit ;
32342: GO 32506
// un := tmp [ rand ( 1 , tmp ) ] ;
32344: LD_ADDR_VAR 0 3
32348: PUSH
32349: LD_VAR 0 2
32353: PUSH
32354: LD_INT 1
32356: PPUSH
32357: LD_VAR 0 2
32361: PPUSH
32362: CALL_OW 12
32366: ARRAY
32367: ST_TO_ADDR
// if Crawls ( un ) then
32368: LD_VAR 0 3
32372: PPUSH
32373: CALL_OW 318
32377: IFFALSE 32388
// ComWalk ( un ) ;
32379: LD_VAR 0 3
32383: PPUSH
32384: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32388: LD_VAR 0 3
32392: PPUSH
32393: LD_INT 8
32395: PPUSH
32396: CALL_OW 336
// end ; 4 :
32400: GO 32506
32402: LD_INT 4
32404: DOUBLE
32405: EQUAL
32406: IFTRUE 32410
32408: GO 32484
32410: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32411: LD_ADDR_VAR 0 2
32415: PUSH
32416: LD_INT 22
32418: PUSH
32419: LD_OWVAR 2
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 30
32430: PUSH
32431: LD_INT 29
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PPUSH
32442: CALL_OW 69
32446: ST_TO_ADDR
// if not tmp then
32447: LD_VAR 0 2
32451: NOT
32452: IFFALSE 32456
// exit ;
32454: GO 32506
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32456: LD_VAR 0 2
32460: PUSH
32461: LD_INT 1
32463: ARRAY
32464: PPUSH
32465: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32469: LD_VAR 0 2
32473: PUSH
32474: LD_INT 1
32476: ARRAY
32477: PPUSH
32478: CALL_OW 65
// end ; 5 .. 7 :
32482: GO 32506
32484: LD_INT 5
32486: DOUBLE
32487: GREATEREQUAL
32488: IFFALSE 32496
32490: LD_INT 7
32492: DOUBLE
32493: LESSEQUAL
32494: IFTRUE 32498
32496: GO 32505
32498: POP
// StreamSibBomb ; end ;
32499: CALL 28743 0 0
32503: GO 32506
32505: POP
// end ;
32506: PPOPN 3
32508: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32509: LD_EXP 50
32513: PUSH
32514: LD_EXP 100
32518: AND
32519: IFFALSE 32675
32521: GO 32523
32523: DISABLE
32524: LD_INT 0
32526: PPUSH
32527: PPUSH
32528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32529: LD_ADDR_VAR 0 2
32533: PUSH
32534: LD_INT 81
32536: PUSH
32537: LD_OWVAR 2
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: LD_INT 21
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 21
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: LIST
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PPUSH
32578: CALL_OW 69
32582: ST_TO_ADDR
// if not tmp then
32583: LD_VAR 0 2
32587: NOT
32588: IFFALSE 32592
// exit ;
32590: GO 32675
// p := 0 ;
32592: LD_ADDR_VAR 0 3
32596: PUSH
32597: LD_INT 0
32599: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32600: LD_INT 35
32602: PPUSH
32603: CALL_OW 67
// p := p + 1 ;
32607: LD_ADDR_VAR 0 3
32611: PUSH
32612: LD_VAR 0 3
32616: PUSH
32617: LD_INT 1
32619: PLUS
32620: ST_TO_ADDR
// for i in tmp do
32621: LD_ADDR_VAR 0 1
32625: PUSH
32626: LD_VAR 0 2
32630: PUSH
32631: FOR_IN
32632: IFFALSE 32663
// if GetLives ( i ) < 1000 then
32634: LD_VAR 0 1
32638: PPUSH
32639: CALL_OW 256
32643: PUSH
32644: LD_INT 1000
32646: LESS
32647: IFFALSE 32661
// SetLives ( i , 1000 ) ;
32649: LD_VAR 0 1
32653: PPUSH
32654: LD_INT 1000
32656: PPUSH
32657: CALL_OW 234
32661: GO 32631
32663: POP
32664: POP
// until p > 20 ;
32665: LD_VAR 0 3
32669: PUSH
32670: LD_INT 20
32672: GREATER
32673: IFFALSE 32600
// end ;
32675: PPOPN 3
32677: END
// every 0 0$1 trigger StreamModeActive and sTime do
32678: LD_EXP 50
32682: PUSH
32683: LD_EXP 101
32687: AND
32688: IFFALSE 32723
32690: GO 32692
32692: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32693: LD_INT 28
32695: PPUSH
32696: LD_OWVAR 2
32700: PPUSH
32701: LD_INT 2
32703: PPUSH
32704: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32708: LD_INT 30
32710: PPUSH
32711: LD_OWVAR 2
32715: PPUSH
32716: LD_INT 2
32718: PPUSH
32719: CALL_OW 322
// end ;
32723: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32724: LD_EXP 50
32728: PUSH
32729: LD_EXP 102
32733: AND
32734: IFFALSE 32855
32736: GO 32738
32738: DISABLE
32739: LD_INT 0
32741: PPUSH
32742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32743: LD_ADDR_VAR 0 2
32747: PUSH
32748: LD_INT 22
32750: PUSH
32751: LD_OWVAR 2
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 21
32762: PUSH
32763: LD_INT 1
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: LD_INT 23
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: LIST
32791: PPUSH
32792: CALL_OW 69
32796: ST_TO_ADDR
// if not tmp then
32797: LD_VAR 0 2
32801: NOT
32802: IFFALSE 32806
// exit ;
32804: GO 32855
// for i in tmp do
32806: LD_ADDR_VAR 0 1
32810: PUSH
32811: LD_VAR 0 2
32815: PUSH
32816: FOR_IN
32817: IFFALSE 32853
// begin if Crawls ( i ) then
32819: LD_VAR 0 1
32823: PPUSH
32824: CALL_OW 318
32828: IFFALSE 32839
// ComWalk ( i ) ;
32830: LD_VAR 0 1
32834: PPUSH
32835: CALL_OW 138
// SetClass ( i , 2 ) ;
32839: LD_VAR 0 1
32843: PPUSH
32844: LD_INT 2
32846: PPUSH
32847: CALL_OW 336
// end ;
32851: GO 32816
32853: POP
32854: POP
// end ;
32855: PPOPN 2
32857: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32858: LD_EXP 50
32862: PUSH
32863: LD_EXP 103
32867: AND
32868: IFFALSE 33156
32870: GO 32872
32872: DISABLE
32873: LD_INT 0
32875: PPUSH
32876: PPUSH
32877: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32878: LD_OWVAR 2
32882: PPUSH
32883: LD_INT 9
32885: PPUSH
32886: LD_INT 1
32888: PPUSH
32889: LD_INT 1
32891: PPUSH
32892: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32896: LD_INT 9
32898: PPUSH
32899: LD_OWVAR 2
32903: PPUSH
32904: CALL_OW 343
// uc_side := 9 ;
32908: LD_ADDR_OWVAR 20
32912: PUSH
32913: LD_INT 9
32915: ST_TO_ADDR
// uc_nation := 2 ;
32916: LD_ADDR_OWVAR 21
32920: PUSH
32921: LD_INT 2
32923: ST_TO_ADDR
// hc_name := Dark Warrior ;
32924: LD_ADDR_OWVAR 26
32928: PUSH
32929: LD_STRING Dark Warrior
32931: ST_TO_ADDR
// hc_gallery :=  ;
32932: LD_ADDR_OWVAR 33
32936: PUSH
32937: LD_STRING 
32939: ST_TO_ADDR
// hc_noskilllimit := true ;
32940: LD_ADDR_OWVAR 76
32944: PUSH
32945: LD_INT 1
32947: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32948: LD_ADDR_OWVAR 31
32952: PUSH
32953: LD_INT 30
32955: PUSH
32956: LD_INT 30
32958: PUSH
32959: LD_INT 30
32961: PUSH
32962: LD_INT 30
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: ST_TO_ADDR
// un := CreateHuman ;
32971: LD_ADDR_VAR 0 3
32975: PUSH
32976: CALL_OW 44
32980: ST_TO_ADDR
// hc_noskilllimit := false ;
32981: LD_ADDR_OWVAR 76
32985: PUSH
32986: LD_INT 0
32988: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32989: LD_VAR 0 3
32993: PPUSH
32994: LD_INT 1
32996: PPUSH
32997: CALL_OW 51
// ToLua ( playRanger() ) ;
33001: LD_STRING playRanger()
33003: PPUSH
33004: CALL_OW 559
// p := 0 ;
33008: LD_ADDR_VAR 0 2
33012: PUSH
33013: LD_INT 0
33015: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33016: LD_INT 35
33018: PPUSH
33019: CALL_OW 67
// p := p + 1 ;
33023: LD_ADDR_VAR 0 2
33027: PUSH
33028: LD_VAR 0 2
33032: PUSH
33033: LD_INT 1
33035: PLUS
33036: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33037: LD_VAR 0 3
33041: PPUSH
33042: CALL_OW 256
33046: PUSH
33047: LD_INT 1000
33049: LESS
33050: IFFALSE 33064
// SetLives ( un , 1000 ) ;
33052: LD_VAR 0 3
33056: PPUSH
33057: LD_INT 1000
33059: PPUSH
33060: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33064: LD_VAR 0 3
33068: PPUSH
33069: LD_INT 81
33071: PUSH
33072: LD_OWVAR 2
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 91
33083: PUSH
33084: LD_VAR 0 3
33088: PUSH
33089: LD_INT 30
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PPUSH
33101: CALL_OW 69
33105: PPUSH
33106: LD_VAR 0 3
33110: PPUSH
33111: CALL_OW 74
33115: PPUSH
33116: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33120: LD_VAR 0 2
33124: PUSH
33125: LD_INT 80
33127: GREATER
33128: PUSH
33129: LD_VAR 0 3
33133: PPUSH
33134: CALL_OW 301
33138: OR
33139: IFFALSE 33016
// if un then
33141: LD_VAR 0 3
33145: IFFALSE 33156
// RemoveUnit ( un ) ;
33147: LD_VAR 0 3
33151: PPUSH
33152: CALL_OW 64
// end ;
33156: PPOPN 3
33158: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33159: LD_EXP 104
33163: IFFALSE 33279
33165: GO 33167
33167: DISABLE
33168: LD_INT 0
33170: PPUSH
33171: PPUSH
33172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33173: LD_ADDR_VAR 0 2
33177: PUSH
33178: LD_INT 81
33180: PUSH
33181: LD_OWVAR 2
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 21
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PPUSH
33204: CALL_OW 69
33208: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33209: LD_STRING playComputer()
33211: PPUSH
33212: CALL_OW 559
// if not tmp then
33216: LD_VAR 0 2
33220: NOT
33221: IFFALSE 33225
// exit ;
33223: GO 33279
// for i in tmp do
33225: LD_ADDR_VAR 0 1
33229: PUSH
33230: LD_VAR 0 2
33234: PUSH
33235: FOR_IN
33236: IFFALSE 33277
// for j := 1 to 4 do
33238: LD_ADDR_VAR 0 3
33242: PUSH
33243: DOUBLE
33244: LD_INT 1
33246: DEC
33247: ST_TO_ADDR
33248: LD_INT 4
33250: PUSH
33251: FOR_TO
33252: IFFALSE 33273
// SetSkill ( i , j , 10 ) ;
33254: LD_VAR 0 1
33258: PPUSH
33259: LD_VAR 0 3
33263: PPUSH
33264: LD_INT 10
33266: PPUSH
33267: CALL_OW 237
33271: GO 33251
33273: POP
33274: POP
33275: GO 33235
33277: POP
33278: POP
// end ;
33279: PPOPN 3
33281: END
// every 0 0$1 trigger s30 do var i , tmp ;
33282: LD_EXP 105
33286: IFFALSE 33355
33288: GO 33290
33290: DISABLE
33291: LD_INT 0
33293: PPUSH
33294: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33295: LD_ADDR_VAR 0 2
33299: PUSH
33300: LD_INT 22
33302: PUSH
33303: LD_OWVAR 2
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PPUSH
33312: CALL_OW 69
33316: ST_TO_ADDR
// if not tmp then
33317: LD_VAR 0 2
33321: NOT
33322: IFFALSE 33326
// exit ;
33324: GO 33355
// for i in tmp do
33326: LD_ADDR_VAR 0 1
33330: PUSH
33331: LD_VAR 0 2
33335: PUSH
33336: FOR_IN
33337: IFFALSE 33353
// SetLives ( i , 300 ) ;
33339: LD_VAR 0 1
33343: PPUSH
33344: LD_INT 300
33346: PPUSH
33347: CALL_OW 234
33351: GO 33336
33353: POP
33354: POP
// end ;
33355: PPOPN 2
33357: END
// every 0 0$1 trigger s60 do var i , tmp ;
33358: LD_EXP 106
33362: IFFALSE 33431
33364: GO 33366
33366: DISABLE
33367: LD_INT 0
33369: PPUSH
33370: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33371: LD_ADDR_VAR 0 2
33375: PUSH
33376: LD_INT 22
33378: PUSH
33379: LD_OWVAR 2
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PPUSH
33388: CALL_OW 69
33392: ST_TO_ADDR
// if not tmp then
33393: LD_VAR 0 2
33397: NOT
33398: IFFALSE 33402
// exit ;
33400: GO 33431
// for i in tmp do
33402: LD_ADDR_VAR 0 1
33406: PUSH
33407: LD_VAR 0 2
33411: PUSH
33412: FOR_IN
33413: IFFALSE 33429
// SetLives ( i , 600 ) ;
33415: LD_VAR 0 1
33419: PPUSH
33420: LD_INT 600
33422: PPUSH
33423: CALL_OW 234
33427: GO 33412
33429: POP
33430: POP
// end ;
33431: PPOPN 2
33433: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33434: LD_INT 0
33436: PPUSH
// case cmd of 301 :
33437: LD_VAR 0 1
33441: PUSH
33442: LD_INT 301
33444: DOUBLE
33445: EQUAL
33446: IFTRUE 33450
33448: GO 33482
33450: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33451: LD_VAR 0 6
33455: PPUSH
33456: LD_VAR 0 7
33460: PPUSH
33461: LD_VAR 0 8
33465: PPUSH
33466: LD_VAR 0 4
33470: PPUSH
33471: LD_VAR 0 5
33475: PPUSH
33476: CALL 34683 0 5
33480: GO 33603
33482: LD_INT 302
33484: DOUBLE
33485: EQUAL
33486: IFTRUE 33490
33488: GO 33527
33490: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33491: LD_VAR 0 6
33495: PPUSH
33496: LD_VAR 0 7
33500: PPUSH
33501: LD_VAR 0 8
33505: PPUSH
33506: LD_VAR 0 9
33510: PPUSH
33511: LD_VAR 0 4
33515: PPUSH
33516: LD_VAR 0 5
33520: PPUSH
33521: CALL 34774 0 6
33525: GO 33603
33527: LD_INT 303
33529: DOUBLE
33530: EQUAL
33531: IFTRUE 33535
33533: GO 33572
33535: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33536: LD_VAR 0 6
33540: PPUSH
33541: LD_VAR 0 7
33545: PPUSH
33546: LD_VAR 0 8
33550: PPUSH
33551: LD_VAR 0 9
33555: PPUSH
33556: LD_VAR 0 4
33560: PPUSH
33561: LD_VAR 0 5
33565: PPUSH
33566: CALL 33608 0 6
33570: GO 33603
33572: LD_INT 304
33574: DOUBLE
33575: EQUAL
33576: IFTRUE 33580
33578: GO 33602
33580: POP
// hHackTeleport ( unit , x , y ) ; end ;
33581: LD_VAR 0 2
33585: PPUSH
33586: LD_VAR 0 4
33590: PPUSH
33591: LD_VAR 0 5
33595: PPUSH
33596: CALL 35367 0 3
33600: GO 33603
33602: POP
// end ;
33603: LD_VAR 0 12
33607: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33608: LD_INT 0
33610: PPUSH
33611: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33612: LD_VAR 0 1
33616: PUSH
33617: LD_INT 1
33619: LESS
33620: PUSH
33621: LD_VAR 0 1
33625: PUSH
33626: LD_INT 3
33628: GREATER
33629: OR
33630: PUSH
33631: LD_VAR 0 5
33635: PPUSH
33636: LD_VAR 0 6
33640: PPUSH
33641: CALL_OW 428
33645: OR
33646: IFFALSE 33650
// exit ;
33648: GO 34370
// uc_side := your_side ;
33650: LD_ADDR_OWVAR 20
33654: PUSH
33655: LD_OWVAR 2
33659: ST_TO_ADDR
// uc_nation := nation ;
33660: LD_ADDR_OWVAR 21
33664: PUSH
33665: LD_VAR 0 1
33669: ST_TO_ADDR
// bc_level = 1 ;
33670: LD_ADDR_OWVAR 43
33674: PUSH
33675: LD_INT 1
33677: ST_TO_ADDR
// case btype of 1 :
33678: LD_VAR 0 2
33682: PUSH
33683: LD_INT 1
33685: DOUBLE
33686: EQUAL
33687: IFTRUE 33691
33689: GO 33702
33691: POP
// bc_type := b_depot ; 2 :
33692: LD_ADDR_OWVAR 42
33696: PUSH
33697: LD_INT 0
33699: ST_TO_ADDR
33700: GO 34314
33702: LD_INT 2
33704: DOUBLE
33705: EQUAL
33706: IFTRUE 33710
33708: GO 33721
33710: POP
// bc_type := b_warehouse ; 3 :
33711: LD_ADDR_OWVAR 42
33715: PUSH
33716: LD_INT 1
33718: ST_TO_ADDR
33719: GO 34314
33721: LD_INT 3
33723: DOUBLE
33724: EQUAL
33725: IFTRUE 33729
33727: GO 33740
33729: POP
// bc_type := b_lab ; 4 .. 9 :
33730: LD_ADDR_OWVAR 42
33734: PUSH
33735: LD_INT 6
33737: ST_TO_ADDR
33738: GO 34314
33740: LD_INT 4
33742: DOUBLE
33743: GREATEREQUAL
33744: IFFALSE 33752
33746: LD_INT 9
33748: DOUBLE
33749: LESSEQUAL
33750: IFTRUE 33754
33752: GO 33806
33754: POP
// begin bc_type := b_lab_half ;
33755: LD_ADDR_OWVAR 42
33759: PUSH
33760: LD_INT 7
33762: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33763: LD_ADDR_OWVAR 44
33767: PUSH
33768: LD_INT 10
33770: PUSH
33771: LD_INT 11
33773: PUSH
33774: LD_INT 12
33776: PUSH
33777: LD_INT 15
33779: PUSH
33780: LD_INT 14
33782: PUSH
33783: LD_INT 13
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: PUSH
33794: LD_VAR 0 2
33798: PUSH
33799: LD_INT 3
33801: MINUS
33802: ARRAY
33803: ST_TO_ADDR
// end ; 10 .. 13 :
33804: GO 34314
33806: LD_INT 10
33808: DOUBLE
33809: GREATEREQUAL
33810: IFFALSE 33818
33812: LD_INT 13
33814: DOUBLE
33815: LESSEQUAL
33816: IFTRUE 33820
33818: GO 33897
33820: POP
// begin bc_type := b_lab_full ;
33821: LD_ADDR_OWVAR 42
33825: PUSH
33826: LD_INT 8
33828: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33829: LD_ADDR_OWVAR 44
33833: PUSH
33834: LD_INT 10
33836: PUSH
33837: LD_INT 12
33839: PUSH
33840: LD_INT 14
33842: PUSH
33843: LD_INT 13
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: PUSH
33852: LD_VAR 0 2
33856: PUSH
33857: LD_INT 9
33859: MINUS
33860: ARRAY
33861: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33862: LD_ADDR_OWVAR 45
33866: PUSH
33867: LD_INT 11
33869: PUSH
33870: LD_INT 15
33872: PUSH
33873: LD_INT 12
33875: PUSH
33876: LD_INT 15
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: PUSH
33885: LD_VAR 0 2
33889: PUSH
33890: LD_INT 9
33892: MINUS
33893: ARRAY
33894: ST_TO_ADDR
// end ; 14 :
33895: GO 34314
33897: LD_INT 14
33899: DOUBLE
33900: EQUAL
33901: IFTRUE 33905
33903: GO 33916
33905: POP
// bc_type := b_workshop ; 15 :
33906: LD_ADDR_OWVAR 42
33910: PUSH
33911: LD_INT 2
33913: ST_TO_ADDR
33914: GO 34314
33916: LD_INT 15
33918: DOUBLE
33919: EQUAL
33920: IFTRUE 33924
33922: GO 33935
33924: POP
// bc_type := b_factory ; 16 :
33925: LD_ADDR_OWVAR 42
33929: PUSH
33930: LD_INT 3
33932: ST_TO_ADDR
33933: GO 34314
33935: LD_INT 16
33937: DOUBLE
33938: EQUAL
33939: IFTRUE 33943
33941: GO 33954
33943: POP
// bc_type := b_ext_gun ; 17 :
33944: LD_ADDR_OWVAR 42
33948: PUSH
33949: LD_INT 17
33951: ST_TO_ADDR
33952: GO 34314
33954: LD_INT 17
33956: DOUBLE
33957: EQUAL
33958: IFTRUE 33962
33960: GO 33990
33962: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33963: LD_ADDR_OWVAR 42
33967: PUSH
33968: LD_INT 19
33970: PUSH
33971: LD_INT 23
33973: PUSH
33974: LD_INT 19
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: LIST
33981: PUSH
33982: LD_VAR 0 1
33986: ARRAY
33987: ST_TO_ADDR
33988: GO 34314
33990: LD_INT 18
33992: DOUBLE
33993: EQUAL
33994: IFTRUE 33998
33996: GO 34009
33998: POP
// bc_type := b_ext_radar ; 19 :
33999: LD_ADDR_OWVAR 42
34003: PUSH
34004: LD_INT 20
34006: ST_TO_ADDR
34007: GO 34314
34009: LD_INT 19
34011: DOUBLE
34012: EQUAL
34013: IFTRUE 34017
34015: GO 34028
34017: POP
// bc_type := b_ext_radio ; 20 :
34018: LD_ADDR_OWVAR 42
34022: PUSH
34023: LD_INT 22
34025: ST_TO_ADDR
34026: GO 34314
34028: LD_INT 20
34030: DOUBLE
34031: EQUAL
34032: IFTRUE 34036
34034: GO 34047
34036: POP
// bc_type := b_ext_siberium ; 21 :
34037: LD_ADDR_OWVAR 42
34041: PUSH
34042: LD_INT 21
34044: ST_TO_ADDR
34045: GO 34314
34047: LD_INT 21
34049: DOUBLE
34050: EQUAL
34051: IFTRUE 34055
34053: GO 34066
34055: POP
// bc_type := b_ext_computer ; 22 :
34056: LD_ADDR_OWVAR 42
34060: PUSH
34061: LD_INT 24
34063: ST_TO_ADDR
34064: GO 34314
34066: LD_INT 22
34068: DOUBLE
34069: EQUAL
34070: IFTRUE 34074
34072: GO 34085
34074: POP
// bc_type := b_ext_track ; 23 :
34075: LD_ADDR_OWVAR 42
34079: PUSH
34080: LD_INT 16
34082: ST_TO_ADDR
34083: GO 34314
34085: LD_INT 23
34087: DOUBLE
34088: EQUAL
34089: IFTRUE 34093
34091: GO 34104
34093: POP
// bc_type := b_ext_laser ; 24 :
34094: LD_ADDR_OWVAR 42
34098: PUSH
34099: LD_INT 25
34101: ST_TO_ADDR
34102: GO 34314
34104: LD_INT 24
34106: DOUBLE
34107: EQUAL
34108: IFTRUE 34112
34110: GO 34123
34112: POP
// bc_type := b_control_tower ; 25 :
34113: LD_ADDR_OWVAR 42
34117: PUSH
34118: LD_INT 36
34120: ST_TO_ADDR
34121: GO 34314
34123: LD_INT 25
34125: DOUBLE
34126: EQUAL
34127: IFTRUE 34131
34129: GO 34142
34131: POP
// bc_type := b_breastwork ; 26 :
34132: LD_ADDR_OWVAR 42
34136: PUSH
34137: LD_INT 31
34139: ST_TO_ADDR
34140: GO 34314
34142: LD_INT 26
34144: DOUBLE
34145: EQUAL
34146: IFTRUE 34150
34148: GO 34161
34150: POP
// bc_type := b_bunker ; 27 :
34151: LD_ADDR_OWVAR 42
34155: PUSH
34156: LD_INT 32
34158: ST_TO_ADDR
34159: GO 34314
34161: LD_INT 27
34163: DOUBLE
34164: EQUAL
34165: IFTRUE 34169
34167: GO 34180
34169: POP
// bc_type := b_turret ; 28 :
34170: LD_ADDR_OWVAR 42
34174: PUSH
34175: LD_INT 33
34177: ST_TO_ADDR
34178: GO 34314
34180: LD_INT 28
34182: DOUBLE
34183: EQUAL
34184: IFTRUE 34188
34186: GO 34199
34188: POP
// bc_type := b_armoury ; 29 :
34189: LD_ADDR_OWVAR 42
34193: PUSH
34194: LD_INT 4
34196: ST_TO_ADDR
34197: GO 34314
34199: LD_INT 29
34201: DOUBLE
34202: EQUAL
34203: IFTRUE 34207
34205: GO 34218
34207: POP
// bc_type := b_barracks ; 30 :
34208: LD_ADDR_OWVAR 42
34212: PUSH
34213: LD_INT 5
34215: ST_TO_ADDR
34216: GO 34314
34218: LD_INT 30
34220: DOUBLE
34221: EQUAL
34222: IFTRUE 34226
34224: GO 34237
34226: POP
// bc_type := b_solar_power ; 31 :
34227: LD_ADDR_OWVAR 42
34231: PUSH
34232: LD_INT 27
34234: ST_TO_ADDR
34235: GO 34314
34237: LD_INT 31
34239: DOUBLE
34240: EQUAL
34241: IFTRUE 34245
34243: GO 34256
34245: POP
// bc_type := b_oil_power ; 32 :
34246: LD_ADDR_OWVAR 42
34250: PUSH
34251: LD_INT 26
34253: ST_TO_ADDR
34254: GO 34314
34256: LD_INT 32
34258: DOUBLE
34259: EQUAL
34260: IFTRUE 34264
34262: GO 34275
34264: POP
// bc_type := b_siberite_power ; 33 :
34265: LD_ADDR_OWVAR 42
34269: PUSH
34270: LD_INT 28
34272: ST_TO_ADDR
34273: GO 34314
34275: LD_INT 33
34277: DOUBLE
34278: EQUAL
34279: IFTRUE 34283
34281: GO 34294
34283: POP
// bc_type := b_oil_mine ; 34 :
34284: LD_ADDR_OWVAR 42
34288: PUSH
34289: LD_INT 29
34291: ST_TO_ADDR
34292: GO 34314
34294: LD_INT 34
34296: DOUBLE
34297: EQUAL
34298: IFTRUE 34302
34300: GO 34313
34302: POP
// bc_type := b_siberite_mine ; end ;
34303: LD_ADDR_OWVAR 42
34307: PUSH
34308: LD_INT 30
34310: ST_TO_ADDR
34311: GO 34314
34313: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34314: LD_ADDR_VAR 0 8
34318: PUSH
34319: LD_VAR 0 5
34323: PPUSH
34324: LD_VAR 0 6
34328: PPUSH
34329: LD_VAR 0 3
34333: PPUSH
34334: CALL_OW 47
34338: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34339: LD_OWVAR 42
34343: PUSH
34344: LD_INT 32
34346: PUSH
34347: LD_INT 33
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: IN
34354: IFFALSE 34370
// PlaceWeaponTurret ( b , weapon ) ;
34356: LD_VAR 0 8
34360: PPUSH
34361: LD_VAR 0 4
34365: PPUSH
34366: CALL_OW 431
// end ;
34370: LD_VAR 0 7
34374: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34375: LD_INT 0
34377: PPUSH
34378: PPUSH
34379: PPUSH
34380: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34381: LD_ADDR_VAR 0 4
34385: PUSH
34386: LD_INT 22
34388: PUSH
34389: LD_OWVAR 2
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: LD_INT 30
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 30
34413: PUSH
34414: LD_INT 1
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PPUSH
34430: CALL_OW 69
34434: ST_TO_ADDR
// if not tmp then
34435: LD_VAR 0 4
34439: NOT
34440: IFFALSE 34444
// exit ;
34442: GO 34503
// for i in tmp do
34444: LD_ADDR_VAR 0 2
34448: PUSH
34449: LD_VAR 0 4
34453: PUSH
34454: FOR_IN
34455: IFFALSE 34501
// for j = 1 to 3 do
34457: LD_ADDR_VAR 0 3
34461: PUSH
34462: DOUBLE
34463: LD_INT 1
34465: DEC
34466: ST_TO_ADDR
34467: LD_INT 3
34469: PUSH
34470: FOR_TO
34471: IFFALSE 34497
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34473: LD_VAR 0 2
34477: PPUSH
34478: CALL_OW 274
34482: PPUSH
34483: LD_VAR 0 3
34487: PPUSH
34488: LD_INT 99999
34490: PPUSH
34491: CALL_OW 277
34495: GO 34470
34497: POP
34498: POP
34499: GO 34454
34501: POP
34502: POP
// end ;
34503: LD_VAR 0 1
34507: RET
// export function hHackSetLevel10 ; var i , j ; begin
34508: LD_INT 0
34510: PPUSH
34511: PPUSH
34512: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34513: LD_ADDR_VAR 0 2
34517: PUSH
34518: LD_INT 21
34520: PUSH
34521: LD_INT 1
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PPUSH
34528: CALL_OW 69
34532: PUSH
34533: FOR_IN
34534: IFFALSE 34586
// if IsSelected ( i ) then
34536: LD_VAR 0 2
34540: PPUSH
34541: CALL_OW 306
34545: IFFALSE 34584
// begin for j := 1 to 4 do
34547: LD_ADDR_VAR 0 3
34551: PUSH
34552: DOUBLE
34553: LD_INT 1
34555: DEC
34556: ST_TO_ADDR
34557: LD_INT 4
34559: PUSH
34560: FOR_TO
34561: IFFALSE 34582
// SetSkill ( i , j , 10 ) ;
34563: LD_VAR 0 2
34567: PPUSH
34568: LD_VAR 0 3
34572: PPUSH
34573: LD_INT 10
34575: PPUSH
34576: CALL_OW 237
34580: GO 34560
34582: POP
34583: POP
// end ;
34584: GO 34533
34586: POP
34587: POP
// end ;
34588: LD_VAR 0 1
34592: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34593: LD_INT 0
34595: PPUSH
34596: PPUSH
34597: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34598: LD_ADDR_VAR 0 2
34602: PUSH
34603: LD_INT 22
34605: PUSH
34606: LD_OWVAR 2
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 21
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PPUSH
34629: CALL_OW 69
34633: PUSH
34634: FOR_IN
34635: IFFALSE 34676
// begin for j := 1 to 4 do
34637: LD_ADDR_VAR 0 3
34641: PUSH
34642: DOUBLE
34643: LD_INT 1
34645: DEC
34646: ST_TO_ADDR
34647: LD_INT 4
34649: PUSH
34650: FOR_TO
34651: IFFALSE 34672
// SetSkill ( i , j , 10 ) ;
34653: LD_VAR 0 2
34657: PPUSH
34658: LD_VAR 0 3
34662: PPUSH
34663: LD_INT 10
34665: PPUSH
34666: CALL_OW 237
34670: GO 34650
34672: POP
34673: POP
// end ;
34674: GO 34634
34676: POP
34677: POP
// end ;
34678: LD_VAR 0 1
34682: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34683: LD_INT 0
34685: PPUSH
// uc_side := your_side ;
34686: LD_ADDR_OWVAR 20
34690: PUSH
34691: LD_OWVAR 2
34695: ST_TO_ADDR
// uc_nation := nation ;
34696: LD_ADDR_OWVAR 21
34700: PUSH
34701: LD_VAR 0 1
34705: ST_TO_ADDR
// InitHc ;
34706: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34710: LD_INT 0
34712: PPUSH
34713: LD_VAR 0 2
34717: PPUSH
34718: LD_VAR 0 3
34722: PPUSH
34723: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34727: LD_VAR 0 4
34731: PPUSH
34732: LD_VAR 0 5
34736: PPUSH
34737: CALL_OW 428
34741: PUSH
34742: LD_INT 0
34744: EQUAL
34745: IFFALSE 34769
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34747: CALL_OW 44
34751: PPUSH
34752: LD_VAR 0 4
34756: PPUSH
34757: LD_VAR 0 5
34761: PPUSH
34762: LD_INT 1
34764: PPUSH
34765: CALL_OW 48
// end ;
34769: LD_VAR 0 6
34773: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34774: LD_INT 0
34776: PPUSH
34777: PPUSH
// uc_side := your_side ;
34778: LD_ADDR_OWVAR 20
34782: PUSH
34783: LD_OWVAR 2
34787: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34788: LD_VAR 0 1
34792: PUSH
34793: LD_INT 1
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: LD_INT 3
34801: PUSH
34802: LD_INT 4
34804: PUSH
34805: LD_INT 5
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: IN
34815: IFFALSE 34827
// uc_nation := nation_american else
34817: LD_ADDR_OWVAR 21
34821: PUSH
34822: LD_INT 1
34824: ST_TO_ADDR
34825: GO 34870
// if chassis in [ 11 , 12 , 13 , 14 ] then
34827: LD_VAR 0 1
34831: PUSH
34832: LD_INT 11
34834: PUSH
34835: LD_INT 12
34837: PUSH
34838: LD_INT 13
34840: PUSH
34841: LD_INT 14
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: IN
34850: IFFALSE 34862
// uc_nation := nation_arabian else
34852: LD_ADDR_OWVAR 21
34856: PUSH
34857: LD_INT 2
34859: ST_TO_ADDR
34860: GO 34870
// uc_nation := nation_russian ;
34862: LD_ADDR_OWVAR 21
34866: PUSH
34867: LD_INT 3
34869: ST_TO_ADDR
// vc_chassis := chassis ;
34870: LD_ADDR_OWVAR 37
34874: PUSH
34875: LD_VAR 0 1
34879: ST_TO_ADDR
// vc_engine := engine ;
34880: LD_ADDR_OWVAR 39
34884: PUSH
34885: LD_VAR 0 2
34889: ST_TO_ADDR
// vc_control := control ;
34890: LD_ADDR_OWVAR 38
34894: PUSH
34895: LD_VAR 0 3
34899: ST_TO_ADDR
// vc_weapon := weapon ;
34900: LD_ADDR_OWVAR 40
34904: PUSH
34905: LD_VAR 0 4
34909: ST_TO_ADDR
// un := CreateVehicle ;
34910: LD_ADDR_VAR 0 8
34914: PUSH
34915: CALL_OW 45
34919: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34920: LD_VAR 0 8
34924: PPUSH
34925: LD_INT 0
34927: PPUSH
34928: LD_INT 5
34930: PPUSH
34931: CALL_OW 12
34935: PPUSH
34936: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34940: LD_VAR 0 8
34944: PPUSH
34945: LD_VAR 0 5
34949: PPUSH
34950: LD_VAR 0 6
34954: PPUSH
34955: LD_INT 1
34957: PPUSH
34958: CALL_OW 48
// end ;
34962: LD_VAR 0 7
34966: RET
// export hInvincible ; every 1 do
34967: GO 34969
34969: DISABLE
// hInvincible := [ ] ;
34970: LD_ADDR_EXP 107
34974: PUSH
34975: EMPTY
34976: ST_TO_ADDR
34977: END
// every 10 do var i ;
34978: GO 34980
34980: DISABLE
34981: LD_INT 0
34983: PPUSH
// begin enable ;
34984: ENABLE
// if not hInvincible then
34985: LD_EXP 107
34989: NOT
34990: IFFALSE 34994
// exit ;
34992: GO 35038
// for i in hInvincible do
34994: LD_ADDR_VAR 0 1
34998: PUSH
34999: LD_EXP 107
35003: PUSH
35004: FOR_IN
35005: IFFALSE 35036
// if GetLives ( i ) < 1000 then
35007: LD_VAR 0 1
35011: PPUSH
35012: CALL_OW 256
35016: PUSH
35017: LD_INT 1000
35019: LESS
35020: IFFALSE 35034
// SetLives ( i , 1000 ) ;
35022: LD_VAR 0 1
35026: PPUSH
35027: LD_INT 1000
35029: PPUSH
35030: CALL_OW 234
35034: GO 35004
35036: POP
35037: POP
// end ;
35038: PPOPN 1
35040: END
// export function hHackInvincible ; var i ; begin
35041: LD_INT 0
35043: PPUSH
35044: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35045: LD_ADDR_VAR 0 2
35049: PUSH
35050: LD_INT 2
35052: PUSH
35053: LD_INT 21
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 21
35065: PUSH
35066: LD_INT 2
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: LIST
35077: PPUSH
35078: CALL_OW 69
35082: PUSH
35083: FOR_IN
35084: IFFALSE 35145
// if IsSelected ( i ) then
35086: LD_VAR 0 2
35090: PPUSH
35091: CALL_OW 306
35095: IFFALSE 35143
// begin if i in hInvincible then
35097: LD_VAR 0 2
35101: PUSH
35102: LD_EXP 107
35106: IN
35107: IFFALSE 35127
// hInvincible := hInvincible diff i else
35109: LD_ADDR_EXP 107
35113: PUSH
35114: LD_EXP 107
35118: PUSH
35119: LD_VAR 0 2
35123: DIFF
35124: ST_TO_ADDR
35125: GO 35143
// hInvincible := hInvincible union i ;
35127: LD_ADDR_EXP 107
35131: PUSH
35132: LD_EXP 107
35136: PUSH
35137: LD_VAR 0 2
35141: UNION
35142: ST_TO_ADDR
// end ;
35143: GO 35083
35145: POP
35146: POP
// end ;
35147: LD_VAR 0 1
35151: RET
// export function hHackInvisible ; var i , j ; begin
35152: LD_INT 0
35154: PPUSH
35155: PPUSH
35156: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35157: LD_ADDR_VAR 0 2
35161: PUSH
35162: LD_INT 21
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PPUSH
35172: CALL_OW 69
35176: PUSH
35177: FOR_IN
35178: IFFALSE 35202
// if IsSelected ( i ) then
35180: LD_VAR 0 2
35184: PPUSH
35185: CALL_OW 306
35189: IFFALSE 35200
// ComForceInvisible ( i ) ;
35191: LD_VAR 0 2
35195: PPUSH
35196: CALL_OW 496
35200: GO 35177
35202: POP
35203: POP
// end ;
35204: LD_VAR 0 1
35208: RET
// export function hHackChangeYourSide ; begin
35209: LD_INT 0
35211: PPUSH
// if your_side = 8 then
35212: LD_OWVAR 2
35216: PUSH
35217: LD_INT 8
35219: EQUAL
35220: IFFALSE 35232
// your_side := 0 else
35222: LD_ADDR_OWVAR 2
35226: PUSH
35227: LD_INT 0
35229: ST_TO_ADDR
35230: GO 35246
// your_side := your_side + 1 ;
35232: LD_ADDR_OWVAR 2
35236: PUSH
35237: LD_OWVAR 2
35241: PUSH
35242: LD_INT 1
35244: PLUS
35245: ST_TO_ADDR
// end ;
35246: LD_VAR 0 1
35250: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35251: LD_INT 0
35253: PPUSH
35254: PPUSH
35255: PPUSH
// for i in all_units do
35256: LD_ADDR_VAR 0 2
35260: PUSH
35261: LD_OWVAR 3
35265: PUSH
35266: FOR_IN
35267: IFFALSE 35345
// if IsSelected ( i ) then
35269: LD_VAR 0 2
35273: PPUSH
35274: CALL_OW 306
35278: IFFALSE 35343
// begin j := GetSide ( i ) ;
35280: LD_ADDR_VAR 0 3
35284: PUSH
35285: LD_VAR 0 2
35289: PPUSH
35290: CALL_OW 255
35294: ST_TO_ADDR
// if j = 8 then
35295: LD_VAR 0 3
35299: PUSH
35300: LD_INT 8
35302: EQUAL
35303: IFFALSE 35315
// j := 0 else
35305: LD_ADDR_VAR 0 3
35309: PUSH
35310: LD_INT 0
35312: ST_TO_ADDR
35313: GO 35329
// j := j + 1 ;
35315: LD_ADDR_VAR 0 3
35319: PUSH
35320: LD_VAR 0 3
35324: PUSH
35325: LD_INT 1
35327: PLUS
35328: ST_TO_ADDR
// SetSide ( i , j ) ;
35329: LD_VAR 0 2
35333: PPUSH
35334: LD_VAR 0 3
35338: PPUSH
35339: CALL_OW 235
// end ;
35343: GO 35266
35345: POP
35346: POP
// end ;
35347: LD_VAR 0 1
35351: RET
// export function hHackFog ; begin
35352: LD_INT 0
35354: PPUSH
// FogOff ( true ) ;
35355: LD_INT 1
35357: PPUSH
35358: CALL_OW 344
// end ;
35362: LD_VAR 0 1
35366: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35367: LD_INT 0
35369: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35370: LD_VAR 0 1
35374: PPUSH
35375: LD_VAR 0 2
35379: PPUSH
35380: LD_VAR 0 3
35384: PPUSH
35385: LD_INT 1
35387: PPUSH
35388: LD_INT 1
35390: PPUSH
35391: CALL_OW 483
// CenterOnXY ( x , y ) ;
35395: LD_VAR 0 2
35399: PPUSH
35400: LD_VAR 0 3
35404: PPUSH
35405: CALL_OW 84
// end ;
35409: LD_VAR 0 4
35413: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35414: LD_INT 0
35416: PPUSH
35417: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35418: LD_VAR 0 1
35422: NOT
35423: PUSH
35424: LD_VAR 0 2
35428: PPUSH
35429: LD_VAR 0 3
35433: PPUSH
35434: CALL_OW 488
35438: NOT
35439: OR
35440: PUSH
35441: LD_VAR 0 1
35445: PPUSH
35446: CALL_OW 266
35450: PUSH
35451: LD_INT 3
35453: NONEQUAL
35454: PUSH
35455: LD_VAR 0 1
35459: PPUSH
35460: CALL_OW 247
35464: PUSH
35465: LD_INT 1
35467: EQUAL
35468: NOT
35469: AND
35470: OR
35471: IFFALSE 35475
// exit ;
35473: GO 35624
// if GetType ( factory ) = unit_human then
35475: LD_VAR 0 1
35479: PPUSH
35480: CALL_OW 247
35484: PUSH
35485: LD_INT 1
35487: EQUAL
35488: IFFALSE 35505
// factory := IsInUnit ( factory ) ;
35490: LD_ADDR_VAR 0 1
35494: PUSH
35495: LD_VAR 0 1
35499: PPUSH
35500: CALL_OW 310
35504: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35505: LD_VAR 0 1
35509: PPUSH
35510: CALL_OW 266
35514: PUSH
35515: LD_INT 3
35517: NONEQUAL
35518: IFFALSE 35522
// exit ;
35520: GO 35624
// if HexInfo ( x , y ) = factory then
35522: LD_VAR 0 2
35526: PPUSH
35527: LD_VAR 0 3
35531: PPUSH
35532: CALL_OW 428
35536: PUSH
35537: LD_VAR 0 1
35541: EQUAL
35542: IFFALSE 35569
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35544: LD_ADDR_EXP 108
35548: PUSH
35549: LD_EXP 108
35553: PPUSH
35554: LD_VAR 0 1
35558: PPUSH
35559: LD_INT 0
35561: PPUSH
35562: CALL_OW 1
35566: ST_TO_ADDR
35567: GO 35620
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35569: LD_ADDR_EXP 108
35573: PUSH
35574: LD_EXP 108
35578: PPUSH
35579: LD_VAR 0 1
35583: PPUSH
35584: LD_VAR 0 1
35588: PPUSH
35589: CALL_OW 255
35593: PUSH
35594: LD_VAR 0 1
35598: PUSH
35599: LD_VAR 0 2
35603: PUSH
35604: LD_VAR 0 3
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: PPUSH
35615: CALL_OW 1
35619: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35620: CALL 35629 0 0
// end ;
35624: LD_VAR 0 4
35628: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35629: LD_INT 0
35631: PPUSH
35632: PPUSH
35633: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35634: LD_STRING resetFactoryWaypoint();
35636: PPUSH
35637: CALL_OW 559
// if factoryWaypoints then
35641: LD_EXP 108
35645: IFFALSE 35771
// begin list := PrepareArray ( factoryWaypoints ) ;
35647: LD_ADDR_VAR 0 3
35651: PUSH
35652: LD_EXP 108
35656: PPUSH
35657: CALL 82221 0 1
35661: ST_TO_ADDR
// for i := 1 to list do
35662: LD_ADDR_VAR 0 2
35666: PUSH
35667: DOUBLE
35668: LD_INT 1
35670: DEC
35671: ST_TO_ADDR
35672: LD_VAR 0 3
35676: PUSH
35677: FOR_TO
35678: IFFALSE 35769
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35680: LD_STRING setFactoryWaypointXY(
35682: PUSH
35683: LD_VAR 0 3
35687: PUSH
35688: LD_VAR 0 2
35692: ARRAY
35693: PUSH
35694: LD_INT 1
35696: ARRAY
35697: STR
35698: PUSH
35699: LD_STRING ,
35701: STR
35702: PUSH
35703: LD_VAR 0 3
35707: PUSH
35708: LD_VAR 0 2
35712: ARRAY
35713: PUSH
35714: LD_INT 2
35716: ARRAY
35717: STR
35718: PUSH
35719: LD_STRING ,
35721: STR
35722: PUSH
35723: LD_VAR 0 3
35727: PUSH
35728: LD_VAR 0 2
35732: ARRAY
35733: PUSH
35734: LD_INT 3
35736: ARRAY
35737: STR
35738: PUSH
35739: LD_STRING ,
35741: STR
35742: PUSH
35743: LD_VAR 0 3
35747: PUSH
35748: LD_VAR 0 2
35752: ARRAY
35753: PUSH
35754: LD_INT 4
35756: ARRAY
35757: STR
35758: PUSH
35759: LD_STRING )
35761: STR
35762: PPUSH
35763: CALL_OW 559
35767: GO 35677
35769: POP
35770: POP
// end ; end ;
35771: LD_VAR 0 1
35775: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35776: LD_INT 0
35778: PPUSH
// if HexInfo ( x , y ) = warehouse then
35779: LD_VAR 0 2
35783: PPUSH
35784: LD_VAR 0 3
35788: PPUSH
35789: CALL_OW 428
35793: PUSH
35794: LD_VAR 0 1
35798: EQUAL
35799: IFFALSE 35826
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35801: LD_ADDR_EXP 109
35805: PUSH
35806: LD_EXP 109
35810: PPUSH
35811: LD_VAR 0 1
35815: PPUSH
35816: LD_INT 0
35818: PPUSH
35819: CALL_OW 1
35823: ST_TO_ADDR
35824: GO 35877
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35826: LD_ADDR_EXP 109
35830: PUSH
35831: LD_EXP 109
35835: PPUSH
35836: LD_VAR 0 1
35840: PPUSH
35841: LD_VAR 0 1
35845: PPUSH
35846: CALL_OW 255
35850: PUSH
35851: LD_VAR 0 1
35855: PUSH
35856: LD_VAR 0 2
35860: PUSH
35861: LD_VAR 0 3
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: PPUSH
35872: CALL_OW 1
35876: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35877: CALL 35886 0 0
// end ;
35881: LD_VAR 0 4
35885: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35886: LD_INT 0
35888: PPUSH
35889: PPUSH
35890: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35891: LD_STRING resetWarehouseGatheringPoints();
35893: PPUSH
35894: CALL_OW 559
// if warehouseGatheringPoints then
35898: LD_EXP 109
35902: IFFALSE 36028
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35904: LD_ADDR_VAR 0 3
35908: PUSH
35909: LD_EXP 109
35913: PPUSH
35914: CALL 82221 0 1
35918: ST_TO_ADDR
// for i := 1 to list do
35919: LD_ADDR_VAR 0 2
35923: PUSH
35924: DOUBLE
35925: LD_INT 1
35927: DEC
35928: ST_TO_ADDR
35929: LD_VAR 0 3
35933: PUSH
35934: FOR_TO
35935: IFFALSE 36026
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35937: LD_STRING setWarehouseGatheringPointXY(
35939: PUSH
35940: LD_VAR 0 3
35944: PUSH
35945: LD_VAR 0 2
35949: ARRAY
35950: PUSH
35951: LD_INT 1
35953: ARRAY
35954: STR
35955: PUSH
35956: LD_STRING ,
35958: STR
35959: PUSH
35960: LD_VAR 0 3
35964: PUSH
35965: LD_VAR 0 2
35969: ARRAY
35970: PUSH
35971: LD_INT 2
35973: ARRAY
35974: STR
35975: PUSH
35976: LD_STRING ,
35978: STR
35979: PUSH
35980: LD_VAR 0 3
35984: PUSH
35985: LD_VAR 0 2
35989: ARRAY
35990: PUSH
35991: LD_INT 3
35993: ARRAY
35994: STR
35995: PUSH
35996: LD_STRING ,
35998: STR
35999: PUSH
36000: LD_VAR 0 3
36004: PUSH
36005: LD_VAR 0 2
36009: ARRAY
36010: PUSH
36011: LD_INT 4
36013: ARRAY
36014: STR
36015: PUSH
36016: LD_STRING )
36018: STR
36019: PPUSH
36020: CALL_OW 559
36024: GO 35934
36026: POP
36027: POP
// end ; end ;
36028: LD_VAR 0 1
36032: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36033: LD_EXP 109
36037: IFFALSE 36722
36039: GO 36041
36041: DISABLE
36042: LD_INT 0
36044: PPUSH
36045: PPUSH
36046: PPUSH
36047: PPUSH
36048: PPUSH
36049: PPUSH
36050: PPUSH
36051: PPUSH
36052: PPUSH
// begin enable ;
36053: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36054: LD_ADDR_VAR 0 3
36058: PUSH
36059: LD_EXP 109
36063: PPUSH
36064: CALL 82221 0 1
36068: ST_TO_ADDR
// if not list then
36069: LD_VAR 0 3
36073: NOT
36074: IFFALSE 36078
// exit ;
36076: GO 36722
// for i := 1 to list do
36078: LD_ADDR_VAR 0 1
36082: PUSH
36083: DOUBLE
36084: LD_INT 1
36086: DEC
36087: ST_TO_ADDR
36088: LD_VAR 0 3
36092: PUSH
36093: FOR_TO
36094: IFFALSE 36720
// begin depot := list [ i ] [ 2 ] ;
36096: LD_ADDR_VAR 0 8
36100: PUSH
36101: LD_VAR 0 3
36105: PUSH
36106: LD_VAR 0 1
36110: ARRAY
36111: PUSH
36112: LD_INT 2
36114: ARRAY
36115: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36116: LD_ADDR_VAR 0 5
36120: PUSH
36121: LD_VAR 0 3
36125: PUSH
36126: LD_VAR 0 1
36130: ARRAY
36131: PUSH
36132: LD_INT 1
36134: ARRAY
36135: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36136: LD_VAR 0 8
36140: PPUSH
36141: CALL_OW 301
36145: PUSH
36146: LD_VAR 0 5
36150: PUSH
36151: LD_VAR 0 8
36155: PPUSH
36156: CALL_OW 255
36160: NONEQUAL
36161: OR
36162: IFFALSE 36191
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36164: LD_ADDR_EXP 109
36168: PUSH
36169: LD_EXP 109
36173: PPUSH
36174: LD_VAR 0 8
36178: PPUSH
36179: LD_INT 0
36181: PPUSH
36182: CALL_OW 1
36186: ST_TO_ADDR
// exit ;
36187: POP
36188: POP
36189: GO 36722
// end ; x := list [ i ] [ 3 ] ;
36191: LD_ADDR_VAR 0 6
36195: PUSH
36196: LD_VAR 0 3
36200: PUSH
36201: LD_VAR 0 1
36205: ARRAY
36206: PUSH
36207: LD_INT 3
36209: ARRAY
36210: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36211: LD_ADDR_VAR 0 7
36215: PUSH
36216: LD_VAR 0 3
36220: PUSH
36221: LD_VAR 0 1
36225: ARRAY
36226: PUSH
36227: LD_INT 4
36229: ARRAY
36230: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36231: LD_ADDR_VAR 0 9
36235: PUSH
36236: LD_VAR 0 6
36240: PPUSH
36241: LD_VAR 0 7
36245: PPUSH
36246: LD_INT 16
36248: PPUSH
36249: CALL 80809 0 3
36253: ST_TO_ADDR
// if not cratesNearbyPoint then
36254: LD_VAR 0 9
36258: NOT
36259: IFFALSE 36265
// exit ;
36261: POP
36262: POP
36263: GO 36722
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36265: LD_ADDR_VAR 0 4
36269: PUSH
36270: LD_INT 22
36272: PUSH
36273: LD_VAR 0 5
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 3
36284: PUSH
36285: LD_INT 60
36287: PUSH
36288: EMPTY
36289: LIST
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 91
36297: PUSH
36298: LD_VAR 0 8
36302: PUSH
36303: LD_INT 6
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 2
36313: PUSH
36314: LD_INT 25
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 25
36326: PUSH
36327: LD_INT 16
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: LIST
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: PPUSH
36345: CALL_OW 69
36349: PUSH
36350: LD_VAR 0 8
36354: PPUSH
36355: CALL_OW 313
36359: PPUSH
36360: LD_INT 3
36362: PUSH
36363: LD_INT 60
36365: PUSH
36366: EMPTY
36367: LIST
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 2
36375: PUSH
36376: LD_INT 25
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 25
36388: PUSH
36389: LD_INT 16
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PPUSH
36405: CALL_OW 72
36409: UNION
36410: ST_TO_ADDR
// if tmp then
36411: LD_VAR 0 4
36415: IFFALSE 36495
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36417: LD_ADDR_VAR 0 4
36421: PUSH
36422: LD_VAR 0 4
36426: PPUSH
36427: LD_INT 3
36429: PPUSH
36430: CALL 78778 0 2
36434: ST_TO_ADDR
// for j in tmp do
36435: LD_ADDR_VAR 0 2
36439: PUSH
36440: LD_VAR 0 4
36444: PUSH
36445: FOR_IN
36446: IFFALSE 36489
// begin if IsInUnit ( j ) then
36448: LD_VAR 0 2
36452: PPUSH
36453: CALL_OW 310
36457: IFFALSE 36468
// ComExit ( j ) ;
36459: LD_VAR 0 2
36463: PPUSH
36464: CALL 78861 0 1
// AddComCollect ( j , x , y ) ;
36468: LD_VAR 0 2
36472: PPUSH
36473: LD_VAR 0 6
36477: PPUSH
36478: LD_VAR 0 7
36482: PPUSH
36483: CALL_OW 177
// end ;
36487: GO 36445
36489: POP
36490: POP
// exit ;
36491: POP
36492: POP
36493: GO 36722
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36495: LD_ADDR_VAR 0 4
36499: PUSH
36500: LD_INT 22
36502: PUSH
36503: LD_VAR 0 5
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 91
36514: PUSH
36515: LD_VAR 0 8
36519: PUSH
36520: LD_INT 8
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 2
36530: PUSH
36531: LD_INT 34
36533: PUSH
36534: LD_INT 12
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 34
36543: PUSH
36544: LD_INT 51
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 34
36553: PUSH
36554: LD_INT 32
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 34
36563: PUSH
36564: LD_INT 89
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: PPUSH
36583: CALL_OW 69
36587: ST_TO_ADDR
// if tmp then
36588: LD_VAR 0 4
36592: IFFALSE 36718
// begin for j in tmp do
36594: LD_ADDR_VAR 0 2
36598: PUSH
36599: LD_VAR 0 4
36603: PUSH
36604: FOR_IN
36605: IFFALSE 36716
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36607: LD_VAR 0 2
36611: PPUSH
36612: CALL_OW 262
36616: PUSH
36617: LD_INT 3
36619: EQUAL
36620: PUSH
36621: LD_VAR 0 2
36625: PPUSH
36626: CALL_OW 261
36630: PUSH
36631: LD_INT 20
36633: GREATER
36634: OR
36635: PUSH
36636: LD_VAR 0 2
36640: PPUSH
36641: CALL_OW 314
36645: NOT
36646: AND
36647: PUSH
36648: LD_VAR 0 2
36652: PPUSH
36653: CALL_OW 263
36657: PUSH
36658: LD_INT 1
36660: NONEQUAL
36661: PUSH
36662: LD_VAR 0 2
36666: PPUSH
36667: CALL_OW 311
36671: OR
36672: AND
36673: IFFALSE 36714
// begin ComCollect ( j , x , y ) ;
36675: LD_VAR 0 2
36679: PPUSH
36680: LD_VAR 0 6
36684: PPUSH
36685: LD_VAR 0 7
36689: PPUSH
36690: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36694: LD_VAR 0 2
36698: PPUSH
36699: LD_VAR 0 8
36703: PPUSH
36704: CALL_OW 172
// exit ;
36708: POP
36709: POP
36710: POP
36711: POP
36712: GO 36722
// end ;
36714: GO 36604
36716: POP
36717: POP
// end ; end ;
36718: GO 36093
36720: POP
36721: POP
// end ; end_of_file
36722: PPOPN 9
36724: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36725: LD_INT 0
36727: PPUSH
36728: PPUSH
36729: PPUSH
36730: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36731: LD_VAR 0 1
36735: PPUSH
36736: CALL_OW 264
36740: PUSH
36741: LD_INT 91
36743: EQUAL
36744: IFFALSE 36816
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36746: LD_INT 68
36748: PPUSH
36749: LD_VAR 0 1
36753: PPUSH
36754: CALL_OW 255
36758: PPUSH
36759: CALL_OW 321
36763: PUSH
36764: LD_INT 2
36766: EQUAL
36767: IFFALSE 36779
// eff := 70 else
36769: LD_ADDR_VAR 0 4
36773: PUSH
36774: LD_INT 70
36776: ST_TO_ADDR
36777: GO 36787
// eff := 30 ;
36779: LD_ADDR_VAR 0 4
36783: PUSH
36784: LD_INT 30
36786: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36787: LD_VAR 0 1
36791: PPUSH
36792: CALL_OW 250
36796: PPUSH
36797: LD_VAR 0 1
36801: PPUSH
36802: CALL_OW 251
36806: PPUSH
36807: LD_VAR 0 4
36811: PPUSH
36812: CALL_OW 495
// end ; end ;
36816: LD_VAR 0 2
36820: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36821: LD_INT 0
36823: PPUSH
// end ;
36824: LD_VAR 0 4
36828: RET
// export function SOS_Command ( cmd ) ; begin
36829: LD_INT 0
36831: PPUSH
// end ;
36832: LD_VAR 0 2
36836: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36837: LD_INT 0
36839: PPUSH
// end ;
36840: LD_VAR 0 6
36844: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36845: LD_INT 0
36847: PPUSH
36848: PPUSH
// if not vehicle or not factory then
36849: LD_VAR 0 1
36853: NOT
36854: PUSH
36855: LD_VAR 0 2
36859: NOT
36860: OR
36861: IFFALSE 36865
// exit ;
36863: GO 37096
// if factoryWaypoints >= factory then
36865: LD_EXP 108
36869: PUSH
36870: LD_VAR 0 2
36874: GREATEREQUAL
36875: IFFALSE 37096
// if factoryWaypoints [ factory ] then
36877: LD_EXP 108
36881: PUSH
36882: LD_VAR 0 2
36886: ARRAY
36887: IFFALSE 37096
// begin if GetControl ( vehicle ) = control_manual then
36889: LD_VAR 0 1
36893: PPUSH
36894: CALL_OW 263
36898: PUSH
36899: LD_INT 1
36901: EQUAL
36902: IFFALSE 36983
// begin driver := IsDrivenBy ( vehicle ) ;
36904: LD_ADDR_VAR 0 4
36908: PUSH
36909: LD_VAR 0 1
36913: PPUSH
36914: CALL_OW 311
36918: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36919: LD_VAR 0 4
36923: PPUSH
36924: LD_EXP 108
36928: PUSH
36929: LD_VAR 0 2
36933: ARRAY
36934: PUSH
36935: LD_INT 3
36937: ARRAY
36938: PPUSH
36939: LD_EXP 108
36943: PUSH
36944: LD_VAR 0 2
36948: ARRAY
36949: PUSH
36950: LD_INT 4
36952: ARRAY
36953: PPUSH
36954: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36958: LD_VAR 0 4
36962: PPUSH
36963: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36967: LD_VAR 0 4
36971: PPUSH
36972: LD_VAR 0 2
36976: PPUSH
36977: CALL_OW 180
// end else
36981: GO 37096
// if GetControl ( vehicle ) = control_remote then
36983: LD_VAR 0 1
36987: PPUSH
36988: CALL_OW 263
36992: PUSH
36993: LD_INT 2
36995: EQUAL
36996: IFFALSE 37057
// begin wait ( 0 0$2 ) ;
36998: LD_INT 70
37000: PPUSH
37001: CALL_OW 67
// if Connect ( vehicle ) then
37005: LD_VAR 0 1
37009: PPUSH
37010: CALL 49120 0 1
37014: IFFALSE 37055
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37016: LD_VAR 0 1
37020: PPUSH
37021: LD_EXP 108
37025: PUSH
37026: LD_VAR 0 2
37030: ARRAY
37031: PUSH
37032: LD_INT 3
37034: ARRAY
37035: PPUSH
37036: LD_EXP 108
37040: PUSH
37041: LD_VAR 0 2
37045: ARRAY
37046: PUSH
37047: LD_INT 4
37049: ARRAY
37050: PPUSH
37051: CALL_OW 171
// end else
37055: GO 37096
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37057: LD_VAR 0 1
37061: PPUSH
37062: LD_EXP 108
37066: PUSH
37067: LD_VAR 0 2
37071: ARRAY
37072: PUSH
37073: LD_INT 3
37075: ARRAY
37076: PPUSH
37077: LD_EXP 108
37081: PUSH
37082: LD_VAR 0 2
37086: ARRAY
37087: PUSH
37088: LD_INT 4
37090: ARRAY
37091: PPUSH
37092: CALL_OW 171
// end ; end ;
37096: LD_VAR 0 3
37100: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37101: LD_INT 0
37103: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37104: LD_VAR 0 1
37108: PUSH
37109: LD_INT 250
37111: EQUAL
37112: PUSH
37113: LD_VAR 0 2
37117: PPUSH
37118: CALL_OW 264
37122: PUSH
37123: LD_INT 81
37125: EQUAL
37126: AND
37127: IFFALSE 37148
// MinerPlaceMine ( unit , x , y ) ;
37129: LD_VAR 0 2
37133: PPUSH
37134: LD_VAR 0 4
37138: PPUSH
37139: LD_VAR 0 5
37143: PPUSH
37144: CALL 39533 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37148: LD_VAR 0 1
37152: PUSH
37153: LD_INT 251
37155: EQUAL
37156: PUSH
37157: LD_VAR 0 2
37161: PPUSH
37162: CALL_OW 264
37166: PUSH
37167: LD_INT 81
37169: EQUAL
37170: AND
37171: IFFALSE 37192
// MinerDetonateMine ( unit , x , y ) ;
37173: LD_VAR 0 2
37177: PPUSH
37178: LD_VAR 0 4
37182: PPUSH
37183: LD_VAR 0 5
37187: PPUSH
37188: CALL 39808 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37192: LD_VAR 0 1
37196: PUSH
37197: LD_INT 252
37199: EQUAL
37200: PUSH
37201: LD_VAR 0 2
37205: PPUSH
37206: CALL_OW 264
37210: PUSH
37211: LD_INT 81
37213: EQUAL
37214: AND
37215: IFFALSE 37236
// MinerCreateMinefield ( unit , x , y ) ;
37217: LD_VAR 0 2
37221: PPUSH
37222: LD_VAR 0 4
37226: PPUSH
37227: LD_VAR 0 5
37231: PPUSH
37232: CALL 40225 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37236: LD_VAR 0 1
37240: PUSH
37241: LD_INT 253
37243: EQUAL
37244: PUSH
37245: LD_VAR 0 2
37249: PPUSH
37250: CALL_OW 257
37254: PUSH
37255: LD_INT 5
37257: EQUAL
37258: AND
37259: IFFALSE 37280
// ComBinocular ( unit , x , y ) ;
37261: LD_VAR 0 2
37265: PPUSH
37266: LD_VAR 0 4
37270: PPUSH
37271: LD_VAR 0 5
37275: PPUSH
37276: CALL 40594 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37280: LD_VAR 0 1
37284: PUSH
37285: LD_INT 254
37287: EQUAL
37288: PUSH
37289: LD_VAR 0 2
37293: PPUSH
37294: CALL_OW 264
37298: PUSH
37299: LD_INT 99
37301: EQUAL
37302: AND
37303: PUSH
37304: LD_VAR 0 3
37308: PPUSH
37309: CALL_OW 263
37313: PUSH
37314: LD_INT 3
37316: EQUAL
37317: AND
37318: IFFALSE 37334
// HackDestroyVehicle ( unit , selectedUnit ) ;
37320: LD_VAR 0 2
37324: PPUSH
37325: LD_VAR 0 3
37329: PPUSH
37330: CALL 38897 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37334: LD_VAR 0 1
37338: PUSH
37339: LD_INT 255
37341: EQUAL
37342: PUSH
37343: LD_VAR 0 2
37347: PPUSH
37348: CALL_OW 264
37352: PUSH
37353: LD_INT 14
37355: PUSH
37356: LD_INT 53
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: IN
37363: AND
37364: PUSH
37365: LD_VAR 0 4
37369: PPUSH
37370: LD_VAR 0 5
37374: PPUSH
37375: CALL_OW 488
37379: AND
37380: IFFALSE 37404
// CutTreeXYR ( unit , x , y , 12 ) ;
37382: LD_VAR 0 2
37386: PPUSH
37387: LD_VAR 0 4
37391: PPUSH
37392: LD_VAR 0 5
37396: PPUSH
37397: LD_INT 12
37399: PPUSH
37400: CALL 37467 0 4
// if cmd = 256 then
37404: LD_VAR 0 1
37408: PUSH
37409: LD_INT 256
37411: EQUAL
37412: IFFALSE 37433
// SetFactoryWaypoint ( unit , x , y ) ;
37414: LD_VAR 0 2
37418: PPUSH
37419: LD_VAR 0 4
37423: PPUSH
37424: LD_VAR 0 5
37428: PPUSH
37429: CALL 35414 0 3
// if cmd = 257 then
37433: LD_VAR 0 1
37437: PUSH
37438: LD_INT 257
37440: EQUAL
37441: IFFALSE 37462
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37443: LD_VAR 0 2
37447: PPUSH
37448: LD_VAR 0 4
37452: PPUSH
37453: LD_VAR 0 5
37457: PPUSH
37458: CALL 35776 0 3
// end ;
37462: LD_VAR 0 6
37466: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37467: LD_INT 0
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
37474: PPUSH
37475: PPUSH
37476: PPUSH
37477: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37478: LD_VAR 0 1
37482: NOT
37483: PUSH
37484: LD_VAR 0 2
37488: PPUSH
37489: LD_VAR 0 3
37493: PPUSH
37494: CALL_OW 488
37498: NOT
37499: OR
37500: PUSH
37501: LD_VAR 0 4
37505: NOT
37506: OR
37507: IFFALSE 37511
// exit ;
37509: GO 37851
// list := [ ] ;
37511: LD_ADDR_VAR 0 13
37515: PUSH
37516: EMPTY
37517: ST_TO_ADDR
// if x - r < 0 then
37518: LD_VAR 0 2
37522: PUSH
37523: LD_VAR 0 4
37527: MINUS
37528: PUSH
37529: LD_INT 0
37531: LESS
37532: IFFALSE 37544
// min_x := 0 else
37534: LD_ADDR_VAR 0 7
37538: PUSH
37539: LD_INT 0
37541: ST_TO_ADDR
37542: GO 37560
// min_x := x - r ;
37544: LD_ADDR_VAR 0 7
37548: PUSH
37549: LD_VAR 0 2
37553: PUSH
37554: LD_VAR 0 4
37558: MINUS
37559: ST_TO_ADDR
// if y - r < 0 then
37560: LD_VAR 0 3
37564: PUSH
37565: LD_VAR 0 4
37569: MINUS
37570: PUSH
37571: LD_INT 0
37573: LESS
37574: IFFALSE 37586
// min_y := 0 else
37576: LD_ADDR_VAR 0 8
37580: PUSH
37581: LD_INT 0
37583: ST_TO_ADDR
37584: GO 37602
// min_y := y - r ;
37586: LD_ADDR_VAR 0 8
37590: PUSH
37591: LD_VAR 0 3
37595: PUSH
37596: LD_VAR 0 4
37600: MINUS
37601: ST_TO_ADDR
// max_x := x + r ;
37602: LD_ADDR_VAR 0 9
37606: PUSH
37607: LD_VAR 0 2
37611: PUSH
37612: LD_VAR 0 4
37616: PLUS
37617: ST_TO_ADDR
// max_y := y + r ;
37618: LD_ADDR_VAR 0 10
37622: PUSH
37623: LD_VAR 0 3
37627: PUSH
37628: LD_VAR 0 4
37632: PLUS
37633: ST_TO_ADDR
// for _x = min_x to max_x do
37634: LD_ADDR_VAR 0 11
37638: PUSH
37639: DOUBLE
37640: LD_VAR 0 7
37644: DEC
37645: ST_TO_ADDR
37646: LD_VAR 0 9
37650: PUSH
37651: FOR_TO
37652: IFFALSE 37769
// for _y = min_y to max_y do
37654: LD_ADDR_VAR 0 12
37658: PUSH
37659: DOUBLE
37660: LD_VAR 0 8
37664: DEC
37665: ST_TO_ADDR
37666: LD_VAR 0 10
37670: PUSH
37671: FOR_TO
37672: IFFALSE 37765
// begin if not ValidHex ( _x , _y ) then
37674: LD_VAR 0 11
37678: PPUSH
37679: LD_VAR 0 12
37683: PPUSH
37684: CALL_OW 488
37688: NOT
37689: IFFALSE 37693
// continue ;
37691: GO 37671
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37693: LD_VAR 0 11
37697: PPUSH
37698: LD_VAR 0 12
37702: PPUSH
37703: CALL_OW 351
37707: PUSH
37708: LD_VAR 0 11
37712: PPUSH
37713: LD_VAR 0 12
37717: PPUSH
37718: CALL_OW 554
37722: AND
37723: IFFALSE 37763
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37725: LD_ADDR_VAR 0 13
37729: PUSH
37730: LD_VAR 0 13
37734: PPUSH
37735: LD_VAR 0 13
37739: PUSH
37740: LD_INT 1
37742: PLUS
37743: PPUSH
37744: LD_VAR 0 11
37748: PUSH
37749: LD_VAR 0 12
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PPUSH
37758: CALL_OW 2
37762: ST_TO_ADDR
// end ;
37763: GO 37671
37765: POP
37766: POP
37767: GO 37651
37769: POP
37770: POP
// if not list then
37771: LD_VAR 0 13
37775: NOT
37776: IFFALSE 37780
// exit ;
37778: GO 37851
// for i in list do
37780: LD_ADDR_VAR 0 6
37784: PUSH
37785: LD_VAR 0 13
37789: PUSH
37790: FOR_IN
37791: IFFALSE 37849
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37793: LD_VAR 0 1
37797: PPUSH
37798: LD_STRING M
37800: PUSH
37801: LD_VAR 0 6
37805: PUSH
37806: LD_INT 1
37808: ARRAY
37809: PUSH
37810: LD_VAR 0 6
37814: PUSH
37815: LD_INT 2
37817: ARRAY
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: PUSH
37840: EMPTY
37841: LIST
37842: PPUSH
37843: CALL_OW 447
37847: GO 37790
37849: POP
37850: POP
// end ;
37851: LD_VAR 0 5
37855: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37856: LD_EXP 111
37860: NOT
37861: IFFALSE 37911
37863: GO 37865
37865: DISABLE
// begin initHack := true ;
37866: LD_ADDR_EXP 111
37870: PUSH
37871: LD_INT 1
37873: ST_TO_ADDR
// hackTanks := [ ] ;
37874: LD_ADDR_EXP 112
37878: PUSH
37879: EMPTY
37880: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37881: LD_ADDR_EXP 113
37885: PUSH
37886: EMPTY
37887: ST_TO_ADDR
// hackLimit := 3 ;
37888: LD_ADDR_EXP 114
37892: PUSH
37893: LD_INT 3
37895: ST_TO_ADDR
// hackDist := 12 ;
37896: LD_ADDR_EXP 115
37900: PUSH
37901: LD_INT 12
37903: ST_TO_ADDR
// hackCounter := [ ] ;
37904: LD_ADDR_EXP 116
37908: PUSH
37909: EMPTY
37910: ST_TO_ADDR
// end ;
37911: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37912: LD_EXP 111
37916: PUSH
37917: LD_INT 34
37919: PUSH
37920: LD_INT 99
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PPUSH
37927: CALL_OW 69
37931: AND
37932: IFFALSE 38185
37934: GO 37936
37936: DISABLE
37937: LD_INT 0
37939: PPUSH
37940: PPUSH
// begin enable ;
37941: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37942: LD_ADDR_VAR 0 1
37946: PUSH
37947: LD_INT 34
37949: PUSH
37950: LD_INT 99
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PPUSH
37957: CALL_OW 69
37961: PUSH
37962: FOR_IN
37963: IFFALSE 38183
// begin if not i in hackTanks then
37965: LD_VAR 0 1
37969: PUSH
37970: LD_EXP 112
37974: IN
37975: NOT
37976: IFFALSE 38059
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37978: LD_ADDR_EXP 112
37982: PUSH
37983: LD_EXP 112
37987: PPUSH
37988: LD_EXP 112
37992: PUSH
37993: LD_INT 1
37995: PLUS
37996: PPUSH
37997: LD_VAR 0 1
38001: PPUSH
38002: CALL_OW 1
38006: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38007: LD_ADDR_EXP 113
38011: PUSH
38012: LD_EXP 113
38016: PPUSH
38017: LD_EXP 113
38021: PUSH
38022: LD_INT 1
38024: PLUS
38025: PPUSH
38026: EMPTY
38027: PPUSH
38028: CALL_OW 1
38032: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38033: LD_ADDR_EXP 116
38037: PUSH
38038: LD_EXP 116
38042: PPUSH
38043: LD_EXP 116
38047: PUSH
38048: LD_INT 1
38050: PLUS
38051: PPUSH
38052: EMPTY
38053: PPUSH
38054: CALL_OW 1
38058: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38059: LD_VAR 0 1
38063: PPUSH
38064: CALL_OW 302
38068: NOT
38069: IFFALSE 38082
// begin HackUnlinkAll ( i ) ;
38071: LD_VAR 0 1
38075: PPUSH
38076: CALL 38188 0 1
// continue ;
38080: GO 37962
// end ; HackCheckCapturedStatus ( i ) ;
38082: LD_VAR 0 1
38086: PPUSH
38087: CALL 38631 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38091: LD_ADDR_VAR 0 2
38095: PUSH
38096: LD_INT 81
38098: PUSH
38099: LD_VAR 0 1
38103: PPUSH
38104: CALL_OW 255
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 33
38115: PUSH
38116: LD_INT 3
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 91
38125: PUSH
38126: LD_VAR 0 1
38130: PUSH
38131: LD_EXP 115
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 50
38143: PUSH
38144: EMPTY
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: PPUSH
38153: CALL_OW 69
38157: ST_TO_ADDR
// if not tmp then
38158: LD_VAR 0 2
38162: NOT
38163: IFFALSE 38167
// continue ;
38165: GO 37962
// HackLink ( i , tmp ) ;
38167: LD_VAR 0 1
38171: PPUSH
38172: LD_VAR 0 2
38176: PPUSH
38177: CALL 38324 0 2
// end ;
38181: GO 37962
38183: POP
38184: POP
// end ;
38185: PPOPN 2
38187: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38188: LD_INT 0
38190: PPUSH
38191: PPUSH
38192: PPUSH
// if not hack in hackTanks then
38193: LD_VAR 0 1
38197: PUSH
38198: LD_EXP 112
38202: IN
38203: NOT
38204: IFFALSE 38208
// exit ;
38206: GO 38319
// index := GetElementIndex ( hackTanks , hack ) ;
38208: LD_ADDR_VAR 0 4
38212: PUSH
38213: LD_EXP 112
38217: PPUSH
38218: LD_VAR 0 1
38222: PPUSH
38223: CALL 45936 0 2
38227: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38228: LD_EXP 113
38232: PUSH
38233: LD_VAR 0 4
38237: ARRAY
38238: IFFALSE 38319
// begin for i in hackTanksCaptured [ index ] do
38240: LD_ADDR_VAR 0 3
38244: PUSH
38245: LD_EXP 113
38249: PUSH
38250: LD_VAR 0 4
38254: ARRAY
38255: PUSH
38256: FOR_IN
38257: IFFALSE 38283
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38259: LD_VAR 0 3
38263: PUSH
38264: LD_INT 1
38266: ARRAY
38267: PPUSH
38268: LD_VAR 0 3
38272: PUSH
38273: LD_INT 2
38275: ARRAY
38276: PPUSH
38277: CALL_OW 235
38281: GO 38256
38283: POP
38284: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38285: LD_ADDR_EXP 113
38289: PUSH
38290: LD_EXP 113
38294: PPUSH
38295: LD_VAR 0 4
38299: PPUSH
38300: EMPTY
38301: PPUSH
38302: CALL_OW 1
38306: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38307: LD_VAR 0 1
38311: PPUSH
38312: LD_INT 0
38314: PPUSH
38315: CALL_OW 505
// end ; end ;
38319: LD_VAR 0 2
38323: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38324: LD_INT 0
38326: PPUSH
38327: PPUSH
38328: PPUSH
// if not hack in hackTanks or not vehicles then
38329: LD_VAR 0 1
38333: PUSH
38334: LD_EXP 112
38338: IN
38339: NOT
38340: PUSH
38341: LD_VAR 0 2
38345: NOT
38346: OR
38347: IFFALSE 38351
// exit ;
38349: GO 38626
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38351: LD_ADDR_VAR 0 2
38355: PUSH
38356: LD_VAR 0 1
38360: PPUSH
38361: LD_VAR 0 2
38365: PPUSH
38366: LD_INT 1
38368: PPUSH
38369: LD_INT 1
38371: PPUSH
38372: CALL 46586 0 4
38376: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38377: LD_ADDR_VAR 0 5
38381: PUSH
38382: LD_EXP 112
38386: PPUSH
38387: LD_VAR 0 1
38391: PPUSH
38392: CALL 45936 0 2
38396: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38397: LD_EXP 113
38401: PUSH
38402: LD_VAR 0 5
38406: ARRAY
38407: PUSH
38408: LD_EXP 114
38412: LESS
38413: IFFALSE 38602
// begin for i := 1 to vehicles do
38415: LD_ADDR_VAR 0 4
38419: PUSH
38420: DOUBLE
38421: LD_INT 1
38423: DEC
38424: ST_TO_ADDR
38425: LD_VAR 0 2
38429: PUSH
38430: FOR_TO
38431: IFFALSE 38600
// begin if hackTanksCaptured [ index ] = hackLimit then
38433: LD_EXP 113
38437: PUSH
38438: LD_VAR 0 5
38442: ARRAY
38443: PUSH
38444: LD_EXP 114
38448: EQUAL
38449: IFFALSE 38453
// break ;
38451: GO 38600
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38453: LD_ADDR_EXP 116
38457: PUSH
38458: LD_EXP 116
38462: PPUSH
38463: LD_VAR 0 5
38467: PPUSH
38468: LD_EXP 116
38472: PUSH
38473: LD_VAR 0 5
38477: ARRAY
38478: PUSH
38479: LD_INT 1
38481: PLUS
38482: PPUSH
38483: CALL_OW 1
38487: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38488: LD_ADDR_EXP 113
38492: PUSH
38493: LD_EXP 113
38497: PPUSH
38498: LD_VAR 0 5
38502: PUSH
38503: LD_EXP 113
38507: PUSH
38508: LD_VAR 0 5
38512: ARRAY
38513: PUSH
38514: LD_INT 1
38516: PLUS
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PPUSH
38522: LD_VAR 0 2
38526: PUSH
38527: LD_VAR 0 4
38531: ARRAY
38532: PUSH
38533: LD_VAR 0 2
38537: PUSH
38538: LD_VAR 0 4
38542: ARRAY
38543: PPUSH
38544: CALL_OW 255
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PPUSH
38553: CALL 46151 0 3
38557: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38558: LD_VAR 0 2
38562: PUSH
38563: LD_VAR 0 4
38567: ARRAY
38568: PPUSH
38569: LD_VAR 0 1
38573: PPUSH
38574: CALL_OW 255
38578: PPUSH
38579: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38583: LD_VAR 0 2
38587: PUSH
38588: LD_VAR 0 4
38592: ARRAY
38593: PPUSH
38594: CALL_OW 141
// end ;
38598: GO 38430
38600: POP
38601: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38602: LD_VAR 0 1
38606: PPUSH
38607: LD_EXP 113
38611: PUSH
38612: LD_VAR 0 5
38616: ARRAY
38617: PUSH
38618: LD_INT 0
38620: PLUS
38621: PPUSH
38622: CALL_OW 505
// end ;
38626: LD_VAR 0 3
38630: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38631: LD_INT 0
38633: PPUSH
38634: PPUSH
38635: PPUSH
38636: PPUSH
// if not hack in hackTanks then
38637: LD_VAR 0 1
38641: PUSH
38642: LD_EXP 112
38646: IN
38647: NOT
38648: IFFALSE 38652
// exit ;
38650: GO 38892
// index := GetElementIndex ( hackTanks , hack ) ;
38652: LD_ADDR_VAR 0 4
38656: PUSH
38657: LD_EXP 112
38661: PPUSH
38662: LD_VAR 0 1
38666: PPUSH
38667: CALL 45936 0 2
38671: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38672: LD_ADDR_VAR 0 3
38676: PUSH
38677: DOUBLE
38678: LD_EXP 113
38682: PUSH
38683: LD_VAR 0 4
38687: ARRAY
38688: INC
38689: ST_TO_ADDR
38690: LD_INT 1
38692: PUSH
38693: FOR_DOWNTO
38694: IFFALSE 38866
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38696: LD_ADDR_VAR 0 5
38700: PUSH
38701: LD_EXP 113
38705: PUSH
38706: LD_VAR 0 4
38710: ARRAY
38711: PUSH
38712: LD_VAR 0 3
38716: ARRAY
38717: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38718: LD_VAR 0 5
38722: PUSH
38723: LD_INT 1
38725: ARRAY
38726: PPUSH
38727: CALL_OW 302
38731: NOT
38732: PUSH
38733: LD_VAR 0 5
38737: PUSH
38738: LD_INT 1
38740: ARRAY
38741: PPUSH
38742: CALL_OW 255
38746: PUSH
38747: LD_VAR 0 1
38751: PPUSH
38752: CALL_OW 255
38756: NONEQUAL
38757: OR
38758: IFFALSE 38864
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38760: LD_VAR 0 5
38764: PUSH
38765: LD_INT 1
38767: ARRAY
38768: PPUSH
38769: CALL_OW 305
38773: PUSH
38774: LD_VAR 0 5
38778: PUSH
38779: LD_INT 1
38781: ARRAY
38782: PPUSH
38783: CALL_OW 255
38787: PUSH
38788: LD_VAR 0 1
38792: PPUSH
38793: CALL_OW 255
38797: EQUAL
38798: AND
38799: IFFALSE 38823
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38801: LD_VAR 0 5
38805: PUSH
38806: LD_INT 1
38808: ARRAY
38809: PPUSH
38810: LD_VAR 0 5
38814: PUSH
38815: LD_INT 2
38817: ARRAY
38818: PPUSH
38819: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38823: LD_ADDR_EXP 113
38827: PUSH
38828: LD_EXP 113
38832: PPUSH
38833: LD_VAR 0 4
38837: PPUSH
38838: LD_EXP 113
38842: PUSH
38843: LD_VAR 0 4
38847: ARRAY
38848: PPUSH
38849: LD_VAR 0 3
38853: PPUSH
38854: CALL_OW 3
38858: PPUSH
38859: CALL_OW 1
38863: ST_TO_ADDR
// end ; end ;
38864: GO 38693
38866: POP
38867: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38868: LD_VAR 0 1
38872: PPUSH
38873: LD_EXP 113
38877: PUSH
38878: LD_VAR 0 4
38882: ARRAY
38883: PUSH
38884: LD_INT 0
38886: PLUS
38887: PPUSH
38888: CALL_OW 505
// end ;
38892: LD_VAR 0 2
38896: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38897: LD_INT 0
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
// if not hack in hackTanks then
38903: LD_VAR 0 1
38907: PUSH
38908: LD_EXP 112
38912: IN
38913: NOT
38914: IFFALSE 38918
// exit ;
38916: GO 39003
// index := GetElementIndex ( hackTanks , hack ) ;
38918: LD_ADDR_VAR 0 5
38922: PUSH
38923: LD_EXP 112
38927: PPUSH
38928: LD_VAR 0 1
38932: PPUSH
38933: CALL 45936 0 2
38937: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38938: LD_ADDR_VAR 0 4
38942: PUSH
38943: DOUBLE
38944: LD_INT 1
38946: DEC
38947: ST_TO_ADDR
38948: LD_EXP 113
38952: PUSH
38953: LD_VAR 0 5
38957: ARRAY
38958: PUSH
38959: FOR_TO
38960: IFFALSE 39001
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38962: LD_EXP 113
38966: PUSH
38967: LD_VAR 0 5
38971: ARRAY
38972: PUSH
38973: LD_VAR 0 4
38977: ARRAY
38978: PUSH
38979: LD_INT 1
38981: ARRAY
38982: PUSH
38983: LD_VAR 0 2
38987: EQUAL
38988: IFFALSE 38999
// KillUnit ( vehicle ) ;
38990: LD_VAR 0 2
38994: PPUSH
38995: CALL_OW 66
38999: GO 38959
39001: POP
39002: POP
// end ;
39003: LD_VAR 0 3
39007: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39008: LD_EXP 117
39012: NOT
39013: IFFALSE 39048
39015: GO 39017
39017: DISABLE
// begin initMiner := true ;
39018: LD_ADDR_EXP 117
39022: PUSH
39023: LD_INT 1
39025: ST_TO_ADDR
// minersList := [ ] ;
39026: LD_ADDR_EXP 118
39030: PUSH
39031: EMPTY
39032: ST_TO_ADDR
// minerMinesList := [ ] ;
39033: LD_ADDR_EXP 119
39037: PUSH
39038: EMPTY
39039: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39040: LD_ADDR_EXP 120
39044: PUSH
39045: LD_INT 5
39047: ST_TO_ADDR
// end ;
39048: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39049: LD_EXP 117
39053: PUSH
39054: LD_INT 34
39056: PUSH
39057: LD_INT 81
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PPUSH
39064: CALL_OW 69
39068: AND
39069: IFFALSE 39530
39071: GO 39073
39073: DISABLE
39074: LD_INT 0
39076: PPUSH
39077: PPUSH
39078: PPUSH
39079: PPUSH
// begin enable ;
39080: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39081: LD_ADDR_VAR 0 1
39085: PUSH
39086: LD_INT 34
39088: PUSH
39089: LD_INT 81
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PPUSH
39096: CALL_OW 69
39100: PUSH
39101: FOR_IN
39102: IFFALSE 39174
// begin if not i in minersList then
39104: LD_VAR 0 1
39108: PUSH
39109: LD_EXP 118
39113: IN
39114: NOT
39115: IFFALSE 39172
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39117: LD_ADDR_EXP 118
39121: PUSH
39122: LD_EXP 118
39126: PPUSH
39127: LD_EXP 118
39131: PUSH
39132: LD_INT 1
39134: PLUS
39135: PPUSH
39136: LD_VAR 0 1
39140: PPUSH
39141: CALL_OW 1
39145: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39146: LD_ADDR_EXP 119
39150: PUSH
39151: LD_EXP 119
39155: PPUSH
39156: LD_EXP 119
39160: PUSH
39161: LD_INT 1
39163: PLUS
39164: PPUSH
39165: EMPTY
39166: PPUSH
39167: CALL_OW 1
39171: ST_TO_ADDR
// end end ;
39172: GO 39101
39174: POP
39175: POP
// for i := minerMinesList downto 1 do
39176: LD_ADDR_VAR 0 1
39180: PUSH
39181: DOUBLE
39182: LD_EXP 119
39186: INC
39187: ST_TO_ADDR
39188: LD_INT 1
39190: PUSH
39191: FOR_DOWNTO
39192: IFFALSE 39528
// begin if IsLive ( minersList [ i ] ) then
39194: LD_EXP 118
39198: PUSH
39199: LD_VAR 0 1
39203: ARRAY
39204: PPUSH
39205: CALL_OW 300
39209: IFFALSE 39237
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39211: LD_EXP 118
39215: PUSH
39216: LD_VAR 0 1
39220: ARRAY
39221: PPUSH
39222: LD_EXP 119
39226: PUSH
39227: LD_VAR 0 1
39231: ARRAY
39232: PPUSH
39233: CALL_OW 505
// if not minerMinesList [ i ] then
39237: LD_EXP 119
39241: PUSH
39242: LD_VAR 0 1
39246: ARRAY
39247: NOT
39248: IFFALSE 39252
// continue ;
39250: GO 39191
// for j := minerMinesList [ i ] downto 1 do
39252: LD_ADDR_VAR 0 2
39256: PUSH
39257: DOUBLE
39258: LD_EXP 119
39262: PUSH
39263: LD_VAR 0 1
39267: ARRAY
39268: INC
39269: ST_TO_ADDR
39270: LD_INT 1
39272: PUSH
39273: FOR_DOWNTO
39274: IFFALSE 39524
// begin side := GetSide ( minersList [ i ] ) ;
39276: LD_ADDR_VAR 0 3
39280: PUSH
39281: LD_EXP 118
39285: PUSH
39286: LD_VAR 0 1
39290: ARRAY
39291: PPUSH
39292: CALL_OW 255
39296: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39297: LD_ADDR_VAR 0 4
39301: PUSH
39302: LD_EXP 119
39306: PUSH
39307: LD_VAR 0 1
39311: ARRAY
39312: PUSH
39313: LD_VAR 0 2
39317: ARRAY
39318: PUSH
39319: LD_INT 1
39321: ARRAY
39322: PPUSH
39323: LD_EXP 119
39327: PUSH
39328: LD_VAR 0 1
39332: ARRAY
39333: PUSH
39334: LD_VAR 0 2
39338: ARRAY
39339: PUSH
39340: LD_INT 2
39342: ARRAY
39343: PPUSH
39344: CALL_OW 428
39348: ST_TO_ADDR
// if not tmp then
39349: LD_VAR 0 4
39353: NOT
39354: IFFALSE 39358
// continue ;
39356: GO 39273
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39358: LD_VAR 0 4
39362: PUSH
39363: LD_INT 81
39365: PUSH
39366: LD_VAR 0 3
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PPUSH
39375: CALL_OW 69
39379: IN
39380: PUSH
39381: LD_EXP 119
39385: PUSH
39386: LD_VAR 0 1
39390: ARRAY
39391: PUSH
39392: LD_VAR 0 2
39396: ARRAY
39397: PUSH
39398: LD_INT 1
39400: ARRAY
39401: PPUSH
39402: LD_EXP 119
39406: PUSH
39407: LD_VAR 0 1
39411: ARRAY
39412: PUSH
39413: LD_VAR 0 2
39417: ARRAY
39418: PUSH
39419: LD_INT 2
39421: ARRAY
39422: PPUSH
39423: CALL_OW 458
39427: AND
39428: IFFALSE 39522
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39430: LD_EXP 119
39434: PUSH
39435: LD_VAR 0 1
39439: ARRAY
39440: PUSH
39441: LD_VAR 0 2
39445: ARRAY
39446: PUSH
39447: LD_INT 1
39449: ARRAY
39450: PPUSH
39451: LD_EXP 119
39455: PUSH
39456: LD_VAR 0 1
39460: ARRAY
39461: PUSH
39462: LD_VAR 0 2
39466: ARRAY
39467: PUSH
39468: LD_INT 2
39470: ARRAY
39471: PPUSH
39472: LD_VAR 0 3
39476: PPUSH
39477: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39481: LD_ADDR_EXP 119
39485: PUSH
39486: LD_EXP 119
39490: PPUSH
39491: LD_VAR 0 1
39495: PPUSH
39496: LD_EXP 119
39500: PUSH
39501: LD_VAR 0 1
39505: ARRAY
39506: PPUSH
39507: LD_VAR 0 2
39511: PPUSH
39512: CALL_OW 3
39516: PPUSH
39517: CALL_OW 1
39521: ST_TO_ADDR
// end ; end ;
39522: GO 39273
39524: POP
39525: POP
// end ;
39526: GO 39191
39528: POP
39529: POP
// end ;
39530: PPOPN 4
39532: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39533: LD_INT 0
39535: PPUSH
39536: PPUSH
// result := false ;
39537: LD_ADDR_VAR 0 4
39541: PUSH
39542: LD_INT 0
39544: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39545: LD_VAR 0 1
39549: PPUSH
39550: CALL_OW 264
39554: PUSH
39555: LD_INT 81
39557: EQUAL
39558: NOT
39559: IFFALSE 39563
// exit ;
39561: GO 39803
// index := GetElementIndex ( minersList , unit ) ;
39563: LD_ADDR_VAR 0 5
39567: PUSH
39568: LD_EXP 118
39572: PPUSH
39573: LD_VAR 0 1
39577: PPUSH
39578: CALL 45936 0 2
39582: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39583: LD_EXP 119
39587: PUSH
39588: LD_VAR 0 5
39592: ARRAY
39593: PUSH
39594: LD_EXP 120
39598: GREATEREQUAL
39599: IFFALSE 39603
// exit ;
39601: GO 39803
// ComMoveXY ( unit , x , y ) ;
39603: LD_VAR 0 1
39607: PPUSH
39608: LD_VAR 0 2
39612: PPUSH
39613: LD_VAR 0 3
39617: PPUSH
39618: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39622: LD_INT 35
39624: PPUSH
39625: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39629: LD_VAR 0 1
39633: PPUSH
39634: LD_VAR 0 2
39638: PPUSH
39639: LD_VAR 0 3
39643: PPUSH
39644: CALL 77272 0 3
39648: NOT
39649: PUSH
39650: LD_VAR 0 1
39654: PPUSH
39655: CALL_OW 314
39659: AND
39660: IFFALSE 39664
// exit ;
39662: GO 39803
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39664: LD_VAR 0 2
39668: PPUSH
39669: LD_VAR 0 3
39673: PPUSH
39674: CALL_OW 428
39678: PUSH
39679: LD_VAR 0 1
39683: EQUAL
39684: PUSH
39685: LD_VAR 0 1
39689: PPUSH
39690: CALL_OW 314
39694: NOT
39695: AND
39696: IFFALSE 39622
// PlaySoundXY ( x , y , PlantMine ) ;
39698: LD_VAR 0 2
39702: PPUSH
39703: LD_VAR 0 3
39707: PPUSH
39708: LD_STRING PlantMine
39710: PPUSH
39711: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39715: LD_VAR 0 2
39719: PPUSH
39720: LD_VAR 0 3
39724: PPUSH
39725: LD_VAR 0 1
39729: PPUSH
39730: CALL_OW 255
39734: PPUSH
39735: LD_INT 0
39737: PPUSH
39738: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39742: LD_ADDR_EXP 119
39746: PUSH
39747: LD_EXP 119
39751: PPUSH
39752: LD_VAR 0 5
39756: PUSH
39757: LD_EXP 119
39761: PUSH
39762: LD_VAR 0 5
39766: ARRAY
39767: PUSH
39768: LD_INT 1
39770: PLUS
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PPUSH
39776: LD_VAR 0 2
39780: PUSH
39781: LD_VAR 0 3
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PPUSH
39790: CALL 46151 0 3
39794: ST_TO_ADDR
// result := true ;
39795: LD_ADDR_VAR 0 4
39799: PUSH
39800: LD_INT 1
39802: ST_TO_ADDR
// end ;
39803: LD_VAR 0 4
39807: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39808: LD_INT 0
39810: PPUSH
39811: PPUSH
39812: PPUSH
// if not unit in minersList then
39813: LD_VAR 0 1
39817: PUSH
39818: LD_EXP 118
39822: IN
39823: NOT
39824: IFFALSE 39828
// exit ;
39826: GO 40220
// index := GetElementIndex ( minersList , unit ) ;
39828: LD_ADDR_VAR 0 6
39832: PUSH
39833: LD_EXP 118
39837: PPUSH
39838: LD_VAR 0 1
39842: PPUSH
39843: CALL 45936 0 2
39847: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39848: LD_ADDR_VAR 0 5
39852: PUSH
39853: DOUBLE
39854: LD_EXP 119
39858: PUSH
39859: LD_VAR 0 6
39863: ARRAY
39864: INC
39865: ST_TO_ADDR
39866: LD_INT 1
39868: PUSH
39869: FOR_DOWNTO
39870: IFFALSE 40031
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39872: LD_EXP 119
39876: PUSH
39877: LD_VAR 0 6
39881: ARRAY
39882: PUSH
39883: LD_VAR 0 5
39887: ARRAY
39888: PUSH
39889: LD_INT 1
39891: ARRAY
39892: PUSH
39893: LD_VAR 0 2
39897: EQUAL
39898: PUSH
39899: LD_EXP 119
39903: PUSH
39904: LD_VAR 0 6
39908: ARRAY
39909: PUSH
39910: LD_VAR 0 5
39914: ARRAY
39915: PUSH
39916: LD_INT 2
39918: ARRAY
39919: PUSH
39920: LD_VAR 0 3
39924: EQUAL
39925: AND
39926: IFFALSE 40029
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39928: LD_EXP 119
39932: PUSH
39933: LD_VAR 0 6
39937: ARRAY
39938: PUSH
39939: LD_VAR 0 5
39943: ARRAY
39944: PUSH
39945: LD_INT 1
39947: ARRAY
39948: PPUSH
39949: LD_EXP 119
39953: PUSH
39954: LD_VAR 0 6
39958: ARRAY
39959: PUSH
39960: LD_VAR 0 5
39964: ARRAY
39965: PUSH
39966: LD_INT 2
39968: ARRAY
39969: PPUSH
39970: LD_VAR 0 1
39974: PPUSH
39975: CALL_OW 255
39979: PPUSH
39980: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39984: LD_ADDR_EXP 119
39988: PUSH
39989: LD_EXP 119
39993: PPUSH
39994: LD_VAR 0 6
39998: PPUSH
39999: LD_EXP 119
40003: PUSH
40004: LD_VAR 0 6
40008: ARRAY
40009: PPUSH
40010: LD_VAR 0 5
40014: PPUSH
40015: CALL_OW 3
40019: PPUSH
40020: CALL_OW 1
40024: ST_TO_ADDR
// exit ;
40025: POP
40026: POP
40027: GO 40220
// end ; end ;
40029: GO 39869
40031: POP
40032: POP
// for i := minerMinesList [ index ] downto 1 do
40033: LD_ADDR_VAR 0 5
40037: PUSH
40038: DOUBLE
40039: LD_EXP 119
40043: PUSH
40044: LD_VAR 0 6
40048: ARRAY
40049: INC
40050: ST_TO_ADDR
40051: LD_INT 1
40053: PUSH
40054: FOR_DOWNTO
40055: IFFALSE 40218
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40057: LD_EXP 119
40061: PUSH
40062: LD_VAR 0 6
40066: ARRAY
40067: PUSH
40068: LD_VAR 0 5
40072: ARRAY
40073: PUSH
40074: LD_INT 1
40076: ARRAY
40077: PPUSH
40078: LD_EXP 119
40082: PUSH
40083: LD_VAR 0 6
40087: ARRAY
40088: PUSH
40089: LD_VAR 0 5
40093: ARRAY
40094: PUSH
40095: LD_INT 2
40097: ARRAY
40098: PPUSH
40099: LD_VAR 0 2
40103: PPUSH
40104: LD_VAR 0 3
40108: PPUSH
40109: CALL_OW 298
40113: PUSH
40114: LD_INT 6
40116: LESS
40117: IFFALSE 40216
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40119: LD_EXP 119
40123: PUSH
40124: LD_VAR 0 6
40128: ARRAY
40129: PUSH
40130: LD_VAR 0 5
40134: ARRAY
40135: PUSH
40136: LD_INT 1
40138: ARRAY
40139: PPUSH
40140: LD_EXP 119
40144: PUSH
40145: LD_VAR 0 6
40149: ARRAY
40150: PUSH
40151: LD_VAR 0 5
40155: ARRAY
40156: PUSH
40157: LD_INT 2
40159: ARRAY
40160: PPUSH
40161: LD_VAR 0 1
40165: PPUSH
40166: CALL_OW 255
40170: PPUSH
40171: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40175: LD_ADDR_EXP 119
40179: PUSH
40180: LD_EXP 119
40184: PPUSH
40185: LD_VAR 0 6
40189: PPUSH
40190: LD_EXP 119
40194: PUSH
40195: LD_VAR 0 6
40199: ARRAY
40200: PPUSH
40201: LD_VAR 0 5
40205: PPUSH
40206: CALL_OW 3
40210: PPUSH
40211: CALL_OW 1
40215: ST_TO_ADDR
// end ; end ;
40216: GO 40054
40218: POP
40219: POP
// end ;
40220: LD_VAR 0 4
40224: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40225: LD_INT 0
40227: PPUSH
40228: PPUSH
40229: PPUSH
40230: PPUSH
40231: PPUSH
40232: PPUSH
40233: PPUSH
40234: PPUSH
40235: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40236: LD_VAR 0 1
40240: PPUSH
40241: CALL_OW 264
40245: PUSH
40246: LD_INT 81
40248: EQUAL
40249: NOT
40250: PUSH
40251: LD_VAR 0 1
40255: PUSH
40256: LD_EXP 118
40260: IN
40261: NOT
40262: OR
40263: IFFALSE 40267
// exit ;
40265: GO 40589
// index := GetElementIndex ( minersList , unit ) ;
40267: LD_ADDR_VAR 0 6
40271: PUSH
40272: LD_EXP 118
40276: PPUSH
40277: LD_VAR 0 1
40281: PPUSH
40282: CALL 45936 0 2
40286: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40287: LD_ADDR_VAR 0 8
40291: PUSH
40292: LD_EXP 120
40296: PUSH
40297: LD_EXP 119
40301: PUSH
40302: LD_VAR 0 6
40306: ARRAY
40307: MINUS
40308: ST_TO_ADDR
// if not minesFreeAmount then
40309: LD_VAR 0 8
40313: NOT
40314: IFFALSE 40318
// exit ;
40316: GO 40589
// tmp := [ ] ;
40318: LD_ADDR_VAR 0 7
40322: PUSH
40323: EMPTY
40324: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40325: LD_ADDR_VAR 0 5
40329: PUSH
40330: DOUBLE
40331: LD_INT 1
40333: DEC
40334: ST_TO_ADDR
40335: LD_VAR 0 8
40339: PUSH
40340: FOR_TO
40341: IFFALSE 40536
// begin _d := rand ( 0 , 5 ) ;
40343: LD_ADDR_VAR 0 11
40347: PUSH
40348: LD_INT 0
40350: PPUSH
40351: LD_INT 5
40353: PPUSH
40354: CALL_OW 12
40358: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40359: LD_ADDR_VAR 0 12
40363: PUSH
40364: LD_INT 2
40366: PPUSH
40367: LD_INT 6
40369: PPUSH
40370: CALL_OW 12
40374: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40375: LD_ADDR_VAR 0 9
40379: PUSH
40380: LD_VAR 0 2
40384: PPUSH
40385: LD_VAR 0 11
40389: PPUSH
40390: LD_VAR 0 12
40394: PPUSH
40395: CALL_OW 272
40399: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40400: LD_ADDR_VAR 0 10
40404: PUSH
40405: LD_VAR 0 3
40409: PPUSH
40410: LD_VAR 0 11
40414: PPUSH
40415: LD_VAR 0 12
40419: PPUSH
40420: CALL_OW 273
40424: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40425: LD_VAR 0 9
40429: PPUSH
40430: LD_VAR 0 10
40434: PPUSH
40435: CALL_OW 488
40439: PUSH
40440: LD_VAR 0 9
40444: PUSH
40445: LD_VAR 0 10
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_VAR 0 7
40458: IN
40459: NOT
40460: AND
40461: PUSH
40462: LD_VAR 0 9
40466: PPUSH
40467: LD_VAR 0 10
40471: PPUSH
40472: CALL_OW 458
40476: NOT
40477: AND
40478: IFFALSE 40520
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40480: LD_ADDR_VAR 0 7
40484: PUSH
40485: LD_VAR 0 7
40489: PPUSH
40490: LD_VAR 0 7
40494: PUSH
40495: LD_INT 1
40497: PLUS
40498: PPUSH
40499: LD_VAR 0 9
40503: PUSH
40504: LD_VAR 0 10
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PPUSH
40513: CALL_OW 1
40517: ST_TO_ADDR
40518: GO 40534
// i := i - 1 ;
40520: LD_ADDR_VAR 0 5
40524: PUSH
40525: LD_VAR 0 5
40529: PUSH
40530: LD_INT 1
40532: MINUS
40533: ST_TO_ADDR
// end ;
40534: GO 40340
40536: POP
40537: POP
// for i in tmp do
40538: LD_ADDR_VAR 0 5
40542: PUSH
40543: LD_VAR 0 7
40547: PUSH
40548: FOR_IN
40549: IFFALSE 40587
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40551: LD_VAR 0 1
40555: PPUSH
40556: LD_VAR 0 5
40560: PUSH
40561: LD_INT 1
40563: ARRAY
40564: PPUSH
40565: LD_VAR 0 5
40569: PUSH
40570: LD_INT 2
40572: ARRAY
40573: PPUSH
40574: CALL 39533 0 3
40578: NOT
40579: IFFALSE 40585
// exit ;
40581: POP
40582: POP
40583: GO 40589
40585: GO 40548
40587: POP
40588: POP
// end ;
40589: LD_VAR 0 4
40593: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40594: LD_INT 0
40596: PPUSH
40597: PPUSH
40598: PPUSH
40599: PPUSH
40600: PPUSH
40601: PPUSH
40602: PPUSH
// if not GetClass ( unit ) = class_sniper then
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL_OW 257
40612: PUSH
40613: LD_INT 5
40615: EQUAL
40616: NOT
40617: IFFALSE 40621
// exit ;
40619: GO 41009
// dist := 8 ;
40621: LD_ADDR_VAR 0 5
40625: PUSH
40626: LD_INT 8
40628: ST_TO_ADDR
// viewRange := 12 ;
40629: LD_ADDR_VAR 0 7
40633: PUSH
40634: LD_INT 12
40636: ST_TO_ADDR
// side := GetSide ( unit ) ;
40637: LD_ADDR_VAR 0 6
40641: PUSH
40642: LD_VAR 0 1
40646: PPUSH
40647: CALL_OW 255
40651: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40652: LD_INT 61
40654: PPUSH
40655: LD_VAR 0 6
40659: PPUSH
40660: CALL_OW 321
40664: PUSH
40665: LD_INT 2
40667: EQUAL
40668: IFFALSE 40678
// viewRange := 16 ;
40670: LD_ADDR_VAR 0 7
40674: PUSH
40675: LD_INT 16
40677: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40678: LD_VAR 0 1
40682: PPUSH
40683: LD_VAR 0 2
40687: PPUSH
40688: LD_VAR 0 3
40692: PPUSH
40693: CALL_OW 297
40697: PUSH
40698: LD_VAR 0 5
40702: GREATER
40703: IFFALSE 40782
// begin ComMoveXY ( unit , x , y ) ;
40705: LD_VAR 0 1
40709: PPUSH
40710: LD_VAR 0 2
40714: PPUSH
40715: LD_VAR 0 3
40719: PPUSH
40720: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40724: LD_INT 35
40726: PPUSH
40727: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40731: LD_VAR 0 1
40735: PPUSH
40736: LD_VAR 0 2
40740: PPUSH
40741: LD_VAR 0 3
40745: PPUSH
40746: CALL 77272 0 3
40750: NOT
40751: IFFALSE 40755
// exit ;
40753: GO 41009
// until GetDistUnitXY ( unit , x , y ) < dist ;
40755: LD_VAR 0 1
40759: PPUSH
40760: LD_VAR 0 2
40764: PPUSH
40765: LD_VAR 0 3
40769: PPUSH
40770: CALL_OW 297
40774: PUSH
40775: LD_VAR 0 5
40779: LESS
40780: IFFALSE 40724
// end ; ComTurnXY ( unit , x , y ) ;
40782: LD_VAR 0 1
40786: PPUSH
40787: LD_VAR 0 2
40791: PPUSH
40792: LD_VAR 0 3
40796: PPUSH
40797: CALL_OW 118
// wait ( 5 ) ;
40801: LD_INT 5
40803: PPUSH
40804: CALL_OW 67
// _d := GetDir ( unit ) ;
40808: LD_ADDR_VAR 0 10
40812: PUSH
40813: LD_VAR 0 1
40817: PPUSH
40818: CALL_OW 254
40822: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40823: LD_ADDR_VAR 0 8
40827: PUSH
40828: LD_VAR 0 1
40832: PPUSH
40833: CALL_OW 250
40837: PPUSH
40838: LD_VAR 0 10
40842: PPUSH
40843: LD_VAR 0 5
40847: PPUSH
40848: CALL_OW 272
40852: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40853: LD_ADDR_VAR 0 9
40857: PUSH
40858: LD_VAR 0 1
40862: PPUSH
40863: CALL_OW 251
40867: PPUSH
40868: LD_VAR 0 10
40872: PPUSH
40873: LD_VAR 0 5
40877: PPUSH
40878: CALL_OW 273
40882: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40883: LD_VAR 0 8
40887: PPUSH
40888: LD_VAR 0 9
40892: PPUSH
40893: CALL_OW 488
40897: NOT
40898: IFFALSE 40902
// exit ;
40900: GO 41009
// ComAnimCustom ( unit , 1 ) ;
40902: LD_VAR 0 1
40906: PPUSH
40907: LD_INT 1
40909: PPUSH
40910: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40914: LD_VAR 0 8
40918: PPUSH
40919: LD_VAR 0 9
40923: PPUSH
40924: LD_VAR 0 6
40928: PPUSH
40929: LD_VAR 0 7
40933: PPUSH
40934: CALL_OW 330
// repeat wait ( 1 ) ;
40938: LD_INT 1
40940: PPUSH
40941: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40945: LD_VAR 0 1
40949: PPUSH
40950: CALL_OW 316
40954: PUSH
40955: LD_VAR 0 1
40959: PPUSH
40960: CALL_OW 314
40964: OR
40965: PUSH
40966: LD_VAR 0 1
40970: PPUSH
40971: CALL_OW 302
40975: NOT
40976: OR
40977: PUSH
40978: LD_VAR 0 1
40982: PPUSH
40983: CALL_OW 301
40987: OR
40988: IFFALSE 40938
// RemoveSeeing ( _x , _y , side ) ;
40990: LD_VAR 0 8
40994: PPUSH
40995: LD_VAR 0 9
40999: PPUSH
41000: LD_VAR 0 6
41004: PPUSH
41005: CALL_OW 331
// end ; end_of_file
41009: LD_VAR 0 4
41013: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41014: LD_INT 0
41016: PPUSH
41017: PPUSH
// if exist_mode then
41018: LD_VAR 0 2
41022: IFFALSE 41047
// unit := CreateCharacter ( prefix & ident ) else
41024: LD_ADDR_VAR 0 5
41028: PUSH
41029: LD_VAR 0 3
41033: PUSH
41034: LD_VAR 0 1
41038: STR
41039: PPUSH
41040: CALL_OW 34
41044: ST_TO_ADDR
41045: GO 41062
// unit := NewCharacter ( ident ) ;
41047: LD_ADDR_VAR 0 5
41051: PUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: CALL_OW 25
41061: ST_TO_ADDR
// result := unit ;
41062: LD_ADDR_VAR 0 4
41066: PUSH
41067: LD_VAR 0 5
41071: ST_TO_ADDR
// end ;
41072: LD_VAR 0 4
41076: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41077: LD_INT 0
41079: PPUSH
41080: PPUSH
// if not side or not nation then
41081: LD_VAR 0 1
41085: NOT
41086: PUSH
41087: LD_VAR 0 2
41091: NOT
41092: OR
41093: IFFALSE 41097
// exit ;
41095: GO 41865
// case nation of nation_american :
41097: LD_VAR 0 2
41101: PUSH
41102: LD_INT 1
41104: DOUBLE
41105: EQUAL
41106: IFTRUE 41110
41108: GO 41324
41110: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41111: LD_ADDR_VAR 0 4
41115: PUSH
41116: LD_INT 35
41118: PUSH
41119: LD_INT 45
41121: PUSH
41122: LD_INT 46
41124: PUSH
41125: LD_INT 47
41127: PUSH
41128: LD_INT 82
41130: PUSH
41131: LD_INT 83
41133: PUSH
41134: LD_INT 84
41136: PUSH
41137: LD_INT 85
41139: PUSH
41140: LD_INT 86
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 6
41151: PUSH
41152: LD_INT 15
41154: PUSH
41155: LD_INT 16
41157: PUSH
41158: LD_INT 7
41160: PUSH
41161: LD_INT 12
41163: PUSH
41164: LD_INT 13
41166: PUSH
41167: LD_INT 10
41169: PUSH
41170: LD_INT 14
41172: PUSH
41173: LD_INT 20
41175: PUSH
41176: LD_INT 21
41178: PUSH
41179: LD_INT 22
41181: PUSH
41182: LD_INT 25
41184: PUSH
41185: LD_INT 32
41187: PUSH
41188: LD_INT 27
41190: PUSH
41191: LD_INT 36
41193: PUSH
41194: LD_INT 69
41196: PUSH
41197: LD_INT 39
41199: PUSH
41200: LD_INT 34
41202: PUSH
41203: LD_INT 40
41205: PUSH
41206: LD_INT 48
41208: PUSH
41209: LD_INT 49
41211: PUSH
41212: LD_INT 50
41214: PUSH
41215: LD_INT 51
41217: PUSH
41218: LD_INT 52
41220: PUSH
41221: LD_INT 53
41223: PUSH
41224: LD_INT 54
41226: PUSH
41227: LD_INT 55
41229: PUSH
41230: LD_INT 56
41232: PUSH
41233: LD_INT 57
41235: PUSH
41236: LD_INT 58
41238: PUSH
41239: LD_INT 59
41241: PUSH
41242: LD_INT 60
41244: PUSH
41245: LD_INT 61
41247: PUSH
41248: LD_INT 62
41250: PUSH
41251: LD_INT 80
41253: PUSH
41254: LD_INT 82
41256: PUSH
41257: LD_INT 83
41259: PUSH
41260: LD_INT 84
41262: PUSH
41263: LD_INT 85
41265: PUSH
41266: LD_INT 86
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: ST_TO_ADDR
41322: GO 41789
41324: LD_INT 2
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41332
41330: GO 41558
41332: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41333: LD_ADDR_VAR 0 4
41337: PUSH
41338: LD_INT 35
41340: PUSH
41341: LD_INT 45
41343: PUSH
41344: LD_INT 46
41346: PUSH
41347: LD_INT 47
41349: PUSH
41350: LD_INT 82
41352: PUSH
41353: LD_INT 83
41355: PUSH
41356: LD_INT 84
41358: PUSH
41359: LD_INT 85
41361: PUSH
41362: LD_INT 87
41364: PUSH
41365: LD_INT 70
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: LD_INT 11
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: LD_INT 4
41379: PUSH
41380: LD_INT 5
41382: PUSH
41383: LD_INT 6
41385: PUSH
41386: LD_INT 15
41388: PUSH
41389: LD_INT 18
41391: PUSH
41392: LD_INT 7
41394: PUSH
41395: LD_INT 17
41397: PUSH
41398: LD_INT 8
41400: PUSH
41401: LD_INT 20
41403: PUSH
41404: LD_INT 21
41406: PUSH
41407: LD_INT 22
41409: PUSH
41410: LD_INT 72
41412: PUSH
41413: LD_INT 26
41415: PUSH
41416: LD_INT 69
41418: PUSH
41419: LD_INT 39
41421: PUSH
41422: LD_INT 40
41424: PUSH
41425: LD_INT 41
41427: PUSH
41428: LD_INT 42
41430: PUSH
41431: LD_INT 43
41433: PUSH
41434: LD_INT 48
41436: PUSH
41437: LD_INT 49
41439: PUSH
41440: LD_INT 50
41442: PUSH
41443: LD_INT 51
41445: PUSH
41446: LD_INT 52
41448: PUSH
41449: LD_INT 53
41451: PUSH
41452: LD_INT 54
41454: PUSH
41455: LD_INT 55
41457: PUSH
41458: LD_INT 56
41460: PUSH
41461: LD_INT 60
41463: PUSH
41464: LD_INT 61
41466: PUSH
41467: LD_INT 62
41469: PUSH
41470: LD_INT 66
41472: PUSH
41473: LD_INT 67
41475: PUSH
41476: LD_INT 68
41478: PUSH
41479: LD_INT 81
41481: PUSH
41482: LD_INT 82
41484: PUSH
41485: LD_INT 83
41487: PUSH
41488: LD_INT 84
41490: PUSH
41491: LD_INT 85
41493: PUSH
41494: LD_INT 87
41496: PUSH
41497: LD_INT 88
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: ST_TO_ADDR
41556: GO 41789
41558: LD_INT 3
41560: DOUBLE
41561: EQUAL
41562: IFTRUE 41566
41564: GO 41788
41566: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41567: LD_ADDR_VAR 0 4
41571: PUSH
41572: LD_INT 46
41574: PUSH
41575: LD_INT 47
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 82
41586: PUSH
41587: LD_INT 83
41589: PUSH
41590: LD_INT 84
41592: PUSH
41593: LD_INT 85
41595: PUSH
41596: LD_INT 86
41598: PUSH
41599: LD_INT 11
41601: PUSH
41602: LD_INT 9
41604: PUSH
41605: LD_INT 20
41607: PUSH
41608: LD_INT 19
41610: PUSH
41611: LD_INT 21
41613: PUSH
41614: LD_INT 24
41616: PUSH
41617: LD_INT 22
41619: PUSH
41620: LD_INT 25
41622: PUSH
41623: LD_INT 28
41625: PUSH
41626: LD_INT 29
41628: PUSH
41629: LD_INT 30
41631: PUSH
41632: LD_INT 31
41634: PUSH
41635: LD_INT 37
41637: PUSH
41638: LD_INT 38
41640: PUSH
41641: LD_INT 32
41643: PUSH
41644: LD_INT 27
41646: PUSH
41647: LD_INT 33
41649: PUSH
41650: LD_INT 69
41652: PUSH
41653: LD_INT 39
41655: PUSH
41656: LD_INT 34
41658: PUSH
41659: LD_INT 40
41661: PUSH
41662: LD_INT 71
41664: PUSH
41665: LD_INT 23
41667: PUSH
41668: LD_INT 44
41670: PUSH
41671: LD_INT 48
41673: PUSH
41674: LD_INT 49
41676: PUSH
41677: LD_INT 50
41679: PUSH
41680: LD_INT 51
41682: PUSH
41683: LD_INT 52
41685: PUSH
41686: LD_INT 53
41688: PUSH
41689: LD_INT 54
41691: PUSH
41692: LD_INT 55
41694: PUSH
41695: LD_INT 56
41697: PUSH
41698: LD_INT 57
41700: PUSH
41701: LD_INT 58
41703: PUSH
41704: LD_INT 59
41706: PUSH
41707: LD_INT 63
41709: PUSH
41710: LD_INT 64
41712: PUSH
41713: LD_INT 65
41715: PUSH
41716: LD_INT 82
41718: PUSH
41719: LD_INT 83
41721: PUSH
41722: LD_INT 84
41724: PUSH
41725: LD_INT 85
41727: PUSH
41728: LD_INT 86
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: ST_TO_ADDR
41786: GO 41789
41788: POP
// if state > - 1 and state < 3 then
41789: LD_VAR 0 3
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: GREATER
41798: PUSH
41799: LD_VAR 0 3
41803: PUSH
41804: LD_INT 3
41806: LESS
41807: AND
41808: IFFALSE 41865
// for i in result do
41810: LD_ADDR_VAR 0 5
41814: PUSH
41815: LD_VAR 0 4
41819: PUSH
41820: FOR_IN
41821: IFFALSE 41863
// if GetTech ( i , side ) <> state then
41823: LD_VAR 0 5
41827: PPUSH
41828: LD_VAR 0 1
41832: PPUSH
41833: CALL_OW 321
41837: PUSH
41838: LD_VAR 0 3
41842: NONEQUAL
41843: IFFALSE 41861
// result := result diff i ;
41845: LD_ADDR_VAR 0 4
41849: PUSH
41850: LD_VAR 0 4
41854: PUSH
41855: LD_VAR 0 5
41859: DIFF
41860: ST_TO_ADDR
41861: GO 41820
41863: POP
41864: POP
// end ;
41865: LD_VAR 0 4
41869: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41870: LD_INT 0
41872: PPUSH
41873: PPUSH
41874: PPUSH
// result := true ;
41875: LD_ADDR_VAR 0 3
41879: PUSH
41880: LD_INT 1
41882: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41883: LD_ADDR_VAR 0 5
41887: PUSH
41888: LD_VAR 0 2
41892: PPUSH
41893: CALL_OW 480
41897: ST_TO_ADDR
// if not tmp then
41898: LD_VAR 0 5
41902: NOT
41903: IFFALSE 41907
// exit ;
41905: GO 41956
// for i in tmp do
41907: LD_ADDR_VAR 0 4
41911: PUSH
41912: LD_VAR 0 5
41916: PUSH
41917: FOR_IN
41918: IFFALSE 41954
// if GetTech ( i , side ) <> state_researched then
41920: LD_VAR 0 4
41924: PPUSH
41925: LD_VAR 0 1
41929: PPUSH
41930: CALL_OW 321
41934: PUSH
41935: LD_INT 2
41937: NONEQUAL
41938: IFFALSE 41952
// begin result := false ;
41940: LD_ADDR_VAR 0 3
41944: PUSH
41945: LD_INT 0
41947: ST_TO_ADDR
// exit ;
41948: POP
41949: POP
41950: GO 41956
// end ;
41952: GO 41917
41954: POP
41955: POP
// end ;
41956: LD_VAR 0 3
41960: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41961: LD_INT 0
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
41973: PPUSH
41974: PPUSH
41975: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41976: LD_VAR 0 1
41980: NOT
41981: PUSH
41982: LD_VAR 0 1
41986: PPUSH
41987: CALL_OW 257
41991: PUSH
41992: LD_INT 9
41994: NONEQUAL
41995: OR
41996: IFFALSE 42000
// exit ;
41998: GO 42573
// side := GetSide ( unit ) ;
42000: LD_ADDR_VAR 0 9
42004: PUSH
42005: LD_VAR 0 1
42009: PPUSH
42010: CALL_OW 255
42014: ST_TO_ADDR
// tech_space := tech_spacanom ;
42015: LD_ADDR_VAR 0 12
42019: PUSH
42020: LD_INT 29
42022: ST_TO_ADDR
// tech_time := tech_taurad ;
42023: LD_ADDR_VAR 0 13
42027: PUSH
42028: LD_INT 28
42030: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42031: LD_ADDR_VAR 0 11
42035: PUSH
42036: LD_VAR 0 1
42040: PPUSH
42041: CALL_OW 310
42045: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42046: LD_VAR 0 11
42050: PPUSH
42051: CALL_OW 247
42055: PUSH
42056: LD_INT 2
42058: EQUAL
42059: IFFALSE 42063
// exit ;
42061: GO 42573
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42063: LD_ADDR_VAR 0 8
42067: PUSH
42068: LD_INT 81
42070: PUSH
42071: LD_VAR 0 9
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: LD_INT 21
42085: PUSH
42086: LD_INT 3
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PPUSH
42101: CALL_OW 69
42105: ST_TO_ADDR
// if not tmp then
42106: LD_VAR 0 8
42110: NOT
42111: IFFALSE 42115
// exit ;
42113: GO 42573
// if in_unit then
42115: LD_VAR 0 11
42119: IFFALSE 42143
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42121: LD_ADDR_VAR 0 10
42125: PUSH
42126: LD_VAR 0 8
42130: PPUSH
42131: LD_VAR 0 11
42135: PPUSH
42136: CALL_OW 74
42140: ST_TO_ADDR
42141: GO 42163
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42143: LD_ADDR_VAR 0 10
42147: PUSH
42148: LD_VAR 0 8
42152: PPUSH
42153: LD_VAR 0 1
42157: PPUSH
42158: CALL_OW 74
42162: ST_TO_ADDR
// if not enemy then
42163: LD_VAR 0 10
42167: NOT
42168: IFFALSE 42172
// exit ;
42170: GO 42573
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42172: LD_VAR 0 11
42176: PUSH
42177: LD_VAR 0 11
42181: PPUSH
42182: LD_VAR 0 10
42186: PPUSH
42187: CALL_OW 296
42191: PUSH
42192: LD_INT 13
42194: GREATER
42195: AND
42196: PUSH
42197: LD_VAR 0 1
42201: PPUSH
42202: LD_VAR 0 10
42206: PPUSH
42207: CALL_OW 296
42211: PUSH
42212: LD_INT 12
42214: GREATER
42215: OR
42216: IFFALSE 42220
// exit ;
42218: GO 42573
// missile := [ 1 ] ;
42220: LD_ADDR_VAR 0 14
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: EMPTY
42229: LIST
42230: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42231: LD_VAR 0 9
42235: PPUSH
42236: LD_VAR 0 12
42240: PPUSH
42241: CALL_OW 325
42245: IFFALSE 42274
// missile := Replace ( missile , missile + 1 , 2 ) ;
42247: LD_ADDR_VAR 0 14
42251: PUSH
42252: LD_VAR 0 14
42256: PPUSH
42257: LD_VAR 0 14
42261: PUSH
42262: LD_INT 1
42264: PLUS
42265: PPUSH
42266: LD_INT 2
42268: PPUSH
42269: CALL_OW 1
42273: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42274: LD_VAR 0 9
42278: PPUSH
42279: LD_VAR 0 13
42283: PPUSH
42284: CALL_OW 325
42288: PUSH
42289: LD_VAR 0 10
42293: PPUSH
42294: CALL_OW 255
42298: PPUSH
42299: LD_VAR 0 13
42303: PPUSH
42304: CALL_OW 325
42308: NOT
42309: AND
42310: IFFALSE 42339
// missile := Replace ( missile , missile + 1 , 3 ) ;
42312: LD_ADDR_VAR 0 14
42316: PUSH
42317: LD_VAR 0 14
42321: PPUSH
42322: LD_VAR 0 14
42326: PUSH
42327: LD_INT 1
42329: PLUS
42330: PPUSH
42331: LD_INT 3
42333: PPUSH
42334: CALL_OW 1
42338: ST_TO_ADDR
// if missile < 2 then
42339: LD_VAR 0 14
42343: PUSH
42344: LD_INT 2
42346: LESS
42347: IFFALSE 42351
// exit ;
42349: GO 42573
// x := GetX ( enemy ) ;
42351: LD_ADDR_VAR 0 4
42355: PUSH
42356: LD_VAR 0 10
42360: PPUSH
42361: CALL_OW 250
42365: ST_TO_ADDR
// y := GetY ( enemy ) ;
42366: LD_ADDR_VAR 0 5
42370: PUSH
42371: LD_VAR 0 10
42375: PPUSH
42376: CALL_OW 251
42380: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42381: LD_ADDR_VAR 0 6
42385: PUSH
42386: LD_VAR 0 4
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PPUSH
42395: LD_INT 1
42397: PPUSH
42398: CALL_OW 12
42402: PLUS
42403: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42404: LD_ADDR_VAR 0 7
42408: PUSH
42409: LD_VAR 0 5
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PPUSH
42418: LD_INT 1
42420: PPUSH
42421: CALL_OW 12
42425: PLUS
42426: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42427: LD_VAR 0 6
42431: PPUSH
42432: LD_VAR 0 7
42436: PPUSH
42437: CALL_OW 488
42441: NOT
42442: IFFALSE 42464
// begin _x := x ;
42444: LD_ADDR_VAR 0 6
42448: PUSH
42449: LD_VAR 0 4
42453: ST_TO_ADDR
// _y := y ;
42454: LD_ADDR_VAR 0 7
42458: PUSH
42459: LD_VAR 0 5
42463: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42464: LD_ADDR_VAR 0 3
42468: PUSH
42469: LD_INT 1
42471: PPUSH
42472: LD_VAR 0 14
42476: PPUSH
42477: CALL_OW 12
42481: ST_TO_ADDR
// case i of 1 :
42482: LD_VAR 0 3
42486: PUSH
42487: LD_INT 1
42489: DOUBLE
42490: EQUAL
42491: IFTRUE 42495
42493: GO 42512
42495: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42496: LD_VAR 0 1
42500: PPUSH
42501: LD_VAR 0 10
42505: PPUSH
42506: CALL_OW 115
42510: GO 42573
42512: LD_INT 2
42514: DOUBLE
42515: EQUAL
42516: IFTRUE 42520
42518: GO 42542
42520: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42521: LD_VAR 0 1
42525: PPUSH
42526: LD_VAR 0 6
42530: PPUSH
42531: LD_VAR 0 7
42535: PPUSH
42536: CALL_OW 153
42540: GO 42573
42542: LD_INT 3
42544: DOUBLE
42545: EQUAL
42546: IFTRUE 42550
42548: GO 42572
42550: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42551: LD_VAR 0 1
42555: PPUSH
42556: LD_VAR 0 6
42560: PPUSH
42561: LD_VAR 0 7
42565: PPUSH
42566: CALL_OW 154
42570: GO 42573
42572: POP
// end ;
42573: LD_VAR 0 2
42577: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42578: LD_INT 0
42580: PPUSH
42581: PPUSH
42582: PPUSH
42583: PPUSH
42584: PPUSH
42585: PPUSH
// if not unit or not building then
42586: LD_VAR 0 1
42590: NOT
42591: PUSH
42592: LD_VAR 0 2
42596: NOT
42597: OR
42598: IFFALSE 42602
// exit ;
42600: GO 42760
// x := GetX ( building ) ;
42602: LD_ADDR_VAR 0 5
42606: PUSH
42607: LD_VAR 0 2
42611: PPUSH
42612: CALL_OW 250
42616: ST_TO_ADDR
// y := GetY ( building ) ;
42617: LD_ADDR_VAR 0 6
42621: PUSH
42622: LD_VAR 0 2
42626: PPUSH
42627: CALL_OW 251
42631: ST_TO_ADDR
// for i = 0 to 5 do
42632: LD_ADDR_VAR 0 4
42636: PUSH
42637: DOUBLE
42638: LD_INT 0
42640: DEC
42641: ST_TO_ADDR
42642: LD_INT 5
42644: PUSH
42645: FOR_TO
42646: IFFALSE 42758
// begin _x := ShiftX ( x , i , 3 ) ;
42648: LD_ADDR_VAR 0 7
42652: PUSH
42653: LD_VAR 0 5
42657: PPUSH
42658: LD_VAR 0 4
42662: PPUSH
42663: LD_INT 3
42665: PPUSH
42666: CALL_OW 272
42670: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42671: LD_ADDR_VAR 0 8
42675: PUSH
42676: LD_VAR 0 6
42680: PPUSH
42681: LD_VAR 0 4
42685: PPUSH
42686: LD_INT 3
42688: PPUSH
42689: CALL_OW 273
42693: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42694: LD_VAR 0 7
42698: PPUSH
42699: LD_VAR 0 8
42703: PPUSH
42704: CALL_OW 488
42708: NOT
42709: IFFALSE 42713
// continue ;
42711: GO 42645
// if HexInfo ( _x , _y ) = 0 then
42713: LD_VAR 0 7
42717: PPUSH
42718: LD_VAR 0 8
42722: PPUSH
42723: CALL_OW 428
42727: PUSH
42728: LD_INT 0
42730: EQUAL
42731: IFFALSE 42756
// begin ComMoveXY ( unit , _x , _y ) ;
42733: LD_VAR 0 1
42737: PPUSH
42738: LD_VAR 0 7
42742: PPUSH
42743: LD_VAR 0 8
42747: PPUSH
42748: CALL_OW 111
// exit ;
42752: POP
42753: POP
42754: GO 42760
// end ; end ;
42756: GO 42645
42758: POP
42759: POP
// end ;
42760: LD_VAR 0 3
42764: RET
// export function ScanBase ( side , base_area ) ; begin
42765: LD_INT 0
42767: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42768: LD_ADDR_VAR 0 3
42772: PUSH
42773: LD_VAR 0 2
42777: PPUSH
42778: LD_INT 81
42780: PUSH
42781: LD_VAR 0 1
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PPUSH
42790: CALL_OW 70
42794: ST_TO_ADDR
// end ;
42795: LD_VAR 0 3
42799: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42800: LD_INT 0
42802: PPUSH
42803: PPUSH
42804: PPUSH
42805: PPUSH
// result := false ;
42806: LD_ADDR_VAR 0 2
42810: PUSH
42811: LD_INT 0
42813: ST_TO_ADDR
// side := GetSide ( unit ) ;
42814: LD_ADDR_VAR 0 3
42818: PUSH
42819: LD_VAR 0 1
42823: PPUSH
42824: CALL_OW 255
42828: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42829: LD_ADDR_VAR 0 4
42833: PUSH
42834: LD_VAR 0 1
42838: PPUSH
42839: CALL_OW 248
42843: ST_TO_ADDR
// case nat of 1 :
42844: LD_VAR 0 4
42848: PUSH
42849: LD_INT 1
42851: DOUBLE
42852: EQUAL
42853: IFTRUE 42857
42855: GO 42868
42857: POP
// tech := tech_lassight ; 2 :
42858: LD_ADDR_VAR 0 5
42862: PUSH
42863: LD_INT 12
42865: ST_TO_ADDR
42866: GO 42907
42868: LD_INT 2
42870: DOUBLE
42871: EQUAL
42872: IFTRUE 42876
42874: GO 42887
42876: POP
// tech := tech_mortar ; 3 :
42877: LD_ADDR_VAR 0 5
42881: PUSH
42882: LD_INT 41
42884: ST_TO_ADDR
42885: GO 42907
42887: LD_INT 3
42889: DOUBLE
42890: EQUAL
42891: IFTRUE 42895
42893: GO 42906
42895: POP
// tech := tech_bazooka ; end ;
42896: LD_ADDR_VAR 0 5
42900: PUSH
42901: LD_INT 44
42903: ST_TO_ADDR
42904: GO 42907
42906: POP
// if Researched ( side , tech ) then
42907: LD_VAR 0 3
42911: PPUSH
42912: LD_VAR 0 5
42916: PPUSH
42917: CALL_OW 325
42921: IFFALSE 42948
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42923: LD_ADDR_VAR 0 2
42927: PUSH
42928: LD_INT 5
42930: PUSH
42931: LD_INT 8
42933: PUSH
42934: LD_INT 9
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: LIST
42941: PUSH
42942: LD_VAR 0 4
42946: ARRAY
42947: ST_TO_ADDR
// end ;
42948: LD_VAR 0 2
42952: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42953: LD_INT 0
42955: PPUSH
42956: PPUSH
42957: PPUSH
// if not mines then
42958: LD_VAR 0 2
42962: NOT
42963: IFFALSE 42967
// exit ;
42965: GO 43111
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42967: LD_ADDR_VAR 0 5
42971: PUSH
42972: LD_INT 81
42974: PUSH
42975: LD_VAR 0 1
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 3
42986: PUSH
42987: LD_INT 21
42989: PUSH
42990: LD_INT 3
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PPUSH
43005: CALL_OW 69
43009: ST_TO_ADDR
// for i in mines do
43010: LD_ADDR_VAR 0 4
43014: PUSH
43015: LD_VAR 0 2
43019: PUSH
43020: FOR_IN
43021: IFFALSE 43109
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43023: LD_VAR 0 4
43027: PUSH
43028: LD_INT 1
43030: ARRAY
43031: PPUSH
43032: LD_VAR 0 4
43036: PUSH
43037: LD_INT 2
43039: ARRAY
43040: PPUSH
43041: CALL_OW 458
43045: NOT
43046: IFFALSE 43050
// continue ;
43048: GO 43020
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43050: LD_VAR 0 4
43054: PUSH
43055: LD_INT 1
43057: ARRAY
43058: PPUSH
43059: LD_VAR 0 4
43063: PUSH
43064: LD_INT 2
43066: ARRAY
43067: PPUSH
43068: CALL_OW 428
43072: PUSH
43073: LD_VAR 0 5
43077: IN
43078: IFFALSE 43107
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43080: LD_VAR 0 4
43084: PUSH
43085: LD_INT 1
43087: ARRAY
43088: PPUSH
43089: LD_VAR 0 4
43093: PUSH
43094: LD_INT 2
43096: ARRAY
43097: PPUSH
43098: LD_VAR 0 1
43102: PPUSH
43103: CALL_OW 456
// end ;
43107: GO 43020
43109: POP
43110: POP
// end ;
43111: LD_VAR 0 3
43115: RET
// export function Count ( array ) ; var i ; begin
43116: LD_INT 0
43118: PPUSH
43119: PPUSH
// result := 0 ;
43120: LD_ADDR_VAR 0 2
43124: PUSH
43125: LD_INT 0
43127: ST_TO_ADDR
// for i in array do
43128: LD_ADDR_VAR 0 3
43132: PUSH
43133: LD_VAR 0 1
43137: PUSH
43138: FOR_IN
43139: IFFALSE 43163
// if i then
43141: LD_VAR 0 3
43145: IFFALSE 43161
// result := result + 1 ;
43147: LD_ADDR_VAR 0 2
43151: PUSH
43152: LD_VAR 0 2
43156: PUSH
43157: LD_INT 1
43159: PLUS
43160: ST_TO_ADDR
43161: GO 43138
43163: POP
43164: POP
// end ;
43165: LD_VAR 0 2
43169: RET
// export function IsEmpty ( building ) ; begin
43170: LD_INT 0
43172: PPUSH
// if not building then
43173: LD_VAR 0 1
43177: NOT
43178: IFFALSE 43182
// exit ;
43180: GO 43225
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43182: LD_ADDR_VAR 0 2
43186: PUSH
43187: LD_VAR 0 1
43191: PUSH
43192: LD_INT 22
43194: PUSH
43195: LD_VAR 0 1
43199: PPUSH
43200: CALL_OW 255
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 58
43211: PUSH
43212: EMPTY
43213: LIST
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PPUSH
43219: CALL_OW 69
43223: IN
43224: ST_TO_ADDR
// end ;
43225: LD_VAR 0 2
43229: RET
// export function IsNotFull ( building ) ; var places ; begin
43230: LD_INT 0
43232: PPUSH
43233: PPUSH
// if not building then
43234: LD_VAR 0 1
43238: NOT
43239: IFFALSE 43243
// exit ;
43241: GO 43414
// result := false ;
43243: LD_ADDR_VAR 0 2
43247: PUSH
43248: LD_INT 0
43250: ST_TO_ADDR
// places := 0 ;
43251: LD_ADDR_VAR 0 3
43255: PUSH
43256: LD_INT 0
43258: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
43259: LD_VAR 0 1
43263: PPUSH
43264: CALL_OW 266
43268: PUSH
43269: LD_INT 0
43271: DOUBLE
43272: EQUAL
43273: IFTRUE 43331
43275: LD_INT 1
43277: DOUBLE
43278: EQUAL
43279: IFTRUE 43331
43281: LD_INT 6
43283: DOUBLE
43284: EQUAL
43285: IFTRUE 43331
43287: LD_INT 7
43289: DOUBLE
43290: EQUAL
43291: IFTRUE 43331
43293: LD_INT 8
43295: DOUBLE
43296: EQUAL
43297: IFTRUE 43331
43299: LD_INT 4
43301: DOUBLE
43302: EQUAL
43303: IFTRUE 43331
43305: LD_INT 5
43307: DOUBLE
43308: EQUAL
43309: IFTRUE 43331
43311: LD_INT 2
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43331
43317: LD_INT 3
43319: DOUBLE
43320: EQUAL
43321: IFTRUE 43331
43323: LD_INT 35
43325: DOUBLE
43326: EQUAL
43327: IFTRUE 43331
43329: GO 43342
43331: POP
// places := 6 ; b_bunker , b_breastwork :
43332: LD_ADDR_VAR 0 3
43336: PUSH
43337: LD_INT 6
43339: ST_TO_ADDR
43340: GO 43387
43342: LD_INT 32
43344: DOUBLE
43345: EQUAL
43346: IFTRUE 43356
43348: LD_INT 31
43350: DOUBLE
43351: EQUAL
43352: IFTRUE 43356
43354: GO 43367
43356: POP
// places := 1 ; b_control_tower :
43357: LD_ADDR_VAR 0 3
43361: PUSH
43362: LD_INT 1
43364: ST_TO_ADDR
43365: GO 43387
43367: LD_INT 36
43369: DOUBLE
43370: EQUAL
43371: IFTRUE 43375
43373: GO 43386
43375: POP
// places := 3 ; end ;
43376: LD_ADDR_VAR 0 3
43380: PUSH
43381: LD_INT 3
43383: ST_TO_ADDR
43384: GO 43387
43386: POP
// if places then
43387: LD_VAR 0 3
43391: IFFALSE 43414
// result := UnitsInside ( building ) < places ;
43393: LD_ADDR_VAR 0 2
43397: PUSH
43398: LD_VAR 0 1
43402: PPUSH
43403: CALL_OW 313
43407: PUSH
43408: LD_VAR 0 3
43412: LESS
43413: ST_TO_ADDR
// end ;
43414: LD_VAR 0 2
43418: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43419: LD_INT 0
43421: PPUSH
43422: PPUSH
43423: PPUSH
43424: PPUSH
// tmp := [ ] ;
43425: LD_ADDR_VAR 0 3
43429: PUSH
43430: EMPTY
43431: ST_TO_ADDR
// list := [ ] ;
43432: LD_ADDR_VAR 0 5
43436: PUSH
43437: EMPTY
43438: ST_TO_ADDR
// for i = 16 to 25 do
43439: LD_ADDR_VAR 0 4
43443: PUSH
43444: DOUBLE
43445: LD_INT 16
43447: DEC
43448: ST_TO_ADDR
43449: LD_INT 25
43451: PUSH
43452: FOR_TO
43453: IFFALSE 43526
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43455: LD_ADDR_VAR 0 3
43459: PUSH
43460: LD_VAR 0 3
43464: PUSH
43465: LD_INT 22
43467: PUSH
43468: LD_VAR 0 1
43472: PPUSH
43473: CALL_OW 255
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 91
43484: PUSH
43485: LD_VAR 0 1
43489: PUSH
43490: LD_INT 6
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 30
43500: PUSH
43501: LD_VAR 0 4
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: LIST
43514: PUSH
43515: EMPTY
43516: LIST
43517: PPUSH
43518: CALL_OW 69
43522: ADD
43523: ST_TO_ADDR
43524: GO 43452
43526: POP
43527: POP
// for i = 1 to tmp do
43528: LD_ADDR_VAR 0 4
43532: PUSH
43533: DOUBLE
43534: LD_INT 1
43536: DEC
43537: ST_TO_ADDR
43538: LD_VAR 0 3
43542: PUSH
43543: FOR_TO
43544: IFFALSE 43632
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43546: LD_ADDR_VAR 0 5
43550: PUSH
43551: LD_VAR 0 5
43555: PUSH
43556: LD_VAR 0 3
43560: PUSH
43561: LD_VAR 0 4
43565: ARRAY
43566: PPUSH
43567: CALL_OW 266
43571: PUSH
43572: LD_VAR 0 3
43576: PUSH
43577: LD_VAR 0 4
43581: ARRAY
43582: PPUSH
43583: CALL_OW 250
43587: PUSH
43588: LD_VAR 0 3
43592: PUSH
43593: LD_VAR 0 4
43597: ARRAY
43598: PPUSH
43599: CALL_OW 251
43603: PUSH
43604: LD_VAR 0 3
43608: PUSH
43609: LD_VAR 0 4
43613: ARRAY
43614: PPUSH
43615: CALL_OW 254
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: PUSH
43626: EMPTY
43627: LIST
43628: ADD
43629: ST_TO_ADDR
43630: GO 43543
43632: POP
43633: POP
// result := list ;
43634: LD_ADDR_VAR 0 2
43638: PUSH
43639: LD_VAR 0 5
43643: ST_TO_ADDR
// end ;
43644: LD_VAR 0 2
43648: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43649: LD_INT 0
43651: PPUSH
43652: PPUSH
43653: PPUSH
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
// if not factory then
43658: LD_VAR 0 1
43662: NOT
43663: IFFALSE 43667
// exit ;
43665: GO 44260
// if control = control_apeman then
43667: LD_VAR 0 4
43671: PUSH
43672: LD_INT 5
43674: EQUAL
43675: IFFALSE 43784
// begin tmp := UnitsInside ( factory ) ;
43677: LD_ADDR_VAR 0 8
43681: PUSH
43682: LD_VAR 0 1
43686: PPUSH
43687: CALL_OW 313
43691: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43692: LD_VAR 0 8
43696: PPUSH
43697: LD_INT 25
43699: PUSH
43700: LD_INT 12
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PPUSH
43707: CALL_OW 72
43711: NOT
43712: IFFALSE 43722
// control := control_manual ;
43714: LD_ADDR_VAR 0 4
43718: PUSH
43719: LD_INT 1
43721: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43722: LD_ADDR_VAR 0 8
43726: PUSH
43727: LD_VAR 0 1
43731: PPUSH
43732: CALL 43419 0 1
43736: ST_TO_ADDR
// if tmp then
43737: LD_VAR 0 8
43741: IFFALSE 43784
// begin for i in tmp do
43743: LD_ADDR_VAR 0 7
43747: PUSH
43748: LD_VAR 0 8
43752: PUSH
43753: FOR_IN
43754: IFFALSE 43782
// if i [ 1 ] = b_ext_radio then
43756: LD_VAR 0 7
43760: PUSH
43761: LD_INT 1
43763: ARRAY
43764: PUSH
43765: LD_INT 22
43767: EQUAL
43768: IFFALSE 43780
// begin control := control_remote ;
43770: LD_ADDR_VAR 0 4
43774: PUSH
43775: LD_INT 2
43777: ST_TO_ADDR
// break ;
43778: GO 43782
// end ;
43780: GO 43753
43782: POP
43783: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43784: LD_VAR 0 1
43788: PPUSH
43789: LD_VAR 0 2
43793: PPUSH
43794: LD_VAR 0 3
43798: PPUSH
43799: LD_VAR 0 4
43803: PPUSH
43804: LD_VAR 0 5
43808: PPUSH
43809: CALL_OW 448
43813: IFFALSE 43848
// begin result := [ chassis , engine , control , weapon ] ;
43815: LD_ADDR_VAR 0 6
43819: PUSH
43820: LD_VAR 0 2
43824: PUSH
43825: LD_VAR 0 3
43829: PUSH
43830: LD_VAR 0 4
43834: PUSH
43835: LD_VAR 0 5
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: ST_TO_ADDR
// exit ;
43846: GO 44260
// end ; _chassis := AvailableChassisList ( factory ) ;
43848: LD_ADDR_VAR 0 9
43852: PUSH
43853: LD_VAR 0 1
43857: PPUSH
43858: CALL_OW 475
43862: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43863: LD_ADDR_VAR 0 11
43867: PUSH
43868: LD_VAR 0 1
43872: PPUSH
43873: CALL_OW 476
43877: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43878: LD_ADDR_VAR 0 12
43882: PUSH
43883: LD_VAR 0 1
43887: PPUSH
43888: CALL_OW 477
43892: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43893: LD_ADDR_VAR 0 10
43897: PUSH
43898: LD_VAR 0 1
43902: PPUSH
43903: CALL_OW 478
43907: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43908: LD_VAR 0 9
43912: NOT
43913: PUSH
43914: LD_VAR 0 11
43918: NOT
43919: OR
43920: PUSH
43921: LD_VAR 0 12
43925: NOT
43926: OR
43927: PUSH
43928: LD_VAR 0 10
43932: NOT
43933: OR
43934: IFFALSE 43969
// begin result := [ chassis , engine , control , weapon ] ;
43936: LD_ADDR_VAR 0 6
43940: PUSH
43941: LD_VAR 0 2
43945: PUSH
43946: LD_VAR 0 3
43950: PUSH
43951: LD_VAR 0 4
43955: PUSH
43956: LD_VAR 0 5
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: ST_TO_ADDR
// exit ;
43967: GO 44260
// end ; if not chassis in _chassis then
43969: LD_VAR 0 2
43973: PUSH
43974: LD_VAR 0 9
43978: IN
43979: NOT
43980: IFFALSE 44006
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43982: LD_ADDR_VAR 0 2
43986: PUSH
43987: LD_VAR 0 9
43991: PUSH
43992: LD_INT 1
43994: PPUSH
43995: LD_VAR 0 9
43999: PPUSH
44000: CALL_OW 12
44004: ARRAY
44005: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44006: LD_VAR 0 2
44010: PPUSH
44011: LD_VAR 0 3
44015: PPUSH
44016: CALL 44265 0 2
44020: NOT
44021: IFFALSE 44080
// repeat engine := _engine [ 1 ] ;
44023: LD_ADDR_VAR 0 3
44027: PUSH
44028: LD_VAR 0 11
44032: PUSH
44033: LD_INT 1
44035: ARRAY
44036: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44037: LD_ADDR_VAR 0 11
44041: PUSH
44042: LD_VAR 0 11
44046: PPUSH
44047: LD_INT 1
44049: PPUSH
44050: CALL_OW 3
44054: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44055: LD_VAR 0 2
44059: PPUSH
44060: LD_VAR 0 3
44064: PPUSH
44065: CALL 44265 0 2
44069: PUSH
44070: LD_VAR 0 11
44074: PUSH
44075: EMPTY
44076: EQUAL
44077: OR
44078: IFFALSE 44023
// if not control in _control then
44080: LD_VAR 0 4
44084: PUSH
44085: LD_VAR 0 12
44089: IN
44090: NOT
44091: IFFALSE 44117
// control := _control [ rand ( 1 , _control ) ] ;
44093: LD_ADDR_VAR 0 4
44097: PUSH
44098: LD_VAR 0 12
44102: PUSH
44103: LD_INT 1
44105: PPUSH
44106: LD_VAR 0 12
44110: PPUSH
44111: CALL_OW 12
44115: ARRAY
44116: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44117: LD_VAR 0 2
44121: PPUSH
44122: LD_VAR 0 5
44126: PPUSH
44127: CALL 44485 0 2
44131: NOT
44132: IFFALSE 44191
// repeat weapon := _weapon [ 1 ] ;
44134: LD_ADDR_VAR 0 5
44138: PUSH
44139: LD_VAR 0 10
44143: PUSH
44144: LD_INT 1
44146: ARRAY
44147: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44148: LD_ADDR_VAR 0 10
44152: PUSH
44153: LD_VAR 0 10
44157: PPUSH
44158: LD_INT 1
44160: PPUSH
44161: CALL_OW 3
44165: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44166: LD_VAR 0 2
44170: PPUSH
44171: LD_VAR 0 5
44175: PPUSH
44176: CALL 44485 0 2
44180: PUSH
44181: LD_VAR 0 10
44185: PUSH
44186: EMPTY
44187: EQUAL
44188: OR
44189: IFFALSE 44134
// result := [ ] ;
44191: LD_ADDR_VAR 0 6
44195: PUSH
44196: EMPTY
44197: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44198: LD_VAR 0 1
44202: PPUSH
44203: LD_VAR 0 2
44207: PPUSH
44208: LD_VAR 0 3
44212: PPUSH
44213: LD_VAR 0 4
44217: PPUSH
44218: LD_VAR 0 5
44222: PPUSH
44223: CALL_OW 448
44227: IFFALSE 44260
// result := [ chassis , engine , control , weapon ] ;
44229: LD_ADDR_VAR 0 6
44233: PUSH
44234: LD_VAR 0 2
44238: PUSH
44239: LD_VAR 0 3
44243: PUSH
44244: LD_VAR 0 4
44248: PUSH
44249: LD_VAR 0 5
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: ST_TO_ADDR
// end ;
44260: LD_VAR 0 6
44264: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44265: LD_INT 0
44267: PPUSH
// if not chassis or not engine then
44268: LD_VAR 0 1
44272: NOT
44273: PUSH
44274: LD_VAR 0 2
44278: NOT
44279: OR
44280: IFFALSE 44284
// exit ;
44282: GO 44480
// case engine of engine_solar :
44284: LD_VAR 0 2
44288: PUSH
44289: LD_INT 2
44291: DOUBLE
44292: EQUAL
44293: IFTRUE 44297
44295: GO 44335
44297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44298: LD_ADDR_VAR 0 3
44302: PUSH
44303: LD_INT 11
44305: PUSH
44306: LD_INT 12
44308: PUSH
44309: LD_INT 13
44311: PUSH
44312: LD_INT 14
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: LD_INT 3
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: ST_TO_ADDR
44333: GO 44464
44335: LD_INT 1
44337: DOUBLE
44338: EQUAL
44339: IFTRUE 44343
44341: GO 44405
44343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44344: LD_ADDR_VAR 0 3
44348: PUSH
44349: LD_INT 11
44351: PUSH
44352: LD_INT 12
44354: PUSH
44355: LD_INT 13
44357: PUSH
44358: LD_INT 14
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: LD_INT 3
44369: PUSH
44370: LD_INT 4
44372: PUSH
44373: LD_INT 5
44375: PUSH
44376: LD_INT 21
44378: PUSH
44379: LD_INT 23
44381: PUSH
44382: LD_INT 22
44384: PUSH
44385: LD_INT 24
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: ST_TO_ADDR
44403: GO 44464
44405: LD_INT 3
44407: DOUBLE
44408: EQUAL
44409: IFTRUE 44413
44411: GO 44463
44413: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44414: LD_ADDR_VAR 0 3
44418: PUSH
44419: LD_INT 13
44421: PUSH
44422: LD_INT 14
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: LD_INT 3
44430: PUSH
44431: LD_INT 4
44433: PUSH
44434: LD_INT 5
44436: PUSH
44437: LD_INT 21
44439: PUSH
44440: LD_INT 22
44442: PUSH
44443: LD_INT 23
44445: PUSH
44446: LD_INT 24
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: ST_TO_ADDR
44461: GO 44464
44463: POP
// result := ( chassis in result ) ;
44464: LD_ADDR_VAR 0 3
44468: PUSH
44469: LD_VAR 0 1
44473: PUSH
44474: LD_VAR 0 3
44478: IN
44479: ST_TO_ADDR
// end ;
44480: LD_VAR 0 3
44484: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44485: LD_INT 0
44487: PPUSH
// if not chassis or not weapon then
44488: LD_VAR 0 1
44492: NOT
44493: PUSH
44494: LD_VAR 0 2
44498: NOT
44499: OR
44500: IFFALSE 44504
// exit ;
44502: GO 45564
// case weapon of us_machine_gun :
44504: LD_VAR 0 2
44508: PUSH
44509: LD_INT 2
44511: DOUBLE
44512: EQUAL
44513: IFTRUE 44517
44515: GO 44547
44517: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44518: LD_ADDR_VAR 0 3
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: LD_INT 4
44534: PUSH
44535: LD_INT 5
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: ST_TO_ADDR
44545: GO 45548
44547: LD_INT 3
44549: DOUBLE
44550: EQUAL
44551: IFTRUE 44555
44553: GO 44585
44555: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44556: LD_ADDR_VAR 0 3
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: LD_INT 3
44569: PUSH
44570: LD_INT 4
44572: PUSH
44573: LD_INT 5
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: ST_TO_ADDR
44583: GO 45548
44585: LD_INT 11
44587: DOUBLE
44588: EQUAL
44589: IFTRUE 44593
44591: GO 44623
44593: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44594: LD_ADDR_VAR 0 3
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: LD_INT 3
44607: PUSH
44608: LD_INT 4
44610: PUSH
44611: LD_INT 5
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: ST_TO_ADDR
44621: GO 45548
44623: LD_INT 4
44625: DOUBLE
44626: EQUAL
44627: IFTRUE 44631
44629: GO 44657
44631: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44632: LD_ADDR_VAR 0 3
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 3
44642: PUSH
44643: LD_INT 4
44645: PUSH
44646: LD_INT 5
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: ST_TO_ADDR
44655: GO 45548
44657: LD_INT 5
44659: DOUBLE
44660: EQUAL
44661: IFTRUE 44665
44663: GO 44691
44665: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44666: LD_ADDR_VAR 0 3
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: LD_INT 4
44679: PUSH
44680: LD_INT 5
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: ST_TO_ADDR
44689: GO 45548
44691: LD_INT 9
44693: DOUBLE
44694: EQUAL
44695: IFTRUE 44699
44697: GO 44725
44699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44700: LD_ADDR_VAR 0 3
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: LD_INT 3
44710: PUSH
44711: LD_INT 4
44713: PUSH
44714: LD_INT 5
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: ST_TO_ADDR
44723: GO 45548
44725: LD_INT 7
44727: DOUBLE
44728: EQUAL
44729: IFTRUE 44733
44731: GO 44759
44733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44734: LD_ADDR_VAR 0 3
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 3
44744: PUSH
44745: LD_INT 4
44747: PUSH
44748: LD_INT 5
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: ST_TO_ADDR
44757: GO 45548
44759: LD_INT 12
44761: DOUBLE
44762: EQUAL
44763: IFTRUE 44767
44765: GO 44793
44767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44768: LD_ADDR_VAR 0 3
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: LD_INT 3
44778: PUSH
44779: LD_INT 4
44781: PUSH
44782: LD_INT 5
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: ST_TO_ADDR
44791: GO 45548
44793: LD_INT 13
44795: DOUBLE
44796: EQUAL
44797: IFTRUE 44801
44799: GO 44827
44801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44802: LD_ADDR_VAR 0 3
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 3
44812: PUSH
44813: LD_INT 4
44815: PUSH
44816: LD_INT 5
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: ST_TO_ADDR
44825: GO 45548
44827: LD_INT 14
44829: DOUBLE
44830: EQUAL
44831: IFTRUE 44835
44833: GO 44853
44835: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44836: LD_ADDR_VAR 0 3
44840: PUSH
44841: LD_INT 4
44843: PUSH
44844: LD_INT 5
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: ST_TO_ADDR
44851: GO 45548
44853: LD_INT 6
44855: DOUBLE
44856: EQUAL
44857: IFTRUE 44861
44859: GO 44879
44861: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44862: LD_ADDR_VAR 0 3
44866: PUSH
44867: LD_INT 4
44869: PUSH
44870: LD_INT 5
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: ST_TO_ADDR
44877: GO 45548
44879: LD_INT 10
44881: DOUBLE
44882: EQUAL
44883: IFTRUE 44887
44885: GO 44905
44887: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44888: LD_ADDR_VAR 0 3
44892: PUSH
44893: LD_INT 4
44895: PUSH
44896: LD_INT 5
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: ST_TO_ADDR
44903: GO 45548
44905: LD_INT 22
44907: DOUBLE
44908: EQUAL
44909: IFTRUE 44913
44911: GO 44939
44913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44914: LD_ADDR_VAR 0 3
44918: PUSH
44919: LD_INT 11
44921: PUSH
44922: LD_INT 12
44924: PUSH
44925: LD_INT 13
44927: PUSH
44928: LD_INT 14
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
44937: GO 45548
44939: LD_INT 23
44941: DOUBLE
44942: EQUAL
44943: IFTRUE 44947
44945: GO 44973
44947: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44948: LD_ADDR_VAR 0 3
44952: PUSH
44953: LD_INT 11
44955: PUSH
44956: LD_INT 12
44958: PUSH
44959: LD_INT 13
44961: PUSH
44962: LD_INT 14
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: ST_TO_ADDR
44971: GO 45548
44973: LD_INT 24
44975: DOUBLE
44976: EQUAL
44977: IFTRUE 44981
44979: GO 45007
44981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44982: LD_ADDR_VAR 0 3
44986: PUSH
44987: LD_INT 11
44989: PUSH
44990: LD_INT 12
44992: PUSH
44993: LD_INT 13
44995: PUSH
44996: LD_INT 14
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: ST_TO_ADDR
45005: GO 45548
45007: LD_INT 30
45009: DOUBLE
45010: EQUAL
45011: IFTRUE 45015
45013: GO 45041
45015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45016: LD_ADDR_VAR 0 3
45020: PUSH
45021: LD_INT 11
45023: PUSH
45024: LD_INT 12
45026: PUSH
45027: LD_INT 13
45029: PUSH
45030: LD_INT 14
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: ST_TO_ADDR
45039: GO 45548
45041: LD_INT 25
45043: DOUBLE
45044: EQUAL
45045: IFTRUE 45049
45047: GO 45067
45049: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45050: LD_ADDR_VAR 0 3
45054: PUSH
45055: LD_INT 13
45057: PUSH
45058: LD_INT 14
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: ST_TO_ADDR
45065: GO 45548
45067: LD_INT 27
45069: DOUBLE
45070: EQUAL
45071: IFTRUE 45075
45073: GO 45093
45075: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45076: LD_ADDR_VAR 0 3
45080: PUSH
45081: LD_INT 13
45083: PUSH
45084: LD_INT 14
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: ST_TO_ADDR
45091: GO 45548
45093: LD_INT 92
45095: DOUBLE
45096: EQUAL
45097: IFTRUE 45101
45099: GO 45127
45101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45102: LD_ADDR_VAR 0 3
45106: PUSH
45107: LD_INT 11
45109: PUSH
45110: LD_INT 12
45112: PUSH
45113: LD_INT 13
45115: PUSH
45116: LD_INT 14
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: ST_TO_ADDR
45125: GO 45548
45127: LD_INT 28
45129: DOUBLE
45130: EQUAL
45131: IFTRUE 45135
45133: GO 45153
45135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45136: LD_ADDR_VAR 0 3
45140: PUSH
45141: LD_INT 13
45143: PUSH
45144: LD_INT 14
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: ST_TO_ADDR
45151: GO 45548
45153: LD_INT 29
45155: DOUBLE
45156: EQUAL
45157: IFTRUE 45161
45159: GO 45179
45161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45162: LD_ADDR_VAR 0 3
45166: PUSH
45167: LD_INT 13
45169: PUSH
45170: LD_INT 14
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: ST_TO_ADDR
45177: GO 45548
45179: LD_INT 31
45181: DOUBLE
45182: EQUAL
45183: IFTRUE 45187
45185: GO 45205
45187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45188: LD_ADDR_VAR 0 3
45192: PUSH
45193: LD_INT 13
45195: PUSH
45196: LD_INT 14
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: ST_TO_ADDR
45203: GO 45548
45205: LD_INT 26
45207: DOUBLE
45208: EQUAL
45209: IFTRUE 45213
45211: GO 45231
45213: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45214: LD_ADDR_VAR 0 3
45218: PUSH
45219: LD_INT 13
45221: PUSH
45222: LD_INT 14
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: ST_TO_ADDR
45229: GO 45548
45231: LD_INT 42
45233: DOUBLE
45234: EQUAL
45235: IFTRUE 45239
45237: GO 45265
45239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45240: LD_ADDR_VAR 0 3
45244: PUSH
45245: LD_INT 21
45247: PUSH
45248: LD_INT 22
45250: PUSH
45251: LD_INT 23
45253: PUSH
45254: LD_INT 24
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: ST_TO_ADDR
45263: GO 45548
45265: LD_INT 43
45267: DOUBLE
45268: EQUAL
45269: IFTRUE 45273
45271: GO 45299
45273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45274: LD_ADDR_VAR 0 3
45278: PUSH
45279: LD_INT 21
45281: PUSH
45282: LD_INT 22
45284: PUSH
45285: LD_INT 23
45287: PUSH
45288: LD_INT 24
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: ST_TO_ADDR
45297: GO 45548
45299: LD_INT 44
45301: DOUBLE
45302: EQUAL
45303: IFTRUE 45307
45305: GO 45333
45307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45308: LD_ADDR_VAR 0 3
45312: PUSH
45313: LD_INT 21
45315: PUSH
45316: LD_INT 22
45318: PUSH
45319: LD_INT 23
45321: PUSH
45322: LD_INT 24
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: ST_TO_ADDR
45331: GO 45548
45333: LD_INT 45
45335: DOUBLE
45336: EQUAL
45337: IFTRUE 45341
45339: GO 45367
45341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45342: LD_ADDR_VAR 0 3
45346: PUSH
45347: LD_INT 21
45349: PUSH
45350: LD_INT 22
45352: PUSH
45353: LD_INT 23
45355: PUSH
45356: LD_INT 24
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: ST_TO_ADDR
45365: GO 45548
45367: LD_INT 49
45369: DOUBLE
45370: EQUAL
45371: IFTRUE 45375
45373: GO 45401
45375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45376: LD_ADDR_VAR 0 3
45380: PUSH
45381: LD_INT 21
45383: PUSH
45384: LD_INT 22
45386: PUSH
45387: LD_INT 23
45389: PUSH
45390: LD_INT 24
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: ST_TO_ADDR
45399: GO 45548
45401: LD_INT 51
45403: DOUBLE
45404: EQUAL
45405: IFTRUE 45409
45407: GO 45435
45409: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45410: LD_ADDR_VAR 0 3
45414: PUSH
45415: LD_INT 21
45417: PUSH
45418: LD_INT 22
45420: PUSH
45421: LD_INT 23
45423: PUSH
45424: LD_INT 24
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: ST_TO_ADDR
45433: GO 45548
45435: LD_INT 52
45437: DOUBLE
45438: EQUAL
45439: IFTRUE 45443
45441: GO 45469
45443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45444: LD_ADDR_VAR 0 3
45448: PUSH
45449: LD_INT 21
45451: PUSH
45452: LD_INT 22
45454: PUSH
45455: LD_INT 23
45457: PUSH
45458: LD_INT 24
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: ST_TO_ADDR
45467: GO 45548
45469: LD_INT 53
45471: DOUBLE
45472: EQUAL
45473: IFTRUE 45477
45475: GO 45495
45477: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45478: LD_ADDR_VAR 0 3
45482: PUSH
45483: LD_INT 23
45485: PUSH
45486: LD_INT 24
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: ST_TO_ADDR
45493: GO 45548
45495: LD_INT 46
45497: DOUBLE
45498: EQUAL
45499: IFTRUE 45503
45501: GO 45521
45503: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45504: LD_ADDR_VAR 0 3
45508: PUSH
45509: LD_INT 23
45511: PUSH
45512: LD_INT 24
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: ST_TO_ADDR
45519: GO 45548
45521: LD_INT 47
45523: DOUBLE
45524: EQUAL
45525: IFTRUE 45529
45527: GO 45547
45529: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45530: LD_ADDR_VAR 0 3
45534: PUSH
45535: LD_INT 23
45537: PUSH
45538: LD_INT 24
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: ST_TO_ADDR
45545: GO 45548
45547: POP
// result := ( chassis in result ) ;
45548: LD_ADDR_VAR 0 3
45552: PUSH
45553: LD_VAR 0 1
45557: PUSH
45558: LD_VAR 0 3
45562: IN
45563: ST_TO_ADDR
// end ;
45564: LD_VAR 0 3
45568: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45569: LD_INT 0
45571: PPUSH
45572: PPUSH
45573: PPUSH
45574: PPUSH
45575: PPUSH
45576: PPUSH
45577: PPUSH
// result := array ;
45578: LD_ADDR_VAR 0 5
45582: PUSH
45583: LD_VAR 0 1
45587: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45588: LD_VAR 0 1
45592: NOT
45593: PUSH
45594: LD_VAR 0 2
45598: NOT
45599: OR
45600: PUSH
45601: LD_VAR 0 3
45605: NOT
45606: OR
45607: PUSH
45608: LD_VAR 0 2
45612: PUSH
45613: LD_VAR 0 1
45617: GREATER
45618: OR
45619: PUSH
45620: LD_VAR 0 3
45624: PUSH
45625: LD_VAR 0 1
45629: GREATER
45630: OR
45631: IFFALSE 45635
// exit ;
45633: GO 45931
// if direction then
45635: LD_VAR 0 4
45639: IFFALSE 45703
// begin d := 1 ;
45641: LD_ADDR_VAR 0 9
45645: PUSH
45646: LD_INT 1
45648: ST_TO_ADDR
// if i_from > i_to then
45649: LD_VAR 0 2
45653: PUSH
45654: LD_VAR 0 3
45658: GREATER
45659: IFFALSE 45685
// length := ( array - i_from ) + i_to else
45661: LD_ADDR_VAR 0 11
45665: PUSH
45666: LD_VAR 0 1
45670: PUSH
45671: LD_VAR 0 2
45675: MINUS
45676: PUSH
45677: LD_VAR 0 3
45681: PLUS
45682: ST_TO_ADDR
45683: GO 45701
// length := i_to - i_from ;
45685: LD_ADDR_VAR 0 11
45689: PUSH
45690: LD_VAR 0 3
45694: PUSH
45695: LD_VAR 0 2
45699: MINUS
45700: ST_TO_ADDR
// end else
45701: GO 45764
// begin d := - 1 ;
45703: LD_ADDR_VAR 0 9
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: ST_TO_ADDR
// if i_from > i_to then
45712: LD_VAR 0 2
45716: PUSH
45717: LD_VAR 0 3
45721: GREATER
45722: IFFALSE 45742
// length := i_from - i_to else
45724: LD_ADDR_VAR 0 11
45728: PUSH
45729: LD_VAR 0 2
45733: PUSH
45734: LD_VAR 0 3
45738: MINUS
45739: ST_TO_ADDR
45740: GO 45764
// length := ( array - i_to ) + i_from ;
45742: LD_ADDR_VAR 0 11
45746: PUSH
45747: LD_VAR 0 1
45751: PUSH
45752: LD_VAR 0 3
45756: MINUS
45757: PUSH
45758: LD_VAR 0 2
45762: PLUS
45763: ST_TO_ADDR
// end ; if not length then
45764: LD_VAR 0 11
45768: NOT
45769: IFFALSE 45773
// exit ;
45771: GO 45931
// tmp := array ;
45773: LD_ADDR_VAR 0 10
45777: PUSH
45778: LD_VAR 0 1
45782: ST_TO_ADDR
// for i = 1 to length do
45783: LD_ADDR_VAR 0 6
45787: PUSH
45788: DOUBLE
45789: LD_INT 1
45791: DEC
45792: ST_TO_ADDR
45793: LD_VAR 0 11
45797: PUSH
45798: FOR_TO
45799: IFFALSE 45919
// begin for j = 1 to array do
45801: LD_ADDR_VAR 0 7
45805: PUSH
45806: DOUBLE
45807: LD_INT 1
45809: DEC
45810: ST_TO_ADDR
45811: LD_VAR 0 1
45815: PUSH
45816: FOR_TO
45817: IFFALSE 45905
// begin k := j + d ;
45819: LD_ADDR_VAR 0 8
45823: PUSH
45824: LD_VAR 0 7
45828: PUSH
45829: LD_VAR 0 9
45833: PLUS
45834: ST_TO_ADDR
// if k > array then
45835: LD_VAR 0 8
45839: PUSH
45840: LD_VAR 0 1
45844: GREATER
45845: IFFALSE 45855
// k := 1 ;
45847: LD_ADDR_VAR 0 8
45851: PUSH
45852: LD_INT 1
45854: ST_TO_ADDR
// if not k then
45855: LD_VAR 0 8
45859: NOT
45860: IFFALSE 45872
// k := array ;
45862: LD_ADDR_VAR 0 8
45866: PUSH
45867: LD_VAR 0 1
45871: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45872: LD_ADDR_VAR 0 10
45876: PUSH
45877: LD_VAR 0 10
45881: PPUSH
45882: LD_VAR 0 8
45886: PPUSH
45887: LD_VAR 0 1
45891: PUSH
45892: LD_VAR 0 7
45896: ARRAY
45897: PPUSH
45898: CALL_OW 1
45902: ST_TO_ADDR
// end ;
45903: GO 45816
45905: POP
45906: POP
// array := tmp ;
45907: LD_ADDR_VAR 0 1
45911: PUSH
45912: LD_VAR 0 10
45916: ST_TO_ADDR
// end ;
45917: GO 45798
45919: POP
45920: POP
// result := array ;
45921: LD_ADDR_VAR 0 5
45925: PUSH
45926: LD_VAR 0 1
45930: ST_TO_ADDR
// end ;
45931: LD_VAR 0 5
45935: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45936: LD_INT 0
45938: PPUSH
45939: PPUSH
// result := 0 ;
45940: LD_ADDR_VAR 0 3
45944: PUSH
45945: LD_INT 0
45947: ST_TO_ADDR
// if not array or not value in array then
45948: LD_VAR 0 1
45952: NOT
45953: PUSH
45954: LD_VAR 0 2
45958: PUSH
45959: LD_VAR 0 1
45963: IN
45964: NOT
45965: OR
45966: IFFALSE 45970
// exit ;
45968: GO 46024
// for i = 1 to array do
45970: LD_ADDR_VAR 0 4
45974: PUSH
45975: DOUBLE
45976: LD_INT 1
45978: DEC
45979: ST_TO_ADDR
45980: LD_VAR 0 1
45984: PUSH
45985: FOR_TO
45986: IFFALSE 46022
// if value = array [ i ] then
45988: LD_VAR 0 2
45992: PUSH
45993: LD_VAR 0 1
45997: PUSH
45998: LD_VAR 0 4
46002: ARRAY
46003: EQUAL
46004: IFFALSE 46020
// begin result := i ;
46006: LD_ADDR_VAR 0 3
46010: PUSH
46011: LD_VAR 0 4
46015: ST_TO_ADDR
// exit ;
46016: POP
46017: POP
46018: GO 46024
// end ;
46020: GO 45985
46022: POP
46023: POP
// end ;
46024: LD_VAR 0 3
46028: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46029: LD_INT 0
46031: PPUSH
// vc_chassis := chassis ;
46032: LD_ADDR_OWVAR 37
46036: PUSH
46037: LD_VAR 0 1
46041: ST_TO_ADDR
// vc_engine := engine ;
46042: LD_ADDR_OWVAR 39
46046: PUSH
46047: LD_VAR 0 2
46051: ST_TO_ADDR
// vc_control := control ;
46052: LD_ADDR_OWVAR 38
46056: PUSH
46057: LD_VAR 0 3
46061: ST_TO_ADDR
// vc_weapon := weapon ;
46062: LD_ADDR_OWVAR 40
46066: PUSH
46067: LD_VAR 0 4
46071: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46072: LD_ADDR_OWVAR 41
46076: PUSH
46077: LD_VAR 0 5
46081: ST_TO_ADDR
// end ;
46082: LD_VAR 0 6
46086: RET
// export function WantPlant ( unit ) ; var task ; begin
46087: LD_INT 0
46089: PPUSH
46090: PPUSH
// result := false ;
46091: LD_ADDR_VAR 0 2
46095: PUSH
46096: LD_INT 0
46098: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46099: LD_ADDR_VAR 0 3
46103: PUSH
46104: LD_VAR 0 1
46108: PPUSH
46109: CALL_OW 437
46113: ST_TO_ADDR
// if task then
46114: LD_VAR 0 3
46118: IFFALSE 46146
// if task [ 1 ] [ 1 ] = p then
46120: LD_VAR 0 3
46124: PUSH
46125: LD_INT 1
46127: ARRAY
46128: PUSH
46129: LD_INT 1
46131: ARRAY
46132: PUSH
46133: LD_STRING p
46135: EQUAL
46136: IFFALSE 46146
// result := true ;
46138: LD_ADDR_VAR 0 2
46142: PUSH
46143: LD_INT 1
46145: ST_TO_ADDR
// end ;
46146: LD_VAR 0 2
46150: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46151: LD_INT 0
46153: PPUSH
46154: PPUSH
46155: PPUSH
46156: PPUSH
// if pos < 1 then
46157: LD_VAR 0 2
46161: PUSH
46162: LD_INT 1
46164: LESS
46165: IFFALSE 46169
// exit ;
46167: GO 46472
// if pos = 1 then
46169: LD_VAR 0 2
46173: PUSH
46174: LD_INT 1
46176: EQUAL
46177: IFFALSE 46210
// result := Replace ( arr , pos [ 1 ] , value ) else
46179: LD_ADDR_VAR 0 4
46183: PUSH
46184: LD_VAR 0 1
46188: PPUSH
46189: LD_VAR 0 2
46193: PUSH
46194: LD_INT 1
46196: ARRAY
46197: PPUSH
46198: LD_VAR 0 3
46202: PPUSH
46203: CALL_OW 1
46207: ST_TO_ADDR
46208: GO 46472
// begin tmp := arr ;
46210: LD_ADDR_VAR 0 6
46214: PUSH
46215: LD_VAR 0 1
46219: ST_TO_ADDR
// s_arr := [ tmp ] ;
46220: LD_ADDR_VAR 0 7
46224: PUSH
46225: LD_VAR 0 6
46229: PUSH
46230: EMPTY
46231: LIST
46232: ST_TO_ADDR
// for i = 1 to pos - 1 do
46233: LD_ADDR_VAR 0 5
46237: PUSH
46238: DOUBLE
46239: LD_INT 1
46241: DEC
46242: ST_TO_ADDR
46243: LD_VAR 0 2
46247: PUSH
46248: LD_INT 1
46250: MINUS
46251: PUSH
46252: FOR_TO
46253: IFFALSE 46298
// begin tmp := tmp [ pos [ i ] ] ;
46255: LD_ADDR_VAR 0 6
46259: PUSH
46260: LD_VAR 0 6
46264: PUSH
46265: LD_VAR 0 2
46269: PUSH
46270: LD_VAR 0 5
46274: ARRAY
46275: ARRAY
46276: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46277: LD_ADDR_VAR 0 7
46281: PUSH
46282: LD_VAR 0 7
46286: PUSH
46287: LD_VAR 0 6
46291: PUSH
46292: EMPTY
46293: LIST
46294: ADD
46295: ST_TO_ADDR
// end ;
46296: GO 46252
46298: POP
46299: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46300: LD_ADDR_VAR 0 6
46304: PUSH
46305: LD_VAR 0 6
46309: PPUSH
46310: LD_VAR 0 2
46314: PUSH
46315: LD_VAR 0 2
46319: ARRAY
46320: PPUSH
46321: LD_VAR 0 3
46325: PPUSH
46326: CALL_OW 1
46330: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46331: LD_ADDR_VAR 0 7
46335: PUSH
46336: LD_VAR 0 7
46340: PPUSH
46341: LD_VAR 0 7
46345: PPUSH
46346: LD_VAR 0 6
46350: PPUSH
46351: CALL_OW 1
46355: ST_TO_ADDR
// for i = s_arr downto 2 do
46356: LD_ADDR_VAR 0 5
46360: PUSH
46361: DOUBLE
46362: LD_VAR 0 7
46366: INC
46367: ST_TO_ADDR
46368: LD_INT 2
46370: PUSH
46371: FOR_DOWNTO
46372: IFFALSE 46456
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46374: LD_ADDR_VAR 0 6
46378: PUSH
46379: LD_VAR 0 7
46383: PUSH
46384: LD_VAR 0 5
46388: PUSH
46389: LD_INT 1
46391: MINUS
46392: ARRAY
46393: PPUSH
46394: LD_VAR 0 2
46398: PUSH
46399: LD_VAR 0 5
46403: PUSH
46404: LD_INT 1
46406: MINUS
46407: ARRAY
46408: PPUSH
46409: LD_VAR 0 7
46413: PUSH
46414: LD_VAR 0 5
46418: ARRAY
46419: PPUSH
46420: CALL_OW 1
46424: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46425: LD_ADDR_VAR 0 7
46429: PUSH
46430: LD_VAR 0 7
46434: PPUSH
46435: LD_VAR 0 5
46439: PUSH
46440: LD_INT 1
46442: MINUS
46443: PPUSH
46444: LD_VAR 0 6
46448: PPUSH
46449: CALL_OW 1
46453: ST_TO_ADDR
// end ;
46454: GO 46371
46456: POP
46457: POP
// result := s_arr [ 1 ] ;
46458: LD_ADDR_VAR 0 4
46462: PUSH
46463: LD_VAR 0 7
46467: PUSH
46468: LD_INT 1
46470: ARRAY
46471: ST_TO_ADDR
// end ; end ;
46472: LD_VAR 0 4
46476: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46477: LD_INT 0
46479: PPUSH
46480: PPUSH
// if not list then
46481: LD_VAR 0 1
46485: NOT
46486: IFFALSE 46490
// exit ;
46488: GO 46581
// i := list [ pos1 ] ;
46490: LD_ADDR_VAR 0 5
46494: PUSH
46495: LD_VAR 0 1
46499: PUSH
46500: LD_VAR 0 2
46504: ARRAY
46505: ST_TO_ADDR
// if not i then
46506: LD_VAR 0 5
46510: NOT
46511: IFFALSE 46515
// exit ;
46513: GO 46581
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46515: LD_ADDR_VAR 0 1
46519: PUSH
46520: LD_VAR 0 1
46524: PPUSH
46525: LD_VAR 0 2
46529: PPUSH
46530: LD_VAR 0 1
46534: PUSH
46535: LD_VAR 0 3
46539: ARRAY
46540: PPUSH
46541: CALL_OW 1
46545: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46546: LD_ADDR_VAR 0 1
46550: PUSH
46551: LD_VAR 0 1
46555: PPUSH
46556: LD_VAR 0 3
46560: PPUSH
46561: LD_VAR 0 5
46565: PPUSH
46566: CALL_OW 1
46570: ST_TO_ADDR
// result := list ;
46571: LD_ADDR_VAR 0 4
46575: PUSH
46576: LD_VAR 0 1
46580: ST_TO_ADDR
// end ;
46581: LD_VAR 0 4
46585: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46586: LD_INT 0
46588: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46589: LD_ADDR_VAR 0 5
46593: PUSH
46594: LD_VAR 0 1
46598: PPUSH
46599: CALL_OW 250
46603: PPUSH
46604: LD_VAR 0 1
46608: PPUSH
46609: CALL_OW 251
46613: PPUSH
46614: LD_VAR 0 2
46618: PPUSH
46619: LD_VAR 0 3
46623: PPUSH
46624: LD_VAR 0 4
46628: PPUSH
46629: CALL 46639 0 5
46633: ST_TO_ADDR
// end ;
46634: LD_VAR 0 5
46638: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46639: LD_INT 0
46641: PPUSH
46642: PPUSH
46643: PPUSH
46644: PPUSH
// if not list then
46645: LD_VAR 0 3
46649: NOT
46650: IFFALSE 46654
// exit ;
46652: GO 47042
// result := [ ] ;
46654: LD_ADDR_VAR 0 6
46658: PUSH
46659: EMPTY
46660: ST_TO_ADDR
// for i in list do
46661: LD_ADDR_VAR 0 7
46665: PUSH
46666: LD_VAR 0 3
46670: PUSH
46671: FOR_IN
46672: IFFALSE 46874
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46674: LD_ADDR_VAR 0 9
46678: PUSH
46679: LD_VAR 0 7
46683: PPUSH
46684: LD_VAR 0 1
46688: PPUSH
46689: LD_VAR 0 2
46693: PPUSH
46694: CALL_OW 297
46698: ST_TO_ADDR
// if not result then
46699: LD_VAR 0 6
46703: NOT
46704: IFFALSE 46730
// result := [ [ i , tmp ] ] else
46706: LD_ADDR_VAR 0 6
46710: PUSH
46711: LD_VAR 0 7
46715: PUSH
46716: LD_VAR 0 9
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: EMPTY
46726: LIST
46727: ST_TO_ADDR
46728: GO 46872
// begin if result [ result ] [ 2 ] < tmp then
46730: LD_VAR 0 6
46734: PUSH
46735: LD_VAR 0 6
46739: ARRAY
46740: PUSH
46741: LD_INT 2
46743: ARRAY
46744: PUSH
46745: LD_VAR 0 9
46749: LESS
46750: IFFALSE 46792
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46752: LD_ADDR_VAR 0 6
46756: PUSH
46757: LD_VAR 0 6
46761: PPUSH
46762: LD_VAR 0 6
46766: PUSH
46767: LD_INT 1
46769: PLUS
46770: PPUSH
46771: LD_VAR 0 7
46775: PUSH
46776: LD_VAR 0 9
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PPUSH
46785: CALL_OW 2
46789: ST_TO_ADDR
46790: GO 46872
// for j = 1 to result do
46792: LD_ADDR_VAR 0 8
46796: PUSH
46797: DOUBLE
46798: LD_INT 1
46800: DEC
46801: ST_TO_ADDR
46802: LD_VAR 0 6
46806: PUSH
46807: FOR_TO
46808: IFFALSE 46870
// begin if tmp < result [ j ] [ 2 ] then
46810: LD_VAR 0 9
46814: PUSH
46815: LD_VAR 0 6
46819: PUSH
46820: LD_VAR 0 8
46824: ARRAY
46825: PUSH
46826: LD_INT 2
46828: ARRAY
46829: LESS
46830: IFFALSE 46868
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46832: LD_ADDR_VAR 0 6
46836: PUSH
46837: LD_VAR 0 6
46841: PPUSH
46842: LD_VAR 0 8
46846: PPUSH
46847: LD_VAR 0 7
46851: PUSH
46852: LD_VAR 0 9
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PPUSH
46861: CALL_OW 2
46865: ST_TO_ADDR
// break ;
46866: GO 46870
// end ; end ;
46868: GO 46807
46870: POP
46871: POP
// end ; end ;
46872: GO 46671
46874: POP
46875: POP
// if result and not asc then
46876: LD_VAR 0 6
46880: PUSH
46881: LD_VAR 0 4
46885: NOT
46886: AND
46887: IFFALSE 46962
// begin tmp := result ;
46889: LD_ADDR_VAR 0 9
46893: PUSH
46894: LD_VAR 0 6
46898: ST_TO_ADDR
// for i = tmp downto 1 do
46899: LD_ADDR_VAR 0 7
46903: PUSH
46904: DOUBLE
46905: LD_VAR 0 9
46909: INC
46910: ST_TO_ADDR
46911: LD_INT 1
46913: PUSH
46914: FOR_DOWNTO
46915: IFFALSE 46960
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46917: LD_ADDR_VAR 0 6
46921: PUSH
46922: LD_VAR 0 6
46926: PPUSH
46927: LD_VAR 0 9
46931: PUSH
46932: LD_VAR 0 7
46936: MINUS
46937: PUSH
46938: LD_INT 1
46940: PLUS
46941: PPUSH
46942: LD_VAR 0 9
46946: PUSH
46947: LD_VAR 0 7
46951: ARRAY
46952: PPUSH
46953: CALL_OW 1
46957: ST_TO_ADDR
46958: GO 46914
46960: POP
46961: POP
// end ; tmp := [ ] ;
46962: LD_ADDR_VAR 0 9
46966: PUSH
46967: EMPTY
46968: ST_TO_ADDR
// if mode then
46969: LD_VAR 0 5
46973: IFFALSE 47042
// begin for i = 1 to result do
46975: LD_ADDR_VAR 0 7
46979: PUSH
46980: DOUBLE
46981: LD_INT 1
46983: DEC
46984: ST_TO_ADDR
46985: LD_VAR 0 6
46989: PUSH
46990: FOR_TO
46991: IFFALSE 47030
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46993: LD_ADDR_VAR 0 9
46997: PUSH
46998: LD_VAR 0 9
47002: PPUSH
47003: LD_VAR 0 7
47007: PPUSH
47008: LD_VAR 0 6
47012: PUSH
47013: LD_VAR 0 7
47017: ARRAY
47018: PUSH
47019: LD_INT 1
47021: ARRAY
47022: PPUSH
47023: CALL_OW 1
47027: ST_TO_ADDR
47028: GO 46990
47030: POP
47031: POP
// result := tmp ;
47032: LD_ADDR_VAR 0 6
47036: PUSH
47037: LD_VAR 0 9
47041: ST_TO_ADDR
// end ; end ;
47042: LD_VAR 0 6
47046: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47047: LD_INT 0
47049: PPUSH
47050: PPUSH
47051: PPUSH
47052: PPUSH
47053: PPUSH
47054: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47055: LD_ADDR_VAR 0 5
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: ST_TO_ADDR
// if not x or not y then
47077: LD_VAR 0 2
47081: NOT
47082: PUSH
47083: LD_VAR 0 3
47087: NOT
47088: OR
47089: IFFALSE 47093
// exit ;
47091: GO 48743
// if not range then
47093: LD_VAR 0 4
47097: NOT
47098: IFFALSE 47108
// range := 10 ;
47100: LD_ADDR_VAR 0 4
47104: PUSH
47105: LD_INT 10
47107: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47108: LD_ADDR_VAR 0 8
47112: PUSH
47113: LD_INT 81
47115: PUSH
47116: LD_VAR 0 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 92
47127: PUSH
47128: LD_VAR 0 2
47132: PUSH
47133: LD_VAR 0 3
47137: PUSH
47138: LD_VAR 0 4
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 3
47151: PUSH
47152: LD_INT 21
47154: PUSH
47155: LD_INT 3
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: PPUSH
47171: CALL_OW 69
47175: ST_TO_ADDR
// if not tmp then
47176: LD_VAR 0 8
47180: NOT
47181: IFFALSE 47185
// exit ;
47183: GO 48743
// for i in tmp do
47185: LD_ADDR_VAR 0 6
47189: PUSH
47190: LD_VAR 0 8
47194: PUSH
47195: FOR_IN
47196: IFFALSE 48718
// begin points := [ 0 , 0 , 0 ] ;
47198: LD_ADDR_VAR 0 9
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: LIST
47216: ST_TO_ADDR
// bpoints := 1 ;
47217: LD_ADDR_VAR 0 10
47221: PUSH
47222: LD_INT 1
47224: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47225: LD_VAR 0 6
47229: PPUSH
47230: CALL_OW 247
47234: PUSH
47235: LD_INT 1
47237: DOUBLE
47238: EQUAL
47239: IFTRUE 47243
47241: GO 47821
47243: POP
// begin if GetClass ( i ) = 1 then
47244: LD_VAR 0 6
47248: PPUSH
47249: CALL_OW 257
47253: PUSH
47254: LD_INT 1
47256: EQUAL
47257: IFFALSE 47278
// points := [ 10 , 5 , 3 ] ;
47259: LD_ADDR_VAR 0 9
47263: PUSH
47264: LD_INT 10
47266: PUSH
47267: LD_INT 5
47269: PUSH
47270: LD_INT 3
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47278: LD_VAR 0 6
47282: PPUSH
47283: CALL_OW 257
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 3
47293: PUSH
47294: LD_INT 4
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: IN
47302: IFFALSE 47323
// points := [ 3 , 2 , 1 ] ;
47304: LD_ADDR_VAR 0 9
47308: PUSH
47309: LD_INT 3
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47323: LD_VAR 0 6
47327: PPUSH
47328: CALL_OW 257
47332: PUSH
47333: LD_INT 5
47335: EQUAL
47336: IFFALSE 47357
// points := [ 130 , 5 , 2 ] ;
47338: LD_ADDR_VAR 0 9
47342: PUSH
47343: LD_INT 130
47345: PUSH
47346: LD_INT 5
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47357: LD_VAR 0 6
47361: PPUSH
47362: CALL_OW 257
47366: PUSH
47367: LD_INT 8
47369: EQUAL
47370: IFFALSE 47391
// points := [ 35 , 35 , 30 ] ;
47372: LD_ADDR_VAR 0 9
47376: PUSH
47377: LD_INT 35
47379: PUSH
47380: LD_INT 35
47382: PUSH
47383: LD_INT 30
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47391: LD_VAR 0 6
47395: PPUSH
47396: CALL_OW 257
47400: PUSH
47401: LD_INT 9
47403: EQUAL
47404: IFFALSE 47425
// points := [ 20 , 55 , 40 ] ;
47406: LD_ADDR_VAR 0 9
47410: PUSH
47411: LD_INT 20
47413: PUSH
47414: LD_INT 55
47416: PUSH
47417: LD_INT 40
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47425: LD_VAR 0 6
47429: PPUSH
47430: CALL_OW 257
47434: PUSH
47435: LD_INT 12
47437: PUSH
47438: LD_INT 16
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: IN
47445: IFFALSE 47466
// points := [ 5 , 3 , 2 ] ;
47447: LD_ADDR_VAR 0 9
47451: PUSH
47452: LD_INT 5
47454: PUSH
47455: LD_INT 3
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47466: LD_VAR 0 6
47470: PPUSH
47471: CALL_OW 257
47475: PUSH
47476: LD_INT 17
47478: EQUAL
47479: IFFALSE 47500
// points := [ 100 , 50 , 75 ] ;
47481: LD_ADDR_VAR 0 9
47485: PUSH
47486: LD_INT 100
47488: PUSH
47489: LD_INT 50
47491: PUSH
47492: LD_INT 75
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47500: LD_VAR 0 6
47504: PPUSH
47505: CALL_OW 257
47509: PUSH
47510: LD_INT 15
47512: EQUAL
47513: IFFALSE 47534
// points := [ 10 , 5 , 3 ] ;
47515: LD_ADDR_VAR 0 9
47519: PUSH
47520: LD_INT 10
47522: PUSH
47523: LD_INT 5
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47534: LD_VAR 0 6
47538: PPUSH
47539: CALL_OW 257
47543: PUSH
47544: LD_INT 14
47546: EQUAL
47547: IFFALSE 47568
// points := [ 10 , 0 , 0 ] ;
47549: LD_ADDR_VAR 0 9
47553: PUSH
47554: LD_INT 10
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: LIST
47567: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47568: LD_VAR 0 6
47572: PPUSH
47573: CALL_OW 257
47577: PUSH
47578: LD_INT 11
47580: EQUAL
47581: IFFALSE 47602
// points := [ 30 , 10 , 5 ] ;
47583: LD_ADDR_VAR 0 9
47587: PUSH
47588: LD_INT 30
47590: PUSH
47591: LD_INT 10
47593: PUSH
47594: LD_INT 5
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47602: LD_VAR 0 1
47606: PPUSH
47607: LD_INT 5
47609: PPUSH
47610: CALL_OW 321
47614: PUSH
47615: LD_INT 2
47617: EQUAL
47618: IFFALSE 47635
// bpoints := bpoints * 1.8 ;
47620: LD_ADDR_VAR 0 10
47624: PUSH
47625: LD_VAR 0 10
47629: PUSH
47630: LD_REAL  1.80000000000000E+0000
47633: MUL
47634: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47635: LD_VAR 0 6
47639: PPUSH
47640: CALL_OW 257
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: LD_INT 4
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: IN
47663: PUSH
47664: LD_VAR 0 1
47668: PPUSH
47669: LD_INT 51
47671: PPUSH
47672: CALL_OW 321
47676: PUSH
47677: LD_INT 2
47679: EQUAL
47680: AND
47681: IFFALSE 47698
// bpoints := bpoints * 1.2 ;
47683: LD_ADDR_VAR 0 10
47687: PUSH
47688: LD_VAR 0 10
47692: PUSH
47693: LD_REAL  1.20000000000000E+0000
47696: MUL
47697: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47698: LD_VAR 0 6
47702: PPUSH
47703: CALL_OW 257
47707: PUSH
47708: LD_INT 5
47710: PUSH
47711: LD_INT 7
47713: PUSH
47714: LD_INT 9
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: IN
47722: PUSH
47723: LD_VAR 0 1
47727: PPUSH
47728: LD_INT 52
47730: PPUSH
47731: CALL_OW 321
47735: PUSH
47736: LD_INT 2
47738: EQUAL
47739: AND
47740: IFFALSE 47757
// bpoints := bpoints * 1.5 ;
47742: LD_ADDR_VAR 0 10
47746: PUSH
47747: LD_VAR 0 10
47751: PUSH
47752: LD_REAL  1.50000000000000E+0000
47755: MUL
47756: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47757: LD_VAR 0 1
47761: PPUSH
47762: LD_INT 66
47764: PPUSH
47765: CALL_OW 321
47769: PUSH
47770: LD_INT 2
47772: EQUAL
47773: IFFALSE 47790
// bpoints := bpoints * 1.1 ;
47775: LD_ADDR_VAR 0 10
47779: PUSH
47780: LD_VAR 0 10
47784: PUSH
47785: LD_REAL  1.10000000000000E+0000
47788: MUL
47789: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47790: LD_ADDR_VAR 0 10
47794: PUSH
47795: LD_VAR 0 10
47799: PUSH
47800: LD_VAR 0 6
47804: PPUSH
47805: LD_INT 1
47807: PPUSH
47808: CALL_OW 259
47812: PUSH
47813: LD_REAL  1.15000000000000E+0000
47816: MUL
47817: MUL
47818: ST_TO_ADDR
// end ; unit_vehicle :
47819: GO 48647
47821: LD_INT 2
47823: DOUBLE
47824: EQUAL
47825: IFTRUE 47829
47827: GO 48635
47829: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47830: LD_VAR 0 6
47834: PPUSH
47835: CALL_OW 264
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 42
47845: PUSH
47846: LD_INT 24
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: LIST
47853: IN
47854: IFFALSE 47875
// points := [ 25 , 5 , 3 ] ;
47856: LD_ADDR_VAR 0 9
47860: PUSH
47861: LD_INT 25
47863: PUSH
47864: LD_INT 5
47866: PUSH
47867: LD_INT 3
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: LIST
47874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47875: LD_VAR 0 6
47879: PPUSH
47880: CALL_OW 264
47884: PUSH
47885: LD_INT 4
47887: PUSH
47888: LD_INT 43
47890: PUSH
47891: LD_INT 25
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: LIST
47898: IN
47899: IFFALSE 47920
// points := [ 40 , 15 , 5 ] ;
47901: LD_ADDR_VAR 0 9
47905: PUSH
47906: LD_INT 40
47908: PUSH
47909: LD_INT 15
47911: PUSH
47912: LD_INT 5
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: LIST
47919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47920: LD_VAR 0 6
47924: PPUSH
47925: CALL_OW 264
47929: PUSH
47930: LD_INT 3
47932: PUSH
47933: LD_INT 23
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: IN
47940: IFFALSE 47961
// points := [ 7 , 25 , 8 ] ;
47942: LD_ADDR_VAR 0 9
47946: PUSH
47947: LD_INT 7
47949: PUSH
47950: LD_INT 25
47952: PUSH
47953: LD_INT 8
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47961: LD_VAR 0 6
47965: PPUSH
47966: CALL_OW 264
47970: PUSH
47971: LD_INT 5
47973: PUSH
47974: LD_INT 27
47976: PUSH
47977: LD_INT 44
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: LIST
47984: IN
47985: IFFALSE 48006
// points := [ 14 , 50 , 16 ] ;
47987: LD_ADDR_VAR 0 9
47991: PUSH
47992: LD_INT 14
47994: PUSH
47995: LD_INT 50
47997: PUSH
47998: LD_INT 16
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: LIST
48005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48006: LD_VAR 0 6
48010: PPUSH
48011: CALL_OW 264
48015: PUSH
48016: LD_INT 6
48018: PUSH
48019: LD_INT 46
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: IN
48026: IFFALSE 48047
// points := [ 32 , 120 , 70 ] ;
48028: LD_ADDR_VAR 0 9
48032: PUSH
48033: LD_INT 32
48035: PUSH
48036: LD_INT 120
48038: PUSH
48039: LD_INT 70
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: LIST
48046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48047: LD_VAR 0 6
48051: PPUSH
48052: CALL_OW 264
48056: PUSH
48057: LD_INT 7
48059: PUSH
48060: LD_INT 28
48062: PUSH
48063: LD_INT 45
48065: PUSH
48066: LD_INT 92
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: IN
48075: IFFALSE 48096
// points := [ 35 , 20 , 45 ] ;
48077: LD_ADDR_VAR 0 9
48081: PUSH
48082: LD_INT 35
48084: PUSH
48085: LD_INT 20
48087: PUSH
48088: LD_INT 45
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: LIST
48095: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48096: LD_VAR 0 6
48100: PPUSH
48101: CALL_OW 264
48105: PUSH
48106: LD_INT 47
48108: PUSH
48109: EMPTY
48110: LIST
48111: IN
48112: IFFALSE 48133
// points := [ 67 , 45 , 75 ] ;
48114: LD_ADDR_VAR 0 9
48118: PUSH
48119: LD_INT 67
48121: PUSH
48122: LD_INT 45
48124: PUSH
48125: LD_INT 75
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48133: LD_VAR 0 6
48137: PPUSH
48138: CALL_OW 264
48142: PUSH
48143: LD_INT 26
48145: PUSH
48146: EMPTY
48147: LIST
48148: IN
48149: IFFALSE 48170
// points := [ 120 , 30 , 80 ] ;
48151: LD_ADDR_VAR 0 9
48155: PUSH
48156: LD_INT 120
48158: PUSH
48159: LD_INT 30
48161: PUSH
48162: LD_INT 80
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: LIST
48169: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48170: LD_VAR 0 6
48174: PPUSH
48175: CALL_OW 264
48179: PUSH
48180: LD_INT 22
48182: PUSH
48183: EMPTY
48184: LIST
48185: IN
48186: IFFALSE 48207
// points := [ 40 , 1 , 1 ] ;
48188: LD_ADDR_VAR 0 9
48192: PUSH
48193: LD_INT 40
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48207: LD_VAR 0 6
48211: PPUSH
48212: CALL_OW 264
48216: PUSH
48217: LD_INT 29
48219: PUSH
48220: EMPTY
48221: LIST
48222: IN
48223: IFFALSE 48244
// points := [ 70 , 200 , 400 ] ;
48225: LD_ADDR_VAR 0 9
48229: PUSH
48230: LD_INT 70
48232: PUSH
48233: LD_INT 200
48235: PUSH
48236: LD_INT 400
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48244: LD_VAR 0 6
48248: PPUSH
48249: CALL_OW 264
48253: PUSH
48254: LD_INT 14
48256: PUSH
48257: LD_INT 53
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: IN
48264: IFFALSE 48285
// points := [ 40 , 10 , 20 ] ;
48266: LD_ADDR_VAR 0 9
48270: PUSH
48271: LD_INT 40
48273: PUSH
48274: LD_INT 10
48276: PUSH
48277: LD_INT 20
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: LIST
48284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48285: LD_VAR 0 6
48289: PPUSH
48290: CALL_OW 264
48294: PUSH
48295: LD_INT 9
48297: PUSH
48298: EMPTY
48299: LIST
48300: IN
48301: IFFALSE 48322
// points := [ 5 , 70 , 20 ] ;
48303: LD_ADDR_VAR 0 9
48307: PUSH
48308: LD_INT 5
48310: PUSH
48311: LD_INT 70
48313: PUSH
48314: LD_INT 20
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48322: LD_VAR 0 6
48326: PPUSH
48327: CALL_OW 264
48331: PUSH
48332: LD_INT 10
48334: PUSH
48335: EMPTY
48336: LIST
48337: IN
48338: IFFALSE 48359
// points := [ 35 , 110 , 70 ] ;
48340: LD_ADDR_VAR 0 9
48344: PUSH
48345: LD_INT 35
48347: PUSH
48348: LD_INT 110
48350: PUSH
48351: LD_INT 70
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: LIST
48358: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48359: LD_VAR 0 6
48363: PPUSH
48364: CALL_OW 265
48368: PUSH
48369: LD_INT 25
48371: EQUAL
48372: IFFALSE 48393
// points := [ 80 , 65 , 100 ] ;
48374: LD_ADDR_VAR 0 9
48378: PUSH
48379: LD_INT 80
48381: PUSH
48382: LD_INT 65
48384: PUSH
48385: LD_INT 100
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: LIST
48392: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48393: LD_VAR 0 6
48397: PPUSH
48398: CALL_OW 263
48402: PUSH
48403: LD_INT 1
48405: EQUAL
48406: IFFALSE 48441
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48408: LD_ADDR_VAR 0 10
48412: PUSH
48413: LD_VAR 0 10
48417: PUSH
48418: LD_VAR 0 6
48422: PPUSH
48423: CALL_OW 311
48427: PPUSH
48428: LD_INT 3
48430: PPUSH
48431: CALL_OW 259
48435: PUSH
48436: LD_INT 4
48438: MUL
48439: MUL
48440: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48441: LD_VAR 0 6
48445: PPUSH
48446: CALL_OW 263
48450: PUSH
48451: LD_INT 2
48453: EQUAL
48454: IFFALSE 48505
// begin j := IsControledBy ( i ) ;
48456: LD_ADDR_VAR 0 7
48460: PUSH
48461: LD_VAR 0 6
48465: PPUSH
48466: CALL_OW 312
48470: ST_TO_ADDR
// if j then
48471: LD_VAR 0 7
48475: IFFALSE 48505
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48477: LD_ADDR_VAR 0 10
48481: PUSH
48482: LD_VAR 0 10
48486: PUSH
48487: LD_VAR 0 7
48491: PPUSH
48492: LD_INT 3
48494: PPUSH
48495: CALL_OW 259
48499: PUSH
48500: LD_INT 3
48502: MUL
48503: MUL
48504: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48505: LD_VAR 0 6
48509: PPUSH
48510: CALL_OW 264
48514: PUSH
48515: LD_INT 5
48517: PUSH
48518: LD_INT 6
48520: PUSH
48521: LD_INT 46
48523: PUSH
48524: LD_INT 44
48526: PUSH
48527: LD_INT 47
48529: PUSH
48530: LD_INT 45
48532: PUSH
48533: LD_INT 28
48535: PUSH
48536: LD_INT 7
48538: PUSH
48539: LD_INT 27
48541: PUSH
48542: LD_INT 29
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: IN
48557: PUSH
48558: LD_VAR 0 1
48562: PPUSH
48563: LD_INT 52
48565: PPUSH
48566: CALL_OW 321
48570: PUSH
48571: LD_INT 2
48573: EQUAL
48574: AND
48575: IFFALSE 48592
// bpoints := bpoints * 1.2 ;
48577: LD_ADDR_VAR 0 10
48581: PUSH
48582: LD_VAR 0 10
48586: PUSH
48587: LD_REAL  1.20000000000000E+0000
48590: MUL
48591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48592: LD_VAR 0 6
48596: PPUSH
48597: CALL_OW 264
48601: PUSH
48602: LD_INT 6
48604: PUSH
48605: LD_INT 46
48607: PUSH
48608: LD_INT 47
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: IN
48616: IFFALSE 48633
// bpoints := bpoints * 1.2 ;
48618: LD_ADDR_VAR 0 10
48622: PUSH
48623: LD_VAR 0 10
48627: PUSH
48628: LD_REAL  1.20000000000000E+0000
48631: MUL
48632: ST_TO_ADDR
// end ; unit_building :
48633: GO 48647
48635: LD_INT 3
48637: DOUBLE
48638: EQUAL
48639: IFTRUE 48643
48641: GO 48646
48643: POP
// ; end ;
48644: GO 48647
48646: POP
// for j = 1 to 3 do
48647: LD_ADDR_VAR 0 7
48651: PUSH
48652: DOUBLE
48653: LD_INT 1
48655: DEC
48656: ST_TO_ADDR
48657: LD_INT 3
48659: PUSH
48660: FOR_TO
48661: IFFALSE 48714
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48663: LD_ADDR_VAR 0 5
48667: PUSH
48668: LD_VAR 0 5
48672: PPUSH
48673: LD_VAR 0 7
48677: PPUSH
48678: LD_VAR 0 5
48682: PUSH
48683: LD_VAR 0 7
48687: ARRAY
48688: PUSH
48689: LD_VAR 0 9
48693: PUSH
48694: LD_VAR 0 7
48698: ARRAY
48699: PUSH
48700: LD_VAR 0 10
48704: MUL
48705: PLUS
48706: PPUSH
48707: CALL_OW 1
48711: ST_TO_ADDR
48712: GO 48660
48714: POP
48715: POP
// end ;
48716: GO 47195
48718: POP
48719: POP
// result := Replace ( result , 4 , tmp ) ;
48720: LD_ADDR_VAR 0 5
48724: PUSH
48725: LD_VAR 0 5
48729: PPUSH
48730: LD_INT 4
48732: PPUSH
48733: LD_VAR 0 8
48737: PPUSH
48738: CALL_OW 1
48742: ST_TO_ADDR
// end ;
48743: LD_VAR 0 5
48747: RET
// export function DangerAtRange ( unit , range ) ; begin
48748: LD_INT 0
48750: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48751: LD_ADDR_VAR 0 3
48755: PUSH
48756: LD_VAR 0 1
48760: PPUSH
48761: CALL_OW 255
48765: PPUSH
48766: LD_VAR 0 1
48770: PPUSH
48771: CALL_OW 250
48775: PPUSH
48776: LD_VAR 0 1
48780: PPUSH
48781: CALL_OW 251
48785: PPUSH
48786: LD_VAR 0 2
48790: PPUSH
48791: CALL 47047 0 4
48795: ST_TO_ADDR
// end ;
48796: LD_VAR 0 3
48800: RET
// export function DangerInArea ( side , area ) ; begin
48801: LD_INT 0
48803: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48804: LD_ADDR_VAR 0 3
48808: PUSH
48809: LD_VAR 0 2
48813: PPUSH
48814: LD_INT 81
48816: PUSH
48817: LD_VAR 0 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PPUSH
48826: CALL_OW 70
48830: ST_TO_ADDR
// end ;
48831: LD_VAR 0 3
48835: RET
// export function IsExtension ( b ) ; begin
48836: LD_INT 0
48838: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48839: LD_ADDR_VAR 0 2
48843: PUSH
48844: LD_VAR 0 1
48848: PUSH
48849: LD_INT 23
48851: PUSH
48852: LD_INT 20
48854: PUSH
48855: LD_INT 22
48857: PUSH
48858: LD_INT 17
48860: PUSH
48861: LD_INT 24
48863: PUSH
48864: LD_INT 21
48866: PUSH
48867: LD_INT 19
48869: PUSH
48870: LD_INT 16
48872: PUSH
48873: LD_INT 25
48875: PUSH
48876: LD_INT 18
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: IN
48891: ST_TO_ADDR
// end ;
48892: LD_VAR 0 2
48896: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48897: LD_INT 0
48899: PPUSH
48900: PPUSH
48901: PPUSH
// result := [ ] ;
48902: LD_ADDR_VAR 0 4
48906: PUSH
48907: EMPTY
48908: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48909: LD_ADDR_VAR 0 5
48913: PUSH
48914: LD_VAR 0 2
48918: PPUSH
48919: LD_INT 21
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PPUSH
48929: CALL_OW 70
48933: ST_TO_ADDR
// if not tmp then
48934: LD_VAR 0 5
48938: NOT
48939: IFFALSE 48943
// exit ;
48941: GO 49007
// if checkLink then
48943: LD_VAR 0 3
48947: IFFALSE 48997
// begin for i in tmp do
48949: LD_ADDR_VAR 0 6
48953: PUSH
48954: LD_VAR 0 5
48958: PUSH
48959: FOR_IN
48960: IFFALSE 48995
// if GetBase ( i ) <> base then
48962: LD_VAR 0 6
48966: PPUSH
48967: CALL_OW 274
48971: PUSH
48972: LD_VAR 0 1
48976: NONEQUAL
48977: IFFALSE 48993
// ComLinkToBase ( base , i ) ;
48979: LD_VAR 0 1
48983: PPUSH
48984: LD_VAR 0 6
48988: PPUSH
48989: CALL_OW 169
48993: GO 48959
48995: POP
48996: POP
// end ; result := tmp ;
48997: LD_ADDR_VAR 0 4
49001: PUSH
49002: LD_VAR 0 5
49006: ST_TO_ADDR
// end ;
49007: LD_VAR 0 4
49011: RET
// export function ComComplete ( units , b ) ; var i ; begin
49012: LD_INT 0
49014: PPUSH
49015: PPUSH
// if not units then
49016: LD_VAR 0 1
49020: NOT
49021: IFFALSE 49025
// exit ;
49023: GO 49115
// for i in units do
49025: LD_ADDR_VAR 0 4
49029: PUSH
49030: LD_VAR 0 1
49034: PUSH
49035: FOR_IN
49036: IFFALSE 49113
// if BuildingStatus ( b ) = bs_build then
49038: LD_VAR 0 2
49042: PPUSH
49043: CALL_OW 461
49047: PUSH
49048: LD_INT 1
49050: EQUAL
49051: IFFALSE 49111
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49053: LD_VAR 0 4
49057: PPUSH
49058: LD_STRING h
49060: PUSH
49061: LD_VAR 0 2
49065: PPUSH
49066: CALL_OW 250
49070: PUSH
49071: LD_VAR 0 2
49075: PPUSH
49076: CALL_OW 251
49080: PUSH
49081: LD_VAR 0 2
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: PPUSH
49107: CALL_OW 446
49111: GO 49035
49113: POP
49114: POP
// end ;
49115: LD_VAR 0 3
49119: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49120: LD_INT 0
49122: PPUSH
49123: PPUSH
49124: PPUSH
49125: PPUSH
49126: PPUSH
49127: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49128: LD_VAR 0 1
49132: NOT
49133: PUSH
49134: LD_VAR 0 1
49138: PPUSH
49139: CALL_OW 263
49143: PUSH
49144: LD_INT 2
49146: NONEQUAL
49147: OR
49148: IFFALSE 49152
// exit ;
49150: GO 49468
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49152: LD_ADDR_VAR 0 6
49156: PUSH
49157: LD_INT 22
49159: PUSH
49160: LD_VAR 0 1
49164: PPUSH
49165: CALL_OW 255
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: LD_INT 30
49179: PUSH
49180: LD_INT 36
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 34
49189: PUSH
49190: LD_INT 31
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: LIST
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PPUSH
49206: CALL_OW 69
49210: ST_TO_ADDR
// if not tmp then
49211: LD_VAR 0 6
49215: NOT
49216: IFFALSE 49220
// exit ;
49218: GO 49468
// result := [ ] ;
49220: LD_ADDR_VAR 0 2
49224: PUSH
49225: EMPTY
49226: ST_TO_ADDR
// for i in tmp do
49227: LD_ADDR_VAR 0 3
49231: PUSH
49232: LD_VAR 0 6
49236: PUSH
49237: FOR_IN
49238: IFFALSE 49309
// begin t := UnitsInside ( i ) ;
49240: LD_ADDR_VAR 0 4
49244: PUSH
49245: LD_VAR 0 3
49249: PPUSH
49250: CALL_OW 313
49254: ST_TO_ADDR
// if t then
49255: LD_VAR 0 4
49259: IFFALSE 49307
// for j in t do
49261: LD_ADDR_VAR 0 7
49265: PUSH
49266: LD_VAR 0 4
49270: PUSH
49271: FOR_IN
49272: IFFALSE 49305
// result := Replace ( result , result + 1 , j ) ;
49274: LD_ADDR_VAR 0 2
49278: PUSH
49279: LD_VAR 0 2
49283: PPUSH
49284: LD_VAR 0 2
49288: PUSH
49289: LD_INT 1
49291: PLUS
49292: PPUSH
49293: LD_VAR 0 7
49297: PPUSH
49298: CALL_OW 1
49302: ST_TO_ADDR
49303: GO 49271
49305: POP
49306: POP
// end ;
49307: GO 49237
49309: POP
49310: POP
// if not result then
49311: LD_VAR 0 2
49315: NOT
49316: IFFALSE 49320
// exit ;
49318: GO 49468
// mech := result [ 1 ] ;
49320: LD_ADDR_VAR 0 5
49324: PUSH
49325: LD_VAR 0 2
49329: PUSH
49330: LD_INT 1
49332: ARRAY
49333: ST_TO_ADDR
// if result > 1 then
49334: LD_VAR 0 2
49338: PUSH
49339: LD_INT 1
49341: GREATER
49342: IFFALSE 49454
// begin for i = 2 to result do
49344: LD_ADDR_VAR 0 3
49348: PUSH
49349: DOUBLE
49350: LD_INT 2
49352: DEC
49353: ST_TO_ADDR
49354: LD_VAR 0 2
49358: PUSH
49359: FOR_TO
49360: IFFALSE 49452
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49362: LD_ADDR_VAR 0 4
49366: PUSH
49367: LD_VAR 0 2
49371: PUSH
49372: LD_VAR 0 3
49376: ARRAY
49377: PPUSH
49378: LD_INT 3
49380: PPUSH
49381: CALL_OW 259
49385: PUSH
49386: LD_VAR 0 2
49390: PUSH
49391: LD_VAR 0 3
49395: ARRAY
49396: PPUSH
49397: CALL_OW 432
49401: MINUS
49402: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49403: LD_VAR 0 4
49407: PUSH
49408: LD_VAR 0 5
49412: PPUSH
49413: LD_INT 3
49415: PPUSH
49416: CALL_OW 259
49420: PUSH
49421: LD_VAR 0 5
49425: PPUSH
49426: CALL_OW 432
49430: MINUS
49431: GREATEREQUAL
49432: IFFALSE 49450
// mech := result [ i ] ;
49434: LD_ADDR_VAR 0 5
49438: PUSH
49439: LD_VAR 0 2
49443: PUSH
49444: LD_VAR 0 3
49448: ARRAY
49449: ST_TO_ADDR
// end ;
49450: GO 49359
49452: POP
49453: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49454: LD_VAR 0 1
49458: PPUSH
49459: LD_VAR 0 5
49463: PPUSH
49464: CALL_OW 135
// end ;
49468: LD_VAR 0 2
49472: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49473: LD_INT 0
49475: PPUSH
49476: PPUSH
49477: PPUSH
49478: PPUSH
49479: PPUSH
49480: PPUSH
49481: PPUSH
49482: PPUSH
49483: PPUSH
49484: PPUSH
49485: PPUSH
49486: PPUSH
49487: PPUSH
// result := [ ] ;
49488: LD_ADDR_VAR 0 7
49492: PUSH
49493: EMPTY
49494: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49495: LD_VAR 0 1
49499: PPUSH
49500: CALL_OW 266
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: IN
49515: NOT
49516: IFFALSE 49520
// exit ;
49518: GO 51154
// if name then
49520: LD_VAR 0 3
49524: IFFALSE 49540
// SetBName ( base_dep , name ) ;
49526: LD_VAR 0 1
49530: PPUSH
49531: LD_VAR 0 3
49535: PPUSH
49536: CALL_OW 500
// base := GetBase ( base_dep ) ;
49540: LD_ADDR_VAR 0 15
49544: PUSH
49545: LD_VAR 0 1
49549: PPUSH
49550: CALL_OW 274
49554: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49555: LD_ADDR_VAR 0 16
49559: PUSH
49560: LD_VAR 0 1
49564: PPUSH
49565: CALL_OW 255
49569: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49570: LD_ADDR_VAR 0 17
49574: PUSH
49575: LD_VAR 0 1
49579: PPUSH
49580: CALL_OW 248
49584: ST_TO_ADDR
// if sources then
49585: LD_VAR 0 5
49589: IFFALSE 49636
// for i = 1 to 3 do
49591: LD_ADDR_VAR 0 8
49595: PUSH
49596: DOUBLE
49597: LD_INT 1
49599: DEC
49600: ST_TO_ADDR
49601: LD_INT 3
49603: PUSH
49604: FOR_TO
49605: IFFALSE 49634
// AddResourceType ( base , i , sources [ i ] ) ;
49607: LD_VAR 0 15
49611: PPUSH
49612: LD_VAR 0 8
49616: PPUSH
49617: LD_VAR 0 5
49621: PUSH
49622: LD_VAR 0 8
49626: ARRAY
49627: PPUSH
49628: CALL_OW 276
49632: GO 49604
49634: POP
49635: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49636: LD_ADDR_VAR 0 18
49640: PUSH
49641: LD_VAR 0 15
49645: PPUSH
49646: LD_VAR 0 2
49650: PPUSH
49651: LD_INT 1
49653: PPUSH
49654: CALL 48897 0 3
49658: ST_TO_ADDR
// InitHc ;
49659: CALL_OW 19
// InitUc ;
49663: CALL_OW 18
// uc_side := side ;
49667: LD_ADDR_OWVAR 20
49671: PUSH
49672: LD_VAR 0 16
49676: ST_TO_ADDR
// uc_nation := nation ;
49677: LD_ADDR_OWVAR 21
49681: PUSH
49682: LD_VAR 0 17
49686: ST_TO_ADDR
// if buildings then
49687: LD_VAR 0 18
49691: IFFALSE 51013
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49693: LD_ADDR_VAR 0 19
49697: PUSH
49698: LD_VAR 0 18
49702: PPUSH
49703: LD_INT 2
49705: PUSH
49706: LD_INT 30
49708: PUSH
49709: LD_INT 29
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 30
49718: PUSH
49719: LD_INT 30
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: LIST
49730: PPUSH
49731: CALL_OW 72
49735: ST_TO_ADDR
// if tmp then
49736: LD_VAR 0 19
49740: IFFALSE 49788
// for i in tmp do
49742: LD_ADDR_VAR 0 8
49746: PUSH
49747: LD_VAR 0 19
49751: PUSH
49752: FOR_IN
49753: IFFALSE 49786
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49755: LD_VAR 0 8
49759: PPUSH
49760: CALL_OW 250
49764: PPUSH
49765: LD_VAR 0 8
49769: PPUSH
49770: CALL_OW 251
49774: PPUSH
49775: LD_VAR 0 16
49779: PPUSH
49780: CALL_OW 441
49784: GO 49752
49786: POP
49787: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49788: LD_VAR 0 18
49792: PPUSH
49793: LD_INT 2
49795: PUSH
49796: LD_INT 30
49798: PUSH
49799: LD_INT 32
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 30
49808: PUSH
49809: LD_INT 33
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: LIST
49820: PPUSH
49821: CALL_OW 72
49825: IFFALSE 49913
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49827: LD_ADDR_VAR 0 8
49831: PUSH
49832: LD_VAR 0 18
49836: PPUSH
49837: LD_INT 2
49839: PUSH
49840: LD_INT 30
49842: PUSH
49843: LD_INT 32
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 30
49852: PUSH
49853: LD_INT 33
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: LIST
49864: PPUSH
49865: CALL_OW 72
49869: PUSH
49870: FOR_IN
49871: IFFALSE 49911
// begin if not GetBWeapon ( i ) then
49873: LD_VAR 0 8
49877: PPUSH
49878: CALL_OW 269
49882: NOT
49883: IFFALSE 49909
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49885: LD_VAR 0 8
49889: PPUSH
49890: LD_VAR 0 8
49894: PPUSH
49895: LD_VAR 0 2
49899: PPUSH
49900: CALL 51159 0 2
49904: PPUSH
49905: CALL_OW 431
// end ;
49909: GO 49870
49911: POP
49912: POP
// end ; for i = 1 to personel do
49913: LD_ADDR_VAR 0 8
49917: PUSH
49918: DOUBLE
49919: LD_INT 1
49921: DEC
49922: ST_TO_ADDR
49923: LD_VAR 0 6
49927: PUSH
49928: FOR_TO
49929: IFFALSE 50993
// begin if i > 4 then
49931: LD_VAR 0 8
49935: PUSH
49936: LD_INT 4
49938: GREATER
49939: IFFALSE 49943
// break ;
49941: GO 50993
// case i of 1 :
49943: LD_VAR 0 8
49947: PUSH
49948: LD_INT 1
49950: DOUBLE
49951: EQUAL
49952: IFTRUE 49956
49954: GO 50036
49956: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49957: LD_ADDR_VAR 0 12
49961: PUSH
49962: LD_VAR 0 18
49966: PPUSH
49967: LD_INT 22
49969: PUSH
49970: LD_VAR 0 16
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 58
49981: PUSH
49982: EMPTY
49983: LIST
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: LD_INT 30
49990: PUSH
49991: LD_INT 32
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 30
50000: PUSH
50001: LD_INT 4
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 30
50010: PUSH
50011: LD_INT 5
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: LIST
50028: PPUSH
50029: CALL_OW 72
50033: ST_TO_ADDR
50034: GO 50258
50036: LD_INT 2
50038: DOUBLE
50039: EQUAL
50040: IFTRUE 50044
50042: GO 50106
50044: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50045: LD_ADDR_VAR 0 12
50049: PUSH
50050: LD_VAR 0 18
50054: PPUSH
50055: LD_INT 22
50057: PUSH
50058: LD_VAR 0 16
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: LD_INT 30
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 30
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: LIST
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PPUSH
50099: CALL_OW 72
50103: ST_TO_ADDR
50104: GO 50258
50106: LD_INT 3
50108: DOUBLE
50109: EQUAL
50110: IFTRUE 50114
50112: GO 50176
50114: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50115: LD_ADDR_VAR 0 12
50119: PUSH
50120: LD_VAR 0 18
50124: PPUSH
50125: LD_INT 22
50127: PUSH
50128: LD_VAR 0 16
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 30
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 30
50152: PUSH
50153: LD_INT 3
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: LIST
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PPUSH
50169: CALL_OW 72
50173: ST_TO_ADDR
50174: GO 50258
50176: LD_INT 4
50178: DOUBLE
50179: EQUAL
50180: IFTRUE 50184
50182: GO 50257
50184: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50185: LD_ADDR_VAR 0 12
50189: PUSH
50190: LD_VAR 0 18
50194: PPUSH
50195: LD_INT 22
50197: PUSH
50198: LD_VAR 0 16
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: LD_INT 30
50212: PUSH
50213: LD_INT 6
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 30
50222: PUSH
50223: LD_INT 7
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 30
50232: PUSH
50233: LD_INT 8
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PPUSH
50250: CALL_OW 72
50254: ST_TO_ADDR
50255: GO 50258
50257: POP
// if i = 1 then
50258: LD_VAR 0 8
50262: PUSH
50263: LD_INT 1
50265: EQUAL
50266: IFFALSE 50377
// begin tmp := [ ] ;
50268: LD_ADDR_VAR 0 19
50272: PUSH
50273: EMPTY
50274: ST_TO_ADDR
// for j in f do
50275: LD_ADDR_VAR 0 9
50279: PUSH
50280: LD_VAR 0 12
50284: PUSH
50285: FOR_IN
50286: IFFALSE 50359
// if GetBType ( j ) = b_bunker then
50288: LD_VAR 0 9
50292: PPUSH
50293: CALL_OW 266
50297: PUSH
50298: LD_INT 32
50300: EQUAL
50301: IFFALSE 50328
// tmp := Insert ( tmp , 1 , j ) else
50303: LD_ADDR_VAR 0 19
50307: PUSH
50308: LD_VAR 0 19
50312: PPUSH
50313: LD_INT 1
50315: PPUSH
50316: LD_VAR 0 9
50320: PPUSH
50321: CALL_OW 2
50325: ST_TO_ADDR
50326: GO 50357
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50328: LD_ADDR_VAR 0 19
50332: PUSH
50333: LD_VAR 0 19
50337: PPUSH
50338: LD_VAR 0 19
50342: PUSH
50343: LD_INT 1
50345: PLUS
50346: PPUSH
50347: LD_VAR 0 9
50351: PPUSH
50352: CALL_OW 2
50356: ST_TO_ADDR
50357: GO 50285
50359: POP
50360: POP
// if tmp then
50361: LD_VAR 0 19
50365: IFFALSE 50377
// f := tmp ;
50367: LD_ADDR_VAR 0 12
50371: PUSH
50372: LD_VAR 0 19
50376: ST_TO_ADDR
// end ; x := personel [ i ] ;
50377: LD_ADDR_VAR 0 13
50381: PUSH
50382: LD_VAR 0 6
50386: PUSH
50387: LD_VAR 0 8
50391: ARRAY
50392: ST_TO_ADDR
// if x = - 1 then
50393: LD_VAR 0 13
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: EQUAL
50402: IFFALSE 50611
// begin for j in f do
50404: LD_ADDR_VAR 0 9
50408: PUSH
50409: LD_VAR 0 12
50413: PUSH
50414: FOR_IN
50415: IFFALSE 50607
// repeat InitHc ;
50417: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50421: LD_VAR 0 9
50425: PPUSH
50426: CALL_OW 266
50430: PUSH
50431: LD_INT 5
50433: EQUAL
50434: IFFALSE 50504
// begin if UnitsInside ( j ) < 3 then
50436: LD_VAR 0 9
50440: PPUSH
50441: CALL_OW 313
50445: PUSH
50446: LD_INT 3
50448: LESS
50449: IFFALSE 50485
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50451: LD_INT 0
50453: PPUSH
50454: LD_INT 5
50456: PUSH
50457: LD_INT 8
50459: PUSH
50460: LD_INT 9
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: LIST
50467: PUSH
50468: LD_VAR 0 17
50472: ARRAY
50473: PPUSH
50474: LD_VAR 0 4
50478: PPUSH
50479: CALL_OW 380
50483: GO 50502
// PrepareHuman ( false , i , skill ) ;
50485: LD_INT 0
50487: PPUSH
50488: LD_VAR 0 8
50492: PPUSH
50493: LD_VAR 0 4
50497: PPUSH
50498: CALL_OW 380
// end else
50502: GO 50521
// PrepareHuman ( false , i , skill ) ;
50504: LD_INT 0
50506: PPUSH
50507: LD_VAR 0 8
50511: PPUSH
50512: LD_VAR 0 4
50516: PPUSH
50517: CALL_OW 380
// un := CreateHuman ;
50521: LD_ADDR_VAR 0 14
50525: PUSH
50526: CALL_OW 44
50530: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50531: LD_ADDR_VAR 0 7
50535: PUSH
50536: LD_VAR 0 7
50540: PPUSH
50541: LD_INT 1
50543: PPUSH
50544: LD_VAR 0 14
50548: PPUSH
50549: CALL_OW 2
50553: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50554: LD_VAR 0 14
50558: PPUSH
50559: LD_VAR 0 9
50563: PPUSH
50564: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50568: LD_VAR 0 9
50572: PPUSH
50573: CALL_OW 313
50577: PUSH
50578: LD_INT 6
50580: EQUAL
50581: PUSH
50582: LD_VAR 0 9
50586: PPUSH
50587: CALL_OW 266
50591: PUSH
50592: LD_INT 32
50594: PUSH
50595: LD_INT 31
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: IN
50602: OR
50603: IFFALSE 50417
50605: GO 50414
50607: POP
50608: POP
// end else
50609: GO 50991
// for j = 1 to x do
50611: LD_ADDR_VAR 0 9
50615: PUSH
50616: DOUBLE
50617: LD_INT 1
50619: DEC
50620: ST_TO_ADDR
50621: LD_VAR 0 13
50625: PUSH
50626: FOR_TO
50627: IFFALSE 50989
// begin InitHc ;
50629: CALL_OW 19
// if not f then
50633: LD_VAR 0 12
50637: NOT
50638: IFFALSE 50727
// begin PrepareHuman ( false , i , skill ) ;
50640: LD_INT 0
50642: PPUSH
50643: LD_VAR 0 8
50647: PPUSH
50648: LD_VAR 0 4
50652: PPUSH
50653: CALL_OW 380
// un := CreateHuman ;
50657: LD_ADDR_VAR 0 14
50661: PUSH
50662: CALL_OW 44
50666: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50667: LD_ADDR_VAR 0 7
50671: PUSH
50672: LD_VAR 0 7
50676: PPUSH
50677: LD_INT 1
50679: PPUSH
50680: LD_VAR 0 14
50684: PPUSH
50685: CALL_OW 2
50689: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50690: LD_VAR 0 14
50694: PPUSH
50695: LD_VAR 0 1
50699: PPUSH
50700: CALL_OW 250
50704: PPUSH
50705: LD_VAR 0 1
50709: PPUSH
50710: CALL_OW 251
50714: PPUSH
50715: LD_INT 10
50717: PPUSH
50718: LD_INT 0
50720: PPUSH
50721: CALL_OW 50
// continue ;
50725: GO 50626
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50727: LD_VAR 0 12
50731: PUSH
50732: LD_INT 1
50734: ARRAY
50735: PPUSH
50736: CALL_OW 313
50740: PUSH
50741: LD_VAR 0 12
50745: PUSH
50746: LD_INT 1
50748: ARRAY
50749: PPUSH
50750: CALL_OW 266
50754: PUSH
50755: LD_INT 32
50757: PUSH
50758: LD_INT 31
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: IN
50765: AND
50766: PUSH
50767: LD_VAR 0 12
50771: PUSH
50772: LD_INT 1
50774: ARRAY
50775: PPUSH
50776: CALL_OW 313
50780: PUSH
50781: LD_INT 6
50783: EQUAL
50784: OR
50785: IFFALSE 50805
// f := Delete ( f , 1 ) ;
50787: LD_ADDR_VAR 0 12
50791: PUSH
50792: LD_VAR 0 12
50796: PPUSH
50797: LD_INT 1
50799: PPUSH
50800: CALL_OW 3
50804: ST_TO_ADDR
// if not f then
50805: LD_VAR 0 12
50809: NOT
50810: IFFALSE 50828
// begin x := x + 2 ;
50812: LD_ADDR_VAR 0 13
50816: PUSH
50817: LD_VAR 0 13
50821: PUSH
50822: LD_INT 2
50824: PLUS
50825: ST_TO_ADDR
// continue ;
50826: GO 50626
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50828: LD_VAR 0 12
50832: PUSH
50833: LD_INT 1
50835: ARRAY
50836: PPUSH
50837: CALL_OW 266
50841: PUSH
50842: LD_INT 5
50844: EQUAL
50845: IFFALSE 50919
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50847: LD_VAR 0 12
50851: PUSH
50852: LD_INT 1
50854: ARRAY
50855: PPUSH
50856: CALL_OW 313
50860: PUSH
50861: LD_INT 3
50863: LESS
50864: IFFALSE 50900
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50866: LD_INT 0
50868: PPUSH
50869: LD_INT 5
50871: PUSH
50872: LD_INT 8
50874: PUSH
50875: LD_INT 9
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: PUSH
50883: LD_VAR 0 17
50887: ARRAY
50888: PPUSH
50889: LD_VAR 0 4
50893: PPUSH
50894: CALL_OW 380
50898: GO 50917
// PrepareHuman ( false , i , skill ) ;
50900: LD_INT 0
50902: PPUSH
50903: LD_VAR 0 8
50907: PPUSH
50908: LD_VAR 0 4
50912: PPUSH
50913: CALL_OW 380
// end else
50917: GO 50936
// PrepareHuman ( false , i , skill ) ;
50919: LD_INT 0
50921: PPUSH
50922: LD_VAR 0 8
50926: PPUSH
50927: LD_VAR 0 4
50931: PPUSH
50932: CALL_OW 380
// un := CreateHuman ;
50936: LD_ADDR_VAR 0 14
50940: PUSH
50941: CALL_OW 44
50945: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50946: LD_ADDR_VAR 0 7
50950: PUSH
50951: LD_VAR 0 7
50955: PPUSH
50956: LD_INT 1
50958: PPUSH
50959: LD_VAR 0 14
50963: PPUSH
50964: CALL_OW 2
50968: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50969: LD_VAR 0 14
50973: PPUSH
50974: LD_VAR 0 12
50978: PUSH
50979: LD_INT 1
50981: ARRAY
50982: PPUSH
50983: CALL_OW 52
// end ;
50987: GO 50626
50989: POP
50990: POP
// end ;
50991: GO 49928
50993: POP
50994: POP
// result := result ^ buildings ;
50995: LD_ADDR_VAR 0 7
50999: PUSH
51000: LD_VAR 0 7
51004: PUSH
51005: LD_VAR 0 18
51009: ADD
51010: ST_TO_ADDR
// end else
51011: GO 51154
// begin for i = 1 to personel do
51013: LD_ADDR_VAR 0 8
51017: PUSH
51018: DOUBLE
51019: LD_INT 1
51021: DEC
51022: ST_TO_ADDR
51023: LD_VAR 0 6
51027: PUSH
51028: FOR_TO
51029: IFFALSE 51152
// begin if i > 4 then
51031: LD_VAR 0 8
51035: PUSH
51036: LD_INT 4
51038: GREATER
51039: IFFALSE 51043
// break ;
51041: GO 51152
// x := personel [ i ] ;
51043: LD_ADDR_VAR 0 13
51047: PUSH
51048: LD_VAR 0 6
51052: PUSH
51053: LD_VAR 0 8
51057: ARRAY
51058: ST_TO_ADDR
// if x = - 1 then
51059: LD_VAR 0 13
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: EQUAL
51068: IFFALSE 51072
// continue ;
51070: GO 51028
// PrepareHuman ( false , i , skill ) ;
51072: LD_INT 0
51074: PPUSH
51075: LD_VAR 0 8
51079: PPUSH
51080: LD_VAR 0 4
51084: PPUSH
51085: CALL_OW 380
// un := CreateHuman ;
51089: LD_ADDR_VAR 0 14
51093: PUSH
51094: CALL_OW 44
51098: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51099: LD_VAR 0 14
51103: PPUSH
51104: LD_VAR 0 1
51108: PPUSH
51109: CALL_OW 250
51113: PPUSH
51114: LD_VAR 0 1
51118: PPUSH
51119: CALL_OW 251
51123: PPUSH
51124: LD_INT 10
51126: PPUSH
51127: LD_INT 0
51129: PPUSH
51130: CALL_OW 50
// result := result ^ un ;
51134: LD_ADDR_VAR 0 7
51138: PUSH
51139: LD_VAR 0 7
51143: PUSH
51144: LD_VAR 0 14
51148: ADD
51149: ST_TO_ADDR
// end ;
51150: GO 51028
51152: POP
51153: POP
// end ; end ;
51154: LD_VAR 0 7
51158: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51159: LD_INT 0
51161: PPUSH
51162: PPUSH
51163: PPUSH
51164: PPUSH
51165: PPUSH
51166: PPUSH
51167: PPUSH
51168: PPUSH
51169: PPUSH
51170: PPUSH
51171: PPUSH
51172: PPUSH
51173: PPUSH
51174: PPUSH
51175: PPUSH
51176: PPUSH
// result := false ;
51177: LD_ADDR_VAR 0 3
51181: PUSH
51182: LD_INT 0
51184: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51185: LD_VAR 0 1
51189: NOT
51190: PUSH
51191: LD_VAR 0 1
51195: PPUSH
51196: CALL_OW 266
51200: PUSH
51201: LD_INT 32
51203: PUSH
51204: LD_INT 33
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: IN
51211: NOT
51212: OR
51213: IFFALSE 51217
// exit ;
51215: GO 52326
// nat := GetNation ( tower ) ;
51217: LD_ADDR_VAR 0 12
51221: PUSH
51222: LD_VAR 0 1
51226: PPUSH
51227: CALL_OW 248
51231: ST_TO_ADDR
// side := GetSide ( tower ) ;
51232: LD_ADDR_VAR 0 16
51236: PUSH
51237: LD_VAR 0 1
51241: PPUSH
51242: CALL_OW 255
51246: ST_TO_ADDR
// x := GetX ( tower ) ;
51247: LD_ADDR_VAR 0 10
51251: PUSH
51252: LD_VAR 0 1
51256: PPUSH
51257: CALL_OW 250
51261: ST_TO_ADDR
// y := GetY ( tower ) ;
51262: LD_ADDR_VAR 0 11
51266: PUSH
51267: LD_VAR 0 1
51271: PPUSH
51272: CALL_OW 251
51276: ST_TO_ADDR
// if not x or not y then
51277: LD_VAR 0 10
51281: NOT
51282: PUSH
51283: LD_VAR 0 11
51287: NOT
51288: OR
51289: IFFALSE 51293
// exit ;
51291: GO 52326
// weapon := 0 ;
51293: LD_ADDR_VAR 0 18
51297: PUSH
51298: LD_INT 0
51300: ST_TO_ADDR
// fac_list := [ ] ;
51301: LD_ADDR_VAR 0 17
51305: PUSH
51306: EMPTY
51307: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51308: LD_ADDR_VAR 0 6
51312: PUSH
51313: LD_VAR 0 1
51317: PPUSH
51318: CALL_OW 274
51322: PPUSH
51323: LD_VAR 0 2
51327: PPUSH
51328: LD_INT 0
51330: PPUSH
51331: CALL 48897 0 3
51335: PPUSH
51336: LD_INT 30
51338: PUSH
51339: LD_INT 3
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PPUSH
51346: CALL_OW 72
51350: ST_TO_ADDR
// if not factories then
51351: LD_VAR 0 6
51355: NOT
51356: IFFALSE 51360
// exit ;
51358: GO 52326
// for i in factories do
51360: LD_ADDR_VAR 0 8
51364: PUSH
51365: LD_VAR 0 6
51369: PUSH
51370: FOR_IN
51371: IFFALSE 51396
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51373: LD_ADDR_VAR 0 17
51377: PUSH
51378: LD_VAR 0 17
51382: PUSH
51383: LD_VAR 0 8
51387: PPUSH
51388: CALL_OW 478
51392: UNION
51393: ST_TO_ADDR
51394: GO 51370
51396: POP
51397: POP
// if not fac_list then
51398: LD_VAR 0 17
51402: NOT
51403: IFFALSE 51407
// exit ;
51405: GO 52326
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51407: LD_ADDR_VAR 0 5
51411: PUSH
51412: LD_INT 4
51414: PUSH
51415: LD_INT 5
51417: PUSH
51418: LD_INT 9
51420: PUSH
51421: LD_INT 10
51423: PUSH
51424: LD_INT 6
51426: PUSH
51427: LD_INT 7
51429: PUSH
51430: LD_INT 11
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 27
51444: PUSH
51445: LD_INT 28
51447: PUSH
51448: LD_INT 26
51450: PUSH
51451: LD_INT 30
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 43
51462: PUSH
51463: LD_INT 44
51465: PUSH
51466: LD_INT 46
51468: PUSH
51469: LD_INT 45
51471: PUSH
51472: LD_INT 47
51474: PUSH
51475: LD_INT 49
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: PUSH
51491: LD_VAR 0 12
51495: ARRAY
51496: ST_TO_ADDR
// list := list isect fac_list ;
51497: LD_ADDR_VAR 0 5
51501: PUSH
51502: LD_VAR 0 5
51506: PUSH
51507: LD_VAR 0 17
51511: ISECT
51512: ST_TO_ADDR
// if not list then
51513: LD_VAR 0 5
51517: NOT
51518: IFFALSE 51522
// exit ;
51520: GO 52326
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51522: LD_VAR 0 12
51526: PUSH
51527: LD_INT 3
51529: EQUAL
51530: PUSH
51531: LD_INT 49
51533: PUSH
51534: LD_VAR 0 5
51538: IN
51539: AND
51540: PUSH
51541: LD_INT 31
51543: PPUSH
51544: LD_VAR 0 16
51548: PPUSH
51549: CALL_OW 321
51553: PUSH
51554: LD_INT 2
51556: EQUAL
51557: AND
51558: IFFALSE 51618
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51560: LD_INT 22
51562: PUSH
51563: LD_VAR 0 16
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 35
51574: PUSH
51575: LD_INT 49
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 91
51584: PUSH
51585: LD_VAR 0 1
51589: PUSH
51590: LD_INT 10
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: LIST
51602: PPUSH
51603: CALL_OW 69
51607: NOT
51608: IFFALSE 51618
// weapon := ru_time_lapser ;
51610: LD_ADDR_VAR 0 18
51614: PUSH
51615: LD_INT 49
51617: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51618: LD_VAR 0 12
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: IN
51633: PUSH
51634: LD_INT 11
51636: PUSH
51637: LD_VAR 0 5
51641: IN
51642: PUSH
51643: LD_INT 30
51645: PUSH
51646: LD_VAR 0 5
51650: IN
51651: OR
51652: AND
51653: PUSH
51654: LD_INT 6
51656: PPUSH
51657: LD_VAR 0 16
51661: PPUSH
51662: CALL_OW 321
51666: PUSH
51667: LD_INT 2
51669: EQUAL
51670: AND
51671: IFFALSE 51836
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51673: LD_INT 22
51675: PUSH
51676: LD_VAR 0 16
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: LD_INT 35
51690: PUSH
51691: LD_INT 11
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 35
51700: PUSH
51701: LD_INT 30
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 91
51715: PUSH
51716: LD_VAR 0 1
51720: PUSH
51721: LD_INT 18
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: LIST
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: PPUSH
51734: CALL_OW 69
51738: NOT
51739: PUSH
51740: LD_INT 22
51742: PUSH
51743: LD_VAR 0 16
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 30
51757: PUSH
51758: LD_INT 32
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 30
51767: PUSH
51768: LD_INT 33
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 91
51782: PUSH
51783: LD_VAR 0 1
51787: PUSH
51788: LD_INT 12
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: LIST
51800: PUSH
51801: EMPTY
51802: LIST
51803: PPUSH
51804: CALL_OW 69
51808: PUSH
51809: LD_INT 2
51811: GREATER
51812: AND
51813: IFFALSE 51836
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51815: LD_ADDR_VAR 0 18
51819: PUSH
51820: LD_INT 11
51822: PUSH
51823: LD_INT 30
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_VAR 0 12
51834: ARRAY
51835: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51836: LD_VAR 0 18
51840: NOT
51841: PUSH
51842: LD_INT 40
51844: PPUSH
51845: LD_VAR 0 16
51849: PPUSH
51850: CALL_OW 321
51854: PUSH
51855: LD_INT 2
51857: EQUAL
51858: AND
51859: PUSH
51860: LD_INT 7
51862: PUSH
51863: LD_VAR 0 5
51867: IN
51868: PUSH
51869: LD_INT 28
51871: PUSH
51872: LD_VAR 0 5
51876: IN
51877: OR
51878: PUSH
51879: LD_INT 45
51881: PUSH
51882: LD_VAR 0 5
51886: IN
51887: OR
51888: AND
51889: IFFALSE 52143
// begin hex := GetHexInfo ( x , y ) ;
51891: LD_ADDR_VAR 0 4
51895: PUSH
51896: LD_VAR 0 10
51900: PPUSH
51901: LD_VAR 0 11
51905: PPUSH
51906: CALL_OW 546
51910: ST_TO_ADDR
// if hex [ 1 ] then
51911: LD_VAR 0 4
51915: PUSH
51916: LD_INT 1
51918: ARRAY
51919: IFFALSE 51923
// exit ;
51921: GO 52326
// height := hex [ 2 ] ;
51923: LD_ADDR_VAR 0 15
51927: PUSH
51928: LD_VAR 0 4
51932: PUSH
51933: LD_INT 2
51935: ARRAY
51936: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51937: LD_ADDR_VAR 0 14
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: LD_INT 3
51950: PUSH
51951: LD_INT 5
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: ST_TO_ADDR
// for i in tmp do
51960: LD_ADDR_VAR 0 8
51964: PUSH
51965: LD_VAR 0 14
51969: PUSH
51970: FOR_IN
51971: IFFALSE 52141
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51973: LD_ADDR_VAR 0 9
51977: PUSH
51978: LD_VAR 0 10
51982: PPUSH
51983: LD_VAR 0 8
51987: PPUSH
51988: LD_INT 5
51990: PPUSH
51991: CALL_OW 272
51995: PUSH
51996: LD_VAR 0 11
52000: PPUSH
52001: LD_VAR 0 8
52005: PPUSH
52006: LD_INT 5
52008: PPUSH
52009: CALL_OW 273
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52018: LD_VAR 0 9
52022: PUSH
52023: LD_INT 1
52025: ARRAY
52026: PPUSH
52027: LD_VAR 0 9
52031: PUSH
52032: LD_INT 2
52034: ARRAY
52035: PPUSH
52036: CALL_OW 488
52040: IFFALSE 52139
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52042: LD_ADDR_VAR 0 4
52046: PUSH
52047: LD_VAR 0 9
52051: PUSH
52052: LD_INT 1
52054: ARRAY
52055: PPUSH
52056: LD_VAR 0 9
52060: PUSH
52061: LD_INT 2
52063: ARRAY
52064: PPUSH
52065: CALL_OW 546
52069: ST_TO_ADDR
// if hex [ 1 ] then
52070: LD_VAR 0 4
52074: PUSH
52075: LD_INT 1
52077: ARRAY
52078: IFFALSE 52082
// continue ;
52080: GO 51970
// h := hex [ 2 ] ;
52082: LD_ADDR_VAR 0 13
52086: PUSH
52087: LD_VAR 0 4
52091: PUSH
52092: LD_INT 2
52094: ARRAY
52095: ST_TO_ADDR
// if h + 7 < height then
52096: LD_VAR 0 13
52100: PUSH
52101: LD_INT 7
52103: PLUS
52104: PUSH
52105: LD_VAR 0 15
52109: LESS
52110: IFFALSE 52139
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52112: LD_ADDR_VAR 0 18
52116: PUSH
52117: LD_INT 7
52119: PUSH
52120: LD_INT 28
52122: PUSH
52123: LD_INT 45
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: LIST
52130: PUSH
52131: LD_VAR 0 12
52135: ARRAY
52136: ST_TO_ADDR
// break ;
52137: GO 52141
// end ; end ; end ;
52139: GO 51970
52141: POP
52142: POP
// end ; if not weapon then
52143: LD_VAR 0 18
52147: NOT
52148: IFFALSE 52208
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52150: LD_ADDR_VAR 0 5
52154: PUSH
52155: LD_VAR 0 5
52159: PUSH
52160: LD_INT 11
52162: PUSH
52163: LD_INT 30
52165: PUSH
52166: LD_INT 49
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: DIFF
52174: ST_TO_ADDR
// if not list then
52175: LD_VAR 0 5
52179: NOT
52180: IFFALSE 52184
// exit ;
52182: GO 52326
// weapon := list [ rand ( 1 , list ) ] ;
52184: LD_ADDR_VAR 0 18
52188: PUSH
52189: LD_VAR 0 5
52193: PUSH
52194: LD_INT 1
52196: PPUSH
52197: LD_VAR 0 5
52201: PPUSH
52202: CALL_OW 12
52206: ARRAY
52207: ST_TO_ADDR
// end ; if weapon then
52208: LD_VAR 0 18
52212: IFFALSE 52326
// begin tmp := CostOfWeapon ( weapon ) ;
52214: LD_ADDR_VAR 0 14
52218: PUSH
52219: LD_VAR 0 18
52223: PPUSH
52224: CALL_OW 451
52228: ST_TO_ADDR
// j := GetBase ( tower ) ;
52229: LD_ADDR_VAR 0 9
52233: PUSH
52234: LD_VAR 0 1
52238: PPUSH
52239: CALL_OW 274
52243: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52244: LD_VAR 0 9
52248: PPUSH
52249: LD_INT 1
52251: PPUSH
52252: CALL_OW 275
52256: PUSH
52257: LD_VAR 0 14
52261: PUSH
52262: LD_INT 1
52264: ARRAY
52265: GREATEREQUAL
52266: PUSH
52267: LD_VAR 0 9
52271: PPUSH
52272: LD_INT 2
52274: PPUSH
52275: CALL_OW 275
52279: PUSH
52280: LD_VAR 0 14
52284: PUSH
52285: LD_INT 2
52287: ARRAY
52288: GREATEREQUAL
52289: AND
52290: PUSH
52291: LD_VAR 0 9
52295: PPUSH
52296: LD_INT 3
52298: PPUSH
52299: CALL_OW 275
52303: PUSH
52304: LD_VAR 0 14
52308: PUSH
52309: LD_INT 3
52311: ARRAY
52312: GREATEREQUAL
52313: AND
52314: IFFALSE 52326
// result := weapon ;
52316: LD_ADDR_VAR 0 3
52320: PUSH
52321: LD_VAR 0 18
52325: ST_TO_ADDR
// end ; end ;
52326: LD_VAR 0 3
52330: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52331: LD_INT 0
52333: PPUSH
52334: PPUSH
// result := true ;
52335: LD_ADDR_VAR 0 3
52339: PUSH
52340: LD_INT 1
52342: ST_TO_ADDR
// if array1 = array2 then
52343: LD_VAR 0 1
52347: PUSH
52348: LD_VAR 0 2
52352: EQUAL
52353: IFFALSE 52413
// begin for i = 1 to array1 do
52355: LD_ADDR_VAR 0 4
52359: PUSH
52360: DOUBLE
52361: LD_INT 1
52363: DEC
52364: ST_TO_ADDR
52365: LD_VAR 0 1
52369: PUSH
52370: FOR_TO
52371: IFFALSE 52409
// if array1 [ i ] <> array2 [ i ] then
52373: LD_VAR 0 1
52377: PUSH
52378: LD_VAR 0 4
52382: ARRAY
52383: PUSH
52384: LD_VAR 0 2
52388: PUSH
52389: LD_VAR 0 4
52393: ARRAY
52394: NONEQUAL
52395: IFFALSE 52407
// begin result := false ;
52397: LD_ADDR_VAR 0 3
52401: PUSH
52402: LD_INT 0
52404: ST_TO_ADDR
// break ;
52405: GO 52409
// end ;
52407: GO 52370
52409: POP
52410: POP
// end else
52411: GO 52421
// result := false ;
52413: LD_ADDR_VAR 0 3
52417: PUSH
52418: LD_INT 0
52420: ST_TO_ADDR
// end ;
52421: LD_VAR 0 3
52425: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52426: LD_INT 0
52428: PPUSH
52429: PPUSH
// if not array1 or not array2 then
52430: LD_VAR 0 1
52434: NOT
52435: PUSH
52436: LD_VAR 0 2
52440: NOT
52441: OR
52442: IFFALSE 52446
// exit ;
52444: GO 52510
// result := true ;
52446: LD_ADDR_VAR 0 3
52450: PUSH
52451: LD_INT 1
52453: ST_TO_ADDR
// for i = 1 to array1 do
52454: LD_ADDR_VAR 0 4
52458: PUSH
52459: DOUBLE
52460: LD_INT 1
52462: DEC
52463: ST_TO_ADDR
52464: LD_VAR 0 1
52468: PUSH
52469: FOR_TO
52470: IFFALSE 52508
// if array1 [ i ] <> array2 [ i ] then
52472: LD_VAR 0 1
52476: PUSH
52477: LD_VAR 0 4
52481: ARRAY
52482: PUSH
52483: LD_VAR 0 2
52487: PUSH
52488: LD_VAR 0 4
52492: ARRAY
52493: NONEQUAL
52494: IFFALSE 52506
// begin result := false ;
52496: LD_ADDR_VAR 0 3
52500: PUSH
52501: LD_INT 0
52503: ST_TO_ADDR
// break ;
52504: GO 52508
// end ;
52506: GO 52469
52508: POP
52509: POP
// end ;
52510: LD_VAR 0 3
52514: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52515: LD_INT 0
52517: PPUSH
52518: PPUSH
52519: PPUSH
// pom := GetBase ( fac ) ;
52520: LD_ADDR_VAR 0 5
52524: PUSH
52525: LD_VAR 0 1
52529: PPUSH
52530: CALL_OW 274
52534: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52535: LD_ADDR_VAR 0 4
52539: PUSH
52540: LD_VAR 0 2
52544: PUSH
52545: LD_INT 1
52547: ARRAY
52548: PPUSH
52549: LD_VAR 0 2
52553: PUSH
52554: LD_INT 2
52556: ARRAY
52557: PPUSH
52558: LD_VAR 0 2
52562: PUSH
52563: LD_INT 3
52565: ARRAY
52566: PPUSH
52567: LD_VAR 0 2
52571: PUSH
52572: LD_INT 4
52574: ARRAY
52575: PPUSH
52576: CALL_OW 449
52580: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52581: LD_ADDR_VAR 0 3
52585: PUSH
52586: LD_VAR 0 5
52590: PPUSH
52591: LD_INT 1
52593: PPUSH
52594: CALL_OW 275
52598: PUSH
52599: LD_VAR 0 4
52603: PUSH
52604: LD_INT 1
52606: ARRAY
52607: GREATEREQUAL
52608: PUSH
52609: LD_VAR 0 5
52613: PPUSH
52614: LD_INT 2
52616: PPUSH
52617: CALL_OW 275
52621: PUSH
52622: LD_VAR 0 4
52626: PUSH
52627: LD_INT 2
52629: ARRAY
52630: GREATEREQUAL
52631: AND
52632: PUSH
52633: LD_VAR 0 5
52637: PPUSH
52638: LD_INT 3
52640: PPUSH
52641: CALL_OW 275
52645: PUSH
52646: LD_VAR 0 4
52650: PUSH
52651: LD_INT 3
52653: ARRAY
52654: GREATEREQUAL
52655: AND
52656: ST_TO_ADDR
// end ;
52657: LD_VAR 0 3
52661: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52662: LD_INT 0
52664: PPUSH
52665: PPUSH
52666: PPUSH
52667: PPUSH
// pom := GetBase ( building ) ;
52668: LD_ADDR_VAR 0 3
52672: PUSH
52673: LD_VAR 0 1
52677: PPUSH
52678: CALL_OW 274
52682: ST_TO_ADDR
// if not pom then
52683: LD_VAR 0 3
52687: NOT
52688: IFFALSE 52692
// exit ;
52690: GO 52862
// btype := GetBType ( building ) ;
52692: LD_ADDR_VAR 0 5
52696: PUSH
52697: LD_VAR 0 1
52701: PPUSH
52702: CALL_OW 266
52706: ST_TO_ADDR
// if btype = b_armoury then
52707: LD_VAR 0 5
52711: PUSH
52712: LD_INT 4
52714: EQUAL
52715: IFFALSE 52725
// btype := b_barracks ;
52717: LD_ADDR_VAR 0 5
52721: PUSH
52722: LD_INT 5
52724: ST_TO_ADDR
// if btype = b_depot then
52725: LD_VAR 0 5
52729: PUSH
52730: LD_INT 0
52732: EQUAL
52733: IFFALSE 52743
// btype := b_warehouse ;
52735: LD_ADDR_VAR 0 5
52739: PUSH
52740: LD_INT 1
52742: ST_TO_ADDR
// if btype = b_workshop then
52743: LD_VAR 0 5
52747: PUSH
52748: LD_INT 2
52750: EQUAL
52751: IFFALSE 52761
// btype := b_factory ;
52753: LD_ADDR_VAR 0 5
52757: PUSH
52758: LD_INT 3
52760: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52761: LD_ADDR_VAR 0 4
52765: PUSH
52766: LD_VAR 0 5
52770: PPUSH
52771: LD_VAR 0 1
52775: PPUSH
52776: CALL_OW 248
52780: PPUSH
52781: CALL_OW 450
52785: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52786: LD_ADDR_VAR 0 2
52790: PUSH
52791: LD_VAR 0 3
52795: PPUSH
52796: LD_INT 1
52798: PPUSH
52799: CALL_OW 275
52803: PUSH
52804: LD_VAR 0 4
52808: PUSH
52809: LD_INT 1
52811: ARRAY
52812: GREATEREQUAL
52813: PUSH
52814: LD_VAR 0 3
52818: PPUSH
52819: LD_INT 2
52821: PPUSH
52822: CALL_OW 275
52826: PUSH
52827: LD_VAR 0 4
52831: PUSH
52832: LD_INT 2
52834: ARRAY
52835: GREATEREQUAL
52836: AND
52837: PUSH
52838: LD_VAR 0 3
52842: PPUSH
52843: LD_INT 3
52845: PPUSH
52846: CALL_OW 275
52850: PUSH
52851: LD_VAR 0 4
52855: PUSH
52856: LD_INT 3
52858: ARRAY
52859: GREATEREQUAL
52860: AND
52861: ST_TO_ADDR
// end ;
52862: LD_VAR 0 2
52866: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52867: LD_INT 0
52869: PPUSH
52870: PPUSH
52871: PPUSH
// pom := GetBase ( building ) ;
52872: LD_ADDR_VAR 0 4
52876: PUSH
52877: LD_VAR 0 1
52881: PPUSH
52882: CALL_OW 274
52886: ST_TO_ADDR
// if not pom then
52887: LD_VAR 0 4
52891: NOT
52892: IFFALSE 52896
// exit ;
52894: GO 52997
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52896: LD_ADDR_VAR 0 5
52900: PUSH
52901: LD_VAR 0 2
52905: PPUSH
52906: LD_VAR 0 1
52910: PPUSH
52911: CALL_OW 248
52915: PPUSH
52916: CALL_OW 450
52920: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52921: LD_ADDR_VAR 0 3
52925: PUSH
52926: LD_VAR 0 4
52930: PPUSH
52931: LD_INT 1
52933: PPUSH
52934: CALL_OW 275
52938: PUSH
52939: LD_VAR 0 5
52943: PUSH
52944: LD_INT 1
52946: ARRAY
52947: GREATEREQUAL
52948: PUSH
52949: LD_VAR 0 4
52953: PPUSH
52954: LD_INT 2
52956: PPUSH
52957: CALL_OW 275
52961: PUSH
52962: LD_VAR 0 5
52966: PUSH
52967: LD_INT 2
52969: ARRAY
52970: GREATEREQUAL
52971: AND
52972: PUSH
52973: LD_VAR 0 4
52977: PPUSH
52978: LD_INT 3
52980: PPUSH
52981: CALL_OW 275
52985: PUSH
52986: LD_VAR 0 5
52990: PUSH
52991: LD_INT 3
52993: ARRAY
52994: GREATEREQUAL
52995: AND
52996: ST_TO_ADDR
// end ;
52997: LD_VAR 0 3
53001: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53002: LD_INT 0
53004: PPUSH
53005: PPUSH
53006: PPUSH
53007: PPUSH
53008: PPUSH
53009: PPUSH
53010: PPUSH
53011: PPUSH
53012: PPUSH
53013: PPUSH
53014: PPUSH
// result := false ;
53015: LD_ADDR_VAR 0 8
53019: PUSH
53020: LD_INT 0
53022: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53023: LD_VAR 0 5
53027: NOT
53028: PUSH
53029: LD_VAR 0 1
53033: NOT
53034: OR
53035: PUSH
53036: LD_VAR 0 2
53040: NOT
53041: OR
53042: PUSH
53043: LD_VAR 0 3
53047: NOT
53048: OR
53049: IFFALSE 53053
// exit ;
53051: GO 53867
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53053: LD_ADDR_VAR 0 14
53057: PUSH
53058: LD_VAR 0 1
53062: PPUSH
53063: LD_VAR 0 2
53067: PPUSH
53068: LD_VAR 0 3
53072: PPUSH
53073: LD_VAR 0 4
53077: PPUSH
53078: LD_VAR 0 5
53082: PUSH
53083: LD_INT 1
53085: ARRAY
53086: PPUSH
53087: CALL_OW 248
53091: PPUSH
53092: LD_INT 0
53094: PPUSH
53095: CALL 55100 0 6
53099: ST_TO_ADDR
// if not hexes then
53100: LD_VAR 0 14
53104: NOT
53105: IFFALSE 53109
// exit ;
53107: GO 53867
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53109: LD_ADDR_VAR 0 17
53113: PUSH
53114: LD_VAR 0 5
53118: PPUSH
53119: LD_INT 22
53121: PUSH
53122: LD_VAR 0 13
53126: PPUSH
53127: CALL_OW 255
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: LD_INT 30
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 30
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PPUSH
53168: CALL_OW 72
53172: ST_TO_ADDR
// for i = 1 to hexes do
53173: LD_ADDR_VAR 0 9
53177: PUSH
53178: DOUBLE
53179: LD_INT 1
53181: DEC
53182: ST_TO_ADDR
53183: LD_VAR 0 14
53187: PUSH
53188: FOR_TO
53189: IFFALSE 53865
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53191: LD_ADDR_VAR 0 13
53195: PUSH
53196: LD_VAR 0 14
53200: PUSH
53201: LD_VAR 0 9
53205: ARRAY
53206: PUSH
53207: LD_INT 1
53209: ARRAY
53210: PPUSH
53211: LD_VAR 0 14
53215: PUSH
53216: LD_VAR 0 9
53220: ARRAY
53221: PUSH
53222: LD_INT 2
53224: ARRAY
53225: PPUSH
53226: CALL_OW 428
53230: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53231: LD_VAR 0 14
53235: PUSH
53236: LD_VAR 0 9
53240: ARRAY
53241: PUSH
53242: LD_INT 1
53244: ARRAY
53245: PPUSH
53246: LD_VAR 0 14
53250: PUSH
53251: LD_VAR 0 9
53255: ARRAY
53256: PUSH
53257: LD_INT 2
53259: ARRAY
53260: PPUSH
53261: CALL_OW 351
53265: PUSH
53266: LD_VAR 0 14
53270: PUSH
53271: LD_VAR 0 9
53275: ARRAY
53276: PUSH
53277: LD_INT 1
53279: ARRAY
53280: PPUSH
53281: LD_VAR 0 14
53285: PUSH
53286: LD_VAR 0 9
53290: ARRAY
53291: PUSH
53292: LD_INT 2
53294: ARRAY
53295: PPUSH
53296: CALL_OW 488
53300: NOT
53301: OR
53302: PUSH
53303: LD_VAR 0 13
53307: PPUSH
53308: CALL_OW 247
53312: PUSH
53313: LD_INT 3
53315: EQUAL
53316: OR
53317: IFFALSE 53323
// exit ;
53319: POP
53320: POP
53321: GO 53867
// if not tmp then
53323: LD_VAR 0 13
53327: NOT
53328: IFFALSE 53332
// continue ;
53330: GO 53188
// result := true ;
53332: LD_ADDR_VAR 0 8
53336: PUSH
53337: LD_INT 1
53339: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53340: LD_VAR 0 6
53344: PUSH
53345: LD_VAR 0 13
53349: PPUSH
53350: CALL_OW 247
53354: PUSH
53355: LD_INT 2
53357: EQUAL
53358: AND
53359: PUSH
53360: LD_VAR 0 13
53364: PPUSH
53365: CALL_OW 263
53369: PUSH
53370: LD_INT 1
53372: EQUAL
53373: AND
53374: IFFALSE 53538
// begin if IsDrivenBy ( tmp ) then
53376: LD_VAR 0 13
53380: PPUSH
53381: CALL_OW 311
53385: IFFALSE 53389
// continue ;
53387: GO 53188
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53389: LD_VAR 0 6
53393: PPUSH
53394: LD_INT 3
53396: PUSH
53397: LD_INT 60
53399: PUSH
53400: EMPTY
53401: LIST
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 3
53409: PUSH
53410: LD_INT 55
53412: PUSH
53413: EMPTY
53414: LIST
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PPUSH
53424: CALL_OW 72
53428: IFFALSE 53536
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53430: LD_ADDR_VAR 0 18
53434: PUSH
53435: LD_VAR 0 6
53439: PPUSH
53440: LD_INT 3
53442: PUSH
53443: LD_INT 60
53445: PUSH
53446: EMPTY
53447: LIST
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: LD_INT 55
53458: PUSH
53459: EMPTY
53460: LIST
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PPUSH
53470: CALL_OW 72
53474: PUSH
53475: LD_INT 1
53477: ARRAY
53478: ST_TO_ADDR
// if IsInUnit ( driver ) then
53479: LD_VAR 0 18
53483: PPUSH
53484: CALL_OW 310
53488: IFFALSE 53499
// ComExit ( driver ) ;
53490: LD_VAR 0 18
53494: PPUSH
53495: CALL 78861 0 1
// AddComEnterUnit ( driver , tmp ) ;
53499: LD_VAR 0 18
53503: PPUSH
53504: LD_VAR 0 13
53508: PPUSH
53509: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53513: LD_VAR 0 18
53517: PPUSH
53518: LD_VAR 0 7
53522: PPUSH
53523: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53527: LD_VAR 0 18
53531: PPUSH
53532: CALL_OW 181
// end ; continue ;
53536: GO 53188
// end ; if not cleaners or not tmp in cleaners then
53538: LD_VAR 0 6
53542: NOT
53543: PUSH
53544: LD_VAR 0 13
53548: PUSH
53549: LD_VAR 0 6
53553: IN
53554: NOT
53555: OR
53556: IFFALSE 53863
// begin if dep then
53558: LD_VAR 0 17
53562: IFFALSE 53698
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53564: LD_ADDR_VAR 0 16
53568: PUSH
53569: LD_VAR 0 17
53573: PUSH
53574: LD_INT 1
53576: ARRAY
53577: PPUSH
53578: CALL_OW 250
53582: PPUSH
53583: LD_VAR 0 17
53587: PUSH
53588: LD_INT 1
53590: ARRAY
53591: PPUSH
53592: CALL_OW 254
53596: PPUSH
53597: LD_INT 5
53599: PPUSH
53600: CALL_OW 272
53604: PUSH
53605: LD_VAR 0 17
53609: PUSH
53610: LD_INT 1
53612: ARRAY
53613: PPUSH
53614: CALL_OW 251
53618: PPUSH
53619: LD_VAR 0 17
53623: PUSH
53624: LD_INT 1
53626: ARRAY
53627: PPUSH
53628: CALL_OW 254
53632: PPUSH
53633: LD_INT 5
53635: PPUSH
53636: CALL_OW 273
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53645: LD_VAR 0 16
53649: PUSH
53650: LD_INT 1
53652: ARRAY
53653: PPUSH
53654: LD_VAR 0 16
53658: PUSH
53659: LD_INT 2
53661: ARRAY
53662: PPUSH
53663: CALL_OW 488
53667: IFFALSE 53698
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53669: LD_VAR 0 13
53673: PPUSH
53674: LD_VAR 0 16
53678: PUSH
53679: LD_INT 1
53681: ARRAY
53682: PPUSH
53683: LD_VAR 0 16
53687: PUSH
53688: LD_INT 2
53690: ARRAY
53691: PPUSH
53692: CALL_OW 111
// continue ;
53696: GO 53188
// end ; end ; r := GetDir ( tmp ) ;
53698: LD_ADDR_VAR 0 15
53702: PUSH
53703: LD_VAR 0 13
53707: PPUSH
53708: CALL_OW 254
53712: ST_TO_ADDR
// if r = 5 then
53713: LD_VAR 0 15
53717: PUSH
53718: LD_INT 5
53720: EQUAL
53721: IFFALSE 53731
// r := 0 ;
53723: LD_ADDR_VAR 0 15
53727: PUSH
53728: LD_INT 0
53730: ST_TO_ADDR
// for j = r to 5 do
53731: LD_ADDR_VAR 0 10
53735: PUSH
53736: DOUBLE
53737: LD_VAR 0 15
53741: DEC
53742: ST_TO_ADDR
53743: LD_INT 5
53745: PUSH
53746: FOR_TO
53747: IFFALSE 53861
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53749: LD_ADDR_VAR 0 11
53753: PUSH
53754: LD_VAR 0 13
53758: PPUSH
53759: CALL_OW 250
53763: PPUSH
53764: LD_VAR 0 10
53768: PPUSH
53769: LD_INT 2
53771: PPUSH
53772: CALL_OW 272
53776: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53777: LD_ADDR_VAR 0 12
53781: PUSH
53782: LD_VAR 0 13
53786: PPUSH
53787: CALL_OW 251
53791: PPUSH
53792: LD_VAR 0 10
53796: PPUSH
53797: LD_INT 2
53799: PPUSH
53800: CALL_OW 273
53804: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53805: LD_VAR 0 11
53809: PPUSH
53810: LD_VAR 0 12
53814: PPUSH
53815: CALL_OW 488
53819: PUSH
53820: LD_VAR 0 11
53824: PPUSH
53825: LD_VAR 0 12
53829: PPUSH
53830: CALL_OW 428
53834: NOT
53835: AND
53836: IFFALSE 53859
// begin ComMoveXY ( tmp , _x , _y ) ;
53838: LD_VAR 0 13
53842: PPUSH
53843: LD_VAR 0 11
53847: PPUSH
53848: LD_VAR 0 12
53852: PPUSH
53853: CALL_OW 111
// break ;
53857: GO 53861
// end ; end ;
53859: GO 53746
53861: POP
53862: POP
// end ; end ;
53863: GO 53188
53865: POP
53866: POP
// end ;
53867: LD_VAR 0 8
53871: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53872: LD_INT 0
53874: PPUSH
// result := true ;
53875: LD_ADDR_VAR 0 3
53879: PUSH
53880: LD_INT 1
53882: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53883: LD_VAR 0 2
53887: PUSH
53888: LD_INT 24
53890: DOUBLE
53891: EQUAL
53892: IFTRUE 53902
53894: LD_INT 33
53896: DOUBLE
53897: EQUAL
53898: IFTRUE 53902
53900: GO 53927
53902: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53903: LD_ADDR_VAR 0 3
53907: PUSH
53908: LD_INT 32
53910: PPUSH
53911: LD_VAR 0 1
53915: PPUSH
53916: CALL_OW 321
53920: PUSH
53921: LD_INT 2
53923: EQUAL
53924: ST_TO_ADDR
53925: GO 54243
53927: LD_INT 20
53929: DOUBLE
53930: EQUAL
53931: IFTRUE 53935
53933: GO 53960
53935: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53936: LD_ADDR_VAR 0 3
53940: PUSH
53941: LD_INT 6
53943: PPUSH
53944: LD_VAR 0 1
53948: PPUSH
53949: CALL_OW 321
53953: PUSH
53954: LD_INT 2
53956: EQUAL
53957: ST_TO_ADDR
53958: GO 54243
53960: LD_INT 22
53962: DOUBLE
53963: EQUAL
53964: IFTRUE 53974
53966: LD_INT 36
53968: DOUBLE
53969: EQUAL
53970: IFTRUE 53974
53972: GO 53999
53974: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53975: LD_ADDR_VAR 0 3
53979: PUSH
53980: LD_INT 15
53982: PPUSH
53983: LD_VAR 0 1
53987: PPUSH
53988: CALL_OW 321
53992: PUSH
53993: LD_INT 2
53995: EQUAL
53996: ST_TO_ADDR
53997: GO 54243
53999: LD_INT 30
54001: DOUBLE
54002: EQUAL
54003: IFTRUE 54007
54005: GO 54032
54007: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54008: LD_ADDR_VAR 0 3
54012: PUSH
54013: LD_INT 20
54015: PPUSH
54016: LD_VAR 0 1
54020: PPUSH
54021: CALL_OW 321
54025: PUSH
54026: LD_INT 2
54028: EQUAL
54029: ST_TO_ADDR
54030: GO 54243
54032: LD_INT 28
54034: DOUBLE
54035: EQUAL
54036: IFTRUE 54046
54038: LD_INT 21
54040: DOUBLE
54041: EQUAL
54042: IFTRUE 54046
54044: GO 54071
54046: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54047: LD_ADDR_VAR 0 3
54051: PUSH
54052: LD_INT 21
54054: PPUSH
54055: LD_VAR 0 1
54059: PPUSH
54060: CALL_OW 321
54064: PUSH
54065: LD_INT 2
54067: EQUAL
54068: ST_TO_ADDR
54069: GO 54243
54071: LD_INT 16
54073: DOUBLE
54074: EQUAL
54075: IFTRUE 54079
54077: GO 54104
54079: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54080: LD_ADDR_VAR 0 3
54084: PUSH
54085: LD_INT 84
54087: PPUSH
54088: LD_VAR 0 1
54092: PPUSH
54093: CALL_OW 321
54097: PUSH
54098: LD_INT 2
54100: EQUAL
54101: ST_TO_ADDR
54102: GO 54243
54104: LD_INT 19
54106: DOUBLE
54107: EQUAL
54108: IFTRUE 54118
54110: LD_INT 23
54112: DOUBLE
54113: EQUAL
54114: IFTRUE 54118
54116: GO 54143
54118: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54119: LD_ADDR_VAR 0 3
54123: PUSH
54124: LD_INT 83
54126: PPUSH
54127: LD_VAR 0 1
54131: PPUSH
54132: CALL_OW 321
54136: PUSH
54137: LD_INT 2
54139: EQUAL
54140: ST_TO_ADDR
54141: GO 54243
54143: LD_INT 17
54145: DOUBLE
54146: EQUAL
54147: IFTRUE 54151
54149: GO 54176
54151: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54152: LD_ADDR_VAR 0 3
54156: PUSH
54157: LD_INT 39
54159: PPUSH
54160: LD_VAR 0 1
54164: PPUSH
54165: CALL_OW 321
54169: PUSH
54170: LD_INT 2
54172: EQUAL
54173: ST_TO_ADDR
54174: GO 54243
54176: LD_INT 18
54178: DOUBLE
54179: EQUAL
54180: IFTRUE 54184
54182: GO 54209
54184: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54185: LD_ADDR_VAR 0 3
54189: PUSH
54190: LD_INT 40
54192: PPUSH
54193: LD_VAR 0 1
54197: PPUSH
54198: CALL_OW 321
54202: PUSH
54203: LD_INT 2
54205: EQUAL
54206: ST_TO_ADDR
54207: GO 54243
54209: LD_INT 27
54211: DOUBLE
54212: EQUAL
54213: IFTRUE 54217
54215: GO 54242
54217: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54218: LD_ADDR_VAR 0 3
54222: PUSH
54223: LD_INT 35
54225: PPUSH
54226: LD_VAR 0 1
54230: PPUSH
54231: CALL_OW 321
54235: PUSH
54236: LD_INT 2
54238: EQUAL
54239: ST_TO_ADDR
54240: GO 54243
54242: POP
// end ;
54243: LD_VAR 0 3
54247: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54248: LD_INT 0
54250: PPUSH
54251: PPUSH
54252: PPUSH
54253: PPUSH
54254: PPUSH
54255: PPUSH
54256: PPUSH
54257: PPUSH
54258: PPUSH
54259: PPUSH
54260: PPUSH
// result := false ;
54261: LD_ADDR_VAR 0 6
54265: PUSH
54266: LD_INT 0
54268: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54269: LD_VAR 0 1
54273: NOT
54274: PUSH
54275: LD_VAR 0 1
54279: PPUSH
54280: CALL_OW 266
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: IN
54295: NOT
54296: OR
54297: PUSH
54298: LD_VAR 0 2
54302: NOT
54303: OR
54304: PUSH
54305: LD_VAR 0 5
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: LD_INT 3
54321: PUSH
54322: LD_INT 4
54324: PUSH
54325: LD_INT 5
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: IN
54336: NOT
54337: OR
54338: PUSH
54339: LD_VAR 0 3
54343: PPUSH
54344: LD_VAR 0 4
54348: PPUSH
54349: CALL_OW 488
54353: NOT
54354: OR
54355: IFFALSE 54359
// exit ;
54357: GO 55095
// side := GetSide ( depot ) ;
54359: LD_ADDR_VAR 0 9
54363: PUSH
54364: LD_VAR 0 1
54368: PPUSH
54369: CALL_OW 255
54373: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54374: LD_VAR 0 9
54378: PPUSH
54379: LD_VAR 0 2
54383: PPUSH
54384: CALL 53872 0 2
54388: NOT
54389: IFFALSE 54393
// exit ;
54391: GO 55095
// pom := GetBase ( depot ) ;
54393: LD_ADDR_VAR 0 10
54397: PUSH
54398: LD_VAR 0 1
54402: PPUSH
54403: CALL_OW 274
54407: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54408: LD_ADDR_VAR 0 11
54412: PUSH
54413: LD_VAR 0 2
54417: PPUSH
54418: LD_VAR 0 1
54422: PPUSH
54423: CALL_OW 248
54427: PPUSH
54428: CALL_OW 450
54432: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54433: LD_VAR 0 10
54437: PPUSH
54438: LD_INT 1
54440: PPUSH
54441: CALL_OW 275
54445: PUSH
54446: LD_VAR 0 11
54450: PUSH
54451: LD_INT 1
54453: ARRAY
54454: GREATEREQUAL
54455: PUSH
54456: LD_VAR 0 10
54460: PPUSH
54461: LD_INT 2
54463: PPUSH
54464: CALL_OW 275
54468: PUSH
54469: LD_VAR 0 11
54473: PUSH
54474: LD_INT 2
54476: ARRAY
54477: GREATEREQUAL
54478: AND
54479: PUSH
54480: LD_VAR 0 10
54484: PPUSH
54485: LD_INT 3
54487: PPUSH
54488: CALL_OW 275
54492: PUSH
54493: LD_VAR 0 11
54497: PUSH
54498: LD_INT 3
54500: ARRAY
54501: GREATEREQUAL
54502: AND
54503: NOT
54504: IFFALSE 54508
// exit ;
54506: GO 55095
// if GetBType ( depot ) = b_depot then
54508: LD_VAR 0 1
54512: PPUSH
54513: CALL_OW 266
54517: PUSH
54518: LD_INT 0
54520: EQUAL
54521: IFFALSE 54533
// dist := 28 else
54523: LD_ADDR_VAR 0 14
54527: PUSH
54528: LD_INT 28
54530: ST_TO_ADDR
54531: GO 54541
// dist := 36 ;
54533: LD_ADDR_VAR 0 14
54537: PUSH
54538: LD_INT 36
54540: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54541: LD_VAR 0 1
54545: PPUSH
54546: LD_VAR 0 3
54550: PPUSH
54551: LD_VAR 0 4
54555: PPUSH
54556: CALL_OW 297
54560: PUSH
54561: LD_VAR 0 14
54565: GREATER
54566: IFFALSE 54570
// exit ;
54568: GO 55095
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54570: LD_ADDR_VAR 0 12
54574: PUSH
54575: LD_VAR 0 2
54579: PPUSH
54580: LD_VAR 0 3
54584: PPUSH
54585: LD_VAR 0 4
54589: PPUSH
54590: LD_VAR 0 5
54594: PPUSH
54595: LD_VAR 0 1
54599: PPUSH
54600: CALL_OW 248
54604: PPUSH
54605: LD_INT 0
54607: PPUSH
54608: CALL 55100 0 6
54612: ST_TO_ADDR
// if not hexes then
54613: LD_VAR 0 12
54617: NOT
54618: IFFALSE 54622
// exit ;
54620: GO 55095
// hex := GetHexInfo ( x , y ) ;
54622: LD_ADDR_VAR 0 15
54626: PUSH
54627: LD_VAR 0 3
54631: PPUSH
54632: LD_VAR 0 4
54636: PPUSH
54637: CALL_OW 546
54641: ST_TO_ADDR
// if hex [ 1 ] then
54642: LD_VAR 0 15
54646: PUSH
54647: LD_INT 1
54649: ARRAY
54650: IFFALSE 54654
// exit ;
54652: GO 55095
// height := hex [ 2 ] ;
54654: LD_ADDR_VAR 0 13
54658: PUSH
54659: LD_VAR 0 15
54663: PUSH
54664: LD_INT 2
54666: ARRAY
54667: ST_TO_ADDR
// for i = 1 to hexes do
54668: LD_ADDR_VAR 0 7
54672: PUSH
54673: DOUBLE
54674: LD_INT 1
54676: DEC
54677: ST_TO_ADDR
54678: LD_VAR 0 12
54682: PUSH
54683: FOR_TO
54684: IFFALSE 55014
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54686: LD_VAR 0 12
54690: PUSH
54691: LD_VAR 0 7
54695: ARRAY
54696: PUSH
54697: LD_INT 1
54699: ARRAY
54700: PPUSH
54701: LD_VAR 0 12
54705: PUSH
54706: LD_VAR 0 7
54710: ARRAY
54711: PUSH
54712: LD_INT 2
54714: ARRAY
54715: PPUSH
54716: CALL_OW 488
54720: NOT
54721: PUSH
54722: LD_VAR 0 12
54726: PUSH
54727: LD_VAR 0 7
54731: ARRAY
54732: PUSH
54733: LD_INT 1
54735: ARRAY
54736: PPUSH
54737: LD_VAR 0 12
54741: PUSH
54742: LD_VAR 0 7
54746: ARRAY
54747: PUSH
54748: LD_INT 2
54750: ARRAY
54751: PPUSH
54752: CALL_OW 428
54756: PUSH
54757: LD_INT 0
54759: GREATER
54760: OR
54761: PUSH
54762: LD_VAR 0 12
54766: PUSH
54767: LD_VAR 0 7
54771: ARRAY
54772: PUSH
54773: LD_INT 1
54775: ARRAY
54776: PPUSH
54777: LD_VAR 0 12
54781: PUSH
54782: LD_VAR 0 7
54786: ARRAY
54787: PUSH
54788: LD_INT 2
54790: ARRAY
54791: PPUSH
54792: CALL_OW 351
54796: OR
54797: IFFALSE 54803
// exit ;
54799: POP
54800: POP
54801: GO 55095
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54803: LD_ADDR_VAR 0 8
54807: PUSH
54808: LD_VAR 0 12
54812: PUSH
54813: LD_VAR 0 7
54817: ARRAY
54818: PUSH
54819: LD_INT 1
54821: ARRAY
54822: PPUSH
54823: LD_VAR 0 12
54827: PUSH
54828: LD_VAR 0 7
54832: ARRAY
54833: PUSH
54834: LD_INT 2
54836: ARRAY
54837: PPUSH
54838: CALL_OW 546
54842: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54843: LD_VAR 0 8
54847: PUSH
54848: LD_INT 1
54850: ARRAY
54851: PUSH
54852: LD_VAR 0 8
54856: PUSH
54857: LD_INT 2
54859: ARRAY
54860: PUSH
54861: LD_VAR 0 13
54865: PUSH
54866: LD_INT 2
54868: PLUS
54869: GREATER
54870: OR
54871: PUSH
54872: LD_VAR 0 8
54876: PUSH
54877: LD_INT 2
54879: ARRAY
54880: PUSH
54881: LD_VAR 0 13
54885: PUSH
54886: LD_INT 2
54888: MINUS
54889: LESS
54890: OR
54891: PUSH
54892: LD_VAR 0 8
54896: PUSH
54897: LD_INT 3
54899: ARRAY
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 8
54906: PUSH
54907: LD_INT 9
54909: PUSH
54910: LD_INT 10
54912: PUSH
54913: LD_INT 11
54915: PUSH
54916: LD_INT 12
54918: PUSH
54919: LD_INT 13
54921: PUSH
54922: LD_INT 16
54924: PUSH
54925: LD_INT 17
54927: PUSH
54928: LD_INT 18
54930: PUSH
54931: LD_INT 19
54933: PUSH
54934: LD_INT 20
54936: PUSH
54937: LD_INT 21
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: IN
54955: NOT
54956: OR
54957: PUSH
54958: LD_VAR 0 8
54962: PUSH
54963: LD_INT 5
54965: ARRAY
54966: NOT
54967: OR
54968: PUSH
54969: LD_VAR 0 8
54973: PUSH
54974: LD_INT 6
54976: ARRAY
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: LD_INT 7
54986: PUSH
54987: LD_INT 9
54989: PUSH
54990: LD_INT 10
54992: PUSH
54993: LD_INT 11
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: IN
55004: NOT
55005: OR
55006: IFFALSE 55012
// exit ;
55008: POP
55009: POP
55010: GO 55095
// end ;
55012: GO 54683
55014: POP
55015: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55016: LD_VAR 0 9
55020: PPUSH
55021: LD_VAR 0 3
55025: PPUSH
55026: LD_VAR 0 4
55030: PPUSH
55031: LD_INT 20
55033: PPUSH
55034: CALL 47047 0 4
55038: PUSH
55039: LD_INT 4
55041: ARRAY
55042: IFFALSE 55046
// exit ;
55044: GO 55095
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55046: LD_VAR 0 2
55050: PUSH
55051: LD_INT 29
55053: PUSH
55054: LD_INT 30
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: IN
55061: PUSH
55062: LD_VAR 0 3
55066: PPUSH
55067: LD_VAR 0 4
55071: PPUSH
55072: LD_VAR 0 9
55076: PPUSH
55077: CALL_OW 440
55081: NOT
55082: AND
55083: IFFALSE 55087
// exit ;
55085: GO 55095
// result := true ;
55087: LD_ADDR_VAR 0 6
55091: PUSH
55092: LD_INT 1
55094: ST_TO_ADDR
// end ;
55095: LD_VAR 0 6
55099: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55100: LD_INT 0
55102: PPUSH
55103: PPUSH
55104: PPUSH
55105: PPUSH
55106: PPUSH
55107: PPUSH
55108: PPUSH
55109: PPUSH
55110: PPUSH
55111: PPUSH
55112: PPUSH
55113: PPUSH
55114: PPUSH
55115: PPUSH
55116: PPUSH
55117: PPUSH
55118: PPUSH
55119: PPUSH
55120: PPUSH
55121: PPUSH
55122: PPUSH
55123: PPUSH
55124: PPUSH
55125: PPUSH
55126: PPUSH
55127: PPUSH
55128: PPUSH
55129: PPUSH
55130: PPUSH
55131: PPUSH
55132: PPUSH
55133: PPUSH
55134: PPUSH
55135: PPUSH
55136: PPUSH
55137: PPUSH
55138: PPUSH
55139: PPUSH
55140: PPUSH
55141: PPUSH
55142: PPUSH
55143: PPUSH
55144: PPUSH
55145: PPUSH
55146: PPUSH
55147: PPUSH
55148: PPUSH
55149: PPUSH
55150: PPUSH
55151: PPUSH
55152: PPUSH
55153: PPUSH
55154: PPUSH
55155: PPUSH
55156: PPUSH
55157: PPUSH
55158: PPUSH
55159: PPUSH
// result = [ ] ;
55160: LD_ADDR_VAR 0 7
55164: PUSH
55165: EMPTY
55166: ST_TO_ADDR
// temp_list = [ ] ;
55167: LD_ADDR_VAR 0 9
55171: PUSH
55172: EMPTY
55173: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55174: LD_VAR 0 4
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: LD_INT 3
55190: PUSH
55191: LD_INT 4
55193: PUSH
55194: LD_INT 5
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: IN
55205: NOT
55206: PUSH
55207: LD_VAR 0 1
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: IN
55222: PUSH
55223: LD_VAR 0 5
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: LIST
55241: IN
55242: NOT
55243: AND
55244: OR
55245: IFFALSE 55249
// exit ;
55247: GO 73640
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55249: LD_VAR 0 1
55253: PUSH
55254: LD_INT 6
55256: PUSH
55257: LD_INT 7
55259: PUSH
55260: LD_INT 8
55262: PUSH
55263: LD_INT 13
55265: PUSH
55266: LD_INT 12
55268: PUSH
55269: LD_INT 15
55271: PUSH
55272: LD_INT 11
55274: PUSH
55275: LD_INT 14
55277: PUSH
55278: LD_INT 10
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: IN
55292: IFFALSE 55302
// btype = b_lab ;
55294: LD_ADDR_VAR 0 1
55298: PUSH
55299: LD_INT 6
55301: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55302: LD_VAR 0 6
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: IN
55321: NOT
55322: PUSH
55323: LD_VAR 0 1
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 3
55339: PUSH
55340: LD_INT 6
55342: PUSH
55343: LD_INT 36
55345: PUSH
55346: LD_INT 4
55348: PUSH
55349: LD_INT 5
55351: PUSH
55352: LD_INT 31
55354: PUSH
55355: LD_INT 32
55357: PUSH
55358: LD_INT 33
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: IN
55374: NOT
55375: PUSH
55376: LD_VAR 0 6
55380: PUSH
55381: LD_INT 1
55383: EQUAL
55384: AND
55385: OR
55386: PUSH
55387: LD_VAR 0 1
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: IN
55402: NOT
55403: PUSH
55404: LD_VAR 0 6
55408: PUSH
55409: LD_INT 2
55411: EQUAL
55412: AND
55413: OR
55414: IFFALSE 55424
// mode = 0 ;
55416: LD_ADDR_VAR 0 6
55420: PUSH
55421: LD_INT 0
55423: ST_TO_ADDR
// case mode of 0 :
55424: LD_VAR 0 6
55428: PUSH
55429: LD_INT 0
55431: DOUBLE
55432: EQUAL
55433: IFTRUE 55437
55435: GO 66890
55437: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55438: LD_ADDR_VAR 0 11
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: LD_INT 3
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 3
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55631: LD_ADDR_VAR 0 12
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: NEG
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55827: LD_ADDR_VAR 0 13
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 2
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: NEG
55975: PUSH
55976: LD_INT 3
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 3
55986: NEG
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 3
55998: NEG
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56026: LD_ADDR_VAR 0 14
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 3
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 3
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56222: LD_ADDR_VAR 0 15
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 3
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56415: LD_ADDR_VAR 0 16
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56608: LD_ADDR_VAR 0 17
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56838: LD_ADDR_VAR 0 18
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57068: LD_ADDR_VAR 0 19
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57298: LD_ADDR_VAR 0 20
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57528: LD_ADDR_VAR 0 21
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57758: LD_ADDR_VAR 0 22
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: LD_INT 2
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57988: LD_ADDR_VAR 0 23
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: NEG
58200: PUSH
58201: LD_INT 3
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 3
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 2
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58268: LD_ADDR_VAR 0 24
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 2
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 3
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58544: LD_ADDR_VAR 0 25
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 2
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 3
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 3
58765: PUSH
58766: LD_INT 2
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58818: LD_ADDR_VAR 0 26
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 0
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: NEG
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: LD_INT 3
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: LD_INT 3
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59094: LD_ADDR_VAR 0 27
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 1
59152: NEG
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: LD_INT 2
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: LD_INT 2
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: NEG
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: NEG
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 2
59281: NEG
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 3
59327: NEG
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 3
59339: NEG
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59374: LD_ADDR_VAR 0 28
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: LD_INT 2
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 2
59499: PUSH
59500: LD_INT 1
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: NEG
59586: PUSH
59587: LD_INT 3
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: LD_INT 3
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: NEG
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 3
59621: NEG
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59656: LD_ADDR_VAR 0 29
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 0
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 2
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: LD_INT 2
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 2
59846: NEG
59847: PUSH
59848: LD_INT 3
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 3
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: LD_INT 3
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 3
59900: NEG
59901: PUSH
59902: LD_INT 2
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59935: LD_ADDR_VAR 0 30
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: LD_INT 2
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: NEG
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: LD_INT 3
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: LD_INT 3
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60213: LD_ADDR_VAR 0 31
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: LD_INT 2
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 2
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 2
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 2
60378: NEG
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: LD_INT 3
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 3
60456: NEG
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60491: LD_ADDR_VAR 0 32
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 2
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 2
60616: PUSH
60617: LD_INT 2
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: NEG
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 2
60668: NEG
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 3
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 2
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 3
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: LD_INT 3
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 3
60734: NEG
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60769: LD_ADDR_VAR 0 33
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: LD_INT 2
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 2
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: LD_INT 2
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: NEG
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: NEG
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: NEG
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: LD_INT 3
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 2
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 3
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 3
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 3
61013: NEG
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61048: LD_ADDR_VAR 0 34
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: LD_INT 2
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 2
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: LD_INT 2
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: LD_INT 3
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: LD_INT 2
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 3
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: LD_INT 3
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 2
61282: NEG
61283: PUSH
61284: LD_INT 1
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 3
61293: NEG
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61328: LD_ADDR_VAR 0 35
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: LD_INT 1
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 2
61419: NEG
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61440: LD_ADDR_VAR 0 36
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: LD_INT 2
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: LD_INT 2
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61552: LD_ADDR_VAR 0 37
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 1
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61664: LD_ADDR_VAR 0 38
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: LD_INT 1
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: LD_INT 1
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 2
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 2
61755: NEG
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61776: LD_ADDR_VAR 0 39
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: LD_INT 1
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: LD_INT 2
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61888: LD_ADDR_VAR 0 40
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62000: LD_ADDR_VAR 0 41
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: LD_INT 2
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 2
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 2
62155: NEG
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 2
62166: NEG
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 2
62178: NEG
62179: PUSH
62180: LD_INT 2
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 2
62190: NEG
62191: PUSH
62192: LD_INT 3
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 3
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 3
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 3
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 3
62243: PUSH
62244: LD_INT 3
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 2
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 2
62263: NEG
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 3
62274: NEG
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 3
62285: NEG
62286: PUSH
62287: LD_INT 1
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 3
62297: NEG
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 3
62309: NEG
62310: PUSH
62311: LD_INT 3
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62350: LD_ADDR_VAR 0 42
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: LD_INT 2
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 2
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: LD_INT 2
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: LD_INT 2
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: LD_INT 1
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 2
62516: NEG
62517: PUSH
62518: LD_INT 1
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 2
62528: NEG
62529: PUSH
62530: LD_INT 2
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 2
62540: NEG
62541: PUSH
62542: LD_INT 3
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: LD_INT 3
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: LD_INT 3
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 3
62586: PUSH
62587: LD_INT 2
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 3
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 2
62606: PUSH
62607: LD_INT 3
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: LD_INT 3
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 3
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: LD_INT 2
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 3
62647: NEG
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 3
62659: NEG
62660: PUSH
62661: LD_INT 3
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62700: LD_ADDR_VAR 0 43
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 2
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 2
62825: PUSH
62826: LD_INT 1
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: LD_INT 2
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: LD_INT 2
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: NEG
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 2
62866: NEG
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 1
62889: NEG
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: LD_INT 3
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: LD_INT 2
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 2
62923: PUSH
62924: LD_INT 1
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 3
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 3
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 1
62954: PUSH
62955: LD_INT 3
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: LD_INT 3
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: LD_INT 2
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 2
62985: NEG
62986: PUSH
62987: LD_INT 1
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 3
62996: NEG
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 3
63007: NEG
63008: PUSH
63009: LD_INT 1
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63048: LD_ADDR_VAR 0 44
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: NEG
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: LD_INT 2
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 2
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: LD_INT 1
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 2
63172: PUSH
63173: LD_INT 2
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: LD_INT 2
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: NEG
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 2
63203: NEG
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 2
63214: NEG
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 2
63226: NEG
63227: PUSH
63228: LD_INT 2
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 2
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 3
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 3
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 3
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 3
63291: PUSH
63292: LD_INT 3
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 2
63301: PUSH
63302: LD_INT 3
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 2
63311: NEG
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 3
63322: NEG
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 3
63333: NEG
63334: PUSH
63335: LD_INT 1
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 3
63345: NEG
63346: PUSH
63347: LD_INT 2
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 3
63357: NEG
63358: PUSH
63359: LD_INT 3
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63398: LD_ADDR_VAR 0 45
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: NEG
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: LD_INT 2
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 2
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 2
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 2
63523: PUSH
63524: LD_INT 2
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 1
63533: PUSH
63534: LD_INT 2
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: LD_INT 2
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: LD_INT 1
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 2
63564: NEG
63565: PUSH
63566: LD_INT 1
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 2
63576: NEG
63577: PUSH
63578: LD_INT 2
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: NEG
63589: PUSH
63590: LD_INT 3
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: LD_INT 3
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 3
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: LD_INT 2
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 3
63634: PUSH
63635: LD_INT 2
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 3
63644: PUSH
63645: LD_INT 3
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 2
63654: PUSH
63655: LD_INT 3
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 1
63664: PUSH
63665: LD_INT 3
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: LD_INT 3
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: NEG
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 3
63695: NEG
63696: PUSH
63697: LD_INT 2
63699: NEG
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 3
63707: NEG
63708: PUSH
63709: LD_INT 3
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63748: LD_ADDR_VAR 0 46
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: NEG
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 2
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 1
63883: PUSH
63884: LD_INT 2
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: LD_INT 2
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: LD_INT 1
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 2
63914: NEG
63915: PUSH
63916: LD_INT 0
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: LD_INT 3
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: LD_INT 3
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: PUSH
63961: LD_INT 2
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 2
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 3
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 3
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: PUSH
64003: LD_INT 3
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: LD_INT 3
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: LD_INT 2
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 2
64033: NEG
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 3
64044: NEG
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 3
64055: NEG
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64096: LD_ADDR_VAR 0 47
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: LD_INT 0
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: LD_INT 2
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: LD_INT 2
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 2
64211: NEG
64212: PUSH
64213: LD_INT 1
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 2
64223: NEG
64224: PUSH
64225: LD_INT 2
64227: NEG
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64247: LD_ADDR_VAR 0 48
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: NEG
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: NEG
64329: PUSH
64330: LD_INT 2
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 2
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 2
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64394: LD_ADDR_VAR 0 49
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: LD_INT 0
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 2
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 2
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: LD_INT 2
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: LD_INT 2
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64538: LD_ADDR_VAR 0 50
64542: PUSH
64543: LD_INT 0
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 1
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: LD_INT 1
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: NEG
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: LD_INT 1
64611: NEG
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 2
64619: PUSH
64620: LD_INT 1
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 2
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 1
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: LD_INT 2
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64682: LD_ADDR_VAR 0 51
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 0
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 1
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: LD_INT 1
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 1
64763: PUSH
64764: LD_INT 2
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 2
64794: NEG
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 2
64805: NEG
64806: PUSH
64807: LD_INT 1
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64829: LD_ADDR_VAR 0 52
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: LD_INT 0
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: LD_INT 1
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 1
64887: NEG
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: LD_INT 1
64902: NEG
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 1
64910: NEG
64911: PUSH
64912: LD_INT 2
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: LD_INT 1
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 2
64933: NEG
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 2
64944: NEG
64945: PUSH
64946: LD_INT 1
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 2
64956: NEG
64957: PUSH
64958: LD_INT 2
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64980: LD_ADDR_VAR 0 53
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: NEG
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 1
65049: NEG
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: LD_INT 2
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: LD_INT 2
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 2
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 2
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 2
65115: PUSH
65116: LD_INT 2
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: LD_INT 2
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: LD_INT 2
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 1
65145: NEG
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 2
65156: NEG
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 2
65167: NEG
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 2
65179: NEG
65180: PUSH
65181: LD_INT 2
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65210: LD_ADDR_VAR 0 54
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: LD_INT 1
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 1
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 1
65248: PUSH
65249: LD_INT 1
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 1
65268: NEG
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: LD_INT 1
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 1
65291: NEG
65292: PUSH
65293: LD_INT 2
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: LD_INT 2
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 1
65314: PUSH
65315: LD_INT 1
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 2
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 2
65335: PUSH
65336: LD_INT 1
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 2
65345: PUSH
65346: LD_INT 2
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: LD_INT 2
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 0
65365: PUSH
65366: LD_INT 2
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 1
65375: NEG
65376: PUSH
65377: LD_INT 1
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 2
65386: NEG
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 2
65397: NEG
65398: PUSH
65399: LD_INT 1
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 2
65409: NEG
65410: PUSH
65411: LD_INT 2
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65440: LD_ADDR_VAR 0 55
65444: PUSH
65445: LD_INT 0
65447: PUSH
65448: LD_INT 0
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: LD_INT 1
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 1
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 1
65478: PUSH
65479: LD_INT 1
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 0
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 1
65498: NEG
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: LD_INT 2
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: LD_INT 2
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 1
65544: PUSH
65545: LD_INT 1
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 2
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 2
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 2
65575: PUSH
65576: LD_INT 2
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 1
65585: PUSH
65586: LD_INT 2
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 0
65595: PUSH
65596: LD_INT 2
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 1
65605: NEG
65606: PUSH
65607: LD_INT 1
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 2
65616: NEG
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 2
65627: NEG
65628: PUSH
65629: LD_INT 1
65631: NEG
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 2
65639: NEG
65640: PUSH
65641: LD_INT 2
65643: NEG
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65670: LD_ADDR_VAR 0 56
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 0
65687: PUSH
65688: LD_INT 1
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: LD_INT 0
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: LD_INT 1
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: LD_INT 1
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 1
65751: NEG
65752: PUSH
65753: LD_INT 2
65755: NEG
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: LD_INT 2
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 1
65774: PUSH
65775: LD_INT 1
65777: NEG
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 2
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 2
65795: PUSH
65796: LD_INT 1
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 2
65805: PUSH
65806: LD_INT 2
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 1
65815: PUSH
65816: LD_INT 2
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 0
65825: PUSH
65826: LD_INT 2
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 1
65835: NEG
65836: PUSH
65837: LD_INT 1
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 2
65846: NEG
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 2
65857: NEG
65858: PUSH
65859: LD_INT 1
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 2
65869: NEG
65870: PUSH
65871: LD_INT 2
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65900: LD_ADDR_VAR 0 57
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 0
65948: PUSH
65949: LD_INT 1
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 1
65958: NEG
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: LD_INT 1
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 1
65981: NEG
65982: PUSH
65983: LD_INT 2
65985: NEG
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: LD_INT 2
65996: NEG
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 1
66004: PUSH
66005: LD_INT 1
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 2
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: LD_INT 2
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 1
66045: PUSH
66046: LD_INT 2
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 0
66055: PUSH
66056: LD_INT 2
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 1
66065: NEG
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 2
66087: NEG
66088: PUSH
66089: LD_INT 1
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 2
66099: NEG
66100: PUSH
66101: LD_INT 2
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66130: LD_ADDR_VAR 0 58
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: LD_INT 1
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 1
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: LD_INT 1
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 0
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 1
66188: NEG
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 1
66199: NEG
66200: PUSH
66201: LD_INT 1
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: LD_INT 2
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: LD_INT 2
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 2
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 2
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: LD_INT 2
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: LD_INT 2
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: LD_INT 2
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 1
66295: NEG
66296: PUSH
66297: LD_INT 1
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 2
66306: NEG
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 2
66317: NEG
66318: PUSH
66319: LD_INT 1
66321: NEG
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 2
66329: NEG
66330: PUSH
66331: LD_INT 2
66333: NEG
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66360: LD_ADDR_VAR 0 59
66364: PUSH
66365: LD_INT 0
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: LD_INT 1
66380: NEG
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 1
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: LD_INT 1
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 1
66418: NEG
66419: PUSH
66420: LD_INT 0
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: LD_INT 1
66433: NEG
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66448: LD_ADDR_VAR 0 60
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: LD_INT 1
66468: NEG
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 1
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 1
66486: PUSH
66487: LD_INT 1
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: LD_INT 1
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: LD_INT 0
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: LD_INT 1
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66536: LD_ADDR_VAR 0 61
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 0
66553: PUSH
66554: LD_INT 1
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 1
66564: PUSH
66565: LD_INT 0
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 1
66574: PUSH
66575: LD_INT 1
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: LD_INT 1
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: NEG
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 1
66605: NEG
66606: PUSH
66607: LD_INT 1
66609: NEG
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66624: LD_ADDR_VAR 0 62
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 1
66652: PUSH
66653: LD_INT 0
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 1
66662: PUSH
66663: LD_INT 1
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 0
66672: PUSH
66673: LD_INT 1
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: LD_INT 0
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 1
66693: NEG
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66712: LD_ADDR_VAR 0 63
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: LD_INT 0
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: LD_INT 1
66732: NEG
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 1
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 1
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: LD_INT 1
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 1
66770: NEG
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 1
66781: NEG
66782: PUSH
66783: LD_INT 1
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66800: LD_ADDR_VAR 0 64
66804: PUSH
66805: LD_INT 0
66807: PUSH
66808: LD_INT 0
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: LD_INT 1
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 1
66828: PUSH
66829: LD_INT 0
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 1
66838: PUSH
66839: LD_INT 1
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 0
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 1
66858: NEG
66859: PUSH
66860: LD_INT 0
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 1
66869: NEG
66870: PUSH
66871: LD_INT 1
66873: NEG
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: ST_TO_ADDR
// end ; 1 :
66888: GO 72785
66890: LD_INT 1
66892: DOUBLE
66893: EQUAL
66894: IFTRUE 66898
66896: GO 69521
66898: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66899: LD_ADDR_VAR 0 11
66903: PUSH
66904: LD_INT 1
66906: NEG
66907: PUSH
66908: LD_INT 3
66910: NEG
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 0
66918: PUSH
66919: LD_INT 3
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 1
66929: PUSH
66930: LD_INT 2
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: LIST
66942: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66943: LD_ADDR_VAR 0 12
66947: PUSH
66948: LD_INT 2
66950: PUSH
66951: LD_INT 1
66953: NEG
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 3
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 3
66971: PUSH
66972: LD_INT 1
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: LIST
66983: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66984: LD_ADDR_VAR 0 13
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 3
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 2
67011: PUSH
67012: LD_INT 3
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: LIST
67023: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67024: LD_ADDR_VAR 0 14
67028: PUSH
67029: LD_INT 1
67031: PUSH
67032: LD_INT 3
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: LD_INT 3
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 1
67051: NEG
67052: PUSH
67053: LD_INT 2
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: LIST
67064: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67065: LD_ADDR_VAR 0 15
67069: PUSH
67070: LD_INT 2
67072: NEG
67073: PUSH
67074: LD_INT 1
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 3
67083: NEG
67084: PUSH
67085: LD_INT 0
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 3
67094: NEG
67095: PUSH
67096: LD_INT 1
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: LIST
67108: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67109: LD_ADDR_VAR 0 16
67113: PUSH
67114: LD_INT 2
67116: NEG
67117: PUSH
67118: LD_INT 3
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 3
67128: NEG
67129: PUSH
67130: LD_INT 2
67132: NEG
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 3
67140: NEG
67141: PUSH
67142: LD_INT 3
67144: NEG
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: LIST
67154: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67155: LD_ADDR_VAR 0 17
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: PUSH
67164: LD_INT 3
67166: NEG
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 0
67174: PUSH
67175: LD_INT 3
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 1
67185: PUSH
67186: LD_INT 2
67188: NEG
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: LIST
67198: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67199: LD_ADDR_VAR 0 18
67203: PUSH
67204: LD_INT 2
67206: PUSH
67207: LD_INT 1
67209: NEG
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 3
67217: PUSH
67218: LD_INT 0
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 3
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: LIST
67239: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67240: LD_ADDR_VAR 0 19
67244: PUSH
67245: LD_INT 3
67247: PUSH
67248: LD_INT 2
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 3
67257: PUSH
67258: LD_INT 3
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 2
67267: PUSH
67268: LD_INT 3
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: LIST
67279: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67280: LD_ADDR_VAR 0 20
67284: PUSH
67285: LD_INT 1
67287: PUSH
67288: LD_INT 3
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: LD_INT 3
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 1
67307: NEG
67308: PUSH
67309: LD_INT 2
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: LIST
67320: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67321: LD_ADDR_VAR 0 21
67325: PUSH
67326: LD_INT 2
67328: NEG
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 3
67339: NEG
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 3
67350: NEG
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: LIST
67364: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67365: LD_ADDR_VAR 0 22
67369: PUSH
67370: LD_INT 2
67372: NEG
67373: PUSH
67374: LD_INT 3
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 3
67384: NEG
67385: PUSH
67386: LD_INT 2
67388: NEG
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 3
67396: NEG
67397: PUSH
67398: LD_INT 3
67400: NEG
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: LIST
67410: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67411: LD_ADDR_VAR 0 23
67415: PUSH
67416: LD_INT 0
67418: PUSH
67419: LD_INT 3
67421: NEG
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 1
67429: NEG
67430: PUSH
67431: LD_INT 4
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 1
67441: PUSH
67442: LD_INT 3
67444: NEG
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67455: LD_ADDR_VAR 0 24
67459: PUSH
67460: LD_INT 3
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 3
67472: PUSH
67473: LD_INT 1
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 4
67483: PUSH
67484: LD_INT 1
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: LIST
67495: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67496: LD_ADDR_VAR 0 25
67500: PUSH
67501: LD_INT 3
67503: PUSH
67504: LD_INT 3
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 4
67513: PUSH
67514: LD_INT 3
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 3
67523: PUSH
67524: LD_INT 4
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: LIST
67535: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67536: LD_ADDR_VAR 0 26
67540: PUSH
67541: LD_INT 0
67543: PUSH
67544: LD_INT 3
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 1
67553: PUSH
67554: LD_INT 4
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 1
67563: NEG
67564: PUSH
67565: LD_INT 3
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: LIST
67576: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67577: LD_ADDR_VAR 0 27
67581: PUSH
67582: LD_INT 3
67584: NEG
67585: PUSH
67586: LD_INT 0
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 3
67595: NEG
67596: PUSH
67597: LD_INT 1
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 4
67606: NEG
67607: PUSH
67608: LD_INT 1
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: LIST
67620: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67621: LD_ADDR_VAR 0 28
67625: PUSH
67626: LD_INT 3
67628: NEG
67629: PUSH
67630: LD_INT 3
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 3
67640: NEG
67641: PUSH
67642: LD_INT 4
67644: NEG
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 4
67652: NEG
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: LIST
67666: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67667: LD_ADDR_VAR 0 29
67671: PUSH
67672: LD_INT 1
67674: NEG
67675: PUSH
67676: LD_INT 3
67678: NEG
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: LD_INT 3
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: LD_INT 2
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 1
67708: NEG
67709: PUSH
67710: LD_INT 4
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 0
67720: PUSH
67721: LD_INT 4
67723: NEG
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 1
67731: PUSH
67732: LD_INT 3
67734: NEG
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 1
67742: NEG
67743: PUSH
67744: LD_INT 5
67746: NEG
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 0
67754: PUSH
67755: LD_INT 5
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 1
67765: PUSH
67766: LD_INT 4
67768: NEG
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 1
67776: NEG
67777: PUSH
67778: LD_INT 6
67780: NEG
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 0
67788: PUSH
67789: LD_INT 6
67791: NEG
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 1
67799: PUSH
67800: LD_INT 5
67802: NEG
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67822: LD_ADDR_VAR 0 30
67826: PUSH
67827: LD_INT 2
67829: PUSH
67830: LD_INT 1
67832: NEG
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 3
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 3
67850: PUSH
67851: LD_INT 1
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 3
67860: PUSH
67861: LD_INT 1
67863: NEG
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 4
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 4
67881: PUSH
67882: LD_INT 1
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 4
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 5
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 5
67912: PUSH
67913: LD_INT 1
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 5
67922: PUSH
67923: LD_INT 1
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 6
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 6
67943: PUSH
67944: LD_INT 1
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67965: LD_ADDR_VAR 0 31
67969: PUSH
67970: LD_INT 3
67972: PUSH
67973: LD_INT 2
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 3
67982: PUSH
67983: LD_INT 3
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 2
67992: PUSH
67993: LD_INT 3
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 4
68002: PUSH
68003: LD_INT 3
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 4
68012: PUSH
68013: LD_INT 4
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 3
68022: PUSH
68023: LD_INT 4
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 5
68032: PUSH
68033: LD_INT 4
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 5
68042: PUSH
68043: LD_INT 5
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 4
68052: PUSH
68053: LD_INT 5
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 6
68062: PUSH
68063: LD_INT 5
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 6
68072: PUSH
68073: LD_INT 6
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 5
68082: PUSH
68083: LD_INT 6
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68104: LD_ADDR_VAR 0 32
68108: PUSH
68109: LD_INT 1
68111: PUSH
68112: LD_INT 3
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: LD_INT 3
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 1
68131: NEG
68132: PUSH
68133: LD_INT 2
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 1
68142: PUSH
68143: LD_INT 4
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: LD_INT 4
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 1
68162: NEG
68163: PUSH
68164: LD_INT 3
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 1
68173: PUSH
68174: LD_INT 5
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: LD_INT 5
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 1
68193: NEG
68194: PUSH
68195: LD_INT 4
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 1
68204: PUSH
68205: LD_INT 6
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 0
68214: PUSH
68215: LD_INT 6
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 1
68224: NEG
68225: PUSH
68226: LD_INT 5
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68247: LD_ADDR_VAR 0 33
68251: PUSH
68252: LD_INT 2
68254: NEG
68255: PUSH
68256: LD_INT 1
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 3
68265: NEG
68266: PUSH
68267: LD_INT 0
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 3
68276: NEG
68277: PUSH
68278: LD_INT 1
68280: NEG
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 3
68288: NEG
68289: PUSH
68290: LD_INT 1
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 4
68299: NEG
68300: PUSH
68301: LD_INT 0
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 4
68310: NEG
68311: PUSH
68312: LD_INT 1
68314: NEG
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 4
68322: NEG
68323: PUSH
68324: LD_INT 1
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 5
68333: NEG
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 5
68344: NEG
68345: PUSH
68346: LD_INT 1
68348: NEG
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 5
68356: NEG
68357: PUSH
68358: LD_INT 1
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 6
68367: NEG
68368: PUSH
68369: LD_INT 0
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 6
68378: NEG
68379: PUSH
68380: LD_INT 1
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68402: LD_ADDR_VAR 0 34
68406: PUSH
68407: LD_INT 2
68409: NEG
68410: PUSH
68411: LD_INT 3
68413: NEG
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 3
68421: NEG
68422: PUSH
68423: LD_INT 2
68425: NEG
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 3
68433: NEG
68434: PUSH
68435: LD_INT 3
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 3
68445: NEG
68446: PUSH
68447: LD_INT 4
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 4
68457: NEG
68458: PUSH
68459: LD_INT 3
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 4
68469: NEG
68470: PUSH
68471: LD_INT 4
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 4
68481: NEG
68482: PUSH
68483: LD_INT 5
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 5
68493: NEG
68494: PUSH
68495: LD_INT 4
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 5
68505: NEG
68506: PUSH
68507: LD_INT 5
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 5
68517: NEG
68518: PUSH
68519: LD_INT 6
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 6
68529: NEG
68530: PUSH
68531: LD_INT 5
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 6
68541: NEG
68542: PUSH
68543: LD_INT 6
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68565: LD_ADDR_VAR 0 41
68569: PUSH
68570: LD_INT 0
68572: PUSH
68573: LD_INT 2
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 1
68583: NEG
68584: PUSH
68585: LD_INT 3
68587: NEG
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 1
68595: PUSH
68596: LD_INT 2
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: LIST
68608: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68609: LD_ADDR_VAR 0 42
68613: PUSH
68614: LD_INT 2
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 2
68626: PUSH
68627: LD_INT 1
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 3
68637: PUSH
68638: LD_INT 1
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: LIST
68649: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68650: LD_ADDR_VAR 0 43
68654: PUSH
68655: LD_INT 2
68657: PUSH
68658: LD_INT 2
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 3
68667: PUSH
68668: LD_INT 2
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 2
68677: PUSH
68678: LD_INT 3
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: LIST
68689: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68690: LD_ADDR_VAR 0 44
68694: PUSH
68695: LD_INT 0
68697: PUSH
68698: LD_INT 2
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 1
68707: PUSH
68708: LD_INT 3
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 1
68717: NEG
68718: PUSH
68719: LD_INT 2
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: LIST
68730: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68731: LD_ADDR_VAR 0 45
68735: PUSH
68736: LD_INT 2
68738: NEG
68739: PUSH
68740: LD_INT 0
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 2
68749: NEG
68750: PUSH
68751: LD_INT 1
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 3
68760: NEG
68761: PUSH
68762: LD_INT 1
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: LIST
68774: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68775: LD_ADDR_VAR 0 46
68779: PUSH
68780: LD_INT 2
68782: NEG
68783: PUSH
68784: LD_INT 2
68786: NEG
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 2
68794: NEG
68795: PUSH
68796: LD_INT 3
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 3
68806: NEG
68807: PUSH
68808: LD_INT 2
68810: NEG
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: LIST
68820: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68821: LD_ADDR_VAR 0 47
68825: PUSH
68826: LD_INT 2
68828: NEG
68829: PUSH
68830: LD_INT 3
68832: NEG
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 1
68840: NEG
68841: PUSH
68842: LD_INT 3
68844: NEG
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68854: LD_ADDR_VAR 0 48
68858: PUSH
68859: LD_INT 1
68861: PUSH
68862: LD_INT 2
68864: NEG
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 2
68872: PUSH
68873: LD_INT 1
68875: NEG
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68885: LD_ADDR_VAR 0 49
68889: PUSH
68890: LD_INT 3
68892: PUSH
68893: LD_INT 1
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 3
68902: PUSH
68903: LD_INT 2
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68914: LD_ADDR_VAR 0 50
68918: PUSH
68919: LD_INT 2
68921: PUSH
68922: LD_INT 3
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 1
68931: PUSH
68932: LD_INT 3
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68943: LD_ADDR_VAR 0 51
68947: PUSH
68948: LD_INT 1
68950: NEG
68951: PUSH
68952: LD_INT 2
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 2
68961: NEG
68962: PUSH
68963: LD_INT 1
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68974: LD_ADDR_VAR 0 52
68978: PUSH
68979: LD_INT 3
68981: NEG
68982: PUSH
68983: LD_INT 1
68985: NEG
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 3
68993: NEG
68994: PUSH
68995: LD_INT 2
68997: NEG
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69007: LD_ADDR_VAR 0 53
69011: PUSH
69012: LD_INT 1
69014: NEG
69015: PUSH
69016: LD_INT 3
69018: NEG
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 0
69026: PUSH
69027: LD_INT 3
69029: NEG
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 1
69037: PUSH
69038: LD_INT 2
69040: NEG
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: LIST
69050: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69051: LD_ADDR_VAR 0 54
69055: PUSH
69056: LD_INT 2
69058: PUSH
69059: LD_INT 1
69061: NEG
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 3
69069: PUSH
69070: LD_INT 0
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 3
69079: PUSH
69080: LD_INT 1
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: LIST
69091: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69092: LD_ADDR_VAR 0 55
69096: PUSH
69097: LD_INT 3
69099: PUSH
69100: LD_INT 2
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 3
69109: PUSH
69110: LD_INT 3
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 2
69119: PUSH
69120: LD_INT 3
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: LIST
69131: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69132: LD_ADDR_VAR 0 56
69136: PUSH
69137: LD_INT 1
69139: PUSH
69140: LD_INT 3
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 0
69149: PUSH
69150: LD_INT 3
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 1
69159: NEG
69160: PUSH
69161: LD_INT 2
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: LIST
69172: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69173: LD_ADDR_VAR 0 57
69177: PUSH
69178: LD_INT 2
69180: NEG
69181: PUSH
69182: LD_INT 1
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 3
69191: NEG
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 3
69202: NEG
69203: PUSH
69204: LD_INT 1
69206: NEG
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: LIST
69216: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69217: LD_ADDR_VAR 0 58
69221: PUSH
69222: LD_INT 2
69224: NEG
69225: PUSH
69226: LD_INT 3
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 3
69236: NEG
69237: PUSH
69238: LD_INT 2
69240: NEG
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 3
69248: NEG
69249: PUSH
69250: LD_INT 3
69252: NEG
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: LIST
69262: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69263: LD_ADDR_VAR 0 59
69267: PUSH
69268: LD_INT 1
69270: NEG
69271: PUSH
69272: LD_INT 2
69274: NEG
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 0
69282: PUSH
69283: LD_INT 2
69285: NEG
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 1
69293: PUSH
69294: LD_INT 1
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: LIST
69306: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69307: LD_ADDR_VAR 0 60
69311: PUSH
69312: LD_INT 1
69314: PUSH
69315: LD_INT 1
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 2
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 2
69335: PUSH
69336: LD_INT 1
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: LIST
69347: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69348: LD_ADDR_VAR 0 61
69352: PUSH
69353: LD_INT 2
69355: PUSH
69356: LD_INT 1
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 2
69365: PUSH
69366: LD_INT 2
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 1
69375: PUSH
69376: LD_INT 2
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: LIST
69387: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69388: LD_ADDR_VAR 0 62
69392: PUSH
69393: LD_INT 1
69395: PUSH
69396: LD_INT 2
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 0
69405: PUSH
69406: LD_INT 2
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 1
69415: NEG
69416: PUSH
69417: LD_INT 1
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: LIST
69428: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69429: LD_ADDR_VAR 0 63
69433: PUSH
69434: LD_INT 1
69436: NEG
69437: PUSH
69438: LD_INT 1
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 2
69447: NEG
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 2
69458: NEG
69459: PUSH
69460: LD_INT 1
69462: NEG
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: LIST
69472: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69473: LD_ADDR_VAR 0 64
69477: PUSH
69478: LD_INT 1
69480: NEG
69481: PUSH
69482: LD_INT 2
69484: NEG
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 2
69492: NEG
69493: PUSH
69494: LD_INT 1
69496: NEG
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 2
69504: NEG
69505: PUSH
69506: LD_INT 2
69508: NEG
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: LIST
69518: ST_TO_ADDR
// end ; 2 :
69519: GO 72785
69521: LD_INT 2
69523: DOUBLE
69524: EQUAL
69525: IFTRUE 69529
69527: GO 72784
69529: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69530: LD_ADDR_VAR 0 29
69534: PUSH
69535: LD_INT 4
69537: PUSH
69538: LD_INT 0
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 4
69547: PUSH
69548: LD_INT 1
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 5
69558: PUSH
69559: LD_INT 0
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 5
69568: PUSH
69569: LD_INT 1
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 4
69578: PUSH
69579: LD_INT 1
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 3
69588: PUSH
69589: LD_INT 0
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 3
69598: PUSH
69599: LD_INT 1
69601: NEG
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 3
69609: PUSH
69610: LD_INT 2
69612: NEG
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 5
69620: PUSH
69621: LD_INT 2
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 3
69630: PUSH
69631: LD_INT 3
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 3
69640: PUSH
69641: LD_INT 2
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 4
69650: PUSH
69651: LD_INT 3
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 4
69660: PUSH
69661: LD_INT 4
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 3
69670: PUSH
69671: LD_INT 4
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 2
69680: PUSH
69681: LD_INT 3
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 2
69690: PUSH
69691: LD_INT 2
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 4
69700: PUSH
69701: LD_INT 2
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 2
69710: PUSH
69711: LD_INT 4
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 0
69720: PUSH
69721: LD_INT 4
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 0
69730: PUSH
69731: LD_INT 3
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 1
69740: PUSH
69741: LD_INT 4
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 1
69750: PUSH
69751: LD_INT 5
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 0
69760: PUSH
69761: LD_INT 5
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 1
69770: NEG
69771: PUSH
69772: LD_INT 4
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 1
69781: NEG
69782: PUSH
69783: LD_INT 3
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 2
69792: PUSH
69793: LD_INT 5
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 2
69802: NEG
69803: PUSH
69804: LD_INT 3
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 3
69813: NEG
69814: PUSH
69815: LD_INT 0
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 3
69824: NEG
69825: PUSH
69826: LD_INT 1
69828: NEG
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 2
69836: NEG
69837: PUSH
69838: LD_INT 0
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 2
69847: NEG
69848: PUSH
69849: LD_INT 1
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 3
69858: NEG
69859: PUSH
69860: LD_INT 1
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 4
69869: NEG
69870: PUSH
69871: LD_INT 0
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 4
69880: NEG
69881: PUSH
69882: LD_INT 1
69884: NEG
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 4
69892: NEG
69893: PUSH
69894: LD_INT 2
69896: NEG
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 2
69904: NEG
69905: PUSH
69906: LD_INT 2
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 4
69915: NEG
69916: PUSH
69917: LD_INT 4
69919: NEG
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 4
69927: NEG
69928: PUSH
69929: LD_INT 5
69931: NEG
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 3
69939: NEG
69940: PUSH
69941: LD_INT 4
69943: NEG
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 3
69951: NEG
69952: PUSH
69953: LD_INT 3
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 4
69963: NEG
69964: PUSH
69965: LD_INT 3
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 5
69975: NEG
69976: PUSH
69977: LD_INT 4
69979: NEG
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 5
69987: NEG
69988: PUSH
69989: LD_INT 5
69991: NEG
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 3
69999: NEG
70000: PUSH
70001: LD_INT 5
70003: NEG
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 5
70011: NEG
70012: PUSH
70013: LD_INT 3
70015: NEG
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70068: LD_ADDR_VAR 0 30
70072: PUSH
70073: LD_INT 4
70075: PUSH
70076: LD_INT 4
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 4
70085: PUSH
70086: LD_INT 3
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 5
70095: PUSH
70096: LD_INT 4
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 5
70105: PUSH
70106: LD_INT 5
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 4
70115: PUSH
70116: LD_INT 5
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 3
70125: PUSH
70126: LD_INT 4
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 3
70135: PUSH
70136: LD_INT 3
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 5
70145: PUSH
70146: LD_INT 3
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 3
70155: PUSH
70156: LD_INT 5
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: LD_INT 3
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 0
70175: PUSH
70176: LD_INT 2
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 1
70185: PUSH
70186: LD_INT 3
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 1
70195: PUSH
70196: LD_INT 4
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 0
70205: PUSH
70206: LD_INT 4
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 1
70215: NEG
70216: PUSH
70217: LD_INT 3
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 1
70226: NEG
70227: PUSH
70228: LD_INT 2
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 2
70237: PUSH
70238: LD_INT 4
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 2
70247: NEG
70248: PUSH
70249: LD_INT 2
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 4
70258: NEG
70259: PUSH
70260: LD_INT 0
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 4
70269: NEG
70270: PUSH
70271: LD_INT 1
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 3
70281: NEG
70282: PUSH
70283: LD_INT 0
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 3
70292: NEG
70293: PUSH
70294: LD_INT 1
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 4
70303: NEG
70304: PUSH
70305: LD_INT 1
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 5
70314: NEG
70315: PUSH
70316: LD_INT 0
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 5
70325: NEG
70326: PUSH
70327: LD_INT 1
70329: NEG
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 5
70337: NEG
70338: PUSH
70339: LD_INT 2
70341: NEG
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 3
70349: NEG
70350: PUSH
70351: LD_INT 2
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 3
70360: NEG
70361: PUSH
70362: LD_INT 3
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 3
70372: NEG
70373: PUSH
70374: LD_INT 4
70376: NEG
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 2
70384: NEG
70385: PUSH
70386: LD_INT 3
70388: NEG
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 2
70396: NEG
70397: PUSH
70398: LD_INT 2
70400: NEG
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 3
70408: NEG
70409: PUSH
70410: LD_INT 2
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 4
70420: NEG
70421: PUSH
70422: LD_INT 3
70424: NEG
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 4
70432: NEG
70433: PUSH
70434: LD_INT 4
70436: NEG
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 2
70444: NEG
70445: PUSH
70446: LD_INT 4
70448: NEG
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 4
70456: NEG
70457: PUSH
70458: LD_INT 2
70460: NEG
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 0
70468: PUSH
70469: LD_INT 4
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: LD_INT 5
70482: NEG
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 1
70490: PUSH
70491: LD_INT 4
70493: NEG
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 1
70501: PUSH
70502: LD_INT 3
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 0
70512: PUSH
70513: LD_INT 3
70515: NEG
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 1
70523: NEG
70524: PUSH
70525: LD_INT 4
70527: NEG
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 1
70535: NEG
70536: PUSH
70537: LD_INT 5
70539: NEG
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 2
70547: PUSH
70548: LD_INT 3
70550: NEG
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 2
70558: NEG
70559: PUSH
70560: LD_INT 5
70562: NEG
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70615: LD_ADDR_VAR 0 31
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 4
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 0
70632: PUSH
70633: LD_INT 3
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 1
70642: PUSH
70643: LD_INT 4
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 1
70652: PUSH
70653: LD_INT 5
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 0
70662: PUSH
70663: LD_INT 5
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 1
70672: NEG
70673: PUSH
70674: LD_INT 4
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 1
70683: NEG
70684: PUSH
70685: LD_INT 3
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 2
70694: PUSH
70695: LD_INT 5
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 2
70704: NEG
70705: PUSH
70706: LD_INT 3
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 3
70715: NEG
70716: PUSH
70717: LD_INT 0
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 3
70726: NEG
70727: PUSH
70728: LD_INT 1
70730: NEG
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 2
70738: NEG
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 2
70749: NEG
70750: PUSH
70751: LD_INT 1
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 3
70760: NEG
70761: PUSH
70762: LD_INT 1
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 4
70771: NEG
70772: PUSH
70773: LD_INT 0
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 4
70782: NEG
70783: PUSH
70784: LD_INT 1
70786: NEG
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 4
70794: NEG
70795: PUSH
70796: LD_INT 2
70798: NEG
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 2
70806: NEG
70807: PUSH
70808: LD_INT 2
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 4
70817: NEG
70818: PUSH
70819: LD_INT 4
70821: NEG
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 4
70829: NEG
70830: PUSH
70831: LD_INT 5
70833: NEG
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 3
70841: NEG
70842: PUSH
70843: LD_INT 4
70845: NEG
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 3
70853: NEG
70854: PUSH
70855: LD_INT 3
70857: NEG
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 4
70865: NEG
70866: PUSH
70867: LD_INT 3
70869: NEG
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 5
70877: NEG
70878: PUSH
70879: LD_INT 4
70881: NEG
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 5
70889: NEG
70890: PUSH
70891: LD_INT 5
70893: NEG
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 3
70901: NEG
70902: PUSH
70903: LD_INT 5
70905: NEG
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 5
70913: NEG
70914: PUSH
70915: LD_INT 3
70917: NEG
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 0
70925: PUSH
70926: LD_INT 3
70928: NEG
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 0
70936: PUSH
70937: LD_INT 4
70939: NEG
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 1
70947: PUSH
70948: LD_INT 3
70950: NEG
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 1
70958: PUSH
70959: LD_INT 2
70961: NEG
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 0
70969: PUSH
70970: LD_INT 2
70972: NEG
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 1
70980: NEG
70981: PUSH
70982: LD_INT 3
70984: NEG
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 1
70992: NEG
70993: PUSH
70994: LD_INT 4
70996: NEG
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 2
71004: PUSH
71005: LD_INT 2
71007: NEG
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 2
71015: NEG
71016: PUSH
71017: LD_INT 4
71019: NEG
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 4
71027: PUSH
71028: LD_INT 0
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 4
71037: PUSH
71038: LD_INT 1
71040: NEG
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 5
71048: PUSH
71049: LD_INT 0
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 5
71058: PUSH
71059: LD_INT 1
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 4
71068: PUSH
71069: LD_INT 1
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 3
71078: PUSH
71079: LD_INT 0
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 3
71088: PUSH
71089: LD_INT 1
71091: NEG
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 3
71099: PUSH
71100: LD_INT 2
71102: NEG
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 5
71110: PUSH
71111: LD_INT 2
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71165: LD_ADDR_VAR 0 32
71169: PUSH
71170: LD_INT 4
71172: NEG
71173: PUSH
71174: LD_INT 0
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 4
71183: NEG
71184: PUSH
71185: LD_INT 1
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 3
71195: NEG
71196: PUSH
71197: LD_INT 0
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 3
71206: NEG
71207: PUSH
71208: LD_INT 1
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 4
71217: NEG
71218: PUSH
71219: LD_INT 1
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 5
71228: NEG
71229: PUSH
71230: LD_INT 0
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 5
71239: NEG
71240: PUSH
71241: LD_INT 1
71243: NEG
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 5
71251: NEG
71252: PUSH
71253: LD_INT 2
71255: NEG
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: LD_INT 3
71263: NEG
71264: PUSH
71265: LD_INT 2
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 3
71274: NEG
71275: PUSH
71276: LD_INT 3
71278: NEG
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 3
71286: NEG
71287: PUSH
71288: LD_INT 4
71290: NEG
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 2
71298: NEG
71299: PUSH
71300: LD_INT 3
71302: NEG
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 2
71310: NEG
71311: PUSH
71312: LD_INT 2
71314: NEG
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 3
71322: NEG
71323: PUSH
71324: LD_INT 2
71326: NEG
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 4
71334: NEG
71335: PUSH
71336: LD_INT 3
71338: NEG
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 4
71346: NEG
71347: PUSH
71348: LD_INT 4
71350: NEG
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 2
71358: NEG
71359: PUSH
71360: LD_INT 4
71362: NEG
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 4
71370: NEG
71371: PUSH
71372: LD_INT 2
71374: NEG
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 0
71382: PUSH
71383: LD_INT 4
71385: NEG
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 0
71393: PUSH
71394: LD_INT 5
71396: NEG
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 1
71404: PUSH
71405: LD_INT 4
71407: NEG
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 1
71415: PUSH
71416: LD_INT 3
71418: NEG
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 0
71426: PUSH
71427: LD_INT 3
71429: NEG
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 1
71437: NEG
71438: PUSH
71439: LD_INT 4
71441: NEG
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 1
71449: NEG
71450: PUSH
71451: LD_INT 5
71453: NEG
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 2
71461: PUSH
71462: LD_INT 3
71464: NEG
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 2
71472: NEG
71473: PUSH
71474: LD_INT 5
71476: NEG
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 3
71484: PUSH
71485: LD_INT 0
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 3
71494: PUSH
71495: LD_INT 1
71497: NEG
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 4
71505: PUSH
71506: LD_INT 0
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PUSH
71513: LD_INT 4
71515: PUSH
71516: LD_INT 1
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 3
71525: PUSH
71526: LD_INT 1
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 2
71535: PUSH
71536: LD_INT 0
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 2
71545: PUSH
71546: LD_INT 1
71548: NEG
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 2
71556: PUSH
71557: LD_INT 2
71559: NEG
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 4
71567: PUSH
71568: LD_INT 2
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 4
71577: PUSH
71578: LD_INT 4
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 4
71587: PUSH
71588: LD_INT 3
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 5
71597: PUSH
71598: LD_INT 4
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 5
71607: PUSH
71608: LD_INT 5
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 4
71617: PUSH
71618: LD_INT 5
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 3
71627: PUSH
71628: LD_INT 4
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: LD_INT 3
71637: PUSH
71638: LD_INT 3
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 5
71647: PUSH
71648: LD_INT 3
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 3
71657: PUSH
71658: LD_INT 5
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71712: LD_ADDR_VAR 0 33
71716: PUSH
71717: LD_INT 4
71719: NEG
71720: PUSH
71721: LD_INT 4
71723: NEG
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 4
71731: NEG
71732: PUSH
71733: LD_INT 5
71735: NEG
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 3
71743: NEG
71744: PUSH
71745: LD_INT 4
71747: NEG
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 3
71755: NEG
71756: PUSH
71757: LD_INT 3
71759: NEG
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 4
71767: NEG
71768: PUSH
71769: LD_INT 3
71771: NEG
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 5
71779: NEG
71780: PUSH
71781: LD_INT 4
71783: NEG
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 5
71791: NEG
71792: PUSH
71793: LD_INT 5
71795: NEG
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 3
71803: NEG
71804: PUSH
71805: LD_INT 5
71807: NEG
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 5
71815: NEG
71816: PUSH
71817: LD_INT 3
71819: NEG
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 0
71827: PUSH
71828: LD_INT 3
71830: NEG
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 0
71838: PUSH
71839: LD_INT 4
71841: NEG
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 1
71849: PUSH
71850: LD_INT 3
71852: NEG
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 1
71860: PUSH
71861: LD_INT 2
71863: NEG
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 0
71871: PUSH
71872: LD_INT 2
71874: NEG
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 1
71882: NEG
71883: PUSH
71884: LD_INT 3
71886: NEG
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 1
71894: NEG
71895: PUSH
71896: LD_INT 4
71898: NEG
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 2
71906: PUSH
71907: LD_INT 2
71909: NEG
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 2
71917: NEG
71918: PUSH
71919: LD_INT 4
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 4
71929: PUSH
71930: LD_INT 0
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 4
71939: PUSH
71940: LD_INT 1
71942: NEG
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 5
71950: PUSH
71951: LD_INT 0
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: PUSH
71958: LD_INT 5
71960: PUSH
71961: LD_INT 1
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 4
71970: PUSH
71971: LD_INT 1
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: LD_INT 3
71980: PUSH
71981: LD_INT 0
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: PUSH
71988: LD_INT 3
71990: PUSH
71991: LD_INT 1
71993: NEG
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 3
72001: PUSH
72002: LD_INT 2
72004: NEG
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 5
72012: PUSH
72013: LD_INT 2
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 3
72022: PUSH
72023: LD_INT 3
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 3
72032: PUSH
72033: LD_INT 2
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 4
72042: PUSH
72043: LD_INT 3
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 4
72052: PUSH
72053: LD_INT 4
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: LD_INT 3
72062: PUSH
72063: LD_INT 4
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: LD_INT 2
72072: PUSH
72073: LD_INT 3
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: LD_INT 2
72082: PUSH
72083: LD_INT 2
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 4
72092: PUSH
72093: LD_INT 2
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 2
72102: PUSH
72103: LD_INT 4
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: LD_INT 0
72112: PUSH
72113: LD_INT 4
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 0
72122: PUSH
72123: LD_INT 3
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 1
72132: PUSH
72133: LD_INT 4
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 1
72142: PUSH
72143: LD_INT 5
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 0
72152: PUSH
72153: LD_INT 5
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 1
72162: NEG
72163: PUSH
72164: LD_INT 4
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 1
72173: NEG
72174: PUSH
72175: LD_INT 3
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 2
72184: PUSH
72185: LD_INT 5
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 2
72194: NEG
72195: PUSH
72196: LD_INT 3
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72250: LD_ADDR_VAR 0 34
72254: PUSH
72255: LD_INT 0
72257: PUSH
72258: LD_INT 4
72260: NEG
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 0
72268: PUSH
72269: LD_INT 5
72271: NEG
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 1
72279: PUSH
72280: LD_INT 4
72282: NEG
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 1
72290: PUSH
72291: LD_INT 3
72293: NEG
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 0
72301: PUSH
72302: LD_INT 3
72304: NEG
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 1
72312: NEG
72313: PUSH
72314: LD_INT 4
72316: NEG
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 1
72324: NEG
72325: PUSH
72326: LD_INT 5
72328: NEG
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: LD_INT 2
72336: PUSH
72337: LD_INT 3
72339: NEG
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 2
72347: NEG
72348: PUSH
72349: LD_INT 5
72351: NEG
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 3
72359: PUSH
72360: LD_INT 0
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 3
72369: PUSH
72370: LD_INT 1
72372: NEG
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 4
72380: PUSH
72381: LD_INT 0
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 4
72390: PUSH
72391: LD_INT 1
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 3
72400: PUSH
72401: LD_INT 1
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 2
72410: PUSH
72411: LD_INT 0
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 2
72420: PUSH
72421: LD_INT 1
72423: NEG
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 2
72431: PUSH
72432: LD_INT 2
72434: NEG
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: LD_INT 4
72442: PUSH
72443: LD_INT 2
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 4
72452: PUSH
72453: LD_INT 4
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: LD_INT 4
72462: PUSH
72463: LD_INT 3
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 5
72472: PUSH
72473: LD_INT 4
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 5
72482: PUSH
72483: LD_INT 5
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 4
72492: PUSH
72493: LD_INT 5
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PUSH
72500: LD_INT 3
72502: PUSH
72503: LD_INT 4
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 3
72512: PUSH
72513: LD_INT 3
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 5
72522: PUSH
72523: LD_INT 3
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 3
72532: PUSH
72533: LD_INT 5
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 0
72542: PUSH
72543: LD_INT 3
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 0
72552: PUSH
72553: LD_INT 2
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 1
72562: PUSH
72563: LD_INT 3
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: PUSH
72570: LD_INT 1
72572: PUSH
72573: LD_INT 4
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: PUSH
72580: LD_INT 0
72582: PUSH
72583: LD_INT 4
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: LD_INT 1
72592: NEG
72593: PUSH
72594: LD_INT 3
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 1
72603: NEG
72604: PUSH
72605: LD_INT 2
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 2
72614: PUSH
72615: LD_INT 4
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 2
72624: NEG
72625: PUSH
72626: LD_INT 2
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 4
72635: NEG
72636: PUSH
72637: LD_INT 0
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: PUSH
72644: LD_INT 4
72646: NEG
72647: PUSH
72648: LD_INT 1
72650: NEG
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 3
72658: NEG
72659: PUSH
72660: LD_INT 0
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: PUSH
72667: LD_INT 3
72669: NEG
72670: PUSH
72671: LD_INT 1
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 4
72680: NEG
72681: PUSH
72682: LD_INT 1
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: PUSH
72689: LD_INT 5
72691: NEG
72692: PUSH
72693: LD_INT 0
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 5
72702: NEG
72703: PUSH
72704: LD_INT 1
72706: NEG
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: LD_INT 5
72714: NEG
72715: PUSH
72716: LD_INT 2
72718: NEG
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 3
72726: NEG
72727: PUSH
72728: LD_INT 2
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: ST_TO_ADDR
// end ; end ;
72782: GO 72785
72784: POP
// case btype of b_depot , b_warehouse :
72785: LD_VAR 0 1
72789: PUSH
72790: LD_INT 0
72792: DOUBLE
72793: EQUAL
72794: IFTRUE 72804
72796: LD_INT 1
72798: DOUBLE
72799: EQUAL
72800: IFTRUE 72804
72802: GO 73005
72804: POP
// case nation of nation_american :
72805: LD_VAR 0 5
72809: PUSH
72810: LD_INT 1
72812: DOUBLE
72813: EQUAL
72814: IFTRUE 72818
72816: GO 72874
72818: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72819: LD_ADDR_VAR 0 9
72823: PUSH
72824: LD_VAR 0 11
72828: PUSH
72829: LD_VAR 0 12
72833: PUSH
72834: LD_VAR 0 13
72838: PUSH
72839: LD_VAR 0 14
72843: PUSH
72844: LD_VAR 0 15
72848: PUSH
72849: LD_VAR 0 16
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: PUSH
72862: LD_VAR 0 4
72866: PUSH
72867: LD_INT 1
72869: PLUS
72870: ARRAY
72871: ST_TO_ADDR
72872: GO 73003
72874: LD_INT 2
72876: DOUBLE
72877: EQUAL
72878: IFTRUE 72882
72880: GO 72938
72882: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72883: LD_ADDR_VAR 0 9
72887: PUSH
72888: LD_VAR 0 17
72892: PUSH
72893: LD_VAR 0 18
72897: PUSH
72898: LD_VAR 0 19
72902: PUSH
72903: LD_VAR 0 20
72907: PUSH
72908: LD_VAR 0 21
72912: PUSH
72913: LD_VAR 0 22
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: LIST
72925: PUSH
72926: LD_VAR 0 4
72930: PUSH
72931: LD_INT 1
72933: PLUS
72934: ARRAY
72935: ST_TO_ADDR
72936: GO 73003
72938: LD_INT 3
72940: DOUBLE
72941: EQUAL
72942: IFTRUE 72946
72944: GO 73002
72946: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72947: LD_ADDR_VAR 0 9
72951: PUSH
72952: LD_VAR 0 23
72956: PUSH
72957: LD_VAR 0 24
72961: PUSH
72962: LD_VAR 0 25
72966: PUSH
72967: LD_VAR 0 26
72971: PUSH
72972: LD_VAR 0 27
72976: PUSH
72977: LD_VAR 0 28
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: PUSH
72990: LD_VAR 0 4
72994: PUSH
72995: LD_INT 1
72997: PLUS
72998: ARRAY
72999: ST_TO_ADDR
73000: GO 73003
73002: POP
73003: GO 73558
73005: LD_INT 2
73007: DOUBLE
73008: EQUAL
73009: IFTRUE 73019
73011: LD_INT 3
73013: DOUBLE
73014: EQUAL
73015: IFTRUE 73019
73017: GO 73075
73019: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73020: LD_ADDR_VAR 0 9
73024: PUSH
73025: LD_VAR 0 29
73029: PUSH
73030: LD_VAR 0 30
73034: PUSH
73035: LD_VAR 0 31
73039: PUSH
73040: LD_VAR 0 32
73044: PUSH
73045: LD_VAR 0 33
73049: PUSH
73050: LD_VAR 0 34
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: PUSH
73063: LD_VAR 0 4
73067: PUSH
73068: LD_INT 1
73070: PLUS
73071: ARRAY
73072: ST_TO_ADDR
73073: GO 73558
73075: LD_INT 16
73077: DOUBLE
73078: EQUAL
73079: IFTRUE 73137
73081: LD_INT 17
73083: DOUBLE
73084: EQUAL
73085: IFTRUE 73137
73087: LD_INT 18
73089: DOUBLE
73090: EQUAL
73091: IFTRUE 73137
73093: LD_INT 19
73095: DOUBLE
73096: EQUAL
73097: IFTRUE 73137
73099: LD_INT 22
73101: DOUBLE
73102: EQUAL
73103: IFTRUE 73137
73105: LD_INT 20
73107: DOUBLE
73108: EQUAL
73109: IFTRUE 73137
73111: LD_INT 21
73113: DOUBLE
73114: EQUAL
73115: IFTRUE 73137
73117: LD_INT 23
73119: DOUBLE
73120: EQUAL
73121: IFTRUE 73137
73123: LD_INT 24
73125: DOUBLE
73126: EQUAL
73127: IFTRUE 73137
73129: LD_INT 25
73131: DOUBLE
73132: EQUAL
73133: IFTRUE 73137
73135: GO 73193
73137: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73138: LD_ADDR_VAR 0 9
73142: PUSH
73143: LD_VAR 0 35
73147: PUSH
73148: LD_VAR 0 36
73152: PUSH
73153: LD_VAR 0 37
73157: PUSH
73158: LD_VAR 0 38
73162: PUSH
73163: LD_VAR 0 39
73167: PUSH
73168: LD_VAR 0 40
73172: PUSH
73173: EMPTY
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: PUSH
73181: LD_VAR 0 4
73185: PUSH
73186: LD_INT 1
73188: PLUS
73189: ARRAY
73190: ST_TO_ADDR
73191: GO 73558
73193: LD_INT 6
73195: DOUBLE
73196: EQUAL
73197: IFTRUE 73249
73199: LD_INT 7
73201: DOUBLE
73202: EQUAL
73203: IFTRUE 73249
73205: LD_INT 8
73207: DOUBLE
73208: EQUAL
73209: IFTRUE 73249
73211: LD_INT 13
73213: DOUBLE
73214: EQUAL
73215: IFTRUE 73249
73217: LD_INT 12
73219: DOUBLE
73220: EQUAL
73221: IFTRUE 73249
73223: LD_INT 15
73225: DOUBLE
73226: EQUAL
73227: IFTRUE 73249
73229: LD_INT 11
73231: DOUBLE
73232: EQUAL
73233: IFTRUE 73249
73235: LD_INT 14
73237: DOUBLE
73238: EQUAL
73239: IFTRUE 73249
73241: LD_INT 10
73243: DOUBLE
73244: EQUAL
73245: IFTRUE 73249
73247: GO 73305
73249: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73250: LD_ADDR_VAR 0 9
73254: PUSH
73255: LD_VAR 0 41
73259: PUSH
73260: LD_VAR 0 42
73264: PUSH
73265: LD_VAR 0 43
73269: PUSH
73270: LD_VAR 0 44
73274: PUSH
73275: LD_VAR 0 45
73279: PUSH
73280: LD_VAR 0 46
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: PUSH
73293: LD_VAR 0 4
73297: PUSH
73298: LD_INT 1
73300: PLUS
73301: ARRAY
73302: ST_TO_ADDR
73303: GO 73558
73305: LD_INT 36
73307: DOUBLE
73308: EQUAL
73309: IFTRUE 73313
73311: GO 73369
73313: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73314: LD_ADDR_VAR 0 9
73318: PUSH
73319: LD_VAR 0 47
73323: PUSH
73324: LD_VAR 0 48
73328: PUSH
73329: LD_VAR 0 49
73333: PUSH
73334: LD_VAR 0 50
73338: PUSH
73339: LD_VAR 0 51
73343: PUSH
73344: LD_VAR 0 52
73348: PUSH
73349: EMPTY
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: PUSH
73357: LD_VAR 0 4
73361: PUSH
73362: LD_INT 1
73364: PLUS
73365: ARRAY
73366: ST_TO_ADDR
73367: GO 73558
73369: LD_INT 4
73371: DOUBLE
73372: EQUAL
73373: IFTRUE 73395
73375: LD_INT 5
73377: DOUBLE
73378: EQUAL
73379: IFTRUE 73395
73381: LD_INT 34
73383: DOUBLE
73384: EQUAL
73385: IFTRUE 73395
73387: LD_INT 37
73389: DOUBLE
73390: EQUAL
73391: IFTRUE 73395
73393: GO 73451
73395: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73396: LD_ADDR_VAR 0 9
73400: PUSH
73401: LD_VAR 0 53
73405: PUSH
73406: LD_VAR 0 54
73410: PUSH
73411: LD_VAR 0 55
73415: PUSH
73416: LD_VAR 0 56
73420: PUSH
73421: LD_VAR 0 57
73425: PUSH
73426: LD_VAR 0 58
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: LIST
73435: LIST
73436: LIST
73437: LIST
73438: PUSH
73439: LD_VAR 0 4
73443: PUSH
73444: LD_INT 1
73446: PLUS
73447: ARRAY
73448: ST_TO_ADDR
73449: GO 73558
73451: LD_INT 31
73453: DOUBLE
73454: EQUAL
73455: IFTRUE 73501
73457: LD_INT 32
73459: DOUBLE
73460: EQUAL
73461: IFTRUE 73501
73463: LD_INT 33
73465: DOUBLE
73466: EQUAL
73467: IFTRUE 73501
73469: LD_INT 27
73471: DOUBLE
73472: EQUAL
73473: IFTRUE 73501
73475: LD_INT 26
73477: DOUBLE
73478: EQUAL
73479: IFTRUE 73501
73481: LD_INT 28
73483: DOUBLE
73484: EQUAL
73485: IFTRUE 73501
73487: LD_INT 29
73489: DOUBLE
73490: EQUAL
73491: IFTRUE 73501
73493: LD_INT 30
73495: DOUBLE
73496: EQUAL
73497: IFTRUE 73501
73499: GO 73557
73501: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73502: LD_ADDR_VAR 0 9
73506: PUSH
73507: LD_VAR 0 59
73511: PUSH
73512: LD_VAR 0 60
73516: PUSH
73517: LD_VAR 0 61
73521: PUSH
73522: LD_VAR 0 62
73526: PUSH
73527: LD_VAR 0 63
73531: PUSH
73532: LD_VAR 0 64
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: LIST
73541: LIST
73542: LIST
73543: LIST
73544: PUSH
73545: LD_VAR 0 4
73549: PUSH
73550: LD_INT 1
73552: PLUS
73553: ARRAY
73554: ST_TO_ADDR
73555: GO 73558
73557: POP
// temp_list2 = [ ] ;
73558: LD_ADDR_VAR 0 10
73562: PUSH
73563: EMPTY
73564: ST_TO_ADDR
// for i in temp_list do
73565: LD_ADDR_VAR 0 8
73569: PUSH
73570: LD_VAR 0 9
73574: PUSH
73575: FOR_IN
73576: IFFALSE 73628
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73578: LD_ADDR_VAR 0 10
73582: PUSH
73583: LD_VAR 0 10
73587: PUSH
73588: LD_VAR 0 8
73592: PUSH
73593: LD_INT 1
73595: ARRAY
73596: PUSH
73597: LD_VAR 0 2
73601: PLUS
73602: PUSH
73603: LD_VAR 0 8
73607: PUSH
73608: LD_INT 2
73610: ARRAY
73611: PUSH
73612: LD_VAR 0 3
73616: PLUS
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: EMPTY
73623: LIST
73624: ADD
73625: ST_TO_ADDR
73626: GO 73575
73628: POP
73629: POP
// result = temp_list2 ;
73630: LD_ADDR_VAR 0 7
73634: PUSH
73635: LD_VAR 0 10
73639: ST_TO_ADDR
// end ;
73640: LD_VAR 0 7
73644: RET
// export function EnemyInRange ( unit , dist ) ; begin
73645: LD_INT 0
73647: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73648: LD_ADDR_VAR 0 3
73652: PUSH
73653: LD_VAR 0 1
73657: PPUSH
73658: CALL_OW 255
73662: PPUSH
73663: LD_VAR 0 1
73667: PPUSH
73668: CALL_OW 250
73672: PPUSH
73673: LD_VAR 0 1
73677: PPUSH
73678: CALL_OW 251
73682: PPUSH
73683: LD_VAR 0 2
73687: PPUSH
73688: CALL 47047 0 4
73692: PUSH
73693: LD_INT 4
73695: ARRAY
73696: ST_TO_ADDR
// end ;
73697: LD_VAR 0 3
73701: RET
// export function PlayerSeeMe ( unit ) ; begin
73702: LD_INT 0
73704: PPUSH
// result := See ( your_side , unit ) ;
73705: LD_ADDR_VAR 0 2
73709: PUSH
73710: LD_OWVAR 2
73714: PPUSH
73715: LD_VAR 0 1
73719: PPUSH
73720: CALL_OW 292
73724: ST_TO_ADDR
// end ;
73725: LD_VAR 0 2
73729: RET
// export function ReverseDir ( unit ) ; begin
73730: LD_INT 0
73732: PPUSH
// if not unit then
73733: LD_VAR 0 1
73737: NOT
73738: IFFALSE 73742
// exit ;
73740: GO 73765
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73742: LD_ADDR_VAR 0 2
73746: PUSH
73747: LD_VAR 0 1
73751: PPUSH
73752: CALL_OW 254
73756: PUSH
73757: LD_INT 3
73759: PLUS
73760: PUSH
73761: LD_INT 6
73763: MOD
73764: ST_TO_ADDR
// end ;
73765: LD_VAR 0 2
73769: RET
// export function ReverseArray ( array ) ; var i ; begin
73770: LD_INT 0
73772: PPUSH
73773: PPUSH
// if not array then
73774: LD_VAR 0 1
73778: NOT
73779: IFFALSE 73783
// exit ;
73781: GO 73838
// result := [ ] ;
73783: LD_ADDR_VAR 0 2
73787: PUSH
73788: EMPTY
73789: ST_TO_ADDR
// for i := array downto 1 do
73790: LD_ADDR_VAR 0 3
73794: PUSH
73795: DOUBLE
73796: LD_VAR 0 1
73800: INC
73801: ST_TO_ADDR
73802: LD_INT 1
73804: PUSH
73805: FOR_DOWNTO
73806: IFFALSE 73836
// result := Join ( result , array [ i ] ) ;
73808: LD_ADDR_VAR 0 2
73812: PUSH
73813: LD_VAR 0 2
73817: PPUSH
73818: LD_VAR 0 1
73822: PUSH
73823: LD_VAR 0 3
73827: ARRAY
73828: PPUSH
73829: CALL 78463 0 2
73833: ST_TO_ADDR
73834: GO 73805
73836: POP
73837: POP
// end ;
73838: LD_VAR 0 2
73842: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73843: LD_INT 0
73845: PPUSH
73846: PPUSH
73847: PPUSH
73848: PPUSH
73849: PPUSH
73850: PPUSH
// if not unit or not hexes then
73851: LD_VAR 0 1
73855: NOT
73856: PUSH
73857: LD_VAR 0 2
73861: NOT
73862: OR
73863: IFFALSE 73867
// exit ;
73865: GO 73990
// dist := 9999 ;
73867: LD_ADDR_VAR 0 5
73871: PUSH
73872: LD_INT 9999
73874: ST_TO_ADDR
// for i = 1 to hexes do
73875: LD_ADDR_VAR 0 4
73879: PUSH
73880: DOUBLE
73881: LD_INT 1
73883: DEC
73884: ST_TO_ADDR
73885: LD_VAR 0 2
73889: PUSH
73890: FOR_TO
73891: IFFALSE 73978
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73893: LD_ADDR_VAR 0 6
73897: PUSH
73898: LD_VAR 0 1
73902: PPUSH
73903: LD_VAR 0 2
73907: PUSH
73908: LD_VAR 0 4
73912: ARRAY
73913: PUSH
73914: LD_INT 1
73916: ARRAY
73917: PPUSH
73918: LD_VAR 0 2
73922: PUSH
73923: LD_VAR 0 4
73927: ARRAY
73928: PUSH
73929: LD_INT 2
73931: ARRAY
73932: PPUSH
73933: CALL_OW 297
73937: ST_TO_ADDR
// if tdist < dist then
73938: LD_VAR 0 6
73942: PUSH
73943: LD_VAR 0 5
73947: LESS
73948: IFFALSE 73976
// begin hex := hexes [ i ] ;
73950: LD_ADDR_VAR 0 8
73954: PUSH
73955: LD_VAR 0 2
73959: PUSH
73960: LD_VAR 0 4
73964: ARRAY
73965: ST_TO_ADDR
// dist := tdist ;
73966: LD_ADDR_VAR 0 5
73970: PUSH
73971: LD_VAR 0 6
73975: ST_TO_ADDR
// end ; end ;
73976: GO 73890
73978: POP
73979: POP
// result := hex ;
73980: LD_ADDR_VAR 0 3
73984: PUSH
73985: LD_VAR 0 8
73989: ST_TO_ADDR
// end ;
73990: LD_VAR 0 3
73994: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73995: LD_INT 0
73997: PPUSH
73998: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73999: LD_VAR 0 1
74003: NOT
74004: PUSH
74005: LD_VAR 0 1
74009: PUSH
74010: LD_INT 21
74012: PUSH
74013: LD_INT 2
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 23
74022: PUSH
74023: LD_INT 2
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PPUSH
74034: CALL_OW 69
74038: IN
74039: NOT
74040: OR
74041: IFFALSE 74045
// exit ;
74043: GO 74092
// for i = 1 to 3 do
74045: LD_ADDR_VAR 0 3
74049: PUSH
74050: DOUBLE
74051: LD_INT 1
74053: DEC
74054: ST_TO_ADDR
74055: LD_INT 3
74057: PUSH
74058: FOR_TO
74059: IFFALSE 74090
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74061: LD_VAR 0 1
74065: PPUSH
74066: CALL_OW 250
74070: PPUSH
74071: LD_VAR 0 1
74075: PPUSH
74076: CALL_OW 251
74080: PPUSH
74081: LD_INT 1
74083: PPUSH
74084: CALL_OW 453
74088: GO 74058
74090: POP
74091: POP
// end ;
74092: LD_VAR 0 2
74096: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74097: LD_INT 0
74099: PPUSH
74100: PPUSH
74101: PPUSH
74102: PPUSH
74103: PPUSH
74104: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74105: LD_VAR 0 1
74109: NOT
74110: PUSH
74111: LD_VAR 0 2
74115: NOT
74116: OR
74117: PUSH
74118: LD_VAR 0 1
74122: PPUSH
74123: CALL_OW 314
74127: OR
74128: IFFALSE 74132
// exit ;
74130: GO 74573
// x := GetX ( enemy_unit ) ;
74132: LD_ADDR_VAR 0 7
74136: PUSH
74137: LD_VAR 0 2
74141: PPUSH
74142: CALL_OW 250
74146: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74147: LD_ADDR_VAR 0 8
74151: PUSH
74152: LD_VAR 0 2
74156: PPUSH
74157: CALL_OW 251
74161: ST_TO_ADDR
// if not x or not y then
74162: LD_VAR 0 7
74166: NOT
74167: PUSH
74168: LD_VAR 0 8
74172: NOT
74173: OR
74174: IFFALSE 74178
// exit ;
74176: GO 74573
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74178: LD_ADDR_VAR 0 6
74182: PUSH
74183: LD_VAR 0 7
74187: PPUSH
74188: LD_INT 0
74190: PPUSH
74191: LD_INT 4
74193: PPUSH
74194: CALL_OW 272
74198: PUSH
74199: LD_VAR 0 8
74203: PPUSH
74204: LD_INT 0
74206: PPUSH
74207: LD_INT 4
74209: PPUSH
74210: CALL_OW 273
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: PUSH
74219: LD_VAR 0 7
74223: PPUSH
74224: LD_INT 1
74226: PPUSH
74227: LD_INT 4
74229: PPUSH
74230: CALL_OW 272
74234: PUSH
74235: LD_VAR 0 8
74239: PPUSH
74240: LD_INT 1
74242: PPUSH
74243: LD_INT 4
74245: PPUSH
74246: CALL_OW 273
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: PUSH
74255: LD_VAR 0 7
74259: PPUSH
74260: LD_INT 2
74262: PPUSH
74263: LD_INT 4
74265: PPUSH
74266: CALL_OW 272
74270: PUSH
74271: LD_VAR 0 8
74275: PPUSH
74276: LD_INT 2
74278: PPUSH
74279: LD_INT 4
74281: PPUSH
74282: CALL_OW 273
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PUSH
74291: LD_VAR 0 7
74295: PPUSH
74296: LD_INT 3
74298: PPUSH
74299: LD_INT 4
74301: PPUSH
74302: CALL_OW 272
74306: PUSH
74307: LD_VAR 0 8
74311: PPUSH
74312: LD_INT 3
74314: PPUSH
74315: LD_INT 4
74317: PPUSH
74318: CALL_OW 273
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: PUSH
74327: LD_VAR 0 7
74331: PPUSH
74332: LD_INT 4
74334: PPUSH
74335: LD_INT 4
74337: PPUSH
74338: CALL_OW 272
74342: PUSH
74343: LD_VAR 0 8
74347: PPUSH
74348: LD_INT 4
74350: PPUSH
74351: LD_INT 4
74353: PPUSH
74354: CALL_OW 273
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: PUSH
74363: LD_VAR 0 7
74367: PPUSH
74368: LD_INT 5
74370: PPUSH
74371: LD_INT 4
74373: PPUSH
74374: CALL_OW 272
74378: PUSH
74379: LD_VAR 0 8
74383: PPUSH
74384: LD_INT 5
74386: PPUSH
74387: LD_INT 4
74389: PPUSH
74390: CALL_OW 273
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: ST_TO_ADDR
// for i = tmp downto 1 do
74407: LD_ADDR_VAR 0 4
74411: PUSH
74412: DOUBLE
74413: LD_VAR 0 6
74417: INC
74418: ST_TO_ADDR
74419: LD_INT 1
74421: PUSH
74422: FOR_DOWNTO
74423: IFFALSE 74524
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74425: LD_VAR 0 6
74429: PUSH
74430: LD_VAR 0 4
74434: ARRAY
74435: PUSH
74436: LD_INT 1
74438: ARRAY
74439: PPUSH
74440: LD_VAR 0 6
74444: PUSH
74445: LD_VAR 0 4
74449: ARRAY
74450: PUSH
74451: LD_INT 2
74453: ARRAY
74454: PPUSH
74455: CALL_OW 488
74459: NOT
74460: PUSH
74461: LD_VAR 0 6
74465: PUSH
74466: LD_VAR 0 4
74470: ARRAY
74471: PUSH
74472: LD_INT 1
74474: ARRAY
74475: PPUSH
74476: LD_VAR 0 6
74480: PUSH
74481: LD_VAR 0 4
74485: ARRAY
74486: PUSH
74487: LD_INT 2
74489: ARRAY
74490: PPUSH
74491: CALL_OW 428
74495: PUSH
74496: LD_INT 0
74498: NONEQUAL
74499: OR
74500: IFFALSE 74522
// tmp := Delete ( tmp , i ) ;
74502: LD_ADDR_VAR 0 6
74506: PUSH
74507: LD_VAR 0 6
74511: PPUSH
74512: LD_VAR 0 4
74516: PPUSH
74517: CALL_OW 3
74521: ST_TO_ADDR
74522: GO 74422
74524: POP
74525: POP
// j := GetClosestHex ( unit , tmp ) ;
74526: LD_ADDR_VAR 0 5
74530: PUSH
74531: LD_VAR 0 1
74535: PPUSH
74536: LD_VAR 0 6
74540: PPUSH
74541: CALL 73843 0 2
74545: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74546: LD_VAR 0 1
74550: PPUSH
74551: LD_VAR 0 5
74555: PUSH
74556: LD_INT 1
74558: ARRAY
74559: PPUSH
74560: LD_VAR 0 5
74564: PUSH
74565: LD_INT 2
74567: ARRAY
74568: PPUSH
74569: CALL_OW 111
// end ;
74573: LD_VAR 0 3
74577: RET
// export function PrepareApemanSoldier ( ) ; begin
74578: LD_INT 0
74580: PPUSH
// uc_nation := 0 ;
74581: LD_ADDR_OWVAR 21
74585: PUSH
74586: LD_INT 0
74588: ST_TO_ADDR
// hc_sex := sex_male ;
74589: LD_ADDR_OWVAR 27
74593: PUSH
74594: LD_INT 1
74596: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74597: LD_ADDR_OWVAR 28
74601: PUSH
74602: LD_INT 15
74604: ST_TO_ADDR
// hc_gallery :=  ;
74605: LD_ADDR_OWVAR 33
74609: PUSH
74610: LD_STRING 
74612: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74613: LD_ADDR_OWVAR 31
74617: PUSH
74618: LD_INT 0
74620: PPUSH
74621: LD_INT 3
74623: PPUSH
74624: CALL_OW 12
74628: PUSH
74629: LD_INT 0
74631: PPUSH
74632: LD_INT 3
74634: PPUSH
74635: CALL_OW 12
74639: PUSH
74640: LD_INT 0
74642: PUSH
74643: LD_INT 0
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: LIST
74650: LIST
74651: ST_TO_ADDR
// end ;
74652: LD_VAR 0 1
74656: RET
// export function PrepareApemanEngineer ( ) ; begin
74657: LD_INT 0
74659: PPUSH
// uc_nation := 0 ;
74660: LD_ADDR_OWVAR 21
74664: PUSH
74665: LD_INT 0
74667: ST_TO_ADDR
// hc_sex := sex_male ;
74668: LD_ADDR_OWVAR 27
74672: PUSH
74673: LD_INT 1
74675: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74676: LD_ADDR_OWVAR 28
74680: PUSH
74681: LD_INT 16
74683: ST_TO_ADDR
// hc_gallery :=  ;
74684: LD_ADDR_OWVAR 33
74688: PUSH
74689: LD_STRING 
74691: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74692: LD_ADDR_OWVAR 31
74696: PUSH
74697: LD_INT 0
74699: PPUSH
74700: LD_INT 3
74702: PPUSH
74703: CALL_OW 12
74707: PUSH
74708: LD_INT 0
74710: PPUSH
74711: LD_INT 3
74713: PPUSH
74714: CALL_OW 12
74718: PUSH
74719: LD_INT 0
74721: PUSH
74722: LD_INT 0
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: LIST
74729: LIST
74730: ST_TO_ADDR
// end ;
74731: LD_VAR 0 1
74735: RET
// export function PrepareApeman ( agressivity ) ; begin
74736: LD_INT 0
74738: PPUSH
// uc_side := 0 ;
74739: LD_ADDR_OWVAR 20
74743: PUSH
74744: LD_INT 0
74746: ST_TO_ADDR
// uc_nation := 0 ;
74747: LD_ADDR_OWVAR 21
74751: PUSH
74752: LD_INT 0
74754: ST_TO_ADDR
// hc_sex := sex_male ;
74755: LD_ADDR_OWVAR 27
74759: PUSH
74760: LD_INT 1
74762: ST_TO_ADDR
// hc_class := class_apeman ;
74763: LD_ADDR_OWVAR 28
74767: PUSH
74768: LD_INT 12
74770: ST_TO_ADDR
// hc_gallery :=  ;
74771: LD_ADDR_OWVAR 33
74775: PUSH
74776: LD_STRING 
74778: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74779: LD_ADDR_OWVAR 35
74783: PUSH
74784: LD_VAR 0 1
74788: NEG
74789: PPUSH
74790: LD_VAR 0 1
74794: PPUSH
74795: CALL_OW 12
74799: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74800: LD_ADDR_OWVAR 31
74804: PUSH
74805: LD_INT 0
74807: PPUSH
74808: LD_INT 3
74810: PPUSH
74811: CALL_OW 12
74815: PUSH
74816: LD_INT 0
74818: PPUSH
74819: LD_INT 3
74821: PPUSH
74822: CALL_OW 12
74826: PUSH
74827: LD_INT 0
74829: PUSH
74830: LD_INT 0
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: ST_TO_ADDR
// end ;
74839: LD_VAR 0 2
74843: RET
// export function PrepareTiger ( agressivity ) ; begin
74844: LD_INT 0
74846: PPUSH
// uc_side := 0 ;
74847: LD_ADDR_OWVAR 20
74851: PUSH
74852: LD_INT 0
74854: ST_TO_ADDR
// uc_nation := 0 ;
74855: LD_ADDR_OWVAR 21
74859: PUSH
74860: LD_INT 0
74862: ST_TO_ADDR
// hc_class := class_tiger ;
74863: LD_ADDR_OWVAR 28
74867: PUSH
74868: LD_INT 14
74870: ST_TO_ADDR
// hc_gallery :=  ;
74871: LD_ADDR_OWVAR 33
74875: PUSH
74876: LD_STRING 
74878: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74879: LD_ADDR_OWVAR 35
74883: PUSH
74884: LD_VAR 0 1
74888: NEG
74889: PPUSH
74890: LD_VAR 0 1
74894: PPUSH
74895: CALL_OW 12
74899: ST_TO_ADDR
// end ;
74900: LD_VAR 0 2
74904: RET
// export function PrepareEnchidna ( ) ; begin
74905: LD_INT 0
74907: PPUSH
// uc_side := 0 ;
74908: LD_ADDR_OWVAR 20
74912: PUSH
74913: LD_INT 0
74915: ST_TO_ADDR
// uc_nation := 0 ;
74916: LD_ADDR_OWVAR 21
74920: PUSH
74921: LD_INT 0
74923: ST_TO_ADDR
// hc_class := class_baggie ;
74924: LD_ADDR_OWVAR 28
74928: PUSH
74929: LD_INT 13
74931: ST_TO_ADDR
// hc_gallery :=  ;
74932: LD_ADDR_OWVAR 33
74936: PUSH
74937: LD_STRING 
74939: ST_TO_ADDR
// end ;
74940: LD_VAR 0 1
74944: RET
// export function PrepareFrog ( ) ; begin
74945: LD_INT 0
74947: PPUSH
// uc_side := 0 ;
74948: LD_ADDR_OWVAR 20
74952: PUSH
74953: LD_INT 0
74955: ST_TO_ADDR
// uc_nation := 0 ;
74956: LD_ADDR_OWVAR 21
74960: PUSH
74961: LD_INT 0
74963: ST_TO_ADDR
// hc_class := class_frog ;
74964: LD_ADDR_OWVAR 28
74968: PUSH
74969: LD_INT 19
74971: ST_TO_ADDR
// hc_gallery :=  ;
74972: LD_ADDR_OWVAR 33
74976: PUSH
74977: LD_STRING 
74979: ST_TO_ADDR
// end ;
74980: LD_VAR 0 1
74984: RET
// export function PrepareFish ( ) ; begin
74985: LD_INT 0
74987: PPUSH
// uc_side := 0 ;
74988: LD_ADDR_OWVAR 20
74992: PUSH
74993: LD_INT 0
74995: ST_TO_ADDR
// uc_nation := 0 ;
74996: LD_ADDR_OWVAR 21
75000: PUSH
75001: LD_INT 0
75003: ST_TO_ADDR
// hc_class := class_fish ;
75004: LD_ADDR_OWVAR 28
75008: PUSH
75009: LD_INT 20
75011: ST_TO_ADDR
// hc_gallery :=  ;
75012: LD_ADDR_OWVAR 33
75016: PUSH
75017: LD_STRING 
75019: ST_TO_ADDR
// end ;
75020: LD_VAR 0 1
75024: RET
// export function PrepareBird ( ) ; begin
75025: LD_INT 0
75027: PPUSH
// uc_side := 0 ;
75028: LD_ADDR_OWVAR 20
75032: PUSH
75033: LD_INT 0
75035: ST_TO_ADDR
// uc_nation := 0 ;
75036: LD_ADDR_OWVAR 21
75040: PUSH
75041: LD_INT 0
75043: ST_TO_ADDR
// hc_class := class_phororhacos ;
75044: LD_ADDR_OWVAR 28
75048: PUSH
75049: LD_INT 18
75051: ST_TO_ADDR
// hc_gallery :=  ;
75052: LD_ADDR_OWVAR 33
75056: PUSH
75057: LD_STRING 
75059: ST_TO_ADDR
// end ;
75060: LD_VAR 0 1
75064: RET
// export function PrepareHorse ( ) ; begin
75065: LD_INT 0
75067: PPUSH
// uc_side := 0 ;
75068: LD_ADDR_OWVAR 20
75072: PUSH
75073: LD_INT 0
75075: ST_TO_ADDR
// uc_nation := 0 ;
75076: LD_ADDR_OWVAR 21
75080: PUSH
75081: LD_INT 0
75083: ST_TO_ADDR
// hc_class := class_horse ;
75084: LD_ADDR_OWVAR 28
75088: PUSH
75089: LD_INT 21
75091: ST_TO_ADDR
// hc_gallery :=  ;
75092: LD_ADDR_OWVAR 33
75096: PUSH
75097: LD_STRING 
75099: ST_TO_ADDR
// end ;
75100: LD_VAR 0 1
75104: RET
// export function PrepareMastodont ( ) ; begin
75105: LD_INT 0
75107: PPUSH
// uc_side := 0 ;
75108: LD_ADDR_OWVAR 20
75112: PUSH
75113: LD_INT 0
75115: ST_TO_ADDR
// uc_nation := 0 ;
75116: LD_ADDR_OWVAR 21
75120: PUSH
75121: LD_INT 0
75123: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75124: LD_ADDR_OWVAR 37
75128: PUSH
75129: LD_INT 31
75131: ST_TO_ADDR
// vc_control := control_rider ;
75132: LD_ADDR_OWVAR 38
75136: PUSH
75137: LD_INT 4
75139: ST_TO_ADDR
// end ;
75140: LD_VAR 0 1
75144: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75145: LD_INT 0
75147: PPUSH
75148: PPUSH
75149: PPUSH
// uc_side = 0 ;
75150: LD_ADDR_OWVAR 20
75154: PUSH
75155: LD_INT 0
75157: ST_TO_ADDR
// uc_nation = 0 ;
75158: LD_ADDR_OWVAR 21
75162: PUSH
75163: LD_INT 0
75165: ST_TO_ADDR
// InitHc_All ( ) ;
75166: CALL_OW 584
// InitVc ;
75170: CALL_OW 20
// if mastodonts then
75174: LD_VAR 0 6
75178: IFFALSE 75245
// for i = 1 to mastodonts do
75180: LD_ADDR_VAR 0 11
75184: PUSH
75185: DOUBLE
75186: LD_INT 1
75188: DEC
75189: ST_TO_ADDR
75190: LD_VAR 0 6
75194: PUSH
75195: FOR_TO
75196: IFFALSE 75243
// begin vc_chassis := 31 ;
75198: LD_ADDR_OWVAR 37
75202: PUSH
75203: LD_INT 31
75205: ST_TO_ADDR
// vc_control := control_rider ;
75206: LD_ADDR_OWVAR 38
75210: PUSH
75211: LD_INT 4
75213: ST_TO_ADDR
// animal := CreateVehicle ;
75214: LD_ADDR_VAR 0 12
75218: PUSH
75219: CALL_OW 45
75223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75224: LD_VAR 0 12
75228: PPUSH
75229: LD_VAR 0 8
75233: PPUSH
75234: LD_INT 0
75236: PPUSH
75237: CALL 77380 0 3
// end ;
75241: GO 75195
75243: POP
75244: POP
// if horses then
75245: LD_VAR 0 5
75249: IFFALSE 75316
// for i = 1 to horses do
75251: LD_ADDR_VAR 0 11
75255: PUSH
75256: DOUBLE
75257: LD_INT 1
75259: DEC
75260: ST_TO_ADDR
75261: LD_VAR 0 5
75265: PUSH
75266: FOR_TO
75267: IFFALSE 75314
// begin hc_class := 21 ;
75269: LD_ADDR_OWVAR 28
75273: PUSH
75274: LD_INT 21
75276: ST_TO_ADDR
// hc_gallery :=  ;
75277: LD_ADDR_OWVAR 33
75281: PUSH
75282: LD_STRING 
75284: ST_TO_ADDR
// animal := CreateHuman ;
75285: LD_ADDR_VAR 0 12
75289: PUSH
75290: CALL_OW 44
75294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75295: LD_VAR 0 12
75299: PPUSH
75300: LD_VAR 0 8
75304: PPUSH
75305: LD_INT 0
75307: PPUSH
75308: CALL 77380 0 3
// end ;
75312: GO 75266
75314: POP
75315: POP
// if birds then
75316: LD_VAR 0 1
75320: IFFALSE 75387
// for i = 1 to birds do
75322: LD_ADDR_VAR 0 11
75326: PUSH
75327: DOUBLE
75328: LD_INT 1
75330: DEC
75331: ST_TO_ADDR
75332: LD_VAR 0 1
75336: PUSH
75337: FOR_TO
75338: IFFALSE 75385
// begin hc_class = 18 ;
75340: LD_ADDR_OWVAR 28
75344: PUSH
75345: LD_INT 18
75347: ST_TO_ADDR
// hc_gallery =  ;
75348: LD_ADDR_OWVAR 33
75352: PUSH
75353: LD_STRING 
75355: ST_TO_ADDR
// animal := CreateHuman ;
75356: LD_ADDR_VAR 0 12
75360: PUSH
75361: CALL_OW 44
75365: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75366: LD_VAR 0 12
75370: PPUSH
75371: LD_VAR 0 8
75375: PPUSH
75376: LD_INT 0
75378: PPUSH
75379: CALL 77380 0 3
// end ;
75383: GO 75337
75385: POP
75386: POP
// if tigers then
75387: LD_VAR 0 2
75391: IFFALSE 75475
// for i = 1 to tigers do
75393: LD_ADDR_VAR 0 11
75397: PUSH
75398: DOUBLE
75399: LD_INT 1
75401: DEC
75402: ST_TO_ADDR
75403: LD_VAR 0 2
75407: PUSH
75408: FOR_TO
75409: IFFALSE 75473
// begin hc_class = class_tiger ;
75411: LD_ADDR_OWVAR 28
75415: PUSH
75416: LD_INT 14
75418: ST_TO_ADDR
// hc_gallery =  ;
75419: LD_ADDR_OWVAR 33
75423: PUSH
75424: LD_STRING 
75426: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75427: LD_ADDR_OWVAR 35
75431: PUSH
75432: LD_INT 7
75434: NEG
75435: PPUSH
75436: LD_INT 7
75438: PPUSH
75439: CALL_OW 12
75443: ST_TO_ADDR
// animal := CreateHuman ;
75444: LD_ADDR_VAR 0 12
75448: PUSH
75449: CALL_OW 44
75453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75454: LD_VAR 0 12
75458: PPUSH
75459: LD_VAR 0 8
75463: PPUSH
75464: LD_INT 0
75466: PPUSH
75467: CALL 77380 0 3
// end ;
75471: GO 75408
75473: POP
75474: POP
// if apemans then
75475: LD_VAR 0 3
75479: IFFALSE 75602
// for i = 1 to apemans do
75481: LD_ADDR_VAR 0 11
75485: PUSH
75486: DOUBLE
75487: LD_INT 1
75489: DEC
75490: ST_TO_ADDR
75491: LD_VAR 0 3
75495: PUSH
75496: FOR_TO
75497: IFFALSE 75600
// begin hc_class = class_apeman ;
75499: LD_ADDR_OWVAR 28
75503: PUSH
75504: LD_INT 12
75506: ST_TO_ADDR
// hc_gallery =  ;
75507: LD_ADDR_OWVAR 33
75511: PUSH
75512: LD_STRING 
75514: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75515: LD_ADDR_OWVAR 35
75519: PUSH
75520: LD_INT 2
75522: NEG
75523: PPUSH
75524: LD_INT 2
75526: PPUSH
75527: CALL_OW 12
75531: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75532: LD_ADDR_OWVAR 31
75536: PUSH
75537: LD_INT 1
75539: PPUSH
75540: LD_INT 3
75542: PPUSH
75543: CALL_OW 12
75547: PUSH
75548: LD_INT 1
75550: PPUSH
75551: LD_INT 3
75553: PPUSH
75554: CALL_OW 12
75558: PUSH
75559: LD_INT 0
75561: PUSH
75562: LD_INT 0
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: ST_TO_ADDR
// animal := CreateHuman ;
75571: LD_ADDR_VAR 0 12
75575: PUSH
75576: CALL_OW 44
75580: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75581: LD_VAR 0 12
75585: PPUSH
75586: LD_VAR 0 8
75590: PPUSH
75591: LD_INT 0
75593: PPUSH
75594: CALL 77380 0 3
// end ;
75598: GO 75496
75600: POP
75601: POP
// if enchidnas then
75602: LD_VAR 0 4
75606: IFFALSE 75673
// for i = 1 to enchidnas do
75608: LD_ADDR_VAR 0 11
75612: PUSH
75613: DOUBLE
75614: LD_INT 1
75616: DEC
75617: ST_TO_ADDR
75618: LD_VAR 0 4
75622: PUSH
75623: FOR_TO
75624: IFFALSE 75671
// begin hc_class = 13 ;
75626: LD_ADDR_OWVAR 28
75630: PUSH
75631: LD_INT 13
75633: ST_TO_ADDR
// hc_gallery =  ;
75634: LD_ADDR_OWVAR 33
75638: PUSH
75639: LD_STRING 
75641: ST_TO_ADDR
// animal := CreateHuman ;
75642: LD_ADDR_VAR 0 12
75646: PUSH
75647: CALL_OW 44
75651: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75652: LD_VAR 0 12
75656: PPUSH
75657: LD_VAR 0 8
75661: PPUSH
75662: LD_INT 0
75664: PPUSH
75665: CALL 77380 0 3
// end ;
75669: GO 75623
75671: POP
75672: POP
// if fishes then
75673: LD_VAR 0 7
75677: IFFALSE 75744
// for i = 1 to fishes do
75679: LD_ADDR_VAR 0 11
75683: PUSH
75684: DOUBLE
75685: LD_INT 1
75687: DEC
75688: ST_TO_ADDR
75689: LD_VAR 0 7
75693: PUSH
75694: FOR_TO
75695: IFFALSE 75742
// begin hc_class = 20 ;
75697: LD_ADDR_OWVAR 28
75701: PUSH
75702: LD_INT 20
75704: ST_TO_ADDR
// hc_gallery =  ;
75705: LD_ADDR_OWVAR 33
75709: PUSH
75710: LD_STRING 
75712: ST_TO_ADDR
// animal := CreateHuman ;
75713: LD_ADDR_VAR 0 12
75717: PUSH
75718: CALL_OW 44
75722: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75723: LD_VAR 0 12
75727: PPUSH
75728: LD_VAR 0 9
75732: PPUSH
75733: LD_INT 0
75735: PPUSH
75736: CALL 77380 0 3
// end ;
75740: GO 75694
75742: POP
75743: POP
// end ;
75744: LD_VAR 0 10
75748: RET
// export function WantHeal ( sci , unit ) ; begin
75749: LD_INT 0
75751: PPUSH
// if GetTaskList ( sci ) > 0 then
75752: LD_VAR 0 1
75756: PPUSH
75757: CALL_OW 437
75761: PUSH
75762: LD_INT 0
75764: GREATER
75765: IFFALSE 75835
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75767: LD_VAR 0 1
75771: PPUSH
75772: CALL_OW 437
75776: PUSH
75777: LD_INT 1
75779: ARRAY
75780: PUSH
75781: LD_INT 1
75783: ARRAY
75784: PUSH
75785: LD_STRING l
75787: EQUAL
75788: PUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL_OW 437
75798: PUSH
75799: LD_INT 1
75801: ARRAY
75802: PUSH
75803: LD_INT 4
75805: ARRAY
75806: PUSH
75807: LD_VAR 0 2
75811: EQUAL
75812: AND
75813: IFFALSE 75825
// result := true else
75815: LD_ADDR_VAR 0 3
75819: PUSH
75820: LD_INT 1
75822: ST_TO_ADDR
75823: GO 75833
// result := false ;
75825: LD_ADDR_VAR 0 3
75829: PUSH
75830: LD_INT 0
75832: ST_TO_ADDR
// end else
75833: GO 75843
// result := false ;
75835: LD_ADDR_VAR 0 3
75839: PUSH
75840: LD_INT 0
75842: ST_TO_ADDR
// end ;
75843: LD_VAR 0 3
75847: RET
// export function HealTarget ( sci ) ; begin
75848: LD_INT 0
75850: PPUSH
// if not sci then
75851: LD_VAR 0 1
75855: NOT
75856: IFFALSE 75860
// exit ;
75858: GO 75925
// result := 0 ;
75860: LD_ADDR_VAR 0 2
75864: PUSH
75865: LD_INT 0
75867: ST_TO_ADDR
// if GetTaskList ( sci ) then
75868: LD_VAR 0 1
75872: PPUSH
75873: CALL_OW 437
75877: IFFALSE 75925
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75879: LD_VAR 0 1
75883: PPUSH
75884: CALL_OW 437
75888: PUSH
75889: LD_INT 1
75891: ARRAY
75892: PUSH
75893: LD_INT 1
75895: ARRAY
75896: PUSH
75897: LD_STRING l
75899: EQUAL
75900: IFFALSE 75925
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75902: LD_ADDR_VAR 0 2
75906: PUSH
75907: LD_VAR 0 1
75911: PPUSH
75912: CALL_OW 437
75916: PUSH
75917: LD_INT 1
75919: ARRAY
75920: PUSH
75921: LD_INT 4
75923: ARRAY
75924: ST_TO_ADDR
// end ;
75925: LD_VAR 0 2
75929: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75930: LD_INT 0
75932: PPUSH
75933: PPUSH
75934: PPUSH
75935: PPUSH
// if not base_units then
75936: LD_VAR 0 1
75940: NOT
75941: IFFALSE 75945
// exit ;
75943: GO 76032
// result := false ;
75945: LD_ADDR_VAR 0 2
75949: PUSH
75950: LD_INT 0
75952: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75953: LD_ADDR_VAR 0 5
75957: PUSH
75958: LD_VAR 0 1
75962: PPUSH
75963: LD_INT 21
75965: PUSH
75966: LD_INT 3
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: PPUSH
75973: CALL_OW 72
75977: ST_TO_ADDR
// if not tmp then
75978: LD_VAR 0 5
75982: NOT
75983: IFFALSE 75987
// exit ;
75985: GO 76032
// for i in tmp do
75987: LD_ADDR_VAR 0 3
75991: PUSH
75992: LD_VAR 0 5
75996: PUSH
75997: FOR_IN
75998: IFFALSE 76030
// begin result := EnemyInRange ( i , 22 ) ;
76000: LD_ADDR_VAR 0 2
76004: PUSH
76005: LD_VAR 0 3
76009: PPUSH
76010: LD_INT 22
76012: PPUSH
76013: CALL 73645 0 2
76017: ST_TO_ADDR
// if result then
76018: LD_VAR 0 2
76022: IFFALSE 76028
// exit ;
76024: POP
76025: POP
76026: GO 76032
// end ;
76028: GO 75997
76030: POP
76031: POP
// end ;
76032: LD_VAR 0 2
76036: RET
// export function FilterByTag ( units , tag ) ; begin
76037: LD_INT 0
76039: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76040: LD_ADDR_VAR 0 3
76044: PUSH
76045: LD_VAR 0 1
76049: PPUSH
76050: LD_INT 120
76052: PUSH
76053: LD_VAR 0 2
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: PPUSH
76062: CALL_OW 72
76066: ST_TO_ADDR
// end ;
76067: LD_VAR 0 3
76071: RET
// export function IsDriver ( un ) ; begin
76072: LD_INT 0
76074: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76075: LD_ADDR_VAR 0 2
76079: PUSH
76080: LD_VAR 0 1
76084: PUSH
76085: LD_INT 55
76087: PUSH
76088: EMPTY
76089: LIST
76090: PPUSH
76091: CALL_OW 69
76095: IN
76096: ST_TO_ADDR
// end ;
76097: LD_VAR 0 2
76101: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76102: LD_INT 0
76104: PPUSH
76105: PPUSH
// list := [ ] ;
76106: LD_ADDR_VAR 0 5
76110: PUSH
76111: EMPTY
76112: ST_TO_ADDR
// case d of 0 :
76113: LD_VAR 0 3
76117: PUSH
76118: LD_INT 0
76120: DOUBLE
76121: EQUAL
76122: IFTRUE 76126
76124: GO 76259
76126: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76127: LD_ADDR_VAR 0 5
76131: PUSH
76132: LD_VAR 0 1
76136: PUSH
76137: LD_INT 4
76139: MINUS
76140: PUSH
76141: LD_VAR 0 2
76145: PUSH
76146: LD_INT 4
76148: MINUS
76149: PUSH
76150: LD_INT 2
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: LIST
76157: PUSH
76158: LD_VAR 0 1
76162: PUSH
76163: LD_INT 3
76165: MINUS
76166: PUSH
76167: LD_VAR 0 2
76171: PUSH
76172: LD_INT 1
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: LIST
76179: PUSH
76180: LD_VAR 0 1
76184: PUSH
76185: LD_INT 4
76187: PLUS
76188: PUSH
76189: LD_VAR 0 2
76193: PUSH
76194: LD_INT 4
76196: PUSH
76197: EMPTY
76198: LIST
76199: LIST
76200: LIST
76201: PUSH
76202: LD_VAR 0 1
76206: PUSH
76207: LD_INT 3
76209: PLUS
76210: PUSH
76211: LD_VAR 0 2
76215: PUSH
76216: LD_INT 3
76218: PLUS
76219: PUSH
76220: LD_INT 5
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: LIST
76227: PUSH
76228: LD_VAR 0 1
76232: PUSH
76233: LD_VAR 0 2
76237: PUSH
76238: LD_INT 4
76240: PLUS
76241: PUSH
76242: LD_INT 0
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: LIST
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: ST_TO_ADDR
// end ; 1 :
76257: GO 76957
76259: LD_INT 1
76261: DOUBLE
76262: EQUAL
76263: IFTRUE 76267
76265: GO 76400
76267: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76268: LD_ADDR_VAR 0 5
76272: PUSH
76273: LD_VAR 0 1
76277: PUSH
76278: LD_VAR 0 2
76282: PUSH
76283: LD_INT 4
76285: MINUS
76286: PUSH
76287: LD_INT 3
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: LIST
76294: PUSH
76295: LD_VAR 0 1
76299: PUSH
76300: LD_INT 3
76302: MINUS
76303: PUSH
76304: LD_VAR 0 2
76308: PUSH
76309: LD_INT 3
76311: MINUS
76312: PUSH
76313: LD_INT 2
76315: PUSH
76316: EMPTY
76317: LIST
76318: LIST
76319: LIST
76320: PUSH
76321: LD_VAR 0 1
76325: PUSH
76326: LD_INT 4
76328: MINUS
76329: PUSH
76330: LD_VAR 0 2
76334: PUSH
76335: LD_INT 1
76337: PUSH
76338: EMPTY
76339: LIST
76340: LIST
76341: LIST
76342: PUSH
76343: LD_VAR 0 1
76347: PUSH
76348: LD_VAR 0 2
76352: PUSH
76353: LD_INT 3
76355: PLUS
76356: PUSH
76357: LD_INT 0
76359: PUSH
76360: EMPTY
76361: LIST
76362: LIST
76363: LIST
76364: PUSH
76365: LD_VAR 0 1
76369: PUSH
76370: LD_INT 4
76372: PLUS
76373: PUSH
76374: LD_VAR 0 2
76378: PUSH
76379: LD_INT 4
76381: PLUS
76382: PUSH
76383: LD_INT 5
76385: PUSH
76386: EMPTY
76387: LIST
76388: LIST
76389: LIST
76390: PUSH
76391: EMPTY
76392: LIST
76393: LIST
76394: LIST
76395: LIST
76396: LIST
76397: ST_TO_ADDR
// end ; 2 :
76398: GO 76957
76400: LD_INT 2
76402: DOUBLE
76403: EQUAL
76404: IFTRUE 76408
76406: GO 76537
76408: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76409: LD_ADDR_VAR 0 5
76413: PUSH
76414: LD_VAR 0 1
76418: PUSH
76419: LD_VAR 0 2
76423: PUSH
76424: LD_INT 3
76426: MINUS
76427: PUSH
76428: LD_INT 3
76430: PUSH
76431: EMPTY
76432: LIST
76433: LIST
76434: LIST
76435: PUSH
76436: LD_VAR 0 1
76440: PUSH
76441: LD_INT 4
76443: PLUS
76444: PUSH
76445: LD_VAR 0 2
76449: PUSH
76450: LD_INT 4
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: LIST
76457: PUSH
76458: LD_VAR 0 1
76462: PUSH
76463: LD_VAR 0 2
76467: PUSH
76468: LD_INT 4
76470: PLUS
76471: PUSH
76472: LD_INT 0
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: LIST
76479: PUSH
76480: LD_VAR 0 1
76484: PUSH
76485: LD_INT 3
76487: MINUS
76488: PUSH
76489: LD_VAR 0 2
76493: PUSH
76494: LD_INT 1
76496: PUSH
76497: EMPTY
76498: LIST
76499: LIST
76500: LIST
76501: PUSH
76502: LD_VAR 0 1
76506: PUSH
76507: LD_INT 4
76509: MINUS
76510: PUSH
76511: LD_VAR 0 2
76515: PUSH
76516: LD_INT 4
76518: MINUS
76519: PUSH
76520: LD_INT 2
76522: PUSH
76523: EMPTY
76524: LIST
76525: LIST
76526: LIST
76527: PUSH
76528: EMPTY
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: ST_TO_ADDR
// end ; 3 :
76535: GO 76957
76537: LD_INT 3
76539: DOUBLE
76540: EQUAL
76541: IFTRUE 76545
76543: GO 76678
76545: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76546: LD_ADDR_VAR 0 5
76550: PUSH
76551: LD_VAR 0 1
76555: PUSH
76556: LD_INT 3
76558: PLUS
76559: PUSH
76560: LD_VAR 0 2
76564: PUSH
76565: LD_INT 4
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: LIST
76572: PUSH
76573: LD_VAR 0 1
76577: PUSH
76578: LD_INT 4
76580: PLUS
76581: PUSH
76582: LD_VAR 0 2
76586: PUSH
76587: LD_INT 4
76589: PLUS
76590: PUSH
76591: LD_INT 5
76593: PUSH
76594: EMPTY
76595: LIST
76596: LIST
76597: LIST
76598: PUSH
76599: LD_VAR 0 1
76603: PUSH
76604: LD_INT 4
76606: MINUS
76607: PUSH
76608: LD_VAR 0 2
76612: PUSH
76613: LD_INT 1
76615: PUSH
76616: EMPTY
76617: LIST
76618: LIST
76619: LIST
76620: PUSH
76621: LD_VAR 0 1
76625: PUSH
76626: LD_VAR 0 2
76630: PUSH
76631: LD_INT 4
76633: MINUS
76634: PUSH
76635: LD_INT 3
76637: PUSH
76638: EMPTY
76639: LIST
76640: LIST
76641: LIST
76642: PUSH
76643: LD_VAR 0 1
76647: PUSH
76648: LD_INT 3
76650: MINUS
76651: PUSH
76652: LD_VAR 0 2
76656: PUSH
76657: LD_INT 3
76659: MINUS
76660: PUSH
76661: LD_INT 2
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: LIST
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: ST_TO_ADDR
// end ; 4 :
76676: GO 76957
76678: LD_INT 4
76680: DOUBLE
76681: EQUAL
76682: IFTRUE 76686
76684: GO 76819
76686: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76687: LD_ADDR_VAR 0 5
76691: PUSH
76692: LD_VAR 0 1
76696: PUSH
76697: LD_VAR 0 2
76701: PUSH
76702: LD_INT 4
76704: PLUS
76705: PUSH
76706: LD_INT 0
76708: PUSH
76709: EMPTY
76710: LIST
76711: LIST
76712: LIST
76713: PUSH
76714: LD_VAR 0 1
76718: PUSH
76719: LD_INT 3
76721: PLUS
76722: PUSH
76723: LD_VAR 0 2
76727: PUSH
76728: LD_INT 3
76730: PLUS
76731: PUSH
76732: LD_INT 5
76734: PUSH
76735: EMPTY
76736: LIST
76737: LIST
76738: LIST
76739: PUSH
76740: LD_VAR 0 1
76744: PUSH
76745: LD_INT 4
76747: PLUS
76748: PUSH
76749: LD_VAR 0 2
76753: PUSH
76754: LD_INT 4
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: LIST
76761: PUSH
76762: LD_VAR 0 1
76766: PUSH
76767: LD_VAR 0 2
76771: PUSH
76772: LD_INT 3
76774: MINUS
76775: PUSH
76776: LD_INT 3
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: LIST
76783: PUSH
76784: LD_VAR 0 1
76788: PUSH
76789: LD_INT 4
76791: MINUS
76792: PUSH
76793: LD_VAR 0 2
76797: PUSH
76798: LD_INT 4
76800: MINUS
76801: PUSH
76802: LD_INT 2
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: LIST
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: LIST
76814: LIST
76815: LIST
76816: ST_TO_ADDR
// end ; 5 :
76817: GO 76957
76819: LD_INT 5
76821: DOUBLE
76822: EQUAL
76823: IFTRUE 76827
76825: GO 76956
76827: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76828: LD_ADDR_VAR 0 5
76832: PUSH
76833: LD_VAR 0 1
76837: PUSH
76838: LD_INT 4
76840: MINUS
76841: PUSH
76842: LD_VAR 0 2
76846: PUSH
76847: LD_INT 1
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: LIST
76854: PUSH
76855: LD_VAR 0 1
76859: PUSH
76860: LD_VAR 0 2
76864: PUSH
76865: LD_INT 4
76867: MINUS
76868: PUSH
76869: LD_INT 3
76871: PUSH
76872: EMPTY
76873: LIST
76874: LIST
76875: LIST
76876: PUSH
76877: LD_VAR 0 1
76881: PUSH
76882: LD_INT 4
76884: PLUS
76885: PUSH
76886: LD_VAR 0 2
76890: PUSH
76891: LD_INT 4
76893: PLUS
76894: PUSH
76895: LD_INT 5
76897: PUSH
76898: EMPTY
76899: LIST
76900: LIST
76901: LIST
76902: PUSH
76903: LD_VAR 0 1
76907: PUSH
76908: LD_INT 3
76910: PLUS
76911: PUSH
76912: LD_VAR 0 2
76916: PUSH
76917: LD_INT 4
76919: PUSH
76920: EMPTY
76921: LIST
76922: LIST
76923: LIST
76924: PUSH
76925: LD_VAR 0 1
76929: PUSH
76930: LD_VAR 0 2
76934: PUSH
76935: LD_INT 3
76937: PLUS
76938: PUSH
76939: LD_INT 0
76941: PUSH
76942: EMPTY
76943: LIST
76944: LIST
76945: LIST
76946: PUSH
76947: EMPTY
76948: LIST
76949: LIST
76950: LIST
76951: LIST
76952: LIST
76953: ST_TO_ADDR
// end ; end ;
76954: GO 76957
76956: POP
// result := list ;
76957: LD_ADDR_VAR 0 4
76961: PUSH
76962: LD_VAR 0 5
76966: ST_TO_ADDR
// end ;
76967: LD_VAR 0 4
76971: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76972: LD_INT 0
76974: PPUSH
76975: PPUSH
76976: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76977: LD_VAR 0 1
76981: NOT
76982: PUSH
76983: LD_VAR 0 2
76987: PUSH
76988: LD_INT 1
76990: PUSH
76991: LD_INT 2
76993: PUSH
76994: LD_INT 3
76996: PUSH
76997: LD_INT 4
76999: PUSH
77000: EMPTY
77001: LIST
77002: LIST
77003: LIST
77004: LIST
77005: IN
77006: NOT
77007: OR
77008: IFFALSE 77012
// exit ;
77010: GO 77104
// tmp := [ ] ;
77012: LD_ADDR_VAR 0 5
77016: PUSH
77017: EMPTY
77018: ST_TO_ADDR
// for i in units do
77019: LD_ADDR_VAR 0 4
77023: PUSH
77024: LD_VAR 0 1
77028: PUSH
77029: FOR_IN
77030: IFFALSE 77073
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
77032: LD_ADDR_VAR 0 5
77036: PUSH
77037: LD_VAR 0 5
77041: PPUSH
77042: LD_VAR 0 5
77046: PUSH
77047: LD_INT 1
77049: PLUS
77050: PPUSH
77051: LD_VAR 0 4
77055: PPUSH
77056: LD_VAR 0 2
77060: PPUSH
77061: CALL_OW 259
77065: PPUSH
77066: CALL_OW 2
77070: ST_TO_ADDR
77071: GO 77029
77073: POP
77074: POP
// if not tmp then
77075: LD_VAR 0 5
77079: NOT
77080: IFFALSE 77084
// exit ;
77082: GO 77104
// result := SortListByListDesc ( units , tmp ) ;
77084: LD_ADDR_VAR 0 3
77088: PUSH
77089: LD_VAR 0 1
77093: PPUSH
77094: LD_VAR 0 5
77098: PPUSH
77099: CALL_OW 77
77103: ST_TO_ADDR
// end ;
77104: LD_VAR 0 3
77108: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77109: LD_INT 0
77111: PPUSH
77112: PPUSH
77113: PPUSH
// result := false ;
77114: LD_ADDR_VAR 0 3
77118: PUSH
77119: LD_INT 0
77121: ST_TO_ADDR
// x := GetX ( building ) ;
77122: LD_ADDR_VAR 0 4
77126: PUSH
77127: LD_VAR 0 2
77131: PPUSH
77132: CALL_OW 250
77136: ST_TO_ADDR
// y := GetY ( building ) ;
77137: LD_ADDR_VAR 0 5
77141: PUSH
77142: LD_VAR 0 2
77146: PPUSH
77147: CALL_OW 251
77151: ST_TO_ADDR
// if not building or not x or not y then
77152: LD_VAR 0 2
77156: NOT
77157: PUSH
77158: LD_VAR 0 4
77162: NOT
77163: OR
77164: PUSH
77165: LD_VAR 0 5
77169: NOT
77170: OR
77171: IFFALSE 77175
// exit ;
77173: GO 77267
// if GetTaskList ( unit ) then
77175: LD_VAR 0 1
77179: PPUSH
77180: CALL_OW 437
77184: IFFALSE 77267
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77186: LD_STRING e
77188: PUSH
77189: LD_VAR 0 1
77193: PPUSH
77194: CALL_OW 437
77198: PUSH
77199: LD_INT 1
77201: ARRAY
77202: PUSH
77203: LD_INT 1
77205: ARRAY
77206: EQUAL
77207: PUSH
77208: LD_VAR 0 4
77212: PUSH
77213: LD_VAR 0 1
77217: PPUSH
77218: CALL_OW 437
77222: PUSH
77223: LD_INT 1
77225: ARRAY
77226: PUSH
77227: LD_INT 2
77229: ARRAY
77230: EQUAL
77231: AND
77232: PUSH
77233: LD_VAR 0 5
77237: PUSH
77238: LD_VAR 0 1
77242: PPUSH
77243: CALL_OW 437
77247: PUSH
77248: LD_INT 1
77250: ARRAY
77251: PUSH
77252: LD_INT 3
77254: ARRAY
77255: EQUAL
77256: AND
77257: IFFALSE 77267
// result := true end ;
77259: LD_ADDR_VAR 0 3
77263: PUSH
77264: LD_INT 1
77266: ST_TO_ADDR
// end ;
77267: LD_VAR 0 3
77271: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77272: LD_INT 0
77274: PPUSH
// result := false ;
77275: LD_ADDR_VAR 0 4
77279: PUSH
77280: LD_INT 0
77282: ST_TO_ADDR
// if GetTaskList ( unit ) then
77283: LD_VAR 0 1
77287: PPUSH
77288: CALL_OW 437
77292: IFFALSE 77375
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77294: LD_STRING M
77296: PUSH
77297: LD_VAR 0 1
77301: PPUSH
77302: CALL_OW 437
77306: PUSH
77307: LD_INT 1
77309: ARRAY
77310: PUSH
77311: LD_INT 1
77313: ARRAY
77314: EQUAL
77315: PUSH
77316: LD_VAR 0 2
77320: PUSH
77321: LD_VAR 0 1
77325: PPUSH
77326: CALL_OW 437
77330: PUSH
77331: LD_INT 1
77333: ARRAY
77334: PUSH
77335: LD_INT 2
77337: ARRAY
77338: EQUAL
77339: AND
77340: PUSH
77341: LD_VAR 0 3
77345: PUSH
77346: LD_VAR 0 1
77350: PPUSH
77351: CALL_OW 437
77355: PUSH
77356: LD_INT 1
77358: ARRAY
77359: PUSH
77360: LD_INT 3
77362: ARRAY
77363: EQUAL
77364: AND
77365: IFFALSE 77375
// result := true ;
77367: LD_ADDR_VAR 0 4
77371: PUSH
77372: LD_INT 1
77374: ST_TO_ADDR
// end ; end ;
77375: LD_VAR 0 4
77379: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77380: LD_INT 0
77382: PPUSH
77383: PPUSH
77384: PPUSH
77385: PPUSH
// if not unit or not area then
77386: LD_VAR 0 1
77390: NOT
77391: PUSH
77392: LD_VAR 0 2
77396: NOT
77397: OR
77398: IFFALSE 77402
// exit ;
77400: GO 77566
// tmp := AreaToList ( area , i ) ;
77402: LD_ADDR_VAR 0 6
77406: PUSH
77407: LD_VAR 0 2
77411: PPUSH
77412: LD_VAR 0 5
77416: PPUSH
77417: CALL_OW 517
77421: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77422: LD_ADDR_VAR 0 5
77426: PUSH
77427: DOUBLE
77428: LD_INT 1
77430: DEC
77431: ST_TO_ADDR
77432: LD_VAR 0 6
77436: PUSH
77437: LD_INT 1
77439: ARRAY
77440: PUSH
77441: FOR_TO
77442: IFFALSE 77564
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77444: LD_ADDR_VAR 0 7
77448: PUSH
77449: LD_VAR 0 6
77453: PUSH
77454: LD_INT 1
77456: ARRAY
77457: PUSH
77458: LD_VAR 0 5
77462: ARRAY
77463: PUSH
77464: LD_VAR 0 6
77468: PUSH
77469: LD_INT 2
77471: ARRAY
77472: PUSH
77473: LD_VAR 0 5
77477: ARRAY
77478: PUSH
77479: EMPTY
77480: LIST
77481: LIST
77482: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77483: LD_VAR 0 7
77487: PUSH
77488: LD_INT 1
77490: ARRAY
77491: PPUSH
77492: LD_VAR 0 7
77496: PUSH
77497: LD_INT 2
77499: ARRAY
77500: PPUSH
77501: CALL_OW 428
77505: PUSH
77506: LD_INT 0
77508: EQUAL
77509: IFFALSE 77562
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77511: LD_VAR 0 1
77515: PPUSH
77516: LD_VAR 0 7
77520: PUSH
77521: LD_INT 1
77523: ARRAY
77524: PPUSH
77525: LD_VAR 0 7
77529: PUSH
77530: LD_INT 2
77532: ARRAY
77533: PPUSH
77534: LD_VAR 0 3
77538: PPUSH
77539: CALL_OW 48
// result := IsPlaced ( unit ) ;
77543: LD_ADDR_VAR 0 4
77547: PUSH
77548: LD_VAR 0 1
77552: PPUSH
77553: CALL_OW 305
77557: ST_TO_ADDR
// exit ;
77558: POP
77559: POP
77560: GO 77566
// end ; end ;
77562: GO 77441
77564: POP
77565: POP
// end ;
77566: LD_VAR 0 4
77570: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77571: LD_INT 0
77573: PPUSH
77574: PPUSH
77575: PPUSH
// if not side or side > 8 then
77576: LD_VAR 0 1
77580: NOT
77581: PUSH
77582: LD_VAR 0 1
77586: PUSH
77587: LD_INT 8
77589: GREATER
77590: OR
77591: IFFALSE 77595
// exit ;
77593: GO 77782
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77595: LD_ADDR_VAR 0 4
77599: PUSH
77600: LD_INT 22
77602: PUSH
77603: LD_VAR 0 1
77607: PUSH
77608: EMPTY
77609: LIST
77610: LIST
77611: PUSH
77612: LD_INT 21
77614: PUSH
77615: LD_INT 3
77617: PUSH
77618: EMPTY
77619: LIST
77620: LIST
77621: PUSH
77622: EMPTY
77623: LIST
77624: LIST
77625: PPUSH
77626: CALL_OW 69
77630: ST_TO_ADDR
// if not tmp then
77631: LD_VAR 0 4
77635: NOT
77636: IFFALSE 77640
// exit ;
77638: GO 77782
// enable_addtolog := true ;
77640: LD_ADDR_OWVAR 81
77644: PUSH
77645: LD_INT 1
77647: ST_TO_ADDR
// AddToLog ( [ ) ;
77648: LD_STRING [
77650: PPUSH
77651: CALL_OW 561
// for i in tmp do
77655: LD_ADDR_VAR 0 3
77659: PUSH
77660: LD_VAR 0 4
77664: PUSH
77665: FOR_IN
77666: IFFALSE 77773
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77668: LD_STRING [
77670: PUSH
77671: LD_VAR 0 3
77675: PPUSH
77676: CALL_OW 266
77680: STR
77681: PUSH
77682: LD_STRING , 
77684: STR
77685: PUSH
77686: LD_VAR 0 3
77690: PPUSH
77691: CALL_OW 250
77695: STR
77696: PUSH
77697: LD_STRING , 
77699: STR
77700: PUSH
77701: LD_VAR 0 3
77705: PPUSH
77706: CALL_OW 251
77710: STR
77711: PUSH
77712: LD_STRING , 
77714: STR
77715: PUSH
77716: LD_VAR 0 3
77720: PPUSH
77721: CALL_OW 254
77725: STR
77726: PUSH
77727: LD_STRING , 
77729: STR
77730: PUSH
77731: LD_VAR 0 3
77735: PPUSH
77736: LD_INT 1
77738: PPUSH
77739: CALL_OW 268
77743: STR
77744: PUSH
77745: LD_STRING , 
77747: STR
77748: PUSH
77749: LD_VAR 0 3
77753: PPUSH
77754: LD_INT 2
77756: PPUSH
77757: CALL_OW 268
77761: STR
77762: PUSH
77763: LD_STRING ],
77765: STR
77766: PPUSH
77767: CALL_OW 561
// end ;
77771: GO 77665
77773: POP
77774: POP
// AddToLog ( ]; ) ;
77775: LD_STRING ];
77777: PPUSH
77778: CALL_OW 561
// end ;
77782: LD_VAR 0 2
77786: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77787: LD_INT 0
77789: PPUSH
77790: PPUSH
77791: PPUSH
77792: PPUSH
77793: PPUSH
// if not area or not rate or not max then
77794: LD_VAR 0 1
77798: NOT
77799: PUSH
77800: LD_VAR 0 2
77804: NOT
77805: OR
77806: PUSH
77807: LD_VAR 0 4
77811: NOT
77812: OR
77813: IFFALSE 77817
// exit ;
77815: GO 78006
// while 1 do
77817: LD_INT 1
77819: IFFALSE 78006
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77821: LD_ADDR_VAR 0 9
77825: PUSH
77826: LD_VAR 0 1
77830: PPUSH
77831: LD_INT 1
77833: PPUSH
77834: CALL_OW 287
77838: PUSH
77839: LD_INT 10
77841: MUL
77842: ST_TO_ADDR
// r := rate / 10 ;
77843: LD_ADDR_VAR 0 7
77847: PUSH
77848: LD_VAR 0 2
77852: PUSH
77853: LD_INT 10
77855: DIVREAL
77856: ST_TO_ADDR
// time := 1 1$00 ;
77857: LD_ADDR_VAR 0 8
77861: PUSH
77862: LD_INT 2100
77864: ST_TO_ADDR
// if amount < min then
77865: LD_VAR 0 9
77869: PUSH
77870: LD_VAR 0 3
77874: LESS
77875: IFFALSE 77893
// r := r * 2 else
77877: LD_ADDR_VAR 0 7
77881: PUSH
77882: LD_VAR 0 7
77886: PUSH
77887: LD_INT 2
77889: MUL
77890: ST_TO_ADDR
77891: GO 77919
// if amount > max then
77893: LD_VAR 0 9
77897: PUSH
77898: LD_VAR 0 4
77902: GREATER
77903: IFFALSE 77919
// r := r / 2 ;
77905: LD_ADDR_VAR 0 7
77909: PUSH
77910: LD_VAR 0 7
77914: PUSH
77915: LD_INT 2
77917: DIVREAL
77918: ST_TO_ADDR
// time := time / r ;
77919: LD_ADDR_VAR 0 8
77923: PUSH
77924: LD_VAR 0 8
77928: PUSH
77929: LD_VAR 0 7
77933: DIVREAL
77934: ST_TO_ADDR
// if time < 0 then
77935: LD_VAR 0 8
77939: PUSH
77940: LD_INT 0
77942: LESS
77943: IFFALSE 77960
// time := time * - 1 ;
77945: LD_ADDR_VAR 0 8
77949: PUSH
77950: LD_VAR 0 8
77954: PUSH
77955: LD_INT 1
77957: NEG
77958: MUL
77959: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77960: LD_VAR 0 8
77964: PUSH
77965: LD_INT 35
77967: PPUSH
77968: LD_INT 875
77970: PPUSH
77971: CALL_OW 12
77975: PLUS
77976: PPUSH
77977: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77981: LD_INT 1
77983: PPUSH
77984: LD_INT 5
77986: PPUSH
77987: CALL_OW 12
77991: PPUSH
77992: LD_VAR 0 1
77996: PPUSH
77997: LD_INT 1
77999: PPUSH
78000: CALL_OW 55
// end ;
78004: GO 77817
// end ;
78006: LD_VAR 0 5
78010: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78011: LD_INT 0
78013: PPUSH
78014: PPUSH
78015: PPUSH
78016: PPUSH
78017: PPUSH
78018: PPUSH
78019: PPUSH
78020: PPUSH
// if not turrets or not factories then
78021: LD_VAR 0 1
78025: NOT
78026: PUSH
78027: LD_VAR 0 2
78031: NOT
78032: OR
78033: IFFALSE 78037
// exit ;
78035: GO 78344
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78037: LD_ADDR_VAR 0 10
78041: PUSH
78042: LD_INT 5
78044: PUSH
78045: LD_INT 6
78047: PUSH
78048: EMPTY
78049: LIST
78050: LIST
78051: PUSH
78052: LD_INT 2
78054: PUSH
78055: LD_INT 4
78057: PUSH
78058: EMPTY
78059: LIST
78060: LIST
78061: PUSH
78062: LD_INT 3
78064: PUSH
78065: LD_INT 5
78067: PUSH
78068: EMPTY
78069: LIST
78070: LIST
78071: PUSH
78072: EMPTY
78073: LIST
78074: LIST
78075: LIST
78076: PUSH
78077: LD_INT 24
78079: PUSH
78080: LD_INT 25
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: PUSH
78087: LD_INT 23
78089: PUSH
78090: LD_INT 27
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: PUSH
78097: EMPTY
78098: LIST
78099: LIST
78100: PUSH
78101: LD_INT 42
78103: PUSH
78104: LD_INT 43
78106: PUSH
78107: EMPTY
78108: LIST
78109: LIST
78110: PUSH
78111: LD_INT 44
78113: PUSH
78114: LD_INT 46
78116: PUSH
78117: EMPTY
78118: LIST
78119: LIST
78120: PUSH
78121: LD_INT 45
78123: PUSH
78124: LD_INT 47
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: PUSH
78131: EMPTY
78132: LIST
78133: LIST
78134: LIST
78135: PUSH
78136: EMPTY
78137: LIST
78138: LIST
78139: LIST
78140: ST_TO_ADDR
// result := [ ] ;
78141: LD_ADDR_VAR 0 3
78145: PUSH
78146: EMPTY
78147: ST_TO_ADDR
// for i in turrets do
78148: LD_ADDR_VAR 0 4
78152: PUSH
78153: LD_VAR 0 1
78157: PUSH
78158: FOR_IN
78159: IFFALSE 78342
// begin nat := GetNation ( i ) ;
78161: LD_ADDR_VAR 0 7
78165: PUSH
78166: LD_VAR 0 4
78170: PPUSH
78171: CALL_OW 248
78175: ST_TO_ADDR
// weapon := 0 ;
78176: LD_ADDR_VAR 0 8
78180: PUSH
78181: LD_INT 0
78183: ST_TO_ADDR
// if not nat then
78184: LD_VAR 0 7
78188: NOT
78189: IFFALSE 78193
// continue ;
78191: GO 78158
// for j in list [ nat ] do
78193: LD_ADDR_VAR 0 5
78197: PUSH
78198: LD_VAR 0 10
78202: PUSH
78203: LD_VAR 0 7
78207: ARRAY
78208: PUSH
78209: FOR_IN
78210: IFFALSE 78251
// if GetBWeapon ( i ) = j [ 1 ] then
78212: LD_VAR 0 4
78216: PPUSH
78217: CALL_OW 269
78221: PUSH
78222: LD_VAR 0 5
78226: PUSH
78227: LD_INT 1
78229: ARRAY
78230: EQUAL
78231: IFFALSE 78249
// begin weapon := j [ 2 ] ;
78233: LD_ADDR_VAR 0 8
78237: PUSH
78238: LD_VAR 0 5
78242: PUSH
78243: LD_INT 2
78245: ARRAY
78246: ST_TO_ADDR
// break ;
78247: GO 78251
// end ;
78249: GO 78209
78251: POP
78252: POP
// if not weapon then
78253: LD_VAR 0 8
78257: NOT
78258: IFFALSE 78262
// continue ;
78260: GO 78158
// for k in factories do
78262: LD_ADDR_VAR 0 6
78266: PUSH
78267: LD_VAR 0 2
78271: PUSH
78272: FOR_IN
78273: IFFALSE 78338
// begin weapons := AvailableWeaponList ( k ) ;
78275: LD_ADDR_VAR 0 9
78279: PUSH
78280: LD_VAR 0 6
78284: PPUSH
78285: CALL_OW 478
78289: ST_TO_ADDR
// if not weapons then
78290: LD_VAR 0 9
78294: NOT
78295: IFFALSE 78299
// continue ;
78297: GO 78272
// if weapon in weapons then
78299: LD_VAR 0 8
78303: PUSH
78304: LD_VAR 0 9
78308: IN
78309: IFFALSE 78336
// begin result := [ i , weapon ] ;
78311: LD_ADDR_VAR 0 3
78315: PUSH
78316: LD_VAR 0 4
78320: PUSH
78321: LD_VAR 0 8
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: ST_TO_ADDR
// exit ;
78330: POP
78331: POP
78332: POP
78333: POP
78334: GO 78344
// end ; end ;
78336: GO 78272
78338: POP
78339: POP
// end ;
78340: GO 78158
78342: POP
78343: POP
// end ;
78344: LD_VAR 0 3
78348: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78349: LD_INT 0
78351: PPUSH
// if not side or side > 8 then
78352: LD_VAR 0 3
78356: NOT
78357: PUSH
78358: LD_VAR 0 3
78362: PUSH
78363: LD_INT 8
78365: GREATER
78366: OR
78367: IFFALSE 78371
// exit ;
78369: GO 78430
// if not range then
78371: LD_VAR 0 4
78375: NOT
78376: IFFALSE 78387
// range := - 12 ;
78378: LD_ADDR_VAR 0 4
78382: PUSH
78383: LD_INT 12
78385: NEG
78386: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78387: LD_VAR 0 1
78391: PPUSH
78392: LD_VAR 0 2
78396: PPUSH
78397: LD_VAR 0 3
78401: PPUSH
78402: LD_VAR 0 4
78406: PPUSH
78407: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78411: LD_VAR 0 1
78415: PPUSH
78416: LD_VAR 0 2
78420: PPUSH
78421: LD_VAR 0 3
78425: PPUSH
78426: CALL_OW 331
// end ;
78430: LD_VAR 0 5
78434: RET
// export function Video ( mode ) ; begin
78435: LD_INT 0
78437: PPUSH
// ingame_video = mode ;
78438: LD_ADDR_OWVAR 52
78442: PUSH
78443: LD_VAR 0 1
78447: ST_TO_ADDR
// interface_hidden = mode ;
78448: LD_ADDR_OWVAR 54
78452: PUSH
78453: LD_VAR 0 1
78457: ST_TO_ADDR
// end ;
78458: LD_VAR 0 2
78462: RET
// export function Join ( array , element ) ; begin
78463: LD_INT 0
78465: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78466: LD_ADDR_VAR 0 3
78470: PUSH
78471: LD_VAR 0 1
78475: PPUSH
78476: LD_VAR 0 1
78480: PUSH
78481: LD_INT 1
78483: PLUS
78484: PPUSH
78485: LD_VAR 0 2
78489: PPUSH
78490: CALL_OW 1
78494: ST_TO_ADDR
// end ;
78495: LD_VAR 0 3
78499: RET
// export function JoinUnion ( array , element ) ; begin
78500: LD_INT 0
78502: PPUSH
// result := array union element ;
78503: LD_ADDR_VAR 0 3
78507: PUSH
78508: LD_VAR 0 1
78512: PUSH
78513: LD_VAR 0 2
78517: UNION
78518: ST_TO_ADDR
// end ;
78519: LD_VAR 0 3
78523: RET
// export function GetBehemoths ( side ) ; begin
78524: LD_INT 0
78526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78527: LD_ADDR_VAR 0 2
78531: PUSH
78532: LD_INT 22
78534: PUSH
78535: LD_VAR 0 1
78539: PUSH
78540: EMPTY
78541: LIST
78542: LIST
78543: PUSH
78544: LD_INT 31
78546: PUSH
78547: LD_INT 25
78549: PUSH
78550: EMPTY
78551: LIST
78552: LIST
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: PPUSH
78558: CALL_OW 69
78562: ST_TO_ADDR
// end ;
78563: LD_VAR 0 2
78567: RET
// export function Shuffle ( array ) ; var i , index ; begin
78568: LD_INT 0
78570: PPUSH
78571: PPUSH
78572: PPUSH
// result := [ ] ;
78573: LD_ADDR_VAR 0 2
78577: PUSH
78578: EMPTY
78579: ST_TO_ADDR
// if not array then
78580: LD_VAR 0 1
78584: NOT
78585: IFFALSE 78589
// exit ;
78587: GO 78688
// Randomize ;
78589: CALL_OW 10
// for i = array downto 1 do
78593: LD_ADDR_VAR 0 3
78597: PUSH
78598: DOUBLE
78599: LD_VAR 0 1
78603: INC
78604: ST_TO_ADDR
78605: LD_INT 1
78607: PUSH
78608: FOR_DOWNTO
78609: IFFALSE 78686
// begin index := rand ( 1 , array ) ;
78611: LD_ADDR_VAR 0 4
78615: PUSH
78616: LD_INT 1
78618: PPUSH
78619: LD_VAR 0 1
78623: PPUSH
78624: CALL_OW 12
78628: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78629: LD_ADDR_VAR 0 2
78633: PUSH
78634: LD_VAR 0 2
78638: PPUSH
78639: LD_VAR 0 2
78643: PUSH
78644: LD_INT 1
78646: PLUS
78647: PPUSH
78648: LD_VAR 0 1
78652: PUSH
78653: LD_VAR 0 4
78657: ARRAY
78658: PPUSH
78659: CALL_OW 2
78663: ST_TO_ADDR
// array := Delete ( array , index ) ;
78664: LD_ADDR_VAR 0 1
78668: PUSH
78669: LD_VAR 0 1
78673: PPUSH
78674: LD_VAR 0 4
78678: PPUSH
78679: CALL_OW 3
78683: ST_TO_ADDR
// end ;
78684: GO 78608
78686: POP
78687: POP
// end ;
78688: LD_VAR 0 2
78692: RET
// export function GetBaseMaterials ( base ) ; begin
78693: LD_INT 0
78695: PPUSH
// result := [ 0 , 0 , 0 ] ;
78696: LD_ADDR_VAR 0 2
78700: PUSH
78701: LD_INT 0
78703: PUSH
78704: LD_INT 0
78706: PUSH
78707: LD_INT 0
78709: PUSH
78710: EMPTY
78711: LIST
78712: LIST
78713: LIST
78714: ST_TO_ADDR
// if not base then
78715: LD_VAR 0 1
78719: NOT
78720: IFFALSE 78724
// exit ;
78722: GO 78773
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78724: LD_ADDR_VAR 0 2
78728: PUSH
78729: LD_VAR 0 1
78733: PPUSH
78734: LD_INT 1
78736: PPUSH
78737: CALL_OW 275
78741: PUSH
78742: LD_VAR 0 1
78746: PPUSH
78747: LD_INT 2
78749: PPUSH
78750: CALL_OW 275
78754: PUSH
78755: LD_VAR 0 1
78759: PPUSH
78760: LD_INT 3
78762: PPUSH
78763: CALL_OW 275
78767: PUSH
78768: EMPTY
78769: LIST
78770: LIST
78771: LIST
78772: ST_TO_ADDR
// end ;
78773: LD_VAR 0 2
78777: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78778: LD_INT 0
78780: PPUSH
78781: PPUSH
// result := array ;
78782: LD_ADDR_VAR 0 3
78786: PUSH
78787: LD_VAR 0 1
78791: ST_TO_ADDR
// if size >= result then
78792: LD_VAR 0 2
78796: PUSH
78797: LD_VAR 0 3
78801: GREATEREQUAL
78802: IFFALSE 78806
// exit ;
78804: GO 78856
// if size then
78806: LD_VAR 0 2
78810: IFFALSE 78856
// for i := array downto size do
78812: LD_ADDR_VAR 0 4
78816: PUSH
78817: DOUBLE
78818: LD_VAR 0 1
78822: INC
78823: ST_TO_ADDR
78824: LD_VAR 0 2
78828: PUSH
78829: FOR_DOWNTO
78830: IFFALSE 78854
// result := Delete ( result , result ) ;
78832: LD_ADDR_VAR 0 3
78836: PUSH
78837: LD_VAR 0 3
78841: PPUSH
78842: LD_VAR 0 3
78846: PPUSH
78847: CALL_OW 3
78851: ST_TO_ADDR
78852: GO 78829
78854: POP
78855: POP
// end ;
78856: LD_VAR 0 3
78860: RET
// export function ComExit ( unit ) ; var tmp ; begin
78861: LD_INT 0
78863: PPUSH
78864: PPUSH
// if not IsInUnit ( unit ) then
78865: LD_VAR 0 1
78869: PPUSH
78870: CALL_OW 310
78874: NOT
78875: IFFALSE 78879
// exit ;
78877: GO 78939
// tmp := IsInUnit ( unit ) ;
78879: LD_ADDR_VAR 0 3
78883: PUSH
78884: LD_VAR 0 1
78888: PPUSH
78889: CALL_OW 310
78893: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78894: LD_VAR 0 3
78898: PPUSH
78899: CALL_OW 247
78903: PUSH
78904: LD_INT 2
78906: EQUAL
78907: IFFALSE 78920
// ComExitVehicle ( unit ) else
78909: LD_VAR 0 1
78913: PPUSH
78914: CALL_OW 121
78918: GO 78929
// ComExitBuilding ( unit ) ;
78920: LD_VAR 0 1
78924: PPUSH
78925: CALL_OW 122
// result := tmp ;
78929: LD_ADDR_VAR 0 2
78933: PUSH
78934: LD_VAR 0 3
78938: ST_TO_ADDR
// end ;
78939: LD_VAR 0 2
78943: RET
// export function ComExitAll ( units ) ; var i ; begin
78944: LD_INT 0
78946: PPUSH
78947: PPUSH
// if not units then
78948: LD_VAR 0 1
78952: NOT
78953: IFFALSE 78957
// exit ;
78955: GO 78983
// for i in units do
78957: LD_ADDR_VAR 0 3
78961: PUSH
78962: LD_VAR 0 1
78966: PUSH
78967: FOR_IN
78968: IFFALSE 78981
// ComExit ( i ) ;
78970: LD_VAR 0 3
78974: PPUSH
78975: CALL 78861 0 1
78979: GO 78967
78981: POP
78982: POP
// end ;
78983: LD_VAR 0 2
78987: RET
// export function ResetHc ; begin
78988: LD_INT 0
78990: PPUSH
// InitHc ;
78991: CALL_OW 19
// hc_importance := 0 ;
78995: LD_ADDR_OWVAR 32
78999: PUSH
79000: LD_INT 0
79002: ST_TO_ADDR
// end ;
79003: LD_VAR 0 1
79007: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79008: LD_INT 0
79010: PPUSH
79011: PPUSH
79012: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79013: LD_ADDR_VAR 0 6
79017: PUSH
79018: LD_VAR 0 1
79022: PUSH
79023: LD_VAR 0 3
79027: PLUS
79028: PUSH
79029: LD_INT 2
79031: DIV
79032: ST_TO_ADDR
// if _x < 0 then
79033: LD_VAR 0 6
79037: PUSH
79038: LD_INT 0
79040: LESS
79041: IFFALSE 79058
// _x := _x * - 1 ;
79043: LD_ADDR_VAR 0 6
79047: PUSH
79048: LD_VAR 0 6
79052: PUSH
79053: LD_INT 1
79055: NEG
79056: MUL
79057: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79058: LD_ADDR_VAR 0 7
79062: PUSH
79063: LD_VAR 0 2
79067: PUSH
79068: LD_VAR 0 4
79072: PLUS
79073: PUSH
79074: LD_INT 2
79076: DIV
79077: ST_TO_ADDR
// if _y < 0 then
79078: LD_VAR 0 7
79082: PUSH
79083: LD_INT 0
79085: LESS
79086: IFFALSE 79103
// _y := _y * - 1 ;
79088: LD_ADDR_VAR 0 7
79092: PUSH
79093: LD_VAR 0 7
79097: PUSH
79098: LD_INT 1
79100: NEG
79101: MUL
79102: ST_TO_ADDR
// result := [ _x , _y ] ;
79103: LD_ADDR_VAR 0 5
79107: PUSH
79108: LD_VAR 0 6
79112: PUSH
79113: LD_VAR 0 7
79117: PUSH
79118: EMPTY
79119: LIST
79120: LIST
79121: ST_TO_ADDR
// end ;
79122: LD_VAR 0 5
79126: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79127: LD_INT 0
79129: PPUSH
79130: PPUSH
79131: PPUSH
79132: PPUSH
// task := GetTaskList ( unit ) ;
79133: LD_ADDR_VAR 0 7
79137: PUSH
79138: LD_VAR 0 1
79142: PPUSH
79143: CALL_OW 437
79147: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79148: LD_VAR 0 7
79152: NOT
79153: PUSH
79154: LD_VAR 0 1
79158: PPUSH
79159: LD_VAR 0 2
79163: PPUSH
79164: CALL_OW 308
79168: NOT
79169: AND
79170: IFFALSE 79174
// exit ;
79172: GO 79292
// if IsInArea ( unit , area ) then
79174: LD_VAR 0 1
79178: PPUSH
79179: LD_VAR 0 2
79183: PPUSH
79184: CALL_OW 308
79188: IFFALSE 79206
// begin ComMoveToArea ( unit , goAway ) ;
79190: LD_VAR 0 1
79194: PPUSH
79195: LD_VAR 0 3
79199: PPUSH
79200: CALL_OW 113
// exit ;
79204: GO 79292
// end ; if task [ 1 ] [ 1 ] <> M then
79206: LD_VAR 0 7
79210: PUSH
79211: LD_INT 1
79213: ARRAY
79214: PUSH
79215: LD_INT 1
79217: ARRAY
79218: PUSH
79219: LD_STRING M
79221: NONEQUAL
79222: IFFALSE 79226
// exit ;
79224: GO 79292
// x := task [ 1 ] [ 2 ] ;
79226: LD_ADDR_VAR 0 5
79230: PUSH
79231: LD_VAR 0 7
79235: PUSH
79236: LD_INT 1
79238: ARRAY
79239: PUSH
79240: LD_INT 2
79242: ARRAY
79243: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79244: LD_ADDR_VAR 0 6
79248: PUSH
79249: LD_VAR 0 7
79253: PUSH
79254: LD_INT 1
79256: ARRAY
79257: PUSH
79258: LD_INT 3
79260: ARRAY
79261: ST_TO_ADDR
// if InArea ( x , y , area ) then
79262: LD_VAR 0 5
79266: PPUSH
79267: LD_VAR 0 6
79271: PPUSH
79272: LD_VAR 0 2
79276: PPUSH
79277: CALL_OW 309
79281: IFFALSE 79292
// ComStop ( unit ) ;
79283: LD_VAR 0 1
79287: PPUSH
79288: CALL_OW 141
// end ;
79292: LD_VAR 0 4
79296: RET
// export function Abs ( value ) ; begin
79297: LD_INT 0
79299: PPUSH
// result := value ;
79300: LD_ADDR_VAR 0 2
79304: PUSH
79305: LD_VAR 0 1
79309: ST_TO_ADDR
// if value < 0 then
79310: LD_VAR 0 1
79314: PUSH
79315: LD_INT 0
79317: LESS
79318: IFFALSE 79335
// result := value * - 1 ;
79320: LD_ADDR_VAR 0 2
79324: PUSH
79325: LD_VAR 0 1
79329: PUSH
79330: LD_INT 1
79332: NEG
79333: MUL
79334: ST_TO_ADDR
// end ;
79335: LD_VAR 0 2
79339: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79340: LD_INT 0
79342: PPUSH
79343: PPUSH
79344: PPUSH
79345: PPUSH
79346: PPUSH
79347: PPUSH
79348: PPUSH
79349: PPUSH
// if not unit or not building then
79350: LD_VAR 0 1
79354: NOT
79355: PUSH
79356: LD_VAR 0 2
79360: NOT
79361: OR
79362: IFFALSE 79366
// exit ;
79364: GO 79592
// x := GetX ( building ) ;
79366: LD_ADDR_VAR 0 4
79370: PUSH
79371: LD_VAR 0 2
79375: PPUSH
79376: CALL_OW 250
79380: ST_TO_ADDR
// y := GetY ( building ) ;
79381: LD_ADDR_VAR 0 6
79385: PUSH
79386: LD_VAR 0 2
79390: PPUSH
79391: CALL_OW 251
79395: ST_TO_ADDR
// d := GetDir ( building ) ;
79396: LD_ADDR_VAR 0 8
79400: PUSH
79401: LD_VAR 0 2
79405: PPUSH
79406: CALL_OW 254
79410: ST_TO_ADDR
// r := 4 ;
79411: LD_ADDR_VAR 0 9
79415: PUSH
79416: LD_INT 4
79418: ST_TO_ADDR
// for i := 1 to 5 do
79419: LD_ADDR_VAR 0 10
79423: PUSH
79424: DOUBLE
79425: LD_INT 1
79427: DEC
79428: ST_TO_ADDR
79429: LD_INT 5
79431: PUSH
79432: FOR_TO
79433: IFFALSE 79590
// begin _x := ShiftX ( x , d , r + i ) ;
79435: LD_ADDR_VAR 0 5
79439: PUSH
79440: LD_VAR 0 4
79444: PPUSH
79445: LD_VAR 0 8
79449: PPUSH
79450: LD_VAR 0 9
79454: PUSH
79455: LD_VAR 0 10
79459: PLUS
79460: PPUSH
79461: CALL_OW 272
79465: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79466: LD_ADDR_VAR 0 7
79470: PUSH
79471: LD_VAR 0 6
79475: PPUSH
79476: LD_VAR 0 8
79480: PPUSH
79481: LD_VAR 0 9
79485: PUSH
79486: LD_VAR 0 10
79490: PLUS
79491: PPUSH
79492: CALL_OW 273
79496: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79497: LD_VAR 0 5
79501: PPUSH
79502: LD_VAR 0 7
79506: PPUSH
79507: CALL_OW 488
79511: PUSH
79512: LD_VAR 0 5
79516: PPUSH
79517: LD_VAR 0 7
79521: PPUSH
79522: CALL_OW 428
79526: PPUSH
79527: CALL_OW 247
79531: PUSH
79532: LD_INT 3
79534: PUSH
79535: LD_INT 2
79537: PUSH
79538: EMPTY
79539: LIST
79540: LIST
79541: IN
79542: NOT
79543: AND
79544: IFFALSE 79588
// begin ComMoveXY ( unit , _x , _y ) ;
79546: LD_VAR 0 1
79550: PPUSH
79551: LD_VAR 0 5
79555: PPUSH
79556: LD_VAR 0 7
79560: PPUSH
79561: CALL_OW 111
// result := [ _x , _y ] ;
79565: LD_ADDR_VAR 0 3
79569: PUSH
79570: LD_VAR 0 5
79574: PUSH
79575: LD_VAR 0 7
79579: PUSH
79580: EMPTY
79581: LIST
79582: LIST
79583: ST_TO_ADDR
// exit ;
79584: POP
79585: POP
79586: GO 79592
// end ; end ;
79588: GO 79432
79590: POP
79591: POP
// end ;
79592: LD_VAR 0 3
79596: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79597: LD_INT 0
79599: PPUSH
79600: PPUSH
79601: PPUSH
// result := 0 ;
79602: LD_ADDR_VAR 0 3
79606: PUSH
79607: LD_INT 0
79609: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79610: LD_VAR 0 1
79614: PUSH
79615: LD_INT 0
79617: LESS
79618: PUSH
79619: LD_VAR 0 1
79623: PUSH
79624: LD_INT 8
79626: GREATER
79627: OR
79628: PUSH
79629: LD_VAR 0 2
79633: PUSH
79634: LD_INT 0
79636: LESS
79637: OR
79638: PUSH
79639: LD_VAR 0 2
79643: PUSH
79644: LD_INT 8
79646: GREATER
79647: OR
79648: IFFALSE 79652
// exit ;
79650: GO 79727
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79652: LD_ADDR_VAR 0 4
79656: PUSH
79657: LD_INT 22
79659: PUSH
79660: LD_VAR 0 2
79664: PUSH
79665: EMPTY
79666: LIST
79667: LIST
79668: PPUSH
79669: CALL_OW 69
79673: PUSH
79674: FOR_IN
79675: IFFALSE 79725
// begin un := UnitShoot ( i ) ;
79677: LD_ADDR_VAR 0 5
79681: PUSH
79682: LD_VAR 0 4
79686: PPUSH
79687: CALL_OW 504
79691: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79692: LD_VAR 0 5
79696: PPUSH
79697: CALL_OW 255
79701: PUSH
79702: LD_VAR 0 1
79706: EQUAL
79707: IFFALSE 79723
// begin result := un ;
79709: LD_ADDR_VAR 0 3
79713: PUSH
79714: LD_VAR 0 5
79718: ST_TO_ADDR
// exit ;
79719: POP
79720: POP
79721: GO 79727
// end ; end ;
79723: GO 79674
79725: POP
79726: POP
// end ;
79727: LD_VAR 0 3
79731: RET
// export function GetCargoBay ( units ) ; begin
79732: LD_INT 0
79734: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79735: LD_ADDR_VAR 0 2
79739: PUSH
79740: LD_VAR 0 1
79744: PPUSH
79745: LD_INT 2
79747: PUSH
79748: LD_INT 34
79750: PUSH
79751: LD_INT 12
79753: PUSH
79754: EMPTY
79755: LIST
79756: LIST
79757: PUSH
79758: LD_INT 34
79760: PUSH
79761: LD_INT 51
79763: PUSH
79764: EMPTY
79765: LIST
79766: LIST
79767: PUSH
79768: LD_INT 34
79770: PUSH
79771: LD_INT 32
79773: PUSH
79774: EMPTY
79775: LIST
79776: LIST
79777: PUSH
79778: LD_INT 34
79780: PUSH
79781: LD_INT 89
79783: PUSH
79784: EMPTY
79785: LIST
79786: LIST
79787: PUSH
79788: EMPTY
79789: LIST
79790: LIST
79791: LIST
79792: LIST
79793: LIST
79794: PPUSH
79795: CALL_OW 72
79799: ST_TO_ADDR
// end ;
79800: LD_VAR 0 2
79804: RET
// export function Negate ( value ) ; begin
79805: LD_INT 0
79807: PPUSH
// result := not value ;
79808: LD_ADDR_VAR 0 2
79812: PUSH
79813: LD_VAR 0 1
79817: NOT
79818: ST_TO_ADDR
// end ;
79819: LD_VAR 0 2
79823: RET
// export function Inc ( value ) ; begin
79824: LD_INT 0
79826: PPUSH
// result := value + 1 ;
79827: LD_ADDR_VAR 0 2
79831: PUSH
79832: LD_VAR 0 1
79836: PUSH
79837: LD_INT 1
79839: PLUS
79840: ST_TO_ADDR
// end ;
79841: LD_VAR 0 2
79845: RET
// export function Dec ( value ) ; begin
79846: LD_INT 0
79848: PPUSH
// result := value - 1 ;
79849: LD_ADDR_VAR 0 2
79853: PUSH
79854: LD_VAR 0 1
79858: PUSH
79859: LD_INT 1
79861: MINUS
79862: ST_TO_ADDR
// end ;
79863: LD_VAR 0 2
79867: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79868: LD_INT 0
79870: PPUSH
79871: PPUSH
79872: PPUSH
79873: PPUSH
79874: PPUSH
79875: PPUSH
79876: PPUSH
79877: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79878: LD_VAR 0 1
79882: PPUSH
79883: LD_VAR 0 2
79887: PPUSH
79888: CALL_OW 488
79892: NOT
79893: PUSH
79894: LD_VAR 0 3
79898: PPUSH
79899: LD_VAR 0 4
79903: PPUSH
79904: CALL_OW 488
79908: NOT
79909: OR
79910: IFFALSE 79923
// begin result := - 1 ;
79912: LD_ADDR_VAR 0 5
79916: PUSH
79917: LD_INT 1
79919: NEG
79920: ST_TO_ADDR
// exit ;
79921: GO 80158
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79923: LD_ADDR_VAR 0 12
79927: PUSH
79928: LD_VAR 0 1
79932: PPUSH
79933: LD_VAR 0 2
79937: PPUSH
79938: LD_VAR 0 3
79942: PPUSH
79943: LD_VAR 0 4
79947: PPUSH
79948: CALL 79008 0 4
79952: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79953: LD_ADDR_VAR 0 11
79957: PUSH
79958: LD_VAR 0 1
79962: PPUSH
79963: LD_VAR 0 2
79967: PPUSH
79968: LD_VAR 0 12
79972: PUSH
79973: LD_INT 1
79975: ARRAY
79976: PPUSH
79977: LD_VAR 0 12
79981: PUSH
79982: LD_INT 2
79984: ARRAY
79985: PPUSH
79986: CALL_OW 298
79990: ST_TO_ADDR
// distance := 9999 ;
79991: LD_ADDR_VAR 0 10
79995: PUSH
79996: LD_INT 9999
79998: ST_TO_ADDR
// for i := 0 to 5 do
79999: LD_ADDR_VAR 0 6
80003: PUSH
80004: DOUBLE
80005: LD_INT 0
80007: DEC
80008: ST_TO_ADDR
80009: LD_INT 5
80011: PUSH
80012: FOR_TO
80013: IFFALSE 80156
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80015: LD_ADDR_VAR 0 7
80019: PUSH
80020: LD_VAR 0 1
80024: PPUSH
80025: LD_VAR 0 6
80029: PPUSH
80030: LD_VAR 0 11
80034: PPUSH
80035: CALL_OW 272
80039: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80040: LD_ADDR_VAR 0 8
80044: PUSH
80045: LD_VAR 0 2
80049: PPUSH
80050: LD_VAR 0 6
80054: PPUSH
80055: LD_VAR 0 11
80059: PPUSH
80060: CALL_OW 273
80064: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80065: LD_VAR 0 7
80069: PPUSH
80070: LD_VAR 0 8
80074: PPUSH
80075: CALL_OW 488
80079: NOT
80080: IFFALSE 80084
// continue ;
80082: GO 80012
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80084: LD_ADDR_VAR 0 9
80088: PUSH
80089: LD_VAR 0 12
80093: PUSH
80094: LD_INT 1
80096: ARRAY
80097: PPUSH
80098: LD_VAR 0 12
80102: PUSH
80103: LD_INT 2
80105: ARRAY
80106: PPUSH
80107: LD_VAR 0 7
80111: PPUSH
80112: LD_VAR 0 8
80116: PPUSH
80117: CALL_OW 298
80121: ST_TO_ADDR
// if tmp < distance then
80122: LD_VAR 0 9
80126: PUSH
80127: LD_VAR 0 10
80131: LESS
80132: IFFALSE 80154
// begin result := i ;
80134: LD_ADDR_VAR 0 5
80138: PUSH
80139: LD_VAR 0 6
80143: ST_TO_ADDR
// distance := tmp ;
80144: LD_ADDR_VAR 0 10
80148: PUSH
80149: LD_VAR 0 9
80153: ST_TO_ADDR
// end ; end ;
80154: GO 80012
80156: POP
80157: POP
// end ;
80158: LD_VAR 0 5
80162: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80163: LD_INT 0
80165: PPUSH
80166: PPUSH
// if not driver or not IsInUnit ( driver ) then
80167: LD_VAR 0 1
80171: NOT
80172: PUSH
80173: LD_VAR 0 1
80177: PPUSH
80178: CALL_OW 310
80182: NOT
80183: OR
80184: IFFALSE 80188
// exit ;
80186: GO 80278
// vehicle := IsInUnit ( driver ) ;
80188: LD_ADDR_VAR 0 3
80192: PUSH
80193: LD_VAR 0 1
80197: PPUSH
80198: CALL_OW 310
80202: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80203: LD_VAR 0 1
80207: PPUSH
80208: LD_STRING \
80210: PUSH
80211: LD_INT 0
80213: PUSH
80214: LD_INT 0
80216: PUSH
80217: LD_INT 0
80219: PUSH
80220: LD_INT 0
80222: PUSH
80223: LD_INT 0
80225: PUSH
80226: LD_INT 0
80228: PUSH
80229: EMPTY
80230: LIST
80231: LIST
80232: LIST
80233: LIST
80234: LIST
80235: LIST
80236: LIST
80237: PUSH
80238: LD_STRING E
80240: PUSH
80241: LD_INT 0
80243: PUSH
80244: LD_INT 0
80246: PUSH
80247: LD_VAR 0 3
80251: PUSH
80252: LD_INT 0
80254: PUSH
80255: LD_INT 0
80257: PUSH
80258: LD_INT 0
80260: PUSH
80261: EMPTY
80262: LIST
80263: LIST
80264: LIST
80265: LIST
80266: LIST
80267: LIST
80268: LIST
80269: PUSH
80270: EMPTY
80271: LIST
80272: LIST
80273: PPUSH
80274: CALL_OW 446
// end ;
80278: LD_VAR 0 2
80282: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80283: LD_INT 0
80285: PPUSH
80286: PPUSH
// if not driver or not IsInUnit ( driver ) then
80287: LD_VAR 0 1
80291: NOT
80292: PUSH
80293: LD_VAR 0 1
80297: PPUSH
80298: CALL_OW 310
80302: NOT
80303: OR
80304: IFFALSE 80308
// exit ;
80306: GO 80398
// vehicle := IsInUnit ( driver ) ;
80308: LD_ADDR_VAR 0 3
80312: PUSH
80313: LD_VAR 0 1
80317: PPUSH
80318: CALL_OW 310
80322: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80323: LD_VAR 0 1
80327: PPUSH
80328: LD_STRING \
80330: PUSH
80331: LD_INT 0
80333: PUSH
80334: LD_INT 0
80336: PUSH
80337: LD_INT 0
80339: PUSH
80340: LD_INT 0
80342: PUSH
80343: LD_INT 0
80345: PUSH
80346: LD_INT 0
80348: PUSH
80349: EMPTY
80350: LIST
80351: LIST
80352: LIST
80353: LIST
80354: LIST
80355: LIST
80356: LIST
80357: PUSH
80358: LD_STRING E
80360: PUSH
80361: LD_INT 0
80363: PUSH
80364: LD_INT 0
80366: PUSH
80367: LD_VAR 0 3
80371: PUSH
80372: LD_INT 0
80374: PUSH
80375: LD_INT 0
80377: PUSH
80378: LD_INT 0
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: LIST
80385: LIST
80386: LIST
80387: LIST
80388: LIST
80389: PUSH
80390: EMPTY
80391: LIST
80392: LIST
80393: PPUSH
80394: CALL_OW 447
// end ;
80398: LD_VAR 0 2
80402: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80403: LD_INT 0
80405: PPUSH
80406: PPUSH
80407: PPUSH
// tmp := [ ] ;
80408: LD_ADDR_VAR 0 5
80412: PUSH
80413: EMPTY
80414: ST_TO_ADDR
// for i in units do
80415: LD_ADDR_VAR 0 4
80419: PUSH
80420: LD_VAR 0 1
80424: PUSH
80425: FOR_IN
80426: IFFALSE 80464
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80428: LD_ADDR_VAR 0 5
80432: PUSH
80433: LD_VAR 0 5
80437: PPUSH
80438: LD_VAR 0 5
80442: PUSH
80443: LD_INT 1
80445: PLUS
80446: PPUSH
80447: LD_VAR 0 4
80451: PPUSH
80452: CALL_OW 256
80456: PPUSH
80457: CALL_OW 2
80461: ST_TO_ADDR
80462: GO 80425
80464: POP
80465: POP
// if not tmp then
80466: LD_VAR 0 5
80470: NOT
80471: IFFALSE 80475
// exit ;
80473: GO 80523
// if asc then
80475: LD_VAR 0 2
80479: IFFALSE 80503
// result := SortListByListAsc ( units , tmp ) else
80481: LD_ADDR_VAR 0 3
80485: PUSH
80486: LD_VAR 0 1
80490: PPUSH
80491: LD_VAR 0 5
80495: PPUSH
80496: CALL_OW 76
80500: ST_TO_ADDR
80501: GO 80523
// result := SortListByListDesc ( units , tmp ) ;
80503: LD_ADDR_VAR 0 3
80507: PUSH
80508: LD_VAR 0 1
80512: PPUSH
80513: LD_VAR 0 5
80517: PPUSH
80518: CALL_OW 77
80522: ST_TO_ADDR
// end ;
80523: LD_VAR 0 3
80527: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80528: LD_INT 0
80530: PPUSH
80531: PPUSH
// task := GetTaskList ( mech ) ;
80532: LD_ADDR_VAR 0 4
80536: PUSH
80537: LD_VAR 0 1
80541: PPUSH
80542: CALL_OW 437
80546: ST_TO_ADDR
// if not task then
80547: LD_VAR 0 4
80551: NOT
80552: IFFALSE 80556
// exit ;
80554: GO 80598
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80556: LD_ADDR_VAR 0 3
80560: PUSH
80561: LD_VAR 0 4
80565: PUSH
80566: LD_INT 1
80568: ARRAY
80569: PUSH
80570: LD_INT 1
80572: ARRAY
80573: PUSH
80574: LD_STRING r
80576: EQUAL
80577: PUSH
80578: LD_VAR 0 4
80582: PUSH
80583: LD_INT 1
80585: ARRAY
80586: PUSH
80587: LD_INT 4
80589: ARRAY
80590: PUSH
80591: LD_VAR 0 2
80595: EQUAL
80596: AND
80597: ST_TO_ADDR
// end ;
80598: LD_VAR 0 3
80602: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80603: LD_INT 0
80605: PPUSH
// SetDir ( unit , d ) ;
80606: LD_VAR 0 1
80610: PPUSH
80611: LD_VAR 0 4
80615: PPUSH
80616: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80620: LD_VAR 0 1
80624: PPUSH
80625: LD_VAR 0 2
80629: PPUSH
80630: LD_VAR 0 3
80634: PPUSH
80635: LD_VAR 0 5
80639: PPUSH
80640: CALL_OW 48
// end ;
80644: LD_VAR 0 6
80648: RET
// export function ToNaturalNumber ( number ) ; begin
80649: LD_INT 0
80651: PPUSH
// result := number div 1 ;
80652: LD_ADDR_VAR 0 2
80656: PUSH
80657: LD_VAR 0 1
80661: PUSH
80662: LD_INT 1
80664: DIV
80665: ST_TO_ADDR
// if number < 0 then
80666: LD_VAR 0 1
80670: PUSH
80671: LD_INT 0
80673: LESS
80674: IFFALSE 80684
// result := 0 ;
80676: LD_ADDR_VAR 0 2
80680: PUSH
80681: LD_INT 0
80683: ST_TO_ADDR
// end ;
80684: LD_VAR 0 2
80688: RET
// export function SortByClass ( units , class ) ; var un ; begin
80689: LD_INT 0
80691: PPUSH
80692: PPUSH
// if not units or not class then
80693: LD_VAR 0 1
80697: NOT
80698: PUSH
80699: LD_VAR 0 2
80703: NOT
80704: OR
80705: IFFALSE 80709
// exit ;
80707: GO 80804
// result := [ ] ;
80709: LD_ADDR_VAR 0 3
80713: PUSH
80714: EMPTY
80715: ST_TO_ADDR
// for un in units do
80716: LD_ADDR_VAR 0 4
80720: PUSH
80721: LD_VAR 0 1
80725: PUSH
80726: FOR_IN
80727: IFFALSE 80802
// if GetClass ( un ) = class then
80729: LD_VAR 0 4
80733: PPUSH
80734: CALL_OW 257
80738: PUSH
80739: LD_VAR 0 2
80743: EQUAL
80744: IFFALSE 80771
// result := Insert ( result , 1 , un ) else
80746: LD_ADDR_VAR 0 3
80750: PUSH
80751: LD_VAR 0 3
80755: PPUSH
80756: LD_INT 1
80758: PPUSH
80759: LD_VAR 0 4
80763: PPUSH
80764: CALL_OW 2
80768: ST_TO_ADDR
80769: GO 80800
// result := Replace ( result , result + 1 , un ) ;
80771: LD_ADDR_VAR 0 3
80775: PUSH
80776: LD_VAR 0 3
80780: PPUSH
80781: LD_VAR 0 3
80785: PUSH
80786: LD_INT 1
80788: PLUS
80789: PPUSH
80790: LD_VAR 0 4
80794: PPUSH
80795: CALL_OW 1
80799: ST_TO_ADDR
80800: GO 80726
80802: POP
80803: POP
// end ;
80804: LD_VAR 0 3
80808: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80809: LD_INT 0
80811: PPUSH
80812: PPUSH
80813: PPUSH
80814: PPUSH
80815: PPUSH
80816: PPUSH
80817: PPUSH
// result := [ ] ;
80818: LD_ADDR_VAR 0 4
80822: PUSH
80823: EMPTY
80824: ST_TO_ADDR
// if x - r < 0 then
80825: LD_VAR 0 1
80829: PUSH
80830: LD_VAR 0 3
80834: MINUS
80835: PUSH
80836: LD_INT 0
80838: LESS
80839: IFFALSE 80851
// min_x := 0 else
80841: LD_ADDR_VAR 0 8
80845: PUSH
80846: LD_INT 0
80848: ST_TO_ADDR
80849: GO 80867
// min_x := x - r ;
80851: LD_ADDR_VAR 0 8
80855: PUSH
80856: LD_VAR 0 1
80860: PUSH
80861: LD_VAR 0 3
80865: MINUS
80866: ST_TO_ADDR
// if y - r < 0 then
80867: LD_VAR 0 2
80871: PUSH
80872: LD_VAR 0 3
80876: MINUS
80877: PUSH
80878: LD_INT 0
80880: LESS
80881: IFFALSE 80893
// min_y := 0 else
80883: LD_ADDR_VAR 0 7
80887: PUSH
80888: LD_INT 0
80890: ST_TO_ADDR
80891: GO 80909
// min_y := y - r ;
80893: LD_ADDR_VAR 0 7
80897: PUSH
80898: LD_VAR 0 2
80902: PUSH
80903: LD_VAR 0 3
80907: MINUS
80908: ST_TO_ADDR
// max_x := x + r ;
80909: LD_ADDR_VAR 0 9
80913: PUSH
80914: LD_VAR 0 1
80918: PUSH
80919: LD_VAR 0 3
80923: PLUS
80924: ST_TO_ADDR
// max_y := y + r ;
80925: LD_ADDR_VAR 0 10
80929: PUSH
80930: LD_VAR 0 2
80934: PUSH
80935: LD_VAR 0 3
80939: PLUS
80940: ST_TO_ADDR
// for _x = min_x to max_x do
80941: LD_ADDR_VAR 0 5
80945: PUSH
80946: DOUBLE
80947: LD_VAR 0 8
80951: DEC
80952: ST_TO_ADDR
80953: LD_VAR 0 9
80957: PUSH
80958: FOR_TO
80959: IFFALSE 81060
// for _y = min_y to max_y do
80961: LD_ADDR_VAR 0 6
80965: PUSH
80966: DOUBLE
80967: LD_VAR 0 7
80971: DEC
80972: ST_TO_ADDR
80973: LD_VAR 0 10
80977: PUSH
80978: FOR_TO
80979: IFFALSE 81056
// begin if not ValidHex ( _x , _y ) then
80981: LD_VAR 0 5
80985: PPUSH
80986: LD_VAR 0 6
80990: PPUSH
80991: CALL_OW 488
80995: NOT
80996: IFFALSE 81000
// continue ;
80998: GO 80978
// if GetResourceTypeXY ( _x , _y ) then
81000: LD_VAR 0 5
81004: PPUSH
81005: LD_VAR 0 6
81009: PPUSH
81010: CALL_OW 283
81014: IFFALSE 81054
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81016: LD_ADDR_VAR 0 4
81020: PUSH
81021: LD_VAR 0 4
81025: PPUSH
81026: LD_VAR 0 4
81030: PUSH
81031: LD_INT 1
81033: PLUS
81034: PPUSH
81035: LD_VAR 0 5
81039: PUSH
81040: LD_VAR 0 6
81044: PUSH
81045: EMPTY
81046: LIST
81047: LIST
81048: PPUSH
81049: CALL_OW 1
81053: ST_TO_ADDR
// end ;
81054: GO 80978
81056: POP
81057: POP
81058: GO 80958
81060: POP
81061: POP
// end ;
81062: LD_VAR 0 4
81066: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81067: LD_INT 0
81069: PPUSH
81070: PPUSH
81071: PPUSH
81072: PPUSH
81073: PPUSH
81074: PPUSH
81075: PPUSH
81076: PPUSH
// if not units then
81077: LD_VAR 0 1
81081: NOT
81082: IFFALSE 81086
// exit ;
81084: GO 81610
// result := UnitFilter ( units , [ f_ok ] ) ;
81086: LD_ADDR_VAR 0 3
81090: PUSH
81091: LD_VAR 0 1
81095: PPUSH
81096: LD_INT 50
81098: PUSH
81099: EMPTY
81100: LIST
81101: PPUSH
81102: CALL_OW 72
81106: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81107: LD_ADDR_VAR 0 8
81111: PUSH
81112: LD_VAR 0 1
81116: PUSH
81117: LD_INT 1
81119: ARRAY
81120: PPUSH
81121: CALL_OW 255
81125: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81126: LD_ADDR_VAR 0 10
81130: PUSH
81131: LD_INT 29
81133: PUSH
81134: LD_INT 91
81136: PUSH
81137: LD_INT 49
81139: PUSH
81140: EMPTY
81141: LIST
81142: LIST
81143: LIST
81144: ST_TO_ADDR
// if not result then
81145: LD_VAR 0 3
81149: NOT
81150: IFFALSE 81154
// exit ;
81152: GO 81610
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81154: LD_ADDR_VAR 0 5
81158: PUSH
81159: LD_INT 81
81161: PUSH
81162: LD_VAR 0 8
81166: PUSH
81167: EMPTY
81168: LIST
81169: LIST
81170: PPUSH
81171: CALL_OW 69
81175: ST_TO_ADDR
// for i in result do
81176: LD_ADDR_VAR 0 4
81180: PUSH
81181: LD_VAR 0 3
81185: PUSH
81186: FOR_IN
81187: IFFALSE 81608
// begin tag := GetTag ( i ) + 1 ;
81189: LD_ADDR_VAR 0 9
81193: PUSH
81194: LD_VAR 0 4
81198: PPUSH
81199: CALL_OW 110
81203: PUSH
81204: LD_INT 1
81206: PLUS
81207: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81208: LD_ADDR_VAR 0 7
81212: PUSH
81213: LD_VAR 0 4
81217: PPUSH
81218: CALL_OW 250
81222: PPUSH
81223: LD_VAR 0 4
81227: PPUSH
81228: CALL_OW 251
81232: PPUSH
81233: LD_INT 6
81235: PPUSH
81236: CALL 80809 0 3
81240: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81241: LD_VAR 0 4
81245: PPUSH
81246: CALL_OW 247
81250: PUSH
81251: LD_INT 2
81253: EQUAL
81254: PUSH
81255: LD_VAR 0 7
81259: AND
81260: PUSH
81261: LD_VAR 0 4
81265: PPUSH
81266: CALL_OW 264
81270: PUSH
81271: LD_VAR 0 10
81275: IN
81276: NOT
81277: AND
81278: IFFALSE 81317
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81280: LD_VAR 0 4
81284: PPUSH
81285: LD_VAR 0 7
81289: PUSH
81290: LD_INT 1
81292: ARRAY
81293: PUSH
81294: LD_INT 1
81296: ARRAY
81297: PPUSH
81298: LD_VAR 0 7
81302: PUSH
81303: LD_INT 1
81305: ARRAY
81306: PUSH
81307: LD_INT 2
81309: ARRAY
81310: PPUSH
81311: CALL_OW 116
81315: GO 81606
// if path > tag then
81317: LD_VAR 0 2
81321: PUSH
81322: LD_VAR 0 9
81326: GREATER
81327: IFFALSE 81535
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81329: LD_ADDR_VAR 0 6
81333: PUSH
81334: LD_VAR 0 5
81338: PPUSH
81339: LD_INT 91
81341: PUSH
81342: LD_VAR 0 4
81346: PUSH
81347: LD_INT 8
81349: PUSH
81350: EMPTY
81351: LIST
81352: LIST
81353: LIST
81354: PPUSH
81355: CALL_OW 72
81359: ST_TO_ADDR
// if nearEnemy then
81360: LD_VAR 0 6
81364: IFFALSE 81433
// begin if GetWeapon ( i ) = ru_time_lapser then
81366: LD_VAR 0 4
81370: PPUSH
81371: CALL_OW 264
81375: PUSH
81376: LD_INT 49
81378: EQUAL
81379: IFFALSE 81407
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81381: LD_VAR 0 4
81385: PPUSH
81386: LD_VAR 0 6
81390: PPUSH
81391: LD_VAR 0 4
81395: PPUSH
81396: CALL_OW 74
81400: PPUSH
81401: CALL_OW 112
81405: GO 81431
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81407: LD_VAR 0 4
81411: PPUSH
81412: LD_VAR 0 6
81416: PPUSH
81417: LD_VAR 0 4
81421: PPUSH
81422: CALL_OW 74
81426: PPUSH
81427: CALL_OW 115
// end else
81431: GO 81533
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81433: LD_VAR 0 4
81437: PPUSH
81438: LD_VAR 0 2
81442: PUSH
81443: LD_VAR 0 9
81447: ARRAY
81448: PUSH
81449: LD_INT 1
81451: ARRAY
81452: PPUSH
81453: LD_VAR 0 2
81457: PUSH
81458: LD_VAR 0 9
81462: ARRAY
81463: PUSH
81464: LD_INT 2
81466: ARRAY
81467: PPUSH
81468: CALL_OW 297
81472: PUSH
81473: LD_INT 6
81475: GREATER
81476: IFFALSE 81519
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81478: LD_VAR 0 4
81482: PPUSH
81483: LD_VAR 0 2
81487: PUSH
81488: LD_VAR 0 9
81492: ARRAY
81493: PUSH
81494: LD_INT 1
81496: ARRAY
81497: PPUSH
81498: LD_VAR 0 2
81502: PUSH
81503: LD_VAR 0 9
81507: ARRAY
81508: PUSH
81509: LD_INT 2
81511: ARRAY
81512: PPUSH
81513: CALL_OW 114
81517: GO 81533
// SetTag ( i , tag ) ;
81519: LD_VAR 0 4
81523: PPUSH
81524: LD_VAR 0 9
81528: PPUSH
81529: CALL_OW 109
// end else
81533: GO 81606
// if enemy then
81535: LD_VAR 0 5
81539: IFFALSE 81606
// begin if GetWeapon ( i ) = ru_time_lapser then
81541: LD_VAR 0 4
81545: PPUSH
81546: CALL_OW 264
81550: PUSH
81551: LD_INT 49
81553: EQUAL
81554: IFFALSE 81582
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81556: LD_VAR 0 4
81560: PPUSH
81561: LD_VAR 0 5
81565: PPUSH
81566: LD_VAR 0 4
81570: PPUSH
81571: CALL_OW 74
81575: PPUSH
81576: CALL_OW 112
81580: GO 81606
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81582: LD_VAR 0 4
81586: PPUSH
81587: LD_VAR 0 5
81591: PPUSH
81592: LD_VAR 0 4
81596: PPUSH
81597: CALL_OW 74
81601: PPUSH
81602: CALL_OW 115
// end ; end ;
81606: GO 81186
81608: POP
81609: POP
// end ;
81610: LD_VAR 0 3
81614: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81615: LD_INT 0
81617: PPUSH
81618: PPUSH
81619: PPUSH
// if not unit or IsInUnit ( unit ) then
81620: LD_VAR 0 1
81624: NOT
81625: PUSH
81626: LD_VAR 0 1
81630: PPUSH
81631: CALL_OW 310
81635: OR
81636: IFFALSE 81640
// exit ;
81638: GO 81731
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81640: LD_ADDR_VAR 0 4
81644: PUSH
81645: LD_VAR 0 1
81649: PPUSH
81650: CALL_OW 250
81654: PPUSH
81655: LD_VAR 0 2
81659: PPUSH
81660: LD_INT 1
81662: PPUSH
81663: CALL_OW 272
81667: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81668: LD_ADDR_VAR 0 5
81672: PUSH
81673: LD_VAR 0 1
81677: PPUSH
81678: CALL_OW 251
81682: PPUSH
81683: LD_VAR 0 2
81687: PPUSH
81688: LD_INT 1
81690: PPUSH
81691: CALL_OW 273
81695: ST_TO_ADDR
// if ValidHex ( x , y ) then
81696: LD_VAR 0 4
81700: PPUSH
81701: LD_VAR 0 5
81705: PPUSH
81706: CALL_OW 488
81710: IFFALSE 81731
// ComTurnXY ( unit , x , y ) ;
81712: LD_VAR 0 1
81716: PPUSH
81717: LD_VAR 0 4
81721: PPUSH
81722: LD_VAR 0 5
81726: PPUSH
81727: CALL_OW 118
// end ;
81731: LD_VAR 0 3
81735: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81736: LD_INT 0
81738: PPUSH
81739: PPUSH
// result := false ;
81740: LD_ADDR_VAR 0 3
81744: PUSH
81745: LD_INT 0
81747: ST_TO_ADDR
// if not units then
81748: LD_VAR 0 2
81752: NOT
81753: IFFALSE 81757
// exit ;
81755: GO 81802
// for i in units do
81757: LD_ADDR_VAR 0 4
81761: PUSH
81762: LD_VAR 0 2
81766: PUSH
81767: FOR_IN
81768: IFFALSE 81800
// if See ( side , i ) then
81770: LD_VAR 0 1
81774: PPUSH
81775: LD_VAR 0 4
81779: PPUSH
81780: CALL_OW 292
81784: IFFALSE 81798
// begin result := true ;
81786: LD_ADDR_VAR 0 3
81790: PUSH
81791: LD_INT 1
81793: ST_TO_ADDR
// exit ;
81794: POP
81795: POP
81796: GO 81802
// end ;
81798: GO 81767
81800: POP
81801: POP
// end ;
81802: LD_VAR 0 3
81806: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81807: LD_INT 0
81809: PPUSH
81810: PPUSH
81811: PPUSH
81812: PPUSH
// if not unit or not points then
81813: LD_VAR 0 1
81817: NOT
81818: PUSH
81819: LD_VAR 0 2
81823: NOT
81824: OR
81825: IFFALSE 81829
// exit ;
81827: GO 81919
// dist := 99999 ;
81829: LD_ADDR_VAR 0 5
81833: PUSH
81834: LD_INT 99999
81836: ST_TO_ADDR
// for i in points do
81837: LD_ADDR_VAR 0 4
81841: PUSH
81842: LD_VAR 0 2
81846: PUSH
81847: FOR_IN
81848: IFFALSE 81917
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81850: LD_ADDR_VAR 0 6
81854: PUSH
81855: LD_VAR 0 1
81859: PPUSH
81860: LD_VAR 0 4
81864: PUSH
81865: LD_INT 1
81867: ARRAY
81868: PPUSH
81869: LD_VAR 0 4
81873: PUSH
81874: LD_INT 2
81876: ARRAY
81877: PPUSH
81878: CALL_OW 297
81882: ST_TO_ADDR
// if tmpDist < dist then
81883: LD_VAR 0 6
81887: PUSH
81888: LD_VAR 0 5
81892: LESS
81893: IFFALSE 81915
// begin result := i ;
81895: LD_ADDR_VAR 0 3
81899: PUSH
81900: LD_VAR 0 4
81904: ST_TO_ADDR
// dist := tmpDist ;
81905: LD_ADDR_VAR 0 5
81909: PUSH
81910: LD_VAR 0 6
81914: ST_TO_ADDR
// end ; end ;
81915: GO 81847
81917: POP
81918: POP
// end ;
81919: LD_VAR 0 3
81923: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81924: LD_INT 0
81926: PPUSH
// uc_side := side ;
81927: LD_ADDR_OWVAR 20
81931: PUSH
81932: LD_VAR 0 1
81936: ST_TO_ADDR
// uc_nation := 3 ;
81937: LD_ADDR_OWVAR 21
81941: PUSH
81942: LD_INT 3
81944: ST_TO_ADDR
// vc_chassis := 25 ;
81945: LD_ADDR_OWVAR 37
81949: PUSH
81950: LD_INT 25
81952: ST_TO_ADDR
// vc_engine := engine_siberite ;
81953: LD_ADDR_OWVAR 39
81957: PUSH
81958: LD_INT 3
81960: ST_TO_ADDR
// vc_control := control_computer ;
81961: LD_ADDR_OWVAR 38
81965: PUSH
81966: LD_INT 3
81968: ST_TO_ADDR
// vc_weapon := 59 ;
81969: LD_ADDR_OWVAR 40
81973: PUSH
81974: LD_INT 59
81976: ST_TO_ADDR
// result := CreateVehicle ;
81977: LD_ADDR_VAR 0 5
81981: PUSH
81982: CALL_OW 45
81986: ST_TO_ADDR
// SetDir ( result , d ) ;
81987: LD_VAR 0 5
81991: PPUSH
81992: LD_VAR 0 4
81996: PPUSH
81997: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82001: LD_VAR 0 5
82005: PPUSH
82006: LD_VAR 0 2
82010: PPUSH
82011: LD_VAR 0 3
82015: PPUSH
82016: LD_INT 0
82018: PPUSH
82019: CALL_OW 48
// end ;
82023: LD_VAR 0 5
82027: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82028: LD_INT 0
82030: PPUSH
82031: PPUSH
82032: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82033: LD_ADDR_VAR 0 2
82037: PUSH
82038: LD_INT 0
82040: PUSH
82041: LD_INT 0
82043: PUSH
82044: LD_INT 0
82046: PUSH
82047: LD_INT 0
82049: PUSH
82050: EMPTY
82051: LIST
82052: LIST
82053: LIST
82054: LIST
82055: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82056: LD_VAR 0 1
82060: NOT
82061: PUSH
82062: LD_VAR 0 1
82066: PPUSH
82067: CALL_OW 264
82071: PUSH
82072: LD_INT 12
82074: PUSH
82075: LD_INT 51
82077: PUSH
82078: LD_INT 32
82080: PUSH
82081: LD_INT 89
82083: PUSH
82084: EMPTY
82085: LIST
82086: LIST
82087: LIST
82088: LIST
82089: IN
82090: NOT
82091: OR
82092: IFFALSE 82096
// exit ;
82094: GO 82194
// for i := 1 to 3 do
82096: LD_ADDR_VAR 0 3
82100: PUSH
82101: DOUBLE
82102: LD_INT 1
82104: DEC
82105: ST_TO_ADDR
82106: LD_INT 3
82108: PUSH
82109: FOR_TO
82110: IFFALSE 82192
// begin tmp := GetCargo ( cargo , i ) ;
82112: LD_ADDR_VAR 0 4
82116: PUSH
82117: LD_VAR 0 1
82121: PPUSH
82122: LD_VAR 0 3
82126: PPUSH
82127: CALL_OW 289
82131: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82132: LD_ADDR_VAR 0 2
82136: PUSH
82137: LD_VAR 0 2
82141: PPUSH
82142: LD_VAR 0 3
82146: PPUSH
82147: LD_VAR 0 4
82151: PPUSH
82152: CALL_OW 1
82156: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82157: LD_ADDR_VAR 0 2
82161: PUSH
82162: LD_VAR 0 2
82166: PPUSH
82167: LD_INT 4
82169: PPUSH
82170: LD_VAR 0 2
82174: PUSH
82175: LD_INT 4
82177: ARRAY
82178: PUSH
82179: LD_VAR 0 4
82183: PLUS
82184: PPUSH
82185: CALL_OW 1
82189: ST_TO_ADDR
// end ;
82190: GO 82109
82192: POP
82193: POP
// end ;
82194: LD_VAR 0 2
82198: RET
// export function Length ( array ) ; begin
82199: LD_INT 0
82201: PPUSH
// result := array + 0 ;
82202: LD_ADDR_VAR 0 2
82206: PUSH
82207: LD_VAR 0 1
82211: PUSH
82212: LD_INT 0
82214: PLUS
82215: ST_TO_ADDR
// end ;
82216: LD_VAR 0 2
82220: RET
// export function PrepareArray ( array ) ; begin
82221: LD_INT 0
82223: PPUSH
// result := array diff 0 ;
82224: LD_ADDR_VAR 0 2
82228: PUSH
82229: LD_VAR 0 1
82233: PUSH
82234: LD_INT 0
82236: DIFF
82237: ST_TO_ADDR
// if not result [ 1 ] then
82238: LD_VAR 0 2
82242: PUSH
82243: LD_INT 1
82245: ARRAY
82246: NOT
82247: IFFALSE 82267
// result := Delete ( result , 1 ) ;
82249: LD_ADDR_VAR 0 2
82253: PUSH
82254: LD_VAR 0 2
82258: PPUSH
82259: LD_INT 1
82261: PPUSH
82262: CALL_OW 3
82266: ST_TO_ADDR
// end ;
82267: LD_VAR 0 2
82271: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82272: LD_INT 0
82274: PPUSH
82275: PPUSH
82276: PPUSH
82277: PPUSH
// sibRocketRange := 25 ;
82278: LD_ADDR_VAR 0 6
82282: PUSH
82283: LD_INT 25
82285: ST_TO_ADDR
// result := false ;
82286: LD_ADDR_VAR 0 4
82290: PUSH
82291: LD_INT 0
82293: ST_TO_ADDR
// for i := 0 to 5 do
82294: LD_ADDR_VAR 0 5
82298: PUSH
82299: DOUBLE
82300: LD_INT 0
82302: DEC
82303: ST_TO_ADDR
82304: LD_INT 5
82306: PUSH
82307: FOR_TO
82308: IFFALSE 82375
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82310: LD_VAR 0 1
82314: PPUSH
82315: LD_VAR 0 5
82319: PPUSH
82320: LD_VAR 0 6
82324: PPUSH
82325: CALL_OW 272
82329: PPUSH
82330: LD_VAR 0 2
82334: PPUSH
82335: LD_VAR 0 5
82339: PPUSH
82340: LD_VAR 0 6
82344: PPUSH
82345: CALL_OW 273
82349: PPUSH
82350: LD_VAR 0 3
82354: PPUSH
82355: CALL_OW 309
82359: IFFALSE 82373
// begin result := true ;
82361: LD_ADDR_VAR 0 4
82365: PUSH
82366: LD_INT 1
82368: ST_TO_ADDR
// exit ;
82369: POP
82370: POP
82371: GO 82377
// end ;
82373: GO 82307
82375: POP
82376: POP
// end ;
82377: LD_VAR 0 4
82381: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82382: LD_INT 0
82384: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82385: LD_VAR 0 1
82389: PPUSH
82390: LD_VAR 0 2
82394: PPUSH
82395: LD_INT 0
82397: PPUSH
82398: LD_INT 0
82400: PPUSH
82401: LD_INT 1
82403: PPUSH
82404: LD_INT 0
82406: PPUSH
82407: CALL_OW 587
// end ; end_of_file
82411: LD_VAR 0 3
82415: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82416: LD_VAR 0 1
82420: PUSH
82421: LD_INT 200
82423: DOUBLE
82424: GREATEREQUAL
82425: IFFALSE 82433
82427: LD_INT 299
82429: DOUBLE
82430: LESSEQUAL
82431: IFTRUE 82435
82433: GO 82467
82435: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82436: LD_VAR 0 1
82440: PPUSH
82441: LD_VAR 0 2
82445: PPUSH
82446: LD_VAR 0 3
82450: PPUSH
82451: LD_VAR 0 4
82455: PPUSH
82456: LD_VAR 0 5
82460: PPUSH
82461: CALL 37101 0 5
82465: GO 82544
82467: LD_INT 300
82469: DOUBLE
82470: GREATEREQUAL
82471: IFFALSE 82479
82473: LD_INT 399
82475: DOUBLE
82476: LESSEQUAL
82477: IFTRUE 82481
82479: GO 82543
82481: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82482: LD_VAR 0 1
82486: PPUSH
82487: LD_VAR 0 2
82491: PPUSH
82492: LD_VAR 0 3
82496: PPUSH
82497: LD_VAR 0 4
82501: PPUSH
82502: LD_VAR 0 5
82506: PPUSH
82507: LD_VAR 0 6
82511: PPUSH
82512: LD_VAR 0 7
82516: PPUSH
82517: LD_VAR 0 8
82521: PPUSH
82522: LD_VAR 0 9
82526: PPUSH
82527: LD_VAR 0 10
82531: PPUSH
82532: LD_VAR 0 11
82536: PPUSH
82537: CALL 33434 0 11
82541: GO 82544
82543: POP
// end ;
82544: PPOPN 11
82546: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82547: LD_VAR 0 1
82551: PPUSH
82552: LD_VAR 0 2
82556: PPUSH
82557: LD_VAR 0 3
82561: PPUSH
82562: LD_VAR 0 4
82566: PPUSH
82567: LD_VAR 0 5
82571: PPUSH
82572: CALL 36837 0 5
// end ; end_of_file
82576: PPOPN 5
82578: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82579: LD_VAR 0 1
82583: PPUSH
82584: LD_VAR 0 2
82588: PPUSH
82589: LD_VAR 0 3
82593: PPUSH
82594: LD_VAR 0 4
82598: PPUSH
82599: LD_VAR 0 5
82603: PPUSH
82604: LD_VAR 0 6
82608: PPUSH
82609: CALL 21127 0 6
// end ;
82613: PPOPN 6
82615: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82616: LD_INT 0
82618: PPUSH
// begin if not units then
82619: LD_VAR 0 1
82623: NOT
82624: IFFALSE 82628
// exit ;
82626: GO 82628
// end ;
82628: PPOPN 7
82630: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82631: CALL 21098 0 0
// end ;
82635: PPOPN 1
82637: END
