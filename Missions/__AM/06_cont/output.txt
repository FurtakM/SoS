// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7914 0 0
// CreateNature ;
  57: CALL 21378 0 0
// PrepareRussian ;
  61: CALL 5806 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 11233 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 42617 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 42617 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 42617 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 42617 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 42617 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 42617 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 42617 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 42617 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 42617 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 42617 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 42617 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 42617 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 4094
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if GetDistUnits ( JMM , Joan ) > 10 then
3785: LD_EXP 1
3789: PPUSH
3790: LD_EXP 16
3794: PPUSH
3795: CALL_OW 296
3799: PUSH
3800: LD_INT 10
3802: GREATER
3803: IFFALSE 3886
// begin InGameOff ;
3805: CALL_OW 9
// ComMoveUnit ( Joan , tmp ) ;
3809: LD_EXP 16
3813: PPUSH
3814: LD_VAR 0 3
3818: PPUSH
3819: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3823: LD_INT 35
3825: PPUSH
3826: CALL_OW 67
// until GetDistUnits ( JMM , Joan ) < 8 or IsDead ( Joan ) ;
3830: LD_EXP 1
3834: PPUSH
3835: LD_EXP 16
3839: PPUSH
3840: CALL_OW 296
3844: PUSH
3845: LD_INT 8
3847: LESS
3848: PUSH
3849: LD_EXP 16
3853: PPUSH
3854: CALL_OW 301
3858: OR
3859: IFFALSE 3823
// if IsDead ( Joan ) then
3861: LD_EXP 16
3865: PPUSH
3866: CALL_OW 301
3870: IFFALSE 3882
// begin blockSpawn := false ;
3872: LD_ADDR_EXP 30
3876: PUSH
3877: LD_INT 0
3879: ST_TO_ADDR
// exit ;
3880: GO 4225
// end ; InGameOn ;
3882: CALL_OW 8
// end ; if JMM in FilterAllUnits ( [ f_driving ] ) then
3886: LD_EXP 1
3890: PUSH
3891: LD_INT 55
3893: PUSH
3894: EMPTY
3895: LIST
3896: PPUSH
3897: CALL_OW 69
3901: IN
3902: IFFALSE 3925
// begin ComMoveUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 112
// wait ( 0 0$05 ) ;
3918: LD_INT 175
3920: PPUSH
3921: CALL_OW 67
// end ; ComExit ( JMM ) ;
3925: LD_EXP 1
3929: PPUSH
3930: CALL 80717 0 1
// wait ( 0 0$1 ) ;
3934: LD_INT 35
3936: PPUSH
3937: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3948: LD_EXP 16
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PPUSH
3962: LD_EXP 1
3966: PPUSH
3967: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3971: LD_EXP 16
3975: PPUSH
3976: LD_EXP 1
3980: PPUSH
3981: CALL_OW 296
3985: PUSH
3986: LD_INT 5
3988: LESS
3989: IFFALSE 3941
// ComTurnUnit ( Joan , JMM ) ;
3991: LD_EXP 16
3995: PPUSH
3996: LD_EXP 1
4000: PPUSH
4001: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
4005: LD_EXP 1
4009: PPUSH
4010: LD_EXP 16
4014: PPUSH
4015: CALL_OW 119
// wait ( 0 0$1 ) ;
4019: LD_INT 35
4021: PPUSH
4022: CALL_OW 67
// DialogueOn ;
4026: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
4030: LD_EXP 16
4034: PPUSH
4035: LD_STRING D5a-Joan-4
4037: PPUSH
4038: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
4042: LD_EXP 1
4046: PPUSH
4047: LD_STRING D5a-JMM-4
4049: PPUSH
4050: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
4054: LD_EXP 16
4058: PPUSH
4059: LD_STRING D5a-Joan-5
4061: PPUSH
4062: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4066: LD_EXP 1
4070: PPUSH
4071: LD_STRING D5a-JMM-5
4073: PPUSH
4074: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4078: LD_EXP 16
4082: PPUSH
4083: LD_STRING D5a-Joan-6
4085: PPUSH
4086: CALL_OW 88
// DialogueOff ;
4090: CALL_OW 7
// end ; DialogueOn ;
4094: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4098: LD_EXP 1
4102: PPUSH
4103: LD_STRING D6-JMM-1
4105: PPUSH
4106: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4110: LD_EXP 16
4114: PPUSH
4115: LD_STRING D6-Joan-1
4117: PPUSH
4118: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4122: LD_EXP 1
4126: PPUSH
4127: LD_STRING D6-JMM-2
4129: PPUSH
4130: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4134: LD_EXP 16
4138: PPUSH
4139: LD_STRING D6-Joan-2
4141: PPUSH
4142: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4146: LD_EXP 1
4150: PPUSH
4151: LD_STRING D6-JMM-3
4153: PPUSH
4154: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4158: LD_EXP 16
4162: PPUSH
4163: LD_STRING D6-Joan-3
4165: PPUSH
4166: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4170: LD_EXP 1
4174: PPUSH
4175: LD_STRING D6-JMM-4
4177: PPUSH
4178: CALL_OW 88
// DialogueOff ;
4182: CALL_OW 7
// InGameOff ;
4186: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4190: LD_EXP 16
4194: PPUSH
4195: LD_INT 1
4197: PPUSH
4198: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4202: LD_STRING MJ
4204: PPUSH
4205: CALL_OW 337
// joanStatus = 1 ;
4209: LD_ADDR_EXP 17
4213: PUSH
4214: LD_INT 1
4216: ST_TO_ADDR
// blockSpawn = 0 ;
4217: LD_ADDR_EXP 30
4221: PUSH
4222: LD_INT 0
4224: ST_TO_ADDR
// end ;
4225: LD_VAR 0 1
4229: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4230: LD_INT 0
4232: PPUSH
4233: PPUSH
// if not number or number > 8 then
4234: LD_VAR 0 1
4238: NOT
4239: PUSH
4240: LD_VAR 0 1
4244: PUSH
4245: LD_INT 8
4247: GREATER
4248: OR
4249: IFFALSE 4253
// exit ;
4251: GO 5801
// repeat wait ( 0 0$7 ) ;
4253: LD_INT 245
4255: PPUSH
4256: CALL_OW 67
// until blockSpawn = 0 ;
4260: LD_EXP 30
4264: PUSH
4265: LD_INT 0
4267: EQUAL
4268: IFFALSE 4253
// uc_side := 1 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 1
4277: ST_TO_ADDR
// uc_nation := 1 ;
4278: LD_ADDR_OWVAR 21
4282: PUSH
4283: LD_INT 1
4285: ST_TO_ADDR
// InitHc ;
4286: CALL_OW 19
// if number = 1 then
4290: LD_VAR 0 1
4294: PUSH
4295: LD_INT 1
4297: EQUAL
4298: IFFALSE 4474
// begin hc_class := 3 ;
4300: LD_ADDR_OWVAR 28
4304: PUSH
4305: LD_INT 3
4307: ST_TO_ADDR
// hc_sex := sex_male ;
4308: LD_ADDR_OWVAR 27
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4316: LD_ADDR_OWVAR 33
4320: PUSH
4321: LD_STRING SecondCharsGal
4323: ST_TO_ADDR
// hc_face_number := 55 ;
4324: LD_ADDR_OWVAR 34
4328: PUSH
4329: LD_INT 55
4331: ST_TO_ADDR
// hc_name := George McCarthy ;
4332: LD_ADDR_OWVAR 26
4336: PUSH
4337: LD_STRING George McCarthy
4339: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4340: LD_ADDR_OWVAR 29
4344: PUSH
4345: LD_INT 11
4347: PUSH
4348: LD_INT 10
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4355: LD_ADDR_OWVAR 30
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: LD_INT 2
4368: PUSH
4369: LD_INT 0
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4378: LD_ADDR_OWVAR 31
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: LD_INT 2
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: ST_TO_ADDR
// un = CreateHuman ;
4401: LD_ADDR_VAR 0 3
4405: PUSH
4406: CALL_OW 44
4410: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 23
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4426: LD_VAR 0 3
4430: PPUSH
4431: CALL_OW 87
// wait ( 0 0$1 ) ;
4435: LD_INT 35
4437: PPUSH
4438: CALL_OW 67
// DialogueOn ;
4442: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4446: LD_VAR 0 3
4450: PPUSH
4451: LD_STRING D11d-Sol4-1
4453: PPUSH
4454: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4458: LD_EXP 1
4462: PPUSH
4463: LD_STRING D11d-JMM-1
4465: PPUSH
4466: CALL_OW 88
// DialogueOff ;
4470: CALL_OW 7
// end ; if number = 2 then
4474: LD_VAR 0 1
4478: PUSH
4479: LD_INT 2
4481: EQUAL
4482: IFFALSE 4658
// begin hc_class := 1 ;
4484: LD_ADDR_OWVAR 28
4488: PUSH
4489: LD_INT 1
4491: ST_TO_ADDR
// hc_sex := sex_male ;
4492: LD_ADDR_OWVAR 27
4496: PUSH
4497: LD_INT 1
4499: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4500: LD_ADDR_OWVAR 33
4504: PUSH
4505: LD_STRING AmGalRemake
4507: ST_TO_ADDR
// hc_face_number := 7 ;
4508: LD_ADDR_OWVAR 34
4512: PUSH
4513: LD_INT 7
4515: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4516: LD_ADDR_OWVAR 26
4520: PUSH
4521: LD_STRING Bobby Jordan
4523: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4524: LD_ADDR_OWVAR 29
4528: PUSH
4529: LD_INT 9
4531: PUSH
4532: LD_INT 11
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4539: LD_ADDR_OWVAR 30
4543: PUSH
4544: LD_INT 1
4546: PUSH
4547: LD_INT 0
4549: PUSH
4550: LD_INT 0
4552: PUSH
4553: LD_INT 1
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4562: LD_ADDR_OWVAR 31
4566: PUSH
4567: LD_INT 2
4569: PUSH
4570: LD_INT 1
4572: PUSH
4573: LD_INT 1
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: ST_TO_ADDR
// un = CreateHuman ;
4585: LD_ADDR_VAR 0 3
4589: PUSH
4590: CALL_OW 44
4594: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4595: LD_VAR 0 3
4599: PPUSH
4600: LD_INT 24
4602: PPUSH
4603: LD_INT 1
4605: PPUSH
4606: CALL_OW 49
// wait ( 0 0$1 ) ;
4610: LD_INT 35
4612: PPUSH
4613: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4617: LD_VAR 0 3
4621: PPUSH
4622: CALL_OW 87
// DialogueOn ;
4626: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4630: LD_VAR 0 3
4634: PPUSH
4635: LD_STRING D11b-Sol3-1
4637: PPUSH
4638: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4642: LD_EXP 1
4646: PPUSH
4647: LD_STRING D11b-JMM-1
4649: PPUSH
4650: CALL_OW 88
// DialogueOff ;
4654: CALL_OW 7
// end ; if number = 3 then
4658: LD_VAR 0 1
4662: PUSH
4663: LD_INT 3
4665: EQUAL
4666: IFFALSE 4830
// begin hc_class := 1 ;
4668: LD_ADDR_OWVAR 28
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// hc_sex := sex_male ;
4676: LD_ADDR_OWVAR 27
4680: PUSH
4681: LD_INT 1
4683: ST_TO_ADDR
// hc_gallery := DJ ;
4684: LD_ADDR_OWVAR 33
4688: PUSH
4689: LD_STRING DJ
4691: ST_TO_ADDR
// hc_face_number := 1 ;
4692: LD_ADDR_OWVAR 34
4696: PUSH
4697: LD_INT 1
4699: ST_TO_ADDR
// hc_name := Darius Dajay ;
4700: LD_ADDR_OWVAR 26
4704: PUSH
4705: LD_STRING Darius Dajay
4707: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4708: LD_ADDR_OWVAR 29
4712: PUSH
4713: LD_INT 11
4715: PUSH
4716: LD_INT 11
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4723: LD_ADDR_OWVAR 30
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 0
4733: PUSH
4734: LD_INT 0
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4746: LD_ADDR_OWVAR 31
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: LD_INT 0
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: LD_INT 0
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: ST_TO_ADDR
// un = CreateHuman ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 44
4778: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 25
4786: PPUSH
4787: LD_INT 1
4789: PPUSH
4790: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4794: LD_VAR 0 3
4798: PPUSH
4799: CALL_OW 87
// wait ( 0 0$1 ) ;
4803: LD_INT 35
4805: PPUSH
4806: CALL_OW 67
// DialogueOn ;
4810: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_STRING D11f-Sol5-1
4821: PPUSH
4822: CALL_OW 88
// DialogueOff ;
4826: CALL_OW 7
// end ; if number = 4 then
4830: LD_VAR 0 1
4834: PUSH
4835: LD_INT 4
4837: EQUAL
4838: IFFALSE 4975
// begin hc_class := 2 ;
4840: LD_ADDR_OWVAR 28
4844: PUSH
4845: LD_INT 2
4847: ST_TO_ADDR
// hc_sex := sex_female ;
4848: LD_ADDR_OWVAR 27
4852: PUSH
4853: LD_INT 2
4855: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4856: LD_ADDR_OWVAR 33
4860: PUSH
4861: LD_STRING SecondCharsGal
4863: ST_TO_ADDR
// hc_face_number := 46 ;
4864: LD_ADDR_OWVAR 34
4868: PUSH
4869: LD_INT 46
4871: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4872: LD_ADDR_OWVAR 26
4876: PUSH
4877: LD_STRING Sylvia Creak
4879: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4880: LD_ADDR_OWVAR 29
4884: PUSH
4885: LD_INT 10
4887: PUSH
4888: LD_INT 9
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4895: LD_ADDR_OWVAR 30
4899: PUSH
4900: LD_INT 0
4902: PUSH
4903: LD_INT 1
4905: PUSH
4906: LD_INT 1
4908: PUSH
4909: LD_INT 1
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4918: LD_ADDR_OWVAR 31
4922: PUSH
4923: LD_INT 1
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 1
4931: PUSH
4932: LD_INT 1
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: ST_TO_ADDR
// un = CreateHuman ;
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: CALL_OW 44
4950: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4951: LD_VAR 0 3
4955: PPUSH
4956: LD_INT 26
4958: PPUSH
4959: LD_INT 1
4961: PPUSH
4962: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL_OW 87
// end ; if number = 5 then
4975: LD_VAR 0 1
4979: PUSH
4980: LD_INT 5
4982: EQUAL
4983: IFFALSE 5159
// begin hc_class := 1 ;
4985: LD_ADDR_OWVAR 28
4989: PUSH
4990: LD_INT 1
4992: ST_TO_ADDR
// hc_sex := sex_female ;
4993: LD_ADDR_OWVAR 27
4997: PUSH
4998: LD_INT 2
5000: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5001: LD_ADDR_OWVAR 33
5005: PUSH
5006: LD_STRING SecondCharsGal
5008: ST_TO_ADDR
// hc_face_number := 37 ;
5009: LD_ADDR_OWVAR 34
5013: PUSH
5014: LD_INT 37
5016: ST_TO_ADDR
// hc_name := Malena Johnson ;
5017: LD_ADDR_OWVAR 26
5021: PUSH
5022: LD_STRING Malena Johnson
5024: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
5025: LD_ADDR_OWVAR 29
5029: PUSH
5030: LD_INT 11
5032: PUSH
5033: LD_INT 10
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
5040: LD_ADDR_OWVAR 30
5044: PUSH
5045: LD_INT 1
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: LD_INT 0
5053: PUSH
5054: LD_INT 0
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
5063: LD_ADDR_OWVAR 31
5067: PUSH
5068: LD_INT 1
5070: PUSH
5071: LD_INT 1
5073: PUSH
5074: LD_INT 1
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: ST_TO_ADDR
// un = CreateHuman ;
5086: LD_ADDR_VAR 0 3
5090: PUSH
5091: CALL_OW 44
5095: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5096: LD_VAR 0 3
5100: PPUSH
5101: LD_INT 27
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5111: LD_VAR 0 3
5115: PPUSH
5116: CALL_OW 87
// wait ( 0 0$1 ) ;
5120: LD_INT 35
5122: PPUSH
5123: CALL_OW 67
// DialogueOn ;
5127: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5131: LD_VAR 0 3
5135: PPUSH
5136: LD_STRING D11c-FSol3-1
5138: PPUSH
5139: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5143: LD_EXP 1
5147: PPUSH
5148: LD_STRING D11c-JMM-1
5150: PPUSH
5151: CALL_OW 88
// DialogueOff ;
5155: CALL_OW 7
// end ; if number = 6 then
5159: LD_VAR 0 1
5163: PUSH
5164: LD_INT 6
5166: EQUAL
5167: IFFALSE 5341
// begin hc_class := 1 ;
5169: LD_ADDR_OWVAR 28
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// hc_sex := sex_male ;
5177: LD_ADDR_OWVAR 27
5181: PUSH
5182: LD_INT 1
5184: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5185: LD_ADDR_OWVAR 33
5189: PUSH
5190: LD_STRING AmGalRemake
5192: ST_TO_ADDR
// hc_face_number := 1 ;
5193: LD_ADDR_OWVAR 34
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// hc_name := Charles Brown ;
5201: LD_ADDR_OWVAR 26
5205: PUSH
5206: LD_STRING Charles Brown
5208: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5209: LD_ADDR_OWVAR 29
5213: PUSH
5214: LD_INT 12
5216: PUSH
5217: LD_INT 11
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5224: LD_ADDR_OWVAR 30
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: LD_INT 0
5234: PUSH
5235: LD_INT 0
5237: PUSH
5238: LD_INT 0
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5247: LD_ADDR_OWVAR 31
5251: PUSH
5252: LD_INT 3
5254: PUSH
5255: LD_INT 0
5257: PUSH
5258: LD_INT 1
5260: PUSH
5261: LD_INT 1
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: ST_TO_ADDR
// un = CreateHuman ;
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: CALL_OW 44
5279: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5280: LD_VAR 0 3
5284: PPUSH
5285: LD_INT 28
5287: PPUSH
5288: LD_INT 1
5290: PPUSH
5291: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5295: LD_VAR 0 3
5299: PPUSH
5300: CALL_OW 87
// wait ( 0 0$1 ) ;
5304: LD_INT 35
5306: PPUSH
5307: CALL_OW 67
// DialogueOn ;
5311: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5315: LD_VAR 0 3
5319: PPUSH
5320: LD_STRING D4-Sol1-5
5322: PPUSH
5323: CALL_OW 88
// DialogueOff ;
5327: CALL_OW 7
// tempCharles = un ;
5331: LD_ADDR_EXP 14
5335: PUSH
5336: LD_VAR 0 3
5340: ST_TO_ADDR
// end ; if number = 7 then
5341: LD_VAR 0 1
5345: PUSH
5346: LD_INT 7
5348: EQUAL
5349: IFFALSE 5621
// begin hc_class := 1 ;
5351: LD_ADDR_OWVAR 28
5355: PUSH
5356: LD_INT 1
5358: ST_TO_ADDR
// hc_sex := sex_female ;
5359: LD_ADDR_OWVAR 27
5363: PUSH
5364: LD_INT 2
5366: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5367: LD_ADDR_OWVAR 33
5371: PUSH
5372: LD_STRING AmGalRemake
5374: ST_TO_ADDR
// hc_face_number := 2 ;
5375: LD_ADDR_OWVAR 34
5379: PUSH
5380: LD_INT 2
5382: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5383: LD_ADDR_OWVAR 26
5387: PUSH
5388: LD_STRING Rebecca Macdonald
5390: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5391: LD_ADDR_OWVAR 29
5395: PUSH
5396: LD_INT 10
5398: PUSH
5399: LD_INT 10
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5406: LD_ADDR_OWVAR 30
5410: PUSH
5411: LD_INT 1
5413: PUSH
5414: LD_INT 0
5416: PUSH
5417: LD_INT 0
5419: PUSH
5420: LD_INT 1
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5429: LD_ADDR_OWVAR 31
5433: PUSH
5434: LD_INT 1
5436: PUSH
5437: LD_INT 0
5439: PUSH
5440: LD_INT 0
5442: PUSH
5443: LD_INT 1
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: ST_TO_ADDR
// un = CreateHuman ;
5452: LD_ADDR_VAR 0 3
5456: PUSH
5457: CALL_OW 44
5461: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5462: LD_VAR 0 3
5466: PPUSH
5467: LD_INT 29
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5477: LD_VAR 0 3
5481: PPUSH
5482: CALL_OW 87
// wait ( 0 0$1 ) ;
5486: LD_INT 35
5488: PPUSH
5489: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5493: LD_INT 30
5495: PPUSH
5496: LD_INT 22
5498: PUSH
5499: LD_INT 3
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 70
5510: IFFALSE 5621
// begin DialogueOn ;
5512: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5516: LD_VAR 0 3
5520: PPUSH
5521: CALL_OW 250
5525: PPUSH
5526: LD_VAR 0 3
5530: PPUSH
5531: CALL_OW 251
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 15
5541: NEG
5542: PPUSH
5543: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5547: LD_VAR 0 3
5551: PPUSH
5552: CALL_OW 250
5556: PPUSH
5557: LD_VAR 0 3
5561: PPUSH
5562: CALL_OW 251
5566: PPUSH
5567: LD_INT 1
5569: PPUSH
5570: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5574: LD_VAR 0 3
5578: PPUSH
5579: LD_STRING D11a-FSol2-1
5581: PPUSH
5582: CALL_OW 88
// DialogueOff ;
5586: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5590: LD_INT 3
5592: PPUSH
5593: LD_VAR 0 3
5597: PPUSH
5598: CALL_OW 471
// wait ( 0 0$2 ) ;
5602: LD_INT 70
5604: PPUSH
5605: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5609: LD_INT 3
5611: PPUSH
5612: LD_VAR 0 3
5616: PPUSH
5617: CALL_OW 472
// end ; end ; if number = 8 then
5621: LD_VAR 0 1
5625: PUSH
5626: LD_INT 8
5628: EQUAL
5629: IFFALSE 5785
// begin hc_class := 1 ;
5631: LD_ADDR_OWVAR 28
5635: PUSH
5636: LD_INT 1
5638: ST_TO_ADDR
// hc_sex := sex_female ;
5639: LD_ADDR_OWVAR 27
5643: PUSH
5644: LD_INT 2
5646: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5647: LD_ADDR_OWVAR 33
5651: PUSH
5652: LD_STRING SecondCharsGal
5654: ST_TO_ADDR
// hc_face_number := 45 ;
5655: LD_ADDR_OWVAR 34
5659: PUSH
5660: LD_INT 45
5662: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5663: LD_ADDR_OWVAR 26
5667: PUSH
5668: LD_STRING Margherite Simpson
5670: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5671: LD_ADDR_OWVAR 29
5675: PUSH
5676: LD_INT 12
5678: PUSH
5679: LD_INT 10
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5686: LD_ADDR_OWVAR 30
5690: PUSH
5691: LD_INT 1
5693: PUSH
5694: LD_INT 2
5696: PUSH
5697: LD_INT 0
5699: PUSH
5700: LD_INT 0
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5709: LD_ADDR_OWVAR 31
5713: PUSH
5714: LD_INT 1
5716: PUSH
5717: LD_INT 2
5719: PUSH
5720: LD_INT 0
5722: PUSH
5723: LD_INT 1
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: ST_TO_ADDR
// un = CreateHuman ;
5732: LD_ADDR_VAR 0 3
5736: PUSH
5737: CALL_OW 44
5741: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5742: LD_VAR 0 3
5746: PPUSH
5747: LD_INT 33
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5757: LD_VAR 0 3
5761: PPUSH
5762: CALL_OW 87
// wait ( 0 0$1 ) ;
5766: LD_INT 35
5768: PPUSH
5769: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5773: LD_VAR 0 3
5777: PPUSH
5778: LD_STRING D11e-FSol4-1
5780: PPUSH
5781: CALL_OW 88
// end ; arrivals := arrivals union un ;
5785: LD_ADDR_EXP 45
5789: PUSH
5790: LD_EXP 45
5794: PUSH
5795: LD_VAR 0 3
5799: UNION
5800: ST_TO_ADDR
// end ; end_of_file
5801: LD_VAR 0 2
5805: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5806: LD_INT 0
5808: PPUSH
5809: PPUSH
// ruAttackers := [ ] ;
5810: LD_ADDR_EXP 48
5814: PUSH
5815: EMPTY
5816: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5817: LD_ADDR_EXP 49
5821: PUSH
5822: EMPTY
5823: ST_TO_ADDR
// if Difficulty < 3 then
5824: LD_OWVAR 67
5828: PUSH
5829: LD_INT 3
5831: LESS
5832: IFFALSE 5849
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5834: LD_INT 130
5836: PPUSH
5837: LD_INT 81
5839: PPUSH
5840: CALL_OW 428
5844: PPUSH
5845: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5849: LD_INT 3
5851: PPUSH
5852: LD_INT 3
5854: PPUSH
5855: LD_INT 2
5857: PPUSH
5858: LD_EXP 35
5862: PPUSH
5863: LD_EXP 36
5867: PPUSH
5868: CALL_OW 12
5872: PPUSH
5873: LD_INT 2
5875: PPUSH
5876: LD_INT 4
5878: PPUSH
5879: CALL 7668 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5883: LD_INT 3
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: LD_INT 8
5891: PPUSH
5892: LD_EXP 35
5896: PPUSH
5897: LD_EXP 36
5901: PPUSH
5902: CALL_OW 12
5906: PPUSH
5907: LD_INT 1
5909: PPUSH
5910: LD_INT 4
5912: PPUSH
5913: CALL 7668 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5917: LD_INT 3
5919: PPUSH
5920: LD_INT 3
5922: PPUSH
5923: LD_INT 67
5925: PPUSH
5926: LD_EXP 35
5930: PPUSH
5931: LD_EXP 36
5935: PPUSH
5936: CALL_OW 12
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 2
5946: PPUSH
5947: CALL 7668 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5951: LD_INT 3
5953: PPUSH
5954: LD_INT 3
5956: PPUSH
5957: LD_INT 21
5959: PPUSH
5960: LD_EXP 35
5964: PPUSH
5965: LD_EXP 36
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 3
5977: PPUSH
5978: LD_INT 6
5980: PPUSH
5981: CALL 7668 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5985: LD_INT 3
5987: PPUSH
5988: LD_INT 3
5990: PPUSH
5991: LD_INT 17
5993: PPUSH
5994: LD_EXP 35
5998: PPUSH
5999: LD_EXP 36
6003: PPUSH
6004: CALL_OW 12
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: LD_INT 6
6014: PPUSH
6015: CALL 7668 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6019: LD_INT 3
6021: PPUSH
6022: LD_INT 3
6024: PPUSH
6025: LD_INT 32
6027: PPUSH
6028: LD_EXP 35
6032: PPUSH
6033: LD_EXP 36
6037: PPUSH
6038: CALL_OW 12
6042: PPUSH
6043: LD_INT 4
6045: PPUSH
6046: LD_INT 2
6048: PPUSH
6049: CALL 7668 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6053: LD_ADDR_VAR 0 2
6057: PUSH
6058: LD_INT 22
6060: PUSH
6061: LD_INT 3
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 21
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 30
6080: PUSH
6081: LD_INT 32
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6139
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6101: LD_INT 3
6103: PPUSH
6104: LD_INT 3
6106: PPUSH
6107: LD_VAR 0 2
6111: PPUSH
6112: LD_EXP 35
6116: PPUSH
6117: LD_EXP 36
6121: PPUSH
6122: CALL_OW 12
6126: PPUSH
6127: LD_INT 1
6129: PPUSH
6130: LD_INT 1
6132: PPUSH
6133: CALL 7668 0 6
6137: GO 6098
6139: POP
6140: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6141: LD_ADDR_VAR 0 2
6145: PUSH
6146: LD_INT 22
6148: PUSH
6149: LD_INT 3
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: LD_INT 30
6168: PUSH
6169: LD_INT 31
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 69
6185: PUSH
6186: FOR_IN
6187: IFFALSE 6215
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6189: LD_EXP 35
6193: PPUSH
6194: LD_EXP 36
6198: PPUSH
6199: CALL_OW 12
6203: PPUSH
6204: LD_VAR 0 2
6208: PPUSH
6209: CALL 7778 0 2
6213: GO 6186
6215: POP
6216: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6217: LD_INT 3
6219: PPUSH
6220: LD_INT 32
6222: PPUSH
6223: LD_INT 3
6225: PPUSH
6226: CALL 8057 0 3
// end ;
6230: LD_VAR 0 1
6234: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6235: LD_INT 22
6237: PUSH
6238: LD_INT 3
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 32
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PPUSH
6259: CALL_OW 69
6263: IFFALSE 6340
6265: GO 6267
6267: DISABLE
6268: LD_INT 0
6270: PPUSH
// begin enable ;
6271: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6272: LD_ADDR_VAR 0 1
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 32
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: CALL_OW 69
6305: PUSH
6306: FOR_IN
6307: IFFALSE 6338
// if GetFuel ( i ) < 3 then
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 261
6318: PUSH
6319: LD_INT 3
6321: LESS
6322: IFFALSE 6336
// SetFuel ( i , 3 ) ;
6324: LD_VAR 0 1
6328: PPUSH
6329: LD_INT 3
6331: PPUSH
6332: CALL_OW 240
6336: GO 6306
6338: POP
6339: POP
// end ;
6340: PPOPN 1
6342: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6343: LD_OWVAR 67
6347: PUSH
6348: LD_INT 1
6350: GREATER
6351: IFFALSE 6920
6353: GO 6355
6355: DISABLE
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
6360: PPUSH
6361: PPUSH
// begin uc_side := 3 ;
6362: LD_ADDR_OWVAR 20
6366: PUSH
6367: LD_INT 3
6369: ST_TO_ADDR
// uc_nation := 3 ;
6370: LD_ADDR_OWVAR 21
6374: PUSH
6375: LD_INT 3
6377: ST_TO_ADDR
// for i := 1 to 2 do
6378: LD_ADDR_VAR 0 1
6382: PUSH
6383: DOUBLE
6384: LD_INT 1
6386: DEC
6387: ST_TO_ADDR
6388: LD_INT 2
6390: PUSH
6391: FOR_TO
6392: IFFALSE 6506
// begin InitHC_All ( ) ;
6394: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6398: LD_INT 0
6400: PPUSH
6401: LD_INT 4
6403: PUSH
6404: LD_INT 5
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 6
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PUSH
6419: LD_OWVAR 67
6423: ARRAY
6424: PPUSH
6425: CALL_OW 381
// un := CreateHuman ;
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: CALL_OW 44
6438: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6439: LD_VAR 0 2
6443: PPUSH
6444: LD_INT 91
6446: PPUSH
6447: LD_INT 87
6449: PPUSH
6450: LD_INT 3
6452: PPUSH
6453: LD_INT 0
6455: PPUSH
6456: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6460: LD_ADDR_EXP 49
6464: PUSH
6465: LD_EXP 49
6469: PPUSH
6470: LD_EXP 49
6474: PUSH
6475: LD_INT 1
6477: PLUS
6478: PPUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: CALL_OW 1
6488: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6489: LD_VAR 0 2
6493: PPUSH
6494: LD_INT 46
6496: PPUSH
6497: LD_INT 78
6499: PPUSH
6500: CALL_OW 114
// end ;
6504: GO 6391
6506: POP
6507: POP
// if Difficulty > 2 then
6508: LD_OWVAR 67
6512: PUSH
6513: LD_INT 2
6515: GREATER
6516: IFFALSE 6648
// begin for i := 1 to 3 do
6518: LD_ADDR_VAR 0 1
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_INT 3
6530: PUSH
6531: FOR_TO
6532: IFFALSE 6646
// begin InitHC_All ( ) ;
6534: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6538: LD_INT 0
6540: PPUSH
6541: LD_INT 4
6543: PUSH
6544: LD_INT 5
6546: PUSH
6547: LD_INT 6
6549: PUSH
6550: LD_INT 6
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: LD_OWVAR 67
6563: ARRAY
6564: PPUSH
6565: CALL_OW 381
// un := CreateHuman ;
6569: LD_ADDR_VAR 0 2
6573: PUSH
6574: CALL_OW 44
6578: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6579: LD_VAR 0 2
6583: PPUSH
6584: LD_INT 91
6586: PPUSH
6587: LD_INT 87
6589: PPUSH
6590: LD_INT 3
6592: PPUSH
6593: LD_INT 0
6595: PPUSH
6596: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6600: LD_ADDR_EXP 49
6604: PUSH
6605: LD_EXP 49
6609: PPUSH
6610: LD_EXP 49
6614: PUSH
6615: LD_INT 1
6617: PLUS
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: CALL_OW 1
6628: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6629: LD_VAR 0 2
6633: PPUSH
6634: LD_INT 89
6636: PPUSH
6637: LD_INT 148
6639: PPUSH
6640: CALL_OW 114
// end ;
6644: GO 6531
6646: POP
6647: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: LD_INT 33
6655: PUSH
6656: LD_INT 61
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 49
6665: PUSH
6666: LD_INT 85
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 76
6675: PUSH
6676: LD_INT 99
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 81
6685: PUSH
6686: LD_INT 135
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 111
6695: PUSH
6696: LD_INT 155
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 147
6705: PUSH
6706: LD_INT 158
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6721: LD_INT 1050
6723: PPUSH
6724: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6728: LD_ADDR_VAR 0 1
6732: PUSH
6733: DOUBLE
6734: LD_INT 1
6736: DEC
6737: ST_TO_ADDR
6738: LD_EXP 49
6742: PUSH
6743: FOR_TO
6744: IFFALSE 6911
// begin un := ruAttackersInForest [ i ] ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_EXP 49
6755: PUSH
6756: LD_VAR 0 1
6760: ARRAY
6761: ST_TO_ADDR
// tag := GetTag ( un ) ;
6762: LD_ADDR_VAR 0 4
6766: PUSH
6767: LD_VAR 0 2
6771: PPUSH
6772: CALL_OW 110
6776: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6777: LD_VAR 0 2
6781: PPUSH
6782: CALL_OW 302
6786: PUSH
6787: LD_VAR 0 2
6791: PPUSH
6792: CALL_OW 314
6796: NOT
6797: AND
6798: IFFALSE 6909
// begin if tag <> i then
6800: LD_VAR 0 4
6804: PUSH
6805: LD_VAR 0 1
6809: NONEQUAL
6810: IFFALSE 6838
// begin SetTag ( un , i ) ;
6812: LD_VAR 0 2
6816: PPUSH
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 109
// tag := i ;
6826: LD_ADDR_VAR 0 4
6830: PUSH
6831: LD_VAR 0 1
6835: ST_TO_ADDR
// end else
6836: GO 6870
// begin SetTag ( un , i + 1 ) ;
6838: LD_VAR 0 2
6842: PPUSH
6843: LD_VAR 0 1
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: PPUSH
6852: CALL_OW 109
// tag := i + 1 ;
6856: LD_ADDR_VAR 0 4
6860: PUSH
6861: LD_VAR 0 1
6865: PUSH
6866: LD_INT 1
6868: PLUS
6869: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6870: LD_VAR 0 2
6874: PPUSH
6875: LD_VAR 0 3
6879: PUSH
6880: LD_VAR 0 4
6884: ARRAY
6885: PUSH
6886: LD_INT 1
6888: ARRAY
6889: PPUSH
6890: LD_VAR 0 3
6894: PUSH
6895: LD_VAR 0 4
6899: ARRAY
6900: PUSH
6901: LD_INT 2
6903: ARRAY
6904: PPUSH
6905: CALL_OW 114
// end ; end ;
6909: GO 6743
6911: POP
6912: POP
// until not ruAttackersInForest ;
6913: LD_EXP 49
6917: NOT
6918: IFFALSE 6721
// end ;
6920: PPOPN 4
6922: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6923: LD_INT 10
6925: PPUSH
6926: LD_INT 22
6928: PUSH
6929: LD_INT 1
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PPUSH
6936: CALL_OW 70
6940: IFFALSE 7289
6942: GO 6944
6944: DISABLE
6945: LD_INT 0
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
// begin enable ;
6951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_INT 22
6959: PUSH
6960: LD_INT 3
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 25
6969: PUSH
6970: LD_INT 1
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 120
6979: PUSH
6980: LD_INT 111
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: PPUSH
6992: CALL_OW 69
6996: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
6997: LD_ADDR_VAR 0 3
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 50
7014: PUSH
7015: EMPTY
7016: LIST
7017: PUSH
7018: LD_INT 2
7020: PUSH
7021: LD_INT 30
7023: PUSH
7024: LD_INT 4
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 30
7033: PUSH
7034: LD_INT 5
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: PPUSH
7051: CALL_OW 69
7055: ST_TO_ADDR
// if not tmp then
7056: LD_VAR 0 2
7060: NOT
7061: IFFALSE 7159
// begin if not bar then
7063: LD_VAR 0 3
7067: NOT
7068: IFFALSE 7073
// begin disable ;
7070: DISABLE
// exit ;
7071: GO 7289
// end ; tmp := [ ] ;
7073: LD_ADDR_VAR 0 2
7077: PUSH
7078: EMPTY
7079: ST_TO_ADDR
// for i in bar do
7080: LD_ADDR_VAR 0 1
7084: PUSH
7085: LD_VAR 0 3
7089: PUSH
7090: FOR_IN
7091: IFFALSE 7116
// tmp := tmp union UnitsInside ( i ) ;
7093: LD_ADDR_VAR 0 2
7097: PUSH
7098: LD_VAR 0 2
7102: PUSH
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL_OW 313
7112: UNION
7113: ST_TO_ADDR
7114: GO 7090
7116: POP
7117: POP
// if not tmp then
7118: LD_VAR 0 2
7122: NOT
7123: IFFALSE 7128
// begin disable ;
7125: DISABLE
// exit ;
7126: GO 7289
// end ; for i in tmp do
7128: LD_ADDR_VAR 0 1
7132: PUSH
7133: LD_VAR 0 2
7137: PUSH
7138: FOR_IN
7139: IFFALSE 7155
// SetTag ( i , 111 ) ;
7141: LD_VAR 0 1
7145: PPUSH
7146: LD_INT 111
7148: PPUSH
7149: CALL_OW 109
7153: GO 7138
7155: POP
7156: POP
// end else
7157: GO 7289
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7159: LD_ADDR_VAR 0 4
7163: PUSH
7164: LD_INT 10
7166: PPUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PPUSH
7177: CALL_OW 70
7181: ST_TO_ADDR
// for i in tmp do
7182: LD_ADDR_VAR 0 1
7186: PUSH
7187: LD_VAR 0 2
7191: PUSH
7192: FOR_IN
7193: IFFALSE 7287
// if IsOk ( i ) then
7195: LD_VAR 0 1
7199: PPUSH
7200: CALL_OW 302
7204: IFFALSE 7285
// begin if IsInUnit ( i ) then
7206: LD_VAR 0 1
7210: PPUSH
7211: CALL_OW 310
7215: IFFALSE 7226
// ComExitBuilding ( i ) ;
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 122
// wait ( 3 ) ;
7226: LD_INT 3
7228: PPUSH
7229: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7233: LD_VAR 0 1
7237: PPUSH
7238: LD_VAR 0 4
7242: PPUSH
7243: LD_VAR 0 1
7247: PPUSH
7248: CALL_OW 74
7252: PPUSH
7253: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7257: LD_VAR 0 1
7261: PPUSH
7262: LD_VAR 0 3
7266: PUSH
7267: LD_INT 1
7269: PPUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: CALL_OW 12
7279: ARRAY
7280: PPUSH
7281: CALL_OW 180
// end ;
7285: GO 7192
7287: POP
7288: POP
// end ; end ;
7289: PPOPN 4
7291: END
// every 3 3$00 trigger tick > 2 2$00 and Prob ( 50 ) do var un ;
7292: LD_OWVAR 1
7296: PUSH
7297: LD_INT 4200
7299: GREATER
7300: PUSH
7301: LD_INT 50
7303: PPUSH
7304: CALL_OW 13
7308: AND
7309: IFFALSE 7396
7311: GO 7313
7313: DISABLE
7314: LD_INT 0
7316: PPUSH
// begin uc_side := 3 ;
7317: LD_ADDR_OWVAR 20
7321: PUSH
7322: LD_INT 3
7324: ST_TO_ADDR
// uc_nation := nation_russian ;
7325: LD_ADDR_OWVAR 21
7329: PUSH
7330: LD_INT 3
7332: ST_TO_ADDR
// PrepareEngineer ( false , 2 ) ;
7333: LD_INT 0
7335: PPUSH
7336: LD_INT 2
7338: PPUSH
7339: CALL_OW 382
// un := CreateHuman ;
7343: LD_ADDR_VAR 0 1
7347: PUSH
7348: CALL_OW 44
7352: ST_TO_ADDR
// PlaceUnitXYR ( un , 51 , 7 , 12 , true ) ;
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT 51
7360: PPUSH
7361: LD_INT 7
7363: PPUSH
7364: LD_INT 12
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 50
// wait ( 0 0$1 ) ;
7374: LD_INT 35
7376: PPUSH
7377: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7381: LD_VAR 0 1
7385: PPUSH
7386: LD_INT 106
7388: PPUSH
7389: LD_INT 83
7391: PPUSH
7392: CALL_OW 111
// end ;
7396: PPOPN 1
7398: END
// every 3 3$30 trigger tick > 10 10$00 and Prob ( 45 ) do var un ;
7399: LD_OWVAR 1
7403: PUSH
7404: LD_INT 21000
7406: GREATER
7407: PUSH
7408: LD_INT 45
7410: PPUSH
7411: CALL_OW 13
7415: AND
7416: IFFALSE 7527
7418: GO 7420
7420: DISABLE
7421: LD_INT 0
7423: PPUSH
// begin uc_side := 3 ;
7424: LD_ADDR_OWVAR 20
7428: PUSH
7429: LD_INT 3
7431: ST_TO_ADDR
// uc_nation := nation_russian ;
7432: LD_ADDR_OWVAR 21
7436: PUSH
7437: LD_INT 3
7439: ST_TO_ADDR
// PrepareScientist ( false , 2 ) ;
7440: LD_INT 0
7442: PPUSH
7443: LD_INT 2
7445: PPUSH
7446: CALL_OW 384
// un := CreateHuman ;
7450: LD_ADDR_VAR 0 1
7454: PUSH
7455: CALL_OW 44
7459: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 18 , 15 , true ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_INT 91
7467: PPUSH
7468: LD_INT 18
7470: PPUSH
7471: LD_INT 15
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: CALL_OW 50
// wait ( 0 0$1 ) ;
7481: LD_INT 35
7483: PPUSH
7484: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7488: LD_VAR 0 1
7492: PPUSH
7493: LD_INT 106
7495: PPUSH
7496: LD_INT 83
7498: PPUSH
7499: CALL_OW 111
// AddComEnterUnit ( un , ruarm2 ) ;
7503: LD_VAR 0 1
7507: PPUSH
7508: LD_INT 67
7510: PPUSH
7511: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
7515: LD_VAR 0 1
7519: PPUSH
7520: LD_INT 1
7522: PPUSH
7523: CALL_OW 183
// end ; end_of_file
7527: PPOPN 1
7529: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7530: LD_INT 0
7532: PPUSH
7533: PPUSH
7534: PPUSH
// if not characters then
7535: LD_VAR 0 1
7539: NOT
7540: IFFALSE 7544
// exit ;
7542: GO 7623
// speaker := characters [ rand ( 1 , characters ) ] ;
7544: LD_ADDR_VAR 0 6
7548: PUSH
7549: LD_VAR 0 1
7553: PUSH
7554: LD_INT 1
7556: PPUSH
7557: LD_VAR 0 1
7561: PPUSH
7562: CALL_OW 12
7566: ARRAY
7567: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7568: LD_VAR 0 6
7572: PPUSH
7573: CALL_OW 258
7577: PUSH
7578: LD_INT 1
7580: EQUAL
7581: IFFALSE 7599
// Say ( speaker , dialogMID ) else
7583: LD_VAR 0 6
7587: PPUSH
7588: LD_VAR 0 2
7592: PPUSH
7593: CALL_OW 88
7597: GO 7613
// Say ( speaker , dialogFID ) ;
7599: LD_VAR 0 6
7603: PPUSH
7604: LD_VAR 0 3
7608: PPUSH
7609: CALL_OW 88
// result := speaker ;
7613: LD_ADDR_VAR 0 4
7617: PUSH
7618: LD_VAR 0 6
7622: ST_TO_ADDR
// end ;
7623: LD_VAR 0 4
7627: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7628: LD_INT 0
7630: PPUSH
7631: PPUSH
// for i in charactersList do
7632: LD_ADDR_VAR 0 4
7636: PUSH
7637: LD_VAR 0 1
7641: PUSH
7642: FOR_IN
7643: IFFALSE 7661
// SaveCharacters ( i , ident ) ;
7645: LD_VAR 0 4
7649: PPUSH
7650: LD_VAR 0 2
7654: PPUSH
7655: CALL_OW 38
7659: GO 7642
7661: POP
7662: POP
// end ;
7663: LD_VAR 0 3
7667: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7668: LD_INT 0
7670: PPUSH
7671: PPUSH
7672: PPUSH
7673: PPUSH
// for i = 1 to count do
7674: LD_ADDR_VAR 0 8
7678: PUSH
7679: DOUBLE
7680: LD_INT 1
7682: DEC
7683: ST_TO_ADDR
7684: LD_VAR 0 6
7688: PUSH
7689: FOR_TO
7690: IFFALSE 7771
// begin uc_side = side ;
7692: LD_ADDR_OWVAR 20
7696: PUSH
7697: LD_VAR 0 1
7701: ST_TO_ADDR
// uc_nation = nation ;
7702: LD_ADDR_OWVAR 21
7706: PUSH
7707: LD_VAR 0 2
7711: ST_TO_ADDR
// hc_gallery =  ;
7712: LD_ADDR_OWVAR 33
7716: PUSH
7717: LD_STRING 
7719: ST_TO_ADDR
// hc_name =  ;
7720: LD_ADDR_OWVAR 26
7724: PUSH
7725: LD_STRING 
7727: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7728: LD_INT 0
7730: PPUSH
7731: LD_VAR 0 5
7735: PPUSH
7736: LD_VAR 0 4
7740: PPUSH
7741: CALL_OW 380
// un = CreateHuman ;
7745: LD_ADDR_VAR 0 10
7749: PUSH
7750: CALL_OW 44
7754: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7755: LD_VAR 0 10
7759: PPUSH
7760: LD_VAR 0 3
7764: PPUSH
7765: CALL_OW 52
// end ;
7769: GO 7689
7771: POP
7772: POP
// end ;
7773: LD_VAR 0 7
7777: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7778: LD_INT 0
7780: PPUSH
7781: PPUSH
7782: PPUSH
// uc_side := GetSide ( b ) ;
7783: LD_ADDR_OWVAR 20
7787: PUSH
7788: LD_VAR 0 2
7792: PPUSH
7793: CALL_OW 255
7797: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7798: LD_ADDR_OWVAR 21
7802: PUSH
7803: LD_VAR 0 2
7807: PPUSH
7808: CALL_OW 248
7812: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7813: LD_INT 0
7815: PPUSH
7816: LD_INT 1
7818: PPUSH
7819: LD_VAR 0 1
7823: PPUSH
7824: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7828: LD_ADDR_VAR 0 5
7832: PUSH
7833: LD_VAR 0 2
7837: PPUSH
7838: CALL_OW 254
7842: PUSH
7843: LD_INT 3
7845: MINUS
7846: ST_TO_ADDR
// if dir < 0 then
7847: LD_VAR 0 5
7851: PUSH
7852: LD_INT 0
7854: LESS
7855: IFFALSE 7871
// dir := 6 + dir ;
7857: LD_ADDR_VAR 0 5
7861: PUSH
7862: LD_INT 6
7864: PUSH
7865: LD_VAR 0 5
7869: PLUS
7870: ST_TO_ADDR
// un := CreateHuman ;
7871: LD_ADDR_VAR 0 4
7875: PUSH
7876: CALL_OW 44
7880: ST_TO_ADDR
// SetDir ( un , dir ) ;
7881: LD_VAR 0 4
7885: PPUSH
7886: LD_VAR 0 5
7890: PPUSH
7891: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7895: LD_VAR 0 4
7899: PPUSH
7900: LD_VAR 0 2
7904: PPUSH
7905: CALL_OW 52
// end ;
7909: LD_VAR 0 3
7913: RET
// export function PrepareDifficulty ; begin
7914: LD_INT 0
7916: PPUSH
// case Difficulty of 1 :
7917: LD_OWVAR 67
7921: PUSH
7922: LD_INT 1
7924: DOUBLE
7925: EQUAL
7926: IFTRUE 7930
7928: GO 7949
7930: POP
// begin RuSolMinLevel = 2 ;
7931: LD_ADDR_EXP 35
7935: PUSH
7936: LD_INT 2
7938: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7939: LD_ADDR_EXP 36
7943: PUSH
7944: LD_INT 3
7946: ST_TO_ADDR
// end ; 2 :
7947: GO 8010
7949: LD_INT 2
7951: DOUBLE
7952: EQUAL
7953: IFTRUE 7957
7955: GO 7976
7957: POP
// begin RuSolMinLevel = 3 ;
7958: LD_ADDR_EXP 35
7962: PUSH
7963: LD_INT 3
7965: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7966: LD_ADDR_EXP 36
7970: PUSH
7971: LD_INT 5
7973: ST_TO_ADDR
// end ; 3 .. 4 :
7974: GO 8010
7976: LD_INT 3
7978: DOUBLE
7979: GREATEREQUAL
7980: IFFALSE 7988
7982: LD_INT 4
7984: DOUBLE
7985: LESSEQUAL
7986: IFTRUE 7990
7988: GO 8009
7990: POP
// begin RuSolMinLevel = 4 ;
7991: LD_ADDR_EXP 35
7995: PUSH
7996: LD_INT 4
7998: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7999: LD_ADDR_EXP 36
8003: PUSH
8004: LD_INT 6
8006: ST_TO_ADDR
// end ; end ;
8007: GO 8010
8009: POP
// end ;
8010: LD_VAR 0 1
8014: RET
// export function ShowQuery1 ; begin
8015: LD_INT 0
8017: PPUSH
// result := Query ( QKill ) ;
8018: LD_ADDR_VAR 0 1
8022: PUSH
8023: LD_STRING QKill
8025: PPUSH
8026: CALL_OW 97
8030: ST_TO_ADDR
// end ;
8031: LD_VAR 0 1
8035: RET
// export function ShowQuery2 ; begin
8036: LD_INT 0
8038: PPUSH
// result := Query ( QKill2 ) ;
8039: LD_ADDR_VAR 0 1
8043: PUSH
8044: LD_STRING QKill2
8046: PPUSH
8047: CALL_OW 97
8051: ST_TO_ADDR
// end ;
8052: LD_VAR 0 1
8056: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
8057: LD_INT 0
8059: PPUSH
8060: PPUSH
8061: PPUSH
8062: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
8063: LD_ADDR_VAR 0 7
8067: PUSH
8068: LD_INT 48
8070: PUSH
8071: LD_INT 49
8073: PUSH
8074: LD_INT 50
8076: PUSH
8077: LD_INT 20
8079: PUSH
8080: LD_INT 1
8082: PUSH
8083: LD_INT 51
8085: PUSH
8086: LD_INT 52
8088: PUSH
8089: LD_INT 69
8091: PUSH
8092: LD_INT 39
8094: PUSH
8095: LD_INT 34
8097: PUSH
8098: LD_INT 40
8100: PUSH
8101: LD_INT 53
8103: PUSH
8104: LD_INT 71
8106: PUSH
8107: LD_INT 57
8109: PUSH
8110: LD_INT 58
8112: PUSH
8113: LD_INT 44
8115: PUSH
8116: LD_INT 32
8118: PUSH
8119: LD_INT 27
8121: PUSH
8122: LD_INT 23
8124: PUSH
8125: LD_INT 33
8127: PUSH
8128: LD_INT 59
8130: PUSH
8131: LD_INT 54
8133: PUSH
8134: LD_INT 55
8136: PUSH
8137: LD_INT 56
8139: PUSH
8140: LD_INT 63
8142: PUSH
8143: LD_INT 64
8145: PUSH
8146: LD_INT 65
8148: PUSH
8149: LD_INT 30
8151: PUSH
8152: LD_INT 31
8154: PUSH
8155: LD_INT 21
8157: PUSH
8158: LD_INT 22
8160: PUSH
8161: LD_INT 25
8163: PUSH
8164: LD_INT 82
8166: PUSH
8167: LD_INT 83
8169: PUSH
8170: LD_INT 84
8172: PUSH
8173: LD_INT 85
8175: PUSH
8176: LD_INT 86
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: ST_TO_ADDR
// for i = 1 to list do
8218: LD_ADDR_VAR 0 5
8222: PUSH
8223: DOUBLE
8224: LD_INT 1
8226: DEC
8227: ST_TO_ADDR
8228: LD_VAR 0 7
8232: PUSH
8233: FOR_TO
8234: IFFALSE 8306
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
8236: LD_VAR 0 7
8240: PUSH
8241: LD_VAR 0 5
8245: ARRAY
8246: PPUSH
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 321
8256: PUSH
8257: LD_INT 1
8259: EQUAL
8260: PUSH
8261: LD_VAR 0 7
8265: PUSH
8266: LD_VAR 0 5
8270: ARRAY
8271: PPUSH
8272: LD_VAR 0 3
8276: PPUSH
8277: CALL_OW 482
8281: AND
8282: IFFALSE 8304
// AddComResearch ( lab , list [ i ] ) ;
8284: LD_VAR 0 2
8288: PPUSH
8289: LD_VAR 0 7
8293: PUSH
8294: LD_VAR 0 5
8298: ARRAY
8299: PPUSH
8300: CALL_OW 184
8304: GO 8233
8306: POP
8307: POP
// end ;
8308: LD_VAR 0 4
8312: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8313: LD_INT 0
8315: PPUSH
8316: PPUSH
8317: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8318: LD_INT 22
8320: PUSH
8321: LD_VAR 0 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 21
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PPUSH
8344: CALL_OW 69
8348: PUSH
8349: LD_VAR 0 3
8353: LESSEQUAL
8354: IFFALSE 8462
// begin for i = 1 to vehCount do
8356: LD_ADDR_VAR 0 9
8360: PUSH
8361: DOUBLE
8362: LD_INT 1
8364: DEC
8365: ST_TO_ADDR
8366: LD_VAR 0 3
8370: PUSH
8371: FOR_TO
8372: IFFALSE 8460
// begin weapon := weaponTab [ i ] ;
8374: LD_ADDR_VAR 0 10
8378: PUSH
8379: LD_VAR 0 4
8383: PUSH
8384: LD_VAR 0 9
8388: ARRAY
8389: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8390: LD_VAR 0 10
8394: PUSH
8395: LD_INT 46
8397: EQUAL
8398: IFFALSE 8429
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8400: LD_VAR 0 2
8404: PPUSH
8405: LD_INT 24
8407: PPUSH
8408: LD_VAR 0 5
8412: PPUSH
8413: LD_VAR 0 6
8417: PPUSH
8418: LD_VAR 0 10
8422: PPUSH
8423: CALL_OW 185
8427: GO 8458
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8429: LD_VAR 0 2
8433: PPUSH
8434: LD_VAR 0 7
8438: PPUSH
8439: LD_VAR 0 5
8443: PPUSH
8444: LD_VAR 0 6
8448: PPUSH
8449: LD_VAR 0 10
8453: PPUSH
8454: CALL_OW 185
// end ;
8458: GO 8371
8460: POP
8461: POP
// end ; end ;
8462: LD_VAR 0 8
8466: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8467: LD_INT 0
8469: PPUSH
8470: PPUSH
8471: PPUSH
8472: PPUSH
8473: PPUSH
8474: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8475: LD_ADDR_VAR 0 8
8479: PUSH
8480: LD_VAR 0 2
8484: PPUSH
8485: CALL_OW 313
8489: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8490: LD_ADDR_VAR 0 9
8494: PUSH
8495: LD_VAR 0 3
8499: PPUSH
8500: LD_INT 22
8502: PUSH
8503: LD_VAR 0 1
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: LD_INT 25
8514: PUSH
8515: LD_INT 2
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: LD_INT 24
8524: PUSH
8525: LD_INT 750
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 3
8534: PUSH
8535: LD_INT 54
8537: PUSH
8538: EMPTY
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 70
8555: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8556: LD_ADDR_VAR 0 6
8560: PUSH
8561: LD_VAR 0 3
8565: PPUSH
8566: LD_INT 22
8568: PUSH
8569: LD_VAR 0 1
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 21
8580: PUSH
8581: LD_INT 3
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 3
8590: PUSH
8591: LD_INT 24
8593: PUSH
8594: LD_INT 1000
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: LIST
8609: PUSH
8610: EMPTY
8611: LIST
8612: PPUSH
8613: CALL_OW 70
8617: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8618: LD_VAR 0 6
8622: NOT
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_VAR 0 1
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 25
8638: PUSH
8639: LD_INT 2
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 24
8648: PUSH
8649: LD_INT 250
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: PPUSH
8661: CALL_OW 69
8665: NOT
8666: AND
8667: IFFALSE 8671
// exit ;
8669: GO 8829
// if buildingsList and engineerOkInside then
8671: LD_VAR 0 6
8675: PUSH
8676: LD_VAR 0 8
8680: AND
8681: IFFALSE 8692
// ComExitBuilding ( engineerOkInside ) ;
8683: LD_VAR 0 8
8687: PPUSH
8688: CALL_OW 122
// if buildingsList and engineerOkOutside then
8692: LD_VAR 0 6
8696: PUSH
8697: LD_VAR 0 9
8701: AND
8702: IFFALSE 8722
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8704: LD_VAR 0 9
8708: PPUSH
8709: LD_VAR 0 6
8713: PUSH
8714: LD_INT 1
8716: ARRAY
8717: PPUSH
8718: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8722: LD_VAR 0 6
8726: PUSH
8727: LD_INT 0
8729: EQUAL
8730: PUSH
8731: LD_VAR 0 4
8735: PUSH
8736: LD_INT 0
8738: EQUAL
8739: AND
8740: PUSH
8741: LD_VAR 0 9
8745: AND
8746: IFFALSE 8762
// ComEnterUnit ( engineerOkOutside , depot ) ;
8748: LD_VAR 0 9
8752: PPUSH
8753: LD_VAR 0 2
8757: PPUSH
8758: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8762: LD_VAR 0 9
8766: PUSH
8767: LD_VAR 0 6
8771: PUSH
8772: LD_INT 0
8774: EQUAL
8775: AND
8776: PUSH
8777: LD_VAR 0 4
8781: AND
8782: IFFALSE 8829
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8784: LD_VAR 0 9
8788: PPUSH
8789: LD_VAR 0 4
8793: PUSH
8794: LD_INT 1
8796: ARRAY
8797: PPUSH
8798: LD_VAR 0 4
8802: PUSH
8803: LD_INT 2
8805: ARRAY
8806: PPUSH
8807: LD_VAR 0 4
8811: PUSH
8812: LD_INT 3
8814: ARRAY
8815: PPUSH
8816: LD_VAR 0 4
8820: PUSH
8821: LD_INT 4
8823: ARRAY
8824: PPUSH
8825: CALL_OW 145
// end ;
8829: LD_VAR 0 5
8833: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8834: LD_INT 0
8836: PPUSH
8837: PPUSH
8838: PPUSH
8839: PPUSH
8840: PPUSH
8841: PPUSH
8842: PPUSH
8843: PPUSH
8844: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8845: LD_ADDR_VAR 0 6
8849: PUSH
8850: LD_INT 22
8852: PUSH
8853: LD_VAR 0 1
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: LD_INT 25
8864: PUSH
8865: LD_INT 4
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 23
8874: PUSH
8875: LD_INT 2
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 24
8884: PUSH
8885: LD_INT 251
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: PPUSH
8898: CALL_OW 69
8902: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8903: LD_ADDR_VAR 0 7
8907: PUSH
8908: LD_VAR 0 3
8912: PPUSH
8913: LD_INT 22
8915: PUSH
8916: LD_VAR 0 1
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: LD_INT 23
8927: PUSH
8928: LD_INT 2
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PUSH
8935: LD_INT 25
8937: PUSH
8938: LD_INT 4
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 50
8947: PUSH
8948: EMPTY
8949: LIST
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: PPUSH
8957: CALL_OW 70
8961: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8962: LD_ADDR_VAR 0 10
8966: PUSH
8967: LD_VAR 0 3
8971: PPUSH
8972: LD_INT 22
8974: PUSH
8975: LD_VAR 0 1
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: LD_INT 21
8986: PUSH
8987: LD_INT 1
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 3
8996: PUSH
8997: LD_INT 25
8999: PUSH
9000: LD_INT 3
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: LD_INT 3
9013: PUSH
9014: LD_INT 24
9016: PUSH
9017: LD_INT 750
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: PPUSH
9034: CALL_OW 70
9038: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9039: LD_ADDR_VAR 0 11
9043: PUSH
9044: LD_VAR 0 2
9048: PPUSH
9049: LD_INT 22
9051: PUSH
9052: LD_VAR 0 1
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 21
9063: PUSH
9064: LD_INT 1
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: LD_INT 3
9073: PUSH
9074: LD_INT 25
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PUSH
9088: LD_INT 3
9090: PUSH
9091: LD_INT 24
9093: PUSH
9094: LD_INT 1000
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: PPUSH
9111: CALL_OW 70
9115: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
9116: LD_VAR 0 10
9120: NOT
9121: PUSH
9122: LD_VAR 0 11
9126: NOT
9127: AND
9128: PUSH
9129: LD_VAR 0 6
9133: NOT
9134: AND
9135: IFFALSE 9139
// exit ;
9137: GO 9345
// if damageUnits and sci_list then
9139: LD_VAR 0 10
9143: PUSH
9144: LD_VAR 0 6
9148: AND
9149: IFFALSE 9165
// ComMoveToArea ( damageUnits , healArea ) ;
9151: LD_VAR 0 10
9155: PPUSH
9156: LD_VAR 0 2
9160: PPUSH
9161: CALL_OW 113
// if unitsToHeal and sci_list then
9165: LD_VAR 0 11
9169: PUSH
9170: LD_VAR 0 6
9174: AND
9175: IFFALSE 9186
// ComExitBuilding ( sci_list ) ;
9177: LD_VAR 0 6
9181: PPUSH
9182: CALL_OW 122
// if unitsToHeal and sci_listOutside then
9186: LD_VAR 0 11
9190: PUSH
9191: LD_VAR 0 7
9195: AND
9196: IFFALSE 9216
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9198: LD_VAR 0 7
9202: PPUSH
9203: LD_VAR 0 11
9207: PUSH
9208: LD_INT 1
9210: ARRAY
9211: PPUSH
9212: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
9216: LD_VAR 0 10
9220: PUSH
9221: LD_INT 0
9223: EQUAL
9224: PUSH
9225: LD_VAR 0 11
9229: PUSH
9230: LD_INT 0
9232: EQUAL
9233: AND
9234: PUSH
9235: LD_VAR 0 7
9239: AND
9240: IFFALSE 9345
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9242: LD_ADDR_VAR 0 12
9246: PUSH
9247: LD_INT 22
9249: PUSH
9250: LD_VAR 0 1
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 21
9261: PUSH
9262: LD_INT 3
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 30
9271: PUSH
9272: LD_INT 8
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: PPUSH
9284: CALL_OW 69
9288: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
9289: LD_ADDR_VAR 0 13
9293: PUSH
9294: LD_INT 1
9296: PPUSH
9297: LD_VAR 0 12
9301: PPUSH
9302: CALL_OW 12
9306: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9307: LD_VAR 0 7
9311: PPUSH
9312: LD_INT 3
9314: PUSH
9315: LD_INT 60
9317: PUSH
9318: EMPTY
9319: LIST
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PPUSH
9325: CALL_OW 72
9329: PPUSH
9330: LD_VAR 0 12
9334: PUSH
9335: LD_VAR 0 13
9339: ARRAY
9340: PPUSH
9341: CALL_OW 120
// end ; end ;
9345: LD_VAR 0 5
9349: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9350: LD_INT 0
9352: PPUSH
9353: PPUSH
9354: PPUSH
9355: PPUSH
9356: PPUSH
// tmp := [ ] ;
9357: LD_ADDR_VAR 0 6
9361: PUSH
9362: EMPTY
9363: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9364: LD_ADDR_VAR 0 7
9368: PUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 1
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 30
9383: PUSH
9384: LD_INT 32
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PPUSH
9395: CALL_OW 69
9399: ST_TO_ADDR
// if bunkers then
9400: LD_VAR 0 7
9404: IFFALSE 9474
// for i in bunkers do
9406: LD_ADDR_VAR 0 4
9410: PUSH
9411: LD_VAR 0 7
9415: PUSH
9416: FOR_IN
9417: IFFALSE 9472
// for j in UnitsInside ( i ) do
9419: LD_ADDR_VAR 0 5
9423: PUSH
9424: LD_VAR 0 4
9428: PPUSH
9429: CALL_OW 313
9433: PUSH
9434: FOR_IN
9435: IFFALSE 9468
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9437: LD_ADDR_VAR 0 6
9441: PUSH
9442: LD_VAR 0 6
9446: PPUSH
9447: LD_VAR 0 6
9451: PUSH
9452: LD_INT 1
9454: PLUS
9455: PPUSH
9456: LD_VAR 0 5
9460: PPUSH
9461: CALL_OW 1
9465: ST_TO_ADDR
9466: GO 9434
9468: POP
9469: POP
9470: GO 9416
9472: POP
9473: POP
// if tmp then
9474: LD_VAR 0 6
9478: IFFALSE 9518
// begin ComExitBuilding ( tmp ) ;
9480: LD_VAR 0 6
9484: PPUSH
9485: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9489: LD_VAR 0 6
9493: PPUSH
9494: LD_VAR 0 2
9498: PPUSH
9499: CALL_OW 250
9503: PPUSH
9504: LD_VAR 0 2
9508: PPUSH
9509: CALL_OW 251
9513: PPUSH
9514: CALL_OW 174
// end ; end ;
9518: LD_VAR 0 3
9522: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9523: LD_INT 0
9525: PPUSH
9526: PPUSH
9527: PPUSH
// enable ;
9528: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9529: LD_ADDR_VAR 0 6
9533: PUSH
9534: LD_VAR 0 3
9538: PPUSH
9539: CALL_OW 435
9543: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9544: LD_ADDR_VAR 0 5
9548: PUSH
9549: LD_INT 22
9551: PUSH
9552: LD_VAR 0 1
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: LD_INT 34
9563: PUSH
9564: LD_VAR 0 2
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PPUSH
9577: CALL_OW 69
9581: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9582: LD_VAR 0 5
9586: PUSH
9587: LD_VAR 0 3
9591: PPUSH
9592: CALL_OW 435
9596: AND
9597: PUSH
9598: LD_VAR 0 6
9602: AND
9603: IFFALSE 9636
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9605: LD_VAR 0 5
9609: PUSH
9610: LD_INT 1
9612: ARRAY
9613: PPUSH
9614: LD_VAR 0 6
9618: PUSH
9619: LD_INT 1
9621: ARRAY
9622: PPUSH
9623: LD_VAR 0 6
9627: PUSH
9628: LD_INT 2
9630: ARRAY
9631: PPUSH
9632: CALL_OW 177
// end ;
9636: LD_VAR 0 4
9640: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9641: LD_INT 0
9643: PPUSH
9644: PPUSH
9645: PPUSH
9646: PPUSH
9647: PPUSH
9648: PPUSH
9649: PPUSH
9650: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9651: LD_ADDR_VAR 0 6
9655: PUSH
9656: LD_VAR 0 2
9660: PPUSH
9661: LD_INT 22
9663: PUSH
9664: LD_VAR 0 1
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 56
9675: PUSH
9676: EMPTY
9677: LIST
9678: PUSH
9679: LD_INT 24
9681: PUSH
9682: LD_INT 700
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: LD_INT 3
9691: PUSH
9692: LD_INT 60
9694: PUSH
9695: EMPTY
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: LD_INT 2
9704: PUSH
9705: LD_INT 25
9707: PUSH
9708: LD_INT 1
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: LD_INT 25
9717: PUSH
9718: LD_INT 5
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PUSH
9725: LD_INT 25
9727: PUSH
9728: LD_INT 8
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 25
9737: PUSH
9738: LD_INT 9
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: PPUSH
9759: CALL_OW 70
9763: PUSH
9764: LD_EXP 48
9768: PUSH
9769: LD_EXP 49
9773: UNION
9774: DIFF
9775: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9776: LD_ADDR_VAR 0 7
9780: PUSH
9781: LD_VAR 0 2
9785: PPUSH
9786: LD_INT 22
9788: PUSH
9789: LD_VAR 0 1
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 30
9800: PUSH
9801: LD_INT 32
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 58
9810: PUSH
9811: EMPTY
9812: LIST
9813: PUSH
9814: LD_INT 24
9816: PUSH
9817: LD_INT 251
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: PPUSH
9830: CALL_OW 70
9834: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9835: LD_ADDR_VAR 0 9
9839: PUSH
9840: LD_VAR 0 2
9844: PPUSH
9845: LD_INT 22
9847: PUSH
9848: LD_VAR 0 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 2
9859: PUSH
9860: LD_INT 30
9862: PUSH
9863: LD_INT 4
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 30
9872: PUSH
9873: LD_INT 5
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: PUSH
9885: LD_INT 24
9887: PUSH
9888: LD_INT 251
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: LIST
9899: PPUSH
9900: CALL_OW 70
9904: ST_TO_ADDR
// if barrackList then
9905: LD_VAR 0 9
9909: IFFALSE 10065
// begin if turretList = 0 then
9911: LD_VAR 0 7
9915: PUSH
9916: LD_INT 0
9918: EQUAL
9919: IFFALSE 9957
// begin if soldiersList then
9921: LD_VAR 0 6
9925: IFFALSE 9955
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9927: LD_VAR 0 6
9931: PPUSH
9932: LD_VAR 0 9
9936: PUSH
9937: LD_INT 1
9939: PPUSH
9940: LD_VAR 0 9
9944: PPUSH
9945: CALL_OW 12
9949: ARRAY
9950: PPUSH
9951: CALL_OW 120
// end else
9955: GO 10065
// begin for i in barrackList do
9957: LD_ADDR_VAR 0 4
9961: PUSH
9962: LD_VAR 0 9
9966: PUSH
9967: FOR_IN
9968: IFFALSE 10063
// begin if not turretList then
9970: LD_VAR 0 7
9974: NOT
9975: IFFALSE 9981
// exit ;
9977: POP
9978: POP
9979: GO 10065
// insideUnits = UnitsInside ( i ) ;
9981: LD_ADDR_VAR 0 10
9985: PUSH
9986: LD_VAR 0 4
9990: PPUSH
9991: CALL_OW 313
9995: ST_TO_ADDR
// if insideUnits then
9996: LD_VAR 0 10
10000: IFFALSE 10061
// begin tmp := insideUnits [ 1 ] ;
10002: LD_ADDR_VAR 0 8
10006: PUSH
10007: LD_VAR 0 10
10011: PUSH
10012: LD_INT 1
10014: ARRAY
10015: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
10016: LD_VAR 0 8
10020: PPUSH
10021: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
10025: LD_VAR 0 8
10029: PPUSH
10030: LD_VAR 0 7
10034: PUSH
10035: LD_INT 1
10037: ARRAY
10038: PPUSH
10039: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
10043: LD_ADDR_VAR 0 7
10047: PUSH
10048: LD_VAR 0 7
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: CALL_OW 3
10060: ST_TO_ADDR
// end ; end ;
10061: GO 9967
10063: POP
10064: POP
// end ; end ; end ;
10065: LD_VAR 0 3
10069: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
10070: LD_INT 0
10072: PPUSH
10073: PPUSH
10074: PPUSH
10075: PPUSH
10076: PPUSH
10077: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10078: LD_ADDR_VAR 0 8
10082: PUSH
10083: LD_INT 22
10085: PUSH
10086: LD_VAR 0 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 21
10097: PUSH
10098: LD_INT 2
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 34
10107: PUSH
10108: LD_INT 52
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// if not craneList then
10125: LD_VAR 0 8
10129: NOT
10130: IFFALSE 10134
// exit ;
10132: GO 10568
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10134: LD_ADDR_VAR 0 9
10138: PUSH
10139: LD_INT 22
10141: PUSH
10142: LD_VAR 0 1
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 21
10153: PUSH
10154: LD_INT 3
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 3
10163: PUSH
10164: LD_INT 24
10166: PUSH
10167: LD_INT 1000
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: PUSH
10183: EMPTY
10184: LIST
10185: PPUSH
10186: CALL_OW 69
10190: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
10191: LD_VAR 0 9
10195: PUSH
10196: LD_VAR 0 8
10200: PPUSH
10201: LD_INT 24
10203: PUSH
10204: LD_INT 750
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PPUSH
10211: CALL_OW 72
10215: AND
10216: IFFALSE 10251
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
10218: LD_VAR 0 8
10222: PPUSH
10223: LD_INT 24
10225: PUSH
10226: LD_INT 750
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PPUSH
10233: CALL_OW 72
10237: PPUSH
10238: LD_VAR 0 9
10242: PUSH
10243: LD_INT 1
10245: ARRAY
10246: PPUSH
10247: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
10251: LD_VAR 0 8
10255: PPUSH
10256: LD_INT 3
10258: PUSH
10259: LD_INT 24
10261: PUSH
10262: LD_INT 750
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PPUSH
10273: CALL_OW 72
10277: IFFALSE 10315
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10279: LD_VAR 0 8
10283: PPUSH
10284: LD_INT 3
10286: PUSH
10287: LD_INT 24
10289: PUSH
10290: LD_INT 750
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PPUSH
10301: CALL_OW 72
10305: PPUSH
10306: LD_VAR 0 2
10310: PPUSH
10311: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
10315: LD_VAR 0 8
10319: PUSH
10320: LD_VAR 0 9
10324: PUSH
10325: LD_INT 0
10327: EQUAL
10328: AND
10329: PUSH
10330: LD_VAR 0 3
10334: AND
10335: IFFALSE 10382
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10337: LD_VAR 0 8
10341: PPUSH
10342: LD_VAR 0 3
10346: PUSH
10347: LD_INT 1
10349: ARRAY
10350: PPUSH
10351: LD_VAR 0 3
10355: PUSH
10356: LD_INT 2
10358: ARRAY
10359: PPUSH
10360: LD_VAR 0 3
10364: PUSH
10365: LD_INT 3
10367: ARRAY
10368: PPUSH
10369: LD_VAR 0 3
10373: PUSH
10374: LD_INT 4
10376: ARRAY
10377: PPUSH
10378: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10382: LD_ADDR_VAR 0 7
10386: PUSH
10387: LD_VAR 0 2
10391: PPUSH
10392: LD_INT 22
10394: PUSH
10395: LD_VAR 0 1
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 21
10406: PUSH
10407: LD_INT 2
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 34
10416: PUSH
10417: LD_INT 52
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 3
10426: PUSH
10427: LD_INT 24
10429: PUSH
10430: LD_INT 750
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: PPUSH
10447: CALL_OW 70
10451: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10452: LD_ADDR_VAR 0 6
10456: PUSH
10457: LD_VAR 0 2
10461: PPUSH
10462: LD_INT 22
10464: PUSH
10465: LD_VAR 0 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 2
10476: PUSH
10477: LD_INT 30
10479: PUSH
10480: LD_INT 0
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: LD_INT 30
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 70
10510: ST_TO_ADDR
// if crane then
10511: LD_VAR 0 7
10515: IFFALSE 10568
// for i in crane do
10517: LD_ADDR_VAR 0 5
10521: PUSH
10522: LD_VAR 0 7
10526: PUSH
10527: FOR_IN
10528: IFFALSE 10566
// begin if dep then
10530: LD_VAR 0 6
10534: IFFALSE 10550
// ComMoveUnit ( i , dep ) ;
10536: LD_VAR 0 5
10540: PPUSH
10541: LD_VAR 0 6
10545: PPUSH
10546: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10550: LD_VAR 0 5
10554: PPUSH
10555: CALL_OW 311
10559: PPUSH
10560: CALL 82139 0 1
// end ;
10564: GO 10527
10566: POP
10567: POP
// end ;
10568: LD_VAR 0 4
10572: RET
// export function BuildBulldozer ; begin
10573: LD_INT 0
10575: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10576: LD_INT 17
10578: PPUSH
10579: CALL_OW 302
10583: NOT
10584: PUSH
10585: LD_INT 17
10587: PPUSH
10588: CALL_OW 255
10592: PUSH
10593: LD_INT 3
10595: NONEQUAL
10596: OR
10597: IFFALSE 10601
// exit ;
10599: GO 10620
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10601: LD_INT 17
10603: PPUSH
10604: LD_INT 24
10606: PPUSH
10607: LD_INT 1
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: LD_INT 53
10615: PPUSH
10616: CALL_OW 185
// end ;
10620: LD_VAR 0 1
10624: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10625: LD_INT 0
10627: PPUSH
10628: PPUSH
10629: PPUSH
10630: PPUSH
10631: PPUSH
// if not bulldozer then
10632: LD_VAR 0 1
10636: NOT
10637: IFFALSE 10641
// exit ;
10639: GO 10923
// list := ListEnvironmentArea ( area ) ;
10641: LD_ADDR_VAR 0 5
10645: PUSH
10646: LD_VAR 0 2
10650: PPUSH
10651: CALL_OW 353
10655: ST_TO_ADDR
// tmp := [ ] ;
10656: LD_ADDR_VAR 0 6
10660: PUSH
10661: EMPTY
10662: ST_TO_ADDR
// for i = 1 to list do
10663: LD_ADDR_VAR 0 4
10667: PUSH
10668: DOUBLE
10669: LD_INT 1
10671: DEC
10672: ST_TO_ADDR
10673: LD_VAR 0 5
10677: PUSH
10678: FOR_TO
10679: IFFALSE 10777
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10681: LD_VAR 0 5
10685: PUSH
10686: LD_VAR 0 4
10690: ARRAY
10691: PUSH
10692: LD_INT 1
10694: ARRAY
10695: PPUSH
10696: LD_VAR 0 5
10700: PUSH
10701: LD_VAR 0 4
10705: ARRAY
10706: PUSH
10707: LD_INT 2
10709: ARRAY
10710: PPUSH
10711: CALL_OW 554
10715: IFFALSE 10775
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10717: LD_ADDR_VAR 0 6
10721: PUSH
10722: LD_VAR 0 6
10726: PPUSH
10727: LD_VAR 0 6
10731: PUSH
10732: LD_INT 1
10734: PLUS
10735: PPUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PUSH
10747: LD_INT 1
10749: ARRAY
10750: PUSH
10751: LD_VAR 0 5
10755: PUSH
10756: LD_VAR 0 4
10760: ARRAY
10761: PUSH
10762: LD_INT 2
10764: ARRAY
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PPUSH
10770: CALL_OW 1
10774: ST_TO_ADDR
// end ;
10775: GO 10678
10777: POP
10778: POP
// ComStop ( bulldozer ) ;
10779: LD_VAR 0 1
10783: PPUSH
10784: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10788: LD_ADDR_VAR 0 7
10792: PUSH
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 250
10802: PUSH
10803: LD_VAR 0 1
10807: PPUSH
10808: CALL_OW 251
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: ST_TO_ADDR
// for i = tmp downto 1 do
10817: LD_ADDR_VAR 0 4
10821: PUSH
10822: DOUBLE
10823: LD_VAR 0 6
10827: INC
10828: ST_TO_ADDR
10829: LD_INT 1
10831: PUSH
10832: FOR_DOWNTO
10833: IFFALSE 10921
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10835: LD_ADDR_VAR 0 7
10839: PUSH
10840: LD_VAR 0 7
10844: PUSH
10845: LD_INT 1
10847: ARRAY
10848: PPUSH
10849: LD_VAR 0 7
10853: PUSH
10854: LD_INT 2
10856: ARRAY
10857: PPUSH
10858: LD_VAR 0 6
10862: PPUSH
10863: CALL 11024 0 3
10867: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10868: LD_VAR 0 1
10872: PPUSH
10873: LD_VAR 0 7
10877: PUSH
10878: LD_INT 1
10880: ARRAY
10881: PPUSH
10882: LD_VAR 0 7
10886: PUSH
10887: LD_INT 2
10889: ARRAY
10890: PPUSH
10891: CALL 10928 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10895: LD_ADDR_VAR 0 6
10899: PUSH
10900: LD_VAR 0 6
10904: PPUSH
10905: LD_VAR 0 7
10909: PUSH
10910: LD_INT 3
10912: ARRAY
10913: PPUSH
10914: CALL_OW 3
10918: ST_TO_ADDR
// end ;
10919: GO 10832
10921: POP
10922: POP
// end ;
10923: LD_VAR 0 3
10927: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10928: LD_INT 0
10930: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10931: LD_VAR 0 2
10935: PPUSH
10936: LD_VAR 0 3
10940: PPUSH
10941: CALL_OW 351
10945: PUSH
10946: LD_VAR 0 2
10950: PPUSH
10951: LD_VAR 0 3
10955: PPUSH
10956: CALL_OW 554
10960: AND
10961: PUSH
10962: LD_VAR 0 2
10966: PPUSH
10967: LD_VAR 0 3
10971: PPUSH
10972: CALL_OW 488
10976: AND
10977: PUSH
10978: LD_VAR 0 2
10982: PPUSH
10983: LD_VAR 0 3
10987: PPUSH
10988: CALL_OW 428
10992: PUSH
10993: LD_INT 1
10995: NEG
10996: EQUAL
10997: AND
10998: IFFALSE 11019
// AddComMoveXY ( bulldozer , x , y ) ;
11000: LD_VAR 0 1
11004: PPUSH
11005: LD_VAR 0 2
11009: PPUSH
11010: LD_VAR 0 3
11014: PPUSH
11015: CALL_OW 171
// end ;
11019: LD_VAR 0 4
11023: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
11024: LD_INT 0
11026: PPUSH
11027: PPUSH
11028: PPUSH
11029: PPUSH
11030: PPUSH
11031: PPUSH
11032: PPUSH
// dist := 99999 ;
11033: LD_ADDR_VAR 0 6
11037: PUSH
11038: LD_INT 99999
11040: ST_TO_ADDR
// for i = 1 to list do
11041: LD_ADDR_VAR 0 5
11045: PUSH
11046: DOUBLE
11047: LD_INT 1
11049: DEC
11050: ST_TO_ADDR
11051: LD_VAR 0 3
11055: PUSH
11056: FOR_TO
11057: IFFALSE 11195
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
11059: LD_ADDR_VAR 0 7
11063: PUSH
11064: LD_VAR 0 1
11068: PPUSH
11069: LD_VAR 0 2
11073: PPUSH
11074: LD_VAR 0 3
11078: PUSH
11079: LD_VAR 0 5
11083: ARRAY
11084: PUSH
11085: LD_INT 1
11087: ARRAY
11088: PPUSH
11089: LD_VAR 0 3
11093: PUSH
11094: LD_VAR 0 5
11098: ARRAY
11099: PUSH
11100: LD_INT 2
11102: ARRAY
11103: PPUSH
11104: CALL_OW 298
11108: ST_TO_ADDR
// if d = 0 then
11109: LD_VAR 0 7
11113: PUSH
11114: LD_INT 0
11116: EQUAL
11117: IFFALSE 11121
// continue ;
11119: GO 11056
// if d < dist then
11121: LD_VAR 0 7
11125: PUSH
11126: LD_VAR 0 6
11130: LESS
11131: IFFALSE 11193
// begin _x := list [ i ] [ 1 ] ;
11133: LD_ADDR_VAR 0 8
11137: PUSH
11138: LD_VAR 0 3
11142: PUSH
11143: LD_VAR 0 5
11147: ARRAY
11148: PUSH
11149: LD_INT 1
11151: ARRAY
11152: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
11153: LD_ADDR_VAR 0 9
11157: PUSH
11158: LD_VAR 0 3
11162: PUSH
11163: LD_VAR 0 5
11167: ARRAY
11168: PUSH
11169: LD_INT 2
11171: ARRAY
11172: ST_TO_ADDR
// _i := i ;
11173: LD_ADDR_VAR 0 10
11177: PUSH
11178: LD_VAR 0 5
11182: ST_TO_ADDR
// dist := d ;
11183: LD_ADDR_VAR 0 6
11187: PUSH
11188: LD_VAR 0 7
11192: ST_TO_ADDR
// end ; end ;
11193: GO 11056
11195: POP
11196: POP
// result := [ _x , _y , _i , dist ] ;
11197: LD_ADDR_VAR 0 4
11201: PUSH
11202: LD_VAR 0 8
11206: PUSH
11207: LD_VAR 0 9
11211: PUSH
11212: LD_VAR 0 10
11216: PUSH
11217: LD_VAR 0 6
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: ST_TO_ADDR
// end ; end_of_file
11228: LD_VAR 0 4
11232: RET
// export function Action ; begin
11233: LD_INT 0
11235: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
11236: LD_INT 66
11238: PPUSH
11239: LD_INT 4
11241: PPUSH
11242: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11246: LD_INT 22
11248: PUSH
11249: LD_INT 1
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 25
11258: PUSH
11259: LD_INT 2
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 69
11274: PUSH
11275: LD_INT 0
11277: EQUAL
11278: IFFALSE 11292
// SetClass ( JMM , 2 ) ;
11280: LD_EXP 1
11284: PPUSH
11285: LD_INT 2
11287: PPUSH
11288: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11292: LD_STRING M1
11294: PPUSH
11295: CALL_OW 337
// case Difficulty of 1 :
11299: LD_OWVAR 67
11303: PUSH
11304: LD_INT 1
11306: DOUBLE
11307: EQUAL
11308: IFTRUE 11312
11310: GO 11322
11312: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11313: LD_STRING M1-1
11315: PPUSH
11316: CALL_OW 337
11320: GO 11377
11322: LD_INT 2
11324: DOUBLE
11325: EQUAL
11326: IFTRUE 11330
11328: GO 11340
11330: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11331: LD_STRING M1-2
11333: PPUSH
11334: CALL_OW 337
11338: GO 11377
11340: LD_INT 3
11342: DOUBLE
11343: EQUAL
11344: IFTRUE 11348
11346: GO 11358
11348: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11349: LD_STRING M1-3
11351: PPUSH
11352: CALL_OW 337
11356: GO 11377
11358: LD_INT 4
11360: DOUBLE
11361: EQUAL
11362: IFTRUE 11366
11364: GO 11376
11366: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11367: LD_STRING M1-4
11369: PPUSH
11370: CALL_OW 337
11374: GO 11377
11376: POP
// ChangeMissionObjectives ( M1cont ) ;
11377: LD_STRING M1cont
11379: PPUSH
11380: CALL_OW 337
// SaveForQuickRestart ;
11384: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11388: LD_INT 525
11390: PPUSH
11391: LD_INT 700
11393: PPUSH
11394: CALL_OW 12
11398: PPUSH
11399: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11403: LD_INT 5
11405: PPUSH
11406: LD_INT 82
11408: PPUSH
11409: LD_INT 38
11411: PPUSH
11412: LD_INT 10
11414: PPUSH
11415: LD_INT 1
11417: PPUSH
11418: CALL_OW 56
// wait ( 0 0$14 ) ;
11422: LD_INT 490
11424: PPUSH
11425: CALL_OW 67
// firstCrateSpawn := true ;
11429: LD_ADDR_EXP 41
11433: PUSH
11434: LD_INT 1
11436: ST_TO_ADDR
// end ;
11437: LD_VAR 0 1
11441: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11442: LD_EXP 41
11446: IFFALSE 11835
11448: GO 11450
11450: DISABLE
11451: LD_INT 0
11453: PPUSH
// begin if IsOk ( Lisa ) then
11454: LD_EXP 2
11458: PPUSH
11459: CALL_OW 302
11463: IFFALSE 11479
// Say ( Lisa , DR0-Lisa-1 ) else
11465: LD_EXP 2
11469: PPUSH
11470: LD_STRING DR0-Lisa-1
11472: PPUSH
11473: CALL_OW 88
11477: GO 11625
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11479: LD_INT 22
11481: PUSH
11482: LD_INT 1
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 21
11491: PUSH
11492: LD_INT 1
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 26
11501: PUSH
11502: LD_INT 1
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 2
11511: PUSH
11512: LD_INT 25
11514: PUSH
11515: LD_INT 1
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 25
11524: PUSH
11525: LD_INT 2
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 25
11534: PUSH
11535: LD_INT 3
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: PUSH
11542: LD_INT 25
11544: PUSH
11545: LD_INT 4
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: PPUSH
11565: CALL_OW 69
11569: PUSH
11570: LD_EXP 1
11574: PUSH
11575: LD_EXP 8
11579: PUSH
11580: LD_EXP 5
11584: PUSH
11585: LD_EXP 6
11589: PUSH
11590: LD_EXP 7
11594: PUSH
11595: LD_EXP 4
11599: PUSH
11600: LD_EXP 3
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: DIFF
11614: PPUSH
11615: LD_STRING DR0-Sol1-1
11617: PPUSH
11618: LD_STRING DR0-Sol1-1
11620: PPUSH
11621: CALL 7530 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11625: LD_ADDR_VAR 0 1
11629: PUSH
11630: LD_INT 22
11632: PUSH
11633: LD_INT 1
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 21
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 26
11652: PUSH
11653: LD_INT 1
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: LD_INT 2
11662: PUSH
11663: LD_INT 25
11665: PUSH
11666: LD_INT 1
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 25
11675: PUSH
11676: LD_INT 2
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 25
11685: PUSH
11686: LD_INT 3
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 25
11695: PUSH
11696: LD_INT 4
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: PPUSH
11716: CALL_OW 69
11720: PUSH
11721: LD_EXP 1
11725: PUSH
11726: LD_EXP 8
11730: PUSH
11731: LD_EXP 5
11735: PUSH
11736: LD_EXP 2
11740: PUSH
11741: LD_EXP 6
11745: PUSH
11746: LD_EXP 7
11750: PUSH
11751: LD_EXP 4
11755: PUSH
11756: LD_EXP 3
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: DIFF
11771: PPUSH
11772: LD_STRING DR0-Sol2-1
11774: PPUSH
11775: LD_STRING DR0-Sol2-1
11777: PPUSH
11778: CALL 7530 0 3
11782: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11783: LD_EXP 4
11787: PPUSH
11788: CALL_OW 302
11792: IFFALSE 11806
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11794: LD_EXP 4
11798: PPUSH
11799: LD_STRING DR0-Cyrus-1
11801: PPUSH
11802: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11806: LD_EXP 2
11810: PPUSH
11811: CALL_OW 302
11815: PUSH
11816: LD_VAR 0 1
11820: OR
11821: IFFALSE 11835
// Say ( JMM , DR0-JMM-1 ) ;
11823: LD_EXP 1
11827: PPUSH
11828: LD_STRING DR0-JMM-1
11830: PPUSH
11831: CALL_OW 88
// end ;
11835: PPOPN 1
11837: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11838: LD_EXP 5
11842: PPUSH
11843: CALL_OW 302
11847: PUSH
11848: LD_INT 22
11850: PUSH
11851: LD_INT 1
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 25
11860: PUSH
11861: LD_INT 16
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PPUSH
11872: CALL_OW 69
11876: PUSH
11877: LD_INT 0
11879: GREATER
11880: AND
11881: PUSH
11882: LD_INT 1
11884: PPUSH
11885: CALL_OW 463
11889: NOT
11890: AND
11891: IFFALSE 12169
11893: GO 11895
11895: DISABLE
// begin DialogueOn ;
11896: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11900: LD_EXP 5
11904: PPUSH
11905: LD_STRING D10-Frank-1
11907: PPUSH
11908: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11912: LD_INT 22
11914: PUSH
11915: LD_INT 1
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 21
11924: PUSH
11925: LD_INT 1
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 2
11934: PUSH
11935: LD_INT 25
11937: PUSH
11938: LD_INT 1
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 25
11947: PUSH
11948: LD_INT 2
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 25
11957: PUSH
11958: LD_INT 3
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 25
11967: PUSH
11968: LD_INT 4
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: PPUSH
11987: CALL_OW 69
11991: PUSH
11992: LD_EXP 1
11996: PUSH
11997: LD_EXP 5
12001: PUSH
12002: LD_EXP 2
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: LIST
12011: DIFF
12012: PPUSH
12013: LD_STRING D10-Sol1-1
12015: PPUSH
12016: LD_STRING D10-FSol1-1
12018: PPUSH
12019: CALL 7530 0 3
// Say ( Frank , D10-Frank-2 ) ;
12023: LD_EXP 5
12027: PPUSH
12028: LD_STRING D10-Frank-2
12030: PPUSH
12031: CALL_OW 88
// if IsOk ( Lisa ) then
12035: LD_EXP 2
12039: PPUSH
12040: CALL_OW 302
12044: IFFALSE 12060
// Say ( Lisa , D10-Lisa-2 ) else
12046: LD_EXP 2
12050: PPUSH
12051: LD_STRING D10-Lisa-2
12053: PPUSH
12054: CALL_OW 88
12058: GO 12165
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12060: LD_INT 22
12062: PUSH
12063: LD_INT 1
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 21
12072: PUSH
12073: LD_INT 1
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: LD_INT 2
12082: PUSH
12083: LD_INT 25
12085: PUSH
12086: LD_INT 1
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 25
12095: PUSH
12096: LD_INT 2
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 25
12105: PUSH
12106: LD_INT 3
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 25
12115: PUSH
12116: LD_INT 4
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: PPUSH
12135: CALL_OW 69
12139: PUSH
12140: LD_EXP 1
12144: PUSH
12145: LD_EXP 5
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: DIFF
12154: PPUSH
12155: LD_STRING D10-Sol1-2
12157: PPUSH
12158: LD_STRING D10-FSol1-2
12160: PPUSH
12161: CALL 7530 0 3
// DialogueOff ;
12165: CALL_OW 7
// end ;
12169: END
// every 10 10$30 trigger not InBattle ( 1 ) do
12170: LD_INT 1
12172: PPUSH
12173: CALL_OW 463
12177: NOT
12178: IFFALSE 12461
12180: GO 12182
12182: DISABLE
// begin HarrisonSupport ;
12183: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12187: LD_EXP 18
12191: PPUSH
12192: CALL_OW 310
12196: PPUSH
12197: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12201: LD_EXP 18
12205: PPUSH
12206: LD_STRING DEng-Eng1-1
12208: PPUSH
12209: CALL_OW 88
// wait ( 1 1$0 ) ;
12213: LD_INT 2100
12215: PPUSH
12216: CALL_OW 67
// DialogueOn ;
12220: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12224: LD_EXP 15
12228: PPUSH
12229: LD_STRING DRem-Har-1
12231: PPUSH
12232: CALL_OW 94
// if contactWithRussian then
12236: LD_EXP 23
12240: IFFALSE 12256
// Say ( JMM , DRem-JMM-1 ) else
12242: LD_EXP 1
12246: PPUSH
12247: LD_STRING DRem-JMM-1
12249: PPUSH
12250: CALL_OW 88
12254: GO 12268
// Say ( JMM , DRem-JMM-1a ) ;
12256: LD_EXP 1
12260: PPUSH
12261: LD_STRING DRem-JMM-1a
12263: PPUSH
12264: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
12268: LD_EXP 15
12272: PPUSH
12273: LD_STRING DRem-Har-2
12275: PPUSH
12276: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12280: LD_STRING DenisInDelta
12282: PPUSH
12283: LD_INT 0
12285: PPUSH
12286: CALL_OW 30
12290: IFFALSE 12306
// Say ( JMM , DRem-JMM-2 ) else
12292: LD_EXP 1
12296: PPUSH
12297: LD_STRING DRem-JMM-2
12299: PPUSH
12300: CALL_OW 88
12304: GO 12318
// Say ( JMM , DRem-JMM-2a ) ;
12306: LD_EXP 1
12310: PPUSH
12311: LD_STRING DRem-JMM-2a
12313: PPUSH
12314: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
12318: LD_EXP 15
12322: PPUSH
12323: LD_STRING DRem-Har-3
12325: PPUSH
12326: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12330: LD_EXP 1
12334: PPUSH
12335: LD_STRING DRem-JMM-3
12337: PPUSH
12338: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12342: LD_EXP 15
12346: PPUSH
12347: LD_STRING DRem-Har-4
12349: PPUSH
12350: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12354: LD_STRING DenisInDelta
12356: PPUSH
12357: LD_INT 0
12359: PPUSH
12360: CALL_OW 30
12364: IFFALSE 12424
// begin Say ( JMM , DRem-JMM-4 ) ;
12366: LD_EXP 1
12370: PPUSH
12371: LD_STRING DRem-JMM-4
12373: PPUSH
12374: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12378: LD_EXP 15
12382: PPUSH
12383: LD_STRING DRem-Har-5
12385: PPUSH
12386: CALL_OW 94
// DialogueOff ;
12390: CALL_OW 7
// wait ( 4 4$00 ) ;
12394: LD_INT 8400
12396: PPUSH
12397: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12401: LD_INT 35
12403: PPUSH
12404: CALL_OW 67
// until not InBattle ( 1 ) ;
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 463
12415: NOT
12416: IFFALSE 12401
// SpawnDenis ;
12418: CALL 12462 0 0
// end else
12422: GO 12461
// begin DialogueOff ;
12424: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12428: LD_INT 36
12430: PPUSH
12431: LD_INT 1
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12441: LD_INT 15
12443: PPUSH
12444: LD_INT 1
12446: PPUSH
12447: LD_INT 1
12449: PPUSH
12450: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12454: LD_STRING MR
12456: PPUSH
12457: CALL_OW 337
// end ; end ;
12461: END
// export function SpawnDenis ; var tmp ; begin
12462: LD_INT 0
12464: PPUSH
12465: PPUSH
// PrepareDenis ;
12466: CALL 2244 0 0
// if not Denis then
12470: LD_EXP 9
12474: NOT
12475: IFFALSE 12479
// exit ;
12477: GO 12700
// CenterNowOnUnits ( Denis ) ;
12479: LD_EXP 9
12483: PPUSH
12484: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12488: LD_ADDR_VAR 0 2
12492: PUSH
12493: LD_INT 22
12495: PUSH
12496: LD_INT 1
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PPUSH
12503: CALL_OW 69
12507: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12508: LD_EXP 9
12512: PPUSH
12513: LD_VAR 0 2
12517: PPUSH
12518: LD_EXP 9
12522: PPUSH
12523: CALL_OW 74
12527: PPUSH
12528: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12532: LD_INT 35
12534: PPUSH
12535: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12539: LD_INT 22
12541: PUSH
12542: LD_INT 1
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: LD_INT 91
12551: PUSH
12552: LD_EXP 9
12556: PUSH
12557: LD_INT 10
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PPUSH
12569: CALL_OW 69
12573: IFFALSE 12532
// SetSide ( Denis , 1 ) ;
12575: LD_EXP 9
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 235
// DialogueOn ;
12587: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12591: LD_EXP 9
12595: PPUSH
12596: LD_STRING DDen-Den-1
12598: PPUSH
12599: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12603: LD_EXP 1
12607: PPUSH
12608: LD_STRING DDen-JMM-1
12610: PPUSH
12611: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12615: LD_EXP 9
12619: PPUSH
12620: LD_STRING DDen-Den-2
12622: PPUSH
12623: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12627: LD_EXP 1
12631: PPUSH
12632: LD_STRING DDen-JMM-2
12634: PPUSH
12635: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12639: LD_EXP 9
12643: PPUSH
12644: LD_STRING DDen-Den-3
12646: PPUSH
12647: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12651: LD_EXP 1
12655: PPUSH
12656: LD_STRING DDen-JMM-3
12658: PPUSH
12659: CALL_OW 88
// DialogueOff ;
12663: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12667: LD_INT 36
12669: PPUSH
12670: LD_INT 1
12672: PPUSH
12673: LD_INT 1
12675: PPUSH
12676: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12680: LD_INT 15
12682: PPUSH
12683: LD_INT 1
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12693: LD_STRING MR
12695: PPUSH
12696: CALL_OW 337
// end ;
12700: LD_VAR 0 1
12704: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12705: LD_INT 22
12707: PUSH
12708: LD_INT 1
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 30
12717: PUSH
12718: LD_INT 15
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PPUSH
12729: CALL_OW 69
12733: PUSH
12734: LD_EXP 9
12738: PPUSH
12739: CALL_OW 302
12743: AND
12744: PUSH
12745: LD_INT 1
12747: PPUSH
12748: CALL_OW 463
12752: NOT
12753: AND
12754: IFFALSE 12783
12756: GO 12758
12758: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12759: LD_EXP 9
12763: PPUSH
12764: LD_STRING DR1-Den-1
12766: PPUSH
12767: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12771: LD_EXP 1
12775: PPUSH
12776: LD_STRING DR1-JMM-1
12778: PPUSH
12779: CALL_OW 88
// end ;
12783: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12784: LD_INT 15
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: CALL_OW 321
12794: PUSH
12795: LD_INT 2
12797: EQUAL
12798: PUSH
12799: LD_EXP 9
12803: PPUSH
12804: CALL_OW 302
12808: AND
12809: PUSH
12810: LD_INT 1
12812: PPUSH
12813: CALL_OW 463
12817: NOT
12818: AND
12819: IFFALSE 13028
12821: GO 12823
12823: DISABLE
// begin DialogueOn ;
12824: CALL_OW 6
// if IsOK ( Denis ) then
12828: LD_EXP 9
12832: PPUSH
12833: CALL_OW 302
12837: IFFALSE 12853
// Say ( Denis , DR2-Den-1 ) else
12839: LD_EXP 9
12843: PPUSH
12844: LD_STRING DR2-Den-1
12846: PPUSH
12847: CALL_OW 88
12851: GO 12912
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12853: LD_INT 22
12855: PUSH
12856: LD_INT 1
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: PUSH
12863: LD_INT 21
12865: PUSH
12866: LD_INT 1
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PUSH
12873: LD_INT 25
12875: PUSH
12876: LD_INT 4
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: LIST
12887: PPUSH
12888: CALL_OW 69
12892: PUSH
12893: LD_EXP 1
12897: PUSH
12898: EMPTY
12899: LIST
12900: DIFF
12901: PPUSH
12902: LD_STRING DR2-Sci1-1
12904: PPUSH
12905: LD_STRING DR2-FSci1-1
12907: PPUSH
12908: CALL 7530 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12912: LD_EXP 1
12916: PPUSH
12917: LD_STRING DR2-JMM-1
12919: PPUSH
12920: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12924: LD_INT 22
12926: PUSH
12927: LD_INT 1
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PUSH
12934: LD_INT 21
12936: PUSH
12937: LD_INT 1
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 26
12946: PUSH
12947: LD_INT 1
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 23
12956: PUSH
12957: LD_INT 1
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PPUSH
12970: CALL_OW 69
12974: PUSH
12975: LD_EXP 1
12979: PUSH
12980: LD_EXP 9
12984: PUSH
12985: LD_EXP 8
12989: PUSH
12990: LD_EXP 5
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: DIFF
13001: PPUSH
13002: LD_STRING DR2-Sol1-1
13004: PPUSH
13005: LD_STRING 
13007: PPUSH
13008: CALL 7530 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13012: LD_EXP 1
13016: PPUSH
13017: LD_STRING DR2-JMM-2
13019: PPUSH
13020: CALL_OW 88
// DialogueOff ;
13024: CALL_OW 7
// end ;
13028: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
13029: LD_INT 22
13031: PUSH
13032: LD_INT 1
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: LD_INT 30
13041: PUSH
13042: LD_INT 36
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PPUSH
13053: CALL_OW 69
13057: PUSH
13058: LD_INT 0
13060: EQUAL
13061: PUSH
13062: LD_INT 22
13064: PUSH
13065: LD_INT 1
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 21
13074: PUSH
13075: LD_INT 2
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 33
13084: PUSH
13085: LD_INT 2
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: PPUSH
13097: CALL_OW 69
13101: PUSH
13102: LD_INT 0
13104: GREATER
13105: AND
13106: PUSH
13107: LD_EXP 24
13111: PUSH
13112: LD_INT 0
13114: EQUAL
13115: AND
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: CALL_OW 463
13124: NOT
13125: AND
13126: IFFALSE 13263
13128: GO 13130
13130: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
13131: LD_INT 22
13133: PUSH
13134: LD_INT 1
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 21
13143: PUSH
13144: LD_INT 1
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 25
13153: PUSH
13154: LD_INT 3
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 26
13163: PUSH
13164: LD_INT 1
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: PPUSH
13177: CALL_OW 69
13181: PUSH
13182: LD_EXP 1
13186: PUSH
13187: LD_EXP 6
13191: PUSH
13192: LD_EXP 7
13196: PUSH
13197: LD_EXP 9
13201: PUSH
13202: LD_EXP 16
13206: PUSH
13207: LD_EXP 3
13211: PUSH
13212: LD_EXP 4
13216: PUSH
13217: LD_EXP 2
13221: PUSH
13222: LD_EXP 5
13226: PUSH
13227: LD_EXP 8
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: DIFF
13244: PPUSH
13245: LD_STRING D3a-Mech1-1
13247: PPUSH
13248: LD_STRING 
13250: PPUSH
13251: CALL 7530 0 3
// firstTower = 2 ;
13255: LD_ADDR_EXP 24
13259: PUSH
13260: LD_INT 2
13262: ST_TO_ADDR
// end ;
13263: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13264: LD_INT 22
13266: PUSH
13267: LD_INT 3
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 21
13276: PUSH
13277: LD_INT 3
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PPUSH
13288: CALL_OW 69
13292: PUSH
13293: LD_INT 0
13295: EQUAL
13296: IFFALSE 13427
13298: GO 13300
13300: DISABLE
13301: LD_INT 0
13303: PPUSH
// begin stop_talking := true ;
13304: LD_ADDR_OWVAR 56
13308: PUSH
13309: LD_INT 1
13311: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13312: LD_ADDR_VAR 0 1
13316: PUSH
13317: LD_INT 22
13319: PUSH
13320: LD_INT 1
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: LD_INT 21
13329: PUSH
13330: LD_INT 1
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: LD_INT 2
13339: PUSH
13340: LD_INT 25
13342: PUSH
13343: LD_INT 1
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: LD_INT 25
13352: PUSH
13353: LD_INT 2
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 25
13362: PUSH
13363: LD_INT 3
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 25
13372: PUSH
13373: LD_INT 4
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: PPUSH
13392: CALL_OW 69
13396: PUSH
13397: FOR_IN
13398: IFFALSE 13417
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13400: LD_VAR 0 1
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: LD_INT 7500
13410: PPUSH
13411: CALL_OW 591
13415: GO 13397
13417: POP
13418: POP
// stop_talking := false ;
13419: LD_ADDR_OWVAR 56
13423: PUSH
13424: LD_INT 0
13426: ST_TO_ADDR
// end ;
13427: PPOPN 1
13429: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13430: LD_INT 22
13432: PUSH
13433: LD_INT 1
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 30
13442: PUSH
13443: LD_INT 36
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PPUSH
13454: CALL_OW 69
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_INT 1
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 21
13471: PUSH
13472: LD_INT 2
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: LD_INT 33
13481: PUSH
13482: LD_INT 2
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: PPUSH
13494: CALL_OW 69
13498: AND
13499: PUSH
13500: CALL 14052 0 0
13504: AND
13505: PUSH
13506: LD_INT 1
13508: PPUSH
13509: CALL_OW 463
13513: NOT
13514: AND
13515: IFFALSE 14049
13517: GO 13519
13519: DISABLE
13520: LD_INT 0
13522: PPUSH
13523: PPUSH
13524: PPUSH
13525: PPUSH
13526: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13527: LD_ADDR_VAR 0 3
13531: PUSH
13532: LD_INT 22
13534: PUSH
13535: LD_INT 1
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 30
13544: PUSH
13545: LD_INT 36
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PPUSH
13556: CALL_OW 69
13560: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13561: LD_ADDR_VAR 0 4
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_INT 1
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: LD_INT 21
13578: PUSH
13579: LD_INT 2
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: LD_INT 33
13588: PUSH
13589: LD_INT 2
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: LIST
13600: PPUSH
13601: CALL_OW 69
13605: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13606: LD_ADDR_VAR 0 5
13610: PUSH
13611: EMPTY
13612: ST_TO_ADDR
// for i in tmpControlTowers do
13613: LD_ADDR_VAR 0 1
13617: PUSH
13618: LD_VAR 0 3
13622: PUSH
13623: FOR_IN
13624: IFFALSE 14047
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13626: LD_EXP 1
13630: PPUSH
13631: CALL_OW 310
13635: PUSH
13636: LD_VAR 0 1
13640: EQUAL
13641: PUSH
13642: LD_EXP 1
13646: PPUSH
13647: CALL_OW 257
13651: PUSH
13652: LD_INT 3
13654: EQUAL
13655: AND
13656: IFFALSE 13790
// begin InGameOn ;
13658: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13662: LD_VAR 0 4
13666: PUSH
13667: LD_INT 1
13669: ARRAY
13670: PPUSH
13671: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13675: LD_EXP 1
13679: PPUSH
13680: LD_STRING D4a-JMM-1
13682: PPUSH
13683: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13687: LD_VAR 0 4
13691: PUSH
13692: LD_INT 1
13694: ARRAY
13695: PPUSH
13696: LD_EXP 1
13700: PPUSH
13701: CALL_OW 53
// wait ( 0 0$1 ) ;
13705: LD_INT 35
13707: PPUSH
13708: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13712: LD_VAR 0 4
13716: PUSH
13717: LD_INT 1
13719: ARRAY
13720: PPUSH
13721: LD_VAR 0 4
13725: PUSH
13726: LD_INT 1
13728: ARRAY
13729: PPUSH
13730: CALL_OW 250
13734: PUSH
13735: LD_INT 3
13737: PLUS
13738: PPUSH
13739: LD_VAR 0 4
13743: PUSH
13744: LD_INT 1
13746: ARRAY
13747: PPUSH
13748: CALL_OW 251
13752: PUSH
13753: LD_INT 2
13755: MINUS
13756: PPUSH
13757: CALL_OW 111
// wait ( 0 0$2 ) ;
13761: LD_INT 70
13763: PPUSH
13764: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13768: LD_EXP 1
13772: PPUSH
13773: LD_STRING D4b-JMM-1
13775: PPUSH
13776: CALL_OW 88
// InGameOff ;
13780: CALL_OW 9
// exit ;
13784: POP
13785: POP
13786: GO 14049
// end else
13788: GO 14045
// begin InGameOn ;
13790: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13794: LD_ADDR_VAR 0 5
13798: PUSH
13799: LD_VAR 0 1
13803: PPUSH
13804: CALL_OW 313
13808: PPUSH
13809: LD_INT 25
13811: PUSH
13812: LD_INT 3
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PPUSH
13819: CALL_OW 72
13823: ST_TO_ADDR
// if not tmpMechanicInside then
13824: LD_VAR 0 5
13828: NOT
13829: IFFALSE 13833
// continue ;
13831: GO 13623
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13833: LD_VAR 0 5
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: PPUSH
13842: CALL_OW 258
13846: PUSH
13847: LD_INT 1
13849: EQUAL
13850: IFFALSE 13870
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13852: LD_VAR 0 5
13856: PUSH
13857: LD_INT 1
13859: ARRAY
13860: PPUSH
13861: LD_STRING D4a-Mech1-1
13863: PPUSH
13864: CALL_OW 88
13868: GO 13886
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13870: LD_VAR 0 5
13874: PUSH
13875: LD_INT 1
13877: ARRAY
13878: PPUSH
13879: LD_STRING D4a-FMech1-1
13881: PPUSH
13882: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13886: LD_VAR 0 4
13890: PUSH
13891: LD_INT 1
13893: ARRAY
13894: PPUSH
13895: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13899: LD_VAR 0 4
13903: PUSH
13904: LD_INT 1
13906: ARRAY
13907: PPUSH
13908: LD_VAR 0 5
13912: PUSH
13913: LD_INT 1
13915: ARRAY
13916: PPUSH
13917: CALL_OW 53
// wait ( 0 0$1 ) ;
13921: LD_INT 35
13923: PPUSH
13924: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13928: LD_VAR 0 4
13932: PUSH
13933: LD_INT 1
13935: ARRAY
13936: PPUSH
13937: LD_VAR 0 4
13941: PUSH
13942: LD_INT 1
13944: ARRAY
13945: PPUSH
13946: CALL_OW 250
13950: PUSH
13951: LD_INT 3
13953: PLUS
13954: PPUSH
13955: LD_VAR 0 4
13959: PUSH
13960: LD_INT 1
13962: ARRAY
13963: PPUSH
13964: CALL_OW 251
13968: PUSH
13969: LD_INT 2
13971: MINUS
13972: PPUSH
13973: CALL_OW 111
// wait ( 0 0$2 ) ;
13977: LD_INT 70
13979: PPUSH
13980: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13984: LD_VAR 0 5
13988: PUSH
13989: LD_INT 1
13991: ARRAY
13992: PPUSH
13993: CALL_OW 258
13997: PUSH
13998: LD_INT 1
14000: EQUAL
14001: IFFALSE 14021
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
14003: LD_VAR 0 5
14007: PUSH
14008: LD_INT 1
14010: ARRAY
14011: PPUSH
14012: LD_STRING D4b-Mech1-1
14014: PPUSH
14015: CALL_OW 88
14019: GO 14037
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14021: LD_VAR 0 5
14025: PUSH
14026: LD_INT 1
14028: ARRAY
14029: PPUSH
14030: LD_STRING D4b-FMech1-1
14032: PPUSH
14033: CALL_OW 88
// InGameOff ;
14037: CALL_OW 9
// exit ;
14041: POP
14042: POP
14043: GO 14049
// end ; end ;
14045: GO 13623
14047: POP
14048: POP
// end ;
14049: PPOPN 5
14051: END
// function CheckMehInside ; var i , j , tmp ; begin
14052: LD_INT 0
14054: PPUSH
14055: PPUSH
14056: PPUSH
14057: PPUSH
// result := false ;
14058: LD_ADDR_VAR 0 1
14062: PUSH
14063: LD_INT 0
14065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
14066: LD_ADDR_VAR 0 4
14070: PUSH
14071: LD_INT 22
14073: PUSH
14074: LD_INT 1
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 30
14083: PUSH
14084: LD_INT 36
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: ST_TO_ADDR
// if not tmp then
14100: LD_VAR 0 4
14104: NOT
14105: IFFALSE 14109
// exit ;
14107: GO 14173
// for i in tmp do
14109: LD_ADDR_VAR 0 2
14113: PUSH
14114: LD_VAR 0 4
14118: PUSH
14119: FOR_IN
14120: IFFALSE 14171
// for j in UnitsInside ( i ) do
14122: LD_ADDR_VAR 0 3
14126: PUSH
14127: LD_VAR 0 2
14131: PPUSH
14132: CALL_OW 313
14136: PUSH
14137: FOR_IN
14138: IFFALSE 14167
// if GetClass ( j ) = class_mechanic then
14140: LD_VAR 0 3
14144: PPUSH
14145: CALL_OW 257
14149: PUSH
14150: LD_INT 3
14152: EQUAL
14153: IFFALSE 14165
// begin result := true ;
14155: LD_ADDR_VAR 0 1
14159: PUSH
14160: LD_INT 1
14162: ST_TO_ADDR
// break ;
14163: GO 14167
// end ;
14165: GO 14137
14167: POP
14168: POP
14169: GO 14119
14171: POP
14172: POP
// end ;
14173: LD_VAR 0 1
14177: RET
// every 12 12$0 do
14178: GO 14180
14180: DISABLE
// begin repeat wait ( 0 0$1 ) ;
14181: LD_INT 35
14183: PPUSH
14184: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
14188: LD_INT 1
14190: PPUSH
14191: CALL_OW 463
14195: NOT
14196: PUSH
14197: LD_INT 32
14199: PPUSH
14200: LD_INT 81
14202: PUSH
14203: LD_INT 1
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PPUSH
14210: CALL_OW 70
14214: NOT
14215: AND
14216: PUSH
14217: LD_EXP 27
14221: PUSH
14222: LD_INT 10500
14224: LESS
14225: OR
14226: IFFALSE 14181
// PrepareKurt ;
14228: CALL 16861 0 0
// end ;
14232: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
14233: LD_EXP 16
14237: PPUSH
14238: CALL_OW 302
14242: PUSH
14243: LD_EXP 16
14247: PPUSH
14248: CALL_OW 255
14252: PUSH
14253: LD_INT 1
14255: EQUAL
14256: AND
14257: PUSH
14258: LD_EXP 2
14262: AND
14263: IFFALSE 14428
14265: GO 14267
14267: DISABLE
// begin wait ( 0 0$50 ) ;
14268: LD_INT 1750
14270: PPUSH
14271: CALL_OW 67
// if not IsOk ( Joan ) then
14275: LD_EXP 16
14279: PPUSH
14280: CALL_OW 302
14284: NOT
14285: IFFALSE 14289
// exit ;
14287: GO 14428
// if IsOK ( Lisa ) then
14289: LD_EXP 2
14293: PPUSH
14294: CALL_OW 302
14298: IFFALSE 14428
// begin DialogueOn ;
14300: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14304: LD_EXP 2
14308: PPUSH
14309: LD_STRING D7-Lisa-1
14311: PPUSH
14312: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14316: LD_EXP 1
14320: PPUSH
14321: LD_STRING D7-JMM-1
14323: PPUSH
14324: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14328: LD_EXP 2
14332: PPUSH
14333: LD_STRING D7-Lisa-2
14335: PPUSH
14336: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14340: LD_EXP 1
14344: PPUSH
14345: LD_STRING D7-JMM-2
14347: PPUSH
14348: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14352: LD_EXP 2
14356: PPUSH
14357: LD_STRING D7-Lisa-3
14359: PPUSH
14360: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14364: LD_EXP 1
14368: PPUSH
14369: LD_STRING D7-JMM-3
14371: PPUSH
14372: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14376: LD_EXP 2
14380: PPUSH
14381: LD_STRING D7-Lisa-4
14383: PPUSH
14384: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14388: LD_EXP 1
14392: PPUSH
14393: LD_STRING D7-JMM-4
14395: PPUSH
14396: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14400: LD_EXP 1
14404: PPUSH
14405: LD_STRING D7-JMM-4a
14407: PPUSH
14408: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14412: LD_EXP 2
14416: PPUSH
14417: LD_STRING D7-Lisa-5
14419: PPUSH
14420: CALL_OW 88
// DialogueOff ;
14424: CALL_OW 7
// end ; end ;
14428: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14429: LD_EXP 14
14433: PUSH
14434: LD_INT 22
14436: PUSH
14437: LD_INT 1
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 91
14446: PUSH
14447: LD_EXP 14
14451: PUSH
14452: LD_INT 10
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: LIST
14459: PUSH
14460: LD_INT 2
14462: PUSH
14463: LD_INT 25
14465: PUSH
14466: LD_INT 1
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 25
14475: PUSH
14476: LD_INT 2
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 25
14485: PUSH
14486: LD_INT 3
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 25
14495: PUSH
14496: LD_INT 4
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: PPUSH
14515: CALL_OW 69
14519: PUSH
14520: LD_INT 1
14522: GREATER
14523: AND
14524: IFFALSE 14541
14526: GO 14528
14528: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14529: LD_EXP 14
14533: PPUSH
14534: LD_STRING D5-Sol1-1
14536: PPUSH
14537: CALL_OW 88
14541: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14542: LD_INT 22
14544: PUSH
14545: LD_INT 1
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 33
14554: PUSH
14555: LD_INT 2
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PPUSH
14566: CALL_OW 69
14570: PUSH
14571: LD_INT 2
14573: GREATEREQUAL
14574: IFFALSE 14594
14576: GO 14578
14578: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14579: LD_STRING MRa
14581: PPUSH
14582: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14586: LD_ADDR_EXP 29
14590: PUSH
14591: LD_INT 1
14593: ST_TO_ADDR
// end ;
14594: END
// every 2 2$00 do var i , last ;
14595: GO 14597
14597: DISABLE
14598: LD_INT 0
14600: PPUSH
14601: PPUSH
// begin last := 8 ;
14602: LD_ADDR_VAR 0 2
14606: PUSH
14607: LD_INT 8
14609: ST_TO_ADDR
// for i := 1 to last do
14610: LD_ADDR_VAR 0 1
14614: PUSH
14615: DOUBLE
14616: LD_INT 1
14618: DEC
14619: ST_TO_ADDR
14620: LD_VAR 0 2
14624: PUSH
14625: FOR_TO
14626: IFFALSE 14654
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14628: LD_INT 6300
14630: PPUSH
14631: LD_INT 12600
14633: PPUSH
14634: CALL_OW 12
14638: PPUSH
14639: CALL_OW 67
// PrepareRandoms ( i ) ;
14643: LD_VAR 0 1
14647: PPUSH
14648: CALL 4230 0 1
// end ;
14652: GO 14625
14654: POP
14655: POP
// end ;
14656: PPOPN 2
14658: END
// every 5 5$20 do
14659: GO 14661
14661: DISABLE
// begin DialogueOn ;
14662: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14666: LD_EXP 10
14670: PPUSH
14671: LD_STRING D12a-Sci-1
14673: PPUSH
14674: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14678: LD_EXP 1
14682: PPUSH
14683: LD_STRING D12a-JMM-1
14685: PPUSH
14686: CALL_OW 88
// DialogueOff ;
14690: CALL_OW 7
// cratesStatus := 1 ;
14694: LD_ADDR_EXP 39
14698: PUSH
14699: LD_INT 1
14701: ST_TO_ADDR
// end ;
14702: END
// every 13 13$0 do
14703: GO 14705
14705: DISABLE
// begin DialogueOn ;
14706: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14710: LD_EXP 10
14714: PPUSH
14715: LD_STRING D12b-Sci-1
14717: PPUSH
14718: CALL_OW 94
// DialogueOff ;
14722: CALL_OW 7
// cratesStatus := 2 ;
14726: LD_ADDR_EXP 39
14730: PUSH
14731: LD_INT 2
14733: ST_TO_ADDR
// BuildBulldozer ;
14734: CALL 10573 0 0
// end ;
14738: END
// every 32 32$0 do
14739: GO 14741
14741: DISABLE
// begin DialogueOn ;
14742: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14746: LD_EXP 10
14750: PPUSH
14751: LD_STRING D12c-Sci-1
14753: PPUSH
14754: CALL_OW 94
// DialogueOff ;
14758: CALL_OW 7
// wait ( 3 3$0 ) ;
14762: LD_INT 6300
14764: PPUSH
14765: CALL_OW 67
// DialogueOn ;
14769: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14773: LD_EXP 10
14777: PPUSH
14778: LD_STRING D12d-Sci-1
14780: PPUSH
14781: CALL_OW 94
// DialogueOff ;
14785: CALL_OW 7
// cratesStatus = 1 ;
14789: LD_ADDR_EXP 39
14793: PUSH
14794: LD_INT 1
14796: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14797: CALL 21156 0 0
// wait ( 2 2$30 ) ;
14801: LD_INT 5250
14803: PPUSH
14804: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14808: LD_INT 35
14810: PPUSH
14811: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14815: LD_INT 1
14817: PPUSH
14818: CALL_OW 463
14822: NOT
14823: PUSH
14824: LD_INT 32
14826: PPUSH
14827: LD_INT 81
14829: PUSH
14830: LD_INT 1
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PPUSH
14837: CALL_OW 70
14841: NOT
14842: AND
14843: PUSH
14844: LD_EXP 27
14848: PUSH
14849: LD_INT 6300
14851: LESS
14852: OR
14853: IFFALSE 14808
// PrepareJoan ;
14855: CALL 3085 0 0
// end ;
14859: END
// every 42 42$0 do
14860: GO 14862
14862: DISABLE
// begin DialogueOn ;
14863: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14867: LD_EXP 10
14871: PPUSH
14872: LD_STRING D12e-Sci-1
14874: PPUSH
14875: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14879: LD_EXP 1
14883: PPUSH
14884: LD_STRING D12e-JMM-1
14886: PPUSH
14887: CALL_OW 88
// DialogueOff ;
14891: CALL_OW 7
// cratesStatus := 2 ;
14895: LD_ADDR_EXP 39
14899: PUSH
14900: LD_INT 2
14902: ST_TO_ADDR
// end ; end_of_file
14903: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14904: LD_VAR 0 1
14908: PUSH
14909: LD_INT 1
14911: EQUAL
14912: PUSH
14913: LD_VAR 0 2
14917: PUSH
14918: LD_INT 3
14920: EQUAL
14921: AND
14922: IFFALSE 14932
// contactWithRussian := 1 ;
14924: LD_ADDR_EXP 23
14928: PUSH
14929: LD_INT 1
14931: ST_TO_ADDR
// end ;
14932: PPOPN 2
14934: END
// on BuildingComplete ( building ) do var i ;
14935: LD_INT 0
14937: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14938: LD_VAR 0 1
14942: PPUSH
14943: CALL_OW 266
14947: PUSH
14948: LD_INT 36
14950: EQUAL
14951: PUSH
14952: LD_VAR 0 1
14956: PPUSH
14957: CALL_OW 255
14961: PUSH
14962: LD_INT 1
14964: EQUAL
14965: AND
14966: PUSH
14967: LD_EXP 24
14971: PUSH
14972: LD_INT 0
14974: EQUAL
14975: AND
14976: IFFALSE 15056
// begin firstTower = 1 ;
14978: LD_ADDR_EXP 24
14982: PUSH
14983: LD_INT 1
14985: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14986: LD_INT 22
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 21
14998: PUSH
14999: LD_INT 1
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 25
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 26
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL_OW 69
15036: PUSH
15037: LD_EXP 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: DIFF
15045: PPUSH
15046: LD_STRING D3b-Mech1-1
15048: PPUSH
15049: LD_STRING D3b-Mech1-1
15051: PPUSH
15052: CALL 7530 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15056: LD_VAR 0 1
15060: PPUSH
15061: CALL_OW 266
15065: PUSH
15066: LD_INT 0
15068: EQUAL
15069: PUSH
15070: LD_VAR 0 1
15074: PPUSH
15075: CALL_OW 255
15079: PUSH
15080: LD_INT 1
15082: EQUAL
15083: AND
15084: IFFALSE 15098
// SetBName ( building , theta ) ;
15086: LD_VAR 0 1
15090: PPUSH
15091: LD_STRING theta
15093: PPUSH
15094: CALL_OW 500
// if GetSide ( building ) = 3 then
15098: LD_VAR 0 1
15102: PPUSH
15103: CALL_OW 255
15107: PUSH
15108: LD_INT 3
15110: EQUAL
15111: IFFALSE 15151
// begin for i := 1 to 4 do
15113: LD_ADDR_VAR 0 2
15117: PUSH
15118: DOUBLE
15119: LD_INT 1
15121: DEC
15122: ST_TO_ADDR
15123: LD_INT 4
15125: PUSH
15126: FOR_TO
15127: IFFALSE 15149
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15129: LD_ADDR_EXP 32
15133: PUSH
15134: LD_EXP 32
15138: PPUSH
15139: LD_INT 1
15141: PPUSH
15142: CALL_OW 3
15146: ST_TO_ADDR
15147: GO 15126
15149: POP
15150: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15151: LD_VAR 0 1
15155: PPUSH
15156: CALL_OW 255
15160: PUSH
15161: LD_INT 3
15163: EQUAL
15164: PUSH
15165: LD_VAR 0 1
15169: PPUSH
15170: CALL_OW 266
15174: PUSH
15175: LD_INT 0
15177: EQUAL
15178: PUSH
15179: LD_VAR 0 1
15183: PPUSH
15184: CALL_OW 266
15188: PUSH
15189: LD_INT 2
15191: EQUAL
15192: OR
15193: PUSH
15194: LD_VAR 0 1
15198: PPUSH
15199: CALL_OW 266
15203: PUSH
15204: LD_INT 4
15206: EQUAL
15207: OR
15208: PUSH
15209: EMPTY
15210: LIST
15211: AND
15212: IFFALSE 15223
// ComUpgrade ( building ) ;
15214: LD_VAR 0 1
15218: PPUSH
15219: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15223: LD_VAR 0 1
15227: PPUSH
15228: CALL_OW 255
15232: PUSH
15233: LD_INT 3
15235: EQUAL
15236: PUSH
15237: LD_VAR 0 1
15241: PPUSH
15242: CALL_OW 266
15246: PUSH
15247: LD_INT 32
15249: EQUAL
15250: AND
15251: IFFALSE 15292
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15253: LD_VAR 0 1
15257: PPUSH
15258: LD_INT 42
15260: PUSH
15261: LD_INT 43
15263: PUSH
15264: LD_INT 44
15266: PUSH
15267: LD_INT 46
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 1
15278: PPUSH
15279: LD_INT 4
15281: PPUSH
15282: CALL_OW 12
15286: ARRAY
15287: PPUSH
15288: CALL_OW 208
// end ;
15292: PPOPN 2
15294: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL 37723 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
15304: LD_VAR 0 1
15308: PUSH
15309: LD_INT 22
15311: PUSH
15312: LD_INT 1
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 21
15321: PUSH
15322: LD_INT 1
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 23
15331: PUSH
15332: LD_INT 1
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 69
15348: IN
15349: IFFALSE 15365
// killCounter := killCounter + 1 ;
15351: LD_ADDR_EXP 46
15355: PUSH
15356: LD_EXP 46
15360: PUSH
15361: LD_INT 1
15363: PLUS
15364: ST_TO_ADDR
// if unit in ruAttackersInForest then
15365: LD_VAR 0 1
15369: PUSH
15370: LD_EXP 49
15374: IN
15375: IFFALSE 15393
// ruAttackersInForest := ruAttackersInForest diff unit ;
15377: LD_ADDR_EXP 49
15381: PUSH
15382: LD_EXP 49
15386: PUSH
15387: LD_VAR 0 1
15391: DIFF
15392: ST_TO_ADDR
// if unit in ruAttackers then
15393: LD_VAR 0 1
15397: PUSH
15398: LD_EXP 48
15402: IN
15403: IFFALSE 15421
// ruAttackers := ruAttackers diff unit ;
15405: LD_ADDR_EXP 48
15409: PUSH
15410: LD_EXP 48
15414: PUSH
15415: LD_VAR 0 1
15419: DIFF
15420: ST_TO_ADDR
// if unit = JMM then
15421: LD_VAR 0 1
15425: PUSH
15426: LD_EXP 1
15430: EQUAL
15431: IFFALSE 15440
// YouLost ( JMM ) ;
15433: LD_STRING JMM
15435: PPUSH
15436: CALL_OW 104
// if unit = Joan then
15440: LD_VAR 0 1
15444: PUSH
15445: LD_EXP 16
15449: EQUAL
15450: IFFALSE 15460
// JoanStatus := 0 ;
15452: LD_ADDR_EXP 17
15456: PUSH
15457: LD_INT 0
15459: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15460: LD_VAR 0 1
15464: PPUSH
15465: CALL_OW 255
15469: PUSH
15470: LD_INT 1
15472: EQUAL
15473: PUSH
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 247
15483: PUSH
15484: LD_INT 1
15486: EQUAL
15487: AND
15488: PUSH
15489: LD_VAR 0 1
15493: PPUSH
15494: CALL_OW 248
15498: PUSH
15499: LD_INT 1
15501: EQUAL
15502: AND
15503: IFFALSE 15519
// unitLost = unitLost + 1 ;
15505: LD_ADDR_EXP 31
15509: PUSH
15510: LD_EXP 31
15514: PUSH
15515: LD_INT 1
15517: PLUS
15518: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15519: LD_VAR 0 1
15523: PPUSH
15524: CALL_OW 255
15528: PUSH
15529: LD_INT 3
15531: EQUAL
15532: PUSH
15533: LD_VAR 0 1
15537: PPUSH
15538: CALL_OW 247
15542: PUSH
15543: LD_INT 3
15545: EQUAL
15546: AND
15547: PUSH
15548: LD_VAR 0 1
15552: PPUSH
15553: CALL_OW 266
15557: PUSH
15558: LD_INT 4
15560: PUSH
15561: LD_INT 5
15563: PUSH
15564: LD_INT 32
15566: PUSH
15567: LD_INT 31
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: IN
15576: AND
15577: IFFALSE 15663
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15579: LD_ADDR_EXP 32
15583: PUSH
15584: LD_EXP 32
15588: PUSH
15589: LD_VAR 0 1
15593: PPUSH
15594: CALL_OW 266
15598: ADD
15599: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15600: LD_ADDR_EXP 32
15604: PUSH
15605: LD_EXP 32
15609: PUSH
15610: LD_VAR 0 1
15614: PPUSH
15615: CALL_OW 250
15619: ADD
15620: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15621: LD_ADDR_EXP 32
15625: PUSH
15626: LD_EXP 32
15630: PUSH
15631: LD_VAR 0 1
15635: PPUSH
15636: CALL_OW 251
15640: ADD
15641: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15642: LD_ADDR_EXP 32
15646: PUSH
15647: LD_EXP 32
15651: PUSH
15652: LD_VAR 0 1
15656: PPUSH
15657: CALL_OW 254
15661: ADD
15662: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15663: LD_EXP 47
15667: PUSH
15668: LD_VAR 0 1
15672: PPUSH
15673: CALL_OW 257
15677: PUSH
15678: LD_INT 3
15680: EQUAL
15681: AND
15682: PUSH
15683: LD_VAR 0 1
15687: PPUSH
15688: CALL_OW 255
15692: PUSH
15693: LD_INT 3
15695: EQUAL
15696: AND
15697: PUSH
15698: LD_INT 21
15700: PPUSH
15701: CALL_OW 302
15705: AND
15706: PUSH
15707: LD_INT 21
15709: PPUSH
15710: CALL_OW 255
15714: PUSH
15715: LD_INT 3
15717: EQUAL
15718: AND
15719: IFFALSE 15801
// begin ruMechCounter := ruMechCounter - 1 ;
15721: LD_ADDR_EXP 47
15725: PUSH
15726: LD_EXP 47
15730: PUSH
15731: LD_INT 1
15733: MINUS
15734: ST_TO_ADDR
// uc_side := 3 ;
15735: LD_ADDR_OWVAR 20
15739: PUSH
15740: LD_INT 3
15742: ST_TO_ADDR
// uc_nation := 3 ;
15743: LD_ADDR_OWVAR 21
15747: PUSH
15748: LD_INT 3
15750: ST_TO_ADDR
// hc_gallery :=  ;
15751: LD_ADDR_OWVAR 33
15755: PUSH
15756: LD_STRING 
15758: ST_TO_ADDR
// hc_name :=  ;
15759: LD_ADDR_OWVAR 26
15763: PUSH
15764: LD_STRING 
15766: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15767: LD_INT 0
15769: PPUSH
15770: LD_EXP 35
15774: PPUSH
15775: LD_EXP 36
15779: PPUSH
15780: CALL_OW 12
15784: PPUSH
15785: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15789: CALL_OW 44
15793: PPUSH
15794: LD_INT 21
15796: PPUSH
15797: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15801: LD_VAR 0 1
15805: PPUSH
15806: CALL_OW 255
15810: PUSH
15811: LD_INT 3
15813: EQUAL
15814: PUSH
15815: LD_VAR 0 1
15819: PPUSH
15820: CALL_OW 264
15824: PUSH
15825: LD_INT 52
15827: EQUAL
15828: AND
15829: PUSH
15830: LD_INT 21
15832: PPUSH
15833: CALL_OW 302
15837: AND
15838: PUSH
15839: LD_INT 21
15841: PPUSH
15842: CALL_OW 255
15846: PUSH
15847: LD_INT 3
15849: EQUAL
15850: AND
15851: IFFALSE 15872
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15853: LD_INT 21
15855: PPUSH
15856: LD_INT 22
15858: PPUSH
15859: LD_INT 1
15861: PPUSH
15862: LD_INT 1
15864: PPUSH
15865: LD_INT 52
15867: PPUSH
15868: CALL_OW 125
// end ;
15872: PPOPN 1
15874: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15875: LD_INT 0
15877: PPUSH
15878: PPUSH
15879: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15880: LD_VAR 0 1
15884: PPUSH
15885: LD_VAR 0 2
15889: PPUSH
15890: CALL 37843 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15894: LD_VAR 0 1
15898: PPUSH
15899: CALL_OW 255
15903: PUSH
15904: LD_INT 3
15906: EQUAL
15907: PUSH
15908: LD_VAR 0 1
15912: PPUSH
15913: CALL_OW 264
15917: PUSH
15918: LD_INT 51
15920: PUSH
15921: LD_INT 52
15923: PUSH
15924: LD_INT 53
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: IN
15932: NOT
15933: AND
15934: IFFALSE 15965
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15936: LD_ADDR_EXP 48
15940: PUSH
15941: LD_EXP 48
15945: PPUSH
15946: LD_EXP 48
15950: PUSH
15951: LD_INT 1
15953: PLUS
15954: PPUSH
15955: LD_VAR 0 1
15959: PPUSH
15960: CALL_OW 1
15964: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15965: LD_VAR 0 1
15969: PPUSH
15970: CALL_OW 264
15974: PUSH
15975: LD_INT 53
15977: EQUAL
15978: IFFALSE 16133
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15980: LD_VAR 0 1
15984: PPUSH
15985: LD_INT 60
15987: PPUSH
15988: LD_INT 85
15990: PPUSH
15991: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15995: LD_VAR 0 1
15999: PPUSH
16000: LD_INT 43
16002: PPUSH
16003: LD_INT 69
16005: PPUSH
16006: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
16010: LD_VAR 0 1
16014: PPUSH
16015: LD_INT 37
16017: PPUSH
16018: LD_INT 46
16020: PPUSH
16021: CALL_OW 171
// wait ( 0 0$1 ) ;
16025: LD_INT 35
16027: PPUSH
16028: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16032: LD_INT 35
16034: PPUSH
16035: CALL_OW 67
// until not HasTask ( vehicle ) ;
16039: LD_VAR 0 1
16043: PPUSH
16044: CALL_OW 314
16048: NOT
16049: IFFALSE 16032
// CutTreeInArea ( vehicle , cutTreeArea ) ;
16051: LD_VAR 0 1
16055: PPUSH
16056: LD_INT 34
16058: PPUSH
16059: CALL 10625 0 2
// repeat wait ( 0 0$1 ) ;
16063: LD_INT 35
16065: PPUSH
16066: CALL_OW 67
// until not HasTask ( vehicle ) ;
16070: LD_VAR 0 1
16074: PPUSH
16075: CALL_OW 314
16079: NOT
16080: IFFALSE 16063
// un := IsDrivenBy ( vehicle ) ;
16082: LD_ADDR_VAR 0 4
16086: PUSH
16087: LD_VAR 0 1
16091: PPUSH
16092: CALL_OW 311
16096: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
16097: LD_VAR 0 4
16101: PPUSH
16102: LD_INT 96
16104: PPUSH
16105: LD_INT 77
16107: PPUSH
16108: CALL_OW 171
// AddComExitVehicle ( un ) ;
16112: LD_VAR 0 4
16116: PPUSH
16117: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
16121: LD_VAR 0 4
16125: PPUSH
16126: LD_INT 17
16128: PPUSH
16129: CALL_OW 180
// end ; end ;
16133: PPOPN 5
16135: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16136: LD_VAR 0 1
16140: PPUSH
16141: CALL_OW 255
16145: PUSH
16146: LD_INT 3
16148: EQUAL
16149: IFFALSE 16180
// begin tamedApemans = tamedApemans + 1 ;
16151: LD_ADDR_EXP 33
16155: PUSH
16156: LD_EXP 33
16160: PUSH
16161: LD_INT 1
16163: PLUS
16164: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
16165: LD_VAR 0 1
16169: PPUSH
16170: LD_INT 106
16172: PPUSH
16173: LD_INT 85
16175: PPUSH
16176: CALL_OW 111
// end ; end ;
16180: PPOPN 2
16182: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
16183: LD_VAR 0 2
16187: PPUSH
16188: CALL_OW 255
16192: PUSH
16193: LD_INT 3
16195: EQUAL
16196: PUSH
16197: LD_VAR 0 1
16201: PPUSH
16202: CALL_OW 255
16206: PUSH
16207: LD_INT 3
16209: EQUAL
16210: AND
16211: PUSH
16212: LD_INT 21
16214: PPUSH
16215: CALL_OW 302
16219: AND
16220: IFFALSE 16234
// ComEnterUnit ( human , rufab ) ;
16222: LD_VAR 0 1
16226: PPUSH
16227: LD_INT 21
16229: PPUSH
16230: CALL_OW 120
// end ;
16234: PPOPN 4
16236: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16237: LD_VAR 0 1
16241: PUSH
16242: LD_INT 21
16244: EQUAL
16245: PUSH
16246: LD_VAR 0 2
16250: PPUSH
16251: CALL_OW 255
16255: PUSH
16256: LD_INT 3
16258: EQUAL
16259: AND
16260: IFFALSE 16274
// SetLives ( human , 1000 ) ;
16262: LD_VAR 0 2
16266: PPUSH
16267: LD_INT 1000
16269: PPUSH
16270: CALL_OW 234
// end ;
16274: PPOPN 2
16276: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL 37827 0 1
// end ; end_of_file
16286: PPOPN 1
16288: END
// every 0 0$30 trigger cratesStatus = 1 do
16289: LD_EXP 39
16293: PUSH
16294: LD_INT 1
16296: EQUAL
16297: IFFALSE 16350
16299: GO 16301
16301: DISABLE
// begin enable ;
16302: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
16303: LD_INT 350
16305: PUSH
16306: LD_INT 875
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 1
16315: PPUSH
16316: LD_INT 2
16318: PPUSH
16319: CALL_OW 12
16323: ARRAY
16324: PPUSH
16325: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
16329: LD_INT 1
16331: PPUSH
16332: LD_INT 5
16334: PPUSH
16335: CALL_OW 12
16339: PPUSH
16340: LD_INT 7
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 55
// end ;
16350: END
// every 1 1$0 trigger cratesStatus = 2 do
16351: LD_EXP 39
16355: PUSH
16356: LD_INT 2
16358: EQUAL
16359: IFFALSE 16442
16361: GO 16363
16363: DISABLE
// begin enable ;
16364: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16365: LD_INT 3150
16367: PUSH
16368: LD_INT 4550
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 1
16377: PPUSH
16378: LD_INT 2
16380: PPUSH
16381: CALL_OW 12
16385: ARRAY
16386: PPUSH
16387: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16391: LD_INT 2
16393: PUSH
16394: LD_INT 5
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 1
16403: PPUSH
16404: LD_INT 2
16406: PPUSH
16407: CALL_OW 12
16411: ARRAY
16412: PPUSH
16413: LD_INT 6
16415: PUSH
16416: LD_INT 7
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 1
16425: PPUSH
16426: LD_INT 2
16428: PPUSH
16429: CALL_OW 12
16433: ARRAY
16434: PPUSH
16435: LD_INT 1
16437: PPUSH
16438: CALL_OW 55
// end ;
16442: END
// every 0 0$30 + 0 0$10 do
16443: GO 16445
16445: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16446: LD_INT 4
16448: PUSH
16449: LD_INT 5
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 1
16458: PPUSH
16459: LD_INT 2
16461: PPUSH
16462: CALL_OW 12
16466: ARRAY
16467: PPUSH
16468: LD_INT 7
16470: PPUSH
16471: LD_INT 1
16473: PPUSH
16474: CALL_OW 55
// Wait ( 0 0$15 ) ;
16478: LD_INT 525
16480: PPUSH
16481: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16485: LD_INT 4
16487: PUSH
16488: LD_INT 5
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 1
16497: PPUSH
16498: LD_INT 2
16500: PPUSH
16501: CALL_OW 12
16505: ARRAY
16506: PPUSH
16507: LD_INT 7
16509: PPUSH
16510: LD_INT 1
16512: PPUSH
16513: CALL_OW 55
// Wait ( 0 0$20 ) ;
16517: LD_INT 700
16519: PPUSH
16520: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16524: LD_INT 4
16526: PUSH
16527: LD_INT 5
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 1
16536: PPUSH
16537: LD_INT 2
16539: PPUSH
16540: CALL_OW 12
16544: ARRAY
16545: PPUSH
16546: LD_INT 7
16548: PPUSH
16549: LD_INT 1
16551: PPUSH
16552: CALL_OW 55
// end ; end_of_file
16556: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16557: LD_EXP 25
16561: PUSH
16562: LD_INT 1
16564: EQUAL
16565: IFFALSE 16858
16567: GO 16569
16569: DISABLE
16570: LD_INT 0
16572: PPUSH
16573: PPUSH
16574: PPUSH
// begin enable ;
16575: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16576: LD_ADDR_VAR 0 2
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 21
16593: PUSH
16594: LD_INT 3
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 2
16603: PUSH
16604: LD_INT 30
16606: PUSH
16607: LD_INT 0
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 30
16616: PUSH
16617: LD_INT 1
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: LIST
16633: PPUSH
16634: CALL_OW 69
16638: ST_TO_ADDR
// for i in tmp do
16639: LD_ADDR_VAR 0 1
16643: PUSH
16644: LD_VAR 0 2
16648: PUSH
16649: FOR_IN
16650: IFFALSE 16683
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16652: LD_ADDR_VAR 0 3
16656: PUSH
16657: LD_VAR 0 3
16661: PUSH
16662: LD_VAR 0 1
16666: PPUSH
16667: CALL_OW 274
16671: PPUSH
16672: LD_INT 1
16674: PPUSH
16675: CALL_OW 275
16679: PLUS
16680: ST_TO_ADDR
16681: GO 16649
16683: POP
16684: POP
// strings = [ ] ;
16685: LD_ADDR_EXP 28
16689: PUSH
16690: EMPTY
16691: ST_TO_ADDR
// if tmp = 0 then
16692: LD_VAR 0 2
16696: PUSH
16697: LD_INT 0
16699: EQUAL
16700: IFFALSE 16725
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16702: LD_ADDR_EXP 28
16706: PUSH
16707: LD_EXP 28
16711: PUSH
16712: LD_STRING #Am06-1
16714: PUSH
16715: LD_EXP 26
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: ADD
16724: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16725: LD_VAR 0 2
16729: PUSH
16730: LD_EXP 26
16734: PUSH
16735: LD_VAR 0 3
16739: GREATER
16740: AND
16741: IFFALSE 16772
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16743: LD_ADDR_EXP 28
16747: PUSH
16748: LD_EXP 28
16752: PUSH
16753: LD_STRING #Am06-1
16755: PUSH
16756: LD_EXP 26
16760: PUSH
16761: LD_VAR 0 3
16765: MINUS
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: ADD
16771: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16772: LD_VAR 0 2
16776: PUSH
16777: LD_EXP 26
16781: PUSH
16782: LD_VAR 0 3
16786: LESSEQUAL
16787: AND
16788: IFFALSE 16811
// strings = strings ^ [ #Am06-1 , 0 ] ;
16790: LD_ADDR_EXP 28
16794: PUSH
16795: LD_EXP 28
16799: PUSH
16800: LD_STRING #Am06-1
16802: PUSH
16803: LD_INT 0
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: ADD
16810: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16811: LD_ADDR_EXP 27
16815: PUSH
16816: LD_EXP 27
16820: PUSH
16821: LD_INT 35
16823: MINUS
16824: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16825: LD_ADDR_EXP 28
16829: PUSH
16830: LD_EXP 28
16834: PUSH
16835: LD_STRING #Am06-2
16837: PUSH
16838: LD_EXP 27
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: ADD
16847: ST_TO_ADDR
// display_strings = strings ;
16848: LD_ADDR_OWVAR 47
16852: PUSH
16853: LD_EXP 28
16857: ST_TO_ADDR
// end ; end_of_file
16858: PPOPN 3
16860: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
16861: LD_INT 0
16863: PPUSH
16864: PPUSH
16865: PPUSH
16866: PPUSH
16867: PPUSH
16868: PPUSH
16869: PPUSH
16870: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16871: LD_ADDR_VAR 0 3
16875: PUSH
16876: LD_INT 22
16878: PUSH
16879: LD_INT 1
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: LD_INT 2
16888: PUSH
16889: LD_INT 30
16891: PUSH
16892: LD_INT 0
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 30
16901: PUSH
16902: LD_INT 1
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PPUSH
16918: CALL_OW 69
16922: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16923: LD_INT 35
16925: PPUSH
16926: CALL_OW 67
// until depot ;
16930: LD_VAR 0 3
16934: IFFALSE 16871
// forceJMM := false ;
16936: LD_ADDR_VAR 0 8
16940: PUSH
16941: LD_INT 0
16943: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16944: LD_INT 35
16946: PPUSH
16947: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
16951: LD_ADDR_VAR 0 4
16955: PUSH
16956: LD_INT 22
16958: PUSH
16959: LD_INT 1
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 91
16968: PUSH
16969: LD_VAR 0 3
16973: PUSH
16974: LD_INT 1
16976: ARRAY
16977: PUSH
16978: LD_INT 15
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 21
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 2
16998: PUSH
16999: LD_INT 25
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 25
17011: PUSH
17012: LD_INT 2
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 25
17021: PUSH
17022: LD_INT 3
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: LD_INT 25
17031: PUSH
17032: LD_INT 4
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 3
17048: PUSH
17049: LD_INT 54
17051: PUSH
17052: EMPTY
17053: LIST
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 3
17061: PUSH
17062: LD_INT 55
17064: PUSH
17065: EMPTY
17066: LIST
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: PPUSH
17080: CALL_OW 69
17084: PUSH
17085: LD_EXP 2
17089: PUSH
17090: LD_EXP 3
17094: PUSH
17095: LD_EXP 4
17099: PUSH
17100: LD_EXP 5
17104: PUSH
17105: LD_EXP 7
17109: PUSH
17110: LD_EXP 8
17114: PUSH
17115: LD_EXP 9
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: DIFF
17129: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
17130: LD_EXP 27
17134: PUSH
17135: LD_INT 21000
17137: LESS
17138: IFFALSE 17150
// begin forceJMM := true ;
17140: LD_ADDR_VAR 0 8
17144: PUSH
17145: LD_INT 1
17147: ST_TO_ADDR
// break ;
17148: GO 17166
// end ; until tmp and not InBattle ( 1 ) ;
17150: LD_VAR 0 4
17154: PUSH
17155: LD_INT 1
17157: PPUSH
17158: CALL_OW 463
17162: NOT
17163: AND
17164: IFFALSE 16944
// if not forceJMM then
17166: LD_VAR 0 8
17170: NOT
17171: IFFALSE 17199
// tmp := tmp [ rand ( 1 , tmp ) ] else
17173: LD_ADDR_VAR 0 4
17177: PUSH
17178: LD_VAR 0 4
17182: PUSH
17183: LD_INT 1
17185: PPUSH
17186: LD_VAR 0 4
17190: PPUSH
17191: CALL_OW 12
17195: ARRAY
17196: ST_TO_ADDR
17197: GO 17209
// tmp := JMM ;
17199: LD_ADDR_VAR 0 4
17203: PUSH
17204: LD_EXP 1
17208: ST_TO_ADDR
// blockSpawn := 1 ;
17209: LD_ADDR_EXP 30
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
// uc_side := 2 ;
17217: LD_ADDR_OWVAR 20
17221: PUSH
17222: LD_INT 2
17224: ST_TO_ADDR
// uc_nation := 2 ;
17225: LD_ADDR_OWVAR 21
17229: PUSH
17230: LD_INT 2
17232: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
17233: LD_ADDR_EXP 20
17237: PUSH
17238: LD_STRING Kurt
17240: PPUSH
17241: LD_INT 0
17243: PPUSH
17244: LD_STRING 
17246: PPUSH
17247: CALL 42617 0 3
17251: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17252: LD_EXP 20
17256: PPUSH
17257: LD_VAR 0 4
17261: PPUSH
17262: CALL_OW 250
17266: PPUSH
17267: LD_VAR 0 4
17271: PPUSH
17272: CALL_OW 251
17276: PPUSH
17277: LD_INT 5
17279: PPUSH
17280: LD_INT 1
17282: PPUSH
17283: CALL_OW 50
// InGameOn ;
17287: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17291: LD_EXP 20
17295: PPUSH
17296: CALL_OW 87
// wait ( 0 0$2 ) ;
17300: LD_INT 70
17302: PPUSH
17303: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17307: LD_EXP 20
17311: PPUSH
17312: LD_VAR 0 4
17316: PPUSH
17317: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
17321: LD_VAR 0 4
17325: PPUSH
17326: LD_EXP 20
17330: PPUSH
17331: CALL_OW 112
// wait ( 0 0$1 ) ;
17335: LD_INT 35
17337: PPUSH
17338: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17342: LD_VAR 0 4
17346: PPUSH
17347: LD_EXP 20
17351: PPUSH
17352: CALL_OW 119
// DialogueOn ;
17356: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17360: LD_EXP 20
17364: PPUSH
17365: LD_STRING D2-Kurt-1
17367: PPUSH
17368: CALL_OW 88
// if tmp = JMM then
17372: LD_VAR 0 4
17376: PUSH
17377: LD_EXP 1
17381: EQUAL
17382: IFFALSE 17474
// begin Say ( JMM , D2-JMM-1 ) ;
17384: LD_EXP 1
17388: PPUSH
17389: LD_STRING D2-JMM-1
17391: PPUSH
17392: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17396: LD_EXP 20
17400: PPUSH
17401: LD_STRING D2-Kurt-2
17403: PPUSH
17404: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17408: LD_EXP 1
17412: PPUSH
17413: LD_STRING D2-JMM-2
17415: PPUSH
17416: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17420: LD_EXP 20
17424: PPUSH
17425: LD_STRING D2-Kurt-3
17427: PPUSH
17428: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17432: LD_EXP 1
17436: PPUSH
17437: LD_STRING D2-JMM-3
17439: PPUSH
17440: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17444: LD_EXP 20
17448: PPUSH
17449: LD_STRING D2-Kurt-4
17451: PPUSH
17452: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17456: LD_EXP 1
17460: PPUSH
17461: LD_STRING D2-JMM-4
17463: PPUSH
17464: CALL_OW 88
// DialogueOff ;
17468: CALL_OW 7
// end else
17472: GO 17702
// begin if GetSex ( tmp ) = 1 then
17474: LD_VAR 0 4
17478: PPUSH
17479: CALL_OW 258
17483: PUSH
17484: LD_INT 1
17486: EQUAL
17487: IFFALSE 17503
// Say ( tmp , D2-Sol1-1 ) else
17489: LD_VAR 0 4
17493: PPUSH
17494: LD_STRING D2-Sol1-1
17496: PPUSH
17497: CALL_OW 88
17501: GO 17515
// Say ( tmp , D2-FSol1-1 ) ;
17503: LD_VAR 0 4
17507: PPUSH
17508: LD_STRING D2-FSol1-1
17510: PPUSH
17511: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17515: LD_EXP 20
17519: PPUSH
17520: LD_STRING D2-Kurt-2
17522: PPUSH
17523: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17527: LD_VAR 0 4
17531: PPUSH
17532: CALL_OW 258
17536: PUSH
17537: LD_INT 1
17539: EQUAL
17540: IFFALSE 17556
// Say ( tmp , D2-Sol1-2 ) else
17542: LD_VAR 0 4
17546: PPUSH
17547: LD_STRING D2-Sol1-2
17549: PPUSH
17550: CALL_OW 88
17554: GO 17568
// Say ( tmp , D2-FSol1-2 ) ;
17556: LD_VAR 0 4
17560: PPUSH
17561: LD_STRING D2-FSol1-2
17563: PPUSH
17564: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17568: LD_EXP 20
17572: PPUSH
17573: LD_STRING D2-Kurt-3
17575: PPUSH
17576: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17580: LD_VAR 0 4
17584: PPUSH
17585: CALL_OW 258
17589: PUSH
17590: LD_INT 1
17592: EQUAL
17593: IFFALSE 17609
// Say ( tmp , D2-Sol1-3 ) else
17595: LD_VAR 0 4
17599: PPUSH
17600: LD_STRING D2-Sol1-3
17602: PPUSH
17603: CALL_OW 88
17607: GO 17621
// Say ( tmp , D2-FSol1-3 ) ;
17609: LD_VAR 0 4
17613: PPUSH
17614: LD_STRING D2-FSol1-3
17616: PPUSH
17617: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17621: LD_EXP 20
17625: PPUSH
17626: LD_STRING D2-Kurt-4
17628: PPUSH
17629: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17633: LD_VAR 0 4
17637: PPUSH
17638: CALL_OW 258
17642: PUSH
17643: LD_INT 1
17645: EQUAL
17646: IFFALSE 17674
// begin Say ( tmp , D2-Sol1-4 ) ;
17648: LD_VAR 0 4
17652: PPUSH
17653: LD_STRING D2-Sol1-4
17655: PPUSH
17656: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17660: LD_VAR 0 4
17664: PPUSH
17665: LD_STRING D2-Sol1-5
17667: PPUSH
17668: CALL_OW 88
// end else
17672: GO 17698
// begin Say ( tmp , D2-FSol1-4 ) ;
17674: LD_VAR 0 4
17678: PPUSH
17679: LD_STRING D2-FSol1-4
17681: PPUSH
17682: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17686: LD_VAR 0 4
17690: PPUSH
17691: LD_STRING D2-FSol1-5
17693: PPUSH
17694: CALL_OW 88
// end ; DialogueOff ;
17698: CALL_OW 7
// end ; dec := ShowQuery1 ;
17702: LD_ADDR_VAR 0 6
17706: PUSH
17707: CALL 8015 0 0
17711: ST_TO_ADDR
// if dec = 1 then
17712: LD_VAR 0 6
17716: PUSH
17717: LD_INT 1
17719: EQUAL
17720: IFFALSE 17782
// begin DialogueOn ;
17722: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17726: LD_EXP 20
17730: PPUSH
17731: LD_STRING D2a-Kurt-1
17733: PPUSH
17734: CALL_OW 88
// DialogueOff ;
17738: CALL_OW 7
// InGameOff ;
17742: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17746: LD_INT 1
17748: PPUSH
17749: LD_INT 2
17751: PPUSH
17752: LD_INT 2
17754: PPUSH
17755: LD_INT 1
17757: PPUSH
17758: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17762: LD_EXP 20
17766: PPUSH
17767: LD_INT 8
17769: PPUSH
17770: CALL_OW 113
// readyToEscape := 1 ;
17774: LD_ADDR_EXP 22
17778: PUSH
17779: LD_INT 1
17781: ST_TO_ADDR
// end ; if dec = 2 then
17782: LD_VAR 0 6
17786: PUSH
17787: LD_INT 2
17789: EQUAL
17790: IFFALSE 18258
// begin DialogueOn ;
17792: CALL_OW 6
// if tmp = JMM then
17796: LD_VAR 0 4
17800: PUSH
17801: LD_EXP 1
17805: EQUAL
17806: IFFALSE 17862
// begin Say ( JMM , D2b-JMM-1 ) ;
17808: LD_EXP 1
17812: PPUSH
17813: LD_STRING D2b-JMM-1
17815: PPUSH
17816: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17820: LD_EXP 20
17824: PPUSH
17825: LD_STRING D2b-Kurt-1
17827: PPUSH
17828: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17832: LD_EXP 1
17836: PPUSH
17837: LD_STRING D2b-JMM-2
17839: PPUSH
17840: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17844: LD_EXP 20
17848: PPUSH
17849: LD_STRING D2b-Kurt-2
17851: PPUSH
17852: CALL_OW 88
// DialogueOff ;
17856: CALL_OW 7
// end else
17860: GO 18013
// begin if GetSex ( tmp ) = 1 then
17862: LD_VAR 0 4
17866: PPUSH
17867: CALL_OW 258
17871: PUSH
17872: LD_INT 1
17874: EQUAL
17875: IFFALSE 17891
// Say ( tmp , D2b-Sol1-1 ) else
17877: LD_VAR 0 4
17881: PPUSH
17882: LD_STRING D2b-Sol1-1
17884: PPUSH
17885: CALL_OW 88
17889: GO 17903
// Say ( tmp , D2b-FSol1-1 ) ;
17891: LD_VAR 0 4
17895: PPUSH
17896: LD_STRING D2b-FSol1-1
17898: PPUSH
17899: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17903: LD_EXP 20
17907: PPUSH
17908: LD_STRING D2b-Kurt-1
17910: PPUSH
17911: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17915: LD_VAR 0 4
17919: PPUSH
17920: CALL_OW 258
17924: PUSH
17925: LD_INT 1
17927: EQUAL
17928: IFFALSE 17944
// Say ( tmp , D2b-Sol1-2 ) else
17930: LD_VAR 0 4
17934: PPUSH
17935: LD_STRING D2b-Sol1-2
17937: PPUSH
17938: CALL_OW 88
17942: GO 17956
// Say ( tmp , D2b-FSol1-2 ) ;
17944: LD_VAR 0 4
17948: PPUSH
17949: LD_STRING D2b-FSol1-2
17951: PPUSH
17952: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17956: LD_EXP 20
17960: PPUSH
17961: LD_STRING D2b-Kurt-2
17963: PPUSH
17964: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17968: LD_VAR 0 4
17972: PPUSH
17973: CALL_OW 258
17977: PUSH
17978: LD_INT 1
17980: EQUAL
17981: IFFALSE 17997
// Say ( tmp , D2c-Sol1-2 ) else
17983: LD_VAR 0 4
17987: PPUSH
17988: LD_STRING D2c-Sol1-2
17990: PPUSH
17991: CALL_OW 88
17995: GO 18009
// Say ( tmp , D2c-FSol1-2 ) ;
17997: LD_VAR 0 4
18001: PPUSH
18002: LD_STRING D2c-FSol1-2
18004: PPUSH
18005: CALL_OW 88
// DialogueOff ;
18009: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
18013: LD_ADDR_VAR 0 7
18017: PUSH
18018: CALL 8036 0 0
18022: ST_TO_ADDR
// if dec2 = 1 then
18023: LD_VAR 0 7
18027: PUSH
18028: LD_INT 1
18030: EQUAL
18031: IFFALSE 18093
// begin DialogueOn ;
18033: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18037: LD_EXP 20
18041: PPUSH
18042: LD_STRING D2a-Kurt-1
18044: PPUSH
18045: CALL_OW 88
// DialogueOff ;
18049: CALL_OW 7
// InGameOff ;
18053: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18057: LD_INT 1
18059: PPUSH
18060: LD_INT 2
18062: PPUSH
18063: LD_INT 2
18065: PPUSH
18066: LD_INT 1
18068: PPUSH
18069: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
18073: LD_EXP 20
18077: PPUSH
18078: LD_INT 8
18080: PPUSH
18081: CALL_OW 113
// readyToEscape := 1 ;
18085: LD_ADDR_EXP 22
18089: PUSH
18090: LD_INT 1
18092: ST_TO_ADDR
// end ; if dec2 = 2 then
18093: LD_VAR 0 7
18097: PUSH
18098: LD_INT 2
18100: EQUAL
18101: IFFALSE 18258
// begin if tmp = JMM then
18103: LD_VAR 0 4
18107: PUSH
18108: LD_EXP 1
18112: EQUAL
18113: IFFALSE 18173
// begin DialogueOn ;
18115: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18119: LD_EXP 1
18123: PPUSH
18124: LD_STRING D2c-JMM-1
18126: PPUSH
18127: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18131: LD_EXP 20
18135: PPUSH
18136: LD_STRING D2c-Kurt-1
18138: PPUSH
18139: CALL_OW 88
// DialogueOff ;
18143: CALL_OW 7
// InGameOff ;
18147: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18151: LD_EXP 20
18155: PPUSH
18156: LD_INT 8
18158: PPUSH
18159: CALL_OW 113
// readyToEscape := 1 ;
18163: LD_ADDR_EXP 22
18167: PUSH
18168: LD_INT 1
18170: ST_TO_ADDR
// end else
18171: GO 18258
// begin DialogueOn ;
18173: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18177: LD_VAR 0 4
18181: PPUSH
18182: CALL_OW 258
18186: PUSH
18187: LD_INT 1
18189: EQUAL
18190: IFFALSE 18206
// Say ( tmp , D2c-Sol1-1 ) else
18192: LD_VAR 0 4
18196: PPUSH
18197: LD_STRING D2c-Sol1-1
18199: PPUSH
18200: CALL_OW 88
18204: GO 18218
// Say ( tmp , D2c-FSol1-1 ) ;
18206: LD_VAR 0 4
18210: PPUSH
18211: LD_STRING D2c-FSol1-1
18213: PPUSH
18214: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18218: LD_EXP 20
18222: PPUSH
18223: LD_STRING D2c-Kurt-1
18225: PPUSH
18226: CALL_OW 88
// DialogueOff ;
18230: CALL_OW 7
// InGameOff ;
18234: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18238: LD_EXP 20
18242: PPUSH
18243: LD_INT 8
18245: PPUSH
18246: CALL_OW 113
// readyToEscape := 1 ;
18250: LD_ADDR_EXP 22
18254: PUSH
18255: LD_INT 1
18257: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18258: LD_VAR 0 6
18262: PUSH
18263: LD_INT 3
18265: EQUAL
18266: IFFALSE 18427
// begin DialogueOn ;
18268: CALL_OW 6
// if tmp = JMM then
18272: LD_VAR 0 4
18276: PUSH
18277: LD_EXP 1
18281: EQUAL
18282: IFFALSE 18342
// begin DialogueOn ;
18284: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18288: LD_EXP 1
18292: PPUSH
18293: LD_STRING D2c-JMM-1
18295: PPUSH
18296: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18300: LD_EXP 20
18304: PPUSH
18305: LD_STRING D2c-Kurt-1
18307: PPUSH
18308: CALL_OW 88
// DialogueOff ;
18312: CALL_OW 7
// InGameOff ;
18316: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18320: LD_EXP 20
18324: PPUSH
18325: LD_INT 8
18327: PPUSH
18328: CALL_OW 113
// readyToEscape := 1 ;
18332: LD_ADDR_EXP 22
18336: PUSH
18337: LD_INT 1
18339: ST_TO_ADDR
// end else
18340: GO 18427
// begin DialogueOn ;
18342: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18346: LD_VAR 0 4
18350: PPUSH
18351: CALL_OW 258
18355: PUSH
18356: LD_INT 1
18358: EQUAL
18359: IFFALSE 18375
// Say ( tmp , D2c-Sol1-1 ) else
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_STRING D2c-Sol1-1
18368: PPUSH
18369: CALL_OW 88
18373: GO 18387
// Say ( tmp , D2c-FSol1-1 ) ;
18375: LD_VAR 0 4
18379: PPUSH
18380: LD_STRING D2c-FSol1-1
18382: PPUSH
18383: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18387: LD_EXP 20
18391: PPUSH
18392: LD_STRING D2c-Kurt-1
18394: PPUSH
18395: CALL_OW 88
// DialogueOff ;
18399: CALL_OW 7
// InGameOff ;
18403: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18407: LD_EXP 20
18411: PPUSH
18412: LD_INT 8
18414: PPUSH
18415: CALL_OW 113
// readyToEscape := 1 ;
18419: LD_ADDR_EXP 22
18423: PUSH
18424: LD_INT 1
18426: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18427: LD_ADDR_EXP 30
18431: PUSH
18432: LD_INT 0
18434: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18435: LD_INT 35
18437: PPUSH
18438: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18442: LD_EXP 20
18446: PPUSH
18447: LD_INT 8
18449: PPUSH
18450: CALL_OW 308
18454: PUSH
18455: LD_EXP 22
18459: AND
18460: PUSH
18461: LD_EXP 20
18465: PPUSH
18466: CALL_OW 301
18470: OR
18471: IFFALSE 18435
// if IsDead ( Kurt ) then
18473: LD_EXP 20
18477: PPUSH
18478: CALL_OW 301
18482: IFFALSE 18486
// exit ;
18484: GO 18541
// RemoveUnit ( Kurt ) ;
18486: LD_EXP 20
18490: PPUSH
18491: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18495: LD_EXP 20
18499: PPUSH
18500: LD_STRING Kurt
18502: PPUSH
18503: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18507: LD_INT 1
18509: PPUSH
18510: LD_INT 2
18512: PPUSH
18513: CALL_OW 81
18517: PUSH
18518: LD_INT 0
18520: EQUAL
18521: IFFALSE 18533
// kurtStatus = 1 else
18523: LD_ADDR_EXP 21
18527: PUSH
18528: LD_INT 1
18530: ST_TO_ADDR
18531: GO 18541
// kurtStatus = 2 ;
18533: LD_ADDR_EXP 21
18537: PUSH
18538: LD_INT 2
18540: ST_TO_ADDR
// end ; end_of_file
18541: LD_VAR 0 1
18545: RET
// every 0 0$2 do
18546: GO 18548
18548: DISABLE
// begin enable ;
18549: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18550: LD_INT 3
18552: PPUSH
18553: LD_INT 2
18555: PPUSH
18556: LD_INT 10
18558: PPUSH
18559: LD_EXP 32
18563: PPUSH
18564: CALL 8467 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18568: LD_INT 3
18570: PPUSH
18571: LD_INT 12
18573: PPUSH
18574: LD_EXP 32
18578: PPUSH
18579: CALL 10070 0 3
// if disableHealAI = 0 then
18583: LD_EXP 34
18587: PUSH
18588: LD_INT 0
18590: EQUAL
18591: IFFALSE 18612
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18593: LD_INT 3
18595: PPUSH
18596: LD_INT 9
18598: PPUSH
18599: LD_INT 10
18601: PPUSH
18602: LD_INT 32
18604: PUSH
18605: EMPTY
18606: LIST
18607: PPUSH
18608: CALL 8834 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18612: LD_INT 3
18614: PPUSH
18615: LD_INT 51
18617: PPUSH
18618: LD_INT 6
18620: PPUSH
18621: CALL 9523 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18625: LD_INT 2
18627: PPUSH
18628: CALL_OW 303
18632: PUSH
18633: LD_INT 2
18635: PPUSH
18636: CALL_OW 255
18640: PUSH
18641: LD_INT 1
18643: EQUAL
18644: OR
18645: IFFALSE 18659
// DefendDepot ( 3 , rudepo ) else
18647: LD_INT 3
18649: PPUSH
18650: LD_INT 2
18652: PPUSH
18653: CALL 9350 0 2
18657: GO 18669
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18659: LD_INT 3
18661: PPUSH
18662: LD_INT 10
18664: PPUSH
18665: CALL 9641 0 2
// end ;
18669: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18670: LD_INT 22
18672: PUSH
18673: LD_INT 3
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 21
18682: PUSH
18683: LD_INT 2
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 55
18692: PUSH
18693: EMPTY
18694: LIST
18695: PUSH
18696: LD_INT 3
18698: PUSH
18699: LD_INT 34
18701: PUSH
18702: LD_INT 51
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: PPUSH
18719: CALL_OW 69
18723: PUSH
18724: LD_INT 0
18726: EQUAL
18727: PUSH
18728: LD_INT 21
18730: PPUSH
18731: CALL_OW 255
18735: PUSH
18736: LD_INT 3
18738: EQUAL
18739: AND
18740: PUSH
18741: LD_INT 21
18743: PPUSH
18744: CALL_OW 302
18748: AND
18749: PUSH
18750: LD_INT 2
18752: PPUSH
18753: CALL_OW 255
18757: PUSH
18758: LD_INT 3
18760: EQUAL
18761: AND
18762: PUSH
18763: LD_INT 2
18765: PPUSH
18766: CALL_OW 302
18770: AND
18771: PUSH
18772: LD_INT 21
18774: PPUSH
18775: CALL_OW 313
18779: AND
18780: PUSH
18781: LD_EXP 48
18785: PUSH
18786: LD_INT 4
18788: PUSH
18789: LD_INT 5
18791: PUSH
18792: LD_INT 6
18794: PUSH
18795: LD_INT 6
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: LD_OWVAR 67
18808: ARRAY
18809: LESS
18810: AND
18811: IFFALSE 19032
18813: GO 18815
18815: DISABLE
// begin enable ;
18816: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18817: LD_INT 2
18819: PPUSH
18820: CALL_OW 274
18824: PPUSH
18825: LD_INT 1
18827: PPUSH
18828: LD_INT 2000
18830: PPUSH
18831: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18835: LD_INT 3
18837: PPUSH
18838: LD_INT 21
18840: PPUSH
18841: LD_INT 4
18843: PUSH
18844: LD_INT 5
18846: PUSH
18847: LD_INT 6
18849: PUSH
18850: LD_INT 6
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: PUSH
18859: LD_OWVAR 67
18863: ARRAY
18864: PUSH
18865: LD_EXP 48
18869: MINUS
18870: PPUSH
18871: LD_INT 43
18873: PUSH
18874: LD_INT 43
18876: PUSH
18877: LD_INT 44
18879: PUSH
18880: LD_INT 44
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 43
18891: PUSH
18892: LD_INT 43
18894: PUSH
18895: LD_INT 43
18897: PUSH
18898: LD_INT 44
18900: PUSH
18901: LD_INT 44
18903: PUSH
18904: LD_INT 46
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 43
18917: PUSH
18918: LD_INT 43
18920: PUSH
18921: LD_INT 43
18923: PUSH
18924: LD_INT 44
18926: PUSH
18927: LD_INT 44
18929: PUSH
18930: LD_INT 46
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 43
18943: PUSH
18944: LD_INT 43
18946: PUSH
18947: LD_INT 44
18949: PUSH
18950: LD_INT 46
18952: PUSH
18953: LD_INT 46
18955: PUSH
18956: LD_INT 46
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: PUSH
18973: LD_OWVAR 67
18977: ARRAY
18978: PPUSH
18979: LD_INT 1
18981: PPUSH
18982: LD_INT 1
18984: PPUSH
18985: LD_INT 22
18987: PUSH
18988: LD_INT 22
18990: PUSH
18991: LD_INT 24
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 1
19000: PPUSH
19001: LD_INT 2
19003: PPUSH
19004: CALL_OW 12
19008: ARRAY
19009: PUSH
19010: LD_INT 24
19012: PUSH
19013: LD_INT 24
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: LD_OWVAR 67
19026: ARRAY
19027: PPUSH
19028: CALL 8313 0 7
// end ;
19032: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
19033: LD_INT 17
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_INT 3
19043: EQUAL
19044: PUSH
19045: LD_INT 17
19047: PPUSH
19048: CALL_OW 302
19052: AND
19053: PUSH
19054: LD_INT 2
19056: PPUSH
19057: CALL_OW 255
19061: PUSH
19062: LD_INT 3
19064: EQUAL
19065: AND
19066: PUSH
19067: LD_INT 2
19069: PPUSH
19070: CALL_OW 302
19074: AND
19075: PUSH
19076: LD_EXP 48
19080: PUSH
19081: LD_INT 4
19083: PUSH
19084: LD_INT 5
19086: PUSH
19087: LD_INT 6
19089: PUSH
19090: LD_INT 7
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: PUSH
19099: LD_OWVAR 67
19103: ARRAY
19104: LESS
19105: AND
19106: IFFALSE 19154
19108: GO 19110
19110: DISABLE
// begin enable ;
19111: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19112: LD_INT 17
19114: PPUSH
19115: LD_INT 22
19117: PPUSH
19118: LD_INT 1
19120: PPUSH
19121: LD_INT 1
19123: PPUSH
19124: LD_INT 42
19126: PUSH
19127: LD_INT 43
19129: PUSH
19130: LD_INT 44
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 1
19140: PPUSH
19141: LD_INT 3
19143: PPUSH
19144: CALL_OW 12
19148: ARRAY
19149: PPUSH
19150: CALL_OW 185
// end ;
19154: END
// every 2 2$0 do var i , j ;
19155: GO 19157
19157: DISABLE
19158: LD_INT 0
19160: PPUSH
19161: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19162: LD_INT 14700
19164: PUSH
19165: LD_INT 33600
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 1
19174: PPUSH
19175: LD_INT 2
19177: PPUSH
19178: CALL_OW 12
19182: ARRAY
19183: PPUSH
19184: CALL_OW 67
// disableHealAI = 1 ;
19188: LD_ADDR_EXP 34
19192: PUSH
19193: LD_INT 1
19195: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19196: LD_ADDR_VAR 0 1
19200: PUSH
19201: LD_INT 22
19203: PUSH
19204: LD_INT 3
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 25
19213: PUSH
19214: LD_INT 4
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 69
19229: PUSH
19230: FOR_IN
19231: IFFALSE 19244
// ComExitBuilding ( i ) ;
19233: LD_VAR 0 1
19237: PPUSH
19238: CALL_OW 122
19242: GO 19230
19244: POP
19245: POP
// wait ( 0 0$1 ) ;
19246: LD_INT 35
19248: PPUSH
19249: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19253: LD_INT 35
19255: PPUSH
19256: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19260: LD_ADDR_VAR 0 1
19264: PUSH
19265: LD_INT 22
19267: PUSH
19268: LD_INT 3
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 25
19277: PUSH
19278: LD_INT 4
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: PUSH
19294: FOR_IN
19295: IFFALSE 19372
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19297: LD_ADDR_VAR 0 2
19301: PUSH
19302: LD_INT 17
19304: PPUSH
19305: LD_INT 22
19307: PUSH
19308: LD_INT 0
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 25
19317: PUSH
19318: LD_INT 12
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PPUSH
19329: CALL_OW 70
19333: PUSH
19334: FOR_IN
19335: IFFALSE 19368
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19337: LD_VAR 0 1
19341: PPUSH
19342: LD_VAR 0 2
19346: PPUSH
19347: CALL_OW 250
19351: PPUSH
19352: LD_VAR 0 2
19356: PPUSH
19357: CALL_OW 251
19361: PPUSH
19362: CALL_OW 191
19366: GO 19334
19368: POP
19369: POP
19370: GO 19294
19372: POP
19373: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19374: LD_INT 22
19376: PUSH
19377: LD_INT 3
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 25
19386: PUSH
19387: LD_INT 4
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PPUSH
19398: CALL_OW 69
19402: PUSH
19403: LD_INT 0
19405: EQUAL
19406: PUSH
19407: LD_EXP 33
19411: PUSH
19412: LD_INT 6
19414: PUSH
19415: LD_INT 7
19417: PUSH
19418: LD_INT 8
19420: PUSH
19421: LD_INT 8
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: PUSH
19430: LD_OWVAR 67
19434: ARRAY
19435: GREATEREQUAL
19436: OR
19437: PUSH
19438: LD_INT 17
19440: PPUSH
19441: LD_INT 22
19443: PUSH
19444: LD_INT 0
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 25
19453: PUSH
19454: LD_INT 12
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PPUSH
19465: CALL_OW 70
19469: PUSH
19470: LD_INT 0
19472: EQUAL
19473: OR
19474: IFFALSE 19253
// disableHealAI = 0 ;
19476: LD_ADDR_EXP 34
19480: PUSH
19481: LD_INT 0
19483: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19484: LD_ADDR_VAR 0 1
19488: PUSH
19489: LD_INT 22
19491: PUSH
19492: LD_INT 3
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 25
19501: PUSH
19502: LD_INT 12
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PPUSH
19513: CALL_OW 69
19517: PUSH
19518: FOR_IN
19519: IFFALSE 19535
// SetClass ( i , 16 ) ;
19521: LD_VAR 0 1
19525: PPUSH
19526: LD_INT 16
19528: PPUSH
19529: CALL_OW 336
19533: GO 19518
19535: POP
19536: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19537: LD_ADDR_VAR 0 1
19541: PUSH
19542: LD_INT 22
19544: PUSH
19545: LD_INT 3
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 25
19554: PUSH
19555: LD_INT 4
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 69
19570: PUSH
19571: FOR_IN
19572: IFFALSE 19588
// ComEnterUnit ( i , rulab ) ;
19574: LD_VAR 0 1
19578: PPUSH
19579: LD_INT 32
19581: PPUSH
19582: CALL_OW 120
19586: GO 19571
19588: POP
19589: POP
// end ; end_of_file
19590: PPOPN 2
19592: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19593: LD_EXP 27
19597: PUSH
19598: LD_INT 0
19600: LESSEQUAL
19601: IFFALSE 19755
19603: GO 19605
19605: DISABLE
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
19610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19611: LD_ADDR_VAR 0 2
19615: PUSH
19616: LD_INT 22
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 21
19628: PUSH
19629: LD_INT 3
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 2
19638: PUSH
19639: LD_INT 30
19641: PUSH
19642: LD_INT 0
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 30
19651: PUSH
19652: LD_INT 1
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: LIST
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: LIST
19668: PPUSH
19669: CALL_OW 69
19673: ST_TO_ADDR
// for i in tmp do
19674: LD_ADDR_VAR 0 1
19678: PUSH
19679: LD_VAR 0 2
19683: PUSH
19684: FOR_IN
19685: IFFALSE 19718
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19687: LD_ADDR_VAR 0 3
19691: PUSH
19692: LD_VAR 0 3
19696: PUSH
19697: LD_VAR 0 1
19701: PPUSH
19702: CALL_OW 274
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: CALL_OW 275
19714: PLUS
19715: ST_TO_ADDR
19716: GO 19684
19718: POP
19719: POP
// if yourCrates >= needCrates then
19720: LD_VAR 0 3
19724: PUSH
19725: LD_EXP 26
19729: GREATEREQUAL
19730: IFFALSE 19748
// FinishMission ( yourCrates , needCrates ) else
19732: LD_VAR 0 3
19736: PPUSH
19737: LD_EXP 26
19741: PPUSH
19742: CALL 19758 0 2
19746: GO 19755
// YouLost ( matmin ) ;
19748: LD_STRING matmin
19750: PPUSH
19751: CALL_OW 104
// end ;
19755: PPOPN 3
19757: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19758: LD_INT 0
19760: PPUSH
19761: PPUSH
19762: PPUSH
19763: PPUSH
// if killCounter = 0 then
19764: LD_EXP 46
19768: PUSH
19769: LD_INT 0
19771: EQUAL
19772: IFFALSE 19781
// SetAchievement ( ACH_SURV ) ;
19774: LD_STRING ACH_SURV
19776: PPUSH
19777: CALL_OW 543
// if killCounter >= 8 or killCounter >= Count ( UnitFilter ( arrivals , [ f_ok ] ) ) then
19781: LD_EXP 46
19785: PUSH
19786: LD_INT 8
19788: GREATEREQUAL
19789: PUSH
19790: LD_EXP 46
19794: PUSH
19795: LD_EXP 45
19799: PPUSH
19800: LD_INT 50
19802: PUSH
19803: EMPTY
19804: LIST
19805: PPUSH
19806: CALL_OW 72
19810: PPUSH
19811: CALL 44719 0 1
19815: GREATEREQUAL
19816: OR
19817: IFFALSE 19826
// YouLost ( Troops ) ;
19819: LD_STRING Troops
19821: PPUSH
19822: CALL_OW 104
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19826: LD_INT 22
19828: PUSH
19829: LD_INT 3
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 3
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PPUSH
19850: CALL_OW 69
19854: PUSH
19855: LD_INT 0
19857: EQUAL
19858: IFFALSE 19874
// begin wait ( 3 ) ;
19860: LD_INT 3
19862: PPUSH
19863: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19867: LD_STRING ACH_BASEDESTROYER
19869: PPUSH
19870: CALL_OW 543
// end ; m1 := false ;
19874: LD_ADDR_VAR 0 4
19878: PUSH
19879: LD_INT 0
19881: ST_TO_ADDR
// m2 := false ;
19882: LD_ADDR_VAR 0 5
19886: PUSH
19887: LD_INT 0
19889: ST_TO_ADDR
// m3 := false ;
19890: LD_ADDR_VAR 0 6
19894: PUSH
19895: LD_INT 0
19897: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19898: LD_VAR 0 1
19902: PUSH
19903: LD_INT 100
19905: PUSH
19906: LD_INT 140
19908: PUSH
19909: LD_INT 180
19911: PUSH
19912: LD_INT 220
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: PUSH
19921: LD_OWVAR 67
19925: ARRAY
19926: PLUS
19927: PUSH
19928: LD_VAR 0 2
19932: GREATER
19933: IFFALSE 19965
// begin AddMedal ( cans , 1 ) ;
19935: LD_STRING cans
19937: PPUSH
19938: LD_INT 1
19940: PPUSH
19941: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19945: LD_INT 1
19947: PPUSH
19948: LD_STRING 06_crates_1
19950: PPUSH
19951: CALL_OW 39
// m1 := true ;
19955: LD_ADDR_VAR 0 4
19959: PUSH
19960: LD_INT 1
19962: ST_TO_ADDR
// end else
19963: GO 19986
// begin AddMedal ( cans , - 1 ) ;
19965: LD_STRING cans
19967: PPUSH
19968: LD_INT 1
19970: NEG
19971: PPUSH
19972: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19976: LD_INT 0
19978: PPUSH
19979: LD_STRING 06_crates_1
19981: PPUSH
19982: CALL_OW 39
// end ; if unitLost < 3 then
19986: LD_EXP 31
19990: PUSH
19991: LD_INT 3
19993: LESS
19994: IFFALSE 20016
// begin AddMedal ( people , 1 ) ;
19996: LD_STRING people
19998: PPUSH
19999: LD_INT 1
20001: PPUSH
20002: CALL_OW 101
// m2 := true ;
20006: LD_ADDR_VAR 0 5
20010: PUSH
20011: LD_INT 1
20013: ST_TO_ADDR
// end else
20014: GO 20027
// AddMedal ( people , - 1 ) ;
20016: LD_STRING people
20018: PPUSH
20019: LD_INT 1
20021: NEG
20022: PPUSH
20023: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20027: LD_EXP 29
20031: PPUSH
20032: LD_STRING 06_remoteVehs_1
20034: PPUSH
20035: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20039: LD_EXP 29
20043: PUSH
20044: LD_INT 1
20046: EQUAL
20047: IFFALSE 20069
// begin AddMedal ( remote , 1 ) ;
20049: LD_STRING remote
20051: PPUSH
20052: LD_INT 1
20054: PPUSH
20055: CALL_OW 101
// m3 := true ;
20059: LD_ADDR_VAR 0 6
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// end else
20067: GO 20109
// begin if GetTech ( 18 , 1 ) = state_enabled then
20069: LD_INT 18
20071: PPUSH
20072: LD_INT 1
20074: PPUSH
20075: CALL_OW 321
20079: PUSH
20080: LD_INT 1
20082: EQUAL
20083: IFFALSE 20098
// AddMedal ( remote , - 1 ) else
20085: LD_STRING remote
20087: PPUSH
20088: LD_INT 1
20090: NEG
20091: PPUSH
20092: CALL_OW 101
20096: GO 20109
// AddMedal ( remote , - 2 ) ;
20098: LD_STRING remote
20100: PPUSH
20101: LD_INT 2
20103: NEG
20104: PPUSH
20105: CALL_OW 101
// end ; if m1 and m2 and m3 then
20109: LD_VAR 0 4
20113: PUSH
20114: LD_VAR 0 5
20118: AND
20119: PUSH
20120: LD_VAR 0 6
20124: AND
20125: IFFALSE 20141
// begin wait ( 3 ) ;
20127: LD_INT 3
20129: PPUSH
20130: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
20134: LD_STRING ACH_ASPEED_6
20136: PPUSH
20137: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
20141: LD_OWVAR 67
20145: PUSH
20146: LD_INT 3
20148: GREATEREQUAL
20149: PUSH
20150: LD_VAR 0 4
20154: AND
20155: PUSH
20156: LD_VAR 0 5
20160: AND
20161: PUSH
20162: LD_VAR 0 6
20166: AND
20167: IFFALSE 20179
// SetAchievementEX ( ACH_AMER , 6 ) ;
20169: LD_STRING ACH_AMER
20171: PPUSH
20172: LD_INT 6
20174: PPUSH
20175: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
20179: LD_EXP 21
20183: PPUSH
20184: LD_STRING 06_KurtStatus_1
20186: PPUSH
20187: CALL_OW 39
// GiveMedals ( Main ) ;
20191: LD_STRING Main
20193: PPUSH
20194: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20198: LD_INT 22
20200: PUSH
20201: LD_INT 1
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 21
20210: PUSH
20211: LD_INT 1
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 50
20220: PUSH
20221: EMPTY
20222: LIST
20223: PUSH
20224: LD_INT 2
20226: PUSH
20227: LD_INT 25
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 25
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 25
20249: PUSH
20250: LD_INT 3
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 25
20259: PUSH
20260: LD_INT 4
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: PPUSH
20280: CALL_OW 69
20284: PPUSH
20285: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20289: LD_EXP 1
20293: PPUSH
20294: LD_EXP 43
20298: PUSH
20299: LD_STRING JMM
20301: STR
20302: PPUSH
20303: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20307: LD_EXP 2
20311: PPUSH
20312: LD_EXP 43
20316: PUSH
20317: LD_STRING Lisa
20319: STR
20320: PPUSH
20321: CALL 7628 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20325: LD_EXP 3
20329: PPUSH
20330: LD_EXP 43
20334: PUSH
20335: LD_STRING Bobby
20337: STR
20338: PPUSH
20339: CALL 7628 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20343: LD_EXP 4
20347: PPUSH
20348: LD_EXP 43
20352: PUSH
20353: LD_STRING Cyrus
20355: STR
20356: PPUSH
20357: CALL 7628 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20361: LD_EXP 5
20365: PPUSH
20366: LD_EXP 43
20370: PUSH
20371: LD_STRING Frank
20373: STR
20374: PPUSH
20375: CALL 7628 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20379: LD_EXP 6
20383: PPUSH
20384: LD_EXP 43
20388: PUSH
20389: LD_STRING Brown
20391: STR
20392: PPUSH
20393: CALL 7628 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20397: LD_EXP 7
20401: PPUSH
20402: LD_EXP 43
20406: PUSH
20407: LD_STRING Donaldson
20409: STR
20410: PPUSH
20411: CALL 7628 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20415: LD_EXP 8
20419: PPUSH
20420: LD_EXP 43
20424: PUSH
20425: LD_STRING Gladstone
20427: STR
20428: PPUSH
20429: CALL 7628 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20433: LD_EXP 9
20437: PPUSH
20438: LD_EXP 43
20442: PUSH
20443: LD_STRING Denis
20445: STR
20446: PPUSH
20447: CALL 7628 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20451: LD_EXP 16
20455: PPUSH
20456: LD_EXP 43
20460: PUSH
20461: LD_STRING Joan
20463: STR
20464: PPUSH
20465: CALL 7628 0 2
// if IsLive ( Mike ) then
20469: LD_EXP 11
20473: PPUSH
20474: CALL_OW 300
20478: IFFALSE 20498
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20480: LD_EXP 11
20484: PPUSH
20485: LD_EXP 43
20489: PUSH
20490: LD_STRING Mike
20492: STR
20493: PPUSH
20494: CALL_OW 38
// if IsLive ( Joan ) then
20498: LD_EXP 16
20502: PPUSH
20503: CALL_OW 300
20507: IFFALSE 20521
// SaveCharacters ( Joan , Joan ) ;
20509: LD_EXP 16
20513: PPUSH
20514: LD_STRING Joan
20516: PPUSH
20517: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20521: LD_EXP 17
20525: PPUSH
20526: LD_STRING 06_JoanStatus_1
20528: PPUSH
20529: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20533: LD_INT 50
20535: PUSH
20536: EMPTY
20537: LIST
20538: PUSH
20539: LD_INT 22
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 21
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 2
20561: PUSH
20562: LD_INT 25
20564: PUSH
20565: LD_INT 1
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 25
20574: PUSH
20575: LD_INT 2
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 25
20584: PUSH
20585: LD_INT 3
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 25
20594: PUSH
20595: LD_INT 4
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: PPUSH
20615: CALL_OW 69
20619: PUSH
20620: LD_EXP 1
20624: PUSH
20625: LD_EXP 2
20629: PUSH
20630: LD_EXP 3
20634: PUSH
20635: LD_EXP 4
20639: PUSH
20640: LD_EXP 5
20644: PUSH
20645: LD_EXP 6
20649: PUSH
20650: LD_EXP 7
20654: PUSH
20655: LD_EXP 8
20659: PUSH
20660: LD_EXP 9
20664: PUSH
20665: LD_EXP 16
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: DIFF
20682: PPUSH
20683: LD_STRING 06_other_survivors
20685: PPUSH
20686: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20690: LD_INT 50
20692: PUSH
20693: EMPTY
20694: LIST
20695: PUSH
20696: LD_INT 22
20698: PUSH
20699: LD_INT 1
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 21
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 2
20718: PUSH
20719: LD_INT 25
20721: PUSH
20722: LD_INT 12
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 25
20731: PUSH
20732: LD_INT 16
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: PPUSH
20750: CALL_OW 69
20754: PPUSH
20755: LD_STRING 06_other_apemans
20757: PPUSH
20758: CALL_OW 38
// YouWin ;
20762: CALL_OW 103
// end ; end_of_file
20766: LD_VAR 0 3
20770: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
20771: LD_EXP 48
20775: PUSH
20776: LD_OWVAR 1
20780: PUSH
20781: LD_INT 23100
20783: PUSH
20784: LD_INT 21000
20786: PUSH
20787: LD_INT 18900
20789: PUSH
20790: LD_INT 16800
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: PUSH
20799: LD_OWVAR 67
20803: ARRAY
20804: GREATER
20805: AND
20806: IFFALSE 21153
20808: GO 20810
20810: DISABLE
20811: LD_INT 0
20813: PPUSH
20814: PPUSH
20815: PPUSH
20816: PPUSH
// begin enable ;
20817: ENABLE
// for i in ruAttackers do
20818: LD_ADDR_VAR 0 1
20822: PUSH
20823: LD_EXP 48
20827: PUSH
20828: FOR_IN
20829: IFFALSE 21151
// begin if not IsDrivenBy ( i ) then
20831: LD_VAR 0 1
20835: PPUSH
20836: CALL_OW 311
20840: NOT
20841: IFFALSE 20845
// continue ;
20843: GO 20828
// if i mod 2 = 0 then
20845: LD_VAR 0 1
20849: PUSH
20850: LD_INT 2
20852: MOD
20853: PUSH
20854: LD_INT 0
20856: EQUAL
20857: IFFALSE 20912
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20859: LD_ADDR_VAR 0 3
20863: PUSH
20864: LD_INT 91
20866: PUSH
20867: LD_INT 52
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 82
20876: PUSH
20877: LD_INT 34
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 90
20886: PUSH
20887: LD_INT 26
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 86
20896: PUSH
20897: LD_INT 16
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: ST_TO_ADDR
20910: GO 21007
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20912: LD_ADDR_VAR 0 3
20916: PUSH
20917: LD_INT 91
20919: PUSH
20920: LD_INT 52
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 68
20929: PUSH
20930: LD_INT 46
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 48
20939: PUSH
20940: LD_INT 43
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 44
20949: PUSH
20950: LD_INT 42
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 33
20959: PUSH
20960: LD_INT 34
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 29
20969: PUSH
20970: LD_INT 23
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 30
20979: PUSH
20980: LD_INT 19
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 38
20989: PUSH
20990: LD_INT 16
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
21007: LD_VAR 0 1
21011: PPUSH
21012: CALL_OW 256
21016: PUSH
21017: LD_INT 1000
21019: EQUAL
21020: IFFALSE 21038
// AgressiveMove ( i , path ) else
21022: LD_VAR 0 1
21026: PPUSH
21027: LD_VAR 0 3
21031: PPUSH
21032: CALL 82923 0 2
21036: GO 21149
// if GetLives ( i ) < 650 then
21038: LD_VAR 0 1
21042: PPUSH
21043: CALL_OW 256
21047: PUSH
21048: LD_INT 650
21050: LESS
21051: IFFALSE 21149
// begin if not IsInArea ( i , russianRepairArea ) then
21053: LD_VAR 0 1
21057: PPUSH
21058: LD_INT 12
21060: PPUSH
21061: CALL_OW 308
21065: NOT
21066: IFFALSE 21135
// begin SetTag ( i , 0 ) ;
21068: LD_VAR 0 1
21072: PPUSH
21073: LD_INT 0
21075: PPUSH
21076: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
21080: LD_VAR 0 1
21084: PPUSH
21085: CALL_OW 261
21089: PUSH
21090: LD_INT 50
21092: LESS
21093: PUSH
21094: LD_INT 21
21096: PPUSH
21097: CALL_OW 302
21101: AND
21102: IFFALSE 21118
// ComMoveUnit ( i , rufab ) else
21104: LD_VAR 0 1
21108: PPUSH
21109: LD_INT 21
21111: PPUSH
21112: CALL_OW 112
21116: GO 21133
// ComMoveXY ( i , 121 , 99 ) ;
21118: LD_VAR 0 1
21122: PPUSH
21123: LD_INT 121
21125: PPUSH
21126: LD_INT 99
21128: PPUSH
21129: CALL_OW 111
// end else
21133: GO 21149
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
21135: LD_VAR 0 1
21139: PPUSH
21140: CALL_OW 311
21144: PPUSH
21145: CALL 82019 0 1
// end ; end ;
21149: GO 20828
21151: POP
21152: POP
// end ;
21153: PPOPN 4
21155: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
21156: LD_INT 0
21158: PPUSH
21159: PPUSH
21160: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
21161: LD_ADDR_VAR 0 2
21165: PUSH
21166: DOUBLE
21167: LD_INT 1
21169: DEC
21170: ST_TO_ADDR
21171: LD_INT 4
21173: PUSH
21174: LD_INT 5
21176: PUSH
21177: LD_INT 6
21179: PUSH
21180: LD_INT 6
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: PUSH
21189: LD_OWVAR 67
21193: ARRAY
21194: PUSH
21195: FOR_TO
21196: IFFALSE 21371
// begin uc_side := 3 ;
21198: LD_ADDR_OWVAR 20
21202: PUSH
21203: LD_INT 3
21205: ST_TO_ADDR
// uc_nation := 3 ;
21206: LD_ADDR_OWVAR 21
21210: PUSH
21211: LD_INT 3
21213: ST_TO_ADDR
// InitHC_All ( ) ;
21214: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
21218: LD_INT 0
21220: PPUSH
21221: LD_INT 4
21223: PUSH
21224: LD_INT 5
21226: PUSH
21227: LD_INT 6
21229: PUSH
21230: LD_INT 6
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: PUSH
21239: LD_OWVAR 67
21243: ARRAY
21244: PPUSH
21245: CALL_OW 381
// un := CreateHuman ;
21249: LD_ADDR_VAR 0 3
21253: PUSH
21254: CALL_OW 44
21258: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
21259: LD_VAR 0 3
21263: PPUSH
21264: LD_INT 127
21266: PPUSH
21267: LD_INT 62
21269: PPUSH
21270: LD_INT 3
21272: PPUSH
21273: LD_INT 0
21275: PPUSH
21276: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
21280: LD_ADDR_EXP 49
21284: PUSH
21285: LD_EXP 49
21289: PPUSH
21290: LD_EXP 49
21294: PUSH
21295: LD_INT 1
21297: PLUS
21298: PPUSH
21299: LD_VAR 0 3
21303: PPUSH
21304: CALL_OW 1
21308: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
21309: LD_VAR 0 3
21313: PPUSH
21314: LD_INT 83
21316: PPUSH
21317: LD_INT 49
21319: PPUSH
21320: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
21324: LD_VAR 0 3
21328: PPUSH
21329: LD_INT 49
21331: PPUSH
21332: LD_INT 43
21334: PPUSH
21335: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
21339: LD_VAR 0 3
21343: PPUSH
21344: LD_INT 31
21346: PPUSH
21347: LD_INT 15
21349: PPUSH
21350: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
21354: LD_VAR 0 3
21358: PPUSH
21359: LD_INT 63
21361: PPUSH
21362: LD_INT 9
21364: PPUSH
21365: CALL_OW 174
// end ;
21369: GO 21195
21371: POP
21372: POP
// end ; end_of_file
21373: LD_VAR 0 1
21377: RET
// export function CreateNature ; var i , un ; begin
21378: LD_INT 0
21380: PPUSH
21381: PPUSH
21382: PPUSH
// for i := 1 to Difficulty + 2 do
21383: LD_ADDR_VAR 0 2
21387: PUSH
21388: DOUBLE
21389: LD_INT 1
21391: DEC
21392: ST_TO_ADDR
21393: LD_OWVAR 67
21397: PUSH
21398: LD_INT 2
21400: PLUS
21401: PUSH
21402: FOR_TO
21403: IFFALSE 21512
// begin hc_sex := sex_male ;
21405: LD_ADDR_OWVAR 27
21409: PUSH
21410: LD_INT 1
21412: ST_TO_ADDR
// uc_side := 0 ;
21413: LD_ADDR_OWVAR 20
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// uc_nation := nation_nature ;
21421: LD_ADDR_OWVAR 21
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// hc_class := class_tiger ;
21429: LD_ADDR_OWVAR 28
21433: PUSH
21434: LD_INT 14
21436: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21437: LD_ADDR_OWVAR 31
21441: PUSH
21442: LD_EXP 36
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: LD_INT 0
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21462: LD_ADDR_OWVAR 35
21466: PUSH
21467: LD_INT 5
21469: NEG
21470: PPUSH
21471: LD_INT 5
21473: PPUSH
21474: CALL_OW 12
21478: PUSH
21479: LD_OWVAR 67
21483: MUL
21484: ST_TO_ADDR
// un := CreateHuman ;
21485: LD_ADDR_VAR 0 3
21489: PUSH
21490: CALL_OW 44
21494: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21495: LD_VAR 0 3
21499: PPUSH
21500: LD_INT 18
21502: PPUSH
21503: LD_INT 0
21505: PPUSH
21506: CALL_OW 49
// end ;
21510: GO 21402
21512: POP
21513: POP
// for i = 1 to rand ( 3 , 4 ) do
21514: LD_ADDR_VAR 0 2
21518: PUSH
21519: DOUBLE
21520: LD_INT 1
21522: DEC
21523: ST_TO_ADDR
21524: LD_INT 3
21526: PPUSH
21527: LD_INT 4
21529: PPUSH
21530: CALL_OW 12
21534: PUSH
21535: FOR_TO
21536: IFFALSE 21606
// begin hc_class := class_phororhacos ;
21538: LD_ADDR_OWVAR 28
21542: PUSH
21543: LD_INT 18
21545: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21546: LD_ADDR_OWVAR 31
21550: PUSH
21551: LD_EXP 36
21555: PUSH
21556: LD_INT 0
21558: PUSH
21559: LD_INT 0
21561: PUSH
21562: LD_INT 0
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: ST_TO_ADDR
// hc_agressivity := 0 ;
21571: LD_ADDR_OWVAR 35
21575: PUSH
21576: LD_INT 0
21578: ST_TO_ADDR
// un = CreateHuman ;
21579: LD_ADDR_VAR 0 3
21583: PUSH
21584: CALL_OW 44
21588: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21589: LD_VAR 0 3
21593: PPUSH
21594: LD_INT 18
21596: PPUSH
21597: LD_INT 0
21599: PPUSH
21600: CALL_OW 49
// end ;
21604: GO 21535
21606: POP
21607: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21608: LD_ADDR_VAR 0 2
21612: PUSH
21613: DOUBLE
21614: LD_INT 1
21616: DEC
21617: ST_TO_ADDR
21618: LD_INT 3
21620: PUSH
21621: LD_INT 3
21623: PUSH
21624: LD_INT 4
21626: PUSH
21627: LD_INT 5
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: PUSH
21636: LD_OWVAR 67
21640: ARRAY
21641: PUSH
21642: FOR_TO
21643: IFFALSE 21784
// begin hc_class := class_apeman ;
21645: LD_ADDR_OWVAR 28
21649: PUSH
21650: LD_INT 12
21652: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21653: LD_ADDR_OWVAR 31
21657: PUSH
21658: LD_INT 2
21660: PPUSH
21661: LD_INT 5
21663: PPUSH
21664: CALL_OW 12
21668: PUSH
21669: LD_INT 0
21671: PPUSH
21672: LD_INT 2
21674: PPUSH
21675: CALL_OW 12
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: LD_INT 0
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21692: LD_ADDR_OWVAR 35
21696: PUSH
21697: LD_INT 5
21699: NEG
21700: PPUSH
21701: LD_INT 10
21703: PPUSH
21704: CALL_OW 12
21708: PUSH
21709: LD_INT 10
21711: NEG
21712: PPUSH
21713: LD_INT 20
21715: PPUSH
21716: CALL_OW 12
21720: PUSH
21721: LD_INT 20
21723: NEG
21724: PPUSH
21725: LD_INT 25
21727: PPUSH
21728: CALL_OW 12
21732: PUSH
21733: LD_INT 30
21735: NEG
21736: PPUSH
21737: LD_INT 30
21739: PPUSH
21740: CALL_OW 12
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: PUSH
21751: LD_OWVAR 67
21755: ARRAY
21756: ST_TO_ADDR
// un := CreateHuman ;
21757: LD_ADDR_VAR 0 3
21761: PUSH
21762: CALL_OW 44
21766: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21767: LD_VAR 0 3
21771: PPUSH
21772: LD_INT 19
21774: PPUSH
21775: LD_INT 0
21777: PPUSH
21778: CALL_OW 49
// end ;
21782: GO 21642
21784: POP
21785: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
21786: LD_ADDR_VAR 0 2
21790: PUSH
21791: DOUBLE
21792: LD_INT 1
21794: DEC
21795: ST_TO_ADDR
21796: LD_INT 3
21798: PUSH
21799: LD_INT 4
21801: PUSH
21802: LD_INT 5
21804: PUSH
21805: LD_INT 6
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: PUSH
21814: LD_OWVAR 67
21818: ARRAY
21819: PUSH
21820: FOR_TO
21821: IFFALSE 21914
// begin hc_class := class_apeman ;
21823: LD_ADDR_OWVAR 28
21827: PUSH
21828: LD_INT 12
21830: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21831: LD_ADDR_OWVAR 31
21835: PUSH
21836: LD_INT 2
21838: PPUSH
21839: LD_INT 5
21841: PPUSH
21842: CALL_OW 12
21846: PUSH
21847: LD_INT 0
21849: PPUSH
21850: LD_INT 2
21852: PPUSH
21853: CALL_OW 12
21857: PUSH
21858: LD_INT 0
21860: PUSH
21861: LD_INT 0
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21870: LD_ADDR_OWVAR 35
21874: PUSH
21875: LD_INT 15
21877: NEG
21878: PPUSH
21879: LD_INT 15
21881: PPUSH
21882: CALL_OW 12
21886: ST_TO_ADDR
// un = CreateHuman ;
21887: LD_ADDR_VAR 0 3
21891: PUSH
21892: CALL_OW 44
21896: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21897: LD_VAR 0 3
21901: PPUSH
21902: LD_INT 20
21904: PPUSH
21905: LD_INT 0
21907: PPUSH
21908: CALL_OW 49
// end ;
21912: GO 21820
21914: POP
21915: POP
// end ; end_of_file end_of_file
21916: LD_VAR 0 1
21920: RET
// export globalGameSaveCounter ; every 0 0$1 do
21921: GO 21923
21923: DISABLE
// begin enable ;
21924: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21925: LD_STRING updateTimer(
21927: PUSH
21928: LD_OWVAR 1
21932: STR
21933: PUSH
21934: LD_STRING );
21936: STR
21937: PPUSH
21938: CALL_OW 559
// end ;
21942: END
// every 0 0$1 do
21943: GO 21945
21945: DISABLE
// begin globalGameSaveCounter := 0 ;
21946: LD_ADDR_EXP 50
21950: PUSH
21951: LD_INT 0
21953: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
21954: LD_STRING setGameSaveCounter(0)
21956: PPUSH
21957: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
21961: LD_STRING initStreamRollete();
21963: PPUSH
21964: CALL_OW 559
// InitStreamMode ;
21968: CALL 23294 0 0
// DefineStreamItems ( false ) ;
21972: LD_INT 0
21974: PPUSH
21975: CALL 23758 0 1
// end ;
21979: END
// export function SOS_MapStart ( ) ; begin
21980: LD_INT 0
21982: PPUSH
// if streamModeActive then
21983: LD_EXP 51
21987: IFFALSE 21996
// DefineStreamItems ( true ) ;
21989: LD_INT 1
21991: PPUSH
21992: CALL 23758 0 1
// UpdateLuaVariables ( ) ;
21996: CALL 22013 0 0
// UpdateFactoryWaypoints ( ) ;
22000: CALL 36627 0 0
// UpdateWarehouseGatheringPoints ( ) ;
22004: CALL 36884 0 0
// end ;
22008: LD_VAR 0 1
22012: RET
// function UpdateLuaVariables ( ) ; begin
22013: LD_INT 0
22015: PPUSH
// if globalGameSaveCounter then
22016: LD_EXP 50
22020: IFFALSE 22054
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
22022: LD_ADDR_EXP 50
22026: PUSH
22027: LD_EXP 50
22031: PPUSH
22032: CALL 81680 0 1
22036: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22037: LD_STRING setGameSaveCounter(
22039: PUSH
22040: LD_EXP 50
22044: STR
22045: PUSH
22046: LD_STRING )
22048: STR
22049: PPUSH
22050: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
22054: LD_STRING setGameDifficulty(
22056: PUSH
22057: LD_OWVAR 67
22061: STR
22062: PUSH
22063: LD_STRING )
22065: STR
22066: PPUSH
22067: CALL_OW 559
// end ;
22071: LD_VAR 0 1
22075: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22076: LD_INT 0
22078: PPUSH
// if p2 = stream_mode then
22079: LD_VAR 0 2
22083: PUSH
22084: LD_INT 100
22086: EQUAL
22087: IFFALSE 23090
// begin if not StreamModeActive then
22089: LD_EXP 51
22093: NOT
22094: IFFALSE 22104
// StreamModeActive := true ;
22096: LD_ADDR_EXP 51
22100: PUSH
22101: LD_INT 1
22103: ST_TO_ADDR
// if p3 = 0 then
22104: LD_VAR 0 3
22108: PUSH
22109: LD_INT 0
22111: EQUAL
22112: IFFALSE 22118
// InitStreamMode ;
22114: CALL 23294 0 0
// if p3 = 1 then
22118: LD_VAR 0 3
22122: PUSH
22123: LD_INT 1
22125: EQUAL
22126: IFFALSE 22136
// sRocket := true ;
22128: LD_ADDR_EXP 56
22132: PUSH
22133: LD_INT 1
22135: ST_TO_ADDR
// if p3 = 2 then
22136: LD_VAR 0 3
22140: PUSH
22141: LD_INT 2
22143: EQUAL
22144: IFFALSE 22154
// sSpeed := true ;
22146: LD_ADDR_EXP 55
22150: PUSH
22151: LD_INT 1
22153: ST_TO_ADDR
// if p3 = 3 then
22154: LD_VAR 0 3
22158: PUSH
22159: LD_INT 3
22161: EQUAL
22162: IFFALSE 22172
// sEngine := true ;
22164: LD_ADDR_EXP 57
22168: PUSH
22169: LD_INT 1
22171: ST_TO_ADDR
// if p3 = 4 then
22172: LD_VAR 0 3
22176: PUSH
22177: LD_INT 4
22179: EQUAL
22180: IFFALSE 22190
// sSpec := true ;
22182: LD_ADDR_EXP 54
22186: PUSH
22187: LD_INT 1
22189: ST_TO_ADDR
// if p3 = 5 then
22190: LD_VAR 0 3
22194: PUSH
22195: LD_INT 5
22197: EQUAL
22198: IFFALSE 22208
// sLevel := true ;
22200: LD_ADDR_EXP 58
22204: PUSH
22205: LD_INT 1
22207: ST_TO_ADDR
// if p3 = 6 then
22208: LD_VAR 0 3
22212: PUSH
22213: LD_INT 6
22215: EQUAL
22216: IFFALSE 22226
// sArmoury := true ;
22218: LD_ADDR_EXP 59
22222: PUSH
22223: LD_INT 1
22225: ST_TO_ADDR
// if p3 = 7 then
22226: LD_VAR 0 3
22230: PUSH
22231: LD_INT 7
22233: EQUAL
22234: IFFALSE 22244
// sRadar := true ;
22236: LD_ADDR_EXP 60
22240: PUSH
22241: LD_INT 1
22243: ST_TO_ADDR
// if p3 = 8 then
22244: LD_VAR 0 3
22248: PUSH
22249: LD_INT 8
22251: EQUAL
22252: IFFALSE 22262
// sBunker := true ;
22254: LD_ADDR_EXP 61
22258: PUSH
22259: LD_INT 1
22261: ST_TO_ADDR
// if p3 = 9 then
22262: LD_VAR 0 3
22266: PUSH
22267: LD_INT 9
22269: EQUAL
22270: IFFALSE 22280
// sHack := true ;
22272: LD_ADDR_EXP 62
22276: PUSH
22277: LD_INT 1
22279: ST_TO_ADDR
// if p3 = 10 then
22280: LD_VAR 0 3
22284: PUSH
22285: LD_INT 10
22287: EQUAL
22288: IFFALSE 22298
// sFire := true ;
22290: LD_ADDR_EXP 63
22294: PUSH
22295: LD_INT 1
22297: ST_TO_ADDR
// if p3 = 11 then
22298: LD_VAR 0 3
22302: PUSH
22303: LD_INT 11
22305: EQUAL
22306: IFFALSE 22316
// sRefresh := true ;
22308: LD_ADDR_EXP 64
22312: PUSH
22313: LD_INT 1
22315: ST_TO_ADDR
// if p3 = 12 then
22316: LD_VAR 0 3
22320: PUSH
22321: LD_INT 12
22323: EQUAL
22324: IFFALSE 22334
// sExp := true ;
22326: LD_ADDR_EXP 65
22330: PUSH
22331: LD_INT 1
22333: ST_TO_ADDR
// if p3 = 13 then
22334: LD_VAR 0 3
22338: PUSH
22339: LD_INT 13
22341: EQUAL
22342: IFFALSE 22352
// sDepot := true ;
22344: LD_ADDR_EXP 66
22348: PUSH
22349: LD_INT 1
22351: ST_TO_ADDR
// if p3 = 14 then
22352: LD_VAR 0 3
22356: PUSH
22357: LD_INT 14
22359: EQUAL
22360: IFFALSE 22370
// sFlag := true ;
22362: LD_ADDR_EXP 67
22366: PUSH
22367: LD_INT 1
22369: ST_TO_ADDR
// if p3 = 15 then
22370: LD_VAR 0 3
22374: PUSH
22375: LD_INT 15
22377: EQUAL
22378: IFFALSE 22388
// sKamikadze := true ;
22380: LD_ADDR_EXP 75
22384: PUSH
22385: LD_INT 1
22387: ST_TO_ADDR
// if p3 = 16 then
22388: LD_VAR 0 3
22392: PUSH
22393: LD_INT 16
22395: EQUAL
22396: IFFALSE 22406
// sTroll := true ;
22398: LD_ADDR_EXP 76
22402: PUSH
22403: LD_INT 1
22405: ST_TO_ADDR
// if p3 = 17 then
22406: LD_VAR 0 3
22410: PUSH
22411: LD_INT 17
22413: EQUAL
22414: IFFALSE 22424
// sSlow := true ;
22416: LD_ADDR_EXP 77
22420: PUSH
22421: LD_INT 1
22423: ST_TO_ADDR
// if p3 = 18 then
22424: LD_VAR 0 3
22428: PUSH
22429: LD_INT 18
22431: EQUAL
22432: IFFALSE 22442
// sLack := true ;
22434: LD_ADDR_EXP 78
22438: PUSH
22439: LD_INT 1
22441: ST_TO_ADDR
// if p3 = 19 then
22442: LD_VAR 0 3
22446: PUSH
22447: LD_INT 19
22449: EQUAL
22450: IFFALSE 22460
// sTank := true ;
22452: LD_ADDR_EXP 80
22456: PUSH
22457: LD_INT 1
22459: ST_TO_ADDR
// if p3 = 20 then
22460: LD_VAR 0 3
22464: PUSH
22465: LD_INT 20
22467: EQUAL
22468: IFFALSE 22478
// sRemote := true ;
22470: LD_ADDR_EXP 81
22474: PUSH
22475: LD_INT 1
22477: ST_TO_ADDR
// if p3 = 21 then
22478: LD_VAR 0 3
22482: PUSH
22483: LD_INT 21
22485: EQUAL
22486: IFFALSE 22496
// sPowell := true ;
22488: LD_ADDR_EXP 82
22492: PUSH
22493: LD_INT 1
22495: ST_TO_ADDR
// if p3 = 22 then
22496: LD_VAR 0 3
22500: PUSH
22501: LD_INT 22
22503: EQUAL
22504: IFFALSE 22514
// sTeleport := true ;
22506: LD_ADDR_EXP 85
22510: PUSH
22511: LD_INT 1
22513: ST_TO_ADDR
// if p3 = 23 then
22514: LD_VAR 0 3
22518: PUSH
22519: LD_INT 23
22521: EQUAL
22522: IFFALSE 22532
// sOilTower := true ;
22524: LD_ADDR_EXP 87
22528: PUSH
22529: LD_INT 1
22531: ST_TO_ADDR
// if p3 = 24 then
22532: LD_VAR 0 3
22536: PUSH
22537: LD_INT 24
22539: EQUAL
22540: IFFALSE 22550
// sShovel := true ;
22542: LD_ADDR_EXP 88
22546: PUSH
22547: LD_INT 1
22549: ST_TO_ADDR
// if p3 = 25 then
22550: LD_VAR 0 3
22554: PUSH
22555: LD_INT 25
22557: EQUAL
22558: IFFALSE 22568
// sSheik := true ;
22560: LD_ADDR_EXP 89
22564: PUSH
22565: LD_INT 1
22567: ST_TO_ADDR
// if p3 = 26 then
22568: LD_VAR 0 3
22572: PUSH
22573: LD_INT 26
22575: EQUAL
22576: IFFALSE 22586
// sEarthquake := true ;
22578: LD_ADDR_EXP 91
22582: PUSH
22583: LD_INT 1
22585: ST_TO_ADDR
// if p3 = 27 then
22586: LD_VAR 0 3
22590: PUSH
22591: LD_INT 27
22593: EQUAL
22594: IFFALSE 22604
// sAI := true ;
22596: LD_ADDR_EXP 92
22600: PUSH
22601: LD_INT 1
22603: ST_TO_ADDR
// if p3 = 28 then
22604: LD_VAR 0 3
22608: PUSH
22609: LD_INT 28
22611: EQUAL
22612: IFFALSE 22622
// sCargo := true ;
22614: LD_ADDR_EXP 95
22618: PUSH
22619: LD_INT 1
22621: ST_TO_ADDR
// if p3 = 29 then
22622: LD_VAR 0 3
22626: PUSH
22627: LD_INT 29
22629: EQUAL
22630: IFFALSE 22640
// sDLaser := true ;
22632: LD_ADDR_EXP 96
22636: PUSH
22637: LD_INT 1
22639: ST_TO_ADDR
// if p3 = 30 then
22640: LD_VAR 0 3
22644: PUSH
22645: LD_INT 30
22647: EQUAL
22648: IFFALSE 22658
// sExchange := true ;
22650: LD_ADDR_EXP 97
22654: PUSH
22655: LD_INT 1
22657: ST_TO_ADDR
// if p3 = 31 then
22658: LD_VAR 0 3
22662: PUSH
22663: LD_INT 31
22665: EQUAL
22666: IFFALSE 22676
// sFac := true ;
22668: LD_ADDR_EXP 98
22672: PUSH
22673: LD_INT 1
22675: ST_TO_ADDR
// if p3 = 32 then
22676: LD_VAR 0 3
22680: PUSH
22681: LD_INT 32
22683: EQUAL
22684: IFFALSE 22694
// sPower := true ;
22686: LD_ADDR_EXP 99
22690: PUSH
22691: LD_INT 1
22693: ST_TO_ADDR
// if p3 = 33 then
22694: LD_VAR 0 3
22698: PUSH
22699: LD_INT 33
22701: EQUAL
22702: IFFALSE 22712
// sRandom := true ;
22704: LD_ADDR_EXP 100
22708: PUSH
22709: LD_INT 1
22711: ST_TO_ADDR
// if p3 = 34 then
22712: LD_VAR 0 3
22716: PUSH
22717: LD_INT 34
22719: EQUAL
22720: IFFALSE 22730
// sShield := true ;
22722: LD_ADDR_EXP 101
22726: PUSH
22727: LD_INT 1
22729: ST_TO_ADDR
// if p3 = 35 then
22730: LD_VAR 0 3
22734: PUSH
22735: LD_INT 35
22737: EQUAL
22738: IFFALSE 22748
// sTime := true ;
22740: LD_ADDR_EXP 102
22744: PUSH
22745: LD_INT 1
22747: ST_TO_ADDR
// if p3 = 36 then
22748: LD_VAR 0 3
22752: PUSH
22753: LD_INT 36
22755: EQUAL
22756: IFFALSE 22766
// sTools := true ;
22758: LD_ADDR_EXP 103
22762: PUSH
22763: LD_INT 1
22765: ST_TO_ADDR
// if p3 = 101 then
22766: LD_VAR 0 3
22770: PUSH
22771: LD_INT 101
22773: EQUAL
22774: IFFALSE 22784
// sSold := true ;
22776: LD_ADDR_EXP 68
22780: PUSH
22781: LD_INT 1
22783: ST_TO_ADDR
// if p3 = 102 then
22784: LD_VAR 0 3
22788: PUSH
22789: LD_INT 102
22791: EQUAL
22792: IFFALSE 22802
// sDiff := true ;
22794: LD_ADDR_EXP 69
22798: PUSH
22799: LD_INT 1
22801: ST_TO_ADDR
// if p3 = 103 then
22802: LD_VAR 0 3
22806: PUSH
22807: LD_INT 103
22809: EQUAL
22810: IFFALSE 22820
// sFog := true ;
22812: LD_ADDR_EXP 72
22816: PUSH
22817: LD_INT 1
22819: ST_TO_ADDR
// if p3 = 104 then
22820: LD_VAR 0 3
22824: PUSH
22825: LD_INT 104
22827: EQUAL
22828: IFFALSE 22838
// sReset := true ;
22830: LD_ADDR_EXP 73
22834: PUSH
22835: LD_INT 1
22837: ST_TO_ADDR
// if p3 = 105 then
22838: LD_VAR 0 3
22842: PUSH
22843: LD_INT 105
22845: EQUAL
22846: IFFALSE 22856
// sSun := true ;
22848: LD_ADDR_EXP 74
22852: PUSH
22853: LD_INT 1
22855: ST_TO_ADDR
// if p3 = 106 then
22856: LD_VAR 0 3
22860: PUSH
22861: LD_INT 106
22863: EQUAL
22864: IFFALSE 22874
// sTiger := true ;
22866: LD_ADDR_EXP 70
22870: PUSH
22871: LD_INT 1
22873: ST_TO_ADDR
// if p3 = 107 then
22874: LD_VAR 0 3
22878: PUSH
22879: LD_INT 107
22881: EQUAL
22882: IFFALSE 22892
// sBomb := true ;
22884: LD_ADDR_EXP 71
22888: PUSH
22889: LD_INT 1
22891: ST_TO_ADDR
// if p3 = 108 then
22892: LD_VAR 0 3
22896: PUSH
22897: LD_INT 108
22899: EQUAL
22900: IFFALSE 22910
// sWound := true ;
22902: LD_ADDR_EXP 79
22906: PUSH
22907: LD_INT 1
22909: ST_TO_ADDR
// if p3 = 109 then
22910: LD_VAR 0 3
22914: PUSH
22915: LD_INT 109
22917: EQUAL
22918: IFFALSE 22928
// sBetray := true ;
22920: LD_ADDR_EXP 83
22924: PUSH
22925: LD_INT 1
22927: ST_TO_ADDR
// if p3 = 110 then
22928: LD_VAR 0 3
22932: PUSH
22933: LD_INT 110
22935: EQUAL
22936: IFFALSE 22946
// sContamin := true ;
22938: LD_ADDR_EXP 84
22942: PUSH
22943: LD_INT 1
22945: ST_TO_ADDR
// if p3 = 111 then
22946: LD_VAR 0 3
22950: PUSH
22951: LD_INT 111
22953: EQUAL
22954: IFFALSE 22964
// sOil := true ;
22956: LD_ADDR_EXP 86
22960: PUSH
22961: LD_INT 1
22963: ST_TO_ADDR
// if p3 = 112 then
22964: LD_VAR 0 3
22968: PUSH
22969: LD_INT 112
22971: EQUAL
22972: IFFALSE 22982
// sStu := true ;
22974: LD_ADDR_EXP 90
22978: PUSH
22979: LD_INT 1
22981: ST_TO_ADDR
// if p3 = 113 then
22982: LD_VAR 0 3
22986: PUSH
22987: LD_INT 113
22989: EQUAL
22990: IFFALSE 23000
// sBazooka := true ;
22992: LD_ADDR_EXP 93
22996: PUSH
22997: LD_INT 1
22999: ST_TO_ADDR
// if p3 = 114 then
23000: LD_VAR 0 3
23004: PUSH
23005: LD_INT 114
23007: EQUAL
23008: IFFALSE 23018
// sMortar := true ;
23010: LD_ADDR_EXP 94
23014: PUSH
23015: LD_INT 1
23017: ST_TO_ADDR
// if p3 = 115 then
23018: LD_VAR 0 3
23022: PUSH
23023: LD_INT 115
23025: EQUAL
23026: IFFALSE 23036
// sRanger := true ;
23028: LD_ADDR_EXP 104
23032: PUSH
23033: LD_INT 1
23035: ST_TO_ADDR
// if p3 = 116 then
23036: LD_VAR 0 3
23040: PUSH
23041: LD_INT 116
23043: EQUAL
23044: IFFALSE 23054
// sComputer := true ;
23046: LD_ADDR_EXP 105
23050: PUSH
23051: LD_INT 1
23053: ST_TO_ADDR
// if p3 = 117 then
23054: LD_VAR 0 3
23058: PUSH
23059: LD_INT 117
23061: EQUAL
23062: IFFALSE 23072
// s30 := true ;
23064: LD_ADDR_EXP 106
23068: PUSH
23069: LD_INT 1
23071: ST_TO_ADDR
// if p3 = 118 then
23072: LD_VAR 0 3
23076: PUSH
23077: LD_INT 118
23079: EQUAL
23080: IFFALSE 23090
// s60 := true ;
23082: LD_ADDR_EXP 107
23086: PUSH
23087: LD_INT 1
23089: ST_TO_ADDR
// end ; if p2 = hack_mode then
23090: LD_VAR 0 2
23094: PUSH
23095: LD_INT 101
23097: EQUAL
23098: IFFALSE 23226
// begin case p3 of 1 :
23100: LD_VAR 0 3
23104: PUSH
23105: LD_INT 1
23107: DOUBLE
23108: EQUAL
23109: IFTRUE 23113
23111: GO 23120
23113: POP
// hHackUnlimitedResources ; 2 :
23114: CALL 35373 0 0
23118: GO 23226
23120: LD_INT 2
23122: DOUBLE
23123: EQUAL
23124: IFTRUE 23128
23126: GO 23135
23128: POP
// hHackSetLevel10 ; 3 :
23129: CALL 35506 0 0
23133: GO 23226
23135: LD_INT 3
23137: DOUBLE
23138: EQUAL
23139: IFTRUE 23143
23141: GO 23150
23143: POP
// hHackSetLevel10YourUnits ; 4 :
23144: CALL 35591 0 0
23148: GO 23226
23150: LD_INT 4
23152: DOUBLE
23153: EQUAL
23154: IFTRUE 23158
23156: GO 23165
23158: POP
// hHackInvincible ; 5 :
23159: CALL 36039 0 0
23163: GO 23226
23165: LD_INT 5
23167: DOUBLE
23168: EQUAL
23169: IFTRUE 23173
23171: GO 23180
23173: POP
// hHackInvisible ; 6 :
23174: CALL 36150 0 0
23178: GO 23226
23180: LD_INT 6
23182: DOUBLE
23183: EQUAL
23184: IFTRUE 23188
23186: GO 23195
23188: POP
// hHackChangeYourSide ; 7 :
23189: CALL 36207 0 0
23193: GO 23226
23195: LD_INT 7
23197: DOUBLE
23198: EQUAL
23199: IFTRUE 23203
23201: GO 23210
23203: POP
// hHackChangeUnitSide ; 8 :
23204: CALL 36249 0 0
23208: GO 23226
23210: LD_INT 8
23212: DOUBLE
23213: EQUAL
23214: IFTRUE 23218
23216: GO 23225
23218: POP
// hHackFog ; end ;
23219: CALL 36350 0 0
23223: GO 23226
23225: POP
// end ; if p2 = game_save_mode then
23226: LD_VAR 0 2
23230: PUSH
23231: LD_INT 102
23233: EQUAL
23234: IFFALSE 23289
// begin if p3 = 1 then
23236: LD_VAR 0 3
23240: PUSH
23241: LD_INT 1
23243: EQUAL
23244: IFFALSE 23256
// globalGameSaveCounter := p4 ;
23246: LD_ADDR_EXP 50
23250: PUSH
23251: LD_VAR 0 4
23255: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
23256: LD_VAR 0 3
23260: PUSH
23261: LD_INT 2
23263: EQUAL
23264: PUSH
23265: LD_EXP 50
23269: AND
23270: IFFALSE 23289
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
23272: LD_STRING setGameSaveCounter(
23274: PUSH
23275: LD_EXP 50
23279: STR
23280: PUSH
23281: LD_STRING )
23283: STR
23284: PPUSH
23285: CALL_OW 559
// end ; end ;
23289: LD_VAR 0 7
23293: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
23294: LD_INT 0
23296: PPUSH
// streamModeActive := false ;
23297: LD_ADDR_EXP 51
23301: PUSH
23302: LD_INT 0
23304: ST_TO_ADDR
// normalCounter := 36 ;
23305: LD_ADDR_EXP 52
23309: PUSH
23310: LD_INT 36
23312: ST_TO_ADDR
// hardcoreCounter := 18 ;
23313: LD_ADDR_EXP 53
23317: PUSH
23318: LD_INT 18
23320: ST_TO_ADDR
// sRocket := false ;
23321: LD_ADDR_EXP 56
23325: PUSH
23326: LD_INT 0
23328: ST_TO_ADDR
// sSpeed := false ;
23329: LD_ADDR_EXP 55
23333: PUSH
23334: LD_INT 0
23336: ST_TO_ADDR
// sEngine := false ;
23337: LD_ADDR_EXP 57
23341: PUSH
23342: LD_INT 0
23344: ST_TO_ADDR
// sSpec := false ;
23345: LD_ADDR_EXP 54
23349: PUSH
23350: LD_INT 0
23352: ST_TO_ADDR
// sLevel := false ;
23353: LD_ADDR_EXP 58
23357: PUSH
23358: LD_INT 0
23360: ST_TO_ADDR
// sArmoury := false ;
23361: LD_ADDR_EXP 59
23365: PUSH
23366: LD_INT 0
23368: ST_TO_ADDR
// sRadar := false ;
23369: LD_ADDR_EXP 60
23373: PUSH
23374: LD_INT 0
23376: ST_TO_ADDR
// sBunker := false ;
23377: LD_ADDR_EXP 61
23381: PUSH
23382: LD_INT 0
23384: ST_TO_ADDR
// sHack := false ;
23385: LD_ADDR_EXP 62
23389: PUSH
23390: LD_INT 0
23392: ST_TO_ADDR
// sFire := false ;
23393: LD_ADDR_EXP 63
23397: PUSH
23398: LD_INT 0
23400: ST_TO_ADDR
// sRefresh := false ;
23401: LD_ADDR_EXP 64
23405: PUSH
23406: LD_INT 0
23408: ST_TO_ADDR
// sExp := false ;
23409: LD_ADDR_EXP 65
23413: PUSH
23414: LD_INT 0
23416: ST_TO_ADDR
// sDepot := false ;
23417: LD_ADDR_EXP 66
23421: PUSH
23422: LD_INT 0
23424: ST_TO_ADDR
// sFlag := false ;
23425: LD_ADDR_EXP 67
23429: PUSH
23430: LD_INT 0
23432: ST_TO_ADDR
// sKamikadze := false ;
23433: LD_ADDR_EXP 75
23437: PUSH
23438: LD_INT 0
23440: ST_TO_ADDR
// sTroll := false ;
23441: LD_ADDR_EXP 76
23445: PUSH
23446: LD_INT 0
23448: ST_TO_ADDR
// sSlow := false ;
23449: LD_ADDR_EXP 77
23453: PUSH
23454: LD_INT 0
23456: ST_TO_ADDR
// sLack := false ;
23457: LD_ADDR_EXP 78
23461: PUSH
23462: LD_INT 0
23464: ST_TO_ADDR
// sTank := false ;
23465: LD_ADDR_EXP 80
23469: PUSH
23470: LD_INT 0
23472: ST_TO_ADDR
// sRemote := false ;
23473: LD_ADDR_EXP 81
23477: PUSH
23478: LD_INT 0
23480: ST_TO_ADDR
// sPowell := false ;
23481: LD_ADDR_EXP 82
23485: PUSH
23486: LD_INT 0
23488: ST_TO_ADDR
// sTeleport := false ;
23489: LD_ADDR_EXP 85
23493: PUSH
23494: LD_INT 0
23496: ST_TO_ADDR
// sOilTower := false ;
23497: LD_ADDR_EXP 87
23501: PUSH
23502: LD_INT 0
23504: ST_TO_ADDR
// sShovel := false ;
23505: LD_ADDR_EXP 88
23509: PUSH
23510: LD_INT 0
23512: ST_TO_ADDR
// sSheik := false ;
23513: LD_ADDR_EXP 89
23517: PUSH
23518: LD_INT 0
23520: ST_TO_ADDR
// sEarthquake := false ;
23521: LD_ADDR_EXP 91
23525: PUSH
23526: LD_INT 0
23528: ST_TO_ADDR
// sAI := false ;
23529: LD_ADDR_EXP 92
23533: PUSH
23534: LD_INT 0
23536: ST_TO_ADDR
// sCargo := false ;
23537: LD_ADDR_EXP 95
23541: PUSH
23542: LD_INT 0
23544: ST_TO_ADDR
// sDLaser := false ;
23545: LD_ADDR_EXP 96
23549: PUSH
23550: LD_INT 0
23552: ST_TO_ADDR
// sExchange := false ;
23553: LD_ADDR_EXP 97
23557: PUSH
23558: LD_INT 0
23560: ST_TO_ADDR
// sFac := false ;
23561: LD_ADDR_EXP 98
23565: PUSH
23566: LD_INT 0
23568: ST_TO_ADDR
// sPower := false ;
23569: LD_ADDR_EXP 99
23573: PUSH
23574: LD_INT 0
23576: ST_TO_ADDR
// sRandom := false ;
23577: LD_ADDR_EXP 100
23581: PUSH
23582: LD_INT 0
23584: ST_TO_ADDR
// sShield := false ;
23585: LD_ADDR_EXP 101
23589: PUSH
23590: LD_INT 0
23592: ST_TO_ADDR
// sTime := false ;
23593: LD_ADDR_EXP 102
23597: PUSH
23598: LD_INT 0
23600: ST_TO_ADDR
// sTools := false ;
23601: LD_ADDR_EXP 103
23605: PUSH
23606: LD_INT 0
23608: ST_TO_ADDR
// sSold := false ;
23609: LD_ADDR_EXP 68
23613: PUSH
23614: LD_INT 0
23616: ST_TO_ADDR
// sDiff := false ;
23617: LD_ADDR_EXP 69
23621: PUSH
23622: LD_INT 0
23624: ST_TO_ADDR
// sFog := false ;
23625: LD_ADDR_EXP 72
23629: PUSH
23630: LD_INT 0
23632: ST_TO_ADDR
// sReset := false ;
23633: LD_ADDR_EXP 73
23637: PUSH
23638: LD_INT 0
23640: ST_TO_ADDR
// sSun := false ;
23641: LD_ADDR_EXP 74
23645: PUSH
23646: LD_INT 0
23648: ST_TO_ADDR
// sTiger := false ;
23649: LD_ADDR_EXP 70
23653: PUSH
23654: LD_INT 0
23656: ST_TO_ADDR
// sBomb := false ;
23657: LD_ADDR_EXP 71
23661: PUSH
23662: LD_INT 0
23664: ST_TO_ADDR
// sWound := false ;
23665: LD_ADDR_EXP 79
23669: PUSH
23670: LD_INT 0
23672: ST_TO_ADDR
// sBetray := false ;
23673: LD_ADDR_EXP 83
23677: PUSH
23678: LD_INT 0
23680: ST_TO_ADDR
// sContamin := false ;
23681: LD_ADDR_EXP 84
23685: PUSH
23686: LD_INT 0
23688: ST_TO_ADDR
// sOil := false ;
23689: LD_ADDR_EXP 86
23693: PUSH
23694: LD_INT 0
23696: ST_TO_ADDR
// sStu := false ;
23697: LD_ADDR_EXP 90
23701: PUSH
23702: LD_INT 0
23704: ST_TO_ADDR
// sBazooka := false ;
23705: LD_ADDR_EXP 93
23709: PUSH
23710: LD_INT 0
23712: ST_TO_ADDR
// sMortar := false ;
23713: LD_ADDR_EXP 94
23717: PUSH
23718: LD_INT 0
23720: ST_TO_ADDR
// sRanger := false ;
23721: LD_ADDR_EXP 104
23725: PUSH
23726: LD_INT 0
23728: ST_TO_ADDR
// sComputer := false ;
23729: LD_ADDR_EXP 105
23733: PUSH
23734: LD_INT 0
23736: ST_TO_ADDR
// s30 := false ;
23737: LD_ADDR_EXP 106
23741: PUSH
23742: LD_INT 0
23744: ST_TO_ADDR
// s60 := false ;
23745: LD_ADDR_EXP 107
23749: PUSH
23750: LD_INT 0
23752: ST_TO_ADDR
// end ;
23753: LD_VAR 0 1
23757: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23758: LD_INT 0
23760: PPUSH
23761: PPUSH
23762: PPUSH
23763: PPUSH
23764: PPUSH
23765: PPUSH
23766: PPUSH
// result := [ ] ;
23767: LD_ADDR_VAR 0 2
23771: PUSH
23772: EMPTY
23773: ST_TO_ADDR
// if campaign_id = 1 then
23774: LD_OWVAR 69
23778: PUSH
23779: LD_INT 1
23781: EQUAL
23782: IFFALSE 26948
// begin case mission_number of 1 :
23784: LD_OWVAR 70
23788: PUSH
23789: LD_INT 1
23791: DOUBLE
23792: EQUAL
23793: IFTRUE 23797
23795: GO 23873
23797: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23798: LD_ADDR_VAR 0 2
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: LD_INT 4
23808: PUSH
23809: LD_INT 11
23811: PUSH
23812: LD_INT 12
23814: PUSH
23815: LD_INT 15
23817: PUSH
23818: LD_INT 16
23820: PUSH
23821: LD_INT 22
23823: PUSH
23824: LD_INT 23
23826: PUSH
23827: LD_INT 26
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 101
23843: PUSH
23844: LD_INT 102
23846: PUSH
23847: LD_INT 106
23849: PUSH
23850: LD_INT 116
23852: PUSH
23853: LD_INT 117
23855: PUSH
23856: LD_INT 118
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: ST_TO_ADDR
23871: GO 26946
23873: LD_INT 2
23875: DOUBLE
23876: EQUAL
23877: IFTRUE 23881
23879: GO 23965
23881: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23882: LD_ADDR_VAR 0 2
23886: PUSH
23887: LD_INT 2
23889: PUSH
23890: LD_INT 4
23892: PUSH
23893: LD_INT 11
23895: PUSH
23896: LD_INT 12
23898: PUSH
23899: LD_INT 15
23901: PUSH
23902: LD_INT 16
23904: PUSH
23905: LD_INT 22
23907: PUSH
23908: LD_INT 23
23910: PUSH
23911: LD_INT 26
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 101
23927: PUSH
23928: LD_INT 102
23930: PUSH
23931: LD_INT 105
23933: PUSH
23934: LD_INT 106
23936: PUSH
23937: LD_INT 108
23939: PUSH
23940: LD_INT 116
23942: PUSH
23943: LD_INT 117
23945: PUSH
23946: LD_INT 118
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: ST_TO_ADDR
23963: GO 26946
23965: LD_INT 3
23967: DOUBLE
23968: EQUAL
23969: IFTRUE 23973
23971: GO 24061
23973: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23974: LD_ADDR_VAR 0 2
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: LD_INT 4
23984: PUSH
23985: LD_INT 5
23987: PUSH
23988: LD_INT 11
23990: PUSH
23991: LD_INT 12
23993: PUSH
23994: LD_INT 15
23996: PUSH
23997: LD_INT 16
23999: PUSH
24000: LD_INT 22
24002: PUSH
24003: LD_INT 26
24005: PUSH
24006: LD_INT 36
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 101
24023: PUSH
24024: LD_INT 102
24026: PUSH
24027: LD_INT 105
24029: PUSH
24030: LD_INT 106
24032: PUSH
24033: LD_INT 108
24035: PUSH
24036: LD_INT 116
24038: PUSH
24039: LD_INT 117
24041: PUSH
24042: LD_INT 118
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: ST_TO_ADDR
24059: GO 26946
24061: LD_INT 4
24063: DOUBLE
24064: EQUAL
24065: IFTRUE 24069
24067: GO 24165
24069: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
24070: LD_ADDR_VAR 0 2
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: LD_INT 4
24080: PUSH
24081: LD_INT 5
24083: PUSH
24084: LD_INT 8
24086: PUSH
24087: LD_INT 11
24089: PUSH
24090: LD_INT 12
24092: PUSH
24093: LD_INT 15
24095: PUSH
24096: LD_INT 16
24098: PUSH
24099: LD_INT 22
24101: PUSH
24102: LD_INT 23
24104: PUSH
24105: LD_INT 26
24107: PUSH
24108: LD_INT 36
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 101
24127: PUSH
24128: LD_INT 102
24130: PUSH
24131: LD_INT 105
24133: PUSH
24134: LD_INT 106
24136: PUSH
24137: LD_INT 108
24139: PUSH
24140: LD_INT 116
24142: PUSH
24143: LD_INT 117
24145: PUSH
24146: LD_INT 118
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: ST_TO_ADDR
24163: GO 26946
24165: LD_INT 5
24167: DOUBLE
24168: EQUAL
24169: IFTRUE 24173
24171: GO 24285
24173: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
24174: LD_ADDR_VAR 0 2
24178: PUSH
24179: LD_INT 2
24181: PUSH
24182: LD_INT 4
24184: PUSH
24185: LD_INT 5
24187: PUSH
24188: LD_INT 6
24190: PUSH
24191: LD_INT 8
24193: PUSH
24194: LD_INT 11
24196: PUSH
24197: LD_INT 12
24199: PUSH
24200: LD_INT 15
24202: PUSH
24203: LD_INT 16
24205: PUSH
24206: LD_INT 22
24208: PUSH
24209: LD_INT 23
24211: PUSH
24212: LD_INT 25
24214: PUSH
24215: LD_INT 26
24217: PUSH
24218: LD_INT 36
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 101
24239: PUSH
24240: LD_INT 102
24242: PUSH
24243: LD_INT 105
24245: PUSH
24246: LD_INT 106
24248: PUSH
24249: LD_INT 108
24251: PUSH
24252: LD_INT 109
24254: PUSH
24255: LD_INT 112
24257: PUSH
24258: LD_INT 116
24260: PUSH
24261: LD_INT 117
24263: PUSH
24264: LD_INT 118
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: ST_TO_ADDR
24283: GO 26946
24285: LD_INT 6
24287: DOUBLE
24288: EQUAL
24289: IFTRUE 24293
24291: GO 24425
24293: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
24294: LD_ADDR_VAR 0 2
24298: PUSH
24299: LD_INT 2
24301: PUSH
24302: LD_INT 4
24304: PUSH
24305: LD_INT 5
24307: PUSH
24308: LD_INT 6
24310: PUSH
24311: LD_INT 8
24313: PUSH
24314: LD_INT 11
24316: PUSH
24317: LD_INT 12
24319: PUSH
24320: LD_INT 15
24322: PUSH
24323: LD_INT 16
24325: PUSH
24326: LD_INT 20
24328: PUSH
24329: LD_INT 21
24331: PUSH
24332: LD_INT 22
24334: PUSH
24335: LD_INT 23
24337: PUSH
24338: LD_INT 25
24340: PUSH
24341: LD_INT 26
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 31
24349: PUSH
24350: LD_INT 32
24352: PUSH
24353: LD_INT 36
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 101
24379: PUSH
24380: LD_INT 102
24382: PUSH
24383: LD_INT 105
24385: PUSH
24386: LD_INT 106
24388: PUSH
24389: LD_INT 108
24391: PUSH
24392: LD_INT 109
24394: PUSH
24395: LD_INT 112
24397: PUSH
24398: LD_INT 116
24400: PUSH
24401: LD_INT 117
24403: PUSH
24404: LD_INT 118
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: ST_TO_ADDR
24423: GO 26946
24425: LD_INT 7
24427: DOUBLE
24428: EQUAL
24429: IFTRUE 24433
24431: GO 24545
24433: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24434: LD_ADDR_VAR 0 2
24438: PUSH
24439: LD_INT 2
24441: PUSH
24442: LD_INT 4
24444: PUSH
24445: LD_INT 5
24447: PUSH
24448: LD_INT 7
24450: PUSH
24451: LD_INT 11
24453: PUSH
24454: LD_INT 12
24456: PUSH
24457: LD_INT 15
24459: PUSH
24460: LD_INT 16
24462: PUSH
24463: LD_INT 20
24465: PUSH
24466: LD_INT 21
24468: PUSH
24469: LD_INT 22
24471: PUSH
24472: LD_INT 23
24474: PUSH
24475: LD_INT 25
24477: PUSH
24478: LD_INT 26
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 101
24499: PUSH
24500: LD_INT 102
24502: PUSH
24503: LD_INT 103
24505: PUSH
24506: LD_INT 105
24508: PUSH
24509: LD_INT 106
24511: PUSH
24512: LD_INT 108
24514: PUSH
24515: LD_INT 112
24517: PUSH
24518: LD_INT 116
24520: PUSH
24521: LD_INT 117
24523: PUSH
24524: LD_INT 118
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: ST_TO_ADDR
24543: GO 26946
24545: LD_INT 8
24547: DOUBLE
24548: EQUAL
24549: IFTRUE 24553
24551: GO 24693
24553: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24554: LD_ADDR_VAR 0 2
24558: PUSH
24559: LD_INT 2
24561: PUSH
24562: LD_INT 4
24564: PUSH
24565: LD_INT 5
24567: PUSH
24568: LD_INT 6
24570: PUSH
24571: LD_INT 7
24573: PUSH
24574: LD_INT 8
24576: PUSH
24577: LD_INT 11
24579: PUSH
24580: LD_INT 12
24582: PUSH
24583: LD_INT 15
24585: PUSH
24586: LD_INT 16
24588: PUSH
24589: LD_INT 20
24591: PUSH
24592: LD_INT 21
24594: PUSH
24595: LD_INT 22
24597: PUSH
24598: LD_INT 23
24600: PUSH
24601: LD_INT 25
24603: PUSH
24604: LD_INT 26
24606: PUSH
24607: LD_INT 30
24609: PUSH
24610: LD_INT 31
24612: PUSH
24613: LD_INT 32
24615: PUSH
24616: LD_INT 36
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 101
24643: PUSH
24644: LD_INT 102
24646: PUSH
24647: LD_INT 103
24649: PUSH
24650: LD_INT 105
24652: PUSH
24653: LD_INT 106
24655: PUSH
24656: LD_INT 108
24658: PUSH
24659: LD_INT 109
24661: PUSH
24662: LD_INT 112
24664: PUSH
24665: LD_INT 116
24667: PUSH
24668: LD_INT 117
24670: PUSH
24671: LD_INT 118
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: ST_TO_ADDR
24691: GO 26946
24693: LD_INT 9
24695: DOUBLE
24696: EQUAL
24697: IFTRUE 24701
24699: GO 24849
24701: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24702: LD_ADDR_VAR 0 2
24706: PUSH
24707: LD_INT 2
24709: PUSH
24710: LD_INT 4
24712: PUSH
24713: LD_INT 5
24715: PUSH
24716: LD_INT 6
24718: PUSH
24719: LD_INT 7
24721: PUSH
24722: LD_INT 8
24724: PUSH
24725: LD_INT 11
24727: PUSH
24728: LD_INT 12
24730: PUSH
24731: LD_INT 15
24733: PUSH
24734: LD_INT 16
24736: PUSH
24737: LD_INT 20
24739: PUSH
24740: LD_INT 21
24742: PUSH
24743: LD_INT 22
24745: PUSH
24746: LD_INT 23
24748: PUSH
24749: LD_INT 25
24751: PUSH
24752: LD_INT 26
24754: PUSH
24755: LD_INT 28
24757: PUSH
24758: LD_INT 30
24760: PUSH
24761: LD_INT 31
24763: PUSH
24764: LD_INT 32
24766: PUSH
24767: LD_INT 36
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 101
24795: PUSH
24796: LD_INT 102
24798: PUSH
24799: LD_INT 103
24801: PUSH
24802: LD_INT 105
24804: PUSH
24805: LD_INT 106
24807: PUSH
24808: LD_INT 108
24810: PUSH
24811: LD_INT 109
24813: PUSH
24814: LD_INT 112
24816: PUSH
24817: LD_INT 114
24819: PUSH
24820: LD_INT 116
24822: PUSH
24823: LD_INT 117
24825: PUSH
24826: LD_INT 118
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: ST_TO_ADDR
24847: GO 26946
24849: LD_INT 10
24851: DOUBLE
24852: EQUAL
24853: IFTRUE 24857
24855: GO 25053
24857: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24858: LD_ADDR_VAR 0 2
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: LD_INT 4
24868: PUSH
24869: LD_INT 5
24871: PUSH
24872: LD_INT 6
24874: PUSH
24875: LD_INT 7
24877: PUSH
24878: LD_INT 8
24880: PUSH
24881: LD_INT 9
24883: PUSH
24884: LD_INT 10
24886: PUSH
24887: LD_INT 11
24889: PUSH
24890: LD_INT 12
24892: PUSH
24893: LD_INT 13
24895: PUSH
24896: LD_INT 14
24898: PUSH
24899: LD_INT 15
24901: PUSH
24902: LD_INT 16
24904: PUSH
24905: LD_INT 17
24907: PUSH
24908: LD_INT 18
24910: PUSH
24911: LD_INT 19
24913: PUSH
24914: LD_INT 20
24916: PUSH
24917: LD_INT 21
24919: PUSH
24920: LD_INT 22
24922: PUSH
24923: LD_INT 23
24925: PUSH
24926: LD_INT 24
24928: PUSH
24929: LD_INT 25
24931: PUSH
24932: LD_INT 26
24934: PUSH
24935: LD_INT 28
24937: PUSH
24938: LD_INT 30
24940: PUSH
24941: LD_INT 31
24943: PUSH
24944: LD_INT 32
24946: PUSH
24947: LD_INT 36
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 101
24983: PUSH
24984: LD_INT 102
24986: PUSH
24987: LD_INT 103
24989: PUSH
24990: LD_INT 104
24992: PUSH
24993: LD_INT 105
24995: PUSH
24996: LD_INT 106
24998: PUSH
24999: LD_INT 107
25001: PUSH
25002: LD_INT 108
25004: PUSH
25005: LD_INT 109
25007: PUSH
25008: LD_INT 110
25010: PUSH
25011: LD_INT 111
25013: PUSH
25014: LD_INT 112
25016: PUSH
25017: LD_INT 114
25019: PUSH
25020: LD_INT 116
25022: PUSH
25023: LD_INT 117
25025: PUSH
25026: LD_INT 118
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: ST_TO_ADDR
25051: GO 26946
25053: LD_INT 11
25055: DOUBLE
25056: EQUAL
25057: IFTRUE 25061
25059: GO 25265
25061: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
25062: LD_ADDR_VAR 0 2
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: LD_INT 3
25072: PUSH
25073: LD_INT 4
25075: PUSH
25076: LD_INT 5
25078: PUSH
25079: LD_INT 6
25081: PUSH
25082: LD_INT 7
25084: PUSH
25085: LD_INT 8
25087: PUSH
25088: LD_INT 9
25090: PUSH
25091: LD_INT 10
25093: PUSH
25094: LD_INT 11
25096: PUSH
25097: LD_INT 12
25099: PUSH
25100: LD_INT 13
25102: PUSH
25103: LD_INT 14
25105: PUSH
25106: LD_INT 15
25108: PUSH
25109: LD_INT 16
25111: PUSH
25112: LD_INT 17
25114: PUSH
25115: LD_INT 18
25117: PUSH
25118: LD_INT 19
25120: PUSH
25121: LD_INT 20
25123: PUSH
25124: LD_INT 21
25126: PUSH
25127: LD_INT 22
25129: PUSH
25130: LD_INT 23
25132: PUSH
25133: LD_INT 24
25135: PUSH
25136: LD_INT 25
25138: PUSH
25139: LD_INT 26
25141: PUSH
25142: LD_INT 28
25144: PUSH
25145: LD_INT 30
25147: PUSH
25148: LD_INT 31
25150: PUSH
25151: LD_INT 32
25153: PUSH
25154: LD_INT 34
25156: PUSH
25157: LD_INT 36
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 101
25195: PUSH
25196: LD_INT 102
25198: PUSH
25199: LD_INT 103
25201: PUSH
25202: LD_INT 104
25204: PUSH
25205: LD_INT 105
25207: PUSH
25208: LD_INT 106
25210: PUSH
25211: LD_INT 107
25213: PUSH
25214: LD_INT 108
25216: PUSH
25217: LD_INT 109
25219: PUSH
25220: LD_INT 110
25222: PUSH
25223: LD_INT 111
25225: PUSH
25226: LD_INT 112
25228: PUSH
25229: LD_INT 114
25231: PUSH
25232: LD_INT 116
25234: PUSH
25235: LD_INT 117
25237: PUSH
25238: LD_INT 118
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: ST_TO_ADDR
25263: GO 26946
25265: LD_INT 12
25267: DOUBLE
25268: EQUAL
25269: IFTRUE 25273
25271: GO 25493
25273: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
25274: LD_ADDR_VAR 0 2
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: LD_INT 2
25284: PUSH
25285: LD_INT 3
25287: PUSH
25288: LD_INT 4
25290: PUSH
25291: LD_INT 5
25293: PUSH
25294: LD_INT 6
25296: PUSH
25297: LD_INT 7
25299: PUSH
25300: LD_INT 8
25302: PUSH
25303: LD_INT 9
25305: PUSH
25306: LD_INT 10
25308: PUSH
25309: LD_INT 11
25311: PUSH
25312: LD_INT 12
25314: PUSH
25315: LD_INT 13
25317: PUSH
25318: LD_INT 14
25320: PUSH
25321: LD_INT 15
25323: PUSH
25324: LD_INT 16
25326: PUSH
25327: LD_INT 17
25329: PUSH
25330: LD_INT 18
25332: PUSH
25333: LD_INT 19
25335: PUSH
25336: LD_INT 20
25338: PUSH
25339: LD_INT 21
25341: PUSH
25342: LD_INT 22
25344: PUSH
25345: LD_INT 23
25347: PUSH
25348: LD_INT 24
25350: PUSH
25351: LD_INT 25
25353: PUSH
25354: LD_INT 26
25356: PUSH
25357: LD_INT 27
25359: PUSH
25360: LD_INT 28
25362: PUSH
25363: LD_INT 30
25365: PUSH
25366: LD_INT 31
25368: PUSH
25369: LD_INT 32
25371: PUSH
25372: LD_INT 33
25374: PUSH
25375: LD_INT 34
25377: PUSH
25378: LD_INT 36
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 101
25419: PUSH
25420: LD_INT 102
25422: PUSH
25423: LD_INT 103
25425: PUSH
25426: LD_INT 104
25428: PUSH
25429: LD_INT 105
25431: PUSH
25432: LD_INT 106
25434: PUSH
25435: LD_INT 107
25437: PUSH
25438: LD_INT 108
25440: PUSH
25441: LD_INT 109
25443: PUSH
25444: LD_INT 110
25446: PUSH
25447: LD_INT 111
25449: PUSH
25450: LD_INT 112
25452: PUSH
25453: LD_INT 113
25455: PUSH
25456: LD_INT 114
25458: PUSH
25459: LD_INT 116
25461: PUSH
25462: LD_INT 117
25464: PUSH
25465: LD_INT 118
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: ST_TO_ADDR
25491: GO 26946
25493: LD_INT 13
25495: DOUBLE
25496: EQUAL
25497: IFTRUE 25501
25499: GO 25709
25501: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25502: LD_ADDR_VAR 0 2
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: LD_INT 2
25512: PUSH
25513: LD_INT 3
25515: PUSH
25516: LD_INT 4
25518: PUSH
25519: LD_INT 5
25521: PUSH
25522: LD_INT 8
25524: PUSH
25525: LD_INT 9
25527: PUSH
25528: LD_INT 10
25530: PUSH
25531: LD_INT 11
25533: PUSH
25534: LD_INT 12
25536: PUSH
25537: LD_INT 14
25539: PUSH
25540: LD_INT 15
25542: PUSH
25543: LD_INT 16
25545: PUSH
25546: LD_INT 17
25548: PUSH
25549: LD_INT 18
25551: PUSH
25552: LD_INT 19
25554: PUSH
25555: LD_INT 20
25557: PUSH
25558: LD_INT 21
25560: PUSH
25561: LD_INT 22
25563: PUSH
25564: LD_INT 23
25566: PUSH
25567: LD_INT 24
25569: PUSH
25570: LD_INT 25
25572: PUSH
25573: LD_INT 26
25575: PUSH
25576: LD_INT 27
25578: PUSH
25579: LD_INT 28
25581: PUSH
25582: LD_INT 30
25584: PUSH
25585: LD_INT 31
25587: PUSH
25588: LD_INT 32
25590: PUSH
25591: LD_INT 33
25593: PUSH
25594: LD_INT 34
25596: PUSH
25597: LD_INT 36
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 101
25635: PUSH
25636: LD_INT 102
25638: PUSH
25639: LD_INT 103
25641: PUSH
25642: LD_INT 104
25644: PUSH
25645: LD_INT 105
25647: PUSH
25648: LD_INT 106
25650: PUSH
25651: LD_INT 107
25653: PUSH
25654: LD_INT 108
25656: PUSH
25657: LD_INT 109
25659: PUSH
25660: LD_INT 110
25662: PUSH
25663: LD_INT 111
25665: PUSH
25666: LD_INT 112
25668: PUSH
25669: LD_INT 113
25671: PUSH
25672: LD_INT 114
25674: PUSH
25675: LD_INT 116
25677: PUSH
25678: LD_INT 117
25680: PUSH
25681: LD_INT 118
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: ST_TO_ADDR
25707: GO 26946
25709: LD_INT 14
25711: DOUBLE
25712: EQUAL
25713: IFTRUE 25717
25715: GO 25941
25717: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25718: LD_ADDR_VAR 0 2
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: LD_INT 2
25728: PUSH
25729: LD_INT 3
25731: PUSH
25732: LD_INT 4
25734: PUSH
25735: LD_INT 5
25737: PUSH
25738: LD_INT 6
25740: PUSH
25741: LD_INT 7
25743: PUSH
25744: LD_INT 8
25746: PUSH
25747: LD_INT 9
25749: PUSH
25750: LD_INT 10
25752: PUSH
25753: LD_INT 11
25755: PUSH
25756: LD_INT 12
25758: PUSH
25759: LD_INT 13
25761: PUSH
25762: LD_INT 14
25764: PUSH
25765: LD_INT 15
25767: PUSH
25768: LD_INT 16
25770: PUSH
25771: LD_INT 17
25773: PUSH
25774: LD_INT 18
25776: PUSH
25777: LD_INT 19
25779: PUSH
25780: LD_INT 20
25782: PUSH
25783: LD_INT 21
25785: PUSH
25786: LD_INT 22
25788: PUSH
25789: LD_INT 23
25791: PUSH
25792: LD_INT 24
25794: PUSH
25795: LD_INT 25
25797: PUSH
25798: LD_INT 26
25800: PUSH
25801: LD_INT 27
25803: PUSH
25804: LD_INT 28
25806: PUSH
25807: LD_INT 29
25809: PUSH
25810: LD_INT 30
25812: PUSH
25813: LD_INT 31
25815: PUSH
25816: LD_INT 32
25818: PUSH
25819: LD_INT 33
25821: PUSH
25822: LD_INT 34
25824: PUSH
25825: LD_INT 36
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 101
25867: PUSH
25868: LD_INT 102
25870: PUSH
25871: LD_INT 103
25873: PUSH
25874: LD_INT 104
25876: PUSH
25877: LD_INT 105
25879: PUSH
25880: LD_INT 106
25882: PUSH
25883: LD_INT 107
25885: PUSH
25886: LD_INT 108
25888: PUSH
25889: LD_INT 109
25891: PUSH
25892: LD_INT 110
25894: PUSH
25895: LD_INT 111
25897: PUSH
25898: LD_INT 112
25900: PUSH
25901: LD_INT 113
25903: PUSH
25904: LD_INT 114
25906: PUSH
25907: LD_INT 116
25909: PUSH
25910: LD_INT 117
25912: PUSH
25913: LD_INT 118
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: ST_TO_ADDR
25939: GO 26946
25941: LD_INT 15
25943: DOUBLE
25944: EQUAL
25945: IFTRUE 25949
25947: GO 26173
25949: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25950: LD_ADDR_VAR 0 2
25954: PUSH
25955: LD_INT 1
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: LD_INT 3
25963: PUSH
25964: LD_INT 4
25966: PUSH
25967: LD_INT 5
25969: PUSH
25970: LD_INT 6
25972: PUSH
25973: LD_INT 7
25975: PUSH
25976: LD_INT 8
25978: PUSH
25979: LD_INT 9
25981: PUSH
25982: LD_INT 10
25984: PUSH
25985: LD_INT 11
25987: PUSH
25988: LD_INT 12
25990: PUSH
25991: LD_INT 13
25993: PUSH
25994: LD_INT 14
25996: PUSH
25997: LD_INT 15
25999: PUSH
26000: LD_INT 16
26002: PUSH
26003: LD_INT 17
26005: PUSH
26006: LD_INT 18
26008: PUSH
26009: LD_INT 19
26011: PUSH
26012: LD_INT 20
26014: PUSH
26015: LD_INT 21
26017: PUSH
26018: LD_INT 22
26020: PUSH
26021: LD_INT 23
26023: PUSH
26024: LD_INT 24
26026: PUSH
26027: LD_INT 25
26029: PUSH
26030: LD_INT 26
26032: PUSH
26033: LD_INT 27
26035: PUSH
26036: LD_INT 28
26038: PUSH
26039: LD_INT 29
26041: PUSH
26042: LD_INT 30
26044: PUSH
26045: LD_INT 31
26047: PUSH
26048: LD_INT 32
26050: PUSH
26051: LD_INT 33
26053: PUSH
26054: LD_INT 34
26056: PUSH
26057: LD_INT 36
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 101
26099: PUSH
26100: LD_INT 102
26102: PUSH
26103: LD_INT 103
26105: PUSH
26106: LD_INT 104
26108: PUSH
26109: LD_INT 105
26111: PUSH
26112: LD_INT 106
26114: PUSH
26115: LD_INT 107
26117: PUSH
26118: LD_INT 108
26120: PUSH
26121: LD_INT 109
26123: PUSH
26124: LD_INT 110
26126: PUSH
26127: LD_INT 111
26129: PUSH
26130: LD_INT 112
26132: PUSH
26133: LD_INT 113
26135: PUSH
26136: LD_INT 114
26138: PUSH
26139: LD_INT 116
26141: PUSH
26142: LD_INT 117
26144: PUSH
26145: LD_INT 118
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: ST_TO_ADDR
26171: GO 26946
26173: LD_INT 16
26175: DOUBLE
26176: EQUAL
26177: IFTRUE 26181
26179: GO 26317
26181: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
26182: LD_ADDR_VAR 0 2
26186: PUSH
26187: LD_INT 2
26189: PUSH
26190: LD_INT 4
26192: PUSH
26193: LD_INT 5
26195: PUSH
26196: LD_INT 7
26198: PUSH
26199: LD_INT 11
26201: PUSH
26202: LD_INT 12
26204: PUSH
26205: LD_INT 15
26207: PUSH
26208: LD_INT 16
26210: PUSH
26211: LD_INT 20
26213: PUSH
26214: LD_INT 21
26216: PUSH
26217: LD_INT 22
26219: PUSH
26220: LD_INT 23
26222: PUSH
26223: LD_INT 25
26225: PUSH
26226: LD_INT 26
26228: PUSH
26229: LD_INT 30
26231: PUSH
26232: LD_INT 31
26234: PUSH
26235: LD_INT 32
26237: PUSH
26238: LD_INT 33
26240: PUSH
26241: LD_INT 34
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 101
26267: PUSH
26268: LD_INT 102
26270: PUSH
26271: LD_INT 103
26273: PUSH
26274: LD_INT 106
26276: PUSH
26277: LD_INT 108
26279: PUSH
26280: LD_INT 112
26282: PUSH
26283: LD_INT 113
26285: PUSH
26286: LD_INT 114
26288: PUSH
26289: LD_INT 116
26291: PUSH
26292: LD_INT 117
26294: PUSH
26295: LD_INT 118
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: ST_TO_ADDR
26315: GO 26946
26317: LD_INT 17
26319: DOUBLE
26320: EQUAL
26321: IFTRUE 26325
26323: GO 26549
26325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
26326: LD_ADDR_VAR 0 2
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: LD_INT 3
26339: PUSH
26340: LD_INT 4
26342: PUSH
26343: LD_INT 5
26345: PUSH
26346: LD_INT 6
26348: PUSH
26349: LD_INT 7
26351: PUSH
26352: LD_INT 8
26354: PUSH
26355: LD_INT 9
26357: PUSH
26358: LD_INT 10
26360: PUSH
26361: LD_INT 11
26363: PUSH
26364: LD_INT 12
26366: PUSH
26367: LD_INT 13
26369: PUSH
26370: LD_INT 14
26372: PUSH
26373: LD_INT 15
26375: PUSH
26376: LD_INT 16
26378: PUSH
26379: LD_INT 17
26381: PUSH
26382: LD_INT 18
26384: PUSH
26385: LD_INT 19
26387: PUSH
26388: LD_INT 20
26390: PUSH
26391: LD_INT 21
26393: PUSH
26394: LD_INT 22
26396: PUSH
26397: LD_INT 23
26399: PUSH
26400: LD_INT 24
26402: PUSH
26403: LD_INT 25
26405: PUSH
26406: LD_INT 26
26408: PUSH
26409: LD_INT 27
26411: PUSH
26412: LD_INT 28
26414: PUSH
26415: LD_INT 29
26417: PUSH
26418: LD_INT 30
26420: PUSH
26421: LD_INT 31
26423: PUSH
26424: LD_INT 32
26426: PUSH
26427: LD_INT 33
26429: PUSH
26430: LD_INT 34
26432: PUSH
26433: LD_INT 36
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 101
26475: PUSH
26476: LD_INT 102
26478: PUSH
26479: LD_INT 103
26481: PUSH
26482: LD_INT 104
26484: PUSH
26485: LD_INT 105
26487: PUSH
26488: LD_INT 106
26490: PUSH
26491: LD_INT 107
26493: PUSH
26494: LD_INT 108
26496: PUSH
26497: LD_INT 109
26499: PUSH
26500: LD_INT 110
26502: PUSH
26503: LD_INT 111
26505: PUSH
26506: LD_INT 112
26508: PUSH
26509: LD_INT 113
26511: PUSH
26512: LD_INT 114
26514: PUSH
26515: LD_INT 116
26517: PUSH
26518: LD_INT 117
26520: PUSH
26521: LD_INT 118
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: ST_TO_ADDR
26547: GO 26946
26549: LD_INT 18
26551: DOUBLE
26552: EQUAL
26553: IFTRUE 26557
26555: GO 26705
26557: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26558: LD_ADDR_VAR 0 2
26562: PUSH
26563: LD_INT 2
26565: PUSH
26566: LD_INT 4
26568: PUSH
26569: LD_INT 5
26571: PUSH
26572: LD_INT 7
26574: PUSH
26575: LD_INT 11
26577: PUSH
26578: LD_INT 12
26580: PUSH
26581: LD_INT 15
26583: PUSH
26584: LD_INT 16
26586: PUSH
26587: LD_INT 20
26589: PUSH
26590: LD_INT 21
26592: PUSH
26593: LD_INT 22
26595: PUSH
26596: LD_INT 23
26598: PUSH
26599: LD_INT 25
26601: PUSH
26602: LD_INT 26
26604: PUSH
26605: LD_INT 30
26607: PUSH
26608: LD_INT 31
26610: PUSH
26611: LD_INT 32
26613: PUSH
26614: LD_INT 33
26616: PUSH
26617: LD_INT 34
26619: PUSH
26620: LD_INT 35
26622: PUSH
26623: LD_INT 36
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 101
26651: PUSH
26652: LD_INT 102
26654: PUSH
26655: LD_INT 103
26657: PUSH
26658: LD_INT 106
26660: PUSH
26661: LD_INT 108
26663: PUSH
26664: LD_INT 112
26666: PUSH
26667: LD_INT 113
26669: PUSH
26670: LD_INT 114
26672: PUSH
26673: LD_INT 115
26675: PUSH
26676: LD_INT 116
26678: PUSH
26679: LD_INT 117
26681: PUSH
26682: LD_INT 118
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: ST_TO_ADDR
26703: GO 26946
26705: LD_INT 19
26707: DOUBLE
26708: EQUAL
26709: IFTRUE 26713
26711: GO 26945
26713: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26714: LD_ADDR_VAR 0 2
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: LD_INT 2
26724: PUSH
26725: LD_INT 3
26727: PUSH
26728: LD_INT 4
26730: PUSH
26731: LD_INT 5
26733: PUSH
26734: LD_INT 6
26736: PUSH
26737: LD_INT 7
26739: PUSH
26740: LD_INT 8
26742: PUSH
26743: LD_INT 9
26745: PUSH
26746: LD_INT 10
26748: PUSH
26749: LD_INT 11
26751: PUSH
26752: LD_INT 12
26754: PUSH
26755: LD_INT 13
26757: PUSH
26758: LD_INT 14
26760: PUSH
26761: LD_INT 15
26763: PUSH
26764: LD_INT 16
26766: PUSH
26767: LD_INT 17
26769: PUSH
26770: LD_INT 18
26772: PUSH
26773: LD_INT 19
26775: PUSH
26776: LD_INT 20
26778: PUSH
26779: LD_INT 21
26781: PUSH
26782: LD_INT 22
26784: PUSH
26785: LD_INT 23
26787: PUSH
26788: LD_INT 24
26790: PUSH
26791: LD_INT 25
26793: PUSH
26794: LD_INT 26
26796: PUSH
26797: LD_INT 27
26799: PUSH
26800: LD_INT 28
26802: PUSH
26803: LD_INT 29
26805: PUSH
26806: LD_INT 30
26808: PUSH
26809: LD_INT 31
26811: PUSH
26812: LD_INT 32
26814: PUSH
26815: LD_INT 33
26817: PUSH
26818: LD_INT 34
26820: PUSH
26821: LD_INT 35
26823: PUSH
26824: LD_INT 36
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 101
26867: PUSH
26868: LD_INT 102
26870: PUSH
26871: LD_INT 103
26873: PUSH
26874: LD_INT 104
26876: PUSH
26877: LD_INT 105
26879: PUSH
26880: LD_INT 106
26882: PUSH
26883: LD_INT 107
26885: PUSH
26886: LD_INT 108
26888: PUSH
26889: LD_INT 109
26891: PUSH
26892: LD_INT 110
26894: PUSH
26895: LD_INT 111
26897: PUSH
26898: LD_INT 112
26900: PUSH
26901: LD_INT 113
26903: PUSH
26904: LD_INT 114
26906: PUSH
26907: LD_INT 115
26909: PUSH
26910: LD_INT 116
26912: PUSH
26913: LD_INT 117
26915: PUSH
26916: LD_INT 118
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: ST_TO_ADDR
26943: GO 26946
26945: POP
// end else
26946: GO 27177
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26948: LD_ADDR_VAR 0 2
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: LD_INT 3
26961: PUSH
26962: LD_INT 4
26964: PUSH
26965: LD_INT 5
26967: PUSH
26968: LD_INT 6
26970: PUSH
26971: LD_INT 7
26973: PUSH
26974: LD_INT 8
26976: PUSH
26977: LD_INT 9
26979: PUSH
26980: LD_INT 10
26982: PUSH
26983: LD_INT 11
26985: PUSH
26986: LD_INT 12
26988: PUSH
26989: LD_INT 13
26991: PUSH
26992: LD_INT 14
26994: PUSH
26995: LD_INT 15
26997: PUSH
26998: LD_INT 16
27000: PUSH
27001: LD_INT 17
27003: PUSH
27004: LD_INT 18
27006: PUSH
27007: LD_INT 19
27009: PUSH
27010: LD_INT 20
27012: PUSH
27013: LD_INT 21
27015: PUSH
27016: LD_INT 22
27018: PUSH
27019: LD_INT 23
27021: PUSH
27022: LD_INT 24
27024: PUSH
27025: LD_INT 25
27027: PUSH
27028: LD_INT 26
27030: PUSH
27031: LD_INT 27
27033: PUSH
27034: LD_INT 28
27036: PUSH
27037: LD_INT 29
27039: PUSH
27040: LD_INT 30
27042: PUSH
27043: LD_INT 31
27045: PUSH
27046: LD_INT 32
27048: PUSH
27049: LD_INT 33
27051: PUSH
27052: LD_INT 34
27054: PUSH
27055: LD_INT 35
27057: PUSH
27058: LD_INT 36
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 101
27101: PUSH
27102: LD_INT 102
27104: PUSH
27105: LD_INT 103
27107: PUSH
27108: LD_INT 104
27110: PUSH
27111: LD_INT 105
27113: PUSH
27114: LD_INT 106
27116: PUSH
27117: LD_INT 107
27119: PUSH
27120: LD_INT 108
27122: PUSH
27123: LD_INT 109
27125: PUSH
27126: LD_INT 110
27128: PUSH
27129: LD_INT 111
27131: PUSH
27132: LD_INT 112
27134: PUSH
27135: LD_INT 113
27137: PUSH
27138: LD_INT 114
27140: PUSH
27141: LD_INT 115
27143: PUSH
27144: LD_INT 116
27146: PUSH
27147: LD_INT 117
27149: PUSH
27150: LD_INT 118
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: ST_TO_ADDR
// if result then
27177: LD_VAR 0 2
27181: IFFALSE 27967
// begin normal :=  ;
27183: LD_ADDR_VAR 0 5
27187: PUSH
27188: LD_STRING 
27190: ST_TO_ADDR
// hardcore :=  ;
27191: LD_ADDR_VAR 0 6
27195: PUSH
27196: LD_STRING 
27198: ST_TO_ADDR
// active :=  ;
27199: LD_ADDR_VAR 0 7
27203: PUSH
27204: LD_STRING 
27206: ST_TO_ADDR
// for i = 1 to normalCounter do
27207: LD_ADDR_VAR 0 8
27211: PUSH
27212: DOUBLE
27213: LD_INT 1
27215: DEC
27216: ST_TO_ADDR
27217: LD_EXP 52
27221: PUSH
27222: FOR_TO
27223: IFFALSE 27324
// begin tmp := 0 ;
27225: LD_ADDR_VAR 0 3
27229: PUSH
27230: LD_STRING 0
27232: ST_TO_ADDR
// if result [ 1 ] then
27233: LD_VAR 0 2
27237: PUSH
27238: LD_INT 1
27240: ARRAY
27241: IFFALSE 27306
// if result [ 1 ] [ 1 ] = i then
27243: LD_VAR 0 2
27247: PUSH
27248: LD_INT 1
27250: ARRAY
27251: PUSH
27252: LD_INT 1
27254: ARRAY
27255: PUSH
27256: LD_VAR 0 8
27260: EQUAL
27261: IFFALSE 27306
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27263: LD_ADDR_VAR 0 2
27267: PUSH
27268: LD_VAR 0 2
27272: PPUSH
27273: LD_INT 1
27275: PPUSH
27276: LD_VAR 0 2
27280: PUSH
27281: LD_INT 1
27283: ARRAY
27284: PPUSH
27285: LD_INT 1
27287: PPUSH
27288: CALL_OW 3
27292: PPUSH
27293: CALL_OW 1
27297: ST_TO_ADDR
// tmp := 1 ;
27298: LD_ADDR_VAR 0 3
27302: PUSH
27303: LD_STRING 1
27305: ST_TO_ADDR
// end ; normal := normal & tmp ;
27306: LD_ADDR_VAR 0 5
27310: PUSH
27311: LD_VAR 0 5
27315: PUSH
27316: LD_VAR 0 3
27320: STR
27321: ST_TO_ADDR
// end ;
27322: GO 27222
27324: POP
27325: POP
// for i = 1 to hardcoreCounter do
27326: LD_ADDR_VAR 0 8
27330: PUSH
27331: DOUBLE
27332: LD_INT 1
27334: DEC
27335: ST_TO_ADDR
27336: LD_EXP 53
27340: PUSH
27341: FOR_TO
27342: IFFALSE 27447
// begin tmp := 0 ;
27344: LD_ADDR_VAR 0 3
27348: PUSH
27349: LD_STRING 0
27351: ST_TO_ADDR
// if result [ 2 ] then
27352: LD_VAR 0 2
27356: PUSH
27357: LD_INT 2
27359: ARRAY
27360: IFFALSE 27429
// if result [ 2 ] [ 1 ] = 100 + i then
27362: LD_VAR 0 2
27366: PUSH
27367: LD_INT 2
27369: ARRAY
27370: PUSH
27371: LD_INT 1
27373: ARRAY
27374: PUSH
27375: LD_INT 100
27377: PUSH
27378: LD_VAR 0 8
27382: PLUS
27383: EQUAL
27384: IFFALSE 27429
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27386: LD_ADDR_VAR 0 2
27390: PUSH
27391: LD_VAR 0 2
27395: PPUSH
27396: LD_INT 2
27398: PPUSH
27399: LD_VAR 0 2
27403: PUSH
27404: LD_INT 2
27406: ARRAY
27407: PPUSH
27408: LD_INT 1
27410: PPUSH
27411: CALL_OW 3
27415: PPUSH
27416: CALL_OW 1
27420: ST_TO_ADDR
// tmp := 1 ;
27421: LD_ADDR_VAR 0 3
27425: PUSH
27426: LD_STRING 1
27428: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27429: LD_ADDR_VAR 0 6
27433: PUSH
27434: LD_VAR 0 6
27438: PUSH
27439: LD_VAR 0 3
27443: STR
27444: ST_TO_ADDR
// end ;
27445: GO 27341
27447: POP
27448: POP
// if isGameLoad then
27449: LD_VAR 0 1
27453: IFFALSE 27928
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27455: LD_ADDR_VAR 0 4
27459: PUSH
27460: LD_EXP 56
27464: PUSH
27465: LD_EXP 55
27469: PUSH
27470: LD_EXP 57
27474: PUSH
27475: LD_EXP 54
27479: PUSH
27480: LD_EXP 58
27484: PUSH
27485: LD_EXP 59
27489: PUSH
27490: LD_EXP 60
27494: PUSH
27495: LD_EXP 61
27499: PUSH
27500: LD_EXP 62
27504: PUSH
27505: LD_EXP 63
27509: PUSH
27510: LD_EXP 64
27514: PUSH
27515: LD_EXP 65
27519: PUSH
27520: LD_EXP 66
27524: PUSH
27525: LD_EXP 67
27529: PUSH
27530: LD_EXP 75
27534: PUSH
27535: LD_EXP 76
27539: PUSH
27540: LD_EXP 77
27544: PUSH
27545: LD_EXP 78
27549: PUSH
27550: LD_EXP 80
27554: PUSH
27555: LD_EXP 81
27559: PUSH
27560: LD_EXP 82
27564: PUSH
27565: LD_EXP 85
27569: PUSH
27570: LD_EXP 87
27574: PUSH
27575: LD_EXP 88
27579: PUSH
27580: LD_EXP 89
27584: PUSH
27585: LD_EXP 91
27589: PUSH
27590: LD_EXP 92
27594: PUSH
27595: LD_EXP 95
27599: PUSH
27600: LD_EXP 96
27604: PUSH
27605: LD_EXP 97
27609: PUSH
27610: LD_EXP 98
27614: PUSH
27615: LD_EXP 99
27619: PUSH
27620: LD_EXP 100
27624: PUSH
27625: LD_EXP 101
27629: PUSH
27630: LD_EXP 102
27634: PUSH
27635: LD_EXP 103
27639: PUSH
27640: LD_EXP 68
27644: PUSH
27645: LD_EXP 69
27649: PUSH
27650: LD_EXP 72
27654: PUSH
27655: LD_EXP 73
27659: PUSH
27660: LD_EXP 74
27664: PUSH
27665: LD_EXP 70
27669: PUSH
27670: LD_EXP 71
27674: PUSH
27675: LD_EXP 79
27679: PUSH
27680: LD_EXP 83
27684: PUSH
27685: LD_EXP 84
27689: PUSH
27690: LD_EXP 86
27694: PUSH
27695: LD_EXP 90
27699: PUSH
27700: LD_EXP 93
27704: PUSH
27705: LD_EXP 94
27709: PUSH
27710: LD_EXP 104
27714: PUSH
27715: LD_EXP 105
27719: PUSH
27720: LD_EXP 106
27724: PUSH
27725: LD_EXP 107
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: ST_TO_ADDR
// tmp :=  ;
27786: LD_ADDR_VAR 0 3
27790: PUSH
27791: LD_STRING 
27793: ST_TO_ADDR
// for i = 1 to normalCounter do
27794: LD_ADDR_VAR 0 8
27798: PUSH
27799: DOUBLE
27800: LD_INT 1
27802: DEC
27803: ST_TO_ADDR
27804: LD_EXP 52
27808: PUSH
27809: FOR_TO
27810: IFFALSE 27846
// begin if flags [ i ] then
27812: LD_VAR 0 4
27816: PUSH
27817: LD_VAR 0 8
27821: ARRAY
27822: IFFALSE 27844
// tmp := tmp & i & ; ;
27824: LD_ADDR_VAR 0 3
27828: PUSH
27829: LD_VAR 0 3
27833: PUSH
27834: LD_VAR 0 8
27838: STR
27839: PUSH
27840: LD_STRING ;
27842: STR
27843: ST_TO_ADDR
// end ;
27844: GO 27809
27846: POP
27847: POP
// for i = 1 to hardcoreCounter do
27848: LD_ADDR_VAR 0 8
27852: PUSH
27853: DOUBLE
27854: LD_INT 1
27856: DEC
27857: ST_TO_ADDR
27858: LD_EXP 53
27862: PUSH
27863: FOR_TO
27864: IFFALSE 27910
// begin if flags [ normalCounter + i ] then
27866: LD_VAR 0 4
27870: PUSH
27871: LD_EXP 52
27875: PUSH
27876: LD_VAR 0 8
27880: PLUS
27881: ARRAY
27882: IFFALSE 27908
// tmp := tmp & ( 100 + i ) & ; ;
27884: LD_ADDR_VAR 0 3
27888: PUSH
27889: LD_VAR 0 3
27893: PUSH
27894: LD_INT 100
27896: PUSH
27897: LD_VAR 0 8
27901: PLUS
27902: STR
27903: PUSH
27904: LD_STRING ;
27906: STR
27907: ST_TO_ADDR
// end ;
27908: GO 27863
27910: POP
27911: POP
// if tmp then
27912: LD_VAR 0 3
27916: IFFALSE 27928
// active := tmp ;
27918: LD_ADDR_VAR 0 7
27922: PUSH
27923: LD_VAR 0 3
27927: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27928: LD_STRING getStreamItemsFromMission("
27930: PUSH
27931: LD_VAR 0 5
27935: STR
27936: PUSH
27937: LD_STRING ","
27939: STR
27940: PUSH
27941: LD_VAR 0 6
27945: STR
27946: PUSH
27947: LD_STRING ","
27949: STR
27950: PUSH
27951: LD_VAR 0 7
27955: STR
27956: PUSH
27957: LD_STRING ")
27959: STR
27960: PPUSH
27961: CALL_OW 559
// end else
27965: GO 27974
// ToLua ( getStreamItemsFromMission("","","") ) ;
27967: LD_STRING getStreamItemsFromMission("","","")
27969: PPUSH
27970: CALL_OW 559
// end ;
27974: LD_VAR 0 2
27978: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27979: LD_EXP 51
27983: PUSH
27984: LD_EXP 56
27988: AND
27989: IFFALSE 28113
27991: GO 27993
27993: DISABLE
27994: LD_INT 0
27996: PPUSH
27997: PPUSH
// begin enable ;
27998: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27999: LD_ADDR_VAR 0 2
28003: PUSH
28004: LD_INT 22
28006: PUSH
28007: LD_OWVAR 2
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: LD_INT 34
28021: PUSH
28022: LD_INT 7
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 34
28031: PUSH
28032: LD_INT 45
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 34
28041: PUSH
28042: LD_INT 28
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 34
28051: PUSH
28052: LD_INT 47
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PPUSH
28070: CALL_OW 69
28074: ST_TO_ADDR
// if not tmp then
28075: LD_VAR 0 2
28079: NOT
28080: IFFALSE 28084
// exit ;
28082: GO 28113
// for i in tmp do
28084: LD_ADDR_VAR 0 1
28088: PUSH
28089: LD_VAR 0 2
28093: PUSH
28094: FOR_IN
28095: IFFALSE 28111
// begin SetLives ( i , 0 ) ;
28097: LD_VAR 0 1
28101: PPUSH
28102: LD_INT 0
28104: PPUSH
28105: CALL_OW 234
// end ;
28109: GO 28094
28111: POP
28112: POP
// end ;
28113: PPOPN 2
28115: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28116: LD_EXP 51
28120: PUSH
28121: LD_EXP 57
28125: AND
28126: IFFALSE 28210
28128: GO 28130
28130: DISABLE
28131: LD_INT 0
28133: PPUSH
28134: PPUSH
// begin enable ;
28135: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28136: LD_ADDR_VAR 0 2
28140: PUSH
28141: LD_INT 22
28143: PUSH
28144: LD_OWVAR 2
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 32
28155: PUSH
28156: LD_INT 3
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PPUSH
28167: CALL_OW 69
28171: ST_TO_ADDR
// if not tmp then
28172: LD_VAR 0 2
28176: NOT
28177: IFFALSE 28181
// exit ;
28179: GO 28210
// for i in tmp do
28181: LD_ADDR_VAR 0 1
28185: PUSH
28186: LD_VAR 0 2
28190: PUSH
28191: FOR_IN
28192: IFFALSE 28208
// begin SetLives ( i , 0 ) ;
28194: LD_VAR 0 1
28198: PPUSH
28199: LD_INT 0
28201: PPUSH
28202: CALL_OW 234
// end ;
28206: GO 28191
28208: POP
28209: POP
// end ;
28210: PPOPN 2
28212: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28213: LD_EXP 51
28217: PUSH
28218: LD_EXP 54
28222: AND
28223: IFFALSE 28316
28225: GO 28227
28227: DISABLE
28228: LD_INT 0
28230: PPUSH
// begin enable ;
28231: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28232: LD_ADDR_VAR 0 1
28236: PUSH
28237: LD_INT 22
28239: PUSH
28240: LD_OWVAR 2
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: LD_INT 25
28254: PUSH
28255: LD_INT 5
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 25
28264: PUSH
28265: LD_INT 9
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 25
28274: PUSH
28275: LD_INT 8
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PPUSH
28292: CALL_OW 69
28296: PUSH
28297: FOR_IN
28298: IFFALSE 28314
// begin SetClass ( i , 1 ) ;
28300: LD_VAR 0 1
28304: PPUSH
28305: LD_INT 1
28307: PPUSH
28308: CALL_OW 336
// end ;
28312: GO 28297
28314: POP
28315: POP
// end ;
28316: PPOPN 1
28318: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28319: LD_EXP 51
28323: PUSH
28324: LD_EXP 55
28328: AND
28329: PUSH
28330: LD_OWVAR 65
28334: PUSH
28335: LD_INT 7
28337: LESS
28338: AND
28339: IFFALSE 28353
28341: GO 28343
28343: DISABLE
// begin enable ;
28344: ENABLE
// game_speed := 7 ;
28345: LD_ADDR_OWVAR 65
28349: PUSH
28350: LD_INT 7
28352: ST_TO_ADDR
// end ;
28353: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28354: LD_EXP 51
28358: PUSH
28359: LD_EXP 58
28363: AND
28364: IFFALSE 28566
28366: GO 28368
28368: DISABLE
28369: LD_INT 0
28371: PPUSH
28372: PPUSH
28373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28374: LD_ADDR_VAR 0 3
28378: PUSH
28379: LD_INT 81
28381: PUSH
28382: LD_OWVAR 2
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 21
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PPUSH
28405: CALL_OW 69
28409: ST_TO_ADDR
// if not tmp then
28410: LD_VAR 0 3
28414: NOT
28415: IFFALSE 28419
// exit ;
28417: GO 28566
// if tmp > 5 then
28419: LD_VAR 0 3
28423: PUSH
28424: LD_INT 5
28426: GREATER
28427: IFFALSE 28439
// k := 5 else
28429: LD_ADDR_VAR 0 2
28433: PUSH
28434: LD_INT 5
28436: ST_TO_ADDR
28437: GO 28449
// k := tmp ;
28439: LD_ADDR_VAR 0 2
28443: PUSH
28444: LD_VAR 0 3
28448: ST_TO_ADDR
// for i := 1 to k do
28449: LD_ADDR_VAR 0 1
28453: PUSH
28454: DOUBLE
28455: LD_INT 1
28457: DEC
28458: ST_TO_ADDR
28459: LD_VAR 0 2
28463: PUSH
28464: FOR_TO
28465: IFFALSE 28564
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28467: LD_VAR 0 3
28471: PUSH
28472: LD_VAR 0 1
28476: ARRAY
28477: PPUSH
28478: LD_VAR 0 1
28482: PUSH
28483: LD_INT 4
28485: MOD
28486: PUSH
28487: LD_INT 1
28489: PLUS
28490: PPUSH
28491: CALL_OW 259
28495: PUSH
28496: LD_INT 10
28498: LESS
28499: IFFALSE 28562
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28501: LD_VAR 0 3
28505: PUSH
28506: LD_VAR 0 1
28510: ARRAY
28511: PPUSH
28512: LD_VAR 0 1
28516: PUSH
28517: LD_INT 4
28519: MOD
28520: PUSH
28521: LD_INT 1
28523: PLUS
28524: PPUSH
28525: LD_VAR 0 3
28529: PUSH
28530: LD_VAR 0 1
28534: ARRAY
28535: PPUSH
28536: LD_VAR 0 1
28540: PUSH
28541: LD_INT 4
28543: MOD
28544: PUSH
28545: LD_INT 1
28547: PLUS
28548: PPUSH
28549: CALL_OW 259
28553: PUSH
28554: LD_INT 1
28556: PLUS
28557: PPUSH
28558: CALL_OW 237
28562: GO 28464
28564: POP
28565: POP
// end ;
28566: PPOPN 3
28568: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28569: LD_EXP 51
28573: PUSH
28574: LD_EXP 59
28578: AND
28579: IFFALSE 28599
28581: GO 28583
28583: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28584: LD_INT 4
28586: PPUSH
28587: LD_OWVAR 2
28591: PPUSH
28592: LD_INT 0
28594: PPUSH
28595: CALL_OW 324
28599: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28600: LD_EXP 51
28604: PUSH
28605: LD_EXP 88
28609: AND
28610: IFFALSE 28630
28612: GO 28614
28614: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28615: LD_INT 19
28617: PPUSH
28618: LD_OWVAR 2
28622: PPUSH
28623: LD_INT 0
28625: PPUSH
28626: CALL_OW 324
28630: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28631: LD_EXP 51
28635: PUSH
28636: LD_EXP 60
28640: AND
28641: IFFALSE 28743
28643: GO 28645
28645: DISABLE
28646: LD_INT 0
28648: PPUSH
28649: PPUSH
// begin enable ;
28650: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28651: LD_ADDR_VAR 0 2
28655: PUSH
28656: LD_INT 22
28658: PUSH
28659: LD_OWVAR 2
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: LD_INT 34
28673: PUSH
28674: LD_INT 11
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 34
28683: PUSH
28684: LD_INT 30
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: LIST
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PPUSH
28700: CALL_OW 69
28704: ST_TO_ADDR
// if not tmp then
28705: LD_VAR 0 2
28709: NOT
28710: IFFALSE 28714
// exit ;
28712: GO 28743
// for i in tmp do
28714: LD_ADDR_VAR 0 1
28718: PUSH
28719: LD_VAR 0 2
28723: PUSH
28724: FOR_IN
28725: IFFALSE 28741
// begin SetLives ( i , 0 ) ;
28727: LD_VAR 0 1
28731: PPUSH
28732: LD_INT 0
28734: PPUSH
28735: CALL_OW 234
// end ;
28739: GO 28724
28741: POP
28742: POP
// end ;
28743: PPOPN 2
28745: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28746: LD_EXP 51
28750: PUSH
28751: LD_EXP 61
28755: AND
28756: IFFALSE 28776
28758: GO 28760
28760: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28761: LD_INT 32
28763: PPUSH
28764: LD_OWVAR 2
28768: PPUSH
28769: LD_INT 0
28771: PPUSH
28772: CALL_OW 324
28776: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28777: LD_EXP 51
28781: PUSH
28782: LD_EXP 62
28786: AND
28787: IFFALSE 28968
28789: GO 28791
28791: DISABLE
28792: LD_INT 0
28794: PPUSH
28795: PPUSH
28796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28797: LD_ADDR_VAR 0 2
28801: PUSH
28802: LD_INT 22
28804: PUSH
28805: LD_OWVAR 2
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 33
28816: PUSH
28817: LD_INT 3
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PPUSH
28828: CALL_OW 69
28832: ST_TO_ADDR
// if not tmp then
28833: LD_VAR 0 2
28837: NOT
28838: IFFALSE 28842
// exit ;
28840: GO 28968
// side := 0 ;
28842: LD_ADDR_VAR 0 3
28846: PUSH
28847: LD_INT 0
28849: ST_TO_ADDR
// for i := 1 to 8 do
28850: LD_ADDR_VAR 0 1
28854: PUSH
28855: DOUBLE
28856: LD_INT 1
28858: DEC
28859: ST_TO_ADDR
28860: LD_INT 8
28862: PUSH
28863: FOR_TO
28864: IFFALSE 28912
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28866: LD_OWVAR 2
28870: PUSH
28871: LD_VAR 0 1
28875: NONEQUAL
28876: PUSH
28877: LD_OWVAR 2
28881: PPUSH
28882: LD_VAR 0 1
28886: PPUSH
28887: CALL_OW 81
28891: PUSH
28892: LD_INT 2
28894: EQUAL
28895: AND
28896: IFFALSE 28910
// begin side := i ;
28898: LD_ADDR_VAR 0 3
28902: PUSH
28903: LD_VAR 0 1
28907: ST_TO_ADDR
// break ;
28908: GO 28912
// end ;
28910: GO 28863
28912: POP
28913: POP
// if not side then
28914: LD_VAR 0 3
28918: NOT
28919: IFFALSE 28923
// exit ;
28921: GO 28968
// for i := 1 to tmp do
28923: LD_ADDR_VAR 0 1
28927: PUSH
28928: DOUBLE
28929: LD_INT 1
28931: DEC
28932: ST_TO_ADDR
28933: LD_VAR 0 2
28937: PUSH
28938: FOR_TO
28939: IFFALSE 28966
// if Prob ( 60 ) then
28941: LD_INT 60
28943: PPUSH
28944: CALL_OW 13
28948: IFFALSE 28964
// SetSide ( i , side ) ;
28950: LD_VAR 0 1
28954: PPUSH
28955: LD_VAR 0 3
28959: PPUSH
28960: CALL_OW 235
28964: GO 28938
28966: POP
28967: POP
// end ;
28968: PPOPN 3
28970: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28971: LD_EXP 51
28975: PUSH
28976: LD_EXP 64
28980: AND
28981: IFFALSE 29100
28983: GO 28985
28985: DISABLE
28986: LD_INT 0
28988: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28989: LD_ADDR_VAR 0 1
28993: PUSH
28994: LD_INT 22
28996: PUSH
28997: LD_OWVAR 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 21
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 3
29018: PUSH
29019: LD_INT 23
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: LIST
29037: PPUSH
29038: CALL_OW 69
29042: PUSH
29043: FOR_IN
29044: IFFALSE 29098
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29046: LD_VAR 0 1
29050: PPUSH
29051: CALL_OW 257
29055: PUSH
29056: LD_INT 1
29058: PUSH
29059: LD_INT 2
29061: PUSH
29062: LD_INT 3
29064: PUSH
29065: LD_INT 4
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: IN
29074: IFFALSE 29096
// SetClass ( un , rand ( 1 , 4 ) ) ;
29076: LD_VAR 0 1
29080: PPUSH
29081: LD_INT 1
29083: PPUSH
29084: LD_INT 4
29086: PPUSH
29087: CALL_OW 12
29091: PPUSH
29092: CALL_OW 336
29096: GO 29043
29098: POP
29099: POP
// end ;
29100: PPOPN 1
29102: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29103: LD_EXP 51
29107: PUSH
29108: LD_EXP 63
29112: AND
29113: IFFALSE 29192
29115: GO 29117
29117: DISABLE
29118: LD_INT 0
29120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29121: LD_ADDR_VAR 0 1
29125: PUSH
29126: LD_INT 22
29128: PUSH
29129: LD_OWVAR 2
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 21
29140: PUSH
29141: LD_INT 3
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PPUSH
29152: CALL_OW 69
29156: ST_TO_ADDR
// if not tmp then
29157: LD_VAR 0 1
29161: NOT
29162: IFFALSE 29166
// exit ;
29164: GO 29192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29166: LD_VAR 0 1
29170: PUSH
29171: LD_INT 1
29173: PPUSH
29174: LD_VAR 0 1
29178: PPUSH
29179: CALL_OW 12
29183: ARRAY
29184: PPUSH
29185: LD_INT 100
29187: PPUSH
29188: CALL_OW 234
// end ;
29192: PPOPN 1
29194: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29195: LD_EXP 51
29199: PUSH
29200: LD_EXP 65
29204: AND
29205: IFFALSE 29303
29207: GO 29209
29209: DISABLE
29210: LD_INT 0
29212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29213: LD_ADDR_VAR 0 1
29217: PUSH
29218: LD_INT 22
29220: PUSH
29221: LD_OWVAR 2
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 21
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 69
29248: ST_TO_ADDR
// if not tmp then
29249: LD_VAR 0 1
29253: NOT
29254: IFFALSE 29258
// exit ;
29256: GO 29303
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29258: LD_VAR 0 1
29262: PUSH
29263: LD_INT 1
29265: PPUSH
29266: LD_VAR 0 1
29270: PPUSH
29271: CALL_OW 12
29275: ARRAY
29276: PPUSH
29277: LD_INT 1
29279: PPUSH
29280: LD_INT 4
29282: PPUSH
29283: CALL_OW 12
29287: PPUSH
29288: LD_INT 3000
29290: PPUSH
29291: LD_INT 9000
29293: PPUSH
29294: CALL_OW 12
29298: PPUSH
29299: CALL_OW 492
// end ;
29303: PPOPN 1
29305: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29306: LD_EXP 51
29310: PUSH
29311: LD_EXP 66
29315: AND
29316: IFFALSE 29336
29318: GO 29320
29320: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29321: LD_INT 1
29323: PPUSH
29324: LD_OWVAR 2
29328: PPUSH
29329: LD_INT 0
29331: PPUSH
29332: CALL_OW 324
29336: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29337: LD_EXP 51
29341: PUSH
29342: LD_EXP 67
29346: AND
29347: IFFALSE 29430
29349: GO 29351
29351: DISABLE
29352: LD_INT 0
29354: PPUSH
29355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29356: LD_ADDR_VAR 0 2
29360: PUSH
29361: LD_INT 22
29363: PUSH
29364: LD_OWVAR 2
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 21
29375: PUSH
29376: LD_INT 3
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PPUSH
29387: CALL_OW 69
29391: ST_TO_ADDR
// if not tmp then
29392: LD_VAR 0 2
29396: NOT
29397: IFFALSE 29401
// exit ;
29399: GO 29430
// for i in tmp do
29401: LD_ADDR_VAR 0 1
29405: PUSH
29406: LD_VAR 0 2
29410: PUSH
29411: FOR_IN
29412: IFFALSE 29428
// SetBLevel ( i , 10 ) ;
29414: LD_VAR 0 1
29418: PPUSH
29419: LD_INT 10
29421: PPUSH
29422: CALL_OW 241
29426: GO 29411
29428: POP
29429: POP
// end ;
29430: PPOPN 2
29432: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29433: LD_EXP 51
29437: PUSH
29438: LD_EXP 68
29442: AND
29443: IFFALSE 29554
29445: GO 29447
29447: DISABLE
29448: LD_INT 0
29450: PPUSH
29451: PPUSH
29452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29453: LD_ADDR_VAR 0 3
29457: PUSH
29458: LD_INT 22
29460: PUSH
29461: LD_OWVAR 2
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 25
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PPUSH
29484: CALL_OW 69
29488: ST_TO_ADDR
// if not tmp then
29489: LD_VAR 0 3
29493: NOT
29494: IFFALSE 29498
// exit ;
29496: GO 29554
// un := tmp [ rand ( 1 , tmp ) ] ;
29498: LD_ADDR_VAR 0 2
29502: PUSH
29503: LD_VAR 0 3
29507: PUSH
29508: LD_INT 1
29510: PPUSH
29511: LD_VAR 0 3
29515: PPUSH
29516: CALL_OW 12
29520: ARRAY
29521: ST_TO_ADDR
// if Crawls ( un ) then
29522: LD_VAR 0 2
29526: PPUSH
29527: CALL_OW 318
29531: IFFALSE 29542
// ComWalk ( un ) ;
29533: LD_VAR 0 2
29537: PPUSH
29538: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29542: LD_VAR 0 2
29546: PPUSH
29547: LD_INT 5
29549: PPUSH
29550: CALL_OW 336
// end ;
29554: PPOPN 3
29556: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29557: LD_EXP 51
29561: PUSH
29562: LD_EXP 69
29566: AND
29567: PUSH
29568: LD_OWVAR 67
29572: PUSH
29573: LD_INT 4
29575: LESS
29576: AND
29577: IFFALSE 29596
29579: GO 29581
29581: DISABLE
// begin Difficulty := Difficulty + 1 ;
29582: LD_ADDR_OWVAR 67
29586: PUSH
29587: LD_OWVAR 67
29591: PUSH
29592: LD_INT 1
29594: PLUS
29595: ST_TO_ADDR
// end ;
29596: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29597: LD_EXP 51
29601: PUSH
29602: LD_EXP 70
29606: AND
29607: IFFALSE 29710
29609: GO 29611
29611: DISABLE
29612: LD_INT 0
29614: PPUSH
// begin for i := 1 to 5 do
29615: LD_ADDR_VAR 0 1
29619: PUSH
29620: DOUBLE
29621: LD_INT 1
29623: DEC
29624: ST_TO_ADDR
29625: LD_INT 5
29627: PUSH
29628: FOR_TO
29629: IFFALSE 29708
// begin uc_nation := nation_nature ;
29631: LD_ADDR_OWVAR 21
29635: PUSH
29636: LD_INT 0
29638: ST_TO_ADDR
// uc_side := 0 ;
29639: LD_ADDR_OWVAR 20
29643: PUSH
29644: LD_INT 0
29646: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29647: LD_ADDR_OWVAR 29
29651: PUSH
29652: LD_INT 12
29654: PUSH
29655: LD_INT 12
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: ST_TO_ADDR
// hc_agressivity := 20 ;
29662: LD_ADDR_OWVAR 35
29666: PUSH
29667: LD_INT 20
29669: ST_TO_ADDR
// hc_class := class_tiger ;
29670: LD_ADDR_OWVAR 28
29674: PUSH
29675: LD_INT 14
29677: ST_TO_ADDR
// hc_gallery :=  ;
29678: LD_ADDR_OWVAR 33
29682: PUSH
29683: LD_STRING 
29685: ST_TO_ADDR
// hc_name :=  ;
29686: LD_ADDR_OWVAR 26
29690: PUSH
29691: LD_STRING 
29693: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29694: CALL_OW 44
29698: PPUSH
29699: LD_INT 0
29701: PPUSH
29702: CALL_OW 51
// end ;
29706: GO 29628
29708: POP
29709: POP
// end ;
29710: PPOPN 1
29712: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29713: LD_EXP 51
29717: PUSH
29718: LD_EXP 71
29722: AND
29723: IFFALSE 29732
29725: GO 29727
29727: DISABLE
// StreamSibBomb ;
29728: CALL 29733 0 0
29732: END
// export function StreamSibBomb ; var i , x , y ; begin
29733: LD_INT 0
29735: PPUSH
29736: PPUSH
29737: PPUSH
29738: PPUSH
// result := false ;
29739: LD_ADDR_VAR 0 1
29743: PUSH
29744: LD_INT 0
29746: ST_TO_ADDR
// for i := 1 to 16 do
29747: LD_ADDR_VAR 0 2
29751: PUSH
29752: DOUBLE
29753: LD_INT 1
29755: DEC
29756: ST_TO_ADDR
29757: LD_INT 16
29759: PUSH
29760: FOR_TO
29761: IFFALSE 29960
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29763: LD_ADDR_VAR 0 3
29767: PUSH
29768: LD_INT 10
29770: PUSH
29771: LD_INT 20
29773: PUSH
29774: LD_INT 30
29776: PUSH
29777: LD_INT 40
29779: PUSH
29780: LD_INT 50
29782: PUSH
29783: LD_INT 60
29785: PUSH
29786: LD_INT 70
29788: PUSH
29789: LD_INT 80
29791: PUSH
29792: LD_INT 90
29794: PUSH
29795: LD_INT 100
29797: PUSH
29798: LD_INT 110
29800: PUSH
29801: LD_INT 120
29803: PUSH
29804: LD_INT 130
29806: PUSH
29807: LD_INT 140
29809: PUSH
29810: LD_INT 150
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: PPUSH
29833: LD_INT 15
29835: PPUSH
29836: CALL_OW 12
29840: ARRAY
29841: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29842: LD_ADDR_VAR 0 4
29846: PUSH
29847: LD_INT 10
29849: PUSH
29850: LD_INT 20
29852: PUSH
29853: LD_INT 30
29855: PUSH
29856: LD_INT 40
29858: PUSH
29859: LD_INT 50
29861: PUSH
29862: LD_INT 60
29864: PUSH
29865: LD_INT 70
29867: PUSH
29868: LD_INT 80
29870: PUSH
29871: LD_INT 90
29873: PUSH
29874: LD_INT 100
29876: PUSH
29877: LD_INT 110
29879: PUSH
29880: LD_INT 120
29882: PUSH
29883: LD_INT 130
29885: PUSH
29886: LD_INT 140
29888: PUSH
29889: LD_INT 150
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: PPUSH
29912: LD_INT 15
29914: PPUSH
29915: CALL_OW 12
29919: ARRAY
29920: ST_TO_ADDR
// if ValidHex ( x , y ) then
29921: LD_VAR 0 3
29925: PPUSH
29926: LD_VAR 0 4
29930: PPUSH
29931: CALL_OW 488
29935: IFFALSE 29958
// begin result := [ x , y ] ;
29937: LD_ADDR_VAR 0 1
29941: PUSH
29942: LD_VAR 0 3
29946: PUSH
29947: LD_VAR 0 4
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: ST_TO_ADDR
// break ;
29956: GO 29960
// end ; end ;
29958: GO 29760
29960: POP
29961: POP
// if result then
29962: LD_VAR 0 1
29966: IFFALSE 30026
// begin ToLua ( playSibBomb() ) ;
29968: LD_STRING playSibBomb()
29970: PPUSH
29971: CALL_OW 559
// wait ( 0 0$14 ) ;
29975: LD_INT 490
29977: PPUSH
29978: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29982: LD_VAR 0 1
29986: PUSH
29987: LD_INT 1
29989: ARRAY
29990: PPUSH
29991: LD_VAR 0 1
29995: PUSH
29996: LD_INT 2
29998: ARRAY
29999: PPUSH
30000: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30004: LD_VAR 0 1
30008: PUSH
30009: LD_INT 1
30011: ARRAY
30012: PPUSH
30013: LD_VAR 0 1
30017: PUSH
30018: LD_INT 2
30020: ARRAY
30021: PPUSH
30022: CALL_OW 429
// end ; end ;
30026: LD_VAR 0 1
30030: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30031: LD_EXP 51
30035: PUSH
30036: LD_EXP 73
30040: AND
30041: IFFALSE 30053
30043: GO 30045
30045: DISABLE
// YouLost (  ) ;
30046: LD_STRING 
30048: PPUSH
30049: CALL_OW 104
30053: END
// every 0 0$1 trigger StreamModeActive and sFog do
30054: LD_EXP 51
30058: PUSH
30059: LD_EXP 72
30063: AND
30064: IFFALSE 30078
30066: GO 30068
30068: DISABLE
// FogOff ( your_side ) ;
30069: LD_OWVAR 2
30073: PPUSH
30074: CALL_OW 344
30078: END
// every 0 0$1 trigger StreamModeActive and sSun do
30079: LD_EXP 51
30083: PUSH
30084: LD_EXP 74
30088: AND
30089: IFFALSE 30117
30091: GO 30093
30093: DISABLE
// begin solar_recharge_percent := 0 ;
30094: LD_ADDR_OWVAR 79
30098: PUSH
30099: LD_INT 0
30101: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30102: LD_INT 10500
30104: PPUSH
30105: CALL_OW 67
// solar_recharge_percent := 100 ;
30109: LD_ADDR_OWVAR 79
30113: PUSH
30114: LD_INT 100
30116: ST_TO_ADDR
// end ;
30117: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30118: LD_EXP 51
30122: PUSH
30123: LD_EXP 75
30127: AND
30128: IFFALSE 30367
30130: GO 30132
30132: DISABLE
30133: LD_INT 0
30135: PPUSH
30136: PPUSH
30137: PPUSH
// begin tmp := [ ] ;
30138: LD_ADDR_VAR 0 3
30142: PUSH
30143: EMPTY
30144: ST_TO_ADDR
// for i := 1 to 6 do
30145: LD_ADDR_VAR 0 1
30149: PUSH
30150: DOUBLE
30151: LD_INT 1
30153: DEC
30154: ST_TO_ADDR
30155: LD_INT 6
30157: PUSH
30158: FOR_TO
30159: IFFALSE 30264
// begin uc_nation := nation_nature ;
30161: LD_ADDR_OWVAR 21
30165: PUSH
30166: LD_INT 0
30168: ST_TO_ADDR
// uc_side := 0 ;
30169: LD_ADDR_OWVAR 20
30173: PUSH
30174: LD_INT 0
30176: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30177: LD_ADDR_OWVAR 29
30181: PUSH
30182: LD_INT 12
30184: PUSH
30185: LD_INT 12
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: ST_TO_ADDR
// hc_agressivity := 20 ;
30192: LD_ADDR_OWVAR 35
30196: PUSH
30197: LD_INT 20
30199: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30200: LD_ADDR_OWVAR 28
30204: PUSH
30205: LD_INT 17
30207: ST_TO_ADDR
// hc_gallery :=  ;
30208: LD_ADDR_OWVAR 33
30212: PUSH
30213: LD_STRING 
30215: ST_TO_ADDR
// hc_name :=  ;
30216: LD_ADDR_OWVAR 26
30220: PUSH
30221: LD_STRING 
30223: ST_TO_ADDR
// un := CreateHuman ;
30224: LD_ADDR_VAR 0 2
30228: PUSH
30229: CALL_OW 44
30233: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30234: LD_VAR 0 2
30238: PPUSH
30239: LD_INT 1
30241: PPUSH
30242: CALL_OW 51
// tmp := tmp ^ un ;
30246: LD_ADDR_VAR 0 3
30250: PUSH
30251: LD_VAR 0 3
30255: PUSH
30256: LD_VAR 0 2
30260: ADD
30261: ST_TO_ADDR
// end ;
30262: GO 30158
30264: POP
30265: POP
// repeat wait ( 0 0$1 ) ;
30266: LD_INT 35
30268: PPUSH
30269: CALL_OW 67
// for un in tmp do
30273: LD_ADDR_VAR 0 2
30277: PUSH
30278: LD_VAR 0 3
30282: PUSH
30283: FOR_IN
30284: IFFALSE 30358
// begin if IsDead ( un ) then
30286: LD_VAR 0 2
30290: PPUSH
30291: CALL_OW 301
30295: IFFALSE 30315
// begin tmp := tmp diff un ;
30297: LD_ADDR_VAR 0 3
30301: PUSH
30302: LD_VAR 0 3
30306: PUSH
30307: LD_VAR 0 2
30311: DIFF
30312: ST_TO_ADDR
// continue ;
30313: GO 30283
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30315: LD_VAR 0 2
30319: PPUSH
30320: LD_INT 3
30322: PUSH
30323: LD_INT 22
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PPUSH
30337: CALL_OW 69
30341: PPUSH
30342: LD_VAR 0 2
30346: PPUSH
30347: CALL_OW 74
30351: PPUSH
30352: CALL_OW 115
// end ;
30356: GO 30283
30358: POP
30359: POP
// until not tmp ;
30360: LD_VAR 0 3
30364: NOT
30365: IFFALSE 30266
// end ;
30367: PPOPN 3
30369: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30370: LD_EXP 51
30374: PUSH
30375: LD_EXP 76
30379: AND
30380: IFFALSE 30434
30382: GO 30384
30384: DISABLE
// begin ToLua ( displayTroll(); ) ;
30385: LD_STRING displayTroll();
30387: PPUSH
30388: CALL_OW 559
// wait ( 3 3$00 ) ;
30392: LD_INT 6300
30394: PPUSH
30395: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30399: LD_STRING hideTroll();
30401: PPUSH
30402: CALL_OW 559
// wait ( 1 1$00 ) ;
30406: LD_INT 2100
30408: PPUSH
30409: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30413: LD_STRING displayTroll();
30415: PPUSH
30416: CALL_OW 559
// wait ( 1 1$00 ) ;
30420: LD_INT 2100
30422: PPUSH
30423: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30427: LD_STRING hideTroll();
30429: PPUSH
30430: CALL_OW 559
// end ;
30434: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30435: LD_EXP 51
30439: PUSH
30440: LD_EXP 77
30444: AND
30445: IFFALSE 30508
30447: GO 30449
30449: DISABLE
30450: LD_INT 0
30452: PPUSH
// begin p := 0 ;
30453: LD_ADDR_VAR 0 1
30457: PUSH
30458: LD_INT 0
30460: ST_TO_ADDR
// repeat game_speed := 1 ;
30461: LD_ADDR_OWVAR 65
30465: PUSH
30466: LD_INT 1
30468: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30469: LD_INT 35
30471: PPUSH
30472: CALL_OW 67
// p := p + 1 ;
30476: LD_ADDR_VAR 0 1
30480: PUSH
30481: LD_VAR 0 1
30485: PUSH
30486: LD_INT 1
30488: PLUS
30489: ST_TO_ADDR
// until p >= 60 ;
30490: LD_VAR 0 1
30494: PUSH
30495: LD_INT 60
30497: GREATEREQUAL
30498: IFFALSE 30461
// game_speed := 4 ;
30500: LD_ADDR_OWVAR 65
30504: PUSH
30505: LD_INT 4
30507: ST_TO_ADDR
// end ;
30508: PPOPN 1
30510: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30511: LD_EXP 51
30515: PUSH
30516: LD_EXP 78
30520: AND
30521: IFFALSE 30667
30523: GO 30525
30525: DISABLE
30526: LD_INT 0
30528: PPUSH
30529: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30530: LD_ADDR_VAR 0 1
30534: PUSH
30535: LD_INT 22
30537: PUSH
30538: LD_OWVAR 2
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 2
30549: PUSH
30550: LD_INT 30
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 30
30562: PUSH
30563: LD_INT 1
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: LIST
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PPUSH
30579: CALL_OW 69
30583: ST_TO_ADDR
// if not depot then
30584: LD_VAR 0 1
30588: NOT
30589: IFFALSE 30593
// exit ;
30591: GO 30667
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30593: LD_ADDR_VAR 0 2
30597: PUSH
30598: LD_VAR 0 1
30602: PUSH
30603: LD_INT 1
30605: PPUSH
30606: LD_VAR 0 1
30610: PPUSH
30611: CALL_OW 12
30615: ARRAY
30616: PPUSH
30617: CALL_OW 274
30621: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30622: LD_VAR 0 2
30626: PPUSH
30627: LD_INT 1
30629: PPUSH
30630: LD_INT 0
30632: PPUSH
30633: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30637: LD_VAR 0 2
30641: PPUSH
30642: LD_INT 2
30644: PPUSH
30645: LD_INT 0
30647: PPUSH
30648: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30652: LD_VAR 0 2
30656: PPUSH
30657: LD_INT 3
30659: PPUSH
30660: LD_INT 0
30662: PPUSH
30663: CALL_OW 277
// end ;
30667: PPOPN 2
30669: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30670: LD_EXP 51
30674: PUSH
30675: LD_EXP 79
30679: AND
30680: IFFALSE 30777
30682: GO 30684
30684: DISABLE
30685: LD_INT 0
30687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30688: LD_ADDR_VAR 0 1
30692: PUSH
30693: LD_INT 22
30695: PUSH
30696: LD_OWVAR 2
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 21
30707: PUSH
30708: LD_INT 1
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 3
30717: PUSH
30718: LD_INT 23
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: LIST
30736: PPUSH
30737: CALL_OW 69
30741: ST_TO_ADDR
// if not tmp then
30742: LD_VAR 0 1
30746: NOT
30747: IFFALSE 30751
// exit ;
30749: GO 30777
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30751: LD_VAR 0 1
30755: PUSH
30756: LD_INT 1
30758: PPUSH
30759: LD_VAR 0 1
30763: PPUSH
30764: CALL_OW 12
30768: ARRAY
30769: PPUSH
30770: LD_INT 200
30772: PPUSH
30773: CALL_OW 234
// end ;
30777: PPOPN 1
30779: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30780: LD_EXP 51
30784: PUSH
30785: LD_EXP 80
30789: AND
30790: IFFALSE 30869
30792: GO 30794
30794: DISABLE
30795: LD_INT 0
30797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30798: LD_ADDR_VAR 0 1
30802: PUSH
30803: LD_INT 22
30805: PUSH
30806: LD_OWVAR 2
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 21
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PPUSH
30829: CALL_OW 69
30833: ST_TO_ADDR
// if not tmp then
30834: LD_VAR 0 1
30838: NOT
30839: IFFALSE 30843
// exit ;
30841: GO 30869
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30843: LD_VAR 0 1
30847: PUSH
30848: LD_INT 1
30850: PPUSH
30851: LD_VAR 0 1
30855: PPUSH
30856: CALL_OW 12
30860: ARRAY
30861: PPUSH
30862: LD_INT 60
30864: PPUSH
30865: CALL_OW 234
// end ;
30869: PPOPN 1
30871: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30872: LD_EXP 51
30876: PUSH
30877: LD_EXP 81
30881: AND
30882: IFFALSE 30981
30884: GO 30886
30886: DISABLE
30887: LD_INT 0
30889: PPUSH
30890: PPUSH
// begin enable ;
30891: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30892: LD_ADDR_VAR 0 1
30896: PUSH
30897: LD_INT 22
30899: PUSH
30900: LD_OWVAR 2
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 61
30911: PUSH
30912: EMPTY
30913: LIST
30914: PUSH
30915: LD_INT 33
30917: PUSH
30918: LD_INT 2
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: LIST
30929: PPUSH
30930: CALL_OW 69
30934: ST_TO_ADDR
// if not tmp then
30935: LD_VAR 0 1
30939: NOT
30940: IFFALSE 30944
// exit ;
30942: GO 30981
// for i in tmp do
30944: LD_ADDR_VAR 0 2
30948: PUSH
30949: LD_VAR 0 1
30953: PUSH
30954: FOR_IN
30955: IFFALSE 30979
// if IsControledBy ( i ) then
30957: LD_VAR 0 2
30961: PPUSH
30962: CALL_OW 312
30966: IFFALSE 30977
// ComUnlink ( i ) ;
30968: LD_VAR 0 2
30972: PPUSH
30973: CALL_OW 136
30977: GO 30954
30979: POP
30980: POP
// end ;
30981: PPOPN 2
30983: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30984: LD_EXP 51
30988: PUSH
30989: LD_EXP 82
30993: AND
30994: IFFALSE 31134
30996: GO 30998
30998: DISABLE
30999: LD_INT 0
31001: PPUSH
31002: PPUSH
// begin ToLua ( displayPowell(); ) ;
31003: LD_STRING displayPowell();
31005: PPUSH
31006: CALL_OW 559
// uc_side := 0 ;
31010: LD_ADDR_OWVAR 20
31014: PUSH
31015: LD_INT 0
31017: ST_TO_ADDR
// uc_nation := 2 ;
31018: LD_ADDR_OWVAR 21
31022: PUSH
31023: LD_INT 2
31025: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31026: LD_ADDR_OWVAR 37
31030: PUSH
31031: LD_INT 14
31033: ST_TO_ADDR
// vc_engine := engine_siberite ;
31034: LD_ADDR_OWVAR 39
31038: PUSH
31039: LD_INT 3
31041: ST_TO_ADDR
// vc_control := control_apeman ;
31042: LD_ADDR_OWVAR 38
31046: PUSH
31047: LD_INT 5
31049: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31050: LD_ADDR_OWVAR 40
31054: PUSH
31055: LD_INT 29
31057: ST_TO_ADDR
// un := CreateVehicle ;
31058: LD_ADDR_VAR 0 2
31062: PUSH
31063: CALL_OW 45
31067: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31068: LD_VAR 0 2
31072: PPUSH
31073: LD_INT 1
31075: PPUSH
31076: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31080: LD_INT 35
31082: PPUSH
31083: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31087: LD_VAR 0 2
31091: PPUSH
31092: LD_INT 22
31094: PUSH
31095: LD_OWVAR 2
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PPUSH
31104: CALL_OW 69
31108: PPUSH
31109: LD_VAR 0 2
31113: PPUSH
31114: CALL_OW 74
31118: PPUSH
31119: CALL_OW 115
// until IsDead ( un ) ;
31123: LD_VAR 0 2
31127: PPUSH
31128: CALL_OW 301
31132: IFFALSE 31080
// end ;
31134: PPOPN 2
31136: END
// every 0 0$1 trigger StreamModeActive and sStu do
31137: LD_EXP 51
31141: PUSH
31142: LD_EXP 90
31146: AND
31147: IFFALSE 31163
31149: GO 31151
31151: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31152: LD_STRING displayStucuk();
31154: PPUSH
31155: CALL_OW 559
// ResetFog ;
31159: CALL_OW 335
// end ;
31163: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31164: LD_EXP 51
31168: PUSH
31169: LD_EXP 83
31173: AND
31174: IFFALSE 31315
31176: GO 31178
31178: DISABLE
31179: LD_INT 0
31181: PPUSH
31182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31183: LD_ADDR_VAR 0 2
31187: PUSH
31188: LD_INT 22
31190: PUSH
31191: LD_OWVAR 2
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 21
31202: PUSH
31203: LD_INT 1
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PPUSH
31214: CALL_OW 69
31218: ST_TO_ADDR
// if not tmp then
31219: LD_VAR 0 2
31223: NOT
31224: IFFALSE 31228
// exit ;
31226: GO 31315
// un := tmp [ rand ( 1 , tmp ) ] ;
31228: LD_ADDR_VAR 0 1
31232: PUSH
31233: LD_VAR 0 2
31237: PUSH
31238: LD_INT 1
31240: PPUSH
31241: LD_VAR 0 2
31245: PPUSH
31246: CALL_OW 12
31250: ARRAY
31251: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31252: LD_VAR 0 1
31256: PPUSH
31257: LD_INT 0
31259: PPUSH
31260: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31264: LD_VAR 0 1
31268: PPUSH
31269: LD_OWVAR 3
31273: PUSH
31274: LD_VAR 0 1
31278: DIFF
31279: PPUSH
31280: LD_VAR 0 1
31284: PPUSH
31285: CALL_OW 74
31289: PPUSH
31290: CALL_OW 115
// wait ( 0 0$20 ) ;
31294: LD_INT 700
31296: PPUSH
31297: CALL_OW 67
// SetSide ( un , your_side ) ;
31301: LD_VAR 0 1
31305: PPUSH
31306: LD_OWVAR 2
31310: PPUSH
31311: CALL_OW 235
// end ;
31315: PPOPN 2
31317: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31318: LD_EXP 51
31322: PUSH
31323: LD_EXP 84
31327: AND
31328: IFFALSE 31434
31330: GO 31332
31332: DISABLE
31333: LD_INT 0
31335: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31336: LD_ADDR_VAR 0 1
31340: PUSH
31341: LD_INT 22
31343: PUSH
31344: LD_OWVAR 2
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 2
31355: PUSH
31356: LD_INT 30
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 30
31368: PUSH
31369: LD_INT 1
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PPUSH
31385: CALL_OW 69
31389: ST_TO_ADDR
// if not depot then
31390: LD_VAR 0 1
31394: NOT
31395: IFFALSE 31399
// exit ;
31397: GO 31434
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31399: LD_VAR 0 1
31403: PUSH
31404: LD_INT 1
31406: ARRAY
31407: PPUSH
31408: CALL_OW 250
31412: PPUSH
31413: LD_VAR 0 1
31417: PUSH
31418: LD_INT 1
31420: ARRAY
31421: PPUSH
31422: CALL_OW 251
31426: PPUSH
31427: LD_INT 70
31429: PPUSH
31430: CALL_OW 495
// end ;
31434: PPOPN 1
31436: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31437: LD_EXP 51
31441: PUSH
31442: LD_EXP 85
31446: AND
31447: IFFALSE 31658
31449: GO 31451
31451: DISABLE
31452: LD_INT 0
31454: PPUSH
31455: PPUSH
31456: PPUSH
31457: PPUSH
31458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31459: LD_ADDR_VAR 0 5
31463: PUSH
31464: LD_INT 22
31466: PUSH
31467: LD_OWVAR 2
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 21
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PPUSH
31490: CALL_OW 69
31494: ST_TO_ADDR
// if not tmp then
31495: LD_VAR 0 5
31499: NOT
31500: IFFALSE 31504
// exit ;
31502: GO 31658
// for i in tmp do
31504: LD_ADDR_VAR 0 1
31508: PUSH
31509: LD_VAR 0 5
31513: PUSH
31514: FOR_IN
31515: IFFALSE 31656
// begin d := rand ( 0 , 5 ) ;
31517: LD_ADDR_VAR 0 4
31521: PUSH
31522: LD_INT 0
31524: PPUSH
31525: LD_INT 5
31527: PPUSH
31528: CALL_OW 12
31532: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31533: LD_ADDR_VAR 0 2
31537: PUSH
31538: LD_VAR 0 1
31542: PPUSH
31543: CALL_OW 250
31547: PPUSH
31548: LD_VAR 0 4
31552: PPUSH
31553: LD_INT 3
31555: PPUSH
31556: LD_INT 12
31558: PPUSH
31559: CALL_OW 12
31563: PPUSH
31564: CALL_OW 272
31568: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31569: LD_ADDR_VAR 0 3
31573: PUSH
31574: LD_VAR 0 1
31578: PPUSH
31579: CALL_OW 251
31583: PPUSH
31584: LD_VAR 0 4
31588: PPUSH
31589: LD_INT 3
31591: PPUSH
31592: LD_INT 12
31594: PPUSH
31595: CALL_OW 12
31599: PPUSH
31600: CALL_OW 273
31604: ST_TO_ADDR
// if ValidHex ( x , y ) then
31605: LD_VAR 0 2
31609: PPUSH
31610: LD_VAR 0 3
31614: PPUSH
31615: CALL_OW 488
31619: IFFALSE 31654
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31621: LD_VAR 0 1
31625: PPUSH
31626: LD_VAR 0 2
31630: PPUSH
31631: LD_VAR 0 3
31635: PPUSH
31636: LD_INT 3
31638: PPUSH
31639: LD_INT 6
31641: PPUSH
31642: CALL_OW 12
31646: PPUSH
31647: LD_INT 1
31649: PPUSH
31650: CALL_OW 483
// end ;
31654: GO 31514
31656: POP
31657: POP
// end ;
31658: PPOPN 5
31660: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31661: LD_EXP 51
31665: PUSH
31666: LD_EXP 86
31670: AND
31671: IFFALSE 31765
31673: GO 31675
31675: DISABLE
31676: LD_INT 0
31678: PPUSH
31679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31680: LD_ADDR_VAR 0 2
31684: PUSH
31685: LD_INT 22
31687: PUSH
31688: LD_OWVAR 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 32
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 21
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: PPUSH
31722: CALL_OW 69
31726: ST_TO_ADDR
// if not tmp then
31727: LD_VAR 0 2
31731: NOT
31732: IFFALSE 31736
// exit ;
31734: GO 31765
// for i in tmp do
31736: LD_ADDR_VAR 0 1
31740: PUSH
31741: LD_VAR 0 2
31745: PUSH
31746: FOR_IN
31747: IFFALSE 31763
// SetFuel ( i , 0 ) ;
31749: LD_VAR 0 1
31753: PPUSH
31754: LD_INT 0
31756: PPUSH
31757: CALL_OW 240
31761: GO 31746
31763: POP
31764: POP
// end ;
31765: PPOPN 2
31767: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31768: LD_EXP 51
31772: PUSH
31773: LD_EXP 87
31777: AND
31778: IFFALSE 31844
31780: GO 31782
31782: DISABLE
31783: LD_INT 0
31785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31786: LD_ADDR_VAR 0 1
31790: PUSH
31791: LD_INT 22
31793: PUSH
31794: LD_OWVAR 2
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 30
31805: PUSH
31806: LD_INT 29
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PPUSH
31817: CALL_OW 69
31821: ST_TO_ADDR
// if not tmp then
31822: LD_VAR 0 1
31826: NOT
31827: IFFALSE 31831
// exit ;
31829: GO 31844
// DestroyUnit ( tmp [ 1 ] ) ;
31831: LD_VAR 0 1
31835: PUSH
31836: LD_INT 1
31838: ARRAY
31839: PPUSH
31840: CALL_OW 65
// end ;
31844: PPOPN 1
31846: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31847: LD_EXP 51
31851: PUSH
31852: LD_EXP 89
31856: AND
31857: IFFALSE 31986
31859: GO 31861
31861: DISABLE
31862: LD_INT 0
31864: PPUSH
// begin uc_side := 0 ;
31865: LD_ADDR_OWVAR 20
31869: PUSH
31870: LD_INT 0
31872: ST_TO_ADDR
// uc_nation := nation_arabian ;
31873: LD_ADDR_OWVAR 21
31877: PUSH
31878: LD_INT 2
31880: ST_TO_ADDR
// hc_gallery :=  ;
31881: LD_ADDR_OWVAR 33
31885: PUSH
31886: LD_STRING 
31888: ST_TO_ADDR
// hc_name :=  ;
31889: LD_ADDR_OWVAR 26
31893: PUSH
31894: LD_STRING 
31896: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31897: LD_INT 1
31899: PPUSH
31900: LD_INT 11
31902: PPUSH
31903: LD_INT 10
31905: PPUSH
31906: CALL_OW 380
// un := CreateHuman ;
31910: LD_ADDR_VAR 0 1
31914: PUSH
31915: CALL_OW 44
31919: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31920: LD_VAR 0 1
31924: PPUSH
31925: LD_INT 1
31927: PPUSH
31928: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31932: LD_INT 35
31934: PPUSH
31935: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31939: LD_VAR 0 1
31943: PPUSH
31944: LD_INT 22
31946: PUSH
31947: LD_OWVAR 2
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PPUSH
31956: CALL_OW 69
31960: PPUSH
31961: LD_VAR 0 1
31965: PPUSH
31966: CALL_OW 74
31970: PPUSH
31971: CALL_OW 115
// until IsDead ( un ) ;
31975: LD_VAR 0 1
31979: PPUSH
31980: CALL_OW 301
31984: IFFALSE 31932
// end ;
31986: PPOPN 1
31988: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31989: LD_EXP 51
31993: PUSH
31994: LD_EXP 91
31998: AND
31999: IFFALSE 32011
32001: GO 32003
32003: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32004: LD_STRING earthquake(getX(game), 0, 32)
32006: PPUSH
32007: CALL_OW 559
32011: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32012: LD_EXP 51
32016: PUSH
32017: LD_EXP 92
32021: AND
32022: IFFALSE 32113
32024: GO 32026
32026: DISABLE
32027: LD_INT 0
32029: PPUSH
// begin enable ;
32030: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32031: LD_ADDR_VAR 0 1
32035: PUSH
32036: LD_INT 22
32038: PUSH
32039: LD_OWVAR 2
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 21
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 33
32060: PUSH
32061: LD_INT 3
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: LIST
32072: PPUSH
32073: CALL_OW 69
32077: ST_TO_ADDR
// if not tmp then
32078: LD_VAR 0 1
32082: NOT
32083: IFFALSE 32087
// exit ;
32085: GO 32113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32087: LD_VAR 0 1
32091: PUSH
32092: LD_INT 1
32094: PPUSH
32095: LD_VAR 0 1
32099: PPUSH
32100: CALL_OW 12
32104: ARRAY
32105: PPUSH
32106: LD_INT 1
32108: PPUSH
32109: CALL_OW 234
// end ;
32113: PPOPN 1
32115: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32116: LD_EXP 51
32120: PUSH
32121: LD_EXP 93
32125: AND
32126: IFFALSE 32267
32128: GO 32130
32130: DISABLE
32131: LD_INT 0
32133: PPUSH
32134: PPUSH
32135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32136: LD_ADDR_VAR 0 3
32140: PUSH
32141: LD_INT 22
32143: PUSH
32144: LD_OWVAR 2
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 25
32155: PUSH
32156: LD_INT 1
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PPUSH
32167: CALL_OW 69
32171: ST_TO_ADDR
// if not tmp then
32172: LD_VAR 0 3
32176: NOT
32177: IFFALSE 32181
// exit ;
32179: GO 32267
// un := tmp [ rand ( 1 , tmp ) ] ;
32181: LD_ADDR_VAR 0 2
32185: PUSH
32186: LD_VAR 0 3
32190: PUSH
32191: LD_INT 1
32193: PPUSH
32194: LD_VAR 0 3
32198: PPUSH
32199: CALL_OW 12
32203: ARRAY
32204: ST_TO_ADDR
// if Crawls ( un ) then
32205: LD_VAR 0 2
32209: PPUSH
32210: CALL_OW 318
32214: IFFALSE 32225
// ComWalk ( un ) ;
32216: LD_VAR 0 2
32220: PPUSH
32221: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32225: LD_VAR 0 2
32229: PPUSH
32230: LD_INT 9
32232: PPUSH
32233: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32237: LD_INT 28
32239: PPUSH
32240: LD_OWVAR 2
32244: PPUSH
32245: LD_INT 2
32247: PPUSH
32248: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32252: LD_INT 29
32254: PPUSH
32255: LD_OWVAR 2
32259: PPUSH
32260: LD_INT 2
32262: PPUSH
32263: CALL_OW 322
// end ;
32267: PPOPN 3
32269: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32270: LD_EXP 51
32274: PUSH
32275: LD_EXP 94
32279: AND
32280: IFFALSE 32391
32282: GO 32284
32284: DISABLE
32285: LD_INT 0
32287: PPUSH
32288: PPUSH
32289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32290: LD_ADDR_VAR 0 3
32294: PUSH
32295: LD_INT 22
32297: PUSH
32298: LD_OWVAR 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 25
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PPUSH
32321: CALL_OW 69
32325: ST_TO_ADDR
// if not tmp then
32326: LD_VAR 0 3
32330: NOT
32331: IFFALSE 32335
// exit ;
32333: GO 32391
// un := tmp [ rand ( 1 , tmp ) ] ;
32335: LD_ADDR_VAR 0 2
32339: PUSH
32340: LD_VAR 0 3
32344: PUSH
32345: LD_INT 1
32347: PPUSH
32348: LD_VAR 0 3
32352: PPUSH
32353: CALL_OW 12
32357: ARRAY
32358: ST_TO_ADDR
// if Crawls ( un ) then
32359: LD_VAR 0 2
32363: PPUSH
32364: CALL_OW 318
32368: IFFALSE 32379
// ComWalk ( un ) ;
32370: LD_VAR 0 2
32374: PPUSH
32375: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32379: LD_VAR 0 2
32383: PPUSH
32384: LD_INT 8
32386: PPUSH
32387: CALL_OW 336
// end ;
32391: PPOPN 3
32393: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32394: LD_EXP 51
32398: PUSH
32399: LD_EXP 95
32403: AND
32404: IFFALSE 32548
32406: GO 32408
32408: DISABLE
32409: LD_INT 0
32411: PPUSH
32412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32413: LD_ADDR_VAR 0 2
32417: PUSH
32418: LD_INT 22
32420: PUSH
32421: LD_OWVAR 2
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 21
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: LD_INT 34
32445: PUSH
32446: LD_INT 12
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 34
32455: PUSH
32456: LD_INT 51
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 34
32465: PUSH
32466: LD_INT 32
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: LIST
32483: PPUSH
32484: CALL_OW 69
32488: ST_TO_ADDR
// if not tmp then
32489: LD_VAR 0 2
32493: NOT
32494: IFFALSE 32498
// exit ;
32496: GO 32548
// for i in tmp do
32498: LD_ADDR_VAR 0 1
32502: PUSH
32503: LD_VAR 0 2
32507: PUSH
32508: FOR_IN
32509: IFFALSE 32546
// if GetCargo ( i , mat_artifact ) = 0 then
32511: LD_VAR 0 1
32515: PPUSH
32516: LD_INT 4
32518: PPUSH
32519: CALL_OW 289
32523: PUSH
32524: LD_INT 0
32526: EQUAL
32527: IFFALSE 32544
// SetCargo ( i , mat_siberit , 100 ) ;
32529: LD_VAR 0 1
32533: PPUSH
32534: LD_INT 3
32536: PPUSH
32537: LD_INT 100
32539: PPUSH
32540: CALL_OW 290
32544: GO 32508
32546: POP
32547: POP
// end ;
32548: PPOPN 2
32550: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32551: LD_EXP 51
32555: PUSH
32556: LD_EXP 96
32560: AND
32561: IFFALSE 32744
32563: GO 32565
32565: DISABLE
32566: LD_INT 0
32568: PPUSH
32569: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32570: LD_ADDR_VAR 0 2
32574: PUSH
32575: LD_INT 22
32577: PUSH
32578: LD_OWVAR 2
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PPUSH
32587: CALL_OW 69
32591: ST_TO_ADDR
// if not tmp then
32592: LD_VAR 0 2
32596: NOT
32597: IFFALSE 32601
// exit ;
32599: GO 32744
// for i := 1 to 2 do
32601: LD_ADDR_VAR 0 1
32605: PUSH
32606: DOUBLE
32607: LD_INT 1
32609: DEC
32610: ST_TO_ADDR
32611: LD_INT 2
32613: PUSH
32614: FOR_TO
32615: IFFALSE 32742
// begin uc_side := your_side ;
32617: LD_ADDR_OWVAR 20
32621: PUSH
32622: LD_OWVAR 2
32626: ST_TO_ADDR
// uc_nation := nation_american ;
32627: LD_ADDR_OWVAR 21
32631: PUSH
32632: LD_INT 1
32634: ST_TO_ADDR
// vc_chassis := us_morphling ;
32635: LD_ADDR_OWVAR 37
32639: PUSH
32640: LD_INT 5
32642: ST_TO_ADDR
// vc_engine := engine_siberite ;
32643: LD_ADDR_OWVAR 39
32647: PUSH
32648: LD_INT 3
32650: ST_TO_ADDR
// vc_control := control_computer ;
32651: LD_ADDR_OWVAR 38
32655: PUSH
32656: LD_INT 3
32658: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32659: LD_ADDR_OWVAR 40
32663: PUSH
32664: LD_INT 10
32666: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32667: LD_VAR 0 2
32671: PUSH
32672: LD_INT 1
32674: ARRAY
32675: PPUSH
32676: CALL_OW 310
32680: NOT
32681: IFFALSE 32728
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32683: CALL_OW 45
32687: PPUSH
32688: LD_VAR 0 2
32692: PUSH
32693: LD_INT 1
32695: ARRAY
32696: PPUSH
32697: CALL_OW 250
32701: PPUSH
32702: LD_VAR 0 2
32706: PUSH
32707: LD_INT 1
32709: ARRAY
32710: PPUSH
32711: CALL_OW 251
32715: PPUSH
32716: LD_INT 12
32718: PPUSH
32719: LD_INT 1
32721: PPUSH
32722: CALL_OW 50
32726: GO 32740
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32728: CALL_OW 45
32732: PPUSH
32733: LD_INT 1
32735: PPUSH
32736: CALL_OW 51
// end ;
32740: GO 32614
32742: POP
32743: POP
// end ;
32744: PPOPN 2
32746: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32747: LD_EXP 51
32751: PUSH
32752: LD_EXP 97
32756: AND
32757: IFFALSE 32979
32759: GO 32761
32761: DISABLE
32762: LD_INT 0
32764: PPUSH
32765: PPUSH
32766: PPUSH
32767: PPUSH
32768: PPUSH
32769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32770: LD_ADDR_VAR 0 6
32774: PUSH
32775: LD_INT 22
32777: PUSH
32778: LD_OWVAR 2
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 21
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 3
32799: PUSH
32800: LD_INT 23
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: LIST
32818: PPUSH
32819: CALL_OW 69
32823: ST_TO_ADDR
// if not tmp then
32824: LD_VAR 0 6
32828: NOT
32829: IFFALSE 32833
// exit ;
32831: GO 32979
// s1 := rand ( 1 , 4 ) ;
32833: LD_ADDR_VAR 0 2
32837: PUSH
32838: LD_INT 1
32840: PPUSH
32841: LD_INT 4
32843: PPUSH
32844: CALL_OW 12
32848: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32849: LD_ADDR_VAR 0 4
32853: PUSH
32854: LD_VAR 0 6
32858: PUSH
32859: LD_INT 1
32861: ARRAY
32862: PPUSH
32863: LD_VAR 0 2
32867: PPUSH
32868: CALL_OW 259
32872: ST_TO_ADDR
// if s1 = 1 then
32873: LD_VAR 0 2
32877: PUSH
32878: LD_INT 1
32880: EQUAL
32881: IFFALSE 32901
// s2 := rand ( 2 , 4 ) else
32883: LD_ADDR_VAR 0 3
32887: PUSH
32888: LD_INT 2
32890: PPUSH
32891: LD_INT 4
32893: PPUSH
32894: CALL_OW 12
32898: ST_TO_ADDR
32899: GO 32909
// s2 := 1 ;
32901: LD_ADDR_VAR 0 3
32905: PUSH
32906: LD_INT 1
32908: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32909: LD_ADDR_VAR 0 5
32913: PUSH
32914: LD_VAR 0 6
32918: PUSH
32919: LD_INT 1
32921: ARRAY
32922: PPUSH
32923: LD_VAR 0 3
32927: PPUSH
32928: CALL_OW 259
32932: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32933: LD_VAR 0 6
32937: PUSH
32938: LD_INT 1
32940: ARRAY
32941: PPUSH
32942: LD_VAR 0 2
32946: PPUSH
32947: LD_VAR 0 5
32951: PPUSH
32952: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32956: LD_VAR 0 6
32960: PUSH
32961: LD_INT 1
32963: ARRAY
32964: PPUSH
32965: LD_VAR 0 3
32969: PPUSH
32970: LD_VAR 0 4
32974: PPUSH
32975: CALL_OW 237
// end ;
32979: PPOPN 6
32981: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32982: LD_EXP 51
32986: PUSH
32987: LD_EXP 98
32991: AND
32992: IFFALSE 33071
32994: GO 32996
32996: DISABLE
32997: LD_INT 0
32999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33000: LD_ADDR_VAR 0 1
33004: PUSH
33005: LD_INT 22
33007: PUSH
33008: LD_OWVAR 2
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 30
33019: PUSH
33020: LD_INT 3
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PPUSH
33031: CALL_OW 69
33035: ST_TO_ADDR
// if not tmp then
33036: LD_VAR 0 1
33040: NOT
33041: IFFALSE 33045
// exit ;
33043: GO 33071
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33045: LD_VAR 0 1
33049: PUSH
33050: LD_INT 1
33052: PPUSH
33053: LD_VAR 0 1
33057: PPUSH
33058: CALL_OW 12
33062: ARRAY
33063: PPUSH
33064: LD_INT 1
33066: PPUSH
33067: CALL_OW 234
// end ;
33071: PPOPN 1
33073: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33074: LD_EXP 51
33078: PUSH
33079: LD_EXP 99
33083: AND
33084: IFFALSE 33196
33086: GO 33088
33088: DISABLE
33089: LD_INT 0
33091: PPUSH
33092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33093: LD_ADDR_VAR 0 2
33097: PUSH
33098: LD_INT 22
33100: PUSH
33101: LD_OWVAR 2
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: LD_INT 30
33115: PUSH
33116: LD_INT 27
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 30
33125: PUSH
33126: LD_INT 26
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 30
33135: PUSH
33136: LD_INT 28
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PPUSH
33153: CALL_OW 69
33157: ST_TO_ADDR
// if not tmp then
33158: LD_VAR 0 2
33162: NOT
33163: IFFALSE 33167
// exit ;
33165: GO 33196
// for i in tmp do
33167: LD_ADDR_VAR 0 1
33171: PUSH
33172: LD_VAR 0 2
33176: PUSH
33177: FOR_IN
33178: IFFALSE 33194
// SetLives ( i , 1 ) ;
33180: LD_VAR 0 1
33184: PPUSH
33185: LD_INT 1
33187: PPUSH
33188: CALL_OW 234
33192: GO 33177
33194: POP
33195: POP
// end ;
33196: PPOPN 2
33198: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33199: LD_EXP 51
33203: PUSH
33204: LD_EXP 100
33208: AND
33209: IFFALSE 33496
33211: GO 33213
33213: DISABLE
33214: LD_INT 0
33216: PPUSH
33217: PPUSH
33218: PPUSH
// begin i := rand ( 1 , 7 ) ;
33219: LD_ADDR_VAR 0 1
33223: PUSH
33224: LD_INT 1
33226: PPUSH
33227: LD_INT 7
33229: PPUSH
33230: CALL_OW 12
33234: ST_TO_ADDR
// case i of 1 :
33235: LD_VAR 0 1
33239: PUSH
33240: LD_INT 1
33242: DOUBLE
33243: EQUAL
33244: IFTRUE 33248
33246: GO 33258
33248: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33249: LD_STRING earthquake(getX(game), 0, 32)
33251: PPUSH
33252: CALL_OW 559
33256: GO 33496
33258: LD_INT 2
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33266
33264: GO 33280
33266: POP
// begin ToLua ( displayStucuk(); ) ;
33267: LD_STRING displayStucuk();
33269: PPUSH
33270: CALL_OW 559
// ResetFog ;
33274: CALL_OW 335
// end ; 3 :
33278: GO 33496
33280: LD_INT 3
33282: DOUBLE
33283: EQUAL
33284: IFTRUE 33288
33286: GO 33392
33288: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33289: LD_ADDR_VAR 0 2
33293: PUSH
33294: LD_INT 22
33296: PUSH
33297: LD_OWVAR 2
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 25
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PPUSH
33320: CALL_OW 69
33324: ST_TO_ADDR
// if not tmp then
33325: LD_VAR 0 2
33329: NOT
33330: IFFALSE 33334
// exit ;
33332: GO 33496
// un := tmp [ rand ( 1 , tmp ) ] ;
33334: LD_ADDR_VAR 0 3
33338: PUSH
33339: LD_VAR 0 2
33343: PUSH
33344: LD_INT 1
33346: PPUSH
33347: LD_VAR 0 2
33351: PPUSH
33352: CALL_OW 12
33356: ARRAY
33357: ST_TO_ADDR
// if Crawls ( un ) then
33358: LD_VAR 0 3
33362: PPUSH
33363: CALL_OW 318
33367: IFFALSE 33378
// ComWalk ( un ) ;
33369: LD_VAR 0 3
33373: PPUSH
33374: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33378: LD_VAR 0 3
33382: PPUSH
33383: LD_INT 8
33385: PPUSH
33386: CALL_OW 336
// end ; 4 :
33390: GO 33496
33392: LD_INT 4
33394: DOUBLE
33395: EQUAL
33396: IFTRUE 33400
33398: GO 33474
33400: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33401: LD_ADDR_VAR 0 2
33405: PUSH
33406: LD_INT 22
33408: PUSH
33409: LD_OWVAR 2
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 30
33420: PUSH
33421: LD_INT 29
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PPUSH
33432: CALL_OW 69
33436: ST_TO_ADDR
// if not tmp then
33437: LD_VAR 0 2
33441: NOT
33442: IFFALSE 33446
// exit ;
33444: GO 33496
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33446: LD_VAR 0 2
33450: PUSH
33451: LD_INT 1
33453: ARRAY
33454: PPUSH
33455: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33459: LD_VAR 0 2
33463: PUSH
33464: LD_INT 1
33466: ARRAY
33467: PPUSH
33468: CALL_OW 65
// end ; 5 .. 7 :
33472: GO 33496
33474: LD_INT 5
33476: DOUBLE
33477: GREATEREQUAL
33478: IFFALSE 33486
33480: LD_INT 7
33482: DOUBLE
33483: LESSEQUAL
33484: IFTRUE 33488
33486: GO 33495
33488: POP
// StreamSibBomb ; end ;
33489: CALL 29733 0 0
33493: GO 33496
33495: POP
// end ;
33496: PPOPN 3
33498: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33499: LD_EXP 51
33503: PUSH
33504: LD_EXP 101
33508: AND
33509: IFFALSE 33665
33511: GO 33513
33513: DISABLE
33514: LD_INT 0
33516: PPUSH
33517: PPUSH
33518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33519: LD_ADDR_VAR 0 2
33523: PUSH
33524: LD_INT 81
33526: PUSH
33527: LD_OWVAR 2
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 2
33538: PUSH
33539: LD_INT 21
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 21
33551: PUSH
33552: LD_INT 2
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: LIST
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PPUSH
33568: CALL_OW 69
33572: ST_TO_ADDR
// if not tmp then
33573: LD_VAR 0 2
33577: NOT
33578: IFFALSE 33582
// exit ;
33580: GO 33665
// p := 0 ;
33582: LD_ADDR_VAR 0 3
33586: PUSH
33587: LD_INT 0
33589: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33590: LD_INT 35
33592: PPUSH
33593: CALL_OW 67
// p := p + 1 ;
33597: LD_ADDR_VAR 0 3
33601: PUSH
33602: LD_VAR 0 3
33606: PUSH
33607: LD_INT 1
33609: PLUS
33610: ST_TO_ADDR
// for i in tmp do
33611: LD_ADDR_VAR 0 1
33615: PUSH
33616: LD_VAR 0 2
33620: PUSH
33621: FOR_IN
33622: IFFALSE 33653
// if GetLives ( i ) < 1000 then
33624: LD_VAR 0 1
33628: PPUSH
33629: CALL_OW 256
33633: PUSH
33634: LD_INT 1000
33636: LESS
33637: IFFALSE 33651
// SetLives ( i , 1000 ) ;
33639: LD_VAR 0 1
33643: PPUSH
33644: LD_INT 1000
33646: PPUSH
33647: CALL_OW 234
33651: GO 33621
33653: POP
33654: POP
// until p > 20 ;
33655: LD_VAR 0 3
33659: PUSH
33660: LD_INT 20
33662: GREATER
33663: IFFALSE 33590
// end ;
33665: PPOPN 3
33667: END
// every 0 0$1 trigger StreamModeActive and sTime do
33668: LD_EXP 51
33672: PUSH
33673: LD_EXP 102
33677: AND
33678: IFFALSE 33713
33680: GO 33682
33682: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33683: LD_INT 28
33685: PPUSH
33686: LD_OWVAR 2
33690: PPUSH
33691: LD_INT 2
33693: PPUSH
33694: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33698: LD_INT 30
33700: PPUSH
33701: LD_OWVAR 2
33705: PPUSH
33706: LD_INT 2
33708: PPUSH
33709: CALL_OW 322
// end ;
33713: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33714: LD_EXP 51
33718: PUSH
33719: LD_EXP 103
33723: AND
33724: IFFALSE 33845
33726: GO 33728
33728: DISABLE
33729: LD_INT 0
33731: PPUSH
33732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33733: LD_ADDR_VAR 0 2
33737: PUSH
33738: LD_INT 22
33740: PUSH
33741: LD_OWVAR 2
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 21
33752: PUSH
33753: LD_INT 1
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 3
33762: PUSH
33763: LD_INT 23
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: LIST
33781: PPUSH
33782: CALL_OW 69
33786: ST_TO_ADDR
// if not tmp then
33787: LD_VAR 0 2
33791: NOT
33792: IFFALSE 33796
// exit ;
33794: GO 33845
// for i in tmp do
33796: LD_ADDR_VAR 0 1
33800: PUSH
33801: LD_VAR 0 2
33805: PUSH
33806: FOR_IN
33807: IFFALSE 33843
// begin if Crawls ( i ) then
33809: LD_VAR 0 1
33813: PPUSH
33814: CALL_OW 318
33818: IFFALSE 33829
// ComWalk ( i ) ;
33820: LD_VAR 0 1
33824: PPUSH
33825: CALL_OW 138
// SetClass ( i , 2 ) ;
33829: LD_VAR 0 1
33833: PPUSH
33834: LD_INT 2
33836: PPUSH
33837: CALL_OW 336
// end ;
33841: GO 33806
33843: POP
33844: POP
// end ;
33845: PPOPN 2
33847: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33848: LD_EXP 51
33852: PUSH
33853: LD_EXP 104
33857: AND
33858: IFFALSE 34146
33860: GO 33862
33862: DISABLE
33863: LD_INT 0
33865: PPUSH
33866: PPUSH
33867: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33868: LD_OWVAR 2
33872: PPUSH
33873: LD_INT 9
33875: PPUSH
33876: LD_INT 1
33878: PPUSH
33879: LD_INT 1
33881: PPUSH
33882: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33886: LD_INT 9
33888: PPUSH
33889: LD_OWVAR 2
33893: PPUSH
33894: CALL_OW 343
// uc_side := 9 ;
33898: LD_ADDR_OWVAR 20
33902: PUSH
33903: LD_INT 9
33905: ST_TO_ADDR
// uc_nation := 2 ;
33906: LD_ADDR_OWVAR 21
33910: PUSH
33911: LD_INT 2
33913: ST_TO_ADDR
// hc_name := Dark Warrior ;
33914: LD_ADDR_OWVAR 26
33918: PUSH
33919: LD_STRING Dark Warrior
33921: ST_TO_ADDR
// hc_gallery :=  ;
33922: LD_ADDR_OWVAR 33
33926: PUSH
33927: LD_STRING 
33929: ST_TO_ADDR
// hc_noskilllimit := true ;
33930: LD_ADDR_OWVAR 76
33934: PUSH
33935: LD_INT 1
33937: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33938: LD_ADDR_OWVAR 31
33942: PUSH
33943: LD_INT 30
33945: PUSH
33946: LD_INT 30
33948: PUSH
33949: LD_INT 30
33951: PUSH
33952: LD_INT 30
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
// un := CreateHuman ;
33961: LD_ADDR_VAR 0 3
33965: PUSH
33966: CALL_OW 44
33970: ST_TO_ADDR
// hc_noskilllimit := false ;
33971: LD_ADDR_OWVAR 76
33975: PUSH
33976: LD_INT 0
33978: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33979: LD_VAR 0 3
33983: PPUSH
33984: LD_INT 1
33986: PPUSH
33987: CALL_OW 51
// ToLua ( playRanger() ) ;
33991: LD_STRING playRanger()
33993: PPUSH
33994: CALL_OW 559
// p := 0 ;
33998: LD_ADDR_VAR 0 2
34002: PUSH
34003: LD_INT 0
34005: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34006: LD_INT 35
34008: PPUSH
34009: CALL_OW 67
// p := p + 1 ;
34013: LD_ADDR_VAR 0 2
34017: PUSH
34018: LD_VAR 0 2
34022: PUSH
34023: LD_INT 1
34025: PLUS
34026: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34027: LD_VAR 0 3
34031: PPUSH
34032: CALL_OW 256
34036: PUSH
34037: LD_INT 1000
34039: LESS
34040: IFFALSE 34054
// SetLives ( un , 1000 ) ;
34042: LD_VAR 0 3
34046: PPUSH
34047: LD_INT 1000
34049: PPUSH
34050: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34054: LD_VAR 0 3
34058: PPUSH
34059: LD_INT 81
34061: PUSH
34062: LD_OWVAR 2
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 91
34073: PUSH
34074: LD_VAR 0 3
34078: PUSH
34079: LD_INT 30
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: LIST
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PPUSH
34091: CALL_OW 69
34095: PPUSH
34096: LD_VAR 0 3
34100: PPUSH
34101: CALL_OW 74
34105: PPUSH
34106: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
34110: LD_VAR 0 2
34114: PUSH
34115: LD_INT 80
34117: GREATER
34118: PUSH
34119: LD_VAR 0 3
34123: PPUSH
34124: CALL_OW 301
34128: OR
34129: IFFALSE 34006
// if un then
34131: LD_VAR 0 3
34135: IFFALSE 34146
// RemoveUnit ( un ) ;
34137: LD_VAR 0 3
34141: PPUSH
34142: CALL_OW 64
// end ;
34146: PPOPN 3
34148: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
34149: LD_EXP 105
34153: IFFALSE 34269
34155: GO 34157
34157: DISABLE
34158: LD_INT 0
34160: PPUSH
34161: PPUSH
34162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34163: LD_ADDR_VAR 0 2
34167: PUSH
34168: LD_INT 81
34170: PUSH
34171: LD_OWVAR 2
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 21
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PPUSH
34194: CALL_OW 69
34198: ST_TO_ADDR
// ToLua ( playComputer() ) ;
34199: LD_STRING playComputer()
34201: PPUSH
34202: CALL_OW 559
// if not tmp then
34206: LD_VAR 0 2
34210: NOT
34211: IFFALSE 34215
// exit ;
34213: GO 34269
// for i in tmp do
34215: LD_ADDR_VAR 0 1
34219: PUSH
34220: LD_VAR 0 2
34224: PUSH
34225: FOR_IN
34226: IFFALSE 34267
// for j := 1 to 4 do
34228: LD_ADDR_VAR 0 3
34232: PUSH
34233: DOUBLE
34234: LD_INT 1
34236: DEC
34237: ST_TO_ADDR
34238: LD_INT 4
34240: PUSH
34241: FOR_TO
34242: IFFALSE 34263
// SetSkill ( i , j , 10 ) ;
34244: LD_VAR 0 1
34248: PPUSH
34249: LD_VAR 0 3
34253: PPUSH
34254: LD_INT 10
34256: PPUSH
34257: CALL_OW 237
34261: GO 34241
34263: POP
34264: POP
34265: GO 34225
34267: POP
34268: POP
// end ;
34269: PPOPN 3
34271: END
// every 0 0$1 trigger s30 do var i , tmp ;
34272: LD_EXP 106
34276: IFFALSE 34345
34278: GO 34280
34280: DISABLE
34281: LD_INT 0
34283: PPUSH
34284: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34285: LD_ADDR_VAR 0 2
34289: PUSH
34290: LD_INT 22
34292: PUSH
34293: LD_OWVAR 2
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PPUSH
34302: CALL_OW 69
34306: ST_TO_ADDR
// if not tmp then
34307: LD_VAR 0 2
34311: NOT
34312: IFFALSE 34316
// exit ;
34314: GO 34345
// for i in tmp do
34316: LD_ADDR_VAR 0 1
34320: PUSH
34321: LD_VAR 0 2
34325: PUSH
34326: FOR_IN
34327: IFFALSE 34343
// SetLives ( i , 300 ) ;
34329: LD_VAR 0 1
34333: PPUSH
34334: LD_INT 300
34336: PPUSH
34337: CALL_OW 234
34341: GO 34326
34343: POP
34344: POP
// end ;
34345: PPOPN 2
34347: END
// every 0 0$1 trigger s60 do var i , tmp ;
34348: LD_EXP 107
34352: IFFALSE 34421
34354: GO 34356
34356: DISABLE
34357: LD_INT 0
34359: PPUSH
34360: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34361: LD_ADDR_VAR 0 2
34365: PUSH
34366: LD_INT 22
34368: PUSH
34369: LD_OWVAR 2
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PPUSH
34378: CALL_OW 69
34382: ST_TO_ADDR
// if not tmp then
34383: LD_VAR 0 2
34387: NOT
34388: IFFALSE 34392
// exit ;
34390: GO 34421
// for i in tmp do
34392: LD_ADDR_VAR 0 1
34396: PUSH
34397: LD_VAR 0 2
34401: PUSH
34402: FOR_IN
34403: IFFALSE 34419
// SetLives ( i , 600 ) ;
34405: LD_VAR 0 1
34409: PPUSH
34410: LD_INT 600
34412: PPUSH
34413: CALL_OW 234
34417: GO 34402
34419: POP
34420: POP
// end ;
34421: PPOPN 2
34423: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34424: LD_INT 0
34426: PPUSH
// case cmd of 301 :
34427: LD_VAR 0 1
34431: PUSH
34432: LD_INT 301
34434: DOUBLE
34435: EQUAL
34436: IFTRUE 34440
34438: GO 34472
34440: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34441: LD_VAR 0 6
34445: PPUSH
34446: LD_VAR 0 7
34450: PPUSH
34451: LD_VAR 0 8
34455: PPUSH
34456: LD_VAR 0 4
34460: PPUSH
34461: LD_VAR 0 5
34465: PPUSH
34466: CALL 35681 0 5
34470: GO 34593
34472: LD_INT 302
34474: DOUBLE
34475: EQUAL
34476: IFTRUE 34480
34478: GO 34517
34480: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34481: LD_VAR 0 6
34485: PPUSH
34486: LD_VAR 0 7
34490: PPUSH
34491: LD_VAR 0 8
34495: PPUSH
34496: LD_VAR 0 9
34500: PPUSH
34501: LD_VAR 0 4
34505: PPUSH
34506: LD_VAR 0 5
34510: PPUSH
34511: CALL 35772 0 6
34515: GO 34593
34517: LD_INT 303
34519: DOUBLE
34520: EQUAL
34521: IFTRUE 34525
34523: GO 34562
34525: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34526: LD_VAR 0 6
34530: PPUSH
34531: LD_VAR 0 7
34535: PPUSH
34536: LD_VAR 0 8
34540: PPUSH
34541: LD_VAR 0 9
34545: PPUSH
34546: LD_VAR 0 4
34550: PPUSH
34551: LD_VAR 0 5
34555: PPUSH
34556: CALL 34598 0 6
34560: GO 34593
34562: LD_INT 304
34564: DOUBLE
34565: EQUAL
34566: IFTRUE 34570
34568: GO 34592
34570: POP
// hHackTeleport ( unit , x , y ) ; end ;
34571: LD_VAR 0 2
34575: PPUSH
34576: LD_VAR 0 4
34580: PPUSH
34581: LD_VAR 0 5
34585: PPUSH
34586: CALL 36365 0 3
34590: GO 34593
34592: POP
// end ;
34593: LD_VAR 0 12
34597: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34598: LD_INT 0
34600: PPUSH
34601: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34602: LD_VAR 0 1
34606: PUSH
34607: LD_INT 1
34609: LESS
34610: PUSH
34611: LD_VAR 0 1
34615: PUSH
34616: LD_INT 3
34618: GREATER
34619: OR
34620: PUSH
34621: LD_VAR 0 5
34625: PPUSH
34626: LD_VAR 0 6
34630: PPUSH
34631: CALL_OW 428
34635: OR
34636: IFFALSE 34640
// exit ;
34638: GO 35368
// uc_side := your_side ;
34640: LD_ADDR_OWVAR 20
34644: PUSH
34645: LD_OWVAR 2
34649: ST_TO_ADDR
// uc_nation := nation ;
34650: LD_ADDR_OWVAR 21
34654: PUSH
34655: LD_VAR 0 1
34659: ST_TO_ADDR
// bc_level = 1 ;
34660: LD_ADDR_OWVAR 43
34664: PUSH
34665: LD_INT 1
34667: ST_TO_ADDR
// case btype of 1 :
34668: LD_VAR 0 2
34672: PUSH
34673: LD_INT 1
34675: DOUBLE
34676: EQUAL
34677: IFTRUE 34681
34679: GO 34692
34681: POP
// bc_type := b_depot ; 2 :
34682: LD_ADDR_OWVAR 42
34686: PUSH
34687: LD_INT 0
34689: ST_TO_ADDR
34690: GO 35312
34692: LD_INT 2
34694: DOUBLE
34695: EQUAL
34696: IFTRUE 34700
34698: GO 34711
34700: POP
// bc_type := b_warehouse ; 3 :
34701: LD_ADDR_OWVAR 42
34705: PUSH
34706: LD_INT 1
34708: ST_TO_ADDR
34709: GO 35312
34711: LD_INT 3
34713: DOUBLE
34714: EQUAL
34715: IFTRUE 34719
34717: GO 34730
34719: POP
// bc_type := b_lab ; 4 .. 9 :
34720: LD_ADDR_OWVAR 42
34724: PUSH
34725: LD_INT 6
34727: ST_TO_ADDR
34728: GO 35312
34730: LD_INT 4
34732: DOUBLE
34733: GREATEREQUAL
34734: IFFALSE 34742
34736: LD_INT 9
34738: DOUBLE
34739: LESSEQUAL
34740: IFTRUE 34744
34742: GO 34804
34744: POP
// begin bc_type := b_lab_half ;
34745: LD_ADDR_OWVAR 42
34749: PUSH
34750: LD_INT 7
34752: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34753: LD_ADDR_OWVAR 44
34757: PUSH
34758: LD_INT 10
34760: PUSH
34761: LD_INT 11
34763: PUSH
34764: LD_INT 12
34766: PUSH
34767: LD_INT 15
34769: PUSH
34770: LD_INT 14
34772: PUSH
34773: LD_INT 13
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: PUSH
34784: LD_VAR 0 2
34788: PUSH
34789: LD_INT 3
34791: MINUS
34792: ARRAY
34793: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34794: LD_ADDR_OWVAR 45
34798: PUSH
34799: LD_INT 9
34801: ST_TO_ADDR
// end ; 10 .. 13 :
34802: GO 35312
34804: LD_INT 10
34806: DOUBLE
34807: GREATEREQUAL
34808: IFFALSE 34816
34810: LD_INT 13
34812: DOUBLE
34813: LESSEQUAL
34814: IFTRUE 34818
34816: GO 34895
34818: POP
// begin bc_type := b_lab_full ;
34819: LD_ADDR_OWVAR 42
34823: PUSH
34824: LD_INT 8
34826: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34827: LD_ADDR_OWVAR 44
34831: PUSH
34832: LD_INT 10
34834: PUSH
34835: LD_INT 12
34837: PUSH
34838: LD_INT 14
34840: PUSH
34841: LD_INT 13
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: PUSH
34850: LD_VAR 0 2
34854: PUSH
34855: LD_INT 9
34857: MINUS
34858: ARRAY
34859: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34860: LD_ADDR_OWVAR 45
34864: PUSH
34865: LD_INT 11
34867: PUSH
34868: LD_INT 15
34870: PUSH
34871: LD_INT 12
34873: PUSH
34874: LD_INT 15
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: PUSH
34883: LD_VAR 0 2
34887: PUSH
34888: LD_INT 9
34890: MINUS
34891: ARRAY
34892: ST_TO_ADDR
// end ; 14 :
34893: GO 35312
34895: LD_INT 14
34897: DOUBLE
34898: EQUAL
34899: IFTRUE 34903
34901: GO 34914
34903: POP
// bc_type := b_workshop ; 15 :
34904: LD_ADDR_OWVAR 42
34908: PUSH
34909: LD_INT 2
34911: ST_TO_ADDR
34912: GO 35312
34914: LD_INT 15
34916: DOUBLE
34917: EQUAL
34918: IFTRUE 34922
34920: GO 34933
34922: POP
// bc_type := b_factory ; 16 :
34923: LD_ADDR_OWVAR 42
34927: PUSH
34928: LD_INT 3
34930: ST_TO_ADDR
34931: GO 35312
34933: LD_INT 16
34935: DOUBLE
34936: EQUAL
34937: IFTRUE 34941
34939: GO 34952
34941: POP
// bc_type := b_ext_gun ; 17 :
34942: LD_ADDR_OWVAR 42
34946: PUSH
34947: LD_INT 17
34949: ST_TO_ADDR
34950: GO 35312
34952: LD_INT 17
34954: DOUBLE
34955: EQUAL
34956: IFTRUE 34960
34958: GO 34988
34960: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34961: LD_ADDR_OWVAR 42
34965: PUSH
34966: LD_INT 19
34968: PUSH
34969: LD_INT 23
34971: PUSH
34972: LD_INT 19
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: LIST
34979: PUSH
34980: LD_VAR 0 1
34984: ARRAY
34985: ST_TO_ADDR
34986: GO 35312
34988: LD_INT 18
34990: DOUBLE
34991: EQUAL
34992: IFTRUE 34996
34994: GO 35007
34996: POP
// bc_type := b_ext_radar ; 19 :
34997: LD_ADDR_OWVAR 42
35001: PUSH
35002: LD_INT 20
35004: ST_TO_ADDR
35005: GO 35312
35007: LD_INT 19
35009: DOUBLE
35010: EQUAL
35011: IFTRUE 35015
35013: GO 35026
35015: POP
// bc_type := b_ext_radio ; 20 :
35016: LD_ADDR_OWVAR 42
35020: PUSH
35021: LD_INT 22
35023: ST_TO_ADDR
35024: GO 35312
35026: LD_INT 20
35028: DOUBLE
35029: EQUAL
35030: IFTRUE 35034
35032: GO 35045
35034: POP
// bc_type := b_ext_siberium ; 21 :
35035: LD_ADDR_OWVAR 42
35039: PUSH
35040: LD_INT 21
35042: ST_TO_ADDR
35043: GO 35312
35045: LD_INT 21
35047: DOUBLE
35048: EQUAL
35049: IFTRUE 35053
35051: GO 35064
35053: POP
// bc_type := b_ext_computer ; 22 :
35054: LD_ADDR_OWVAR 42
35058: PUSH
35059: LD_INT 24
35061: ST_TO_ADDR
35062: GO 35312
35064: LD_INT 22
35066: DOUBLE
35067: EQUAL
35068: IFTRUE 35072
35070: GO 35083
35072: POP
// bc_type := b_ext_track ; 23 :
35073: LD_ADDR_OWVAR 42
35077: PUSH
35078: LD_INT 16
35080: ST_TO_ADDR
35081: GO 35312
35083: LD_INT 23
35085: DOUBLE
35086: EQUAL
35087: IFTRUE 35091
35089: GO 35102
35091: POP
// bc_type := b_ext_laser ; 24 :
35092: LD_ADDR_OWVAR 42
35096: PUSH
35097: LD_INT 25
35099: ST_TO_ADDR
35100: GO 35312
35102: LD_INT 24
35104: DOUBLE
35105: EQUAL
35106: IFTRUE 35110
35108: GO 35121
35110: POP
// bc_type := b_control_tower ; 25 :
35111: LD_ADDR_OWVAR 42
35115: PUSH
35116: LD_INT 36
35118: ST_TO_ADDR
35119: GO 35312
35121: LD_INT 25
35123: DOUBLE
35124: EQUAL
35125: IFTRUE 35129
35127: GO 35140
35129: POP
// bc_type := b_breastwork ; 26 :
35130: LD_ADDR_OWVAR 42
35134: PUSH
35135: LD_INT 31
35137: ST_TO_ADDR
35138: GO 35312
35140: LD_INT 26
35142: DOUBLE
35143: EQUAL
35144: IFTRUE 35148
35146: GO 35159
35148: POP
// bc_type := b_bunker ; 27 :
35149: LD_ADDR_OWVAR 42
35153: PUSH
35154: LD_INT 32
35156: ST_TO_ADDR
35157: GO 35312
35159: LD_INT 27
35161: DOUBLE
35162: EQUAL
35163: IFTRUE 35167
35165: GO 35178
35167: POP
// bc_type := b_turret ; 28 :
35168: LD_ADDR_OWVAR 42
35172: PUSH
35173: LD_INT 33
35175: ST_TO_ADDR
35176: GO 35312
35178: LD_INT 28
35180: DOUBLE
35181: EQUAL
35182: IFTRUE 35186
35184: GO 35197
35186: POP
// bc_type := b_armoury ; 29 :
35187: LD_ADDR_OWVAR 42
35191: PUSH
35192: LD_INT 4
35194: ST_TO_ADDR
35195: GO 35312
35197: LD_INT 29
35199: DOUBLE
35200: EQUAL
35201: IFTRUE 35205
35203: GO 35216
35205: POP
// bc_type := b_barracks ; 30 :
35206: LD_ADDR_OWVAR 42
35210: PUSH
35211: LD_INT 5
35213: ST_TO_ADDR
35214: GO 35312
35216: LD_INT 30
35218: DOUBLE
35219: EQUAL
35220: IFTRUE 35224
35222: GO 35235
35224: POP
// bc_type := b_solar_power ; 31 :
35225: LD_ADDR_OWVAR 42
35229: PUSH
35230: LD_INT 27
35232: ST_TO_ADDR
35233: GO 35312
35235: LD_INT 31
35237: DOUBLE
35238: EQUAL
35239: IFTRUE 35243
35241: GO 35254
35243: POP
// bc_type := b_oil_power ; 32 :
35244: LD_ADDR_OWVAR 42
35248: PUSH
35249: LD_INT 26
35251: ST_TO_ADDR
35252: GO 35312
35254: LD_INT 32
35256: DOUBLE
35257: EQUAL
35258: IFTRUE 35262
35260: GO 35273
35262: POP
// bc_type := b_siberite_power ; 33 :
35263: LD_ADDR_OWVAR 42
35267: PUSH
35268: LD_INT 28
35270: ST_TO_ADDR
35271: GO 35312
35273: LD_INT 33
35275: DOUBLE
35276: EQUAL
35277: IFTRUE 35281
35279: GO 35292
35281: POP
// bc_type := b_oil_mine ; 34 :
35282: LD_ADDR_OWVAR 42
35286: PUSH
35287: LD_INT 29
35289: ST_TO_ADDR
35290: GO 35312
35292: LD_INT 34
35294: DOUBLE
35295: EQUAL
35296: IFTRUE 35300
35298: GO 35311
35300: POP
// bc_type := b_siberite_mine ; end ;
35301: LD_ADDR_OWVAR 42
35305: PUSH
35306: LD_INT 30
35308: ST_TO_ADDR
35309: GO 35312
35311: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35312: LD_ADDR_VAR 0 8
35316: PUSH
35317: LD_VAR 0 5
35321: PPUSH
35322: LD_VAR 0 6
35326: PPUSH
35327: LD_VAR 0 3
35331: PPUSH
35332: CALL_OW 47
35336: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35337: LD_OWVAR 42
35341: PUSH
35342: LD_INT 32
35344: PUSH
35345: LD_INT 33
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: IN
35352: IFFALSE 35368
// PlaceWeaponTurret ( b , weapon ) ;
35354: LD_VAR 0 8
35358: PPUSH
35359: LD_VAR 0 4
35363: PPUSH
35364: CALL_OW 431
// end ;
35368: LD_VAR 0 7
35372: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35373: LD_INT 0
35375: PPUSH
35376: PPUSH
35377: PPUSH
35378: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35379: LD_ADDR_VAR 0 4
35383: PUSH
35384: LD_INT 22
35386: PUSH
35387: LD_OWVAR 2
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: LD_INT 30
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 30
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: LIST
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PPUSH
35428: CALL_OW 69
35432: ST_TO_ADDR
// if not tmp then
35433: LD_VAR 0 4
35437: NOT
35438: IFFALSE 35442
// exit ;
35440: GO 35501
// for i in tmp do
35442: LD_ADDR_VAR 0 2
35446: PUSH
35447: LD_VAR 0 4
35451: PUSH
35452: FOR_IN
35453: IFFALSE 35499
// for j = 1 to 3 do
35455: LD_ADDR_VAR 0 3
35459: PUSH
35460: DOUBLE
35461: LD_INT 1
35463: DEC
35464: ST_TO_ADDR
35465: LD_INT 3
35467: PUSH
35468: FOR_TO
35469: IFFALSE 35495
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35471: LD_VAR 0 2
35475: PPUSH
35476: CALL_OW 274
35480: PPUSH
35481: LD_VAR 0 3
35485: PPUSH
35486: LD_INT 99999
35488: PPUSH
35489: CALL_OW 277
35493: GO 35468
35495: POP
35496: POP
35497: GO 35452
35499: POP
35500: POP
// end ;
35501: LD_VAR 0 1
35505: RET
// export function hHackSetLevel10 ; var i , j ; begin
35506: LD_INT 0
35508: PPUSH
35509: PPUSH
35510: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35511: LD_ADDR_VAR 0 2
35515: PUSH
35516: LD_INT 21
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PPUSH
35526: CALL_OW 69
35530: PUSH
35531: FOR_IN
35532: IFFALSE 35584
// if IsSelected ( i ) then
35534: LD_VAR 0 2
35538: PPUSH
35539: CALL_OW 306
35543: IFFALSE 35582
// begin for j := 1 to 4 do
35545: LD_ADDR_VAR 0 3
35549: PUSH
35550: DOUBLE
35551: LD_INT 1
35553: DEC
35554: ST_TO_ADDR
35555: LD_INT 4
35557: PUSH
35558: FOR_TO
35559: IFFALSE 35580
// SetSkill ( i , j , 10 ) ;
35561: LD_VAR 0 2
35565: PPUSH
35566: LD_VAR 0 3
35570: PPUSH
35571: LD_INT 10
35573: PPUSH
35574: CALL_OW 237
35578: GO 35558
35580: POP
35581: POP
// end ;
35582: GO 35531
35584: POP
35585: POP
// end ;
35586: LD_VAR 0 1
35590: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35591: LD_INT 0
35593: PPUSH
35594: PPUSH
35595: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35596: LD_ADDR_VAR 0 2
35600: PUSH
35601: LD_INT 22
35603: PUSH
35604: LD_OWVAR 2
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 21
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PPUSH
35627: CALL_OW 69
35631: PUSH
35632: FOR_IN
35633: IFFALSE 35674
// begin for j := 1 to 4 do
35635: LD_ADDR_VAR 0 3
35639: PUSH
35640: DOUBLE
35641: LD_INT 1
35643: DEC
35644: ST_TO_ADDR
35645: LD_INT 4
35647: PUSH
35648: FOR_TO
35649: IFFALSE 35670
// SetSkill ( i , j , 10 ) ;
35651: LD_VAR 0 2
35655: PPUSH
35656: LD_VAR 0 3
35660: PPUSH
35661: LD_INT 10
35663: PPUSH
35664: CALL_OW 237
35668: GO 35648
35670: POP
35671: POP
// end ;
35672: GO 35632
35674: POP
35675: POP
// end ;
35676: LD_VAR 0 1
35680: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35681: LD_INT 0
35683: PPUSH
// uc_side := your_side ;
35684: LD_ADDR_OWVAR 20
35688: PUSH
35689: LD_OWVAR 2
35693: ST_TO_ADDR
// uc_nation := nation ;
35694: LD_ADDR_OWVAR 21
35698: PUSH
35699: LD_VAR 0 1
35703: ST_TO_ADDR
// InitHc ;
35704: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35708: LD_INT 0
35710: PPUSH
35711: LD_VAR 0 2
35715: PPUSH
35716: LD_VAR 0 3
35720: PPUSH
35721: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35725: LD_VAR 0 4
35729: PPUSH
35730: LD_VAR 0 5
35734: PPUSH
35735: CALL_OW 428
35739: PUSH
35740: LD_INT 0
35742: EQUAL
35743: IFFALSE 35767
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35745: CALL_OW 44
35749: PPUSH
35750: LD_VAR 0 4
35754: PPUSH
35755: LD_VAR 0 5
35759: PPUSH
35760: LD_INT 1
35762: PPUSH
35763: CALL_OW 48
// end ;
35767: LD_VAR 0 6
35771: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35772: LD_INT 0
35774: PPUSH
35775: PPUSH
// uc_side := your_side ;
35776: LD_ADDR_OWVAR 20
35780: PUSH
35781: LD_OWVAR 2
35785: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35786: LD_VAR 0 1
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: LD_INT 2
35796: PUSH
35797: LD_INT 3
35799: PUSH
35800: LD_INT 4
35802: PUSH
35803: LD_INT 5
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: IN
35813: IFFALSE 35825
// uc_nation := nation_american else
35815: LD_ADDR_OWVAR 21
35819: PUSH
35820: LD_INT 1
35822: ST_TO_ADDR
35823: GO 35868
// if chassis in [ 11 , 12 , 13 , 14 ] then
35825: LD_VAR 0 1
35829: PUSH
35830: LD_INT 11
35832: PUSH
35833: LD_INT 12
35835: PUSH
35836: LD_INT 13
35838: PUSH
35839: LD_INT 14
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: IN
35848: IFFALSE 35860
// uc_nation := nation_arabian else
35850: LD_ADDR_OWVAR 21
35854: PUSH
35855: LD_INT 2
35857: ST_TO_ADDR
35858: GO 35868
// uc_nation := nation_russian ;
35860: LD_ADDR_OWVAR 21
35864: PUSH
35865: LD_INT 3
35867: ST_TO_ADDR
// vc_chassis := chassis ;
35868: LD_ADDR_OWVAR 37
35872: PUSH
35873: LD_VAR 0 1
35877: ST_TO_ADDR
// vc_engine := engine ;
35878: LD_ADDR_OWVAR 39
35882: PUSH
35883: LD_VAR 0 2
35887: ST_TO_ADDR
// vc_control := control ;
35888: LD_ADDR_OWVAR 38
35892: PUSH
35893: LD_VAR 0 3
35897: ST_TO_ADDR
// vc_weapon := weapon ;
35898: LD_ADDR_OWVAR 40
35902: PUSH
35903: LD_VAR 0 4
35907: ST_TO_ADDR
// un := CreateVehicle ;
35908: LD_ADDR_VAR 0 8
35912: PUSH
35913: CALL_OW 45
35917: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35918: LD_VAR 0 8
35922: PPUSH
35923: LD_INT 0
35925: PPUSH
35926: LD_INT 5
35928: PPUSH
35929: CALL_OW 12
35933: PPUSH
35934: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35938: LD_VAR 0 8
35942: PPUSH
35943: LD_VAR 0 5
35947: PPUSH
35948: LD_VAR 0 6
35952: PPUSH
35953: LD_INT 1
35955: PPUSH
35956: CALL_OW 48
// end ;
35960: LD_VAR 0 7
35964: RET
// export hInvincible ; every 1 do
35965: GO 35967
35967: DISABLE
// hInvincible := [ ] ;
35968: LD_ADDR_EXP 108
35972: PUSH
35973: EMPTY
35974: ST_TO_ADDR
35975: END
// every 10 do var i ;
35976: GO 35978
35978: DISABLE
35979: LD_INT 0
35981: PPUSH
// begin enable ;
35982: ENABLE
// if not hInvincible then
35983: LD_EXP 108
35987: NOT
35988: IFFALSE 35992
// exit ;
35990: GO 36036
// for i in hInvincible do
35992: LD_ADDR_VAR 0 1
35996: PUSH
35997: LD_EXP 108
36001: PUSH
36002: FOR_IN
36003: IFFALSE 36034
// if GetLives ( i ) < 1000 then
36005: LD_VAR 0 1
36009: PPUSH
36010: CALL_OW 256
36014: PUSH
36015: LD_INT 1000
36017: LESS
36018: IFFALSE 36032
// SetLives ( i , 1000 ) ;
36020: LD_VAR 0 1
36024: PPUSH
36025: LD_INT 1000
36027: PPUSH
36028: CALL_OW 234
36032: GO 36002
36034: POP
36035: POP
// end ;
36036: PPOPN 1
36038: END
// export function hHackInvincible ; var i ; begin
36039: LD_INT 0
36041: PPUSH
36042: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36043: LD_ADDR_VAR 0 2
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: LD_INT 21
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 21
36063: PUSH
36064: LD_INT 2
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: PPUSH
36076: CALL_OW 69
36080: PUSH
36081: FOR_IN
36082: IFFALSE 36143
// if IsSelected ( i ) then
36084: LD_VAR 0 2
36088: PPUSH
36089: CALL_OW 306
36093: IFFALSE 36141
// begin if i in hInvincible then
36095: LD_VAR 0 2
36099: PUSH
36100: LD_EXP 108
36104: IN
36105: IFFALSE 36125
// hInvincible := hInvincible diff i else
36107: LD_ADDR_EXP 108
36111: PUSH
36112: LD_EXP 108
36116: PUSH
36117: LD_VAR 0 2
36121: DIFF
36122: ST_TO_ADDR
36123: GO 36141
// hInvincible := hInvincible union i ;
36125: LD_ADDR_EXP 108
36129: PUSH
36130: LD_EXP 108
36134: PUSH
36135: LD_VAR 0 2
36139: UNION
36140: ST_TO_ADDR
// end ;
36141: GO 36081
36143: POP
36144: POP
// end ;
36145: LD_VAR 0 1
36149: RET
// export function hHackInvisible ; var i , j ; begin
36150: LD_INT 0
36152: PPUSH
36153: PPUSH
36154: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36155: LD_ADDR_VAR 0 2
36159: PUSH
36160: LD_INT 21
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PPUSH
36170: CALL_OW 69
36174: PUSH
36175: FOR_IN
36176: IFFALSE 36200
// if IsSelected ( i ) then
36178: LD_VAR 0 2
36182: PPUSH
36183: CALL_OW 306
36187: IFFALSE 36198
// ComForceInvisible ( i ) ;
36189: LD_VAR 0 2
36193: PPUSH
36194: CALL_OW 496
36198: GO 36175
36200: POP
36201: POP
// end ;
36202: LD_VAR 0 1
36206: RET
// export function hHackChangeYourSide ; begin
36207: LD_INT 0
36209: PPUSH
// if your_side = 8 then
36210: LD_OWVAR 2
36214: PUSH
36215: LD_INT 8
36217: EQUAL
36218: IFFALSE 36230
// your_side := 0 else
36220: LD_ADDR_OWVAR 2
36224: PUSH
36225: LD_INT 0
36227: ST_TO_ADDR
36228: GO 36244
// your_side := your_side + 1 ;
36230: LD_ADDR_OWVAR 2
36234: PUSH
36235: LD_OWVAR 2
36239: PUSH
36240: LD_INT 1
36242: PLUS
36243: ST_TO_ADDR
// end ;
36244: LD_VAR 0 1
36248: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36249: LD_INT 0
36251: PPUSH
36252: PPUSH
36253: PPUSH
// for i in all_units do
36254: LD_ADDR_VAR 0 2
36258: PUSH
36259: LD_OWVAR 3
36263: PUSH
36264: FOR_IN
36265: IFFALSE 36343
// if IsSelected ( i ) then
36267: LD_VAR 0 2
36271: PPUSH
36272: CALL_OW 306
36276: IFFALSE 36341
// begin j := GetSide ( i ) ;
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_VAR 0 2
36287: PPUSH
36288: CALL_OW 255
36292: ST_TO_ADDR
// if j = 8 then
36293: LD_VAR 0 3
36297: PUSH
36298: LD_INT 8
36300: EQUAL
36301: IFFALSE 36313
// j := 0 else
36303: LD_ADDR_VAR 0 3
36307: PUSH
36308: LD_INT 0
36310: ST_TO_ADDR
36311: GO 36327
// j := j + 1 ;
36313: LD_ADDR_VAR 0 3
36317: PUSH
36318: LD_VAR 0 3
36322: PUSH
36323: LD_INT 1
36325: PLUS
36326: ST_TO_ADDR
// SetSide ( i , j ) ;
36327: LD_VAR 0 2
36331: PPUSH
36332: LD_VAR 0 3
36336: PPUSH
36337: CALL_OW 235
// end ;
36341: GO 36264
36343: POP
36344: POP
// end ;
36345: LD_VAR 0 1
36349: RET
// export function hHackFog ; begin
36350: LD_INT 0
36352: PPUSH
// FogOff ( true ) ;
36353: LD_INT 1
36355: PPUSH
36356: CALL_OW 344
// end ;
36360: LD_VAR 0 1
36364: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36365: LD_INT 0
36367: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36368: LD_VAR 0 1
36372: PPUSH
36373: LD_VAR 0 2
36377: PPUSH
36378: LD_VAR 0 3
36382: PPUSH
36383: LD_INT 1
36385: PPUSH
36386: LD_INT 1
36388: PPUSH
36389: CALL_OW 483
// CenterOnXY ( x , y ) ;
36393: LD_VAR 0 2
36397: PPUSH
36398: LD_VAR 0 3
36402: PPUSH
36403: CALL_OW 84
// end ;
36407: LD_VAR 0 4
36411: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36412: LD_INT 0
36414: PPUSH
36415: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36416: LD_VAR 0 1
36420: NOT
36421: PUSH
36422: LD_VAR 0 2
36426: PPUSH
36427: LD_VAR 0 3
36431: PPUSH
36432: CALL_OW 488
36436: NOT
36437: OR
36438: PUSH
36439: LD_VAR 0 1
36443: PPUSH
36444: CALL_OW 266
36448: PUSH
36449: LD_INT 3
36451: NONEQUAL
36452: PUSH
36453: LD_VAR 0 1
36457: PPUSH
36458: CALL_OW 247
36462: PUSH
36463: LD_INT 1
36465: EQUAL
36466: NOT
36467: AND
36468: OR
36469: IFFALSE 36473
// exit ;
36471: GO 36622
// if GetType ( factory ) = unit_human then
36473: LD_VAR 0 1
36477: PPUSH
36478: CALL_OW 247
36482: PUSH
36483: LD_INT 1
36485: EQUAL
36486: IFFALSE 36503
// factory := IsInUnit ( factory ) ;
36488: LD_ADDR_VAR 0 1
36492: PUSH
36493: LD_VAR 0 1
36497: PPUSH
36498: CALL_OW 310
36502: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36503: LD_VAR 0 1
36507: PPUSH
36508: CALL_OW 266
36512: PUSH
36513: LD_INT 3
36515: NONEQUAL
36516: IFFALSE 36520
// exit ;
36518: GO 36622
// if HexInfo ( x , y ) = factory then
36520: LD_VAR 0 2
36524: PPUSH
36525: LD_VAR 0 3
36529: PPUSH
36530: CALL_OW 428
36534: PUSH
36535: LD_VAR 0 1
36539: EQUAL
36540: IFFALSE 36567
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
36542: LD_ADDR_EXP 109
36546: PUSH
36547: LD_EXP 109
36551: PPUSH
36552: LD_VAR 0 1
36556: PPUSH
36557: LD_INT 0
36559: PPUSH
36560: CALL_OW 1
36564: ST_TO_ADDR
36565: GO 36618
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
36567: LD_ADDR_EXP 109
36571: PUSH
36572: LD_EXP 109
36576: PPUSH
36577: LD_VAR 0 1
36581: PPUSH
36582: LD_VAR 0 1
36586: PPUSH
36587: CALL_OW 255
36591: PUSH
36592: LD_VAR 0 1
36596: PUSH
36597: LD_VAR 0 2
36601: PUSH
36602: LD_VAR 0 3
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: PPUSH
36613: CALL_OW 1
36617: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36618: CALL 36627 0 0
// end ;
36622: LD_VAR 0 4
36626: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36627: LD_INT 0
36629: PPUSH
36630: PPUSH
36631: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36632: LD_STRING resetFactoryWaypoint();
36634: PPUSH
36635: CALL_OW 559
// if factoryWaypoints then
36639: LD_EXP 109
36643: IFFALSE 36769
// begin list := PrepareArray ( factoryWaypoints ) ;
36645: LD_ADDR_VAR 0 3
36649: PUSH
36650: LD_EXP 109
36654: PPUSH
36655: CALL 84077 0 1
36659: ST_TO_ADDR
// for i := 1 to list do
36660: LD_ADDR_VAR 0 2
36664: PUSH
36665: DOUBLE
36666: LD_INT 1
36668: DEC
36669: ST_TO_ADDR
36670: LD_VAR 0 3
36674: PUSH
36675: FOR_TO
36676: IFFALSE 36767
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36678: LD_STRING setFactoryWaypointXY(
36680: PUSH
36681: LD_VAR 0 3
36685: PUSH
36686: LD_VAR 0 2
36690: ARRAY
36691: PUSH
36692: LD_INT 1
36694: ARRAY
36695: STR
36696: PUSH
36697: LD_STRING ,
36699: STR
36700: PUSH
36701: LD_VAR 0 3
36705: PUSH
36706: LD_VAR 0 2
36710: ARRAY
36711: PUSH
36712: LD_INT 2
36714: ARRAY
36715: STR
36716: PUSH
36717: LD_STRING ,
36719: STR
36720: PUSH
36721: LD_VAR 0 3
36725: PUSH
36726: LD_VAR 0 2
36730: ARRAY
36731: PUSH
36732: LD_INT 3
36734: ARRAY
36735: STR
36736: PUSH
36737: LD_STRING ,
36739: STR
36740: PUSH
36741: LD_VAR 0 3
36745: PUSH
36746: LD_VAR 0 2
36750: ARRAY
36751: PUSH
36752: LD_INT 4
36754: ARRAY
36755: STR
36756: PUSH
36757: LD_STRING )
36759: STR
36760: PPUSH
36761: CALL_OW 559
36765: GO 36675
36767: POP
36768: POP
// end ; end ;
36769: LD_VAR 0 1
36773: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36774: LD_INT 0
36776: PPUSH
// if HexInfo ( x , y ) = warehouse then
36777: LD_VAR 0 2
36781: PPUSH
36782: LD_VAR 0 3
36786: PPUSH
36787: CALL_OW 428
36791: PUSH
36792: LD_VAR 0 1
36796: EQUAL
36797: IFFALSE 36824
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36799: LD_ADDR_EXP 110
36803: PUSH
36804: LD_EXP 110
36808: PPUSH
36809: LD_VAR 0 1
36813: PPUSH
36814: LD_INT 0
36816: PPUSH
36817: CALL_OW 1
36821: ST_TO_ADDR
36822: GO 36875
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36824: LD_ADDR_EXP 110
36828: PUSH
36829: LD_EXP 110
36833: PPUSH
36834: LD_VAR 0 1
36838: PPUSH
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL_OW 255
36848: PUSH
36849: LD_VAR 0 1
36853: PUSH
36854: LD_VAR 0 2
36858: PUSH
36859: LD_VAR 0 3
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: PPUSH
36870: CALL_OW 1
36874: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36875: CALL 36884 0 0
// end ;
36879: LD_VAR 0 4
36883: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36884: LD_INT 0
36886: PPUSH
36887: PPUSH
36888: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36889: LD_STRING resetWarehouseGatheringPoints();
36891: PPUSH
36892: CALL_OW 559
// if warehouseGatheringPoints then
36896: LD_EXP 110
36900: IFFALSE 37026
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36902: LD_ADDR_VAR 0 3
36906: PUSH
36907: LD_EXP 110
36911: PPUSH
36912: CALL 84077 0 1
36916: ST_TO_ADDR
// for i := 1 to list do
36917: LD_ADDR_VAR 0 2
36921: PUSH
36922: DOUBLE
36923: LD_INT 1
36925: DEC
36926: ST_TO_ADDR
36927: LD_VAR 0 3
36931: PUSH
36932: FOR_TO
36933: IFFALSE 37024
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36935: LD_STRING setWarehouseGatheringPointXY(
36937: PUSH
36938: LD_VAR 0 3
36942: PUSH
36943: LD_VAR 0 2
36947: ARRAY
36948: PUSH
36949: LD_INT 1
36951: ARRAY
36952: STR
36953: PUSH
36954: LD_STRING ,
36956: STR
36957: PUSH
36958: LD_VAR 0 3
36962: PUSH
36963: LD_VAR 0 2
36967: ARRAY
36968: PUSH
36969: LD_INT 2
36971: ARRAY
36972: STR
36973: PUSH
36974: LD_STRING ,
36976: STR
36977: PUSH
36978: LD_VAR 0 3
36982: PUSH
36983: LD_VAR 0 2
36987: ARRAY
36988: PUSH
36989: LD_INT 3
36991: ARRAY
36992: STR
36993: PUSH
36994: LD_STRING ,
36996: STR
36997: PUSH
36998: LD_VAR 0 3
37002: PUSH
37003: LD_VAR 0 2
37007: ARRAY
37008: PUSH
37009: LD_INT 4
37011: ARRAY
37012: STR
37013: PUSH
37014: LD_STRING )
37016: STR
37017: PPUSH
37018: CALL_OW 559
37022: GO 36932
37024: POP
37025: POP
// end ; end ;
37026: LD_VAR 0 1
37030: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
37031: LD_EXP 110
37035: IFFALSE 37720
37037: GO 37039
37039: DISABLE
37040: LD_INT 0
37042: PPUSH
37043: PPUSH
37044: PPUSH
37045: PPUSH
37046: PPUSH
37047: PPUSH
37048: PPUSH
37049: PPUSH
37050: PPUSH
// begin enable ;
37051: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
37052: LD_ADDR_VAR 0 3
37056: PUSH
37057: LD_EXP 110
37061: PPUSH
37062: CALL 84077 0 1
37066: ST_TO_ADDR
// if not list then
37067: LD_VAR 0 3
37071: NOT
37072: IFFALSE 37076
// exit ;
37074: GO 37720
// for i := 1 to list do
37076: LD_ADDR_VAR 0 1
37080: PUSH
37081: DOUBLE
37082: LD_INT 1
37084: DEC
37085: ST_TO_ADDR
37086: LD_VAR 0 3
37090: PUSH
37091: FOR_TO
37092: IFFALSE 37718
// begin depot := list [ i ] [ 2 ] ;
37094: LD_ADDR_VAR 0 8
37098: PUSH
37099: LD_VAR 0 3
37103: PUSH
37104: LD_VAR 0 1
37108: ARRAY
37109: PUSH
37110: LD_INT 2
37112: ARRAY
37113: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
37114: LD_ADDR_VAR 0 5
37118: PUSH
37119: LD_VAR 0 3
37123: PUSH
37124: LD_VAR 0 1
37128: ARRAY
37129: PUSH
37130: LD_INT 1
37132: ARRAY
37133: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
37134: LD_VAR 0 8
37138: PPUSH
37139: CALL_OW 301
37143: PUSH
37144: LD_VAR 0 5
37148: PUSH
37149: LD_VAR 0 8
37153: PPUSH
37154: CALL_OW 255
37158: NONEQUAL
37159: OR
37160: IFFALSE 37189
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
37162: LD_ADDR_EXP 110
37166: PUSH
37167: LD_EXP 110
37171: PPUSH
37172: LD_VAR 0 8
37176: PPUSH
37177: LD_INT 0
37179: PPUSH
37180: CALL_OW 1
37184: ST_TO_ADDR
// exit ;
37185: POP
37186: POP
37187: GO 37720
// end ; x := list [ i ] [ 3 ] ;
37189: LD_ADDR_VAR 0 6
37193: PUSH
37194: LD_VAR 0 3
37198: PUSH
37199: LD_VAR 0 1
37203: ARRAY
37204: PUSH
37205: LD_INT 3
37207: ARRAY
37208: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
37209: LD_ADDR_VAR 0 7
37213: PUSH
37214: LD_VAR 0 3
37218: PUSH
37219: LD_VAR 0 1
37223: ARRAY
37224: PUSH
37225: LD_INT 4
37227: ARRAY
37228: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
37229: LD_ADDR_VAR 0 9
37233: PUSH
37234: LD_VAR 0 6
37238: PPUSH
37239: LD_VAR 0 7
37243: PPUSH
37244: LD_INT 16
37246: PPUSH
37247: CALL 82665 0 3
37251: ST_TO_ADDR
// if not cratesNearbyPoint then
37252: LD_VAR 0 9
37256: NOT
37257: IFFALSE 37263
// exit ;
37259: POP
37260: POP
37261: GO 37720
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
37263: LD_ADDR_VAR 0 4
37267: PUSH
37268: LD_INT 22
37270: PUSH
37271: LD_VAR 0 5
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 3
37282: PUSH
37283: LD_INT 60
37285: PUSH
37286: EMPTY
37287: LIST
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 91
37295: PUSH
37296: LD_VAR 0 8
37300: PUSH
37301: LD_INT 6
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: LD_INT 25
37314: PUSH
37315: LD_INT 2
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 25
37324: PUSH
37325: LD_INT 16
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: PPUSH
37343: CALL_OW 69
37347: PUSH
37348: LD_VAR 0 8
37352: PPUSH
37353: CALL_OW 313
37357: PPUSH
37358: LD_INT 3
37360: PUSH
37361: LD_INT 60
37363: PUSH
37364: EMPTY
37365: LIST
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 2
37373: PUSH
37374: LD_INT 25
37376: PUSH
37377: LD_INT 2
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 25
37386: PUSH
37387: LD_INT 16
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PPUSH
37403: CALL_OW 72
37407: UNION
37408: ST_TO_ADDR
// if tmp then
37409: LD_VAR 0 4
37413: IFFALSE 37493
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37415: LD_ADDR_VAR 0 4
37419: PUSH
37420: LD_VAR 0 4
37424: PPUSH
37425: LD_INT 3
37427: PPUSH
37428: CALL 80634 0 2
37432: ST_TO_ADDR
// for j in tmp do
37433: LD_ADDR_VAR 0 2
37437: PUSH
37438: LD_VAR 0 4
37442: PUSH
37443: FOR_IN
37444: IFFALSE 37487
// begin if IsInUnit ( j ) then
37446: LD_VAR 0 2
37450: PPUSH
37451: CALL_OW 310
37455: IFFALSE 37466
// ComExit ( j ) ;
37457: LD_VAR 0 2
37461: PPUSH
37462: CALL 80717 0 1
// AddComCollect ( j , x , y ) ;
37466: LD_VAR 0 2
37470: PPUSH
37471: LD_VAR 0 6
37475: PPUSH
37476: LD_VAR 0 7
37480: PPUSH
37481: CALL_OW 177
// end ;
37485: GO 37443
37487: POP
37488: POP
// exit ;
37489: POP
37490: POP
37491: GO 37720
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37493: LD_ADDR_VAR 0 4
37497: PUSH
37498: LD_INT 22
37500: PUSH
37501: LD_VAR 0 5
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 91
37512: PUSH
37513: LD_VAR 0 8
37517: PUSH
37518: LD_INT 8
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: LD_INT 34
37531: PUSH
37532: LD_INT 12
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 34
37541: PUSH
37542: LD_INT 51
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 34
37551: PUSH
37552: LD_INT 32
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 34
37561: PUSH
37562: LD_INT 89
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: LIST
37580: PPUSH
37581: CALL_OW 69
37585: ST_TO_ADDR
// if tmp then
37586: LD_VAR 0 4
37590: IFFALSE 37716
// begin for j in tmp do
37592: LD_ADDR_VAR 0 2
37596: PUSH
37597: LD_VAR 0 4
37601: PUSH
37602: FOR_IN
37603: IFFALSE 37714
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37605: LD_VAR 0 2
37609: PPUSH
37610: CALL_OW 262
37614: PUSH
37615: LD_INT 3
37617: EQUAL
37618: PUSH
37619: LD_VAR 0 2
37623: PPUSH
37624: CALL_OW 261
37628: PUSH
37629: LD_INT 20
37631: GREATER
37632: OR
37633: PUSH
37634: LD_VAR 0 2
37638: PPUSH
37639: CALL_OW 314
37643: NOT
37644: AND
37645: PUSH
37646: LD_VAR 0 2
37650: PPUSH
37651: CALL_OW 263
37655: PUSH
37656: LD_INT 1
37658: NONEQUAL
37659: PUSH
37660: LD_VAR 0 2
37664: PPUSH
37665: CALL_OW 311
37669: OR
37670: AND
37671: IFFALSE 37712
// begin ComCollect ( j , x , y ) ;
37673: LD_VAR 0 2
37677: PPUSH
37678: LD_VAR 0 6
37682: PPUSH
37683: LD_VAR 0 7
37687: PPUSH
37688: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37692: LD_VAR 0 2
37696: PPUSH
37697: LD_VAR 0 8
37701: PPUSH
37702: CALL_OW 172
// exit ;
37706: POP
37707: POP
37708: POP
37709: POP
37710: GO 37720
// end ;
37712: GO 37602
37714: POP
37715: POP
// end ; end ;
37716: GO 37091
37718: POP
37719: POP
// end ; end_of_file
37720: PPOPN 9
37722: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37723: LD_INT 0
37725: PPUSH
37726: PPUSH
37727: PPUSH
37728: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37729: LD_VAR 0 1
37733: PPUSH
37734: CALL_OW 264
37738: PUSH
37739: LD_INT 91
37741: EQUAL
37742: IFFALSE 37814
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37744: LD_INT 68
37746: PPUSH
37747: LD_VAR 0 1
37751: PPUSH
37752: CALL_OW 255
37756: PPUSH
37757: CALL_OW 321
37761: PUSH
37762: LD_INT 2
37764: EQUAL
37765: IFFALSE 37777
// eff := 70 else
37767: LD_ADDR_VAR 0 4
37771: PUSH
37772: LD_INT 70
37774: ST_TO_ADDR
37775: GO 37785
// eff := 30 ;
37777: LD_ADDR_VAR 0 4
37781: PUSH
37782: LD_INT 30
37784: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37785: LD_VAR 0 1
37789: PPUSH
37790: CALL_OW 250
37794: PPUSH
37795: LD_VAR 0 1
37799: PPUSH
37800: CALL_OW 251
37804: PPUSH
37805: LD_VAR 0 4
37809: PPUSH
37810: CALL_OW 495
// end ; end ;
37814: LD_VAR 0 2
37818: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37819: LD_INT 0
37821: PPUSH
// end ;
37822: LD_VAR 0 4
37826: RET
// export function SOS_Command ( cmd ) ; begin
37827: LD_INT 0
37829: PPUSH
// end ;
37830: LD_VAR 0 2
37834: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37835: LD_INT 0
37837: PPUSH
// end ;
37838: LD_VAR 0 6
37842: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37843: LD_INT 0
37845: PPUSH
37846: PPUSH
// if not vehicle or not factory then
37847: LD_VAR 0 1
37851: NOT
37852: PUSH
37853: LD_VAR 0 2
37857: NOT
37858: OR
37859: IFFALSE 37863
// exit ;
37861: GO 38094
// if factoryWaypoints >= factory then
37863: LD_EXP 109
37867: PUSH
37868: LD_VAR 0 2
37872: GREATEREQUAL
37873: IFFALSE 38094
// if factoryWaypoints [ factory ] then
37875: LD_EXP 109
37879: PUSH
37880: LD_VAR 0 2
37884: ARRAY
37885: IFFALSE 38094
// begin if GetControl ( vehicle ) = control_manual then
37887: LD_VAR 0 1
37891: PPUSH
37892: CALL_OW 263
37896: PUSH
37897: LD_INT 1
37899: EQUAL
37900: IFFALSE 37981
// begin driver := IsDrivenBy ( vehicle ) ;
37902: LD_ADDR_VAR 0 4
37906: PUSH
37907: LD_VAR 0 1
37911: PPUSH
37912: CALL_OW 311
37916: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37917: LD_VAR 0 4
37921: PPUSH
37922: LD_EXP 109
37926: PUSH
37927: LD_VAR 0 2
37931: ARRAY
37932: PUSH
37933: LD_INT 3
37935: ARRAY
37936: PPUSH
37937: LD_EXP 109
37941: PUSH
37942: LD_VAR 0 2
37946: ARRAY
37947: PUSH
37948: LD_INT 4
37950: ARRAY
37951: PPUSH
37952: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37956: LD_VAR 0 4
37960: PPUSH
37961: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37965: LD_VAR 0 4
37969: PPUSH
37970: LD_VAR 0 2
37974: PPUSH
37975: CALL_OW 180
// end else
37979: GO 38094
// if GetControl ( vehicle ) = control_remote then
37981: LD_VAR 0 1
37985: PPUSH
37986: CALL_OW 263
37990: PUSH
37991: LD_INT 2
37993: EQUAL
37994: IFFALSE 38055
// begin wait ( 0 0$2 ) ;
37996: LD_INT 70
37998: PPUSH
37999: CALL_OW 67
// if Connect ( vehicle ) then
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL 50925 0 1
38012: IFFALSE 38053
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
38014: LD_VAR 0 1
38018: PPUSH
38019: LD_EXP 109
38023: PUSH
38024: LD_VAR 0 2
38028: ARRAY
38029: PUSH
38030: LD_INT 3
38032: ARRAY
38033: PPUSH
38034: LD_EXP 109
38038: PUSH
38039: LD_VAR 0 2
38043: ARRAY
38044: PUSH
38045: LD_INT 4
38047: ARRAY
38048: PPUSH
38049: CALL_OW 171
// end else
38053: GO 38094
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
38055: LD_VAR 0 1
38059: PPUSH
38060: LD_EXP 109
38064: PUSH
38065: LD_VAR 0 2
38069: ARRAY
38070: PUSH
38071: LD_INT 3
38073: ARRAY
38074: PPUSH
38075: LD_EXP 109
38079: PUSH
38080: LD_VAR 0 2
38084: ARRAY
38085: PUSH
38086: LD_INT 4
38088: ARRAY
38089: PPUSH
38090: CALL_OW 171
// end ; end ;
38094: LD_VAR 0 3
38098: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
38099: LD_INT 0
38101: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
38102: LD_VAR 0 1
38106: PUSH
38107: LD_INT 250
38109: EQUAL
38110: PUSH
38111: LD_VAR 0 2
38115: PPUSH
38116: CALL_OW 264
38120: PUSH
38121: LD_INT 81
38123: EQUAL
38124: AND
38125: IFFALSE 38146
// MinerPlaceMine ( unit , x , y ) ;
38127: LD_VAR 0 2
38131: PPUSH
38132: LD_VAR 0 4
38136: PPUSH
38137: LD_VAR 0 5
38141: PPUSH
38142: CALL 41136 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
38146: LD_VAR 0 1
38150: PUSH
38151: LD_INT 251
38153: EQUAL
38154: PUSH
38155: LD_VAR 0 2
38159: PPUSH
38160: CALL_OW 264
38164: PUSH
38165: LD_INT 81
38167: EQUAL
38168: AND
38169: IFFALSE 38190
// MinerDetonateMine ( unit , x , y ) ;
38171: LD_VAR 0 2
38175: PPUSH
38176: LD_VAR 0 4
38180: PPUSH
38181: LD_VAR 0 5
38185: PPUSH
38186: CALL 41411 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
38190: LD_VAR 0 1
38194: PUSH
38195: LD_INT 252
38197: EQUAL
38198: PUSH
38199: LD_VAR 0 2
38203: PPUSH
38204: CALL_OW 264
38208: PUSH
38209: LD_INT 81
38211: EQUAL
38212: AND
38213: IFFALSE 38234
// MinerCreateMinefield ( unit , x , y ) ;
38215: LD_VAR 0 2
38219: PPUSH
38220: LD_VAR 0 4
38224: PPUSH
38225: LD_VAR 0 5
38229: PPUSH
38230: CALL 41828 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
38234: LD_VAR 0 1
38238: PUSH
38239: LD_INT 253
38241: EQUAL
38242: PUSH
38243: LD_VAR 0 2
38247: PPUSH
38248: CALL_OW 257
38252: PUSH
38253: LD_INT 5
38255: EQUAL
38256: AND
38257: IFFALSE 38278
// ComBinocular ( unit , x , y ) ;
38259: LD_VAR 0 2
38263: PPUSH
38264: LD_VAR 0 4
38268: PPUSH
38269: LD_VAR 0 5
38273: PPUSH
38274: CALL 42197 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
38278: LD_VAR 0 1
38282: PUSH
38283: LD_INT 254
38285: EQUAL
38286: PUSH
38287: LD_VAR 0 2
38291: PPUSH
38292: CALL_OW 264
38296: PUSH
38297: LD_INT 99
38299: EQUAL
38300: AND
38301: PUSH
38302: LD_VAR 0 3
38306: PPUSH
38307: CALL_OW 263
38311: PUSH
38312: LD_INT 3
38314: EQUAL
38315: AND
38316: IFFALSE 38332
// HackDestroyVehicle ( unit , selectedUnit ) ;
38318: LD_VAR 0 2
38322: PPUSH
38323: LD_VAR 0 3
38327: PPUSH
38328: CALL 40500 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38332: LD_VAR 0 1
38336: PUSH
38337: LD_INT 255
38339: EQUAL
38340: PUSH
38341: LD_VAR 0 2
38345: PPUSH
38346: CALL_OW 264
38350: PUSH
38351: LD_INT 14
38353: PUSH
38354: LD_INT 53
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: IN
38361: AND
38362: PUSH
38363: LD_VAR 0 4
38367: PPUSH
38368: LD_VAR 0 5
38372: PPUSH
38373: CALL_OW 488
38377: AND
38378: IFFALSE 38402
// CutTreeXYR ( unit , x , y , 12 ) ;
38380: LD_VAR 0 2
38384: PPUSH
38385: LD_VAR 0 4
38389: PPUSH
38390: LD_VAR 0 5
38394: PPUSH
38395: LD_INT 12
38397: PPUSH
38398: CALL 38497 0 4
// if cmd = 256 then
38402: LD_VAR 0 1
38406: PUSH
38407: LD_INT 256
38409: EQUAL
38410: IFFALSE 38431
// SetFactoryWaypoint ( unit , x , y ) ;
38412: LD_VAR 0 2
38416: PPUSH
38417: LD_VAR 0 4
38421: PPUSH
38422: LD_VAR 0 5
38426: PPUSH
38427: CALL 36412 0 3
// if cmd = 257 then
38431: LD_VAR 0 1
38435: PUSH
38436: LD_INT 257
38438: EQUAL
38439: IFFALSE 38460
// SetWarehouseGatheringPoint ( unit , x , y ) ;
38441: LD_VAR 0 2
38445: PPUSH
38446: LD_VAR 0 4
38450: PPUSH
38451: LD_VAR 0 5
38455: PPUSH
38456: CALL 36774 0 3
// if cmd = 258 then
38460: LD_VAR 0 1
38464: PUSH
38465: LD_INT 258
38467: EQUAL
38468: IFFALSE 38492
// BurnTreeXYR ( unit , x , y , 8 ) ;
38470: LD_VAR 0 2
38474: PPUSH
38475: LD_VAR 0 4
38479: PPUSH
38480: LD_VAR 0 5
38484: PPUSH
38485: LD_INT 8
38487: PPUSH
38488: CALL 38891 0 4
// end ;
38492: LD_VAR 0 6
38496: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38497: LD_INT 0
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
38508: LD_VAR 0 1
38512: PPUSH
38513: CALL_OW 302
38517: NOT
38518: PUSH
38519: LD_VAR 0 2
38523: PPUSH
38524: LD_VAR 0 3
38528: PPUSH
38529: CALL_OW 488
38533: NOT
38534: OR
38535: PUSH
38536: LD_VAR 0 4
38540: NOT
38541: OR
38542: IFFALSE 38546
// exit ;
38544: GO 38886
// list := [ ] ;
38546: LD_ADDR_VAR 0 13
38550: PUSH
38551: EMPTY
38552: ST_TO_ADDR
// if x - r < 0 then
38553: LD_VAR 0 2
38557: PUSH
38558: LD_VAR 0 4
38562: MINUS
38563: PUSH
38564: LD_INT 0
38566: LESS
38567: IFFALSE 38579
// min_x := 0 else
38569: LD_ADDR_VAR 0 7
38573: PUSH
38574: LD_INT 0
38576: ST_TO_ADDR
38577: GO 38595
// min_x := x - r ;
38579: LD_ADDR_VAR 0 7
38583: PUSH
38584: LD_VAR 0 2
38588: PUSH
38589: LD_VAR 0 4
38593: MINUS
38594: ST_TO_ADDR
// if y - r < 0 then
38595: LD_VAR 0 3
38599: PUSH
38600: LD_VAR 0 4
38604: MINUS
38605: PUSH
38606: LD_INT 0
38608: LESS
38609: IFFALSE 38621
// min_y := 0 else
38611: LD_ADDR_VAR 0 8
38615: PUSH
38616: LD_INT 0
38618: ST_TO_ADDR
38619: GO 38637
// min_y := y - r ;
38621: LD_ADDR_VAR 0 8
38625: PUSH
38626: LD_VAR 0 3
38630: PUSH
38631: LD_VAR 0 4
38635: MINUS
38636: ST_TO_ADDR
// max_x := x + r ;
38637: LD_ADDR_VAR 0 9
38641: PUSH
38642: LD_VAR 0 2
38646: PUSH
38647: LD_VAR 0 4
38651: PLUS
38652: ST_TO_ADDR
// max_y := y + r ;
38653: LD_ADDR_VAR 0 10
38657: PUSH
38658: LD_VAR 0 3
38662: PUSH
38663: LD_VAR 0 4
38667: PLUS
38668: ST_TO_ADDR
// for _x = min_x to max_x do
38669: LD_ADDR_VAR 0 11
38673: PUSH
38674: DOUBLE
38675: LD_VAR 0 7
38679: DEC
38680: ST_TO_ADDR
38681: LD_VAR 0 9
38685: PUSH
38686: FOR_TO
38687: IFFALSE 38804
// for _y = min_y to max_y do
38689: LD_ADDR_VAR 0 12
38693: PUSH
38694: DOUBLE
38695: LD_VAR 0 8
38699: DEC
38700: ST_TO_ADDR
38701: LD_VAR 0 10
38705: PUSH
38706: FOR_TO
38707: IFFALSE 38800
// begin if not ValidHex ( _x , _y ) then
38709: LD_VAR 0 11
38713: PPUSH
38714: LD_VAR 0 12
38718: PPUSH
38719: CALL_OW 488
38723: NOT
38724: IFFALSE 38728
// continue ;
38726: GO 38706
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38728: LD_VAR 0 11
38732: PPUSH
38733: LD_VAR 0 12
38737: PPUSH
38738: CALL_OW 351
38742: PUSH
38743: LD_VAR 0 11
38747: PPUSH
38748: LD_VAR 0 12
38752: PPUSH
38753: CALL_OW 554
38757: AND
38758: IFFALSE 38798
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38760: LD_ADDR_VAR 0 13
38764: PUSH
38765: LD_VAR 0 13
38769: PPUSH
38770: LD_VAR 0 13
38774: PUSH
38775: LD_INT 1
38777: PLUS
38778: PPUSH
38779: LD_VAR 0 11
38783: PUSH
38784: LD_VAR 0 12
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PPUSH
38793: CALL_OW 2
38797: ST_TO_ADDR
// end ;
38798: GO 38706
38800: POP
38801: POP
38802: GO 38686
38804: POP
38805: POP
// if not list then
38806: LD_VAR 0 13
38810: NOT
38811: IFFALSE 38815
// exit ;
38813: GO 38886
// for i in list do
38815: LD_ADDR_VAR 0 6
38819: PUSH
38820: LD_VAR 0 13
38824: PUSH
38825: FOR_IN
38826: IFFALSE 38884
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38828: LD_VAR 0 1
38832: PPUSH
38833: LD_STRING M
38835: PUSH
38836: LD_VAR 0 6
38840: PUSH
38841: LD_INT 1
38843: ARRAY
38844: PUSH
38845: LD_VAR 0 6
38849: PUSH
38850: LD_INT 2
38852: ARRAY
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: PPUSH
38878: CALL_OW 447
38882: GO 38825
38884: POP
38885: POP
// end ;
38886: LD_VAR 0 5
38890: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
38891: LD_INT 0
38893: PPUSH
38894: PPUSH
38895: PPUSH
38896: PPUSH
38897: PPUSH
38898: PPUSH
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38903: LD_VAR 0 1
38907: PPUSH
38908: CALL_OW 302
38912: NOT
38913: PUSH
38914: LD_VAR 0 2
38918: PPUSH
38919: LD_VAR 0 3
38923: PPUSH
38924: CALL_OW 488
38928: NOT
38929: OR
38930: PUSH
38931: LD_VAR 0 4
38935: NOT
38936: OR
38937: IFFALSE 38941
// exit ;
38939: GO 39454
// list := [ ] ;
38941: LD_ADDR_VAR 0 13
38945: PUSH
38946: EMPTY
38947: ST_TO_ADDR
// if x - r < 0 then
38948: LD_VAR 0 2
38952: PUSH
38953: LD_VAR 0 4
38957: MINUS
38958: PUSH
38959: LD_INT 0
38961: LESS
38962: IFFALSE 38974
// min_x := 0 else
38964: LD_ADDR_VAR 0 7
38968: PUSH
38969: LD_INT 0
38971: ST_TO_ADDR
38972: GO 38990
// min_x := x - r ;
38974: LD_ADDR_VAR 0 7
38978: PUSH
38979: LD_VAR 0 2
38983: PUSH
38984: LD_VAR 0 4
38988: MINUS
38989: ST_TO_ADDR
// if y - r < 0 then
38990: LD_VAR 0 3
38994: PUSH
38995: LD_VAR 0 4
38999: MINUS
39000: PUSH
39001: LD_INT 0
39003: LESS
39004: IFFALSE 39016
// min_y := 0 else
39006: LD_ADDR_VAR 0 8
39010: PUSH
39011: LD_INT 0
39013: ST_TO_ADDR
39014: GO 39032
// min_y := y - r ;
39016: LD_ADDR_VAR 0 8
39020: PUSH
39021: LD_VAR 0 3
39025: PUSH
39026: LD_VAR 0 4
39030: MINUS
39031: ST_TO_ADDR
// max_x := x + r ;
39032: LD_ADDR_VAR 0 9
39036: PUSH
39037: LD_VAR 0 2
39041: PUSH
39042: LD_VAR 0 4
39046: PLUS
39047: ST_TO_ADDR
// max_y := y + r ;
39048: LD_ADDR_VAR 0 10
39052: PUSH
39053: LD_VAR 0 3
39057: PUSH
39058: LD_VAR 0 4
39062: PLUS
39063: ST_TO_ADDR
// for _x = min_x to max_x do
39064: LD_ADDR_VAR 0 11
39068: PUSH
39069: DOUBLE
39070: LD_VAR 0 7
39074: DEC
39075: ST_TO_ADDR
39076: LD_VAR 0 9
39080: PUSH
39081: FOR_TO
39082: IFFALSE 39199
// for _y = min_y to max_y do
39084: LD_ADDR_VAR 0 12
39088: PUSH
39089: DOUBLE
39090: LD_VAR 0 8
39094: DEC
39095: ST_TO_ADDR
39096: LD_VAR 0 10
39100: PUSH
39101: FOR_TO
39102: IFFALSE 39195
// begin if not ValidHex ( _x , _y ) then
39104: LD_VAR 0 11
39108: PPUSH
39109: LD_VAR 0 12
39113: PPUSH
39114: CALL_OW 488
39118: NOT
39119: IFFALSE 39123
// continue ;
39121: GO 39101
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39123: LD_VAR 0 11
39127: PPUSH
39128: LD_VAR 0 12
39132: PPUSH
39133: CALL_OW 351
39137: PUSH
39138: LD_VAR 0 11
39142: PPUSH
39143: LD_VAR 0 12
39147: PPUSH
39148: CALL_OW 554
39152: AND
39153: IFFALSE 39193
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39155: LD_ADDR_VAR 0 13
39159: PUSH
39160: LD_VAR 0 13
39164: PPUSH
39165: LD_VAR 0 13
39169: PUSH
39170: LD_INT 1
39172: PLUS
39173: PPUSH
39174: LD_VAR 0 11
39178: PUSH
39179: LD_VAR 0 12
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PPUSH
39188: CALL_OW 2
39192: ST_TO_ADDR
// end ;
39193: GO 39101
39195: POP
39196: POP
39197: GO 39081
39199: POP
39200: POP
// if not list then
39201: LD_VAR 0 13
39205: NOT
39206: IFFALSE 39210
// exit ;
39208: GO 39454
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
39210: LD_ADDR_VAR 0 13
39214: PUSH
39215: LD_VAR 0 1
39219: PPUSH
39220: LD_VAR 0 13
39224: PPUSH
39225: LD_INT 1
39227: PPUSH
39228: LD_INT 1
39230: PPUSH
39231: CALL 48067 0 4
39235: ST_TO_ADDR
// ComStop ( flame ) ;
39236: LD_VAR 0 1
39240: PPUSH
39241: CALL_OW 141
// for i in list do
39245: LD_ADDR_VAR 0 6
39249: PUSH
39250: LD_VAR 0 13
39254: PUSH
39255: FOR_IN
39256: IFFALSE 39287
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
39258: LD_VAR 0 1
39262: PPUSH
39263: LD_VAR 0 6
39267: PUSH
39268: LD_INT 1
39270: ARRAY
39271: PPUSH
39272: LD_VAR 0 6
39276: PUSH
39277: LD_INT 2
39279: ARRAY
39280: PPUSH
39281: CALL_OW 176
39285: GO 39255
39287: POP
39288: POP
// repeat wait ( 0 0$1 ) ;
39289: LD_INT 35
39291: PPUSH
39292: CALL_OW 67
// task := GetTaskList ( flame ) ;
39296: LD_ADDR_VAR 0 14
39300: PUSH
39301: LD_VAR 0 1
39305: PPUSH
39306: CALL_OW 437
39310: ST_TO_ADDR
// if not task then
39311: LD_VAR 0 14
39315: NOT
39316: IFFALSE 39320
// exit ;
39318: GO 39454
// if task [ 1 ] [ 1 ] <> | then
39320: LD_VAR 0 14
39324: PUSH
39325: LD_INT 1
39327: ARRAY
39328: PUSH
39329: LD_INT 1
39331: ARRAY
39332: PUSH
39333: LD_STRING |
39335: NONEQUAL
39336: IFFALSE 39340
// exit ;
39338: GO 39454
// _x := task [ 1 ] [ 2 ] ;
39340: LD_ADDR_VAR 0 11
39344: PUSH
39345: LD_VAR 0 14
39349: PUSH
39350: LD_INT 1
39352: ARRAY
39353: PUSH
39354: LD_INT 2
39356: ARRAY
39357: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
39358: LD_ADDR_VAR 0 12
39362: PUSH
39363: LD_VAR 0 14
39367: PUSH
39368: LD_INT 1
39370: ARRAY
39371: PUSH
39372: LD_INT 3
39374: ARRAY
39375: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
39376: LD_VAR 0 11
39380: PPUSH
39381: LD_VAR 0 12
39385: PPUSH
39386: CALL_OW 351
39390: NOT
39391: PUSH
39392: LD_VAR 0 11
39396: PPUSH
39397: LD_VAR 0 12
39401: PPUSH
39402: CALL_OW 554
39406: NOT
39407: OR
39408: IFFALSE 39442
// begin task := Delete ( task , 1 ) ;
39410: LD_ADDR_VAR 0 14
39414: PUSH
39415: LD_VAR 0 14
39419: PPUSH
39420: LD_INT 1
39422: PPUSH
39423: CALL_OW 3
39427: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
39428: LD_VAR 0 1
39432: PPUSH
39433: LD_VAR 0 14
39437: PPUSH
39438: CALL_OW 446
// end ; until not HasTask ( flame ) ;
39442: LD_VAR 0 1
39446: PPUSH
39447: CALL_OW 314
39451: NOT
39452: IFFALSE 39289
// end ;
39454: LD_VAR 0 5
39458: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
39459: LD_EXP 112
39463: NOT
39464: IFFALSE 39514
39466: GO 39468
39468: DISABLE
// begin initHack := true ;
39469: LD_ADDR_EXP 112
39473: PUSH
39474: LD_INT 1
39476: ST_TO_ADDR
// hackTanks := [ ] ;
39477: LD_ADDR_EXP 113
39481: PUSH
39482: EMPTY
39483: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
39484: LD_ADDR_EXP 114
39488: PUSH
39489: EMPTY
39490: ST_TO_ADDR
// hackLimit := 3 ;
39491: LD_ADDR_EXP 115
39495: PUSH
39496: LD_INT 3
39498: ST_TO_ADDR
// hackDist := 12 ;
39499: LD_ADDR_EXP 116
39503: PUSH
39504: LD_INT 12
39506: ST_TO_ADDR
// hackCounter := [ ] ;
39507: LD_ADDR_EXP 117
39511: PUSH
39512: EMPTY
39513: ST_TO_ADDR
// end ;
39514: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
39515: LD_EXP 112
39519: PUSH
39520: LD_INT 34
39522: PUSH
39523: LD_INT 99
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PPUSH
39530: CALL_OW 69
39534: AND
39535: IFFALSE 39788
39537: GO 39539
39539: DISABLE
39540: LD_INT 0
39542: PPUSH
39543: PPUSH
// begin enable ;
39544: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
39545: LD_ADDR_VAR 0 1
39549: PUSH
39550: LD_INT 34
39552: PUSH
39553: LD_INT 99
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PPUSH
39560: CALL_OW 69
39564: PUSH
39565: FOR_IN
39566: IFFALSE 39786
// begin if not i in hackTanks then
39568: LD_VAR 0 1
39572: PUSH
39573: LD_EXP 113
39577: IN
39578: NOT
39579: IFFALSE 39662
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39581: LD_ADDR_EXP 113
39585: PUSH
39586: LD_EXP 113
39590: PPUSH
39591: LD_EXP 113
39595: PUSH
39596: LD_INT 1
39598: PLUS
39599: PPUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: CALL_OW 1
39609: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39610: LD_ADDR_EXP 114
39614: PUSH
39615: LD_EXP 114
39619: PPUSH
39620: LD_EXP 114
39624: PUSH
39625: LD_INT 1
39627: PLUS
39628: PPUSH
39629: EMPTY
39630: PPUSH
39631: CALL_OW 1
39635: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39636: LD_ADDR_EXP 117
39640: PUSH
39641: LD_EXP 117
39645: PPUSH
39646: LD_EXP 117
39650: PUSH
39651: LD_INT 1
39653: PLUS
39654: PPUSH
39655: EMPTY
39656: PPUSH
39657: CALL_OW 1
39661: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39662: LD_VAR 0 1
39666: PPUSH
39667: CALL_OW 302
39671: NOT
39672: IFFALSE 39685
// begin HackUnlinkAll ( i ) ;
39674: LD_VAR 0 1
39678: PPUSH
39679: CALL 39791 0 1
// continue ;
39683: GO 39565
// end ; HackCheckCapturedStatus ( i ) ;
39685: LD_VAR 0 1
39689: PPUSH
39690: CALL 40234 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39694: LD_ADDR_VAR 0 2
39698: PUSH
39699: LD_INT 81
39701: PUSH
39702: LD_VAR 0 1
39706: PPUSH
39707: CALL_OW 255
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 33
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 91
39728: PUSH
39729: LD_VAR 0 1
39733: PUSH
39734: LD_EXP 116
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 50
39746: PUSH
39747: EMPTY
39748: LIST
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: PPUSH
39756: CALL_OW 69
39760: ST_TO_ADDR
// if not tmp then
39761: LD_VAR 0 2
39765: NOT
39766: IFFALSE 39770
// continue ;
39768: GO 39565
// HackLink ( i , tmp ) ;
39770: LD_VAR 0 1
39774: PPUSH
39775: LD_VAR 0 2
39779: PPUSH
39780: CALL 39927 0 2
// end ;
39784: GO 39565
39786: POP
39787: POP
// end ;
39788: PPOPN 2
39790: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39791: LD_INT 0
39793: PPUSH
39794: PPUSH
39795: PPUSH
// if not hack in hackTanks then
39796: LD_VAR 0 1
39800: PUSH
39801: LD_EXP 113
39805: IN
39806: NOT
39807: IFFALSE 39811
// exit ;
39809: GO 39922
// index := GetElementIndex ( hackTanks , hack ) ;
39811: LD_ADDR_VAR 0 4
39815: PUSH
39816: LD_EXP 113
39820: PPUSH
39821: LD_VAR 0 1
39825: PPUSH
39826: CALL 47364 0 2
39830: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39831: LD_EXP 114
39835: PUSH
39836: LD_VAR 0 4
39840: ARRAY
39841: IFFALSE 39922
// begin for i in hackTanksCaptured [ index ] do
39843: LD_ADDR_VAR 0 3
39847: PUSH
39848: LD_EXP 114
39852: PUSH
39853: LD_VAR 0 4
39857: ARRAY
39858: PUSH
39859: FOR_IN
39860: IFFALSE 39886
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39862: LD_VAR 0 3
39866: PUSH
39867: LD_INT 1
39869: ARRAY
39870: PPUSH
39871: LD_VAR 0 3
39875: PUSH
39876: LD_INT 2
39878: ARRAY
39879: PPUSH
39880: CALL_OW 235
39884: GO 39859
39886: POP
39887: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39888: LD_ADDR_EXP 114
39892: PUSH
39893: LD_EXP 114
39897: PPUSH
39898: LD_VAR 0 4
39902: PPUSH
39903: EMPTY
39904: PPUSH
39905: CALL_OW 1
39909: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39910: LD_VAR 0 1
39914: PPUSH
39915: LD_INT 0
39917: PPUSH
39918: CALL_OW 505
// end ; end ;
39922: LD_VAR 0 2
39926: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39927: LD_INT 0
39929: PPUSH
39930: PPUSH
39931: PPUSH
// if not hack in hackTanks or not vehicles then
39932: LD_VAR 0 1
39936: PUSH
39937: LD_EXP 113
39941: IN
39942: NOT
39943: PUSH
39944: LD_VAR 0 2
39948: NOT
39949: OR
39950: IFFALSE 39954
// exit ;
39952: GO 40229
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39954: LD_ADDR_VAR 0 2
39958: PUSH
39959: LD_VAR 0 1
39963: PPUSH
39964: LD_VAR 0 2
39968: PPUSH
39969: LD_INT 1
39971: PPUSH
39972: LD_INT 1
39974: PPUSH
39975: CALL 48014 0 4
39979: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39980: LD_ADDR_VAR 0 5
39984: PUSH
39985: LD_EXP 113
39989: PPUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: CALL 47364 0 2
39999: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
40000: LD_EXP 114
40004: PUSH
40005: LD_VAR 0 5
40009: ARRAY
40010: PUSH
40011: LD_EXP 115
40015: LESS
40016: IFFALSE 40205
// begin for i := 1 to vehicles do
40018: LD_ADDR_VAR 0 4
40022: PUSH
40023: DOUBLE
40024: LD_INT 1
40026: DEC
40027: ST_TO_ADDR
40028: LD_VAR 0 2
40032: PUSH
40033: FOR_TO
40034: IFFALSE 40203
// begin if hackTanksCaptured [ index ] = hackLimit then
40036: LD_EXP 114
40040: PUSH
40041: LD_VAR 0 5
40045: ARRAY
40046: PUSH
40047: LD_EXP 115
40051: EQUAL
40052: IFFALSE 40056
// break ;
40054: GO 40203
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
40056: LD_ADDR_EXP 117
40060: PUSH
40061: LD_EXP 117
40065: PPUSH
40066: LD_VAR 0 5
40070: PPUSH
40071: LD_EXP 117
40075: PUSH
40076: LD_VAR 0 5
40080: ARRAY
40081: PUSH
40082: LD_INT 1
40084: PLUS
40085: PPUSH
40086: CALL_OW 1
40090: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
40091: LD_ADDR_EXP 114
40095: PUSH
40096: LD_EXP 114
40100: PPUSH
40101: LD_VAR 0 5
40105: PUSH
40106: LD_EXP 114
40110: PUSH
40111: LD_VAR 0 5
40115: ARRAY
40116: PUSH
40117: LD_INT 1
40119: PLUS
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PPUSH
40125: LD_VAR 0 2
40129: PUSH
40130: LD_VAR 0 4
40134: ARRAY
40135: PUSH
40136: LD_VAR 0 2
40140: PUSH
40141: LD_VAR 0 4
40145: ARRAY
40146: PPUSH
40147: CALL_OW 255
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PPUSH
40156: CALL 47579 0 3
40160: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
40161: LD_VAR 0 2
40165: PUSH
40166: LD_VAR 0 4
40170: ARRAY
40171: PPUSH
40172: LD_VAR 0 1
40176: PPUSH
40177: CALL_OW 255
40181: PPUSH
40182: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
40186: LD_VAR 0 2
40190: PUSH
40191: LD_VAR 0 4
40195: ARRAY
40196: PPUSH
40197: CALL_OW 141
// end ;
40201: GO 40033
40203: POP
40204: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40205: LD_VAR 0 1
40209: PPUSH
40210: LD_EXP 114
40214: PUSH
40215: LD_VAR 0 5
40219: ARRAY
40220: PUSH
40221: LD_INT 0
40223: PLUS
40224: PPUSH
40225: CALL_OW 505
// end ;
40229: LD_VAR 0 3
40233: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
40234: LD_INT 0
40236: PPUSH
40237: PPUSH
40238: PPUSH
40239: PPUSH
// if not hack in hackTanks then
40240: LD_VAR 0 1
40244: PUSH
40245: LD_EXP 113
40249: IN
40250: NOT
40251: IFFALSE 40255
// exit ;
40253: GO 40495
// index := GetElementIndex ( hackTanks , hack ) ;
40255: LD_ADDR_VAR 0 4
40259: PUSH
40260: LD_EXP 113
40264: PPUSH
40265: LD_VAR 0 1
40269: PPUSH
40270: CALL 47364 0 2
40274: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
40275: LD_ADDR_VAR 0 3
40279: PUSH
40280: DOUBLE
40281: LD_EXP 114
40285: PUSH
40286: LD_VAR 0 4
40290: ARRAY
40291: INC
40292: ST_TO_ADDR
40293: LD_INT 1
40295: PUSH
40296: FOR_DOWNTO
40297: IFFALSE 40469
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
40299: LD_ADDR_VAR 0 5
40303: PUSH
40304: LD_EXP 114
40308: PUSH
40309: LD_VAR 0 4
40313: ARRAY
40314: PUSH
40315: LD_VAR 0 3
40319: ARRAY
40320: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
40321: LD_VAR 0 5
40325: PUSH
40326: LD_INT 1
40328: ARRAY
40329: PPUSH
40330: CALL_OW 302
40334: NOT
40335: PUSH
40336: LD_VAR 0 5
40340: PUSH
40341: LD_INT 1
40343: ARRAY
40344: PPUSH
40345: CALL_OW 255
40349: PUSH
40350: LD_VAR 0 1
40354: PPUSH
40355: CALL_OW 255
40359: NONEQUAL
40360: OR
40361: IFFALSE 40467
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
40363: LD_VAR 0 5
40367: PUSH
40368: LD_INT 1
40370: ARRAY
40371: PPUSH
40372: CALL_OW 305
40376: PUSH
40377: LD_VAR 0 5
40381: PUSH
40382: LD_INT 1
40384: ARRAY
40385: PPUSH
40386: CALL_OW 255
40390: PUSH
40391: LD_VAR 0 1
40395: PPUSH
40396: CALL_OW 255
40400: EQUAL
40401: AND
40402: IFFALSE 40426
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
40404: LD_VAR 0 5
40408: PUSH
40409: LD_INT 1
40411: ARRAY
40412: PPUSH
40413: LD_VAR 0 5
40417: PUSH
40418: LD_INT 2
40420: ARRAY
40421: PPUSH
40422: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
40426: LD_ADDR_EXP 114
40430: PUSH
40431: LD_EXP 114
40435: PPUSH
40436: LD_VAR 0 4
40440: PPUSH
40441: LD_EXP 114
40445: PUSH
40446: LD_VAR 0 4
40450: ARRAY
40451: PPUSH
40452: LD_VAR 0 3
40456: PPUSH
40457: CALL_OW 3
40461: PPUSH
40462: CALL_OW 1
40466: ST_TO_ADDR
// end ; end ;
40467: GO 40296
40469: POP
40470: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40471: LD_VAR 0 1
40475: PPUSH
40476: LD_EXP 114
40480: PUSH
40481: LD_VAR 0 4
40485: ARRAY
40486: PUSH
40487: LD_INT 0
40489: PLUS
40490: PPUSH
40491: CALL_OW 505
// end ;
40495: LD_VAR 0 2
40499: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
40500: LD_INT 0
40502: PPUSH
40503: PPUSH
40504: PPUSH
40505: PPUSH
// if not hack in hackTanks then
40506: LD_VAR 0 1
40510: PUSH
40511: LD_EXP 113
40515: IN
40516: NOT
40517: IFFALSE 40521
// exit ;
40519: GO 40606
// index := GetElementIndex ( hackTanks , hack ) ;
40521: LD_ADDR_VAR 0 5
40525: PUSH
40526: LD_EXP 113
40530: PPUSH
40531: LD_VAR 0 1
40535: PPUSH
40536: CALL 47364 0 2
40540: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
40541: LD_ADDR_VAR 0 4
40545: PUSH
40546: DOUBLE
40547: LD_INT 1
40549: DEC
40550: ST_TO_ADDR
40551: LD_EXP 114
40555: PUSH
40556: LD_VAR 0 5
40560: ARRAY
40561: PUSH
40562: FOR_TO
40563: IFFALSE 40604
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40565: LD_EXP 114
40569: PUSH
40570: LD_VAR 0 5
40574: ARRAY
40575: PUSH
40576: LD_VAR 0 4
40580: ARRAY
40581: PUSH
40582: LD_INT 1
40584: ARRAY
40585: PUSH
40586: LD_VAR 0 2
40590: EQUAL
40591: IFFALSE 40602
// KillUnit ( vehicle ) ;
40593: LD_VAR 0 2
40597: PPUSH
40598: CALL_OW 66
40602: GO 40562
40604: POP
40605: POP
// end ;
40606: LD_VAR 0 3
40610: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
40611: LD_EXP 118
40615: NOT
40616: IFFALSE 40651
40618: GO 40620
40620: DISABLE
// begin initMiner := true ;
40621: LD_ADDR_EXP 118
40625: PUSH
40626: LD_INT 1
40628: ST_TO_ADDR
// minersList := [ ] ;
40629: LD_ADDR_EXP 119
40633: PUSH
40634: EMPTY
40635: ST_TO_ADDR
// minerMinesList := [ ] ;
40636: LD_ADDR_EXP 120
40640: PUSH
40641: EMPTY
40642: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
40643: LD_ADDR_EXP 121
40647: PUSH
40648: LD_INT 5
40650: ST_TO_ADDR
// end ;
40651: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
40652: LD_EXP 118
40656: PUSH
40657: LD_INT 34
40659: PUSH
40660: LD_INT 81
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PPUSH
40667: CALL_OW 69
40671: AND
40672: IFFALSE 41133
40674: GO 40676
40676: DISABLE
40677: LD_INT 0
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
// begin enable ;
40683: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40684: LD_ADDR_VAR 0 1
40688: PUSH
40689: LD_INT 34
40691: PUSH
40692: LD_INT 81
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PPUSH
40699: CALL_OW 69
40703: PUSH
40704: FOR_IN
40705: IFFALSE 40777
// begin if not i in minersList then
40707: LD_VAR 0 1
40711: PUSH
40712: LD_EXP 119
40716: IN
40717: NOT
40718: IFFALSE 40775
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40720: LD_ADDR_EXP 119
40724: PUSH
40725: LD_EXP 119
40729: PPUSH
40730: LD_EXP 119
40734: PUSH
40735: LD_INT 1
40737: PLUS
40738: PPUSH
40739: LD_VAR 0 1
40743: PPUSH
40744: CALL_OW 1
40748: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40749: LD_ADDR_EXP 120
40753: PUSH
40754: LD_EXP 120
40758: PPUSH
40759: LD_EXP 120
40763: PUSH
40764: LD_INT 1
40766: PLUS
40767: PPUSH
40768: EMPTY
40769: PPUSH
40770: CALL_OW 1
40774: ST_TO_ADDR
// end end ;
40775: GO 40704
40777: POP
40778: POP
// for i := minerMinesList downto 1 do
40779: LD_ADDR_VAR 0 1
40783: PUSH
40784: DOUBLE
40785: LD_EXP 120
40789: INC
40790: ST_TO_ADDR
40791: LD_INT 1
40793: PUSH
40794: FOR_DOWNTO
40795: IFFALSE 41131
// begin if IsLive ( minersList [ i ] ) then
40797: LD_EXP 119
40801: PUSH
40802: LD_VAR 0 1
40806: ARRAY
40807: PPUSH
40808: CALL_OW 300
40812: IFFALSE 40840
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
40814: LD_EXP 119
40818: PUSH
40819: LD_VAR 0 1
40823: ARRAY
40824: PPUSH
40825: LD_EXP 120
40829: PUSH
40830: LD_VAR 0 1
40834: ARRAY
40835: PPUSH
40836: CALL_OW 505
// if not minerMinesList [ i ] then
40840: LD_EXP 120
40844: PUSH
40845: LD_VAR 0 1
40849: ARRAY
40850: NOT
40851: IFFALSE 40855
// continue ;
40853: GO 40794
// for j := minerMinesList [ i ] downto 1 do
40855: LD_ADDR_VAR 0 2
40859: PUSH
40860: DOUBLE
40861: LD_EXP 120
40865: PUSH
40866: LD_VAR 0 1
40870: ARRAY
40871: INC
40872: ST_TO_ADDR
40873: LD_INT 1
40875: PUSH
40876: FOR_DOWNTO
40877: IFFALSE 41127
// begin side := GetSide ( minersList [ i ] ) ;
40879: LD_ADDR_VAR 0 3
40883: PUSH
40884: LD_EXP 119
40888: PUSH
40889: LD_VAR 0 1
40893: ARRAY
40894: PPUSH
40895: CALL_OW 255
40899: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40900: LD_ADDR_VAR 0 4
40904: PUSH
40905: LD_EXP 120
40909: PUSH
40910: LD_VAR 0 1
40914: ARRAY
40915: PUSH
40916: LD_VAR 0 2
40920: ARRAY
40921: PUSH
40922: LD_INT 1
40924: ARRAY
40925: PPUSH
40926: LD_EXP 120
40930: PUSH
40931: LD_VAR 0 1
40935: ARRAY
40936: PUSH
40937: LD_VAR 0 2
40941: ARRAY
40942: PUSH
40943: LD_INT 2
40945: ARRAY
40946: PPUSH
40947: CALL_OW 428
40951: ST_TO_ADDR
// if not tmp then
40952: LD_VAR 0 4
40956: NOT
40957: IFFALSE 40961
// continue ;
40959: GO 40876
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40961: LD_VAR 0 4
40965: PUSH
40966: LD_INT 81
40968: PUSH
40969: LD_VAR 0 3
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PPUSH
40978: CALL_OW 69
40982: IN
40983: PUSH
40984: LD_EXP 120
40988: PUSH
40989: LD_VAR 0 1
40993: ARRAY
40994: PUSH
40995: LD_VAR 0 2
40999: ARRAY
41000: PUSH
41001: LD_INT 1
41003: ARRAY
41004: PPUSH
41005: LD_EXP 120
41009: PUSH
41010: LD_VAR 0 1
41014: ARRAY
41015: PUSH
41016: LD_VAR 0 2
41020: ARRAY
41021: PUSH
41022: LD_INT 2
41024: ARRAY
41025: PPUSH
41026: CALL_OW 458
41030: AND
41031: IFFALSE 41125
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
41033: LD_EXP 120
41037: PUSH
41038: LD_VAR 0 1
41042: ARRAY
41043: PUSH
41044: LD_VAR 0 2
41048: ARRAY
41049: PUSH
41050: LD_INT 1
41052: ARRAY
41053: PPUSH
41054: LD_EXP 120
41058: PUSH
41059: LD_VAR 0 1
41063: ARRAY
41064: PUSH
41065: LD_VAR 0 2
41069: ARRAY
41070: PUSH
41071: LD_INT 2
41073: ARRAY
41074: PPUSH
41075: LD_VAR 0 3
41079: PPUSH
41080: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
41084: LD_ADDR_EXP 120
41088: PUSH
41089: LD_EXP 120
41093: PPUSH
41094: LD_VAR 0 1
41098: PPUSH
41099: LD_EXP 120
41103: PUSH
41104: LD_VAR 0 1
41108: ARRAY
41109: PPUSH
41110: LD_VAR 0 2
41114: PPUSH
41115: CALL_OW 3
41119: PPUSH
41120: CALL_OW 1
41124: ST_TO_ADDR
// end ; end ;
41125: GO 40876
41127: POP
41128: POP
// end ;
41129: GO 40794
41131: POP
41132: POP
// end ;
41133: PPOPN 4
41135: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
41136: LD_INT 0
41138: PPUSH
41139: PPUSH
// result := false ;
41140: LD_ADDR_VAR 0 4
41144: PUSH
41145: LD_INT 0
41147: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
41148: LD_VAR 0 1
41152: PPUSH
41153: CALL_OW 264
41157: PUSH
41158: LD_INT 81
41160: EQUAL
41161: NOT
41162: IFFALSE 41166
// exit ;
41164: GO 41406
// index := GetElementIndex ( minersList , unit ) ;
41166: LD_ADDR_VAR 0 5
41170: PUSH
41171: LD_EXP 119
41175: PPUSH
41176: LD_VAR 0 1
41180: PPUSH
41181: CALL 47364 0 2
41185: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
41186: LD_EXP 120
41190: PUSH
41191: LD_VAR 0 5
41195: ARRAY
41196: PUSH
41197: LD_EXP 121
41201: GREATEREQUAL
41202: IFFALSE 41206
// exit ;
41204: GO 41406
// ComMoveXY ( unit , x , y ) ;
41206: LD_VAR 0 1
41210: PPUSH
41211: LD_VAR 0 2
41215: PPUSH
41216: LD_VAR 0 3
41220: PPUSH
41221: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41225: LD_INT 35
41227: PPUSH
41228: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
41232: LD_VAR 0 1
41236: PPUSH
41237: LD_VAR 0 2
41241: PPUSH
41242: LD_VAR 0 3
41246: PPUSH
41247: CALL 79116 0 3
41251: NOT
41252: PUSH
41253: LD_VAR 0 1
41257: PPUSH
41258: CALL_OW 314
41262: AND
41263: IFFALSE 41267
// exit ;
41265: GO 41406
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
41267: LD_VAR 0 2
41271: PPUSH
41272: LD_VAR 0 3
41276: PPUSH
41277: CALL_OW 428
41281: PUSH
41282: LD_VAR 0 1
41286: EQUAL
41287: PUSH
41288: LD_VAR 0 1
41292: PPUSH
41293: CALL_OW 314
41297: NOT
41298: AND
41299: IFFALSE 41225
// PlaySoundXY ( x , y , PlantMine ) ;
41301: LD_VAR 0 2
41305: PPUSH
41306: LD_VAR 0 3
41310: PPUSH
41311: LD_STRING PlantMine
41313: PPUSH
41314: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
41318: LD_VAR 0 2
41322: PPUSH
41323: LD_VAR 0 3
41327: PPUSH
41328: LD_VAR 0 1
41332: PPUSH
41333: CALL_OW 255
41337: PPUSH
41338: LD_INT 0
41340: PPUSH
41341: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41345: LD_ADDR_EXP 120
41349: PUSH
41350: LD_EXP 120
41354: PPUSH
41355: LD_VAR 0 5
41359: PUSH
41360: LD_EXP 120
41364: PUSH
41365: LD_VAR 0 5
41369: ARRAY
41370: PUSH
41371: LD_INT 1
41373: PLUS
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PPUSH
41379: LD_VAR 0 2
41383: PUSH
41384: LD_VAR 0 3
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PPUSH
41393: CALL 47579 0 3
41397: ST_TO_ADDR
// result := true ;
41398: LD_ADDR_VAR 0 4
41402: PUSH
41403: LD_INT 1
41405: ST_TO_ADDR
// end ;
41406: LD_VAR 0 4
41410: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
41411: LD_INT 0
41413: PPUSH
41414: PPUSH
41415: PPUSH
// if not unit in minersList then
41416: LD_VAR 0 1
41420: PUSH
41421: LD_EXP 119
41425: IN
41426: NOT
41427: IFFALSE 41431
// exit ;
41429: GO 41823
// index := GetElementIndex ( minersList , unit ) ;
41431: LD_ADDR_VAR 0 6
41435: PUSH
41436: LD_EXP 119
41440: PPUSH
41441: LD_VAR 0 1
41445: PPUSH
41446: CALL 47364 0 2
41450: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
41451: LD_ADDR_VAR 0 5
41455: PUSH
41456: DOUBLE
41457: LD_EXP 120
41461: PUSH
41462: LD_VAR 0 6
41466: ARRAY
41467: INC
41468: ST_TO_ADDR
41469: LD_INT 1
41471: PUSH
41472: FOR_DOWNTO
41473: IFFALSE 41634
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
41475: LD_EXP 120
41479: PUSH
41480: LD_VAR 0 6
41484: ARRAY
41485: PUSH
41486: LD_VAR 0 5
41490: ARRAY
41491: PUSH
41492: LD_INT 1
41494: ARRAY
41495: PUSH
41496: LD_VAR 0 2
41500: EQUAL
41501: PUSH
41502: LD_EXP 120
41506: PUSH
41507: LD_VAR 0 6
41511: ARRAY
41512: PUSH
41513: LD_VAR 0 5
41517: ARRAY
41518: PUSH
41519: LD_INT 2
41521: ARRAY
41522: PUSH
41523: LD_VAR 0 3
41527: EQUAL
41528: AND
41529: IFFALSE 41632
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41531: LD_EXP 120
41535: PUSH
41536: LD_VAR 0 6
41540: ARRAY
41541: PUSH
41542: LD_VAR 0 5
41546: ARRAY
41547: PUSH
41548: LD_INT 1
41550: ARRAY
41551: PPUSH
41552: LD_EXP 120
41556: PUSH
41557: LD_VAR 0 6
41561: ARRAY
41562: PUSH
41563: LD_VAR 0 5
41567: ARRAY
41568: PUSH
41569: LD_INT 2
41571: ARRAY
41572: PPUSH
41573: LD_VAR 0 1
41577: PPUSH
41578: CALL_OW 255
41582: PPUSH
41583: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41587: LD_ADDR_EXP 120
41591: PUSH
41592: LD_EXP 120
41596: PPUSH
41597: LD_VAR 0 6
41601: PPUSH
41602: LD_EXP 120
41606: PUSH
41607: LD_VAR 0 6
41611: ARRAY
41612: PPUSH
41613: LD_VAR 0 5
41617: PPUSH
41618: CALL_OW 3
41622: PPUSH
41623: CALL_OW 1
41627: ST_TO_ADDR
// exit ;
41628: POP
41629: POP
41630: GO 41823
// end ; end ;
41632: GO 41472
41634: POP
41635: POP
// for i := minerMinesList [ index ] downto 1 do
41636: LD_ADDR_VAR 0 5
41640: PUSH
41641: DOUBLE
41642: LD_EXP 120
41646: PUSH
41647: LD_VAR 0 6
41651: ARRAY
41652: INC
41653: ST_TO_ADDR
41654: LD_INT 1
41656: PUSH
41657: FOR_DOWNTO
41658: IFFALSE 41821
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41660: LD_EXP 120
41664: PUSH
41665: LD_VAR 0 6
41669: ARRAY
41670: PUSH
41671: LD_VAR 0 5
41675: ARRAY
41676: PUSH
41677: LD_INT 1
41679: ARRAY
41680: PPUSH
41681: LD_EXP 120
41685: PUSH
41686: LD_VAR 0 6
41690: ARRAY
41691: PUSH
41692: LD_VAR 0 5
41696: ARRAY
41697: PUSH
41698: LD_INT 2
41700: ARRAY
41701: PPUSH
41702: LD_VAR 0 2
41706: PPUSH
41707: LD_VAR 0 3
41711: PPUSH
41712: CALL_OW 298
41716: PUSH
41717: LD_INT 6
41719: LESS
41720: IFFALSE 41819
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41722: LD_EXP 120
41726: PUSH
41727: LD_VAR 0 6
41731: ARRAY
41732: PUSH
41733: LD_VAR 0 5
41737: ARRAY
41738: PUSH
41739: LD_INT 1
41741: ARRAY
41742: PPUSH
41743: LD_EXP 120
41747: PUSH
41748: LD_VAR 0 6
41752: ARRAY
41753: PUSH
41754: LD_VAR 0 5
41758: ARRAY
41759: PUSH
41760: LD_INT 2
41762: ARRAY
41763: PPUSH
41764: LD_VAR 0 1
41768: PPUSH
41769: CALL_OW 255
41773: PPUSH
41774: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41778: LD_ADDR_EXP 120
41782: PUSH
41783: LD_EXP 120
41787: PPUSH
41788: LD_VAR 0 6
41792: PPUSH
41793: LD_EXP 120
41797: PUSH
41798: LD_VAR 0 6
41802: ARRAY
41803: PPUSH
41804: LD_VAR 0 5
41808: PPUSH
41809: CALL_OW 3
41813: PPUSH
41814: CALL_OW 1
41818: ST_TO_ADDR
// end ; end ;
41819: GO 41657
41821: POP
41822: POP
// end ;
41823: LD_VAR 0 4
41827: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41828: LD_INT 0
41830: PPUSH
41831: PPUSH
41832: PPUSH
41833: PPUSH
41834: PPUSH
41835: PPUSH
41836: PPUSH
41837: PPUSH
41838: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41839: LD_VAR 0 1
41843: PPUSH
41844: CALL_OW 264
41848: PUSH
41849: LD_INT 81
41851: EQUAL
41852: NOT
41853: PUSH
41854: LD_VAR 0 1
41858: PUSH
41859: LD_EXP 119
41863: IN
41864: NOT
41865: OR
41866: IFFALSE 41870
// exit ;
41868: GO 42192
// index := GetElementIndex ( minersList , unit ) ;
41870: LD_ADDR_VAR 0 6
41874: PUSH
41875: LD_EXP 119
41879: PPUSH
41880: LD_VAR 0 1
41884: PPUSH
41885: CALL 47364 0 2
41889: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41890: LD_ADDR_VAR 0 8
41894: PUSH
41895: LD_EXP 121
41899: PUSH
41900: LD_EXP 120
41904: PUSH
41905: LD_VAR 0 6
41909: ARRAY
41910: MINUS
41911: ST_TO_ADDR
// if not minesFreeAmount then
41912: LD_VAR 0 8
41916: NOT
41917: IFFALSE 41921
// exit ;
41919: GO 42192
// tmp := [ ] ;
41921: LD_ADDR_VAR 0 7
41925: PUSH
41926: EMPTY
41927: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41928: LD_ADDR_VAR 0 5
41932: PUSH
41933: DOUBLE
41934: LD_INT 1
41936: DEC
41937: ST_TO_ADDR
41938: LD_VAR 0 8
41942: PUSH
41943: FOR_TO
41944: IFFALSE 42139
// begin _d := rand ( 0 , 5 ) ;
41946: LD_ADDR_VAR 0 11
41950: PUSH
41951: LD_INT 0
41953: PPUSH
41954: LD_INT 5
41956: PPUSH
41957: CALL_OW 12
41961: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41962: LD_ADDR_VAR 0 12
41966: PUSH
41967: LD_INT 2
41969: PPUSH
41970: LD_INT 6
41972: PPUSH
41973: CALL_OW 12
41977: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41978: LD_ADDR_VAR 0 9
41982: PUSH
41983: LD_VAR 0 2
41987: PPUSH
41988: LD_VAR 0 11
41992: PPUSH
41993: LD_VAR 0 12
41997: PPUSH
41998: CALL_OW 272
42002: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
42003: LD_ADDR_VAR 0 10
42007: PUSH
42008: LD_VAR 0 3
42012: PPUSH
42013: LD_VAR 0 11
42017: PPUSH
42018: LD_VAR 0 12
42022: PPUSH
42023: CALL_OW 273
42027: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
42028: LD_VAR 0 9
42032: PPUSH
42033: LD_VAR 0 10
42037: PPUSH
42038: CALL_OW 488
42042: PUSH
42043: LD_VAR 0 9
42047: PUSH
42048: LD_VAR 0 10
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_VAR 0 7
42061: IN
42062: NOT
42063: AND
42064: PUSH
42065: LD_VAR 0 9
42069: PPUSH
42070: LD_VAR 0 10
42074: PPUSH
42075: CALL_OW 458
42079: NOT
42080: AND
42081: IFFALSE 42123
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
42083: LD_ADDR_VAR 0 7
42087: PUSH
42088: LD_VAR 0 7
42092: PPUSH
42093: LD_VAR 0 7
42097: PUSH
42098: LD_INT 1
42100: PLUS
42101: PPUSH
42102: LD_VAR 0 9
42106: PUSH
42107: LD_VAR 0 10
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PPUSH
42116: CALL_OW 1
42120: ST_TO_ADDR
42121: GO 42137
// i := i - 1 ;
42123: LD_ADDR_VAR 0 5
42127: PUSH
42128: LD_VAR 0 5
42132: PUSH
42133: LD_INT 1
42135: MINUS
42136: ST_TO_ADDR
// end ;
42137: GO 41943
42139: POP
42140: POP
// for i in tmp do
42141: LD_ADDR_VAR 0 5
42145: PUSH
42146: LD_VAR 0 7
42150: PUSH
42151: FOR_IN
42152: IFFALSE 42190
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
42154: LD_VAR 0 1
42158: PPUSH
42159: LD_VAR 0 5
42163: PUSH
42164: LD_INT 1
42166: ARRAY
42167: PPUSH
42168: LD_VAR 0 5
42172: PUSH
42173: LD_INT 2
42175: ARRAY
42176: PPUSH
42177: CALL 41136 0 3
42181: NOT
42182: IFFALSE 42188
// exit ;
42184: POP
42185: POP
42186: GO 42192
42188: GO 42151
42190: POP
42191: POP
// end ;
42192: LD_VAR 0 4
42196: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
42197: LD_INT 0
42199: PPUSH
42200: PPUSH
42201: PPUSH
42202: PPUSH
42203: PPUSH
42204: PPUSH
42205: PPUSH
// if not GetClass ( unit ) = class_sniper then
42206: LD_VAR 0 1
42210: PPUSH
42211: CALL_OW 257
42215: PUSH
42216: LD_INT 5
42218: EQUAL
42219: NOT
42220: IFFALSE 42224
// exit ;
42222: GO 42612
// dist := 8 ;
42224: LD_ADDR_VAR 0 5
42228: PUSH
42229: LD_INT 8
42231: ST_TO_ADDR
// viewRange := 12 ;
42232: LD_ADDR_VAR 0 7
42236: PUSH
42237: LD_INT 12
42239: ST_TO_ADDR
// side := GetSide ( unit ) ;
42240: LD_ADDR_VAR 0 6
42244: PUSH
42245: LD_VAR 0 1
42249: PPUSH
42250: CALL_OW 255
42254: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
42255: LD_INT 61
42257: PPUSH
42258: LD_VAR 0 6
42262: PPUSH
42263: CALL_OW 321
42267: PUSH
42268: LD_INT 2
42270: EQUAL
42271: IFFALSE 42281
// viewRange := 16 ;
42273: LD_ADDR_VAR 0 7
42277: PUSH
42278: LD_INT 16
42280: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
42281: LD_VAR 0 1
42285: PPUSH
42286: LD_VAR 0 2
42290: PPUSH
42291: LD_VAR 0 3
42295: PPUSH
42296: CALL_OW 297
42300: PUSH
42301: LD_VAR 0 5
42305: GREATER
42306: IFFALSE 42385
// begin ComMoveXY ( unit , x , y ) ;
42308: LD_VAR 0 1
42312: PPUSH
42313: LD_VAR 0 2
42317: PPUSH
42318: LD_VAR 0 3
42322: PPUSH
42323: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42327: LD_INT 35
42329: PPUSH
42330: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
42334: LD_VAR 0 1
42338: PPUSH
42339: LD_VAR 0 2
42343: PPUSH
42344: LD_VAR 0 3
42348: PPUSH
42349: CALL 79116 0 3
42353: NOT
42354: IFFALSE 42358
// exit ;
42356: GO 42612
// until GetDistUnitXY ( unit , x , y ) < dist ;
42358: LD_VAR 0 1
42362: PPUSH
42363: LD_VAR 0 2
42367: PPUSH
42368: LD_VAR 0 3
42372: PPUSH
42373: CALL_OW 297
42377: PUSH
42378: LD_VAR 0 5
42382: LESS
42383: IFFALSE 42327
// end ; ComTurnXY ( unit , x , y ) ;
42385: LD_VAR 0 1
42389: PPUSH
42390: LD_VAR 0 2
42394: PPUSH
42395: LD_VAR 0 3
42399: PPUSH
42400: CALL_OW 118
// wait ( 5 ) ;
42404: LD_INT 5
42406: PPUSH
42407: CALL_OW 67
// _d := GetDir ( unit ) ;
42411: LD_ADDR_VAR 0 10
42415: PUSH
42416: LD_VAR 0 1
42420: PPUSH
42421: CALL_OW 254
42425: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
42426: LD_ADDR_VAR 0 8
42430: PUSH
42431: LD_VAR 0 1
42435: PPUSH
42436: CALL_OW 250
42440: PPUSH
42441: LD_VAR 0 10
42445: PPUSH
42446: LD_VAR 0 5
42450: PPUSH
42451: CALL_OW 272
42455: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
42456: LD_ADDR_VAR 0 9
42460: PUSH
42461: LD_VAR 0 1
42465: PPUSH
42466: CALL_OW 251
42470: PPUSH
42471: LD_VAR 0 10
42475: PPUSH
42476: LD_VAR 0 5
42480: PPUSH
42481: CALL_OW 273
42485: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42486: LD_VAR 0 8
42490: PPUSH
42491: LD_VAR 0 9
42495: PPUSH
42496: CALL_OW 488
42500: NOT
42501: IFFALSE 42505
// exit ;
42503: GO 42612
// ComAnimCustom ( unit , 1 ) ;
42505: LD_VAR 0 1
42509: PPUSH
42510: LD_INT 1
42512: PPUSH
42513: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
42517: LD_VAR 0 8
42521: PPUSH
42522: LD_VAR 0 9
42526: PPUSH
42527: LD_VAR 0 6
42531: PPUSH
42532: LD_VAR 0 7
42536: PPUSH
42537: CALL_OW 330
// repeat wait ( 1 ) ;
42541: LD_INT 1
42543: PPUSH
42544: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
42548: LD_VAR 0 1
42552: PPUSH
42553: CALL_OW 316
42557: PUSH
42558: LD_VAR 0 1
42562: PPUSH
42563: CALL_OW 314
42567: OR
42568: PUSH
42569: LD_VAR 0 1
42573: PPUSH
42574: CALL_OW 302
42578: NOT
42579: OR
42580: PUSH
42581: LD_VAR 0 1
42585: PPUSH
42586: CALL_OW 301
42590: OR
42591: IFFALSE 42541
// RemoveSeeing ( _x , _y , side ) ;
42593: LD_VAR 0 8
42597: PPUSH
42598: LD_VAR 0 9
42602: PPUSH
42603: LD_VAR 0 6
42607: PPUSH
42608: CALL_OW 331
// end ; end_of_file
42612: LD_VAR 0 4
42616: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42617: LD_INT 0
42619: PPUSH
42620: PPUSH
// if exist_mode then
42621: LD_VAR 0 2
42625: IFFALSE 42650
// unit := CreateCharacter ( prefix & ident ) else
42627: LD_ADDR_VAR 0 5
42631: PUSH
42632: LD_VAR 0 3
42636: PUSH
42637: LD_VAR 0 1
42641: STR
42642: PPUSH
42643: CALL_OW 34
42647: ST_TO_ADDR
42648: GO 42665
// unit := NewCharacter ( ident ) ;
42650: LD_ADDR_VAR 0 5
42654: PUSH
42655: LD_VAR 0 1
42659: PPUSH
42660: CALL_OW 25
42664: ST_TO_ADDR
// result := unit ;
42665: LD_ADDR_VAR 0 4
42669: PUSH
42670: LD_VAR 0 5
42674: ST_TO_ADDR
// end ;
42675: LD_VAR 0 4
42679: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42680: LD_INT 0
42682: PPUSH
42683: PPUSH
// if not side or not nation then
42684: LD_VAR 0 1
42688: NOT
42689: PUSH
42690: LD_VAR 0 2
42694: NOT
42695: OR
42696: IFFALSE 42700
// exit ;
42698: GO 43468
// case nation of nation_american :
42700: LD_VAR 0 2
42704: PUSH
42705: LD_INT 1
42707: DOUBLE
42708: EQUAL
42709: IFTRUE 42713
42711: GO 42927
42713: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
42714: LD_ADDR_VAR 0 4
42718: PUSH
42719: LD_INT 35
42721: PUSH
42722: LD_INT 45
42724: PUSH
42725: LD_INT 46
42727: PUSH
42728: LD_INT 47
42730: PUSH
42731: LD_INT 82
42733: PUSH
42734: LD_INT 83
42736: PUSH
42737: LD_INT 84
42739: PUSH
42740: LD_INT 85
42742: PUSH
42743: LD_INT 86
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: LD_INT 6
42754: PUSH
42755: LD_INT 15
42757: PUSH
42758: LD_INT 16
42760: PUSH
42761: LD_INT 7
42763: PUSH
42764: LD_INT 12
42766: PUSH
42767: LD_INT 13
42769: PUSH
42770: LD_INT 10
42772: PUSH
42773: LD_INT 14
42775: PUSH
42776: LD_INT 20
42778: PUSH
42779: LD_INT 21
42781: PUSH
42782: LD_INT 22
42784: PUSH
42785: LD_INT 25
42787: PUSH
42788: LD_INT 32
42790: PUSH
42791: LD_INT 27
42793: PUSH
42794: LD_INT 36
42796: PUSH
42797: LD_INT 69
42799: PUSH
42800: LD_INT 39
42802: PUSH
42803: LD_INT 34
42805: PUSH
42806: LD_INT 40
42808: PUSH
42809: LD_INT 48
42811: PUSH
42812: LD_INT 49
42814: PUSH
42815: LD_INT 50
42817: PUSH
42818: LD_INT 51
42820: PUSH
42821: LD_INT 52
42823: PUSH
42824: LD_INT 53
42826: PUSH
42827: LD_INT 54
42829: PUSH
42830: LD_INT 55
42832: PUSH
42833: LD_INT 56
42835: PUSH
42836: LD_INT 57
42838: PUSH
42839: LD_INT 58
42841: PUSH
42842: LD_INT 59
42844: PUSH
42845: LD_INT 60
42847: PUSH
42848: LD_INT 61
42850: PUSH
42851: LD_INT 62
42853: PUSH
42854: LD_INT 80
42856: PUSH
42857: LD_INT 82
42859: PUSH
42860: LD_INT 83
42862: PUSH
42863: LD_INT 84
42865: PUSH
42866: LD_INT 85
42868: PUSH
42869: LD_INT 86
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: ST_TO_ADDR
42925: GO 43392
42927: LD_INT 2
42929: DOUBLE
42930: EQUAL
42931: IFTRUE 42935
42933: GO 43161
42935: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42936: LD_ADDR_VAR 0 4
42940: PUSH
42941: LD_INT 35
42943: PUSH
42944: LD_INT 45
42946: PUSH
42947: LD_INT 46
42949: PUSH
42950: LD_INT 47
42952: PUSH
42953: LD_INT 82
42955: PUSH
42956: LD_INT 83
42958: PUSH
42959: LD_INT 84
42961: PUSH
42962: LD_INT 85
42964: PUSH
42965: LD_INT 87
42967: PUSH
42968: LD_INT 70
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 11
42976: PUSH
42977: LD_INT 3
42979: PUSH
42980: LD_INT 4
42982: PUSH
42983: LD_INT 5
42985: PUSH
42986: LD_INT 6
42988: PUSH
42989: LD_INT 15
42991: PUSH
42992: LD_INT 18
42994: PUSH
42995: LD_INT 7
42997: PUSH
42998: LD_INT 17
43000: PUSH
43001: LD_INT 8
43003: PUSH
43004: LD_INT 20
43006: PUSH
43007: LD_INT 21
43009: PUSH
43010: LD_INT 22
43012: PUSH
43013: LD_INT 72
43015: PUSH
43016: LD_INT 26
43018: PUSH
43019: LD_INT 69
43021: PUSH
43022: LD_INT 39
43024: PUSH
43025: LD_INT 40
43027: PUSH
43028: LD_INT 41
43030: PUSH
43031: LD_INT 42
43033: PUSH
43034: LD_INT 43
43036: PUSH
43037: LD_INT 48
43039: PUSH
43040: LD_INT 49
43042: PUSH
43043: LD_INT 50
43045: PUSH
43046: LD_INT 51
43048: PUSH
43049: LD_INT 52
43051: PUSH
43052: LD_INT 53
43054: PUSH
43055: LD_INT 54
43057: PUSH
43058: LD_INT 55
43060: PUSH
43061: LD_INT 56
43063: PUSH
43064: LD_INT 60
43066: PUSH
43067: LD_INT 61
43069: PUSH
43070: LD_INT 62
43072: PUSH
43073: LD_INT 66
43075: PUSH
43076: LD_INT 67
43078: PUSH
43079: LD_INT 68
43081: PUSH
43082: LD_INT 81
43084: PUSH
43085: LD_INT 82
43087: PUSH
43088: LD_INT 83
43090: PUSH
43091: LD_INT 84
43093: PUSH
43094: LD_INT 85
43096: PUSH
43097: LD_INT 87
43099: PUSH
43100: LD_INT 88
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: ST_TO_ADDR
43159: GO 43392
43161: LD_INT 3
43163: DOUBLE
43164: EQUAL
43165: IFTRUE 43169
43167: GO 43391
43169: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
43170: LD_ADDR_VAR 0 4
43174: PUSH
43175: LD_INT 46
43177: PUSH
43178: LD_INT 47
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: LD_INT 2
43186: PUSH
43187: LD_INT 82
43189: PUSH
43190: LD_INT 83
43192: PUSH
43193: LD_INT 84
43195: PUSH
43196: LD_INT 85
43198: PUSH
43199: LD_INT 86
43201: PUSH
43202: LD_INT 11
43204: PUSH
43205: LD_INT 9
43207: PUSH
43208: LD_INT 20
43210: PUSH
43211: LD_INT 19
43213: PUSH
43214: LD_INT 21
43216: PUSH
43217: LD_INT 24
43219: PUSH
43220: LD_INT 22
43222: PUSH
43223: LD_INT 25
43225: PUSH
43226: LD_INT 28
43228: PUSH
43229: LD_INT 29
43231: PUSH
43232: LD_INT 30
43234: PUSH
43235: LD_INT 31
43237: PUSH
43238: LD_INT 37
43240: PUSH
43241: LD_INT 38
43243: PUSH
43244: LD_INT 32
43246: PUSH
43247: LD_INT 27
43249: PUSH
43250: LD_INT 33
43252: PUSH
43253: LD_INT 69
43255: PUSH
43256: LD_INT 39
43258: PUSH
43259: LD_INT 34
43261: PUSH
43262: LD_INT 40
43264: PUSH
43265: LD_INT 71
43267: PUSH
43268: LD_INT 23
43270: PUSH
43271: LD_INT 44
43273: PUSH
43274: LD_INT 48
43276: PUSH
43277: LD_INT 49
43279: PUSH
43280: LD_INT 50
43282: PUSH
43283: LD_INT 51
43285: PUSH
43286: LD_INT 52
43288: PUSH
43289: LD_INT 53
43291: PUSH
43292: LD_INT 54
43294: PUSH
43295: LD_INT 55
43297: PUSH
43298: LD_INT 56
43300: PUSH
43301: LD_INT 57
43303: PUSH
43304: LD_INT 58
43306: PUSH
43307: LD_INT 59
43309: PUSH
43310: LD_INT 63
43312: PUSH
43313: LD_INT 64
43315: PUSH
43316: LD_INT 65
43318: PUSH
43319: LD_INT 82
43321: PUSH
43322: LD_INT 83
43324: PUSH
43325: LD_INT 84
43327: PUSH
43328: LD_INT 85
43330: PUSH
43331: LD_INT 86
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: ST_TO_ADDR
43389: GO 43392
43391: POP
// if state > - 1 and state < 3 then
43392: LD_VAR 0 3
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: GREATER
43401: PUSH
43402: LD_VAR 0 3
43406: PUSH
43407: LD_INT 3
43409: LESS
43410: AND
43411: IFFALSE 43468
// for i in result do
43413: LD_ADDR_VAR 0 5
43417: PUSH
43418: LD_VAR 0 4
43422: PUSH
43423: FOR_IN
43424: IFFALSE 43466
// if GetTech ( i , side ) <> state then
43426: LD_VAR 0 5
43430: PPUSH
43431: LD_VAR 0 1
43435: PPUSH
43436: CALL_OW 321
43440: PUSH
43441: LD_VAR 0 3
43445: NONEQUAL
43446: IFFALSE 43464
// result := result diff i ;
43448: LD_ADDR_VAR 0 4
43452: PUSH
43453: LD_VAR 0 4
43457: PUSH
43458: LD_VAR 0 5
43462: DIFF
43463: ST_TO_ADDR
43464: GO 43423
43466: POP
43467: POP
// end ;
43468: LD_VAR 0 4
43472: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43473: LD_INT 0
43475: PPUSH
43476: PPUSH
43477: PPUSH
// result := true ;
43478: LD_ADDR_VAR 0 3
43482: PUSH
43483: LD_INT 1
43485: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43486: LD_ADDR_VAR 0 5
43490: PUSH
43491: LD_VAR 0 2
43495: PPUSH
43496: CALL_OW 480
43500: ST_TO_ADDR
// if not tmp then
43501: LD_VAR 0 5
43505: NOT
43506: IFFALSE 43510
// exit ;
43508: GO 43559
// for i in tmp do
43510: LD_ADDR_VAR 0 4
43514: PUSH
43515: LD_VAR 0 5
43519: PUSH
43520: FOR_IN
43521: IFFALSE 43557
// if GetTech ( i , side ) <> state_researched then
43523: LD_VAR 0 4
43527: PPUSH
43528: LD_VAR 0 1
43532: PPUSH
43533: CALL_OW 321
43537: PUSH
43538: LD_INT 2
43540: NONEQUAL
43541: IFFALSE 43555
// begin result := false ;
43543: LD_ADDR_VAR 0 3
43547: PUSH
43548: LD_INT 0
43550: ST_TO_ADDR
// exit ;
43551: POP
43552: POP
43553: GO 43559
// end ;
43555: GO 43520
43557: POP
43558: POP
// end ;
43559: LD_VAR 0 3
43563: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43564: LD_INT 0
43566: PPUSH
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
43575: PPUSH
43576: PPUSH
43577: PPUSH
43578: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43579: LD_VAR 0 1
43583: NOT
43584: PUSH
43585: LD_VAR 0 1
43589: PPUSH
43590: CALL_OW 257
43594: PUSH
43595: LD_INT 9
43597: NONEQUAL
43598: OR
43599: IFFALSE 43603
// exit ;
43601: GO 44176
// side := GetSide ( unit ) ;
43603: LD_ADDR_VAR 0 9
43607: PUSH
43608: LD_VAR 0 1
43612: PPUSH
43613: CALL_OW 255
43617: ST_TO_ADDR
// tech_space := tech_spacanom ;
43618: LD_ADDR_VAR 0 12
43622: PUSH
43623: LD_INT 29
43625: ST_TO_ADDR
// tech_time := tech_taurad ;
43626: LD_ADDR_VAR 0 13
43630: PUSH
43631: LD_INT 28
43633: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43634: LD_ADDR_VAR 0 11
43638: PUSH
43639: LD_VAR 0 1
43643: PPUSH
43644: CALL_OW 310
43648: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43649: LD_VAR 0 11
43653: PPUSH
43654: CALL_OW 247
43658: PUSH
43659: LD_INT 2
43661: EQUAL
43662: IFFALSE 43666
// exit ;
43664: GO 44176
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43666: LD_ADDR_VAR 0 8
43670: PUSH
43671: LD_INT 81
43673: PUSH
43674: LD_VAR 0 9
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 3
43685: PUSH
43686: LD_INT 21
43688: PUSH
43689: LD_INT 3
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PPUSH
43704: CALL_OW 69
43708: ST_TO_ADDR
// if not tmp then
43709: LD_VAR 0 8
43713: NOT
43714: IFFALSE 43718
// exit ;
43716: GO 44176
// if in_unit then
43718: LD_VAR 0 11
43722: IFFALSE 43746
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43724: LD_ADDR_VAR 0 10
43728: PUSH
43729: LD_VAR 0 8
43733: PPUSH
43734: LD_VAR 0 11
43738: PPUSH
43739: CALL_OW 74
43743: ST_TO_ADDR
43744: GO 43766
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43746: LD_ADDR_VAR 0 10
43750: PUSH
43751: LD_VAR 0 8
43755: PPUSH
43756: LD_VAR 0 1
43760: PPUSH
43761: CALL_OW 74
43765: ST_TO_ADDR
// if not enemy then
43766: LD_VAR 0 10
43770: NOT
43771: IFFALSE 43775
// exit ;
43773: GO 44176
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43775: LD_VAR 0 11
43779: PUSH
43780: LD_VAR 0 11
43784: PPUSH
43785: LD_VAR 0 10
43789: PPUSH
43790: CALL_OW 296
43794: PUSH
43795: LD_INT 13
43797: GREATER
43798: AND
43799: PUSH
43800: LD_VAR 0 1
43804: PPUSH
43805: LD_VAR 0 10
43809: PPUSH
43810: CALL_OW 296
43814: PUSH
43815: LD_INT 12
43817: GREATER
43818: OR
43819: IFFALSE 43823
// exit ;
43821: GO 44176
// missile := [ 1 ] ;
43823: LD_ADDR_VAR 0 14
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: EMPTY
43832: LIST
43833: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43834: LD_VAR 0 9
43838: PPUSH
43839: LD_VAR 0 12
43843: PPUSH
43844: CALL_OW 325
43848: IFFALSE 43877
// missile := Replace ( missile , missile + 1 , 2 ) ;
43850: LD_ADDR_VAR 0 14
43854: PUSH
43855: LD_VAR 0 14
43859: PPUSH
43860: LD_VAR 0 14
43864: PUSH
43865: LD_INT 1
43867: PLUS
43868: PPUSH
43869: LD_INT 2
43871: PPUSH
43872: CALL_OW 1
43876: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43877: LD_VAR 0 9
43881: PPUSH
43882: LD_VAR 0 13
43886: PPUSH
43887: CALL_OW 325
43891: PUSH
43892: LD_VAR 0 10
43896: PPUSH
43897: CALL_OW 255
43901: PPUSH
43902: LD_VAR 0 13
43906: PPUSH
43907: CALL_OW 325
43911: NOT
43912: AND
43913: IFFALSE 43942
// missile := Replace ( missile , missile + 1 , 3 ) ;
43915: LD_ADDR_VAR 0 14
43919: PUSH
43920: LD_VAR 0 14
43924: PPUSH
43925: LD_VAR 0 14
43929: PUSH
43930: LD_INT 1
43932: PLUS
43933: PPUSH
43934: LD_INT 3
43936: PPUSH
43937: CALL_OW 1
43941: ST_TO_ADDR
// if missile < 2 then
43942: LD_VAR 0 14
43946: PUSH
43947: LD_INT 2
43949: LESS
43950: IFFALSE 43954
// exit ;
43952: GO 44176
// x := GetX ( enemy ) ;
43954: LD_ADDR_VAR 0 4
43958: PUSH
43959: LD_VAR 0 10
43963: PPUSH
43964: CALL_OW 250
43968: ST_TO_ADDR
// y := GetY ( enemy ) ;
43969: LD_ADDR_VAR 0 5
43973: PUSH
43974: LD_VAR 0 10
43978: PPUSH
43979: CALL_OW 251
43983: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43984: LD_ADDR_VAR 0 6
43988: PUSH
43989: LD_VAR 0 4
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PPUSH
43998: LD_INT 1
44000: PPUSH
44001: CALL_OW 12
44005: PLUS
44006: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44007: LD_ADDR_VAR 0 7
44011: PUSH
44012: LD_VAR 0 5
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PPUSH
44021: LD_INT 1
44023: PPUSH
44024: CALL_OW 12
44028: PLUS
44029: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44030: LD_VAR 0 6
44034: PPUSH
44035: LD_VAR 0 7
44039: PPUSH
44040: CALL_OW 488
44044: NOT
44045: IFFALSE 44067
// begin _x := x ;
44047: LD_ADDR_VAR 0 6
44051: PUSH
44052: LD_VAR 0 4
44056: ST_TO_ADDR
// _y := y ;
44057: LD_ADDR_VAR 0 7
44061: PUSH
44062: LD_VAR 0 5
44066: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44067: LD_ADDR_VAR 0 3
44071: PUSH
44072: LD_INT 1
44074: PPUSH
44075: LD_VAR 0 14
44079: PPUSH
44080: CALL_OW 12
44084: ST_TO_ADDR
// case i of 1 :
44085: LD_VAR 0 3
44089: PUSH
44090: LD_INT 1
44092: DOUBLE
44093: EQUAL
44094: IFTRUE 44098
44096: GO 44115
44098: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44099: LD_VAR 0 1
44103: PPUSH
44104: LD_VAR 0 10
44108: PPUSH
44109: CALL_OW 115
44113: GO 44176
44115: LD_INT 2
44117: DOUBLE
44118: EQUAL
44119: IFTRUE 44123
44121: GO 44145
44123: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44124: LD_VAR 0 1
44128: PPUSH
44129: LD_VAR 0 6
44133: PPUSH
44134: LD_VAR 0 7
44138: PPUSH
44139: CALL_OW 153
44143: GO 44176
44145: LD_INT 3
44147: DOUBLE
44148: EQUAL
44149: IFTRUE 44153
44151: GO 44175
44153: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44154: LD_VAR 0 1
44158: PPUSH
44159: LD_VAR 0 6
44163: PPUSH
44164: LD_VAR 0 7
44168: PPUSH
44169: CALL_OW 154
44173: GO 44176
44175: POP
// end ;
44176: LD_VAR 0 2
44180: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44181: LD_INT 0
44183: PPUSH
44184: PPUSH
44185: PPUSH
44186: PPUSH
44187: PPUSH
44188: PPUSH
// if not unit or not building then
44189: LD_VAR 0 1
44193: NOT
44194: PUSH
44195: LD_VAR 0 2
44199: NOT
44200: OR
44201: IFFALSE 44205
// exit ;
44203: GO 44363
// x := GetX ( building ) ;
44205: LD_ADDR_VAR 0 5
44209: PUSH
44210: LD_VAR 0 2
44214: PPUSH
44215: CALL_OW 250
44219: ST_TO_ADDR
// y := GetY ( building ) ;
44220: LD_ADDR_VAR 0 6
44224: PUSH
44225: LD_VAR 0 2
44229: PPUSH
44230: CALL_OW 251
44234: ST_TO_ADDR
// for i = 0 to 5 do
44235: LD_ADDR_VAR 0 4
44239: PUSH
44240: DOUBLE
44241: LD_INT 0
44243: DEC
44244: ST_TO_ADDR
44245: LD_INT 5
44247: PUSH
44248: FOR_TO
44249: IFFALSE 44361
// begin _x := ShiftX ( x , i , 3 ) ;
44251: LD_ADDR_VAR 0 7
44255: PUSH
44256: LD_VAR 0 5
44260: PPUSH
44261: LD_VAR 0 4
44265: PPUSH
44266: LD_INT 3
44268: PPUSH
44269: CALL_OW 272
44273: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44274: LD_ADDR_VAR 0 8
44278: PUSH
44279: LD_VAR 0 6
44283: PPUSH
44284: LD_VAR 0 4
44288: PPUSH
44289: LD_INT 3
44291: PPUSH
44292: CALL_OW 273
44296: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44297: LD_VAR 0 7
44301: PPUSH
44302: LD_VAR 0 8
44306: PPUSH
44307: CALL_OW 488
44311: NOT
44312: IFFALSE 44316
// continue ;
44314: GO 44248
// if HexInfo ( _x , _y ) = 0 then
44316: LD_VAR 0 7
44320: PPUSH
44321: LD_VAR 0 8
44325: PPUSH
44326: CALL_OW 428
44330: PUSH
44331: LD_INT 0
44333: EQUAL
44334: IFFALSE 44359
// begin ComMoveXY ( unit , _x , _y ) ;
44336: LD_VAR 0 1
44340: PPUSH
44341: LD_VAR 0 7
44345: PPUSH
44346: LD_VAR 0 8
44350: PPUSH
44351: CALL_OW 111
// exit ;
44355: POP
44356: POP
44357: GO 44363
// end ; end ;
44359: GO 44248
44361: POP
44362: POP
// end ;
44363: LD_VAR 0 3
44367: RET
// export function ScanBase ( side , base_area ) ; begin
44368: LD_INT 0
44370: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44371: LD_ADDR_VAR 0 3
44375: PUSH
44376: LD_VAR 0 2
44380: PPUSH
44381: LD_INT 81
44383: PUSH
44384: LD_VAR 0 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PPUSH
44393: CALL_OW 70
44397: ST_TO_ADDR
// end ;
44398: LD_VAR 0 3
44402: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44403: LD_INT 0
44405: PPUSH
44406: PPUSH
44407: PPUSH
44408: PPUSH
// result := false ;
44409: LD_ADDR_VAR 0 2
44413: PUSH
44414: LD_INT 0
44416: ST_TO_ADDR
// side := GetSide ( unit ) ;
44417: LD_ADDR_VAR 0 3
44421: PUSH
44422: LD_VAR 0 1
44426: PPUSH
44427: CALL_OW 255
44431: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44432: LD_ADDR_VAR 0 4
44436: PUSH
44437: LD_VAR 0 1
44441: PPUSH
44442: CALL_OW 248
44446: ST_TO_ADDR
// case nat of 1 :
44447: LD_VAR 0 4
44451: PUSH
44452: LD_INT 1
44454: DOUBLE
44455: EQUAL
44456: IFTRUE 44460
44458: GO 44471
44460: POP
// tech := tech_lassight ; 2 :
44461: LD_ADDR_VAR 0 5
44465: PUSH
44466: LD_INT 12
44468: ST_TO_ADDR
44469: GO 44510
44471: LD_INT 2
44473: DOUBLE
44474: EQUAL
44475: IFTRUE 44479
44477: GO 44490
44479: POP
// tech := tech_mortar ; 3 :
44480: LD_ADDR_VAR 0 5
44484: PUSH
44485: LD_INT 41
44487: ST_TO_ADDR
44488: GO 44510
44490: LD_INT 3
44492: DOUBLE
44493: EQUAL
44494: IFTRUE 44498
44496: GO 44509
44498: POP
// tech := tech_bazooka ; end ;
44499: LD_ADDR_VAR 0 5
44503: PUSH
44504: LD_INT 44
44506: ST_TO_ADDR
44507: GO 44510
44509: POP
// if Researched ( side , tech ) then
44510: LD_VAR 0 3
44514: PPUSH
44515: LD_VAR 0 5
44519: PPUSH
44520: CALL_OW 325
44524: IFFALSE 44551
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44526: LD_ADDR_VAR 0 2
44530: PUSH
44531: LD_INT 5
44533: PUSH
44534: LD_INT 8
44536: PUSH
44537: LD_INT 9
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: LIST
44544: PUSH
44545: LD_VAR 0 4
44549: ARRAY
44550: ST_TO_ADDR
// end ;
44551: LD_VAR 0 2
44555: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44556: LD_INT 0
44558: PPUSH
44559: PPUSH
44560: PPUSH
// if not mines then
44561: LD_VAR 0 2
44565: NOT
44566: IFFALSE 44570
// exit ;
44568: GO 44714
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44570: LD_ADDR_VAR 0 5
44574: PUSH
44575: LD_INT 81
44577: PUSH
44578: LD_VAR 0 1
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 3
44589: PUSH
44590: LD_INT 21
44592: PUSH
44593: LD_INT 3
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PPUSH
44608: CALL_OW 69
44612: ST_TO_ADDR
// for i in mines do
44613: LD_ADDR_VAR 0 4
44617: PUSH
44618: LD_VAR 0 2
44622: PUSH
44623: FOR_IN
44624: IFFALSE 44712
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44626: LD_VAR 0 4
44630: PUSH
44631: LD_INT 1
44633: ARRAY
44634: PPUSH
44635: LD_VAR 0 4
44639: PUSH
44640: LD_INT 2
44642: ARRAY
44643: PPUSH
44644: CALL_OW 458
44648: NOT
44649: IFFALSE 44653
// continue ;
44651: GO 44623
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44653: LD_VAR 0 4
44657: PUSH
44658: LD_INT 1
44660: ARRAY
44661: PPUSH
44662: LD_VAR 0 4
44666: PUSH
44667: LD_INT 2
44669: ARRAY
44670: PPUSH
44671: CALL_OW 428
44675: PUSH
44676: LD_VAR 0 5
44680: IN
44681: IFFALSE 44710
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44683: LD_VAR 0 4
44687: PUSH
44688: LD_INT 1
44690: ARRAY
44691: PPUSH
44692: LD_VAR 0 4
44696: PUSH
44697: LD_INT 2
44699: ARRAY
44700: PPUSH
44701: LD_VAR 0 1
44705: PPUSH
44706: CALL_OW 456
// end ;
44710: GO 44623
44712: POP
44713: POP
// end ;
44714: LD_VAR 0 3
44718: RET
// export function Count ( array ) ; begin
44719: LD_INT 0
44721: PPUSH
// result := array + 0 ;
44722: LD_ADDR_VAR 0 2
44726: PUSH
44727: LD_VAR 0 1
44731: PUSH
44732: LD_INT 0
44734: PLUS
44735: ST_TO_ADDR
// end ;
44736: LD_VAR 0 2
44740: RET
// export function IsEmpty ( building ) ; begin
44741: LD_INT 0
44743: PPUSH
// if not building then
44744: LD_VAR 0 1
44748: NOT
44749: IFFALSE 44753
// exit ;
44751: GO 44796
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44753: LD_ADDR_VAR 0 2
44757: PUSH
44758: LD_VAR 0 1
44762: PUSH
44763: LD_INT 22
44765: PUSH
44766: LD_VAR 0 1
44770: PPUSH
44771: CALL_OW 255
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 58
44782: PUSH
44783: EMPTY
44784: LIST
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PPUSH
44790: CALL_OW 69
44794: IN
44795: ST_TO_ADDR
// end ;
44796: LD_VAR 0 2
44800: RET
// export function IsNotFull ( building ) ; var places ; begin
44801: LD_INT 0
44803: PPUSH
44804: PPUSH
// if not building then
44805: LD_VAR 0 1
44809: NOT
44810: IFFALSE 44814
// exit ;
44812: GO 44842
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44814: LD_ADDR_VAR 0 2
44818: PUSH
44819: LD_VAR 0 1
44823: PPUSH
44824: LD_INT 3
44826: PUSH
44827: LD_INT 62
44829: PUSH
44830: EMPTY
44831: LIST
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PPUSH
44837: CALL_OW 72
44841: ST_TO_ADDR
// end ;
44842: LD_VAR 0 2
44846: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44847: LD_INT 0
44849: PPUSH
44850: PPUSH
44851: PPUSH
44852: PPUSH
// tmp := [ ] ;
44853: LD_ADDR_VAR 0 3
44857: PUSH
44858: EMPTY
44859: ST_TO_ADDR
// list := [ ] ;
44860: LD_ADDR_VAR 0 5
44864: PUSH
44865: EMPTY
44866: ST_TO_ADDR
// for i = 16 to 25 do
44867: LD_ADDR_VAR 0 4
44871: PUSH
44872: DOUBLE
44873: LD_INT 16
44875: DEC
44876: ST_TO_ADDR
44877: LD_INT 25
44879: PUSH
44880: FOR_TO
44881: IFFALSE 44954
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44883: LD_ADDR_VAR 0 3
44887: PUSH
44888: LD_VAR 0 3
44892: PUSH
44893: LD_INT 22
44895: PUSH
44896: LD_VAR 0 1
44900: PPUSH
44901: CALL_OW 255
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 91
44912: PUSH
44913: LD_VAR 0 1
44917: PUSH
44918: LD_INT 6
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 30
44928: PUSH
44929: LD_VAR 0 4
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: LIST
44942: PUSH
44943: EMPTY
44944: LIST
44945: PPUSH
44946: CALL_OW 69
44950: ADD
44951: ST_TO_ADDR
44952: GO 44880
44954: POP
44955: POP
// for i = 1 to tmp do
44956: LD_ADDR_VAR 0 4
44960: PUSH
44961: DOUBLE
44962: LD_INT 1
44964: DEC
44965: ST_TO_ADDR
44966: LD_VAR 0 3
44970: PUSH
44971: FOR_TO
44972: IFFALSE 45060
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44974: LD_ADDR_VAR 0 5
44978: PUSH
44979: LD_VAR 0 5
44983: PUSH
44984: LD_VAR 0 3
44988: PUSH
44989: LD_VAR 0 4
44993: ARRAY
44994: PPUSH
44995: CALL_OW 266
44999: PUSH
45000: LD_VAR 0 3
45004: PUSH
45005: LD_VAR 0 4
45009: ARRAY
45010: PPUSH
45011: CALL_OW 250
45015: PUSH
45016: LD_VAR 0 3
45020: PUSH
45021: LD_VAR 0 4
45025: ARRAY
45026: PPUSH
45027: CALL_OW 251
45031: PUSH
45032: LD_VAR 0 3
45036: PUSH
45037: LD_VAR 0 4
45041: ARRAY
45042: PPUSH
45043: CALL_OW 254
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: PUSH
45054: EMPTY
45055: LIST
45056: ADD
45057: ST_TO_ADDR
45058: GO 44971
45060: POP
45061: POP
// result := list ;
45062: LD_ADDR_VAR 0 2
45066: PUSH
45067: LD_VAR 0 5
45071: ST_TO_ADDR
// end ;
45072: LD_VAR 0 2
45076: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45077: LD_INT 0
45079: PPUSH
45080: PPUSH
45081: PPUSH
45082: PPUSH
45083: PPUSH
45084: PPUSH
45085: PPUSH
// if not factory then
45086: LD_VAR 0 1
45090: NOT
45091: IFFALSE 45095
// exit ;
45093: GO 45688
// if control = control_apeman then
45095: LD_VAR 0 4
45099: PUSH
45100: LD_INT 5
45102: EQUAL
45103: IFFALSE 45212
// begin tmp := UnitsInside ( factory ) ;
45105: LD_ADDR_VAR 0 8
45109: PUSH
45110: LD_VAR 0 1
45114: PPUSH
45115: CALL_OW 313
45119: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45120: LD_VAR 0 8
45124: PPUSH
45125: LD_INT 25
45127: PUSH
45128: LD_INT 12
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PPUSH
45135: CALL_OW 72
45139: NOT
45140: IFFALSE 45150
// control := control_manual ;
45142: LD_ADDR_VAR 0 4
45146: PUSH
45147: LD_INT 1
45149: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45150: LD_ADDR_VAR 0 8
45154: PUSH
45155: LD_VAR 0 1
45159: PPUSH
45160: CALL 44847 0 1
45164: ST_TO_ADDR
// if tmp then
45165: LD_VAR 0 8
45169: IFFALSE 45212
// begin for i in tmp do
45171: LD_ADDR_VAR 0 7
45175: PUSH
45176: LD_VAR 0 8
45180: PUSH
45181: FOR_IN
45182: IFFALSE 45210
// if i [ 1 ] = b_ext_radio then
45184: LD_VAR 0 7
45188: PUSH
45189: LD_INT 1
45191: ARRAY
45192: PUSH
45193: LD_INT 22
45195: EQUAL
45196: IFFALSE 45208
// begin control := control_remote ;
45198: LD_ADDR_VAR 0 4
45202: PUSH
45203: LD_INT 2
45205: ST_TO_ADDR
// break ;
45206: GO 45210
// end ;
45208: GO 45181
45210: POP
45211: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45212: LD_VAR 0 1
45216: PPUSH
45217: LD_VAR 0 2
45221: PPUSH
45222: LD_VAR 0 3
45226: PPUSH
45227: LD_VAR 0 4
45231: PPUSH
45232: LD_VAR 0 5
45236: PPUSH
45237: CALL_OW 448
45241: IFFALSE 45276
// begin result := [ chassis , engine , control , weapon ] ;
45243: LD_ADDR_VAR 0 6
45247: PUSH
45248: LD_VAR 0 2
45252: PUSH
45253: LD_VAR 0 3
45257: PUSH
45258: LD_VAR 0 4
45262: PUSH
45263: LD_VAR 0 5
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: ST_TO_ADDR
// exit ;
45274: GO 45688
// end ; _chassis := AvailableChassisList ( factory ) ;
45276: LD_ADDR_VAR 0 9
45280: PUSH
45281: LD_VAR 0 1
45285: PPUSH
45286: CALL_OW 475
45290: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45291: LD_ADDR_VAR 0 11
45295: PUSH
45296: LD_VAR 0 1
45300: PPUSH
45301: CALL_OW 476
45305: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45306: LD_ADDR_VAR 0 12
45310: PUSH
45311: LD_VAR 0 1
45315: PPUSH
45316: CALL_OW 477
45320: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45321: LD_ADDR_VAR 0 10
45325: PUSH
45326: LD_VAR 0 1
45330: PPUSH
45331: CALL_OW 478
45335: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45336: LD_VAR 0 9
45340: NOT
45341: PUSH
45342: LD_VAR 0 11
45346: NOT
45347: OR
45348: PUSH
45349: LD_VAR 0 12
45353: NOT
45354: OR
45355: PUSH
45356: LD_VAR 0 10
45360: NOT
45361: OR
45362: IFFALSE 45397
// begin result := [ chassis , engine , control , weapon ] ;
45364: LD_ADDR_VAR 0 6
45368: PUSH
45369: LD_VAR 0 2
45373: PUSH
45374: LD_VAR 0 3
45378: PUSH
45379: LD_VAR 0 4
45383: PUSH
45384: LD_VAR 0 5
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: ST_TO_ADDR
// exit ;
45395: GO 45688
// end ; if not chassis in _chassis then
45397: LD_VAR 0 2
45401: PUSH
45402: LD_VAR 0 9
45406: IN
45407: NOT
45408: IFFALSE 45434
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45410: LD_ADDR_VAR 0 2
45414: PUSH
45415: LD_VAR 0 9
45419: PUSH
45420: LD_INT 1
45422: PPUSH
45423: LD_VAR 0 9
45427: PPUSH
45428: CALL_OW 12
45432: ARRAY
45433: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45434: LD_VAR 0 2
45438: PPUSH
45439: LD_VAR 0 3
45443: PPUSH
45444: CALL 45693 0 2
45448: NOT
45449: IFFALSE 45508
// repeat engine := _engine [ 1 ] ;
45451: LD_ADDR_VAR 0 3
45455: PUSH
45456: LD_VAR 0 11
45460: PUSH
45461: LD_INT 1
45463: ARRAY
45464: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45465: LD_ADDR_VAR 0 11
45469: PUSH
45470: LD_VAR 0 11
45474: PPUSH
45475: LD_INT 1
45477: PPUSH
45478: CALL_OW 3
45482: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45483: LD_VAR 0 2
45487: PPUSH
45488: LD_VAR 0 3
45492: PPUSH
45493: CALL 45693 0 2
45497: PUSH
45498: LD_VAR 0 11
45502: PUSH
45503: EMPTY
45504: EQUAL
45505: OR
45506: IFFALSE 45451
// if not control in _control then
45508: LD_VAR 0 4
45512: PUSH
45513: LD_VAR 0 12
45517: IN
45518: NOT
45519: IFFALSE 45545
// control := _control [ rand ( 1 , _control ) ] ;
45521: LD_ADDR_VAR 0 4
45525: PUSH
45526: LD_VAR 0 12
45530: PUSH
45531: LD_INT 1
45533: PPUSH
45534: LD_VAR 0 12
45538: PPUSH
45539: CALL_OW 12
45543: ARRAY
45544: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45545: LD_VAR 0 2
45549: PPUSH
45550: LD_VAR 0 5
45554: PPUSH
45555: CALL 45913 0 2
45559: NOT
45560: IFFALSE 45619
// repeat weapon := _weapon [ 1 ] ;
45562: LD_ADDR_VAR 0 5
45566: PUSH
45567: LD_VAR 0 10
45571: PUSH
45572: LD_INT 1
45574: ARRAY
45575: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45576: LD_ADDR_VAR 0 10
45580: PUSH
45581: LD_VAR 0 10
45585: PPUSH
45586: LD_INT 1
45588: PPUSH
45589: CALL_OW 3
45593: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45594: LD_VAR 0 2
45598: PPUSH
45599: LD_VAR 0 5
45603: PPUSH
45604: CALL 45913 0 2
45608: PUSH
45609: LD_VAR 0 10
45613: PUSH
45614: EMPTY
45615: EQUAL
45616: OR
45617: IFFALSE 45562
// result := [ ] ;
45619: LD_ADDR_VAR 0 6
45623: PUSH
45624: EMPTY
45625: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45626: LD_VAR 0 1
45630: PPUSH
45631: LD_VAR 0 2
45635: PPUSH
45636: LD_VAR 0 3
45640: PPUSH
45641: LD_VAR 0 4
45645: PPUSH
45646: LD_VAR 0 5
45650: PPUSH
45651: CALL_OW 448
45655: IFFALSE 45688
// result := [ chassis , engine , control , weapon ] ;
45657: LD_ADDR_VAR 0 6
45661: PUSH
45662: LD_VAR 0 2
45666: PUSH
45667: LD_VAR 0 3
45671: PUSH
45672: LD_VAR 0 4
45676: PUSH
45677: LD_VAR 0 5
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: ST_TO_ADDR
// end ;
45688: LD_VAR 0 6
45692: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45693: LD_INT 0
45695: PPUSH
// if not chassis or not engine then
45696: LD_VAR 0 1
45700: NOT
45701: PUSH
45702: LD_VAR 0 2
45706: NOT
45707: OR
45708: IFFALSE 45712
// exit ;
45710: GO 45908
// case engine of engine_solar :
45712: LD_VAR 0 2
45716: PUSH
45717: LD_INT 2
45719: DOUBLE
45720: EQUAL
45721: IFTRUE 45725
45723: GO 45763
45725: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45726: LD_ADDR_VAR 0 3
45730: PUSH
45731: LD_INT 11
45733: PUSH
45734: LD_INT 12
45736: PUSH
45737: LD_INT 13
45739: PUSH
45740: LD_INT 14
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: LD_INT 2
45748: PUSH
45749: LD_INT 3
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: ST_TO_ADDR
45761: GO 45892
45763: LD_INT 1
45765: DOUBLE
45766: EQUAL
45767: IFTRUE 45771
45769: GO 45833
45771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45772: LD_ADDR_VAR 0 3
45776: PUSH
45777: LD_INT 11
45779: PUSH
45780: LD_INT 12
45782: PUSH
45783: LD_INT 13
45785: PUSH
45786: LD_INT 14
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: LD_INT 3
45797: PUSH
45798: LD_INT 4
45800: PUSH
45801: LD_INT 5
45803: PUSH
45804: LD_INT 21
45806: PUSH
45807: LD_INT 23
45809: PUSH
45810: LD_INT 22
45812: PUSH
45813: LD_INT 24
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: ST_TO_ADDR
45831: GO 45892
45833: LD_INT 3
45835: DOUBLE
45836: EQUAL
45837: IFTRUE 45841
45839: GO 45891
45841: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45842: LD_ADDR_VAR 0 3
45846: PUSH
45847: LD_INT 13
45849: PUSH
45850: LD_INT 14
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 3
45858: PUSH
45859: LD_INT 4
45861: PUSH
45862: LD_INT 5
45864: PUSH
45865: LD_INT 21
45867: PUSH
45868: LD_INT 22
45870: PUSH
45871: LD_INT 23
45873: PUSH
45874: LD_INT 24
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: ST_TO_ADDR
45889: GO 45892
45891: POP
// result := ( chassis in result ) ;
45892: LD_ADDR_VAR 0 3
45896: PUSH
45897: LD_VAR 0 1
45901: PUSH
45902: LD_VAR 0 3
45906: IN
45907: ST_TO_ADDR
// end ;
45908: LD_VAR 0 3
45912: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45913: LD_INT 0
45915: PPUSH
// if not chassis or not weapon then
45916: LD_VAR 0 1
45920: NOT
45921: PUSH
45922: LD_VAR 0 2
45926: NOT
45927: OR
45928: IFFALSE 45932
// exit ;
45930: GO 46992
// case weapon of us_machine_gun :
45932: LD_VAR 0 2
45936: PUSH
45937: LD_INT 2
45939: DOUBLE
45940: EQUAL
45941: IFTRUE 45945
45943: GO 45975
45945: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45946: LD_ADDR_VAR 0 3
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: LD_INT 3
45959: PUSH
45960: LD_INT 4
45962: PUSH
45963: LD_INT 5
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: ST_TO_ADDR
45973: GO 46976
45975: LD_INT 3
45977: DOUBLE
45978: EQUAL
45979: IFTRUE 45983
45981: GO 46013
45983: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45984: LD_ADDR_VAR 0 3
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 3
45997: PUSH
45998: LD_INT 4
46000: PUSH
46001: LD_INT 5
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: ST_TO_ADDR
46011: GO 46976
46013: LD_INT 11
46015: DOUBLE
46016: EQUAL
46017: IFTRUE 46021
46019: GO 46051
46021: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46022: LD_ADDR_VAR 0 3
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: LD_INT 3
46035: PUSH
46036: LD_INT 4
46038: PUSH
46039: LD_INT 5
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: ST_TO_ADDR
46049: GO 46976
46051: LD_INT 4
46053: DOUBLE
46054: EQUAL
46055: IFTRUE 46059
46057: GO 46085
46059: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46060: LD_ADDR_VAR 0 3
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: LD_INT 3
46070: PUSH
46071: LD_INT 4
46073: PUSH
46074: LD_INT 5
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: ST_TO_ADDR
46083: GO 46976
46085: LD_INT 5
46087: DOUBLE
46088: EQUAL
46089: IFTRUE 46093
46091: GO 46119
46093: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46094: LD_ADDR_VAR 0 3
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: LD_INT 4
46107: PUSH
46108: LD_INT 5
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: ST_TO_ADDR
46117: GO 46976
46119: LD_INT 9
46121: DOUBLE
46122: EQUAL
46123: IFTRUE 46127
46125: GO 46153
46127: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46128: LD_ADDR_VAR 0 3
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: LD_INT 3
46138: PUSH
46139: LD_INT 4
46141: PUSH
46142: LD_INT 5
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: ST_TO_ADDR
46151: GO 46976
46153: LD_INT 7
46155: DOUBLE
46156: EQUAL
46157: IFTRUE 46161
46159: GO 46187
46161: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46162: LD_ADDR_VAR 0 3
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 3
46172: PUSH
46173: LD_INT 4
46175: PUSH
46176: LD_INT 5
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: ST_TO_ADDR
46185: GO 46976
46187: LD_INT 12
46189: DOUBLE
46190: EQUAL
46191: IFTRUE 46195
46193: GO 46221
46195: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46196: LD_ADDR_VAR 0 3
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: LD_INT 3
46206: PUSH
46207: LD_INT 4
46209: PUSH
46210: LD_INT 5
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: ST_TO_ADDR
46219: GO 46976
46221: LD_INT 13
46223: DOUBLE
46224: EQUAL
46225: IFTRUE 46229
46227: GO 46255
46229: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46230: LD_ADDR_VAR 0 3
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 3
46240: PUSH
46241: LD_INT 4
46243: PUSH
46244: LD_INT 5
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: ST_TO_ADDR
46253: GO 46976
46255: LD_INT 14
46257: DOUBLE
46258: EQUAL
46259: IFTRUE 46263
46261: GO 46281
46263: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46264: LD_ADDR_VAR 0 3
46268: PUSH
46269: LD_INT 4
46271: PUSH
46272: LD_INT 5
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: ST_TO_ADDR
46279: GO 46976
46281: LD_INT 6
46283: DOUBLE
46284: EQUAL
46285: IFTRUE 46289
46287: GO 46307
46289: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46290: LD_ADDR_VAR 0 3
46294: PUSH
46295: LD_INT 4
46297: PUSH
46298: LD_INT 5
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: ST_TO_ADDR
46305: GO 46976
46307: LD_INT 10
46309: DOUBLE
46310: EQUAL
46311: IFTRUE 46315
46313: GO 46333
46315: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46316: LD_ADDR_VAR 0 3
46320: PUSH
46321: LD_INT 4
46323: PUSH
46324: LD_INT 5
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: ST_TO_ADDR
46331: GO 46976
46333: LD_INT 22
46335: DOUBLE
46336: EQUAL
46337: IFTRUE 46341
46339: GO 46367
46341: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46342: LD_ADDR_VAR 0 3
46346: PUSH
46347: LD_INT 11
46349: PUSH
46350: LD_INT 12
46352: PUSH
46353: LD_INT 13
46355: PUSH
46356: LD_INT 14
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: ST_TO_ADDR
46365: GO 46976
46367: LD_INT 23
46369: DOUBLE
46370: EQUAL
46371: IFTRUE 46375
46373: GO 46401
46375: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46376: LD_ADDR_VAR 0 3
46380: PUSH
46381: LD_INT 11
46383: PUSH
46384: LD_INT 12
46386: PUSH
46387: LD_INT 13
46389: PUSH
46390: LD_INT 14
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: ST_TO_ADDR
46399: GO 46976
46401: LD_INT 24
46403: DOUBLE
46404: EQUAL
46405: IFTRUE 46409
46407: GO 46435
46409: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46410: LD_ADDR_VAR 0 3
46414: PUSH
46415: LD_INT 11
46417: PUSH
46418: LD_INT 12
46420: PUSH
46421: LD_INT 13
46423: PUSH
46424: LD_INT 14
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: ST_TO_ADDR
46433: GO 46976
46435: LD_INT 30
46437: DOUBLE
46438: EQUAL
46439: IFTRUE 46443
46441: GO 46469
46443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46444: LD_ADDR_VAR 0 3
46448: PUSH
46449: LD_INT 11
46451: PUSH
46452: LD_INT 12
46454: PUSH
46455: LD_INT 13
46457: PUSH
46458: LD_INT 14
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: ST_TO_ADDR
46467: GO 46976
46469: LD_INT 25
46471: DOUBLE
46472: EQUAL
46473: IFTRUE 46477
46475: GO 46495
46477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46478: LD_ADDR_VAR 0 3
46482: PUSH
46483: LD_INT 13
46485: PUSH
46486: LD_INT 14
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: ST_TO_ADDR
46493: GO 46976
46495: LD_INT 27
46497: DOUBLE
46498: EQUAL
46499: IFTRUE 46503
46501: GO 46521
46503: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46504: LD_ADDR_VAR 0 3
46508: PUSH
46509: LD_INT 13
46511: PUSH
46512: LD_INT 14
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: ST_TO_ADDR
46519: GO 46976
46521: LD_INT 92
46523: DOUBLE
46524: EQUAL
46525: IFTRUE 46529
46527: GO 46555
46529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46530: LD_ADDR_VAR 0 3
46534: PUSH
46535: LD_INT 11
46537: PUSH
46538: LD_INT 12
46540: PUSH
46541: LD_INT 13
46543: PUSH
46544: LD_INT 14
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: ST_TO_ADDR
46553: GO 46976
46555: LD_INT 28
46557: DOUBLE
46558: EQUAL
46559: IFTRUE 46563
46561: GO 46581
46563: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46564: LD_ADDR_VAR 0 3
46568: PUSH
46569: LD_INT 13
46571: PUSH
46572: LD_INT 14
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: ST_TO_ADDR
46579: GO 46976
46581: LD_INT 29
46583: DOUBLE
46584: EQUAL
46585: IFTRUE 46589
46587: GO 46607
46589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46590: LD_ADDR_VAR 0 3
46594: PUSH
46595: LD_INT 13
46597: PUSH
46598: LD_INT 14
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: ST_TO_ADDR
46605: GO 46976
46607: LD_INT 31
46609: DOUBLE
46610: EQUAL
46611: IFTRUE 46615
46613: GO 46633
46615: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46616: LD_ADDR_VAR 0 3
46620: PUSH
46621: LD_INT 13
46623: PUSH
46624: LD_INT 14
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: ST_TO_ADDR
46631: GO 46976
46633: LD_INT 26
46635: DOUBLE
46636: EQUAL
46637: IFTRUE 46641
46639: GO 46659
46641: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46642: LD_ADDR_VAR 0 3
46646: PUSH
46647: LD_INT 13
46649: PUSH
46650: LD_INT 14
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: ST_TO_ADDR
46657: GO 46976
46659: LD_INT 42
46661: DOUBLE
46662: EQUAL
46663: IFTRUE 46667
46665: GO 46693
46667: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46668: LD_ADDR_VAR 0 3
46672: PUSH
46673: LD_INT 21
46675: PUSH
46676: LD_INT 22
46678: PUSH
46679: LD_INT 23
46681: PUSH
46682: LD_INT 24
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: ST_TO_ADDR
46691: GO 46976
46693: LD_INT 43
46695: DOUBLE
46696: EQUAL
46697: IFTRUE 46701
46699: GO 46727
46701: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46702: LD_ADDR_VAR 0 3
46706: PUSH
46707: LD_INT 21
46709: PUSH
46710: LD_INT 22
46712: PUSH
46713: LD_INT 23
46715: PUSH
46716: LD_INT 24
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: ST_TO_ADDR
46725: GO 46976
46727: LD_INT 44
46729: DOUBLE
46730: EQUAL
46731: IFTRUE 46735
46733: GO 46761
46735: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46736: LD_ADDR_VAR 0 3
46740: PUSH
46741: LD_INT 21
46743: PUSH
46744: LD_INT 22
46746: PUSH
46747: LD_INT 23
46749: PUSH
46750: LD_INT 24
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: ST_TO_ADDR
46759: GO 46976
46761: LD_INT 45
46763: DOUBLE
46764: EQUAL
46765: IFTRUE 46769
46767: GO 46795
46769: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46770: LD_ADDR_VAR 0 3
46774: PUSH
46775: LD_INT 21
46777: PUSH
46778: LD_INT 22
46780: PUSH
46781: LD_INT 23
46783: PUSH
46784: LD_INT 24
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: ST_TO_ADDR
46793: GO 46976
46795: LD_INT 49
46797: DOUBLE
46798: EQUAL
46799: IFTRUE 46803
46801: GO 46829
46803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46804: LD_ADDR_VAR 0 3
46808: PUSH
46809: LD_INT 21
46811: PUSH
46812: LD_INT 22
46814: PUSH
46815: LD_INT 23
46817: PUSH
46818: LD_INT 24
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: ST_TO_ADDR
46827: GO 46976
46829: LD_INT 51
46831: DOUBLE
46832: EQUAL
46833: IFTRUE 46837
46835: GO 46863
46837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46838: LD_ADDR_VAR 0 3
46842: PUSH
46843: LD_INT 21
46845: PUSH
46846: LD_INT 22
46848: PUSH
46849: LD_INT 23
46851: PUSH
46852: LD_INT 24
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: ST_TO_ADDR
46861: GO 46976
46863: LD_INT 52
46865: DOUBLE
46866: EQUAL
46867: IFTRUE 46871
46869: GO 46897
46871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46872: LD_ADDR_VAR 0 3
46876: PUSH
46877: LD_INT 21
46879: PUSH
46880: LD_INT 22
46882: PUSH
46883: LD_INT 23
46885: PUSH
46886: LD_INT 24
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: ST_TO_ADDR
46895: GO 46976
46897: LD_INT 53
46899: DOUBLE
46900: EQUAL
46901: IFTRUE 46905
46903: GO 46923
46905: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46906: LD_ADDR_VAR 0 3
46910: PUSH
46911: LD_INT 23
46913: PUSH
46914: LD_INT 24
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: ST_TO_ADDR
46921: GO 46976
46923: LD_INT 46
46925: DOUBLE
46926: EQUAL
46927: IFTRUE 46931
46929: GO 46949
46931: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46932: LD_ADDR_VAR 0 3
46936: PUSH
46937: LD_INT 23
46939: PUSH
46940: LD_INT 24
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: ST_TO_ADDR
46947: GO 46976
46949: LD_INT 47
46951: DOUBLE
46952: EQUAL
46953: IFTRUE 46957
46955: GO 46975
46957: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46958: LD_ADDR_VAR 0 3
46962: PUSH
46963: LD_INT 23
46965: PUSH
46966: LD_INT 24
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: ST_TO_ADDR
46973: GO 46976
46975: POP
// result := ( chassis in result ) ;
46976: LD_ADDR_VAR 0 3
46980: PUSH
46981: LD_VAR 0 1
46985: PUSH
46986: LD_VAR 0 3
46990: IN
46991: ST_TO_ADDR
// end ;
46992: LD_VAR 0 3
46996: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46997: LD_INT 0
46999: PPUSH
47000: PPUSH
47001: PPUSH
47002: PPUSH
47003: PPUSH
47004: PPUSH
47005: PPUSH
// result := array ;
47006: LD_ADDR_VAR 0 5
47010: PUSH
47011: LD_VAR 0 1
47015: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47016: LD_VAR 0 1
47020: NOT
47021: PUSH
47022: LD_VAR 0 2
47026: NOT
47027: OR
47028: PUSH
47029: LD_VAR 0 3
47033: NOT
47034: OR
47035: PUSH
47036: LD_VAR 0 2
47040: PUSH
47041: LD_VAR 0 1
47045: GREATER
47046: OR
47047: PUSH
47048: LD_VAR 0 3
47052: PUSH
47053: LD_VAR 0 1
47057: GREATER
47058: OR
47059: IFFALSE 47063
// exit ;
47061: GO 47359
// if direction then
47063: LD_VAR 0 4
47067: IFFALSE 47131
// begin d := 1 ;
47069: LD_ADDR_VAR 0 9
47073: PUSH
47074: LD_INT 1
47076: ST_TO_ADDR
// if i_from > i_to then
47077: LD_VAR 0 2
47081: PUSH
47082: LD_VAR 0 3
47086: GREATER
47087: IFFALSE 47113
// length := ( array - i_from ) + i_to else
47089: LD_ADDR_VAR 0 11
47093: PUSH
47094: LD_VAR 0 1
47098: PUSH
47099: LD_VAR 0 2
47103: MINUS
47104: PUSH
47105: LD_VAR 0 3
47109: PLUS
47110: ST_TO_ADDR
47111: GO 47129
// length := i_to - i_from ;
47113: LD_ADDR_VAR 0 11
47117: PUSH
47118: LD_VAR 0 3
47122: PUSH
47123: LD_VAR 0 2
47127: MINUS
47128: ST_TO_ADDR
// end else
47129: GO 47192
// begin d := - 1 ;
47131: LD_ADDR_VAR 0 9
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: ST_TO_ADDR
// if i_from > i_to then
47140: LD_VAR 0 2
47144: PUSH
47145: LD_VAR 0 3
47149: GREATER
47150: IFFALSE 47170
// length := i_from - i_to else
47152: LD_ADDR_VAR 0 11
47156: PUSH
47157: LD_VAR 0 2
47161: PUSH
47162: LD_VAR 0 3
47166: MINUS
47167: ST_TO_ADDR
47168: GO 47192
// length := ( array - i_to ) + i_from ;
47170: LD_ADDR_VAR 0 11
47174: PUSH
47175: LD_VAR 0 1
47179: PUSH
47180: LD_VAR 0 3
47184: MINUS
47185: PUSH
47186: LD_VAR 0 2
47190: PLUS
47191: ST_TO_ADDR
// end ; if not length then
47192: LD_VAR 0 11
47196: NOT
47197: IFFALSE 47201
// exit ;
47199: GO 47359
// tmp := array ;
47201: LD_ADDR_VAR 0 10
47205: PUSH
47206: LD_VAR 0 1
47210: ST_TO_ADDR
// for i = 1 to length do
47211: LD_ADDR_VAR 0 6
47215: PUSH
47216: DOUBLE
47217: LD_INT 1
47219: DEC
47220: ST_TO_ADDR
47221: LD_VAR 0 11
47225: PUSH
47226: FOR_TO
47227: IFFALSE 47347
// begin for j = 1 to array do
47229: LD_ADDR_VAR 0 7
47233: PUSH
47234: DOUBLE
47235: LD_INT 1
47237: DEC
47238: ST_TO_ADDR
47239: LD_VAR 0 1
47243: PUSH
47244: FOR_TO
47245: IFFALSE 47333
// begin k := j + d ;
47247: LD_ADDR_VAR 0 8
47251: PUSH
47252: LD_VAR 0 7
47256: PUSH
47257: LD_VAR 0 9
47261: PLUS
47262: ST_TO_ADDR
// if k > array then
47263: LD_VAR 0 8
47267: PUSH
47268: LD_VAR 0 1
47272: GREATER
47273: IFFALSE 47283
// k := 1 ;
47275: LD_ADDR_VAR 0 8
47279: PUSH
47280: LD_INT 1
47282: ST_TO_ADDR
// if not k then
47283: LD_VAR 0 8
47287: NOT
47288: IFFALSE 47300
// k := array ;
47290: LD_ADDR_VAR 0 8
47294: PUSH
47295: LD_VAR 0 1
47299: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47300: LD_ADDR_VAR 0 10
47304: PUSH
47305: LD_VAR 0 10
47309: PPUSH
47310: LD_VAR 0 8
47314: PPUSH
47315: LD_VAR 0 1
47319: PUSH
47320: LD_VAR 0 7
47324: ARRAY
47325: PPUSH
47326: CALL_OW 1
47330: ST_TO_ADDR
// end ;
47331: GO 47244
47333: POP
47334: POP
// array := tmp ;
47335: LD_ADDR_VAR 0 1
47339: PUSH
47340: LD_VAR 0 10
47344: ST_TO_ADDR
// end ;
47345: GO 47226
47347: POP
47348: POP
// result := array ;
47349: LD_ADDR_VAR 0 5
47353: PUSH
47354: LD_VAR 0 1
47358: ST_TO_ADDR
// end ;
47359: LD_VAR 0 5
47363: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47364: LD_INT 0
47366: PPUSH
47367: PPUSH
// result := 0 ;
47368: LD_ADDR_VAR 0 3
47372: PUSH
47373: LD_INT 0
47375: ST_TO_ADDR
// if not array or not value in array then
47376: LD_VAR 0 1
47380: NOT
47381: PUSH
47382: LD_VAR 0 2
47386: PUSH
47387: LD_VAR 0 1
47391: IN
47392: NOT
47393: OR
47394: IFFALSE 47398
// exit ;
47396: GO 47452
// for i = 1 to array do
47398: LD_ADDR_VAR 0 4
47402: PUSH
47403: DOUBLE
47404: LD_INT 1
47406: DEC
47407: ST_TO_ADDR
47408: LD_VAR 0 1
47412: PUSH
47413: FOR_TO
47414: IFFALSE 47450
// if value = array [ i ] then
47416: LD_VAR 0 2
47420: PUSH
47421: LD_VAR 0 1
47425: PUSH
47426: LD_VAR 0 4
47430: ARRAY
47431: EQUAL
47432: IFFALSE 47448
// begin result := i ;
47434: LD_ADDR_VAR 0 3
47438: PUSH
47439: LD_VAR 0 4
47443: ST_TO_ADDR
// exit ;
47444: POP
47445: POP
47446: GO 47452
// end ;
47448: GO 47413
47450: POP
47451: POP
// end ;
47452: LD_VAR 0 3
47456: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47457: LD_INT 0
47459: PPUSH
// vc_chassis := chassis ;
47460: LD_ADDR_OWVAR 37
47464: PUSH
47465: LD_VAR 0 1
47469: ST_TO_ADDR
// vc_engine := engine ;
47470: LD_ADDR_OWVAR 39
47474: PUSH
47475: LD_VAR 0 2
47479: ST_TO_ADDR
// vc_control := control ;
47480: LD_ADDR_OWVAR 38
47484: PUSH
47485: LD_VAR 0 3
47489: ST_TO_ADDR
// vc_weapon := weapon ;
47490: LD_ADDR_OWVAR 40
47494: PUSH
47495: LD_VAR 0 4
47499: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47500: LD_ADDR_OWVAR 41
47504: PUSH
47505: LD_VAR 0 5
47509: ST_TO_ADDR
// end ;
47510: LD_VAR 0 6
47514: RET
// export function WantPlant ( unit ) ; var task ; begin
47515: LD_INT 0
47517: PPUSH
47518: PPUSH
// result := false ;
47519: LD_ADDR_VAR 0 2
47523: PUSH
47524: LD_INT 0
47526: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47527: LD_ADDR_VAR 0 3
47531: PUSH
47532: LD_VAR 0 1
47536: PPUSH
47537: CALL_OW 437
47541: ST_TO_ADDR
// if task then
47542: LD_VAR 0 3
47546: IFFALSE 47574
// if task [ 1 ] [ 1 ] = p then
47548: LD_VAR 0 3
47552: PUSH
47553: LD_INT 1
47555: ARRAY
47556: PUSH
47557: LD_INT 1
47559: ARRAY
47560: PUSH
47561: LD_STRING p
47563: EQUAL
47564: IFFALSE 47574
// result := true ;
47566: LD_ADDR_VAR 0 2
47570: PUSH
47571: LD_INT 1
47573: ST_TO_ADDR
// end ;
47574: LD_VAR 0 2
47578: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47579: LD_INT 0
47581: PPUSH
47582: PPUSH
47583: PPUSH
47584: PPUSH
// if pos < 1 then
47585: LD_VAR 0 2
47589: PUSH
47590: LD_INT 1
47592: LESS
47593: IFFALSE 47597
// exit ;
47595: GO 47900
// if pos = 1 then
47597: LD_VAR 0 2
47601: PUSH
47602: LD_INT 1
47604: EQUAL
47605: IFFALSE 47638
// result := Replace ( arr , pos [ 1 ] , value ) else
47607: LD_ADDR_VAR 0 4
47611: PUSH
47612: LD_VAR 0 1
47616: PPUSH
47617: LD_VAR 0 2
47621: PUSH
47622: LD_INT 1
47624: ARRAY
47625: PPUSH
47626: LD_VAR 0 3
47630: PPUSH
47631: CALL_OW 1
47635: ST_TO_ADDR
47636: GO 47900
// begin tmp := arr ;
47638: LD_ADDR_VAR 0 6
47642: PUSH
47643: LD_VAR 0 1
47647: ST_TO_ADDR
// s_arr := [ tmp ] ;
47648: LD_ADDR_VAR 0 7
47652: PUSH
47653: LD_VAR 0 6
47657: PUSH
47658: EMPTY
47659: LIST
47660: ST_TO_ADDR
// for i = 1 to pos - 1 do
47661: LD_ADDR_VAR 0 5
47665: PUSH
47666: DOUBLE
47667: LD_INT 1
47669: DEC
47670: ST_TO_ADDR
47671: LD_VAR 0 2
47675: PUSH
47676: LD_INT 1
47678: MINUS
47679: PUSH
47680: FOR_TO
47681: IFFALSE 47726
// begin tmp := tmp [ pos [ i ] ] ;
47683: LD_ADDR_VAR 0 6
47687: PUSH
47688: LD_VAR 0 6
47692: PUSH
47693: LD_VAR 0 2
47697: PUSH
47698: LD_VAR 0 5
47702: ARRAY
47703: ARRAY
47704: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47705: LD_ADDR_VAR 0 7
47709: PUSH
47710: LD_VAR 0 7
47714: PUSH
47715: LD_VAR 0 6
47719: PUSH
47720: EMPTY
47721: LIST
47722: ADD
47723: ST_TO_ADDR
// end ;
47724: GO 47680
47726: POP
47727: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47728: LD_ADDR_VAR 0 6
47732: PUSH
47733: LD_VAR 0 6
47737: PPUSH
47738: LD_VAR 0 2
47742: PUSH
47743: LD_VAR 0 2
47747: ARRAY
47748: PPUSH
47749: LD_VAR 0 3
47753: PPUSH
47754: CALL_OW 1
47758: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47759: LD_ADDR_VAR 0 7
47763: PUSH
47764: LD_VAR 0 7
47768: PPUSH
47769: LD_VAR 0 7
47773: PPUSH
47774: LD_VAR 0 6
47778: PPUSH
47779: CALL_OW 1
47783: ST_TO_ADDR
// for i = s_arr downto 2 do
47784: LD_ADDR_VAR 0 5
47788: PUSH
47789: DOUBLE
47790: LD_VAR 0 7
47794: INC
47795: ST_TO_ADDR
47796: LD_INT 2
47798: PUSH
47799: FOR_DOWNTO
47800: IFFALSE 47884
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47802: LD_ADDR_VAR 0 6
47806: PUSH
47807: LD_VAR 0 7
47811: PUSH
47812: LD_VAR 0 5
47816: PUSH
47817: LD_INT 1
47819: MINUS
47820: ARRAY
47821: PPUSH
47822: LD_VAR 0 2
47826: PUSH
47827: LD_VAR 0 5
47831: PUSH
47832: LD_INT 1
47834: MINUS
47835: ARRAY
47836: PPUSH
47837: LD_VAR 0 7
47841: PUSH
47842: LD_VAR 0 5
47846: ARRAY
47847: PPUSH
47848: CALL_OW 1
47852: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47853: LD_ADDR_VAR 0 7
47857: PUSH
47858: LD_VAR 0 7
47862: PPUSH
47863: LD_VAR 0 5
47867: PUSH
47868: LD_INT 1
47870: MINUS
47871: PPUSH
47872: LD_VAR 0 6
47876: PPUSH
47877: CALL_OW 1
47881: ST_TO_ADDR
// end ;
47882: GO 47799
47884: POP
47885: POP
// result := s_arr [ 1 ] ;
47886: LD_ADDR_VAR 0 4
47890: PUSH
47891: LD_VAR 0 7
47895: PUSH
47896: LD_INT 1
47898: ARRAY
47899: ST_TO_ADDR
// end ; end ;
47900: LD_VAR 0 4
47904: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47905: LD_INT 0
47907: PPUSH
47908: PPUSH
// if not list then
47909: LD_VAR 0 1
47913: NOT
47914: IFFALSE 47918
// exit ;
47916: GO 48009
// i := list [ pos1 ] ;
47918: LD_ADDR_VAR 0 5
47922: PUSH
47923: LD_VAR 0 1
47927: PUSH
47928: LD_VAR 0 2
47932: ARRAY
47933: ST_TO_ADDR
// if not i then
47934: LD_VAR 0 5
47938: NOT
47939: IFFALSE 47943
// exit ;
47941: GO 48009
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47943: LD_ADDR_VAR 0 1
47947: PUSH
47948: LD_VAR 0 1
47952: PPUSH
47953: LD_VAR 0 2
47957: PPUSH
47958: LD_VAR 0 1
47962: PUSH
47963: LD_VAR 0 3
47967: ARRAY
47968: PPUSH
47969: CALL_OW 1
47973: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47974: LD_ADDR_VAR 0 1
47978: PUSH
47979: LD_VAR 0 1
47983: PPUSH
47984: LD_VAR 0 3
47988: PPUSH
47989: LD_VAR 0 5
47993: PPUSH
47994: CALL_OW 1
47998: ST_TO_ADDR
// result := list ;
47999: LD_ADDR_VAR 0 4
48003: PUSH
48004: LD_VAR 0 1
48008: ST_TO_ADDR
// end ;
48009: LD_VAR 0 4
48013: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48014: LD_INT 0
48016: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48017: LD_ADDR_VAR 0 5
48021: PUSH
48022: LD_VAR 0 1
48026: PPUSH
48027: CALL_OW 250
48031: PPUSH
48032: LD_VAR 0 1
48036: PPUSH
48037: CALL_OW 251
48041: PPUSH
48042: LD_VAR 0 2
48046: PPUSH
48047: LD_VAR 0 3
48051: PPUSH
48052: LD_VAR 0 4
48056: PPUSH
48057: CALL 48435 0 5
48061: ST_TO_ADDR
// end ;
48062: LD_VAR 0 5
48066: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48067: LD_INT 0
48069: PPUSH
48070: PPUSH
48071: PPUSH
48072: PPUSH
// if not list or not unit then
48073: LD_VAR 0 2
48077: NOT
48078: PUSH
48079: LD_VAR 0 1
48083: NOT
48084: OR
48085: IFFALSE 48089
// exit ;
48087: GO 48430
// result := [ ] ;
48089: LD_ADDR_VAR 0 5
48093: PUSH
48094: EMPTY
48095: ST_TO_ADDR
// for i in list do
48096: LD_ADDR_VAR 0 6
48100: PUSH
48101: LD_VAR 0 2
48105: PUSH
48106: FOR_IN
48107: IFFALSE 48325
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48109: LD_ADDR_VAR 0 8
48113: PUSH
48114: LD_VAR 0 1
48118: PPUSH
48119: LD_VAR 0 6
48123: PUSH
48124: LD_INT 1
48126: ARRAY
48127: PPUSH
48128: LD_VAR 0 6
48132: PUSH
48133: LD_INT 2
48135: ARRAY
48136: PPUSH
48137: CALL_OW 297
48141: ST_TO_ADDR
// if not Count ( result ) then
48142: LD_VAR 0 5
48146: PPUSH
48147: CALL 44719 0 1
48151: NOT
48152: IFFALSE 48185
// begin result := Join ( result , [ i , tmp ] ) ;
48154: LD_ADDR_VAR 0 5
48158: PUSH
48159: LD_VAR 0 5
48163: PPUSH
48164: LD_VAR 0 6
48168: PUSH
48169: LD_VAR 0 8
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PPUSH
48178: CALL 80319 0 2
48182: ST_TO_ADDR
// continue ;
48183: GO 48106
// end ; if result [ result ] [ 2 ] <= tmp then
48185: LD_VAR 0 5
48189: PUSH
48190: LD_VAR 0 5
48194: ARRAY
48195: PUSH
48196: LD_INT 2
48198: ARRAY
48199: PUSH
48200: LD_VAR 0 8
48204: LESSEQUAL
48205: IFFALSE 48238
// result := Join ( result , [ i , tmp ] ) else
48207: LD_ADDR_VAR 0 5
48211: PUSH
48212: LD_VAR 0 5
48216: PPUSH
48217: LD_VAR 0 6
48221: PUSH
48222: LD_VAR 0 8
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PPUSH
48231: CALL 80319 0 2
48235: ST_TO_ADDR
48236: GO 48323
// begin for j := 1 to Count ( result ) do
48238: LD_ADDR_VAR 0 7
48242: PUSH
48243: DOUBLE
48244: LD_INT 1
48246: DEC
48247: ST_TO_ADDR
48248: LD_VAR 0 5
48252: PPUSH
48253: CALL 44719 0 1
48257: PUSH
48258: FOR_TO
48259: IFFALSE 48321
// begin if tmp < result [ j ] [ 2 ] then
48261: LD_VAR 0 8
48265: PUSH
48266: LD_VAR 0 5
48270: PUSH
48271: LD_VAR 0 7
48275: ARRAY
48276: PUSH
48277: LD_INT 2
48279: ARRAY
48280: LESS
48281: IFFALSE 48319
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48283: LD_ADDR_VAR 0 5
48287: PUSH
48288: LD_VAR 0 5
48292: PPUSH
48293: LD_VAR 0 7
48297: PPUSH
48298: LD_VAR 0 6
48302: PUSH
48303: LD_VAR 0 8
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PPUSH
48312: CALL_OW 2
48316: ST_TO_ADDR
// break ;
48317: GO 48321
// end ; end ;
48319: GO 48258
48321: POP
48322: POP
// end ; end ;
48323: GO 48106
48325: POP
48326: POP
// if result and not asc then
48327: LD_VAR 0 5
48331: PUSH
48332: LD_VAR 0 3
48336: NOT
48337: AND
48338: IFFALSE 48355
// result := ReverseArray ( result ) ;
48340: LD_ADDR_VAR 0 5
48344: PUSH
48345: LD_VAR 0 5
48349: PPUSH
48350: CALL 75595 0 1
48354: ST_TO_ADDR
// tmp := [ ] ;
48355: LD_ADDR_VAR 0 8
48359: PUSH
48360: EMPTY
48361: ST_TO_ADDR
// if mode then
48362: LD_VAR 0 4
48366: IFFALSE 48430
// begin for i := 1 to result do
48368: LD_ADDR_VAR 0 6
48372: PUSH
48373: DOUBLE
48374: LD_INT 1
48376: DEC
48377: ST_TO_ADDR
48378: LD_VAR 0 5
48382: PUSH
48383: FOR_TO
48384: IFFALSE 48418
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48386: LD_ADDR_VAR 0 8
48390: PUSH
48391: LD_VAR 0 8
48395: PPUSH
48396: LD_VAR 0 5
48400: PUSH
48401: LD_VAR 0 6
48405: ARRAY
48406: PUSH
48407: LD_INT 1
48409: ARRAY
48410: PPUSH
48411: CALL 80319 0 2
48415: ST_TO_ADDR
48416: GO 48383
48418: POP
48419: POP
// result := tmp ;
48420: LD_ADDR_VAR 0 5
48424: PUSH
48425: LD_VAR 0 8
48429: ST_TO_ADDR
// end ; end ;
48430: LD_VAR 0 5
48434: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48435: LD_INT 0
48437: PPUSH
48438: PPUSH
48439: PPUSH
48440: PPUSH
// if not list then
48441: LD_VAR 0 3
48445: NOT
48446: IFFALSE 48450
// exit ;
48448: GO 48838
// result := [ ] ;
48450: LD_ADDR_VAR 0 6
48454: PUSH
48455: EMPTY
48456: ST_TO_ADDR
// for i in list do
48457: LD_ADDR_VAR 0 7
48461: PUSH
48462: LD_VAR 0 3
48466: PUSH
48467: FOR_IN
48468: IFFALSE 48670
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48470: LD_ADDR_VAR 0 9
48474: PUSH
48475: LD_VAR 0 7
48479: PPUSH
48480: LD_VAR 0 1
48484: PPUSH
48485: LD_VAR 0 2
48489: PPUSH
48490: CALL_OW 297
48494: ST_TO_ADDR
// if not result then
48495: LD_VAR 0 6
48499: NOT
48500: IFFALSE 48526
// result := [ [ i , tmp ] ] else
48502: LD_ADDR_VAR 0 6
48506: PUSH
48507: LD_VAR 0 7
48511: PUSH
48512: LD_VAR 0 9
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: EMPTY
48522: LIST
48523: ST_TO_ADDR
48524: GO 48668
// begin if result [ result ] [ 2 ] < tmp then
48526: LD_VAR 0 6
48530: PUSH
48531: LD_VAR 0 6
48535: ARRAY
48536: PUSH
48537: LD_INT 2
48539: ARRAY
48540: PUSH
48541: LD_VAR 0 9
48545: LESS
48546: IFFALSE 48588
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48548: LD_ADDR_VAR 0 6
48552: PUSH
48553: LD_VAR 0 6
48557: PPUSH
48558: LD_VAR 0 6
48562: PUSH
48563: LD_INT 1
48565: PLUS
48566: PPUSH
48567: LD_VAR 0 7
48571: PUSH
48572: LD_VAR 0 9
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PPUSH
48581: CALL_OW 2
48585: ST_TO_ADDR
48586: GO 48668
// for j = 1 to result do
48588: LD_ADDR_VAR 0 8
48592: PUSH
48593: DOUBLE
48594: LD_INT 1
48596: DEC
48597: ST_TO_ADDR
48598: LD_VAR 0 6
48602: PUSH
48603: FOR_TO
48604: IFFALSE 48666
// begin if tmp < result [ j ] [ 2 ] then
48606: LD_VAR 0 9
48610: PUSH
48611: LD_VAR 0 6
48615: PUSH
48616: LD_VAR 0 8
48620: ARRAY
48621: PUSH
48622: LD_INT 2
48624: ARRAY
48625: LESS
48626: IFFALSE 48664
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48628: LD_ADDR_VAR 0 6
48632: PUSH
48633: LD_VAR 0 6
48637: PPUSH
48638: LD_VAR 0 8
48642: PPUSH
48643: LD_VAR 0 7
48647: PUSH
48648: LD_VAR 0 9
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PPUSH
48657: CALL_OW 2
48661: ST_TO_ADDR
// break ;
48662: GO 48666
// end ; end ;
48664: GO 48603
48666: POP
48667: POP
// end ; end ;
48668: GO 48467
48670: POP
48671: POP
// if result and not asc then
48672: LD_VAR 0 6
48676: PUSH
48677: LD_VAR 0 4
48681: NOT
48682: AND
48683: IFFALSE 48758
// begin tmp := result ;
48685: LD_ADDR_VAR 0 9
48689: PUSH
48690: LD_VAR 0 6
48694: ST_TO_ADDR
// for i = tmp downto 1 do
48695: LD_ADDR_VAR 0 7
48699: PUSH
48700: DOUBLE
48701: LD_VAR 0 9
48705: INC
48706: ST_TO_ADDR
48707: LD_INT 1
48709: PUSH
48710: FOR_DOWNTO
48711: IFFALSE 48756
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48713: LD_ADDR_VAR 0 6
48717: PUSH
48718: LD_VAR 0 6
48722: PPUSH
48723: LD_VAR 0 9
48727: PUSH
48728: LD_VAR 0 7
48732: MINUS
48733: PUSH
48734: LD_INT 1
48736: PLUS
48737: PPUSH
48738: LD_VAR 0 9
48742: PUSH
48743: LD_VAR 0 7
48747: ARRAY
48748: PPUSH
48749: CALL_OW 1
48753: ST_TO_ADDR
48754: GO 48710
48756: POP
48757: POP
// end ; tmp := [ ] ;
48758: LD_ADDR_VAR 0 9
48762: PUSH
48763: EMPTY
48764: ST_TO_ADDR
// if mode then
48765: LD_VAR 0 5
48769: IFFALSE 48838
// begin for i = 1 to result do
48771: LD_ADDR_VAR 0 7
48775: PUSH
48776: DOUBLE
48777: LD_INT 1
48779: DEC
48780: ST_TO_ADDR
48781: LD_VAR 0 6
48785: PUSH
48786: FOR_TO
48787: IFFALSE 48826
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48789: LD_ADDR_VAR 0 9
48793: PUSH
48794: LD_VAR 0 9
48798: PPUSH
48799: LD_VAR 0 7
48803: PPUSH
48804: LD_VAR 0 6
48808: PUSH
48809: LD_VAR 0 7
48813: ARRAY
48814: PUSH
48815: LD_INT 1
48817: ARRAY
48818: PPUSH
48819: CALL_OW 1
48823: ST_TO_ADDR
48824: GO 48786
48826: POP
48827: POP
// result := tmp ;
48828: LD_ADDR_VAR 0 6
48832: PUSH
48833: LD_VAR 0 9
48837: ST_TO_ADDR
// end ; end ;
48838: LD_VAR 0 6
48842: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48843: LD_INT 0
48845: PPUSH
48846: PPUSH
48847: PPUSH
48848: PPUSH
48849: PPUSH
48850: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48851: LD_ADDR_VAR 0 5
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: EMPTY
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: ST_TO_ADDR
// if not x or not y then
48873: LD_VAR 0 2
48877: NOT
48878: PUSH
48879: LD_VAR 0 3
48883: NOT
48884: OR
48885: IFFALSE 48889
// exit ;
48887: GO 50539
// if not range then
48889: LD_VAR 0 4
48893: NOT
48894: IFFALSE 48904
// range := 10 ;
48896: LD_ADDR_VAR 0 4
48900: PUSH
48901: LD_INT 10
48903: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48904: LD_ADDR_VAR 0 8
48908: PUSH
48909: LD_INT 81
48911: PUSH
48912: LD_VAR 0 1
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 92
48923: PUSH
48924: LD_VAR 0 2
48928: PUSH
48929: LD_VAR 0 3
48933: PUSH
48934: LD_VAR 0 4
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: LD_INT 21
48950: PUSH
48951: LD_INT 3
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: PPUSH
48967: CALL_OW 69
48971: ST_TO_ADDR
// if not tmp then
48972: LD_VAR 0 8
48976: NOT
48977: IFFALSE 48981
// exit ;
48979: GO 50539
// for i in tmp do
48981: LD_ADDR_VAR 0 6
48985: PUSH
48986: LD_VAR 0 8
48990: PUSH
48991: FOR_IN
48992: IFFALSE 50514
// begin points := [ 0 , 0 , 0 ] ;
48994: LD_ADDR_VAR 0 9
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: LIST
49012: ST_TO_ADDR
// bpoints := 1 ;
49013: LD_ADDR_VAR 0 10
49017: PUSH
49018: LD_INT 1
49020: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49021: LD_VAR 0 6
49025: PPUSH
49026: CALL_OW 247
49030: PUSH
49031: LD_INT 1
49033: DOUBLE
49034: EQUAL
49035: IFTRUE 49039
49037: GO 49617
49039: POP
// begin if GetClass ( i ) = 1 then
49040: LD_VAR 0 6
49044: PPUSH
49045: CALL_OW 257
49049: PUSH
49050: LD_INT 1
49052: EQUAL
49053: IFFALSE 49074
// points := [ 10 , 5 , 3 ] ;
49055: LD_ADDR_VAR 0 9
49059: PUSH
49060: LD_INT 10
49062: PUSH
49063: LD_INT 5
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: LIST
49073: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49074: LD_VAR 0 6
49078: PPUSH
49079: CALL_OW 257
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: LD_INT 3
49089: PUSH
49090: LD_INT 4
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: LIST
49097: IN
49098: IFFALSE 49119
// points := [ 3 , 2 , 1 ] ;
49100: LD_ADDR_VAR 0 9
49104: PUSH
49105: LD_INT 3
49107: PUSH
49108: LD_INT 2
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: LIST
49118: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49119: LD_VAR 0 6
49123: PPUSH
49124: CALL_OW 257
49128: PUSH
49129: LD_INT 5
49131: EQUAL
49132: IFFALSE 49153
// points := [ 130 , 5 , 2 ] ;
49134: LD_ADDR_VAR 0 9
49138: PUSH
49139: LD_INT 130
49141: PUSH
49142: LD_INT 5
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: LIST
49152: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49153: LD_VAR 0 6
49157: PPUSH
49158: CALL_OW 257
49162: PUSH
49163: LD_INT 8
49165: EQUAL
49166: IFFALSE 49187
// points := [ 35 , 35 , 30 ] ;
49168: LD_ADDR_VAR 0 9
49172: PUSH
49173: LD_INT 35
49175: PUSH
49176: LD_INT 35
49178: PUSH
49179: LD_INT 30
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: LIST
49186: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49187: LD_VAR 0 6
49191: PPUSH
49192: CALL_OW 257
49196: PUSH
49197: LD_INT 9
49199: EQUAL
49200: IFFALSE 49221
// points := [ 20 , 55 , 40 ] ;
49202: LD_ADDR_VAR 0 9
49206: PUSH
49207: LD_INT 20
49209: PUSH
49210: LD_INT 55
49212: PUSH
49213: LD_INT 40
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: LIST
49220: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49221: LD_VAR 0 6
49225: PPUSH
49226: CALL_OW 257
49230: PUSH
49231: LD_INT 12
49233: PUSH
49234: LD_INT 16
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: IN
49241: IFFALSE 49262
// points := [ 5 , 3 , 2 ] ;
49243: LD_ADDR_VAR 0 9
49247: PUSH
49248: LD_INT 5
49250: PUSH
49251: LD_INT 3
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: LIST
49261: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49262: LD_VAR 0 6
49266: PPUSH
49267: CALL_OW 257
49271: PUSH
49272: LD_INT 17
49274: EQUAL
49275: IFFALSE 49296
// points := [ 100 , 50 , 75 ] ;
49277: LD_ADDR_VAR 0 9
49281: PUSH
49282: LD_INT 100
49284: PUSH
49285: LD_INT 50
49287: PUSH
49288: LD_INT 75
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: LIST
49295: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49296: LD_VAR 0 6
49300: PPUSH
49301: CALL_OW 257
49305: PUSH
49306: LD_INT 15
49308: EQUAL
49309: IFFALSE 49330
// points := [ 10 , 5 , 3 ] ;
49311: LD_ADDR_VAR 0 9
49315: PUSH
49316: LD_INT 10
49318: PUSH
49319: LD_INT 5
49321: PUSH
49322: LD_INT 3
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49330: LD_VAR 0 6
49334: PPUSH
49335: CALL_OW 257
49339: PUSH
49340: LD_INT 14
49342: EQUAL
49343: IFFALSE 49364
// points := [ 10 , 0 , 0 ] ;
49345: LD_ADDR_VAR 0 9
49349: PUSH
49350: LD_INT 10
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49364: LD_VAR 0 6
49368: PPUSH
49369: CALL_OW 257
49373: PUSH
49374: LD_INT 11
49376: EQUAL
49377: IFFALSE 49398
// points := [ 30 , 10 , 5 ] ;
49379: LD_ADDR_VAR 0 9
49383: PUSH
49384: LD_INT 30
49386: PUSH
49387: LD_INT 10
49389: PUSH
49390: LD_INT 5
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49398: LD_VAR 0 1
49402: PPUSH
49403: LD_INT 5
49405: PPUSH
49406: CALL_OW 321
49410: PUSH
49411: LD_INT 2
49413: EQUAL
49414: IFFALSE 49431
// bpoints := bpoints * 1.8 ;
49416: LD_ADDR_VAR 0 10
49420: PUSH
49421: LD_VAR 0 10
49425: PUSH
49426: LD_REAL  1.80000000000000E+0000
49429: MUL
49430: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49431: LD_VAR 0 6
49435: PPUSH
49436: CALL_OW 257
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: LD_INT 4
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: IN
49459: PUSH
49460: LD_VAR 0 1
49464: PPUSH
49465: LD_INT 51
49467: PPUSH
49468: CALL_OW 321
49472: PUSH
49473: LD_INT 2
49475: EQUAL
49476: AND
49477: IFFALSE 49494
// bpoints := bpoints * 1.2 ;
49479: LD_ADDR_VAR 0 10
49483: PUSH
49484: LD_VAR 0 10
49488: PUSH
49489: LD_REAL  1.20000000000000E+0000
49492: MUL
49493: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49494: LD_VAR 0 6
49498: PPUSH
49499: CALL_OW 257
49503: PUSH
49504: LD_INT 5
49506: PUSH
49507: LD_INT 7
49509: PUSH
49510: LD_INT 9
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: IN
49518: PUSH
49519: LD_VAR 0 1
49523: PPUSH
49524: LD_INT 52
49526: PPUSH
49527: CALL_OW 321
49531: PUSH
49532: LD_INT 2
49534: EQUAL
49535: AND
49536: IFFALSE 49553
// bpoints := bpoints * 1.5 ;
49538: LD_ADDR_VAR 0 10
49542: PUSH
49543: LD_VAR 0 10
49547: PUSH
49548: LD_REAL  1.50000000000000E+0000
49551: MUL
49552: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49553: LD_VAR 0 1
49557: PPUSH
49558: LD_INT 66
49560: PPUSH
49561: CALL_OW 321
49565: PUSH
49566: LD_INT 2
49568: EQUAL
49569: IFFALSE 49586
// bpoints := bpoints * 1.1 ;
49571: LD_ADDR_VAR 0 10
49575: PUSH
49576: LD_VAR 0 10
49580: PUSH
49581: LD_REAL  1.10000000000000E+0000
49584: MUL
49585: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49586: LD_ADDR_VAR 0 10
49590: PUSH
49591: LD_VAR 0 10
49595: PUSH
49596: LD_VAR 0 6
49600: PPUSH
49601: LD_INT 1
49603: PPUSH
49604: CALL_OW 259
49608: PUSH
49609: LD_REAL  1.15000000000000E+0000
49612: MUL
49613: MUL
49614: ST_TO_ADDR
// end ; unit_vehicle :
49615: GO 50443
49617: LD_INT 2
49619: DOUBLE
49620: EQUAL
49621: IFTRUE 49625
49623: GO 50431
49625: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49626: LD_VAR 0 6
49630: PPUSH
49631: CALL_OW 264
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 42
49641: PUSH
49642: LD_INT 24
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: IN
49650: IFFALSE 49671
// points := [ 25 , 5 , 3 ] ;
49652: LD_ADDR_VAR 0 9
49656: PUSH
49657: LD_INT 25
49659: PUSH
49660: LD_INT 5
49662: PUSH
49663: LD_INT 3
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: LIST
49670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49671: LD_VAR 0 6
49675: PPUSH
49676: CALL_OW 264
49680: PUSH
49681: LD_INT 4
49683: PUSH
49684: LD_INT 43
49686: PUSH
49687: LD_INT 25
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: LIST
49694: IN
49695: IFFALSE 49716
// points := [ 40 , 15 , 5 ] ;
49697: LD_ADDR_VAR 0 9
49701: PUSH
49702: LD_INT 40
49704: PUSH
49705: LD_INT 15
49707: PUSH
49708: LD_INT 5
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49716: LD_VAR 0 6
49720: PPUSH
49721: CALL_OW 264
49725: PUSH
49726: LD_INT 3
49728: PUSH
49729: LD_INT 23
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: IN
49736: IFFALSE 49757
// points := [ 7 , 25 , 8 ] ;
49738: LD_ADDR_VAR 0 9
49742: PUSH
49743: LD_INT 7
49745: PUSH
49746: LD_INT 25
49748: PUSH
49749: LD_INT 8
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: LIST
49756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49757: LD_VAR 0 6
49761: PPUSH
49762: CALL_OW 264
49766: PUSH
49767: LD_INT 5
49769: PUSH
49770: LD_INT 27
49772: PUSH
49773: LD_INT 44
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: IN
49781: IFFALSE 49802
// points := [ 14 , 50 , 16 ] ;
49783: LD_ADDR_VAR 0 9
49787: PUSH
49788: LD_INT 14
49790: PUSH
49791: LD_INT 50
49793: PUSH
49794: LD_INT 16
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: LIST
49801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49802: LD_VAR 0 6
49806: PPUSH
49807: CALL_OW 264
49811: PUSH
49812: LD_INT 6
49814: PUSH
49815: LD_INT 46
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: IN
49822: IFFALSE 49843
// points := [ 32 , 120 , 70 ] ;
49824: LD_ADDR_VAR 0 9
49828: PUSH
49829: LD_INT 32
49831: PUSH
49832: LD_INT 120
49834: PUSH
49835: LD_INT 70
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: LIST
49842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49843: LD_VAR 0 6
49847: PPUSH
49848: CALL_OW 264
49852: PUSH
49853: LD_INT 7
49855: PUSH
49856: LD_INT 28
49858: PUSH
49859: LD_INT 45
49861: PUSH
49862: LD_INT 92
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: IN
49871: IFFALSE 49892
// points := [ 35 , 20 , 45 ] ;
49873: LD_ADDR_VAR 0 9
49877: PUSH
49878: LD_INT 35
49880: PUSH
49881: LD_INT 20
49883: PUSH
49884: LD_INT 45
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49892: LD_VAR 0 6
49896: PPUSH
49897: CALL_OW 264
49901: PUSH
49902: LD_INT 47
49904: PUSH
49905: EMPTY
49906: LIST
49907: IN
49908: IFFALSE 49929
// points := [ 67 , 45 , 75 ] ;
49910: LD_ADDR_VAR 0 9
49914: PUSH
49915: LD_INT 67
49917: PUSH
49918: LD_INT 45
49920: PUSH
49921: LD_INT 75
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: LIST
49928: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49929: LD_VAR 0 6
49933: PPUSH
49934: CALL_OW 264
49938: PUSH
49939: LD_INT 26
49941: PUSH
49942: EMPTY
49943: LIST
49944: IN
49945: IFFALSE 49966
// points := [ 120 , 30 , 80 ] ;
49947: LD_ADDR_VAR 0 9
49951: PUSH
49952: LD_INT 120
49954: PUSH
49955: LD_INT 30
49957: PUSH
49958: LD_INT 80
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: LIST
49965: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49966: LD_VAR 0 6
49970: PPUSH
49971: CALL_OW 264
49975: PUSH
49976: LD_INT 22
49978: PUSH
49979: EMPTY
49980: LIST
49981: IN
49982: IFFALSE 50003
// points := [ 40 , 1 , 1 ] ;
49984: LD_ADDR_VAR 0 9
49988: PUSH
49989: LD_INT 40
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: LIST
50002: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50003: LD_VAR 0 6
50007: PPUSH
50008: CALL_OW 264
50012: PUSH
50013: LD_INT 29
50015: PUSH
50016: EMPTY
50017: LIST
50018: IN
50019: IFFALSE 50040
// points := [ 70 , 200 , 400 ] ;
50021: LD_ADDR_VAR 0 9
50025: PUSH
50026: LD_INT 70
50028: PUSH
50029: LD_INT 200
50031: PUSH
50032: LD_INT 400
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: LIST
50039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50040: LD_VAR 0 6
50044: PPUSH
50045: CALL_OW 264
50049: PUSH
50050: LD_INT 14
50052: PUSH
50053: LD_INT 53
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: IN
50060: IFFALSE 50081
// points := [ 40 , 10 , 20 ] ;
50062: LD_ADDR_VAR 0 9
50066: PUSH
50067: LD_INT 40
50069: PUSH
50070: LD_INT 10
50072: PUSH
50073: LD_INT 20
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: LIST
50080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50081: LD_VAR 0 6
50085: PPUSH
50086: CALL_OW 264
50090: PUSH
50091: LD_INT 9
50093: PUSH
50094: EMPTY
50095: LIST
50096: IN
50097: IFFALSE 50118
// points := [ 5 , 70 , 20 ] ;
50099: LD_ADDR_VAR 0 9
50103: PUSH
50104: LD_INT 5
50106: PUSH
50107: LD_INT 70
50109: PUSH
50110: LD_INT 20
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: LIST
50117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50118: LD_VAR 0 6
50122: PPUSH
50123: CALL_OW 264
50127: PUSH
50128: LD_INT 10
50130: PUSH
50131: EMPTY
50132: LIST
50133: IN
50134: IFFALSE 50155
// points := [ 35 , 110 , 70 ] ;
50136: LD_ADDR_VAR 0 9
50140: PUSH
50141: LD_INT 35
50143: PUSH
50144: LD_INT 110
50146: PUSH
50147: LD_INT 70
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: LIST
50154: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50155: LD_VAR 0 6
50159: PPUSH
50160: CALL_OW 265
50164: PUSH
50165: LD_INT 25
50167: EQUAL
50168: IFFALSE 50189
// points := [ 80 , 65 , 100 ] ;
50170: LD_ADDR_VAR 0 9
50174: PUSH
50175: LD_INT 80
50177: PUSH
50178: LD_INT 65
50180: PUSH
50181: LD_INT 100
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: LIST
50188: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50189: LD_VAR 0 6
50193: PPUSH
50194: CALL_OW 263
50198: PUSH
50199: LD_INT 1
50201: EQUAL
50202: IFFALSE 50237
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50204: LD_ADDR_VAR 0 10
50208: PUSH
50209: LD_VAR 0 10
50213: PUSH
50214: LD_VAR 0 6
50218: PPUSH
50219: CALL_OW 311
50223: PPUSH
50224: LD_INT 3
50226: PPUSH
50227: CALL_OW 259
50231: PUSH
50232: LD_INT 4
50234: MUL
50235: MUL
50236: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50237: LD_VAR 0 6
50241: PPUSH
50242: CALL_OW 263
50246: PUSH
50247: LD_INT 2
50249: EQUAL
50250: IFFALSE 50301
// begin j := IsControledBy ( i ) ;
50252: LD_ADDR_VAR 0 7
50256: PUSH
50257: LD_VAR 0 6
50261: PPUSH
50262: CALL_OW 312
50266: ST_TO_ADDR
// if j then
50267: LD_VAR 0 7
50271: IFFALSE 50301
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50273: LD_ADDR_VAR 0 10
50277: PUSH
50278: LD_VAR 0 10
50282: PUSH
50283: LD_VAR 0 7
50287: PPUSH
50288: LD_INT 3
50290: PPUSH
50291: CALL_OW 259
50295: PUSH
50296: LD_INT 3
50298: MUL
50299: MUL
50300: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50301: LD_VAR 0 6
50305: PPUSH
50306: CALL_OW 264
50310: PUSH
50311: LD_INT 5
50313: PUSH
50314: LD_INT 6
50316: PUSH
50317: LD_INT 46
50319: PUSH
50320: LD_INT 44
50322: PUSH
50323: LD_INT 47
50325: PUSH
50326: LD_INT 45
50328: PUSH
50329: LD_INT 28
50331: PUSH
50332: LD_INT 7
50334: PUSH
50335: LD_INT 27
50337: PUSH
50338: LD_INT 29
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: IN
50353: PUSH
50354: LD_VAR 0 1
50358: PPUSH
50359: LD_INT 52
50361: PPUSH
50362: CALL_OW 321
50366: PUSH
50367: LD_INT 2
50369: EQUAL
50370: AND
50371: IFFALSE 50388
// bpoints := bpoints * 1.2 ;
50373: LD_ADDR_VAR 0 10
50377: PUSH
50378: LD_VAR 0 10
50382: PUSH
50383: LD_REAL  1.20000000000000E+0000
50386: MUL
50387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50388: LD_VAR 0 6
50392: PPUSH
50393: CALL_OW 264
50397: PUSH
50398: LD_INT 6
50400: PUSH
50401: LD_INT 46
50403: PUSH
50404: LD_INT 47
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: IN
50412: IFFALSE 50429
// bpoints := bpoints * 1.2 ;
50414: LD_ADDR_VAR 0 10
50418: PUSH
50419: LD_VAR 0 10
50423: PUSH
50424: LD_REAL  1.20000000000000E+0000
50427: MUL
50428: ST_TO_ADDR
// end ; unit_building :
50429: GO 50443
50431: LD_INT 3
50433: DOUBLE
50434: EQUAL
50435: IFTRUE 50439
50437: GO 50442
50439: POP
// ; end ;
50440: GO 50443
50442: POP
// for j = 1 to 3 do
50443: LD_ADDR_VAR 0 7
50447: PUSH
50448: DOUBLE
50449: LD_INT 1
50451: DEC
50452: ST_TO_ADDR
50453: LD_INT 3
50455: PUSH
50456: FOR_TO
50457: IFFALSE 50510
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50459: LD_ADDR_VAR 0 5
50463: PUSH
50464: LD_VAR 0 5
50468: PPUSH
50469: LD_VAR 0 7
50473: PPUSH
50474: LD_VAR 0 5
50478: PUSH
50479: LD_VAR 0 7
50483: ARRAY
50484: PUSH
50485: LD_VAR 0 9
50489: PUSH
50490: LD_VAR 0 7
50494: ARRAY
50495: PUSH
50496: LD_VAR 0 10
50500: MUL
50501: PLUS
50502: PPUSH
50503: CALL_OW 1
50507: ST_TO_ADDR
50508: GO 50456
50510: POP
50511: POP
// end ;
50512: GO 48991
50514: POP
50515: POP
// result := Replace ( result , 4 , tmp ) ;
50516: LD_ADDR_VAR 0 5
50520: PUSH
50521: LD_VAR 0 5
50525: PPUSH
50526: LD_INT 4
50528: PPUSH
50529: LD_VAR 0 8
50533: PPUSH
50534: CALL_OW 1
50538: ST_TO_ADDR
// end ;
50539: LD_VAR 0 5
50543: RET
// export function DangerAtRange ( unit , range ) ; begin
50544: LD_INT 0
50546: PPUSH
// if not unit then
50547: LD_VAR 0 1
50551: NOT
50552: IFFALSE 50556
// exit ;
50554: GO 50601
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50556: LD_ADDR_VAR 0 3
50560: PUSH
50561: LD_VAR 0 1
50565: PPUSH
50566: CALL_OW 255
50570: PPUSH
50571: LD_VAR 0 1
50575: PPUSH
50576: CALL_OW 250
50580: PPUSH
50581: LD_VAR 0 1
50585: PPUSH
50586: CALL_OW 251
50590: PPUSH
50591: LD_VAR 0 2
50595: PPUSH
50596: CALL 48843 0 4
50600: ST_TO_ADDR
// end ;
50601: LD_VAR 0 3
50605: RET
// export function DangerInArea ( side , area ) ; begin
50606: LD_INT 0
50608: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50609: LD_ADDR_VAR 0 3
50613: PUSH
50614: LD_VAR 0 2
50618: PPUSH
50619: LD_INT 81
50621: PUSH
50622: LD_VAR 0 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PPUSH
50631: CALL_OW 70
50635: ST_TO_ADDR
// end ;
50636: LD_VAR 0 3
50640: RET
// export function IsExtension ( b ) ; begin
50641: LD_INT 0
50643: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50644: LD_ADDR_VAR 0 2
50648: PUSH
50649: LD_VAR 0 1
50653: PUSH
50654: LD_INT 23
50656: PUSH
50657: LD_INT 20
50659: PUSH
50660: LD_INT 22
50662: PUSH
50663: LD_INT 17
50665: PUSH
50666: LD_INT 24
50668: PUSH
50669: LD_INT 21
50671: PUSH
50672: LD_INT 19
50674: PUSH
50675: LD_INT 16
50677: PUSH
50678: LD_INT 25
50680: PUSH
50681: LD_INT 18
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: IN
50696: ST_TO_ADDR
// end ;
50697: LD_VAR 0 2
50701: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50702: LD_INT 0
50704: PPUSH
50705: PPUSH
50706: PPUSH
// result := [ ] ;
50707: LD_ADDR_VAR 0 4
50711: PUSH
50712: EMPTY
50713: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50714: LD_ADDR_VAR 0 5
50718: PUSH
50719: LD_VAR 0 2
50723: PPUSH
50724: LD_INT 21
50726: PUSH
50727: LD_INT 3
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PPUSH
50734: CALL_OW 70
50738: ST_TO_ADDR
// if not tmp then
50739: LD_VAR 0 5
50743: NOT
50744: IFFALSE 50748
// exit ;
50746: GO 50812
// if checkLink then
50748: LD_VAR 0 3
50752: IFFALSE 50802
// begin for i in tmp do
50754: LD_ADDR_VAR 0 6
50758: PUSH
50759: LD_VAR 0 5
50763: PUSH
50764: FOR_IN
50765: IFFALSE 50800
// if GetBase ( i ) <> base then
50767: LD_VAR 0 6
50771: PPUSH
50772: CALL_OW 274
50776: PUSH
50777: LD_VAR 0 1
50781: NONEQUAL
50782: IFFALSE 50798
// ComLinkToBase ( base , i ) ;
50784: LD_VAR 0 1
50788: PPUSH
50789: LD_VAR 0 6
50793: PPUSH
50794: CALL_OW 169
50798: GO 50764
50800: POP
50801: POP
// end ; result := tmp ;
50802: LD_ADDR_VAR 0 4
50806: PUSH
50807: LD_VAR 0 5
50811: ST_TO_ADDR
// end ;
50812: LD_VAR 0 4
50816: RET
// export function ComComplete ( units , b ) ; var i ; begin
50817: LD_INT 0
50819: PPUSH
50820: PPUSH
// if not units then
50821: LD_VAR 0 1
50825: NOT
50826: IFFALSE 50830
// exit ;
50828: GO 50920
// for i in units do
50830: LD_ADDR_VAR 0 4
50834: PUSH
50835: LD_VAR 0 1
50839: PUSH
50840: FOR_IN
50841: IFFALSE 50918
// if BuildingStatus ( b ) = bs_build then
50843: LD_VAR 0 2
50847: PPUSH
50848: CALL_OW 461
50852: PUSH
50853: LD_INT 1
50855: EQUAL
50856: IFFALSE 50916
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50858: LD_VAR 0 4
50862: PPUSH
50863: LD_STRING h
50865: PUSH
50866: LD_VAR 0 2
50870: PPUSH
50871: CALL_OW 250
50875: PUSH
50876: LD_VAR 0 2
50880: PPUSH
50881: CALL_OW 251
50885: PUSH
50886: LD_VAR 0 2
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: PUSH
50909: EMPTY
50910: LIST
50911: PPUSH
50912: CALL_OW 446
50916: GO 50840
50918: POP
50919: POP
// end ;
50920: LD_VAR 0 3
50924: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50925: LD_INT 0
50927: PPUSH
50928: PPUSH
50929: PPUSH
50930: PPUSH
50931: PPUSH
50932: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50933: LD_VAR 0 1
50937: NOT
50938: PUSH
50939: LD_VAR 0 1
50943: PPUSH
50944: CALL_OW 263
50948: PUSH
50949: LD_INT 2
50951: NONEQUAL
50952: OR
50953: IFFALSE 50957
// exit ;
50955: GO 51273
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50957: LD_ADDR_VAR 0 6
50961: PUSH
50962: LD_INT 22
50964: PUSH
50965: LD_VAR 0 1
50969: PPUSH
50970: CALL_OW 255
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: LD_INT 30
50984: PUSH
50985: LD_INT 36
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 34
50994: PUSH
50995: LD_INT 31
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PPUSH
51011: CALL_OW 69
51015: ST_TO_ADDR
// if not tmp then
51016: LD_VAR 0 6
51020: NOT
51021: IFFALSE 51025
// exit ;
51023: GO 51273
// result := [ ] ;
51025: LD_ADDR_VAR 0 2
51029: PUSH
51030: EMPTY
51031: ST_TO_ADDR
// for i in tmp do
51032: LD_ADDR_VAR 0 3
51036: PUSH
51037: LD_VAR 0 6
51041: PUSH
51042: FOR_IN
51043: IFFALSE 51114
// begin t := UnitsInside ( i ) ;
51045: LD_ADDR_VAR 0 4
51049: PUSH
51050: LD_VAR 0 3
51054: PPUSH
51055: CALL_OW 313
51059: ST_TO_ADDR
// if t then
51060: LD_VAR 0 4
51064: IFFALSE 51112
// for j in t do
51066: LD_ADDR_VAR 0 7
51070: PUSH
51071: LD_VAR 0 4
51075: PUSH
51076: FOR_IN
51077: IFFALSE 51110
// result := Replace ( result , result + 1 , j ) ;
51079: LD_ADDR_VAR 0 2
51083: PUSH
51084: LD_VAR 0 2
51088: PPUSH
51089: LD_VAR 0 2
51093: PUSH
51094: LD_INT 1
51096: PLUS
51097: PPUSH
51098: LD_VAR 0 7
51102: PPUSH
51103: CALL_OW 1
51107: ST_TO_ADDR
51108: GO 51076
51110: POP
51111: POP
// end ;
51112: GO 51042
51114: POP
51115: POP
// if not result then
51116: LD_VAR 0 2
51120: NOT
51121: IFFALSE 51125
// exit ;
51123: GO 51273
// mech := result [ 1 ] ;
51125: LD_ADDR_VAR 0 5
51129: PUSH
51130: LD_VAR 0 2
51134: PUSH
51135: LD_INT 1
51137: ARRAY
51138: ST_TO_ADDR
// if result > 1 then
51139: LD_VAR 0 2
51143: PUSH
51144: LD_INT 1
51146: GREATER
51147: IFFALSE 51259
// begin for i = 2 to result do
51149: LD_ADDR_VAR 0 3
51153: PUSH
51154: DOUBLE
51155: LD_INT 2
51157: DEC
51158: ST_TO_ADDR
51159: LD_VAR 0 2
51163: PUSH
51164: FOR_TO
51165: IFFALSE 51257
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51167: LD_ADDR_VAR 0 4
51171: PUSH
51172: LD_VAR 0 2
51176: PUSH
51177: LD_VAR 0 3
51181: ARRAY
51182: PPUSH
51183: LD_INT 3
51185: PPUSH
51186: CALL_OW 259
51190: PUSH
51191: LD_VAR 0 2
51195: PUSH
51196: LD_VAR 0 3
51200: ARRAY
51201: PPUSH
51202: CALL_OW 432
51206: MINUS
51207: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51208: LD_VAR 0 4
51212: PUSH
51213: LD_VAR 0 5
51217: PPUSH
51218: LD_INT 3
51220: PPUSH
51221: CALL_OW 259
51225: PUSH
51226: LD_VAR 0 5
51230: PPUSH
51231: CALL_OW 432
51235: MINUS
51236: GREATEREQUAL
51237: IFFALSE 51255
// mech := result [ i ] ;
51239: LD_ADDR_VAR 0 5
51243: PUSH
51244: LD_VAR 0 2
51248: PUSH
51249: LD_VAR 0 3
51253: ARRAY
51254: ST_TO_ADDR
// end ;
51255: GO 51164
51257: POP
51258: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51259: LD_VAR 0 1
51263: PPUSH
51264: LD_VAR 0 5
51268: PPUSH
51269: CALL_OW 135
// end ;
51273: LD_VAR 0 2
51277: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51278: LD_INT 0
51280: PPUSH
51281: PPUSH
51282: PPUSH
51283: PPUSH
51284: PPUSH
51285: PPUSH
51286: PPUSH
51287: PPUSH
51288: PPUSH
51289: PPUSH
51290: PPUSH
51291: PPUSH
51292: PPUSH
// result := [ ] ;
51293: LD_ADDR_VAR 0 7
51297: PUSH
51298: EMPTY
51299: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51300: LD_VAR 0 1
51304: PPUSH
51305: CALL_OW 266
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: IN
51320: NOT
51321: IFFALSE 51325
// exit ;
51323: GO 52959
// if name then
51325: LD_VAR 0 3
51329: IFFALSE 51345
// SetBName ( base_dep , name ) ;
51331: LD_VAR 0 1
51335: PPUSH
51336: LD_VAR 0 3
51340: PPUSH
51341: CALL_OW 500
// base := GetBase ( base_dep ) ;
51345: LD_ADDR_VAR 0 15
51349: PUSH
51350: LD_VAR 0 1
51354: PPUSH
51355: CALL_OW 274
51359: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51360: LD_ADDR_VAR 0 16
51364: PUSH
51365: LD_VAR 0 1
51369: PPUSH
51370: CALL_OW 255
51374: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51375: LD_ADDR_VAR 0 17
51379: PUSH
51380: LD_VAR 0 1
51384: PPUSH
51385: CALL_OW 248
51389: ST_TO_ADDR
// if sources then
51390: LD_VAR 0 5
51394: IFFALSE 51441
// for i = 1 to 3 do
51396: LD_ADDR_VAR 0 8
51400: PUSH
51401: DOUBLE
51402: LD_INT 1
51404: DEC
51405: ST_TO_ADDR
51406: LD_INT 3
51408: PUSH
51409: FOR_TO
51410: IFFALSE 51439
// AddResourceType ( base , i , sources [ i ] ) ;
51412: LD_VAR 0 15
51416: PPUSH
51417: LD_VAR 0 8
51421: PPUSH
51422: LD_VAR 0 5
51426: PUSH
51427: LD_VAR 0 8
51431: ARRAY
51432: PPUSH
51433: CALL_OW 276
51437: GO 51409
51439: POP
51440: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51441: LD_ADDR_VAR 0 18
51445: PUSH
51446: LD_VAR 0 15
51450: PPUSH
51451: LD_VAR 0 2
51455: PPUSH
51456: LD_INT 1
51458: PPUSH
51459: CALL 50702 0 3
51463: ST_TO_ADDR
// InitHc ;
51464: CALL_OW 19
// InitUc ;
51468: CALL_OW 18
// uc_side := side ;
51472: LD_ADDR_OWVAR 20
51476: PUSH
51477: LD_VAR 0 16
51481: ST_TO_ADDR
// uc_nation := nation ;
51482: LD_ADDR_OWVAR 21
51486: PUSH
51487: LD_VAR 0 17
51491: ST_TO_ADDR
// if buildings then
51492: LD_VAR 0 18
51496: IFFALSE 52818
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51498: LD_ADDR_VAR 0 19
51502: PUSH
51503: LD_VAR 0 18
51507: PPUSH
51508: LD_INT 2
51510: PUSH
51511: LD_INT 30
51513: PUSH
51514: LD_INT 29
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 30
51523: PUSH
51524: LD_INT 30
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: LIST
51535: PPUSH
51536: CALL_OW 72
51540: ST_TO_ADDR
// if tmp then
51541: LD_VAR 0 19
51545: IFFALSE 51593
// for i in tmp do
51547: LD_ADDR_VAR 0 8
51551: PUSH
51552: LD_VAR 0 19
51556: PUSH
51557: FOR_IN
51558: IFFALSE 51591
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51560: LD_VAR 0 8
51564: PPUSH
51565: CALL_OW 250
51569: PPUSH
51570: LD_VAR 0 8
51574: PPUSH
51575: CALL_OW 251
51579: PPUSH
51580: LD_VAR 0 16
51584: PPUSH
51585: CALL_OW 441
51589: GO 51557
51591: POP
51592: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51593: LD_VAR 0 18
51597: PPUSH
51598: LD_INT 2
51600: PUSH
51601: LD_INT 30
51603: PUSH
51604: LD_INT 32
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 30
51613: PUSH
51614: LD_INT 33
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: LIST
51625: PPUSH
51626: CALL_OW 72
51630: IFFALSE 51718
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51632: LD_ADDR_VAR 0 8
51636: PUSH
51637: LD_VAR 0 18
51641: PPUSH
51642: LD_INT 2
51644: PUSH
51645: LD_INT 30
51647: PUSH
51648: LD_INT 32
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 30
51657: PUSH
51658: LD_INT 33
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: LIST
51669: PPUSH
51670: CALL_OW 72
51674: PUSH
51675: FOR_IN
51676: IFFALSE 51716
// begin if not GetBWeapon ( i ) then
51678: LD_VAR 0 8
51682: PPUSH
51683: CALL_OW 269
51687: NOT
51688: IFFALSE 51714
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51690: LD_VAR 0 8
51694: PPUSH
51695: LD_VAR 0 8
51699: PPUSH
51700: LD_VAR 0 2
51704: PPUSH
51705: CALL 52964 0 2
51709: PPUSH
51710: CALL_OW 431
// end ;
51714: GO 51675
51716: POP
51717: POP
// end ; for i = 1 to personel do
51718: LD_ADDR_VAR 0 8
51722: PUSH
51723: DOUBLE
51724: LD_INT 1
51726: DEC
51727: ST_TO_ADDR
51728: LD_VAR 0 6
51732: PUSH
51733: FOR_TO
51734: IFFALSE 52798
// begin if i > 4 then
51736: LD_VAR 0 8
51740: PUSH
51741: LD_INT 4
51743: GREATER
51744: IFFALSE 51748
// break ;
51746: GO 52798
// case i of 1 :
51748: LD_VAR 0 8
51752: PUSH
51753: LD_INT 1
51755: DOUBLE
51756: EQUAL
51757: IFTRUE 51761
51759: GO 51841
51761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51762: LD_ADDR_VAR 0 12
51766: PUSH
51767: LD_VAR 0 18
51771: PPUSH
51772: LD_INT 22
51774: PUSH
51775: LD_VAR 0 16
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 58
51786: PUSH
51787: EMPTY
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: LD_INT 30
51795: PUSH
51796: LD_INT 32
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 30
51805: PUSH
51806: LD_INT 4
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 30
51815: PUSH
51816: LD_INT 5
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: LIST
51833: PPUSH
51834: CALL_OW 72
51838: ST_TO_ADDR
51839: GO 52063
51841: LD_INT 2
51843: DOUBLE
51844: EQUAL
51845: IFTRUE 51849
51847: GO 51911
51849: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51850: LD_ADDR_VAR 0 12
51854: PUSH
51855: LD_VAR 0 18
51859: PPUSH
51860: LD_INT 22
51862: PUSH
51863: LD_VAR 0 16
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: LD_INT 30
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 30
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: LIST
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PPUSH
51904: CALL_OW 72
51908: ST_TO_ADDR
51909: GO 52063
51911: LD_INT 3
51913: DOUBLE
51914: EQUAL
51915: IFTRUE 51919
51917: GO 51981
51919: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51920: LD_ADDR_VAR 0 12
51924: PUSH
51925: LD_VAR 0 18
51929: PPUSH
51930: LD_INT 22
51932: PUSH
51933: LD_VAR 0 16
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: LD_INT 30
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 30
51957: PUSH
51958: LD_INT 3
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: LIST
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PPUSH
51974: CALL_OW 72
51978: ST_TO_ADDR
51979: GO 52063
51981: LD_INT 4
51983: DOUBLE
51984: EQUAL
51985: IFTRUE 51989
51987: GO 52062
51989: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51990: LD_ADDR_VAR 0 12
51994: PUSH
51995: LD_VAR 0 18
51999: PPUSH
52000: LD_INT 22
52002: PUSH
52003: LD_VAR 0 16
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: LD_INT 30
52017: PUSH
52018: LD_INT 6
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 30
52027: PUSH
52028: LD_INT 7
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 30
52037: PUSH
52038: LD_INT 8
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PPUSH
52055: CALL_OW 72
52059: ST_TO_ADDR
52060: GO 52063
52062: POP
// if i = 1 then
52063: LD_VAR 0 8
52067: PUSH
52068: LD_INT 1
52070: EQUAL
52071: IFFALSE 52182
// begin tmp := [ ] ;
52073: LD_ADDR_VAR 0 19
52077: PUSH
52078: EMPTY
52079: ST_TO_ADDR
// for j in f do
52080: LD_ADDR_VAR 0 9
52084: PUSH
52085: LD_VAR 0 12
52089: PUSH
52090: FOR_IN
52091: IFFALSE 52164
// if GetBType ( j ) = b_bunker then
52093: LD_VAR 0 9
52097: PPUSH
52098: CALL_OW 266
52102: PUSH
52103: LD_INT 32
52105: EQUAL
52106: IFFALSE 52133
// tmp := Insert ( tmp , 1 , j ) else
52108: LD_ADDR_VAR 0 19
52112: PUSH
52113: LD_VAR 0 19
52117: PPUSH
52118: LD_INT 1
52120: PPUSH
52121: LD_VAR 0 9
52125: PPUSH
52126: CALL_OW 2
52130: ST_TO_ADDR
52131: GO 52162
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52133: LD_ADDR_VAR 0 19
52137: PUSH
52138: LD_VAR 0 19
52142: PPUSH
52143: LD_VAR 0 19
52147: PUSH
52148: LD_INT 1
52150: PLUS
52151: PPUSH
52152: LD_VAR 0 9
52156: PPUSH
52157: CALL_OW 2
52161: ST_TO_ADDR
52162: GO 52090
52164: POP
52165: POP
// if tmp then
52166: LD_VAR 0 19
52170: IFFALSE 52182
// f := tmp ;
52172: LD_ADDR_VAR 0 12
52176: PUSH
52177: LD_VAR 0 19
52181: ST_TO_ADDR
// end ; x := personel [ i ] ;
52182: LD_ADDR_VAR 0 13
52186: PUSH
52187: LD_VAR 0 6
52191: PUSH
52192: LD_VAR 0 8
52196: ARRAY
52197: ST_TO_ADDR
// if x = - 1 then
52198: LD_VAR 0 13
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: EQUAL
52207: IFFALSE 52416
// begin for j in f do
52209: LD_ADDR_VAR 0 9
52213: PUSH
52214: LD_VAR 0 12
52218: PUSH
52219: FOR_IN
52220: IFFALSE 52412
// repeat InitHc ;
52222: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52226: LD_VAR 0 9
52230: PPUSH
52231: CALL_OW 266
52235: PUSH
52236: LD_INT 5
52238: EQUAL
52239: IFFALSE 52309
// begin if UnitsInside ( j ) < 3 then
52241: LD_VAR 0 9
52245: PPUSH
52246: CALL_OW 313
52250: PUSH
52251: LD_INT 3
52253: LESS
52254: IFFALSE 52290
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52256: LD_INT 0
52258: PPUSH
52259: LD_INT 5
52261: PUSH
52262: LD_INT 8
52264: PUSH
52265: LD_INT 9
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: PUSH
52273: LD_VAR 0 17
52277: ARRAY
52278: PPUSH
52279: LD_VAR 0 4
52283: PPUSH
52284: CALL_OW 380
52288: GO 52307
// PrepareHuman ( false , i , skill ) ;
52290: LD_INT 0
52292: PPUSH
52293: LD_VAR 0 8
52297: PPUSH
52298: LD_VAR 0 4
52302: PPUSH
52303: CALL_OW 380
// end else
52307: GO 52326
// PrepareHuman ( false , i , skill ) ;
52309: LD_INT 0
52311: PPUSH
52312: LD_VAR 0 8
52316: PPUSH
52317: LD_VAR 0 4
52321: PPUSH
52322: CALL_OW 380
// un := CreateHuman ;
52326: LD_ADDR_VAR 0 14
52330: PUSH
52331: CALL_OW 44
52335: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52336: LD_ADDR_VAR 0 7
52340: PUSH
52341: LD_VAR 0 7
52345: PPUSH
52346: LD_INT 1
52348: PPUSH
52349: LD_VAR 0 14
52353: PPUSH
52354: CALL_OW 2
52358: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52359: LD_VAR 0 14
52363: PPUSH
52364: LD_VAR 0 9
52368: PPUSH
52369: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52373: LD_VAR 0 9
52377: PPUSH
52378: CALL_OW 313
52382: PUSH
52383: LD_INT 6
52385: EQUAL
52386: PUSH
52387: LD_VAR 0 9
52391: PPUSH
52392: CALL_OW 266
52396: PUSH
52397: LD_INT 32
52399: PUSH
52400: LD_INT 31
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: IN
52407: OR
52408: IFFALSE 52222
52410: GO 52219
52412: POP
52413: POP
// end else
52414: GO 52796
// for j = 1 to x do
52416: LD_ADDR_VAR 0 9
52420: PUSH
52421: DOUBLE
52422: LD_INT 1
52424: DEC
52425: ST_TO_ADDR
52426: LD_VAR 0 13
52430: PUSH
52431: FOR_TO
52432: IFFALSE 52794
// begin InitHc ;
52434: CALL_OW 19
// if not f then
52438: LD_VAR 0 12
52442: NOT
52443: IFFALSE 52532
// begin PrepareHuman ( false , i , skill ) ;
52445: LD_INT 0
52447: PPUSH
52448: LD_VAR 0 8
52452: PPUSH
52453: LD_VAR 0 4
52457: PPUSH
52458: CALL_OW 380
// un := CreateHuman ;
52462: LD_ADDR_VAR 0 14
52466: PUSH
52467: CALL_OW 44
52471: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52472: LD_ADDR_VAR 0 7
52476: PUSH
52477: LD_VAR 0 7
52481: PPUSH
52482: LD_INT 1
52484: PPUSH
52485: LD_VAR 0 14
52489: PPUSH
52490: CALL_OW 2
52494: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52495: LD_VAR 0 14
52499: PPUSH
52500: LD_VAR 0 1
52504: PPUSH
52505: CALL_OW 250
52509: PPUSH
52510: LD_VAR 0 1
52514: PPUSH
52515: CALL_OW 251
52519: PPUSH
52520: LD_INT 10
52522: PPUSH
52523: LD_INT 0
52525: PPUSH
52526: CALL_OW 50
// continue ;
52530: GO 52431
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52532: LD_VAR 0 12
52536: PUSH
52537: LD_INT 1
52539: ARRAY
52540: PPUSH
52541: CALL_OW 313
52545: PUSH
52546: LD_VAR 0 12
52550: PUSH
52551: LD_INT 1
52553: ARRAY
52554: PPUSH
52555: CALL_OW 266
52559: PUSH
52560: LD_INT 32
52562: PUSH
52563: LD_INT 31
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: IN
52570: AND
52571: PUSH
52572: LD_VAR 0 12
52576: PUSH
52577: LD_INT 1
52579: ARRAY
52580: PPUSH
52581: CALL_OW 313
52585: PUSH
52586: LD_INT 6
52588: EQUAL
52589: OR
52590: IFFALSE 52610
// f := Delete ( f , 1 ) ;
52592: LD_ADDR_VAR 0 12
52596: PUSH
52597: LD_VAR 0 12
52601: PPUSH
52602: LD_INT 1
52604: PPUSH
52605: CALL_OW 3
52609: ST_TO_ADDR
// if not f then
52610: LD_VAR 0 12
52614: NOT
52615: IFFALSE 52633
// begin x := x + 2 ;
52617: LD_ADDR_VAR 0 13
52621: PUSH
52622: LD_VAR 0 13
52626: PUSH
52627: LD_INT 2
52629: PLUS
52630: ST_TO_ADDR
// continue ;
52631: GO 52431
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52633: LD_VAR 0 12
52637: PUSH
52638: LD_INT 1
52640: ARRAY
52641: PPUSH
52642: CALL_OW 266
52646: PUSH
52647: LD_INT 5
52649: EQUAL
52650: IFFALSE 52724
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52652: LD_VAR 0 12
52656: PUSH
52657: LD_INT 1
52659: ARRAY
52660: PPUSH
52661: CALL_OW 313
52665: PUSH
52666: LD_INT 3
52668: LESS
52669: IFFALSE 52705
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52671: LD_INT 0
52673: PPUSH
52674: LD_INT 5
52676: PUSH
52677: LD_INT 8
52679: PUSH
52680: LD_INT 9
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: LIST
52687: PUSH
52688: LD_VAR 0 17
52692: ARRAY
52693: PPUSH
52694: LD_VAR 0 4
52698: PPUSH
52699: CALL_OW 380
52703: GO 52722
// PrepareHuman ( false , i , skill ) ;
52705: LD_INT 0
52707: PPUSH
52708: LD_VAR 0 8
52712: PPUSH
52713: LD_VAR 0 4
52717: PPUSH
52718: CALL_OW 380
// end else
52722: GO 52741
// PrepareHuman ( false , i , skill ) ;
52724: LD_INT 0
52726: PPUSH
52727: LD_VAR 0 8
52731: PPUSH
52732: LD_VAR 0 4
52736: PPUSH
52737: CALL_OW 380
// un := CreateHuman ;
52741: LD_ADDR_VAR 0 14
52745: PUSH
52746: CALL_OW 44
52750: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52751: LD_ADDR_VAR 0 7
52755: PUSH
52756: LD_VAR 0 7
52760: PPUSH
52761: LD_INT 1
52763: PPUSH
52764: LD_VAR 0 14
52768: PPUSH
52769: CALL_OW 2
52773: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52774: LD_VAR 0 14
52778: PPUSH
52779: LD_VAR 0 12
52783: PUSH
52784: LD_INT 1
52786: ARRAY
52787: PPUSH
52788: CALL_OW 52
// end ;
52792: GO 52431
52794: POP
52795: POP
// end ;
52796: GO 51733
52798: POP
52799: POP
// result := result ^ buildings ;
52800: LD_ADDR_VAR 0 7
52804: PUSH
52805: LD_VAR 0 7
52809: PUSH
52810: LD_VAR 0 18
52814: ADD
52815: ST_TO_ADDR
// end else
52816: GO 52959
// begin for i = 1 to personel do
52818: LD_ADDR_VAR 0 8
52822: PUSH
52823: DOUBLE
52824: LD_INT 1
52826: DEC
52827: ST_TO_ADDR
52828: LD_VAR 0 6
52832: PUSH
52833: FOR_TO
52834: IFFALSE 52957
// begin if i > 4 then
52836: LD_VAR 0 8
52840: PUSH
52841: LD_INT 4
52843: GREATER
52844: IFFALSE 52848
// break ;
52846: GO 52957
// x := personel [ i ] ;
52848: LD_ADDR_VAR 0 13
52852: PUSH
52853: LD_VAR 0 6
52857: PUSH
52858: LD_VAR 0 8
52862: ARRAY
52863: ST_TO_ADDR
// if x = - 1 then
52864: LD_VAR 0 13
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: EQUAL
52873: IFFALSE 52877
// continue ;
52875: GO 52833
// PrepareHuman ( false , i , skill ) ;
52877: LD_INT 0
52879: PPUSH
52880: LD_VAR 0 8
52884: PPUSH
52885: LD_VAR 0 4
52889: PPUSH
52890: CALL_OW 380
// un := CreateHuman ;
52894: LD_ADDR_VAR 0 14
52898: PUSH
52899: CALL_OW 44
52903: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52904: LD_VAR 0 14
52908: PPUSH
52909: LD_VAR 0 1
52913: PPUSH
52914: CALL_OW 250
52918: PPUSH
52919: LD_VAR 0 1
52923: PPUSH
52924: CALL_OW 251
52928: PPUSH
52929: LD_INT 10
52931: PPUSH
52932: LD_INT 0
52934: PPUSH
52935: CALL_OW 50
// result := result ^ un ;
52939: LD_ADDR_VAR 0 7
52943: PUSH
52944: LD_VAR 0 7
52948: PUSH
52949: LD_VAR 0 14
52953: ADD
52954: ST_TO_ADDR
// end ;
52955: GO 52833
52957: POP
52958: POP
// end ; end ;
52959: LD_VAR 0 7
52963: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52964: LD_INT 0
52966: PPUSH
52967: PPUSH
52968: PPUSH
52969: PPUSH
52970: PPUSH
52971: PPUSH
52972: PPUSH
52973: PPUSH
52974: PPUSH
52975: PPUSH
52976: PPUSH
52977: PPUSH
52978: PPUSH
52979: PPUSH
52980: PPUSH
52981: PPUSH
// result := false ;
52982: LD_ADDR_VAR 0 3
52986: PUSH
52987: LD_INT 0
52989: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52990: LD_VAR 0 1
52994: NOT
52995: PUSH
52996: LD_VAR 0 1
53000: PPUSH
53001: CALL_OW 266
53005: PUSH
53006: LD_INT 32
53008: PUSH
53009: LD_INT 33
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: IN
53016: NOT
53017: OR
53018: IFFALSE 53022
// exit ;
53020: GO 54131
// nat := GetNation ( tower ) ;
53022: LD_ADDR_VAR 0 12
53026: PUSH
53027: LD_VAR 0 1
53031: PPUSH
53032: CALL_OW 248
53036: ST_TO_ADDR
// side := GetSide ( tower ) ;
53037: LD_ADDR_VAR 0 16
53041: PUSH
53042: LD_VAR 0 1
53046: PPUSH
53047: CALL_OW 255
53051: ST_TO_ADDR
// x := GetX ( tower ) ;
53052: LD_ADDR_VAR 0 10
53056: PUSH
53057: LD_VAR 0 1
53061: PPUSH
53062: CALL_OW 250
53066: ST_TO_ADDR
// y := GetY ( tower ) ;
53067: LD_ADDR_VAR 0 11
53071: PUSH
53072: LD_VAR 0 1
53076: PPUSH
53077: CALL_OW 251
53081: ST_TO_ADDR
// if not x or not y then
53082: LD_VAR 0 10
53086: NOT
53087: PUSH
53088: LD_VAR 0 11
53092: NOT
53093: OR
53094: IFFALSE 53098
// exit ;
53096: GO 54131
// weapon := 0 ;
53098: LD_ADDR_VAR 0 18
53102: PUSH
53103: LD_INT 0
53105: ST_TO_ADDR
// fac_list := [ ] ;
53106: LD_ADDR_VAR 0 17
53110: PUSH
53111: EMPTY
53112: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53113: LD_ADDR_VAR 0 6
53117: PUSH
53118: LD_VAR 0 1
53122: PPUSH
53123: CALL_OW 274
53127: PPUSH
53128: LD_VAR 0 2
53132: PPUSH
53133: LD_INT 0
53135: PPUSH
53136: CALL 50702 0 3
53140: PPUSH
53141: LD_INT 30
53143: PUSH
53144: LD_INT 3
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PPUSH
53151: CALL_OW 72
53155: ST_TO_ADDR
// if not factories then
53156: LD_VAR 0 6
53160: NOT
53161: IFFALSE 53165
// exit ;
53163: GO 54131
// for i in factories do
53165: LD_ADDR_VAR 0 8
53169: PUSH
53170: LD_VAR 0 6
53174: PUSH
53175: FOR_IN
53176: IFFALSE 53201
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53178: LD_ADDR_VAR 0 17
53182: PUSH
53183: LD_VAR 0 17
53187: PUSH
53188: LD_VAR 0 8
53192: PPUSH
53193: CALL_OW 478
53197: UNION
53198: ST_TO_ADDR
53199: GO 53175
53201: POP
53202: POP
// if not fac_list then
53203: LD_VAR 0 17
53207: NOT
53208: IFFALSE 53212
// exit ;
53210: GO 54131
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53212: LD_ADDR_VAR 0 5
53216: PUSH
53217: LD_INT 4
53219: PUSH
53220: LD_INT 5
53222: PUSH
53223: LD_INT 9
53225: PUSH
53226: LD_INT 10
53228: PUSH
53229: LD_INT 6
53231: PUSH
53232: LD_INT 7
53234: PUSH
53235: LD_INT 11
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 27
53249: PUSH
53250: LD_INT 28
53252: PUSH
53253: LD_INT 26
53255: PUSH
53256: LD_INT 30
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 43
53267: PUSH
53268: LD_INT 44
53270: PUSH
53271: LD_INT 46
53273: PUSH
53274: LD_INT 45
53276: PUSH
53277: LD_INT 47
53279: PUSH
53280: LD_INT 49
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: LIST
53295: PUSH
53296: LD_VAR 0 12
53300: ARRAY
53301: ST_TO_ADDR
// list := list isect fac_list ;
53302: LD_ADDR_VAR 0 5
53306: PUSH
53307: LD_VAR 0 5
53311: PUSH
53312: LD_VAR 0 17
53316: ISECT
53317: ST_TO_ADDR
// if not list then
53318: LD_VAR 0 5
53322: NOT
53323: IFFALSE 53327
// exit ;
53325: GO 54131
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53327: LD_VAR 0 12
53331: PUSH
53332: LD_INT 3
53334: EQUAL
53335: PUSH
53336: LD_INT 49
53338: PUSH
53339: LD_VAR 0 5
53343: IN
53344: AND
53345: PUSH
53346: LD_INT 31
53348: PPUSH
53349: LD_VAR 0 16
53353: PPUSH
53354: CALL_OW 321
53358: PUSH
53359: LD_INT 2
53361: EQUAL
53362: AND
53363: IFFALSE 53423
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53365: LD_INT 22
53367: PUSH
53368: LD_VAR 0 16
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 35
53379: PUSH
53380: LD_INT 49
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 91
53389: PUSH
53390: LD_VAR 0 1
53394: PUSH
53395: LD_INT 10
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: LIST
53407: PPUSH
53408: CALL_OW 69
53412: NOT
53413: IFFALSE 53423
// weapon := ru_time_lapser ;
53415: LD_ADDR_VAR 0 18
53419: PUSH
53420: LD_INT 49
53422: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53423: LD_VAR 0 12
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: LD_INT 2
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: IN
53438: PUSH
53439: LD_INT 11
53441: PUSH
53442: LD_VAR 0 5
53446: IN
53447: PUSH
53448: LD_INT 30
53450: PUSH
53451: LD_VAR 0 5
53455: IN
53456: OR
53457: AND
53458: PUSH
53459: LD_INT 6
53461: PPUSH
53462: LD_VAR 0 16
53466: PPUSH
53467: CALL_OW 321
53471: PUSH
53472: LD_INT 2
53474: EQUAL
53475: AND
53476: IFFALSE 53641
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53478: LD_INT 22
53480: PUSH
53481: LD_VAR 0 16
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: LD_INT 35
53495: PUSH
53496: LD_INT 11
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 35
53505: PUSH
53506: LD_INT 30
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 91
53520: PUSH
53521: LD_VAR 0 1
53525: PUSH
53526: LD_INT 18
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: LIST
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: LIST
53538: PPUSH
53539: CALL_OW 69
53543: NOT
53544: PUSH
53545: LD_INT 22
53547: PUSH
53548: LD_VAR 0 16
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: LD_INT 30
53562: PUSH
53563: LD_INT 32
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 30
53572: PUSH
53573: LD_INT 33
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 91
53587: PUSH
53588: LD_VAR 0 1
53592: PUSH
53593: LD_INT 12
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: LIST
53605: PUSH
53606: EMPTY
53607: LIST
53608: PPUSH
53609: CALL_OW 69
53613: PUSH
53614: LD_INT 2
53616: GREATER
53617: AND
53618: IFFALSE 53641
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53620: LD_ADDR_VAR 0 18
53624: PUSH
53625: LD_INT 11
53627: PUSH
53628: LD_INT 30
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_VAR 0 12
53639: ARRAY
53640: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53641: LD_VAR 0 18
53645: NOT
53646: PUSH
53647: LD_INT 40
53649: PPUSH
53650: LD_VAR 0 16
53654: PPUSH
53655: CALL_OW 321
53659: PUSH
53660: LD_INT 2
53662: EQUAL
53663: AND
53664: PUSH
53665: LD_INT 7
53667: PUSH
53668: LD_VAR 0 5
53672: IN
53673: PUSH
53674: LD_INT 28
53676: PUSH
53677: LD_VAR 0 5
53681: IN
53682: OR
53683: PUSH
53684: LD_INT 45
53686: PUSH
53687: LD_VAR 0 5
53691: IN
53692: OR
53693: AND
53694: IFFALSE 53948
// begin hex := GetHexInfo ( x , y ) ;
53696: LD_ADDR_VAR 0 4
53700: PUSH
53701: LD_VAR 0 10
53705: PPUSH
53706: LD_VAR 0 11
53710: PPUSH
53711: CALL_OW 546
53715: ST_TO_ADDR
// if hex [ 1 ] then
53716: LD_VAR 0 4
53720: PUSH
53721: LD_INT 1
53723: ARRAY
53724: IFFALSE 53728
// exit ;
53726: GO 54131
// height := hex [ 2 ] ;
53728: LD_ADDR_VAR 0 15
53732: PUSH
53733: LD_VAR 0 4
53737: PUSH
53738: LD_INT 2
53740: ARRAY
53741: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53742: LD_ADDR_VAR 0 14
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: LD_INT 3
53755: PUSH
53756: LD_INT 5
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: ST_TO_ADDR
// for i in tmp do
53765: LD_ADDR_VAR 0 8
53769: PUSH
53770: LD_VAR 0 14
53774: PUSH
53775: FOR_IN
53776: IFFALSE 53946
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53778: LD_ADDR_VAR 0 9
53782: PUSH
53783: LD_VAR 0 10
53787: PPUSH
53788: LD_VAR 0 8
53792: PPUSH
53793: LD_INT 5
53795: PPUSH
53796: CALL_OW 272
53800: PUSH
53801: LD_VAR 0 11
53805: PPUSH
53806: LD_VAR 0 8
53810: PPUSH
53811: LD_INT 5
53813: PPUSH
53814: CALL_OW 273
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53823: LD_VAR 0 9
53827: PUSH
53828: LD_INT 1
53830: ARRAY
53831: PPUSH
53832: LD_VAR 0 9
53836: PUSH
53837: LD_INT 2
53839: ARRAY
53840: PPUSH
53841: CALL_OW 488
53845: IFFALSE 53944
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53847: LD_ADDR_VAR 0 4
53851: PUSH
53852: LD_VAR 0 9
53856: PUSH
53857: LD_INT 1
53859: ARRAY
53860: PPUSH
53861: LD_VAR 0 9
53865: PUSH
53866: LD_INT 2
53868: ARRAY
53869: PPUSH
53870: CALL_OW 546
53874: ST_TO_ADDR
// if hex [ 1 ] then
53875: LD_VAR 0 4
53879: PUSH
53880: LD_INT 1
53882: ARRAY
53883: IFFALSE 53887
// continue ;
53885: GO 53775
// h := hex [ 2 ] ;
53887: LD_ADDR_VAR 0 13
53891: PUSH
53892: LD_VAR 0 4
53896: PUSH
53897: LD_INT 2
53899: ARRAY
53900: ST_TO_ADDR
// if h + 7 < height then
53901: LD_VAR 0 13
53905: PUSH
53906: LD_INT 7
53908: PLUS
53909: PUSH
53910: LD_VAR 0 15
53914: LESS
53915: IFFALSE 53944
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53917: LD_ADDR_VAR 0 18
53921: PUSH
53922: LD_INT 7
53924: PUSH
53925: LD_INT 28
53927: PUSH
53928: LD_INT 45
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: LIST
53935: PUSH
53936: LD_VAR 0 12
53940: ARRAY
53941: ST_TO_ADDR
// break ;
53942: GO 53946
// end ; end ; end ;
53944: GO 53775
53946: POP
53947: POP
// end ; if not weapon then
53948: LD_VAR 0 18
53952: NOT
53953: IFFALSE 54013
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53955: LD_ADDR_VAR 0 5
53959: PUSH
53960: LD_VAR 0 5
53964: PUSH
53965: LD_INT 11
53967: PUSH
53968: LD_INT 30
53970: PUSH
53971: LD_INT 49
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: LIST
53978: DIFF
53979: ST_TO_ADDR
// if not list then
53980: LD_VAR 0 5
53984: NOT
53985: IFFALSE 53989
// exit ;
53987: GO 54131
// weapon := list [ rand ( 1 , list ) ] ;
53989: LD_ADDR_VAR 0 18
53993: PUSH
53994: LD_VAR 0 5
53998: PUSH
53999: LD_INT 1
54001: PPUSH
54002: LD_VAR 0 5
54006: PPUSH
54007: CALL_OW 12
54011: ARRAY
54012: ST_TO_ADDR
// end ; if weapon then
54013: LD_VAR 0 18
54017: IFFALSE 54131
// begin tmp := CostOfWeapon ( weapon ) ;
54019: LD_ADDR_VAR 0 14
54023: PUSH
54024: LD_VAR 0 18
54028: PPUSH
54029: CALL_OW 451
54033: ST_TO_ADDR
// j := GetBase ( tower ) ;
54034: LD_ADDR_VAR 0 9
54038: PUSH
54039: LD_VAR 0 1
54043: PPUSH
54044: CALL_OW 274
54048: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54049: LD_VAR 0 9
54053: PPUSH
54054: LD_INT 1
54056: PPUSH
54057: CALL_OW 275
54061: PUSH
54062: LD_VAR 0 14
54066: PUSH
54067: LD_INT 1
54069: ARRAY
54070: GREATEREQUAL
54071: PUSH
54072: LD_VAR 0 9
54076: PPUSH
54077: LD_INT 2
54079: PPUSH
54080: CALL_OW 275
54084: PUSH
54085: LD_VAR 0 14
54089: PUSH
54090: LD_INT 2
54092: ARRAY
54093: GREATEREQUAL
54094: AND
54095: PUSH
54096: LD_VAR 0 9
54100: PPUSH
54101: LD_INT 3
54103: PPUSH
54104: CALL_OW 275
54108: PUSH
54109: LD_VAR 0 14
54113: PUSH
54114: LD_INT 3
54116: ARRAY
54117: GREATEREQUAL
54118: AND
54119: IFFALSE 54131
// result := weapon ;
54121: LD_ADDR_VAR 0 3
54125: PUSH
54126: LD_VAR 0 18
54130: ST_TO_ADDR
// end ; end ;
54131: LD_VAR 0 3
54135: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54136: LD_INT 0
54138: PPUSH
54139: PPUSH
// result := true ;
54140: LD_ADDR_VAR 0 3
54144: PUSH
54145: LD_INT 1
54147: ST_TO_ADDR
// if array1 = array2 then
54148: LD_VAR 0 1
54152: PUSH
54153: LD_VAR 0 2
54157: EQUAL
54158: IFFALSE 54218
// begin for i = 1 to array1 do
54160: LD_ADDR_VAR 0 4
54164: PUSH
54165: DOUBLE
54166: LD_INT 1
54168: DEC
54169: ST_TO_ADDR
54170: LD_VAR 0 1
54174: PUSH
54175: FOR_TO
54176: IFFALSE 54214
// if array1 [ i ] <> array2 [ i ] then
54178: LD_VAR 0 1
54182: PUSH
54183: LD_VAR 0 4
54187: ARRAY
54188: PUSH
54189: LD_VAR 0 2
54193: PUSH
54194: LD_VAR 0 4
54198: ARRAY
54199: NONEQUAL
54200: IFFALSE 54212
// begin result := false ;
54202: LD_ADDR_VAR 0 3
54206: PUSH
54207: LD_INT 0
54209: ST_TO_ADDR
// break ;
54210: GO 54214
// end ;
54212: GO 54175
54214: POP
54215: POP
// end else
54216: GO 54226
// result := false ;
54218: LD_ADDR_VAR 0 3
54222: PUSH
54223: LD_INT 0
54225: ST_TO_ADDR
// end ;
54226: LD_VAR 0 3
54230: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54231: LD_INT 0
54233: PPUSH
54234: PPUSH
// if not array1 or not array2 then
54235: LD_VAR 0 1
54239: NOT
54240: PUSH
54241: LD_VAR 0 2
54245: NOT
54246: OR
54247: IFFALSE 54251
// exit ;
54249: GO 54315
// result := true ;
54251: LD_ADDR_VAR 0 3
54255: PUSH
54256: LD_INT 1
54258: ST_TO_ADDR
// for i = 1 to array1 do
54259: LD_ADDR_VAR 0 4
54263: PUSH
54264: DOUBLE
54265: LD_INT 1
54267: DEC
54268: ST_TO_ADDR
54269: LD_VAR 0 1
54273: PUSH
54274: FOR_TO
54275: IFFALSE 54313
// if array1 [ i ] <> array2 [ i ] then
54277: LD_VAR 0 1
54281: PUSH
54282: LD_VAR 0 4
54286: ARRAY
54287: PUSH
54288: LD_VAR 0 2
54292: PUSH
54293: LD_VAR 0 4
54297: ARRAY
54298: NONEQUAL
54299: IFFALSE 54311
// begin result := false ;
54301: LD_ADDR_VAR 0 3
54305: PUSH
54306: LD_INT 0
54308: ST_TO_ADDR
// break ;
54309: GO 54313
// end ;
54311: GO 54274
54313: POP
54314: POP
// end ;
54315: LD_VAR 0 3
54319: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54320: LD_INT 0
54322: PPUSH
54323: PPUSH
54324: PPUSH
// pom := GetBase ( fac ) ;
54325: LD_ADDR_VAR 0 5
54329: PUSH
54330: LD_VAR 0 1
54334: PPUSH
54335: CALL_OW 274
54339: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54340: LD_ADDR_VAR 0 4
54344: PUSH
54345: LD_VAR 0 2
54349: PUSH
54350: LD_INT 1
54352: ARRAY
54353: PPUSH
54354: LD_VAR 0 2
54358: PUSH
54359: LD_INT 2
54361: ARRAY
54362: PPUSH
54363: LD_VAR 0 2
54367: PUSH
54368: LD_INT 3
54370: ARRAY
54371: PPUSH
54372: LD_VAR 0 2
54376: PUSH
54377: LD_INT 4
54379: ARRAY
54380: PPUSH
54381: CALL_OW 449
54385: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54386: LD_ADDR_VAR 0 3
54390: PUSH
54391: LD_VAR 0 5
54395: PPUSH
54396: LD_INT 1
54398: PPUSH
54399: CALL_OW 275
54403: PUSH
54404: LD_VAR 0 4
54408: PUSH
54409: LD_INT 1
54411: ARRAY
54412: GREATEREQUAL
54413: PUSH
54414: LD_VAR 0 5
54418: PPUSH
54419: LD_INT 2
54421: PPUSH
54422: CALL_OW 275
54426: PUSH
54427: LD_VAR 0 4
54431: PUSH
54432: LD_INT 2
54434: ARRAY
54435: GREATEREQUAL
54436: AND
54437: PUSH
54438: LD_VAR 0 5
54442: PPUSH
54443: LD_INT 3
54445: PPUSH
54446: CALL_OW 275
54450: PUSH
54451: LD_VAR 0 4
54455: PUSH
54456: LD_INT 3
54458: ARRAY
54459: GREATEREQUAL
54460: AND
54461: ST_TO_ADDR
// end ;
54462: LD_VAR 0 3
54466: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54467: LD_INT 0
54469: PPUSH
54470: PPUSH
54471: PPUSH
54472: PPUSH
// pom := GetBase ( building ) ;
54473: LD_ADDR_VAR 0 3
54477: PUSH
54478: LD_VAR 0 1
54482: PPUSH
54483: CALL_OW 274
54487: ST_TO_ADDR
// if not pom then
54488: LD_VAR 0 3
54492: NOT
54493: IFFALSE 54497
// exit ;
54495: GO 54667
// btype := GetBType ( building ) ;
54497: LD_ADDR_VAR 0 5
54501: PUSH
54502: LD_VAR 0 1
54506: PPUSH
54507: CALL_OW 266
54511: ST_TO_ADDR
// if btype = b_armoury then
54512: LD_VAR 0 5
54516: PUSH
54517: LD_INT 4
54519: EQUAL
54520: IFFALSE 54530
// btype := b_barracks ;
54522: LD_ADDR_VAR 0 5
54526: PUSH
54527: LD_INT 5
54529: ST_TO_ADDR
// if btype = b_depot then
54530: LD_VAR 0 5
54534: PUSH
54535: LD_INT 0
54537: EQUAL
54538: IFFALSE 54548
// btype := b_warehouse ;
54540: LD_ADDR_VAR 0 5
54544: PUSH
54545: LD_INT 1
54547: ST_TO_ADDR
// if btype = b_workshop then
54548: LD_VAR 0 5
54552: PUSH
54553: LD_INT 2
54555: EQUAL
54556: IFFALSE 54566
// btype := b_factory ;
54558: LD_ADDR_VAR 0 5
54562: PUSH
54563: LD_INT 3
54565: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54566: LD_ADDR_VAR 0 4
54570: PUSH
54571: LD_VAR 0 5
54575: PPUSH
54576: LD_VAR 0 1
54580: PPUSH
54581: CALL_OW 248
54585: PPUSH
54586: CALL_OW 450
54590: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54591: LD_ADDR_VAR 0 2
54595: PUSH
54596: LD_VAR 0 3
54600: PPUSH
54601: LD_INT 1
54603: PPUSH
54604: CALL_OW 275
54608: PUSH
54609: LD_VAR 0 4
54613: PUSH
54614: LD_INT 1
54616: ARRAY
54617: GREATEREQUAL
54618: PUSH
54619: LD_VAR 0 3
54623: PPUSH
54624: LD_INT 2
54626: PPUSH
54627: CALL_OW 275
54631: PUSH
54632: LD_VAR 0 4
54636: PUSH
54637: LD_INT 2
54639: ARRAY
54640: GREATEREQUAL
54641: AND
54642: PUSH
54643: LD_VAR 0 3
54647: PPUSH
54648: LD_INT 3
54650: PPUSH
54651: CALL_OW 275
54655: PUSH
54656: LD_VAR 0 4
54660: PUSH
54661: LD_INT 3
54663: ARRAY
54664: GREATEREQUAL
54665: AND
54666: ST_TO_ADDR
// end ;
54667: LD_VAR 0 2
54671: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54672: LD_INT 0
54674: PPUSH
54675: PPUSH
54676: PPUSH
// pom := GetBase ( building ) ;
54677: LD_ADDR_VAR 0 4
54681: PUSH
54682: LD_VAR 0 1
54686: PPUSH
54687: CALL_OW 274
54691: ST_TO_ADDR
// if not pom then
54692: LD_VAR 0 4
54696: NOT
54697: IFFALSE 54701
// exit ;
54699: GO 54802
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54701: LD_ADDR_VAR 0 5
54705: PUSH
54706: LD_VAR 0 2
54710: PPUSH
54711: LD_VAR 0 1
54715: PPUSH
54716: CALL_OW 248
54720: PPUSH
54721: CALL_OW 450
54725: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54726: LD_ADDR_VAR 0 3
54730: PUSH
54731: LD_VAR 0 4
54735: PPUSH
54736: LD_INT 1
54738: PPUSH
54739: CALL_OW 275
54743: PUSH
54744: LD_VAR 0 5
54748: PUSH
54749: LD_INT 1
54751: ARRAY
54752: GREATEREQUAL
54753: PUSH
54754: LD_VAR 0 4
54758: PPUSH
54759: LD_INT 2
54761: PPUSH
54762: CALL_OW 275
54766: PUSH
54767: LD_VAR 0 5
54771: PUSH
54772: LD_INT 2
54774: ARRAY
54775: GREATEREQUAL
54776: AND
54777: PUSH
54778: LD_VAR 0 4
54782: PPUSH
54783: LD_INT 3
54785: PPUSH
54786: CALL_OW 275
54790: PUSH
54791: LD_VAR 0 5
54795: PUSH
54796: LD_INT 3
54798: ARRAY
54799: GREATEREQUAL
54800: AND
54801: ST_TO_ADDR
// end ;
54802: LD_VAR 0 3
54806: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54807: LD_INT 0
54809: PPUSH
54810: PPUSH
54811: PPUSH
54812: PPUSH
54813: PPUSH
54814: PPUSH
54815: PPUSH
54816: PPUSH
54817: PPUSH
54818: PPUSH
54819: PPUSH
// result := false ;
54820: LD_ADDR_VAR 0 8
54824: PUSH
54825: LD_INT 0
54827: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54828: LD_VAR 0 5
54832: NOT
54833: PUSH
54834: LD_VAR 0 1
54838: NOT
54839: OR
54840: PUSH
54841: LD_VAR 0 2
54845: NOT
54846: OR
54847: PUSH
54848: LD_VAR 0 3
54852: NOT
54853: OR
54854: IFFALSE 54858
// exit ;
54856: GO 55672
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54858: LD_ADDR_VAR 0 14
54862: PUSH
54863: LD_VAR 0 1
54867: PPUSH
54868: LD_VAR 0 2
54872: PPUSH
54873: LD_VAR 0 3
54877: PPUSH
54878: LD_VAR 0 4
54882: PPUSH
54883: LD_VAR 0 5
54887: PUSH
54888: LD_INT 1
54890: ARRAY
54891: PPUSH
54892: CALL_OW 248
54896: PPUSH
54897: LD_INT 0
54899: PPUSH
54900: CALL 56925 0 6
54904: ST_TO_ADDR
// if not hexes then
54905: LD_VAR 0 14
54909: NOT
54910: IFFALSE 54914
// exit ;
54912: GO 55672
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54914: LD_ADDR_VAR 0 17
54918: PUSH
54919: LD_VAR 0 5
54923: PPUSH
54924: LD_INT 22
54926: PUSH
54927: LD_VAR 0 13
54931: PPUSH
54932: CALL_OW 255
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: LD_INT 30
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 30
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: LIST
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PPUSH
54973: CALL_OW 72
54977: ST_TO_ADDR
// for i = 1 to hexes do
54978: LD_ADDR_VAR 0 9
54982: PUSH
54983: DOUBLE
54984: LD_INT 1
54986: DEC
54987: ST_TO_ADDR
54988: LD_VAR 0 14
54992: PUSH
54993: FOR_TO
54994: IFFALSE 55670
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54996: LD_ADDR_VAR 0 13
55000: PUSH
55001: LD_VAR 0 14
55005: PUSH
55006: LD_VAR 0 9
55010: ARRAY
55011: PUSH
55012: LD_INT 1
55014: ARRAY
55015: PPUSH
55016: LD_VAR 0 14
55020: PUSH
55021: LD_VAR 0 9
55025: ARRAY
55026: PUSH
55027: LD_INT 2
55029: ARRAY
55030: PPUSH
55031: CALL_OW 428
55035: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55036: LD_VAR 0 14
55040: PUSH
55041: LD_VAR 0 9
55045: ARRAY
55046: PUSH
55047: LD_INT 1
55049: ARRAY
55050: PPUSH
55051: LD_VAR 0 14
55055: PUSH
55056: LD_VAR 0 9
55060: ARRAY
55061: PUSH
55062: LD_INT 2
55064: ARRAY
55065: PPUSH
55066: CALL_OW 351
55070: PUSH
55071: LD_VAR 0 14
55075: PUSH
55076: LD_VAR 0 9
55080: ARRAY
55081: PUSH
55082: LD_INT 1
55084: ARRAY
55085: PPUSH
55086: LD_VAR 0 14
55090: PUSH
55091: LD_VAR 0 9
55095: ARRAY
55096: PUSH
55097: LD_INT 2
55099: ARRAY
55100: PPUSH
55101: CALL_OW 488
55105: NOT
55106: OR
55107: PUSH
55108: LD_VAR 0 13
55112: PPUSH
55113: CALL_OW 247
55117: PUSH
55118: LD_INT 3
55120: EQUAL
55121: OR
55122: IFFALSE 55128
// exit ;
55124: POP
55125: POP
55126: GO 55672
// if not tmp then
55128: LD_VAR 0 13
55132: NOT
55133: IFFALSE 55137
// continue ;
55135: GO 54993
// result := true ;
55137: LD_ADDR_VAR 0 8
55141: PUSH
55142: LD_INT 1
55144: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55145: LD_VAR 0 6
55149: PUSH
55150: LD_VAR 0 13
55154: PPUSH
55155: CALL_OW 247
55159: PUSH
55160: LD_INT 2
55162: EQUAL
55163: AND
55164: PUSH
55165: LD_VAR 0 13
55169: PPUSH
55170: CALL_OW 263
55174: PUSH
55175: LD_INT 1
55177: EQUAL
55178: AND
55179: IFFALSE 55343
// begin if IsDrivenBy ( tmp ) then
55181: LD_VAR 0 13
55185: PPUSH
55186: CALL_OW 311
55190: IFFALSE 55194
// continue ;
55192: GO 54993
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55194: LD_VAR 0 6
55198: PPUSH
55199: LD_INT 3
55201: PUSH
55202: LD_INT 60
55204: PUSH
55205: EMPTY
55206: LIST
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: LD_INT 55
55217: PUSH
55218: EMPTY
55219: LIST
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PPUSH
55229: CALL_OW 72
55233: IFFALSE 55341
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55235: LD_ADDR_VAR 0 18
55239: PUSH
55240: LD_VAR 0 6
55244: PPUSH
55245: LD_INT 3
55247: PUSH
55248: LD_INT 60
55250: PUSH
55251: EMPTY
55252: LIST
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 3
55260: PUSH
55261: LD_INT 55
55263: PUSH
55264: EMPTY
55265: LIST
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PPUSH
55275: CALL_OW 72
55279: PUSH
55280: LD_INT 1
55282: ARRAY
55283: ST_TO_ADDR
// if IsInUnit ( driver ) then
55284: LD_VAR 0 18
55288: PPUSH
55289: CALL_OW 310
55293: IFFALSE 55304
// ComExit ( driver ) ;
55295: LD_VAR 0 18
55299: PPUSH
55300: CALL 80717 0 1
// AddComEnterUnit ( driver , tmp ) ;
55304: LD_VAR 0 18
55308: PPUSH
55309: LD_VAR 0 13
55313: PPUSH
55314: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55318: LD_VAR 0 18
55322: PPUSH
55323: LD_VAR 0 7
55327: PPUSH
55328: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55332: LD_VAR 0 18
55336: PPUSH
55337: CALL_OW 181
// end ; continue ;
55341: GO 54993
// end ; if not cleaners or not tmp in cleaners then
55343: LD_VAR 0 6
55347: NOT
55348: PUSH
55349: LD_VAR 0 13
55353: PUSH
55354: LD_VAR 0 6
55358: IN
55359: NOT
55360: OR
55361: IFFALSE 55668
// begin if dep then
55363: LD_VAR 0 17
55367: IFFALSE 55503
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55369: LD_ADDR_VAR 0 16
55373: PUSH
55374: LD_VAR 0 17
55378: PUSH
55379: LD_INT 1
55381: ARRAY
55382: PPUSH
55383: CALL_OW 250
55387: PPUSH
55388: LD_VAR 0 17
55392: PUSH
55393: LD_INT 1
55395: ARRAY
55396: PPUSH
55397: CALL_OW 254
55401: PPUSH
55402: LD_INT 5
55404: PPUSH
55405: CALL_OW 272
55409: PUSH
55410: LD_VAR 0 17
55414: PUSH
55415: LD_INT 1
55417: ARRAY
55418: PPUSH
55419: CALL_OW 251
55423: PPUSH
55424: LD_VAR 0 17
55428: PUSH
55429: LD_INT 1
55431: ARRAY
55432: PPUSH
55433: CALL_OW 254
55437: PPUSH
55438: LD_INT 5
55440: PPUSH
55441: CALL_OW 273
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55450: LD_VAR 0 16
55454: PUSH
55455: LD_INT 1
55457: ARRAY
55458: PPUSH
55459: LD_VAR 0 16
55463: PUSH
55464: LD_INT 2
55466: ARRAY
55467: PPUSH
55468: CALL_OW 488
55472: IFFALSE 55503
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55474: LD_VAR 0 13
55478: PPUSH
55479: LD_VAR 0 16
55483: PUSH
55484: LD_INT 1
55486: ARRAY
55487: PPUSH
55488: LD_VAR 0 16
55492: PUSH
55493: LD_INT 2
55495: ARRAY
55496: PPUSH
55497: CALL_OW 111
// continue ;
55501: GO 54993
// end ; end ; r := GetDir ( tmp ) ;
55503: LD_ADDR_VAR 0 15
55507: PUSH
55508: LD_VAR 0 13
55512: PPUSH
55513: CALL_OW 254
55517: ST_TO_ADDR
// if r = 5 then
55518: LD_VAR 0 15
55522: PUSH
55523: LD_INT 5
55525: EQUAL
55526: IFFALSE 55536
// r := 0 ;
55528: LD_ADDR_VAR 0 15
55532: PUSH
55533: LD_INT 0
55535: ST_TO_ADDR
// for j = r to 5 do
55536: LD_ADDR_VAR 0 10
55540: PUSH
55541: DOUBLE
55542: LD_VAR 0 15
55546: DEC
55547: ST_TO_ADDR
55548: LD_INT 5
55550: PUSH
55551: FOR_TO
55552: IFFALSE 55666
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55554: LD_ADDR_VAR 0 11
55558: PUSH
55559: LD_VAR 0 13
55563: PPUSH
55564: CALL_OW 250
55568: PPUSH
55569: LD_VAR 0 10
55573: PPUSH
55574: LD_INT 2
55576: PPUSH
55577: CALL_OW 272
55581: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55582: LD_ADDR_VAR 0 12
55586: PUSH
55587: LD_VAR 0 13
55591: PPUSH
55592: CALL_OW 251
55596: PPUSH
55597: LD_VAR 0 10
55601: PPUSH
55602: LD_INT 2
55604: PPUSH
55605: CALL_OW 273
55609: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55610: LD_VAR 0 11
55614: PPUSH
55615: LD_VAR 0 12
55619: PPUSH
55620: CALL_OW 488
55624: PUSH
55625: LD_VAR 0 11
55629: PPUSH
55630: LD_VAR 0 12
55634: PPUSH
55635: CALL_OW 428
55639: NOT
55640: AND
55641: IFFALSE 55664
// begin ComMoveXY ( tmp , _x , _y ) ;
55643: LD_VAR 0 13
55647: PPUSH
55648: LD_VAR 0 11
55652: PPUSH
55653: LD_VAR 0 12
55657: PPUSH
55658: CALL_OW 111
// break ;
55662: GO 55666
// end ; end ;
55664: GO 55551
55666: POP
55667: POP
// end ; end ;
55668: GO 54993
55670: POP
55671: POP
// end ;
55672: LD_VAR 0 8
55676: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55677: LD_INT 0
55679: PPUSH
// result := true ;
55680: LD_ADDR_VAR 0 3
55684: PUSH
55685: LD_INT 1
55687: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55688: LD_VAR 0 2
55692: PUSH
55693: LD_INT 24
55695: DOUBLE
55696: EQUAL
55697: IFTRUE 55707
55699: LD_INT 33
55701: DOUBLE
55702: EQUAL
55703: IFTRUE 55707
55705: GO 55732
55707: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55708: LD_ADDR_VAR 0 3
55712: PUSH
55713: LD_INT 32
55715: PPUSH
55716: LD_VAR 0 1
55720: PPUSH
55721: CALL_OW 321
55725: PUSH
55726: LD_INT 2
55728: EQUAL
55729: ST_TO_ADDR
55730: GO 56048
55732: LD_INT 20
55734: DOUBLE
55735: EQUAL
55736: IFTRUE 55740
55738: GO 55765
55740: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55741: LD_ADDR_VAR 0 3
55745: PUSH
55746: LD_INT 6
55748: PPUSH
55749: LD_VAR 0 1
55753: PPUSH
55754: CALL_OW 321
55758: PUSH
55759: LD_INT 2
55761: EQUAL
55762: ST_TO_ADDR
55763: GO 56048
55765: LD_INT 22
55767: DOUBLE
55768: EQUAL
55769: IFTRUE 55779
55771: LD_INT 36
55773: DOUBLE
55774: EQUAL
55775: IFTRUE 55779
55777: GO 55804
55779: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55780: LD_ADDR_VAR 0 3
55784: PUSH
55785: LD_INT 15
55787: PPUSH
55788: LD_VAR 0 1
55792: PPUSH
55793: CALL_OW 321
55797: PUSH
55798: LD_INT 2
55800: EQUAL
55801: ST_TO_ADDR
55802: GO 56048
55804: LD_INT 30
55806: DOUBLE
55807: EQUAL
55808: IFTRUE 55812
55810: GO 55837
55812: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55813: LD_ADDR_VAR 0 3
55817: PUSH
55818: LD_INT 20
55820: PPUSH
55821: LD_VAR 0 1
55825: PPUSH
55826: CALL_OW 321
55830: PUSH
55831: LD_INT 2
55833: EQUAL
55834: ST_TO_ADDR
55835: GO 56048
55837: LD_INT 28
55839: DOUBLE
55840: EQUAL
55841: IFTRUE 55851
55843: LD_INT 21
55845: DOUBLE
55846: EQUAL
55847: IFTRUE 55851
55849: GO 55876
55851: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55852: LD_ADDR_VAR 0 3
55856: PUSH
55857: LD_INT 21
55859: PPUSH
55860: LD_VAR 0 1
55864: PPUSH
55865: CALL_OW 321
55869: PUSH
55870: LD_INT 2
55872: EQUAL
55873: ST_TO_ADDR
55874: GO 56048
55876: LD_INT 16
55878: DOUBLE
55879: EQUAL
55880: IFTRUE 55884
55882: GO 55909
55884: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55885: LD_ADDR_VAR 0 3
55889: PUSH
55890: LD_INT 84
55892: PPUSH
55893: LD_VAR 0 1
55897: PPUSH
55898: CALL_OW 321
55902: PUSH
55903: LD_INT 2
55905: EQUAL
55906: ST_TO_ADDR
55907: GO 56048
55909: LD_INT 19
55911: DOUBLE
55912: EQUAL
55913: IFTRUE 55923
55915: LD_INT 23
55917: DOUBLE
55918: EQUAL
55919: IFTRUE 55923
55921: GO 55948
55923: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55924: LD_ADDR_VAR 0 3
55928: PUSH
55929: LD_INT 83
55931: PPUSH
55932: LD_VAR 0 1
55936: PPUSH
55937: CALL_OW 321
55941: PUSH
55942: LD_INT 2
55944: EQUAL
55945: ST_TO_ADDR
55946: GO 56048
55948: LD_INT 17
55950: DOUBLE
55951: EQUAL
55952: IFTRUE 55956
55954: GO 55981
55956: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55957: LD_ADDR_VAR 0 3
55961: PUSH
55962: LD_INT 39
55964: PPUSH
55965: LD_VAR 0 1
55969: PPUSH
55970: CALL_OW 321
55974: PUSH
55975: LD_INT 2
55977: EQUAL
55978: ST_TO_ADDR
55979: GO 56048
55981: LD_INT 18
55983: DOUBLE
55984: EQUAL
55985: IFTRUE 55989
55987: GO 56014
55989: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55990: LD_ADDR_VAR 0 3
55994: PUSH
55995: LD_INT 40
55997: PPUSH
55998: LD_VAR 0 1
56002: PPUSH
56003: CALL_OW 321
56007: PUSH
56008: LD_INT 2
56010: EQUAL
56011: ST_TO_ADDR
56012: GO 56048
56014: LD_INT 27
56016: DOUBLE
56017: EQUAL
56018: IFTRUE 56022
56020: GO 56047
56022: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56023: LD_ADDR_VAR 0 3
56027: PUSH
56028: LD_INT 35
56030: PPUSH
56031: LD_VAR 0 1
56035: PPUSH
56036: CALL_OW 321
56040: PUSH
56041: LD_INT 2
56043: EQUAL
56044: ST_TO_ADDR
56045: GO 56048
56047: POP
// end ;
56048: LD_VAR 0 3
56052: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56053: LD_INT 0
56055: PPUSH
56056: PPUSH
56057: PPUSH
56058: PPUSH
56059: PPUSH
56060: PPUSH
56061: PPUSH
56062: PPUSH
56063: PPUSH
56064: PPUSH
56065: PPUSH
// result := false ;
56066: LD_ADDR_VAR 0 6
56070: PUSH
56071: LD_INT 0
56073: ST_TO_ADDR
// if btype = b_depot then
56074: LD_VAR 0 2
56078: PUSH
56079: LD_INT 0
56081: EQUAL
56082: IFFALSE 56094
// begin result := true ;
56084: LD_ADDR_VAR 0 6
56088: PUSH
56089: LD_INT 1
56091: ST_TO_ADDR
// exit ;
56092: GO 56920
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56094: LD_VAR 0 1
56098: NOT
56099: PUSH
56100: LD_VAR 0 1
56104: PPUSH
56105: CALL_OW 266
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: IN
56120: NOT
56121: OR
56122: PUSH
56123: LD_VAR 0 2
56127: NOT
56128: OR
56129: PUSH
56130: LD_VAR 0 5
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: LD_INT 3
56146: PUSH
56147: LD_INT 4
56149: PUSH
56150: LD_INT 5
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: IN
56161: NOT
56162: OR
56163: PUSH
56164: LD_VAR 0 3
56168: PPUSH
56169: LD_VAR 0 4
56173: PPUSH
56174: CALL_OW 488
56178: NOT
56179: OR
56180: IFFALSE 56184
// exit ;
56182: GO 56920
// side := GetSide ( depot ) ;
56184: LD_ADDR_VAR 0 9
56188: PUSH
56189: LD_VAR 0 1
56193: PPUSH
56194: CALL_OW 255
56198: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56199: LD_VAR 0 9
56203: PPUSH
56204: LD_VAR 0 2
56208: PPUSH
56209: CALL 55677 0 2
56213: NOT
56214: IFFALSE 56218
// exit ;
56216: GO 56920
// pom := GetBase ( depot ) ;
56218: LD_ADDR_VAR 0 10
56222: PUSH
56223: LD_VAR 0 1
56227: PPUSH
56228: CALL_OW 274
56232: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56233: LD_ADDR_VAR 0 11
56237: PUSH
56238: LD_VAR 0 2
56242: PPUSH
56243: LD_VAR 0 1
56247: PPUSH
56248: CALL_OW 248
56252: PPUSH
56253: CALL_OW 450
56257: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56258: LD_VAR 0 10
56262: PPUSH
56263: LD_INT 1
56265: PPUSH
56266: CALL_OW 275
56270: PUSH
56271: LD_VAR 0 11
56275: PUSH
56276: LD_INT 1
56278: ARRAY
56279: GREATEREQUAL
56280: PUSH
56281: LD_VAR 0 10
56285: PPUSH
56286: LD_INT 2
56288: PPUSH
56289: CALL_OW 275
56293: PUSH
56294: LD_VAR 0 11
56298: PUSH
56299: LD_INT 2
56301: ARRAY
56302: GREATEREQUAL
56303: AND
56304: PUSH
56305: LD_VAR 0 10
56309: PPUSH
56310: LD_INT 3
56312: PPUSH
56313: CALL_OW 275
56317: PUSH
56318: LD_VAR 0 11
56322: PUSH
56323: LD_INT 3
56325: ARRAY
56326: GREATEREQUAL
56327: AND
56328: NOT
56329: IFFALSE 56333
// exit ;
56331: GO 56920
// if GetBType ( depot ) = b_depot then
56333: LD_VAR 0 1
56337: PPUSH
56338: CALL_OW 266
56342: PUSH
56343: LD_INT 0
56345: EQUAL
56346: IFFALSE 56358
// dist := 28 else
56348: LD_ADDR_VAR 0 14
56352: PUSH
56353: LD_INT 28
56355: ST_TO_ADDR
56356: GO 56366
// dist := 36 ;
56358: LD_ADDR_VAR 0 14
56362: PUSH
56363: LD_INT 36
56365: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56366: LD_VAR 0 1
56370: PPUSH
56371: LD_VAR 0 3
56375: PPUSH
56376: LD_VAR 0 4
56380: PPUSH
56381: CALL_OW 297
56385: PUSH
56386: LD_VAR 0 14
56390: GREATER
56391: IFFALSE 56395
// exit ;
56393: GO 56920
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56395: LD_ADDR_VAR 0 12
56399: PUSH
56400: LD_VAR 0 2
56404: PPUSH
56405: LD_VAR 0 3
56409: PPUSH
56410: LD_VAR 0 4
56414: PPUSH
56415: LD_VAR 0 5
56419: PPUSH
56420: LD_VAR 0 1
56424: PPUSH
56425: CALL_OW 248
56429: PPUSH
56430: LD_INT 0
56432: PPUSH
56433: CALL 56925 0 6
56437: ST_TO_ADDR
// if not hexes then
56438: LD_VAR 0 12
56442: NOT
56443: IFFALSE 56447
// exit ;
56445: GO 56920
// hex := GetHexInfo ( x , y ) ;
56447: LD_ADDR_VAR 0 15
56451: PUSH
56452: LD_VAR 0 3
56456: PPUSH
56457: LD_VAR 0 4
56461: PPUSH
56462: CALL_OW 546
56466: ST_TO_ADDR
// if hex [ 1 ] then
56467: LD_VAR 0 15
56471: PUSH
56472: LD_INT 1
56474: ARRAY
56475: IFFALSE 56479
// exit ;
56477: GO 56920
// height := hex [ 2 ] ;
56479: LD_ADDR_VAR 0 13
56483: PUSH
56484: LD_VAR 0 15
56488: PUSH
56489: LD_INT 2
56491: ARRAY
56492: ST_TO_ADDR
// for i = 1 to hexes do
56493: LD_ADDR_VAR 0 7
56497: PUSH
56498: DOUBLE
56499: LD_INT 1
56501: DEC
56502: ST_TO_ADDR
56503: LD_VAR 0 12
56507: PUSH
56508: FOR_TO
56509: IFFALSE 56839
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56511: LD_VAR 0 12
56515: PUSH
56516: LD_VAR 0 7
56520: ARRAY
56521: PUSH
56522: LD_INT 1
56524: ARRAY
56525: PPUSH
56526: LD_VAR 0 12
56530: PUSH
56531: LD_VAR 0 7
56535: ARRAY
56536: PUSH
56537: LD_INT 2
56539: ARRAY
56540: PPUSH
56541: CALL_OW 488
56545: NOT
56546: PUSH
56547: LD_VAR 0 12
56551: PUSH
56552: LD_VAR 0 7
56556: ARRAY
56557: PUSH
56558: LD_INT 1
56560: ARRAY
56561: PPUSH
56562: LD_VAR 0 12
56566: PUSH
56567: LD_VAR 0 7
56571: ARRAY
56572: PUSH
56573: LD_INT 2
56575: ARRAY
56576: PPUSH
56577: CALL_OW 428
56581: PUSH
56582: LD_INT 0
56584: GREATER
56585: OR
56586: PUSH
56587: LD_VAR 0 12
56591: PUSH
56592: LD_VAR 0 7
56596: ARRAY
56597: PUSH
56598: LD_INT 1
56600: ARRAY
56601: PPUSH
56602: LD_VAR 0 12
56606: PUSH
56607: LD_VAR 0 7
56611: ARRAY
56612: PUSH
56613: LD_INT 2
56615: ARRAY
56616: PPUSH
56617: CALL_OW 351
56621: OR
56622: IFFALSE 56628
// exit ;
56624: POP
56625: POP
56626: GO 56920
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56628: LD_ADDR_VAR 0 8
56632: PUSH
56633: LD_VAR 0 12
56637: PUSH
56638: LD_VAR 0 7
56642: ARRAY
56643: PUSH
56644: LD_INT 1
56646: ARRAY
56647: PPUSH
56648: LD_VAR 0 12
56652: PUSH
56653: LD_VAR 0 7
56657: ARRAY
56658: PUSH
56659: LD_INT 2
56661: ARRAY
56662: PPUSH
56663: CALL_OW 546
56667: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56668: LD_VAR 0 8
56672: PUSH
56673: LD_INT 1
56675: ARRAY
56676: PUSH
56677: LD_VAR 0 8
56681: PUSH
56682: LD_INT 2
56684: ARRAY
56685: PUSH
56686: LD_VAR 0 13
56690: PUSH
56691: LD_INT 2
56693: PLUS
56694: GREATER
56695: OR
56696: PUSH
56697: LD_VAR 0 8
56701: PUSH
56702: LD_INT 2
56704: ARRAY
56705: PUSH
56706: LD_VAR 0 13
56710: PUSH
56711: LD_INT 2
56713: MINUS
56714: LESS
56715: OR
56716: PUSH
56717: LD_VAR 0 8
56721: PUSH
56722: LD_INT 3
56724: ARRAY
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 8
56731: PUSH
56732: LD_INT 9
56734: PUSH
56735: LD_INT 10
56737: PUSH
56738: LD_INT 11
56740: PUSH
56741: LD_INT 12
56743: PUSH
56744: LD_INT 13
56746: PUSH
56747: LD_INT 16
56749: PUSH
56750: LD_INT 17
56752: PUSH
56753: LD_INT 18
56755: PUSH
56756: LD_INT 19
56758: PUSH
56759: LD_INT 20
56761: PUSH
56762: LD_INT 21
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: IN
56780: NOT
56781: OR
56782: PUSH
56783: LD_VAR 0 8
56787: PUSH
56788: LD_INT 5
56790: ARRAY
56791: NOT
56792: OR
56793: PUSH
56794: LD_VAR 0 8
56798: PUSH
56799: LD_INT 6
56801: ARRAY
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: LD_INT 2
56808: PUSH
56809: LD_INT 7
56811: PUSH
56812: LD_INT 9
56814: PUSH
56815: LD_INT 10
56817: PUSH
56818: LD_INT 11
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: IN
56829: NOT
56830: OR
56831: IFFALSE 56837
// exit ;
56833: POP
56834: POP
56835: GO 56920
// end ;
56837: GO 56508
56839: POP
56840: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56841: LD_VAR 0 9
56845: PPUSH
56846: LD_VAR 0 3
56850: PPUSH
56851: LD_VAR 0 4
56855: PPUSH
56856: LD_INT 20
56858: PPUSH
56859: CALL 48843 0 4
56863: PUSH
56864: LD_INT 4
56866: ARRAY
56867: IFFALSE 56871
// exit ;
56869: GO 56920
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56871: LD_VAR 0 2
56875: PUSH
56876: LD_INT 29
56878: PUSH
56879: LD_INT 30
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: IN
56886: PUSH
56887: LD_VAR 0 3
56891: PPUSH
56892: LD_VAR 0 4
56896: PPUSH
56897: LD_VAR 0 9
56901: PPUSH
56902: CALL_OW 440
56906: NOT
56907: AND
56908: IFFALSE 56912
// exit ;
56910: GO 56920
// result := true ;
56912: LD_ADDR_VAR 0 6
56916: PUSH
56917: LD_INT 1
56919: ST_TO_ADDR
// end ;
56920: LD_VAR 0 6
56924: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56925: LD_INT 0
56927: PPUSH
56928: PPUSH
56929: PPUSH
56930: PPUSH
56931: PPUSH
56932: PPUSH
56933: PPUSH
56934: PPUSH
56935: PPUSH
56936: PPUSH
56937: PPUSH
56938: PPUSH
56939: PPUSH
56940: PPUSH
56941: PPUSH
56942: PPUSH
56943: PPUSH
56944: PPUSH
56945: PPUSH
56946: PPUSH
56947: PPUSH
56948: PPUSH
56949: PPUSH
56950: PPUSH
56951: PPUSH
56952: PPUSH
56953: PPUSH
56954: PPUSH
56955: PPUSH
56956: PPUSH
56957: PPUSH
56958: PPUSH
56959: PPUSH
56960: PPUSH
56961: PPUSH
56962: PPUSH
56963: PPUSH
56964: PPUSH
56965: PPUSH
56966: PPUSH
56967: PPUSH
56968: PPUSH
56969: PPUSH
56970: PPUSH
56971: PPUSH
56972: PPUSH
56973: PPUSH
56974: PPUSH
56975: PPUSH
56976: PPUSH
56977: PPUSH
56978: PPUSH
56979: PPUSH
56980: PPUSH
56981: PPUSH
56982: PPUSH
56983: PPUSH
56984: PPUSH
// result = [ ] ;
56985: LD_ADDR_VAR 0 7
56989: PUSH
56990: EMPTY
56991: ST_TO_ADDR
// temp_list = [ ] ;
56992: LD_ADDR_VAR 0 9
56996: PUSH
56997: EMPTY
56998: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56999: LD_VAR 0 4
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 2
57012: PUSH
57013: LD_INT 3
57015: PUSH
57016: LD_INT 4
57018: PUSH
57019: LD_INT 5
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: IN
57030: NOT
57031: PUSH
57032: LD_VAR 0 1
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: IN
57047: PUSH
57048: LD_VAR 0 5
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: LD_INT 2
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: LIST
57066: IN
57067: NOT
57068: AND
57069: OR
57070: IFFALSE 57074
// exit ;
57072: GO 75465
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57074: LD_VAR 0 1
57078: PUSH
57079: LD_INT 6
57081: PUSH
57082: LD_INT 7
57084: PUSH
57085: LD_INT 8
57087: PUSH
57088: LD_INT 13
57090: PUSH
57091: LD_INT 12
57093: PUSH
57094: LD_INT 15
57096: PUSH
57097: LD_INT 11
57099: PUSH
57100: LD_INT 14
57102: PUSH
57103: LD_INT 10
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: IN
57117: IFFALSE 57127
// btype = b_lab ;
57119: LD_ADDR_VAR 0 1
57123: PUSH
57124: LD_INT 6
57126: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57127: LD_VAR 0 6
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: IN
57146: NOT
57147: PUSH
57148: LD_VAR 0 1
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: LD_INT 3
57164: PUSH
57165: LD_INT 6
57167: PUSH
57168: LD_INT 36
57170: PUSH
57171: LD_INT 4
57173: PUSH
57174: LD_INT 5
57176: PUSH
57177: LD_INT 31
57179: PUSH
57180: LD_INT 32
57182: PUSH
57183: LD_INT 33
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: IN
57199: NOT
57200: PUSH
57201: LD_VAR 0 6
57205: PUSH
57206: LD_INT 1
57208: EQUAL
57209: AND
57210: OR
57211: PUSH
57212: LD_VAR 0 1
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: LD_INT 3
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: IN
57227: NOT
57228: PUSH
57229: LD_VAR 0 6
57233: PUSH
57234: LD_INT 2
57236: EQUAL
57237: AND
57238: OR
57239: IFFALSE 57249
// mode = 0 ;
57241: LD_ADDR_VAR 0 6
57245: PUSH
57246: LD_INT 0
57248: ST_TO_ADDR
// case mode of 0 :
57249: LD_VAR 0 6
57253: PUSH
57254: LD_INT 0
57256: DOUBLE
57257: EQUAL
57258: IFTRUE 57262
57260: GO 68715
57262: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57263: LD_ADDR_VAR 0 11
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 2
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 2
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: LD_INT 3
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 3
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57456: LD_ADDR_VAR 0 12
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 1
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: NEG
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: NEG
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 3
57624: NEG
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57652: LD_ADDR_VAR 0 13
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: NEG
57788: PUSH
57789: LD_INT 2
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: NEG
57800: PUSH
57801: LD_INT 3
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 3
57811: NEG
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: NEG
57824: PUSH
57825: LD_INT 3
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57851: LD_ADDR_VAR 0 14
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: NEG
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: LD_INT 3
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 3
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: LD_INT 2
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58047: LD_ADDR_VAR 0 15
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 1
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58240: LD_ADDR_VAR 0 16
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: LD_INT 3
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58433: LD_ADDR_VAR 0 17
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: NEG
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 2
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 2
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 2
58609: NEG
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: NEG
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58663: LD_ADDR_VAR 0 18
58667: PUSH
58668: LD_INT 0
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58893: LD_ADDR_VAR 0 19
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 2
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59123: LD_ADDR_VAR 0 20
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59353: LD_ADDR_VAR 0 21
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: LD_INT 2
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: NEG
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 2
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59583: LD_ADDR_VAR 0 22
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: LD_INT 2
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59813: LD_ADDR_VAR 0 23
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: NEG
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 2
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: LD_INT 2
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 2
59989: NEG
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: NEG
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: LD_INT 3
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: LD_INT 3
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60093: LD_ADDR_VAR 0 24
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 1
60151: NEG
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: LD_INT 1
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 2
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: LD_INT 2
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60369: LD_ADDR_VAR 0 25
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: LD_INT 2
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 3
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 3
60590: PUSH
60591: LD_INT 2
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: LD_INT 3
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: LD_INT 3
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60643: LD_ADDR_VAR 0 26
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 1
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: LD_INT 2
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: LD_INT 3
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 2
60885: NEG
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60919: LD_ADDR_VAR 0 27
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: LD_INT 2
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: NEG
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: LD_INT 2
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 2
61141: NEG
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 3
61152: NEG
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 3
61164: NEG
61165: PUSH
61166: LD_INT 2
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61199: LD_ADDR_VAR 0 28
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: NEG
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: LD_INT 2
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 2
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 2
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 2
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: LD_INT 2
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: NEG
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 2
61375: NEG
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 2
61386: NEG
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: NEG
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: NEG
61411: PUSH
61412: LD_INT 3
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: LD_INT 3
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 3
61446: NEG
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61481: LD_ADDR_VAR 0 29
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: LD_INT 2
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 2
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: LD_INT 2
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: LD_INT 2
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: NEG
61672: PUSH
61673: LD_INT 3
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 3
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 1
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: LD_INT 2
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: LD_INT 2
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61760: LD_ADDR_VAR 0 30
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 2
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 2
61895: PUSH
61896: LD_INT 2
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: LD_INT 2
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 2
61926: NEG
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 2
61937: NEG
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: LD_INT 3
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 2
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 3
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 3
62003: NEG
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62038: LD_ADDR_VAR 0 31
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: LD_INT 2
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 2
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: NEG
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 2
62227: NEG
62228: PUSH
62229: LD_INT 3
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 3
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 3
62281: NEG
62282: PUSH
62283: LD_INT 2
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62316: LD_ADDR_VAR 0 32
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 1
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: NEG
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 1
62385: NEG
62386: PUSH
62387: LD_INT 1
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 1
62397: NEG
62398: PUSH
62399: LD_INT 2
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: LD_INT 2
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 2
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 2
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 2
62493: NEG
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: LD_INT 3
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: LD_INT 2
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 3
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: LD_INT 3
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 2
62548: NEG
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 3
62559: NEG
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62594: LD_ADDR_VAR 0 33
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: LD_INT 0
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 1
62663: NEG
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: LD_INT 2
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 2
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: NEG
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: NEG
62773: PUSH
62774: LD_INT 2
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: LD_INT 3
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: LD_INT 3
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: LD_INT 2
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 3
62838: NEG
62839: PUSH
62840: LD_INT 2
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62873: LD_ADDR_VAR 0 34
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: LD_INT 1
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 1
62954: NEG
62955: PUSH
62956: LD_INT 2
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 2
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 2
62998: PUSH
62999: LD_INT 2
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: PUSH
63009: LD_INT 2
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 2
63029: NEG
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 2
63040: NEG
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 2
63052: NEG
63053: PUSH
63054: LD_INT 2
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: LD_INT 3
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 2
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 3
63087: PUSH
63088: LD_INT 2
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 2
63097: PUSH
63098: LD_INT 3
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 2
63107: NEG
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 3
63118: NEG
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63153: LD_ADDR_VAR 0 35
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: LD_INT 1
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: NEG
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: NEG
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63265: LD_ADDR_VAR 0 36
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: LD_INT 0
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 1
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: LD_INT 2
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: PUSH
63359: LD_INT 2
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63377: LD_ADDR_VAR 0 37
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: LD_INT 1
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 1
63435: NEG
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 1
63469: NEG
63470: PUSH
63471: LD_INT 1
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63489: LD_ADDR_VAR 0 38
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 1
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 2
63570: PUSH
63571: LD_INT 1
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 2
63580: NEG
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63601: LD_ADDR_VAR 0 39
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: LD_INT 2
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63713: LD_ADDR_VAR 0 40
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 1
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 0
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: LD_INT 1
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63825: LD_ADDR_VAR 0 41
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: LD_INT 0
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: LD_INT 1
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 1
63883: NEG
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: LD_INT 1
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: LD_INT 2
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 2
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 2
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 2
63949: PUSH
63950: LD_INT 2
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: LD_INT 2
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 2
63980: NEG
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 2
63991: NEG
63992: PUSH
63993: LD_INT 1
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 2
64003: NEG
64004: PUSH
64005: LD_INT 2
64007: NEG
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 2
64015: NEG
64016: PUSH
64017: LD_INT 3
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 2
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 3
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 3
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 3
64058: PUSH
64059: LD_INT 2
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 3
64068: PUSH
64069: LD_INT 3
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 2
64078: PUSH
64079: LD_INT 3
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 2
64088: NEG
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 3
64099: NEG
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 3
64110: NEG
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 3
64122: NEG
64123: PUSH
64124: LD_INT 2
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 3
64134: NEG
64135: PUSH
64136: LD_INT 3
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64175: LD_ADDR_VAR 0 42
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 1
64233: NEG
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 1
64256: NEG
64257: PUSH
64258: LD_INT 2
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 2
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 2
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: LD_INT 2
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: LD_INT 2
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: NEG
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 2
64341: NEG
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 2
64353: NEG
64354: PUSH
64355: LD_INT 2
64357: NEG
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: LD_INT 3
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 1
64377: NEG
64378: PUSH
64379: LD_INT 3
64381: NEG
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: LD_INT 3
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 1
64400: PUSH
64401: LD_INT 2
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 3
64411: PUSH
64412: LD_INT 2
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 3
64421: PUSH
64422: LD_INT 3
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 2
64431: PUSH
64432: LD_INT 3
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: LD_INT 3
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: LD_INT 3
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 3
64472: NEG
64473: PUSH
64474: LD_INT 2
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 3
64484: NEG
64485: PUSH
64486: LD_INT 3
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64525: LD_ADDR_VAR 0 43
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 0
64542: PUSH
64543: LD_INT 1
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: PUSH
64564: LD_INT 1
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: LD_INT 1
64598: NEG
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: PUSH
64608: LD_INT 2
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: LD_INT 2
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 2
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 2
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: LD_INT 2
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: LD_INT 2
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 1
64680: NEG
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 2
64691: NEG
64692: PUSH
64693: LD_INT 0
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 2
64702: NEG
64703: PUSH
64704: LD_INT 1
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 1
64714: NEG
64715: PUSH
64716: LD_INT 3
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: LD_INT 3
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 1
64737: PUSH
64738: LD_INT 2
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 2
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 3
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 3
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 1
64779: PUSH
64780: LD_INT 3
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: LD_INT 3
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: LD_INT 2
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 2
64810: NEG
64811: PUSH
64812: LD_INT 1
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 3
64821: NEG
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 3
64832: NEG
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64873: LD_ADDR_VAR 0 44
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 0
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 1
64954: NEG
64955: PUSH
64956: LD_INT 2
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: LD_INT 1
64969: NEG
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 2
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 2
64987: PUSH
64988: LD_INT 1
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 2
64997: PUSH
64998: LD_INT 2
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: LD_INT 2
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 2
65028: NEG
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 2
65039: NEG
65040: PUSH
65041: LD_INT 1
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 2
65051: NEG
65052: PUSH
65053: LD_INT 2
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 2
65063: NEG
65064: PUSH
65065: LD_INT 3
65067: NEG
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: LD_INT 1
65078: NEG
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 3
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 3
65096: PUSH
65097: LD_INT 1
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 3
65106: PUSH
65107: LD_INT 2
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 3
65116: PUSH
65117: LD_INT 3
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 2
65126: PUSH
65127: LD_INT 3
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 2
65136: NEG
65137: PUSH
65138: LD_INT 1
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 3
65147: NEG
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 3
65158: NEG
65159: PUSH
65160: LD_INT 1
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 3
65170: NEG
65171: PUSH
65172: LD_INT 2
65174: NEG
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 3
65182: NEG
65183: PUSH
65184: LD_INT 3
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65223: LD_ADDR_VAR 0 45
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 1
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 1
65281: NEG
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 1
65292: NEG
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 2
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 1
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 2
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 2
65348: PUSH
65349: LD_INT 2
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: LD_INT 2
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: LD_INT 2
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 2
65389: NEG
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: LD_INT 2
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 2
65413: NEG
65414: PUSH
65415: LD_INT 3
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: LD_INT 3
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: LD_INT 3
65440: NEG
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: LD_INT 2
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 3
65459: PUSH
65460: LD_INT 2
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 3
65469: PUSH
65470: LD_INT 3
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 2
65479: PUSH
65480: LD_INT 3
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: LD_INT 3
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: LD_INT 3
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 1
65509: NEG
65510: PUSH
65511: LD_INT 2
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 3
65520: NEG
65521: PUSH
65522: LD_INT 2
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 3
65532: NEG
65533: PUSH
65534: LD_INT 3
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65573: LD_ADDR_VAR 0 46
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: LD_INT 1
65593: NEG
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 1
65601: PUSH
65602: LD_INT 0
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 1
65611: PUSH
65612: LD_INT 1
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: LD_INT 1
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 1
65631: NEG
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 1
65642: NEG
65643: PUSH
65644: LD_INT 1
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 1
65654: NEG
65655: PUSH
65656: LD_INT 2
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 0
65666: PUSH
65667: LD_INT 2
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 2
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 2
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: LD_INT 2
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: LD_INT 2
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: LD_INT 1
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 2
65739: NEG
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 2
65750: NEG
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: LD_INT 3
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: LD_INT 3
65777: NEG
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 1
65785: PUSH
65786: LD_INT 2
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 2
65796: PUSH
65797: LD_INT 1
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 3
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 3
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: LD_INT 3
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: LD_INT 3
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: NEG
65848: PUSH
65849: LD_INT 2
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 2
65858: NEG
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 3
65869: NEG
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 3
65880: NEG
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65921: LD_ADDR_VAR 0 47
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: LD_INT 1
65941: NEG
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: LD_INT 1
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 0
65969: PUSH
65970: LD_INT 1
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 1
65979: NEG
65980: PUSH
65981: LD_INT 0
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 1
65990: NEG
65991: PUSH
65992: LD_INT 1
65994: NEG
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 1
66002: NEG
66003: PUSH
66004: LD_INT 2
66006: NEG
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 0
66014: PUSH
66015: LD_INT 2
66017: NEG
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: PUSH
66026: LD_INT 1
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 2
66036: NEG
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 2
66048: NEG
66049: PUSH
66050: LD_INT 2
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66072: LD_ADDR_VAR 0 48
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: LD_INT 0
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: LD_INT 1
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: LD_INT 0
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 1
66110: PUSH
66111: LD_INT 1
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 0
66120: PUSH
66121: LD_INT 1
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 1
66130: NEG
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: LD_INT 1
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: LD_INT 2
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: LD_INT 2
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: LD_INT 1
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 2
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 2
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66219: LD_ADDR_VAR 0 49
66223: PUSH
66224: LD_INT 0
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 1
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 1
66257: PUSH
66258: LD_INT 1
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: LD_INT 1
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 1
66277: NEG
66278: PUSH
66279: LD_INT 0
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 1
66288: NEG
66289: PUSH
66290: LD_INT 1
66292: NEG
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 1
66300: PUSH
66301: LD_INT 1
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 2
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 2
66321: PUSH
66322: LD_INT 1
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 2
66331: PUSH
66332: LD_INT 2
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 1
66341: PUSH
66342: LD_INT 2
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66363: LD_ADDR_VAR 0 50
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 1
66391: PUSH
66392: LD_INT 0
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: LD_INT 1
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: LD_INT 1
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: LD_INT 0
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 1
66432: NEG
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 2
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 2
66454: PUSH
66455: LD_INT 2
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 1
66464: PUSH
66465: LD_INT 2
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: LD_INT 2
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 1
66484: NEG
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66507: LD_ADDR_VAR 0 51
66511: PUSH
66512: LD_INT 0
66514: PUSH
66515: LD_INT 0
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 0
66524: PUSH
66525: LD_INT 1
66527: NEG
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 1
66535: PUSH
66536: LD_INT 0
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 1
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: LD_INT 1
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 1
66565: NEG
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 1
66576: NEG
66577: PUSH
66578: LD_INT 1
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 1
66588: PUSH
66589: LD_INT 2
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: LD_INT 2
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 1
66608: NEG
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 2
66619: NEG
66620: PUSH
66621: LD_INT 0
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 2
66630: NEG
66631: PUSH
66632: LD_INT 1
66634: NEG
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66654: LD_ADDR_VAR 0 52
66658: PUSH
66659: LD_INT 0
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: LD_INT 1
66674: NEG
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: PUSH
66683: LD_INT 0
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 1
66692: PUSH
66693: LD_INT 1
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 1
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 1
66723: NEG
66724: PUSH
66725: LD_INT 1
66727: NEG
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: LD_INT 2
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: NEG
66748: PUSH
66749: LD_INT 1
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 2
66758: NEG
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 2
66769: NEG
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 2
66781: NEG
66782: PUSH
66783: LD_INT 2
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66805: LD_ADDR_VAR 0 53
66809: PUSH
66810: LD_INT 0
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: LD_INT 1
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 1
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: LD_INT 1
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 0
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: NEG
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: LD_INT 1
66878: NEG
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 1
66886: NEG
66887: PUSH
66888: LD_INT 2
66890: NEG
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 0
66898: PUSH
66899: LD_INT 2
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 1
66909: PUSH
66910: LD_INT 1
66912: NEG
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 2
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 2
66930: PUSH
66931: LD_INT 1
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 1
66950: PUSH
66951: LD_INT 2
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 0
66960: PUSH
66961: LD_INT 2
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 1
66970: NEG
66971: PUSH
66972: LD_INT 1
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 2
66981: NEG
66982: PUSH
66983: LD_INT 0
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 2
66992: NEG
66993: PUSH
66994: LD_INT 1
66996: NEG
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 2
67004: NEG
67005: PUSH
67006: LD_INT 2
67008: NEG
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67035: LD_ADDR_VAR 0 54
67039: PUSH
67040: LD_INT 0
67042: PUSH
67043: LD_INT 0
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 0
67052: PUSH
67053: LD_INT 1
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 1
67063: PUSH
67064: LD_INT 0
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 1
67073: PUSH
67074: LD_INT 1
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 0
67083: PUSH
67084: LD_INT 1
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 1
67093: NEG
67094: PUSH
67095: LD_INT 0
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 1
67104: NEG
67105: PUSH
67106: LD_INT 1
67108: NEG
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 1
67116: NEG
67117: PUSH
67118: LD_INT 2
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: LD_INT 2
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 1
67139: PUSH
67140: LD_INT 1
67142: NEG
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 2
67150: PUSH
67151: LD_INT 0
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 2
67160: PUSH
67161: LD_INT 1
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 2
67170: PUSH
67171: LD_INT 2
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 1
67180: PUSH
67181: LD_INT 2
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 0
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 1
67200: NEG
67201: PUSH
67202: LD_INT 1
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 2
67211: NEG
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 2
67222: NEG
67223: PUSH
67224: LD_INT 1
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 2
67234: NEG
67235: PUSH
67236: LD_INT 2
67238: NEG
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67265: LD_ADDR_VAR 0 55
67269: PUSH
67270: LD_INT 0
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: LD_INT 1
67285: NEG
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 1
67293: PUSH
67294: LD_INT 0
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 1
67303: PUSH
67304: LD_INT 1
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 0
67313: PUSH
67314: LD_INT 1
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 1
67323: NEG
67324: PUSH
67325: LD_INT 0
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 1
67334: NEG
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 1
67346: NEG
67347: PUSH
67348: LD_INT 2
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 0
67358: PUSH
67359: LD_INT 2
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 1
67369: PUSH
67370: LD_INT 1
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 2
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 2
67390: PUSH
67391: LD_INT 1
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 2
67400: PUSH
67401: LD_INT 2
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 1
67410: PUSH
67411: LD_INT 2
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 0
67420: PUSH
67421: LD_INT 2
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 2
67441: NEG
67442: PUSH
67443: LD_INT 0
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 2
67452: NEG
67453: PUSH
67454: LD_INT 1
67456: NEG
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 2
67464: NEG
67465: PUSH
67466: LD_INT 2
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67495: LD_ADDR_VAR 0 56
67499: PUSH
67500: LD_INT 0
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 0
67512: PUSH
67513: LD_INT 1
67515: NEG
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 1
67523: PUSH
67524: LD_INT 0
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 1
67533: PUSH
67534: LD_INT 1
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 0
67543: PUSH
67544: LD_INT 1
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 1
67553: NEG
67554: PUSH
67555: LD_INT 0
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 1
67564: NEG
67565: PUSH
67566: LD_INT 1
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 1
67576: NEG
67577: PUSH
67578: LD_INT 2
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 0
67588: PUSH
67589: LD_INT 2
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 1
67599: PUSH
67600: LD_INT 1
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 2
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 2
67620: PUSH
67621: LD_INT 1
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 2
67630: PUSH
67631: LD_INT 2
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 1
67640: PUSH
67641: LD_INT 2
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 1
67660: NEG
67661: PUSH
67662: LD_INT 1
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 2
67671: NEG
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 2
67682: NEG
67683: PUSH
67684: LD_INT 1
67686: NEG
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 2
67694: NEG
67695: PUSH
67696: LD_INT 2
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67725: LD_ADDR_VAR 0 57
67729: PUSH
67730: LD_INT 0
67732: PUSH
67733: LD_INT 0
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 0
67742: PUSH
67743: LD_INT 1
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 1
67753: PUSH
67754: LD_INT 0
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: LD_INT 1
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 0
67773: PUSH
67774: LD_INT 1
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: LD_INT 0
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 1
67794: NEG
67795: PUSH
67796: LD_INT 1
67798: NEG
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 1
67806: NEG
67807: PUSH
67808: LD_INT 2
67810: NEG
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 0
67818: PUSH
67819: LD_INT 2
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 1
67829: PUSH
67830: LD_INT 1
67832: NEG
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 2
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 2
67850: PUSH
67851: LD_INT 1
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: LD_INT 2
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 1
67870: PUSH
67871: LD_INT 2
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: LD_INT 2
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 1
67890: NEG
67891: PUSH
67892: LD_INT 1
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 2
67901: NEG
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 2
67912: NEG
67913: PUSH
67914: LD_INT 1
67916: NEG
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 2
67924: NEG
67925: PUSH
67926: LD_INT 2
67928: NEG
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67955: LD_ADDR_VAR 0 58
67959: PUSH
67960: LD_INT 0
67962: PUSH
67963: LD_INT 0
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 0
67972: PUSH
67973: LD_INT 1
67975: NEG
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 1
67983: PUSH
67984: LD_INT 0
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 1
67993: PUSH
67994: LD_INT 1
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 0
68003: PUSH
68004: LD_INT 1
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 1
68013: NEG
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 1
68024: NEG
68025: PUSH
68026: LD_INT 1
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 1
68036: NEG
68037: PUSH
68038: LD_INT 2
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: LD_INT 2
68051: NEG
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 1
68059: PUSH
68060: LD_INT 1
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 2
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 2
68080: PUSH
68081: LD_INT 1
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 2
68090: PUSH
68091: LD_INT 2
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 1
68100: PUSH
68101: LD_INT 2
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: LD_INT 2
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 1
68120: NEG
68121: PUSH
68122: LD_INT 1
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 2
68131: NEG
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 2
68142: NEG
68143: PUSH
68144: LD_INT 1
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 2
68154: NEG
68155: PUSH
68156: LD_INT 2
68158: NEG
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68185: LD_ADDR_VAR 0 59
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: LD_INT 0
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 0
68202: PUSH
68203: LD_INT 1
68205: NEG
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 1
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 1
68223: PUSH
68224: LD_INT 1
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 0
68233: PUSH
68234: LD_INT 1
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 1
68243: NEG
68244: PUSH
68245: LD_INT 0
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 1
68254: NEG
68255: PUSH
68256: LD_INT 1
68258: NEG
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68273: LD_ADDR_VAR 0 60
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: LD_INT 0
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: LD_INT 1
68293: NEG
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 1
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: LD_INT 1
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 0
68321: PUSH
68322: LD_INT 1
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 1
68331: NEG
68332: PUSH
68333: LD_INT 0
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 1
68342: NEG
68343: PUSH
68344: LD_INT 1
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68361: LD_ADDR_VAR 0 61
68365: PUSH
68366: LD_INT 0
68368: PUSH
68369: LD_INT 0
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 0
68378: PUSH
68379: LD_INT 1
68381: NEG
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 1
68389: PUSH
68390: LD_INT 0
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 1
68399: PUSH
68400: LD_INT 1
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 0
68409: PUSH
68410: LD_INT 1
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 1
68419: NEG
68420: PUSH
68421: LD_INT 0
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 1
68430: NEG
68431: PUSH
68432: LD_INT 1
68434: NEG
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68449: LD_ADDR_VAR 0 62
68453: PUSH
68454: LD_INT 0
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: LD_INT 1
68469: NEG
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 1
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 1
68487: PUSH
68488: LD_INT 1
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: LD_INT 1
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 1
68507: NEG
68508: PUSH
68509: LD_INT 0
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 1
68518: NEG
68519: PUSH
68520: LD_INT 1
68522: NEG
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68537: LD_ADDR_VAR 0 63
68541: PUSH
68542: LD_INT 0
68544: PUSH
68545: LD_INT 0
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 0
68554: PUSH
68555: LD_INT 1
68557: NEG
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 1
68565: PUSH
68566: LD_INT 0
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 1
68575: PUSH
68576: LD_INT 1
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: LD_INT 1
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 1
68595: NEG
68596: PUSH
68597: LD_INT 0
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 1
68606: NEG
68607: PUSH
68608: LD_INT 1
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68625: LD_ADDR_VAR 0 64
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: LD_INT 0
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 0
68642: PUSH
68643: LD_INT 1
68645: NEG
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 1
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 1
68663: PUSH
68664: LD_INT 1
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: LD_INT 1
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 1
68683: NEG
68684: PUSH
68685: LD_INT 0
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 1
68694: NEG
68695: PUSH
68696: LD_INT 1
68698: NEG
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: ST_TO_ADDR
// end ; 1 :
68713: GO 74610
68715: LD_INT 1
68717: DOUBLE
68718: EQUAL
68719: IFTRUE 68723
68721: GO 71346
68723: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68724: LD_ADDR_VAR 0 11
68728: PUSH
68729: LD_INT 1
68731: NEG
68732: PUSH
68733: LD_INT 3
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 0
68743: PUSH
68744: LD_INT 3
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 1
68754: PUSH
68755: LD_INT 2
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: LIST
68767: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68768: LD_ADDR_VAR 0 12
68772: PUSH
68773: LD_INT 2
68775: PUSH
68776: LD_INT 1
68778: NEG
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 3
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 3
68796: PUSH
68797: LD_INT 1
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: LIST
68808: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68809: LD_ADDR_VAR 0 13
68813: PUSH
68814: LD_INT 3
68816: PUSH
68817: LD_INT 2
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 3
68826: PUSH
68827: LD_INT 3
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 2
68836: PUSH
68837: LD_INT 3
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: LIST
68848: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68849: LD_ADDR_VAR 0 14
68853: PUSH
68854: LD_INT 1
68856: PUSH
68857: LD_INT 3
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 0
68866: PUSH
68867: LD_INT 3
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 1
68876: NEG
68877: PUSH
68878: LD_INT 2
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: LIST
68889: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68890: LD_ADDR_VAR 0 15
68894: PUSH
68895: LD_INT 2
68897: NEG
68898: PUSH
68899: LD_INT 1
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: LD_INT 3
68908: NEG
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 3
68919: NEG
68920: PUSH
68921: LD_INT 1
68923: NEG
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: LIST
68933: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68934: LD_ADDR_VAR 0 16
68938: PUSH
68939: LD_INT 2
68941: NEG
68942: PUSH
68943: LD_INT 3
68945: NEG
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 3
68953: NEG
68954: PUSH
68955: LD_INT 2
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 3
68965: NEG
68966: PUSH
68967: LD_INT 3
68969: NEG
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: LIST
68979: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68980: LD_ADDR_VAR 0 17
68984: PUSH
68985: LD_INT 1
68987: NEG
68988: PUSH
68989: LD_INT 3
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: LD_INT 3
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 1
69010: PUSH
69011: LD_INT 2
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: LIST
69023: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69024: LD_ADDR_VAR 0 18
69028: PUSH
69029: LD_INT 2
69031: PUSH
69032: LD_INT 1
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 3
69042: PUSH
69043: LD_INT 0
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 3
69052: PUSH
69053: LD_INT 1
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: LIST
69064: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69065: LD_ADDR_VAR 0 19
69069: PUSH
69070: LD_INT 3
69072: PUSH
69073: LD_INT 2
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 3
69082: PUSH
69083: LD_INT 3
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 2
69092: PUSH
69093: LD_INT 3
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: LIST
69104: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69105: LD_ADDR_VAR 0 20
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: LD_INT 3
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: LD_INT 3
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: PUSH
69134: LD_INT 2
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: LIST
69145: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69146: LD_ADDR_VAR 0 21
69150: PUSH
69151: LD_INT 2
69153: NEG
69154: PUSH
69155: LD_INT 1
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 3
69164: NEG
69165: PUSH
69166: LD_INT 0
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 3
69175: NEG
69176: PUSH
69177: LD_INT 1
69179: NEG
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: LIST
69189: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69190: LD_ADDR_VAR 0 22
69194: PUSH
69195: LD_INT 2
69197: NEG
69198: PUSH
69199: LD_INT 3
69201: NEG
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 3
69209: NEG
69210: PUSH
69211: LD_INT 2
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 3
69221: NEG
69222: PUSH
69223: LD_INT 3
69225: NEG
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: LIST
69235: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69236: LD_ADDR_VAR 0 23
69240: PUSH
69241: LD_INT 0
69243: PUSH
69244: LD_INT 3
69246: NEG
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 1
69254: NEG
69255: PUSH
69256: LD_INT 4
69258: NEG
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 1
69266: PUSH
69267: LD_INT 3
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: LIST
69279: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69280: LD_ADDR_VAR 0 24
69284: PUSH
69285: LD_INT 3
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 3
69297: PUSH
69298: LD_INT 1
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 4
69308: PUSH
69309: LD_INT 1
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: LIST
69320: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69321: LD_ADDR_VAR 0 25
69325: PUSH
69326: LD_INT 3
69328: PUSH
69329: LD_INT 3
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 4
69338: PUSH
69339: LD_INT 3
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 3
69348: PUSH
69349: LD_INT 4
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: LIST
69360: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69361: LD_ADDR_VAR 0 26
69365: PUSH
69366: LD_INT 0
69368: PUSH
69369: LD_INT 3
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 1
69378: PUSH
69379: LD_INT 4
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 1
69388: NEG
69389: PUSH
69390: LD_INT 3
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: LIST
69401: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69402: LD_ADDR_VAR 0 27
69406: PUSH
69407: LD_INT 3
69409: NEG
69410: PUSH
69411: LD_INT 0
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 3
69420: NEG
69421: PUSH
69422: LD_INT 1
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 4
69431: NEG
69432: PUSH
69433: LD_INT 1
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: LIST
69445: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69446: LD_ADDR_VAR 0 28
69450: PUSH
69451: LD_INT 3
69453: NEG
69454: PUSH
69455: LD_INT 3
69457: NEG
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 3
69465: NEG
69466: PUSH
69467: LD_INT 4
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 4
69477: NEG
69478: PUSH
69479: LD_INT 3
69481: NEG
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: LIST
69491: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69492: LD_ADDR_VAR 0 29
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: LD_INT 3
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 0
69511: PUSH
69512: LD_INT 3
69514: NEG
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 1
69522: PUSH
69523: LD_INT 2
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 1
69533: NEG
69534: PUSH
69535: LD_INT 4
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 0
69545: PUSH
69546: LD_INT 4
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 1
69556: PUSH
69557: LD_INT 3
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 1
69567: NEG
69568: PUSH
69569: LD_INT 5
69571: NEG
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: LD_INT 5
69582: NEG
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: LD_INT 4
69593: NEG
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 1
69601: NEG
69602: PUSH
69603: LD_INT 6
69605: NEG
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 0
69613: PUSH
69614: LD_INT 6
69616: NEG
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 1
69624: PUSH
69625: LD_INT 5
69627: NEG
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69647: LD_ADDR_VAR 0 30
69651: PUSH
69652: LD_INT 2
69654: PUSH
69655: LD_INT 1
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 3
69665: PUSH
69666: LD_INT 0
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 3
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 3
69685: PUSH
69686: LD_INT 1
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 4
69696: PUSH
69697: LD_INT 0
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 4
69706: PUSH
69707: LD_INT 1
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 4
69716: PUSH
69717: LD_INT 1
69719: NEG
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 5
69727: PUSH
69728: LD_INT 0
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 5
69737: PUSH
69738: LD_INT 1
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 5
69747: PUSH
69748: LD_INT 1
69750: NEG
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 6
69758: PUSH
69759: LD_INT 0
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 6
69768: PUSH
69769: LD_INT 1
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69790: LD_ADDR_VAR 0 31
69794: PUSH
69795: LD_INT 3
69797: PUSH
69798: LD_INT 2
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 3
69807: PUSH
69808: LD_INT 3
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 2
69817: PUSH
69818: LD_INT 3
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 4
69827: PUSH
69828: LD_INT 3
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 4
69837: PUSH
69838: LD_INT 4
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 3
69847: PUSH
69848: LD_INT 4
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 5
69857: PUSH
69858: LD_INT 4
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 5
69867: PUSH
69868: LD_INT 5
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 4
69877: PUSH
69878: LD_INT 5
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 6
69887: PUSH
69888: LD_INT 5
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 6
69897: PUSH
69898: LD_INT 6
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 5
69907: PUSH
69908: LD_INT 6
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69929: LD_ADDR_VAR 0 32
69933: PUSH
69934: LD_INT 1
69936: PUSH
69937: LD_INT 3
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: LD_INT 3
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 1
69956: NEG
69957: PUSH
69958: LD_INT 2
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 1
69967: PUSH
69968: LD_INT 4
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 0
69977: PUSH
69978: LD_INT 4
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 1
69987: NEG
69988: PUSH
69989: LD_INT 3
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 1
69998: PUSH
69999: LD_INT 5
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 0
70008: PUSH
70009: LD_INT 5
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 1
70018: NEG
70019: PUSH
70020: LD_INT 4
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 1
70029: PUSH
70030: LD_INT 6
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 0
70039: PUSH
70040: LD_INT 6
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 1
70049: NEG
70050: PUSH
70051: LD_INT 5
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70072: LD_ADDR_VAR 0 33
70076: PUSH
70077: LD_INT 2
70079: NEG
70080: PUSH
70081: LD_INT 1
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 3
70090: NEG
70091: PUSH
70092: LD_INT 0
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 3
70101: NEG
70102: PUSH
70103: LD_INT 1
70105: NEG
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 3
70113: NEG
70114: PUSH
70115: LD_INT 1
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 4
70124: NEG
70125: PUSH
70126: LD_INT 0
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 4
70135: NEG
70136: PUSH
70137: LD_INT 1
70139: NEG
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 4
70147: NEG
70148: PUSH
70149: LD_INT 1
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 5
70158: NEG
70159: PUSH
70160: LD_INT 0
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 5
70169: NEG
70170: PUSH
70171: LD_INT 1
70173: NEG
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 5
70181: NEG
70182: PUSH
70183: LD_INT 1
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 6
70192: NEG
70193: PUSH
70194: LD_INT 0
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 6
70203: NEG
70204: PUSH
70205: LD_INT 1
70207: NEG
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70227: LD_ADDR_VAR 0 34
70231: PUSH
70232: LD_INT 2
70234: NEG
70235: PUSH
70236: LD_INT 3
70238: NEG
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 3
70246: NEG
70247: PUSH
70248: LD_INT 2
70250: NEG
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 3
70258: NEG
70259: PUSH
70260: LD_INT 3
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 3
70270: NEG
70271: PUSH
70272: LD_INT 4
70274: NEG
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 4
70282: NEG
70283: PUSH
70284: LD_INT 3
70286: NEG
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 4
70294: NEG
70295: PUSH
70296: LD_INT 4
70298: NEG
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 4
70306: NEG
70307: PUSH
70308: LD_INT 5
70310: NEG
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 5
70318: NEG
70319: PUSH
70320: LD_INT 4
70322: NEG
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 5
70330: NEG
70331: PUSH
70332: LD_INT 5
70334: NEG
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 5
70342: NEG
70343: PUSH
70344: LD_INT 6
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 6
70354: NEG
70355: PUSH
70356: LD_INT 5
70358: NEG
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 6
70366: NEG
70367: PUSH
70368: LD_INT 6
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70390: LD_ADDR_VAR 0 41
70394: PUSH
70395: LD_INT 0
70397: PUSH
70398: LD_INT 2
70400: NEG
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 1
70408: NEG
70409: PUSH
70410: LD_INT 3
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 1
70420: PUSH
70421: LD_INT 2
70423: NEG
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: LIST
70433: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70434: LD_ADDR_VAR 0 42
70438: PUSH
70439: LD_INT 2
70441: PUSH
70442: LD_INT 0
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 2
70451: PUSH
70452: LD_INT 1
70454: NEG
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 3
70462: PUSH
70463: LD_INT 1
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: LIST
70474: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70475: LD_ADDR_VAR 0 43
70479: PUSH
70480: LD_INT 2
70482: PUSH
70483: LD_INT 2
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 3
70492: PUSH
70493: LD_INT 2
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 2
70502: PUSH
70503: LD_INT 3
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: LIST
70514: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70515: LD_ADDR_VAR 0 44
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: LD_INT 2
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 1
70532: PUSH
70533: LD_INT 3
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 1
70542: NEG
70543: PUSH
70544: LD_INT 2
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: LIST
70555: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70556: LD_ADDR_VAR 0 45
70560: PUSH
70561: LD_INT 2
70563: NEG
70564: PUSH
70565: LD_INT 0
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 2
70574: NEG
70575: PUSH
70576: LD_INT 1
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 3
70585: NEG
70586: PUSH
70587: LD_INT 1
70589: NEG
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: LIST
70599: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70600: LD_ADDR_VAR 0 46
70604: PUSH
70605: LD_INT 2
70607: NEG
70608: PUSH
70609: LD_INT 2
70611: NEG
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 2
70619: NEG
70620: PUSH
70621: LD_INT 3
70623: NEG
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 3
70631: NEG
70632: PUSH
70633: LD_INT 2
70635: NEG
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: LIST
70645: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70646: LD_ADDR_VAR 0 47
70650: PUSH
70651: LD_INT 2
70653: NEG
70654: PUSH
70655: LD_INT 3
70657: NEG
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 1
70665: NEG
70666: PUSH
70667: LD_INT 3
70669: NEG
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70679: LD_ADDR_VAR 0 48
70683: PUSH
70684: LD_INT 1
70686: PUSH
70687: LD_INT 2
70689: NEG
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 2
70697: PUSH
70698: LD_INT 1
70700: NEG
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70710: LD_ADDR_VAR 0 49
70714: PUSH
70715: LD_INT 3
70717: PUSH
70718: LD_INT 1
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 3
70727: PUSH
70728: LD_INT 2
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70739: LD_ADDR_VAR 0 50
70743: PUSH
70744: LD_INT 2
70746: PUSH
70747: LD_INT 3
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 1
70756: PUSH
70757: LD_INT 3
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70768: LD_ADDR_VAR 0 51
70772: PUSH
70773: LD_INT 1
70775: NEG
70776: PUSH
70777: LD_INT 2
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 2
70786: NEG
70787: PUSH
70788: LD_INT 1
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70799: LD_ADDR_VAR 0 52
70803: PUSH
70804: LD_INT 3
70806: NEG
70807: PUSH
70808: LD_INT 1
70810: NEG
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 3
70818: NEG
70819: PUSH
70820: LD_INT 2
70822: NEG
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70832: LD_ADDR_VAR 0 53
70836: PUSH
70837: LD_INT 1
70839: NEG
70840: PUSH
70841: LD_INT 3
70843: NEG
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 0
70851: PUSH
70852: LD_INT 3
70854: NEG
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 1
70862: PUSH
70863: LD_INT 2
70865: NEG
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: LIST
70875: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70876: LD_ADDR_VAR 0 54
70880: PUSH
70881: LD_INT 2
70883: PUSH
70884: LD_INT 1
70886: NEG
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 3
70894: PUSH
70895: LD_INT 0
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 3
70904: PUSH
70905: LD_INT 1
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: LIST
70916: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70917: LD_ADDR_VAR 0 55
70921: PUSH
70922: LD_INT 3
70924: PUSH
70925: LD_INT 2
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 3
70934: PUSH
70935: LD_INT 3
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 2
70944: PUSH
70945: LD_INT 3
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: LIST
70956: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70957: LD_ADDR_VAR 0 56
70961: PUSH
70962: LD_INT 1
70964: PUSH
70965: LD_INT 3
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 0
70974: PUSH
70975: LD_INT 3
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 1
70984: NEG
70985: PUSH
70986: LD_INT 2
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: LIST
70997: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70998: LD_ADDR_VAR 0 57
71002: PUSH
71003: LD_INT 2
71005: NEG
71006: PUSH
71007: LD_INT 1
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 3
71016: NEG
71017: PUSH
71018: LD_INT 0
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 3
71027: NEG
71028: PUSH
71029: LD_INT 1
71031: NEG
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: LIST
71041: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71042: LD_ADDR_VAR 0 58
71046: PUSH
71047: LD_INT 2
71049: NEG
71050: PUSH
71051: LD_INT 3
71053: NEG
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 3
71061: NEG
71062: PUSH
71063: LD_INT 2
71065: NEG
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 3
71073: NEG
71074: PUSH
71075: LD_INT 3
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: LIST
71087: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71088: LD_ADDR_VAR 0 59
71092: PUSH
71093: LD_INT 1
71095: NEG
71096: PUSH
71097: LD_INT 2
71099: NEG
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 0
71107: PUSH
71108: LD_INT 2
71110: NEG
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 1
71118: PUSH
71119: LD_INT 1
71121: NEG
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: LIST
71131: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71132: LD_ADDR_VAR 0 60
71136: PUSH
71137: LD_INT 1
71139: PUSH
71140: LD_INT 1
71142: NEG
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 2
71150: PUSH
71151: LD_INT 0
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 2
71160: PUSH
71161: LD_INT 1
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: LIST
71172: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71173: LD_ADDR_VAR 0 61
71177: PUSH
71178: LD_INT 2
71180: PUSH
71181: LD_INT 1
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 2
71190: PUSH
71191: LD_INT 2
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 1
71200: PUSH
71201: LD_INT 2
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: LIST
71212: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71213: LD_ADDR_VAR 0 62
71217: PUSH
71218: LD_INT 1
71220: PUSH
71221: LD_INT 2
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 0
71230: PUSH
71231: LD_INT 2
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: PUSH
71238: LD_INT 1
71240: NEG
71241: PUSH
71242: LD_INT 1
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: LIST
71253: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71254: LD_ADDR_VAR 0 63
71258: PUSH
71259: LD_INT 1
71261: NEG
71262: PUSH
71263: LD_INT 1
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 2
71272: NEG
71273: PUSH
71274: LD_INT 0
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 2
71283: NEG
71284: PUSH
71285: LD_INT 1
71287: NEG
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: LIST
71297: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71298: LD_ADDR_VAR 0 64
71302: PUSH
71303: LD_INT 1
71305: NEG
71306: PUSH
71307: LD_INT 2
71309: NEG
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 2
71317: NEG
71318: PUSH
71319: LD_INT 1
71321: NEG
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 2
71329: NEG
71330: PUSH
71331: LD_INT 2
71333: NEG
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: LIST
71343: ST_TO_ADDR
// end ; 2 :
71344: GO 74610
71346: LD_INT 2
71348: DOUBLE
71349: EQUAL
71350: IFTRUE 71354
71352: GO 74609
71354: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71355: LD_ADDR_VAR 0 29
71359: PUSH
71360: LD_INT 4
71362: PUSH
71363: LD_INT 0
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 4
71372: PUSH
71373: LD_INT 1
71375: NEG
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 5
71383: PUSH
71384: LD_INT 0
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 5
71393: PUSH
71394: LD_INT 1
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 4
71403: PUSH
71404: LD_INT 1
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 3
71413: PUSH
71414: LD_INT 0
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_INT 3
71423: PUSH
71424: LD_INT 1
71426: NEG
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 3
71434: PUSH
71435: LD_INT 2
71437: NEG
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 5
71445: PUSH
71446: LD_INT 2
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 3
71455: PUSH
71456: LD_INT 3
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 3
71465: PUSH
71466: LD_INT 2
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: PUSH
71473: LD_INT 4
71475: PUSH
71476: LD_INT 3
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 4
71485: PUSH
71486: LD_INT 4
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 3
71495: PUSH
71496: LD_INT 4
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 2
71505: PUSH
71506: LD_INT 3
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PUSH
71513: LD_INT 2
71515: PUSH
71516: LD_INT 2
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 4
71525: PUSH
71526: LD_INT 2
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 2
71535: PUSH
71536: LD_INT 4
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 0
71545: PUSH
71546: LD_INT 4
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 0
71555: PUSH
71556: LD_INT 3
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 1
71565: PUSH
71566: LD_INT 4
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 1
71575: PUSH
71576: LD_INT 5
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 0
71585: PUSH
71586: LD_INT 5
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 1
71595: NEG
71596: PUSH
71597: LD_INT 4
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 1
71606: NEG
71607: PUSH
71608: LD_INT 3
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 2
71617: PUSH
71618: LD_INT 5
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 2
71627: NEG
71628: PUSH
71629: LD_INT 3
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 3
71638: NEG
71639: PUSH
71640: LD_INT 0
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 3
71649: NEG
71650: PUSH
71651: LD_INT 1
71653: NEG
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 2
71661: NEG
71662: PUSH
71663: LD_INT 0
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 2
71672: NEG
71673: PUSH
71674: LD_INT 1
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 3
71683: NEG
71684: PUSH
71685: LD_INT 1
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 4
71694: NEG
71695: PUSH
71696: LD_INT 0
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 4
71705: NEG
71706: PUSH
71707: LD_INT 1
71709: NEG
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 4
71717: NEG
71718: PUSH
71719: LD_INT 2
71721: NEG
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 2
71729: NEG
71730: PUSH
71731: LD_INT 2
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 4
71740: NEG
71741: PUSH
71742: LD_INT 4
71744: NEG
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 4
71752: NEG
71753: PUSH
71754: LD_INT 5
71756: NEG
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 3
71764: NEG
71765: PUSH
71766: LD_INT 4
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 3
71776: NEG
71777: PUSH
71778: LD_INT 3
71780: NEG
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 4
71788: NEG
71789: PUSH
71790: LD_INT 3
71792: NEG
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 5
71800: NEG
71801: PUSH
71802: LD_INT 4
71804: NEG
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 5
71812: NEG
71813: PUSH
71814: LD_INT 5
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 3
71824: NEG
71825: PUSH
71826: LD_INT 5
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 5
71836: NEG
71837: PUSH
71838: LD_INT 3
71840: NEG
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71893: LD_ADDR_VAR 0 30
71897: PUSH
71898: LD_INT 4
71900: PUSH
71901: LD_INT 4
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 4
71910: PUSH
71911: LD_INT 3
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 5
71920: PUSH
71921: LD_INT 4
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 5
71930: PUSH
71931: LD_INT 5
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 4
71940: PUSH
71941: LD_INT 5
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 3
71950: PUSH
71951: LD_INT 4
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: PUSH
71958: LD_INT 3
71960: PUSH
71961: LD_INT 3
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 5
71970: PUSH
71971: LD_INT 3
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: LD_INT 3
71980: PUSH
71981: LD_INT 5
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: PUSH
71988: LD_INT 0
71990: PUSH
71991: LD_INT 3
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PUSH
71998: LD_INT 0
72000: PUSH
72001: LD_INT 2
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 1
72010: PUSH
72011: LD_INT 3
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PUSH
72018: LD_INT 1
72020: PUSH
72021: LD_INT 4
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 0
72030: PUSH
72031: LD_INT 4
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: PUSH
72038: LD_INT 1
72040: NEG
72041: PUSH
72042: LD_INT 3
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 1
72051: NEG
72052: PUSH
72053: LD_INT 2
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: LD_INT 2
72062: PUSH
72063: LD_INT 4
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: LD_INT 2
72072: NEG
72073: PUSH
72074: LD_INT 2
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 4
72083: NEG
72084: PUSH
72085: LD_INT 0
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 4
72094: NEG
72095: PUSH
72096: LD_INT 1
72098: NEG
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 3
72106: NEG
72107: PUSH
72108: LD_INT 0
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 3
72117: NEG
72118: PUSH
72119: LD_INT 1
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: LD_INT 4
72128: NEG
72129: PUSH
72130: LD_INT 1
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: PUSH
72137: LD_INT 5
72139: NEG
72140: PUSH
72141: LD_INT 0
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 5
72150: NEG
72151: PUSH
72152: LD_INT 1
72154: NEG
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 5
72162: NEG
72163: PUSH
72164: LD_INT 2
72166: NEG
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 3
72174: NEG
72175: PUSH
72176: LD_INT 2
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: LD_INT 3
72185: NEG
72186: PUSH
72187: LD_INT 3
72189: NEG
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 3
72197: NEG
72198: PUSH
72199: LD_INT 4
72201: NEG
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 2
72209: NEG
72210: PUSH
72211: LD_INT 3
72213: NEG
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 2
72221: NEG
72222: PUSH
72223: LD_INT 2
72225: NEG
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 3
72233: NEG
72234: PUSH
72235: LD_INT 2
72237: NEG
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 4
72245: NEG
72246: PUSH
72247: LD_INT 3
72249: NEG
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 4
72257: NEG
72258: PUSH
72259: LD_INT 4
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 2
72269: NEG
72270: PUSH
72271: LD_INT 4
72273: NEG
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 4
72281: NEG
72282: PUSH
72283: LD_INT 2
72285: NEG
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 0
72293: PUSH
72294: LD_INT 4
72296: NEG
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 0
72304: PUSH
72305: LD_INT 5
72307: NEG
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: LD_INT 1
72315: PUSH
72316: LD_INT 4
72318: NEG
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 1
72326: PUSH
72327: LD_INT 3
72329: NEG
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 0
72337: PUSH
72338: LD_INT 3
72340: NEG
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 1
72348: NEG
72349: PUSH
72350: LD_INT 4
72352: NEG
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 1
72360: NEG
72361: PUSH
72362: LD_INT 5
72364: NEG
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 2
72372: PUSH
72373: LD_INT 3
72375: NEG
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: PUSH
72381: LD_INT 2
72383: NEG
72384: PUSH
72385: LD_INT 5
72387: NEG
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72440: LD_ADDR_VAR 0 31
72444: PUSH
72445: LD_INT 0
72447: PUSH
72448: LD_INT 4
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: LD_INT 0
72457: PUSH
72458: LD_INT 3
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 1
72467: PUSH
72468: LD_INT 4
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 1
72477: PUSH
72478: LD_INT 5
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 0
72487: PUSH
72488: LD_INT 5
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 1
72497: NEG
72498: PUSH
72499: LD_INT 4
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: LD_INT 1
72508: NEG
72509: PUSH
72510: LD_INT 3
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 2
72519: PUSH
72520: LD_INT 5
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 2
72529: NEG
72530: PUSH
72531: LD_INT 3
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 3
72540: NEG
72541: PUSH
72542: LD_INT 0
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 3
72551: NEG
72552: PUSH
72553: LD_INT 1
72555: NEG
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 2
72563: NEG
72564: PUSH
72565: LD_INT 0
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: LD_INT 2
72574: NEG
72575: PUSH
72576: LD_INT 1
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 3
72585: NEG
72586: PUSH
72587: LD_INT 1
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 4
72596: NEG
72597: PUSH
72598: LD_INT 0
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 4
72607: NEG
72608: PUSH
72609: LD_INT 1
72611: NEG
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 4
72619: NEG
72620: PUSH
72621: LD_INT 2
72623: NEG
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 2
72631: NEG
72632: PUSH
72633: LD_INT 2
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 4
72642: NEG
72643: PUSH
72644: LD_INT 4
72646: NEG
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: PUSH
72652: LD_INT 4
72654: NEG
72655: PUSH
72656: LD_INT 5
72658: NEG
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: PUSH
72664: LD_INT 3
72666: NEG
72667: PUSH
72668: LD_INT 4
72670: NEG
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 3
72678: NEG
72679: PUSH
72680: LD_INT 3
72682: NEG
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 4
72690: NEG
72691: PUSH
72692: LD_INT 3
72694: NEG
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 5
72702: NEG
72703: PUSH
72704: LD_INT 4
72706: NEG
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: LD_INT 5
72714: NEG
72715: PUSH
72716: LD_INT 5
72718: NEG
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 3
72726: NEG
72727: PUSH
72728: LD_INT 5
72730: NEG
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 5
72738: NEG
72739: PUSH
72740: LD_INT 3
72742: NEG
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 0
72750: PUSH
72751: LD_INT 3
72753: NEG
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 0
72761: PUSH
72762: LD_INT 4
72764: NEG
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: PUSH
72770: LD_INT 1
72772: PUSH
72773: LD_INT 3
72775: NEG
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: LD_INT 1
72783: PUSH
72784: LD_INT 2
72786: NEG
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 0
72794: PUSH
72795: LD_INT 2
72797: NEG
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 1
72805: NEG
72806: PUSH
72807: LD_INT 3
72809: NEG
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PUSH
72815: LD_INT 1
72817: NEG
72818: PUSH
72819: LD_INT 4
72821: NEG
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 2
72829: PUSH
72830: LD_INT 2
72832: NEG
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 2
72840: NEG
72841: PUSH
72842: LD_INT 4
72844: NEG
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 4
72852: PUSH
72853: LD_INT 0
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: LD_INT 4
72862: PUSH
72863: LD_INT 1
72865: NEG
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: LD_INT 5
72873: PUSH
72874: LD_INT 0
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 5
72883: PUSH
72884: LD_INT 1
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 4
72893: PUSH
72894: LD_INT 1
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 3
72903: PUSH
72904: LD_INT 0
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 3
72913: PUSH
72914: LD_INT 1
72916: NEG
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: PUSH
72922: LD_INT 3
72924: PUSH
72925: LD_INT 2
72927: NEG
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PUSH
72933: LD_INT 5
72935: PUSH
72936: LD_INT 2
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: LIST
72964: LIST
72965: LIST
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: LIST
72973: LIST
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72990: LD_ADDR_VAR 0 32
72994: PUSH
72995: LD_INT 4
72997: NEG
72998: PUSH
72999: LD_INT 0
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 4
73008: NEG
73009: PUSH
73010: LD_INT 1
73012: NEG
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 3
73020: NEG
73021: PUSH
73022: LD_INT 0
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 3
73031: NEG
73032: PUSH
73033: LD_INT 1
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 4
73042: NEG
73043: PUSH
73044: LD_INT 1
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_INT 5
73053: NEG
73054: PUSH
73055: LD_INT 0
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PUSH
73062: LD_INT 5
73064: NEG
73065: PUSH
73066: LD_INT 1
73068: NEG
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 5
73076: NEG
73077: PUSH
73078: LD_INT 2
73080: NEG
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: PUSH
73086: LD_INT 3
73088: NEG
73089: PUSH
73090: LD_INT 2
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 3
73099: NEG
73100: PUSH
73101: LD_INT 3
73103: NEG
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 3
73111: NEG
73112: PUSH
73113: LD_INT 4
73115: NEG
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PUSH
73121: LD_INT 2
73123: NEG
73124: PUSH
73125: LD_INT 3
73127: NEG
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 2
73135: NEG
73136: PUSH
73137: LD_INT 2
73139: NEG
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 3
73147: NEG
73148: PUSH
73149: LD_INT 2
73151: NEG
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: PUSH
73157: LD_INT 4
73159: NEG
73160: PUSH
73161: LD_INT 3
73163: NEG
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PUSH
73169: LD_INT 4
73171: NEG
73172: PUSH
73173: LD_INT 4
73175: NEG
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 2
73183: NEG
73184: PUSH
73185: LD_INT 4
73187: NEG
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 4
73195: NEG
73196: PUSH
73197: LD_INT 2
73199: NEG
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: PUSH
73205: LD_INT 0
73207: PUSH
73208: LD_INT 4
73210: NEG
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: PUSH
73216: LD_INT 0
73218: PUSH
73219: LD_INT 5
73221: NEG
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: LD_INT 1
73229: PUSH
73230: LD_INT 4
73232: NEG
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PUSH
73238: LD_INT 1
73240: PUSH
73241: LD_INT 3
73243: NEG
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: PUSH
73249: LD_INT 0
73251: PUSH
73252: LD_INT 3
73254: NEG
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 1
73262: NEG
73263: PUSH
73264: LD_INT 4
73266: NEG
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: PUSH
73272: LD_INT 1
73274: NEG
73275: PUSH
73276: LD_INT 5
73278: NEG
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: LD_INT 2
73286: PUSH
73287: LD_INT 3
73289: NEG
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PUSH
73295: LD_INT 2
73297: NEG
73298: PUSH
73299: LD_INT 5
73301: NEG
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: PUSH
73307: LD_INT 3
73309: PUSH
73310: LD_INT 0
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: LD_INT 3
73319: PUSH
73320: LD_INT 1
73322: NEG
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 4
73330: PUSH
73331: LD_INT 0
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: PUSH
73338: LD_INT 4
73340: PUSH
73341: LD_INT 1
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: PUSH
73348: LD_INT 3
73350: PUSH
73351: LD_INT 1
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 2
73360: PUSH
73361: LD_INT 0
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PUSH
73368: LD_INT 2
73370: PUSH
73371: LD_INT 1
73373: NEG
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: PUSH
73379: LD_INT 2
73381: PUSH
73382: LD_INT 2
73384: NEG
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PUSH
73390: LD_INT 4
73392: PUSH
73393: LD_INT 2
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 4
73402: PUSH
73403: LD_INT 4
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 4
73412: PUSH
73413: LD_INT 3
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PUSH
73420: LD_INT 5
73422: PUSH
73423: LD_INT 4
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: PUSH
73430: LD_INT 5
73432: PUSH
73433: LD_INT 5
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 4
73442: PUSH
73443: LD_INT 5
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: PUSH
73450: LD_INT 3
73452: PUSH
73453: LD_INT 4
73455: PUSH
73456: EMPTY
73457: LIST
73458: LIST
73459: PUSH
73460: LD_INT 3
73462: PUSH
73463: LD_INT 3
73465: PUSH
73466: EMPTY
73467: LIST
73468: LIST
73469: PUSH
73470: LD_INT 5
73472: PUSH
73473: LD_INT 3
73475: PUSH
73476: EMPTY
73477: LIST
73478: LIST
73479: PUSH
73480: LD_INT 3
73482: PUSH
73483: LD_INT 5
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: LIST
73494: LIST
73495: LIST
73496: LIST
73497: LIST
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: LIST
73505: LIST
73506: LIST
73507: LIST
73508: LIST
73509: LIST
73510: LIST
73511: LIST
73512: LIST
73513: LIST
73514: LIST
73515: LIST
73516: LIST
73517: LIST
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: LIST
73533: LIST
73534: LIST
73535: LIST
73536: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73537: LD_ADDR_VAR 0 33
73541: PUSH
73542: LD_INT 4
73544: NEG
73545: PUSH
73546: LD_INT 4
73548: NEG
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 4
73556: NEG
73557: PUSH
73558: LD_INT 5
73560: NEG
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PUSH
73566: LD_INT 3
73568: NEG
73569: PUSH
73570: LD_INT 4
73572: NEG
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 3
73580: NEG
73581: PUSH
73582: LD_INT 3
73584: NEG
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PUSH
73590: LD_INT 4
73592: NEG
73593: PUSH
73594: LD_INT 3
73596: NEG
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: LD_INT 5
73604: NEG
73605: PUSH
73606: LD_INT 4
73608: NEG
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 5
73616: NEG
73617: PUSH
73618: LD_INT 5
73620: NEG
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: PUSH
73626: LD_INT 3
73628: NEG
73629: PUSH
73630: LD_INT 5
73632: NEG
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 5
73640: NEG
73641: PUSH
73642: LD_INT 3
73644: NEG
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 0
73652: PUSH
73653: LD_INT 3
73655: NEG
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: PUSH
73661: LD_INT 0
73663: PUSH
73664: LD_INT 4
73666: NEG
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PUSH
73672: LD_INT 1
73674: PUSH
73675: LD_INT 3
73677: NEG
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 1
73685: PUSH
73686: LD_INT 2
73688: NEG
73689: PUSH
73690: EMPTY
73691: LIST
73692: LIST
73693: PUSH
73694: LD_INT 0
73696: PUSH
73697: LD_INT 2
73699: NEG
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: LD_INT 1
73707: NEG
73708: PUSH
73709: LD_INT 3
73711: NEG
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 1
73719: NEG
73720: PUSH
73721: LD_INT 4
73723: NEG
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: PUSH
73729: LD_INT 2
73731: PUSH
73732: LD_INT 2
73734: NEG
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: PUSH
73740: LD_INT 2
73742: NEG
73743: PUSH
73744: LD_INT 4
73746: NEG
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 4
73754: PUSH
73755: LD_INT 0
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: PUSH
73762: LD_INT 4
73764: PUSH
73765: LD_INT 1
73767: NEG
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 5
73775: PUSH
73776: LD_INT 0
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PUSH
73783: LD_INT 5
73785: PUSH
73786: LD_INT 1
73788: PUSH
73789: EMPTY
73790: LIST
73791: LIST
73792: PUSH
73793: LD_INT 4
73795: PUSH
73796: LD_INT 1
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: LD_INT 3
73805: PUSH
73806: LD_INT 0
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PUSH
73813: LD_INT 3
73815: PUSH
73816: LD_INT 1
73818: NEG
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PUSH
73824: LD_INT 3
73826: PUSH
73827: LD_INT 2
73829: NEG
73830: PUSH
73831: EMPTY
73832: LIST
73833: LIST
73834: PUSH
73835: LD_INT 5
73837: PUSH
73838: LD_INT 2
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 3
73847: PUSH
73848: LD_INT 3
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PUSH
73855: LD_INT 3
73857: PUSH
73858: LD_INT 2
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: PUSH
73865: LD_INT 4
73867: PUSH
73868: LD_INT 3
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: PUSH
73875: LD_INT 4
73877: PUSH
73878: LD_INT 4
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: PUSH
73885: LD_INT 3
73887: PUSH
73888: LD_INT 4
73890: PUSH
73891: EMPTY
73892: LIST
73893: LIST
73894: PUSH
73895: LD_INT 2
73897: PUSH
73898: LD_INT 3
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: PUSH
73905: LD_INT 2
73907: PUSH
73908: LD_INT 2
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: PUSH
73915: LD_INT 4
73917: PUSH
73918: LD_INT 2
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: LD_INT 2
73927: PUSH
73928: LD_INT 4
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: PUSH
73935: LD_INT 0
73937: PUSH
73938: LD_INT 4
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: PUSH
73945: LD_INT 0
73947: PUSH
73948: LD_INT 3
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: PUSH
73955: LD_INT 1
73957: PUSH
73958: LD_INT 4
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: PUSH
73965: LD_INT 1
73967: PUSH
73968: LD_INT 5
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: PUSH
73975: LD_INT 0
73977: PUSH
73978: LD_INT 5
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: PUSH
73985: LD_INT 1
73987: NEG
73988: PUSH
73989: LD_INT 4
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: PUSH
73996: LD_INT 1
73998: NEG
73999: PUSH
74000: LD_INT 3
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: LD_INT 2
74009: PUSH
74010: LD_INT 5
74012: PUSH
74013: EMPTY
74014: LIST
74015: LIST
74016: PUSH
74017: LD_INT 2
74019: NEG
74020: PUSH
74021: LD_INT 3
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: LIST
74038: LIST
74039: LIST
74040: LIST
74041: LIST
74042: LIST
74043: LIST
74044: LIST
74045: LIST
74046: LIST
74047: LIST
74048: LIST
74049: LIST
74050: LIST
74051: LIST
74052: LIST
74053: LIST
74054: LIST
74055: LIST
74056: LIST
74057: LIST
74058: LIST
74059: LIST
74060: LIST
74061: LIST
74062: LIST
74063: LIST
74064: LIST
74065: LIST
74066: LIST
74067: LIST
74068: LIST
74069: LIST
74070: LIST
74071: LIST
74072: LIST
74073: LIST
74074: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74075: LD_ADDR_VAR 0 34
74079: PUSH
74080: LD_INT 0
74082: PUSH
74083: LD_INT 4
74085: NEG
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: LD_INT 0
74093: PUSH
74094: LD_INT 5
74096: NEG
74097: PUSH
74098: EMPTY
74099: LIST
74100: LIST
74101: PUSH
74102: LD_INT 1
74104: PUSH
74105: LD_INT 4
74107: NEG
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: PUSH
74113: LD_INT 1
74115: PUSH
74116: LD_INT 3
74118: NEG
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PUSH
74124: LD_INT 0
74126: PUSH
74127: LD_INT 3
74129: NEG
74130: PUSH
74131: EMPTY
74132: LIST
74133: LIST
74134: PUSH
74135: LD_INT 1
74137: NEG
74138: PUSH
74139: LD_INT 4
74141: NEG
74142: PUSH
74143: EMPTY
74144: LIST
74145: LIST
74146: PUSH
74147: LD_INT 1
74149: NEG
74150: PUSH
74151: LD_INT 5
74153: NEG
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PUSH
74159: LD_INT 2
74161: PUSH
74162: LD_INT 3
74164: NEG
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PUSH
74170: LD_INT 2
74172: NEG
74173: PUSH
74174: LD_INT 5
74176: NEG
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: PUSH
74182: LD_INT 3
74184: PUSH
74185: LD_INT 0
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PUSH
74192: LD_INT 3
74194: PUSH
74195: LD_INT 1
74197: NEG
74198: PUSH
74199: EMPTY
74200: LIST
74201: LIST
74202: PUSH
74203: LD_INT 4
74205: PUSH
74206: LD_INT 0
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: PUSH
74213: LD_INT 4
74215: PUSH
74216: LD_INT 1
74218: PUSH
74219: EMPTY
74220: LIST
74221: LIST
74222: PUSH
74223: LD_INT 3
74225: PUSH
74226: LD_INT 1
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: LD_INT 2
74235: PUSH
74236: LD_INT 0
74238: PUSH
74239: EMPTY
74240: LIST
74241: LIST
74242: PUSH
74243: LD_INT 2
74245: PUSH
74246: LD_INT 1
74248: NEG
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: PUSH
74254: LD_INT 2
74256: PUSH
74257: LD_INT 2
74259: NEG
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: PUSH
74265: LD_INT 4
74267: PUSH
74268: LD_INT 2
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: PUSH
74275: LD_INT 4
74277: PUSH
74278: LD_INT 4
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PUSH
74285: LD_INT 4
74287: PUSH
74288: LD_INT 3
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: PUSH
74295: LD_INT 5
74297: PUSH
74298: LD_INT 4
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: PUSH
74305: LD_INT 5
74307: PUSH
74308: LD_INT 5
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: PUSH
74315: LD_INT 4
74317: PUSH
74318: LD_INT 5
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 3
74327: PUSH
74328: LD_INT 4
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: PUSH
74335: LD_INT 3
74337: PUSH
74338: LD_INT 3
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PUSH
74345: LD_INT 5
74347: PUSH
74348: LD_INT 3
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: LD_INT 3
74357: PUSH
74358: LD_INT 5
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: PUSH
74365: LD_INT 0
74367: PUSH
74368: LD_INT 3
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: PUSH
74375: LD_INT 0
74377: PUSH
74378: LD_INT 2
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: PUSH
74385: LD_INT 1
74387: PUSH
74388: LD_INT 3
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: PUSH
74395: LD_INT 1
74397: PUSH
74398: LD_INT 4
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: PUSH
74405: LD_INT 0
74407: PUSH
74408: LD_INT 4
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PUSH
74415: LD_INT 1
74417: NEG
74418: PUSH
74419: LD_INT 3
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: PUSH
74426: LD_INT 1
74428: NEG
74429: PUSH
74430: LD_INT 2
74432: PUSH
74433: EMPTY
74434: LIST
74435: LIST
74436: PUSH
74437: LD_INT 2
74439: PUSH
74440: LD_INT 4
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: PUSH
74447: LD_INT 2
74449: NEG
74450: PUSH
74451: LD_INT 2
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PUSH
74458: LD_INT 4
74460: NEG
74461: PUSH
74462: LD_INT 0
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_INT 4
74471: NEG
74472: PUSH
74473: LD_INT 1
74475: NEG
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: LD_INT 3
74483: NEG
74484: PUSH
74485: LD_INT 0
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 3
74494: NEG
74495: PUSH
74496: LD_INT 1
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: PUSH
74503: LD_INT 4
74505: NEG
74506: PUSH
74507: LD_INT 1
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: PUSH
74514: LD_INT 5
74516: NEG
74517: PUSH
74518: LD_INT 0
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_INT 5
74527: NEG
74528: PUSH
74529: LD_INT 1
74531: NEG
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: LD_INT 5
74539: NEG
74540: PUSH
74541: LD_INT 2
74543: NEG
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PUSH
74549: LD_INT 3
74551: NEG
74552: PUSH
74553: LD_INT 2
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: LIST
74591: LIST
74592: LIST
74593: LIST
74594: LIST
74595: LIST
74596: LIST
74597: LIST
74598: LIST
74599: LIST
74600: LIST
74601: LIST
74602: LIST
74603: LIST
74604: LIST
74605: LIST
74606: ST_TO_ADDR
// end ; end ;
74607: GO 74610
74609: POP
// case btype of b_depot , b_warehouse :
74610: LD_VAR 0 1
74614: PUSH
74615: LD_INT 0
74617: DOUBLE
74618: EQUAL
74619: IFTRUE 74629
74621: LD_INT 1
74623: DOUBLE
74624: EQUAL
74625: IFTRUE 74629
74627: GO 74830
74629: POP
// case nation of nation_american :
74630: LD_VAR 0 5
74634: PUSH
74635: LD_INT 1
74637: DOUBLE
74638: EQUAL
74639: IFTRUE 74643
74641: GO 74699
74643: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74644: LD_ADDR_VAR 0 9
74648: PUSH
74649: LD_VAR 0 11
74653: PUSH
74654: LD_VAR 0 12
74658: PUSH
74659: LD_VAR 0 13
74663: PUSH
74664: LD_VAR 0 14
74668: PUSH
74669: LD_VAR 0 15
74673: PUSH
74674: LD_VAR 0 16
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: PUSH
74687: LD_VAR 0 4
74691: PUSH
74692: LD_INT 1
74694: PLUS
74695: ARRAY
74696: ST_TO_ADDR
74697: GO 74828
74699: LD_INT 2
74701: DOUBLE
74702: EQUAL
74703: IFTRUE 74707
74705: GO 74763
74707: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74708: LD_ADDR_VAR 0 9
74712: PUSH
74713: LD_VAR 0 17
74717: PUSH
74718: LD_VAR 0 18
74722: PUSH
74723: LD_VAR 0 19
74727: PUSH
74728: LD_VAR 0 20
74732: PUSH
74733: LD_VAR 0 21
74737: PUSH
74738: LD_VAR 0 22
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: PUSH
74751: LD_VAR 0 4
74755: PUSH
74756: LD_INT 1
74758: PLUS
74759: ARRAY
74760: ST_TO_ADDR
74761: GO 74828
74763: LD_INT 3
74765: DOUBLE
74766: EQUAL
74767: IFTRUE 74771
74769: GO 74827
74771: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74772: LD_ADDR_VAR 0 9
74776: PUSH
74777: LD_VAR 0 23
74781: PUSH
74782: LD_VAR 0 24
74786: PUSH
74787: LD_VAR 0 25
74791: PUSH
74792: LD_VAR 0 26
74796: PUSH
74797: LD_VAR 0 27
74801: PUSH
74802: LD_VAR 0 28
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: PUSH
74815: LD_VAR 0 4
74819: PUSH
74820: LD_INT 1
74822: PLUS
74823: ARRAY
74824: ST_TO_ADDR
74825: GO 74828
74827: POP
74828: GO 75383
74830: LD_INT 2
74832: DOUBLE
74833: EQUAL
74834: IFTRUE 74844
74836: LD_INT 3
74838: DOUBLE
74839: EQUAL
74840: IFTRUE 74844
74842: GO 74900
74844: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74845: LD_ADDR_VAR 0 9
74849: PUSH
74850: LD_VAR 0 29
74854: PUSH
74855: LD_VAR 0 30
74859: PUSH
74860: LD_VAR 0 31
74864: PUSH
74865: LD_VAR 0 32
74869: PUSH
74870: LD_VAR 0 33
74874: PUSH
74875: LD_VAR 0 34
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: PUSH
74888: LD_VAR 0 4
74892: PUSH
74893: LD_INT 1
74895: PLUS
74896: ARRAY
74897: ST_TO_ADDR
74898: GO 75383
74900: LD_INT 16
74902: DOUBLE
74903: EQUAL
74904: IFTRUE 74962
74906: LD_INT 17
74908: DOUBLE
74909: EQUAL
74910: IFTRUE 74962
74912: LD_INT 18
74914: DOUBLE
74915: EQUAL
74916: IFTRUE 74962
74918: LD_INT 19
74920: DOUBLE
74921: EQUAL
74922: IFTRUE 74962
74924: LD_INT 22
74926: DOUBLE
74927: EQUAL
74928: IFTRUE 74962
74930: LD_INT 20
74932: DOUBLE
74933: EQUAL
74934: IFTRUE 74962
74936: LD_INT 21
74938: DOUBLE
74939: EQUAL
74940: IFTRUE 74962
74942: LD_INT 23
74944: DOUBLE
74945: EQUAL
74946: IFTRUE 74962
74948: LD_INT 24
74950: DOUBLE
74951: EQUAL
74952: IFTRUE 74962
74954: LD_INT 25
74956: DOUBLE
74957: EQUAL
74958: IFTRUE 74962
74960: GO 75018
74962: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74963: LD_ADDR_VAR 0 9
74967: PUSH
74968: LD_VAR 0 35
74972: PUSH
74973: LD_VAR 0 36
74977: PUSH
74978: LD_VAR 0 37
74982: PUSH
74983: LD_VAR 0 38
74987: PUSH
74988: LD_VAR 0 39
74992: PUSH
74993: LD_VAR 0 40
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: LIST
75004: LIST
75005: PUSH
75006: LD_VAR 0 4
75010: PUSH
75011: LD_INT 1
75013: PLUS
75014: ARRAY
75015: ST_TO_ADDR
75016: GO 75383
75018: LD_INT 6
75020: DOUBLE
75021: EQUAL
75022: IFTRUE 75074
75024: LD_INT 7
75026: DOUBLE
75027: EQUAL
75028: IFTRUE 75074
75030: LD_INT 8
75032: DOUBLE
75033: EQUAL
75034: IFTRUE 75074
75036: LD_INT 13
75038: DOUBLE
75039: EQUAL
75040: IFTRUE 75074
75042: LD_INT 12
75044: DOUBLE
75045: EQUAL
75046: IFTRUE 75074
75048: LD_INT 15
75050: DOUBLE
75051: EQUAL
75052: IFTRUE 75074
75054: LD_INT 11
75056: DOUBLE
75057: EQUAL
75058: IFTRUE 75074
75060: LD_INT 14
75062: DOUBLE
75063: EQUAL
75064: IFTRUE 75074
75066: LD_INT 10
75068: DOUBLE
75069: EQUAL
75070: IFTRUE 75074
75072: GO 75130
75074: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75075: LD_ADDR_VAR 0 9
75079: PUSH
75080: LD_VAR 0 41
75084: PUSH
75085: LD_VAR 0 42
75089: PUSH
75090: LD_VAR 0 43
75094: PUSH
75095: LD_VAR 0 44
75099: PUSH
75100: LD_VAR 0 45
75104: PUSH
75105: LD_VAR 0 46
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: PUSH
75118: LD_VAR 0 4
75122: PUSH
75123: LD_INT 1
75125: PLUS
75126: ARRAY
75127: ST_TO_ADDR
75128: GO 75383
75130: LD_INT 36
75132: DOUBLE
75133: EQUAL
75134: IFTRUE 75138
75136: GO 75194
75138: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75139: LD_ADDR_VAR 0 9
75143: PUSH
75144: LD_VAR 0 47
75148: PUSH
75149: LD_VAR 0 48
75153: PUSH
75154: LD_VAR 0 49
75158: PUSH
75159: LD_VAR 0 50
75163: PUSH
75164: LD_VAR 0 51
75168: PUSH
75169: LD_VAR 0 52
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: PUSH
75182: LD_VAR 0 4
75186: PUSH
75187: LD_INT 1
75189: PLUS
75190: ARRAY
75191: ST_TO_ADDR
75192: GO 75383
75194: LD_INT 4
75196: DOUBLE
75197: EQUAL
75198: IFTRUE 75220
75200: LD_INT 5
75202: DOUBLE
75203: EQUAL
75204: IFTRUE 75220
75206: LD_INT 34
75208: DOUBLE
75209: EQUAL
75210: IFTRUE 75220
75212: LD_INT 37
75214: DOUBLE
75215: EQUAL
75216: IFTRUE 75220
75218: GO 75276
75220: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75221: LD_ADDR_VAR 0 9
75225: PUSH
75226: LD_VAR 0 53
75230: PUSH
75231: LD_VAR 0 54
75235: PUSH
75236: LD_VAR 0 55
75240: PUSH
75241: LD_VAR 0 56
75245: PUSH
75246: LD_VAR 0 57
75250: PUSH
75251: LD_VAR 0 58
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: PUSH
75264: LD_VAR 0 4
75268: PUSH
75269: LD_INT 1
75271: PLUS
75272: ARRAY
75273: ST_TO_ADDR
75274: GO 75383
75276: LD_INT 31
75278: DOUBLE
75279: EQUAL
75280: IFTRUE 75326
75282: LD_INT 32
75284: DOUBLE
75285: EQUAL
75286: IFTRUE 75326
75288: LD_INT 33
75290: DOUBLE
75291: EQUAL
75292: IFTRUE 75326
75294: LD_INT 27
75296: DOUBLE
75297: EQUAL
75298: IFTRUE 75326
75300: LD_INT 26
75302: DOUBLE
75303: EQUAL
75304: IFTRUE 75326
75306: LD_INT 28
75308: DOUBLE
75309: EQUAL
75310: IFTRUE 75326
75312: LD_INT 29
75314: DOUBLE
75315: EQUAL
75316: IFTRUE 75326
75318: LD_INT 30
75320: DOUBLE
75321: EQUAL
75322: IFTRUE 75326
75324: GO 75382
75326: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75327: LD_ADDR_VAR 0 9
75331: PUSH
75332: LD_VAR 0 59
75336: PUSH
75337: LD_VAR 0 60
75341: PUSH
75342: LD_VAR 0 61
75346: PUSH
75347: LD_VAR 0 62
75351: PUSH
75352: LD_VAR 0 63
75356: PUSH
75357: LD_VAR 0 64
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: PUSH
75370: LD_VAR 0 4
75374: PUSH
75375: LD_INT 1
75377: PLUS
75378: ARRAY
75379: ST_TO_ADDR
75380: GO 75383
75382: POP
// temp_list2 = [ ] ;
75383: LD_ADDR_VAR 0 10
75387: PUSH
75388: EMPTY
75389: ST_TO_ADDR
// for i in temp_list do
75390: LD_ADDR_VAR 0 8
75394: PUSH
75395: LD_VAR 0 9
75399: PUSH
75400: FOR_IN
75401: IFFALSE 75453
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75403: LD_ADDR_VAR 0 10
75407: PUSH
75408: LD_VAR 0 10
75412: PUSH
75413: LD_VAR 0 8
75417: PUSH
75418: LD_INT 1
75420: ARRAY
75421: PUSH
75422: LD_VAR 0 2
75426: PLUS
75427: PUSH
75428: LD_VAR 0 8
75432: PUSH
75433: LD_INT 2
75435: ARRAY
75436: PUSH
75437: LD_VAR 0 3
75441: PLUS
75442: PUSH
75443: EMPTY
75444: LIST
75445: LIST
75446: PUSH
75447: EMPTY
75448: LIST
75449: ADD
75450: ST_TO_ADDR
75451: GO 75400
75453: POP
75454: POP
// result = temp_list2 ;
75455: LD_ADDR_VAR 0 7
75459: PUSH
75460: LD_VAR 0 10
75464: ST_TO_ADDR
// end ;
75465: LD_VAR 0 7
75469: RET
// export function EnemyInRange ( unit , dist ) ; begin
75470: LD_INT 0
75472: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75473: LD_ADDR_VAR 0 3
75477: PUSH
75478: LD_VAR 0 1
75482: PPUSH
75483: CALL_OW 255
75487: PPUSH
75488: LD_VAR 0 1
75492: PPUSH
75493: CALL_OW 250
75497: PPUSH
75498: LD_VAR 0 1
75502: PPUSH
75503: CALL_OW 251
75507: PPUSH
75508: LD_VAR 0 2
75512: PPUSH
75513: CALL 48843 0 4
75517: PUSH
75518: LD_INT 4
75520: ARRAY
75521: ST_TO_ADDR
// end ;
75522: LD_VAR 0 3
75526: RET
// export function PlayerSeeMe ( unit ) ; begin
75527: LD_INT 0
75529: PPUSH
// result := See ( your_side , unit ) ;
75530: LD_ADDR_VAR 0 2
75534: PUSH
75535: LD_OWVAR 2
75539: PPUSH
75540: LD_VAR 0 1
75544: PPUSH
75545: CALL_OW 292
75549: ST_TO_ADDR
// end ;
75550: LD_VAR 0 2
75554: RET
// export function ReverseDir ( unit ) ; begin
75555: LD_INT 0
75557: PPUSH
// if not unit then
75558: LD_VAR 0 1
75562: NOT
75563: IFFALSE 75567
// exit ;
75565: GO 75590
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75567: LD_ADDR_VAR 0 2
75571: PUSH
75572: LD_VAR 0 1
75576: PPUSH
75577: CALL_OW 254
75581: PUSH
75582: LD_INT 3
75584: PLUS
75585: PUSH
75586: LD_INT 6
75588: MOD
75589: ST_TO_ADDR
// end ;
75590: LD_VAR 0 2
75594: RET
// export function ReverseArray ( array ) ; var i ; begin
75595: LD_INT 0
75597: PPUSH
75598: PPUSH
// if not array then
75599: LD_VAR 0 1
75603: NOT
75604: IFFALSE 75608
// exit ;
75606: GO 75663
// result := [ ] ;
75608: LD_ADDR_VAR 0 2
75612: PUSH
75613: EMPTY
75614: ST_TO_ADDR
// for i := array downto 1 do
75615: LD_ADDR_VAR 0 3
75619: PUSH
75620: DOUBLE
75621: LD_VAR 0 1
75625: INC
75626: ST_TO_ADDR
75627: LD_INT 1
75629: PUSH
75630: FOR_DOWNTO
75631: IFFALSE 75661
// result := Join ( result , array [ i ] ) ;
75633: LD_ADDR_VAR 0 2
75637: PUSH
75638: LD_VAR 0 2
75642: PPUSH
75643: LD_VAR 0 1
75647: PUSH
75648: LD_VAR 0 3
75652: ARRAY
75653: PPUSH
75654: CALL 80319 0 2
75658: ST_TO_ADDR
75659: GO 75630
75661: POP
75662: POP
// end ;
75663: LD_VAR 0 2
75667: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75668: LD_INT 0
75670: PPUSH
75671: PPUSH
75672: PPUSH
75673: PPUSH
75674: PPUSH
75675: PPUSH
// if not unit or not hexes then
75676: LD_VAR 0 1
75680: NOT
75681: PUSH
75682: LD_VAR 0 2
75686: NOT
75687: OR
75688: IFFALSE 75692
// exit ;
75690: GO 75815
// dist := 9999 ;
75692: LD_ADDR_VAR 0 5
75696: PUSH
75697: LD_INT 9999
75699: ST_TO_ADDR
// for i = 1 to hexes do
75700: LD_ADDR_VAR 0 4
75704: PUSH
75705: DOUBLE
75706: LD_INT 1
75708: DEC
75709: ST_TO_ADDR
75710: LD_VAR 0 2
75714: PUSH
75715: FOR_TO
75716: IFFALSE 75803
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75718: LD_ADDR_VAR 0 6
75722: PUSH
75723: LD_VAR 0 1
75727: PPUSH
75728: LD_VAR 0 2
75732: PUSH
75733: LD_VAR 0 4
75737: ARRAY
75738: PUSH
75739: LD_INT 1
75741: ARRAY
75742: PPUSH
75743: LD_VAR 0 2
75747: PUSH
75748: LD_VAR 0 4
75752: ARRAY
75753: PUSH
75754: LD_INT 2
75756: ARRAY
75757: PPUSH
75758: CALL_OW 297
75762: ST_TO_ADDR
// if tdist < dist then
75763: LD_VAR 0 6
75767: PUSH
75768: LD_VAR 0 5
75772: LESS
75773: IFFALSE 75801
// begin hex := hexes [ i ] ;
75775: LD_ADDR_VAR 0 8
75779: PUSH
75780: LD_VAR 0 2
75784: PUSH
75785: LD_VAR 0 4
75789: ARRAY
75790: ST_TO_ADDR
// dist := tdist ;
75791: LD_ADDR_VAR 0 5
75795: PUSH
75796: LD_VAR 0 6
75800: ST_TO_ADDR
// end ; end ;
75801: GO 75715
75803: POP
75804: POP
// result := hex ;
75805: LD_ADDR_VAR 0 3
75809: PUSH
75810: LD_VAR 0 8
75814: ST_TO_ADDR
// end ;
75815: LD_VAR 0 3
75819: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75820: LD_INT 0
75822: PPUSH
75823: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75824: LD_VAR 0 1
75828: NOT
75829: PUSH
75830: LD_VAR 0 1
75834: PUSH
75835: LD_INT 21
75837: PUSH
75838: LD_INT 2
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: LD_INT 23
75847: PUSH
75848: LD_INT 2
75850: PUSH
75851: EMPTY
75852: LIST
75853: LIST
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PPUSH
75859: CALL_OW 69
75863: IN
75864: NOT
75865: OR
75866: IFFALSE 75870
// exit ;
75868: GO 75917
// for i = 1 to 3 do
75870: LD_ADDR_VAR 0 3
75874: PUSH
75875: DOUBLE
75876: LD_INT 1
75878: DEC
75879: ST_TO_ADDR
75880: LD_INT 3
75882: PUSH
75883: FOR_TO
75884: IFFALSE 75915
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75886: LD_VAR 0 1
75890: PPUSH
75891: CALL_OW 250
75895: PPUSH
75896: LD_VAR 0 1
75900: PPUSH
75901: CALL_OW 251
75905: PPUSH
75906: LD_INT 1
75908: PPUSH
75909: CALL_OW 453
75913: GO 75883
75915: POP
75916: POP
// end ;
75917: LD_VAR 0 2
75921: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75922: LD_INT 0
75924: PPUSH
75925: PPUSH
75926: PPUSH
75927: PPUSH
75928: PPUSH
75929: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
75930: LD_VAR 0 1
75934: NOT
75935: PUSH
75936: LD_VAR 0 2
75940: NOT
75941: OR
75942: PUSH
75943: LD_VAR 0 1
75947: PPUSH
75948: CALL_OW 314
75952: OR
75953: IFFALSE 75957
// exit ;
75955: GO 76424
// if GetLives ( i ) < 250 then
75957: LD_VAR 0 4
75961: PPUSH
75962: CALL_OW 256
75966: PUSH
75967: LD_INT 250
75969: LESS
75970: IFFALSE 75983
// begin ComAutodestruct ( i ) ;
75972: LD_VAR 0 4
75976: PPUSH
75977: CALL 75820 0 1
// exit ;
75981: GO 76424
// end ; x := GetX ( enemy_unit ) ;
75983: LD_ADDR_VAR 0 7
75987: PUSH
75988: LD_VAR 0 2
75992: PPUSH
75993: CALL_OW 250
75997: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75998: LD_ADDR_VAR 0 8
76002: PUSH
76003: LD_VAR 0 2
76007: PPUSH
76008: CALL_OW 251
76012: ST_TO_ADDR
// if not x or not y then
76013: LD_VAR 0 7
76017: NOT
76018: PUSH
76019: LD_VAR 0 8
76023: NOT
76024: OR
76025: IFFALSE 76029
// exit ;
76027: GO 76424
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76029: LD_ADDR_VAR 0 6
76033: PUSH
76034: LD_VAR 0 7
76038: PPUSH
76039: LD_INT 0
76041: PPUSH
76042: LD_INT 4
76044: PPUSH
76045: CALL_OW 272
76049: PUSH
76050: LD_VAR 0 8
76054: PPUSH
76055: LD_INT 0
76057: PPUSH
76058: LD_INT 4
76060: PPUSH
76061: CALL_OW 273
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: PUSH
76070: LD_VAR 0 7
76074: PPUSH
76075: LD_INT 1
76077: PPUSH
76078: LD_INT 4
76080: PPUSH
76081: CALL_OW 272
76085: PUSH
76086: LD_VAR 0 8
76090: PPUSH
76091: LD_INT 1
76093: PPUSH
76094: LD_INT 4
76096: PPUSH
76097: CALL_OW 273
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: LD_VAR 0 7
76110: PPUSH
76111: LD_INT 2
76113: PPUSH
76114: LD_INT 4
76116: PPUSH
76117: CALL_OW 272
76121: PUSH
76122: LD_VAR 0 8
76126: PPUSH
76127: LD_INT 2
76129: PPUSH
76130: LD_INT 4
76132: PPUSH
76133: CALL_OW 273
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: PUSH
76142: LD_VAR 0 7
76146: PPUSH
76147: LD_INT 3
76149: PPUSH
76150: LD_INT 4
76152: PPUSH
76153: CALL_OW 272
76157: PUSH
76158: LD_VAR 0 8
76162: PPUSH
76163: LD_INT 3
76165: PPUSH
76166: LD_INT 4
76168: PPUSH
76169: CALL_OW 273
76173: PUSH
76174: EMPTY
76175: LIST
76176: LIST
76177: PUSH
76178: LD_VAR 0 7
76182: PPUSH
76183: LD_INT 4
76185: PPUSH
76186: LD_INT 4
76188: PPUSH
76189: CALL_OW 272
76193: PUSH
76194: LD_VAR 0 8
76198: PPUSH
76199: LD_INT 4
76201: PPUSH
76202: LD_INT 4
76204: PPUSH
76205: CALL_OW 273
76209: PUSH
76210: EMPTY
76211: LIST
76212: LIST
76213: PUSH
76214: LD_VAR 0 7
76218: PPUSH
76219: LD_INT 5
76221: PPUSH
76222: LD_INT 4
76224: PPUSH
76225: CALL_OW 272
76229: PUSH
76230: LD_VAR 0 8
76234: PPUSH
76235: LD_INT 5
76237: PPUSH
76238: LD_INT 4
76240: PPUSH
76241: CALL_OW 273
76245: PUSH
76246: EMPTY
76247: LIST
76248: LIST
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: LIST
76257: ST_TO_ADDR
// for i = tmp downto 1 do
76258: LD_ADDR_VAR 0 4
76262: PUSH
76263: DOUBLE
76264: LD_VAR 0 6
76268: INC
76269: ST_TO_ADDR
76270: LD_INT 1
76272: PUSH
76273: FOR_DOWNTO
76274: IFFALSE 76375
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76276: LD_VAR 0 6
76280: PUSH
76281: LD_VAR 0 4
76285: ARRAY
76286: PUSH
76287: LD_INT 1
76289: ARRAY
76290: PPUSH
76291: LD_VAR 0 6
76295: PUSH
76296: LD_VAR 0 4
76300: ARRAY
76301: PUSH
76302: LD_INT 2
76304: ARRAY
76305: PPUSH
76306: CALL_OW 488
76310: NOT
76311: PUSH
76312: LD_VAR 0 6
76316: PUSH
76317: LD_VAR 0 4
76321: ARRAY
76322: PUSH
76323: LD_INT 1
76325: ARRAY
76326: PPUSH
76327: LD_VAR 0 6
76331: PUSH
76332: LD_VAR 0 4
76336: ARRAY
76337: PUSH
76338: LD_INT 2
76340: ARRAY
76341: PPUSH
76342: CALL_OW 428
76346: PUSH
76347: LD_INT 0
76349: NONEQUAL
76350: OR
76351: IFFALSE 76373
// tmp := Delete ( tmp , i ) ;
76353: LD_ADDR_VAR 0 6
76357: PUSH
76358: LD_VAR 0 6
76362: PPUSH
76363: LD_VAR 0 4
76367: PPUSH
76368: CALL_OW 3
76372: ST_TO_ADDR
76373: GO 76273
76375: POP
76376: POP
// j := GetClosestHex ( unit , tmp ) ;
76377: LD_ADDR_VAR 0 5
76381: PUSH
76382: LD_VAR 0 1
76386: PPUSH
76387: LD_VAR 0 6
76391: PPUSH
76392: CALL 75668 0 2
76396: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76397: LD_VAR 0 1
76401: PPUSH
76402: LD_VAR 0 5
76406: PUSH
76407: LD_INT 1
76409: ARRAY
76410: PPUSH
76411: LD_VAR 0 5
76415: PUSH
76416: LD_INT 2
76418: ARRAY
76419: PPUSH
76420: CALL_OW 111
// end ;
76424: LD_VAR 0 3
76428: RET
// export function PrepareApemanSoldier ( ) ; begin
76429: LD_INT 0
76431: PPUSH
// uc_nation := 0 ;
76432: LD_ADDR_OWVAR 21
76436: PUSH
76437: LD_INT 0
76439: ST_TO_ADDR
// hc_sex := sex_male ;
76440: LD_ADDR_OWVAR 27
76444: PUSH
76445: LD_INT 1
76447: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76448: LD_ADDR_OWVAR 28
76452: PUSH
76453: LD_INT 15
76455: ST_TO_ADDR
// hc_gallery :=  ;
76456: LD_ADDR_OWVAR 33
76460: PUSH
76461: LD_STRING 
76463: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76464: LD_ADDR_OWVAR 31
76468: PUSH
76469: LD_INT 0
76471: PPUSH
76472: LD_INT 3
76474: PPUSH
76475: CALL_OW 12
76479: PUSH
76480: LD_INT 0
76482: PPUSH
76483: LD_INT 3
76485: PPUSH
76486: CALL_OW 12
76490: PUSH
76491: LD_INT 0
76493: PUSH
76494: LD_INT 0
76496: PUSH
76497: EMPTY
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: ST_TO_ADDR
// end ;
76503: LD_VAR 0 1
76507: RET
// export function PrepareApemanEngineer ( ) ; begin
76508: LD_INT 0
76510: PPUSH
// uc_nation := 0 ;
76511: LD_ADDR_OWVAR 21
76515: PUSH
76516: LD_INT 0
76518: ST_TO_ADDR
// hc_sex := sex_male ;
76519: LD_ADDR_OWVAR 27
76523: PUSH
76524: LD_INT 1
76526: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76527: LD_ADDR_OWVAR 28
76531: PUSH
76532: LD_INT 16
76534: ST_TO_ADDR
// hc_gallery :=  ;
76535: LD_ADDR_OWVAR 33
76539: PUSH
76540: LD_STRING 
76542: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76543: LD_ADDR_OWVAR 31
76547: PUSH
76548: LD_INT 0
76550: PPUSH
76551: LD_INT 3
76553: PPUSH
76554: CALL_OW 12
76558: PUSH
76559: LD_INT 0
76561: PPUSH
76562: LD_INT 3
76564: PPUSH
76565: CALL_OW 12
76569: PUSH
76570: LD_INT 0
76572: PUSH
76573: LD_INT 0
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: LIST
76580: LIST
76581: ST_TO_ADDR
// end ;
76582: LD_VAR 0 1
76586: RET
// export function PrepareApeman ( agressivity ) ; begin
76587: LD_INT 0
76589: PPUSH
// uc_side := 0 ;
76590: LD_ADDR_OWVAR 20
76594: PUSH
76595: LD_INT 0
76597: ST_TO_ADDR
// uc_nation := 0 ;
76598: LD_ADDR_OWVAR 21
76602: PUSH
76603: LD_INT 0
76605: ST_TO_ADDR
// hc_sex := sex_male ;
76606: LD_ADDR_OWVAR 27
76610: PUSH
76611: LD_INT 1
76613: ST_TO_ADDR
// hc_class := class_apeman ;
76614: LD_ADDR_OWVAR 28
76618: PUSH
76619: LD_INT 12
76621: ST_TO_ADDR
// hc_gallery :=  ;
76622: LD_ADDR_OWVAR 33
76626: PUSH
76627: LD_STRING 
76629: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76630: LD_ADDR_OWVAR 35
76634: PUSH
76635: LD_VAR 0 1
76639: NEG
76640: PPUSH
76641: LD_VAR 0 1
76645: PPUSH
76646: CALL_OW 12
76650: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76651: LD_ADDR_OWVAR 31
76655: PUSH
76656: LD_INT 0
76658: PPUSH
76659: LD_INT 3
76661: PPUSH
76662: CALL_OW 12
76666: PUSH
76667: LD_INT 0
76669: PPUSH
76670: LD_INT 3
76672: PPUSH
76673: CALL_OW 12
76677: PUSH
76678: LD_INT 0
76680: PUSH
76681: LD_INT 0
76683: PUSH
76684: EMPTY
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: ST_TO_ADDR
// end ;
76690: LD_VAR 0 2
76694: RET
// export function PrepareTiger ( agressivity ) ; begin
76695: LD_INT 0
76697: PPUSH
// uc_side := 0 ;
76698: LD_ADDR_OWVAR 20
76702: PUSH
76703: LD_INT 0
76705: ST_TO_ADDR
// uc_nation := 0 ;
76706: LD_ADDR_OWVAR 21
76710: PUSH
76711: LD_INT 0
76713: ST_TO_ADDR
// hc_class := class_tiger ;
76714: LD_ADDR_OWVAR 28
76718: PUSH
76719: LD_INT 14
76721: ST_TO_ADDR
// hc_gallery :=  ;
76722: LD_ADDR_OWVAR 33
76726: PUSH
76727: LD_STRING 
76729: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76730: LD_ADDR_OWVAR 35
76734: PUSH
76735: LD_VAR 0 1
76739: NEG
76740: PPUSH
76741: LD_VAR 0 1
76745: PPUSH
76746: CALL_OW 12
76750: ST_TO_ADDR
// end ;
76751: LD_VAR 0 2
76755: RET
// export function PrepareEnchidna ( ) ; begin
76756: LD_INT 0
76758: PPUSH
// uc_side := 0 ;
76759: LD_ADDR_OWVAR 20
76763: PUSH
76764: LD_INT 0
76766: ST_TO_ADDR
// uc_nation := 0 ;
76767: LD_ADDR_OWVAR 21
76771: PUSH
76772: LD_INT 0
76774: ST_TO_ADDR
// hc_class := class_baggie ;
76775: LD_ADDR_OWVAR 28
76779: PUSH
76780: LD_INT 13
76782: ST_TO_ADDR
// hc_gallery :=  ;
76783: LD_ADDR_OWVAR 33
76787: PUSH
76788: LD_STRING 
76790: ST_TO_ADDR
// end ;
76791: LD_VAR 0 1
76795: RET
// export function PrepareFrog ( ) ; begin
76796: LD_INT 0
76798: PPUSH
// uc_side := 0 ;
76799: LD_ADDR_OWVAR 20
76803: PUSH
76804: LD_INT 0
76806: ST_TO_ADDR
// uc_nation := 0 ;
76807: LD_ADDR_OWVAR 21
76811: PUSH
76812: LD_INT 0
76814: ST_TO_ADDR
// hc_class := class_frog ;
76815: LD_ADDR_OWVAR 28
76819: PUSH
76820: LD_INT 19
76822: ST_TO_ADDR
// hc_gallery :=  ;
76823: LD_ADDR_OWVAR 33
76827: PUSH
76828: LD_STRING 
76830: ST_TO_ADDR
// end ;
76831: LD_VAR 0 1
76835: RET
// export function PrepareFish ( ) ; begin
76836: LD_INT 0
76838: PPUSH
// uc_side := 0 ;
76839: LD_ADDR_OWVAR 20
76843: PUSH
76844: LD_INT 0
76846: ST_TO_ADDR
// uc_nation := 0 ;
76847: LD_ADDR_OWVAR 21
76851: PUSH
76852: LD_INT 0
76854: ST_TO_ADDR
// hc_class := class_fish ;
76855: LD_ADDR_OWVAR 28
76859: PUSH
76860: LD_INT 20
76862: ST_TO_ADDR
// hc_gallery :=  ;
76863: LD_ADDR_OWVAR 33
76867: PUSH
76868: LD_STRING 
76870: ST_TO_ADDR
// end ;
76871: LD_VAR 0 1
76875: RET
// export function PrepareBird ( ) ; begin
76876: LD_INT 0
76878: PPUSH
// uc_side := 0 ;
76879: LD_ADDR_OWVAR 20
76883: PUSH
76884: LD_INT 0
76886: ST_TO_ADDR
// uc_nation := 0 ;
76887: LD_ADDR_OWVAR 21
76891: PUSH
76892: LD_INT 0
76894: ST_TO_ADDR
// hc_class := class_phororhacos ;
76895: LD_ADDR_OWVAR 28
76899: PUSH
76900: LD_INT 18
76902: ST_TO_ADDR
// hc_gallery :=  ;
76903: LD_ADDR_OWVAR 33
76907: PUSH
76908: LD_STRING 
76910: ST_TO_ADDR
// end ;
76911: LD_VAR 0 1
76915: RET
// export function PrepareHorse ( ) ; begin
76916: LD_INT 0
76918: PPUSH
// uc_side := 0 ;
76919: LD_ADDR_OWVAR 20
76923: PUSH
76924: LD_INT 0
76926: ST_TO_ADDR
// uc_nation := 0 ;
76927: LD_ADDR_OWVAR 21
76931: PUSH
76932: LD_INT 0
76934: ST_TO_ADDR
// hc_class := class_horse ;
76935: LD_ADDR_OWVAR 28
76939: PUSH
76940: LD_INT 21
76942: ST_TO_ADDR
// hc_gallery :=  ;
76943: LD_ADDR_OWVAR 33
76947: PUSH
76948: LD_STRING 
76950: ST_TO_ADDR
// end ;
76951: LD_VAR 0 1
76955: RET
// export function PrepareMastodont ( ) ; begin
76956: LD_INT 0
76958: PPUSH
// uc_side := 0 ;
76959: LD_ADDR_OWVAR 20
76963: PUSH
76964: LD_INT 0
76966: ST_TO_ADDR
// uc_nation := 0 ;
76967: LD_ADDR_OWVAR 21
76971: PUSH
76972: LD_INT 0
76974: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76975: LD_ADDR_OWVAR 37
76979: PUSH
76980: LD_INT 31
76982: ST_TO_ADDR
// vc_control := control_rider ;
76983: LD_ADDR_OWVAR 38
76987: PUSH
76988: LD_INT 4
76990: ST_TO_ADDR
// end ;
76991: LD_VAR 0 1
76995: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76996: LD_INT 0
76998: PPUSH
76999: PPUSH
77000: PPUSH
// uc_side = 0 ;
77001: LD_ADDR_OWVAR 20
77005: PUSH
77006: LD_INT 0
77008: ST_TO_ADDR
// uc_nation = 0 ;
77009: LD_ADDR_OWVAR 21
77013: PUSH
77014: LD_INT 0
77016: ST_TO_ADDR
// InitHc_All ( ) ;
77017: CALL_OW 584
// InitVc ;
77021: CALL_OW 20
// if mastodonts then
77025: LD_VAR 0 6
77029: IFFALSE 77096
// for i = 1 to mastodonts do
77031: LD_ADDR_VAR 0 11
77035: PUSH
77036: DOUBLE
77037: LD_INT 1
77039: DEC
77040: ST_TO_ADDR
77041: LD_VAR 0 6
77045: PUSH
77046: FOR_TO
77047: IFFALSE 77094
// begin vc_chassis := 31 ;
77049: LD_ADDR_OWVAR 37
77053: PUSH
77054: LD_INT 31
77056: ST_TO_ADDR
// vc_control := control_rider ;
77057: LD_ADDR_OWVAR 38
77061: PUSH
77062: LD_INT 4
77064: ST_TO_ADDR
// animal := CreateVehicle ;
77065: LD_ADDR_VAR 0 12
77069: PUSH
77070: CALL_OW 45
77074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77075: LD_VAR 0 12
77079: PPUSH
77080: LD_VAR 0 8
77084: PPUSH
77085: LD_INT 0
77087: PPUSH
77088: CALL 79224 0 3
// end ;
77092: GO 77046
77094: POP
77095: POP
// if horses then
77096: LD_VAR 0 5
77100: IFFALSE 77167
// for i = 1 to horses do
77102: LD_ADDR_VAR 0 11
77106: PUSH
77107: DOUBLE
77108: LD_INT 1
77110: DEC
77111: ST_TO_ADDR
77112: LD_VAR 0 5
77116: PUSH
77117: FOR_TO
77118: IFFALSE 77165
// begin hc_class := 21 ;
77120: LD_ADDR_OWVAR 28
77124: PUSH
77125: LD_INT 21
77127: ST_TO_ADDR
// hc_gallery :=  ;
77128: LD_ADDR_OWVAR 33
77132: PUSH
77133: LD_STRING 
77135: ST_TO_ADDR
// animal := CreateHuman ;
77136: LD_ADDR_VAR 0 12
77140: PUSH
77141: CALL_OW 44
77145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77146: LD_VAR 0 12
77150: PPUSH
77151: LD_VAR 0 8
77155: PPUSH
77156: LD_INT 0
77158: PPUSH
77159: CALL 79224 0 3
// end ;
77163: GO 77117
77165: POP
77166: POP
// if birds then
77167: LD_VAR 0 1
77171: IFFALSE 77238
// for i = 1 to birds do
77173: LD_ADDR_VAR 0 11
77177: PUSH
77178: DOUBLE
77179: LD_INT 1
77181: DEC
77182: ST_TO_ADDR
77183: LD_VAR 0 1
77187: PUSH
77188: FOR_TO
77189: IFFALSE 77236
// begin hc_class := 18 ;
77191: LD_ADDR_OWVAR 28
77195: PUSH
77196: LD_INT 18
77198: ST_TO_ADDR
// hc_gallery =  ;
77199: LD_ADDR_OWVAR 33
77203: PUSH
77204: LD_STRING 
77206: ST_TO_ADDR
// animal := CreateHuman ;
77207: LD_ADDR_VAR 0 12
77211: PUSH
77212: CALL_OW 44
77216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77217: LD_VAR 0 12
77221: PPUSH
77222: LD_VAR 0 8
77226: PPUSH
77227: LD_INT 0
77229: PPUSH
77230: CALL 79224 0 3
// end ;
77234: GO 77188
77236: POP
77237: POP
// if tigers then
77238: LD_VAR 0 2
77242: IFFALSE 77326
// for i = 1 to tigers do
77244: LD_ADDR_VAR 0 11
77248: PUSH
77249: DOUBLE
77250: LD_INT 1
77252: DEC
77253: ST_TO_ADDR
77254: LD_VAR 0 2
77258: PUSH
77259: FOR_TO
77260: IFFALSE 77324
// begin hc_class = class_tiger ;
77262: LD_ADDR_OWVAR 28
77266: PUSH
77267: LD_INT 14
77269: ST_TO_ADDR
// hc_gallery =  ;
77270: LD_ADDR_OWVAR 33
77274: PUSH
77275: LD_STRING 
77277: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77278: LD_ADDR_OWVAR 35
77282: PUSH
77283: LD_INT 7
77285: NEG
77286: PPUSH
77287: LD_INT 7
77289: PPUSH
77290: CALL_OW 12
77294: ST_TO_ADDR
// animal := CreateHuman ;
77295: LD_ADDR_VAR 0 12
77299: PUSH
77300: CALL_OW 44
77304: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77305: LD_VAR 0 12
77309: PPUSH
77310: LD_VAR 0 8
77314: PPUSH
77315: LD_INT 0
77317: PPUSH
77318: CALL 79224 0 3
// end ;
77322: GO 77259
77324: POP
77325: POP
// if apemans then
77326: LD_VAR 0 3
77330: IFFALSE 77453
// for i = 1 to apemans do
77332: LD_ADDR_VAR 0 11
77336: PUSH
77337: DOUBLE
77338: LD_INT 1
77340: DEC
77341: ST_TO_ADDR
77342: LD_VAR 0 3
77346: PUSH
77347: FOR_TO
77348: IFFALSE 77451
// begin hc_class = class_apeman ;
77350: LD_ADDR_OWVAR 28
77354: PUSH
77355: LD_INT 12
77357: ST_TO_ADDR
// hc_gallery =  ;
77358: LD_ADDR_OWVAR 33
77362: PUSH
77363: LD_STRING 
77365: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77366: LD_ADDR_OWVAR 35
77370: PUSH
77371: LD_INT 2
77373: NEG
77374: PPUSH
77375: LD_INT 2
77377: PPUSH
77378: CALL_OW 12
77382: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77383: LD_ADDR_OWVAR 31
77387: PUSH
77388: LD_INT 1
77390: PPUSH
77391: LD_INT 3
77393: PPUSH
77394: CALL_OW 12
77398: PUSH
77399: LD_INT 1
77401: PPUSH
77402: LD_INT 3
77404: PPUSH
77405: CALL_OW 12
77409: PUSH
77410: LD_INT 0
77412: PUSH
77413: LD_INT 0
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: LIST
77420: LIST
77421: ST_TO_ADDR
// animal := CreateHuman ;
77422: LD_ADDR_VAR 0 12
77426: PUSH
77427: CALL_OW 44
77431: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77432: LD_VAR 0 12
77436: PPUSH
77437: LD_VAR 0 8
77441: PPUSH
77442: LD_INT 0
77444: PPUSH
77445: CALL 79224 0 3
// end ;
77449: GO 77347
77451: POP
77452: POP
// if enchidnas then
77453: LD_VAR 0 4
77457: IFFALSE 77524
// for i = 1 to enchidnas do
77459: LD_ADDR_VAR 0 11
77463: PUSH
77464: DOUBLE
77465: LD_INT 1
77467: DEC
77468: ST_TO_ADDR
77469: LD_VAR 0 4
77473: PUSH
77474: FOR_TO
77475: IFFALSE 77522
// begin hc_class = 13 ;
77477: LD_ADDR_OWVAR 28
77481: PUSH
77482: LD_INT 13
77484: ST_TO_ADDR
// hc_gallery =  ;
77485: LD_ADDR_OWVAR 33
77489: PUSH
77490: LD_STRING 
77492: ST_TO_ADDR
// animal := CreateHuman ;
77493: LD_ADDR_VAR 0 12
77497: PUSH
77498: CALL_OW 44
77502: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77503: LD_VAR 0 12
77507: PPUSH
77508: LD_VAR 0 8
77512: PPUSH
77513: LD_INT 0
77515: PPUSH
77516: CALL 79224 0 3
// end ;
77520: GO 77474
77522: POP
77523: POP
// if fishes then
77524: LD_VAR 0 7
77528: IFFALSE 77595
// for i = 1 to fishes do
77530: LD_ADDR_VAR 0 11
77534: PUSH
77535: DOUBLE
77536: LD_INT 1
77538: DEC
77539: ST_TO_ADDR
77540: LD_VAR 0 7
77544: PUSH
77545: FOR_TO
77546: IFFALSE 77593
// begin hc_class = 20 ;
77548: LD_ADDR_OWVAR 28
77552: PUSH
77553: LD_INT 20
77555: ST_TO_ADDR
// hc_gallery =  ;
77556: LD_ADDR_OWVAR 33
77560: PUSH
77561: LD_STRING 
77563: ST_TO_ADDR
// animal := CreateHuman ;
77564: LD_ADDR_VAR 0 12
77568: PUSH
77569: CALL_OW 44
77573: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77574: LD_VAR 0 12
77578: PPUSH
77579: LD_VAR 0 9
77583: PPUSH
77584: LD_INT 0
77586: PPUSH
77587: CALL 79224 0 3
// end ;
77591: GO 77545
77593: POP
77594: POP
// end ;
77595: LD_VAR 0 10
77599: RET
// export function WantHeal ( sci , unit ) ; begin
77600: LD_INT 0
77602: PPUSH
// if GetTaskList ( sci ) > 0 then
77603: LD_VAR 0 1
77607: PPUSH
77608: CALL_OW 437
77612: PUSH
77613: LD_INT 0
77615: GREATER
77616: IFFALSE 77686
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77618: LD_VAR 0 1
77622: PPUSH
77623: CALL_OW 437
77627: PUSH
77628: LD_INT 1
77630: ARRAY
77631: PUSH
77632: LD_INT 1
77634: ARRAY
77635: PUSH
77636: LD_STRING l
77638: EQUAL
77639: PUSH
77640: LD_VAR 0 1
77644: PPUSH
77645: CALL_OW 437
77649: PUSH
77650: LD_INT 1
77652: ARRAY
77653: PUSH
77654: LD_INT 4
77656: ARRAY
77657: PUSH
77658: LD_VAR 0 2
77662: EQUAL
77663: AND
77664: IFFALSE 77676
// result := true else
77666: LD_ADDR_VAR 0 3
77670: PUSH
77671: LD_INT 1
77673: ST_TO_ADDR
77674: GO 77684
// result := false ;
77676: LD_ADDR_VAR 0 3
77680: PUSH
77681: LD_INT 0
77683: ST_TO_ADDR
// end else
77684: GO 77694
// result := false ;
77686: LD_ADDR_VAR 0 3
77690: PUSH
77691: LD_INT 0
77693: ST_TO_ADDR
// end ;
77694: LD_VAR 0 3
77698: RET
// export function HealTarget ( sci ) ; begin
77699: LD_INT 0
77701: PPUSH
// if not sci then
77702: LD_VAR 0 1
77706: NOT
77707: IFFALSE 77711
// exit ;
77709: GO 77776
// result := 0 ;
77711: LD_ADDR_VAR 0 2
77715: PUSH
77716: LD_INT 0
77718: ST_TO_ADDR
// if GetTaskList ( sci ) then
77719: LD_VAR 0 1
77723: PPUSH
77724: CALL_OW 437
77728: IFFALSE 77776
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77730: LD_VAR 0 1
77734: PPUSH
77735: CALL_OW 437
77739: PUSH
77740: LD_INT 1
77742: ARRAY
77743: PUSH
77744: LD_INT 1
77746: ARRAY
77747: PUSH
77748: LD_STRING l
77750: EQUAL
77751: IFFALSE 77776
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77753: LD_ADDR_VAR 0 2
77757: PUSH
77758: LD_VAR 0 1
77762: PPUSH
77763: CALL_OW 437
77767: PUSH
77768: LD_INT 1
77770: ARRAY
77771: PUSH
77772: LD_INT 4
77774: ARRAY
77775: ST_TO_ADDR
// end ;
77776: LD_VAR 0 2
77780: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77781: LD_INT 0
77783: PPUSH
77784: PPUSH
77785: PPUSH
77786: PPUSH
// if not base_units then
77787: LD_VAR 0 1
77791: NOT
77792: IFFALSE 77796
// exit ;
77794: GO 77883
// result := false ;
77796: LD_ADDR_VAR 0 2
77800: PUSH
77801: LD_INT 0
77803: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77804: LD_ADDR_VAR 0 5
77808: PUSH
77809: LD_VAR 0 1
77813: PPUSH
77814: LD_INT 21
77816: PUSH
77817: LD_INT 3
77819: PUSH
77820: EMPTY
77821: LIST
77822: LIST
77823: PPUSH
77824: CALL_OW 72
77828: ST_TO_ADDR
// if not tmp then
77829: LD_VAR 0 5
77833: NOT
77834: IFFALSE 77838
// exit ;
77836: GO 77883
// for i in tmp do
77838: LD_ADDR_VAR 0 3
77842: PUSH
77843: LD_VAR 0 5
77847: PUSH
77848: FOR_IN
77849: IFFALSE 77881
// begin result := EnemyInRange ( i , 22 ) ;
77851: LD_ADDR_VAR 0 2
77855: PUSH
77856: LD_VAR 0 3
77860: PPUSH
77861: LD_INT 22
77863: PPUSH
77864: CALL 75470 0 2
77868: ST_TO_ADDR
// if result then
77869: LD_VAR 0 2
77873: IFFALSE 77879
// exit ;
77875: POP
77876: POP
77877: GO 77883
// end ;
77879: GO 77848
77881: POP
77882: POP
// end ;
77883: LD_VAR 0 2
77887: RET
// export function FilterByTag ( units , tag ) ; begin
77888: LD_INT 0
77890: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77891: LD_ADDR_VAR 0 3
77895: PUSH
77896: LD_VAR 0 1
77900: PPUSH
77901: LD_INT 120
77903: PUSH
77904: LD_VAR 0 2
77908: PUSH
77909: EMPTY
77910: LIST
77911: LIST
77912: PPUSH
77913: CALL_OW 72
77917: ST_TO_ADDR
// end ;
77918: LD_VAR 0 3
77922: RET
// export function IsDriver ( un ) ; begin
77923: LD_INT 0
77925: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77926: LD_ADDR_VAR 0 2
77930: PUSH
77931: LD_VAR 0 1
77935: PUSH
77936: LD_INT 55
77938: PUSH
77939: EMPTY
77940: LIST
77941: PPUSH
77942: CALL_OW 69
77946: IN
77947: ST_TO_ADDR
// end ;
77948: LD_VAR 0 2
77952: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77953: LD_INT 0
77955: PPUSH
77956: PPUSH
// list := [ ] ;
77957: LD_ADDR_VAR 0 5
77961: PUSH
77962: EMPTY
77963: ST_TO_ADDR
// case d of 0 :
77964: LD_VAR 0 3
77968: PUSH
77969: LD_INT 0
77971: DOUBLE
77972: EQUAL
77973: IFTRUE 77977
77975: GO 78110
77977: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77978: LD_ADDR_VAR 0 5
77982: PUSH
77983: LD_VAR 0 1
77987: PUSH
77988: LD_INT 4
77990: MINUS
77991: PUSH
77992: LD_VAR 0 2
77996: PUSH
77997: LD_INT 4
77999: MINUS
78000: PUSH
78001: LD_INT 2
78003: PUSH
78004: EMPTY
78005: LIST
78006: LIST
78007: LIST
78008: PUSH
78009: LD_VAR 0 1
78013: PUSH
78014: LD_INT 3
78016: MINUS
78017: PUSH
78018: LD_VAR 0 2
78022: PUSH
78023: LD_INT 1
78025: PUSH
78026: EMPTY
78027: LIST
78028: LIST
78029: LIST
78030: PUSH
78031: LD_VAR 0 1
78035: PUSH
78036: LD_INT 4
78038: PLUS
78039: PUSH
78040: LD_VAR 0 2
78044: PUSH
78045: LD_INT 4
78047: PUSH
78048: EMPTY
78049: LIST
78050: LIST
78051: LIST
78052: PUSH
78053: LD_VAR 0 1
78057: PUSH
78058: LD_INT 3
78060: PLUS
78061: PUSH
78062: LD_VAR 0 2
78066: PUSH
78067: LD_INT 3
78069: PLUS
78070: PUSH
78071: LD_INT 5
78073: PUSH
78074: EMPTY
78075: LIST
78076: LIST
78077: LIST
78078: PUSH
78079: LD_VAR 0 1
78083: PUSH
78084: LD_VAR 0 2
78088: PUSH
78089: LD_INT 4
78091: PLUS
78092: PUSH
78093: LD_INT 0
78095: PUSH
78096: EMPTY
78097: LIST
78098: LIST
78099: LIST
78100: PUSH
78101: EMPTY
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: ST_TO_ADDR
// end ; 1 :
78108: GO 78808
78110: LD_INT 1
78112: DOUBLE
78113: EQUAL
78114: IFTRUE 78118
78116: GO 78251
78118: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78119: LD_ADDR_VAR 0 5
78123: PUSH
78124: LD_VAR 0 1
78128: PUSH
78129: LD_VAR 0 2
78133: PUSH
78134: LD_INT 4
78136: MINUS
78137: PUSH
78138: LD_INT 3
78140: PUSH
78141: EMPTY
78142: LIST
78143: LIST
78144: LIST
78145: PUSH
78146: LD_VAR 0 1
78150: PUSH
78151: LD_INT 3
78153: MINUS
78154: PUSH
78155: LD_VAR 0 2
78159: PUSH
78160: LD_INT 3
78162: MINUS
78163: PUSH
78164: LD_INT 2
78166: PUSH
78167: EMPTY
78168: LIST
78169: LIST
78170: LIST
78171: PUSH
78172: LD_VAR 0 1
78176: PUSH
78177: LD_INT 4
78179: MINUS
78180: PUSH
78181: LD_VAR 0 2
78185: PUSH
78186: LD_INT 1
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: LIST
78193: PUSH
78194: LD_VAR 0 1
78198: PUSH
78199: LD_VAR 0 2
78203: PUSH
78204: LD_INT 3
78206: PLUS
78207: PUSH
78208: LD_INT 0
78210: PUSH
78211: EMPTY
78212: LIST
78213: LIST
78214: LIST
78215: PUSH
78216: LD_VAR 0 1
78220: PUSH
78221: LD_INT 4
78223: PLUS
78224: PUSH
78225: LD_VAR 0 2
78229: PUSH
78230: LD_INT 4
78232: PLUS
78233: PUSH
78234: LD_INT 5
78236: PUSH
78237: EMPTY
78238: LIST
78239: LIST
78240: LIST
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: LIST
78246: LIST
78247: LIST
78248: ST_TO_ADDR
// end ; 2 :
78249: GO 78808
78251: LD_INT 2
78253: DOUBLE
78254: EQUAL
78255: IFTRUE 78259
78257: GO 78388
78259: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78260: LD_ADDR_VAR 0 5
78264: PUSH
78265: LD_VAR 0 1
78269: PUSH
78270: LD_VAR 0 2
78274: PUSH
78275: LD_INT 3
78277: MINUS
78278: PUSH
78279: LD_INT 3
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: LIST
78286: PUSH
78287: LD_VAR 0 1
78291: PUSH
78292: LD_INT 4
78294: PLUS
78295: PUSH
78296: LD_VAR 0 2
78300: PUSH
78301: LD_INT 4
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: LIST
78308: PUSH
78309: LD_VAR 0 1
78313: PUSH
78314: LD_VAR 0 2
78318: PUSH
78319: LD_INT 4
78321: PLUS
78322: PUSH
78323: LD_INT 0
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: LIST
78330: PUSH
78331: LD_VAR 0 1
78335: PUSH
78336: LD_INT 3
78338: MINUS
78339: PUSH
78340: LD_VAR 0 2
78344: PUSH
78345: LD_INT 1
78347: PUSH
78348: EMPTY
78349: LIST
78350: LIST
78351: LIST
78352: PUSH
78353: LD_VAR 0 1
78357: PUSH
78358: LD_INT 4
78360: MINUS
78361: PUSH
78362: LD_VAR 0 2
78366: PUSH
78367: LD_INT 4
78369: MINUS
78370: PUSH
78371: LD_INT 2
78373: PUSH
78374: EMPTY
78375: LIST
78376: LIST
78377: LIST
78378: PUSH
78379: EMPTY
78380: LIST
78381: LIST
78382: LIST
78383: LIST
78384: LIST
78385: ST_TO_ADDR
// end ; 3 :
78386: GO 78808
78388: LD_INT 3
78390: DOUBLE
78391: EQUAL
78392: IFTRUE 78396
78394: GO 78529
78396: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78397: LD_ADDR_VAR 0 5
78401: PUSH
78402: LD_VAR 0 1
78406: PUSH
78407: LD_INT 3
78409: PLUS
78410: PUSH
78411: LD_VAR 0 2
78415: PUSH
78416: LD_INT 4
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: LIST
78423: PUSH
78424: LD_VAR 0 1
78428: PUSH
78429: LD_INT 4
78431: PLUS
78432: PUSH
78433: LD_VAR 0 2
78437: PUSH
78438: LD_INT 4
78440: PLUS
78441: PUSH
78442: LD_INT 5
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: LIST
78449: PUSH
78450: LD_VAR 0 1
78454: PUSH
78455: LD_INT 4
78457: MINUS
78458: PUSH
78459: LD_VAR 0 2
78463: PUSH
78464: LD_INT 1
78466: PUSH
78467: EMPTY
78468: LIST
78469: LIST
78470: LIST
78471: PUSH
78472: LD_VAR 0 1
78476: PUSH
78477: LD_VAR 0 2
78481: PUSH
78482: LD_INT 4
78484: MINUS
78485: PUSH
78486: LD_INT 3
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: LIST
78493: PUSH
78494: LD_VAR 0 1
78498: PUSH
78499: LD_INT 3
78501: MINUS
78502: PUSH
78503: LD_VAR 0 2
78507: PUSH
78508: LD_INT 3
78510: MINUS
78511: PUSH
78512: LD_INT 2
78514: PUSH
78515: EMPTY
78516: LIST
78517: LIST
78518: LIST
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: LIST
78524: LIST
78525: LIST
78526: ST_TO_ADDR
// end ; 4 :
78527: GO 78808
78529: LD_INT 4
78531: DOUBLE
78532: EQUAL
78533: IFTRUE 78537
78535: GO 78670
78537: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78538: LD_ADDR_VAR 0 5
78542: PUSH
78543: LD_VAR 0 1
78547: PUSH
78548: LD_VAR 0 2
78552: PUSH
78553: LD_INT 4
78555: PLUS
78556: PUSH
78557: LD_INT 0
78559: PUSH
78560: EMPTY
78561: LIST
78562: LIST
78563: LIST
78564: PUSH
78565: LD_VAR 0 1
78569: PUSH
78570: LD_INT 3
78572: PLUS
78573: PUSH
78574: LD_VAR 0 2
78578: PUSH
78579: LD_INT 3
78581: PLUS
78582: PUSH
78583: LD_INT 5
78585: PUSH
78586: EMPTY
78587: LIST
78588: LIST
78589: LIST
78590: PUSH
78591: LD_VAR 0 1
78595: PUSH
78596: LD_INT 4
78598: PLUS
78599: PUSH
78600: LD_VAR 0 2
78604: PUSH
78605: LD_INT 4
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: LIST
78612: PUSH
78613: LD_VAR 0 1
78617: PUSH
78618: LD_VAR 0 2
78622: PUSH
78623: LD_INT 3
78625: MINUS
78626: PUSH
78627: LD_INT 3
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: LIST
78634: PUSH
78635: LD_VAR 0 1
78639: PUSH
78640: LD_INT 4
78642: MINUS
78643: PUSH
78644: LD_VAR 0 2
78648: PUSH
78649: LD_INT 4
78651: MINUS
78652: PUSH
78653: LD_INT 2
78655: PUSH
78656: EMPTY
78657: LIST
78658: LIST
78659: LIST
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: LIST
78665: LIST
78666: LIST
78667: ST_TO_ADDR
// end ; 5 :
78668: GO 78808
78670: LD_INT 5
78672: DOUBLE
78673: EQUAL
78674: IFTRUE 78678
78676: GO 78807
78678: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78679: LD_ADDR_VAR 0 5
78683: PUSH
78684: LD_VAR 0 1
78688: PUSH
78689: LD_INT 4
78691: MINUS
78692: PUSH
78693: LD_VAR 0 2
78697: PUSH
78698: LD_INT 1
78700: PUSH
78701: EMPTY
78702: LIST
78703: LIST
78704: LIST
78705: PUSH
78706: LD_VAR 0 1
78710: PUSH
78711: LD_VAR 0 2
78715: PUSH
78716: LD_INT 4
78718: MINUS
78719: PUSH
78720: LD_INT 3
78722: PUSH
78723: EMPTY
78724: LIST
78725: LIST
78726: LIST
78727: PUSH
78728: LD_VAR 0 1
78732: PUSH
78733: LD_INT 4
78735: PLUS
78736: PUSH
78737: LD_VAR 0 2
78741: PUSH
78742: LD_INT 4
78744: PLUS
78745: PUSH
78746: LD_INT 5
78748: PUSH
78749: EMPTY
78750: LIST
78751: LIST
78752: LIST
78753: PUSH
78754: LD_VAR 0 1
78758: PUSH
78759: LD_INT 3
78761: PLUS
78762: PUSH
78763: LD_VAR 0 2
78767: PUSH
78768: LD_INT 4
78770: PUSH
78771: EMPTY
78772: LIST
78773: LIST
78774: LIST
78775: PUSH
78776: LD_VAR 0 1
78780: PUSH
78781: LD_VAR 0 2
78785: PUSH
78786: LD_INT 3
78788: PLUS
78789: PUSH
78790: LD_INT 0
78792: PUSH
78793: EMPTY
78794: LIST
78795: LIST
78796: LIST
78797: PUSH
78798: EMPTY
78799: LIST
78800: LIST
78801: LIST
78802: LIST
78803: LIST
78804: ST_TO_ADDR
// end ; end ;
78805: GO 78808
78807: POP
// result := list ;
78808: LD_ADDR_VAR 0 4
78812: PUSH
78813: LD_VAR 0 5
78817: ST_TO_ADDR
// end ;
78818: LD_VAR 0 4
78822: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78823: LD_INT 0
78825: PPUSH
78826: PPUSH
78827: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78828: LD_VAR 0 1
78832: NOT
78833: PUSH
78834: LD_VAR 0 2
78838: PUSH
78839: LD_INT 1
78841: PUSH
78842: LD_INT 2
78844: PUSH
78845: LD_INT 3
78847: PUSH
78848: LD_INT 4
78850: PUSH
78851: EMPTY
78852: LIST
78853: LIST
78854: LIST
78855: LIST
78856: IN
78857: NOT
78858: OR
78859: IFFALSE 78863
// exit ;
78861: GO 78946
// tmp := [ ] ;
78863: LD_ADDR_VAR 0 5
78867: PUSH
78868: EMPTY
78869: ST_TO_ADDR
// for i in units do
78870: LD_ADDR_VAR 0 4
78874: PUSH
78875: LD_VAR 0 1
78879: PUSH
78880: FOR_IN
78881: IFFALSE 78915
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78883: LD_ADDR_VAR 0 5
78887: PUSH
78888: LD_VAR 0 5
78892: PPUSH
78893: LD_VAR 0 4
78897: PPUSH
78898: LD_VAR 0 2
78902: PPUSH
78903: CALL_OW 259
78907: PPUSH
78908: CALL 80319 0 2
78912: ST_TO_ADDR
78913: GO 78880
78915: POP
78916: POP
// if not tmp then
78917: LD_VAR 0 5
78921: NOT
78922: IFFALSE 78926
// exit ;
78924: GO 78946
// result := SortListByListDesc ( units , tmp ) ;
78926: LD_ADDR_VAR 0 3
78930: PUSH
78931: LD_VAR 0 1
78935: PPUSH
78936: LD_VAR 0 5
78940: PPUSH
78941: CALL_OW 77
78945: ST_TO_ADDR
// end ;
78946: LD_VAR 0 3
78950: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78951: LD_INT 0
78953: PPUSH
78954: PPUSH
78955: PPUSH
// result := false ;
78956: LD_ADDR_VAR 0 3
78960: PUSH
78961: LD_INT 0
78963: ST_TO_ADDR
// if not building then
78964: LD_VAR 0 2
78968: NOT
78969: IFFALSE 78973
// exit ;
78971: GO 79111
// x := GetX ( building ) ;
78973: LD_ADDR_VAR 0 4
78977: PUSH
78978: LD_VAR 0 2
78982: PPUSH
78983: CALL_OW 250
78987: ST_TO_ADDR
// y := GetY ( building ) ;
78988: LD_ADDR_VAR 0 5
78992: PUSH
78993: LD_VAR 0 2
78997: PPUSH
78998: CALL_OW 251
79002: ST_TO_ADDR
// if not x or not y then
79003: LD_VAR 0 4
79007: NOT
79008: PUSH
79009: LD_VAR 0 5
79013: NOT
79014: OR
79015: IFFALSE 79019
// exit ;
79017: GO 79111
// if GetTaskList ( unit ) then
79019: LD_VAR 0 1
79023: PPUSH
79024: CALL_OW 437
79028: IFFALSE 79111
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79030: LD_STRING e
79032: PUSH
79033: LD_VAR 0 1
79037: PPUSH
79038: CALL_OW 437
79042: PUSH
79043: LD_INT 1
79045: ARRAY
79046: PUSH
79047: LD_INT 1
79049: ARRAY
79050: EQUAL
79051: PUSH
79052: LD_VAR 0 4
79056: PUSH
79057: LD_VAR 0 1
79061: PPUSH
79062: CALL_OW 437
79066: PUSH
79067: LD_INT 1
79069: ARRAY
79070: PUSH
79071: LD_INT 2
79073: ARRAY
79074: EQUAL
79075: AND
79076: PUSH
79077: LD_VAR 0 5
79081: PUSH
79082: LD_VAR 0 1
79086: PPUSH
79087: CALL_OW 437
79091: PUSH
79092: LD_INT 1
79094: ARRAY
79095: PUSH
79096: LD_INT 3
79098: ARRAY
79099: EQUAL
79100: AND
79101: IFFALSE 79111
// result := true end ;
79103: LD_ADDR_VAR 0 3
79107: PUSH
79108: LD_INT 1
79110: ST_TO_ADDR
// end ;
79111: LD_VAR 0 3
79115: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79116: LD_INT 0
79118: PPUSH
// result := false ;
79119: LD_ADDR_VAR 0 4
79123: PUSH
79124: LD_INT 0
79126: ST_TO_ADDR
// if GetTaskList ( unit ) then
79127: LD_VAR 0 1
79131: PPUSH
79132: CALL_OW 437
79136: IFFALSE 79219
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79138: LD_STRING M
79140: PUSH
79141: LD_VAR 0 1
79145: PPUSH
79146: CALL_OW 437
79150: PUSH
79151: LD_INT 1
79153: ARRAY
79154: PUSH
79155: LD_INT 1
79157: ARRAY
79158: EQUAL
79159: PUSH
79160: LD_VAR 0 2
79164: PUSH
79165: LD_VAR 0 1
79169: PPUSH
79170: CALL_OW 437
79174: PUSH
79175: LD_INT 1
79177: ARRAY
79178: PUSH
79179: LD_INT 2
79181: ARRAY
79182: EQUAL
79183: AND
79184: PUSH
79185: LD_VAR 0 3
79189: PUSH
79190: LD_VAR 0 1
79194: PPUSH
79195: CALL_OW 437
79199: PUSH
79200: LD_INT 1
79202: ARRAY
79203: PUSH
79204: LD_INT 3
79206: ARRAY
79207: EQUAL
79208: AND
79209: IFFALSE 79219
// result := true ;
79211: LD_ADDR_VAR 0 4
79215: PUSH
79216: LD_INT 1
79218: ST_TO_ADDR
// end ; end ;
79219: LD_VAR 0 4
79223: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79224: LD_INT 0
79226: PPUSH
79227: PPUSH
79228: PPUSH
79229: PPUSH
// if not unit or not area then
79230: LD_VAR 0 1
79234: NOT
79235: PUSH
79236: LD_VAR 0 2
79240: NOT
79241: OR
79242: IFFALSE 79246
// exit ;
79244: GO 79422
// tmp := AreaToList ( area , i ) ;
79246: LD_ADDR_VAR 0 6
79250: PUSH
79251: LD_VAR 0 2
79255: PPUSH
79256: LD_VAR 0 5
79260: PPUSH
79261: CALL_OW 517
79265: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79266: LD_ADDR_VAR 0 5
79270: PUSH
79271: DOUBLE
79272: LD_INT 1
79274: DEC
79275: ST_TO_ADDR
79276: LD_VAR 0 6
79280: PUSH
79281: LD_INT 1
79283: ARRAY
79284: PUSH
79285: FOR_TO
79286: IFFALSE 79420
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79288: LD_ADDR_VAR 0 7
79292: PUSH
79293: LD_VAR 0 6
79297: PUSH
79298: LD_INT 1
79300: ARRAY
79301: PUSH
79302: LD_VAR 0 5
79306: ARRAY
79307: PUSH
79308: LD_VAR 0 6
79312: PUSH
79313: LD_INT 2
79315: ARRAY
79316: PUSH
79317: LD_VAR 0 5
79321: ARRAY
79322: PUSH
79323: EMPTY
79324: LIST
79325: LIST
79326: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79327: LD_INT 92
79329: PUSH
79330: LD_VAR 0 7
79334: PUSH
79335: LD_INT 1
79337: ARRAY
79338: PUSH
79339: LD_VAR 0 7
79343: PUSH
79344: LD_INT 2
79346: ARRAY
79347: PUSH
79348: LD_INT 2
79350: PUSH
79351: EMPTY
79352: LIST
79353: LIST
79354: LIST
79355: LIST
79356: PPUSH
79357: CALL_OW 69
79361: PUSH
79362: LD_INT 0
79364: EQUAL
79365: IFFALSE 79418
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79367: LD_VAR 0 1
79371: PPUSH
79372: LD_VAR 0 7
79376: PUSH
79377: LD_INT 1
79379: ARRAY
79380: PPUSH
79381: LD_VAR 0 7
79385: PUSH
79386: LD_INT 2
79388: ARRAY
79389: PPUSH
79390: LD_VAR 0 3
79394: PPUSH
79395: CALL_OW 48
// result := IsPlaced ( unit ) ;
79399: LD_ADDR_VAR 0 4
79403: PUSH
79404: LD_VAR 0 1
79408: PPUSH
79409: CALL_OW 305
79413: ST_TO_ADDR
// exit ;
79414: POP
79415: POP
79416: GO 79422
// end ; end ;
79418: GO 79285
79420: POP
79421: POP
// end ;
79422: LD_VAR 0 4
79426: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79427: LD_INT 0
79429: PPUSH
79430: PPUSH
79431: PPUSH
// if not side or side > 8 then
79432: LD_VAR 0 1
79436: NOT
79437: PUSH
79438: LD_VAR 0 1
79442: PUSH
79443: LD_INT 8
79445: GREATER
79446: OR
79447: IFFALSE 79451
// exit ;
79449: GO 79638
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79451: LD_ADDR_VAR 0 4
79455: PUSH
79456: LD_INT 22
79458: PUSH
79459: LD_VAR 0 1
79463: PUSH
79464: EMPTY
79465: LIST
79466: LIST
79467: PUSH
79468: LD_INT 21
79470: PUSH
79471: LD_INT 3
79473: PUSH
79474: EMPTY
79475: LIST
79476: LIST
79477: PUSH
79478: EMPTY
79479: LIST
79480: LIST
79481: PPUSH
79482: CALL_OW 69
79486: ST_TO_ADDR
// if not tmp then
79487: LD_VAR 0 4
79491: NOT
79492: IFFALSE 79496
// exit ;
79494: GO 79638
// enable_addtolog := true ;
79496: LD_ADDR_OWVAR 81
79500: PUSH
79501: LD_INT 1
79503: ST_TO_ADDR
// AddToLog ( [ ) ;
79504: LD_STRING [
79506: PPUSH
79507: CALL_OW 561
// for i in tmp do
79511: LD_ADDR_VAR 0 3
79515: PUSH
79516: LD_VAR 0 4
79520: PUSH
79521: FOR_IN
79522: IFFALSE 79629
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79524: LD_STRING [
79526: PUSH
79527: LD_VAR 0 3
79531: PPUSH
79532: CALL_OW 266
79536: STR
79537: PUSH
79538: LD_STRING , 
79540: STR
79541: PUSH
79542: LD_VAR 0 3
79546: PPUSH
79547: CALL_OW 250
79551: STR
79552: PUSH
79553: LD_STRING , 
79555: STR
79556: PUSH
79557: LD_VAR 0 3
79561: PPUSH
79562: CALL_OW 251
79566: STR
79567: PUSH
79568: LD_STRING , 
79570: STR
79571: PUSH
79572: LD_VAR 0 3
79576: PPUSH
79577: CALL_OW 254
79581: STR
79582: PUSH
79583: LD_STRING , 
79585: STR
79586: PUSH
79587: LD_VAR 0 3
79591: PPUSH
79592: LD_INT 1
79594: PPUSH
79595: CALL_OW 268
79599: STR
79600: PUSH
79601: LD_STRING , 
79603: STR
79604: PUSH
79605: LD_VAR 0 3
79609: PPUSH
79610: LD_INT 2
79612: PPUSH
79613: CALL_OW 268
79617: STR
79618: PUSH
79619: LD_STRING ],
79621: STR
79622: PPUSH
79623: CALL_OW 561
// end ;
79627: GO 79521
79629: POP
79630: POP
// AddToLog ( ]; ) ;
79631: LD_STRING ];
79633: PPUSH
79634: CALL_OW 561
// end ;
79638: LD_VAR 0 2
79642: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79643: LD_INT 0
79645: PPUSH
79646: PPUSH
79647: PPUSH
79648: PPUSH
79649: PPUSH
// if not area or not rate or not max then
79650: LD_VAR 0 1
79654: NOT
79655: PUSH
79656: LD_VAR 0 2
79660: NOT
79661: OR
79662: PUSH
79663: LD_VAR 0 4
79667: NOT
79668: OR
79669: IFFALSE 79673
// exit ;
79671: GO 79862
// while 1 do
79673: LD_INT 1
79675: IFFALSE 79862
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79677: LD_ADDR_VAR 0 9
79681: PUSH
79682: LD_VAR 0 1
79686: PPUSH
79687: LD_INT 1
79689: PPUSH
79690: CALL_OW 287
79694: PUSH
79695: LD_INT 10
79697: MUL
79698: ST_TO_ADDR
// r := rate / 10 ;
79699: LD_ADDR_VAR 0 7
79703: PUSH
79704: LD_VAR 0 2
79708: PUSH
79709: LD_INT 10
79711: DIVREAL
79712: ST_TO_ADDR
// time := 1 1$00 ;
79713: LD_ADDR_VAR 0 8
79717: PUSH
79718: LD_INT 2100
79720: ST_TO_ADDR
// if amount < min then
79721: LD_VAR 0 9
79725: PUSH
79726: LD_VAR 0 3
79730: LESS
79731: IFFALSE 79749
// r := r * 2 else
79733: LD_ADDR_VAR 0 7
79737: PUSH
79738: LD_VAR 0 7
79742: PUSH
79743: LD_INT 2
79745: MUL
79746: ST_TO_ADDR
79747: GO 79775
// if amount > max then
79749: LD_VAR 0 9
79753: PUSH
79754: LD_VAR 0 4
79758: GREATER
79759: IFFALSE 79775
// r := r / 2 ;
79761: LD_ADDR_VAR 0 7
79765: PUSH
79766: LD_VAR 0 7
79770: PUSH
79771: LD_INT 2
79773: DIVREAL
79774: ST_TO_ADDR
// time := time / r ;
79775: LD_ADDR_VAR 0 8
79779: PUSH
79780: LD_VAR 0 8
79784: PUSH
79785: LD_VAR 0 7
79789: DIVREAL
79790: ST_TO_ADDR
// if time < 0 then
79791: LD_VAR 0 8
79795: PUSH
79796: LD_INT 0
79798: LESS
79799: IFFALSE 79816
// time := time * - 1 ;
79801: LD_ADDR_VAR 0 8
79805: PUSH
79806: LD_VAR 0 8
79810: PUSH
79811: LD_INT 1
79813: NEG
79814: MUL
79815: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79816: LD_VAR 0 8
79820: PUSH
79821: LD_INT 35
79823: PPUSH
79824: LD_INT 875
79826: PPUSH
79827: CALL_OW 12
79831: PLUS
79832: PPUSH
79833: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79837: LD_INT 1
79839: PPUSH
79840: LD_INT 5
79842: PPUSH
79843: CALL_OW 12
79847: PPUSH
79848: LD_VAR 0 1
79852: PPUSH
79853: LD_INT 1
79855: PPUSH
79856: CALL_OW 55
// end ;
79860: GO 79673
// end ;
79862: LD_VAR 0 5
79866: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79867: LD_INT 0
79869: PPUSH
79870: PPUSH
79871: PPUSH
79872: PPUSH
79873: PPUSH
79874: PPUSH
79875: PPUSH
79876: PPUSH
// if not turrets or not factories then
79877: LD_VAR 0 1
79881: NOT
79882: PUSH
79883: LD_VAR 0 2
79887: NOT
79888: OR
79889: IFFALSE 79893
// exit ;
79891: GO 80200
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79893: LD_ADDR_VAR 0 10
79897: PUSH
79898: LD_INT 5
79900: PUSH
79901: LD_INT 6
79903: PUSH
79904: EMPTY
79905: LIST
79906: LIST
79907: PUSH
79908: LD_INT 2
79910: PUSH
79911: LD_INT 4
79913: PUSH
79914: EMPTY
79915: LIST
79916: LIST
79917: PUSH
79918: LD_INT 3
79920: PUSH
79921: LD_INT 5
79923: PUSH
79924: EMPTY
79925: LIST
79926: LIST
79927: PUSH
79928: EMPTY
79929: LIST
79930: LIST
79931: LIST
79932: PUSH
79933: LD_INT 24
79935: PUSH
79936: LD_INT 25
79938: PUSH
79939: EMPTY
79940: LIST
79941: LIST
79942: PUSH
79943: LD_INT 23
79945: PUSH
79946: LD_INT 27
79948: PUSH
79949: EMPTY
79950: LIST
79951: LIST
79952: PUSH
79953: EMPTY
79954: LIST
79955: LIST
79956: PUSH
79957: LD_INT 42
79959: PUSH
79960: LD_INT 43
79962: PUSH
79963: EMPTY
79964: LIST
79965: LIST
79966: PUSH
79967: LD_INT 44
79969: PUSH
79970: LD_INT 46
79972: PUSH
79973: EMPTY
79974: LIST
79975: LIST
79976: PUSH
79977: LD_INT 45
79979: PUSH
79980: LD_INT 47
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: EMPTY
79988: LIST
79989: LIST
79990: LIST
79991: PUSH
79992: EMPTY
79993: LIST
79994: LIST
79995: LIST
79996: ST_TO_ADDR
// result := [ ] ;
79997: LD_ADDR_VAR 0 3
80001: PUSH
80002: EMPTY
80003: ST_TO_ADDR
// for i in turrets do
80004: LD_ADDR_VAR 0 4
80008: PUSH
80009: LD_VAR 0 1
80013: PUSH
80014: FOR_IN
80015: IFFALSE 80198
// begin nat := GetNation ( i ) ;
80017: LD_ADDR_VAR 0 7
80021: PUSH
80022: LD_VAR 0 4
80026: PPUSH
80027: CALL_OW 248
80031: ST_TO_ADDR
// weapon := 0 ;
80032: LD_ADDR_VAR 0 8
80036: PUSH
80037: LD_INT 0
80039: ST_TO_ADDR
// if not nat then
80040: LD_VAR 0 7
80044: NOT
80045: IFFALSE 80049
// continue ;
80047: GO 80014
// for j in list [ nat ] do
80049: LD_ADDR_VAR 0 5
80053: PUSH
80054: LD_VAR 0 10
80058: PUSH
80059: LD_VAR 0 7
80063: ARRAY
80064: PUSH
80065: FOR_IN
80066: IFFALSE 80107
// if GetBWeapon ( i ) = j [ 1 ] then
80068: LD_VAR 0 4
80072: PPUSH
80073: CALL_OW 269
80077: PUSH
80078: LD_VAR 0 5
80082: PUSH
80083: LD_INT 1
80085: ARRAY
80086: EQUAL
80087: IFFALSE 80105
// begin weapon := j [ 2 ] ;
80089: LD_ADDR_VAR 0 8
80093: PUSH
80094: LD_VAR 0 5
80098: PUSH
80099: LD_INT 2
80101: ARRAY
80102: ST_TO_ADDR
// break ;
80103: GO 80107
// end ;
80105: GO 80065
80107: POP
80108: POP
// if not weapon then
80109: LD_VAR 0 8
80113: NOT
80114: IFFALSE 80118
// continue ;
80116: GO 80014
// for k in factories do
80118: LD_ADDR_VAR 0 6
80122: PUSH
80123: LD_VAR 0 2
80127: PUSH
80128: FOR_IN
80129: IFFALSE 80194
// begin weapons := AvailableWeaponList ( k ) ;
80131: LD_ADDR_VAR 0 9
80135: PUSH
80136: LD_VAR 0 6
80140: PPUSH
80141: CALL_OW 478
80145: ST_TO_ADDR
// if not weapons then
80146: LD_VAR 0 9
80150: NOT
80151: IFFALSE 80155
// continue ;
80153: GO 80128
// if weapon in weapons then
80155: LD_VAR 0 8
80159: PUSH
80160: LD_VAR 0 9
80164: IN
80165: IFFALSE 80192
// begin result := [ i , weapon ] ;
80167: LD_ADDR_VAR 0 3
80171: PUSH
80172: LD_VAR 0 4
80176: PUSH
80177: LD_VAR 0 8
80181: PUSH
80182: EMPTY
80183: LIST
80184: LIST
80185: ST_TO_ADDR
// exit ;
80186: POP
80187: POP
80188: POP
80189: POP
80190: GO 80200
// end ; end ;
80192: GO 80128
80194: POP
80195: POP
// end ;
80196: GO 80014
80198: POP
80199: POP
// end ;
80200: LD_VAR 0 3
80204: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80205: LD_INT 0
80207: PPUSH
// if not side or side > 8 then
80208: LD_VAR 0 3
80212: NOT
80213: PUSH
80214: LD_VAR 0 3
80218: PUSH
80219: LD_INT 8
80221: GREATER
80222: OR
80223: IFFALSE 80227
// exit ;
80225: GO 80286
// if not range then
80227: LD_VAR 0 4
80231: NOT
80232: IFFALSE 80243
// range := - 12 ;
80234: LD_ADDR_VAR 0 4
80238: PUSH
80239: LD_INT 12
80241: NEG
80242: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80243: LD_VAR 0 1
80247: PPUSH
80248: LD_VAR 0 2
80252: PPUSH
80253: LD_VAR 0 3
80257: PPUSH
80258: LD_VAR 0 4
80262: PPUSH
80263: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80267: LD_VAR 0 1
80271: PPUSH
80272: LD_VAR 0 2
80276: PPUSH
80277: LD_VAR 0 3
80281: PPUSH
80282: CALL_OW 331
// end ;
80286: LD_VAR 0 5
80290: RET
// export function Video ( mode ) ; begin
80291: LD_INT 0
80293: PPUSH
// ingame_video = mode ;
80294: LD_ADDR_OWVAR 52
80298: PUSH
80299: LD_VAR 0 1
80303: ST_TO_ADDR
// interface_hidden = mode ;
80304: LD_ADDR_OWVAR 54
80308: PUSH
80309: LD_VAR 0 1
80313: ST_TO_ADDR
// end ;
80314: LD_VAR 0 2
80318: RET
// export function Join ( array , element ) ; begin
80319: LD_INT 0
80321: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80322: LD_ADDR_VAR 0 3
80326: PUSH
80327: LD_VAR 0 1
80331: PPUSH
80332: LD_VAR 0 1
80336: PUSH
80337: LD_INT 1
80339: PLUS
80340: PPUSH
80341: LD_VAR 0 2
80345: PPUSH
80346: CALL_OW 1
80350: ST_TO_ADDR
// end ;
80351: LD_VAR 0 3
80355: RET
// export function JoinUnion ( array , element ) ; begin
80356: LD_INT 0
80358: PPUSH
// result := array union element ;
80359: LD_ADDR_VAR 0 3
80363: PUSH
80364: LD_VAR 0 1
80368: PUSH
80369: LD_VAR 0 2
80373: UNION
80374: ST_TO_ADDR
// end ;
80375: LD_VAR 0 3
80379: RET
// export function GetBehemoths ( side ) ; begin
80380: LD_INT 0
80382: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80383: LD_ADDR_VAR 0 2
80387: PUSH
80388: LD_INT 22
80390: PUSH
80391: LD_VAR 0 1
80395: PUSH
80396: EMPTY
80397: LIST
80398: LIST
80399: PUSH
80400: LD_INT 31
80402: PUSH
80403: LD_INT 25
80405: PUSH
80406: EMPTY
80407: LIST
80408: LIST
80409: PUSH
80410: EMPTY
80411: LIST
80412: LIST
80413: PPUSH
80414: CALL_OW 69
80418: ST_TO_ADDR
// end ;
80419: LD_VAR 0 2
80423: RET
// export function Shuffle ( array ) ; var i , index ; begin
80424: LD_INT 0
80426: PPUSH
80427: PPUSH
80428: PPUSH
// result := [ ] ;
80429: LD_ADDR_VAR 0 2
80433: PUSH
80434: EMPTY
80435: ST_TO_ADDR
// if not array then
80436: LD_VAR 0 1
80440: NOT
80441: IFFALSE 80445
// exit ;
80443: GO 80544
// Randomize ;
80445: CALL_OW 10
// for i = array downto 1 do
80449: LD_ADDR_VAR 0 3
80453: PUSH
80454: DOUBLE
80455: LD_VAR 0 1
80459: INC
80460: ST_TO_ADDR
80461: LD_INT 1
80463: PUSH
80464: FOR_DOWNTO
80465: IFFALSE 80542
// begin index := rand ( 1 , array ) ;
80467: LD_ADDR_VAR 0 4
80471: PUSH
80472: LD_INT 1
80474: PPUSH
80475: LD_VAR 0 1
80479: PPUSH
80480: CALL_OW 12
80484: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80485: LD_ADDR_VAR 0 2
80489: PUSH
80490: LD_VAR 0 2
80494: PPUSH
80495: LD_VAR 0 2
80499: PUSH
80500: LD_INT 1
80502: PLUS
80503: PPUSH
80504: LD_VAR 0 1
80508: PUSH
80509: LD_VAR 0 4
80513: ARRAY
80514: PPUSH
80515: CALL_OW 2
80519: ST_TO_ADDR
// array := Delete ( array , index ) ;
80520: LD_ADDR_VAR 0 1
80524: PUSH
80525: LD_VAR 0 1
80529: PPUSH
80530: LD_VAR 0 4
80534: PPUSH
80535: CALL_OW 3
80539: ST_TO_ADDR
// end ;
80540: GO 80464
80542: POP
80543: POP
// end ;
80544: LD_VAR 0 2
80548: RET
// export function GetBaseMaterials ( base ) ; begin
80549: LD_INT 0
80551: PPUSH
// result := [ 0 , 0 , 0 ] ;
80552: LD_ADDR_VAR 0 2
80556: PUSH
80557: LD_INT 0
80559: PUSH
80560: LD_INT 0
80562: PUSH
80563: LD_INT 0
80565: PUSH
80566: EMPTY
80567: LIST
80568: LIST
80569: LIST
80570: ST_TO_ADDR
// if not base then
80571: LD_VAR 0 1
80575: NOT
80576: IFFALSE 80580
// exit ;
80578: GO 80629
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80580: LD_ADDR_VAR 0 2
80584: PUSH
80585: LD_VAR 0 1
80589: PPUSH
80590: LD_INT 1
80592: PPUSH
80593: CALL_OW 275
80597: PUSH
80598: LD_VAR 0 1
80602: PPUSH
80603: LD_INT 2
80605: PPUSH
80606: CALL_OW 275
80610: PUSH
80611: LD_VAR 0 1
80615: PPUSH
80616: LD_INT 3
80618: PPUSH
80619: CALL_OW 275
80623: PUSH
80624: EMPTY
80625: LIST
80626: LIST
80627: LIST
80628: ST_TO_ADDR
// end ;
80629: LD_VAR 0 2
80633: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80634: LD_INT 0
80636: PPUSH
80637: PPUSH
// result := array ;
80638: LD_ADDR_VAR 0 3
80642: PUSH
80643: LD_VAR 0 1
80647: ST_TO_ADDR
// if size >= result then
80648: LD_VAR 0 2
80652: PUSH
80653: LD_VAR 0 3
80657: GREATEREQUAL
80658: IFFALSE 80662
// exit ;
80660: GO 80712
// if size then
80662: LD_VAR 0 2
80666: IFFALSE 80712
// for i := array downto size do
80668: LD_ADDR_VAR 0 4
80672: PUSH
80673: DOUBLE
80674: LD_VAR 0 1
80678: INC
80679: ST_TO_ADDR
80680: LD_VAR 0 2
80684: PUSH
80685: FOR_DOWNTO
80686: IFFALSE 80710
// result := Delete ( result , result ) ;
80688: LD_ADDR_VAR 0 3
80692: PUSH
80693: LD_VAR 0 3
80697: PPUSH
80698: LD_VAR 0 3
80702: PPUSH
80703: CALL_OW 3
80707: ST_TO_ADDR
80708: GO 80685
80710: POP
80711: POP
// end ;
80712: LD_VAR 0 3
80716: RET
// export function ComExit ( unit ) ; var tmp ; begin
80717: LD_INT 0
80719: PPUSH
80720: PPUSH
// if not IsInUnit ( unit ) then
80721: LD_VAR 0 1
80725: PPUSH
80726: CALL_OW 310
80730: NOT
80731: IFFALSE 80735
// exit ;
80733: GO 80795
// tmp := IsInUnit ( unit ) ;
80735: LD_ADDR_VAR 0 3
80739: PUSH
80740: LD_VAR 0 1
80744: PPUSH
80745: CALL_OW 310
80749: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80750: LD_VAR 0 3
80754: PPUSH
80755: CALL_OW 247
80759: PUSH
80760: LD_INT 2
80762: EQUAL
80763: IFFALSE 80776
// ComExitVehicle ( unit ) else
80765: LD_VAR 0 1
80769: PPUSH
80770: CALL_OW 121
80774: GO 80785
// ComExitBuilding ( unit ) ;
80776: LD_VAR 0 1
80780: PPUSH
80781: CALL_OW 122
// result := tmp ;
80785: LD_ADDR_VAR 0 2
80789: PUSH
80790: LD_VAR 0 3
80794: ST_TO_ADDR
// end ;
80795: LD_VAR 0 2
80799: RET
// export function ComExitAll ( units ) ; var i ; begin
80800: LD_INT 0
80802: PPUSH
80803: PPUSH
// if not units then
80804: LD_VAR 0 1
80808: NOT
80809: IFFALSE 80813
// exit ;
80811: GO 80839
// for i in units do
80813: LD_ADDR_VAR 0 3
80817: PUSH
80818: LD_VAR 0 1
80822: PUSH
80823: FOR_IN
80824: IFFALSE 80837
// ComExit ( i ) ;
80826: LD_VAR 0 3
80830: PPUSH
80831: CALL 80717 0 1
80835: GO 80823
80837: POP
80838: POP
// end ;
80839: LD_VAR 0 2
80843: RET
// export function ResetHc ; begin
80844: LD_INT 0
80846: PPUSH
// InitHc ;
80847: CALL_OW 19
// hc_importance := 0 ;
80851: LD_ADDR_OWVAR 32
80855: PUSH
80856: LD_INT 0
80858: ST_TO_ADDR
// end ;
80859: LD_VAR 0 1
80863: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80864: LD_INT 0
80866: PPUSH
80867: PPUSH
80868: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80869: LD_ADDR_VAR 0 6
80873: PUSH
80874: LD_VAR 0 1
80878: PUSH
80879: LD_VAR 0 3
80883: PLUS
80884: PUSH
80885: LD_INT 2
80887: DIV
80888: ST_TO_ADDR
// if _x < 0 then
80889: LD_VAR 0 6
80893: PUSH
80894: LD_INT 0
80896: LESS
80897: IFFALSE 80914
// _x := _x * - 1 ;
80899: LD_ADDR_VAR 0 6
80903: PUSH
80904: LD_VAR 0 6
80908: PUSH
80909: LD_INT 1
80911: NEG
80912: MUL
80913: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80914: LD_ADDR_VAR 0 7
80918: PUSH
80919: LD_VAR 0 2
80923: PUSH
80924: LD_VAR 0 4
80928: PLUS
80929: PUSH
80930: LD_INT 2
80932: DIV
80933: ST_TO_ADDR
// if _y < 0 then
80934: LD_VAR 0 7
80938: PUSH
80939: LD_INT 0
80941: LESS
80942: IFFALSE 80959
// _y := _y * - 1 ;
80944: LD_ADDR_VAR 0 7
80948: PUSH
80949: LD_VAR 0 7
80953: PUSH
80954: LD_INT 1
80956: NEG
80957: MUL
80958: ST_TO_ADDR
// result := [ _x , _y ] ;
80959: LD_ADDR_VAR 0 5
80963: PUSH
80964: LD_VAR 0 6
80968: PUSH
80969: LD_VAR 0 7
80973: PUSH
80974: EMPTY
80975: LIST
80976: LIST
80977: ST_TO_ADDR
// end ;
80978: LD_VAR 0 5
80982: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80983: LD_INT 0
80985: PPUSH
80986: PPUSH
80987: PPUSH
80988: PPUSH
// task := GetTaskList ( unit ) ;
80989: LD_ADDR_VAR 0 7
80993: PUSH
80994: LD_VAR 0 1
80998: PPUSH
80999: CALL_OW 437
81003: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81004: LD_VAR 0 7
81008: NOT
81009: PUSH
81010: LD_VAR 0 1
81014: PPUSH
81015: LD_VAR 0 2
81019: PPUSH
81020: CALL_OW 308
81024: NOT
81025: AND
81026: IFFALSE 81030
// exit ;
81028: GO 81148
// if IsInArea ( unit , area ) then
81030: LD_VAR 0 1
81034: PPUSH
81035: LD_VAR 0 2
81039: PPUSH
81040: CALL_OW 308
81044: IFFALSE 81062
// begin ComMoveToArea ( unit , goAway ) ;
81046: LD_VAR 0 1
81050: PPUSH
81051: LD_VAR 0 3
81055: PPUSH
81056: CALL_OW 113
// exit ;
81060: GO 81148
// end ; if task [ 1 ] [ 1 ] <> M then
81062: LD_VAR 0 7
81066: PUSH
81067: LD_INT 1
81069: ARRAY
81070: PUSH
81071: LD_INT 1
81073: ARRAY
81074: PUSH
81075: LD_STRING M
81077: NONEQUAL
81078: IFFALSE 81082
// exit ;
81080: GO 81148
// x := task [ 1 ] [ 2 ] ;
81082: LD_ADDR_VAR 0 5
81086: PUSH
81087: LD_VAR 0 7
81091: PUSH
81092: LD_INT 1
81094: ARRAY
81095: PUSH
81096: LD_INT 2
81098: ARRAY
81099: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81100: LD_ADDR_VAR 0 6
81104: PUSH
81105: LD_VAR 0 7
81109: PUSH
81110: LD_INT 1
81112: ARRAY
81113: PUSH
81114: LD_INT 3
81116: ARRAY
81117: ST_TO_ADDR
// if InArea ( x , y , area ) then
81118: LD_VAR 0 5
81122: PPUSH
81123: LD_VAR 0 6
81127: PPUSH
81128: LD_VAR 0 2
81132: PPUSH
81133: CALL_OW 309
81137: IFFALSE 81148
// ComStop ( unit ) ;
81139: LD_VAR 0 1
81143: PPUSH
81144: CALL_OW 141
// end ;
81148: LD_VAR 0 4
81152: RET
// export function Abs ( value ) ; begin
81153: LD_INT 0
81155: PPUSH
// result := value ;
81156: LD_ADDR_VAR 0 2
81160: PUSH
81161: LD_VAR 0 1
81165: ST_TO_ADDR
// if value < 0 then
81166: LD_VAR 0 1
81170: PUSH
81171: LD_INT 0
81173: LESS
81174: IFFALSE 81191
// result := value * - 1 ;
81176: LD_ADDR_VAR 0 2
81180: PUSH
81181: LD_VAR 0 1
81185: PUSH
81186: LD_INT 1
81188: NEG
81189: MUL
81190: ST_TO_ADDR
// end ;
81191: LD_VAR 0 2
81195: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81196: LD_INT 0
81198: PPUSH
81199: PPUSH
81200: PPUSH
81201: PPUSH
81202: PPUSH
81203: PPUSH
81204: PPUSH
81205: PPUSH
// if not unit or not building then
81206: LD_VAR 0 1
81210: NOT
81211: PUSH
81212: LD_VAR 0 2
81216: NOT
81217: OR
81218: IFFALSE 81222
// exit ;
81220: GO 81448
// x := GetX ( building ) ;
81222: LD_ADDR_VAR 0 4
81226: PUSH
81227: LD_VAR 0 2
81231: PPUSH
81232: CALL_OW 250
81236: ST_TO_ADDR
// y := GetY ( building ) ;
81237: LD_ADDR_VAR 0 6
81241: PUSH
81242: LD_VAR 0 2
81246: PPUSH
81247: CALL_OW 251
81251: ST_TO_ADDR
// d := GetDir ( building ) ;
81252: LD_ADDR_VAR 0 8
81256: PUSH
81257: LD_VAR 0 2
81261: PPUSH
81262: CALL_OW 254
81266: ST_TO_ADDR
// r := 4 ;
81267: LD_ADDR_VAR 0 9
81271: PUSH
81272: LD_INT 4
81274: ST_TO_ADDR
// for i := 1 to 5 do
81275: LD_ADDR_VAR 0 10
81279: PUSH
81280: DOUBLE
81281: LD_INT 1
81283: DEC
81284: ST_TO_ADDR
81285: LD_INT 5
81287: PUSH
81288: FOR_TO
81289: IFFALSE 81446
// begin _x := ShiftX ( x , d , r + i ) ;
81291: LD_ADDR_VAR 0 5
81295: PUSH
81296: LD_VAR 0 4
81300: PPUSH
81301: LD_VAR 0 8
81305: PPUSH
81306: LD_VAR 0 9
81310: PUSH
81311: LD_VAR 0 10
81315: PLUS
81316: PPUSH
81317: CALL_OW 272
81321: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81322: LD_ADDR_VAR 0 7
81326: PUSH
81327: LD_VAR 0 6
81331: PPUSH
81332: LD_VAR 0 8
81336: PPUSH
81337: LD_VAR 0 9
81341: PUSH
81342: LD_VAR 0 10
81346: PLUS
81347: PPUSH
81348: CALL_OW 273
81352: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81353: LD_VAR 0 5
81357: PPUSH
81358: LD_VAR 0 7
81362: PPUSH
81363: CALL_OW 488
81367: PUSH
81368: LD_VAR 0 5
81372: PPUSH
81373: LD_VAR 0 7
81377: PPUSH
81378: CALL_OW 428
81382: PPUSH
81383: CALL_OW 247
81387: PUSH
81388: LD_INT 3
81390: PUSH
81391: LD_INT 2
81393: PUSH
81394: EMPTY
81395: LIST
81396: LIST
81397: IN
81398: NOT
81399: AND
81400: IFFALSE 81444
// begin ComMoveXY ( unit , _x , _y ) ;
81402: LD_VAR 0 1
81406: PPUSH
81407: LD_VAR 0 5
81411: PPUSH
81412: LD_VAR 0 7
81416: PPUSH
81417: CALL_OW 111
// result := [ _x , _y ] ;
81421: LD_ADDR_VAR 0 3
81425: PUSH
81426: LD_VAR 0 5
81430: PUSH
81431: LD_VAR 0 7
81435: PUSH
81436: EMPTY
81437: LIST
81438: LIST
81439: ST_TO_ADDR
// exit ;
81440: POP
81441: POP
81442: GO 81448
// end ; end ;
81444: GO 81288
81446: POP
81447: POP
// end ;
81448: LD_VAR 0 3
81452: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81453: LD_INT 0
81455: PPUSH
81456: PPUSH
81457: PPUSH
// result := 0 ;
81458: LD_ADDR_VAR 0 3
81462: PUSH
81463: LD_INT 0
81465: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81466: LD_VAR 0 1
81470: PUSH
81471: LD_INT 0
81473: LESS
81474: PUSH
81475: LD_VAR 0 1
81479: PUSH
81480: LD_INT 8
81482: GREATER
81483: OR
81484: PUSH
81485: LD_VAR 0 2
81489: PUSH
81490: LD_INT 0
81492: LESS
81493: OR
81494: PUSH
81495: LD_VAR 0 2
81499: PUSH
81500: LD_INT 8
81502: GREATER
81503: OR
81504: IFFALSE 81508
// exit ;
81506: GO 81583
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81508: LD_ADDR_VAR 0 4
81512: PUSH
81513: LD_INT 22
81515: PUSH
81516: LD_VAR 0 2
81520: PUSH
81521: EMPTY
81522: LIST
81523: LIST
81524: PPUSH
81525: CALL_OW 69
81529: PUSH
81530: FOR_IN
81531: IFFALSE 81581
// begin un := UnitShoot ( i ) ;
81533: LD_ADDR_VAR 0 5
81537: PUSH
81538: LD_VAR 0 4
81542: PPUSH
81543: CALL_OW 504
81547: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81548: LD_VAR 0 5
81552: PPUSH
81553: CALL_OW 255
81557: PUSH
81558: LD_VAR 0 1
81562: EQUAL
81563: IFFALSE 81579
// begin result := un ;
81565: LD_ADDR_VAR 0 3
81569: PUSH
81570: LD_VAR 0 5
81574: ST_TO_ADDR
// exit ;
81575: POP
81576: POP
81577: GO 81583
// end ; end ;
81579: GO 81530
81581: POP
81582: POP
// end ;
81583: LD_VAR 0 3
81587: RET
// export function GetCargoBay ( units ) ; begin
81588: LD_INT 0
81590: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81591: LD_ADDR_VAR 0 2
81595: PUSH
81596: LD_VAR 0 1
81600: PPUSH
81601: LD_INT 2
81603: PUSH
81604: LD_INT 34
81606: PUSH
81607: LD_INT 12
81609: PUSH
81610: EMPTY
81611: LIST
81612: LIST
81613: PUSH
81614: LD_INT 34
81616: PUSH
81617: LD_INT 51
81619: PUSH
81620: EMPTY
81621: LIST
81622: LIST
81623: PUSH
81624: LD_INT 34
81626: PUSH
81627: LD_INT 32
81629: PUSH
81630: EMPTY
81631: LIST
81632: LIST
81633: PUSH
81634: LD_INT 34
81636: PUSH
81637: LD_INT 89
81639: PUSH
81640: EMPTY
81641: LIST
81642: LIST
81643: PUSH
81644: EMPTY
81645: LIST
81646: LIST
81647: LIST
81648: LIST
81649: LIST
81650: PPUSH
81651: CALL_OW 72
81655: ST_TO_ADDR
// end ;
81656: LD_VAR 0 2
81660: RET
// export function Negate ( value ) ; begin
81661: LD_INT 0
81663: PPUSH
// result := not value ;
81664: LD_ADDR_VAR 0 2
81668: PUSH
81669: LD_VAR 0 1
81673: NOT
81674: ST_TO_ADDR
// end ;
81675: LD_VAR 0 2
81679: RET
// export function Inc ( value ) ; begin
81680: LD_INT 0
81682: PPUSH
// result := value + 1 ;
81683: LD_ADDR_VAR 0 2
81687: PUSH
81688: LD_VAR 0 1
81692: PUSH
81693: LD_INT 1
81695: PLUS
81696: ST_TO_ADDR
// end ;
81697: LD_VAR 0 2
81701: RET
// export function Dec ( value ) ; begin
81702: LD_INT 0
81704: PPUSH
// result := value - 1 ;
81705: LD_ADDR_VAR 0 2
81709: PUSH
81710: LD_VAR 0 1
81714: PUSH
81715: LD_INT 1
81717: MINUS
81718: ST_TO_ADDR
// end ;
81719: LD_VAR 0 2
81723: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81724: LD_INT 0
81726: PPUSH
81727: PPUSH
81728: PPUSH
81729: PPUSH
81730: PPUSH
81731: PPUSH
81732: PPUSH
81733: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81734: LD_VAR 0 1
81738: PPUSH
81739: LD_VAR 0 2
81743: PPUSH
81744: CALL_OW 488
81748: NOT
81749: PUSH
81750: LD_VAR 0 3
81754: PPUSH
81755: LD_VAR 0 4
81759: PPUSH
81760: CALL_OW 488
81764: NOT
81765: OR
81766: IFFALSE 81779
// begin result := - 1 ;
81768: LD_ADDR_VAR 0 5
81772: PUSH
81773: LD_INT 1
81775: NEG
81776: ST_TO_ADDR
// exit ;
81777: GO 82014
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81779: LD_ADDR_VAR 0 12
81783: PUSH
81784: LD_VAR 0 1
81788: PPUSH
81789: LD_VAR 0 2
81793: PPUSH
81794: LD_VAR 0 3
81798: PPUSH
81799: LD_VAR 0 4
81803: PPUSH
81804: CALL 80864 0 4
81808: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81809: LD_ADDR_VAR 0 11
81813: PUSH
81814: LD_VAR 0 1
81818: PPUSH
81819: LD_VAR 0 2
81823: PPUSH
81824: LD_VAR 0 12
81828: PUSH
81829: LD_INT 1
81831: ARRAY
81832: PPUSH
81833: LD_VAR 0 12
81837: PUSH
81838: LD_INT 2
81840: ARRAY
81841: PPUSH
81842: CALL_OW 298
81846: ST_TO_ADDR
// distance := 9999 ;
81847: LD_ADDR_VAR 0 10
81851: PUSH
81852: LD_INT 9999
81854: ST_TO_ADDR
// for i := 0 to 5 do
81855: LD_ADDR_VAR 0 6
81859: PUSH
81860: DOUBLE
81861: LD_INT 0
81863: DEC
81864: ST_TO_ADDR
81865: LD_INT 5
81867: PUSH
81868: FOR_TO
81869: IFFALSE 82012
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81871: LD_ADDR_VAR 0 7
81875: PUSH
81876: LD_VAR 0 1
81880: PPUSH
81881: LD_VAR 0 6
81885: PPUSH
81886: LD_VAR 0 11
81890: PPUSH
81891: CALL_OW 272
81895: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81896: LD_ADDR_VAR 0 8
81900: PUSH
81901: LD_VAR 0 2
81905: PPUSH
81906: LD_VAR 0 6
81910: PPUSH
81911: LD_VAR 0 11
81915: PPUSH
81916: CALL_OW 273
81920: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81921: LD_VAR 0 7
81925: PPUSH
81926: LD_VAR 0 8
81930: PPUSH
81931: CALL_OW 488
81935: NOT
81936: IFFALSE 81940
// continue ;
81938: GO 81868
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81940: LD_ADDR_VAR 0 9
81944: PUSH
81945: LD_VAR 0 12
81949: PUSH
81950: LD_INT 1
81952: ARRAY
81953: PPUSH
81954: LD_VAR 0 12
81958: PUSH
81959: LD_INT 2
81961: ARRAY
81962: PPUSH
81963: LD_VAR 0 7
81967: PPUSH
81968: LD_VAR 0 8
81972: PPUSH
81973: CALL_OW 298
81977: ST_TO_ADDR
// if tmp < distance then
81978: LD_VAR 0 9
81982: PUSH
81983: LD_VAR 0 10
81987: LESS
81988: IFFALSE 82010
// begin result := i ;
81990: LD_ADDR_VAR 0 5
81994: PUSH
81995: LD_VAR 0 6
81999: ST_TO_ADDR
// distance := tmp ;
82000: LD_ADDR_VAR 0 10
82004: PUSH
82005: LD_VAR 0 9
82009: ST_TO_ADDR
// end ; end ;
82010: GO 81868
82012: POP
82013: POP
// end ;
82014: LD_VAR 0 5
82018: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82019: LD_INT 0
82021: PPUSH
82022: PPUSH
// if not driver or not IsInUnit ( driver ) then
82023: LD_VAR 0 1
82027: NOT
82028: PUSH
82029: LD_VAR 0 1
82033: PPUSH
82034: CALL_OW 310
82038: NOT
82039: OR
82040: IFFALSE 82044
// exit ;
82042: GO 82134
// vehicle := IsInUnit ( driver ) ;
82044: LD_ADDR_VAR 0 3
82048: PUSH
82049: LD_VAR 0 1
82053: PPUSH
82054: CALL_OW 310
82058: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82059: LD_VAR 0 1
82063: PPUSH
82064: LD_STRING \
82066: PUSH
82067: LD_INT 0
82069: PUSH
82070: LD_INT 0
82072: PUSH
82073: LD_INT 0
82075: PUSH
82076: LD_INT 0
82078: PUSH
82079: LD_INT 0
82081: PUSH
82082: LD_INT 0
82084: PUSH
82085: EMPTY
82086: LIST
82087: LIST
82088: LIST
82089: LIST
82090: LIST
82091: LIST
82092: LIST
82093: PUSH
82094: LD_STRING E
82096: PUSH
82097: LD_INT 0
82099: PUSH
82100: LD_INT 0
82102: PUSH
82103: LD_VAR 0 3
82107: PUSH
82108: LD_INT 0
82110: PUSH
82111: LD_INT 0
82113: PUSH
82114: LD_INT 0
82116: PUSH
82117: EMPTY
82118: LIST
82119: LIST
82120: LIST
82121: LIST
82122: LIST
82123: LIST
82124: LIST
82125: PUSH
82126: EMPTY
82127: LIST
82128: LIST
82129: PPUSH
82130: CALL_OW 446
// end ;
82134: LD_VAR 0 2
82138: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82139: LD_INT 0
82141: PPUSH
82142: PPUSH
// if not driver or not IsInUnit ( driver ) then
82143: LD_VAR 0 1
82147: NOT
82148: PUSH
82149: LD_VAR 0 1
82153: PPUSH
82154: CALL_OW 310
82158: NOT
82159: OR
82160: IFFALSE 82164
// exit ;
82162: GO 82254
// vehicle := IsInUnit ( driver ) ;
82164: LD_ADDR_VAR 0 3
82168: PUSH
82169: LD_VAR 0 1
82173: PPUSH
82174: CALL_OW 310
82178: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82179: LD_VAR 0 1
82183: PPUSH
82184: LD_STRING \
82186: PUSH
82187: LD_INT 0
82189: PUSH
82190: LD_INT 0
82192: PUSH
82193: LD_INT 0
82195: PUSH
82196: LD_INT 0
82198: PUSH
82199: LD_INT 0
82201: PUSH
82202: LD_INT 0
82204: PUSH
82205: EMPTY
82206: LIST
82207: LIST
82208: LIST
82209: LIST
82210: LIST
82211: LIST
82212: LIST
82213: PUSH
82214: LD_STRING E
82216: PUSH
82217: LD_INT 0
82219: PUSH
82220: LD_INT 0
82222: PUSH
82223: LD_VAR 0 3
82227: PUSH
82228: LD_INT 0
82230: PUSH
82231: LD_INT 0
82233: PUSH
82234: LD_INT 0
82236: PUSH
82237: EMPTY
82238: LIST
82239: LIST
82240: LIST
82241: LIST
82242: LIST
82243: LIST
82244: LIST
82245: PUSH
82246: EMPTY
82247: LIST
82248: LIST
82249: PPUSH
82250: CALL_OW 447
// end ;
82254: LD_VAR 0 2
82258: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82259: LD_INT 0
82261: PPUSH
82262: PPUSH
82263: PPUSH
// tmp := [ ] ;
82264: LD_ADDR_VAR 0 5
82268: PUSH
82269: EMPTY
82270: ST_TO_ADDR
// for i in units do
82271: LD_ADDR_VAR 0 4
82275: PUSH
82276: LD_VAR 0 1
82280: PUSH
82281: FOR_IN
82282: IFFALSE 82320
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82284: LD_ADDR_VAR 0 5
82288: PUSH
82289: LD_VAR 0 5
82293: PPUSH
82294: LD_VAR 0 5
82298: PUSH
82299: LD_INT 1
82301: PLUS
82302: PPUSH
82303: LD_VAR 0 4
82307: PPUSH
82308: CALL_OW 256
82312: PPUSH
82313: CALL_OW 2
82317: ST_TO_ADDR
82318: GO 82281
82320: POP
82321: POP
// if not tmp then
82322: LD_VAR 0 5
82326: NOT
82327: IFFALSE 82331
// exit ;
82329: GO 82379
// if asc then
82331: LD_VAR 0 2
82335: IFFALSE 82359
// result := SortListByListAsc ( units , tmp ) else
82337: LD_ADDR_VAR 0 3
82341: PUSH
82342: LD_VAR 0 1
82346: PPUSH
82347: LD_VAR 0 5
82351: PPUSH
82352: CALL_OW 76
82356: ST_TO_ADDR
82357: GO 82379
// result := SortListByListDesc ( units , tmp ) ;
82359: LD_ADDR_VAR 0 3
82363: PUSH
82364: LD_VAR 0 1
82368: PPUSH
82369: LD_VAR 0 5
82373: PPUSH
82374: CALL_OW 77
82378: ST_TO_ADDR
// end ;
82379: LD_VAR 0 3
82383: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82384: LD_INT 0
82386: PPUSH
82387: PPUSH
// task := GetTaskList ( mech ) ;
82388: LD_ADDR_VAR 0 4
82392: PUSH
82393: LD_VAR 0 1
82397: PPUSH
82398: CALL_OW 437
82402: ST_TO_ADDR
// if not task then
82403: LD_VAR 0 4
82407: NOT
82408: IFFALSE 82412
// exit ;
82410: GO 82454
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82412: LD_ADDR_VAR 0 3
82416: PUSH
82417: LD_VAR 0 4
82421: PUSH
82422: LD_INT 1
82424: ARRAY
82425: PUSH
82426: LD_INT 1
82428: ARRAY
82429: PUSH
82430: LD_STRING r
82432: EQUAL
82433: PUSH
82434: LD_VAR 0 4
82438: PUSH
82439: LD_INT 1
82441: ARRAY
82442: PUSH
82443: LD_INT 4
82445: ARRAY
82446: PUSH
82447: LD_VAR 0 2
82451: EQUAL
82452: AND
82453: ST_TO_ADDR
// end ;
82454: LD_VAR 0 3
82458: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82459: LD_INT 0
82461: PPUSH
// SetDir ( unit , d ) ;
82462: LD_VAR 0 1
82466: PPUSH
82467: LD_VAR 0 4
82471: PPUSH
82472: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
82476: LD_VAR 0 1
82480: PPUSH
82481: LD_VAR 0 2
82485: PPUSH
82486: LD_VAR 0 3
82490: PPUSH
82491: LD_VAR 0 5
82495: PPUSH
82496: CALL_OW 48
// end ;
82500: LD_VAR 0 6
82504: RET
// export function ToNaturalNumber ( number ) ; begin
82505: LD_INT 0
82507: PPUSH
// result := number div 1 ;
82508: LD_ADDR_VAR 0 2
82512: PUSH
82513: LD_VAR 0 1
82517: PUSH
82518: LD_INT 1
82520: DIV
82521: ST_TO_ADDR
// if number < 0 then
82522: LD_VAR 0 1
82526: PUSH
82527: LD_INT 0
82529: LESS
82530: IFFALSE 82540
// result := 0 ;
82532: LD_ADDR_VAR 0 2
82536: PUSH
82537: LD_INT 0
82539: ST_TO_ADDR
// end ;
82540: LD_VAR 0 2
82544: RET
// export function SortByClass ( units , class ) ; var un ; begin
82545: LD_INT 0
82547: PPUSH
82548: PPUSH
// if not units or not class then
82549: LD_VAR 0 1
82553: NOT
82554: PUSH
82555: LD_VAR 0 2
82559: NOT
82560: OR
82561: IFFALSE 82565
// exit ;
82563: GO 82660
// result := [ ] ;
82565: LD_ADDR_VAR 0 3
82569: PUSH
82570: EMPTY
82571: ST_TO_ADDR
// for un in units do
82572: LD_ADDR_VAR 0 4
82576: PUSH
82577: LD_VAR 0 1
82581: PUSH
82582: FOR_IN
82583: IFFALSE 82658
// if GetClass ( un ) = class then
82585: LD_VAR 0 4
82589: PPUSH
82590: CALL_OW 257
82594: PUSH
82595: LD_VAR 0 2
82599: EQUAL
82600: IFFALSE 82627
// result := Insert ( result , 1 , un ) else
82602: LD_ADDR_VAR 0 3
82606: PUSH
82607: LD_VAR 0 3
82611: PPUSH
82612: LD_INT 1
82614: PPUSH
82615: LD_VAR 0 4
82619: PPUSH
82620: CALL_OW 2
82624: ST_TO_ADDR
82625: GO 82656
// result := Replace ( result , result + 1 , un ) ;
82627: LD_ADDR_VAR 0 3
82631: PUSH
82632: LD_VAR 0 3
82636: PPUSH
82637: LD_VAR 0 3
82641: PUSH
82642: LD_INT 1
82644: PLUS
82645: PPUSH
82646: LD_VAR 0 4
82650: PPUSH
82651: CALL_OW 1
82655: ST_TO_ADDR
82656: GO 82582
82658: POP
82659: POP
// end ;
82660: LD_VAR 0 3
82664: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82665: LD_INT 0
82667: PPUSH
82668: PPUSH
82669: PPUSH
82670: PPUSH
82671: PPUSH
82672: PPUSH
82673: PPUSH
// result := [ ] ;
82674: LD_ADDR_VAR 0 4
82678: PUSH
82679: EMPTY
82680: ST_TO_ADDR
// if x - r < 0 then
82681: LD_VAR 0 1
82685: PUSH
82686: LD_VAR 0 3
82690: MINUS
82691: PUSH
82692: LD_INT 0
82694: LESS
82695: IFFALSE 82707
// min_x := 0 else
82697: LD_ADDR_VAR 0 8
82701: PUSH
82702: LD_INT 0
82704: ST_TO_ADDR
82705: GO 82723
// min_x := x - r ;
82707: LD_ADDR_VAR 0 8
82711: PUSH
82712: LD_VAR 0 1
82716: PUSH
82717: LD_VAR 0 3
82721: MINUS
82722: ST_TO_ADDR
// if y - r < 0 then
82723: LD_VAR 0 2
82727: PUSH
82728: LD_VAR 0 3
82732: MINUS
82733: PUSH
82734: LD_INT 0
82736: LESS
82737: IFFALSE 82749
// min_y := 0 else
82739: LD_ADDR_VAR 0 7
82743: PUSH
82744: LD_INT 0
82746: ST_TO_ADDR
82747: GO 82765
// min_y := y - r ;
82749: LD_ADDR_VAR 0 7
82753: PUSH
82754: LD_VAR 0 2
82758: PUSH
82759: LD_VAR 0 3
82763: MINUS
82764: ST_TO_ADDR
// max_x := x + r ;
82765: LD_ADDR_VAR 0 9
82769: PUSH
82770: LD_VAR 0 1
82774: PUSH
82775: LD_VAR 0 3
82779: PLUS
82780: ST_TO_ADDR
// max_y := y + r ;
82781: LD_ADDR_VAR 0 10
82785: PUSH
82786: LD_VAR 0 2
82790: PUSH
82791: LD_VAR 0 3
82795: PLUS
82796: ST_TO_ADDR
// for _x = min_x to max_x do
82797: LD_ADDR_VAR 0 5
82801: PUSH
82802: DOUBLE
82803: LD_VAR 0 8
82807: DEC
82808: ST_TO_ADDR
82809: LD_VAR 0 9
82813: PUSH
82814: FOR_TO
82815: IFFALSE 82916
// for _y = min_y to max_y do
82817: LD_ADDR_VAR 0 6
82821: PUSH
82822: DOUBLE
82823: LD_VAR 0 7
82827: DEC
82828: ST_TO_ADDR
82829: LD_VAR 0 10
82833: PUSH
82834: FOR_TO
82835: IFFALSE 82912
// begin if not ValidHex ( _x , _y ) then
82837: LD_VAR 0 5
82841: PPUSH
82842: LD_VAR 0 6
82846: PPUSH
82847: CALL_OW 488
82851: NOT
82852: IFFALSE 82856
// continue ;
82854: GO 82834
// if GetResourceTypeXY ( _x , _y ) then
82856: LD_VAR 0 5
82860: PPUSH
82861: LD_VAR 0 6
82865: PPUSH
82866: CALL_OW 283
82870: IFFALSE 82910
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82872: LD_ADDR_VAR 0 4
82876: PUSH
82877: LD_VAR 0 4
82881: PPUSH
82882: LD_VAR 0 4
82886: PUSH
82887: LD_INT 1
82889: PLUS
82890: PPUSH
82891: LD_VAR 0 5
82895: PUSH
82896: LD_VAR 0 6
82900: PUSH
82901: EMPTY
82902: LIST
82903: LIST
82904: PPUSH
82905: CALL_OW 1
82909: ST_TO_ADDR
// end ;
82910: GO 82834
82912: POP
82913: POP
82914: GO 82814
82916: POP
82917: POP
// end ;
82918: LD_VAR 0 4
82922: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82923: LD_INT 0
82925: PPUSH
82926: PPUSH
82927: PPUSH
82928: PPUSH
82929: PPUSH
82930: PPUSH
82931: PPUSH
82932: PPUSH
// if not units then
82933: LD_VAR 0 1
82937: NOT
82938: IFFALSE 82942
// exit ;
82940: GO 83466
// result := UnitFilter ( units , [ f_ok ] ) ;
82942: LD_ADDR_VAR 0 3
82946: PUSH
82947: LD_VAR 0 1
82951: PPUSH
82952: LD_INT 50
82954: PUSH
82955: EMPTY
82956: LIST
82957: PPUSH
82958: CALL_OW 72
82962: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82963: LD_ADDR_VAR 0 8
82967: PUSH
82968: LD_VAR 0 1
82972: PUSH
82973: LD_INT 1
82975: ARRAY
82976: PPUSH
82977: CALL_OW 255
82981: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82982: LD_ADDR_VAR 0 10
82986: PUSH
82987: LD_INT 29
82989: PUSH
82990: LD_INT 91
82992: PUSH
82993: LD_INT 49
82995: PUSH
82996: EMPTY
82997: LIST
82998: LIST
82999: LIST
83000: ST_TO_ADDR
// if not result then
83001: LD_VAR 0 3
83005: NOT
83006: IFFALSE 83010
// exit ;
83008: GO 83466
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83010: LD_ADDR_VAR 0 5
83014: PUSH
83015: LD_INT 81
83017: PUSH
83018: LD_VAR 0 8
83022: PUSH
83023: EMPTY
83024: LIST
83025: LIST
83026: PPUSH
83027: CALL_OW 69
83031: ST_TO_ADDR
// for i in result do
83032: LD_ADDR_VAR 0 4
83036: PUSH
83037: LD_VAR 0 3
83041: PUSH
83042: FOR_IN
83043: IFFALSE 83464
// begin tag := GetTag ( i ) + 1 ;
83045: LD_ADDR_VAR 0 9
83049: PUSH
83050: LD_VAR 0 4
83054: PPUSH
83055: CALL_OW 110
83059: PUSH
83060: LD_INT 1
83062: PLUS
83063: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
83064: LD_ADDR_VAR 0 7
83068: PUSH
83069: LD_VAR 0 4
83073: PPUSH
83074: CALL_OW 250
83078: PPUSH
83079: LD_VAR 0 4
83083: PPUSH
83084: CALL_OW 251
83088: PPUSH
83089: LD_INT 6
83091: PPUSH
83092: CALL 82665 0 3
83096: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
83097: LD_VAR 0 4
83101: PPUSH
83102: CALL_OW 247
83106: PUSH
83107: LD_INT 2
83109: EQUAL
83110: PUSH
83111: LD_VAR 0 7
83115: AND
83116: PUSH
83117: LD_VAR 0 4
83121: PPUSH
83122: CALL_OW 264
83126: PUSH
83127: LD_VAR 0 10
83131: IN
83132: NOT
83133: AND
83134: IFFALSE 83173
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83136: LD_VAR 0 4
83140: PPUSH
83141: LD_VAR 0 7
83145: PUSH
83146: LD_INT 1
83148: ARRAY
83149: PUSH
83150: LD_INT 1
83152: ARRAY
83153: PPUSH
83154: LD_VAR 0 7
83158: PUSH
83159: LD_INT 1
83161: ARRAY
83162: PUSH
83163: LD_INT 2
83165: ARRAY
83166: PPUSH
83167: CALL_OW 116
83171: GO 83462
// if path > tag then
83173: LD_VAR 0 2
83177: PUSH
83178: LD_VAR 0 9
83182: GREATER
83183: IFFALSE 83391
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83185: LD_ADDR_VAR 0 6
83189: PUSH
83190: LD_VAR 0 5
83194: PPUSH
83195: LD_INT 91
83197: PUSH
83198: LD_VAR 0 4
83202: PUSH
83203: LD_INT 8
83205: PUSH
83206: EMPTY
83207: LIST
83208: LIST
83209: LIST
83210: PPUSH
83211: CALL_OW 72
83215: ST_TO_ADDR
// if nearEnemy then
83216: LD_VAR 0 6
83220: IFFALSE 83289
// begin if GetWeapon ( i ) = ru_time_lapser then
83222: LD_VAR 0 4
83226: PPUSH
83227: CALL_OW 264
83231: PUSH
83232: LD_INT 49
83234: EQUAL
83235: IFFALSE 83263
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83237: LD_VAR 0 4
83241: PPUSH
83242: LD_VAR 0 6
83246: PPUSH
83247: LD_VAR 0 4
83251: PPUSH
83252: CALL_OW 74
83256: PPUSH
83257: CALL_OW 112
83261: GO 83287
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83263: LD_VAR 0 4
83267: PPUSH
83268: LD_VAR 0 6
83272: PPUSH
83273: LD_VAR 0 4
83277: PPUSH
83278: CALL_OW 74
83282: PPUSH
83283: CALL 84391 0 2
// end else
83287: GO 83389
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83289: LD_VAR 0 4
83293: PPUSH
83294: LD_VAR 0 2
83298: PUSH
83299: LD_VAR 0 9
83303: ARRAY
83304: PUSH
83305: LD_INT 1
83307: ARRAY
83308: PPUSH
83309: LD_VAR 0 2
83313: PUSH
83314: LD_VAR 0 9
83318: ARRAY
83319: PUSH
83320: LD_INT 2
83322: ARRAY
83323: PPUSH
83324: CALL_OW 297
83328: PUSH
83329: LD_INT 6
83331: GREATER
83332: IFFALSE 83375
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83334: LD_VAR 0 4
83338: PPUSH
83339: LD_VAR 0 2
83343: PUSH
83344: LD_VAR 0 9
83348: ARRAY
83349: PUSH
83350: LD_INT 1
83352: ARRAY
83353: PPUSH
83354: LD_VAR 0 2
83358: PUSH
83359: LD_VAR 0 9
83363: ARRAY
83364: PUSH
83365: LD_INT 2
83367: ARRAY
83368: PPUSH
83369: CALL_OW 114
83373: GO 83389
// SetTag ( i , tag ) ;
83375: LD_VAR 0 4
83379: PPUSH
83380: LD_VAR 0 9
83384: PPUSH
83385: CALL_OW 109
// end else
83389: GO 83462
// if enemy then
83391: LD_VAR 0 5
83395: IFFALSE 83462
// begin if GetWeapon ( i ) = ru_time_lapser then
83397: LD_VAR 0 4
83401: PPUSH
83402: CALL_OW 264
83406: PUSH
83407: LD_INT 49
83409: EQUAL
83410: IFFALSE 83438
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83412: LD_VAR 0 4
83416: PPUSH
83417: LD_VAR 0 5
83421: PPUSH
83422: LD_VAR 0 4
83426: PPUSH
83427: CALL_OW 74
83431: PPUSH
83432: CALL_OW 112
83436: GO 83462
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83438: LD_VAR 0 4
83442: PPUSH
83443: LD_VAR 0 5
83447: PPUSH
83448: LD_VAR 0 4
83452: PPUSH
83453: CALL_OW 74
83457: PPUSH
83458: CALL 84391 0 2
// end ; end ;
83462: GO 83042
83464: POP
83465: POP
// end ;
83466: LD_VAR 0 3
83470: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83471: LD_INT 0
83473: PPUSH
83474: PPUSH
83475: PPUSH
// if not unit or IsInUnit ( unit ) then
83476: LD_VAR 0 1
83480: NOT
83481: PUSH
83482: LD_VAR 0 1
83486: PPUSH
83487: CALL_OW 310
83491: OR
83492: IFFALSE 83496
// exit ;
83494: GO 83587
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83496: LD_ADDR_VAR 0 4
83500: PUSH
83501: LD_VAR 0 1
83505: PPUSH
83506: CALL_OW 250
83510: PPUSH
83511: LD_VAR 0 2
83515: PPUSH
83516: LD_INT 1
83518: PPUSH
83519: CALL_OW 272
83523: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83524: LD_ADDR_VAR 0 5
83528: PUSH
83529: LD_VAR 0 1
83533: PPUSH
83534: CALL_OW 251
83538: PPUSH
83539: LD_VAR 0 2
83543: PPUSH
83544: LD_INT 1
83546: PPUSH
83547: CALL_OW 273
83551: ST_TO_ADDR
// if ValidHex ( x , y ) then
83552: LD_VAR 0 4
83556: PPUSH
83557: LD_VAR 0 5
83561: PPUSH
83562: CALL_OW 488
83566: IFFALSE 83587
// ComTurnXY ( unit , x , y ) ;
83568: LD_VAR 0 1
83572: PPUSH
83573: LD_VAR 0 4
83577: PPUSH
83578: LD_VAR 0 5
83582: PPUSH
83583: CALL_OW 118
// end ;
83587: LD_VAR 0 3
83591: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83592: LD_INT 0
83594: PPUSH
83595: PPUSH
// result := false ;
83596: LD_ADDR_VAR 0 3
83600: PUSH
83601: LD_INT 0
83603: ST_TO_ADDR
// if not units then
83604: LD_VAR 0 2
83608: NOT
83609: IFFALSE 83613
// exit ;
83611: GO 83658
// for i in units do
83613: LD_ADDR_VAR 0 4
83617: PUSH
83618: LD_VAR 0 2
83622: PUSH
83623: FOR_IN
83624: IFFALSE 83656
// if See ( side , i ) then
83626: LD_VAR 0 1
83630: PPUSH
83631: LD_VAR 0 4
83635: PPUSH
83636: CALL_OW 292
83640: IFFALSE 83654
// begin result := true ;
83642: LD_ADDR_VAR 0 3
83646: PUSH
83647: LD_INT 1
83649: ST_TO_ADDR
// exit ;
83650: POP
83651: POP
83652: GO 83658
// end ;
83654: GO 83623
83656: POP
83657: POP
// end ;
83658: LD_VAR 0 3
83662: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83663: LD_INT 0
83665: PPUSH
83666: PPUSH
83667: PPUSH
83668: PPUSH
// if not unit or not points then
83669: LD_VAR 0 1
83673: NOT
83674: PUSH
83675: LD_VAR 0 2
83679: NOT
83680: OR
83681: IFFALSE 83685
// exit ;
83683: GO 83775
// dist := 99999 ;
83685: LD_ADDR_VAR 0 5
83689: PUSH
83690: LD_INT 99999
83692: ST_TO_ADDR
// for i in points do
83693: LD_ADDR_VAR 0 4
83697: PUSH
83698: LD_VAR 0 2
83702: PUSH
83703: FOR_IN
83704: IFFALSE 83773
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83706: LD_ADDR_VAR 0 6
83710: PUSH
83711: LD_VAR 0 1
83715: PPUSH
83716: LD_VAR 0 4
83720: PUSH
83721: LD_INT 1
83723: ARRAY
83724: PPUSH
83725: LD_VAR 0 4
83729: PUSH
83730: LD_INT 2
83732: ARRAY
83733: PPUSH
83734: CALL_OW 297
83738: ST_TO_ADDR
// if tmpDist < dist then
83739: LD_VAR 0 6
83743: PUSH
83744: LD_VAR 0 5
83748: LESS
83749: IFFALSE 83771
// begin result := i ;
83751: LD_ADDR_VAR 0 3
83755: PUSH
83756: LD_VAR 0 4
83760: ST_TO_ADDR
// dist := tmpDist ;
83761: LD_ADDR_VAR 0 5
83765: PUSH
83766: LD_VAR 0 6
83770: ST_TO_ADDR
// end ; end ;
83771: GO 83703
83773: POP
83774: POP
// end ;
83775: LD_VAR 0 3
83779: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83780: LD_INT 0
83782: PPUSH
// uc_side := side ;
83783: LD_ADDR_OWVAR 20
83787: PUSH
83788: LD_VAR 0 1
83792: ST_TO_ADDR
// uc_nation := 3 ;
83793: LD_ADDR_OWVAR 21
83797: PUSH
83798: LD_INT 3
83800: ST_TO_ADDR
// vc_chassis := 25 ;
83801: LD_ADDR_OWVAR 37
83805: PUSH
83806: LD_INT 25
83808: ST_TO_ADDR
// vc_engine := engine_siberite ;
83809: LD_ADDR_OWVAR 39
83813: PUSH
83814: LD_INT 3
83816: ST_TO_ADDR
// vc_control := control_computer ;
83817: LD_ADDR_OWVAR 38
83821: PUSH
83822: LD_INT 3
83824: ST_TO_ADDR
// vc_weapon := 59 ;
83825: LD_ADDR_OWVAR 40
83829: PUSH
83830: LD_INT 59
83832: ST_TO_ADDR
// result := CreateVehicle ;
83833: LD_ADDR_VAR 0 5
83837: PUSH
83838: CALL_OW 45
83842: ST_TO_ADDR
// SetDir ( result , d ) ;
83843: LD_VAR 0 5
83847: PPUSH
83848: LD_VAR 0 4
83852: PPUSH
83853: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83857: LD_VAR 0 5
83861: PPUSH
83862: LD_VAR 0 2
83866: PPUSH
83867: LD_VAR 0 3
83871: PPUSH
83872: LD_INT 0
83874: PPUSH
83875: CALL_OW 48
// end ;
83879: LD_VAR 0 5
83883: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83884: LD_INT 0
83886: PPUSH
83887: PPUSH
83888: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83889: LD_ADDR_VAR 0 2
83893: PUSH
83894: LD_INT 0
83896: PUSH
83897: LD_INT 0
83899: PUSH
83900: LD_INT 0
83902: PUSH
83903: LD_INT 0
83905: PUSH
83906: EMPTY
83907: LIST
83908: LIST
83909: LIST
83910: LIST
83911: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83912: LD_VAR 0 1
83916: NOT
83917: PUSH
83918: LD_VAR 0 1
83922: PPUSH
83923: CALL_OW 264
83927: PUSH
83928: LD_INT 12
83930: PUSH
83931: LD_INT 51
83933: PUSH
83934: LD_INT 32
83936: PUSH
83937: LD_INT 89
83939: PUSH
83940: EMPTY
83941: LIST
83942: LIST
83943: LIST
83944: LIST
83945: IN
83946: NOT
83947: OR
83948: IFFALSE 83952
// exit ;
83950: GO 84050
// for i := 1 to 3 do
83952: LD_ADDR_VAR 0 3
83956: PUSH
83957: DOUBLE
83958: LD_INT 1
83960: DEC
83961: ST_TO_ADDR
83962: LD_INT 3
83964: PUSH
83965: FOR_TO
83966: IFFALSE 84048
// begin tmp := GetCargo ( cargo , i ) ;
83968: LD_ADDR_VAR 0 4
83972: PUSH
83973: LD_VAR 0 1
83977: PPUSH
83978: LD_VAR 0 3
83982: PPUSH
83983: CALL_OW 289
83987: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83988: LD_ADDR_VAR 0 2
83992: PUSH
83993: LD_VAR 0 2
83997: PPUSH
83998: LD_VAR 0 3
84002: PPUSH
84003: LD_VAR 0 4
84007: PPUSH
84008: CALL_OW 1
84012: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84013: LD_ADDR_VAR 0 2
84017: PUSH
84018: LD_VAR 0 2
84022: PPUSH
84023: LD_INT 4
84025: PPUSH
84026: LD_VAR 0 2
84030: PUSH
84031: LD_INT 4
84033: ARRAY
84034: PUSH
84035: LD_VAR 0 4
84039: PLUS
84040: PPUSH
84041: CALL_OW 1
84045: ST_TO_ADDR
// end ;
84046: GO 83965
84048: POP
84049: POP
// end ;
84050: LD_VAR 0 2
84054: RET
// export function Length ( array ) ; begin
84055: LD_INT 0
84057: PPUSH
// result := array + 0 ;
84058: LD_ADDR_VAR 0 2
84062: PUSH
84063: LD_VAR 0 1
84067: PUSH
84068: LD_INT 0
84070: PLUS
84071: ST_TO_ADDR
// end ;
84072: LD_VAR 0 2
84076: RET
// export function PrepareArray ( array ) ; begin
84077: LD_INT 0
84079: PPUSH
// result := array diff 0 ;
84080: LD_ADDR_VAR 0 2
84084: PUSH
84085: LD_VAR 0 1
84089: PUSH
84090: LD_INT 0
84092: DIFF
84093: ST_TO_ADDR
// if not result [ 1 ] then
84094: LD_VAR 0 2
84098: PUSH
84099: LD_INT 1
84101: ARRAY
84102: NOT
84103: IFFALSE 84123
// result := Delete ( result , 1 ) ;
84105: LD_ADDR_VAR 0 2
84109: PUSH
84110: LD_VAR 0 2
84114: PPUSH
84115: LD_INT 1
84117: PPUSH
84118: CALL_OW 3
84122: ST_TO_ADDR
// end ;
84123: LD_VAR 0 2
84127: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84128: LD_INT 0
84130: PPUSH
84131: PPUSH
84132: PPUSH
84133: PPUSH
// sibRocketRange := 25 ;
84134: LD_ADDR_VAR 0 6
84138: PUSH
84139: LD_INT 25
84141: ST_TO_ADDR
// result := false ;
84142: LD_ADDR_VAR 0 4
84146: PUSH
84147: LD_INT 0
84149: ST_TO_ADDR
// for i := 0 to 5 do
84150: LD_ADDR_VAR 0 5
84154: PUSH
84155: DOUBLE
84156: LD_INT 0
84158: DEC
84159: ST_TO_ADDR
84160: LD_INT 5
84162: PUSH
84163: FOR_TO
84164: IFFALSE 84231
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84166: LD_VAR 0 1
84170: PPUSH
84171: LD_VAR 0 5
84175: PPUSH
84176: LD_VAR 0 6
84180: PPUSH
84181: CALL_OW 272
84185: PPUSH
84186: LD_VAR 0 2
84190: PPUSH
84191: LD_VAR 0 5
84195: PPUSH
84196: LD_VAR 0 6
84200: PPUSH
84201: CALL_OW 273
84205: PPUSH
84206: LD_VAR 0 3
84210: PPUSH
84211: CALL_OW 309
84215: IFFALSE 84229
// begin result := true ;
84217: LD_ADDR_VAR 0 4
84221: PUSH
84222: LD_INT 1
84224: ST_TO_ADDR
// exit ;
84225: POP
84226: POP
84227: GO 84233
// end ;
84229: GO 84163
84231: POP
84232: POP
// end ;
84233: LD_VAR 0 4
84237: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84238: LD_INT 0
84240: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84241: LD_VAR 0 1
84245: PPUSH
84246: LD_VAR 0 2
84250: PPUSH
84251: LD_INT 0
84253: PPUSH
84254: LD_INT 0
84256: PPUSH
84257: LD_INT 1
84259: PPUSH
84260: LD_INT 0
84262: PPUSH
84263: CALL_OW 587
// end ;
84267: LD_VAR 0 3
84271: RET
// export function CenterOnNow ( unit ) ; begin
84272: LD_INT 0
84274: PPUSH
// result := IsInUnit ( unit ) ;
84275: LD_ADDR_VAR 0 2
84279: PUSH
84280: LD_VAR 0 1
84284: PPUSH
84285: CALL_OW 310
84289: ST_TO_ADDR
// if not result then
84290: LD_VAR 0 2
84294: NOT
84295: IFFALSE 84307
// result := unit ;
84297: LD_ADDR_VAR 0 2
84301: PUSH
84302: LD_VAR 0 1
84306: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84307: LD_VAR 0 1
84311: PPUSH
84312: CALL_OW 87
// end ;
84316: LD_VAR 0 2
84320: RET
// export function ComMoveHex ( unit , hex ) ; begin
84321: LD_INT 0
84323: PPUSH
// if not hex then
84324: LD_VAR 0 2
84328: NOT
84329: IFFALSE 84333
// exit ;
84331: GO 84386
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84333: LD_VAR 0 2
84337: PUSH
84338: LD_INT 1
84340: ARRAY
84341: PPUSH
84342: LD_VAR 0 2
84346: PUSH
84347: LD_INT 2
84349: ARRAY
84350: PPUSH
84351: CALL_OW 428
84355: IFFALSE 84359
// exit ;
84357: GO 84386
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84359: LD_VAR 0 1
84363: PPUSH
84364: LD_VAR 0 2
84368: PUSH
84369: LD_INT 1
84371: ARRAY
84372: PPUSH
84373: LD_VAR 0 2
84377: PUSH
84378: LD_INT 2
84380: ARRAY
84381: PPUSH
84382: CALL_OW 111
// end ;
84386: LD_VAR 0 3
84390: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84391: LD_INT 0
84393: PPUSH
84394: PPUSH
84395: PPUSH
// if not unit or not enemy then
84396: LD_VAR 0 1
84400: NOT
84401: PUSH
84402: LD_VAR 0 2
84406: NOT
84407: OR
84408: IFFALSE 84412
// exit ;
84410: GO 84536
// x := GetX ( enemy ) ;
84412: LD_ADDR_VAR 0 4
84416: PUSH
84417: LD_VAR 0 2
84421: PPUSH
84422: CALL_OW 250
84426: ST_TO_ADDR
// y := GetY ( enemy ) ;
84427: LD_ADDR_VAR 0 5
84431: PUSH
84432: LD_VAR 0 2
84436: PPUSH
84437: CALL_OW 251
84441: ST_TO_ADDR
// if ValidHex ( x , y ) then
84442: LD_VAR 0 4
84446: PPUSH
84447: LD_VAR 0 5
84451: PPUSH
84452: CALL_OW 488
84456: IFFALSE 84536
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
84458: LD_VAR 0 2
84462: PPUSH
84463: CALL_OW 247
84467: PUSH
84468: LD_INT 3
84470: PUSH
84471: LD_INT 2
84473: PUSH
84474: EMPTY
84475: LIST
84476: LIST
84477: IN
84478: PUSH
84479: LD_VAR 0 1
84483: PPUSH
84484: CALL_OW 255
84488: PPUSH
84489: LD_VAR 0 2
84493: PPUSH
84494: CALL_OW 292
84498: AND
84499: IFFALSE 84517
// ComAttackUnit ( unit , enemy ) else
84501: LD_VAR 0 1
84505: PPUSH
84506: LD_VAR 0 2
84510: PPUSH
84511: CALL_OW 115
84515: GO 84536
// ComAgressiveMove ( unit , x , y ) ;
84517: LD_VAR 0 1
84521: PPUSH
84522: LD_VAR 0 4
84526: PPUSH
84527: LD_VAR 0 5
84531: PPUSH
84532: CALL_OW 114
// end ;
84536: LD_VAR 0 3
84540: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84541: LD_INT 0
84543: PPUSH
84544: PPUSH
84545: PPUSH
// list := AreaToList ( area , 0 ) ;
84546: LD_ADDR_VAR 0 5
84550: PUSH
84551: LD_VAR 0 1
84555: PPUSH
84556: LD_INT 0
84558: PPUSH
84559: CALL_OW 517
84563: ST_TO_ADDR
// if not list then
84564: LD_VAR 0 5
84568: NOT
84569: IFFALSE 84573
// exit ;
84571: GO 84703
// if all then
84573: LD_VAR 0 2
84577: IFFALSE 84665
// begin for i := 1 to list [ 1 ] do
84579: LD_ADDR_VAR 0 4
84583: PUSH
84584: DOUBLE
84585: LD_INT 1
84587: DEC
84588: ST_TO_ADDR
84589: LD_VAR 0 5
84593: PUSH
84594: LD_INT 1
84596: ARRAY
84597: PUSH
84598: FOR_TO
84599: IFFALSE 84661
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84601: LD_ADDR_VAR 0 3
84605: PUSH
84606: LD_VAR 0 3
84610: PPUSH
84611: LD_VAR 0 3
84615: PUSH
84616: LD_INT 1
84618: PLUS
84619: PPUSH
84620: LD_VAR 0 5
84624: PUSH
84625: LD_INT 1
84627: ARRAY
84628: PUSH
84629: LD_VAR 0 4
84633: ARRAY
84634: PUSH
84635: LD_VAR 0 5
84639: PUSH
84640: LD_INT 2
84642: ARRAY
84643: PUSH
84644: LD_VAR 0 4
84648: ARRAY
84649: PUSH
84650: EMPTY
84651: LIST
84652: LIST
84653: PPUSH
84654: CALL_OW 1
84658: ST_TO_ADDR
84659: GO 84598
84661: POP
84662: POP
// exit ;
84663: GO 84703
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84665: LD_ADDR_VAR 0 3
84669: PUSH
84670: LD_VAR 0 5
84674: PUSH
84675: LD_INT 1
84677: ARRAY
84678: PUSH
84679: LD_INT 1
84681: ARRAY
84682: PUSH
84683: LD_VAR 0 5
84687: PUSH
84688: LD_INT 2
84690: ARRAY
84691: PUSH
84692: LD_INT 1
84694: ARRAY
84695: PUSH
84696: EMPTY
84697: LIST
84698: LIST
84699: PUSH
84700: EMPTY
84701: LIST
84702: ST_TO_ADDR
// end ;
84703: LD_VAR 0 3
84707: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84708: LD_INT 0
84710: PPUSH
84711: PPUSH
// list := AreaToList ( area , 0 ) ;
84712: LD_ADDR_VAR 0 4
84716: PUSH
84717: LD_VAR 0 1
84721: PPUSH
84722: LD_INT 0
84724: PPUSH
84725: CALL_OW 517
84729: ST_TO_ADDR
// if not list then
84730: LD_VAR 0 4
84734: NOT
84735: IFFALSE 84739
// exit ;
84737: GO 84780
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84739: LD_ADDR_VAR 0 3
84743: PUSH
84744: LD_VAR 0 4
84748: PUSH
84749: LD_INT 1
84751: ARRAY
84752: PUSH
84753: LD_INT 1
84755: ARRAY
84756: PUSH
84757: LD_VAR 0 4
84761: PUSH
84762: LD_INT 2
84764: ARRAY
84765: PUSH
84766: LD_INT 1
84768: ARRAY
84769: PUSH
84770: LD_VAR 0 2
84774: PUSH
84775: EMPTY
84776: LIST
84777: LIST
84778: LIST
84779: ST_TO_ADDR
// end ;
84780: LD_VAR 0 3
84784: RET
// export function First ( array ) ; begin
84785: LD_INT 0
84787: PPUSH
// if not array then
84788: LD_VAR 0 1
84792: NOT
84793: IFFALSE 84797
// exit ;
84795: GO 84811
// result := array [ 1 ] ;
84797: LD_ADDR_VAR 0 2
84801: PUSH
84802: LD_VAR 0 1
84806: PUSH
84807: LD_INT 1
84809: ARRAY
84810: ST_TO_ADDR
// end ;
84811: LD_VAR 0 2
84815: RET
// export function Last ( array ) ; begin
84816: LD_INT 0
84818: PPUSH
// if not array then
84819: LD_VAR 0 1
84823: NOT
84824: IFFALSE 84828
// exit ;
84826: GO 84844
// result := array [ array ] ;
84828: LD_ADDR_VAR 0 2
84832: PUSH
84833: LD_VAR 0 1
84837: PUSH
84838: LD_VAR 0 1
84842: ARRAY
84843: ST_TO_ADDR
// end ; end_of_file
84844: LD_VAR 0 2
84848: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84849: LD_VAR 0 1
84853: PUSH
84854: LD_INT 200
84856: DOUBLE
84857: GREATEREQUAL
84858: IFFALSE 84866
84860: LD_INT 299
84862: DOUBLE
84863: LESSEQUAL
84864: IFTRUE 84868
84866: GO 84900
84868: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84869: LD_VAR 0 1
84873: PPUSH
84874: LD_VAR 0 2
84878: PPUSH
84879: LD_VAR 0 3
84883: PPUSH
84884: LD_VAR 0 4
84888: PPUSH
84889: LD_VAR 0 5
84893: PPUSH
84894: CALL 38099 0 5
84898: GO 84977
84900: LD_INT 300
84902: DOUBLE
84903: GREATEREQUAL
84904: IFFALSE 84912
84906: LD_INT 399
84908: DOUBLE
84909: LESSEQUAL
84910: IFTRUE 84914
84912: GO 84976
84914: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84915: LD_VAR 0 1
84919: PPUSH
84920: LD_VAR 0 2
84924: PPUSH
84925: LD_VAR 0 3
84929: PPUSH
84930: LD_VAR 0 4
84934: PPUSH
84935: LD_VAR 0 5
84939: PPUSH
84940: LD_VAR 0 6
84944: PPUSH
84945: LD_VAR 0 7
84949: PPUSH
84950: LD_VAR 0 8
84954: PPUSH
84955: LD_VAR 0 9
84959: PPUSH
84960: LD_VAR 0 10
84964: PPUSH
84965: LD_VAR 0 11
84969: PPUSH
84970: CALL 34424 0 11
84974: GO 84977
84976: POP
// end ;
84977: PPOPN 11
84979: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84980: LD_VAR 0 1
84984: PPUSH
84985: LD_VAR 0 2
84989: PPUSH
84990: LD_VAR 0 3
84994: PPUSH
84995: LD_VAR 0 4
84999: PPUSH
85000: LD_VAR 0 5
85004: PPUSH
85005: CALL 37835 0 5
// end ; end_of_file
85009: PPOPN 5
85011: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85012: LD_VAR 0 1
85016: PPUSH
85017: LD_VAR 0 2
85021: PPUSH
85022: LD_VAR 0 3
85026: PPUSH
85027: LD_VAR 0 4
85031: PPUSH
85032: LD_VAR 0 5
85036: PPUSH
85037: LD_VAR 0 6
85041: PPUSH
85042: CALL 22076 0 6
// end ;
85046: PPOPN 6
85048: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85049: LD_INT 0
85051: PPUSH
// begin if not units then
85052: LD_VAR 0 1
85056: NOT
85057: IFFALSE 85061
// exit ;
85059: GO 85061
// end ;
85061: PPOPN 7
85063: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85064: CALL 21980 0 0
// end ;
85068: PPOPN 1
85070: END
