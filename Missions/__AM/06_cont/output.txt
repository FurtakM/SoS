// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6570 0 0
// PrepareNature ;
 290: CALL 23817 0 0
// PrepareRussian ;
 294: CALL 5730 0 0
// PrepareVehicles ;
 298: CALL 1586 0 0
// PrepareHeroes ;
 302: CALL 594 0 0
// PrepareOthers ;
 306: CALL 2007 0 0
// PreparePlayerApemans ;
 310: CALL 2149 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode do var i ;
 315: LD_EXP 42
 319: IFFALSE 546
 321: GO 323
 323: DISABLE
 324: LD_INT 0
 326: PPUSH
// begin enable ;
 327: ENABLE
// fogoff ( true ) ;
 328: LD_INT 1
 330: PPUSH
 331: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 21
 352: PUSH
 353: LD_INT 1
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 386
// SetLives ( i , 1000 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: LD_INT 1000
 379: PPUSH
 380: CALL_OW 234
 384: GO 369
 386: POP
 387: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 388: LD_ADDR_VAR 0 1
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 30
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: PUSH
 422: FOR_IN
 423: IFFALSE 447
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 425: LD_VAR 0 1
 429: PPUSH
 430: CALL_OW 274
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: LD_INT 9999
 440: PPUSH
 441: CALL_OW 277
 445: GO 422
 447: POP
 448: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 449: LD_ADDR_VAR 0 1
 453: PUSH
 454: LD_INT 22
 456: PUSH
 457: LD_INT 1
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// if IsSelected ( rudepo ) then
 510: LD_INT 2
 512: PPUSH
 513: CALL_OW 306
 517: IFFALSE 527
// your_side = 3 ;
 519: LD_ADDR_OWVAR 2
 523: PUSH
 524: LD_INT 3
 526: ST_TO_ADDR
// if IsSelected ( JMM ) then
 527: LD_EXP 1
 531: PPUSH
 532: CALL_OW 306
 536: IFFALSE 546
// your_side = 1 ;
 538: LD_ADDR_OWVAR 2
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// end ;
 546: PPOPN 1
 548: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 34
 561: PUSH
 562: LD_INT 12
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: LD_INT 3
 580: GREATEREQUAL
 581: IFFALSE 593
 583: GO 585
 585: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 586: LD_STRING ACH_FULLCARGO
 588: PPUSH
 589: CALL_OW 543
 593: END
// export function PrepareHeroes ; var veh ; begin
 594: LD_INT 0
 596: PPUSH
 597: PPUSH
// uc_side = 1 ;
 598: LD_ADDR_OWVAR 20
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// uc_nation = 1 ;
 606: LD_ADDR_OWVAR 21
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 614: LD_ADDR_EXP 1
 618: PUSH
 619: LD_STRING JMM
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: CALL 6132 0 2
 629: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 630: LD_ADDR_EXP 14
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL 6132 0 2
 645: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 646: LD_ADDR_EXP 10
 650: PUSH
 651: LD_STRING DeltaDoctor
 653: PPUSH
 654: CALL_OW 34
 658: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 659: LD_ADDR_VAR 0 2
 663: PUSH
 664: LD_INT 22
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 58
 686: PUSH
 687: EMPTY
 688: LIST
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: PPUSH
 695: CALL_OW 69
 699: ST_TO_ADDR
// if veh > 0 then
 700: LD_VAR 0 2
 704: PUSH
 705: LD_INT 0
 707: GREATER
 708: IFFALSE 730
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 710: LD_EXP 1
 714: PPUSH
 715: LD_VAR 0 2
 719: PUSH
 720: LD_INT 1
 722: ARRAY
 723: PPUSH
 724: CALL_OW 52
// end else
 728: GO 745
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 730: LD_EXP 1
 734: PPUSH
 735: LD_INT 2
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 745: LD_STRING LisaIn06
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 30
 755: PUSH
 756: LD_INT 1
 758: EQUAL
 759: IFFALSE 863
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 761: LD_ADDR_VAR 0 2
 765: PUSH
 766: LD_INT 22
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 21
 778: PUSH
 779: LD_INT 2
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: PUSH
 786: LD_INT 58
 788: PUSH
 789: EMPTY
 790: LIST
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 802: LD_ADDR_EXP 2
 806: PUSH
 807: LD_STRING Lisa
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL 6132 0 2
 817: ST_TO_ADDR
// if veh > 0 then
 818: LD_VAR 0 2
 822: PUSH
 823: LD_INT 0
 825: GREATER
 826: IFFALSE 848
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 828: LD_EXP 2
 832: PPUSH
 833: LD_VAR 0 2
 837: PUSH
 838: LD_INT 1
 840: ARRAY
 841: PPUSH
 842: CALL_OW 52
// end else
 846: GO 863
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 848: LD_EXP 2
 852: PPUSH
 853: LD_INT 2
 855: PPUSH
 856: LD_INT 0
 858: PPUSH
 859: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 863: LD_STRING BobbyIn06
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 30
 873: PUSH
 874: LD_INT 1
 876: EQUAL
 877: IFFALSE 981
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_INT 22
 886: PUSH
 887: LD_INT 1
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 21
 896: PUSH
 897: LD_INT 2
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 58
 906: PUSH
 907: EMPTY
 908: LIST
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 920: LD_ADDR_EXP 3
 924: PUSH
 925: LD_STRING Bobby
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: CALL 6132 0 2
 935: ST_TO_ADDR
// if veh > 0 then
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 0
 943: GREATER
 944: IFFALSE 966
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 946: LD_EXP 3
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: CALL_OW 52
// end else
 964: GO 981
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 966: LD_EXP 3
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 981: LD_STRING CyrusIn06
 983: PPUSH
 984: LD_INT 0
 986: PPUSH
 987: CALL_OW 30
 991: PUSH
 992: LD_INT 1
 994: EQUAL
 995: IFFALSE 1099
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: LD_INT 22
1004: PUSH
1005: LD_INT 1
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: LD_INT 21
1014: PUSH
1015: LD_INT 2
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PUSH
1022: LD_INT 58
1024: PUSH
1025: EMPTY
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 69
1037: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
1038: LD_ADDR_EXP 4
1042: PUSH
1043: LD_STRING Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6132 0 2
1053: ST_TO_ADDR
// if veh > 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 0
1061: GREATER
1062: IFFALSE 1084
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1064: LD_EXP 4
1068: PPUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: CALL_OW 52
// end else
1082: GO 1099
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1084: LD_EXP 4
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_INT 0
1094: PPUSH
1095: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1099: LD_STRING FrankIn06
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 30
1109: PUSH
1110: LD_INT 1
1112: EQUAL
1113: IFFALSE 1217
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1115: LD_ADDR_VAR 0 2
1119: PUSH
1120: LD_INT 22
1122: PUSH
1123: LD_INT 1
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 21
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 58
1142: PUSH
1143: EMPTY
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 69
1155: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1156: LD_ADDR_EXP 5
1160: PUSH
1161: LD_STRING Frank
1163: PPUSH
1164: LD_INT 1
1166: PPUSH
1167: CALL 6132 0 2
1171: ST_TO_ADDR
// if veh > 0 then
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 0
1179: GREATER
1180: IFFALSE 1202
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1182: LD_EXP 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PPUSH
1196: CALL_OW 52
// end else
1200: GO 1217
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1202: LD_EXP 5
1206: PPUSH
1207: LD_INT 2
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1217: LD_STRING BrownIn06
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: CALL_OW 30
1227: PUSH
1228: LD_INT 1
1230: EQUAL
1231: IFFALSE 1335
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 2
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 58
1260: PUSH
1261: EMPTY
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PPUSH
1269: CALL_OW 69
1273: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1274: LD_ADDR_EXP 6
1278: PUSH
1279: LD_STRING Brown
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL 6132 0 2
1289: ST_TO_ADDR
// if veh > 0 then
1290: LD_VAR 0 2
1294: PUSH
1295: LD_INT 0
1297: GREATER
1298: IFFALSE 1320
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1300: LD_EXP 6
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 52
// end else
1318: GO 1335
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1320: LD_EXP 6
1324: PPUSH
1325: LD_INT 2
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1335: LD_STRING DonaldsonIn06
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 30
1345: PUSH
1346: LD_INT 1
1348: EQUAL
1349: IFFALSE 1453
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1351: LD_ADDR_VAR 0 2
1355: PUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 21
1368: PUSH
1369: LD_INT 2
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 58
1378: PUSH
1379: EMPTY
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 69
1391: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1392: LD_ADDR_EXP 7
1396: PUSH
1397: LD_STRING Donaldson
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL 6132 0 2
1407: ST_TO_ADDR
// if veh > 0 then
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 0
1415: GREATER
1416: IFFALSE 1438
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1418: LD_EXP 7
1422: PPUSH
1423: LD_VAR 0 2
1427: PUSH
1428: LD_INT 1
1430: ARRAY
1431: PPUSH
1432: CALL_OW 52
// end else
1436: GO 1453
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1438: LD_EXP 7
1442: PPUSH
1443: LD_INT 2
1445: PPUSH
1446: LD_INT 0
1448: PPUSH
1449: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1453: LD_STRING GladstoneIn06
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 30
1463: PUSH
1464: LD_INT 1
1466: EQUAL
1467: IFFALSE 1571
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1469: LD_ADDR_VAR 0 2
1473: PUSH
1474: LD_INT 22
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 21
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 58
1496: PUSH
1497: EMPTY
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1510: LD_ADDR_EXP 8
1514: PUSH
1515: LD_STRING Gladstone
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: CALL 6132 0 2
1525: ST_TO_ADDR
// if veh > 0 then
1526: LD_VAR 0 2
1530: PUSH
1531: LD_INT 0
1533: GREATER
1534: IFFALSE 1556
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1536: LD_EXP 8
1540: PPUSH
1541: LD_VAR 0 2
1545: PUSH
1546: LD_INT 1
1548: ARRAY
1549: PPUSH
1550: CALL_OW 52
// end else
1554: GO 1571
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1556: LD_EXP 8
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 0
1566: PPUSH
1567: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1571: LD_INT 66
1573: PPUSH
1574: LD_INT 4
1576: PPUSH
1577: CALL_OW 86
// end ;
1581: LD_VAR 0 1
1585: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1594: LD_ADDR_VAR 0 5
1598: PUSH
1599: LD_STRING 06_VehiclesIn06_1
1601: PPUSH
1602: EMPTY
1603: PPUSH
1604: CALL_OW 30
1608: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1609: LD_ADDR_EXP 40
1613: PUSH
1614: LD_STRING 06_ResourcesInCargo06_1
1616: PPUSH
1617: EMPTY
1618: PPUSH
1619: CALL_OW 30
1623: ST_TO_ADDR
// cargoList = [ ] ;
1624: LD_ADDR_VAR 0 6
1628: PUSH
1629: EMPTY
1630: ST_TO_ADDR
// uc_side = 1 ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_INT 1
1638: ST_TO_ADDR
// if vehicles > 0 then
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 0
1646: GREATER
1647: IFFALSE 2002
// begin for i := 1 to vehicles do
1649: LD_ADDR_VAR 0 2
1653: PUSH
1654: DOUBLE
1655: LD_INT 1
1657: DEC
1658: ST_TO_ADDR
1659: LD_VAR 0 5
1663: PUSH
1664: FOR_TO
1665: IFFALSE 1814
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1667: LD_ADDR_OWVAR 21
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 1
1685: ARRAY
1686: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 2
1705: ARRAY
1706: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1707: LD_ADDR_OWVAR 39
1711: PUSH
1712: LD_VAR 0 5
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PUSH
1723: LD_INT 3
1725: ARRAY
1726: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1727: LD_ADDR_OWVAR 38
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: ARRAY
1742: PUSH
1743: LD_INT 4
1745: ARRAY
1746: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1747: LD_ADDR_OWVAR 40
1751: PUSH
1752: LD_VAR 0 5
1756: PUSH
1757: LD_VAR 0 2
1761: ARRAY
1762: PUSH
1763: LD_INT 5
1765: ARRAY
1766: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1767: LD_ADDR_OWVAR 41
1771: PUSH
1772: LD_INT 40
1774: ST_TO_ADDR
// veh = CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 3
1792: PPUSH
1793: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 4
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// end ;
1812: GO 1664
1814: POP
1815: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1816: LD_ADDR_VAR 0 6
1820: PUSH
1821: LD_INT 22
1823: PUSH
1824: LD_INT 1
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 21
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 34
1843: PUSH
1844: LD_INT 12
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: ST_TO_ADDR
// if cargoList > 0 then
1861: LD_VAR 0 6
1865: PUSH
1866: LD_INT 0
1868: GREATER
1869: IFFALSE 2002
// for i = 1 to cargoList do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_VAR 0 6
1885: PUSH
1886: FOR_TO
1887: IFFALSE 2000
// begin if resources > 0 then
1889: LD_EXP 40
1893: PUSH
1894: LD_INT 0
1896: GREATER
1897: IFFALSE 1998
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1899: LD_VAR 0 6
1903: PUSH
1904: LD_VAR 0 2
1908: ARRAY
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_EXP 40
1917: PUSH
1918: LD_VAR 0 2
1922: ARRAY
1923: PUSH
1924: LD_INT 1
1926: ARRAY
1927: PPUSH
1928: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1932: LD_VAR 0 6
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PPUSH
1943: LD_INT 2
1945: PPUSH
1946: LD_EXP 40
1950: PUSH
1951: LD_VAR 0 2
1955: ARRAY
1956: PUSH
1957: LD_INT 2
1959: ARRAY
1960: PPUSH
1961: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1965: LD_VAR 0 6
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: LD_EXP 40
1983: PUSH
1984: LD_VAR 0 2
1988: ARRAY
1989: PUSH
1990: LD_INT 3
1992: ARRAY
1993: PPUSH
1994: CALL_OW 291
// end ; end ;
1998: GO 1886
2000: POP
2001: POP
// end ; end ;
2002: LD_VAR 0 1
2006: RET
// export function PrepareOthers ; var i , veh ; begin
2007: LD_INT 0
2009: PPUSH
2010: PPUSH
2011: PPUSH
// uc_side = 1 ;
2012: LD_ADDR_OWVAR 20
2016: PUSH
2017: LD_INT 1
2019: ST_TO_ADDR
// uc_nation = 1 ;
2020: LD_ADDR_OWVAR 21
2024: PUSH
2025: LD_INT 1
2027: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2028: LD_ADDR_EXP 11
2032: PUSH
2033: LD_STRING OthersIn06
2035: PPUSH
2036: CALL_OW 31
2040: ST_TO_ADDR
// for i in others do
2041: LD_ADDR_VAR 0 2
2045: PUSH
2046: LD_EXP 11
2050: PUSH
2051: FOR_IN
2052: IFFALSE 2142
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2054: LD_ADDR_VAR 0 3
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 58
2081: PUSH
2082: EMPTY
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: ST_TO_ADDR
// if veh > 0 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 0
2102: GREATER
2103: IFFALSE 2125
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 52
// end else
2123: GO 2140
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2125: LD_VAR 0 2
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL_OW 49
// end ; end ;
2140: GO 2051
2142: POP
2143: POP
// end ;
2144: LD_VAR 0 1
2148: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
2153: PPUSH
// uc_side = 1 ;
2154: LD_ADDR_OWVAR 20
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// uc_nation = 0 ;
2162: LD_ADDR_OWVAR 21
2166: PUSH
2167: LD_INT 0
2169: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2170: LD_ADDR_EXP 12
2174: PUSH
2175: LD_STRING ApeIn06
2177: PPUSH
2178: CALL_OW 31
2182: ST_TO_ADDR
// for i in ape do
2183: LD_ADDR_VAR 0 2
2187: PUSH
2188: LD_EXP 12
2192: PUSH
2193: FOR_IN
2194: IFFALSE 2213
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2196: LD_VAR 0 2
2200: PPUSH
2201: LD_INT 2
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL_OW 49
2211: GO 2193
2213: POP
2214: POP
// end ;
2215: LD_VAR 0 1
2219: RET
// export function PrepareDenis ; var xy , i ; begin
2220: LD_INT 0
2222: PPUSH
2223: PPUSH
2224: PPUSH
// uc_side = 4 ;
2225: LD_ADDR_OWVAR 20
2229: PUSH
2230: LD_INT 4
2232: ST_TO_ADDR
// uc_nation = 1 ;
2233: LD_ADDR_OWVAR 21
2237: PUSH
2238: LD_INT 1
2240: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_INT 63
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 70
2258: PUSH
2259: LD_INT 1
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 83
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 16
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 27
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 38
2298: PUSH
2299: LD_INT 1
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 5
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 54
2318: PUSH
2319: LD_INT 1
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2336: LD_ADDR_EXP 9
2340: PUSH
2341: LD_STRING Denis
2343: PPUSH
2344: LD_INT 1
2346: PPUSH
2347: CALL 6132 0 2
2351: ST_TO_ADDR
// for i = 1 to xy do
2352: LD_ADDR_VAR 0 3
2356: PUSH
2357: DOUBLE
2358: LD_INT 1
2360: DEC
2361: ST_TO_ADDR
2362: LD_VAR 0 2
2366: PUSH
2367: FOR_TO
2368: IFFALSE 2467
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2370: LD_VAR 0 2
2374: PUSH
2375: LD_VAR 0 3
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_VAR 0 3
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: CALL_OW 428
2404: PUSH
2405: LD_INT 0
2407: EQUAL
2408: IFFALSE 2465
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2410: LD_EXP 9
2414: PPUSH
2415: LD_VAR 0 2
2419: PUSH
2420: LD_VAR 0 3
2424: ARRAY
2425: PUSH
2426: LD_INT 1
2428: ARRAY
2429: PPUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_VAR 0 3
2439: ARRAY
2440: PUSH
2441: LD_INT 2
2443: ARRAY
2444: PPUSH
2445: LD_INT 0
2447: PPUSH
2448: CALL_OW 48
// if IsPlaced ( Denis ) then
2452: LD_EXP 9
2456: PPUSH
2457: CALL_OW 305
2461: IFFALSE 2465
// break ;
2463: GO 2467
// end ;
2465: GO 2367
2467: POP
2468: POP
// SetClass ( Denis , 4 ) ;
2469: LD_EXP 9
2473: PPUSH
2474: LD_INT 4
2476: PPUSH
2477: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2481: LD_EXP 9
2485: PPUSH
2486: LD_INT 750
2488: PPUSH
2489: CALL_OW 234
// end ;
2493: LD_VAR 0 1
2497: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2498: LD_INT 0
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
// area := HarrisonSupportArea ;
2505: LD_ADDR_VAR 0 4
2509: PUSH
2510: LD_INT 3
2512: ST_TO_ADDR
// dir := 2 ;
2513: LD_ADDR_VAR 0 5
2517: PUSH
2518: LD_INT 2
2520: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2521: LD_VAR 0 4
2525: PPUSH
2526: LD_INT 21
2528: PUSH
2529: LD_INT 3
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 70
2540: IFFALSE 2558
// begin area := HarrisonSupportArea2 ;
2542: LD_ADDR_VAR 0 4
2546: PUSH
2547: LD_INT 31
2549: ST_TO_ADDR
// dir := 1 ;
2550: LD_ADDR_VAR 0 5
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// end ; uc_side = 1 ;
2558: LD_ADDR_OWVAR 20
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// uc_nation = 1 ;
2566: LD_ADDR_OWVAR 21
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// vc_engine = 1 ;
2574: LD_ADDR_OWVAR 39
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// vc_control = 1 ;
2582: LD_ADDR_OWVAR 38
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2590: LD_ADDR_OWVAR 40
2594: PUSH
2595: LD_INT 4
2597: PUSH
2598: LD_INT 4
2600: PUSH
2601: LD_INT 2
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_OWVAR 67
2613: ARRAY
2614: ST_TO_ADDR
// vc_chassis = 2 ;
2615: LD_ADDR_OWVAR 37
2619: PUSH
2620: LD_INT 2
2622: ST_TO_ADDR
// veh = CreateVehicle ;
2623: LD_ADDR_VAR 0 3
2627: PUSH
2628: CALL_OW 45
2632: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2633: LD_VAR 0 3
2637: PPUSH
2638: LD_VAR 0 5
2642: PPUSH
2643: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2647: LD_VAR 0 3
2651: PPUSH
2652: LD_VAR 0 4
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2664: LD_VAR 0 3
2668: PPUSH
2669: LD_INT 50
2671: PPUSH
2672: CALL_OW 240
// hc_class := 2 ;
2676: LD_ADDR_OWVAR 28
2680: PUSH
2681: LD_INT 2
2683: ST_TO_ADDR
// hc_sex := sex_male ;
2684: LD_ADDR_OWVAR 27
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2692: LD_ADDR_OWVAR 33
2696: PUSH
2697: LD_STRING SecondCharsGal
2699: ST_TO_ADDR
// hc_face_number := 52 ;
2700: LD_ADDR_OWVAR 34
2704: PUSH
2705: LD_INT 52
2707: ST_TO_ADDR
// hc_name := Craig Brown ;
2708: LD_ADDR_OWVAR 26
2712: PUSH
2713: LD_STRING Craig Brown
2715: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2716: LD_ADDR_OWVAR 29
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: LD_INT 10
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2731: LD_ADDR_OWVAR 30
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 2
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2754: LD_ADDR_OWVAR 31
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: LD_INT 3
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 0
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2777: LD_ADDR_EXP 17
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_VAR 0 3
2796: PPUSH
2797: CALL_OW 52
// vc_engine = 1 ;
2801: LD_ADDR_OWVAR 39
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// vc_control = 1 ;
2809: LD_ADDR_OWVAR 38
2813: PUSH
2814: LD_INT 1
2816: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2817: LD_ADDR_OWVAR 40
2821: PUSH
2822: LD_INT 3
2824: ST_TO_ADDR
// vc_chassis = 2 ;
2825: LD_ADDR_OWVAR 37
2829: PUSH
2830: LD_INT 2
2832: ST_TO_ADDR
// veh = CreateVehicle ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 45
2842: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_VAR 0 5
2852: PPUSH
2853: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_VAR 0 4
2866: PPUSH
2867: LD_INT 0
2869: PPUSH
2870: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2874: LD_VAR 0 3
2878: PPUSH
2879: LD_INT 50
2881: PPUSH
2882: CALL_OW 240
// hc_class := 1 ;
2886: LD_ADDR_OWVAR 28
2890: PUSH
2891: LD_INT 1
2893: ST_TO_ADDR
// hc_sex := sex_female ;
2894: LD_ADDR_OWVAR 27
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2902: LD_ADDR_OWVAR 33
2906: PUSH
2907: LD_STRING SecondCharsGal
2909: ST_TO_ADDR
// hc_face_number := 45 ;
2910: LD_ADDR_OWVAR 34
2914: PUSH
2915: LD_INT 45
2917: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2918: LD_ADDR_OWVAR 29
2922: PUSH
2923: LD_INT 11
2925: PUSH
2926: LD_INT 10
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2933: LD_ADDR_OWVAR 26
2937: PUSH
2938: LD_STRING Ingrid Jonsson
2940: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2941: LD_ADDR_OWVAR 30
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: LD_INT 1
2951: PUSH
2952: LD_INT 0
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2964: LD_ADDR_OWVAR 31
2968: PUSH
2969: LD_INT 3
2971: PUSH
2972: LD_INT 1
2974: PUSH
2975: LD_INT 1
2977: PUSH
2978: LD_INT 0
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2987: LD_ADDR_EXP 18
2991: PUSH
2992: CALL_OW 44
2996: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2997: LD_EXP 18
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: CALL_OW 52
// end ;
3011: LD_VAR 0 1
3015: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
3016: LD_INT 0
3018: PPUSH
3019: PPUSH
3020: PPUSH
3021: PPUSH
3022: PPUSH
// j = 0 ;
3023: LD_ADDR_VAR 0 3
3027: PUSH
3028: LD_INT 0
3030: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3031: LD_INT 35
3033: PPUSH
3034: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
3038: LD_ADDR_VAR 0 2
3042: PUSH
3043: LD_INT 22
3045: PUSH
3046: LD_INT 1
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 1
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: LD_INT 26
3065: PUSH
3066: LD_INT 1
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: LD_INT 25
3078: PUSH
3079: LD_INT 1
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 25
3088: PUSH
3089: LD_INT 2
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PUSH
3096: LD_INT 25
3098: PUSH
3099: LD_INT 3
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 25
3108: PUSH
3109: LD_INT 4
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: PPUSH
3129: CALL_OW 69
3133: PUSH
3134: FOR_IN
3135: IFFALSE 3261
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3137: LD_INT 22
3139: PUSH
3140: LD_INT 3
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 2
3149: PUSH
3150: LD_INT 21
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 21
3162: PUSH
3163: LD_INT 2
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 21
3172: PUSH
3173: LD_INT 3
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 59
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 91
3195: PUSH
3196: LD_VAR 0 2
3200: PUSH
3201: LD_INT 25
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: NOT
3219: PUSH
3220: LD_VAR 0 2
3224: PPUSH
3225: LD_EXP 1
3229: PPUSH
3230: CALL_OW 296
3234: PUSH
3235: LD_INT 15
3237: LESS
3238: AND
3239: IFFALSE 3259
// begin tmp = i ;
3241: LD_ADDR_VAR 0 4
3245: PUSH
3246: LD_VAR 0 2
3250: ST_TO_ADDR
// j = 1 ;
3251: LD_ADDR_VAR 0 3
3255: PUSH
3256: LD_INT 1
3258: ST_TO_ADDR
// end ; end ;
3259: GO 3134
3261: POP
3262: POP
// until j = 1 ;
3263: LD_VAR 0 3
3267: PUSH
3268: LD_INT 1
3270: EQUAL
3271: IFFALSE 3031
// blockSpawn = 1 ;
3273: LD_ADDR_EXP 29
3277: PUSH
3278: LD_INT 1
3280: ST_TO_ADDR
// uc_side = 4 ;
3281: LD_ADDR_OWVAR 20
3285: PUSH
3286: LD_INT 4
3288: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3289: LD_ADDR_EXP 15
3293: PUSH
3294: LD_STRING Joan
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL 6132 0 2
3304: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3305: LD_EXP 15
3309: PPUSH
3310: LD_VAR 0 4
3314: PPUSH
3315: CALL_OW 250
3319: PPUSH
3320: LD_VAR 0 4
3324: PPUSH
3325: CALL_OW 251
3329: PPUSH
3330: LD_INT 5
3332: PPUSH
3333: LD_INT 1
3335: PPUSH
3336: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3340: LD_EXP 15
3344: PPUSH
3345: LD_INT 250
3347: PPUSH
3348: CALL_OW 234
// InGameOn ;
3352: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3356: LD_EXP 15
3360: PPUSH
3361: CALL_OW 87
// wait ( 0 0$2 ) ;
3365: LD_INT 70
3367: PPUSH
3368: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3372: LD_VAR 0 4
3376: PPUSH
3377: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3381: LD_VAR 0 4
3385: PPUSH
3386: CALL_OW 122
// wait ( 0 0$1 ) ;
3390: LD_INT 35
3392: PPUSH
3393: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3397: LD_VAR 0 4
3401: PPUSH
3402: LD_EXP 15
3406: PPUSH
3407: CALL_OW 112
// wait ( 0 0$2 ) ;
3411: LD_INT 70
3413: PPUSH
3414: CALL_OW 67
// DialogueOn ;
3418: CALL_OW 6
// if tmp = JMM then
3422: LD_VAR 0 4
3426: PUSH
3427: LD_EXP 1
3431: EQUAL
3432: IFFALSE 3581
// begin ComTurnUnit ( JMM , Joan ) ;
3434: LD_EXP 1
3438: PPUSH
3439: LD_EXP 15
3443: PPUSH
3444: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3448: LD_EXP 1
3452: PPUSH
3453: LD_STRING D5b-JMM-1
3455: PPUSH
3456: CALL_OW 88
// DialogueOff ;
3460: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3464: LD_EXP 15
3468: PPUSH
3469: LD_INT 500
3471: PPUSH
3472: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3476: LD_EXP 15
3480: PPUSH
3481: LD_EXP 1
3485: PPUSH
3486: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3490: LD_EXP 1
3494: PPUSH
3495: LD_EXP 15
3499: PPUSH
3500: CALL_OW 119
// wait ( 0 0$1 ) ;
3504: LD_INT 35
3506: PPUSH
3507: CALL_OW 67
// DialogueOn ;
3511: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3515: LD_EXP 15
3519: PPUSH
3520: LD_STRING D5b-Joan-1
3522: PPUSH
3523: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3527: LD_EXP 1
3531: PPUSH
3532: LD_STRING D5b-JMM-2
3534: PPUSH
3535: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3539: LD_EXP 15
3543: PPUSH
3544: LD_STRING D5b-Joan-2
3546: PPUSH
3547: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D5b-JMM-3
3558: PPUSH
3559: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D5b-Joan-3
3570: PPUSH
3571: CALL_OW 88
// DialogueOff ;
3575: CALL_OW 7
// end else
3579: GO 3916
// begin ComTurnUnit ( tmp , Joan ) ;
3581: LD_VAR 0 4
3585: PPUSH
3586: LD_EXP 15
3590: PPUSH
3591: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3595: LD_VAR 0 4
3599: PPUSH
3600: LD_STRING D5a-Sol1-1
3602: PPUSH
3603: CALL_OW 88
// DialogueOff ;
3607: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3611: LD_EXP 15
3615: PPUSH
3616: LD_INT 500
3618: PPUSH
3619: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3623: LD_EXP 15
3627: PPUSH
3628: LD_VAR 0 4
3632: PPUSH
3633: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3637: LD_VAR 0 4
3641: PPUSH
3642: LD_EXP 15
3646: PPUSH
3647: CALL_OW 119
// wait ( 0 0$1 ) ;
3651: LD_INT 35
3653: PPUSH
3654: CALL_OW 67
// DialogueOn ;
3658: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3662: LD_EXP 15
3666: PPUSH
3667: LD_STRING D5a-Joan-1
3669: PPUSH
3670: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_STRING D5a-Sol1-2
3681: PPUSH
3682: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3686: LD_EXP 15
3690: PPUSH
3691: LD_STRING D5a-Joan-2
3693: PPUSH
3694: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3698: LD_VAR 0 4
3702: PPUSH
3703: LD_STRING D5a-Sol1-3
3705: PPUSH
3706: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3710: LD_EXP 15
3714: PPUSH
3715: LD_STRING D5a-Joan-3
3717: PPUSH
3718: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3722: LD_VAR 0 4
3726: PPUSH
3727: LD_STRING D5a-Sol1-4
3729: PPUSH
3730: CALL_OW 88
// DialogueOff ;
3734: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3738: LD_EXP 1
3742: PPUSH
3743: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3747: LD_EXP 1
3751: PPUSH
3752: CALL_OW 122
// wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3763: LD_INT 35
3765: PPUSH
3766: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3770: LD_EXP 15
3774: PUSH
3775: LD_VAR 0 4
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PPUSH
3784: LD_EXP 1
3788: PPUSH
3789: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3793: LD_EXP 15
3797: PPUSH
3798: LD_EXP 1
3802: PPUSH
3803: CALL_OW 296
3807: PUSH
3808: LD_INT 5
3810: LESS
3811: IFFALSE 3763
// ComTurnUnit ( Joan , JMM ) ;
3813: LD_EXP 15
3817: PPUSH
3818: LD_EXP 1
3822: PPUSH
3823: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3827: LD_EXP 1
3831: PPUSH
3832: LD_EXP 15
3836: PPUSH
3837: CALL_OW 119
// wait ( 0 0$1 ) ;
3841: LD_INT 35
3843: PPUSH
3844: CALL_OW 67
// DialogueOn ;
3848: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3852: LD_EXP 15
3856: PPUSH
3857: LD_STRING D5a-Joan-4
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D5a-JMM-4
3871: PPUSH
3872: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3876: LD_EXP 15
3880: PPUSH
3881: LD_STRING D5a-Joan-5
3883: PPUSH
3884: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D5a-JMM-5
3895: PPUSH
3896: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3900: LD_EXP 15
3904: PPUSH
3905: LD_STRING D5a-Joan-6
3907: PPUSH
3908: CALL_OW 88
// DialogueOff ;
3912: CALL_OW 7
// end ; DialogueOn ;
3916: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3920: LD_EXP 1
3924: PPUSH
3925: LD_STRING D6-JMM-1
3927: PPUSH
3928: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3932: LD_EXP 15
3936: PPUSH
3937: LD_STRING D6-Joan-1
3939: PPUSH
3940: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3944: LD_EXP 1
3948: PPUSH
3949: LD_STRING D6-JMM-2
3951: PPUSH
3952: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3956: LD_EXP 15
3960: PPUSH
3961: LD_STRING D6-Joan-2
3963: PPUSH
3964: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3968: LD_EXP 1
3972: PPUSH
3973: LD_STRING D6-JMM-3
3975: PPUSH
3976: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3980: LD_EXP 15
3984: PPUSH
3985: LD_STRING D6-Joan-3
3987: PPUSH
3988: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3992: LD_EXP 1
3996: PPUSH
3997: LD_STRING D6-JMM-4
3999: PPUSH
4000: CALL_OW 88
// DialogueOff ;
4004: CALL_OW 7
// InGameOff ;
4008: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4012: LD_EXP 15
4016: PPUSH
4017: LD_INT 1
4019: PPUSH
4020: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4024: LD_STRING MJ
4026: PPUSH
4027: CALL_OW 337
// JoanStatus = 1 ;
4031: LD_ADDR_EXP 16
4035: PUSH
4036: LD_INT 1
4038: ST_TO_ADDR
// blockSpawn = 0 ;
4039: LD_ADDR_EXP 29
4043: PUSH
4044: LD_INT 0
4046: ST_TO_ADDR
// end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
// repeat wait ( 0 0$7 ) ;
4056: LD_INT 245
4058: PPUSH
4059: CALL_OW 67
// until blockSpawn = 0 ;
4063: LD_EXP 29
4067: PUSH
4068: LD_INT 0
4070: EQUAL
4071: IFFALSE 4056
// uc_side = 1 ;
4073: LD_ADDR_OWVAR 20
4077: PUSH
4078: LD_INT 1
4080: ST_TO_ADDR
// uc_nation = 1 ;
4081: LD_ADDR_OWVAR 21
4085: PUSH
4086: LD_INT 1
4088: ST_TO_ADDR
// InitHc ;
4089: CALL_OW 19
// if number = 1 then
4093: LD_VAR 0 1
4097: PUSH
4098: LD_INT 1
4100: EQUAL
4101: IFFALSE 4277
// begin hc_class := 3 ;
4103: LD_ADDR_OWVAR 28
4107: PUSH
4108: LD_INT 3
4110: ST_TO_ADDR
// hc_sex := sex_male ;
4111: LD_ADDR_OWVAR 27
4115: PUSH
4116: LD_INT 1
4118: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4119: LD_ADDR_OWVAR 33
4123: PUSH
4124: LD_STRING SecondCharsGal
4126: ST_TO_ADDR
// hc_face_number := 55 ;
4127: LD_ADDR_OWVAR 34
4131: PUSH
4132: LD_INT 55
4134: ST_TO_ADDR
// hc_name := George McCarthy ;
4135: LD_ADDR_OWVAR 26
4139: PUSH
4140: LD_STRING George McCarthy
4142: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4143: LD_ADDR_OWVAR 29
4147: PUSH
4148: LD_INT 11
4150: PUSH
4151: LD_INT 10
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4158: LD_ADDR_OWVAR 30
4162: PUSH
4163: LD_INT 0
4165: PUSH
4166: LD_INT 0
4168: PUSH
4169: LD_INT 2
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4181: LD_ADDR_OWVAR 31
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: LD_INT 2
4191: PUSH
4192: LD_INT 3
4194: PUSH
4195: LD_INT 1
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: ST_TO_ADDR
// un = CreateHuman ;
4204: LD_ADDR_VAR 0 3
4208: PUSH
4209: CALL_OW 44
4213: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4214: LD_VAR 0 3
4218: PPUSH
4219: LD_INT 23
4221: PPUSH
4222: LD_INT 1
4224: PPUSH
4225: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4229: LD_VAR 0 3
4233: PPUSH
4234: CALL_OW 87
// wait ( 0 0$1 ) ;
4238: LD_INT 35
4240: PPUSH
4241: CALL_OW 67
// DialogueOn ;
4245: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4249: LD_VAR 0 3
4253: PPUSH
4254: LD_STRING D11d-Sol4-1
4256: PPUSH
4257: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4261: LD_EXP 1
4265: PPUSH
4266: LD_STRING D11d-JMM-1
4268: PPUSH
4269: CALL_OW 88
// DialogueOff ;
4273: CALL_OW 7
// end ; if number = 2 then
4277: LD_VAR 0 1
4281: PUSH
4282: LD_INT 2
4284: EQUAL
4285: IFFALSE 4461
// begin hc_class := 1 ;
4287: LD_ADDR_OWVAR 28
4291: PUSH
4292: LD_INT 1
4294: ST_TO_ADDR
// hc_sex := sex_male ;
4295: LD_ADDR_OWVAR 27
4299: PUSH
4300: LD_INT 1
4302: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4303: LD_ADDR_OWVAR 33
4307: PUSH
4308: LD_STRING AmGalRemake
4310: ST_TO_ADDR
// hc_face_number := 7 ;
4311: LD_ADDR_OWVAR 34
4315: PUSH
4316: LD_INT 7
4318: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4319: LD_ADDR_OWVAR 26
4323: PUSH
4324: LD_STRING Bobby Jordan
4326: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4327: LD_ADDR_OWVAR 29
4331: PUSH
4332: LD_INT 9
4334: PUSH
4335: LD_INT 11
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4342: LD_ADDR_OWVAR 30
4346: PUSH
4347: LD_INT 1
4349: PUSH
4350: LD_INT 0
4352: PUSH
4353: LD_INT 0
4355: PUSH
4356: LD_INT 1
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4365: LD_ADDR_OWVAR 31
4369: PUSH
4370: LD_INT 2
4372: PUSH
4373: LD_INT 1
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: LD_INT 1
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// un = CreateHuman ;
4388: LD_ADDR_VAR 0 3
4392: PUSH
4393: CALL_OW 44
4397: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4398: LD_VAR 0 3
4402: PPUSH
4403: LD_INT 24
4405: PPUSH
4406: LD_INT 1
4408: PPUSH
4409: CALL_OW 49
// wait ( 0 0$1 ) ;
4413: LD_INT 35
4415: PPUSH
4416: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4420: LD_VAR 0 3
4424: PPUSH
4425: CALL_OW 87
// DialogueOn ;
4429: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4433: LD_VAR 0 3
4437: PPUSH
4438: LD_STRING D11b-Sol3-1
4440: PPUSH
4441: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4445: LD_EXP 1
4449: PPUSH
4450: LD_STRING D11b-JMM-1
4452: PPUSH
4453: CALL_OW 88
// DialogueOff ;
4457: CALL_OW 7
// end ; if number = 3 then
4461: LD_VAR 0 1
4465: PUSH
4466: LD_INT 3
4468: EQUAL
4469: IFFALSE 4633
// begin hc_class := 1 ;
4471: LD_ADDR_OWVAR 28
4475: PUSH
4476: LD_INT 1
4478: ST_TO_ADDR
// hc_sex := sex_male ;
4479: LD_ADDR_OWVAR 27
4483: PUSH
4484: LD_INT 1
4486: ST_TO_ADDR
// hc_gallery := DJ ;
4487: LD_ADDR_OWVAR 33
4491: PUSH
4492: LD_STRING DJ
4494: ST_TO_ADDR
// hc_face_number := 1 ;
4495: LD_ADDR_OWVAR 34
4499: PUSH
4500: LD_INT 1
4502: ST_TO_ADDR
// hc_name := Darius Dajay ;
4503: LD_ADDR_OWVAR 26
4507: PUSH
4508: LD_STRING Darius Dajay
4510: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4511: LD_ADDR_OWVAR 29
4515: PUSH
4516: LD_INT 11
4518: PUSH
4519: LD_INT 11
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4526: LD_ADDR_OWVAR 30
4530: PUSH
4531: LD_INT 2
4533: PUSH
4534: LD_INT 0
4536: PUSH
4537: LD_INT 0
4539: PUSH
4540: LD_INT 0
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4549: LD_ADDR_OWVAR 31
4553: PUSH
4554: LD_INT 4
4556: PUSH
4557: LD_INT 0
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: LD_INT 0
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: ST_TO_ADDR
// un = CreateHuman ;
4572: LD_ADDR_VAR 0 3
4576: PUSH
4577: CALL_OW 44
4581: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4582: LD_VAR 0 3
4586: PPUSH
4587: LD_INT 25
4589: PPUSH
4590: LD_INT 1
4592: PPUSH
4593: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: CALL_OW 87
// wait ( 0 0$1 ) ;
4606: LD_INT 35
4608: PPUSH
4609: CALL_OW 67
// DialogueOn ;
4613: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4617: LD_VAR 0 3
4621: PPUSH
4622: LD_STRING D11f-Sol5-1
4624: PPUSH
4625: CALL_OW 88
// DialogueOff ;
4629: CALL_OW 7
// end ; if number = 4 then
4633: LD_VAR 0 1
4637: PUSH
4638: LD_INT 4
4640: EQUAL
4641: IFFALSE 4805
// begin hc_class := 3 ;
4643: LD_ADDR_OWVAR 28
4647: PUSH
4648: LD_INT 3
4650: ST_TO_ADDR
// hc_sex := sex_female ;
4651: LD_ADDR_OWVAR 27
4655: PUSH
4656: LD_INT 2
4658: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4659: LD_ADDR_OWVAR 33
4663: PUSH
4664: LD_STRING SecondCharsGal
4666: ST_TO_ADDR
// hc_face_number := 46 ;
4667: LD_ADDR_OWVAR 34
4671: PUSH
4672: LD_INT 46
4674: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4675: LD_ADDR_OWVAR 26
4679: PUSH
4680: LD_STRING Sylvia Creak
4682: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4683: LD_ADDR_OWVAR 29
4687: PUSH
4688: LD_INT 10
4690: PUSH
4691: LD_INT 9
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4698: LD_ADDR_OWVAR 30
4702: PUSH
4703: LD_INT 0
4705: PUSH
4706: LD_INT 1
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 1
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4721: LD_ADDR_OWVAR 31
4725: PUSH
4726: LD_INT 1
4728: PUSH
4729: LD_INT 3
4731: PUSH
4732: LD_INT 1
4734: PUSH
4735: LD_INT 1
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: ST_TO_ADDR
// un = CreateHuman ;
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: CALL_OW 44
4753: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4754: LD_VAR 0 3
4758: PPUSH
4759: LD_INT 26
4761: PPUSH
4762: LD_INT 1
4764: PPUSH
4765: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4769: LD_VAR 0 3
4773: PPUSH
4774: CALL_OW 87
// wait ( 0 0$1 ) ;
4778: LD_INT 35
4780: PPUSH
4781: CALL_OW 67
// DialogueOn ;
4785: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4789: LD_VAR 0 3
4793: PPUSH
4794: LD_STRING D11e-FSol4-1
4796: PPUSH
4797: CALL_OW 88
// DialogueOff ;
4801: CALL_OW 7
// end ; if number = 5 then
4805: LD_VAR 0 1
4809: PUSH
4810: LD_INT 5
4812: EQUAL
4813: IFFALSE 4989
// begin hc_class := 1 ;
4815: LD_ADDR_OWVAR 28
4819: PUSH
4820: LD_INT 1
4822: ST_TO_ADDR
// hc_sex := sex_female ;
4823: LD_ADDR_OWVAR 27
4827: PUSH
4828: LD_INT 2
4830: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4831: LD_ADDR_OWVAR 33
4835: PUSH
4836: LD_STRING SecondCharsGal
4838: ST_TO_ADDR
// hc_face_number := 37 ;
4839: LD_ADDR_OWVAR 34
4843: PUSH
4844: LD_INT 37
4846: ST_TO_ADDR
// hc_name := Malena Johnson ;
4847: LD_ADDR_OWVAR 26
4851: PUSH
4852: LD_STRING Malena Johnson
4854: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4855: LD_ADDR_OWVAR 29
4859: PUSH
4860: LD_INT 11
4862: PUSH
4863: LD_INT 10
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4870: LD_ADDR_OWVAR 30
4874: PUSH
4875: LD_INT 1
4877: PUSH
4878: LD_INT 1
4880: PUSH
4881: LD_INT 0
4883: PUSH
4884: LD_INT 0
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4893: LD_ADDR_OWVAR 31
4897: PUSH
4898: LD_INT 1
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// un = CreateHuman ;
4916: LD_ADDR_VAR 0 3
4920: PUSH
4921: CALL_OW 44
4925: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4926: LD_VAR 0 3
4930: PPUSH
4931: LD_INT 27
4933: PPUSH
4934: LD_INT 1
4936: PPUSH
4937: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4941: LD_VAR 0 3
4945: PPUSH
4946: CALL_OW 87
// wait ( 0 0$1 ) ;
4950: LD_INT 35
4952: PPUSH
4953: CALL_OW 67
// DialogueOn ;
4957: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4961: LD_VAR 0 3
4965: PPUSH
4966: LD_STRING D11c-FSol3-1
4968: PPUSH
4969: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4973: LD_EXP 1
4977: PPUSH
4978: LD_STRING D11c-JMM-1
4980: PPUSH
4981: CALL_OW 88
// DialogueOff ;
4985: CALL_OW 7
// end ; if number = 6 then
4989: LD_VAR 0 1
4993: PUSH
4994: LD_INT 6
4996: EQUAL
4997: IFFALSE 5171
// begin hc_class := 1 ;
4999: LD_ADDR_OWVAR 28
5003: PUSH
5004: LD_INT 1
5006: ST_TO_ADDR
// hc_sex := sex_male ;
5007: LD_ADDR_OWVAR 27
5011: PUSH
5012: LD_INT 1
5014: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5015: LD_ADDR_OWVAR 33
5019: PUSH
5020: LD_STRING AmGalRemake
5022: ST_TO_ADDR
// hc_face_number := 1 ;
5023: LD_ADDR_OWVAR 34
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// hc_name := Charles Brown ;
5031: LD_ADDR_OWVAR 26
5035: PUSH
5036: LD_STRING Charles Brown
5038: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5039: LD_ADDR_OWVAR 29
5043: PUSH
5044: LD_INT 12
5046: PUSH
5047: LD_INT 11
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5054: LD_ADDR_OWVAR 30
5058: PUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 0
5064: PUSH
5065: LD_INT 0
5067: PUSH
5068: LD_INT 0
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5077: LD_ADDR_OWVAR 31
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: LD_INT 0
5087: PUSH
5088: LD_INT 1
5090: PUSH
5091: LD_INT 1
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: ST_TO_ADDR
// un = CreateHuman ;
5100: LD_ADDR_VAR 0 3
5104: PUSH
5105: CALL_OW 44
5109: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5110: LD_VAR 0 3
5114: PPUSH
5115: LD_INT 28
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5125: LD_VAR 0 3
5129: PPUSH
5130: CALL_OW 87
// wait ( 0 0$1 ) ;
5134: LD_INT 35
5136: PPUSH
5137: CALL_OW 67
// DialogueOn ;
5141: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5145: LD_VAR 0 3
5149: PPUSH
5150: LD_STRING D4-Sol1-5
5152: PPUSH
5153: CALL_OW 88
// DialogueOff ;
5157: CALL_OW 7
// tempCharles = un ;
5161: LD_ADDR_EXP 13
5165: PUSH
5166: LD_VAR 0 3
5170: ST_TO_ADDR
// end ; if number = 7 then
5171: LD_VAR 0 1
5175: PUSH
5176: LD_INT 7
5178: EQUAL
5179: IFFALSE 5429
// begin hc_class := 1 ;
5181: LD_ADDR_OWVAR 28
5185: PUSH
5186: LD_INT 1
5188: ST_TO_ADDR
// hc_sex := sex_female ;
5189: LD_ADDR_OWVAR 27
5193: PUSH
5194: LD_INT 2
5196: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5197: LD_ADDR_OWVAR 33
5201: PUSH
5202: LD_STRING AmGalRemake
5204: ST_TO_ADDR
// hc_face_number := 2 ;
5205: LD_ADDR_OWVAR 34
5209: PUSH
5210: LD_INT 2
5212: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5213: LD_ADDR_OWVAR 26
5217: PUSH
5218: LD_STRING Rebecca Macdonald
5220: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5221: LD_ADDR_OWVAR 29
5225: PUSH
5226: LD_INT 10
5228: PUSH
5229: LD_INT 10
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5236: LD_ADDR_OWVAR 30
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: LD_INT 0
5246: PUSH
5247: LD_INT 0
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5259: LD_ADDR_OWVAR 31
5263: PUSH
5264: LD_INT 1
5266: PUSH
5267: LD_INT 0
5269: PUSH
5270: LD_INT 0
5272: PUSH
5273: LD_INT 1
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: ST_TO_ADDR
// un = CreateHuman ;
5282: LD_ADDR_VAR 0 3
5286: PUSH
5287: CALL_OW 44
5291: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5292: LD_VAR 0 3
5296: PPUSH
5297: LD_INT 29
5299: PPUSH
5300: LD_INT 1
5302: PPUSH
5303: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5307: LD_VAR 0 3
5311: PPUSH
5312: CALL_OW 87
// wait ( 0 0$1 ) ;
5316: LD_INT 35
5318: PPUSH
5319: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5323: LD_INT 30
5325: PPUSH
5326: LD_INT 22
5328: PUSH
5329: LD_INT 3
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PPUSH
5336: CALL_OW 70
5340: IFFALSE 5429
// begin DialogueOn ;
5342: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5346: LD_VAR 0 3
5350: PPUSH
5351: CALL_OW 250
5355: PPUSH
5356: LD_VAR 0 3
5360: PPUSH
5361: CALL_OW 251
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: LD_INT 15
5371: NEG
5372: PPUSH
5373: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5377: LD_VAR 0 3
5381: PPUSH
5382: CALL_OW 250
5386: PPUSH
5387: LD_VAR 0 3
5391: PPUSH
5392: CALL_OW 251
5396: PPUSH
5397: LD_INT 1
5399: PPUSH
5400: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5404: LD_VAR 0 3
5408: PPUSH
5409: LD_STRING D11a-FSol2-1
5411: PPUSH
5412: CALL_OW 88
// ComCrawl ( un ) ;
5416: LD_VAR 0 3
5420: PPUSH
5421: CALL_OW 137
// DialogueOff ;
5425: CALL_OW 7
// end ; end ; if number = 8 then
5429: LD_VAR 0 1
5433: PUSH
5434: LD_INT 8
5436: EQUAL
5437: IFFALSE 5593
// begin hc_class := 1 ;
5439: LD_ADDR_OWVAR 28
5443: PUSH
5444: LD_INT 1
5446: ST_TO_ADDR
// hc_sex := sex_female ;
5447: LD_ADDR_OWVAR 27
5451: PUSH
5452: LD_INT 2
5454: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5455: LD_ADDR_OWVAR 33
5459: PUSH
5460: LD_STRING SecondCharsGal
5462: ST_TO_ADDR
// hc_face_number := 42 ;
5463: LD_ADDR_OWVAR 34
5467: PUSH
5468: LD_INT 42
5470: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5471: LD_ADDR_OWVAR 26
5475: PUSH
5476: LD_STRING Margherite Simpson
5478: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5479: LD_ADDR_OWVAR 29
5483: PUSH
5484: LD_INT 12
5486: PUSH
5487: LD_INT 10
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5494: LD_ADDR_OWVAR 30
5498: PUSH
5499: LD_INT 1
5501: PUSH
5502: LD_INT 2
5504: PUSH
5505: LD_INT 0
5507: PUSH
5508: LD_INT 0
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5517: LD_ADDR_OWVAR 31
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: LD_INT 2
5527: PUSH
5528: LD_INT 0
5530: PUSH
5531: LD_INT 1
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: ST_TO_ADDR
// un = CreateHuman ;
5540: LD_ADDR_VAR 0 3
5544: PUSH
5545: CALL_OW 44
5549: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5550: LD_VAR 0 3
5554: PPUSH
5555: LD_INT 33
5557: PPUSH
5558: LD_INT 1
5560: PPUSH
5561: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5565: LD_VAR 0 3
5569: PPUSH
5570: CALL_OW 87
// wait ( 0 0$1 ) ;
5574: LD_INT 35
5576: PPUSH
5577: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5581: LD_VAR 0 3
5585: PPUSH
5586: LD_STRING D11e-FSol4-1
5588: PPUSH
5589: CALL_OW 88
// end ; ignoreTarget := ignoreTarget union un ;
5593: LD_ADDR_EXP 45
5597: PUSH
5598: LD_EXP 45
5602: PUSH
5603: LD_VAR 0 3
5607: UNION
5608: ST_TO_ADDR
// arrivals := arrivals union un ;
5609: LD_ADDR_EXP 46
5613: PUSH
5614: LD_EXP 46
5618: PUSH
5619: LD_VAR 0 3
5623: UNION
5624: ST_TO_ADDR
// end ;
5625: LD_VAR 0 2
5629: RET
// every 0 0$1 do var i ;
5630: GO 5632
5632: DISABLE
5633: LD_INT 0
5635: PPUSH
// begin enable ;
5636: ENABLE
// if not ignoreTarget then
5637: LD_EXP 45
5641: NOT
5642: IFFALSE 5646
// exit ;
5644: GO 5727
// for i in ignoreTarget do
5646: LD_ADDR_VAR 0 1
5650: PUSH
5651: LD_EXP 45
5655: PUSH
5656: FOR_IN
5657: IFFALSE 5725
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5659: LD_INT 22
5661: PUSH
5662: LD_INT 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 91
5671: PUSH
5672: LD_VAR 0 1
5676: PUSH
5677: LD_INT 10
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: LIST
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PPUSH
5689: CALL_OW 69
5693: PUSH
5694: LD_EXP 45
5698: DIFF
5699: PUSH
5700: LD_INT 1
5702: GREATER
5703: IFFALSE 5723
// begin ignoreTarget := ignoreTarget diff i ;
5705: LD_ADDR_EXP 45
5709: PUSH
5710: LD_EXP 45
5714: PUSH
5715: LD_VAR 0 1
5719: DIFF
5720: ST_TO_ADDR
// break ;
5721: GO 5725
// end ;
5723: GO 5656
5725: POP
5726: POP
// end ; end_of_file
5727: PPOPN 1
5729: END
// export function PrepareRussian ; var i ; begin
5730: LD_INT 0
5732: PPUSH
5733: PPUSH
// if Difficulty < 3 then
5734: LD_OWVAR 67
5738: PUSH
5739: LD_INT 3
5741: LESS
5742: IFFALSE 5759
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5744: LD_INT 130
5746: PPUSH
5747: LD_INT 81
5749: PPUSH
5750: CALL_OW 428
5754: PPUSH
5755: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5759: LD_INT 3
5761: PPUSH
5762: LD_INT 3
5764: PPUSH
5765: LD_INT 2
5767: PPUSH
5768: LD_EXP 34
5772: PPUSH
5773: LD_EXP 35
5777: PPUSH
5778: CALL_OW 12
5782: PPUSH
5783: LD_INT 2
5785: PPUSH
5786: LD_INT 4
5788: PPUSH
5789: CALL 6324 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5793: LD_INT 3
5795: PPUSH
5796: LD_INT 3
5798: PPUSH
5799: LD_INT 8
5801: PPUSH
5802: LD_EXP 34
5806: PPUSH
5807: LD_EXP 35
5811: PPUSH
5812: CALL_OW 12
5816: PPUSH
5817: LD_INT 1
5819: PPUSH
5820: LD_INT 4
5822: PPUSH
5823: CALL 6324 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5827: LD_INT 3
5829: PPUSH
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 67
5835: PPUSH
5836: LD_EXP 34
5840: PPUSH
5841: LD_EXP 35
5845: PPUSH
5846: CALL_OW 12
5850: PPUSH
5851: LD_INT 1
5853: PPUSH
5854: LD_INT 2
5856: PPUSH
5857: CALL 6324 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5861: LD_INT 3
5863: PPUSH
5864: LD_INT 3
5866: PPUSH
5867: LD_INT 21
5869: PPUSH
5870: LD_EXP 34
5874: PPUSH
5875: LD_EXP 35
5879: PPUSH
5880: CALL_OW 12
5884: PPUSH
5885: LD_INT 3
5887: PPUSH
5888: LD_INT 6
5890: PPUSH
5891: CALL 6324 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5895: LD_INT 3
5897: PPUSH
5898: LD_INT 3
5900: PPUSH
5901: LD_INT 17
5903: PPUSH
5904: LD_EXP 34
5908: PPUSH
5909: LD_EXP 35
5913: PPUSH
5914: CALL_OW 12
5918: PPUSH
5919: LD_INT 3
5921: PPUSH
5922: LD_INT 6
5924: PPUSH
5925: CALL 6324 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5929: LD_INT 3
5931: PPUSH
5932: LD_INT 3
5934: PPUSH
5935: LD_INT 32
5937: PPUSH
5938: LD_EXP 34
5942: PPUSH
5943: LD_EXP 35
5947: PPUSH
5948: CALL_OW 12
5952: PPUSH
5953: LD_INT 4
5955: PPUSH
5956: LD_INT 2
5958: PPUSH
5959: CALL 6324 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5963: LD_ADDR_VAR 0 2
5967: PUSH
5968: LD_INT 22
5970: PUSH
5971: LD_INT 3
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PUSH
5978: LD_INT 21
5980: PUSH
5981: LD_INT 3
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 30
5990: PUSH
5991: LD_INT 32
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: LIST
6002: PPUSH
6003: CALL_OW 69
6007: PUSH
6008: FOR_IN
6009: IFFALSE 6049
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6011: LD_INT 3
6013: PPUSH
6014: LD_INT 3
6016: PPUSH
6017: LD_VAR 0 2
6021: PPUSH
6022: LD_EXP 34
6026: PPUSH
6027: LD_EXP 35
6031: PPUSH
6032: CALL_OW 12
6036: PPUSH
6037: LD_INT 1
6039: PPUSH
6040: LD_INT 1
6042: PPUSH
6043: CALL 6324 0 6
6047: GO 6008
6049: POP
6050: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
6051: LD_ADDR_VAR 0 2
6055: PUSH
6056: LD_INT 22
6058: PUSH
6059: LD_INT 3
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 21
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PUSH
6076: LD_INT 30
6078: PUSH
6079: LD_INT 31
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PUSH
6096: FOR_IN
6097: IFFALSE 6125
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6099: LD_EXP 34
6103: PPUSH
6104: LD_EXP 35
6108: PPUSH
6109: CALL_OW 12
6113: PPUSH
6114: LD_VAR 0 2
6118: PPUSH
6119: CALL 6434 0 2
6123: GO 6096
6125: POP
6126: POP
// end ; end_of_file
6127: LD_VAR 0 1
6131: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6132: LD_INT 0
6134: PPUSH
6135: PPUSH
// if exist_mode then
6136: LD_VAR 0 2
6140: IFFALSE 6165
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
6142: LD_ADDR_VAR 0 4
6146: PUSH
6147: LD_EXP 44
6151: PUSH
6152: LD_VAR 0 1
6156: STR
6157: PPUSH
6158: CALL_OW 34
6162: ST_TO_ADDR
// end else
6163: GO 6180
// begin unit := NewCharacter ( ident ) ;
6165: LD_ADDR_VAR 0 4
6169: PUSH
6170: LD_VAR 0 1
6174: PPUSH
6175: CALL_OW 25
6179: ST_TO_ADDR
// end ; result := unit ;
6180: LD_ADDR_VAR 0 3
6184: PUSH
6185: LD_VAR 0 4
6189: ST_TO_ADDR
// end ;
6190: LD_VAR 0 3
6194: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6195: LD_INT 0
6197: PPUSH
6198: PPUSH
6199: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6200: LD_ADDR_VAR 0 6
6204: PUSH
6205: LD_VAR 0 1
6209: PUSH
6210: LD_INT 1
6212: PPUSH
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 12
6222: ARRAY
6223: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6224: LD_VAR 0 6
6228: PPUSH
6229: CALL_OW 258
6233: PUSH
6234: LD_INT 1
6236: EQUAL
6237: IFFALSE 6255
// Say ( speaker , dialogMID ) else
6239: LD_VAR 0 6
6243: PPUSH
6244: LD_VAR 0 2
6248: PPUSH
6249: CALL_OW 88
6253: GO 6269
// Say ( speaker , dialogFID ) ;
6255: LD_VAR 0 6
6259: PPUSH
6260: LD_VAR 0 3
6264: PPUSH
6265: CALL_OW 88
// result := speaker ;
6269: LD_ADDR_VAR 0 4
6273: PUSH
6274: LD_VAR 0 6
6278: ST_TO_ADDR
// end ;
6279: LD_VAR 0 4
6283: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6284: LD_INT 0
6286: PPUSH
6287: PPUSH
// for i in charactersList do
6288: LD_ADDR_VAR 0 4
6292: PUSH
6293: LD_VAR 0 1
6297: PUSH
6298: FOR_IN
6299: IFFALSE 6317
// SaveCharacters ( i , ident ) ;
6301: LD_VAR 0 4
6305: PPUSH
6306: LD_VAR 0 2
6310: PPUSH
6311: CALL_OW 38
6315: GO 6298
6317: POP
6318: POP
// end ;
6319: LD_VAR 0 3
6323: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6324: LD_INT 0
6326: PPUSH
6327: PPUSH
6328: PPUSH
6329: PPUSH
// for i = 1 to count do
6330: LD_ADDR_VAR 0 8
6334: PUSH
6335: DOUBLE
6336: LD_INT 1
6338: DEC
6339: ST_TO_ADDR
6340: LD_VAR 0 6
6344: PUSH
6345: FOR_TO
6346: IFFALSE 6427
// begin uc_side = side ;
6348: LD_ADDR_OWVAR 20
6352: PUSH
6353: LD_VAR 0 1
6357: ST_TO_ADDR
// uc_nation = nation ;
6358: LD_ADDR_OWVAR 21
6362: PUSH
6363: LD_VAR 0 2
6367: ST_TO_ADDR
// hc_gallery =  ;
6368: LD_ADDR_OWVAR 33
6372: PUSH
6373: LD_STRING 
6375: ST_TO_ADDR
// hc_name =  ;
6376: LD_ADDR_OWVAR 26
6380: PUSH
6381: LD_STRING 
6383: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6384: LD_INT 0
6386: PPUSH
6387: LD_VAR 0 5
6391: PPUSH
6392: LD_VAR 0 4
6396: PPUSH
6397: CALL_OW 380
// un = CreateHuman ;
6401: LD_ADDR_VAR 0 10
6405: PUSH
6406: CALL_OW 44
6410: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6411: LD_VAR 0 10
6415: PPUSH
6416: LD_VAR 0 3
6420: PPUSH
6421: CALL_OW 52
// end ;
6425: GO 6345
6427: POP
6428: POP
// end ;
6429: LD_VAR 0 7
6433: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// uc_side := GetSide ( b ) ;
6439: LD_ADDR_OWVAR 20
6443: PUSH
6444: LD_VAR 0 2
6448: PPUSH
6449: CALL_OW 255
6453: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6454: LD_ADDR_OWVAR 21
6458: PUSH
6459: LD_VAR 0 2
6463: PPUSH
6464: CALL_OW 248
6468: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6469: LD_INT 0
6471: PPUSH
6472: LD_INT 1
6474: PPUSH
6475: LD_VAR 0 1
6479: PPUSH
6480: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6484: LD_ADDR_VAR 0 5
6488: PUSH
6489: LD_VAR 0 2
6493: PPUSH
6494: CALL_OW 254
6498: PUSH
6499: LD_INT 3
6501: MINUS
6502: ST_TO_ADDR
// if dir < 0 then
6503: LD_VAR 0 5
6507: PUSH
6508: LD_INT 0
6510: LESS
6511: IFFALSE 6527
// dir := 6 + dir ;
6513: LD_ADDR_VAR 0 5
6517: PUSH
6518: LD_INT 6
6520: PUSH
6521: LD_VAR 0 5
6525: PLUS
6526: ST_TO_ADDR
// un := CreateHuman ;
6527: LD_ADDR_VAR 0 4
6531: PUSH
6532: CALL_OW 44
6536: ST_TO_ADDR
// SetDir ( un , dir ) ;
6537: LD_VAR 0 4
6541: PPUSH
6542: LD_VAR 0 5
6546: PPUSH
6547: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6551: LD_VAR 0 4
6555: PPUSH
6556: LD_VAR 0 2
6560: PPUSH
6561: CALL_OW 52
// end ;
6565: LD_VAR 0 3
6569: RET
// export function PrepareDifficulty ; begin
6570: LD_INT 0
6572: PPUSH
// if Difficulty = 1 then
6573: LD_OWVAR 67
6577: PUSH
6578: LD_INT 1
6580: EQUAL
6581: IFFALSE 6599
// begin RuSolMinLevel = 2 ;
6583: LD_ADDR_EXP 34
6587: PUSH
6588: LD_INT 2
6590: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6591: LD_ADDR_EXP 35
6595: PUSH
6596: LD_INT 3
6598: ST_TO_ADDR
// end ; if Difficulty = 2 then
6599: LD_OWVAR 67
6603: PUSH
6604: LD_INT 2
6606: EQUAL
6607: IFFALSE 6625
// begin RuSolMinLevel = 3 ;
6609: LD_ADDR_EXP 34
6613: PUSH
6614: LD_INT 3
6616: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6617: LD_ADDR_EXP 35
6621: PUSH
6622: LD_INT 5
6624: ST_TO_ADDR
// end ; if Difficulty = 3 then
6625: LD_OWVAR 67
6629: PUSH
6630: LD_INT 3
6632: EQUAL
6633: IFFALSE 6651
// begin RuSolMinLevel = 4 ;
6635: LD_ADDR_EXP 34
6639: PUSH
6640: LD_INT 4
6642: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6643: LD_ADDR_EXP 35
6647: PUSH
6648: LD_INT 6
6650: ST_TO_ADDR
// end ; end ;
6651: LD_VAR 0 1
6655: RET
// export function ShowQuery1 ; begin
6656: LD_INT 0
6658: PPUSH
// case query ( QKill ) of 1 :
6659: LD_STRING QKill
6661: PPUSH
6662: CALL_OW 97
6666: PUSH
6667: LD_INT 1
6669: DOUBLE
6670: EQUAL
6671: IFTRUE 6675
6673: GO 6686
6675: POP
// begin result = 1 ;
6676: LD_ADDR_VAR 0 1
6680: PUSH
6681: LD_INT 1
6683: ST_TO_ADDR
// end ; 2 :
6684: GO 6725
6686: LD_INT 2
6688: DOUBLE
6689: EQUAL
6690: IFTRUE 6694
6692: GO 6705
6694: POP
// begin result = 2 ;
6695: LD_ADDR_VAR 0 1
6699: PUSH
6700: LD_INT 2
6702: ST_TO_ADDR
// end ; 3 :
6703: GO 6725
6705: LD_INT 3
6707: DOUBLE
6708: EQUAL
6709: IFTRUE 6713
6711: GO 6724
6713: POP
// begin result = 3 ;
6714: LD_ADDR_VAR 0 1
6718: PUSH
6719: LD_INT 3
6721: ST_TO_ADDR
// end ; end ;
6722: GO 6725
6724: POP
// end ;
6725: LD_VAR 0 1
6729: RET
// export function ShowQuery2 ; begin
6730: LD_INT 0
6732: PPUSH
// case query ( QKill2 ) of 1 :
6733: LD_STRING QKill2
6735: PPUSH
6736: CALL_OW 97
6740: PUSH
6741: LD_INT 1
6743: DOUBLE
6744: EQUAL
6745: IFTRUE 6749
6747: GO 6760
6749: POP
// begin result = 1 ;
6750: LD_ADDR_VAR 0 1
6754: PUSH
6755: LD_INT 1
6757: ST_TO_ADDR
// end ; 2 :
6758: GO 6780
6760: LD_INT 2
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6779
6768: POP
// begin result = 2 ;
6769: LD_ADDR_VAR 0 1
6773: PUSH
6774: LD_INT 2
6776: ST_TO_ADDR
// end ; end ;
6777: GO 6780
6779: POP
// end ;
6780: LD_VAR 0 1
6784: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6785: LD_INT 0
6787: PPUSH
6788: PPUSH
6789: PPUSH
6790: PPUSH
6791: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6792: LD_ADDR_VAR 0 8
6796: PUSH
6797: LD_INT 48
6799: PUSH
6800: LD_INT 49
6802: PUSH
6803: LD_INT 50
6805: PUSH
6806: LD_INT 20
6808: PUSH
6809: LD_INT 1
6811: PUSH
6812: LD_INT 51
6814: PUSH
6815: LD_INT 52
6817: PUSH
6818: LD_INT 69
6820: PUSH
6821: LD_INT 39
6823: PUSH
6824: LD_INT 34
6826: PUSH
6827: LD_INT 40
6829: PUSH
6830: LD_INT 53
6832: PUSH
6833: LD_INT 71
6835: PUSH
6836: LD_INT 57
6838: PUSH
6839: LD_INT 58
6841: PUSH
6842: LD_INT 44
6844: PUSH
6845: LD_INT 32
6847: PUSH
6848: LD_INT 27
6850: PUSH
6851: LD_INT 23
6853: PUSH
6854: LD_INT 33
6856: PUSH
6857: LD_INT 59
6859: PUSH
6860: LD_INT 54
6862: PUSH
6863: LD_INT 55
6865: PUSH
6866: LD_INT 56
6868: PUSH
6869: LD_INT 63
6871: PUSH
6872: LD_INT 64
6874: PUSH
6875: LD_INT 65
6877: PUSH
6878: LD_INT 30
6880: PUSH
6881: LD_INT 31
6883: PUSH
6884: LD_INT 21
6886: PUSH
6887: LD_INT 22
6889: PUSH
6890: LD_INT 25
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6927: LD_ADDR_VAR 0 5
6931: PUSH
6932: DOUBLE
6933: LD_INT 1
6935: DEC
6936: ST_TO_ADDR
6937: LD_VAR 0 8
6941: PUSH
6942: FOR_TO
6943: IFFALSE 7019
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6945: LD_VAR 0 8
6949: PUSH
6950: LD_VAR 0 5
6954: ARRAY
6955: PPUSH
6956: LD_VAR 0 1
6960: PPUSH
6961: CALL_OW 321
6965: PUSH
6966: LD_INT 1
6968: EQUAL
6969: PUSH
6970: LD_VAR 0 8
6974: PUSH
6975: LD_VAR 0 5
6979: ARRAY
6980: PPUSH
6981: LD_VAR 0 3
6985: PPUSH
6986: CALL_OW 482
6990: PUSH
6991: LD_INT 1
6993: EQUAL
6994: AND
6995: IFFALSE 7017
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6997: LD_VAR 0 2
7001: PPUSH
7002: LD_VAR 0 8
7006: PUSH
7007: LD_VAR 0 5
7011: ARRAY
7012: PPUSH
7013: CALL_OW 184
7017: GO 6942
7019: POP
7020: POP
// end ;
7021: LD_VAR 0 4
7025: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7026: LD_INT 0
7028: PPUSH
7029: PPUSH
7030: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7031: LD_INT 22
7033: PUSH
7034: LD_VAR 0 1
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 21
7045: PUSH
7046: LD_INT 2
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PPUSH
7057: CALL_OW 69
7061: PUSH
7062: LD_VAR 0 3
7066: LESSEQUAL
7067: IFFALSE 7175
// begin for i = 1 to vehCount do
7069: LD_ADDR_VAR 0 9
7073: PUSH
7074: DOUBLE
7075: LD_INT 1
7077: DEC
7078: ST_TO_ADDR
7079: LD_VAR 0 3
7083: PUSH
7084: FOR_TO
7085: IFFALSE 7173
// begin weapon = weaponTab [ i ] ;
7087: LD_ADDR_VAR 0 10
7091: PUSH
7092: LD_VAR 0 4
7096: PUSH
7097: LD_VAR 0 9
7101: ARRAY
7102: ST_TO_ADDR
// if weapon = 46 then
7103: LD_VAR 0 10
7107: PUSH
7108: LD_INT 46
7110: EQUAL
7111: IFFALSE 7142
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7113: LD_VAR 0 2
7117: PPUSH
7118: LD_INT 24
7120: PPUSH
7121: LD_VAR 0 5
7125: PPUSH
7126: LD_VAR 0 6
7130: PPUSH
7131: LD_VAR 0 10
7135: PPUSH
7136: CALL_OW 185
// end else
7140: GO 7171
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7142: LD_VAR 0 2
7146: PPUSH
7147: LD_VAR 0 7
7151: PPUSH
7152: LD_VAR 0 5
7156: PPUSH
7157: LD_VAR 0 6
7161: PPUSH
7162: LD_VAR 0 10
7166: PPUSH
7167: CALL_OW 185
// end ; end ;
7171: GO 7084
7173: POP
7174: POP
// end ; end ;
7175: LD_VAR 0 8
7179: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7180: LD_INT 0
7182: PPUSH
7183: PPUSH
7184: PPUSH
7185: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7186: LD_ADDR_VAR 0 8
7190: PUSH
7191: LD_INT 22
7193: PUSH
7194: LD_VAR 0 1
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 21
7205: PUSH
7206: LD_INT 2
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 3
7215: PUSH
7216: LD_INT 24
7218: PUSH
7219: LD_INT 650
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: PPUSH
7235: CALL_OW 69
7239: ST_TO_ADDR
// if damageVehicles > 0 then
7240: LD_VAR 0 8
7244: PUSH
7245: LD_INT 0
7247: GREATER
7248: IFFALSE 7269
// ComMoveXY ( damageVehicles , repX , repY ) ;
7250: LD_VAR 0 8
7254: PPUSH
7255: LD_VAR 0 3
7259: PPUSH
7260: LD_VAR 0 4
7264: PPUSH
7265: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7269: LD_VAR 0 8
7273: PPUSH
7274: LD_INT 95
7276: PUSH
7277: LD_VAR 0 2
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: LD_INT 3
7288: PUSH
7289: LD_INT 58
7291: PUSH
7292: EMPTY
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PPUSH
7303: CALL_OW 72
7307: PUSH
7308: LD_INT 0
7310: GREATER
7311: IFFALSE 7378
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7313: LD_ADDR_VAR 0 6
7317: PUSH
7318: LD_VAR 0 8
7322: PPUSH
7323: LD_INT 95
7325: PUSH
7326: LD_VAR 0 2
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 3
7337: PUSH
7338: LD_INT 58
7340: PUSH
7341: EMPTY
7342: LIST
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PPUSH
7352: CALL_OW 72
7356: PUSH
7357: FOR_IN
7358: IFFALSE 7376
// ComExitVehicle ( UnitsInside ( i ) ) ;
7360: LD_VAR 0 6
7364: PPUSH
7365: CALL_OW 313
7369: PPUSH
7370: CALL_OW 121
7374: GO 7357
7376: POP
7377: POP
// end ;
7378: LD_VAR 0 5
7382: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7383: LD_INT 0
7385: PPUSH
7386: PPUSH
7387: PPUSH
7388: PPUSH
7389: PPUSH
7390: PPUSH
7391: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7392: LD_ADDR_VAR 0 8
7396: PUSH
7397: LD_INT 22
7399: PUSH
7400: LD_VAR 0 1
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 21
7411: PUSH
7412: LD_INT 2
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: LD_INT 24
7421: PUSH
7422: LD_INT 660
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: PUSH
7429: LD_INT 3
7431: PUSH
7432: LD_INT 58
7434: PUSH
7435: EMPTY
7436: LIST
7437: PUSH
7438: LD_INT 2
7440: PUSH
7441: LD_INT 34
7443: PUSH
7444: LD_INT 43
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: LD_INT 34
7453: PUSH
7454: LD_INT 44
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 34
7463: PUSH
7464: LD_INT 46
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: LIST
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: PPUSH
7488: CALL_OW 69
7492: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7493: LD_INT 22
7495: PUSH
7496: LD_VAR 0 1
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 21
7507: PUSH
7508: LD_INT 2
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 24
7517: PUSH
7518: LD_INT 1000
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 3
7527: PUSH
7528: LD_INT 58
7530: PUSH
7531: EMPTY
7532: LIST
7533: PUSH
7534: LD_INT 2
7536: PUSH
7537: LD_INT 34
7539: PUSH
7540: LD_INT 43
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 34
7549: PUSH
7550: LD_INT 44
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 34
7559: PUSH
7560: LD_INT 46
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: LIST
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PPUSH
7584: CALL_OW 69
7588: PUSH
7589: LD_INT 5
7591: PUSH
7592: LD_INT 6
7594: PUSH
7595: LD_INT 6
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: LIST
7602: PUSH
7603: LD_OWVAR 67
7607: ARRAY
7608: EQUAL
7609: IFFALSE 7865
// if seeEnemy = 0 then
7611: LD_VAR 0 11
7615: PUSH
7616: LD_INT 0
7618: EQUAL
7619: IFFALSE 7865
// repeat wait ( 0 0$1 ) ;
7621: LD_INT 35
7623: PPUSH
7624: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7628: LD_ADDR_VAR 0 8
7632: PUSH
7633: LD_INT 22
7635: PUSH
7636: LD_VAR 0 1
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 21
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 24
7657: PUSH
7658: LD_INT 660
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 3
7667: PUSH
7668: LD_INT 58
7670: PUSH
7671: EMPTY
7672: LIST
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: LD_INT 34
7679: PUSH
7680: LD_INT 43
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 34
7689: PUSH
7690: LD_INT 44
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 34
7699: PUSH
7700: LD_INT 46
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: PPUSH
7724: CALL_OW 69
7728: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7729: LD_INT 22
7731: PUSH
7732: LD_VAR 0 1
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: LD_INT 95
7743: PUSH
7744: LD_VAR 0 2
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PPUSH
7757: CALL_OW 69
7761: NOT
7762: PUSH
7763: LD_VAR 0 11
7767: PUSH
7768: LD_INT 0
7770: EQUAL
7771: AND
7772: IFFALSE 7827
// for i := 1 to wayX do
7774: LD_ADDR_VAR 0 6
7778: PUSH
7779: DOUBLE
7780: LD_INT 1
7782: DEC
7783: ST_TO_ADDR
7784: LD_VAR 0 3
7788: PUSH
7789: FOR_TO
7790: IFFALSE 7825
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7792: LD_VAR 0 8
7796: PPUSH
7797: LD_VAR 0 3
7801: PUSH
7802: LD_VAR 0 6
7806: ARRAY
7807: PPUSH
7808: LD_VAR 0 4
7812: PUSH
7813: LD_VAR 0 6
7817: ARRAY
7818: PPUSH
7819: CALL_OW 114
7823: GO 7789
7825: POP
7826: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7827: LD_INT 22
7829: PUSH
7830: LD_VAR 0 1
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 95
7841: PUSH
7842: LD_VAR 0 2
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PPUSH
7855: CALL_OW 69
7859: PUSH
7860: LD_INT 0
7862: GREATER
7863: IFFALSE 7621
// seeEnemy = 1 ;
7865: LD_ADDR_VAR 0 11
7869: PUSH
7870: LD_INT 1
7872: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7873: LD_INT 35
7875: PPUSH
7876: CALL_OW 67
// for j in vehiclesOK do
7880: LD_ADDR_VAR 0 7
7884: PUSH
7885: LD_VAR 0 8
7889: PUSH
7890: FOR_IN
7891: IFFALSE 8104
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7893: LD_ADDR_VAR 0 9
7897: PUSH
7898: LD_INT 81
7900: PUSH
7901: LD_VAR 0 1
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 101
7912: PUSH
7913: LD_INT 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PUSH
7929: LD_EXP 45
7933: DIFF
7934: PPUSH
7935: LD_VAR 0 7
7939: PPUSH
7940: CALL_OW 74
7944: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7945: LD_ADDR_VAR 0 10
7949: PUSH
7950: LD_INT 81
7952: PUSH
7953: LD_VAR 0 1
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PUSH
7962: LD_INT 101
7964: PUSH
7965: LD_INT 1
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 2
7974: PUSH
7975: LD_INT 59
7977: PUSH
7978: EMPTY
7979: LIST
7980: PUSH
7981: LD_INT 21
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 21
7993: PUSH
7994: LD_INT 2
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: PPUSH
8015: CALL_OW 69
8019: PUSH
8020: LD_EXP 45
8024: DIFF
8025: PPUSH
8026: LD_VAR 0 7
8030: PPUSH
8031: CALL_OW 74
8035: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
8036: LD_VAR 0 7
8040: PPUSH
8041: LD_VAR 0 9
8045: PPUSH
8046: CALL_OW 296
8050: PUSH
8051: LD_INT 8
8053: PLUS
8054: PUSH
8055: LD_VAR 0 7
8059: PPUSH
8060: LD_VAR 0 10
8064: PPUSH
8065: CALL_OW 296
8069: LESS
8070: IFFALSE 8088
// ComAttackUnit ( j , target1 ) else
8072: LD_VAR 0 7
8076: PPUSH
8077: LD_VAR 0 9
8081: PPUSH
8082: CALL_OW 115
8086: GO 8102
// ComAttackUnit ( j , target2 ) ;
8088: LD_VAR 0 7
8092: PPUSH
8093: LD_VAR 0 10
8097: PPUSH
8098: CALL_OW 115
// end ;
8102: GO 7890
8104: POP
8105: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
8106: LD_INT 22
8108: PUSH
8109: LD_VAR 0 1
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 21
8120: PUSH
8121: LD_INT 2
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: LD_INT 24
8130: PUSH
8131: LD_INT 1000
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 3
8140: PUSH
8141: LD_INT 58
8143: PUSH
8144: EMPTY
8145: LIST
8146: PUSH
8147: LD_INT 2
8149: PUSH
8150: LD_INT 34
8152: PUSH
8153: LD_INT 43
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: LD_INT 34
8162: PUSH
8163: LD_INT 44
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 34
8172: PUSH
8173: LD_INT 46
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: PPUSH
8197: CALL_OW 69
8201: PUSH
8202: LD_INT 0
8204: EQUAL
8205: IFFALSE 7873
// seeEnemy = 0 ;
8207: LD_ADDR_VAR 0 11
8211: PUSH
8212: LD_INT 0
8214: ST_TO_ADDR
// end ;
8215: LD_VAR 0 5
8219: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8220: LD_INT 0
8222: PPUSH
8223: PPUSH
8224: PPUSH
8225: PPUSH
8226: PPUSH
8227: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8228: LD_ADDR_VAR 0 8
8232: PUSH
8233: LD_VAR 0 2
8237: PPUSH
8238: CALL_OW 313
8242: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8243: LD_ADDR_VAR 0 9
8247: PUSH
8248: LD_VAR 0 3
8252: PPUSH
8253: LD_INT 22
8255: PUSH
8256: LD_VAR 0 1
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: LD_INT 25
8267: PUSH
8268: LD_INT 2
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: LD_INT 24
8277: PUSH
8278: LD_INT 750
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: LD_INT 3
8287: PUSH
8288: LD_INT 54
8290: PUSH
8291: EMPTY
8292: LIST
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: PPUSH
8304: CALL_OW 70
8308: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8309: LD_ADDR_VAR 0 6
8313: PUSH
8314: LD_VAR 0 3
8318: PPUSH
8319: LD_INT 22
8321: PUSH
8322: LD_VAR 0 1
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: LD_INT 21
8333: PUSH
8334: LD_INT 3
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: LD_INT 3
8343: PUSH
8344: LD_INT 24
8346: PUSH
8347: LD_INT 1000
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: PPUSH
8366: CALL_OW 70
8370: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8371: LD_VAR 0 6
8375: NOT
8376: PUSH
8377: LD_INT 22
8379: PUSH
8380: LD_VAR 0 1
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 25
8391: PUSH
8392: LD_INT 2
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: LD_INT 24
8401: PUSH
8402: LD_INT 250
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: PPUSH
8414: CALL_OW 69
8418: NOT
8419: AND
8420: IFFALSE 8424
// exit ;
8422: GO 8606
// if buildings_list > 0 and engineerOkInside then
8424: LD_VAR 0 6
8428: PUSH
8429: LD_INT 0
8431: GREATER
8432: PUSH
8433: LD_VAR 0 8
8437: AND
8438: IFFALSE 8449
// ComExitBuilding ( engineerOkInside ) ;
8440: LD_VAR 0 8
8444: PPUSH
8445: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8449: LD_VAR 0 6
8453: PUSH
8454: LD_INT 0
8456: GREATER
8457: PUSH
8458: LD_VAR 0 9
8462: PUSH
8463: LD_INT 0
8465: GREATER
8466: AND
8467: IFFALSE 8487
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8469: LD_VAR 0 9
8473: PPUSH
8474: LD_VAR 0 6
8478: PUSH
8479: LD_INT 1
8481: ARRAY
8482: PPUSH
8483: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8487: LD_VAR 0 6
8491: PUSH
8492: LD_INT 0
8494: EQUAL
8495: PUSH
8496: LD_VAR 0 4
8500: PUSH
8501: LD_INT 0
8503: EQUAL
8504: AND
8505: PUSH
8506: LD_VAR 0 9
8510: PUSH
8511: LD_INT 0
8513: GREATER
8514: AND
8515: IFFALSE 8531
// ComEnterUnit ( engineerOkOutside , building ) ;
8517: LD_VAR 0 9
8521: PPUSH
8522: LD_VAR 0 2
8526: PPUSH
8527: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8531: LD_VAR 0 9
8535: PUSH
8536: LD_INT 0
8538: GREATER
8539: PUSH
8540: LD_VAR 0 6
8544: PUSH
8545: LD_INT 0
8547: EQUAL
8548: AND
8549: PUSH
8550: LD_VAR 0 4
8554: PUSH
8555: LD_INT 0
8557: GREATER
8558: AND
8559: IFFALSE 8606
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8561: LD_VAR 0 9
8565: PPUSH
8566: LD_VAR 0 4
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: LD_VAR 0 4
8579: PUSH
8580: LD_INT 2
8582: ARRAY
8583: PPUSH
8584: LD_VAR 0 4
8588: PUSH
8589: LD_INT 3
8591: ARRAY
8592: PPUSH
8593: LD_VAR 0 4
8597: PUSH
8598: LD_INT 4
8600: ARRAY
8601: PPUSH
8602: CALL_OW 145
// end ;
8606: LD_VAR 0 5
8610: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8611: LD_INT 0
8613: PPUSH
8614: PPUSH
8615: PPUSH
8616: PPUSH
8617: PPUSH
8618: PPUSH
8619: PPUSH
8620: PPUSH
8621: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8622: LD_ADDR_VAR 0 6
8626: PUSH
8627: LD_INT 22
8629: PUSH
8630: LD_VAR 0 1
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: LD_INT 25
8641: PUSH
8642: LD_INT 4
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 23
8651: PUSH
8652: LD_INT 2
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 24
8661: PUSH
8662: LD_INT 251
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: PPUSH
8675: CALL_OW 69
8679: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8680: LD_ADDR_VAR 0 7
8684: PUSH
8685: LD_VAR 0 3
8689: PPUSH
8690: LD_INT 22
8692: PUSH
8693: LD_VAR 0 1
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 23
8704: PUSH
8705: LD_INT 2
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: LD_INT 25
8714: PUSH
8715: LD_INT 4
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 50
8724: PUSH
8725: EMPTY
8726: LIST
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 70
8738: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8739: LD_ADDR_VAR 0 10
8743: PUSH
8744: LD_VAR 0 3
8748: PPUSH
8749: LD_INT 22
8751: PUSH
8752: LD_VAR 0 1
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PUSH
8761: LD_INT 21
8763: PUSH
8764: LD_INT 1
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PUSH
8771: LD_INT 3
8773: PUSH
8774: LD_INT 25
8776: PUSH
8777: LD_INT 3
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 3
8790: PUSH
8791: LD_INT 24
8793: PUSH
8794: LD_INT 750
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: PPUSH
8811: CALL_OW 70
8815: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8816: LD_ADDR_VAR 0 11
8820: PUSH
8821: LD_VAR 0 2
8825: PPUSH
8826: LD_INT 22
8828: PUSH
8829: LD_VAR 0 1
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PUSH
8838: LD_INT 21
8840: PUSH
8841: LD_INT 1
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 3
8850: PUSH
8851: LD_INT 25
8853: PUSH
8854: LD_INT 3
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 3
8867: PUSH
8868: LD_INT 24
8870: PUSH
8871: LD_INT 1000
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: PPUSH
8888: CALL_OW 70
8892: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8893: LD_VAR 0 10
8897: NOT
8898: PUSH
8899: LD_VAR 0 11
8903: NOT
8904: AND
8905: PUSH
8906: LD_VAR 0 6
8910: NOT
8911: AND
8912: IFFALSE 8916
// exit ;
8914: GO 9150
// if damageUnits > 0 and sci_list > 0 then
8916: LD_VAR 0 10
8920: PUSH
8921: LD_INT 0
8923: GREATER
8924: PUSH
8925: LD_VAR 0 6
8929: PUSH
8930: LD_INT 0
8932: GREATER
8933: AND
8934: IFFALSE 8950
// ComMoveToArea ( damageUnits , healArea ) ;
8936: LD_VAR 0 10
8940: PPUSH
8941: LD_VAR 0 2
8945: PPUSH
8946: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8950: LD_VAR 0 11
8954: PUSH
8955: LD_INT 0
8957: GREATER
8958: PUSH
8959: LD_VAR 0 6
8963: PUSH
8964: LD_INT 0
8966: GREATER
8967: AND
8968: IFFALSE 8979
// ComExitBuilding ( sci_list ) ;
8970: LD_VAR 0 6
8974: PPUSH
8975: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8979: LD_VAR 0 11
8983: PUSH
8984: LD_INT 0
8986: GREATER
8987: PUSH
8988: LD_VAR 0 7
8992: PUSH
8993: LD_INT 0
8995: GREATER
8996: AND
8997: IFFALSE 9017
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8999: LD_VAR 0 7
9003: PPUSH
9004: LD_VAR 0 11
9008: PUSH
9009: LD_INT 1
9011: ARRAY
9012: PPUSH
9013: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
9017: LD_VAR 0 10
9021: PUSH
9022: LD_INT 0
9024: EQUAL
9025: PUSH
9026: LD_VAR 0 11
9030: PUSH
9031: LD_INT 0
9033: EQUAL
9034: AND
9035: PUSH
9036: LD_VAR 0 7
9040: PUSH
9041: LD_INT 0
9043: GREATER
9044: AND
9045: IFFALSE 9150
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9047: LD_ADDR_VAR 0 12
9051: PUSH
9052: LD_INT 22
9054: PUSH
9055: LD_VAR 0 1
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: LD_INT 21
9066: PUSH
9067: LD_INT 3
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 30
9076: PUSH
9077: LD_INT 8
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: PPUSH
9089: CALL_OW 69
9093: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
9094: LD_ADDR_VAR 0 13
9098: PUSH
9099: LD_INT 1
9101: PPUSH
9102: LD_VAR 0 12
9106: PPUSH
9107: CALL_OW 12
9111: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9112: LD_VAR 0 7
9116: PPUSH
9117: LD_INT 3
9119: PUSH
9120: LD_INT 60
9122: PUSH
9123: EMPTY
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PPUSH
9130: CALL_OW 72
9134: PPUSH
9135: LD_VAR 0 12
9139: PUSH
9140: LD_VAR 0 13
9144: ARRAY
9145: PPUSH
9146: CALL_OW 120
// end ; end ;
9150: LD_VAR 0 5
9154: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
9155: LD_INT 0
9157: PPUSH
9158: PPUSH
9159: PPUSH
9160: PPUSH
// tmpTab = [ ] ;
9161: LD_ADDR_VAR 0 6
9165: PUSH
9166: EMPTY
9167: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
9168: LD_INT 22
9170: PUSH
9171: LD_VAR 0 1
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PUSH
9180: LD_INT 30
9182: PUSH
9183: LD_INT 32
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PPUSH
9194: CALL_OW 69
9198: PUSH
9199: LD_INT 0
9201: GREATER
9202: IFFALSE 9285
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9204: LD_ADDR_VAR 0 4
9208: PUSH
9209: LD_INT 22
9211: PUSH
9212: LD_VAR 0 1
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 30
9223: PUSH
9224: LD_INT 32
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PUSH
9240: FOR_IN
9241: IFFALSE 9283
// begin for j in UnitsInside ( i ) do
9243: LD_ADDR_VAR 0 5
9247: PUSH
9248: LD_VAR 0 4
9252: PPUSH
9253: CALL_OW 313
9257: PUSH
9258: FOR_IN
9259: IFFALSE 9279
// tmpTab = tmpTab ^ j ;
9261: LD_ADDR_VAR 0 6
9265: PUSH
9266: LD_VAR 0 6
9270: PUSH
9271: LD_VAR 0 5
9275: ADD
9276: ST_TO_ADDR
9277: GO 9258
9279: POP
9280: POP
// end ;
9281: GO 9240
9283: POP
9284: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9285: LD_VAR 0 6
9289: PPUSH
9290: LD_VAR 0 2
9294: PPUSH
9295: CALL_OW 250
9299: PPUSH
9300: LD_VAR 0 2
9304: PPUSH
9305: CALL_OW 251
9309: PPUSH
9310: CALL_OW 114
// end ;
9314: LD_VAR 0 3
9318: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9319: LD_INT 0
9321: PPUSH
9322: PPUSH
9323: PPUSH
9324: PPUSH
// enable ;
9325: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9326: LD_ADDR_VAR 0 7
9330: PUSH
9331: LD_VAR 0 3
9335: PPUSH
9336: CALL_OW 435
9340: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9341: LD_ADDR_VAR 0 6
9345: PUSH
9346: LD_INT 22
9348: PUSH
9349: LD_VAR 0 1
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PUSH
9358: LD_INT 34
9360: PUSH
9361: LD_VAR 0 2
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PPUSH
9374: CALL_OW 69
9378: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9379: LD_VAR 0 6
9383: PUSH
9384: LD_INT 0
9386: GREATER
9387: PUSH
9388: LD_VAR 0 3
9392: PPUSH
9393: CALL_OW 435
9397: AND
9398: PUSH
9399: LD_VAR 0 7
9403: PUSH
9404: LD_INT 0
9406: GREATER
9407: AND
9408: IFFALSE 9457
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9410: LD_VAR 0 6
9414: PUSH
9415: LD_INT 1
9417: ARRAY
9418: PPUSH
9419: LD_VAR 0 7
9423: PUSH
9424: LD_INT 1
9426: ARRAY
9427: PPUSH
9428: LD_VAR 0 7
9432: PUSH
9433: LD_INT 2
9435: ARRAY
9436: PPUSH
9437: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9441: LD_VAR 0 6
9445: PUSH
9446: LD_INT 1
9448: ARRAY
9449: PPUSH
9450: LD_INT 100
9452: PPUSH
9453: CALL_OW 240
// end ; end ;
9457: LD_VAR 0 4
9461: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9462: LD_INT 0
9464: PPUSH
9465: PPUSH
9466: PPUSH
9467: PPUSH
9468: PPUSH
9469: PPUSH
9470: PPUSH
9471: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9472: LD_ADDR_VAR 0 6
9476: PUSH
9477: LD_VAR 0 2
9481: PPUSH
9482: LD_INT 22
9484: PUSH
9485: LD_VAR 0 1
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: LD_INT 56
9496: PUSH
9497: EMPTY
9498: LIST
9499: PUSH
9500: LD_INT 24
9502: PUSH
9503: LD_INT 700
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: LD_INT 3
9512: PUSH
9513: LD_INT 60
9515: PUSH
9516: EMPTY
9517: LIST
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: LD_INT 2
9525: PUSH
9526: LD_INT 25
9528: PUSH
9529: LD_INT 1
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_INT 25
9538: PUSH
9539: LD_INT 5
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 25
9548: PUSH
9549: LD_INT 8
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: LD_INT 25
9558: PUSH
9559: LD_INT 9
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: PPUSH
9580: CALL_OW 70
9584: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9585: LD_ADDR_VAR 0 7
9589: PUSH
9590: LD_VAR 0 2
9594: PPUSH
9595: LD_INT 22
9597: PUSH
9598: LD_VAR 0 1
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 30
9609: PUSH
9610: LD_INT 32
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 58
9619: PUSH
9620: EMPTY
9621: LIST
9622: PUSH
9623: LD_INT 24
9625: PUSH
9626: LD_INT 251
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: PPUSH
9639: CALL_OW 70
9643: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9644: LD_ADDR_VAR 0 9
9648: PUSH
9649: LD_VAR 0 2
9653: PPUSH
9654: LD_INT 22
9656: PUSH
9657: LD_VAR 0 1
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 2
9668: PUSH
9669: LD_INT 30
9671: PUSH
9672: LD_INT 4
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: PUSH
9679: LD_INT 30
9681: PUSH
9682: LD_INT 5
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 24
9696: PUSH
9697: LD_INT 251
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: PPUSH
9709: CALL_OW 70
9713: ST_TO_ADDR
// if barrackList > 0 then
9714: LD_VAR 0 9
9718: PUSH
9719: LD_INT 0
9721: GREATER
9722: IFFALSE 9870
// begin if turretList = 0 then
9724: LD_VAR 0 7
9728: PUSH
9729: LD_INT 0
9731: EQUAL
9732: IFFALSE 9774
// begin if soldiers_list > 0 then
9734: LD_VAR 0 6
9738: PUSH
9739: LD_INT 0
9741: GREATER
9742: IFFALSE 9772
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9744: LD_VAR 0 6
9748: PPUSH
9749: LD_VAR 0 9
9753: PUSH
9754: LD_INT 1
9756: PPUSH
9757: LD_VAR 0 9
9761: PPUSH
9762: CALL_OW 12
9766: ARRAY
9767: PPUSH
9768: CALL_OW 120
// end else
9772: GO 9870
// begin for i in barrackList do
9774: LD_ADDR_VAR 0 4
9778: PUSH
9779: LD_VAR 0 9
9783: PUSH
9784: FOR_IN
9785: IFFALSE 9868
// begin insideUnits = UnitsInside ( i ) ;
9787: LD_ADDR_VAR 0 10
9791: PUSH
9792: LD_VAR 0 4
9796: PPUSH
9797: CALL_OW 313
9801: ST_TO_ADDR
// if insideUnits > 0 then
9802: LD_VAR 0 10
9806: PUSH
9807: LD_INT 0
9809: GREATER
9810: IFFALSE 9834
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9812: LD_VAR 0 10
9816: PUSH
9817: LD_INT 1
9819: ARRAY
9820: PPUSH
9821: LD_VAR 0 7
9825: PUSH
9826: LD_INT 1
9828: ARRAY
9829: PPUSH
9830: CALL_OW 120
// if soldiers_list > 0 then
9834: LD_VAR 0 6
9838: PUSH
9839: LD_INT 0
9841: GREATER
9842: IFFALSE 9866
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9844: LD_VAR 0 6
9848: PUSH
9849: LD_INT 1
9851: ARRAY
9852: PPUSH
9853: LD_VAR 0 7
9857: PUSH
9858: LD_INT 1
9860: ARRAY
9861: PPUSH
9862: CALL_OW 120
// end ;
9866: GO 9784
9868: POP
9869: POP
// end ; end ; end ;
9870: LD_VAR 0 3
9874: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9875: LD_INT 0
9877: PPUSH
9878: PPUSH
9879: PPUSH
9880: PPUSH
9881: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9882: LD_ADDR_VAR 0 6
9886: PUSH
9887: LD_INT 22
9889: PUSH
9890: LD_VAR 0 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: LD_INT 2
9901: PUSH
9902: LD_INT 30
9904: PUSH
9905: LD_INT 31
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: LD_INT 30
9914: PUSH
9915: LD_INT 32
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 30
9924: PUSH
9925: LD_INT 33
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 30
9934: PUSH
9935: LD_INT 4
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: LD_INT 30
9944: PUSH
9945: LD_INT 5
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PPUSH
9964: CALL_OW 69
9968: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9969: LD_ADDR_VAR 0 7
9973: PUSH
9974: LD_INT 22
9976: PUSH
9977: LD_VAR 0 2
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: LD_INT 21
9988: PUSH
9989: LD_INT 3
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 58
9998: PUSH
9999: EMPTY
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
10012: LD_VAR 0 6
10016: PUSH
10017: LD_INT 0
10019: GREATER
10020: PUSH
10021: LD_VAR 0 7
10025: PUSH
10026: LD_INT 0
10028: GREATER
10029: AND
10030: IFFALSE 10100
// begin for i in turretsList do
10032: LD_ADDR_VAR 0 4
10036: PUSH
10037: LD_VAR 0 6
10041: PUSH
10042: FOR_IN
10043: IFFALSE 10098
// begin for j in enemyBuildings do
10045: LD_ADDR_VAR 0 5
10049: PUSH
10050: LD_VAR 0 7
10054: PUSH
10055: FOR_IN
10056: IFFALSE 10094
// begin if GetDistUnits ( i , j ) < 20 then
10058: LD_VAR 0 4
10062: PPUSH
10063: LD_VAR 0 5
10067: PPUSH
10068: CALL_OW 296
10072: PUSH
10073: LD_INT 20
10075: LESS
10076: IFFALSE 10092
// begin ComAttackUnit ( i , j ) ;
10078: LD_VAR 0 4
10082: PPUSH
10083: LD_VAR 0 5
10087: PPUSH
10088: CALL_OW 115
// end ; end ;
10092: GO 10055
10094: POP
10095: POP
// end ;
10096: GO 10042
10098: POP
10099: POP
// end ; end ;
10100: LD_VAR 0 3
10104: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
10105: LD_INT 0
10107: PPUSH
10108: PPUSH
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10113: LD_ADDR_VAR 0 8
10117: PUSH
10118: LD_INT 22
10120: PUSH
10121: LD_VAR 0 1
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 2
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: LD_INT 34
10142: PUSH
10143: LD_INT 52
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: LIST
10154: PPUSH
10155: CALL_OW 69
10159: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10160: LD_ADDR_VAR 0 9
10164: PUSH
10165: LD_INT 22
10167: PUSH
10168: LD_VAR 0 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 3
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 3
10189: PUSH
10190: LD_INT 24
10192: PUSH
10193: LD_INT 1000
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: PPUSH
10212: CALL_OW 69
10216: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10217: LD_VAR 0 9
10221: PUSH
10222: LD_INT 0
10224: GREATER
10225: PUSH
10226: LD_VAR 0 8
10230: PPUSH
10231: LD_INT 24
10233: PUSH
10234: LD_INT 750
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PPUSH
10241: CALL_OW 72
10245: PUSH
10246: LD_INT 0
10248: GREATER
10249: AND
10250: IFFALSE 10285
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10252: LD_VAR 0 8
10256: PPUSH
10257: LD_INT 24
10259: PUSH
10260: LD_INT 750
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PPUSH
10267: CALL_OW 72
10271: PPUSH
10272: LD_VAR 0 9
10276: PUSH
10277: LD_INT 1
10279: ARRAY
10280: PPUSH
10281: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10285: LD_VAR 0 8
10289: PPUSH
10290: LD_INT 3
10292: PUSH
10293: LD_INT 24
10295: PUSH
10296: LD_INT 750
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PPUSH
10307: CALL_OW 72
10311: PUSH
10312: LD_INT 0
10314: GREATER
10315: IFFALSE 10353
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10317: LD_VAR 0 8
10321: PPUSH
10322: LD_INT 3
10324: PUSH
10325: LD_INT 24
10327: PUSH
10328: LD_INT 750
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PPUSH
10339: CALL_OW 72
10343: PPUSH
10344: LD_VAR 0 2
10348: PPUSH
10349: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10353: LD_VAR 0 8
10357: PUSH
10358: LD_INT 0
10360: GREATER
10361: PUSH
10362: LD_VAR 0 9
10366: PUSH
10367: LD_INT 0
10369: EQUAL
10370: AND
10371: PUSH
10372: LD_VAR 0 3
10376: PUSH
10377: LD_INT 0
10379: GREATER
10380: AND
10381: IFFALSE 10428
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10383: LD_VAR 0 8
10387: PPUSH
10388: LD_VAR 0 3
10392: PUSH
10393: LD_INT 1
10395: ARRAY
10396: PPUSH
10397: LD_VAR 0 3
10401: PUSH
10402: LD_INT 2
10404: ARRAY
10405: PPUSH
10406: LD_VAR 0 3
10410: PUSH
10411: LD_INT 3
10413: ARRAY
10414: PPUSH
10415: LD_VAR 0 3
10419: PUSH
10420: LD_INT 4
10422: ARRAY
10423: PPUSH
10424: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10428: LD_VAR 0 2
10432: PPUSH
10433: LD_INT 22
10435: PUSH
10436: LD_VAR 0 1
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 21
10447: PUSH
10448: LD_INT 2
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: LD_INT 34
10457: PUSH
10458: LD_INT 52
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 3
10467: PUSH
10468: LD_INT 24
10470: PUSH
10471: LD_INT 750
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: PPUSH
10488: CALL_OW 70
10492: PUSH
10493: LD_INT 0
10495: GREATER
10496: IFFALSE 10698
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10498: LD_ADDR_VAR 0 5
10502: PUSH
10503: LD_VAR 0 2
10507: PPUSH
10508: LD_INT 22
10510: PUSH
10511: LD_VAR 0 1
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 21
10522: PUSH
10523: LD_INT 2
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: LD_INT 34
10532: PUSH
10533: LD_INT 52
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 3
10542: PUSH
10543: LD_INT 24
10545: PUSH
10546: LD_INT 750
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 70
10567: PUSH
10568: FOR_IN
10569: IFFALSE 10696
// begin mechTmp = UnitsInside ( i ) ;
10571: LD_ADDR_VAR 0 6
10575: PUSH
10576: LD_VAR 0 5
10580: PPUSH
10581: CALL_OW 313
10585: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10586: LD_VAR 0 6
10590: PPUSH
10591: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10595: LD_VAR 0 6
10599: PPUSH
10600: LD_VAR 0 7
10604: PPUSH
10605: CALL_OW 189
// wait ( 0 0$2 ) ;
10609: LD_INT 70
10611: PPUSH
10612: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10616: LD_VAR 0 6
10620: PPUSH
10621: LD_VAR 0 2
10625: PPUSH
10626: LD_INT 22
10628: PUSH
10629: LD_VAR 0 1
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 21
10640: PUSH
10641: LD_INT 2
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 34
10650: PUSH
10651: LD_INT 52
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 24
10660: PUSH
10661: LD_INT 1000
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 58
10670: PUSH
10671: EMPTY
10672: LIST
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: PPUSH
10681: CALL_OW 70
10685: PUSH
10686: LD_INT 1
10688: ARRAY
10689: PPUSH
10690: CALL_OW 180
// end ;
10694: GO 10568
10696: POP
10697: POP
// end ; end ;
10698: LD_VAR 0 4
10702: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10703: LD_INT 0
10705: PPUSH
10706: PPUSH
10707: PPUSH
10708: PPUSH
10709: PPUSH
10710: PPUSH
10711: PPUSH
10712: PPUSH
10713: PPUSH
10714: PPUSH
10715: PPUSH
// for i = 1 to medicCount do
10716: LD_ADDR_VAR 0 14
10720: PUSH
10721: DOUBLE
10722: LD_INT 1
10724: DEC
10725: ST_TO_ADDR
10726: LD_VAR 0 7
10730: PUSH
10731: FOR_TO
10732: IFFALSE 10814
// begin uc_side = side ;
10734: LD_ADDR_OWVAR 20
10738: PUSH
10739: LD_VAR 0 1
10743: ST_TO_ADDR
// uc_nation = nation ;
10744: LD_ADDR_OWVAR 21
10748: PUSH
10749: LD_VAR 0 2
10753: ST_TO_ADDR
// hc_name =  ;
10754: LD_ADDR_OWVAR 26
10758: PUSH
10759: LD_STRING 
10761: ST_TO_ADDR
// hc_gallery =  ;
10762: LD_ADDR_OWVAR 33
10766: PUSH
10767: LD_STRING 
10769: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10770: LD_INT 0
10772: PPUSH
10773: LD_INT 4
10775: PPUSH
10776: LD_VAR 0 8
10780: PPUSH
10781: CALL_OW 380
// un = CreateHuman ;
10785: LD_ADDR_VAR 0 16
10789: PUSH
10790: CALL_OW 44
10794: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10795: LD_VAR 0 16
10799: PPUSH
10800: LD_VAR 0 9
10804: PPUSH
10805: LD_INT 0
10807: PPUSH
10808: CALL_OW 49
// end ;
10812: GO 10731
10814: POP
10815: POP
// for i = 1 to soldierCount do
10816: LD_ADDR_VAR 0 14
10820: PUSH
10821: DOUBLE
10822: LD_INT 1
10824: DEC
10825: ST_TO_ADDR
10826: LD_VAR 0 3
10830: PUSH
10831: FOR_TO
10832: IFFALSE 10914
// begin uc_side = side ;
10834: LD_ADDR_OWVAR 20
10838: PUSH
10839: LD_VAR 0 1
10843: ST_TO_ADDR
// uc_nation = nation ;
10844: LD_ADDR_OWVAR 21
10848: PUSH
10849: LD_VAR 0 2
10853: ST_TO_ADDR
// hc_name =  ;
10854: LD_ADDR_OWVAR 26
10858: PUSH
10859: LD_STRING 
10861: ST_TO_ADDR
// hc_gallery =  ;
10862: LD_ADDR_OWVAR 33
10866: PUSH
10867: LD_STRING 
10869: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10870: LD_INT 0
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: LD_VAR 0 8
10880: PPUSH
10881: CALL_OW 380
// un = CreateHuman ;
10885: LD_ADDR_VAR 0 16
10889: PUSH
10890: CALL_OW 44
10894: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10895: LD_VAR 0 16
10899: PPUSH
10900: LD_VAR 0 9
10904: PPUSH
10905: LD_INT 0
10907: PPUSH
10908: CALL_OW 49
// end ;
10912: GO 10831
10914: POP
10915: POP
// for i = 1 to sniperCount do
10916: LD_ADDR_VAR 0 14
10920: PUSH
10921: DOUBLE
10922: LD_INT 1
10924: DEC
10925: ST_TO_ADDR
10926: LD_VAR 0 4
10930: PUSH
10931: FOR_TO
10932: IFFALSE 11014
// begin uc_side = side ;
10934: LD_ADDR_OWVAR 20
10938: PUSH
10939: LD_VAR 0 1
10943: ST_TO_ADDR
// uc_nation = nation ;
10944: LD_ADDR_OWVAR 21
10948: PUSH
10949: LD_VAR 0 2
10953: ST_TO_ADDR
// hc_name =  ;
10954: LD_ADDR_OWVAR 26
10958: PUSH
10959: LD_STRING 
10961: ST_TO_ADDR
// hc_gallery =  ;
10962: LD_ADDR_OWVAR 33
10966: PUSH
10967: LD_STRING 
10969: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10970: LD_INT 0
10972: PPUSH
10973: LD_INT 5
10975: PPUSH
10976: LD_VAR 0 8
10980: PPUSH
10981: CALL_OW 380
// un = CreateHuman ;
10985: LD_ADDR_VAR 0 16
10989: PUSH
10990: CALL_OW 44
10994: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10995: LD_VAR 0 16
10999: PPUSH
11000: LD_VAR 0 9
11004: PPUSH
11005: LD_INT 0
11007: PPUSH
11008: CALL_OW 49
// end ;
11012: GO 10931
11014: POP
11015: POP
// for i = 1 to bazookCount do
11016: LD_ADDR_VAR 0 14
11020: PUSH
11021: DOUBLE
11022: LD_INT 1
11024: DEC
11025: ST_TO_ADDR
11026: LD_VAR 0 5
11030: PUSH
11031: FOR_TO
11032: IFFALSE 11114
// begin uc_side = side ;
11034: LD_ADDR_OWVAR 20
11038: PUSH
11039: LD_VAR 0 1
11043: ST_TO_ADDR
// uc_nation = nation ;
11044: LD_ADDR_OWVAR 21
11048: PUSH
11049: LD_VAR 0 2
11053: ST_TO_ADDR
// hc_name =  ;
11054: LD_ADDR_OWVAR 26
11058: PUSH
11059: LD_STRING 
11061: ST_TO_ADDR
// hc_gallery =  ;
11062: LD_ADDR_OWVAR 33
11066: PUSH
11067: LD_STRING 
11069: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
11070: LD_INT 0
11072: PPUSH
11073: LD_INT 9
11075: PPUSH
11076: LD_VAR 0 8
11080: PPUSH
11081: CALL_OW 380
// un = CreateHuman ;
11085: LD_ADDR_VAR 0 16
11089: PUSH
11090: CALL_OW 44
11094: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11095: LD_VAR 0 16
11099: PPUSH
11100: LD_VAR 0 9
11104: PPUSH
11105: LD_INT 0
11107: PPUSH
11108: CALL_OW 49
// end ;
11112: GO 11031
11114: POP
11115: POP
// for i = 1 to mortalCount do
11116: LD_ADDR_VAR 0 14
11120: PUSH
11121: DOUBLE
11122: LD_INT 1
11124: DEC
11125: ST_TO_ADDR
11126: LD_VAR 0 6
11130: PUSH
11131: FOR_TO
11132: IFFALSE 11214
// begin uc_side = side ;
11134: LD_ADDR_OWVAR 20
11138: PUSH
11139: LD_VAR 0 1
11143: ST_TO_ADDR
// uc_nation = nation ;
11144: LD_ADDR_OWVAR 21
11148: PUSH
11149: LD_VAR 0 2
11153: ST_TO_ADDR
// hc_name =  ;
11154: LD_ADDR_OWVAR 26
11158: PUSH
11159: LD_STRING 
11161: ST_TO_ADDR
// hc_gallery =  ;
11162: LD_ADDR_OWVAR 33
11166: PUSH
11167: LD_STRING 
11169: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
11170: LD_INT 0
11172: PPUSH
11173: LD_INT 8
11175: PPUSH
11176: LD_VAR 0 8
11180: PPUSH
11181: CALL_OW 380
// un = CreateHuman ;
11185: LD_ADDR_VAR 0 16
11189: PUSH
11190: CALL_OW 44
11194: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11195: LD_VAR 0 16
11199: PPUSH
11200: LD_VAR 0 9
11204: PPUSH
11205: LD_INT 0
11207: PPUSH
11208: CALL_OW 49
// end ;
11212: GO 11131
11214: POP
11215: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11216: LD_ADDR_VAR 0 19
11220: PUSH
11221: LD_INT 22
11223: PUSH
11224: LD_VAR 0 1
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 2
11235: PUSH
11236: LD_INT 25
11238: PUSH
11239: LD_INT 1
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 25
11248: PUSH
11249: LD_INT 5
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 25
11258: PUSH
11259: LD_INT 8
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 25
11268: PUSH
11269: LD_INT 9
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PPUSH
11287: CALL_OW 69
11291: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11292: LD_ADDR_VAR 0 18
11296: PUSH
11297: LD_INT 22
11299: PUSH
11300: LD_VAR 0 1
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 25
11311: PUSH
11312: LD_INT 4
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PPUSH
11323: CALL_OW 69
11327: ST_TO_ADDR
// for i in medic_list do
11328: LD_ADDR_VAR 0 14
11332: PUSH
11333: LD_VAR 0 18
11337: PUSH
11338: FOR_IN
11339: IFFALSE 11357
// ComMoveToArea ( i , healArea ) ;
11341: LD_VAR 0 14
11345: PPUSH
11346: LD_VAR 0 10
11350: PPUSH
11351: CALL_OW 113
11355: GO 11338
11357: POP
11358: POP
// if strategy = 1 then
11359: LD_VAR 0 12
11363: PUSH
11364: LD_INT 1
11366: EQUAL
11367: IFFALSE 12084
// begin repeat wait ( 0 0$3 ) ;
11369: LD_INT 105
11371: PPUSH
11372: CALL_OW 67
// for i in soldiersOK_list do
11376: LD_ADDR_VAR 0 14
11380: PUSH
11381: LD_VAR 0 19
11385: PUSH
11386: FOR_IN
11387: IFFALSE 11421
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11389: LD_VAR 0 14
11393: PPUSH
11394: LD_INT 80
11396: PPUSH
11397: LD_INT 109
11399: PPUSH
11400: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11404: LD_VAR 0 14
11408: PPUSH
11409: LD_INT 39
11411: PPUSH
11412: LD_INT 49
11414: PPUSH
11415: CALL_OW 174
// end ;
11419: GO 11386
11421: POP
11422: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11423: LD_INT 13
11425: PPUSH
11426: LD_INT 22
11428: PUSH
11429: LD_VAR 0 1
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 70
11442: PUSH
11443: LD_INT 0
11445: GREATER
11446: IFFALSE 11369
// repeat wait ( 0 0$1 ) ;
11448: LD_INT 35
11450: PPUSH
11451: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11455: LD_ADDR_VAR 0 17
11459: PUSH
11460: LD_INT 22
11462: PUSH
11463: LD_VAR 0 1
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 1
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: LD_INT 24
11480: PUSH
11481: LD_INT 550
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 24
11494: PUSH
11495: LD_INT 250
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PPUSH
11511: CALL_OW 69
11515: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11516: LD_ADDR_VAR 0 19
11520: PUSH
11521: LD_INT 22
11523: PUSH
11524: LD_VAR 0 1
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 2
11535: PUSH
11536: LD_INT 25
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 25
11548: PUSH
11549: LD_INT 5
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 25
11558: PUSH
11559: LD_INT 8
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 25
11568: PUSH
11569: LD_INT 9
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 24
11585: PUSH
11586: LD_INT 1000
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: PPUSH
11598: CALL_OW 69
11602: ST_TO_ADDR
// if medicCount > 0 then
11603: LD_VAR 0 7
11607: PUSH
11608: LD_INT 0
11610: GREATER
11611: IFFALSE 11685
// begin if damageUnit_list > 0 then
11613: LD_VAR 0 17
11617: PUSH
11618: LD_INT 0
11620: GREATER
11621: IFFALSE 11685
// begin for i in damageUnit_list do
11623: LD_ADDR_VAR 0 14
11627: PUSH
11628: LD_VAR 0 17
11632: PUSH
11633: FOR_IN
11634: IFFALSE 11683
// begin ComMoveToArea ( i , healArea ) ;
11636: LD_VAR 0 14
11640: PPUSH
11641: LD_VAR 0 10
11645: PPUSH
11646: CALL_OW 113
// for j in medic_list do
11650: LD_ADDR_VAR 0 15
11654: PUSH
11655: LD_VAR 0 18
11659: PUSH
11660: FOR_IN
11661: IFFALSE 11679
// AddComHeal ( j , i ) ;
11663: LD_VAR 0 15
11667: PPUSH
11668: LD_VAR 0 14
11672: PPUSH
11673: CALL_OW 188
11677: GO 11660
11679: POP
11680: POP
// end ;
11681: GO 11633
11683: POP
11684: POP
// end ; end ; for i in soldiersOK_list do
11685: LD_ADDR_VAR 0 14
11689: PUSH
11690: LD_VAR 0 19
11694: PUSH
11695: FOR_IN
11696: IFFALSE 11878
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11698: LD_ADDR_VAR 0 22
11702: PUSH
11703: LD_INT 22
11705: PUSH
11706: LD_VAR 0 11
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PPUSH
11715: CALL_OW 69
11719: PUSH
11720: LD_EXP 45
11724: DIFF
11725: PPUSH
11726: LD_VAR 0 14
11730: PPUSH
11731: CALL_OW 74
11735: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11736: LD_ADDR_VAR 0 23
11740: PUSH
11741: LD_INT 22
11743: PUSH
11744: LD_VAR 0 11
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 2
11755: PUSH
11756: LD_INT 59
11758: PUSH
11759: EMPTY
11760: LIST
11761: PUSH
11762: LD_INT 21
11764: PUSH
11765: LD_INT 1
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 21
11774: PUSH
11775: LD_INT 2
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: PPUSH
11795: CALL_OW 69
11799: PPUSH
11800: LD_VAR 0 14
11804: PPUSH
11805: CALL_OW 74
11809: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11810: LD_VAR 0 14
11814: PPUSH
11815: LD_VAR 0 22
11819: PPUSH
11820: CALL_OW 296
11824: PUSH
11825: LD_INT 8
11827: PLUS
11828: PUSH
11829: LD_VAR 0 14
11833: PPUSH
11834: LD_VAR 0 23
11838: PPUSH
11839: CALL_OW 296
11843: LESS
11844: IFFALSE 11862
// begin ComAttackUnit ( i , target1 ) ;
11846: LD_VAR 0 14
11850: PPUSH
11851: LD_VAR 0 22
11855: PPUSH
11856: CALL_OW 115
// end else
11860: GO 11876
// begin ComAttackUnit ( i , target2 ) ;
11862: LD_VAR 0 14
11866: PPUSH
11867: LD_VAR 0 23
11871: PPUSH
11872: CALL_OW 115
// end ; end ;
11876: GO 11695
11878: POP
11879: POP
// for i in soldiersOK_list do
11880: LD_ADDR_VAR 0 14
11884: PUSH
11885: LD_VAR 0 19
11889: PUSH
11890: FOR_IN
11891: IFFALSE 12073
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11893: LD_ADDR_VAR 0 22
11897: PUSH
11898: LD_INT 22
11900: PUSH
11901: LD_VAR 0 11
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PPUSH
11910: CALL_OW 69
11914: PUSH
11915: LD_EXP 45
11919: DIFF
11920: PPUSH
11921: LD_VAR 0 14
11925: PPUSH
11926: CALL_OW 74
11930: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11931: LD_ADDR_VAR 0 23
11935: PUSH
11936: LD_INT 22
11938: PUSH
11939: LD_VAR 0 11
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: LD_INT 2
11950: PUSH
11951: LD_INT 59
11953: PUSH
11954: EMPTY
11955: LIST
11956: PUSH
11957: LD_INT 21
11959: PUSH
11960: LD_INT 1
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 21
11969: PUSH
11970: LD_INT 2
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: PPUSH
11990: CALL_OW 69
11994: PPUSH
11995: LD_VAR 0 14
11999: PPUSH
12000: CALL_OW 74
12004: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12005: LD_VAR 0 14
12009: PPUSH
12010: LD_VAR 0 22
12014: PPUSH
12015: CALL_OW 296
12019: PUSH
12020: LD_INT 8
12022: PLUS
12023: PUSH
12024: LD_VAR 0 14
12028: PPUSH
12029: LD_VAR 0 23
12033: PPUSH
12034: CALL_OW 296
12038: LESS
12039: IFFALSE 12057
// begin ComAttackUnit ( i , target1 ) ;
12041: LD_VAR 0 14
12045: PPUSH
12046: LD_VAR 0 22
12050: PPUSH
12051: CALL_OW 115
// end else
12055: GO 12071
// begin ComAttackUnit ( i , target2 ) ;
12057: LD_VAR 0 14
12061: PPUSH
12062: LD_VAR 0 23
12066: PPUSH
12067: CALL_OW 115
// end ; end ;
12071: GO 11890
12073: POP
12074: POP
// until soldiersOK_list = [ ] ;
12075: LD_VAR 0 19
12079: PUSH
12080: EMPTY
12081: EQUAL
12082: IFFALSE 11448
// end ; if strategy = 2 then
12084: LD_VAR 0 12
12088: PUSH
12089: LD_INT 2
12091: EQUAL
12092: IFFALSE 12797
// begin repeat wait ( 0 0$1 ) ;
12094: LD_INT 35
12096: PPUSH
12097: CALL_OW 67
// for i in soldiersOK_list do
12101: LD_ADDR_VAR 0 14
12105: PUSH
12106: LD_VAR 0 19
12110: PUSH
12111: FOR_IN
12112: IFFALSE 12146
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
12114: LD_VAR 0 14
12118: PPUSH
12119: LD_INT 117
12121: PPUSH
12122: LD_INT 97
12124: PPUSH
12125: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
12129: LD_VAR 0 14
12133: PPUSH
12134: LD_INT 94
12136: PPUSH
12137: LD_INT 50
12139: PPUSH
12140: CALL_OW 174
// end ;
12144: GO 12111
12146: POP
12147: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
12148: LD_INT 14
12150: PPUSH
12151: LD_INT 22
12153: PUSH
12154: LD_VAR 0 1
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 70
12167: PUSH
12168: LD_INT 0
12170: GREATER
12171: IFFALSE 12094
// repeat wait ( 0 0$3 ) ;
12173: LD_INT 105
12175: PPUSH
12176: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12180: LD_ADDR_VAR 0 17
12184: PUSH
12185: LD_INT 22
12187: PUSH
12188: LD_VAR 0 1
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 1
12199: PUSH
12200: LD_INT 3
12202: PUSH
12203: LD_INT 24
12205: PUSH
12206: LD_INT 550
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 24
12219: PUSH
12220: LD_INT 250
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PPUSH
12236: CALL_OW 69
12240: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12241: LD_ADDR_VAR 0 19
12245: PUSH
12246: LD_INT 22
12248: PUSH
12249: LD_VAR 0 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 2
12260: PUSH
12261: LD_INT 25
12263: PUSH
12264: LD_INT 1
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 25
12273: PUSH
12274: LD_INT 5
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 25
12283: PUSH
12284: LD_INT 8
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 25
12293: PUSH
12294: LD_INT 9
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 24
12310: PUSH
12311: LD_INT 1000
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 69
12327: ST_TO_ADDR
// if medicCount > 0 then
12328: LD_VAR 0 7
12332: PUSH
12333: LD_INT 0
12335: GREATER
12336: IFFALSE 12410
// begin if damageUnit_list > 0 then
12338: LD_VAR 0 17
12342: PUSH
12343: LD_INT 0
12345: GREATER
12346: IFFALSE 12410
// begin for i in damageUnit_list do
12348: LD_ADDR_VAR 0 14
12352: PUSH
12353: LD_VAR 0 17
12357: PUSH
12358: FOR_IN
12359: IFFALSE 12408
// begin ComMoveToArea ( i , healArea ) ;
12361: LD_VAR 0 14
12365: PPUSH
12366: LD_VAR 0 10
12370: PPUSH
12371: CALL_OW 113
// for j in medic_list do
12375: LD_ADDR_VAR 0 15
12379: PUSH
12380: LD_VAR 0 18
12384: PUSH
12385: FOR_IN
12386: IFFALSE 12404
// AddComHeal ( j , i ) ;
12388: LD_VAR 0 15
12392: PPUSH
12393: LD_VAR 0 14
12397: PPUSH
12398: CALL_OW 188
12402: GO 12385
12404: POP
12405: POP
// end ;
12406: GO 12358
12408: POP
12409: POP
// end ; end ; for i in soldiersOK_list do
12410: LD_ADDR_VAR 0 14
12414: PUSH
12415: LD_VAR 0 19
12419: PUSH
12420: FOR_IN
12421: IFFALSE 12597
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12423: LD_ADDR_VAR 0 22
12427: PUSH
12428: LD_INT 22
12430: PUSH
12431: LD_VAR 0 11
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PPUSH
12440: CALL_OW 69
12444: PPUSH
12445: LD_VAR 0 14
12449: PPUSH
12450: CALL_OW 74
12454: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12455: LD_ADDR_VAR 0 23
12459: PUSH
12460: LD_INT 22
12462: PUSH
12463: LD_VAR 0 11
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 2
12474: PUSH
12475: LD_INT 59
12477: PUSH
12478: EMPTY
12479: LIST
12480: PUSH
12481: LD_INT 21
12483: PUSH
12484: LD_INT 1
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 21
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: EMPTY
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PPUSH
12519: LD_VAR 0 14
12523: PPUSH
12524: CALL_OW 74
12528: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12529: LD_VAR 0 14
12533: PPUSH
12534: LD_VAR 0 22
12538: PPUSH
12539: CALL_OW 296
12543: PUSH
12544: LD_INT 8
12546: PLUS
12547: PUSH
12548: LD_VAR 0 14
12552: PPUSH
12553: LD_VAR 0 23
12557: PPUSH
12558: CALL_OW 296
12562: LESS
12563: IFFALSE 12581
// begin ComAttackUnit ( i , target1 ) ;
12565: LD_VAR 0 14
12569: PPUSH
12570: LD_VAR 0 22
12574: PPUSH
12575: CALL_OW 115
// end else
12579: GO 12595
// begin ComAttackUnit ( i , target2 ) ;
12581: LD_VAR 0 14
12585: PPUSH
12586: LD_VAR 0 23
12590: PPUSH
12591: CALL_OW 115
// end ; end ;
12595: GO 12420
12597: POP
12598: POP
// for i in soldiersOK_list do
12599: LD_ADDR_VAR 0 14
12603: PUSH
12604: LD_VAR 0 19
12608: PUSH
12609: FOR_IN
12610: IFFALSE 12786
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12612: LD_ADDR_VAR 0 22
12616: PUSH
12617: LD_INT 22
12619: PUSH
12620: LD_VAR 0 11
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: CALL_OW 69
12633: PPUSH
12634: LD_VAR 0 14
12638: PPUSH
12639: CALL_OW 74
12643: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12644: LD_ADDR_VAR 0 23
12648: PUSH
12649: LD_INT 22
12651: PUSH
12652: LD_VAR 0 11
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: LD_INT 2
12663: PUSH
12664: LD_INT 59
12666: PUSH
12667: EMPTY
12668: LIST
12669: PUSH
12670: LD_INT 21
12672: PUSH
12673: LD_INT 1
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 21
12682: PUSH
12683: LD_INT 2
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: EMPTY
12701: LIST
12702: PPUSH
12703: CALL_OW 69
12707: PPUSH
12708: LD_VAR 0 14
12712: PPUSH
12713: CALL_OW 74
12717: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12718: LD_VAR 0 14
12722: PPUSH
12723: LD_VAR 0 22
12727: PPUSH
12728: CALL_OW 296
12732: PUSH
12733: LD_INT 8
12735: PLUS
12736: PUSH
12737: LD_VAR 0 14
12741: PPUSH
12742: LD_VAR 0 23
12746: PPUSH
12747: CALL_OW 296
12751: LESS
12752: IFFALSE 12770
// begin ComAttackUnit ( i , target1 ) ;
12754: LD_VAR 0 14
12758: PPUSH
12759: LD_VAR 0 22
12763: PPUSH
12764: CALL_OW 115
// end else
12768: GO 12784
// begin ComAttackUnit ( i , target2 ) ;
12770: LD_VAR 0 14
12774: PPUSH
12775: LD_VAR 0 23
12779: PPUSH
12780: CALL_OW 115
// end ; end ;
12784: GO 12609
12786: POP
12787: POP
// until soldiersOK_list = [ ] ;
12788: LD_VAR 0 19
12792: PUSH
12793: EMPTY
12794: EQUAL
12795: IFFALSE 12173
// end ; end ; end_of_file
12797: LD_VAR 0 13
12801: RET
// every 0 0$01 do
12802: GO 12804
12804: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12805: LD_INT 22
12807: PUSH
12808: LD_INT 1
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 25
12817: PUSH
12818: LD_INT 2
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 69
12833: PUSH
12834: LD_INT 0
12836: EQUAL
12837: IFFALSE 12851
// SetClass ( JMM , 2 ) ;
12839: LD_EXP 1
12843: PPUSH
12844: LD_INT 2
12846: PPUSH
12847: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12851: LD_STRING M1
12853: PPUSH
12854: CALL_OW 337
// case difficulty of 1 :
12858: LD_OWVAR 67
12862: PUSH
12863: LD_INT 1
12865: DOUBLE
12866: EQUAL
12867: IFTRUE 12871
12869: GO 12881
12871: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12872: LD_STRING M1-1
12874: PPUSH
12875: CALL_OW 337
12879: GO 12918
12881: LD_INT 2
12883: DOUBLE
12884: EQUAL
12885: IFTRUE 12889
12887: GO 12899
12889: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12890: LD_STRING M1-2
12892: PPUSH
12893: CALL_OW 337
12897: GO 12918
12899: LD_INT 3
12901: DOUBLE
12902: EQUAL
12903: IFTRUE 12907
12905: GO 12917
12907: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12908: LD_STRING M1-3
12910: PPUSH
12911: CALL_OW 337
12915: GO 12918
12917: POP
// ChangeMissionObjectives ( M1cont ) ;
12918: LD_STRING M1cont
12920: PPUSH
12921: CALL_OW 337
// SaveForQuickRestart ;
12925: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12929: LD_INT 525
12931: PPUSH
12932: LD_INT 700
12934: PPUSH
12935: CALL_OW 12
12939: PPUSH
12940: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12944: LD_INT 5
12946: PPUSH
12947: LD_INT 82
12949: PPUSH
12950: LD_INT 38
12952: PPUSH
12953: LD_INT 10
12955: PPUSH
12956: LD_INT 1
12958: PPUSH
12959: CALL_OW 56
// wait ( 0 0$14 ) ;
12963: LD_INT 490
12965: PPUSH
12966: CALL_OW 67
// firstCrateSpawn := true ;
12970: LD_ADDR_EXP 41
12974: PUSH
12975: LD_INT 1
12977: ST_TO_ADDR
// end ;
12978: END
// every 0 0$02 trigger firstCrateSpawn do
12979: LD_EXP 41
12983: IFFALSE 13346
12985: GO 12987
12987: DISABLE
// begin if IsOk ( Lisa ) then
12988: LD_EXP 2
12992: PPUSH
12993: CALL_OW 302
12997: IFFALSE 13013
// Say ( Lisa , DR0-Lisa-1 ) else
12999: LD_EXP 2
13003: PPUSH
13004: LD_STRING DR0-Lisa-1
13006: PPUSH
13007: CALL_OW 88
13011: GO 13159
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
13013: LD_INT 22
13015: PUSH
13016: LD_INT 1
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 21
13025: PUSH
13026: LD_INT 1
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: LD_INT 26
13035: PUSH
13036: LD_INT 1
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 2
13045: PUSH
13046: LD_INT 25
13048: PUSH
13049: LD_INT 1
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 25
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 25
13068: PUSH
13069: LD_INT 3
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 25
13078: PUSH
13079: LD_INT 4
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: PPUSH
13099: CALL_OW 69
13103: PUSH
13104: LD_EXP 1
13108: PUSH
13109: LD_EXP 8
13113: PUSH
13114: LD_EXP 5
13118: PUSH
13119: LD_EXP 6
13123: PUSH
13124: LD_EXP 7
13128: PUSH
13129: LD_EXP 4
13133: PUSH
13134: LD_EXP 3
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: DIFF
13148: PPUSH
13149: LD_STRING DR0-Sol1-1
13151: PPUSH
13152: LD_STRING DR0-Sol1-1
13154: PPUSH
13155: CALL 6195 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
13159: LD_INT 22
13161: PUSH
13162: LD_INT 1
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 21
13171: PUSH
13172: LD_INT 1
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 26
13181: PUSH
13182: LD_INT 1
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: LD_INT 2
13191: PUSH
13192: LD_INT 25
13194: PUSH
13195: LD_INT 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: LD_INT 25
13204: PUSH
13205: LD_INT 2
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 25
13214: PUSH
13215: LD_INT 3
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 25
13224: PUSH
13225: LD_INT 4
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 69
13249: PUSH
13250: LD_EXP 1
13254: PUSH
13255: LD_EXP 8
13259: PUSH
13260: LD_EXP 5
13264: PUSH
13265: LD_EXP 2
13269: PUSH
13270: LD_EXP 6
13274: PUSH
13275: LD_EXP 7
13279: PUSH
13280: LD_EXP 4
13284: PUSH
13285: LD_EXP 3
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: DIFF
13300: PPUSH
13301: LD_STRING DR0-Sol2-1
13303: PPUSH
13304: LD_STRING DR0-Sol2-1
13306: PPUSH
13307: CALL 6195 0 3
// if IsOk ( Cyrus ) then
13311: LD_EXP 4
13315: PPUSH
13316: CALL_OW 302
13320: IFFALSE 13334
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13322: LD_EXP 4
13326: PPUSH
13327: LD_STRING DR0-Cyrus-1
13329: PPUSH
13330: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13334: LD_EXP 1
13338: PPUSH
13339: LD_STRING DR0-JMM-1
13341: PPUSH
13342: CALL_OW 88
// end ;
13346: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13347: LD_EXP 5
13351: PPUSH
13352: CALL_OW 302
13356: PUSH
13357: LD_INT 22
13359: PUSH
13360: LD_INT 1
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 25
13369: PUSH
13370: LD_INT 16
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PPUSH
13381: CALL_OW 69
13385: PUSH
13386: LD_INT 0
13388: GREATER
13389: AND
13390: PUSH
13391: LD_INT 1
13393: PPUSH
13394: CALL_OW 463
13398: NOT
13399: AND
13400: IFFALSE 13678
13402: GO 13404
13404: DISABLE
// begin DialogueOn ;
13405: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13409: LD_EXP 5
13413: PPUSH
13414: LD_STRING D10-Frank-1
13416: PPUSH
13417: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13421: LD_INT 22
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 21
13433: PUSH
13434: LD_INT 1
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: LD_INT 25
13446: PUSH
13447: LD_INT 1
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 25
13456: PUSH
13457: LD_INT 2
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 25
13466: PUSH
13467: LD_INT 3
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 25
13476: PUSH
13477: LD_INT 4
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 69
13500: PUSH
13501: LD_EXP 1
13505: PUSH
13506: LD_EXP 5
13510: PUSH
13511: LD_EXP 2
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: LIST
13520: DIFF
13521: PPUSH
13522: LD_STRING D10-Sol1-1
13524: PPUSH
13525: LD_STRING D10-FSol1-1
13527: PPUSH
13528: CALL 6195 0 3
// Say ( Frank , D10-Frank-2 ) ;
13532: LD_EXP 5
13536: PPUSH
13537: LD_STRING D10-Frank-2
13539: PPUSH
13540: CALL_OW 88
// if IsOK ( Lisa ) then
13544: LD_EXP 2
13548: PPUSH
13549: CALL_OW 302
13553: IFFALSE 13569
// begin Say ( Lisa , D10-Lisa-2 ) ;
13555: LD_EXP 2
13559: PPUSH
13560: LD_STRING D10-Lisa-2
13562: PPUSH
13563: CALL_OW 88
// end else
13567: GO 13674
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13569: LD_INT 22
13571: PUSH
13572: LD_INT 1
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 21
13581: PUSH
13582: LD_INT 1
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: LD_INT 2
13591: PUSH
13592: LD_INT 25
13594: PUSH
13595: LD_INT 1
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 25
13604: PUSH
13605: LD_INT 2
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 25
13614: PUSH
13615: LD_INT 3
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 25
13624: PUSH
13625: LD_INT 4
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: LIST
13643: PPUSH
13644: CALL_OW 69
13648: PUSH
13649: LD_EXP 1
13653: PUSH
13654: LD_EXP 5
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: DIFF
13663: PPUSH
13664: LD_STRING D10-Sol1-2
13666: PPUSH
13667: LD_STRING D10-FSol1-2
13669: PPUSH
13670: CALL 6195 0 3
// end ; DialogueOff ;
13674: CALL_OW 7
// end ;
13678: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13679: LD_INT 1
13681: PPUSH
13682: CALL_OW 463
13686: NOT
13687: IFFALSE 13982
13689: GO 13691
13691: DISABLE
// begin HarrisonSupport ;
13692: CALL 2498 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13696: LD_EXP 17
13700: PPUSH
13701: CALL_OW 310
13705: PPUSH
13706: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13710: LD_EXP 17
13714: PPUSH
13715: LD_STRING DEng-Eng1-1
13717: PPUSH
13718: CALL_OW 88
// wait ( 1 1$0 ) ;
13722: LD_INT 2100
13724: PPUSH
13725: CALL_OW 67
// DialogueOn ;
13729: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13733: LD_EXP 14
13737: PPUSH
13738: LD_STRING DRem-Har-1
13740: PPUSH
13741: CALL_OW 94
// if contactWithRussian = 1 then
13745: LD_EXP 22
13749: PUSH
13750: LD_INT 1
13752: EQUAL
13753: IFFALSE 13769
// begin Say ( JMM , DRem-JMM-1 ) ;
13755: LD_EXP 1
13759: PPUSH
13760: LD_STRING DRem-JMM-1
13762: PPUSH
13763: CALL_OW 88
// end else
13767: GO 13781
// begin Say ( JMM , DRem-JMM-1a ) ;
13769: LD_EXP 1
13773: PPUSH
13774: LD_STRING DRem-JMM-1a
13776: PPUSH
13777: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13781: LD_EXP 14
13785: PPUSH
13786: LD_STRING DRem-Har-2
13788: PPUSH
13789: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13793: LD_STRING DenisInDelta
13795: PPUSH
13796: LD_INT 0
13798: PPUSH
13799: CALL_OW 30
13803: PUSH
13804: LD_INT 1
13806: EQUAL
13807: IFFALSE 13823
// begin Say ( JMM , DRem-JMM-2 ) ;
13809: LD_EXP 1
13813: PPUSH
13814: LD_STRING DRem-JMM-2
13816: PPUSH
13817: CALL_OW 88
// end else
13821: GO 13835
// begin Say ( JMM , DRem-JMM-2a ) ;
13823: LD_EXP 1
13827: PPUSH
13828: LD_STRING DRem-JMM-2a
13830: PPUSH
13831: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13835: LD_EXP 14
13839: PPUSH
13840: LD_STRING DRem-Har-3
13842: PPUSH
13843: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13847: LD_EXP 1
13851: PPUSH
13852: LD_STRING DRem-JMM-3
13854: PPUSH
13855: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13859: LD_EXP 14
13863: PPUSH
13864: LD_STRING DRem-Har-4
13866: PPUSH
13867: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13871: LD_STRING DenisInDelta
13873: PPUSH
13874: LD_INT 0
13876: PPUSH
13877: CALL_OW 30
13881: PUSH
13882: LD_INT 1
13884: EQUAL
13885: IFFALSE 13945
// begin Say ( JMM , DRem-JMM-4 ) ;
13887: LD_EXP 1
13891: PPUSH
13892: LD_STRING DRem-JMM-4
13894: PPUSH
13895: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13899: LD_EXP 14
13903: PPUSH
13904: LD_STRING DRem-Har-5
13906: PPUSH
13907: CALL_OW 94
// DialogueOff ;
13911: CALL_OW 7
// wait ( 4 4$00 ) ;
13915: LD_INT 8400
13917: PPUSH
13918: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13922: LD_INT 35
13924: PPUSH
13925: CALL_OW 67
// until not InBattle ( 1 ) ;
13929: LD_INT 1
13931: PPUSH
13932: CALL_OW 463
13936: NOT
13937: IFFALSE 13922
// SpawnDenis ;
13939: CALL 13983 0 0
// end else
13943: GO 13982
// begin DialogueOff ;
13945: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13949: LD_INT 36
13951: PPUSH
13952: LD_INT 1
13954: PPUSH
13955: LD_INT 1
13957: PPUSH
13958: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13962: LD_INT 15
13964: PPUSH
13965: LD_INT 1
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13975: LD_STRING MR
13977: PPUSH
13978: CALL_OW 337
// end ; end ;
13982: END
// export function SpawnDenis ; var tmp ; begin
13983: LD_INT 0
13985: PPUSH
13986: PPUSH
// PrepareDenis ;
13987: CALL 2220 0 0
// CenterNowOnUnits ( Denis ) ;
13991: LD_EXP 9
13995: PPUSH
13996: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
14000: LD_ADDR_VAR 0 2
14004: PUSH
14005: LD_INT 22
14007: PUSH
14008: LD_INT 1
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 69
14019: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
14020: LD_EXP 9
14024: PPUSH
14025: LD_VAR 0 2
14029: PPUSH
14030: LD_EXP 9
14034: PPUSH
14035: CALL_OW 74
14039: PPUSH
14040: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14044: LD_INT 35
14046: PPUSH
14047: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
14051: LD_INT 22
14053: PUSH
14054: LD_INT 1
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 91
14063: PUSH
14064: LD_EXP 9
14068: PUSH
14069: LD_INT 10
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PPUSH
14081: CALL_OW 69
14085: IFFALSE 14044
// SetSide ( Denis , 1 ) ;
14087: LD_EXP 9
14091: PPUSH
14092: LD_INT 1
14094: PPUSH
14095: CALL_OW 235
// DialogueOn ;
14099: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
14103: LD_EXP 9
14107: PPUSH
14108: LD_STRING DDen-Den-1
14110: PPUSH
14111: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
14115: LD_EXP 1
14119: PPUSH
14120: LD_STRING DDen-JMM-1
14122: PPUSH
14123: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
14127: LD_EXP 9
14131: PPUSH
14132: LD_STRING DDen-Den-2
14134: PPUSH
14135: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
14139: LD_EXP 1
14143: PPUSH
14144: LD_STRING DDen-JMM-2
14146: PPUSH
14147: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
14151: LD_EXP 9
14155: PPUSH
14156: LD_STRING DDen-Den-3
14158: PPUSH
14159: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
14163: LD_EXP 1
14167: PPUSH
14168: LD_STRING DDen-JMM-3
14170: PPUSH
14171: CALL_OW 88
// DialogueOff ;
14175: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
14179: LD_INT 36
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: LD_INT 1
14187: PPUSH
14188: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14192: LD_INT 15
14194: PPUSH
14195: LD_INT 1
14197: PPUSH
14198: LD_INT 1
14200: PPUSH
14201: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14205: LD_STRING MR
14207: PPUSH
14208: CALL_OW 337
// end ;
14212: LD_VAR 0 1
14216: RET
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14217: CALL 14272 0 0
14221: PUSH
14222: LD_EXP 9
14226: PPUSH
14227: CALL_OW 302
14231: AND
14232: PUSH
14233: LD_INT 1
14235: PPUSH
14236: CALL_OW 463
14240: NOT
14241: AND
14242: IFFALSE 14271
14244: GO 14246
14246: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14247: LD_EXP 9
14251: PPUSH
14252: LD_STRING DR1-Den-1
14254: PPUSH
14255: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14259: LD_EXP 1
14263: PPUSH
14264: LD_STRING DR1-JMM-1
14266: PPUSH
14267: CALL_OW 88
// end ;
14271: END
// function CheckOptoLab ; var i ; begin
14272: LD_INT 0
14274: PPUSH
14275: PPUSH
// result = false ;
14276: LD_ADDR_VAR 0 1
14280: PUSH
14281: LD_INT 0
14283: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14284: LD_ADDR_VAR 0 2
14288: PUSH
14289: LD_INT 22
14291: PUSH
14292: LD_INT 1
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 2
14301: PUSH
14302: LD_INT 30
14304: PUSH
14305: LD_INT 7
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 30
14314: PUSH
14315: LD_INT 8
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: PUSH
14336: FOR_IN
14337: IFFALSE 14389
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14339: LD_VAR 0 2
14343: PPUSH
14344: LD_INT 1
14346: PPUSH
14347: CALL_OW 268
14351: PUSH
14352: LD_INT 15
14354: EQUAL
14355: PUSH
14356: LD_VAR 0 2
14360: PPUSH
14361: LD_INT 2
14363: PPUSH
14364: CALL_OW 268
14368: PUSH
14369: LD_INT 15
14371: EQUAL
14372: OR
14373: IFFALSE 14385
// begin result = true ;
14375: LD_ADDR_VAR 0 1
14379: PUSH
14380: LD_INT 1
14382: ST_TO_ADDR
// break ;
14383: GO 14389
// end ; break ;
14385: GO 14389
// end ;
14387: GO 14336
14389: POP
14390: POP
// end ;
14391: LD_VAR 0 1
14395: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14396: LD_INT 15
14398: PPUSH
14399: LD_INT 1
14401: PPUSH
14402: CALL_OW 321
14406: PUSH
14407: LD_INT 2
14409: EQUAL
14410: PUSH
14411: LD_EXP 9
14415: PPUSH
14416: CALL_OW 302
14420: AND
14421: PUSH
14422: LD_INT 1
14424: PPUSH
14425: CALL_OW 463
14429: NOT
14430: AND
14431: IFFALSE 14663
14433: GO 14435
14435: DISABLE
// begin DialogueOn ;
14436: CALL_OW 6
// if IsOK ( Denis ) then
14440: LD_EXP 9
14444: PPUSH
14445: CALL_OW 302
14449: IFFALSE 14465
// begin Say ( Denis , DR2-Den-1 ) ;
14451: LD_EXP 9
14455: PPUSH
14456: LD_STRING DR2-Den-1
14458: PPUSH
14459: CALL_OW 88
// end else
14463: GO 14524
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14465: LD_INT 22
14467: PUSH
14468: LD_INT 1
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 21
14477: PUSH
14478: LD_INT 1
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: LD_INT 25
14487: PUSH
14488: LD_INT 4
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 69
14504: PUSH
14505: LD_EXP 1
14509: PUSH
14510: EMPTY
14511: LIST
14512: DIFF
14513: PPUSH
14514: LD_STRING DR2-Sci1-1
14516: PPUSH
14517: LD_STRING DR2-FSci1-1
14519: PPUSH
14520: CALL 6195 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14524: LD_EXP 1
14528: PPUSH
14529: LD_STRING DR2-JMM-1
14531: PPUSH
14532: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14536: LD_INT 22
14538: PUSH
14539: LD_INT 1
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: LD_INT 21
14548: PUSH
14549: LD_INT 1
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 2
14558: PUSH
14559: LD_INT 25
14561: PUSH
14562: LD_INT 1
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 25
14571: PUSH
14572: LD_INT 2
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: LD_INT 25
14581: PUSH
14582: LD_INT 3
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 25
14591: PUSH
14592: LD_INT 4
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: PPUSH
14611: CALL_OW 69
14615: PUSH
14616: LD_EXP 1
14620: PUSH
14621: LD_EXP 9
14625: PUSH
14626: LD_EXP 8
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: LIST
14635: DIFF
14636: PPUSH
14637: LD_STRING DR2-Sol1-1
14639: PPUSH
14640: LD_STRING DR2-Sol1-11
14642: PPUSH
14643: CALL 6195 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14647: LD_EXP 1
14651: PPUSH
14652: LD_STRING DR2-JMM-2
14654: PPUSH
14655: CALL_OW 88
// DialogueOff ;
14659: CALL_OW 7
// end ;
14663: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14664: LD_INT 22
14666: PUSH
14667: LD_INT 1
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 30
14676: PUSH
14677: LD_INT 36
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PPUSH
14688: CALL_OW 69
14692: PUSH
14693: LD_INT 0
14695: EQUAL
14696: PUSH
14697: LD_INT 22
14699: PUSH
14700: LD_INT 1
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 21
14709: PUSH
14710: LD_INT 2
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 33
14719: PUSH
14720: LD_INT 2
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: PPUSH
14732: CALL_OW 69
14736: PUSH
14737: LD_INT 0
14739: GREATER
14740: AND
14741: PUSH
14742: LD_EXP 23
14746: PUSH
14747: LD_INT 0
14749: EQUAL
14750: AND
14751: PUSH
14752: LD_INT 1
14754: PPUSH
14755: CALL_OW 463
14759: NOT
14760: AND
14761: IFFALSE 14887
14763: GO 14765
14765: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14766: LD_INT 22
14768: PUSH
14769: LD_INT 1
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: LD_INT 21
14778: PUSH
14779: LD_INT 1
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 25
14788: PUSH
14789: LD_INT 3
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: PUSH
14806: LD_EXP 1
14810: PUSH
14811: LD_EXP 6
14815: PUSH
14816: LD_EXP 7
14820: PUSH
14821: LD_EXP 9
14825: PUSH
14826: LD_EXP 15
14830: PUSH
14831: LD_EXP 3
14835: PUSH
14836: LD_EXP 4
14840: PUSH
14841: LD_EXP 2
14845: PUSH
14846: LD_EXP 5
14850: PUSH
14851: LD_EXP 8
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: DIFF
14868: PPUSH
14869: LD_STRING D3a-Mech1-1
14871: PPUSH
14872: LD_STRING D3a-Mech1-1
14874: PPUSH
14875: CALL 6195 0 3
// firstTower = 2 ;
14879: LD_ADDR_EXP 23
14883: PUSH
14884: LD_INT 2
14886: ST_TO_ADDR
// end ;
14887: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14888: LD_INT 22
14890: PUSH
14891: LD_INT 3
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 21
14900: PUSH
14901: LD_INT 3
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PPUSH
14912: CALL_OW 69
14916: PUSH
14917: LD_INT 0
14919: EQUAL
14920: IFFALSE 15035
14922: GO 14924
14924: DISABLE
14925: LD_INT 0
14927: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: LD_INT 21
14945: PUSH
14946: LD_INT 1
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 2
14955: PUSH
14956: LD_INT 25
14958: PUSH
14959: LD_INT 1
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 25
14968: PUSH
14969: LD_INT 2
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 25
14978: PUSH
14979: LD_INT 3
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 25
14988: PUSH
14989: LD_INT 4
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 69
15012: PUSH
15013: FOR_IN
15014: IFFALSE 15033
// AddExperience ( i , 1 , 10000 ) ;
15016: LD_VAR 0 1
15020: PPUSH
15021: LD_INT 1
15023: PPUSH
15024: LD_INT 10000
15026: PPUSH
15027: CALL_OW 492
15031: GO 15013
15033: POP
15034: POP
// end ;
15035: PPOPN 1
15037: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
15038: LD_INT 22
15040: PUSH
15041: LD_INT 1
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 30
15050: PUSH
15051: LD_INT 36
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PPUSH
15062: CALL_OW 69
15066: PUSH
15067: LD_INT 0
15069: GREATER
15070: PUSH
15071: LD_INT 22
15073: PUSH
15074: LD_INT 1
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 21
15083: PUSH
15084: LD_INT 2
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 33
15093: PUSH
15094: LD_INT 2
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: PPUSH
15106: CALL_OW 69
15110: PUSH
15111: LD_INT 0
15113: GREATER
15114: AND
15115: PUSH
15116: CALL 15708 0 0
15120: AND
15121: PUSH
15122: LD_INT 1
15124: PPUSH
15125: CALL_OW 463
15129: NOT
15130: AND
15131: IFFALSE 15705
15133: GO 15135
15135: DISABLE
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
15143: LD_ADDR_VAR 0 3
15147: PUSH
15148: LD_INT 22
15150: PUSH
15151: LD_INT 1
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: LD_INT 30
15160: PUSH
15161: LD_INT 36
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PPUSH
15172: CALL_OW 69
15176: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
15177: LD_ADDR_VAR 0 4
15181: PUSH
15182: LD_INT 22
15184: PUSH
15185: LD_INT 1
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 21
15194: PUSH
15195: LD_INT 2
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: LD_INT 33
15204: PUSH
15205: LD_INT 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: LIST
15216: PPUSH
15217: CALL_OW 69
15221: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15222: LD_ADDR_VAR 0 5
15226: PUSH
15227: EMPTY
15228: ST_TO_ADDR
// for i in tmpControlTowers do
15229: LD_ADDR_VAR 0 1
15233: PUSH
15234: LD_VAR 0 3
15238: PUSH
15239: FOR_IN
15240: IFFALSE 15703
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15242: LD_EXP 1
15246: PPUSH
15247: CALL_OW 310
15251: PUSH
15252: LD_VAR 0 1
15256: EQUAL
15257: PUSH
15258: LD_EXP 1
15262: PPUSH
15263: CALL_OW 257
15267: PUSH
15268: LD_INT 3
15270: EQUAL
15271: AND
15272: IFFALSE 15402
// begin InGameOn ;
15274: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15278: LD_VAR 0 4
15282: PUSH
15283: LD_INT 1
15285: ARRAY
15286: PPUSH
15287: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15291: LD_EXP 1
15295: PPUSH
15296: LD_STRING D4a-JMM-1
15298: PPUSH
15299: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15303: LD_VAR 0 4
15307: PUSH
15308: LD_INT 1
15310: ARRAY
15311: PPUSH
15312: LD_EXP 1
15316: PPUSH
15317: CALL_OW 53
// wait ( 0 0$1 ) ;
15321: LD_INT 35
15323: PPUSH
15324: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15328: LD_VAR 0 4
15332: PUSH
15333: LD_INT 1
15335: ARRAY
15336: PPUSH
15337: LD_VAR 0 4
15341: PUSH
15342: LD_INT 1
15344: ARRAY
15345: PPUSH
15346: CALL_OW 250
15350: PUSH
15351: LD_INT 3
15353: PLUS
15354: PPUSH
15355: LD_VAR 0 4
15359: PUSH
15360: LD_INT 1
15362: ARRAY
15363: PPUSH
15364: CALL_OW 251
15368: PUSH
15369: LD_INT 2
15371: MINUS
15372: PPUSH
15373: CALL_OW 111
// wait ( 0 0$2 ) ;
15377: LD_INT 70
15379: PPUSH
15380: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15384: LD_EXP 1
15388: PPUSH
15389: LD_STRING D4b-JMM-1
15391: PPUSH
15392: CALL_OW 88
// InGameOff ;
15396: CALL_OW 9
// end else
15400: GO 15701
// begin InGameOn ;
15402: CALL_OW 8
// for j in UnitsInside ( i ) do
15406: LD_ADDR_VAR 0 2
15410: PUSH
15411: LD_VAR 0 1
15415: PPUSH
15416: CALL_OW 313
15420: PUSH
15421: FOR_IN
15422: IFFALSE 15457
// if GetClass ( j ) = 3 then
15424: LD_VAR 0 2
15428: PPUSH
15429: CALL_OW 257
15433: PUSH
15434: LD_INT 3
15436: EQUAL
15437: IFFALSE 15455
// tmpMechanicInside = tmpMechanicInside ^ j ;
15439: LD_ADDR_VAR 0 5
15443: PUSH
15444: LD_VAR 0 5
15448: PUSH
15449: LD_VAR 0 2
15453: ADD
15454: ST_TO_ADDR
15455: GO 15421
15457: POP
15458: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15459: LD_VAR 0 5
15463: PUSH
15464: LD_INT 1
15466: ARRAY
15467: PPUSH
15468: CALL_OW 258
15472: PUSH
15473: LD_INT 1
15475: EQUAL
15476: IFFALSE 15494
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15478: LD_VAR 0 5
15482: PUSH
15483: LD_INT 1
15485: ARRAY
15486: PPUSH
15487: LD_STRING D4a-Mech1-1
15489: PPUSH
15490: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15494: LD_VAR 0 5
15498: PUSH
15499: LD_INT 1
15501: ARRAY
15502: PPUSH
15503: CALL_OW 258
15507: PUSH
15508: LD_INT 2
15510: EQUAL
15511: IFFALSE 15529
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15513: LD_VAR 0 5
15517: PUSH
15518: LD_INT 1
15520: ARRAY
15521: PPUSH
15522: LD_STRING D4a-FMech1-1
15524: PPUSH
15525: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15529: LD_VAR 0 4
15533: PUSH
15534: LD_INT 1
15536: ARRAY
15537: PPUSH
15538: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15542: LD_VAR 0 4
15546: PUSH
15547: LD_INT 1
15549: ARRAY
15550: PPUSH
15551: LD_VAR 0 5
15555: PUSH
15556: LD_INT 1
15558: ARRAY
15559: PPUSH
15560: CALL_OW 53
// wait ( 0 0$1 ) ;
15564: LD_INT 35
15566: PPUSH
15567: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15571: LD_VAR 0 4
15575: PUSH
15576: LD_INT 1
15578: ARRAY
15579: PPUSH
15580: LD_VAR 0 4
15584: PUSH
15585: LD_INT 1
15587: ARRAY
15588: PPUSH
15589: CALL_OW 250
15593: PUSH
15594: LD_INT 3
15596: PLUS
15597: PPUSH
15598: LD_VAR 0 4
15602: PUSH
15603: LD_INT 1
15605: ARRAY
15606: PPUSH
15607: CALL_OW 251
15611: PUSH
15612: LD_INT 2
15614: MINUS
15615: PPUSH
15616: CALL_OW 111
// wait ( 0 0$2 ) ;
15620: LD_INT 70
15622: PPUSH
15623: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15627: LD_VAR 0 5
15631: PUSH
15632: LD_INT 1
15634: ARRAY
15635: PPUSH
15636: CALL_OW 258
15640: PUSH
15641: LD_INT 1
15643: EQUAL
15644: IFFALSE 15662
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15646: LD_VAR 0 5
15650: PUSH
15651: LD_INT 1
15653: ARRAY
15654: PPUSH
15655: LD_STRING D4b-Mech1-1
15657: PPUSH
15658: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15662: LD_VAR 0 5
15666: PUSH
15667: LD_INT 1
15669: ARRAY
15670: PPUSH
15671: CALL_OW 258
15675: PUSH
15676: LD_INT 2
15678: EQUAL
15679: IFFALSE 15697
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15681: LD_VAR 0 5
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: PPUSH
15690: LD_STRING D4b-FMech1-1
15692: PPUSH
15693: CALL_OW 88
// InGameOff ;
15697: CALL_OW 9
// end ; end ;
15701: GO 15239
15703: POP
15704: POP
// end ;
15705: PPOPN 5
15707: END
// function CheckMehInside ; var i , j ; begin
15708: LD_INT 0
15710: PPUSH
15711: PPUSH
15712: PPUSH
// result = false ;
15713: LD_ADDR_VAR 0 1
15717: PUSH
15718: LD_INT 0
15720: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15721: LD_ADDR_VAR 0 2
15725: PUSH
15726: LD_INT 22
15728: PUSH
15729: LD_INT 1
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 30
15738: PUSH
15739: LD_INT 36
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL_OW 69
15754: PUSH
15755: FOR_IN
15756: IFFALSE 15807
// begin for j in UnitsInside ( i ) do
15758: LD_ADDR_VAR 0 3
15762: PUSH
15763: LD_VAR 0 2
15767: PPUSH
15768: CALL_OW 313
15772: PUSH
15773: FOR_IN
15774: IFFALSE 15803
// begin if GetClass ( j ) = 3 then
15776: LD_VAR 0 3
15780: PPUSH
15781: CALL_OW 257
15785: PUSH
15786: LD_INT 3
15788: EQUAL
15789: IFFALSE 15801
// begin result = true ;
15791: LD_ADDR_VAR 0 1
15795: PUSH
15796: LD_INT 1
15798: ST_TO_ADDR
// break ;
15799: GO 15803
// end ; end ;
15801: GO 15773
15803: POP
15804: POP
// end ;
15805: GO 15755
15807: POP
15808: POP
// end ;
15809: LD_VAR 0 1
15813: RET
// every 25 25$0 do
15814: GO 15816
15816: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15817: LD_INT 35
15819: PPUSH
15820: CALL_OW 67
// until not InBattle ( 1 ) ;
15824: LD_INT 1
15826: PPUSH
15827: CALL_OW 463
15831: NOT
15832: IFFALSE 15817
// PrepareKurt ;
15834: CALL 19412 0 0
// end ;
15838: END
// every 35 35$0 do
15839: GO 15841
15841: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15842: LD_INT 35
15844: PPUSH
15845: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
15849: LD_INT 1
15851: PPUSH
15852: CALL_OW 463
15856: NOT
15857: PUSH
15858: LD_INT 32
15860: PPUSH
15861: LD_INT 81
15863: PUSH
15864: LD_INT 1
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PPUSH
15871: CALL_OW 70
15875: NOT
15876: AND
15877: IFFALSE 15842
// PrepareJoan ;
15879: CALL 3016 0 0
// wait ( 1 1$0 ) ;
15883: LD_INT 2100
15885: PPUSH
15886: CALL_OW 67
// if IsOK ( Lisa ) then
15890: LD_EXP 2
15894: PPUSH
15895: CALL_OW 302
15899: IFFALSE 16029
// begin DialogueOn ;
15901: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15905: LD_EXP 2
15909: PPUSH
15910: LD_STRING D7-Lisa-1
15912: PPUSH
15913: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15917: LD_EXP 1
15921: PPUSH
15922: LD_STRING D7-JMM-1
15924: PPUSH
15925: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15929: LD_EXP 2
15933: PPUSH
15934: LD_STRING D7-Lisa-2
15936: PPUSH
15937: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15941: LD_EXP 1
15945: PPUSH
15946: LD_STRING D7-JMM-2
15948: PPUSH
15949: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15953: LD_EXP 2
15957: PPUSH
15958: LD_STRING D7-Lisa-3
15960: PPUSH
15961: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15965: LD_EXP 1
15969: PPUSH
15970: LD_STRING D7-JMM-3
15972: PPUSH
15973: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15977: LD_EXP 2
15981: PPUSH
15982: LD_STRING D7-Lisa-4
15984: PPUSH
15985: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15989: LD_EXP 1
15993: PPUSH
15994: LD_STRING D7-JMM-4
15996: PPUSH
15997: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
16001: LD_EXP 1
16005: PPUSH
16006: LD_STRING D7-JMM-4a
16008: PPUSH
16009: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
16013: LD_EXP 2
16017: PPUSH
16018: LD_STRING D7-Lisa-5
16020: PPUSH
16021: CALL_OW 88
// DialogueOff ;
16025: CALL_OW 7
// end ; end ;
16029: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
16030: LD_EXP 13
16034: PUSH
16035: LD_INT 22
16037: PUSH
16038: LD_INT 1
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 91
16047: PUSH
16048: LD_EXP 13
16052: PUSH
16053: LD_INT 10
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 2
16063: PUSH
16064: LD_INT 25
16066: PUSH
16067: LD_INT 1
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 25
16076: PUSH
16077: LD_INT 2
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 25
16086: PUSH
16087: LD_INT 3
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 25
16096: PUSH
16097: LD_INT 4
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: LIST
16115: PPUSH
16116: CALL_OW 69
16120: PUSH
16121: LD_INT 1
16123: GREATER
16124: AND
16125: IFFALSE 16142
16127: GO 16129
16129: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
16130: LD_EXP 13
16134: PPUSH
16135: LD_STRING D5-Sol1-1
16137: PPUSH
16138: CALL_OW 88
// end ;
16142: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
16143: LD_INT 22
16145: PUSH
16146: LD_INT 1
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 33
16155: PUSH
16156: LD_INT 2
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PPUSH
16167: CALL_OW 69
16171: PUSH
16172: LD_INT 2
16174: GREATEREQUAL
16175: IFFALSE 16195
16177: GO 16179
16179: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
16180: LD_STRING MRa
16182: PPUSH
16183: CALL_OW 337
// remoteVehiclesBuild = 1 ;
16187: LD_ADDR_EXP 28
16191: PUSH
16192: LD_INT 1
16194: ST_TO_ADDR
// end ;
16195: END
// every 0 0$10 + 2 2$00 do var i , last ;
16196: GO 16198
16198: DISABLE
16199: LD_INT 0
16201: PPUSH
16202: PPUSH
// begin last := 8 ;
16203: LD_ADDR_VAR 0 2
16207: PUSH
16208: LD_INT 8
16210: ST_TO_ADDR
// for i = 1 to last do
16211: LD_ADDR_VAR 0 1
16215: PUSH
16216: DOUBLE
16217: LD_INT 1
16219: DEC
16220: ST_TO_ADDR
16221: LD_VAR 0 2
16225: PUSH
16226: FOR_TO
16227: IFFALSE 16255
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
16229: LD_INT 6300
16231: PPUSH
16232: LD_INT 12600
16234: PPUSH
16235: CALL_OW 12
16239: PPUSH
16240: CALL_OW 67
// PrepareRandoms ( i ) ;
16244: LD_VAR 0 1
16248: PPUSH
16249: CALL 4052 0 1
// end ;
16253: GO 16226
16255: POP
16256: POP
// end ;
16257: PPOPN 2
16259: END
// every 5 5$20 do
16260: GO 16262
16262: DISABLE
// begin DialogueOn ;
16263: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16267: LD_EXP 10
16271: PPUSH
16272: LD_STRING D12a-Sci-1
16274: PPUSH
16275: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16279: LD_EXP 1
16283: PPUSH
16284: LD_STRING D12a-JMM-1
16286: PPUSH
16287: CALL_OW 88
// DialogueOff ;
16291: CALL_OW 7
// cratesStatus = 1 ;
16295: LD_ADDR_EXP 38
16299: PUSH
16300: LD_INT 1
16302: ST_TO_ADDR
// end ;
16303: END
// every 13 13$0 do
16304: GO 16306
16306: DISABLE
// begin DialogueOn ;
16307: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16311: LD_EXP 10
16315: PPUSH
16316: LD_STRING D12b-Sci-1
16318: PPUSH
16319: CALL_OW 94
// DialogueOff ;
16323: CALL_OW 7
// cratesStatus = 2 ;
16327: LD_ADDR_EXP 38
16331: PUSH
16332: LD_INT 2
16334: ST_TO_ADDR
// end ;
16335: END
// every 32 32$0 do
16336: GO 16338
16338: DISABLE
// begin DialogueOn ;
16339: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16343: LD_EXP 10
16347: PPUSH
16348: LD_STRING D12c-Sci-1
16350: PPUSH
16351: CALL_OW 94
// DialogueOff ;
16355: CALL_OW 7
// wait ( 3 3$0 ) ;
16359: LD_INT 6300
16361: PPUSH
16362: CALL_OW 67
// DialogueOn ;
16366: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16370: LD_EXP 10
16374: PPUSH
16375: LD_STRING D12d-Sci-1
16377: PPUSH
16378: CALL_OW 94
// DialogueOff ;
16382: CALL_OW 7
// cratesStatus = 1 ;
16386: LD_ADDR_EXP 38
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// end ;
16394: END
// every 42 42$0 do
16395: GO 16397
16397: DISABLE
// begin DialogueOn ;
16398: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16402: LD_EXP 10
16406: PPUSH
16407: LD_STRING D12e-Sci-1
16409: PPUSH
16410: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16414: LD_EXP 1
16418: PPUSH
16419: LD_STRING D12e-JMM-1
16421: PPUSH
16422: CALL_OW 88
// DialogueOff ;
16426: CALL_OW 7
// cratesStatus = 2 ;
16430: LD_ADDR_EXP 38
16434: PUSH
16435: LD_INT 2
16437: ST_TO_ADDR
// end ;
16438: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16439: LD_INT 22
16441: PUSH
16442: LD_INT 6
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 21
16451: PUSH
16452: LD_INT 2
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 34
16461: PUSH
16462: LD_INT 51
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: LIST
16473: PPUSH
16474: CALL_OW 69
16478: PUSH
16479: LD_INT 0
16481: GREATER
16482: IFFALSE 16565
16484: GO 16486
16486: DISABLE
16487: LD_INT 0
16489: PPUSH
// begin enable ;
16490: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16491: LD_ADDR_VAR 0 1
16495: PUSH
16496: LD_INT 22
16498: PUSH
16499: LD_INT 6
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 2
16508: PUSH
16509: LD_INT 21
16511: PUSH
16512: LD_INT 1
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 21
16521: PUSH
16522: LD_INT 2
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PPUSH
16538: CALL_OW 69
16542: PUSH
16543: FOR_IN
16544: IFFALSE 16563
// ComAgressiveMove ( i , 138 , 168 ) ;
16546: LD_VAR 0 1
16550: PPUSH
16551: LD_INT 138
16553: PPUSH
16554: LD_INT 168
16556: PPUSH
16557: CALL_OW 114
16561: GO 16543
16563: POP
16564: POP
// end ;
16565: PPOPN 1
16567: END
// every 0 0$1 do var i ;
16568: GO 16570
16570: DISABLE
16571: LD_INT 0
16573: PPUSH
// begin enable ;
16574: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16575: LD_ADDR_VAR 0 1
16579: PUSH
16580: LD_INT 4
16582: PPUSH
16583: LD_INT 2
16585: PUSH
16586: LD_INT 22
16588: PUSH
16589: LD_INT 3
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 22
16598: PUSH
16599: LD_INT 6
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: LIST
16610: PUSH
16611: EMPTY
16612: LIST
16613: PPUSH
16614: CALL_OW 70
16618: PUSH
16619: FOR_IN
16620: IFFALSE 16684
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16622: LD_INT 4
16624: PPUSH
16625: LD_INT 22
16627: PUSH
16628: LD_INT 6
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 34
16637: PUSH
16638: LD_INT 51
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PPUSH
16649: CALL_OW 70
16653: PUSH
16654: LD_INT 0
16656: GREATER
16657: IFFALSE 16673
// sendedConvoys = sendedConvoys + 1 ;
16659: LD_ADDR_EXP 39
16663: PUSH
16664: LD_EXP 39
16668: PUSH
16669: LD_INT 1
16671: PLUS
16672: ST_TO_ADDR
// RemoveUnit ( i ) ;
16673: LD_VAR 0 1
16677: PPUSH
16678: CALL_OW 64
// end ;
16682: GO 16619
16684: POP
16685: POP
// end ; end_of_file
16686: PPOPN 1
16688: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16689: LD_VAR 0 1
16693: PUSH
16694: LD_INT 1
16696: EQUAL
16697: PUSH
16698: LD_VAR 0 2
16702: PUSH
16703: LD_INT 3
16705: EQUAL
16706: AND
16707: IFFALSE 16717
// contactWithRussian = 1 ;
16709: LD_ADDR_EXP 22
16713: PUSH
16714: LD_INT 1
16716: ST_TO_ADDR
// end ;
16717: PPOPN 2
16719: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16720: LD_VAR 0 1
16724: PPUSH
16725: CALL_OW 266
16729: PUSH
16730: LD_INT 36
16732: EQUAL
16733: PUSH
16734: LD_VAR 0 1
16738: PPUSH
16739: CALL_OW 255
16743: PUSH
16744: LD_INT 1
16746: EQUAL
16747: AND
16748: PUSH
16749: LD_INT 22
16751: PUSH
16752: LD_INT 1
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 21
16761: PUSH
16762: LD_INT 2
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 33
16771: PUSH
16772: LD_INT 2
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: PPUSH
16784: CALL_OW 69
16788: PUSH
16789: LD_INT 0
16791: EQUAL
16792: AND
16793: PUSH
16794: LD_EXP 23
16798: PUSH
16799: LD_INT 0
16801: EQUAL
16802: AND
16803: IFFALSE 16883
// begin firstTower = 1 ;
16805: LD_ADDR_EXP 23
16809: PUSH
16810: LD_INT 1
16812: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16813: LD_INT 22
16815: PUSH
16816: LD_INT 1
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 21
16825: PUSH
16826: LD_INT 1
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 25
16835: PUSH
16836: LD_INT 3
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 26
16845: PUSH
16846: LD_INT 1
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: PPUSH
16859: CALL_OW 69
16863: PUSH
16864: LD_EXP 1
16868: PUSH
16869: EMPTY
16870: LIST
16871: DIFF
16872: PPUSH
16873: LD_STRING D3b-Mech1-1
16875: PPUSH
16876: LD_STRING D3b-Mech1-1
16878: PPUSH
16879: CALL 6195 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL_OW 266
16892: PUSH
16893: LD_INT 0
16895: EQUAL
16896: PUSH
16897: LD_VAR 0 1
16901: PPUSH
16902: CALL_OW 255
16906: PUSH
16907: LD_INT 1
16909: EQUAL
16910: AND
16911: IFFALSE 16925
// SetBName ( building , theta ) ;
16913: LD_VAR 0 1
16917: PPUSH
16918: LD_STRING theta
16920: PPUSH
16921: CALL_OW 500
// if GetSide ( building ) = 3 then
16925: LD_VAR 0 1
16929: PPUSH
16930: CALL_OW 255
16934: PUSH
16935: LD_INT 3
16937: EQUAL
16938: IFFALSE 17012
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16940: LD_ADDR_EXP 31
16944: PUSH
16945: LD_EXP 31
16949: PPUSH
16950: LD_INT 1
16952: PPUSH
16953: CALL_OW 3
16957: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16958: LD_ADDR_EXP 31
16962: PUSH
16963: LD_EXP 31
16967: PPUSH
16968: LD_INT 1
16970: PPUSH
16971: CALL_OW 3
16975: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16976: LD_ADDR_EXP 31
16980: PUSH
16981: LD_EXP 31
16985: PPUSH
16986: LD_INT 1
16988: PPUSH
16989: CALL_OW 3
16993: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16994: LD_ADDR_EXP 31
16998: PUSH
16999: LD_EXP 31
17003: PPUSH
17004: LD_INT 1
17006: PPUSH
17007: CALL_OW 3
17011: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL_OW 255
17021: PUSH
17022: LD_INT 3
17024: EQUAL
17025: PUSH
17026: LD_VAR 0 1
17030: PPUSH
17031: CALL_OW 266
17035: PUSH
17036: LD_INT 0
17038: EQUAL
17039: PUSH
17040: LD_VAR 0 1
17044: PPUSH
17045: CALL_OW 266
17049: PUSH
17050: LD_INT 2
17052: EQUAL
17053: OR
17054: PUSH
17055: LD_VAR 0 1
17059: PPUSH
17060: CALL_OW 266
17064: PUSH
17065: LD_INT 4
17067: EQUAL
17068: OR
17069: PUSH
17070: EMPTY
17071: LIST
17072: AND
17073: IFFALSE 17084
// ComUpgrade ( building ) ;
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
17084: LD_VAR 0 1
17088: PPUSH
17089: CALL_OW 255
17093: PUSH
17094: LD_INT 3
17096: EQUAL
17097: PUSH
17098: LD_VAR 0 1
17102: PPUSH
17103: CALL_OW 266
17107: PUSH
17108: LD_INT 32
17110: EQUAL
17111: AND
17112: IFFALSE 17153
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
17114: LD_VAR 0 1
17118: PPUSH
17119: LD_INT 42
17121: PUSH
17122: LD_INT 43
17124: PUSH
17125: LD_INT 44
17127: PUSH
17128: LD_INT 46
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 1
17139: PPUSH
17140: LD_INT 4
17142: PPUSH
17143: CALL_OW 12
17147: ARRAY
17148: PPUSH
17149: CALL_OW 208
// end ; end ;
17153: PPOPN 1
17155: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
17156: LD_VAR 0 1
17160: PUSH
17161: LD_INT 22
17163: PUSH
17164: LD_INT 1
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 21
17173: PUSH
17174: LD_INT 1
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 23
17183: PUSH
17184: LD_INT 1
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: LIST
17195: PPUSH
17196: CALL_OW 69
17200: IN
17201: IFFALSE 17217
// killCounter := killCounter + 1 ;
17203: LD_ADDR_EXP 47
17207: PUSH
17208: LD_EXP 47
17212: PUSH
17213: LD_INT 1
17215: PLUS
17216: ST_TO_ADDR
// if unit = JMM then
17217: LD_VAR 0 1
17221: PUSH
17222: LD_EXP 1
17226: EQUAL
17227: IFFALSE 17236
// YouLost ( JMM ) ;
17229: LD_STRING JMM
17231: PPUSH
17232: CALL_OW 104
// if unit = Joan then
17236: LD_VAR 0 1
17240: PUSH
17241: LD_EXP 15
17245: EQUAL
17246: IFFALSE 17256
// JoanStatus = 0 ;
17248: LD_ADDR_EXP 16
17252: PUSH
17253: LD_INT 0
17255: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17256: LD_VAR 0 1
17260: PPUSH
17261: CALL_OW 255
17265: PUSH
17266: LD_INT 1
17268: EQUAL
17269: PUSH
17270: LD_VAR 0 1
17274: PPUSH
17275: CALL_OW 247
17279: PUSH
17280: LD_INT 1
17282: EQUAL
17283: AND
17284: IFFALSE 17360
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17286: LD_VAR 0 1
17290: PPUSH
17291: CALL_OW 257
17295: PUSH
17296: LD_INT 1
17298: EQUAL
17299: PUSH
17300: LD_VAR 0 1
17304: PPUSH
17305: CALL_OW 257
17309: PUSH
17310: LD_INT 2
17312: EQUAL
17313: OR
17314: PUSH
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 257
17324: PUSH
17325: LD_INT 3
17327: EQUAL
17328: OR
17329: PUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 257
17339: PUSH
17340: LD_INT 4
17342: EQUAL
17343: OR
17344: IFFALSE 17360
// unitLost = unitLost + 1 ;
17346: LD_ADDR_EXP 30
17350: PUSH
17351: LD_EXP 30
17355: PUSH
17356: LD_INT 1
17358: PLUS
17359: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17360: LD_VAR 0 1
17364: PPUSH
17365: CALL_OW 255
17369: PUSH
17370: LD_INT 3
17372: EQUAL
17373: PUSH
17374: LD_VAR 0 1
17378: PPUSH
17379: CALL_OW 247
17383: PUSH
17384: LD_INT 3
17386: EQUAL
17387: AND
17388: IFFALSE 18080
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17390: LD_VAR 0 1
17394: PPUSH
17395: CALL_OW 266
17399: PUSH
17400: LD_INT 31
17402: EQUAL
17403: PUSH
17404: LD_VAR 0 1
17408: PPUSH
17409: CALL_OW 266
17413: PUSH
17414: LD_INT 32
17416: EQUAL
17417: OR
17418: PUSH
17419: LD_VAR 0 1
17423: PPUSH
17424: CALL_OW 266
17428: PUSH
17429: LD_INT 36
17431: EQUAL
17432: OR
17433: PUSH
17434: LD_VAR 0 1
17438: PPUSH
17439: CALL_OW 266
17443: PUSH
17444: LD_INT 0
17446: EQUAL
17447: OR
17448: PUSH
17449: LD_VAR 0 1
17453: PPUSH
17454: CALL_OW 266
17458: PUSH
17459: LD_INT 24
17461: EQUAL
17462: OR
17463: PUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL_OW 266
17473: PUSH
17474: LD_INT 17
17476: EQUAL
17477: OR
17478: PUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 266
17488: PUSH
17489: LD_INT 25
17491: EQUAL
17492: OR
17493: PUSH
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 266
17503: PUSH
17504: LD_INT 19
17506: EQUAL
17507: OR
17508: PUSH
17509: LD_VAR 0 1
17513: PPUSH
17514: CALL_OW 266
17518: PUSH
17519: LD_INT 20
17521: EQUAL
17522: OR
17523: PUSH
17524: LD_VAR 0 1
17528: PPUSH
17529: CALL_OW 266
17533: PUSH
17534: LD_INT 18
17536: EQUAL
17537: OR
17538: PUSH
17539: LD_VAR 0 1
17543: PPUSH
17544: CALL_OW 266
17548: PUSH
17549: LD_INT 21
17551: EQUAL
17552: OR
17553: PUSH
17554: LD_VAR 0 1
17558: PPUSH
17559: CALL_OW 266
17563: PUSH
17564: LD_INT 23
17566: EQUAL
17567: OR
17568: PUSH
17569: LD_VAR 0 1
17573: PPUSH
17574: CALL_OW 266
17578: PUSH
17579: LD_INT 16
17581: EQUAL
17582: OR
17583: PUSH
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 266
17593: PUSH
17594: LD_INT 6
17596: EQUAL
17597: OR
17598: PUSH
17599: LD_VAR 0 1
17603: PPUSH
17604: CALL_OW 266
17608: PUSH
17609: LD_INT 29
17611: EQUAL
17612: OR
17613: PUSH
17614: LD_VAR 0 1
17618: PPUSH
17619: CALL_OW 266
17623: PUSH
17624: LD_INT 26
17626: EQUAL
17627: OR
17628: PUSH
17629: LD_VAR 0 1
17633: PPUSH
17634: CALL_OW 266
17638: PUSH
17639: LD_INT 30
17641: EQUAL
17642: OR
17643: PUSH
17644: LD_VAR 0 1
17648: PPUSH
17649: CALL_OW 266
17653: PUSH
17654: LD_INT 28
17656: EQUAL
17657: OR
17658: PUSH
17659: LD_VAR 0 1
17663: PPUSH
17664: CALL_OW 266
17668: PUSH
17669: LD_INT 27
17671: EQUAL
17672: OR
17673: PUSH
17674: LD_VAR 0 1
17678: PPUSH
17679: CALL_OW 266
17683: PUSH
17684: LD_INT 33
17686: EQUAL
17687: OR
17688: PUSH
17689: LD_VAR 0 1
17693: PPUSH
17694: CALL_OW 266
17698: PUSH
17699: LD_INT 2
17701: EQUAL
17702: OR
17703: PUSH
17704: LD_VAR 0 1
17708: PPUSH
17709: CALL_OW 266
17713: PUSH
17714: LD_INT 4
17716: EQUAL
17717: OR
17718: IFFALSE 17804
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17720: LD_ADDR_EXP 31
17724: PUSH
17725: LD_EXP 31
17729: PUSH
17730: LD_VAR 0 1
17734: PPUSH
17735: CALL_OW 266
17739: ADD
17740: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17741: LD_ADDR_EXP 31
17745: PUSH
17746: LD_EXP 31
17750: PUSH
17751: LD_VAR 0 1
17755: PPUSH
17756: CALL_OW 250
17760: ADD
17761: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17762: LD_ADDR_EXP 31
17766: PUSH
17767: LD_EXP 31
17771: PUSH
17772: LD_VAR 0 1
17776: PPUSH
17777: CALL_OW 251
17781: ADD
17782: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17783: LD_ADDR_EXP 31
17787: PUSH
17788: LD_EXP 31
17792: PUSH
17793: LD_VAR 0 1
17797: PPUSH
17798: CALL_OW 254
17802: ADD
17803: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17804: LD_VAR 0 1
17808: PPUSH
17809: CALL_OW 266
17813: PUSH
17814: LD_INT 1
17816: EQUAL
17817: IFFALSE 17896
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17819: LD_ADDR_EXP 31
17823: PUSH
17824: LD_EXP 31
17828: PUSH
17829: LD_INT 0
17831: ADD
17832: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17833: LD_ADDR_EXP 31
17837: PUSH
17838: LD_EXP 31
17842: PUSH
17843: LD_VAR 0 1
17847: PPUSH
17848: CALL_OW 250
17852: ADD
17853: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17854: LD_ADDR_EXP 31
17858: PUSH
17859: LD_EXP 31
17863: PUSH
17864: LD_VAR 0 1
17868: PPUSH
17869: CALL_OW 251
17873: ADD
17874: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17875: LD_ADDR_EXP 31
17879: PUSH
17880: LD_EXP 31
17884: PUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 254
17894: ADD
17895: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17896: LD_VAR 0 1
17900: PPUSH
17901: CALL_OW 266
17905: PUSH
17906: LD_INT 3
17908: EQUAL
17909: IFFALSE 17988
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17911: LD_ADDR_EXP 31
17915: PUSH
17916: LD_EXP 31
17920: PUSH
17921: LD_INT 2
17923: ADD
17924: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17925: LD_ADDR_EXP 31
17929: PUSH
17930: LD_EXP 31
17934: PUSH
17935: LD_VAR 0 1
17939: PPUSH
17940: CALL_OW 250
17944: ADD
17945: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17946: LD_ADDR_EXP 31
17950: PUSH
17951: LD_EXP 31
17955: PUSH
17956: LD_VAR 0 1
17960: PPUSH
17961: CALL_OW 251
17965: ADD
17966: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17967: LD_ADDR_EXP 31
17971: PUSH
17972: LD_EXP 31
17976: PUSH
17977: LD_VAR 0 1
17981: PPUSH
17982: CALL_OW 254
17986: ADD
17987: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17988: LD_VAR 0 1
17992: PPUSH
17993: CALL_OW 266
17997: PUSH
17998: LD_INT 5
18000: EQUAL
18001: IFFALSE 18080
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
18003: LD_ADDR_EXP 31
18007: PUSH
18008: LD_EXP 31
18012: PUSH
18013: LD_INT 4
18015: ADD
18016: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18017: LD_ADDR_EXP 31
18021: PUSH
18022: LD_EXP 31
18026: PUSH
18027: LD_VAR 0 1
18031: PPUSH
18032: CALL_OW 250
18036: ADD
18037: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18038: LD_ADDR_EXP 31
18042: PUSH
18043: LD_EXP 31
18047: PUSH
18048: LD_VAR 0 1
18052: PPUSH
18053: CALL_OW 251
18057: ADD
18058: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18059: LD_ADDR_EXP 31
18063: PUSH
18064: LD_EXP 31
18068: PUSH
18069: LD_VAR 0 1
18073: PPUSH
18074: CALL_OW 254
18078: ADD
18079: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18080: LD_EXP 48
18084: PUSH
18085: LD_VAR 0 1
18089: PPUSH
18090: CALL_OW 257
18094: PUSH
18095: LD_INT 3
18097: EQUAL
18098: AND
18099: PUSH
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 255
18109: PUSH
18110: LD_INT 3
18112: EQUAL
18113: AND
18114: PUSH
18115: LD_INT 21
18117: PPUSH
18118: CALL_OW 302
18122: AND
18123: PUSH
18124: LD_INT 21
18126: PPUSH
18127: CALL_OW 255
18131: PUSH
18132: LD_INT 3
18134: EQUAL
18135: AND
18136: IFFALSE 18218
// begin ruMechCounter := ruMechCounter - 1 ;
18138: LD_ADDR_EXP 48
18142: PUSH
18143: LD_EXP 48
18147: PUSH
18148: LD_INT 1
18150: MINUS
18151: ST_TO_ADDR
// uc_side = 3 ;
18152: LD_ADDR_OWVAR 20
18156: PUSH
18157: LD_INT 3
18159: ST_TO_ADDR
// uc_nation = 3 ;
18160: LD_ADDR_OWVAR 21
18164: PUSH
18165: LD_INT 3
18167: ST_TO_ADDR
// hc_gallery :=  ;
18168: LD_ADDR_OWVAR 33
18172: PUSH
18173: LD_STRING 
18175: ST_TO_ADDR
// hc_name :=  ;
18176: LD_ADDR_OWVAR 26
18180: PUSH
18181: LD_STRING 
18183: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
18184: LD_INT 0
18186: PPUSH
18187: LD_EXP 34
18191: PPUSH
18192: LD_EXP 35
18196: PPUSH
18197: CALL_OW 12
18201: PPUSH
18202: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
18206: CALL_OW 44
18210: PPUSH
18211: LD_INT 21
18213: PPUSH
18214: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18218: LD_VAR 0 1
18222: PPUSH
18223: CALL_OW 255
18227: PUSH
18228: LD_INT 3
18230: EQUAL
18231: PUSH
18232: LD_VAR 0 1
18236: PPUSH
18237: CALL_OW 264
18241: PUSH
18242: LD_INT 52
18244: EQUAL
18245: AND
18246: PUSH
18247: LD_INT 21
18249: PPUSH
18250: CALL_OW 302
18254: AND
18255: PUSH
18256: LD_INT 21
18258: PPUSH
18259: CALL_OW 255
18263: PUSH
18264: LD_INT 3
18266: EQUAL
18267: AND
18268: IFFALSE 18289
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18270: LD_INT 21
18272: PPUSH
18273: LD_INT 22
18275: PPUSH
18276: LD_INT 1
18278: PPUSH
18279: LD_INT 1
18281: PPUSH
18282: LD_INT 52
18284: PPUSH
18285: CALL_OW 125
// end ;
18289: PPOPN 1
18291: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18292: LD_INT 0
18294: PPUSH
18295: PPUSH
18296: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18297: LD_VAR 0 1
18301: PPUSH
18302: CALL_OW 264
18306: PUSH
18307: LD_INT 51
18309: EQUAL
18310: PUSH
18311: LD_VAR 0 1
18315: PPUSH
18316: CALL_OW 255
18320: PUSH
18321: LD_INT 3
18323: EQUAL
18324: AND
18325: IFFALSE 18387
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18327: LD_ADDR_VAR 0 5
18331: PUSH
18332: LD_INT 2
18334: PPUSH
18335: CALL_OW 274
18339: PPUSH
18340: LD_INT 1
18342: PPUSH
18343: CALL_OW 275
18347: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18348: LD_INT 2
18350: PPUSH
18351: CALL_OW 274
18355: PPUSH
18356: LD_INT 1
18358: PPUSH
18359: LD_VAR 0 5
18363: PUSH
18364: LD_INT 100
18366: MINUS
18367: PPUSH
18368: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18372: LD_VAR 0 1
18376: PPUSH
18377: LD_INT 1
18379: PPUSH
18380: LD_INT 100
18382: PPUSH
18383: CALL_OW 291
// end ; if building = rufabsupp then
18387: LD_VAR 0 2
18391: PUSH
18392: LD_INT 17
18394: EQUAL
18395: IFFALSE 18409
// SetSide ( vehicle , 6 ) ;
18397: LD_VAR 0 1
18401: PPUSH
18402: LD_INT 6
18404: PPUSH
18405: CALL_OW 235
// end ;
18409: PPOPN 5
18411: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18412: LD_VAR 0 1
18416: PPUSH
18417: CALL_OW 255
18421: PUSH
18422: LD_INT 3
18424: EQUAL
18425: IFFALSE 18456
// begin tamedApemans = tamedApemans + 1 ;
18427: LD_ADDR_EXP 32
18431: PUSH
18432: LD_EXP 32
18436: PUSH
18437: LD_INT 1
18439: PLUS
18440: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18441: LD_VAR 0 1
18445: PPUSH
18446: LD_INT 106
18448: PPUSH
18449: LD_INT 85
18451: PPUSH
18452: CALL_OW 111
// end ; end ;
18456: PPOPN 2
18458: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18459: LD_INT 0
18461: PPUSH
18462: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18463: LD_VAR 0 1
18467: PPUSH
18468: CALL_OW 255
18472: PUSH
18473: LD_INT 3
18475: EQUAL
18476: PUSH
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 247
18486: PUSH
18487: LD_INT 2
18489: EQUAL
18490: AND
18491: IFFALSE 18600
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18493: LD_VAR 0 1
18497: PPUSH
18498: CALL_OW 264
18502: PUSH
18503: LD_INT 42
18505: EQUAL
18506: PUSH
18507: LD_VAR 0 1
18511: PPUSH
18512: CALL_OW 264
18516: PUSH
18517: LD_INT 43
18519: EQUAL
18520: OR
18521: PUSH
18522: LD_VAR 0 1
18526: PPUSH
18527: CALL_OW 264
18531: PUSH
18532: LD_INT 44
18534: EQUAL
18535: OR
18536: PUSH
18537: LD_VAR 0 1
18541: PPUSH
18542: CALL_OW 264
18546: PUSH
18547: LD_INT 46
18549: EQUAL
18550: OR
18551: IFFALSE 18600
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18553: LD_INT 21
18555: PPUSH
18556: LD_VAR 0 1
18560: PPUSH
18561: CALL_OW 265
18565: PPUSH
18566: LD_VAR 0 1
18570: PPUSH
18571: CALL_OW 262
18575: PPUSH
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL_OW 263
18585: PPUSH
18586: LD_VAR 0 1
18590: PPUSH
18591: CALL_OW 264
18595: PPUSH
18596: CALL_OW 185
// end ;
18600: PPOPN 3
18602: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 255
18612: PUSH
18613: LD_INT 3
18615: EQUAL
18616: PUSH
18617: LD_VAR 0 2
18621: PPUSH
18622: CALL_OW 255
18626: PUSH
18627: LD_INT 3
18629: EQUAL
18630: AND
18631: PUSH
18632: LD_VAR 0 1
18636: PPUSH
18637: CALL_OW 302
18641: AND
18642: IFFALSE 18684
// begin ComRepairVehicle ( human , vehicle ) ;
18644: LD_VAR 0 2
18648: PPUSH
18649: LD_VAR 0 1
18653: PPUSH
18654: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18658: LD_VAR 0 2
18662: PPUSH
18663: LD_VAR 0 1
18667: PPUSH
18668: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18672: LD_VAR 0 1
18676: PPUSH
18677: LD_INT 100
18679: PPUSH
18680: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18684: LD_VAR 0 1
18688: PPUSH
18689: CALL_OW 255
18693: PUSH
18694: LD_INT 3
18696: EQUAL
18697: PUSH
18698: LD_VAR 0 2
18702: PPUSH
18703: CALL_OW 255
18707: PUSH
18708: LD_INT 3
18710: EQUAL
18711: AND
18712: PUSH
18713: LD_INT 21
18715: PPUSH
18716: CALL_OW 302
18720: AND
18721: PUSH
18722: LD_VAR 0 1
18726: PPUSH
18727: CALL_OW 302
18731: NOT
18732: AND
18733: IFFALSE 18747
// ComEnterUnit ( human , rufab ) ;
18735: LD_VAR 0 2
18739: PPUSH
18740: LD_INT 21
18742: PPUSH
18743: CALL_OW 120
// end ;
18747: PPOPN 2
18749: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18750: LD_VAR 0 1
18754: PUSH
18755: LD_INT 21
18757: EQUAL
18758: PUSH
18759: LD_VAR 0 2
18763: PPUSH
18764: CALL_OW 255
18768: PUSH
18769: LD_INT 3
18771: EQUAL
18772: AND
18773: IFFALSE 18787
// SetLives ( human , 1000 ) ;
18775: LD_VAR 0 2
18779: PPUSH
18780: LD_INT 1000
18782: PPUSH
18783: CALL_OW 234
// end ;
18787: PPOPN 2
18789: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18790: LD_VAR 0 1
18794: PPUSH
18795: CALL 24535 0 1
// end ; end_of_file
18799: PPOPN 1
18801: END
// every 0 0$30 trigger cratesStatus = 1 do
18802: LD_EXP 38
18806: PUSH
18807: LD_INT 1
18809: EQUAL
18810: IFFALSE 18893
18812: GO 18814
18814: DISABLE
// begin enable ;
18815: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18816: LD_INT 350
18818: PUSH
18819: LD_INT 1050
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 1
18828: PPUSH
18829: LD_INT 2
18831: PPUSH
18832: CALL_OW 12
18836: ARRAY
18837: PPUSH
18838: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18842: LD_INT 4
18844: PUSH
18845: LD_INT 5
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 1
18854: PPUSH
18855: LD_INT 2
18857: PPUSH
18858: CALL_OW 12
18862: ARRAY
18863: PPUSH
18864: LD_INT 6
18866: PUSH
18867: LD_INT 7
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 1
18876: PPUSH
18877: LD_INT 2
18879: PPUSH
18880: CALL_OW 12
18884: ARRAY
18885: PPUSH
18886: LD_INT 1
18888: PPUSH
18889: CALL_OW 55
// end ;
18893: END
// every 1 1$0 trigger cratesStatus = 2 do
18894: LD_EXP 38
18898: PUSH
18899: LD_INT 2
18901: EQUAL
18902: IFFALSE 18985
18904: GO 18906
18906: DISABLE
// begin enable ;
18907: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18908: LD_INT 3150
18910: PUSH
18911: LD_INT 4550
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: PPUSH
18921: LD_INT 2
18923: PPUSH
18924: CALL_OW 12
18928: ARRAY
18929: PPUSH
18930: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18934: LD_INT 2
18936: PUSH
18937: LD_INT 5
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: PPUSH
18947: LD_INT 2
18949: PPUSH
18950: CALL_OW 12
18954: ARRAY
18955: PPUSH
18956: LD_INT 6
18958: PUSH
18959: LD_INT 7
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 1
18968: PPUSH
18969: LD_INT 2
18971: PPUSH
18972: CALL_OW 12
18976: ARRAY
18977: PPUSH
18978: LD_INT 1
18980: PPUSH
18981: CALL_OW 55
// end ;
18985: END
// every 0 0$30 + 0 0$10 do
18986: GO 18988
18988: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18989: LD_INT 4
18991: PUSH
18992: LD_INT 5
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 1
19001: PPUSH
19002: LD_INT 2
19004: PPUSH
19005: CALL_OW 12
19009: ARRAY
19010: PPUSH
19011: LD_INT 7
19013: PPUSH
19014: LD_INT 1
19016: PPUSH
19017: CALL_OW 55
// Wait ( 0 0$15 ) ;
19021: LD_INT 525
19023: PPUSH
19024: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19028: LD_INT 4
19030: PUSH
19031: LD_INT 5
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PPUSH
19041: LD_INT 2
19043: PPUSH
19044: CALL_OW 12
19048: ARRAY
19049: PPUSH
19050: LD_INT 7
19052: PPUSH
19053: LD_INT 1
19055: PPUSH
19056: CALL_OW 55
// Wait ( 0 0$20 ) ;
19060: LD_INT 700
19062: PPUSH
19063: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
19067: LD_INT 4
19069: PUSH
19070: LD_INT 5
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: PPUSH
19080: LD_INT 2
19082: PPUSH
19083: CALL_OW 12
19087: ARRAY
19088: PPUSH
19089: LD_INT 7
19091: PPUSH
19092: LD_INT 1
19094: PPUSH
19095: CALL_OW 55
// end ; end_of_file
19099: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
19100: LD_EXP 24
19104: PUSH
19105: LD_INT 1
19107: EQUAL
19108: IFFALSE 19409
19110: GO 19112
19112: DISABLE
19113: LD_INT 0
19115: PPUSH
19116: PPUSH
19117: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19118: LD_ADDR_VAR 0 2
19122: PUSH
19123: LD_INT 22
19125: PUSH
19126: LD_INT 1
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 21
19135: PUSH
19136: LD_INT 3
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: LD_INT 30
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 30
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: LIST
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: LIST
19175: PPUSH
19176: CALL_OW 69
19180: ST_TO_ADDR
// for i in tmp do
19181: LD_ADDR_VAR 0 1
19185: PUSH
19186: LD_VAR 0 2
19190: PUSH
19191: FOR_IN
19192: IFFALSE 19225
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19194: LD_ADDR_VAR 0 3
19198: PUSH
19199: LD_VAR 0 3
19203: PUSH
19204: LD_VAR 0 1
19208: PPUSH
19209: CALL_OW 274
19213: PPUSH
19214: LD_INT 1
19216: PPUSH
19217: CALL_OW 275
19221: PLUS
19222: ST_TO_ADDR
19223: GO 19191
19225: POP
19226: POP
// strings = [ ] ;
19227: LD_ADDR_EXP 27
19231: PUSH
19232: EMPTY
19233: ST_TO_ADDR
// if tmp = 0 then
19234: LD_VAR 0 2
19238: PUSH
19239: LD_INT 0
19241: EQUAL
19242: IFFALSE 19267
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19244: LD_ADDR_EXP 27
19248: PUSH
19249: LD_EXP 27
19253: PUSH
19254: LD_STRING #Am06-1
19256: PUSH
19257: LD_EXP 25
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: ADD
19266: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19267: LD_VAR 0 2
19271: PUSH
19272: LD_INT 0
19274: GREATER
19275: PUSH
19276: LD_EXP 25
19280: PUSH
19281: LD_VAR 0 3
19285: GREATER
19286: AND
19287: IFFALSE 19318
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19289: LD_ADDR_EXP 27
19293: PUSH
19294: LD_EXP 27
19298: PUSH
19299: LD_STRING #Am06-1
19301: PUSH
19302: LD_EXP 25
19306: PUSH
19307: LD_VAR 0 3
19311: MINUS
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: ADD
19317: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19318: LD_VAR 0 2
19322: PUSH
19323: LD_INT 0
19325: GREATER
19326: PUSH
19327: LD_EXP 25
19331: PUSH
19332: LD_VAR 0 3
19336: LESSEQUAL
19337: AND
19338: IFFALSE 19361
// strings = strings ^ [ #Am06-1 , 0 ] ;
19340: LD_ADDR_EXP 27
19344: PUSH
19345: LD_EXP 27
19349: PUSH
19350: LD_STRING #Am06-1
19352: PUSH
19353: LD_INT 0
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: ADD
19360: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19361: LD_ADDR_EXP 26
19365: PUSH
19366: LD_EXP 26
19370: PUSH
19371: LD_INT 35
19373: MINUS
19374: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19375: LD_ADDR_EXP 27
19379: PUSH
19380: LD_EXP 27
19384: PUSH
19385: LD_STRING #Am06-2
19387: PUSH
19388: LD_EXP 26
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: ADD
19397: ST_TO_ADDR
// display_strings = strings ;
19398: LD_ADDR_OWVAR 47
19402: PUSH
19403: LD_EXP 27
19407: ST_TO_ADDR
// enable ;
19408: ENABLE
// end ; end_of_file
19409: PPOPN 3
19411: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19412: LD_INT 0
19414: PPUSH
19415: PPUSH
19416: PPUSH
19417: PPUSH
19418: PPUSH
19419: PPUSH
19420: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19421: LD_ADDR_VAR 0 3
19425: PUSH
19426: LD_INT 22
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 2
19438: PUSH
19439: LD_INT 30
19441: PUSH
19442: LD_INT 0
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 30
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: LIST
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PPUSH
19468: CALL_OW 69
19472: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19473: LD_INT 35
19475: PPUSH
19476: CALL_OW 67
// until depot ;
19480: LD_VAR 0 3
19484: IFFALSE 19421
// repeat wait ( 0 0$1 ) ;
19486: LD_INT 35
19488: PPUSH
19489: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19493: LD_ADDR_VAR 0 4
19497: PUSH
19498: LD_INT 22
19500: PUSH
19501: LD_INT 1
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 91
19510: PUSH
19511: LD_VAR 0 3
19515: PUSH
19516: LD_INT 1
19518: ARRAY
19519: PUSH
19520: LD_INT 15
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 21
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 2
19540: PUSH
19541: LD_INT 25
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 25
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 25
19563: PUSH
19564: LD_INT 3
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 25
19573: PUSH
19574: LD_INT 4
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 3
19590: PUSH
19591: LD_INT 54
19593: PUSH
19594: EMPTY
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: LD_INT 55
19606: PUSH
19607: EMPTY
19608: LIST
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: PPUSH
19622: CALL_OW 69
19626: PUSH
19627: LD_EXP 2
19631: PUSH
19632: LD_EXP 3
19636: PUSH
19637: LD_EXP 4
19641: PUSH
19642: LD_EXP 5
19646: PUSH
19647: LD_EXP 7
19651: PUSH
19652: LD_EXP 8
19656: PUSH
19657: LD_EXP 9
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: PUSH
19671: LD_EXP 46
19675: ADD
19676: DIFF
19677: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19678: LD_VAR 0 4
19682: PUSH
19683: LD_INT 1
19685: PPUSH
19686: CALL_OW 463
19690: NOT
19691: AND
19692: IFFALSE 19486
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19694: LD_ADDR_VAR 0 4
19698: PUSH
19699: LD_VAR 0 4
19703: PUSH
19704: LD_INT 1
19706: PPUSH
19707: LD_VAR 0 4
19711: PPUSH
19712: CALL_OW 12
19716: ARRAY
19717: ST_TO_ADDR
// blockSpawn = 1 ;
19718: LD_ADDR_EXP 29
19722: PUSH
19723: LD_INT 1
19725: ST_TO_ADDR
// uc_side = 2 ;
19726: LD_ADDR_OWVAR 20
19730: PUSH
19731: LD_INT 2
19733: ST_TO_ADDR
// uc_nation = 2 ;
19734: LD_ADDR_OWVAR 21
19738: PUSH
19739: LD_INT 2
19741: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19742: LD_ADDR_EXP 19
19746: PUSH
19747: LD_STRING Kurt
19749: PPUSH
19750: LD_INT 0
19752: PPUSH
19753: CALL 6132 0 2
19757: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19758: LD_EXP 19
19762: PPUSH
19763: LD_VAR 0 4
19767: PPUSH
19768: CALL_OW 250
19772: PPUSH
19773: LD_VAR 0 4
19777: PPUSH
19778: CALL_OW 251
19782: PPUSH
19783: LD_INT 5
19785: PPUSH
19786: LD_INT 1
19788: PPUSH
19789: CALL_OW 50
// InGameOn ;
19793: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19797: LD_EXP 19
19801: PPUSH
19802: CALL_OW 87
// wait ( 0 0$2 ) ;
19806: LD_INT 70
19808: PPUSH
19809: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19813: LD_EXP 19
19817: PPUSH
19818: LD_VAR 0 4
19822: PPUSH
19823: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19827: LD_VAR 0 4
19831: PPUSH
19832: LD_EXP 19
19836: PPUSH
19837: CALL_OW 112
// wait ( 0 0$1 ) ;
19841: LD_INT 35
19843: PPUSH
19844: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19848: LD_VAR 0 4
19852: PPUSH
19853: LD_EXP 19
19857: PPUSH
19858: CALL_OW 119
// DialogueOn ;
19862: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19866: LD_EXP 19
19870: PPUSH
19871: LD_STRING D2-Kurt-1
19873: PPUSH
19874: CALL_OW 88
// if tmp = JMM then
19878: LD_VAR 0 4
19882: PUSH
19883: LD_EXP 1
19887: EQUAL
19888: IFFALSE 19980
// begin Say ( JMM , D2-JMM-1 ) ;
19890: LD_EXP 1
19894: PPUSH
19895: LD_STRING D2-JMM-1
19897: PPUSH
19898: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19902: LD_EXP 19
19906: PPUSH
19907: LD_STRING D2-Kurt-2
19909: PPUSH
19910: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19914: LD_EXP 1
19918: PPUSH
19919: LD_STRING D2-JMM-2
19921: PPUSH
19922: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19926: LD_EXP 19
19930: PPUSH
19931: LD_STRING D2-Kurt-3
19933: PPUSH
19934: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19938: LD_EXP 1
19942: PPUSH
19943: LD_STRING D2-JMM-3
19945: PPUSH
19946: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19950: LD_EXP 19
19954: PPUSH
19955: LD_STRING D2-Kurt-4
19957: PPUSH
19958: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19962: LD_EXP 1
19966: PPUSH
19967: LD_STRING D2-JMM-4
19969: PPUSH
19970: CALL_OW 88
// DialogueOff ;
19974: CALL_OW 7
// end else
19978: GO 20290
// begin if GetSex ( tmp ) = 1 then
19980: LD_VAR 0 4
19984: PPUSH
19985: CALL_OW 258
19989: PUSH
19990: LD_INT 1
19992: EQUAL
19993: IFFALSE 20007
// Say ( tmp , D2-Sol1-1 ) ;
19995: LD_VAR 0 4
19999: PPUSH
20000: LD_STRING D2-Sol1-1
20002: PPUSH
20003: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20007: LD_VAR 0 4
20011: PPUSH
20012: CALL_OW 258
20016: PUSH
20017: LD_INT 2
20019: EQUAL
20020: IFFALSE 20034
// Say ( tmp , D2-FSol1-1 ) ;
20022: LD_VAR 0 4
20026: PPUSH
20027: LD_STRING D2-FSol1-1
20029: PPUSH
20030: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
20034: LD_EXP 19
20038: PPUSH
20039: LD_STRING D2-Kurt-2
20041: PPUSH
20042: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20046: LD_VAR 0 4
20050: PPUSH
20051: CALL_OW 258
20055: PUSH
20056: LD_INT 1
20058: EQUAL
20059: IFFALSE 20073
// Say ( tmp , D2-Sol1-2 ) ;
20061: LD_VAR 0 4
20065: PPUSH
20066: LD_STRING D2-Sol1-2
20068: PPUSH
20069: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20073: LD_VAR 0 4
20077: PPUSH
20078: CALL_OW 258
20082: PUSH
20083: LD_INT 2
20085: EQUAL
20086: IFFALSE 20100
// Say ( tmp , D2-FSol1-2 ) ;
20088: LD_VAR 0 4
20092: PPUSH
20093: LD_STRING D2-FSol1-2
20095: PPUSH
20096: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
20100: LD_EXP 19
20104: PPUSH
20105: LD_STRING D2-Kurt-3
20107: PPUSH
20108: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20112: LD_VAR 0 4
20116: PPUSH
20117: CALL_OW 258
20121: PUSH
20122: LD_INT 1
20124: EQUAL
20125: IFFALSE 20139
// Say ( tmp , D2-Sol1-3 ) ;
20127: LD_VAR 0 4
20131: PPUSH
20132: LD_STRING D2-Sol1-3
20134: PPUSH
20135: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20139: LD_VAR 0 4
20143: PPUSH
20144: CALL_OW 258
20148: PUSH
20149: LD_INT 2
20151: EQUAL
20152: IFFALSE 20166
// Say ( tmp , D2-FSol1-3 ) ;
20154: LD_VAR 0 4
20158: PPUSH
20159: LD_STRING D2-FSol1-3
20161: PPUSH
20162: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
20166: LD_EXP 19
20170: PPUSH
20171: LD_STRING D2-Kurt-4
20173: PPUSH
20174: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20178: LD_VAR 0 4
20182: PPUSH
20183: CALL_OW 258
20187: PUSH
20188: LD_INT 1
20190: EQUAL
20191: IFFALSE 20205
// Say ( tmp , D2-Sol1-4 ) ;
20193: LD_VAR 0 4
20197: PPUSH
20198: LD_STRING D2-Sol1-4
20200: PPUSH
20201: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20205: LD_VAR 0 4
20209: PPUSH
20210: CALL_OW 258
20214: PUSH
20215: LD_INT 2
20217: EQUAL
20218: IFFALSE 20232
// Say ( tmp , D2-FSol1-4 ) ;
20220: LD_VAR 0 4
20224: PPUSH
20225: LD_STRING D2-FSol1-4
20227: PPUSH
20228: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20232: LD_VAR 0 4
20236: PPUSH
20237: CALL_OW 258
20241: PUSH
20242: LD_INT 1
20244: EQUAL
20245: IFFALSE 20259
// Say ( tmp , D2-Sol1-5 ) ;
20247: LD_VAR 0 4
20251: PPUSH
20252: LD_STRING D2-Sol1-5
20254: PPUSH
20255: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20259: LD_VAR 0 4
20263: PPUSH
20264: CALL_OW 258
20268: PUSH
20269: LD_INT 2
20271: EQUAL
20272: IFFALSE 20286
// Say ( tmp , D2-FSol1-5 ) ;
20274: LD_VAR 0 4
20278: PPUSH
20279: LD_STRING D2-FSol1-5
20281: PPUSH
20282: CALL_OW 88
// DialogueOff ;
20286: CALL_OW 7
// end ; dec = ShowQuery1 ;
20290: LD_ADDR_VAR 0 6
20294: PUSH
20295: CALL 6656 0 0
20299: ST_TO_ADDR
// if dec = 1 then
20300: LD_VAR 0 6
20304: PUSH
20305: LD_INT 1
20307: EQUAL
20308: IFFALSE 20370
// begin DialogueOn ;
20310: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20314: LD_EXP 19
20318: PPUSH
20319: LD_STRING D2a-Kurt-1
20321: PPUSH
20322: CALL_OW 88
// DialogueOff ;
20326: CALL_OW 7
// InGameOff ;
20330: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20334: LD_INT 1
20336: PPUSH
20337: LD_INT 2
20339: PPUSH
20340: LD_INT 2
20342: PPUSH
20343: LD_INT 1
20345: PPUSH
20346: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20350: LD_EXP 19
20354: PPUSH
20355: LD_INT 8
20357: PPUSH
20358: CALL_OW 113
// readyToEscape = 1 ;
20362: LD_ADDR_EXP 21
20366: PUSH
20367: LD_INT 1
20369: ST_TO_ADDR
// end ; if dec = 2 then
20370: LD_VAR 0 6
20374: PUSH
20375: LD_INT 2
20377: EQUAL
20378: IFFALSE 20898
// begin DialogueOn ;
20380: CALL_OW 6
// if tmp = JMM then
20384: LD_VAR 0 4
20388: PUSH
20389: LD_EXP 1
20393: EQUAL
20394: IFFALSE 20450
// begin Say ( JMM , D2b-JMM-1 ) ;
20396: LD_EXP 1
20400: PPUSH
20401: LD_STRING D2b-JMM-1
20403: PPUSH
20404: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20408: LD_EXP 19
20412: PPUSH
20413: LD_STRING D2b-Kurt-1
20415: PPUSH
20416: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20420: LD_EXP 1
20424: PPUSH
20425: LD_STRING D2b-JMM-2
20427: PPUSH
20428: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20432: LD_EXP 19
20436: PPUSH
20437: LD_STRING D2b-Kurt-2
20439: PPUSH
20440: CALL_OW 88
// DialogueOff ;
20444: CALL_OW 7
// end else
20448: GO 20640
// begin if GetSex ( tmp ) = 1 then
20450: LD_VAR 0 4
20454: PPUSH
20455: CALL_OW 258
20459: PUSH
20460: LD_INT 1
20462: EQUAL
20463: IFFALSE 20477
// Say ( tmp , D2b-Sol1-1 ) ;
20465: LD_VAR 0 4
20469: PPUSH
20470: LD_STRING D2b-Sol1-1
20472: PPUSH
20473: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20477: LD_VAR 0 4
20481: PPUSH
20482: CALL_OW 258
20486: PUSH
20487: LD_INT 2
20489: EQUAL
20490: IFFALSE 20504
// Say ( tmp , D2b-FSol1-1 ) ;
20492: LD_VAR 0 4
20496: PPUSH
20497: LD_STRING D2b-FSol1-1
20499: PPUSH
20500: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20504: LD_EXP 19
20508: PPUSH
20509: LD_STRING D2b-Kurt-1
20511: PPUSH
20512: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20516: LD_VAR 0 4
20520: PPUSH
20521: CALL_OW 258
20525: PUSH
20526: LD_INT 1
20528: EQUAL
20529: IFFALSE 20543
// Say ( tmp , D2b-Sol1-2 ) ;
20531: LD_VAR 0 4
20535: PPUSH
20536: LD_STRING D2b-Sol1-2
20538: PPUSH
20539: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20543: LD_VAR 0 4
20547: PPUSH
20548: CALL_OW 258
20552: PUSH
20553: LD_INT 2
20555: EQUAL
20556: IFFALSE 20570
// Say ( tmp , D2b-FSol1-2 ) ;
20558: LD_VAR 0 4
20562: PPUSH
20563: LD_STRING D2b-FSol1-2
20565: PPUSH
20566: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20570: LD_EXP 19
20574: PPUSH
20575: LD_STRING D2b-Kurt-2
20577: PPUSH
20578: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20582: LD_VAR 0 4
20586: PPUSH
20587: CALL_OW 258
20591: PUSH
20592: LD_INT 1
20594: EQUAL
20595: IFFALSE 20609
// Say ( tmp , D2c-Sol1-2 ) ;
20597: LD_VAR 0 4
20601: PPUSH
20602: LD_STRING D2c-Sol1-2
20604: PPUSH
20605: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20609: LD_VAR 0 4
20613: PPUSH
20614: CALL_OW 258
20618: PUSH
20619: LD_INT 2
20621: EQUAL
20622: IFFALSE 20636
// Say ( tmp , D2c-FSol1-2 ) ;
20624: LD_VAR 0 4
20628: PPUSH
20629: LD_STRING D2c-FSol1-2
20631: PPUSH
20632: CALL_OW 88
// DialogueOff ;
20636: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20640: LD_ADDR_VAR 0 7
20644: PUSH
20645: CALL 6730 0 0
20649: ST_TO_ADDR
// if dec2 = 1 then
20650: LD_VAR 0 7
20654: PUSH
20655: LD_INT 1
20657: EQUAL
20658: IFFALSE 20720
// begin DialogueOn ;
20660: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20664: LD_EXP 19
20668: PPUSH
20669: LD_STRING D2a-Kurt-1
20671: PPUSH
20672: CALL_OW 88
// DialogueOff ;
20676: CALL_OW 7
// InGameOff ;
20680: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20684: LD_INT 1
20686: PPUSH
20687: LD_INT 2
20689: PPUSH
20690: LD_INT 2
20692: PPUSH
20693: LD_INT 1
20695: PPUSH
20696: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
20700: LD_EXP 19
20704: PPUSH
20705: LD_INT 8
20707: PPUSH
20708: CALL_OW 113
// readyToEscape = 1 ;
20712: LD_ADDR_EXP 21
20716: PUSH
20717: LD_INT 1
20719: ST_TO_ADDR
// end ; if dec2 = 2 then
20720: LD_VAR 0 7
20724: PUSH
20725: LD_INT 2
20727: EQUAL
20728: IFFALSE 20898
// begin if tmp = JMM then
20730: LD_VAR 0 4
20734: PUSH
20735: LD_EXP 1
20739: EQUAL
20740: IFFALSE 20800
// begin DialogueOn ;
20742: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20746: LD_EXP 1
20750: PPUSH
20751: LD_STRING D2c-JMM-1
20753: PPUSH
20754: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20758: LD_EXP 19
20762: PPUSH
20763: LD_STRING D2c-Kurt-1
20765: PPUSH
20766: CALL_OW 88
// DialogueOff ;
20770: CALL_OW 7
// InGameOff ;
20774: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20778: LD_EXP 19
20782: PPUSH
20783: LD_INT 8
20785: PPUSH
20786: CALL_OW 113
// readyToEscape = 1 ;
20790: LD_ADDR_EXP 21
20794: PUSH
20795: LD_INT 1
20797: ST_TO_ADDR
// end else
20798: GO 20898
// begin DialogueOn ;
20800: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20804: LD_VAR 0 4
20808: PPUSH
20809: CALL_OW 258
20813: PUSH
20814: LD_INT 1
20816: EQUAL
20817: IFFALSE 20831
// Say ( tmp , D2c-Sol1-1 ) ;
20819: LD_VAR 0 4
20823: PPUSH
20824: LD_STRING D2c-Sol1-1
20826: PPUSH
20827: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20831: LD_VAR 0 4
20835: PPUSH
20836: CALL_OW 258
20840: PUSH
20841: LD_INT 2
20843: EQUAL
20844: IFFALSE 20858
// Say ( tmp , D2c-FSol1-1 ) ;
20846: LD_VAR 0 4
20850: PPUSH
20851: LD_STRING D2c-FSol1-1
20853: PPUSH
20854: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20858: LD_EXP 19
20862: PPUSH
20863: LD_STRING D2c-Kurt-1
20865: PPUSH
20866: CALL_OW 88
// DialogueOff ;
20870: CALL_OW 7
// InGameOff ;
20874: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20878: LD_EXP 19
20882: PPUSH
20883: LD_INT 8
20885: PPUSH
20886: CALL_OW 113
// readyToEscape = 1 ;
20890: LD_ADDR_EXP 21
20894: PUSH
20895: LD_INT 1
20897: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20898: LD_VAR 0 6
20902: PUSH
20903: LD_INT 3
20905: EQUAL
20906: IFFALSE 21080
// begin DialogueOn ;
20908: CALL_OW 6
// if tmp = JMM then
20912: LD_VAR 0 4
20916: PUSH
20917: LD_EXP 1
20921: EQUAL
20922: IFFALSE 20982
// begin DialogueOn ;
20924: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20928: LD_EXP 1
20932: PPUSH
20933: LD_STRING D2c-JMM-1
20935: PPUSH
20936: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20940: LD_EXP 19
20944: PPUSH
20945: LD_STRING D2c-Kurt-1
20947: PPUSH
20948: CALL_OW 88
// DialogueOff ;
20952: CALL_OW 7
// InGameOff ;
20956: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20960: LD_EXP 19
20964: PPUSH
20965: LD_INT 8
20967: PPUSH
20968: CALL_OW 113
// readyToEscape = 1 ;
20972: LD_ADDR_EXP 21
20976: PUSH
20977: LD_INT 1
20979: ST_TO_ADDR
// end else
20980: GO 21080
// begin DialogueOn ;
20982: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20986: LD_VAR 0 4
20990: PPUSH
20991: CALL_OW 258
20995: PUSH
20996: LD_INT 1
20998: EQUAL
20999: IFFALSE 21013
// Say ( tmp , D2c-Sol1-1 ) ;
21001: LD_VAR 0 4
21005: PPUSH
21006: LD_STRING D2c-Sol1-1
21008: PPUSH
21009: CALL_OW 88
// if GetSex ( tmp ) = 2 then
21013: LD_VAR 0 4
21017: PPUSH
21018: CALL_OW 258
21022: PUSH
21023: LD_INT 2
21025: EQUAL
21026: IFFALSE 21040
// Say ( tmp , D2c-FSol1-1 ) ;
21028: LD_VAR 0 4
21032: PPUSH
21033: LD_STRING D2c-FSol1-1
21035: PPUSH
21036: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
21040: LD_EXP 19
21044: PPUSH
21045: LD_STRING D2c-Kurt-1
21047: PPUSH
21048: CALL_OW 88
// DialogueOff ;
21052: CALL_OW 7
// InGameOff ;
21056: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
21060: LD_EXP 19
21064: PPUSH
21065: LD_INT 8
21067: PPUSH
21068: CALL_OW 113
// readyToEscape = 1 ;
21072: LD_ADDR_EXP 21
21076: PUSH
21077: LD_INT 1
21079: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
21080: LD_ADDR_EXP 29
21084: PUSH
21085: LD_INT 0
21087: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21088: LD_INT 35
21090: PPUSH
21091: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
21095: LD_EXP 19
21099: PPUSH
21100: LD_INT 8
21102: PPUSH
21103: CALL_OW 308
21107: PUSH
21108: LD_EXP 21
21112: AND
21113: PUSH
21114: LD_EXP 19
21118: PPUSH
21119: CALL_OW 301
21123: OR
21124: IFFALSE 21088
// if IsDead ( Kurt ) then
21126: LD_EXP 19
21130: PPUSH
21131: CALL_OW 301
21135: IFFALSE 21139
// exit ;
21137: GO 21208
// RemoveUnit ( Kurt ) ;
21139: LD_EXP 19
21143: PPUSH
21144: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
21148: LD_EXP 19
21152: PPUSH
21153: LD_STRING Kurt
21155: PPUSH
21156: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
21160: LD_INT 1
21162: PPUSH
21163: LD_INT 2
21165: PPUSH
21166: CALL_OW 81
21170: PUSH
21171: LD_INT 0
21173: EQUAL
21174: IFFALSE 21184
// KurtStatus = 1 ;
21176: LD_ADDR_EXP 20
21180: PUSH
21181: LD_INT 1
21183: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
21184: LD_INT 1
21186: PPUSH
21187: LD_INT 2
21189: PPUSH
21190: CALL_OW 81
21194: PUSH
21195: LD_INT 2
21197: EQUAL
21198: IFFALSE 21208
// KurtStatus = 2 ;
21200: LD_ADDR_EXP 20
21204: PUSH
21205: LD_INT 2
21207: ST_TO_ADDR
// end ; end_of_file
21208: LD_VAR 0 1
21212: RET
// every 0 0$1 do
21213: GO 21215
21215: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
21216: LD_INT 3
21218: PPUSH
21219: LD_INT 32
21221: PPUSH
21222: LD_INT 3
21224: PPUSH
21225: CALL 6785 0 3
21229: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
21230: GO 21232
21232: DISABLE
21233: LD_INT 0
21235: PPUSH
// begin enemyWayX = [ ] ;
21236: LD_ADDR_EXP 49
21240: PUSH
21241: EMPTY
21242: ST_TO_ADDR
// enemyWayY = [ ] ;
21243: LD_ADDR_EXP 50
21247: PUSH
21248: EMPTY
21249: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
21250: LD_ADDR_VAR 0 1
21254: PUSH
21255: LD_INT 1
21257: PPUSH
21258: LD_INT 2
21260: PPUSH
21261: CALL_OW 12
21265: ST_TO_ADDR
// if rnd = 1 then
21266: LD_VAR 0 1
21270: PUSH
21271: LD_INT 1
21273: EQUAL
21274: IFFALSE 21314
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21276: LD_ADDR_EXP 49
21280: PUSH
21281: LD_INT 93
21283: PUSH
21284: LD_INT 84
21286: PUSH
21287: LD_INT 104
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: LIST
21294: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21295: LD_ADDR_EXP 50
21299: PUSH
21300: LD_INT 51
21302: PUSH
21303: LD_INT 35
21305: PUSH
21306: LD_INT 28
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: ST_TO_ADDR
// end ; if rnd = 2 then
21314: LD_VAR 0 1
21318: PUSH
21319: LD_INT 2
21321: EQUAL
21322: IFFALSE 21378
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21324: LD_ADDR_EXP 49
21328: PUSH
21329: LD_INT 93
21331: PUSH
21332: LD_INT 52
21334: PUSH
21335: LD_INT 34
21337: PUSH
21338: LD_INT 28
21340: PUSH
21341: LD_INT 30
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21351: LD_ADDR_EXP 50
21355: PUSH
21356: LD_INT 51
21358: PUSH
21359: LD_INT 45
21361: PUSH
21362: LD_INT 35
21364: PUSH
21365: LD_INT 26
21367: PUSH
21368: LD_INT 20
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: ST_TO_ADDR
// end ; enable ;
21378: ENABLE
// end ;
21379: PPOPN 1
21381: END
// every 0 0$1 do
21382: GO 21384
21384: DISABLE
// begin enable ;
21385: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21386: LD_INT 3
21388: PPUSH
21389: LD_INT 2
21391: PPUSH
21392: LD_INT 10
21394: PPUSH
21395: LD_EXP 31
21399: PPUSH
21400: CALL 8220 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21404: LD_INT 3
21406: PPUSH
21407: LD_INT 12
21409: PPUSH
21410: LD_EXP 31
21414: PPUSH
21415: CALL 10105 0 3
// if disableHealAI = 0 then
21419: LD_EXP 33
21423: PUSH
21424: LD_INT 0
21426: EQUAL
21427: IFFALSE 21448
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21429: LD_INT 3
21431: PPUSH
21432: LD_INT 9
21434: PPUSH
21435: LD_INT 10
21437: PPUSH
21438: LD_INT 32
21440: PUSH
21441: EMPTY
21442: LIST
21443: PPUSH
21444: CALL 8611 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21448: LD_INT 3
21450: PPUSH
21451: LD_INT 51
21453: PPUSH
21454: LD_INT 6
21456: PPUSH
21457: CALL 9319 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21461: LD_INT 3
21463: PPUSH
21464: LD_INT 12
21466: PPUSH
21467: LD_INT 121
21469: PPUSH
21470: LD_INT 100
21472: PPUSH
21473: CALL 7180 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21477: LD_INT 3
21479: PPUSH
21480: LD_INT 22
21482: PPUSH
21483: LD_EXP 49
21487: PPUSH
21488: LD_EXP 50
21492: PPUSH
21493: CALL 7383 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21497: LD_INT 3
21499: PPUSH
21500: LD_INT 10
21502: PPUSH
21503: CALL 9462 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21507: LD_INT 3
21509: PPUSH
21510: LD_INT 1
21512: PPUSH
21513: CALL 9875 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21517: LD_INT 2
21519: PPUSH
21520: CALL_OW 303
21524: PUSH
21525: LD_INT 2
21527: PPUSH
21528: CALL_OW 255
21532: PUSH
21533: LD_INT 1
21535: EQUAL
21536: OR
21537: IFFALSE 21549
// DefendDepot ( 3 , rudepo ) ;
21539: LD_INT 3
21541: PPUSH
21542: LD_INT 2
21544: PPUSH
21545: CALL 9155 0 2
// end ;
21549: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21550: LD_INT 22
21552: PUSH
21553: LD_INT 3
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 21
21562: PUSH
21563: LD_INT 2
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 55
21572: PUSH
21573: EMPTY
21574: LIST
21575: PUSH
21576: LD_INT 3
21578: PUSH
21579: LD_INT 34
21581: PUSH
21582: LD_INT 51
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: PPUSH
21599: CALL_OW 69
21603: PUSH
21604: LD_INT 0
21606: EQUAL
21607: PUSH
21608: LD_INT 21
21610: PPUSH
21611: CALL_OW 255
21615: PUSH
21616: LD_INT 3
21618: EQUAL
21619: AND
21620: PUSH
21621: LD_INT 21
21623: PPUSH
21624: CALL_OW 302
21628: AND
21629: PUSH
21630: LD_INT 2
21632: PPUSH
21633: CALL_OW 255
21637: PUSH
21638: LD_INT 3
21640: EQUAL
21641: AND
21642: PUSH
21643: LD_INT 2
21645: PPUSH
21646: CALL_OW 302
21650: AND
21651: IFFALSE 21831
21653: GO 21655
21655: DISABLE
// begin enable ;
21656: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21657: LD_INT 2
21659: PPUSH
21660: CALL_OW 274
21664: PPUSH
21665: LD_INT 1
21667: PPUSH
21668: LD_INT 1000
21670: PPUSH
21671: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21675: LD_INT 3
21677: PPUSH
21678: LD_INT 21
21680: PPUSH
21681: LD_INT 4
21683: PUSH
21684: LD_INT 5
21686: PUSH
21687: LD_INT 6
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: PUSH
21695: LD_OWVAR 67
21699: ARRAY
21700: PPUSH
21701: LD_INT 43
21703: PUSH
21704: LD_INT 43
21706: PUSH
21707: LD_INT 44
21709: PUSH
21710: LD_INT 44
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 43
21721: PUSH
21722: LD_INT 43
21724: PUSH
21725: LD_INT 43
21727: PUSH
21728: LD_INT 44
21730: PUSH
21731: LD_INT 44
21733: PUSH
21734: LD_INT 46
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 43
21747: PUSH
21748: LD_INT 43
21750: PUSH
21751: LD_INT 43
21753: PUSH
21754: LD_INT 44
21756: PUSH
21757: LD_INT 44
21759: PUSH
21760: LD_INT 46
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: LIST
21775: PUSH
21776: LD_OWVAR 67
21780: ARRAY
21781: PPUSH
21782: LD_INT 1
21784: PPUSH
21785: LD_INT 1
21787: PPUSH
21788: LD_INT 22
21790: PUSH
21791: LD_INT 22
21793: PUSH
21794: LD_INT 24
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 1
21803: PPUSH
21804: LD_INT 2
21806: PPUSH
21807: CALL_OW 12
21811: ARRAY
21812: PUSH
21813: LD_INT 24
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: LIST
21820: PUSH
21821: LD_OWVAR 67
21825: ARRAY
21826: PPUSH
21827: CALL 7026 0 7
// end ;
21831: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21832: LD_INT 17
21834: PPUSH
21835: CALL_OW 255
21839: PUSH
21840: LD_INT 3
21842: EQUAL
21843: PUSH
21844: LD_INT 17
21846: PPUSH
21847: CALL_OW 302
21851: AND
21852: PUSH
21853: LD_INT 2
21855: PPUSH
21856: CALL_OW 255
21860: PUSH
21861: LD_INT 3
21863: EQUAL
21864: AND
21865: PUSH
21866: LD_INT 2
21868: PPUSH
21869: CALL_OW 302
21873: AND
21874: IFFALSE 21941
21876: GO 21878
21878: DISABLE
// begin enable ;
21879: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21880: LD_INT 17
21882: PPUSH
21883: LD_INT 22
21885: PPUSH
21886: LD_INT 1
21888: PPUSH
21889: LD_INT 1
21891: PPUSH
21892: LD_INT 42
21894: PUSH
21895: LD_INT 43
21897: PUSH
21898: LD_INT 44
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 1
21908: PPUSH
21909: LD_INT 3
21911: PPUSH
21912: CALL_OW 12
21916: ARRAY
21917: PPUSH
21918: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21922: LD_INT 17
21924: PPUSH
21925: LD_INT 22
21927: PPUSH
21928: LD_INT 1
21930: PPUSH
21931: LD_INT 1
21933: PPUSH
21934: LD_INT 51
21936: PPUSH
21937: CALL_OW 185
// end ;
21941: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21942: LD_INT 17
21944: PPUSH
21945: CALL_OW 302
21949: PUSH
21950: LD_INT 17
21952: PPUSH
21953: CALL_OW 255
21957: PUSH
21958: LD_INT 3
21960: EQUAL
21961: AND
21962: PUSH
21963: LD_INT 2
21965: PPUSH
21966: CALL_OW 302
21970: AND
21971: PUSH
21972: LD_INT 2
21974: PPUSH
21975: CALL_OW 255
21979: PUSH
21980: LD_INT 3
21982: EQUAL
21983: AND
21984: PUSH
21985: LD_INT 17
21987: PPUSH
21988: CALL_OW 313
21992: NOT
21993: AND
21994: IFFALSE 22088
21996: GO 21998
21998: DISABLE
21999: LD_INT 0
22001: PPUSH
// begin for i = 1 to 6 do
22002: LD_ADDR_VAR 0 1
22006: PUSH
22007: DOUBLE
22008: LD_INT 1
22010: DEC
22011: ST_TO_ADDR
22012: LD_INT 6
22014: PUSH
22015: FOR_TO
22016: IFFALSE 22086
// begin uc_side = 3 ;
22018: LD_ADDR_OWVAR 20
22022: PUSH
22023: LD_INT 3
22025: ST_TO_ADDR
// uc_nation = 3 ;
22026: LD_ADDR_OWVAR 21
22030: PUSH
22031: LD_INT 3
22033: ST_TO_ADDR
// hc_gallery :=  ;
22034: LD_ADDR_OWVAR 33
22038: PUSH
22039: LD_STRING 
22041: ST_TO_ADDR
// hc_name :=  ;
22042: LD_ADDR_OWVAR 26
22046: PUSH
22047: LD_STRING 
22049: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
22050: LD_INT 0
22052: PPUSH
22053: LD_EXP 34
22057: PPUSH
22058: LD_EXP 35
22062: PPUSH
22063: CALL_OW 12
22067: PPUSH
22068: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
22072: CALL_OW 44
22076: PPUSH
22077: LD_INT 17
22079: PPUSH
22080: CALL_OW 52
// end ;
22084: GO 22015
22086: POP
22087: POP
// end ;
22088: PPOPN 1
22090: END
// every 2 2$0 do var i , j ;
22091: GO 22093
22093: DISABLE
22094: LD_INT 0
22096: PPUSH
22097: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
22098: LD_INT 14700
22100: PUSH
22101: LD_INT 33600
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: PPUSH
22111: LD_INT 2
22113: PPUSH
22114: CALL_OW 12
22118: ARRAY
22119: PPUSH
22120: CALL_OW 67
// disableHealAI = 1 ;
22124: LD_ADDR_EXP 33
22128: PUSH
22129: LD_INT 1
22131: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22132: LD_ADDR_VAR 0 1
22136: PUSH
22137: LD_INT 22
22139: PUSH
22140: LD_INT 3
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 25
22149: PUSH
22150: LD_INT 4
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PPUSH
22161: CALL_OW 69
22165: PUSH
22166: FOR_IN
22167: IFFALSE 22180
// ComExitBuilding ( i ) ;
22169: LD_VAR 0 1
22173: PPUSH
22174: CALL_OW 122
22178: GO 22166
22180: POP
22181: POP
// wait ( 0 0$1 ) ;
22182: LD_INT 35
22184: PPUSH
22185: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22189: LD_INT 35
22191: PPUSH
22192: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22196: LD_ADDR_VAR 0 1
22200: PUSH
22201: LD_INT 22
22203: PUSH
22204: LD_INT 3
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 25
22213: PUSH
22214: LD_INT 4
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PPUSH
22225: CALL_OW 69
22229: PUSH
22230: FOR_IN
22231: IFFALSE 22308
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
22233: LD_ADDR_VAR 0 2
22237: PUSH
22238: LD_INT 17
22240: PPUSH
22241: LD_INT 22
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 25
22253: PUSH
22254: LD_INT 12
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PPUSH
22265: CALL_OW 70
22269: PUSH
22270: FOR_IN
22271: IFFALSE 22304
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22273: LD_VAR 0 1
22277: PPUSH
22278: LD_VAR 0 2
22282: PPUSH
22283: CALL_OW 250
22287: PPUSH
22288: LD_VAR 0 2
22292: PPUSH
22293: CALL_OW 251
22297: PPUSH
22298: CALL_OW 191
// end ;
22302: GO 22270
22304: POP
22305: POP
// end ;
22306: GO 22230
22308: POP
22309: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22310: LD_INT 22
22312: PUSH
22313: LD_INT 3
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 25
22322: PUSH
22323: LD_INT 4
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PPUSH
22334: CALL_OW 69
22338: PUSH
22339: LD_INT 0
22341: EQUAL
22342: PUSH
22343: LD_EXP 32
22347: PUSH
22348: LD_INT 6
22350: PUSH
22351: LD_INT 7
22353: PUSH
22354: LD_INT 8
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: LIST
22361: PUSH
22362: LD_OWVAR 67
22366: ARRAY
22367: GREATEREQUAL
22368: OR
22369: PUSH
22370: LD_INT 17
22372: PPUSH
22373: LD_INT 22
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 25
22385: PUSH
22386: LD_INT 12
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PPUSH
22397: CALL_OW 70
22401: PUSH
22402: LD_INT 0
22404: EQUAL
22405: OR
22406: IFFALSE 22189
// disableHealAI = 0 ;
22408: LD_ADDR_EXP 33
22412: PUSH
22413: LD_INT 0
22415: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22416: LD_ADDR_VAR 0 1
22420: PUSH
22421: LD_INT 22
22423: PUSH
22424: LD_INT 3
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 25
22433: PUSH
22434: LD_INT 12
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PPUSH
22445: CALL_OW 69
22449: PUSH
22450: FOR_IN
22451: IFFALSE 22467
// SetClass ( i , 16 ) ;
22453: LD_VAR 0 1
22457: PPUSH
22458: LD_INT 16
22460: PPUSH
22461: CALL_OW 336
22465: GO 22450
22467: POP
22468: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22469: LD_ADDR_VAR 0 1
22473: PUSH
22474: LD_INT 22
22476: PUSH
22477: LD_INT 3
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 25
22486: PUSH
22487: LD_INT 4
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PPUSH
22498: CALL_OW 69
22502: PUSH
22503: FOR_IN
22504: IFFALSE 22523
// ComMoveXY ( i , 113 , 94 ) ;
22506: LD_VAR 0 1
22510: PPUSH
22511: LD_INT 113
22513: PPUSH
22514: LD_INT 94
22516: PPUSH
22517: CALL_OW 111
22521: GO 22503
22523: POP
22524: POP
// end ;
22525: PPOPN 2
22527: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22528: LD_INT 21
22530: PPUSH
22531: CALL_OW 255
22535: PUSH
22536: LD_INT 3
22538: EQUAL
22539: PUSH
22540: LD_INT 21
22542: PPUSH
22543: CALL_OW 302
22547: AND
22548: PUSH
22549: LD_INT 22
22551: PUSH
22552: LD_INT 3
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 34
22561: PUSH
22562: LD_INT 51
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PPUSH
22573: CALL_OW 69
22577: PUSH
22578: LD_INT 0
22580: EQUAL
22581: AND
22582: IFFALSE 22614
22584: GO 22586
22586: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22587: LD_INT 21
22589: PPUSH
22590: LD_INT 23
22592: PPUSH
22593: LD_INT 1
22595: PPUSH
22596: LD_INT 1
22598: PPUSH
22599: LD_INT 51
22601: PPUSH
22602: CALL_OW 185
// wait ( 5 5$0 ) ;
22606: LD_INT 10500
22608: PPUSH
22609: CALL_OW 67
// enable ;
22613: ENABLE
// end ; end_of_file
22614: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22615: LD_EXP 26
22619: PUSH
22620: LD_INT 0
22622: LESSEQUAL
22623: IFFALSE 22772
22625: GO 22627
22627: DISABLE
22628: LD_INT 0
22630: PPUSH
22631: PPUSH
22632: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22633: LD_ADDR_VAR 0 2
22637: PUSH
22638: LD_INT 22
22640: PUSH
22641: LD_INT 1
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 21
22650: PUSH
22651: LD_INT 3
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 2
22660: PUSH
22661: LD_INT 30
22663: PUSH
22664: LD_INT 0
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 30
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: PPUSH
22691: CALL_OW 69
22695: ST_TO_ADDR
// for i in tmp do
22696: LD_ADDR_VAR 0 1
22700: PUSH
22701: LD_VAR 0 2
22705: PUSH
22706: FOR_IN
22707: IFFALSE 22740
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22709: LD_ADDR_VAR 0 3
22713: PUSH
22714: LD_VAR 0 3
22718: PUSH
22719: LD_VAR 0 1
22723: PPUSH
22724: CALL_OW 274
22728: PPUSH
22729: LD_INT 1
22731: PPUSH
22732: CALL_OW 275
22736: PLUS
22737: ST_TO_ADDR
22738: GO 22706
22740: POP
22741: POP
// if yourCrates >= needCrates then
22742: LD_VAR 0 3
22746: PUSH
22747: LD_EXP 25
22751: GREATEREQUAL
22752: IFFALSE 22765
// begin FinishMission ( yourCrates ) ;
22754: LD_VAR 0 3
22758: PPUSH
22759: CALL 22775 0 1
// end else
22763: GO 22772
// begin YouLost ( matmin ) ;
22765: LD_STRING matmin
22767: PPUSH
22768: CALL_OW 104
// end ; end ;
22772: PPOPN 3
22774: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22775: LD_INT 0
22777: PPUSH
22778: PPUSH
22779: PPUSH
22780: PPUSH
// if killCounter = 0 then
22781: LD_EXP 47
22785: PUSH
22786: LD_INT 0
22788: EQUAL
22789: IFFALSE 22798
// SetAchievement ( ACH_SURV ) ;
22791: LD_STRING ACH_SURV
22793: PPUSH
22794: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22798: LD_INT 22
22800: PUSH
22801: LD_INT 3
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 21
22810: PUSH
22811: LD_INT 3
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PPUSH
22822: CALL_OW 69
22826: PUSH
22827: LD_INT 0
22829: EQUAL
22830: IFFALSE 22846
// begin wait ( 3 ) ;
22832: LD_INT 3
22834: PPUSH
22835: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22839: LD_STRING ACH_BASEDESTROYER
22841: PPUSH
22842: CALL_OW 543
// end ; m1 := false ;
22846: LD_ADDR_VAR 0 3
22850: PUSH
22851: LD_INT 0
22853: ST_TO_ADDR
// m2 := false ;
22854: LD_ADDR_VAR 0 4
22858: PUSH
22859: LD_INT 0
22861: ST_TO_ADDR
// m3 := false ;
22862: LD_ADDR_VAR 0 5
22866: PUSH
22867: LD_INT 0
22869: ST_TO_ADDR
// if crates + 100 > crates then
22870: LD_VAR 0 1
22874: PUSH
22875: LD_INT 100
22877: PLUS
22878: PUSH
22879: LD_VAR 0 1
22883: GREATER
22884: IFFALSE 22916
// begin AddMedal ( cans , 1 ) ;
22886: LD_STRING cans
22888: PPUSH
22889: LD_INT 1
22891: PPUSH
22892: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22896: LD_INT 1
22898: PPUSH
22899: LD_STRING 06_crates_1
22901: PPUSH
22902: CALL_OW 39
// m1 := true ;
22906: LD_ADDR_VAR 0 3
22910: PUSH
22911: LD_INT 1
22913: ST_TO_ADDR
// end else
22914: GO 22937
// begin AddMedal ( cans , - 1 ) ;
22916: LD_STRING cans
22918: PPUSH
22919: LD_INT 1
22921: NEG
22922: PPUSH
22923: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22927: LD_INT 0
22929: PPUSH
22930: LD_STRING 06_crates_1
22932: PPUSH
22933: CALL_OW 39
// end ; if unitLost < 3 then
22937: LD_EXP 30
22941: PUSH
22942: LD_INT 3
22944: LESS
22945: IFFALSE 22967
// begin AddMedal ( people , 1 ) ;
22947: LD_STRING people
22949: PPUSH
22950: LD_INT 1
22952: PPUSH
22953: CALL_OW 101
// m2 := true ;
22957: LD_ADDR_VAR 0 4
22961: PUSH
22962: LD_INT 1
22964: ST_TO_ADDR
// end else
22965: GO 22978
// begin AddMedal ( people , - 1 ) ;
22967: LD_STRING people
22969: PPUSH
22970: LD_INT 1
22972: NEG
22973: PPUSH
22974: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22978: LD_EXP 28
22982: PPUSH
22983: LD_STRING 06_remoteVehs_1
22985: PPUSH
22986: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22990: LD_EXP 28
22994: PUSH
22995: LD_INT 1
22997: EQUAL
22998: IFFALSE 23020
// begin AddMedal ( remote , 1 ) ;
23000: LD_STRING remote
23002: PPUSH
23003: LD_INT 1
23005: PPUSH
23006: CALL_OW 101
// m3 := true ;
23010: LD_ADDR_VAR 0 5
23014: PUSH
23015: LD_INT 1
23017: ST_TO_ADDR
// end else
23018: GO 23060
// begin if GetTech ( 18 , 1 ) = state_enabled then
23020: LD_INT 18
23022: PPUSH
23023: LD_INT 1
23025: PPUSH
23026: CALL_OW 321
23030: PUSH
23031: LD_INT 1
23033: EQUAL
23034: IFFALSE 23049
// begin AddMedal ( remote , - 1 ) ;
23036: LD_STRING remote
23038: PPUSH
23039: LD_INT 1
23041: NEG
23042: PPUSH
23043: CALL_OW 101
// end else
23047: GO 23060
// begin AddMedal ( remote , - 2 ) ;
23049: LD_STRING remote
23051: PPUSH
23052: LD_INT 2
23054: NEG
23055: PPUSH
23056: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
23060: LD_VAR 0 3
23064: PUSH
23065: LD_VAR 0 4
23069: AND
23070: PUSH
23071: LD_VAR 0 5
23075: AND
23076: IFFALSE 23092
// begin wait ( 3 ) ;
23078: LD_INT 3
23080: PPUSH
23081: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
23085: LD_STRING ACH_ASPEED_6
23087: PPUSH
23088: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
23092: LD_OWVAR 67
23096: PUSH
23097: LD_INT 3
23099: EQUAL
23100: PUSH
23101: LD_VAR 0 3
23105: AND
23106: PUSH
23107: LD_VAR 0 4
23111: AND
23112: PUSH
23113: LD_VAR 0 5
23117: AND
23118: IFFALSE 23130
// SetAchievementEX ( ACH_AMER , 6 ) ;
23120: LD_STRING ACH_AMER
23122: PPUSH
23123: LD_INT 6
23125: PPUSH
23126: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
23130: LD_EXP 20
23134: PPUSH
23135: LD_STRING 06_KurtStatus_1
23137: PPUSH
23138: CALL_OW 39
// GiveMedals ( Main ) ;
23142: LD_STRING Main
23144: PPUSH
23145: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
23149: LD_INT 22
23151: PUSH
23152: LD_INT 1
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 21
23161: PUSH
23162: LD_INT 1
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 50
23171: PUSH
23172: EMPTY
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: PUSH
23178: LD_INT 25
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 25
23190: PUSH
23191: LD_INT 2
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 25
23200: PUSH
23201: LD_INT 3
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 25
23210: PUSH
23211: LD_INT 4
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: PPUSH
23231: CALL_OW 69
23235: PPUSH
23236: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23240: LD_EXP 1
23244: PPUSH
23245: LD_EXP 43
23249: PUSH
23250: LD_STRING JMM
23252: STR
23253: PPUSH
23254: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23258: LD_EXP 2
23262: PPUSH
23263: LD_EXP 43
23267: PUSH
23268: LD_STRING Lisa
23270: STR
23271: PPUSH
23272: CALL 6284 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23276: LD_EXP 3
23280: PPUSH
23281: LD_EXP 43
23285: PUSH
23286: LD_STRING Bobby
23288: STR
23289: PPUSH
23290: CALL 6284 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23294: LD_EXP 4
23298: PPUSH
23299: LD_EXP 43
23303: PUSH
23304: LD_STRING Cyrus
23306: STR
23307: PPUSH
23308: CALL 6284 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23312: LD_EXP 5
23316: PPUSH
23317: LD_EXP 43
23321: PUSH
23322: LD_STRING Frank
23324: STR
23325: PPUSH
23326: CALL 6284 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23330: LD_EXP 6
23334: PPUSH
23335: LD_EXP 43
23339: PUSH
23340: LD_STRING Brown
23342: STR
23343: PPUSH
23344: CALL 6284 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23348: LD_EXP 7
23352: PPUSH
23353: LD_EXP 43
23357: PUSH
23358: LD_STRING Donaldson
23360: STR
23361: PPUSH
23362: CALL 6284 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23366: LD_EXP 8
23370: PPUSH
23371: LD_EXP 43
23375: PUSH
23376: LD_STRING Gladstone
23378: STR
23379: PPUSH
23380: CALL 6284 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23384: LD_EXP 9
23388: PPUSH
23389: LD_EXP 43
23393: PUSH
23394: LD_STRING Denis
23396: STR
23397: PPUSH
23398: CALL 6284 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23402: LD_EXP 15
23406: PPUSH
23407: LD_EXP 43
23411: PUSH
23412: LD_STRING Joan
23414: STR
23415: PPUSH
23416: CALL 6284 0 2
// if IsLive ( Joan ) then
23420: LD_EXP 15
23424: PPUSH
23425: CALL_OW 300
23429: IFFALSE 23443
// SaveCharacters ( Joan , Joan ) ;
23431: LD_EXP 15
23435: PPUSH
23436: LD_STRING Joan
23438: PPUSH
23439: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23443: LD_EXP 16
23447: PPUSH
23448: LD_STRING 06_JoanStatus_1
23450: PPUSH
23451: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23455: LD_INT 50
23457: PUSH
23458: EMPTY
23459: LIST
23460: PUSH
23461: LD_INT 22
23463: PUSH
23464: LD_INT 1
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 21
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 2
23483: PUSH
23484: LD_INT 25
23486: PUSH
23487: LD_INT 1
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 25
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 25
23506: PUSH
23507: LD_INT 3
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 25
23516: PUSH
23517: LD_INT 4
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: PPUSH
23537: CALL_OW 69
23541: PUSH
23542: LD_EXP 1
23546: PUSH
23547: LD_EXP 2
23551: PUSH
23552: LD_EXP 3
23556: PUSH
23557: LD_EXP 4
23561: PUSH
23562: LD_EXP 5
23566: PUSH
23567: LD_EXP 6
23571: PUSH
23572: LD_EXP 7
23576: PUSH
23577: LD_EXP 8
23581: PUSH
23582: LD_EXP 9
23586: PUSH
23587: LD_EXP 15
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: DIFF
23604: PPUSH
23605: LD_STRING 06_other_survivors
23607: PPUSH
23608: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23612: LD_INT 50
23614: PUSH
23615: EMPTY
23616: LIST
23617: PUSH
23618: LD_INT 22
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 21
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 25
23643: PUSH
23644: LD_INT 12
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 25
23653: PUSH
23654: LD_INT 16
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: PPUSH
23672: CALL_OW 69
23676: PPUSH
23677: LD_STRING 06_other_apemans
23679: PPUSH
23680: CALL_OW 38
// YouWin ;
23684: CALL_OW 103
// end ; end_of_file
23688: LD_VAR 0 2
23692: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23693: LD_EXP 39
23697: PUSH
23698: LD_INT 3
23700: EQUAL
23701: IFFALSE 23816
23703: GO 23705
23705: DISABLE
// begin enable ;
23706: ENABLE
// sendedConvoys = 0 ;
23707: LD_ADDR_EXP 39
23711: PUSH
23712: LD_INT 0
23714: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23715: LD_INT 6
23717: PPUSH
23718: LD_INT 3
23720: PPUSH
23721: LD_INT 5
23723: PPUSH
23724: LD_INT 10
23726: PPUSH
23727: CALL_OW 12
23731: PUSH
23732: LD_INT 5
23734: PPUSH
23735: LD_INT 11
23737: PPUSH
23738: CALL_OW 12
23742: PUSH
23743: LD_INT 8
23745: PPUSH
23746: LD_INT 12
23748: PPUSH
23749: CALL_OW 12
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: LIST
23758: PUSH
23759: LD_OWVAR 67
23763: ARRAY
23764: PPUSH
23765: LD_INT 0
23767: PPUSH
23768: LD_INT 0
23770: PPUSH
23771: LD_INT 0
23773: PPUSH
23774: LD_INT 0
23776: PPUSH
23777: LD_EXP 34
23781: PPUSH
23782: LD_EXP 35
23786: PPUSH
23787: CALL_OW 12
23791: PPUSH
23792: LD_INT 16
23794: PPUSH
23795: LD_INT 15
23797: PPUSH
23798: LD_INT 1
23800: PPUSH
23801: LD_INT 1
23803: PPUSH
23804: LD_INT 2
23806: PPUSH
23807: CALL_OW 12
23811: PPUSH
23812: CALL 10703 0 12
// end ; end_of_file
23816: END
// export function PrepareNature ; var i , un ; begin
23817: LD_INT 0
23819: PPUSH
23820: PPUSH
23821: PPUSH
// for i = 1 to Difficulty + 2 do
23822: LD_ADDR_VAR 0 2
23826: PUSH
23827: DOUBLE
23828: LD_INT 1
23830: DEC
23831: ST_TO_ADDR
23832: LD_OWVAR 67
23836: PUSH
23837: LD_INT 2
23839: PLUS
23840: PUSH
23841: FOR_TO
23842: IFFALSE 23951
// begin hc_sex = sex_male ;
23844: LD_ADDR_OWVAR 27
23848: PUSH
23849: LD_INT 1
23851: ST_TO_ADDR
// uc_side = 0 ;
23852: LD_ADDR_OWVAR 20
23856: PUSH
23857: LD_INT 0
23859: ST_TO_ADDR
// uc_nation = nation_nature ;
23860: LD_ADDR_OWVAR 21
23864: PUSH
23865: LD_INT 0
23867: ST_TO_ADDR
// hc_class = class_tiger ;
23868: LD_ADDR_OWVAR 28
23872: PUSH
23873: LD_INT 14
23875: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23876: LD_ADDR_OWVAR 31
23880: PUSH
23881: LD_EXP 35
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 0
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23901: LD_ADDR_OWVAR 35
23905: PUSH
23906: LD_INT 5
23908: NEG
23909: PPUSH
23910: LD_INT 5
23912: PPUSH
23913: CALL_OW 12
23917: PUSH
23918: LD_OWVAR 67
23922: MUL
23923: ST_TO_ADDR
// un = CreateHuman ;
23924: LD_ADDR_VAR 0 3
23928: PUSH
23929: CALL_OW 44
23933: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23934: LD_VAR 0 3
23938: PPUSH
23939: LD_INT 18
23941: PPUSH
23942: LD_INT 0
23944: PPUSH
23945: CALL_OW 49
// end ;
23949: GO 23841
23951: POP
23952: POP
// for i = 1 to rand ( 3 , 4 ) do
23953: LD_ADDR_VAR 0 2
23957: PUSH
23958: DOUBLE
23959: LD_INT 1
23961: DEC
23962: ST_TO_ADDR
23963: LD_INT 3
23965: PPUSH
23966: LD_INT 4
23968: PPUSH
23969: CALL_OW 12
23973: PUSH
23974: FOR_TO
23975: IFFALSE 24069
// begin hc_sex = sex_male ;
23977: LD_ADDR_OWVAR 27
23981: PUSH
23982: LD_INT 1
23984: ST_TO_ADDR
// uc_side = 0 ;
23985: LD_ADDR_OWVAR 20
23989: PUSH
23990: LD_INT 0
23992: ST_TO_ADDR
// uc_nation = nation_nature ;
23993: LD_ADDR_OWVAR 21
23997: PUSH
23998: LD_INT 0
24000: ST_TO_ADDR
// hc_class = 18 ;
24001: LD_ADDR_OWVAR 28
24005: PUSH
24006: LD_INT 18
24008: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24009: LD_ADDR_OWVAR 31
24013: PUSH
24014: LD_EXP 35
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: LD_INT 0
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: ST_TO_ADDR
// hc_agressivity = 0 ;
24034: LD_ADDR_OWVAR 35
24038: PUSH
24039: LD_INT 0
24041: ST_TO_ADDR
// un = CreateHuman ;
24042: LD_ADDR_VAR 0 3
24046: PUSH
24047: CALL_OW 44
24051: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
24052: LD_VAR 0 3
24056: PPUSH
24057: LD_INT 18
24059: PPUSH
24060: LD_INT 0
24062: PPUSH
24063: CALL_OW 49
// end ;
24067: GO 23974
24069: POP
24070: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
24071: LD_ADDR_VAR 0 2
24075: PUSH
24076: DOUBLE
24077: LD_INT 1
24079: DEC
24080: ST_TO_ADDR
24081: LD_INT 1
24083: PPUSH
24084: LD_INT 3
24086: PPUSH
24087: CALL_OW 12
24091: PUSH
24092: LD_OWVAR 67
24096: PLUS
24097: PUSH
24098: FOR_TO
24099: IFFALSE 24248
// begin hc_sex = sex_male ;
24101: LD_ADDR_OWVAR 27
24105: PUSH
24106: LD_INT 1
24108: ST_TO_ADDR
// uc_side = 0 ;
24109: LD_ADDR_OWVAR 20
24113: PUSH
24114: LD_INT 0
24116: ST_TO_ADDR
// uc_nation = nation_nature ;
24117: LD_ADDR_OWVAR 21
24121: PUSH
24122: LD_INT 0
24124: ST_TO_ADDR
// hc_class = class_apeman ;
24125: LD_ADDR_OWVAR 28
24129: PUSH
24130: LD_INT 12
24132: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24133: LD_ADDR_OWVAR 31
24137: PUSH
24138: LD_INT 2
24140: PPUSH
24141: LD_INT 5
24143: PPUSH
24144: CALL_OW 12
24148: PUSH
24149: LD_INT 0
24151: PPUSH
24152: LD_INT 2
24154: PPUSH
24155: CALL_OW 12
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
24172: LD_ADDR_OWVAR 35
24176: PUSH
24177: LD_INT 20
24179: PPUSH
24180: LD_INT 30
24182: PPUSH
24183: CALL_OW 12
24187: PUSH
24188: LD_INT 30
24190: PPUSH
24191: LD_INT 40
24193: PPUSH
24194: CALL_OW 12
24198: PUSH
24199: LD_INT 40
24201: PPUSH
24202: LD_INT 50
24204: PPUSH
24205: CALL_OW 12
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: LIST
24214: PUSH
24215: LD_OWVAR 67
24219: ARRAY
24220: ST_TO_ADDR
// un = CreateHuman ;
24221: LD_ADDR_VAR 0 3
24225: PUSH
24226: CALL_OW 44
24230: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
24231: LD_VAR 0 3
24235: PPUSH
24236: LD_INT 19
24238: PPUSH
24239: LD_INT 0
24241: PPUSH
24242: CALL_OW 49
// end ;
24246: GO 24098
24248: POP
24249: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
24250: LD_ADDR_VAR 0 2
24254: PUSH
24255: DOUBLE
24256: LD_INT 1
24258: DEC
24259: ST_TO_ADDR
24260: LD_INT 5
24262: PPUSH
24263: LD_INT 6
24265: PPUSH
24266: CALL_OW 12
24270: PUSH
24271: LD_OWVAR 67
24275: PLUS
24276: PUSH
24277: FOR_TO
24278: IFFALSE 24386
// begin hc_sex = sex_male ;
24280: LD_ADDR_OWVAR 27
24284: PUSH
24285: LD_INT 1
24287: ST_TO_ADDR
// uc_side = 0 ;
24288: LD_ADDR_OWVAR 20
24292: PUSH
24293: LD_INT 0
24295: ST_TO_ADDR
// uc_nation = nation_nature ;
24296: LD_ADDR_OWVAR 21
24300: PUSH
24301: LD_INT 0
24303: ST_TO_ADDR
// hc_class = class_apeman ;
24304: LD_ADDR_OWVAR 28
24308: PUSH
24309: LD_INT 12
24311: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24312: LD_ADDR_OWVAR 31
24316: PUSH
24317: LD_INT 2
24319: PPUSH
24320: LD_INT 5
24322: PPUSH
24323: CALL_OW 12
24327: PUSH
24328: LD_INT 0
24330: PPUSH
24331: LD_INT 2
24333: PPUSH
24334: CALL_OW 12
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: ST_TO_ADDR
// hc_agressivity = 0 ;
24351: LD_ADDR_OWVAR 35
24355: PUSH
24356: LD_INT 0
24358: ST_TO_ADDR
// un = CreateHuman ;
24359: LD_ADDR_VAR 0 3
24363: PUSH
24364: CALL_OW 44
24368: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24369: LD_VAR 0 3
24373: PPUSH
24374: LD_INT 20
24376: PPUSH
24377: LD_INT 0
24379: PPUSH
24380: CALL_OW 49
// end ;
24384: GO 24277
24386: POP
24387: POP
// end ; end_of_file end_of_file
24388: LD_VAR 0 1
24392: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
24393: GO 24395
24395: DISABLE
// begin ru_radar := 98 ;
24396: LD_ADDR_EXP 51
24400: PUSH
24401: LD_INT 98
24403: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24404: LD_ADDR_EXP 52
24408: PUSH
24409: LD_INT 89
24411: ST_TO_ADDR
// us_hack := 99 ;
24412: LD_ADDR_EXP 53
24416: PUSH
24417: LD_INT 99
24419: ST_TO_ADDR
// us_artillery := 97 ;
24420: LD_ADDR_EXP 54
24424: PUSH
24425: LD_INT 97
24427: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24428: LD_ADDR_EXP 55
24432: PUSH
24433: LD_INT 91
24435: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
24436: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
24437: LD_INT 0
24439: PPUSH
24440: PPUSH
24441: PPUSH
24442: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24443: LD_VAR 0 1
24447: PPUSH
24448: CALL_OW 264
24452: PUSH
24453: LD_EXP 55
24457: EQUAL
24458: IFFALSE 24530
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24460: LD_INT 68
24462: PPUSH
24463: LD_VAR 0 1
24467: PPUSH
24468: CALL_OW 255
24472: PPUSH
24473: CALL_OW 321
24477: PUSH
24478: LD_INT 2
24480: EQUAL
24481: IFFALSE 24493
// eff := 70 else
24483: LD_ADDR_VAR 0 6
24487: PUSH
24488: LD_INT 70
24490: ST_TO_ADDR
24491: GO 24501
// eff := 30 ;
24493: LD_ADDR_VAR 0 6
24497: PUSH
24498: LD_INT 30
24500: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24501: LD_VAR 0 1
24505: PPUSH
24506: CALL_OW 250
24510: PPUSH
24511: LD_VAR 0 1
24515: PPUSH
24516: CALL_OW 251
24520: PPUSH
24521: LD_VAR 0 6
24525: PPUSH
24526: CALL_OW 495
// end ; end ;
24530: LD_VAR 0 4
24534: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
24535: LD_INT 0
24537: PPUSH
24538: PPUSH
24539: PPUSH
24540: PPUSH
24541: PPUSH
24542: PPUSH
// if cmd = 124 then
24543: LD_VAR 0 1
24547: PUSH
24548: LD_INT 124
24550: EQUAL
24551: IFFALSE 24757
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
24553: LD_ADDR_VAR 0 5
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 34
24563: PUSH
24564: LD_INT 53
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 34
24573: PUSH
24574: LD_INT 14
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: LIST
24585: PPUSH
24586: CALL_OW 69
24590: ST_TO_ADDR
// if not tmp then
24591: LD_VAR 0 5
24595: NOT
24596: IFFALSE 24600
// exit ;
24598: GO 24757
// for i in tmp do
24600: LD_ADDR_VAR 0 3
24604: PUSH
24605: LD_VAR 0 5
24609: PUSH
24610: FOR_IN
24611: IFFALSE 24755
// begin taskList := GetTaskList ( i ) ;
24613: LD_ADDR_VAR 0 6
24617: PUSH
24618: LD_VAR 0 3
24622: PPUSH
24623: CALL_OW 437
24627: ST_TO_ADDR
// if not taskList then
24628: LD_VAR 0 6
24632: NOT
24633: IFFALSE 24637
// continue ;
24635: GO 24610
// for j = 1 to taskList do
24637: LD_ADDR_VAR 0 4
24641: PUSH
24642: DOUBLE
24643: LD_INT 1
24645: DEC
24646: ST_TO_ADDR
24647: LD_VAR 0 6
24651: PUSH
24652: FOR_TO
24653: IFFALSE 24751
// if taskList [ j ] [ 1 ] = | then
24655: LD_VAR 0 6
24659: PUSH
24660: LD_VAR 0 4
24664: ARRAY
24665: PUSH
24666: LD_INT 1
24668: ARRAY
24669: PUSH
24670: LD_STRING |
24672: EQUAL
24673: IFFALSE 24749
// begin _taskList := Delete ( taskList , 1 ) ;
24675: LD_ADDR_VAR 0 7
24679: PUSH
24680: LD_VAR 0 6
24684: PPUSH
24685: LD_INT 1
24687: PPUSH
24688: CALL_OW 3
24692: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
24693: LD_VAR 0 3
24697: PPUSH
24698: LD_VAR 0 7
24702: PPUSH
24703: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
24707: LD_VAR 0 3
24711: PPUSH
24712: LD_VAR 0 6
24716: PUSH
24717: LD_VAR 0 4
24721: ARRAY
24722: PUSH
24723: LD_INT 2
24725: ARRAY
24726: PPUSH
24727: LD_VAR 0 6
24731: PUSH
24732: LD_VAR 0 4
24736: ARRAY
24737: PUSH
24738: LD_INT 3
24740: ARRAY
24741: PPUSH
24742: LD_INT 8
24744: PPUSH
24745: CALL 24762 0 4
// end ;
24749: GO 24652
24751: POP
24752: POP
// end ;
24753: GO 24610
24755: POP
24756: POP
// end ; end ;
24757: LD_VAR 0 2
24761: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24762: LD_INT 0
24764: PPUSH
24765: PPUSH
24766: PPUSH
24767: PPUSH
24768: PPUSH
24769: PPUSH
24770: PPUSH
24771: PPUSH
24772: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24773: LD_VAR 0 1
24777: NOT
24778: PUSH
24779: LD_VAR 0 2
24783: PPUSH
24784: LD_VAR 0 3
24788: PPUSH
24789: CALL_OW 488
24793: NOT
24794: OR
24795: PUSH
24796: LD_VAR 0 4
24800: NOT
24801: OR
24802: IFFALSE 24806
// exit ;
24804: GO 25146
// list := [ ] ;
24806: LD_ADDR_VAR 0 13
24810: PUSH
24811: EMPTY
24812: ST_TO_ADDR
// if x - r < 0 then
24813: LD_VAR 0 2
24817: PUSH
24818: LD_VAR 0 4
24822: MINUS
24823: PUSH
24824: LD_INT 0
24826: LESS
24827: IFFALSE 24839
// min_x := 0 else
24829: LD_ADDR_VAR 0 7
24833: PUSH
24834: LD_INT 0
24836: ST_TO_ADDR
24837: GO 24855
// min_x := x - r ;
24839: LD_ADDR_VAR 0 7
24843: PUSH
24844: LD_VAR 0 2
24848: PUSH
24849: LD_VAR 0 4
24853: MINUS
24854: ST_TO_ADDR
// if y - r < 0 then
24855: LD_VAR 0 3
24859: PUSH
24860: LD_VAR 0 4
24864: MINUS
24865: PUSH
24866: LD_INT 0
24868: LESS
24869: IFFALSE 24881
// min_y := 0 else
24871: LD_ADDR_VAR 0 8
24875: PUSH
24876: LD_INT 0
24878: ST_TO_ADDR
24879: GO 24897
// min_y := y - r ;
24881: LD_ADDR_VAR 0 8
24885: PUSH
24886: LD_VAR 0 3
24890: PUSH
24891: LD_VAR 0 4
24895: MINUS
24896: ST_TO_ADDR
// max_x := x + r ;
24897: LD_ADDR_VAR 0 9
24901: PUSH
24902: LD_VAR 0 2
24906: PUSH
24907: LD_VAR 0 4
24911: PLUS
24912: ST_TO_ADDR
// max_y := y + r ;
24913: LD_ADDR_VAR 0 10
24917: PUSH
24918: LD_VAR 0 3
24922: PUSH
24923: LD_VAR 0 4
24927: PLUS
24928: ST_TO_ADDR
// for _x = min_x to max_x do
24929: LD_ADDR_VAR 0 11
24933: PUSH
24934: DOUBLE
24935: LD_VAR 0 7
24939: DEC
24940: ST_TO_ADDR
24941: LD_VAR 0 9
24945: PUSH
24946: FOR_TO
24947: IFFALSE 25064
// for _y = min_y to max_y do
24949: LD_ADDR_VAR 0 12
24953: PUSH
24954: DOUBLE
24955: LD_VAR 0 8
24959: DEC
24960: ST_TO_ADDR
24961: LD_VAR 0 10
24965: PUSH
24966: FOR_TO
24967: IFFALSE 25060
// begin if not ValidHex ( _x , _y ) then
24969: LD_VAR 0 11
24973: PPUSH
24974: LD_VAR 0 12
24978: PPUSH
24979: CALL_OW 488
24983: NOT
24984: IFFALSE 24988
// continue ;
24986: GO 24966
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24988: LD_VAR 0 11
24992: PPUSH
24993: LD_VAR 0 12
24997: PPUSH
24998: CALL_OW 351
25002: PUSH
25003: LD_VAR 0 11
25007: PPUSH
25008: LD_VAR 0 12
25012: PPUSH
25013: CALL_OW 554
25017: AND
25018: IFFALSE 25058
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25020: LD_ADDR_VAR 0 13
25024: PUSH
25025: LD_VAR 0 13
25029: PPUSH
25030: LD_VAR 0 13
25034: PUSH
25035: LD_INT 1
25037: PLUS
25038: PPUSH
25039: LD_VAR 0 11
25043: PUSH
25044: LD_VAR 0 12
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PPUSH
25053: CALL_OW 2
25057: ST_TO_ADDR
// end ;
25058: GO 24966
25060: POP
25061: POP
25062: GO 24946
25064: POP
25065: POP
// if not list then
25066: LD_VAR 0 13
25070: NOT
25071: IFFALSE 25075
// exit ;
25073: GO 25146
// for i in list do
25075: LD_ADDR_VAR 0 6
25079: PUSH
25080: LD_VAR 0 13
25084: PUSH
25085: FOR_IN
25086: IFFALSE 25144
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25088: LD_VAR 0 1
25092: PPUSH
25093: LD_STRING M
25095: PUSH
25096: LD_VAR 0 6
25100: PUSH
25101: LD_INT 1
25103: ARRAY
25104: PUSH
25105: LD_VAR 0 6
25109: PUSH
25110: LD_INT 2
25112: ARRAY
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: PUSH
25135: EMPTY
25136: LIST
25137: PPUSH
25138: CALL_OW 447
25142: GO 25085
25144: POP
25145: POP
// end ;
25146: LD_VAR 0 5
25150: RET
