// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
  15: LD_INT 2
  17: PPUSH
  18: LD_STRING sverdlov
  20: PPUSH
  21: CALL_OW 500
// debugMode = 0 ;
  25: LD_ADDR_EXP 42
  29: PUSH
  30: LD_INT 0
  32: ST_TO_ADDR
// mission_prefix := 06c_ ;
  33: LD_ADDR_EXP 43
  37: PUSH
  38: LD_STRING 06c_
  40: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  41: LD_ADDR_EXP 44
  45: PUSH
  46: LD_STRING 06_
  48: ST_TO_ADDR
// contactWithRussian = 0 ;
  49: LD_ADDR_EXP 22
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// firstTower = 0 ;
  57: LD_ADDR_EXP 23
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// resources = [ ] ;
  65: LD_ADDR_EXP 40
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// firstCrateSpawn := false ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// blockSpawn = 0 ;
  80: LD_ADDR_EXP 29
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// KurtStatus = 0 ;
  88: LD_ADDR_EXP 20
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// readyToEscape = 0 ;
  96: LD_ADDR_EXP 21
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// JoanStatus = 0 ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// killCounter := 0 ;
 112: LD_ADDR_EXP 47
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// cratesStatus = 2 ;
 120: LD_ADDR_EXP 38
 124: PUSH
 125: LD_INT 2
 127: ST_TO_ADDR
// timerStatus = 1 ;
 128: LD_ADDR_EXP 24
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 25
 140: PUSH
 141: LD_INT 350
 143: PUSH
 144: LD_INT 500
 146: PUSH
 147: LD_INT 700
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 161: LD_ADDR_EXP 26
 165: PUSH
 166: LD_INT 105000
 168: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 169: LD_ADDR_EXP 28
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 ] [ Difficulty ] ;
 177: LD_ADDR_EXP 48
 181: PUSH
 182: LD_INT 3
 184: PUSH
 185: LD_INT 4
 187: PUSH
 188: LD_INT 6
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: LIST
 195: PUSH
 196: LD_OWVAR 67
 200: ARRAY
 201: ST_TO_ADDR
// sendedConvoys = 0 ;
 202: LD_ADDR_EXP 39
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// tamedApemans = 0 ;
 210: LD_ADDR_EXP 32
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ignoreTarget := [ ] ;
 218: LD_ADDR_EXP 45
 222: PUSH
 223: EMPTY
 224: ST_TO_ADDR
// arrivals := [ ] ;
 225: LD_ADDR_EXP 46
 229: PUSH
 230: EMPTY
 231: ST_TO_ADDR
// unitLost = 0 ;
 232: LD_ADDR_EXP 30
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 240: LD_ADDR_EXP 31
 244: PUSH
 245: EMPTY
 246: ST_TO_ADDR
// russianTanks = [ ] ;
 247: LD_ADDR_EXP 36
 251: PUSH
 252: EMPTY
 253: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 254: LD_ADDR_EXP 37
 258: PUSH
 259: EMPTY
 260: ST_TO_ADDR
// disableHealAI = 0 ;
 261: LD_ADDR_EXP 33
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// strings = [ ] ;
 269: LD_ADDR_EXP 27
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_INT 1
 281: PPUSH
 282: CALL_OW 343
// PrepareDifficulty ;
 286: CALL 6385 0 0
// PrepareNature ;
 290: CALL 23566 0 0
// PrepareRussian ;
 294: CALL 5570 0 0
// PrepareVehicles ;
 298: CALL 1590 0 0
// PrepareHeroes ;
 302: CALL 598 0 0
// PrepareOthers ;
 306: CALL 2011 0 0
// PreparePlayerApemans ;
 310: CALL 2153 0 0
// end ;
 314: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 315: LD_EXP 42
 319: PUSH
 320: LD_INT 1
 322: EQUAL
 323: IFFALSE 550
 325: GO 327
 327: DISABLE
 328: LD_INT 0
 330: PPUSH
// begin enable ;
 331: ENABLE
// fogoff ( true ) ;
 332: LD_INT 1
 334: PPUSH
 335: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 339: LD_ADDR_VAR 0 1
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 1
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: PUSH
 373: FOR_IN
 374: IFFALSE 390
// SetLives ( i , 1000 ) ;
 376: LD_VAR 0 1
 380: PPUSH
 381: LD_INT 1000
 383: PPUSH
 384: CALL_OW 234
 388: GO 373
 390: POP
 391: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 392: LD_ADDR_VAR 0 1
 396: PUSH
 397: LD_INT 22
 399: PUSH
 400: LD_INT 1
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 0
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: PPUSH
 421: CALL_OW 69
 425: PUSH
 426: FOR_IN
 427: IFFALSE 451
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 429: LD_VAR 0 1
 433: PPUSH
 434: CALL_OW 274
 438: PPUSH
 439: LD_INT 1
 441: PPUSH
 442: LD_INT 9999
 444: PPUSH
 445: CALL_OW 277
 449: GO 426
 451: POP
 452: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 453: LD_ADDR_VAR 0 1
 457: PUSH
 458: LD_INT 22
 460: PUSH
 461: LD_INT 1
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: PUSH
 468: LD_INT 30
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PPUSH
 482: CALL_OW 69
 486: PUSH
 487: FOR_IN
 488: IFFALSE 512
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 490: LD_VAR 0 1
 494: PPUSH
 495: CALL_OW 274
 499: PPUSH
 500: LD_INT 2
 502: PPUSH
 503: LD_INT 9999
 505: PPUSH
 506: CALL_OW 277
 510: GO 487
 512: POP
 513: POP
// if IsSelected ( rudepo ) then
 514: LD_INT 2
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 3 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 3
 530: ST_TO_ADDR
// if IsSelected ( JMM ) then
 531: LD_EXP 1
 535: PPUSH
 536: CALL_OW 306
 540: IFFALSE 550
// your_side = 1 ;
 542: LD_ADDR_OWVAR 2
 546: PUSH
 547: LD_INT 1
 549: ST_TO_ADDR
// end ;
 550: PPOPN 1
 552: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 553: LD_INT 22
 555: PUSH
 556: LD_INT 1
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: PUSH
 563: LD_INT 34
 565: PUSH
 566: LD_INT 12
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PPUSH
 577: CALL_OW 69
 581: PUSH
 582: LD_INT 3
 584: GREATEREQUAL
 585: IFFALSE 597
 587: GO 589
 589: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 590: LD_STRING ACH_FULLCARGO
 592: PPUSH
 593: CALL_OW 543
 597: END
// export function PrepareHeroes ; var veh ; begin
 598: LD_INT 0
 600: PPUSH
 601: PPUSH
// uc_side = 1 ;
 602: LD_ADDR_OWVAR 20
 606: PUSH
 607: LD_INT 1
 609: ST_TO_ADDR
// uc_nation = 1 ;
 610: LD_ADDR_OWVAR 21
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 618: LD_ADDR_EXP 1
 622: PUSH
 623: LD_STRING JMM
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 5947 0 2
 633: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 634: LD_ADDR_EXP 14
 638: PUSH
 639: LD_STRING Harisson
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL 5947 0 2
 649: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 650: LD_ADDR_EXP 10
 654: PUSH
 655: LD_STRING DeltaDoctor
 657: PPUSH
 658: CALL_OW 34
 662: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 663: LD_ADDR_VAR 0 2
 667: PUSH
 668: LD_INT 22
 670: PUSH
 671: LD_INT 1
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: PUSH
 678: LD_INT 21
 680: PUSH
 681: LD_INT 2
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: LD_INT 58
 690: PUSH
 691: EMPTY
 692: LIST
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PPUSH
 699: CALL_OW 69
 703: ST_TO_ADDR
// if veh > 0 then
 704: LD_VAR 0 2
 708: PUSH
 709: LD_INT 0
 711: GREATER
 712: IFFALSE 734
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 714: LD_EXP 1
 718: PPUSH
 719: LD_VAR 0 2
 723: PUSH
 724: LD_INT 1
 726: ARRAY
 727: PPUSH
 728: CALL_OW 52
// end else
 732: GO 749
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 734: LD_EXP 1
 738: PPUSH
 739: LD_INT 2
 741: PPUSH
 742: LD_INT 0
 744: PPUSH
 745: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 749: LD_STRING LisaIn06
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 30
 759: PUSH
 760: LD_INT 1
 762: EQUAL
 763: IFFALSE 867
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 765: LD_ADDR_VAR 0 2
 769: PUSH
 770: LD_INT 22
 772: PUSH
 773: LD_INT 1
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: PUSH
 780: LD_INT 21
 782: PUSH
 783: LD_INT 2
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PUSH
 790: LD_INT 58
 792: PUSH
 793: EMPTY
 794: LIST
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: PPUSH
 801: CALL_OW 69
 805: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 806: LD_ADDR_EXP 2
 810: PUSH
 811: LD_STRING Lisa
 813: PPUSH
 814: LD_INT 1
 816: PPUSH
 817: CALL 5947 0 2
 821: ST_TO_ADDR
// if veh > 0 then
 822: LD_VAR 0 2
 826: PUSH
 827: LD_INT 0
 829: GREATER
 830: IFFALSE 852
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 832: LD_EXP 2
 836: PPUSH
 837: LD_VAR 0 2
 841: PUSH
 842: LD_INT 1
 844: ARRAY
 845: PPUSH
 846: CALL_OW 52
// end else
 850: GO 867
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 852: LD_EXP 2
 856: PPUSH
 857: LD_INT 2
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 867: LD_STRING BobbyIn06
 869: PPUSH
 870: LD_INT 0
 872: PPUSH
 873: CALL_OW 30
 877: PUSH
 878: LD_INT 1
 880: EQUAL
 881: IFFALSE 985
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 883: LD_ADDR_VAR 0 2
 887: PUSH
 888: LD_INT 22
 890: PUSH
 891: LD_INT 1
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 21
 900: PUSH
 901: LD_INT 2
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 58
 910: PUSH
 911: EMPTY
 912: LIST
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: PPUSH
 919: CALL_OW 69
 923: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 924: LD_ADDR_EXP 3
 928: PUSH
 929: LD_STRING Bobby
 931: PPUSH
 932: LD_INT 1
 934: PPUSH
 935: CALL 5947 0 2
 939: ST_TO_ADDR
// if veh > 0 then
 940: LD_VAR 0 2
 944: PUSH
 945: LD_INT 0
 947: GREATER
 948: IFFALSE 970
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 950: LD_EXP 3
 954: PPUSH
 955: LD_VAR 0 2
 959: PUSH
 960: LD_INT 1
 962: ARRAY
 963: PPUSH
 964: CALL_OW 52
// end else
 968: GO 985
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 970: LD_EXP 3
 974: PPUSH
 975: LD_INT 2
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 985: LD_STRING CyrusIn06
 987: PPUSH
 988: LD_INT 0
 990: PPUSH
 991: CALL_OW 30
 995: PUSH
 996: LD_INT 1
 998: EQUAL
 999: IFFALSE 1103
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1001: LD_ADDR_VAR 0 2
1005: PUSH
1006: LD_INT 22
1008: PUSH
1009: LD_INT 1
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: PUSH
1016: LD_INT 21
1018: PUSH
1019: LD_INT 2
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: LD_INT 58
1028: PUSH
1029: EMPTY
1030: LIST
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
1042: LD_ADDR_EXP 4
1046: PUSH
1047: LD_STRING Cyrus
1049: PPUSH
1050: LD_INT 1
1052: PPUSH
1053: CALL 5947 0 2
1057: ST_TO_ADDR
// if veh > 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1088
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
1068: LD_EXP 4
1072: PPUSH
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 1
1080: ARRAY
1081: PPUSH
1082: CALL_OW 52
// end else
1086: GO 1103
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1088: LD_EXP 4
1092: PPUSH
1093: LD_INT 2
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1103: LD_STRING FrankIn06
1105: PPUSH
1106: LD_INT 0
1108: PPUSH
1109: CALL_OW 30
1113: PUSH
1114: LD_INT 1
1116: EQUAL
1117: IFFALSE 1221
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1119: LD_ADDR_VAR 0 2
1123: PUSH
1124: LD_INT 22
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 21
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 58
1146: PUSH
1147: EMPTY
1148: LIST
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1160: LD_ADDR_EXP 5
1164: PUSH
1165: LD_STRING Frank
1167: PPUSH
1168: LD_INT 1
1170: PPUSH
1171: CALL 5947 0 2
1175: ST_TO_ADDR
// if veh > 0 then
1176: LD_VAR 0 2
1180: PUSH
1181: LD_INT 0
1183: GREATER
1184: IFFALSE 1206
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1186: LD_EXP 5
1190: PPUSH
1191: LD_VAR 0 2
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: CALL_OW 52
// end else
1204: GO 1221
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1206: LD_EXP 5
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1221: LD_STRING BrownIn06
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 30
1231: PUSH
1232: LD_INT 1
1234: EQUAL
1235: IFFALSE 1339
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1237: LD_ADDR_VAR 0 2
1241: PUSH
1242: LD_INT 22
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 21
1254: PUSH
1255: LD_INT 2
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: LD_INT 58
1264: PUSH
1265: EMPTY
1266: LIST
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: LIST
1272: PPUSH
1273: CALL_OW 69
1277: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1278: LD_ADDR_EXP 6
1282: PUSH
1283: LD_STRING Brown
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: CALL 5947 0 2
1293: ST_TO_ADDR
// if veh > 0 then
1294: LD_VAR 0 2
1298: PUSH
1299: LD_INT 0
1301: GREATER
1302: IFFALSE 1324
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1304: LD_EXP 6
1308: PPUSH
1309: LD_VAR 0 2
1313: PUSH
1314: LD_INT 1
1316: ARRAY
1317: PPUSH
1318: CALL_OW 52
// end else
1322: GO 1339
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1324: LD_EXP 6
1328: PPUSH
1329: LD_INT 2
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1339: LD_STRING DonaldsonIn06
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: CALL_OW 30
1349: PUSH
1350: LD_INT 1
1352: EQUAL
1353: IFFALSE 1457
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1355: LD_ADDR_VAR 0 2
1359: PUSH
1360: LD_INT 22
1362: PUSH
1363: LD_INT 1
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: PUSH
1370: LD_INT 21
1372: PUSH
1373: LD_INT 2
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: PUSH
1380: LD_INT 58
1382: PUSH
1383: EMPTY
1384: LIST
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: PPUSH
1391: CALL_OW 69
1395: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1396: LD_ADDR_EXP 7
1400: PUSH
1401: LD_STRING Donaldson
1403: PPUSH
1404: LD_INT 1
1406: PPUSH
1407: CALL 5947 0 2
1411: ST_TO_ADDR
// if veh > 0 then
1412: LD_VAR 0 2
1416: PUSH
1417: LD_INT 0
1419: GREATER
1420: IFFALSE 1442
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1422: LD_EXP 7
1426: PPUSH
1427: LD_VAR 0 2
1431: PUSH
1432: LD_INT 1
1434: ARRAY
1435: PPUSH
1436: CALL_OW 52
// end else
1440: GO 1457
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1442: LD_EXP 7
1446: PPUSH
1447: LD_INT 2
1449: PPUSH
1450: LD_INT 0
1452: PPUSH
1453: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1457: LD_STRING GladstoneIn06
1459: PPUSH
1460: LD_INT 0
1462: PPUSH
1463: CALL_OW 30
1467: PUSH
1468: LD_INT 1
1470: EQUAL
1471: IFFALSE 1575
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1473: LD_ADDR_VAR 0 2
1477: PUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 1
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 21
1490: PUSH
1491: LD_INT 2
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 58
1500: PUSH
1501: EMPTY
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: PPUSH
1509: CALL_OW 69
1513: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1514: LD_ADDR_EXP 8
1518: PUSH
1519: LD_STRING Gladstone
1521: PPUSH
1522: LD_INT 1
1524: PPUSH
1525: CALL 5947 0 2
1529: ST_TO_ADDR
// if veh > 0 then
1530: LD_VAR 0 2
1534: PUSH
1535: LD_INT 0
1537: GREATER
1538: IFFALSE 1560
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1540: LD_EXP 8
1544: PPUSH
1545: LD_VAR 0 2
1549: PUSH
1550: LD_INT 1
1552: ARRAY
1553: PPUSH
1554: CALL_OW 52
// end else
1558: GO 1575
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1560: LD_EXP 8
1564: PPUSH
1565: LD_INT 2
1567: PPUSH
1568: LD_INT 0
1570: PPUSH
1571: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1575: LD_INT 66
1577: PPUSH
1578: LD_INT 4
1580: PPUSH
1581: CALL_OW 86
// end ;
1585: LD_VAR 0 1
1589: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1590: LD_INT 0
1592: PPUSH
1593: PPUSH
1594: PPUSH
1595: PPUSH
1596: PPUSH
1597: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1598: LD_ADDR_VAR 0 5
1602: PUSH
1603: LD_STRING 06_VehiclesIn06_1
1605: PPUSH
1606: EMPTY
1607: PPUSH
1608: CALL_OW 30
1612: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1613: LD_ADDR_EXP 40
1617: PUSH
1618: LD_STRING 06_ResourcesInCargo06_1
1620: PPUSH
1621: EMPTY
1622: PPUSH
1623: CALL_OW 30
1627: ST_TO_ADDR
// cargoList = [ ] ;
1628: LD_ADDR_VAR 0 6
1632: PUSH
1633: EMPTY
1634: ST_TO_ADDR
// uc_side = 1 ;
1635: LD_ADDR_OWVAR 20
1639: PUSH
1640: LD_INT 1
1642: ST_TO_ADDR
// if vehicles > 0 then
1643: LD_VAR 0 5
1647: PUSH
1648: LD_INT 0
1650: GREATER
1651: IFFALSE 2006
// begin for i := 1 to vehicles do
1653: LD_ADDR_VAR 0 2
1657: PUSH
1658: DOUBLE
1659: LD_INT 1
1661: DEC
1662: ST_TO_ADDR
1663: LD_VAR 0 5
1667: PUSH
1668: FOR_TO
1669: IFFALSE 1818
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1671: LD_ADDR_OWVAR 21
1675: PUSH
1676: LD_VAR 0 5
1680: PUSH
1681: LD_VAR 0 2
1685: ARRAY
1686: PUSH
1687: LD_INT 1
1689: ARRAY
1690: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1691: LD_ADDR_OWVAR 37
1695: PUSH
1696: LD_VAR 0 5
1700: PUSH
1701: LD_VAR 0 2
1705: ARRAY
1706: PUSH
1707: LD_INT 2
1709: ARRAY
1710: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1711: LD_ADDR_OWVAR 39
1715: PUSH
1716: LD_VAR 0 5
1720: PUSH
1721: LD_VAR 0 2
1725: ARRAY
1726: PUSH
1727: LD_INT 3
1729: ARRAY
1730: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1731: LD_ADDR_OWVAR 38
1735: PUSH
1736: LD_VAR 0 5
1740: PUSH
1741: LD_VAR 0 2
1745: ARRAY
1746: PUSH
1747: LD_INT 4
1749: ARRAY
1750: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1751: LD_ADDR_OWVAR 40
1755: PUSH
1756: LD_VAR 0 5
1760: PUSH
1761: LD_VAR 0 2
1765: ARRAY
1766: PUSH
1767: LD_INT 5
1769: ARRAY
1770: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1771: LD_ADDR_OWVAR 41
1775: PUSH
1776: LD_INT 40
1778: ST_TO_ADDR
// veh = CreateVehicle ;
1779: LD_ADDR_VAR 0 4
1783: PUSH
1784: CALL_OW 45
1788: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1789: LD_VAR 0 4
1793: PPUSH
1794: LD_INT 3
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1801: LD_VAR 0 4
1805: PPUSH
1806: LD_INT 2
1808: PPUSH
1809: LD_INT 0
1811: PPUSH
1812: CALL_OW 49
// end ;
1816: GO 1668
1818: POP
1819: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1820: LD_ADDR_VAR 0 6
1824: PUSH
1825: LD_INT 22
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 21
1837: PUSH
1838: LD_INT 2
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 34
1847: PUSH
1848: LD_INT 12
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: PPUSH
1860: CALL_OW 69
1864: ST_TO_ADDR
// if cargoList > 0 then
1865: LD_VAR 0 6
1869: PUSH
1870: LD_INT 0
1872: GREATER
1873: IFFALSE 2006
// for i = 1 to cargoList do
1875: LD_ADDR_VAR 0 2
1879: PUSH
1880: DOUBLE
1881: LD_INT 1
1883: DEC
1884: ST_TO_ADDR
1885: LD_VAR 0 6
1889: PUSH
1890: FOR_TO
1891: IFFALSE 2004
// begin if resources > 0 then
1893: LD_EXP 40
1897: PUSH
1898: LD_INT 0
1900: GREATER
1901: IFFALSE 2002
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1903: LD_VAR 0 6
1907: PUSH
1908: LD_VAR 0 2
1912: ARRAY
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_EXP 40
1921: PUSH
1922: LD_VAR 0 2
1926: ARRAY
1927: PUSH
1928: LD_INT 1
1930: ARRAY
1931: PPUSH
1932: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1936: LD_VAR 0 6
1940: PUSH
1941: LD_VAR 0 2
1945: ARRAY
1946: PPUSH
1947: LD_INT 2
1949: PPUSH
1950: LD_EXP 40
1954: PUSH
1955: LD_VAR 0 2
1959: ARRAY
1960: PUSH
1961: LD_INT 2
1963: ARRAY
1964: PPUSH
1965: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1969: LD_VAR 0 6
1973: PUSH
1974: LD_VAR 0 2
1978: ARRAY
1979: PPUSH
1980: LD_INT 3
1982: PPUSH
1983: LD_EXP 40
1987: PUSH
1988: LD_VAR 0 2
1992: ARRAY
1993: PUSH
1994: LD_INT 3
1996: ARRAY
1997: PPUSH
1998: CALL_OW 291
// end ; end ;
2002: GO 1890
2004: POP
2005: POP
// end ; end ;
2006: LD_VAR 0 1
2010: RET
// export function PrepareOthers ; var i , veh ; begin
2011: LD_INT 0
2013: PPUSH
2014: PPUSH
2015: PPUSH
// uc_side = 1 ;
2016: LD_ADDR_OWVAR 20
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// uc_nation = 1 ;
2024: LD_ADDR_OWVAR 21
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
2032: LD_ADDR_EXP 11
2036: PUSH
2037: LD_STRING OthersIn06
2039: PPUSH
2040: CALL_OW 31
2044: ST_TO_ADDR
// for i in others do
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_EXP 11
2054: PUSH
2055: FOR_IN
2056: IFFALSE 2146
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2058: LD_ADDR_VAR 0 3
2062: PUSH
2063: LD_INT 22
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: PUSH
2073: LD_INT 21
2075: PUSH
2076: LD_INT 2
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 58
2085: PUSH
2086: EMPTY
2087: LIST
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 69
2098: ST_TO_ADDR
// if veh > 0 then
2099: LD_VAR 0 3
2103: PUSH
2104: LD_INT 0
2106: GREATER
2107: IFFALSE 2129
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2109: LD_VAR 0 2
2113: PPUSH
2114: LD_VAR 0 3
2118: PUSH
2119: LD_INT 1
2121: ARRAY
2122: PPUSH
2123: CALL_OW 52
// end else
2127: GO 2144
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2129: LD_VAR 0 2
2133: PPUSH
2134: LD_INT 2
2136: PPUSH
2137: LD_INT 0
2139: PPUSH
2140: CALL_OW 49
// end ; end ;
2144: GO 2055
2146: POP
2147: POP
// end ;
2148: LD_VAR 0 1
2152: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2153: LD_INT 0
2155: PPUSH
2156: PPUSH
2157: PPUSH
// uc_side = 1 ;
2158: LD_ADDR_OWVAR 20
2162: PUSH
2163: LD_INT 1
2165: ST_TO_ADDR
// uc_nation = 0 ;
2166: LD_ADDR_OWVAR 21
2170: PUSH
2171: LD_INT 0
2173: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2174: LD_ADDR_EXP 12
2178: PUSH
2179: LD_STRING ApeIn06
2181: PPUSH
2182: CALL_OW 31
2186: ST_TO_ADDR
// for i in ape do
2187: LD_ADDR_VAR 0 2
2191: PUSH
2192: LD_EXP 12
2196: PUSH
2197: FOR_IN
2198: IFFALSE 2217
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2200: LD_VAR 0 2
2204: PPUSH
2205: LD_INT 2
2207: PPUSH
2208: LD_INT 0
2210: PPUSH
2211: CALL_OW 49
2215: GO 2197
2217: POP
2218: POP
// end ;
2219: LD_VAR 0 1
2223: RET
// export function PrepareDenis ; var xy , i ; begin
2224: LD_INT 0
2226: PPUSH
2227: PPUSH
2228: PPUSH
// uc_side = 4 ;
2229: LD_ADDR_OWVAR 20
2233: PUSH
2234: LD_INT 4
2236: ST_TO_ADDR
// uc_nation = 1 ;
2237: LD_ADDR_OWVAR 21
2241: PUSH
2242: LD_INT 1
2244: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2245: LD_ADDR_VAR 0 2
2249: PUSH
2250: LD_INT 63
2252: PUSH
2253: LD_INT 1
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 70
2262: PUSH
2263: LD_INT 1
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 83
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 16
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 27
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 38
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 5
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 54
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2340: LD_ADDR_EXP 9
2344: PUSH
2345: LD_STRING Denis
2347: PPUSH
2348: LD_INT 1
2350: PPUSH
2351: CALL 5947 0 2
2355: ST_TO_ADDR
// for i = 1 to xy do
2356: LD_ADDR_VAR 0 3
2360: PUSH
2361: DOUBLE
2362: LD_INT 1
2364: DEC
2365: ST_TO_ADDR
2366: LD_VAR 0 2
2370: PUSH
2371: FOR_TO
2372: IFFALSE 2471
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2374: LD_VAR 0 2
2378: PUSH
2379: LD_VAR 0 3
2383: ARRAY
2384: PUSH
2385: LD_INT 1
2387: ARRAY
2388: PPUSH
2389: LD_VAR 0 2
2393: PUSH
2394: LD_VAR 0 3
2398: ARRAY
2399: PUSH
2400: LD_INT 2
2402: ARRAY
2403: PPUSH
2404: CALL_OW 428
2408: PUSH
2409: LD_INT 0
2411: EQUAL
2412: IFFALSE 2469
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2414: LD_EXP 9
2418: PPUSH
2419: LD_VAR 0 2
2423: PUSH
2424: LD_VAR 0 3
2428: ARRAY
2429: PUSH
2430: LD_INT 1
2432: ARRAY
2433: PPUSH
2434: LD_VAR 0 2
2438: PUSH
2439: LD_VAR 0 3
2443: ARRAY
2444: PUSH
2445: LD_INT 2
2447: ARRAY
2448: PPUSH
2449: LD_INT 0
2451: PPUSH
2452: CALL_OW 48
// if IsPlaced ( Denis ) then
2456: LD_EXP 9
2460: PPUSH
2461: CALL_OW 305
2465: IFFALSE 2469
// break ;
2467: GO 2471
// end ;
2469: GO 2371
2471: POP
2472: POP
// SetClass ( Denis , 4 ) ;
2473: LD_EXP 9
2477: PPUSH
2478: LD_INT 4
2480: PPUSH
2481: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2485: LD_EXP 9
2489: PPUSH
2490: LD_INT 750
2492: PPUSH
2493: CALL_OW 234
// end ;
2497: LD_VAR 0 1
2501: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
2506: PPUSH
2507: PPUSH
2508: PPUSH
// area := HarrisonSupportArea ;
2509: LD_ADDR_VAR 0 4
2513: PUSH
2514: LD_INT 3
2516: ST_TO_ADDR
// dir := 2 ;
2517: LD_ADDR_VAR 0 5
2521: PUSH
2522: LD_INT 2
2524: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2525: LD_VAR 0 4
2529: PPUSH
2530: LD_INT 21
2532: PUSH
2533: LD_INT 3
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PPUSH
2540: CALL_OW 70
2544: IFFALSE 2562
// begin area := HarrisonSupportArea2 ;
2546: LD_ADDR_VAR 0 4
2550: PUSH
2551: LD_INT 31
2553: ST_TO_ADDR
// dir := 1 ;
2554: LD_ADDR_VAR 0 5
2558: PUSH
2559: LD_INT 1
2561: ST_TO_ADDR
// end ; uc_side = 1 ;
2562: LD_ADDR_OWVAR 20
2566: PUSH
2567: LD_INT 1
2569: ST_TO_ADDR
// uc_nation = 1 ;
2570: LD_ADDR_OWVAR 21
2574: PUSH
2575: LD_INT 1
2577: ST_TO_ADDR
// vc_engine = 1 ;
2578: LD_ADDR_OWVAR 39
2582: PUSH
2583: LD_INT 1
2585: ST_TO_ADDR
// vc_control = 1 ;
2586: LD_ADDR_OWVAR 38
2590: PUSH
2591: LD_INT 1
2593: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2594: LD_ADDR_OWVAR 40
2598: PUSH
2599: LD_INT 4
2601: PUSH
2602: LD_INT 4
2604: PUSH
2605: LD_INT 2
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: LD_OWVAR 67
2617: ARRAY
2618: ST_TO_ADDR
// vc_chassis = 2 ;
2619: LD_ADDR_OWVAR 37
2623: PUSH
2624: LD_INT 2
2626: ST_TO_ADDR
// veh = CreateVehicle ;
2627: LD_ADDR_VAR 0 3
2631: PUSH
2632: CALL_OW 45
2636: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2637: LD_VAR 0 3
2641: PPUSH
2642: LD_VAR 0 5
2646: PPUSH
2647: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2651: LD_VAR 0 3
2655: PPUSH
2656: LD_VAR 0 4
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2668: LD_VAR 0 3
2672: PPUSH
2673: LD_INT 50
2675: PPUSH
2676: CALL_OW 240
// hc_class := 2 ;
2680: LD_ADDR_OWVAR 28
2684: PUSH
2685: LD_INT 2
2687: ST_TO_ADDR
// hc_sex := sex_male ;
2688: LD_ADDR_OWVAR 27
2692: PUSH
2693: LD_INT 1
2695: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2696: LD_ADDR_OWVAR 33
2700: PUSH
2701: LD_STRING SecondCharsGal
2703: ST_TO_ADDR
// hc_face_number := 52 ;
2704: LD_ADDR_OWVAR 34
2708: PUSH
2709: LD_INT 52
2711: ST_TO_ADDR
// hc_name := Craig Brown ;
2712: LD_ADDR_OWVAR 26
2716: PUSH
2717: LD_STRING Craig Brown
2719: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2720: LD_ADDR_OWVAR 29
2724: PUSH
2725: LD_INT 10
2727: PUSH
2728: LD_INT 10
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2735: LD_ADDR_OWVAR 30
2739: PUSH
2740: LD_INT 0
2742: PUSH
2743: LD_INT 2
2745: PUSH
2746: LD_INT 0
2748: PUSH
2749: LD_INT 0
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2758: LD_ADDR_OWVAR 31
2762: PUSH
2763: LD_INT 2
2765: PUSH
2766: LD_INT 3
2768: PUSH
2769: LD_INT 0
2771: PUSH
2772: LD_INT 0
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2781: LD_ADDR_EXP 17
2785: PUSH
2786: CALL_OW 44
2790: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2791: LD_EXP 17
2795: PPUSH
2796: LD_VAR 0 3
2800: PPUSH
2801: CALL_OW 52
// vc_engine = 1 ;
2805: LD_ADDR_OWVAR 39
2809: PUSH
2810: LD_INT 1
2812: ST_TO_ADDR
// vc_control = 1 ;
2813: LD_ADDR_OWVAR 38
2817: PUSH
2818: LD_INT 1
2820: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2821: LD_ADDR_OWVAR 40
2825: PUSH
2826: LD_INT 3
2828: ST_TO_ADDR
// vc_chassis = 2 ;
2829: LD_ADDR_OWVAR 37
2833: PUSH
2834: LD_INT 2
2836: ST_TO_ADDR
// veh = CreateVehicle ;
2837: LD_ADDR_VAR 0 3
2841: PUSH
2842: CALL_OW 45
2846: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2847: LD_VAR 0 3
2851: PPUSH
2852: LD_VAR 0 5
2856: PPUSH
2857: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2878: LD_VAR 0 3
2882: PPUSH
2883: LD_INT 50
2885: PPUSH
2886: CALL_OW 240
// hc_class := 1 ;
2890: LD_ADDR_OWVAR 28
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
// hc_sex := sex_female ;
2898: LD_ADDR_OWVAR 27
2902: PUSH
2903: LD_INT 2
2905: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2906: LD_ADDR_OWVAR 33
2910: PUSH
2911: LD_STRING SecondCharsGal
2913: ST_TO_ADDR
// hc_face_number := 45 ;
2914: LD_ADDR_OWVAR 34
2918: PUSH
2919: LD_INT 45
2921: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2922: LD_ADDR_OWVAR 29
2926: PUSH
2927: LD_INT 11
2929: PUSH
2930: LD_INT 10
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2937: LD_ADDR_OWVAR 26
2941: PUSH
2942: LD_STRING Ingrid Jonsson
2944: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2945: LD_ADDR_OWVAR 30
2949: PUSH
2950: LD_INT 1
2952: PUSH
2953: LD_INT 1
2955: PUSH
2956: LD_INT 0
2958: PUSH
2959: LD_INT 0
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2968: LD_ADDR_OWVAR 31
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: LD_INT 1
2978: PUSH
2979: LD_INT 1
2981: PUSH
2982: LD_INT 0
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2991: LD_ADDR_EXP 18
2995: PUSH
2996: CALL_OW 44
3000: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3001: LD_EXP 18
3005: PPUSH
3006: LD_VAR 0 3
3010: PPUSH
3011: CALL_OW 52
// end ;
3015: LD_VAR 0 1
3019: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
3020: LD_INT 0
3022: PPUSH
3023: PPUSH
3024: PPUSH
3025: PPUSH
3026: PPUSH
// j = 0 ;
3027: LD_ADDR_VAR 0 3
3031: PUSH
3032: LD_INT 0
3034: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3035: LD_INT 35
3037: PPUSH
3038: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
3042: LD_ADDR_VAR 0 2
3046: PUSH
3047: LD_INT 22
3049: PUSH
3050: LD_INT 1
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: LD_INT 21
3059: PUSH
3060: LD_INT 1
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 26
3069: PUSH
3070: LD_INT 1
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: LD_INT 25
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 25
3092: PUSH
3093: LD_INT 2
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 25
3102: PUSH
3103: LD_INT 3
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 25
3112: PUSH
3113: LD_INT 4
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: PPUSH
3133: CALL_OW 69
3137: PUSH
3138: FOR_IN
3139: IFFALSE 3265
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3141: LD_INT 22
3143: PUSH
3144: LD_INT 3
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PUSH
3151: LD_INT 2
3153: PUSH
3154: LD_INT 21
3156: PUSH
3157: LD_INT 1
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: LD_INT 21
3166: PUSH
3167: LD_INT 2
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PUSH
3174: LD_INT 21
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PUSH
3184: LD_INT 59
3186: PUSH
3187: EMPTY
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 91
3199: PUSH
3200: LD_VAR 0 2
3204: PUSH
3205: LD_INT 25
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: LIST
3217: PPUSH
3218: CALL_OW 69
3222: NOT
3223: PUSH
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_EXP 1
3233: PPUSH
3234: CALL_OW 296
3238: PUSH
3239: LD_INT 15
3241: LESS
3242: AND
3243: IFFALSE 3263
// begin tmp = i ;
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: LD_VAR 0 2
3254: ST_TO_ADDR
// j = 1 ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: LD_INT 1
3262: ST_TO_ADDR
// end ; end ;
3263: GO 3138
3265: POP
3266: POP
// until j = 1 ;
3267: LD_VAR 0 3
3271: PUSH
3272: LD_INT 1
3274: EQUAL
3275: IFFALSE 3035
// blockSpawn = 1 ;
3277: LD_ADDR_EXP 29
3281: PUSH
3282: LD_INT 1
3284: ST_TO_ADDR
// uc_side = 4 ;
3285: LD_ADDR_OWVAR 20
3289: PUSH
3290: LD_INT 4
3292: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3293: LD_ADDR_EXP 15
3297: PUSH
3298: LD_STRING Joan
3300: PPUSH
3301: LD_INT 0
3303: PPUSH
3304: CALL 5947 0 2
3308: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3309: LD_EXP 15
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 250
3323: PPUSH
3324: LD_VAR 0 4
3328: PPUSH
3329: CALL_OW 251
3333: PPUSH
3334: LD_INT 5
3336: PPUSH
3337: LD_INT 1
3339: PPUSH
3340: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3344: LD_EXP 15
3348: PPUSH
3349: LD_INT 250
3351: PPUSH
3352: CALL_OW 234
// InGameOn ;
3356: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3360: LD_EXP 15
3364: PPUSH
3365: CALL_OW 87
// wait ( 0 0$2 ) ;
3369: LD_INT 70
3371: PPUSH
3372: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3376: LD_VAR 0 4
3380: PPUSH
3381: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3385: LD_VAR 0 4
3389: PPUSH
3390: CALL_OW 122
// wait ( 0 0$1 ) ;
3394: LD_INT 35
3396: PPUSH
3397: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3401: LD_VAR 0 4
3405: PPUSH
3406: LD_EXP 15
3410: PPUSH
3411: CALL_OW 112
// wait ( 0 0$2 ) ;
3415: LD_INT 70
3417: PPUSH
3418: CALL_OW 67
// DialogueOn ;
3422: CALL_OW 6
// if tmp = JMM then
3426: LD_VAR 0 4
3430: PUSH
3431: LD_EXP 1
3435: EQUAL
3436: IFFALSE 3585
// begin ComTurnUnit ( JMM , Joan ) ;
3438: LD_EXP 1
3442: PPUSH
3443: LD_EXP 15
3447: PPUSH
3448: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3452: LD_EXP 1
3456: PPUSH
3457: LD_STRING D5b-JMM-1
3459: PPUSH
3460: CALL_OW 88
// DialogueOff ;
3464: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3468: LD_EXP 15
3472: PPUSH
3473: LD_INT 500
3475: PPUSH
3476: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3480: LD_EXP 15
3484: PPUSH
3485: LD_EXP 1
3489: PPUSH
3490: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3494: LD_EXP 1
3498: PPUSH
3499: LD_EXP 15
3503: PPUSH
3504: CALL_OW 119
// wait ( 0 0$1 ) ;
3508: LD_INT 35
3510: PPUSH
3511: CALL_OW 67
// DialogueOn ;
3515: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3519: LD_EXP 15
3523: PPUSH
3524: LD_STRING D5b-Joan-1
3526: PPUSH
3527: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3531: LD_EXP 1
3535: PPUSH
3536: LD_STRING D5b-JMM-2
3538: PPUSH
3539: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3543: LD_EXP 15
3547: PPUSH
3548: LD_STRING D5b-Joan-2
3550: PPUSH
3551: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3555: LD_EXP 1
3559: PPUSH
3560: LD_STRING D5b-JMM-3
3562: PPUSH
3563: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3567: LD_EXP 15
3571: PPUSH
3572: LD_STRING D5b-Joan-3
3574: PPUSH
3575: CALL_OW 88
// DialogueOff ;
3579: CALL_OW 7
// end else
3583: GO 3920
// begin ComTurnUnit ( tmp , Joan ) ;
3585: LD_VAR 0 4
3589: PPUSH
3590: LD_EXP 15
3594: PPUSH
3595: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3599: LD_VAR 0 4
3603: PPUSH
3604: LD_STRING D5a-Sol1-1
3606: PPUSH
3607: CALL_OW 88
// DialogueOff ;
3611: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3615: LD_EXP 15
3619: PPUSH
3620: LD_INT 500
3622: PPUSH
3623: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3627: LD_EXP 15
3631: PPUSH
3632: LD_VAR 0 4
3636: PPUSH
3637: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3641: LD_VAR 0 4
3645: PPUSH
3646: LD_EXP 15
3650: PPUSH
3651: CALL_OW 119
// wait ( 0 0$1 ) ;
3655: LD_INT 35
3657: PPUSH
3658: CALL_OW 67
// DialogueOn ;
3662: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3666: LD_EXP 15
3670: PPUSH
3671: LD_STRING D5a-Joan-1
3673: PPUSH
3674: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3678: LD_VAR 0 4
3682: PPUSH
3683: LD_STRING D5a-Sol1-2
3685: PPUSH
3686: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3690: LD_EXP 15
3694: PPUSH
3695: LD_STRING D5a-Joan-2
3697: PPUSH
3698: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3702: LD_VAR 0 4
3706: PPUSH
3707: LD_STRING D5a-Sol1-3
3709: PPUSH
3710: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3714: LD_EXP 15
3718: PPUSH
3719: LD_STRING D5a-Joan-3
3721: PPUSH
3722: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3726: LD_VAR 0 4
3730: PPUSH
3731: LD_STRING D5a-Sol1-4
3733: PPUSH
3734: CALL_OW 88
// DialogueOff ;
3738: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3742: LD_EXP 1
3746: PPUSH
3747: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3751: LD_EXP 1
3755: PPUSH
3756: CALL_OW 122
// wait ( 0 0$1 ) ;
3760: LD_INT 35
3762: PPUSH
3763: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3767: LD_INT 35
3769: PPUSH
3770: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3774: LD_EXP 15
3778: PUSH
3779: LD_VAR 0 4
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: LD_EXP 1
3792: PPUSH
3793: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3797: LD_EXP 15
3801: PPUSH
3802: LD_EXP 1
3806: PPUSH
3807: CALL_OW 296
3811: PUSH
3812: LD_INT 5
3814: LESS
3815: IFFALSE 3767
// ComTurnUnit ( Joan , JMM ) ;
3817: LD_EXP 15
3821: PPUSH
3822: LD_EXP 1
3826: PPUSH
3827: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3831: LD_EXP 1
3835: PPUSH
3836: LD_EXP 15
3840: PPUSH
3841: CALL_OW 119
// wait ( 0 0$1 ) ;
3845: LD_INT 35
3847: PPUSH
3848: CALL_OW 67
// DialogueOn ;
3852: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3856: LD_EXP 15
3860: PPUSH
3861: LD_STRING D5a-Joan-4
3863: PPUSH
3864: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3868: LD_EXP 1
3872: PPUSH
3873: LD_STRING D5a-JMM-4
3875: PPUSH
3876: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3880: LD_EXP 15
3884: PPUSH
3885: LD_STRING D5a-Joan-5
3887: PPUSH
3888: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3892: LD_EXP 1
3896: PPUSH
3897: LD_STRING D5a-JMM-5
3899: PPUSH
3900: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3904: LD_EXP 15
3908: PPUSH
3909: LD_STRING D5a-Joan-6
3911: PPUSH
3912: CALL_OW 88
// DialogueOff ;
3916: CALL_OW 7
// end ; DialogueOn ;
3920: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3924: LD_EXP 1
3928: PPUSH
3929: LD_STRING D6-JMM-1
3931: PPUSH
3932: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3936: LD_EXP 15
3940: PPUSH
3941: LD_STRING D6-Joan-1
3943: PPUSH
3944: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3948: LD_EXP 1
3952: PPUSH
3953: LD_STRING D6-JMM-2
3955: PPUSH
3956: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3960: LD_EXP 15
3964: PPUSH
3965: LD_STRING D6-Joan-2
3967: PPUSH
3968: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3972: LD_EXP 1
3976: PPUSH
3977: LD_STRING D6-JMM-3
3979: PPUSH
3980: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3984: LD_EXP 15
3988: PPUSH
3989: LD_STRING D6-Joan-3
3991: PPUSH
3992: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3996: LD_EXP 1
4000: PPUSH
4001: LD_STRING D6-JMM-4
4003: PPUSH
4004: CALL_OW 88
// DialogueOff ;
4008: CALL_OW 7
// InGameOff ;
4012: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4016: LD_EXP 15
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4028: LD_STRING MJ
4030: PPUSH
4031: CALL_OW 337
// JoanStatus = 1 ;
4035: LD_ADDR_EXP 16
4039: PUSH
4040: LD_INT 1
4042: ST_TO_ADDR
// blockSpawn = 0 ;
4043: LD_ADDR_EXP 29
4047: PUSH
4048: LD_INT 0
4050: ST_TO_ADDR
// end ;
4051: LD_VAR 0 1
4055: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4056: LD_INT 0
4058: PPUSH
4059: PPUSH
// repeat wait ( 0 0$7 ) ;
4060: LD_INT 245
4062: PPUSH
4063: CALL_OW 67
// until blockSpawn = 0 ;
4067: LD_EXP 29
4071: PUSH
4072: LD_INT 0
4074: EQUAL
4075: IFFALSE 4060
// uc_side = 1 ;
4077: LD_ADDR_OWVAR 20
4081: PUSH
4082: LD_INT 1
4084: ST_TO_ADDR
// uc_nation = 1 ;
4085: LD_ADDR_OWVAR 21
4089: PUSH
4090: LD_INT 1
4092: ST_TO_ADDR
// InitHc ;
4093: CALL_OW 19
// if number = 1 then
4097: LD_VAR 0 1
4101: PUSH
4102: LD_INT 1
4104: EQUAL
4105: IFFALSE 4281
// begin hc_class := 3 ;
4107: LD_ADDR_OWVAR 28
4111: PUSH
4112: LD_INT 3
4114: ST_TO_ADDR
// hc_sex := sex_male ;
4115: LD_ADDR_OWVAR 27
4119: PUSH
4120: LD_INT 1
4122: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4123: LD_ADDR_OWVAR 33
4127: PUSH
4128: LD_STRING SecondCharsGal
4130: ST_TO_ADDR
// hc_face_number := 55 ;
4131: LD_ADDR_OWVAR 34
4135: PUSH
4136: LD_INT 55
4138: ST_TO_ADDR
// hc_name := George McCarthy ;
4139: LD_ADDR_OWVAR 26
4143: PUSH
4144: LD_STRING George McCarthy
4146: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4147: LD_ADDR_OWVAR 29
4151: PUSH
4152: LD_INT 11
4154: PUSH
4155: LD_INT 10
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4162: LD_ADDR_OWVAR 30
4166: PUSH
4167: LD_INT 0
4169: PUSH
4170: LD_INT 0
4172: PUSH
4173: LD_INT 2
4175: PUSH
4176: LD_INT 0
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4185: LD_ADDR_OWVAR 31
4189: PUSH
4190: LD_INT 1
4192: PUSH
4193: LD_INT 2
4195: PUSH
4196: LD_INT 3
4198: PUSH
4199: LD_INT 1
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: ST_TO_ADDR
// un = CreateHuman ;
4208: LD_ADDR_VAR 0 3
4212: PUSH
4213: CALL_OW 44
4217: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4218: LD_VAR 0 3
4222: PPUSH
4223: LD_INT 23
4225: PPUSH
4226: LD_INT 1
4228: PPUSH
4229: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: CALL_OW 87
// wait ( 0 0$1 ) ;
4242: LD_INT 35
4244: PPUSH
4245: CALL_OW 67
// DialogueOn ;
4249: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4253: LD_VAR 0 3
4257: PPUSH
4258: LD_STRING D11d-Sol4-1
4260: PPUSH
4261: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4265: LD_EXP 1
4269: PPUSH
4270: LD_STRING D11d-JMM-1
4272: PPUSH
4273: CALL_OW 88
// DialogueOff ;
4277: CALL_OW 7
// end ; if number = 2 then
4281: LD_VAR 0 1
4285: PUSH
4286: LD_INT 2
4288: EQUAL
4289: IFFALSE 4465
// begin hc_class := 1 ;
4291: LD_ADDR_OWVAR 28
4295: PUSH
4296: LD_INT 1
4298: ST_TO_ADDR
// hc_sex := sex_male ;
4299: LD_ADDR_OWVAR 27
4303: PUSH
4304: LD_INT 1
4306: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4307: LD_ADDR_OWVAR 33
4311: PUSH
4312: LD_STRING AmGalRemake
4314: ST_TO_ADDR
// hc_face_number := 7 ;
4315: LD_ADDR_OWVAR 34
4319: PUSH
4320: LD_INT 7
4322: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4323: LD_ADDR_OWVAR 26
4327: PUSH
4328: LD_STRING Bobby Jordan
4330: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4331: LD_ADDR_OWVAR 29
4335: PUSH
4336: LD_INT 9
4338: PUSH
4339: LD_INT 11
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4346: LD_ADDR_OWVAR 30
4350: PUSH
4351: LD_INT 1
4353: PUSH
4354: LD_INT 0
4356: PUSH
4357: LD_INT 0
4359: PUSH
4360: LD_INT 1
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4369: LD_ADDR_OWVAR 31
4373: PUSH
4374: LD_INT 2
4376: PUSH
4377: LD_INT 1
4379: PUSH
4380: LD_INT 1
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: ST_TO_ADDR
// un = CreateHuman ;
4392: LD_ADDR_VAR 0 3
4396: PUSH
4397: CALL_OW 44
4401: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4402: LD_VAR 0 3
4406: PPUSH
4407: LD_INT 24
4409: PPUSH
4410: LD_INT 1
4412: PPUSH
4413: CALL_OW 49
// wait ( 0 0$1 ) ;
4417: LD_INT 35
4419: PPUSH
4420: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4424: LD_VAR 0 3
4428: PPUSH
4429: CALL_OW 87
// DialogueOn ;
4433: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4437: LD_VAR 0 3
4441: PPUSH
4442: LD_STRING D11b-Sol3-1
4444: PPUSH
4445: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4449: LD_EXP 1
4453: PPUSH
4454: LD_STRING D11b-JMM-1
4456: PPUSH
4457: CALL_OW 88
// DialogueOff ;
4461: CALL_OW 7
// end ; if number = 3 then
4465: LD_VAR 0 1
4469: PUSH
4470: LD_INT 3
4472: EQUAL
4473: IFFALSE 4637
// begin hc_class := 1 ;
4475: LD_ADDR_OWVAR 28
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// hc_sex := sex_male ;
4483: LD_ADDR_OWVAR 27
4487: PUSH
4488: LD_INT 1
4490: ST_TO_ADDR
// hc_gallery := DJ ;
4491: LD_ADDR_OWVAR 33
4495: PUSH
4496: LD_STRING DJ
4498: ST_TO_ADDR
// hc_face_number := 1 ;
4499: LD_ADDR_OWVAR 34
4503: PUSH
4504: LD_INT 1
4506: ST_TO_ADDR
// hc_name := Darius Dajay ;
4507: LD_ADDR_OWVAR 26
4511: PUSH
4512: LD_STRING Darius Dajay
4514: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4515: LD_ADDR_OWVAR 29
4519: PUSH
4520: LD_INT 11
4522: PUSH
4523: LD_INT 11
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4530: LD_ADDR_OWVAR 30
4534: PUSH
4535: LD_INT 2
4537: PUSH
4538: LD_INT 0
4540: PUSH
4541: LD_INT 0
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4553: LD_ADDR_OWVAR 31
4557: PUSH
4558: LD_INT 4
4560: PUSH
4561: LD_INT 0
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: LD_INT 0
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: ST_TO_ADDR
// un = CreateHuman ;
4576: LD_ADDR_VAR 0 3
4580: PUSH
4581: CALL_OW 44
4585: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4586: LD_VAR 0 3
4590: PPUSH
4591: LD_INT 25
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4601: LD_VAR 0 3
4605: PPUSH
4606: CALL_OW 87
// wait ( 0 0$1 ) ;
4610: LD_INT 35
4612: PPUSH
4613: CALL_OW 67
// DialogueOn ;
4617: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4621: LD_VAR 0 3
4625: PPUSH
4626: LD_STRING D11f-Sol5-1
4628: PPUSH
4629: CALL_OW 88
// DialogueOff ;
4633: CALL_OW 7
// end ; if number = 4 then
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 4
4644: EQUAL
4645: IFFALSE 4809
// begin hc_class := 3 ;
4647: LD_ADDR_OWVAR 28
4651: PUSH
4652: LD_INT 3
4654: ST_TO_ADDR
// hc_sex := sex_female ;
4655: LD_ADDR_OWVAR 27
4659: PUSH
4660: LD_INT 2
4662: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4663: LD_ADDR_OWVAR 33
4667: PUSH
4668: LD_STRING SecondCharsGal
4670: ST_TO_ADDR
// hc_face_number := 46 ;
4671: LD_ADDR_OWVAR 34
4675: PUSH
4676: LD_INT 46
4678: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4679: LD_ADDR_OWVAR 26
4683: PUSH
4684: LD_STRING Sylvia Creak
4686: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4687: LD_ADDR_OWVAR 29
4691: PUSH
4692: LD_INT 10
4694: PUSH
4695: LD_INT 9
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4702: LD_ADDR_OWVAR 30
4706: PUSH
4707: LD_INT 0
4709: PUSH
4710: LD_INT 1
4712: PUSH
4713: LD_INT 1
4715: PUSH
4716: LD_INT 1
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4725: LD_ADDR_OWVAR 31
4729: PUSH
4730: LD_INT 1
4732: PUSH
4733: LD_INT 3
4735: PUSH
4736: LD_INT 1
4738: PUSH
4739: LD_INT 1
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: ST_TO_ADDR
// un = CreateHuman ;
4748: LD_ADDR_VAR 0 3
4752: PUSH
4753: CALL_OW 44
4757: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4758: LD_VAR 0 3
4762: PPUSH
4763: LD_INT 26
4765: PPUSH
4766: LD_INT 1
4768: PPUSH
4769: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4773: LD_VAR 0 3
4777: PPUSH
4778: CALL_OW 87
// wait ( 0 0$1 ) ;
4782: LD_INT 35
4784: PPUSH
4785: CALL_OW 67
// DialogueOn ;
4789: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4793: LD_VAR 0 3
4797: PPUSH
4798: LD_STRING D11e-FSol4-1
4800: PPUSH
4801: CALL_OW 88
// DialogueOff ;
4805: CALL_OW 7
// end ; if number = 5 then
4809: LD_VAR 0 1
4813: PUSH
4814: LD_INT 5
4816: EQUAL
4817: IFFALSE 4993
// begin hc_class := 1 ;
4819: LD_ADDR_OWVAR 28
4823: PUSH
4824: LD_INT 1
4826: ST_TO_ADDR
// hc_sex := sex_female ;
4827: LD_ADDR_OWVAR 27
4831: PUSH
4832: LD_INT 2
4834: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4835: LD_ADDR_OWVAR 33
4839: PUSH
4840: LD_STRING SecondCharsGal
4842: ST_TO_ADDR
// hc_face_number := 37 ;
4843: LD_ADDR_OWVAR 34
4847: PUSH
4848: LD_INT 37
4850: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4851: LD_ADDR_OWVAR 26
4855: PUSH
4856: LD_STRING Margherite Simpson
4858: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4859: LD_ADDR_OWVAR 29
4863: PUSH
4864: LD_INT 11
4866: PUSH
4867: LD_INT 10
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4874: LD_ADDR_OWVAR 30
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: LD_INT 0
4887: PUSH
4888: LD_INT 0
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4897: LD_ADDR_OWVAR 31
4901: PUSH
4902: LD_INT 1
4904: PUSH
4905: LD_INT 1
4907: PUSH
4908: LD_INT 1
4910: PUSH
4911: LD_INT 1
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: ST_TO_ADDR
// un = CreateHuman ;
4920: LD_ADDR_VAR 0 3
4924: PUSH
4925: CALL_OW 44
4929: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4930: LD_VAR 0 3
4934: PPUSH
4935: LD_INT 27
4937: PPUSH
4938: LD_INT 1
4940: PPUSH
4941: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4945: LD_VAR 0 3
4949: PPUSH
4950: CALL_OW 87
// wait ( 0 0$1 ) ;
4954: LD_INT 35
4956: PPUSH
4957: CALL_OW 67
// DialogueOn ;
4961: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4965: LD_VAR 0 3
4969: PPUSH
4970: LD_STRING D11c-FSol3-1
4972: PPUSH
4973: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4977: LD_EXP 1
4981: PPUSH
4982: LD_STRING D11c-JMM-1
4984: PPUSH
4985: CALL_OW 88
// DialogueOff ;
4989: CALL_OW 7
// end ; if number = 6 then
4993: LD_VAR 0 1
4997: PUSH
4998: LD_INT 6
5000: EQUAL
5001: IFFALSE 5175
// begin hc_class := 1 ;
5003: LD_ADDR_OWVAR 28
5007: PUSH
5008: LD_INT 1
5010: ST_TO_ADDR
// hc_sex := sex_male ;
5011: LD_ADDR_OWVAR 27
5015: PUSH
5016: LD_INT 1
5018: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5019: LD_ADDR_OWVAR 33
5023: PUSH
5024: LD_STRING AmGalRemake
5026: ST_TO_ADDR
// hc_face_number := 1 ;
5027: LD_ADDR_OWVAR 34
5031: PUSH
5032: LD_INT 1
5034: ST_TO_ADDR
// hc_name := Charles Brown ;
5035: LD_ADDR_OWVAR 26
5039: PUSH
5040: LD_STRING Charles Brown
5042: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5043: LD_ADDR_OWVAR 29
5047: PUSH
5048: LD_INT 12
5050: PUSH
5051: LD_INT 11
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5058: LD_ADDR_OWVAR 30
5062: PUSH
5063: LD_INT 2
5065: PUSH
5066: LD_INT 0
5068: PUSH
5069: LD_INT 0
5071: PUSH
5072: LD_INT 0
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5081: LD_ADDR_OWVAR 31
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 0
5091: PUSH
5092: LD_INT 1
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: ST_TO_ADDR
// un = CreateHuman ;
5104: LD_ADDR_VAR 0 3
5108: PUSH
5109: CALL_OW 44
5113: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5114: LD_VAR 0 3
5118: PPUSH
5119: LD_INT 28
5121: PPUSH
5122: LD_INT 1
5124: PPUSH
5125: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5129: LD_VAR 0 3
5133: PPUSH
5134: CALL_OW 87
// wait ( 0 0$1 ) ;
5138: LD_INT 35
5140: PPUSH
5141: CALL_OW 67
// DialogueOn ;
5145: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5149: LD_VAR 0 3
5153: PPUSH
5154: LD_STRING D4-Sol1-5
5156: PPUSH
5157: CALL_OW 88
// DialogueOff ;
5161: CALL_OW 7
// tempCharles = un ;
5165: LD_ADDR_EXP 13
5169: PUSH
5170: LD_VAR 0 3
5174: ST_TO_ADDR
// end ; if number = 7 then
5175: LD_VAR 0 1
5179: PUSH
5180: LD_INT 7
5182: EQUAL
5183: IFFALSE 5433
// begin hc_class := 1 ;
5185: LD_ADDR_OWVAR 28
5189: PUSH
5190: LD_INT 1
5192: ST_TO_ADDR
// hc_sex := sex_female ;
5193: LD_ADDR_OWVAR 27
5197: PUSH
5198: LD_INT 2
5200: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5201: LD_ADDR_OWVAR 33
5205: PUSH
5206: LD_STRING AmGalRemake
5208: ST_TO_ADDR
// hc_face_number := 2 ;
5209: LD_ADDR_OWVAR 34
5213: PUSH
5214: LD_INT 2
5216: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5217: LD_ADDR_OWVAR 26
5221: PUSH
5222: LD_STRING Rebecca Macdonald
5224: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5225: LD_ADDR_OWVAR 29
5229: PUSH
5230: LD_INT 10
5232: PUSH
5233: LD_INT 10
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5240: LD_ADDR_OWVAR 30
5244: PUSH
5245: LD_INT 1
5247: PUSH
5248: LD_INT 0
5250: PUSH
5251: LD_INT 0
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5263: LD_ADDR_OWVAR 31
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: LD_INT 0
5273: PUSH
5274: LD_INT 0
5276: PUSH
5277: LD_INT 1
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: ST_TO_ADDR
// un = CreateHuman ;
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: CALL_OW 44
5295: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5296: LD_VAR 0 3
5300: PPUSH
5301: LD_INT 29
5303: PPUSH
5304: LD_INT 1
5306: PPUSH
5307: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5311: LD_VAR 0 3
5315: PPUSH
5316: CALL_OW 87
// wait ( 0 0$1 ) ;
5320: LD_INT 35
5322: PPUSH
5323: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5327: LD_INT 30
5329: PPUSH
5330: LD_INT 22
5332: PUSH
5333: LD_INT 3
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: PPUSH
5340: CALL_OW 70
5344: IFFALSE 5433
// begin DialogueOn ;
5346: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5350: LD_VAR 0 3
5354: PPUSH
5355: CALL_OW 250
5359: PPUSH
5360: LD_VAR 0 3
5364: PPUSH
5365: CALL_OW 251
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: LD_INT 15
5375: NEG
5376: PPUSH
5377: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5381: LD_VAR 0 3
5385: PPUSH
5386: CALL_OW 250
5390: PPUSH
5391: LD_VAR 0 3
5395: PPUSH
5396: CALL_OW 251
5400: PPUSH
5401: LD_INT 1
5403: PPUSH
5404: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5408: LD_VAR 0 3
5412: PPUSH
5413: LD_STRING D11a-FSol2-1
5415: PPUSH
5416: CALL_OW 88
// ComCrawl ( un ) ;
5420: LD_VAR 0 3
5424: PPUSH
5425: CALL_OW 137
// DialogueOff ;
5429: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5433: LD_ADDR_EXP 45
5437: PUSH
5438: LD_EXP 45
5442: PUSH
5443: LD_VAR 0 3
5447: UNION
5448: ST_TO_ADDR
// arrivals := arrivals union un ;
5449: LD_ADDR_EXP 46
5453: PUSH
5454: LD_EXP 46
5458: PUSH
5459: LD_VAR 0 3
5463: UNION
5464: ST_TO_ADDR
// end ;
5465: LD_VAR 0 2
5469: RET
// every 0 0$1 do var i ;
5470: GO 5472
5472: DISABLE
5473: LD_INT 0
5475: PPUSH
// begin enable ;
5476: ENABLE
// if not ignoreTarget then
5477: LD_EXP 45
5481: NOT
5482: IFFALSE 5486
// exit ;
5484: GO 5567
// for i in ignoreTarget do
5486: LD_ADDR_VAR 0 1
5490: PUSH
5491: LD_EXP 45
5495: PUSH
5496: FOR_IN
5497: IFFALSE 5565
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5499: LD_INT 22
5501: PUSH
5502: LD_INT 1
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 91
5511: PUSH
5512: LD_VAR 0 1
5516: PUSH
5517: LD_INT 10
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PPUSH
5529: CALL_OW 69
5533: PUSH
5534: LD_EXP 45
5538: DIFF
5539: PUSH
5540: LD_INT 1
5542: GREATER
5543: IFFALSE 5563
// begin ignoreTarget := ignoreTarget diff i ;
5545: LD_ADDR_EXP 45
5549: PUSH
5550: LD_EXP 45
5554: PUSH
5555: LD_VAR 0 1
5559: DIFF
5560: ST_TO_ADDR
// break ;
5561: GO 5565
// end ;
5563: GO 5496
5565: POP
5566: POP
// end ; end_of_file
5567: PPOPN 1
5569: END
// export function PrepareRussian ; var i ; begin
5570: LD_INT 0
5572: PPUSH
5573: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5574: LD_INT 3
5576: PPUSH
5577: LD_INT 3
5579: PPUSH
5580: LD_INT 2
5582: PPUSH
5583: LD_EXP 34
5587: PPUSH
5588: LD_EXP 35
5592: PPUSH
5593: CALL_OW 12
5597: PPUSH
5598: LD_INT 2
5600: PPUSH
5601: LD_INT 4
5603: PPUSH
5604: CALL 6139 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5608: LD_INT 3
5610: PPUSH
5611: LD_INT 3
5613: PPUSH
5614: LD_INT 8
5616: PPUSH
5617: LD_EXP 34
5621: PPUSH
5622: LD_EXP 35
5626: PPUSH
5627: CALL_OW 12
5631: PPUSH
5632: LD_INT 1
5634: PPUSH
5635: LD_INT 4
5637: PPUSH
5638: CALL 6139 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5642: LD_INT 3
5644: PPUSH
5645: LD_INT 3
5647: PPUSH
5648: LD_INT 67
5650: PPUSH
5651: LD_EXP 34
5655: PPUSH
5656: LD_EXP 35
5660: PPUSH
5661: CALL_OW 12
5665: PPUSH
5666: LD_INT 1
5668: PPUSH
5669: LD_INT 2
5671: PPUSH
5672: CALL 6139 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5676: LD_INT 3
5678: PPUSH
5679: LD_INT 3
5681: PPUSH
5682: LD_INT 21
5684: PPUSH
5685: LD_EXP 34
5689: PPUSH
5690: LD_EXP 35
5694: PPUSH
5695: CALL_OW 12
5699: PPUSH
5700: LD_INT 3
5702: PPUSH
5703: LD_INT 6
5705: PPUSH
5706: CALL 6139 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5710: LD_INT 3
5712: PPUSH
5713: LD_INT 3
5715: PPUSH
5716: LD_INT 17
5718: PPUSH
5719: LD_EXP 34
5723: PPUSH
5724: LD_EXP 35
5728: PPUSH
5729: CALL_OW 12
5733: PPUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 6
5739: PPUSH
5740: CALL 6139 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5744: LD_INT 3
5746: PPUSH
5747: LD_INT 3
5749: PPUSH
5750: LD_INT 32
5752: PPUSH
5753: LD_EXP 34
5757: PPUSH
5758: LD_EXP 35
5762: PPUSH
5763: CALL_OW 12
5767: PPUSH
5768: LD_INT 4
5770: PPUSH
5771: LD_INT 2
5773: PPUSH
5774: CALL 6139 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5778: LD_ADDR_VAR 0 2
5782: PUSH
5783: LD_INT 22
5785: PUSH
5786: LD_INT 3
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 21
5795: PUSH
5796: LD_INT 3
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 30
5805: PUSH
5806: LD_INT 32
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: LIST
5817: PPUSH
5818: CALL_OW 69
5822: PUSH
5823: FOR_IN
5824: IFFALSE 5864
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5826: LD_INT 3
5828: PPUSH
5829: LD_INT 3
5831: PPUSH
5832: LD_VAR 0 2
5836: PPUSH
5837: LD_EXP 34
5841: PPUSH
5842: LD_EXP 35
5846: PPUSH
5847: CALL_OW 12
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: LD_INT 1
5857: PPUSH
5858: CALL 6139 0 6
5862: GO 5823
5864: POP
5865: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5866: LD_ADDR_VAR 0 2
5870: PUSH
5871: LD_INT 22
5873: PUSH
5874: LD_INT 3
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 21
5883: PUSH
5884: LD_INT 3
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 30
5893: PUSH
5894: LD_INT 31
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: LIST
5905: PPUSH
5906: CALL_OW 69
5910: PUSH
5911: FOR_IN
5912: IFFALSE 5940
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5914: LD_EXP 34
5918: PPUSH
5919: LD_EXP 35
5923: PPUSH
5924: CALL_OW 12
5928: PPUSH
5929: LD_VAR 0 2
5933: PPUSH
5934: CALL 6249 0 2
5938: GO 5911
5940: POP
5941: POP
// end ; end_of_file
5942: LD_VAR 0 1
5946: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5947: LD_INT 0
5949: PPUSH
5950: PPUSH
// if exist_mode then
5951: LD_VAR 0 2
5955: IFFALSE 5980
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5957: LD_ADDR_VAR 0 4
5961: PUSH
5962: LD_EXP 44
5966: PUSH
5967: LD_VAR 0 1
5971: STR
5972: PPUSH
5973: CALL_OW 34
5977: ST_TO_ADDR
// end else
5978: GO 5995
// begin unit := NewCharacter ( ident ) ;
5980: LD_ADDR_VAR 0 4
5984: PUSH
5985: LD_VAR 0 1
5989: PPUSH
5990: CALL_OW 25
5994: ST_TO_ADDR
// end ; result := unit ;
5995: LD_ADDR_VAR 0 3
5999: PUSH
6000: LD_VAR 0 4
6004: ST_TO_ADDR
// end ;
6005: LD_VAR 0 3
6009: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6010: LD_INT 0
6012: PPUSH
6013: PPUSH
6014: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
6015: LD_ADDR_VAR 0 6
6019: PUSH
6020: LD_VAR 0 1
6024: PUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_VAR 0 1
6032: PPUSH
6033: CALL_OW 12
6037: ARRAY
6038: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6039: LD_VAR 0 6
6043: PPUSH
6044: CALL_OW 258
6048: PUSH
6049: LD_INT 1
6051: EQUAL
6052: IFFALSE 6070
// Say ( speaker , dialogMID ) else
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_VAR 0 2
6063: PPUSH
6064: CALL_OW 88
6068: GO 6084
// Say ( speaker , dialogFID ) ;
6070: LD_VAR 0 6
6074: PPUSH
6075: LD_VAR 0 3
6079: PPUSH
6080: CALL_OW 88
// result := speaker ;
6084: LD_ADDR_VAR 0 4
6088: PUSH
6089: LD_VAR 0 6
6093: ST_TO_ADDR
// end ;
6094: LD_VAR 0 4
6098: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6099: LD_INT 0
6101: PPUSH
6102: PPUSH
// for i in charactersList do
6103: LD_ADDR_VAR 0 4
6107: PUSH
6108: LD_VAR 0 1
6112: PUSH
6113: FOR_IN
6114: IFFALSE 6132
// SaveCharacters ( i , ident ) ;
6116: LD_VAR 0 4
6120: PPUSH
6121: LD_VAR 0 2
6125: PPUSH
6126: CALL_OW 38
6130: GO 6113
6132: POP
6133: POP
// end ;
6134: LD_VAR 0 3
6138: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6139: LD_INT 0
6141: PPUSH
6142: PPUSH
6143: PPUSH
6144: PPUSH
// for i = 1 to count do
6145: LD_ADDR_VAR 0 8
6149: PUSH
6150: DOUBLE
6151: LD_INT 1
6153: DEC
6154: ST_TO_ADDR
6155: LD_VAR 0 6
6159: PUSH
6160: FOR_TO
6161: IFFALSE 6242
// begin uc_side = side ;
6163: LD_ADDR_OWVAR 20
6167: PUSH
6168: LD_VAR 0 1
6172: ST_TO_ADDR
// uc_nation = nation ;
6173: LD_ADDR_OWVAR 21
6177: PUSH
6178: LD_VAR 0 2
6182: ST_TO_ADDR
// hc_gallery =  ;
6183: LD_ADDR_OWVAR 33
6187: PUSH
6188: LD_STRING 
6190: ST_TO_ADDR
// hc_name =  ;
6191: LD_ADDR_OWVAR 26
6195: PUSH
6196: LD_STRING 
6198: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6199: LD_INT 0
6201: PPUSH
6202: LD_VAR 0 5
6206: PPUSH
6207: LD_VAR 0 4
6211: PPUSH
6212: CALL_OW 380
// un = CreateHuman ;
6216: LD_ADDR_VAR 0 10
6220: PUSH
6221: CALL_OW 44
6225: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6226: LD_VAR 0 10
6230: PPUSH
6231: LD_VAR 0 3
6235: PPUSH
6236: CALL_OW 52
// end ;
6240: GO 6160
6242: POP
6243: POP
// end ;
6244: LD_VAR 0 7
6248: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6249: LD_INT 0
6251: PPUSH
6252: PPUSH
6253: PPUSH
// uc_side := GetSide ( b ) ;
6254: LD_ADDR_OWVAR 20
6258: PUSH
6259: LD_VAR 0 2
6263: PPUSH
6264: CALL_OW 255
6268: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6269: LD_ADDR_OWVAR 21
6273: PUSH
6274: LD_VAR 0 2
6278: PPUSH
6279: CALL_OW 248
6283: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6284: LD_INT 0
6286: PPUSH
6287: LD_INT 1
6289: PPUSH
6290: LD_VAR 0 1
6294: PPUSH
6295: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6299: LD_ADDR_VAR 0 5
6303: PUSH
6304: LD_VAR 0 2
6308: PPUSH
6309: CALL_OW 254
6313: PUSH
6314: LD_INT 3
6316: MINUS
6317: ST_TO_ADDR
// if dir < 0 then
6318: LD_VAR 0 5
6322: PUSH
6323: LD_INT 0
6325: LESS
6326: IFFALSE 6342
// dir := 6 + dir ;
6328: LD_ADDR_VAR 0 5
6332: PUSH
6333: LD_INT 6
6335: PUSH
6336: LD_VAR 0 5
6340: PLUS
6341: ST_TO_ADDR
// un := CreateHuman ;
6342: LD_ADDR_VAR 0 4
6346: PUSH
6347: CALL_OW 44
6351: ST_TO_ADDR
// SetDir ( un , dir ) ;
6352: LD_VAR 0 4
6356: PPUSH
6357: LD_VAR 0 5
6361: PPUSH
6362: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6366: LD_VAR 0 4
6370: PPUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 52
// end ;
6380: LD_VAR 0 3
6384: RET
// export function PrepareDifficulty ; begin
6385: LD_INT 0
6387: PPUSH
// if Difficulty = 1 then
6388: LD_OWVAR 67
6392: PUSH
6393: LD_INT 1
6395: EQUAL
6396: IFFALSE 6414
// begin RuSolMinLevel = 2 ;
6398: LD_ADDR_EXP 34
6402: PUSH
6403: LD_INT 2
6405: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
6406: LD_ADDR_EXP 35
6410: PUSH
6411: LD_INT 3
6413: ST_TO_ADDR
// end ; if Difficulty = 2 then
6414: LD_OWVAR 67
6418: PUSH
6419: LD_INT 2
6421: EQUAL
6422: IFFALSE 6440
// begin RuSolMinLevel = 3 ;
6424: LD_ADDR_EXP 34
6428: PUSH
6429: LD_INT 3
6431: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6432: LD_ADDR_EXP 35
6436: PUSH
6437: LD_INT 5
6439: ST_TO_ADDR
// end ; if Difficulty = 3 then
6440: LD_OWVAR 67
6444: PUSH
6445: LD_INT 3
6447: EQUAL
6448: IFFALSE 6466
// begin RuSolMinLevel = 4 ;
6450: LD_ADDR_EXP 34
6454: PUSH
6455: LD_INT 4
6457: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6458: LD_ADDR_EXP 35
6462: PUSH
6463: LD_INT 6
6465: ST_TO_ADDR
// end ; end ;
6466: LD_VAR 0 1
6470: RET
// export function ShowQuery1 ; begin
6471: LD_INT 0
6473: PPUSH
// case query ( QKill ) of 1 :
6474: LD_STRING QKill
6476: PPUSH
6477: CALL_OW 97
6481: PUSH
6482: LD_INT 1
6484: DOUBLE
6485: EQUAL
6486: IFTRUE 6490
6488: GO 6501
6490: POP
// begin result = 1 ;
6491: LD_ADDR_VAR 0 1
6495: PUSH
6496: LD_INT 1
6498: ST_TO_ADDR
// end ; 2 :
6499: GO 6540
6501: LD_INT 2
6503: DOUBLE
6504: EQUAL
6505: IFTRUE 6509
6507: GO 6520
6509: POP
// begin result = 2 ;
6510: LD_ADDR_VAR 0 1
6514: PUSH
6515: LD_INT 2
6517: ST_TO_ADDR
// end ; 3 :
6518: GO 6540
6520: LD_INT 3
6522: DOUBLE
6523: EQUAL
6524: IFTRUE 6528
6526: GO 6539
6528: POP
// begin result = 3 ;
6529: LD_ADDR_VAR 0 1
6533: PUSH
6534: LD_INT 3
6536: ST_TO_ADDR
// end ; end ;
6537: GO 6540
6539: POP
// end ;
6540: LD_VAR 0 1
6544: RET
// export function ShowQuery2 ; begin
6545: LD_INT 0
6547: PPUSH
// case query ( QKill2 ) of 1 :
6548: LD_STRING QKill2
6550: PPUSH
6551: CALL_OW 97
6555: PUSH
6556: LD_INT 1
6558: DOUBLE
6559: EQUAL
6560: IFTRUE 6564
6562: GO 6575
6564: POP
// begin result = 1 ;
6565: LD_ADDR_VAR 0 1
6569: PUSH
6570: LD_INT 1
6572: ST_TO_ADDR
// end ; 2 :
6573: GO 6595
6575: LD_INT 2
6577: DOUBLE
6578: EQUAL
6579: IFTRUE 6583
6581: GO 6594
6583: POP
// begin result = 2 ;
6584: LD_ADDR_VAR 0 1
6588: PUSH
6589: LD_INT 2
6591: ST_TO_ADDR
// end ; end ;
6592: GO 6595
6594: POP
// end ;
6595: LD_VAR 0 1
6599: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6600: LD_INT 0
6602: PPUSH
6603: PPUSH
6604: PPUSH
6605: PPUSH
6606: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: LD_INT 48
6614: PUSH
6615: LD_INT 49
6617: PUSH
6618: LD_INT 50
6620: PUSH
6621: LD_INT 20
6623: PUSH
6624: LD_INT 1
6626: PUSH
6627: LD_INT 51
6629: PUSH
6630: LD_INT 52
6632: PUSH
6633: LD_INT 69
6635: PUSH
6636: LD_INT 39
6638: PUSH
6639: LD_INT 34
6641: PUSH
6642: LD_INT 40
6644: PUSH
6645: LD_INT 53
6647: PUSH
6648: LD_INT 71
6650: PUSH
6651: LD_INT 57
6653: PUSH
6654: LD_INT 58
6656: PUSH
6657: LD_INT 44
6659: PUSH
6660: LD_INT 32
6662: PUSH
6663: LD_INT 27
6665: PUSH
6666: LD_INT 23
6668: PUSH
6669: LD_INT 33
6671: PUSH
6672: LD_INT 59
6674: PUSH
6675: LD_INT 54
6677: PUSH
6678: LD_INT 55
6680: PUSH
6681: LD_INT 56
6683: PUSH
6684: LD_INT 63
6686: PUSH
6687: LD_INT 64
6689: PUSH
6690: LD_INT 65
6692: PUSH
6693: LD_INT 30
6695: PUSH
6696: LD_INT 31
6698: PUSH
6699: LD_INT 21
6701: PUSH
6702: LD_INT 22
6704: PUSH
6705: LD_INT 25
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6742: LD_ADDR_VAR 0 5
6746: PUSH
6747: DOUBLE
6748: LD_INT 1
6750: DEC
6751: ST_TO_ADDR
6752: LD_VAR 0 8
6756: PUSH
6757: FOR_TO
6758: IFFALSE 6834
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6760: LD_VAR 0 8
6764: PUSH
6765: LD_VAR 0 5
6769: ARRAY
6770: PPUSH
6771: LD_VAR 0 1
6775: PPUSH
6776: CALL_OW 321
6780: PUSH
6781: LD_INT 1
6783: EQUAL
6784: PUSH
6785: LD_VAR 0 8
6789: PUSH
6790: LD_VAR 0 5
6794: ARRAY
6795: PPUSH
6796: LD_VAR 0 3
6800: PPUSH
6801: CALL_OW 482
6805: PUSH
6806: LD_INT 1
6808: EQUAL
6809: AND
6810: IFFALSE 6832
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6812: LD_VAR 0 2
6816: PPUSH
6817: LD_VAR 0 8
6821: PUSH
6822: LD_VAR 0 5
6826: ARRAY
6827: PPUSH
6828: CALL_OW 184
6832: GO 6757
6834: POP
6835: POP
// end ;
6836: LD_VAR 0 4
6840: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6841: LD_INT 0
6843: PPUSH
6844: PPUSH
6845: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6846: LD_INT 22
6848: PUSH
6849: LD_VAR 0 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 21
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PPUSH
6872: CALL_OW 69
6876: PUSH
6877: LD_VAR 0 3
6881: LESSEQUAL
6882: IFFALSE 6990
// begin for i = 1 to vehCount do
6884: LD_ADDR_VAR 0 9
6888: PUSH
6889: DOUBLE
6890: LD_INT 1
6892: DEC
6893: ST_TO_ADDR
6894: LD_VAR 0 3
6898: PUSH
6899: FOR_TO
6900: IFFALSE 6988
// begin weapon = weaponTab [ i ] ;
6902: LD_ADDR_VAR 0 10
6906: PUSH
6907: LD_VAR 0 4
6911: PUSH
6912: LD_VAR 0 9
6916: ARRAY
6917: ST_TO_ADDR
// if weapon = 46 then
6918: LD_VAR 0 10
6922: PUSH
6923: LD_INT 46
6925: EQUAL
6926: IFFALSE 6957
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6928: LD_VAR 0 2
6932: PPUSH
6933: LD_INT 24
6935: PPUSH
6936: LD_VAR 0 5
6940: PPUSH
6941: LD_VAR 0 6
6945: PPUSH
6946: LD_VAR 0 10
6950: PPUSH
6951: CALL_OW 185
// end else
6955: GO 6986
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6957: LD_VAR 0 2
6961: PPUSH
6962: LD_VAR 0 7
6966: PPUSH
6967: LD_VAR 0 5
6971: PPUSH
6972: LD_VAR 0 6
6976: PPUSH
6977: LD_VAR 0 10
6981: PPUSH
6982: CALL_OW 185
// end ; end ;
6986: GO 6899
6988: POP
6989: POP
// end ; end ;
6990: LD_VAR 0 8
6994: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6995: LD_INT 0
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7001: LD_ADDR_VAR 0 8
7005: PUSH
7006: LD_INT 22
7008: PUSH
7009: LD_VAR 0 1
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 21
7020: PUSH
7021: LD_INT 2
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 3
7030: PUSH
7031: LD_INT 24
7033: PUSH
7034: LD_INT 650
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: PPUSH
7050: CALL_OW 69
7054: ST_TO_ADDR
// if damageVehicles > 0 then
7055: LD_VAR 0 8
7059: PUSH
7060: LD_INT 0
7062: GREATER
7063: IFFALSE 7084
// ComMoveXY ( damageVehicles , repX , repY ) ;
7065: LD_VAR 0 8
7069: PPUSH
7070: LD_VAR 0 3
7074: PPUSH
7075: LD_VAR 0 4
7079: PPUSH
7080: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7084: LD_VAR 0 8
7088: PPUSH
7089: LD_INT 95
7091: PUSH
7092: LD_VAR 0 2
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 3
7103: PUSH
7104: LD_INT 58
7106: PUSH
7107: EMPTY
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PPUSH
7118: CALL_OW 72
7122: PUSH
7123: LD_INT 0
7125: GREATER
7126: IFFALSE 7193
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7128: LD_ADDR_VAR 0 6
7132: PUSH
7133: LD_VAR 0 8
7137: PPUSH
7138: LD_INT 95
7140: PUSH
7141: LD_VAR 0 2
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 3
7152: PUSH
7153: LD_INT 58
7155: PUSH
7156: EMPTY
7157: LIST
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PPUSH
7167: CALL_OW 72
7171: PUSH
7172: FOR_IN
7173: IFFALSE 7191
// ComExitVehicle ( UnitsInside ( i ) ) ;
7175: LD_VAR 0 6
7179: PPUSH
7180: CALL_OW 313
7184: PPUSH
7185: CALL_OW 121
7189: GO 7172
7191: POP
7192: POP
// end ;
7193: LD_VAR 0 5
7197: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7198: LD_INT 0
7200: PPUSH
7201: PPUSH
7202: PPUSH
7203: PPUSH
7204: PPUSH
7205: PPUSH
7206: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7207: LD_ADDR_VAR 0 8
7211: PUSH
7212: LD_INT 22
7214: PUSH
7215: LD_VAR 0 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 21
7226: PUSH
7227: LD_INT 2
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 24
7236: PUSH
7237: LD_INT 660
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 3
7246: PUSH
7247: LD_INT 58
7249: PUSH
7250: EMPTY
7251: LIST
7252: PUSH
7253: LD_INT 2
7255: PUSH
7256: LD_INT 34
7258: PUSH
7259: LD_INT 43
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 34
7268: PUSH
7269: LD_INT 44
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: LD_INT 34
7278: PUSH
7279: LD_INT 46
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: LIST
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: PPUSH
7303: CALL_OW 69
7307: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7308: LD_INT 22
7310: PUSH
7311: LD_VAR 0 1
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 21
7322: PUSH
7323: LD_INT 2
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 24
7332: PUSH
7333: LD_INT 1000
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: LD_INT 3
7342: PUSH
7343: LD_INT 58
7345: PUSH
7346: EMPTY
7347: LIST
7348: PUSH
7349: LD_INT 2
7351: PUSH
7352: LD_INT 34
7354: PUSH
7355: LD_INT 43
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 34
7364: PUSH
7365: LD_INT 44
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 34
7374: PUSH
7375: LD_INT 46
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: PPUSH
7399: CALL_OW 69
7403: PUSH
7404: LD_INT 5
7406: PUSH
7407: LD_INT 6
7409: PUSH
7410: LD_INT 6
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: PUSH
7418: LD_OWVAR 67
7422: ARRAY
7423: EQUAL
7424: IFFALSE 7680
// if seeEnemy = 0 then
7426: LD_VAR 0 11
7430: PUSH
7431: LD_INT 0
7433: EQUAL
7434: IFFALSE 7680
// repeat wait ( 0 0$1 ) ;
7436: LD_INT 35
7438: PPUSH
7439: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7443: LD_ADDR_VAR 0 8
7447: PUSH
7448: LD_INT 22
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 21
7462: PUSH
7463: LD_INT 2
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PUSH
7470: LD_INT 24
7472: PUSH
7473: LD_INT 660
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 3
7482: PUSH
7483: LD_INT 58
7485: PUSH
7486: EMPTY
7487: LIST
7488: PUSH
7489: LD_INT 2
7491: PUSH
7492: LD_INT 34
7494: PUSH
7495: LD_INT 43
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 34
7504: PUSH
7505: LD_INT 44
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 34
7514: PUSH
7515: LD_INT 46
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PPUSH
7539: CALL_OW 69
7543: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7544: LD_INT 22
7546: PUSH
7547: LD_VAR 0 1
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 95
7558: PUSH
7559: LD_VAR 0 2
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PPUSH
7572: CALL_OW 69
7576: NOT
7577: PUSH
7578: LD_VAR 0 11
7582: PUSH
7583: LD_INT 0
7585: EQUAL
7586: AND
7587: IFFALSE 7642
// for i := 1 to wayX do
7589: LD_ADDR_VAR 0 6
7593: PUSH
7594: DOUBLE
7595: LD_INT 1
7597: DEC
7598: ST_TO_ADDR
7599: LD_VAR 0 3
7603: PUSH
7604: FOR_TO
7605: IFFALSE 7640
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7607: LD_VAR 0 8
7611: PPUSH
7612: LD_VAR 0 3
7616: PUSH
7617: LD_VAR 0 6
7621: ARRAY
7622: PPUSH
7623: LD_VAR 0 4
7627: PUSH
7628: LD_VAR 0 6
7632: ARRAY
7633: PPUSH
7634: CALL_OW 114
7638: GO 7604
7640: POP
7641: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7642: LD_INT 22
7644: PUSH
7645: LD_VAR 0 1
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: LD_INT 95
7656: PUSH
7657: LD_VAR 0 2
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PPUSH
7670: CALL_OW 69
7674: PUSH
7675: LD_INT 0
7677: GREATER
7678: IFFALSE 7436
// seeEnemy = 1 ;
7680: LD_ADDR_VAR 0 11
7684: PUSH
7685: LD_INT 1
7687: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7688: LD_INT 35
7690: PPUSH
7691: CALL_OW 67
// for j in vehiclesOK do
7695: LD_ADDR_VAR 0 7
7699: PUSH
7700: LD_VAR 0 8
7704: PUSH
7705: FOR_IN
7706: IFFALSE 7919
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7708: LD_ADDR_VAR 0 9
7712: PUSH
7713: LD_INT 81
7715: PUSH
7716: LD_VAR 0 1
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 101
7727: PUSH
7728: LD_INT 1
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PPUSH
7739: CALL_OW 69
7743: PUSH
7744: LD_EXP 45
7748: DIFF
7749: PPUSH
7750: LD_VAR 0 7
7754: PPUSH
7755: CALL_OW 74
7759: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7760: LD_ADDR_VAR 0 10
7764: PUSH
7765: LD_INT 81
7767: PUSH
7768: LD_VAR 0 1
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 101
7779: PUSH
7780: LD_INT 1
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: LD_INT 59
7792: PUSH
7793: EMPTY
7794: LIST
7795: PUSH
7796: LD_INT 21
7798: PUSH
7799: LD_INT 1
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: LD_INT 21
7808: PUSH
7809: LD_INT 2
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: PPUSH
7830: CALL_OW 69
7834: PUSH
7835: LD_EXP 45
7839: DIFF
7840: PPUSH
7841: LD_VAR 0 7
7845: PPUSH
7846: CALL_OW 74
7850: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7851: LD_VAR 0 7
7855: PPUSH
7856: LD_VAR 0 9
7860: PPUSH
7861: CALL_OW 296
7865: PUSH
7866: LD_INT 8
7868: PLUS
7869: PUSH
7870: LD_VAR 0 7
7874: PPUSH
7875: LD_VAR 0 10
7879: PPUSH
7880: CALL_OW 296
7884: LESS
7885: IFFALSE 7903
// ComAttackUnit ( j , target1 ) else
7887: LD_VAR 0 7
7891: PPUSH
7892: LD_VAR 0 9
7896: PPUSH
7897: CALL_OW 115
7901: GO 7917
// ComAttackUnit ( j , target2 ) ;
7903: LD_VAR 0 7
7907: PPUSH
7908: LD_VAR 0 10
7912: PPUSH
7913: CALL_OW 115
// end ;
7917: GO 7705
7919: POP
7920: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7921: LD_INT 22
7923: PUSH
7924: LD_VAR 0 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 21
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 24
7945: PUSH
7946: LD_INT 1000
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 3
7955: PUSH
7956: LD_INT 58
7958: PUSH
7959: EMPTY
7960: LIST
7961: PUSH
7962: LD_INT 2
7964: PUSH
7965: LD_INT 34
7967: PUSH
7968: LD_INT 43
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_INT 44
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PUSH
7985: LD_INT 34
7987: PUSH
7988: LD_INT 46
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: PPUSH
8012: CALL_OW 69
8016: PUSH
8017: LD_INT 0
8019: EQUAL
8020: IFFALSE 7688
// seeEnemy = 0 ;
8022: LD_ADDR_VAR 0 11
8026: PUSH
8027: LD_INT 0
8029: ST_TO_ADDR
// end ;
8030: LD_VAR 0 5
8034: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8035: LD_INT 0
8037: PPUSH
8038: PPUSH
8039: PPUSH
8040: PPUSH
8041: PPUSH
8042: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8043: LD_ADDR_VAR 0 8
8047: PUSH
8048: LD_VAR 0 2
8052: PPUSH
8053: CALL_OW 313
8057: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8058: LD_ADDR_VAR 0 9
8062: PUSH
8063: LD_VAR 0 3
8067: PPUSH
8068: LD_INT 22
8070: PUSH
8071: LD_VAR 0 1
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 25
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 24
8092: PUSH
8093: LD_INT 750
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 3
8102: PUSH
8103: LD_INT 54
8105: PUSH
8106: EMPTY
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PPUSH
8119: CALL_OW 70
8123: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8124: LD_ADDR_VAR 0 6
8128: PUSH
8129: LD_VAR 0 3
8133: PPUSH
8134: LD_INT 22
8136: PUSH
8137: LD_VAR 0 1
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PUSH
8146: LD_INT 21
8148: PUSH
8149: LD_INT 3
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 3
8158: PUSH
8159: LD_INT 24
8161: PUSH
8162: LD_INT 1000
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: LIST
8177: PUSH
8178: EMPTY
8179: LIST
8180: PPUSH
8181: CALL_OW 70
8185: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8186: LD_VAR 0 6
8190: NOT
8191: PUSH
8192: LD_INT 22
8194: PUSH
8195: LD_VAR 0 1
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 25
8206: PUSH
8207: LD_INT 2
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 24
8216: PUSH
8217: LD_INT 250
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PPUSH
8229: CALL_OW 69
8233: NOT
8234: AND
8235: IFFALSE 8239
// exit ;
8237: GO 8421
// if buildings_list > 0 and engineerOkInside then
8239: LD_VAR 0 6
8243: PUSH
8244: LD_INT 0
8246: GREATER
8247: PUSH
8248: LD_VAR 0 8
8252: AND
8253: IFFALSE 8264
// ComExitBuilding ( engineerOkInside ) ;
8255: LD_VAR 0 8
8259: PPUSH
8260: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8264: LD_VAR 0 6
8268: PUSH
8269: LD_INT 0
8271: GREATER
8272: PUSH
8273: LD_VAR 0 9
8277: PUSH
8278: LD_INT 0
8280: GREATER
8281: AND
8282: IFFALSE 8302
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8284: LD_VAR 0 9
8288: PPUSH
8289: LD_VAR 0 6
8293: PUSH
8294: LD_INT 1
8296: ARRAY
8297: PPUSH
8298: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8302: LD_VAR 0 6
8306: PUSH
8307: LD_INT 0
8309: EQUAL
8310: PUSH
8311: LD_VAR 0 4
8315: PUSH
8316: LD_INT 0
8318: EQUAL
8319: AND
8320: PUSH
8321: LD_VAR 0 9
8325: PUSH
8326: LD_INT 0
8328: GREATER
8329: AND
8330: IFFALSE 8346
// ComEnterUnit ( engineerOkOutside , building ) ;
8332: LD_VAR 0 9
8336: PPUSH
8337: LD_VAR 0 2
8341: PPUSH
8342: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8346: LD_VAR 0 9
8350: PUSH
8351: LD_INT 0
8353: GREATER
8354: PUSH
8355: LD_VAR 0 6
8359: PUSH
8360: LD_INT 0
8362: EQUAL
8363: AND
8364: PUSH
8365: LD_VAR 0 4
8369: PUSH
8370: LD_INT 0
8372: GREATER
8373: AND
8374: IFFALSE 8421
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8376: LD_VAR 0 9
8380: PPUSH
8381: LD_VAR 0 4
8385: PUSH
8386: LD_INT 1
8388: ARRAY
8389: PPUSH
8390: LD_VAR 0 4
8394: PUSH
8395: LD_INT 2
8397: ARRAY
8398: PPUSH
8399: LD_VAR 0 4
8403: PUSH
8404: LD_INT 3
8406: ARRAY
8407: PPUSH
8408: LD_VAR 0 4
8412: PUSH
8413: LD_INT 4
8415: ARRAY
8416: PPUSH
8417: CALL_OW 145
// end ;
8421: LD_VAR 0 5
8425: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8426: LD_INT 0
8428: PPUSH
8429: PPUSH
8430: PPUSH
8431: PPUSH
8432: PPUSH
8433: PPUSH
8434: PPUSH
8435: PPUSH
8436: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8437: LD_ADDR_VAR 0 6
8441: PUSH
8442: LD_INT 22
8444: PUSH
8445: LD_VAR 0 1
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 25
8456: PUSH
8457: LD_INT 4
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 23
8466: PUSH
8467: LD_INT 2
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 24
8476: PUSH
8477: LD_INT 251
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: PPUSH
8490: CALL_OW 69
8494: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8495: LD_ADDR_VAR 0 7
8499: PUSH
8500: LD_VAR 0 3
8504: PPUSH
8505: LD_INT 22
8507: PUSH
8508: LD_VAR 0 1
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: LD_INT 23
8519: PUSH
8520: LD_INT 2
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PUSH
8527: LD_INT 25
8529: PUSH
8530: LD_INT 4
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PUSH
8537: LD_INT 50
8539: PUSH
8540: EMPTY
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: PPUSH
8549: CALL_OW 70
8553: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8554: LD_ADDR_VAR 0 10
8558: PUSH
8559: LD_VAR 0 3
8563: PPUSH
8564: LD_INT 22
8566: PUSH
8567: LD_VAR 0 1
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 21
8578: PUSH
8579: LD_INT 1
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 3
8588: PUSH
8589: LD_INT 25
8591: PUSH
8592: LD_INT 3
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PUSH
8603: LD_INT 3
8605: PUSH
8606: LD_INT 24
8608: PUSH
8609: LD_INT 750
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: PPUSH
8626: CALL_OW 70
8630: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8631: LD_ADDR_VAR 0 11
8635: PUSH
8636: LD_VAR 0 2
8640: PPUSH
8641: LD_INT 22
8643: PUSH
8644: LD_VAR 0 1
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 21
8655: PUSH
8656: LD_INT 1
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 3
8665: PUSH
8666: LD_INT 25
8668: PUSH
8669: LD_INT 3
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: LD_INT 3
8682: PUSH
8683: LD_INT 24
8685: PUSH
8686: LD_INT 1000
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: PPUSH
8703: CALL_OW 70
8707: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8708: LD_VAR 0 10
8712: NOT
8713: PUSH
8714: LD_VAR 0 11
8718: NOT
8719: AND
8720: PUSH
8721: LD_VAR 0 6
8725: NOT
8726: AND
8727: IFFALSE 8731
// exit ;
8729: GO 8965
// if damageUnits > 0 and sci_list > 0 then
8731: LD_VAR 0 10
8735: PUSH
8736: LD_INT 0
8738: GREATER
8739: PUSH
8740: LD_VAR 0 6
8744: PUSH
8745: LD_INT 0
8747: GREATER
8748: AND
8749: IFFALSE 8765
// ComMoveToArea ( damageUnits , healArea ) ;
8751: LD_VAR 0 10
8755: PPUSH
8756: LD_VAR 0 2
8760: PPUSH
8761: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8765: LD_VAR 0 11
8769: PUSH
8770: LD_INT 0
8772: GREATER
8773: PUSH
8774: LD_VAR 0 6
8778: PUSH
8779: LD_INT 0
8781: GREATER
8782: AND
8783: IFFALSE 8794
// ComExitBuilding ( sci_list ) ;
8785: LD_VAR 0 6
8789: PPUSH
8790: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8794: LD_VAR 0 11
8798: PUSH
8799: LD_INT 0
8801: GREATER
8802: PUSH
8803: LD_VAR 0 7
8807: PUSH
8808: LD_INT 0
8810: GREATER
8811: AND
8812: IFFALSE 8832
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8814: LD_VAR 0 7
8818: PPUSH
8819: LD_VAR 0 11
8823: PUSH
8824: LD_INT 1
8826: ARRAY
8827: PPUSH
8828: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8832: LD_VAR 0 10
8836: PUSH
8837: LD_INT 0
8839: EQUAL
8840: PUSH
8841: LD_VAR 0 11
8845: PUSH
8846: LD_INT 0
8848: EQUAL
8849: AND
8850: PUSH
8851: LD_VAR 0 7
8855: PUSH
8856: LD_INT 0
8858: GREATER
8859: AND
8860: IFFALSE 8965
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8862: LD_ADDR_VAR 0 12
8866: PUSH
8867: LD_INT 22
8869: PUSH
8870: LD_VAR 0 1
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 21
8881: PUSH
8882: LD_INT 3
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 30
8891: PUSH
8892: LD_INT 8
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: PPUSH
8904: CALL_OW 69
8908: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8909: LD_ADDR_VAR 0 13
8913: PUSH
8914: LD_INT 1
8916: PPUSH
8917: LD_VAR 0 12
8921: PPUSH
8922: CALL_OW 12
8926: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8927: LD_VAR 0 7
8931: PPUSH
8932: LD_INT 3
8934: PUSH
8935: LD_INT 60
8937: PUSH
8938: EMPTY
8939: LIST
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 72
8949: PPUSH
8950: LD_VAR 0 12
8954: PUSH
8955: LD_VAR 0 13
8959: ARRAY
8960: PPUSH
8961: CALL_OW 120
// end ; end ;
8965: LD_VAR 0 5
8969: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8970: LD_INT 0
8972: PPUSH
8973: PPUSH
8974: PPUSH
8975: PPUSH
// tmpTab = [ ] ;
8976: LD_ADDR_VAR 0 6
8980: PUSH
8981: EMPTY
8982: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8983: LD_INT 22
8985: PUSH
8986: LD_VAR 0 1
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 30
8997: PUSH
8998: LD_INT 32
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: PPUSH
9009: CALL_OW 69
9013: PUSH
9014: LD_INT 0
9016: GREATER
9017: IFFALSE 9100
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9019: LD_ADDR_VAR 0 4
9023: PUSH
9024: LD_INT 22
9026: PUSH
9027: LD_VAR 0 1
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 30
9038: PUSH
9039: LD_INT 32
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PPUSH
9050: CALL_OW 69
9054: PUSH
9055: FOR_IN
9056: IFFALSE 9098
// begin for j in UnitsInside ( i ) do
9058: LD_ADDR_VAR 0 5
9062: PUSH
9063: LD_VAR 0 4
9067: PPUSH
9068: CALL_OW 313
9072: PUSH
9073: FOR_IN
9074: IFFALSE 9094
// tmpTab = tmpTab ^ j ;
9076: LD_ADDR_VAR 0 6
9080: PUSH
9081: LD_VAR 0 6
9085: PUSH
9086: LD_VAR 0 5
9090: ADD
9091: ST_TO_ADDR
9092: GO 9073
9094: POP
9095: POP
// end ;
9096: GO 9055
9098: POP
9099: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9100: LD_VAR 0 6
9104: PPUSH
9105: LD_VAR 0 2
9109: PPUSH
9110: CALL_OW 250
9114: PPUSH
9115: LD_VAR 0 2
9119: PPUSH
9120: CALL_OW 251
9124: PPUSH
9125: CALL_OW 114
// end ;
9129: LD_VAR 0 3
9133: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9134: LD_INT 0
9136: PPUSH
9137: PPUSH
9138: PPUSH
9139: PPUSH
// enable ;
9140: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9141: LD_ADDR_VAR 0 7
9145: PUSH
9146: LD_VAR 0 3
9150: PPUSH
9151: CALL_OW 435
9155: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9156: LD_ADDR_VAR 0 6
9160: PUSH
9161: LD_INT 22
9163: PUSH
9164: LD_VAR 0 1
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: LD_INT 34
9175: PUSH
9176: LD_VAR 0 2
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PPUSH
9189: CALL_OW 69
9193: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9194: LD_VAR 0 6
9198: PUSH
9199: LD_INT 0
9201: GREATER
9202: PUSH
9203: LD_VAR 0 3
9207: PPUSH
9208: CALL_OW 435
9212: AND
9213: PUSH
9214: LD_VAR 0 7
9218: PUSH
9219: LD_INT 0
9221: GREATER
9222: AND
9223: IFFALSE 9272
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9225: LD_VAR 0 6
9229: PUSH
9230: LD_INT 1
9232: ARRAY
9233: PPUSH
9234: LD_VAR 0 7
9238: PUSH
9239: LD_INT 1
9241: ARRAY
9242: PPUSH
9243: LD_VAR 0 7
9247: PUSH
9248: LD_INT 2
9250: ARRAY
9251: PPUSH
9252: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9256: LD_VAR 0 6
9260: PUSH
9261: LD_INT 1
9263: ARRAY
9264: PPUSH
9265: LD_INT 100
9267: PPUSH
9268: CALL_OW 240
// end ; end ;
9272: LD_VAR 0 4
9276: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9277: LD_INT 0
9279: PPUSH
9280: PPUSH
9281: PPUSH
9282: PPUSH
9283: PPUSH
9284: PPUSH
9285: PPUSH
9286: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9287: LD_ADDR_VAR 0 6
9291: PUSH
9292: LD_VAR 0 2
9296: PPUSH
9297: LD_INT 22
9299: PUSH
9300: LD_VAR 0 1
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 56
9311: PUSH
9312: EMPTY
9313: LIST
9314: PUSH
9315: LD_INT 24
9317: PUSH
9318: LD_INT 700
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 3
9327: PUSH
9328: LD_INT 60
9330: PUSH
9331: EMPTY
9332: LIST
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: LD_INT 2
9340: PUSH
9341: LD_INT 25
9343: PUSH
9344: LD_INT 1
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PUSH
9351: LD_INT 25
9353: PUSH
9354: LD_INT 5
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 25
9363: PUSH
9364: LD_INT 8
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 25
9373: PUSH
9374: LD_INT 9
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: PPUSH
9395: CALL_OW 70
9399: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9400: LD_ADDR_VAR 0 7
9404: PUSH
9405: LD_VAR 0 2
9409: PPUSH
9410: LD_INT 22
9412: PUSH
9413: LD_VAR 0 1
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 30
9424: PUSH
9425: LD_INT 32
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 58
9434: PUSH
9435: EMPTY
9436: LIST
9437: PUSH
9438: LD_INT 24
9440: PUSH
9441: LD_INT 251
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 70
9458: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9459: LD_ADDR_VAR 0 9
9463: PUSH
9464: LD_VAR 0 2
9468: PPUSH
9469: LD_INT 22
9471: PUSH
9472: LD_VAR 0 1
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: LD_INT 30
9486: PUSH
9487: LD_INT 4
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: LD_INT 30
9496: PUSH
9497: LD_INT 5
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 24
9511: PUSH
9512: LD_INT 251
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: LIST
9523: PPUSH
9524: CALL_OW 70
9528: ST_TO_ADDR
// if barrackList > 0 then
9529: LD_VAR 0 9
9533: PUSH
9534: LD_INT 0
9536: GREATER
9537: IFFALSE 9685
// begin if turretList = 0 then
9539: LD_VAR 0 7
9543: PUSH
9544: LD_INT 0
9546: EQUAL
9547: IFFALSE 9589
// begin if soldiers_list > 0 then
9549: LD_VAR 0 6
9553: PUSH
9554: LD_INT 0
9556: GREATER
9557: IFFALSE 9587
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9559: LD_VAR 0 6
9563: PPUSH
9564: LD_VAR 0 9
9568: PUSH
9569: LD_INT 1
9571: PPUSH
9572: LD_VAR 0 9
9576: PPUSH
9577: CALL_OW 12
9581: ARRAY
9582: PPUSH
9583: CALL_OW 120
// end else
9587: GO 9685
// begin for i in barrackList do
9589: LD_ADDR_VAR 0 4
9593: PUSH
9594: LD_VAR 0 9
9598: PUSH
9599: FOR_IN
9600: IFFALSE 9683
// begin insideUnits = UnitsInside ( i ) ;
9602: LD_ADDR_VAR 0 10
9606: PUSH
9607: LD_VAR 0 4
9611: PPUSH
9612: CALL_OW 313
9616: ST_TO_ADDR
// if insideUnits > 0 then
9617: LD_VAR 0 10
9621: PUSH
9622: LD_INT 0
9624: GREATER
9625: IFFALSE 9649
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9627: LD_VAR 0 10
9631: PUSH
9632: LD_INT 1
9634: ARRAY
9635: PPUSH
9636: LD_VAR 0 7
9640: PUSH
9641: LD_INT 1
9643: ARRAY
9644: PPUSH
9645: CALL_OW 120
// if soldiers_list > 0 then
9649: LD_VAR 0 6
9653: PUSH
9654: LD_INT 0
9656: GREATER
9657: IFFALSE 9681
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9659: LD_VAR 0 6
9663: PUSH
9664: LD_INT 1
9666: ARRAY
9667: PPUSH
9668: LD_VAR 0 7
9672: PUSH
9673: LD_INT 1
9675: ARRAY
9676: PPUSH
9677: CALL_OW 120
// end ;
9681: GO 9599
9683: POP
9684: POP
// end ; end ; end ;
9685: LD_VAR 0 3
9689: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9690: LD_INT 0
9692: PPUSH
9693: PPUSH
9694: PPUSH
9695: PPUSH
9696: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9697: LD_ADDR_VAR 0 6
9701: PUSH
9702: LD_INT 22
9704: PUSH
9705: LD_VAR 0 1
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: LD_INT 2
9716: PUSH
9717: LD_INT 30
9719: PUSH
9720: LD_INT 31
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 30
9729: PUSH
9730: LD_INT 32
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: LD_INT 30
9739: PUSH
9740: LD_INT 33
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 30
9749: PUSH
9750: LD_INT 4
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 30
9759: PUSH
9760: LD_INT 5
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PPUSH
9779: CALL_OW 69
9783: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9784: LD_ADDR_VAR 0 7
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_VAR 0 2
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: LD_INT 21
9803: PUSH
9804: LD_INT 3
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 58
9813: PUSH
9814: EMPTY
9815: LIST
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: PPUSH
9822: CALL_OW 69
9826: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9827: LD_VAR 0 6
9831: PUSH
9832: LD_INT 0
9834: GREATER
9835: PUSH
9836: LD_VAR 0 7
9840: PUSH
9841: LD_INT 0
9843: GREATER
9844: AND
9845: IFFALSE 9915
// begin for i in turretsList do
9847: LD_ADDR_VAR 0 4
9851: PUSH
9852: LD_VAR 0 6
9856: PUSH
9857: FOR_IN
9858: IFFALSE 9913
// begin for j in enemyBuildings do
9860: LD_ADDR_VAR 0 5
9864: PUSH
9865: LD_VAR 0 7
9869: PUSH
9870: FOR_IN
9871: IFFALSE 9909
// begin if GetDistUnits ( i , j ) < 20 then
9873: LD_VAR 0 4
9877: PPUSH
9878: LD_VAR 0 5
9882: PPUSH
9883: CALL_OW 296
9887: PUSH
9888: LD_INT 20
9890: LESS
9891: IFFALSE 9907
// begin ComAttackUnit ( i , j ) ;
9893: LD_VAR 0 4
9897: PPUSH
9898: LD_VAR 0 5
9902: PPUSH
9903: CALL_OW 115
// end ; end ;
9907: GO 9870
9909: POP
9910: POP
// end ;
9911: GO 9857
9913: POP
9914: POP
// end ; end ;
9915: LD_VAR 0 3
9919: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9920: LD_INT 0
9922: PPUSH
9923: PPUSH
9924: PPUSH
9925: PPUSH
9926: PPUSH
9927: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9928: LD_ADDR_VAR 0 8
9932: PUSH
9933: LD_INT 22
9935: PUSH
9936: LD_VAR 0 1
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 21
9947: PUSH
9948: LD_INT 2
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 34
9957: PUSH
9958: LD_INT 52
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: LIST
9969: PPUSH
9970: CALL_OW 69
9974: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9975: LD_ADDR_VAR 0 9
9979: PUSH
9980: LD_INT 22
9982: PUSH
9983: LD_VAR 0 1
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 21
9994: PUSH
9995: LD_INT 3
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 3
10004: PUSH
10005: LD_INT 24
10007: PUSH
10008: LD_INT 1000
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: EMPTY
10025: LIST
10026: PPUSH
10027: CALL_OW 69
10031: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10032: LD_VAR 0 9
10036: PUSH
10037: LD_INT 0
10039: GREATER
10040: PUSH
10041: LD_VAR 0 8
10045: PPUSH
10046: LD_INT 24
10048: PUSH
10049: LD_INT 750
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PPUSH
10056: CALL_OW 72
10060: PUSH
10061: LD_INT 0
10063: GREATER
10064: AND
10065: IFFALSE 10100
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10067: LD_VAR 0 8
10071: PPUSH
10072: LD_INT 24
10074: PUSH
10075: LD_INT 750
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PPUSH
10082: CALL_OW 72
10086: PPUSH
10087: LD_VAR 0 9
10091: PUSH
10092: LD_INT 1
10094: ARRAY
10095: PPUSH
10096: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10100: LD_VAR 0 8
10104: PPUSH
10105: LD_INT 3
10107: PUSH
10108: LD_INT 24
10110: PUSH
10111: LD_INT 750
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PPUSH
10122: CALL_OW 72
10126: PUSH
10127: LD_INT 0
10129: GREATER
10130: IFFALSE 10168
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10132: LD_VAR 0 8
10136: PPUSH
10137: LD_INT 3
10139: PUSH
10140: LD_INT 24
10142: PUSH
10143: LD_INT 750
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PPUSH
10154: CALL_OW 72
10158: PPUSH
10159: LD_VAR 0 2
10163: PPUSH
10164: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10168: LD_VAR 0 8
10172: PUSH
10173: LD_INT 0
10175: GREATER
10176: PUSH
10177: LD_VAR 0 9
10181: PUSH
10182: LD_INT 0
10184: EQUAL
10185: AND
10186: PUSH
10187: LD_VAR 0 3
10191: PUSH
10192: LD_INT 0
10194: GREATER
10195: AND
10196: IFFALSE 10243
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10198: LD_VAR 0 8
10202: PPUSH
10203: LD_VAR 0 3
10207: PUSH
10208: LD_INT 1
10210: ARRAY
10211: PPUSH
10212: LD_VAR 0 3
10216: PUSH
10217: LD_INT 2
10219: ARRAY
10220: PPUSH
10221: LD_VAR 0 3
10225: PUSH
10226: LD_INT 3
10228: ARRAY
10229: PPUSH
10230: LD_VAR 0 3
10234: PUSH
10235: LD_INT 4
10237: ARRAY
10238: PPUSH
10239: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10243: LD_VAR 0 2
10247: PPUSH
10248: LD_INT 22
10250: PUSH
10251: LD_VAR 0 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 2
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 34
10272: PUSH
10273: LD_INT 52
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: LD_INT 24
10285: PUSH
10286: LD_INT 750
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: PPUSH
10303: CALL_OW 70
10307: PUSH
10308: LD_INT 0
10310: GREATER
10311: IFFALSE 10513
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10313: LD_ADDR_VAR 0 5
10317: PUSH
10318: LD_VAR 0 2
10322: PPUSH
10323: LD_INT 22
10325: PUSH
10326: LD_VAR 0 1
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 21
10337: PUSH
10338: LD_INT 2
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 34
10347: PUSH
10348: LD_INT 52
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 3
10357: PUSH
10358: LD_INT 24
10360: PUSH
10361: LD_INT 750
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: PPUSH
10378: CALL_OW 70
10382: PUSH
10383: FOR_IN
10384: IFFALSE 10511
// begin mechTmp = UnitsInside ( i ) ;
10386: LD_ADDR_VAR 0 6
10390: PUSH
10391: LD_VAR 0 5
10395: PPUSH
10396: CALL_OW 313
10400: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10401: LD_VAR 0 6
10405: PPUSH
10406: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10410: LD_VAR 0 6
10414: PPUSH
10415: LD_VAR 0 7
10419: PPUSH
10420: CALL_OW 189
// wait ( 0 0$2 ) ;
10424: LD_INT 70
10426: PPUSH
10427: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10431: LD_VAR 0 6
10435: PPUSH
10436: LD_VAR 0 2
10440: PPUSH
10441: LD_INT 22
10443: PUSH
10444: LD_VAR 0 1
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 21
10455: PUSH
10456: LD_INT 2
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: LD_INT 34
10465: PUSH
10466: LD_INT 52
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 24
10475: PUSH
10476: LD_INT 1000
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 58
10485: PUSH
10486: EMPTY
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 70
10500: PUSH
10501: LD_INT 1
10503: ARRAY
10504: PPUSH
10505: CALL_OW 180
// end ;
10509: GO 10383
10511: POP
10512: POP
// end ; end ;
10513: LD_VAR 0 4
10517: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10518: LD_INT 0
10520: PPUSH
10521: PPUSH
10522: PPUSH
10523: PPUSH
10524: PPUSH
10525: PPUSH
10526: PPUSH
10527: PPUSH
10528: PPUSH
10529: PPUSH
10530: PPUSH
// for i = 1 to medicCount do
10531: LD_ADDR_VAR 0 14
10535: PUSH
10536: DOUBLE
10537: LD_INT 1
10539: DEC
10540: ST_TO_ADDR
10541: LD_VAR 0 7
10545: PUSH
10546: FOR_TO
10547: IFFALSE 10629
// begin uc_side = side ;
10549: LD_ADDR_OWVAR 20
10553: PUSH
10554: LD_VAR 0 1
10558: ST_TO_ADDR
// uc_nation = nation ;
10559: LD_ADDR_OWVAR 21
10563: PUSH
10564: LD_VAR 0 2
10568: ST_TO_ADDR
// hc_name =  ;
10569: LD_ADDR_OWVAR 26
10573: PUSH
10574: LD_STRING 
10576: ST_TO_ADDR
// hc_gallery =  ;
10577: LD_ADDR_OWVAR 33
10581: PUSH
10582: LD_STRING 
10584: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10585: LD_INT 0
10587: PPUSH
10588: LD_INT 4
10590: PPUSH
10591: LD_VAR 0 8
10595: PPUSH
10596: CALL_OW 380
// un = CreateHuman ;
10600: LD_ADDR_VAR 0 16
10604: PUSH
10605: CALL_OW 44
10609: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10610: LD_VAR 0 16
10614: PPUSH
10615: LD_VAR 0 9
10619: PPUSH
10620: LD_INT 0
10622: PPUSH
10623: CALL_OW 49
// end ;
10627: GO 10546
10629: POP
10630: POP
// for i = 1 to soldierCount do
10631: LD_ADDR_VAR 0 14
10635: PUSH
10636: DOUBLE
10637: LD_INT 1
10639: DEC
10640: ST_TO_ADDR
10641: LD_VAR 0 3
10645: PUSH
10646: FOR_TO
10647: IFFALSE 10729
// begin uc_side = side ;
10649: LD_ADDR_OWVAR 20
10653: PUSH
10654: LD_VAR 0 1
10658: ST_TO_ADDR
// uc_nation = nation ;
10659: LD_ADDR_OWVAR 21
10663: PUSH
10664: LD_VAR 0 2
10668: ST_TO_ADDR
// hc_name =  ;
10669: LD_ADDR_OWVAR 26
10673: PUSH
10674: LD_STRING 
10676: ST_TO_ADDR
// hc_gallery =  ;
10677: LD_ADDR_OWVAR 33
10681: PUSH
10682: LD_STRING 
10684: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10685: LD_INT 0
10687: PPUSH
10688: LD_INT 1
10690: PPUSH
10691: LD_VAR 0 8
10695: PPUSH
10696: CALL_OW 380
// un = CreateHuman ;
10700: LD_ADDR_VAR 0 16
10704: PUSH
10705: CALL_OW 44
10709: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10710: LD_VAR 0 16
10714: PPUSH
10715: LD_VAR 0 9
10719: PPUSH
10720: LD_INT 0
10722: PPUSH
10723: CALL_OW 49
// end ;
10727: GO 10646
10729: POP
10730: POP
// for i = 1 to sniperCount do
10731: LD_ADDR_VAR 0 14
10735: PUSH
10736: DOUBLE
10737: LD_INT 1
10739: DEC
10740: ST_TO_ADDR
10741: LD_VAR 0 4
10745: PUSH
10746: FOR_TO
10747: IFFALSE 10829
// begin uc_side = side ;
10749: LD_ADDR_OWVAR 20
10753: PUSH
10754: LD_VAR 0 1
10758: ST_TO_ADDR
// uc_nation = nation ;
10759: LD_ADDR_OWVAR 21
10763: PUSH
10764: LD_VAR 0 2
10768: ST_TO_ADDR
// hc_name =  ;
10769: LD_ADDR_OWVAR 26
10773: PUSH
10774: LD_STRING 
10776: ST_TO_ADDR
// hc_gallery =  ;
10777: LD_ADDR_OWVAR 33
10781: PUSH
10782: LD_STRING 
10784: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10785: LD_INT 0
10787: PPUSH
10788: LD_INT 5
10790: PPUSH
10791: LD_VAR 0 8
10795: PPUSH
10796: CALL_OW 380
// un = CreateHuman ;
10800: LD_ADDR_VAR 0 16
10804: PUSH
10805: CALL_OW 44
10809: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10810: LD_VAR 0 16
10814: PPUSH
10815: LD_VAR 0 9
10819: PPUSH
10820: LD_INT 0
10822: PPUSH
10823: CALL_OW 49
// end ;
10827: GO 10746
10829: POP
10830: POP
// for i = 1 to bazookCount do
10831: LD_ADDR_VAR 0 14
10835: PUSH
10836: DOUBLE
10837: LD_INT 1
10839: DEC
10840: ST_TO_ADDR
10841: LD_VAR 0 5
10845: PUSH
10846: FOR_TO
10847: IFFALSE 10929
// begin uc_side = side ;
10849: LD_ADDR_OWVAR 20
10853: PUSH
10854: LD_VAR 0 1
10858: ST_TO_ADDR
// uc_nation = nation ;
10859: LD_ADDR_OWVAR 21
10863: PUSH
10864: LD_VAR 0 2
10868: ST_TO_ADDR
// hc_name =  ;
10869: LD_ADDR_OWVAR 26
10873: PUSH
10874: LD_STRING 
10876: ST_TO_ADDR
// hc_gallery =  ;
10877: LD_ADDR_OWVAR 33
10881: PUSH
10882: LD_STRING 
10884: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10885: LD_INT 0
10887: PPUSH
10888: LD_INT 9
10890: PPUSH
10891: LD_VAR 0 8
10895: PPUSH
10896: CALL_OW 380
// un = CreateHuman ;
10900: LD_ADDR_VAR 0 16
10904: PUSH
10905: CALL_OW 44
10909: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10910: LD_VAR 0 16
10914: PPUSH
10915: LD_VAR 0 9
10919: PPUSH
10920: LD_INT 0
10922: PPUSH
10923: CALL_OW 49
// end ;
10927: GO 10846
10929: POP
10930: POP
// for i = 1 to mortalCount do
10931: LD_ADDR_VAR 0 14
10935: PUSH
10936: DOUBLE
10937: LD_INT 1
10939: DEC
10940: ST_TO_ADDR
10941: LD_VAR 0 6
10945: PUSH
10946: FOR_TO
10947: IFFALSE 11029
// begin uc_side = side ;
10949: LD_ADDR_OWVAR 20
10953: PUSH
10954: LD_VAR 0 1
10958: ST_TO_ADDR
// uc_nation = nation ;
10959: LD_ADDR_OWVAR 21
10963: PUSH
10964: LD_VAR 0 2
10968: ST_TO_ADDR
// hc_name =  ;
10969: LD_ADDR_OWVAR 26
10973: PUSH
10974: LD_STRING 
10976: ST_TO_ADDR
// hc_gallery =  ;
10977: LD_ADDR_OWVAR 33
10981: PUSH
10982: LD_STRING 
10984: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10985: LD_INT 0
10987: PPUSH
10988: LD_INT 8
10990: PPUSH
10991: LD_VAR 0 8
10995: PPUSH
10996: CALL_OW 380
// un = CreateHuman ;
11000: LD_ADDR_VAR 0 16
11004: PUSH
11005: CALL_OW 44
11009: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11010: LD_VAR 0 16
11014: PPUSH
11015: LD_VAR 0 9
11019: PPUSH
11020: LD_INT 0
11022: PPUSH
11023: CALL_OW 49
// end ;
11027: GO 10946
11029: POP
11030: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11031: LD_ADDR_VAR 0 19
11035: PUSH
11036: LD_INT 22
11038: PUSH
11039: LD_VAR 0 1
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 2
11050: PUSH
11051: LD_INT 25
11053: PUSH
11054: LD_INT 1
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 25
11063: PUSH
11064: LD_INT 5
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: LD_INT 25
11073: PUSH
11074: LD_INT 8
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 25
11083: PUSH
11084: LD_INT 9
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PPUSH
11102: CALL_OW 69
11106: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11107: LD_ADDR_VAR 0 18
11111: PUSH
11112: LD_INT 22
11114: PUSH
11115: LD_VAR 0 1
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: LD_INT 25
11126: PUSH
11127: LD_INT 4
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PPUSH
11138: CALL_OW 69
11142: ST_TO_ADDR
// for i in medic_list do
11143: LD_ADDR_VAR 0 14
11147: PUSH
11148: LD_VAR 0 18
11152: PUSH
11153: FOR_IN
11154: IFFALSE 11172
// ComMoveToArea ( i , healArea ) ;
11156: LD_VAR 0 14
11160: PPUSH
11161: LD_VAR 0 10
11165: PPUSH
11166: CALL_OW 113
11170: GO 11153
11172: POP
11173: POP
// if strategy = 1 then
11174: LD_VAR 0 12
11178: PUSH
11179: LD_INT 1
11181: EQUAL
11182: IFFALSE 11899
// begin repeat wait ( 0 0$3 ) ;
11184: LD_INT 105
11186: PPUSH
11187: CALL_OW 67
// for i in soldiersOK_list do
11191: LD_ADDR_VAR 0 14
11195: PUSH
11196: LD_VAR 0 19
11200: PUSH
11201: FOR_IN
11202: IFFALSE 11236
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11204: LD_VAR 0 14
11208: PPUSH
11209: LD_INT 80
11211: PPUSH
11212: LD_INT 109
11214: PPUSH
11215: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11219: LD_VAR 0 14
11223: PPUSH
11224: LD_INT 39
11226: PPUSH
11227: LD_INT 49
11229: PPUSH
11230: CALL_OW 174
// end ;
11234: GO 11201
11236: POP
11237: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11238: LD_INT 13
11240: PPUSH
11241: LD_INT 22
11243: PUSH
11244: LD_VAR 0 1
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PPUSH
11253: CALL_OW 70
11257: PUSH
11258: LD_INT 0
11260: GREATER
11261: IFFALSE 11184
// repeat wait ( 0 0$1 ) ;
11263: LD_INT 35
11265: PPUSH
11266: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11270: LD_ADDR_VAR 0 17
11274: PUSH
11275: LD_INT 22
11277: PUSH
11278: LD_VAR 0 1
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 1
11289: PUSH
11290: LD_INT 3
11292: PUSH
11293: LD_INT 24
11295: PUSH
11296: LD_INT 550
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 24
11309: PUSH
11310: LD_INT 250
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PPUSH
11326: CALL_OW 69
11330: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11331: LD_ADDR_VAR 0 19
11335: PUSH
11336: LD_INT 22
11338: PUSH
11339: LD_VAR 0 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 2
11350: PUSH
11351: LD_INT 25
11353: PUSH
11354: LD_INT 1
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 25
11363: PUSH
11364: LD_INT 5
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: LD_INT 25
11373: PUSH
11374: LD_INT 8
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 25
11383: PUSH
11384: LD_INT 9
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: PUSH
11398: LD_INT 24
11400: PUSH
11401: LD_INT 1000
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: LIST
11412: PPUSH
11413: CALL_OW 69
11417: ST_TO_ADDR
// if medicCount > 0 then
11418: LD_VAR 0 7
11422: PUSH
11423: LD_INT 0
11425: GREATER
11426: IFFALSE 11500
// begin if damageUnit_list > 0 then
11428: LD_VAR 0 17
11432: PUSH
11433: LD_INT 0
11435: GREATER
11436: IFFALSE 11500
// begin for i in damageUnit_list do
11438: LD_ADDR_VAR 0 14
11442: PUSH
11443: LD_VAR 0 17
11447: PUSH
11448: FOR_IN
11449: IFFALSE 11498
// begin ComMoveToArea ( i , healArea ) ;
11451: LD_VAR 0 14
11455: PPUSH
11456: LD_VAR 0 10
11460: PPUSH
11461: CALL_OW 113
// for j in medic_list do
11465: LD_ADDR_VAR 0 15
11469: PUSH
11470: LD_VAR 0 18
11474: PUSH
11475: FOR_IN
11476: IFFALSE 11494
// AddComHeal ( j , i ) ;
11478: LD_VAR 0 15
11482: PPUSH
11483: LD_VAR 0 14
11487: PPUSH
11488: CALL_OW 188
11492: GO 11475
11494: POP
11495: POP
// end ;
11496: GO 11448
11498: POP
11499: POP
// end ; end ; for i in soldiersOK_list do
11500: LD_ADDR_VAR 0 14
11504: PUSH
11505: LD_VAR 0 19
11509: PUSH
11510: FOR_IN
11511: IFFALSE 11693
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11513: LD_ADDR_VAR 0 22
11517: PUSH
11518: LD_INT 22
11520: PUSH
11521: LD_VAR 0 11
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 69
11534: PUSH
11535: LD_EXP 45
11539: DIFF
11540: PPUSH
11541: LD_VAR 0 14
11545: PPUSH
11546: CALL_OW 74
11550: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11551: LD_ADDR_VAR 0 23
11555: PUSH
11556: LD_INT 22
11558: PUSH
11559: LD_VAR 0 11
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 2
11570: PUSH
11571: LD_INT 59
11573: PUSH
11574: EMPTY
11575: LIST
11576: PUSH
11577: LD_INT 21
11579: PUSH
11580: LD_INT 1
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 21
11589: PUSH
11590: LD_INT 2
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: EMPTY
11608: LIST
11609: PPUSH
11610: CALL_OW 69
11614: PPUSH
11615: LD_VAR 0 14
11619: PPUSH
11620: CALL_OW 74
11624: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11625: LD_VAR 0 14
11629: PPUSH
11630: LD_VAR 0 22
11634: PPUSH
11635: CALL_OW 296
11639: PUSH
11640: LD_INT 8
11642: PLUS
11643: PUSH
11644: LD_VAR 0 14
11648: PPUSH
11649: LD_VAR 0 23
11653: PPUSH
11654: CALL_OW 296
11658: LESS
11659: IFFALSE 11677
// begin ComAttackUnit ( i , target1 ) ;
11661: LD_VAR 0 14
11665: PPUSH
11666: LD_VAR 0 22
11670: PPUSH
11671: CALL_OW 115
// end else
11675: GO 11691
// begin ComAttackUnit ( i , target2 ) ;
11677: LD_VAR 0 14
11681: PPUSH
11682: LD_VAR 0 23
11686: PPUSH
11687: CALL_OW 115
// end ; end ;
11691: GO 11510
11693: POP
11694: POP
// for i in soldiersOK_list do
11695: LD_ADDR_VAR 0 14
11699: PUSH
11700: LD_VAR 0 19
11704: PUSH
11705: FOR_IN
11706: IFFALSE 11888
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11708: LD_ADDR_VAR 0 22
11712: PUSH
11713: LD_INT 22
11715: PUSH
11716: LD_VAR 0 11
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 69
11729: PUSH
11730: LD_EXP 45
11734: DIFF
11735: PPUSH
11736: LD_VAR 0 14
11740: PPUSH
11741: CALL_OW 74
11745: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11746: LD_ADDR_VAR 0 23
11750: PUSH
11751: LD_INT 22
11753: PUSH
11754: LD_VAR 0 11
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 2
11765: PUSH
11766: LD_INT 59
11768: PUSH
11769: EMPTY
11770: LIST
11771: PUSH
11772: LD_INT 21
11774: PUSH
11775: LD_INT 1
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: LD_INT 21
11784: PUSH
11785: LD_INT 2
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: EMPTY
11803: LIST
11804: PPUSH
11805: CALL_OW 69
11809: PPUSH
11810: LD_VAR 0 14
11814: PPUSH
11815: CALL_OW 74
11819: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11820: LD_VAR 0 14
11824: PPUSH
11825: LD_VAR 0 22
11829: PPUSH
11830: CALL_OW 296
11834: PUSH
11835: LD_INT 8
11837: PLUS
11838: PUSH
11839: LD_VAR 0 14
11843: PPUSH
11844: LD_VAR 0 23
11848: PPUSH
11849: CALL_OW 296
11853: LESS
11854: IFFALSE 11872
// begin ComAttackUnit ( i , target1 ) ;
11856: LD_VAR 0 14
11860: PPUSH
11861: LD_VAR 0 22
11865: PPUSH
11866: CALL_OW 115
// end else
11870: GO 11886
// begin ComAttackUnit ( i , target2 ) ;
11872: LD_VAR 0 14
11876: PPUSH
11877: LD_VAR 0 23
11881: PPUSH
11882: CALL_OW 115
// end ; end ;
11886: GO 11705
11888: POP
11889: POP
// until soldiersOK_list = [ ] ;
11890: LD_VAR 0 19
11894: PUSH
11895: EMPTY
11896: EQUAL
11897: IFFALSE 11263
// end ; if strategy = 2 then
11899: LD_VAR 0 12
11903: PUSH
11904: LD_INT 2
11906: EQUAL
11907: IFFALSE 12612
// begin repeat wait ( 0 0$1 ) ;
11909: LD_INT 35
11911: PPUSH
11912: CALL_OW 67
// for i in soldiersOK_list do
11916: LD_ADDR_VAR 0 14
11920: PUSH
11921: LD_VAR 0 19
11925: PUSH
11926: FOR_IN
11927: IFFALSE 11961
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11929: LD_VAR 0 14
11933: PPUSH
11934: LD_INT 117
11936: PPUSH
11937: LD_INT 97
11939: PPUSH
11940: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11944: LD_VAR 0 14
11948: PPUSH
11949: LD_INT 94
11951: PPUSH
11952: LD_INT 50
11954: PPUSH
11955: CALL_OW 174
// end ;
11959: GO 11926
11961: POP
11962: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11963: LD_INT 14
11965: PPUSH
11966: LD_INT 22
11968: PUSH
11969: LD_VAR 0 1
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PPUSH
11978: CALL_OW 70
11982: PUSH
11983: LD_INT 0
11985: GREATER
11986: IFFALSE 11909
// repeat wait ( 0 0$3 ) ;
11988: LD_INT 105
11990: PPUSH
11991: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11995: LD_ADDR_VAR 0 17
11999: PUSH
12000: LD_INT 22
12002: PUSH
12003: LD_VAR 0 1
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: LD_INT 3
12017: PUSH
12018: LD_INT 24
12020: PUSH
12021: LD_INT 550
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 24
12034: PUSH
12035: LD_INT 250
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PPUSH
12051: CALL_OW 69
12055: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12056: LD_ADDR_VAR 0 19
12060: PUSH
12061: LD_INT 22
12063: PUSH
12064: LD_VAR 0 1
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 2
12075: PUSH
12076: LD_INT 25
12078: PUSH
12079: LD_INT 1
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 25
12088: PUSH
12089: LD_INT 5
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 25
12098: PUSH
12099: LD_INT 8
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 25
12108: PUSH
12109: LD_INT 9
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 24
12125: PUSH
12126: LD_INT 1000
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: PPUSH
12138: CALL_OW 69
12142: ST_TO_ADDR
// if medicCount > 0 then
12143: LD_VAR 0 7
12147: PUSH
12148: LD_INT 0
12150: GREATER
12151: IFFALSE 12225
// begin if damageUnit_list > 0 then
12153: LD_VAR 0 17
12157: PUSH
12158: LD_INT 0
12160: GREATER
12161: IFFALSE 12225
// begin for i in damageUnit_list do
12163: LD_ADDR_VAR 0 14
12167: PUSH
12168: LD_VAR 0 17
12172: PUSH
12173: FOR_IN
12174: IFFALSE 12223
// begin ComMoveToArea ( i , healArea ) ;
12176: LD_VAR 0 14
12180: PPUSH
12181: LD_VAR 0 10
12185: PPUSH
12186: CALL_OW 113
// for j in medic_list do
12190: LD_ADDR_VAR 0 15
12194: PUSH
12195: LD_VAR 0 18
12199: PUSH
12200: FOR_IN
12201: IFFALSE 12219
// AddComHeal ( j , i ) ;
12203: LD_VAR 0 15
12207: PPUSH
12208: LD_VAR 0 14
12212: PPUSH
12213: CALL_OW 188
12217: GO 12200
12219: POP
12220: POP
// end ;
12221: GO 12173
12223: POP
12224: POP
// end ; end ; for i in soldiersOK_list do
12225: LD_ADDR_VAR 0 14
12229: PUSH
12230: LD_VAR 0 19
12234: PUSH
12235: FOR_IN
12236: IFFALSE 12412
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12238: LD_ADDR_VAR 0 22
12242: PUSH
12243: LD_INT 22
12245: PUSH
12246: LD_VAR 0 11
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: PPUSH
12260: LD_VAR 0 14
12264: PPUSH
12265: CALL_OW 74
12269: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12270: LD_ADDR_VAR 0 23
12274: PUSH
12275: LD_INT 22
12277: PUSH
12278: LD_VAR 0 11
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: LD_INT 59
12292: PUSH
12293: EMPTY
12294: LIST
12295: PUSH
12296: LD_INT 21
12298: PUSH
12299: LD_INT 1
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PUSH
12306: LD_INT 21
12308: PUSH
12309: LD_INT 2
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: EMPTY
12327: LIST
12328: PPUSH
12329: CALL_OW 69
12333: PPUSH
12334: LD_VAR 0 14
12338: PPUSH
12339: CALL_OW 74
12343: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12344: LD_VAR 0 14
12348: PPUSH
12349: LD_VAR 0 22
12353: PPUSH
12354: CALL_OW 296
12358: PUSH
12359: LD_INT 8
12361: PLUS
12362: PUSH
12363: LD_VAR 0 14
12367: PPUSH
12368: LD_VAR 0 23
12372: PPUSH
12373: CALL_OW 296
12377: LESS
12378: IFFALSE 12396
// begin ComAttackUnit ( i , target1 ) ;
12380: LD_VAR 0 14
12384: PPUSH
12385: LD_VAR 0 22
12389: PPUSH
12390: CALL_OW 115
// end else
12394: GO 12410
// begin ComAttackUnit ( i , target2 ) ;
12396: LD_VAR 0 14
12400: PPUSH
12401: LD_VAR 0 23
12405: PPUSH
12406: CALL_OW 115
// end ; end ;
12410: GO 12235
12412: POP
12413: POP
// for i in soldiersOK_list do
12414: LD_ADDR_VAR 0 14
12418: PUSH
12419: LD_VAR 0 19
12423: PUSH
12424: FOR_IN
12425: IFFALSE 12601
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12427: LD_ADDR_VAR 0 22
12431: PUSH
12432: LD_INT 22
12434: PUSH
12435: LD_VAR 0 11
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PPUSH
12444: CALL_OW 69
12448: PPUSH
12449: LD_VAR 0 14
12453: PPUSH
12454: CALL_OW 74
12458: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12459: LD_ADDR_VAR 0 23
12463: PUSH
12464: LD_INT 22
12466: PUSH
12467: LD_VAR 0 11
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 2
12478: PUSH
12479: LD_INT 59
12481: PUSH
12482: EMPTY
12483: LIST
12484: PUSH
12485: LD_INT 21
12487: PUSH
12488: LD_INT 1
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 21
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PUSH
12515: EMPTY
12516: LIST
12517: PPUSH
12518: CALL_OW 69
12522: PPUSH
12523: LD_VAR 0 14
12527: PPUSH
12528: CALL_OW 74
12532: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12533: LD_VAR 0 14
12537: PPUSH
12538: LD_VAR 0 22
12542: PPUSH
12543: CALL_OW 296
12547: PUSH
12548: LD_INT 8
12550: PLUS
12551: PUSH
12552: LD_VAR 0 14
12556: PPUSH
12557: LD_VAR 0 23
12561: PPUSH
12562: CALL_OW 296
12566: LESS
12567: IFFALSE 12585
// begin ComAttackUnit ( i , target1 ) ;
12569: LD_VAR 0 14
12573: PPUSH
12574: LD_VAR 0 22
12578: PPUSH
12579: CALL_OW 115
// end else
12583: GO 12599
// begin ComAttackUnit ( i , target2 ) ;
12585: LD_VAR 0 14
12589: PPUSH
12590: LD_VAR 0 23
12594: PPUSH
12595: CALL_OW 115
// end ; end ;
12599: GO 12424
12601: POP
12602: POP
// until soldiersOK_list = [ ] ;
12603: LD_VAR 0 19
12607: PUSH
12608: EMPTY
12609: EQUAL
12610: IFFALSE 11988
// end ; end ; end_of_file
12612: LD_VAR 0 13
12616: RET
// every 0 0$01 do
12617: GO 12619
12619: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12620: LD_INT 22
12622: PUSH
12623: LD_INT 1
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 2
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PPUSH
12644: CALL_OW 69
12648: PUSH
12649: LD_INT 0
12651: EQUAL
12652: IFFALSE 12666
// SetClass ( JMM , 2 ) ;
12654: LD_EXP 1
12658: PPUSH
12659: LD_INT 2
12661: PPUSH
12662: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12666: LD_STRING M1
12668: PPUSH
12669: CALL_OW 337
// case difficulty of 1 :
12673: LD_OWVAR 67
12677: PUSH
12678: LD_INT 1
12680: DOUBLE
12681: EQUAL
12682: IFTRUE 12686
12684: GO 12696
12686: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12687: LD_STRING M1-1
12689: PPUSH
12690: CALL_OW 337
12694: GO 12733
12696: LD_INT 2
12698: DOUBLE
12699: EQUAL
12700: IFTRUE 12704
12702: GO 12714
12704: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12705: LD_STRING M1-2
12707: PPUSH
12708: CALL_OW 337
12712: GO 12733
12714: LD_INT 3
12716: DOUBLE
12717: EQUAL
12718: IFTRUE 12722
12720: GO 12732
12722: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12723: LD_STRING M1-3
12725: PPUSH
12726: CALL_OW 337
12730: GO 12733
12732: POP
// ChangeMissionObjectives ( M1cont ) ;
12733: LD_STRING M1cont
12735: PPUSH
12736: CALL_OW 337
// SaveForQuickRestart ;
12740: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12744: LD_INT 525
12746: PPUSH
12747: LD_INT 700
12749: PPUSH
12750: CALL_OW 12
12754: PPUSH
12755: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12759: LD_INT 5
12761: PPUSH
12762: LD_INT 82
12764: PPUSH
12765: LD_INT 38
12767: PPUSH
12768: LD_INT 10
12770: PPUSH
12771: LD_INT 1
12773: PPUSH
12774: CALL_OW 56
// wait ( 0 0$14 ) ;
12778: LD_INT 490
12780: PPUSH
12781: CALL_OW 67
// firstCrateSpawn := true ;
12785: LD_ADDR_EXP 41
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// end ;
12793: END
// every 0 0$02 trigger firstCrateSpawn do
12794: LD_EXP 41
12798: IFFALSE 13161
12800: GO 12802
12802: DISABLE
// begin if IsOk ( Lisa ) then
12803: LD_EXP 2
12807: PPUSH
12808: CALL_OW 302
12812: IFFALSE 12828
// Say ( Lisa , DR0-Lisa-1 ) else
12814: LD_EXP 2
12818: PPUSH
12819: LD_STRING DR0-Lisa-1
12821: PPUSH
12822: CALL_OW 88
12826: GO 12974
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12828: LD_INT 22
12830: PUSH
12831: LD_INT 1
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 21
12840: PUSH
12841: LD_INT 1
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: LD_INT 26
12850: PUSH
12851: LD_INT 1
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 2
12860: PUSH
12861: LD_INT 25
12863: PUSH
12864: LD_INT 1
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: LD_INT 25
12873: PUSH
12874: LD_INT 2
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 25
12883: PUSH
12884: LD_INT 3
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 25
12893: PUSH
12894: LD_INT 4
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: PPUSH
12914: CALL_OW 69
12918: PUSH
12919: LD_EXP 1
12923: PUSH
12924: LD_EXP 8
12928: PUSH
12929: LD_EXP 5
12933: PUSH
12934: LD_EXP 6
12938: PUSH
12939: LD_EXP 7
12943: PUSH
12944: LD_EXP 4
12948: PUSH
12949: LD_EXP 3
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: DIFF
12963: PPUSH
12964: LD_STRING DR0-Sol1-1
12966: PPUSH
12967: LD_STRING DR0-Sol1-1
12969: PPUSH
12970: CALL 6010 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12974: LD_INT 22
12976: PUSH
12977: LD_INT 1
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 21
12986: PUSH
12987: LD_INT 1
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PUSH
12994: LD_INT 26
12996: PUSH
12997: LD_INT 1
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PUSH
13004: LD_INT 2
13006: PUSH
13007: LD_INT 25
13009: PUSH
13010: LD_INT 1
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: PUSH
13017: LD_INT 25
13019: PUSH
13020: LD_INT 2
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 25
13029: PUSH
13030: LD_INT 3
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 25
13039: PUSH
13040: LD_INT 4
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: PPUSH
13060: CALL_OW 69
13064: PUSH
13065: LD_EXP 1
13069: PUSH
13070: LD_EXP 8
13074: PUSH
13075: LD_EXP 5
13079: PUSH
13080: LD_EXP 2
13084: PUSH
13085: LD_EXP 6
13089: PUSH
13090: LD_EXP 7
13094: PUSH
13095: LD_EXP 4
13099: PUSH
13100: LD_EXP 3
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: DIFF
13115: PPUSH
13116: LD_STRING DR0-Sol2-1
13118: PPUSH
13119: LD_STRING DR0-Sol2-1
13121: PPUSH
13122: CALL 6010 0 3
// if IsOk ( Cyrus ) then
13126: LD_EXP 4
13130: PPUSH
13131: CALL_OW 302
13135: IFFALSE 13149
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13137: LD_EXP 4
13141: PPUSH
13142: LD_STRING DR0-Cyrus-1
13144: PPUSH
13145: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13149: LD_EXP 1
13153: PPUSH
13154: LD_STRING DR0-JMM-1
13156: PPUSH
13157: CALL_OW 88
// end ;
13161: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13162: LD_EXP 5
13166: PPUSH
13167: CALL_OW 302
13171: PUSH
13172: LD_INT 22
13174: PUSH
13175: LD_INT 1
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 25
13184: PUSH
13185: LD_INT 16
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PPUSH
13196: CALL_OW 69
13200: PUSH
13201: LD_INT 0
13203: GREATER
13204: AND
13205: PUSH
13206: LD_INT 1
13208: PPUSH
13209: CALL_OW 463
13213: NOT
13214: AND
13215: IFFALSE 13493
13217: GO 13219
13219: DISABLE
// begin DialogueOn ;
13220: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13224: LD_EXP 5
13228: PPUSH
13229: LD_STRING D10-Frank-1
13231: PPUSH
13232: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13236: LD_INT 22
13238: PUSH
13239: LD_INT 1
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: LD_INT 21
13248: PUSH
13249: LD_INT 1
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 2
13258: PUSH
13259: LD_INT 25
13261: PUSH
13262: LD_INT 1
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PUSH
13269: LD_INT 25
13271: PUSH
13272: LD_INT 2
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 25
13281: PUSH
13282: LD_INT 3
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 25
13291: PUSH
13292: LD_INT 4
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: PPUSH
13311: CALL_OW 69
13315: PUSH
13316: LD_EXP 1
13320: PUSH
13321: LD_EXP 5
13325: PUSH
13326: LD_EXP 2
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: LIST
13335: DIFF
13336: PPUSH
13337: LD_STRING D10-Sol1-1
13339: PPUSH
13340: LD_STRING D10-FSol1-1
13342: PPUSH
13343: CALL 6010 0 3
// Say ( Frank , D10-Frank-2 ) ;
13347: LD_EXP 5
13351: PPUSH
13352: LD_STRING D10-Frank-2
13354: PPUSH
13355: CALL_OW 88
// if IsOK ( Lisa ) then
13359: LD_EXP 2
13363: PPUSH
13364: CALL_OW 302
13368: IFFALSE 13384
// begin Say ( Lisa , D10-Lisa-2 ) ;
13370: LD_EXP 2
13374: PPUSH
13375: LD_STRING D10-Lisa-2
13377: PPUSH
13378: CALL_OW 88
// end else
13382: GO 13489
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13384: LD_INT 22
13386: PUSH
13387: LD_INT 1
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 21
13396: PUSH
13397: LD_INT 1
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: LD_INT 25
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 25
13419: PUSH
13420: LD_INT 2
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 25
13429: PUSH
13430: LD_INT 3
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 25
13439: PUSH
13440: LD_INT 4
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 69
13463: PUSH
13464: LD_EXP 1
13468: PUSH
13469: LD_EXP 5
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: DIFF
13478: PPUSH
13479: LD_STRING D10-Sol1-2
13481: PPUSH
13482: LD_STRING D10-FSol1-2
13484: PPUSH
13485: CALL 6010 0 3
// end ; DialogueOff ;
13489: CALL_OW 7
// end ;
13493: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13494: LD_INT 1
13496: PPUSH
13497: CALL_OW 463
13501: NOT
13502: IFFALSE 13765
13504: GO 13506
13506: DISABLE
// begin HarrisonSupport ;
13507: CALL 2502 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13511: LD_EXP 17
13515: PPUSH
13516: CALL_OW 310
13520: PPUSH
13521: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13525: LD_EXP 17
13529: PPUSH
13530: LD_STRING DEng-Eng1-1
13532: PPUSH
13533: CALL_OW 88
// wait ( 1 1$0 ) ;
13537: LD_INT 2100
13539: PPUSH
13540: CALL_OW 67
// DialogueOn ;
13544: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13548: LD_EXP 14
13552: PPUSH
13553: LD_STRING DRem-Har-1
13555: PPUSH
13556: CALL_OW 94
// if contactWithRussian = 1 then
13560: LD_EXP 22
13564: PUSH
13565: LD_INT 1
13567: EQUAL
13568: IFFALSE 13584
// begin Say ( JMM , DRem-JMM-1 ) ;
13570: LD_EXP 1
13574: PPUSH
13575: LD_STRING DRem-JMM-1
13577: PPUSH
13578: CALL_OW 88
// end else
13582: GO 13596
// begin Say ( JMM , DRem-JMM-1a ) ;
13584: LD_EXP 1
13588: PPUSH
13589: LD_STRING DRem-JMM-1a
13591: PPUSH
13592: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13596: LD_EXP 14
13600: PPUSH
13601: LD_STRING DRem-Har-2
13603: PPUSH
13604: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13608: LD_STRING DenisInDelta
13610: PPUSH
13611: LD_INT 0
13613: PPUSH
13614: CALL_OW 30
13618: PUSH
13619: LD_INT 1
13621: EQUAL
13622: IFFALSE 13638
// begin Say ( JMM , DRem-JMM-2 ) ;
13624: LD_EXP 1
13628: PPUSH
13629: LD_STRING DRem-JMM-2
13631: PPUSH
13632: CALL_OW 88
// end else
13636: GO 13650
// begin Say ( JMM , DRem-JMM-2a ) ;
13638: LD_EXP 1
13642: PPUSH
13643: LD_STRING DRem-JMM-2a
13645: PPUSH
13646: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13650: LD_EXP 14
13654: PPUSH
13655: LD_STRING DRem-Har-3
13657: PPUSH
13658: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13662: LD_EXP 1
13666: PPUSH
13667: LD_STRING DRem-JMM-3
13669: PPUSH
13670: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13674: LD_EXP 14
13678: PPUSH
13679: LD_STRING DRem-Har-4
13681: PPUSH
13682: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13686: LD_STRING DenisInDelta
13688: PPUSH
13689: LD_INT 0
13691: PPUSH
13692: CALL_OW 30
13696: PUSH
13697: LD_INT 1
13699: EQUAL
13700: IFFALSE 13728
// begin Say ( JMM , DRem-JMM-4 ) ;
13702: LD_EXP 1
13706: PPUSH
13707: LD_STRING DRem-JMM-4
13709: PPUSH
13710: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13714: LD_EXP 14
13718: PPUSH
13719: LD_STRING DRem-Har-5
13721: PPUSH
13722: CALL_OW 94
// end else
13726: GO 13761
// begin SetRestrict ( 36 , 1 , true ) ;
13728: LD_INT 36
13730: PPUSH
13731: LD_INT 1
13733: PPUSH
13734: LD_INT 1
13736: PPUSH
13737: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13741: LD_INT 15
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: LD_INT 1
13749: PPUSH
13750: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13754: LD_STRING MR
13756: PPUSH
13757: CALL_OW 337
// end ; DialogueOff ;
13761: CALL_OW 7
// end ;
13765: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do var tmp ;
13766: LD_STRING DenisInDelta
13768: PPUSH
13769: LD_INT 0
13771: PPUSH
13772: CALL_OW 30
13776: PUSH
13777: LD_INT 1
13779: EQUAL
13780: PUSH
13781: LD_INT 1
13783: PPUSH
13784: CALL_OW 463
13788: NOT
13789: AND
13790: IFFALSE 14023
13792: GO 13794
13794: DISABLE
13795: LD_INT 0
13797: PPUSH
// begin PrepareDenis ;
13798: CALL 2224 0 0
// CenterNowOnUnits ( Denis ) ;
13802: LD_EXP 9
13806: PPUSH
13807: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13811: LD_ADDR_VAR 0 1
13815: PUSH
13816: LD_INT 22
13818: PUSH
13819: LD_INT 1
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PPUSH
13826: CALL_OW 69
13830: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13831: LD_EXP 9
13835: PPUSH
13836: LD_VAR 0 1
13840: PPUSH
13841: LD_EXP 9
13845: PPUSH
13846: CALL_OW 74
13850: PPUSH
13851: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13855: LD_INT 35
13857: PPUSH
13858: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13862: LD_INT 22
13864: PUSH
13865: LD_INT 1
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 91
13874: PUSH
13875: LD_EXP 9
13879: PUSH
13880: LD_INT 10
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PPUSH
13892: CALL_OW 69
13896: IFFALSE 13855
// SetSide ( Denis , 1 ) ;
13898: LD_EXP 9
13902: PPUSH
13903: LD_INT 1
13905: PPUSH
13906: CALL_OW 235
// DialogueOn ;
13910: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13914: LD_EXP 9
13918: PPUSH
13919: LD_STRING DDen-Den-1
13921: PPUSH
13922: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13926: LD_EXP 1
13930: PPUSH
13931: LD_STRING DDen-JMM-1
13933: PPUSH
13934: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13938: LD_EXP 9
13942: PPUSH
13943: LD_STRING DDen-Den-2
13945: PPUSH
13946: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13950: LD_EXP 1
13954: PPUSH
13955: LD_STRING DDen-JMM-2
13957: PPUSH
13958: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13962: LD_EXP 9
13966: PPUSH
13967: LD_STRING DDen-Den-3
13969: PPUSH
13970: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13974: LD_EXP 1
13978: PPUSH
13979: LD_STRING DDen-JMM-3
13981: PPUSH
13982: CALL_OW 88
// DialogueOff ;
13986: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13990: LD_INT 36
13992: PPUSH
13993: LD_INT 1
13995: PPUSH
13996: LD_INT 1
13998: PPUSH
13999: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
14003: LD_INT 15
14005: PPUSH
14006: LD_INT 1
14008: PPUSH
14009: LD_INT 1
14011: PPUSH
14012: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
14016: LD_STRING MR
14018: PPUSH
14019: CALL_OW 337
// end ;
14023: PPOPN 1
14025: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14026: CALL 14081 0 0
14030: PUSH
14031: LD_EXP 9
14035: PPUSH
14036: CALL_OW 302
14040: AND
14041: PUSH
14042: LD_INT 1
14044: PPUSH
14045: CALL_OW 463
14049: NOT
14050: AND
14051: IFFALSE 14080
14053: GO 14055
14055: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14056: LD_EXP 9
14060: PPUSH
14061: LD_STRING DR1-Den-1
14063: PPUSH
14064: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14068: LD_EXP 1
14072: PPUSH
14073: LD_STRING DR1-JMM-1
14075: PPUSH
14076: CALL_OW 88
// end ;
14080: END
// function CheckOptoLab ; var i ; begin
14081: LD_INT 0
14083: PPUSH
14084: PPUSH
// result = false ;
14085: LD_ADDR_VAR 0 1
14089: PUSH
14090: LD_INT 0
14092: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14093: LD_ADDR_VAR 0 2
14097: PUSH
14098: LD_INT 22
14100: PUSH
14101: LD_INT 1
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: LD_INT 2
14110: PUSH
14111: LD_INT 30
14113: PUSH
14114: LD_INT 7
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 30
14123: PUSH
14124: LD_INT 8
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 69
14144: PUSH
14145: FOR_IN
14146: IFFALSE 14198
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14148: LD_VAR 0 2
14152: PPUSH
14153: LD_INT 1
14155: PPUSH
14156: CALL_OW 268
14160: PUSH
14161: LD_INT 15
14163: EQUAL
14164: PUSH
14165: LD_VAR 0 2
14169: PPUSH
14170: LD_INT 2
14172: PPUSH
14173: CALL_OW 268
14177: PUSH
14178: LD_INT 15
14180: EQUAL
14181: OR
14182: IFFALSE 14194
// begin result = true ;
14184: LD_ADDR_VAR 0 1
14188: PUSH
14189: LD_INT 1
14191: ST_TO_ADDR
// break ;
14192: GO 14198
// end ; break ;
14194: GO 14198
// end ;
14196: GO 14145
14198: POP
14199: POP
// end ;
14200: LD_VAR 0 1
14204: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14205: LD_INT 15
14207: PPUSH
14208: LD_INT 1
14210: PPUSH
14211: CALL_OW 321
14215: PUSH
14216: LD_INT 2
14218: EQUAL
14219: PUSH
14220: LD_EXP 9
14224: PPUSH
14225: CALL_OW 302
14229: AND
14230: PUSH
14231: LD_INT 1
14233: PPUSH
14234: CALL_OW 463
14238: NOT
14239: AND
14240: IFFALSE 14472
14242: GO 14244
14244: DISABLE
// begin DialogueOn ;
14245: CALL_OW 6
// if IsOK ( Denis ) then
14249: LD_EXP 9
14253: PPUSH
14254: CALL_OW 302
14258: IFFALSE 14274
// begin Say ( Denis , DR2-Den-1 ) ;
14260: LD_EXP 9
14264: PPUSH
14265: LD_STRING DR2-Den-1
14267: PPUSH
14268: CALL_OW 88
// end else
14272: GO 14333
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14274: LD_INT 22
14276: PUSH
14277: LD_INT 1
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 21
14286: PUSH
14287: LD_INT 1
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 25
14296: PUSH
14297: LD_INT 4
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: PPUSH
14309: CALL_OW 69
14313: PUSH
14314: LD_EXP 1
14318: PUSH
14319: EMPTY
14320: LIST
14321: DIFF
14322: PPUSH
14323: LD_STRING DR2-Sci1-1
14325: PPUSH
14326: LD_STRING DR2-FSci1-1
14328: PPUSH
14329: CALL 6010 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14333: LD_EXP 1
14337: PPUSH
14338: LD_STRING DR2-JMM-1
14340: PPUSH
14341: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14345: LD_INT 22
14347: PUSH
14348: LD_INT 1
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 21
14357: PUSH
14358: LD_INT 1
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 2
14367: PUSH
14368: LD_INT 25
14370: PUSH
14371: LD_INT 1
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: LD_INT 25
14380: PUSH
14381: LD_INT 2
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 25
14390: PUSH
14391: LD_INT 3
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 25
14400: PUSH
14401: LD_INT 4
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: PPUSH
14420: CALL_OW 69
14424: PUSH
14425: LD_EXP 1
14429: PUSH
14430: LD_EXP 9
14434: PUSH
14435: LD_EXP 8
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: DIFF
14445: PPUSH
14446: LD_STRING DR2-Sol1-1
14448: PPUSH
14449: LD_STRING DR2-Sol1-11
14451: PPUSH
14452: CALL 6010 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14456: LD_EXP 1
14460: PPUSH
14461: LD_STRING DR2-JMM-2
14463: PPUSH
14464: CALL_OW 88
// DialogueOff ;
14468: CALL_OW 7
// end ;
14472: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14473: LD_INT 22
14475: PUSH
14476: LD_INT 1
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 30
14485: PUSH
14486: LD_INT 36
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PPUSH
14497: CALL_OW 69
14501: PUSH
14502: LD_INT 0
14504: EQUAL
14505: PUSH
14506: LD_INT 22
14508: PUSH
14509: LD_INT 1
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 21
14518: PUSH
14519: LD_INT 2
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 33
14528: PUSH
14529: LD_INT 2
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 69
14545: PUSH
14546: LD_INT 0
14548: GREATER
14549: AND
14550: PUSH
14551: LD_EXP 23
14555: PUSH
14556: LD_INT 0
14558: EQUAL
14559: AND
14560: PUSH
14561: LD_INT 1
14563: PPUSH
14564: CALL_OW 463
14568: NOT
14569: AND
14570: IFFALSE 14696
14572: GO 14574
14574: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14575: LD_INT 22
14577: PUSH
14578: LD_INT 1
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 21
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 25
14597: PUSH
14598: LD_INT 3
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: LIST
14609: PPUSH
14610: CALL_OW 69
14614: PUSH
14615: LD_EXP 1
14619: PUSH
14620: LD_EXP 6
14624: PUSH
14625: LD_EXP 7
14629: PUSH
14630: LD_EXP 9
14634: PUSH
14635: LD_EXP 15
14639: PUSH
14640: LD_EXP 3
14644: PUSH
14645: LD_EXP 4
14649: PUSH
14650: LD_EXP 2
14654: PUSH
14655: LD_EXP 5
14659: PUSH
14660: LD_EXP 8
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: DIFF
14677: PPUSH
14678: LD_STRING D3a-Mech1-1
14680: PPUSH
14681: LD_STRING D3a-Mech1-1
14683: PPUSH
14684: CALL 6010 0 3
// firstTower = 2 ;
14688: LD_ADDR_EXP 23
14692: PUSH
14693: LD_INT 2
14695: ST_TO_ADDR
// end ;
14696: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14697: LD_INT 22
14699: PUSH
14700: LD_INT 3
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 21
14709: PUSH
14710: LD_INT 3
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PPUSH
14721: CALL_OW 69
14725: PUSH
14726: LD_INT 0
14728: EQUAL
14729: IFFALSE 14844
14731: GO 14733
14733: DISABLE
14734: LD_INT 0
14736: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14737: LD_ADDR_VAR 0 1
14741: PUSH
14742: LD_INT 22
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 21
14754: PUSH
14755: LD_INT 1
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 2
14764: PUSH
14765: LD_INT 25
14767: PUSH
14768: LD_INT 1
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 25
14777: PUSH
14778: LD_INT 2
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 25
14787: PUSH
14788: LD_INT 3
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 25
14797: PUSH
14798: LD_INT 4
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: LIST
14816: PPUSH
14817: CALL_OW 69
14821: PUSH
14822: FOR_IN
14823: IFFALSE 14842
// AddExperience ( i , 1 , 10000 ) ;
14825: LD_VAR 0 1
14829: PPUSH
14830: LD_INT 1
14832: PPUSH
14833: LD_INT 10000
14835: PPUSH
14836: CALL_OW 492
14840: GO 14822
14842: POP
14843: POP
// end ;
14844: PPOPN 1
14846: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14847: LD_INT 22
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 30
14859: PUSH
14860: LD_INT 36
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PPUSH
14871: CALL_OW 69
14875: PUSH
14876: LD_INT 0
14878: GREATER
14879: PUSH
14880: LD_INT 22
14882: PUSH
14883: LD_INT 1
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 21
14892: PUSH
14893: LD_INT 2
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 33
14902: PUSH
14903: LD_INT 2
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: LIST
14914: PPUSH
14915: CALL_OW 69
14919: PUSH
14920: LD_INT 0
14922: GREATER
14923: AND
14924: PUSH
14925: CALL 15517 0 0
14929: AND
14930: PUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 463
14938: NOT
14939: AND
14940: IFFALSE 15514
14942: GO 14944
14944: DISABLE
14945: LD_INT 0
14947: PPUSH
14948: PPUSH
14949: PPUSH
14950: PPUSH
14951: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14952: LD_ADDR_VAR 0 3
14956: PUSH
14957: LD_INT 22
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 30
14969: PUSH
14970: LD_INT 36
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PPUSH
14981: CALL_OW 69
14985: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
14986: LD_ADDR_VAR 0 4
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_INT 1
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 21
15003: PUSH
15004: LD_INT 2
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: LD_INT 33
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: LIST
15025: PPUSH
15026: CALL_OW 69
15030: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15031: LD_ADDR_VAR 0 5
15035: PUSH
15036: EMPTY
15037: ST_TO_ADDR
// for i in tmpControlTowers do
15038: LD_ADDR_VAR 0 1
15042: PUSH
15043: LD_VAR 0 3
15047: PUSH
15048: FOR_IN
15049: IFFALSE 15512
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15051: LD_EXP 1
15055: PPUSH
15056: CALL_OW 310
15060: PUSH
15061: LD_VAR 0 1
15065: EQUAL
15066: PUSH
15067: LD_EXP 1
15071: PPUSH
15072: CALL_OW 257
15076: PUSH
15077: LD_INT 3
15079: EQUAL
15080: AND
15081: IFFALSE 15211
// begin InGameOn ;
15083: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15087: LD_VAR 0 4
15091: PUSH
15092: LD_INT 1
15094: ARRAY
15095: PPUSH
15096: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15100: LD_EXP 1
15104: PPUSH
15105: LD_STRING D4a-JMM-1
15107: PPUSH
15108: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15112: LD_VAR 0 4
15116: PUSH
15117: LD_INT 1
15119: ARRAY
15120: PPUSH
15121: LD_EXP 1
15125: PPUSH
15126: CALL_OW 53
// wait ( 0 0$1 ) ;
15130: LD_INT 35
15132: PPUSH
15133: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15137: LD_VAR 0 4
15141: PUSH
15142: LD_INT 1
15144: ARRAY
15145: PPUSH
15146: LD_VAR 0 4
15150: PUSH
15151: LD_INT 1
15153: ARRAY
15154: PPUSH
15155: CALL_OW 250
15159: PUSH
15160: LD_INT 3
15162: PLUS
15163: PPUSH
15164: LD_VAR 0 4
15168: PUSH
15169: LD_INT 1
15171: ARRAY
15172: PPUSH
15173: CALL_OW 251
15177: PUSH
15178: LD_INT 2
15180: MINUS
15181: PPUSH
15182: CALL_OW 111
// wait ( 0 0$2 ) ;
15186: LD_INT 70
15188: PPUSH
15189: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15193: LD_EXP 1
15197: PPUSH
15198: LD_STRING D4b-JMM-1
15200: PPUSH
15201: CALL_OW 88
// InGameOff ;
15205: CALL_OW 9
// end else
15209: GO 15510
// begin InGameOn ;
15211: CALL_OW 8
// for j in UnitsInside ( i ) do
15215: LD_ADDR_VAR 0 2
15219: PUSH
15220: LD_VAR 0 1
15224: PPUSH
15225: CALL_OW 313
15229: PUSH
15230: FOR_IN
15231: IFFALSE 15266
// if GetClass ( j ) = 3 then
15233: LD_VAR 0 2
15237: PPUSH
15238: CALL_OW 257
15242: PUSH
15243: LD_INT 3
15245: EQUAL
15246: IFFALSE 15264
// tmpMechanicInside = tmpMechanicInside ^ j ;
15248: LD_ADDR_VAR 0 5
15252: PUSH
15253: LD_VAR 0 5
15257: PUSH
15258: LD_VAR 0 2
15262: ADD
15263: ST_TO_ADDR
15264: GO 15230
15266: POP
15267: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15268: LD_VAR 0 5
15272: PUSH
15273: LD_INT 1
15275: ARRAY
15276: PPUSH
15277: CALL_OW 258
15281: PUSH
15282: LD_INT 1
15284: EQUAL
15285: IFFALSE 15303
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15287: LD_VAR 0 5
15291: PUSH
15292: LD_INT 1
15294: ARRAY
15295: PPUSH
15296: LD_STRING D4a-Mech1-1
15298: PPUSH
15299: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15303: LD_VAR 0 5
15307: PUSH
15308: LD_INT 1
15310: ARRAY
15311: PPUSH
15312: CALL_OW 258
15316: PUSH
15317: LD_INT 2
15319: EQUAL
15320: IFFALSE 15338
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15322: LD_VAR 0 5
15326: PUSH
15327: LD_INT 1
15329: ARRAY
15330: PPUSH
15331: LD_STRING D4a-FMech1-1
15333: PPUSH
15334: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15338: LD_VAR 0 4
15342: PUSH
15343: LD_INT 1
15345: ARRAY
15346: PPUSH
15347: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15351: LD_VAR 0 4
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: PPUSH
15360: LD_VAR 0 5
15364: PUSH
15365: LD_INT 1
15367: ARRAY
15368: PPUSH
15369: CALL_OW 53
// wait ( 0 0$1 ) ;
15373: LD_INT 35
15375: PPUSH
15376: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15380: LD_VAR 0 4
15384: PUSH
15385: LD_INT 1
15387: ARRAY
15388: PPUSH
15389: LD_VAR 0 4
15393: PUSH
15394: LD_INT 1
15396: ARRAY
15397: PPUSH
15398: CALL_OW 250
15402: PUSH
15403: LD_INT 3
15405: PLUS
15406: PPUSH
15407: LD_VAR 0 4
15411: PUSH
15412: LD_INT 1
15414: ARRAY
15415: PPUSH
15416: CALL_OW 251
15420: PUSH
15421: LD_INT 2
15423: MINUS
15424: PPUSH
15425: CALL_OW 111
// wait ( 0 0$2 ) ;
15429: LD_INT 70
15431: PPUSH
15432: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15436: LD_VAR 0 5
15440: PUSH
15441: LD_INT 1
15443: ARRAY
15444: PPUSH
15445: CALL_OW 258
15449: PUSH
15450: LD_INT 1
15452: EQUAL
15453: IFFALSE 15471
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15455: LD_VAR 0 5
15459: PUSH
15460: LD_INT 1
15462: ARRAY
15463: PPUSH
15464: LD_STRING D4b-Mech1-1
15466: PPUSH
15467: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15471: LD_VAR 0 5
15475: PUSH
15476: LD_INT 1
15478: ARRAY
15479: PPUSH
15480: CALL_OW 258
15484: PUSH
15485: LD_INT 2
15487: EQUAL
15488: IFFALSE 15506
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15490: LD_VAR 0 5
15494: PUSH
15495: LD_INT 1
15497: ARRAY
15498: PPUSH
15499: LD_STRING D4b-FMech1-1
15501: PPUSH
15502: CALL_OW 88
// InGameOff ;
15506: CALL_OW 9
// end ; end ;
15510: GO 15048
15512: POP
15513: POP
// end ;
15514: PPOPN 5
15516: END
// function CheckMehInside ; var i , j ; begin
15517: LD_INT 0
15519: PPUSH
15520: PPUSH
15521: PPUSH
// result = false ;
15522: LD_ADDR_VAR 0 1
15526: PUSH
15527: LD_INT 0
15529: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15530: LD_ADDR_VAR 0 2
15534: PUSH
15535: LD_INT 22
15537: PUSH
15538: LD_INT 1
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 30
15547: PUSH
15548: LD_INT 36
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PPUSH
15559: CALL_OW 69
15563: PUSH
15564: FOR_IN
15565: IFFALSE 15616
// begin for j in UnitsInside ( i ) do
15567: LD_ADDR_VAR 0 3
15571: PUSH
15572: LD_VAR 0 2
15576: PPUSH
15577: CALL_OW 313
15581: PUSH
15582: FOR_IN
15583: IFFALSE 15612
// begin if GetClass ( j ) = 3 then
15585: LD_VAR 0 3
15589: PPUSH
15590: CALL_OW 257
15594: PUSH
15595: LD_INT 3
15597: EQUAL
15598: IFFALSE 15610
// begin result = true ;
15600: LD_ADDR_VAR 0 1
15604: PUSH
15605: LD_INT 1
15607: ST_TO_ADDR
// break ;
15608: GO 15612
// end ; end ;
15610: GO 15582
15612: POP
15613: POP
// end ;
15614: GO 15564
15616: POP
15617: POP
// end ;
15618: LD_VAR 0 1
15622: RET
// every 25 25$0 do
15623: GO 15625
15625: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15626: LD_INT 35
15628: PPUSH
15629: CALL_OW 67
// until not InBattle ( 1 ) ;
15633: LD_INT 1
15635: PPUSH
15636: CALL_OW 463
15640: NOT
15641: IFFALSE 15626
// PrepareKurt ;
15643: CALL 19201 0 0
// end ;
15647: END
// every 35 35$0 do
15648: GO 15650
15650: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15651: LD_INT 35
15653: PPUSH
15654: CALL_OW 67
// until not InBattle ( 1 ) ;
15658: LD_INT 1
15660: PPUSH
15661: CALL_OW 463
15665: NOT
15666: IFFALSE 15651
// PrepareJoan ;
15668: CALL 3020 0 0
// wait ( 1 1$0 ) ;
15672: LD_INT 2100
15674: PPUSH
15675: CALL_OW 67
// if IsOK ( Lisa ) then
15679: LD_EXP 2
15683: PPUSH
15684: CALL_OW 302
15688: IFFALSE 15818
// begin DialogueOn ;
15690: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15694: LD_EXP 2
15698: PPUSH
15699: LD_STRING D7-Lisa-1
15701: PPUSH
15702: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15706: LD_EXP 1
15710: PPUSH
15711: LD_STRING D7-JMM-1
15713: PPUSH
15714: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15718: LD_EXP 2
15722: PPUSH
15723: LD_STRING D7-Lisa-2
15725: PPUSH
15726: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15730: LD_EXP 1
15734: PPUSH
15735: LD_STRING D7-JMM-2
15737: PPUSH
15738: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15742: LD_EXP 2
15746: PPUSH
15747: LD_STRING D7-Lisa-3
15749: PPUSH
15750: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15754: LD_EXP 1
15758: PPUSH
15759: LD_STRING D7-JMM-3
15761: PPUSH
15762: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15766: LD_EXP 2
15770: PPUSH
15771: LD_STRING D7-Lisa-4
15773: PPUSH
15774: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15778: LD_EXP 1
15782: PPUSH
15783: LD_STRING D7-JMM-4
15785: PPUSH
15786: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15790: LD_EXP 1
15794: PPUSH
15795: LD_STRING D7-JMM-4a
15797: PPUSH
15798: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15802: LD_EXP 2
15806: PPUSH
15807: LD_STRING D7-Lisa-5
15809: PPUSH
15810: CALL_OW 88
// DialogueOff ;
15814: CALL_OW 7
// end ; end ;
15818: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15819: LD_EXP 13
15823: PUSH
15824: LD_INT 22
15826: PUSH
15827: LD_INT 1
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 91
15836: PUSH
15837: LD_EXP 13
15841: PUSH
15842: LD_INT 10
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 2
15852: PUSH
15853: LD_INT 25
15855: PUSH
15856: LD_INT 1
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 25
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 25
15875: PUSH
15876: LD_INT 3
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 25
15885: PUSH
15886: LD_INT 4
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: LIST
15904: PPUSH
15905: CALL_OW 69
15909: PUSH
15910: LD_INT 1
15912: GREATER
15913: AND
15914: IFFALSE 15931
15916: GO 15918
15918: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15919: LD_EXP 13
15923: PPUSH
15924: LD_STRING D5-Sol1-1
15926: PPUSH
15927: CALL_OW 88
// end ;
15931: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15932: LD_INT 22
15934: PUSH
15935: LD_INT 1
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 33
15944: PUSH
15945: LD_INT 2
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PPUSH
15956: CALL_OW 69
15960: PUSH
15961: LD_INT 2
15963: GREATEREQUAL
15964: IFFALSE 15984
15966: GO 15968
15968: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15969: LD_STRING MRa
15971: PPUSH
15972: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15976: LD_ADDR_EXP 28
15980: PUSH
15981: LD_INT 1
15983: ST_TO_ADDR
// end ;
15984: END
// every 0 0$10 do var i , last ;
15985: GO 15987
15987: DISABLE
15988: LD_INT 0
15990: PPUSH
15991: PPUSH
// begin last := 7 ;
15992: LD_ADDR_VAR 0 2
15996: PUSH
15997: LD_INT 7
15999: ST_TO_ADDR
// for i = 1 to last do
16000: LD_ADDR_VAR 0 1
16004: PUSH
16005: DOUBLE
16006: LD_INT 1
16008: DEC
16009: ST_TO_ADDR
16010: LD_VAR 0 2
16014: PUSH
16015: FOR_TO
16016: IFFALSE 16044
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
16018: LD_INT 6300
16020: PPUSH
16021: LD_INT 14700
16023: PPUSH
16024: CALL_OW 12
16028: PPUSH
16029: CALL_OW 67
// PrepareRandoms ( i ) ;
16033: LD_VAR 0 1
16037: PPUSH
16038: CALL 4056 0 1
// end ;
16042: GO 16015
16044: POP
16045: POP
// end ;
16046: PPOPN 2
16048: END
// every 5 5$20 do
16049: GO 16051
16051: DISABLE
// begin DialogueOn ;
16052: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16056: LD_EXP 10
16060: PPUSH
16061: LD_STRING D12a-Sci-1
16063: PPUSH
16064: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16068: LD_EXP 1
16072: PPUSH
16073: LD_STRING D12a-JMM-1
16075: PPUSH
16076: CALL_OW 88
// DialogueOff ;
16080: CALL_OW 7
// cratesStatus = 1 ;
16084: LD_ADDR_EXP 38
16088: PUSH
16089: LD_INT 1
16091: ST_TO_ADDR
// end ;
16092: END
// every 13 13$0 do
16093: GO 16095
16095: DISABLE
// begin DialogueOn ;
16096: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16100: LD_EXP 10
16104: PPUSH
16105: LD_STRING D12b-Sci-1
16107: PPUSH
16108: CALL_OW 94
// DialogueOff ;
16112: CALL_OW 7
// cratesStatus = 2 ;
16116: LD_ADDR_EXP 38
16120: PUSH
16121: LD_INT 2
16123: ST_TO_ADDR
// end ;
16124: END
// every 32 32$0 do
16125: GO 16127
16127: DISABLE
// begin DialogueOn ;
16128: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16132: LD_EXP 10
16136: PPUSH
16137: LD_STRING D12c-Sci-1
16139: PPUSH
16140: CALL_OW 94
// DialogueOff ;
16144: CALL_OW 7
// wait ( 3 3$0 ) ;
16148: LD_INT 6300
16150: PPUSH
16151: CALL_OW 67
// DialogueOn ;
16155: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16159: LD_EXP 10
16163: PPUSH
16164: LD_STRING D12d-Sci-1
16166: PPUSH
16167: CALL_OW 94
// DialogueOff ;
16171: CALL_OW 7
// cratesStatus = 1 ;
16175: LD_ADDR_EXP 38
16179: PUSH
16180: LD_INT 1
16182: ST_TO_ADDR
// end ;
16183: END
// every 42 42$0 do
16184: GO 16186
16186: DISABLE
// begin DialogueOn ;
16187: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16191: LD_EXP 10
16195: PPUSH
16196: LD_STRING D12e-Sci-1
16198: PPUSH
16199: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16203: LD_EXP 1
16207: PPUSH
16208: LD_STRING D12e-JMM-1
16210: PPUSH
16211: CALL_OW 88
// DialogueOff ;
16215: CALL_OW 7
// cratesStatus = 2 ;
16219: LD_ADDR_EXP 38
16223: PUSH
16224: LD_INT 2
16226: ST_TO_ADDR
// end ;
16227: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16228: LD_INT 22
16230: PUSH
16231: LD_INT 6
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 21
16240: PUSH
16241: LD_INT 2
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 34
16250: PUSH
16251: LD_INT 51
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: LIST
16262: PPUSH
16263: CALL_OW 69
16267: PUSH
16268: LD_INT 0
16270: GREATER
16271: IFFALSE 16354
16273: GO 16275
16275: DISABLE
16276: LD_INT 0
16278: PPUSH
// begin enable ;
16279: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16280: LD_ADDR_VAR 0 1
16284: PUSH
16285: LD_INT 22
16287: PUSH
16288: LD_INT 6
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 2
16297: PUSH
16298: LD_INT 21
16300: PUSH
16301: LD_INT 1
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 21
16310: PUSH
16311: LD_INT 2
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PPUSH
16327: CALL_OW 69
16331: PUSH
16332: FOR_IN
16333: IFFALSE 16352
// ComAgressiveMove ( i , 138 , 168 ) ;
16335: LD_VAR 0 1
16339: PPUSH
16340: LD_INT 138
16342: PPUSH
16343: LD_INT 168
16345: PPUSH
16346: CALL_OW 114
16350: GO 16332
16352: POP
16353: POP
// end ;
16354: PPOPN 1
16356: END
// every 0 0$1 do var i ;
16357: GO 16359
16359: DISABLE
16360: LD_INT 0
16362: PPUSH
// begin enable ;
16363: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16364: LD_ADDR_VAR 0 1
16368: PUSH
16369: LD_INT 4
16371: PPUSH
16372: LD_INT 2
16374: PUSH
16375: LD_INT 22
16377: PUSH
16378: LD_INT 3
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 22
16387: PUSH
16388: LD_INT 6
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: LIST
16399: PUSH
16400: EMPTY
16401: LIST
16402: PPUSH
16403: CALL_OW 70
16407: PUSH
16408: FOR_IN
16409: IFFALSE 16473
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16411: LD_INT 4
16413: PPUSH
16414: LD_INT 22
16416: PUSH
16417: LD_INT 6
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 34
16426: PUSH
16427: LD_INT 51
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PPUSH
16438: CALL_OW 70
16442: PUSH
16443: LD_INT 0
16445: GREATER
16446: IFFALSE 16462
// sendedConvoys = sendedConvoys + 1 ;
16448: LD_ADDR_EXP 39
16452: PUSH
16453: LD_EXP 39
16457: PUSH
16458: LD_INT 1
16460: PLUS
16461: ST_TO_ADDR
// RemoveUnit ( i ) ;
16462: LD_VAR 0 1
16466: PPUSH
16467: CALL_OW 64
// end ;
16471: GO 16408
16473: POP
16474: POP
// end ; end_of_file
16475: PPOPN 1
16477: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16478: LD_VAR 0 1
16482: PUSH
16483: LD_INT 1
16485: EQUAL
16486: PUSH
16487: LD_VAR 0 2
16491: PUSH
16492: LD_INT 3
16494: EQUAL
16495: AND
16496: IFFALSE 16506
// contactWithRussian = 1 ;
16498: LD_ADDR_EXP 22
16502: PUSH
16503: LD_INT 1
16505: ST_TO_ADDR
// end ;
16506: PPOPN 2
16508: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 266
16518: PUSH
16519: LD_INT 36
16521: EQUAL
16522: PUSH
16523: LD_VAR 0 1
16527: PPUSH
16528: CALL_OW 255
16532: PUSH
16533: LD_INT 1
16535: EQUAL
16536: AND
16537: PUSH
16538: LD_INT 22
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 21
16550: PUSH
16551: LD_INT 2
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 33
16560: PUSH
16561: LD_INT 2
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 69
16577: PUSH
16578: LD_INT 0
16580: EQUAL
16581: AND
16582: PUSH
16583: LD_EXP 23
16587: PUSH
16588: LD_INT 0
16590: EQUAL
16591: AND
16592: IFFALSE 16672
// begin firstTower = 1 ;
16594: LD_ADDR_EXP 23
16598: PUSH
16599: LD_INT 1
16601: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16602: LD_INT 22
16604: PUSH
16605: LD_INT 1
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: LD_INT 21
16614: PUSH
16615: LD_INT 1
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 25
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 26
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: PPUSH
16648: CALL_OW 69
16652: PUSH
16653: LD_EXP 1
16657: PUSH
16658: EMPTY
16659: LIST
16660: DIFF
16661: PPUSH
16662: LD_STRING D3b-Mech1-1
16664: PPUSH
16665: LD_STRING D3b-Mech1-1
16667: PPUSH
16668: CALL 6010 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16672: LD_VAR 0 1
16676: PPUSH
16677: CALL_OW 266
16681: PUSH
16682: LD_INT 0
16684: EQUAL
16685: PUSH
16686: LD_VAR 0 1
16690: PPUSH
16691: CALL_OW 255
16695: PUSH
16696: LD_INT 1
16698: EQUAL
16699: AND
16700: IFFALSE 16714
// SetBName ( building , theta ) ;
16702: LD_VAR 0 1
16706: PPUSH
16707: LD_STRING theta
16709: PPUSH
16710: CALL_OW 500
// if GetSide ( building ) = 3 then
16714: LD_VAR 0 1
16718: PPUSH
16719: CALL_OW 255
16723: PUSH
16724: LD_INT 3
16726: EQUAL
16727: IFFALSE 16801
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16729: LD_ADDR_EXP 31
16733: PUSH
16734: LD_EXP 31
16738: PPUSH
16739: LD_INT 1
16741: PPUSH
16742: CALL_OW 3
16746: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16747: LD_ADDR_EXP 31
16751: PUSH
16752: LD_EXP 31
16756: PPUSH
16757: LD_INT 1
16759: PPUSH
16760: CALL_OW 3
16764: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16765: LD_ADDR_EXP 31
16769: PUSH
16770: LD_EXP 31
16774: PPUSH
16775: LD_INT 1
16777: PPUSH
16778: CALL_OW 3
16782: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16783: LD_ADDR_EXP 31
16787: PUSH
16788: LD_EXP 31
16792: PPUSH
16793: LD_INT 1
16795: PPUSH
16796: CALL_OW 3
16800: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16801: LD_VAR 0 1
16805: PPUSH
16806: CALL_OW 255
16810: PUSH
16811: LD_INT 3
16813: EQUAL
16814: PUSH
16815: LD_VAR 0 1
16819: PPUSH
16820: CALL_OW 266
16824: PUSH
16825: LD_INT 0
16827: EQUAL
16828: PUSH
16829: LD_VAR 0 1
16833: PPUSH
16834: CALL_OW 266
16838: PUSH
16839: LD_INT 2
16841: EQUAL
16842: OR
16843: PUSH
16844: LD_VAR 0 1
16848: PPUSH
16849: CALL_OW 266
16853: PUSH
16854: LD_INT 4
16856: EQUAL
16857: OR
16858: PUSH
16859: EMPTY
16860: LIST
16861: AND
16862: IFFALSE 16873
// ComUpgrade ( building ) ;
16864: LD_VAR 0 1
16868: PPUSH
16869: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16873: LD_VAR 0 1
16877: PPUSH
16878: CALL_OW 255
16882: PUSH
16883: LD_INT 3
16885: EQUAL
16886: PUSH
16887: LD_VAR 0 1
16891: PPUSH
16892: CALL_OW 266
16896: PUSH
16897: LD_INT 32
16899: EQUAL
16900: AND
16901: IFFALSE 16942
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16903: LD_VAR 0 1
16907: PPUSH
16908: LD_INT 42
16910: PUSH
16911: LD_INT 43
16913: PUSH
16914: LD_INT 44
16916: PUSH
16917: LD_INT 46
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 1
16928: PPUSH
16929: LD_INT 4
16931: PPUSH
16932: CALL_OW 12
16936: ARRAY
16937: PPUSH
16938: CALL_OW 208
// end ; end ;
16942: PPOPN 1
16944: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
16945: LD_VAR 0 1
16949: PUSH
16950: LD_INT 22
16952: PUSH
16953: LD_INT 1
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 21
16962: PUSH
16963: LD_INT 1
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 23
16972: PUSH
16973: LD_INT 1
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: PPUSH
16985: CALL_OW 69
16989: IN
16990: IFFALSE 17006
// killCounter := killCounter + 1 ;
16992: LD_ADDR_EXP 47
16996: PUSH
16997: LD_EXP 47
17001: PUSH
17002: LD_INT 1
17004: PLUS
17005: ST_TO_ADDR
// if unit = JMM then
17006: LD_VAR 0 1
17010: PUSH
17011: LD_EXP 1
17015: EQUAL
17016: IFFALSE 17025
// YouLost ( JMM ) ;
17018: LD_STRING JMM
17020: PPUSH
17021: CALL_OW 104
// if unit = Joan then
17025: LD_VAR 0 1
17029: PUSH
17030: LD_EXP 15
17034: EQUAL
17035: IFFALSE 17045
// JoanStatus = 0 ;
17037: LD_ADDR_EXP 16
17041: PUSH
17042: LD_INT 0
17044: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17045: LD_VAR 0 1
17049: PPUSH
17050: CALL_OW 255
17054: PUSH
17055: LD_INT 1
17057: EQUAL
17058: PUSH
17059: LD_VAR 0 1
17063: PPUSH
17064: CALL_OW 247
17068: PUSH
17069: LD_INT 1
17071: EQUAL
17072: AND
17073: IFFALSE 17149
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 257
17084: PUSH
17085: LD_INT 1
17087: EQUAL
17088: PUSH
17089: LD_VAR 0 1
17093: PPUSH
17094: CALL_OW 257
17098: PUSH
17099: LD_INT 2
17101: EQUAL
17102: OR
17103: PUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: CALL_OW 257
17113: PUSH
17114: LD_INT 3
17116: EQUAL
17117: OR
17118: PUSH
17119: LD_VAR 0 1
17123: PPUSH
17124: CALL_OW 257
17128: PUSH
17129: LD_INT 4
17131: EQUAL
17132: OR
17133: IFFALSE 17149
// unitLost = unitLost + 1 ;
17135: LD_ADDR_EXP 30
17139: PUSH
17140: LD_EXP 30
17144: PUSH
17145: LD_INT 1
17147: PLUS
17148: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17149: LD_VAR 0 1
17153: PPUSH
17154: CALL_OW 255
17158: PUSH
17159: LD_INT 3
17161: EQUAL
17162: PUSH
17163: LD_VAR 0 1
17167: PPUSH
17168: CALL_OW 247
17172: PUSH
17173: LD_INT 3
17175: EQUAL
17176: AND
17177: IFFALSE 17869
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17179: LD_VAR 0 1
17183: PPUSH
17184: CALL_OW 266
17188: PUSH
17189: LD_INT 31
17191: EQUAL
17192: PUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: CALL_OW 266
17202: PUSH
17203: LD_INT 32
17205: EQUAL
17206: OR
17207: PUSH
17208: LD_VAR 0 1
17212: PPUSH
17213: CALL_OW 266
17217: PUSH
17218: LD_INT 36
17220: EQUAL
17221: OR
17222: PUSH
17223: LD_VAR 0 1
17227: PPUSH
17228: CALL_OW 266
17232: PUSH
17233: LD_INT 0
17235: EQUAL
17236: OR
17237: PUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: CALL_OW 266
17247: PUSH
17248: LD_INT 24
17250: EQUAL
17251: OR
17252: PUSH
17253: LD_VAR 0 1
17257: PPUSH
17258: CALL_OW 266
17262: PUSH
17263: LD_INT 17
17265: EQUAL
17266: OR
17267: PUSH
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 266
17277: PUSH
17278: LD_INT 25
17280: EQUAL
17281: OR
17282: PUSH
17283: LD_VAR 0 1
17287: PPUSH
17288: CALL_OW 266
17292: PUSH
17293: LD_INT 19
17295: EQUAL
17296: OR
17297: PUSH
17298: LD_VAR 0 1
17302: PPUSH
17303: CALL_OW 266
17307: PUSH
17308: LD_INT 20
17310: EQUAL
17311: OR
17312: PUSH
17313: LD_VAR 0 1
17317: PPUSH
17318: CALL_OW 266
17322: PUSH
17323: LD_INT 18
17325: EQUAL
17326: OR
17327: PUSH
17328: LD_VAR 0 1
17332: PPUSH
17333: CALL_OW 266
17337: PUSH
17338: LD_INT 21
17340: EQUAL
17341: OR
17342: PUSH
17343: LD_VAR 0 1
17347: PPUSH
17348: CALL_OW 266
17352: PUSH
17353: LD_INT 23
17355: EQUAL
17356: OR
17357: PUSH
17358: LD_VAR 0 1
17362: PPUSH
17363: CALL_OW 266
17367: PUSH
17368: LD_INT 16
17370: EQUAL
17371: OR
17372: PUSH
17373: LD_VAR 0 1
17377: PPUSH
17378: CALL_OW 266
17382: PUSH
17383: LD_INT 6
17385: EQUAL
17386: OR
17387: PUSH
17388: LD_VAR 0 1
17392: PPUSH
17393: CALL_OW 266
17397: PUSH
17398: LD_INT 29
17400: EQUAL
17401: OR
17402: PUSH
17403: LD_VAR 0 1
17407: PPUSH
17408: CALL_OW 266
17412: PUSH
17413: LD_INT 26
17415: EQUAL
17416: OR
17417: PUSH
17418: LD_VAR 0 1
17422: PPUSH
17423: CALL_OW 266
17427: PUSH
17428: LD_INT 30
17430: EQUAL
17431: OR
17432: PUSH
17433: LD_VAR 0 1
17437: PPUSH
17438: CALL_OW 266
17442: PUSH
17443: LD_INT 28
17445: EQUAL
17446: OR
17447: PUSH
17448: LD_VAR 0 1
17452: PPUSH
17453: CALL_OW 266
17457: PUSH
17458: LD_INT 27
17460: EQUAL
17461: OR
17462: PUSH
17463: LD_VAR 0 1
17467: PPUSH
17468: CALL_OW 266
17472: PUSH
17473: LD_INT 33
17475: EQUAL
17476: OR
17477: PUSH
17478: LD_VAR 0 1
17482: PPUSH
17483: CALL_OW 266
17487: PUSH
17488: LD_INT 2
17490: EQUAL
17491: OR
17492: PUSH
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 266
17502: PUSH
17503: LD_INT 4
17505: EQUAL
17506: OR
17507: IFFALSE 17593
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17509: LD_ADDR_EXP 31
17513: PUSH
17514: LD_EXP 31
17518: PUSH
17519: LD_VAR 0 1
17523: PPUSH
17524: CALL_OW 266
17528: ADD
17529: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17530: LD_ADDR_EXP 31
17534: PUSH
17535: LD_EXP 31
17539: PUSH
17540: LD_VAR 0 1
17544: PPUSH
17545: CALL_OW 250
17549: ADD
17550: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17551: LD_ADDR_EXP 31
17555: PUSH
17556: LD_EXP 31
17560: PUSH
17561: LD_VAR 0 1
17565: PPUSH
17566: CALL_OW 251
17570: ADD
17571: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17572: LD_ADDR_EXP 31
17576: PUSH
17577: LD_EXP 31
17581: PUSH
17582: LD_VAR 0 1
17586: PPUSH
17587: CALL_OW 254
17591: ADD
17592: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17593: LD_VAR 0 1
17597: PPUSH
17598: CALL_OW 266
17602: PUSH
17603: LD_INT 1
17605: EQUAL
17606: IFFALSE 17685
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17608: LD_ADDR_EXP 31
17612: PUSH
17613: LD_EXP 31
17617: PUSH
17618: LD_INT 0
17620: ADD
17621: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17622: LD_ADDR_EXP 31
17626: PUSH
17627: LD_EXP 31
17631: PUSH
17632: LD_VAR 0 1
17636: PPUSH
17637: CALL_OW 250
17641: ADD
17642: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17643: LD_ADDR_EXP 31
17647: PUSH
17648: LD_EXP 31
17652: PUSH
17653: LD_VAR 0 1
17657: PPUSH
17658: CALL_OW 251
17662: ADD
17663: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17664: LD_ADDR_EXP 31
17668: PUSH
17669: LD_EXP 31
17673: PUSH
17674: LD_VAR 0 1
17678: PPUSH
17679: CALL_OW 254
17683: ADD
17684: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17685: LD_VAR 0 1
17689: PPUSH
17690: CALL_OW 266
17694: PUSH
17695: LD_INT 3
17697: EQUAL
17698: IFFALSE 17777
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17700: LD_ADDR_EXP 31
17704: PUSH
17705: LD_EXP 31
17709: PUSH
17710: LD_INT 2
17712: ADD
17713: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17714: LD_ADDR_EXP 31
17718: PUSH
17719: LD_EXP 31
17723: PUSH
17724: LD_VAR 0 1
17728: PPUSH
17729: CALL_OW 250
17733: ADD
17734: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17735: LD_ADDR_EXP 31
17739: PUSH
17740: LD_EXP 31
17744: PUSH
17745: LD_VAR 0 1
17749: PPUSH
17750: CALL_OW 251
17754: ADD
17755: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17756: LD_ADDR_EXP 31
17760: PUSH
17761: LD_EXP 31
17765: PUSH
17766: LD_VAR 0 1
17770: PPUSH
17771: CALL_OW 254
17775: ADD
17776: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17777: LD_VAR 0 1
17781: PPUSH
17782: CALL_OW 266
17786: PUSH
17787: LD_INT 5
17789: EQUAL
17790: IFFALSE 17869
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17792: LD_ADDR_EXP 31
17796: PUSH
17797: LD_EXP 31
17801: PUSH
17802: LD_INT 4
17804: ADD
17805: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17806: LD_ADDR_EXP 31
17810: PUSH
17811: LD_EXP 31
17815: PUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 250
17825: ADD
17826: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17827: LD_ADDR_EXP 31
17831: PUSH
17832: LD_EXP 31
17836: PUSH
17837: LD_VAR 0 1
17841: PPUSH
17842: CALL_OW 251
17846: ADD
17847: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17848: LD_ADDR_EXP 31
17852: PUSH
17853: LD_EXP 31
17857: PUSH
17858: LD_VAR 0 1
17862: PPUSH
17863: CALL_OW 254
17867: ADD
17868: ST_TO_ADDR
// end ; end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17869: LD_EXP 48
17873: PUSH
17874: LD_VAR 0 1
17878: PPUSH
17879: CALL_OW 257
17883: PUSH
17884: LD_INT 3
17886: EQUAL
17887: AND
17888: PUSH
17889: LD_VAR 0 1
17893: PPUSH
17894: CALL_OW 255
17898: PUSH
17899: LD_INT 3
17901: EQUAL
17902: AND
17903: PUSH
17904: LD_INT 21
17906: PPUSH
17907: CALL_OW 302
17911: AND
17912: PUSH
17913: LD_INT 21
17915: PPUSH
17916: CALL_OW 255
17920: PUSH
17921: LD_INT 3
17923: EQUAL
17924: AND
17925: IFFALSE 18007
// begin ruMechCounter := ruMechCounter - 1 ;
17927: LD_ADDR_EXP 48
17931: PUSH
17932: LD_EXP 48
17936: PUSH
17937: LD_INT 1
17939: MINUS
17940: ST_TO_ADDR
// uc_side = 3 ;
17941: LD_ADDR_OWVAR 20
17945: PUSH
17946: LD_INT 3
17948: ST_TO_ADDR
// uc_nation = 3 ;
17949: LD_ADDR_OWVAR 21
17953: PUSH
17954: LD_INT 3
17956: ST_TO_ADDR
// hc_gallery :=  ;
17957: LD_ADDR_OWVAR 33
17961: PUSH
17962: LD_STRING 
17964: ST_TO_ADDR
// hc_name :=  ;
17965: LD_ADDR_OWVAR 26
17969: PUSH
17970: LD_STRING 
17972: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17973: LD_INT 0
17975: PPUSH
17976: LD_EXP 34
17980: PPUSH
17981: LD_EXP 35
17985: PPUSH
17986: CALL_OW 12
17990: PPUSH
17991: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
17995: CALL_OW 44
17999: PPUSH
18000: LD_INT 21
18002: PPUSH
18003: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
18007: LD_VAR 0 1
18011: PPUSH
18012: CALL_OW 255
18016: PUSH
18017: LD_INT 3
18019: EQUAL
18020: PUSH
18021: LD_VAR 0 1
18025: PPUSH
18026: CALL_OW 264
18030: PUSH
18031: LD_INT 52
18033: EQUAL
18034: AND
18035: PUSH
18036: LD_INT 21
18038: PPUSH
18039: CALL_OW 302
18043: AND
18044: PUSH
18045: LD_INT 21
18047: PPUSH
18048: CALL_OW 255
18052: PUSH
18053: LD_INT 3
18055: EQUAL
18056: AND
18057: IFFALSE 18078
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
18059: LD_INT 21
18061: PPUSH
18062: LD_INT 22
18064: PPUSH
18065: LD_INT 1
18067: PPUSH
18068: LD_INT 1
18070: PPUSH
18071: LD_INT 52
18073: PPUSH
18074: CALL_OW 125
// end ;
18078: PPOPN 1
18080: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
18081: LD_INT 0
18083: PPUSH
18084: PPUSH
18085: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
18086: LD_VAR 0 1
18090: PPUSH
18091: CALL_OW 264
18095: PUSH
18096: LD_INT 51
18098: EQUAL
18099: PUSH
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 255
18109: PUSH
18110: LD_INT 3
18112: EQUAL
18113: AND
18114: IFFALSE 18176
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18116: LD_ADDR_VAR 0 5
18120: PUSH
18121: LD_INT 2
18123: PPUSH
18124: CALL_OW 274
18128: PPUSH
18129: LD_INT 1
18131: PPUSH
18132: CALL_OW 275
18136: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18137: LD_INT 2
18139: PPUSH
18140: CALL_OW 274
18144: PPUSH
18145: LD_INT 1
18147: PPUSH
18148: LD_VAR 0 5
18152: PUSH
18153: LD_INT 100
18155: MINUS
18156: PPUSH
18157: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18161: LD_VAR 0 1
18165: PPUSH
18166: LD_INT 1
18168: PPUSH
18169: LD_INT 100
18171: PPUSH
18172: CALL_OW 291
// end ; if building = rufabsupp then
18176: LD_VAR 0 2
18180: PUSH
18181: LD_INT 17
18183: EQUAL
18184: IFFALSE 18198
// SetSide ( vehicle , 6 ) ;
18186: LD_VAR 0 1
18190: PPUSH
18191: LD_INT 6
18193: PPUSH
18194: CALL_OW 235
// end ;
18198: PPOPN 5
18200: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18201: LD_VAR 0 1
18205: PPUSH
18206: CALL_OW 255
18210: PUSH
18211: LD_INT 3
18213: EQUAL
18214: IFFALSE 18245
// begin tamedApemans = tamedApemans + 1 ;
18216: LD_ADDR_EXP 32
18220: PUSH
18221: LD_EXP 32
18225: PUSH
18226: LD_INT 1
18228: PLUS
18229: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18230: LD_VAR 0 1
18234: PPUSH
18235: LD_INT 106
18237: PPUSH
18238: LD_INT 85
18240: PPUSH
18241: CALL_OW 111
// end ; end ;
18245: PPOPN 2
18247: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18248: LD_INT 0
18250: PPUSH
18251: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18252: LD_VAR 0 1
18256: PPUSH
18257: CALL_OW 255
18261: PUSH
18262: LD_INT 3
18264: EQUAL
18265: PUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: CALL_OW 247
18275: PUSH
18276: LD_INT 2
18278: EQUAL
18279: AND
18280: IFFALSE 18389
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18282: LD_VAR 0 1
18286: PPUSH
18287: CALL_OW 264
18291: PUSH
18292: LD_INT 42
18294: EQUAL
18295: PUSH
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL_OW 264
18305: PUSH
18306: LD_INT 43
18308: EQUAL
18309: OR
18310: PUSH
18311: LD_VAR 0 1
18315: PPUSH
18316: CALL_OW 264
18320: PUSH
18321: LD_INT 44
18323: EQUAL
18324: OR
18325: PUSH
18326: LD_VAR 0 1
18330: PPUSH
18331: CALL_OW 264
18335: PUSH
18336: LD_INT 46
18338: EQUAL
18339: OR
18340: IFFALSE 18389
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18342: LD_INT 21
18344: PPUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 265
18354: PPUSH
18355: LD_VAR 0 1
18359: PPUSH
18360: CALL_OW 262
18364: PPUSH
18365: LD_VAR 0 1
18369: PPUSH
18370: CALL_OW 263
18374: PPUSH
18375: LD_VAR 0 1
18379: PPUSH
18380: CALL_OW 264
18384: PPUSH
18385: CALL_OW 185
// end ;
18389: PPOPN 3
18391: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18392: LD_VAR 0 1
18396: PPUSH
18397: CALL_OW 255
18401: PUSH
18402: LD_INT 3
18404: EQUAL
18405: PUSH
18406: LD_VAR 0 2
18410: PPUSH
18411: CALL_OW 255
18415: PUSH
18416: LD_INT 3
18418: EQUAL
18419: AND
18420: PUSH
18421: LD_VAR 0 1
18425: PPUSH
18426: CALL_OW 302
18430: AND
18431: IFFALSE 18473
// begin ComRepairVehicle ( human , vehicle ) ;
18433: LD_VAR 0 2
18437: PPUSH
18438: LD_VAR 0 1
18442: PPUSH
18443: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18447: LD_VAR 0 2
18451: PPUSH
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_INT 100
18468: PPUSH
18469: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18473: LD_VAR 0 1
18477: PPUSH
18478: CALL_OW 255
18482: PUSH
18483: LD_INT 3
18485: EQUAL
18486: PUSH
18487: LD_VAR 0 2
18491: PPUSH
18492: CALL_OW 255
18496: PUSH
18497: LD_INT 3
18499: EQUAL
18500: AND
18501: PUSH
18502: LD_INT 21
18504: PPUSH
18505: CALL_OW 302
18509: AND
18510: PUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 302
18520: NOT
18521: AND
18522: IFFALSE 18536
// ComEnterUnit ( human , rufab ) ;
18524: LD_VAR 0 2
18528: PPUSH
18529: LD_INT 21
18531: PPUSH
18532: CALL_OW 120
// end ;
18536: PPOPN 2
18538: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18539: LD_VAR 0 1
18543: PUSH
18544: LD_INT 21
18546: EQUAL
18547: PUSH
18548: LD_VAR 0 2
18552: PPUSH
18553: CALL_OW 255
18557: PUSH
18558: LD_INT 3
18560: EQUAL
18561: AND
18562: IFFALSE 18576
// SetLives ( human , 1000 ) ;
18564: LD_VAR 0 2
18568: PPUSH
18569: LD_INT 1000
18571: PPUSH
18572: CALL_OW 234
// end ;
18576: PPOPN 2
18578: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18579: LD_VAR 0 1
18583: PPUSH
18584: CALL 24284 0 1
// end ; end_of_file
18588: PPOPN 1
18590: END
// every 0 0$30 trigger cratesStatus = 1 do
18591: LD_EXP 38
18595: PUSH
18596: LD_INT 1
18598: EQUAL
18599: IFFALSE 18682
18601: GO 18603
18603: DISABLE
// begin enable ;
18604: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18605: LD_INT 350
18607: PUSH
18608: LD_INT 1050
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 1
18617: PPUSH
18618: LD_INT 2
18620: PPUSH
18621: CALL_OW 12
18625: ARRAY
18626: PPUSH
18627: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18631: LD_INT 4
18633: PUSH
18634: LD_INT 5
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 1
18643: PPUSH
18644: LD_INT 2
18646: PPUSH
18647: CALL_OW 12
18651: ARRAY
18652: PPUSH
18653: LD_INT 6
18655: PUSH
18656: LD_INT 7
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 1
18665: PPUSH
18666: LD_INT 2
18668: PPUSH
18669: CALL_OW 12
18673: ARRAY
18674: PPUSH
18675: LD_INT 1
18677: PPUSH
18678: CALL_OW 55
// end ;
18682: END
// every 1 1$0 trigger cratesStatus = 2 do
18683: LD_EXP 38
18687: PUSH
18688: LD_INT 2
18690: EQUAL
18691: IFFALSE 18774
18693: GO 18695
18695: DISABLE
// begin enable ;
18696: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18697: LD_INT 3150
18699: PUSH
18700: LD_INT 4550
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 1
18709: PPUSH
18710: LD_INT 2
18712: PPUSH
18713: CALL_OW 12
18717: ARRAY
18718: PPUSH
18719: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18723: LD_INT 2
18725: PUSH
18726: LD_INT 5
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 1
18735: PPUSH
18736: LD_INT 2
18738: PPUSH
18739: CALL_OW 12
18743: ARRAY
18744: PPUSH
18745: LD_INT 6
18747: PUSH
18748: LD_INT 7
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 1
18757: PPUSH
18758: LD_INT 2
18760: PPUSH
18761: CALL_OW 12
18765: ARRAY
18766: PPUSH
18767: LD_INT 1
18769: PPUSH
18770: CALL_OW 55
// end ;
18774: END
// every 0 0$30 + 0 0$10 do
18775: GO 18777
18777: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18778: LD_INT 4
18780: PUSH
18781: LD_INT 5
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 1
18790: PPUSH
18791: LD_INT 2
18793: PPUSH
18794: CALL_OW 12
18798: ARRAY
18799: PPUSH
18800: LD_INT 7
18802: PPUSH
18803: LD_INT 1
18805: PPUSH
18806: CALL_OW 55
// Wait ( 0 0$15 ) ;
18810: LD_INT 525
18812: PPUSH
18813: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18817: LD_INT 4
18819: PUSH
18820: LD_INT 5
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 1
18829: PPUSH
18830: LD_INT 2
18832: PPUSH
18833: CALL_OW 12
18837: ARRAY
18838: PPUSH
18839: LD_INT 7
18841: PPUSH
18842: LD_INT 1
18844: PPUSH
18845: CALL_OW 55
// Wait ( 0 0$20 ) ;
18849: LD_INT 700
18851: PPUSH
18852: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18856: LD_INT 4
18858: PUSH
18859: LD_INT 5
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 1
18868: PPUSH
18869: LD_INT 2
18871: PPUSH
18872: CALL_OW 12
18876: ARRAY
18877: PPUSH
18878: LD_INT 7
18880: PPUSH
18881: LD_INT 1
18883: PPUSH
18884: CALL_OW 55
// end ; end_of_file
18888: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18889: LD_EXP 24
18893: PUSH
18894: LD_INT 1
18896: EQUAL
18897: IFFALSE 19198
18899: GO 18901
18901: DISABLE
18902: LD_INT 0
18904: PPUSH
18905: PPUSH
18906: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18907: LD_ADDR_VAR 0 2
18911: PUSH
18912: LD_INT 22
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 21
18924: PUSH
18925: LD_INT 3
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 2
18934: PUSH
18935: LD_INT 30
18937: PUSH
18938: LD_INT 0
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 30
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: PPUSH
18965: CALL_OW 69
18969: ST_TO_ADDR
// for i in tmp do
18970: LD_ADDR_VAR 0 1
18974: PUSH
18975: LD_VAR 0 2
18979: PUSH
18980: FOR_IN
18981: IFFALSE 19014
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18983: LD_ADDR_VAR 0 3
18987: PUSH
18988: LD_VAR 0 3
18992: PUSH
18993: LD_VAR 0 1
18997: PPUSH
18998: CALL_OW 274
19002: PPUSH
19003: LD_INT 1
19005: PPUSH
19006: CALL_OW 275
19010: PLUS
19011: ST_TO_ADDR
19012: GO 18980
19014: POP
19015: POP
// strings = [ ] ;
19016: LD_ADDR_EXP 27
19020: PUSH
19021: EMPTY
19022: ST_TO_ADDR
// if tmp = 0 then
19023: LD_VAR 0 2
19027: PUSH
19028: LD_INT 0
19030: EQUAL
19031: IFFALSE 19056
// strings = strings ^ [ #Am06-1 , needCrates ] ;
19033: LD_ADDR_EXP 27
19037: PUSH
19038: LD_EXP 27
19042: PUSH
19043: LD_STRING #Am06-1
19045: PUSH
19046: LD_EXP 25
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: ADD
19055: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
19056: LD_VAR 0 2
19060: PUSH
19061: LD_INT 0
19063: GREATER
19064: PUSH
19065: LD_EXP 25
19069: PUSH
19070: LD_VAR 0 3
19074: GREATER
19075: AND
19076: IFFALSE 19107
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
19078: LD_ADDR_EXP 27
19082: PUSH
19083: LD_EXP 27
19087: PUSH
19088: LD_STRING #Am06-1
19090: PUSH
19091: LD_EXP 25
19095: PUSH
19096: LD_VAR 0 3
19100: MINUS
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: ADD
19106: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
19107: LD_VAR 0 2
19111: PUSH
19112: LD_INT 0
19114: GREATER
19115: PUSH
19116: LD_EXP 25
19120: PUSH
19121: LD_VAR 0 3
19125: LESSEQUAL
19126: AND
19127: IFFALSE 19150
// strings = strings ^ [ #Am06-1 , 0 ] ;
19129: LD_ADDR_EXP 27
19133: PUSH
19134: LD_EXP 27
19138: PUSH
19139: LD_STRING #Am06-1
19141: PUSH
19142: LD_INT 0
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: ADD
19149: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19150: LD_ADDR_EXP 26
19154: PUSH
19155: LD_EXP 26
19159: PUSH
19160: LD_INT 35
19162: MINUS
19163: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19164: LD_ADDR_EXP 27
19168: PUSH
19169: LD_EXP 27
19173: PUSH
19174: LD_STRING #Am06-2
19176: PUSH
19177: LD_EXP 26
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: ADD
19186: ST_TO_ADDR
// display_strings = strings ;
19187: LD_ADDR_OWVAR 47
19191: PUSH
19192: LD_EXP 27
19196: ST_TO_ADDR
// enable ;
19197: ENABLE
// end ; end_of_file
19198: PPOPN 3
19200: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19201: LD_INT 0
19203: PPUSH
19204: PPUSH
19205: PPUSH
19206: PPUSH
19207: PPUSH
19208: PPUSH
19209: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19210: LD_ADDR_VAR 0 3
19214: PUSH
19215: LD_INT 22
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 2
19227: PUSH
19228: LD_INT 30
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 30
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PPUSH
19257: CALL_OW 69
19261: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19262: LD_INT 35
19264: PPUSH
19265: CALL_OW 67
// until depot ;
19269: LD_VAR 0 3
19273: IFFALSE 19210
// repeat wait ( 0 0$1 ) ;
19275: LD_INT 35
19277: PPUSH
19278: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19282: LD_ADDR_VAR 0 4
19286: PUSH
19287: LD_INT 22
19289: PUSH
19290: LD_INT 1
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 91
19299: PUSH
19300: LD_VAR 0 3
19304: PUSH
19305: LD_INT 1
19307: ARRAY
19308: PUSH
19309: LD_INT 15
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 21
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: LD_INT 25
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 25
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 25
19352: PUSH
19353: LD_INT 3
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 25
19362: PUSH
19363: LD_INT 4
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 3
19379: PUSH
19380: LD_INT 54
19382: PUSH
19383: EMPTY
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 3
19392: PUSH
19393: LD_INT 55
19395: PUSH
19396: EMPTY
19397: LIST
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: PPUSH
19411: CALL_OW 69
19415: PUSH
19416: LD_EXP 2
19420: PUSH
19421: LD_EXP 3
19425: PUSH
19426: LD_EXP 4
19430: PUSH
19431: LD_EXP 5
19435: PUSH
19436: LD_EXP 7
19440: PUSH
19441: LD_EXP 8
19445: PUSH
19446: LD_EXP 9
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: PUSH
19460: LD_EXP 46
19464: ADD
19465: DIFF
19466: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19467: LD_VAR 0 4
19471: PUSH
19472: LD_INT 1
19474: PPUSH
19475: CALL_OW 463
19479: NOT
19480: AND
19481: IFFALSE 19275
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19483: LD_ADDR_VAR 0 4
19487: PUSH
19488: LD_VAR 0 4
19492: PUSH
19493: LD_INT 1
19495: PPUSH
19496: LD_VAR 0 4
19500: PPUSH
19501: CALL_OW 12
19505: ARRAY
19506: ST_TO_ADDR
// blockSpawn = 1 ;
19507: LD_ADDR_EXP 29
19511: PUSH
19512: LD_INT 1
19514: ST_TO_ADDR
// uc_side = 2 ;
19515: LD_ADDR_OWVAR 20
19519: PUSH
19520: LD_INT 2
19522: ST_TO_ADDR
// uc_nation = 2 ;
19523: LD_ADDR_OWVAR 21
19527: PUSH
19528: LD_INT 2
19530: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19531: LD_ADDR_EXP 19
19535: PUSH
19536: LD_STRING Kurt
19538: PPUSH
19539: LD_INT 0
19541: PPUSH
19542: CALL 5947 0 2
19546: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19547: LD_EXP 19
19551: PPUSH
19552: LD_VAR 0 4
19556: PPUSH
19557: CALL_OW 250
19561: PPUSH
19562: LD_VAR 0 4
19566: PPUSH
19567: CALL_OW 251
19571: PPUSH
19572: LD_INT 5
19574: PPUSH
19575: LD_INT 1
19577: PPUSH
19578: CALL_OW 50
// InGameOn ;
19582: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19586: LD_EXP 19
19590: PPUSH
19591: CALL_OW 87
// wait ( 0 0$2 ) ;
19595: LD_INT 70
19597: PPUSH
19598: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19602: LD_EXP 19
19606: PPUSH
19607: LD_VAR 0 4
19611: PPUSH
19612: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19616: LD_VAR 0 4
19620: PPUSH
19621: LD_EXP 19
19625: PPUSH
19626: CALL_OW 112
// wait ( 0 0$1 ) ;
19630: LD_INT 35
19632: PPUSH
19633: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19637: LD_VAR 0 4
19641: PPUSH
19642: LD_EXP 19
19646: PPUSH
19647: CALL_OW 119
// DialogueOn ;
19651: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19655: LD_EXP 19
19659: PPUSH
19660: LD_STRING D2-Kurt-1
19662: PPUSH
19663: CALL_OW 88
// if tmp = JMM then
19667: LD_VAR 0 4
19671: PUSH
19672: LD_EXP 1
19676: EQUAL
19677: IFFALSE 19769
// begin Say ( JMM , D2-JMM-1 ) ;
19679: LD_EXP 1
19683: PPUSH
19684: LD_STRING D2-JMM-1
19686: PPUSH
19687: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19691: LD_EXP 19
19695: PPUSH
19696: LD_STRING D2-Kurt-2
19698: PPUSH
19699: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19703: LD_EXP 1
19707: PPUSH
19708: LD_STRING D2-JMM-2
19710: PPUSH
19711: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19715: LD_EXP 19
19719: PPUSH
19720: LD_STRING D2-Kurt-3
19722: PPUSH
19723: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19727: LD_EXP 1
19731: PPUSH
19732: LD_STRING D2-JMM-3
19734: PPUSH
19735: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19739: LD_EXP 19
19743: PPUSH
19744: LD_STRING D2-Kurt-4
19746: PPUSH
19747: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19751: LD_EXP 1
19755: PPUSH
19756: LD_STRING D2-JMM-4
19758: PPUSH
19759: CALL_OW 88
// DialogueOff ;
19763: CALL_OW 7
// end else
19767: GO 20079
// begin if GetSex ( tmp ) = 1 then
19769: LD_VAR 0 4
19773: PPUSH
19774: CALL_OW 258
19778: PUSH
19779: LD_INT 1
19781: EQUAL
19782: IFFALSE 19796
// Say ( tmp , D2-Sol1-1 ) ;
19784: LD_VAR 0 4
19788: PPUSH
19789: LD_STRING D2-Sol1-1
19791: PPUSH
19792: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19796: LD_VAR 0 4
19800: PPUSH
19801: CALL_OW 258
19805: PUSH
19806: LD_INT 2
19808: EQUAL
19809: IFFALSE 19823
// Say ( tmp , D2-FSol1-1 ) ;
19811: LD_VAR 0 4
19815: PPUSH
19816: LD_STRING D2-FSol1-1
19818: PPUSH
19819: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19823: LD_EXP 19
19827: PPUSH
19828: LD_STRING D2-Kurt-2
19830: PPUSH
19831: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19835: LD_VAR 0 4
19839: PPUSH
19840: CALL_OW 258
19844: PUSH
19845: LD_INT 1
19847: EQUAL
19848: IFFALSE 19862
// Say ( tmp , D2-Sol1-2 ) ;
19850: LD_VAR 0 4
19854: PPUSH
19855: LD_STRING D2-Sol1-2
19857: PPUSH
19858: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19862: LD_VAR 0 4
19866: PPUSH
19867: CALL_OW 258
19871: PUSH
19872: LD_INT 2
19874: EQUAL
19875: IFFALSE 19889
// Say ( tmp , D2-FSol1-2 ) ;
19877: LD_VAR 0 4
19881: PPUSH
19882: LD_STRING D2-FSol1-2
19884: PPUSH
19885: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19889: LD_EXP 19
19893: PPUSH
19894: LD_STRING D2-Kurt-3
19896: PPUSH
19897: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19901: LD_VAR 0 4
19905: PPUSH
19906: CALL_OW 258
19910: PUSH
19911: LD_INT 1
19913: EQUAL
19914: IFFALSE 19928
// Say ( tmp , D2-Sol1-3 ) ;
19916: LD_VAR 0 4
19920: PPUSH
19921: LD_STRING D2-Sol1-3
19923: PPUSH
19924: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19928: LD_VAR 0 4
19932: PPUSH
19933: CALL_OW 258
19937: PUSH
19938: LD_INT 2
19940: EQUAL
19941: IFFALSE 19955
// Say ( tmp , D2-FSol1-3 ) ;
19943: LD_VAR 0 4
19947: PPUSH
19948: LD_STRING D2-FSol1-3
19950: PPUSH
19951: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19955: LD_EXP 19
19959: PPUSH
19960: LD_STRING D2-Kurt-4
19962: PPUSH
19963: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19967: LD_VAR 0 4
19971: PPUSH
19972: CALL_OW 258
19976: PUSH
19977: LD_INT 1
19979: EQUAL
19980: IFFALSE 19994
// Say ( tmp , D2-Sol1-4 ) ;
19982: LD_VAR 0 4
19986: PPUSH
19987: LD_STRING D2-Sol1-4
19989: PPUSH
19990: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19994: LD_VAR 0 4
19998: PPUSH
19999: CALL_OW 258
20003: PUSH
20004: LD_INT 2
20006: EQUAL
20007: IFFALSE 20021
// Say ( tmp , D2-FSol1-4 ) ;
20009: LD_VAR 0 4
20013: PPUSH
20014: LD_STRING D2-FSol1-4
20016: PPUSH
20017: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20021: LD_VAR 0 4
20025: PPUSH
20026: CALL_OW 258
20030: PUSH
20031: LD_INT 1
20033: EQUAL
20034: IFFALSE 20048
// Say ( tmp , D2-Sol1-5 ) ;
20036: LD_VAR 0 4
20040: PPUSH
20041: LD_STRING D2-Sol1-5
20043: PPUSH
20044: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20048: LD_VAR 0 4
20052: PPUSH
20053: CALL_OW 258
20057: PUSH
20058: LD_INT 2
20060: EQUAL
20061: IFFALSE 20075
// Say ( tmp , D2-FSol1-5 ) ;
20063: LD_VAR 0 4
20067: PPUSH
20068: LD_STRING D2-FSol1-5
20070: PPUSH
20071: CALL_OW 88
// DialogueOff ;
20075: CALL_OW 7
// end ; dec = ShowQuery1 ;
20079: LD_ADDR_VAR 0 6
20083: PUSH
20084: CALL 6471 0 0
20088: ST_TO_ADDR
// if dec = 1 then
20089: LD_VAR 0 6
20093: PUSH
20094: LD_INT 1
20096: EQUAL
20097: IFFALSE 20139
// begin DialogueOn ;
20099: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20103: LD_EXP 19
20107: PPUSH
20108: LD_STRING D2a-Kurt-1
20110: PPUSH
20111: CALL_OW 88
// DialogueOff ;
20115: CALL_OW 7
// InGameOff ;
20119: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20123: LD_INT 1
20125: PPUSH
20126: LD_INT 2
20128: PPUSH
20129: LD_INT 2
20131: PPUSH
20132: LD_INT 1
20134: PPUSH
20135: CALL_OW 80
// end ; if dec = 2 then
20139: LD_VAR 0 6
20143: PUSH
20144: LD_INT 2
20146: EQUAL
20147: IFFALSE 20647
// begin DialogueOn ;
20149: CALL_OW 6
// if tmp = JMM then
20153: LD_VAR 0 4
20157: PUSH
20158: LD_EXP 1
20162: EQUAL
20163: IFFALSE 20219
// begin Say ( JMM , D2b-JMM-1 ) ;
20165: LD_EXP 1
20169: PPUSH
20170: LD_STRING D2b-JMM-1
20172: PPUSH
20173: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20177: LD_EXP 19
20181: PPUSH
20182: LD_STRING D2b-Kurt-1
20184: PPUSH
20185: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20189: LD_EXP 1
20193: PPUSH
20194: LD_STRING D2b-JMM-2
20196: PPUSH
20197: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20201: LD_EXP 19
20205: PPUSH
20206: LD_STRING D2b-Kurt-2
20208: PPUSH
20209: CALL_OW 88
// DialogueOff ;
20213: CALL_OW 7
// end else
20217: GO 20409
// begin if GetSex ( tmp ) = 1 then
20219: LD_VAR 0 4
20223: PPUSH
20224: CALL_OW 258
20228: PUSH
20229: LD_INT 1
20231: EQUAL
20232: IFFALSE 20246
// Say ( tmp , D2b-Sol1-1 ) ;
20234: LD_VAR 0 4
20238: PPUSH
20239: LD_STRING D2b-Sol1-1
20241: PPUSH
20242: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20246: LD_VAR 0 4
20250: PPUSH
20251: CALL_OW 258
20255: PUSH
20256: LD_INT 2
20258: EQUAL
20259: IFFALSE 20273
// Say ( tmp , D2b-FSol1-1 ) ;
20261: LD_VAR 0 4
20265: PPUSH
20266: LD_STRING D2b-FSol1-1
20268: PPUSH
20269: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20273: LD_EXP 19
20277: PPUSH
20278: LD_STRING D2b-Kurt-1
20280: PPUSH
20281: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20285: LD_VAR 0 4
20289: PPUSH
20290: CALL_OW 258
20294: PUSH
20295: LD_INT 1
20297: EQUAL
20298: IFFALSE 20312
// Say ( tmp , D2b-Sol1-2 ) ;
20300: LD_VAR 0 4
20304: PPUSH
20305: LD_STRING D2b-Sol1-2
20307: PPUSH
20308: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20312: LD_VAR 0 4
20316: PPUSH
20317: CALL_OW 258
20321: PUSH
20322: LD_INT 2
20324: EQUAL
20325: IFFALSE 20339
// Say ( tmp , D2b-FSol1-2 ) ;
20327: LD_VAR 0 4
20331: PPUSH
20332: LD_STRING D2b-FSol1-2
20334: PPUSH
20335: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20339: LD_EXP 19
20343: PPUSH
20344: LD_STRING D2b-Kurt-2
20346: PPUSH
20347: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20351: LD_VAR 0 4
20355: PPUSH
20356: CALL_OW 258
20360: PUSH
20361: LD_INT 1
20363: EQUAL
20364: IFFALSE 20378
// Say ( tmp , D2c-Sol1-2 ) ;
20366: LD_VAR 0 4
20370: PPUSH
20371: LD_STRING D2c-Sol1-2
20373: PPUSH
20374: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20378: LD_VAR 0 4
20382: PPUSH
20383: CALL_OW 258
20387: PUSH
20388: LD_INT 2
20390: EQUAL
20391: IFFALSE 20405
// Say ( tmp , D2c-FSol1-2 ) ;
20393: LD_VAR 0 4
20397: PPUSH
20398: LD_STRING D2c-FSol1-2
20400: PPUSH
20401: CALL_OW 88
// DialogueOff ;
20405: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20409: LD_ADDR_VAR 0 7
20413: PUSH
20414: CALL 6545 0 0
20418: ST_TO_ADDR
// if dec2 = 1 then
20419: LD_VAR 0 7
20423: PUSH
20424: LD_INT 1
20426: EQUAL
20427: IFFALSE 20469
// begin DialogueOn ;
20429: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20433: LD_EXP 19
20437: PPUSH
20438: LD_STRING D2a-Kurt-1
20440: PPUSH
20441: CALL_OW 88
// DialogueOff ;
20445: CALL_OW 7
// InGameOff ;
20449: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20453: LD_INT 1
20455: PPUSH
20456: LD_INT 2
20458: PPUSH
20459: LD_INT 2
20461: PPUSH
20462: LD_INT 1
20464: PPUSH
20465: CALL_OW 80
// end ; if dec2 = 2 then
20469: LD_VAR 0 7
20473: PUSH
20474: LD_INT 2
20476: EQUAL
20477: IFFALSE 20647
// begin if tmp = JMM then
20479: LD_VAR 0 4
20483: PUSH
20484: LD_EXP 1
20488: EQUAL
20489: IFFALSE 20549
// begin DialogueOn ;
20491: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20495: LD_EXP 1
20499: PPUSH
20500: LD_STRING D2c-JMM-1
20502: PPUSH
20503: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20507: LD_EXP 19
20511: PPUSH
20512: LD_STRING D2c-Kurt-1
20514: PPUSH
20515: CALL_OW 88
// DialogueOff ;
20519: CALL_OW 7
// InGameOff ;
20523: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20527: LD_EXP 19
20531: PPUSH
20532: LD_INT 8
20534: PPUSH
20535: CALL_OW 113
// readyToEscape = 1 ;
20539: LD_ADDR_EXP 21
20543: PUSH
20544: LD_INT 1
20546: ST_TO_ADDR
// end else
20547: GO 20647
// begin DialogueOn ;
20549: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20553: LD_VAR 0 4
20557: PPUSH
20558: CALL_OW 258
20562: PUSH
20563: LD_INT 1
20565: EQUAL
20566: IFFALSE 20580
// Say ( tmp , D2c-Sol1-1 ) ;
20568: LD_VAR 0 4
20572: PPUSH
20573: LD_STRING D2c-Sol1-1
20575: PPUSH
20576: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20580: LD_VAR 0 4
20584: PPUSH
20585: CALL_OW 258
20589: PUSH
20590: LD_INT 2
20592: EQUAL
20593: IFFALSE 20607
// Say ( tmp , D2c-FSol1-1 ) ;
20595: LD_VAR 0 4
20599: PPUSH
20600: LD_STRING D2c-FSol1-1
20602: PPUSH
20603: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20607: LD_EXP 19
20611: PPUSH
20612: LD_STRING D2c-Kurt-1
20614: PPUSH
20615: CALL_OW 88
// DialogueOff ;
20619: CALL_OW 7
// InGameOff ;
20623: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20627: LD_EXP 19
20631: PPUSH
20632: LD_INT 8
20634: PPUSH
20635: CALL_OW 113
// readyToEscape = 1 ;
20639: LD_ADDR_EXP 21
20643: PUSH
20644: LD_INT 1
20646: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20647: LD_VAR 0 6
20651: PUSH
20652: LD_INT 3
20654: EQUAL
20655: IFFALSE 20829
// begin DialogueOn ;
20657: CALL_OW 6
// if tmp = JMM then
20661: LD_VAR 0 4
20665: PUSH
20666: LD_EXP 1
20670: EQUAL
20671: IFFALSE 20731
// begin DialogueOn ;
20673: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20677: LD_EXP 1
20681: PPUSH
20682: LD_STRING D2c-JMM-1
20684: PPUSH
20685: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20689: LD_EXP 19
20693: PPUSH
20694: LD_STRING D2c-Kurt-1
20696: PPUSH
20697: CALL_OW 88
// DialogueOff ;
20701: CALL_OW 7
// InGameOff ;
20705: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20709: LD_EXP 19
20713: PPUSH
20714: LD_INT 8
20716: PPUSH
20717: CALL_OW 113
// readyToEscape = 1 ;
20721: LD_ADDR_EXP 21
20725: PUSH
20726: LD_INT 1
20728: ST_TO_ADDR
// end else
20729: GO 20829
// begin DialogueOn ;
20731: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20735: LD_VAR 0 4
20739: PPUSH
20740: CALL_OW 258
20744: PUSH
20745: LD_INT 1
20747: EQUAL
20748: IFFALSE 20762
// Say ( tmp , D2c-Sol1-1 ) ;
20750: LD_VAR 0 4
20754: PPUSH
20755: LD_STRING D2c-Sol1-1
20757: PPUSH
20758: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20762: LD_VAR 0 4
20766: PPUSH
20767: CALL_OW 258
20771: PUSH
20772: LD_INT 2
20774: EQUAL
20775: IFFALSE 20789
// Say ( tmp , D2c-FSol1-1 ) ;
20777: LD_VAR 0 4
20781: PPUSH
20782: LD_STRING D2c-FSol1-1
20784: PPUSH
20785: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20789: LD_EXP 19
20793: PPUSH
20794: LD_STRING D2c-Kurt-1
20796: PPUSH
20797: CALL_OW 88
// DialogueOff ;
20801: CALL_OW 7
// InGameOff ;
20805: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20809: LD_EXP 19
20813: PPUSH
20814: LD_INT 8
20816: PPUSH
20817: CALL_OW 113
// readyToEscape = 1 ;
20821: LD_ADDR_EXP 21
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20829: LD_ADDR_EXP 29
20833: PUSH
20834: LD_INT 0
20836: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20837: LD_INT 35
20839: PPUSH
20840: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20844: LD_EXP 19
20848: PPUSH
20849: LD_INT 8
20851: PPUSH
20852: CALL_OW 308
20856: PUSH
20857: LD_EXP 21
20861: AND
20862: PUSH
20863: LD_EXP 19
20867: PPUSH
20868: CALL_OW 301
20872: OR
20873: IFFALSE 20837
// if IsDead ( Kurt ) then
20875: LD_EXP 19
20879: PPUSH
20880: CALL_OW 301
20884: IFFALSE 20888
// exit ;
20886: GO 20957
// RemoveUnit ( Kurt ) ;
20888: LD_EXP 19
20892: PPUSH
20893: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20897: LD_EXP 19
20901: PPUSH
20902: LD_STRING Kurt
20904: PPUSH
20905: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20909: LD_INT 1
20911: PPUSH
20912: LD_INT 2
20914: PPUSH
20915: CALL_OW 81
20919: PUSH
20920: LD_INT 0
20922: EQUAL
20923: IFFALSE 20933
// KurtStatus = 1 ;
20925: LD_ADDR_EXP 20
20929: PUSH
20930: LD_INT 1
20932: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20933: LD_INT 1
20935: PPUSH
20936: LD_INT 2
20938: PPUSH
20939: CALL_OW 81
20943: PUSH
20944: LD_INT 2
20946: EQUAL
20947: IFFALSE 20957
// KurtStatus = 2 ;
20949: LD_ADDR_EXP 20
20953: PUSH
20954: LD_INT 2
20956: ST_TO_ADDR
// end ; end_of_file
20957: LD_VAR 0 1
20961: RET
// every 0 0$1 do
20962: GO 20964
20964: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
20965: LD_INT 3
20967: PPUSH
20968: LD_INT 32
20970: PPUSH
20971: LD_INT 3
20973: PPUSH
20974: CALL 6600 0 3
20978: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20979: GO 20981
20981: DISABLE
20982: LD_INT 0
20984: PPUSH
// begin enemyWayX = [ ] ;
20985: LD_ADDR_EXP 49
20989: PUSH
20990: EMPTY
20991: ST_TO_ADDR
// enemyWayY = [ ] ;
20992: LD_ADDR_EXP 50
20996: PUSH
20997: EMPTY
20998: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
20999: LD_ADDR_VAR 0 1
21003: PUSH
21004: LD_INT 1
21006: PPUSH
21007: LD_INT 2
21009: PPUSH
21010: CALL_OW 12
21014: ST_TO_ADDR
// if rnd = 1 then
21015: LD_VAR 0 1
21019: PUSH
21020: LD_INT 1
21022: EQUAL
21023: IFFALSE 21063
// begin enemyWayX = [ 93 , 84 , 104 ] ;
21025: LD_ADDR_EXP 49
21029: PUSH
21030: LD_INT 93
21032: PUSH
21033: LD_INT 84
21035: PUSH
21036: LD_INT 104
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
21044: LD_ADDR_EXP 50
21048: PUSH
21049: LD_INT 51
21051: PUSH
21052: LD_INT 35
21054: PUSH
21055: LD_INT 28
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: ST_TO_ADDR
// end ; if rnd = 2 then
21063: LD_VAR 0 1
21067: PUSH
21068: LD_INT 2
21070: EQUAL
21071: IFFALSE 21127
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
21073: LD_ADDR_EXP 49
21077: PUSH
21078: LD_INT 93
21080: PUSH
21081: LD_INT 52
21083: PUSH
21084: LD_INT 34
21086: PUSH
21087: LD_INT 28
21089: PUSH
21090: LD_INT 30
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
21100: LD_ADDR_EXP 50
21104: PUSH
21105: LD_INT 51
21107: PUSH
21108: LD_INT 45
21110: PUSH
21111: LD_INT 35
21113: PUSH
21114: LD_INT 26
21116: PUSH
21117: LD_INT 20
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: ST_TO_ADDR
// end ; enable ;
21127: ENABLE
// end ;
21128: PPOPN 1
21130: END
// every 0 0$1 do
21131: GO 21133
21133: DISABLE
// begin enable ;
21134: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21135: LD_INT 3
21137: PPUSH
21138: LD_INT 2
21140: PPUSH
21141: LD_INT 10
21143: PPUSH
21144: LD_EXP 31
21148: PPUSH
21149: CALL 8035 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21153: LD_INT 3
21155: PPUSH
21156: LD_INT 12
21158: PPUSH
21159: LD_EXP 31
21163: PPUSH
21164: CALL 9920 0 3
// if disableHealAI = 0 then
21168: LD_EXP 33
21172: PUSH
21173: LD_INT 0
21175: EQUAL
21176: IFFALSE 21197
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21178: LD_INT 3
21180: PPUSH
21181: LD_INT 9
21183: PPUSH
21184: LD_INT 10
21186: PPUSH
21187: LD_INT 32
21189: PUSH
21190: EMPTY
21191: LIST
21192: PPUSH
21193: CALL 8426 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21197: LD_INT 3
21199: PPUSH
21200: LD_INT 51
21202: PPUSH
21203: LD_INT 6
21205: PPUSH
21206: CALL 9134 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21210: LD_INT 3
21212: PPUSH
21213: LD_INT 12
21215: PPUSH
21216: LD_INT 121
21218: PPUSH
21219: LD_INT 100
21221: PPUSH
21222: CALL 6995 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21226: LD_INT 3
21228: PPUSH
21229: LD_INT 22
21231: PPUSH
21232: LD_EXP 49
21236: PPUSH
21237: LD_EXP 50
21241: PPUSH
21242: CALL 7198 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21246: LD_INT 3
21248: PPUSH
21249: LD_INT 10
21251: PPUSH
21252: CALL 9277 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21256: LD_INT 3
21258: PPUSH
21259: LD_INT 1
21261: PPUSH
21262: CALL 9690 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21266: LD_INT 2
21268: PPUSH
21269: CALL_OW 303
21273: PUSH
21274: LD_INT 2
21276: PPUSH
21277: CALL_OW 255
21281: PUSH
21282: LD_INT 1
21284: EQUAL
21285: OR
21286: IFFALSE 21298
// DefendDepot ( 3 , rudepo ) ;
21288: LD_INT 3
21290: PPUSH
21291: LD_INT 2
21293: PPUSH
21294: CALL 8970 0 2
// end ;
21298: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21299: LD_INT 22
21301: PUSH
21302: LD_INT 3
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 21
21311: PUSH
21312: LD_INT 2
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 55
21321: PUSH
21322: EMPTY
21323: LIST
21324: PUSH
21325: LD_INT 3
21327: PUSH
21328: LD_INT 34
21330: PUSH
21331: LD_INT 51
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: PPUSH
21348: CALL_OW 69
21352: PUSH
21353: LD_INT 0
21355: EQUAL
21356: PUSH
21357: LD_INT 21
21359: PPUSH
21360: CALL_OW 255
21364: PUSH
21365: LD_INT 3
21367: EQUAL
21368: AND
21369: PUSH
21370: LD_INT 21
21372: PPUSH
21373: CALL_OW 302
21377: AND
21378: PUSH
21379: LD_INT 2
21381: PPUSH
21382: CALL_OW 255
21386: PUSH
21387: LD_INT 3
21389: EQUAL
21390: AND
21391: PUSH
21392: LD_INT 2
21394: PPUSH
21395: CALL_OW 302
21399: AND
21400: IFFALSE 21580
21402: GO 21404
21404: DISABLE
// begin enable ;
21405: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21406: LD_INT 2
21408: PPUSH
21409: CALL_OW 274
21413: PPUSH
21414: LD_INT 1
21416: PPUSH
21417: LD_INT 1000
21419: PPUSH
21420: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21424: LD_INT 3
21426: PPUSH
21427: LD_INT 21
21429: PPUSH
21430: LD_INT 4
21432: PUSH
21433: LD_INT 5
21435: PUSH
21436: LD_INT 6
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: LIST
21443: PUSH
21444: LD_OWVAR 67
21448: ARRAY
21449: PPUSH
21450: LD_INT 43
21452: PUSH
21453: LD_INT 43
21455: PUSH
21456: LD_INT 44
21458: PUSH
21459: LD_INT 44
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 43
21470: PUSH
21471: LD_INT 43
21473: PUSH
21474: LD_INT 43
21476: PUSH
21477: LD_INT 44
21479: PUSH
21480: LD_INT 44
21482: PUSH
21483: LD_INT 46
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 43
21496: PUSH
21497: LD_INT 43
21499: PUSH
21500: LD_INT 43
21502: PUSH
21503: LD_INT 44
21505: PUSH
21506: LD_INT 44
21508: PUSH
21509: LD_INT 46
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: PUSH
21525: LD_OWVAR 67
21529: ARRAY
21530: PPUSH
21531: LD_INT 1
21533: PPUSH
21534: LD_INT 1
21536: PPUSH
21537: LD_INT 22
21539: PUSH
21540: LD_INT 22
21542: PUSH
21543: LD_INT 24
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: PPUSH
21553: LD_INT 2
21555: PPUSH
21556: CALL_OW 12
21560: ARRAY
21561: PUSH
21562: LD_INT 24
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: LIST
21569: PUSH
21570: LD_OWVAR 67
21574: ARRAY
21575: PPUSH
21576: CALL 6841 0 7
// end ;
21580: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21581: LD_INT 17
21583: PPUSH
21584: CALL_OW 255
21588: PUSH
21589: LD_INT 3
21591: EQUAL
21592: PUSH
21593: LD_INT 17
21595: PPUSH
21596: CALL_OW 302
21600: AND
21601: PUSH
21602: LD_INT 2
21604: PPUSH
21605: CALL_OW 255
21609: PUSH
21610: LD_INT 3
21612: EQUAL
21613: AND
21614: PUSH
21615: LD_INT 2
21617: PPUSH
21618: CALL_OW 302
21622: AND
21623: IFFALSE 21690
21625: GO 21627
21627: DISABLE
// begin enable ;
21628: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21629: LD_INT 17
21631: PPUSH
21632: LD_INT 22
21634: PPUSH
21635: LD_INT 1
21637: PPUSH
21638: LD_INT 1
21640: PPUSH
21641: LD_INT 42
21643: PUSH
21644: LD_INT 43
21646: PUSH
21647: LD_INT 44
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 1
21657: PPUSH
21658: LD_INT 3
21660: PPUSH
21661: CALL_OW 12
21665: ARRAY
21666: PPUSH
21667: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21671: LD_INT 17
21673: PPUSH
21674: LD_INT 22
21676: PPUSH
21677: LD_INT 1
21679: PPUSH
21680: LD_INT 1
21682: PPUSH
21683: LD_INT 51
21685: PPUSH
21686: CALL_OW 185
// end ;
21690: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21691: LD_INT 17
21693: PPUSH
21694: CALL_OW 302
21698: PUSH
21699: LD_INT 17
21701: PPUSH
21702: CALL_OW 255
21706: PUSH
21707: LD_INT 3
21709: EQUAL
21710: AND
21711: PUSH
21712: LD_INT 2
21714: PPUSH
21715: CALL_OW 302
21719: AND
21720: PUSH
21721: LD_INT 2
21723: PPUSH
21724: CALL_OW 255
21728: PUSH
21729: LD_INT 3
21731: EQUAL
21732: AND
21733: PUSH
21734: LD_INT 17
21736: PPUSH
21737: CALL_OW 313
21741: NOT
21742: AND
21743: IFFALSE 21837
21745: GO 21747
21747: DISABLE
21748: LD_INT 0
21750: PPUSH
// begin for i = 1 to 6 do
21751: LD_ADDR_VAR 0 1
21755: PUSH
21756: DOUBLE
21757: LD_INT 1
21759: DEC
21760: ST_TO_ADDR
21761: LD_INT 6
21763: PUSH
21764: FOR_TO
21765: IFFALSE 21835
// begin uc_side = 3 ;
21767: LD_ADDR_OWVAR 20
21771: PUSH
21772: LD_INT 3
21774: ST_TO_ADDR
// uc_nation = 3 ;
21775: LD_ADDR_OWVAR 21
21779: PUSH
21780: LD_INT 3
21782: ST_TO_ADDR
// hc_gallery :=  ;
21783: LD_ADDR_OWVAR 33
21787: PUSH
21788: LD_STRING 
21790: ST_TO_ADDR
// hc_name :=  ;
21791: LD_ADDR_OWVAR 26
21795: PUSH
21796: LD_STRING 
21798: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21799: LD_INT 0
21801: PPUSH
21802: LD_EXP 34
21806: PPUSH
21807: LD_EXP 35
21811: PPUSH
21812: CALL_OW 12
21816: PPUSH
21817: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21821: CALL_OW 44
21825: PPUSH
21826: LD_INT 17
21828: PPUSH
21829: CALL_OW 52
// end ;
21833: GO 21764
21835: POP
21836: POP
// end ;
21837: PPOPN 1
21839: END
// every 2 2$0 do var i , j ;
21840: GO 21842
21842: DISABLE
21843: LD_INT 0
21845: PPUSH
21846: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21847: LD_INT 14700
21849: PUSH
21850: LD_INT 33600
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: PPUSH
21860: LD_INT 2
21862: PPUSH
21863: CALL_OW 12
21867: ARRAY
21868: PPUSH
21869: CALL_OW 67
// disableHealAI = 1 ;
21873: LD_ADDR_EXP 33
21877: PUSH
21878: LD_INT 1
21880: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21881: LD_ADDR_VAR 0 1
21885: PUSH
21886: LD_INT 22
21888: PUSH
21889: LD_INT 3
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 25
21898: PUSH
21899: LD_INT 4
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PPUSH
21910: CALL_OW 69
21914: PUSH
21915: FOR_IN
21916: IFFALSE 21929
// ComExitBuilding ( i ) ;
21918: LD_VAR 0 1
21922: PPUSH
21923: CALL_OW 122
21927: GO 21915
21929: POP
21930: POP
// wait ( 0 0$1 ) ;
21931: LD_INT 35
21933: PPUSH
21934: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21938: LD_INT 35
21940: PPUSH
21941: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21945: LD_ADDR_VAR 0 1
21949: PUSH
21950: LD_INT 22
21952: PUSH
21953: LD_INT 3
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 25
21962: PUSH
21963: LD_INT 4
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PPUSH
21974: CALL_OW 69
21978: PUSH
21979: FOR_IN
21980: IFFALSE 22057
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
21982: LD_ADDR_VAR 0 2
21986: PUSH
21987: LD_INT 17
21989: PPUSH
21990: LD_INT 22
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 25
22002: PUSH
22003: LD_INT 12
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PPUSH
22014: CALL_OW 70
22018: PUSH
22019: FOR_IN
22020: IFFALSE 22053
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
22022: LD_VAR 0 1
22026: PPUSH
22027: LD_VAR 0 2
22031: PPUSH
22032: CALL_OW 250
22036: PPUSH
22037: LD_VAR 0 2
22041: PPUSH
22042: CALL_OW 251
22046: PPUSH
22047: CALL_OW 191
// end ;
22051: GO 22019
22053: POP
22054: POP
// end ;
22055: GO 21979
22057: POP
22058: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
22059: LD_INT 22
22061: PUSH
22062: LD_INT 3
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 25
22071: PUSH
22072: LD_INT 4
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PPUSH
22083: CALL_OW 69
22087: PUSH
22088: LD_INT 0
22090: EQUAL
22091: PUSH
22092: LD_EXP 32
22096: PUSH
22097: LD_INT 6
22099: PUSH
22100: LD_INT 7
22102: PUSH
22103: LD_INT 8
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: LIST
22110: PUSH
22111: LD_OWVAR 67
22115: ARRAY
22116: GREATEREQUAL
22117: OR
22118: PUSH
22119: LD_INT 17
22121: PPUSH
22122: LD_INT 22
22124: PUSH
22125: LD_INT 0
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 25
22134: PUSH
22135: LD_INT 12
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PPUSH
22146: CALL_OW 70
22150: PUSH
22151: LD_INT 0
22153: EQUAL
22154: OR
22155: IFFALSE 21938
// disableHealAI = 0 ;
22157: LD_ADDR_EXP 33
22161: PUSH
22162: LD_INT 0
22164: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22165: LD_ADDR_VAR 0 1
22169: PUSH
22170: LD_INT 22
22172: PUSH
22173: LD_INT 3
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 25
22182: PUSH
22183: LD_INT 12
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PPUSH
22194: CALL_OW 69
22198: PUSH
22199: FOR_IN
22200: IFFALSE 22216
// SetClass ( i , 16 ) ;
22202: LD_VAR 0 1
22206: PPUSH
22207: LD_INT 16
22209: PPUSH
22210: CALL_OW 336
22214: GO 22199
22216: POP
22217: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22218: LD_ADDR_VAR 0 1
22222: PUSH
22223: LD_INT 22
22225: PUSH
22226: LD_INT 3
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 25
22235: PUSH
22236: LD_INT 4
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PPUSH
22247: CALL_OW 69
22251: PUSH
22252: FOR_IN
22253: IFFALSE 22272
// ComMoveXY ( i , 113 , 94 ) ;
22255: LD_VAR 0 1
22259: PPUSH
22260: LD_INT 113
22262: PPUSH
22263: LD_INT 94
22265: PPUSH
22266: CALL_OW 111
22270: GO 22252
22272: POP
22273: POP
// end ;
22274: PPOPN 2
22276: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22277: LD_INT 21
22279: PPUSH
22280: CALL_OW 255
22284: PUSH
22285: LD_INT 3
22287: EQUAL
22288: PUSH
22289: LD_INT 21
22291: PPUSH
22292: CALL_OW 302
22296: AND
22297: PUSH
22298: LD_INT 22
22300: PUSH
22301: LD_INT 3
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 34
22310: PUSH
22311: LD_INT 51
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PPUSH
22322: CALL_OW 69
22326: PUSH
22327: LD_INT 0
22329: EQUAL
22330: AND
22331: IFFALSE 22363
22333: GO 22335
22335: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22336: LD_INT 21
22338: PPUSH
22339: LD_INT 23
22341: PPUSH
22342: LD_INT 1
22344: PPUSH
22345: LD_INT 1
22347: PPUSH
22348: LD_INT 51
22350: PPUSH
22351: CALL_OW 185
// wait ( 5 5$0 ) ;
22355: LD_INT 10500
22357: PPUSH
22358: CALL_OW 67
// enable ;
22362: ENABLE
// end ; end_of_file
22363: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22364: LD_EXP 26
22368: PUSH
22369: LD_INT 0
22371: LESSEQUAL
22372: IFFALSE 22521
22374: GO 22376
22376: DISABLE
22377: LD_INT 0
22379: PPUSH
22380: PPUSH
22381: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22382: LD_ADDR_VAR 0 2
22386: PUSH
22387: LD_INT 22
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 21
22399: PUSH
22400: LD_INT 3
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 2
22409: PUSH
22410: LD_INT 30
22412: PUSH
22413: LD_INT 0
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 30
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: LIST
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: PPUSH
22440: CALL_OW 69
22444: ST_TO_ADDR
// for i in tmp do
22445: LD_ADDR_VAR 0 1
22449: PUSH
22450: LD_VAR 0 2
22454: PUSH
22455: FOR_IN
22456: IFFALSE 22489
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22458: LD_ADDR_VAR 0 3
22462: PUSH
22463: LD_VAR 0 3
22467: PUSH
22468: LD_VAR 0 1
22472: PPUSH
22473: CALL_OW 274
22477: PPUSH
22478: LD_INT 1
22480: PPUSH
22481: CALL_OW 275
22485: PLUS
22486: ST_TO_ADDR
22487: GO 22455
22489: POP
22490: POP
// if yourCrates >= needCrates then
22491: LD_VAR 0 3
22495: PUSH
22496: LD_EXP 25
22500: GREATEREQUAL
22501: IFFALSE 22514
// begin FinishMission ( yourCrates ) ;
22503: LD_VAR 0 3
22507: PPUSH
22508: CALL 22524 0 1
// end else
22512: GO 22521
// begin YouLost ( matmin ) ;
22514: LD_STRING matmin
22516: PPUSH
22517: CALL_OW 104
// end ; end ;
22521: PPOPN 3
22523: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
22524: LD_INT 0
22526: PPUSH
22527: PPUSH
22528: PPUSH
22529: PPUSH
// if killCounter = 0 then
22530: LD_EXP 47
22534: PUSH
22535: LD_INT 0
22537: EQUAL
22538: IFFALSE 22547
// SetAchievement ( ACH_SURV ) ;
22540: LD_STRING ACH_SURV
22542: PPUSH
22543: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
22547: LD_INT 22
22549: PUSH
22550: LD_INT 3
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 21
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PPUSH
22571: CALL_OW 69
22575: PUSH
22576: LD_INT 0
22578: EQUAL
22579: IFFALSE 22595
// begin wait ( 3 ) ;
22581: LD_INT 3
22583: PPUSH
22584: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
22588: LD_STRING ACH_BASEDESTROYER
22590: PPUSH
22591: CALL_OW 543
// end ; m1 := false ;
22595: LD_ADDR_VAR 0 3
22599: PUSH
22600: LD_INT 0
22602: ST_TO_ADDR
// m2 := false ;
22603: LD_ADDR_VAR 0 4
22607: PUSH
22608: LD_INT 0
22610: ST_TO_ADDR
// m3 := false ;
22611: LD_ADDR_VAR 0 5
22615: PUSH
22616: LD_INT 0
22618: ST_TO_ADDR
// if crates + 100 > crates then
22619: LD_VAR 0 1
22623: PUSH
22624: LD_INT 100
22626: PLUS
22627: PUSH
22628: LD_VAR 0 1
22632: GREATER
22633: IFFALSE 22665
// begin AddMedal ( cans , 1 ) ;
22635: LD_STRING cans
22637: PPUSH
22638: LD_INT 1
22640: PPUSH
22641: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22645: LD_INT 1
22647: PPUSH
22648: LD_STRING 06_crates_1
22650: PPUSH
22651: CALL_OW 39
// m1 := true ;
22655: LD_ADDR_VAR 0 3
22659: PUSH
22660: LD_INT 1
22662: ST_TO_ADDR
// end else
22663: GO 22686
// begin AddMedal ( cans , - 1 ) ;
22665: LD_STRING cans
22667: PPUSH
22668: LD_INT 1
22670: NEG
22671: PPUSH
22672: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22676: LD_INT 0
22678: PPUSH
22679: LD_STRING 06_crates_1
22681: PPUSH
22682: CALL_OW 39
// end ; if unitLost < 3 then
22686: LD_EXP 30
22690: PUSH
22691: LD_INT 3
22693: LESS
22694: IFFALSE 22716
// begin AddMedal ( people , 1 ) ;
22696: LD_STRING people
22698: PPUSH
22699: LD_INT 1
22701: PPUSH
22702: CALL_OW 101
// m2 := true ;
22706: LD_ADDR_VAR 0 4
22710: PUSH
22711: LD_INT 1
22713: ST_TO_ADDR
// end else
22714: GO 22727
// begin AddMedal ( people , - 1 ) ;
22716: LD_STRING people
22718: PPUSH
22719: LD_INT 1
22721: NEG
22722: PPUSH
22723: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22727: LD_EXP 28
22731: PPUSH
22732: LD_STRING 06_remoteVehs_1
22734: PPUSH
22735: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22739: LD_EXP 28
22743: PUSH
22744: LD_INT 1
22746: EQUAL
22747: IFFALSE 22769
// begin AddMedal ( remote , 1 ) ;
22749: LD_STRING remote
22751: PPUSH
22752: LD_INT 1
22754: PPUSH
22755: CALL_OW 101
// m3 := true ;
22759: LD_ADDR_VAR 0 5
22763: PUSH
22764: LD_INT 1
22766: ST_TO_ADDR
// end else
22767: GO 22809
// begin if GetTech ( 18 , 1 ) = state_enabled then
22769: LD_INT 18
22771: PPUSH
22772: LD_INT 1
22774: PPUSH
22775: CALL_OW 321
22779: PUSH
22780: LD_INT 1
22782: EQUAL
22783: IFFALSE 22798
// begin AddMedal ( remote , - 1 ) ;
22785: LD_STRING remote
22787: PPUSH
22788: LD_INT 1
22790: NEG
22791: PPUSH
22792: CALL_OW 101
// end else
22796: GO 22809
// begin AddMedal ( remote , - 2 ) ;
22798: LD_STRING remote
22800: PPUSH
22801: LD_INT 2
22803: NEG
22804: PPUSH
22805: CALL_OW 101
// end ; end ; if m1 and m2 and m3 then
22809: LD_VAR 0 3
22813: PUSH
22814: LD_VAR 0 4
22818: AND
22819: PUSH
22820: LD_VAR 0 5
22824: AND
22825: IFFALSE 22841
// begin wait ( 3 ) ;
22827: LD_INT 3
22829: PPUSH
22830: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
22834: LD_STRING ACH_ASPEED_6
22836: PPUSH
22837: CALL_OW 543
// end ; if Difficulty = 3 and m1 and m2 and m3 then
22841: LD_OWVAR 67
22845: PUSH
22846: LD_INT 3
22848: EQUAL
22849: PUSH
22850: LD_VAR 0 3
22854: AND
22855: PUSH
22856: LD_VAR 0 4
22860: AND
22861: PUSH
22862: LD_VAR 0 5
22866: AND
22867: IFFALSE 22879
// SetAchievementEX ( ACH_AMER , 6 ) ;
22869: LD_STRING ACH_AMER
22871: PPUSH
22872: LD_INT 6
22874: PPUSH
22875: CALL_OW 564
// SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22879: LD_EXP 20
22883: PPUSH
22884: LD_STRING 06_KurtStatus_1
22886: PPUSH
22887: CALL_OW 39
// GiveMedals ( Main ) ;
22891: LD_STRING Main
22893: PPUSH
22894: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22898: LD_INT 22
22900: PUSH
22901: LD_INT 1
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 21
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 50
22920: PUSH
22921: EMPTY
22922: LIST
22923: PUSH
22924: LD_INT 2
22926: PUSH
22927: LD_INT 25
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 25
22939: PUSH
22940: LD_INT 2
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 25
22949: PUSH
22950: LD_INT 3
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 25
22959: PUSH
22960: LD_INT 4
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: PPUSH
22980: CALL_OW 69
22984: PPUSH
22985: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22989: LD_EXP 1
22993: PPUSH
22994: LD_EXP 43
22998: PUSH
22999: LD_STRING JMM
23001: STR
23002: PPUSH
23003: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23007: LD_EXP 2
23011: PPUSH
23012: LD_EXP 43
23016: PUSH
23017: LD_STRING Lisa
23019: STR
23020: PPUSH
23021: CALL 6099 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23025: LD_EXP 3
23029: PPUSH
23030: LD_EXP 43
23034: PUSH
23035: LD_STRING Bobby
23037: STR
23038: PPUSH
23039: CALL 6099 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23043: LD_EXP 4
23047: PPUSH
23048: LD_EXP 43
23052: PUSH
23053: LD_STRING Cyrus
23055: STR
23056: PPUSH
23057: CALL 6099 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23061: LD_EXP 5
23065: PPUSH
23066: LD_EXP 43
23070: PUSH
23071: LD_STRING Frank
23073: STR
23074: PPUSH
23075: CALL 6099 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23079: LD_EXP 6
23083: PPUSH
23084: LD_EXP 43
23088: PUSH
23089: LD_STRING Brown
23091: STR
23092: PPUSH
23093: CALL 6099 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23097: LD_EXP 7
23101: PPUSH
23102: LD_EXP 43
23106: PUSH
23107: LD_STRING Donaldson
23109: STR
23110: PPUSH
23111: CALL 6099 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23115: LD_EXP 8
23119: PPUSH
23120: LD_EXP 43
23124: PUSH
23125: LD_STRING Gladstone
23127: STR
23128: PPUSH
23129: CALL 6099 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23133: LD_EXP 9
23137: PPUSH
23138: LD_EXP 43
23142: PUSH
23143: LD_STRING Denis
23145: STR
23146: PPUSH
23147: CALL 6099 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23151: LD_EXP 15
23155: PPUSH
23156: LD_EXP 43
23160: PUSH
23161: LD_STRING Joan
23163: STR
23164: PPUSH
23165: CALL 6099 0 2
// if IsLive ( Joan ) then
23169: LD_EXP 15
23173: PPUSH
23174: CALL_OW 300
23178: IFFALSE 23192
// SaveCharacters ( Joan , Joan ) ;
23180: LD_EXP 15
23184: PPUSH
23185: LD_STRING Joan
23187: PPUSH
23188: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
23192: LD_EXP 16
23196: PPUSH
23197: LD_STRING 06_JoanStatus_1
23199: PPUSH
23200: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
23204: LD_INT 50
23206: PUSH
23207: EMPTY
23208: LIST
23209: PUSH
23210: LD_INT 22
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 21
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 2
23232: PUSH
23233: LD_INT 25
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 25
23245: PUSH
23246: LD_INT 2
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 25
23255: PUSH
23256: LD_INT 3
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 25
23265: PUSH
23266: LD_INT 4
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: PPUSH
23286: CALL_OW 69
23290: PUSH
23291: LD_EXP 1
23295: PUSH
23296: LD_EXP 2
23300: PUSH
23301: LD_EXP 3
23305: PUSH
23306: LD_EXP 4
23310: PUSH
23311: LD_EXP 5
23315: PUSH
23316: LD_EXP 6
23320: PUSH
23321: LD_EXP 7
23325: PUSH
23326: LD_EXP 8
23330: PUSH
23331: LD_EXP 9
23335: PUSH
23336: LD_EXP 15
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: DIFF
23353: PPUSH
23354: LD_STRING 06_other_survivors
23356: PPUSH
23357: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23361: LD_INT 50
23363: PUSH
23364: EMPTY
23365: LIST
23366: PUSH
23367: LD_INT 22
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 21
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 2
23389: PUSH
23390: LD_INT 25
23392: PUSH
23393: LD_INT 12
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 25
23402: PUSH
23403: LD_INT 16
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: LIST
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: PPUSH
23421: CALL_OW 69
23425: PPUSH
23426: LD_STRING 06_other_apemans
23428: PPUSH
23429: CALL_OW 38
// YouWin ;
23433: CALL_OW 103
// end ; end_of_file
23437: LD_VAR 0 2
23441: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23442: LD_EXP 39
23446: PUSH
23447: LD_INT 3
23449: EQUAL
23450: IFFALSE 23565
23452: GO 23454
23454: DISABLE
// begin enable ;
23455: ENABLE
// sendedConvoys = 0 ;
23456: LD_ADDR_EXP 39
23460: PUSH
23461: LD_INT 0
23463: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23464: LD_INT 6
23466: PPUSH
23467: LD_INT 3
23469: PPUSH
23470: LD_INT 5
23472: PPUSH
23473: LD_INT 10
23475: PPUSH
23476: CALL_OW 12
23480: PUSH
23481: LD_INT 5
23483: PPUSH
23484: LD_INT 11
23486: PPUSH
23487: CALL_OW 12
23491: PUSH
23492: LD_INT 8
23494: PPUSH
23495: LD_INT 12
23497: PPUSH
23498: CALL_OW 12
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: LIST
23507: PUSH
23508: LD_OWVAR 67
23512: ARRAY
23513: PPUSH
23514: LD_INT 0
23516: PPUSH
23517: LD_INT 0
23519: PPUSH
23520: LD_INT 0
23522: PPUSH
23523: LD_INT 0
23525: PPUSH
23526: LD_EXP 34
23530: PPUSH
23531: LD_EXP 35
23535: PPUSH
23536: CALL_OW 12
23540: PPUSH
23541: LD_INT 16
23543: PPUSH
23544: LD_INT 15
23546: PPUSH
23547: LD_INT 1
23549: PPUSH
23550: LD_INT 1
23552: PPUSH
23553: LD_INT 2
23555: PPUSH
23556: CALL_OW 12
23560: PPUSH
23561: CALL 10518 0 12
// end ; end_of_file
23565: END
// export function PrepareNature ; var i , un ; begin
23566: LD_INT 0
23568: PPUSH
23569: PPUSH
23570: PPUSH
// for i = 1 to Difficulty + 2 do
23571: LD_ADDR_VAR 0 2
23575: PUSH
23576: DOUBLE
23577: LD_INT 1
23579: DEC
23580: ST_TO_ADDR
23581: LD_OWVAR 67
23585: PUSH
23586: LD_INT 2
23588: PLUS
23589: PUSH
23590: FOR_TO
23591: IFFALSE 23700
// begin hc_sex = sex_male ;
23593: LD_ADDR_OWVAR 27
23597: PUSH
23598: LD_INT 1
23600: ST_TO_ADDR
// uc_side = 0 ;
23601: LD_ADDR_OWVAR 20
23605: PUSH
23606: LD_INT 0
23608: ST_TO_ADDR
// uc_nation = nation_nature ;
23609: LD_ADDR_OWVAR 21
23613: PUSH
23614: LD_INT 0
23616: ST_TO_ADDR
// hc_class = class_tiger ;
23617: LD_ADDR_OWVAR 28
23621: PUSH
23622: LD_INT 14
23624: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23625: LD_ADDR_OWVAR 31
23629: PUSH
23630: LD_EXP 35
23634: PUSH
23635: LD_INT 0
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23650: LD_ADDR_OWVAR 35
23654: PUSH
23655: LD_INT 5
23657: NEG
23658: PPUSH
23659: LD_INT 5
23661: PPUSH
23662: CALL_OW 12
23666: PUSH
23667: LD_OWVAR 67
23671: MUL
23672: ST_TO_ADDR
// un = CreateHuman ;
23673: LD_ADDR_VAR 0 3
23677: PUSH
23678: CALL_OW 44
23682: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23683: LD_VAR 0 3
23687: PPUSH
23688: LD_INT 18
23690: PPUSH
23691: LD_INT 0
23693: PPUSH
23694: CALL_OW 49
// end ;
23698: GO 23590
23700: POP
23701: POP
// for i = 1 to rand ( 3 , 4 ) do
23702: LD_ADDR_VAR 0 2
23706: PUSH
23707: DOUBLE
23708: LD_INT 1
23710: DEC
23711: ST_TO_ADDR
23712: LD_INT 3
23714: PPUSH
23715: LD_INT 4
23717: PPUSH
23718: CALL_OW 12
23722: PUSH
23723: FOR_TO
23724: IFFALSE 23818
// begin hc_sex = sex_male ;
23726: LD_ADDR_OWVAR 27
23730: PUSH
23731: LD_INT 1
23733: ST_TO_ADDR
// uc_side = 0 ;
23734: LD_ADDR_OWVAR 20
23738: PUSH
23739: LD_INT 0
23741: ST_TO_ADDR
// uc_nation = nation_nature ;
23742: LD_ADDR_OWVAR 21
23746: PUSH
23747: LD_INT 0
23749: ST_TO_ADDR
// hc_class = 18 ;
23750: LD_ADDR_OWVAR 28
23754: PUSH
23755: LD_INT 18
23757: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23758: LD_ADDR_OWVAR 31
23762: PUSH
23763: LD_EXP 35
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: LD_INT 0
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: ST_TO_ADDR
// hc_agressivity = 0 ;
23783: LD_ADDR_OWVAR 35
23787: PUSH
23788: LD_INT 0
23790: ST_TO_ADDR
// un = CreateHuman ;
23791: LD_ADDR_VAR 0 3
23795: PUSH
23796: CALL_OW 44
23800: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23801: LD_VAR 0 3
23805: PPUSH
23806: LD_INT 18
23808: PPUSH
23809: LD_INT 0
23811: PPUSH
23812: CALL_OW 49
// end ;
23816: GO 23723
23818: POP
23819: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23820: LD_ADDR_VAR 0 2
23824: PUSH
23825: DOUBLE
23826: LD_INT 1
23828: DEC
23829: ST_TO_ADDR
23830: LD_INT 1
23832: PPUSH
23833: LD_INT 3
23835: PPUSH
23836: CALL_OW 12
23840: PUSH
23841: LD_OWVAR 67
23845: PLUS
23846: PUSH
23847: FOR_TO
23848: IFFALSE 23997
// begin hc_sex = sex_male ;
23850: LD_ADDR_OWVAR 27
23854: PUSH
23855: LD_INT 1
23857: ST_TO_ADDR
// uc_side = 0 ;
23858: LD_ADDR_OWVAR 20
23862: PUSH
23863: LD_INT 0
23865: ST_TO_ADDR
// uc_nation = nation_nature ;
23866: LD_ADDR_OWVAR 21
23870: PUSH
23871: LD_INT 0
23873: ST_TO_ADDR
// hc_class = class_apeman ;
23874: LD_ADDR_OWVAR 28
23878: PUSH
23879: LD_INT 12
23881: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23882: LD_ADDR_OWVAR 31
23886: PUSH
23887: LD_INT 2
23889: PPUSH
23890: LD_INT 5
23892: PPUSH
23893: CALL_OW 12
23897: PUSH
23898: LD_INT 0
23900: PPUSH
23901: LD_INT 2
23903: PPUSH
23904: CALL_OW 12
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23921: LD_ADDR_OWVAR 35
23925: PUSH
23926: LD_INT 20
23928: PPUSH
23929: LD_INT 30
23931: PPUSH
23932: CALL_OW 12
23936: PUSH
23937: LD_INT 30
23939: PPUSH
23940: LD_INT 40
23942: PPUSH
23943: CALL_OW 12
23947: PUSH
23948: LD_INT 40
23950: PPUSH
23951: LD_INT 50
23953: PPUSH
23954: CALL_OW 12
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: PUSH
23964: LD_OWVAR 67
23968: ARRAY
23969: ST_TO_ADDR
// un = CreateHuman ;
23970: LD_ADDR_VAR 0 3
23974: PUSH
23975: CALL_OW 44
23979: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
23980: LD_VAR 0 3
23984: PPUSH
23985: LD_INT 19
23987: PPUSH
23988: LD_INT 0
23990: PPUSH
23991: CALL_OW 49
// end ;
23995: GO 23847
23997: POP
23998: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
23999: LD_ADDR_VAR 0 2
24003: PUSH
24004: DOUBLE
24005: LD_INT 1
24007: DEC
24008: ST_TO_ADDR
24009: LD_INT 5
24011: PPUSH
24012: LD_INT 6
24014: PPUSH
24015: CALL_OW 12
24019: PUSH
24020: LD_OWVAR 67
24024: PLUS
24025: PUSH
24026: FOR_TO
24027: IFFALSE 24135
// begin hc_sex = sex_male ;
24029: LD_ADDR_OWVAR 27
24033: PUSH
24034: LD_INT 1
24036: ST_TO_ADDR
// uc_side = 0 ;
24037: LD_ADDR_OWVAR 20
24041: PUSH
24042: LD_INT 0
24044: ST_TO_ADDR
// uc_nation = nation_nature ;
24045: LD_ADDR_OWVAR 21
24049: PUSH
24050: LD_INT 0
24052: ST_TO_ADDR
// hc_class = class_apeman ;
24053: LD_ADDR_OWVAR 28
24057: PUSH
24058: LD_INT 12
24060: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
24061: LD_ADDR_OWVAR 31
24065: PUSH
24066: LD_INT 2
24068: PPUSH
24069: LD_INT 5
24071: PPUSH
24072: CALL_OW 12
24076: PUSH
24077: LD_INT 0
24079: PPUSH
24080: LD_INT 2
24082: PPUSH
24083: CALL_OW 12
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: LD_INT 0
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: ST_TO_ADDR
// hc_agressivity = 0 ;
24100: LD_ADDR_OWVAR 35
24104: PUSH
24105: LD_INT 0
24107: ST_TO_ADDR
// un = CreateHuman ;
24108: LD_ADDR_VAR 0 3
24112: PUSH
24113: CALL_OW 44
24117: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
24118: LD_VAR 0 3
24122: PPUSH
24123: LD_INT 20
24125: PPUSH
24126: LD_INT 0
24128: PPUSH
24129: CALL_OW 49
// end ;
24133: GO 24026
24135: POP
24136: POP
// end ; end_of_file end_of_file
24137: LD_VAR 0 1
24141: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
24142: GO 24144
24144: DISABLE
// begin ru_radar := 98 ;
24145: LD_ADDR_EXP 51
24149: PUSH
24150: LD_INT 98
24152: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24153: LD_ADDR_EXP 52
24157: PUSH
24158: LD_INT 89
24160: ST_TO_ADDR
// us_hack := 99 ;
24161: LD_ADDR_EXP 53
24165: PUSH
24166: LD_INT 99
24168: ST_TO_ADDR
// us_artillery := 97 ;
24169: LD_ADDR_EXP 54
24173: PUSH
24174: LD_INT 97
24176: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24177: LD_ADDR_EXP 55
24181: PUSH
24182: LD_INT 91
24184: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
24185: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
24186: LD_INT 0
24188: PPUSH
24189: PPUSH
24190: PPUSH
24191: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24192: LD_VAR 0 1
24196: PPUSH
24197: CALL_OW 264
24201: PUSH
24202: LD_EXP 55
24206: EQUAL
24207: IFFALSE 24279
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24209: LD_INT 68
24211: PPUSH
24212: LD_VAR 0 1
24216: PPUSH
24217: CALL_OW 255
24221: PPUSH
24222: CALL_OW 321
24226: PUSH
24227: LD_INT 2
24229: EQUAL
24230: IFFALSE 24242
// eff := 70 else
24232: LD_ADDR_VAR 0 6
24236: PUSH
24237: LD_INT 70
24239: ST_TO_ADDR
24240: GO 24250
// eff := 30 ;
24242: LD_ADDR_VAR 0 6
24246: PUSH
24247: LD_INT 30
24249: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24250: LD_VAR 0 1
24254: PPUSH
24255: CALL_OW 250
24259: PPUSH
24260: LD_VAR 0 1
24264: PPUSH
24265: CALL_OW 251
24269: PPUSH
24270: LD_VAR 0 6
24274: PPUSH
24275: CALL_OW 495
// end ; end ;
24279: LD_VAR 0 4
24283: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
24284: LD_INT 0
24286: PPUSH
24287: PPUSH
24288: PPUSH
24289: PPUSH
24290: PPUSH
24291: PPUSH
// if cmd = 124 then
24292: LD_VAR 0 1
24296: PUSH
24297: LD_INT 124
24299: EQUAL
24300: IFFALSE 24506
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
24302: LD_ADDR_VAR 0 5
24306: PUSH
24307: LD_INT 2
24309: PUSH
24310: LD_INT 34
24312: PUSH
24313: LD_INT 53
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 34
24322: PUSH
24323: LD_INT 14
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: LIST
24334: PPUSH
24335: CALL_OW 69
24339: ST_TO_ADDR
// if not tmp then
24340: LD_VAR 0 5
24344: NOT
24345: IFFALSE 24349
// exit ;
24347: GO 24506
// for i in tmp do
24349: LD_ADDR_VAR 0 3
24353: PUSH
24354: LD_VAR 0 5
24358: PUSH
24359: FOR_IN
24360: IFFALSE 24504
// begin taskList := GetTaskList ( i ) ;
24362: LD_ADDR_VAR 0 6
24366: PUSH
24367: LD_VAR 0 3
24371: PPUSH
24372: CALL_OW 437
24376: ST_TO_ADDR
// if not taskList then
24377: LD_VAR 0 6
24381: NOT
24382: IFFALSE 24386
// continue ;
24384: GO 24359
// for j = 1 to taskList do
24386: LD_ADDR_VAR 0 4
24390: PUSH
24391: DOUBLE
24392: LD_INT 1
24394: DEC
24395: ST_TO_ADDR
24396: LD_VAR 0 6
24400: PUSH
24401: FOR_TO
24402: IFFALSE 24500
// if taskList [ j ] [ 1 ] = | then
24404: LD_VAR 0 6
24408: PUSH
24409: LD_VAR 0 4
24413: ARRAY
24414: PUSH
24415: LD_INT 1
24417: ARRAY
24418: PUSH
24419: LD_STRING |
24421: EQUAL
24422: IFFALSE 24498
// begin _taskList := Delete ( taskList , 1 ) ;
24424: LD_ADDR_VAR 0 7
24428: PUSH
24429: LD_VAR 0 6
24433: PPUSH
24434: LD_INT 1
24436: PPUSH
24437: CALL_OW 3
24441: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
24442: LD_VAR 0 3
24446: PPUSH
24447: LD_VAR 0 7
24451: PPUSH
24452: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
24456: LD_VAR 0 3
24460: PPUSH
24461: LD_VAR 0 6
24465: PUSH
24466: LD_VAR 0 4
24470: ARRAY
24471: PUSH
24472: LD_INT 2
24474: ARRAY
24475: PPUSH
24476: LD_VAR 0 6
24480: PUSH
24481: LD_VAR 0 4
24485: ARRAY
24486: PUSH
24487: LD_INT 3
24489: ARRAY
24490: PPUSH
24491: LD_INT 8
24493: PPUSH
24494: CALL 24511 0 4
// end ;
24498: GO 24401
24500: POP
24501: POP
// end ;
24502: GO 24359
24504: POP
24505: POP
// end ; end ;
24506: LD_VAR 0 2
24510: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24511: LD_INT 0
24513: PPUSH
24514: PPUSH
24515: PPUSH
24516: PPUSH
24517: PPUSH
24518: PPUSH
24519: PPUSH
24520: PPUSH
24521: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24522: LD_VAR 0 1
24526: NOT
24527: PUSH
24528: LD_VAR 0 2
24532: PPUSH
24533: LD_VAR 0 3
24537: PPUSH
24538: CALL_OW 488
24542: NOT
24543: OR
24544: PUSH
24545: LD_VAR 0 4
24549: NOT
24550: OR
24551: IFFALSE 24555
// exit ;
24553: GO 24895
// list := [ ] ;
24555: LD_ADDR_VAR 0 13
24559: PUSH
24560: EMPTY
24561: ST_TO_ADDR
// if x - r < 0 then
24562: LD_VAR 0 2
24566: PUSH
24567: LD_VAR 0 4
24571: MINUS
24572: PUSH
24573: LD_INT 0
24575: LESS
24576: IFFALSE 24588
// min_x := 0 else
24578: LD_ADDR_VAR 0 7
24582: PUSH
24583: LD_INT 0
24585: ST_TO_ADDR
24586: GO 24604
// min_x := x - r ;
24588: LD_ADDR_VAR 0 7
24592: PUSH
24593: LD_VAR 0 2
24597: PUSH
24598: LD_VAR 0 4
24602: MINUS
24603: ST_TO_ADDR
// if y - r < 0 then
24604: LD_VAR 0 3
24608: PUSH
24609: LD_VAR 0 4
24613: MINUS
24614: PUSH
24615: LD_INT 0
24617: LESS
24618: IFFALSE 24630
// min_y := 0 else
24620: LD_ADDR_VAR 0 8
24624: PUSH
24625: LD_INT 0
24627: ST_TO_ADDR
24628: GO 24646
// min_y := y - r ;
24630: LD_ADDR_VAR 0 8
24634: PUSH
24635: LD_VAR 0 3
24639: PUSH
24640: LD_VAR 0 4
24644: MINUS
24645: ST_TO_ADDR
// max_x := x + r ;
24646: LD_ADDR_VAR 0 9
24650: PUSH
24651: LD_VAR 0 2
24655: PUSH
24656: LD_VAR 0 4
24660: PLUS
24661: ST_TO_ADDR
// max_y := y + r ;
24662: LD_ADDR_VAR 0 10
24666: PUSH
24667: LD_VAR 0 3
24671: PUSH
24672: LD_VAR 0 4
24676: PLUS
24677: ST_TO_ADDR
// for _x = min_x to max_x do
24678: LD_ADDR_VAR 0 11
24682: PUSH
24683: DOUBLE
24684: LD_VAR 0 7
24688: DEC
24689: ST_TO_ADDR
24690: LD_VAR 0 9
24694: PUSH
24695: FOR_TO
24696: IFFALSE 24813
// for _y = min_y to max_y do
24698: LD_ADDR_VAR 0 12
24702: PUSH
24703: DOUBLE
24704: LD_VAR 0 8
24708: DEC
24709: ST_TO_ADDR
24710: LD_VAR 0 10
24714: PUSH
24715: FOR_TO
24716: IFFALSE 24809
// begin if not ValidHex ( _x , _y ) then
24718: LD_VAR 0 11
24722: PPUSH
24723: LD_VAR 0 12
24727: PPUSH
24728: CALL_OW 488
24732: NOT
24733: IFFALSE 24737
// continue ;
24735: GO 24715
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24737: LD_VAR 0 11
24741: PPUSH
24742: LD_VAR 0 12
24746: PPUSH
24747: CALL_OW 351
24751: PUSH
24752: LD_VAR 0 11
24756: PPUSH
24757: LD_VAR 0 12
24761: PPUSH
24762: CALL_OW 554
24766: AND
24767: IFFALSE 24807
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24769: LD_ADDR_VAR 0 13
24773: PUSH
24774: LD_VAR 0 13
24778: PPUSH
24779: LD_VAR 0 13
24783: PUSH
24784: LD_INT 1
24786: PLUS
24787: PPUSH
24788: LD_VAR 0 11
24792: PUSH
24793: LD_VAR 0 12
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PPUSH
24802: CALL_OW 2
24806: ST_TO_ADDR
// end ;
24807: GO 24715
24809: POP
24810: POP
24811: GO 24695
24813: POP
24814: POP
// if not list then
24815: LD_VAR 0 13
24819: NOT
24820: IFFALSE 24824
// exit ;
24822: GO 24895
// for i in list do
24824: LD_ADDR_VAR 0 6
24828: PUSH
24829: LD_VAR 0 13
24833: PUSH
24834: FOR_IN
24835: IFFALSE 24893
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24837: LD_VAR 0 1
24841: PPUSH
24842: LD_STRING M
24844: PUSH
24845: LD_VAR 0 6
24849: PUSH
24850: LD_INT 1
24852: ARRAY
24853: PUSH
24854: LD_VAR 0 6
24858: PUSH
24859: LD_INT 2
24861: ARRAY
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: LD_INT 0
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: LD_INT 0
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: PUSH
24884: EMPTY
24885: LIST
24886: PPUSH
24887: CALL_OW 447
24891: GO 24834
24893: POP
24894: POP
// end ;
24895: LD_VAR 0 5
24899: RET
