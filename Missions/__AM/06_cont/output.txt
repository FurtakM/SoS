// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7932 0 0
// CreateNature ;
  57: CALL 21455 0 0
// PrepareRussian ;
  61: CALL 5816 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 11251 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 43309 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 43309 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 43309 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 43309 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 43309 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 43309 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 43309 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 43309 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 43309 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 43309 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 43309 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side := 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation := 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// hc_class := class_engineer ;
2618: LD_ADDR_OWVAR 28
2622: PUSH
2623: LD_INT 2
2625: ST_TO_ADDR
// hc_sex := sex_male ;
2626: LD_ADDR_OWVAR 27
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2634: LD_ADDR_OWVAR 33
2638: PUSH
2639: LD_STRING SecondCharsGal
2641: ST_TO_ADDR
// hc_face_number := 52 ;
2642: LD_ADDR_OWVAR 34
2646: PUSH
2647: LD_INT 52
2649: ST_TO_ADDR
// hc_name := Craig Brown ;
2650: LD_ADDR_OWVAR 26
2654: PUSH
2655: LD_STRING Craig Brown
2657: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2658: LD_ADDR_OWVAR 29
2662: PUSH
2663: LD_INT 10
2665: PUSH
2666: LD_INT 10
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2673: LD_ADDR_OWVAR 30
2677: PUSH
2678: LD_INT 0
2680: PUSH
2681: LD_INT 2
2683: PUSH
2684: LD_INT 0
2686: PUSH
2687: LD_INT 0
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2696: LD_ADDR_OWVAR 31
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: LD_INT 3
2706: PUSH
2707: LD_INT 0
2709: PUSH
2710: LD_INT 0
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2719: LD_ADDR_EXP 18
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// hc_class := class_soldier ;
2729: LD_ADDR_OWVAR 28
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// hc_sex := sex_female ;
2737: LD_ADDR_OWVAR 27
2741: PUSH
2742: LD_INT 2
2744: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2745: LD_ADDR_OWVAR 33
2749: PUSH
2750: LD_STRING SecondCharsGal
2752: ST_TO_ADDR
// hc_face_number := 42 ;
2753: LD_ADDR_OWVAR 34
2757: PUSH
2758: LD_INT 42
2760: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2761: LD_ADDR_OWVAR 29
2765: PUSH
2766: LD_INT 11
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2776: LD_ADDR_OWVAR 26
2780: PUSH
2781: LD_STRING Ingrid Jonsson
2783: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2784: LD_ADDR_OWVAR 30
2788: PUSH
2789: LD_INT 1
2791: PUSH
2792: LD_INT 1
2794: PUSH
2795: LD_INT 0
2797: PUSH
2798: LD_INT 0
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2807: LD_ADDR_OWVAR 31
2811: PUSH
2812: LD_INT 3
2814: PUSH
2815: LD_INT 1
2817: PUSH
2818: LD_INT 1
2820: PUSH
2821: LD_INT 0
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: LIST
2828: LIST
2829: ST_TO_ADDR
// HarrSupp2 := CreateHuman ;
2830: LD_ADDR_EXP 19
2834: PUSH
2835: CALL_OW 44
2839: ST_TO_ADDR
// vc_engine := engine_combustion ;
2840: LD_ADDR_OWVAR 39
2844: PUSH
2845: LD_INT 1
2847: ST_TO_ADDR
// vc_control := control_manual ;
2848: LD_ADDR_OWVAR 38
2852: PUSH
2853: LD_INT 1
2855: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2856: LD_ADDR_OWVAR 40
2860: PUSH
2861: LD_INT 5
2863: PUSH
2864: LD_INT 5
2866: PUSH
2867: LD_INT 3
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: PUSH
2879: LD_OWVAR 67
2883: ARRAY
2884: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2885: LD_ADDR_OWVAR 37
2889: PUSH
2890: LD_INT 2
2892: ST_TO_ADDR
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 3
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2903: LD_VAR 0 3
2907: PPUSH
2908: LD_VAR 0 5
2912: PPUSH
2913: CALL_OW 233
// repeat wait ( 10 ) ;
2917: LD_INT 10
2919: PPUSH
2920: CALL_OW 67
// until PlaceUnitArea ( veh , area , false ) ;
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_VAR 0 4
2933: PPUSH
2934: LD_INT 0
2936: PPUSH
2937: CALL_OW 49
2941: IFFALSE 2917
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2943: LD_EXP 18
2947: PPUSH
2948: LD_VAR 0 3
2952: PPUSH
2953: CALL_OW 52
// SetFuel ( veh , 50 ) ;
2957: LD_VAR 0 3
2961: PPUSH
2962: LD_INT 50
2964: PPUSH
2965: CALL_OW 240
// uc_side := 1 ;
2969: LD_ADDR_OWVAR 20
2973: PUSH
2974: LD_INT 1
2976: ST_TO_ADDR
// uc_nation := 1 ;
2977: LD_ADDR_OWVAR 21
2981: PUSH
2982: LD_INT 1
2984: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2985: LD_ADDR_OWVAR 40
2989: PUSH
2990: LD_INT 4
2992: PUSH
2993: LD_INT 4
2995: PUSH
2996: LD_INT 2
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: PUSH
3008: LD_OWVAR 67
3012: ARRAY
3013: ST_TO_ADDR
// veh := CreateVehicle ;
3014: LD_ADDR_VAR 0 3
3018: PUSH
3019: CALL_OW 45
3023: ST_TO_ADDR
// SetDir ( veh , dir ) ;
3024: LD_VAR 0 3
3028: PPUSH
3029: LD_VAR 0 5
3033: PPUSH
3034: CALL_OW 233
// repeat wait ( 10 ) ;
3038: LD_INT 10
3040: PPUSH
3041: CALL_OW 67
// until PlaceUnitArea ( veh , area , false ) ;
3045: LD_VAR 0 3
3049: PPUSH
3050: LD_VAR 0 4
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 49
3062: IFFALSE 3038
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3064: LD_EXP 19
3068: PPUSH
3069: LD_VAR 0 3
3073: PPUSH
3074: CALL_OW 52
// SetFuel ( veh , 50 ) ;
3078: LD_VAR 0 3
3082: PPUSH
3083: LD_INT 50
3085: PPUSH
3086: CALL_OW 240
// end ;
3090: LD_VAR 0 1
3094: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3095: LD_INT 0
3097: PPUSH
3098: PPUSH
3099: PPUSH
3100: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 23
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 26
3128: PUSH
3129: LD_INT 1
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: LIST
3140: PPUSH
3141: CALL_OW 69
3145: PUSH
3146: LD_EXP 3
3150: PUSH
3151: LD_EXP 4
3155: PUSH
3156: LD_EXP 8
3160: PUSH
3161: LD_EXP 9
3165: PUSH
3166: LD_EXP 5
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: DIFF
3178: ST_TO_ADDR
// for i in _tmp do
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: LD_VAR 0 4
3188: PUSH
3189: FOR_IN
3190: IFFALSE 3231
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3192: LD_VAR 0 2
3196: PPUSH
3197: LD_INT 32
3199: PPUSH
3200: CALL_OW 308
3204: PUSH
3205: LD_VAR 0 2
3209: PPUSH
3210: CALL_OW 302
3214: AND
3215: IFFALSE 3229
// begin tmp := i ;
3217: LD_ADDR_VAR 0 3
3221: PUSH
3222: LD_VAR 0 2
3226: ST_TO_ADDR
// break ;
3227: GO 3231
// end ;
3229: GO 3189
3231: POP
3232: POP
// if not tmp then
3233: LD_VAR 0 3
3237: NOT
3238: IFFALSE 3250
// tmp := JMM ;
3240: LD_ADDR_VAR 0 3
3244: PUSH
3245: LD_EXP 1
3249: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3250: LD_INT 35
3252: PPUSH
3253: CALL_OW 67
// if IsDead ( tmp ) then
3257: LD_VAR 0 3
3261: PPUSH
3262: CALL_OW 301
3266: IFFALSE 3278
// tmp := JMM ;
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: LD_EXP 1
3277: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3278: LD_INT 81
3280: PUSH
3281: LD_INT 1
3283: PUSH
3284: EMPTY
3285: LIST
3286: LIST
3287: PUSH
3288: LD_INT 91
3290: PUSH
3291: LD_VAR 0 3
3295: PUSH
3296: LD_INT 15
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PPUSH
3308: CALL_OW 69
3312: NOT
3313: PUSH
3314: LD_EXP 27
3318: PUSH
3319: LD_INT 6300
3321: LESS
3322: OR
3323: IFFALSE 3250
// blockSpawn := 1 ;
3325: LD_ADDR_EXP 30
3329: PUSH
3330: LD_INT 1
3332: ST_TO_ADDR
// uc_side := 4 ;
3333: LD_ADDR_OWVAR 20
3337: PUSH
3338: LD_INT 4
3340: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3341: LD_ADDR_EXP 16
3345: PUSH
3346: LD_STRING Joan
3348: PPUSH
3349: LD_INT 0
3351: PPUSH
3352: LD_EXP 44
3356: PPUSH
3357: CALL 43309 0 3
3361: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3362: LD_EXP 16
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 250
3376: PPUSH
3377: LD_VAR 0 3
3381: PPUSH
3382: CALL_OW 251
3386: PPUSH
3387: LD_INT 5
3389: PPUSH
3390: LD_INT 1
3392: PPUSH
3393: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3397: LD_EXP 16
3401: PPUSH
3402: LD_INT 250
3404: PPUSH
3405: CALL_OW 234
// InGameOn ;
3409: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3413: LD_EXP 16
3417: PPUSH
3418: CALL_OW 87
// wait ( 0 0$2 ) ;
3422: LD_INT 70
3424: PPUSH
3425: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3429: LD_VAR 0 3
3433: PPUSH
3434: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3438: LD_VAR 0 3
3442: PPUSH
3443: CALL_OW 122
// wait ( 0 0$1 ) ;
3447: LD_INT 35
3449: PPUSH
3450: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_EXP 16
3463: PPUSH
3464: CALL_OW 112
// wait ( 0 0$2 ) ;
3468: LD_INT 70
3470: PPUSH
3471: CALL_OW 67
// DialogueOn ;
3475: CALL_OW 6
// if tmp = JMM then
3479: LD_VAR 0 3
3483: PUSH
3484: LD_EXP 1
3488: EQUAL
3489: IFFALSE 3638
// begin ComTurnUnit ( JMM , Joan ) ;
3491: LD_EXP 1
3495: PPUSH
3496: LD_EXP 16
3500: PPUSH
3501: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3505: LD_EXP 1
3509: PPUSH
3510: LD_STRING D5b-JMM-1
3512: PPUSH
3513: CALL_OW 88
// DialogueOff ;
3517: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3521: LD_EXP 16
3525: PPUSH
3526: LD_INT 500
3528: PPUSH
3529: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3533: LD_EXP 16
3537: PPUSH
3538: LD_EXP 1
3542: PPUSH
3543: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_EXP 16
3556: PPUSH
3557: CALL_OW 119
// wait ( 0 0$1 ) ;
3561: LD_INT 35
3563: PPUSH
3564: CALL_OW 67
// DialogueOn ;
3568: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3572: LD_EXP 16
3576: PPUSH
3577: LD_STRING D5b-Joan-1
3579: PPUSH
3580: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3584: LD_EXP 1
3588: PPUSH
3589: LD_STRING D5b-JMM-2
3591: PPUSH
3592: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3596: LD_EXP 16
3600: PPUSH
3601: LD_STRING D5b-Joan-2
3603: PPUSH
3604: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING D5b-JMM-3
3615: PPUSH
3616: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3620: LD_EXP 16
3624: PPUSH
3625: LD_STRING D5b-Joan-3
3627: PPUSH
3628: CALL_OW 88
// DialogueOff ;
3632: CALL_OW 7
// end else
3636: GO 4104
// begin ComTurnUnit ( tmp , Joan ) ;
3638: LD_VAR 0 3
3642: PPUSH
3643: LD_EXP 16
3647: PPUSH
3648: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3652: LD_VAR 0 3
3656: PPUSH
3657: LD_STRING D5a-Sol1-1
3659: PPUSH
3660: CALL_OW 88
// DialogueOff ;
3664: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3668: LD_EXP 16
3672: PPUSH
3673: LD_INT 500
3675: PPUSH
3676: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3680: LD_EXP 16
3684: PPUSH
3685: LD_VAR 0 3
3689: PPUSH
3690: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_EXP 16
3703: PPUSH
3704: CALL_OW 119
// wait ( 0 0$1 ) ;
3708: LD_INT 35
3710: PPUSH
3711: CALL_OW 67
// DialogueOn ;
3715: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3719: LD_EXP 16
3723: PPUSH
3724: LD_STRING D5a-Joan-1
3726: PPUSH
3727: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3731: LD_VAR 0 3
3735: PPUSH
3736: LD_STRING D5a-Sol1-2
3738: PPUSH
3739: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3743: LD_EXP 16
3747: PPUSH
3748: LD_STRING D5a-Joan-2
3750: PPUSH
3751: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3755: LD_VAR 0 3
3759: PPUSH
3760: LD_STRING D5a-Sol1-3
3762: PPUSH
3763: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3767: LD_EXP 16
3771: PPUSH
3772: LD_STRING D5a-Joan-3
3774: PPUSH
3775: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3779: LD_VAR 0 3
3783: PPUSH
3784: LD_STRING D5a-Sol1-4
3786: PPUSH
3787: CALL_OW 88
// DialogueOff ;
3791: CALL_OW 7
// if GetDistUnits ( JMM , Joan ) > 10 then
3795: LD_EXP 1
3799: PPUSH
3800: LD_EXP 16
3804: PPUSH
3805: CALL_OW 296
3809: PUSH
3810: LD_INT 10
3812: GREATER
3813: IFFALSE 3896
// begin InGameOff ;
3815: CALL_OW 9
// ComMoveUnit ( Joan , tmp ) ;
3819: LD_EXP 16
3823: PPUSH
3824: LD_VAR 0 3
3828: PPUSH
3829: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// until GetDistUnits ( JMM , Joan ) < 8 or IsDead ( Joan ) ;
3840: LD_EXP 1
3844: PPUSH
3845: LD_EXP 16
3849: PPUSH
3850: CALL_OW 296
3854: PUSH
3855: LD_INT 8
3857: LESS
3858: PUSH
3859: LD_EXP 16
3863: PPUSH
3864: CALL_OW 301
3868: OR
3869: IFFALSE 3833
// if IsDead ( Joan ) then
3871: LD_EXP 16
3875: PPUSH
3876: CALL_OW 301
3880: IFFALSE 3892
// begin blockSpawn := false ;
3882: LD_ADDR_EXP 30
3886: PUSH
3887: LD_INT 0
3889: ST_TO_ADDR
// exit ;
3890: GO 4235
// end ; InGameOn ;
3892: CALL_OW 8
// end ; if JMM in FilterAllUnits ( [ f_driving ] ) then
3896: LD_EXP 1
3900: PUSH
3901: LD_INT 55
3903: PUSH
3904: EMPTY
3905: LIST
3906: PPUSH
3907: CALL_OW 69
3911: IN
3912: IFFALSE 3935
// begin ComMoveUnit ( JMM , Joan ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_EXP 16
3923: PPUSH
3924: CALL_OW 112
// wait ( 0 0$05 ) ;
3928: LD_INT 175
3930: PPUSH
3931: CALL_OW 67
// end ; ComExit ( JMM ) ;
3935: LD_EXP 1
3939: PPUSH
3940: CALL 81502 0 1
// wait ( 0 0$1 ) ;
3944: LD_INT 35
3946: PPUSH
3947: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3951: LD_INT 35
3953: PPUSH
3954: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3958: LD_EXP 16
3962: PUSH
3963: LD_VAR 0 3
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PPUSH
3972: LD_EXP 1
3976: PPUSH
3977: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3981: LD_EXP 16
3985: PPUSH
3986: LD_EXP 1
3990: PPUSH
3991: CALL_OW 296
3995: PUSH
3996: LD_INT 5
3998: LESS
3999: IFFALSE 3951
// ComTurnUnit ( Joan , JMM ) ;
4001: LD_EXP 16
4005: PPUSH
4006: LD_EXP 1
4010: PPUSH
4011: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
4015: LD_EXP 1
4019: PPUSH
4020: LD_EXP 16
4024: PPUSH
4025: CALL_OW 119
// wait ( 0 0$1 ) ;
4029: LD_INT 35
4031: PPUSH
4032: CALL_OW 67
// DialogueOn ;
4036: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
4040: LD_EXP 16
4044: PPUSH
4045: LD_STRING D5a-Joan-4
4047: PPUSH
4048: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
4052: LD_EXP 1
4056: PPUSH
4057: LD_STRING D5a-JMM-4
4059: PPUSH
4060: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
4064: LD_EXP 16
4068: PPUSH
4069: LD_STRING D5a-Joan-5
4071: PPUSH
4072: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4076: LD_EXP 1
4080: PPUSH
4081: LD_STRING D5a-JMM-5
4083: PPUSH
4084: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4088: LD_EXP 16
4092: PPUSH
4093: LD_STRING D5a-Joan-6
4095: PPUSH
4096: CALL_OW 88
// DialogueOff ;
4100: CALL_OW 7
// end ; DialogueOn ;
4104: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4108: LD_EXP 1
4112: PPUSH
4113: LD_STRING D6-JMM-1
4115: PPUSH
4116: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4120: LD_EXP 16
4124: PPUSH
4125: LD_STRING D6-Joan-1
4127: PPUSH
4128: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4132: LD_EXP 1
4136: PPUSH
4137: LD_STRING D6-JMM-2
4139: PPUSH
4140: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4144: LD_EXP 16
4148: PPUSH
4149: LD_STRING D6-Joan-2
4151: PPUSH
4152: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4156: LD_EXP 1
4160: PPUSH
4161: LD_STRING D6-JMM-3
4163: PPUSH
4164: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4168: LD_EXP 16
4172: PPUSH
4173: LD_STRING D6-Joan-3
4175: PPUSH
4176: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4180: LD_EXP 1
4184: PPUSH
4185: LD_STRING D6-JMM-4
4187: PPUSH
4188: CALL_OW 88
// DialogueOff ;
4192: CALL_OW 7
// InGameOff ;
4196: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4200: LD_EXP 16
4204: PPUSH
4205: LD_INT 1
4207: PPUSH
4208: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4212: LD_STRING MJ
4214: PPUSH
4215: CALL_OW 337
// joanStatus = 1 ;
4219: LD_ADDR_EXP 17
4223: PUSH
4224: LD_INT 1
4226: ST_TO_ADDR
// blockSpawn = 0 ;
4227: LD_ADDR_EXP 30
4231: PUSH
4232: LD_INT 0
4234: ST_TO_ADDR
// end ;
4235: LD_VAR 0 1
4239: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4240: LD_INT 0
4242: PPUSH
4243: PPUSH
// if not number or number > 8 then
4244: LD_VAR 0 1
4248: NOT
4249: PUSH
4250: LD_VAR 0 1
4254: PUSH
4255: LD_INT 8
4257: GREATER
4258: OR
4259: IFFALSE 4263
// exit ;
4261: GO 5811
// repeat wait ( 0 0$7 ) ;
4263: LD_INT 245
4265: PPUSH
4266: CALL_OW 67
// until blockSpawn = 0 ;
4270: LD_EXP 30
4274: PUSH
4275: LD_INT 0
4277: EQUAL
4278: IFFALSE 4263
// uc_side := 1 ;
4280: LD_ADDR_OWVAR 20
4284: PUSH
4285: LD_INT 1
4287: ST_TO_ADDR
// uc_nation := 1 ;
4288: LD_ADDR_OWVAR 21
4292: PUSH
4293: LD_INT 1
4295: ST_TO_ADDR
// InitHc ;
4296: CALL_OW 19
// if number = 1 then
4300: LD_VAR 0 1
4304: PUSH
4305: LD_INT 1
4307: EQUAL
4308: IFFALSE 4484
// begin hc_class := 3 ;
4310: LD_ADDR_OWVAR 28
4314: PUSH
4315: LD_INT 3
4317: ST_TO_ADDR
// hc_sex := sex_male ;
4318: LD_ADDR_OWVAR 27
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4326: LD_ADDR_OWVAR 33
4330: PUSH
4331: LD_STRING SecondCharsGal
4333: ST_TO_ADDR
// hc_face_number := 55 ;
4334: LD_ADDR_OWVAR 34
4338: PUSH
4339: LD_INT 55
4341: ST_TO_ADDR
// hc_name := George McCarthy ;
4342: LD_ADDR_OWVAR 26
4346: PUSH
4347: LD_STRING George McCarthy
4349: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4350: LD_ADDR_OWVAR 29
4354: PUSH
4355: LD_INT 11
4357: PUSH
4358: LD_INT 10
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
4365: LD_ADDR_OWVAR 30
4369: PUSH
4370: LD_INT 0
4372: PUSH
4373: LD_INT 0
4375: PUSH
4376: LD_INT 3
4378: PUSH
4379: LD_INT 0
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
4388: LD_ADDR_OWVAR 31
4392: PUSH
4393: LD_INT 0
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: LD_INT 3
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: ST_TO_ADDR
// un = CreateHuman ;
4411: LD_ADDR_VAR 0 3
4415: PUSH
4416: CALL_OW 44
4420: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4421: LD_VAR 0 3
4425: PPUSH
4426: LD_INT 23
4428: PPUSH
4429: LD_INT 1
4431: PPUSH
4432: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4436: LD_VAR 0 3
4440: PPUSH
4441: CALL_OW 87
// wait ( 0 0$1 ) ;
4445: LD_INT 35
4447: PPUSH
4448: CALL_OW 67
// DialogueOn ;
4452: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4456: LD_VAR 0 3
4460: PPUSH
4461: LD_STRING D11d-Sol4-1
4463: PPUSH
4464: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4468: LD_EXP 1
4472: PPUSH
4473: LD_STRING D11d-JMM-1
4475: PPUSH
4476: CALL_OW 88
// DialogueOff ;
4480: CALL_OW 7
// end ; if number = 2 then
4484: LD_VAR 0 1
4488: PUSH
4489: LD_INT 2
4491: EQUAL
4492: IFFALSE 4668
// begin hc_class := 1 ;
4494: LD_ADDR_OWVAR 28
4498: PUSH
4499: LD_INT 1
4501: ST_TO_ADDR
// hc_sex := sex_male ;
4502: LD_ADDR_OWVAR 27
4506: PUSH
4507: LD_INT 1
4509: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4510: LD_ADDR_OWVAR 33
4514: PUSH
4515: LD_STRING AmGalRemake
4517: ST_TO_ADDR
// hc_face_number := 7 ;
4518: LD_ADDR_OWVAR 34
4522: PUSH
4523: LD_INT 7
4525: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4526: LD_ADDR_OWVAR 26
4530: PUSH
4531: LD_STRING Bobby Jordan
4533: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4534: LD_ADDR_OWVAR 29
4538: PUSH
4539: LD_INT 9
4541: PUSH
4542: LD_INT 11
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 2 ] ;
4549: LD_ADDR_OWVAR 30
4553: PUSH
4554: LD_INT 1
4556: PUSH
4557: LD_INT 0
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 2
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
4572: LD_ADDR_OWVAR 31
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: LD_INT 0
4582: PUSH
4583: LD_INT 1
4585: PUSH
4586: LD_INT 2
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: ST_TO_ADDR
// un = CreateHuman ;
4595: LD_ADDR_VAR 0 3
4599: PUSH
4600: CALL_OW 44
4604: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4605: LD_VAR 0 3
4609: PPUSH
4610: LD_INT 24
4612: PPUSH
4613: LD_INT 1
4615: PPUSH
4616: CALL_OW 49
// wait ( 0 0$1 ) ;
4620: LD_INT 35
4622: PPUSH
4623: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4627: LD_VAR 0 3
4631: PPUSH
4632: CALL_OW 87
// DialogueOn ;
4636: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4640: LD_VAR 0 3
4644: PPUSH
4645: LD_STRING D11b-Sol3-1
4647: PPUSH
4648: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4652: LD_EXP 1
4656: PPUSH
4657: LD_STRING D11b-JMM-1
4659: PPUSH
4660: CALL_OW 88
// DialogueOff ;
4664: CALL_OW 7
// end ; if number = 3 then
4668: LD_VAR 0 1
4672: PUSH
4673: LD_INT 3
4675: EQUAL
4676: IFFALSE 4840
// begin hc_class := 1 ;
4678: LD_ADDR_OWVAR 28
4682: PUSH
4683: LD_INT 1
4685: ST_TO_ADDR
// hc_sex := sex_male ;
4686: LD_ADDR_OWVAR 27
4690: PUSH
4691: LD_INT 1
4693: ST_TO_ADDR
// hc_gallery := DJ ;
4694: LD_ADDR_OWVAR 33
4698: PUSH
4699: LD_STRING DJ
4701: ST_TO_ADDR
// hc_face_number := 1 ;
4702: LD_ADDR_OWVAR 34
4706: PUSH
4707: LD_INT 1
4709: ST_TO_ADDR
// hc_name := Darius Dajay ;
4710: LD_ADDR_OWVAR 26
4714: PUSH
4715: LD_STRING Darius Dajay
4717: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4718: LD_ADDR_OWVAR 29
4722: PUSH
4723: LD_INT 11
4725: PUSH
4726: LD_INT 11
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
4733: LD_ADDR_OWVAR 30
4737: PUSH
4738: LD_INT 2
4740: PUSH
4741: LD_INT 0
4743: PUSH
4744: LD_INT 1
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 1 , 0 ] ;
4756: LD_ADDR_OWVAR 31
4760: PUSH
4761: LD_INT 5
4763: PUSH
4764: LD_INT 0
4766: PUSH
4767: LD_INT 1
4769: PUSH
4770: LD_INT 0
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: ST_TO_ADDR
// un = CreateHuman ;
4779: LD_ADDR_VAR 0 3
4783: PUSH
4784: CALL_OW 44
4788: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4789: LD_VAR 0 3
4793: PPUSH
4794: LD_INT 25
4796: PPUSH
4797: LD_INT 1
4799: PPUSH
4800: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4804: LD_VAR 0 3
4808: PPUSH
4809: CALL_OW 87
// wait ( 0 0$1 ) ;
4813: LD_INT 35
4815: PPUSH
4816: CALL_OW 67
// DialogueOn ;
4820: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4824: LD_VAR 0 3
4828: PPUSH
4829: LD_STRING D11f-Sol5-1
4831: PPUSH
4832: CALL_OW 88
// DialogueOff ;
4836: CALL_OW 7
// end ; if number = 4 then
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 4
4847: EQUAL
4848: IFFALSE 4985
// begin hc_class := 2 ;
4850: LD_ADDR_OWVAR 28
4854: PUSH
4855: LD_INT 2
4857: ST_TO_ADDR
// hc_sex := sex_female ;
4858: LD_ADDR_OWVAR 27
4862: PUSH
4863: LD_INT 2
4865: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4866: LD_ADDR_OWVAR 33
4870: PUSH
4871: LD_STRING SecondCharsGal
4873: ST_TO_ADDR
// hc_face_number := 46 ;
4874: LD_ADDR_OWVAR 34
4878: PUSH
4879: LD_INT 46
4881: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4882: LD_ADDR_OWVAR 26
4886: PUSH
4887: LD_STRING Sylvia Creak
4889: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4890: LD_ADDR_OWVAR 29
4894: PUSH
4895: LD_INT 10
4897: PUSH
4898: LD_INT 9
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4905: LD_ADDR_OWVAR 30
4909: PUSH
4910: LD_INT 0
4912: PUSH
4913: LD_INT 1
4915: PUSH
4916: LD_INT 1
4918: PUSH
4919: LD_INT 1
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4928: LD_ADDR_OWVAR 31
4932: PUSH
4933: LD_INT 1
4935: PUSH
4936: LD_INT 3
4938: PUSH
4939: LD_INT 1
4941: PUSH
4942: LD_INT 1
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: ST_TO_ADDR
// un = CreateHuman ;
4951: LD_ADDR_VAR 0 3
4955: PUSH
4956: CALL_OW 44
4960: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4961: LD_VAR 0 3
4965: PPUSH
4966: LD_INT 26
4968: PPUSH
4969: LD_INT 1
4971: PPUSH
4972: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4976: LD_VAR 0 3
4980: PPUSH
4981: CALL_OW 87
// end ; if number = 5 then
4985: LD_VAR 0 1
4989: PUSH
4990: LD_INT 5
4992: EQUAL
4993: IFFALSE 5169
// begin hc_class := 1 ;
4995: LD_ADDR_OWVAR 28
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// hc_sex := sex_female ;
5003: LD_ADDR_OWVAR 27
5007: PUSH
5008: LD_INT 2
5010: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5011: LD_ADDR_OWVAR 33
5015: PUSH
5016: LD_STRING SecondCharsGal
5018: ST_TO_ADDR
// hc_face_number := 37 ;
5019: LD_ADDR_OWVAR 34
5023: PUSH
5024: LD_INT 37
5026: ST_TO_ADDR
// hc_name := Malena Johnson ;
5027: LD_ADDR_OWVAR 26
5031: PUSH
5032: LD_STRING Malena Johnson
5034: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
5035: LD_ADDR_OWVAR 29
5039: PUSH
5040: LD_INT 11
5042: PUSH
5043: LD_INT 10
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5050: LD_ADDR_OWVAR 30
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: LD_INT 2
5060: PUSH
5061: LD_INT 0
5063: PUSH
5064: LD_INT 0
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: ST_TO_ADDR
// hc_skills := [ 3 , 2 , 1 , 0 ] ;
5073: LD_ADDR_OWVAR 31
5077: PUSH
5078: LD_INT 3
5080: PUSH
5081: LD_INT 2
5083: PUSH
5084: LD_INT 1
5086: PUSH
5087: LD_INT 0
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// un = CreateHuman ;
5096: LD_ADDR_VAR 0 3
5100: PUSH
5101: CALL_OW 44
5105: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5106: LD_VAR 0 3
5110: PPUSH
5111: LD_INT 27
5113: PPUSH
5114: LD_INT 1
5116: PPUSH
5117: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5121: LD_VAR 0 3
5125: PPUSH
5126: CALL_OW 87
// wait ( 0 0$1 ) ;
5130: LD_INT 35
5132: PPUSH
5133: CALL_OW 67
// DialogueOn ;
5137: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5141: LD_VAR 0 3
5145: PPUSH
5146: LD_STRING D11c-FSol3-1
5148: PPUSH
5149: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5153: LD_EXP 1
5157: PPUSH
5158: LD_STRING D11c-JMM-1
5160: PPUSH
5161: CALL_OW 88
// DialogueOff ;
5165: CALL_OW 7
// end ; if number = 6 then
5169: LD_VAR 0 1
5173: PUSH
5174: LD_INT 6
5176: EQUAL
5177: IFFALSE 5351
// begin hc_class := 1 ;
5179: LD_ADDR_OWVAR 28
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// hc_sex := sex_male ;
5187: LD_ADDR_OWVAR 27
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5195: LD_ADDR_OWVAR 33
5199: PUSH
5200: LD_STRING AmGalRemake
5202: ST_TO_ADDR
// hc_face_number := 1 ;
5203: LD_ADDR_OWVAR 34
5207: PUSH
5208: LD_INT 1
5210: ST_TO_ADDR
// hc_name := Charles Brown ;
5211: LD_ADDR_OWVAR 26
5215: PUSH
5216: LD_STRING Charles Brown
5218: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5219: LD_ADDR_OWVAR 29
5223: PUSH
5224: LD_INT 12
5226: PUSH
5227: LD_INT 11
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
5234: LD_ADDR_OWVAR 30
5238: PUSH
5239: LD_INT 3
5241: PUSH
5242: LD_INT 0
5244: PUSH
5245: LD_INT 0
5247: PUSH
5248: LD_INT 0
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
5257: LD_ADDR_OWVAR 31
5261: PUSH
5262: LD_INT 3
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: ST_TO_ADDR
// un = CreateHuman ;
5280: LD_ADDR_VAR 0 3
5284: PUSH
5285: CALL_OW 44
5289: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5290: LD_VAR 0 3
5294: PPUSH
5295: LD_INT 28
5297: PPUSH
5298: LD_INT 1
5300: PPUSH
5301: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5305: LD_VAR 0 3
5309: PPUSH
5310: CALL_OW 87
// wait ( 0 0$1 ) ;
5314: LD_INT 35
5316: PPUSH
5317: CALL_OW 67
// DialogueOn ;
5321: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5325: LD_VAR 0 3
5329: PPUSH
5330: LD_STRING D4-Sol1-5
5332: PPUSH
5333: CALL_OW 88
// DialogueOff ;
5337: CALL_OW 7
// tempCharles = un ;
5341: LD_ADDR_EXP 14
5345: PUSH
5346: LD_VAR 0 3
5350: ST_TO_ADDR
// end ; if number = 7 then
5351: LD_VAR 0 1
5355: PUSH
5356: LD_INT 7
5358: EQUAL
5359: IFFALSE 5631
// begin hc_class := 1 ;
5361: LD_ADDR_OWVAR 28
5365: PUSH
5366: LD_INT 1
5368: ST_TO_ADDR
// hc_sex := sex_female ;
5369: LD_ADDR_OWVAR 27
5373: PUSH
5374: LD_INT 2
5376: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5377: LD_ADDR_OWVAR 33
5381: PUSH
5382: LD_STRING AmGalRemake
5384: ST_TO_ADDR
// hc_face_number := 2 ;
5385: LD_ADDR_OWVAR 34
5389: PUSH
5390: LD_INT 2
5392: ST_TO_ADDR
// hc_name := Johanna Holland ;
5393: LD_ADDR_OWVAR 26
5397: PUSH
5398: LD_STRING Johanna Holland
5400: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5401: LD_ADDR_OWVAR 29
5405: PUSH
5406: LD_INT 10
5408: PUSH
5409: LD_INT 10
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 1 ] ;
5416: LD_ADDR_OWVAR 30
5420: PUSH
5421: LD_INT 2
5423: PUSH
5424: LD_INT 0
5426: PUSH
5427: LD_INT 0
5429: PUSH
5430: LD_INT 1
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
5439: LD_ADDR_OWVAR 31
5443: PUSH
5444: LD_INT 3
5446: PUSH
5447: LD_INT 0
5449: PUSH
5450: LD_INT 1
5452: PUSH
5453: LD_INT 2
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: ST_TO_ADDR
// un = CreateHuman ;
5462: LD_ADDR_VAR 0 3
5466: PUSH
5467: CALL_OW 44
5471: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5472: LD_VAR 0 3
5476: PPUSH
5477: LD_INT 29
5479: PPUSH
5480: LD_INT 1
5482: PPUSH
5483: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5487: LD_VAR 0 3
5491: PPUSH
5492: CALL_OW 87
// wait ( 0 0$1 ) ;
5496: LD_INT 35
5498: PPUSH
5499: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5503: LD_INT 30
5505: PPUSH
5506: LD_INT 22
5508: PUSH
5509: LD_INT 3
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PPUSH
5516: CALL_OW 70
5520: IFFALSE 5631
// begin DialogueOn ;
5522: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5526: LD_VAR 0 3
5530: PPUSH
5531: CALL_OW 250
5535: PPUSH
5536: LD_VAR 0 3
5540: PPUSH
5541: CALL_OW 251
5545: PPUSH
5546: LD_INT 1
5548: PPUSH
5549: LD_INT 15
5551: NEG
5552: PPUSH
5553: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5557: LD_VAR 0 3
5561: PPUSH
5562: CALL_OW 250
5566: PPUSH
5567: LD_VAR 0 3
5571: PPUSH
5572: CALL_OW 251
5576: PPUSH
5577: LD_INT 1
5579: PPUSH
5580: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5584: LD_VAR 0 3
5588: PPUSH
5589: LD_STRING D11a-FSol2-1
5591: PPUSH
5592: CALL_OW 88
// DialogueOff ;
5596: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5600: LD_INT 3
5602: PPUSH
5603: LD_VAR 0 3
5607: PPUSH
5608: CALL_OW 471
// wait ( 0 0$2 ) ;
5612: LD_INT 70
5614: PPUSH
5615: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5619: LD_INT 3
5621: PPUSH
5622: LD_VAR 0 3
5626: PPUSH
5627: CALL_OW 472
// end ; end ; if number = 8 then
5631: LD_VAR 0 1
5635: PUSH
5636: LD_INT 8
5638: EQUAL
5639: IFFALSE 5795
// begin hc_class := 1 ;
5641: LD_ADDR_OWVAR 28
5645: PUSH
5646: LD_INT 1
5648: ST_TO_ADDR
// hc_sex := sex_female ;
5649: LD_ADDR_OWVAR 27
5653: PUSH
5654: LD_INT 2
5656: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5657: LD_ADDR_OWVAR 33
5661: PUSH
5662: LD_STRING SecondCharsGal
5664: ST_TO_ADDR
// hc_face_number := 45 ;
5665: LD_ADDR_OWVAR 34
5669: PUSH
5670: LD_INT 45
5672: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5673: LD_ADDR_OWVAR 26
5677: PUSH
5678: LD_STRING Margherite Simpson
5680: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5681: LD_ADDR_OWVAR 29
5685: PUSH
5686: LD_INT 12
5688: PUSH
5689: LD_INT 10
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5696: LD_ADDR_OWVAR 30
5700: PUSH
5701: LD_INT 1
5703: PUSH
5704: LD_INT 2
5706: PUSH
5707: LD_INT 0
5709: PUSH
5710: LD_INT 0
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 1 ] ;
5719: LD_ADDR_OWVAR 31
5723: PUSH
5724: LD_INT 2
5726: PUSH
5727: LD_INT 3
5729: PUSH
5730: LD_INT 0
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: ST_TO_ADDR
// un = CreateHuman ;
5742: LD_ADDR_VAR 0 3
5746: PUSH
5747: CALL_OW 44
5751: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5752: LD_VAR 0 3
5756: PPUSH
5757: LD_INT 33
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5767: LD_VAR 0 3
5771: PPUSH
5772: CALL_OW 87
// wait ( 0 0$1 ) ;
5776: LD_INT 35
5778: PPUSH
5779: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5783: LD_VAR 0 3
5787: PPUSH
5788: LD_STRING D11e-FSol4-1
5790: PPUSH
5791: CALL_OW 88
// end ; arrivals := arrivals union un ;
5795: LD_ADDR_EXP 45
5799: PUSH
5800: LD_EXP 45
5804: PUSH
5805: LD_VAR 0 3
5809: UNION
5810: ST_TO_ADDR
// end ; end_of_file
5811: LD_VAR 0 2
5815: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
// ruAttackers := [ ] ;
5820: LD_ADDR_EXP 48
5824: PUSH
5825: EMPTY
5826: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5827: LD_ADDR_EXP 49
5831: PUSH
5832: EMPTY
5833: ST_TO_ADDR
// if Difficulty < 3 then
5834: LD_OWVAR 67
5838: PUSH
5839: LD_INT 3
5841: LESS
5842: IFFALSE 5859
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5844: LD_INT 130
5846: PPUSH
5847: LD_INT 81
5849: PPUSH
5850: CALL_OW 428
5854: PPUSH
5855: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5859: LD_INT 3
5861: PPUSH
5862: LD_INT 3
5864: PPUSH
5865: LD_INT 2
5867: PPUSH
5868: LD_EXP 35
5872: PPUSH
5873: LD_EXP 36
5877: PPUSH
5878: CALL_OW 12
5882: PPUSH
5883: LD_INT 2
5885: PPUSH
5886: LD_INT 4
5888: PPUSH
5889: CALL 7686 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5893: LD_INT 3
5895: PPUSH
5896: LD_INT 3
5898: PPUSH
5899: LD_INT 8
5901: PPUSH
5902: LD_EXP 35
5906: PPUSH
5907: LD_EXP 36
5911: PPUSH
5912: CALL_OW 12
5916: PPUSH
5917: LD_INT 1
5919: PPUSH
5920: LD_INT 4
5922: PPUSH
5923: CALL 7686 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5927: LD_INT 3
5929: PPUSH
5930: LD_INT 3
5932: PPUSH
5933: LD_INT 67
5935: PPUSH
5936: LD_EXP 35
5940: PPUSH
5941: LD_EXP 36
5945: PPUSH
5946: CALL_OW 12
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: LD_INT 2
5956: PPUSH
5957: CALL 7686 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5961: LD_INT 3
5963: PPUSH
5964: LD_INT 3
5966: PPUSH
5967: LD_INT 21
5969: PPUSH
5970: LD_EXP 35
5974: PPUSH
5975: LD_EXP 36
5979: PPUSH
5980: CALL_OW 12
5984: PPUSH
5985: LD_INT 3
5987: PPUSH
5988: LD_INT 6
5990: PPUSH
5991: CALL 7686 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5995: LD_INT 3
5997: PPUSH
5998: LD_INT 3
6000: PPUSH
6001: LD_INT 17
6003: PPUSH
6004: LD_EXP 35
6008: PPUSH
6009: LD_EXP 36
6013: PPUSH
6014: CALL_OW 12
6018: PPUSH
6019: LD_INT 3
6021: PPUSH
6022: LD_INT 6
6024: PPUSH
6025: CALL 7686 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6029: LD_INT 3
6031: PPUSH
6032: LD_INT 3
6034: PPUSH
6035: LD_INT 32
6037: PPUSH
6038: LD_EXP 35
6042: PPUSH
6043: LD_EXP 36
6047: PPUSH
6048: CALL_OW 12
6052: PPUSH
6053: LD_INT 4
6055: PPUSH
6056: LD_INT 2
6058: PPUSH
6059: CALL 7686 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6063: LD_ADDR_VAR 0 2
6067: PUSH
6068: LD_INT 22
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 21
6080: PUSH
6081: LD_INT 3
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 30
6090: PUSH
6091: LD_INT 32
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: PPUSH
6103: CALL_OW 69
6107: PUSH
6108: FOR_IN
6109: IFFALSE 6149
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6111: LD_INT 3
6113: PPUSH
6114: LD_INT 3
6116: PPUSH
6117: LD_VAR 0 2
6121: PPUSH
6122: LD_EXP 35
6126: PPUSH
6127: LD_EXP 36
6131: PPUSH
6132: CALL_OW 12
6136: PPUSH
6137: LD_INT 1
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: CALL 7686 0 6
6147: GO 6108
6149: POP
6150: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6151: LD_ADDR_VAR 0 2
6155: PUSH
6156: LD_INT 22
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: LD_INT 21
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 30
6178: PUSH
6179: LD_INT 31
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 69
6195: PUSH
6196: FOR_IN
6197: IFFALSE 6225
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6199: LD_EXP 35
6203: PPUSH
6204: LD_EXP 36
6208: PPUSH
6209: CALL_OW 12
6213: PPUSH
6214: LD_VAR 0 2
6218: PPUSH
6219: CALL 7796 0 2
6223: GO 6196
6225: POP
6226: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6227: LD_INT 3
6229: PPUSH
6230: LD_INT 32
6232: PPUSH
6233: LD_INT 3
6235: PPUSH
6236: CALL 8075 0 3
// end ;
6240: LD_VAR 0 1
6244: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6245: LD_INT 22
6247: PUSH
6248: LD_INT 3
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 32
6257: PUSH
6258: LD_INT 1
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PPUSH
6269: CALL_OW 69
6273: IFFALSE 6350
6275: GO 6277
6277: DISABLE
6278: LD_INT 0
6280: PPUSH
// begin enable ;
6281: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6282: LD_ADDR_VAR 0 1
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 32
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: PUSH
6316: FOR_IN
6317: IFFALSE 6348
// if GetFuel ( i ) < 3 then
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 261
6328: PUSH
6329: LD_INT 3
6331: LESS
6332: IFFALSE 6346
// SetFuel ( i , 3 ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: LD_INT 3
6341: PPUSH
6342: CALL_OW 240
6346: GO 6316
6348: POP
6349: POP
// end ;
6350: PPOPN 1
6352: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6353: LD_OWVAR 67
6357: PUSH
6358: LD_INT 1
6360: GREATER
6361: IFFALSE 6930
6363: GO 6365
6365: DISABLE
6366: LD_INT 0
6368: PPUSH
6369: PPUSH
6370: PPUSH
6371: PPUSH
// begin uc_side := 3 ;
6372: LD_ADDR_OWVAR 20
6376: PUSH
6377: LD_INT 3
6379: ST_TO_ADDR
// uc_nation := 3 ;
6380: LD_ADDR_OWVAR 21
6384: PUSH
6385: LD_INT 3
6387: ST_TO_ADDR
// for i := 1 to 2 do
6388: LD_ADDR_VAR 0 1
6392: PUSH
6393: DOUBLE
6394: LD_INT 1
6396: DEC
6397: ST_TO_ADDR
6398: LD_INT 2
6400: PUSH
6401: FOR_TO
6402: IFFALSE 6516
// begin InitHC_All ( ) ;
6404: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6408: LD_INT 0
6410: PPUSH
6411: LD_INT 4
6413: PUSH
6414: LD_INT 5
6416: PUSH
6417: LD_INT 6
6419: PUSH
6420: LD_INT 6
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: PUSH
6429: LD_OWVAR 67
6433: ARRAY
6434: PPUSH
6435: CALL_OW 381
// un := CreateHuman ;
6439: LD_ADDR_VAR 0 2
6443: PUSH
6444: CALL_OW 44
6448: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_INT 91
6456: PPUSH
6457: LD_INT 87
6459: PPUSH
6460: LD_INT 3
6462: PPUSH
6463: LD_INT 0
6465: PPUSH
6466: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6470: LD_ADDR_EXP 49
6474: PUSH
6475: LD_EXP 49
6479: PPUSH
6480: LD_EXP 49
6484: PUSH
6485: LD_INT 1
6487: PLUS
6488: PPUSH
6489: LD_VAR 0 2
6493: PPUSH
6494: CALL_OW 1
6498: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6499: LD_VAR 0 2
6503: PPUSH
6504: LD_INT 46
6506: PPUSH
6507: LD_INT 78
6509: PPUSH
6510: CALL_OW 114
// end ;
6514: GO 6401
6516: POP
6517: POP
// if Difficulty > 2 then
6518: LD_OWVAR 67
6522: PUSH
6523: LD_INT 2
6525: GREATER
6526: IFFALSE 6658
// begin for i := 1 to 3 do
6528: LD_ADDR_VAR 0 1
6532: PUSH
6533: DOUBLE
6534: LD_INT 1
6536: DEC
6537: ST_TO_ADDR
6538: LD_INT 3
6540: PUSH
6541: FOR_TO
6542: IFFALSE 6656
// begin InitHC_All ( ) ;
6544: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6548: LD_INT 0
6550: PPUSH
6551: LD_INT 4
6553: PUSH
6554: LD_INT 5
6556: PUSH
6557: LD_INT 6
6559: PUSH
6560: LD_INT 6
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: PUSH
6569: LD_OWVAR 67
6573: ARRAY
6574: PPUSH
6575: CALL_OW 381
// un := CreateHuman ;
6579: LD_ADDR_VAR 0 2
6583: PUSH
6584: CALL_OW 44
6588: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6589: LD_VAR 0 2
6593: PPUSH
6594: LD_INT 91
6596: PPUSH
6597: LD_INT 87
6599: PPUSH
6600: LD_INT 3
6602: PPUSH
6603: LD_INT 0
6605: PPUSH
6606: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6610: LD_ADDR_EXP 49
6614: PUSH
6615: LD_EXP 49
6619: PPUSH
6620: LD_EXP 49
6624: PUSH
6625: LD_INT 1
6627: PLUS
6628: PPUSH
6629: LD_VAR 0 2
6633: PPUSH
6634: CALL_OW 1
6638: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6639: LD_VAR 0 2
6643: PPUSH
6644: LD_INT 89
6646: PPUSH
6647: LD_INT 148
6649: PPUSH
6650: CALL_OW 114
// end ;
6654: GO 6541
6656: POP
6657: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6658: LD_ADDR_VAR 0 3
6662: PUSH
6663: LD_INT 33
6665: PUSH
6666: LD_INT 61
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 49
6675: PUSH
6676: LD_INT 85
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 76
6685: PUSH
6686: LD_INT 99
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 81
6695: PUSH
6696: LD_INT 135
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 111
6705: PUSH
6706: LD_INT 155
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 147
6715: PUSH
6716: LD_INT 158
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6731: LD_INT 1050
6733: PPUSH
6734: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6738: LD_ADDR_VAR 0 1
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_EXP 49
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6921
// begin un := ruAttackersInForest [ i ] ;
6756: LD_ADDR_VAR 0 2
6760: PUSH
6761: LD_EXP 49
6765: PUSH
6766: LD_VAR 0 1
6770: ARRAY
6771: ST_TO_ADDR
// tag := GetTag ( un ) ;
6772: LD_ADDR_VAR 0 4
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: CALL_OW 110
6786: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6787: LD_VAR 0 2
6791: PPUSH
6792: CALL_OW 302
6796: PUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 314
6806: NOT
6807: AND
6808: IFFALSE 6919
// begin if tag <> i then
6810: LD_VAR 0 4
6814: PUSH
6815: LD_VAR 0 1
6819: NONEQUAL
6820: IFFALSE 6848
// begin SetTag ( un , i ) ;
6822: LD_VAR 0 2
6826: PPUSH
6827: LD_VAR 0 1
6831: PPUSH
6832: CALL_OW 109
// tag := i ;
6836: LD_ADDR_VAR 0 4
6840: PUSH
6841: LD_VAR 0 1
6845: ST_TO_ADDR
// end else
6846: GO 6880
// begin SetTag ( un , i + 1 ) ;
6848: LD_VAR 0 2
6852: PPUSH
6853: LD_VAR 0 1
6857: PUSH
6858: LD_INT 1
6860: PLUS
6861: PPUSH
6862: CALL_OW 109
// tag := i + 1 ;
6866: LD_ADDR_VAR 0 4
6870: PUSH
6871: LD_VAR 0 1
6875: PUSH
6876: LD_INT 1
6878: PLUS
6879: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6880: LD_VAR 0 2
6884: PPUSH
6885: LD_VAR 0 3
6889: PUSH
6890: LD_VAR 0 4
6894: ARRAY
6895: PUSH
6896: LD_INT 1
6898: ARRAY
6899: PPUSH
6900: LD_VAR 0 3
6904: PUSH
6905: LD_VAR 0 4
6909: ARRAY
6910: PUSH
6911: LD_INT 2
6913: ARRAY
6914: PPUSH
6915: CALL_OW 114
// end ; end ;
6919: GO 6753
6921: POP
6922: POP
// until not ruAttackersInForest ;
6923: LD_EXP 49
6927: NOT
6928: IFFALSE 6731
// end ;
6930: PPOPN 4
6932: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6933: LD_INT 10
6935: PPUSH
6936: LD_INT 22
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PPUSH
6946: CALL_OW 70
6950: IFFALSE 7299
6952: GO 6954
6954: DISABLE
6955: LD_INT 0
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
// begin enable ;
6961: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6962: LD_ADDR_VAR 0 2
6966: PUSH
6967: LD_INT 22
6969: PUSH
6970: LD_INT 3
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 25
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 120
6989: PUSH
6990: LD_INT 111
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: LIST
7001: PPUSH
7002: CALL_OW 69
7006: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
7007: LD_ADDR_VAR 0 3
7011: PUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 3
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 50
7024: PUSH
7025: EMPTY
7026: LIST
7027: PUSH
7028: LD_INT 2
7030: PUSH
7031: LD_INT 30
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 30
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: PPUSH
7061: CALL_OW 69
7065: ST_TO_ADDR
// if not tmp then
7066: LD_VAR 0 2
7070: NOT
7071: IFFALSE 7169
// begin if not bar then
7073: LD_VAR 0 3
7077: NOT
7078: IFFALSE 7083
// begin disable ;
7080: DISABLE
// exit ;
7081: GO 7299
// end ; tmp := [ ] ;
7083: LD_ADDR_VAR 0 2
7087: PUSH
7088: EMPTY
7089: ST_TO_ADDR
// for i in bar do
7090: LD_ADDR_VAR 0 1
7094: PUSH
7095: LD_VAR 0 3
7099: PUSH
7100: FOR_IN
7101: IFFALSE 7126
// tmp := tmp union UnitsInside ( i ) ;
7103: LD_ADDR_VAR 0 2
7107: PUSH
7108: LD_VAR 0 2
7112: PUSH
7113: LD_VAR 0 1
7117: PPUSH
7118: CALL_OW 313
7122: UNION
7123: ST_TO_ADDR
7124: GO 7100
7126: POP
7127: POP
// if not tmp then
7128: LD_VAR 0 2
7132: NOT
7133: IFFALSE 7138
// begin disable ;
7135: DISABLE
// exit ;
7136: GO 7299
// end ; for i in tmp do
7138: LD_ADDR_VAR 0 1
7142: PUSH
7143: LD_VAR 0 2
7147: PUSH
7148: FOR_IN
7149: IFFALSE 7165
// SetTag ( i , 111 ) ;
7151: LD_VAR 0 1
7155: PPUSH
7156: LD_INT 111
7158: PPUSH
7159: CALL_OW 109
7163: GO 7148
7165: POP
7166: POP
// end else
7167: GO 7299
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7169: LD_ADDR_VAR 0 4
7173: PUSH
7174: LD_INT 10
7176: PPUSH
7177: LD_INT 22
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PPUSH
7187: CALL_OW 70
7191: ST_TO_ADDR
// for i in tmp do
7192: LD_ADDR_VAR 0 1
7196: PUSH
7197: LD_VAR 0 2
7201: PUSH
7202: FOR_IN
7203: IFFALSE 7297
// if IsOk ( i ) then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 302
7214: IFFALSE 7295
// begin if IsInUnit ( i ) then
7216: LD_VAR 0 1
7220: PPUSH
7221: CALL_OW 310
7225: IFFALSE 7236
// ComExitBuilding ( i ) ;
7227: LD_VAR 0 1
7231: PPUSH
7232: CALL_OW 122
// wait ( 3 ) ;
7236: LD_INT 3
7238: PPUSH
7239: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7243: LD_VAR 0 1
7247: PPUSH
7248: LD_VAR 0 4
7252: PPUSH
7253: LD_VAR 0 1
7257: PPUSH
7258: CALL_OW 74
7262: PPUSH
7263: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7267: LD_VAR 0 1
7271: PPUSH
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 1
7279: PPUSH
7280: LD_VAR 0 3
7284: PPUSH
7285: CALL_OW 12
7289: ARRAY
7290: PPUSH
7291: CALL_OW 180
// end ;
7295: GO 7202
7297: POP
7298: POP
// end ; end ;
7299: PPOPN 4
7301: END
// every 3 3$00 trigger tick > 2 2$00 and Prob ( 50 ) do var un ;
7302: LD_OWVAR 1
7306: PUSH
7307: LD_INT 4200
7309: GREATER
7310: PUSH
7311: LD_INT 50
7313: PPUSH
7314: CALL_OW 13
7318: AND
7319: IFFALSE 7410
7321: GO 7323
7323: DISABLE
7324: LD_INT 0
7326: PPUSH
// begin uc_side := 3 ;
7327: LD_ADDR_OWVAR 20
7331: PUSH
7332: LD_INT 3
7334: ST_TO_ADDR
// uc_nation := nation_russian ;
7335: LD_ADDR_OWVAR 21
7339: PUSH
7340: LD_INT 3
7342: ST_TO_ADDR
// InitHC_All ( ) ;
7343: CALL_OW 584
// PrepareEngineer ( false , 2 ) ;
7347: LD_INT 0
7349: PPUSH
7350: LD_INT 2
7352: PPUSH
7353: CALL_OW 382
// un := CreateHuman ;
7357: LD_ADDR_VAR 0 1
7361: PUSH
7362: CALL_OW 44
7366: ST_TO_ADDR
// PlaceUnitXYR ( un , 51 , 7 , 12 , true ) ;
7367: LD_VAR 0 1
7371: PPUSH
7372: LD_INT 51
7374: PPUSH
7375: LD_INT 7
7377: PPUSH
7378: LD_INT 12
7380: PPUSH
7381: LD_INT 1
7383: PPUSH
7384: CALL_OW 50
// wait ( 0 0$1 ) ;
7388: LD_INT 35
7390: PPUSH
7391: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_INT 106
7402: PPUSH
7403: LD_INT 83
7405: PPUSH
7406: CALL_OW 111
// end ;
7410: PPOPN 1
7412: END
// every 3 3$30 trigger tick > 10 10$00 and Prob ( 45 ) do var un ;
7413: LD_OWVAR 1
7417: PUSH
7418: LD_INT 21000
7420: GREATER
7421: PUSH
7422: LD_INT 45
7424: PPUSH
7425: CALL_OW 13
7429: AND
7430: IFFALSE 7545
7432: GO 7434
7434: DISABLE
7435: LD_INT 0
7437: PPUSH
// begin uc_side := 3 ;
7438: LD_ADDR_OWVAR 20
7442: PUSH
7443: LD_INT 3
7445: ST_TO_ADDR
// uc_nation := nation_russian ;
7446: LD_ADDR_OWVAR 21
7450: PUSH
7451: LD_INT 3
7453: ST_TO_ADDR
// InitHC_All ( ) ;
7454: CALL_OW 584
// PrepareScientist ( false , 2 ) ;
7458: LD_INT 0
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: CALL_OW 384
// un := CreateHuman ;
7468: LD_ADDR_VAR 0 1
7472: PUSH
7473: CALL_OW 44
7477: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 18 , 15 , true ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: LD_INT 91
7485: PPUSH
7486: LD_INT 18
7488: PPUSH
7489: LD_INT 15
7491: PPUSH
7492: LD_INT 1
7494: PPUSH
7495: CALL_OW 50
// wait ( 0 0$1 ) ;
7499: LD_INT 35
7501: PPUSH
7502: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7506: LD_VAR 0 1
7510: PPUSH
7511: LD_INT 106
7513: PPUSH
7514: LD_INT 83
7516: PPUSH
7517: CALL_OW 111
// AddComEnterUnit ( un , ruarm2 ) ;
7521: LD_VAR 0 1
7525: PPUSH
7526: LD_INT 67
7528: PPUSH
7529: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
7533: LD_VAR 0 1
7537: PPUSH
7538: LD_INT 1
7540: PPUSH
7541: CALL_OW 183
// end ; end_of_file
7545: PPOPN 1
7547: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7548: LD_INT 0
7550: PPUSH
7551: PPUSH
7552: PPUSH
// if not characters then
7553: LD_VAR 0 1
7557: NOT
7558: IFFALSE 7562
// exit ;
7560: GO 7641
// speaker := characters [ rand ( 1 , characters ) ] ;
7562: LD_ADDR_VAR 0 6
7566: PUSH
7567: LD_VAR 0 1
7571: PUSH
7572: LD_INT 1
7574: PPUSH
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 12
7584: ARRAY
7585: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7586: LD_VAR 0 6
7590: PPUSH
7591: CALL_OW 258
7595: PUSH
7596: LD_INT 1
7598: EQUAL
7599: IFFALSE 7617
// Say ( speaker , dialogMID ) else
7601: LD_VAR 0 6
7605: PPUSH
7606: LD_VAR 0 2
7610: PPUSH
7611: CALL_OW 88
7615: GO 7631
// Say ( speaker , dialogFID ) ;
7617: LD_VAR 0 6
7621: PPUSH
7622: LD_VAR 0 3
7626: PPUSH
7627: CALL_OW 88
// result := speaker ;
7631: LD_ADDR_VAR 0 4
7635: PUSH
7636: LD_VAR 0 6
7640: ST_TO_ADDR
// end ;
7641: LD_VAR 0 4
7645: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7646: LD_INT 0
7648: PPUSH
7649: PPUSH
// for i in charactersList do
7650: LD_ADDR_VAR 0 4
7654: PUSH
7655: LD_VAR 0 1
7659: PUSH
7660: FOR_IN
7661: IFFALSE 7679
// SaveCharacters ( i , ident ) ;
7663: LD_VAR 0 4
7667: PPUSH
7668: LD_VAR 0 2
7672: PPUSH
7673: CALL_OW 38
7677: GO 7660
7679: POP
7680: POP
// end ;
7681: LD_VAR 0 3
7685: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7686: LD_INT 0
7688: PPUSH
7689: PPUSH
7690: PPUSH
7691: PPUSH
// for i := 1 to count do
7692: LD_ADDR_VAR 0 8
7696: PUSH
7697: DOUBLE
7698: LD_INT 1
7700: DEC
7701: ST_TO_ADDR
7702: LD_VAR 0 6
7706: PUSH
7707: FOR_TO
7708: IFFALSE 7789
// begin uc_side = side ;
7710: LD_ADDR_OWVAR 20
7714: PUSH
7715: LD_VAR 0 1
7719: ST_TO_ADDR
// uc_nation = nation ;
7720: LD_ADDR_OWVAR 21
7724: PUSH
7725: LD_VAR 0 2
7729: ST_TO_ADDR
// hc_gallery =  ;
7730: LD_ADDR_OWVAR 33
7734: PUSH
7735: LD_STRING 
7737: ST_TO_ADDR
// hc_name =  ;
7738: LD_ADDR_OWVAR 26
7742: PUSH
7743: LD_STRING 
7745: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7746: LD_INT 0
7748: PPUSH
7749: LD_VAR 0 5
7753: PPUSH
7754: LD_VAR 0 4
7758: PPUSH
7759: CALL_OW 380
// un = CreateHuman ;
7763: LD_ADDR_VAR 0 10
7767: PUSH
7768: CALL_OW 44
7772: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7773: LD_VAR 0 10
7777: PPUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 52
// end ;
7787: GO 7707
7789: POP
7790: POP
// end ;
7791: LD_VAR 0 7
7795: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7796: LD_INT 0
7798: PPUSH
7799: PPUSH
7800: PPUSH
// uc_side := GetSide ( b ) ;
7801: LD_ADDR_OWVAR 20
7805: PUSH
7806: LD_VAR 0 2
7810: PPUSH
7811: CALL_OW 255
7815: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7816: LD_ADDR_OWVAR 21
7820: PUSH
7821: LD_VAR 0 2
7825: PPUSH
7826: CALL_OW 248
7830: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7831: LD_INT 0
7833: PPUSH
7834: LD_INT 1
7836: PPUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7846: LD_ADDR_VAR 0 5
7850: PUSH
7851: LD_VAR 0 2
7855: PPUSH
7856: CALL_OW 254
7860: PUSH
7861: LD_INT 3
7863: MINUS
7864: ST_TO_ADDR
// if dir < 0 then
7865: LD_VAR 0 5
7869: PUSH
7870: LD_INT 0
7872: LESS
7873: IFFALSE 7889
// dir := 6 + dir ;
7875: LD_ADDR_VAR 0 5
7879: PUSH
7880: LD_INT 6
7882: PUSH
7883: LD_VAR 0 5
7887: PLUS
7888: ST_TO_ADDR
// un := CreateHuman ;
7889: LD_ADDR_VAR 0 4
7893: PUSH
7894: CALL_OW 44
7898: ST_TO_ADDR
// SetDir ( un , dir ) ;
7899: LD_VAR 0 4
7903: PPUSH
7904: LD_VAR 0 5
7908: PPUSH
7909: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7913: LD_VAR 0 4
7917: PPUSH
7918: LD_VAR 0 2
7922: PPUSH
7923: CALL_OW 52
// end ;
7927: LD_VAR 0 3
7931: RET
// export function PrepareDifficulty ; begin
7932: LD_INT 0
7934: PPUSH
// case Difficulty of 1 :
7935: LD_OWVAR 67
7939: PUSH
7940: LD_INT 1
7942: DOUBLE
7943: EQUAL
7944: IFTRUE 7948
7946: GO 7967
7948: POP
// begin RuSolMinLevel = 2 ;
7949: LD_ADDR_EXP 35
7953: PUSH
7954: LD_INT 2
7956: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7957: LD_ADDR_EXP 36
7961: PUSH
7962: LD_INT 3
7964: ST_TO_ADDR
// end ; 2 :
7965: GO 8028
7967: LD_INT 2
7969: DOUBLE
7970: EQUAL
7971: IFTRUE 7975
7973: GO 7994
7975: POP
// begin RuSolMinLevel = 3 ;
7976: LD_ADDR_EXP 35
7980: PUSH
7981: LD_INT 3
7983: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7984: LD_ADDR_EXP 36
7988: PUSH
7989: LD_INT 5
7991: ST_TO_ADDR
// end ; 3 .. 4 :
7992: GO 8028
7994: LD_INT 3
7996: DOUBLE
7997: GREATEREQUAL
7998: IFFALSE 8006
8000: LD_INT 4
8002: DOUBLE
8003: LESSEQUAL
8004: IFTRUE 8008
8006: GO 8027
8008: POP
// begin RuSolMinLevel = 4 ;
8009: LD_ADDR_EXP 35
8013: PUSH
8014: LD_INT 4
8016: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
8017: LD_ADDR_EXP 36
8021: PUSH
8022: LD_INT 6
8024: ST_TO_ADDR
// end ; end ;
8025: GO 8028
8027: POP
// end ;
8028: LD_VAR 0 1
8032: RET
// export function ShowQuery1 ; begin
8033: LD_INT 0
8035: PPUSH
// result := Query ( QKill ) ;
8036: LD_ADDR_VAR 0 1
8040: PUSH
8041: LD_STRING QKill
8043: PPUSH
8044: CALL_OW 97
8048: ST_TO_ADDR
// end ;
8049: LD_VAR 0 1
8053: RET
// export function ShowQuery2 ; begin
8054: LD_INT 0
8056: PPUSH
// result := Query ( QKill2 ) ;
8057: LD_ADDR_VAR 0 1
8061: PUSH
8062: LD_STRING QKill2
8064: PPUSH
8065: CALL_OW 97
8069: ST_TO_ADDR
// end ;
8070: LD_VAR 0 1
8074: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
8075: LD_INT 0
8077: PPUSH
8078: PPUSH
8079: PPUSH
8080: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
8081: LD_ADDR_VAR 0 7
8085: PUSH
8086: LD_INT 48
8088: PUSH
8089: LD_INT 49
8091: PUSH
8092: LD_INT 50
8094: PUSH
8095: LD_INT 20
8097: PUSH
8098: LD_INT 1
8100: PUSH
8101: LD_INT 51
8103: PUSH
8104: LD_INT 52
8106: PUSH
8107: LD_INT 69
8109: PUSH
8110: LD_INT 39
8112: PUSH
8113: LD_INT 34
8115: PUSH
8116: LD_INT 40
8118: PUSH
8119: LD_INT 53
8121: PUSH
8122: LD_INT 71
8124: PUSH
8125: LD_INT 57
8127: PUSH
8128: LD_INT 58
8130: PUSH
8131: LD_INT 44
8133: PUSH
8134: LD_INT 32
8136: PUSH
8137: LD_INT 27
8139: PUSH
8140: LD_INT 23
8142: PUSH
8143: LD_INT 33
8145: PUSH
8146: LD_INT 59
8148: PUSH
8149: LD_INT 54
8151: PUSH
8152: LD_INT 55
8154: PUSH
8155: LD_INT 56
8157: PUSH
8158: LD_INT 63
8160: PUSH
8161: LD_INT 64
8163: PUSH
8164: LD_INT 65
8166: PUSH
8167: LD_INT 30
8169: PUSH
8170: LD_INT 31
8172: PUSH
8173: LD_INT 21
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_INT 25
8181: PUSH
8182: LD_INT 82
8184: PUSH
8185: LD_INT 83
8187: PUSH
8188: LD_INT 84
8190: PUSH
8191: LD_INT 85
8193: PUSH
8194: LD_INT 86
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: ST_TO_ADDR
// for i = 1 to list do
8236: LD_ADDR_VAR 0 5
8240: PUSH
8241: DOUBLE
8242: LD_INT 1
8244: DEC
8245: ST_TO_ADDR
8246: LD_VAR 0 7
8250: PUSH
8251: FOR_TO
8252: IFFALSE 8324
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
8254: LD_VAR 0 7
8258: PUSH
8259: LD_VAR 0 5
8263: ARRAY
8264: PPUSH
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL_OW 321
8274: PUSH
8275: LD_INT 1
8277: EQUAL
8278: PUSH
8279: LD_VAR 0 7
8283: PUSH
8284: LD_VAR 0 5
8288: ARRAY
8289: PPUSH
8290: LD_VAR 0 3
8294: PPUSH
8295: CALL_OW 482
8299: AND
8300: IFFALSE 8322
// AddComResearch ( lab , list [ i ] ) ;
8302: LD_VAR 0 2
8306: PPUSH
8307: LD_VAR 0 7
8311: PUSH
8312: LD_VAR 0 5
8316: ARRAY
8317: PPUSH
8318: CALL_OW 184
8322: GO 8251
8324: POP
8325: POP
// end ;
8326: LD_VAR 0 4
8330: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8331: LD_INT 0
8333: PPUSH
8334: PPUSH
8335: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8336: LD_INT 22
8338: PUSH
8339: LD_VAR 0 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 21
8350: PUSH
8351: LD_INT 2
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: PUSH
8367: LD_VAR 0 3
8371: LESSEQUAL
8372: IFFALSE 8480
// begin for i = 1 to vehCount do
8374: LD_ADDR_VAR 0 9
8378: PUSH
8379: DOUBLE
8380: LD_INT 1
8382: DEC
8383: ST_TO_ADDR
8384: LD_VAR 0 3
8388: PUSH
8389: FOR_TO
8390: IFFALSE 8478
// begin weapon := weaponTab [ i ] ;
8392: LD_ADDR_VAR 0 10
8396: PUSH
8397: LD_VAR 0 4
8401: PUSH
8402: LD_VAR 0 9
8406: ARRAY
8407: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8408: LD_VAR 0 10
8412: PUSH
8413: LD_INT 46
8415: EQUAL
8416: IFFALSE 8447
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8418: LD_VAR 0 2
8422: PPUSH
8423: LD_INT 24
8425: PPUSH
8426: LD_VAR 0 5
8430: PPUSH
8431: LD_VAR 0 6
8435: PPUSH
8436: LD_VAR 0 10
8440: PPUSH
8441: CALL_OW 185
8445: GO 8476
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8447: LD_VAR 0 2
8451: PPUSH
8452: LD_VAR 0 7
8456: PPUSH
8457: LD_VAR 0 5
8461: PPUSH
8462: LD_VAR 0 6
8466: PPUSH
8467: LD_VAR 0 10
8471: PPUSH
8472: CALL_OW 185
// end ;
8476: GO 8389
8478: POP
8479: POP
// end ; end ;
8480: LD_VAR 0 8
8484: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8485: LD_INT 0
8487: PPUSH
8488: PPUSH
8489: PPUSH
8490: PPUSH
8491: PPUSH
8492: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8493: LD_ADDR_VAR 0 8
8497: PUSH
8498: LD_VAR 0 2
8502: PPUSH
8503: CALL_OW 313
8507: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8508: LD_ADDR_VAR 0 9
8512: PUSH
8513: LD_VAR 0 3
8517: PPUSH
8518: LD_INT 22
8520: PUSH
8521: LD_VAR 0 1
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 25
8532: PUSH
8533: LD_INT 2
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: LD_INT 24
8542: PUSH
8543: LD_INT 750
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 3
8552: PUSH
8553: LD_INT 54
8555: PUSH
8556: EMPTY
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 70
8573: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8574: LD_ADDR_VAR 0 6
8578: PUSH
8579: LD_VAR 0 3
8583: PPUSH
8584: LD_INT 22
8586: PUSH
8587: LD_VAR 0 1
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 21
8598: PUSH
8599: LD_INT 3
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: LD_INT 24
8611: PUSH
8612: LD_INT 1000
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: LIST
8627: PUSH
8628: EMPTY
8629: LIST
8630: PPUSH
8631: CALL_OW 70
8635: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8636: LD_VAR 0 6
8640: NOT
8641: PUSH
8642: LD_INT 22
8644: PUSH
8645: LD_VAR 0 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 25
8656: PUSH
8657: LD_INT 2
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 24
8666: PUSH
8667: LD_INT 250
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 69
8683: NOT
8684: AND
8685: IFFALSE 8689
// exit ;
8687: GO 8847
// if buildingsList and engineerOkInside then
8689: LD_VAR 0 6
8693: PUSH
8694: LD_VAR 0 8
8698: AND
8699: IFFALSE 8710
// ComExitBuilding ( engineerOkInside ) ;
8701: LD_VAR 0 8
8705: PPUSH
8706: CALL_OW 122
// if buildingsList and engineerOkOutside then
8710: LD_VAR 0 6
8714: PUSH
8715: LD_VAR 0 9
8719: AND
8720: IFFALSE 8740
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8722: LD_VAR 0 9
8726: PPUSH
8727: LD_VAR 0 6
8731: PUSH
8732: LD_INT 1
8734: ARRAY
8735: PPUSH
8736: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8740: LD_VAR 0 6
8744: PUSH
8745: LD_INT 0
8747: EQUAL
8748: PUSH
8749: LD_VAR 0 4
8753: PUSH
8754: LD_INT 0
8756: EQUAL
8757: AND
8758: PUSH
8759: LD_VAR 0 9
8763: AND
8764: IFFALSE 8780
// ComEnterUnit ( engineerOkOutside , depot ) ;
8766: LD_VAR 0 9
8770: PPUSH
8771: LD_VAR 0 2
8775: PPUSH
8776: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8780: LD_VAR 0 9
8784: PUSH
8785: LD_VAR 0 6
8789: PUSH
8790: LD_INT 0
8792: EQUAL
8793: AND
8794: PUSH
8795: LD_VAR 0 4
8799: AND
8800: IFFALSE 8847
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8802: LD_VAR 0 9
8806: PPUSH
8807: LD_VAR 0 4
8811: PUSH
8812: LD_INT 1
8814: ARRAY
8815: PPUSH
8816: LD_VAR 0 4
8820: PUSH
8821: LD_INT 2
8823: ARRAY
8824: PPUSH
8825: LD_VAR 0 4
8829: PUSH
8830: LD_INT 3
8832: ARRAY
8833: PPUSH
8834: LD_VAR 0 4
8838: PUSH
8839: LD_INT 4
8841: ARRAY
8842: PPUSH
8843: CALL_OW 145
// end ;
8847: LD_VAR 0 5
8851: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8852: LD_INT 0
8854: PPUSH
8855: PPUSH
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
8860: PPUSH
8861: PPUSH
8862: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8863: LD_ADDR_VAR 0 6
8867: PUSH
8868: LD_INT 22
8870: PUSH
8871: LD_VAR 0 1
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 25
8882: PUSH
8883: LD_INT 4
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 23
8892: PUSH
8893: LD_INT 2
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 24
8902: PUSH
8903: LD_INT 251
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: PPUSH
8916: CALL_OW 69
8920: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8921: LD_ADDR_VAR 0 7
8925: PUSH
8926: LD_VAR 0 3
8930: PPUSH
8931: LD_INT 22
8933: PUSH
8934: LD_VAR 0 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 23
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 25
8955: PUSH
8956: LD_INT 4
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 50
8965: PUSH
8966: EMPTY
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: PPUSH
8975: CALL_OW 70
8979: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8980: LD_ADDR_VAR 0 10
8984: PUSH
8985: LD_VAR 0 3
8989: PPUSH
8990: LD_INT 22
8992: PUSH
8993: LD_VAR 0 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 21
9004: PUSH
9005: LD_INT 1
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 3
9014: PUSH
9015: LD_INT 25
9017: PUSH
9018: LD_INT 3
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 3
9031: PUSH
9032: LD_INT 24
9034: PUSH
9035: LD_INT 750
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: PPUSH
9052: CALL_OW 70
9056: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9057: LD_ADDR_VAR 0 11
9061: PUSH
9062: LD_VAR 0 2
9066: PPUSH
9067: LD_INT 22
9069: PUSH
9070: LD_VAR 0 1
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 21
9081: PUSH
9082: LD_INT 1
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 3
9091: PUSH
9092: LD_INT 25
9094: PUSH
9095: LD_INT 3
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 3
9108: PUSH
9109: LD_INT 24
9111: PUSH
9112: LD_INT 1000
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 70
9133: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
9134: LD_VAR 0 10
9138: NOT
9139: PUSH
9140: LD_VAR 0 11
9144: NOT
9145: AND
9146: PUSH
9147: LD_VAR 0 6
9151: NOT
9152: AND
9153: IFFALSE 9157
// exit ;
9155: GO 9363
// if damageUnits and sci_list then
9157: LD_VAR 0 10
9161: PUSH
9162: LD_VAR 0 6
9166: AND
9167: IFFALSE 9183
// ComMoveToArea ( damageUnits , healArea ) ;
9169: LD_VAR 0 10
9173: PPUSH
9174: LD_VAR 0 2
9178: PPUSH
9179: CALL_OW 113
// if unitsToHeal and sci_list then
9183: LD_VAR 0 11
9187: PUSH
9188: LD_VAR 0 6
9192: AND
9193: IFFALSE 9204
// ComExitBuilding ( sci_list ) ;
9195: LD_VAR 0 6
9199: PPUSH
9200: CALL_OW 122
// if unitsToHeal and sci_listOutside then
9204: LD_VAR 0 11
9208: PUSH
9209: LD_VAR 0 7
9213: AND
9214: IFFALSE 9234
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9216: LD_VAR 0 7
9220: PPUSH
9221: LD_VAR 0 11
9225: PUSH
9226: LD_INT 1
9228: ARRAY
9229: PPUSH
9230: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
9234: LD_VAR 0 10
9238: PUSH
9239: LD_INT 0
9241: EQUAL
9242: PUSH
9243: LD_VAR 0 11
9247: PUSH
9248: LD_INT 0
9250: EQUAL
9251: AND
9252: PUSH
9253: LD_VAR 0 7
9257: AND
9258: IFFALSE 9363
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9260: LD_ADDR_VAR 0 12
9264: PUSH
9265: LD_INT 22
9267: PUSH
9268: LD_VAR 0 1
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 21
9279: PUSH
9280: LD_INT 3
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 30
9289: PUSH
9290: LD_INT 8
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: PPUSH
9302: CALL_OW 69
9306: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
9307: LD_ADDR_VAR 0 13
9311: PUSH
9312: LD_INT 1
9314: PPUSH
9315: LD_VAR 0 12
9319: PPUSH
9320: CALL_OW 12
9324: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9325: LD_VAR 0 7
9329: PPUSH
9330: LD_INT 3
9332: PUSH
9333: LD_INT 60
9335: PUSH
9336: EMPTY
9337: LIST
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PPUSH
9343: CALL_OW 72
9347: PPUSH
9348: LD_VAR 0 12
9352: PUSH
9353: LD_VAR 0 13
9357: ARRAY
9358: PPUSH
9359: CALL_OW 120
// end ; end ;
9363: LD_VAR 0 5
9367: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9368: LD_INT 0
9370: PPUSH
9371: PPUSH
9372: PPUSH
9373: PPUSH
9374: PPUSH
// tmp := [ ] ;
9375: LD_ADDR_VAR 0 6
9379: PUSH
9380: EMPTY
9381: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9382: LD_ADDR_VAR 0 7
9386: PUSH
9387: LD_INT 22
9389: PUSH
9390: LD_VAR 0 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: LD_INT 30
9401: PUSH
9402: LD_INT 32
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 69
9417: ST_TO_ADDR
// if bunkers then
9418: LD_VAR 0 7
9422: IFFALSE 9492
// for i in bunkers do
9424: LD_ADDR_VAR 0 4
9428: PUSH
9429: LD_VAR 0 7
9433: PUSH
9434: FOR_IN
9435: IFFALSE 9490
// for j in UnitsInside ( i ) do
9437: LD_ADDR_VAR 0 5
9441: PUSH
9442: LD_VAR 0 4
9446: PPUSH
9447: CALL_OW 313
9451: PUSH
9452: FOR_IN
9453: IFFALSE 9486
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9455: LD_ADDR_VAR 0 6
9459: PUSH
9460: LD_VAR 0 6
9464: PPUSH
9465: LD_VAR 0 6
9469: PUSH
9470: LD_INT 1
9472: PLUS
9473: PPUSH
9474: LD_VAR 0 5
9478: PPUSH
9479: CALL_OW 1
9483: ST_TO_ADDR
9484: GO 9452
9486: POP
9487: POP
9488: GO 9434
9490: POP
9491: POP
// if tmp then
9492: LD_VAR 0 6
9496: IFFALSE 9536
// begin ComExitBuilding ( tmp ) ;
9498: LD_VAR 0 6
9502: PPUSH
9503: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9507: LD_VAR 0 6
9511: PPUSH
9512: LD_VAR 0 2
9516: PPUSH
9517: CALL_OW 250
9521: PPUSH
9522: LD_VAR 0 2
9526: PPUSH
9527: CALL_OW 251
9531: PPUSH
9532: CALL_OW 174
// end ; end ;
9536: LD_VAR 0 3
9540: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
9545: PPUSH
// enable ;
9546: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9547: LD_ADDR_VAR 0 6
9551: PUSH
9552: LD_VAR 0 3
9556: PPUSH
9557: CALL_OW 435
9561: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9562: LD_ADDR_VAR 0 5
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_VAR 0 1
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 34
9581: PUSH
9582: LD_VAR 0 2
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PPUSH
9595: CALL_OW 69
9599: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9600: LD_VAR 0 5
9604: PUSH
9605: LD_VAR 0 3
9609: PPUSH
9610: CALL_OW 435
9614: AND
9615: PUSH
9616: LD_VAR 0 6
9620: AND
9621: IFFALSE 9654
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9623: LD_VAR 0 5
9627: PUSH
9628: LD_INT 1
9630: ARRAY
9631: PPUSH
9632: LD_VAR 0 6
9636: PUSH
9637: LD_INT 1
9639: ARRAY
9640: PPUSH
9641: LD_VAR 0 6
9645: PUSH
9646: LD_INT 2
9648: ARRAY
9649: PPUSH
9650: CALL_OW 177
// end ;
9654: LD_VAR 0 4
9658: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9659: LD_INT 0
9661: PPUSH
9662: PPUSH
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
9667: PPUSH
9668: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9669: LD_ADDR_VAR 0 6
9673: PUSH
9674: LD_VAR 0 2
9678: PPUSH
9679: LD_INT 22
9681: PUSH
9682: LD_VAR 0 1
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 56
9693: PUSH
9694: EMPTY
9695: LIST
9696: PUSH
9697: LD_INT 24
9699: PUSH
9700: LD_INT 700
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 3
9709: PUSH
9710: LD_INT 60
9712: PUSH
9713: EMPTY
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 2
9722: PUSH
9723: LD_INT 25
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 25
9735: PUSH
9736: LD_INT 5
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 25
9745: PUSH
9746: LD_INT 8
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 25
9755: PUSH
9756: LD_INT 9
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: PPUSH
9777: CALL_OW 70
9781: PUSH
9782: LD_EXP 48
9786: PUSH
9787: LD_EXP 49
9791: UNION
9792: DIFF
9793: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9794: LD_ADDR_VAR 0 7
9798: PUSH
9799: LD_VAR 0 2
9803: PPUSH
9804: LD_INT 22
9806: PUSH
9807: LD_VAR 0 1
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 30
9818: PUSH
9819: LD_INT 32
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 58
9828: PUSH
9829: EMPTY
9830: LIST
9831: PUSH
9832: LD_INT 24
9834: PUSH
9835: LD_INT 251
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 70
9852: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9853: LD_ADDR_VAR 0 9
9857: PUSH
9858: LD_VAR 0 2
9862: PPUSH
9863: LD_INT 22
9865: PUSH
9866: LD_VAR 0 1
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: LD_INT 30
9880: PUSH
9881: LD_INT 4
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 30
9890: PUSH
9891: LD_INT 5
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 24
9905: PUSH
9906: LD_INT 251
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: PPUSH
9918: CALL_OW 70
9922: ST_TO_ADDR
// if barrackList then
9923: LD_VAR 0 9
9927: IFFALSE 10083
// begin if turretList = 0 then
9929: LD_VAR 0 7
9933: PUSH
9934: LD_INT 0
9936: EQUAL
9937: IFFALSE 9975
// begin if soldiersList then
9939: LD_VAR 0 6
9943: IFFALSE 9973
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9945: LD_VAR 0 6
9949: PPUSH
9950: LD_VAR 0 9
9954: PUSH
9955: LD_INT 1
9957: PPUSH
9958: LD_VAR 0 9
9962: PPUSH
9963: CALL_OW 12
9967: ARRAY
9968: PPUSH
9969: CALL_OW 120
// end else
9973: GO 10083
// begin for i in barrackList do
9975: LD_ADDR_VAR 0 4
9979: PUSH
9980: LD_VAR 0 9
9984: PUSH
9985: FOR_IN
9986: IFFALSE 10081
// begin if not turretList then
9988: LD_VAR 0 7
9992: NOT
9993: IFFALSE 9999
// exit ;
9995: POP
9996: POP
9997: GO 10083
// insideUnits = UnitsInside ( i ) ;
9999: LD_ADDR_VAR 0 10
10003: PUSH
10004: LD_VAR 0 4
10008: PPUSH
10009: CALL_OW 313
10013: ST_TO_ADDR
// if insideUnits then
10014: LD_VAR 0 10
10018: IFFALSE 10079
// begin tmp := insideUnits [ 1 ] ;
10020: LD_ADDR_VAR 0 8
10024: PUSH
10025: LD_VAR 0 10
10029: PUSH
10030: LD_INT 1
10032: ARRAY
10033: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
10034: LD_VAR 0 8
10038: PPUSH
10039: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
10043: LD_VAR 0 8
10047: PPUSH
10048: LD_VAR 0 7
10052: PUSH
10053: LD_INT 1
10055: ARRAY
10056: PPUSH
10057: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
10061: LD_ADDR_VAR 0 7
10065: PUSH
10066: LD_VAR 0 7
10070: PPUSH
10071: LD_INT 1
10073: PPUSH
10074: CALL_OW 3
10078: ST_TO_ADDR
// end ; end ;
10079: GO 9985
10081: POP
10082: POP
// end ; end ; end ;
10083: LD_VAR 0 3
10087: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
10088: LD_INT 0
10090: PPUSH
10091: PPUSH
10092: PPUSH
10093: PPUSH
10094: PPUSH
10095: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10096: LD_ADDR_VAR 0 8
10100: PUSH
10101: LD_INT 22
10103: PUSH
10104: LD_VAR 0 1
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 21
10115: PUSH
10116: LD_INT 2
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 34
10125: PUSH
10126: LD_INT 52
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: PPUSH
10138: CALL_OW 69
10142: ST_TO_ADDR
// if not craneList then
10143: LD_VAR 0 8
10147: NOT
10148: IFFALSE 10152
// exit ;
10150: GO 10586
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10152: LD_ADDR_VAR 0 9
10156: PUSH
10157: LD_INT 22
10159: PUSH
10160: LD_VAR 0 1
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: LD_INT 21
10171: PUSH
10172: LD_INT 3
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 3
10181: PUSH
10182: LD_INT 24
10184: PUSH
10185: LD_INT 1000
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: PPUSH
10204: CALL_OW 69
10208: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
10209: LD_VAR 0 9
10213: PUSH
10214: LD_VAR 0 8
10218: PPUSH
10219: LD_INT 24
10221: PUSH
10222: LD_INT 750
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PPUSH
10229: CALL_OW 72
10233: AND
10234: IFFALSE 10269
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
10236: LD_VAR 0 8
10240: PPUSH
10241: LD_INT 24
10243: PUSH
10244: LD_INT 750
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PPUSH
10251: CALL_OW 72
10255: PPUSH
10256: LD_VAR 0 9
10260: PUSH
10261: LD_INT 1
10263: ARRAY
10264: PPUSH
10265: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
10269: LD_VAR 0 8
10273: PPUSH
10274: LD_INT 3
10276: PUSH
10277: LD_INT 24
10279: PUSH
10280: LD_INT 750
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 72
10295: IFFALSE 10333
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10297: LD_VAR 0 8
10301: PPUSH
10302: LD_INT 3
10304: PUSH
10305: LD_INT 24
10307: PUSH
10308: LD_INT 750
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PPUSH
10319: CALL_OW 72
10323: PPUSH
10324: LD_VAR 0 2
10328: PPUSH
10329: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
10333: LD_VAR 0 8
10337: PUSH
10338: LD_VAR 0 9
10342: PUSH
10343: LD_INT 0
10345: EQUAL
10346: AND
10347: PUSH
10348: LD_VAR 0 3
10352: AND
10353: IFFALSE 10400
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10355: LD_VAR 0 8
10359: PPUSH
10360: LD_VAR 0 3
10364: PUSH
10365: LD_INT 1
10367: ARRAY
10368: PPUSH
10369: LD_VAR 0 3
10373: PUSH
10374: LD_INT 2
10376: ARRAY
10377: PPUSH
10378: LD_VAR 0 3
10382: PUSH
10383: LD_INT 3
10385: ARRAY
10386: PPUSH
10387: LD_VAR 0 3
10391: PUSH
10392: LD_INT 4
10394: ARRAY
10395: PPUSH
10396: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10400: LD_ADDR_VAR 0 7
10404: PUSH
10405: LD_VAR 0 2
10409: PPUSH
10410: LD_INT 22
10412: PUSH
10413: LD_VAR 0 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 21
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 34
10434: PUSH
10435: LD_INT 52
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 3
10444: PUSH
10445: LD_INT 24
10447: PUSH
10448: LD_INT 750
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 70
10469: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10470: LD_ADDR_VAR 0 6
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: LD_INT 22
10482: PUSH
10483: LD_VAR 0 1
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 2
10494: PUSH
10495: LD_INT 30
10497: PUSH
10498: LD_INT 0
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 30
10507: PUSH
10508: LD_INT 1
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PPUSH
10524: CALL_OW 70
10528: ST_TO_ADDR
// if crane then
10529: LD_VAR 0 7
10533: IFFALSE 10586
// for i in crane do
10535: LD_ADDR_VAR 0 5
10539: PUSH
10540: LD_VAR 0 7
10544: PUSH
10545: FOR_IN
10546: IFFALSE 10584
// begin if dep then
10548: LD_VAR 0 6
10552: IFFALSE 10568
// ComMoveUnit ( i , dep ) ;
10554: LD_VAR 0 5
10558: PPUSH
10559: LD_VAR 0 6
10563: PPUSH
10564: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10568: LD_VAR 0 5
10572: PPUSH
10573: CALL_OW 311
10577: PPUSH
10578: CALL 82924 0 1
// end ;
10582: GO 10545
10584: POP
10585: POP
// end ;
10586: LD_VAR 0 4
10590: RET
// export function BuildBulldozer ; begin
10591: LD_INT 0
10593: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10594: LD_INT 17
10596: PPUSH
10597: CALL_OW 302
10601: NOT
10602: PUSH
10603: LD_INT 17
10605: PPUSH
10606: CALL_OW 255
10610: PUSH
10611: LD_INT 3
10613: NONEQUAL
10614: OR
10615: IFFALSE 10619
// exit ;
10617: GO 10638
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10619: LD_INT 17
10621: PPUSH
10622: LD_INT 24
10624: PPUSH
10625: LD_INT 1
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: LD_INT 53
10633: PPUSH
10634: CALL_OW 185
// end ;
10638: LD_VAR 0 1
10642: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10643: LD_INT 0
10645: PPUSH
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
// if not bulldozer then
10650: LD_VAR 0 1
10654: NOT
10655: IFFALSE 10659
// exit ;
10657: GO 10941
// list := ListEnvironmentArea ( area ) ;
10659: LD_ADDR_VAR 0 5
10663: PUSH
10664: LD_VAR 0 2
10668: PPUSH
10669: CALL_OW 353
10673: ST_TO_ADDR
// tmp := [ ] ;
10674: LD_ADDR_VAR 0 6
10678: PUSH
10679: EMPTY
10680: ST_TO_ADDR
// for i = 1 to list do
10681: LD_ADDR_VAR 0 4
10685: PUSH
10686: DOUBLE
10687: LD_INT 1
10689: DEC
10690: ST_TO_ADDR
10691: LD_VAR 0 5
10695: PUSH
10696: FOR_TO
10697: IFFALSE 10795
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10699: LD_VAR 0 5
10703: PUSH
10704: LD_VAR 0 4
10708: ARRAY
10709: PUSH
10710: LD_INT 1
10712: ARRAY
10713: PPUSH
10714: LD_VAR 0 5
10718: PUSH
10719: LD_VAR 0 4
10723: ARRAY
10724: PUSH
10725: LD_INT 2
10727: ARRAY
10728: PPUSH
10729: CALL_OW 554
10733: IFFALSE 10793
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10735: LD_ADDR_VAR 0 6
10739: PUSH
10740: LD_VAR 0 6
10744: PPUSH
10745: LD_VAR 0 6
10749: PUSH
10750: LD_INT 1
10752: PLUS
10753: PPUSH
10754: LD_VAR 0 5
10758: PUSH
10759: LD_VAR 0 4
10763: ARRAY
10764: PUSH
10765: LD_INT 1
10767: ARRAY
10768: PUSH
10769: LD_VAR 0 5
10773: PUSH
10774: LD_VAR 0 4
10778: ARRAY
10779: PUSH
10780: LD_INT 2
10782: ARRAY
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 1
10792: ST_TO_ADDR
// end ;
10793: GO 10696
10795: POP
10796: POP
// ComStop ( bulldozer ) ;
10797: LD_VAR 0 1
10801: PPUSH
10802: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10806: LD_ADDR_VAR 0 7
10810: PUSH
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 250
10820: PUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 251
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: ST_TO_ADDR
// for i = tmp downto 1 do
10835: LD_ADDR_VAR 0 4
10839: PUSH
10840: DOUBLE
10841: LD_VAR 0 6
10845: INC
10846: ST_TO_ADDR
10847: LD_INT 1
10849: PUSH
10850: FOR_DOWNTO
10851: IFFALSE 10939
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10853: LD_ADDR_VAR 0 7
10857: PUSH
10858: LD_VAR 0 7
10862: PUSH
10863: LD_INT 1
10865: ARRAY
10866: PPUSH
10867: LD_VAR 0 7
10871: PUSH
10872: LD_INT 2
10874: ARRAY
10875: PPUSH
10876: LD_VAR 0 6
10880: PPUSH
10881: CALL 11042 0 3
10885: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10886: LD_VAR 0 1
10890: PPUSH
10891: LD_VAR 0 7
10895: PUSH
10896: LD_INT 1
10898: ARRAY
10899: PPUSH
10900: LD_VAR 0 7
10904: PUSH
10905: LD_INT 2
10907: ARRAY
10908: PPUSH
10909: CALL 10946 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10913: LD_ADDR_VAR 0 6
10917: PUSH
10918: LD_VAR 0 6
10922: PPUSH
10923: LD_VAR 0 7
10927: PUSH
10928: LD_INT 3
10930: ARRAY
10931: PPUSH
10932: CALL_OW 3
10936: ST_TO_ADDR
// end ;
10937: GO 10850
10939: POP
10940: POP
// end ;
10941: LD_VAR 0 3
10945: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10946: LD_INT 0
10948: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10949: LD_VAR 0 2
10953: PPUSH
10954: LD_VAR 0 3
10958: PPUSH
10959: CALL_OW 351
10963: PUSH
10964: LD_VAR 0 2
10968: PPUSH
10969: LD_VAR 0 3
10973: PPUSH
10974: CALL_OW 554
10978: AND
10979: PUSH
10980: LD_VAR 0 2
10984: PPUSH
10985: LD_VAR 0 3
10989: PPUSH
10990: CALL_OW 488
10994: AND
10995: PUSH
10996: LD_VAR 0 2
11000: PPUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: CALL_OW 428
11010: PUSH
11011: LD_INT 1
11013: NEG
11014: EQUAL
11015: AND
11016: IFFALSE 11037
// AddComMoveXY ( bulldozer , x , y ) ;
11018: LD_VAR 0 1
11022: PPUSH
11023: LD_VAR 0 2
11027: PPUSH
11028: LD_VAR 0 3
11032: PPUSH
11033: CALL_OW 171
// end ;
11037: LD_VAR 0 4
11041: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
11042: LD_INT 0
11044: PPUSH
11045: PPUSH
11046: PPUSH
11047: PPUSH
11048: PPUSH
11049: PPUSH
11050: PPUSH
// dist := 99999 ;
11051: LD_ADDR_VAR 0 6
11055: PUSH
11056: LD_INT 99999
11058: ST_TO_ADDR
// for i = 1 to list do
11059: LD_ADDR_VAR 0 5
11063: PUSH
11064: DOUBLE
11065: LD_INT 1
11067: DEC
11068: ST_TO_ADDR
11069: LD_VAR 0 3
11073: PUSH
11074: FOR_TO
11075: IFFALSE 11213
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
11077: LD_ADDR_VAR 0 7
11081: PUSH
11082: LD_VAR 0 1
11086: PPUSH
11087: LD_VAR 0 2
11091: PPUSH
11092: LD_VAR 0 3
11096: PUSH
11097: LD_VAR 0 5
11101: ARRAY
11102: PUSH
11103: LD_INT 1
11105: ARRAY
11106: PPUSH
11107: LD_VAR 0 3
11111: PUSH
11112: LD_VAR 0 5
11116: ARRAY
11117: PUSH
11118: LD_INT 2
11120: ARRAY
11121: PPUSH
11122: CALL_OW 298
11126: ST_TO_ADDR
// if d = 0 then
11127: LD_VAR 0 7
11131: PUSH
11132: LD_INT 0
11134: EQUAL
11135: IFFALSE 11139
// continue ;
11137: GO 11074
// if d < dist then
11139: LD_VAR 0 7
11143: PUSH
11144: LD_VAR 0 6
11148: LESS
11149: IFFALSE 11211
// begin _x := list [ i ] [ 1 ] ;
11151: LD_ADDR_VAR 0 8
11155: PUSH
11156: LD_VAR 0 3
11160: PUSH
11161: LD_VAR 0 5
11165: ARRAY
11166: PUSH
11167: LD_INT 1
11169: ARRAY
11170: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
11171: LD_ADDR_VAR 0 9
11175: PUSH
11176: LD_VAR 0 3
11180: PUSH
11181: LD_VAR 0 5
11185: ARRAY
11186: PUSH
11187: LD_INT 2
11189: ARRAY
11190: ST_TO_ADDR
// _i := i ;
11191: LD_ADDR_VAR 0 10
11195: PUSH
11196: LD_VAR 0 5
11200: ST_TO_ADDR
// dist := d ;
11201: LD_ADDR_VAR 0 6
11205: PUSH
11206: LD_VAR 0 7
11210: ST_TO_ADDR
// end ; end ;
11211: GO 11074
11213: POP
11214: POP
// result := [ _x , _y , _i , dist ] ;
11215: LD_ADDR_VAR 0 4
11219: PUSH
11220: LD_VAR 0 8
11224: PUSH
11225: LD_VAR 0 9
11229: PUSH
11230: LD_VAR 0 10
11234: PUSH
11235: LD_VAR 0 6
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: ST_TO_ADDR
// end ; end_of_file
11246: LD_VAR 0 4
11250: RET
// export function Action ; begin
11251: LD_INT 0
11253: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
11254: LD_INT 66
11256: PPUSH
11257: LD_INT 4
11259: PPUSH
11260: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11264: LD_INT 22
11266: PUSH
11267: LD_INT 1
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 25
11276: PUSH
11277: LD_INT 2
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PPUSH
11288: CALL_OW 69
11292: PUSH
11293: LD_INT 0
11295: EQUAL
11296: IFFALSE 11310
// SetClass ( JMM , 2 ) ;
11298: LD_EXP 1
11302: PPUSH
11303: LD_INT 2
11305: PPUSH
11306: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11310: LD_STRING M1
11312: PPUSH
11313: CALL_OW 337
// case Difficulty of 1 :
11317: LD_OWVAR 67
11321: PUSH
11322: LD_INT 1
11324: DOUBLE
11325: EQUAL
11326: IFTRUE 11330
11328: GO 11340
11330: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11331: LD_STRING M1-1
11333: PPUSH
11334: CALL_OW 337
11338: GO 11395
11340: LD_INT 2
11342: DOUBLE
11343: EQUAL
11344: IFTRUE 11348
11346: GO 11358
11348: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11349: LD_STRING M1-2
11351: PPUSH
11352: CALL_OW 337
11356: GO 11395
11358: LD_INT 3
11360: DOUBLE
11361: EQUAL
11362: IFTRUE 11366
11364: GO 11376
11366: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11367: LD_STRING M1-3
11369: PPUSH
11370: CALL_OW 337
11374: GO 11395
11376: LD_INT 4
11378: DOUBLE
11379: EQUAL
11380: IFTRUE 11384
11382: GO 11394
11384: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11385: LD_STRING M1-4
11387: PPUSH
11388: CALL_OW 337
11392: GO 11395
11394: POP
// ChangeMissionObjectives ( M1cont ) ;
11395: LD_STRING M1cont
11397: PPUSH
11398: CALL_OW 337
// SaveForQuickRestart ;
11402: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11406: LD_INT 525
11408: PPUSH
11409: LD_INT 700
11411: PPUSH
11412: CALL_OW 12
11416: PPUSH
11417: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11421: LD_INT 5
11423: PPUSH
11424: LD_INT 82
11426: PPUSH
11427: LD_INT 38
11429: PPUSH
11430: LD_INT 10
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 56
// wait ( 0 0$14 ) ;
11440: LD_INT 490
11442: PPUSH
11443: CALL_OW 67
// firstCrateSpawn := true ;
11447: LD_ADDR_EXP 41
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// end ;
11455: LD_VAR 0 1
11459: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11460: LD_EXP 41
11464: IFFALSE 11853
11466: GO 11468
11468: DISABLE
11469: LD_INT 0
11471: PPUSH
// begin if IsOk ( Lisa ) then
11472: LD_EXP 2
11476: PPUSH
11477: CALL_OW 302
11481: IFFALSE 11497
// Say ( Lisa , DR0-Lisa-1 ) else
11483: LD_EXP 2
11487: PPUSH
11488: LD_STRING DR0-Lisa-1
11490: PPUSH
11491: CALL_OW 88
11495: GO 11643
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11497: LD_INT 22
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 21
11509: PUSH
11510: LD_INT 1
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 26
11519: PUSH
11520: LD_INT 1
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PUSH
11527: LD_INT 2
11529: PUSH
11530: LD_INT 25
11532: PUSH
11533: LD_INT 1
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 2
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 3
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: LD_INT 25
11562: PUSH
11563: LD_INT 4
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PPUSH
11583: CALL_OW 69
11587: PUSH
11588: LD_EXP 1
11592: PUSH
11593: LD_EXP 8
11597: PUSH
11598: LD_EXP 5
11602: PUSH
11603: LD_EXP 6
11607: PUSH
11608: LD_EXP 7
11612: PUSH
11613: LD_EXP 4
11617: PUSH
11618: LD_EXP 3
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: DIFF
11632: PPUSH
11633: LD_STRING DR0-Sol1-1
11635: PPUSH
11636: LD_STRING DR0-Sol1-1
11638: PPUSH
11639: CALL 7548 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11643: LD_ADDR_VAR 0 1
11647: PUSH
11648: LD_INT 22
11650: PUSH
11651: LD_INT 1
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 21
11660: PUSH
11661: LD_INT 1
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 26
11670: PUSH
11671: LD_INT 1
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: LD_INT 25
11683: PUSH
11684: LD_INT 1
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 25
11693: PUSH
11694: LD_INT 2
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 25
11703: PUSH
11704: LD_INT 3
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 25
11713: PUSH
11714: LD_INT 4
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 69
11738: PUSH
11739: LD_EXP 1
11743: PUSH
11744: LD_EXP 8
11748: PUSH
11749: LD_EXP 5
11753: PUSH
11754: LD_EXP 2
11758: PUSH
11759: LD_EXP 6
11763: PUSH
11764: LD_EXP 7
11768: PUSH
11769: LD_EXP 4
11773: PUSH
11774: LD_EXP 3
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: DIFF
11789: PPUSH
11790: LD_STRING DR0-Sol2-1
11792: PPUSH
11793: LD_STRING DR0-Sol2-1
11795: PPUSH
11796: CALL 7548 0 3
11800: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11801: LD_EXP 4
11805: PPUSH
11806: CALL_OW 302
11810: IFFALSE 11824
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11812: LD_EXP 4
11816: PPUSH
11817: LD_STRING DR0-Cyrus-1
11819: PPUSH
11820: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11824: LD_EXP 2
11828: PPUSH
11829: CALL_OW 302
11833: PUSH
11834: LD_VAR 0 1
11838: OR
11839: IFFALSE 11853
// Say ( JMM , DR0-JMM-1 ) ;
11841: LD_EXP 1
11845: PPUSH
11846: LD_STRING DR0-JMM-1
11848: PPUSH
11849: CALL_OW 88
// end ;
11853: PPOPN 1
11855: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11856: LD_EXP 5
11860: PPUSH
11861: CALL_OW 302
11865: PUSH
11866: LD_INT 22
11868: PUSH
11869: LD_INT 1
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 25
11878: PUSH
11879: LD_INT 16
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: PUSH
11895: LD_INT 0
11897: GREATER
11898: AND
11899: PUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL_OW 463
11907: NOT
11908: AND
11909: IFFALSE 12187
11911: GO 11913
11913: DISABLE
// begin DialogueOn ;
11914: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11918: LD_EXP 5
11922: PPUSH
11923: LD_STRING D10-Frank-1
11925: PPUSH
11926: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11930: LD_INT 22
11932: PUSH
11933: LD_INT 1
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 21
11942: PUSH
11943: LD_INT 1
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 2
11952: PUSH
11953: LD_INT 25
11955: PUSH
11956: LD_INT 1
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 25
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 25
11985: PUSH
11986: LD_INT 4
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: PPUSH
12005: CALL_OW 69
12009: PUSH
12010: LD_EXP 1
12014: PUSH
12015: LD_EXP 5
12019: PUSH
12020: LD_EXP 2
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: DIFF
12030: PPUSH
12031: LD_STRING D10-Sol1-1
12033: PPUSH
12034: LD_STRING D10-FSol1-1
12036: PPUSH
12037: CALL 7548 0 3
// Say ( Frank , D10-Frank-2 ) ;
12041: LD_EXP 5
12045: PPUSH
12046: LD_STRING D10-Frank-2
12048: PPUSH
12049: CALL_OW 88
// if IsOk ( Lisa ) then
12053: LD_EXP 2
12057: PPUSH
12058: CALL_OW 302
12062: IFFALSE 12078
// Say ( Lisa , D10-Lisa-2 ) else
12064: LD_EXP 2
12068: PPUSH
12069: LD_STRING D10-Lisa-2
12071: PPUSH
12072: CALL_OW 88
12076: GO 12183
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12078: LD_INT 22
12080: PUSH
12081: LD_INT 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 21
12090: PUSH
12091: LD_INT 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 2
12100: PUSH
12101: LD_INT 25
12103: PUSH
12104: LD_INT 1
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 25
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 25
12123: PUSH
12124: LD_INT 3
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 25
12133: PUSH
12134: LD_INT 4
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: PUSH
12158: LD_EXP 1
12162: PUSH
12163: LD_EXP 5
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: DIFF
12172: PPUSH
12173: LD_STRING D10-Sol1-2
12175: PPUSH
12176: LD_STRING D10-FSol1-2
12178: PPUSH
12179: CALL 7548 0 3
// DialogueOff ;
12183: CALL_OW 7
// end ;
12187: END
// every 0 0$30 trigger not InBattle ( 1 ) and tick > 10 10$00 do
12188: LD_INT 1
12190: PPUSH
12191: CALL_OW 463
12195: NOT
12196: PUSH
12197: LD_OWVAR 1
12201: PUSH
12202: LD_INT 21000
12204: GREATER
12205: AND
12206: IFFALSE 12489
12208: GO 12210
12210: DISABLE
// begin HarrisonSupport ;
12211: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12215: LD_EXP 18
12219: PPUSH
12220: CALL_OW 310
12224: PPUSH
12225: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12229: LD_EXP 18
12233: PPUSH
12234: LD_STRING DEng-Eng1-1
12236: PPUSH
12237: CALL_OW 88
// wait ( 1 1$0 ) ;
12241: LD_INT 2100
12243: PPUSH
12244: CALL_OW 67
// DialogueOn ;
12248: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12252: LD_EXP 15
12256: PPUSH
12257: LD_STRING DRem-Har-1
12259: PPUSH
12260: CALL_OW 94
// if contactWithRussian then
12264: LD_EXP 23
12268: IFFALSE 12284
// Say ( JMM , DRem-JMM-1 ) else
12270: LD_EXP 1
12274: PPUSH
12275: LD_STRING DRem-JMM-1
12277: PPUSH
12278: CALL_OW 88
12282: GO 12296
// Say ( JMM , DRem-JMM-1a ) ;
12284: LD_EXP 1
12288: PPUSH
12289: LD_STRING DRem-JMM-1a
12291: PPUSH
12292: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
12296: LD_EXP 15
12300: PPUSH
12301: LD_STRING DRem-Har-2
12303: PPUSH
12304: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12308: LD_STRING DenisInDelta
12310: PPUSH
12311: LD_INT 0
12313: PPUSH
12314: CALL_OW 30
12318: IFFALSE 12334
// Say ( JMM , DRem-JMM-2 ) else
12320: LD_EXP 1
12324: PPUSH
12325: LD_STRING DRem-JMM-2
12327: PPUSH
12328: CALL_OW 88
12332: GO 12346
// Say ( JMM , DRem-JMM-2a ) ;
12334: LD_EXP 1
12338: PPUSH
12339: LD_STRING DRem-JMM-2a
12341: PPUSH
12342: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
12346: LD_EXP 15
12350: PPUSH
12351: LD_STRING DRem-Har-3
12353: PPUSH
12354: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12358: LD_EXP 1
12362: PPUSH
12363: LD_STRING DRem-JMM-3
12365: PPUSH
12366: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12370: LD_EXP 15
12374: PPUSH
12375: LD_STRING DRem-Har-4
12377: PPUSH
12378: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12382: LD_STRING DenisInDelta
12384: PPUSH
12385: LD_INT 0
12387: PPUSH
12388: CALL_OW 30
12392: IFFALSE 12452
// begin Say ( JMM , DRem-JMM-4 ) ;
12394: LD_EXP 1
12398: PPUSH
12399: LD_STRING DRem-JMM-4
12401: PPUSH
12402: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12406: LD_EXP 15
12410: PPUSH
12411: LD_STRING DRem-Har-5
12413: PPUSH
12414: CALL_OW 94
// DialogueOff ;
12418: CALL_OW 7
// wait ( 4 4$00 ) ;
12422: LD_INT 8400
12424: PPUSH
12425: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12429: LD_INT 35
12431: PPUSH
12432: CALL_OW 67
// until not InBattle ( 1 ) ;
12436: LD_INT 1
12438: PPUSH
12439: CALL_OW 463
12443: NOT
12444: IFFALSE 12429
// SpawnDenis ;
12446: CALL 12490 0 0
// end else
12450: GO 12489
// begin DialogueOff ;
12452: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12456: LD_INT 36
12458: PPUSH
12459: LD_INT 1
12461: PPUSH
12462: LD_INT 1
12464: PPUSH
12465: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12469: LD_INT 15
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: LD_INT 1
12477: PPUSH
12478: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12482: LD_STRING MR
12484: PPUSH
12485: CALL_OW 337
// end ; end ;
12489: END
// export function SpawnDenis ; var tmp ; begin
12490: LD_INT 0
12492: PPUSH
12493: PPUSH
// PrepareDenis ;
12494: CALL 2244 0 0
// if not Denis then
12498: LD_EXP 9
12502: NOT
12503: IFFALSE 12507
// exit ;
12505: GO 12728
// CenterNowOnUnits ( Denis ) ;
12507: LD_EXP 9
12511: PPUSH
12512: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12516: LD_ADDR_VAR 0 2
12520: PUSH
12521: LD_INT 22
12523: PUSH
12524: LD_INT 1
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PPUSH
12531: CALL_OW 69
12535: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12536: LD_EXP 9
12540: PPUSH
12541: LD_VAR 0 2
12545: PPUSH
12546: LD_EXP 9
12550: PPUSH
12551: CALL_OW 74
12555: PPUSH
12556: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12560: LD_INT 35
12562: PPUSH
12563: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12567: LD_INT 22
12569: PUSH
12570: LD_INT 1
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 91
12579: PUSH
12580: LD_EXP 9
12584: PUSH
12585: LD_INT 10
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: CALL_OW 69
12601: IFFALSE 12560
// SetSide ( Denis , 1 ) ;
12603: LD_EXP 9
12607: PPUSH
12608: LD_INT 1
12610: PPUSH
12611: CALL_OW 235
// DialogueOn ;
12615: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12619: LD_EXP 9
12623: PPUSH
12624: LD_STRING DDen-Den-1
12626: PPUSH
12627: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12631: LD_EXP 1
12635: PPUSH
12636: LD_STRING DDen-JMM-1
12638: PPUSH
12639: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12643: LD_EXP 9
12647: PPUSH
12648: LD_STRING DDen-Den-2
12650: PPUSH
12651: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12655: LD_EXP 1
12659: PPUSH
12660: LD_STRING DDen-JMM-2
12662: PPUSH
12663: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12667: LD_EXP 9
12671: PPUSH
12672: LD_STRING DDen-Den-3
12674: PPUSH
12675: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12679: LD_EXP 1
12683: PPUSH
12684: LD_STRING DDen-JMM-3
12686: PPUSH
12687: CALL_OW 88
// DialogueOff ;
12691: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12695: LD_INT 36
12697: PPUSH
12698: LD_INT 1
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12708: LD_INT 15
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12721: LD_STRING MR
12723: PPUSH
12724: CALL_OW 337
// end ;
12728: LD_VAR 0 1
12732: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12733: LD_INT 22
12735: PUSH
12736: LD_INT 1
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 30
12745: PUSH
12746: LD_INT 15
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PPUSH
12757: CALL_OW 69
12761: PUSH
12762: LD_EXP 9
12766: PPUSH
12767: CALL_OW 302
12771: AND
12772: PUSH
12773: LD_INT 1
12775: PPUSH
12776: CALL_OW 463
12780: NOT
12781: AND
12782: IFFALSE 12811
12784: GO 12786
12786: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12787: LD_EXP 9
12791: PPUSH
12792: LD_STRING DR1-Den-1
12794: PPUSH
12795: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12799: LD_EXP 1
12803: PPUSH
12804: LD_STRING DR1-JMM-1
12806: PPUSH
12807: CALL_OW 88
// end ;
12811: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12812: LD_INT 15
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: CALL_OW 321
12822: PUSH
12823: LD_INT 2
12825: EQUAL
12826: PUSH
12827: LD_EXP 9
12831: PPUSH
12832: CALL_OW 302
12836: AND
12837: PUSH
12838: LD_INT 1
12840: PPUSH
12841: CALL_OW 463
12845: NOT
12846: AND
12847: IFFALSE 13056
12849: GO 12851
12851: DISABLE
// begin DialogueOn ;
12852: CALL_OW 6
// if IsOK ( Denis ) then
12856: LD_EXP 9
12860: PPUSH
12861: CALL_OW 302
12865: IFFALSE 12881
// Say ( Denis , DR2-Den-1 ) else
12867: LD_EXP 9
12871: PPUSH
12872: LD_STRING DR2-Den-1
12874: PPUSH
12875: CALL_OW 88
12879: GO 12940
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12881: LD_INT 22
12883: PUSH
12884: LD_INT 1
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 21
12893: PUSH
12894: LD_INT 1
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 25
12903: PUSH
12904: LD_INT 4
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: LIST
12915: PPUSH
12916: CALL_OW 69
12920: PUSH
12921: LD_EXP 1
12925: PUSH
12926: EMPTY
12927: LIST
12928: DIFF
12929: PPUSH
12930: LD_STRING DR2-Sci1-1
12932: PPUSH
12933: LD_STRING DR2-FSci1-1
12935: PPUSH
12936: CALL 7548 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12940: LD_EXP 1
12944: PPUSH
12945: LD_STRING DR2-JMM-1
12947: PPUSH
12948: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12952: LD_INT 22
12954: PUSH
12955: LD_INT 1
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 26
12974: PUSH
12975: LD_INT 1
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 23
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PPUSH
12998: CALL_OW 69
13002: PUSH
13003: LD_EXP 1
13007: PUSH
13008: LD_EXP 9
13012: PUSH
13013: LD_EXP 8
13017: PUSH
13018: LD_EXP 5
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: DIFF
13029: PPUSH
13030: LD_STRING DR2-Sol1-1
13032: PPUSH
13033: LD_STRING 
13035: PPUSH
13036: CALL 7548 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13040: LD_EXP 1
13044: PPUSH
13045: LD_STRING DR2-JMM-2
13047: PPUSH
13048: CALL_OW 88
// DialogueOff ;
13052: CALL_OW 7
// end ;
13056: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
13057: LD_INT 22
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 30
13069: PUSH
13070: LD_INT 36
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 69
13085: PUSH
13086: LD_INT 0
13088: EQUAL
13089: PUSH
13090: LD_INT 22
13092: PUSH
13093: LD_INT 1
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 21
13102: PUSH
13103: LD_INT 2
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: LD_INT 33
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: PUSH
13130: LD_INT 0
13132: GREATER
13133: AND
13134: PUSH
13135: LD_EXP 24
13139: PUSH
13140: LD_INT 0
13142: EQUAL
13143: AND
13144: PUSH
13145: LD_INT 1
13147: PPUSH
13148: CALL_OW 463
13152: NOT
13153: AND
13154: IFFALSE 13291
13156: GO 13158
13158: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
13159: LD_INT 22
13161: PUSH
13162: LD_INT 1
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 21
13171: PUSH
13172: LD_INT 1
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 25
13181: PUSH
13182: LD_INT 3
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: LD_INT 26
13191: PUSH
13192: LD_INT 1
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PPUSH
13205: CALL_OW 69
13209: PUSH
13210: LD_EXP 1
13214: PUSH
13215: LD_EXP 6
13219: PUSH
13220: LD_EXP 7
13224: PUSH
13225: LD_EXP 9
13229: PUSH
13230: LD_EXP 16
13234: PUSH
13235: LD_EXP 3
13239: PUSH
13240: LD_EXP 4
13244: PUSH
13245: LD_EXP 2
13249: PUSH
13250: LD_EXP 5
13254: PUSH
13255: LD_EXP 8
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: DIFF
13272: PPUSH
13273: LD_STRING D3a-Mech1-1
13275: PPUSH
13276: LD_STRING 
13278: PPUSH
13279: CALL 7548 0 3
// firstTower = 2 ;
13283: LD_ADDR_EXP 24
13287: PUSH
13288: LD_INT 2
13290: ST_TO_ADDR
// end ;
13291: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13292: LD_INT 22
13294: PUSH
13295: LD_INT 3
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 21
13304: PUSH
13305: LD_INT 3
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PPUSH
13316: CALL_OW 69
13320: PUSH
13321: LD_INT 0
13323: EQUAL
13324: IFFALSE 13455
13326: GO 13328
13328: DISABLE
13329: LD_INT 0
13331: PPUSH
// begin stop_talking := true ;
13332: LD_ADDR_OWVAR 56
13336: PUSH
13337: LD_INT 1
13339: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13340: LD_ADDR_VAR 0 1
13344: PUSH
13345: LD_INT 22
13347: PUSH
13348: LD_INT 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 21
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 2
13367: PUSH
13368: LD_INT 25
13370: PUSH
13371: LD_INT 1
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 25
13380: PUSH
13381: LD_INT 2
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 25
13390: PUSH
13391: LD_INT 3
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 25
13400: PUSH
13401: LD_INT 4
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: PPUSH
13420: CALL_OW 69
13424: PUSH
13425: FOR_IN
13426: IFFALSE 13445
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13428: LD_VAR 0 1
13432: PPUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 7500
13438: PPUSH
13439: CALL_OW 591
13443: GO 13425
13445: POP
13446: POP
// stop_talking := false ;
13447: LD_ADDR_OWVAR 56
13451: PUSH
13452: LD_INT 0
13454: ST_TO_ADDR
// end ;
13455: PPOPN 1
13457: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13458: LD_INT 22
13460: PUSH
13461: LD_INT 1
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 30
13470: PUSH
13471: LD_INT 36
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 69
13486: PUSH
13487: LD_INT 22
13489: PUSH
13490: LD_INT 1
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 21
13499: PUSH
13500: LD_INT 2
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 33
13509: PUSH
13510: LD_INT 2
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: PPUSH
13522: CALL_OW 69
13526: AND
13527: PUSH
13528: CALL 14080 0 0
13532: AND
13533: PUSH
13534: LD_INT 1
13536: PPUSH
13537: CALL_OW 463
13541: NOT
13542: AND
13543: IFFALSE 14077
13545: GO 13547
13547: DISABLE
13548: LD_INT 0
13550: PPUSH
13551: PPUSH
13552: PPUSH
13553: PPUSH
13554: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13555: LD_ADDR_VAR 0 3
13559: PUSH
13560: LD_INT 22
13562: PUSH
13563: LD_INT 1
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 30
13572: PUSH
13573: LD_INT 36
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PPUSH
13584: CALL_OW 69
13588: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13589: LD_ADDR_VAR 0 4
13593: PUSH
13594: LD_INT 22
13596: PUSH
13597: LD_INT 1
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 21
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 33
13616: PUSH
13617: LD_INT 2
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: PPUSH
13629: CALL_OW 69
13633: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13634: LD_ADDR_VAR 0 5
13638: PUSH
13639: EMPTY
13640: ST_TO_ADDR
// for i in tmpControlTowers do
13641: LD_ADDR_VAR 0 1
13645: PUSH
13646: LD_VAR 0 3
13650: PUSH
13651: FOR_IN
13652: IFFALSE 14075
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13654: LD_EXP 1
13658: PPUSH
13659: CALL_OW 310
13663: PUSH
13664: LD_VAR 0 1
13668: EQUAL
13669: PUSH
13670: LD_EXP 1
13674: PPUSH
13675: CALL_OW 257
13679: PUSH
13680: LD_INT 3
13682: EQUAL
13683: AND
13684: IFFALSE 13818
// begin InGameOn ;
13686: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13690: LD_VAR 0 4
13694: PUSH
13695: LD_INT 1
13697: ARRAY
13698: PPUSH
13699: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13703: LD_EXP 1
13707: PPUSH
13708: LD_STRING D4a-JMM-1
13710: PPUSH
13711: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13715: LD_VAR 0 4
13719: PUSH
13720: LD_INT 1
13722: ARRAY
13723: PPUSH
13724: LD_EXP 1
13728: PPUSH
13729: CALL_OW 53
// wait ( 0 0$1 ) ;
13733: LD_INT 35
13735: PPUSH
13736: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13740: LD_VAR 0 4
13744: PUSH
13745: LD_INT 1
13747: ARRAY
13748: PPUSH
13749: LD_VAR 0 4
13753: PUSH
13754: LD_INT 1
13756: ARRAY
13757: PPUSH
13758: CALL_OW 250
13762: PUSH
13763: LD_INT 3
13765: PLUS
13766: PPUSH
13767: LD_VAR 0 4
13771: PUSH
13772: LD_INT 1
13774: ARRAY
13775: PPUSH
13776: CALL_OW 251
13780: PUSH
13781: LD_INT 2
13783: MINUS
13784: PPUSH
13785: CALL_OW 111
// wait ( 0 0$2 ) ;
13789: LD_INT 70
13791: PPUSH
13792: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13796: LD_EXP 1
13800: PPUSH
13801: LD_STRING D4b-JMM-1
13803: PPUSH
13804: CALL_OW 88
// InGameOff ;
13808: CALL_OW 9
// exit ;
13812: POP
13813: POP
13814: GO 14077
// end else
13816: GO 14073
// begin InGameOn ;
13818: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13822: LD_ADDR_VAR 0 5
13826: PUSH
13827: LD_VAR 0 1
13831: PPUSH
13832: CALL_OW 313
13836: PPUSH
13837: LD_INT 25
13839: PUSH
13840: LD_INT 3
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PPUSH
13847: CALL_OW 72
13851: ST_TO_ADDR
// if not tmpMechanicInside then
13852: LD_VAR 0 5
13856: NOT
13857: IFFALSE 13861
// continue ;
13859: GO 13651
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13861: LD_VAR 0 5
13865: PUSH
13866: LD_INT 1
13868: ARRAY
13869: PPUSH
13870: CALL_OW 258
13874: PUSH
13875: LD_INT 1
13877: EQUAL
13878: IFFALSE 13898
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13880: LD_VAR 0 5
13884: PUSH
13885: LD_INT 1
13887: ARRAY
13888: PPUSH
13889: LD_STRING D4a-Mech1-1
13891: PPUSH
13892: CALL_OW 88
13896: GO 13914
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13898: LD_VAR 0 5
13902: PUSH
13903: LD_INT 1
13905: ARRAY
13906: PPUSH
13907: LD_STRING D4a-FMech1-1
13909: PPUSH
13910: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13914: LD_VAR 0 4
13918: PUSH
13919: LD_INT 1
13921: ARRAY
13922: PPUSH
13923: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13927: LD_VAR 0 4
13931: PUSH
13932: LD_INT 1
13934: ARRAY
13935: PPUSH
13936: LD_VAR 0 5
13940: PUSH
13941: LD_INT 1
13943: ARRAY
13944: PPUSH
13945: CALL_OW 53
// wait ( 0 0$1 ) ;
13949: LD_INT 35
13951: PPUSH
13952: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13956: LD_VAR 0 4
13960: PUSH
13961: LD_INT 1
13963: ARRAY
13964: PPUSH
13965: LD_VAR 0 4
13969: PUSH
13970: LD_INT 1
13972: ARRAY
13973: PPUSH
13974: CALL_OW 250
13978: PUSH
13979: LD_INT 3
13981: PLUS
13982: PPUSH
13983: LD_VAR 0 4
13987: PUSH
13988: LD_INT 1
13990: ARRAY
13991: PPUSH
13992: CALL_OW 251
13996: PUSH
13997: LD_INT 2
13999: MINUS
14000: PPUSH
14001: CALL_OW 111
// wait ( 0 0$2 ) ;
14005: LD_INT 70
14007: PPUSH
14008: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
14012: LD_VAR 0 5
14016: PUSH
14017: LD_INT 1
14019: ARRAY
14020: PPUSH
14021: CALL_OW 258
14025: PUSH
14026: LD_INT 1
14028: EQUAL
14029: IFFALSE 14049
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
14031: LD_VAR 0 5
14035: PUSH
14036: LD_INT 1
14038: ARRAY
14039: PPUSH
14040: LD_STRING D4b-Mech1-1
14042: PPUSH
14043: CALL_OW 88
14047: GO 14065
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14049: LD_VAR 0 5
14053: PUSH
14054: LD_INT 1
14056: ARRAY
14057: PPUSH
14058: LD_STRING D4b-FMech1-1
14060: PPUSH
14061: CALL_OW 88
// InGameOff ;
14065: CALL_OW 9
// exit ;
14069: POP
14070: POP
14071: GO 14077
// end ; end ;
14073: GO 13651
14075: POP
14076: POP
// end ;
14077: PPOPN 5
14079: END
// function CheckMehInside ; var i , j , tmp ; begin
14080: LD_INT 0
14082: PPUSH
14083: PPUSH
14084: PPUSH
14085: PPUSH
// result := false ;
14086: LD_ADDR_VAR 0 1
14090: PUSH
14091: LD_INT 0
14093: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
14094: LD_ADDR_VAR 0 4
14098: PUSH
14099: LD_INT 22
14101: PUSH
14102: LD_INT 1
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 30
14111: PUSH
14112: LD_INT 36
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PPUSH
14123: CALL_OW 69
14127: ST_TO_ADDR
// if not tmp then
14128: LD_VAR 0 4
14132: NOT
14133: IFFALSE 14137
// exit ;
14135: GO 14201
// for i in tmp do
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: LD_VAR 0 4
14146: PUSH
14147: FOR_IN
14148: IFFALSE 14199
// for j in UnitsInside ( i ) do
14150: LD_ADDR_VAR 0 3
14154: PUSH
14155: LD_VAR 0 2
14159: PPUSH
14160: CALL_OW 313
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14195
// if GetClass ( j ) = class_mechanic then
14168: LD_VAR 0 3
14172: PPUSH
14173: CALL_OW 257
14177: PUSH
14178: LD_INT 3
14180: EQUAL
14181: IFFALSE 14193
// begin result := true ;
14183: LD_ADDR_VAR 0 1
14187: PUSH
14188: LD_INT 1
14190: ST_TO_ADDR
// break ;
14191: GO 14195
// end ;
14193: GO 14165
14195: POP
14196: POP
14197: GO 14147
14199: POP
14200: POP
// end ;
14201: LD_VAR 0 1
14205: RET
// every 12 12$0 do
14206: GO 14208
14208: DISABLE
// begin repeat wait ( 0 0$1 ) ;
14209: LD_INT 35
14211: PPUSH
14212: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
14216: LD_INT 1
14218: PPUSH
14219: CALL_OW 463
14223: NOT
14224: PUSH
14225: LD_INT 32
14227: PPUSH
14228: LD_INT 81
14230: PUSH
14231: LD_INT 1
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PPUSH
14238: CALL_OW 70
14242: NOT
14243: AND
14244: PUSH
14245: LD_EXP 27
14249: PUSH
14250: LD_INT 10500
14252: LESS
14253: OR
14254: IFFALSE 14209
// PrepareKurt ;
14256: CALL 16889 0 0
// end ;
14260: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
14261: LD_EXP 16
14265: PPUSH
14266: CALL_OW 302
14270: PUSH
14271: LD_EXP 16
14275: PPUSH
14276: CALL_OW 255
14280: PUSH
14281: LD_INT 1
14283: EQUAL
14284: AND
14285: PUSH
14286: LD_EXP 2
14290: AND
14291: IFFALSE 14456
14293: GO 14295
14295: DISABLE
// begin wait ( 0 0$50 ) ;
14296: LD_INT 1750
14298: PPUSH
14299: CALL_OW 67
// if not IsOk ( Joan ) then
14303: LD_EXP 16
14307: PPUSH
14308: CALL_OW 302
14312: NOT
14313: IFFALSE 14317
// exit ;
14315: GO 14456
// if IsOK ( Lisa ) then
14317: LD_EXP 2
14321: PPUSH
14322: CALL_OW 302
14326: IFFALSE 14456
// begin DialogueOn ;
14328: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14332: LD_EXP 2
14336: PPUSH
14337: LD_STRING D7-Lisa-1
14339: PPUSH
14340: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14344: LD_EXP 1
14348: PPUSH
14349: LD_STRING D7-JMM-1
14351: PPUSH
14352: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14356: LD_EXP 2
14360: PPUSH
14361: LD_STRING D7-Lisa-2
14363: PPUSH
14364: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14368: LD_EXP 1
14372: PPUSH
14373: LD_STRING D7-JMM-2
14375: PPUSH
14376: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14380: LD_EXP 2
14384: PPUSH
14385: LD_STRING D7-Lisa-3
14387: PPUSH
14388: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14392: LD_EXP 1
14396: PPUSH
14397: LD_STRING D7-JMM-3
14399: PPUSH
14400: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14404: LD_EXP 2
14408: PPUSH
14409: LD_STRING D7-Lisa-4
14411: PPUSH
14412: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14416: LD_EXP 1
14420: PPUSH
14421: LD_STRING D7-JMM-4
14423: PPUSH
14424: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14428: LD_EXP 1
14432: PPUSH
14433: LD_STRING D7-JMM-4a
14435: PPUSH
14436: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14440: LD_EXP 2
14444: PPUSH
14445: LD_STRING D7-Lisa-5
14447: PPUSH
14448: CALL_OW 88
// DialogueOff ;
14452: CALL_OW 7
// end ; end ;
14456: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14457: LD_EXP 14
14461: PUSH
14462: LD_INT 22
14464: PUSH
14465: LD_INT 1
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 91
14474: PUSH
14475: LD_EXP 14
14479: PUSH
14480: LD_INT 10
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 2
14490: PUSH
14491: LD_INT 25
14493: PUSH
14494: LD_INT 1
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 25
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 25
14513: PUSH
14514: LD_INT 3
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: LD_INT 25
14523: PUSH
14524: LD_INT 4
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: LIST
14542: PPUSH
14543: CALL_OW 69
14547: PUSH
14548: LD_INT 1
14550: GREATER
14551: AND
14552: IFFALSE 14569
14554: GO 14556
14556: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14557: LD_EXP 14
14561: PPUSH
14562: LD_STRING D5-Sol1-1
14564: PPUSH
14565: CALL_OW 88
14569: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14570: LD_INT 22
14572: PUSH
14573: LD_INT 1
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: LD_INT 33
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PPUSH
14594: CALL_OW 69
14598: PUSH
14599: LD_INT 2
14601: GREATEREQUAL
14602: IFFALSE 14622
14604: GO 14606
14606: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14607: LD_STRING MRa
14609: PPUSH
14610: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14614: LD_ADDR_EXP 29
14618: PUSH
14619: LD_INT 1
14621: ST_TO_ADDR
// end ;
14622: END
// every 2 2$00 do var i , last ;
14623: GO 14625
14625: DISABLE
14626: LD_INT 0
14628: PPUSH
14629: PPUSH
// begin last := 8 ;
14630: LD_ADDR_VAR 0 2
14634: PUSH
14635: LD_INT 8
14637: ST_TO_ADDR
// for i := 1 to last do
14638: LD_ADDR_VAR 0 1
14642: PUSH
14643: DOUBLE
14644: LD_INT 1
14646: DEC
14647: ST_TO_ADDR
14648: LD_VAR 0 2
14652: PUSH
14653: FOR_TO
14654: IFFALSE 14682
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14656: LD_INT 6300
14658: PPUSH
14659: LD_INT 12600
14661: PPUSH
14662: CALL_OW 12
14666: PPUSH
14667: CALL_OW 67
// PrepareRandoms ( i ) ;
14671: LD_VAR 0 1
14675: PPUSH
14676: CALL 4240 0 1
// end ;
14680: GO 14653
14682: POP
14683: POP
// end ;
14684: PPOPN 2
14686: END
// every 5 5$20 do
14687: GO 14689
14689: DISABLE
// begin DialogueOn ;
14690: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14694: LD_EXP 10
14698: PPUSH
14699: LD_STRING D12a-Sci-1
14701: PPUSH
14702: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14706: LD_EXP 1
14710: PPUSH
14711: LD_STRING D12a-JMM-1
14713: PPUSH
14714: CALL_OW 88
// DialogueOff ;
14718: CALL_OW 7
// cratesStatus := 1 ;
14722: LD_ADDR_EXP 39
14726: PUSH
14727: LD_INT 1
14729: ST_TO_ADDR
// end ;
14730: END
// every 13 13$0 do
14731: GO 14733
14733: DISABLE
// begin DialogueOn ;
14734: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14738: LD_EXP 10
14742: PPUSH
14743: LD_STRING D12b-Sci-1
14745: PPUSH
14746: CALL_OW 94
// DialogueOff ;
14750: CALL_OW 7
// cratesStatus := 2 ;
14754: LD_ADDR_EXP 39
14758: PUSH
14759: LD_INT 2
14761: ST_TO_ADDR
// BuildBulldozer ;
14762: CALL 10591 0 0
// end ;
14766: END
// every 32 32$0 do
14767: GO 14769
14769: DISABLE
// begin DialogueOn ;
14770: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14774: LD_EXP 10
14778: PPUSH
14779: LD_STRING D12c-Sci-1
14781: PPUSH
14782: CALL_OW 94
// DialogueOff ;
14786: CALL_OW 7
// wait ( 3 3$0 ) ;
14790: LD_INT 6300
14792: PPUSH
14793: CALL_OW 67
// DialogueOn ;
14797: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14801: LD_EXP 10
14805: PPUSH
14806: LD_STRING D12d-Sci-1
14808: PPUSH
14809: CALL_OW 94
// DialogueOff ;
14813: CALL_OW 7
// cratesStatus = 1 ;
14817: LD_ADDR_EXP 39
14821: PUSH
14822: LD_INT 1
14824: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14825: CALL 21233 0 0
// wait ( 2 2$30 ) ;
14829: LD_INT 5250
14831: PPUSH
14832: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14836: LD_INT 35
14838: PPUSH
14839: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14843: LD_INT 1
14845: PPUSH
14846: CALL_OW 463
14850: NOT
14851: PUSH
14852: LD_INT 32
14854: PPUSH
14855: LD_INT 81
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PPUSH
14865: CALL_OW 70
14869: NOT
14870: AND
14871: PUSH
14872: LD_EXP 27
14876: PUSH
14877: LD_INT 6300
14879: LESS
14880: OR
14881: IFFALSE 14836
// PrepareJoan ;
14883: CALL 3095 0 0
// end ;
14887: END
// every 42 42$0 do
14888: GO 14890
14890: DISABLE
// begin DialogueOn ;
14891: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14895: LD_EXP 10
14899: PPUSH
14900: LD_STRING D12e-Sci-1
14902: PPUSH
14903: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14907: LD_EXP 1
14911: PPUSH
14912: LD_STRING D12e-JMM-1
14914: PPUSH
14915: CALL_OW 88
// DialogueOff ;
14919: CALL_OW 7
// cratesStatus := 2 ;
14923: LD_ADDR_EXP 39
14927: PUSH
14928: LD_INT 2
14930: ST_TO_ADDR
// end ; end_of_file
14931: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14932: LD_VAR 0 1
14936: PUSH
14937: LD_INT 1
14939: EQUAL
14940: PUSH
14941: LD_VAR 0 2
14945: PUSH
14946: LD_INT 3
14948: EQUAL
14949: AND
14950: IFFALSE 14960
// contactWithRussian := 1 ;
14952: LD_ADDR_EXP 23
14956: PUSH
14957: LD_INT 1
14959: ST_TO_ADDR
// end ;
14960: PPOPN 2
14962: END
// on BuildingComplete ( building ) do var i ;
14963: LD_INT 0
14965: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14966: LD_VAR 0 1
14970: PPUSH
14971: CALL_OW 266
14975: PUSH
14976: LD_INT 36
14978: EQUAL
14979: PUSH
14980: LD_VAR 0 1
14984: PPUSH
14985: CALL_OW 255
14989: PUSH
14990: LD_INT 1
14992: EQUAL
14993: AND
14994: PUSH
14995: LD_EXP 24
14999: PUSH
15000: LD_INT 0
15002: EQUAL
15003: AND
15004: IFFALSE 15084
// begin firstTower = 1 ;
15006: LD_ADDR_EXP 24
15010: PUSH
15011: LD_INT 1
15013: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
15014: LD_INT 22
15016: PUSH
15017: LD_INT 1
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 21
15026: PUSH
15027: LD_INT 1
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 25
15036: PUSH
15037: LD_INT 3
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 26
15046: PUSH
15047: LD_INT 1
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: PPUSH
15060: CALL_OW 69
15064: PUSH
15065: LD_EXP 1
15069: PUSH
15070: EMPTY
15071: LIST
15072: DIFF
15073: PPUSH
15074: LD_STRING D3b-Mech1-1
15076: PPUSH
15077: LD_STRING D3b-Mech1-1
15079: PPUSH
15080: CALL 7548 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15084: LD_VAR 0 1
15088: PPUSH
15089: CALL_OW 266
15093: PUSH
15094: LD_INT 0
15096: EQUAL
15097: PUSH
15098: LD_VAR 0 1
15102: PPUSH
15103: CALL_OW 255
15107: PUSH
15108: LD_INT 1
15110: EQUAL
15111: AND
15112: IFFALSE 15126
// SetBName ( building , theta ) ;
15114: LD_VAR 0 1
15118: PPUSH
15119: LD_STRING theta
15121: PPUSH
15122: CALL_OW 500
// if GetSide ( building ) = 3 then
15126: LD_VAR 0 1
15130: PPUSH
15131: CALL_OW 255
15135: PUSH
15136: LD_INT 3
15138: EQUAL
15139: IFFALSE 15179
// begin for i := 1 to 4 do
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: DOUBLE
15147: LD_INT 1
15149: DEC
15150: ST_TO_ADDR
15151: LD_INT 4
15153: PUSH
15154: FOR_TO
15155: IFFALSE 15177
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15157: LD_ADDR_EXP 32
15161: PUSH
15162: LD_EXP 32
15166: PPUSH
15167: LD_INT 1
15169: PPUSH
15170: CALL_OW 3
15174: ST_TO_ADDR
15175: GO 15154
15177: POP
15178: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15179: LD_VAR 0 1
15183: PPUSH
15184: CALL_OW 255
15188: PUSH
15189: LD_INT 3
15191: EQUAL
15192: PUSH
15193: LD_VAR 0 1
15197: PPUSH
15198: CALL_OW 266
15202: PUSH
15203: LD_INT 0
15205: EQUAL
15206: PUSH
15207: LD_VAR 0 1
15211: PPUSH
15212: CALL_OW 266
15216: PUSH
15217: LD_INT 2
15219: EQUAL
15220: OR
15221: PUSH
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 266
15231: PUSH
15232: LD_INT 4
15234: EQUAL
15235: OR
15236: PUSH
15237: EMPTY
15238: LIST
15239: AND
15240: IFFALSE 15251
// ComUpgrade ( building ) ;
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15251: LD_VAR 0 1
15255: PPUSH
15256: CALL_OW 255
15260: PUSH
15261: LD_INT 3
15263: EQUAL
15264: PUSH
15265: LD_VAR 0 1
15269: PPUSH
15270: CALL_OW 266
15274: PUSH
15275: LD_INT 32
15277: EQUAL
15278: AND
15279: IFFALSE 15320
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15281: LD_VAR 0 1
15285: PPUSH
15286: LD_INT 42
15288: PUSH
15289: LD_INT 43
15291: PUSH
15292: LD_INT 44
15294: PUSH
15295: LD_INT 46
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 1
15306: PPUSH
15307: LD_INT 4
15309: PPUSH
15310: CALL_OW 12
15314: ARRAY
15315: PPUSH
15316: CALL_OW 208
// end ;
15320: PPOPN 2
15322: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
15323: LD_VAR 0 1
15327: PPUSH
15328: CALL 37945 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
15332: LD_VAR 0 1
15336: PUSH
15337: LD_INT 22
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 21
15349: PUSH
15350: LD_INT 1
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 23
15359: PUSH
15360: LD_INT 1
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: PPUSH
15372: CALL_OW 69
15376: IN
15377: IFFALSE 15393
// killCounter := killCounter + 1 ;
15379: LD_ADDR_EXP 46
15383: PUSH
15384: LD_EXP 46
15388: PUSH
15389: LD_INT 1
15391: PLUS
15392: ST_TO_ADDR
// if unit in ruAttackersInForest then
15393: LD_VAR 0 1
15397: PUSH
15398: LD_EXP 49
15402: IN
15403: IFFALSE 15421
// ruAttackersInForest := ruAttackersInForest diff unit ;
15405: LD_ADDR_EXP 49
15409: PUSH
15410: LD_EXP 49
15414: PUSH
15415: LD_VAR 0 1
15419: DIFF
15420: ST_TO_ADDR
// if unit in ruAttackers then
15421: LD_VAR 0 1
15425: PUSH
15426: LD_EXP 48
15430: IN
15431: IFFALSE 15449
// ruAttackers := ruAttackers diff unit ;
15433: LD_ADDR_EXP 48
15437: PUSH
15438: LD_EXP 48
15442: PUSH
15443: LD_VAR 0 1
15447: DIFF
15448: ST_TO_ADDR
// if unit = JMM then
15449: LD_VAR 0 1
15453: PUSH
15454: LD_EXP 1
15458: EQUAL
15459: IFFALSE 15468
// YouLost ( JMM ) ;
15461: LD_STRING JMM
15463: PPUSH
15464: CALL_OW 104
// if unit = Joan then
15468: LD_VAR 0 1
15472: PUSH
15473: LD_EXP 16
15477: EQUAL
15478: IFFALSE 15488
// JoanStatus := 0 ;
15480: LD_ADDR_EXP 17
15484: PUSH
15485: LD_INT 0
15487: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15488: LD_VAR 0 1
15492: PPUSH
15493: CALL_OW 255
15497: PUSH
15498: LD_INT 1
15500: EQUAL
15501: PUSH
15502: LD_VAR 0 1
15506: PPUSH
15507: CALL_OW 247
15511: PUSH
15512: LD_INT 1
15514: EQUAL
15515: AND
15516: PUSH
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 248
15526: PUSH
15527: LD_INT 1
15529: EQUAL
15530: AND
15531: IFFALSE 15547
// unitLost = unitLost + 1 ;
15533: LD_ADDR_EXP 31
15537: PUSH
15538: LD_EXP 31
15542: PUSH
15543: LD_INT 1
15545: PLUS
15546: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15547: LD_VAR 0 1
15551: PPUSH
15552: CALL_OW 255
15556: PUSH
15557: LD_INT 3
15559: EQUAL
15560: PUSH
15561: LD_VAR 0 1
15565: PPUSH
15566: CALL_OW 247
15570: PUSH
15571: LD_INT 3
15573: EQUAL
15574: AND
15575: PUSH
15576: LD_VAR 0 1
15580: PPUSH
15581: CALL_OW 266
15585: PUSH
15586: LD_INT 4
15588: PUSH
15589: LD_INT 5
15591: PUSH
15592: LD_INT 32
15594: PUSH
15595: LD_INT 31
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: IN
15604: AND
15605: IFFALSE 15691
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15607: LD_ADDR_EXP 32
15611: PUSH
15612: LD_EXP 32
15616: PUSH
15617: LD_VAR 0 1
15621: PPUSH
15622: CALL_OW 266
15626: ADD
15627: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15628: LD_ADDR_EXP 32
15632: PUSH
15633: LD_EXP 32
15637: PUSH
15638: LD_VAR 0 1
15642: PPUSH
15643: CALL_OW 250
15647: ADD
15648: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15649: LD_ADDR_EXP 32
15653: PUSH
15654: LD_EXP 32
15658: PUSH
15659: LD_VAR 0 1
15663: PPUSH
15664: CALL_OW 251
15668: ADD
15669: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15670: LD_ADDR_EXP 32
15674: PUSH
15675: LD_EXP 32
15679: PUSH
15680: LD_VAR 0 1
15684: PPUSH
15685: CALL_OW 254
15689: ADD
15690: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15691: LD_EXP 47
15695: PUSH
15696: LD_VAR 0 1
15700: PPUSH
15701: CALL_OW 257
15705: PUSH
15706: LD_INT 3
15708: EQUAL
15709: AND
15710: PUSH
15711: LD_VAR 0 1
15715: PPUSH
15716: CALL_OW 255
15720: PUSH
15721: LD_INT 3
15723: EQUAL
15724: AND
15725: PUSH
15726: LD_INT 21
15728: PPUSH
15729: CALL_OW 302
15733: AND
15734: PUSH
15735: LD_INT 21
15737: PPUSH
15738: CALL_OW 255
15742: PUSH
15743: LD_INT 3
15745: EQUAL
15746: AND
15747: IFFALSE 15829
// begin ruMechCounter := ruMechCounter - 1 ;
15749: LD_ADDR_EXP 47
15753: PUSH
15754: LD_EXP 47
15758: PUSH
15759: LD_INT 1
15761: MINUS
15762: ST_TO_ADDR
// uc_side := 3 ;
15763: LD_ADDR_OWVAR 20
15767: PUSH
15768: LD_INT 3
15770: ST_TO_ADDR
// uc_nation := 3 ;
15771: LD_ADDR_OWVAR 21
15775: PUSH
15776: LD_INT 3
15778: ST_TO_ADDR
// hc_gallery :=  ;
15779: LD_ADDR_OWVAR 33
15783: PUSH
15784: LD_STRING 
15786: ST_TO_ADDR
// hc_name :=  ;
15787: LD_ADDR_OWVAR 26
15791: PUSH
15792: LD_STRING 
15794: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15795: LD_INT 0
15797: PPUSH
15798: LD_EXP 35
15802: PPUSH
15803: LD_EXP 36
15807: PPUSH
15808: CALL_OW 12
15812: PPUSH
15813: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15817: CALL_OW 44
15821: PPUSH
15822: LD_INT 21
15824: PPUSH
15825: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15829: LD_VAR 0 1
15833: PPUSH
15834: CALL_OW 255
15838: PUSH
15839: LD_INT 3
15841: EQUAL
15842: PUSH
15843: LD_VAR 0 1
15847: PPUSH
15848: CALL_OW 264
15852: PUSH
15853: LD_INT 52
15855: EQUAL
15856: AND
15857: PUSH
15858: LD_INT 21
15860: PPUSH
15861: CALL_OW 302
15865: AND
15866: PUSH
15867: LD_INT 21
15869: PPUSH
15870: CALL_OW 255
15874: PUSH
15875: LD_INT 3
15877: EQUAL
15878: AND
15879: IFFALSE 15900
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15881: LD_INT 21
15883: PPUSH
15884: LD_INT 22
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: LD_INT 1
15892: PPUSH
15893: LD_INT 52
15895: PPUSH
15896: CALL_OW 125
// end ;
15900: PPOPN 1
15902: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15903: LD_INT 0
15905: PPUSH
15906: PPUSH
15907: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15908: LD_VAR 0 1
15912: PPUSH
15913: LD_VAR 0 2
15917: PPUSH
15918: CALL 38003 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15922: LD_VAR 0 1
15926: PPUSH
15927: CALL_OW 255
15931: PUSH
15932: LD_INT 3
15934: EQUAL
15935: PUSH
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 264
15945: PUSH
15946: LD_INT 51
15948: PUSH
15949: LD_INT 52
15951: PUSH
15952: LD_INT 53
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: IN
15960: NOT
15961: AND
15962: IFFALSE 15993
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15964: LD_ADDR_EXP 48
15968: PUSH
15969: LD_EXP 48
15973: PPUSH
15974: LD_EXP 48
15978: PUSH
15979: LD_INT 1
15981: PLUS
15982: PPUSH
15983: LD_VAR 0 1
15987: PPUSH
15988: CALL_OW 1
15992: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15993: LD_VAR 0 1
15997: PPUSH
15998: CALL_OW 264
16002: PUSH
16003: LD_INT 53
16005: EQUAL
16006: IFFALSE 16161
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
16008: LD_VAR 0 1
16012: PPUSH
16013: LD_INT 60
16015: PPUSH
16016: LD_INT 85
16018: PPUSH
16019: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
16023: LD_VAR 0 1
16027: PPUSH
16028: LD_INT 43
16030: PPUSH
16031: LD_INT 69
16033: PPUSH
16034: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
16038: LD_VAR 0 1
16042: PPUSH
16043: LD_INT 37
16045: PPUSH
16046: LD_INT 46
16048: PPUSH
16049: CALL_OW 171
// wait ( 0 0$1 ) ;
16053: LD_INT 35
16055: PPUSH
16056: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16060: LD_INT 35
16062: PPUSH
16063: CALL_OW 67
// until not HasTask ( vehicle ) ;
16067: LD_VAR 0 1
16071: PPUSH
16072: CALL_OW 314
16076: NOT
16077: IFFALSE 16060
// CutTreeInArea ( vehicle , cutTreeArea ) ;
16079: LD_VAR 0 1
16083: PPUSH
16084: LD_INT 34
16086: PPUSH
16087: CALL 10643 0 2
// repeat wait ( 0 0$1 ) ;
16091: LD_INT 35
16093: PPUSH
16094: CALL_OW 67
// until not HasTask ( vehicle ) ;
16098: LD_VAR 0 1
16102: PPUSH
16103: CALL_OW 314
16107: NOT
16108: IFFALSE 16091
// un := IsDrivenBy ( vehicle ) ;
16110: LD_ADDR_VAR 0 4
16114: PUSH
16115: LD_VAR 0 1
16119: PPUSH
16120: CALL_OW 311
16124: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
16125: LD_VAR 0 4
16129: PPUSH
16130: LD_INT 96
16132: PPUSH
16133: LD_INT 77
16135: PPUSH
16136: CALL_OW 171
// AddComExitVehicle ( un ) ;
16140: LD_VAR 0 4
16144: PPUSH
16145: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
16149: LD_VAR 0 4
16153: PPUSH
16154: LD_INT 17
16156: PPUSH
16157: CALL_OW 180
// end ; end ;
16161: PPOPN 5
16163: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16164: LD_VAR 0 1
16168: PPUSH
16169: CALL_OW 255
16173: PUSH
16174: LD_INT 3
16176: EQUAL
16177: IFFALSE 16208
// begin tamedApemans = tamedApemans + 1 ;
16179: LD_ADDR_EXP 33
16183: PUSH
16184: LD_EXP 33
16188: PUSH
16189: LD_INT 1
16191: PLUS
16192: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
16193: LD_VAR 0 1
16197: PPUSH
16198: LD_INT 106
16200: PPUSH
16201: LD_INT 85
16203: PPUSH
16204: CALL_OW 111
// end ; end ;
16208: PPOPN 2
16210: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
16211: LD_VAR 0 2
16215: PPUSH
16216: CALL_OW 255
16220: PUSH
16221: LD_INT 3
16223: EQUAL
16224: PUSH
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 255
16234: PUSH
16235: LD_INT 3
16237: EQUAL
16238: AND
16239: PUSH
16240: LD_INT 21
16242: PPUSH
16243: CALL_OW 302
16247: AND
16248: IFFALSE 16262
// ComEnterUnit ( human , rufab ) ;
16250: LD_VAR 0 1
16254: PPUSH
16255: LD_INT 21
16257: PPUSH
16258: CALL_OW 120
// end ;
16262: PPOPN 4
16264: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16265: LD_VAR 0 1
16269: PUSH
16270: LD_INT 21
16272: EQUAL
16273: PUSH
16274: LD_VAR 0 2
16278: PPUSH
16279: CALL_OW 255
16283: PUSH
16284: LD_INT 3
16286: EQUAL
16287: AND
16288: IFFALSE 16302
// SetLives ( human , 1000 ) ;
16290: LD_VAR 0 2
16294: PPUSH
16295: LD_INT 1000
16297: PPUSH
16298: CALL_OW 234
// end ;
16302: PPOPN 2
16304: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16305: LD_VAR 0 1
16309: PPUSH
16310: CALL 37987 0 1
// end ; end_of_file
16314: PPOPN 1
16316: END
// every 0 0$30 trigger cratesStatus = 1 do
16317: LD_EXP 39
16321: PUSH
16322: LD_INT 1
16324: EQUAL
16325: IFFALSE 16378
16327: GO 16329
16329: DISABLE
// begin enable ;
16330: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
16331: LD_INT 350
16333: PUSH
16334: LD_INT 875
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 1
16343: PPUSH
16344: LD_INT 2
16346: PPUSH
16347: CALL_OW 12
16351: ARRAY
16352: PPUSH
16353: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
16357: LD_INT 1
16359: PPUSH
16360: LD_INT 5
16362: PPUSH
16363: CALL_OW 12
16367: PPUSH
16368: LD_INT 7
16370: PPUSH
16371: LD_INT 1
16373: PPUSH
16374: CALL_OW 55
// end ;
16378: END
// every 1 1$0 trigger cratesStatus = 2 do
16379: LD_EXP 39
16383: PUSH
16384: LD_INT 2
16386: EQUAL
16387: IFFALSE 16470
16389: GO 16391
16391: DISABLE
// begin enable ;
16392: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16393: LD_INT 3150
16395: PUSH
16396: LD_INT 4550
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 1
16405: PPUSH
16406: LD_INT 2
16408: PPUSH
16409: CALL_OW 12
16413: ARRAY
16414: PPUSH
16415: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16419: LD_INT 2
16421: PUSH
16422: LD_INT 5
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 1
16431: PPUSH
16432: LD_INT 2
16434: PPUSH
16435: CALL_OW 12
16439: ARRAY
16440: PPUSH
16441: LD_INT 6
16443: PUSH
16444: LD_INT 7
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: LD_INT 1
16453: PPUSH
16454: LD_INT 2
16456: PPUSH
16457: CALL_OW 12
16461: ARRAY
16462: PPUSH
16463: LD_INT 1
16465: PPUSH
16466: CALL_OW 55
// end ;
16470: END
// every 0 0$30 + 0 0$10 do
16471: GO 16473
16473: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16474: LD_INT 4
16476: PUSH
16477: LD_INT 5
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 1
16486: PPUSH
16487: LD_INT 2
16489: PPUSH
16490: CALL_OW 12
16494: ARRAY
16495: PPUSH
16496: LD_INT 7
16498: PPUSH
16499: LD_INT 1
16501: PPUSH
16502: CALL_OW 55
// Wait ( 0 0$15 ) ;
16506: LD_INT 525
16508: PPUSH
16509: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16513: LD_INT 4
16515: PUSH
16516: LD_INT 5
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 1
16525: PPUSH
16526: LD_INT 2
16528: PPUSH
16529: CALL_OW 12
16533: ARRAY
16534: PPUSH
16535: LD_INT 7
16537: PPUSH
16538: LD_INT 1
16540: PPUSH
16541: CALL_OW 55
// Wait ( 0 0$20 ) ;
16545: LD_INT 700
16547: PPUSH
16548: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16552: LD_INT 4
16554: PUSH
16555: LD_INT 5
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 1
16564: PPUSH
16565: LD_INT 2
16567: PPUSH
16568: CALL_OW 12
16572: ARRAY
16573: PPUSH
16574: LD_INT 7
16576: PPUSH
16577: LD_INT 1
16579: PPUSH
16580: CALL_OW 55
// end ; end_of_file
16584: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16585: LD_EXP 25
16589: PUSH
16590: LD_INT 1
16592: EQUAL
16593: IFFALSE 16886
16595: GO 16597
16597: DISABLE
16598: LD_INT 0
16600: PPUSH
16601: PPUSH
16602: PPUSH
// begin enable ;
16603: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: LD_INT 22
16611: PUSH
16612: LD_INT 1
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 21
16621: PUSH
16622: LD_INT 3
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 30
16634: PUSH
16635: LD_INT 0
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 30
16644: PUSH
16645: LD_INT 1
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: LIST
16661: PPUSH
16662: CALL_OW 69
16666: ST_TO_ADDR
// for i in tmp do
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: LD_VAR 0 2
16676: PUSH
16677: FOR_IN
16678: IFFALSE 16711
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16680: LD_ADDR_VAR 0 3
16684: PUSH
16685: LD_VAR 0 3
16689: PUSH
16690: LD_VAR 0 1
16694: PPUSH
16695: CALL_OW 274
16699: PPUSH
16700: LD_INT 1
16702: PPUSH
16703: CALL_OW 275
16707: PLUS
16708: ST_TO_ADDR
16709: GO 16677
16711: POP
16712: POP
// strings = [ ] ;
16713: LD_ADDR_EXP 28
16717: PUSH
16718: EMPTY
16719: ST_TO_ADDR
// if tmp = 0 then
16720: LD_VAR 0 2
16724: PUSH
16725: LD_INT 0
16727: EQUAL
16728: IFFALSE 16753
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16730: LD_ADDR_EXP 28
16734: PUSH
16735: LD_EXP 28
16739: PUSH
16740: LD_STRING #Am06-1
16742: PUSH
16743: LD_EXP 26
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: ADD
16752: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16753: LD_VAR 0 2
16757: PUSH
16758: LD_EXP 26
16762: PUSH
16763: LD_VAR 0 3
16767: GREATER
16768: AND
16769: IFFALSE 16800
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16771: LD_ADDR_EXP 28
16775: PUSH
16776: LD_EXP 28
16780: PUSH
16781: LD_STRING #Am06-1
16783: PUSH
16784: LD_EXP 26
16788: PUSH
16789: LD_VAR 0 3
16793: MINUS
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: ADD
16799: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16800: LD_VAR 0 2
16804: PUSH
16805: LD_EXP 26
16809: PUSH
16810: LD_VAR 0 3
16814: LESSEQUAL
16815: AND
16816: IFFALSE 16839
// strings = strings ^ [ #Am06-1 , 0 ] ;
16818: LD_ADDR_EXP 28
16822: PUSH
16823: LD_EXP 28
16827: PUSH
16828: LD_STRING #Am06-1
16830: PUSH
16831: LD_INT 0
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: ADD
16838: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16839: LD_ADDR_EXP 27
16843: PUSH
16844: LD_EXP 27
16848: PUSH
16849: LD_INT 35
16851: MINUS
16852: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16853: LD_ADDR_EXP 28
16857: PUSH
16858: LD_EXP 28
16862: PUSH
16863: LD_STRING #Am06-2
16865: PUSH
16866: LD_EXP 27
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: ADD
16875: ST_TO_ADDR
// display_strings = strings ;
16876: LD_ADDR_OWVAR 47
16880: PUSH
16881: LD_EXP 28
16885: ST_TO_ADDR
// end ; end_of_file
16886: PPOPN 3
16888: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
16889: LD_INT 0
16891: PPUSH
16892: PPUSH
16893: PPUSH
16894: PPUSH
16895: PPUSH
16896: PPUSH
16897: PPUSH
16898: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16899: LD_ADDR_VAR 0 3
16903: PUSH
16904: LD_INT 22
16906: PUSH
16907: LD_INT 1
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 2
16916: PUSH
16917: LD_INT 30
16919: PUSH
16920: LD_INT 0
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 30
16929: PUSH
16930: LD_INT 1
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PPUSH
16946: CALL_OW 69
16950: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16951: LD_INT 35
16953: PPUSH
16954: CALL_OW 67
// until depot ;
16958: LD_VAR 0 3
16962: IFFALSE 16899
// forceJMM := false ;
16964: LD_ADDR_VAR 0 8
16968: PUSH
16969: LD_INT 0
16971: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16972: LD_INT 35
16974: PPUSH
16975: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
16979: LD_ADDR_VAR 0 4
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 91
16996: PUSH
16997: LD_VAR 0 3
17001: PUSH
17002: LD_INT 1
17004: ARRAY
17005: PUSH
17006: LD_INT 15
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 21
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: LD_INT 25
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 25
17039: PUSH
17040: LD_INT 2
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 25
17049: PUSH
17050: LD_INT 3
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 25
17059: PUSH
17060: LD_INT 4
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 3
17076: PUSH
17077: LD_INT 54
17079: PUSH
17080: EMPTY
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 3
17089: PUSH
17090: LD_INT 55
17092: PUSH
17093: EMPTY
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: PPUSH
17108: CALL_OW 69
17112: PUSH
17113: LD_EXP 2
17117: PUSH
17118: LD_EXP 3
17122: PUSH
17123: LD_EXP 4
17127: PUSH
17128: LD_EXP 5
17132: PUSH
17133: LD_EXP 7
17137: PUSH
17138: LD_EXP 8
17142: PUSH
17143: LD_EXP 9
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: DIFF
17157: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
17158: LD_EXP 27
17162: PUSH
17163: LD_INT 21000
17165: LESS
17166: IFFALSE 17178
// begin forceJMM := true ;
17168: LD_ADDR_VAR 0 8
17172: PUSH
17173: LD_INT 1
17175: ST_TO_ADDR
// break ;
17176: GO 17194
// end ; until tmp and not InBattle ( 1 ) ;
17178: LD_VAR 0 4
17182: PUSH
17183: LD_INT 1
17185: PPUSH
17186: CALL_OW 463
17190: NOT
17191: AND
17192: IFFALSE 16972
// if not forceJMM then
17194: LD_VAR 0 8
17198: NOT
17199: IFFALSE 17227
// tmp := tmp [ rand ( 1 , tmp ) ] else
17201: LD_ADDR_VAR 0 4
17205: PUSH
17206: LD_VAR 0 4
17210: PUSH
17211: LD_INT 1
17213: PPUSH
17214: LD_VAR 0 4
17218: PPUSH
17219: CALL_OW 12
17223: ARRAY
17224: ST_TO_ADDR
17225: GO 17237
// tmp := JMM ;
17227: LD_ADDR_VAR 0 4
17231: PUSH
17232: LD_EXP 1
17236: ST_TO_ADDR
// blockSpawn := 1 ;
17237: LD_ADDR_EXP 30
17241: PUSH
17242: LD_INT 1
17244: ST_TO_ADDR
// uc_side := 2 ;
17245: LD_ADDR_OWVAR 20
17249: PUSH
17250: LD_INT 2
17252: ST_TO_ADDR
// uc_nation := 2 ;
17253: LD_ADDR_OWVAR 21
17257: PUSH
17258: LD_INT 2
17260: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
17261: LD_ADDR_EXP 20
17265: PUSH
17266: LD_STRING Kurt
17268: PPUSH
17269: LD_INT 0
17271: PPUSH
17272: LD_STRING 
17274: PPUSH
17275: CALL 43309 0 3
17279: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17280: LD_EXP 20
17284: PPUSH
17285: LD_VAR 0 4
17289: PPUSH
17290: CALL_OW 250
17294: PPUSH
17295: LD_VAR 0 4
17299: PPUSH
17300: CALL_OW 251
17304: PPUSH
17305: LD_INT 5
17307: PPUSH
17308: LD_INT 1
17310: PPUSH
17311: CALL_OW 50
// InGameOn ;
17315: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17319: LD_EXP 20
17323: PPUSH
17324: CALL_OW 87
// wait ( 0 0$2 ) ;
17328: LD_INT 70
17330: PPUSH
17331: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17335: LD_EXP 20
17339: PPUSH
17340: LD_VAR 0 4
17344: PPUSH
17345: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
17349: LD_VAR 0 4
17353: PPUSH
17354: LD_EXP 20
17358: PPUSH
17359: CALL_OW 112
// wait ( 0 0$1 ) ;
17363: LD_INT 35
17365: PPUSH
17366: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17370: LD_VAR 0 4
17374: PPUSH
17375: LD_EXP 20
17379: PPUSH
17380: CALL_OW 119
// DialogueOn ;
17384: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17388: LD_EXP 20
17392: PPUSH
17393: LD_STRING D2-Kurt-1
17395: PPUSH
17396: CALL_OW 88
// if tmp = JMM then
17400: LD_VAR 0 4
17404: PUSH
17405: LD_EXP 1
17409: EQUAL
17410: IFFALSE 17502
// begin Say ( JMM , D2-JMM-1 ) ;
17412: LD_EXP 1
17416: PPUSH
17417: LD_STRING D2-JMM-1
17419: PPUSH
17420: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17424: LD_EXP 20
17428: PPUSH
17429: LD_STRING D2-Kurt-2
17431: PPUSH
17432: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17436: LD_EXP 1
17440: PPUSH
17441: LD_STRING D2-JMM-2
17443: PPUSH
17444: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17448: LD_EXP 20
17452: PPUSH
17453: LD_STRING D2-Kurt-3
17455: PPUSH
17456: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17460: LD_EXP 1
17464: PPUSH
17465: LD_STRING D2-JMM-3
17467: PPUSH
17468: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17472: LD_EXP 20
17476: PPUSH
17477: LD_STRING D2-Kurt-4
17479: PPUSH
17480: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17484: LD_EXP 1
17488: PPUSH
17489: LD_STRING D2-JMM-4
17491: PPUSH
17492: CALL_OW 88
// DialogueOff ;
17496: CALL_OW 7
// end else
17500: GO 17730
// begin if GetSex ( tmp ) = 1 then
17502: LD_VAR 0 4
17506: PPUSH
17507: CALL_OW 258
17511: PUSH
17512: LD_INT 1
17514: EQUAL
17515: IFFALSE 17531
// Say ( tmp , D2-Sol1-1 ) else
17517: LD_VAR 0 4
17521: PPUSH
17522: LD_STRING D2-Sol1-1
17524: PPUSH
17525: CALL_OW 88
17529: GO 17543
// Say ( tmp , D2-FSol1-1 ) ;
17531: LD_VAR 0 4
17535: PPUSH
17536: LD_STRING D2-FSol1-1
17538: PPUSH
17539: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17543: LD_EXP 20
17547: PPUSH
17548: LD_STRING D2-Kurt-2
17550: PPUSH
17551: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17555: LD_VAR 0 4
17559: PPUSH
17560: CALL_OW 258
17564: PUSH
17565: LD_INT 1
17567: EQUAL
17568: IFFALSE 17584
// Say ( tmp , D2-Sol1-2 ) else
17570: LD_VAR 0 4
17574: PPUSH
17575: LD_STRING D2-Sol1-2
17577: PPUSH
17578: CALL_OW 88
17582: GO 17596
// Say ( tmp , D2-FSol1-2 ) ;
17584: LD_VAR 0 4
17588: PPUSH
17589: LD_STRING D2-FSol1-2
17591: PPUSH
17592: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17596: LD_EXP 20
17600: PPUSH
17601: LD_STRING D2-Kurt-3
17603: PPUSH
17604: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17608: LD_VAR 0 4
17612: PPUSH
17613: CALL_OW 258
17617: PUSH
17618: LD_INT 1
17620: EQUAL
17621: IFFALSE 17637
// Say ( tmp , D2-Sol1-3 ) else
17623: LD_VAR 0 4
17627: PPUSH
17628: LD_STRING D2-Sol1-3
17630: PPUSH
17631: CALL_OW 88
17635: GO 17649
// Say ( tmp , D2-FSol1-3 ) ;
17637: LD_VAR 0 4
17641: PPUSH
17642: LD_STRING D2-FSol1-3
17644: PPUSH
17645: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17649: LD_EXP 20
17653: PPUSH
17654: LD_STRING D2-Kurt-4
17656: PPUSH
17657: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17661: LD_VAR 0 4
17665: PPUSH
17666: CALL_OW 258
17670: PUSH
17671: LD_INT 1
17673: EQUAL
17674: IFFALSE 17702
// begin Say ( tmp , D2-Sol1-4 ) ;
17676: LD_VAR 0 4
17680: PPUSH
17681: LD_STRING D2-Sol1-4
17683: PPUSH
17684: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17688: LD_VAR 0 4
17692: PPUSH
17693: LD_STRING D2-Sol1-5
17695: PPUSH
17696: CALL_OW 88
// end else
17700: GO 17726
// begin Say ( tmp , D2-FSol1-4 ) ;
17702: LD_VAR 0 4
17706: PPUSH
17707: LD_STRING D2-FSol1-4
17709: PPUSH
17710: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17714: LD_VAR 0 4
17718: PPUSH
17719: LD_STRING D2-FSol1-5
17721: PPUSH
17722: CALL_OW 88
// end ; DialogueOff ;
17726: CALL_OW 7
// end ; dec := ShowQuery1 ;
17730: LD_ADDR_VAR 0 6
17734: PUSH
17735: CALL 8033 0 0
17739: ST_TO_ADDR
// if dec = 1 then
17740: LD_VAR 0 6
17744: PUSH
17745: LD_INT 1
17747: EQUAL
17748: IFFALSE 17810
// begin DialogueOn ;
17750: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17754: LD_EXP 20
17758: PPUSH
17759: LD_STRING D2a-Kurt-1
17761: PPUSH
17762: CALL_OW 88
// DialogueOff ;
17766: CALL_OW 7
// InGameOff ;
17770: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17774: LD_INT 1
17776: PPUSH
17777: LD_INT 2
17779: PPUSH
17780: LD_INT 2
17782: PPUSH
17783: LD_INT 1
17785: PPUSH
17786: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17790: LD_EXP 20
17794: PPUSH
17795: LD_INT 8
17797: PPUSH
17798: CALL_OW 113
// readyToEscape := 1 ;
17802: LD_ADDR_EXP 22
17806: PUSH
17807: LD_INT 1
17809: ST_TO_ADDR
// end ; if dec = 2 then
17810: LD_VAR 0 6
17814: PUSH
17815: LD_INT 2
17817: EQUAL
17818: IFFALSE 18286
// begin DialogueOn ;
17820: CALL_OW 6
// if tmp = JMM then
17824: LD_VAR 0 4
17828: PUSH
17829: LD_EXP 1
17833: EQUAL
17834: IFFALSE 17890
// begin Say ( JMM , D2b-JMM-1 ) ;
17836: LD_EXP 1
17840: PPUSH
17841: LD_STRING D2b-JMM-1
17843: PPUSH
17844: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17848: LD_EXP 20
17852: PPUSH
17853: LD_STRING D2b-Kurt-1
17855: PPUSH
17856: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17860: LD_EXP 1
17864: PPUSH
17865: LD_STRING D2b-JMM-2
17867: PPUSH
17868: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17872: LD_EXP 20
17876: PPUSH
17877: LD_STRING D2b-Kurt-2
17879: PPUSH
17880: CALL_OW 88
// DialogueOff ;
17884: CALL_OW 7
// end else
17888: GO 18041
// begin if GetSex ( tmp ) = 1 then
17890: LD_VAR 0 4
17894: PPUSH
17895: CALL_OW 258
17899: PUSH
17900: LD_INT 1
17902: EQUAL
17903: IFFALSE 17919
// Say ( tmp , D2b-Sol1-1 ) else
17905: LD_VAR 0 4
17909: PPUSH
17910: LD_STRING D2b-Sol1-1
17912: PPUSH
17913: CALL_OW 88
17917: GO 17931
// Say ( tmp , D2b-FSol1-1 ) ;
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_STRING D2b-FSol1-1
17926: PPUSH
17927: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17931: LD_EXP 20
17935: PPUSH
17936: LD_STRING D2b-Kurt-1
17938: PPUSH
17939: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17943: LD_VAR 0 4
17947: PPUSH
17948: CALL_OW 258
17952: PUSH
17953: LD_INT 1
17955: EQUAL
17956: IFFALSE 17972
// Say ( tmp , D2b-Sol1-2 ) else
17958: LD_VAR 0 4
17962: PPUSH
17963: LD_STRING D2b-Sol1-2
17965: PPUSH
17966: CALL_OW 88
17970: GO 17984
// Say ( tmp , D2b-FSol1-2 ) ;
17972: LD_VAR 0 4
17976: PPUSH
17977: LD_STRING D2b-FSol1-2
17979: PPUSH
17980: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17984: LD_EXP 20
17988: PPUSH
17989: LD_STRING D2b-Kurt-2
17991: PPUSH
17992: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17996: LD_VAR 0 4
18000: PPUSH
18001: CALL_OW 258
18005: PUSH
18006: LD_INT 1
18008: EQUAL
18009: IFFALSE 18025
// Say ( tmp , D2c-Sol1-2 ) else
18011: LD_VAR 0 4
18015: PPUSH
18016: LD_STRING D2c-Sol1-2
18018: PPUSH
18019: CALL_OW 88
18023: GO 18037
// Say ( tmp , D2c-FSol1-2 ) ;
18025: LD_VAR 0 4
18029: PPUSH
18030: LD_STRING D2c-FSol1-2
18032: PPUSH
18033: CALL_OW 88
// DialogueOff ;
18037: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
18041: LD_ADDR_VAR 0 7
18045: PUSH
18046: CALL 8054 0 0
18050: ST_TO_ADDR
// if dec2 = 1 then
18051: LD_VAR 0 7
18055: PUSH
18056: LD_INT 1
18058: EQUAL
18059: IFFALSE 18121
// begin DialogueOn ;
18061: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18065: LD_EXP 20
18069: PPUSH
18070: LD_STRING D2a-Kurt-1
18072: PPUSH
18073: CALL_OW 88
// DialogueOff ;
18077: CALL_OW 7
// InGameOff ;
18081: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18085: LD_INT 1
18087: PPUSH
18088: LD_INT 2
18090: PPUSH
18091: LD_INT 2
18093: PPUSH
18094: LD_INT 1
18096: PPUSH
18097: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
18101: LD_EXP 20
18105: PPUSH
18106: LD_INT 8
18108: PPUSH
18109: CALL_OW 113
// readyToEscape := 1 ;
18113: LD_ADDR_EXP 22
18117: PUSH
18118: LD_INT 1
18120: ST_TO_ADDR
// end ; if dec2 = 2 then
18121: LD_VAR 0 7
18125: PUSH
18126: LD_INT 2
18128: EQUAL
18129: IFFALSE 18286
// begin if tmp = JMM then
18131: LD_VAR 0 4
18135: PUSH
18136: LD_EXP 1
18140: EQUAL
18141: IFFALSE 18201
// begin DialogueOn ;
18143: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18147: LD_EXP 1
18151: PPUSH
18152: LD_STRING D2c-JMM-1
18154: PPUSH
18155: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18159: LD_EXP 20
18163: PPUSH
18164: LD_STRING D2c-Kurt-1
18166: PPUSH
18167: CALL_OW 88
// DialogueOff ;
18171: CALL_OW 7
// InGameOff ;
18175: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18179: LD_EXP 20
18183: PPUSH
18184: LD_INT 8
18186: PPUSH
18187: CALL_OW 113
// readyToEscape := 1 ;
18191: LD_ADDR_EXP 22
18195: PUSH
18196: LD_INT 1
18198: ST_TO_ADDR
// end else
18199: GO 18286
// begin DialogueOn ;
18201: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18205: LD_VAR 0 4
18209: PPUSH
18210: CALL_OW 258
18214: PUSH
18215: LD_INT 1
18217: EQUAL
18218: IFFALSE 18234
// Say ( tmp , D2c-Sol1-1 ) else
18220: LD_VAR 0 4
18224: PPUSH
18225: LD_STRING D2c-Sol1-1
18227: PPUSH
18228: CALL_OW 88
18232: GO 18246
// Say ( tmp , D2c-FSol1-1 ) ;
18234: LD_VAR 0 4
18238: PPUSH
18239: LD_STRING D2c-FSol1-1
18241: PPUSH
18242: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18246: LD_EXP 20
18250: PPUSH
18251: LD_STRING D2c-Kurt-1
18253: PPUSH
18254: CALL_OW 88
// DialogueOff ;
18258: CALL_OW 7
// InGameOff ;
18262: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18266: LD_EXP 20
18270: PPUSH
18271: LD_INT 8
18273: PPUSH
18274: CALL_OW 113
// readyToEscape := 1 ;
18278: LD_ADDR_EXP 22
18282: PUSH
18283: LD_INT 1
18285: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18286: LD_VAR 0 6
18290: PUSH
18291: LD_INT 3
18293: EQUAL
18294: IFFALSE 18455
// begin DialogueOn ;
18296: CALL_OW 6
// if tmp = JMM then
18300: LD_VAR 0 4
18304: PUSH
18305: LD_EXP 1
18309: EQUAL
18310: IFFALSE 18370
// begin DialogueOn ;
18312: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18316: LD_EXP 1
18320: PPUSH
18321: LD_STRING D2c-JMM-1
18323: PPUSH
18324: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18328: LD_EXP 20
18332: PPUSH
18333: LD_STRING D2c-Kurt-1
18335: PPUSH
18336: CALL_OW 88
// DialogueOff ;
18340: CALL_OW 7
// InGameOff ;
18344: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18348: LD_EXP 20
18352: PPUSH
18353: LD_INT 8
18355: PPUSH
18356: CALL_OW 113
// readyToEscape := 1 ;
18360: LD_ADDR_EXP 22
18364: PUSH
18365: LD_INT 1
18367: ST_TO_ADDR
// end else
18368: GO 18455
// begin DialogueOn ;
18370: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18374: LD_VAR 0 4
18378: PPUSH
18379: CALL_OW 258
18383: PUSH
18384: LD_INT 1
18386: EQUAL
18387: IFFALSE 18403
// Say ( tmp , D2c-Sol1-1 ) else
18389: LD_VAR 0 4
18393: PPUSH
18394: LD_STRING D2c-Sol1-1
18396: PPUSH
18397: CALL_OW 88
18401: GO 18415
// Say ( tmp , D2c-FSol1-1 ) ;
18403: LD_VAR 0 4
18407: PPUSH
18408: LD_STRING D2c-FSol1-1
18410: PPUSH
18411: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18415: LD_EXP 20
18419: PPUSH
18420: LD_STRING D2c-Kurt-1
18422: PPUSH
18423: CALL_OW 88
// DialogueOff ;
18427: CALL_OW 7
// InGameOff ;
18431: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18435: LD_EXP 20
18439: PPUSH
18440: LD_INT 8
18442: PPUSH
18443: CALL_OW 113
// readyToEscape := 1 ;
18447: LD_ADDR_EXP 22
18451: PUSH
18452: LD_INT 1
18454: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18455: LD_ADDR_EXP 30
18459: PUSH
18460: LD_INT 0
18462: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18463: LD_INT 35
18465: PPUSH
18466: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18470: LD_EXP 20
18474: PPUSH
18475: LD_INT 8
18477: PPUSH
18478: CALL_OW 308
18482: PUSH
18483: LD_EXP 22
18487: AND
18488: PUSH
18489: LD_EXP 20
18493: PPUSH
18494: CALL_OW 301
18498: OR
18499: IFFALSE 18463
// if IsDead ( Kurt ) then
18501: LD_EXP 20
18505: PPUSH
18506: CALL_OW 301
18510: IFFALSE 18514
// exit ;
18512: GO 18569
// RemoveUnit ( Kurt ) ;
18514: LD_EXP 20
18518: PPUSH
18519: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18523: LD_EXP 20
18527: PPUSH
18528: LD_STRING Kurt
18530: PPUSH
18531: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18535: LD_INT 1
18537: PPUSH
18538: LD_INT 2
18540: PPUSH
18541: CALL_OW 81
18545: PUSH
18546: LD_INT 0
18548: EQUAL
18549: IFFALSE 18561
// kurtStatus = 1 else
18551: LD_ADDR_EXP 21
18555: PUSH
18556: LD_INT 1
18558: ST_TO_ADDR
18559: GO 18569
// kurtStatus = 2 ;
18561: LD_ADDR_EXP 21
18565: PUSH
18566: LD_INT 2
18568: ST_TO_ADDR
// end ; end_of_file
18569: LD_VAR 0 1
18573: RET
// every 0 0$2 do
18574: GO 18576
18576: DISABLE
// begin enable ;
18577: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18578: LD_INT 3
18580: PPUSH
18581: LD_INT 2
18583: PPUSH
18584: LD_INT 10
18586: PPUSH
18587: LD_EXP 32
18591: PPUSH
18592: CALL 8485 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18596: LD_INT 3
18598: PPUSH
18599: LD_INT 12
18601: PPUSH
18602: LD_EXP 32
18606: PPUSH
18607: CALL 10088 0 3
// if disableHealAI = 0 then
18611: LD_EXP 34
18615: PUSH
18616: LD_INT 0
18618: EQUAL
18619: IFFALSE 18640
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18621: LD_INT 3
18623: PPUSH
18624: LD_INT 9
18626: PPUSH
18627: LD_INT 10
18629: PPUSH
18630: LD_INT 32
18632: PUSH
18633: EMPTY
18634: LIST
18635: PPUSH
18636: CALL 8852 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18640: LD_INT 3
18642: PPUSH
18643: LD_INT 51
18645: PPUSH
18646: LD_INT 6
18648: PPUSH
18649: CALL 9541 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18653: LD_INT 2
18655: PPUSH
18656: CALL_OW 303
18660: PUSH
18661: LD_INT 2
18663: PPUSH
18664: CALL_OW 255
18668: PUSH
18669: LD_INT 1
18671: EQUAL
18672: OR
18673: IFFALSE 18687
// DefendDepot ( 3 , rudepo ) else
18675: LD_INT 3
18677: PPUSH
18678: LD_INT 2
18680: PPUSH
18681: CALL 9368 0 2
18685: GO 18697
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18687: LD_INT 3
18689: PPUSH
18690: LD_INT 10
18692: PPUSH
18693: CALL 9659 0 2
// end ;
18697: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18698: LD_INT 22
18700: PUSH
18701: LD_INT 3
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 21
18710: PUSH
18711: LD_INT 2
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 55
18720: PUSH
18721: EMPTY
18722: LIST
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: LD_INT 34
18729: PUSH
18730: LD_INT 51
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: PPUSH
18747: CALL_OW 69
18751: PUSH
18752: LD_INT 0
18754: EQUAL
18755: PUSH
18756: LD_INT 21
18758: PPUSH
18759: CALL_OW 255
18763: PUSH
18764: LD_INT 3
18766: EQUAL
18767: AND
18768: PUSH
18769: LD_INT 21
18771: PPUSH
18772: CALL_OW 302
18776: AND
18777: PUSH
18778: LD_INT 2
18780: PPUSH
18781: CALL_OW 255
18785: PUSH
18786: LD_INT 3
18788: EQUAL
18789: AND
18790: PUSH
18791: LD_INT 2
18793: PPUSH
18794: CALL_OW 302
18798: AND
18799: PUSH
18800: LD_INT 21
18802: PPUSH
18803: CALL_OW 313
18807: AND
18808: PUSH
18809: LD_EXP 48
18813: PUSH
18814: LD_INT 4
18816: PUSH
18817: LD_INT 5
18819: PUSH
18820: LD_INT 6
18822: PUSH
18823: LD_INT 6
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: PUSH
18832: LD_OWVAR 67
18836: ARRAY
18837: LESS
18838: AND
18839: IFFALSE 19060
18841: GO 18843
18843: DISABLE
// begin enable ;
18844: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18845: LD_INT 2
18847: PPUSH
18848: CALL_OW 274
18852: PPUSH
18853: LD_INT 1
18855: PPUSH
18856: LD_INT 2000
18858: PPUSH
18859: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18863: LD_INT 3
18865: PPUSH
18866: LD_INT 21
18868: PPUSH
18869: LD_INT 4
18871: PUSH
18872: LD_INT 5
18874: PUSH
18875: LD_INT 6
18877: PUSH
18878: LD_INT 6
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: PUSH
18887: LD_OWVAR 67
18891: ARRAY
18892: PUSH
18893: LD_EXP 48
18897: MINUS
18898: PPUSH
18899: LD_INT 43
18901: PUSH
18902: LD_INT 43
18904: PUSH
18905: LD_INT 44
18907: PUSH
18908: LD_INT 44
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 43
18919: PUSH
18920: LD_INT 43
18922: PUSH
18923: LD_INT 43
18925: PUSH
18926: LD_INT 44
18928: PUSH
18929: LD_INT 44
18931: PUSH
18932: LD_INT 46
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 43
18945: PUSH
18946: LD_INT 43
18948: PUSH
18949: LD_INT 43
18951: PUSH
18952: LD_INT 44
18954: PUSH
18955: LD_INT 44
18957: PUSH
18958: LD_INT 46
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 43
18971: PUSH
18972: LD_INT 43
18974: PUSH
18975: LD_INT 44
18977: PUSH
18978: LD_INT 46
18980: PUSH
18981: LD_INT 46
18983: PUSH
18984: LD_INT 46
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: PUSH
19001: LD_OWVAR 67
19005: ARRAY
19006: PPUSH
19007: LD_INT 1
19009: PPUSH
19010: LD_INT 1
19012: PPUSH
19013: LD_INT 22
19015: PUSH
19016: LD_INT 22
19018: PUSH
19019: LD_INT 24
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 1
19028: PPUSH
19029: LD_INT 2
19031: PPUSH
19032: CALL_OW 12
19036: ARRAY
19037: PUSH
19038: LD_INT 24
19040: PUSH
19041: LD_INT 24
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: PUSH
19050: LD_OWVAR 67
19054: ARRAY
19055: PPUSH
19056: CALL 8331 0 7
// end ;
19060: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
19061: LD_INT 17
19063: PPUSH
19064: CALL_OW 255
19068: PUSH
19069: LD_INT 3
19071: EQUAL
19072: PUSH
19073: LD_INT 17
19075: PPUSH
19076: CALL_OW 302
19080: AND
19081: PUSH
19082: LD_INT 2
19084: PPUSH
19085: CALL_OW 255
19089: PUSH
19090: LD_INT 3
19092: EQUAL
19093: AND
19094: PUSH
19095: LD_INT 2
19097: PPUSH
19098: CALL_OW 302
19102: AND
19103: PUSH
19104: LD_EXP 48
19108: PUSH
19109: LD_INT 4
19111: PUSH
19112: LD_INT 5
19114: PUSH
19115: LD_INT 6
19117: PUSH
19118: LD_INT 7
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: PUSH
19127: LD_OWVAR 67
19131: ARRAY
19132: LESS
19133: AND
19134: IFFALSE 19182
19136: GO 19138
19138: DISABLE
// begin enable ;
19139: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19140: LD_INT 17
19142: PPUSH
19143: LD_INT 22
19145: PPUSH
19146: LD_INT 1
19148: PPUSH
19149: LD_INT 1
19151: PPUSH
19152: LD_INT 42
19154: PUSH
19155: LD_INT 43
19157: PUSH
19158: LD_INT 44
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 1
19168: PPUSH
19169: LD_INT 3
19171: PPUSH
19172: CALL_OW 12
19176: ARRAY
19177: PPUSH
19178: CALL_OW 185
// end ;
19182: END
// every 2 2$0 do var i , j ;
19183: GO 19185
19185: DISABLE
19186: LD_INT 0
19188: PPUSH
19189: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19190: LD_INT 14700
19192: PUSH
19193: LD_INT 33600
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: PPUSH
19203: LD_INT 2
19205: PPUSH
19206: CALL_OW 12
19210: ARRAY
19211: PPUSH
19212: CALL_OW 67
// disableHealAI = 1 ;
19216: LD_ADDR_EXP 34
19220: PUSH
19221: LD_INT 1
19223: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19224: LD_ADDR_VAR 0 1
19228: PUSH
19229: LD_INT 22
19231: PUSH
19232: LD_INT 3
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 25
19241: PUSH
19242: LD_INT 4
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PPUSH
19253: CALL_OW 69
19257: PUSH
19258: FOR_IN
19259: IFFALSE 19272
// ComExitBuilding ( i ) ;
19261: LD_VAR 0 1
19265: PPUSH
19266: CALL_OW 122
19270: GO 19258
19272: POP
19273: POP
// wait ( 0 0$1 ) ;
19274: LD_INT 35
19276: PPUSH
19277: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19281: LD_INT 35
19283: PPUSH
19284: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19288: LD_ADDR_VAR 0 1
19292: PUSH
19293: LD_INT 22
19295: PUSH
19296: LD_INT 3
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 25
19305: PUSH
19306: LD_INT 4
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PPUSH
19317: CALL_OW 69
19321: PUSH
19322: FOR_IN
19323: IFFALSE 19400
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19325: LD_ADDR_VAR 0 2
19329: PUSH
19330: LD_INT 17
19332: PPUSH
19333: LD_INT 22
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 25
19345: PUSH
19346: LD_INT 12
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PPUSH
19357: CALL_OW 70
19361: PUSH
19362: FOR_IN
19363: IFFALSE 19396
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19365: LD_VAR 0 1
19369: PPUSH
19370: LD_VAR 0 2
19374: PPUSH
19375: CALL_OW 250
19379: PPUSH
19380: LD_VAR 0 2
19384: PPUSH
19385: CALL_OW 251
19389: PPUSH
19390: CALL_OW 191
19394: GO 19362
19396: POP
19397: POP
19398: GO 19322
19400: POP
19401: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19402: LD_INT 22
19404: PUSH
19405: LD_INT 3
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 25
19414: PUSH
19415: LD_INT 4
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PPUSH
19426: CALL_OW 69
19430: PUSH
19431: LD_INT 0
19433: EQUAL
19434: PUSH
19435: LD_EXP 33
19439: PUSH
19440: LD_INT 6
19442: PUSH
19443: LD_INT 7
19445: PUSH
19446: LD_INT 8
19448: PUSH
19449: LD_INT 8
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: PUSH
19458: LD_OWVAR 67
19462: ARRAY
19463: GREATEREQUAL
19464: OR
19465: PUSH
19466: LD_INT 17
19468: PPUSH
19469: LD_INT 22
19471: PUSH
19472: LD_INT 0
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 25
19481: PUSH
19482: LD_INT 12
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PPUSH
19493: CALL_OW 70
19497: PUSH
19498: LD_INT 0
19500: EQUAL
19501: OR
19502: IFFALSE 19281
// disableHealAI = 0 ;
19504: LD_ADDR_EXP 34
19508: PUSH
19509: LD_INT 0
19511: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19512: LD_ADDR_VAR 0 1
19516: PUSH
19517: LD_INT 22
19519: PUSH
19520: LD_INT 3
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 25
19529: PUSH
19530: LD_INT 12
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PPUSH
19541: CALL_OW 69
19545: PUSH
19546: FOR_IN
19547: IFFALSE 19563
// SetClass ( i , 16 ) ;
19549: LD_VAR 0 1
19553: PPUSH
19554: LD_INT 16
19556: PPUSH
19557: CALL_OW 336
19561: GO 19546
19563: POP
19564: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19565: LD_ADDR_VAR 0 1
19569: PUSH
19570: LD_INT 22
19572: PUSH
19573: LD_INT 3
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 25
19582: PUSH
19583: LD_INT 4
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PPUSH
19594: CALL_OW 69
19598: PUSH
19599: FOR_IN
19600: IFFALSE 19616
// ComEnterUnit ( i , rulab ) ;
19602: LD_VAR 0 1
19606: PPUSH
19607: LD_INT 32
19609: PPUSH
19610: CALL_OW 120
19614: GO 19599
19616: POP
19617: POP
// end ; end_of_file
19618: PPOPN 2
19620: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19621: LD_EXP 27
19625: PUSH
19626: LD_INT 0
19628: LESSEQUAL
19629: IFFALSE 19783
19631: GO 19633
19633: DISABLE
19634: LD_INT 0
19636: PPUSH
19637: PPUSH
19638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19639: LD_ADDR_VAR 0 2
19643: PUSH
19644: LD_INT 22
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 21
19656: PUSH
19657: LD_INT 3
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 2
19666: PUSH
19667: LD_INT 30
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 30
19679: PUSH
19680: LD_INT 1
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: LIST
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: PPUSH
19697: CALL_OW 69
19701: ST_TO_ADDR
// for i in tmp do
19702: LD_ADDR_VAR 0 1
19706: PUSH
19707: LD_VAR 0 2
19711: PUSH
19712: FOR_IN
19713: IFFALSE 19746
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19715: LD_ADDR_VAR 0 3
19719: PUSH
19720: LD_VAR 0 3
19724: PUSH
19725: LD_VAR 0 1
19729: PPUSH
19730: CALL_OW 274
19734: PPUSH
19735: LD_INT 1
19737: PPUSH
19738: CALL_OW 275
19742: PLUS
19743: ST_TO_ADDR
19744: GO 19712
19746: POP
19747: POP
// if yourCrates >= needCrates then
19748: LD_VAR 0 3
19752: PUSH
19753: LD_EXP 26
19757: GREATEREQUAL
19758: IFFALSE 19776
// FinishMission ( yourCrates , needCrates ) else
19760: LD_VAR 0 3
19764: PPUSH
19765: LD_EXP 26
19769: PPUSH
19770: CALL 19786 0 2
19774: GO 19783
// YouLost ( matmin ) ;
19776: LD_STRING matmin
19778: PPUSH
19779: CALL_OW 104
// end ;
19783: PPOPN 3
19785: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19786: LD_INT 0
19788: PPUSH
19789: PPUSH
19790: PPUSH
19791: PPUSH
// if killCounter >= 8 or killCounter >= UnitFilter ( arrivals , [ f_ok ] ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 5 then
19792: LD_EXP 46
19796: PUSH
19797: LD_INT 8
19799: GREATEREQUAL
19800: PUSH
19801: LD_EXP 46
19805: PUSH
19806: LD_EXP 45
19810: PPUSH
19811: LD_INT 50
19813: PUSH
19814: EMPTY
19815: LIST
19816: PPUSH
19817: CALL_OW 72
19821: GREATEREQUAL
19822: OR
19823: PUSH
19824: LD_INT 22
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 21
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 23
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 50
19856: PUSH
19857: EMPTY
19858: LIST
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: PPUSH
19866: CALL_OW 69
19870: PUSH
19871: LD_INT 5
19873: LESS
19874: OR
19875: IFFALSE 19886
// begin YouLost ( Troops ) ;
19877: LD_STRING Troops
19879: PPUSH
19880: CALL_OW 104
// exit ;
19884: GO 20843
// end ; if killCounter = 0 then
19886: LD_EXP 46
19890: PUSH
19891: LD_INT 0
19893: EQUAL
19894: IFFALSE 19903
// SetAchievement ( ACH_SURV ) ;
19896: LD_STRING ACH_SURV
19898: PPUSH
19899: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19903: LD_INT 22
19905: PUSH
19906: LD_INT 3
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 21
19915: PUSH
19916: LD_INT 3
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PPUSH
19927: CALL_OW 69
19931: PUSH
19932: LD_INT 0
19934: EQUAL
19935: IFFALSE 19951
// begin wait ( 3 ) ;
19937: LD_INT 3
19939: PPUSH
19940: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19944: LD_STRING ACH_BASEDESTROYER
19946: PPUSH
19947: CALL_OW 543
// end ; m1 := false ;
19951: LD_ADDR_VAR 0 4
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// m2 := false ;
19959: LD_ADDR_VAR 0 5
19963: PUSH
19964: LD_INT 0
19966: ST_TO_ADDR
// m3 := false ;
19967: LD_ADDR_VAR 0 6
19971: PUSH
19972: LD_INT 0
19974: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19975: LD_VAR 0 1
19979: PUSH
19980: LD_INT 100
19982: PUSH
19983: LD_INT 140
19985: PUSH
19986: LD_INT 180
19988: PUSH
19989: LD_INT 220
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: PUSH
19998: LD_OWVAR 67
20002: ARRAY
20003: PLUS
20004: PUSH
20005: LD_VAR 0 2
20009: GREATER
20010: IFFALSE 20042
// begin AddMedal ( cans , 1 ) ;
20012: LD_STRING cans
20014: PPUSH
20015: LD_INT 1
20017: PPUSH
20018: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20022: LD_INT 1
20024: PPUSH
20025: LD_STRING 06_crates_1
20027: PPUSH
20028: CALL_OW 39
// m1 := true ;
20032: LD_ADDR_VAR 0 4
20036: PUSH
20037: LD_INT 1
20039: ST_TO_ADDR
// end else
20040: GO 20063
// begin AddMedal ( cans , - 1 ) ;
20042: LD_STRING cans
20044: PPUSH
20045: LD_INT 1
20047: NEG
20048: PPUSH
20049: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20053: LD_INT 0
20055: PPUSH
20056: LD_STRING 06_crates_1
20058: PPUSH
20059: CALL_OW 39
// end ; if unitLost < 3 then
20063: LD_EXP 31
20067: PUSH
20068: LD_INT 3
20070: LESS
20071: IFFALSE 20093
// begin AddMedal ( people , 1 ) ;
20073: LD_STRING people
20075: PPUSH
20076: LD_INT 1
20078: PPUSH
20079: CALL_OW 101
// m2 := true ;
20083: LD_ADDR_VAR 0 5
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// end else
20091: GO 20104
// AddMedal ( people , - 1 ) ;
20093: LD_STRING people
20095: PPUSH
20096: LD_INT 1
20098: NEG
20099: PPUSH
20100: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20104: LD_EXP 29
20108: PPUSH
20109: LD_STRING 06_remoteVehs_1
20111: PPUSH
20112: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20116: LD_EXP 29
20120: PUSH
20121: LD_INT 1
20123: EQUAL
20124: IFFALSE 20146
// begin AddMedal ( remote , 1 ) ;
20126: LD_STRING remote
20128: PPUSH
20129: LD_INT 1
20131: PPUSH
20132: CALL_OW 101
// m3 := true ;
20136: LD_ADDR_VAR 0 6
20140: PUSH
20141: LD_INT 1
20143: ST_TO_ADDR
// end else
20144: GO 20186
// begin if GetTech ( 18 , 1 ) = state_enabled then
20146: LD_INT 18
20148: PPUSH
20149: LD_INT 1
20151: PPUSH
20152: CALL_OW 321
20156: PUSH
20157: LD_INT 1
20159: EQUAL
20160: IFFALSE 20175
// AddMedal ( remote , - 1 ) else
20162: LD_STRING remote
20164: PPUSH
20165: LD_INT 1
20167: NEG
20168: PPUSH
20169: CALL_OW 101
20173: GO 20186
// AddMedal ( remote , - 2 ) ;
20175: LD_STRING remote
20177: PPUSH
20178: LD_INT 2
20180: NEG
20181: PPUSH
20182: CALL_OW 101
// end ; if m1 and m2 and m3 then
20186: LD_VAR 0 4
20190: PUSH
20191: LD_VAR 0 5
20195: AND
20196: PUSH
20197: LD_VAR 0 6
20201: AND
20202: IFFALSE 20218
// begin wait ( 3 ) ;
20204: LD_INT 3
20206: PPUSH
20207: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
20211: LD_STRING ACH_ASPEED_6
20213: PPUSH
20214: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
20218: LD_OWVAR 67
20222: PUSH
20223: LD_INT 3
20225: GREATEREQUAL
20226: PUSH
20227: LD_VAR 0 4
20231: AND
20232: PUSH
20233: LD_VAR 0 5
20237: AND
20238: PUSH
20239: LD_VAR 0 6
20243: AND
20244: IFFALSE 20256
// SetAchievementEX ( ACH_AMER , 6 ) ;
20246: LD_STRING ACH_AMER
20248: PPUSH
20249: LD_INT 6
20251: PPUSH
20252: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
20256: LD_EXP 21
20260: PPUSH
20261: LD_STRING 06_KurtStatus_1
20263: PPUSH
20264: CALL_OW 39
// GiveMedals ( Main ) ;
20268: LD_STRING Main
20270: PPUSH
20271: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20275: LD_INT 22
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 21
20287: PUSH
20288: LD_INT 1
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 50
20297: PUSH
20298: EMPTY
20299: LIST
20300: PUSH
20301: LD_INT 2
20303: PUSH
20304: LD_INT 25
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 25
20316: PUSH
20317: LD_INT 2
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 25
20326: PUSH
20327: LD_INT 3
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 25
20336: PUSH
20337: LD_INT 4
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: PPUSH
20357: CALL_OW 69
20361: PPUSH
20362: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20366: LD_EXP 1
20370: PPUSH
20371: LD_EXP 43
20375: PUSH
20376: LD_STRING JMM
20378: STR
20379: PPUSH
20380: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20384: LD_EXP 2
20388: PPUSH
20389: LD_EXP 43
20393: PUSH
20394: LD_STRING Lisa
20396: STR
20397: PPUSH
20398: CALL 7646 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20402: LD_EXP 3
20406: PPUSH
20407: LD_EXP 43
20411: PUSH
20412: LD_STRING Bobby
20414: STR
20415: PPUSH
20416: CALL 7646 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20420: LD_EXP 4
20424: PPUSH
20425: LD_EXP 43
20429: PUSH
20430: LD_STRING Cyrus
20432: STR
20433: PPUSH
20434: CALL 7646 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20438: LD_EXP 5
20442: PPUSH
20443: LD_EXP 43
20447: PUSH
20448: LD_STRING Frank
20450: STR
20451: PPUSH
20452: CALL 7646 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20456: LD_EXP 6
20460: PPUSH
20461: LD_EXP 43
20465: PUSH
20466: LD_STRING Brown
20468: STR
20469: PPUSH
20470: CALL 7646 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20474: LD_EXP 7
20478: PPUSH
20479: LD_EXP 43
20483: PUSH
20484: LD_STRING Donaldson
20486: STR
20487: PPUSH
20488: CALL 7646 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20492: LD_EXP 8
20496: PPUSH
20497: LD_EXP 43
20501: PUSH
20502: LD_STRING Gladstone
20504: STR
20505: PPUSH
20506: CALL 7646 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20510: LD_EXP 9
20514: PPUSH
20515: LD_EXP 43
20519: PUSH
20520: LD_STRING Denis
20522: STR
20523: PPUSH
20524: CALL 7646 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20528: LD_EXP 16
20532: PPUSH
20533: LD_EXP 43
20537: PUSH
20538: LD_STRING Joan
20540: STR
20541: PPUSH
20542: CALL 7646 0 2
// if IsLive ( Mike ) then
20546: LD_EXP 11
20550: PPUSH
20551: CALL_OW 300
20555: IFFALSE 20575
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20557: LD_EXP 11
20561: PPUSH
20562: LD_EXP 43
20566: PUSH
20567: LD_STRING Mike
20569: STR
20570: PPUSH
20571: CALL_OW 38
// if IsLive ( Joan ) then
20575: LD_EXP 16
20579: PPUSH
20580: CALL_OW 300
20584: IFFALSE 20598
// SaveCharacters ( Joan , Joan ) ;
20586: LD_EXP 16
20590: PPUSH
20591: LD_STRING Joan
20593: PPUSH
20594: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20598: LD_EXP 17
20602: PPUSH
20603: LD_STRING 06_JoanStatus_1
20605: PPUSH
20606: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20610: LD_INT 50
20612: PUSH
20613: EMPTY
20614: LIST
20615: PUSH
20616: LD_INT 22
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 21
20628: PUSH
20629: LD_INT 1
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 2
20638: PUSH
20639: LD_INT 25
20641: PUSH
20642: LD_INT 1
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 25
20651: PUSH
20652: LD_INT 2
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 25
20661: PUSH
20662: LD_INT 3
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 25
20671: PUSH
20672: LD_INT 4
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: PPUSH
20692: CALL_OW 69
20696: PUSH
20697: LD_EXP 1
20701: PUSH
20702: LD_EXP 2
20706: PUSH
20707: LD_EXP 3
20711: PUSH
20712: LD_EXP 4
20716: PUSH
20717: LD_EXP 5
20721: PUSH
20722: LD_EXP 6
20726: PUSH
20727: LD_EXP 7
20731: PUSH
20732: LD_EXP 8
20736: PUSH
20737: LD_EXP 9
20741: PUSH
20742: LD_EXP 16
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: DIFF
20759: PPUSH
20760: LD_STRING 06_other_survivors
20762: PPUSH
20763: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20767: LD_INT 50
20769: PUSH
20770: EMPTY
20771: LIST
20772: PUSH
20773: LD_INT 22
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 21
20785: PUSH
20786: LD_INT 1
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 2
20795: PUSH
20796: LD_INT 25
20798: PUSH
20799: LD_INT 12
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 25
20808: PUSH
20809: LD_INT 16
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: LIST
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: PPUSH
20827: CALL_OW 69
20831: PPUSH
20832: LD_STRING 06_other_apemans
20834: PPUSH
20835: CALL_OW 38
// YouWin ;
20839: CALL_OW 103
// end ; end_of_file
20843: LD_VAR 0 3
20847: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
20848: LD_EXP 48
20852: PUSH
20853: LD_OWVAR 1
20857: PUSH
20858: LD_INT 23100
20860: PUSH
20861: LD_INT 21000
20863: PUSH
20864: LD_INT 18900
20866: PUSH
20867: LD_INT 16800
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: PUSH
20876: LD_OWVAR 67
20880: ARRAY
20881: GREATER
20882: AND
20883: IFFALSE 21230
20885: GO 20887
20887: DISABLE
20888: LD_INT 0
20890: PPUSH
20891: PPUSH
20892: PPUSH
20893: PPUSH
// begin enable ;
20894: ENABLE
// for i in ruAttackers do
20895: LD_ADDR_VAR 0 1
20899: PUSH
20900: LD_EXP 48
20904: PUSH
20905: FOR_IN
20906: IFFALSE 21228
// begin if not IsDrivenBy ( i ) then
20908: LD_VAR 0 1
20912: PPUSH
20913: CALL_OW 311
20917: NOT
20918: IFFALSE 20922
// continue ;
20920: GO 20905
// if i mod 2 = 0 then
20922: LD_VAR 0 1
20926: PUSH
20927: LD_INT 2
20929: MOD
20930: PUSH
20931: LD_INT 0
20933: EQUAL
20934: IFFALSE 20989
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20936: LD_ADDR_VAR 0 3
20940: PUSH
20941: LD_INT 91
20943: PUSH
20944: LD_INT 52
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 82
20953: PUSH
20954: LD_INT 34
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 90
20963: PUSH
20964: LD_INT 26
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 86
20973: PUSH
20974: LD_INT 16
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: ST_TO_ADDR
20987: GO 21084
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20989: LD_ADDR_VAR 0 3
20993: PUSH
20994: LD_INT 91
20996: PUSH
20997: LD_INT 52
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 68
21006: PUSH
21007: LD_INT 46
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 48
21016: PUSH
21017: LD_INT 43
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 44
21026: PUSH
21027: LD_INT 42
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 33
21036: PUSH
21037: LD_INT 34
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 29
21046: PUSH
21047: LD_INT 23
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 30
21056: PUSH
21057: LD_INT 19
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 38
21066: PUSH
21067: LD_INT 16
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
21084: LD_VAR 0 1
21088: PPUSH
21089: CALL_OW 256
21093: PUSH
21094: LD_INT 1000
21096: EQUAL
21097: IFFALSE 21115
// AgressiveMove ( i , path ) else
21099: LD_VAR 0 1
21103: PPUSH
21104: LD_VAR 0 3
21108: PPUSH
21109: CALL 83714 0 2
21113: GO 21226
// if GetLives ( i ) < 650 then
21115: LD_VAR 0 1
21119: PPUSH
21120: CALL_OW 256
21124: PUSH
21125: LD_INT 650
21127: LESS
21128: IFFALSE 21226
// begin if not IsInArea ( i , russianRepairArea ) then
21130: LD_VAR 0 1
21134: PPUSH
21135: LD_INT 12
21137: PPUSH
21138: CALL_OW 308
21142: NOT
21143: IFFALSE 21212
// begin SetTag ( i , 0 ) ;
21145: LD_VAR 0 1
21149: PPUSH
21150: LD_INT 0
21152: PPUSH
21153: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
21157: LD_VAR 0 1
21161: PPUSH
21162: CALL_OW 261
21166: PUSH
21167: LD_INT 50
21169: LESS
21170: PUSH
21171: LD_INT 21
21173: PPUSH
21174: CALL_OW 302
21178: AND
21179: IFFALSE 21195
// ComMoveUnit ( i , rufab ) else
21181: LD_VAR 0 1
21185: PPUSH
21186: LD_INT 21
21188: PPUSH
21189: CALL_OW 112
21193: GO 21210
// ComMoveXY ( i , 121 , 99 ) ;
21195: LD_VAR 0 1
21199: PPUSH
21200: LD_INT 121
21202: PPUSH
21203: LD_INT 99
21205: PPUSH
21206: CALL_OW 111
// end else
21210: GO 21226
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
21212: LD_VAR 0 1
21216: PPUSH
21217: CALL_OW 311
21221: PPUSH
21222: CALL 82804 0 1
// end ; end ;
21226: GO 20905
21228: POP
21229: POP
// end ;
21230: PPOPN 4
21232: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
21233: LD_INT 0
21235: PPUSH
21236: PPUSH
21237: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
21238: LD_ADDR_VAR 0 2
21242: PUSH
21243: DOUBLE
21244: LD_INT 1
21246: DEC
21247: ST_TO_ADDR
21248: LD_INT 4
21250: PUSH
21251: LD_INT 5
21253: PUSH
21254: LD_INT 6
21256: PUSH
21257: LD_INT 6
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: PUSH
21266: LD_OWVAR 67
21270: ARRAY
21271: PUSH
21272: FOR_TO
21273: IFFALSE 21448
// begin uc_side := 3 ;
21275: LD_ADDR_OWVAR 20
21279: PUSH
21280: LD_INT 3
21282: ST_TO_ADDR
// uc_nation := 3 ;
21283: LD_ADDR_OWVAR 21
21287: PUSH
21288: LD_INT 3
21290: ST_TO_ADDR
// InitHC_All ( ) ;
21291: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
21295: LD_INT 0
21297: PPUSH
21298: LD_INT 4
21300: PUSH
21301: LD_INT 5
21303: PUSH
21304: LD_INT 6
21306: PUSH
21307: LD_INT 6
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: PUSH
21316: LD_OWVAR 67
21320: ARRAY
21321: PPUSH
21322: CALL_OW 381
// un := CreateHuman ;
21326: LD_ADDR_VAR 0 3
21330: PUSH
21331: CALL_OW 44
21335: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
21336: LD_VAR 0 3
21340: PPUSH
21341: LD_INT 127
21343: PPUSH
21344: LD_INT 62
21346: PPUSH
21347: LD_INT 3
21349: PPUSH
21350: LD_INT 0
21352: PPUSH
21353: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
21357: LD_ADDR_EXP 49
21361: PUSH
21362: LD_EXP 49
21366: PPUSH
21367: LD_EXP 49
21371: PUSH
21372: LD_INT 1
21374: PLUS
21375: PPUSH
21376: LD_VAR 0 3
21380: PPUSH
21381: CALL_OW 1
21385: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
21386: LD_VAR 0 3
21390: PPUSH
21391: LD_INT 83
21393: PPUSH
21394: LD_INT 49
21396: PPUSH
21397: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
21401: LD_VAR 0 3
21405: PPUSH
21406: LD_INT 49
21408: PPUSH
21409: LD_INT 43
21411: PPUSH
21412: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
21416: LD_VAR 0 3
21420: PPUSH
21421: LD_INT 31
21423: PPUSH
21424: LD_INT 15
21426: PPUSH
21427: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
21431: LD_VAR 0 3
21435: PPUSH
21436: LD_INT 63
21438: PPUSH
21439: LD_INT 9
21441: PPUSH
21442: CALL_OW 174
// end ;
21446: GO 21272
21448: POP
21449: POP
// end ; end_of_file
21450: LD_VAR 0 1
21454: RET
// export function CreateNature ; var i , un ; begin
21455: LD_INT 0
21457: PPUSH
21458: PPUSH
21459: PPUSH
// for i := 1 to Difficulty + 2 do
21460: LD_ADDR_VAR 0 2
21464: PUSH
21465: DOUBLE
21466: LD_INT 1
21468: DEC
21469: ST_TO_ADDR
21470: LD_OWVAR 67
21474: PUSH
21475: LD_INT 2
21477: PLUS
21478: PUSH
21479: FOR_TO
21480: IFFALSE 21589
// begin hc_sex := sex_male ;
21482: LD_ADDR_OWVAR 27
21486: PUSH
21487: LD_INT 1
21489: ST_TO_ADDR
// uc_side := 0 ;
21490: LD_ADDR_OWVAR 20
21494: PUSH
21495: LD_INT 0
21497: ST_TO_ADDR
// uc_nation := nation_nature ;
21498: LD_ADDR_OWVAR 21
21502: PUSH
21503: LD_INT 0
21505: ST_TO_ADDR
// hc_class := class_tiger ;
21506: LD_ADDR_OWVAR 28
21510: PUSH
21511: LD_INT 14
21513: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21514: LD_ADDR_OWVAR 31
21518: PUSH
21519: LD_EXP 36
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21539: LD_ADDR_OWVAR 35
21543: PUSH
21544: LD_INT 5
21546: NEG
21547: PPUSH
21548: LD_INT 5
21550: PPUSH
21551: CALL_OW 12
21555: PUSH
21556: LD_OWVAR 67
21560: MUL
21561: ST_TO_ADDR
// un := CreateHuman ;
21562: LD_ADDR_VAR 0 3
21566: PUSH
21567: CALL_OW 44
21571: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21572: LD_VAR 0 3
21576: PPUSH
21577: LD_INT 18
21579: PPUSH
21580: LD_INT 0
21582: PPUSH
21583: CALL_OW 49
// end ;
21587: GO 21479
21589: POP
21590: POP
// for i = 1 to rand ( 3 , 4 ) do
21591: LD_ADDR_VAR 0 2
21595: PUSH
21596: DOUBLE
21597: LD_INT 1
21599: DEC
21600: ST_TO_ADDR
21601: LD_INT 3
21603: PPUSH
21604: LD_INT 4
21606: PPUSH
21607: CALL_OW 12
21611: PUSH
21612: FOR_TO
21613: IFFALSE 21683
// begin hc_class := class_phororhacos ;
21615: LD_ADDR_OWVAR 28
21619: PUSH
21620: LD_INT 18
21622: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21623: LD_ADDR_OWVAR 31
21627: PUSH
21628: LD_EXP 36
21632: PUSH
21633: LD_INT 0
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: ST_TO_ADDR
// hc_agressivity := 0 ;
21648: LD_ADDR_OWVAR 35
21652: PUSH
21653: LD_INT 0
21655: ST_TO_ADDR
// un = CreateHuman ;
21656: LD_ADDR_VAR 0 3
21660: PUSH
21661: CALL_OW 44
21665: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21666: LD_VAR 0 3
21670: PPUSH
21671: LD_INT 18
21673: PPUSH
21674: LD_INT 0
21676: PPUSH
21677: CALL_OW 49
// end ;
21681: GO 21612
21683: POP
21684: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21685: LD_ADDR_VAR 0 2
21689: PUSH
21690: DOUBLE
21691: LD_INT 1
21693: DEC
21694: ST_TO_ADDR
21695: LD_INT 3
21697: PUSH
21698: LD_INT 3
21700: PUSH
21701: LD_INT 4
21703: PUSH
21704: LD_INT 5
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: PUSH
21713: LD_OWVAR 67
21717: ARRAY
21718: PUSH
21719: FOR_TO
21720: IFFALSE 21861
// begin hc_class := class_apeman ;
21722: LD_ADDR_OWVAR 28
21726: PUSH
21727: LD_INT 12
21729: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21730: LD_ADDR_OWVAR 31
21734: PUSH
21735: LD_INT 2
21737: PPUSH
21738: LD_INT 5
21740: PPUSH
21741: CALL_OW 12
21745: PUSH
21746: LD_INT 0
21748: PPUSH
21749: LD_INT 2
21751: PPUSH
21752: CALL_OW 12
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 0
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21769: LD_ADDR_OWVAR 35
21773: PUSH
21774: LD_INT 5
21776: NEG
21777: PPUSH
21778: LD_INT 10
21780: PPUSH
21781: CALL_OW 12
21785: PUSH
21786: LD_INT 10
21788: NEG
21789: PPUSH
21790: LD_INT 20
21792: PPUSH
21793: CALL_OW 12
21797: PUSH
21798: LD_INT 20
21800: NEG
21801: PPUSH
21802: LD_INT 25
21804: PPUSH
21805: CALL_OW 12
21809: PUSH
21810: LD_INT 30
21812: NEG
21813: PPUSH
21814: LD_INT 30
21816: PPUSH
21817: CALL_OW 12
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: PUSH
21828: LD_OWVAR 67
21832: ARRAY
21833: ST_TO_ADDR
// un := CreateHuman ;
21834: LD_ADDR_VAR 0 3
21838: PUSH
21839: CALL_OW 44
21843: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21844: LD_VAR 0 3
21848: PPUSH
21849: LD_INT 19
21851: PPUSH
21852: LD_INT 0
21854: PPUSH
21855: CALL_OW 49
// end ;
21859: GO 21719
21861: POP
21862: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
21863: LD_ADDR_VAR 0 2
21867: PUSH
21868: DOUBLE
21869: LD_INT 1
21871: DEC
21872: ST_TO_ADDR
21873: LD_INT 3
21875: PUSH
21876: LD_INT 4
21878: PUSH
21879: LD_INT 5
21881: PUSH
21882: LD_INT 6
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: PUSH
21891: LD_OWVAR 67
21895: ARRAY
21896: PUSH
21897: FOR_TO
21898: IFFALSE 21991
// begin hc_class := class_apeman ;
21900: LD_ADDR_OWVAR 28
21904: PUSH
21905: LD_INT 12
21907: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21908: LD_ADDR_OWVAR 31
21912: PUSH
21913: LD_INT 2
21915: PPUSH
21916: LD_INT 5
21918: PPUSH
21919: CALL_OW 12
21923: PUSH
21924: LD_INT 0
21926: PPUSH
21927: LD_INT 2
21929: PPUSH
21930: CALL_OW 12
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21947: LD_ADDR_OWVAR 35
21951: PUSH
21952: LD_INT 15
21954: NEG
21955: PPUSH
21956: LD_INT 15
21958: PPUSH
21959: CALL_OW 12
21963: ST_TO_ADDR
// un = CreateHuman ;
21964: LD_ADDR_VAR 0 3
21968: PUSH
21969: CALL_OW 44
21973: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21974: LD_VAR 0 3
21978: PPUSH
21979: LD_INT 20
21981: PPUSH
21982: LD_INT 0
21984: PPUSH
21985: CALL_OW 49
// end ;
21989: GO 21897
21991: POP
21992: POP
// end ; end_of_file end_of_file
21993: LD_VAR 0 1
21997: RET
// export globalGameSaveCounter ; every 0 0$1 do
21998: GO 22000
22000: DISABLE
// begin enable ;
22001: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
22002: LD_STRING updateTimer(
22004: PUSH
22005: LD_OWVAR 1
22009: STR
22010: PUSH
22011: LD_STRING );
22013: STR
22014: PPUSH
22015: CALL_OW 559
// end ;
22019: END
// every 0 0$1 do
22020: GO 22022
22022: DISABLE
// begin globalGameSaveCounter := 0 ;
22023: LD_ADDR_EXP 50
22027: PUSH
22028: LD_INT 0
22030: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
22031: LD_STRING setGameSaveCounter(0)
22033: PPUSH
22034: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
22038: LD_STRING initStreamRollete();
22040: PPUSH
22041: CALL_OW 559
// InitStreamMode ;
22045: CALL 23388 0 0
// DefineStreamItems ( false ) ;
22049: LD_INT 0
22051: PPUSH
22052: CALL 23852 0 1
// end ;
22056: END
// export function SOS_MapStart ( ) ; begin
22057: LD_INT 0
22059: PPUSH
// if streamModeActive then
22060: LD_EXP 51
22064: IFFALSE 22073
// DefineStreamItems ( true ) ;
22066: LD_INT 1
22068: PPUSH
22069: CALL 23852 0 1
// UpdateLuaVariables ( ) ;
22073: CALL 22090 0 0
// UpdateFactoryWaypoints ( ) ;
22077: CALL 36854 0 0
// UpdateWarehouseGatheringPoints ( ) ;
22081: CALL 37106 0 0
// end ;
22085: LD_VAR 0 1
22089: RET
// function UpdateLuaVariables ( ) ; begin
22090: LD_INT 0
22092: PPUSH
// if globalGameSaveCounter then
22093: LD_EXP 50
22097: IFFALSE 22131
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
22099: LD_ADDR_EXP 50
22103: PUSH
22104: LD_EXP 50
22108: PPUSH
22109: CALL 82465 0 1
22113: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22114: LD_STRING setGameSaveCounter(
22116: PUSH
22117: LD_EXP 50
22121: STR
22122: PUSH
22123: LD_STRING )
22125: STR
22126: PPUSH
22127: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
22131: LD_STRING setGameDifficulty(
22133: PUSH
22134: LD_OWVAR 67
22138: STR
22139: PUSH
22140: LD_STRING )
22142: STR
22143: PPUSH
22144: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
22148: LD_STRING displayDifficulty(
22150: PUSH
22151: LD_OWVAR 67
22155: STR
22156: PUSH
22157: LD_STRING )
22159: STR
22160: PPUSH
22161: CALL_OW 559
// end ;
22165: LD_VAR 0 1
22169: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22170: LD_INT 0
22172: PPUSH
// if p2 = stream_mode then
22173: LD_VAR 0 2
22177: PUSH
22178: LD_INT 100
22180: EQUAL
22181: IFFALSE 23184
// begin if not StreamModeActive then
22183: LD_EXP 51
22187: NOT
22188: IFFALSE 22198
// StreamModeActive := true ;
22190: LD_ADDR_EXP 51
22194: PUSH
22195: LD_INT 1
22197: ST_TO_ADDR
// if p3 = 0 then
22198: LD_VAR 0 3
22202: PUSH
22203: LD_INT 0
22205: EQUAL
22206: IFFALSE 22212
// InitStreamMode ;
22208: CALL 23388 0 0
// if p3 = 1 then
22212: LD_VAR 0 3
22216: PUSH
22217: LD_INT 1
22219: EQUAL
22220: IFFALSE 22230
// sRocket := true ;
22222: LD_ADDR_EXP 56
22226: PUSH
22227: LD_INT 1
22229: ST_TO_ADDR
// if p3 = 2 then
22230: LD_VAR 0 3
22234: PUSH
22235: LD_INT 2
22237: EQUAL
22238: IFFALSE 22248
// sSpeed := true ;
22240: LD_ADDR_EXP 55
22244: PUSH
22245: LD_INT 1
22247: ST_TO_ADDR
// if p3 = 3 then
22248: LD_VAR 0 3
22252: PUSH
22253: LD_INT 3
22255: EQUAL
22256: IFFALSE 22266
// sEngine := true ;
22258: LD_ADDR_EXP 57
22262: PUSH
22263: LD_INT 1
22265: ST_TO_ADDR
// if p3 = 4 then
22266: LD_VAR 0 3
22270: PUSH
22271: LD_INT 4
22273: EQUAL
22274: IFFALSE 22284
// sSpec := true ;
22276: LD_ADDR_EXP 54
22280: PUSH
22281: LD_INT 1
22283: ST_TO_ADDR
// if p3 = 5 then
22284: LD_VAR 0 3
22288: PUSH
22289: LD_INT 5
22291: EQUAL
22292: IFFALSE 22302
// sLevel := true ;
22294: LD_ADDR_EXP 58
22298: PUSH
22299: LD_INT 1
22301: ST_TO_ADDR
// if p3 = 6 then
22302: LD_VAR 0 3
22306: PUSH
22307: LD_INT 6
22309: EQUAL
22310: IFFALSE 22320
// sArmoury := true ;
22312: LD_ADDR_EXP 59
22316: PUSH
22317: LD_INT 1
22319: ST_TO_ADDR
// if p3 = 7 then
22320: LD_VAR 0 3
22324: PUSH
22325: LD_INT 7
22327: EQUAL
22328: IFFALSE 22338
// sRadar := true ;
22330: LD_ADDR_EXP 60
22334: PUSH
22335: LD_INT 1
22337: ST_TO_ADDR
// if p3 = 8 then
22338: LD_VAR 0 3
22342: PUSH
22343: LD_INT 8
22345: EQUAL
22346: IFFALSE 22356
// sBunker := true ;
22348: LD_ADDR_EXP 61
22352: PUSH
22353: LD_INT 1
22355: ST_TO_ADDR
// if p3 = 9 then
22356: LD_VAR 0 3
22360: PUSH
22361: LD_INT 9
22363: EQUAL
22364: IFFALSE 22374
// sHack := true ;
22366: LD_ADDR_EXP 62
22370: PUSH
22371: LD_INT 1
22373: ST_TO_ADDR
// if p3 = 10 then
22374: LD_VAR 0 3
22378: PUSH
22379: LD_INT 10
22381: EQUAL
22382: IFFALSE 22392
// sFire := true ;
22384: LD_ADDR_EXP 63
22388: PUSH
22389: LD_INT 1
22391: ST_TO_ADDR
// if p3 = 11 then
22392: LD_VAR 0 3
22396: PUSH
22397: LD_INT 11
22399: EQUAL
22400: IFFALSE 22410
// sRefresh := true ;
22402: LD_ADDR_EXP 64
22406: PUSH
22407: LD_INT 1
22409: ST_TO_ADDR
// if p3 = 12 then
22410: LD_VAR 0 3
22414: PUSH
22415: LD_INT 12
22417: EQUAL
22418: IFFALSE 22428
// sExp := true ;
22420: LD_ADDR_EXP 65
22424: PUSH
22425: LD_INT 1
22427: ST_TO_ADDR
// if p3 = 13 then
22428: LD_VAR 0 3
22432: PUSH
22433: LD_INT 13
22435: EQUAL
22436: IFFALSE 22446
// sDepot := true ;
22438: LD_ADDR_EXP 66
22442: PUSH
22443: LD_INT 1
22445: ST_TO_ADDR
// if p3 = 14 then
22446: LD_VAR 0 3
22450: PUSH
22451: LD_INT 14
22453: EQUAL
22454: IFFALSE 22464
// sFlag := true ;
22456: LD_ADDR_EXP 67
22460: PUSH
22461: LD_INT 1
22463: ST_TO_ADDR
// if p3 = 15 then
22464: LD_VAR 0 3
22468: PUSH
22469: LD_INT 15
22471: EQUAL
22472: IFFALSE 22482
// sKamikadze := true ;
22474: LD_ADDR_EXP 75
22478: PUSH
22479: LD_INT 1
22481: ST_TO_ADDR
// if p3 = 16 then
22482: LD_VAR 0 3
22486: PUSH
22487: LD_INT 16
22489: EQUAL
22490: IFFALSE 22500
// sTroll := true ;
22492: LD_ADDR_EXP 76
22496: PUSH
22497: LD_INT 1
22499: ST_TO_ADDR
// if p3 = 17 then
22500: LD_VAR 0 3
22504: PUSH
22505: LD_INT 17
22507: EQUAL
22508: IFFALSE 22518
// sSlow := true ;
22510: LD_ADDR_EXP 77
22514: PUSH
22515: LD_INT 1
22517: ST_TO_ADDR
// if p3 = 18 then
22518: LD_VAR 0 3
22522: PUSH
22523: LD_INT 18
22525: EQUAL
22526: IFFALSE 22536
// sLack := true ;
22528: LD_ADDR_EXP 78
22532: PUSH
22533: LD_INT 1
22535: ST_TO_ADDR
// if p3 = 19 then
22536: LD_VAR 0 3
22540: PUSH
22541: LD_INT 19
22543: EQUAL
22544: IFFALSE 22554
// sTank := true ;
22546: LD_ADDR_EXP 80
22550: PUSH
22551: LD_INT 1
22553: ST_TO_ADDR
// if p3 = 20 then
22554: LD_VAR 0 3
22558: PUSH
22559: LD_INT 20
22561: EQUAL
22562: IFFALSE 22572
// sRemote := true ;
22564: LD_ADDR_EXP 81
22568: PUSH
22569: LD_INT 1
22571: ST_TO_ADDR
// if p3 = 21 then
22572: LD_VAR 0 3
22576: PUSH
22577: LD_INT 21
22579: EQUAL
22580: IFFALSE 22590
// sPowell := true ;
22582: LD_ADDR_EXP 82
22586: PUSH
22587: LD_INT 1
22589: ST_TO_ADDR
// if p3 = 22 then
22590: LD_VAR 0 3
22594: PUSH
22595: LD_INT 22
22597: EQUAL
22598: IFFALSE 22608
// sTeleport := true ;
22600: LD_ADDR_EXP 85
22604: PUSH
22605: LD_INT 1
22607: ST_TO_ADDR
// if p3 = 23 then
22608: LD_VAR 0 3
22612: PUSH
22613: LD_INT 23
22615: EQUAL
22616: IFFALSE 22626
// sOilTower := true ;
22618: LD_ADDR_EXP 87
22622: PUSH
22623: LD_INT 1
22625: ST_TO_ADDR
// if p3 = 24 then
22626: LD_VAR 0 3
22630: PUSH
22631: LD_INT 24
22633: EQUAL
22634: IFFALSE 22644
// sShovel := true ;
22636: LD_ADDR_EXP 88
22640: PUSH
22641: LD_INT 1
22643: ST_TO_ADDR
// if p3 = 25 then
22644: LD_VAR 0 3
22648: PUSH
22649: LD_INT 25
22651: EQUAL
22652: IFFALSE 22662
// sSheik := true ;
22654: LD_ADDR_EXP 89
22658: PUSH
22659: LD_INT 1
22661: ST_TO_ADDR
// if p3 = 26 then
22662: LD_VAR 0 3
22666: PUSH
22667: LD_INT 26
22669: EQUAL
22670: IFFALSE 22680
// sEarthquake := true ;
22672: LD_ADDR_EXP 91
22676: PUSH
22677: LD_INT 1
22679: ST_TO_ADDR
// if p3 = 27 then
22680: LD_VAR 0 3
22684: PUSH
22685: LD_INT 27
22687: EQUAL
22688: IFFALSE 22698
// sAI := true ;
22690: LD_ADDR_EXP 92
22694: PUSH
22695: LD_INT 1
22697: ST_TO_ADDR
// if p3 = 28 then
22698: LD_VAR 0 3
22702: PUSH
22703: LD_INT 28
22705: EQUAL
22706: IFFALSE 22716
// sCargo := true ;
22708: LD_ADDR_EXP 95
22712: PUSH
22713: LD_INT 1
22715: ST_TO_ADDR
// if p3 = 29 then
22716: LD_VAR 0 3
22720: PUSH
22721: LD_INT 29
22723: EQUAL
22724: IFFALSE 22734
// sDLaser := true ;
22726: LD_ADDR_EXP 96
22730: PUSH
22731: LD_INT 1
22733: ST_TO_ADDR
// if p3 = 30 then
22734: LD_VAR 0 3
22738: PUSH
22739: LD_INT 30
22741: EQUAL
22742: IFFALSE 22752
// sExchange := true ;
22744: LD_ADDR_EXP 97
22748: PUSH
22749: LD_INT 1
22751: ST_TO_ADDR
// if p3 = 31 then
22752: LD_VAR 0 3
22756: PUSH
22757: LD_INT 31
22759: EQUAL
22760: IFFALSE 22770
// sFac := true ;
22762: LD_ADDR_EXP 98
22766: PUSH
22767: LD_INT 1
22769: ST_TO_ADDR
// if p3 = 32 then
22770: LD_VAR 0 3
22774: PUSH
22775: LD_INT 32
22777: EQUAL
22778: IFFALSE 22788
// sPower := true ;
22780: LD_ADDR_EXP 99
22784: PUSH
22785: LD_INT 1
22787: ST_TO_ADDR
// if p3 = 33 then
22788: LD_VAR 0 3
22792: PUSH
22793: LD_INT 33
22795: EQUAL
22796: IFFALSE 22806
// sRandom := true ;
22798: LD_ADDR_EXP 100
22802: PUSH
22803: LD_INT 1
22805: ST_TO_ADDR
// if p3 = 34 then
22806: LD_VAR 0 3
22810: PUSH
22811: LD_INT 34
22813: EQUAL
22814: IFFALSE 22824
// sShield := true ;
22816: LD_ADDR_EXP 101
22820: PUSH
22821: LD_INT 1
22823: ST_TO_ADDR
// if p3 = 35 then
22824: LD_VAR 0 3
22828: PUSH
22829: LD_INT 35
22831: EQUAL
22832: IFFALSE 22842
// sTime := true ;
22834: LD_ADDR_EXP 102
22838: PUSH
22839: LD_INT 1
22841: ST_TO_ADDR
// if p3 = 36 then
22842: LD_VAR 0 3
22846: PUSH
22847: LD_INT 36
22849: EQUAL
22850: IFFALSE 22860
// sTools := true ;
22852: LD_ADDR_EXP 103
22856: PUSH
22857: LD_INT 1
22859: ST_TO_ADDR
// if p3 = 101 then
22860: LD_VAR 0 3
22864: PUSH
22865: LD_INT 101
22867: EQUAL
22868: IFFALSE 22878
// sSold := true ;
22870: LD_ADDR_EXP 68
22874: PUSH
22875: LD_INT 1
22877: ST_TO_ADDR
// if p3 = 102 then
22878: LD_VAR 0 3
22882: PUSH
22883: LD_INT 102
22885: EQUAL
22886: IFFALSE 22896
// sDiff := true ;
22888: LD_ADDR_EXP 69
22892: PUSH
22893: LD_INT 1
22895: ST_TO_ADDR
// if p3 = 103 then
22896: LD_VAR 0 3
22900: PUSH
22901: LD_INT 103
22903: EQUAL
22904: IFFALSE 22914
// sFog := true ;
22906: LD_ADDR_EXP 72
22910: PUSH
22911: LD_INT 1
22913: ST_TO_ADDR
// if p3 = 104 then
22914: LD_VAR 0 3
22918: PUSH
22919: LD_INT 104
22921: EQUAL
22922: IFFALSE 22932
// sReset := true ;
22924: LD_ADDR_EXP 73
22928: PUSH
22929: LD_INT 1
22931: ST_TO_ADDR
// if p3 = 105 then
22932: LD_VAR 0 3
22936: PUSH
22937: LD_INT 105
22939: EQUAL
22940: IFFALSE 22950
// sSun := true ;
22942: LD_ADDR_EXP 74
22946: PUSH
22947: LD_INT 1
22949: ST_TO_ADDR
// if p3 = 106 then
22950: LD_VAR 0 3
22954: PUSH
22955: LD_INT 106
22957: EQUAL
22958: IFFALSE 22968
// sTiger := true ;
22960: LD_ADDR_EXP 70
22964: PUSH
22965: LD_INT 1
22967: ST_TO_ADDR
// if p3 = 107 then
22968: LD_VAR 0 3
22972: PUSH
22973: LD_INT 107
22975: EQUAL
22976: IFFALSE 22986
// sBomb := true ;
22978: LD_ADDR_EXP 71
22982: PUSH
22983: LD_INT 1
22985: ST_TO_ADDR
// if p3 = 108 then
22986: LD_VAR 0 3
22990: PUSH
22991: LD_INT 108
22993: EQUAL
22994: IFFALSE 23004
// sWound := true ;
22996: LD_ADDR_EXP 79
23000: PUSH
23001: LD_INT 1
23003: ST_TO_ADDR
// if p3 = 109 then
23004: LD_VAR 0 3
23008: PUSH
23009: LD_INT 109
23011: EQUAL
23012: IFFALSE 23022
// sBetray := true ;
23014: LD_ADDR_EXP 83
23018: PUSH
23019: LD_INT 1
23021: ST_TO_ADDR
// if p3 = 110 then
23022: LD_VAR 0 3
23026: PUSH
23027: LD_INT 110
23029: EQUAL
23030: IFFALSE 23040
// sContamin := true ;
23032: LD_ADDR_EXP 84
23036: PUSH
23037: LD_INT 1
23039: ST_TO_ADDR
// if p3 = 111 then
23040: LD_VAR 0 3
23044: PUSH
23045: LD_INT 111
23047: EQUAL
23048: IFFALSE 23058
// sOil := true ;
23050: LD_ADDR_EXP 86
23054: PUSH
23055: LD_INT 1
23057: ST_TO_ADDR
// if p3 = 112 then
23058: LD_VAR 0 3
23062: PUSH
23063: LD_INT 112
23065: EQUAL
23066: IFFALSE 23076
// sStu := true ;
23068: LD_ADDR_EXP 90
23072: PUSH
23073: LD_INT 1
23075: ST_TO_ADDR
// if p3 = 113 then
23076: LD_VAR 0 3
23080: PUSH
23081: LD_INT 113
23083: EQUAL
23084: IFFALSE 23094
// sBazooka := true ;
23086: LD_ADDR_EXP 93
23090: PUSH
23091: LD_INT 1
23093: ST_TO_ADDR
// if p3 = 114 then
23094: LD_VAR 0 3
23098: PUSH
23099: LD_INT 114
23101: EQUAL
23102: IFFALSE 23112
// sMortar := true ;
23104: LD_ADDR_EXP 94
23108: PUSH
23109: LD_INT 1
23111: ST_TO_ADDR
// if p3 = 115 then
23112: LD_VAR 0 3
23116: PUSH
23117: LD_INT 115
23119: EQUAL
23120: IFFALSE 23130
// sRanger := true ;
23122: LD_ADDR_EXP 104
23126: PUSH
23127: LD_INT 1
23129: ST_TO_ADDR
// if p3 = 116 then
23130: LD_VAR 0 3
23134: PUSH
23135: LD_INT 116
23137: EQUAL
23138: IFFALSE 23148
// sComputer := true ;
23140: LD_ADDR_EXP 105
23144: PUSH
23145: LD_INT 1
23147: ST_TO_ADDR
// if p3 = 117 then
23148: LD_VAR 0 3
23152: PUSH
23153: LD_INT 117
23155: EQUAL
23156: IFFALSE 23166
// s30 := true ;
23158: LD_ADDR_EXP 106
23162: PUSH
23163: LD_INT 1
23165: ST_TO_ADDR
// if p3 = 118 then
23166: LD_VAR 0 3
23170: PUSH
23171: LD_INT 118
23173: EQUAL
23174: IFFALSE 23184
// s60 := true ;
23176: LD_ADDR_EXP 107
23180: PUSH
23181: LD_INT 1
23183: ST_TO_ADDR
// end ; if p2 = hack_mode then
23184: LD_VAR 0 2
23188: PUSH
23189: LD_INT 101
23191: EQUAL
23192: IFFALSE 23320
// begin case p3 of 1 :
23194: LD_VAR 0 3
23198: PUSH
23199: LD_INT 1
23201: DOUBLE
23202: EQUAL
23203: IFTRUE 23207
23205: GO 23214
23207: POP
// hHackUnlimitedResources ; 2 :
23208: CALL 35467 0 0
23212: GO 23320
23214: LD_INT 2
23216: DOUBLE
23217: EQUAL
23218: IFTRUE 23222
23220: GO 23229
23222: POP
// hHackSetLevel10 ; 3 :
23223: CALL 35600 0 0
23227: GO 23320
23229: LD_INT 3
23231: DOUBLE
23232: EQUAL
23233: IFTRUE 23237
23235: GO 23244
23237: POP
// hHackSetLevel10YourUnits ; 4 :
23238: CALL 35685 0 0
23242: GO 23320
23244: LD_INT 4
23246: DOUBLE
23247: EQUAL
23248: IFTRUE 23252
23250: GO 23259
23252: POP
// hHackInvincible ; 5 :
23253: CALL 36133 0 0
23257: GO 23320
23259: LD_INT 5
23261: DOUBLE
23262: EQUAL
23263: IFTRUE 23267
23265: GO 23274
23267: POP
// hHackInvisible ; 6 :
23268: CALL 36244 0 0
23272: GO 23320
23274: LD_INT 6
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23289
23282: POP
// hHackChangeYourSide ; 7 :
23283: CALL 36301 0 0
23287: GO 23320
23289: LD_INT 7
23291: DOUBLE
23292: EQUAL
23293: IFTRUE 23297
23295: GO 23304
23297: POP
// hHackChangeUnitSide ; 8 :
23298: CALL 36343 0 0
23302: GO 23320
23304: LD_INT 8
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23312
23310: GO 23319
23312: POP
// hHackFog ; end ;
23313: CALL 36444 0 0
23317: GO 23320
23319: POP
// end ; if p2 = game_save_mode then
23320: LD_VAR 0 2
23324: PUSH
23325: LD_INT 102
23327: EQUAL
23328: IFFALSE 23383
// begin if p3 = 1 then
23330: LD_VAR 0 3
23334: PUSH
23335: LD_INT 1
23337: EQUAL
23338: IFFALSE 23350
// globalGameSaveCounter := p4 ;
23340: LD_ADDR_EXP 50
23344: PUSH
23345: LD_VAR 0 4
23349: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
23350: LD_VAR 0 3
23354: PUSH
23355: LD_INT 2
23357: EQUAL
23358: PUSH
23359: LD_EXP 50
23363: AND
23364: IFFALSE 23383
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
23366: LD_STRING setGameSaveCounter(
23368: PUSH
23369: LD_EXP 50
23373: STR
23374: PUSH
23375: LD_STRING )
23377: STR
23378: PPUSH
23379: CALL_OW 559
// end ; end ;
23383: LD_VAR 0 7
23387: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
23388: LD_INT 0
23390: PPUSH
// streamModeActive := false ;
23391: LD_ADDR_EXP 51
23395: PUSH
23396: LD_INT 0
23398: ST_TO_ADDR
// normalCounter := 36 ;
23399: LD_ADDR_EXP 52
23403: PUSH
23404: LD_INT 36
23406: ST_TO_ADDR
// hardcoreCounter := 18 ;
23407: LD_ADDR_EXP 53
23411: PUSH
23412: LD_INT 18
23414: ST_TO_ADDR
// sRocket := false ;
23415: LD_ADDR_EXP 56
23419: PUSH
23420: LD_INT 0
23422: ST_TO_ADDR
// sSpeed := false ;
23423: LD_ADDR_EXP 55
23427: PUSH
23428: LD_INT 0
23430: ST_TO_ADDR
// sEngine := false ;
23431: LD_ADDR_EXP 57
23435: PUSH
23436: LD_INT 0
23438: ST_TO_ADDR
// sSpec := false ;
23439: LD_ADDR_EXP 54
23443: PUSH
23444: LD_INT 0
23446: ST_TO_ADDR
// sLevel := false ;
23447: LD_ADDR_EXP 58
23451: PUSH
23452: LD_INT 0
23454: ST_TO_ADDR
// sArmoury := false ;
23455: LD_ADDR_EXP 59
23459: PUSH
23460: LD_INT 0
23462: ST_TO_ADDR
// sRadar := false ;
23463: LD_ADDR_EXP 60
23467: PUSH
23468: LD_INT 0
23470: ST_TO_ADDR
// sBunker := false ;
23471: LD_ADDR_EXP 61
23475: PUSH
23476: LD_INT 0
23478: ST_TO_ADDR
// sHack := false ;
23479: LD_ADDR_EXP 62
23483: PUSH
23484: LD_INT 0
23486: ST_TO_ADDR
// sFire := false ;
23487: LD_ADDR_EXP 63
23491: PUSH
23492: LD_INT 0
23494: ST_TO_ADDR
// sRefresh := false ;
23495: LD_ADDR_EXP 64
23499: PUSH
23500: LD_INT 0
23502: ST_TO_ADDR
// sExp := false ;
23503: LD_ADDR_EXP 65
23507: PUSH
23508: LD_INT 0
23510: ST_TO_ADDR
// sDepot := false ;
23511: LD_ADDR_EXP 66
23515: PUSH
23516: LD_INT 0
23518: ST_TO_ADDR
// sFlag := false ;
23519: LD_ADDR_EXP 67
23523: PUSH
23524: LD_INT 0
23526: ST_TO_ADDR
// sKamikadze := false ;
23527: LD_ADDR_EXP 75
23531: PUSH
23532: LD_INT 0
23534: ST_TO_ADDR
// sTroll := false ;
23535: LD_ADDR_EXP 76
23539: PUSH
23540: LD_INT 0
23542: ST_TO_ADDR
// sSlow := false ;
23543: LD_ADDR_EXP 77
23547: PUSH
23548: LD_INT 0
23550: ST_TO_ADDR
// sLack := false ;
23551: LD_ADDR_EXP 78
23555: PUSH
23556: LD_INT 0
23558: ST_TO_ADDR
// sTank := false ;
23559: LD_ADDR_EXP 80
23563: PUSH
23564: LD_INT 0
23566: ST_TO_ADDR
// sRemote := false ;
23567: LD_ADDR_EXP 81
23571: PUSH
23572: LD_INT 0
23574: ST_TO_ADDR
// sPowell := false ;
23575: LD_ADDR_EXP 82
23579: PUSH
23580: LD_INT 0
23582: ST_TO_ADDR
// sTeleport := false ;
23583: LD_ADDR_EXP 85
23587: PUSH
23588: LD_INT 0
23590: ST_TO_ADDR
// sOilTower := false ;
23591: LD_ADDR_EXP 87
23595: PUSH
23596: LD_INT 0
23598: ST_TO_ADDR
// sShovel := false ;
23599: LD_ADDR_EXP 88
23603: PUSH
23604: LD_INT 0
23606: ST_TO_ADDR
// sSheik := false ;
23607: LD_ADDR_EXP 89
23611: PUSH
23612: LD_INT 0
23614: ST_TO_ADDR
// sEarthquake := false ;
23615: LD_ADDR_EXP 91
23619: PUSH
23620: LD_INT 0
23622: ST_TO_ADDR
// sAI := false ;
23623: LD_ADDR_EXP 92
23627: PUSH
23628: LD_INT 0
23630: ST_TO_ADDR
// sCargo := false ;
23631: LD_ADDR_EXP 95
23635: PUSH
23636: LD_INT 0
23638: ST_TO_ADDR
// sDLaser := false ;
23639: LD_ADDR_EXP 96
23643: PUSH
23644: LD_INT 0
23646: ST_TO_ADDR
// sExchange := false ;
23647: LD_ADDR_EXP 97
23651: PUSH
23652: LD_INT 0
23654: ST_TO_ADDR
// sFac := false ;
23655: LD_ADDR_EXP 98
23659: PUSH
23660: LD_INT 0
23662: ST_TO_ADDR
// sPower := false ;
23663: LD_ADDR_EXP 99
23667: PUSH
23668: LD_INT 0
23670: ST_TO_ADDR
// sRandom := false ;
23671: LD_ADDR_EXP 100
23675: PUSH
23676: LD_INT 0
23678: ST_TO_ADDR
// sShield := false ;
23679: LD_ADDR_EXP 101
23683: PUSH
23684: LD_INT 0
23686: ST_TO_ADDR
// sTime := false ;
23687: LD_ADDR_EXP 102
23691: PUSH
23692: LD_INT 0
23694: ST_TO_ADDR
// sTools := false ;
23695: LD_ADDR_EXP 103
23699: PUSH
23700: LD_INT 0
23702: ST_TO_ADDR
// sSold := false ;
23703: LD_ADDR_EXP 68
23707: PUSH
23708: LD_INT 0
23710: ST_TO_ADDR
// sDiff := false ;
23711: LD_ADDR_EXP 69
23715: PUSH
23716: LD_INT 0
23718: ST_TO_ADDR
// sFog := false ;
23719: LD_ADDR_EXP 72
23723: PUSH
23724: LD_INT 0
23726: ST_TO_ADDR
// sReset := false ;
23727: LD_ADDR_EXP 73
23731: PUSH
23732: LD_INT 0
23734: ST_TO_ADDR
// sSun := false ;
23735: LD_ADDR_EXP 74
23739: PUSH
23740: LD_INT 0
23742: ST_TO_ADDR
// sTiger := false ;
23743: LD_ADDR_EXP 70
23747: PUSH
23748: LD_INT 0
23750: ST_TO_ADDR
// sBomb := false ;
23751: LD_ADDR_EXP 71
23755: PUSH
23756: LD_INT 0
23758: ST_TO_ADDR
// sWound := false ;
23759: LD_ADDR_EXP 79
23763: PUSH
23764: LD_INT 0
23766: ST_TO_ADDR
// sBetray := false ;
23767: LD_ADDR_EXP 83
23771: PUSH
23772: LD_INT 0
23774: ST_TO_ADDR
// sContamin := false ;
23775: LD_ADDR_EXP 84
23779: PUSH
23780: LD_INT 0
23782: ST_TO_ADDR
// sOil := false ;
23783: LD_ADDR_EXP 86
23787: PUSH
23788: LD_INT 0
23790: ST_TO_ADDR
// sStu := false ;
23791: LD_ADDR_EXP 90
23795: PUSH
23796: LD_INT 0
23798: ST_TO_ADDR
// sBazooka := false ;
23799: LD_ADDR_EXP 93
23803: PUSH
23804: LD_INT 0
23806: ST_TO_ADDR
// sMortar := false ;
23807: LD_ADDR_EXP 94
23811: PUSH
23812: LD_INT 0
23814: ST_TO_ADDR
// sRanger := false ;
23815: LD_ADDR_EXP 104
23819: PUSH
23820: LD_INT 0
23822: ST_TO_ADDR
// sComputer := false ;
23823: LD_ADDR_EXP 105
23827: PUSH
23828: LD_INT 0
23830: ST_TO_ADDR
// s30 := false ;
23831: LD_ADDR_EXP 106
23835: PUSH
23836: LD_INT 0
23838: ST_TO_ADDR
// s60 := false ;
23839: LD_ADDR_EXP 107
23843: PUSH
23844: LD_INT 0
23846: ST_TO_ADDR
// end ;
23847: LD_VAR 0 1
23851: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23852: LD_INT 0
23854: PPUSH
23855: PPUSH
23856: PPUSH
23857: PPUSH
23858: PPUSH
23859: PPUSH
23860: PPUSH
// result := [ ] ;
23861: LD_ADDR_VAR 0 2
23865: PUSH
23866: EMPTY
23867: ST_TO_ADDR
// if campaign_id = 1 then
23868: LD_OWVAR 69
23872: PUSH
23873: LD_INT 1
23875: EQUAL
23876: IFFALSE 27042
// begin case mission_number of 1 :
23878: LD_OWVAR 70
23882: PUSH
23883: LD_INT 1
23885: DOUBLE
23886: EQUAL
23887: IFTRUE 23891
23889: GO 23967
23891: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23892: LD_ADDR_VAR 0 2
23896: PUSH
23897: LD_INT 2
23899: PUSH
23900: LD_INT 4
23902: PUSH
23903: LD_INT 11
23905: PUSH
23906: LD_INT 12
23908: PUSH
23909: LD_INT 15
23911: PUSH
23912: LD_INT 16
23914: PUSH
23915: LD_INT 22
23917: PUSH
23918: LD_INT 23
23920: PUSH
23921: LD_INT 26
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 101
23937: PUSH
23938: LD_INT 102
23940: PUSH
23941: LD_INT 106
23943: PUSH
23944: LD_INT 116
23946: PUSH
23947: LD_INT 117
23949: PUSH
23950: LD_INT 118
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: ST_TO_ADDR
23965: GO 27040
23967: LD_INT 2
23969: DOUBLE
23970: EQUAL
23971: IFTRUE 23975
23973: GO 24059
23975: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23976: LD_ADDR_VAR 0 2
23980: PUSH
23981: LD_INT 2
23983: PUSH
23984: LD_INT 4
23986: PUSH
23987: LD_INT 11
23989: PUSH
23990: LD_INT 12
23992: PUSH
23993: LD_INT 15
23995: PUSH
23996: LD_INT 16
23998: PUSH
23999: LD_INT 22
24001: PUSH
24002: LD_INT 23
24004: PUSH
24005: LD_INT 26
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 101
24021: PUSH
24022: LD_INT 102
24024: PUSH
24025: LD_INT 105
24027: PUSH
24028: LD_INT 106
24030: PUSH
24031: LD_INT 108
24033: PUSH
24034: LD_INT 116
24036: PUSH
24037: LD_INT 117
24039: PUSH
24040: LD_INT 118
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: ST_TO_ADDR
24057: GO 27040
24059: LD_INT 3
24061: DOUBLE
24062: EQUAL
24063: IFTRUE 24067
24065: GO 24155
24067: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
24068: LD_ADDR_VAR 0 2
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: LD_INT 4
24078: PUSH
24079: LD_INT 5
24081: PUSH
24082: LD_INT 11
24084: PUSH
24085: LD_INT 12
24087: PUSH
24088: LD_INT 15
24090: PUSH
24091: LD_INT 16
24093: PUSH
24094: LD_INT 22
24096: PUSH
24097: LD_INT 26
24099: PUSH
24100: LD_INT 36
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 101
24117: PUSH
24118: LD_INT 102
24120: PUSH
24121: LD_INT 105
24123: PUSH
24124: LD_INT 106
24126: PUSH
24127: LD_INT 108
24129: PUSH
24130: LD_INT 116
24132: PUSH
24133: LD_INT 117
24135: PUSH
24136: LD_INT 118
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: ST_TO_ADDR
24153: GO 27040
24155: LD_INT 4
24157: DOUBLE
24158: EQUAL
24159: IFTRUE 24163
24161: GO 24259
24163: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
24164: LD_ADDR_VAR 0 2
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: LD_INT 4
24174: PUSH
24175: LD_INT 5
24177: PUSH
24178: LD_INT 8
24180: PUSH
24181: LD_INT 11
24183: PUSH
24184: LD_INT 12
24186: PUSH
24187: LD_INT 15
24189: PUSH
24190: LD_INT 16
24192: PUSH
24193: LD_INT 22
24195: PUSH
24196: LD_INT 23
24198: PUSH
24199: LD_INT 26
24201: PUSH
24202: LD_INT 36
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 101
24221: PUSH
24222: LD_INT 102
24224: PUSH
24225: LD_INT 105
24227: PUSH
24228: LD_INT 106
24230: PUSH
24231: LD_INT 108
24233: PUSH
24234: LD_INT 116
24236: PUSH
24237: LD_INT 117
24239: PUSH
24240: LD_INT 118
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: ST_TO_ADDR
24257: GO 27040
24259: LD_INT 5
24261: DOUBLE
24262: EQUAL
24263: IFTRUE 24267
24265: GO 24379
24267: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
24268: LD_ADDR_VAR 0 2
24272: PUSH
24273: LD_INT 2
24275: PUSH
24276: LD_INT 4
24278: PUSH
24279: LD_INT 5
24281: PUSH
24282: LD_INT 6
24284: PUSH
24285: LD_INT 8
24287: PUSH
24288: LD_INT 11
24290: PUSH
24291: LD_INT 12
24293: PUSH
24294: LD_INT 15
24296: PUSH
24297: LD_INT 16
24299: PUSH
24300: LD_INT 22
24302: PUSH
24303: LD_INT 23
24305: PUSH
24306: LD_INT 25
24308: PUSH
24309: LD_INT 26
24311: PUSH
24312: LD_INT 36
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 101
24333: PUSH
24334: LD_INT 102
24336: PUSH
24337: LD_INT 105
24339: PUSH
24340: LD_INT 106
24342: PUSH
24343: LD_INT 108
24345: PUSH
24346: LD_INT 109
24348: PUSH
24349: LD_INT 112
24351: PUSH
24352: LD_INT 116
24354: PUSH
24355: LD_INT 117
24357: PUSH
24358: LD_INT 118
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: ST_TO_ADDR
24377: GO 27040
24379: LD_INT 6
24381: DOUBLE
24382: EQUAL
24383: IFTRUE 24387
24385: GO 24519
24387: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
24388: LD_ADDR_VAR 0 2
24392: PUSH
24393: LD_INT 2
24395: PUSH
24396: LD_INT 4
24398: PUSH
24399: LD_INT 5
24401: PUSH
24402: LD_INT 6
24404: PUSH
24405: LD_INT 8
24407: PUSH
24408: LD_INT 11
24410: PUSH
24411: LD_INT 12
24413: PUSH
24414: LD_INT 15
24416: PUSH
24417: LD_INT 16
24419: PUSH
24420: LD_INT 20
24422: PUSH
24423: LD_INT 21
24425: PUSH
24426: LD_INT 22
24428: PUSH
24429: LD_INT 23
24431: PUSH
24432: LD_INT 25
24434: PUSH
24435: LD_INT 26
24437: PUSH
24438: LD_INT 30
24440: PUSH
24441: LD_INT 31
24443: PUSH
24444: LD_INT 32
24446: PUSH
24447: LD_INT 36
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 101
24473: PUSH
24474: LD_INT 102
24476: PUSH
24477: LD_INT 105
24479: PUSH
24480: LD_INT 106
24482: PUSH
24483: LD_INT 108
24485: PUSH
24486: LD_INT 109
24488: PUSH
24489: LD_INT 112
24491: PUSH
24492: LD_INT 116
24494: PUSH
24495: LD_INT 117
24497: PUSH
24498: LD_INT 118
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: ST_TO_ADDR
24517: GO 27040
24519: LD_INT 7
24521: DOUBLE
24522: EQUAL
24523: IFTRUE 24527
24525: GO 24639
24527: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24528: LD_ADDR_VAR 0 2
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: LD_INT 4
24538: PUSH
24539: LD_INT 5
24541: PUSH
24542: LD_INT 7
24544: PUSH
24545: LD_INT 11
24547: PUSH
24548: LD_INT 12
24550: PUSH
24551: LD_INT 15
24553: PUSH
24554: LD_INT 16
24556: PUSH
24557: LD_INT 20
24559: PUSH
24560: LD_INT 21
24562: PUSH
24563: LD_INT 22
24565: PUSH
24566: LD_INT 23
24568: PUSH
24569: LD_INT 25
24571: PUSH
24572: LD_INT 26
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 101
24593: PUSH
24594: LD_INT 102
24596: PUSH
24597: LD_INT 103
24599: PUSH
24600: LD_INT 105
24602: PUSH
24603: LD_INT 106
24605: PUSH
24606: LD_INT 108
24608: PUSH
24609: LD_INT 112
24611: PUSH
24612: LD_INT 116
24614: PUSH
24615: LD_INT 117
24617: PUSH
24618: LD_INT 118
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: ST_TO_ADDR
24637: GO 27040
24639: LD_INT 8
24641: DOUBLE
24642: EQUAL
24643: IFTRUE 24647
24645: GO 24787
24647: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24648: LD_ADDR_VAR 0 2
24652: PUSH
24653: LD_INT 2
24655: PUSH
24656: LD_INT 4
24658: PUSH
24659: LD_INT 5
24661: PUSH
24662: LD_INT 6
24664: PUSH
24665: LD_INT 7
24667: PUSH
24668: LD_INT 8
24670: PUSH
24671: LD_INT 11
24673: PUSH
24674: LD_INT 12
24676: PUSH
24677: LD_INT 15
24679: PUSH
24680: LD_INT 16
24682: PUSH
24683: LD_INT 20
24685: PUSH
24686: LD_INT 21
24688: PUSH
24689: LD_INT 22
24691: PUSH
24692: LD_INT 23
24694: PUSH
24695: LD_INT 25
24697: PUSH
24698: LD_INT 26
24700: PUSH
24701: LD_INT 30
24703: PUSH
24704: LD_INT 31
24706: PUSH
24707: LD_INT 32
24709: PUSH
24710: LD_INT 36
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 101
24737: PUSH
24738: LD_INT 102
24740: PUSH
24741: LD_INT 103
24743: PUSH
24744: LD_INT 105
24746: PUSH
24747: LD_INT 106
24749: PUSH
24750: LD_INT 108
24752: PUSH
24753: LD_INT 109
24755: PUSH
24756: LD_INT 112
24758: PUSH
24759: LD_INT 116
24761: PUSH
24762: LD_INT 117
24764: PUSH
24765: LD_INT 118
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: ST_TO_ADDR
24785: GO 27040
24787: LD_INT 9
24789: DOUBLE
24790: EQUAL
24791: IFTRUE 24795
24793: GO 24943
24795: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24796: LD_ADDR_VAR 0 2
24800: PUSH
24801: LD_INT 2
24803: PUSH
24804: LD_INT 4
24806: PUSH
24807: LD_INT 5
24809: PUSH
24810: LD_INT 6
24812: PUSH
24813: LD_INT 7
24815: PUSH
24816: LD_INT 8
24818: PUSH
24819: LD_INT 11
24821: PUSH
24822: LD_INT 12
24824: PUSH
24825: LD_INT 15
24827: PUSH
24828: LD_INT 16
24830: PUSH
24831: LD_INT 20
24833: PUSH
24834: LD_INT 21
24836: PUSH
24837: LD_INT 22
24839: PUSH
24840: LD_INT 23
24842: PUSH
24843: LD_INT 25
24845: PUSH
24846: LD_INT 26
24848: PUSH
24849: LD_INT 28
24851: PUSH
24852: LD_INT 30
24854: PUSH
24855: LD_INT 31
24857: PUSH
24858: LD_INT 32
24860: PUSH
24861: LD_INT 36
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 101
24889: PUSH
24890: LD_INT 102
24892: PUSH
24893: LD_INT 103
24895: PUSH
24896: LD_INT 105
24898: PUSH
24899: LD_INT 106
24901: PUSH
24902: LD_INT 108
24904: PUSH
24905: LD_INT 109
24907: PUSH
24908: LD_INT 112
24910: PUSH
24911: LD_INT 114
24913: PUSH
24914: LD_INT 116
24916: PUSH
24917: LD_INT 117
24919: PUSH
24920: LD_INT 118
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: ST_TO_ADDR
24941: GO 27040
24943: LD_INT 10
24945: DOUBLE
24946: EQUAL
24947: IFTRUE 24951
24949: GO 25147
24951: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24952: LD_ADDR_VAR 0 2
24956: PUSH
24957: LD_INT 2
24959: PUSH
24960: LD_INT 4
24962: PUSH
24963: LD_INT 5
24965: PUSH
24966: LD_INT 6
24968: PUSH
24969: LD_INT 7
24971: PUSH
24972: LD_INT 8
24974: PUSH
24975: LD_INT 9
24977: PUSH
24978: LD_INT 10
24980: PUSH
24981: LD_INT 11
24983: PUSH
24984: LD_INT 12
24986: PUSH
24987: LD_INT 13
24989: PUSH
24990: LD_INT 14
24992: PUSH
24993: LD_INT 15
24995: PUSH
24996: LD_INT 16
24998: PUSH
24999: LD_INT 17
25001: PUSH
25002: LD_INT 18
25004: PUSH
25005: LD_INT 19
25007: PUSH
25008: LD_INT 20
25010: PUSH
25011: LD_INT 21
25013: PUSH
25014: LD_INT 22
25016: PUSH
25017: LD_INT 23
25019: PUSH
25020: LD_INT 24
25022: PUSH
25023: LD_INT 25
25025: PUSH
25026: LD_INT 26
25028: PUSH
25029: LD_INT 28
25031: PUSH
25032: LD_INT 30
25034: PUSH
25035: LD_INT 31
25037: PUSH
25038: LD_INT 32
25040: PUSH
25041: LD_INT 36
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 101
25077: PUSH
25078: LD_INT 102
25080: PUSH
25081: LD_INT 103
25083: PUSH
25084: LD_INT 104
25086: PUSH
25087: LD_INT 105
25089: PUSH
25090: LD_INT 106
25092: PUSH
25093: LD_INT 107
25095: PUSH
25096: LD_INT 108
25098: PUSH
25099: LD_INT 109
25101: PUSH
25102: LD_INT 110
25104: PUSH
25105: LD_INT 111
25107: PUSH
25108: LD_INT 112
25110: PUSH
25111: LD_INT 114
25113: PUSH
25114: LD_INT 116
25116: PUSH
25117: LD_INT 117
25119: PUSH
25120: LD_INT 118
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: ST_TO_ADDR
25145: GO 27040
25147: LD_INT 11
25149: DOUBLE
25150: EQUAL
25151: IFTRUE 25155
25153: GO 25359
25155: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
25156: LD_ADDR_VAR 0 2
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: LD_INT 4
25169: PUSH
25170: LD_INT 5
25172: PUSH
25173: LD_INT 6
25175: PUSH
25176: LD_INT 7
25178: PUSH
25179: LD_INT 8
25181: PUSH
25182: LD_INT 9
25184: PUSH
25185: LD_INT 10
25187: PUSH
25188: LD_INT 11
25190: PUSH
25191: LD_INT 12
25193: PUSH
25194: LD_INT 13
25196: PUSH
25197: LD_INT 14
25199: PUSH
25200: LD_INT 15
25202: PUSH
25203: LD_INT 16
25205: PUSH
25206: LD_INT 17
25208: PUSH
25209: LD_INT 18
25211: PUSH
25212: LD_INT 19
25214: PUSH
25215: LD_INT 20
25217: PUSH
25218: LD_INT 21
25220: PUSH
25221: LD_INT 22
25223: PUSH
25224: LD_INT 23
25226: PUSH
25227: LD_INT 24
25229: PUSH
25230: LD_INT 25
25232: PUSH
25233: LD_INT 26
25235: PUSH
25236: LD_INT 28
25238: PUSH
25239: LD_INT 30
25241: PUSH
25242: LD_INT 31
25244: PUSH
25245: LD_INT 32
25247: PUSH
25248: LD_INT 34
25250: PUSH
25251: LD_INT 36
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 101
25289: PUSH
25290: LD_INT 102
25292: PUSH
25293: LD_INT 103
25295: PUSH
25296: LD_INT 104
25298: PUSH
25299: LD_INT 105
25301: PUSH
25302: LD_INT 106
25304: PUSH
25305: LD_INT 107
25307: PUSH
25308: LD_INT 108
25310: PUSH
25311: LD_INT 109
25313: PUSH
25314: LD_INT 110
25316: PUSH
25317: LD_INT 111
25319: PUSH
25320: LD_INT 112
25322: PUSH
25323: LD_INT 114
25325: PUSH
25326: LD_INT 116
25328: PUSH
25329: LD_INT 117
25331: PUSH
25332: LD_INT 118
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: ST_TO_ADDR
25357: GO 27040
25359: LD_INT 12
25361: DOUBLE
25362: EQUAL
25363: IFTRUE 25367
25365: GO 25587
25367: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
25368: LD_ADDR_VAR 0 2
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 2
25378: PUSH
25379: LD_INT 3
25381: PUSH
25382: LD_INT 4
25384: PUSH
25385: LD_INT 5
25387: PUSH
25388: LD_INT 6
25390: PUSH
25391: LD_INT 7
25393: PUSH
25394: LD_INT 8
25396: PUSH
25397: LD_INT 9
25399: PUSH
25400: LD_INT 10
25402: PUSH
25403: LD_INT 11
25405: PUSH
25406: LD_INT 12
25408: PUSH
25409: LD_INT 13
25411: PUSH
25412: LD_INT 14
25414: PUSH
25415: LD_INT 15
25417: PUSH
25418: LD_INT 16
25420: PUSH
25421: LD_INT 17
25423: PUSH
25424: LD_INT 18
25426: PUSH
25427: LD_INT 19
25429: PUSH
25430: LD_INT 20
25432: PUSH
25433: LD_INT 21
25435: PUSH
25436: LD_INT 22
25438: PUSH
25439: LD_INT 23
25441: PUSH
25442: LD_INT 24
25444: PUSH
25445: LD_INT 25
25447: PUSH
25448: LD_INT 26
25450: PUSH
25451: LD_INT 27
25453: PUSH
25454: LD_INT 28
25456: PUSH
25457: LD_INT 30
25459: PUSH
25460: LD_INT 31
25462: PUSH
25463: LD_INT 32
25465: PUSH
25466: LD_INT 33
25468: PUSH
25469: LD_INT 34
25471: PUSH
25472: LD_INT 36
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 101
25513: PUSH
25514: LD_INT 102
25516: PUSH
25517: LD_INT 103
25519: PUSH
25520: LD_INT 104
25522: PUSH
25523: LD_INT 105
25525: PUSH
25526: LD_INT 106
25528: PUSH
25529: LD_INT 107
25531: PUSH
25532: LD_INT 108
25534: PUSH
25535: LD_INT 109
25537: PUSH
25538: LD_INT 110
25540: PUSH
25541: LD_INT 111
25543: PUSH
25544: LD_INT 112
25546: PUSH
25547: LD_INT 113
25549: PUSH
25550: LD_INT 114
25552: PUSH
25553: LD_INT 116
25555: PUSH
25556: LD_INT 117
25558: PUSH
25559: LD_INT 118
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: ST_TO_ADDR
25585: GO 27040
25587: LD_INT 13
25589: DOUBLE
25590: EQUAL
25591: IFTRUE 25595
25593: GO 25803
25595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25596: LD_ADDR_VAR 0 2
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: LD_INT 2
25606: PUSH
25607: LD_INT 3
25609: PUSH
25610: LD_INT 4
25612: PUSH
25613: LD_INT 5
25615: PUSH
25616: LD_INT 8
25618: PUSH
25619: LD_INT 9
25621: PUSH
25622: LD_INT 10
25624: PUSH
25625: LD_INT 11
25627: PUSH
25628: LD_INT 12
25630: PUSH
25631: LD_INT 14
25633: PUSH
25634: LD_INT 15
25636: PUSH
25637: LD_INT 16
25639: PUSH
25640: LD_INT 17
25642: PUSH
25643: LD_INT 18
25645: PUSH
25646: LD_INT 19
25648: PUSH
25649: LD_INT 20
25651: PUSH
25652: LD_INT 21
25654: PUSH
25655: LD_INT 22
25657: PUSH
25658: LD_INT 23
25660: PUSH
25661: LD_INT 24
25663: PUSH
25664: LD_INT 25
25666: PUSH
25667: LD_INT 26
25669: PUSH
25670: LD_INT 27
25672: PUSH
25673: LD_INT 28
25675: PUSH
25676: LD_INT 30
25678: PUSH
25679: LD_INT 31
25681: PUSH
25682: LD_INT 32
25684: PUSH
25685: LD_INT 33
25687: PUSH
25688: LD_INT 34
25690: PUSH
25691: LD_INT 36
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 101
25729: PUSH
25730: LD_INT 102
25732: PUSH
25733: LD_INT 103
25735: PUSH
25736: LD_INT 104
25738: PUSH
25739: LD_INT 105
25741: PUSH
25742: LD_INT 106
25744: PUSH
25745: LD_INT 107
25747: PUSH
25748: LD_INT 108
25750: PUSH
25751: LD_INT 109
25753: PUSH
25754: LD_INT 110
25756: PUSH
25757: LD_INT 111
25759: PUSH
25760: LD_INT 112
25762: PUSH
25763: LD_INT 113
25765: PUSH
25766: LD_INT 114
25768: PUSH
25769: LD_INT 116
25771: PUSH
25772: LD_INT 117
25774: PUSH
25775: LD_INT 118
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: ST_TO_ADDR
25801: GO 27040
25803: LD_INT 14
25805: DOUBLE
25806: EQUAL
25807: IFTRUE 25811
25809: GO 26035
25811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25812: LD_ADDR_VAR 0 2
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: LD_INT 3
25825: PUSH
25826: LD_INT 4
25828: PUSH
25829: LD_INT 5
25831: PUSH
25832: LD_INT 6
25834: PUSH
25835: LD_INT 7
25837: PUSH
25838: LD_INT 8
25840: PUSH
25841: LD_INT 9
25843: PUSH
25844: LD_INT 10
25846: PUSH
25847: LD_INT 11
25849: PUSH
25850: LD_INT 12
25852: PUSH
25853: LD_INT 13
25855: PUSH
25856: LD_INT 14
25858: PUSH
25859: LD_INT 15
25861: PUSH
25862: LD_INT 16
25864: PUSH
25865: LD_INT 17
25867: PUSH
25868: LD_INT 18
25870: PUSH
25871: LD_INT 19
25873: PUSH
25874: LD_INT 20
25876: PUSH
25877: LD_INT 21
25879: PUSH
25880: LD_INT 22
25882: PUSH
25883: LD_INT 23
25885: PUSH
25886: LD_INT 24
25888: PUSH
25889: LD_INT 25
25891: PUSH
25892: LD_INT 26
25894: PUSH
25895: LD_INT 27
25897: PUSH
25898: LD_INT 28
25900: PUSH
25901: LD_INT 29
25903: PUSH
25904: LD_INT 30
25906: PUSH
25907: LD_INT 31
25909: PUSH
25910: LD_INT 32
25912: PUSH
25913: LD_INT 33
25915: PUSH
25916: LD_INT 34
25918: PUSH
25919: LD_INT 36
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 101
25961: PUSH
25962: LD_INT 102
25964: PUSH
25965: LD_INT 103
25967: PUSH
25968: LD_INT 104
25970: PUSH
25971: LD_INT 105
25973: PUSH
25974: LD_INT 106
25976: PUSH
25977: LD_INT 107
25979: PUSH
25980: LD_INT 108
25982: PUSH
25983: LD_INT 109
25985: PUSH
25986: LD_INT 110
25988: PUSH
25989: LD_INT 111
25991: PUSH
25992: LD_INT 112
25994: PUSH
25995: LD_INT 113
25997: PUSH
25998: LD_INT 114
26000: PUSH
26001: LD_INT 116
26003: PUSH
26004: LD_INT 117
26006: PUSH
26007: LD_INT 118
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: ST_TO_ADDR
26033: GO 27040
26035: LD_INT 15
26037: DOUBLE
26038: EQUAL
26039: IFTRUE 26043
26041: GO 26267
26043: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
26044: LD_ADDR_VAR 0 2
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: LD_INT 4
26060: PUSH
26061: LD_INT 5
26063: PUSH
26064: LD_INT 6
26066: PUSH
26067: LD_INT 7
26069: PUSH
26070: LD_INT 8
26072: PUSH
26073: LD_INT 9
26075: PUSH
26076: LD_INT 10
26078: PUSH
26079: LD_INT 11
26081: PUSH
26082: LD_INT 12
26084: PUSH
26085: LD_INT 13
26087: PUSH
26088: LD_INT 14
26090: PUSH
26091: LD_INT 15
26093: PUSH
26094: LD_INT 16
26096: PUSH
26097: LD_INT 17
26099: PUSH
26100: LD_INT 18
26102: PUSH
26103: LD_INT 19
26105: PUSH
26106: LD_INT 20
26108: PUSH
26109: LD_INT 21
26111: PUSH
26112: LD_INT 22
26114: PUSH
26115: LD_INT 23
26117: PUSH
26118: LD_INT 24
26120: PUSH
26121: LD_INT 25
26123: PUSH
26124: LD_INT 26
26126: PUSH
26127: LD_INT 27
26129: PUSH
26130: LD_INT 28
26132: PUSH
26133: LD_INT 29
26135: PUSH
26136: LD_INT 30
26138: PUSH
26139: LD_INT 31
26141: PUSH
26142: LD_INT 32
26144: PUSH
26145: LD_INT 33
26147: PUSH
26148: LD_INT 34
26150: PUSH
26151: LD_INT 36
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 101
26193: PUSH
26194: LD_INT 102
26196: PUSH
26197: LD_INT 103
26199: PUSH
26200: LD_INT 104
26202: PUSH
26203: LD_INT 105
26205: PUSH
26206: LD_INT 106
26208: PUSH
26209: LD_INT 107
26211: PUSH
26212: LD_INT 108
26214: PUSH
26215: LD_INT 109
26217: PUSH
26218: LD_INT 110
26220: PUSH
26221: LD_INT 111
26223: PUSH
26224: LD_INT 112
26226: PUSH
26227: LD_INT 113
26229: PUSH
26230: LD_INT 114
26232: PUSH
26233: LD_INT 116
26235: PUSH
26236: LD_INT 117
26238: PUSH
26239: LD_INT 118
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: ST_TO_ADDR
26265: GO 27040
26267: LD_INT 16
26269: DOUBLE
26270: EQUAL
26271: IFTRUE 26275
26273: GO 26411
26275: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
26276: LD_ADDR_VAR 0 2
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: LD_INT 4
26286: PUSH
26287: LD_INT 5
26289: PUSH
26290: LD_INT 7
26292: PUSH
26293: LD_INT 11
26295: PUSH
26296: LD_INT 12
26298: PUSH
26299: LD_INT 15
26301: PUSH
26302: LD_INT 16
26304: PUSH
26305: LD_INT 20
26307: PUSH
26308: LD_INT 21
26310: PUSH
26311: LD_INT 22
26313: PUSH
26314: LD_INT 23
26316: PUSH
26317: LD_INT 25
26319: PUSH
26320: LD_INT 26
26322: PUSH
26323: LD_INT 30
26325: PUSH
26326: LD_INT 31
26328: PUSH
26329: LD_INT 32
26331: PUSH
26332: LD_INT 33
26334: PUSH
26335: LD_INT 34
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 101
26361: PUSH
26362: LD_INT 102
26364: PUSH
26365: LD_INT 103
26367: PUSH
26368: LD_INT 106
26370: PUSH
26371: LD_INT 108
26373: PUSH
26374: LD_INT 112
26376: PUSH
26377: LD_INT 113
26379: PUSH
26380: LD_INT 114
26382: PUSH
26383: LD_INT 116
26385: PUSH
26386: LD_INT 117
26388: PUSH
26389: LD_INT 118
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: ST_TO_ADDR
26409: GO 27040
26411: LD_INT 17
26413: DOUBLE
26414: EQUAL
26415: IFTRUE 26419
26417: GO 26643
26419: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
26420: LD_ADDR_VAR 0 2
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 3
26433: PUSH
26434: LD_INT 4
26436: PUSH
26437: LD_INT 5
26439: PUSH
26440: LD_INT 6
26442: PUSH
26443: LD_INT 7
26445: PUSH
26446: LD_INT 8
26448: PUSH
26449: LD_INT 9
26451: PUSH
26452: LD_INT 10
26454: PUSH
26455: LD_INT 11
26457: PUSH
26458: LD_INT 12
26460: PUSH
26461: LD_INT 13
26463: PUSH
26464: LD_INT 14
26466: PUSH
26467: LD_INT 15
26469: PUSH
26470: LD_INT 16
26472: PUSH
26473: LD_INT 17
26475: PUSH
26476: LD_INT 18
26478: PUSH
26479: LD_INT 19
26481: PUSH
26482: LD_INT 20
26484: PUSH
26485: LD_INT 21
26487: PUSH
26488: LD_INT 22
26490: PUSH
26491: LD_INT 23
26493: PUSH
26494: LD_INT 24
26496: PUSH
26497: LD_INT 25
26499: PUSH
26500: LD_INT 26
26502: PUSH
26503: LD_INT 27
26505: PUSH
26506: LD_INT 28
26508: PUSH
26509: LD_INT 29
26511: PUSH
26512: LD_INT 30
26514: PUSH
26515: LD_INT 31
26517: PUSH
26518: LD_INT 32
26520: PUSH
26521: LD_INT 33
26523: PUSH
26524: LD_INT 34
26526: PUSH
26527: LD_INT 36
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 101
26569: PUSH
26570: LD_INT 102
26572: PUSH
26573: LD_INT 103
26575: PUSH
26576: LD_INT 104
26578: PUSH
26579: LD_INT 105
26581: PUSH
26582: LD_INT 106
26584: PUSH
26585: LD_INT 107
26587: PUSH
26588: LD_INT 108
26590: PUSH
26591: LD_INT 109
26593: PUSH
26594: LD_INT 110
26596: PUSH
26597: LD_INT 111
26599: PUSH
26600: LD_INT 112
26602: PUSH
26603: LD_INT 113
26605: PUSH
26606: LD_INT 114
26608: PUSH
26609: LD_INT 116
26611: PUSH
26612: LD_INT 117
26614: PUSH
26615: LD_INT 118
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: ST_TO_ADDR
26641: GO 27040
26643: LD_INT 18
26645: DOUBLE
26646: EQUAL
26647: IFTRUE 26651
26649: GO 26799
26651: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26652: LD_ADDR_VAR 0 2
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: LD_INT 4
26662: PUSH
26663: LD_INT 5
26665: PUSH
26666: LD_INT 7
26668: PUSH
26669: LD_INT 11
26671: PUSH
26672: LD_INT 12
26674: PUSH
26675: LD_INT 15
26677: PUSH
26678: LD_INT 16
26680: PUSH
26681: LD_INT 20
26683: PUSH
26684: LD_INT 21
26686: PUSH
26687: LD_INT 22
26689: PUSH
26690: LD_INT 23
26692: PUSH
26693: LD_INT 25
26695: PUSH
26696: LD_INT 26
26698: PUSH
26699: LD_INT 30
26701: PUSH
26702: LD_INT 31
26704: PUSH
26705: LD_INT 32
26707: PUSH
26708: LD_INT 33
26710: PUSH
26711: LD_INT 34
26713: PUSH
26714: LD_INT 35
26716: PUSH
26717: LD_INT 36
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 101
26745: PUSH
26746: LD_INT 102
26748: PUSH
26749: LD_INT 103
26751: PUSH
26752: LD_INT 106
26754: PUSH
26755: LD_INT 108
26757: PUSH
26758: LD_INT 112
26760: PUSH
26761: LD_INT 113
26763: PUSH
26764: LD_INT 114
26766: PUSH
26767: LD_INT 115
26769: PUSH
26770: LD_INT 116
26772: PUSH
26773: LD_INT 117
26775: PUSH
26776: LD_INT 118
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: ST_TO_ADDR
26797: GO 27040
26799: LD_INT 19
26801: DOUBLE
26802: EQUAL
26803: IFTRUE 26807
26805: GO 27039
26807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26808: LD_ADDR_VAR 0 2
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: LD_INT 3
26821: PUSH
26822: LD_INT 4
26824: PUSH
26825: LD_INT 5
26827: PUSH
26828: LD_INT 6
26830: PUSH
26831: LD_INT 7
26833: PUSH
26834: LD_INT 8
26836: PUSH
26837: LD_INT 9
26839: PUSH
26840: LD_INT 10
26842: PUSH
26843: LD_INT 11
26845: PUSH
26846: LD_INT 12
26848: PUSH
26849: LD_INT 13
26851: PUSH
26852: LD_INT 14
26854: PUSH
26855: LD_INT 15
26857: PUSH
26858: LD_INT 16
26860: PUSH
26861: LD_INT 17
26863: PUSH
26864: LD_INT 18
26866: PUSH
26867: LD_INT 19
26869: PUSH
26870: LD_INT 20
26872: PUSH
26873: LD_INT 21
26875: PUSH
26876: LD_INT 22
26878: PUSH
26879: LD_INT 23
26881: PUSH
26882: LD_INT 24
26884: PUSH
26885: LD_INT 25
26887: PUSH
26888: LD_INT 26
26890: PUSH
26891: LD_INT 27
26893: PUSH
26894: LD_INT 28
26896: PUSH
26897: LD_INT 29
26899: PUSH
26900: LD_INT 30
26902: PUSH
26903: LD_INT 31
26905: PUSH
26906: LD_INT 32
26908: PUSH
26909: LD_INT 33
26911: PUSH
26912: LD_INT 34
26914: PUSH
26915: LD_INT 35
26917: PUSH
26918: LD_INT 36
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 101
26961: PUSH
26962: LD_INT 102
26964: PUSH
26965: LD_INT 103
26967: PUSH
26968: LD_INT 104
26970: PUSH
26971: LD_INT 105
26973: PUSH
26974: LD_INT 106
26976: PUSH
26977: LD_INT 107
26979: PUSH
26980: LD_INT 108
26982: PUSH
26983: LD_INT 109
26985: PUSH
26986: LD_INT 110
26988: PUSH
26989: LD_INT 111
26991: PUSH
26992: LD_INT 112
26994: PUSH
26995: LD_INT 113
26997: PUSH
26998: LD_INT 114
27000: PUSH
27001: LD_INT 115
27003: PUSH
27004: LD_INT 116
27006: PUSH
27007: LD_INT 117
27009: PUSH
27010: LD_INT 118
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: ST_TO_ADDR
27037: GO 27040
27039: POP
// end else
27040: GO 27271
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
27042: LD_ADDR_VAR 0 2
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: LD_INT 3
27055: PUSH
27056: LD_INT 4
27058: PUSH
27059: LD_INT 5
27061: PUSH
27062: LD_INT 6
27064: PUSH
27065: LD_INT 7
27067: PUSH
27068: LD_INT 8
27070: PUSH
27071: LD_INT 9
27073: PUSH
27074: LD_INT 10
27076: PUSH
27077: LD_INT 11
27079: PUSH
27080: LD_INT 12
27082: PUSH
27083: LD_INT 13
27085: PUSH
27086: LD_INT 14
27088: PUSH
27089: LD_INT 15
27091: PUSH
27092: LD_INT 16
27094: PUSH
27095: LD_INT 17
27097: PUSH
27098: LD_INT 18
27100: PUSH
27101: LD_INT 19
27103: PUSH
27104: LD_INT 20
27106: PUSH
27107: LD_INT 21
27109: PUSH
27110: LD_INT 22
27112: PUSH
27113: LD_INT 23
27115: PUSH
27116: LD_INT 24
27118: PUSH
27119: LD_INT 25
27121: PUSH
27122: LD_INT 26
27124: PUSH
27125: LD_INT 27
27127: PUSH
27128: LD_INT 28
27130: PUSH
27131: LD_INT 29
27133: PUSH
27134: LD_INT 30
27136: PUSH
27137: LD_INT 31
27139: PUSH
27140: LD_INT 32
27142: PUSH
27143: LD_INT 33
27145: PUSH
27146: LD_INT 34
27148: PUSH
27149: LD_INT 35
27151: PUSH
27152: LD_INT 36
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 101
27195: PUSH
27196: LD_INT 102
27198: PUSH
27199: LD_INT 103
27201: PUSH
27202: LD_INT 104
27204: PUSH
27205: LD_INT 105
27207: PUSH
27208: LD_INT 106
27210: PUSH
27211: LD_INT 107
27213: PUSH
27214: LD_INT 108
27216: PUSH
27217: LD_INT 109
27219: PUSH
27220: LD_INT 110
27222: PUSH
27223: LD_INT 111
27225: PUSH
27226: LD_INT 112
27228: PUSH
27229: LD_INT 113
27231: PUSH
27232: LD_INT 114
27234: PUSH
27235: LD_INT 115
27237: PUSH
27238: LD_INT 116
27240: PUSH
27241: LD_INT 117
27243: PUSH
27244: LD_INT 118
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: ST_TO_ADDR
// if result then
27271: LD_VAR 0 2
27275: IFFALSE 28061
// begin normal :=  ;
27277: LD_ADDR_VAR 0 5
27281: PUSH
27282: LD_STRING 
27284: ST_TO_ADDR
// hardcore :=  ;
27285: LD_ADDR_VAR 0 6
27289: PUSH
27290: LD_STRING 
27292: ST_TO_ADDR
// active :=  ;
27293: LD_ADDR_VAR 0 7
27297: PUSH
27298: LD_STRING 
27300: ST_TO_ADDR
// for i = 1 to normalCounter do
27301: LD_ADDR_VAR 0 8
27305: PUSH
27306: DOUBLE
27307: LD_INT 1
27309: DEC
27310: ST_TO_ADDR
27311: LD_EXP 52
27315: PUSH
27316: FOR_TO
27317: IFFALSE 27418
// begin tmp := 0 ;
27319: LD_ADDR_VAR 0 3
27323: PUSH
27324: LD_STRING 0
27326: ST_TO_ADDR
// if result [ 1 ] then
27327: LD_VAR 0 2
27331: PUSH
27332: LD_INT 1
27334: ARRAY
27335: IFFALSE 27400
// if result [ 1 ] [ 1 ] = i then
27337: LD_VAR 0 2
27341: PUSH
27342: LD_INT 1
27344: ARRAY
27345: PUSH
27346: LD_INT 1
27348: ARRAY
27349: PUSH
27350: LD_VAR 0 8
27354: EQUAL
27355: IFFALSE 27400
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27357: LD_ADDR_VAR 0 2
27361: PUSH
27362: LD_VAR 0 2
27366: PPUSH
27367: LD_INT 1
27369: PPUSH
27370: LD_VAR 0 2
27374: PUSH
27375: LD_INT 1
27377: ARRAY
27378: PPUSH
27379: LD_INT 1
27381: PPUSH
27382: CALL_OW 3
27386: PPUSH
27387: CALL_OW 1
27391: ST_TO_ADDR
// tmp := 1 ;
27392: LD_ADDR_VAR 0 3
27396: PUSH
27397: LD_STRING 1
27399: ST_TO_ADDR
// end ; normal := normal & tmp ;
27400: LD_ADDR_VAR 0 5
27404: PUSH
27405: LD_VAR 0 5
27409: PUSH
27410: LD_VAR 0 3
27414: STR
27415: ST_TO_ADDR
// end ;
27416: GO 27316
27418: POP
27419: POP
// for i = 1 to hardcoreCounter do
27420: LD_ADDR_VAR 0 8
27424: PUSH
27425: DOUBLE
27426: LD_INT 1
27428: DEC
27429: ST_TO_ADDR
27430: LD_EXP 53
27434: PUSH
27435: FOR_TO
27436: IFFALSE 27541
// begin tmp := 0 ;
27438: LD_ADDR_VAR 0 3
27442: PUSH
27443: LD_STRING 0
27445: ST_TO_ADDR
// if result [ 2 ] then
27446: LD_VAR 0 2
27450: PUSH
27451: LD_INT 2
27453: ARRAY
27454: IFFALSE 27523
// if result [ 2 ] [ 1 ] = 100 + i then
27456: LD_VAR 0 2
27460: PUSH
27461: LD_INT 2
27463: ARRAY
27464: PUSH
27465: LD_INT 1
27467: ARRAY
27468: PUSH
27469: LD_INT 100
27471: PUSH
27472: LD_VAR 0 8
27476: PLUS
27477: EQUAL
27478: IFFALSE 27523
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27480: LD_ADDR_VAR 0 2
27484: PUSH
27485: LD_VAR 0 2
27489: PPUSH
27490: LD_INT 2
27492: PPUSH
27493: LD_VAR 0 2
27497: PUSH
27498: LD_INT 2
27500: ARRAY
27501: PPUSH
27502: LD_INT 1
27504: PPUSH
27505: CALL_OW 3
27509: PPUSH
27510: CALL_OW 1
27514: ST_TO_ADDR
// tmp := 1 ;
27515: LD_ADDR_VAR 0 3
27519: PUSH
27520: LD_STRING 1
27522: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27523: LD_ADDR_VAR 0 6
27527: PUSH
27528: LD_VAR 0 6
27532: PUSH
27533: LD_VAR 0 3
27537: STR
27538: ST_TO_ADDR
// end ;
27539: GO 27435
27541: POP
27542: POP
// if isGameLoad then
27543: LD_VAR 0 1
27547: IFFALSE 28022
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27549: LD_ADDR_VAR 0 4
27553: PUSH
27554: LD_EXP 56
27558: PUSH
27559: LD_EXP 55
27563: PUSH
27564: LD_EXP 57
27568: PUSH
27569: LD_EXP 54
27573: PUSH
27574: LD_EXP 58
27578: PUSH
27579: LD_EXP 59
27583: PUSH
27584: LD_EXP 60
27588: PUSH
27589: LD_EXP 61
27593: PUSH
27594: LD_EXP 62
27598: PUSH
27599: LD_EXP 63
27603: PUSH
27604: LD_EXP 64
27608: PUSH
27609: LD_EXP 65
27613: PUSH
27614: LD_EXP 66
27618: PUSH
27619: LD_EXP 67
27623: PUSH
27624: LD_EXP 75
27628: PUSH
27629: LD_EXP 76
27633: PUSH
27634: LD_EXP 77
27638: PUSH
27639: LD_EXP 78
27643: PUSH
27644: LD_EXP 80
27648: PUSH
27649: LD_EXP 81
27653: PUSH
27654: LD_EXP 82
27658: PUSH
27659: LD_EXP 85
27663: PUSH
27664: LD_EXP 87
27668: PUSH
27669: LD_EXP 88
27673: PUSH
27674: LD_EXP 89
27678: PUSH
27679: LD_EXP 91
27683: PUSH
27684: LD_EXP 92
27688: PUSH
27689: LD_EXP 95
27693: PUSH
27694: LD_EXP 96
27698: PUSH
27699: LD_EXP 97
27703: PUSH
27704: LD_EXP 98
27708: PUSH
27709: LD_EXP 99
27713: PUSH
27714: LD_EXP 100
27718: PUSH
27719: LD_EXP 101
27723: PUSH
27724: LD_EXP 102
27728: PUSH
27729: LD_EXP 103
27733: PUSH
27734: LD_EXP 68
27738: PUSH
27739: LD_EXP 69
27743: PUSH
27744: LD_EXP 72
27748: PUSH
27749: LD_EXP 73
27753: PUSH
27754: LD_EXP 74
27758: PUSH
27759: LD_EXP 70
27763: PUSH
27764: LD_EXP 71
27768: PUSH
27769: LD_EXP 79
27773: PUSH
27774: LD_EXP 83
27778: PUSH
27779: LD_EXP 84
27783: PUSH
27784: LD_EXP 86
27788: PUSH
27789: LD_EXP 90
27793: PUSH
27794: LD_EXP 93
27798: PUSH
27799: LD_EXP 94
27803: PUSH
27804: LD_EXP 104
27808: PUSH
27809: LD_EXP 105
27813: PUSH
27814: LD_EXP 106
27818: PUSH
27819: LD_EXP 107
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: ST_TO_ADDR
// tmp :=  ;
27880: LD_ADDR_VAR 0 3
27884: PUSH
27885: LD_STRING 
27887: ST_TO_ADDR
// for i = 1 to normalCounter do
27888: LD_ADDR_VAR 0 8
27892: PUSH
27893: DOUBLE
27894: LD_INT 1
27896: DEC
27897: ST_TO_ADDR
27898: LD_EXP 52
27902: PUSH
27903: FOR_TO
27904: IFFALSE 27940
// begin if flags [ i ] then
27906: LD_VAR 0 4
27910: PUSH
27911: LD_VAR 0 8
27915: ARRAY
27916: IFFALSE 27938
// tmp := tmp & i & ; ;
27918: LD_ADDR_VAR 0 3
27922: PUSH
27923: LD_VAR 0 3
27927: PUSH
27928: LD_VAR 0 8
27932: STR
27933: PUSH
27934: LD_STRING ;
27936: STR
27937: ST_TO_ADDR
// end ;
27938: GO 27903
27940: POP
27941: POP
// for i = 1 to hardcoreCounter do
27942: LD_ADDR_VAR 0 8
27946: PUSH
27947: DOUBLE
27948: LD_INT 1
27950: DEC
27951: ST_TO_ADDR
27952: LD_EXP 53
27956: PUSH
27957: FOR_TO
27958: IFFALSE 28004
// begin if flags [ normalCounter + i ] then
27960: LD_VAR 0 4
27964: PUSH
27965: LD_EXP 52
27969: PUSH
27970: LD_VAR 0 8
27974: PLUS
27975: ARRAY
27976: IFFALSE 28002
// tmp := tmp & ( 100 + i ) & ; ;
27978: LD_ADDR_VAR 0 3
27982: PUSH
27983: LD_VAR 0 3
27987: PUSH
27988: LD_INT 100
27990: PUSH
27991: LD_VAR 0 8
27995: PLUS
27996: STR
27997: PUSH
27998: LD_STRING ;
28000: STR
28001: ST_TO_ADDR
// end ;
28002: GO 27957
28004: POP
28005: POP
// if tmp then
28006: LD_VAR 0 3
28010: IFFALSE 28022
// active := tmp ;
28012: LD_ADDR_VAR 0 7
28016: PUSH
28017: LD_VAR 0 3
28021: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
28022: LD_STRING getStreamItemsFromMission("
28024: PUSH
28025: LD_VAR 0 5
28029: STR
28030: PUSH
28031: LD_STRING ","
28033: STR
28034: PUSH
28035: LD_VAR 0 6
28039: STR
28040: PUSH
28041: LD_STRING ","
28043: STR
28044: PUSH
28045: LD_VAR 0 7
28049: STR
28050: PUSH
28051: LD_STRING ")
28053: STR
28054: PPUSH
28055: CALL_OW 559
// end else
28059: GO 28068
// ToLua ( getStreamItemsFromMission("","","") ) ;
28061: LD_STRING getStreamItemsFromMission("","","")
28063: PPUSH
28064: CALL_OW 559
// end ;
28068: LD_VAR 0 2
28072: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
28073: LD_EXP 51
28077: PUSH
28078: LD_EXP 56
28082: AND
28083: IFFALSE 28207
28085: GO 28087
28087: DISABLE
28088: LD_INT 0
28090: PPUSH
28091: PPUSH
// begin enable ;
28092: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
28093: LD_ADDR_VAR 0 2
28097: PUSH
28098: LD_INT 22
28100: PUSH
28101: LD_OWVAR 2
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 2
28112: PUSH
28113: LD_INT 34
28115: PUSH
28116: LD_INT 7
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 34
28125: PUSH
28126: LD_INT 45
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 34
28135: PUSH
28136: LD_INT 28
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 34
28145: PUSH
28146: LD_INT 47
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PPUSH
28164: CALL_OW 69
28168: ST_TO_ADDR
// if not tmp then
28169: LD_VAR 0 2
28173: NOT
28174: IFFALSE 28178
// exit ;
28176: GO 28207
// for i in tmp do
28178: LD_ADDR_VAR 0 1
28182: PUSH
28183: LD_VAR 0 2
28187: PUSH
28188: FOR_IN
28189: IFFALSE 28205
// begin SetLives ( i , 0 ) ;
28191: LD_VAR 0 1
28195: PPUSH
28196: LD_INT 0
28198: PPUSH
28199: CALL_OW 234
// end ;
28203: GO 28188
28205: POP
28206: POP
// end ;
28207: PPOPN 2
28209: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28210: LD_EXP 51
28214: PUSH
28215: LD_EXP 57
28219: AND
28220: IFFALSE 28304
28222: GO 28224
28224: DISABLE
28225: LD_INT 0
28227: PPUSH
28228: PPUSH
// begin enable ;
28229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28230: LD_ADDR_VAR 0 2
28234: PUSH
28235: LD_INT 22
28237: PUSH
28238: LD_OWVAR 2
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 32
28249: PUSH
28250: LD_INT 3
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PPUSH
28261: CALL_OW 69
28265: ST_TO_ADDR
// if not tmp then
28266: LD_VAR 0 2
28270: NOT
28271: IFFALSE 28275
// exit ;
28273: GO 28304
// for i in tmp do
28275: LD_ADDR_VAR 0 1
28279: PUSH
28280: LD_VAR 0 2
28284: PUSH
28285: FOR_IN
28286: IFFALSE 28302
// begin SetLives ( i , 0 ) ;
28288: LD_VAR 0 1
28292: PPUSH
28293: LD_INT 0
28295: PPUSH
28296: CALL_OW 234
// end ;
28300: GO 28285
28302: POP
28303: POP
// end ;
28304: PPOPN 2
28306: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28307: LD_EXP 51
28311: PUSH
28312: LD_EXP 54
28316: AND
28317: IFFALSE 28410
28319: GO 28321
28321: DISABLE
28322: LD_INT 0
28324: PPUSH
// begin enable ;
28325: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28326: LD_ADDR_VAR 0 1
28330: PUSH
28331: LD_INT 22
28333: PUSH
28334: LD_OWVAR 2
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: LD_INT 25
28348: PUSH
28349: LD_INT 5
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 25
28358: PUSH
28359: LD_INT 9
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 25
28368: PUSH
28369: LD_INT 8
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PPUSH
28386: CALL_OW 69
28390: PUSH
28391: FOR_IN
28392: IFFALSE 28408
// begin SetClass ( i , 1 ) ;
28394: LD_VAR 0 1
28398: PPUSH
28399: LD_INT 1
28401: PPUSH
28402: CALL_OW 336
// end ;
28406: GO 28391
28408: POP
28409: POP
// end ;
28410: PPOPN 1
28412: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28413: LD_EXP 51
28417: PUSH
28418: LD_EXP 55
28422: AND
28423: PUSH
28424: LD_OWVAR 65
28428: PUSH
28429: LD_INT 7
28431: LESS
28432: AND
28433: IFFALSE 28447
28435: GO 28437
28437: DISABLE
// begin enable ;
28438: ENABLE
// game_speed := 7 ;
28439: LD_ADDR_OWVAR 65
28443: PUSH
28444: LD_INT 7
28446: ST_TO_ADDR
// end ;
28447: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28448: LD_EXP 51
28452: PUSH
28453: LD_EXP 58
28457: AND
28458: IFFALSE 28660
28460: GO 28462
28462: DISABLE
28463: LD_INT 0
28465: PPUSH
28466: PPUSH
28467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28468: LD_ADDR_VAR 0 3
28472: PUSH
28473: LD_INT 81
28475: PUSH
28476: LD_OWVAR 2
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 21
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PPUSH
28499: CALL_OW 69
28503: ST_TO_ADDR
// if not tmp then
28504: LD_VAR 0 3
28508: NOT
28509: IFFALSE 28513
// exit ;
28511: GO 28660
// if tmp > 5 then
28513: LD_VAR 0 3
28517: PUSH
28518: LD_INT 5
28520: GREATER
28521: IFFALSE 28533
// k := 5 else
28523: LD_ADDR_VAR 0 2
28527: PUSH
28528: LD_INT 5
28530: ST_TO_ADDR
28531: GO 28543
// k := tmp ;
28533: LD_ADDR_VAR 0 2
28537: PUSH
28538: LD_VAR 0 3
28542: ST_TO_ADDR
// for i := 1 to k do
28543: LD_ADDR_VAR 0 1
28547: PUSH
28548: DOUBLE
28549: LD_INT 1
28551: DEC
28552: ST_TO_ADDR
28553: LD_VAR 0 2
28557: PUSH
28558: FOR_TO
28559: IFFALSE 28658
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28561: LD_VAR 0 3
28565: PUSH
28566: LD_VAR 0 1
28570: ARRAY
28571: PPUSH
28572: LD_VAR 0 1
28576: PUSH
28577: LD_INT 4
28579: MOD
28580: PUSH
28581: LD_INT 1
28583: PLUS
28584: PPUSH
28585: CALL_OW 259
28589: PUSH
28590: LD_INT 10
28592: LESS
28593: IFFALSE 28656
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28595: LD_VAR 0 3
28599: PUSH
28600: LD_VAR 0 1
28604: ARRAY
28605: PPUSH
28606: LD_VAR 0 1
28610: PUSH
28611: LD_INT 4
28613: MOD
28614: PUSH
28615: LD_INT 1
28617: PLUS
28618: PPUSH
28619: LD_VAR 0 3
28623: PUSH
28624: LD_VAR 0 1
28628: ARRAY
28629: PPUSH
28630: LD_VAR 0 1
28634: PUSH
28635: LD_INT 4
28637: MOD
28638: PUSH
28639: LD_INT 1
28641: PLUS
28642: PPUSH
28643: CALL_OW 259
28647: PUSH
28648: LD_INT 1
28650: PLUS
28651: PPUSH
28652: CALL_OW 237
28656: GO 28558
28658: POP
28659: POP
// end ;
28660: PPOPN 3
28662: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28663: LD_EXP 51
28667: PUSH
28668: LD_EXP 59
28672: AND
28673: IFFALSE 28693
28675: GO 28677
28677: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28678: LD_INT 4
28680: PPUSH
28681: LD_OWVAR 2
28685: PPUSH
28686: LD_INT 0
28688: PPUSH
28689: CALL_OW 324
28693: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28694: LD_EXP 51
28698: PUSH
28699: LD_EXP 88
28703: AND
28704: IFFALSE 28724
28706: GO 28708
28708: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28709: LD_INT 19
28711: PPUSH
28712: LD_OWVAR 2
28716: PPUSH
28717: LD_INT 0
28719: PPUSH
28720: CALL_OW 324
28724: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28725: LD_EXP 51
28729: PUSH
28730: LD_EXP 60
28734: AND
28735: IFFALSE 28837
28737: GO 28739
28739: DISABLE
28740: LD_INT 0
28742: PPUSH
28743: PPUSH
// begin enable ;
28744: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28745: LD_ADDR_VAR 0 2
28749: PUSH
28750: LD_INT 22
28752: PUSH
28753: LD_OWVAR 2
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: LD_INT 34
28767: PUSH
28768: LD_INT 11
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 34
28777: PUSH
28778: LD_INT 30
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: LIST
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PPUSH
28794: CALL_OW 69
28798: ST_TO_ADDR
// if not tmp then
28799: LD_VAR 0 2
28803: NOT
28804: IFFALSE 28808
// exit ;
28806: GO 28837
// for i in tmp do
28808: LD_ADDR_VAR 0 1
28812: PUSH
28813: LD_VAR 0 2
28817: PUSH
28818: FOR_IN
28819: IFFALSE 28835
// begin SetLives ( i , 0 ) ;
28821: LD_VAR 0 1
28825: PPUSH
28826: LD_INT 0
28828: PPUSH
28829: CALL_OW 234
// end ;
28833: GO 28818
28835: POP
28836: POP
// end ;
28837: PPOPN 2
28839: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28840: LD_EXP 51
28844: PUSH
28845: LD_EXP 61
28849: AND
28850: IFFALSE 28870
28852: GO 28854
28854: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28855: LD_INT 32
28857: PPUSH
28858: LD_OWVAR 2
28862: PPUSH
28863: LD_INT 0
28865: PPUSH
28866: CALL_OW 324
28870: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28871: LD_EXP 51
28875: PUSH
28876: LD_EXP 62
28880: AND
28881: IFFALSE 29062
28883: GO 28885
28885: DISABLE
28886: LD_INT 0
28888: PPUSH
28889: PPUSH
28890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28891: LD_ADDR_VAR 0 2
28895: PUSH
28896: LD_INT 22
28898: PUSH
28899: LD_OWVAR 2
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 33
28910: PUSH
28911: LD_INT 3
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PPUSH
28922: CALL_OW 69
28926: ST_TO_ADDR
// if not tmp then
28927: LD_VAR 0 2
28931: NOT
28932: IFFALSE 28936
// exit ;
28934: GO 29062
// side := 0 ;
28936: LD_ADDR_VAR 0 3
28940: PUSH
28941: LD_INT 0
28943: ST_TO_ADDR
// for i := 1 to 8 do
28944: LD_ADDR_VAR 0 1
28948: PUSH
28949: DOUBLE
28950: LD_INT 1
28952: DEC
28953: ST_TO_ADDR
28954: LD_INT 8
28956: PUSH
28957: FOR_TO
28958: IFFALSE 29006
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28960: LD_OWVAR 2
28964: PUSH
28965: LD_VAR 0 1
28969: NONEQUAL
28970: PUSH
28971: LD_OWVAR 2
28975: PPUSH
28976: LD_VAR 0 1
28980: PPUSH
28981: CALL_OW 81
28985: PUSH
28986: LD_INT 2
28988: EQUAL
28989: AND
28990: IFFALSE 29004
// begin side := i ;
28992: LD_ADDR_VAR 0 3
28996: PUSH
28997: LD_VAR 0 1
29001: ST_TO_ADDR
// break ;
29002: GO 29006
// end ;
29004: GO 28957
29006: POP
29007: POP
// if not side then
29008: LD_VAR 0 3
29012: NOT
29013: IFFALSE 29017
// exit ;
29015: GO 29062
// for i := 1 to tmp do
29017: LD_ADDR_VAR 0 1
29021: PUSH
29022: DOUBLE
29023: LD_INT 1
29025: DEC
29026: ST_TO_ADDR
29027: LD_VAR 0 2
29031: PUSH
29032: FOR_TO
29033: IFFALSE 29060
// if Prob ( 60 ) then
29035: LD_INT 60
29037: PPUSH
29038: CALL_OW 13
29042: IFFALSE 29058
// SetSide ( i , side ) ;
29044: LD_VAR 0 1
29048: PPUSH
29049: LD_VAR 0 3
29053: PPUSH
29054: CALL_OW 235
29058: GO 29032
29060: POP
29061: POP
// end ;
29062: PPOPN 3
29064: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
29065: LD_EXP 51
29069: PUSH
29070: LD_EXP 64
29074: AND
29075: IFFALSE 29194
29077: GO 29079
29079: DISABLE
29080: LD_INT 0
29082: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
29083: LD_ADDR_VAR 0 1
29087: PUSH
29088: LD_INT 22
29090: PUSH
29091: LD_OWVAR 2
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 21
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 3
29112: PUSH
29113: LD_INT 23
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: LIST
29131: PPUSH
29132: CALL_OW 69
29136: PUSH
29137: FOR_IN
29138: IFFALSE 29192
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29140: LD_VAR 0 1
29144: PPUSH
29145: CALL_OW 257
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 2
29155: PUSH
29156: LD_INT 3
29158: PUSH
29159: LD_INT 4
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: IN
29168: IFFALSE 29190
// SetClass ( un , rand ( 1 , 4 ) ) ;
29170: LD_VAR 0 1
29174: PPUSH
29175: LD_INT 1
29177: PPUSH
29178: LD_INT 4
29180: PPUSH
29181: CALL_OW 12
29185: PPUSH
29186: CALL_OW 336
29190: GO 29137
29192: POP
29193: POP
// end ;
29194: PPOPN 1
29196: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29197: LD_EXP 51
29201: PUSH
29202: LD_EXP 63
29206: AND
29207: IFFALSE 29286
29209: GO 29211
29211: DISABLE
29212: LD_INT 0
29214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29215: LD_ADDR_VAR 0 1
29219: PUSH
29220: LD_INT 22
29222: PUSH
29223: LD_OWVAR 2
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 21
29234: PUSH
29235: LD_INT 3
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PPUSH
29246: CALL_OW 69
29250: ST_TO_ADDR
// if not tmp then
29251: LD_VAR 0 1
29255: NOT
29256: IFFALSE 29260
// exit ;
29258: GO 29286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29260: LD_VAR 0 1
29264: PUSH
29265: LD_INT 1
29267: PPUSH
29268: LD_VAR 0 1
29272: PPUSH
29273: CALL_OW 12
29277: ARRAY
29278: PPUSH
29279: LD_INT 100
29281: PPUSH
29282: CALL_OW 234
// end ;
29286: PPOPN 1
29288: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29289: LD_EXP 51
29293: PUSH
29294: LD_EXP 65
29298: AND
29299: IFFALSE 29397
29301: GO 29303
29303: DISABLE
29304: LD_INT 0
29306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29307: LD_ADDR_VAR 0 1
29311: PUSH
29312: LD_INT 22
29314: PUSH
29315: LD_OWVAR 2
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 21
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PPUSH
29338: CALL_OW 69
29342: ST_TO_ADDR
// if not tmp then
29343: LD_VAR 0 1
29347: NOT
29348: IFFALSE 29352
// exit ;
29350: GO 29397
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29352: LD_VAR 0 1
29356: PUSH
29357: LD_INT 1
29359: PPUSH
29360: LD_VAR 0 1
29364: PPUSH
29365: CALL_OW 12
29369: ARRAY
29370: PPUSH
29371: LD_INT 1
29373: PPUSH
29374: LD_INT 4
29376: PPUSH
29377: CALL_OW 12
29381: PPUSH
29382: LD_INT 3000
29384: PPUSH
29385: LD_INT 9000
29387: PPUSH
29388: CALL_OW 12
29392: PPUSH
29393: CALL_OW 492
// end ;
29397: PPOPN 1
29399: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29400: LD_EXP 51
29404: PUSH
29405: LD_EXP 66
29409: AND
29410: IFFALSE 29430
29412: GO 29414
29414: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29415: LD_INT 1
29417: PPUSH
29418: LD_OWVAR 2
29422: PPUSH
29423: LD_INT 0
29425: PPUSH
29426: CALL_OW 324
29430: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29431: LD_EXP 51
29435: PUSH
29436: LD_EXP 67
29440: AND
29441: IFFALSE 29524
29443: GO 29445
29445: DISABLE
29446: LD_INT 0
29448: PPUSH
29449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29450: LD_ADDR_VAR 0 2
29454: PUSH
29455: LD_INT 22
29457: PUSH
29458: LD_OWVAR 2
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 21
29469: PUSH
29470: LD_INT 3
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PPUSH
29481: CALL_OW 69
29485: ST_TO_ADDR
// if not tmp then
29486: LD_VAR 0 2
29490: NOT
29491: IFFALSE 29495
// exit ;
29493: GO 29524
// for i in tmp do
29495: LD_ADDR_VAR 0 1
29499: PUSH
29500: LD_VAR 0 2
29504: PUSH
29505: FOR_IN
29506: IFFALSE 29522
// SetBLevel ( i , 10 ) ;
29508: LD_VAR 0 1
29512: PPUSH
29513: LD_INT 10
29515: PPUSH
29516: CALL_OW 241
29520: GO 29505
29522: POP
29523: POP
// end ;
29524: PPOPN 2
29526: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29527: LD_EXP 51
29531: PUSH
29532: LD_EXP 68
29536: AND
29537: IFFALSE 29648
29539: GO 29541
29541: DISABLE
29542: LD_INT 0
29544: PPUSH
29545: PPUSH
29546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29547: LD_ADDR_VAR 0 3
29551: PUSH
29552: LD_INT 22
29554: PUSH
29555: LD_OWVAR 2
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 25
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PPUSH
29578: CALL_OW 69
29582: ST_TO_ADDR
// if not tmp then
29583: LD_VAR 0 3
29587: NOT
29588: IFFALSE 29592
// exit ;
29590: GO 29648
// un := tmp [ rand ( 1 , tmp ) ] ;
29592: LD_ADDR_VAR 0 2
29596: PUSH
29597: LD_VAR 0 3
29601: PUSH
29602: LD_INT 1
29604: PPUSH
29605: LD_VAR 0 3
29609: PPUSH
29610: CALL_OW 12
29614: ARRAY
29615: ST_TO_ADDR
// if Crawls ( un ) then
29616: LD_VAR 0 2
29620: PPUSH
29621: CALL_OW 318
29625: IFFALSE 29636
// ComWalk ( un ) ;
29627: LD_VAR 0 2
29631: PPUSH
29632: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29636: LD_VAR 0 2
29640: PPUSH
29641: LD_INT 5
29643: PPUSH
29644: CALL_OW 336
// end ;
29648: PPOPN 3
29650: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29651: LD_EXP 51
29655: PUSH
29656: LD_EXP 69
29660: AND
29661: PUSH
29662: LD_OWVAR 67
29666: PUSH
29667: LD_INT 4
29669: LESS
29670: AND
29671: IFFALSE 29690
29673: GO 29675
29675: DISABLE
// begin Difficulty := Difficulty + 1 ;
29676: LD_ADDR_OWVAR 67
29680: PUSH
29681: LD_OWVAR 67
29685: PUSH
29686: LD_INT 1
29688: PLUS
29689: ST_TO_ADDR
// end ;
29690: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29691: LD_EXP 51
29695: PUSH
29696: LD_EXP 70
29700: AND
29701: IFFALSE 29804
29703: GO 29705
29705: DISABLE
29706: LD_INT 0
29708: PPUSH
// begin for i := 1 to 5 do
29709: LD_ADDR_VAR 0 1
29713: PUSH
29714: DOUBLE
29715: LD_INT 1
29717: DEC
29718: ST_TO_ADDR
29719: LD_INT 5
29721: PUSH
29722: FOR_TO
29723: IFFALSE 29802
// begin uc_nation := nation_nature ;
29725: LD_ADDR_OWVAR 21
29729: PUSH
29730: LD_INT 0
29732: ST_TO_ADDR
// uc_side := 0 ;
29733: LD_ADDR_OWVAR 20
29737: PUSH
29738: LD_INT 0
29740: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29741: LD_ADDR_OWVAR 29
29745: PUSH
29746: LD_INT 12
29748: PUSH
29749: LD_INT 12
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: ST_TO_ADDR
// hc_agressivity := 20 ;
29756: LD_ADDR_OWVAR 35
29760: PUSH
29761: LD_INT 20
29763: ST_TO_ADDR
// hc_class := class_tiger ;
29764: LD_ADDR_OWVAR 28
29768: PUSH
29769: LD_INT 14
29771: ST_TO_ADDR
// hc_gallery :=  ;
29772: LD_ADDR_OWVAR 33
29776: PUSH
29777: LD_STRING 
29779: ST_TO_ADDR
// hc_name :=  ;
29780: LD_ADDR_OWVAR 26
29784: PUSH
29785: LD_STRING 
29787: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29788: CALL_OW 44
29792: PPUSH
29793: LD_INT 0
29795: PPUSH
29796: CALL_OW 51
// end ;
29800: GO 29722
29802: POP
29803: POP
// end ;
29804: PPOPN 1
29806: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29807: LD_EXP 51
29811: PUSH
29812: LD_EXP 71
29816: AND
29817: IFFALSE 29826
29819: GO 29821
29821: DISABLE
// StreamSibBomb ;
29822: CALL 29827 0 0
29826: END
// export function StreamSibBomb ; var i , x , y ; begin
29827: LD_INT 0
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
// result := false ;
29833: LD_ADDR_VAR 0 1
29837: PUSH
29838: LD_INT 0
29840: ST_TO_ADDR
// for i := 1 to 16 do
29841: LD_ADDR_VAR 0 2
29845: PUSH
29846: DOUBLE
29847: LD_INT 1
29849: DEC
29850: ST_TO_ADDR
29851: LD_INT 16
29853: PUSH
29854: FOR_TO
29855: IFFALSE 30054
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29857: LD_ADDR_VAR 0 3
29861: PUSH
29862: LD_INT 10
29864: PUSH
29865: LD_INT 20
29867: PUSH
29868: LD_INT 30
29870: PUSH
29871: LD_INT 40
29873: PUSH
29874: LD_INT 50
29876: PUSH
29877: LD_INT 60
29879: PUSH
29880: LD_INT 70
29882: PUSH
29883: LD_INT 80
29885: PUSH
29886: LD_INT 90
29888: PUSH
29889: LD_INT 100
29891: PUSH
29892: LD_INT 110
29894: PUSH
29895: LD_INT 120
29897: PUSH
29898: LD_INT 130
29900: PUSH
29901: LD_INT 140
29903: PUSH
29904: LD_INT 150
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: PPUSH
29927: LD_INT 15
29929: PPUSH
29930: CALL_OW 12
29934: ARRAY
29935: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29936: LD_ADDR_VAR 0 4
29940: PUSH
29941: LD_INT 10
29943: PUSH
29944: LD_INT 20
29946: PUSH
29947: LD_INT 30
29949: PUSH
29950: LD_INT 40
29952: PUSH
29953: LD_INT 50
29955: PUSH
29956: LD_INT 60
29958: PUSH
29959: LD_INT 70
29961: PUSH
29962: LD_INT 80
29964: PUSH
29965: LD_INT 90
29967: PUSH
29968: LD_INT 100
29970: PUSH
29971: LD_INT 110
29973: PUSH
29974: LD_INT 120
29976: PUSH
29977: LD_INT 130
29979: PUSH
29980: LD_INT 140
29982: PUSH
29983: LD_INT 150
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 1
30005: PPUSH
30006: LD_INT 15
30008: PPUSH
30009: CALL_OW 12
30013: ARRAY
30014: ST_TO_ADDR
// if ValidHex ( x , y ) then
30015: LD_VAR 0 3
30019: PPUSH
30020: LD_VAR 0 4
30024: PPUSH
30025: CALL_OW 488
30029: IFFALSE 30052
// begin result := [ x , y ] ;
30031: LD_ADDR_VAR 0 1
30035: PUSH
30036: LD_VAR 0 3
30040: PUSH
30041: LD_VAR 0 4
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: ST_TO_ADDR
// break ;
30050: GO 30054
// end ; end ;
30052: GO 29854
30054: POP
30055: POP
// if result then
30056: LD_VAR 0 1
30060: IFFALSE 30120
// begin ToLua ( playSibBomb() ) ;
30062: LD_STRING playSibBomb()
30064: PPUSH
30065: CALL_OW 559
// wait ( 0 0$14 ) ;
30069: LD_INT 490
30071: PPUSH
30072: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
30076: LD_VAR 0 1
30080: PUSH
30081: LD_INT 1
30083: ARRAY
30084: PPUSH
30085: LD_VAR 0 1
30089: PUSH
30090: LD_INT 2
30092: ARRAY
30093: PPUSH
30094: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30098: LD_VAR 0 1
30102: PUSH
30103: LD_INT 1
30105: ARRAY
30106: PPUSH
30107: LD_VAR 0 1
30111: PUSH
30112: LD_INT 2
30114: ARRAY
30115: PPUSH
30116: CALL_OW 429
// end ; end ;
30120: LD_VAR 0 1
30124: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30125: LD_EXP 51
30129: PUSH
30130: LD_EXP 73
30134: AND
30135: IFFALSE 30147
30137: GO 30139
30139: DISABLE
// YouLost (  ) ;
30140: LD_STRING 
30142: PPUSH
30143: CALL_OW 104
30147: END
// every 0 0$1 trigger StreamModeActive and sFog do
30148: LD_EXP 51
30152: PUSH
30153: LD_EXP 72
30157: AND
30158: IFFALSE 30172
30160: GO 30162
30162: DISABLE
// FogOff ( your_side ) ;
30163: LD_OWVAR 2
30167: PPUSH
30168: CALL_OW 344
30172: END
// every 0 0$1 trigger StreamModeActive and sSun do
30173: LD_EXP 51
30177: PUSH
30178: LD_EXP 74
30182: AND
30183: IFFALSE 30211
30185: GO 30187
30187: DISABLE
// begin solar_recharge_percent := 0 ;
30188: LD_ADDR_OWVAR 79
30192: PUSH
30193: LD_INT 0
30195: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30196: LD_INT 10500
30198: PPUSH
30199: CALL_OW 67
// solar_recharge_percent := 100 ;
30203: LD_ADDR_OWVAR 79
30207: PUSH
30208: LD_INT 100
30210: ST_TO_ADDR
// end ;
30211: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30212: LD_EXP 51
30216: PUSH
30217: LD_EXP 75
30221: AND
30222: IFFALSE 30461
30224: GO 30226
30226: DISABLE
30227: LD_INT 0
30229: PPUSH
30230: PPUSH
30231: PPUSH
// begin tmp := [ ] ;
30232: LD_ADDR_VAR 0 3
30236: PUSH
30237: EMPTY
30238: ST_TO_ADDR
// for i := 1 to 6 do
30239: LD_ADDR_VAR 0 1
30243: PUSH
30244: DOUBLE
30245: LD_INT 1
30247: DEC
30248: ST_TO_ADDR
30249: LD_INT 6
30251: PUSH
30252: FOR_TO
30253: IFFALSE 30358
// begin uc_nation := nation_nature ;
30255: LD_ADDR_OWVAR 21
30259: PUSH
30260: LD_INT 0
30262: ST_TO_ADDR
// uc_side := 0 ;
30263: LD_ADDR_OWVAR 20
30267: PUSH
30268: LD_INT 0
30270: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30271: LD_ADDR_OWVAR 29
30275: PUSH
30276: LD_INT 12
30278: PUSH
30279: LD_INT 12
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: ST_TO_ADDR
// hc_agressivity := 20 ;
30286: LD_ADDR_OWVAR 35
30290: PUSH
30291: LD_INT 20
30293: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30294: LD_ADDR_OWVAR 28
30298: PUSH
30299: LD_INT 17
30301: ST_TO_ADDR
// hc_gallery :=  ;
30302: LD_ADDR_OWVAR 33
30306: PUSH
30307: LD_STRING 
30309: ST_TO_ADDR
// hc_name :=  ;
30310: LD_ADDR_OWVAR 26
30314: PUSH
30315: LD_STRING 
30317: ST_TO_ADDR
// un := CreateHuman ;
30318: LD_ADDR_VAR 0 2
30322: PUSH
30323: CALL_OW 44
30327: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30328: LD_VAR 0 2
30332: PPUSH
30333: LD_INT 1
30335: PPUSH
30336: CALL_OW 51
// tmp := tmp ^ un ;
30340: LD_ADDR_VAR 0 3
30344: PUSH
30345: LD_VAR 0 3
30349: PUSH
30350: LD_VAR 0 2
30354: ADD
30355: ST_TO_ADDR
// end ;
30356: GO 30252
30358: POP
30359: POP
// repeat wait ( 0 0$1 ) ;
30360: LD_INT 35
30362: PPUSH
30363: CALL_OW 67
// for un in tmp do
30367: LD_ADDR_VAR 0 2
30371: PUSH
30372: LD_VAR 0 3
30376: PUSH
30377: FOR_IN
30378: IFFALSE 30452
// begin if IsDead ( un ) then
30380: LD_VAR 0 2
30384: PPUSH
30385: CALL_OW 301
30389: IFFALSE 30409
// begin tmp := tmp diff un ;
30391: LD_ADDR_VAR 0 3
30395: PUSH
30396: LD_VAR 0 3
30400: PUSH
30401: LD_VAR 0 2
30405: DIFF
30406: ST_TO_ADDR
// continue ;
30407: GO 30377
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30409: LD_VAR 0 2
30413: PPUSH
30414: LD_INT 3
30416: PUSH
30417: LD_INT 22
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PPUSH
30431: CALL_OW 69
30435: PPUSH
30436: LD_VAR 0 2
30440: PPUSH
30441: CALL_OW 74
30445: PPUSH
30446: CALL_OW 115
// end ;
30450: GO 30377
30452: POP
30453: POP
// until not tmp ;
30454: LD_VAR 0 3
30458: NOT
30459: IFFALSE 30360
// end ;
30461: PPOPN 3
30463: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30464: LD_EXP 51
30468: PUSH
30469: LD_EXP 76
30473: AND
30474: IFFALSE 30528
30476: GO 30478
30478: DISABLE
// begin ToLua ( displayTroll(); ) ;
30479: LD_STRING displayTroll();
30481: PPUSH
30482: CALL_OW 559
// wait ( 3 3$00 ) ;
30486: LD_INT 6300
30488: PPUSH
30489: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30493: LD_STRING hideTroll();
30495: PPUSH
30496: CALL_OW 559
// wait ( 1 1$00 ) ;
30500: LD_INT 2100
30502: PPUSH
30503: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30507: LD_STRING displayTroll();
30509: PPUSH
30510: CALL_OW 559
// wait ( 1 1$00 ) ;
30514: LD_INT 2100
30516: PPUSH
30517: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30521: LD_STRING hideTroll();
30523: PPUSH
30524: CALL_OW 559
// end ;
30528: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30529: LD_EXP 51
30533: PUSH
30534: LD_EXP 77
30538: AND
30539: IFFALSE 30602
30541: GO 30543
30543: DISABLE
30544: LD_INT 0
30546: PPUSH
// begin p := 0 ;
30547: LD_ADDR_VAR 0 1
30551: PUSH
30552: LD_INT 0
30554: ST_TO_ADDR
// repeat game_speed := 1 ;
30555: LD_ADDR_OWVAR 65
30559: PUSH
30560: LD_INT 1
30562: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30563: LD_INT 35
30565: PPUSH
30566: CALL_OW 67
// p := p + 1 ;
30570: LD_ADDR_VAR 0 1
30574: PUSH
30575: LD_VAR 0 1
30579: PUSH
30580: LD_INT 1
30582: PLUS
30583: ST_TO_ADDR
// until p >= 60 ;
30584: LD_VAR 0 1
30588: PUSH
30589: LD_INT 60
30591: GREATEREQUAL
30592: IFFALSE 30555
// game_speed := 4 ;
30594: LD_ADDR_OWVAR 65
30598: PUSH
30599: LD_INT 4
30601: ST_TO_ADDR
// end ;
30602: PPOPN 1
30604: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30605: LD_EXP 51
30609: PUSH
30610: LD_EXP 78
30614: AND
30615: IFFALSE 30761
30617: GO 30619
30619: DISABLE
30620: LD_INT 0
30622: PPUSH
30623: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30624: LD_ADDR_VAR 0 1
30628: PUSH
30629: LD_INT 22
30631: PUSH
30632: LD_OWVAR 2
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 2
30643: PUSH
30644: LD_INT 30
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 30
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 69
30677: ST_TO_ADDR
// if not depot then
30678: LD_VAR 0 1
30682: NOT
30683: IFFALSE 30687
// exit ;
30685: GO 30761
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30687: LD_ADDR_VAR 0 2
30691: PUSH
30692: LD_VAR 0 1
30696: PUSH
30697: LD_INT 1
30699: PPUSH
30700: LD_VAR 0 1
30704: PPUSH
30705: CALL_OW 12
30709: ARRAY
30710: PPUSH
30711: CALL_OW 274
30715: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30716: LD_VAR 0 2
30720: PPUSH
30721: LD_INT 1
30723: PPUSH
30724: LD_INT 0
30726: PPUSH
30727: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30731: LD_VAR 0 2
30735: PPUSH
30736: LD_INT 2
30738: PPUSH
30739: LD_INT 0
30741: PPUSH
30742: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30746: LD_VAR 0 2
30750: PPUSH
30751: LD_INT 3
30753: PPUSH
30754: LD_INT 0
30756: PPUSH
30757: CALL_OW 277
// end ;
30761: PPOPN 2
30763: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30764: LD_EXP 51
30768: PUSH
30769: LD_EXP 79
30773: AND
30774: IFFALSE 30871
30776: GO 30778
30778: DISABLE
30779: LD_INT 0
30781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30782: LD_ADDR_VAR 0 1
30786: PUSH
30787: LD_INT 22
30789: PUSH
30790: LD_OWVAR 2
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 21
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 3
30811: PUSH
30812: LD_INT 23
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: PPUSH
30831: CALL_OW 69
30835: ST_TO_ADDR
// if not tmp then
30836: LD_VAR 0 1
30840: NOT
30841: IFFALSE 30845
// exit ;
30843: GO 30871
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30845: LD_VAR 0 1
30849: PUSH
30850: LD_INT 1
30852: PPUSH
30853: LD_VAR 0 1
30857: PPUSH
30858: CALL_OW 12
30862: ARRAY
30863: PPUSH
30864: LD_INT 200
30866: PPUSH
30867: CALL_OW 234
// end ;
30871: PPOPN 1
30873: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30874: LD_EXP 51
30878: PUSH
30879: LD_EXP 80
30883: AND
30884: IFFALSE 30963
30886: GO 30888
30888: DISABLE
30889: LD_INT 0
30891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30892: LD_ADDR_VAR 0 1
30896: PUSH
30897: LD_INT 22
30899: PUSH
30900: LD_OWVAR 2
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 21
30911: PUSH
30912: LD_INT 2
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PPUSH
30923: CALL_OW 69
30927: ST_TO_ADDR
// if not tmp then
30928: LD_VAR 0 1
30932: NOT
30933: IFFALSE 30937
// exit ;
30935: GO 30963
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30937: LD_VAR 0 1
30941: PUSH
30942: LD_INT 1
30944: PPUSH
30945: LD_VAR 0 1
30949: PPUSH
30950: CALL_OW 12
30954: ARRAY
30955: PPUSH
30956: LD_INT 60
30958: PPUSH
30959: CALL_OW 234
// end ;
30963: PPOPN 1
30965: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30966: LD_EXP 51
30970: PUSH
30971: LD_EXP 81
30975: AND
30976: IFFALSE 31075
30978: GO 30980
30980: DISABLE
30981: LD_INT 0
30983: PPUSH
30984: PPUSH
// begin enable ;
30985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30986: LD_ADDR_VAR 0 1
30990: PUSH
30991: LD_INT 22
30993: PUSH
30994: LD_OWVAR 2
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 61
31005: PUSH
31006: EMPTY
31007: LIST
31008: PUSH
31009: LD_INT 33
31011: PUSH
31012: LD_INT 2
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: LIST
31023: PPUSH
31024: CALL_OW 69
31028: ST_TO_ADDR
// if not tmp then
31029: LD_VAR 0 1
31033: NOT
31034: IFFALSE 31038
// exit ;
31036: GO 31075
// for i in tmp do
31038: LD_ADDR_VAR 0 2
31042: PUSH
31043: LD_VAR 0 1
31047: PUSH
31048: FOR_IN
31049: IFFALSE 31073
// if IsControledBy ( i ) then
31051: LD_VAR 0 2
31055: PPUSH
31056: CALL_OW 312
31060: IFFALSE 31071
// ComUnlink ( i ) ;
31062: LD_VAR 0 2
31066: PPUSH
31067: CALL_OW 136
31071: GO 31048
31073: POP
31074: POP
// end ;
31075: PPOPN 2
31077: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
31078: LD_EXP 51
31082: PUSH
31083: LD_EXP 82
31087: AND
31088: IFFALSE 31228
31090: GO 31092
31092: DISABLE
31093: LD_INT 0
31095: PPUSH
31096: PPUSH
// begin ToLua ( displayPowell(); ) ;
31097: LD_STRING displayPowell();
31099: PPUSH
31100: CALL_OW 559
// uc_side := 0 ;
31104: LD_ADDR_OWVAR 20
31108: PUSH
31109: LD_INT 0
31111: ST_TO_ADDR
// uc_nation := 2 ;
31112: LD_ADDR_OWVAR 21
31116: PUSH
31117: LD_INT 2
31119: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31120: LD_ADDR_OWVAR 37
31124: PUSH
31125: LD_INT 14
31127: ST_TO_ADDR
// vc_engine := engine_siberite ;
31128: LD_ADDR_OWVAR 39
31132: PUSH
31133: LD_INT 3
31135: ST_TO_ADDR
// vc_control := control_apeman ;
31136: LD_ADDR_OWVAR 38
31140: PUSH
31141: LD_INT 5
31143: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31144: LD_ADDR_OWVAR 40
31148: PUSH
31149: LD_INT 29
31151: ST_TO_ADDR
// un := CreateVehicle ;
31152: LD_ADDR_VAR 0 2
31156: PUSH
31157: CALL_OW 45
31161: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31162: LD_VAR 0 2
31166: PPUSH
31167: LD_INT 1
31169: PPUSH
31170: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31174: LD_INT 35
31176: PPUSH
31177: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31181: LD_VAR 0 2
31185: PPUSH
31186: LD_INT 22
31188: PUSH
31189: LD_OWVAR 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PPUSH
31198: CALL_OW 69
31202: PPUSH
31203: LD_VAR 0 2
31207: PPUSH
31208: CALL_OW 74
31212: PPUSH
31213: CALL_OW 115
// until IsDead ( un ) ;
31217: LD_VAR 0 2
31221: PPUSH
31222: CALL_OW 301
31226: IFFALSE 31174
// end ;
31228: PPOPN 2
31230: END
// every 0 0$1 trigger StreamModeActive and sStu do
31231: LD_EXP 51
31235: PUSH
31236: LD_EXP 90
31240: AND
31241: IFFALSE 31257
31243: GO 31245
31245: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31246: LD_STRING displayStucuk();
31248: PPUSH
31249: CALL_OW 559
// ResetFog ;
31253: CALL_OW 335
// end ;
31257: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31258: LD_EXP 51
31262: PUSH
31263: LD_EXP 83
31267: AND
31268: IFFALSE 31409
31270: GO 31272
31272: DISABLE
31273: LD_INT 0
31275: PPUSH
31276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31277: LD_ADDR_VAR 0 2
31281: PUSH
31282: LD_INT 22
31284: PUSH
31285: LD_OWVAR 2
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 21
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PPUSH
31308: CALL_OW 69
31312: ST_TO_ADDR
// if not tmp then
31313: LD_VAR 0 2
31317: NOT
31318: IFFALSE 31322
// exit ;
31320: GO 31409
// un := tmp [ rand ( 1 , tmp ) ] ;
31322: LD_ADDR_VAR 0 1
31326: PUSH
31327: LD_VAR 0 2
31331: PUSH
31332: LD_INT 1
31334: PPUSH
31335: LD_VAR 0 2
31339: PPUSH
31340: CALL_OW 12
31344: ARRAY
31345: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31346: LD_VAR 0 1
31350: PPUSH
31351: LD_INT 0
31353: PPUSH
31354: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31358: LD_VAR 0 1
31362: PPUSH
31363: LD_OWVAR 3
31367: PUSH
31368: LD_VAR 0 1
31372: DIFF
31373: PPUSH
31374: LD_VAR 0 1
31378: PPUSH
31379: CALL_OW 74
31383: PPUSH
31384: CALL_OW 115
// wait ( 0 0$20 ) ;
31388: LD_INT 700
31390: PPUSH
31391: CALL_OW 67
// SetSide ( un , your_side ) ;
31395: LD_VAR 0 1
31399: PPUSH
31400: LD_OWVAR 2
31404: PPUSH
31405: CALL_OW 235
// end ;
31409: PPOPN 2
31411: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31412: LD_EXP 51
31416: PUSH
31417: LD_EXP 84
31421: AND
31422: IFFALSE 31528
31424: GO 31426
31426: DISABLE
31427: LD_INT 0
31429: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31430: LD_ADDR_VAR 0 1
31434: PUSH
31435: LD_INT 22
31437: PUSH
31438: LD_OWVAR 2
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: LD_INT 30
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 30
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: LIST
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PPUSH
31479: CALL_OW 69
31483: ST_TO_ADDR
// if not depot then
31484: LD_VAR 0 1
31488: NOT
31489: IFFALSE 31493
// exit ;
31491: GO 31528
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31493: LD_VAR 0 1
31497: PUSH
31498: LD_INT 1
31500: ARRAY
31501: PPUSH
31502: CALL_OW 250
31506: PPUSH
31507: LD_VAR 0 1
31511: PUSH
31512: LD_INT 1
31514: ARRAY
31515: PPUSH
31516: CALL_OW 251
31520: PPUSH
31521: LD_INT 70
31523: PPUSH
31524: CALL_OW 495
// end ;
31528: PPOPN 1
31530: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31531: LD_EXP 51
31535: PUSH
31536: LD_EXP 85
31540: AND
31541: IFFALSE 31752
31543: GO 31545
31545: DISABLE
31546: LD_INT 0
31548: PPUSH
31549: PPUSH
31550: PPUSH
31551: PPUSH
31552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31553: LD_ADDR_VAR 0 5
31557: PUSH
31558: LD_INT 22
31560: PUSH
31561: LD_OWVAR 2
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 21
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PPUSH
31584: CALL_OW 69
31588: ST_TO_ADDR
// if not tmp then
31589: LD_VAR 0 5
31593: NOT
31594: IFFALSE 31598
// exit ;
31596: GO 31752
// for i in tmp do
31598: LD_ADDR_VAR 0 1
31602: PUSH
31603: LD_VAR 0 5
31607: PUSH
31608: FOR_IN
31609: IFFALSE 31750
// begin d := rand ( 0 , 5 ) ;
31611: LD_ADDR_VAR 0 4
31615: PUSH
31616: LD_INT 0
31618: PPUSH
31619: LD_INT 5
31621: PPUSH
31622: CALL_OW 12
31626: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31627: LD_ADDR_VAR 0 2
31631: PUSH
31632: LD_VAR 0 1
31636: PPUSH
31637: CALL_OW 250
31641: PPUSH
31642: LD_VAR 0 4
31646: PPUSH
31647: LD_INT 3
31649: PPUSH
31650: LD_INT 12
31652: PPUSH
31653: CALL_OW 12
31657: PPUSH
31658: CALL_OW 272
31662: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31663: LD_ADDR_VAR 0 3
31667: PUSH
31668: LD_VAR 0 1
31672: PPUSH
31673: CALL_OW 251
31677: PPUSH
31678: LD_VAR 0 4
31682: PPUSH
31683: LD_INT 3
31685: PPUSH
31686: LD_INT 12
31688: PPUSH
31689: CALL_OW 12
31693: PPUSH
31694: CALL_OW 273
31698: ST_TO_ADDR
// if ValidHex ( x , y ) then
31699: LD_VAR 0 2
31703: PPUSH
31704: LD_VAR 0 3
31708: PPUSH
31709: CALL_OW 488
31713: IFFALSE 31748
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31715: LD_VAR 0 1
31719: PPUSH
31720: LD_VAR 0 2
31724: PPUSH
31725: LD_VAR 0 3
31729: PPUSH
31730: LD_INT 3
31732: PPUSH
31733: LD_INT 6
31735: PPUSH
31736: CALL_OW 12
31740: PPUSH
31741: LD_INT 1
31743: PPUSH
31744: CALL_OW 483
// end ;
31748: GO 31608
31750: POP
31751: POP
// end ;
31752: PPOPN 5
31754: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31755: LD_EXP 51
31759: PUSH
31760: LD_EXP 86
31764: AND
31765: IFFALSE 31859
31767: GO 31769
31769: DISABLE
31770: LD_INT 0
31772: PPUSH
31773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31774: LD_ADDR_VAR 0 2
31778: PUSH
31779: LD_INT 22
31781: PUSH
31782: LD_OWVAR 2
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 32
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 21
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: PPUSH
31816: CALL_OW 69
31820: ST_TO_ADDR
// if not tmp then
31821: LD_VAR 0 2
31825: NOT
31826: IFFALSE 31830
// exit ;
31828: GO 31859
// for i in tmp do
31830: LD_ADDR_VAR 0 1
31834: PUSH
31835: LD_VAR 0 2
31839: PUSH
31840: FOR_IN
31841: IFFALSE 31857
// SetFuel ( i , 0 ) ;
31843: LD_VAR 0 1
31847: PPUSH
31848: LD_INT 0
31850: PPUSH
31851: CALL_OW 240
31855: GO 31840
31857: POP
31858: POP
// end ;
31859: PPOPN 2
31861: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31862: LD_EXP 51
31866: PUSH
31867: LD_EXP 87
31871: AND
31872: IFFALSE 31938
31874: GO 31876
31876: DISABLE
31877: LD_INT 0
31879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31880: LD_ADDR_VAR 0 1
31884: PUSH
31885: LD_INT 22
31887: PUSH
31888: LD_OWVAR 2
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 30
31899: PUSH
31900: LD_INT 29
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PPUSH
31911: CALL_OW 69
31915: ST_TO_ADDR
// if not tmp then
31916: LD_VAR 0 1
31920: NOT
31921: IFFALSE 31925
// exit ;
31923: GO 31938
// DestroyUnit ( tmp [ 1 ] ) ;
31925: LD_VAR 0 1
31929: PUSH
31930: LD_INT 1
31932: ARRAY
31933: PPUSH
31934: CALL_OW 65
// end ;
31938: PPOPN 1
31940: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31941: LD_EXP 51
31945: PUSH
31946: LD_EXP 89
31950: AND
31951: IFFALSE 32080
31953: GO 31955
31955: DISABLE
31956: LD_INT 0
31958: PPUSH
// begin uc_side := 0 ;
31959: LD_ADDR_OWVAR 20
31963: PUSH
31964: LD_INT 0
31966: ST_TO_ADDR
// uc_nation := nation_arabian ;
31967: LD_ADDR_OWVAR 21
31971: PUSH
31972: LD_INT 2
31974: ST_TO_ADDR
// hc_gallery :=  ;
31975: LD_ADDR_OWVAR 33
31979: PUSH
31980: LD_STRING 
31982: ST_TO_ADDR
// hc_name :=  ;
31983: LD_ADDR_OWVAR 26
31987: PUSH
31988: LD_STRING 
31990: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31991: LD_INT 1
31993: PPUSH
31994: LD_INT 11
31996: PPUSH
31997: LD_INT 10
31999: PPUSH
32000: CALL_OW 380
// un := CreateHuman ;
32004: LD_ADDR_VAR 0 1
32008: PUSH
32009: CALL_OW 44
32013: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32014: LD_VAR 0 1
32018: PPUSH
32019: LD_INT 1
32021: PPUSH
32022: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32026: LD_INT 35
32028: PPUSH
32029: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32033: LD_VAR 0 1
32037: PPUSH
32038: LD_INT 22
32040: PUSH
32041: LD_OWVAR 2
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PPUSH
32050: CALL_OW 69
32054: PPUSH
32055: LD_VAR 0 1
32059: PPUSH
32060: CALL_OW 74
32064: PPUSH
32065: CALL_OW 115
// until IsDead ( un ) ;
32069: LD_VAR 0 1
32073: PPUSH
32074: CALL_OW 301
32078: IFFALSE 32026
// end ;
32080: PPOPN 1
32082: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
32083: LD_EXP 51
32087: PUSH
32088: LD_EXP 91
32092: AND
32093: IFFALSE 32105
32095: GO 32097
32097: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32098: LD_STRING earthquake(getX(game), 0, 32)
32100: PPUSH
32101: CALL_OW 559
32105: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32106: LD_EXP 51
32110: PUSH
32111: LD_EXP 92
32115: AND
32116: IFFALSE 32207
32118: GO 32120
32120: DISABLE
32121: LD_INT 0
32123: PPUSH
// begin enable ;
32124: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32125: LD_ADDR_VAR 0 1
32129: PUSH
32130: LD_INT 22
32132: PUSH
32133: LD_OWVAR 2
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 21
32144: PUSH
32145: LD_INT 2
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 33
32154: PUSH
32155: LD_INT 3
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: LIST
32166: PPUSH
32167: CALL_OW 69
32171: ST_TO_ADDR
// if not tmp then
32172: LD_VAR 0 1
32176: NOT
32177: IFFALSE 32181
// exit ;
32179: GO 32207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32181: LD_VAR 0 1
32185: PUSH
32186: LD_INT 1
32188: PPUSH
32189: LD_VAR 0 1
32193: PPUSH
32194: CALL_OW 12
32198: ARRAY
32199: PPUSH
32200: LD_INT 1
32202: PPUSH
32203: CALL_OW 234
// end ;
32207: PPOPN 1
32209: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32210: LD_EXP 51
32214: PUSH
32215: LD_EXP 93
32219: AND
32220: IFFALSE 32361
32222: GO 32224
32224: DISABLE
32225: LD_INT 0
32227: PPUSH
32228: PPUSH
32229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32230: LD_ADDR_VAR 0 3
32234: PUSH
32235: LD_INT 22
32237: PUSH
32238: LD_OWVAR 2
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 25
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PPUSH
32261: CALL_OW 69
32265: ST_TO_ADDR
// if not tmp then
32266: LD_VAR 0 3
32270: NOT
32271: IFFALSE 32275
// exit ;
32273: GO 32361
// un := tmp [ rand ( 1 , tmp ) ] ;
32275: LD_ADDR_VAR 0 2
32279: PUSH
32280: LD_VAR 0 3
32284: PUSH
32285: LD_INT 1
32287: PPUSH
32288: LD_VAR 0 3
32292: PPUSH
32293: CALL_OW 12
32297: ARRAY
32298: ST_TO_ADDR
// if Crawls ( un ) then
32299: LD_VAR 0 2
32303: PPUSH
32304: CALL_OW 318
32308: IFFALSE 32319
// ComWalk ( un ) ;
32310: LD_VAR 0 2
32314: PPUSH
32315: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32319: LD_VAR 0 2
32323: PPUSH
32324: LD_INT 9
32326: PPUSH
32327: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32331: LD_INT 28
32333: PPUSH
32334: LD_OWVAR 2
32338: PPUSH
32339: LD_INT 2
32341: PPUSH
32342: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32346: LD_INT 29
32348: PPUSH
32349: LD_OWVAR 2
32353: PPUSH
32354: LD_INT 2
32356: PPUSH
32357: CALL_OW 322
// end ;
32361: PPOPN 3
32363: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32364: LD_EXP 51
32368: PUSH
32369: LD_EXP 94
32373: AND
32374: IFFALSE 32485
32376: GO 32378
32378: DISABLE
32379: LD_INT 0
32381: PPUSH
32382: PPUSH
32383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: LD_INT 22
32391: PUSH
32392: LD_OWVAR 2
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 25
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PPUSH
32415: CALL_OW 69
32419: ST_TO_ADDR
// if not tmp then
32420: LD_VAR 0 3
32424: NOT
32425: IFFALSE 32429
// exit ;
32427: GO 32485
// un := tmp [ rand ( 1 , tmp ) ] ;
32429: LD_ADDR_VAR 0 2
32433: PUSH
32434: LD_VAR 0 3
32438: PUSH
32439: LD_INT 1
32441: PPUSH
32442: LD_VAR 0 3
32446: PPUSH
32447: CALL_OW 12
32451: ARRAY
32452: ST_TO_ADDR
// if Crawls ( un ) then
32453: LD_VAR 0 2
32457: PPUSH
32458: CALL_OW 318
32462: IFFALSE 32473
// ComWalk ( un ) ;
32464: LD_VAR 0 2
32468: PPUSH
32469: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32473: LD_VAR 0 2
32477: PPUSH
32478: LD_INT 8
32480: PPUSH
32481: CALL_OW 336
// end ;
32485: PPOPN 3
32487: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32488: LD_EXP 51
32492: PUSH
32493: LD_EXP 95
32497: AND
32498: IFFALSE 32642
32500: GO 32502
32502: DISABLE
32503: LD_INT 0
32505: PPUSH
32506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32507: LD_ADDR_VAR 0 2
32511: PUSH
32512: LD_INT 22
32514: PUSH
32515: LD_OWVAR 2
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 21
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 34
32539: PUSH
32540: LD_INT 12
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 34
32549: PUSH
32550: LD_INT 51
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 34
32559: PUSH
32560: LD_INT 32
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: PPUSH
32578: CALL_OW 69
32582: ST_TO_ADDR
// if not tmp then
32583: LD_VAR 0 2
32587: NOT
32588: IFFALSE 32592
// exit ;
32590: GO 32642
// for i in tmp do
32592: LD_ADDR_VAR 0 1
32596: PUSH
32597: LD_VAR 0 2
32601: PUSH
32602: FOR_IN
32603: IFFALSE 32640
// if GetCargo ( i , mat_artifact ) = 0 then
32605: LD_VAR 0 1
32609: PPUSH
32610: LD_INT 4
32612: PPUSH
32613: CALL_OW 289
32617: PUSH
32618: LD_INT 0
32620: EQUAL
32621: IFFALSE 32638
// SetCargo ( i , mat_siberit , 100 ) ;
32623: LD_VAR 0 1
32627: PPUSH
32628: LD_INT 3
32630: PPUSH
32631: LD_INT 100
32633: PPUSH
32634: CALL_OW 290
32638: GO 32602
32640: POP
32641: POP
// end ;
32642: PPOPN 2
32644: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32645: LD_EXP 51
32649: PUSH
32650: LD_EXP 96
32654: AND
32655: IFFALSE 32838
32657: GO 32659
32659: DISABLE
32660: LD_INT 0
32662: PPUSH
32663: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32664: LD_ADDR_VAR 0 2
32668: PUSH
32669: LD_INT 22
32671: PUSH
32672: LD_OWVAR 2
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PPUSH
32681: CALL_OW 69
32685: ST_TO_ADDR
// if not tmp then
32686: LD_VAR 0 2
32690: NOT
32691: IFFALSE 32695
// exit ;
32693: GO 32838
// for i := 1 to 2 do
32695: LD_ADDR_VAR 0 1
32699: PUSH
32700: DOUBLE
32701: LD_INT 1
32703: DEC
32704: ST_TO_ADDR
32705: LD_INT 2
32707: PUSH
32708: FOR_TO
32709: IFFALSE 32836
// begin uc_side := your_side ;
32711: LD_ADDR_OWVAR 20
32715: PUSH
32716: LD_OWVAR 2
32720: ST_TO_ADDR
// uc_nation := nation_american ;
32721: LD_ADDR_OWVAR 21
32725: PUSH
32726: LD_INT 1
32728: ST_TO_ADDR
// vc_chassis := us_morphling ;
32729: LD_ADDR_OWVAR 37
32733: PUSH
32734: LD_INT 5
32736: ST_TO_ADDR
// vc_engine := engine_siberite ;
32737: LD_ADDR_OWVAR 39
32741: PUSH
32742: LD_INT 3
32744: ST_TO_ADDR
// vc_control := control_computer ;
32745: LD_ADDR_OWVAR 38
32749: PUSH
32750: LD_INT 3
32752: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32753: LD_ADDR_OWVAR 40
32757: PUSH
32758: LD_INT 10
32760: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32761: LD_VAR 0 2
32765: PUSH
32766: LD_INT 1
32768: ARRAY
32769: PPUSH
32770: CALL_OW 310
32774: NOT
32775: IFFALSE 32822
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32777: CALL_OW 45
32781: PPUSH
32782: LD_VAR 0 2
32786: PUSH
32787: LD_INT 1
32789: ARRAY
32790: PPUSH
32791: CALL_OW 250
32795: PPUSH
32796: LD_VAR 0 2
32800: PUSH
32801: LD_INT 1
32803: ARRAY
32804: PPUSH
32805: CALL_OW 251
32809: PPUSH
32810: LD_INT 12
32812: PPUSH
32813: LD_INT 1
32815: PPUSH
32816: CALL_OW 50
32820: GO 32834
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32822: CALL_OW 45
32826: PPUSH
32827: LD_INT 1
32829: PPUSH
32830: CALL_OW 51
// end ;
32834: GO 32708
32836: POP
32837: POP
// end ;
32838: PPOPN 2
32840: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32841: LD_EXP 51
32845: PUSH
32846: LD_EXP 97
32850: AND
32851: IFFALSE 33073
32853: GO 32855
32855: DISABLE
32856: LD_INT 0
32858: PPUSH
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32864: LD_ADDR_VAR 0 6
32868: PUSH
32869: LD_INT 22
32871: PUSH
32872: LD_OWVAR 2
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 21
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: LD_INT 23
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: PPUSH
32913: CALL_OW 69
32917: ST_TO_ADDR
// if not tmp then
32918: LD_VAR 0 6
32922: NOT
32923: IFFALSE 32927
// exit ;
32925: GO 33073
// s1 := rand ( 1 , 4 ) ;
32927: LD_ADDR_VAR 0 2
32931: PUSH
32932: LD_INT 1
32934: PPUSH
32935: LD_INT 4
32937: PPUSH
32938: CALL_OW 12
32942: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32943: LD_ADDR_VAR 0 4
32947: PUSH
32948: LD_VAR 0 6
32952: PUSH
32953: LD_INT 1
32955: ARRAY
32956: PPUSH
32957: LD_VAR 0 2
32961: PPUSH
32962: CALL_OW 259
32966: ST_TO_ADDR
// if s1 = 1 then
32967: LD_VAR 0 2
32971: PUSH
32972: LD_INT 1
32974: EQUAL
32975: IFFALSE 32995
// s2 := rand ( 2 , 4 ) else
32977: LD_ADDR_VAR 0 3
32981: PUSH
32982: LD_INT 2
32984: PPUSH
32985: LD_INT 4
32987: PPUSH
32988: CALL_OW 12
32992: ST_TO_ADDR
32993: GO 33003
// s2 := 1 ;
32995: LD_ADDR_VAR 0 3
32999: PUSH
33000: LD_INT 1
33002: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
33003: LD_ADDR_VAR 0 5
33007: PUSH
33008: LD_VAR 0 6
33012: PUSH
33013: LD_INT 1
33015: ARRAY
33016: PPUSH
33017: LD_VAR 0 3
33021: PPUSH
33022: CALL_OW 259
33026: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
33027: LD_VAR 0 6
33031: PUSH
33032: LD_INT 1
33034: ARRAY
33035: PPUSH
33036: LD_VAR 0 2
33040: PPUSH
33041: LD_VAR 0 5
33045: PPUSH
33046: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
33050: LD_VAR 0 6
33054: PUSH
33055: LD_INT 1
33057: ARRAY
33058: PPUSH
33059: LD_VAR 0 3
33063: PPUSH
33064: LD_VAR 0 4
33068: PPUSH
33069: CALL_OW 237
// end ;
33073: PPOPN 6
33075: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
33076: LD_EXP 51
33080: PUSH
33081: LD_EXP 98
33085: AND
33086: IFFALSE 33165
33088: GO 33090
33090: DISABLE
33091: LD_INT 0
33093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33094: LD_ADDR_VAR 0 1
33098: PUSH
33099: LD_INT 22
33101: PUSH
33102: LD_OWVAR 2
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 30
33113: PUSH
33114: LD_INT 3
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PPUSH
33125: CALL_OW 69
33129: ST_TO_ADDR
// if not tmp then
33130: LD_VAR 0 1
33134: NOT
33135: IFFALSE 33139
// exit ;
33137: GO 33165
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33139: LD_VAR 0 1
33143: PUSH
33144: LD_INT 1
33146: PPUSH
33147: LD_VAR 0 1
33151: PPUSH
33152: CALL_OW 12
33156: ARRAY
33157: PPUSH
33158: LD_INT 1
33160: PPUSH
33161: CALL_OW 234
// end ;
33165: PPOPN 1
33167: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33168: LD_EXP 51
33172: PUSH
33173: LD_EXP 99
33177: AND
33178: IFFALSE 33290
33180: GO 33182
33182: DISABLE
33183: LD_INT 0
33185: PPUSH
33186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33187: LD_ADDR_VAR 0 2
33191: PUSH
33192: LD_INT 22
33194: PUSH
33195: LD_OWVAR 2
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: LD_INT 30
33209: PUSH
33210: LD_INT 27
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 30
33219: PUSH
33220: LD_INT 26
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 30
33229: PUSH
33230: LD_INT 28
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PPUSH
33247: CALL_OW 69
33251: ST_TO_ADDR
// if not tmp then
33252: LD_VAR 0 2
33256: NOT
33257: IFFALSE 33261
// exit ;
33259: GO 33290
// for i in tmp do
33261: LD_ADDR_VAR 0 1
33265: PUSH
33266: LD_VAR 0 2
33270: PUSH
33271: FOR_IN
33272: IFFALSE 33288
// SetLives ( i , 1 ) ;
33274: LD_VAR 0 1
33278: PPUSH
33279: LD_INT 1
33281: PPUSH
33282: CALL_OW 234
33286: GO 33271
33288: POP
33289: POP
// end ;
33290: PPOPN 2
33292: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33293: LD_EXP 51
33297: PUSH
33298: LD_EXP 100
33302: AND
33303: IFFALSE 33590
33305: GO 33307
33307: DISABLE
33308: LD_INT 0
33310: PPUSH
33311: PPUSH
33312: PPUSH
// begin i := rand ( 1 , 7 ) ;
33313: LD_ADDR_VAR 0 1
33317: PUSH
33318: LD_INT 1
33320: PPUSH
33321: LD_INT 7
33323: PPUSH
33324: CALL_OW 12
33328: ST_TO_ADDR
// case i of 1 :
33329: LD_VAR 0 1
33333: PUSH
33334: LD_INT 1
33336: DOUBLE
33337: EQUAL
33338: IFTRUE 33342
33340: GO 33352
33342: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33343: LD_STRING earthquake(getX(game), 0, 32)
33345: PPUSH
33346: CALL_OW 559
33350: GO 33590
33352: LD_INT 2
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33374
33360: POP
// begin ToLua ( displayStucuk(); ) ;
33361: LD_STRING displayStucuk();
33363: PPUSH
33364: CALL_OW 559
// ResetFog ;
33368: CALL_OW 335
// end ; 3 :
33372: GO 33590
33374: LD_INT 3
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33382
33380: GO 33486
33382: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33383: LD_ADDR_VAR 0 2
33387: PUSH
33388: LD_INT 22
33390: PUSH
33391: LD_OWVAR 2
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 25
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PPUSH
33414: CALL_OW 69
33418: ST_TO_ADDR
// if not tmp then
33419: LD_VAR 0 2
33423: NOT
33424: IFFALSE 33428
// exit ;
33426: GO 33590
// un := tmp [ rand ( 1 , tmp ) ] ;
33428: LD_ADDR_VAR 0 3
33432: PUSH
33433: LD_VAR 0 2
33437: PUSH
33438: LD_INT 1
33440: PPUSH
33441: LD_VAR 0 2
33445: PPUSH
33446: CALL_OW 12
33450: ARRAY
33451: ST_TO_ADDR
// if Crawls ( un ) then
33452: LD_VAR 0 3
33456: PPUSH
33457: CALL_OW 318
33461: IFFALSE 33472
// ComWalk ( un ) ;
33463: LD_VAR 0 3
33467: PPUSH
33468: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33472: LD_VAR 0 3
33476: PPUSH
33477: LD_INT 8
33479: PPUSH
33480: CALL_OW 336
// end ; 4 :
33484: GO 33590
33486: LD_INT 4
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33568
33494: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33495: LD_ADDR_VAR 0 2
33499: PUSH
33500: LD_INT 22
33502: PUSH
33503: LD_OWVAR 2
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 30
33514: PUSH
33515: LD_INT 29
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PPUSH
33526: CALL_OW 69
33530: ST_TO_ADDR
// if not tmp then
33531: LD_VAR 0 2
33535: NOT
33536: IFFALSE 33540
// exit ;
33538: GO 33590
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33540: LD_VAR 0 2
33544: PUSH
33545: LD_INT 1
33547: ARRAY
33548: PPUSH
33549: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33553: LD_VAR 0 2
33557: PUSH
33558: LD_INT 1
33560: ARRAY
33561: PPUSH
33562: CALL_OW 65
// end ; 5 .. 7 :
33566: GO 33590
33568: LD_INT 5
33570: DOUBLE
33571: GREATEREQUAL
33572: IFFALSE 33580
33574: LD_INT 7
33576: DOUBLE
33577: LESSEQUAL
33578: IFTRUE 33582
33580: GO 33589
33582: POP
// StreamSibBomb ; end ;
33583: CALL 29827 0 0
33587: GO 33590
33589: POP
// end ;
33590: PPOPN 3
33592: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33593: LD_EXP 51
33597: PUSH
33598: LD_EXP 101
33602: AND
33603: IFFALSE 33759
33605: GO 33607
33607: DISABLE
33608: LD_INT 0
33610: PPUSH
33611: PPUSH
33612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33613: LD_ADDR_VAR 0 2
33617: PUSH
33618: LD_INT 81
33620: PUSH
33621: LD_OWVAR 2
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 21
33635: PUSH
33636: LD_INT 1
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 21
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PPUSH
33662: CALL_OW 69
33666: ST_TO_ADDR
// if not tmp then
33667: LD_VAR 0 2
33671: NOT
33672: IFFALSE 33676
// exit ;
33674: GO 33759
// p := 0 ;
33676: LD_ADDR_VAR 0 3
33680: PUSH
33681: LD_INT 0
33683: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33684: LD_INT 35
33686: PPUSH
33687: CALL_OW 67
// p := p + 1 ;
33691: LD_ADDR_VAR 0 3
33695: PUSH
33696: LD_VAR 0 3
33700: PUSH
33701: LD_INT 1
33703: PLUS
33704: ST_TO_ADDR
// for i in tmp do
33705: LD_ADDR_VAR 0 1
33709: PUSH
33710: LD_VAR 0 2
33714: PUSH
33715: FOR_IN
33716: IFFALSE 33747
// if GetLives ( i ) < 1000 then
33718: LD_VAR 0 1
33722: PPUSH
33723: CALL_OW 256
33727: PUSH
33728: LD_INT 1000
33730: LESS
33731: IFFALSE 33745
// SetLives ( i , 1000 ) ;
33733: LD_VAR 0 1
33737: PPUSH
33738: LD_INT 1000
33740: PPUSH
33741: CALL_OW 234
33745: GO 33715
33747: POP
33748: POP
// until p > 20 ;
33749: LD_VAR 0 3
33753: PUSH
33754: LD_INT 20
33756: GREATER
33757: IFFALSE 33684
// end ;
33759: PPOPN 3
33761: END
// every 0 0$1 trigger StreamModeActive and sTime do
33762: LD_EXP 51
33766: PUSH
33767: LD_EXP 102
33771: AND
33772: IFFALSE 33807
33774: GO 33776
33776: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33777: LD_INT 28
33779: PPUSH
33780: LD_OWVAR 2
33784: PPUSH
33785: LD_INT 2
33787: PPUSH
33788: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33792: LD_INT 30
33794: PPUSH
33795: LD_OWVAR 2
33799: PPUSH
33800: LD_INT 2
33802: PPUSH
33803: CALL_OW 322
// end ;
33807: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33808: LD_EXP 51
33812: PUSH
33813: LD_EXP 103
33817: AND
33818: IFFALSE 33939
33820: GO 33822
33822: DISABLE
33823: LD_INT 0
33825: PPUSH
33826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33827: LD_ADDR_VAR 0 2
33831: PUSH
33832: LD_INT 22
33834: PUSH
33835: LD_OWVAR 2
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 21
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 3
33856: PUSH
33857: LD_INT 23
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: LIST
33875: PPUSH
33876: CALL_OW 69
33880: ST_TO_ADDR
// if not tmp then
33881: LD_VAR 0 2
33885: NOT
33886: IFFALSE 33890
// exit ;
33888: GO 33939
// for i in tmp do
33890: LD_ADDR_VAR 0 1
33894: PUSH
33895: LD_VAR 0 2
33899: PUSH
33900: FOR_IN
33901: IFFALSE 33937
// begin if Crawls ( i ) then
33903: LD_VAR 0 1
33907: PPUSH
33908: CALL_OW 318
33912: IFFALSE 33923
// ComWalk ( i ) ;
33914: LD_VAR 0 1
33918: PPUSH
33919: CALL_OW 138
// SetClass ( i , 2 ) ;
33923: LD_VAR 0 1
33927: PPUSH
33928: LD_INT 2
33930: PPUSH
33931: CALL_OW 336
// end ;
33935: GO 33900
33937: POP
33938: POP
// end ;
33939: PPOPN 2
33941: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33942: LD_EXP 51
33946: PUSH
33947: LD_EXP 104
33951: AND
33952: IFFALSE 34240
33954: GO 33956
33956: DISABLE
33957: LD_INT 0
33959: PPUSH
33960: PPUSH
33961: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33962: LD_OWVAR 2
33966: PPUSH
33967: LD_INT 9
33969: PPUSH
33970: LD_INT 1
33972: PPUSH
33973: LD_INT 1
33975: PPUSH
33976: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33980: LD_INT 9
33982: PPUSH
33983: LD_OWVAR 2
33987: PPUSH
33988: CALL_OW 343
// uc_side := 9 ;
33992: LD_ADDR_OWVAR 20
33996: PUSH
33997: LD_INT 9
33999: ST_TO_ADDR
// uc_nation := 2 ;
34000: LD_ADDR_OWVAR 21
34004: PUSH
34005: LD_INT 2
34007: ST_TO_ADDR
// hc_name := Dark Warrior ;
34008: LD_ADDR_OWVAR 26
34012: PUSH
34013: LD_STRING Dark Warrior
34015: ST_TO_ADDR
// hc_gallery :=  ;
34016: LD_ADDR_OWVAR 33
34020: PUSH
34021: LD_STRING 
34023: ST_TO_ADDR
// hc_noskilllimit := true ;
34024: LD_ADDR_OWVAR 76
34028: PUSH
34029: LD_INT 1
34031: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
34032: LD_ADDR_OWVAR 31
34036: PUSH
34037: LD_INT 30
34039: PUSH
34040: LD_INT 30
34042: PUSH
34043: LD_INT 30
34045: PUSH
34046: LD_INT 30
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: ST_TO_ADDR
// un := CreateHuman ;
34055: LD_ADDR_VAR 0 3
34059: PUSH
34060: CALL_OW 44
34064: ST_TO_ADDR
// hc_noskilllimit := false ;
34065: LD_ADDR_OWVAR 76
34069: PUSH
34070: LD_INT 0
34072: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34073: LD_VAR 0 3
34077: PPUSH
34078: LD_INT 1
34080: PPUSH
34081: CALL_OW 51
// ToLua ( playRanger() ) ;
34085: LD_STRING playRanger()
34087: PPUSH
34088: CALL_OW 559
// p := 0 ;
34092: LD_ADDR_VAR 0 2
34096: PUSH
34097: LD_INT 0
34099: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34100: LD_INT 35
34102: PPUSH
34103: CALL_OW 67
// p := p + 1 ;
34107: LD_ADDR_VAR 0 2
34111: PUSH
34112: LD_VAR 0 2
34116: PUSH
34117: LD_INT 1
34119: PLUS
34120: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34121: LD_VAR 0 3
34125: PPUSH
34126: CALL_OW 256
34130: PUSH
34131: LD_INT 1000
34133: LESS
34134: IFFALSE 34148
// SetLives ( un , 1000 ) ;
34136: LD_VAR 0 3
34140: PPUSH
34141: LD_INT 1000
34143: PPUSH
34144: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34148: LD_VAR 0 3
34152: PPUSH
34153: LD_INT 81
34155: PUSH
34156: LD_OWVAR 2
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 91
34167: PUSH
34168: LD_VAR 0 3
34172: PUSH
34173: LD_INT 30
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PPUSH
34185: CALL_OW 69
34189: PPUSH
34190: LD_VAR 0 3
34194: PPUSH
34195: CALL_OW 74
34199: PPUSH
34200: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
34204: LD_VAR 0 2
34208: PUSH
34209: LD_INT 80
34211: GREATER
34212: PUSH
34213: LD_VAR 0 3
34217: PPUSH
34218: CALL_OW 301
34222: OR
34223: IFFALSE 34100
// if un then
34225: LD_VAR 0 3
34229: IFFALSE 34240
// RemoveUnit ( un ) ;
34231: LD_VAR 0 3
34235: PPUSH
34236: CALL_OW 64
// end ;
34240: PPOPN 3
34242: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
34243: LD_EXP 105
34247: IFFALSE 34363
34249: GO 34251
34251: DISABLE
34252: LD_INT 0
34254: PPUSH
34255: PPUSH
34256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34257: LD_ADDR_VAR 0 2
34261: PUSH
34262: LD_INT 81
34264: PUSH
34265: LD_OWVAR 2
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 21
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PPUSH
34288: CALL_OW 69
34292: ST_TO_ADDR
// ToLua ( playComputer() ) ;
34293: LD_STRING playComputer()
34295: PPUSH
34296: CALL_OW 559
// if not tmp then
34300: LD_VAR 0 2
34304: NOT
34305: IFFALSE 34309
// exit ;
34307: GO 34363
// for i in tmp do
34309: LD_ADDR_VAR 0 1
34313: PUSH
34314: LD_VAR 0 2
34318: PUSH
34319: FOR_IN
34320: IFFALSE 34361
// for j := 1 to 4 do
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: DOUBLE
34328: LD_INT 1
34330: DEC
34331: ST_TO_ADDR
34332: LD_INT 4
34334: PUSH
34335: FOR_TO
34336: IFFALSE 34357
// SetSkill ( i , j , 10 ) ;
34338: LD_VAR 0 1
34342: PPUSH
34343: LD_VAR 0 3
34347: PPUSH
34348: LD_INT 10
34350: PPUSH
34351: CALL_OW 237
34355: GO 34335
34357: POP
34358: POP
34359: GO 34319
34361: POP
34362: POP
// end ;
34363: PPOPN 3
34365: END
// every 0 0$1 trigger s30 do var i , tmp ;
34366: LD_EXP 106
34370: IFFALSE 34439
34372: GO 34374
34374: DISABLE
34375: LD_INT 0
34377: PPUSH
34378: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34379: LD_ADDR_VAR 0 2
34383: PUSH
34384: LD_INT 22
34386: PUSH
34387: LD_OWVAR 2
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PPUSH
34396: CALL_OW 69
34400: ST_TO_ADDR
// if not tmp then
34401: LD_VAR 0 2
34405: NOT
34406: IFFALSE 34410
// exit ;
34408: GO 34439
// for i in tmp do
34410: LD_ADDR_VAR 0 1
34414: PUSH
34415: LD_VAR 0 2
34419: PUSH
34420: FOR_IN
34421: IFFALSE 34437
// SetLives ( i , 300 ) ;
34423: LD_VAR 0 1
34427: PPUSH
34428: LD_INT 300
34430: PPUSH
34431: CALL_OW 234
34435: GO 34420
34437: POP
34438: POP
// end ;
34439: PPOPN 2
34441: END
// every 0 0$1 trigger s60 do var i , tmp ;
34442: LD_EXP 107
34446: IFFALSE 34515
34448: GO 34450
34450: DISABLE
34451: LD_INT 0
34453: PPUSH
34454: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34455: LD_ADDR_VAR 0 2
34459: PUSH
34460: LD_INT 22
34462: PUSH
34463: LD_OWVAR 2
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PPUSH
34472: CALL_OW 69
34476: ST_TO_ADDR
// if not tmp then
34477: LD_VAR 0 2
34481: NOT
34482: IFFALSE 34486
// exit ;
34484: GO 34515
// for i in tmp do
34486: LD_ADDR_VAR 0 1
34490: PUSH
34491: LD_VAR 0 2
34495: PUSH
34496: FOR_IN
34497: IFFALSE 34513
// SetLives ( i , 600 ) ;
34499: LD_VAR 0 1
34503: PPUSH
34504: LD_INT 600
34506: PPUSH
34507: CALL_OW 234
34511: GO 34496
34513: POP
34514: POP
// end ;
34515: PPOPN 2
34517: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34518: LD_INT 0
34520: PPUSH
// case cmd of 301 :
34521: LD_VAR 0 1
34525: PUSH
34526: LD_INT 301
34528: DOUBLE
34529: EQUAL
34530: IFTRUE 34534
34532: GO 34566
34534: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34535: LD_VAR 0 6
34539: PPUSH
34540: LD_VAR 0 7
34544: PPUSH
34545: LD_VAR 0 8
34549: PPUSH
34550: LD_VAR 0 4
34554: PPUSH
34555: LD_VAR 0 5
34559: PPUSH
34560: CALL 35775 0 5
34564: GO 34687
34566: LD_INT 302
34568: DOUBLE
34569: EQUAL
34570: IFTRUE 34574
34572: GO 34611
34574: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34575: LD_VAR 0 6
34579: PPUSH
34580: LD_VAR 0 7
34584: PPUSH
34585: LD_VAR 0 8
34589: PPUSH
34590: LD_VAR 0 9
34594: PPUSH
34595: LD_VAR 0 4
34599: PPUSH
34600: LD_VAR 0 5
34604: PPUSH
34605: CALL 35866 0 6
34609: GO 34687
34611: LD_INT 303
34613: DOUBLE
34614: EQUAL
34615: IFTRUE 34619
34617: GO 34656
34619: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34620: LD_VAR 0 6
34624: PPUSH
34625: LD_VAR 0 7
34629: PPUSH
34630: LD_VAR 0 8
34634: PPUSH
34635: LD_VAR 0 9
34639: PPUSH
34640: LD_VAR 0 4
34644: PPUSH
34645: LD_VAR 0 5
34649: PPUSH
34650: CALL 34692 0 6
34654: GO 34687
34656: LD_INT 304
34658: DOUBLE
34659: EQUAL
34660: IFTRUE 34664
34662: GO 34686
34664: POP
// hHackTeleport ( unit , x , y ) ; end ;
34665: LD_VAR 0 2
34669: PPUSH
34670: LD_VAR 0 4
34674: PPUSH
34675: LD_VAR 0 5
34679: PPUSH
34680: CALL 36459 0 3
34684: GO 34687
34686: POP
// end ;
34687: LD_VAR 0 12
34691: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34692: LD_INT 0
34694: PPUSH
34695: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34696: LD_VAR 0 1
34700: PUSH
34701: LD_INT 1
34703: LESS
34704: PUSH
34705: LD_VAR 0 1
34709: PUSH
34710: LD_INT 3
34712: GREATER
34713: OR
34714: PUSH
34715: LD_VAR 0 5
34719: PPUSH
34720: LD_VAR 0 6
34724: PPUSH
34725: CALL_OW 428
34729: OR
34730: IFFALSE 34734
// exit ;
34732: GO 35462
// uc_side := your_side ;
34734: LD_ADDR_OWVAR 20
34738: PUSH
34739: LD_OWVAR 2
34743: ST_TO_ADDR
// uc_nation := nation ;
34744: LD_ADDR_OWVAR 21
34748: PUSH
34749: LD_VAR 0 1
34753: ST_TO_ADDR
// bc_level = 1 ;
34754: LD_ADDR_OWVAR 43
34758: PUSH
34759: LD_INT 1
34761: ST_TO_ADDR
// case btype of 1 :
34762: LD_VAR 0 2
34766: PUSH
34767: LD_INT 1
34769: DOUBLE
34770: EQUAL
34771: IFTRUE 34775
34773: GO 34786
34775: POP
// bc_type := b_depot ; 2 :
34776: LD_ADDR_OWVAR 42
34780: PUSH
34781: LD_INT 0
34783: ST_TO_ADDR
34784: GO 35406
34786: LD_INT 2
34788: DOUBLE
34789: EQUAL
34790: IFTRUE 34794
34792: GO 34805
34794: POP
// bc_type := b_warehouse ; 3 :
34795: LD_ADDR_OWVAR 42
34799: PUSH
34800: LD_INT 1
34802: ST_TO_ADDR
34803: GO 35406
34805: LD_INT 3
34807: DOUBLE
34808: EQUAL
34809: IFTRUE 34813
34811: GO 34824
34813: POP
// bc_type := b_lab ; 4 .. 9 :
34814: LD_ADDR_OWVAR 42
34818: PUSH
34819: LD_INT 6
34821: ST_TO_ADDR
34822: GO 35406
34824: LD_INT 4
34826: DOUBLE
34827: GREATEREQUAL
34828: IFFALSE 34836
34830: LD_INT 9
34832: DOUBLE
34833: LESSEQUAL
34834: IFTRUE 34838
34836: GO 34898
34838: POP
// begin bc_type := b_lab_half ;
34839: LD_ADDR_OWVAR 42
34843: PUSH
34844: LD_INT 7
34846: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34847: LD_ADDR_OWVAR 44
34851: PUSH
34852: LD_INT 10
34854: PUSH
34855: LD_INT 11
34857: PUSH
34858: LD_INT 12
34860: PUSH
34861: LD_INT 15
34863: PUSH
34864: LD_INT 14
34866: PUSH
34867: LD_INT 13
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: PUSH
34878: LD_VAR 0 2
34882: PUSH
34883: LD_INT 3
34885: MINUS
34886: ARRAY
34887: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34888: LD_ADDR_OWVAR 45
34892: PUSH
34893: LD_INT 9
34895: ST_TO_ADDR
// end ; 10 .. 13 :
34896: GO 35406
34898: LD_INT 10
34900: DOUBLE
34901: GREATEREQUAL
34902: IFFALSE 34910
34904: LD_INT 13
34906: DOUBLE
34907: LESSEQUAL
34908: IFTRUE 34912
34910: GO 34989
34912: POP
// begin bc_type := b_lab_full ;
34913: LD_ADDR_OWVAR 42
34917: PUSH
34918: LD_INT 8
34920: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34921: LD_ADDR_OWVAR 44
34925: PUSH
34926: LD_INT 10
34928: PUSH
34929: LD_INT 12
34931: PUSH
34932: LD_INT 14
34934: PUSH
34935: LD_INT 13
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: PUSH
34944: LD_VAR 0 2
34948: PUSH
34949: LD_INT 9
34951: MINUS
34952: ARRAY
34953: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34954: LD_ADDR_OWVAR 45
34958: PUSH
34959: LD_INT 11
34961: PUSH
34962: LD_INT 15
34964: PUSH
34965: LD_INT 12
34967: PUSH
34968: LD_INT 15
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: PUSH
34977: LD_VAR 0 2
34981: PUSH
34982: LD_INT 9
34984: MINUS
34985: ARRAY
34986: ST_TO_ADDR
// end ; 14 :
34987: GO 35406
34989: LD_INT 14
34991: DOUBLE
34992: EQUAL
34993: IFTRUE 34997
34995: GO 35008
34997: POP
// bc_type := b_workshop ; 15 :
34998: LD_ADDR_OWVAR 42
35002: PUSH
35003: LD_INT 2
35005: ST_TO_ADDR
35006: GO 35406
35008: LD_INT 15
35010: DOUBLE
35011: EQUAL
35012: IFTRUE 35016
35014: GO 35027
35016: POP
// bc_type := b_factory ; 16 :
35017: LD_ADDR_OWVAR 42
35021: PUSH
35022: LD_INT 3
35024: ST_TO_ADDR
35025: GO 35406
35027: LD_INT 16
35029: DOUBLE
35030: EQUAL
35031: IFTRUE 35035
35033: GO 35046
35035: POP
// bc_type := b_ext_gun ; 17 :
35036: LD_ADDR_OWVAR 42
35040: PUSH
35041: LD_INT 17
35043: ST_TO_ADDR
35044: GO 35406
35046: LD_INT 17
35048: DOUBLE
35049: EQUAL
35050: IFTRUE 35054
35052: GO 35082
35054: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35055: LD_ADDR_OWVAR 42
35059: PUSH
35060: LD_INT 19
35062: PUSH
35063: LD_INT 23
35065: PUSH
35066: LD_INT 19
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: PUSH
35074: LD_VAR 0 1
35078: ARRAY
35079: ST_TO_ADDR
35080: GO 35406
35082: LD_INT 18
35084: DOUBLE
35085: EQUAL
35086: IFTRUE 35090
35088: GO 35101
35090: POP
// bc_type := b_ext_radar ; 19 :
35091: LD_ADDR_OWVAR 42
35095: PUSH
35096: LD_INT 20
35098: ST_TO_ADDR
35099: GO 35406
35101: LD_INT 19
35103: DOUBLE
35104: EQUAL
35105: IFTRUE 35109
35107: GO 35120
35109: POP
// bc_type := b_ext_radio ; 20 :
35110: LD_ADDR_OWVAR 42
35114: PUSH
35115: LD_INT 22
35117: ST_TO_ADDR
35118: GO 35406
35120: LD_INT 20
35122: DOUBLE
35123: EQUAL
35124: IFTRUE 35128
35126: GO 35139
35128: POP
// bc_type := b_ext_siberium ; 21 :
35129: LD_ADDR_OWVAR 42
35133: PUSH
35134: LD_INT 21
35136: ST_TO_ADDR
35137: GO 35406
35139: LD_INT 21
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35147
35145: GO 35158
35147: POP
// bc_type := b_ext_computer ; 22 :
35148: LD_ADDR_OWVAR 42
35152: PUSH
35153: LD_INT 24
35155: ST_TO_ADDR
35156: GO 35406
35158: LD_INT 22
35160: DOUBLE
35161: EQUAL
35162: IFTRUE 35166
35164: GO 35177
35166: POP
// bc_type := b_ext_track ; 23 :
35167: LD_ADDR_OWVAR 42
35171: PUSH
35172: LD_INT 16
35174: ST_TO_ADDR
35175: GO 35406
35177: LD_INT 23
35179: DOUBLE
35180: EQUAL
35181: IFTRUE 35185
35183: GO 35196
35185: POP
// bc_type := b_ext_laser ; 24 :
35186: LD_ADDR_OWVAR 42
35190: PUSH
35191: LD_INT 25
35193: ST_TO_ADDR
35194: GO 35406
35196: LD_INT 24
35198: DOUBLE
35199: EQUAL
35200: IFTRUE 35204
35202: GO 35215
35204: POP
// bc_type := b_control_tower ; 25 :
35205: LD_ADDR_OWVAR 42
35209: PUSH
35210: LD_INT 36
35212: ST_TO_ADDR
35213: GO 35406
35215: LD_INT 25
35217: DOUBLE
35218: EQUAL
35219: IFTRUE 35223
35221: GO 35234
35223: POP
// bc_type := b_breastwork ; 26 :
35224: LD_ADDR_OWVAR 42
35228: PUSH
35229: LD_INT 31
35231: ST_TO_ADDR
35232: GO 35406
35234: LD_INT 26
35236: DOUBLE
35237: EQUAL
35238: IFTRUE 35242
35240: GO 35253
35242: POP
// bc_type := b_bunker ; 27 :
35243: LD_ADDR_OWVAR 42
35247: PUSH
35248: LD_INT 32
35250: ST_TO_ADDR
35251: GO 35406
35253: LD_INT 27
35255: DOUBLE
35256: EQUAL
35257: IFTRUE 35261
35259: GO 35272
35261: POP
// bc_type := b_turret ; 28 :
35262: LD_ADDR_OWVAR 42
35266: PUSH
35267: LD_INT 33
35269: ST_TO_ADDR
35270: GO 35406
35272: LD_INT 28
35274: DOUBLE
35275: EQUAL
35276: IFTRUE 35280
35278: GO 35291
35280: POP
// bc_type := b_armoury ; 29 :
35281: LD_ADDR_OWVAR 42
35285: PUSH
35286: LD_INT 4
35288: ST_TO_ADDR
35289: GO 35406
35291: LD_INT 29
35293: DOUBLE
35294: EQUAL
35295: IFTRUE 35299
35297: GO 35310
35299: POP
// bc_type := b_barracks ; 30 :
35300: LD_ADDR_OWVAR 42
35304: PUSH
35305: LD_INT 5
35307: ST_TO_ADDR
35308: GO 35406
35310: LD_INT 30
35312: DOUBLE
35313: EQUAL
35314: IFTRUE 35318
35316: GO 35329
35318: POP
// bc_type := b_solar_power ; 31 :
35319: LD_ADDR_OWVAR 42
35323: PUSH
35324: LD_INT 27
35326: ST_TO_ADDR
35327: GO 35406
35329: LD_INT 31
35331: DOUBLE
35332: EQUAL
35333: IFTRUE 35337
35335: GO 35348
35337: POP
// bc_type := b_oil_power ; 32 :
35338: LD_ADDR_OWVAR 42
35342: PUSH
35343: LD_INT 26
35345: ST_TO_ADDR
35346: GO 35406
35348: LD_INT 32
35350: DOUBLE
35351: EQUAL
35352: IFTRUE 35356
35354: GO 35367
35356: POP
// bc_type := b_siberite_power ; 33 :
35357: LD_ADDR_OWVAR 42
35361: PUSH
35362: LD_INT 28
35364: ST_TO_ADDR
35365: GO 35406
35367: LD_INT 33
35369: DOUBLE
35370: EQUAL
35371: IFTRUE 35375
35373: GO 35386
35375: POP
// bc_type := b_oil_mine ; 34 :
35376: LD_ADDR_OWVAR 42
35380: PUSH
35381: LD_INT 29
35383: ST_TO_ADDR
35384: GO 35406
35386: LD_INT 34
35388: DOUBLE
35389: EQUAL
35390: IFTRUE 35394
35392: GO 35405
35394: POP
// bc_type := b_siberite_mine ; end ;
35395: LD_ADDR_OWVAR 42
35399: PUSH
35400: LD_INT 30
35402: ST_TO_ADDR
35403: GO 35406
35405: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35406: LD_ADDR_VAR 0 8
35410: PUSH
35411: LD_VAR 0 5
35415: PPUSH
35416: LD_VAR 0 6
35420: PPUSH
35421: LD_VAR 0 3
35425: PPUSH
35426: CALL_OW 47
35430: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35431: LD_OWVAR 42
35435: PUSH
35436: LD_INT 32
35438: PUSH
35439: LD_INT 33
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: IN
35446: IFFALSE 35462
// PlaceWeaponTurret ( b , weapon ) ;
35448: LD_VAR 0 8
35452: PPUSH
35453: LD_VAR 0 4
35457: PPUSH
35458: CALL_OW 431
// end ;
35462: LD_VAR 0 7
35466: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35467: LD_INT 0
35469: PPUSH
35470: PPUSH
35471: PPUSH
35472: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35473: LD_ADDR_VAR 0 4
35477: PUSH
35478: LD_INT 22
35480: PUSH
35481: LD_OWVAR 2
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: LD_INT 30
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 30
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PPUSH
35522: CALL_OW 69
35526: ST_TO_ADDR
// if not tmp then
35527: LD_VAR 0 4
35531: NOT
35532: IFFALSE 35536
// exit ;
35534: GO 35595
// for i in tmp do
35536: LD_ADDR_VAR 0 2
35540: PUSH
35541: LD_VAR 0 4
35545: PUSH
35546: FOR_IN
35547: IFFALSE 35593
// for j = 1 to 3 do
35549: LD_ADDR_VAR 0 3
35553: PUSH
35554: DOUBLE
35555: LD_INT 1
35557: DEC
35558: ST_TO_ADDR
35559: LD_INT 3
35561: PUSH
35562: FOR_TO
35563: IFFALSE 35589
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35565: LD_VAR 0 2
35569: PPUSH
35570: CALL_OW 274
35574: PPUSH
35575: LD_VAR 0 3
35579: PPUSH
35580: LD_INT 99999
35582: PPUSH
35583: CALL_OW 277
35587: GO 35562
35589: POP
35590: POP
35591: GO 35546
35593: POP
35594: POP
// end ;
35595: LD_VAR 0 1
35599: RET
// export function hHackSetLevel10 ; var i , j ; begin
35600: LD_INT 0
35602: PPUSH
35603: PPUSH
35604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35605: LD_ADDR_VAR 0 2
35609: PUSH
35610: LD_INT 21
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PPUSH
35620: CALL_OW 69
35624: PUSH
35625: FOR_IN
35626: IFFALSE 35678
// if IsSelected ( i ) then
35628: LD_VAR 0 2
35632: PPUSH
35633: CALL_OW 306
35637: IFFALSE 35676
// begin for j := 1 to 4 do
35639: LD_ADDR_VAR 0 3
35643: PUSH
35644: DOUBLE
35645: LD_INT 1
35647: DEC
35648: ST_TO_ADDR
35649: LD_INT 4
35651: PUSH
35652: FOR_TO
35653: IFFALSE 35674
// SetSkill ( i , j , 10 ) ;
35655: LD_VAR 0 2
35659: PPUSH
35660: LD_VAR 0 3
35664: PPUSH
35665: LD_INT 10
35667: PPUSH
35668: CALL_OW 237
35672: GO 35652
35674: POP
35675: POP
// end ;
35676: GO 35625
35678: POP
35679: POP
// end ;
35680: LD_VAR 0 1
35684: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35685: LD_INT 0
35687: PPUSH
35688: PPUSH
35689: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35690: LD_ADDR_VAR 0 2
35694: PUSH
35695: LD_INT 22
35697: PUSH
35698: LD_OWVAR 2
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 21
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PPUSH
35721: CALL_OW 69
35725: PUSH
35726: FOR_IN
35727: IFFALSE 35768
// begin for j := 1 to 4 do
35729: LD_ADDR_VAR 0 3
35733: PUSH
35734: DOUBLE
35735: LD_INT 1
35737: DEC
35738: ST_TO_ADDR
35739: LD_INT 4
35741: PUSH
35742: FOR_TO
35743: IFFALSE 35764
// SetSkill ( i , j , 10 ) ;
35745: LD_VAR 0 2
35749: PPUSH
35750: LD_VAR 0 3
35754: PPUSH
35755: LD_INT 10
35757: PPUSH
35758: CALL_OW 237
35762: GO 35742
35764: POP
35765: POP
// end ;
35766: GO 35726
35768: POP
35769: POP
// end ;
35770: LD_VAR 0 1
35774: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35775: LD_INT 0
35777: PPUSH
// uc_side := your_side ;
35778: LD_ADDR_OWVAR 20
35782: PUSH
35783: LD_OWVAR 2
35787: ST_TO_ADDR
// uc_nation := nation ;
35788: LD_ADDR_OWVAR 21
35792: PUSH
35793: LD_VAR 0 1
35797: ST_TO_ADDR
// InitHc ;
35798: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35802: LD_INT 0
35804: PPUSH
35805: LD_VAR 0 2
35809: PPUSH
35810: LD_VAR 0 3
35814: PPUSH
35815: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35819: LD_VAR 0 4
35823: PPUSH
35824: LD_VAR 0 5
35828: PPUSH
35829: CALL_OW 428
35833: PUSH
35834: LD_INT 0
35836: EQUAL
35837: IFFALSE 35861
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35839: CALL_OW 44
35843: PPUSH
35844: LD_VAR 0 4
35848: PPUSH
35849: LD_VAR 0 5
35853: PPUSH
35854: LD_INT 1
35856: PPUSH
35857: CALL_OW 48
// end ;
35861: LD_VAR 0 6
35865: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35866: LD_INT 0
35868: PPUSH
35869: PPUSH
// uc_side := your_side ;
35870: LD_ADDR_OWVAR 20
35874: PUSH
35875: LD_OWVAR 2
35879: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35880: LD_VAR 0 1
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: LD_INT 2
35890: PUSH
35891: LD_INT 3
35893: PUSH
35894: LD_INT 4
35896: PUSH
35897: LD_INT 5
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: IN
35907: IFFALSE 35919
// uc_nation := nation_american else
35909: LD_ADDR_OWVAR 21
35913: PUSH
35914: LD_INT 1
35916: ST_TO_ADDR
35917: GO 35962
// if chassis in [ 11 , 12 , 13 , 14 ] then
35919: LD_VAR 0 1
35923: PUSH
35924: LD_INT 11
35926: PUSH
35927: LD_INT 12
35929: PUSH
35930: LD_INT 13
35932: PUSH
35933: LD_INT 14
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: IN
35942: IFFALSE 35954
// uc_nation := nation_arabian else
35944: LD_ADDR_OWVAR 21
35948: PUSH
35949: LD_INT 2
35951: ST_TO_ADDR
35952: GO 35962
// uc_nation := nation_russian ;
35954: LD_ADDR_OWVAR 21
35958: PUSH
35959: LD_INT 3
35961: ST_TO_ADDR
// vc_chassis := chassis ;
35962: LD_ADDR_OWVAR 37
35966: PUSH
35967: LD_VAR 0 1
35971: ST_TO_ADDR
// vc_engine := engine ;
35972: LD_ADDR_OWVAR 39
35976: PUSH
35977: LD_VAR 0 2
35981: ST_TO_ADDR
// vc_control := control ;
35982: LD_ADDR_OWVAR 38
35986: PUSH
35987: LD_VAR 0 3
35991: ST_TO_ADDR
// vc_weapon := weapon ;
35992: LD_ADDR_OWVAR 40
35996: PUSH
35997: LD_VAR 0 4
36001: ST_TO_ADDR
// un := CreateVehicle ;
36002: LD_ADDR_VAR 0 8
36006: PUSH
36007: CALL_OW 45
36011: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
36012: LD_VAR 0 8
36016: PPUSH
36017: LD_INT 0
36019: PPUSH
36020: LD_INT 5
36022: PPUSH
36023: CALL_OW 12
36027: PPUSH
36028: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
36032: LD_VAR 0 8
36036: PPUSH
36037: LD_VAR 0 5
36041: PPUSH
36042: LD_VAR 0 6
36046: PPUSH
36047: LD_INT 1
36049: PPUSH
36050: CALL_OW 48
// end ;
36054: LD_VAR 0 7
36058: RET
// export hInvincible ; every 1 do
36059: GO 36061
36061: DISABLE
// hInvincible := [ ] ;
36062: LD_ADDR_EXP 108
36066: PUSH
36067: EMPTY
36068: ST_TO_ADDR
36069: END
// every 10 do var i ;
36070: GO 36072
36072: DISABLE
36073: LD_INT 0
36075: PPUSH
// begin enable ;
36076: ENABLE
// if not hInvincible then
36077: LD_EXP 108
36081: NOT
36082: IFFALSE 36086
// exit ;
36084: GO 36130
// for i in hInvincible do
36086: LD_ADDR_VAR 0 1
36090: PUSH
36091: LD_EXP 108
36095: PUSH
36096: FOR_IN
36097: IFFALSE 36128
// if GetLives ( i ) < 1000 then
36099: LD_VAR 0 1
36103: PPUSH
36104: CALL_OW 256
36108: PUSH
36109: LD_INT 1000
36111: LESS
36112: IFFALSE 36126
// SetLives ( i , 1000 ) ;
36114: LD_VAR 0 1
36118: PPUSH
36119: LD_INT 1000
36121: PPUSH
36122: CALL_OW 234
36126: GO 36096
36128: POP
36129: POP
// end ;
36130: PPOPN 1
36132: END
// export function hHackInvincible ; var i ; begin
36133: LD_INT 0
36135: PPUSH
36136: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36137: LD_ADDR_VAR 0 2
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: LD_INT 21
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 21
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: PPUSH
36170: CALL_OW 69
36174: PUSH
36175: FOR_IN
36176: IFFALSE 36237
// if IsSelected ( i ) then
36178: LD_VAR 0 2
36182: PPUSH
36183: CALL_OW 306
36187: IFFALSE 36235
// begin if i in hInvincible then
36189: LD_VAR 0 2
36193: PUSH
36194: LD_EXP 108
36198: IN
36199: IFFALSE 36219
// hInvincible := hInvincible diff i else
36201: LD_ADDR_EXP 108
36205: PUSH
36206: LD_EXP 108
36210: PUSH
36211: LD_VAR 0 2
36215: DIFF
36216: ST_TO_ADDR
36217: GO 36235
// hInvincible := hInvincible union i ;
36219: LD_ADDR_EXP 108
36223: PUSH
36224: LD_EXP 108
36228: PUSH
36229: LD_VAR 0 2
36233: UNION
36234: ST_TO_ADDR
// end ;
36235: GO 36175
36237: POP
36238: POP
// end ;
36239: LD_VAR 0 1
36243: RET
// export function hHackInvisible ; var i , j ; begin
36244: LD_INT 0
36246: PPUSH
36247: PPUSH
36248: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36249: LD_ADDR_VAR 0 2
36253: PUSH
36254: LD_INT 21
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PPUSH
36264: CALL_OW 69
36268: PUSH
36269: FOR_IN
36270: IFFALSE 36294
// if IsSelected ( i ) then
36272: LD_VAR 0 2
36276: PPUSH
36277: CALL_OW 306
36281: IFFALSE 36292
// ComForceInvisible ( i ) ;
36283: LD_VAR 0 2
36287: PPUSH
36288: CALL_OW 496
36292: GO 36269
36294: POP
36295: POP
// end ;
36296: LD_VAR 0 1
36300: RET
// export function hHackChangeYourSide ; begin
36301: LD_INT 0
36303: PPUSH
// if your_side = 8 then
36304: LD_OWVAR 2
36308: PUSH
36309: LD_INT 8
36311: EQUAL
36312: IFFALSE 36324
// your_side := 0 else
36314: LD_ADDR_OWVAR 2
36318: PUSH
36319: LD_INT 0
36321: ST_TO_ADDR
36322: GO 36338
// your_side := your_side + 1 ;
36324: LD_ADDR_OWVAR 2
36328: PUSH
36329: LD_OWVAR 2
36333: PUSH
36334: LD_INT 1
36336: PLUS
36337: ST_TO_ADDR
// end ;
36338: LD_VAR 0 1
36342: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36343: LD_INT 0
36345: PPUSH
36346: PPUSH
36347: PPUSH
// for i in all_units do
36348: LD_ADDR_VAR 0 2
36352: PUSH
36353: LD_OWVAR 3
36357: PUSH
36358: FOR_IN
36359: IFFALSE 36437
// if IsSelected ( i ) then
36361: LD_VAR 0 2
36365: PPUSH
36366: CALL_OW 306
36370: IFFALSE 36435
// begin j := GetSide ( i ) ;
36372: LD_ADDR_VAR 0 3
36376: PUSH
36377: LD_VAR 0 2
36381: PPUSH
36382: CALL_OW 255
36386: ST_TO_ADDR
// if j = 8 then
36387: LD_VAR 0 3
36391: PUSH
36392: LD_INT 8
36394: EQUAL
36395: IFFALSE 36407
// j := 0 else
36397: LD_ADDR_VAR 0 3
36401: PUSH
36402: LD_INT 0
36404: ST_TO_ADDR
36405: GO 36421
// j := j + 1 ;
36407: LD_ADDR_VAR 0 3
36411: PUSH
36412: LD_VAR 0 3
36416: PUSH
36417: LD_INT 1
36419: PLUS
36420: ST_TO_ADDR
// SetSide ( i , j ) ;
36421: LD_VAR 0 2
36425: PPUSH
36426: LD_VAR 0 3
36430: PPUSH
36431: CALL_OW 235
// end ;
36435: GO 36358
36437: POP
36438: POP
// end ;
36439: LD_VAR 0 1
36443: RET
// export function hHackFog ; begin
36444: LD_INT 0
36446: PPUSH
// FogOff ( true ) ;
36447: LD_INT 1
36449: PPUSH
36450: CALL_OW 344
// end ;
36454: LD_VAR 0 1
36458: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36459: LD_INT 0
36461: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36462: LD_VAR 0 1
36466: PPUSH
36467: LD_VAR 0 2
36471: PPUSH
36472: LD_VAR 0 3
36476: PPUSH
36477: LD_INT 1
36479: PPUSH
36480: LD_INT 1
36482: PPUSH
36483: CALL_OW 483
// CenterOnXY ( x , y ) ;
36487: LD_VAR 0 2
36491: PPUSH
36492: LD_VAR 0 3
36496: PPUSH
36497: CALL_OW 84
// end ;
36501: LD_VAR 0 4
36505: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36506: LD_INT 0
36508: PPUSH
36509: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36510: LD_VAR 0 1
36514: NOT
36515: PUSH
36516: LD_VAR 0 2
36520: PPUSH
36521: LD_VAR 0 3
36525: PPUSH
36526: CALL_OW 488
36530: NOT
36531: OR
36532: PUSH
36533: LD_VAR 0 1
36537: PPUSH
36538: CALL_OW 266
36542: PUSH
36543: LD_INT 3
36545: NONEQUAL
36546: PUSH
36547: LD_VAR 0 1
36551: PPUSH
36552: CALL_OW 247
36556: PUSH
36557: LD_INT 1
36559: EQUAL
36560: NOT
36561: AND
36562: OR
36563: IFFALSE 36567
// exit ;
36565: GO 36849
// if GetType ( factory ) = unit_human then
36567: LD_VAR 0 1
36571: PPUSH
36572: CALL_OW 247
36576: PUSH
36577: LD_INT 1
36579: EQUAL
36580: IFFALSE 36597
// factory := IsInUnit ( factory ) ;
36582: LD_ADDR_VAR 0 1
36586: PUSH
36587: LD_VAR 0 1
36591: PPUSH
36592: CALL_OW 310
36596: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36597: LD_VAR 0 1
36601: PPUSH
36602: CALL_OW 266
36606: PUSH
36607: LD_INT 3
36609: NONEQUAL
36610: IFFALSE 36614
// exit ;
36612: GO 36849
// for i := 1 to Count ( factoryWaypoints ) do
36614: LD_ADDR_VAR 0 5
36618: PUSH
36619: DOUBLE
36620: LD_INT 1
36622: DEC
36623: ST_TO_ADDR
36624: LD_EXP 109
36628: PPUSH
36629: CALL 45495 0 1
36633: PUSH
36634: FOR_TO
36635: IFFALSE 36797
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
36637: LD_VAR 0 2
36641: PPUSH
36642: LD_VAR 0 3
36646: PPUSH
36647: CALL_OW 428
36651: PUSH
36652: LD_EXP 109
36656: PUSH
36657: LD_VAR 0 5
36661: ARRAY
36662: PUSH
36663: LD_INT 2
36665: ARRAY
36666: EQUAL
36667: IFFALSE 36699
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
36669: LD_ADDR_EXP 109
36673: PUSH
36674: LD_EXP 109
36678: PPUSH
36679: LD_VAR 0 5
36683: PPUSH
36684: CALL_OW 3
36688: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36689: CALL 36854 0 0
// exit ;
36693: POP
36694: POP
36695: GO 36849
// end else
36697: GO 36795
// if factory = factoryWaypoints [ i ] [ 2 ] then
36699: LD_VAR 0 1
36703: PUSH
36704: LD_EXP 109
36708: PUSH
36709: LD_VAR 0 5
36713: ARRAY
36714: PUSH
36715: LD_INT 2
36717: ARRAY
36718: EQUAL
36719: IFFALSE 36795
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
36721: LD_ADDR_EXP 109
36725: PUSH
36726: LD_EXP 109
36730: PPUSH
36731: LD_VAR 0 5
36735: PPUSH
36736: CALL_OW 3
36740: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
36741: LD_ADDR_EXP 109
36745: PUSH
36746: LD_EXP 109
36750: PPUSH
36751: LD_VAR 0 1
36755: PPUSH
36756: CALL_OW 255
36760: PUSH
36761: LD_VAR 0 1
36765: PUSH
36766: LD_VAR 0 2
36770: PUSH
36771: LD_VAR 0 3
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: PPUSH
36782: CALL 81104 0 2
36786: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36787: CALL 36854 0 0
// exit ;
36791: POP
36792: POP
36793: GO 36849
// end ; end ;
36795: GO 36634
36797: POP
36798: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
36799: LD_ADDR_EXP 109
36803: PUSH
36804: LD_EXP 109
36808: PPUSH
36809: LD_VAR 0 1
36813: PPUSH
36814: CALL_OW 255
36818: PUSH
36819: LD_VAR 0 1
36823: PUSH
36824: LD_VAR 0 2
36828: PUSH
36829: LD_VAR 0 3
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: PPUSH
36840: CALL 81104 0 2
36844: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36845: CALL 36854 0 0
// end ;
36849: LD_VAR 0 4
36853: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36854: LD_INT 0
36856: PPUSH
36857: PPUSH
36858: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36859: LD_STRING resetFactoryWaypoint();
36861: PPUSH
36862: CALL_OW 559
// if factoryWaypoints then
36866: LD_EXP 109
36870: IFFALSE 36991
// begin list := factoryWaypoints ;
36872: LD_ADDR_VAR 0 3
36876: PUSH
36877: LD_EXP 109
36881: ST_TO_ADDR
// for i := 1 to list do
36882: LD_ADDR_VAR 0 2
36886: PUSH
36887: DOUBLE
36888: LD_INT 1
36890: DEC
36891: ST_TO_ADDR
36892: LD_VAR 0 3
36896: PUSH
36897: FOR_TO
36898: IFFALSE 36989
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36900: LD_STRING setFactoryWaypointXY(
36902: PUSH
36903: LD_VAR 0 3
36907: PUSH
36908: LD_VAR 0 2
36912: ARRAY
36913: PUSH
36914: LD_INT 1
36916: ARRAY
36917: STR
36918: PUSH
36919: LD_STRING ,
36921: STR
36922: PUSH
36923: LD_VAR 0 3
36927: PUSH
36928: LD_VAR 0 2
36932: ARRAY
36933: PUSH
36934: LD_INT 2
36936: ARRAY
36937: STR
36938: PUSH
36939: LD_STRING ,
36941: STR
36942: PUSH
36943: LD_VAR 0 3
36947: PUSH
36948: LD_VAR 0 2
36952: ARRAY
36953: PUSH
36954: LD_INT 3
36956: ARRAY
36957: STR
36958: PUSH
36959: LD_STRING ,
36961: STR
36962: PUSH
36963: LD_VAR 0 3
36967: PUSH
36968: LD_VAR 0 2
36972: ARRAY
36973: PUSH
36974: LD_INT 4
36976: ARRAY
36977: STR
36978: PUSH
36979: LD_STRING )
36981: STR
36982: PPUSH
36983: CALL_OW 559
36987: GO 36897
36989: POP
36990: POP
// end ; end ;
36991: LD_VAR 0 1
36995: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36996: LD_INT 0
36998: PPUSH
// if HexInfo ( x , y ) = warehouse then
36999: LD_VAR 0 2
37003: PPUSH
37004: LD_VAR 0 3
37008: PPUSH
37009: CALL_OW 428
37013: PUSH
37014: LD_VAR 0 1
37018: EQUAL
37019: IFFALSE 37046
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
37021: LD_ADDR_EXP 111
37025: PUSH
37026: LD_EXP 111
37030: PPUSH
37031: LD_VAR 0 1
37035: PPUSH
37036: LD_INT 0
37038: PPUSH
37039: CALL_OW 1
37043: ST_TO_ADDR
37044: GO 37097
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
37046: LD_ADDR_EXP 111
37050: PUSH
37051: LD_EXP 111
37055: PPUSH
37056: LD_VAR 0 1
37060: PPUSH
37061: LD_VAR 0 1
37065: PPUSH
37066: CALL_OW 255
37070: PUSH
37071: LD_VAR 0 1
37075: PUSH
37076: LD_VAR 0 2
37080: PUSH
37081: LD_VAR 0 3
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: PPUSH
37092: CALL_OW 1
37096: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
37097: CALL 37106 0 0
// end ;
37101: LD_VAR 0 4
37105: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
37106: LD_INT 0
37108: PPUSH
37109: PPUSH
37110: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
37111: LD_STRING resetWarehouseGatheringPoints();
37113: PPUSH
37114: CALL_OW 559
// if warehouseGatheringPoints then
37118: LD_EXP 111
37122: IFFALSE 37248
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
37124: LD_ADDR_VAR 0 3
37128: PUSH
37129: LD_EXP 111
37133: PPUSH
37134: CALL 84872 0 1
37138: ST_TO_ADDR
// for i := 1 to list do
37139: LD_ADDR_VAR 0 2
37143: PUSH
37144: DOUBLE
37145: LD_INT 1
37147: DEC
37148: ST_TO_ADDR
37149: LD_VAR 0 3
37153: PUSH
37154: FOR_TO
37155: IFFALSE 37246
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
37157: LD_STRING setWarehouseGatheringPointXY(
37159: PUSH
37160: LD_VAR 0 3
37164: PUSH
37165: LD_VAR 0 2
37169: ARRAY
37170: PUSH
37171: LD_INT 1
37173: ARRAY
37174: STR
37175: PUSH
37176: LD_STRING ,
37178: STR
37179: PUSH
37180: LD_VAR 0 3
37184: PUSH
37185: LD_VAR 0 2
37189: ARRAY
37190: PUSH
37191: LD_INT 2
37193: ARRAY
37194: STR
37195: PUSH
37196: LD_STRING ,
37198: STR
37199: PUSH
37200: LD_VAR 0 3
37204: PUSH
37205: LD_VAR 0 2
37209: ARRAY
37210: PUSH
37211: LD_INT 3
37213: ARRAY
37214: STR
37215: PUSH
37216: LD_STRING ,
37218: STR
37219: PUSH
37220: LD_VAR 0 3
37224: PUSH
37225: LD_VAR 0 2
37229: ARRAY
37230: PUSH
37231: LD_INT 4
37233: ARRAY
37234: STR
37235: PUSH
37236: LD_STRING )
37238: STR
37239: PPUSH
37240: CALL_OW 559
37244: GO 37154
37246: POP
37247: POP
// end ; end ;
37248: LD_VAR 0 1
37252: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
37253: LD_EXP 111
37257: IFFALSE 37942
37259: GO 37261
37261: DISABLE
37262: LD_INT 0
37264: PPUSH
37265: PPUSH
37266: PPUSH
37267: PPUSH
37268: PPUSH
37269: PPUSH
37270: PPUSH
37271: PPUSH
37272: PPUSH
// begin enable ;
37273: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
37274: LD_ADDR_VAR 0 3
37278: PUSH
37279: LD_EXP 111
37283: PPUSH
37284: CALL 84872 0 1
37288: ST_TO_ADDR
// if not list then
37289: LD_VAR 0 3
37293: NOT
37294: IFFALSE 37298
// exit ;
37296: GO 37942
// for i := 1 to list do
37298: LD_ADDR_VAR 0 1
37302: PUSH
37303: DOUBLE
37304: LD_INT 1
37306: DEC
37307: ST_TO_ADDR
37308: LD_VAR 0 3
37312: PUSH
37313: FOR_TO
37314: IFFALSE 37940
// begin depot := list [ i ] [ 2 ] ;
37316: LD_ADDR_VAR 0 8
37320: PUSH
37321: LD_VAR 0 3
37325: PUSH
37326: LD_VAR 0 1
37330: ARRAY
37331: PUSH
37332: LD_INT 2
37334: ARRAY
37335: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
37336: LD_ADDR_VAR 0 5
37340: PUSH
37341: LD_VAR 0 3
37345: PUSH
37346: LD_VAR 0 1
37350: ARRAY
37351: PUSH
37352: LD_INT 1
37354: ARRAY
37355: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
37356: LD_VAR 0 8
37360: PPUSH
37361: CALL_OW 301
37365: PUSH
37366: LD_VAR 0 5
37370: PUSH
37371: LD_VAR 0 8
37375: PPUSH
37376: CALL_OW 255
37380: NONEQUAL
37381: OR
37382: IFFALSE 37411
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
37384: LD_ADDR_EXP 111
37388: PUSH
37389: LD_EXP 111
37393: PPUSH
37394: LD_VAR 0 8
37398: PPUSH
37399: LD_INT 0
37401: PPUSH
37402: CALL_OW 1
37406: ST_TO_ADDR
// exit ;
37407: POP
37408: POP
37409: GO 37942
// end ; x := list [ i ] [ 3 ] ;
37411: LD_ADDR_VAR 0 6
37415: PUSH
37416: LD_VAR 0 3
37420: PUSH
37421: LD_VAR 0 1
37425: ARRAY
37426: PUSH
37427: LD_INT 3
37429: ARRAY
37430: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
37431: LD_ADDR_VAR 0 7
37435: PUSH
37436: LD_VAR 0 3
37440: PUSH
37441: LD_VAR 0 1
37445: ARRAY
37446: PUSH
37447: LD_INT 4
37449: ARRAY
37450: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
37451: LD_ADDR_VAR 0 9
37455: PUSH
37456: LD_VAR 0 6
37460: PPUSH
37461: LD_VAR 0 7
37465: PPUSH
37466: LD_INT 16
37468: PPUSH
37469: CALL 83456 0 3
37473: ST_TO_ADDR
// if not cratesNearbyPoint then
37474: LD_VAR 0 9
37478: NOT
37479: IFFALSE 37485
// exit ;
37481: POP
37482: POP
37483: GO 37942
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
37485: LD_ADDR_VAR 0 4
37489: PUSH
37490: LD_INT 22
37492: PUSH
37493: LD_VAR 0 5
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 3
37504: PUSH
37505: LD_INT 60
37507: PUSH
37508: EMPTY
37509: LIST
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 91
37517: PUSH
37518: LD_VAR 0 8
37522: PUSH
37523: LD_INT 6
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: PUSH
37534: LD_INT 25
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 25
37546: PUSH
37547: LD_INT 16
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: PPUSH
37565: CALL_OW 69
37569: PUSH
37570: LD_VAR 0 8
37574: PPUSH
37575: CALL_OW 313
37579: PPUSH
37580: LD_INT 3
37582: PUSH
37583: LD_INT 60
37585: PUSH
37586: EMPTY
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: LD_INT 25
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 25
37608: PUSH
37609: LD_INT 16
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PPUSH
37625: CALL_OW 72
37629: UNION
37630: ST_TO_ADDR
// if tmp then
37631: LD_VAR 0 4
37635: IFFALSE 37715
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37637: LD_ADDR_VAR 0 4
37641: PUSH
37642: LD_VAR 0 4
37646: PPUSH
37647: LD_INT 3
37649: PPUSH
37650: CALL 81419 0 2
37654: ST_TO_ADDR
// for j in tmp do
37655: LD_ADDR_VAR 0 2
37659: PUSH
37660: LD_VAR 0 4
37664: PUSH
37665: FOR_IN
37666: IFFALSE 37709
// begin if IsInUnit ( j ) then
37668: LD_VAR 0 2
37672: PPUSH
37673: CALL_OW 310
37677: IFFALSE 37688
// ComExit ( j ) ;
37679: LD_VAR 0 2
37683: PPUSH
37684: CALL 81502 0 1
// AddComCollect ( j , x , y ) ;
37688: LD_VAR 0 2
37692: PPUSH
37693: LD_VAR 0 6
37697: PPUSH
37698: LD_VAR 0 7
37702: PPUSH
37703: CALL_OW 177
// end ;
37707: GO 37665
37709: POP
37710: POP
// exit ;
37711: POP
37712: POP
37713: GO 37942
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37715: LD_ADDR_VAR 0 4
37719: PUSH
37720: LD_INT 22
37722: PUSH
37723: LD_VAR 0 5
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 91
37734: PUSH
37735: LD_VAR 0 8
37739: PUSH
37740: LD_INT 8
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 2
37750: PUSH
37751: LD_INT 34
37753: PUSH
37754: LD_INT 12
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 34
37763: PUSH
37764: LD_INT 51
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 34
37773: PUSH
37774: LD_INT 32
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 34
37783: PUSH
37784: LD_INT 89
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: PPUSH
37803: CALL_OW 69
37807: ST_TO_ADDR
// if tmp then
37808: LD_VAR 0 4
37812: IFFALSE 37938
// begin for j in tmp do
37814: LD_ADDR_VAR 0 2
37818: PUSH
37819: LD_VAR 0 4
37823: PUSH
37824: FOR_IN
37825: IFFALSE 37936
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37827: LD_VAR 0 2
37831: PPUSH
37832: CALL_OW 262
37836: PUSH
37837: LD_INT 3
37839: EQUAL
37840: PUSH
37841: LD_VAR 0 2
37845: PPUSH
37846: CALL_OW 261
37850: PUSH
37851: LD_INT 20
37853: GREATER
37854: OR
37855: PUSH
37856: LD_VAR 0 2
37860: PPUSH
37861: CALL_OW 314
37865: NOT
37866: AND
37867: PUSH
37868: LD_VAR 0 2
37872: PPUSH
37873: CALL_OW 263
37877: PUSH
37878: LD_INT 1
37880: NONEQUAL
37881: PUSH
37882: LD_VAR 0 2
37886: PPUSH
37887: CALL_OW 311
37891: OR
37892: AND
37893: IFFALSE 37934
// begin ComCollect ( j , x , y ) ;
37895: LD_VAR 0 2
37899: PPUSH
37900: LD_VAR 0 6
37904: PPUSH
37905: LD_VAR 0 7
37909: PPUSH
37910: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37914: LD_VAR 0 2
37918: PPUSH
37919: LD_VAR 0 8
37923: PPUSH
37924: CALL_OW 172
// exit ;
37928: POP
37929: POP
37930: POP
37931: POP
37932: GO 37942
// end ;
37934: GO 37824
37936: POP
37937: POP
// end ; end ;
37938: GO 37313
37940: POP
37941: POP
// end ; end_of_file
37942: PPOPN 9
37944: END
// export function SOS_UnitDestroyed ( un ) ; begin
37945: LD_INT 0
37947: PPUSH
// ComRadiation ( un ) ;
37948: LD_VAR 0 1
37952: PPUSH
37953: CALL 39014 0 1
// end ;
37957: LD_VAR 0 2
37961: RET
// export function SOS_UnitKamikazed ( un ) ; begin
37962: LD_INT 0
37964: PPUSH
// ComRadiation ( un ) ;
37965: LD_VAR 0 1
37969: PPUSH
37970: CALL 39014 0 1
// end ;
37974: LD_VAR 0 2
37978: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37979: LD_INT 0
37981: PPUSH
// end ;
37982: LD_VAR 0 4
37986: RET
// export function SOS_Command ( cmd ) ; begin
37987: LD_INT 0
37989: PPUSH
// end ;
37990: LD_VAR 0 2
37994: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37995: LD_INT 0
37997: PPUSH
// end ;
37998: LD_VAR 0 6
38002: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
38003: LD_INT 0
38005: PPUSH
38006: PPUSH
38007: PPUSH
38008: PPUSH
// if not vehicle or not factory then
38009: LD_VAR 0 1
38013: NOT
38014: PUSH
38015: LD_VAR 0 2
38019: NOT
38020: OR
38021: IFFALSE 38025
// exit ;
38023: GO 38605
// if not factoryWaypoints then
38025: LD_EXP 109
38029: NOT
38030: IFFALSE 38034
// exit ;
38032: GO 38605
// for i := 1 to Count ( factoryWaypoints ) do
38034: LD_ADDR_VAR 0 4
38038: PUSH
38039: DOUBLE
38040: LD_INT 1
38042: DEC
38043: ST_TO_ADDR
38044: LD_EXP 109
38048: PPUSH
38049: CALL 45495 0 1
38053: PUSH
38054: FOR_TO
38055: IFFALSE 38603
// if factoryWaypoints [ i ] [ 2 ] = factory then
38057: LD_EXP 109
38061: PUSH
38062: LD_VAR 0 4
38066: ARRAY
38067: PUSH
38068: LD_INT 2
38070: ARRAY
38071: PUSH
38072: LD_VAR 0 2
38076: EQUAL
38077: IFFALSE 38601
// begin if GetControl ( vehicle ) = control_manual then
38079: LD_VAR 0 1
38083: PPUSH
38084: CALL_OW 263
38088: PUSH
38089: LD_INT 1
38091: EQUAL
38092: IFFALSE 38454
// begin driver := IsDrivenBy ( vehicle ) ;
38094: LD_ADDR_VAR 0 5
38098: PUSH
38099: LD_VAR 0 1
38103: PPUSH
38104: CALL_OW 311
38108: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
38109: LD_VAR 0 5
38113: PUSH
38114: LD_EXP 110
38118: IN
38119: PUSH
38120: LD_VAR 0 1
38124: PUSH
38125: LD_EXP 110
38129: IN
38130: OR
38131: IFFALSE 38137
// exit ;
38133: POP
38134: POP
38135: GO 38605
// if not HasTask ( driver ) then
38137: LD_VAR 0 5
38141: PPUSH
38142: CALL_OW 314
38146: NOT
38147: IFFALSE 38452
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
38149: LD_ADDR_EXP 110
38153: PUSH
38154: LD_EXP 110
38158: PPUSH
38159: LD_VAR 0 5
38163: PPUSH
38164: CALL 81104 0 2
38168: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
38169: LD_ADDR_EXP 110
38173: PUSH
38174: LD_EXP 110
38178: PPUSH
38179: LD_VAR 0 1
38183: PPUSH
38184: CALL 81104 0 2
38188: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38189: LD_ADDR_VAR 0 6
38193: PUSH
38194: LD_EXP 109
38198: PUSH
38199: LD_VAR 0 4
38203: ARRAY
38204: PUSH
38205: LD_INT 3
38207: ARRAY
38208: PPUSH
38209: LD_EXP 109
38213: PUSH
38214: LD_VAR 0 4
38218: ARRAY
38219: PUSH
38220: LD_INT 4
38222: ARRAY
38223: PPUSH
38224: CALL_OW 428
38228: ST_TO_ADDR
// if hex then
38229: LD_VAR 0 6
38233: IFFALSE 38251
// ComMoveUnit ( driver , hex ) else
38235: LD_VAR 0 5
38239: PPUSH
38240: LD_VAR 0 6
38244: PPUSH
38245: CALL_OW 112
38249: GO 38335
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
38251: LD_VAR 0 1
38255: PPUSH
38256: LD_EXP 109
38260: PUSH
38261: LD_VAR 0 4
38265: ARRAY
38266: PUSH
38267: LD_INT 3
38269: ARRAY
38270: PPUSH
38271: LD_EXP 109
38275: PUSH
38276: LD_VAR 0 4
38280: ARRAY
38281: PUSH
38282: LD_INT 4
38284: ARRAY
38285: PPUSH
38286: CALL_OW 297
38290: PUSH
38291: LD_INT 0
38293: GREATER
38294: IFFALSE 38335
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38296: LD_VAR 0 5
38300: PPUSH
38301: LD_EXP 109
38305: PUSH
38306: LD_VAR 0 4
38310: ARRAY
38311: PUSH
38312: LD_INT 3
38314: ARRAY
38315: PPUSH
38316: LD_EXP 109
38320: PUSH
38321: LD_VAR 0 4
38325: ARRAY
38326: PUSH
38327: LD_INT 4
38329: ARRAY
38330: PPUSH
38331: CALL_OW 111
// AddComExitVehicle ( driver ) ;
38335: LD_VAR 0 5
38339: PPUSH
38340: CALL_OW 181
// if Multiplayer then
38344: LD_OWVAR 4
38348: IFFALSE 38397
// begin repeat wait ( 10 ) ;
38350: LD_INT 10
38352: PPUSH
38353: CALL_OW 67
// until not IsInUnit ( driver ) ;
38357: LD_VAR 0 5
38361: PPUSH
38362: CALL_OW 310
38366: NOT
38367: IFFALSE 38350
// if not HasTask ( driver ) then
38369: LD_VAR 0 5
38373: PPUSH
38374: CALL_OW 314
38378: NOT
38379: IFFALSE 38395
// ComEnterUnit ( driver , factory ) ;
38381: LD_VAR 0 5
38385: PPUSH
38386: LD_VAR 0 2
38390: PPUSH
38391: CALL_OW 120
// end else
38395: GO 38411
// AddComEnterUnit ( driver , factory ) ;
38397: LD_VAR 0 5
38401: PPUSH
38402: LD_VAR 0 2
38406: PPUSH
38407: CALL_OW 180
// wait ( 0 0$1 ) ;
38411: LD_INT 35
38413: PPUSH
38414: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
38418: LD_ADDR_EXP 110
38422: PUSH
38423: LD_EXP 110
38427: PUSH
38428: LD_VAR 0 5
38432: DIFF
38433: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
38434: LD_ADDR_EXP 110
38438: PUSH
38439: LD_EXP 110
38443: PUSH
38444: LD_VAR 0 1
38448: DIFF
38449: ST_TO_ADDR
// break ;
38450: GO 38603
// end ; end else
38452: GO 38601
// if GetControl ( vehicle ) = control_remote then
38454: LD_VAR 0 1
38458: PPUSH
38459: CALL_OW 263
38463: PUSH
38464: LD_INT 2
38466: EQUAL
38467: IFFALSE 38553
// begin wait ( 0 0$2 ) ;
38469: LD_INT 70
38471: PPUSH
38472: CALL_OW 67
// repeat wait ( 10 ) ;
38476: LD_INT 10
38478: PPUSH
38479: CALL_OW 67
// Connect ( vehicle ) ;
38483: LD_VAR 0 1
38487: PPUSH
38488: CALL 51701 0 1
// until IsControledBy ( vehicle ) ;
38492: LD_VAR 0 1
38496: PPUSH
38497: CALL_OW 312
38501: IFFALSE 38476
// wait ( 10 ) ;
38503: LD_INT 10
38505: PPUSH
38506: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38510: LD_VAR 0 1
38514: PPUSH
38515: LD_EXP 109
38519: PUSH
38520: LD_VAR 0 4
38524: ARRAY
38525: PUSH
38526: LD_INT 3
38528: ARRAY
38529: PPUSH
38530: LD_EXP 109
38534: PUSH
38535: LD_VAR 0 4
38539: ARRAY
38540: PUSH
38541: LD_INT 4
38543: ARRAY
38544: PPUSH
38545: CALL_OW 111
// break ;
38549: GO 38603
// end else
38551: GO 38601
// begin wait ( 0 0$3 ) ;
38553: LD_INT 105
38555: PPUSH
38556: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38560: LD_VAR 0 1
38564: PPUSH
38565: LD_EXP 109
38569: PUSH
38570: LD_VAR 0 4
38574: ARRAY
38575: PUSH
38576: LD_INT 3
38578: ARRAY
38579: PPUSH
38580: LD_EXP 109
38584: PUSH
38585: LD_VAR 0 4
38589: ARRAY
38590: PUSH
38591: LD_INT 4
38593: ARRAY
38594: PPUSH
38595: CALL_OW 111
// break ;
38599: GO 38603
// end ; end ;
38601: GO 38054
38603: POP
38604: POP
// end ;
38605: LD_VAR 0 3
38609: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
38610: LD_INT 0
38612: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
38613: LD_VAR 0 1
38617: PUSH
38618: LD_INT 250
38620: EQUAL
38621: PUSH
38622: LD_VAR 0 2
38626: PPUSH
38627: CALL_OW 264
38631: PUSH
38632: LD_INT 81
38634: EQUAL
38635: AND
38636: IFFALSE 38657
// MinerPlaceMine ( unit , x , y ) ;
38638: LD_VAR 0 2
38642: PPUSH
38643: LD_VAR 0 4
38647: PPUSH
38648: LD_VAR 0 5
38652: PPUSH
38653: CALL 41749 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
38657: LD_VAR 0 1
38661: PUSH
38662: LD_INT 251
38664: EQUAL
38665: PUSH
38666: LD_VAR 0 2
38670: PPUSH
38671: CALL_OW 264
38675: PUSH
38676: LD_INT 81
38678: EQUAL
38679: AND
38680: IFFALSE 38701
// MinerDetonateMine ( unit , x , y ) ;
38682: LD_VAR 0 2
38686: PPUSH
38687: LD_VAR 0 4
38691: PPUSH
38692: LD_VAR 0 5
38696: PPUSH
38697: CALL 42024 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
38701: LD_VAR 0 1
38705: PUSH
38706: LD_INT 252
38708: EQUAL
38709: PUSH
38710: LD_VAR 0 2
38714: PPUSH
38715: CALL_OW 264
38719: PUSH
38720: LD_INT 81
38722: EQUAL
38723: AND
38724: IFFALSE 38745
// MinerCreateMinefield ( unit , x , y ) ;
38726: LD_VAR 0 2
38730: PPUSH
38731: LD_VAR 0 4
38735: PPUSH
38736: LD_VAR 0 5
38740: PPUSH
38741: CALL 42441 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
38745: LD_VAR 0 1
38749: PUSH
38750: LD_INT 253
38752: EQUAL
38753: PUSH
38754: LD_VAR 0 2
38758: PPUSH
38759: CALL_OW 257
38763: PUSH
38764: LD_INT 5
38766: EQUAL
38767: AND
38768: IFFALSE 38789
// ComBinocular ( unit , x , y ) ;
38770: LD_VAR 0 2
38774: PPUSH
38775: LD_VAR 0 4
38779: PPUSH
38780: LD_VAR 0 5
38784: PPUSH
38785: CALL 42810 0 3
// if selectedUnit then
38789: LD_VAR 0 3
38793: IFFALSE 38849
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
38795: LD_VAR 0 1
38799: PUSH
38800: LD_INT 254
38802: EQUAL
38803: PUSH
38804: LD_VAR 0 2
38808: PPUSH
38809: CALL_OW 264
38813: PUSH
38814: LD_INT 99
38816: EQUAL
38817: AND
38818: PUSH
38819: LD_VAR 0 3
38823: PPUSH
38824: CALL_OW 263
38828: PUSH
38829: LD_INT 3
38831: EQUAL
38832: AND
38833: IFFALSE 38849
// HackDestroyVehicle ( unit , selectedUnit ) ;
38835: LD_VAR 0 2
38839: PPUSH
38840: LD_VAR 0 3
38844: PPUSH
38845: CALL 41113 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38849: LD_VAR 0 1
38853: PUSH
38854: LD_INT 255
38856: EQUAL
38857: PUSH
38858: LD_VAR 0 2
38862: PPUSH
38863: CALL_OW 264
38867: PUSH
38868: LD_INT 14
38870: PUSH
38871: LD_INT 53
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: IN
38878: AND
38879: PUSH
38880: LD_VAR 0 4
38884: PPUSH
38885: LD_VAR 0 5
38889: PPUSH
38890: CALL_OW 488
38894: AND
38895: IFFALSE 38919
// CutTreeXYR ( unit , x , y , 12 ) ;
38897: LD_VAR 0 2
38901: PPUSH
38902: LD_VAR 0 4
38906: PPUSH
38907: LD_VAR 0 5
38911: PPUSH
38912: LD_INT 12
38914: PPUSH
38915: CALL 39110 0 4
// if cmd = 256 then
38919: LD_VAR 0 1
38923: PUSH
38924: LD_INT 256
38926: EQUAL
38927: IFFALSE 38948
// SetFactoryWaypoint ( unit , x , y ) ;
38929: LD_VAR 0 2
38933: PPUSH
38934: LD_VAR 0 4
38938: PPUSH
38939: LD_VAR 0 5
38943: PPUSH
38944: CALL 36506 0 3
// if cmd = 257 then
38948: LD_VAR 0 1
38952: PUSH
38953: LD_INT 257
38955: EQUAL
38956: IFFALSE 38977
// SetWarehouseGatheringPoint ( unit , x , y ) ;
38958: LD_VAR 0 2
38962: PPUSH
38963: LD_VAR 0 4
38967: PPUSH
38968: LD_VAR 0 5
38972: PPUSH
38973: CALL 36996 0 3
// if cmd = 258 then
38977: LD_VAR 0 1
38981: PUSH
38982: LD_INT 258
38984: EQUAL
38985: IFFALSE 39009
// BurnTreeXYR ( unit , x , y , 8 ) ;
38987: LD_VAR 0 2
38991: PPUSH
38992: LD_VAR 0 4
38996: PPUSH
38997: LD_VAR 0 5
39001: PPUSH
39002: LD_INT 8
39004: PPUSH
39005: CALL 39504 0 4
// end ;
39009: LD_VAR 0 6
39013: RET
// export function ComRadiation ( un ) ; var eff ; begin
39014: LD_INT 0
39016: PPUSH
39017: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
39018: LD_VAR 0 1
39022: PPUSH
39023: CALL_OW 264
39027: PUSH
39028: LD_INT 91
39030: NONEQUAL
39031: IFFALSE 39035
// exit ;
39033: GO 39105
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
39035: LD_INT 68
39037: PPUSH
39038: LD_VAR 0 1
39042: PPUSH
39043: CALL_OW 255
39047: PPUSH
39048: CALL_OW 321
39052: PUSH
39053: LD_INT 2
39055: EQUAL
39056: IFFALSE 39068
// eff := 50 else
39058: LD_ADDR_VAR 0 3
39062: PUSH
39063: LD_INT 50
39065: ST_TO_ADDR
39066: GO 39076
// eff := 25 ;
39068: LD_ADDR_VAR 0 3
39072: PUSH
39073: LD_INT 25
39075: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL_OW 250
39085: PPUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: CALL_OW 251
39095: PPUSH
39096: LD_VAR 0 3
39100: PPUSH
39101: CALL_OW 495
// end ;
39105: LD_VAR 0 2
39109: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
39110: LD_INT 0
39112: PPUSH
39113: PPUSH
39114: PPUSH
39115: PPUSH
39116: PPUSH
39117: PPUSH
39118: PPUSH
39119: PPUSH
39120: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
39121: LD_VAR 0 1
39125: PPUSH
39126: CALL_OW 302
39130: NOT
39131: PUSH
39132: LD_VAR 0 2
39136: PPUSH
39137: LD_VAR 0 3
39141: PPUSH
39142: CALL_OW 488
39146: NOT
39147: OR
39148: PUSH
39149: LD_VAR 0 4
39153: NOT
39154: OR
39155: IFFALSE 39159
// exit ;
39157: GO 39499
// list := [ ] ;
39159: LD_ADDR_VAR 0 13
39163: PUSH
39164: EMPTY
39165: ST_TO_ADDR
// if x - r < 0 then
39166: LD_VAR 0 2
39170: PUSH
39171: LD_VAR 0 4
39175: MINUS
39176: PUSH
39177: LD_INT 0
39179: LESS
39180: IFFALSE 39192
// min_x := 0 else
39182: LD_ADDR_VAR 0 7
39186: PUSH
39187: LD_INT 0
39189: ST_TO_ADDR
39190: GO 39208
// min_x := x - r ;
39192: LD_ADDR_VAR 0 7
39196: PUSH
39197: LD_VAR 0 2
39201: PUSH
39202: LD_VAR 0 4
39206: MINUS
39207: ST_TO_ADDR
// if y - r < 0 then
39208: LD_VAR 0 3
39212: PUSH
39213: LD_VAR 0 4
39217: MINUS
39218: PUSH
39219: LD_INT 0
39221: LESS
39222: IFFALSE 39234
// min_y := 0 else
39224: LD_ADDR_VAR 0 8
39228: PUSH
39229: LD_INT 0
39231: ST_TO_ADDR
39232: GO 39250
// min_y := y - r ;
39234: LD_ADDR_VAR 0 8
39238: PUSH
39239: LD_VAR 0 3
39243: PUSH
39244: LD_VAR 0 4
39248: MINUS
39249: ST_TO_ADDR
// max_x := x + r ;
39250: LD_ADDR_VAR 0 9
39254: PUSH
39255: LD_VAR 0 2
39259: PUSH
39260: LD_VAR 0 4
39264: PLUS
39265: ST_TO_ADDR
// max_y := y + r ;
39266: LD_ADDR_VAR 0 10
39270: PUSH
39271: LD_VAR 0 3
39275: PUSH
39276: LD_VAR 0 4
39280: PLUS
39281: ST_TO_ADDR
// for _x = min_x to max_x do
39282: LD_ADDR_VAR 0 11
39286: PUSH
39287: DOUBLE
39288: LD_VAR 0 7
39292: DEC
39293: ST_TO_ADDR
39294: LD_VAR 0 9
39298: PUSH
39299: FOR_TO
39300: IFFALSE 39417
// for _y = min_y to max_y do
39302: LD_ADDR_VAR 0 12
39306: PUSH
39307: DOUBLE
39308: LD_VAR 0 8
39312: DEC
39313: ST_TO_ADDR
39314: LD_VAR 0 10
39318: PUSH
39319: FOR_TO
39320: IFFALSE 39413
// begin if not ValidHex ( _x , _y ) then
39322: LD_VAR 0 11
39326: PPUSH
39327: LD_VAR 0 12
39331: PPUSH
39332: CALL_OW 488
39336: NOT
39337: IFFALSE 39341
// continue ;
39339: GO 39319
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39341: LD_VAR 0 11
39345: PPUSH
39346: LD_VAR 0 12
39350: PPUSH
39351: CALL_OW 351
39355: PUSH
39356: LD_VAR 0 11
39360: PPUSH
39361: LD_VAR 0 12
39365: PPUSH
39366: CALL_OW 554
39370: AND
39371: IFFALSE 39411
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39373: LD_ADDR_VAR 0 13
39377: PUSH
39378: LD_VAR 0 13
39382: PPUSH
39383: LD_VAR 0 13
39387: PUSH
39388: LD_INT 1
39390: PLUS
39391: PPUSH
39392: LD_VAR 0 11
39396: PUSH
39397: LD_VAR 0 12
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PPUSH
39406: CALL_OW 2
39410: ST_TO_ADDR
// end ;
39411: GO 39319
39413: POP
39414: POP
39415: GO 39299
39417: POP
39418: POP
// if not list then
39419: LD_VAR 0 13
39423: NOT
39424: IFFALSE 39428
// exit ;
39426: GO 39499
// for i in list do
39428: LD_ADDR_VAR 0 6
39432: PUSH
39433: LD_VAR 0 13
39437: PUSH
39438: FOR_IN
39439: IFFALSE 39497
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
39441: LD_VAR 0 1
39445: PPUSH
39446: LD_STRING M
39448: PUSH
39449: LD_VAR 0 6
39453: PUSH
39454: LD_INT 1
39456: ARRAY
39457: PUSH
39458: LD_VAR 0 6
39462: PUSH
39463: LD_INT 2
39465: ARRAY
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: PUSH
39488: EMPTY
39489: LIST
39490: PPUSH
39491: CALL_OW 447
39495: GO 39438
39497: POP
39498: POP
// end ;
39499: LD_VAR 0 5
39503: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
39504: LD_INT 0
39506: PPUSH
39507: PPUSH
39508: PPUSH
39509: PPUSH
39510: PPUSH
39511: PPUSH
39512: PPUSH
39513: PPUSH
39514: PPUSH
39515: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
39516: LD_VAR 0 1
39520: PPUSH
39521: CALL_OW 302
39525: NOT
39526: PUSH
39527: LD_VAR 0 2
39531: PPUSH
39532: LD_VAR 0 3
39536: PPUSH
39537: CALL_OW 488
39541: NOT
39542: OR
39543: PUSH
39544: LD_VAR 0 4
39548: NOT
39549: OR
39550: IFFALSE 39554
// exit ;
39552: GO 40067
// list := [ ] ;
39554: LD_ADDR_VAR 0 13
39558: PUSH
39559: EMPTY
39560: ST_TO_ADDR
// if x - r < 0 then
39561: LD_VAR 0 2
39565: PUSH
39566: LD_VAR 0 4
39570: MINUS
39571: PUSH
39572: LD_INT 0
39574: LESS
39575: IFFALSE 39587
// min_x := 0 else
39577: LD_ADDR_VAR 0 7
39581: PUSH
39582: LD_INT 0
39584: ST_TO_ADDR
39585: GO 39603
// min_x := x - r ;
39587: LD_ADDR_VAR 0 7
39591: PUSH
39592: LD_VAR 0 2
39596: PUSH
39597: LD_VAR 0 4
39601: MINUS
39602: ST_TO_ADDR
// if y - r < 0 then
39603: LD_VAR 0 3
39607: PUSH
39608: LD_VAR 0 4
39612: MINUS
39613: PUSH
39614: LD_INT 0
39616: LESS
39617: IFFALSE 39629
// min_y := 0 else
39619: LD_ADDR_VAR 0 8
39623: PUSH
39624: LD_INT 0
39626: ST_TO_ADDR
39627: GO 39645
// min_y := y - r ;
39629: LD_ADDR_VAR 0 8
39633: PUSH
39634: LD_VAR 0 3
39638: PUSH
39639: LD_VAR 0 4
39643: MINUS
39644: ST_TO_ADDR
// max_x := x + r ;
39645: LD_ADDR_VAR 0 9
39649: PUSH
39650: LD_VAR 0 2
39654: PUSH
39655: LD_VAR 0 4
39659: PLUS
39660: ST_TO_ADDR
// max_y := y + r ;
39661: LD_ADDR_VAR 0 10
39665: PUSH
39666: LD_VAR 0 3
39670: PUSH
39671: LD_VAR 0 4
39675: PLUS
39676: ST_TO_ADDR
// for _x = min_x to max_x do
39677: LD_ADDR_VAR 0 11
39681: PUSH
39682: DOUBLE
39683: LD_VAR 0 7
39687: DEC
39688: ST_TO_ADDR
39689: LD_VAR 0 9
39693: PUSH
39694: FOR_TO
39695: IFFALSE 39812
// for _y = min_y to max_y do
39697: LD_ADDR_VAR 0 12
39701: PUSH
39702: DOUBLE
39703: LD_VAR 0 8
39707: DEC
39708: ST_TO_ADDR
39709: LD_VAR 0 10
39713: PUSH
39714: FOR_TO
39715: IFFALSE 39808
// begin if not ValidHex ( _x , _y ) then
39717: LD_VAR 0 11
39721: PPUSH
39722: LD_VAR 0 12
39726: PPUSH
39727: CALL_OW 488
39731: NOT
39732: IFFALSE 39736
// continue ;
39734: GO 39714
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39736: LD_VAR 0 11
39740: PPUSH
39741: LD_VAR 0 12
39745: PPUSH
39746: CALL_OW 351
39750: PUSH
39751: LD_VAR 0 11
39755: PPUSH
39756: LD_VAR 0 12
39760: PPUSH
39761: CALL_OW 554
39765: AND
39766: IFFALSE 39806
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39768: LD_ADDR_VAR 0 13
39772: PUSH
39773: LD_VAR 0 13
39777: PPUSH
39778: LD_VAR 0 13
39782: PUSH
39783: LD_INT 1
39785: PLUS
39786: PPUSH
39787: LD_VAR 0 11
39791: PUSH
39792: LD_VAR 0 12
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PPUSH
39801: CALL_OW 2
39805: ST_TO_ADDR
// end ;
39806: GO 39714
39808: POP
39809: POP
39810: GO 39694
39812: POP
39813: POP
// if not list then
39814: LD_VAR 0 13
39818: NOT
39819: IFFALSE 39823
// exit ;
39821: GO 40067
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
39823: LD_ADDR_VAR 0 13
39827: PUSH
39828: LD_VAR 0 1
39832: PPUSH
39833: LD_VAR 0 13
39837: PPUSH
39838: LD_INT 1
39840: PPUSH
39841: LD_INT 1
39843: PPUSH
39844: CALL 48843 0 4
39848: ST_TO_ADDR
// ComStop ( flame ) ;
39849: LD_VAR 0 1
39853: PPUSH
39854: CALL_OW 141
// for i in list do
39858: LD_ADDR_VAR 0 6
39862: PUSH
39863: LD_VAR 0 13
39867: PUSH
39868: FOR_IN
39869: IFFALSE 39900
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
39871: LD_VAR 0 1
39875: PPUSH
39876: LD_VAR 0 6
39880: PUSH
39881: LD_INT 1
39883: ARRAY
39884: PPUSH
39885: LD_VAR 0 6
39889: PUSH
39890: LD_INT 2
39892: ARRAY
39893: PPUSH
39894: CALL_OW 176
39898: GO 39868
39900: POP
39901: POP
// repeat wait ( 0 0$1 ) ;
39902: LD_INT 35
39904: PPUSH
39905: CALL_OW 67
// task := GetTaskList ( flame ) ;
39909: LD_ADDR_VAR 0 14
39913: PUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 437
39923: ST_TO_ADDR
// if not task then
39924: LD_VAR 0 14
39928: NOT
39929: IFFALSE 39933
// exit ;
39931: GO 40067
// if task [ 1 ] [ 1 ] <> | then
39933: LD_VAR 0 14
39937: PUSH
39938: LD_INT 1
39940: ARRAY
39941: PUSH
39942: LD_INT 1
39944: ARRAY
39945: PUSH
39946: LD_STRING |
39948: NONEQUAL
39949: IFFALSE 39953
// exit ;
39951: GO 40067
// _x := task [ 1 ] [ 2 ] ;
39953: LD_ADDR_VAR 0 11
39957: PUSH
39958: LD_VAR 0 14
39962: PUSH
39963: LD_INT 1
39965: ARRAY
39966: PUSH
39967: LD_INT 2
39969: ARRAY
39970: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
39971: LD_ADDR_VAR 0 12
39975: PUSH
39976: LD_VAR 0 14
39980: PUSH
39981: LD_INT 1
39983: ARRAY
39984: PUSH
39985: LD_INT 3
39987: ARRAY
39988: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
39989: LD_VAR 0 11
39993: PPUSH
39994: LD_VAR 0 12
39998: PPUSH
39999: CALL_OW 351
40003: NOT
40004: PUSH
40005: LD_VAR 0 11
40009: PPUSH
40010: LD_VAR 0 12
40014: PPUSH
40015: CALL_OW 554
40019: NOT
40020: OR
40021: IFFALSE 40055
// begin task := Delete ( task , 1 ) ;
40023: LD_ADDR_VAR 0 14
40027: PUSH
40028: LD_VAR 0 14
40032: PPUSH
40033: LD_INT 1
40035: PPUSH
40036: CALL_OW 3
40040: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
40041: LD_VAR 0 1
40045: PPUSH
40046: LD_VAR 0 14
40050: PPUSH
40051: CALL_OW 446
// end ; until not HasTask ( flame ) ;
40055: LD_VAR 0 1
40059: PPUSH
40060: CALL_OW 314
40064: NOT
40065: IFFALSE 39902
// end ;
40067: LD_VAR 0 5
40071: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
40072: LD_EXP 113
40076: NOT
40077: IFFALSE 40127
40079: GO 40081
40081: DISABLE
// begin initHack := true ;
40082: LD_ADDR_EXP 113
40086: PUSH
40087: LD_INT 1
40089: ST_TO_ADDR
// hackTanks := [ ] ;
40090: LD_ADDR_EXP 114
40094: PUSH
40095: EMPTY
40096: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
40097: LD_ADDR_EXP 115
40101: PUSH
40102: EMPTY
40103: ST_TO_ADDR
// hackLimit := 3 ;
40104: LD_ADDR_EXP 116
40108: PUSH
40109: LD_INT 3
40111: ST_TO_ADDR
// hackDist := 12 ;
40112: LD_ADDR_EXP 117
40116: PUSH
40117: LD_INT 12
40119: ST_TO_ADDR
// hackCounter := [ ] ;
40120: LD_ADDR_EXP 118
40124: PUSH
40125: EMPTY
40126: ST_TO_ADDR
// end ;
40127: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
40128: LD_EXP 113
40132: PUSH
40133: LD_INT 34
40135: PUSH
40136: LD_INT 99
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PPUSH
40143: CALL_OW 69
40147: AND
40148: IFFALSE 40401
40150: GO 40152
40152: DISABLE
40153: LD_INT 0
40155: PPUSH
40156: PPUSH
// begin enable ;
40157: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
40158: LD_ADDR_VAR 0 1
40162: PUSH
40163: LD_INT 34
40165: PUSH
40166: LD_INT 99
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PPUSH
40173: CALL_OW 69
40177: PUSH
40178: FOR_IN
40179: IFFALSE 40399
// begin if not i in hackTanks then
40181: LD_VAR 0 1
40185: PUSH
40186: LD_EXP 114
40190: IN
40191: NOT
40192: IFFALSE 40275
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
40194: LD_ADDR_EXP 114
40198: PUSH
40199: LD_EXP 114
40203: PPUSH
40204: LD_EXP 114
40208: PUSH
40209: LD_INT 1
40211: PLUS
40212: PPUSH
40213: LD_VAR 0 1
40217: PPUSH
40218: CALL_OW 1
40222: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
40223: LD_ADDR_EXP 115
40227: PUSH
40228: LD_EXP 115
40232: PPUSH
40233: LD_EXP 115
40237: PUSH
40238: LD_INT 1
40240: PLUS
40241: PPUSH
40242: EMPTY
40243: PPUSH
40244: CALL_OW 1
40248: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
40249: LD_ADDR_EXP 118
40253: PUSH
40254: LD_EXP 118
40258: PPUSH
40259: LD_EXP 118
40263: PUSH
40264: LD_INT 1
40266: PLUS
40267: PPUSH
40268: EMPTY
40269: PPUSH
40270: CALL_OW 1
40274: ST_TO_ADDR
// end ; if not IsOk ( i ) then
40275: LD_VAR 0 1
40279: PPUSH
40280: CALL_OW 302
40284: NOT
40285: IFFALSE 40298
// begin HackUnlinkAll ( i ) ;
40287: LD_VAR 0 1
40291: PPUSH
40292: CALL 40404 0 1
// continue ;
40296: GO 40178
// end ; HackCheckCapturedStatus ( i ) ;
40298: LD_VAR 0 1
40302: PPUSH
40303: CALL 40847 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
40307: LD_ADDR_VAR 0 2
40311: PUSH
40312: LD_INT 81
40314: PUSH
40315: LD_VAR 0 1
40319: PPUSH
40320: CALL_OW 255
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 33
40331: PUSH
40332: LD_INT 3
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 91
40341: PUSH
40342: LD_VAR 0 1
40346: PUSH
40347: LD_EXP 117
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 50
40359: PUSH
40360: EMPTY
40361: LIST
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: PPUSH
40369: CALL_OW 69
40373: ST_TO_ADDR
// if not tmp then
40374: LD_VAR 0 2
40378: NOT
40379: IFFALSE 40383
// continue ;
40381: GO 40178
// HackLink ( i , tmp ) ;
40383: LD_VAR 0 1
40387: PPUSH
40388: LD_VAR 0 2
40392: PPUSH
40393: CALL 40540 0 2
// end ;
40397: GO 40178
40399: POP
40400: POP
// end ;
40401: PPOPN 2
40403: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
40404: LD_INT 0
40406: PPUSH
40407: PPUSH
40408: PPUSH
// if not hack in hackTanks then
40409: LD_VAR 0 1
40413: PUSH
40414: LD_EXP 114
40418: IN
40419: NOT
40420: IFFALSE 40424
// exit ;
40422: GO 40535
// index := GetElementIndex ( hackTanks , hack ) ;
40424: LD_ADDR_VAR 0 4
40428: PUSH
40429: LD_EXP 114
40433: PPUSH
40434: LD_VAR 0 1
40438: PPUSH
40439: CALL 48140 0 2
40443: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
40444: LD_EXP 115
40448: PUSH
40449: LD_VAR 0 4
40453: ARRAY
40454: IFFALSE 40535
// begin for i in hackTanksCaptured [ index ] do
40456: LD_ADDR_VAR 0 3
40460: PUSH
40461: LD_EXP 115
40465: PUSH
40466: LD_VAR 0 4
40470: ARRAY
40471: PUSH
40472: FOR_IN
40473: IFFALSE 40499
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
40475: LD_VAR 0 3
40479: PUSH
40480: LD_INT 1
40482: ARRAY
40483: PPUSH
40484: LD_VAR 0 3
40488: PUSH
40489: LD_INT 2
40491: ARRAY
40492: PPUSH
40493: CALL_OW 235
40497: GO 40472
40499: POP
40500: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
40501: LD_ADDR_EXP 115
40505: PUSH
40506: LD_EXP 115
40510: PPUSH
40511: LD_VAR 0 4
40515: PPUSH
40516: EMPTY
40517: PPUSH
40518: CALL_OW 1
40522: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
40523: LD_VAR 0 1
40527: PPUSH
40528: LD_INT 0
40530: PPUSH
40531: CALL_OW 505
// end ; end ;
40535: LD_VAR 0 2
40539: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
40540: LD_INT 0
40542: PPUSH
40543: PPUSH
40544: PPUSH
// if not hack in hackTanks or not vehicles then
40545: LD_VAR 0 1
40549: PUSH
40550: LD_EXP 114
40554: IN
40555: NOT
40556: PUSH
40557: LD_VAR 0 2
40561: NOT
40562: OR
40563: IFFALSE 40567
// exit ;
40565: GO 40842
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
40567: LD_ADDR_VAR 0 2
40571: PUSH
40572: LD_VAR 0 1
40576: PPUSH
40577: LD_VAR 0 2
40581: PPUSH
40582: LD_INT 1
40584: PPUSH
40585: LD_INT 1
40587: PPUSH
40588: CALL 48790 0 4
40592: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
40593: LD_ADDR_VAR 0 5
40597: PUSH
40598: LD_EXP 114
40602: PPUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL 48140 0 2
40612: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
40613: LD_EXP 115
40617: PUSH
40618: LD_VAR 0 5
40622: ARRAY
40623: PUSH
40624: LD_EXP 116
40628: LESS
40629: IFFALSE 40818
// begin for i := 1 to vehicles do
40631: LD_ADDR_VAR 0 4
40635: PUSH
40636: DOUBLE
40637: LD_INT 1
40639: DEC
40640: ST_TO_ADDR
40641: LD_VAR 0 2
40645: PUSH
40646: FOR_TO
40647: IFFALSE 40816
// begin if hackTanksCaptured [ index ] = hackLimit then
40649: LD_EXP 115
40653: PUSH
40654: LD_VAR 0 5
40658: ARRAY
40659: PUSH
40660: LD_EXP 116
40664: EQUAL
40665: IFFALSE 40669
// break ;
40667: GO 40816
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
40669: LD_ADDR_EXP 118
40673: PUSH
40674: LD_EXP 118
40678: PPUSH
40679: LD_VAR 0 5
40683: PPUSH
40684: LD_EXP 118
40688: PUSH
40689: LD_VAR 0 5
40693: ARRAY
40694: PUSH
40695: LD_INT 1
40697: PLUS
40698: PPUSH
40699: CALL_OW 1
40703: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
40704: LD_ADDR_EXP 115
40708: PUSH
40709: LD_EXP 115
40713: PPUSH
40714: LD_VAR 0 5
40718: PUSH
40719: LD_EXP 115
40723: PUSH
40724: LD_VAR 0 5
40728: ARRAY
40729: PUSH
40730: LD_INT 1
40732: PLUS
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PPUSH
40738: LD_VAR 0 2
40742: PUSH
40743: LD_VAR 0 4
40747: ARRAY
40748: PUSH
40749: LD_VAR 0 2
40753: PUSH
40754: LD_VAR 0 4
40758: ARRAY
40759: PPUSH
40760: CALL_OW 255
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PPUSH
40769: CALL 48355 0 3
40773: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
40774: LD_VAR 0 2
40778: PUSH
40779: LD_VAR 0 4
40783: ARRAY
40784: PPUSH
40785: LD_VAR 0 1
40789: PPUSH
40790: CALL_OW 255
40794: PPUSH
40795: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
40799: LD_VAR 0 2
40803: PUSH
40804: LD_VAR 0 4
40808: ARRAY
40809: PPUSH
40810: CALL_OW 141
// end ;
40814: GO 40646
40816: POP
40817: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40818: LD_VAR 0 1
40822: PPUSH
40823: LD_EXP 115
40827: PUSH
40828: LD_VAR 0 5
40832: ARRAY
40833: PUSH
40834: LD_INT 0
40836: PLUS
40837: PPUSH
40838: CALL_OW 505
// end ;
40842: LD_VAR 0 3
40846: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
40847: LD_INT 0
40849: PPUSH
40850: PPUSH
40851: PPUSH
40852: PPUSH
// if not hack in hackTanks then
40853: LD_VAR 0 1
40857: PUSH
40858: LD_EXP 114
40862: IN
40863: NOT
40864: IFFALSE 40868
// exit ;
40866: GO 41108
// index := GetElementIndex ( hackTanks , hack ) ;
40868: LD_ADDR_VAR 0 4
40872: PUSH
40873: LD_EXP 114
40877: PPUSH
40878: LD_VAR 0 1
40882: PPUSH
40883: CALL 48140 0 2
40887: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
40888: LD_ADDR_VAR 0 3
40892: PUSH
40893: DOUBLE
40894: LD_EXP 115
40898: PUSH
40899: LD_VAR 0 4
40903: ARRAY
40904: INC
40905: ST_TO_ADDR
40906: LD_INT 1
40908: PUSH
40909: FOR_DOWNTO
40910: IFFALSE 41082
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
40912: LD_ADDR_VAR 0 5
40916: PUSH
40917: LD_EXP 115
40921: PUSH
40922: LD_VAR 0 4
40926: ARRAY
40927: PUSH
40928: LD_VAR 0 3
40932: ARRAY
40933: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
40934: LD_VAR 0 5
40938: PUSH
40939: LD_INT 1
40941: ARRAY
40942: PPUSH
40943: CALL_OW 302
40947: NOT
40948: PUSH
40949: LD_VAR 0 5
40953: PUSH
40954: LD_INT 1
40956: ARRAY
40957: PPUSH
40958: CALL_OW 255
40962: PUSH
40963: LD_VAR 0 1
40967: PPUSH
40968: CALL_OW 255
40972: NONEQUAL
40973: OR
40974: IFFALSE 41080
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
40976: LD_VAR 0 5
40980: PUSH
40981: LD_INT 1
40983: ARRAY
40984: PPUSH
40985: CALL_OW 305
40989: PUSH
40990: LD_VAR 0 5
40994: PUSH
40995: LD_INT 1
40997: ARRAY
40998: PPUSH
40999: CALL_OW 255
41003: PUSH
41004: LD_VAR 0 1
41008: PPUSH
41009: CALL_OW 255
41013: EQUAL
41014: AND
41015: IFFALSE 41039
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
41017: LD_VAR 0 5
41021: PUSH
41022: LD_INT 1
41024: ARRAY
41025: PPUSH
41026: LD_VAR 0 5
41030: PUSH
41031: LD_INT 2
41033: ARRAY
41034: PPUSH
41035: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
41039: LD_ADDR_EXP 115
41043: PUSH
41044: LD_EXP 115
41048: PPUSH
41049: LD_VAR 0 4
41053: PPUSH
41054: LD_EXP 115
41058: PUSH
41059: LD_VAR 0 4
41063: ARRAY
41064: PPUSH
41065: LD_VAR 0 3
41069: PPUSH
41070: CALL_OW 3
41074: PPUSH
41075: CALL_OW 1
41079: ST_TO_ADDR
// end ; end ;
41080: GO 40909
41082: POP
41083: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41084: LD_VAR 0 1
41088: PPUSH
41089: LD_EXP 115
41093: PUSH
41094: LD_VAR 0 4
41098: ARRAY
41099: PUSH
41100: LD_INT 0
41102: PLUS
41103: PPUSH
41104: CALL_OW 505
// end ;
41108: LD_VAR 0 2
41112: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
41113: LD_INT 0
41115: PPUSH
41116: PPUSH
41117: PPUSH
41118: PPUSH
// if not hack in hackTanks then
41119: LD_VAR 0 1
41123: PUSH
41124: LD_EXP 114
41128: IN
41129: NOT
41130: IFFALSE 41134
// exit ;
41132: GO 41219
// index := GetElementIndex ( hackTanks , hack ) ;
41134: LD_ADDR_VAR 0 5
41138: PUSH
41139: LD_EXP 114
41143: PPUSH
41144: LD_VAR 0 1
41148: PPUSH
41149: CALL 48140 0 2
41153: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
41154: LD_ADDR_VAR 0 4
41158: PUSH
41159: DOUBLE
41160: LD_INT 1
41162: DEC
41163: ST_TO_ADDR
41164: LD_EXP 115
41168: PUSH
41169: LD_VAR 0 5
41173: ARRAY
41174: PUSH
41175: FOR_TO
41176: IFFALSE 41217
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
41178: LD_EXP 115
41182: PUSH
41183: LD_VAR 0 5
41187: ARRAY
41188: PUSH
41189: LD_VAR 0 4
41193: ARRAY
41194: PUSH
41195: LD_INT 1
41197: ARRAY
41198: PUSH
41199: LD_VAR 0 2
41203: EQUAL
41204: IFFALSE 41215
// KillUnit ( vehicle ) ;
41206: LD_VAR 0 2
41210: PPUSH
41211: CALL_OW 66
41215: GO 41175
41217: POP
41218: POP
// end ;
41219: LD_VAR 0 3
41223: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
41224: LD_EXP 119
41228: NOT
41229: IFFALSE 41264
41231: GO 41233
41233: DISABLE
// begin initMiner := true ;
41234: LD_ADDR_EXP 119
41238: PUSH
41239: LD_INT 1
41241: ST_TO_ADDR
// minersList := [ ] ;
41242: LD_ADDR_EXP 120
41246: PUSH
41247: EMPTY
41248: ST_TO_ADDR
// minerMinesList := [ ] ;
41249: LD_ADDR_EXP 121
41253: PUSH
41254: EMPTY
41255: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
41256: LD_ADDR_EXP 122
41260: PUSH
41261: LD_INT 5
41263: ST_TO_ADDR
// end ;
41264: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
41265: LD_EXP 119
41269: PUSH
41270: LD_INT 34
41272: PUSH
41273: LD_INT 81
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PPUSH
41280: CALL_OW 69
41284: AND
41285: IFFALSE 41746
41287: GO 41289
41289: DISABLE
41290: LD_INT 0
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
// begin enable ;
41296: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
41297: LD_ADDR_VAR 0 1
41301: PUSH
41302: LD_INT 34
41304: PUSH
41305: LD_INT 81
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PPUSH
41312: CALL_OW 69
41316: PUSH
41317: FOR_IN
41318: IFFALSE 41390
// begin if not i in minersList then
41320: LD_VAR 0 1
41324: PUSH
41325: LD_EXP 120
41329: IN
41330: NOT
41331: IFFALSE 41388
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
41333: LD_ADDR_EXP 120
41337: PUSH
41338: LD_EXP 120
41342: PPUSH
41343: LD_EXP 120
41347: PUSH
41348: LD_INT 1
41350: PLUS
41351: PPUSH
41352: LD_VAR 0 1
41356: PPUSH
41357: CALL_OW 1
41361: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
41362: LD_ADDR_EXP 121
41366: PUSH
41367: LD_EXP 121
41371: PPUSH
41372: LD_EXP 121
41376: PUSH
41377: LD_INT 1
41379: PLUS
41380: PPUSH
41381: EMPTY
41382: PPUSH
41383: CALL_OW 1
41387: ST_TO_ADDR
// end end ;
41388: GO 41317
41390: POP
41391: POP
// for i := minerMinesList downto 1 do
41392: LD_ADDR_VAR 0 1
41396: PUSH
41397: DOUBLE
41398: LD_EXP 121
41402: INC
41403: ST_TO_ADDR
41404: LD_INT 1
41406: PUSH
41407: FOR_DOWNTO
41408: IFFALSE 41744
// begin if IsLive ( minersList [ i ] ) then
41410: LD_EXP 120
41414: PUSH
41415: LD_VAR 0 1
41419: ARRAY
41420: PPUSH
41421: CALL_OW 300
41425: IFFALSE 41453
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
41427: LD_EXP 120
41431: PUSH
41432: LD_VAR 0 1
41436: ARRAY
41437: PPUSH
41438: LD_EXP 121
41442: PUSH
41443: LD_VAR 0 1
41447: ARRAY
41448: PPUSH
41449: CALL_OW 505
// if not minerMinesList [ i ] then
41453: LD_EXP 121
41457: PUSH
41458: LD_VAR 0 1
41462: ARRAY
41463: NOT
41464: IFFALSE 41468
// continue ;
41466: GO 41407
// for j := minerMinesList [ i ] downto 1 do
41468: LD_ADDR_VAR 0 2
41472: PUSH
41473: DOUBLE
41474: LD_EXP 121
41478: PUSH
41479: LD_VAR 0 1
41483: ARRAY
41484: INC
41485: ST_TO_ADDR
41486: LD_INT 1
41488: PUSH
41489: FOR_DOWNTO
41490: IFFALSE 41740
// begin side := GetSide ( minersList [ i ] ) ;
41492: LD_ADDR_VAR 0 3
41496: PUSH
41497: LD_EXP 120
41501: PUSH
41502: LD_VAR 0 1
41506: ARRAY
41507: PPUSH
41508: CALL_OW 255
41512: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
41513: LD_ADDR_VAR 0 4
41517: PUSH
41518: LD_EXP 121
41522: PUSH
41523: LD_VAR 0 1
41527: ARRAY
41528: PUSH
41529: LD_VAR 0 2
41533: ARRAY
41534: PUSH
41535: LD_INT 1
41537: ARRAY
41538: PPUSH
41539: LD_EXP 121
41543: PUSH
41544: LD_VAR 0 1
41548: ARRAY
41549: PUSH
41550: LD_VAR 0 2
41554: ARRAY
41555: PUSH
41556: LD_INT 2
41558: ARRAY
41559: PPUSH
41560: CALL_OW 428
41564: ST_TO_ADDR
// if not tmp then
41565: LD_VAR 0 4
41569: NOT
41570: IFFALSE 41574
// continue ;
41572: GO 41489
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
41574: LD_VAR 0 4
41578: PUSH
41579: LD_INT 81
41581: PUSH
41582: LD_VAR 0 3
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PPUSH
41591: CALL_OW 69
41595: IN
41596: PUSH
41597: LD_EXP 121
41601: PUSH
41602: LD_VAR 0 1
41606: ARRAY
41607: PUSH
41608: LD_VAR 0 2
41612: ARRAY
41613: PUSH
41614: LD_INT 1
41616: ARRAY
41617: PPUSH
41618: LD_EXP 121
41622: PUSH
41623: LD_VAR 0 1
41627: ARRAY
41628: PUSH
41629: LD_VAR 0 2
41633: ARRAY
41634: PUSH
41635: LD_INT 2
41637: ARRAY
41638: PPUSH
41639: CALL_OW 458
41643: AND
41644: IFFALSE 41738
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
41646: LD_EXP 121
41650: PUSH
41651: LD_VAR 0 1
41655: ARRAY
41656: PUSH
41657: LD_VAR 0 2
41661: ARRAY
41662: PUSH
41663: LD_INT 1
41665: ARRAY
41666: PPUSH
41667: LD_EXP 121
41671: PUSH
41672: LD_VAR 0 1
41676: ARRAY
41677: PUSH
41678: LD_VAR 0 2
41682: ARRAY
41683: PUSH
41684: LD_INT 2
41686: ARRAY
41687: PPUSH
41688: LD_VAR 0 3
41692: PPUSH
41693: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
41697: LD_ADDR_EXP 121
41701: PUSH
41702: LD_EXP 121
41706: PPUSH
41707: LD_VAR 0 1
41711: PPUSH
41712: LD_EXP 121
41716: PUSH
41717: LD_VAR 0 1
41721: ARRAY
41722: PPUSH
41723: LD_VAR 0 2
41727: PPUSH
41728: CALL_OW 3
41732: PPUSH
41733: CALL_OW 1
41737: ST_TO_ADDR
// end ; end ;
41738: GO 41489
41740: POP
41741: POP
// end ;
41742: GO 41407
41744: POP
41745: POP
// end ;
41746: PPOPN 4
41748: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
41749: LD_INT 0
41751: PPUSH
41752: PPUSH
// result := false ;
41753: LD_ADDR_VAR 0 4
41757: PUSH
41758: LD_INT 0
41760: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
41761: LD_VAR 0 1
41765: PPUSH
41766: CALL_OW 264
41770: PUSH
41771: LD_INT 81
41773: EQUAL
41774: NOT
41775: IFFALSE 41779
// exit ;
41777: GO 42019
// index := GetElementIndex ( minersList , unit ) ;
41779: LD_ADDR_VAR 0 5
41783: PUSH
41784: LD_EXP 120
41788: PPUSH
41789: LD_VAR 0 1
41793: PPUSH
41794: CALL 48140 0 2
41798: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
41799: LD_EXP 121
41803: PUSH
41804: LD_VAR 0 5
41808: ARRAY
41809: PUSH
41810: LD_EXP 122
41814: GREATEREQUAL
41815: IFFALSE 41819
// exit ;
41817: GO 42019
// ComMoveXY ( unit , x , y ) ;
41819: LD_VAR 0 1
41823: PPUSH
41824: LD_VAR 0 2
41828: PPUSH
41829: LD_VAR 0 3
41833: PPUSH
41834: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41838: LD_INT 35
41840: PPUSH
41841: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
41845: LD_VAR 0 1
41849: PPUSH
41850: LD_VAR 0 2
41854: PPUSH
41855: LD_VAR 0 3
41859: PPUSH
41860: CALL 79901 0 3
41864: NOT
41865: PUSH
41866: LD_VAR 0 1
41870: PPUSH
41871: CALL_OW 314
41875: AND
41876: IFFALSE 41880
// exit ;
41878: GO 42019
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
41880: LD_VAR 0 2
41884: PPUSH
41885: LD_VAR 0 3
41889: PPUSH
41890: CALL_OW 428
41894: PUSH
41895: LD_VAR 0 1
41899: EQUAL
41900: PUSH
41901: LD_VAR 0 1
41905: PPUSH
41906: CALL_OW 314
41910: NOT
41911: AND
41912: IFFALSE 41838
// PlaySoundXY ( x , y , PlantMine ) ;
41914: LD_VAR 0 2
41918: PPUSH
41919: LD_VAR 0 3
41923: PPUSH
41924: LD_STRING PlantMine
41926: PPUSH
41927: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
41931: LD_VAR 0 2
41935: PPUSH
41936: LD_VAR 0 3
41940: PPUSH
41941: LD_VAR 0 1
41945: PPUSH
41946: CALL_OW 255
41950: PPUSH
41951: LD_INT 0
41953: PPUSH
41954: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41958: LD_ADDR_EXP 121
41962: PUSH
41963: LD_EXP 121
41967: PPUSH
41968: LD_VAR 0 5
41972: PUSH
41973: LD_EXP 121
41977: PUSH
41978: LD_VAR 0 5
41982: ARRAY
41983: PUSH
41984: LD_INT 1
41986: PLUS
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PPUSH
41992: LD_VAR 0 2
41996: PUSH
41997: LD_VAR 0 3
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PPUSH
42006: CALL 48355 0 3
42010: ST_TO_ADDR
// result := true ;
42011: LD_ADDR_VAR 0 4
42015: PUSH
42016: LD_INT 1
42018: ST_TO_ADDR
// end ;
42019: LD_VAR 0 4
42023: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
42024: LD_INT 0
42026: PPUSH
42027: PPUSH
42028: PPUSH
// if not unit in minersList then
42029: LD_VAR 0 1
42033: PUSH
42034: LD_EXP 120
42038: IN
42039: NOT
42040: IFFALSE 42044
// exit ;
42042: GO 42436
// index := GetElementIndex ( minersList , unit ) ;
42044: LD_ADDR_VAR 0 6
42048: PUSH
42049: LD_EXP 120
42053: PPUSH
42054: LD_VAR 0 1
42058: PPUSH
42059: CALL 48140 0 2
42063: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
42064: LD_ADDR_VAR 0 5
42068: PUSH
42069: DOUBLE
42070: LD_EXP 121
42074: PUSH
42075: LD_VAR 0 6
42079: ARRAY
42080: INC
42081: ST_TO_ADDR
42082: LD_INT 1
42084: PUSH
42085: FOR_DOWNTO
42086: IFFALSE 42247
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
42088: LD_EXP 121
42092: PUSH
42093: LD_VAR 0 6
42097: ARRAY
42098: PUSH
42099: LD_VAR 0 5
42103: ARRAY
42104: PUSH
42105: LD_INT 1
42107: ARRAY
42108: PUSH
42109: LD_VAR 0 2
42113: EQUAL
42114: PUSH
42115: LD_EXP 121
42119: PUSH
42120: LD_VAR 0 6
42124: ARRAY
42125: PUSH
42126: LD_VAR 0 5
42130: ARRAY
42131: PUSH
42132: LD_INT 2
42134: ARRAY
42135: PUSH
42136: LD_VAR 0 3
42140: EQUAL
42141: AND
42142: IFFALSE 42245
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
42144: LD_EXP 121
42148: PUSH
42149: LD_VAR 0 6
42153: ARRAY
42154: PUSH
42155: LD_VAR 0 5
42159: ARRAY
42160: PUSH
42161: LD_INT 1
42163: ARRAY
42164: PPUSH
42165: LD_EXP 121
42169: PUSH
42170: LD_VAR 0 6
42174: ARRAY
42175: PUSH
42176: LD_VAR 0 5
42180: ARRAY
42181: PUSH
42182: LD_INT 2
42184: ARRAY
42185: PPUSH
42186: LD_VAR 0 1
42190: PPUSH
42191: CALL_OW 255
42195: PPUSH
42196: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
42200: LD_ADDR_EXP 121
42204: PUSH
42205: LD_EXP 121
42209: PPUSH
42210: LD_VAR 0 6
42214: PPUSH
42215: LD_EXP 121
42219: PUSH
42220: LD_VAR 0 6
42224: ARRAY
42225: PPUSH
42226: LD_VAR 0 5
42230: PPUSH
42231: CALL_OW 3
42235: PPUSH
42236: CALL_OW 1
42240: ST_TO_ADDR
// exit ;
42241: POP
42242: POP
42243: GO 42436
// end ; end ;
42245: GO 42085
42247: POP
42248: POP
// for i := minerMinesList [ index ] downto 1 do
42249: LD_ADDR_VAR 0 5
42253: PUSH
42254: DOUBLE
42255: LD_EXP 121
42259: PUSH
42260: LD_VAR 0 6
42264: ARRAY
42265: INC
42266: ST_TO_ADDR
42267: LD_INT 1
42269: PUSH
42270: FOR_DOWNTO
42271: IFFALSE 42434
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
42273: LD_EXP 121
42277: PUSH
42278: LD_VAR 0 6
42282: ARRAY
42283: PUSH
42284: LD_VAR 0 5
42288: ARRAY
42289: PUSH
42290: LD_INT 1
42292: ARRAY
42293: PPUSH
42294: LD_EXP 121
42298: PUSH
42299: LD_VAR 0 6
42303: ARRAY
42304: PUSH
42305: LD_VAR 0 5
42309: ARRAY
42310: PUSH
42311: LD_INT 2
42313: ARRAY
42314: PPUSH
42315: LD_VAR 0 2
42319: PPUSH
42320: LD_VAR 0 3
42324: PPUSH
42325: CALL_OW 298
42329: PUSH
42330: LD_INT 6
42332: LESS
42333: IFFALSE 42432
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
42335: LD_EXP 121
42339: PUSH
42340: LD_VAR 0 6
42344: ARRAY
42345: PUSH
42346: LD_VAR 0 5
42350: ARRAY
42351: PUSH
42352: LD_INT 1
42354: ARRAY
42355: PPUSH
42356: LD_EXP 121
42360: PUSH
42361: LD_VAR 0 6
42365: ARRAY
42366: PUSH
42367: LD_VAR 0 5
42371: ARRAY
42372: PUSH
42373: LD_INT 2
42375: ARRAY
42376: PPUSH
42377: LD_VAR 0 1
42381: PPUSH
42382: CALL_OW 255
42386: PPUSH
42387: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
42391: LD_ADDR_EXP 121
42395: PUSH
42396: LD_EXP 121
42400: PPUSH
42401: LD_VAR 0 6
42405: PPUSH
42406: LD_EXP 121
42410: PUSH
42411: LD_VAR 0 6
42415: ARRAY
42416: PPUSH
42417: LD_VAR 0 5
42421: PPUSH
42422: CALL_OW 3
42426: PPUSH
42427: CALL_OW 1
42431: ST_TO_ADDR
// end ; end ;
42432: GO 42270
42434: POP
42435: POP
// end ;
42436: LD_VAR 0 4
42440: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
42441: LD_INT 0
42443: PPUSH
42444: PPUSH
42445: PPUSH
42446: PPUSH
42447: PPUSH
42448: PPUSH
42449: PPUSH
42450: PPUSH
42451: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
42452: LD_VAR 0 1
42456: PPUSH
42457: CALL_OW 264
42461: PUSH
42462: LD_INT 81
42464: EQUAL
42465: NOT
42466: PUSH
42467: LD_VAR 0 1
42471: PUSH
42472: LD_EXP 120
42476: IN
42477: NOT
42478: OR
42479: IFFALSE 42483
// exit ;
42481: GO 42805
// index := GetElementIndex ( minersList , unit ) ;
42483: LD_ADDR_VAR 0 6
42487: PUSH
42488: LD_EXP 120
42492: PPUSH
42493: LD_VAR 0 1
42497: PPUSH
42498: CALL 48140 0 2
42502: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
42503: LD_ADDR_VAR 0 8
42507: PUSH
42508: LD_EXP 122
42512: PUSH
42513: LD_EXP 121
42517: PUSH
42518: LD_VAR 0 6
42522: ARRAY
42523: MINUS
42524: ST_TO_ADDR
// if not minesFreeAmount then
42525: LD_VAR 0 8
42529: NOT
42530: IFFALSE 42534
// exit ;
42532: GO 42805
// tmp := [ ] ;
42534: LD_ADDR_VAR 0 7
42538: PUSH
42539: EMPTY
42540: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
42541: LD_ADDR_VAR 0 5
42545: PUSH
42546: DOUBLE
42547: LD_INT 1
42549: DEC
42550: ST_TO_ADDR
42551: LD_VAR 0 8
42555: PUSH
42556: FOR_TO
42557: IFFALSE 42752
// begin _d := rand ( 0 , 5 ) ;
42559: LD_ADDR_VAR 0 11
42563: PUSH
42564: LD_INT 0
42566: PPUSH
42567: LD_INT 5
42569: PPUSH
42570: CALL_OW 12
42574: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
42575: LD_ADDR_VAR 0 12
42579: PUSH
42580: LD_INT 2
42582: PPUSH
42583: LD_INT 6
42585: PPUSH
42586: CALL_OW 12
42590: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
42591: LD_ADDR_VAR 0 9
42595: PUSH
42596: LD_VAR 0 2
42600: PPUSH
42601: LD_VAR 0 11
42605: PPUSH
42606: LD_VAR 0 12
42610: PPUSH
42611: CALL_OW 272
42615: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
42616: LD_ADDR_VAR 0 10
42620: PUSH
42621: LD_VAR 0 3
42625: PPUSH
42626: LD_VAR 0 11
42630: PPUSH
42631: LD_VAR 0 12
42635: PPUSH
42636: CALL_OW 273
42640: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
42641: LD_VAR 0 9
42645: PPUSH
42646: LD_VAR 0 10
42650: PPUSH
42651: CALL_OW 488
42655: PUSH
42656: LD_VAR 0 9
42660: PUSH
42661: LD_VAR 0 10
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_VAR 0 7
42674: IN
42675: NOT
42676: AND
42677: PUSH
42678: LD_VAR 0 9
42682: PPUSH
42683: LD_VAR 0 10
42687: PPUSH
42688: CALL_OW 458
42692: NOT
42693: AND
42694: IFFALSE 42736
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
42696: LD_ADDR_VAR 0 7
42700: PUSH
42701: LD_VAR 0 7
42705: PPUSH
42706: LD_VAR 0 7
42710: PUSH
42711: LD_INT 1
42713: PLUS
42714: PPUSH
42715: LD_VAR 0 9
42719: PUSH
42720: LD_VAR 0 10
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PPUSH
42729: CALL_OW 1
42733: ST_TO_ADDR
42734: GO 42750
// i := i - 1 ;
42736: LD_ADDR_VAR 0 5
42740: PUSH
42741: LD_VAR 0 5
42745: PUSH
42746: LD_INT 1
42748: MINUS
42749: ST_TO_ADDR
// end ;
42750: GO 42556
42752: POP
42753: POP
// for i in tmp do
42754: LD_ADDR_VAR 0 5
42758: PUSH
42759: LD_VAR 0 7
42763: PUSH
42764: FOR_IN
42765: IFFALSE 42803
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
42767: LD_VAR 0 1
42771: PPUSH
42772: LD_VAR 0 5
42776: PUSH
42777: LD_INT 1
42779: ARRAY
42780: PPUSH
42781: LD_VAR 0 5
42785: PUSH
42786: LD_INT 2
42788: ARRAY
42789: PPUSH
42790: CALL 41749 0 3
42794: NOT
42795: IFFALSE 42801
// exit ;
42797: POP
42798: POP
42799: GO 42805
42801: GO 42764
42803: POP
42804: POP
// end ;
42805: LD_VAR 0 4
42809: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
42810: LD_INT 0
42812: PPUSH
42813: PPUSH
42814: PPUSH
42815: PPUSH
42816: PPUSH
42817: PPUSH
42818: PPUSH
42819: PPUSH
42820: PPUSH
// if GetClass ( unit ) <> class_sniper then
42821: LD_VAR 0 1
42825: PPUSH
42826: CALL_OW 257
42830: PUSH
42831: LD_INT 5
42833: NONEQUAL
42834: IFFALSE 42838
// exit ;
42836: GO 43304
// dist := 8 ;
42838: LD_ADDR_VAR 0 5
42842: PUSH
42843: LD_INT 8
42845: ST_TO_ADDR
// viewRange := 12 ;
42846: LD_ADDR_VAR 0 8
42850: PUSH
42851: LD_INT 12
42853: ST_TO_ADDR
// side := GetSide ( unit ) ;
42854: LD_ADDR_VAR 0 6
42858: PUSH
42859: LD_VAR 0 1
42863: PPUSH
42864: CALL_OW 255
42868: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
42869: LD_INT 61
42871: PPUSH
42872: LD_VAR 0 6
42876: PPUSH
42877: CALL_OW 321
42881: PUSH
42882: LD_INT 2
42884: EQUAL
42885: IFFALSE 42895
// viewRange := 16 ;
42887: LD_ADDR_VAR 0 8
42891: PUSH
42892: LD_INT 16
42894: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
42895: LD_VAR 0 1
42899: PPUSH
42900: LD_VAR 0 2
42904: PPUSH
42905: LD_VAR 0 3
42909: PPUSH
42910: CALL_OW 297
42914: PUSH
42915: LD_VAR 0 5
42919: GREATER
42920: IFFALSE 42999
// begin ComMoveXY ( unit , x , y ) ;
42922: LD_VAR 0 1
42926: PPUSH
42927: LD_VAR 0 2
42931: PPUSH
42932: LD_VAR 0 3
42936: PPUSH
42937: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42941: LD_INT 35
42943: PPUSH
42944: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
42948: LD_VAR 0 1
42952: PPUSH
42953: LD_VAR 0 2
42957: PPUSH
42958: LD_VAR 0 3
42962: PPUSH
42963: CALL 79901 0 3
42967: NOT
42968: IFFALSE 42972
// exit ;
42970: GO 43304
// until GetDistUnitXY ( unit , x , y ) < dist ;
42972: LD_VAR 0 1
42976: PPUSH
42977: LD_VAR 0 2
42981: PPUSH
42982: LD_VAR 0 3
42986: PPUSH
42987: CALL_OW 297
42991: PUSH
42992: LD_VAR 0 5
42996: LESS
42997: IFFALSE 42941
// end ; ComTurnXY ( unit , x , y ) ;
42999: LD_VAR 0 1
43003: PPUSH
43004: LD_VAR 0 2
43008: PPUSH
43009: LD_VAR 0 3
43013: PPUSH
43014: CALL_OW 118
// repeat if Multiplayer then
43018: LD_OWVAR 4
43022: IFFALSE 43033
// wait ( 35 ) else
43024: LD_INT 35
43026: PPUSH
43027: CALL_OW 67
43031: GO 43040
// wait ( 5 ) ;
43033: LD_INT 5
43035: PPUSH
43036: CALL_OW 67
// _d := GetDir ( unit ) ;
43040: LD_ADDR_VAR 0 11
43044: PUSH
43045: LD_VAR 0 1
43049: PPUSH
43050: CALL_OW 254
43054: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
43055: LD_ADDR_VAR 0 7
43059: PUSH
43060: LD_VAR 0 1
43064: PPUSH
43065: CALL_OW 250
43069: PPUSH
43070: LD_VAR 0 1
43074: PPUSH
43075: CALL_OW 251
43079: PPUSH
43080: LD_VAR 0 2
43084: PPUSH
43085: LD_VAR 0 3
43089: PPUSH
43090: CALL 82509 0 4
43094: ST_TO_ADDR
// until dir = _d ;
43095: LD_VAR 0 7
43099: PUSH
43100: LD_VAR 0 11
43104: EQUAL
43105: IFFALSE 43018
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
43107: LD_ADDR_VAR 0 9
43111: PUSH
43112: LD_VAR 0 1
43116: PPUSH
43117: CALL_OW 250
43121: PPUSH
43122: LD_VAR 0 7
43126: PPUSH
43127: LD_VAR 0 5
43131: PPUSH
43132: CALL_OW 272
43136: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
43137: LD_ADDR_VAR 0 10
43141: PUSH
43142: LD_VAR 0 1
43146: PPUSH
43147: CALL_OW 251
43151: PPUSH
43152: LD_VAR 0 7
43156: PPUSH
43157: LD_VAR 0 5
43161: PPUSH
43162: CALL_OW 273
43166: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43167: LD_VAR 0 9
43171: PPUSH
43172: LD_VAR 0 10
43176: PPUSH
43177: CALL_OW 488
43181: NOT
43182: IFFALSE 43186
// exit ;
43184: GO 43304
// ComAnimCustom ( unit , 1 ) ;
43186: LD_VAR 0 1
43190: PPUSH
43191: LD_INT 1
43193: PPUSH
43194: CALL_OW 592
// p := 0 ;
43198: LD_ADDR_VAR 0 12
43202: PUSH
43203: LD_INT 0
43205: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
43206: LD_VAR 0 9
43210: PPUSH
43211: LD_VAR 0 10
43215: PPUSH
43216: LD_VAR 0 6
43220: PPUSH
43221: LD_VAR 0 8
43225: PPUSH
43226: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
43230: LD_INT 35
43232: PPUSH
43233: CALL_OW 67
// p := Inc ( p ) ;
43237: LD_ADDR_VAR 0 12
43241: PUSH
43242: LD_VAR 0 12
43246: PPUSH
43247: CALL 82465 0 1
43251: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
43252: LD_VAR 0 12
43256: PUSH
43257: LD_INT 3
43259: EQUAL
43260: PUSH
43261: LD_VAR 0 1
43265: PPUSH
43266: CALL_OW 302
43270: NOT
43271: OR
43272: PUSH
43273: LD_VAR 0 1
43277: PPUSH
43278: CALL_OW 301
43282: OR
43283: IFFALSE 43230
// RemoveSeeing ( _x , _y , side ) ;
43285: LD_VAR 0 9
43289: PPUSH
43290: LD_VAR 0 10
43294: PPUSH
43295: LD_VAR 0 6
43299: PPUSH
43300: CALL_OW 331
// end ; end_of_file
43304: LD_VAR 0 4
43308: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
43309: LD_INT 0
43311: PPUSH
43312: PPUSH
// if exist_mode then
43313: LD_VAR 0 2
43317: IFFALSE 43363
// begin unit := CreateCharacter ( prefix & ident ) ;
43319: LD_ADDR_VAR 0 5
43323: PUSH
43324: LD_VAR 0 3
43328: PUSH
43329: LD_VAR 0 1
43333: STR
43334: PPUSH
43335: CALL_OW 34
43339: ST_TO_ADDR
// if unit then
43340: LD_VAR 0 5
43344: IFFALSE 43361
// DeleteCharacters ( prefix & ident ) ;
43346: LD_VAR 0 3
43350: PUSH
43351: LD_VAR 0 1
43355: STR
43356: PPUSH
43357: CALL_OW 40
// end else
43361: GO 43378
// unit := NewCharacter ( ident ) ;
43363: LD_ADDR_VAR 0 5
43367: PUSH
43368: LD_VAR 0 1
43372: PPUSH
43373: CALL_OW 25
43377: ST_TO_ADDR
// result := unit ;
43378: LD_ADDR_VAR 0 4
43382: PUSH
43383: LD_VAR 0 5
43387: ST_TO_ADDR
// end ;
43388: LD_VAR 0 4
43392: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
43393: LD_INT 0
43395: PPUSH
43396: PPUSH
// if exist_mode then
43397: LD_VAR 0 2
43401: IFFALSE 43426
// unit := CreateCharacter ( prefix & ident ) else
43403: LD_ADDR_VAR 0 5
43407: PUSH
43408: LD_VAR 0 3
43412: PUSH
43413: LD_VAR 0 1
43417: STR
43418: PPUSH
43419: CALL_OW 34
43423: ST_TO_ADDR
43424: GO 43441
// unit := NewCharacter ( ident ) ;
43426: LD_ADDR_VAR 0 5
43430: PUSH
43431: LD_VAR 0 1
43435: PPUSH
43436: CALL_OW 25
43440: ST_TO_ADDR
// result := unit ;
43441: LD_ADDR_VAR 0 4
43445: PUSH
43446: LD_VAR 0 5
43450: ST_TO_ADDR
// end ;
43451: LD_VAR 0 4
43455: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
43456: LD_INT 0
43458: PPUSH
43459: PPUSH
// if not side or not nation then
43460: LD_VAR 0 1
43464: NOT
43465: PUSH
43466: LD_VAR 0 2
43470: NOT
43471: OR
43472: IFFALSE 43476
// exit ;
43474: GO 44244
// case nation of nation_american :
43476: LD_VAR 0 2
43480: PUSH
43481: LD_INT 1
43483: DOUBLE
43484: EQUAL
43485: IFTRUE 43489
43487: GO 43703
43489: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
43490: LD_ADDR_VAR 0 4
43494: PUSH
43495: LD_INT 35
43497: PUSH
43498: LD_INT 45
43500: PUSH
43501: LD_INT 46
43503: PUSH
43504: LD_INT 47
43506: PUSH
43507: LD_INT 82
43509: PUSH
43510: LD_INT 83
43512: PUSH
43513: LD_INT 84
43515: PUSH
43516: LD_INT 85
43518: PUSH
43519: LD_INT 86
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: LD_INT 6
43530: PUSH
43531: LD_INT 15
43533: PUSH
43534: LD_INT 16
43536: PUSH
43537: LD_INT 7
43539: PUSH
43540: LD_INT 12
43542: PUSH
43543: LD_INT 13
43545: PUSH
43546: LD_INT 10
43548: PUSH
43549: LD_INT 14
43551: PUSH
43552: LD_INT 20
43554: PUSH
43555: LD_INT 21
43557: PUSH
43558: LD_INT 22
43560: PUSH
43561: LD_INT 25
43563: PUSH
43564: LD_INT 32
43566: PUSH
43567: LD_INT 27
43569: PUSH
43570: LD_INT 36
43572: PUSH
43573: LD_INT 69
43575: PUSH
43576: LD_INT 39
43578: PUSH
43579: LD_INT 34
43581: PUSH
43582: LD_INT 40
43584: PUSH
43585: LD_INT 48
43587: PUSH
43588: LD_INT 49
43590: PUSH
43591: LD_INT 50
43593: PUSH
43594: LD_INT 51
43596: PUSH
43597: LD_INT 52
43599: PUSH
43600: LD_INT 53
43602: PUSH
43603: LD_INT 54
43605: PUSH
43606: LD_INT 55
43608: PUSH
43609: LD_INT 56
43611: PUSH
43612: LD_INT 57
43614: PUSH
43615: LD_INT 58
43617: PUSH
43618: LD_INT 59
43620: PUSH
43621: LD_INT 60
43623: PUSH
43624: LD_INT 61
43626: PUSH
43627: LD_INT 62
43629: PUSH
43630: LD_INT 80
43632: PUSH
43633: LD_INT 82
43635: PUSH
43636: LD_INT 83
43638: PUSH
43639: LD_INT 84
43641: PUSH
43642: LD_INT 85
43644: PUSH
43645: LD_INT 86
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: ST_TO_ADDR
43701: GO 44168
43703: LD_INT 2
43705: DOUBLE
43706: EQUAL
43707: IFTRUE 43711
43709: GO 43937
43711: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
43712: LD_ADDR_VAR 0 4
43716: PUSH
43717: LD_INT 35
43719: PUSH
43720: LD_INT 45
43722: PUSH
43723: LD_INT 46
43725: PUSH
43726: LD_INT 47
43728: PUSH
43729: LD_INT 82
43731: PUSH
43732: LD_INT 83
43734: PUSH
43735: LD_INT 84
43737: PUSH
43738: LD_INT 85
43740: PUSH
43741: LD_INT 87
43743: PUSH
43744: LD_INT 70
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: LD_INT 11
43752: PUSH
43753: LD_INT 3
43755: PUSH
43756: LD_INT 4
43758: PUSH
43759: LD_INT 5
43761: PUSH
43762: LD_INT 6
43764: PUSH
43765: LD_INT 15
43767: PUSH
43768: LD_INT 18
43770: PUSH
43771: LD_INT 7
43773: PUSH
43774: LD_INT 17
43776: PUSH
43777: LD_INT 8
43779: PUSH
43780: LD_INT 20
43782: PUSH
43783: LD_INT 21
43785: PUSH
43786: LD_INT 22
43788: PUSH
43789: LD_INT 72
43791: PUSH
43792: LD_INT 26
43794: PUSH
43795: LD_INT 69
43797: PUSH
43798: LD_INT 39
43800: PUSH
43801: LD_INT 40
43803: PUSH
43804: LD_INT 41
43806: PUSH
43807: LD_INT 42
43809: PUSH
43810: LD_INT 43
43812: PUSH
43813: LD_INT 48
43815: PUSH
43816: LD_INT 49
43818: PUSH
43819: LD_INT 50
43821: PUSH
43822: LD_INT 51
43824: PUSH
43825: LD_INT 52
43827: PUSH
43828: LD_INT 53
43830: PUSH
43831: LD_INT 54
43833: PUSH
43834: LD_INT 55
43836: PUSH
43837: LD_INT 56
43839: PUSH
43840: LD_INT 60
43842: PUSH
43843: LD_INT 61
43845: PUSH
43846: LD_INT 62
43848: PUSH
43849: LD_INT 66
43851: PUSH
43852: LD_INT 67
43854: PUSH
43855: LD_INT 68
43857: PUSH
43858: LD_INT 81
43860: PUSH
43861: LD_INT 82
43863: PUSH
43864: LD_INT 83
43866: PUSH
43867: LD_INT 84
43869: PUSH
43870: LD_INT 85
43872: PUSH
43873: LD_INT 87
43875: PUSH
43876: LD_INT 88
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: ST_TO_ADDR
43935: GO 44168
43937: LD_INT 3
43939: DOUBLE
43940: EQUAL
43941: IFTRUE 43945
43943: GO 44167
43945: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
43946: LD_ADDR_VAR 0 4
43950: PUSH
43951: LD_INT 46
43953: PUSH
43954: LD_INT 47
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 82
43965: PUSH
43966: LD_INT 83
43968: PUSH
43969: LD_INT 84
43971: PUSH
43972: LD_INT 85
43974: PUSH
43975: LD_INT 86
43977: PUSH
43978: LD_INT 11
43980: PUSH
43981: LD_INT 9
43983: PUSH
43984: LD_INT 20
43986: PUSH
43987: LD_INT 19
43989: PUSH
43990: LD_INT 21
43992: PUSH
43993: LD_INT 24
43995: PUSH
43996: LD_INT 22
43998: PUSH
43999: LD_INT 25
44001: PUSH
44002: LD_INT 28
44004: PUSH
44005: LD_INT 29
44007: PUSH
44008: LD_INT 30
44010: PUSH
44011: LD_INT 31
44013: PUSH
44014: LD_INT 37
44016: PUSH
44017: LD_INT 38
44019: PUSH
44020: LD_INT 32
44022: PUSH
44023: LD_INT 27
44025: PUSH
44026: LD_INT 33
44028: PUSH
44029: LD_INT 69
44031: PUSH
44032: LD_INT 39
44034: PUSH
44035: LD_INT 34
44037: PUSH
44038: LD_INT 40
44040: PUSH
44041: LD_INT 71
44043: PUSH
44044: LD_INT 23
44046: PUSH
44047: LD_INT 44
44049: PUSH
44050: LD_INT 48
44052: PUSH
44053: LD_INT 49
44055: PUSH
44056: LD_INT 50
44058: PUSH
44059: LD_INT 51
44061: PUSH
44062: LD_INT 52
44064: PUSH
44065: LD_INT 53
44067: PUSH
44068: LD_INT 54
44070: PUSH
44071: LD_INT 55
44073: PUSH
44074: LD_INT 56
44076: PUSH
44077: LD_INT 57
44079: PUSH
44080: LD_INT 58
44082: PUSH
44083: LD_INT 59
44085: PUSH
44086: LD_INT 63
44088: PUSH
44089: LD_INT 64
44091: PUSH
44092: LD_INT 65
44094: PUSH
44095: LD_INT 82
44097: PUSH
44098: LD_INT 83
44100: PUSH
44101: LD_INT 84
44103: PUSH
44104: LD_INT 85
44106: PUSH
44107: LD_INT 86
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: ST_TO_ADDR
44165: GO 44168
44167: POP
// if state > - 1 and state < 3 then
44168: LD_VAR 0 3
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: GREATER
44177: PUSH
44178: LD_VAR 0 3
44182: PUSH
44183: LD_INT 3
44185: LESS
44186: AND
44187: IFFALSE 44244
// for i in result do
44189: LD_ADDR_VAR 0 5
44193: PUSH
44194: LD_VAR 0 4
44198: PUSH
44199: FOR_IN
44200: IFFALSE 44242
// if GetTech ( i , side ) <> state then
44202: LD_VAR 0 5
44206: PPUSH
44207: LD_VAR 0 1
44211: PPUSH
44212: CALL_OW 321
44216: PUSH
44217: LD_VAR 0 3
44221: NONEQUAL
44222: IFFALSE 44240
// result := result diff i ;
44224: LD_ADDR_VAR 0 4
44228: PUSH
44229: LD_VAR 0 4
44233: PUSH
44234: LD_VAR 0 5
44238: DIFF
44239: ST_TO_ADDR
44240: GO 44199
44242: POP
44243: POP
// end ;
44244: LD_VAR 0 4
44248: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44249: LD_INT 0
44251: PPUSH
44252: PPUSH
44253: PPUSH
// result := true ;
44254: LD_ADDR_VAR 0 3
44258: PUSH
44259: LD_INT 1
44261: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44262: LD_ADDR_VAR 0 5
44266: PUSH
44267: LD_VAR 0 2
44271: PPUSH
44272: CALL_OW 480
44276: ST_TO_ADDR
// if not tmp then
44277: LD_VAR 0 5
44281: NOT
44282: IFFALSE 44286
// exit ;
44284: GO 44335
// for i in tmp do
44286: LD_ADDR_VAR 0 4
44290: PUSH
44291: LD_VAR 0 5
44295: PUSH
44296: FOR_IN
44297: IFFALSE 44333
// if GetTech ( i , side ) <> state_researched then
44299: LD_VAR 0 4
44303: PPUSH
44304: LD_VAR 0 1
44308: PPUSH
44309: CALL_OW 321
44313: PUSH
44314: LD_INT 2
44316: NONEQUAL
44317: IFFALSE 44331
// begin result := false ;
44319: LD_ADDR_VAR 0 3
44323: PUSH
44324: LD_INT 0
44326: ST_TO_ADDR
// exit ;
44327: POP
44328: POP
44329: GO 44335
// end ;
44331: GO 44296
44333: POP
44334: POP
// end ;
44335: LD_VAR 0 3
44339: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44340: LD_INT 0
44342: PPUSH
44343: PPUSH
44344: PPUSH
44345: PPUSH
44346: PPUSH
44347: PPUSH
44348: PPUSH
44349: PPUSH
44350: PPUSH
44351: PPUSH
44352: PPUSH
44353: PPUSH
44354: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44355: LD_VAR 0 1
44359: NOT
44360: PUSH
44361: LD_VAR 0 1
44365: PPUSH
44366: CALL_OW 257
44370: PUSH
44371: LD_INT 9
44373: NONEQUAL
44374: OR
44375: IFFALSE 44379
// exit ;
44377: GO 44952
// side := GetSide ( unit ) ;
44379: LD_ADDR_VAR 0 9
44383: PUSH
44384: LD_VAR 0 1
44388: PPUSH
44389: CALL_OW 255
44393: ST_TO_ADDR
// tech_space := tech_spacanom ;
44394: LD_ADDR_VAR 0 12
44398: PUSH
44399: LD_INT 29
44401: ST_TO_ADDR
// tech_time := tech_taurad ;
44402: LD_ADDR_VAR 0 13
44406: PUSH
44407: LD_INT 28
44409: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
44410: LD_ADDR_VAR 0 11
44414: PUSH
44415: LD_VAR 0 1
44419: PPUSH
44420: CALL_OW 310
44424: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
44425: LD_VAR 0 11
44429: PPUSH
44430: CALL_OW 247
44434: PUSH
44435: LD_INT 2
44437: EQUAL
44438: IFFALSE 44442
// exit ;
44440: GO 44952
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44442: LD_ADDR_VAR 0 8
44446: PUSH
44447: LD_INT 81
44449: PUSH
44450: LD_VAR 0 9
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 3
44461: PUSH
44462: LD_INT 21
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PPUSH
44480: CALL_OW 69
44484: ST_TO_ADDR
// if not tmp then
44485: LD_VAR 0 8
44489: NOT
44490: IFFALSE 44494
// exit ;
44492: GO 44952
// if in_unit then
44494: LD_VAR 0 11
44498: IFFALSE 44522
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
44500: LD_ADDR_VAR 0 10
44504: PUSH
44505: LD_VAR 0 8
44509: PPUSH
44510: LD_VAR 0 11
44514: PPUSH
44515: CALL_OW 74
44519: ST_TO_ADDR
44520: GO 44542
// enemy := NearestUnitToUnit ( tmp , unit ) ;
44522: LD_ADDR_VAR 0 10
44526: PUSH
44527: LD_VAR 0 8
44531: PPUSH
44532: LD_VAR 0 1
44536: PPUSH
44537: CALL_OW 74
44541: ST_TO_ADDR
// if not enemy then
44542: LD_VAR 0 10
44546: NOT
44547: IFFALSE 44551
// exit ;
44549: GO 44952
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
44551: LD_VAR 0 11
44555: PUSH
44556: LD_VAR 0 11
44560: PPUSH
44561: LD_VAR 0 10
44565: PPUSH
44566: CALL_OW 296
44570: PUSH
44571: LD_INT 13
44573: GREATER
44574: AND
44575: PUSH
44576: LD_VAR 0 1
44580: PPUSH
44581: LD_VAR 0 10
44585: PPUSH
44586: CALL_OW 296
44590: PUSH
44591: LD_INT 12
44593: GREATER
44594: OR
44595: IFFALSE 44599
// exit ;
44597: GO 44952
// missile := [ 1 ] ;
44599: LD_ADDR_VAR 0 14
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: ST_TO_ADDR
// if Researched ( side , tech_space ) then
44610: LD_VAR 0 9
44614: PPUSH
44615: LD_VAR 0 12
44619: PPUSH
44620: CALL_OW 325
44624: IFFALSE 44653
// missile := Replace ( missile , missile + 1 , 2 ) ;
44626: LD_ADDR_VAR 0 14
44630: PUSH
44631: LD_VAR 0 14
44635: PPUSH
44636: LD_VAR 0 14
44640: PUSH
44641: LD_INT 1
44643: PLUS
44644: PPUSH
44645: LD_INT 2
44647: PPUSH
44648: CALL_OW 1
44652: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
44653: LD_VAR 0 9
44657: PPUSH
44658: LD_VAR 0 13
44662: PPUSH
44663: CALL_OW 325
44667: PUSH
44668: LD_VAR 0 10
44672: PPUSH
44673: CALL_OW 255
44677: PPUSH
44678: LD_VAR 0 13
44682: PPUSH
44683: CALL_OW 325
44687: NOT
44688: AND
44689: IFFALSE 44718
// missile := Replace ( missile , missile + 1 , 3 ) ;
44691: LD_ADDR_VAR 0 14
44695: PUSH
44696: LD_VAR 0 14
44700: PPUSH
44701: LD_VAR 0 14
44705: PUSH
44706: LD_INT 1
44708: PLUS
44709: PPUSH
44710: LD_INT 3
44712: PPUSH
44713: CALL_OW 1
44717: ST_TO_ADDR
// if missile < 2 then
44718: LD_VAR 0 14
44722: PUSH
44723: LD_INT 2
44725: LESS
44726: IFFALSE 44730
// exit ;
44728: GO 44952
// x := GetX ( enemy ) ;
44730: LD_ADDR_VAR 0 4
44734: PUSH
44735: LD_VAR 0 10
44739: PPUSH
44740: CALL_OW 250
44744: ST_TO_ADDR
// y := GetY ( enemy ) ;
44745: LD_ADDR_VAR 0 5
44749: PUSH
44750: LD_VAR 0 10
44754: PPUSH
44755: CALL_OW 251
44759: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44760: LD_ADDR_VAR 0 6
44764: PUSH
44765: LD_VAR 0 4
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PPUSH
44774: LD_INT 1
44776: PPUSH
44777: CALL_OW 12
44781: PLUS
44782: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44783: LD_ADDR_VAR 0 7
44787: PUSH
44788: LD_VAR 0 5
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PPUSH
44797: LD_INT 1
44799: PPUSH
44800: CALL_OW 12
44804: PLUS
44805: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44806: LD_VAR 0 6
44810: PPUSH
44811: LD_VAR 0 7
44815: PPUSH
44816: CALL_OW 488
44820: NOT
44821: IFFALSE 44843
// begin _x := x ;
44823: LD_ADDR_VAR 0 6
44827: PUSH
44828: LD_VAR 0 4
44832: ST_TO_ADDR
// _y := y ;
44833: LD_ADDR_VAR 0 7
44837: PUSH
44838: LD_VAR 0 5
44842: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44843: LD_ADDR_VAR 0 3
44847: PUSH
44848: LD_INT 1
44850: PPUSH
44851: LD_VAR 0 14
44855: PPUSH
44856: CALL_OW 12
44860: ST_TO_ADDR
// case i of 1 :
44861: LD_VAR 0 3
44865: PUSH
44866: LD_INT 1
44868: DOUBLE
44869: EQUAL
44870: IFTRUE 44874
44872: GO 44891
44874: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44875: LD_VAR 0 1
44879: PPUSH
44880: LD_VAR 0 10
44884: PPUSH
44885: CALL_OW 115
44889: GO 44952
44891: LD_INT 2
44893: DOUBLE
44894: EQUAL
44895: IFTRUE 44899
44897: GO 44921
44899: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44900: LD_VAR 0 1
44904: PPUSH
44905: LD_VAR 0 6
44909: PPUSH
44910: LD_VAR 0 7
44914: PPUSH
44915: CALL_OW 153
44919: GO 44952
44921: LD_INT 3
44923: DOUBLE
44924: EQUAL
44925: IFTRUE 44929
44927: GO 44951
44929: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44930: LD_VAR 0 1
44934: PPUSH
44935: LD_VAR 0 6
44939: PPUSH
44940: LD_VAR 0 7
44944: PPUSH
44945: CALL_OW 154
44949: GO 44952
44951: POP
// end ;
44952: LD_VAR 0 2
44956: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44957: LD_INT 0
44959: PPUSH
44960: PPUSH
44961: PPUSH
44962: PPUSH
44963: PPUSH
44964: PPUSH
// if not unit or not building then
44965: LD_VAR 0 1
44969: NOT
44970: PUSH
44971: LD_VAR 0 2
44975: NOT
44976: OR
44977: IFFALSE 44981
// exit ;
44979: GO 45139
// x := GetX ( building ) ;
44981: LD_ADDR_VAR 0 5
44985: PUSH
44986: LD_VAR 0 2
44990: PPUSH
44991: CALL_OW 250
44995: ST_TO_ADDR
// y := GetY ( building ) ;
44996: LD_ADDR_VAR 0 6
45000: PUSH
45001: LD_VAR 0 2
45005: PPUSH
45006: CALL_OW 251
45010: ST_TO_ADDR
// for i = 0 to 5 do
45011: LD_ADDR_VAR 0 4
45015: PUSH
45016: DOUBLE
45017: LD_INT 0
45019: DEC
45020: ST_TO_ADDR
45021: LD_INT 5
45023: PUSH
45024: FOR_TO
45025: IFFALSE 45137
// begin _x := ShiftX ( x , i , 3 ) ;
45027: LD_ADDR_VAR 0 7
45031: PUSH
45032: LD_VAR 0 5
45036: PPUSH
45037: LD_VAR 0 4
45041: PPUSH
45042: LD_INT 3
45044: PPUSH
45045: CALL_OW 272
45049: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45050: LD_ADDR_VAR 0 8
45054: PUSH
45055: LD_VAR 0 6
45059: PPUSH
45060: LD_VAR 0 4
45064: PPUSH
45065: LD_INT 3
45067: PPUSH
45068: CALL_OW 273
45072: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45073: LD_VAR 0 7
45077: PPUSH
45078: LD_VAR 0 8
45082: PPUSH
45083: CALL_OW 488
45087: NOT
45088: IFFALSE 45092
// continue ;
45090: GO 45024
// if HexInfo ( _x , _y ) = 0 then
45092: LD_VAR 0 7
45096: PPUSH
45097: LD_VAR 0 8
45101: PPUSH
45102: CALL_OW 428
45106: PUSH
45107: LD_INT 0
45109: EQUAL
45110: IFFALSE 45135
// begin ComMoveXY ( unit , _x , _y ) ;
45112: LD_VAR 0 1
45116: PPUSH
45117: LD_VAR 0 7
45121: PPUSH
45122: LD_VAR 0 8
45126: PPUSH
45127: CALL_OW 111
// exit ;
45131: POP
45132: POP
45133: GO 45139
// end ; end ;
45135: GO 45024
45137: POP
45138: POP
// end ;
45139: LD_VAR 0 3
45143: RET
// export function ScanBase ( side , base_area ) ; begin
45144: LD_INT 0
45146: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45147: LD_ADDR_VAR 0 3
45151: PUSH
45152: LD_VAR 0 2
45156: PPUSH
45157: LD_INT 81
45159: PUSH
45160: LD_VAR 0 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PPUSH
45169: CALL_OW 70
45173: ST_TO_ADDR
// end ;
45174: LD_VAR 0 3
45178: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45179: LD_INT 0
45181: PPUSH
45182: PPUSH
45183: PPUSH
45184: PPUSH
// result := false ;
45185: LD_ADDR_VAR 0 2
45189: PUSH
45190: LD_INT 0
45192: ST_TO_ADDR
// side := GetSide ( unit ) ;
45193: LD_ADDR_VAR 0 3
45197: PUSH
45198: LD_VAR 0 1
45202: PPUSH
45203: CALL_OW 255
45207: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45208: LD_ADDR_VAR 0 4
45212: PUSH
45213: LD_VAR 0 1
45217: PPUSH
45218: CALL_OW 248
45222: ST_TO_ADDR
// case nat of 1 :
45223: LD_VAR 0 4
45227: PUSH
45228: LD_INT 1
45230: DOUBLE
45231: EQUAL
45232: IFTRUE 45236
45234: GO 45247
45236: POP
// tech := tech_lassight ; 2 :
45237: LD_ADDR_VAR 0 5
45241: PUSH
45242: LD_INT 12
45244: ST_TO_ADDR
45245: GO 45286
45247: LD_INT 2
45249: DOUBLE
45250: EQUAL
45251: IFTRUE 45255
45253: GO 45266
45255: POP
// tech := tech_mortar ; 3 :
45256: LD_ADDR_VAR 0 5
45260: PUSH
45261: LD_INT 41
45263: ST_TO_ADDR
45264: GO 45286
45266: LD_INT 3
45268: DOUBLE
45269: EQUAL
45270: IFTRUE 45274
45272: GO 45285
45274: POP
// tech := tech_bazooka ; end ;
45275: LD_ADDR_VAR 0 5
45279: PUSH
45280: LD_INT 44
45282: ST_TO_ADDR
45283: GO 45286
45285: POP
// if Researched ( side , tech ) then
45286: LD_VAR 0 3
45290: PPUSH
45291: LD_VAR 0 5
45295: PPUSH
45296: CALL_OW 325
45300: IFFALSE 45327
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45302: LD_ADDR_VAR 0 2
45306: PUSH
45307: LD_INT 5
45309: PUSH
45310: LD_INT 8
45312: PUSH
45313: LD_INT 9
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: PUSH
45321: LD_VAR 0 4
45325: ARRAY
45326: ST_TO_ADDR
// end ;
45327: LD_VAR 0 2
45331: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45332: LD_INT 0
45334: PPUSH
45335: PPUSH
45336: PPUSH
// if not mines then
45337: LD_VAR 0 2
45341: NOT
45342: IFFALSE 45346
// exit ;
45344: GO 45490
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45346: LD_ADDR_VAR 0 5
45350: PUSH
45351: LD_INT 81
45353: PUSH
45354: LD_VAR 0 1
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 3
45365: PUSH
45366: LD_INT 21
45368: PUSH
45369: LD_INT 3
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PPUSH
45384: CALL_OW 69
45388: ST_TO_ADDR
// for i in mines do
45389: LD_ADDR_VAR 0 4
45393: PUSH
45394: LD_VAR 0 2
45398: PUSH
45399: FOR_IN
45400: IFFALSE 45488
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
45402: LD_VAR 0 4
45406: PUSH
45407: LD_INT 1
45409: ARRAY
45410: PPUSH
45411: LD_VAR 0 4
45415: PUSH
45416: LD_INT 2
45418: ARRAY
45419: PPUSH
45420: CALL_OW 458
45424: NOT
45425: IFFALSE 45429
// continue ;
45427: GO 45399
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
45429: LD_VAR 0 4
45433: PUSH
45434: LD_INT 1
45436: ARRAY
45437: PPUSH
45438: LD_VAR 0 4
45442: PUSH
45443: LD_INT 2
45445: ARRAY
45446: PPUSH
45447: CALL_OW 428
45451: PUSH
45452: LD_VAR 0 5
45456: IN
45457: IFFALSE 45486
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
45459: LD_VAR 0 4
45463: PUSH
45464: LD_INT 1
45466: ARRAY
45467: PPUSH
45468: LD_VAR 0 4
45472: PUSH
45473: LD_INT 2
45475: ARRAY
45476: PPUSH
45477: LD_VAR 0 1
45481: PPUSH
45482: CALL_OW 456
// end ;
45486: GO 45399
45488: POP
45489: POP
// end ;
45490: LD_VAR 0 3
45494: RET
// export function Count ( array ) ; begin
45495: LD_INT 0
45497: PPUSH
// result := array + 0 ;
45498: LD_ADDR_VAR 0 2
45502: PUSH
45503: LD_VAR 0 1
45507: PUSH
45508: LD_INT 0
45510: PLUS
45511: ST_TO_ADDR
// end ;
45512: LD_VAR 0 2
45516: RET
// export function IsEmpty ( building ) ; begin
45517: LD_INT 0
45519: PPUSH
// if not building then
45520: LD_VAR 0 1
45524: NOT
45525: IFFALSE 45529
// exit ;
45527: GO 45572
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
45529: LD_ADDR_VAR 0 2
45533: PUSH
45534: LD_VAR 0 1
45538: PUSH
45539: LD_INT 22
45541: PUSH
45542: LD_VAR 0 1
45546: PPUSH
45547: CALL_OW 255
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 58
45558: PUSH
45559: EMPTY
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PPUSH
45566: CALL_OW 69
45570: IN
45571: ST_TO_ADDR
// end ;
45572: LD_VAR 0 2
45576: RET
// export function IsNotFull ( building ) ; var places ; begin
45577: LD_INT 0
45579: PPUSH
45580: PPUSH
// if not building then
45581: LD_VAR 0 1
45585: NOT
45586: IFFALSE 45590
// exit ;
45588: GO 45618
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
45590: LD_ADDR_VAR 0 2
45594: PUSH
45595: LD_VAR 0 1
45599: PPUSH
45600: LD_INT 3
45602: PUSH
45603: LD_INT 62
45605: PUSH
45606: EMPTY
45607: LIST
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PPUSH
45613: CALL_OW 72
45617: ST_TO_ADDR
// end ;
45618: LD_VAR 0 2
45622: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
45623: LD_INT 0
45625: PPUSH
45626: PPUSH
45627: PPUSH
45628: PPUSH
// tmp := [ ] ;
45629: LD_ADDR_VAR 0 3
45633: PUSH
45634: EMPTY
45635: ST_TO_ADDR
// list := [ ] ;
45636: LD_ADDR_VAR 0 5
45640: PUSH
45641: EMPTY
45642: ST_TO_ADDR
// for i = 16 to 25 do
45643: LD_ADDR_VAR 0 4
45647: PUSH
45648: DOUBLE
45649: LD_INT 16
45651: DEC
45652: ST_TO_ADDR
45653: LD_INT 25
45655: PUSH
45656: FOR_TO
45657: IFFALSE 45730
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
45659: LD_ADDR_VAR 0 3
45663: PUSH
45664: LD_VAR 0 3
45668: PUSH
45669: LD_INT 22
45671: PUSH
45672: LD_VAR 0 1
45676: PPUSH
45677: CALL_OW 255
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 91
45688: PUSH
45689: LD_VAR 0 1
45693: PUSH
45694: LD_INT 6
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 30
45704: PUSH
45705: LD_VAR 0 4
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: LIST
45718: PUSH
45719: EMPTY
45720: LIST
45721: PPUSH
45722: CALL_OW 69
45726: ADD
45727: ST_TO_ADDR
45728: GO 45656
45730: POP
45731: POP
// for i = 1 to tmp do
45732: LD_ADDR_VAR 0 4
45736: PUSH
45737: DOUBLE
45738: LD_INT 1
45740: DEC
45741: ST_TO_ADDR
45742: LD_VAR 0 3
45746: PUSH
45747: FOR_TO
45748: IFFALSE 45836
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45750: LD_ADDR_VAR 0 5
45754: PUSH
45755: LD_VAR 0 5
45759: PUSH
45760: LD_VAR 0 3
45764: PUSH
45765: LD_VAR 0 4
45769: ARRAY
45770: PPUSH
45771: CALL_OW 266
45775: PUSH
45776: LD_VAR 0 3
45780: PUSH
45781: LD_VAR 0 4
45785: ARRAY
45786: PPUSH
45787: CALL_OW 250
45791: PUSH
45792: LD_VAR 0 3
45796: PUSH
45797: LD_VAR 0 4
45801: ARRAY
45802: PPUSH
45803: CALL_OW 251
45807: PUSH
45808: LD_VAR 0 3
45812: PUSH
45813: LD_VAR 0 4
45817: ARRAY
45818: PPUSH
45819: CALL_OW 254
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: PUSH
45830: EMPTY
45831: LIST
45832: ADD
45833: ST_TO_ADDR
45834: GO 45747
45836: POP
45837: POP
// result := list ;
45838: LD_ADDR_VAR 0 2
45842: PUSH
45843: LD_VAR 0 5
45847: ST_TO_ADDR
// end ;
45848: LD_VAR 0 2
45852: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45853: LD_INT 0
45855: PPUSH
45856: PPUSH
45857: PPUSH
45858: PPUSH
45859: PPUSH
45860: PPUSH
45861: PPUSH
// if not factory then
45862: LD_VAR 0 1
45866: NOT
45867: IFFALSE 45871
// exit ;
45869: GO 46464
// if control = control_apeman then
45871: LD_VAR 0 4
45875: PUSH
45876: LD_INT 5
45878: EQUAL
45879: IFFALSE 45988
// begin tmp := UnitsInside ( factory ) ;
45881: LD_ADDR_VAR 0 8
45885: PUSH
45886: LD_VAR 0 1
45890: PPUSH
45891: CALL_OW 313
45895: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45896: LD_VAR 0 8
45900: PPUSH
45901: LD_INT 25
45903: PUSH
45904: LD_INT 12
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PPUSH
45911: CALL_OW 72
45915: NOT
45916: IFFALSE 45926
// control := control_manual ;
45918: LD_ADDR_VAR 0 4
45922: PUSH
45923: LD_INT 1
45925: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45926: LD_ADDR_VAR 0 8
45930: PUSH
45931: LD_VAR 0 1
45935: PPUSH
45936: CALL 45623 0 1
45940: ST_TO_ADDR
// if tmp then
45941: LD_VAR 0 8
45945: IFFALSE 45988
// begin for i in tmp do
45947: LD_ADDR_VAR 0 7
45951: PUSH
45952: LD_VAR 0 8
45956: PUSH
45957: FOR_IN
45958: IFFALSE 45986
// if i [ 1 ] = b_ext_radio then
45960: LD_VAR 0 7
45964: PUSH
45965: LD_INT 1
45967: ARRAY
45968: PUSH
45969: LD_INT 22
45971: EQUAL
45972: IFFALSE 45984
// begin control := control_remote ;
45974: LD_ADDR_VAR 0 4
45978: PUSH
45979: LD_INT 2
45981: ST_TO_ADDR
// break ;
45982: GO 45986
// end ;
45984: GO 45957
45986: POP
45987: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45988: LD_VAR 0 1
45992: PPUSH
45993: LD_VAR 0 2
45997: PPUSH
45998: LD_VAR 0 3
46002: PPUSH
46003: LD_VAR 0 4
46007: PPUSH
46008: LD_VAR 0 5
46012: PPUSH
46013: CALL_OW 448
46017: IFFALSE 46052
// begin result := [ chassis , engine , control , weapon ] ;
46019: LD_ADDR_VAR 0 6
46023: PUSH
46024: LD_VAR 0 2
46028: PUSH
46029: LD_VAR 0 3
46033: PUSH
46034: LD_VAR 0 4
46038: PUSH
46039: LD_VAR 0 5
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: ST_TO_ADDR
// exit ;
46050: GO 46464
// end ; _chassis := AvailableChassisList ( factory ) ;
46052: LD_ADDR_VAR 0 9
46056: PUSH
46057: LD_VAR 0 1
46061: PPUSH
46062: CALL_OW 475
46066: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46067: LD_ADDR_VAR 0 11
46071: PUSH
46072: LD_VAR 0 1
46076: PPUSH
46077: CALL_OW 476
46081: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46082: LD_ADDR_VAR 0 12
46086: PUSH
46087: LD_VAR 0 1
46091: PPUSH
46092: CALL_OW 477
46096: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
46097: LD_ADDR_VAR 0 10
46101: PUSH
46102: LD_VAR 0 1
46106: PPUSH
46107: CALL_OW 478
46111: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
46112: LD_VAR 0 9
46116: NOT
46117: PUSH
46118: LD_VAR 0 11
46122: NOT
46123: OR
46124: PUSH
46125: LD_VAR 0 12
46129: NOT
46130: OR
46131: PUSH
46132: LD_VAR 0 10
46136: NOT
46137: OR
46138: IFFALSE 46173
// begin result := [ chassis , engine , control , weapon ] ;
46140: LD_ADDR_VAR 0 6
46144: PUSH
46145: LD_VAR 0 2
46149: PUSH
46150: LD_VAR 0 3
46154: PUSH
46155: LD_VAR 0 4
46159: PUSH
46160: LD_VAR 0 5
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: ST_TO_ADDR
// exit ;
46171: GO 46464
// end ; if not chassis in _chassis then
46173: LD_VAR 0 2
46177: PUSH
46178: LD_VAR 0 9
46182: IN
46183: NOT
46184: IFFALSE 46210
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46186: LD_ADDR_VAR 0 2
46190: PUSH
46191: LD_VAR 0 9
46195: PUSH
46196: LD_INT 1
46198: PPUSH
46199: LD_VAR 0 9
46203: PPUSH
46204: CALL_OW 12
46208: ARRAY
46209: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46210: LD_VAR 0 2
46214: PPUSH
46215: LD_VAR 0 3
46219: PPUSH
46220: CALL 46469 0 2
46224: NOT
46225: IFFALSE 46284
// repeat engine := _engine [ 1 ] ;
46227: LD_ADDR_VAR 0 3
46231: PUSH
46232: LD_VAR 0 11
46236: PUSH
46237: LD_INT 1
46239: ARRAY
46240: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46241: LD_ADDR_VAR 0 11
46245: PUSH
46246: LD_VAR 0 11
46250: PPUSH
46251: LD_INT 1
46253: PPUSH
46254: CALL_OW 3
46258: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46259: LD_VAR 0 2
46263: PPUSH
46264: LD_VAR 0 3
46268: PPUSH
46269: CALL 46469 0 2
46273: PUSH
46274: LD_VAR 0 11
46278: PUSH
46279: EMPTY
46280: EQUAL
46281: OR
46282: IFFALSE 46227
// if not control in _control then
46284: LD_VAR 0 4
46288: PUSH
46289: LD_VAR 0 12
46293: IN
46294: NOT
46295: IFFALSE 46321
// control := _control [ rand ( 1 , _control ) ] ;
46297: LD_ADDR_VAR 0 4
46301: PUSH
46302: LD_VAR 0 12
46306: PUSH
46307: LD_INT 1
46309: PPUSH
46310: LD_VAR 0 12
46314: PPUSH
46315: CALL_OW 12
46319: ARRAY
46320: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46321: LD_VAR 0 2
46325: PPUSH
46326: LD_VAR 0 5
46330: PPUSH
46331: CALL 46689 0 2
46335: NOT
46336: IFFALSE 46395
// repeat weapon := _weapon [ 1 ] ;
46338: LD_ADDR_VAR 0 5
46342: PUSH
46343: LD_VAR 0 10
46347: PUSH
46348: LD_INT 1
46350: ARRAY
46351: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46352: LD_ADDR_VAR 0 10
46356: PUSH
46357: LD_VAR 0 10
46361: PPUSH
46362: LD_INT 1
46364: PPUSH
46365: CALL_OW 3
46369: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
46370: LD_VAR 0 2
46374: PPUSH
46375: LD_VAR 0 5
46379: PPUSH
46380: CALL 46689 0 2
46384: PUSH
46385: LD_VAR 0 10
46389: PUSH
46390: EMPTY
46391: EQUAL
46392: OR
46393: IFFALSE 46338
// result := [ ] ;
46395: LD_ADDR_VAR 0 6
46399: PUSH
46400: EMPTY
46401: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46402: LD_VAR 0 1
46406: PPUSH
46407: LD_VAR 0 2
46411: PPUSH
46412: LD_VAR 0 3
46416: PPUSH
46417: LD_VAR 0 4
46421: PPUSH
46422: LD_VAR 0 5
46426: PPUSH
46427: CALL_OW 448
46431: IFFALSE 46464
// result := [ chassis , engine , control , weapon ] ;
46433: LD_ADDR_VAR 0 6
46437: PUSH
46438: LD_VAR 0 2
46442: PUSH
46443: LD_VAR 0 3
46447: PUSH
46448: LD_VAR 0 4
46452: PUSH
46453: LD_VAR 0 5
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: ST_TO_ADDR
// end ;
46464: LD_VAR 0 6
46468: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
46469: LD_INT 0
46471: PPUSH
// if not chassis or not engine then
46472: LD_VAR 0 1
46476: NOT
46477: PUSH
46478: LD_VAR 0 2
46482: NOT
46483: OR
46484: IFFALSE 46488
// exit ;
46486: GO 46684
// case engine of engine_solar :
46488: LD_VAR 0 2
46492: PUSH
46493: LD_INT 2
46495: DOUBLE
46496: EQUAL
46497: IFTRUE 46501
46499: GO 46539
46501: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
46502: LD_ADDR_VAR 0 3
46506: PUSH
46507: LD_INT 11
46509: PUSH
46510: LD_INT 12
46512: PUSH
46513: LD_INT 13
46515: PUSH
46516: LD_INT 14
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: ST_TO_ADDR
46537: GO 46668
46539: LD_INT 1
46541: DOUBLE
46542: EQUAL
46543: IFTRUE 46547
46545: GO 46609
46547: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
46548: LD_ADDR_VAR 0 3
46552: PUSH
46553: LD_INT 11
46555: PUSH
46556: LD_INT 12
46558: PUSH
46559: LD_INT 13
46561: PUSH
46562: LD_INT 14
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: LD_INT 3
46573: PUSH
46574: LD_INT 4
46576: PUSH
46577: LD_INT 5
46579: PUSH
46580: LD_INT 21
46582: PUSH
46583: LD_INT 23
46585: PUSH
46586: LD_INT 22
46588: PUSH
46589: LD_INT 24
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: ST_TO_ADDR
46607: GO 46668
46609: LD_INT 3
46611: DOUBLE
46612: EQUAL
46613: IFTRUE 46617
46615: GO 46667
46617: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46618: LD_ADDR_VAR 0 3
46622: PUSH
46623: LD_INT 13
46625: PUSH
46626: LD_INT 14
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: LD_INT 3
46634: PUSH
46635: LD_INT 4
46637: PUSH
46638: LD_INT 5
46640: PUSH
46641: LD_INT 21
46643: PUSH
46644: LD_INT 22
46646: PUSH
46647: LD_INT 23
46649: PUSH
46650: LD_INT 24
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: ST_TO_ADDR
46665: GO 46668
46667: POP
// result := ( chassis in result ) ;
46668: LD_ADDR_VAR 0 3
46672: PUSH
46673: LD_VAR 0 1
46677: PUSH
46678: LD_VAR 0 3
46682: IN
46683: ST_TO_ADDR
// end ;
46684: LD_VAR 0 3
46688: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
46689: LD_INT 0
46691: PPUSH
// if not chassis or not weapon then
46692: LD_VAR 0 1
46696: NOT
46697: PUSH
46698: LD_VAR 0 2
46702: NOT
46703: OR
46704: IFFALSE 46708
// exit ;
46706: GO 47768
// case weapon of us_machine_gun :
46708: LD_VAR 0 2
46712: PUSH
46713: LD_INT 2
46715: DOUBLE
46716: EQUAL
46717: IFTRUE 46721
46719: GO 46751
46721: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46722: LD_ADDR_VAR 0 3
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: LD_INT 3
46735: PUSH
46736: LD_INT 4
46738: PUSH
46739: LD_INT 5
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: ST_TO_ADDR
46749: GO 47752
46751: LD_INT 3
46753: DOUBLE
46754: EQUAL
46755: IFTRUE 46759
46757: GO 46789
46759: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46760: LD_ADDR_VAR 0 3
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: LD_INT 3
46773: PUSH
46774: LD_INT 4
46776: PUSH
46777: LD_INT 5
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: ST_TO_ADDR
46787: GO 47752
46789: LD_INT 11
46791: DOUBLE
46792: EQUAL
46793: IFTRUE 46797
46795: GO 46827
46797: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46798: LD_ADDR_VAR 0 3
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: LD_INT 4
46814: PUSH
46815: LD_INT 5
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: ST_TO_ADDR
46825: GO 47752
46827: LD_INT 4
46829: DOUBLE
46830: EQUAL
46831: IFTRUE 46835
46833: GO 46861
46835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46836: LD_ADDR_VAR 0 3
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: LD_INT 3
46846: PUSH
46847: LD_INT 4
46849: PUSH
46850: LD_INT 5
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: ST_TO_ADDR
46859: GO 47752
46861: LD_INT 5
46863: DOUBLE
46864: EQUAL
46865: IFTRUE 46869
46867: GO 46895
46869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46870: LD_ADDR_VAR 0 3
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: LD_INT 4
46883: PUSH
46884: LD_INT 5
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: ST_TO_ADDR
46893: GO 47752
46895: LD_INT 9
46897: DOUBLE
46898: EQUAL
46899: IFTRUE 46903
46901: GO 46929
46903: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46904: LD_ADDR_VAR 0 3
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: LD_INT 4
46917: PUSH
46918: LD_INT 5
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: ST_TO_ADDR
46927: GO 47752
46929: LD_INT 7
46931: DOUBLE
46932: EQUAL
46933: IFTRUE 46937
46935: GO 46963
46937: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46938: LD_ADDR_VAR 0 3
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: LD_INT 3
46948: PUSH
46949: LD_INT 4
46951: PUSH
46952: LD_INT 5
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: ST_TO_ADDR
46961: GO 47752
46963: LD_INT 12
46965: DOUBLE
46966: EQUAL
46967: IFTRUE 46971
46969: GO 46997
46971: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46972: LD_ADDR_VAR 0 3
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: LD_INT 3
46982: PUSH
46983: LD_INT 4
46985: PUSH
46986: LD_INT 5
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: ST_TO_ADDR
46995: GO 47752
46997: LD_INT 13
46999: DOUBLE
47000: EQUAL
47001: IFTRUE 47005
47003: GO 47031
47005: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47006: LD_ADDR_VAR 0 3
47010: PUSH
47011: LD_INT 2
47013: PUSH
47014: LD_INT 3
47016: PUSH
47017: LD_INT 4
47019: PUSH
47020: LD_INT 5
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: ST_TO_ADDR
47029: GO 47752
47031: LD_INT 14
47033: DOUBLE
47034: EQUAL
47035: IFTRUE 47039
47037: GO 47057
47039: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47040: LD_ADDR_VAR 0 3
47044: PUSH
47045: LD_INT 4
47047: PUSH
47048: LD_INT 5
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: ST_TO_ADDR
47055: GO 47752
47057: LD_INT 6
47059: DOUBLE
47060: EQUAL
47061: IFTRUE 47065
47063: GO 47083
47065: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47066: LD_ADDR_VAR 0 3
47070: PUSH
47071: LD_INT 4
47073: PUSH
47074: LD_INT 5
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: ST_TO_ADDR
47081: GO 47752
47083: LD_INT 10
47085: DOUBLE
47086: EQUAL
47087: IFTRUE 47091
47089: GO 47109
47091: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47092: LD_ADDR_VAR 0 3
47096: PUSH
47097: LD_INT 4
47099: PUSH
47100: LD_INT 5
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: ST_TO_ADDR
47107: GO 47752
47109: LD_INT 22
47111: DOUBLE
47112: EQUAL
47113: IFTRUE 47117
47115: GO 47143
47117: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47118: LD_ADDR_VAR 0 3
47122: PUSH
47123: LD_INT 11
47125: PUSH
47126: LD_INT 12
47128: PUSH
47129: LD_INT 13
47131: PUSH
47132: LD_INT 14
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: ST_TO_ADDR
47141: GO 47752
47143: LD_INT 23
47145: DOUBLE
47146: EQUAL
47147: IFTRUE 47151
47149: GO 47177
47151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47152: LD_ADDR_VAR 0 3
47156: PUSH
47157: LD_INT 11
47159: PUSH
47160: LD_INT 12
47162: PUSH
47163: LD_INT 13
47165: PUSH
47166: LD_INT 14
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: ST_TO_ADDR
47175: GO 47752
47177: LD_INT 24
47179: DOUBLE
47180: EQUAL
47181: IFTRUE 47185
47183: GO 47211
47185: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47186: LD_ADDR_VAR 0 3
47190: PUSH
47191: LD_INT 11
47193: PUSH
47194: LD_INT 12
47196: PUSH
47197: LD_INT 13
47199: PUSH
47200: LD_INT 14
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: ST_TO_ADDR
47209: GO 47752
47211: LD_INT 30
47213: DOUBLE
47214: EQUAL
47215: IFTRUE 47219
47217: GO 47245
47219: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47220: LD_ADDR_VAR 0 3
47224: PUSH
47225: LD_INT 11
47227: PUSH
47228: LD_INT 12
47230: PUSH
47231: LD_INT 13
47233: PUSH
47234: LD_INT 14
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: ST_TO_ADDR
47243: GO 47752
47245: LD_INT 25
47247: DOUBLE
47248: EQUAL
47249: IFTRUE 47253
47251: GO 47271
47253: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47254: LD_ADDR_VAR 0 3
47258: PUSH
47259: LD_INT 13
47261: PUSH
47262: LD_INT 14
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: ST_TO_ADDR
47269: GO 47752
47271: LD_INT 27
47273: DOUBLE
47274: EQUAL
47275: IFTRUE 47279
47277: GO 47297
47279: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
47280: LD_ADDR_VAR 0 3
47284: PUSH
47285: LD_INT 13
47287: PUSH
47288: LD_INT 14
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: ST_TO_ADDR
47295: GO 47752
47297: LD_INT 92
47299: DOUBLE
47300: EQUAL
47301: IFTRUE 47305
47303: GO 47331
47305: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47306: LD_ADDR_VAR 0 3
47310: PUSH
47311: LD_INT 11
47313: PUSH
47314: LD_INT 12
47316: PUSH
47317: LD_INT 13
47319: PUSH
47320: LD_INT 14
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: ST_TO_ADDR
47329: GO 47752
47331: LD_INT 28
47333: DOUBLE
47334: EQUAL
47335: IFTRUE 47339
47337: GO 47357
47339: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47340: LD_ADDR_VAR 0 3
47344: PUSH
47345: LD_INT 13
47347: PUSH
47348: LD_INT 14
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: ST_TO_ADDR
47355: GO 47752
47357: LD_INT 29
47359: DOUBLE
47360: EQUAL
47361: IFTRUE 47365
47363: GO 47383
47365: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47366: LD_ADDR_VAR 0 3
47370: PUSH
47371: LD_INT 13
47373: PUSH
47374: LD_INT 14
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: ST_TO_ADDR
47381: GO 47752
47383: LD_INT 31
47385: DOUBLE
47386: EQUAL
47387: IFTRUE 47391
47389: GO 47409
47391: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47392: LD_ADDR_VAR 0 3
47396: PUSH
47397: LD_INT 13
47399: PUSH
47400: LD_INT 14
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: ST_TO_ADDR
47407: GO 47752
47409: LD_INT 26
47411: DOUBLE
47412: EQUAL
47413: IFTRUE 47417
47415: GO 47435
47417: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
47418: LD_ADDR_VAR 0 3
47422: PUSH
47423: LD_INT 13
47425: PUSH
47426: LD_INT 14
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: ST_TO_ADDR
47433: GO 47752
47435: LD_INT 42
47437: DOUBLE
47438: EQUAL
47439: IFTRUE 47443
47441: GO 47469
47443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
47444: LD_ADDR_VAR 0 3
47448: PUSH
47449: LD_INT 21
47451: PUSH
47452: LD_INT 22
47454: PUSH
47455: LD_INT 23
47457: PUSH
47458: LD_INT 24
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: ST_TO_ADDR
47467: GO 47752
47469: LD_INT 43
47471: DOUBLE
47472: EQUAL
47473: IFTRUE 47477
47475: GO 47503
47477: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
47478: LD_ADDR_VAR 0 3
47482: PUSH
47483: LD_INT 21
47485: PUSH
47486: LD_INT 22
47488: PUSH
47489: LD_INT 23
47491: PUSH
47492: LD_INT 24
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: ST_TO_ADDR
47501: GO 47752
47503: LD_INT 44
47505: DOUBLE
47506: EQUAL
47507: IFTRUE 47511
47509: GO 47537
47511: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
47512: LD_ADDR_VAR 0 3
47516: PUSH
47517: LD_INT 21
47519: PUSH
47520: LD_INT 22
47522: PUSH
47523: LD_INT 23
47525: PUSH
47526: LD_INT 24
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: ST_TO_ADDR
47535: GO 47752
47537: LD_INT 45
47539: DOUBLE
47540: EQUAL
47541: IFTRUE 47545
47543: GO 47571
47545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
47546: LD_ADDR_VAR 0 3
47550: PUSH
47551: LD_INT 21
47553: PUSH
47554: LD_INT 22
47556: PUSH
47557: LD_INT 23
47559: PUSH
47560: LD_INT 24
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: ST_TO_ADDR
47569: GO 47752
47571: LD_INT 49
47573: DOUBLE
47574: EQUAL
47575: IFTRUE 47579
47577: GO 47605
47579: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
47580: LD_ADDR_VAR 0 3
47584: PUSH
47585: LD_INT 21
47587: PUSH
47588: LD_INT 22
47590: PUSH
47591: LD_INT 23
47593: PUSH
47594: LD_INT 24
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: ST_TO_ADDR
47603: GO 47752
47605: LD_INT 51
47607: DOUBLE
47608: EQUAL
47609: IFTRUE 47613
47611: GO 47639
47613: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
47614: LD_ADDR_VAR 0 3
47618: PUSH
47619: LD_INT 21
47621: PUSH
47622: LD_INT 22
47624: PUSH
47625: LD_INT 23
47627: PUSH
47628: LD_INT 24
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: ST_TO_ADDR
47637: GO 47752
47639: LD_INT 52
47641: DOUBLE
47642: EQUAL
47643: IFTRUE 47647
47645: GO 47673
47647: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
47648: LD_ADDR_VAR 0 3
47652: PUSH
47653: LD_INT 21
47655: PUSH
47656: LD_INT 22
47658: PUSH
47659: LD_INT 23
47661: PUSH
47662: LD_INT 24
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: ST_TO_ADDR
47671: GO 47752
47673: LD_INT 53
47675: DOUBLE
47676: EQUAL
47677: IFTRUE 47681
47679: GO 47699
47681: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
47682: LD_ADDR_VAR 0 3
47686: PUSH
47687: LD_INT 23
47689: PUSH
47690: LD_INT 24
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: ST_TO_ADDR
47697: GO 47752
47699: LD_INT 46
47701: DOUBLE
47702: EQUAL
47703: IFTRUE 47707
47705: GO 47725
47707: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47708: LD_ADDR_VAR 0 3
47712: PUSH
47713: LD_INT 23
47715: PUSH
47716: LD_INT 24
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: ST_TO_ADDR
47723: GO 47752
47725: LD_INT 47
47727: DOUBLE
47728: EQUAL
47729: IFTRUE 47733
47731: GO 47751
47733: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47734: LD_ADDR_VAR 0 3
47738: PUSH
47739: LD_INT 23
47741: PUSH
47742: LD_INT 24
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: ST_TO_ADDR
47749: GO 47752
47751: POP
// result := ( chassis in result ) ;
47752: LD_ADDR_VAR 0 3
47756: PUSH
47757: LD_VAR 0 1
47761: PUSH
47762: LD_VAR 0 3
47766: IN
47767: ST_TO_ADDR
// end ;
47768: LD_VAR 0 3
47772: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47773: LD_INT 0
47775: PPUSH
47776: PPUSH
47777: PPUSH
47778: PPUSH
47779: PPUSH
47780: PPUSH
47781: PPUSH
// result := array ;
47782: LD_ADDR_VAR 0 5
47786: PUSH
47787: LD_VAR 0 1
47791: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47792: LD_VAR 0 1
47796: NOT
47797: PUSH
47798: LD_VAR 0 2
47802: NOT
47803: OR
47804: PUSH
47805: LD_VAR 0 3
47809: NOT
47810: OR
47811: PUSH
47812: LD_VAR 0 2
47816: PUSH
47817: LD_VAR 0 1
47821: GREATER
47822: OR
47823: PUSH
47824: LD_VAR 0 3
47828: PUSH
47829: LD_VAR 0 1
47833: GREATER
47834: OR
47835: IFFALSE 47839
// exit ;
47837: GO 48135
// if direction then
47839: LD_VAR 0 4
47843: IFFALSE 47907
// begin d := 1 ;
47845: LD_ADDR_VAR 0 9
47849: PUSH
47850: LD_INT 1
47852: ST_TO_ADDR
// if i_from > i_to then
47853: LD_VAR 0 2
47857: PUSH
47858: LD_VAR 0 3
47862: GREATER
47863: IFFALSE 47889
// length := ( array - i_from ) + i_to else
47865: LD_ADDR_VAR 0 11
47869: PUSH
47870: LD_VAR 0 1
47874: PUSH
47875: LD_VAR 0 2
47879: MINUS
47880: PUSH
47881: LD_VAR 0 3
47885: PLUS
47886: ST_TO_ADDR
47887: GO 47905
// length := i_to - i_from ;
47889: LD_ADDR_VAR 0 11
47893: PUSH
47894: LD_VAR 0 3
47898: PUSH
47899: LD_VAR 0 2
47903: MINUS
47904: ST_TO_ADDR
// end else
47905: GO 47968
// begin d := - 1 ;
47907: LD_ADDR_VAR 0 9
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: ST_TO_ADDR
// if i_from > i_to then
47916: LD_VAR 0 2
47920: PUSH
47921: LD_VAR 0 3
47925: GREATER
47926: IFFALSE 47946
// length := i_from - i_to else
47928: LD_ADDR_VAR 0 11
47932: PUSH
47933: LD_VAR 0 2
47937: PUSH
47938: LD_VAR 0 3
47942: MINUS
47943: ST_TO_ADDR
47944: GO 47968
// length := ( array - i_to ) + i_from ;
47946: LD_ADDR_VAR 0 11
47950: PUSH
47951: LD_VAR 0 1
47955: PUSH
47956: LD_VAR 0 3
47960: MINUS
47961: PUSH
47962: LD_VAR 0 2
47966: PLUS
47967: ST_TO_ADDR
// end ; if not length then
47968: LD_VAR 0 11
47972: NOT
47973: IFFALSE 47977
// exit ;
47975: GO 48135
// tmp := array ;
47977: LD_ADDR_VAR 0 10
47981: PUSH
47982: LD_VAR 0 1
47986: ST_TO_ADDR
// for i = 1 to length do
47987: LD_ADDR_VAR 0 6
47991: PUSH
47992: DOUBLE
47993: LD_INT 1
47995: DEC
47996: ST_TO_ADDR
47997: LD_VAR 0 11
48001: PUSH
48002: FOR_TO
48003: IFFALSE 48123
// begin for j = 1 to array do
48005: LD_ADDR_VAR 0 7
48009: PUSH
48010: DOUBLE
48011: LD_INT 1
48013: DEC
48014: ST_TO_ADDR
48015: LD_VAR 0 1
48019: PUSH
48020: FOR_TO
48021: IFFALSE 48109
// begin k := j + d ;
48023: LD_ADDR_VAR 0 8
48027: PUSH
48028: LD_VAR 0 7
48032: PUSH
48033: LD_VAR 0 9
48037: PLUS
48038: ST_TO_ADDR
// if k > array then
48039: LD_VAR 0 8
48043: PUSH
48044: LD_VAR 0 1
48048: GREATER
48049: IFFALSE 48059
// k := 1 ;
48051: LD_ADDR_VAR 0 8
48055: PUSH
48056: LD_INT 1
48058: ST_TO_ADDR
// if not k then
48059: LD_VAR 0 8
48063: NOT
48064: IFFALSE 48076
// k := array ;
48066: LD_ADDR_VAR 0 8
48070: PUSH
48071: LD_VAR 0 1
48075: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48076: LD_ADDR_VAR 0 10
48080: PUSH
48081: LD_VAR 0 10
48085: PPUSH
48086: LD_VAR 0 8
48090: PPUSH
48091: LD_VAR 0 1
48095: PUSH
48096: LD_VAR 0 7
48100: ARRAY
48101: PPUSH
48102: CALL_OW 1
48106: ST_TO_ADDR
// end ;
48107: GO 48020
48109: POP
48110: POP
// array := tmp ;
48111: LD_ADDR_VAR 0 1
48115: PUSH
48116: LD_VAR 0 10
48120: ST_TO_ADDR
// end ;
48121: GO 48002
48123: POP
48124: POP
// result := array ;
48125: LD_ADDR_VAR 0 5
48129: PUSH
48130: LD_VAR 0 1
48134: ST_TO_ADDR
// end ;
48135: LD_VAR 0 5
48139: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48140: LD_INT 0
48142: PPUSH
48143: PPUSH
// result := 0 ;
48144: LD_ADDR_VAR 0 3
48148: PUSH
48149: LD_INT 0
48151: ST_TO_ADDR
// if not array or not value in array then
48152: LD_VAR 0 1
48156: NOT
48157: PUSH
48158: LD_VAR 0 2
48162: PUSH
48163: LD_VAR 0 1
48167: IN
48168: NOT
48169: OR
48170: IFFALSE 48174
// exit ;
48172: GO 48228
// for i = 1 to array do
48174: LD_ADDR_VAR 0 4
48178: PUSH
48179: DOUBLE
48180: LD_INT 1
48182: DEC
48183: ST_TO_ADDR
48184: LD_VAR 0 1
48188: PUSH
48189: FOR_TO
48190: IFFALSE 48226
// if value = array [ i ] then
48192: LD_VAR 0 2
48196: PUSH
48197: LD_VAR 0 1
48201: PUSH
48202: LD_VAR 0 4
48206: ARRAY
48207: EQUAL
48208: IFFALSE 48224
// begin result := i ;
48210: LD_ADDR_VAR 0 3
48214: PUSH
48215: LD_VAR 0 4
48219: ST_TO_ADDR
// exit ;
48220: POP
48221: POP
48222: GO 48228
// end ;
48224: GO 48189
48226: POP
48227: POP
// end ;
48228: LD_VAR 0 3
48232: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48233: LD_INT 0
48235: PPUSH
// vc_chassis := chassis ;
48236: LD_ADDR_OWVAR 37
48240: PUSH
48241: LD_VAR 0 1
48245: ST_TO_ADDR
// vc_engine := engine ;
48246: LD_ADDR_OWVAR 39
48250: PUSH
48251: LD_VAR 0 2
48255: ST_TO_ADDR
// vc_control := control ;
48256: LD_ADDR_OWVAR 38
48260: PUSH
48261: LD_VAR 0 3
48265: ST_TO_ADDR
// vc_weapon := weapon ;
48266: LD_ADDR_OWVAR 40
48270: PUSH
48271: LD_VAR 0 4
48275: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48276: LD_ADDR_OWVAR 41
48280: PUSH
48281: LD_VAR 0 5
48285: ST_TO_ADDR
// end ;
48286: LD_VAR 0 6
48290: RET
// export function WantPlant ( unit ) ; var task ; begin
48291: LD_INT 0
48293: PPUSH
48294: PPUSH
// result := false ;
48295: LD_ADDR_VAR 0 2
48299: PUSH
48300: LD_INT 0
48302: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48303: LD_ADDR_VAR 0 3
48307: PUSH
48308: LD_VAR 0 1
48312: PPUSH
48313: CALL_OW 437
48317: ST_TO_ADDR
// if task then
48318: LD_VAR 0 3
48322: IFFALSE 48350
// if task [ 1 ] [ 1 ] = p then
48324: LD_VAR 0 3
48328: PUSH
48329: LD_INT 1
48331: ARRAY
48332: PUSH
48333: LD_INT 1
48335: ARRAY
48336: PUSH
48337: LD_STRING p
48339: EQUAL
48340: IFFALSE 48350
// result := true ;
48342: LD_ADDR_VAR 0 2
48346: PUSH
48347: LD_INT 1
48349: ST_TO_ADDR
// end ;
48350: LD_VAR 0 2
48354: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48355: LD_INT 0
48357: PPUSH
48358: PPUSH
48359: PPUSH
48360: PPUSH
// if pos < 1 then
48361: LD_VAR 0 2
48365: PUSH
48366: LD_INT 1
48368: LESS
48369: IFFALSE 48373
// exit ;
48371: GO 48676
// if pos = 1 then
48373: LD_VAR 0 2
48377: PUSH
48378: LD_INT 1
48380: EQUAL
48381: IFFALSE 48414
// result := Replace ( arr , pos [ 1 ] , value ) else
48383: LD_ADDR_VAR 0 4
48387: PUSH
48388: LD_VAR 0 1
48392: PPUSH
48393: LD_VAR 0 2
48397: PUSH
48398: LD_INT 1
48400: ARRAY
48401: PPUSH
48402: LD_VAR 0 3
48406: PPUSH
48407: CALL_OW 1
48411: ST_TO_ADDR
48412: GO 48676
// begin tmp := arr ;
48414: LD_ADDR_VAR 0 6
48418: PUSH
48419: LD_VAR 0 1
48423: ST_TO_ADDR
// s_arr := [ tmp ] ;
48424: LD_ADDR_VAR 0 7
48428: PUSH
48429: LD_VAR 0 6
48433: PUSH
48434: EMPTY
48435: LIST
48436: ST_TO_ADDR
// for i = 1 to pos - 1 do
48437: LD_ADDR_VAR 0 5
48441: PUSH
48442: DOUBLE
48443: LD_INT 1
48445: DEC
48446: ST_TO_ADDR
48447: LD_VAR 0 2
48451: PUSH
48452: LD_INT 1
48454: MINUS
48455: PUSH
48456: FOR_TO
48457: IFFALSE 48502
// begin tmp := tmp [ pos [ i ] ] ;
48459: LD_ADDR_VAR 0 6
48463: PUSH
48464: LD_VAR 0 6
48468: PUSH
48469: LD_VAR 0 2
48473: PUSH
48474: LD_VAR 0 5
48478: ARRAY
48479: ARRAY
48480: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
48481: LD_ADDR_VAR 0 7
48485: PUSH
48486: LD_VAR 0 7
48490: PUSH
48491: LD_VAR 0 6
48495: PUSH
48496: EMPTY
48497: LIST
48498: ADD
48499: ST_TO_ADDR
// end ;
48500: GO 48456
48502: POP
48503: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
48504: LD_ADDR_VAR 0 6
48508: PUSH
48509: LD_VAR 0 6
48513: PPUSH
48514: LD_VAR 0 2
48518: PUSH
48519: LD_VAR 0 2
48523: ARRAY
48524: PPUSH
48525: LD_VAR 0 3
48529: PPUSH
48530: CALL_OW 1
48534: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
48535: LD_ADDR_VAR 0 7
48539: PUSH
48540: LD_VAR 0 7
48544: PPUSH
48545: LD_VAR 0 7
48549: PPUSH
48550: LD_VAR 0 6
48554: PPUSH
48555: CALL_OW 1
48559: ST_TO_ADDR
// for i = s_arr downto 2 do
48560: LD_ADDR_VAR 0 5
48564: PUSH
48565: DOUBLE
48566: LD_VAR 0 7
48570: INC
48571: ST_TO_ADDR
48572: LD_INT 2
48574: PUSH
48575: FOR_DOWNTO
48576: IFFALSE 48660
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
48578: LD_ADDR_VAR 0 6
48582: PUSH
48583: LD_VAR 0 7
48587: PUSH
48588: LD_VAR 0 5
48592: PUSH
48593: LD_INT 1
48595: MINUS
48596: ARRAY
48597: PPUSH
48598: LD_VAR 0 2
48602: PUSH
48603: LD_VAR 0 5
48607: PUSH
48608: LD_INT 1
48610: MINUS
48611: ARRAY
48612: PPUSH
48613: LD_VAR 0 7
48617: PUSH
48618: LD_VAR 0 5
48622: ARRAY
48623: PPUSH
48624: CALL_OW 1
48628: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
48629: LD_ADDR_VAR 0 7
48633: PUSH
48634: LD_VAR 0 7
48638: PPUSH
48639: LD_VAR 0 5
48643: PUSH
48644: LD_INT 1
48646: MINUS
48647: PPUSH
48648: LD_VAR 0 6
48652: PPUSH
48653: CALL_OW 1
48657: ST_TO_ADDR
// end ;
48658: GO 48575
48660: POP
48661: POP
// result := s_arr [ 1 ] ;
48662: LD_ADDR_VAR 0 4
48666: PUSH
48667: LD_VAR 0 7
48671: PUSH
48672: LD_INT 1
48674: ARRAY
48675: ST_TO_ADDR
// end ; end ;
48676: LD_VAR 0 4
48680: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
48681: LD_INT 0
48683: PPUSH
48684: PPUSH
// if not list then
48685: LD_VAR 0 1
48689: NOT
48690: IFFALSE 48694
// exit ;
48692: GO 48785
// i := list [ pos1 ] ;
48694: LD_ADDR_VAR 0 5
48698: PUSH
48699: LD_VAR 0 1
48703: PUSH
48704: LD_VAR 0 2
48708: ARRAY
48709: ST_TO_ADDR
// if not i then
48710: LD_VAR 0 5
48714: NOT
48715: IFFALSE 48719
// exit ;
48717: GO 48785
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48719: LD_ADDR_VAR 0 1
48723: PUSH
48724: LD_VAR 0 1
48728: PPUSH
48729: LD_VAR 0 2
48733: PPUSH
48734: LD_VAR 0 1
48738: PUSH
48739: LD_VAR 0 3
48743: ARRAY
48744: PPUSH
48745: CALL_OW 1
48749: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48750: LD_ADDR_VAR 0 1
48754: PUSH
48755: LD_VAR 0 1
48759: PPUSH
48760: LD_VAR 0 3
48764: PPUSH
48765: LD_VAR 0 5
48769: PPUSH
48770: CALL_OW 1
48774: ST_TO_ADDR
// result := list ;
48775: LD_ADDR_VAR 0 4
48779: PUSH
48780: LD_VAR 0 1
48784: ST_TO_ADDR
// end ;
48785: LD_VAR 0 4
48789: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48790: LD_INT 0
48792: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48793: LD_ADDR_VAR 0 5
48797: PUSH
48798: LD_VAR 0 1
48802: PPUSH
48803: CALL_OW 250
48807: PPUSH
48808: LD_VAR 0 1
48812: PPUSH
48813: CALL_OW 251
48817: PPUSH
48818: LD_VAR 0 2
48822: PPUSH
48823: LD_VAR 0 3
48827: PPUSH
48828: LD_VAR 0 4
48832: PPUSH
48833: CALL 49211 0 5
48837: ST_TO_ADDR
// end ;
48838: LD_VAR 0 5
48842: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48843: LD_INT 0
48845: PPUSH
48846: PPUSH
48847: PPUSH
48848: PPUSH
// if not list or not unit then
48849: LD_VAR 0 2
48853: NOT
48854: PUSH
48855: LD_VAR 0 1
48859: NOT
48860: OR
48861: IFFALSE 48865
// exit ;
48863: GO 49206
// result := [ ] ;
48865: LD_ADDR_VAR 0 5
48869: PUSH
48870: EMPTY
48871: ST_TO_ADDR
// for i in list do
48872: LD_ADDR_VAR 0 6
48876: PUSH
48877: LD_VAR 0 2
48881: PUSH
48882: FOR_IN
48883: IFFALSE 49101
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48885: LD_ADDR_VAR 0 8
48889: PUSH
48890: LD_VAR 0 1
48894: PPUSH
48895: LD_VAR 0 6
48899: PUSH
48900: LD_INT 1
48902: ARRAY
48903: PPUSH
48904: LD_VAR 0 6
48908: PUSH
48909: LD_INT 2
48911: ARRAY
48912: PPUSH
48913: CALL_OW 297
48917: ST_TO_ADDR
// if not Count ( result ) then
48918: LD_VAR 0 5
48922: PPUSH
48923: CALL 45495 0 1
48927: NOT
48928: IFFALSE 48961
// begin result := Join ( result , [ i , tmp ] ) ;
48930: LD_ADDR_VAR 0 5
48934: PUSH
48935: LD_VAR 0 5
48939: PPUSH
48940: LD_VAR 0 6
48944: PUSH
48945: LD_VAR 0 8
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PPUSH
48954: CALL 81104 0 2
48958: ST_TO_ADDR
// continue ;
48959: GO 48882
// end ; if result [ result ] [ 2 ] <= tmp then
48961: LD_VAR 0 5
48965: PUSH
48966: LD_VAR 0 5
48970: ARRAY
48971: PUSH
48972: LD_INT 2
48974: ARRAY
48975: PUSH
48976: LD_VAR 0 8
48980: LESSEQUAL
48981: IFFALSE 49014
// result := Join ( result , [ i , tmp ] ) else
48983: LD_ADDR_VAR 0 5
48987: PUSH
48988: LD_VAR 0 5
48992: PPUSH
48993: LD_VAR 0 6
48997: PUSH
48998: LD_VAR 0 8
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PPUSH
49007: CALL 81104 0 2
49011: ST_TO_ADDR
49012: GO 49099
// begin for j := 1 to Count ( result ) do
49014: LD_ADDR_VAR 0 7
49018: PUSH
49019: DOUBLE
49020: LD_INT 1
49022: DEC
49023: ST_TO_ADDR
49024: LD_VAR 0 5
49028: PPUSH
49029: CALL 45495 0 1
49033: PUSH
49034: FOR_TO
49035: IFFALSE 49097
// begin if tmp < result [ j ] [ 2 ] then
49037: LD_VAR 0 8
49041: PUSH
49042: LD_VAR 0 5
49046: PUSH
49047: LD_VAR 0 7
49051: ARRAY
49052: PUSH
49053: LD_INT 2
49055: ARRAY
49056: LESS
49057: IFFALSE 49095
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49059: LD_ADDR_VAR 0 5
49063: PUSH
49064: LD_VAR 0 5
49068: PPUSH
49069: LD_VAR 0 7
49073: PPUSH
49074: LD_VAR 0 6
49078: PUSH
49079: LD_VAR 0 8
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PPUSH
49088: CALL_OW 2
49092: ST_TO_ADDR
// break ;
49093: GO 49097
// end ; end ;
49095: GO 49034
49097: POP
49098: POP
// end ; end ;
49099: GO 48882
49101: POP
49102: POP
// if result and not asc then
49103: LD_VAR 0 5
49107: PUSH
49108: LD_VAR 0 3
49112: NOT
49113: AND
49114: IFFALSE 49131
// result := ReverseArray ( result ) ;
49116: LD_ADDR_VAR 0 5
49120: PUSH
49121: LD_VAR 0 5
49125: PPUSH
49126: CALL 76371 0 1
49130: ST_TO_ADDR
// tmp := [ ] ;
49131: LD_ADDR_VAR 0 8
49135: PUSH
49136: EMPTY
49137: ST_TO_ADDR
// if mode then
49138: LD_VAR 0 4
49142: IFFALSE 49206
// begin for i := 1 to result do
49144: LD_ADDR_VAR 0 6
49148: PUSH
49149: DOUBLE
49150: LD_INT 1
49152: DEC
49153: ST_TO_ADDR
49154: LD_VAR 0 5
49158: PUSH
49159: FOR_TO
49160: IFFALSE 49194
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
49162: LD_ADDR_VAR 0 8
49166: PUSH
49167: LD_VAR 0 8
49171: PPUSH
49172: LD_VAR 0 5
49176: PUSH
49177: LD_VAR 0 6
49181: ARRAY
49182: PUSH
49183: LD_INT 1
49185: ARRAY
49186: PPUSH
49187: CALL 81104 0 2
49191: ST_TO_ADDR
49192: GO 49159
49194: POP
49195: POP
// result := tmp ;
49196: LD_ADDR_VAR 0 5
49200: PUSH
49201: LD_VAR 0 8
49205: ST_TO_ADDR
// end ; end ;
49206: LD_VAR 0 5
49210: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49211: LD_INT 0
49213: PPUSH
49214: PPUSH
49215: PPUSH
49216: PPUSH
// if not list then
49217: LD_VAR 0 3
49221: NOT
49222: IFFALSE 49226
// exit ;
49224: GO 49614
// result := [ ] ;
49226: LD_ADDR_VAR 0 6
49230: PUSH
49231: EMPTY
49232: ST_TO_ADDR
// for i in list do
49233: LD_ADDR_VAR 0 7
49237: PUSH
49238: LD_VAR 0 3
49242: PUSH
49243: FOR_IN
49244: IFFALSE 49446
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49246: LD_ADDR_VAR 0 9
49250: PUSH
49251: LD_VAR 0 7
49255: PPUSH
49256: LD_VAR 0 1
49260: PPUSH
49261: LD_VAR 0 2
49265: PPUSH
49266: CALL_OW 297
49270: ST_TO_ADDR
// if not result then
49271: LD_VAR 0 6
49275: NOT
49276: IFFALSE 49302
// result := [ [ i , tmp ] ] else
49278: LD_ADDR_VAR 0 6
49282: PUSH
49283: LD_VAR 0 7
49287: PUSH
49288: LD_VAR 0 9
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: EMPTY
49298: LIST
49299: ST_TO_ADDR
49300: GO 49444
// begin if result [ result ] [ 2 ] <= tmp then
49302: LD_VAR 0 6
49306: PUSH
49307: LD_VAR 0 6
49311: ARRAY
49312: PUSH
49313: LD_INT 2
49315: ARRAY
49316: PUSH
49317: LD_VAR 0 9
49321: LESSEQUAL
49322: IFFALSE 49364
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49324: LD_ADDR_VAR 0 6
49328: PUSH
49329: LD_VAR 0 6
49333: PPUSH
49334: LD_VAR 0 6
49338: PUSH
49339: LD_INT 1
49341: PLUS
49342: PPUSH
49343: LD_VAR 0 7
49347: PUSH
49348: LD_VAR 0 9
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PPUSH
49357: CALL_OW 2
49361: ST_TO_ADDR
49362: GO 49444
// for j := 1 to result do
49364: LD_ADDR_VAR 0 8
49368: PUSH
49369: DOUBLE
49370: LD_INT 1
49372: DEC
49373: ST_TO_ADDR
49374: LD_VAR 0 6
49378: PUSH
49379: FOR_TO
49380: IFFALSE 49442
// begin if tmp < result [ j ] [ 2 ] then
49382: LD_VAR 0 9
49386: PUSH
49387: LD_VAR 0 6
49391: PUSH
49392: LD_VAR 0 8
49396: ARRAY
49397: PUSH
49398: LD_INT 2
49400: ARRAY
49401: LESS
49402: IFFALSE 49440
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49404: LD_ADDR_VAR 0 6
49408: PUSH
49409: LD_VAR 0 6
49413: PPUSH
49414: LD_VAR 0 8
49418: PPUSH
49419: LD_VAR 0 7
49423: PUSH
49424: LD_VAR 0 9
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PPUSH
49433: CALL_OW 2
49437: ST_TO_ADDR
// break ;
49438: GO 49442
// end ; end ;
49440: GO 49379
49442: POP
49443: POP
// end ; end ;
49444: GO 49243
49446: POP
49447: POP
// if result and not asc then
49448: LD_VAR 0 6
49452: PUSH
49453: LD_VAR 0 4
49457: NOT
49458: AND
49459: IFFALSE 49534
// begin tmp := result ;
49461: LD_ADDR_VAR 0 9
49465: PUSH
49466: LD_VAR 0 6
49470: ST_TO_ADDR
// for i = tmp downto 1 do
49471: LD_ADDR_VAR 0 7
49475: PUSH
49476: DOUBLE
49477: LD_VAR 0 9
49481: INC
49482: ST_TO_ADDR
49483: LD_INT 1
49485: PUSH
49486: FOR_DOWNTO
49487: IFFALSE 49532
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49489: LD_ADDR_VAR 0 6
49493: PUSH
49494: LD_VAR 0 6
49498: PPUSH
49499: LD_VAR 0 9
49503: PUSH
49504: LD_VAR 0 7
49508: MINUS
49509: PUSH
49510: LD_INT 1
49512: PLUS
49513: PPUSH
49514: LD_VAR 0 9
49518: PUSH
49519: LD_VAR 0 7
49523: ARRAY
49524: PPUSH
49525: CALL_OW 1
49529: ST_TO_ADDR
49530: GO 49486
49532: POP
49533: POP
// end ; tmp := [ ] ;
49534: LD_ADDR_VAR 0 9
49538: PUSH
49539: EMPTY
49540: ST_TO_ADDR
// if mode then
49541: LD_VAR 0 5
49545: IFFALSE 49614
// begin for i = 1 to result do
49547: LD_ADDR_VAR 0 7
49551: PUSH
49552: DOUBLE
49553: LD_INT 1
49555: DEC
49556: ST_TO_ADDR
49557: LD_VAR 0 6
49561: PUSH
49562: FOR_TO
49563: IFFALSE 49602
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49565: LD_ADDR_VAR 0 9
49569: PUSH
49570: LD_VAR 0 9
49574: PPUSH
49575: LD_VAR 0 7
49579: PPUSH
49580: LD_VAR 0 6
49584: PUSH
49585: LD_VAR 0 7
49589: ARRAY
49590: PUSH
49591: LD_INT 1
49593: ARRAY
49594: PPUSH
49595: CALL_OW 1
49599: ST_TO_ADDR
49600: GO 49562
49602: POP
49603: POP
// result := tmp ;
49604: LD_ADDR_VAR 0 6
49608: PUSH
49609: LD_VAR 0 9
49613: ST_TO_ADDR
// end ; end ;
49614: LD_VAR 0 6
49618: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49619: LD_INT 0
49621: PPUSH
49622: PPUSH
49623: PPUSH
49624: PPUSH
49625: PPUSH
49626: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49627: LD_ADDR_VAR 0 5
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: EMPTY
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: ST_TO_ADDR
// if not x or not y then
49649: LD_VAR 0 2
49653: NOT
49654: PUSH
49655: LD_VAR 0 3
49659: NOT
49660: OR
49661: IFFALSE 49665
// exit ;
49663: GO 51315
// if not range then
49665: LD_VAR 0 4
49669: NOT
49670: IFFALSE 49680
// range := 10 ;
49672: LD_ADDR_VAR 0 4
49676: PUSH
49677: LD_INT 10
49679: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49680: LD_ADDR_VAR 0 8
49684: PUSH
49685: LD_INT 81
49687: PUSH
49688: LD_VAR 0 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 92
49699: PUSH
49700: LD_VAR 0 2
49704: PUSH
49705: LD_VAR 0 3
49709: PUSH
49710: LD_VAR 0 4
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 3
49723: PUSH
49724: LD_INT 21
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: LIST
49742: PPUSH
49743: CALL_OW 69
49747: ST_TO_ADDR
// if not tmp then
49748: LD_VAR 0 8
49752: NOT
49753: IFFALSE 49757
// exit ;
49755: GO 51315
// for i in tmp do
49757: LD_ADDR_VAR 0 6
49761: PUSH
49762: LD_VAR 0 8
49766: PUSH
49767: FOR_IN
49768: IFFALSE 51290
// begin points := [ 0 , 0 , 0 ] ;
49770: LD_ADDR_VAR 0 9
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: LIST
49788: ST_TO_ADDR
// bpoints := 1 ;
49789: LD_ADDR_VAR 0 10
49793: PUSH
49794: LD_INT 1
49796: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49797: LD_VAR 0 6
49801: PPUSH
49802: CALL_OW 247
49806: PUSH
49807: LD_INT 1
49809: DOUBLE
49810: EQUAL
49811: IFTRUE 49815
49813: GO 50393
49815: POP
// begin if GetClass ( i ) = 1 then
49816: LD_VAR 0 6
49820: PPUSH
49821: CALL_OW 257
49825: PUSH
49826: LD_INT 1
49828: EQUAL
49829: IFFALSE 49850
// points := [ 10 , 5 , 3 ] ;
49831: LD_ADDR_VAR 0 9
49835: PUSH
49836: LD_INT 10
49838: PUSH
49839: LD_INT 5
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: LIST
49849: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49850: LD_VAR 0 6
49854: PPUSH
49855: CALL_OW 257
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: LD_INT 4
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: LIST
49873: IN
49874: IFFALSE 49895
// points := [ 3 , 2 , 1 ] ;
49876: LD_ADDR_VAR 0 9
49880: PUSH
49881: LD_INT 3
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49895: LD_VAR 0 6
49899: PPUSH
49900: CALL_OW 257
49904: PUSH
49905: LD_INT 5
49907: EQUAL
49908: IFFALSE 49929
// points := [ 130 , 5 , 2 ] ;
49910: LD_ADDR_VAR 0 9
49914: PUSH
49915: LD_INT 130
49917: PUSH
49918: LD_INT 5
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: LIST
49928: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49929: LD_VAR 0 6
49933: PPUSH
49934: CALL_OW 257
49938: PUSH
49939: LD_INT 8
49941: EQUAL
49942: IFFALSE 49963
// points := [ 35 , 35 , 30 ] ;
49944: LD_ADDR_VAR 0 9
49948: PUSH
49949: LD_INT 35
49951: PUSH
49952: LD_INT 35
49954: PUSH
49955: LD_INT 30
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49963: LD_VAR 0 6
49967: PPUSH
49968: CALL_OW 257
49972: PUSH
49973: LD_INT 9
49975: EQUAL
49976: IFFALSE 49997
// points := [ 20 , 55 , 40 ] ;
49978: LD_ADDR_VAR 0 9
49982: PUSH
49983: LD_INT 20
49985: PUSH
49986: LD_INT 55
49988: PUSH
49989: LD_INT 40
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: LIST
49996: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49997: LD_VAR 0 6
50001: PPUSH
50002: CALL_OW 257
50006: PUSH
50007: LD_INT 12
50009: PUSH
50010: LD_INT 16
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: IN
50017: IFFALSE 50038
// points := [ 5 , 3 , 2 ] ;
50019: LD_ADDR_VAR 0 9
50023: PUSH
50024: LD_INT 5
50026: PUSH
50027: LD_INT 3
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50038: LD_VAR 0 6
50042: PPUSH
50043: CALL_OW 257
50047: PUSH
50048: LD_INT 17
50050: EQUAL
50051: IFFALSE 50072
// points := [ 100 , 50 , 75 ] ;
50053: LD_ADDR_VAR 0 9
50057: PUSH
50058: LD_INT 100
50060: PUSH
50061: LD_INT 50
50063: PUSH
50064: LD_INT 75
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: LIST
50071: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50072: LD_VAR 0 6
50076: PPUSH
50077: CALL_OW 257
50081: PUSH
50082: LD_INT 15
50084: EQUAL
50085: IFFALSE 50106
// points := [ 10 , 5 , 3 ] ;
50087: LD_ADDR_VAR 0 9
50091: PUSH
50092: LD_INT 10
50094: PUSH
50095: LD_INT 5
50097: PUSH
50098: LD_INT 3
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50106: LD_VAR 0 6
50110: PPUSH
50111: CALL_OW 257
50115: PUSH
50116: LD_INT 14
50118: EQUAL
50119: IFFALSE 50140
// points := [ 10 , 0 , 0 ] ;
50121: LD_ADDR_VAR 0 9
50125: PUSH
50126: LD_INT 10
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: LIST
50139: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50140: LD_VAR 0 6
50144: PPUSH
50145: CALL_OW 257
50149: PUSH
50150: LD_INT 11
50152: EQUAL
50153: IFFALSE 50174
// points := [ 30 , 10 , 5 ] ;
50155: LD_ADDR_VAR 0 9
50159: PUSH
50160: LD_INT 30
50162: PUSH
50163: LD_INT 10
50165: PUSH
50166: LD_INT 5
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: LIST
50173: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50174: LD_VAR 0 1
50178: PPUSH
50179: LD_INT 5
50181: PPUSH
50182: CALL_OW 321
50186: PUSH
50187: LD_INT 2
50189: EQUAL
50190: IFFALSE 50207
// bpoints := bpoints * 1.8 ;
50192: LD_ADDR_VAR 0 10
50196: PUSH
50197: LD_VAR 0 10
50201: PUSH
50202: LD_REAL  1.80000000000000E+0000
50205: MUL
50206: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50207: LD_VAR 0 6
50211: PPUSH
50212: CALL_OW 257
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: LD_INT 4
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: IN
50235: PUSH
50236: LD_VAR 0 1
50240: PPUSH
50241: LD_INT 51
50243: PPUSH
50244: CALL_OW 321
50248: PUSH
50249: LD_INT 2
50251: EQUAL
50252: AND
50253: IFFALSE 50270
// bpoints := bpoints * 1.2 ;
50255: LD_ADDR_VAR 0 10
50259: PUSH
50260: LD_VAR 0 10
50264: PUSH
50265: LD_REAL  1.20000000000000E+0000
50268: MUL
50269: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50270: LD_VAR 0 6
50274: PPUSH
50275: CALL_OW 257
50279: PUSH
50280: LD_INT 5
50282: PUSH
50283: LD_INT 7
50285: PUSH
50286: LD_INT 9
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: LIST
50293: IN
50294: PUSH
50295: LD_VAR 0 1
50299: PPUSH
50300: LD_INT 52
50302: PPUSH
50303: CALL_OW 321
50307: PUSH
50308: LD_INT 2
50310: EQUAL
50311: AND
50312: IFFALSE 50329
// bpoints := bpoints * 1.5 ;
50314: LD_ADDR_VAR 0 10
50318: PUSH
50319: LD_VAR 0 10
50323: PUSH
50324: LD_REAL  1.50000000000000E+0000
50327: MUL
50328: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50329: LD_VAR 0 1
50333: PPUSH
50334: LD_INT 66
50336: PPUSH
50337: CALL_OW 321
50341: PUSH
50342: LD_INT 2
50344: EQUAL
50345: IFFALSE 50362
// bpoints := bpoints * 1.1 ;
50347: LD_ADDR_VAR 0 10
50351: PUSH
50352: LD_VAR 0 10
50356: PUSH
50357: LD_REAL  1.10000000000000E+0000
50360: MUL
50361: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50362: LD_ADDR_VAR 0 10
50366: PUSH
50367: LD_VAR 0 10
50371: PUSH
50372: LD_VAR 0 6
50376: PPUSH
50377: LD_INT 1
50379: PPUSH
50380: CALL_OW 259
50384: PUSH
50385: LD_REAL  1.15000000000000E+0000
50388: MUL
50389: MUL
50390: ST_TO_ADDR
// end ; unit_vehicle :
50391: GO 51219
50393: LD_INT 2
50395: DOUBLE
50396: EQUAL
50397: IFTRUE 50401
50399: GO 51207
50401: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50402: LD_VAR 0 6
50406: PPUSH
50407: CALL_OW 264
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: LD_INT 42
50417: PUSH
50418: LD_INT 24
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: LIST
50425: IN
50426: IFFALSE 50447
// points := [ 25 , 5 , 3 ] ;
50428: LD_ADDR_VAR 0 9
50432: PUSH
50433: LD_INT 25
50435: PUSH
50436: LD_INT 5
50438: PUSH
50439: LD_INT 3
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: LIST
50446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50447: LD_VAR 0 6
50451: PPUSH
50452: CALL_OW 264
50456: PUSH
50457: LD_INT 4
50459: PUSH
50460: LD_INT 43
50462: PUSH
50463: LD_INT 25
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: LIST
50470: IN
50471: IFFALSE 50492
// points := [ 40 , 15 , 5 ] ;
50473: LD_ADDR_VAR 0 9
50477: PUSH
50478: LD_INT 40
50480: PUSH
50481: LD_INT 15
50483: PUSH
50484: LD_INT 5
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: LIST
50491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50492: LD_VAR 0 6
50496: PPUSH
50497: CALL_OW 264
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: LD_INT 23
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: IN
50512: IFFALSE 50533
// points := [ 7 , 25 , 8 ] ;
50514: LD_ADDR_VAR 0 9
50518: PUSH
50519: LD_INT 7
50521: PUSH
50522: LD_INT 25
50524: PUSH
50525: LD_INT 8
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: LIST
50532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50533: LD_VAR 0 6
50537: PPUSH
50538: CALL_OW 264
50542: PUSH
50543: LD_INT 5
50545: PUSH
50546: LD_INT 27
50548: PUSH
50549: LD_INT 44
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: LIST
50556: IN
50557: IFFALSE 50578
// points := [ 14 , 50 , 16 ] ;
50559: LD_ADDR_VAR 0 9
50563: PUSH
50564: LD_INT 14
50566: PUSH
50567: LD_INT 50
50569: PUSH
50570: LD_INT 16
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: LIST
50577: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50578: LD_VAR 0 6
50582: PPUSH
50583: CALL_OW 264
50587: PUSH
50588: LD_INT 6
50590: PUSH
50591: LD_INT 46
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: IN
50598: IFFALSE 50619
// points := [ 32 , 120 , 70 ] ;
50600: LD_ADDR_VAR 0 9
50604: PUSH
50605: LD_INT 32
50607: PUSH
50608: LD_INT 120
50610: PUSH
50611: LD_INT 70
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50619: LD_VAR 0 6
50623: PPUSH
50624: CALL_OW 264
50628: PUSH
50629: LD_INT 7
50631: PUSH
50632: LD_INT 28
50634: PUSH
50635: LD_INT 45
50637: PUSH
50638: LD_INT 92
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: IN
50647: IFFALSE 50668
// points := [ 35 , 20 , 45 ] ;
50649: LD_ADDR_VAR 0 9
50653: PUSH
50654: LD_INT 35
50656: PUSH
50657: LD_INT 20
50659: PUSH
50660: LD_INT 45
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: LIST
50667: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50668: LD_VAR 0 6
50672: PPUSH
50673: CALL_OW 264
50677: PUSH
50678: LD_INT 47
50680: PUSH
50681: EMPTY
50682: LIST
50683: IN
50684: IFFALSE 50705
// points := [ 67 , 45 , 75 ] ;
50686: LD_ADDR_VAR 0 9
50690: PUSH
50691: LD_INT 67
50693: PUSH
50694: LD_INT 45
50696: PUSH
50697: LD_INT 75
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: LIST
50704: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50705: LD_VAR 0 6
50709: PPUSH
50710: CALL_OW 264
50714: PUSH
50715: LD_INT 26
50717: PUSH
50718: EMPTY
50719: LIST
50720: IN
50721: IFFALSE 50742
// points := [ 120 , 30 , 80 ] ;
50723: LD_ADDR_VAR 0 9
50727: PUSH
50728: LD_INT 120
50730: PUSH
50731: LD_INT 30
50733: PUSH
50734: LD_INT 80
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: LIST
50741: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50742: LD_VAR 0 6
50746: PPUSH
50747: CALL_OW 264
50751: PUSH
50752: LD_INT 22
50754: PUSH
50755: EMPTY
50756: LIST
50757: IN
50758: IFFALSE 50779
// points := [ 40 , 1 , 1 ] ;
50760: LD_ADDR_VAR 0 9
50764: PUSH
50765: LD_INT 40
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50779: LD_VAR 0 6
50783: PPUSH
50784: CALL_OW 264
50788: PUSH
50789: LD_INT 29
50791: PUSH
50792: EMPTY
50793: LIST
50794: IN
50795: IFFALSE 50816
// points := [ 70 , 200 , 400 ] ;
50797: LD_ADDR_VAR 0 9
50801: PUSH
50802: LD_INT 70
50804: PUSH
50805: LD_INT 200
50807: PUSH
50808: LD_INT 400
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50816: LD_VAR 0 6
50820: PPUSH
50821: CALL_OW 264
50825: PUSH
50826: LD_INT 14
50828: PUSH
50829: LD_INT 53
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: IN
50836: IFFALSE 50857
// points := [ 40 , 10 , 20 ] ;
50838: LD_ADDR_VAR 0 9
50842: PUSH
50843: LD_INT 40
50845: PUSH
50846: LD_INT 10
50848: PUSH
50849: LD_INT 20
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50857: LD_VAR 0 6
50861: PPUSH
50862: CALL_OW 264
50866: PUSH
50867: LD_INT 9
50869: PUSH
50870: EMPTY
50871: LIST
50872: IN
50873: IFFALSE 50894
// points := [ 5 , 70 , 20 ] ;
50875: LD_ADDR_VAR 0 9
50879: PUSH
50880: LD_INT 5
50882: PUSH
50883: LD_INT 70
50885: PUSH
50886: LD_INT 20
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: LIST
50893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50894: LD_VAR 0 6
50898: PPUSH
50899: CALL_OW 264
50903: PUSH
50904: LD_INT 10
50906: PUSH
50907: EMPTY
50908: LIST
50909: IN
50910: IFFALSE 50931
// points := [ 35 , 110 , 70 ] ;
50912: LD_ADDR_VAR 0 9
50916: PUSH
50917: LD_INT 35
50919: PUSH
50920: LD_INT 110
50922: PUSH
50923: LD_INT 70
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: LIST
50930: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50931: LD_VAR 0 6
50935: PPUSH
50936: CALL_OW 265
50940: PUSH
50941: LD_INT 25
50943: EQUAL
50944: IFFALSE 50965
// points := [ 80 , 65 , 100 ] ;
50946: LD_ADDR_VAR 0 9
50950: PUSH
50951: LD_INT 80
50953: PUSH
50954: LD_INT 65
50956: PUSH
50957: LD_INT 100
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: LIST
50964: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50965: LD_VAR 0 6
50969: PPUSH
50970: CALL_OW 263
50974: PUSH
50975: LD_INT 1
50977: EQUAL
50978: IFFALSE 51013
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50980: LD_ADDR_VAR 0 10
50984: PUSH
50985: LD_VAR 0 10
50989: PUSH
50990: LD_VAR 0 6
50994: PPUSH
50995: CALL_OW 311
50999: PPUSH
51000: LD_INT 3
51002: PPUSH
51003: CALL_OW 259
51007: PUSH
51008: LD_INT 4
51010: MUL
51011: MUL
51012: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
51013: LD_VAR 0 6
51017: PPUSH
51018: CALL_OW 263
51022: PUSH
51023: LD_INT 2
51025: EQUAL
51026: IFFALSE 51077
// begin j := IsControledBy ( i ) ;
51028: LD_ADDR_VAR 0 7
51032: PUSH
51033: LD_VAR 0 6
51037: PPUSH
51038: CALL_OW 312
51042: ST_TO_ADDR
// if j then
51043: LD_VAR 0 7
51047: IFFALSE 51077
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51049: LD_ADDR_VAR 0 10
51053: PUSH
51054: LD_VAR 0 10
51058: PUSH
51059: LD_VAR 0 7
51063: PPUSH
51064: LD_INT 3
51066: PPUSH
51067: CALL_OW 259
51071: PUSH
51072: LD_INT 3
51074: MUL
51075: MUL
51076: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51077: LD_VAR 0 6
51081: PPUSH
51082: CALL_OW 264
51086: PUSH
51087: LD_INT 5
51089: PUSH
51090: LD_INT 6
51092: PUSH
51093: LD_INT 46
51095: PUSH
51096: LD_INT 44
51098: PUSH
51099: LD_INT 47
51101: PUSH
51102: LD_INT 45
51104: PUSH
51105: LD_INT 28
51107: PUSH
51108: LD_INT 7
51110: PUSH
51111: LD_INT 27
51113: PUSH
51114: LD_INT 29
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: IN
51129: PUSH
51130: LD_VAR 0 1
51134: PPUSH
51135: LD_INT 52
51137: PPUSH
51138: CALL_OW 321
51142: PUSH
51143: LD_INT 2
51145: EQUAL
51146: AND
51147: IFFALSE 51164
// bpoints := bpoints * 1.2 ;
51149: LD_ADDR_VAR 0 10
51153: PUSH
51154: LD_VAR 0 10
51158: PUSH
51159: LD_REAL  1.20000000000000E+0000
51162: MUL
51163: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51164: LD_VAR 0 6
51168: PPUSH
51169: CALL_OW 264
51173: PUSH
51174: LD_INT 6
51176: PUSH
51177: LD_INT 46
51179: PUSH
51180: LD_INT 47
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: IN
51188: IFFALSE 51205
// bpoints := bpoints * 1.2 ;
51190: LD_ADDR_VAR 0 10
51194: PUSH
51195: LD_VAR 0 10
51199: PUSH
51200: LD_REAL  1.20000000000000E+0000
51203: MUL
51204: ST_TO_ADDR
// end ; unit_building :
51205: GO 51219
51207: LD_INT 3
51209: DOUBLE
51210: EQUAL
51211: IFTRUE 51215
51213: GO 51218
51215: POP
// ; end ;
51216: GO 51219
51218: POP
// for j = 1 to 3 do
51219: LD_ADDR_VAR 0 7
51223: PUSH
51224: DOUBLE
51225: LD_INT 1
51227: DEC
51228: ST_TO_ADDR
51229: LD_INT 3
51231: PUSH
51232: FOR_TO
51233: IFFALSE 51286
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51235: LD_ADDR_VAR 0 5
51239: PUSH
51240: LD_VAR 0 5
51244: PPUSH
51245: LD_VAR 0 7
51249: PPUSH
51250: LD_VAR 0 5
51254: PUSH
51255: LD_VAR 0 7
51259: ARRAY
51260: PUSH
51261: LD_VAR 0 9
51265: PUSH
51266: LD_VAR 0 7
51270: ARRAY
51271: PUSH
51272: LD_VAR 0 10
51276: MUL
51277: PLUS
51278: PPUSH
51279: CALL_OW 1
51283: ST_TO_ADDR
51284: GO 51232
51286: POP
51287: POP
// end ;
51288: GO 49767
51290: POP
51291: POP
// result := Replace ( result , 4 , tmp ) ;
51292: LD_ADDR_VAR 0 5
51296: PUSH
51297: LD_VAR 0 5
51301: PPUSH
51302: LD_INT 4
51304: PPUSH
51305: LD_VAR 0 8
51309: PPUSH
51310: CALL_OW 1
51314: ST_TO_ADDR
// end ;
51315: LD_VAR 0 5
51319: RET
// export function DangerAtRange ( unit , range ) ; begin
51320: LD_INT 0
51322: PPUSH
// if not unit then
51323: LD_VAR 0 1
51327: NOT
51328: IFFALSE 51332
// exit ;
51330: GO 51377
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51332: LD_ADDR_VAR 0 3
51336: PUSH
51337: LD_VAR 0 1
51341: PPUSH
51342: CALL_OW 255
51346: PPUSH
51347: LD_VAR 0 1
51351: PPUSH
51352: CALL_OW 250
51356: PPUSH
51357: LD_VAR 0 1
51361: PPUSH
51362: CALL_OW 251
51366: PPUSH
51367: LD_VAR 0 2
51371: PPUSH
51372: CALL 49619 0 4
51376: ST_TO_ADDR
// end ;
51377: LD_VAR 0 3
51381: RET
// export function DangerInArea ( side , area ) ; begin
51382: LD_INT 0
51384: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51385: LD_ADDR_VAR 0 3
51389: PUSH
51390: LD_VAR 0 2
51394: PPUSH
51395: LD_INT 81
51397: PUSH
51398: LD_VAR 0 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PPUSH
51407: CALL_OW 70
51411: ST_TO_ADDR
// end ;
51412: LD_VAR 0 3
51416: RET
// export function IsExtension ( b ) ; begin
51417: LD_INT 0
51419: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51420: LD_ADDR_VAR 0 2
51424: PUSH
51425: LD_VAR 0 1
51429: PUSH
51430: LD_INT 23
51432: PUSH
51433: LD_INT 20
51435: PUSH
51436: LD_INT 22
51438: PUSH
51439: LD_INT 17
51441: PUSH
51442: LD_INT 24
51444: PUSH
51445: LD_INT 21
51447: PUSH
51448: LD_INT 19
51450: PUSH
51451: LD_INT 16
51453: PUSH
51454: LD_INT 25
51456: PUSH
51457: LD_INT 18
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: IN
51472: ST_TO_ADDR
// end ;
51473: LD_VAR 0 2
51477: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
51478: LD_INT 0
51480: PPUSH
51481: PPUSH
51482: PPUSH
// result := [ ] ;
51483: LD_ADDR_VAR 0 4
51487: PUSH
51488: EMPTY
51489: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51490: LD_ADDR_VAR 0 5
51494: PUSH
51495: LD_VAR 0 2
51499: PPUSH
51500: LD_INT 21
51502: PUSH
51503: LD_INT 3
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PPUSH
51510: CALL_OW 70
51514: ST_TO_ADDR
// if not tmp then
51515: LD_VAR 0 5
51519: NOT
51520: IFFALSE 51524
// exit ;
51522: GO 51588
// if checkLink then
51524: LD_VAR 0 3
51528: IFFALSE 51578
// begin for i in tmp do
51530: LD_ADDR_VAR 0 6
51534: PUSH
51535: LD_VAR 0 5
51539: PUSH
51540: FOR_IN
51541: IFFALSE 51576
// if GetBase ( i ) <> base then
51543: LD_VAR 0 6
51547: PPUSH
51548: CALL_OW 274
51552: PUSH
51553: LD_VAR 0 1
51557: NONEQUAL
51558: IFFALSE 51574
// ComLinkToBase ( base , i ) ;
51560: LD_VAR 0 1
51564: PPUSH
51565: LD_VAR 0 6
51569: PPUSH
51570: CALL_OW 169
51574: GO 51540
51576: POP
51577: POP
// end ; result := tmp ;
51578: LD_ADDR_VAR 0 4
51582: PUSH
51583: LD_VAR 0 5
51587: ST_TO_ADDR
// end ;
51588: LD_VAR 0 4
51592: RET
// export function ComComplete ( units , b ) ; var i ; begin
51593: LD_INT 0
51595: PPUSH
51596: PPUSH
// if not units then
51597: LD_VAR 0 1
51601: NOT
51602: IFFALSE 51606
// exit ;
51604: GO 51696
// for i in units do
51606: LD_ADDR_VAR 0 4
51610: PUSH
51611: LD_VAR 0 1
51615: PUSH
51616: FOR_IN
51617: IFFALSE 51694
// if BuildingStatus ( b ) = bs_build then
51619: LD_VAR 0 2
51623: PPUSH
51624: CALL_OW 461
51628: PUSH
51629: LD_INT 1
51631: EQUAL
51632: IFFALSE 51692
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51634: LD_VAR 0 4
51638: PPUSH
51639: LD_STRING h
51641: PUSH
51642: LD_VAR 0 2
51646: PPUSH
51647: CALL_OW 250
51651: PUSH
51652: LD_VAR 0 2
51656: PPUSH
51657: CALL_OW 251
51661: PUSH
51662: LD_VAR 0 2
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: PUSH
51685: EMPTY
51686: LIST
51687: PPUSH
51688: CALL_OW 446
51692: GO 51616
51694: POP
51695: POP
// end ;
51696: LD_VAR 0 3
51700: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51701: LD_INT 0
51703: PPUSH
51704: PPUSH
51705: PPUSH
51706: PPUSH
51707: PPUSH
51708: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51709: LD_VAR 0 1
51713: NOT
51714: PUSH
51715: LD_VAR 0 1
51719: PPUSH
51720: CALL_OW 263
51724: PUSH
51725: LD_INT 2
51727: NONEQUAL
51728: OR
51729: IFFALSE 51733
// exit ;
51731: GO 52049
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51733: LD_ADDR_VAR 0 6
51737: PUSH
51738: LD_INT 22
51740: PUSH
51741: LD_VAR 0 1
51745: PPUSH
51746: CALL_OW 255
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: LD_INT 30
51760: PUSH
51761: LD_INT 36
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 34
51770: PUSH
51771: LD_INT 31
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PPUSH
51787: CALL_OW 69
51791: ST_TO_ADDR
// if not tmp then
51792: LD_VAR 0 6
51796: NOT
51797: IFFALSE 51801
// exit ;
51799: GO 52049
// result := [ ] ;
51801: LD_ADDR_VAR 0 2
51805: PUSH
51806: EMPTY
51807: ST_TO_ADDR
// for i in tmp do
51808: LD_ADDR_VAR 0 3
51812: PUSH
51813: LD_VAR 0 6
51817: PUSH
51818: FOR_IN
51819: IFFALSE 51890
// begin t := UnitsInside ( i ) ;
51821: LD_ADDR_VAR 0 4
51825: PUSH
51826: LD_VAR 0 3
51830: PPUSH
51831: CALL_OW 313
51835: ST_TO_ADDR
// if t then
51836: LD_VAR 0 4
51840: IFFALSE 51888
// for j in t do
51842: LD_ADDR_VAR 0 7
51846: PUSH
51847: LD_VAR 0 4
51851: PUSH
51852: FOR_IN
51853: IFFALSE 51886
// result := Replace ( result , result + 1 , j ) ;
51855: LD_ADDR_VAR 0 2
51859: PUSH
51860: LD_VAR 0 2
51864: PPUSH
51865: LD_VAR 0 2
51869: PUSH
51870: LD_INT 1
51872: PLUS
51873: PPUSH
51874: LD_VAR 0 7
51878: PPUSH
51879: CALL_OW 1
51883: ST_TO_ADDR
51884: GO 51852
51886: POP
51887: POP
// end ;
51888: GO 51818
51890: POP
51891: POP
// if not result then
51892: LD_VAR 0 2
51896: NOT
51897: IFFALSE 51901
// exit ;
51899: GO 52049
// mech := result [ 1 ] ;
51901: LD_ADDR_VAR 0 5
51905: PUSH
51906: LD_VAR 0 2
51910: PUSH
51911: LD_INT 1
51913: ARRAY
51914: ST_TO_ADDR
// if result > 1 then
51915: LD_VAR 0 2
51919: PUSH
51920: LD_INT 1
51922: GREATER
51923: IFFALSE 52035
// begin for i = 2 to result do
51925: LD_ADDR_VAR 0 3
51929: PUSH
51930: DOUBLE
51931: LD_INT 2
51933: DEC
51934: ST_TO_ADDR
51935: LD_VAR 0 2
51939: PUSH
51940: FOR_TO
51941: IFFALSE 52033
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51943: LD_ADDR_VAR 0 4
51947: PUSH
51948: LD_VAR 0 2
51952: PUSH
51953: LD_VAR 0 3
51957: ARRAY
51958: PPUSH
51959: LD_INT 3
51961: PPUSH
51962: CALL_OW 259
51966: PUSH
51967: LD_VAR 0 2
51971: PUSH
51972: LD_VAR 0 3
51976: ARRAY
51977: PPUSH
51978: CALL_OW 432
51982: MINUS
51983: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51984: LD_VAR 0 4
51988: PUSH
51989: LD_VAR 0 5
51993: PPUSH
51994: LD_INT 3
51996: PPUSH
51997: CALL_OW 259
52001: PUSH
52002: LD_VAR 0 5
52006: PPUSH
52007: CALL_OW 432
52011: MINUS
52012: GREATEREQUAL
52013: IFFALSE 52031
// mech := result [ i ] ;
52015: LD_ADDR_VAR 0 5
52019: PUSH
52020: LD_VAR 0 2
52024: PUSH
52025: LD_VAR 0 3
52029: ARRAY
52030: ST_TO_ADDR
// end ;
52031: GO 51940
52033: POP
52034: POP
// end ; ComLinkTo ( vehicle , mech ) ;
52035: LD_VAR 0 1
52039: PPUSH
52040: LD_VAR 0 5
52044: PPUSH
52045: CALL_OW 135
// end ;
52049: LD_VAR 0 2
52053: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52054: LD_INT 0
52056: PPUSH
52057: PPUSH
52058: PPUSH
52059: PPUSH
52060: PPUSH
52061: PPUSH
52062: PPUSH
52063: PPUSH
52064: PPUSH
52065: PPUSH
52066: PPUSH
52067: PPUSH
52068: PPUSH
// result := [ ] ;
52069: LD_ADDR_VAR 0 7
52073: PUSH
52074: EMPTY
52075: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52076: LD_VAR 0 1
52080: PPUSH
52081: CALL_OW 266
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: IN
52096: NOT
52097: IFFALSE 52101
// exit ;
52099: GO 53735
// if name then
52101: LD_VAR 0 3
52105: IFFALSE 52121
// SetBName ( base_dep , name ) ;
52107: LD_VAR 0 1
52111: PPUSH
52112: LD_VAR 0 3
52116: PPUSH
52117: CALL_OW 500
// base := GetBase ( base_dep ) ;
52121: LD_ADDR_VAR 0 15
52125: PUSH
52126: LD_VAR 0 1
52130: PPUSH
52131: CALL_OW 274
52135: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52136: LD_ADDR_VAR 0 16
52140: PUSH
52141: LD_VAR 0 1
52145: PPUSH
52146: CALL_OW 255
52150: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52151: LD_ADDR_VAR 0 17
52155: PUSH
52156: LD_VAR 0 1
52160: PPUSH
52161: CALL_OW 248
52165: ST_TO_ADDR
// if sources then
52166: LD_VAR 0 5
52170: IFFALSE 52217
// for i = 1 to 3 do
52172: LD_ADDR_VAR 0 8
52176: PUSH
52177: DOUBLE
52178: LD_INT 1
52180: DEC
52181: ST_TO_ADDR
52182: LD_INT 3
52184: PUSH
52185: FOR_TO
52186: IFFALSE 52215
// AddResourceType ( base , i , sources [ i ] ) ;
52188: LD_VAR 0 15
52192: PPUSH
52193: LD_VAR 0 8
52197: PPUSH
52198: LD_VAR 0 5
52202: PUSH
52203: LD_VAR 0 8
52207: ARRAY
52208: PPUSH
52209: CALL_OW 276
52213: GO 52185
52215: POP
52216: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52217: LD_ADDR_VAR 0 18
52221: PUSH
52222: LD_VAR 0 15
52226: PPUSH
52227: LD_VAR 0 2
52231: PPUSH
52232: LD_INT 1
52234: PPUSH
52235: CALL 51478 0 3
52239: ST_TO_ADDR
// InitHc ;
52240: CALL_OW 19
// InitUc ;
52244: CALL_OW 18
// uc_side := side ;
52248: LD_ADDR_OWVAR 20
52252: PUSH
52253: LD_VAR 0 16
52257: ST_TO_ADDR
// uc_nation := nation ;
52258: LD_ADDR_OWVAR 21
52262: PUSH
52263: LD_VAR 0 17
52267: ST_TO_ADDR
// if buildings then
52268: LD_VAR 0 18
52272: IFFALSE 53594
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52274: LD_ADDR_VAR 0 19
52278: PUSH
52279: LD_VAR 0 18
52283: PPUSH
52284: LD_INT 2
52286: PUSH
52287: LD_INT 30
52289: PUSH
52290: LD_INT 29
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 30
52299: PUSH
52300: LD_INT 30
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: LIST
52311: PPUSH
52312: CALL_OW 72
52316: ST_TO_ADDR
// if tmp then
52317: LD_VAR 0 19
52321: IFFALSE 52369
// for i in tmp do
52323: LD_ADDR_VAR 0 8
52327: PUSH
52328: LD_VAR 0 19
52332: PUSH
52333: FOR_IN
52334: IFFALSE 52367
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52336: LD_VAR 0 8
52340: PPUSH
52341: CALL_OW 250
52345: PPUSH
52346: LD_VAR 0 8
52350: PPUSH
52351: CALL_OW 251
52355: PPUSH
52356: LD_VAR 0 16
52360: PPUSH
52361: CALL_OW 441
52365: GO 52333
52367: POP
52368: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52369: LD_VAR 0 18
52373: PPUSH
52374: LD_INT 2
52376: PUSH
52377: LD_INT 30
52379: PUSH
52380: LD_INT 32
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 30
52389: PUSH
52390: LD_INT 33
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: PPUSH
52402: CALL_OW 72
52406: IFFALSE 52494
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52408: LD_ADDR_VAR 0 8
52412: PUSH
52413: LD_VAR 0 18
52417: PPUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 30
52423: PUSH
52424: LD_INT 32
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 30
52433: PUSH
52434: LD_INT 33
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: LIST
52445: PPUSH
52446: CALL_OW 72
52450: PUSH
52451: FOR_IN
52452: IFFALSE 52492
// begin if not GetBWeapon ( i ) then
52454: LD_VAR 0 8
52458: PPUSH
52459: CALL_OW 269
52463: NOT
52464: IFFALSE 52490
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52466: LD_VAR 0 8
52470: PPUSH
52471: LD_VAR 0 8
52475: PPUSH
52476: LD_VAR 0 2
52480: PPUSH
52481: CALL 53740 0 2
52485: PPUSH
52486: CALL_OW 431
// end ;
52490: GO 52451
52492: POP
52493: POP
// end ; for i = 1 to personel do
52494: LD_ADDR_VAR 0 8
52498: PUSH
52499: DOUBLE
52500: LD_INT 1
52502: DEC
52503: ST_TO_ADDR
52504: LD_VAR 0 6
52508: PUSH
52509: FOR_TO
52510: IFFALSE 53574
// begin if i > 4 then
52512: LD_VAR 0 8
52516: PUSH
52517: LD_INT 4
52519: GREATER
52520: IFFALSE 52524
// break ;
52522: GO 53574
// case i of 1 :
52524: LD_VAR 0 8
52528: PUSH
52529: LD_INT 1
52531: DOUBLE
52532: EQUAL
52533: IFTRUE 52537
52535: GO 52617
52537: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52538: LD_ADDR_VAR 0 12
52542: PUSH
52543: LD_VAR 0 18
52547: PPUSH
52548: LD_INT 22
52550: PUSH
52551: LD_VAR 0 16
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 58
52562: PUSH
52563: EMPTY
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 30
52571: PUSH
52572: LD_INT 32
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 30
52581: PUSH
52582: LD_INT 4
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 30
52591: PUSH
52592: LD_INT 5
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: LIST
52609: PPUSH
52610: CALL_OW 72
52614: ST_TO_ADDR
52615: GO 52839
52617: LD_INT 2
52619: DOUBLE
52620: EQUAL
52621: IFTRUE 52625
52623: GO 52687
52625: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52626: LD_ADDR_VAR 0 12
52630: PUSH
52631: LD_VAR 0 18
52635: PPUSH
52636: LD_INT 22
52638: PUSH
52639: LD_VAR 0 16
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: LD_INT 30
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 30
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: LIST
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PPUSH
52680: CALL_OW 72
52684: ST_TO_ADDR
52685: GO 52839
52687: LD_INT 3
52689: DOUBLE
52690: EQUAL
52691: IFTRUE 52695
52693: GO 52757
52695: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52696: LD_ADDR_VAR 0 12
52700: PUSH
52701: LD_VAR 0 18
52705: PPUSH
52706: LD_INT 22
52708: PUSH
52709: LD_VAR 0 16
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: LD_INT 30
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 30
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PPUSH
52750: CALL_OW 72
52754: ST_TO_ADDR
52755: GO 52839
52757: LD_INT 4
52759: DOUBLE
52760: EQUAL
52761: IFTRUE 52765
52763: GO 52838
52765: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52766: LD_ADDR_VAR 0 12
52770: PUSH
52771: LD_VAR 0 18
52775: PPUSH
52776: LD_INT 22
52778: PUSH
52779: LD_VAR 0 16
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: LD_INT 30
52793: PUSH
52794: LD_INT 6
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 30
52803: PUSH
52804: LD_INT 7
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 30
52813: PUSH
52814: LD_INT 8
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PPUSH
52831: CALL_OW 72
52835: ST_TO_ADDR
52836: GO 52839
52838: POP
// if i = 1 then
52839: LD_VAR 0 8
52843: PUSH
52844: LD_INT 1
52846: EQUAL
52847: IFFALSE 52958
// begin tmp := [ ] ;
52849: LD_ADDR_VAR 0 19
52853: PUSH
52854: EMPTY
52855: ST_TO_ADDR
// for j in f do
52856: LD_ADDR_VAR 0 9
52860: PUSH
52861: LD_VAR 0 12
52865: PUSH
52866: FOR_IN
52867: IFFALSE 52940
// if GetBType ( j ) = b_bunker then
52869: LD_VAR 0 9
52873: PPUSH
52874: CALL_OW 266
52878: PUSH
52879: LD_INT 32
52881: EQUAL
52882: IFFALSE 52909
// tmp := Insert ( tmp , 1 , j ) else
52884: LD_ADDR_VAR 0 19
52888: PUSH
52889: LD_VAR 0 19
52893: PPUSH
52894: LD_INT 1
52896: PPUSH
52897: LD_VAR 0 9
52901: PPUSH
52902: CALL_OW 2
52906: ST_TO_ADDR
52907: GO 52938
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52909: LD_ADDR_VAR 0 19
52913: PUSH
52914: LD_VAR 0 19
52918: PPUSH
52919: LD_VAR 0 19
52923: PUSH
52924: LD_INT 1
52926: PLUS
52927: PPUSH
52928: LD_VAR 0 9
52932: PPUSH
52933: CALL_OW 2
52937: ST_TO_ADDR
52938: GO 52866
52940: POP
52941: POP
// if tmp then
52942: LD_VAR 0 19
52946: IFFALSE 52958
// f := tmp ;
52948: LD_ADDR_VAR 0 12
52952: PUSH
52953: LD_VAR 0 19
52957: ST_TO_ADDR
// end ; x := personel [ i ] ;
52958: LD_ADDR_VAR 0 13
52962: PUSH
52963: LD_VAR 0 6
52967: PUSH
52968: LD_VAR 0 8
52972: ARRAY
52973: ST_TO_ADDR
// if x = - 1 then
52974: LD_VAR 0 13
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: EQUAL
52983: IFFALSE 53192
// begin for j in f do
52985: LD_ADDR_VAR 0 9
52989: PUSH
52990: LD_VAR 0 12
52994: PUSH
52995: FOR_IN
52996: IFFALSE 53188
// repeat InitHc ;
52998: CALL_OW 19
// if GetBType ( j ) = b_barracks then
53002: LD_VAR 0 9
53006: PPUSH
53007: CALL_OW 266
53011: PUSH
53012: LD_INT 5
53014: EQUAL
53015: IFFALSE 53085
// begin if UnitsInside ( j ) < 3 then
53017: LD_VAR 0 9
53021: PPUSH
53022: CALL_OW 313
53026: PUSH
53027: LD_INT 3
53029: LESS
53030: IFFALSE 53066
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53032: LD_INT 0
53034: PPUSH
53035: LD_INT 5
53037: PUSH
53038: LD_INT 8
53040: PUSH
53041: LD_INT 9
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: LIST
53048: PUSH
53049: LD_VAR 0 17
53053: ARRAY
53054: PPUSH
53055: LD_VAR 0 4
53059: PPUSH
53060: CALL_OW 380
53064: GO 53083
// PrepareHuman ( false , i , skill ) ;
53066: LD_INT 0
53068: PPUSH
53069: LD_VAR 0 8
53073: PPUSH
53074: LD_VAR 0 4
53078: PPUSH
53079: CALL_OW 380
// end else
53083: GO 53102
// PrepareHuman ( false , i , skill ) ;
53085: LD_INT 0
53087: PPUSH
53088: LD_VAR 0 8
53092: PPUSH
53093: LD_VAR 0 4
53097: PPUSH
53098: CALL_OW 380
// un := CreateHuman ;
53102: LD_ADDR_VAR 0 14
53106: PUSH
53107: CALL_OW 44
53111: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53112: LD_ADDR_VAR 0 7
53116: PUSH
53117: LD_VAR 0 7
53121: PPUSH
53122: LD_INT 1
53124: PPUSH
53125: LD_VAR 0 14
53129: PPUSH
53130: CALL_OW 2
53134: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53135: LD_VAR 0 14
53139: PPUSH
53140: LD_VAR 0 9
53144: PPUSH
53145: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53149: LD_VAR 0 9
53153: PPUSH
53154: CALL_OW 313
53158: PUSH
53159: LD_INT 6
53161: EQUAL
53162: PUSH
53163: LD_VAR 0 9
53167: PPUSH
53168: CALL_OW 266
53172: PUSH
53173: LD_INT 32
53175: PUSH
53176: LD_INT 31
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: IN
53183: OR
53184: IFFALSE 52998
53186: GO 52995
53188: POP
53189: POP
// end else
53190: GO 53572
// for j = 1 to x do
53192: LD_ADDR_VAR 0 9
53196: PUSH
53197: DOUBLE
53198: LD_INT 1
53200: DEC
53201: ST_TO_ADDR
53202: LD_VAR 0 13
53206: PUSH
53207: FOR_TO
53208: IFFALSE 53570
// begin InitHc ;
53210: CALL_OW 19
// if not f then
53214: LD_VAR 0 12
53218: NOT
53219: IFFALSE 53308
// begin PrepareHuman ( false , i , skill ) ;
53221: LD_INT 0
53223: PPUSH
53224: LD_VAR 0 8
53228: PPUSH
53229: LD_VAR 0 4
53233: PPUSH
53234: CALL_OW 380
// un := CreateHuman ;
53238: LD_ADDR_VAR 0 14
53242: PUSH
53243: CALL_OW 44
53247: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53248: LD_ADDR_VAR 0 7
53252: PUSH
53253: LD_VAR 0 7
53257: PPUSH
53258: LD_INT 1
53260: PPUSH
53261: LD_VAR 0 14
53265: PPUSH
53266: CALL_OW 2
53270: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53271: LD_VAR 0 14
53275: PPUSH
53276: LD_VAR 0 1
53280: PPUSH
53281: CALL_OW 250
53285: PPUSH
53286: LD_VAR 0 1
53290: PPUSH
53291: CALL_OW 251
53295: PPUSH
53296: LD_INT 10
53298: PPUSH
53299: LD_INT 0
53301: PPUSH
53302: CALL_OW 50
// continue ;
53306: GO 53207
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53308: LD_VAR 0 12
53312: PUSH
53313: LD_INT 1
53315: ARRAY
53316: PPUSH
53317: CALL_OW 313
53321: PUSH
53322: LD_VAR 0 12
53326: PUSH
53327: LD_INT 1
53329: ARRAY
53330: PPUSH
53331: CALL_OW 266
53335: PUSH
53336: LD_INT 32
53338: PUSH
53339: LD_INT 31
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: IN
53346: AND
53347: PUSH
53348: LD_VAR 0 12
53352: PUSH
53353: LD_INT 1
53355: ARRAY
53356: PPUSH
53357: CALL_OW 313
53361: PUSH
53362: LD_INT 6
53364: EQUAL
53365: OR
53366: IFFALSE 53386
// f := Delete ( f , 1 ) ;
53368: LD_ADDR_VAR 0 12
53372: PUSH
53373: LD_VAR 0 12
53377: PPUSH
53378: LD_INT 1
53380: PPUSH
53381: CALL_OW 3
53385: ST_TO_ADDR
// if not f then
53386: LD_VAR 0 12
53390: NOT
53391: IFFALSE 53409
// begin x := x + 2 ;
53393: LD_ADDR_VAR 0 13
53397: PUSH
53398: LD_VAR 0 13
53402: PUSH
53403: LD_INT 2
53405: PLUS
53406: ST_TO_ADDR
// continue ;
53407: GO 53207
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53409: LD_VAR 0 12
53413: PUSH
53414: LD_INT 1
53416: ARRAY
53417: PPUSH
53418: CALL_OW 266
53422: PUSH
53423: LD_INT 5
53425: EQUAL
53426: IFFALSE 53500
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53428: LD_VAR 0 12
53432: PUSH
53433: LD_INT 1
53435: ARRAY
53436: PPUSH
53437: CALL_OW 313
53441: PUSH
53442: LD_INT 3
53444: LESS
53445: IFFALSE 53481
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53447: LD_INT 0
53449: PPUSH
53450: LD_INT 5
53452: PUSH
53453: LD_INT 8
53455: PUSH
53456: LD_INT 9
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: LIST
53463: PUSH
53464: LD_VAR 0 17
53468: ARRAY
53469: PPUSH
53470: LD_VAR 0 4
53474: PPUSH
53475: CALL_OW 380
53479: GO 53498
// PrepareHuman ( false , i , skill ) ;
53481: LD_INT 0
53483: PPUSH
53484: LD_VAR 0 8
53488: PPUSH
53489: LD_VAR 0 4
53493: PPUSH
53494: CALL_OW 380
// end else
53498: GO 53517
// PrepareHuman ( false , i , skill ) ;
53500: LD_INT 0
53502: PPUSH
53503: LD_VAR 0 8
53507: PPUSH
53508: LD_VAR 0 4
53512: PPUSH
53513: CALL_OW 380
// un := CreateHuman ;
53517: LD_ADDR_VAR 0 14
53521: PUSH
53522: CALL_OW 44
53526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53527: LD_ADDR_VAR 0 7
53531: PUSH
53532: LD_VAR 0 7
53536: PPUSH
53537: LD_INT 1
53539: PPUSH
53540: LD_VAR 0 14
53544: PPUSH
53545: CALL_OW 2
53549: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53550: LD_VAR 0 14
53554: PPUSH
53555: LD_VAR 0 12
53559: PUSH
53560: LD_INT 1
53562: ARRAY
53563: PPUSH
53564: CALL_OW 52
// end ;
53568: GO 53207
53570: POP
53571: POP
// end ;
53572: GO 52509
53574: POP
53575: POP
// result := result ^ buildings ;
53576: LD_ADDR_VAR 0 7
53580: PUSH
53581: LD_VAR 0 7
53585: PUSH
53586: LD_VAR 0 18
53590: ADD
53591: ST_TO_ADDR
// end else
53592: GO 53735
// begin for i = 1 to personel do
53594: LD_ADDR_VAR 0 8
53598: PUSH
53599: DOUBLE
53600: LD_INT 1
53602: DEC
53603: ST_TO_ADDR
53604: LD_VAR 0 6
53608: PUSH
53609: FOR_TO
53610: IFFALSE 53733
// begin if i > 4 then
53612: LD_VAR 0 8
53616: PUSH
53617: LD_INT 4
53619: GREATER
53620: IFFALSE 53624
// break ;
53622: GO 53733
// x := personel [ i ] ;
53624: LD_ADDR_VAR 0 13
53628: PUSH
53629: LD_VAR 0 6
53633: PUSH
53634: LD_VAR 0 8
53638: ARRAY
53639: ST_TO_ADDR
// if x = - 1 then
53640: LD_VAR 0 13
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: EQUAL
53649: IFFALSE 53653
// continue ;
53651: GO 53609
// PrepareHuman ( false , i , skill ) ;
53653: LD_INT 0
53655: PPUSH
53656: LD_VAR 0 8
53660: PPUSH
53661: LD_VAR 0 4
53665: PPUSH
53666: CALL_OW 380
// un := CreateHuman ;
53670: LD_ADDR_VAR 0 14
53674: PUSH
53675: CALL_OW 44
53679: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53680: LD_VAR 0 14
53684: PPUSH
53685: LD_VAR 0 1
53689: PPUSH
53690: CALL_OW 250
53694: PPUSH
53695: LD_VAR 0 1
53699: PPUSH
53700: CALL_OW 251
53704: PPUSH
53705: LD_INT 10
53707: PPUSH
53708: LD_INT 0
53710: PPUSH
53711: CALL_OW 50
// result := result ^ un ;
53715: LD_ADDR_VAR 0 7
53719: PUSH
53720: LD_VAR 0 7
53724: PUSH
53725: LD_VAR 0 14
53729: ADD
53730: ST_TO_ADDR
// end ;
53731: GO 53609
53733: POP
53734: POP
// end ; end ;
53735: LD_VAR 0 7
53739: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53740: LD_INT 0
53742: PPUSH
53743: PPUSH
53744: PPUSH
53745: PPUSH
53746: PPUSH
53747: PPUSH
53748: PPUSH
53749: PPUSH
53750: PPUSH
53751: PPUSH
53752: PPUSH
53753: PPUSH
53754: PPUSH
53755: PPUSH
53756: PPUSH
53757: PPUSH
// result := false ;
53758: LD_ADDR_VAR 0 3
53762: PUSH
53763: LD_INT 0
53765: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53766: LD_VAR 0 1
53770: NOT
53771: PUSH
53772: LD_VAR 0 1
53776: PPUSH
53777: CALL_OW 266
53781: PUSH
53782: LD_INT 32
53784: PUSH
53785: LD_INT 33
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: IN
53792: NOT
53793: OR
53794: IFFALSE 53798
// exit ;
53796: GO 54907
// nat := GetNation ( tower ) ;
53798: LD_ADDR_VAR 0 12
53802: PUSH
53803: LD_VAR 0 1
53807: PPUSH
53808: CALL_OW 248
53812: ST_TO_ADDR
// side := GetSide ( tower ) ;
53813: LD_ADDR_VAR 0 16
53817: PUSH
53818: LD_VAR 0 1
53822: PPUSH
53823: CALL_OW 255
53827: ST_TO_ADDR
// x := GetX ( tower ) ;
53828: LD_ADDR_VAR 0 10
53832: PUSH
53833: LD_VAR 0 1
53837: PPUSH
53838: CALL_OW 250
53842: ST_TO_ADDR
// y := GetY ( tower ) ;
53843: LD_ADDR_VAR 0 11
53847: PUSH
53848: LD_VAR 0 1
53852: PPUSH
53853: CALL_OW 251
53857: ST_TO_ADDR
// if not x or not y then
53858: LD_VAR 0 10
53862: NOT
53863: PUSH
53864: LD_VAR 0 11
53868: NOT
53869: OR
53870: IFFALSE 53874
// exit ;
53872: GO 54907
// weapon := 0 ;
53874: LD_ADDR_VAR 0 18
53878: PUSH
53879: LD_INT 0
53881: ST_TO_ADDR
// fac_list := [ ] ;
53882: LD_ADDR_VAR 0 17
53886: PUSH
53887: EMPTY
53888: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53889: LD_ADDR_VAR 0 6
53893: PUSH
53894: LD_VAR 0 1
53898: PPUSH
53899: CALL_OW 274
53903: PPUSH
53904: LD_VAR 0 2
53908: PPUSH
53909: LD_INT 0
53911: PPUSH
53912: CALL 51478 0 3
53916: PPUSH
53917: LD_INT 30
53919: PUSH
53920: LD_INT 3
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PPUSH
53927: CALL_OW 72
53931: ST_TO_ADDR
// if not factories then
53932: LD_VAR 0 6
53936: NOT
53937: IFFALSE 53941
// exit ;
53939: GO 54907
// for i in factories do
53941: LD_ADDR_VAR 0 8
53945: PUSH
53946: LD_VAR 0 6
53950: PUSH
53951: FOR_IN
53952: IFFALSE 53977
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53954: LD_ADDR_VAR 0 17
53958: PUSH
53959: LD_VAR 0 17
53963: PUSH
53964: LD_VAR 0 8
53968: PPUSH
53969: CALL_OW 478
53973: UNION
53974: ST_TO_ADDR
53975: GO 53951
53977: POP
53978: POP
// if not fac_list then
53979: LD_VAR 0 17
53983: NOT
53984: IFFALSE 53988
// exit ;
53986: GO 54907
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53988: LD_ADDR_VAR 0 5
53992: PUSH
53993: LD_INT 4
53995: PUSH
53996: LD_INT 5
53998: PUSH
53999: LD_INT 9
54001: PUSH
54002: LD_INT 10
54004: PUSH
54005: LD_INT 6
54007: PUSH
54008: LD_INT 7
54010: PUSH
54011: LD_INT 11
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 27
54025: PUSH
54026: LD_INT 28
54028: PUSH
54029: LD_INT 26
54031: PUSH
54032: LD_INT 30
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 43
54043: PUSH
54044: LD_INT 44
54046: PUSH
54047: LD_INT 46
54049: PUSH
54050: LD_INT 45
54052: PUSH
54053: LD_INT 47
54055: PUSH
54056: LD_INT 49
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: PUSH
54072: LD_VAR 0 12
54076: ARRAY
54077: ST_TO_ADDR
// list := list isect fac_list ;
54078: LD_ADDR_VAR 0 5
54082: PUSH
54083: LD_VAR 0 5
54087: PUSH
54088: LD_VAR 0 17
54092: ISECT
54093: ST_TO_ADDR
// if not list then
54094: LD_VAR 0 5
54098: NOT
54099: IFFALSE 54103
// exit ;
54101: GO 54907
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54103: LD_VAR 0 12
54107: PUSH
54108: LD_INT 3
54110: EQUAL
54111: PUSH
54112: LD_INT 49
54114: PUSH
54115: LD_VAR 0 5
54119: IN
54120: AND
54121: PUSH
54122: LD_INT 31
54124: PPUSH
54125: LD_VAR 0 16
54129: PPUSH
54130: CALL_OW 321
54134: PUSH
54135: LD_INT 2
54137: EQUAL
54138: AND
54139: IFFALSE 54199
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54141: LD_INT 22
54143: PUSH
54144: LD_VAR 0 16
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 35
54155: PUSH
54156: LD_INT 49
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 91
54165: PUSH
54166: LD_VAR 0 1
54170: PUSH
54171: LD_INT 10
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: LIST
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: LIST
54183: PPUSH
54184: CALL_OW 69
54188: NOT
54189: IFFALSE 54199
// weapon := ru_time_lapser ;
54191: LD_ADDR_VAR 0 18
54195: PUSH
54196: LD_INT 49
54198: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54199: LD_VAR 0 12
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: IN
54214: PUSH
54215: LD_INT 11
54217: PUSH
54218: LD_VAR 0 5
54222: IN
54223: PUSH
54224: LD_INT 30
54226: PUSH
54227: LD_VAR 0 5
54231: IN
54232: OR
54233: AND
54234: PUSH
54235: LD_INT 6
54237: PPUSH
54238: LD_VAR 0 16
54242: PPUSH
54243: CALL_OW 321
54247: PUSH
54248: LD_INT 2
54250: EQUAL
54251: AND
54252: IFFALSE 54417
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54254: LD_INT 22
54256: PUSH
54257: LD_VAR 0 16
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 35
54271: PUSH
54272: LD_INT 11
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 35
54281: PUSH
54282: LD_INT 30
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 91
54296: PUSH
54297: LD_VAR 0 1
54301: PUSH
54302: LD_INT 18
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: LIST
54314: PPUSH
54315: CALL_OW 69
54319: NOT
54320: PUSH
54321: LD_INT 22
54323: PUSH
54324: LD_VAR 0 16
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: LD_INT 30
54338: PUSH
54339: LD_INT 32
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 30
54348: PUSH
54349: LD_INT 33
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 91
54363: PUSH
54364: LD_VAR 0 1
54368: PUSH
54369: LD_INT 12
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: LIST
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: LIST
54381: PUSH
54382: EMPTY
54383: LIST
54384: PPUSH
54385: CALL_OW 69
54389: PUSH
54390: LD_INT 2
54392: GREATER
54393: AND
54394: IFFALSE 54417
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54396: LD_ADDR_VAR 0 18
54400: PUSH
54401: LD_INT 11
54403: PUSH
54404: LD_INT 30
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_VAR 0 12
54415: ARRAY
54416: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54417: LD_VAR 0 18
54421: NOT
54422: PUSH
54423: LD_INT 40
54425: PPUSH
54426: LD_VAR 0 16
54430: PPUSH
54431: CALL_OW 321
54435: PUSH
54436: LD_INT 2
54438: EQUAL
54439: AND
54440: PUSH
54441: LD_INT 7
54443: PUSH
54444: LD_VAR 0 5
54448: IN
54449: PUSH
54450: LD_INT 28
54452: PUSH
54453: LD_VAR 0 5
54457: IN
54458: OR
54459: PUSH
54460: LD_INT 45
54462: PUSH
54463: LD_VAR 0 5
54467: IN
54468: OR
54469: AND
54470: IFFALSE 54724
// begin hex := GetHexInfo ( x , y ) ;
54472: LD_ADDR_VAR 0 4
54476: PUSH
54477: LD_VAR 0 10
54481: PPUSH
54482: LD_VAR 0 11
54486: PPUSH
54487: CALL_OW 546
54491: ST_TO_ADDR
// if hex [ 1 ] then
54492: LD_VAR 0 4
54496: PUSH
54497: LD_INT 1
54499: ARRAY
54500: IFFALSE 54504
// exit ;
54502: GO 54907
// height := hex [ 2 ] ;
54504: LD_ADDR_VAR 0 15
54508: PUSH
54509: LD_VAR 0 4
54513: PUSH
54514: LD_INT 2
54516: ARRAY
54517: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54518: LD_ADDR_VAR 0 14
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: LD_INT 5
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: ST_TO_ADDR
// for i in tmp do
54541: LD_ADDR_VAR 0 8
54545: PUSH
54546: LD_VAR 0 14
54550: PUSH
54551: FOR_IN
54552: IFFALSE 54722
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54554: LD_ADDR_VAR 0 9
54558: PUSH
54559: LD_VAR 0 10
54563: PPUSH
54564: LD_VAR 0 8
54568: PPUSH
54569: LD_INT 5
54571: PPUSH
54572: CALL_OW 272
54576: PUSH
54577: LD_VAR 0 11
54581: PPUSH
54582: LD_VAR 0 8
54586: PPUSH
54587: LD_INT 5
54589: PPUSH
54590: CALL_OW 273
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54599: LD_VAR 0 9
54603: PUSH
54604: LD_INT 1
54606: ARRAY
54607: PPUSH
54608: LD_VAR 0 9
54612: PUSH
54613: LD_INT 2
54615: ARRAY
54616: PPUSH
54617: CALL_OW 488
54621: IFFALSE 54720
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54623: LD_ADDR_VAR 0 4
54627: PUSH
54628: LD_VAR 0 9
54632: PUSH
54633: LD_INT 1
54635: ARRAY
54636: PPUSH
54637: LD_VAR 0 9
54641: PUSH
54642: LD_INT 2
54644: ARRAY
54645: PPUSH
54646: CALL_OW 546
54650: ST_TO_ADDR
// if hex [ 1 ] then
54651: LD_VAR 0 4
54655: PUSH
54656: LD_INT 1
54658: ARRAY
54659: IFFALSE 54663
// continue ;
54661: GO 54551
// h := hex [ 2 ] ;
54663: LD_ADDR_VAR 0 13
54667: PUSH
54668: LD_VAR 0 4
54672: PUSH
54673: LD_INT 2
54675: ARRAY
54676: ST_TO_ADDR
// if h + 7 < height then
54677: LD_VAR 0 13
54681: PUSH
54682: LD_INT 7
54684: PLUS
54685: PUSH
54686: LD_VAR 0 15
54690: LESS
54691: IFFALSE 54720
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54693: LD_ADDR_VAR 0 18
54697: PUSH
54698: LD_INT 7
54700: PUSH
54701: LD_INT 28
54703: PUSH
54704: LD_INT 45
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: LIST
54711: PUSH
54712: LD_VAR 0 12
54716: ARRAY
54717: ST_TO_ADDR
// break ;
54718: GO 54722
// end ; end ; end ;
54720: GO 54551
54722: POP
54723: POP
// end ; if not weapon then
54724: LD_VAR 0 18
54728: NOT
54729: IFFALSE 54789
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54731: LD_ADDR_VAR 0 5
54735: PUSH
54736: LD_VAR 0 5
54740: PUSH
54741: LD_INT 11
54743: PUSH
54744: LD_INT 30
54746: PUSH
54747: LD_INT 49
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: LIST
54754: DIFF
54755: ST_TO_ADDR
// if not list then
54756: LD_VAR 0 5
54760: NOT
54761: IFFALSE 54765
// exit ;
54763: GO 54907
// weapon := list [ rand ( 1 , list ) ] ;
54765: LD_ADDR_VAR 0 18
54769: PUSH
54770: LD_VAR 0 5
54774: PUSH
54775: LD_INT 1
54777: PPUSH
54778: LD_VAR 0 5
54782: PPUSH
54783: CALL_OW 12
54787: ARRAY
54788: ST_TO_ADDR
// end ; if weapon then
54789: LD_VAR 0 18
54793: IFFALSE 54907
// begin tmp := CostOfWeapon ( weapon ) ;
54795: LD_ADDR_VAR 0 14
54799: PUSH
54800: LD_VAR 0 18
54804: PPUSH
54805: CALL_OW 451
54809: ST_TO_ADDR
// j := GetBase ( tower ) ;
54810: LD_ADDR_VAR 0 9
54814: PUSH
54815: LD_VAR 0 1
54819: PPUSH
54820: CALL_OW 274
54824: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54825: LD_VAR 0 9
54829: PPUSH
54830: LD_INT 1
54832: PPUSH
54833: CALL_OW 275
54837: PUSH
54838: LD_VAR 0 14
54842: PUSH
54843: LD_INT 1
54845: ARRAY
54846: GREATEREQUAL
54847: PUSH
54848: LD_VAR 0 9
54852: PPUSH
54853: LD_INT 2
54855: PPUSH
54856: CALL_OW 275
54860: PUSH
54861: LD_VAR 0 14
54865: PUSH
54866: LD_INT 2
54868: ARRAY
54869: GREATEREQUAL
54870: AND
54871: PUSH
54872: LD_VAR 0 9
54876: PPUSH
54877: LD_INT 3
54879: PPUSH
54880: CALL_OW 275
54884: PUSH
54885: LD_VAR 0 14
54889: PUSH
54890: LD_INT 3
54892: ARRAY
54893: GREATEREQUAL
54894: AND
54895: IFFALSE 54907
// result := weapon ;
54897: LD_ADDR_VAR 0 3
54901: PUSH
54902: LD_VAR 0 18
54906: ST_TO_ADDR
// end ; end ;
54907: LD_VAR 0 3
54911: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54912: LD_INT 0
54914: PPUSH
54915: PPUSH
// result := true ;
54916: LD_ADDR_VAR 0 3
54920: PUSH
54921: LD_INT 1
54923: ST_TO_ADDR
// if array1 = array2 then
54924: LD_VAR 0 1
54928: PUSH
54929: LD_VAR 0 2
54933: EQUAL
54934: IFFALSE 54994
// begin for i = 1 to array1 do
54936: LD_ADDR_VAR 0 4
54940: PUSH
54941: DOUBLE
54942: LD_INT 1
54944: DEC
54945: ST_TO_ADDR
54946: LD_VAR 0 1
54950: PUSH
54951: FOR_TO
54952: IFFALSE 54990
// if array1 [ i ] <> array2 [ i ] then
54954: LD_VAR 0 1
54958: PUSH
54959: LD_VAR 0 4
54963: ARRAY
54964: PUSH
54965: LD_VAR 0 2
54969: PUSH
54970: LD_VAR 0 4
54974: ARRAY
54975: NONEQUAL
54976: IFFALSE 54988
// begin result := false ;
54978: LD_ADDR_VAR 0 3
54982: PUSH
54983: LD_INT 0
54985: ST_TO_ADDR
// break ;
54986: GO 54990
// end ;
54988: GO 54951
54990: POP
54991: POP
// end else
54992: GO 55002
// result := false ;
54994: LD_ADDR_VAR 0 3
54998: PUSH
54999: LD_INT 0
55001: ST_TO_ADDR
// end ;
55002: LD_VAR 0 3
55006: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
55007: LD_INT 0
55009: PPUSH
55010: PPUSH
// if not array1 or not array2 then
55011: LD_VAR 0 1
55015: NOT
55016: PUSH
55017: LD_VAR 0 2
55021: NOT
55022: OR
55023: IFFALSE 55027
// exit ;
55025: GO 55091
// result := true ;
55027: LD_ADDR_VAR 0 3
55031: PUSH
55032: LD_INT 1
55034: ST_TO_ADDR
// for i = 1 to array1 do
55035: LD_ADDR_VAR 0 4
55039: PUSH
55040: DOUBLE
55041: LD_INT 1
55043: DEC
55044: ST_TO_ADDR
55045: LD_VAR 0 1
55049: PUSH
55050: FOR_TO
55051: IFFALSE 55089
// if array1 [ i ] <> array2 [ i ] then
55053: LD_VAR 0 1
55057: PUSH
55058: LD_VAR 0 4
55062: ARRAY
55063: PUSH
55064: LD_VAR 0 2
55068: PUSH
55069: LD_VAR 0 4
55073: ARRAY
55074: NONEQUAL
55075: IFFALSE 55087
// begin result := false ;
55077: LD_ADDR_VAR 0 3
55081: PUSH
55082: LD_INT 0
55084: ST_TO_ADDR
// break ;
55085: GO 55089
// end ;
55087: GO 55050
55089: POP
55090: POP
// end ;
55091: LD_VAR 0 3
55095: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55096: LD_INT 0
55098: PPUSH
55099: PPUSH
55100: PPUSH
// pom := GetBase ( fac ) ;
55101: LD_ADDR_VAR 0 5
55105: PUSH
55106: LD_VAR 0 1
55110: PPUSH
55111: CALL_OW 274
55115: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55116: LD_ADDR_VAR 0 4
55120: PUSH
55121: LD_VAR 0 2
55125: PUSH
55126: LD_INT 1
55128: ARRAY
55129: PPUSH
55130: LD_VAR 0 2
55134: PUSH
55135: LD_INT 2
55137: ARRAY
55138: PPUSH
55139: LD_VAR 0 2
55143: PUSH
55144: LD_INT 3
55146: ARRAY
55147: PPUSH
55148: LD_VAR 0 2
55152: PUSH
55153: LD_INT 4
55155: ARRAY
55156: PPUSH
55157: CALL_OW 449
55161: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55162: LD_ADDR_VAR 0 3
55166: PUSH
55167: LD_VAR 0 5
55171: PPUSH
55172: LD_INT 1
55174: PPUSH
55175: CALL_OW 275
55179: PUSH
55180: LD_VAR 0 4
55184: PUSH
55185: LD_INT 1
55187: ARRAY
55188: GREATEREQUAL
55189: PUSH
55190: LD_VAR 0 5
55194: PPUSH
55195: LD_INT 2
55197: PPUSH
55198: CALL_OW 275
55202: PUSH
55203: LD_VAR 0 4
55207: PUSH
55208: LD_INT 2
55210: ARRAY
55211: GREATEREQUAL
55212: AND
55213: PUSH
55214: LD_VAR 0 5
55218: PPUSH
55219: LD_INT 3
55221: PPUSH
55222: CALL_OW 275
55226: PUSH
55227: LD_VAR 0 4
55231: PUSH
55232: LD_INT 3
55234: ARRAY
55235: GREATEREQUAL
55236: AND
55237: ST_TO_ADDR
// end ;
55238: LD_VAR 0 3
55242: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55243: LD_INT 0
55245: PPUSH
55246: PPUSH
55247: PPUSH
55248: PPUSH
// pom := GetBase ( building ) ;
55249: LD_ADDR_VAR 0 3
55253: PUSH
55254: LD_VAR 0 1
55258: PPUSH
55259: CALL_OW 274
55263: ST_TO_ADDR
// if not pom then
55264: LD_VAR 0 3
55268: NOT
55269: IFFALSE 55273
// exit ;
55271: GO 55443
// btype := GetBType ( building ) ;
55273: LD_ADDR_VAR 0 5
55277: PUSH
55278: LD_VAR 0 1
55282: PPUSH
55283: CALL_OW 266
55287: ST_TO_ADDR
// if btype = b_armoury then
55288: LD_VAR 0 5
55292: PUSH
55293: LD_INT 4
55295: EQUAL
55296: IFFALSE 55306
// btype := b_barracks ;
55298: LD_ADDR_VAR 0 5
55302: PUSH
55303: LD_INT 5
55305: ST_TO_ADDR
// if btype = b_depot then
55306: LD_VAR 0 5
55310: PUSH
55311: LD_INT 0
55313: EQUAL
55314: IFFALSE 55324
// btype := b_warehouse ;
55316: LD_ADDR_VAR 0 5
55320: PUSH
55321: LD_INT 1
55323: ST_TO_ADDR
// if btype = b_workshop then
55324: LD_VAR 0 5
55328: PUSH
55329: LD_INT 2
55331: EQUAL
55332: IFFALSE 55342
// btype := b_factory ;
55334: LD_ADDR_VAR 0 5
55338: PUSH
55339: LD_INT 3
55341: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55342: LD_ADDR_VAR 0 4
55346: PUSH
55347: LD_VAR 0 5
55351: PPUSH
55352: LD_VAR 0 1
55356: PPUSH
55357: CALL_OW 248
55361: PPUSH
55362: CALL_OW 450
55366: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55367: LD_ADDR_VAR 0 2
55371: PUSH
55372: LD_VAR 0 3
55376: PPUSH
55377: LD_INT 1
55379: PPUSH
55380: CALL_OW 275
55384: PUSH
55385: LD_VAR 0 4
55389: PUSH
55390: LD_INT 1
55392: ARRAY
55393: GREATEREQUAL
55394: PUSH
55395: LD_VAR 0 3
55399: PPUSH
55400: LD_INT 2
55402: PPUSH
55403: CALL_OW 275
55407: PUSH
55408: LD_VAR 0 4
55412: PUSH
55413: LD_INT 2
55415: ARRAY
55416: GREATEREQUAL
55417: AND
55418: PUSH
55419: LD_VAR 0 3
55423: PPUSH
55424: LD_INT 3
55426: PPUSH
55427: CALL_OW 275
55431: PUSH
55432: LD_VAR 0 4
55436: PUSH
55437: LD_INT 3
55439: ARRAY
55440: GREATEREQUAL
55441: AND
55442: ST_TO_ADDR
// end ;
55443: LD_VAR 0 2
55447: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55448: LD_INT 0
55450: PPUSH
55451: PPUSH
55452: PPUSH
// pom := GetBase ( building ) ;
55453: LD_ADDR_VAR 0 4
55457: PUSH
55458: LD_VAR 0 1
55462: PPUSH
55463: CALL_OW 274
55467: ST_TO_ADDR
// if not pom then
55468: LD_VAR 0 4
55472: NOT
55473: IFFALSE 55477
// exit ;
55475: GO 55578
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55477: LD_ADDR_VAR 0 5
55481: PUSH
55482: LD_VAR 0 2
55486: PPUSH
55487: LD_VAR 0 1
55491: PPUSH
55492: CALL_OW 248
55496: PPUSH
55497: CALL_OW 450
55501: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55502: LD_ADDR_VAR 0 3
55506: PUSH
55507: LD_VAR 0 4
55511: PPUSH
55512: LD_INT 1
55514: PPUSH
55515: CALL_OW 275
55519: PUSH
55520: LD_VAR 0 5
55524: PUSH
55525: LD_INT 1
55527: ARRAY
55528: GREATEREQUAL
55529: PUSH
55530: LD_VAR 0 4
55534: PPUSH
55535: LD_INT 2
55537: PPUSH
55538: CALL_OW 275
55542: PUSH
55543: LD_VAR 0 5
55547: PUSH
55548: LD_INT 2
55550: ARRAY
55551: GREATEREQUAL
55552: AND
55553: PUSH
55554: LD_VAR 0 4
55558: PPUSH
55559: LD_INT 3
55561: PPUSH
55562: CALL_OW 275
55566: PUSH
55567: LD_VAR 0 5
55571: PUSH
55572: LD_INT 3
55574: ARRAY
55575: GREATEREQUAL
55576: AND
55577: ST_TO_ADDR
// end ;
55578: LD_VAR 0 3
55582: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55583: LD_INT 0
55585: PPUSH
55586: PPUSH
55587: PPUSH
55588: PPUSH
55589: PPUSH
55590: PPUSH
55591: PPUSH
55592: PPUSH
55593: PPUSH
55594: PPUSH
55595: PPUSH
// result := false ;
55596: LD_ADDR_VAR 0 8
55600: PUSH
55601: LD_INT 0
55603: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55604: LD_VAR 0 5
55608: NOT
55609: PUSH
55610: LD_VAR 0 1
55614: NOT
55615: OR
55616: PUSH
55617: LD_VAR 0 2
55621: NOT
55622: OR
55623: PUSH
55624: LD_VAR 0 3
55628: NOT
55629: OR
55630: IFFALSE 55634
// exit ;
55632: GO 56448
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55634: LD_ADDR_VAR 0 14
55638: PUSH
55639: LD_VAR 0 1
55643: PPUSH
55644: LD_VAR 0 2
55648: PPUSH
55649: LD_VAR 0 3
55653: PPUSH
55654: LD_VAR 0 4
55658: PPUSH
55659: LD_VAR 0 5
55663: PUSH
55664: LD_INT 1
55666: ARRAY
55667: PPUSH
55668: CALL_OW 248
55672: PPUSH
55673: LD_INT 0
55675: PPUSH
55676: CALL 57701 0 6
55680: ST_TO_ADDR
// if not hexes then
55681: LD_VAR 0 14
55685: NOT
55686: IFFALSE 55690
// exit ;
55688: GO 56448
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55690: LD_ADDR_VAR 0 17
55694: PUSH
55695: LD_VAR 0 5
55699: PPUSH
55700: LD_INT 22
55702: PUSH
55703: LD_VAR 0 13
55707: PPUSH
55708: CALL_OW 255
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: LD_INT 30
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 30
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: LIST
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PPUSH
55749: CALL_OW 72
55753: ST_TO_ADDR
// for i = 1 to hexes do
55754: LD_ADDR_VAR 0 9
55758: PUSH
55759: DOUBLE
55760: LD_INT 1
55762: DEC
55763: ST_TO_ADDR
55764: LD_VAR 0 14
55768: PUSH
55769: FOR_TO
55770: IFFALSE 56446
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55772: LD_ADDR_VAR 0 13
55776: PUSH
55777: LD_VAR 0 14
55781: PUSH
55782: LD_VAR 0 9
55786: ARRAY
55787: PUSH
55788: LD_INT 1
55790: ARRAY
55791: PPUSH
55792: LD_VAR 0 14
55796: PUSH
55797: LD_VAR 0 9
55801: ARRAY
55802: PUSH
55803: LD_INT 2
55805: ARRAY
55806: PPUSH
55807: CALL_OW 428
55811: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55812: LD_VAR 0 14
55816: PUSH
55817: LD_VAR 0 9
55821: ARRAY
55822: PUSH
55823: LD_INT 1
55825: ARRAY
55826: PPUSH
55827: LD_VAR 0 14
55831: PUSH
55832: LD_VAR 0 9
55836: ARRAY
55837: PUSH
55838: LD_INT 2
55840: ARRAY
55841: PPUSH
55842: CALL_OW 351
55846: PUSH
55847: LD_VAR 0 14
55851: PUSH
55852: LD_VAR 0 9
55856: ARRAY
55857: PUSH
55858: LD_INT 1
55860: ARRAY
55861: PPUSH
55862: LD_VAR 0 14
55866: PUSH
55867: LD_VAR 0 9
55871: ARRAY
55872: PUSH
55873: LD_INT 2
55875: ARRAY
55876: PPUSH
55877: CALL_OW 488
55881: NOT
55882: OR
55883: PUSH
55884: LD_VAR 0 13
55888: PPUSH
55889: CALL_OW 247
55893: PUSH
55894: LD_INT 3
55896: EQUAL
55897: OR
55898: IFFALSE 55904
// exit ;
55900: POP
55901: POP
55902: GO 56448
// if not tmp then
55904: LD_VAR 0 13
55908: NOT
55909: IFFALSE 55913
// continue ;
55911: GO 55769
// result := true ;
55913: LD_ADDR_VAR 0 8
55917: PUSH
55918: LD_INT 1
55920: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55921: LD_VAR 0 6
55925: PUSH
55926: LD_VAR 0 13
55930: PPUSH
55931: CALL_OW 247
55935: PUSH
55936: LD_INT 2
55938: EQUAL
55939: AND
55940: PUSH
55941: LD_VAR 0 13
55945: PPUSH
55946: CALL_OW 263
55950: PUSH
55951: LD_INT 1
55953: EQUAL
55954: AND
55955: IFFALSE 56119
// begin if IsDrivenBy ( tmp ) then
55957: LD_VAR 0 13
55961: PPUSH
55962: CALL_OW 311
55966: IFFALSE 55970
// continue ;
55968: GO 55769
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55970: LD_VAR 0 6
55974: PPUSH
55975: LD_INT 3
55977: PUSH
55978: LD_INT 60
55980: PUSH
55981: EMPTY
55982: LIST
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 3
55990: PUSH
55991: LD_INT 55
55993: PUSH
55994: EMPTY
55995: LIST
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PPUSH
56005: CALL_OW 72
56009: IFFALSE 56117
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
56011: LD_ADDR_VAR 0 18
56015: PUSH
56016: LD_VAR 0 6
56020: PPUSH
56021: LD_INT 3
56023: PUSH
56024: LD_INT 60
56026: PUSH
56027: EMPTY
56028: LIST
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: LD_INT 55
56039: PUSH
56040: EMPTY
56041: LIST
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PPUSH
56051: CALL_OW 72
56055: PUSH
56056: LD_INT 1
56058: ARRAY
56059: ST_TO_ADDR
// if IsInUnit ( driver ) then
56060: LD_VAR 0 18
56064: PPUSH
56065: CALL_OW 310
56069: IFFALSE 56080
// ComExit ( driver ) ;
56071: LD_VAR 0 18
56075: PPUSH
56076: CALL 81502 0 1
// AddComEnterUnit ( driver , tmp ) ;
56080: LD_VAR 0 18
56084: PPUSH
56085: LD_VAR 0 13
56089: PPUSH
56090: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56094: LD_VAR 0 18
56098: PPUSH
56099: LD_VAR 0 7
56103: PPUSH
56104: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56108: LD_VAR 0 18
56112: PPUSH
56113: CALL_OW 181
// end ; continue ;
56117: GO 55769
// end ; if not cleaners or not tmp in cleaners then
56119: LD_VAR 0 6
56123: NOT
56124: PUSH
56125: LD_VAR 0 13
56129: PUSH
56130: LD_VAR 0 6
56134: IN
56135: NOT
56136: OR
56137: IFFALSE 56444
// begin if dep then
56139: LD_VAR 0 17
56143: IFFALSE 56279
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56145: LD_ADDR_VAR 0 16
56149: PUSH
56150: LD_VAR 0 17
56154: PUSH
56155: LD_INT 1
56157: ARRAY
56158: PPUSH
56159: CALL_OW 250
56163: PPUSH
56164: LD_VAR 0 17
56168: PUSH
56169: LD_INT 1
56171: ARRAY
56172: PPUSH
56173: CALL_OW 254
56177: PPUSH
56178: LD_INT 5
56180: PPUSH
56181: CALL_OW 272
56185: PUSH
56186: LD_VAR 0 17
56190: PUSH
56191: LD_INT 1
56193: ARRAY
56194: PPUSH
56195: CALL_OW 251
56199: PPUSH
56200: LD_VAR 0 17
56204: PUSH
56205: LD_INT 1
56207: ARRAY
56208: PPUSH
56209: CALL_OW 254
56213: PPUSH
56214: LD_INT 5
56216: PPUSH
56217: CALL_OW 273
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56226: LD_VAR 0 16
56230: PUSH
56231: LD_INT 1
56233: ARRAY
56234: PPUSH
56235: LD_VAR 0 16
56239: PUSH
56240: LD_INT 2
56242: ARRAY
56243: PPUSH
56244: CALL_OW 488
56248: IFFALSE 56279
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56250: LD_VAR 0 13
56254: PPUSH
56255: LD_VAR 0 16
56259: PUSH
56260: LD_INT 1
56262: ARRAY
56263: PPUSH
56264: LD_VAR 0 16
56268: PUSH
56269: LD_INT 2
56271: ARRAY
56272: PPUSH
56273: CALL_OW 111
// continue ;
56277: GO 55769
// end ; end ; r := GetDir ( tmp ) ;
56279: LD_ADDR_VAR 0 15
56283: PUSH
56284: LD_VAR 0 13
56288: PPUSH
56289: CALL_OW 254
56293: ST_TO_ADDR
// if r = 5 then
56294: LD_VAR 0 15
56298: PUSH
56299: LD_INT 5
56301: EQUAL
56302: IFFALSE 56312
// r := 0 ;
56304: LD_ADDR_VAR 0 15
56308: PUSH
56309: LD_INT 0
56311: ST_TO_ADDR
// for j = r to 5 do
56312: LD_ADDR_VAR 0 10
56316: PUSH
56317: DOUBLE
56318: LD_VAR 0 15
56322: DEC
56323: ST_TO_ADDR
56324: LD_INT 5
56326: PUSH
56327: FOR_TO
56328: IFFALSE 56442
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56330: LD_ADDR_VAR 0 11
56334: PUSH
56335: LD_VAR 0 13
56339: PPUSH
56340: CALL_OW 250
56344: PPUSH
56345: LD_VAR 0 10
56349: PPUSH
56350: LD_INT 2
56352: PPUSH
56353: CALL_OW 272
56357: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56358: LD_ADDR_VAR 0 12
56362: PUSH
56363: LD_VAR 0 13
56367: PPUSH
56368: CALL_OW 251
56372: PPUSH
56373: LD_VAR 0 10
56377: PPUSH
56378: LD_INT 2
56380: PPUSH
56381: CALL_OW 273
56385: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56386: LD_VAR 0 11
56390: PPUSH
56391: LD_VAR 0 12
56395: PPUSH
56396: CALL_OW 488
56400: PUSH
56401: LD_VAR 0 11
56405: PPUSH
56406: LD_VAR 0 12
56410: PPUSH
56411: CALL_OW 428
56415: NOT
56416: AND
56417: IFFALSE 56440
// begin ComMoveXY ( tmp , _x , _y ) ;
56419: LD_VAR 0 13
56423: PPUSH
56424: LD_VAR 0 11
56428: PPUSH
56429: LD_VAR 0 12
56433: PPUSH
56434: CALL_OW 111
// break ;
56438: GO 56442
// end ; end ;
56440: GO 56327
56442: POP
56443: POP
// end ; end ;
56444: GO 55769
56446: POP
56447: POP
// end ;
56448: LD_VAR 0 8
56452: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56453: LD_INT 0
56455: PPUSH
// result := true ;
56456: LD_ADDR_VAR 0 3
56460: PUSH
56461: LD_INT 1
56463: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56464: LD_VAR 0 2
56468: PUSH
56469: LD_INT 24
56471: DOUBLE
56472: EQUAL
56473: IFTRUE 56483
56475: LD_INT 33
56477: DOUBLE
56478: EQUAL
56479: IFTRUE 56483
56481: GO 56508
56483: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
56484: LD_ADDR_VAR 0 3
56488: PUSH
56489: LD_INT 32
56491: PPUSH
56492: LD_VAR 0 1
56496: PPUSH
56497: CALL_OW 321
56501: PUSH
56502: LD_INT 2
56504: EQUAL
56505: ST_TO_ADDR
56506: GO 56824
56508: LD_INT 20
56510: DOUBLE
56511: EQUAL
56512: IFTRUE 56516
56514: GO 56541
56516: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
56517: LD_ADDR_VAR 0 3
56521: PUSH
56522: LD_INT 6
56524: PPUSH
56525: LD_VAR 0 1
56529: PPUSH
56530: CALL_OW 321
56534: PUSH
56535: LD_INT 2
56537: EQUAL
56538: ST_TO_ADDR
56539: GO 56824
56541: LD_INT 22
56543: DOUBLE
56544: EQUAL
56545: IFTRUE 56555
56547: LD_INT 36
56549: DOUBLE
56550: EQUAL
56551: IFTRUE 56555
56553: GO 56580
56555: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
56556: LD_ADDR_VAR 0 3
56560: PUSH
56561: LD_INT 15
56563: PPUSH
56564: LD_VAR 0 1
56568: PPUSH
56569: CALL_OW 321
56573: PUSH
56574: LD_INT 2
56576: EQUAL
56577: ST_TO_ADDR
56578: GO 56824
56580: LD_INT 30
56582: DOUBLE
56583: EQUAL
56584: IFTRUE 56588
56586: GO 56613
56588: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56589: LD_ADDR_VAR 0 3
56593: PUSH
56594: LD_INT 20
56596: PPUSH
56597: LD_VAR 0 1
56601: PPUSH
56602: CALL_OW 321
56606: PUSH
56607: LD_INT 2
56609: EQUAL
56610: ST_TO_ADDR
56611: GO 56824
56613: LD_INT 28
56615: DOUBLE
56616: EQUAL
56617: IFTRUE 56627
56619: LD_INT 21
56621: DOUBLE
56622: EQUAL
56623: IFTRUE 56627
56625: GO 56652
56627: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56628: LD_ADDR_VAR 0 3
56632: PUSH
56633: LD_INT 21
56635: PPUSH
56636: LD_VAR 0 1
56640: PPUSH
56641: CALL_OW 321
56645: PUSH
56646: LD_INT 2
56648: EQUAL
56649: ST_TO_ADDR
56650: GO 56824
56652: LD_INT 16
56654: DOUBLE
56655: EQUAL
56656: IFTRUE 56660
56658: GO 56685
56660: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56661: LD_ADDR_VAR 0 3
56665: PUSH
56666: LD_INT 84
56668: PPUSH
56669: LD_VAR 0 1
56673: PPUSH
56674: CALL_OW 321
56678: PUSH
56679: LD_INT 2
56681: EQUAL
56682: ST_TO_ADDR
56683: GO 56824
56685: LD_INT 19
56687: DOUBLE
56688: EQUAL
56689: IFTRUE 56699
56691: LD_INT 23
56693: DOUBLE
56694: EQUAL
56695: IFTRUE 56699
56697: GO 56724
56699: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56700: LD_ADDR_VAR 0 3
56704: PUSH
56705: LD_INT 83
56707: PPUSH
56708: LD_VAR 0 1
56712: PPUSH
56713: CALL_OW 321
56717: PUSH
56718: LD_INT 2
56720: EQUAL
56721: ST_TO_ADDR
56722: GO 56824
56724: LD_INT 17
56726: DOUBLE
56727: EQUAL
56728: IFTRUE 56732
56730: GO 56757
56732: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56733: LD_ADDR_VAR 0 3
56737: PUSH
56738: LD_INT 39
56740: PPUSH
56741: LD_VAR 0 1
56745: PPUSH
56746: CALL_OW 321
56750: PUSH
56751: LD_INT 2
56753: EQUAL
56754: ST_TO_ADDR
56755: GO 56824
56757: LD_INT 18
56759: DOUBLE
56760: EQUAL
56761: IFTRUE 56765
56763: GO 56790
56765: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56766: LD_ADDR_VAR 0 3
56770: PUSH
56771: LD_INT 40
56773: PPUSH
56774: LD_VAR 0 1
56778: PPUSH
56779: CALL_OW 321
56783: PUSH
56784: LD_INT 2
56786: EQUAL
56787: ST_TO_ADDR
56788: GO 56824
56790: LD_INT 27
56792: DOUBLE
56793: EQUAL
56794: IFTRUE 56798
56796: GO 56823
56798: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56799: LD_ADDR_VAR 0 3
56803: PUSH
56804: LD_INT 35
56806: PPUSH
56807: LD_VAR 0 1
56811: PPUSH
56812: CALL_OW 321
56816: PUSH
56817: LD_INT 2
56819: EQUAL
56820: ST_TO_ADDR
56821: GO 56824
56823: POP
// end ;
56824: LD_VAR 0 3
56828: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56829: LD_INT 0
56831: PPUSH
56832: PPUSH
56833: PPUSH
56834: PPUSH
56835: PPUSH
56836: PPUSH
56837: PPUSH
56838: PPUSH
56839: PPUSH
56840: PPUSH
56841: PPUSH
// result := false ;
56842: LD_ADDR_VAR 0 6
56846: PUSH
56847: LD_INT 0
56849: ST_TO_ADDR
// if btype = b_depot then
56850: LD_VAR 0 2
56854: PUSH
56855: LD_INT 0
56857: EQUAL
56858: IFFALSE 56870
// begin result := true ;
56860: LD_ADDR_VAR 0 6
56864: PUSH
56865: LD_INT 1
56867: ST_TO_ADDR
// exit ;
56868: GO 57696
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56870: LD_VAR 0 1
56874: NOT
56875: PUSH
56876: LD_VAR 0 1
56880: PPUSH
56881: CALL_OW 266
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: IN
56896: NOT
56897: OR
56898: PUSH
56899: LD_VAR 0 2
56903: NOT
56904: OR
56905: PUSH
56906: LD_VAR 0 5
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 3
56922: PUSH
56923: LD_INT 4
56925: PUSH
56926: LD_INT 5
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: IN
56937: NOT
56938: OR
56939: PUSH
56940: LD_VAR 0 3
56944: PPUSH
56945: LD_VAR 0 4
56949: PPUSH
56950: CALL_OW 488
56954: NOT
56955: OR
56956: IFFALSE 56960
// exit ;
56958: GO 57696
// side := GetSide ( depot ) ;
56960: LD_ADDR_VAR 0 9
56964: PUSH
56965: LD_VAR 0 1
56969: PPUSH
56970: CALL_OW 255
56974: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56975: LD_VAR 0 9
56979: PPUSH
56980: LD_VAR 0 2
56984: PPUSH
56985: CALL 56453 0 2
56989: NOT
56990: IFFALSE 56994
// exit ;
56992: GO 57696
// pom := GetBase ( depot ) ;
56994: LD_ADDR_VAR 0 10
56998: PUSH
56999: LD_VAR 0 1
57003: PPUSH
57004: CALL_OW 274
57008: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57009: LD_ADDR_VAR 0 11
57013: PUSH
57014: LD_VAR 0 2
57018: PPUSH
57019: LD_VAR 0 1
57023: PPUSH
57024: CALL_OW 248
57028: PPUSH
57029: CALL_OW 450
57033: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57034: LD_VAR 0 10
57038: PPUSH
57039: LD_INT 1
57041: PPUSH
57042: CALL_OW 275
57046: PUSH
57047: LD_VAR 0 11
57051: PUSH
57052: LD_INT 1
57054: ARRAY
57055: GREATEREQUAL
57056: PUSH
57057: LD_VAR 0 10
57061: PPUSH
57062: LD_INT 2
57064: PPUSH
57065: CALL_OW 275
57069: PUSH
57070: LD_VAR 0 11
57074: PUSH
57075: LD_INT 2
57077: ARRAY
57078: GREATEREQUAL
57079: AND
57080: PUSH
57081: LD_VAR 0 10
57085: PPUSH
57086: LD_INT 3
57088: PPUSH
57089: CALL_OW 275
57093: PUSH
57094: LD_VAR 0 11
57098: PUSH
57099: LD_INT 3
57101: ARRAY
57102: GREATEREQUAL
57103: AND
57104: NOT
57105: IFFALSE 57109
// exit ;
57107: GO 57696
// if GetBType ( depot ) = b_depot then
57109: LD_VAR 0 1
57113: PPUSH
57114: CALL_OW 266
57118: PUSH
57119: LD_INT 0
57121: EQUAL
57122: IFFALSE 57134
// dist := 28 else
57124: LD_ADDR_VAR 0 14
57128: PUSH
57129: LD_INT 28
57131: ST_TO_ADDR
57132: GO 57142
// dist := 36 ;
57134: LD_ADDR_VAR 0 14
57138: PUSH
57139: LD_INT 36
57141: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57142: LD_VAR 0 1
57146: PPUSH
57147: LD_VAR 0 3
57151: PPUSH
57152: LD_VAR 0 4
57156: PPUSH
57157: CALL_OW 297
57161: PUSH
57162: LD_VAR 0 14
57166: GREATER
57167: IFFALSE 57171
// exit ;
57169: GO 57696
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57171: LD_ADDR_VAR 0 12
57175: PUSH
57176: LD_VAR 0 2
57180: PPUSH
57181: LD_VAR 0 3
57185: PPUSH
57186: LD_VAR 0 4
57190: PPUSH
57191: LD_VAR 0 5
57195: PPUSH
57196: LD_VAR 0 1
57200: PPUSH
57201: CALL_OW 248
57205: PPUSH
57206: LD_INT 0
57208: PPUSH
57209: CALL 57701 0 6
57213: ST_TO_ADDR
// if not hexes then
57214: LD_VAR 0 12
57218: NOT
57219: IFFALSE 57223
// exit ;
57221: GO 57696
// hex := GetHexInfo ( x , y ) ;
57223: LD_ADDR_VAR 0 15
57227: PUSH
57228: LD_VAR 0 3
57232: PPUSH
57233: LD_VAR 0 4
57237: PPUSH
57238: CALL_OW 546
57242: ST_TO_ADDR
// if hex [ 1 ] then
57243: LD_VAR 0 15
57247: PUSH
57248: LD_INT 1
57250: ARRAY
57251: IFFALSE 57255
// exit ;
57253: GO 57696
// height := hex [ 2 ] ;
57255: LD_ADDR_VAR 0 13
57259: PUSH
57260: LD_VAR 0 15
57264: PUSH
57265: LD_INT 2
57267: ARRAY
57268: ST_TO_ADDR
// for i = 1 to hexes do
57269: LD_ADDR_VAR 0 7
57273: PUSH
57274: DOUBLE
57275: LD_INT 1
57277: DEC
57278: ST_TO_ADDR
57279: LD_VAR 0 12
57283: PUSH
57284: FOR_TO
57285: IFFALSE 57615
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57287: LD_VAR 0 12
57291: PUSH
57292: LD_VAR 0 7
57296: ARRAY
57297: PUSH
57298: LD_INT 1
57300: ARRAY
57301: PPUSH
57302: LD_VAR 0 12
57306: PUSH
57307: LD_VAR 0 7
57311: ARRAY
57312: PUSH
57313: LD_INT 2
57315: ARRAY
57316: PPUSH
57317: CALL_OW 488
57321: NOT
57322: PUSH
57323: LD_VAR 0 12
57327: PUSH
57328: LD_VAR 0 7
57332: ARRAY
57333: PUSH
57334: LD_INT 1
57336: ARRAY
57337: PPUSH
57338: LD_VAR 0 12
57342: PUSH
57343: LD_VAR 0 7
57347: ARRAY
57348: PUSH
57349: LD_INT 2
57351: ARRAY
57352: PPUSH
57353: CALL_OW 428
57357: PUSH
57358: LD_INT 0
57360: GREATER
57361: OR
57362: PUSH
57363: LD_VAR 0 12
57367: PUSH
57368: LD_VAR 0 7
57372: ARRAY
57373: PUSH
57374: LD_INT 1
57376: ARRAY
57377: PPUSH
57378: LD_VAR 0 12
57382: PUSH
57383: LD_VAR 0 7
57387: ARRAY
57388: PUSH
57389: LD_INT 2
57391: ARRAY
57392: PPUSH
57393: CALL_OW 351
57397: OR
57398: IFFALSE 57404
// exit ;
57400: POP
57401: POP
57402: GO 57696
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57404: LD_ADDR_VAR 0 8
57408: PUSH
57409: LD_VAR 0 12
57413: PUSH
57414: LD_VAR 0 7
57418: ARRAY
57419: PUSH
57420: LD_INT 1
57422: ARRAY
57423: PPUSH
57424: LD_VAR 0 12
57428: PUSH
57429: LD_VAR 0 7
57433: ARRAY
57434: PUSH
57435: LD_INT 2
57437: ARRAY
57438: PPUSH
57439: CALL_OW 546
57443: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57444: LD_VAR 0 8
57448: PUSH
57449: LD_INT 1
57451: ARRAY
57452: PUSH
57453: LD_VAR 0 8
57457: PUSH
57458: LD_INT 2
57460: ARRAY
57461: PUSH
57462: LD_VAR 0 13
57466: PUSH
57467: LD_INT 2
57469: PLUS
57470: GREATER
57471: OR
57472: PUSH
57473: LD_VAR 0 8
57477: PUSH
57478: LD_INT 2
57480: ARRAY
57481: PUSH
57482: LD_VAR 0 13
57486: PUSH
57487: LD_INT 2
57489: MINUS
57490: LESS
57491: OR
57492: PUSH
57493: LD_VAR 0 8
57497: PUSH
57498: LD_INT 3
57500: ARRAY
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 8
57507: PUSH
57508: LD_INT 9
57510: PUSH
57511: LD_INT 10
57513: PUSH
57514: LD_INT 11
57516: PUSH
57517: LD_INT 12
57519: PUSH
57520: LD_INT 13
57522: PUSH
57523: LD_INT 16
57525: PUSH
57526: LD_INT 17
57528: PUSH
57529: LD_INT 18
57531: PUSH
57532: LD_INT 19
57534: PUSH
57535: LD_INT 20
57537: PUSH
57538: LD_INT 21
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: IN
57556: NOT
57557: OR
57558: PUSH
57559: LD_VAR 0 8
57563: PUSH
57564: LD_INT 5
57566: ARRAY
57567: NOT
57568: OR
57569: PUSH
57570: LD_VAR 0 8
57574: PUSH
57575: LD_INT 6
57577: ARRAY
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: LD_INT 7
57587: PUSH
57588: LD_INT 9
57590: PUSH
57591: LD_INT 10
57593: PUSH
57594: LD_INT 11
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: IN
57605: NOT
57606: OR
57607: IFFALSE 57613
// exit ;
57609: POP
57610: POP
57611: GO 57696
// end ;
57613: GO 57284
57615: POP
57616: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57617: LD_VAR 0 9
57621: PPUSH
57622: LD_VAR 0 3
57626: PPUSH
57627: LD_VAR 0 4
57631: PPUSH
57632: LD_INT 20
57634: PPUSH
57635: CALL 49619 0 4
57639: PUSH
57640: LD_INT 4
57642: ARRAY
57643: IFFALSE 57647
// exit ;
57645: GO 57696
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57647: LD_VAR 0 2
57651: PUSH
57652: LD_INT 29
57654: PUSH
57655: LD_INT 30
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: IN
57662: PUSH
57663: LD_VAR 0 3
57667: PPUSH
57668: LD_VAR 0 4
57672: PPUSH
57673: LD_VAR 0 9
57677: PPUSH
57678: CALL_OW 440
57682: NOT
57683: AND
57684: IFFALSE 57688
// exit ;
57686: GO 57696
// result := true ;
57688: LD_ADDR_VAR 0 6
57692: PUSH
57693: LD_INT 1
57695: ST_TO_ADDR
// end ;
57696: LD_VAR 0 6
57700: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57701: LD_INT 0
57703: PPUSH
57704: PPUSH
57705: PPUSH
57706: PPUSH
57707: PPUSH
57708: PPUSH
57709: PPUSH
57710: PPUSH
57711: PPUSH
57712: PPUSH
57713: PPUSH
57714: PPUSH
57715: PPUSH
57716: PPUSH
57717: PPUSH
57718: PPUSH
57719: PPUSH
57720: PPUSH
57721: PPUSH
57722: PPUSH
57723: PPUSH
57724: PPUSH
57725: PPUSH
57726: PPUSH
57727: PPUSH
57728: PPUSH
57729: PPUSH
57730: PPUSH
57731: PPUSH
57732: PPUSH
57733: PPUSH
57734: PPUSH
57735: PPUSH
57736: PPUSH
57737: PPUSH
57738: PPUSH
57739: PPUSH
57740: PPUSH
57741: PPUSH
57742: PPUSH
57743: PPUSH
57744: PPUSH
57745: PPUSH
57746: PPUSH
57747: PPUSH
57748: PPUSH
57749: PPUSH
57750: PPUSH
57751: PPUSH
57752: PPUSH
57753: PPUSH
57754: PPUSH
57755: PPUSH
57756: PPUSH
57757: PPUSH
57758: PPUSH
57759: PPUSH
57760: PPUSH
// result = [ ] ;
57761: LD_ADDR_VAR 0 7
57765: PUSH
57766: EMPTY
57767: ST_TO_ADDR
// temp_list = [ ] ;
57768: LD_ADDR_VAR 0 9
57772: PUSH
57773: EMPTY
57774: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57775: LD_VAR 0 4
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: LD_INT 4
57794: PUSH
57795: LD_INT 5
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: IN
57806: NOT
57807: PUSH
57808: LD_VAR 0 1
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: IN
57823: PUSH
57824: LD_VAR 0 5
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: LD_INT 3
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: LIST
57842: IN
57843: NOT
57844: AND
57845: OR
57846: IFFALSE 57850
// exit ;
57848: GO 76241
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57850: LD_VAR 0 1
57854: PUSH
57855: LD_INT 6
57857: PUSH
57858: LD_INT 7
57860: PUSH
57861: LD_INT 8
57863: PUSH
57864: LD_INT 13
57866: PUSH
57867: LD_INT 12
57869: PUSH
57870: LD_INT 15
57872: PUSH
57873: LD_INT 11
57875: PUSH
57876: LD_INT 14
57878: PUSH
57879: LD_INT 10
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: IN
57893: IFFALSE 57903
// btype = b_lab ;
57895: LD_ADDR_VAR 0 1
57899: PUSH
57900: LD_INT 6
57902: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57903: LD_VAR 0 6
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: IN
57922: NOT
57923: PUSH
57924: LD_VAR 0 1
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: LD_INT 2
57937: PUSH
57938: LD_INT 3
57940: PUSH
57941: LD_INT 6
57943: PUSH
57944: LD_INT 36
57946: PUSH
57947: LD_INT 4
57949: PUSH
57950: LD_INT 5
57952: PUSH
57953: LD_INT 31
57955: PUSH
57956: LD_INT 32
57958: PUSH
57959: LD_INT 33
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: IN
57975: NOT
57976: PUSH
57977: LD_VAR 0 6
57981: PUSH
57982: LD_INT 1
57984: EQUAL
57985: AND
57986: OR
57987: PUSH
57988: LD_VAR 0 1
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 3
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: IN
58003: NOT
58004: PUSH
58005: LD_VAR 0 6
58009: PUSH
58010: LD_INT 2
58012: EQUAL
58013: AND
58014: OR
58015: IFFALSE 58025
// mode = 0 ;
58017: LD_ADDR_VAR 0 6
58021: PUSH
58022: LD_INT 0
58024: ST_TO_ADDR
// case mode of 0 :
58025: LD_VAR 0 6
58029: PUSH
58030: LD_INT 0
58032: DOUBLE
58033: EQUAL
58034: IFTRUE 58038
58036: GO 69491
58038: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58039: LD_ADDR_VAR 0 11
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58232: LD_ADDR_VAR 0 12
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: NEG
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: NEG
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 2
58378: NEG
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 3
58389: NEG
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58428: LD_ADDR_VAR 0 13
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: NEG
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: LD_INT 3
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 3
58587: NEG
58588: PUSH
58589: LD_INT 2
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: LD_INT 3
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58627: LD_ADDR_VAR 0 14
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 3
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 3
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58823: LD_ADDR_VAR 0 15
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 2
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 3
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59016: LD_ADDR_VAR 0 16
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: LD_INT 2
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 3
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 3
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59209: LD_ADDR_VAR 0 17
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 2
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 2
59385: NEG
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 2
59408: NEG
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59439: LD_ADDR_VAR 0 18
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 1
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 2
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 2
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 2
59638: NEG
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59669: LD_ADDR_VAR 0 19
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 2
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 2
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: NEG
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: NEG
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59899: LD_ADDR_VAR 0 20
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: NEG
59981: PUSH
59982: LD_INT 2
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60129: LD_ADDR_VAR 0 21
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 2
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: LD_INT 2
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60359: LD_ADDR_VAR 0 22
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 2
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: LD_INT 2
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 1
60524: NEG
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: LD_INT 1
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60589: LD_ADDR_VAR 0 23
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: LD_INT 1
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 2
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: LD_INT 2
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: LD_INT 1
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: LD_INT 3
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: LD_INT 3
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: LD_INT 2
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60869: LD_ADDR_VAR 0 24
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: LD_INT 2
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: LD_INT 2
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 2
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 2
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 2
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: LD_INT 2
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 2
61045: NEG
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 2
61056: NEG
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 2
61068: NEG
61069: PUSH
61070: LD_INT 2
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 2
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 3
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 3
61112: PUSH
61113: LD_INT 2
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61145: LD_ADDR_VAR 0 25
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: LD_INT 1
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 2
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 2
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 2
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: PUSH
61281: LD_INT 2
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: LD_INT 2
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: LD_INT 2
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 2
61321: NEG
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 3
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 2
61376: PUSH
61377: LD_INT 3
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: LD_INT 3
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61419: LD_ADDR_VAR 0 26
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: LD_INT 2
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 2
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: LD_INT 0
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: LD_INT 2
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: LD_INT 2
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61695: LD_ADDR_VAR 0 27
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 1
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: LD_INT 1
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 1
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 2
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: LD_INT 2
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: LD_INT 2
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: LD_INT 2
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 2
61871: NEG
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: NEG
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 2
61894: NEG
61895: PUSH
61896: LD_INT 2
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 3
61928: NEG
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 3
61940: NEG
61941: PUSH
61942: LD_INT 2
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61975: LD_ADDR_VAR 0 28
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: LD_INT 2
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 2
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 2
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 2
62110: PUSH
62111: LD_INT 2
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 0
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 2
62151: NEG
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: NEG
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 2
62174: NEG
62175: PUSH
62176: LD_INT 2
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: LD_INT 3
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: LD_INT 3
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 3
62210: NEG
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 3
62222: NEG
62223: PUSH
62224: LD_INT 2
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62257: LD_ADDR_VAR 0 29
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: LD_INT 2
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: LD_INT 1
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 2
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 2
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: LD_INT 2
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 2
62423: NEG
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 2
62435: NEG
62436: PUSH
62437: LD_INT 2
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 2
62447: NEG
62448: PUSH
62449: LD_INT 3
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: LD_INT 1
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: LD_INT 3
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 3
62501: NEG
62502: PUSH
62503: LD_INT 2
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62536: LD_ADDR_VAR 0 30
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: NEG
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: LD_INT 2
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 2
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 2
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: LD_INT 2
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: NEG
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: LD_INT 1
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: LD_INT 2
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 3
62748: PUSH
62749: LD_INT 2
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: LD_INT 3
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 2
62768: NEG
62769: PUSH
62770: LD_INT 1
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 3
62779: NEG
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62814: LD_ADDR_VAR 0 31
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: LD_INT 1
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: NEG
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 2
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 1
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 2
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 2
62928: PUSH
62929: LD_INT 1
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 1
62968: NEG
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: NEG
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 2
62991: NEG
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: LD_INT 3
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 2
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 3
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: LD_INT 3
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 3
63057: NEG
63058: PUSH
63059: LD_INT 2
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63092: LD_ADDR_VAR 0 32
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: NEG
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: LD_INT 2
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: LD_INT 2
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 2
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: LD_INT 3
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 1
63293: PUSH
63294: LD_INT 2
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 3
63304: PUSH
63305: LD_INT 2
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 2
63314: PUSH
63315: LD_INT 3
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 2
63324: NEG
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 3
63335: NEG
63336: PUSH
63337: LD_INT 1
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63370: LD_ADDR_VAR 0 33
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: NEG
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: LD_INT 1
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 1
63451: NEG
63452: PUSH
63453: LD_INT 2
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: LD_INT 1
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: LD_INT 2
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: LD_INT 2
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: LD_INT 1
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 2
63525: NEG
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 2
63536: NEG
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: LD_INT 2
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 2
63560: NEG
63561: PUSH
63562: LD_INT 3
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 3
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: LD_INT 3
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: LD_INT 2
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 3
63614: NEG
63615: PUSH
63616: LD_INT 2
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63649: LD_ADDR_VAR 0 34
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: LD_INT 2
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 2
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: LD_INT 1
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 2
63774: PUSH
63775: LD_INT 2
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 2
63805: NEG
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 2
63816: NEG
63817: PUSH
63818: LD_INT 1
63820: NEG
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 2
63828: NEG
63829: PUSH
63830: LD_INT 2
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 1
63840: NEG
63841: PUSH
63842: LD_INT 3
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 3
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: LD_INT 3
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 3
63894: NEG
63895: PUSH
63896: LD_INT 1
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63929: LD_ADDR_VAR 0 35
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: LD_INT 0
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 1
63967: PUSH
63968: LD_INT 1
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 2
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 2
64020: NEG
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64041: LD_ADDR_VAR 0 36
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 0
64058: PUSH
64059: LD_INT 1
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 1
64099: NEG
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: PUSH
64124: LD_INT 2
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: LD_INT 2
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64153: LD_ADDR_VAR 0 37
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: LD_INT 0
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 1
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64265: LD_ADDR_VAR 0 38
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: LD_INT 0
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: LD_INT 1
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 1
64323: NEG
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 2
64356: NEG
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64377: LD_ADDR_VAR 0 39
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: LD_INT 1
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 0
64425: PUSH
64426: LD_INT 1
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: LD_INT 2
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: LD_INT 2
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64489: LD_ADDR_VAR 0 40
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: LD_INT 1
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 1
64581: NEG
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64601: LD_ADDR_VAR 0 41
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: LD_INT 1
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 1
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: NEG
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: LD_INT 1
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: LD_INT 0
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 2
64715: PUSH
64716: LD_INT 1
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 2
64725: PUSH
64726: LD_INT 2
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: LD_INT 2
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 2
64756: NEG
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 2
64767: NEG
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 2
64779: NEG
64780: PUSH
64781: LD_INT 2
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 2
64791: NEG
64792: PUSH
64793: LD_INT 3
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 2
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 3
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 3
64834: PUSH
64835: LD_INT 2
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 3
64844: PUSH
64845: LD_INT 3
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 2
64854: PUSH
64855: LD_INT 3
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 3
64875: NEG
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 3
64886: NEG
64887: PUSH
64888: LD_INT 1
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 3
64898: NEG
64899: PUSH
64900: LD_INT 2
64902: NEG
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 3
64910: NEG
64911: PUSH
64912: LD_INT 3
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64951: LD_ADDR_VAR 0 42
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: LD_INT 1
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: LD_INT 2
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: LD_INT 2
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 2
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 2
65076: PUSH
65077: LD_INT 2
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 1
65086: PUSH
65087: LD_INT 2
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 1
65106: NEG
65107: PUSH
65108: LD_INT 1
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 2
65117: NEG
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 2
65129: NEG
65130: PUSH
65131: LD_INT 2
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 2
65141: NEG
65142: PUSH
65143: LD_INT 3
65145: NEG
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: LD_INT 3
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: LD_INT 3
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 1
65176: PUSH
65177: LD_INT 2
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 3
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 3
65197: PUSH
65198: LD_INT 3
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 2
65207: PUSH
65208: LD_INT 3
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: LD_INT 3
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: LD_INT 3
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 1
65237: NEG
65238: PUSH
65239: LD_INT 2
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 3
65248: NEG
65249: PUSH
65250: LD_INT 2
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 3
65260: NEG
65261: PUSH
65262: LD_INT 3
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65301: LD_ADDR_VAR 0 43
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: LD_INT 1
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: LD_INT 1
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: NEG
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: LD_INT 2
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 2
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 2
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 1
65436: PUSH
65437: LD_INT 2
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: LD_INT 2
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: LD_INT 1
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 2
65467: NEG
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 2
65478: NEG
65479: PUSH
65480: LD_INT 1
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: LD_INT 3
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: LD_INT 3
65505: NEG
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 1
65513: PUSH
65514: LD_INT 2
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 2
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 3
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 3
65545: PUSH
65546: LD_INT 1
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: LD_INT 3
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: LD_INT 3
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: LD_INT 2
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 2
65586: NEG
65587: PUSH
65588: LD_INT 1
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 3
65597: NEG
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 3
65608: NEG
65609: PUSH
65610: LD_INT 1
65612: NEG
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65649: LD_ADDR_VAR 0 44
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 0
65666: PUSH
65667: LD_INT 1
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 1
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 1
65707: NEG
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: LD_INT 1
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 1
65730: NEG
65731: PUSH
65732: LD_INT 2
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 2
65753: PUSH
65754: LD_INT 0
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 2
65763: PUSH
65764: LD_INT 1
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 2
65773: PUSH
65774: LD_INT 2
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 1
65783: PUSH
65784: LD_INT 2
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 1
65793: NEG
65794: PUSH
65795: LD_INT 1
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 2
65804: NEG
65805: PUSH
65806: LD_INT 0
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: LD_INT 1
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 2
65827: NEG
65828: PUSH
65829: LD_INT 2
65831: NEG
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 2
65839: NEG
65840: PUSH
65841: LD_INT 3
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 2
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 3
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 3
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 3
65882: PUSH
65883: LD_INT 2
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 3
65892: PUSH
65893: LD_INT 3
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 2
65902: PUSH
65903: LD_INT 3
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 2
65912: NEG
65913: PUSH
65914: LD_INT 1
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 3
65923: NEG
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 3
65934: NEG
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 3
65946: NEG
65947: PUSH
65948: LD_INT 2
65950: NEG
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 3
65958: NEG
65959: PUSH
65960: LD_INT 3
65962: NEG
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65999: LD_ADDR_VAR 0 45
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: LD_INT 1
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: LD_INT 1
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: LD_INT 1
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 1
66057: NEG
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 1
66068: NEG
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 1
66080: NEG
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: LD_INT 2
66095: NEG
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 1
66103: PUSH
66104: LD_INT 1
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 2
66114: PUSH
66115: LD_INT 1
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 2
66124: PUSH
66125: LD_INT 2
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 1
66134: PUSH
66135: LD_INT 2
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: LD_INT 2
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 1
66154: NEG
66155: PUSH
66156: LD_INT 1
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 2
66165: NEG
66166: PUSH
66167: LD_INT 1
66169: NEG
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 2
66177: NEG
66178: PUSH
66179: LD_INT 2
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 2
66189: NEG
66190: PUSH
66191: LD_INT 3
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: NEG
66202: PUSH
66203: LD_INT 3
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 0
66213: PUSH
66214: LD_INT 3
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 1
66224: PUSH
66225: LD_INT 2
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 3
66235: PUSH
66236: LD_INT 2
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 3
66245: PUSH
66246: LD_INT 3
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 2
66255: PUSH
66256: LD_INT 3
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 1
66265: PUSH
66266: LD_INT 3
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: LD_INT 3
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: PUSH
66287: LD_INT 2
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 3
66296: NEG
66297: PUSH
66298: LD_INT 2
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 3
66308: NEG
66309: PUSH
66310: LD_INT 3
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66349: LD_ADDR_VAR 0 46
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: LD_INT 1
66369: NEG
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 1
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 1
66387: PUSH
66388: LD_INT 1
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: LD_INT 1
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 1
66418: NEG
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 1
66430: NEG
66431: PUSH
66432: LD_INT 2
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: LD_INT 2
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 2
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 1
66484: PUSH
66485: LD_INT 2
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: LD_INT 2
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 1
66504: NEG
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 2
66515: NEG
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 2
66526: NEG
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 1
66538: NEG
66539: PUSH
66540: LD_INT 3
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 0
66550: PUSH
66551: LD_INT 3
66553: NEG
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 1
66561: PUSH
66562: LD_INT 2
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: LD_INT 1
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 3
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 3
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: LD_INT 3
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 0
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 1
66623: NEG
66624: PUSH
66625: LD_INT 2
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 2
66634: NEG
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 3
66645: NEG
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 3
66656: NEG
66657: PUSH
66658: LD_INT 1
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66697: LD_ADDR_VAR 0 47
66701: PUSH
66702: LD_INT 0
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 1
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 1
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: LD_INT 1
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 1
66755: NEG
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 1
66766: NEG
66767: PUSH
66768: LD_INT 1
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: NEG
66779: PUSH
66780: LD_INT 2
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 0
66790: PUSH
66791: LD_INT 2
66793: NEG
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 1
66801: PUSH
66802: LD_INT 1
66804: NEG
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 2
66812: NEG
66813: PUSH
66814: LD_INT 1
66816: NEG
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 2
66824: NEG
66825: PUSH
66826: LD_INT 2
66828: NEG
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66848: LD_ADDR_VAR 0 48
66852: PUSH
66853: LD_INT 0
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: LD_INT 1
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 1
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 0
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 1
66906: NEG
66907: PUSH
66908: LD_INT 0
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 1
66917: NEG
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 1
66929: NEG
66930: PUSH
66931: LD_INT 2
66933: NEG
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 0
66941: PUSH
66942: LD_INT 2
66944: NEG
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: LD_INT 1
66955: NEG
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 2
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 2
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66995: LD_ADDR_VAR 0 49
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: LD_INT 0
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: LD_INT 1
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 1
67023: PUSH
67024: LD_INT 0
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 1
67033: PUSH
67034: LD_INT 1
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: LD_INT 1
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: LD_INT 0
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 1
67064: NEG
67065: PUSH
67066: LD_INT 1
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 1
67076: PUSH
67077: LD_INT 1
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 2
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 2
67097: PUSH
67098: LD_INT 1
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 2
67107: PUSH
67108: LD_INT 2
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: LD_INT 2
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67139: LD_ADDR_VAR 0 50
67143: PUSH
67144: LD_INT 0
67146: PUSH
67147: LD_INT 0
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 0
67156: PUSH
67157: LD_INT 1
67159: NEG
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 1
67167: PUSH
67168: LD_INT 0
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: LD_INT 1
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 0
67187: PUSH
67188: LD_INT 1
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 1
67197: NEG
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 1
67208: NEG
67209: PUSH
67210: LD_INT 1
67212: NEG
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 2
67220: PUSH
67221: LD_INT 1
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 2
67230: PUSH
67231: LD_INT 2
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 1
67240: PUSH
67241: LD_INT 2
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: LD_INT 2
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 1
67260: NEG
67261: PUSH
67262: LD_INT 1
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67283: LD_ADDR_VAR 0 51
67287: PUSH
67288: LD_INT 0
67290: PUSH
67291: LD_INT 0
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 0
67300: PUSH
67301: LD_INT 1
67303: NEG
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 1
67311: PUSH
67312: LD_INT 0
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: LD_INT 1
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 0
67331: PUSH
67332: LD_INT 1
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 1
67341: NEG
67342: PUSH
67343: LD_INT 0
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 1
67352: NEG
67353: PUSH
67354: LD_INT 1
67356: NEG
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 1
67364: PUSH
67365: LD_INT 2
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: LD_INT 2
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: NEG
67385: PUSH
67386: LD_INT 1
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 2
67395: NEG
67396: PUSH
67397: LD_INT 0
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 2
67406: NEG
67407: PUSH
67408: LD_INT 1
67410: NEG
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67430: LD_ADDR_VAR 0 52
67434: PUSH
67435: LD_INT 0
67437: PUSH
67438: LD_INT 0
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: LD_INT 1
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: LD_INT 0
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: LD_INT 1
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: LD_INT 1
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 1
67488: NEG
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 1
67499: NEG
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 1
67511: NEG
67512: PUSH
67513: LD_INT 2
67515: NEG
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 1
67523: NEG
67524: PUSH
67525: LD_INT 1
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 2
67534: NEG
67535: PUSH
67536: LD_INT 0
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 2
67545: NEG
67546: PUSH
67547: LD_INT 1
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 2
67557: NEG
67558: PUSH
67559: LD_INT 2
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67581: LD_ADDR_VAR 0 53
67585: PUSH
67586: LD_INT 0
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 0
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 1
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 1
67619: PUSH
67620: LD_INT 1
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: LD_INT 1
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 1
67639: NEG
67640: PUSH
67641: LD_INT 0
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 1
67650: NEG
67651: PUSH
67652: LD_INT 1
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 1
67662: NEG
67663: PUSH
67664: LD_INT 2
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 0
67674: PUSH
67675: LD_INT 2
67677: NEG
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 1
67685: PUSH
67686: LD_INT 1
67688: NEG
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 2
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 2
67706: PUSH
67707: LD_INT 1
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 2
67716: PUSH
67717: LD_INT 2
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 1
67726: PUSH
67727: LD_INT 2
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 0
67736: PUSH
67737: LD_INT 2
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 1
67746: NEG
67747: PUSH
67748: LD_INT 1
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 2
67757: NEG
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 2
67768: NEG
67769: PUSH
67770: LD_INT 1
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 2
67780: NEG
67781: PUSH
67782: LD_INT 2
67784: NEG
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67811: LD_ADDR_VAR 0 54
67815: PUSH
67816: LD_INT 0
67818: PUSH
67819: LD_INT 0
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 0
67828: PUSH
67829: LD_INT 1
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 1
67849: PUSH
67850: LD_INT 1
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: LD_INT 1
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 1
67869: NEG
67870: PUSH
67871: LD_INT 0
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: LD_INT 1
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 1
67892: NEG
67893: PUSH
67894: LD_INT 2
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 0
67904: PUSH
67905: LD_INT 2
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 1
67915: PUSH
67916: LD_INT 1
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 2
67926: PUSH
67927: LD_INT 0
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 2
67936: PUSH
67937: LD_INT 1
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 2
67946: PUSH
67947: LD_INT 2
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 1
67956: PUSH
67957: LD_INT 2
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 0
67966: PUSH
67967: LD_INT 2
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 1
67976: NEG
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 2
67987: NEG
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 2
67998: NEG
67999: PUSH
68000: LD_INT 1
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 2
68010: NEG
68011: PUSH
68012: LD_INT 2
68014: NEG
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68041: LD_ADDR_VAR 0 55
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 0
68058: PUSH
68059: LD_INT 1
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 1
68079: PUSH
68080: LD_INT 1
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: LD_INT 1
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 1
68099: NEG
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 1
68110: NEG
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 1
68122: NEG
68123: PUSH
68124: LD_INT 2
68126: NEG
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: LD_INT 2
68137: NEG
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 1
68145: PUSH
68146: LD_INT 1
68148: NEG
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 2
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 2
68166: PUSH
68167: LD_INT 1
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 2
68176: PUSH
68177: LD_INT 2
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 1
68186: PUSH
68187: LD_INT 2
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 0
68196: PUSH
68197: LD_INT 2
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 1
68206: NEG
68207: PUSH
68208: LD_INT 1
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 2
68217: NEG
68218: PUSH
68219: LD_INT 0
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 2
68228: NEG
68229: PUSH
68230: LD_INT 1
68232: NEG
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 2
68240: NEG
68241: PUSH
68242: LD_INT 2
68244: NEG
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68271: LD_ADDR_VAR 0 56
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: LD_INT 0
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: LD_INT 1
68291: NEG
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 1
68299: PUSH
68300: LD_INT 0
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 1
68309: PUSH
68310: LD_INT 1
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: LD_INT 1
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 1
68329: NEG
68330: PUSH
68331: LD_INT 0
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 1
68340: NEG
68341: PUSH
68342: LD_INT 1
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 1
68352: NEG
68353: PUSH
68354: LD_INT 2
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: LD_INT 2
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 1
68375: PUSH
68376: LD_INT 1
68378: NEG
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 2
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 2
68396: PUSH
68397: LD_INT 1
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 2
68406: PUSH
68407: LD_INT 2
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: LD_INT 2
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: LD_INT 2
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 1
68436: NEG
68437: PUSH
68438: LD_INT 1
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 2
68447: NEG
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 2
68458: NEG
68459: PUSH
68460: LD_INT 1
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 2
68470: NEG
68471: PUSH
68472: LD_INT 2
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68501: LD_ADDR_VAR 0 57
68505: PUSH
68506: LD_INT 0
68508: PUSH
68509: LD_INT 0
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 0
68518: PUSH
68519: LD_INT 1
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 1
68529: PUSH
68530: LD_INT 0
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 1
68539: PUSH
68540: LD_INT 1
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 0
68549: PUSH
68550: LD_INT 1
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 1
68559: NEG
68560: PUSH
68561: LD_INT 0
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 1
68570: NEG
68571: PUSH
68572: LD_INT 1
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 1
68582: NEG
68583: PUSH
68584: LD_INT 2
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 0
68594: PUSH
68595: LD_INT 2
68597: NEG
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 1
68605: PUSH
68606: LD_INT 1
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 2
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 2
68626: PUSH
68627: LD_INT 1
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 2
68636: PUSH
68637: LD_INT 2
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 1
68646: PUSH
68647: LD_INT 2
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 0
68656: PUSH
68657: LD_INT 2
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 1
68666: NEG
68667: PUSH
68668: LD_INT 1
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 2
68677: NEG
68678: PUSH
68679: LD_INT 0
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 2
68688: NEG
68689: PUSH
68690: LD_INT 1
68692: NEG
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 2
68700: NEG
68701: PUSH
68702: LD_INT 2
68704: NEG
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68731: LD_ADDR_VAR 0 58
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: LD_INT 0
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 0
68748: PUSH
68749: LD_INT 1
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 1
68769: PUSH
68770: LD_INT 1
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 1
68789: NEG
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 1
68800: NEG
68801: PUSH
68802: LD_INT 1
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 1
68812: NEG
68813: PUSH
68814: LD_INT 2
68816: NEG
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 0
68824: PUSH
68825: LD_INT 2
68827: NEG
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 1
68835: PUSH
68836: LD_INT 1
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 2
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 2
68856: PUSH
68857: LD_INT 1
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 2
68866: PUSH
68867: LD_INT 2
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 1
68876: PUSH
68877: LD_INT 2
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 0
68886: PUSH
68887: LD_INT 2
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 1
68896: NEG
68897: PUSH
68898: LD_INT 1
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 2
68907: NEG
68908: PUSH
68909: LD_INT 0
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 2
68918: NEG
68919: PUSH
68920: LD_INT 1
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 2
68930: NEG
68931: PUSH
68932: LD_INT 2
68934: NEG
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68961: LD_ADDR_VAR 0 59
68965: PUSH
68966: LD_INT 0
68968: PUSH
68969: LD_INT 0
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 0
68978: PUSH
68979: LD_INT 1
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 1
68989: PUSH
68990: LD_INT 0
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 1
68999: PUSH
69000: LD_INT 1
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: LD_INT 1
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 1
69019: NEG
69020: PUSH
69021: LD_INT 0
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 1
69030: NEG
69031: PUSH
69032: LD_INT 1
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69049: LD_ADDR_VAR 0 60
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: LD_INT 0
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: LD_INT 1
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 1
69077: PUSH
69078: LD_INT 0
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 1
69087: PUSH
69088: LD_INT 1
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 0
69097: PUSH
69098: LD_INT 1
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 1
69107: NEG
69108: PUSH
69109: LD_INT 0
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 1
69118: NEG
69119: PUSH
69120: LD_INT 1
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69137: LD_ADDR_VAR 0 61
69141: PUSH
69142: LD_INT 0
69144: PUSH
69145: LD_INT 0
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: LD_INT 1
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 1
69165: PUSH
69166: LD_INT 0
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 1
69175: PUSH
69176: LD_INT 1
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: LD_INT 1
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 1
69195: NEG
69196: PUSH
69197: LD_INT 0
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 1
69206: NEG
69207: PUSH
69208: LD_INT 1
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69225: LD_ADDR_VAR 0 62
69229: PUSH
69230: LD_INT 0
69232: PUSH
69233: LD_INT 0
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 0
69242: PUSH
69243: LD_INT 1
69245: NEG
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 1
69253: PUSH
69254: LD_INT 0
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 1
69263: PUSH
69264: LD_INT 1
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 0
69273: PUSH
69274: LD_INT 1
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 1
69283: NEG
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 1
69294: NEG
69295: PUSH
69296: LD_INT 1
69298: NEG
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69313: LD_ADDR_VAR 0 63
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: LD_INT 0
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: LD_INT 0
69330: PUSH
69331: LD_INT 1
69333: NEG
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 1
69341: PUSH
69342: LD_INT 0
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 1
69351: PUSH
69352: LD_INT 1
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 0
69361: PUSH
69362: LD_INT 1
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 1
69371: NEG
69372: PUSH
69373: LD_INT 0
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 1
69382: NEG
69383: PUSH
69384: LD_INT 1
69386: NEG
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69401: LD_ADDR_VAR 0 64
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 0
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 0
69418: PUSH
69419: LD_INT 1
69421: NEG
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 1
69429: PUSH
69430: LD_INT 0
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 1
69439: PUSH
69440: LD_INT 1
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 0
69449: PUSH
69450: LD_INT 1
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 1
69459: NEG
69460: PUSH
69461: LD_INT 0
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 1
69470: NEG
69471: PUSH
69472: LD_INT 1
69474: NEG
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: ST_TO_ADDR
// end ; 1 :
69489: GO 75386
69491: LD_INT 1
69493: DOUBLE
69494: EQUAL
69495: IFTRUE 69499
69497: GO 72122
69499: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69500: LD_ADDR_VAR 0 11
69504: PUSH
69505: LD_INT 1
69507: NEG
69508: PUSH
69509: LD_INT 3
69511: NEG
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 0
69519: PUSH
69520: LD_INT 3
69522: NEG
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: LD_INT 2
69533: NEG
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: LIST
69543: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69544: LD_ADDR_VAR 0 12
69548: PUSH
69549: LD_INT 2
69551: PUSH
69552: LD_INT 1
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 3
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 3
69572: PUSH
69573: LD_INT 1
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: LIST
69584: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69585: LD_ADDR_VAR 0 13
69589: PUSH
69590: LD_INT 3
69592: PUSH
69593: LD_INT 2
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 3
69602: PUSH
69603: LD_INT 3
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 2
69612: PUSH
69613: LD_INT 3
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: LIST
69624: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69625: LD_ADDR_VAR 0 14
69629: PUSH
69630: LD_INT 1
69632: PUSH
69633: LD_INT 3
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 0
69642: PUSH
69643: LD_INT 3
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 1
69652: NEG
69653: PUSH
69654: LD_INT 2
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: LIST
69665: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69666: LD_ADDR_VAR 0 15
69670: PUSH
69671: LD_INT 2
69673: NEG
69674: PUSH
69675: LD_INT 1
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 3
69684: NEG
69685: PUSH
69686: LD_INT 0
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 3
69695: NEG
69696: PUSH
69697: LD_INT 1
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: LIST
69709: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69710: LD_ADDR_VAR 0 16
69714: PUSH
69715: LD_INT 2
69717: NEG
69718: PUSH
69719: LD_INT 3
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 3
69729: NEG
69730: PUSH
69731: LD_INT 2
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 3
69741: NEG
69742: PUSH
69743: LD_INT 3
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: LIST
69755: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69756: LD_ADDR_VAR 0 17
69760: PUSH
69761: LD_INT 1
69763: NEG
69764: PUSH
69765: LD_INT 3
69767: NEG
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 0
69775: PUSH
69776: LD_INT 3
69778: NEG
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 1
69786: PUSH
69787: LD_INT 2
69789: NEG
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: LIST
69799: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69800: LD_ADDR_VAR 0 18
69804: PUSH
69805: LD_INT 2
69807: PUSH
69808: LD_INT 1
69810: NEG
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 3
69818: PUSH
69819: LD_INT 0
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 3
69828: PUSH
69829: LD_INT 1
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: LIST
69840: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69841: LD_ADDR_VAR 0 19
69845: PUSH
69846: LD_INT 3
69848: PUSH
69849: LD_INT 2
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 3
69858: PUSH
69859: LD_INT 3
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 2
69868: PUSH
69869: LD_INT 3
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: LIST
69880: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69881: LD_ADDR_VAR 0 20
69885: PUSH
69886: LD_INT 1
69888: PUSH
69889: LD_INT 3
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 0
69898: PUSH
69899: LD_INT 3
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 1
69908: NEG
69909: PUSH
69910: LD_INT 2
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: LIST
69921: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69922: LD_ADDR_VAR 0 21
69926: PUSH
69927: LD_INT 2
69929: NEG
69930: PUSH
69931: LD_INT 1
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 3
69940: NEG
69941: PUSH
69942: LD_INT 0
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 3
69951: NEG
69952: PUSH
69953: LD_INT 1
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: LIST
69965: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69966: LD_ADDR_VAR 0 22
69970: PUSH
69971: LD_INT 2
69973: NEG
69974: PUSH
69975: LD_INT 3
69977: NEG
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 3
69985: NEG
69986: PUSH
69987: LD_INT 2
69989: NEG
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 3
69997: NEG
69998: PUSH
69999: LD_INT 3
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: LIST
70011: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70012: LD_ADDR_VAR 0 23
70016: PUSH
70017: LD_INT 0
70019: PUSH
70020: LD_INT 3
70022: NEG
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 1
70030: NEG
70031: PUSH
70032: LD_INT 4
70034: NEG
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 1
70042: PUSH
70043: LD_INT 3
70045: NEG
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: LIST
70055: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70056: LD_ADDR_VAR 0 24
70060: PUSH
70061: LD_INT 3
70063: PUSH
70064: LD_INT 0
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 3
70073: PUSH
70074: LD_INT 1
70076: NEG
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 4
70084: PUSH
70085: LD_INT 1
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: LIST
70096: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70097: LD_ADDR_VAR 0 25
70101: PUSH
70102: LD_INT 3
70104: PUSH
70105: LD_INT 3
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 4
70114: PUSH
70115: LD_INT 3
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 3
70124: PUSH
70125: LD_INT 4
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: LIST
70136: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70137: LD_ADDR_VAR 0 26
70141: PUSH
70142: LD_INT 0
70144: PUSH
70145: LD_INT 3
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 1
70154: PUSH
70155: LD_INT 4
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 1
70164: NEG
70165: PUSH
70166: LD_INT 3
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: LIST
70177: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70178: LD_ADDR_VAR 0 27
70182: PUSH
70183: LD_INT 3
70185: NEG
70186: PUSH
70187: LD_INT 0
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 3
70196: NEG
70197: PUSH
70198: LD_INT 1
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 4
70207: NEG
70208: PUSH
70209: LD_INT 1
70211: NEG
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: LIST
70221: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70222: LD_ADDR_VAR 0 28
70226: PUSH
70227: LD_INT 3
70229: NEG
70230: PUSH
70231: LD_INT 3
70233: NEG
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 3
70241: NEG
70242: PUSH
70243: LD_INT 4
70245: NEG
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 4
70253: NEG
70254: PUSH
70255: LD_INT 3
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: LIST
70267: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70268: LD_ADDR_VAR 0 29
70272: PUSH
70273: LD_INT 1
70275: NEG
70276: PUSH
70277: LD_INT 3
70279: NEG
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 0
70287: PUSH
70288: LD_INT 3
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 1
70298: PUSH
70299: LD_INT 2
70301: NEG
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 1
70309: NEG
70310: PUSH
70311: LD_INT 4
70313: NEG
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 0
70321: PUSH
70322: LD_INT 4
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 1
70332: PUSH
70333: LD_INT 3
70335: NEG
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 1
70343: NEG
70344: PUSH
70345: LD_INT 5
70347: NEG
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 0
70355: PUSH
70356: LD_INT 5
70358: NEG
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 1
70366: PUSH
70367: LD_INT 4
70369: NEG
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 1
70377: NEG
70378: PUSH
70379: LD_INT 6
70381: NEG
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 0
70389: PUSH
70390: LD_INT 6
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 1
70400: PUSH
70401: LD_INT 5
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70423: LD_ADDR_VAR 0 30
70427: PUSH
70428: LD_INT 2
70430: PUSH
70431: LD_INT 1
70433: NEG
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 3
70441: PUSH
70442: LD_INT 0
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 3
70451: PUSH
70452: LD_INT 1
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 3
70461: PUSH
70462: LD_INT 1
70464: NEG
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 4
70472: PUSH
70473: LD_INT 0
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 4
70482: PUSH
70483: LD_INT 1
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 4
70492: PUSH
70493: LD_INT 1
70495: NEG
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 5
70503: PUSH
70504: LD_INT 0
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 5
70513: PUSH
70514: LD_INT 1
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 5
70523: PUSH
70524: LD_INT 1
70526: NEG
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 6
70534: PUSH
70535: LD_INT 0
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 6
70544: PUSH
70545: LD_INT 1
70547: PUSH
70548: EMPTY
70549: LIST
70550: LIST
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70566: LD_ADDR_VAR 0 31
70570: PUSH
70571: LD_INT 3
70573: PUSH
70574: LD_INT 2
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 3
70583: PUSH
70584: LD_INT 3
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 2
70593: PUSH
70594: LD_INT 3
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 4
70603: PUSH
70604: LD_INT 3
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 4
70613: PUSH
70614: LD_INT 4
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 3
70623: PUSH
70624: LD_INT 4
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 5
70633: PUSH
70634: LD_INT 4
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 5
70643: PUSH
70644: LD_INT 5
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 4
70653: PUSH
70654: LD_INT 5
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 6
70663: PUSH
70664: LD_INT 5
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 6
70673: PUSH
70674: LD_INT 6
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 5
70683: PUSH
70684: LD_INT 6
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70705: LD_ADDR_VAR 0 32
70709: PUSH
70710: LD_INT 1
70712: PUSH
70713: LD_INT 3
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 0
70722: PUSH
70723: LD_INT 3
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 1
70732: NEG
70733: PUSH
70734: LD_INT 2
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 1
70743: PUSH
70744: LD_INT 4
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 0
70753: PUSH
70754: LD_INT 4
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: LD_INT 1
70763: NEG
70764: PUSH
70765: LD_INT 3
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 1
70774: PUSH
70775: LD_INT 5
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: LD_INT 5
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 1
70794: NEG
70795: PUSH
70796: LD_INT 4
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 1
70805: PUSH
70806: LD_INT 6
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 0
70815: PUSH
70816: LD_INT 6
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 1
70825: NEG
70826: PUSH
70827: LD_INT 5
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70848: LD_ADDR_VAR 0 33
70852: PUSH
70853: LD_INT 2
70855: NEG
70856: PUSH
70857: LD_INT 1
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 3
70866: NEG
70867: PUSH
70868: LD_INT 0
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 3
70877: NEG
70878: PUSH
70879: LD_INT 1
70881: NEG
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 3
70889: NEG
70890: PUSH
70891: LD_INT 1
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 4
70900: NEG
70901: PUSH
70902: LD_INT 0
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 4
70911: NEG
70912: PUSH
70913: LD_INT 1
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 4
70923: NEG
70924: PUSH
70925: LD_INT 1
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 5
70934: NEG
70935: PUSH
70936: LD_INT 0
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 5
70945: NEG
70946: PUSH
70947: LD_INT 1
70949: NEG
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 5
70957: NEG
70958: PUSH
70959: LD_INT 1
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 6
70968: NEG
70969: PUSH
70970: LD_INT 0
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 6
70979: NEG
70980: PUSH
70981: LD_INT 1
70983: NEG
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71003: LD_ADDR_VAR 0 34
71007: PUSH
71008: LD_INT 2
71010: NEG
71011: PUSH
71012: LD_INT 3
71014: NEG
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 3
71022: NEG
71023: PUSH
71024: LD_INT 2
71026: NEG
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 3
71034: NEG
71035: PUSH
71036: LD_INT 3
71038: NEG
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 3
71046: NEG
71047: PUSH
71048: LD_INT 4
71050: NEG
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 4
71058: NEG
71059: PUSH
71060: LD_INT 3
71062: NEG
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 4
71070: NEG
71071: PUSH
71072: LD_INT 4
71074: NEG
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 4
71082: NEG
71083: PUSH
71084: LD_INT 5
71086: NEG
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 5
71094: NEG
71095: PUSH
71096: LD_INT 4
71098: NEG
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 5
71106: NEG
71107: PUSH
71108: LD_INT 5
71110: NEG
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 5
71118: NEG
71119: PUSH
71120: LD_INT 6
71122: NEG
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 6
71130: NEG
71131: PUSH
71132: LD_INT 5
71134: NEG
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 6
71142: NEG
71143: PUSH
71144: LD_INT 6
71146: NEG
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71166: LD_ADDR_VAR 0 41
71170: PUSH
71171: LD_INT 0
71173: PUSH
71174: LD_INT 2
71176: NEG
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 1
71184: NEG
71185: PUSH
71186: LD_INT 3
71188: NEG
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 1
71196: PUSH
71197: LD_INT 2
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71210: LD_ADDR_VAR 0 42
71214: PUSH
71215: LD_INT 2
71217: PUSH
71218: LD_INT 0
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 2
71227: PUSH
71228: LD_INT 1
71230: NEG
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 3
71238: PUSH
71239: LD_INT 1
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: LIST
71250: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71251: LD_ADDR_VAR 0 43
71255: PUSH
71256: LD_INT 2
71258: PUSH
71259: LD_INT 2
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 3
71268: PUSH
71269: LD_INT 2
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 2
71278: PUSH
71279: LD_INT 3
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: LIST
71290: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71291: LD_ADDR_VAR 0 44
71295: PUSH
71296: LD_INT 0
71298: PUSH
71299: LD_INT 2
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 1
71308: PUSH
71309: LD_INT 3
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 1
71318: NEG
71319: PUSH
71320: LD_INT 2
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: LIST
71331: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71332: LD_ADDR_VAR 0 45
71336: PUSH
71337: LD_INT 2
71339: NEG
71340: PUSH
71341: LD_INT 0
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 2
71350: NEG
71351: PUSH
71352: LD_INT 1
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 3
71361: NEG
71362: PUSH
71363: LD_INT 1
71365: NEG
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: LIST
71375: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71376: LD_ADDR_VAR 0 46
71380: PUSH
71381: LD_INT 2
71383: NEG
71384: PUSH
71385: LD_INT 2
71387: NEG
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PUSH
71393: LD_INT 2
71395: NEG
71396: PUSH
71397: LD_INT 3
71399: NEG
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: LD_INT 3
71407: NEG
71408: PUSH
71409: LD_INT 2
71411: NEG
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: LIST
71421: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71422: LD_ADDR_VAR 0 47
71426: PUSH
71427: LD_INT 2
71429: NEG
71430: PUSH
71431: LD_INT 3
71433: NEG
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 1
71441: NEG
71442: PUSH
71443: LD_INT 3
71445: NEG
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71455: LD_ADDR_VAR 0 48
71459: PUSH
71460: LD_INT 1
71462: PUSH
71463: LD_INT 2
71465: NEG
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 2
71473: PUSH
71474: LD_INT 1
71476: NEG
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71486: LD_ADDR_VAR 0 49
71490: PUSH
71491: LD_INT 3
71493: PUSH
71494: LD_INT 1
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: LD_INT 3
71503: PUSH
71504: LD_INT 2
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71515: LD_ADDR_VAR 0 50
71519: PUSH
71520: LD_INT 2
71522: PUSH
71523: LD_INT 3
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: LD_INT 1
71532: PUSH
71533: LD_INT 3
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71544: LD_ADDR_VAR 0 51
71548: PUSH
71549: LD_INT 1
71551: NEG
71552: PUSH
71553: LD_INT 2
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 2
71562: NEG
71563: PUSH
71564: LD_INT 1
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71575: LD_ADDR_VAR 0 52
71579: PUSH
71580: LD_INT 3
71582: NEG
71583: PUSH
71584: LD_INT 1
71586: NEG
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: LD_INT 3
71594: NEG
71595: PUSH
71596: LD_INT 2
71598: NEG
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71608: LD_ADDR_VAR 0 53
71612: PUSH
71613: LD_INT 1
71615: NEG
71616: PUSH
71617: LD_INT 3
71619: NEG
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 0
71627: PUSH
71628: LD_INT 3
71630: NEG
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 1
71638: PUSH
71639: LD_INT 2
71641: NEG
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: LIST
71651: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71652: LD_ADDR_VAR 0 54
71656: PUSH
71657: LD_INT 2
71659: PUSH
71660: LD_INT 1
71662: NEG
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 3
71670: PUSH
71671: LD_INT 0
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 3
71680: PUSH
71681: LD_INT 1
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: LIST
71692: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71693: LD_ADDR_VAR 0 55
71697: PUSH
71698: LD_INT 3
71700: PUSH
71701: LD_INT 2
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 3
71710: PUSH
71711: LD_INT 3
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 2
71720: PUSH
71721: LD_INT 3
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: LIST
71732: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71733: LD_ADDR_VAR 0 56
71737: PUSH
71738: LD_INT 1
71740: PUSH
71741: LD_INT 3
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 0
71750: PUSH
71751: LD_INT 3
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 1
71760: NEG
71761: PUSH
71762: LD_INT 2
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: LIST
71773: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71774: LD_ADDR_VAR 0 57
71778: PUSH
71779: LD_INT 2
71781: NEG
71782: PUSH
71783: LD_INT 1
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 3
71792: NEG
71793: PUSH
71794: LD_INT 0
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 3
71803: NEG
71804: PUSH
71805: LD_INT 1
71807: NEG
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: LIST
71817: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71818: LD_ADDR_VAR 0 58
71822: PUSH
71823: LD_INT 2
71825: NEG
71826: PUSH
71827: LD_INT 3
71829: NEG
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 3
71837: NEG
71838: PUSH
71839: LD_INT 2
71841: NEG
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 3
71849: NEG
71850: PUSH
71851: LD_INT 3
71853: NEG
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: LIST
71863: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71864: LD_ADDR_VAR 0 59
71868: PUSH
71869: LD_INT 1
71871: NEG
71872: PUSH
71873: LD_INT 2
71875: NEG
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 0
71883: PUSH
71884: LD_INT 2
71886: NEG
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 1
71894: PUSH
71895: LD_INT 1
71897: NEG
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: LIST
71907: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71908: LD_ADDR_VAR 0 60
71912: PUSH
71913: LD_INT 1
71915: PUSH
71916: LD_INT 1
71918: NEG
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 2
71926: PUSH
71927: LD_INT 0
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PUSH
71934: LD_INT 2
71936: PUSH
71937: LD_INT 1
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: LIST
71948: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71949: LD_ADDR_VAR 0 61
71953: PUSH
71954: LD_INT 2
71956: PUSH
71957: LD_INT 1
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 2
71966: PUSH
71967: LD_INT 2
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 1
71976: PUSH
71977: LD_INT 2
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: LIST
71988: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71989: LD_ADDR_VAR 0 62
71993: PUSH
71994: LD_INT 1
71996: PUSH
71997: LD_INT 2
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 0
72006: PUSH
72007: LD_INT 2
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 1
72016: NEG
72017: PUSH
72018: LD_INT 1
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: LIST
72029: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72030: LD_ADDR_VAR 0 63
72034: PUSH
72035: LD_INT 1
72037: NEG
72038: PUSH
72039: LD_INT 1
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: LD_INT 2
72048: NEG
72049: PUSH
72050: LD_INT 0
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: LD_INT 2
72059: NEG
72060: PUSH
72061: LD_INT 1
72063: NEG
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: LIST
72073: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72074: LD_ADDR_VAR 0 64
72078: PUSH
72079: LD_INT 1
72081: NEG
72082: PUSH
72083: LD_INT 2
72085: NEG
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 2
72093: NEG
72094: PUSH
72095: LD_INT 1
72097: NEG
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: LD_INT 2
72105: NEG
72106: PUSH
72107: LD_INT 2
72109: NEG
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: LIST
72119: ST_TO_ADDR
// end ; 2 :
72120: GO 75386
72122: LD_INT 2
72124: DOUBLE
72125: EQUAL
72126: IFTRUE 72130
72128: GO 75385
72130: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72131: LD_ADDR_VAR 0 29
72135: PUSH
72136: LD_INT 4
72138: PUSH
72139: LD_INT 0
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 4
72148: PUSH
72149: LD_INT 1
72151: NEG
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: PUSH
72157: LD_INT 5
72159: PUSH
72160: LD_INT 0
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_INT 5
72169: PUSH
72170: LD_INT 1
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: PUSH
72177: LD_INT 4
72179: PUSH
72180: LD_INT 1
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 3
72189: PUSH
72190: LD_INT 0
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PUSH
72197: LD_INT 3
72199: PUSH
72200: LD_INT 1
72202: NEG
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 3
72210: PUSH
72211: LD_INT 2
72213: NEG
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 5
72221: PUSH
72222: LD_INT 2
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: PUSH
72229: LD_INT 3
72231: PUSH
72232: LD_INT 3
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 3
72241: PUSH
72242: LD_INT 2
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: LD_INT 4
72251: PUSH
72252: LD_INT 3
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: LD_INT 4
72261: PUSH
72262: LD_INT 4
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 3
72271: PUSH
72272: LD_INT 4
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 2
72281: PUSH
72282: LD_INT 3
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 2
72291: PUSH
72292: LD_INT 2
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 4
72301: PUSH
72302: LD_INT 2
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 2
72311: PUSH
72312: LD_INT 4
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 0
72321: PUSH
72322: LD_INT 4
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: LD_INT 0
72331: PUSH
72332: LD_INT 3
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 1
72341: PUSH
72342: LD_INT 4
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: LD_INT 1
72351: PUSH
72352: LD_INT 5
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: PUSH
72359: LD_INT 0
72361: PUSH
72362: LD_INT 5
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: PUSH
72369: LD_INT 1
72371: NEG
72372: PUSH
72373: LD_INT 4
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 1
72382: NEG
72383: PUSH
72384: LD_INT 3
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 2
72393: PUSH
72394: LD_INT 5
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 2
72403: NEG
72404: PUSH
72405: LD_INT 3
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 3
72414: NEG
72415: PUSH
72416: LD_INT 0
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 3
72425: NEG
72426: PUSH
72427: LD_INT 1
72429: NEG
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 2
72437: NEG
72438: PUSH
72439: LD_INT 0
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 2
72448: NEG
72449: PUSH
72450: LD_INT 1
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 3
72459: NEG
72460: PUSH
72461: LD_INT 1
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 4
72470: NEG
72471: PUSH
72472: LD_INT 0
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: PUSH
72479: LD_INT 4
72481: NEG
72482: PUSH
72483: LD_INT 1
72485: NEG
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 4
72493: NEG
72494: PUSH
72495: LD_INT 2
72497: NEG
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 2
72505: NEG
72506: PUSH
72507: LD_INT 2
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 4
72516: NEG
72517: PUSH
72518: LD_INT 4
72520: NEG
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 4
72528: NEG
72529: PUSH
72530: LD_INT 5
72532: NEG
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 3
72540: NEG
72541: PUSH
72542: LD_INT 4
72544: NEG
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 3
72552: NEG
72553: PUSH
72554: LD_INT 3
72556: NEG
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 4
72564: NEG
72565: PUSH
72566: LD_INT 3
72568: NEG
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: LD_INT 5
72576: NEG
72577: PUSH
72578: LD_INT 4
72580: NEG
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 5
72588: NEG
72589: PUSH
72590: LD_INT 5
72592: NEG
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 3
72600: NEG
72601: PUSH
72602: LD_INT 5
72604: NEG
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 5
72612: NEG
72613: PUSH
72614: LD_INT 3
72616: NEG
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72669: LD_ADDR_VAR 0 30
72673: PUSH
72674: LD_INT 4
72676: PUSH
72677: LD_INT 4
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 4
72686: PUSH
72687: LD_INT 3
72689: PUSH
72690: EMPTY
72691: LIST
72692: LIST
72693: PUSH
72694: LD_INT 5
72696: PUSH
72697: LD_INT 4
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: PUSH
72704: LD_INT 5
72706: PUSH
72707: LD_INT 5
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 4
72716: PUSH
72717: LD_INT 5
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 3
72726: PUSH
72727: LD_INT 4
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 3
72736: PUSH
72737: LD_INT 3
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 5
72746: PUSH
72747: LD_INT 3
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 3
72756: PUSH
72757: LD_INT 5
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 0
72766: PUSH
72767: LD_INT 3
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 0
72776: PUSH
72777: LD_INT 2
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 1
72786: PUSH
72787: LD_INT 3
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 1
72796: PUSH
72797: LD_INT 4
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: LD_INT 0
72806: PUSH
72807: LD_INT 4
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 1
72816: NEG
72817: PUSH
72818: LD_INT 3
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 1
72827: NEG
72828: PUSH
72829: LD_INT 2
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 2
72838: PUSH
72839: LD_INT 4
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 2
72848: NEG
72849: PUSH
72850: LD_INT 2
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: PUSH
72857: LD_INT 4
72859: NEG
72860: PUSH
72861: LD_INT 0
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 4
72870: NEG
72871: PUSH
72872: LD_INT 1
72874: NEG
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 3
72882: NEG
72883: PUSH
72884: LD_INT 0
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 3
72893: NEG
72894: PUSH
72895: LD_INT 1
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PUSH
72902: LD_INT 4
72904: NEG
72905: PUSH
72906: LD_INT 1
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 5
72915: NEG
72916: PUSH
72917: LD_INT 0
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 5
72926: NEG
72927: PUSH
72928: LD_INT 1
72930: NEG
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 5
72938: NEG
72939: PUSH
72940: LD_INT 2
72942: NEG
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 3
72950: NEG
72951: PUSH
72952: LD_INT 2
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 3
72961: NEG
72962: PUSH
72963: LD_INT 3
72965: NEG
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 3
72973: NEG
72974: PUSH
72975: LD_INT 4
72977: NEG
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 2
72985: NEG
72986: PUSH
72987: LD_INT 3
72989: NEG
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 2
72997: NEG
72998: PUSH
72999: LD_INT 2
73001: NEG
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 3
73009: NEG
73010: PUSH
73011: LD_INT 2
73013: NEG
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 4
73021: NEG
73022: PUSH
73023: LD_INT 3
73025: NEG
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 4
73033: NEG
73034: PUSH
73035: LD_INT 4
73037: NEG
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: LD_INT 2
73045: NEG
73046: PUSH
73047: LD_INT 4
73049: NEG
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: PUSH
73055: LD_INT 4
73057: NEG
73058: PUSH
73059: LD_INT 2
73061: NEG
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: PUSH
73067: LD_INT 0
73069: PUSH
73070: LD_INT 4
73072: NEG
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 0
73080: PUSH
73081: LD_INT 5
73083: NEG
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 1
73091: PUSH
73092: LD_INT 4
73094: NEG
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 1
73102: PUSH
73103: LD_INT 3
73105: NEG
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 0
73113: PUSH
73114: LD_INT 3
73116: NEG
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 1
73124: NEG
73125: PUSH
73126: LD_INT 4
73128: NEG
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 1
73136: NEG
73137: PUSH
73138: LD_INT 5
73140: NEG
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: LD_INT 2
73148: PUSH
73149: LD_INT 3
73151: NEG
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: PUSH
73157: LD_INT 2
73159: NEG
73160: PUSH
73161: LD_INT 5
73163: NEG
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PUSH
73169: EMPTY
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73216: LD_ADDR_VAR 0 31
73220: PUSH
73221: LD_INT 0
73223: PUSH
73224: LD_INT 4
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 0
73233: PUSH
73234: LD_INT 3
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 1
73243: PUSH
73244: LD_INT 4
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 1
73253: PUSH
73254: LD_INT 5
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: PUSH
73261: LD_INT 0
73263: PUSH
73264: LD_INT 5
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 1
73273: NEG
73274: PUSH
73275: LD_INT 4
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 1
73284: NEG
73285: PUSH
73286: LD_INT 3
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 2
73295: PUSH
73296: LD_INT 5
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: LD_INT 2
73305: NEG
73306: PUSH
73307: LD_INT 3
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: PUSH
73314: LD_INT 3
73316: NEG
73317: PUSH
73318: LD_INT 0
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: PUSH
73325: LD_INT 3
73327: NEG
73328: PUSH
73329: LD_INT 1
73331: NEG
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: PUSH
73337: LD_INT 2
73339: NEG
73340: PUSH
73341: LD_INT 0
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: PUSH
73348: LD_INT 2
73350: NEG
73351: PUSH
73352: LD_INT 1
73354: PUSH
73355: EMPTY
73356: LIST
73357: LIST
73358: PUSH
73359: LD_INT 3
73361: NEG
73362: PUSH
73363: LD_INT 1
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PUSH
73370: LD_INT 4
73372: NEG
73373: PUSH
73374: LD_INT 0
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 4
73383: NEG
73384: PUSH
73385: LD_INT 1
73387: NEG
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: PUSH
73393: LD_INT 4
73395: NEG
73396: PUSH
73397: LD_INT 2
73399: NEG
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PUSH
73405: LD_INT 2
73407: NEG
73408: PUSH
73409: LD_INT 2
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 4
73418: NEG
73419: PUSH
73420: LD_INT 4
73422: NEG
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 4
73430: NEG
73431: PUSH
73432: LD_INT 5
73434: NEG
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 3
73442: NEG
73443: PUSH
73444: LD_INT 4
73446: NEG
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_INT 3
73454: NEG
73455: PUSH
73456: LD_INT 3
73458: NEG
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 4
73466: NEG
73467: PUSH
73468: LD_INT 3
73470: NEG
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PUSH
73476: LD_INT 5
73478: NEG
73479: PUSH
73480: LD_INT 4
73482: NEG
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PUSH
73488: LD_INT 5
73490: NEG
73491: PUSH
73492: LD_INT 5
73494: NEG
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: PUSH
73500: LD_INT 3
73502: NEG
73503: PUSH
73504: LD_INT 5
73506: NEG
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: LD_INT 5
73514: NEG
73515: PUSH
73516: LD_INT 3
73518: NEG
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 0
73526: PUSH
73527: LD_INT 3
73529: NEG
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 0
73537: PUSH
73538: LD_INT 4
73540: NEG
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: LD_INT 1
73548: PUSH
73549: LD_INT 3
73551: NEG
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: PUSH
73557: LD_INT 1
73559: PUSH
73560: LD_INT 2
73562: NEG
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 0
73570: PUSH
73571: LD_INT 2
73573: NEG
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: PUSH
73579: LD_INT 1
73581: NEG
73582: PUSH
73583: LD_INT 3
73585: NEG
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: PUSH
73591: LD_INT 1
73593: NEG
73594: PUSH
73595: LD_INT 4
73597: NEG
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: PUSH
73603: LD_INT 2
73605: PUSH
73606: LD_INT 2
73608: NEG
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 2
73616: NEG
73617: PUSH
73618: LD_INT 4
73620: NEG
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: PUSH
73626: LD_INT 4
73628: PUSH
73629: LD_INT 0
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: PUSH
73636: LD_INT 4
73638: PUSH
73639: LD_INT 1
73641: NEG
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 5
73649: PUSH
73650: LD_INT 0
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: LD_INT 5
73659: PUSH
73660: LD_INT 1
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: PUSH
73667: LD_INT 4
73669: PUSH
73670: LD_INT 1
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 3
73679: PUSH
73680: LD_INT 0
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: LD_INT 3
73689: PUSH
73690: LD_INT 1
73692: NEG
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 3
73700: PUSH
73701: LD_INT 2
73703: NEG
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: PUSH
73709: LD_INT 5
73711: PUSH
73712: LD_INT 2
73714: PUSH
73715: EMPTY
73716: LIST
73717: LIST
73718: PUSH
73719: EMPTY
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: LIST
73765: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73766: LD_ADDR_VAR 0 32
73770: PUSH
73771: LD_INT 4
73773: NEG
73774: PUSH
73775: LD_INT 0
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: PUSH
73782: LD_INT 4
73784: NEG
73785: PUSH
73786: LD_INT 1
73788: NEG
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: PUSH
73794: LD_INT 3
73796: NEG
73797: PUSH
73798: LD_INT 0
73800: PUSH
73801: EMPTY
73802: LIST
73803: LIST
73804: PUSH
73805: LD_INT 3
73807: NEG
73808: PUSH
73809: LD_INT 1
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: LD_INT 4
73818: NEG
73819: PUSH
73820: LD_INT 1
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 5
73829: NEG
73830: PUSH
73831: LD_INT 0
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 5
73840: NEG
73841: PUSH
73842: LD_INT 1
73844: NEG
73845: PUSH
73846: EMPTY
73847: LIST
73848: LIST
73849: PUSH
73850: LD_INT 5
73852: NEG
73853: PUSH
73854: LD_INT 2
73856: NEG
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: PUSH
73862: LD_INT 3
73864: NEG
73865: PUSH
73866: LD_INT 2
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: PUSH
73873: LD_INT 3
73875: NEG
73876: PUSH
73877: LD_INT 3
73879: NEG
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: PUSH
73885: LD_INT 3
73887: NEG
73888: PUSH
73889: LD_INT 4
73891: NEG
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: LD_INT 2
73899: NEG
73900: PUSH
73901: LD_INT 3
73903: NEG
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: LD_INT 2
73911: NEG
73912: PUSH
73913: LD_INT 2
73915: NEG
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: PUSH
73921: LD_INT 3
73923: NEG
73924: PUSH
73925: LD_INT 2
73927: NEG
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: PUSH
73933: LD_INT 4
73935: NEG
73936: PUSH
73937: LD_INT 3
73939: NEG
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: PUSH
73945: LD_INT 4
73947: NEG
73948: PUSH
73949: LD_INT 4
73951: NEG
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: PUSH
73957: LD_INT 2
73959: NEG
73960: PUSH
73961: LD_INT 4
73963: NEG
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 4
73971: NEG
73972: PUSH
73973: LD_INT 2
73975: NEG
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: LD_INT 0
73983: PUSH
73984: LD_INT 4
73986: NEG
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 0
73994: PUSH
73995: LD_INT 5
73997: NEG
73998: PUSH
73999: EMPTY
74000: LIST
74001: LIST
74002: PUSH
74003: LD_INT 1
74005: PUSH
74006: LD_INT 4
74008: NEG
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: PUSH
74014: LD_INT 1
74016: PUSH
74017: LD_INT 3
74019: NEG
74020: PUSH
74021: EMPTY
74022: LIST
74023: LIST
74024: PUSH
74025: LD_INT 0
74027: PUSH
74028: LD_INT 3
74030: NEG
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PUSH
74036: LD_INT 1
74038: NEG
74039: PUSH
74040: LD_INT 4
74042: NEG
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: LD_INT 1
74050: NEG
74051: PUSH
74052: LD_INT 5
74054: NEG
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 2
74062: PUSH
74063: LD_INT 3
74065: NEG
74066: PUSH
74067: EMPTY
74068: LIST
74069: LIST
74070: PUSH
74071: LD_INT 2
74073: NEG
74074: PUSH
74075: LD_INT 5
74077: NEG
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: LD_INT 3
74085: PUSH
74086: LD_INT 0
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PUSH
74093: LD_INT 3
74095: PUSH
74096: LD_INT 1
74098: NEG
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: PUSH
74104: LD_INT 4
74106: PUSH
74107: LD_INT 0
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: PUSH
74114: LD_INT 4
74116: PUSH
74117: LD_INT 1
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PUSH
74124: LD_INT 3
74126: PUSH
74127: LD_INT 1
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: LD_INT 2
74136: PUSH
74137: LD_INT 0
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: PUSH
74144: LD_INT 2
74146: PUSH
74147: LD_INT 1
74149: NEG
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PUSH
74155: LD_INT 2
74157: PUSH
74158: LD_INT 2
74160: NEG
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 4
74168: PUSH
74169: LD_INT 2
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 4
74178: PUSH
74179: LD_INT 4
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: LD_INT 4
74188: PUSH
74189: LD_INT 3
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 5
74198: PUSH
74199: LD_INT 4
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 5
74208: PUSH
74209: LD_INT 5
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: LD_INT 4
74218: PUSH
74219: LD_INT 5
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: PUSH
74226: LD_INT 3
74228: PUSH
74229: LD_INT 4
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: LD_INT 3
74238: PUSH
74239: LD_INT 3
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 5
74248: PUSH
74249: LD_INT 3
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: PUSH
74256: LD_INT 3
74258: PUSH
74259: LD_INT 5
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74313: LD_ADDR_VAR 0 33
74317: PUSH
74318: LD_INT 4
74320: NEG
74321: PUSH
74322: LD_INT 4
74324: NEG
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: PUSH
74330: LD_INT 4
74332: NEG
74333: PUSH
74334: LD_INT 5
74336: NEG
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: PUSH
74342: LD_INT 3
74344: NEG
74345: PUSH
74346: LD_INT 4
74348: NEG
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: PUSH
74354: LD_INT 3
74356: NEG
74357: PUSH
74358: LD_INT 3
74360: NEG
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: PUSH
74366: LD_INT 4
74368: NEG
74369: PUSH
74370: LD_INT 3
74372: NEG
74373: PUSH
74374: EMPTY
74375: LIST
74376: LIST
74377: PUSH
74378: LD_INT 5
74380: NEG
74381: PUSH
74382: LD_INT 4
74384: NEG
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: PUSH
74390: LD_INT 5
74392: NEG
74393: PUSH
74394: LD_INT 5
74396: NEG
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: PUSH
74402: LD_INT 3
74404: NEG
74405: PUSH
74406: LD_INT 5
74408: NEG
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: PUSH
74414: LD_INT 5
74416: NEG
74417: PUSH
74418: LD_INT 3
74420: NEG
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: PUSH
74426: LD_INT 0
74428: PUSH
74429: LD_INT 3
74431: NEG
74432: PUSH
74433: EMPTY
74434: LIST
74435: LIST
74436: PUSH
74437: LD_INT 0
74439: PUSH
74440: LD_INT 4
74442: NEG
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: PUSH
74448: LD_INT 1
74450: PUSH
74451: LD_INT 3
74453: NEG
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: PUSH
74459: LD_INT 1
74461: PUSH
74462: LD_INT 2
74464: NEG
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: PUSH
74470: LD_INT 0
74472: PUSH
74473: LD_INT 2
74475: NEG
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: LD_INT 1
74483: NEG
74484: PUSH
74485: LD_INT 3
74487: NEG
74488: PUSH
74489: EMPTY
74490: LIST
74491: LIST
74492: PUSH
74493: LD_INT 1
74495: NEG
74496: PUSH
74497: LD_INT 4
74499: NEG
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_INT 2
74507: PUSH
74508: LD_INT 2
74510: NEG
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: PUSH
74516: LD_INT 2
74518: NEG
74519: PUSH
74520: LD_INT 4
74522: NEG
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: PUSH
74528: LD_INT 4
74530: PUSH
74531: LD_INT 0
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PUSH
74538: LD_INT 4
74540: PUSH
74541: LD_INT 1
74543: NEG
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PUSH
74549: LD_INT 5
74551: PUSH
74552: LD_INT 0
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: PUSH
74559: LD_INT 5
74561: PUSH
74562: LD_INT 1
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 4
74571: PUSH
74572: LD_INT 1
74574: PUSH
74575: EMPTY
74576: LIST
74577: LIST
74578: PUSH
74579: LD_INT 3
74581: PUSH
74582: LD_INT 0
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: PUSH
74589: LD_INT 3
74591: PUSH
74592: LD_INT 1
74594: NEG
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PUSH
74600: LD_INT 3
74602: PUSH
74603: LD_INT 2
74605: NEG
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PUSH
74611: LD_INT 5
74613: PUSH
74614: LD_INT 2
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: PUSH
74621: LD_INT 3
74623: PUSH
74624: LD_INT 3
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: PUSH
74631: LD_INT 3
74633: PUSH
74634: LD_INT 2
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PUSH
74641: LD_INT 4
74643: PUSH
74644: LD_INT 3
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 4
74653: PUSH
74654: LD_INT 4
74656: PUSH
74657: EMPTY
74658: LIST
74659: LIST
74660: PUSH
74661: LD_INT 3
74663: PUSH
74664: LD_INT 4
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: PUSH
74671: LD_INT 2
74673: PUSH
74674: LD_INT 3
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 2
74683: PUSH
74684: LD_INT 2
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: LD_INT 4
74693: PUSH
74694: LD_INT 2
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: PUSH
74701: LD_INT 2
74703: PUSH
74704: LD_INT 4
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 0
74713: PUSH
74714: LD_INT 4
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 0
74723: PUSH
74724: LD_INT 3
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: LD_INT 1
74733: PUSH
74734: LD_INT 4
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: PUSH
74741: LD_INT 1
74743: PUSH
74744: LD_INT 5
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: PUSH
74751: LD_INT 0
74753: PUSH
74754: LD_INT 5
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 1
74763: NEG
74764: PUSH
74765: LD_INT 4
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: PUSH
74772: LD_INT 1
74774: NEG
74775: PUSH
74776: LD_INT 3
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: PUSH
74783: LD_INT 2
74785: PUSH
74786: LD_INT 5
74788: PUSH
74789: EMPTY
74790: LIST
74791: LIST
74792: PUSH
74793: LD_INT 2
74795: NEG
74796: PUSH
74797: LD_INT 3
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: LIST
74827: LIST
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74851: LD_ADDR_VAR 0 34
74855: PUSH
74856: LD_INT 0
74858: PUSH
74859: LD_INT 4
74861: NEG
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: PUSH
74867: LD_INT 0
74869: PUSH
74870: LD_INT 5
74872: NEG
74873: PUSH
74874: EMPTY
74875: LIST
74876: LIST
74877: PUSH
74878: LD_INT 1
74880: PUSH
74881: LD_INT 4
74883: NEG
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: PUSH
74889: LD_INT 1
74891: PUSH
74892: LD_INT 3
74894: NEG
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: PUSH
74900: LD_INT 0
74902: PUSH
74903: LD_INT 3
74905: NEG
74906: PUSH
74907: EMPTY
74908: LIST
74909: LIST
74910: PUSH
74911: LD_INT 1
74913: NEG
74914: PUSH
74915: LD_INT 4
74917: NEG
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: PUSH
74923: LD_INT 1
74925: NEG
74926: PUSH
74927: LD_INT 5
74929: NEG
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: PUSH
74935: LD_INT 2
74937: PUSH
74938: LD_INT 3
74940: NEG
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 2
74948: NEG
74949: PUSH
74950: LD_INT 5
74952: NEG
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: PUSH
74958: LD_INT 3
74960: PUSH
74961: LD_INT 0
74963: PUSH
74964: EMPTY
74965: LIST
74966: LIST
74967: PUSH
74968: LD_INT 3
74970: PUSH
74971: LD_INT 1
74973: NEG
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: PUSH
74979: LD_INT 4
74981: PUSH
74982: LD_INT 0
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: PUSH
74989: LD_INT 4
74991: PUSH
74992: LD_INT 1
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: PUSH
74999: LD_INT 3
75001: PUSH
75002: LD_INT 1
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: PUSH
75009: LD_INT 2
75011: PUSH
75012: LD_INT 0
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: PUSH
75019: LD_INT 2
75021: PUSH
75022: LD_INT 1
75024: NEG
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: PUSH
75030: LD_INT 2
75032: PUSH
75033: LD_INT 2
75035: NEG
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: PUSH
75041: LD_INT 4
75043: PUSH
75044: LD_INT 2
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: PUSH
75051: LD_INT 4
75053: PUSH
75054: LD_INT 4
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: PUSH
75061: LD_INT 4
75063: PUSH
75064: LD_INT 3
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: PUSH
75071: LD_INT 5
75073: PUSH
75074: LD_INT 4
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 5
75083: PUSH
75084: LD_INT 5
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: PUSH
75091: LD_INT 4
75093: PUSH
75094: LD_INT 5
75096: PUSH
75097: EMPTY
75098: LIST
75099: LIST
75100: PUSH
75101: LD_INT 3
75103: PUSH
75104: LD_INT 4
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: PUSH
75111: LD_INT 3
75113: PUSH
75114: LD_INT 3
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PUSH
75121: LD_INT 5
75123: PUSH
75124: LD_INT 3
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: LD_INT 3
75133: PUSH
75134: LD_INT 5
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: PUSH
75141: LD_INT 0
75143: PUSH
75144: LD_INT 3
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: PUSH
75151: LD_INT 0
75153: PUSH
75154: LD_INT 2
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: PUSH
75161: LD_INT 1
75163: PUSH
75164: LD_INT 3
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 1
75173: PUSH
75174: LD_INT 4
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: LD_INT 0
75183: PUSH
75184: LD_INT 4
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 1
75193: NEG
75194: PUSH
75195: LD_INT 3
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PUSH
75202: LD_INT 1
75204: NEG
75205: PUSH
75206: LD_INT 2
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: PUSH
75213: LD_INT 2
75215: PUSH
75216: LD_INT 4
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: PUSH
75223: LD_INT 2
75225: NEG
75226: PUSH
75227: LD_INT 2
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: PUSH
75234: LD_INT 4
75236: NEG
75237: PUSH
75238: LD_INT 0
75240: PUSH
75241: EMPTY
75242: LIST
75243: LIST
75244: PUSH
75245: LD_INT 4
75247: NEG
75248: PUSH
75249: LD_INT 1
75251: NEG
75252: PUSH
75253: EMPTY
75254: LIST
75255: LIST
75256: PUSH
75257: LD_INT 3
75259: NEG
75260: PUSH
75261: LD_INT 0
75263: PUSH
75264: EMPTY
75265: LIST
75266: LIST
75267: PUSH
75268: LD_INT 3
75270: NEG
75271: PUSH
75272: LD_INT 1
75274: PUSH
75275: EMPTY
75276: LIST
75277: LIST
75278: PUSH
75279: LD_INT 4
75281: NEG
75282: PUSH
75283: LD_INT 1
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: PUSH
75290: LD_INT 5
75292: NEG
75293: PUSH
75294: LD_INT 0
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: PUSH
75301: LD_INT 5
75303: NEG
75304: PUSH
75305: LD_INT 1
75307: NEG
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PUSH
75313: LD_INT 5
75315: NEG
75316: PUSH
75317: LD_INT 2
75319: NEG
75320: PUSH
75321: EMPTY
75322: LIST
75323: LIST
75324: PUSH
75325: LD_INT 3
75327: NEG
75328: PUSH
75329: LD_INT 2
75331: PUSH
75332: EMPTY
75333: LIST
75334: LIST
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: ST_TO_ADDR
// end ; end ;
75383: GO 75386
75385: POP
// case btype of b_depot , b_warehouse :
75386: LD_VAR 0 1
75390: PUSH
75391: LD_INT 0
75393: DOUBLE
75394: EQUAL
75395: IFTRUE 75405
75397: LD_INT 1
75399: DOUBLE
75400: EQUAL
75401: IFTRUE 75405
75403: GO 75606
75405: POP
// case nation of nation_american :
75406: LD_VAR 0 5
75410: PUSH
75411: LD_INT 1
75413: DOUBLE
75414: EQUAL
75415: IFTRUE 75419
75417: GO 75475
75419: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75420: LD_ADDR_VAR 0 9
75424: PUSH
75425: LD_VAR 0 11
75429: PUSH
75430: LD_VAR 0 12
75434: PUSH
75435: LD_VAR 0 13
75439: PUSH
75440: LD_VAR 0 14
75444: PUSH
75445: LD_VAR 0 15
75449: PUSH
75450: LD_VAR 0 16
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: PUSH
75463: LD_VAR 0 4
75467: PUSH
75468: LD_INT 1
75470: PLUS
75471: ARRAY
75472: ST_TO_ADDR
75473: GO 75604
75475: LD_INT 2
75477: DOUBLE
75478: EQUAL
75479: IFTRUE 75483
75481: GO 75539
75483: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75484: LD_ADDR_VAR 0 9
75488: PUSH
75489: LD_VAR 0 17
75493: PUSH
75494: LD_VAR 0 18
75498: PUSH
75499: LD_VAR 0 19
75503: PUSH
75504: LD_VAR 0 20
75508: PUSH
75509: LD_VAR 0 21
75513: PUSH
75514: LD_VAR 0 22
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: PUSH
75527: LD_VAR 0 4
75531: PUSH
75532: LD_INT 1
75534: PLUS
75535: ARRAY
75536: ST_TO_ADDR
75537: GO 75604
75539: LD_INT 3
75541: DOUBLE
75542: EQUAL
75543: IFTRUE 75547
75545: GO 75603
75547: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75548: LD_ADDR_VAR 0 9
75552: PUSH
75553: LD_VAR 0 23
75557: PUSH
75558: LD_VAR 0 24
75562: PUSH
75563: LD_VAR 0 25
75567: PUSH
75568: LD_VAR 0 26
75572: PUSH
75573: LD_VAR 0 27
75577: PUSH
75578: LD_VAR 0 28
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: PUSH
75591: LD_VAR 0 4
75595: PUSH
75596: LD_INT 1
75598: PLUS
75599: ARRAY
75600: ST_TO_ADDR
75601: GO 75604
75603: POP
75604: GO 76159
75606: LD_INT 2
75608: DOUBLE
75609: EQUAL
75610: IFTRUE 75620
75612: LD_INT 3
75614: DOUBLE
75615: EQUAL
75616: IFTRUE 75620
75618: GO 75676
75620: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75621: LD_ADDR_VAR 0 9
75625: PUSH
75626: LD_VAR 0 29
75630: PUSH
75631: LD_VAR 0 30
75635: PUSH
75636: LD_VAR 0 31
75640: PUSH
75641: LD_VAR 0 32
75645: PUSH
75646: LD_VAR 0 33
75650: PUSH
75651: LD_VAR 0 34
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: LIST
75662: LIST
75663: PUSH
75664: LD_VAR 0 4
75668: PUSH
75669: LD_INT 1
75671: PLUS
75672: ARRAY
75673: ST_TO_ADDR
75674: GO 76159
75676: LD_INT 16
75678: DOUBLE
75679: EQUAL
75680: IFTRUE 75738
75682: LD_INT 17
75684: DOUBLE
75685: EQUAL
75686: IFTRUE 75738
75688: LD_INT 18
75690: DOUBLE
75691: EQUAL
75692: IFTRUE 75738
75694: LD_INT 19
75696: DOUBLE
75697: EQUAL
75698: IFTRUE 75738
75700: LD_INT 22
75702: DOUBLE
75703: EQUAL
75704: IFTRUE 75738
75706: LD_INT 20
75708: DOUBLE
75709: EQUAL
75710: IFTRUE 75738
75712: LD_INT 21
75714: DOUBLE
75715: EQUAL
75716: IFTRUE 75738
75718: LD_INT 23
75720: DOUBLE
75721: EQUAL
75722: IFTRUE 75738
75724: LD_INT 24
75726: DOUBLE
75727: EQUAL
75728: IFTRUE 75738
75730: LD_INT 25
75732: DOUBLE
75733: EQUAL
75734: IFTRUE 75738
75736: GO 75794
75738: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75739: LD_ADDR_VAR 0 9
75743: PUSH
75744: LD_VAR 0 35
75748: PUSH
75749: LD_VAR 0 36
75753: PUSH
75754: LD_VAR 0 37
75758: PUSH
75759: LD_VAR 0 38
75763: PUSH
75764: LD_VAR 0 39
75768: PUSH
75769: LD_VAR 0 40
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: LIST
75778: LIST
75779: LIST
75780: LIST
75781: PUSH
75782: LD_VAR 0 4
75786: PUSH
75787: LD_INT 1
75789: PLUS
75790: ARRAY
75791: ST_TO_ADDR
75792: GO 76159
75794: LD_INT 6
75796: DOUBLE
75797: EQUAL
75798: IFTRUE 75850
75800: LD_INT 7
75802: DOUBLE
75803: EQUAL
75804: IFTRUE 75850
75806: LD_INT 8
75808: DOUBLE
75809: EQUAL
75810: IFTRUE 75850
75812: LD_INT 13
75814: DOUBLE
75815: EQUAL
75816: IFTRUE 75850
75818: LD_INT 12
75820: DOUBLE
75821: EQUAL
75822: IFTRUE 75850
75824: LD_INT 15
75826: DOUBLE
75827: EQUAL
75828: IFTRUE 75850
75830: LD_INT 11
75832: DOUBLE
75833: EQUAL
75834: IFTRUE 75850
75836: LD_INT 14
75838: DOUBLE
75839: EQUAL
75840: IFTRUE 75850
75842: LD_INT 10
75844: DOUBLE
75845: EQUAL
75846: IFTRUE 75850
75848: GO 75906
75850: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75851: LD_ADDR_VAR 0 9
75855: PUSH
75856: LD_VAR 0 41
75860: PUSH
75861: LD_VAR 0 42
75865: PUSH
75866: LD_VAR 0 43
75870: PUSH
75871: LD_VAR 0 44
75875: PUSH
75876: LD_VAR 0 45
75880: PUSH
75881: LD_VAR 0 46
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: LIST
75893: PUSH
75894: LD_VAR 0 4
75898: PUSH
75899: LD_INT 1
75901: PLUS
75902: ARRAY
75903: ST_TO_ADDR
75904: GO 76159
75906: LD_INT 36
75908: DOUBLE
75909: EQUAL
75910: IFTRUE 75914
75912: GO 75970
75914: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75915: LD_ADDR_VAR 0 9
75919: PUSH
75920: LD_VAR 0 47
75924: PUSH
75925: LD_VAR 0 48
75929: PUSH
75930: LD_VAR 0 49
75934: PUSH
75935: LD_VAR 0 50
75939: PUSH
75940: LD_VAR 0 51
75944: PUSH
75945: LD_VAR 0 52
75949: PUSH
75950: EMPTY
75951: LIST
75952: LIST
75953: LIST
75954: LIST
75955: LIST
75956: LIST
75957: PUSH
75958: LD_VAR 0 4
75962: PUSH
75963: LD_INT 1
75965: PLUS
75966: ARRAY
75967: ST_TO_ADDR
75968: GO 76159
75970: LD_INT 4
75972: DOUBLE
75973: EQUAL
75974: IFTRUE 75996
75976: LD_INT 5
75978: DOUBLE
75979: EQUAL
75980: IFTRUE 75996
75982: LD_INT 34
75984: DOUBLE
75985: EQUAL
75986: IFTRUE 75996
75988: LD_INT 37
75990: DOUBLE
75991: EQUAL
75992: IFTRUE 75996
75994: GO 76052
75996: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75997: LD_ADDR_VAR 0 9
76001: PUSH
76002: LD_VAR 0 53
76006: PUSH
76007: LD_VAR 0 54
76011: PUSH
76012: LD_VAR 0 55
76016: PUSH
76017: LD_VAR 0 56
76021: PUSH
76022: LD_VAR 0 57
76026: PUSH
76027: LD_VAR 0 58
76031: PUSH
76032: EMPTY
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: PUSH
76040: LD_VAR 0 4
76044: PUSH
76045: LD_INT 1
76047: PLUS
76048: ARRAY
76049: ST_TO_ADDR
76050: GO 76159
76052: LD_INT 31
76054: DOUBLE
76055: EQUAL
76056: IFTRUE 76102
76058: LD_INT 32
76060: DOUBLE
76061: EQUAL
76062: IFTRUE 76102
76064: LD_INT 33
76066: DOUBLE
76067: EQUAL
76068: IFTRUE 76102
76070: LD_INT 27
76072: DOUBLE
76073: EQUAL
76074: IFTRUE 76102
76076: LD_INT 26
76078: DOUBLE
76079: EQUAL
76080: IFTRUE 76102
76082: LD_INT 28
76084: DOUBLE
76085: EQUAL
76086: IFTRUE 76102
76088: LD_INT 29
76090: DOUBLE
76091: EQUAL
76092: IFTRUE 76102
76094: LD_INT 30
76096: DOUBLE
76097: EQUAL
76098: IFTRUE 76102
76100: GO 76158
76102: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76103: LD_ADDR_VAR 0 9
76107: PUSH
76108: LD_VAR 0 59
76112: PUSH
76113: LD_VAR 0 60
76117: PUSH
76118: LD_VAR 0 61
76122: PUSH
76123: LD_VAR 0 62
76127: PUSH
76128: LD_VAR 0 63
76132: PUSH
76133: LD_VAR 0 64
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: PUSH
76146: LD_VAR 0 4
76150: PUSH
76151: LD_INT 1
76153: PLUS
76154: ARRAY
76155: ST_TO_ADDR
76156: GO 76159
76158: POP
// temp_list2 = [ ] ;
76159: LD_ADDR_VAR 0 10
76163: PUSH
76164: EMPTY
76165: ST_TO_ADDR
// for i in temp_list do
76166: LD_ADDR_VAR 0 8
76170: PUSH
76171: LD_VAR 0 9
76175: PUSH
76176: FOR_IN
76177: IFFALSE 76229
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76179: LD_ADDR_VAR 0 10
76183: PUSH
76184: LD_VAR 0 10
76188: PUSH
76189: LD_VAR 0 8
76193: PUSH
76194: LD_INT 1
76196: ARRAY
76197: PUSH
76198: LD_VAR 0 2
76202: PLUS
76203: PUSH
76204: LD_VAR 0 8
76208: PUSH
76209: LD_INT 2
76211: ARRAY
76212: PUSH
76213: LD_VAR 0 3
76217: PLUS
76218: PUSH
76219: EMPTY
76220: LIST
76221: LIST
76222: PUSH
76223: EMPTY
76224: LIST
76225: ADD
76226: ST_TO_ADDR
76227: GO 76176
76229: POP
76230: POP
// result = temp_list2 ;
76231: LD_ADDR_VAR 0 7
76235: PUSH
76236: LD_VAR 0 10
76240: ST_TO_ADDR
// end ;
76241: LD_VAR 0 7
76245: RET
// export function EnemyInRange ( unit , dist ) ; begin
76246: LD_INT 0
76248: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76249: LD_ADDR_VAR 0 3
76253: PUSH
76254: LD_VAR 0 1
76258: PPUSH
76259: CALL_OW 255
76263: PPUSH
76264: LD_VAR 0 1
76268: PPUSH
76269: CALL_OW 250
76273: PPUSH
76274: LD_VAR 0 1
76278: PPUSH
76279: CALL_OW 251
76283: PPUSH
76284: LD_VAR 0 2
76288: PPUSH
76289: CALL 49619 0 4
76293: PUSH
76294: LD_INT 4
76296: ARRAY
76297: ST_TO_ADDR
// end ;
76298: LD_VAR 0 3
76302: RET
// export function PlayerSeeMe ( unit ) ; begin
76303: LD_INT 0
76305: PPUSH
// result := See ( your_side , unit ) ;
76306: LD_ADDR_VAR 0 2
76310: PUSH
76311: LD_OWVAR 2
76315: PPUSH
76316: LD_VAR 0 1
76320: PPUSH
76321: CALL_OW 292
76325: ST_TO_ADDR
// end ;
76326: LD_VAR 0 2
76330: RET
// export function ReverseDir ( unit ) ; begin
76331: LD_INT 0
76333: PPUSH
// if not unit then
76334: LD_VAR 0 1
76338: NOT
76339: IFFALSE 76343
// exit ;
76341: GO 76366
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76343: LD_ADDR_VAR 0 2
76347: PUSH
76348: LD_VAR 0 1
76352: PPUSH
76353: CALL_OW 254
76357: PUSH
76358: LD_INT 3
76360: PLUS
76361: PUSH
76362: LD_INT 6
76364: MOD
76365: ST_TO_ADDR
// end ;
76366: LD_VAR 0 2
76370: RET
// export function ReverseArray ( array ) ; var i ; begin
76371: LD_INT 0
76373: PPUSH
76374: PPUSH
// if not array then
76375: LD_VAR 0 1
76379: NOT
76380: IFFALSE 76384
// exit ;
76382: GO 76439
// result := [ ] ;
76384: LD_ADDR_VAR 0 2
76388: PUSH
76389: EMPTY
76390: ST_TO_ADDR
// for i := array downto 1 do
76391: LD_ADDR_VAR 0 3
76395: PUSH
76396: DOUBLE
76397: LD_VAR 0 1
76401: INC
76402: ST_TO_ADDR
76403: LD_INT 1
76405: PUSH
76406: FOR_DOWNTO
76407: IFFALSE 76437
// result := Join ( result , array [ i ] ) ;
76409: LD_ADDR_VAR 0 2
76413: PUSH
76414: LD_VAR 0 2
76418: PPUSH
76419: LD_VAR 0 1
76423: PUSH
76424: LD_VAR 0 3
76428: ARRAY
76429: PPUSH
76430: CALL 81104 0 2
76434: ST_TO_ADDR
76435: GO 76406
76437: POP
76438: POP
// end ;
76439: LD_VAR 0 2
76443: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76444: LD_INT 0
76446: PPUSH
76447: PPUSH
76448: PPUSH
76449: PPUSH
76450: PPUSH
76451: PPUSH
// if not unit or not hexes then
76452: LD_VAR 0 1
76456: NOT
76457: PUSH
76458: LD_VAR 0 2
76462: NOT
76463: OR
76464: IFFALSE 76468
// exit ;
76466: GO 76591
// dist := 9999 ;
76468: LD_ADDR_VAR 0 5
76472: PUSH
76473: LD_INT 9999
76475: ST_TO_ADDR
// for i = 1 to hexes do
76476: LD_ADDR_VAR 0 4
76480: PUSH
76481: DOUBLE
76482: LD_INT 1
76484: DEC
76485: ST_TO_ADDR
76486: LD_VAR 0 2
76490: PUSH
76491: FOR_TO
76492: IFFALSE 76579
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76494: LD_ADDR_VAR 0 6
76498: PUSH
76499: LD_VAR 0 1
76503: PPUSH
76504: LD_VAR 0 2
76508: PUSH
76509: LD_VAR 0 4
76513: ARRAY
76514: PUSH
76515: LD_INT 1
76517: ARRAY
76518: PPUSH
76519: LD_VAR 0 2
76523: PUSH
76524: LD_VAR 0 4
76528: ARRAY
76529: PUSH
76530: LD_INT 2
76532: ARRAY
76533: PPUSH
76534: CALL_OW 297
76538: ST_TO_ADDR
// if tdist < dist then
76539: LD_VAR 0 6
76543: PUSH
76544: LD_VAR 0 5
76548: LESS
76549: IFFALSE 76577
// begin hex := hexes [ i ] ;
76551: LD_ADDR_VAR 0 8
76555: PUSH
76556: LD_VAR 0 2
76560: PUSH
76561: LD_VAR 0 4
76565: ARRAY
76566: ST_TO_ADDR
// dist := tdist ;
76567: LD_ADDR_VAR 0 5
76571: PUSH
76572: LD_VAR 0 6
76576: ST_TO_ADDR
// end ; end ;
76577: GO 76491
76579: POP
76580: POP
// result := hex ;
76581: LD_ADDR_VAR 0 3
76585: PUSH
76586: LD_VAR 0 8
76590: ST_TO_ADDR
// end ;
76591: LD_VAR 0 3
76595: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76596: LD_INT 0
76598: PPUSH
76599: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76600: LD_VAR 0 1
76604: NOT
76605: PUSH
76606: LD_VAR 0 1
76610: PUSH
76611: LD_INT 21
76613: PUSH
76614: LD_INT 2
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: PUSH
76621: LD_INT 23
76623: PUSH
76624: LD_INT 2
76626: PUSH
76627: EMPTY
76628: LIST
76629: LIST
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: PPUSH
76635: CALL_OW 69
76639: IN
76640: NOT
76641: OR
76642: IFFALSE 76646
// exit ;
76644: GO 76693
// for i = 1 to 3 do
76646: LD_ADDR_VAR 0 3
76650: PUSH
76651: DOUBLE
76652: LD_INT 1
76654: DEC
76655: ST_TO_ADDR
76656: LD_INT 3
76658: PUSH
76659: FOR_TO
76660: IFFALSE 76691
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76662: LD_VAR 0 1
76666: PPUSH
76667: CALL_OW 250
76671: PPUSH
76672: LD_VAR 0 1
76676: PPUSH
76677: CALL_OW 251
76681: PPUSH
76682: LD_INT 1
76684: PPUSH
76685: CALL_OW 453
76689: GO 76659
76691: POP
76692: POP
// end ;
76693: LD_VAR 0 2
76697: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76698: LD_INT 0
76700: PPUSH
76701: PPUSH
76702: PPUSH
76703: PPUSH
76704: PPUSH
76705: PPUSH
// if not unit or not enemy_unit then
76706: LD_VAR 0 1
76710: NOT
76711: PUSH
76712: LD_VAR 0 2
76716: NOT
76717: OR
76718: IFFALSE 76722
// exit ;
76720: GO 77189
// if GetLives ( i ) < 250 then
76722: LD_VAR 0 4
76726: PPUSH
76727: CALL_OW 256
76731: PUSH
76732: LD_INT 250
76734: LESS
76735: IFFALSE 76748
// begin ComAutodestruct ( i ) ;
76737: LD_VAR 0 4
76741: PPUSH
76742: CALL 76596 0 1
// exit ;
76746: GO 77189
// end ; x := GetX ( enemy_unit ) ;
76748: LD_ADDR_VAR 0 7
76752: PUSH
76753: LD_VAR 0 2
76757: PPUSH
76758: CALL_OW 250
76762: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76763: LD_ADDR_VAR 0 8
76767: PUSH
76768: LD_VAR 0 2
76772: PPUSH
76773: CALL_OW 251
76777: ST_TO_ADDR
// if not x or not y then
76778: LD_VAR 0 7
76782: NOT
76783: PUSH
76784: LD_VAR 0 8
76788: NOT
76789: OR
76790: IFFALSE 76794
// exit ;
76792: GO 77189
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76794: LD_ADDR_VAR 0 6
76798: PUSH
76799: LD_VAR 0 7
76803: PPUSH
76804: LD_INT 0
76806: PPUSH
76807: LD_INT 4
76809: PPUSH
76810: CALL_OW 272
76814: PUSH
76815: LD_VAR 0 8
76819: PPUSH
76820: LD_INT 0
76822: PPUSH
76823: LD_INT 4
76825: PPUSH
76826: CALL_OW 273
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: PUSH
76835: LD_VAR 0 7
76839: PPUSH
76840: LD_INT 1
76842: PPUSH
76843: LD_INT 4
76845: PPUSH
76846: CALL_OW 272
76850: PUSH
76851: LD_VAR 0 8
76855: PPUSH
76856: LD_INT 1
76858: PPUSH
76859: LD_INT 4
76861: PPUSH
76862: CALL_OW 273
76866: PUSH
76867: EMPTY
76868: LIST
76869: LIST
76870: PUSH
76871: LD_VAR 0 7
76875: PPUSH
76876: LD_INT 2
76878: PPUSH
76879: LD_INT 4
76881: PPUSH
76882: CALL_OW 272
76886: PUSH
76887: LD_VAR 0 8
76891: PPUSH
76892: LD_INT 2
76894: PPUSH
76895: LD_INT 4
76897: PPUSH
76898: CALL_OW 273
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: PUSH
76907: LD_VAR 0 7
76911: PPUSH
76912: LD_INT 3
76914: PPUSH
76915: LD_INT 4
76917: PPUSH
76918: CALL_OW 272
76922: PUSH
76923: LD_VAR 0 8
76927: PPUSH
76928: LD_INT 3
76930: PPUSH
76931: LD_INT 4
76933: PPUSH
76934: CALL_OW 273
76938: PUSH
76939: EMPTY
76940: LIST
76941: LIST
76942: PUSH
76943: LD_VAR 0 7
76947: PPUSH
76948: LD_INT 4
76950: PPUSH
76951: LD_INT 4
76953: PPUSH
76954: CALL_OW 272
76958: PUSH
76959: LD_VAR 0 8
76963: PPUSH
76964: LD_INT 4
76966: PPUSH
76967: LD_INT 4
76969: PPUSH
76970: CALL_OW 273
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PUSH
76979: LD_VAR 0 7
76983: PPUSH
76984: LD_INT 5
76986: PPUSH
76987: LD_INT 4
76989: PPUSH
76990: CALL_OW 272
76994: PUSH
76995: LD_VAR 0 8
76999: PPUSH
77000: LD_INT 5
77002: PPUSH
77003: LD_INT 4
77005: PPUSH
77006: CALL_OW 273
77010: PUSH
77011: EMPTY
77012: LIST
77013: LIST
77014: PUSH
77015: EMPTY
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: ST_TO_ADDR
// for i = tmp downto 1 do
77023: LD_ADDR_VAR 0 4
77027: PUSH
77028: DOUBLE
77029: LD_VAR 0 6
77033: INC
77034: ST_TO_ADDR
77035: LD_INT 1
77037: PUSH
77038: FOR_DOWNTO
77039: IFFALSE 77140
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77041: LD_VAR 0 6
77045: PUSH
77046: LD_VAR 0 4
77050: ARRAY
77051: PUSH
77052: LD_INT 1
77054: ARRAY
77055: PPUSH
77056: LD_VAR 0 6
77060: PUSH
77061: LD_VAR 0 4
77065: ARRAY
77066: PUSH
77067: LD_INT 2
77069: ARRAY
77070: PPUSH
77071: CALL_OW 488
77075: NOT
77076: PUSH
77077: LD_VAR 0 6
77081: PUSH
77082: LD_VAR 0 4
77086: ARRAY
77087: PUSH
77088: LD_INT 1
77090: ARRAY
77091: PPUSH
77092: LD_VAR 0 6
77096: PUSH
77097: LD_VAR 0 4
77101: ARRAY
77102: PUSH
77103: LD_INT 2
77105: ARRAY
77106: PPUSH
77107: CALL_OW 428
77111: PUSH
77112: LD_INT 0
77114: NONEQUAL
77115: OR
77116: IFFALSE 77138
// tmp := Delete ( tmp , i ) ;
77118: LD_ADDR_VAR 0 6
77122: PUSH
77123: LD_VAR 0 6
77127: PPUSH
77128: LD_VAR 0 4
77132: PPUSH
77133: CALL_OW 3
77137: ST_TO_ADDR
77138: GO 77038
77140: POP
77141: POP
// j := GetClosestHex ( unit , tmp ) ;
77142: LD_ADDR_VAR 0 5
77146: PUSH
77147: LD_VAR 0 1
77151: PPUSH
77152: LD_VAR 0 6
77156: PPUSH
77157: CALL 76444 0 2
77161: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77162: LD_VAR 0 1
77166: PPUSH
77167: LD_VAR 0 5
77171: PUSH
77172: LD_INT 1
77174: ARRAY
77175: PPUSH
77176: LD_VAR 0 5
77180: PUSH
77181: LD_INT 2
77183: ARRAY
77184: PPUSH
77185: CALL_OW 111
// end ;
77189: LD_VAR 0 3
77193: RET
// export function PrepareApemanSoldier ( ) ; begin
77194: LD_INT 0
77196: PPUSH
// uc_nation := 0 ;
77197: LD_ADDR_OWVAR 21
77201: PUSH
77202: LD_INT 0
77204: ST_TO_ADDR
// hc_sex := sex_male ;
77205: LD_ADDR_OWVAR 27
77209: PUSH
77210: LD_INT 1
77212: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77213: LD_ADDR_OWVAR 28
77217: PUSH
77218: LD_INT 15
77220: ST_TO_ADDR
// hc_gallery :=  ;
77221: LD_ADDR_OWVAR 33
77225: PUSH
77226: LD_STRING 
77228: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77229: LD_ADDR_OWVAR 31
77233: PUSH
77234: LD_INT 0
77236: PPUSH
77237: LD_INT 3
77239: PPUSH
77240: CALL_OW 12
77244: PUSH
77245: LD_INT 0
77247: PPUSH
77248: LD_INT 3
77250: PPUSH
77251: CALL_OW 12
77255: PUSH
77256: LD_INT 0
77258: PUSH
77259: LD_INT 0
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: LIST
77266: LIST
77267: ST_TO_ADDR
// end ;
77268: LD_VAR 0 1
77272: RET
// export function PrepareApemanEngineer ( ) ; begin
77273: LD_INT 0
77275: PPUSH
// uc_nation := 0 ;
77276: LD_ADDR_OWVAR 21
77280: PUSH
77281: LD_INT 0
77283: ST_TO_ADDR
// hc_sex := sex_male ;
77284: LD_ADDR_OWVAR 27
77288: PUSH
77289: LD_INT 1
77291: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77292: LD_ADDR_OWVAR 28
77296: PUSH
77297: LD_INT 16
77299: ST_TO_ADDR
// hc_gallery :=  ;
77300: LD_ADDR_OWVAR 33
77304: PUSH
77305: LD_STRING 
77307: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77308: LD_ADDR_OWVAR 31
77312: PUSH
77313: LD_INT 0
77315: PPUSH
77316: LD_INT 3
77318: PPUSH
77319: CALL_OW 12
77323: PUSH
77324: LD_INT 0
77326: PPUSH
77327: LD_INT 3
77329: PPUSH
77330: CALL_OW 12
77334: PUSH
77335: LD_INT 0
77337: PUSH
77338: LD_INT 0
77340: PUSH
77341: EMPTY
77342: LIST
77343: LIST
77344: LIST
77345: LIST
77346: ST_TO_ADDR
// end ;
77347: LD_VAR 0 1
77351: RET
// export function PrepareApeman ( agressivity ) ; begin
77352: LD_INT 0
77354: PPUSH
// uc_side := 0 ;
77355: LD_ADDR_OWVAR 20
77359: PUSH
77360: LD_INT 0
77362: ST_TO_ADDR
// uc_nation := 0 ;
77363: LD_ADDR_OWVAR 21
77367: PUSH
77368: LD_INT 0
77370: ST_TO_ADDR
// hc_sex := sex_male ;
77371: LD_ADDR_OWVAR 27
77375: PUSH
77376: LD_INT 1
77378: ST_TO_ADDR
// hc_class := class_apeman ;
77379: LD_ADDR_OWVAR 28
77383: PUSH
77384: LD_INT 12
77386: ST_TO_ADDR
// hc_gallery :=  ;
77387: LD_ADDR_OWVAR 33
77391: PUSH
77392: LD_STRING 
77394: ST_TO_ADDR
// if agressivity = 0 then
77395: LD_VAR 0 1
77399: PUSH
77400: LD_INT 0
77402: EQUAL
77403: IFFALSE 77415
// hc_agressivity := 0 else
77405: LD_ADDR_OWVAR 35
77409: PUSH
77410: LD_INT 0
77412: ST_TO_ADDR
77413: GO 77436
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77415: LD_ADDR_OWVAR 35
77419: PUSH
77420: LD_VAR 0 1
77424: NEG
77425: PPUSH
77426: LD_VAR 0 1
77430: PPUSH
77431: CALL_OW 12
77435: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77436: LD_ADDR_OWVAR 31
77440: PUSH
77441: LD_INT 0
77443: PPUSH
77444: LD_INT 3
77446: PPUSH
77447: CALL_OW 12
77451: PUSH
77452: LD_INT 0
77454: PPUSH
77455: LD_INT 3
77457: PPUSH
77458: CALL_OW 12
77462: PUSH
77463: LD_INT 0
77465: PUSH
77466: LD_INT 0
77468: PUSH
77469: EMPTY
77470: LIST
77471: LIST
77472: LIST
77473: LIST
77474: ST_TO_ADDR
// end ;
77475: LD_VAR 0 2
77479: RET
// export function PrepareTiger ( agressivity ) ; begin
77480: LD_INT 0
77482: PPUSH
// uc_side := 0 ;
77483: LD_ADDR_OWVAR 20
77487: PUSH
77488: LD_INT 0
77490: ST_TO_ADDR
// uc_nation := 0 ;
77491: LD_ADDR_OWVAR 21
77495: PUSH
77496: LD_INT 0
77498: ST_TO_ADDR
// hc_class := class_tiger ;
77499: LD_ADDR_OWVAR 28
77503: PUSH
77504: LD_INT 14
77506: ST_TO_ADDR
// hc_gallery :=  ;
77507: LD_ADDR_OWVAR 33
77511: PUSH
77512: LD_STRING 
77514: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77515: LD_ADDR_OWVAR 35
77519: PUSH
77520: LD_VAR 0 1
77524: NEG
77525: PPUSH
77526: LD_VAR 0 1
77530: PPUSH
77531: CALL_OW 12
77535: ST_TO_ADDR
// end ;
77536: LD_VAR 0 2
77540: RET
// export function PrepareEnchidna ( ) ; begin
77541: LD_INT 0
77543: PPUSH
// uc_side := 0 ;
77544: LD_ADDR_OWVAR 20
77548: PUSH
77549: LD_INT 0
77551: ST_TO_ADDR
// uc_nation := 0 ;
77552: LD_ADDR_OWVAR 21
77556: PUSH
77557: LD_INT 0
77559: ST_TO_ADDR
// hc_class := class_baggie ;
77560: LD_ADDR_OWVAR 28
77564: PUSH
77565: LD_INT 13
77567: ST_TO_ADDR
// hc_gallery :=  ;
77568: LD_ADDR_OWVAR 33
77572: PUSH
77573: LD_STRING 
77575: ST_TO_ADDR
// end ;
77576: LD_VAR 0 1
77580: RET
// export function PrepareFrog ( ) ; begin
77581: LD_INT 0
77583: PPUSH
// uc_side := 0 ;
77584: LD_ADDR_OWVAR 20
77588: PUSH
77589: LD_INT 0
77591: ST_TO_ADDR
// uc_nation := 0 ;
77592: LD_ADDR_OWVAR 21
77596: PUSH
77597: LD_INT 0
77599: ST_TO_ADDR
// hc_class := class_frog ;
77600: LD_ADDR_OWVAR 28
77604: PUSH
77605: LD_INT 19
77607: ST_TO_ADDR
// hc_gallery :=  ;
77608: LD_ADDR_OWVAR 33
77612: PUSH
77613: LD_STRING 
77615: ST_TO_ADDR
// end ;
77616: LD_VAR 0 1
77620: RET
// export function PrepareFish ( ) ; begin
77621: LD_INT 0
77623: PPUSH
// uc_side := 0 ;
77624: LD_ADDR_OWVAR 20
77628: PUSH
77629: LD_INT 0
77631: ST_TO_ADDR
// uc_nation := 0 ;
77632: LD_ADDR_OWVAR 21
77636: PUSH
77637: LD_INT 0
77639: ST_TO_ADDR
// hc_class := class_fish ;
77640: LD_ADDR_OWVAR 28
77644: PUSH
77645: LD_INT 20
77647: ST_TO_ADDR
// hc_gallery :=  ;
77648: LD_ADDR_OWVAR 33
77652: PUSH
77653: LD_STRING 
77655: ST_TO_ADDR
// end ;
77656: LD_VAR 0 1
77660: RET
// export function PrepareBird ( ) ; begin
77661: LD_INT 0
77663: PPUSH
// uc_side := 0 ;
77664: LD_ADDR_OWVAR 20
77668: PUSH
77669: LD_INT 0
77671: ST_TO_ADDR
// uc_nation := 0 ;
77672: LD_ADDR_OWVAR 21
77676: PUSH
77677: LD_INT 0
77679: ST_TO_ADDR
// hc_class := class_phororhacos ;
77680: LD_ADDR_OWVAR 28
77684: PUSH
77685: LD_INT 18
77687: ST_TO_ADDR
// hc_gallery :=  ;
77688: LD_ADDR_OWVAR 33
77692: PUSH
77693: LD_STRING 
77695: ST_TO_ADDR
// end ;
77696: LD_VAR 0 1
77700: RET
// export function PrepareHorse ( ) ; begin
77701: LD_INT 0
77703: PPUSH
// uc_side := 0 ;
77704: LD_ADDR_OWVAR 20
77708: PUSH
77709: LD_INT 0
77711: ST_TO_ADDR
// uc_nation := 0 ;
77712: LD_ADDR_OWVAR 21
77716: PUSH
77717: LD_INT 0
77719: ST_TO_ADDR
// hc_class := class_horse ;
77720: LD_ADDR_OWVAR 28
77724: PUSH
77725: LD_INT 21
77727: ST_TO_ADDR
// hc_gallery :=  ;
77728: LD_ADDR_OWVAR 33
77732: PUSH
77733: LD_STRING 
77735: ST_TO_ADDR
// end ;
77736: LD_VAR 0 1
77740: RET
// export function PrepareMastodont ( ) ; begin
77741: LD_INT 0
77743: PPUSH
// uc_side := 0 ;
77744: LD_ADDR_OWVAR 20
77748: PUSH
77749: LD_INT 0
77751: ST_TO_ADDR
// uc_nation := 0 ;
77752: LD_ADDR_OWVAR 21
77756: PUSH
77757: LD_INT 0
77759: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77760: LD_ADDR_OWVAR 37
77764: PUSH
77765: LD_INT 31
77767: ST_TO_ADDR
// vc_control := control_rider ;
77768: LD_ADDR_OWVAR 38
77772: PUSH
77773: LD_INT 4
77775: ST_TO_ADDR
// end ;
77776: LD_VAR 0 1
77780: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77781: LD_INT 0
77783: PPUSH
77784: PPUSH
77785: PPUSH
// uc_side = 0 ;
77786: LD_ADDR_OWVAR 20
77790: PUSH
77791: LD_INT 0
77793: ST_TO_ADDR
// uc_nation = 0 ;
77794: LD_ADDR_OWVAR 21
77798: PUSH
77799: LD_INT 0
77801: ST_TO_ADDR
// InitHc_All ( ) ;
77802: CALL_OW 584
// InitVc ;
77806: CALL_OW 20
// if mastodonts then
77810: LD_VAR 0 6
77814: IFFALSE 77881
// for i = 1 to mastodonts do
77816: LD_ADDR_VAR 0 11
77820: PUSH
77821: DOUBLE
77822: LD_INT 1
77824: DEC
77825: ST_TO_ADDR
77826: LD_VAR 0 6
77830: PUSH
77831: FOR_TO
77832: IFFALSE 77879
// begin vc_chassis := 31 ;
77834: LD_ADDR_OWVAR 37
77838: PUSH
77839: LD_INT 31
77841: ST_TO_ADDR
// vc_control := control_rider ;
77842: LD_ADDR_OWVAR 38
77846: PUSH
77847: LD_INT 4
77849: ST_TO_ADDR
// animal := CreateVehicle ;
77850: LD_ADDR_VAR 0 12
77854: PUSH
77855: CALL_OW 45
77859: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77860: LD_VAR 0 12
77864: PPUSH
77865: LD_VAR 0 8
77869: PPUSH
77870: LD_INT 0
77872: PPUSH
77873: CALL 80009 0 3
// end ;
77877: GO 77831
77879: POP
77880: POP
// if horses then
77881: LD_VAR 0 5
77885: IFFALSE 77952
// for i = 1 to horses do
77887: LD_ADDR_VAR 0 11
77891: PUSH
77892: DOUBLE
77893: LD_INT 1
77895: DEC
77896: ST_TO_ADDR
77897: LD_VAR 0 5
77901: PUSH
77902: FOR_TO
77903: IFFALSE 77950
// begin hc_class := 21 ;
77905: LD_ADDR_OWVAR 28
77909: PUSH
77910: LD_INT 21
77912: ST_TO_ADDR
// hc_gallery :=  ;
77913: LD_ADDR_OWVAR 33
77917: PUSH
77918: LD_STRING 
77920: ST_TO_ADDR
// animal := CreateHuman ;
77921: LD_ADDR_VAR 0 12
77925: PUSH
77926: CALL_OW 44
77930: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77931: LD_VAR 0 12
77935: PPUSH
77936: LD_VAR 0 8
77940: PPUSH
77941: LD_INT 0
77943: PPUSH
77944: CALL 80009 0 3
// end ;
77948: GO 77902
77950: POP
77951: POP
// if birds then
77952: LD_VAR 0 1
77956: IFFALSE 78023
// for i = 1 to birds do
77958: LD_ADDR_VAR 0 11
77962: PUSH
77963: DOUBLE
77964: LD_INT 1
77966: DEC
77967: ST_TO_ADDR
77968: LD_VAR 0 1
77972: PUSH
77973: FOR_TO
77974: IFFALSE 78021
// begin hc_class := 18 ;
77976: LD_ADDR_OWVAR 28
77980: PUSH
77981: LD_INT 18
77983: ST_TO_ADDR
// hc_gallery =  ;
77984: LD_ADDR_OWVAR 33
77988: PUSH
77989: LD_STRING 
77991: ST_TO_ADDR
// animal := CreateHuman ;
77992: LD_ADDR_VAR 0 12
77996: PUSH
77997: CALL_OW 44
78001: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78002: LD_VAR 0 12
78006: PPUSH
78007: LD_VAR 0 8
78011: PPUSH
78012: LD_INT 0
78014: PPUSH
78015: CALL 80009 0 3
// end ;
78019: GO 77973
78021: POP
78022: POP
// if tigers then
78023: LD_VAR 0 2
78027: IFFALSE 78111
// for i = 1 to tigers do
78029: LD_ADDR_VAR 0 11
78033: PUSH
78034: DOUBLE
78035: LD_INT 1
78037: DEC
78038: ST_TO_ADDR
78039: LD_VAR 0 2
78043: PUSH
78044: FOR_TO
78045: IFFALSE 78109
// begin hc_class = class_tiger ;
78047: LD_ADDR_OWVAR 28
78051: PUSH
78052: LD_INT 14
78054: ST_TO_ADDR
// hc_gallery =  ;
78055: LD_ADDR_OWVAR 33
78059: PUSH
78060: LD_STRING 
78062: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78063: LD_ADDR_OWVAR 35
78067: PUSH
78068: LD_INT 7
78070: NEG
78071: PPUSH
78072: LD_INT 7
78074: PPUSH
78075: CALL_OW 12
78079: ST_TO_ADDR
// animal := CreateHuman ;
78080: LD_ADDR_VAR 0 12
78084: PUSH
78085: CALL_OW 44
78089: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78090: LD_VAR 0 12
78094: PPUSH
78095: LD_VAR 0 8
78099: PPUSH
78100: LD_INT 0
78102: PPUSH
78103: CALL 80009 0 3
// end ;
78107: GO 78044
78109: POP
78110: POP
// if apemans then
78111: LD_VAR 0 3
78115: IFFALSE 78238
// for i = 1 to apemans do
78117: LD_ADDR_VAR 0 11
78121: PUSH
78122: DOUBLE
78123: LD_INT 1
78125: DEC
78126: ST_TO_ADDR
78127: LD_VAR 0 3
78131: PUSH
78132: FOR_TO
78133: IFFALSE 78236
// begin hc_class = class_apeman ;
78135: LD_ADDR_OWVAR 28
78139: PUSH
78140: LD_INT 12
78142: ST_TO_ADDR
// hc_gallery =  ;
78143: LD_ADDR_OWVAR 33
78147: PUSH
78148: LD_STRING 
78150: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78151: LD_ADDR_OWVAR 35
78155: PUSH
78156: LD_INT 2
78158: NEG
78159: PPUSH
78160: LD_INT 2
78162: PPUSH
78163: CALL_OW 12
78167: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78168: LD_ADDR_OWVAR 31
78172: PUSH
78173: LD_INT 1
78175: PPUSH
78176: LD_INT 3
78178: PPUSH
78179: CALL_OW 12
78183: PUSH
78184: LD_INT 1
78186: PPUSH
78187: LD_INT 3
78189: PPUSH
78190: CALL_OW 12
78194: PUSH
78195: LD_INT 0
78197: PUSH
78198: LD_INT 0
78200: PUSH
78201: EMPTY
78202: LIST
78203: LIST
78204: LIST
78205: LIST
78206: ST_TO_ADDR
// animal := CreateHuman ;
78207: LD_ADDR_VAR 0 12
78211: PUSH
78212: CALL_OW 44
78216: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78217: LD_VAR 0 12
78221: PPUSH
78222: LD_VAR 0 8
78226: PPUSH
78227: LD_INT 0
78229: PPUSH
78230: CALL 80009 0 3
// end ;
78234: GO 78132
78236: POP
78237: POP
// if enchidnas then
78238: LD_VAR 0 4
78242: IFFALSE 78309
// for i = 1 to enchidnas do
78244: LD_ADDR_VAR 0 11
78248: PUSH
78249: DOUBLE
78250: LD_INT 1
78252: DEC
78253: ST_TO_ADDR
78254: LD_VAR 0 4
78258: PUSH
78259: FOR_TO
78260: IFFALSE 78307
// begin hc_class = 13 ;
78262: LD_ADDR_OWVAR 28
78266: PUSH
78267: LD_INT 13
78269: ST_TO_ADDR
// hc_gallery =  ;
78270: LD_ADDR_OWVAR 33
78274: PUSH
78275: LD_STRING 
78277: ST_TO_ADDR
// animal := CreateHuman ;
78278: LD_ADDR_VAR 0 12
78282: PUSH
78283: CALL_OW 44
78287: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78288: LD_VAR 0 12
78292: PPUSH
78293: LD_VAR 0 8
78297: PPUSH
78298: LD_INT 0
78300: PPUSH
78301: CALL 80009 0 3
// end ;
78305: GO 78259
78307: POP
78308: POP
// if fishes then
78309: LD_VAR 0 7
78313: IFFALSE 78380
// for i = 1 to fishes do
78315: LD_ADDR_VAR 0 11
78319: PUSH
78320: DOUBLE
78321: LD_INT 1
78323: DEC
78324: ST_TO_ADDR
78325: LD_VAR 0 7
78329: PUSH
78330: FOR_TO
78331: IFFALSE 78378
// begin hc_class = 20 ;
78333: LD_ADDR_OWVAR 28
78337: PUSH
78338: LD_INT 20
78340: ST_TO_ADDR
// hc_gallery =  ;
78341: LD_ADDR_OWVAR 33
78345: PUSH
78346: LD_STRING 
78348: ST_TO_ADDR
// animal := CreateHuman ;
78349: LD_ADDR_VAR 0 12
78353: PUSH
78354: CALL_OW 44
78358: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78359: LD_VAR 0 12
78363: PPUSH
78364: LD_VAR 0 9
78368: PPUSH
78369: LD_INT 0
78371: PPUSH
78372: CALL 80009 0 3
// end ;
78376: GO 78330
78378: POP
78379: POP
// end ;
78380: LD_VAR 0 10
78384: RET
// export function WantHeal ( sci , unit ) ; begin
78385: LD_INT 0
78387: PPUSH
// if GetTaskList ( sci ) > 0 then
78388: LD_VAR 0 1
78392: PPUSH
78393: CALL_OW 437
78397: PUSH
78398: LD_INT 0
78400: GREATER
78401: IFFALSE 78471
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78403: LD_VAR 0 1
78407: PPUSH
78408: CALL_OW 437
78412: PUSH
78413: LD_INT 1
78415: ARRAY
78416: PUSH
78417: LD_INT 1
78419: ARRAY
78420: PUSH
78421: LD_STRING l
78423: EQUAL
78424: PUSH
78425: LD_VAR 0 1
78429: PPUSH
78430: CALL_OW 437
78434: PUSH
78435: LD_INT 1
78437: ARRAY
78438: PUSH
78439: LD_INT 4
78441: ARRAY
78442: PUSH
78443: LD_VAR 0 2
78447: EQUAL
78448: AND
78449: IFFALSE 78461
// result := true else
78451: LD_ADDR_VAR 0 3
78455: PUSH
78456: LD_INT 1
78458: ST_TO_ADDR
78459: GO 78469
// result := false ;
78461: LD_ADDR_VAR 0 3
78465: PUSH
78466: LD_INT 0
78468: ST_TO_ADDR
// end else
78469: GO 78479
// result := false ;
78471: LD_ADDR_VAR 0 3
78475: PUSH
78476: LD_INT 0
78478: ST_TO_ADDR
// end ;
78479: LD_VAR 0 3
78483: RET
// export function HealTarget ( sci ) ; begin
78484: LD_INT 0
78486: PPUSH
// if not sci then
78487: LD_VAR 0 1
78491: NOT
78492: IFFALSE 78496
// exit ;
78494: GO 78561
// result := 0 ;
78496: LD_ADDR_VAR 0 2
78500: PUSH
78501: LD_INT 0
78503: ST_TO_ADDR
// if GetTaskList ( sci ) then
78504: LD_VAR 0 1
78508: PPUSH
78509: CALL_OW 437
78513: IFFALSE 78561
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78515: LD_VAR 0 1
78519: PPUSH
78520: CALL_OW 437
78524: PUSH
78525: LD_INT 1
78527: ARRAY
78528: PUSH
78529: LD_INT 1
78531: ARRAY
78532: PUSH
78533: LD_STRING l
78535: EQUAL
78536: IFFALSE 78561
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78538: LD_ADDR_VAR 0 2
78542: PUSH
78543: LD_VAR 0 1
78547: PPUSH
78548: CALL_OW 437
78552: PUSH
78553: LD_INT 1
78555: ARRAY
78556: PUSH
78557: LD_INT 4
78559: ARRAY
78560: ST_TO_ADDR
// end ;
78561: LD_VAR 0 2
78565: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78566: LD_INT 0
78568: PPUSH
78569: PPUSH
78570: PPUSH
78571: PPUSH
// if not base_units then
78572: LD_VAR 0 1
78576: NOT
78577: IFFALSE 78581
// exit ;
78579: GO 78668
// result := false ;
78581: LD_ADDR_VAR 0 2
78585: PUSH
78586: LD_INT 0
78588: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78589: LD_ADDR_VAR 0 5
78593: PUSH
78594: LD_VAR 0 1
78598: PPUSH
78599: LD_INT 21
78601: PUSH
78602: LD_INT 3
78604: PUSH
78605: EMPTY
78606: LIST
78607: LIST
78608: PPUSH
78609: CALL_OW 72
78613: ST_TO_ADDR
// if not tmp then
78614: LD_VAR 0 5
78618: NOT
78619: IFFALSE 78623
// exit ;
78621: GO 78668
// for i in tmp do
78623: LD_ADDR_VAR 0 3
78627: PUSH
78628: LD_VAR 0 5
78632: PUSH
78633: FOR_IN
78634: IFFALSE 78666
// begin result := EnemyInRange ( i , 22 ) ;
78636: LD_ADDR_VAR 0 2
78640: PUSH
78641: LD_VAR 0 3
78645: PPUSH
78646: LD_INT 22
78648: PPUSH
78649: CALL 76246 0 2
78653: ST_TO_ADDR
// if result then
78654: LD_VAR 0 2
78658: IFFALSE 78664
// exit ;
78660: POP
78661: POP
78662: GO 78668
// end ;
78664: GO 78633
78666: POP
78667: POP
// end ;
78668: LD_VAR 0 2
78672: RET
// export function FilterByTag ( units , tag ) ; begin
78673: LD_INT 0
78675: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78676: LD_ADDR_VAR 0 3
78680: PUSH
78681: LD_VAR 0 1
78685: PPUSH
78686: LD_INT 120
78688: PUSH
78689: LD_VAR 0 2
78693: PUSH
78694: EMPTY
78695: LIST
78696: LIST
78697: PPUSH
78698: CALL_OW 72
78702: ST_TO_ADDR
// end ;
78703: LD_VAR 0 3
78707: RET
// export function IsDriver ( un ) ; begin
78708: LD_INT 0
78710: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78711: LD_ADDR_VAR 0 2
78715: PUSH
78716: LD_VAR 0 1
78720: PUSH
78721: LD_INT 55
78723: PUSH
78724: EMPTY
78725: LIST
78726: PPUSH
78727: CALL_OW 69
78731: IN
78732: ST_TO_ADDR
// end ;
78733: LD_VAR 0 2
78737: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78738: LD_INT 0
78740: PPUSH
78741: PPUSH
// list := [ ] ;
78742: LD_ADDR_VAR 0 5
78746: PUSH
78747: EMPTY
78748: ST_TO_ADDR
// case d of 0 :
78749: LD_VAR 0 3
78753: PUSH
78754: LD_INT 0
78756: DOUBLE
78757: EQUAL
78758: IFTRUE 78762
78760: GO 78895
78762: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78763: LD_ADDR_VAR 0 5
78767: PUSH
78768: LD_VAR 0 1
78772: PUSH
78773: LD_INT 4
78775: MINUS
78776: PUSH
78777: LD_VAR 0 2
78781: PUSH
78782: LD_INT 4
78784: MINUS
78785: PUSH
78786: LD_INT 2
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: LIST
78793: PUSH
78794: LD_VAR 0 1
78798: PUSH
78799: LD_INT 3
78801: MINUS
78802: PUSH
78803: LD_VAR 0 2
78807: PUSH
78808: LD_INT 1
78810: PUSH
78811: EMPTY
78812: LIST
78813: LIST
78814: LIST
78815: PUSH
78816: LD_VAR 0 1
78820: PUSH
78821: LD_INT 4
78823: PLUS
78824: PUSH
78825: LD_VAR 0 2
78829: PUSH
78830: LD_INT 4
78832: PUSH
78833: EMPTY
78834: LIST
78835: LIST
78836: LIST
78837: PUSH
78838: LD_VAR 0 1
78842: PUSH
78843: LD_INT 3
78845: PLUS
78846: PUSH
78847: LD_VAR 0 2
78851: PUSH
78852: LD_INT 3
78854: PLUS
78855: PUSH
78856: LD_INT 5
78858: PUSH
78859: EMPTY
78860: LIST
78861: LIST
78862: LIST
78863: PUSH
78864: LD_VAR 0 1
78868: PUSH
78869: LD_VAR 0 2
78873: PUSH
78874: LD_INT 4
78876: PLUS
78877: PUSH
78878: LD_INT 0
78880: PUSH
78881: EMPTY
78882: LIST
78883: LIST
78884: LIST
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: LIST
78890: LIST
78891: LIST
78892: ST_TO_ADDR
// end ; 1 :
78893: GO 79593
78895: LD_INT 1
78897: DOUBLE
78898: EQUAL
78899: IFTRUE 78903
78901: GO 79036
78903: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78904: LD_ADDR_VAR 0 5
78908: PUSH
78909: LD_VAR 0 1
78913: PUSH
78914: LD_VAR 0 2
78918: PUSH
78919: LD_INT 4
78921: MINUS
78922: PUSH
78923: LD_INT 3
78925: PUSH
78926: EMPTY
78927: LIST
78928: LIST
78929: LIST
78930: PUSH
78931: LD_VAR 0 1
78935: PUSH
78936: LD_INT 3
78938: MINUS
78939: PUSH
78940: LD_VAR 0 2
78944: PUSH
78945: LD_INT 3
78947: MINUS
78948: PUSH
78949: LD_INT 2
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: LIST
78956: PUSH
78957: LD_VAR 0 1
78961: PUSH
78962: LD_INT 4
78964: MINUS
78965: PUSH
78966: LD_VAR 0 2
78970: PUSH
78971: LD_INT 1
78973: PUSH
78974: EMPTY
78975: LIST
78976: LIST
78977: LIST
78978: PUSH
78979: LD_VAR 0 1
78983: PUSH
78984: LD_VAR 0 2
78988: PUSH
78989: LD_INT 3
78991: PLUS
78992: PUSH
78993: LD_INT 0
78995: PUSH
78996: EMPTY
78997: LIST
78998: LIST
78999: LIST
79000: PUSH
79001: LD_VAR 0 1
79005: PUSH
79006: LD_INT 4
79008: PLUS
79009: PUSH
79010: LD_VAR 0 2
79014: PUSH
79015: LD_INT 4
79017: PLUS
79018: PUSH
79019: LD_INT 5
79021: PUSH
79022: EMPTY
79023: LIST
79024: LIST
79025: LIST
79026: PUSH
79027: EMPTY
79028: LIST
79029: LIST
79030: LIST
79031: LIST
79032: LIST
79033: ST_TO_ADDR
// end ; 2 :
79034: GO 79593
79036: LD_INT 2
79038: DOUBLE
79039: EQUAL
79040: IFTRUE 79044
79042: GO 79173
79044: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79045: LD_ADDR_VAR 0 5
79049: PUSH
79050: LD_VAR 0 1
79054: PUSH
79055: LD_VAR 0 2
79059: PUSH
79060: LD_INT 3
79062: MINUS
79063: PUSH
79064: LD_INT 3
79066: PUSH
79067: EMPTY
79068: LIST
79069: LIST
79070: LIST
79071: PUSH
79072: LD_VAR 0 1
79076: PUSH
79077: LD_INT 4
79079: PLUS
79080: PUSH
79081: LD_VAR 0 2
79085: PUSH
79086: LD_INT 4
79088: PUSH
79089: EMPTY
79090: LIST
79091: LIST
79092: LIST
79093: PUSH
79094: LD_VAR 0 1
79098: PUSH
79099: LD_VAR 0 2
79103: PUSH
79104: LD_INT 4
79106: PLUS
79107: PUSH
79108: LD_INT 0
79110: PUSH
79111: EMPTY
79112: LIST
79113: LIST
79114: LIST
79115: PUSH
79116: LD_VAR 0 1
79120: PUSH
79121: LD_INT 3
79123: MINUS
79124: PUSH
79125: LD_VAR 0 2
79129: PUSH
79130: LD_INT 1
79132: PUSH
79133: EMPTY
79134: LIST
79135: LIST
79136: LIST
79137: PUSH
79138: LD_VAR 0 1
79142: PUSH
79143: LD_INT 4
79145: MINUS
79146: PUSH
79147: LD_VAR 0 2
79151: PUSH
79152: LD_INT 4
79154: MINUS
79155: PUSH
79156: LD_INT 2
79158: PUSH
79159: EMPTY
79160: LIST
79161: LIST
79162: LIST
79163: PUSH
79164: EMPTY
79165: LIST
79166: LIST
79167: LIST
79168: LIST
79169: LIST
79170: ST_TO_ADDR
// end ; 3 :
79171: GO 79593
79173: LD_INT 3
79175: DOUBLE
79176: EQUAL
79177: IFTRUE 79181
79179: GO 79314
79181: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79182: LD_ADDR_VAR 0 5
79186: PUSH
79187: LD_VAR 0 1
79191: PUSH
79192: LD_INT 3
79194: PLUS
79195: PUSH
79196: LD_VAR 0 2
79200: PUSH
79201: LD_INT 4
79203: PUSH
79204: EMPTY
79205: LIST
79206: LIST
79207: LIST
79208: PUSH
79209: LD_VAR 0 1
79213: PUSH
79214: LD_INT 4
79216: PLUS
79217: PUSH
79218: LD_VAR 0 2
79222: PUSH
79223: LD_INT 4
79225: PLUS
79226: PUSH
79227: LD_INT 5
79229: PUSH
79230: EMPTY
79231: LIST
79232: LIST
79233: LIST
79234: PUSH
79235: LD_VAR 0 1
79239: PUSH
79240: LD_INT 4
79242: MINUS
79243: PUSH
79244: LD_VAR 0 2
79248: PUSH
79249: LD_INT 1
79251: PUSH
79252: EMPTY
79253: LIST
79254: LIST
79255: LIST
79256: PUSH
79257: LD_VAR 0 1
79261: PUSH
79262: LD_VAR 0 2
79266: PUSH
79267: LD_INT 4
79269: MINUS
79270: PUSH
79271: LD_INT 3
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: LIST
79278: PUSH
79279: LD_VAR 0 1
79283: PUSH
79284: LD_INT 3
79286: MINUS
79287: PUSH
79288: LD_VAR 0 2
79292: PUSH
79293: LD_INT 3
79295: MINUS
79296: PUSH
79297: LD_INT 2
79299: PUSH
79300: EMPTY
79301: LIST
79302: LIST
79303: LIST
79304: PUSH
79305: EMPTY
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: LIST
79311: ST_TO_ADDR
// end ; 4 :
79312: GO 79593
79314: LD_INT 4
79316: DOUBLE
79317: EQUAL
79318: IFTRUE 79322
79320: GO 79455
79322: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79323: LD_ADDR_VAR 0 5
79327: PUSH
79328: LD_VAR 0 1
79332: PUSH
79333: LD_VAR 0 2
79337: PUSH
79338: LD_INT 4
79340: PLUS
79341: PUSH
79342: LD_INT 0
79344: PUSH
79345: EMPTY
79346: LIST
79347: LIST
79348: LIST
79349: PUSH
79350: LD_VAR 0 1
79354: PUSH
79355: LD_INT 3
79357: PLUS
79358: PUSH
79359: LD_VAR 0 2
79363: PUSH
79364: LD_INT 3
79366: PLUS
79367: PUSH
79368: LD_INT 5
79370: PUSH
79371: EMPTY
79372: LIST
79373: LIST
79374: LIST
79375: PUSH
79376: LD_VAR 0 1
79380: PUSH
79381: LD_INT 4
79383: PLUS
79384: PUSH
79385: LD_VAR 0 2
79389: PUSH
79390: LD_INT 4
79392: PUSH
79393: EMPTY
79394: LIST
79395: LIST
79396: LIST
79397: PUSH
79398: LD_VAR 0 1
79402: PUSH
79403: LD_VAR 0 2
79407: PUSH
79408: LD_INT 3
79410: MINUS
79411: PUSH
79412: LD_INT 3
79414: PUSH
79415: EMPTY
79416: LIST
79417: LIST
79418: LIST
79419: PUSH
79420: LD_VAR 0 1
79424: PUSH
79425: LD_INT 4
79427: MINUS
79428: PUSH
79429: LD_VAR 0 2
79433: PUSH
79434: LD_INT 4
79436: MINUS
79437: PUSH
79438: LD_INT 2
79440: PUSH
79441: EMPTY
79442: LIST
79443: LIST
79444: LIST
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: LIST
79450: LIST
79451: LIST
79452: ST_TO_ADDR
// end ; 5 :
79453: GO 79593
79455: LD_INT 5
79457: DOUBLE
79458: EQUAL
79459: IFTRUE 79463
79461: GO 79592
79463: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79464: LD_ADDR_VAR 0 5
79468: PUSH
79469: LD_VAR 0 1
79473: PUSH
79474: LD_INT 4
79476: MINUS
79477: PUSH
79478: LD_VAR 0 2
79482: PUSH
79483: LD_INT 1
79485: PUSH
79486: EMPTY
79487: LIST
79488: LIST
79489: LIST
79490: PUSH
79491: LD_VAR 0 1
79495: PUSH
79496: LD_VAR 0 2
79500: PUSH
79501: LD_INT 4
79503: MINUS
79504: PUSH
79505: LD_INT 3
79507: PUSH
79508: EMPTY
79509: LIST
79510: LIST
79511: LIST
79512: PUSH
79513: LD_VAR 0 1
79517: PUSH
79518: LD_INT 4
79520: PLUS
79521: PUSH
79522: LD_VAR 0 2
79526: PUSH
79527: LD_INT 4
79529: PLUS
79530: PUSH
79531: LD_INT 5
79533: PUSH
79534: EMPTY
79535: LIST
79536: LIST
79537: LIST
79538: PUSH
79539: LD_VAR 0 1
79543: PUSH
79544: LD_INT 3
79546: PLUS
79547: PUSH
79548: LD_VAR 0 2
79552: PUSH
79553: LD_INT 4
79555: PUSH
79556: EMPTY
79557: LIST
79558: LIST
79559: LIST
79560: PUSH
79561: LD_VAR 0 1
79565: PUSH
79566: LD_VAR 0 2
79570: PUSH
79571: LD_INT 3
79573: PLUS
79574: PUSH
79575: LD_INT 0
79577: PUSH
79578: EMPTY
79579: LIST
79580: LIST
79581: LIST
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: LIST
79587: LIST
79588: LIST
79589: ST_TO_ADDR
// end ; end ;
79590: GO 79593
79592: POP
// result := list ;
79593: LD_ADDR_VAR 0 4
79597: PUSH
79598: LD_VAR 0 5
79602: ST_TO_ADDR
// end ;
79603: LD_VAR 0 4
79607: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79608: LD_INT 0
79610: PPUSH
79611: PPUSH
79612: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79613: LD_VAR 0 1
79617: NOT
79618: PUSH
79619: LD_VAR 0 2
79623: PUSH
79624: LD_INT 1
79626: PUSH
79627: LD_INT 2
79629: PUSH
79630: LD_INT 3
79632: PUSH
79633: LD_INT 4
79635: PUSH
79636: EMPTY
79637: LIST
79638: LIST
79639: LIST
79640: LIST
79641: IN
79642: NOT
79643: OR
79644: IFFALSE 79648
// exit ;
79646: GO 79731
// tmp := [ ] ;
79648: LD_ADDR_VAR 0 5
79652: PUSH
79653: EMPTY
79654: ST_TO_ADDR
// for i in units do
79655: LD_ADDR_VAR 0 4
79659: PUSH
79660: LD_VAR 0 1
79664: PUSH
79665: FOR_IN
79666: IFFALSE 79700
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79668: LD_ADDR_VAR 0 5
79672: PUSH
79673: LD_VAR 0 5
79677: PPUSH
79678: LD_VAR 0 4
79682: PPUSH
79683: LD_VAR 0 2
79687: PPUSH
79688: CALL_OW 259
79692: PPUSH
79693: CALL 81104 0 2
79697: ST_TO_ADDR
79698: GO 79665
79700: POP
79701: POP
// if not tmp then
79702: LD_VAR 0 5
79706: NOT
79707: IFFALSE 79711
// exit ;
79709: GO 79731
// result := SortListByListDesc ( units , tmp ) ;
79711: LD_ADDR_VAR 0 3
79715: PUSH
79716: LD_VAR 0 1
79720: PPUSH
79721: LD_VAR 0 5
79725: PPUSH
79726: CALL_OW 77
79730: ST_TO_ADDR
// end ;
79731: LD_VAR 0 3
79735: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79736: LD_INT 0
79738: PPUSH
79739: PPUSH
79740: PPUSH
// result := false ;
79741: LD_ADDR_VAR 0 3
79745: PUSH
79746: LD_INT 0
79748: ST_TO_ADDR
// if not building then
79749: LD_VAR 0 2
79753: NOT
79754: IFFALSE 79758
// exit ;
79756: GO 79896
// x := GetX ( building ) ;
79758: LD_ADDR_VAR 0 4
79762: PUSH
79763: LD_VAR 0 2
79767: PPUSH
79768: CALL_OW 250
79772: ST_TO_ADDR
// y := GetY ( building ) ;
79773: LD_ADDR_VAR 0 5
79777: PUSH
79778: LD_VAR 0 2
79782: PPUSH
79783: CALL_OW 251
79787: ST_TO_ADDR
// if not x or not y then
79788: LD_VAR 0 4
79792: NOT
79793: PUSH
79794: LD_VAR 0 5
79798: NOT
79799: OR
79800: IFFALSE 79804
// exit ;
79802: GO 79896
// if GetTaskList ( unit ) then
79804: LD_VAR 0 1
79808: PPUSH
79809: CALL_OW 437
79813: IFFALSE 79896
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79815: LD_STRING e
79817: PUSH
79818: LD_VAR 0 1
79822: PPUSH
79823: CALL_OW 437
79827: PUSH
79828: LD_INT 1
79830: ARRAY
79831: PUSH
79832: LD_INT 1
79834: ARRAY
79835: EQUAL
79836: PUSH
79837: LD_VAR 0 4
79841: PUSH
79842: LD_VAR 0 1
79846: PPUSH
79847: CALL_OW 437
79851: PUSH
79852: LD_INT 1
79854: ARRAY
79855: PUSH
79856: LD_INT 2
79858: ARRAY
79859: EQUAL
79860: AND
79861: PUSH
79862: LD_VAR 0 5
79866: PUSH
79867: LD_VAR 0 1
79871: PPUSH
79872: CALL_OW 437
79876: PUSH
79877: LD_INT 1
79879: ARRAY
79880: PUSH
79881: LD_INT 3
79883: ARRAY
79884: EQUAL
79885: AND
79886: IFFALSE 79896
// result := true end ;
79888: LD_ADDR_VAR 0 3
79892: PUSH
79893: LD_INT 1
79895: ST_TO_ADDR
// end ;
79896: LD_VAR 0 3
79900: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79901: LD_INT 0
79903: PPUSH
// result := false ;
79904: LD_ADDR_VAR 0 4
79908: PUSH
79909: LD_INT 0
79911: ST_TO_ADDR
// if GetTaskList ( unit ) then
79912: LD_VAR 0 1
79916: PPUSH
79917: CALL_OW 437
79921: IFFALSE 80004
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79923: LD_STRING M
79925: PUSH
79926: LD_VAR 0 1
79930: PPUSH
79931: CALL_OW 437
79935: PUSH
79936: LD_INT 1
79938: ARRAY
79939: PUSH
79940: LD_INT 1
79942: ARRAY
79943: EQUAL
79944: PUSH
79945: LD_VAR 0 2
79949: PUSH
79950: LD_VAR 0 1
79954: PPUSH
79955: CALL_OW 437
79959: PUSH
79960: LD_INT 1
79962: ARRAY
79963: PUSH
79964: LD_INT 2
79966: ARRAY
79967: EQUAL
79968: AND
79969: PUSH
79970: LD_VAR 0 3
79974: PUSH
79975: LD_VAR 0 1
79979: PPUSH
79980: CALL_OW 437
79984: PUSH
79985: LD_INT 1
79987: ARRAY
79988: PUSH
79989: LD_INT 3
79991: ARRAY
79992: EQUAL
79993: AND
79994: IFFALSE 80004
// result := true ;
79996: LD_ADDR_VAR 0 4
80000: PUSH
80001: LD_INT 1
80003: ST_TO_ADDR
// end ; end ;
80004: LD_VAR 0 4
80008: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80009: LD_INT 0
80011: PPUSH
80012: PPUSH
80013: PPUSH
80014: PPUSH
// if not unit or not area then
80015: LD_VAR 0 1
80019: NOT
80020: PUSH
80021: LD_VAR 0 2
80025: NOT
80026: OR
80027: IFFALSE 80031
// exit ;
80029: GO 80207
// tmp := AreaToList ( area , i ) ;
80031: LD_ADDR_VAR 0 6
80035: PUSH
80036: LD_VAR 0 2
80040: PPUSH
80041: LD_VAR 0 5
80045: PPUSH
80046: CALL_OW 517
80050: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80051: LD_ADDR_VAR 0 5
80055: PUSH
80056: DOUBLE
80057: LD_INT 1
80059: DEC
80060: ST_TO_ADDR
80061: LD_VAR 0 6
80065: PUSH
80066: LD_INT 1
80068: ARRAY
80069: PUSH
80070: FOR_TO
80071: IFFALSE 80205
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80073: LD_ADDR_VAR 0 7
80077: PUSH
80078: LD_VAR 0 6
80082: PUSH
80083: LD_INT 1
80085: ARRAY
80086: PUSH
80087: LD_VAR 0 5
80091: ARRAY
80092: PUSH
80093: LD_VAR 0 6
80097: PUSH
80098: LD_INT 2
80100: ARRAY
80101: PUSH
80102: LD_VAR 0 5
80106: ARRAY
80107: PUSH
80108: EMPTY
80109: LIST
80110: LIST
80111: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
80112: LD_INT 92
80114: PUSH
80115: LD_VAR 0 7
80119: PUSH
80120: LD_INT 1
80122: ARRAY
80123: PUSH
80124: LD_VAR 0 7
80128: PUSH
80129: LD_INT 2
80131: ARRAY
80132: PUSH
80133: LD_INT 2
80135: PUSH
80136: EMPTY
80137: LIST
80138: LIST
80139: LIST
80140: LIST
80141: PPUSH
80142: CALL_OW 69
80146: PUSH
80147: LD_INT 0
80149: EQUAL
80150: IFFALSE 80203
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80152: LD_VAR 0 1
80156: PPUSH
80157: LD_VAR 0 7
80161: PUSH
80162: LD_INT 1
80164: ARRAY
80165: PPUSH
80166: LD_VAR 0 7
80170: PUSH
80171: LD_INT 2
80173: ARRAY
80174: PPUSH
80175: LD_VAR 0 3
80179: PPUSH
80180: CALL_OW 48
// result := IsPlaced ( unit ) ;
80184: LD_ADDR_VAR 0 4
80188: PUSH
80189: LD_VAR 0 1
80193: PPUSH
80194: CALL_OW 305
80198: ST_TO_ADDR
// exit ;
80199: POP
80200: POP
80201: GO 80207
// end ; end ;
80203: GO 80070
80205: POP
80206: POP
// end ;
80207: LD_VAR 0 4
80211: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80212: LD_INT 0
80214: PPUSH
80215: PPUSH
80216: PPUSH
// if not side or side > 8 then
80217: LD_VAR 0 1
80221: NOT
80222: PUSH
80223: LD_VAR 0 1
80227: PUSH
80228: LD_INT 8
80230: GREATER
80231: OR
80232: IFFALSE 80236
// exit ;
80234: GO 80423
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80236: LD_ADDR_VAR 0 4
80240: PUSH
80241: LD_INT 22
80243: PUSH
80244: LD_VAR 0 1
80248: PUSH
80249: EMPTY
80250: LIST
80251: LIST
80252: PUSH
80253: LD_INT 21
80255: PUSH
80256: LD_INT 3
80258: PUSH
80259: EMPTY
80260: LIST
80261: LIST
80262: PUSH
80263: EMPTY
80264: LIST
80265: LIST
80266: PPUSH
80267: CALL_OW 69
80271: ST_TO_ADDR
// if not tmp then
80272: LD_VAR 0 4
80276: NOT
80277: IFFALSE 80281
// exit ;
80279: GO 80423
// enable_addtolog := true ;
80281: LD_ADDR_OWVAR 81
80285: PUSH
80286: LD_INT 1
80288: ST_TO_ADDR
// AddToLog ( [ ) ;
80289: LD_STRING [
80291: PPUSH
80292: CALL_OW 561
// for i in tmp do
80296: LD_ADDR_VAR 0 3
80300: PUSH
80301: LD_VAR 0 4
80305: PUSH
80306: FOR_IN
80307: IFFALSE 80414
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80309: LD_STRING [
80311: PUSH
80312: LD_VAR 0 3
80316: PPUSH
80317: CALL_OW 266
80321: STR
80322: PUSH
80323: LD_STRING , 
80325: STR
80326: PUSH
80327: LD_VAR 0 3
80331: PPUSH
80332: CALL_OW 250
80336: STR
80337: PUSH
80338: LD_STRING , 
80340: STR
80341: PUSH
80342: LD_VAR 0 3
80346: PPUSH
80347: CALL_OW 251
80351: STR
80352: PUSH
80353: LD_STRING , 
80355: STR
80356: PUSH
80357: LD_VAR 0 3
80361: PPUSH
80362: CALL_OW 254
80366: STR
80367: PUSH
80368: LD_STRING , 
80370: STR
80371: PUSH
80372: LD_VAR 0 3
80376: PPUSH
80377: LD_INT 1
80379: PPUSH
80380: CALL_OW 268
80384: STR
80385: PUSH
80386: LD_STRING , 
80388: STR
80389: PUSH
80390: LD_VAR 0 3
80394: PPUSH
80395: LD_INT 2
80397: PPUSH
80398: CALL_OW 268
80402: STR
80403: PUSH
80404: LD_STRING ],
80406: STR
80407: PPUSH
80408: CALL_OW 561
// end ;
80412: GO 80306
80414: POP
80415: POP
// AddToLog ( ]; ) ;
80416: LD_STRING ];
80418: PPUSH
80419: CALL_OW 561
// end ;
80423: LD_VAR 0 2
80427: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80428: LD_INT 0
80430: PPUSH
80431: PPUSH
80432: PPUSH
80433: PPUSH
80434: PPUSH
// if not area or not rate or not max then
80435: LD_VAR 0 1
80439: NOT
80440: PUSH
80441: LD_VAR 0 2
80445: NOT
80446: OR
80447: PUSH
80448: LD_VAR 0 4
80452: NOT
80453: OR
80454: IFFALSE 80458
// exit ;
80456: GO 80647
// while 1 do
80458: LD_INT 1
80460: IFFALSE 80647
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80462: LD_ADDR_VAR 0 9
80466: PUSH
80467: LD_VAR 0 1
80471: PPUSH
80472: LD_INT 1
80474: PPUSH
80475: CALL_OW 287
80479: PUSH
80480: LD_INT 10
80482: MUL
80483: ST_TO_ADDR
// r := rate / 10 ;
80484: LD_ADDR_VAR 0 7
80488: PUSH
80489: LD_VAR 0 2
80493: PUSH
80494: LD_INT 10
80496: DIVREAL
80497: ST_TO_ADDR
// time := 1 1$00 ;
80498: LD_ADDR_VAR 0 8
80502: PUSH
80503: LD_INT 2100
80505: ST_TO_ADDR
// if amount < min then
80506: LD_VAR 0 9
80510: PUSH
80511: LD_VAR 0 3
80515: LESS
80516: IFFALSE 80534
// r := r * 2 else
80518: LD_ADDR_VAR 0 7
80522: PUSH
80523: LD_VAR 0 7
80527: PUSH
80528: LD_INT 2
80530: MUL
80531: ST_TO_ADDR
80532: GO 80560
// if amount > max then
80534: LD_VAR 0 9
80538: PUSH
80539: LD_VAR 0 4
80543: GREATER
80544: IFFALSE 80560
// r := r / 2 ;
80546: LD_ADDR_VAR 0 7
80550: PUSH
80551: LD_VAR 0 7
80555: PUSH
80556: LD_INT 2
80558: DIVREAL
80559: ST_TO_ADDR
// time := time / r ;
80560: LD_ADDR_VAR 0 8
80564: PUSH
80565: LD_VAR 0 8
80569: PUSH
80570: LD_VAR 0 7
80574: DIVREAL
80575: ST_TO_ADDR
// if time < 0 then
80576: LD_VAR 0 8
80580: PUSH
80581: LD_INT 0
80583: LESS
80584: IFFALSE 80601
// time := time * - 1 ;
80586: LD_ADDR_VAR 0 8
80590: PUSH
80591: LD_VAR 0 8
80595: PUSH
80596: LD_INT 1
80598: NEG
80599: MUL
80600: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80601: LD_VAR 0 8
80605: PUSH
80606: LD_INT 35
80608: PPUSH
80609: LD_INT 875
80611: PPUSH
80612: CALL_OW 12
80616: PLUS
80617: PPUSH
80618: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80622: LD_INT 1
80624: PPUSH
80625: LD_INT 5
80627: PPUSH
80628: CALL_OW 12
80632: PPUSH
80633: LD_VAR 0 1
80637: PPUSH
80638: LD_INT 1
80640: PPUSH
80641: CALL_OW 55
// end ;
80645: GO 80458
// end ;
80647: LD_VAR 0 5
80651: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80652: LD_INT 0
80654: PPUSH
80655: PPUSH
80656: PPUSH
80657: PPUSH
80658: PPUSH
80659: PPUSH
80660: PPUSH
80661: PPUSH
// if not turrets or not factories then
80662: LD_VAR 0 1
80666: NOT
80667: PUSH
80668: LD_VAR 0 2
80672: NOT
80673: OR
80674: IFFALSE 80678
// exit ;
80676: GO 80985
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80678: LD_ADDR_VAR 0 10
80682: PUSH
80683: LD_INT 5
80685: PUSH
80686: LD_INT 6
80688: PUSH
80689: EMPTY
80690: LIST
80691: LIST
80692: PUSH
80693: LD_INT 2
80695: PUSH
80696: LD_INT 4
80698: PUSH
80699: EMPTY
80700: LIST
80701: LIST
80702: PUSH
80703: LD_INT 3
80705: PUSH
80706: LD_INT 5
80708: PUSH
80709: EMPTY
80710: LIST
80711: LIST
80712: PUSH
80713: EMPTY
80714: LIST
80715: LIST
80716: LIST
80717: PUSH
80718: LD_INT 24
80720: PUSH
80721: LD_INT 25
80723: PUSH
80724: EMPTY
80725: LIST
80726: LIST
80727: PUSH
80728: LD_INT 23
80730: PUSH
80731: LD_INT 27
80733: PUSH
80734: EMPTY
80735: LIST
80736: LIST
80737: PUSH
80738: EMPTY
80739: LIST
80740: LIST
80741: PUSH
80742: LD_INT 42
80744: PUSH
80745: LD_INT 43
80747: PUSH
80748: EMPTY
80749: LIST
80750: LIST
80751: PUSH
80752: LD_INT 44
80754: PUSH
80755: LD_INT 46
80757: PUSH
80758: EMPTY
80759: LIST
80760: LIST
80761: PUSH
80762: LD_INT 45
80764: PUSH
80765: LD_INT 47
80767: PUSH
80768: EMPTY
80769: LIST
80770: LIST
80771: PUSH
80772: EMPTY
80773: LIST
80774: LIST
80775: LIST
80776: PUSH
80777: EMPTY
80778: LIST
80779: LIST
80780: LIST
80781: ST_TO_ADDR
// result := [ ] ;
80782: LD_ADDR_VAR 0 3
80786: PUSH
80787: EMPTY
80788: ST_TO_ADDR
// for i in turrets do
80789: LD_ADDR_VAR 0 4
80793: PUSH
80794: LD_VAR 0 1
80798: PUSH
80799: FOR_IN
80800: IFFALSE 80983
// begin nat := GetNation ( i ) ;
80802: LD_ADDR_VAR 0 7
80806: PUSH
80807: LD_VAR 0 4
80811: PPUSH
80812: CALL_OW 248
80816: ST_TO_ADDR
// weapon := 0 ;
80817: LD_ADDR_VAR 0 8
80821: PUSH
80822: LD_INT 0
80824: ST_TO_ADDR
// if not nat then
80825: LD_VAR 0 7
80829: NOT
80830: IFFALSE 80834
// continue ;
80832: GO 80799
// for j in list [ nat ] do
80834: LD_ADDR_VAR 0 5
80838: PUSH
80839: LD_VAR 0 10
80843: PUSH
80844: LD_VAR 0 7
80848: ARRAY
80849: PUSH
80850: FOR_IN
80851: IFFALSE 80892
// if GetBWeapon ( i ) = j [ 1 ] then
80853: LD_VAR 0 4
80857: PPUSH
80858: CALL_OW 269
80862: PUSH
80863: LD_VAR 0 5
80867: PUSH
80868: LD_INT 1
80870: ARRAY
80871: EQUAL
80872: IFFALSE 80890
// begin weapon := j [ 2 ] ;
80874: LD_ADDR_VAR 0 8
80878: PUSH
80879: LD_VAR 0 5
80883: PUSH
80884: LD_INT 2
80886: ARRAY
80887: ST_TO_ADDR
// break ;
80888: GO 80892
// end ;
80890: GO 80850
80892: POP
80893: POP
// if not weapon then
80894: LD_VAR 0 8
80898: NOT
80899: IFFALSE 80903
// continue ;
80901: GO 80799
// for k in factories do
80903: LD_ADDR_VAR 0 6
80907: PUSH
80908: LD_VAR 0 2
80912: PUSH
80913: FOR_IN
80914: IFFALSE 80979
// begin weapons := AvailableWeaponList ( k ) ;
80916: LD_ADDR_VAR 0 9
80920: PUSH
80921: LD_VAR 0 6
80925: PPUSH
80926: CALL_OW 478
80930: ST_TO_ADDR
// if not weapons then
80931: LD_VAR 0 9
80935: NOT
80936: IFFALSE 80940
// continue ;
80938: GO 80913
// if weapon in weapons then
80940: LD_VAR 0 8
80944: PUSH
80945: LD_VAR 0 9
80949: IN
80950: IFFALSE 80977
// begin result := [ i , weapon ] ;
80952: LD_ADDR_VAR 0 3
80956: PUSH
80957: LD_VAR 0 4
80961: PUSH
80962: LD_VAR 0 8
80966: PUSH
80967: EMPTY
80968: LIST
80969: LIST
80970: ST_TO_ADDR
// exit ;
80971: POP
80972: POP
80973: POP
80974: POP
80975: GO 80985
// end ; end ;
80977: GO 80913
80979: POP
80980: POP
// end ;
80981: GO 80799
80983: POP
80984: POP
// end ;
80985: LD_VAR 0 3
80989: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80990: LD_INT 0
80992: PPUSH
// if not side or side > 8 then
80993: LD_VAR 0 3
80997: NOT
80998: PUSH
80999: LD_VAR 0 3
81003: PUSH
81004: LD_INT 8
81006: GREATER
81007: OR
81008: IFFALSE 81012
// exit ;
81010: GO 81071
// if not range then
81012: LD_VAR 0 4
81016: NOT
81017: IFFALSE 81028
// range := - 12 ;
81019: LD_ADDR_VAR 0 4
81023: PUSH
81024: LD_INT 12
81026: NEG
81027: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81028: LD_VAR 0 1
81032: PPUSH
81033: LD_VAR 0 2
81037: PPUSH
81038: LD_VAR 0 3
81042: PPUSH
81043: LD_VAR 0 4
81047: PPUSH
81048: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81052: LD_VAR 0 1
81056: PPUSH
81057: LD_VAR 0 2
81061: PPUSH
81062: LD_VAR 0 3
81066: PPUSH
81067: CALL_OW 331
// end ;
81071: LD_VAR 0 5
81075: RET
// export function Video ( mode ) ; begin
81076: LD_INT 0
81078: PPUSH
// ingame_video = mode ;
81079: LD_ADDR_OWVAR 52
81083: PUSH
81084: LD_VAR 0 1
81088: ST_TO_ADDR
// interface_hidden = mode ;
81089: LD_ADDR_OWVAR 54
81093: PUSH
81094: LD_VAR 0 1
81098: ST_TO_ADDR
// end ;
81099: LD_VAR 0 2
81103: RET
// export function Join ( array , element ) ; begin
81104: LD_INT 0
81106: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81107: LD_ADDR_VAR 0 3
81111: PUSH
81112: LD_VAR 0 1
81116: PPUSH
81117: LD_VAR 0 1
81121: PUSH
81122: LD_INT 1
81124: PLUS
81125: PPUSH
81126: LD_VAR 0 2
81130: PPUSH
81131: CALL_OW 1
81135: ST_TO_ADDR
// end ;
81136: LD_VAR 0 3
81140: RET
// export function JoinUnion ( array , element ) ; begin
81141: LD_INT 0
81143: PPUSH
// result := array union element ;
81144: LD_ADDR_VAR 0 3
81148: PUSH
81149: LD_VAR 0 1
81153: PUSH
81154: LD_VAR 0 2
81158: UNION
81159: ST_TO_ADDR
// end ;
81160: LD_VAR 0 3
81164: RET
// export function GetBehemoths ( side ) ; begin
81165: LD_INT 0
81167: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81168: LD_ADDR_VAR 0 2
81172: PUSH
81173: LD_INT 22
81175: PUSH
81176: LD_VAR 0 1
81180: PUSH
81181: EMPTY
81182: LIST
81183: LIST
81184: PUSH
81185: LD_INT 31
81187: PUSH
81188: LD_INT 25
81190: PUSH
81191: EMPTY
81192: LIST
81193: LIST
81194: PUSH
81195: EMPTY
81196: LIST
81197: LIST
81198: PPUSH
81199: CALL_OW 69
81203: ST_TO_ADDR
// end ;
81204: LD_VAR 0 2
81208: RET
// export function Shuffle ( array ) ; var i , index ; begin
81209: LD_INT 0
81211: PPUSH
81212: PPUSH
81213: PPUSH
// result := [ ] ;
81214: LD_ADDR_VAR 0 2
81218: PUSH
81219: EMPTY
81220: ST_TO_ADDR
// if not array then
81221: LD_VAR 0 1
81225: NOT
81226: IFFALSE 81230
// exit ;
81228: GO 81329
// Randomize ;
81230: CALL_OW 10
// for i = array downto 1 do
81234: LD_ADDR_VAR 0 3
81238: PUSH
81239: DOUBLE
81240: LD_VAR 0 1
81244: INC
81245: ST_TO_ADDR
81246: LD_INT 1
81248: PUSH
81249: FOR_DOWNTO
81250: IFFALSE 81327
// begin index := rand ( 1 , array ) ;
81252: LD_ADDR_VAR 0 4
81256: PUSH
81257: LD_INT 1
81259: PPUSH
81260: LD_VAR 0 1
81264: PPUSH
81265: CALL_OW 12
81269: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81270: LD_ADDR_VAR 0 2
81274: PUSH
81275: LD_VAR 0 2
81279: PPUSH
81280: LD_VAR 0 2
81284: PUSH
81285: LD_INT 1
81287: PLUS
81288: PPUSH
81289: LD_VAR 0 1
81293: PUSH
81294: LD_VAR 0 4
81298: ARRAY
81299: PPUSH
81300: CALL_OW 2
81304: ST_TO_ADDR
// array := Delete ( array , index ) ;
81305: LD_ADDR_VAR 0 1
81309: PUSH
81310: LD_VAR 0 1
81314: PPUSH
81315: LD_VAR 0 4
81319: PPUSH
81320: CALL_OW 3
81324: ST_TO_ADDR
// end ;
81325: GO 81249
81327: POP
81328: POP
// end ;
81329: LD_VAR 0 2
81333: RET
// export function GetBaseMaterials ( base ) ; begin
81334: LD_INT 0
81336: PPUSH
// result := [ 0 , 0 , 0 ] ;
81337: LD_ADDR_VAR 0 2
81341: PUSH
81342: LD_INT 0
81344: PUSH
81345: LD_INT 0
81347: PUSH
81348: LD_INT 0
81350: PUSH
81351: EMPTY
81352: LIST
81353: LIST
81354: LIST
81355: ST_TO_ADDR
// if not base then
81356: LD_VAR 0 1
81360: NOT
81361: IFFALSE 81365
// exit ;
81363: GO 81414
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81365: LD_ADDR_VAR 0 2
81369: PUSH
81370: LD_VAR 0 1
81374: PPUSH
81375: LD_INT 1
81377: PPUSH
81378: CALL_OW 275
81382: PUSH
81383: LD_VAR 0 1
81387: PPUSH
81388: LD_INT 2
81390: PPUSH
81391: CALL_OW 275
81395: PUSH
81396: LD_VAR 0 1
81400: PPUSH
81401: LD_INT 3
81403: PPUSH
81404: CALL_OW 275
81408: PUSH
81409: EMPTY
81410: LIST
81411: LIST
81412: LIST
81413: ST_TO_ADDR
// end ;
81414: LD_VAR 0 2
81418: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81419: LD_INT 0
81421: PPUSH
81422: PPUSH
// result := array ;
81423: LD_ADDR_VAR 0 3
81427: PUSH
81428: LD_VAR 0 1
81432: ST_TO_ADDR
// if size >= result then
81433: LD_VAR 0 2
81437: PUSH
81438: LD_VAR 0 3
81442: GREATEREQUAL
81443: IFFALSE 81447
// exit ;
81445: GO 81497
// if size then
81447: LD_VAR 0 2
81451: IFFALSE 81497
// for i := array downto size do
81453: LD_ADDR_VAR 0 4
81457: PUSH
81458: DOUBLE
81459: LD_VAR 0 1
81463: INC
81464: ST_TO_ADDR
81465: LD_VAR 0 2
81469: PUSH
81470: FOR_DOWNTO
81471: IFFALSE 81495
// result := Delete ( result , result ) ;
81473: LD_ADDR_VAR 0 3
81477: PUSH
81478: LD_VAR 0 3
81482: PPUSH
81483: LD_VAR 0 3
81487: PPUSH
81488: CALL_OW 3
81492: ST_TO_ADDR
81493: GO 81470
81495: POP
81496: POP
// end ;
81497: LD_VAR 0 3
81501: RET
// export function ComExit ( unit ) ; var tmp ; begin
81502: LD_INT 0
81504: PPUSH
81505: PPUSH
// if not IsInUnit ( unit ) then
81506: LD_VAR 0 1
81510: PPUSH
81511: CALL_OW 310
81515: NOT
81516: IFFALSE 81520
// exit ;
81518: GO 81580
// tmp := IsInUnit ( unit ) ;
81520: LD_ADDR_VAR 0 3
81524: PUSH
81525: LD_VAR 0 1
81529: PPUSH
81530: CALL_OW 310
81534: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81535: LD_VAR 0 3
81539: PPUSH
81540: CALL_OW 247
81544: PUSH
81545: LD_INT 2
81547: EQUAL
81548: IFFALSE 81561
// ComExitVehicle ( unit ) else
81550: LD_VAR 0 1
81554: PPUSH
81555: CALL_OW 121
81559: GO 81570
// ComExitBuilding ( unit ) ;
81561: LD_VAR 0 1
81565: PPUSH
81566: CALL_OW 122
// result := tmp ;
81570: LD_ADDR_VAR 0 2
81574: PUSH
81575: LD_VAR 0 3
81579: ST_TO_ADDR
// end ;
81580: LD_VAR 0 2
81584: RET
// export function ComExitAll ( units ) ; var i ; begin
81585: LD_INT 0
81587: PPUSH
81588: PPUSH
// if not units then
81589: LD_VAR 0 1
81593: NOT
81594: IFFALSE 81598
// exit ;
81596: GO 81624
// for i in units do
81598: LD_ADDR_VAR 0 3
81602: PUSH
81603: LD_VAR 0 1
81607: PUSH
81608: FOR_IN
81609: IFFALSE 81622
// ComExit ( i ) ;
81611: LD_VAR 0 3
81615: PPUSH
81616: CALL 81502 0 1
81620: GO 81608
81622: POP
81623: POP
// end ;
81624: LD_VAR 0 2
81628: RET
// export function ResetHc ; begin
81629: LD_INT 0
81631: PPUSH
// InitHc ;
81632: CALL_OW 19
// hc_importance := 0 ;
81636: LD_ADDR_OWVAR 32
81640: PUSH
81641: LD_INT 0
81643: ST_TO_ADDR
// end ;
81644: LD_VAR 0 1
81648: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81649: LD_INT 0
81651: PPUSH
81652: PPUSH
81653: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81654: LD_ADDR_VAR 0 6
81658: PUSH
81659: LD_VAR 0 1
81663: PUSH
81664: LD_VAR 0 3
81668: PLUS
81669: PUSH
81670: LD_INT 2
81672: DIV
81673: ST_TO_ADDR
// if _x < 0 then
81674: LD_VAR 0 6
81678: PUSH
81679: LD_INT 0
81681: LESS
81682: IFFALSE 81699
// _x := _x * - 1 ;
81684: LD_ADDR_VAR 0 6
81688: PUSH
81689: LD_VAR 0 6
81693: PUSH
81694: LD_INT 1
81696: NEG
81697: MUL
81698: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81699: LD_ADDR_VAR 0 7
81703: PUSH
81704: LD_VAR 0 2
81708: PUSH
81709: LD_VAR 0 4
81713: PLUS
81714: PUSH
81715: LD_INT 2
81717: DIV
81718: ST_TO_ADDR
// if _y < 0 then
81719: LD_VAR 0 7
81723: PUSH
81724: LD_INT 0
81726: LESS
81727: IFFALSE 81744
// _y := _y * - 1 ;
81729: LD_ADDR_VAR 0 7
81733: PUSH
81734: LD_VAR 0 7
81738: PUSH
81739: LD_INT 1
81741: NEG
81742: MUL
81743: ST_TO_ADDR
// result := [ _x , _y ] ;
81744: LD_ADDR_VAR 0 5
81748: PUSH
81749: LD_VAR 0 6
81753: PUSH
81754: LD_VAR 0 7
81758: PUSH
81759: EMPTY
81760: LIST
81761: LIST
81762: ST_TO_ADDR
// end ;
81763: LD_VAR 0 5
81767: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81768: LD_INT 0
81770: PPUSH
81771: PPUSH
81772: PPUSH
81773: PPUSH
// task := GetTaskList ( unit ) ;
81774: LD_ADDR_VAR 0 7
81778: PUSH
81779: LD_VAR 0 1
81783: PPUSH
81784: CALL_OW 437
81788: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81789: LD_VAR 0 7
81793: NOT
81794: PUSH
81795: LD_VAR 0 1
81799: PPUSH
81800: LD_VAR 0 2
81804: PPUSH
81805: CALL_OW 308
81809: NOT
81810: AND
81811: IFFALSE 81815
// exit ;
81813: GO 81933
// if IsInArea ( unit , area ) then
81815: LD_VAR 0 1
81819: PPUSH
81820: LD_VAR 0 2
81824: PPUSH
81825: CALL_OW 308
81829: IFFALSE 81847
// begin ComMoveToArea ( unit , goAway ) ;
81831: LD_VAR 0 1
81835: PPUSH
81836: LD_VAR 0 3
81840: PPUSH
81841: CALL_OW 113
// exit ;
81845: GO 81933
// end ; if task [ 1 ] [ 1 ] <> M then
81847: LD_VAR 0 7
81851: PUSH
81852: LD_INT 1
81854: ARRAY
81855: PUSH
81856: LD_INT 1
81858: ARRAY
81859: PUSH
81860: LD_STRING M
81862: NONEQUAL
81863: IFFALSE 81867
// exit ;
81865: GO 81933
// x := task [ 1 ] [ 2 ] ;
81867: LD_ADDR_VAR 0 5
81871: PUSH
81872: LD_VAR 0 7
81876: PUSH
81877: LD_INT 1
81879: ARRAY
81880: PUSH
81881: LD_INT 2
81883: ARRAY
81884: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81885: LD_ADDR_VAR 0 6
81889: PUSH
81890: LD_VAR 0 7
81894: PUSH
81895: LD_INT 1
81897: ARRAY
81898: PUSH
81899: LD_INT 3
81901: ARRAY
81902: ST_TO_ADDR
// if InArea ( x , y , area ) then
81903: LD_VAR 0 5
81907: PPUSH
81908: LD_VAR 0 6
81912: PPUSH
81913: LD_VAR 0 2
81917: PPUSH
81918: CALL_OW 309
81922: IFFALSE 81933
// ComStop ( unit ) ;
81924: LD_VAR 0 1
81928: PPUSH
81929: CALL_OW 141
// end ;
81933: LD_VAR 0 4
81937: RET
// export function Abs ( value ) ; begin
81938: LD_INT 0
81940: PPUSH
// result := value ;
81941: LD_ADDR_VAR 0 2
81945: PUSH
81946: LD_VAR 0 1
81950: ST_TO_ADDR
// if value < 0 then
81951: LD_VAR 0 1
81955: PUSH
81956: LD_INT 0
81958: LESS
81959: IFFALSE 81976
// result := value * - 1 ;
81961: LD_ADDR_VAR 0 2
81965: PUSH
81966: LD_VAR 0 1
81970: PUSH
81971: LD_INT 1
81973: NEG
81974: MUL
81975: ST_TO_ADDR
// end ;
81976: LD_VAR 0 2
81980: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81981: LD_INT 0
81983: PPUSH
81984: PPUSH
81985: PPUSH
81986: PPUSH
81987: PPUSH
81988: PPUSH
81989: PPUSH
81990: PPUSH
// if not unit or not building then
81991: LD_VAR 0 1
81995: NOT
81996: PUSH
81997: LD_VAR 0 2
82001: NOT
82002: OR
82003: IFFALSE 82007
// exit ;
82005: GO 82233
// x := GetX ( building ) ;
82007: LD_ADDR_VAR 0 4
82011: PUSH
82012: LD_VAR 0 2
82016: PPUSH
82017: CALL_OW 250
82021: ST_TO_ADDR
// y := GetY ( building ) ;
82022: LD_ADDR_VAR 0 6
82026: PUSH
82027: LD_VAR 0 2
82031: PPUSH
82032: CALL_OW 251
82036: ST_TO_ADDR
// d := GetDir ( building ) ;
82037: LD_ADDR_VAR 0 8
82041: PUSH
82042: LD_VAR 0 2
82046: PPUSH
82047: CALL_OW 254
82051: ST_TO_ADDR
// r := 4 ;
82052: LD_ADDR_VAR 0 9
82056: PUSH
82057: LD_INT 4
82059: ST_TO_ADDR
// for i := 1 to 5 do
82060: LD_ADDR_VAR 0 10
82064: PUSH
82065: DOUBLE
82066: LD_INT 1
82068: DEC
82069: ST_TO_ADDR
82070: LD_INT 5
82072: PUSH
82073: FOR_TO
82074: IFFALSE 82231
// begin _x := ShiftX ( x , d , r + i ) ;
82076: LD_ADDR_VAR 0 5
82080: PUSH
82081: LD_VAR 0 4
82085: PPUSH
82086: LD_VAR 0 8
82090: PPUSH
82091: LD_VAR 0 9
82095: PUSH
82096: LD_VAR 0 10
82100: PLUS
82101: PPUSH
82102: CALL_OW 272
82106: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82107: LD_ADDR_VAR 0 7
82111: PUSH
82112: LD_VAR 0 6
82116: PPUSH
82117: LD_VAR 0 8
82121: PPUSH
82122: LD_VAR 0 9
82126: PUSH
82127: LD_VAR 0 10
82131: PLUS
82132: PPUSH
82133: CALL_OW 273
82137: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82138: LD_VAR 0 5
82142: PPUSH
82143: LD_VAR 0 7
82147: PPUSH
82148: CALL_OW 488
82152: PUSH
82153: LD_VAR 0 5
82157: PPUSH
82158: LD_VAR 0 7
82162: PPUSH
82163: CALL_OW 428
82167: PPUSH
82168: CALL_OW 247
82172: PUSH
82173: LD_INT 3
82175: PUSH
82176: LD_INT 2
82178: PUSH
82179: EMPTY
82180: LIST
82181: LIST
82182: IN
82183: NOT
82184: AND
82185: IFFALSE 82229
// begin ComMoveXY ( unit , _x , _y ) ;
82187: LD_VAR 0 1
82191: PPUSH
82192: LD_VAR 0 5
82196: PPUSH
82197: LD_VAR 0 7
82201: PPUSH
82202: CALL_OW 111
// result := [ _x , _y ] ;
82206: LD_ADDR_VAR 0 3
82210: PUSH
82211: LD_VAR 0 5
82215: PUSH
82216: LD_VAR 0 7
82220: PUSH
82221: EMPTY
82222: LIST
82223: LIST
82224: ST_TO_ADDR
// exit ;
82225: POP
82226: POP
82227: GO 82233
// end ; end ;
82229: GO 82073
82231: POP
82232: POP
// end ;
82233: LD_VAR 0 3
82237: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82238: LD_INT 0
82240: PPUSH
82241: PPUSH
82242: PPUSH
// result := 0 ;
82243: LD_ADDR_VAR 0 3
82247: PUSH
82248: LD_INT 0
82250: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82251: LD_VAR 0 1
82255: PUSH
82256: LD_INT 0
82258: LESS
82259: PUSH
82260: LD_VAR 0 1
82264: PUSH
82265: LD_INT 8
82267: GREATER
82268: OR
82269: PUSH
82270: LD_VAR 0 2
82274: PUSH
82275: LD_INT 0
82277: LESS
82278: OR
82279: PUSH
82280: LD_VAR 0 2
82284: PUSH
82285: LD_INT 8
82287: GREATER
82288: OR
82289: IFFALSE 82293
// exit ;
82291: GO 82368
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82293: LD_ADDR_VAR 0 4
82297: PUSH
82298: LD_INT 22
82300: PUSH
82301: LD_VAR 0 2
82305: PUSH
82306: EMPTY
82307: LIST
82308: LIST
82309: PPUSH
82310: CALL_OW 69
82314: PUSH
82315: FOR_IN
82316: IFFALSE 82366
// begin un := UnitShoot ( i ) ;
82318: LD_ADDR_VAR 0 5
82322: PUSH
82323: LD_VAR 0 4
82327: PPUSH
82328: CALL_OW 504
82332: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82333: LD_VAR 0 5
82337: PPUSH
82338: CALL_OW 255
82342: PUSH
82343: LD_VAR 0 1
82347: EQUAL
82348: IFFALSE 82364
// begin result := un ;
82350: LD_ADDR_VAR 0 3
82354: PUSH
82355: LD_VAR 0 5
82359: ST_TO_ADDR
// exit ;
82360: POP
82361: POP
82362: GO 82368
// end ; end ;
82364: GO 82315
82366: POP
82367: POP
// end ;
82368: LD_VAR 0 3
82372: RET
// export function GetCargoBay ( units ) ; begin
82373: LD_INT 0
82375: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82376: LD_ADDR_VAR 0 2
82380: PUSH
82381: LD_VAR 0 1
82385: PPUSH
82386: LD_INT 2
82388: PUSH
82389: LD_INT 34
82391: PUSH
82392: LD_INT 12
82394: PUSH
82395: EMPTY
82396: LIST
82397: LIST
82398: PUSH
82399: LD_INT 34
82401: PUSH
82402: LD_INT 51
82404: PUSH
82405: EMPTY
82406: LIST
82407: LIST
82408: PUSH
82409: LD_INT 34
82411: PUSH
82412: LD_INT 32
82414: PUSH
82415: EMPTY
82416: LIST
82417: LIST
82418: PUSH
82419: LD_INT 34
82421: PUSH
82422: LD_INT 89
82424: PUSH
82425: EMPTY
82426: LIST
82427: LIST
82428: PUSH
82429: EMPTY
82430: LIST
82431: LIST
82432: LIST
82433: LIST
82434: LIST
82435: PPUSH
82436: CALL_OW 72
82440: ST_TO_ADDR
// end ;
82441: LD_VAR 0 2
82445: RET
// export function Negate ( value ) ; begin
82446: LD_INT 0
82448: PPUSH
// result := not value ;
82449: LD_ADDR_VAR 0 2
82453: PUSH
82454: LD_VAR 0 1
82458: NOT
82459: ST_TO_ADDR
// end ;
82460: LD_VAR 0 2
82464: RET
// export function Inc ( value ) ; begin
82465: LD_INT 0
82467: PPUSH
// result := value + 1 ;
82468: LD_ADDR_VAR 0 2
82472: PUSH
82473: LD_VAR 0 1
82477: PUSH
82478: LD_INT 1
82480: PLUS
82481: ST_TO_ADDR
// end ;
82482: LD_VAR 0 2
82486: RET
// export function Dec ( value ) ; begin
82487: LD_INT 0
82489: PPUSH
// result := value - 1 ;
82490: LD_ADDR_VAR 0 2
82494: PUSH
82495: LD_VAR 0 1
82499: PUSH
82500: LD_INT 1
82502: MINUS
82503: ST_TO_ADDR
// end ;
82504: LD_VAR 0 2
82508: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82509: LD_INT 0
82511: PPUSH
82512: PPUSH
82513: PPUSH
82514: PPUSH
82515: PPUSH
82516: PPUSH
82517: PPUSH
82518: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82519: LD_VAR 0 1
82523: PPUSH
82524: LD_VAR 0 2
82528: PPUSH
82529: CALL_OW 488
82533: NOT
82534: PUSH
82535: LD_VAR 0 3
82539: PPUSH
82540: LD_VAR 0 4
82544: PPUSH
82545: CALL_OW 488
82549: NOT
82550: OR
82551: IFFALSE 82564
// begin result := - 1 ;
82553: LD_ADDR_VAR 0 5
82557: PUSH
82558: LD_INT 1
82560: NEG
82561: ST_TO_ADDR
// exit ;
82562: GO 82799
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82564: LD_ADDR_VAR 0 12
82568: PUSH
82569: LD_VAR 0 1
82573: PPUSH
82574: LD_VAR 0 2
82578: PPUSH
82579: LD_VAR 0 3
82583: PPUSH
82584: LD_VAR 0 4
82588: PPUSH
82589: CALL 81649 0 4
82593: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82594: LD_ADDR_VAR 0 11
82598: PUSH
82599: LD_VAR 0 1
82603: PPUSH
82604: LD_VAR 0 2
82608: PPUSH
82609: LD_VAR 0 12
82613: PUSH
82614: LD_INT 1
82616: ARRAY
82617: PPUSH
82618: LD_VAR 0 12
82622: PUSH
82623: LD_INT 2
82625: ARRAY
82626: PPUSH
82627: CALL_OW 298
82631: ST_TO_ADDR
// distance := 9999 ;
82632: LD_ADDR_VAR 0 10
82636: PUSH
82637: LD_INT 9999
82639: ST_TO_ADDR
// for i := 0 to 5 do
82640: LD_ADDR_VAR 0 6
82644: PUSH
82645: DOUBLE
82646: LD_INT 0
82648: DEC
82649: ST_TO_ADDR
82650: LD_INT 5
82652: PUSH
82653: FOR_TO
82654: IFFALSE 82797
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82656: LD_ADDR_VAR 0 7
82660: PUSH
82661: LD_VAR 0 1
82665: PPUSH
82666: LD_VAR 0 6
82670: PPUSH
82671: LD_VAR 0 11
82675: PPUSH
82676: CALL_OW 272
82680: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82681: LD_ADDR_VAR 0 8
82685: PUSH
82686: LD_VAR 0 2
82690: PPUSH
82691: LD_VAR 0 6
82695: PPUSH
82696: LD_VAR 0 11
82700: PPUSH
82701: CALL_OW 273
82705: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82706: LD_VAR 0 7
82710: PPUSH
82711: LD_VAR 0 8
82715: PPUSH
82716: CALL_OW 488
82720: NOT
82721: IFFALSE 82725
// continue ;
82723: GO 82653
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82725: LD_ADDR_VAR 0 9
82729: PUSH
82730: LD_VAR 0 12
82734: PUSH
82735: LD_INT 1
82737: ARRAY
82738: PPUSH
82739: LD_VAR 0 12
82743: PUSH
82744: LD_INT 2
82746: ARRAY
82747: PPUSH
82748: LD_VAR 0 7
82752: PPUSH
82753: LD_VAR 0 8
82757: PPUSH
82758: CALL_OW 298
82762: ST_TO_ADDR
// if tmp < distance then
82763: LD_VAR 0 9
82767: PUSH
82768: LD_VAR 0 10
82772: LESS
82773: IFFALSE 82795
// begin result := i ;
82775: LD_ADDR_VAR 0 5
82779: PUSH
82780: LD_VAR 0 6
82784: ST_TO_ADDR
// distance := tmp ;
82785: LD_ADDR_VAR 0 10
82789: PUSH
82790: LD_VAR 0 9
82794: ST_TO_ADDR
// end ; end ;
82795: GO 82653
82797: POP
82798: POP
// end ;
82799: LD_VAR 0 5
82803: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82804: LD_INT 0
82806: PPUSH
82807: PPUSH
// if not driver or not IsInUnit ( driver ) then
82808: LD_VAR 0 1
82812: NOT
82813: PUSH
82814: LD_VAR 0 1
82818: PPUSH
82819: CALL_OW 310
82823: NOT
82824: OR
82825: IFFALSE 82829
// exit ;
82827: GO 82919
// vehicle := IsInUnit ( driver ) ;
82829: LD_ADDR_VAR 0 3
82833: PUSH
82834: LD_VAR 0 1
82838: PPUSH
82839: CALL_OW 310
82843: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82844: LD_VAR 0 1
82848: PPUSH
82849: LD_STRING \
82851: PUSH
82852: LD_INT 0
82854: PUSH
82855: LD_INT 0
82857: PUSH
82858: LD_INT 0
82860: PUSH
82861: LD_INT 0
82863: PUSH
82864: LD_INT 0
82866: PUSH
82867: LD_INT 0
82869: PUSH
82870: EMPTY
82871: LIST
82872: LIST
82873: LIST
82874: LIST
82875: LIST
82876: LIST
82877: LIST
82878: PUSH
82879: LD_STRING E
82881: PUSH
82882: LD_INT 0
82884: PUSH
82885: LD_INT 0
82887: PUSH
82888: LD_VAR 0 3
82892: PUSH
82893: LD_INT 0
82895: PUSH
82896: LD_INT 0
82898: PUSH
82899: LD_INT 0
82901: PUSH
82902: EMPTY
82903: LIST
82904: LIST
82905: LIST
82906: LIST
82907: LIST
82908: LIST
82909: LIST
82910: PUSH
82911: EMPTY
82912: LIST
82913: LIST
82914: PPUSH
82915: CALL_OW 446
// end ;
82919: LD_VAR 0 2
82923: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82924: LD_INT 0
82926: PPUSH
82927: PPUSH
// if not driver or not IsInUnit ( driver ) then
82928: LD_VAR 0 1
82932: NOT
82933: PUSH
82934: LD_VAR 0 1
82938: PPUSH
82939: CALL_OW 310
82943: NOT
82944: OR
82945: IFFALSE 82949
// exit ;
82947: GO 83039
// vehicle := IsInUnit ( driver ) ;
82949: LD_ADDR_VAR 0 3
82953: PUSH
82954: LD_VAR 0 1
82958: PPUSH
82959: CALL_OW 310
82963: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82964: LD_VAR 0 1
82968: PPUSH
82969: LD_STRING \
82971: PUSH
82972: LD_INT 0
82974: PUSH
82975: LD_INT 0
82977: PUSH
82978: LD_INT 0
82980: PUSH
82981: LD_INT 0
82983: PUSH
82984: LD_INT 0
82986: PUSH
82987: LD_INT 0
82989: PUSH
82990: EMPTY
82991: LIST
82992: LIST
82993: LIST
82994: LIST
82995: LIST
82996: LIST
82997: LIST
82998: PUSH
82999: LD_STRING E
83001: PUSH
83002: LD_INT 0
83004: PUSH
83005: LD_INT 0
83007: PUSH
83008: LD_VAR 0 3
83012: PUSH
83013: LD_INT 0
83015: PUSH
83016: LD_INT 0
83018: PUSH
83019: LD_INT 0
83021: PUSH
83022: EMPTY
83023: LIST
83024: LIST
83025: LIST
83026: LIST
83027: LIST
83028: LIST
83029: LIST
83030: PUSH
83031: EMPTY
83032: LIST
83033: LIST
83034: PPUSH
83035: CALL_OW 447
// end ;
83039: LD_VAR 0 2
83043: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83044: LD_INT 0
83046: PPUSH
83047: PPUSH
83048: PPUSH
// tmp := [ ] ;
83049: LD_ADDR_VAR 0 5
83053: PUSH
83054: EMPTY
83055: ST_TO_ADDR
// for i in units do
83056: LD_ADDR_VAR 0 4
83060: PUSH
83061: LD_VAR 0 1
83065: PUSH
83066: FOR_IN
83067: IFFALSE 83105
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83069: LD_ADDR_VAR 0 5
83073: PUSH
83074: LD_VAR 0 5
83078: PPUSH
83079: LD_VAR 0 5
83083: PUSH
83084: LD_INT 1
83086: PLUS
83087: PPUSH
83088: LD_VAR 0 4
83092: PPUSH
83093: CALL_OW 256
83097: PPUSH
83098: CALL_OW 2
83102: ST_TO_ADDR
83103: GO 83066
83105: POP
83106: POP
// if not tmp then
83107: LD_VAR 0 5
83111: NOT
83112: IFFALSE 83116
// exit ;
83114: GO 83164
// if asc then
83116: LD_VAR 0 2
83120: IFFALSE 83144
// result := SortListByListAsc ( units , tmp ) else
83122: LD_ADDR_VAR 0 3
83126: PUSH
83127: LD_VAR 0 1
83131: PPUSH
83132: LD_VAR 0 5
83136: PPUSH
83137: CALL_OW 76
83141: ST_TO_ADDR
83142: GO 83164
// result := SortListByListDesc ( units , tmp ) ;
83144: LD_ADDR_VAR 0 3
83148: PUSH
83149: LD_VAR 0 1
83153: PPUSH
83154: LD_VAR 0 5
83158: PPUSH
83159: CALL_OW 77
83163: ST_TO_ADDR
// end ;
83164: LD_VAR 0 3
83168: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83169: LD_INT 0
83171: PPUSH
83172: PPUSH
// task := GetTaskList ( mech ) ;
83173: LD_ADDR_VAR 0 4
83177: PUSH
83178: LD_VAR 0 1
83182: PPUSH
83183: CALL_OW 437
83187: ST_TO_ADDR
// if not task then
83188: LD_VAR 0 4
83192: NOT
83193: IFFALSE 83197
// exit ;
83195: GO 83239
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83197: LD_ADDR_VAR 0 3
83201: PUSH
83202: LD_VAR 0 4
83206: PUSH
83207: LD_INT 1
83209: ARRAY
83210: PUSH
83211: LD_INT 1
83213: ARRAY
83214: PUSH
83215: LD_STRING r
83217: EQUAL
83218: PUSH
83219: LD_VAR 0 4
83223: PUSH
83224: LD_INT 1
83226: ARRAY
83227: PUSH
83228: LD_INT 4
83230: ARRAY
83231: PUSH
83232: LD_VAR 0 2
83236: EQUAL
83237: AND
83238: ST_TO_ADDR
// end ;
83239: LD_VAR 0 3
83243: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83244: LD_INT 0
83246: PPUSH
// SetDir ( unit , d ) ;
83247: LD_VAR 0 1
83251: PPUSH
83252: LD_VAR 0 4
83256: PPUSH
83257: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
83261: LD_ADDR_VAR 0 6
83265: PUSH
83266: LD_VAR 0 1
83270: PPUSH
83271: LD_VAR 0 2
83275: PPUSH
83276: LD_VAR 0 3
83280: PPUSH
83281: LD_VAR 0 5
83285: PPUSH
83286: CALL_OW 48
83290: ST_TO_ADDR
// end ;
83291: LD_VAR 0 6
83295: RET
// export function ToNaturalNumber ( number ) ; begin
83296: LD_INT 0
83298: PPUSH
// result := number div 1 ;
83299: LD_ADDR_VAR 0 2
83303: PUSH
83304: LD_VAR 0 1
83308: PUSH
83309: LD_INT 1
83311: DIV
83312: ST_TO_ADDR
// if number < 0 then
83313: LD_VAR 0 1
83317: PUSH
83318: LD_INT 0
83320: LESS
83321: IFFALSE 83331
// result := 0 ;
83323: LD_ADDR_VAR 0 2
83327: PUSH
83328: LD_INT 0
83330: ST_TO_ADDR
// end ;
83331: LD_VAR 0 2
83335: RET
// export function SortByClass ( units , class ) ; var un ; begin
83336: LD_INT 0
83338: PPUSH
83339: PPUSH
// if not units or not class then
83340: LD_VAR 0 1
83344: NOT
83345: PUSH
83346: LD_VAR 0 2
83350: NOT
83351: OR
83352: IFFALSE 83356
// exit ;
83354: GO 83451
// result := [ ] ;
83356: LD_ADDR_VAR 0 3
83360: PUSH
83361: EMPTY
83362: ST_TO_ADDR
// for un in units do
83363: LD_ADDR_VAR 0 4
83367: PUSH
83368: LD_VAR 0 1
83372: PUSH
83373: FOR_IN
83374: IFFALSE 83449
// if GetClass ( un ) = class then
83376: LD_VAR 0 4
83380: PPUSH
83381: CALL_OW 257
83385: PUSH
83386: LD_VAR 0 2
83390: EQUAL
83391: IFFALSE 83418
// result := Insert ( result , 1 , un ) else
83393: LD_ADDR_VAR 0 3
83397: PUSH
83398: LD_VAR 0 3
83402: PPUSH
83403: LD_INT 1
83405: PPUSH
83406: LD_VAR 0 4
83410: PPUSH
83411: CALL_OW 2
83415: ST_TO_ADDR
83416: GO 83447
// result := Replace ( result , result + 1 , un ) ;
83418: LD_ADDR_VAR 0 3
83422: PUSH
83423: LD_VAR 0 3
83427: PPUSH
83428: LD_VAR 0 3
83432: PUSH
83433: LD_INT 1
83435: PLUS
83436: PPUSH
83437: LD_VAR 0 4
83441: PPUSH
83442: CALL_OW 1
83446: ST_TO_ADDR
83447: GO 83373
83449: POP
83450: POP
// end ;
83451: LD_VAR 0 3
83455: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83456: LD_INT 0
83458: PPUSH
83459: PPUSH
83460: PPUSH
83461: PPUSH
83462: PPUSH
83463: PPUSH
83464: PPUSH
// result := [ ] ;
83465: LD_ADDR_VAR 0 4
83469: PUSH
83470: EMPTY
83471: ST_TO_ADDR
// if x - r < 0 then
83472: LD_VAR 0 1
83476: PUSH
83477: LD_VAR 0 3
83481: MINUS
83482: PUSH
83483: LD_INT 0
83485: LESS
83486: IFFALSE 83498
// min_x := 0 else
83488: LD_ADDR_VAR 0 8
83492: PUSH
83493: LD_INT 0
83495: ST_TO_ADDR
83496: GO 83514
// min_x := x - r ;
83498: LD_ADDR_VAR 0 8
83502: PUSH
83503: LD_VAR 0 1
83507: PUSH
83508: LD_VAR 0 3
83512: MINUS
83513: ST_TO_ADDR
// if y - r < 0 then
83514: LD_VAR 0 2
83518: PUSH
83519: LD_VAR 0 3
83523: MINUS
83524: PUSH
83525: LD_INT 0
83527: LESS
83528: IFFALSE 83540
// min_y := 0 else
83530: LD_ADDR_VAR 0 7
83534: PUSH
83535: LD_INT 0
83537: ST_TO_ADDR
83538: GO 83556
// min_y := y - r ;
83540: LD_ADDR_VAR 0 7
83544: PUSH
83545: LD_VAR 0 2
83549: PUSH
83550: LD_VAR 0 3
83554: MINUS
83555: ST_TO_ADDR
// max_x := x + r ;
83556: LD_ADDR_VAR 0 9
83560: PUSH
83561: LD_VAR 0 1
83565: PUSH
83566: LD_VAR 0 3
83570: PLUS
83571: ST_TO_ADDR
// max_y := y + r ;
83572: LD_ADDR_VAR 0 10
83576: PUSH
83577: LD_VAR 0 2
83581: PUSH
83582: LD_VAR 0 3
83586: PLUS
83587: ST_TO_ADDR
// for _x = min_x to max_x do
83588: LD_ADDR_VAR 0 5
83592: PUSH
83593: DOUBLE
83594: LD_VAR 0 8
83598: DEC
83599: ST_TO_ADDR
83600: LD_VAR 0 9
83604: PUSH
83605: FOR_TO
83606: IFFALSE 83707
// for _y = min_y to max_y do
83608: LD_ADDR_VAR 0 6
83612: PUSH
83613: DOUBLE
83614: LD_VAR 0 7
83618: DEC
83619: ST_TO_ADDR
83620: LD_VAR 0 10
83624: PUSH
83625: FOR_TO
83626: IFFALSE 83703
// begin if not ValidHex ( _x , _y ) then
83628: LD_VAR 0 5
83632: PPUSH
83633: LD_VAR 0 6
83637: PPUSH
83638: CALL_OW 488
83642: NOT
83643: IFFALSE 83647
// continue ;
83645: GO 83625
// if GetResourceTypeXY ( _x , _y ) then
83647: LD_VAR 0 5
83651: PPUSH
83652: LD_VAR 0 6
83656: PPUSH
83657: CALL_OW 283
83661: IFFALSE 83701
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83663: LD_ADDR_VAR 0 4
83667: PUSH
83668: LD_VAR 0 4
83672: PPUSH
83673: LD_VAR 0 4
83677: PUSH
83678: LD_INT 1
83680: PLUS
83681: PPUSH
83682: LD_VAR 0 5
83686: PUSH
83687: LD_VAR 0 6
83691: PUSH
83692: EMPTY
83693: LIST
83694: LIST
83695: PPUSH
83696: CALL_OW 1
83700: ST_TO_ADDR
// end ;
83701: GO 83625
83703: POP
83704: POP
83705: GO 83605
83707: POP
83708: POP
// end ;
83709: LD_VAR 0 4
83713: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83714: LD_INT 0
83716: PPUSH
83717: PPUSH
83718: PPUSH
83719: PPUSH
83720: PPUSH
83721: PPUSH
83722: PPUSH
83723: PPUSH
// if not units then
83724: LD_VAR 0 1
83728: NOT
83729: IFFALSE 83733
// exit ;
83731: GO 84261
// result := UnitFilter ( units , [ f_ok ] ) ;
83733: LD_ADDR_VAR 0 3
83737: PUSH
83738: LD_VAR 0 1
83742: PPUSH
83743: LD_INT 50
83745: PUSH
83746: EMPTY
83747: LIST
83748: PPUSH
83749: CALL_OW 72
83753: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83754: LD_ADDR_VAR 0 8
83758: PUSH
83759: LD_VAR 0 1
83763: PUSH
83764: LD_INT 1
83766: ARRAY
83767: PPUSH
83768: CALL_OW 255
83772: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83773: LD_ADDR_VAR 0 10
83777: PUSH
83778: LD_INT 29
83780: PUSH
83781: LD_INT 91
83783: PUSH
83784: LD_INT 49
83786: PUSH
83787: EMPTY
83788: LIST
83789: LIST
83790: LIST
83791: ST_TO_ADDR
// if not result then
83792: LD_VAR 0 3
83796: NOT
83797: IFFALSE 83801
// exit ;
83799: GO 84261
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83801: LD_ADDR_VAR 0 5
83805: PUSH
83806: LD_INT 81
83808: PUSH
83809: LD_VAR 0 8
83813: PUSH
83814: EMPTY
83815: LIST
83816: LIST
83817: PPUSH
83818: CALL_OW 69
83822: ST_TO_ADDR
// for i in result do
83823: LD_ADDR_VAR 0 4
83827: PUSH
83828: LD_VAR 0 3
83832: PUSH
83833: FOR_IN
83834: IFFALSE 84259
// begin tag := GetTag ( i ) + 1 ;
83836: LD_ADDR_VAR 0 9
83840: PUSH
83841: LD_VAR 0 4
83845: PPUSH
83846: CALL_OW 110
83850: PUSH
83851: LD_INT 1
83853: PLUS
83854: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83855: LD_ADDR_VAR 0 7
83859: PUSH
83860: LD_VAR 0 4
83864: PPUSH
83865: CALL_OW 250
83869: PPUSH
83870: LD_VAR 0 4
83874: PPUSH
83875: CALL_OW 251
83879: PPUSH
83880: LD_INT 4
83882: PPUSH
83883: CALL 83456 0 3
83887: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83888: LD_VAR 0 4
83892: PPUSH
83893: CALL_OW 247
83897: PUSH
83898: LD_INT 2
83900: EQUAL
83901: PUSH
83902: LD_VAR 0 7
83906: PUSH
83907: LD_INT 2
83909: GREATER
83910: AND
83911: PUSH
83912: LD_VAR 0 4
83916: PPUSH
83917: CALL_OW 264
83921: PUSH
83922: LD_VAR 0 10
83926: IN
83927: NOT
83928: AND
83929: IFFALSE 83968
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83931: LD_VAR 0 4
83935: PPUSH
83936: LD_VAR 0 7
83940: PUSH
83941: LD_INT 1
83943: ARRAY
83944: PUSH
83945: LD_INT 1
83947: ARRAY
83948: PPUSH
83949: LD_VAR 0 7
83953: PUSH
83954: LD_INT 1
83956: ARRAY
83957: PUSH
83958: LD_INT 2
83960: ARRAY
83961: PPUSH
83962: CALL_OW 116
83966: GO 84257
// if path > tag then
83968: LD_VAR 0 2
83972: PUSH
83973: LD_VAR 0 9
83977: GREATER
83978: IFFALSE 84186
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83980: LD_ADDR_VAR 0 6
83984: PUSH
83985: LD_VAR 0 5
83989: PPUSH
83990: LD_INT 91
83992: PUSH
83993: LD_VAR 0 4
83997: PUSH
83998: LD_INT 8
84000: PUSH
84001: EMPTY
84002: LIST
84003: LIST
84004: LIST
84005: PPUSH
84006: CALL_OW 72
84010: ST_TO_ADDR
// if nearEnemy then
84011: LD_VAR 0 6
84015: IFFALSE 84084
// begin if GetWeapon ( i ) = ru_time_lapser then
84017: LD_VAR 0 4
84021: PPUSH
84022: CALL_OW 264
84026: PUSH
84027: LD_INT 49
84029: EQUAL
84030: IFFALSE 84058
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
84032: LD_VAR 0 4
84036: PPUSH
84037: LD_VAR 0 6
84041: PPUSH
84042: LD_VAR 0 4
84046: PPUSH
84047: CALL_OW 74
84051: PPUSH
84052: CALL_OW 112
84056: GO 84082
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
84058: LD_VAR 0 4
84062: PPUSH
84063: LD_VAR 0 6
84067: PPUSH
84068: LD_VAR 0 4
84072: PPUSH
84073: CALL_OW 74
84077: PPUSH
84078: CALL 85332 0 2
// end else
84082: GO 84184
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84084: LD_VAR 0 4
84088: PPUSH
84089: LD_VAR 0 2
84093: PUSH
84094: LD_VAR 0 9
84098: ARRAY
84099: PUSH
84100: LD_INT 1
84102: ARRAY
84103: PPUSH
84104: LD_VAR 0 2
84108: PUSH
84109: LD_VAR 0 9
84113: ARRAY
84114: PUSH
84115: LD_INT 2
84117: ARRAY
84118: PPUSH
84119: CALL_OW 297
84123: PUSH
84124: LD_INT 6
84126: GREATER
84127: IFFALSE 84170
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84129: LD_VAR 0 4
84133: PPUSH
84134: LD_VAR 0 2
84138: PUSH
84139: LD_VAR 0 9
84143: ARRAY
84144: PUSH
84145: LD_INT 1
84147: ARRAY
84148: PPUSH
84149: LD_VAR 0 2
84153: PUSH
84154: LD_VAR 0 9
84158: ARRAY
84159: PUSH
84160: LD_INT 2
84162: ARRAY
84163: PPUSH
84164: CALL_OW 114
84168: GO 84184
// SetTag ( i , tag ) ;
84170: LD_VAR 0 4
84174: PPUSH
84175: LD_VAR 0 9
84179: PPUSH
84180: CALL_OW 109
// end else
84184: GO 84257
// if enemy then
84186: LD_VAR 0 5
84190: IFFALSE 84257
// begin if GetWeapon ( i ) = ru_time_lapser then
84192: LD_VAR 0 4
84196: PPUSH
84197: CALL_OW 264
84201: PUSH
84202: LD_INT 49
84204: EQUAL
84205: IFFALSE 84233
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84207: LD_VAR 0 4
84211: PPUSH
84212: LD_VAR 0 5
84216: PPUSH
84217: LD_VAR 0 4
84221: PPUSH
84222: CALL_OW 74
84226: PPUSH
84227: CALL_OW 112
84231: GO 84257
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84233: LD_VAR 0 4
84237: PPUSH
84238: LD_VAR 0 5
84242: PPUSH
84243: LD_VAR 0 4
84247: PPUSH
84248: CALL_OW 74
84252: PPUSH
84253: CALL 85332 0 2
// end ; end ;
84257: GO 83833
84259: POP
84260: POP
// end ;
84261: LD_VAR 0 3
84265: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84266: LD_INT 0
84268: PPUSH
84269: PPUSH
84270: PPUSH
// if not unit or IsInUnit ( unit ) then
84271: LD_VAR 0 1
84275: NOT
84276: PUSH
84277: LD_VAR 0 1
84281: PPUSH
84282: CALL_OW 310
84286: OR
84287: IFFALSE 84291
// exit ;
84289: GO 84382
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84291: LD_ADDR_VAR 0 4
84295: PUSH
84296: LD_VAR 0 1
84300: PPUSH
84301: CALL_OW 250
84305: PPUSH
84306: LD_VAR 0 2
84310: PPUSH
84311: LD_INT 1
84313: PPUSH
84314: CALL_OW 272
84318: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84319: LD_ADDR_VAR 0 5
84323: PUSH
84324: LD_VAR 0 1
84328: PPUSH
84329: CALL_OW 251
84333: PPUSH
84334: LD_VAR 0 2
84338: PPUSH
84339: LD_INT 1
84341: PPUSH
84342: CALL_OW 273
84346: ST_TO_ADDR
// if ValidHex ( x , y ) then
84347: LD_VAR 0 4
84351: PPUSH
84352: LD_VAR 0 5
84356: PPUSH
84357: CALL_OW 488
84361: IFFALSE 84382
// ComTurnXY ( unit , x , y ) ;
84363: LD_VAR 0 1
84367: PPUSH
84368: LD_VAR 0 4
84372: PPUSH
84373: LD_VAR 0 5
84377: PPUSH
84378: CALL_OW 118
// end ;
84382: LD_VAR 0 3
84386: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84387: LD_INT 0
84389: PPUSH
84390: PPUSH
// result := false ;
84391: LD_ADDR_VAR 0 3
84395: PUSH
84396: LD_INT 0
84398: ST_TO_ADDR
// if not units then
84399: LD_VAR 0 2
84403: NOT
84404: IFFALSE 84408
// exit ;
84406: GO 84453
// for i in units do
84408: LD_ADDR_VAR 0 4
84412: PUSH
84413: LD_VAR 0 2
84417: PUSH
84418: FOR_IN
84419: IFFALSE 84451
// if See ( side , i ) then
84421: LD_VAR 0 1
84425: PPUSH
84426: LD_VAR 0 4
84430: PPUSH
84431: CALL_OW 292
84435: IFFALSE 84449
// begin result := true ;
84437: LD_ADDR_VAR 0 3
84441: PUSH
84442: LD_INT 1
84444: ST_TO_ADDR
// exit ;
84445: POP
84446: POP
84447: GO 84453
// end ;
84449: GO 84418
84451: POP
84452: POP
// end ;
84453: LD_VAR 0 3
84457: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84458: LD_INT 0
84460: PPUSH
84461: PPUSH
84462: PPUSH
84463: PPUSH
// if not unit or not points then
84464: LD_VAR 0 1
84468: NOT
84469: PUSH
84470: LD_VAR 0 2
84474: NOT
84475: OR
84476: IFFALSE 84480
// exit ;
84478: GO 84570
// dist := 99999 ;
84480: LD_ADDR_VAR 0 5
84484: PUSH
84485: LD_INT 99999
84487: ST_TO_ADDR
// for i in points do
84488: LD_ADDR_VAR 0 4
84492: PUSH
84493: LD_VAR 0 2
84497: PUSH
84498: FOR_IN
84499: IFFALSE 84568
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84501: LD_ADDR_VAR 0 6
84505: PUSH
84506: LD_VAR 0 1
84510: PPUSH
84511: LD_VAR 0 4
84515: PUSH
84516: LD_INT 1
84518: ARRAY
84519: PPUSH
84520: LD_VAR 0 4
84524: PUSH
84525: LD_INT 2
84527: ARRAY
84528: PPUSH
84529: CALL_OW 297
84533: ST_TO_ADDR
// if tmpDist < dist then
84534: LD_VAR 0 6
84538: PUSH
84539: LD_VAR 0 5
84543: LESS
84544: IFFALSE 84566
// begin result := i ;
84546: LD_ADDR_VAR 0 3
84550: PUSH
84551: LD_VAR 0 4
84555: ST_TO_ADDR
// dist := tmpDist ;
84556: LD_ADDR_VAR 0 5
84560: PUSH
84561: LD_VAR 0 6
84565: ST_TO_ADDR
// end ; end ;
84566: GO 84498
84568: POP
84569: POP
// end ;
84570: LD_VAR 0 3
84574: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84575: LD_INT 0
84577: PPUSH
// uc_side := side ;
84578: LD_ADDR_OWVAR 20
84582: PUSH
84583: LD_VAR 0 1
84587: ST_TO_ADDR
// uc_nation := 3 ;
84588: LD_ADDR_OWVAR 21
84592: PUSH
84593: LD_INT 3
84595: ST_TO_ADDR
// vc_chassis := 25 ;
84596: LD_ADDR_OWVAR 37
84600: PUSH
84601: LD_INT 25
84603: ST_TO_ADDR
// vc_engine := engine_siberite ;
84604: LD_ADDR_OWVAR 39
84608: PUSH
84609: LD_INT 3
84611: ST_TO_ADDR
// vc_control := control_computer ;
84612: LD_ADDR_OWVAR 38
84616: PUSH
84617: LD_INT 3
84619: ST_TO_ADDR
// vc_weapon := 59 ;
84620: LD_ADDR_OWVAR 40
84624: PUSH
84625: LD_INT 59
84627: ST_TO_ADDR
// result := CreateVehicle ;
84628: LD_ADDR_VAR 0 5
84632: PUSH
84633: CALL_OW 45
84637: ST_TO_ADDR
// SetDir ( result , d ) ;
84638: LD_VAR 0 5
84642: PPUSH
84643: LD_VAR 0 4
84647: PPUSH
84648: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84652: LD_VAR 0 5
84656: PPUSH
84657: LD_VAR 0 2
84661: PPUSH
84662: LD_VAR 0 3
84666: PPUSH
84667: LD_INT 0
84669: PPUSH
84670: CALL_OW 48
// end ;
84674: LD_VAR 0 5
84678: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
84679: LD_INT 0
84681: PPUSH
84682: PPUSH
84683: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
84684: LD_ADDR_VAR 0 2
84688: PUSH
84689: LD_INT 0
84691: PUSH
84692: LD_INT 0
84694: PUSH
84695: LD_INT 0
84697: PUSH
84698: LD_INT 0
84700: PUSH
84701: EMPTY
84702: LIST
84703: LIST
84704: LIST
84705: LIST
84706: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
84707: LD_VAR 0 1
84711: NOT
84712: PUSH
84713: LD_VAR 0 1
84717: PPUSH
84718: CALL_OW 264
84722: PUSH
84723: LD_INT 12
84725: PUSH
84726: LD_INT 51
84728: PUSH
84729: LD_INT 32
84731: PUSH
84732: LD_INT 89
84734: PUSH
84735: EMPTY
84736: LIST
84737: LIST
84738: LIST
84739: LIST
84740: IN
84741: NOT
84742: OR
84743: IFFALSE 84747
// exit ;
84745: GO 84845
// for i := 1 to 3 do
84747: LD_ADDR_VAR 0 3
84751: PUSH
84752: DOUBLE
84753: LD_INT 1
84755: DEC
84756: ST_TO_ADDR
84757: LD_INT 3
84759: PUSH
84760: FOR_TO
84761: IFFALSE 84843
// begin tmp := GetCargo ( cargo , i ) ;
84763: LD_ADDR_VAR 0 4
84767: PUSH
84768: LD_VAR 0 1
84772: PPUSH
84773: LD_VAR 0 3
84777: PPUSH
84778: CALL_OW 289
84782: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
84783: LD_ADDR_VAR 0 2
84787: PUSH
84788: LD_VAR 0 2
84792: PPUSH
84793: LD_VAR 0 3
84797: PPUSH
84798: LD_VAR 0 4
84802: PPUSH
84803: CALL_OW 1
84807: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
84808: LD_ADDR_VAR 0 2
84812: PUSH
84813: LD_VAR 0 2
84817: PPUSH
84818: LD_INT 4
84820: PPUSH
84821: LD_VAR 0 2
84825: PUSH
84826: LD_INT 4
84828: ARRAY
84829: PUSH
84830: LD_VAR 0 4
84834: PLUS
84835: PPUSH
84836: CALL_OW 1
84840: ST_TO_ADDR
// end ;
84841: GO 84760
84843: POP
84844: POP
// end ;
84845: LD_VAR 0 2
84849: RET
// export function Length ( array ) ; begin
84850: LD_INT 0
84852: PPUSH
// result := array + 0 ;
84853: LD_ADDR_VAR 0 2
84857: PUSH
84858: LD_VAR 0 1
84862: PUSH
84863: LD_INT 0
84865: PLUS
84866: ST_TO_ADDR
// end ;
84867: LD_VAR 0 2
84871: RET
// export function PrepareArray ( array ) ; begin
84872: LD_INT 0
84874: PPUSH
// result := array diff 0 ;
84875: LD_ADDR_VAR 0 2
84879: PUSH
84880: LD_VAR 0 1
84884: PUSH
84885: LD_INT 0
84887: DIFF
84888: ST_TO_ADDR
// if not result [ 1 ] then
84889: LD_VAR 0 2
84893: PUSH
84894: LD_INT 1
84896: ARRAY
84897: NOT
84898: IFFALSE 84918
// result := Delete ( result , 1 ) ;
84900: LD_ADDR_VAR 0 2
84904: PUSH
84905: LD_VAR 0 2
84909: PPUSH
84910: LD_INT 1
84912: PPUSH
84913: CALL_OW 3
84917: ST_TO_ADDR
// end ;
84918: LD_VAR 0 2
84922: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84923: LD_INT 0
84925: PPUSH
84926: PPUSH
84927: PPUSH
84928: PPUSH
// sibRocketRange := 25 ;
84929: LD_ADDR_VAR 0 6
84933: PUSH
84934: LD_INT 25
84936: ST_TO_ADDR
// result := false ;
84937: LD_ADDR_VAR 0 4
84941: PUSH
84942: LD_INT 0
84944: ST_TO_ADDR
// for i := 0 to 5 do
84945: LD_ADDR_VAR 0 5
84949: PUSH
84950: DOUBLE
84951: LD_INT 0
84953: DEC
84954: ST_TO_ADDR
84955: LD_INT 5
84957: PUSH
84958: FOR_TO
84959: IFFALSE 85026
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84961: LD_VAR 0 1
84965: PPUSH
84966: LD_VAR 0 5
84970: PPUSH
84971: LD_VAR 0 6
84975: PPUSH
84976: CALL_OW 272
84980: PPUSH
84981: LD_VAR 0 2
84985: PPUSH
84986: LD_VAR 0 5
84990: PPUSH
84991: LD_VAR 0 6
84995: PPUSH
84996: CALL_OW 273
85000: PPUSH
85001: LD_VAR 0 3
85005: PPUSH
85006: CALL_OW 309
85010: IFFALSE 85024
// begin result := true ;
85012: LD_ADDR_VAR 0 4
85016: PUSH
85017: LD_INT 1
85019: ST_TO_ADDR
// exit ;
85020: POP
85021: POP
85022: GO 85028
// end ;
85024: GO 84958
85026: POP
85027: POP
// end ;
85028: LD_VAR 0 4
85032: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
85033: LD_INT 0
85035: PPUSH
85036: PPUSH
85037: PPUSH
// if btype = b_depot then
85038: LD_VAR 0 2
85042: PUSH
85043: LD_INT 0
85045: EQUAL
85046: IFFALSE 85058
// begin result := true ;
85048: LD_ADDR_VAR 0 3
85052: PUSH
85053: LD_INT 1
85055: ST_TO_ADDR
// exit ;
85056: GO 85174
// end ; pom := GetBase ( depot ) ;
85058: LD_ADDR_VAR 0 4
85062: PUSH
85063: LD_VAR 0 1
85067: PPUSH
85068: CALL_OW 274
85072: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
85073: LD_ADDR_VAR 0 5
85077: PUSH
85078: LD_VAR 0 2
85082: PPUSH
85083: LD_VAR 0 1
85087: PPUSH
85088: CALL_OW 248
85092: PPUSH
85093: CALL_OW 450
85097: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
85098: LD_ADDR_VAR 0 3
85102: PUSH
85103: LD_VAR 0 4
85107: PPUSH
85108: LD_INT 1
85110: PPUSH
85111: CALL_OW 275
85115: PUSH
85116: LD_VAR 0 5
85120: PUSH
85121: LD_INT 1
85123: ARRAY
85124: GREATEREQUAL
85125: PUSH
85126: LD_VAR 0 4
85130: PPUSH
85131: LD_INT 2
85133: PPUSH
85134: CALL_OW 275
85138: PUSH
85139: LD_VAR 0 5
85143: PUSH
85144: LD_INT 2
85146: ARRAY
85147: GREATEREQUAL
85148: AND
85149: PUSH
85150: LD_VAR 0 4
85154: PPUSH
85155: LD_INT 3
85157: PPUSH
85158: CALL_OW 275
85162: PUSH
85163: LD_VAR 0 5
85167: PUSH
85168: LD_INT 3
85170: ARRAY
85171: GREATEREQUAL
85172: AND
85173: ST_TO_ADDR
// end ;
85174: LD_VAR 0 3
85178: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
85179: LD_INT 0
85181: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
85182: LD_VAR 0 1
85186: PPUSH
85187: LD_VAR 0 2
85191: PPUSH
85192: LD_INT 0
85194: PPUSH
85195: LD_INT 0
85197: PPUSH
85198: LD_INT 1
85200: PPUSH
85201: LD_INT 0
85203: PPUSH
85204: CALL_OW 587
// end ;
85208: LD_VAR 0 3
85212: RET
// export function CenterOnNow ( unit ) ; begin
85213: LD_INT 0
85215: PPUSH
// result := IsInUnit ( unit ) ;
85216: LD_ADDR_VAR 0 2
85220: PUSH
85221: LD_VAR 0 1
85225: PPUSH
85226: CALL_OW 310
85230: ST_TO_ADDR
// if not result then
85231: LD_VAR 0 2
85235: NOT
85236: IFFALSE 85248
// result := unit ;
85238: LD_ADDR_VAR 0 2
85242: PUSH
85243: LD_VAR 0 1
85247: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
85248: LD_VAR 0 1
85252: PPUSH
85253: CALL_OW 87
// end ;
85257: LD_VAR 0 2
85261: RET
// export function ComMoveHex ( unit , hex ) ; begin
85262: LD_INT 0
85264: PPUSH
// if not hex then
85265: LD_VAR 0 2
85269: NOT
85270: IFFALSE 85274
// exit ;
85272: GO 85327
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
85274: LD_VAR 0 2
85278: PUSH
85279: LD_INT 1
85281: ARRAY
85282: PPUSH
85283: LD_VAR 0 2
85287: PUSH
85288: LD_INT 2
85290: ARRAY
85291: PPUSH
85292: CALL_OW 428
85296: IFFALSE 85300
// exit ;
85298: GO 85327
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
85300: LD_VAR 0 1
85304: PPUSH
85305: LD_VAR 0 2
85309: PUSH
85310: LD_INT 1
85312: ARRAY
85313: PPUSH
85314: LD_VAR 0 2
85318: PUSH
85319: LD_INT 2
85321: ARRAY
85322: PPUSH
85323: CALL_OW 111
// end ;
85327: LD_VAR 0 3
85331: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
85332: LD_INT 0
85334: PPUSH
85335: PPUSH
85336: PPUSH
// if not unit or not enemy then
85337: LD_VAR 0 1
85341: NOT
85342: PUSH
85343: LD_VAR 0 2
85347: NOT
85348: OR
85349: IFFALSE 85353
// exit ;
85351: GO 85477
// x := GetX ( enemy ) ;
85353: LD_ADDR_VAR 0 4
85357: PUSH
85358: LD_VAR 0 2
85362: PPUSH
85363: CALL_OW 250
85367: ST_TO_ADDR
// y := GetY ( enemy ) ;
85368: LD_ADDR_VAR 0 5
85372: PUSH
85373: LD_VAR 0 2
85377: PPUSH
85378: CALL_OW 251
85382: ST_TO_ADDR
// if ValidHex ( x , y ) then
85383: LD_VAR 0 4
85387: PPUSH
85388: LD_VAR 0 5
85392: PPUSH
85393: CALL_OW 488
85397: IFFALSE 85477
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
85399: LD_VAR 0 2
85403: PPUSH
85404: CALL_OW 247
85408: PUSH
85409: LD_INT 3
85411: PUSH
85412: LD_INT 2
85414: PUSH
85415: EMPTY
85416: LIST
85417: LIST
85418: IN
85419: PUSH
85420: LD_VAR 0 1
85424: PPUSH
85425: CALL_OW 255
85429: PPUSH
85430: LD_VAR 0 2
85434: PPUSH
85435: CALL_OW 292
85439: OR
85440: IFFALSE 85458
// ComAttackUnit ( unit , enemy ) else
85442: LD_VAR 0 1
85446: PPUSH
85447: LD_VAR 0 2
85451: PPUSH
85452: CALL_OW 115
85456: GO 85477
// ComAgressiveMove ( unit , x , y ) ;
85458: LD_VAR 0 1
85462: PPUSH
85463: LD_VAR 0 4
85467: PPUSH
85468: LD_VAR 0 5
85472: PPUSH
85473: CALL_OW 114
// end ;
85477: LD_VAR 0 3
85481: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
85482: LD_INT 0
85484: PPUSH
85485: PPUSH
85486: PPUSH
// list := AreaToList ( area , 0 ) ;
85487: LD_ADDR_VAR 0 5
85491: PUSH
85492: LD_VAR 0 1
85496: PPUSH
85497: LD_INT 0
85499: PPUSH
85500: CALL_OW 517
85504: ST_TO_ADDR
// if not list then
85505: LD_VAR 0 5
85509: NOT
85510: IFFALSE 85514
// exit ;
85512: GO 85644
// if all then
85514: LD_VAR 0 2
85518: IFFALSE 85606
// begin for i := 1 to list [ 1 ] do
85520: LD_ADDR_VAR 0 4
85524: PUSH
85525: DOUBLE
85526: LD_INT 1
85528: DEC
85529: ST_TO_ADDR
85530: LD_VAR 0 5
85534: PUSH
85535: LD_INT 1
85537: ARRAY
85538: PUSH
85539: FOR_TO
85540: IFFALSE 85602
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
85542: LD_ADDR_VAR 0 3
85546: PUSH
85547: LD_VAR 0 3
85551: PPUSH
85552: LD_VAR 0 3
85556: PUSH
85557: LD_INT 1
85559: PLUS
85560: PPUSH
85561: LD_VAR 0 5
85565: PUSH
85566: LD_INT 1
85568: ARRAY
85569: PUSH
85570: LD_VAR 0 4
85574: ARRAY
85575: PUSH
85576: LD_VAR 0 5
85580: PUSH
85581: LD_INT 2
85583: ARRAY
85584: PUSH
85585: LD_VAR 0 4
85589: ARRAY
85590: PUSH
85591: EMPTY
85592: LIST
85593: LIST
85594: PPUSH
85595: CALL_OW 1
85599: ST_TO_ADDR
85600: GO 85539
85602: POP
85603: POP
// exit ;
85604: GO 85644
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
85606: LD_ADDR_VAR 0 3
85610: PUSH
85611: LD_VAR 0 5
85615: PUSH
85616: LD_INT 1
85618: ARRAY
85619: PUSH
85620: LD_INT 1
85622: ARRAY
85623: PUSH
85624: LD_VAR 0 5
85628: PUSH
85629: LD_INT 2
85631: ARRAY
85632: PUSH
85633: LD_INT 1
85635: ARRAY
85636: PUSH
85637: EMPTY
85638: LIST
85639: LIST
85640: PUSH
85641: EMPTY
85642: LIST
85643: ST_TO_ADDR
// end ;
85644: LD_VAR 0 3
85648: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
85649: LD_INT 0
85651: PPUSH
85652: PPUSH
// list := AreaToList ( area , 0 ) ;
85653: LD_ADDR_VAR 0 4
85657: PUSH
85658: LD_VAR 0 1
85662: PPUSH
85663: LD_INT 0
85665: PPUSH
85666: CALL_OW 517
85670: ST_TO_ADDR
// if not list then
85671: LD_VAR 0 4
85675: NOT
85676: IFFALSE 85680
// exit ;
85678: GO 85721
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
85680: LD_ADDR_VAR 0 3
85684: PUSH
85685: LD_VAR 0 4
85689: PUSH
85690: LD_INT 1
85692: ARRAY
85693: PUSH
85694: LD_INT 1
85696: ARRAY
85697: PUSH
85698: LD_VAR 0 4
85702: PUSH
85703: LD_INT 2
85705: ARRAY
85706: PUSH
85707: LD_INT 1
85709: ARRAY
85710: PUSH
85711: LD_VAR 0 2
85715: PUSH
85716: EMPTY
85717: LIST
85718: LIST
85719: LIST
85720: ST_TO_ADDR
// end ;
85721: LD_VAR 0 3
85725: RET
// export function First ( array ) ; begin
85726: LD_INT 0
85728: PPUSH
// if not array then
85729: LD_VAR 0 1
85733: NOT
85734: IFFALSE 85738
// exit ;
85736: GO 85752
// result := array [ 1 ] ;
85738: LD_ADDR_VAR 0 2
85742: PUSH
85743: LD_VAR 0 1
85747: PUSH
85748: LD_INT 1
85750: ARRAY
85751: ST_TO_ADDR
// end ;
85752: LD_VAR 0 2
85756: RET
// export function Last ( array ) ; begin
85757: LD_INT 0
85759: PPUSH
// if not array then
85760: LD_VAR 0 1
85764: NOT
85765: IFFALSE 85769
// exit ;
85767: GO 85785
// result := array [ array ] ;
85769: LD_ADDR_VAR 0 2
85773: PUSH
85774: LD_VAR 0 1
85778: PUSH
85779: LD_VAR 0 1
85783: ARRAY
85784: ST_TO_ADDR
// end ;
85785: LD_VAR 0 2
85789: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
85790: LD_INT 0
85792: PPUSH
85793: PPUSH
// result := [ ] ;
85794: LD_ADDR_VAR 0 5
85798: PUSH
85799: EMPTY
85800: ST_TO_ADDR
// if not array then
85801: LD_VAR 0 1
85805: NOT
85806: IFFALSE 85810
// exit ;
85808: GO 85922
// for i := 1 to array do
85810: LD_ADDR_VAR 0 6
85814: PUSH
85815: DOUBLE
85816: LD_INT 1
85818: DEC
85819: ST_TO_ADDR
85820: LD_VAR 0 1
85824: PUSH
85825: FOR_TO
85826: IFFALSE 85920
// if array [ i ] [ index ] = value then
85828: LD_VAR 0 1
85832: PUSH
85833: LD_VAR 0 6
85837: ARRAY
85838: PUSH
85839: LD_VAR 0 2
85843: ARRAY
85844: PUSH
85845: LD_VAR 0 3
85849: EQUAL
85850: IFFALSE 85918
// begin if indexColumn then
85852: LD_VAR 0 4
85856: IFFALSE 85892
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85858: LD_ADDR_VAR 0 5
85862: PUSH
85863: LD_VAR 0 5
85867: PPUSH
85868: LD_VAR 0 1
85872: PUSH
85873: LD_VAR 0 6
85877: ARRAY
85878: PUSH
85879: LD_VAR 0 4
85883: ARRAY
85884: PPUSH
85885: CALL 81104 0 2
85889: ST_TO_ADDR
85890: GO 85918
// result := Join ( result , array [ i ] ) ;
85892: LD_ADDR_VAR 0 5
85896: PUSH
85897: LD_VAR 0 5
85901: PPUSH
85902: LD_VAR 0 1
85906: PUSH
85907: LD_VAR 0 6
85911: ARRAY
85912: PPUSH
85913: CALL 81104 0 2
85917: ST_TO_ADDR
// end ;
85918: GO 85825
85920: POP
85921: POP
// end ;
85922: LD_VAR 0 5
85926: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85927: LD_INT 0
85929: PPUSH
// if not vehicles or not parkingPoint then
85930: LD_VAR 0 1
85934: NOT
85935: PUSH
85936: LD_VAR 0 2
85940: NOT
85941: OR
85942: IFFALSE 85946
// exit ;
85944: GO 86044
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85946: LD_ADDR_VAR 0 1
85950: PUSH
85951: LD_VAR 0 1
85955: PPUSH
85956: LD_INT 50
85958: PUSH
85959: EMPTY
85960: LIST
85961: PUSH
85962: LD_INT 3
85964: PUSH
85965: LD_INT 92
85967: PUSH
85968: LD_VAR 0 2
85972: PUSH
85973: LD_INT 1
85975: ARRAY
85976: PUSH
85977: LD_VAR 0 2
85981: PUSH
85982: LD_INT 2
85984: ARRAY
85985: PUSH
85986: LD_INT 8
85988: PUSH
85989: EMPTY
85990: LIST
85991: LIST
85992: LIST
85993: LIST
85994: PUSH
85995: EMPTY
85996: LIST
85997: LIST
85998: PUSH
85999: EMPTY
86000: LIST
86001: LIST
86002: PPUSH
86003: CALL_OW 72
86007: ST_TO_ADDR
// if not vehicles then
86008: LD_VAR 0 1
86012: NOT
86013: IFFALSE 86017
// exit ;
86015: GO 86044
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
86017: LD_VAR 0 1
86021: PPUSH
86022: LD_VAR 0 2
86026: PUSH
86027: LD_INT 1
86029: ARRAY
86030: PPUSH
86031: LD_VAR 0 2
86035: PUSH
86036: LD_INT 2
86038: ARRAY
86039: PPUSH
86040: CALL_OW 111
// end ;
86044: LD_VAR 0 3
86048: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
86049: LD_INT 0
86051: PPUSH
86052: PPUSH
86053: PPUSH
// if not side or not area then
86054: LD_VAR 0 1
86058: NOT
86059: PUSH
86060: LD_VAR 0 2
86064: NOT
86065: OR
86066: IFFALSE 86070
// exit ;
86068: GO 86189
// tmp := AreaToList ( area , 0 ) ;
86070: LD_ADDR_VAR 0 5
86074: PUSH
86075: LD_VAR 0 2
86079: PPUSH
86080: LD_INT 0
86082: PPUSH
86083: CALL_OW 517
86087: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
86088: LD_ADDR_VAR 0 4
86092: PUSH
86093: DOUBLE
86094: LD_INT 1
86096: DEC
86097: ST_TO_ADDR
86098: LD_VAR 0 5
86102: PUSH
86103: LD_INT 1
86105: ARRAY
86106: PUSH
86107: FOR_TO
86108: IFFALSE 86187
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
86110: LD_VAR 0 5
86114: PUSH
86115: LD_INT 1
86117: ARRAY
86118: PUSH
86119: LD_VAR 0 4
86123: ARRAY
86124: PPUSH
86125: LD_VAR 0 5
86129: PUSH
86130: LD_INT 2
86132: ARRAY
86133: PUSH
86134: LD_VAR 0 4
86138: ARRAY
86139: PPUSH
86140: CALL_OW 351
86144: IFFALSE 86185
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
86146: LD_VAR 0 5
86150: PUSH
86151: LD_INT 1
86153: ARRAY
86154: PUSH
86155: LD_VAR 0 4
86159: ARRAY
86160: PPUSH
86161: LD_VAR 0 5
86165: PUSH
86166: LD_INT 2
86168: ARRAY
86169: PUSH
86170: LD_VAR 0 4
86174: ARRAY
86175: PPUSH
86176: LD_VAR 0 1
86180: PPUSH
86181: CALL_OW 244
// end ;
86185: GO 86107
86187: POP
86188: POP
// end ; end_of_file
86189: LD_VAR 0 3
86193: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86194: LD_VAR 0 1
86198: PUSH
86199: LD_INT 200
86201: DOUBLE
86202: GREATEREQUAL
86203: IFFALSE 86211
86205: LD_INT 299
86207: DOUBLE
86208: LESSEQUAL
86209: IFTRUE 86213
86211: GO 86245
86213: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86214: LD_VAR 0 1
86218: PPUSH
86219: LD_VAR 0 2
86223: PPUSH
86224: LD_VAR 0 3
86228: PPUSH
86229: LD_VAR 0 4
86233: PPUSH
86234: LD_VAR 0 5
86238: PPUSH
86239: CALL 38610 0 5
86243: GO 86322
86245: LD_INT 300
86247: DOUBLE
86248: GREATEREQUAL
86249: IFFALSE 86257
86251: LD_INT 399
86253: DOUBLE
86254: LESSEQUAL
86255: IFTRUE 86259
86257: GO 86321
86259: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86260: LD_VAR 0 1
86264: PPUSH
86265: LD_VAR 0 2
86269: PPUSH
86270: LD_VAR 0 3
86274: PPUSH
86275: LD_VAR 0 4
86279: PPUSH
86280: LD_VAR 0 5
86284: PPUSH
86285: LD_VAR 0 6
86289: PPUSH
86290: LD_VAR 0 7
86294: PPUSH
86295: LD_VAR 0 8
86299: PPUSH
86300: LD_VAR 0 9
86304: PPUSH
86305: LD_VAR 0 10
86309: PPUSH
86310: LD_VAR 0 11
86314: PPUSH
86315: CALL 34518 0 11
86319: GO 86322
86321: POP
// end ;
86322: PPOPN 11
86324: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86325: LD_VAR 0 1
86329: PPUSH
86330: LD_VAR 0 2
86334: PPUSH
86335: LD_VAR 0 3
86339: PPUSH
86340: LD_VAR 0 4
86344: PPUSH
86345: LD_VAR 0 5
86349: PPUSH
86350: CALL 37995 0 5
// end ; end_of_file
86354: PPOPN 5
86356: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86357: LD_VAR 0 1
86361: PPUSH
86362: LD_VAR 0 2
86366: PPUSH
86367: LD_VAR 0 3
86371: PPUSH
86372: LD_VAR 0 4
86376: PPUSH
86377: LD_VAR 0 5
86381: PPUSH
86382: LD_VAR 0 6
86386: PPUSH
86387: CALL 22170 0 6
// end ;
86391: PPOPN 6
86393: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86394: LD_INT 0
86396: PPUSH
// begin if not units then
86397: LD_VAR 0 1
86401: NOT
86402: IFFALSE 86406
// exit ;
86404: GO 86406
// end ;
86406: PPOPN 7
86408: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86409: CALL 22057 0 0
// end ;
86413: PPOPN 1
86415: END
