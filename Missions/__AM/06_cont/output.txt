// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7676 0 0
// CreateNature ;
  57: CALL 21095 0 0
// PrepareRussian ;
  61: CALL 5806 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 10995 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 42168 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 42168 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 42168 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 42168 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 42168 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 42168 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 42168 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 42168 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 42168 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 42168 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 42168 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: PUSH
2564: LD_VAR 0 4
2568: PPUSH
2569: LD_INT 21
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PPUSH
2579: CALL_OW 70
2583: OR
2584: IFFALSE 2602
// begin area := HarrisonSupportArea2 ;
2586: LD_ADDR_VAR 0 4
2590: PUSH
2591: LD_INT 31
2593: ST_TO_ADDR
// dir := 1 ;
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// end ; uc_side = 1 ;
2602: LD_ADDR_OWVAR 20
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// uc_nation = 1 ;
2610: LD_ADDR_OWVAR 21
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// vc_engine := engine_combustion ;
2618: LD_ADDR_OWVAR 39
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_control := control_manual ;
2626: LD_ADDR_OWVAR 38
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2634: LD_ADDR_OWVAR 40
2638: PUSH
2639: LD_INT 4
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2663: LD_ADDR_OWVAR 37
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// veh := CreateVehicle ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 45
2680: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_VAR 0 5
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_VAR 0 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2712: LD_VAR 0 3
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 240
// hc_class := class_engineer ;
2724: LD_ADDR_OWVAR 28
2728: PUSH
2729: LD_INT 2
2731: ST_TO_ADDR
// hc_sex := sex_male ;
2732: LD_ADDR_OWVAR 27
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2740: LD_ADDR_OWVAR 33
2744: PUSH
2745: LD_STRING SecondCharsGal
2747: ST_TO_ADDR
// hc_face_number := 52 ;
2748: LD_ADDR_OWVAR 34
2752: PUSH
2753: LD_INT 52
2755: ST_TO_ADDR
// hc_name := Craig Brown ;
2756: LD_ADDR_OWVAR 26
2760: PUSH
2761: LD_STRING Craig Brown
2763: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2764: LD_ADDR_OWVAR 29
2768: PUSH
2769: LD_INT 10
2771: PUSH
2772: LD_INT 10
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2779: LD_ADDR_OWVAR 30
2783: PUSH
2784: LD_INT 0
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 0
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2802: LD_ADDR_OWVAR 31
2806: PUSH
2807: LD_INT 2
2809: PUSH
2810: LD_INT 3
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2825: LD_ADDR_EXP 18
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2835: LD_EXP 18
2839: PPUSH
2840: LD_VAR 0 3
2844: PPUSH
2845: CALL_OW 52
// vc_engine := engine_combustion ;
2849: LD_ADDR_OWVAR 39
2853: PUSH
2854: LD_INT 1
2856: ST_TO_ADDR
// vc_control := control_manual ;
2857: LD_ADDR_OWVAR 38
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2865: LD_ADDR_OWVAR 40
2869: PUSH
2870: LD_INT 5
2872: PUSH
2873: LD_INT 5
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_OWVAR 67
2892: ARRAY
2893: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2894: LD_ADDR_OWVAR 37
2898: PUSH
2899: LD_INT 2
2901: ST_TO_ADDR
// veh := CreateVehicle ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: CALL_OW 45
2911: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_VAR 0 5
2921: PPUSH
2922: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 50
2950: PPUSH
2951: CALL_OW 240
// hc_class := class_soldier ;
2955: LD_ADDR_OWVAR 28
2959: PUSH
2960: LD_INT 1
2962: ST_TO_ADDR
// hc_sex := sex_female ;
2963: LD_ADDR_OWVAR 27
2967: PUSH
2968: LD_INT 2
2970: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2971: LD_ADDR_OWVAR 33
2975: PUSH
2976: LD_STRING SecondCharsGal
2978: ST_TO_ADDR
// hc_face_number := 42 ;
2979: LD_ADDR_OWVAR 34
2983: PUSH
2984: LD_INT 42
2986: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2987: LD_ADDR_OWVAR 29
2991: PUSH
2992: LD_INT 11
2994: PUSH
2995: LD_INT 10
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
3002: LD_ADDR_OWVAR 26
3006: PUSH
3007: LD_STRING Ingrid Jonsson
3009: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
3010: LD_ADDR_OWVAR 30
3014: PUSH
3015: LD_INT 1
3017: PUSH
3018: LD_INT 1
3020: PUSH
3021: LD_INT 0
3023: PUSH
3024: LD_INT 0
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
3033: LD_ADDR_OWVAR 31
3037: PUSH
3038: LD_INT 3
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3056: LD_ADDR_EXP 19
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3091: LD_ADDR_VAR 0 4
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 1
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 23
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 26
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PPUSH
3131: CALL_OW 69
3135: PUSH
3136: LD_EXP 3
3140: PUSH
3141: LD_EXP 4
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_EXP 9
3155: PUSH
3156: LD_EXP 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: DIFF
3168: ST_TO_ADDR
// for i in _tmp do
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 4
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3221
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 32
3189: PPUSH
3190: CALL_OW 308
3194: PUSH
3195: LD_VAR 0 2
3199: PPUSH
3200: CALL_OW 302
3204: AND
3205: IFFALSE 3219
// begin tmp := i ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// break ;
3217: GO 3221
// end ;
3219: GO 3179
3221: POP
3222: POP
// if not tmp then
3223: LD_VAR 0 3
3227: NOT
3228: IFFALSE 3240
// tmp := JMM ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_EXP 1
3239: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// if IsDead ( tmp ) then
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL_OW 301
3256: IFFALSE 3268
// tmp := JMM ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: LD_EXP 1
3267: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3268: LD_INT 81
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 91
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: PUSH
3304: LD_EXP 27
3308: PUSH
3309: LD_INT 6300
3311: LESS
3312: OR
3313: IFFALSE 3240
// blockSpawn := 1 ;
3315: LD_ADDR_EXP 30
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// uc_side := 4 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 4
3330: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3331: LD_ADDR_EXP 16
3335: PUSH
3336: LD_STRING Joan
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: LD_EXP 44
3346: PPUSH
3347: CALL 42168 0 3
3351: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3352: LD_EXP 16
3356: PPUSH
3357: LD_VAR 0 3
3361: PPUSH
3362: CALL_OW 250
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL_OW 251
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3387: LD_EXP 16
3391: PPUSH
3392: LD_INT 250
3394: PPUSH
3395: CALL_OW 234
// InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3403: LD_EXP 16
3407: PPUSH
3408: CALL_OW 87
// wait ( 0 0$2 ) ;
3412: LD_INT 70
3414: PPUSH
3415: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3428: LD_VAR 0 3
3432: PPUSH
3433: CALL_OW 122
// wait ( 0 0$1 ) ;
3437: LD_INT 35
3439: PPUSH
3440: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_EXP 16
3453: PPUSH
3454: CALL_OW 112
// wait ( 0 0$2 ) ;
3458: LD_INT 70
3460: PPUSH
3461: CALL_OW 67
// DialogueOn ;
3465: CALL_OW 6
// if tmp = JMM then
3469: LD_VAR 0 3
3473: PUSH
3474: LD_EXP 1
3478: EQUAL
3479: IFFALSE 3628
// begin ComTurnUnit ( JMM , Joan ) ;
3481: LD_EXP 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3495: LD_EXP 1
3499: PPUSH
3500: LD_STRING D5b-JMM-1
3502: PPUSH
3503: CALL_OW 88
// DialogueOff ;
3507: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3511: LD_EXP 16
3515: PPUSH
3516: LD_INT 500
3518: PPUSH
3519: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3523: LD_EXP 16
3527: PPUSH
3528: LD_EXP 1
3532: PPUSH
3533: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3537: LD_EXP 1
3541: PPUSH
3542: LD_EXP 16
3546: PPUSH
3547: CALL_OW 119
// wait ( 0 0$1 ) ;
3551: LD_INT 35
3553: PPUSH
3554: CALL_OW 67
// DialogueOn ;
3558: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3562: LD_EXP 16
3566: PPUSH
3567: LD_STRING D5b-Joan-1
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3574: LD_EXP 1
3578: PPUSH
3579: LD_STRING D5b-JMM-2
3581: PPUSH
3582: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3586: LD_EXP 16
3590: PPUSH
3591: LD_STRING D5b-Joan-2
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3598: LD_EXP 1
3602: PPUSH
3603: LD_STRING D5b-JMM-3
3605: PPUSH
3606: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3610: LD_EXP 16
3614: PPUSH
3615: LD_STRING D5b-Joan-3
3617: PPUSH
3618: CALL_OW 88
// DialogueOff ;
3622: CALL_OW 7
// end else
3626: GO 4094
// begin ComTurnUnit ( tmp , Joan ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3642: LD_VAR 0 3
3646: PPUSH
3647: LD_STRING D5a-Sol1-1
3649: PPUSH
3650: CALL_OW 88
// DialogueOff ;
3654: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3658: LD_EXP 16
3662: PPUSH
3663: LD_INT 500
3665: PPUSH
3666: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3670: LD_EXP 16
3674: PPUSH
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3684: LD_VAR 0 3
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: CALL_OW 119
// wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// DialogueOn ;
3705: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3709: LD_EXP 16
3713: PPUSH
3714: LD_STRING D5a-Joan-1
3716: PPUSH
3717: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_STRING D5a-Sol1-2
3728: PPUSH
3729: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3733: LD_EXP 16
3737: PPUSH
3738: LD_STRING D5a-Joan-2
3740: PPUSH
3741: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_STRING D5a-Sol1-3
3752: PPUSH
3753: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3757: LD_EXP 16
3761: PPUSH
3762: LD_STRING D5a-Joan-3
3764: PPUSH
3765: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_STRING D5a-Sol1-4
3776: PPUSH
3777: CALL_OW 88
// DialogueOff ;
3781: CALL_OW 7
// if GetDistUnits ( JMM , Joan ) > 10 then
3785: LD_EXP 1
3789: PPUSH
3790: LD_EXP 16
3794: PPUSH
3795: CALL_OW 296
3799: PUSH
3800: LD_INT 10
3802: GREATER
3803: IFFALSE 3886
// begin InGameOff ;
3805: CALL_OW 9
// ComMoveUnit ( Joan , tmp ) ;
3809: LD_EXP 16
3813: PPUSH
3814: LD_VAR 0 3
3818: PPUSH
3819: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3823: LD_INT 35
3825: PPUSH
3826: CALL_OW 67
// until GetDistUnits ( JMM , Joan ) < 8 or IsDead ( Joan ) ;
3830: LD_EXP 1
3834: PPUSH
3835: LD_EXP 16
3839: PPUSH
3840: CALL_OW 296
3844: PUSH
3845: LD_INT 8
3847: LESS
3848: PUSH
3849: LD_EXP 16
3853: PPUSH
3854: CALL_OW 301
3858: OR
3859: IFFALSE 3823
// if IsDead ( Joan ) then
3861: LD_EXP 16
3865: PPUSH
3866: CALL_OW 301
3870: IFFALSE 3882
// begin blockSpawn := false ;
3872: LD_ADDR_EXP 30
3876: PUSH
3877: LD_INT 0
3879: ST_TO_ADDR
// exit ;
3880: GO 4225
// end ; InGameOn ;
3882: CALL_OW 8
// end ; if JMM in FilterAllUnits ( [ f_driving ] ) then
3886: LD_EXP 1
3890: PUSH
3891: LD_INT 55
3893: PUSH
3894: EMPTY
3895: LIST
3896: PPUSH
3897: CALL_OW 69
3901: IN
3902: IFFALSE 3925
// begin ComMoveUnit ( JMM , Joan ) ;
3904: LD_EXP 1
3908: PPUSH
3909: LD_EXP 16
3913: PPUSH
3914: CALL_OW 112
// wait ( 0 0$05 ) ;
3918: LD_INT 175
3920: PPUSH
3921: CALL_OW 67
// end ; ComExit ( JMM ) ;
3925: LD_EXP 1
3929: PPUSH
3930: CALL 80268 0 1
// wait ( 0 0$1 ) ;
3934: LD_INT 35
3936: PPUSH
3937: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3941: LD_INT 35
3943: PPUSH
3944: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3948: LD_EXP 16
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PPUSH
3962: LD_EXP 1
3966: PPUSH
3967: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3971: LD_EXP 16
3975: PPUSH
3976: LD_EXP 1
3980: PPUSH
3981: CALL_OW 296
3985: PUSH
3986: LD_INT 5
3988: LESS
3989: IFFALSE 3941
// ComTurnUnit ( Joan , JMM ) ;
3991: LD_EXP 16
3995: PPUSH
3996: LD_EXP 1
4000: PPUSH
4001: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
4005: LD_EXP 1
4009: PPUSH
4010: LD_EXP 16
4014: PPUSH
4015: CALL_OW 119
// wait ( 0 0$1 ) ;
4019: LD_INT 35
4021: PPUSH
4022: CALL_OW 67
// DialogueOn ;
4026: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
4030: LD_EXP 16
4034: PPUSH
4035: LD_STRING D5a-Joan-4
4037: PPUSH
4038: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
4042: LD_EXP 1
4046: PPUSH
4047: LD_STRING D5a-JMM-4
4049: PPUSH
4050: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
4054: LD_EXP 16
4058: PPUSH
4059: LD_STRING D5a-Joan-5
4061: PPUSH
4062: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4066: LD_EXP 1
4070: PPUSH
4071: LD_STRING D5a-JMM-5
4073: PPUSH
4074: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4078: LD_EXP 16
4082: PPUSH
4083: LD_STRING D5a-Joan-6
4085: PPUSH
4086: CALL_OW 88
// DialogueOff ;
4090: CALL_OW 7
// end ; DialogueOn ;
4094: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4098: LD_EXP 1
4102: PPUSH
4103: LD_STRING D6-JMM-1
4105: PPUSH
4106: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4110: LD_EXP 16
4114: PPUSH
4115: LD_STRING D6-Joan-1
4117: PPUSH
4118: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4122: LD_EXP 1
4126: PPUSH
4127: LD_STRING D6-JMM-2
4129: PPUSH
4130: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4134: LD_EXP 16
4138: PPUSH
4139: LD_STRING D6-Joan-2
4141: PPUSH
4142: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4146: LD_EXP 1
4150: PPUSH
4151: LD_STRING D6-JMM-3
4153: PPUSH
4154: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4158: LD_EXP 16
4162: PPUSH
4163: LD_STRING D6-Joan-3
4165: PPUSH
4166: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4170: LD_EXP 1
4174: PPUSH
4175: LD_STRING D6-JMM-4
4177: PPUSH
4178: CALL_OW 88
// DialogueOff ;
4182: CALL_OW 7
// InGameOff ;
4186: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4190: LD_EXP 16
4194: PPUSH
4195: LD_INT 1
4197: PPUSH
4198: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4202: LD_STRING MJ
4204: PPUSH
4205: CALL_OW 337
// joanStatus = 1 ;
4209: LD_ADDR_EXP 17
4213: PUSH
4214: LD_INT 1
4216: ST_TO_ADDR
// blockSpawn = 0 ;
4217: LD_ADDR_EXP 30
4221: PUSH
4222: LD_INT 0
4224: ST_TO_ADDR
// end ;
4225: LD_VAR 0 1
4229: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4230: LD_INT 0
4232: PPUSH
4233: PPUSH
// if not number or number > 8 then
4234: LD_VAR 0 1
4238: NOT
4239: PUSH
4240: LD_VAR 0 1
4244: PUSH
4245: LD_INT 8
4247: GREATER
4248: OR
4249: IFFALSE 4253
// exit ;
4251: GO 5801
// repeat wait ( 0 0$7 ) ;
4253: LD_INT 245
4255: PPUSH
4256: CALL_OW 67
// until blockSpawn = 0 ;
4260: LD_EXP 30
4264: PUSH
4265: LD_INT 0
4267: EQUAL
4268: IFFALSE 4253
// uc_side := 1 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 1
4277: ST_TO_ADDR
// uc_nation := 1 ;
4278: LD_ADDR_OWVAR 21
4282: PUSH
4283: LD_INT 1
4285: ST_TO_ADDR
// InitHc ;
4286: CALL_OW 19
// if number = 1 then
4290: LD_VAR 0 1
4294: PUSH
4295: LD_INT 1
4297: EQUAL
4298: IFFALSE 4474
// begin hc_class := 3 ;
4300: LD_ADDR_OWVAR 28
4304: PUSH
4305: LD_INT 3
4307: ST_TO_ADDR
// hc_sex := sex_male ;
4308: LD_ADDR_OWVAR 27
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4316: LD_ADDR_OWVAR 33
4320: PUSH
4321: LD_STRING SecondCharsGal
4323: ST_TO_ADDR
// hc_face_number := 55 ;
4324: LD_ADDR_OWVAR 34
4328: PUSH
4329: LD_INT 55
4331: ST_TO_ADDR
// hc_name := George McCarthy ;
4332: LD_ADDR_OWVAR 26
4336: PUSH
4337: LD_STRING George McCarthy
4339: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4340: LD_ADDR_OWVAR 29
4344: PUSH
4345: LD_INT 11
4347: PUSH
4348: LD_INT 10
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4355: LD_ADDR_OWVAR 30
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: LD_INT 2
4368: PUSH
4369: LD_INT 0
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4378: LD_ADDR_OWVAR 31
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: LD_INT 2
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: ST_TO_ADDR
// un = CreateHuman ;
4401: LD_ADDR_VAR 0 3
4405: PUSH
4406: CALL_OW 44
4410: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 23
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4426: LD_VAR 0 3
4430: PPUSH
4431: CALL_OW 87
// wait ( 0 0$1 ) ;
4435: LD_INT 35
4437: PPUSH
4438: CALL_OW 67
// DialogueOn ;
4442: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4446: LD_VAR 0 3
4450: PPUSH
4451: LD_STRING D11d-Sol4-1
4453: PPUSH
4454: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4458: LD_EXP 1
4462: PPUSH
4463: LD_STRING D11d-JMM-1
4465: PPUSH
4466: CALL_OW 88
// DialogueOff ;
4470: CALL_OW 7
// end ; if number = 2 then
4474: LD_VAR 0 1
4478: PUSH
4479: LD_INT 2
4481: EQUAL
4482: IFFALSE 4658
// begin hc_class := 1 ;
4484: LD_ADDR_OWVAR 28
4488: PUSH
4489: LD_INT 1
4491: ST_TO_ADDR
// hc_sex := sex_male ;
4492: LD_ADDR_OWVAR 27
4496: PUSH
4497: LD_INT 1
4499: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4500: LD_ADDR_OWVAR 33
4504: PUSH
4505: LD_STRING AmGalRemake
4507: ST_TO_ADDR
// hc_face_number := 7 ;
4508: LD_ADDR_OWVAR 34
4512: PUSH
4513: LD_INT 7
4515: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4516: LD_ADDR_OWVAR 26
4520: PUSH
4521: LD_STRING Bobby Jordan
4523: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4524: LD_ADDR_OWVAR 29
4528: PUSH
4529: LD_INT 9
4531: PUSH
4532: LD_INT 11
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4539: LD_ADDR_OWVAR 30
4543: PUSH
4544: LD_INT 1
4546: PUSH
4547: LD_INT 0
4549: PUSH
4550: LD_INT 0
4552: PUSH
4553: LD_INT 1
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4562: LD_ADDR_OWVAR 31
4566: PUSH
4567: LD_INT 2
4569: PUSH
4570: LD_INT 1
4572: PUSH
4573: LD_INT 1
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: ST_TO_ADDR
// un = CreateHuman ;
4585: LD_ADDR_VAR 0 3
4589: PUSH
4590: CALL_OW 44
4594: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4595: LD_VAR 0 3
4599: PPUSH
4600: LD_INT 24
4602: PPUSH
4603: LD_INT 1
4605: PPUSH
4606: CALL_OW 49
// wait ( 0 0$1 ) ;
4610: LD_INT 35
4612: PPUSH
4613: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4617: LD_VAR 0 3
4621: PPUSH
4622: CALL_OW 87
// DialogueOn ;
4626: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4630: LD_VAR 0 3
4634: PPUSH
4635: LD_STRING D11b-Sol3-1
4637: PPUSH
4638: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4642: LD_EXP 1
4646: PPUSH
4647: LD_STRING D11b-JMM-1
4649: PPUSH
4650: CALL_OW 88
// DialogueOff ;
4654: CALL_OW 7
// end ; if number = 3 then
4658: LD_VAR 0 1
4662: PUSH
4663: LD_INT 3
4665: EQUAL
4666: IFFALSE 4830
// begin hc_class := 1 ;
4668: LD_ADDR_OWVAR 28
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// hc_sex := sex_male ;
4676: LD_ADDR_OWVAR 27
4680: PUSH
4681: LD_INT 1
4683: ST_TO_ADDR
// hc_gallery := DJ ;
4684: LD_ADDR_OWVAR 33
4688: PUSH
4689: LD_STRING DJ
4691: ST_TO_ADDR
// hc_face_number := 1 ;
4692: LD_ADDR_OWVAR 34
4696: PUSH
4697: LD_INT 1
4699: ST_TO_ADDR
// hc_name := Darius Dajay ;
4700: LD_ADDR_OWVAR 26
4704: PUSH
4705: LD_STRING Darius Dajay
4707: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4708: LD_ADDR_OWVAR 29
4712: PUSH
4713: LD_INT 11
4715: PUSH
4716: LD_INT 11
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4723: LD_ADDR_OWVAR 30
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 0
4733: PUSH
4734: LD_INT 0
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4746: LD_ADDR_OWVAR 31
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: LD_INT 0
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: LD_INT 0
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: ST_TO_ADDR
// un = CreateHuman ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 44
4778: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 25
4786: PPUSH
4787: LD_INT 1
4789: PPUSH
4790: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4794: LD_VAR 0 3
4798: PPUSH
4799: CALL_OW 87
// wait ( 0 0$1 ) ;
4803: LD_INT 35
4805: PPUSH
4806: CALL_OW 67
// DialogueOn ;
4810: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_STRING D11f-Sol5-1
4821: PPUSH
4822: CALL_OW 88
// DialogueOff ;
4826: CALL_OW 7
// end ; if number = 4 then
4830: LD_VAR 0 1
4834: PUSH
4835: LD_INT 4
4837: EQUAL
4838: IFFALSE 4975
// begin hc_class := 2 ;
4840: LD_ADDR_OWVAR 28
4844: PUSH
4845: LD_INT 2
4847: ST_TO_ADDR
// hc_sex := sex_female ;
4848: LD_ADDR_OWVAR 27
4852: PUSH
4853: LD_INT 2
4855: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4856: LD_ADDR_OWVAR 33
4860: PUSH
4861: LD_STRING SecondCharsGal
4863: ST_TO_ADDR
// hc_face_number := 46 ;
4864: LD_ADDR_OWVAR 34
4868: PUSH
4869: LD_INT 46
4871: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4872: LD_ADDR_OWVAR 26
4876: PUSH
4877: LD_STRING Sylvia Creak
4879: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4880: LD_ADDR_OWVAR 29
4884: PUSH
4885: LD_INT 10
4887: PUSH
4888: LD_INT 9
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4895: LD_ADDR_OWVAR 30
4899: PUSH
4900: LD_INT 0
4902: PUSH
4903: LD_INT 1
4905: PUSH
4906: LD_INT 1
4908: PUSH
4909: LD_INT 1
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4918: LD_ADDR_OWVAR 31
4922: PUSH
4923: LD_INT 1
4925: PUSH
4926: LD_INT 3
4928: PUSH
4929: LD_INT 1
4931: PUSH
4932: LD_INT 1
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: ST_TO_ADDR
// un = CreateHuman ;
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: CALL_OW 44
4950: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4951: LD_VAR 0 3
4955: PPUSH
4956: LD_INT 26
4958: PPUSH
4959: LD_INT 1
4961: PPUSH
4962: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL_OW 87
// end ; if number = 5 then
4975: LD_VAR 0 1
4979: PUSH
4980: LD_INT 5
4982: EQUAL
4983: IFFALSE 5159
// begin hc_class := 1 ;
4985: LD_ADDR_OWVAR 28
4989: PUSH
4990: LD_INT 1
4992: ST_TO_ADDR
// hc_sex := sex_female ;
4993: LD_ADDR_OWVAR 27
4997: PUSH
4998: LD_INT 2
5000: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5001: LD_ADDR_OWVAR 33
5005: PUSH
5006: LD_STRING SecondCharsGal
5008: ST_TO_ADDR
// hc_face_number := 37 ;
5009: LD_ADDR_OWVAR 34
5013: PUSH
5014: LD_INT 37
5016: ST_TO_ADDR
// hc_name := Malena Johnson ;
5017: LD_ADDR_OWVAR 26
5021: PUSH
5022: LD_STRING Malena Johnson
5024: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
5025: LD_ADDR_OWVAR 29
5029: PUSH
5030: LD_INT 11
5032: PUSH
5033: LD_INT 10
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
5040: LD_ADDR_OWVAR 30
5044: PUSH
5045: LD_INT 1
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: LD_INT 0
5053: PUSH
5054: LD_INT 0
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
5063: LD_ADDR_OWVAR 31
5067: PUSH
5068: LD_INT 1
5070: PUSH
5071: LD_INT 1
5073: PUSH
5074: LD_INT 1
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: ST_TO_ADDR
// un = CreateHuman ;
5086: LD_ADDR_VAR 0 3
5090: PUSH
5091: CALL_OW 44
5095: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5096: LD_VAR 0 3
5100: PPUSH
5101: LD_INT 27
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5111: LD_VAR 0 3
5115: PPUSH
5116: CALL_OW 87
// wait ( 0 0$1 ) ;
5120: LD_INT 35
5122: PPUSH
5123: CALL_OW 67
// DialogueOn ;
5127: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5131: LD_VAR 0 3
5135: PPUSH
5136: LD_STRING D11c-FSol3-1
5138: PPUSH
5139: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5143: LD_EXP 1
5147: PPUSH
5148: LD_STRING D11c-JMM-1
5150: PPUSH
5151: CALL_OW 88
// DialogueOff ;
5155: CALL_OW 7
// end ; if number = 6 then
5159: LD_VAR 0 1
5163: PUSH
5164: LD_INT 6
5166: EQUAL
5167: IFFALSE 5341
// begin hc_class := 1 ;
5169: LD_ADDR_OWVAR 28
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// hc_sex := sex_male ;
5177: LD_ADDR_OWVAR 27
5181: PUSH
5182: LD_INT 1
5184: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5185: LD_ADDR_OWVAR 33
5189: PUSH
5190: LD_STRING AmGalRemake
5192: ST_TO_ADDR
// hc_face_number := 1 ;
5193: LD_ADDR_OWVAR 34
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// hc_name := Charles Brown ;
5201: LD_ADDR_OWVAR 26
5205: PUSH
5206: LD_STRING Charles Brown
5208: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5209: LD_ADDR_OWVAR 29
5213: PUSH
5214: LD_INT 12
5216: PUSH
5217: LD_INT 11
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5224: LD_ADDR_OWVAR 30
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: LD_INT 0
5234: PUSH
5235: LD_INT 0
5237: PUSH
5238: LD_INT 0
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5247: LD_ADDR_OWVAR 31
5251: PUSH
5252: LD_INT 3
5254: PUSH
5255: LD_INT 0
5257: PUSH
5258: LD_INT 1
5260: PUSH
5261: LD_INT 1
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: ST_TO_ADDR
// un = CreateHuman ;
5270: LD_ADDR_VAR 0 3
5274: PUSH
5275: CALL_OW 44
5279: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5280: LD_VAR 0 3
5284: PPUSH
5285: LD_INT 28
5287: PPUSH
5288: LD_INT 1
5290: PPUSH
5291: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5295: LD_VAR 0 3
5299: PPUSH
5300: CALL_OW 87
// wait ( 0 0$1 ) ;
5304: LD_INT 35
5306: PPUSH
5307: CALL_OW 67
// DialogueOn ;
5311: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5315: LD_VAR 0 3
5319: PPUSH
5320: LD_STRING D4-Sol1-5
5322: PPUSH
5323: CALL_OW 88
// DialogueOff ;
5327: CALL_OW 7
// tempCharles = un ;
5331: LD_ADDR_EXP 14
5335: PUSH
5336: LD_VAR 0 3
5340: ST_TO_ADDR
// end ; if number = 7 then
5341: LD_VAR 0 1
5345: PUSH
5346: LD_INT 7
5348: EQUAL
5349: IFFALSE 5621
// begin hc_class := 1 ;
5351: LD_ADDR_OWVAR 28
5355: PUSH
5356: LD_INT 1
5358: ST_TO_ADDR
// hc_sex := sex_female ;
5359: LD_ADDR_OWVAR 27
5363: PUSH
5364: LD_INT 2
5366: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5367: LD_ADDR_OWVAR 33
5371: PUSH
5372: LD_STRING AmGalRemake
5374: ST_TO_ADDR
// hc_face_number := 2 ;
5375: LD_ADDR_OWVAR 34
5379: PUSH
5380: LD_INT 2
5382: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5383: LD_ADDR_OWVAR 26
5387: PUSH
5388: LD_STRING Rebecca Macdonald
5390: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5391: LD_ADDR_OWVAR 29
5395: PUSH
5396: LD_INT 10
5398: PUSH
5399: LD_INT 10
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5406: LD_ADDR_OWVAR 30
5410: PUSH
5411: LD_INT 1
5413: PUSH
5414: LD_INT 0
5416: PUSH
5417: LD_INT 0
5419: PUSH
5420: LD_INT 1
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5429: LD_ADDR_OWVAR 31
5433: PUSH
5434: LD_INT 1
5436: PUSH
5437: LD_INT 0
5439: PUSH
5440: LD_INT 0
5442: PUSH
5443: LD_INT 1
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: ST_TO_ADDR
// un = CreateHuman ;
5452: LD_ADDR_VAR 0 3
5456: PUSH
5457: CALL_OW 44
5461: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5462: LD_VAR 0 3
5466: PPUSH
5467: LD_INT 29
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5477: LD_VAR 0 3
5481: PPUSH
5482: CALL_OW 87
// wait ( 0 0$1 ) ;
5486: LD_INT 35
5488: PPUSH
5489: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5493: LD_INT 30
5495: PPUSH
5496: LD_INT 22
5498: PUSH
5499: LD_INT 3
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 70
5510: IFFALSE 5621
// begin DialogueOn ;
5512: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5516: LD_VAR 0 3
5520: PPUSH
5521: CALL_OW 250
5525: PPUSH
5526: LD_VAR 0 3
5530: PPUSH
5531: CALL_OW 251
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 15
5541: NEG
5542: PPUSH
5543: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5547: LD_VAR 0 3
5551: PPUSH
5552: CALL_OW 250
5556: PPUSH
5557: LD_VAR 0 3
5561: PPUSH
5562: CALL_OW 251
5566: PPUSH
5567: LD_INT 1
5569: PPUSH
5570: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5574: LD_VAR 0 3
5578: PPUSH
5579: LD_STRING D11a-FSol2-1
5581: PPUSH
5582: CALL_OW 88
// DialogueOff ;
5586: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5590: LD_INT 3
5592: PPUSH
5593: LD_VAR 0 3
5597: PPUSH
5598: CALL_OW 471
// wait ( 0 0$2 ) ;
5602: LD_INT 70
5604: PPUSH
5605: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5609: LD_INT 3
5611: PPUSH
5612: LD_VAR 0 3
5616: PPUSH
5617: CALL_OW 472
// end ; end ; if number = 8 then
5621: LD_VAR 0 1
5625: PUSH
5626: LD_INT 8
5628: EQUAL
5629: IFFALSE 5785
// begin hc_class := 1 ;
5631: LD_ADDR_OWVAR 28
5635: PUSH
5636: LD_INT 1
5638: ST_TO_ADDR
// hc_sex := sex_female ;
5639: LD_ADDR_OWVAR 27
5643: PUSH
5644: LD_INT 2
5646: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5647: LD_ADDR_OWVAR 33
5651: PUSH
5652: LD_STRING SecondCharsGal
5654: ST_TO_ADDR
// hc_face_number := 45 ;
5655: LD_ADDR_OWVAR 34
5659: PUSH
5660: LD_INT 45
5662: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5663: LD_ADDR_OWVAR 26
5667: PUSH
5668: LD_STRING Margherite Simpson
5670: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5671: LD_ADDR_OWVAR 29
5675: PUSH
5676: LD_INT 12
5678: PUSH
5679: LD_INT 10
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5686: LD_ADDR_OWVAR 30
5690: PUSH
5691: LD_INT 1
5693: PUSH
5694: LD_INT 2
5696: PUSH
5697: LD_INT 0
5699: PUSH
5700: LD_INT 0
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5709: LD_ADDR_OWVAR 31
5713: PUSH
5714: LD_INT 1
5716: PUSH
5717: LD_INT 2
5719: PUSH
5720: LD_INT 0
5722: PUSH
5723: LD_INT 1
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: ST_TO_ADDR
// un = CreateHuman ;
5732: LD_ADDR_VAR 0 3
5736: PUSH
5737: CALL_OW 44
5741: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5742: LD_VAR 0 3
5746: PPUSH
5747: LD_INT 33
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5757: LD_VAR 0 3
5761: PPUSH
5762: CALL_OW 87
// wait ( 0 0$1 ) ;
5766: LD_INT 35
5768: PPUSH
5769: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5773: LD_VAR 0 3
5777: PPUSH
5778: LD_STRING D11e-FSol4-1
5780: PPUSH
5781: CALL_OW 88
// end ; arrivals := arrivals union un ;
5785: LD_ADDR_EXP 45
5789: PUSH
5790: LD_EXP 45
5794: PUSH
5795: LD_VAR 0 3
5799: UNION
5800: ST_TO_ADDR
// end ; end_of_file
5801: LD_VAR 0 2
5805: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5806: LD_INT 0
5808: PPUSH
5809: PPUSH
// ruAttackers := [ ] ;
5810: LD_ADDR_EXP 48
5814: PUSH
5815: EMPTY
5816: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5817: LD_ADDR_EXP 49
5821: PUSH
5822: EMPTY
5823: ST_TO_ADDR
// if Difficulty < 3 then
5824: LD_OWVAR 67
5828: PUSH
5829: LD_INT 3
5831: LESS
5832: IFFALSE 5849
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5834: LD_INT 130
5836: PPUSH
5837: LD_INT 81
5839: PPUSH
5840: CALL_OW 428
5844: PPUSH
5845: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5849: LD_INT 3
5851: PPUSH
5852: LD_INT 3
5854: PPUSH
5855: LD_INT 2
5857: PPUSH
5858: LD_EXP 35
5862: PPUSH
5863: LD_EXP 36
5867: PPUSH
5868: CALL_OW 12
5872: PPUSH
5873: LD_INT 2
5875: PPUSH
5876: LD_INT 4
5878: PPUSH
5879: CALL 7430 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5883: LD_INT 3
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: LD_INT 8
5891: PPUSH
5892: LD_EXP 35
5896: PPUSH
5897: LD_EXP 36
5901: PPUSH
5902: CALL_OW 12
5906: PPUSH
5907: LD_INT 1
5909: PPUSH
5910: LD_INT 4
5912: PPUSH
5913: CALL 7430 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5917: LD_INT 3
5919: PPUSH
5920: LD_INT 3
5922: PPUSH
5923: LD_INT 67
5925: PPUSH
5926: LD_EXP 35
5930: PPUSH
5931: LD_EXP 36
5935: PPUSH
5936: CALL_OW 12
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 2
5946: PPUSH
5947: CALL 7430 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5951: LD_INT 3
5953: PPUSH
5954: LD_INT 3
5956: PPUSH
5957: LD_INT 21
5959: PPUSH
5960: LD_EXP 35
5964: PPUSH
5965: LD_EXP 36
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 3
5977: PPUSH
5978: LD_INT 6
5980: PPUSH
5981: CALL 7430 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5985: LD_INT 3
5987: PPUSH
5988: LD_INT 3
5990: PPUSH
5991: LD_INT 17
5993: PPUSH
5994: LD_EXP 35
5998: PPUSH
5999: LD_EXP 36
6003: PPUSH
6004: CALL_OW 12
6008: PPUSH
6009: LD_INT 3
6011: PPUSH
6012: LD_INT 6
6014: PPUSH
6015: CALL 7430 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6019: LD_INT 3
6021: PPUSH
6022: LD_INT 3
6024: PPUSH
6025: LD_INT 32
6027: PPUSH
6028: LD_EXP 35
6032: PPUSH
6033: LD_EXP 36
6037: PPUSH
6038: CALL_OW 12
6042: PPUSH
6043: LD_INT 4
6045: PPUSH
6046: LD_INT 2
6048: PPUSH
6049: CALL 7430 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6053: LD_ADDR_VAR 0 2
6057: PUSH
6058: LD_INT 22
6060: PUSH
6061: LD_INT 3
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 21
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 30
6080: PUSH
6081: LD_INT 32
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6139
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6101: LD_INT 3
6103: PPUSH
6104: LD_INT 3
6106: PPUSH
6107: LD_VAR 0 2
6111: PPUSH
6112: LD_EXP 35
6116: PPUSH
6117: LD_EXP 36
6121: PPUSH
6122: CALL_OW 12
6126: PPUSH
6127: LD_INT 1
6129: PPUSH
6130: LD_INT 1
6132: PPUSH
6133: CALL 7430 0 6
6137: GO 6098
6139: POP
6140: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6141: LD_ADDR_VAR 0 2
6145: PUSH
6146: LD_INT 22
6148: PUSH
6149: LD_INT 3
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: LD_INT 30
6168: PUSH
6169: LD_INT 31
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 69
6185: PUSH
6186: FOR_IN
6187: IFFALSE 6215
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6189: LD_EXP 35
6193: PPUSH
6194: LD_EXP 36
6198: PPUSH
6199: CALL_OW 12
6203: PPUSH
6204: LD_VAR 0 2
6208: PPUSH
6209: CALL 7540 0 2
6213: GO 6186
6215: POP
6216: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6217: LD_INT 3
6219: PPUSH
6220: LD_INT 32
6222: PPUSH
6223: LD_INT 3
6225: PPUSH
6226: CALL 7819 0 3
// end ;
6230: LD_VAR 0 1
6234: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6235: LD_INT 22
6237: PUSH
6238: LD_INT 3
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 32
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PPUSH
6259: CALL_OW 69
6263: IFFALSE 6340
6265: GO 6267
6267: DISABLE
6268: LD_INT 0
6270: PPUSH
// begin enable ;
6271: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6272: LD_ADDR_VAR 0 1
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 32
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: CALL_OW 69
6305: PUSH
6306: FOR_IN
6307: IFFALSE 6338
// if GetFuel ( i ) < 3 then
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 261
6318: PUSH
6319: LD_INT 3
6321: LESS
6322: IFFALSE 6336
// SetFuel ( i , 3 ) ;
6324: LD_VAR 0 1
6328: PPUSH
6329: LD_INT 3
6331: PPUSH
6332: CALL_OW 240
6336: GO 6306
6338: POP
6339: POP
// end ;
6340: PPOPN 1
6342: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6343: LD_OWVAR 67
6347: PUSH
6348: LD_INT 1
6350: GREATER
6351: IFFALSE 6920
6353: GO 6355
6355: DISABLE
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
6360: PPUSH
6361: PPUSH
// begin uc_side := 3 ;
6362: LD_ADDR_OWVAR 20
6366: PUSH
6367: LD_INT 3
6369: ST_TO_ADDR
// uc_nation := 3 ;
6370: LD_ADDR_OWVAR 21
6374: PUSH
6375: LD_INT 3
6377: ST_TO_ADDR
// for i := 1 to 2 do
6378: LD_ADDR_VAR 0 1
6382: PUSH
6383: DOUBLE
6384: LD_INT 1
6386: DEC
6387: ST_TO_ADDR
6388: LD_INT 2
6390: PUSH
6391: FOR_TO
6392: IFFALSE 6506
// begin InitHC_All ( ) ;
6394: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6398: LD_INT 0
6400: PPUSH
6401: LD_INT 4
6403: PUSH
6404: LD_INT 5
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 6
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PUSH
6419: LD_OWVAR 67
6423: ARRAY
6424: PPUSH
6425: CALL_OW 381
// un := CreateHuman ;
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: CALL_OW 44
6438: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6439: LD_VAR 0 2
6443: PPUSH
6444: LD_INT 91
6446: PPUSH
6447: LD_INT 87
6449: PPUSH
6450: LD_INT 3
6452: PPUSH
6453: LD_INT 0
6455: PPUSH
6456: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6460: LD_ADDR_EXP 49
6464: PUSH
6465: LD_EXP 49
6469: PPUSH
6470: LD_EXP 49
6474: PUSH
6475: LD_INT 1
6477: PLUS
6478: PPUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: CALL_OW 1
6488: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6489: LD_VAR 0 2
6493: PPUSH
6494: LD_INT 46
6496: PPUSH
6497: LD_INT 78
6499: PPUSH
6500: CALL_OW 114
// end ;
6504: GO 6391
6506: POP
6507: POP
// if Difficulty > 2 then
6508: LD_OWVAR 67
6512: PUSH
6513: LD_INT 2
6515: GREATER
6516: IFFALSE 6648
// begin for i := 1 to 3 do
6518: LD_ADDR_VAR 0 1
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_INT 3
6530: PUSH
6531: FOR_TO
6532: IFFALSE 6646
// begin InitHC_All ( ) ;
6534: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6538: LD_INT 0
6540: PPUSH
6541: LD_INT 4
6543: PUSH
6544: LD_INT 5
6546: PUSH
6547: LD_INT 6
6549: PUSH
6550: LD_INT 6
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: LD_OWVAR 67
6563: ARRAY
6564: PPUSH
6565: CALL_OW 381
// un := CreateHuman ;
6569: LD_ADDR_VAR 0 2
6573: PUSH
6574: CALL_OW 44
6578: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6579: LD_VAR 0 2
6583: PPUSH
6584: LD_INT 91
6586: PPUSH
6587: LD_INT 87
6589: PPUSH
6590: LD_INT 3
6592: PPUSH
6593: LD_INT 0
6595: PPUSH
6596: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6600: LD_ADDR_EXP 49
6604: PUSH
6605: LD_EXP 49
6609: PPUSH
6610: LD_EXP 49
6614: PUSH
6615: LD_INT 1
6617: PLUS
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: CALL_OW 1
6628: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6629: LD_VAR 0 2
6633: PPUSH
6634: LD_INT 89
6636: PPUSH
6637: LD_INT 148
6639: PPUSH
6640: CALL_OW 114
// end ;
6644: GO 6531
6646: POP
6647: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: LD_INT 33
6655: PUSH
6656: LD_INT 61
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 49
6665: PUSH
6666: LD_INT 85
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 76
6675: PUSH
6676: LD_INT 99
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 81
6685: PUSH
6686: LD_INT 135
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 111
6695: PUSH
6696: LD_INT 155
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 147
6705: PUSH
6706: LD_INT 158
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6721: LD_INT 1050
6723: PPUSH
6724: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6728: LD_ADDR_VAR 0 1
6732: PUSH
6733: DOUBLE
6734: LD_INT 1
6736: DEC
6737: ST_TO_ADDR
6738: LD_EXP 49
6742: PUSH
6743: FOR_TO
6744: IFFALSE 6911
// begin un := ruAttackersInForest [ i ] ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_EXP 49
6755: PUSH
6756: LD_VAR 0 1
6760: ARRAY
6761: ST_TO_ADDR
// tag := GetTag ( un ) ;
6762: LD_ADDR_VAR 0 4
6766: PUSH
6767: LD_VAR 0 2
6771: PPUSH
6772: CALL_OW 110
6776: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6777: LD_VAR 0 2
6781: PPUSH
6782: CALL_OW 302
6786: PUSH
6787: LD_VAR 0 2
6791: PPUSH
6792: CALL_OW 314
6796: NOT
6797: AND
6798: IFFALSE 6909
// begin if tag <> i then
6800: LD_VAR 0 4
6804: PUSH
6805: LD_VAR 0 1
6809: NONEQUAL
6810: IFFALSE 6838
// begin SetTag ( un , i ) ;
6812: LD_VAR 0 2
6816: PPUSH
6817: LD_VAR 0 1
6821: PPUSH
6822: CALL_OW 109
// tag := i ;
6826: LD_ADDR_VAR 0 4
6830: PUSH
6831: LD_VAR 0 1
6835: ST_TO_ADDR
// end else
6836: GO 6870
// begin SetTag ( un , i + 1 ) ;
6838: LD_VAR 0 2
6842: PPUSH
6843: LD_VAR 0 1
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: PPUSH
6852: CALL_OW 109
// tag := i + 1 ;
6856: LD_ADDR_VAR 0 4
6860: PUSH
6861: LD_VAR 0 1
6865: PUSH
6866: LD_INT 1
6868: PLUS
6869: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6870: LD_VAR 0 2
6874: PPUSH
6875: LD_VAR 0 3
6879: PUSH
6880: LD_VAR 0 4
6884: ARRAY
6885: PUSH
6886: LD_INT 1
6888: ARRAY
6889: PPUSH
6890: LD_VAR 0 3
6894: PUSH
6895: LD_VAR 0 4
6899: ARRAY
6900: PUSH
6901: LD_INT 2
6903: ARRAY
6904: PPUSH
6905: CALL_OW 114
// end ; end ;
6909: GO 6743
6911: POP
6912: POP
// until not ruAttackersInForest ;
6913: LD_EXP 49
6917: NOT
6918: IFFALSE 6721
// end ;
6920: PPOPN 4
6922: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6923: LD_INT 10
6925: PPUSH
6926: LD_INT 22
6928: PUSH
6929: LD_INT 1
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PPUSH
6936: CALL_OW 70
6940: IFFALSE 7289
6942: GO 6944
6944: DISABLE
6945: LD_INT 0
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
// begin enable ;
6951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_INT 22
6959: PUSH
6960: LD_INT 3
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 25
6969: PUSH
6970: LD_INT 1
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 120
6979: PUSH
6980: LD_INT 111
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: PPUSH
6992: CALL_OW 69
6996: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
6997: LD_ADDR_VAR 0 3
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 50
7014: PUSH
7015: EMPTY
7016: LIST
7017: PUSH
7018: LD_INT 2
7020: PUSH
7021: LD_INT 30
7023: PUSH
7024: LD_INT 4
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 30
7033: PUSH
7034: LD_INT 5
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: PPUSH
7051: CALL_OW 69
7055: ST_TO_ADDR
// if not tmp then
7056: LD_VAR 0 2
7060: NOT
7061: IFFALSE 7159
// begin if not bar then
7063: LD_VAR 0 3
7067: NOT
7068: IFFALSE 7073
// begin disable ;
7070: DISABLE
// exit ;
7071: GO 7289
// end ; tmp := [ ] ;
7073: LD_ADDR_VAR 0 2
7077: PUSH
7078: EMPTY
7079: ST_TO_ADDR
// for i in bar do
7080: LD_ADDR_VAR 0 1
7084: PUSH
7085: LD_VAR 0 3
7089: PUSH
7090: FOR_IN
7091: IFFALSE 7116
// tmp := tmp union UnitsInside ( i ) ;
7093: LD_ADDR_VAR 0 2
7097: PUSH
7098: LD_VAR 0 2
7102: PUSH
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL_OW 313
7112: UNION
7113: ST_TO_ADDR
7114: GO 7090
7116: POP
7117: POP
// if not tmp then
7118: LD_VAR 0 2
7122: NOT
7123: IFFALSE 7128
// begin disable ;
7125: DISABLE
// exit ;
7126: GO 7289
// end ; for i in tmp do
7128: LD_ADDR_VAR 0 1
7132: PUSH
7133: LD_VAR 0 2
7137: PUSH
7138: FOR_IN
7139: IFFALSE 7155
// SetTag ( i , 111 ) ;
7141: LD_VAR 0 1
7145: PPUSH
7146: LD_INT 111
7148: PPUSH
7149: CALL_OW 109
7153: GO 7138
7155: POP
7156: POP
// end else
7157: GO 7289
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7159: LD_ADDR_VAR 0 4
7163: PUSH
7164: LD_INT 10
7166: PPUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PPUSH
7177: CALL_OW 70
7181: ST_TO_ADDR
// for i in tmp do
7182: LD_ADDR_VAR 0 1
7186: PUSH
7187: LD_VAR 0 2
7191: PUSH
7192: FOR_IN
7193: IFFALSE 7287
// if IsOk ( i ) then
7195: LD_VAR 0 1
7199: PPUSH
7200: CALL_OW 302
7204: IFFALSE 7285
// begin if IsInUnit ( i ) then
7206: LD_VAR 0 1
7210: PPUSH
7211: CALL_OW 310
7215: IFFALSE 7226
// ComExitBuilding ( i ) ;
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 122
// wait ( 3 ) ;
7226: LD_INT 3
7228: PPUSH
7229: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7233: LD_VAR 0 1
7237: PPUSH
7238: LD_VAR 0 4
7242: PPUSH
7243: LD_VAR 0 1
7247: PPUSH
7248: CALL_OW 74
7252: PPUSH
7253: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7257: LD_VAR 0 1
7261: PPUSH
7262: LD_VAR 0 3
7266: PUSH
7267: LD_INT 1
7269: PPUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: CALL_OW 12
7279: ARRAY
7280: PPUSH
7281: CALL_OW 180
// end ;
7285: GO 7192
7287: POP
7288: POP
// end ; end ; end_of_file
7289: PPOPN 4
7291: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7292: LD_INT 0
7294: PPUSH
7295: PPUSH
7296: PPUSH
// if not characters then
7297: LD_VAR 0 1
7301: NOT
7302: IFFALSE 7306
// exit ;
7304: GO 7385
// speaker := characters [ rand ( 1 , characters ) ] ;
7306: LD_ADDR_VAR 0 6
7310: PUSH
7311: LD_VAR 0 1
7315: PUSH
7316: LD_INT 1
7318: PPUSH
7319: LD_VAR 0 1
7323: PPUSH
7324: CALL_OW 12
7328: ARRAY
7329: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7330: LD_VAR 0 6
7334: PPUSH
7335: CALL_OW 258
7339: PUSH
7340: LD_INT 1
7342: EQUAL
7343: IFFALSE 7361
// Say ( speaker , dialogMID ) else
7345: LD_VAR 0 6
7349: PPUSH
7350: LD_VAR 0 2
7354: PPUSH
7355: CALL_OW 88
7359: GO 7375
// Say ( speaker , dialogFID ) ;
7361: LD_VAR 0 6
7365: PPUSH
7366: LD_VAR 0 3
7370: PPUSH
7371: CALL_OW 88
// result := speaker ;
7375: LD_ADDR_VAR 0 4
7379: PUSH
7380: LD_VAR 0 6
7384: ST_TO_ADDR
// end ;
7385: LD_VAR 0 4
7389: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7390: LD_INT 0
7392: PPUSH
7393: PPUSH
// for i in charactersList do
7394: LD_ADDR_VAR 0 4
7398: PUSH
7399: LD_VAR 0 1
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7423
// SaveCharacters ( i , ident ) ;
7407: LD_VAR 0 4
7411: PPUSH
7412: LD_VAR 0 2
7416: PPUSH
7417: CALL_OW 38
7421: GO 7404
7423: POP
7424: POP
// end ;
7425: LD_VAR 0 3
7429: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7430: LD_INT 0
7432: PPUSH
7433: PPUSH
7434: PPUSH
7435: PPUSH
// for i = 1 to count do
7436: LD_ADDR_VAR 0 8
7440: PUSH
7441: DOUBLE
7442: LD_INT 1
7444: DEC
7445: ST_TO_ADDR
7446: LD_VAR 0 6
7450: PUSH
7451: FOR_TO
7452: IFFALSE 7533
// begin uc_side = side ;
7454: LD_ADDR_OWVAR 20
7458: PUSH
7459: LD_VAR 0 1
7463: ST_TO_ADDR
// uc_nation = nation ;
7464: LD_ADDR_OWVAR 21
7468: PUSH
7469: LD_VAR 0 2
7473: ST_TO_ADDR
// hc_gallery =  ;
7474: LD_ADDR_OWVAR 33
7478: PUSH
7479: LD_STRING 
7481: ST_TO_ADDR
// hc_name =  ;
7482: LD_ADDR_OWVAR 26
7486: PUSH
7487: LD_STRING 
7489: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7490: LD_INT 0
7492: PPUSH
7493: LD_VAR 0 5
7497: PPUSH
7498: LD_VAR 0 4
7502: PPUSH
7503: CALL_OW 380
// un = CreateHuman ;
7507: LD_ADDR_VAR 0 10
7511: PUSH
7512: CALL_OW 44
7516: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7517: LD_VAR 0 10
7521: PPUSH
7522: LD_VAR 0 3
7526: PPUSH
7527: CALL_OW 52
// end ;
7531: GO 7451
7533: POP
7534: POP
// end ;
7535: LD_VAR 0 7
7539: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7540: LD_INT 0
7542: PPUSH
7543: PPUSH
7544: PPUSH
// uc_side := GetSide ( b ) ;
7545: LD_ADDR_OWVAR 20
7549: PUSH
7550: LD_VAR 0 2
7554: PPUSH
7555: CALL_OW 255
7559: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7560: LD_ADDR_OWVAR 21
7564: PUSH
7565: LD_VAR 0 2
7569: PPUSH
7570: CALL_OW 248
7574: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7575: LD_INT 0
7577: PPUSH
7578: LD_INT 1
7580: PPUSH
7581: LD_VAR 0 1
7585: PPUSH
7586: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7590: LD_ADDR_VAR 0 5
7594: PUSH
7595: LD_VAR 0 2
7599: PPUSH
7600: CALL_OW 254
7604: PUSH
7605: LD_INT 3
7607: MINUS
7608: ST_TO_ADDR
// if dir < 0 then
7609: LD_VAR 0 5
7613: PUSH
7614: LD_INT 0
7616: LESS
7617: IFFALSE 7633
// dir := 6 + dir ;
7619: LD_ADDR_VAR 0 5
7623: PUSH
7624: LD_INT 6
7626: PUSH
7627: LD_VAR 0 5
7631: PLUS
7632: ST_TO_ADDR
// un := CreateHuman ;
7633: LD_ADDR_VAR 0 4
7637: PUSH
7638: CALL_OW 44
7642: ST_TO_ADDR
// SetDir ( un , dir ) ;
7643: LD_VAR 0 4
7647: PPUSH
7648: LD_VAR 0 5
7652: PPUSH
7653: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7657: LD_VAR 0 4
7661: PPUSH
7662: LD_VAR 0 2
7666: PPUSH
7667: CALL_OW 52
// end ;
7671: LD_VAR 0 3
7675: RET
// export function PrepareDifficulty ; begin
7676: LD_INT 0
7678: PPUSH
// case Difficulty of 1 :
7679: LD_OWVAR 67
7683: PUSH
7684: LD_INT 1
7686: DOUBLE
7687: EQUAL
7688: IFTRUE 7692
7690: GO 7711
7692: POP
// begin RuSolMinLevel = 2 ;
7693: LD_ADDR_EXP 35
7697: PUSH
7698: LD_INT 2
7700: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7701: LD_ADDR_EXP 36
7705: PUSH
7706: LD_INT 3
7708: ST_TO_ADDR
// end ; 2 :
7709: GO 7772
7711: LD_INT 2
7713: DOUBLE
7714: EQUAL
7715: IFTRUE 7719
7717: GO 7738
7719: POP
// begin RuSolMinLevel = 3 ;
7720: LD_ADDR_EXP 35
7724: PUSH
7725: LD_INT 3
7727: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7728: LD_ADDR_EXP 36
7732: PUSH
7733: LD_INT 5
7735: ST_TO_ADDR
// end ; 3 .. 4 :
7736: GO 7772
7738: LD_INT 3
7740: DOUBLE
7741: GREATEREQUAL
7742: IFFALSE 7750
7744: LD_INT 4
7746: DOUBLE
7747: LESSEQUAL
7748: IFTRUE 7752
7750: GO 7771
7752: POP
// begin RuSolMinLevel = 4 ;
7753: LD_ADDR_EXP 35
7757: PUSH
7758: LD_INT 4
7760: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7761: LD_ADDR_EXP 36
7765: PUSH
7766: LD_INT 6
7768: ST_TO_ADDR
// end ; end ;
7769: GO 7772
7771: POP
// end ;
7772: LD_VAR 0 1
7776: RET
// export function ShowQuery1 ; begin
7777: LD_INT 0
7779: PPUSH
// result := Query ( QKill ) ;
7780: LD_ADDR_VAR 0 1
7784: PUSH
7785: LD_STRING QKill
7787: PPUSH
7788: CALL_OW 97
7792: ST_TO_ADDR
// end ;
7793: LD_VAR 0 1
7797: RET
// export function ShowQuery2 ; begin
7798: LD_INT 0
7800: PPUSH
// result := Query ( QKill2 ) ;
7801: LD_ADDR_VAR 0 1
7805: PUSH
7806: LD_STRING QKill2
7808: PPUSH
7809: CALL_OW 97
7813: ST_TO_ADDR
// end ;
7814: LD_VAR 0 1
7818: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7819: LD_INT 0
7821: PPUSH
7822: PPUSH
7823: PPUSH
7824: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7825: LD_ADDR_VAR 0 7
7829: PUSH
7830: LD_INT 48
7832: PUSH
7833: LD_INT 49
7835: PUSH
7836: LD_INT 50
7838: PUSH
7839: LD_INT 20
7841: PUSH
7842: LD_INT 1
7844: PUSH
7845: LD_INT 51
7847: PUSH
7848: LD_INT 52
7850: PUSH
7851: LD_INT 69
7853: PUSH
7854: LD_INT 39
7856: PUSH
7857: LD_INT 34
7859: PUSH
7860: LD_INT 40
7862: PUSH
7863: LD_INT 53
7865: PUSH
7866: LD_INT 71
7868: PUSH
7869: LD_INT 57
7871: PUSH
7872: LD_INT 58
7874: PUSH
7875: LD_INT 44
7877: PUSH
7878: LD_INT 32
7880: PUSH
7881: LD_INT 27
7883: PUSH
7884: LD_INT 23
7886: PUSH
7887: LD_INT 33
7889: PUSH
7890: LD_INT 59
7892: PUSH
7893: LD_INT 54
7895: PUSH
7896: LD_INT 55
7898: PUSH
7899: LD_INT 56
7901: PUSH
7902: LD_INT 63
7904: PUSH
7905: LD_INT 64
7907: PUSH
7908: LD_INT 65
7910: PUSH
7911: LD_INT 30
7913: PUSH
7914: LD_INT 31
7916: PUSH
7917: LD_INT 21
7919: PUSH
7920: LD_INT 22
7922: PUSH
7923: LD_INT 25
7925: PUSH
7926: LD_INT 82
7928: PUSH
7929: LD_INT 83
7931: PUSH
7932: LD_INT 84
7934: PUSH
7935: LD_INT 85
7937: PUSH
7938: LD_INT 86
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: ST_TO_ADDR
// for i = 1 to list do
7980: LD_ADDR_VAR 0 5
7984: PUSH
7985: DOUBLE
7986: LD_INT 1
7988: DEC
7989: ST_TO_ADDR
7990: LD_VAR 0 7
7994: PUSH
7995: FOR_TO
7996: IFFALSE 8068
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7998: LD_VAR 0 7
8002: PUSH
8003: LD_VAR 0 5
8007: ARRAY
8008: PPUSH
8009: LD_VAR 0 1
8013: PPUSH
8014: CALL_OW 321
8018: PUSH
8019: LD_INT 1
8021: EQUAL
8022: PUSH
8023: LD_VAR 0 7
8027: PUSH
8028: LD_VAR 0 5
8032: ARRAY
8033: PPUSH
8034: LD_VAR 0 3
8038: PPUSH
8039: CALL_OW 482
8043: AND
8044: IFFALSE 8066
// AddComResearch ( lab , list [ i ] ) ;
8046: LD_VAR 0 2
8050: PPUSH
8051: LD_VAR 0 7
8055: PUSH
8056: LD_VAR 0 5
8060: ARRAY
8061: PPUSH
8062: CALL_OW 184
8066: GO 7995
8068: POP
8069: POP
// end ;
8070: LD_VAR 0 4
8074: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8075: LD_INT 0
8077: PPUSH
8078: PPUSH
8079: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8080: LD_INT 22
8082: PUSH
8083: LD_VAR 0 1
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 21
8094: PUSH
8095: LD_INT 2
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 69
8110: PUSH
8111: LD_VAR 0 3
8115: LESSEQUAL
8116: IFFALSE 8224
// begin for i = 1 to vehCount do
8118: LD_ADDR_VAR 0 9
8122: PUSH
8123: DOUBLE
8124: LD_INT 1
8126: DEC
8127: ST_TO_ADDR
8128: LD_VAR 0 3
8132: PUSH
8133: FOR_TO
8134: IFFALSE 8222
// begin weapon := weaponTab [ i ] ;
8136: LD_ADDR_VAR 0 10
8140: PUSH
8141: LD_VAR 0 4
8145: PUSH
8146: LD_VAR 0 9
8150: ARRAY
8151: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8152: LD_VAR 0 10
8156: PUSH
8157: LD_INT 46
8159: EQUAL
8160: IFFALSE 8191
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8162: LD_VAR 0 2
8166: PPUSH
8167: LD_INT 24
8169: PPUSH
8170: LD_VAR 0 5
8174: PPUSH
8175: LD_VAR 0 6
8179: PPUSH
8180: LD_VAR 0 10
8184: PPUSH
8185: CALL_OW 185
8189: GO 8220
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8191: LD_VAR 0 2
8195: PPUSH
8196: LD_VAR 0 7
8200: PPUSH
8201: LD_VAR 0 5
8205: PPUSH
8206: LD_VAR 0 6
8210: PPUSH
8211: LD_VAR 0 10
8215: PPUSH
8216: CALL_OW 185
// end ;
8220: GO 8133
8222: POP
8223: POP
// end ; end ;
8224: LD_VAR 0 8
8228: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8229: LD_INT 0
8231: PPUSH
8232: PPUSH
8233: PPUSH
8234: PPUSH
8235: PPUSH
8236: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8237: LD_ADDR_VAR 0 8
8241: PUSH
8242: LD_VAR 0 2
8246: PPUSH
8247: CALL_OW 313
8251: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8252: LD_ADDR_VAR 0 9
8256: PUSH
8257: LD_VAR 0 3
8261: PPUSH
8262: LD_INT 22
8264: PUSH
8265: LD_VAR 0 1
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PUSH
8274: LD_INT 25
8276: PUSH
8277: LD_INT 2
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 24
8286: PUSH
8287: LD_INT 750
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 3
8296: PUSH
8297: LD_INT 54
8299: PUSH
8300: EMPTY
8301: LIST
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: PPUSH
8313: CALL_OW 70
8317: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8318: LD_ADDR_VAR 0 6
8322: PUSH
8323: LD_VAR 0 3
8327: PPUSH
8328: LD_INT 22
8330: PUSH
8331: LD_VAR 0 1
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 21
8342: PUSH
8343: LD_INT 3
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: LD_INT 3
8352: PUSH
8353: LD_INT 24
8355: PUSH
8356: LD_INT 1000
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: LIST
8371: PUSH
8372: EMPTY
8373: LIST
8374: PPUSH
8375: CALL_OW 70
8379: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8380: LD_VAR 0 6
8384: NOT
8385: PUSH
8386: LD_INT 22
8388: PUSH
8389: LD_VAR 0 1
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 25
8400: PUSH
8401: LD_INT 2
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 24
8410: PUSH
8411: LD_INT 250
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: PPUSH
8423: CALL_OW 69
8427: NOT
8428: AND
8429: IFFALSE 8433
// exit ;
8431: GO 8591
// if buildingsList and engineerOkInside then
8433: LD_VAR 0 6
8437: PUSH
8438: LD_VAR 0 8
8442: AND
8443: IFFALSE 8454
// ComExitBuilding ( engineerOkInside ) ;
8445: LD_VAR 0 8
8449: PPUSH
8450: CALL_OW 122
// if buildingsList and engineerOkOutside then
8454: LD_VAR 0 6
8458: PUSH
8459: LD_VAR 0 9
8463: AND
8464: IFFALSE 8484
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8466: LD_VAR 0 9
8470: PPUSH
8471: LD_VAR 0 6
8475: PUSH
8476: LD_INT 1
8478: ARRAY
8479: PPUSH
8480: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8484: LD_VAR 0 6
8488: PUSH
8489: LD_INT 0
8491: EQUAL
8492: PUSH
8493: LD_VAR 0 4
8497: PUSH
8498: LD_INT 0
8500: EQUAL
8501: AND
8502: PUSH
8503: LD_VAR 0 9
8507: AND
8508: IFFALSE 8524
// ComEnterUnit ( engineerOkOutside , depot ) ;
8510: LD_VAR 0 9
8514: PPUSH
8515: LD_VAR 0 2
8519: PPUSH
8520: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8524: LD_VAR 0 9
8528: PUSH
8529: LD_VAR 0 6
8533: PUSH
8534: LD_INT 0
8536: EQUAL
8537: AND
8538: PUSH
8539: LD_VAR 0 4
8543: AND
8544: IFFALSE 8591
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8546: LD_VAR 0 9
8550: PPUSH
8551: LD_VAR 0 4
8555: PUSH
8556: LD_INT 1
8558: ARRAY
8559: PPUSH
8560: LD_VAR 0 4
8564: PUSH
8565: LD_INT 2
8567: ARRAY
8568: PPUSH
8569: LD_VAR 0 4
8573: PUSH
8574: LD_INT 3
8576: ARRAY
8577: PPUSH
8578: LD_VAR 0 4
8582: PUSH
8583: LD_INT 4
8585: ARRAY
8586: PPUSH
8587: CALL_OW 145
// end ;
8591: LD_VAR 0 5
8595: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8596: LD_INT 0
8598: PPUSH
8599: PPUSH
8600: PPUSH
8601: PPUSH
8602: PPUSH
8603: PPUSH
8604: PPUSH
8605: PPUSH
8606: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8607: LD_ADDR_VAR 0 6
8611: PUSH
8612: LD_INT 22
8614: PUSH
8615: LD_VAR 0 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 25
8626: PUSH
8627: LD_INT 4
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 23
8636: PUSH
8637: LD_INT 2
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 24
8646: PUSH
8647: LD_INT 251
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 69
8664: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8665: LD_ADDR_VAR 0 7
8669: PUSH
8670: LD_VAR 0 3
8674: PPUSH
8675: LD_INT 22
8677: PUSH
8678: LD_VAR 0 1
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 23
8689: PUSH
8690: LD_INT 2
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 25
8699: PUSH
8700: LD_INT 4
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 50
8709: PUSH
8710: EMPTY
8711: LIST
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: PPUSH
8719: CALL_OW 70
8723: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8724: LD_ADDR_VAR 0 10
8728: PUSH
8729: LD_VAR 0 3
8733: PPUSH
8734: LD_INT 22
8736: PUSH
8737: LD_VAR 0 1
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 21
8748: PUSH
8749: LD_INT 1
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 3
8758: PUSH
8759: LD_INT 25
8761: PUSH
8762: LD_INT 3
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 3
8775: PUSH
8776: LD_INT 24
8778: PUSH
8779: LD_INT 750
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: PPUSH
8796: CALL_OW 70
8800: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8801: LD_ADDR_VAR 0 11
8805: PUSH
8806: LD_VAR 0 2
8810: PPUSH
8811: LD_INT 22
8813: PUSH
8814: LD_VAR 0 1
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: LD_INT 21
8825: PUSH
8826: LD_INT 1
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 3
8835: PUSH
8836: LD_INT 25
8838: PUSH
8839: LD_INT 3
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: LD_INT 3
8852: PUSH
8853: LD_INT 24
8855: PUSH
8856: LD_INT 1000
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 70
8877: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8878: LD_VAR 0 10
8882: NOT
8883: PUSH
8884: LD_VAR 0 11
8888: NOT
8889: AND
8890: PUSH
8891: LD_VAR 0 6
8895: NOT
8896: AND
8897: IFFALSE 8901
// exit ;
8899: GO 9107
// if damageUnits and sci_list then
8901: LD_VAR 0 10
8905: PUSH
8906: LD_VAR 0 6
8910: AND
8911: IFFALSE 8927
// ComMoveToArea ( damageUnits , healArea ) ;
8913: LD_VAR 0 10
8917: PPUSH
8918: LD_VAR 0 2
8922: PPUSH
8923: CALL_OW 113
// if unitsToHeal and sci_list then
8927: LD_VAR 0 11
8931: PUSH
8932: LD_VAR 0 6
8936: AND
8937: IFFALSE 8948
// ComExitBuilding ( sci_list ) ;
8939: LD_VAR 0 6
8943: PPUSH
8944: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8948: LD_VAR 0 11
8952: PUSH
8953: LD_VAR 0 7
8957: AND
8958: IFFALSE 8978
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8960: LD_VAR 0 7
8964: PPUSH
8965: LD_VAR 0 11
8969: PUSH
8970: LD_INT 1
8972: ARRAY
8973: PPUSH
8974: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8978: LD_VAR 0 10
8982: PUSH
8983: LD_INT 0
8985: EQUAL
8986: PUSH
8987: LD_VAR 0 11
8991: PUSH
8992: LD_INT 0
8994: EQUAL
8995: AND
8996: PUSH
8997: LD_VAR 0 7
9001: AND
9002: IFFALSE 9107
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9004: LD_ADDR_VAR 0 12
9008: PUSH
9009: LD_INT 22
9011: PUSH
9012: LD_VAR 0 1
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: LD_INT 21
9023: PUSH
9024: LD_INT 3
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: LD_INT 30
9033: PUSH
9034: LD_INT 8
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: PPUSH
9046: CALL_OW 69
9050: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
9051: LD_ADDR_VAR 0 13
9055: PUSH
9056: LD_INT 1
9058: PPUSH
9059: LD_VAR 0 12
9063: PPUSH
9064: CALL_OW 12
9068: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9069: LD_VAR 0 7
9073: PPUSH
9074: LD_INT 3
9076: PUSH
9077: LD_INT 60
9079: PUSH
9080: EMPTY
9081: LIST
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PPUSH
9087: CALL_OW 72
9091: PPUSH
9092: LD_VAR 0 12
9096: PUSH
9097: LD_VAR 0 13
9101: ARRAY
9102: PPUSH
9103: CALL_OW 120
// end ; end ;
9107: LD_VAR 0 5
9111: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9112: LD_INT 0
9114: PPUSH
9115: PPUSH
9116: PPUSH
9117: PPUSH
9118: PPUSH
// tmp := [ ] ;
9119: LD_ADDR_VAR 0 6
9123: PUSH
9124: EMPTY
9125: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9126: LD_ADDR_VAR 0 7
9130: PUSH
9131: LD_INT 22
9133: PUSH
9134: LD_VAR 0 1
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 30
9145: PUSH
9146: LD_INT 32
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PPUSH
9157: CALL_OW 69
9161: ST_TO_ADDR
// if bunkers then
9162: LD_VAR 0 7
9166: IFFALSE 9236
// for i in bunkers do
9168: LD_ADDR_VAR 0 4
9172: PUSH
9173: LD_VAR 0 7
9177: PUSH
9178: FOR_IN
9179: IFFALSE 9234
// for j in UnitsInside ( i ) do
9181: LD_ADDR_VAR 0 5
9185: PUSH
9186: LD_VAR 0 4
9190: PPUSH
9191: CALL_OW 313
9195: PUSH
9196: FOR_IN
9197: IFFALSE 9230
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9199: LD_ADDR_VAR 0 6
9203: PUSH
9204: LD_VAR 0 6
9208: PPUSH
9209: LD_VAR 0 6
9213: PUSH
9214: LD_INT 1
9216: PLUS
9217: PPUSH
9218: LD_VAR 0 5
9222: PPUSH
9223: CALL_OW 1
9227: ST_TO_ADDR
9228: GO 9196
9230: POP
9231: POP
9232: GO 9178
9234: POP
9235: POP
// if tmp then
9236: LD_VAR 0 6
9240: IFFALSE 9280
// begin ComExitBuilding ( tmp ) ;
9242: LD_VAR 0 6
9246: PPUSH
9247: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9251: LD_VAR 0 6
9255: PPUSH
9256: LD_VAR 0 2
9260: PPUSH
9261: CALL_OW 250
9265: PPUSH
9266: LD_VAR 0 2
9270: PPUSH
9271: CALL_OW 251
9275: PPUSH
9276: CALL_OW 174
// end ; end ;
9280: LD_VAR 0 3
9284: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9285: LD_INT 0
9287: PPUSH
9288: PPUSH
9289: PPUSH
// enable ;
9290: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9291: LD_ADDR_VAR 0 6
9295: PUSH
9296: LD_VAR 0 3
9300: PPUSH
9301: CALL_OW 435
9305: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_INT 22
9313: PUSH
9314: LD_VAR 0 1
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: LD_INT 34
9325: PUSH
9326: LD_VAR 0 2
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PPUSH
9339: CALL_OW 69
9343: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9344: LD_VAR 0 5
9348: PUSH
9349: LD_VAR 0 3
9353: PPUSH
9354: CALL_OW 435
9358: AND
9359: PUSH
9360: LD_VAR 0 6
9364: AND
9365: IFFALSE 9398
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9367: LD_VAR 0 5
9371: PUSH
9372: LD_INT 1
9374: ARRAY
9375: PPUSH
9376: LD_VAR 0 6
9380: PUSH
9381: LD_INT 1
9383: ARRAY
9384: PPUSH
9385: LD_VAR 0 6
9389: PUSH
9390: LD_INT 2
9392: ARRAY
9393: PPUSH
9394: CALL_OW 177
// end ;
9398: LD_VAR 0 4
9402: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9403: LD_INT 0
9405: PPUSH
9406: PPUSH
9407: PPUSH
9408: PPUSH
9409: PPUSH
9410: PPUSH
9411: PPUSH
9412: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9413: LD_ADDR_VAR 0 6
9417: PUSH
9418: LD_VAR 0 2
9422: PPUSH
9423: LD_INT 22
9425: PUSH
9426: LD_VAR 0 1
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 56
9437: PUSH
9438: EMPTY
9439: LIST
9440: PUSH
9441: LD_INT 24
9443: PUSH
9444: LD_INT 700
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: LD_INT 3
9453: PUSH
9454: LD_INT 60
9456: PUSH
9457: EMPTY
9458: LIST
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: LD_INT 25
9469: PUSH
9470: LD_INT 1
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 25
9479: PUSH
9480: LD_INT 5
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: LD_INT 25
9489: PUSH
9490: LD_INT 8
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PUSH
9497: LD_INT 25
9499: PUSH
9500: LD_INT 9
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: PPUSH
9521: CALL_OW 70
9525: PUSH
9526: LD_EXP 48
9530: PUSH
9531: LD_EXP 49
9535: UNION
9536: DIFF
9537: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9538: LD_ADDR_VAR 0 7
9542: PUSH
9543: LD_VAR 0 2
9547: PPUSH
9548: LD_INT 22
9550: PUSH
9551: LD_VAR 0 1
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: LD_INT 30
9562: PUSH
9563: LD_INT 32
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 58
9572: PUSH
9573: EMPTY
9574: LIST
9575: PUSH
9576: LD_INT 24
9578: PUSH
9579: LD_INT 251
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: PPUSH
9592: CALL_OW 70
9596: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9597: LD_ADDR_VAR 0 9
9601: PUSH
9602: LD_VAR 0 2
9606: PPUSH
9607: LD_INT 22
9609: PUSH
9610: LD_VAR 0 1
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 2
9621: PUSH
9622: LD_INT 30
9624: PUSH
9625: LD_INT 4
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 30
9634: PUSH
9635: LD_INT 5
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: PUSH
9647: LD_INT 24
9649: PUSH
9650: LD_INT 251
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 70
9666: ST_TO_ADDR
// if barrackList then
9667: LD_VAR 0 9
9671: IFFALSE 9827
// begin if turretList = 0 then
9673: LD_VAR 0 7
9677: PUSH
9678: LD_INT 0
9680: EQUAL
9681: IFFALSE 9719
// begin if soldiersList then
9683: LD_VAR 0 6
9687: IFFALSE 9717
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9689: LD_VAR 0 6
9693: PPUSH
9694: LD_VAR 0 9
9698: PUSH
9699: LD_INT 1
9701: PPUSH
9702: LD_VAR 0 9
9706: PPUSH
9707: CALL_OW 12
9711: ARRAY
9712: PPUSH
9713: CALL_OW 120
// end else
9717: GO 9827
// begin for i in barrackList do
9719: LD_ADDR_VAR 0 4
9723: PUSH
9724: LD_VAR 0 9
9728: PUSH
9729: FOR_IN
9730: IFFALSE 9825
// begin if not turretList then
9732: LD_VAR 0 7
9736: NOT
9737: IFFALSE 9743
// exit ;
9739: POP
9740: POP
9741: GO 9827
// insideUnits = UnitsInside ( i ) ;
9743: LD_ADDR_VAR 0 10
9747: PUSH
9748: LD_VAR 0 4
9752: PPUSH
9753: CALL_OW 313
9757: ST_TO_ADDR
// if insideUnits then
9758: LD_VAR 0 10
9762: IFFALSE 9823
// begin tmp := insideUnits [ 1 ] ;
9764: LD_ADDR_VAR 0 8
9768: PUSH
9769: LD_VAR 0 10
9773: PUSH
9774: LD_INT 1
9776: ARRAY
9777: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9778: LD_VAR 0 8
9782: PPUSH
9783: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9787: LD_VAR 0 8
9791: PPUSH
9792: LD_VAR 0 7
9796: PUSH
9797: LD_INT 1
9799: ARRAY
9800: PPUSH
9801: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9805: LD_ADDR_VAR 0 7
9809: PUSH
9810: LD_VAR 0 7
9814: PPUSH
9815: LD_INT 1
9817: PPUSH
9818: CALL_OW 3
9822: ST_TO_ADDR
// end ; end ;
9823: GO 9729
9825: POP
9826: POP
// end ; end ; end ;
9827: LD_VAR 0 3
9831: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9832: LD_INT 0
9834: PPUSH
9835: PPUSH
9836: PPUSH
9837: PPUSH
9838: PPUSH
9839: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9840: LD_ADDR_VAR 0 8
9844: PUSH
9845: LD_INT 22
9847: PUSH
9848: LD_VAR 0 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 34
9869: PUSH
9870: LD_INT 52
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: ST_TO_ADDR
// if not craneList then
9887: LD_VAR 0 8
9891: NOT
9892: IFFALSE 9896
// exit ;
9894: GO 10330
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9896: LD_ADDR_VAR 0 9
9900: PUSH
9901: LD_INT 22
9903: PUSH
9904: LD_VAR 0 1
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 21
9915: PUSH
9916: LD_INT 3
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 3
9925: PUSH
9926: LD_INT 24
9928: PUSH
9929: LD_INT 1000
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: LIST
9944: PUSH
9945: EMPTY
9946: LIST
9947: PPUSH
9948: CALL_OW 69
9952: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9953: LD_VAR 0 9
9957: PUSH
9958: LD_VAR 0 8
9962: PPUSH
9963: LD_INT 24
9965: PUSH
9966: LD_INT 750
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 72
9977: AND
9978: IFFALSE 10013
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9980: LD_VAR 0 8
9984: PPUSH
9985: LD_INT 24
9987: PUSH
9988: LD_INT 750
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PPUSH
9995: CALL_OW 72
9999: PPUSH
10000: LD_VAR 0 9
10004: PUSH
10005: LD_INT 1
10007: ARRAY
10008: PPUSH
10009: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
10013: LD_VAR 0 8
10017: PPUSH
10018: LD_INT 3
10020: PUSH
10021: LD_INT 24
10023: PUSH
10024: LD_INT 750
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PPUSH
10035: CALL_OW 72
10039: IFFALSE 10077
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10041: LD_VAR 0 8
10045: PPUSH
10046: LD_INT 3
10048: PUSH
10049: LD_INT 24
10051: PUSH
10052: LD_INT 750
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PPUSH
10063: CALL_OW 72
10067: PPUSH
10068: LD_VAR 0 2
10072: PPUSH
10073: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
10077: LD_VAR 0 8
10081: PUSH
10082: LD_VAR 0 9
10086: PUSH
10087: LD_INT 0
10089: EQUAL
10090: AND
10091: PUSH
10092: LD_VAR 0 3
10096: AND
10097: IFFALSE 10144
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10099: LD_VAR 0 8
10103: PPUSH
10104: LD_VAR 0 3
10108: PUSH
10109: LD_INT 1
10111: ARRAY
10112: PPUSH
10113: LD_VAR 0 3
10117: PUSH
10118: LD_INT 2
10120: ARRAY
10121: PPUSH
10122: LD_VAR 0 3
10126: PUSH
10127: LD_INT 3
10129: ARRAY
10130: PPUSH
10131: LD_VAR 0 3
10135: PUSH
10136: LD_INT 4
10138: ARRAY
10139: PPUSH
10140: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10144: LD_ADDR_VAR 0 7
10148: PUSH
10149: LD_VAR 0 2
10153: PPUSH
10154: LD_INT 22
10156: PUSH
10157: LD_VAR 0 1
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 21
10168: PUSH
10169: LD_INT 2
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 34
10178: PUSH
10179: LD_INT 52
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 3
10188: PUSH
10189: LD_INT 24
10191: PUSH
10192: LD_INT 750
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: PPUSH
10209: CALL_OW 70
10213: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10214: LD_ADDR_VAR 0 6
10218: PUSH
10219: LD_VAR 0 2
10223: PPUSH
10224: LD_INT 22
10226: PUSH
10227: LD_VAR 0 1
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 2
10238: PUSH
10239: LD_INT 30
10241: PUSH
10242: LD_INT 0
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 30
10251: PUSH
10252: LD_INT 1
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PPUSH
10268: CALL_OW 70
10272: ST_TO_ADDR
// if crane then
10273: LD_VAR 0 7
10277: IFFALSE 10330
// for i in crane do
10279: LD_ADDR_VAR 0 5
10283: PUSH
10284: LD_VAR 0 7
10288: PUSH
10289: FOR_IN
10290: IFFALSE 10328
// begin if dep then
10292: LD_VAR 0 6
10296: IFFALSE 10312
// ComMoveUnit ( i , dep ) ;
10298: LD_VAR 0 5
10302: PPUSH
10303: LD_VAR 0 6
10307: PPUSH
10308: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10312: LD_VAR 0 5
10316: PPUSH
10317: CALL_OW 311
10321: PPUSH
10322: CALL 81690 0 1
// end ;
10326: GO 10289
10328: POP
10329: POP
// end ;
10330: LD_VAR 0 4
10334: RET
// export function BuildBulldozer ; begin
10335: LD_INT 0
10337: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10338: LD_INT 17
10340: PPUSH
10341: CALL_OW 302
10345: NOT
10346: PUSH
10347: LD_INT 17
10349: PPUSH
10350: CALL_OW 255
10354: PUSH
10355: LD_INT 3
10357: NONEQUAL
10358: OR
10359: IFFALSE 10363
// exit ;
10361: GO 10382
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10363: LD_INT 17
10365: PPUSH
10366: LD_INT 24
10368: PPUSH
10369: LD_INT 1
10371: PPUSH
10372: LD_INT 1
10374: PPUSH
10375: LD_INT 53
10377: PPUSH
10378: CALL_OW 185
// end ;
10382: LD_VAR 0 1
10386: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10387: LD_INT 0
10389: PPUSH
10390: PPUSH
10391: PPUSH
10392: PPUSH
10393: PPUSH
// if not bulldozer then
10394: LD_VAR 0 1
10398: NOT
10399: IFFALSE 10403
// exit ;
10401: GO 10685
// list := ListEnvironmentArea ( area ) ;
10403: LD_ADDR_VAR 0 5
10407: PUSH
10408: LD_VAR 0 2
10412: PPUSH
10413: CALL_OW 353
10417: ST_TO_ADDR
// tmp := [ ] ;
10418: LD_ADDR_VAR 0 6
10422: PUSH
10423: EMPTY
10424: ST_TO_ADDR
// for i = 1 to list do
10425: LD_ADDR_VAR 0 4
10429: PUSH
10430: DOUBLE
10431: LD_INT 1
10433: DEC
10434: ST_TO_ADDR
10435: LD_VAR 0 5
10439: PUSH
10440: FOR_TO
10441: IFFALSE 10539
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10443: LD_VAR 0 5
10447: PUSH
10448: LD_VAR 0 4
10452: ARRAY
10453: PUSH
10454: LD_INT 1
10456: ARRAY
10457: PPUSH
10458: LD_VAR 0 5
10462: PUSH
10463: LD_VAR 0 4
10467: ARRAY
10468: PUSH
10469: LD_INT 2
10471: ARRAY
10472: PPUSH
10473: CALL_OW 554
10477: IFFALSE 10537
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10479: LD_ADDR_VAR 0 6
10483: PUSH
10484: LD_VAR 0 6
10488: PPUSH
10489: LD_VAR 0 6
10493: PUSH
10494: LD_INT 1
10496: PLUS
10497: PPUSH
10498: LD_VAR 0 5
10502: PUSH
10503: LD_VAR 0 4
10507: ARRAY
10508: PUSH
10509: LD_INT 1
10511: ARRAY
10512: PUSH
10513: LD_VAR 0 5
10517: PUSH
10518: LD_VAR 0 4
10522: ARRAY
10523: PUSH
10524: LD_INT 2
10526: ARRAY
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PPUSH
10532: CALL_OW 1
10536: ST_TO_ADDR
// end ;
10537: GO 10440
10539: POP
10540: POP
// ComStop ( bulldozer ) ;
10541: LD_VAR 0 1
10545: PPUSH
10546: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10550: LD_ADDR_VAR 0 7
10554: PUSH
10555: LD_VAR 0 1
10559: PPUSH
10560: CALL_OW 250
10564: PUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 251
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: ST_TO_ADDR
// for i = tmp downto 1 do
10579: LD_ADDR_VAR 0 4
10583: PUSH
10584: DOUBLE
10585: LD_VAR 0 6
10589: INC
10590: ST_TO_ADDR
10591: LD_INT 1
10593: PUSH
10594: FOR_DOWNTO
10595: IFFALSE 10683
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10597: LD_ADDR_VAR 0 7
10601: PUSH
10602: LD_VAR 0 7
10606: PUSH
10607: LD_INT 1
10609: ARRAY
10610: PPUSH
10611: LD_VAR 0 7
10615: PUSH
10616: LD_INT 2
10618: ARRAY
10619: PPUSH
10620: LD_VAR 0 6
10624: PPUSH
10625: CALL 10786 0 3
10629: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10630: LD_VAR 0 1
10634: PPUSH
10635: LD_VAR 0 7
10639: PUSH
10640: LD_INT 1
10642: ARRAY
10643: PPUSH
10644: LD_VAR 0 7
10648: PUSH
10649: LD_INT 2
10651: ARRAY
10652: PPUSH
10653: CALL 10690 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10657: LD_ADDR_VAR 0 6
10661: PUSH
10662: LD_VAR 0 6
10666: PPUSH
10667: LD_VAR 0 7
10671: PUSH
10672: LD_INT 3
10674: ARRAY
10675: PPUSH
10676: CALL_OW 3
10680: ST_TO_ADDR
// end ;
10681: GO 10594
10683: POP
10684: POP
// end ;
10685: LD_VAR 0 3
10689: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10690: LD_INT 0
10692: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10693: LD_VAR 0 2
10697: PPUSH
10698: LD_VAR 0 3
10702: PPUSH
10703: CALL_OW 351
10707: PUSH
10708: LD_VAR 0 2
10712: PPUSH
10713: LD_VAR 0 3
10717: PPUSH
10718: CALL_OW 554
10722: AND
10723: PUSH
10724: LD_VAR 0 2
10728: PPUSH
10729: LD_VAR 0 3
10733: PPUSH
10734: CALL_OW 488
10738: AND
10739: PUSH
10740: LD_VAR 0 2
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: CALL_OW 428
10754: PUSH
10755: LD_INT 1
10757: NEG
10758: EQUAL
10759: AND
10760: IFFALSE 10781
// AddComMoveXY ( bulldozer , x , y ) ;
10762: LD_VAR 0 1
10766: PPUSH
10767: LD_VAR 0 2
10771: PPUSH
10772: LD_VAR 0 3
10776: PPUSH
10777: CALL_OW 171
// end ;
10781: LD_VAR 0 4
10785: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10786: LD_INT 0
10788: PPUSH
10789: PPUSH
10790: PPUSH
10791: PPUSH
10792: PPUSH
10793: PPUSH
10794: PPUSH
// dist := 99999 ;
10795: LD_ADDR_VAR 0 6
10799: PUSH
10800: LD_INT 99999
10802: ST_TO_ADDR
// for i = 1 to list do
10803: LD_ADDR_VAR 0 5
10807: PUSH
10808: DOUBLE
10809: LD_INT 1
10811: DEC
10812: ST_TO_ADDR
10813: LD_VAR 0 3
10817: PUSH
10818: FOR_TO
10819: IFFALSE 10957
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10821: LD_ADDR_VAR 0 7
10825: PUSH
10826: LD_VAR 0 1
10830: PPUSH
10831: LD_VAR 0 2
10835: PPUSH
10836: LD_VAR 0 3
10840: PUSH
10841: LD_VAR 0 5
10845: ARRAY
10846: PUSH
10847: LD_INT 1
10849: ARRAY
10850: PPUSH
10851: LD_VAR 0 3
10855: PUSH
10856: LD_VAR 0 5
10860: ARRAY
10861: PUSH
10862: LD_INT 2
10864: ARRAY
10865: PPUSH
10866: CALL_OW 298
10870: ST_TO_ADDR
// if d = 0 then
10871: LD_VAR 0 7
10875: PUSH
10876: LD_INT 0
10878: EQUAL
10879: IFFALSE 10883
// continue ;
10881: GO 10818
// if d < dist then
10883: LD_VAR 0 7
10887: PUSH
10888: LD_VAR 0 6
10892: LESS
10893: IFFALSE 10955
// begin _x := list [ i ] [ 1 ] ;
10895: LD_ADDR_VAR 0 8
10899: PUSH
10900: LD_VAR 0 3
10904: PUSH
10905: LD_VAR 0 5
10909: ARRAY
10910: PUSH
10911: LD_INT 1
10913: ARRAY
10914: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10915: LD_ADDR_VAR 0 9
10919: PUSH
10920: LD_VAR 0 3
10924: PUSH
10925: LD_VAR 0 5
10929: ARRAY
10930: PUSH
10931: LD_INT 2
10933: ARRAY
10934: ST_TO_ADDR
// _i := i ;
10935: LD_ADDR_VAR 0 10
10939: PUSH
10940: LD_VAR 0 5
10944: ST_TO_ADDR
// dist := d ;
10945: LD_ADDR_VAR 0 6
10949: PUSH
10950: LD_VAR 0 7
10954: ST_TO_ADDR
// end ; end ;
10955: GO 10818
10957: POP
10958: POP
// result := [ _x , _y , _i , dist ] ;
10959: LD_ADDR_VAR 0 4
10963: PUSH
10964: LD_VAR 0 8
10968: PUSH
10969: LD_VAR 0 9
10973: PUSH
10974: LD_VAR 0 10
10978: PUSH
10979: LD_VAR 0 6
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: ST_TO_ADDR
// end ; end_of_file
10990: LD_VAR 0 4
10994: RET
// export function Action ; begin
10995: LD_INT 0
10997: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10998: LD_INT 66
11000: PPUSH
11001: LD_INT 4
11003: PPUSH
11004: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11008: LD_INT 22
11010: PUSH
11011: LD_INT 1
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 25
11020: PUSH
11021: LD_INT 2
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PPUSH
11032: CALL_OW 69
11036: PUSH
11037: LD_INT 0
11039: EQUAL
11040: IFFALSE 11054
// SetClass ( JMM , 2 ) ;
11042: LD_EXP 1
11046: PPUSH
11047: LD_INT 2
11049: PPUSH
11050: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11054: LD_STRING M1
11056: PPUSH
11057: CALL_OW 337
// case Difficulty of 1 :
11061: LD_OWVAR 67
11065: PUSH
11066: LD_INT 1
11068: DOUBLE
11069: EQUAL
11070: IFTRUE 11074
11072: GO 11084
11074: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11075: LD_STRING M1-1
11077: PPUSH
11078: CALL_OW 337
11082: GO 11139
11084: LD_INT 2
11086: DOUBLE
11087: EQUAL
11088: IFTRUE 11092
11090: GO 11102
11092: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11093: LD_STRING M1-2
11095: PPUSH
11096: CALL_OW 337
11100: GO 11139
11102: LD_INT 3
11104: DOUBLE
11105: EQUAL
11106: IFTRUE 11110
11108: GO 11120
11110: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11111: LD_STRING M1-3
11113: PPUSH
11114: CALL_OW 337
11118: GO 11139
11120: LD_INT 4
11122: DOUBLE
11123: EQUAL
11124: IFTRUE 11128
11126: GO 11138
11128: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11129: LD_STRING M1-4
11131: PPUSH
11132: CALL_OW 337
11136: GO 11139
11138: POP
// ChangeMissionObjectives ( M1cont ) ;
11139: LD_STRING M1cont
11141: PPUSH
11142: CALL_OW 337
// SaveForQuickRestart ;
11146: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11150: LD_INT 525
11152: PPUSH
11153: LD_INT 700
11155: PPUSH
11156: CALL_OW 12
11160: PPUSH
11161: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11165: LD_INT 5
11167: PPUSH
11168: LD_INT 82
11170: PPUSH
11171: LD_INT 38
11173: PPUSH
11174: LD_INT 10
11176: PPUSH
11177: LD_INT 1
11179: PPUSH
11180: CALL_OW 56
// wait ( 0 0$14 ) ;
11184: LD_INT 490
11186: PPUSH
11187: CALL_OW 67
// firstCrateSpawn := true ;
11191: LD_ADDR_EXP 41
11195: PUSH
11196: LD_INT 1
11198: ST_TO_ADDR
// end ;
11199: LD_VAR 0 1
11203: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11204: LD_EXP 41
11208: IFFALSE 11597
11210: GO 11212
11212: DISABLE
11213: LD_INT 0
11215: PPUSH
// begin if IsOk ( Lisa ) then
11216: LD_EXP 2
11220: PPUSH
11221: CALL_OW 302
11225: IFFALSE 11241
// Say ( Lisa , DR0-Lisa-1 ) else
11227: LD_EXP 2
11231: PPUSH
11232: LD_STRING DR0-Lisa-1
11234: PPUSH
11235: CALL_OW 88
11239: GO 11387
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11241: LD_INT 22
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 21
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 26
11263: PUSH
11264: LD_INT 1
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 2
11273: PUSH
11274: LD_INT 25
11276: PUSH
11277: LD_INT 1
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 25
11286: PUSH
11287: LD_INT 2
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 25
11296: PUSH
11297: LD_INT 3
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 25
11306: PUSH
11307: LD_INT 4
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: PPUSH
11327: CALL_OW 69
11331: PUSH
11332: LD_EXP 1
11336: PUSH
11337: LD_EXP 8
11341: PUSH
11342: LD_EXP 5
11346: PUSH
11347: LD_EXP 6
11351: PUSH
11352: LD_EXP 7
11356: PUSH
11357: LD_EXP 4
11361: PUSH
11362: LD_EXP 3
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: DIFF
11376: PPUSH
11377: LD_STRING DR0-Sol1-1
11379: PPUSH
11380: LD_STRING DR0-Sol1-1
11382: PPUSH
11383: CALL 7292 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11387: LD_ADDR_VAR 0 1
11391: PUSH
11392: LD_INT 22
11394: PUSH
11395: LD_INT 1
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 21
11404: PUSH
11405: LD_INT 1
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 26
11414: PUSH
11415: LD_INT 1
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: LD_INT 25
11427: PUSH
11428: LD_INT 1
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 25
11437: PUSH
11438: LD_INT 2
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 25
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 25
11457: PUSH
11458: LD_INT 4
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: PPUSH
11478: CALL_OW 69
11482: PUSH
11483: LD_EXP 1
11487: PUSH
11488: LD_EXP 8
11492: PUSH
11493: LD_EXP 5
11497: PUSH
11498: LD_EXP 2
11502: PUSH
11503: LD_EXP 6
11507: PUSH
11508: LD_EXP 7
11512: PUSH
11513: LD_EXP 4
11517: PUSH
11518: LD_EXP 3
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: DIFF
11533: PPUSH
11534: LD_STRING DR0-Sol2-1
11536: PPUSH
11537: LD_STRING DR0-Sol2-1
11539: PPUSH
11540: CALL 7292 0 3
11544: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11545: LD_EXP 4
11549: PPUSH
11550: CALL_OW 302
11554: IFFALSE 11568
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11556: LD_EXP 4
11560: PPUSH
11561: LD_STRING DR0-Cyrus-1
11563: PPUSH
11564: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11568: LD_EXP 2
11572: PPUSH
11573: CALL_OW 302
11577: PUSH
11578: LD_VAR 0 1
11582: OR
11583: IFFALSE 11597
// Say ( JMM , DR0-JMM-1 ) ;
11585: LD_EXP 1
11589: PPUSH
11590: LD_STRING DR0-JMM-1
11592: PPUSH
11593: CALL_OW 88
// end ;
11597: PPOPN 1
11599: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11600: LD_EXP 5
11604: PPUSH
11605: CALL_OW 302
11609: PUSH
11610: LD_INT 22
11612: PUSH
11613: LD_INT 1
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 25
11622: PUSH
11623: LD_INT 16
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PPUSH
11634: CALL_OW 69
11638: PUSH
11639: LD_INT 0
11641: GREATER
11642: AND
11643: PUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 463
11651: NOT
11652: AND
11653: IFFALSE 11931
11655: GO 11657
11657: DISABLE
// begin DialogueOn ;
11658: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11662: LD_EXP 5
11666: PPUSH
11667: LD_STRING D10-Frank-1
11669: PPUSH
11670: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11674: LD_INT 22
11676: PUSH
11677: LD_INT 1
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 21
11686: PUSH
11687: LD_INT 1
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 2
11696: PUSH
11697: LD_INT 25
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 25
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 25
11719: PUSH
11720: LD_INT 3
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 25
11729: PUSH
11730: LD_INT 4
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PPUSH
11749: CALL_OW 69
11753: PUSH
11754: LD_EXP 1
11758: PUSH
11759: LD_EXP 5
11763: PUSH
11764: LD_EXP 2
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: LIST
11773: DIFF
11774: PPUSH
11775: LD_STRING D10-Sol1-1
11777: PPUSH
11778: LD_STRING D10-FSol1-1
11780: PPUSH
11781: CALL 7292 0 3
// Say ( Frank , D10-Frank-2 ) ;
11785: LD_EXP 5
11789: PPUSH
11790: LD_STRING D10-Frank-2
11792: PPUSH
11793: CALL_OW 88
// if IsOk ( Lisa ) then
11797: LD_EXP 2
11801: PPUSH
11802: CALL_OW 302
11806: IFFALSE 11822
// Say ( Lisa , D10-Lisa-2 ) else
11808: LD_EXP 2
11812: PPUSH
11813: LD_STRING D10-Lisa-2
11815: PPUSH
11816: CALL_OW 88
11820: GO 11927
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11822: LD_INT 22
11824: PUSH
11825: LD_INT 1
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 21
11834: PUSH
11835: LD_INT 1
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_INT 2
11844: PUSH
11845: LD_INT 25
11847: PUSH
11848: LD_INT 1
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: LD_INT 25
11857: PUSH
11858: LD_INT 2
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 25
11867: PUSH
11868: LD_INT 3
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 25
11877: PUSH
11878: LD_INT 4
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: PPUSH
11897: CALL_OW 69
11901: PUSH
11902: LD_EXP 1
11906: PUSH
11907: LD_EXP 5
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: DIFF
11916: PPUSH
11917: LD_STRING D10-Sol1-2
11919: PPUSH
11920: LD_STRING D10-FSol1-2
11922: PPUSH
11923: CALL 7292 0 3
// DialogueOff ;
11927: CALL_OW 7
// end ;
11931: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11932: LD_INT 1
11934: PPUSH
11935: CALL_OW 463
11939: NOT
11940: IFFALSE 12223
11942: GO 11944
11944: DISABLE
// begin HarrisonSupport ;
11945: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11949: LD_EXP 18
11953: PPUSH
11954: CALL_OW 310
11958: PPUSH
11959: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11963: LD_EXP 18
11967: PPUSH
11968: LD_STRING DEng-Eng1-1
11970: PPUSH
11971: CALL_OW 88
// wait ( 1 1$0 ) ;
11975: LD_INT 2100
11977: PPUSH
11978: CALL_OW 67
// DialogueOn ;
11982: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11986: LD_EXP 15
11990: PPUSH
11991: LD_STRING DRem-Har-1
11993: PPUSH
11994: CALL_OW 94
// if contactWithRussian then
11998: LD_EXP 23
12002: IFFALSE 12018
// Say ( JMM , DRem-JMM-1 ) else
12004: LD_EXP 1
12008: PPUSH
12009: LD_STRING DRem-JMM-1
12011: PPUSH
12012: CALL_OW 88
12016: GO 12030
// Say ( JMM , DRem-JMM-1a ) ;
12018: LD_EXP 1
12022: PPUSH
12023: LD_STRING DRem-JMM-1a
12025: PPUSH
12026: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
12030: LD_EXP 15
12034: PPUSH
12035: LD_STRING DRem-Har-2
12037: PPUSH
12038: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12042: LD_STRING DenisInDelta
12044: PPUSH
12045: LD_INT 0
12047: PPUSH
12048: CALL_OW 30
12052: IFFALSE 12068
// Say ( JMM , DRem-JMM-2 ) else
12054: LD_EXP 1
12058: PPUSH
12059: LD_STRING DRem-JMM-2
12061: PPUSH
12062: CALL_OW 88
12066: GO 12080
// Say ( JMM , DRem-JMM-2a ) ;
12068: LD_EXP 1
12072: PPUSH
12073: LD_STRING DRem-JMM-2a
12075: PPUSH
12076: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
12080: LD_EXP 15
12084: PPUSH
12085: LD_STRING DRem-Har-3
12087: PPUSH
12088: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12092: LD_EXP 1
12096: PPUSH
12097: LD_STRING DRem-JMM-3
12099: PPUSH
12100: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12104: LD_EXP 15
12108: PPUSH
12109: LD_STRING DRem-Har-4
12111: PPUSH
12112: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12116: LD_STRING DenisInDelta
12118: PPUSH
12119: LD_INT 0
12121: PPUSH
12122: CALL_OW 30
12126: IFFALSE 12186
// begin Say ( JMM , DRem-JMM-4 ) ;
12128: LD_EXP 1
12132: PPUSH
12133: LD_STRING DRem-JMM-4
12135: PPUSH
12136: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12140: LD_EXP 15
12144: PPUSH
12145: LD_STRING DRem-Har-5
12147: PPUSH
12148: CALL_OW 94
// DialogueOff ;
12152: CALL_OW 7
// wait ( 4 4$00 ) ;
12156: LD_INT 8400
12158: PPUSH
12159: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12163: LD_INT 35
12165: PPUSH
12166: CALL_OW 67
// until not InBattle ( 1 ) ;
12170: LD_INT 1
12172: PPUSH
12173: CALL_OW 463
12177: NOT
12178: IFFALSE 12163
// SpawnDenis ;
12180: CALL 12224 0 0
// end else
12184: GO 12223
// begin DialogueOff ;
12186: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12190: LD_INT 36
12192: PPUSH
12193: LD_INT 1
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12203: LD_INT 15
12205: PPUSH
12206: LD_INT 1
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12216: LD_STRING MR
12218: PPUSH
12219: CALL_OW 337
// end ; end ;
12223: END
// export function SpawnDenis ; var tmp ; begin
12224: LD_INT 0
12226: PPUSH
12227: PPUSH
// PrepareDenis ;
12228: CALL 2244 0 0
// if not Denis then
12232: LD_EXP 9
12236: NOT
12237: IFFALSE 12241
// exit ;
12239: GO 12462
// CenterNowOnUnits ( Denis ) ;
12241: LD_EXP 9
12245: PPUSH
12246: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12250: LD_ADDR_VAR 0 2
12254: PUSH
12255: LD_INT 22
12257: PUSH
12258: LD_INT 1
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12270: LD_EXP 9
12274: PPUSH
12275: LD_VAR 0 2
12279: PPUSH
12280: LD_EXP 9
12284: PPUSH
12285: CALL_OW 74
12289: PPUSH
12290: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12294: LD_INT 35
12296: PPUSH
12297: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12301: LD_INT 22
12303: PUSH
12304: LD_INT 1
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 91
12313: PUSH
12314: LD_EXP 9
12318: PUSH
12319: LD_INT 10
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PPUSH
12331: CALL_OW 69
12335: IFFALSE 12294
// SetSide ( Denis , 1 ) ;
12337: LD_EXP 9
12341: PPUSH
12342: LD_INT 1
12344: PPUSH
12345: CALL_OW 235
// DialogueOn ;
12349: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12353: LD_EXP 9
12357: PPUSH
12358: LD_STRING DDen-Den-1
12360: PPUSH
12361: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12365: LD_EXP 1
12369: PPUSH
12370: LD_STRING DDen-JMM-1
12372: PPUSH
12373: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12377: LD_EXP 9
12381: PPUSH
12382: LD_STRING DDen-Den-2
12384: PPUSH
12385: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12389: LD_EXP 1
12393: PPUSH
12394: LD_STRING DDen-JMM-2
12396: PPUSH
12397: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12401: LD_EXP 9
12405: PPUSH
12406: LD_STRING DDen-Den-3
12408: PPUSH
12409: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12413: LD_EXP 1
12417: PPUSH
12418: LD_STRING DDen-JMM-3
12420: PPUSH
12421: CALL_OW 88
// DialogueOff ;
12425: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12429: LD_INT 36
12431: PPUSH
12432: LD_INT 1
12434: PPUSH
12435: LD_INT 1
12437: PPUSH
12438: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12442: LD_INT 15
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: LD_INT 1
12450: PPUSH
12451: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12455: LD_STRING MR
12457: PPUSH
12458: CALL_OW 337
// end ;
12462: LD_VAR 0 1
12466: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12467: LD_INT 22
12469: PUSH
12470: LD_INT 1
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 30
12479: PUSH
12480: LD_INT 15
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PPUSH
12491: CALL_OW 69
12495: PUSH
12496: LD_EXP 9
12500: PPUSH
12501: CALL_OW 302
12505: AND
12506: PUSH
12507: LD_INT 1
12509: PPUSH
12510: CALL_OW 463
12514: NOT
12515: AND
12516: IFFALSE 12545
12518: GO 12520
12520: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12521: LD_EXP 9
12525: PPUSH
12526: LD_STRING DR1-Den-1
12528: PPUSH
12529: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12533: LD_EXP 1
12537: PPUSH
12538: LD_STRING DR1-JMM-1
12540: PPUSH
12541: CALL_OW 88
// end ;
12545: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12546: LD_INT 15
12548: PPUSH
12549: LD_INT 1
12551: PPUSH
12552: CALL_OW 321
12556: PUSH
12557: LD_INT 2
12559: EQUAL
12560: PUSH
12561: LD_EXP 9
12565: PPUSH
12566: CALL_OW 302
12570: AND
12571: PUSH
12572: LD_INT 1
12574: PPUSH
12575: CALL_OW 463
12579: NOT
12580: AND
12581: IFFALSE 12790
12583: GO 12585
12585: DISABLE
// begin DialogueOn ;
12586: CALL_OW 6
// if IsOK ( Denis ) then
12590: LD_EXP 9
12594: PPUSH
12595: CALL_OW 302
12599: IFFALSE 12615
// Say ( Denis , DR2-Den-1 ) else
12601: LD_EXP 9
12605: PPUSH
12606: LD_STRING DR2-Den-1
12608: PPUSH
12609: CALL_OW 88
12613: GO 12674
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12615: LD_INT 22
12617: PUSH
12618: LD_INT 1
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 21
12627: PUSH
12628: LD_INT 1
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: LD_INT 25
12637: PUSH
12638: LD_INT 4
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: LIST
12649: PPUSH
12650: CALL_OW 69
12654: PUSH
12655: LD_EXP 1
12659: PUSH
12660: EMPTY
12661: LIST
12662: DIFF
12663: PPUSH
12664: LD_STRING DR2-Sci1-1
12666: PPUSH
12667: LD_STRING DR2-FSci1-1
12669: PPUSH
12670: CALL 7292 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12674: LD_EXP 1
12678: PPUSH
12679: LD_STRING DR2-JMM-1
12681: PPUSH
12682: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
12686: LD_INT 22
12688: PUSH
12689: LD_INT 1
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 21
12698: PUSH
12699: LD_INT 1
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: LD_INT 26
12708: PUSH
12709: LD_INT 1
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: LD_INT 23
12718: PUSH
12719: LD_INT 1
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 69
12736: PUSH
12737: LD_EXP 1
12741: PUSH
12742: LD_EXP 9
12746: PUSH
12747: LD_EXP 8
12751: PUSH
12752: LD_EXP 5
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: DIFF
12763: PPUSH
12764: LD_STRING DR2-Sol1-1
12766: PPUSH
12767: LD_STRING 
12769: PPUSH
12770: CALL 7292 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12774: LD_EXP 1
12778: PPUSH
12779: LD_STRING DR2-JMM-2
12781: PPUSH
12782: CALL_OW 88
// DialogueOff ;
12786: CALL_OW 7
// end ;
12790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12791: LD_INT 22
12793: PUSH
12794: LD_INT 1
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 30
12803: PUSH
12804: LD_INT 36
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PPUSH
12815: CALL_OW 69
12819: PUSH
12820: LD_INT 0
12822: EQUAL
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_INT 1
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 21
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 33
12846: PUSH
12847: LD_INT 2
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: LIST
12858: PPUSH
12859: CALL_OW 69
12863: PUSH
12864: LD_INT 0
12866: GREATER
12867: AND
12868: PUSH
12869: LD_EXP 24
12873: PUSH
12874: LD_INT 0
12876: EQUAL
12877: AND
12878: PUSH
12879: LD_INT 1
12881: PPUSH
12882: CALL_OW 463
12886: NOT
12887: AND
12888: IFFALSE 13025
12890: GO 12892
12892: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
12893: LD_INT 22
12895: PUSH
12896: LD_INT 1
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 21
12905: PUSH
12906: LD_INT 1
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 25
12915: PUSH
12916: LD_INT 3
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 26
12925: PUSH
12926: LD_INT 1
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: PPUSH
12939: CALL_OW 69
12943: PUSH
12944: LD_EXP 1
12948: PUSH
12949: LD_EXP 6
12953: PUSH
12954: LD_EXP 7
12958: PUSH
12959: LD_EXP 9
12963: PUSH
12964: LD_EXP 16
12968: PUSH
12969: LD_EXP 3
12973: PUSH
12974: LD_EXP 4
12978: PUSH
12979: LD_EXP 2
12983: PUSH
12984: LD_EXP 5
12988: PUSH
12989: LD_EXP 8
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: DIFF
13006: PPUSH
13007: LD_STRING D3a-Mech1-1
13009: PPUSH
13010: LD_STRING 
13012: PPUSH
13013: CALL 7292 0 3
// firstTower = 2 ;
13017: LD_ADDR_EXP 24
13021: PUSH
13022: LD_INT 2
13024: ST_TO_ADDR
// end ;
13025: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13026: LD_INT 22
13028: PUSH
13029: LD_INT 3
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 21
13038: PUSH
13039: LD_INT 3
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PPUSH
13050: CALL_OW 69
13054: PUSH
13055: LD_INT 0
13057: EQUAL
13058: IFFALSE 13189
13060: GO 13062
13062: DISABLE
13063: LD_INT 0
13065: PPUSH
// begin stop_talking := true ;
13066: LD_ADDR_OWVAR 56
13070: PUSH
13071: LD_INT 1
13073: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13074: LD_ADDR_VAR 0 1
13078: PUSH
13079: LD_INT 22
13081: PUSH
13082: LD_INT 1
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 2
13101: PUSH
13102: LD_INT 25
13104: PUSH
13105: LD_INT 1
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: PUSH
13112: LD_INT 25
13114: PUSH
13115: LD_INT 2
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 25
13124: PUSH
13125: LD_INT 3
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: LD_INT 25
13134: PUSH
13135: LD_INT 4
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 69
13158: PUSH
13159: FOR_IN
13160: IFFALSE 13179
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13162: LD_VAR 0 1
13166: PPUSH
13167: LD_INT 1
13169: PPUSH
13170: LD_INT 7500
13172: PPUSH
13173: CALL_OW 591
13177: GO 13159
13179: POP
13180: POP
// stop_talking := false ;
13181: LD_ADDR_OWVAR 56
13185: PUSH
13186: LD_INT 0
13188: ST_TO_ADDR
// end ;
13189: PPOPN 1
13191: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13192: LD_INT 22
13194: PUSH
13195: LD_INT 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: LD_INT 30
13204: PUSH
13205: LD_INT 36
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PPUSH
13216: CALL_OW 69
13220: PUSH
13221: LD_INT 22
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 21
13233: PUSH
13234: LD_INT 2
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 33
13243: PUSH
13244: LD_INT 2
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: PPUSH
13256: CALL_OW 69
13260: AND
13261: PUSH
13262: CALL 13814 0 0
13266: AND
13267: PUSH
13268: LD_INT 1
13270: PPUSH
13271: CALL_OW 463
13275: NOT
13276: AND
13277: IFFALSE 13811
13279: GO 13281
13281: DISABLE
13282: LD_INT 0
13284: PPUSH
13285: PPUSH
13286: PPUSH
13287: PPUSH
13288: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13289: LD_ADDR_VAR 0 3
13293: PUSH
13294: LD_INT 22
13296: PUSH
13297: LD_INT 1
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 30
13306: PUSH
13307: LD_INT 36
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PPUSH
13318: CALL_OW 69
13322: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13323: LD_ADDR_VAR 0 4
13327: PUSH
13328: LD_INT 22
13330: PUSH
13331: LD_INT 1
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 21
13340: PUSH
13341: LD_INT 2
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 33
13350: PUSH
13351: LD_INT 2
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: PPUSH
13363: CALL_OW 69
13367: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13368: LD_ADDR_VAR 0 5
13372: PUSH
13373: EMPTY
13374: ST_TO_ADDR
// for i in tmpControlTowers do
13375: LD_ADDR_VAR 0 1
13379: PUSH
13380: LD_VAR 0 3
13384: PUSH
13385: FOR_IN
13386: IFFALSE 13809
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13388: LD_EXP 1
13392: PPUSH
13393: CALL_OW 310
13397: PUSH
13398: LD_VAR 0 1
13402: EQUAL
13403: PUSH
13404: LD_EXP 1
13408: PPUSH
13409: CALL_OW 257
13413: PUSH
13414: LD_INT 3
13416: EQUAL
13417: AND
13418: IFFALSE 13552
// begin InGameOn ;
13420: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13424: LD_VAR 0 4
13428: PUSH
13429: LD_INT 1
13431: ARRAY
13432: PPUSH
13433: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13437: LD_EXP 1
13441: PPUSH
13442: LD_STRING D4a-JMM-1
13444: PPUSH
13445: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13449: LD_VAR 0 4
13453: PUSH
13454: LD_INT 1
13456: ARRAY
13457: PPUSH
13458: LD_EXP 1
13462: PPUSH
13463: CALL_OW 53
// wait ( 0 0$1 ) ;
13467: LD_INT 35
13469: PPUSH
13470: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13474: LD_VAR 0 4
13478: PUSH
13479: LD_INT 1
13481: ARRAY
13482: PPUSH
13483: LD_VAR 0 4
13487: PUSH
13488: LD_INT 1
13490: ARRAY
13491: PPUSH
13492: CALL_OW 250
13496: PUSH
13497: LD_INT 3
13499: PLUS
13500: PPUSH
13501: LD_VAR 0 4
13505: PUSH
13506: LD_INT 1
13508: ARRAY
13509: PPUSH
13510: CALL_OW 251
13514: PUSH
13515: LD_INT 2
13517: MINUS
13518: PPUSH
13519: CALL_OW 111
// wait ( 0 0$2 ) ;
13523: LD_INT 70
13525: PPUSH
13526: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13530: LD_EXP 1
13534: PPUSH
13535: LD_STRING D4b-JMM-1
13537: PPUSH
13538: CALL_OW 88
// InGameOff ;
13542: CALL_OW 9
// exit ;
13546: POP
13547: POP
13548: GO 13811
// end else
13550: GO 13807
// begin InGameOn ;
13552: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13556: LD_ADDR_VAR 0 5
13560: PUSH
13561: LD_VAR 0 1
13565: PPUSH
13566: CALL_OW 313
13570: PPUSH
13571: LD_INT 25
13573: PUSH
13574: LD_INT 3
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL_OW 72
13585: ST_TO_ADDR
// if not tmpMechanicInside then
13586: LD_VAR 0 5
13590: NOT
13591: IFFALSE 13595
// continue ;
13593: GO 13385
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13595: LD_VAR 0 5
13599: PUSH
13600: LD_INT 1
13602: ARRAY
13603: PPUSH
13604: CALL_OW 258
13608: PUSH
13609: LD_INT 1
13611: EQUAL
13612: IFFALSE 13632
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13614: LD_VAR 0 5
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: PPUSH
13623: LD_STRING D4a-Mech1-1
13625: PPUSH
13626: CALL_OW 88
13630: GO 13648
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13632: LD_VAR 0 5
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: PPUSH
13641: LD_STRING D4a-FMech1-1
13643: PPUSH
13644: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13648: LD_VAR 0 4
13652: PUSH
13653: LD_INT 1
13655: ARRAY
13656: PPUSH
13657: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13661: LD_VAR 0 4
13665: PUSH
13666: LD_INT 1
13668: ARRAY
13669: PPUSH
13670: LD_VAR 0 5
13674: PUSH
13675: LD_INT 1
13677: ARRAY
13678: PPUSH
13679: CALL_OW 53
// wait ( 0 0$1 ) ;
13683: LD_INT 35
13685: PPUSH
13686: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13690: LD_VAR 0 4
13694: PUSH
13695: LD_INT 1
13697: ARRAY
13698: PPUSH
13699: LD_VAR 0 4
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: CALL_OW 250
13712: PUSH
13713: LD_INT 3
13715: PLUS
13716: PPUSH
13717: LD_VAR 0 4
13721: PUSH
13722: LD_INT 1
13724: ARRAY
13725: PPUSH
13726: CALL_OW 251
13730: PUSH
13731: LD_INT 2
13733: MINUS
13734: PPUSH
13735: CALL_OW 111
// wait ( 0 0$2 ) ;
13739: LD_INT 70
13741: PPUSH
13742: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13746: LD_VAR 0 5
13750: PUSH
13751: LD_INT 1
13753: ARRAY
13754: PPUSH
13755: CALL_OW 258
13759: PUSH
13760: LD_INT 1
13762: EQUAL
13763: IFFALSE 13783
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13765: LD_VAR 0 5
13769: PUSH
13770: LD_INT 1
13772: ARRAY
13773: PPUSH
13774: LD_STRING D4b-Mech1-1
13776: PPUSH
13777: CALL_OW 88
13781: GO 13799
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13783: LD_VAR 0 5
13787: PUSH
13788: LD_INT 1
13790: ARRAY
13791: PPUSH
13792: LD_STRING D4b-FMech1-1
13794: PPUSH
13795: CALL_OW 88
// InGameOff ;
13799: CALL_OW 9
// exit ;
13803: POP
13804: POP
13805: GO 13811
// end ; end ;
13807: GO 13385
13809: POP
13810: POP
// end ;
13811: PPOPN 5
13813: END
// function CheckMehInside ; var i , j , tmp ; begin
13814: LD_INT 0
13816: PPUSH
13817: PPUSH
13818: PPUSH
13819: PPUSH
// result := false ;
13820: LD_ADDR_VAR 0 1
13824: PUSH
13825: LD_INT 0
13827: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13828: LD_ADDR_VAR 0 4
13832: PUSH
13833: LD_INT 22
13835: PUSH
13836: LD_INT 1
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 30
13845: PUSH
13846: LD_INT 36
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PPUSH
13857: CALL_OW 69
13861: ST_TO_ADDR
// if not tmp then
13862: LD_VAR 0 4
13866: NOT
13867: IFFALSE 13871
// exit ;
13869: GO 13935
// for i in tmp do
13871: LD_ADDR_VAR 0 2
13875: PUSH
13876: LD_VAR 0 4
13880: PUSH
13881: FOR_IN
13882: IFFALSE 13933
// for j in UnitsInside ( i ) do
13884: LD_ADDR_VAR 0 3
13888: PUSH
13889: LD_VAR 0 2
13893: PPUSH
13894: CALL_OW 313
13898: PUSH
13899: FOR_IN
13900: IFFALSE 13929
// if GetClass ( j ) = class_mechanic then
13902: LD_VAR 0 3
13906: PPUSH
13907: CALL_OW 257
13911: PUSH
13912: LD_INT 3
13914: EQUAL
13915: IFFALSE 13927
// begin result := true ;
13917: LD_ADDR_VAR 0 1
13921: PUSH
13922: LD_INT 1
13924: ST_TO_ADDR
// break ;
13925: GO 13929
// end ;
13927: GO 13899
13929: POP
13930: POP
13931: GO 13881
13933: POP
13934: POP
// end ;
13935: LD_VAR 0 1
13939: RET
// every 12 12$0 do
13940: GO 13942
13942: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13943: LD_INT 35
13945: PPUSH
13946: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
13950: LD_INT 1
13952: PPUSH
13953: CALL_OW 463
13957: NOT
13958: PUSH
13959: LD_INT 32
13961: PPUSH
13962: LD_INT 81
13964: PUSH
13965: LD_INT 1
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PPUSH
13972: CALL_OW 70
13976: NOT
13977: AND
13978: PUSH
13979: LD_EXP 27
13983: PUSH
13984: LD_INT 10500
13986: LESS
13987: OR
13988: IFFALSE 13943
// PrepareKurt ;
13990: CALL 16623 0 0
// end ;
13994: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13995: LD_EXP 16
13999: PPUSH
14000: CALL_OW 302
14004: PUSH
14005: LD_EXP 16
14009: PPUSH
14010: CALL_OW 255
14014: PUSH
14015: LD_INT 1
14017: EQUAL
14018: AND
14019: PUSH
14020: LD_EXP 2
14024: AND
14025: IFFALSE 14190
14027: GO 14029
14029: DISABLE
// begin wait ( 0 0$50 ) ;
14030: LD_INT 1750
14032: PPUSH
14033: CALL_OW 67
// if not IsOk ( Joan ) then
14037: LD_EXP 16
14041: PPUSH
14042: CALL_OW 302
14046: NOT
14047: IFFALSE 14051
// exit ;
14049: GO 14190
// if IsOK ( Lisa ) then
14051: LD_EXP 2
14055: PPUSH
14056: CALL_OW 302
14060: IFFALSE 14190
// begin DialogueOn ;
14062: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14066: LD_EXP 2
14070: PPUSH
14071: LD_STRING D7-Lisa-1
14073: PPUSH
14074: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14078: LD_EXP 1
14082: PPUSH
14083: LD_STRING D7-JMM-1
14085: PPUSH
14086: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14090: LD_EXP 2
14094: PPUSH
14095: LD_STRING D7-Lisa-2
14097: PPUSH
14098: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14102: LD_EXP 1
14106: PPUSH
14107: LD_STRING D7-JMM-2
14109: PPUSH
14110: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14114: LD_EXP 2
14118: PPUSH
14119: LD_STRING D7-Lisa-3
14121: PPUSH
14122: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14126: LD_EXP 1
14130: PPUSH
14131: LD_STRING D7-JMM-3
14133: PPUSH
14134: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14138: LD_EXP 2
14142: PPUSH
14143: LD_STRING D7-Lisa-4
14145: PPUSH
14146: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14150: LD_EXP 1
14154: PPUSH
14155: LD_STRING D7-JMM-4
14157: PPUSH
14158: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14162: LD_EXP 1
14166: PPUSH
14167: LD_STRING D7-JMM-4a
14169: PPUSH
14170: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14174: LD_EXP 2
14178: PPUSH
14179: LD_STRING D7-Lisa-5
14181: PPUSH
14182: CALL_OW 88
// DialogueOff ;
14186: CALL_OW 7
// end ; end ;
14190: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14191: LD_EXP 14
14195: PUSH
14196: LD_INT 22
14198: PUSH
14199: LD_INT 1
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 91
14208: PUSH
14209: LD_EXP 14
14213: PUSH
14214: LD_INT 10
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 2
14224: PUSH
14225: LD_INT 25
14227: PUSH
14228: LD_INT 1
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 25
14237: PUSH
14238: LD_INT 2
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 25
14247: PUSH
14248: LD_INT 3
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 25
14257: PUSH
14258: LD_INT 4
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: PPUSH
14277: CALL_OW 69
14281: PUSH
14282: LD_INT 1
14284: GREATER
14285: AND
14286: IFFALSE 14303
14288: GO 14290
14290: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14291: LD_EXP 14
14295: PPUSH
14296: LD_STRING D5-Sol1-1
14298: PPUSH
14299: CALL_OW 88
14303: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14304: LD_INT 22
14306: PUSH
14307: LD_INT 1
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 33
14316: PUSH
14317: LD_INT 2
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PPUSH
14328: CALL_OW 69
14332: PUSH
14333: LD_INT 2
14335: GREATEREQUAL
14336: IFFALSE 14356
14338: GO 14340
14340: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14341: LD_STRING MRa
14343: PPUSH
14344: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14348: LD_ADDR_EXP 29
14352: PUSH
14353: LD_INT 1
14355: ST_TO_ADDR
// end ;
14356: END
// every 2 2$00 do var i , last ;
14357: GO 14359
14359: DISABLE
14360: LD_INT 0
14362: PPUSH
14363: PPUSH
// begin last := 8 ;
14364: LD_ADDR_VAR 0 2
14368: PUSH
14369: LD_INT 8
14371: ST_TO_ADDR
// for i = 1 to last do
14372: LD_ADDR_VAR 0 1
14376: PUSH
14377: DOUBLE
14378: LD_INT 1
14380: DEC
14381: ST_TO_ADDR
14382: LD_VAR 0 2
14386: PUSH
14387: FOR_TO
14388: IFFALSE 14416
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14390: LD_INT 6300
14392: PPUSH
14393: LD_INT 12600
14395: PPUSH
14396: CALL_OW 12
14400: PPUSH
14401: CALL_OW 67
// PrepareRandoms ( i ) ;
14405: LD_VAR 0 1
14409: PPUSH
14410: CALL 4230 0 1
// end ;
14414: GO 14387
14416: POP
14417: POP
// end ;
14418: PPOPN 2
14420: END
// every 5 5$20 do
14421: GO 14423
14423: DISABLE
// begin DialogueOn ;
14424: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14428: LD_EXP 10
14432: PPUSH
14433: LD_STRING D12a-Sci-1
14435: PPUSH
14436: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14440: LD_EXP 1
14444: PPUSH
14445: LD_STRING D12a-JMM-1
14447: PPUSH
14448: CALL_OW 88
// DialogueOff ;
14452: CALL_OW 7
// cratesStatus := 1 ;
14456: LD_ADDR_EXP 39
14460: PUSH
14461: LD_INT 1
14463: ST_TO_ADDR
// end ;
14464: END
// every 13 13$0 do
14465: GO 14467
14467: DISABLE
// begin DialogueOn ;
14468: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14472: LD_EXP 10
14476: PPUSH
14477: LD_STRING D12b-Sci-1
14479: PPUSH
14480: CALL_OW 94
// DialogueOff ;
14484: CALL_OW 7
// cratesStatus := 2 ;
14488: LD_ADDR_EXP 39
14492: PUSH
14493: LD_INT 2
14495: ST_TO_ADDR
// BuildBulldozer ;
14496: CALL 10335 0 0
// end ;
14500: END
// every 32 32$0 do
14501: GO 14503
14503: DISABLE
// begin DialogueOn ;
14504: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14508: LD_EXP 10
14512: PPUSH
14513: LD_STRING D12c-Sci-1
14515: PPUSH
14516: CALL_OW 94
// DialogueOff ;
14520: CALL_OW 7
// wait ( 3 3$0 ) ;
14524: LD_INT 6300
14526: PPUSH
14527: CALL_OW 67
// DialogueOn ;
14531: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14535: LD_EXP 10
14539: PPUSH
14540: LD_STRING D12d-Sci-1
14542: PPUSH
14543: CALL_OW 94
// DialogueOff ;
14547: CALL_OW 7
// cratesStatus = 1 ;
14551: LD_ADDR_EXP 39
14555: PUSH
14556: LD_INT 1
14558: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14559: CALL 20873 0 0
// wait ( 2 2$30 ) ;
14563: LD_INT 5250
14565: PPUSH
14566: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14570: LD_INT 35
14572: PPUSH
14573: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14577: LD_INT 1
14579: PPUSH
14580: CALL_OW 463
14584: NOT
14585: PUSH
14586: LD_INT 32
14588: PPUSH
14589: LD_INT 81
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PPUSH
14599: CALL_OW 70
14603: NOT
14604: AND
14605: PUSH
14606: LD_EXP 27
14610: PUSH
14611: LD_INT 6300
14613: LESS
14614: OR
14615: IFFALSE 14570
// PrepareJoan ;
14617: CALL 3085 0 0
// end ;
14621: END
// every 42 42$0 do
14622: GO 14624
14624: DISABLE
// begin DialogueOn ;
14625: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14629: LD_EXP 10
14633: PPUSH
14634: LD_STRING D12e-Sci-1
14636: PPUSH
14637: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14641: LD_EXP 1
14645: PPUSH
14646: LD_STRING D12e-JMM-1
14648: PPUSH
14649: CALL_OW 88
// DialogueOff ;
14653: CALL_OW 7
// cratesStatus := 2 ;
14657: LD_ADDR_EXP 39
14661: PUSH
14662: LD_INT 2
14664: ST_TO_ADDR
// end ; end_of_file
14665: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14666: LD_VAR 0 1
14670: PUSH
14671: LD_INT 1
14673: EQUAL
14674: PUSH
14675: LD_VAR 0 2
14679: PUSH
14680: LD_INT 3
14682: EQUAL
14683: AND
14684: IFFALSE 14694
// contactWithRussian := 1 ;
14686: LD_ADDR_EXP 23
14690: PUSH
14691: LD_INT 1
14693: ST_TO_ADDR
// end ;
14694: PPOPN 2
14696: END
// on BuildingComplete ( building ) do var i ;
14697: LD_INT 0
14699: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 266
14709: PUSH
14710: LD_INT 36
14712: EQUAL
14713: PUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 255
14723: PUSH
14724: LD_INT 1
14726: EQUAL
14727: AND
14728: PUSH
14729: LD_EXP 24
14733: PUSH
14734: LD_INT 0
14736: EQUAL
14737: AND
14738: IFFALSE 14818
// begin firstTower = 1 ;
14740: LD_ADDR_EXP 24
14744: PUSH
14745: LD_INT 1
14747: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14748: LD_INT 22
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 21
14760: PUSH
14761: LD_INT 1
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: LD_INT 25
14770: PUSH
14771: LD_INT 3
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 26
14780: PUSH
14781: LD_INT 1
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: PPUSH
14794: CALL_OW 69
14798: PUSH
14799: LD_EXP 1
14803: PUSH
14804: EMPTY
14805: LIST
14806: DIFF
14807: PPUSH
14808: LD_STRING D3b-Mech1-1
14810: PPUSH
14811: LD_STRING D3b-Mech1-1
14813: PPUSH
14814: CALL 7292 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14818: LD_VAR 0 1
14822: PPUSH
14823: CALL_OW 266
14827: PUSH
14828: LD_INT 0
14830: EQUAL
14831: PUSH
14832: LD_VAR 0 1
14836: PPUSH
14837: CALL_OW 255
14841: PUSH
14842: LD_INT 1
14844: EQUAL
14845: AND
14846: IFFALSE 14860
// SetBName ( building , theta ) ;
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_STRING theta
14855: PPUSH
14856: CALL_OW 500
// if GetSide ( building ) = 3 then
14860: LD_VAR 0 1
14864: PPUSH
14865: CALL_OW 255
14869: PUSH
14870: LD_INT 3
14872: EQUAL
14873: IFFALSE 14913
// begin for i := 1 to 4 do
14875: LD_ADDR_VAR 0 2
14879: PUSH
14880: DOUBLE
14881: LD_INT 1
14883: DEC
14884: ST_TO_ADDR
14885: LD_INT 4
14887: PUSH
14888: FOR_TO
14889: IFFALSE 14911
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14891: LD_ADDR_EXP 32
14895: PUSH
14896: LD_EXP 32
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: CALL_OW 3
14908: ST_TO_ADDR
14909: GO 14888
14911: POP
14912: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14913: LD_VAR 0 1
14917: PPUSH
14918: CALL_OW 255
14922: PUSH
14923: LD_INT 3
14925: EQUAL
14926: PUSH
14927: LD_VAR 0 1
14931: PPUSH
14932: CALL_OW 266
14936: PUSH
14937: LD_INT 0
14939: EQUAL
14940: PUSH
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 266
14950: PUSH
14951: LD_INT 2
14953: EQUAL
14954: OR
14955: PUSH
14956: LD_VAR 0 1
14960: PPUSH
14961: CALL_OW 266
14965: PUSH
14966: LD_INT 4
14968: EQUAL
14969: OR
14970: PUSH
14971: EMPTY
14972: LIST
14973: AND
14974: IFFALSE 14985
// ComUpgrade ( building ) ;
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14985: LD_VAR 0 1
14989: PPUSH
14990: CALL_OW 255
14994: PUSH
14995: LD_INT 3
14997: EQUAL
14998: PUSH
14999: LD_VAR 0 1
15003: PPUSH
15004: CALL_OW 266
15008: PUSH
15009: LD_INT 32
15011: EQUAL
15012: AND
15013: IFFALSE 15054
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15015: LD_VAR 0 1
15019: PPUSH
15020: LD_INT 42
15022: PUSH
15023: LD_INT 43
15025: PUSH
15026: LD_INT 44
15028: PUSH
15029: LD_INT 46
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 1
15040: PPUSH
15041: LD_INT 4
15043: PPUSH
15044: CALL_OW 12
15048: ARRAY
15049: PPUSH
15050: CALL_OW 208
// end ;
15054: PPOPN 2
15056: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
15057: LD_VAR 0 1
15061: PPUSH
15062: CALL 37440 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
15066: LD_VAR 0 1
15070: PUSH
15071: LD_INT 22
15073: PUSH
15074: LD_INT 1
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 21
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 23
15093: PUSH
15094: LD_INT 1
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: PPUSH
15106: CALL_OW 69
15110: IN
15111: IFFALSE 15127
// killCounter := killCounter + 1 ;
15113: LD_ADDR_EXP 46
15117: PUSH
15118: LD_EXP 46
15122: PUSH
15123: LD_INT 1
15125: PLUS
15126: ST_TO_ADDR
// if unit in ruAttackersInForest then
15127: LD_VAR 0 1
15131: PUSH
15132: LD_EXP 49
15136: IN
15137: IFFALSE 15155
// ruAttackersInForest := ruAttackersInForest diff unit ;
15139: LD_ADDR_EXP 49
15143: PUSH
15144: LD_EXP 49
15148: PUSH
15149: LD_VAR 0 1
15153: DIFF
15154: ST_TO_ADDR
// if unit in ruAttackers then
15155: LD_VAR 0 1
15159: PUSH
15160: LD_EXP 48
15164: IN
15165: IFFALSE 15183
// ruAttackers := ruAttackers diff unit ;
15167: LD_ADDR_EXP 48
15171: PUSH
15172: LD_EXP 48
15176: PUSH
15177: LD_VAR 0 1
15181: DIFF
15182: ST_TO_ADDR
// if unit = JMM then
15183: LD_VAR 0 1
15187: PUSH
15188: LD_EXP 1
15192: EQUAL
15193: IFFALSE 15202
// YouLost ( JMM ) ;
15195: LD_STRING JMM
15197: PPUSH
15198: CALL_OW 104
// if unit = Joan then
15202: LD_VAR 0 1
15206: PUSH
15207: LD_EXP 16
15211: EQUAL
15212: IFFALSE 15222
// JoanStatus := 0 ;
15214: LD_ADDR_EXP 17
15218: PUSH
15219: LD_INT 0
15221: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15222: LD_VAR 0 1
15226: PPUSH
15227: CALL_OW 255
15231: PUSH
15232: LD_INT 1
15234: EQUAL
15235: PUSH
15236: LD_VAR 0 1
15240: PPUSH
15241: CALL_OW 247
15245: PUSH
15246: LD_INT 1
15248: EQUAL
15249: AND
15250: PUSH
15251: LD_VAR 0 1
15255: PPUSH
15256: CALL_OW 248
15260: PUSH
15261: LD_INT 1
15263: EQUAL
15264: AND
15265: IFFALSE 15281
// unitLost = unitLost + 1 ;
15267: LD_ADDR_EXP 31
15271: PUSH
15272: LD_EXP 31
15276: PUSH
15277: LD_INT 1
15279: PLUS
15280: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15281: LD_VAR 0 1
15285: PPUSH
15286: CALL_OW 255
15290: PUSH
15291: LD_INT 3
15293: EQUAL
15294: PUSH
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 247
15304: PUSH
15305: LD_INT 3
15307: EQUAL
15308: AND
15309: PUSH
15310: LD_VAR 0 1
15314: PPUSH
15315: CALL_OW 266
15319: PUSH
15320: LD_INT 4
15322: PUSH
15323: LD_INT 5
15325: PUSH
15326: LD_INT 32
15328: PUSH
15329: LD_INT 31
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: IN
15338: AND
15339: IFFALSE 15425
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15341: LD_ADDR_EXP 32
15345: PUSH
15346: LD_EXP 32
15350: PUSH
15351: LD_VAR 0 1
15355: PPUSH
15356: CALL_OW 266
15360: ADD
15361: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15362: LD_ADDR_EXP 32
15366: PUSH
15367: LD_EXP 32
15371: PUSH
15372: LD_VAR 0 1
15376: PPUSH
15377: CALL_OW 250
15381: ADD
15382: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15383: LD_ADDR_EXP 32
15387: PUSH
15388: LD_EXP 32
15392: PUSH
15393: LD_VAR 0 1
15397: PPUSH
15398: CALL_OW 251
15402: ADD
15403: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15404: LD_ADDR_EXP 32
15408: PUSH
15409: LD_EXP 32
15413: PUSH
15414: LD_VAR 0 1
15418: PPUSH
15419: CALL_OW 254
15423: ADD
15424: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15425: LD_EXP 47
15429: PUSH
15430: LD_VAR 0 1
15434: PPUSH
15435: CALL_OW 257
15439: PUSH
15440: LD_INT 3
15442: EQUAL
15443: AND
15444: PUSH
15445: LD_VAR 0 1
15449: PPUSH
15450: CALL_OW 255
15454: PUSH
15455: LD_INT 3
15457: EQUAL
15458: AND
15459: PUSH
15460: LD_INT 21
15462: PPUSH
15463: CALL_OW 302
15467: AND
15468: PUSH
15469: LD_INT 21
15471: PPUSH
15472: CALL_OW 255
15476: PUSH
15477: LD_INT 3
15479: EQUAL
15480: AND
15481: IFFALSE 15563
// begin ruMechCounter := ruMechCounter - 1 ;
15483: LD_ADDR_EXP 47
15487: PUSH
15488: LD_EXP 47
15492: PUSH
15493: LD_INT 1
15495: MINUS
15496: ST_TO_ADDR
// uc_side := 3 ;
15497: LD_ADDR_OWVAR 20
15501: PUSH
15502: LD_INT 3
15504: ST_TO_ADDR
// uc_nation := 3 ;
15505: LD_ADDR_OWVAR 21
15509: PUSH
15510: LD_INT 3
15512: ST_TO_ADDR
// hc_gallery :=  ;
15513: LD_ADDR_OWVAR 33
15517: PUSH
15518: LD_STRING 
15520: ST_TO_ADDR
// hc_name :=  ;
15521: LD_ADDR_OWVAR 26
15525: PUSH
15526: LD_STRING 
15528: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15529: LD_INT 0
15531: PPUSH
15532: LD_EXP 35
15536: PPUSH
15537: LD_EXP 36
15541: PPUSH
15542: CALL_OW 12
15546: PPUSH
15547: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15551: CALL_OW 44
15555: PPUSH
15556: LD_INT 21
15558: PPUSH
15559: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15563: LD_VAR 0 1
15567: PPUSH
15568: CALL_OW 255
15572: PUSH
15573: LD_INT 3
15575: EQUAL
15576: PUSH
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 264
15586: PUSH
15587: LD_INT 52
15589: EQUAL
15590: AND
15591: PUSH
15592: LD_INT 21
15594: PPUSH
15595: CALL_OW 302
15599: AND
15600: PUSH
15601: LD_INT 21
15603: PPUSH
15604: CALL_OW 255
15608: PUSH
15609: LD_INT 3
15611: EQUAL
15612: AND
15613: IFFALSE 15634
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15615: LD_INT 21
15617: PPUSH
15618: LD_INT 22
15620: PPUSH
15621: LD_INT 1
15623: PPUSH
15624: LD_INT 1
15626: PPUSH
15627: LD_INT 52
15629: PPUSH
15630: CALL_OW 125
// end ;
15634: PPOPN 1
15636: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15637: LD_INT 0
15639: PPUSH
15640: PPUSH
15641: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15642: LD_VAR 0 1
15646: PPUSH
15647: LD_VAR 0 2
15651: PPUSH
15652: CALL 37560 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15656: LD_VAR 0 1
15660: PPUSH
15661: CALL_OW 255
15665: PUSH
15666: LD_INT 3
15668: EQUAL
15669: PUSH
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 264
15679: PUSH
15680: LD_INT 51
15682: PUSH
15683: LD_INT 52
15685: PUSH
15686: LD_INT 53
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: LIST
15693: IN
15694: NOT
15695: AND
15696: IFFALSE 15727
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15698: LD_ADDR_EXP 48
15702: PUSH
15703: LD_EXP 48
15707: PPUSH
15708: LD_EXP 48
15712: PUSH
15713: LD_INT 1
15715: PLUS
15716: PPUSH
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 1
15726: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15727: LD_VAR 0 1
15731: PPUSH
15732: CALL_OW 264
15736: PUSH
15737: LD_INT 53
15739: EQUAL
15740: IFFALSE 15895
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15742: LD_VAR 0 1
15746: PPUSH
15747: LD_INT 60
15749: PPUSH
15750: LD_INT 85
15752: PPUSH
15753: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15757: LD_VAR 0 1
15761: PPUSH
15762: LD_INT 43
15764: PPUSH
15765: LD_INT 69
15767: PPUSH
15768: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15772: LD_VAR 0 1
15776: PPUSH
15777: LD_INT 37
15779: PPUSH
15780: LD_INT 46
15782: PPUSH
15783: CALL_OW 171
// wait ( 0 0$1 ) ;
15787: LD_INT 35
15789: PPUSH
15790: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15794: LD_INT 35
15796: PPUSH
15797: CALL_OW 67
// until not HasTask ( vehicle ) ;
15801: LD_VAR 0 1
15805: PPUSH
15806: CALL_OW 314
15810: NOT
15811: IFFALSE 15794
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15813: LD_VAR 0 1
15817: PPUSH
15818: LD_INT 34
15820: PPUSH
15821: CALL 10387 0 2
// repeat wait ( 0 0$1 ) ;
15825: LD_INT 35
15827: PPUSH
15828: CALL_OW 67
// until not HasTask ( vehicle ) ;
15832: LD_VAR 0 1
15836: PPUSH
15837: CALL_OW 314
15841: NOT
15842: IFFALSE 15825
// un := IsDrivenBy ( vehicle ) ;
15844: LD_ADDR_VAR 0 4
15848: PUSH
15849: LD_VAR 0 1
15853: PPUSH
15854: CALL_OW 311
15858: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15859: LD_VAR 0 4
15863: PPUSH
15864: LD_INT 96
15866: PPUSH
15867: LD_INT 77
15869: PPUSH
15870: CALL_OW 171
// AddComExitVehicle ( un ) ;
15874: LD_VAR 0 4
15878: PPUSH
15879: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15883: LD_VAR 0 4
15887: PPUSH
15888: LD_INT 17
15890: PPUSH
15891: CALL_OW 180
// end ; end ;
15895: PPOPN 5
15897: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15898: LD_VAR 0 1
15902: PPUSH
15903: CALL_OW 255
15907: PUSH
15908: LD_INT 3
15910: EQUAL
15911: IFFALSE 15942
// begin tamedApemans = tamedApemans + 1 ;
15913: LD_ADDR_EXP 33
15917: PUSH
15918: LD_EXP 33
15922: PUSH
15923: LD_INT 1
15925: PLUS
15926: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15927: LD_VAR 0 1
15931: PPUSH
15932: LD_INT 106
15934: PPUSH
15935: LD_INT 85
15937: PPUSH
15938: CALL_OW 111
// end ; end ;
15942: PPOPN 2
15944: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15945: LD_VAR 0 2
15949: PPUSH
15950: CALL_OW 255
15954: PUSH
15955: LD_INT 3
15957: EQUAL
15958: PUSH
15959: LD_VAR 0 1
15963: PPUSH
15964: CALL_OW 255
15968: PUSH
15969: LD_INT 3
15971: EQUAL
15972: AND
15973: PUSH
15974: LD_INT 21
15976: PPUSH
15977: CALL_OW 302
15981: AND
15982: IFFALSE 15996
// ComEnterUnit ( human , rufab ) ;
15984: LD_VAR 0 1
15988: PPUSH
15989: LD_INT 21
15991: PPUSH
15992: CALL_OW 120
// end ;
15996: PPOPN 4
15998: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15999: LD_VAR 0 1
16003: PUSH
16004: LD_INT 21
16006: EQUAL
16007: PUSH
16008: LD_VAR 0 2
16012: PPUSH
16013: CALL_OW 255
16017: PUSH
16018: LD_INT 3
16020: EQUAL
16021: AND
16022: IFFALSE 16036
// SetLives ( human , 1000 ) ;
16024: LD_VAR 0 2
16028: PPUSH
16029: LD_INT 1000
16031: PPUSH
16032: CALL_OW 234
// end ;
16036: PPOPN 2
16038: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16039: LD_VAR 0 1
16043: PPUSH
16044: CALL 37544 0 1
// end ; end_of_file
16048: PPOPN 1
16050: END
// every 0 0$30 trigger cratesStatus = 1 do
16051: LD_EXP 39
16055: PUSH
16056: LD_INT 1
16058: EQUAL
16059: IFFALSE 16112
16061: GO 16063
16063: DISABLE
// begin enable ;
16064: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
16065: LD_INT 350
16067: PUSH
16068: LD_INT 875
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 1
16077: PPUSH
16078: LD_INT 2
16080: PPUSH
16081: CALL_OW 12
16085: ARRAY
16086: PPUSH
16087: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
16091: LD_INT 1
16093: PPUSH
16094: LD_INT 5
16096: PPUSH
16097: CALL_OW 12
16101: PPUSH
16102: LD_INT 7
16104: PPUSH
16105: LD_INT 1
16107: PPUSH
16108: CALL_OW 55
// end ;
16112: END
// every 1 1$0 trigger cratesStatus = 2 do
16113: LD_EXP 39
16117: PUSH
16118: LD_INT 2
16120: EQUAL
16121: IFFALSE 16204
16123: GO 16125
16125: DISABLE
// begin enable ;
16126: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16127: LD_INT 3150
16129: PUSH
16130: LD_INT 4550
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 1
16139: PPUSH
16140: LD_INT 2
16142: PPUSH
16143: CALL_OW 12
16147: ARRAY
16148: PPUSH
16149: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16153: LD_INT 2
16155: PUSH
16156: LD_INT 5
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 1
16165: PPUSH
16166: LD_INT 2
16168: PPUSH
16169: CALL_OW 12
16173: ARRAY
16174: PPUSH
16175: LD_INT 6
16177: PUSH
16178: LD_INT 7
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 1
16187: PPUSH
16188: LD_INT 2
16190: PPUSH
16191: CALL_OW 12
16195: ARRAY
16196: PPUSH
16197: LD_INT 1
16199: PPUSH
16200: CALL_OW 55
// end ;
16204: END
// every 0 0$30 + 0 0$10 do
16205: GO 16207
16207: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16208: LD_INT 4
16210: PUSH
16211: LD_INT 5
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 1
16220: PPUSH
16221: LD_INT 2
16223: PPUSH
16224: CALL_OW 12
16228: ARRAY
16229: PPUSH
16230: LD_INT 7
16232: PPUSH
16233: LD_INT 1
16235: PPUSH
16236: CALL_OW 55
// Wait ( 0 0$15 ) ;
16240: LD_INT 525
16242: PPUSH
16243: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16247: LD_INT 4
16249: PUSH
16250: LD_INT 5
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 1
16259: PPUSH
16260: LD_INT 2
16262: PPUSH
16263: CALL_OW 12
16267: ARRAY
16268: PPUSH
16269: LD_INT 7
16271: PPUSH
16272: LD_INT 1
16274: PPUSH
16275: CALL_OW 55
// Wait ( 0 0$20 ) ;
16279: LD_INT 700
16281: PPUSH
16282: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16286: LD_INT 4
16288: PUSH
16289: LD_INT 5
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 1
16298: PPUSH
16299: LD_INT 2
16301: PPUSH
16302: CALL_OW 12
16306: ARRAY
16307: PPUSH
16308: LD_INT 7
16310: PPUSH
16311: LD_INT 1
16313: PPUSH
16314: CALL_OW 55
// end ; end_of_file
16318: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16319: LD_EXP 25
16323: PUSH
16324: LD_INT 1
16326: EQUAL
16327: IFFALSE 16620
16329: GO 16331
16331: DISABLE
16332: LD_INT 0
16334: PPUSH
16335: PPUSH
16336: PPUSH
// begin enable ;
16337: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16338: LD_ADDR_VAR 0 2
16342: PUSH
16343: LD_INT 22
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 21
16355: PUSH
16356: LD_INT 3
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 2
16365: PUSH
16366: LD_INT 30
16368: PUSH
16369: LD_INT 0
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 30
16378: PUSH
16379: LD_INT 1
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: LIST
16395: PPUSH
16396: CALL_OW 69
16400: ST_TO_ADDR
// for i in tmp do
16401: LD_ADDR_VAR 0 1
16405: PUSH
16406: LD_VAR 0 2
16410: PUSH
16411: FOR_IN
16412: IFFALSE 16445
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16414: LD_ADDR_VAR 0 3
16418: PUSH
16419: LD_VAR 0 3
16423: PUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 274
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: CALL_OW 275
16441: PLUS
16442: ST_TO_ADDR
16443: GO 16411
16445: POP
16446: POP
// strings = [ ] ;
16447: LD_ADDR_EXP 28
16451: PUSH
16452: EMPTY
16453: ST_TO_ADDR
// if tmp = 0 then
16454: LD_VAR 0 2
16458: PUSH
16459: LD_INT 0
16461: EQUAL
16462: IFFALSE 16487
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16464: LD_ADDR_EXP 28
16468: PUSH
16469: LD_EXP 28
16473: PUSH
16474: LD_STRING #Am06-1
16476: PUSH
16477: LD_EXP 26
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: ADD
16486: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16487: LD_VAR 0 2
16491: PUSH
16492: LD_EXP 26
16496: PUSH
16497: LD_VAR 0 3
16501: GREATER
16502: AND
16503: IFFALSE 16534
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16505: LD_ADDR_EXP 28
16509: PUSH
16510: LD_EXP 28
16514: PUSH
16515: LD_STRING #Am06-1
16517: PUSH
16518: LD_EXP 26
16522: PUSH
16523: LD_VAR 0 3
16527: MINUS
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: ADD
16533: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16534: LD_VAR 0 2
16538: PUSH
16539: LD_EXP 26
16543: PUSH
16544: LD_VAR 0 3
16548: LESSEQUAL
16549: AND
16550: IFFALSE 16573
// strings = strings ^ [ #Am06-1 , 0 ] ;
16552: LD_ADDR_EXP 28
16556: PUSH
16557: LD_EXP 28
16561: PUSH
16562: LD_STRING #Am06-1
16564: PUSH
16565: LD_INT 0
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: ADD
16572: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16573: LD_ADDR_EXP 27
16577: PUSH
16578: LD_EXP 27
16582: PUSH
16583: LD_INT 35
16585: MINUS
16586: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16587: LD_ADDR_EXP 28
16591: PUSH
16592: LD_EXP 28
16596: PUSH
16597: LD_STRING #Am06-2
16599: PUSH
16600: LD_EXP 27
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: ADD
16609: ST_TO_ADDR
// display_strings = strings ;
16610: LD_ADDR_OWVAR 47
16614: PUSH
16615: LD_EXP 28
16619: ST_TO_ADDR
// end ; end_of_file
16620: PPOPN 3
16622: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
16623: LD_INT 0
16625: PPUSH
16626: PPUSH
16627: PPUSH
16628: PPUSH
16629: PPUSH
16630: PPUSH
16631: PPUSH
16632: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16633: LD_ADDR_VAR 0 3
16637: PUSH
16638: LD_INT 22
16640: PUSH
16641: LD_INT 1
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 2
16650: PUSH
16651: LD_INT 30
16653: PUSH
16654: LD_INT 0
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 30
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: LIST
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PPUSH
16680: CALL_OW 69
16684: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16685: LD_INT 35
16687: PPUSH
16688: CALL_OW 67
// until depot ;
16692: LD_VAR 0 3
16696: IFFALSE 16633
// forceJMM := false ;
16698: LD_ADDR_VAR 0 8
16702: PUSH
16703: LD_INT 0
16705: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16706: LD_INT 35
16708: PPUSH
16709: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
16713: LD_ADDR_VAR 0 4
16717: PUSH
16718: LD_INT 22
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 91
16730: PUSH
16731: LD_VAR 0 3
16735: PUSH
16736: LD_INT 1
16738: ARRAY
16739: PUSH
16740: LD_INT 15
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 21
16750: PUSH
16751: LD_INT 1
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 2
16760: PUSH
16761: LD_INT 25
16763: PUSH
16764: LD_INT 1
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 25
16773: PUSH
16774: LD_INT 2
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 25
16783: PUSH
16784: LD_INT 3
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 25
16793: PUSH
16794: LD_INT 4
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 3
16810: PUSH
16811: LD_INT 54
16813: PUSH
16814: EMPTY
16815: LIST
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 3
16823: PUSH
16824: LD_INT 55
16826: PUSH
16827: EMPTY
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: PPUSH
16842: CALL_OW 69
16846: PUSH
16847: LD_EXP 2
16851: PUSH
16852: LD_EXP 3
16856: PUSH
16857: LD_EXP 4
16861: PUSH
16862: LD_EXP 5
16866: PUSH
16867: LD_EXP 7
16871: PUSH
16872: LD_EXP 8
16876: PUSH
16877: LD_EXP 9
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: DIFF
16891: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
16892: LD_EXP 27
16896: PUSH
16897: LD_INT 21000
16899: LESS
16900: IFFALSE 16912
// begin forceJMM := true ;
16902: LD_ADDR_VAR 0 8
16906: PUSH
16907: LD_INT 1
16909: ST_TO_ADDR
// break ;
16910: GO 16928
// end ; until tmp and not InBattle ( 1 ) ;
16912: LD_VAR 0 4
16916: PUSH
16917: LD_INT 1
16919: PPUSH
16920: CALL_OW 463
16924: NOT
16925: AND
16926: IFFALSE 16706
// if not forceJMM then
16928: LD_VAR 0 8
16932: NOT
16933: IFFALSE 16961
// tmp := tmp [ rand ( 1 , tmp ) ] else
16935: LD_ADDR_VAR 0 4
16939: PUSH
16940: LD_VAR 0 4
16944: PUSH
16945: LD_INT 1
16947: PPUSH
16948: LD_VAR 0 4
16952: PPUSH
16953: CALL_OW 12
16957: ARRAY
16958: ST_TO_ADDR
16959: GO 16971
// tmp := JMM ;
16961: LD_ADDR_VAR 0 4
16965: PUSH
16966: LD_EXP 1
16970: ST_TO_ADDR
// blockSpawn := 1 ;
16971: LD_ADDR_EXP 30
16975: PUSH
16976: LD_INT 1
16978: ST_TO_ADDR
// uc_side := 2 ;
16979: LD_ADDR_OWVAR 20
16983: PUSH
16984: LD_INT 2
16986: ST_TO_ADDR
// uc_nation := 2 ;
16987: LD_ADDR_OWVAR 21
16991: PUSH
16992: LD_INT 2
16994: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16995: LD_ADDR_EXP 20
16999: PUSH
17000: LD_STRING Kurt
17002: PPUSH
17003: LD_INT 0
17005: PPUSH
17006: LD_STRING 
17008: PPUSH
17009: CALL 42168 0 3
17013: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17014: LD_EXP 20
17018: PPUSH
17019: LD_VAR 0 4
17023: PPUSH
17024: CALL_OW 250
17028: PPUSH
17029: LD_VAR 0 4
17033: PPUSH
17034: CALL_OW 251
17038: PPUSH
17039: LD_INT 5
17041: PPUSH
17042: LD_INT 1
17044: PPUSH
17045: CALL_OW 50
// InGameOn ;
17049: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17053: LD_EXP 20
17057: PPUSH
17058: CALL_OW 87
// wait ( 0 0$2 ) ;
17062: LD_INT 70
17064: PPUSH
17065: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17069: LD_EXP 20
17073: PPUSH
17074: LD_VAR 0 4
17078: PPUSH
17079: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
17083: LD_VAR 0 4
17087: PPUSH
17088: LD_EXP 20
17092: PPUSH
17093: CALL_OW 112
// wait ( 0 0$1 ) ;
17097: LD_INT 35
17099: PPUSH
17100: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17104: LD_VAR 0 4
17108: PPUSH
17109: LD_EXP 20
17113: PPUSH
17114: CALL_OW 119
// DialogueOn ;
17118: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17122: LD_EXP 20
17126: PPUSH
17127: LD_STRING D2-Kurt-1
17129: PPUSH
17130: CALL_OW 88
// if tmp = JMM then
17134: LD_VAR 0 4
17138: PUSH
17139: LD_EXP 1
17143: EQUAL
17144: IFFALSE 17236
// begin Say ( JMM , D2-JMM-1 ) ;
17146: LD_EXP 1
17150: PPUSH
17151: LD_STRING D2-JMM-1
17153: PPUSH
17154: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17158: LD_EXP 20
17162: PPUSH
17163: LD_STRING D2-Kurt-2
17165: PPUSH
17166: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17170: LD_EXP 1
17174: PPUSH
17175: LD_STRING D2-JMM-2
17177: PPUSH
17178: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17182: LD_EXP 20
17186: PPUSH
17187: LD_STRING D2-Kurt-3
17189: PPUSH
17190: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17194: LD_EXP 1
17198: PPUSH
17199: LD_STRING D2-JMM-3
17201: PPUSH
17202: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17206: LD_EXP 20
17210: PPUSH
17211: LD_STRING D2-Kurt-4
17213: PPUSH
17214: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17218: LD_EXP 1
17222: PPUSH
17223: LD_STRING D2-JMM-4
17225: PPUSH
17226: CALL_OW 88
// DialogueOff ;
17230: CALL_OW 7
// end else
17234: GO 17464
// begin if GetSex ( tmp ) = 1 then
17236: LD_VAR 0 4
17240: PPUSH
17241: CALL_OW 258
17245: PUSH
17246: LD_INT 1
17248: EQUAL
17249: IFFALSE 17265
// Say ( tmp , D2-Sol1-1 ) else
17251: LD_VAR 0 4
17255: PPUSH
17256: LD_STRING D2-Sol1-1
17258: PPUSH
17259: CALL_OW 88
17263: GO 17277
// Say ( tmp , D2-FSol1-1 ) ;
17265: LD_VAR 0 4
17269: PPUSH
17270: LD_STRING D2-FSol1-1
17272: PPUSH
17273: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17277: LD_EXP 20
17281: PPUSH
17282: LD_STRING D2-Kurt-2
17284: PPUSH
17285: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17289: LD_VAR 0 4
17293: PPUSH
17294: CALL_OW 258
17298: PUSH
17299: LD_INT 1
17301: EQUAL
17302: IFFALSE 17318
// Say ( tmp , D2-Sol1-2 ) else
17304: LD_VAR 0 4
17308: PPUSH
17309: LD_STRING D2-Sol1-2
17311: PPUSH
17312: CALL_OW 88
17316: GO 17330
// Say ( tmp , D2-FSol1-2 ) ;
17318: LD_VAR 0 4
17322: PPUSH
17323: LD_STRING D2-FSol1-2
17325: PPUSH
17326: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17330: LD_EXP 20
17334: PPUSH
17335: LD_STRING D2-Kurt-3
17337: PPUSH
17338: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17342: LD_VAR 0 4
17346: PPUSH
17347: CALL_OW 258
17351: PUSH
17352: LD_INT 1
17354: EQUAL
17355: IFFALSE 17371
// Say ( tmp , D2-Sol1-3 ) else
17357: LD_VAR 0 4
17361: PPUSH
17362: LD_STRING D2-Sol1-3
17364: PPUSH
17365: CALL_OW 88
17369: GO 17383
// Say ( tmp , D2-FSol1-3 ) ;
17371: LD_VAR 0 4
17375: PPUSH
17376: LD_STRING D2-FSol1-3
17378: PPUSH
17379: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17383: LD_EXP 20
17387: PPUSH
17388: LD_STRING D2-Kurt-4
17390: PPUSH
17391: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17395: LD_VAR 0 4
17399: PPUSH
17400: CALL_OW 258
17404: PUSH
17405: LD_INT 1
17407: EQUAL
17408: IFFALSE 17436
// begin Say ( tmp , D2-Sol1-4 ) ;
17410: LD_VAR 0 4
17414: PPUSH
17415: LD_STRING D2-Sol1-4
17417: PPUSH
17418: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17422: LD_VAR 0 4
17426: PPUSH
17427: LD_STRING D2-Sol1-5
17429: PPUSH
17430: CALL_OW 88
// end else
17434: GO 17460
// begin Say ( tmp , D2-FSol1-4 ) ;
17436: LD_VAR 0 4
17440: PPUSH
17441: LD_STRING D2-FSol1-4
17443: PPUSH
17444: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17448: LD_VAR 0 4
17452: PPUSH
17453: LD_STRING D2-FSol1-5
17455: PPUSH
17456: CALL_OW 88
// end ; DialogueOff ;
17460: CALL_OW 7
// end ; dec := ShowQuery1 ;
17464: LD_ADDR_VAR 0 6
17468: PUSH
17469: CALL 7777 0 0
17473: ST_TO_ADDR
// if dec = 1 then
17474: LD_VAR 0 6
17478: PUSH
17479: LD_INT 1
17481: EQUAL
17482: IFFALSE 17544
// begin DialogueOn ;
17484: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17488: LD_EXP 20
17492: PPUSH
17493: LD_STRING D2a-Kurt-1
17495: PPUSH
17496: CALL_OW 88
// DialogueOff ;
17500: CALL_OW 7
// InGameOff ;
17504: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17508: LD_INT 1
17510: PPUSH
17511: LD_INT 2
17513: PPUSH
17514: LD_INT 2
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17524: LD_EXP 20
17528: PPUSH
17529: LD_INT 8
17531: PPUSH
17532: CALL_OW 113
// readyToEscape := 1 ;
17536: LD_ADDR_EXP 22
17540: PUSH
17541: LD_INT 1
17543: ST_TO_ADDR
// end ; if dec = 2 then
17544: LD_VAR 0 6
17548: PUSH
17549: LD_INT 2
17551: EQUAL
17552: IFFALSE 18020
// begin DialogueOn ;
17554: CALL_OW 6
// if tmp = JMM then
17558: LD_VAR 0 4
17562: PUSH
17563: LD_EXP 1
17567: EQUAL
17568: IFFALSE 17624
// begin Say ( JMM , D2b-JMM-1 ) ;
17570: LD_EXP 1
17574: PPUSH
17575: LD_STRING D2b-JMM-1
17577: PPUSH
17578: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17582: LD_EXP 20
17586: PPUSH
17587: LD_STRING D2b-Kurt-1
17589: PPUSH
17590: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17594: LD_EXP 1
17598: PPUSH
17599: LD_STRING D2b-JMM-2
17601: PPUSH
17602: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17606: LD_EXP 20
17610: PPUSH
17611: LD_STRING D2b-Kurt-2
17613: PPUSH
17614: CALL_OW 88
// DialogueOff ;
17618: CALL_OW 7
// end else
17622: GO 17775
// begin if GetSex ( tmp ) = 1 then
17624: LD_VAR 0 4
17628: PPUSH
17629: CALL_OW 258
17633: PUSH
17634: LD_INT 1
17636: EQUAL
17637: IFFALSE 17653
// Say ( tmp , D2b-Sol1-1 ) else
17639: LD_VAR 0 4
17643: PPUSH
17644: LD_STRING D2b-Sol1-1
17646: PPUSH
17647: CALL_OW 88
17651: GO 17665
// Say ( tmp , D2b-FSol1-1 ) ;
17653: LD_VAR 0 4
17657: PPUSH
17658: LD_STRING D2b-FSol1-1
17660: PPUSH
17661: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17665: LD_EXP 20
17669: PPUSH
17670: LD_STRING D2b-Kurt-1
17672: PPUSH
17673: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17677: LD_VAR 0 4
17681: PPUSH
17682: CALL_OW 258
17686: PUSH
17687: LD_INT 1
17689: EQUAL
17690: IFFALSE 17706
// Say ( tmp , D2b-Sol1-2 ) else
17692: LD_VAR 0 4
17696: PPUSH
17697: LD_STRING D2b-Sol1-2
17699: PPUSH
17700: CALL_OW 88
17704: GO 17718
// Say ( tmp , D2b-FSol1-2 ) ;
17706: LD_VAR 0 4
17710: PPUSH
17711: LD_STRING D2b-FSol1-2
17713: PPUSH
17714: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17718: LD_EXP 20
17722: PPUSH
17723: LD_STRING D2b-Kurt-2
17725: PPUSH
17726: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17730: LD_VAR 0 4
17734: PPUSH
17735: CALL_OW 258
17739: PUSH
17740: LD_INT 1
17742: EQUAL
17743: IFFALSE 17759
// Say ( tmp , D2c-Sol1-2 ) else
17745: LD_VAR 0 4
17749: PPUSH
17750: LD_STRING D2c-Sol1-2
17752: PPUSH
17753: CALL_OW 88
17757: GO 17771
// Say ( tmp , D2c-FSol1-2 ) ;
17759: LD_VAR 0 4
17763: PPUSH
17764: LD_STRING D2c-FSol1-2
17766: PPUSH
17767: CALL_OW 88
// DialogueOff ;
17771: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17775: LD_ADDR_VAR 0 7
17779: PUSH
17780: CALL 7798 0 0
17784: ST_TO_ADDR
// if dec2 = 1 then
17785: LD_VAR 0 7
17789: PUSH
17790: LD_INT 1
17792: EQUAL
17793: IFFALSE 17855
// begin DialogueOn ;
17795: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17799: LD_EXP 20
17803: PPUSH
17804: LD_STRING D2a-Kurt-1
17806: PPUSH
17807: CALL_OW 88
// DialogueOff ;
17811: CALL_OW 7
// InGameOff ;
17815: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17819: LD_INT 1
17821: PPUSH
17822: LD_INT 2
17824: PPUSH
17825: LD_INT 2
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17835: LD_EXP 20
17839: PPUSH
17840: LD_INT 8
17842: PPUSH
17843: CALL_OW 113
// readyToEscape := 1 ;
17847: LD_ADDR_EXP 22
17851: PUSH
17852: LD_INT 1
17854: ST_TO_ADDR
// end ; if dec2 = 2 then
17855: LD_VAR 0 7
17859: PUSH
17860: LD_INT 2
17862: EQUAL
17863: IFFALSE 18020
// begin if tmp = JMM then
17865: LD_VAR 0 4
17869: PUSH
17870: LD_EXP 1
17874: EQUAL
17875: IFFALSE 17935
// begin DialogueOn ;
17877: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17881: LD_EXP 1
17885: PPUSH
17886: LD_STRING D2c-JMM-1
17888: PPUSH
17889: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17893: LD_EXP 20
17897: PPUSH
17898: LD_STRING D2c-Kurt-1
17900: PPUSH
17901: CALL_OW 88
// DialogueOff ;
17905: CALL_OW 7
// InGameOff ;
17909: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17913: LD_EXP 20
17917: PPUSH
17918: LD_INT 8
17920: PPUSH
17921: CALL_OW 113
// readyToEscape := 1 ;
17925: LD_ADDR_EXP 22
17929: PUSH
17930: LD_INT 1
17932: ST_TO_ADDR
// end else
17933: GO 18020
// begin DialogueOn ;
17935: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17939: LD_VAR 0 4
17943: PPUSH
17944: CALL_OW 258
17948: PUSH
17949: LD_INT 1
17951: EQUAL
17952: IFFALSE 17968
// Say ( tmp , D2c-Sol1-1 ) else
17954: LD_VAR 0 4
17958: PPUSH
17959: LD_STRING D2c-Sol1-1
17961: PPUSH
17962: CALL_OW 88
17966: GO 17980
// Say ( tmp , D2c-FSol1-1 ) ;
17968: LD_VAR 0 4
17972: PPUSH
17973: LD_STRING D2c-FSol1-1
17975: PPUSH
17976: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17980: LD_EXP 20
17984: PPUSH
17985: LD_STRING D2c-Kurt-1
17987: PPUSH
17988: CALL_OW 88
// DialogueOff ;
17992: CALL_OW 7
// InGameOff ;
17996: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18000: LD_EXP 20
18004: PPUSH
18005: LD_INT 8
18007: PPUSH
18008: CALL_OW 113
// readyToEscape := 1 ;
18012: LD_ADDR_EXP 22
18016: PUSH
18017: LD_INT 1
18019: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18020: LD_VAR 0 6
18024: PUSH
18025: LD_INT 3
18027: EQUAL
18028: IFFALSE 18189
// begin DialogueOn ;
18030: CALL_OW 6
// if tmp = JMM then
18034: LD_VAR 0 4
18038: PUSH
18039: LD_EXP 1
18043: EQUAL
18044: IFFALSE 18104
// begin DialogueOn ;
18046: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18050: LD_EXP 1
18054: PPUSH
18055: LD_STRING D2c-JMM-1
18057: PPUSH
18058: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18062: LD_EXP 20
18066: PPUSH
18067: LD_STRING D2c-Kurt-1
18069: PPUSH
18070: CALL_OW 88
// DialogueOff ;
18074: CALL_OW 7
// InGameOff ;
18078: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18082: LD_EXP 20
18086: PPUSH
18087: LD_INT 8
18089: PPUSH
18090: CALL_OW 113
// readyToEscape := 1 ;
18094: LD_ADDR_EXP 22
18098: PUSH
18099: LD_INT 1
18101: ST_TO_ADDR
// end else
18102: GO 18189
// begin DialogueOn ;
18104: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18108: LD_VAR 0 4
18112: PPUSH
18113: CALL_OW 258
18117: PUSH
18118: LD_INT 1
18120: EQUAL
18121: IFFALSE 18137
// Say ( tmp , D2c-Sol1-1 ) else
18123: LD_VAR 0 4
18127: PPUSH
18128: LD_STRING D2c-Sol1-1
18130: PPUSH
18131: CALL_OW 88
18135: GO 18149
// Say ( tmp , D2c-FSol1-1 ) ;
18137: LD_VAR 0 4
18141: PPUSH
18142: LD_STRING D2c-FSol1-1
18144: PPUSH
18145: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18149: LD_EXP 20
18153: PPUSH
18154: LD_STRING D2c-Kurt-1
18156: PPUSH
18157: CALL_OW 88
// DialogueOff ;
18161: CALL_OW 7
// InGameOff ;
18165: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18169: LD_EXP 20
18173: PPUSH
18174: LD_INT 8
18176: PPUSH
18177: CALL_OW 113
// readyToEscape := 1 ;
18181: LD_ADDR_EXP 22
18185: PUSH
18186: LD_INT 1
18188: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18189: LD_ADDR_EXP 30
18193: PUSH
18194: LD_INT 0
18196: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18197: LD_INT 35
18199: PPUSH
18200: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18204: LD_EXP 20
18208: PPUSH
18209: LD_INT 8
18211: PPUSH
18212: CALL_OW 308
18216: PUSH
18217: LD_EXP 22
18221: AND
18222: PUSH
18223: LD_EXP 20
18227: PPUSH
18228: CALL_OW 301
18232: OR
18233: IFFALSE 18197
// if IsDead ( Kurt ) then
18235: LD_EXP 20
18239: PPUSH
18240: CALL_OW 301
18244: IFFALSE 18248
// exit ;
18246: GO 18303
// RemoveUnit ( Kurt ) ;
18248: LD_EXP 20
18252: PPUSH
18253: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18257: LD_EXP 20
18261: PPUSH
18262: LD_STRING Kurt
18264: PPUSH
18265: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18269: LD_INT 1
18271: PPUSH
18272: LD_INT 2
18274: PPUSH
18275: CALL_OW 81
18279: PUSH
18280: LD_INT 0
18282: EQUAL
18283: IFFALSE 18295
// kurtStatus = 1 else
18285: LD_ADDR_EXP 21
18289: PUSH
18290: LD_INT 1
18292: ST_TO_ADDR
18293: GO 18303
// kurtStatus = 2 ;
18295: LD_ADDR_EXP 21
18299: PUSH
18300: LD_INT 2
18302: ST_TO_ADDR
// end ; end_of_file
18303: LD_VAR 0 1
18307: RET
// every 0 0$2 do
18308: GO 18310
18310: DISABLE
// begin enable ;
18311: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18312: LD_INT 3
18314: PPUSH
18315: LD_INT 2
18317: PPUSH
18318: LD_INT 10
18320: PPUSH
18321: LD_EXP 32
18325: PPUSH
18326: CALL 8229 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18330: LD_INT 3
18332: PPUSH
18333: LD_INT 12
18335: PPUSH
18336: LD_EXP 32
18340: PPUSH
18341: CALL 9832 0 3
// if disableHealAI = 0 then
18345: LD_EXP 34
18349: PUSH
18350: LD_INT 0
18352: EQUAL
18353: IFFALSE 18374
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18355: LD_INT 3
18357: PPUSH
18358: LD_INT 9
18360: PPUSH
18361: LD_INT 10
18363: PPUSH
18364: LD_INT 32
18366: PUSH
18367: EMPTY
18368: LIST
18369: PPUSH
18370: CALL 8596 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18374: LD_INT 3
18376: PPUSH
18377: LD_INT 51
18379: PPUSH
18380: LD_INT 6
18382: PPUSH
18383: CALL 9285 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18387: LD_INT 2
18389: PPUSH
18390: CALL_OW 303
18394: PUSH
18395: LD_INT 2
18397: PPUSH
18398: CALL_OW 255
18402: PUSH
18403: LD_INT 1
18405: EQUAL
18406: OR
18407: IFFALSE 18421
// DefendDepot ( 3 , rudepo ) else
18409: LD_INT 3
18411: PPUSH
18412: LD_INT 2
18414: PPUSH
18415: CALL 9112 0 2
18419: GO 18431
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18421: LD_INT 3
18423: PPUSH
18424: LD_INT 10
18426: PPUSH
18427: CALL 9403 0 2
// end ;
18431: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18432: LD_INT 22
18434: PUSH
18435: LD_INT 3
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 21
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 55
18454: PUSH
18455: EMPTY
18456: LIST
18457: PUSH
18458: LD_INT 3
18460: PUSH
18461: LD_INT 34
18463: PUSH
18464: LD_INT 51
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: PPUSH
18481: CALL_OW 69
18485: PUSH
18486: LD_INT 0
18488: EQUAL
18489: PUSH
18490: LD_INT 21
18492: PPUSH
18493: CALL_OW 255
18497: PUSH
18498: LD_INT 3
18500: EQUAL
18501: AND
18502: PUSH
18503: LD_INT 21
18505: PPUSH
18506: CALL_OW 302
18510: AND
18511: PUSH
18512: LD_INT 2
18514: PPUSH
18515: CALL_OW 255
18519: PUSH
18520: LD_INT 3
18522: EQUAL
18523: AND
18524: PUSH
18525: LD_INT 2
18527: PPUSH
18528: CALL_OW 302
18532: AND
18533: PUSH
18534: LD_INT 21
18536: PPUSH
18537: CALL_OW 313
18541: AND
18542: PUSH
18543: LD_EXP 48
18547: PUSH
18548: LD_INT 4
18550: PUSH
18551: LD_INT 5
18553: PUSH
18554: LD_INT 6
18556: PUSH
18557: LD_INT 6
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: PUSH
18566: LD_OWVAR 67
18570: ARRAY
18571: LESS
18572: AND
18573: IFFALSE 18794
18575: GO 18577
18577: DISABLE
// begin enable ;
18578: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18579: LD_INT 2
18581: PPUSH
18582: CALL_OW 274
18586: PPUSH
18587: LD_INT 1
18589: PPUSH
18590: LD_INT 2000
18592: PPUSH
18593: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18597: LD_INT 3
18599: PPUSH
18600: LD_INT 21
18602: PPUSH
18603: LD_INT 4
18605: PUSH
18606: LD_INT 5
18608: PUSH
18609: LD_INT 6
18611: PUSH
18612: LD_INT 6
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: PUSH
18621: LD_OWVAR 67
18625: ARRAY
18626: PUSH
18627: LD_EXP 48
18631: MINUS
18632: PPUSH
18633: LD_INT 43
18635: PUSH
18636: LD_INT 43
18638: PUSH
18639: LD_INT 44
18641: PUSH
18642: LD_INT 44
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 43
18653: PUSH
18654: LD_INT 43
18656: PUSH
18657: LD_INT 43
18659: PUSH
18660: LD_INT 44
18662: PUSH
18663: LD_INT 44
18665: PUSH
18666: LD_INT 46
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 43
18679: PUSH
18680: LD_INT 43
18682: PUSH
18683: LD_INT 43
18685: PUSH
18686: LD_INT 44
18688: PUSH
18689: LD_INT 44
18691: PUSH
18692: LD_INT 46
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 43
18705: PUSH
18706: LD_INT 43
18708: PUSH
18709: LD_INT 44
18711: PUSH
18712: LD_INT 46
18714: PUSH
18715: LD_INT 46
18717: PUSH
18718: LD_INT 46
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: PUSH
18735: LD_OWVAR 67
18739: ARRAY
18740: PPUSH
18741: LD_INT 1
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: LD_INT 22
18749: PUSH
18750: LD_INT 22
18752: PUSH
18753: LD_INT 24
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 1
18762: PPUSH
18763: LD_INT 2
18765: PPUSH
18766: CALL_OW 12
18770: ARRAY
18771: PUSH
18772: LD_INT 24
18774: PUSH
18775: LD_INT 24
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: PUSH
18784: LD_OWVAR 67
18788: ARRAY
18789: PPUSH
18790: CALL 8075 0 7
// end ;
18794: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18795: LD_INT 17
18797: PPUSH
18798: CALL_OW 255
18802: PUSH
18803: LD_INT 3
18805: EQUAL
18806: PUSH
18807: LD_INT 17
18809: PPUSH
18810: CALL_OW 302
18814: AND
18815: PUSH
18816: LD_INT 2
18818: PPUSH
18819: CALL_OW 255
18823: PUSH
18824: LD_INT 3
18826: EQUAL
18827: AND
18828: PUSH
18829: LD_INT 2
18831: PPUSH
18832: CALL_OW 302
18836: AND
18837: PUSH
18838: LD_EXP 48
18842: PUSH
18843: LD_INT 4
18845: PUSH
18846: LD_INT 5
18848: PUSH
18849: LD_INT 6
18851: PUSH
18852: LD_INT 7
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: PUSH
18861: LD_OWVAR 67
18865: ARRAY
18866: LESS
18867: AND
18868: IFFALSE 18916
18870: GO 18872
18872: DISABLE
// begin enable ;
18873: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18874: LD_INT 17
18876: PPUSH
18877: LD_INT 22
18879: PPUSH
18880: LD_INT 1
18882: PPUSH
18883: LD_INT 1
18885: PPUSH
18886: LD_INT 42
18888: PUSH
18889: LD_INT 43
18891: PUSH
18892: LD_INT 44
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 1
18902: PPUSH
18903: LD_INT 3
18905: PPUSH
18906: CALL_OW 12
18910: ARRAY
18911: PPUSH
18912: CALL_OW 185
// end ;
18916: END
// every 2 2$0 do var i , j ;
18917: GO 18919
18919: DISABLE
18920: LD_INT 0
18922: PPUSH
18923: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18924: LD_INT 14700
18926: PUSH
18927: LD_INT 33600
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 1
18936: PPUSH
18937: LD_INT 2
18939: PPUSH
18940: CALL_OW 12
18944: ARRAY
18945: PPUSH
18946: CALL_OW 67
// disableHealAI = 1 ;
18950: LD_ADDR_EXP 34
18954: PUSH
18955: LD_INT 1
18957: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18958: LD_ADDR_VAR 0 1
18962: PUSH
18963: LD_INT 22
18965: PUSH
18966: LD_INT 3
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 25
18975: PUSH
18976: LD_INT 4
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PPUSH
18987: CALL_OW 69
18991: PUSH
18992: FOR_IN
18993: IFFALSE 19006
// ComExitBuilding ( i ) ;
18995: LD_VAR 0 1
18999: PPUSH
19000: CALL_OW 122
19004: GO 18992
19006: POP
19007: POP
// wait ( 0 0$1 ) ;
19008: LD_INT 35
19010: PPUSH
19011: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19015: LD_INT 35
19017: PPUSH
19018: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19022: LD_ADDR_VAR 0 1
19026: PUSH
19027: LD_INT 22
19029: PUSH
19030: LD_INT 3
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 25
19039: PUSH
19040: LD_INT 4
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PPUSH
19051: CALL_OW 69
19055: PUSH
19056: FOR_IN
19057: IFFALSE 19134
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19059: LD_ADDR_VAR 0 2
19063: PUSH
19064: LD_INT 17
19066: PPUSH
19067: LD_INT 22
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 25
19079: PUSH
19080: LD_INT 12
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PPUSH
19091: CALL_OW 70
19095: PUSH
19096: FOR_IN
19097: IFFALSE 19130
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19099: LD_VAR 0 1
19103: PPUSH
19104: LD_VAR 0 2
19108: PPUSH
19109: CALL_OW 250
19113: PPUSH
19114: LD_VAR 0 2
19118: PPUSH
19119: CALL_OW 251
19123: PPUSH
19124: CALL_OW 191
19128: GO 19096
19130: POP
19131: POP
19132: GO 19056
19134: POP
19135: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19136: LD_INT 22
19138: PUSH
19139: LD_INT 3
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 25
19148: PUSH
19149: LD_INT 4
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PPUSH
19160: CALL_OW 69
19164: PUSH
19165: LD_INT 0
19167: EQUAL
19168: PUSH
19169: LD_EXP 33
19173: PUSH
19174: LD_INT 6
19176: PUSH
19177: LD_INT 7
19179: PUSH
19180: LD_INT 8
19182: PUSH
19183: LD_INT 8
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: PUSH
19192: LD_OWVAR 67
19196: ARRAY
19197: GREATEREQUAL
19198: OR
19199: PUSH
19200: LD_INT 17
19202: PPUSH
19203: LD_INT 22
19205: PUSH
19206: LD_INT 0
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 25
19215: PUSH
19216: LD_INT 12
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PPUSH
19227: CALL_OW 70
19231: PUSH
19232: LD_INT 0
19234: EQUAL
19235: OR
19236: IFFALSE 19015
// disableHealAI = 0 ;
19238: LD_ADDR_EXP 34
19242: PUSH
19243: LD_INT 0
19245: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19246: LD_ADDR_VAR 0 1
19250: PUSH
19251: LD_INT 22
19253: PUSH
19254: LD_INT 3
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 25
19263: PUSH
19264: LD_INT 12
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PPUSH
19275: CALL_OW 69
19279: PUSH
19280: FOR_IN
19281: IFFALSE 19297
// SetClass ( i , 16 ) ;
19283: LD_VAR 0 1
19287: PPUSH
19288: LD_INT 16
19290: PPUSH
19291: CALL_OW 336
19295: GO 19280
19297: POP
19298: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19299: LD_ADDR_VAR 0 1
19303: PUSH
19304: LD_INT 22
19306: PUSH
19307: LD_INT 3
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 25
19316: PUSH
19317: LD_INT 4
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PPUSH
19328: CALL_OW 69
19332: PUSH
19333: FOR_IN
19334: IFFALSE 19350
// ComEnterUnit ( i , rulab ) ;
19336: LD_VAR 0 1
19340: PPUSH
19341: LD_INT 32
19343: PPUSH
19344: CALL_OW 120
19348: GO 19333
19350: POP
19351: POP
// end ; end_of_file
19352: PPOPN 2
19354: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19355: LD_EXP 27
19359: PUSH
19360: LD_INT 0
19362: LESSEQUAL
19363: IFFALSE 19517
19365: GO 19367
19367: DISABLE
19368: LD_INT 0
19370: PPUSH
19371: PPUSH
19372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19373: LD_ADDR_VAR 0 2
19377: PUSH
19378: LD_INT 22
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 21
19390: PUSH
19391: LD_INT 3
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: LD_INT 30
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 30
19413: PUSH
19414: LD_INT 1
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: LIST
19430: PPUSH
19431: CALL_OW 69
19435: ST_TO_ADDR
// for i in tmp do
19436: LD_ADDR_VAR 0 1
19440: PUSH
19441: LD_VAR 0 2
19445: PUSH
19446: FOR_IN
19447: IFFALSE 19480
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19449: LD_ADDR_VAR 0 3
19453: PUSH
19454: LD_VAR 0 3
19458: PUSH
19459: LD_VAR 0 1
19463: PPUSH
19464: CALL_OW 274
19468: PPUSH
19469: LD_INT 1
19471: PPUSH
19472: CALL_OW 275
19476: PLUS
19477: ST_TO_ADDR
19478: GO 19446
19480: POP
19481: POP
// if yourCrates >= needCrates then
19482: LD_VAR 0 3
19486: PUSH
19487: LD_EXP 26
19491: GREATEREQUAL
19492: IFFALSE 19510
// FinishMission ( yourCrates , needCrates ) else
19494: LD_VAR 0 3
19498: PPUSH
19499: LD_EXP 26
19503: PPUSH
19504: CALL 19520 0 2
19508: GO 19517
// YouLost ( matmin ) ;
19510: LD_STRING matmin
19512: PPUSH
19513: CALL_OW 104
// end ;
19517: PPOPN 3
19519: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19520: LD_INT 0
19522: PPUSH
19523: PPUSH
19524: PPUSH
19525: PPUSH
// if killCounter = 0 then
19526: LD_EXP 46
19530: PUSH
19531: LD_INT 0
19533: EQUAL
19534: IFFALSE 19543
// SetAchievement ( ACH_SURV ) ;
19536: LD_STRING ACH_SURV
19538: PPUSH
19539: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
19543: LD_INT 22
19545: PUSH
19546: LD_INT 3
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 21
19555: PUSH
19556: LD_INT 3
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PPUSH
19567: CALL_OW 69
19571: PUSH
19572: LD_INT 0
19574: EQUAL
19575: IFFALSE 19591
// begin wait ( 3 ) ;
19577: LD_INT 3
19579: PPUSH
19580: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19584: LD_STRING ACH_BASEDESTROYER
19586: PPUSH
19587: CALL_OW 543
// end ; m1 := false ;
19591: LD_ADDR_VAR 0 4
19595: PUSH
19596: LD_INT 0
19598: ST_TO_ADDR
// m2 := false ;
19599: LD_ADDR_VAR 0 5
19603: PUSH
19604: LD_INT 0
19606: ST_TO_ADDR
// m3 := false ;
19607: LD_ADDR_VAR 0 6
19611: PUSH
19612: LD_INT 0
19614: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19615: LD_VAR 0 1
19619: PUSH
19620: LD_INT 100
19622: PUSH
19623: LD_INT 140
19625: PUSH
19626: LD_INT 180
19628: PUSH
19629: LD_INT 220
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: PUSH
19638: LD_OWVAR 67
19642: ARRAY
19643: PLUS
19644: PUSH
19645: LD_VAR 0 2
19649: GREATER
19650: IFFALSE 19682
// begin AddMedal ( cans , 1 ) ;
19652: LD_STRING cans
19654: PPUSH
19655: LD_INT 1
19657: PPUSH
19658: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19662: LD_INT 1
19664: PPUSH
19665: LD_STRING 06_crates_1
19667: PPUSH
19668: CALL_OW 39
// m1 := true ;
19672: LD_ADDR_VAR 0 4
19676: PUSH
19677: LD_INT 1
19679: ST_TO_ADDR
// end else
19680: GO 19703
// begin AddMedal ( cans , - 1 ) ;
19682: LD_STRING cans
19684: PPUSH
19685: LD_INT 1
19687: NEG
19688: PPUSH
19689: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19693: LD_INT 0
19695: PPUSH
19696: LD_STRING 06_crates_1
19698: PPUSH
19699: CALL_OW 39
// end ; if unitLost < 3 then
19703: LD_EXP 31
19707: PUSH
19708: LD_INT 3
19710: LESS
19711: IFFALSE 19733
// begin AddMedal ( people , 1 ) ;
19713: LD_STRING people
19715: PPUSH
19716: LD_INT 1
19718: PPUSH
19719: CALL_OW 101
// m2 := true ;
19723: LD_ADDR_VAR 0 5
19727: PUSH
19728: LD_INT 1
19730: ST_TO_ADDR
// end else
19731: GO 19744
// AddMedal ( people , - 1 ) ;
19733: LD_STRING people
19735: PPUSH
19736: LD_INT 1
19738: NEG
19739: PPUSH
19740: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19744: LD_EXP 29
19748: PPUSH
19749: LD_STRING 06_remoteVehs_1
19751: PPUSH
19752: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19756: LD_EXP 29
19760: PUSH
19761: LD_INT 1
19763: EQUAL
19764: IFFALSE 19786
// begin AddMedal ( remote , 1 ) ;
19766: LD_STRING remote
19768: PPUSH
19769: LD_INT 1
19771: PPUSH
19772: CALL_OW 101
// m3 := true ;
19776: LD_ADDR_VAR 0 6
19780: PUSH
19781: LD_INT 1
19783: ST_TO_ADDR
// end else
19784: GO 19826
// begin if GetTech ( 18 , 1 ) = state_enabled then
19786: LD_INT 18
19788: PPUSH
19789: LD_INT 1
19791: PPUSH
19792: CALL_OW 321
19796: PUSH
19797: LD_INT 1
19799: EQUAL
19800: IFFALSE 19815
// AddMedal ( remote , - 1 ) else
19802: LD_STRING remote
19804: PPUSH
19805: LD_INT 1
19807: NEG
19808: PPUSH
19809: CALL_OW 101
19813: GO 19826
// AddMedal ( remote , - 2 ) ;
19815: LD_STRING remote
19817: PPUSH
19818: LD_INT 2
19820: NEG
19821: PPUSH
19822: CALL_OW 101
// end ; if m1 and m2 and m3 then
19826: LD_VAR 0 4
19830: PUSH
19831: LD_VAR 0 5
19835: AND
19836: PUSH
19837: LD_VAR 0 6
19841: AND
19842: IFFALSE 19858
// begin wait ( 3 ) ;
19844: LD_INT 3
19846: PPUSH
19847: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19851: LD_STRING ACH_ASPEED_6
19853: PPUSH
19854: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19858: LD_OWVAR 67
19862: PUSH
19863: LD_INT 3
19865: GREATEREQUAL
19866: PUSH
19867: LD_VAR 0 4
19871: AND
19872: PUSH
19873: LD_VAR 0 5
19877: AND
19878: PUSH
19879: LD_VAR 0 6
19883: AND
19884: IFFALSE 19896
// SetAchievementEX ( ACH_AMER , 6 ) ;
19886: LD_STRING ACH_AMER
19888: PPUSH
19889: LD_INT 6
19891: PPUSH
19892: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19896: LD_EXP 21
19900: PPUSH
19901: LD_STRING 06_KurtStatus_1
19903: PPUSH
19904: CALL_OW 39
// GiveMedals ( Main ) ;
19908: LD_STRING Main
19910: PPUSH
19911: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19915: LD_INT 22
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 21
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 50
19937: PUSH
19938: EMPTY
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 25
19946: PUSH
19947: LD_INT 1
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 25
19956: PUSH
19957: LD_INT 2
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 25
19966: PUSH
19967: LD_INT 3
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 25
19976: PUSH
19977: LD_INT 4
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: PPUSH
19997: CALL_OW 69
20001: PPUSH
20002: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20006: LD_EXP 1
20010: PPUSH
20011: LD_EXP 43
20015: PUSH
20016: LD_STRING JMM
20018: STR
20019: PPUSH
20020: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20024: LD_EXP 2
20028: PPUSH
20029: LD_EXP 43
20033: PUSH
20034: LD_STRING Lisa
20036: STR
20037: PPUSH
20038: CALL 7390 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20042: LD_EXP 3
20046: PPUSH
20047: LD_EXP 43
20051: PUSH
20052: LD_STRING Bobby
20054: STR
20055: PPUSH
20056: CALL 7390 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20060: LD_EXP 4
20064: PPUSH
20065: LD_EXP 43
20069: PUSH
20070: LD_STRING Cyrus
20072: STR
20073: PPUSH
20074: CALL 7390 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20078: LD_EXP 5
20082: PPUSH
20083: LD_EXP 43
20087: PUSH
20088: LD_STRING Frank
20090: STR
20091: PPUSH
20092: CALL 7390 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20096: LD_EXP 6
20100: PPUSH
20101: LD_EXP 43
20105: PUSH
20106: LD_STRING Brown
20108: STR
20109: PPUSH
20110: CALL 7390 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20114: LD_EXP 7
20118: PPUSH
20119: LD_EXP 43
20123: PUSH
20124: LD_STRING Donaldson
20126: STR
20127: PPUSH
20128: CALL 7390 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20132: LD_EXP 8
20136: PPUSH
20137: LD_EXP 43
20141: PUSH
20142: LD_STRING Gladstone
20144: STR
20145: PPUSH
20146: CALL 7390 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20150: LD_EXP 9
20154: PPUSH
20155: LD_EXP 43
20159: PUSH
20160: LD_STRING Denis
20162: STR
20163: PPUSH
20164: CALL 7390 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20168: LD_EXP 16
20172: PPUSH
20173: LD_EXP 43
20177: PUSH
20178: LD_STRING Joan
20180: STR
20181: PPUSH
20182: CALL 7390 0 2
// if IsLive ( Mike ) then
20186: LD_EXP 11
20190: PPUSH
20191: CALL_OW 300
20195: IFFALSE 20215
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20197: LD_EXP 11
20201: PPUSH
20202: LD_EXP 43
20206: PUSH
20207: LD_STRING Mike
20209: STR
20210: PPUSH
20211: CALL_OW 38
// if IsLive ( Joan ) then
20215: LD_EXP 16
20219: PPUSH
20220: CALL_OW 300
20224: IFFALSE 20238
// SaveCharacters ( Joan , Joan ) ;
20226: LD_EXP 16
20230: PPUSH
20231: LD_STRING Joan
20233: PPUSH
20234: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20238: LD_EXP 17
20242: PPUSH
20243: LD_STRING 06_JoanStatus_1
20245: PPUSH
20246: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20250: LD_INT 50
20252: PUSH
20253: EMPTY
20254: LIST
20255: PUSH
20256: LD_INT 22
20258: PUSH
20259: LD_INT 1
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 21
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: LD_INT 25
20281: PUSH
20282: LD_INT 1
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 25
20291: PUSH
20292: LD_INT 2
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 25
20301: PUSH
20302: LD_INT 3
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 25
20311: PUSH
20312: LD_INT 4
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: PPUSH
20332: CALL_OW 69
20336: PUSH
20337: LD_EXP 1
20341: PUSH
20342: LD_EXP 2
20346: PUSH
20347: LD_EXP 3
20351: PUSH
20352: LD_EXP 4
20356: PUSH
20357: LD_EXP 5
20361: PUSH
20362: LD_EXP 6
20366: PUSH
20367: LD_EXP 7
20371: PUSH
20372: LD_EXP 8
20376: PUSH
20377: LD_EXP 9
20381: PUSH
20382: LD_EXP 16
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: DIFF
20399: PPUSH
20400: LD_STRING 06_other_survivors
20402: PPUSH
20403: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20407: LD_INT 50
20409: PUSH
20410: EMPTY
20411: LIST
20412: PUSH
20413: LD_INT 22
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 21
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 25
20438: PUSH
20439: LD_INT 12
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 25
20448: PUSH
20449: LD_INT 16
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: PPUSH
20467: CALL_OW 69
20471: PPUSH
20472: LD_STRING 06_other_apemans
20474: PPUSH
20475: CALL_OW 38
// YouWin ;
20479: CALL_OW 103
// end ; end_of_file
20483: LD_VAR 0 3
20487: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
20488: LD_EXP 48
20492: PUSH
20493: LD_OWVAR 1
20497: PUSH
20498: LD_INT 23100
20500: PUSH
20501: LD_INT 21000
20503: PUSH
20504: LD_INT 18900
20506: PUSH
20507: LD_INT 16800
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: PUSH
20516: LD_OWVAR 67
20520: ARRAY
20521: GREATER
20522: AND
20523: IFFALSE 20870
20525: GO 20527
20527: DISABLE
20528: LD_INT 0
20530: PPUSH
20531: PPUSH
20532: PPUSH
20533: PPUSH
// begin enable ;
20534: ENABLE
// for i in ruAttackers do
20535: LD_ADDR_VAR 0 1
20539: PUSH
20540: LD_EXP 48
20544: PUSH
20545: FOR_IN
20546: IFFALSE 20868
// begin if not IsDrivenBy ( i ) then
20548: LD_VAR 0 1
20552: PPUSH
20553: CALL_OW 311
20557: NOT
20558: IFFALSE 20562
// continue ;
20560: GO 20545
// if i mod 2 = 0 then
20562: LD_VAR 0 1
20566: PUSH
20567: LD_INT 2
20569: MOD
20570: PUSH
20571: LD_INT 0
20573: EQUAL
20574: IFFALSE 20629
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
20576: LD_ADDR_VAR 0 3
20580: PUSH
20581: LD_INT 91
20583: PUSH
20584: LD_INT 52
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 82
20593: PUSH
20594: LD_INT 34
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 90
20603: PUSH
20604: LD_INT 26
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 86
20613: PUSH
20614: LD_INT 16
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: ST_TO_ADDR
20627: GO 20724
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20629: LD_ADDR_VAR 0 3
20633: PUSH
20634: LD_INT 91
20636: PUSH
20637: LD_INT 52
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 68
20646: PUSH
20647: LD_INT 46
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 48
20656: PUSH
20657: LD_INT 43
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 44
20666: PUSH
20667: LD_INT 42
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 33
20676: PUSH
20677: LD_INT 34
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 29
20686: PUSH
20687: LD_INT 23
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 30
20696: PUSH
20697: LD_INT 19
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 38
20706: PUSH
20707: LD_INT 16
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20724: LD_VAR 0 1
20728: PPUSH
20729: CALL_OW 256
20733: PUSH
20734: LD_INT 1000
20736: EQUAL
20737: IFFALSE 20755
// AgressiveMove ( i , path ) else
20739: LD_VAR 0 1
20743: PPUSH
20744: LD_VAR 0 3
20748: PPUSH
20749: CALL 82474 0 2
20753: GO 20866
// if GetLives ( i ) < 650 then
20755: LD_VAR 0 1
20759: PPUSH
20760: CALL_OW 256
20764: PUSH
20765: LD_INT 650
20767: LESS
20768: IFFALSE 20866
// begin if not IsInArea ( i , russianRepairArea ) then
20770: LD_VAR 0 1
20774: PPUSH
20775: LD_INT 12
20777: PPUSH
20778: CALL_OW 308
20782: NOT
20783: IFFALSE 20852
// begin SetTag ( i , 0 ) ;
20785: LD_VAR 0 1
20789: PPUSH
20790: LD_INT 0
20792: PPUSH
20793: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20797: LD_VAR 0 1
20801: PPUSH
20802: CALL_OW 261
20806: PUSH
20807: LD_INT 50
20809: LESS
20810: PUSH
20811: LD_INT 21
20813: PPUSH
20814: CALL_OW 302
20818: AND
20819: IFFALSE 20835
// ComMoveUnit ( i , rufab ) else
20821: LD_VAR 0 1
20825: PPUSH
20826: LD_INT 21
20828: PPUSH
20829: CALL_OW 112
20833: GO 20850
// ComMoveXY ( i , 121 , 99 ) ;
20835: LD_VAR 0 1
20839: PPUSH
20840: LD_INT 121
20842: PPUSH
20843: LD_INT 99
20845: PPUSH
20846: CALL_OW 111
// end else
20850: GO 20866
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20852: LD_VAR 0 1
20856: PPUSH
20857: CALL_OW 311
20861: PPUSH
20862: CALL 81570 0 1
// end ; end ;
20866: GO 20545
20868: POP
20869: POP
// end ;
20870: PPOPN 4
20872: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20873: LD_INT 0
20875: PPUSH
20876: PPUSH
20877: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20878: LD_ADDR_VAR 0 2
20882: PUSH
20883: DOUBLE
20884: LD_INT 1
20886: DEC
20887: ST_TO_ADDR
20888: LD_INT 4
20890: PUSH
20891: LD_INT 5
20893: PUSH
20894: LD_INT 6
20896: PUSH
20897: LD_INT 6
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: PUSH
20906: LD_OWVAR 67
20910: ARRAY
20911: PUSH
20912: FOR_TO
20913: IFFALSE 21088
// begin uc_side := 3 ;
20915: LD_ADDR_OWVAR 20
20919: PUSH
20920: LD_INT 3
20922: ST_TO_ADDR
// uc_nation := 3 ;
20923: LD_ADDR_OWVAR 21
20927: PUSH
20928: LD_INT 3
20930: ST_TO_ADDR
// InitHC_All ( ) ;
20931: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20935: LD_INT 0
20937: PPUSH
20938: LD_INT 4
20940: PUSH
20941: LD_INT 5
20943: PUSH
20944: LD_INT 6
20946: PUSH
20947: LD_INT 6
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: PUSH
20956: LD_OWVAR 67
20960: ARRAY
20961: PPUSH
20962: CALL_OW 381
// un := CreateHuman ;
20966: LD_ADDR_VAR 0 3
20970: PUSH
20971: CALL_OW 44
20975: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20976: LD_VAR 0 3
20980: PPUSH
20981: LD_INT 127
20983: PPUSH
20984: LD_INT 62
20986: PPUSH
20987: LD_INT 3
20989: PPUSH
20990: LD_INT 0
20992: PPUSH
20993: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20997: LD_ADDR_EXP 49
21001: PUSH
21002: LD_EXP 49
21006: PPUSH
21007: LD_EXP 49
21011: PUSH
21012: LD_INT 1
21014: PLUS
21015: PPUSH
21016: LD_VAR 0 3
21020: PPUSH
21021: CALL_OW 1
21025: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
21026: LD_VAR 0 3
21030: PPUSH
21031: LD_INT 83
21033: PPUSH
21034: LD_INT 49
21036: PPUSH
21037: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
21041: LD_VAR 0 3
21045: PPUSH
21046: LD_INT 49
21048: PPUSH
21049: LD_INT 43
21051: PPUSH
21052: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
21056: LD_VAR 0 3
21060: PPUSH
21061: LD_INT 31
21063: PPUSH
21064: LD_INT 15
21066: PPUSH
21067: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
21071: LD_VAR 0 3
21075: PPUSH
21076: LD_INT 63
21078: PPUSH
21079: LD_INT 9
21081: PPUSH
21082: CALL_OW 174
// end ;
21086: GO 20912
21088: POP
21089: POP
// end ; end_of_file
21090: LD_VAR 0 1
21094: RET
// export function CreateNature ; var i , un ; begin
21095: LD_INT 0
21097: PPUSH
21098: PPUSH
21099: PPUSH
// for i := 1 to Difficulty + 2 do
21100: LD_ADDR_VAR 0 2
21104: PUSH
21105: DOUBLE
21106: LD_INT 1
21108: DEC
21109: ST_TO_ADDR
21110: LD_OWVAR 67
21114: PUSH
21115: LD_INT 2
21117: PLUS
21118: PUSH
21119: FOR_TO
21120: IFFALSE 21229
// begin hc_sex := sex_male ;
21122: LD_ADDR_OWVAR 27
21126: PUSH
21127: LD_INT 1
21129: ST_TO_ADDR
// uc_side := 0 ;
21130: LD_ADDR_OWVAR 20
21134: PUSH
21135: LD_INT 0
21137: ST_TO_ADDR
// uc_nation := nation_nature ;
21138: LD_ADDR_OWVAR 21
21142: PUSH
21143: LD_INT 0
21145: ST_TO_ADDR
// hc_class := class_tiger ;
21146: LD_ADDR_OWVAR 28
21150: PUSH
21151: LD_INT 14
21153: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21154: LD_ADDR_OWVAR 31
21158: PUSH
21159: LD_EXP 36
21163: PUSH
21164: LD_INT 0
21166: PUSH
21167: LD_INT 0
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21179: LD_ADDR_OWVAR 35
21183: PUSH
21184: LD_INT 5
21186: NEG
21187: PPUSH
21188: LD_INT 5
21190: PPUSH
21191: CALL_OW 12
21195: PUSH
21196: LD_OWVAR 67
21200: MUL
21201: ST_TO_ADDR
// un := CreateHuman ;
21202: LD_ADDR_VAR 0 3
21206: PUSH
21207: CALL_OW 44
21211: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21212: LD_VAR 0 3
21216: PPUSH
21217: LD_INT 18
21219: PPUSH
21220: LD_INT 0
21222: PPUSH
21223: CALL_OW 49
// end ;
21227: GO 21119
21229: POP
21230: POP
// for i = 1 to rand ( 3 , 4 ) do
21231: LD_ADDR_VAR 0 2
21235: PUSH
21236: DOUBLE
21237: LD_INT 1
21239: DEC
21240: ST_TO_ADDR
21241: LD_INT 3
21243: PPUSH
21244: LD_INT 4
21246: PPUSH
21247: CALL_OW 12
21251: PUSH
21252: FOR_TO
21253: IFFALSE 21323
// begin hc_class := class_phororhacos ;
21255: LD_ADDR_OWVAR 28
21259: PUSH
21260: LD_INT 18
21262: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21263: LD_ADDR_OWVAR 31
21267: PUSH
21268: LD_EXP 36
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: LD_INT 0
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: ST_TO_ADDR
// hc_agressivity := 0 ;
21288: LD_ADDR_OWVAR 35
21292: PUSH
21293: LD_INT 0
21295: ST_TO_ADDR
// un = CreateHuman ;
21296: LD_ADDR_VAR 0 3
21300: PUSH
21301: CALL_OW 44
21305: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21306: LD_VAR 0 3
21310: PPUSH
21311: LD_INT 18
21313: PPUSH
21314: LD_INT 0
21316: PPUSH
21317: CALL_OW 49
// end ;
21321: GO 21252
21323: POP
21324: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21325: LD_ADDR_VAR 0 2
21329: PUSH
21330: DOUBLE
21331: LD_INT 1
21333: DEC
21334: ST_TO_ADDR
21335: LD_INT 3
21337: PUSH
21338: LD_INT 3
21340: PUSH
21341: LD_INT 4
21343: PUSH
21344: LD_INT 5
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: PUSH
21353: LD_OWVAR 67
21357: ARRAY
21358: PUSH
21359: FOR_TO
21360: IFFALSE 21501
// begin hc_class := class_apeman ;
21362: LD_ADDR_OWVAR 28
21366: PUSH
21367: LD_INT 12
21369: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21370: LD_ADDR_OWVAR 31
21374: PUSH
21375: LD_INT 2
21377: PPUSH
21378: LD_INT 5
21380: PPUSH
21381: CALL_OW 12
21385: PUSH
21386: LD_INT 0
21388: PPUSH
21389: LD_INT 2
21391: PPUSH
21392: CALL_OW 12
21396: PUSH
21397: LD_INT 0
21399: PUSH
21400: LD_INT 0
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21409: LD_ADDR_OWVAR 35
21413: PUSH
21414: LD_INT 5
21416: NEG
21417: PPUSH
21418: LD_INT 10
21420: PPUSH
21421: CALL_OW 12
21425: PUSH
21426: LD_INT 10
21428: NEG
21429: PPUSH
21430: LD_INT 20
21432: PPUSH
21433: CALL_OW 12
21437: PUSH
21438: LD_INT 20
21440: NEG
21441: PPUSH
21442: LD_INT 25
21444: PPUSH
21445: CALL_OW 12
21449: PUSH
21450: LD_INT 30
21452: NEG
21453: PPUSH
21454: LD_INT 30
21456: PPUSH
21457: CALL_OW 12
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: PUSH
21468: LD_OWVAR 67
21472: ARRAY
21473: ST_TO_ADDR
// un := CreateHuman ;
21474: LD_ADDR_VAR 0 3
21478: PUSH
21479: CALL_OW 44
21483: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21484: LD_VAR 0 3
21488: PPUSH
21489: LD_INT 19
21491: PPUSH
21492: LD_INT 0
21494: PPUSH
21495: CALL_OW 49
// end ;
21499: GO 21359
21501: POP
21502: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
21503: LD_ADDR_VAR 0 2
21507: PUSH
21508: DOUBLE
21509: LD_INT 1
21511: DEC
21512: ST_TO_ADDR
21513: LD_INT 3
21515: PUSH
21516: LD_INT 4
21518: PUSH
21519: LD_INT 5
21521: PUSH
21522: LD_INT 6
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: PUSH
21531: LD_OWVAR 67
21535: ARRAY
21536: PUSH
21537: FOR_TO
21538: IFFALSE 21631
// begin hc_class := class_apeman ;
21540: LD_ADDR_OWVAR 28
21544: PUSH
21545: LD_INT 12
21547: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21548: LD_ADDR_OWVAR 31
21552: PUSH
21553: LD_INT 2
21555: PPUSH
21556: LD_INT 5
21558: PPUSH
21559: CALL_OW 12
21563: PUSH
21564: LD_INT 0
21566: PPUSH
21567: LD_INT 2
21569: PPUSH
21570: CALL_OW 12
21574: PUSH
21575: LD_INT 0
21577: PUSH
21578: LD_INT 0
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
21587: LD_ADDR_OWVAR 35
21591: PUSH
21592: LD_INT 15
21594: NEG
21595: PPUSH
21596: LD_INT 15
21598: PPUSH
21599: CALL_OW 12
21603: ST_TO_ADDR
// un = CreateHuman ;
21604: LD_ADDR_VAR 0 3
21608: PUSH
21609: CALL_OW 44
21613: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21614: LD_VAR 0 3
21618: PPUSH
21619: LD_INT 20
21621: PPUSH
21622: LD_INT 0
21624: PPUSH
21625: CALL_OW 49
// end ;
21629: GO 21537
21631: POP
21632: POP
// end ; end_of_file end_of_file
21633: LD_VAR 0 1
21637: RET
// export globalGameSaveCounter ; every 0 0$1 do
21638: GO 21640
21640: DISABLE
// begin enable ;
21641: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21642: LD_STRING updateTimer(
21644: PUSH
21645: LD_OWVAR 1
21649: STR
21650: PUSH
21651: LD_STRING );
21653: STR
21654: PPUSH
21655: CALL_OW 559
// end ;
21659: END
// every 0 0$1 do
21660: GO 21662
21662: DISABLE
// begin globalGameSaveCounter := 0 ;
21663: LD_ADDR_EXP 50
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
21671: LD_STRING setGameSaveCounter(0)
21673: PPUSH
21674: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
21678: LD_STRING initStreamRollete();
21680: PPUSH
21681: CALL_OW 559
// InitStreamMode ;
21685: CALL 23011 0 0
// DefineStreamItems ( false ) ;
21689: LD_INT 0
21691: PPUSH
21692: CALL 23475 0 1
// end ;
21696: END
// export function SOS_MapStart ( ) ; begin
21697: LD_INT 0
21699: PPUSH
// if streamModeActive then
21700: LD_EXP 51
21704: IFFALSE 21713
// DefineStreamItems ( true ) ;
21706: LD_INT 1
21708: PPUSH
21709: CALL 23475 0 1
// UpdateLuaVariables ( ) ;
21713: CALL 21730 0 0
// UpdateFactoryWaypoints ( ) ;
21717: CALL 36344 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21721: CALL 36601 0 0
// end ;
21725: LD_VAR 0 1
21729: RET
// function UpdateLuaVariables ( ) ; begin
21730: LD_INT 0
21732: PPUSH
// if globalGameSaveCounter then
21733: LD_EXP 50
21737: IFFALSE 21771
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21739: LD_ADDR_EXP 50
21743: PUSH
21744: LD_EXP 50
21748: PPUSH
21749: CALL 81231 0 1
21753: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21754: LD_STRING setGameSaveCounter(
21756: PUSH
21757: LD_EXP 50
21761: STR
21762: PUSH
21763: LD_STRING )
21765: STR
21766: PPUSH
21767: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21771: LD_STRING setGameDifficulty(
21773: PUSH
21774: LD_OWVAR 67
21778: STR
21779: PUSH
21780: LD_STRING )
21782: STR
21783: PPUSH
21784: CALL_OW 559
// end ;
21788: LD_VAR 0 1
21792: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21793: LD_INT 0
21795: PPUSH
// if p2 = stream_mode then
21796: LD_VAR 0 2
21800: PUSH
21801: LD_INT 100
21803: EQUAL
21804: IFFALSE 22807
// begin if not StreamModeActive then
21806: LD_EXP 51
21810: NOT
21811: IFFALSE 21821
// StreamModeActive := true ;
21813: LD_ADDR_EXP 51
21817: PUSH
21818: LD_INT 1
21820: ST_TO_ADDR
// if p3 = 0 then
21821: LD_VAR 0 3
21825: PUSH
21826: LD_INT 0
21828: EQUAL
21829: IFFALSE 21835
// InitStreamMode ;
21831: CALL 23011 0 0
// if p3 = 1 then
21835: LD_VAR 0 3
21839: PUSH
21840: LD_INT 1
21842: EQUAL
21843: IFFALSE 21853
// sRocket := true ;
21845: LD_ADDR_EXP 56
21849: PUSH
21850: LD_INT 1
21852: ST_TO_ADDR
// if p3 = 2 then
21853: LD_VAR 0 3
21857: PUSH
21858: LD_INT 2
21860: EQUAL
21861: IFFALSE 21871
// sSpeed := true ;
21863: LD_ADDR_EXP 55
21867: PUSH
21868: LD_INT 1
21870: ST_TO_ADDR
// if p3 = 3 then
21871: LD_VAR 0 3
21875: PUSH
21876: LD_INT 3
21878: EQUAL
21879: IFFALSE 21889
// sEngine := true ;
21881: LD_ADDR_EXP 57
21885: PUSH
21886: LD_INT 1
21888: ST_TO_ADDR
// if p3 = 4 then
21889: LD_VAR 0 3
21893: PUSH
21894: LD_INT 4
21896: EQUAL
21897: IFFALSE 21907
// sSpec := true ;
21899: LD_ADDR_EXP 54
21903: PUSH
21904: LD_INT 1
21906: ST_TO_ADDR
// if p3 = 5 then
21907: LD_VAR 0 3
21911: PUSH
21912: LD_INT 5
21914: EQUAL
21915: IFFALSE 21925
// sLevel := true ;
21917: LD_ADDR_EXP 58
21921: PUSH
21922: LD_INT 1
21924: ST_TO_ADDR
// if p3 = 6 then
21925: LD_VAR 0 3
21929: PUSH
21930: LD_INT 6
21932: EQUAL
21933: IFFALSE 21943
// sArmoury := true ;
21935: LD_ADDR_EXP 59
21939: PUSH
21940: LD_INT 1
21942: ST_TO_ADDR
// if p3 = 7 then
21943: LD_VAR 0 3
21947: PUSH
21948: LD_INT 7
21950: EQUAL
21951: IFFALSE 21961
// sRadar := true ;
21953: LD_ADDR_EXP 60
21957: PUSH
21958: LD_INT 1
21960: ST_TO_ADDR
// if p3 = 8 then
21961: LD_VAR 0 3
21965: PUSH
21966: LD_INT 8
21968: EQUAL
21969: IFFALSE 21979
// sBunker := true ;
21971: LD_ADDR_EXP 61
21975: PUSH
21976: LD_INT 1
21978: ST_TO_ADDR
// if p3 = 9 then
21979: LD_VAR 0 3
21983: PUSH
21984: LD_INT 9
21986: EQUAL
21987: IFFALSE 21997
// sHack := true ;
21989: LD_ADDR_EXP 62
21993: PUSH
21994: LD_INT 1
21996: ST_TO_ADDR
// if p3 = 10 then
21997: LD_VAR 0 3
22001: PUSH
22002: LD_INT 10
22004: EQUAL
22005: IFFALSE 22015
// sFire := true ;
22007: LD_ADDR_EXP 63
22011: PUSH
22012: LD_INT 1
22014: ST_TO_ADDR
// if p3 = 11 then
22015: LD_VAR 0 3
22019: PUSH
22020: LD_INT 11
22022: EQUAL
22023: IFFALSE 22033
// sRefresh := true ;
22025: LD_ADDR_EXP 64
22029: PUSH
22030: LD_INT 1
22032: ST_TO_ADDR
// if p3 = 12 then
22033: LD_VAR 0 3
22037: PUSH
22038: LD_INT 12
22040: EQUAL
22041: IFFALSE 22051
// sExp := true ;
22043: LD_ADDR_EXP 65
22047: PUSH
22048: LD_INT 1
22050: ST_TO_ADDR
// if p3 = 13 then
22051: LD_VAR 0 3
22055: PUSH
22056: LD_INT 13
22058: EQUAL
22059: IFFALSE 22069
// sDepot := true ;
22061: LD_ADDR_EXP 66
22065: PUSH
22066: LD_INT 1
22068: ST_TO_ADDR
// if p3 = 14 then
22069: LD_VAR 0 3
22073: PUSH
22074: LD_INT 14
22076: EQUAL
22077: IFFALSE 22087
// sFlag := true ;
22079: LD_ADDR_EXP 67
22083: PUSH
22084: LD_INT 1
22086: ST_TO_ADDR
// if p3 = 15 then
22087: LD_VAR 0 3
22091: PUSH
22092: LD_INT 15
22094: EQUAL
22095: IFFALSE 22105
// sKamikadze := true ;
22097: LD_ADDR_EXP 75
22101: PUSH
22102: LD_INT 1
22104: ST_TO_ADDR
// if p3 = 16 then
22105: LD_VAR 0 3
22109: PUSH
22110: LD_INT 16
22112: EQUAL
22113: IFFALSE 22123
// sTroll := true ;
22115: LD_ADDR_EXP 76
22119: PUSH
22120: LD_INT 1
22122: ST_TO_ADDR
// if p3 = 17 then
22123: LD_VAR 0 3
22127: PUSH
22128: LD_INT 17
22130: EQUAL
22131: IFFALSE 22141
// sSlow := true ;
22133: LD_ADDR_EXP 77
22137: PUSH
22138: LD_INT 1
22140: ST_TO_ADDR
// if p3 = 18 then
22141: LD_VAR 0 3
22145: PUSH
22146: LD_INT 18
22148: EQUAL
22149: IFFALSE 22159
// sLack := true ;
22151: LD_ADDR_EXP 78
22155: PUSH
22156: LD_INT 1
22158: ST_TO_ADDR
// if p3 = 19 then
22159: LD_VAR 0 3
22163: PUSH
22164: LD_INT 19
22166: EQUAL
22167: IFFALSE 22177
// sTank := true ;
22169: LD_ADDR_EXP 80
22173: PUSH
22174: LD_INT 1
22176: ST_TO_ADDR
// if p3 = 20 then
22177: LD_VAR 0 3
22181: PUSH
22182: LD_INT 20
22184: EQUAL
22185: IFFALSE 22195
// sRemote := true ;
22187: LD_ADDR_EXP 81
22191: PUSH
22192: LD_INT 1
22194: ST_TO_ADDR
// if p3 = 21 then
22195: LD_VAR 0 3
22199: PUSH
22200: LD_INT 21
22202: EQUAL
22203: IFFALSE 22213
// sPowell := true ;
22205: LD_ADDR_EXP 82
22209: PUSH
22210: LD_INT 1
22212: ST_TO_ADDR
// if p3 = 22 then
22213: LD_VAR 0 3
22217: PUSH
22218: LD_INT 22
22220: EQUAL
22221: IFFALSE 22231
// sTeleport := true ;
22223: LD_ADDR_EXP 85
22227: PUSH
22228: LD_INT 1
22230: ST_TO_ADDR
// if p3 = 23 then
22231: LD_VAR 0 3
22235: PUSH
22236: LD_INT 23
22238: EQUAL
22239: IFFALSE 22249
// sOilTower := true ;
22241: LD_ADDR_EXP 87
22245: PUSH
22246: LD_INT 1
22248: ST_TO_ADDR
// if p3 = 24 then
22249: LD_VAR 0 3
22253: PUSH
22254: LD_INT 24
22256: EQUAL
22257: IFFALSE 22267
// sShovel := true ;
22259: LD_ADDR_EXP 88
22263: PUSH
22264: LD_INT 1
22266: ST_TO_ADDR
// if p3 = 25 then
22267: LD_VAR 0 3
22271: PUSH
22272: LD_INT 25
22274: EQUAL
22275: IFFALSE 22285
// sSheik := true ;
22277: LD_ADDR_EXP 89
22281: PUSH
22282: LD_INT 1
22284: ST_TO_ADDR
// if p3 = 26 then
22285: LD_VAR 0 3
22289: PUSH
22290: LD_INT 26
22292: EQUAL
22293: IFFALSE 22303
// sEarthquake := true ;
22295: LD_ADDR_EXP 91
22299: PUSH
22300: LD_INT 1
22302: ST_TO_ADDR
// if p3 = 27 then
22303: LD_VAR 0 3
22307: PUSH
22308: LD_INT 27
22310: EQUAL
22311: IFFALSE 22321
// sAI := true ;
22313: LD_ADDR_EXP 92
22317: PUSH
22318: LD_INT 1
22320: ST_TO_ADDR
// if p3 = 28 then
22321: LD_VAR 0 3
22325: PUSH
22326: LD_INT 28
22328: EQUAL
22329: IFFALSE 22339
// sCargo := true ;
22331: LD_ADDR_EXP 95
22335: PUSH
22336: LD_INT 1
22338: ST_TO_ADDR
// if p3 = 29 then
22339: LD_VAR 0 3
22343: PUSH
22344: LD_INT 29
22346: EQUAL
22347: IFFALSE 22357
// sDLaser := true ;
22349: LD_ADDR_EXP 96
22353: PUSH
22354: LD_INT 1
22356: ST_TO_ADDR
// if p3 = 30 then
22357: LD_VAR 0 3
22361: PUSH
22362: LD_INT 30
22364: EQUAL
22365: IFFALSE 22375
// sExchange := true ;
22367: LD_ADDR_EXP 97
22371: PUSH
22372: LD_INT 1
22374: ST_TO_ADDR
// if p3 = 31 then
22375: LD_VAR 0 3
22379: PUSH
22380: LD_INT 31
22382: EQUAL
22383: IFFALSE 22393
// sFac := true ;
22385: LD_ADDR_EXP 98
22389: PUSH
22390: LD_INT 1
22392: ST_TO_ADDR
// if p3 = 32 then
22393: LD_VAR 0 3
22397: PUSH
22398: LD_INT 32
22400: EQUAL
22401: IFFALSE 22411
// sPower := true ;
22403: LD_ADDR_EXP 99
22407: PUSH
22408: LD_INT 1
22410: ST_TO_ADDR
// if p3 = 33 then
22411: LD_VAR 0 3
22415: PUSH
22416: LD_INT 33
22418: EQUAL
22419: IFFALSE 22429
// sRandom := true ;
22421: LD_ADDR_EXP 100
22425: PUSH
22426: LD_INT 1
22428: ST_TO_ADDR
// if p3 = 34 then
22429: LD_VAR 0 3
22433: PUSH
22434: LD_INT 34
22436: EQUAL
22437: IFFALSE 22447
// sShield := true ;
22439: LD_ADDR_EXP 101
22443: PUSH
22444: LD_INT 1
22446: ST_TO_ADDR
// if p3 = 35 then
22447: LD_VAR 0 3
22451: PUSH
22452: LD_INT 35
22454: EQUAL
22455: IFFALSE 22465
// sTime := true ;
22457: LD_ADDR_EXP 102
22461: PUSH
22462: LD_INT 1
22464: ST_TO_ADDR
// if p3 = 36 then
22465: LD_VAR 0 3
22469: PUSH
22470: LD_INT 36
22472: EQUAL
22473: IFFALSE 22483
// sTools := true ;
22475: LD_ADDR_EXP 103
22479: PUSH
22480: LD_INT 1
22482: ST_TO_ADDR
// if p3 = 101 then
22483: LD_VAR 0 3
22487: PUSH
22488: LD_INT 101
22490: EQUAL
22491: IFFALSE 22501
// sSold := true ;
22493: LD_ADDR_EXP 68
22497: PUSH
22498: LD_INT 1
22500: ST_TO_ADDR
// if p3 = 102 then
22501: LD_VAR 0 3
22505: PUSH
22506: LD_INT 102
22508: EQUAL
22509: IFFALSE 22519
// sDiff := true ;
22511: LD_ADDR_EXP 69
22515: PUSH
22516: LD_INT 1
22518: ST_TO_ADDR
// if p3 = 103 then
22519: LD_VAR 0 3
22523: PUSH
22524: LD_INT 103
22526: EQUAL
22527: IFFALSE 22537
// sFog := true ;
22529: LD_ADDR_EXP 72
22533: PUSH
22534: LD_INT 1
22536: ST_TO_ADDR
// if p3 = 104 then
22537: LD_VAR 0 3
22541: PUSH
22542: LD_INT 104
22544: EQUAL
22545: IFFALSE 22555
// sReset := true ;
22547: LD_ADDR_EXP 73
22551: PUSH
22552: LD_INT 1
22554: ST_TO_ADDR
// if p3 = 105 then
22555: LD_VAR 0 3
22559: PUSH
22560: LD_INT 105
22562: EQUAL
22563: IFFALSE 22573
// sSun := true ;
22565: LD_ADDR_EXP 74
22569: PUSH
22570: LD_INT 1
22572: ST_TO_ADDR
// if p3 = 106 then
22573: LD_VAR 0 3
22577: PUSH
22578: LD_INT 106
22580: EQUAL
22581: IFFALSE 22591
// sTiger := true ;
22583: LD_ADDR_EXP 70
22587: PUSH
22588: LD_INT 1
22590: ST_TO_ADDR
// if p3 = 107 then
22591: LD_VAR 0 3
22595: PUSH
22596: LD_INT 107
22598: EQUAL
22599: IFFALSE 22609
// sBomb := true ;
22601: LD_ADDR_EXP 71
22605: PUSH
22606: LD_INT 1
22608: ST_TO_ADDR
// if p3 = 108 then
22609: LD_VAR 0 3
22613: PUSH
22614: LD_INT 108
22616: EQUAL
22617: IFFALSE 22627
// sWound := true ;
22619: LD_ADDR_EXP 79
22623: PUSH
22624: LD_INT 1
22626: ST_TO_ADDR
// if p3 = 109 then
22627: LD_VAR 0 3
22631: PUSH
22632: LD_INT 109
22634: EQUAL
22635: IFFALSE 22645
// sBetray := true ;
22637: LD_ADDR_EXP 83
22641: PUSH
22642: LD_INT 1
22644: ST_TO_ADDR
// if p3 = 110 then
22645: LD_VAR 0 3
22649: PUSH
22650: LD_INT 110
22652: EQUAL
22653: IFFALSE 22663
// sContamin := true ;
22655: LD_ADDR_EXP 84
22659: PUSH
22660: LD_INT 1
22662: ST_TO_ADDR
// if p3 = 111 then
22663: LD_VAR 0 3
22667: PUSH
22668: LD_INT 111
22670: EQUAL
22671: IFFALSE 22681
// sOil := true ;
22673: LD_ADDR_EXP 86
22677: PUSH
22678: LD_INT 1
22680: ST_TO_ADDR
// if p3 = 112 then
22681: LD_VAR 0 3
22685: PUSH
22686: LD_INT 112
22688: EQUAL
22689: IFFALSE 22699
// sStu := true ;
22691: LD_ADDR_EXP 90
22695: PUSH
22696: LD_INT 1
22698: ST_TO_ADDR
// if p3 = 113 then
22699: LD_VAR 0 3
22703: PUSH
22704: LD_INT 113
22706: EQUAL
22707: IFFALSE 22717
// sBazooka := true ;
22709: LD_ADDR_EXP 93
22713: PUSH
22714: LD_INT 1
22716: ST_TO_ADDR
// if p3 = 114 then
22717: LD_VAR 0 3
22721: PUSH
22722: LD_INT 114
22724: EQUAL
22725: IFFALSE 22735
// sMortar := true ;
22727: LD_ADDR_EXP 94
22731: PUSH
22732: LD_INT 1
22734: ST_TO_ADDR
// if p3 = 115 then
22735: LD_VAR 0 3
22739: PUSH
22740: LD_INT 115
22742: EQUAL
22743: IFFALSE 22753
// sRanger := true ;
22745: LD_ADDR_EXP 104
22749: PUSH
22750: LD_INT 1
22752: ST_TO_ADDR
// if p3 = 116 then
22753: LD_VAR 0 3
22757: PUSH
22758: LD_INT 116
22760: EQUAL
22761: IFFALSE 22771
// sComputer := true ;
22763: LD_ADDR_EXP 105
22767: PUSH
22768: LD_INT 1
22770: ST_TO_ADDR
// if p3 = 117 then
22771: LD_VAR 0 3
22775: PUSH
22776: LD_INT 117
22778: EQUAL
22779: IFFALSE 22789
// s30 := true ;
22781: LD_ADDR_EXP 106
22785: PUSH
22786: LD_INT 1
22788: ST_TO_ADDR
// if p3 = 118 then
22789: LD_VAR 0 3
22793: PUSH
22794: LD_INT 118
22796: EQUAL
22797: IFFALSE 22807
// s60 := true ;
22799: LD_ADDR_EXP 107
22803: PUSH
22804: LD_INT 1
22806: ST_TO_ADDR
// end ; if p2 = hack_mode then
22807: LD_VAR 0 2
22811: PUSH
22812: LD_INT 101
22814: EQUAL
22815: IFFALSE 22943
// begin case p3 of 1 :
22817: LD_VAR 0 3
22821: PUSH
22822: LD_INT 1
22824: DOUBLE
22825: EQUAL
22826: IFTRUE 22830
22828: GO 22837
22830: POP
// hHackUnlimitedResources ; 2 :
22831: CALL 35090 0 0
22835: GO 22943
22837: LD_INT 2
22839: DOUBLE
22840: EQUAL
22841: IFTRUE 22845
22843: GO 22852
22845: POP
// hHackSetLevel10 ; 3 :
22846: CALL 35223 0 0
22850: GO 22943
22852: LD_INT 3
22854: DOUBLE
22855: EQUAL
22856: IFTRUE 22860
22858: GO 22867
22860: POP
// hHackSetLevel10YourUnits ; 4 :
22861: CALL 35308 0 0
22865: GO 22943
22867: LD_INT 4
22869: DOUBLE
22870: EQUAL
22871: IFTRUE 22875
22873: GO 22882
22875: POP
// hHackInvincible ; 5 :
22876: CALL 35756 0 0
22880: GO 22943
22882: LD_INT 5
22884: DOUBLE
22885: EQUAL
22886: IFTRUE 22890
22888: GO 22897
22890: POP
// hHackInvisible ; 6 :
22891: CALL 35867 0 0
22895: GO 22943
22897: LD_INT 6
22899: DOUBLE
22900: EQUAL
22901: IFTRUE 22905
22903: GO 22912
22905: POP
// hHackChangeYourSide ; 7 :
22906: CALL 35924 0 0
22910: GO 22943
22912: LD_INT 7
22914: DOUBLE
22915: EQUAL
22916: IFTRUE 22920
22918: GO 22927
22920: POP
// hHackChangeUnitSide ; 8 :
22921: CALL 35966 0 0
22925: GO 22943
22927: LD_INT 8
22929: DOUBLE
22930: EQUAL
22931: IFTRUE 22935
22933: GO 22942
22935: POP
// hHackFog ; end ;
22936: CALL 36067 0 0
22940: GO 22943
22942: POP
// end ; if p2 = game_save_mode then
22943: LD_VAR 0 2
22947: PUSH
22948: LD_INT 102
22950: EQUAL
22951: IFFALSE 23006
// begin if p3 = 1 then
22953: LD_VAR 0 3
22957: PUSH
22958: LD_INT 1
22960: EQUAL
22961: IFFALSE 22973
// globalGameSaveCounter := p4 ;
22963: LD_ADDR_EXP 50
22967: PUSH
22968: LD_VAR 0 4
22972: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22973: LD_VAR 0 3
22977: PUSH
22978: LD_INT 2
22980: EQUAL
22981: PUSH
22982: LD_EXP 50
22986: AND
22987: IFFALSE 23006
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22989: LD_STRING setGameSaveCounter(
22991: PUSH
22992: LD_EXP 50
22996: STR
22997: PUSH
22998: LD_STRING )
23000: STR
23001: PPUSH
23002: CALL_OW 559
// end ; end ;
23006: LD_VAR 0 7
23010: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
23011: LD_INT 0
23013: PPUSH
// streamModeActive := false ;
23014: LD_ADDR_EXP 51
23018: PUSH
23019: LD_INT 0
23021: ST_TO_ADDR
// normalCounter := 36 ;
23022: LD_ADDR_EXP 52
23026: PUSH
23027: LD_INT 36
23029: ST_TO_ADDR
// hardcoreCounter := 18 ;
23030: LD_ADDR_EXP 53
23034: PUSH
23035: LD_INT 18
23037: ST_TO_ADDR
// sRocket := false ;
23038: LD_ADDR_EXP 56
23042: PUSH
23043: LD_INT 0
23045: ST_TO_ADDR
// sSpeed := false ;
23046: LD_ADDR_EXP 55
23050: PUSH
23051: LD_INT 0
23053: ST_TO_ADDR
// sEngine := false ;
23054: LD_ADDR_EXP 57
23058: PUSH
23059: LD_INT 0
23061: ST_TO_ADDR
// sSpec := false ;
23062: LD_ADDR_EXP 54
23066: PUSH
23067: LD_INT 0
23069: ST_TO_ADDR
// sLevel := false ;
23070: LD_ADDR_EXP 58
23074: PUSH
23075: LD_INT 0
23077: ST_TO_ADDR
// sArmoury := false ;
23078: LD_ADDR_EXP 59
23082: PUSH
23083: LD_INT 0
23085: ST_TO_ADDR
// sRadar := false ;
23086: LD_ADDR_EXP 60
23090: PUSH
23091: LD_INT 0
23093: ST_TO_ADDR
// sBunker := false ;
23094: LD_ADDR_EXP 61
23098: PUSH
23099: LD_INT 0
23101: ST_TO_ADDR
// sHack := false ;
23102: LD_ADDR_EXP 62
23106: PUSH
23107: LD_INT 0
23109: ST_TO_ADDR
// sFire := false ;
23110: LD_ADDR_EXP 63
23114: PUSH
23115: LD_INT 0
23117: ST_TO_ADDR
// sRefresh := false ;
23118: LD_ADDR_EXP 64
23122: PUSH
23123: LD_INT 0
23125: ST_TO_ADDR
// sExp := false ;
23126: LD_ADDR_EXP 65
23130: PUSH
23131: LD_INT 0
23133: ST_TO_ADDR
// sDepot := false ;
23134: LD_ADDR_EXP 66
23138: PUSH
23139: LD_INT 0
23141: ST_TO_ADDR
// sFlag := false ;
23142: LD_ADDR_EXP 67
23146: PUSH
23147: LD_INT 0
23149: ST_TO_ADDR
// sKamikadze := false ;
23150: LD_ADDR_EXP 75
23154: PUSH
23155: LD_INT 0
23157: ST_TO_ADDR
// sTroll := false ;
23158: LD_ADDR_EXP 76
23162: PUSH
23163: LD_INT 0
23165: ST_TO_ADDR
// sSlow := false ;
23166: LD_ADDR_EXP 77
23170: PUSH
23171: LD_INT 0
23173: ST_TO_ADDR
// sLack := false ;
23174: LD_ADDR_EXP 78
23178: PUSH
23179: LD_INT 0
23181: ST_TO_ADDR
// sTank := false ;
23182: LD_ADDR_EXP 80
23186: PUSH
23187: LD_INT 0
23189: ST_TO_ADDR
// sRemote := false ;
23190: LD_ADDR_EXP 81
23194: PUSH
23195: LD_INT 0
23197: ST_TO_ADDR
// sPowell := false ;
23198: LD_ADDR_EXP 82
23202: PUSH
23203: LD_INT 0
23205: ST_TO_ADDR
// sTeleport := false ;
23206: LD_ADDR_EXP 85
23210: PUSH
23211: LD_INT 0
23213: ST_TO_ADDR
// sOilTower := false ;
23214: LD_ADDR_EXP 87
23218: PUSH
23219: LD_INT 0
23221: ST_TO_ADDR
// sShovel := false ;
23222: LD_ADDR_EXP 88
23226: PUSH
23227: LD_INT 0
23229: ST_TO_ADDR
// sSheik := false ;
23230: LD_ADDR_EXP 89
23234: PUSH
23235: LD_INT 0
23237: ST_TO_ADDR
// sEarthquake := false ;
23238: LD_ADDR_EXP 91
23242: PUSH
23243: LD_INT 0
23245: ST_TO_ADDR
// sAI := false ;
23246: LD_ADDR_EXP 92
23250: PUSH
23251: LD_INT 0
23253: ST_TO_ADDR
// sCargo := false ;
23254: LD_ADDR_EXP 95
23258: PUSH
23259: LD_INT 0
23261: ST_TO_ADDR
// sDLaser := false ;
23262: LD_ADDR_EXP 96
23266: PUSH
23267: LD_INT 0
23269: ST_TO_ADDR
// sExchange := false ;
23270: LD_ADDR_EXP 97
23274: PUSH
23275: LD_INT 0
23277: ST_TO_ADDR
// sFac := false ;
23278: LD_ADDR_EXP 98
23282: PUSH
23283: LD_INT 0
23285: ST_TO_ADDR
// sPower := false ;
23286: LD_ADDR_EXP 99
23290: PUSH
23291: LD_INT 0
23293: ST_TO_ADDR
// sRandom := false ;
23294: LD_ADDR_EXP 100
23298: PUSH
23299: LD_INT 0
23301: ST_TO_ADDR
// sShield := false ;
23302: LD_ADDR_EXP 101
23306: PUSH
23307: LD_INT 0
23309: ST_TO_ADDR
// sTime := false ;
23310: LD_ADDR_EXP 102
23314: PUSH
23315: LD_INT 0
23317: ST_TO_ADDR
// sTools := false ;
23318: LD_ADDR_EXP 103
23322: PUSH
23323: LD_INT 0
23325: ST_TO_ADDR
// sSold := false ;
23326: LD_ADDR_EXP 68
23330: PUSH
23331: LD_INT 0
23333: ST_TO_ADDR
// sDiff := false ;
23334: LD_ADDR_EXP 69
23338: PUSH
23339: LD_INT 0
23341: ST_TO_ADDR
// sFog := false ;
23342: LD_ADDR_EXP 72
23346: PUSH
23347: LD_INT 0
23349: ST_TO_ADDR
// sReset := false ;
23350: LD_ADDR_EXP 73
23354: PUSH
23355: LD_INT 0
23357: ST_TO_ADDR
// sSun := false ;
23358: LD_ADDR_EXP 74
23362: PUSH
23363: LD_INT 0
23365: ST_TO_ADDR
// sTiger := false ;
23366: LD_ADDR_EXP 70
23370: PUSH
23371: LD_INT 0
23373: ST_TO_ADDR
// sBomb := false ;
23374: LD_ADDR_EXP 71
23378: PUSH
23379: LD_INT 0
23381: ST_TO_ADDR
// sWound := false ;
23382: LD_ADDR_EXP 79
23386: PUSH
23387: LD_INT 0
23389: ST_TO_ADDR
// sBetray := false ;
23390: LD_ADDR_EXP 83
23394: PUSH
23395: LD_INT 0
23397: ST_TO_ADDR
// sContamin := false ;
23398: LD_ADDR_EXP 84
23402: PUSH
23403: LD_INT 0
23405: ST_TO_ADDR
// sOil := false ;
23406: LD_ADDR_EXP 86
23410: PUSH
23411: LD_INT 0
23413: ST_TO_ADDR
// sStu := false ;
23414: LD_ADDR_EXP 90
23418: PUSH
23419: LD_INT 0
23421: ST_TO_ADDR
// sBazooka := false ;
23422: LD_ADDR_EXP 93
23426: PUSH
23427: LD_INT 0
23429: ST_TO_ADDR
// sMortar := false ;
23430: LD_ADDR_EXP 94
23434: PUSH
23435: LD_INT 0
23437: ST_TO_ADDR
// sRanger := false ;
23438: LD_ADDR_EXP 104
23442: PUSH
23443: LD_INT 0
23445: ST_TO_ADDR
// sComputer := false ;
23446: LD_ADDR_EXP 105
23450: PUSH
23451: LD_INT 0
23453: ST_TO_ADDR
// s30 := false ;
23454: LD_ADDR_EXP 106
23458: PUSH
23459: LD_INT 0
23461: ST_TO_ADDR
// s60 := false ;
23462: LD_ADDR_EXP 107
23466: PUSH
23467: LD_INT 0
23469: ST_TO_ADDR
// end ;
23470: LD_VAR 0 1
23474: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23475: LD_INT 0
23477: PPUSH
23478: PPUSH
23479: PPUSH
23480: PPUSH
23481: PPUSH
23482: PPUSH
23483: PPUSH
// result := [ ] ;
23484: LD_ADDR_VAR 0 2
23488: PUSH
23489: EMPTY
23490: ST_TO_ADDR
// if campaign_id = 1 then
23491: LD_OWVAR 69
23495: PUSH
23496: LD_INT 1
23498: EQUAL
23499: IFFALSE 26665
// begin case mission_number of 1 :
23501: LD_OWVAR 70
23505: PUSH
23506: LD_INT 1
23508: DOUBLE
23509: EQUAL
23510: IFTRUE 23514
23512: GO 23590
23514: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23515: LD_ADDR_VAR 0 2
23519: PUSH
23520: LD_INT 2
23522: PUSH
23523: LD_INT 4
23525: PUSH
23526: LD_INT 11
23528: PUSH
23529: LD_INT 12
23531: PUSH
23532: LD_INT 15
23534: PUSH
23535: LD_INT 16
23537: PUSH
23538: LD_INT 22
23540: PUSH
23541: LD_INT 23
23543: PUSH
23544: LD_INT 26
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 101
23560: PUSH
23561: LD_INT 102
23563: PUSH
23564: LD_INT 106
23566: PUSH
23567: LD_INT 116
23569: PUSH
23570: LD_INT 117
23572: PUSH
23573: LD_INT 118
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: ST_TO_ADDR
23588: GO 26663
23590: LD_INT 2
23592: DOUBLE
23593: EQUAL
23594: IFTRUE 23598
23596: GO 23682
23598: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23599: LD_ADDR_VAR 0 2
23603: PUSH
23604: LD_INT 2
23606: PUSH
23607: LD_INT 4
23609: PUSH
23610: LD_INT 11
23612: PUSH
23613: LD_INT 12
23615: PUSH
23616: LD_INT 15
23618: PUSH
23619: LD_INT 16
23621: PUSH
23622: LD_INT 22
23624: PUSH
23625: LD_INT 23
23627: PUSH
23628: LD_INT 26
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 101
23644: PUSH
23645: LD_INT 102
23647: PUSH
23648: LD_INT 105
23650: PUSH
23651: LD_INT 106
23653: PUSH
23654: LD_INT 108
23656: PUSH
23657: LD_INT 116
23659: PUSH
23660: LD_INT 117
23662: PUSH
23663: LD_INT 118
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: ST_TO_ADDR
23680: GO 26663
23682: LD_INT 3
23684: DOUBLE
23685: EQUAL
23686: IFTRUE 23690
23688: GO 23778
23690: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23691: LD_ADDR_VAR 0 2
23695: PUSH
23696: LD_INT 2
23698: PUSH
23699: LD_INT 4
23701: PUSH
23702: LD_INT 5
23704: PUSH
23705: LD_INT 11
23707: PUSH
23708: LD_INT 12
23710: PUSH
23711: LD_INT 15
23713: PUSH
23714: LD_INT 16
23716: PUSH
23717: LD_INT 22
23719: PUSH
23720: LD_INT 26
23722: PUSH
23723: LD_INT 36
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 101
23740: PUSH
23741: LD_INT 102
23743: PUSH
23744: LD_INT 105
23746: PUSH
23747: LD_INT 106
23749: PUSH
23750: LD_INT 108
23752: PUSH
23753: LD_INT 116
23755: PUSH
23756: LD_INT 117
23758: PUSH
23759: LD_INT 118
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: ST_TO_ADDR
23776: GO 26663
23778: LD_INT 4
23780: DOUBLE
23781: EQUAL
23782: IFTRUE 23786
23784: GO 23882
23786: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23787: LD_ADDR_VAR 0 2
23791: PUSH
23792: LD_INT 2
23794: PUSH
23795: LD_INT 4
23797: PUSH
23798: LD_INT 5
23800: PUSH
23801: LD_INT 8
23803: PUSH
23804: LD_INT 11
23806: PUSH
23807: LD_INT 12
23809: PUSH
23810: LD_INT 15
23812: PUSH
23813: LD_INT 16
23815: PUSH
23816: LD_INT 22
23818: PUSH
23819: LD_INT 23
23821: PUSH
23822: LD_INT 26
23824: PUSH
23825: LD_INT 36
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 101
23844: PUSH
23845: LD_INT 102
23847: PUSH
23848: LD_INT 105
23850: PUSH
23851: LD_INT 106
23853: PUSH
23854: LD_INT 108
23856: PUSH
23857: LD_INT 116
23859: PUSH
23860: LD_INT 117
23862: PUSH
23863: LD_INT 118
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: ST_TO_ADDR
23880: GO 26663
23882: LD_INT 5
23884: DOUBLE
23885: EQUAL
23886: IFTRUE 23890
23888: GO 24002
23890: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23891: LD_ADDR_VAR 0 2
23895: PUSH
23896: LD_INT 2
23898: PUSH
23899: LD_INT 4
23901: PUSH
23902: LD_INT 5
23904: PUSH
23905: LD_INT 6
23907: PUSH
23908: LD_INT 8
23910: PUSH
23911: LD_INT 11
23913: PUSH
23914: LD_INT 12
23916: PUSH
23917: LD_INT 15
23919: PUSH
23920: LD_INT 16
23922: PUSH
23923: LD_INT 22
23925: PUSH
23926: LD_INT 23
23928: PUSH
23929: LD_INT 25
23931: PUSH
23932: LD_INT 26
23934: PUSH
23935: LD_INT 36
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 101
23956: PUSH
23957: LD_INT 102
23959: PUSH
23960: LD_INT 105
23962: PUSH
23963: LD_INT 106
23965: PUSH
23966: LD_INT 108
23968: PUSH
23969: LD_INT 109
23971: PUSH
23972: LD_INT 112
23974: PUSH
23975: LD_INT 116
23977: PUSH
23978: LD_INT 117
23980: PUSH
23981: LD_INT 118
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: ST_TO_ADDR
24000: GO 26663
24002: LD_INT 6
24004: DOUBLE
24005: EQUAL
24006: IFTRUE 24010
24008: GO 24142
24010: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
24011: LD_ADDR_VAR 0 2
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: LD_INT 4
24021: PUSH
24022: LD_INT 5
24024: PUSH
24025: LD_INT 6
24027: PUSH
24028: LD_INT 8
24030: PUSH
24031: LD_INT 11
24033: PUSH
24034: LD_INT 12
24036: PUSH
24037: LD_INT 15
24039: PUSH
24040: LD_INT 16
24042: PUSH
24043: LD_INT 20
24045: PUSH
24046: LD_INT 21
24048: PUSH
24049: LD_INT 22
24051: PUSH
24052: LD_INT 23
24054: PUSH
24055: LD_INT 25
24057: PUSH
24058: LD_INT 26
24060: PUSH
24061: LD_INT 30
24063: PUSH
24064: LD_INT 31
24066: PUSH
24067: LD_INT 32
24069: PUSH
24070: LD_INT 36
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 101
24096: PUSH
24097: LD_INT 102
24099: PUSH
24100: LD_INT 105
24102: PUSH
24103: LD_INT 106
24105: PUSH
24106: LD_INT 108
24108: PUSH
24109: LD_INT 109
24111: PUSH
24112: LD_INT 112
24114: PUSH
24115: LD_INT 116
24117: PUSH
24118: LD_INT 117
24120: PUSH
24121: LD_INT 118
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: ST_TO_ADDR
24140: GO 26663
24142: LD_INT 7
24144: DOUBLE
24145: EQUAL
24146: IFTRUE 24150
24148: GO 24262
24150: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24151: LD_ADDR_VAR 0 2
24155: PUSH
24156: LD_INT 2
24158: PUSH
24159: LD_INT 4
24161: PUSH
24162: LD_INT 5
24164: PUSH
24165: LD_INT 7
24167: PUSH
24168: LD_INT 11
24170: PUSH
24171: LD_INT 12
24173: PUSH
24174: LD_INT 15
24176: PUSH
24177: LD_INT 16
24179: PUSH
24180: LD_INT 20
24182: PUSH
24183: LD_INT 21
24185: PUSH
24186: LD_INT 22
24188: PUSH
24189: LD_INT 23
24191: PUSH
24192: LD_INT 25
24194: PUSH
24195: LD_INT 26
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 101
24216: PUSH
24217: LD_INT 102
24219: PUSH
24220: LD_INT 103
24222: PUSH
24223: LD_INT 105
24225: PUSH
24226: LD_INT 106
24228: PUSH
24229: LD_INT 108
24231: PUSH
24232: LD_INT 112
24234: PUSH
24235: LD_INT 116
24237: PUSH
24238: LD_INT 117
24240: PUSH
24241: LD_INT 118
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: ST_TO_ADDR
24260: GO 26663
24262: LD_INT 8
24264: DOUBLE
24265: EQUAL
24266: IFTRUE 24270
24268: GO 24410
24270: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24271: LD_ADDR_VAR 0 2
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: LD_INT 4
24281: PUSH
24282: LD_INT 5
24284: PUSH
24285: LD_INT 6
24287: PUSH
24288: LD_INT 7
24290: PUSH
24291: LD_INT 8
24293: PUSH
24294: LD_INT 11
24296: PUSH
24297: LD_INT 12
24299: PUSH
24300: LD_INT 15
24302: PUSH
24303: LD_INT 16
24305: PUSH
24306: LD_INT 20
24308: PUSH
24309: LD_INT 21
24311: PUSH
24312: LD_INT 22
24314: PUSH
24315: LD_INT 23
24317: PUSH
24318: LD_INT 25
24320: PUSH
24321: LD_INT 26
24323: PUSH
24324: LD_INT 30
24326: PUSH
24327: LD_INT 31
24329: PUSH
24330: LD_INT 32
24332: PUSH
24333: LD_INT 36
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 101
24360: PUSH
24361: LD_INT 102
24363: PUSH
24364: LD_INT 103
24366: PUSH
24367: LD_INT 105
24369: PUSH
24370: LD_INT 106
24372: PUSH
24373: LD_INT 108
24375: PUSH
24376: LD_INT 109
24378: PUSH
24379: LD_INT 112
24381: PUSH
24382: LD_INT 116
24384: PUSH
24385: LD_INT 117
24387: PUSH
24388: LD_INT 118
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: ST_TO_ADDR
24408: GO 26663
24410: LD_INT 9
24412: DOUBLE
24413: EQUAL
24414: IFTRUE 24418
24416: GO 24566
24418: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24419: LD_ADDR_VAR 0 2
24423: PUSH
24424: LD_INT 2
24426: PUSH
24427: LD_INT 4
24429: PUSH
24430: LD_INT 5
24432: PUSH
24433: LD_INT 6
24435: PUSH
24436: LD_INT 7
24438: PUSH
24439: LD_INT 8
24441: PUSH
24442: LD_INT 11
24444: PUSH
24445: LD_INT 12
24447: PUSH
24448: LD_INT 15
24450: PUSH
24451: LD_INT 16
24453: PUSH
24454: LD_INT 20
24456: PUSH
24457: LD_INT 21
24459: PUSH
24460: LD_INT 22
24462: PUSH
24463: LD_INT 23
24465: PUSH
24466: LD_INT 25
24468: PUSH
24469: LD_INT 26
24471: PUSH
24472: LD_INT 28
24474: PUSH
24475: LD_INT 30
24477: PUSH
24478: LD_INT 31
24480: PUSH
24481: LD_INT 32
24483: PUSH
24484: LD_INT 36
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 101
24512: PUSH
24513: LD_INT 102
24515: PUSH
24516: LD_INT 103
24518: PUSH
24519: LD_INT 105
24521: PUSH
24522: LD_INT 106
24524: PUSH
24525: LD_INT 108
24527: PUSH
24528: LD_INT 109
24530: PUSH
24531: LD_INT 112
24533: PUSH
24534: LD_INT 114
24536: PUSH
24537: LD_INT 116
24539: PUSH
24540: LD_INT 117
24542: PUSH
24543: LD_INT 118
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: ST_TO_ADDR
24564: GO 26663
24566: LD_INT 10
24568: DOUBLE
24569: EQUAL
24570: IFTRUE 24574
24572: GO 24770
24574: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24575: LD_ADDR_VAR 0 2
24579: PUSH
24580: LD_INT 2
24582: PUSH
24583: LD_INT 4
24585: PUSH
24586: LD_INT 5
24588: PUSH
24589: LD_INT 6
24591: PUSH
24592: LD_INT 7
24594: PUSH
24595: LD_INT 8
24597: PUSH
24598: LD_INT 9
24600: PUSH
24601: LD_INT 10
24603: PUSH
24604: LD_INT 11
24606: PUSH
24607: LD_INT 12
24609: PUSH
24610: LD_INT 13
24612: PUSH
24613: LD_INT 14
24615: PUSH
24616: LD_INT 15
24618: PUSH
24619: LD_INT 16
24621: PUSH
24622: LD_INT 17
24624: PUSH
24625: LD_INT 18
24627: PUSH
24628: LD_INT 19
24630: PUSH
24631: LD_INT 20
24633: PUSH
24634: LD_INT 21
24636: PUSH
24637: LD_INT 22
24639: PUSH
24640: LD_INT 23
24642: PUSH
24643: LD_INT 24
24645: PUSH
24646: LD_INT 25
24648: PUSH
24649: LD_INT 26
24651: PUSH
24652: LD_INT 28
24654: PUSH
24655: LD_INT 30
24657: PUSH
24658: LD_INT 31
24660: PUSH
24661: LD_INT 32
24663: PUSH
24664: LD_INT 36
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 101
24700: PUSH
24701: LD_INT 102
24703: PUSH
24704: LD_INT 103
24706: PUSH
24707: LD_INT 104
24709: PUSH
24710: LD_INT 105
24712: PUSH
24713: LD_INT 106
24715: PUSH
24716: LD_INT 107
24718: PUSH
24719: LD_INT 108
24721: PUSH
24722: LD_INT 109
24724: PUSH
24725: LD_INT 110
24727: PUSH
24728: LD_INT 111
24730: PUSH
24731: LD_INT 112
24733: PUSH
24734: LD_INT 114
24736: PUSH
24737: LD_INT 116
24739: PUSH
24740: LD_INT 117
24742: PUSH
24743: LD_INT 118
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: ST_TO_ADDR
24768: GO 26663
24770: LD_INT 11
24772: DOUBLE
24773: EQUAL
24774: IFTRUE 24778
24776: GO 24982
24778: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24779: LD_ADDR_VAR 0 2
24783: PUSH
24784: LD_INT 2
24786: PUSH
24787: LD_INT 3
24789: PUSH
24790: LD_INT 4
24792: PUSH
24793: LD_INT 5
24795: PUSH
24796: LD_INT 6
24798: PUSH
24799: LD_INT 7
24801: PUSH
24802: LD_INT 8
24804: PUSH
24805: LD_INT 9
24807: PUSH
24808: LD_INT 10
24810: PUSH
24811: LD_INT 11
24813: PUSH
24814: LD_INT 12
24816: PUSH
24817: LD_INT 13
24819: PUSH
24820: LD_INT 14
24822: PUSH
24823: LD_INT 15
24825: PUSH
24826: LD_INT 16
24828: PUSH
24829: LD_INT 17
24831: PUSH
24832: LD_INT 18
24834: PUSH
24835: LD_INT 19
24837: PUSH
24838: LD_INT 20
24840: PUSH
24841: LD_INT 21
24843: PUSH
24844: LD_INT 22
24846: PUSH
24847: LD_INT 23
24849: PUSH
24850: LD_INT 24
24852: PUSH
24853: LD_INT 25
24855: PUSH
24856: LD_INT 26
24858: PUSH
24859: LD_INT 28
24861: PUSH
24862: LD_INT 30
24864: PUSH
24865: LD_INT 31
24867: PUSH
24868: LD_INT 32
24870: PUSH
24871: LD_INT 34
24873: PUSH
24874: LD_INT 36
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 101
24912: PUSH
24913: LD_INT 102
24915: PUSH
24916: LD_INT 103
24918: PUSH
24919: LD_INT 104
24921: PUSH
24922: LD_INT 105
24924: PUSH
24925: LD_INT 106
24927: PUSH
24928: LD_INT 107
24930: PUSH
24931: LD_INT 108
24933: PUSH
24934: LD_INT 109
24936: PUSH
24937: LD_INT 110
24939: PUSH
24940: LD_INT 111
24942: PUSH
24943: LD_INT 112
24945: PUSH
24946: LD_INT 114
24948: PUSH
24949: LD_INT 116
24951: PUSH
24952: LD_INT 117
24954: PUSH
24955: LD_INT 118
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: ST_TO_ADDR
24980: GO 26663
24982: LD_INT 12
24984: DOUBLE
24985: EQUAL
24986: IFTRUE 24990
24988: GO 25210
24990: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24991: LD_ADDR_VAR 0 2
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: LD_INT 2
25001: PUSH
25002: LD_INT 3
25004: PUSH
25005: LD_INT 4
25007: PUSH
25008: LD_INT 5
25010: PUSH
25011: LD_INT 6
25013: PUSH
25014: LD_INT 7
25016: PUSH
25017: LD_INT 8
25019: PUSH
25020: LD_INT 9
25022: PUSH
25023: LD_INT 10
25025: PUSH
25026: LD_INT 11
25028: PUSH
25029: LD_INT 12
25031: PUSH
25032: LD_INT 13
25034: PUSH
25035: LD_INT 14
25037: PUSH
25038: LD_INT 15
25040: PUSH
25041: LD_INT 16
25043: PUSH
25044: LD_INT 17
25046: PUSH
25047: LD_INT 18
25049: PUSH
25050: LD_INT 19
25052: PUSH
25053: LD_INT 20
25055: PUSH
25056: LD_INT 21
25058: PUSH
25059: LD_INT 22
25061: PUSH
25062: LD_INT 23
25064: PUSH
25065: LD_INT 24
25067: PUSH
25068: LD_INT 25
25070: PUSH
25071: LD_INT 26
25073: PUSH
25074: LD_INT 27
25076: PUSH
25077: LD_INT 28
25079: PUSH
25080: LD_INT 30
25082: PUSH
25083: LD_INT 31
25085: PUSH
25086: LD_INT 32
25088: PUSH
25089: LD_INT 33
25091: PUSH
25092: LD_INT 34
25094: PUSH
25095: LD_INT 36
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 101
25136: PUSH
25137: LD_INT 102
25139: PUSH
25140: LD_INT 103
25142: PUSH
25143: LD_INT 104
25145: PUSH
25146: LD_INT 105
25148: PUSH
25149: LD_INT 106
25151: PUSH
25152: LD_INT 107
25154: PUSH
25155: LD_INT 108
25157: PUSH
25158: LD_INT 109
25160: PUSH
25161: LD_INT 110
25163: PUSH
25164: LD_INT 111
25166: PUSH
25167: LD_INT 112
25169: PUSH
25170: LD_INT 113
25172: PUSH
25173: LD_INT 114
25175: PUSH
25176: LD_INT 116
25178: PUSH
25179: LD_INT 117
25181: PUSH
25182: LD_INT 118
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: ST_TO_ADDR
25208: GO 26663
25210: LD_INT 13
25212: DOUBLE
25213: EQUAL
25214: IFTRUE 25218
25216: GO 25426
25218: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25219: LD_ADDR_VAR 0 2
25223: PUSH
25224: LD_INT 1
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: LD_INT 3
25232: PUSH
25233: LD_INT 4
25235: PUSH
25236: LD_INT 5
25238: PUSH
25239: LD_INT 8
25241: PUSH
25242: LD_INT 9
25244: PUSH
25245: LD_INT 10
25247: PUSH
25248: LD_INT 11
25250: PUSH
25251: LD_INT 12
25253: PUSH
25254: LD_INT 14
25256: PUSH
25257: LD_INT 15
25259: PUSH
25260: LD_INT 16
25262: PUSH
25263: LD_INT 17
25265: PUSH
25266: LD_INT 18
25268: PUSH
25269: LD_INT 19
25271: PUSH
25272: LD_INT 20
25274: PUSH
25275: LD_INT 21
25277: PUSH
25278: LD_INT 22
25280: PUSH
25281: LD_INT 23
25283: PUSH
25284: LD_INT 24
25286: PUSH
25287: LD_INT 25
25289: PUSH
25290: LD_INT 26
25292: PUSH
25293: LD_INT 27
25295: PUSH
25296: LD_INT 28
25298: PUSH
25299: LD_INT 30
25301: PUSH
25302: LD_INT 31
25304: PUSH
25305: LD_INT 32
25307: PUSH
25308: LD_INT 33
25310: PUSH
25311: LD_INT 34
25313: PUSH
25314: LD_INT 36
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 101
25352: PUSH
25353: LD_INT 102
25355: PUSH
25356: LD_INT 103
25358: PUSH
25359: LD_INT 104
25361: PUSH
25362: LD_INT 105
25364: PUSH
25365: LD_INT 106
25367: PUSH
25368: LD_INT 107
25370: PUSH
25371: LD_INT 108
25373: PUSH
25374: LD_INT 109
25376: PUSH
25377: LD_INT 110
25379: PUSH
25380: LD_INT 111
25382: PUSH
25383: LD_INT 112
25385: PUSH
25386: LD_INT 113
25388: PUSH
25389: LD_INT 114
25391: PUSH
25392: LD_INT 116
25394: PUSH
25395: LD_INT 117
25397: PUSH
25398: LD_INT 118
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: ST_TO_ADDR
25424: GO 26663
25426: LD_INT 14
25428: DOUBLE
25429: EQUAL
25430: IFTRUE 25434
25432: GO 25658
25434: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25435: LD_ADDR_VAR 0 2
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: LD_INT 3
25448: PUSH
25449: LD_INT 4
25451: PUSH
25452: LD_INT 5
25454: PUSH
25455: LD_INT 6
25457: PUSH
25458: LD_INT 7
25460: PUSH
25461: LD_INT 8
25463: PUSH
25464: LD_INT 9
25466: PUSH
25467: LD_INT 10
25469: PUSH
25470: LD_INT 11
25472: PUSH
25473: LD_INT 12
25475: PUSH
25476: LD_INT 13
25478: PUSH
25479: LD_INT 14
25481: PUSH
25482: LD_INT 15
25484: PUSH
25485: LD_INT 16
25487: PUSH
25488: LD_INT 17
25490: PUSH
25491: LD_INT 18
25493: PUSH
25494: LD_INT 19
25496: PUSH
25497: LD_INT 20
25499: PUSH
25500: LD_INT 21
25502: PUSH
25503: LD_INT 22
25505: PUSH
25506: LD_INT 23
25508: PUSH
25509: LD_INT 24
25511: PUSH
25512: LD_INT 25
25514: PUSH
25515: LD_INT 26
25517: PUSH
25518: LD_INT 27
25520: PUSH
25521: LD_INT 28
25523: PUSH
25524: LD_INT 29
25526: PUSH
25527: LD_INT 30
25529: PUSH
25530: LD_INT 31
25532: PUSH
25533: LD_INT 32
25535: PUSH
25536: LD_INT 33
25538: PUSH
25539: LD_INT 34
25541: PUSH
25542: LD_INT 36
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 101
25584: PUSH
25585: LD_INT 102
25587: PUSH
25588: LD_INT 103
25590: PUSH
25591: LD_INT 104
25593: PUSH
25594: LD_INT 105
25596: PUSH
25597: LD_INT 106
25599: PUSH
25600: LD_INT 107
25602: PUSH
25603: LD_INT 108
25605: PUSH
25606: LD_INT 109
25608: PUSH
25609: LD_INT 110
25611: PUSH
25612: LD_INT 111
25614: PUSH
25615: LD_INT 112
25617: PUSH
25618: LD_INT 113
25620: PUSH
25621: LD_INT 114
25623: PUSH
25624: LD_INT 116
25626: PUSH
25627: LD_INT 117
25629: PUSH
25630: LD_INT 118
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: ST_TO_ADDR
25656: GO 26663
25658: LD_INT 15
25660: DOUBLE
25661: EQUAL
25662: IFTRUE 25666
25664: GO 25890
25666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25667: LD_ADDR_VAR 0 2
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: LD_INT 2
25677: PUSH
25678: LD_INT 3
25680: PUSH
25681: LD_INT 4
25683: PUSH
25684: LD_INT 5
25686: PUSH
25687: LD_INT 6
25689: PUSH
25690: LD_INT 7
25692: PUSH
25693: LD_INT 8
25695: PUSH
25696: LD_INT 9
25698: PUSH
25699: LD_INT 10
25701: PUSH
25702: LD_INT 11
25704: PUSH
25705: LD_INT 12
25707: PUSH
25708: LD_INT 13
25710: PUSH
25711: LD_INT 14
25713: PUSH
25714: LD_INT 15
25716: PUSH
25717: LD_INT 16
25719: PUSH
25720: LD_INT 17
25722: PUSH
25723: LD_INT 18
25725: PUSH
25726: LD_INT 19
25728: PUSH
25729: LD_INT 20
25731: PUSH
25732: LD_INT 21
25734: PUSH
25735: LD_INT 22
25737: PUSH
25738: LD_INT 23
25740: PUSH
25741: LD_INT 24
25743: PUSH
25744: LD_INT 25
25746: PUSH
25747: LD_INT 26
25749: PUSH
25750: LD_INT 27
25752: PUSH
25753: LD_INT 28
25755: PUSH
25756: LD_INT 29
25758: PUSH
25759: LD_INT 30
25761: PUSH
25762: LD_INT 31
25764: PUSH
25765: LD_INT 32
25767: PUSH
25768: LD_INT 33
25770: PUSH
25771: LD_INT 34
25773: PUSH
25774: LD_INT 36
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 101
25816: PUSH
25817: LD_INT 102
25819: PUSH
25820: LD_INT 103
25822: PUSH
25823: LD_INT 104
25825: PUSH
25826: LD_INT 105
25828: PUSH
25829: LD_INT 106
25831: PUSH
25832: LD_INT 107
25834: PUSH
25835: LD_INT 108
25837: PUSH
25838: LD_INT 109
25840: PUSH
25841: LD_INT 110
25843: PUSH
25844: LD_INT 111
25846: PUSH
25847: LD_INT 112
25849: PUSH
25850: LD_INT 113
25852: PUSH
25853: LD_INT 114
25855: PUSH
25856: LD_INT 116
25858: PUSH
25859: LD_INT 117
25861: PUSH
25862: LD_INT 118
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: ST_TO_ADDR
25888: GO 26663
25890: LD_INT 16
25892: DOUBLE
25893: EQUAL
25894: IFTRUE 25898
25896: GO 26034
25898: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25899: LD_ADDR_VAR 0 2
25903: PUSH
25904: LD_INT 2
25906: PUSH
25907: LD_INT 4
25909: PUSH
25910: LD_INT 5
25912: PUSH
25913: LD_INT 7
25915: PUSH
25916: LD_INT 11
25918: PUSH
25919: LD_INT 12
25921: PUSH
25922: LD_INT 15
25924: PUSH
25925: LD_INT 16
25927: PUSH
25928: LD_INT 20
25930: PUSH
25931: LD_INT 21
25933: PUSH
25934: LD_INT 22
25936: PUSH
25937: LD_INT 23
25939: PUSH
25940: LD_INT 25
25942: PUSH
25943: LD_INT 26
25945: PUSH
25946: LD_INT 30
25948: PUSH
25949: LD_INT 31
25951: PUSH
25952: LD_INT 32
25954: PUSH
25955: LD_INT 33
25957: PUSH
25958: LD_INT 34
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 101
25984: PUSH
25985: LD_INT 102
25987: PUSH
25988: LD_INT 103
25990: PUSH
25991: LD_INT 106
25993: PUSH
25994: LD_INT 108
25996: PUSH
25997: LD_INT 112
25999: PUSH
26000: LD_INT 113
26002: PUSH
26003: LD_INT 114
26005: PUSH
26006: LD_INT 116
26008: PUSH
26009: LD_INT 117
26011: PUSH
26012: LD_INT 118
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: ST_TO_ADDR
26032: GO 26663
26034: LD_INT 17
26036: DOUBLE
26037: EQUAL
26038: IFTRUE 26042
26040: GO 26266
26042: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
26043: LD_ADDR_VAR 0 2
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 2
26053: PUSH
26054: LD_INT 3
26056: PUSH
26057: LD_INT 4
26059: PUSH
26060: LD_INT 5
26062: PUSH
26063: LD_INT 6
26065: PUSH
26066: LD_INT 7
26068: PUSH
26069: LD_INT 8
26071: PUSH
26072: LD_INT 9
26074: PUSH
26075: LD_INT 10
26077: PUSH
26078: LD_INT 11
26080: PUSH
26081: LD_INT 12
26083: PUSH
26084: LD_INT 13
26086: PUSH
26087: LD_INT 14
26089: PUSH
26090: LD_INT 15
26092: PUSH
26093: LD_INT 16
26095: PUSH
26096: LD_INT 17
26098: PUSH
26099: LD_INT 18
26101: PUSH
26102: LD_INT 19
26104: PUSH
26105: LD_INT 20
26107: PUSH
26108: LD_INT 21
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_INT 23
26116: PUSH
26117: LD_INT 24
26119: PUSH
26120: LD_INT 25
26122: PUSH
26123: LD_INT 26
26125: PUSH
26126: LD_INT 27
26128: PUSH
26129: LD_INT 28
26131: PUSH
26132: LD_INT 29
26134: PUSH
26135: LD_INT 30
26137: PUSH
26138: LD_INT 31
26140: PUSH
26141: LD_INT 32
26143: PUSH
26144: LD_INT 33
26146: PUSH
26147: LD_INT 34
26149: PUSH
26150: LD_INT 36
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 101
26192: PUSH
26193: LD_INT 102
26195: PUSH
26196: LD_INT 103
26198: PUSH
26199: LD_INT 104
26201: PUSH
26202: LD_INT 105
26204: PUSH
26205: LD_INT 106
26207: PUSH
26208: LD_INT 107
26210: PUSH
26211: LD_INT 108
26213: PUSH
26214: LD_INT 109
26216: PUSH
26217: LD_INT 110
26219: PUSH
26220: LD_INT 111
26222: PUSH
26223: LD_INT 112
26225: PUSH
26226: LD_INT 113
26228: PUSH
26229: LD_INT 114
26231: PUSH
26232: LD_INT 116
26234: PUSH
26235: LD_INT 117
26237: PUSH
26238: LD_INT 118
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: ST_TO_ADDR
26264: GO 26663
26266: LD_INT 18
26268: DOUBLE
26269: EQUAL
26270: IFTRUE 26274
26272: GO 26422
26274: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26275: LD_ADDR_VAR 0 2
26279: PUSH
26280: LD_INT 2
26282: PUSH
26283: LD_INT 4
26285: PUSH
26286: LD_INT 5
26288: PUSH
26289: LD_INT 7
26291: PUSH
26292: LD_INT 11
26294: PUSH
26295: LD_INT 12
26297: PUSH
26298: LD_INT 15
26300: PUSH
26301: LD_INT 16
26303: PUSH
26304: LD_INT 20
26306: PUSH
26307: LD_INT 21
26309: PUSH
26310: LD_INT 22
26312: PUSH
26313: LD_INT 23
26315: PUSH
26316: LD_INT 25
26318: PUSH
26319: LD_INT 26
26321: PUSH
26322: LD_INT 30
26324: PUSH
26325: LD_INT 31
26327: PUSH
26328: LD_INT 32
26330: PUSH
26331: LD_INT 33
26333: PUSH
26334: LD_INT 34
26336: PUSH
26337: LD_INT 35
26339: PUSH
26340: LD_INT 36
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 101
26368: PUSH
26369: LD_INT 102
26371: PUSH
26372: LD_INT 103
26374: PUSH
26375: LD_INT 106
26377: PUSH
26378: LD_INT 108
26380: PUSH
26381: LD_INT 112
26383: PUSH
26384: LD_INT 113
26386: PUSH
26387: LD_INT 114
26389: PUSH
26390: LD_INT 115
26392: PUSH
26393: LD_INT 116
26395: PUSH
26396: LD_INT 117
26398: PUSH
26399: LD_INT 118
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: ST_TO_ADDR
26420: GO 26663
26422: LD_INT 19
26424: DOUBLE
26425: EQUAL
26426: IFTRUE 26430
26428: GO 26662
26430: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26431: LD_ADDR_VAR 0 2
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: LD_INT 2
26441: PUSH
26442: LD_INT 3
26444: PUSH
26445: LD_INT 4
26447: PUSH
26448: LD_INT 5
26450: PUSH
26451: LD_INT 6
26453: PUSH
26454: LD_INT 7
26456: PUSH
26457: LD_INT 8
26459: PUSH
26460: LD_INT 9
26462: PUSH
26463: LD_INT 10
26465: PUSH
26466: LD_INT 11
26468: PUSH
26469: LD_INT 12
26471: PUSH
26472: LD_INT 13
26474: PUSH
26475: LD_INT 14
26477: PUSH
26478: LD_INT 15
26480: PUSH
26481: LD_INT 16
26483: PUSH
26484: LD_INT 17
26486: PUSH
26487: LD_INT 18
26489: PUSH
26490: LD_INT 19
26492: PUSH
26493: LD_INT 20
26495: PUSH
26496: LD_INT 21
26498: PUSH
26499: LD_INT 22
26501: PUSH
26502: LD_INT 23
26504: PUSH
26505: LD_INT 24
26507: PUSH
26508: LD_INT 25
26510: PUSH
26511: LD_INT 26
26513: PUSH
26514: LD_INT 27
26516: PUSH
26517: LD_INT 28
26519: PUSH
26520: LD_INT 29
26522: PUSH
26523: LD_INT 30
26525: PUSH
26526: LD_INT 31
26528: PUSH
26529: LD_INT 32
26531: PUSH
26532: LD_INT 33
26534: PUSH
26535: LD_INT 34
26537: PUSH
26538: LD_INT 35
26540: PUSH
26541: LD_INT 36
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 101
26584: PUSH
26585: LD_INT 102
26587: PUSH
26588: LD_INT 103
26590: PUSH
26591: LD_INT 104
26593: PUSH
26594: LD_INT 105
26596: PUSH
26597: LD_INT 106
26599: PUSH
26600: LD_INT 107
26602: PUSH
26603: LD_INT 108
26605: PUSH
26606: LD_INT 109
26608: PUSH
26609: LD_INT 110
26611: PUSH
26612: LD_INT 111
26614: PUSH
26615: LD_INT 112
26617: PUSH
26618: LD_INT 113
26620: PUSH
26621: LD_INT 114
26623: PUSH
26624: LD_INT 115
26626: PUSH
26627: LD_INT 116
26629: PUSH
26630: LD_INT 117
26632: PUSH
26633: LD_INT 118
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: ST_TO_ADDR
26660: GO 26663
26662: POP
// end else
26663: GO 26894
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26665: LD_ADDR_VAR 0 2
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: LD_INT 3
26678: PUSH
26679: LD_INT 4
26681: PUSH
26682: LD_INT 5
26684: PUSH
26685: LD_INT 6
26687: PUSH
26688: LD_INT 7
26690: PUSH
26691: LD_INT 8
26693: PUSH
26694: LD_INT 9
26696: PUSH
26697: LD_INT 10
26699: PUSH
26700: LD_INT 11
26702: PUSH
26703: LD_INT 12
26705: PUSH
26706: LD_INT 13
26708: PUSH
26709: LD_INT 14
26711: PUSH
26712: LD_INT 15
26714: PUSH
26715: LD_INT 16
26717: PUSH
26718: LD_INT 17
26720: PUSH
26721: LD_INT 18
26723: PUSH
26724: LD_INT 19
26726: PUSH
26727: LD_INT 20
26729: PUSH
26730: LD_INT 21
26732: PUSH
26733: LD_INT 22
26735: PUSH
26736: LD_INT 23
26738: PUSH
26739: LD_INT 24
26741: PUSH
26742: LD_INT 25
26744: PUSH
26745: LD_INT 26
26747: PUSH
26748: LD_INT 27
26750: PUSH
26751: LD_INT 28
26753: PUSH
26754: LD_INT 29
26756: PUSH
26757: LD_INT 30
26759: PUSH
26760: LD_INT 31
26762: PUSH
26763: LD_INT 32
26765: PUSH
26766: LD_INT 33
26768: PUSH
26769: LD_INT 34
26771: PUSH
26772: LD_INT 35
26774: PUSH
26775: LD_INT 36
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 101
26818: PUSH
26819: LD_INT 102
26821: PUSH
26822: LD_INT 103
26824: PUSH
26825: LD_INT 104
26827: PUSH
26828: LD_INT 105
26830: PUSH
26831: LD_INT 106
26833: PUSH
26834: LD_INT 107
26836: PUSH
26837: LD_INT 108
26839: PUSH
26840: LD_INT 109
26842: PUSH
26843: LD_INT 110
26845: PUSH
26846: LD_INT 111
26848: PUSH
26849: LD_INT 112
26851: PUSH
26852: LD_INT 113
26854: PUSH
26855: LD_INT 114
26857: PUSH
26858: LD_INT 115
26860: PUSH
26861: LD_INT 116
26863: PUSH
26864: LD_INT 117
26866: PUSH
26867: LD_INT 118
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: ST_TO_ADDR
// if result then
26894: LD_VAR 0 2
26898: IFFALSE 27684
// begin normal :=  ;
26900: LD_ADDR_VAR 0 5
26904: PUSH
26905: LD_STRING 
26907: ST_TO_ADDR
// hardcore :=  ;
26908: LD_ADDR_VAR 0 6
26912: PUSH
26913: LD_STRING 
26915: ST_TO_ADDR
// active :=  ;
26916: LD_ADDR_VAR 0 7
26920: PUSH
26921: LD_STRING 
26923: ST_TO_ADDR
// for i = 1 to normalCounter do
26924: LD_ADDR_VAR 0 8
26928: PUSH
26929: DOUBLE
26930: LD_INT 1
26932: DEC
26933: ST_TO_ADDR
26934: LD_EXP 52
26938: PUSH
26939: FOR_TO
26940: IFFALSE 27041
// begin tmp := 0 ;
26942: LD_ADDR_VAR 0 3
26946: PUSH
26947: LD_STRING 0
26949: ST_TO_ADDR
// if result [ 1 ] then
26950: LD_VAR 0 2
26954: PUSH
26955: LD_INT 1
26957: ARRAY
26958: IFFALSE 27023
// if result [ 1 ] [ 1 ] = i then
26960: LD_VAR 0 2
26964: PUSH
26965: LD_INT 1
26967: ARRAY
26968: PUSH
26969: LD_INT 1
26971: ARRAY
26972: PUSH
26973: LD_VAR 0 8
26977: EQUAL
26978: IFFALSE 27023
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26980: LD_ADDR_VAR 0 2
26984: PUSH
26985: LD_VAR 0 2
26989: PPUSH
26990: LD_INT 1
26992: PPUSH
26993: LD_VAR 0 2
26997: PUSH
26998: LD_INT 1
27000: ARRAY
27001: PPUSH
27002: LD_INT 1
27004: PPUSH
27005: CALL_OW 3
27009: PPUSH
27010: CALL_OW 1
27014: ST_TO_ADDR
// tmp := 1 ;
27015: LD_ADDR_VAR 0 3
27019: PUSH
27020: LD_STRING 1
27022: ST_TO_ADDR
// end ; normal := normal & tmp ;
27023: LD_ADDR_VAR 0 5
27027: PUSH
27028: LD_VAR 0 5
27032: PUSH
27033: LD_VAR 0 3
27037: STR
27038: ST_TO_ADDR
// end ;
27039: GO 26939
27041: POP
27042: POP
// for i = 1 to hardcoreCounter do
27043: LD_ADDR_VAR 0 8
27047: PUSH
27048: DOUBLE
27049: LD_INT 1
27051: DEC
27052: ST_TO_ADDR
27053: LD_EXP 53
27057: PUSH
27058: FOR_TO
27059: IFFALSE 27164
// begin tmp := 0 ;
27061: LD_ADDR_VAR 0 3
27065: PUSH
27066: LD_STRING 0
27068: ST_TO_ADDR
// if result [ 2 ] then
27069: LD_VAR 0 2
27073: PUSH
27074: LD_INT 2
27076: ARRAY
27077: IFFALSE 27146
// if result [ 2 ] [ 1 ] = 100 + i then
27079: LD_VAR 0 2
27083: PUSH
27084: LD_INT 2
27086: ARRAY
27087: PUSH
27088: LD_INT 1
27090: ARRAY
27091: PUSH
27092: LD_INT 100
27094: PUSH
27095: LD_VAR 0 8
27099: PLUS
27100: EQUAL
27101: IFFALSE 27146
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27103: LD_ADDR_VAR 0 2
27107: PUSH
27108: LD_VAR 0 2
27112: PPUSH
27113: LD_INT 2
27115: PPUSH
27116: LD_VAR 0 2
27120: PUSH
27121: LD_INT 2
27123: ARRAY
27124: PPUSH
27125: LD_INT 1
27127: PPUSH
27128: CALL_OW 3
27132: PPUSH
27133: CALL_OW 1
27137: ST_TO_ADDR
// tmp := 1 ;
27138: LD_ADDR_VAR 0 3
27142: PUSH
27143: LD_STRING 1
27145: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27146: LD_ADDR_VAR 0 6
27150: PUSH
27151: LD_VAR 0 6
27155: PUSH
27156: LD_VAR 0 3
27160: STR
27161: ST_TO_ADDR
// end ;
27162: GO 27058
27164: POP
27165: POP
// if isGameLoad then
27166: LD_VAR 0 1
27170: IFFALSE 27645
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27172: LD_ADDR_VAR 0 4
27176: PUSH
27177: LD_EXP 56
27181: PUSH
27182: LD_EXP 55
27186: PUSH
27187: LD_EXP 57
27191: PUSH
27192: LD_EXP 54
27196: PUSH
27197: LD_EXP 58
27201: PUSH
27202: LD_EXP 59
27206: PUSH
27207: LD_EXP 60
27211: PUSH
27212: LD_EXP 61
27216: PUSH
27217: LD_EXP 62
27221: PUSH
27222: LD_EXP 63
27226: PUSH
27227: LD_EXP 64
27231: PUSH
27232: LD_EXP 65
27236: PUSH
27237: LD_EXP 66
27241: PUSH
27242: LD_EXP 67
27246: PUSH
27247: LD_EXP 75
27251: PUSH
27252: LD_EXP 76
27256: PUSH
27257: LD_EXP 77
27261: PUSH
27262: LD_EXP 78
27266: PUSH
27267: LD_EXP 80
27271: PUSH
27272: LD_EXP 81
27276: PUSH
27277: LD_EXP 82
27281: PUSH
27282: LD_EXP 85
27286: PUSH
27287: LD_EXP 87
27291: PUSH
27292: LD_EXP 88
27296: PUSH
27297: LD_EXP 89
27301: PUSH
27302: LD_EXP 91
27306: PUSH
27307: LD_EXP 92
27311: PUSH
27312: LD_EXP 95
27316: PUSH
27317: LD_EXP 96
27321: PUSH
27322: LD_EXP 97
27326: PUSH
27327: LD_EXP 98
27331: PUSH
27332: LD_EXP 99
27336: PUSH
27337: LD_EXP 100
27341: PUSH
27342: LD_EXP 101
27346: PUSH
27347: LD_EXP 102
27351: PUSH
27352: LD_EXP 103
27356: PUSH
27357: LD_EXP 68
27361: PUSH
27362: LD_EXP 69
27366: PUSH
27367: LD_EXP 72
27371: PUSH
27372: LD_EXP 73
27376: PUSH
27377: LD_EXP 74
27381: PUSH
27382: LD_EXP 70
27386: PUSH
27387: LD_EXP 71
27391: PUSH
27392: LD_EXP 79
27396: PUSH
27397: LD_EXP 83
27401: PUSH
27402: LD_EXP 84
27406: PUSH
27407: LD_EXP 86
27411: PUSH
27412: LD_EXP 90
27416: PUSH
27417: LD_EXP 93
27421: PUSH
27422: LD_EXP 94
27426: PUSH
27427: LD_EXP 104
27431: PUSH
27432: LD_EXP 105
27436: PUSH
27437: LD_EXP 106
27441: PUSH
27442: LD_EXP 107
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: ST_TO_ADDR
// tmp :=  ;
27503: LD_ADDR_VAR 0 3
27507: PUSH
27508: LD_STRING 
27510: ST_TO_ADDR
// for i = 1 to normalCounter do
27511: LD_ADDR_VAR 0 8
27515: PUSH
27516: DOUBLE
27517: LD_INT 1
27519: DEC
27520: ST_TO_ADDR
27521: LD_EXP 52
27525: PUSH
27526: FOR_TO
27527: IFFALSE 27563
// begin if flags [ i ] then
27529: LD_VAR 0 4
27533: PUSH
27534: LD_VAR 0 8
27538: ARRAY
27539: IFFALSE 27561
// tmp := tmp & i & ; ;
27541: LD_ADDR_VAR 0 3
27545: PUSH
27546: LD_VAR 0 3
27550: PUSH
27551: LD_VAR 0 8
27555: STR
27556: PUSH
27557: LD_STRING ;
27559: STR
27560: ST_TO_ADDR
// end ;
27561: GO 27526
27563: POP
27564: POP
// for i = 1 to hardcoreCounter do
27565: LD_ADDR_VAR 0 8
27569: PUSH
27570: DOUBLE
27571: LD_INT 1
27573: DEC
27574: ST_TO_ADDR
27575: LD_EXP 53
27579: PUSH
27580: FOR_TO
27581: IFFALSE 27627
// begin if flags [ normalCounter + i ] then
27583: LD_VAR 0 4
27587: PUSH
27588: LD_EXP 52
27592: PUSH
27593: LD_VAR 0 8
27597: PLUS
27598: ARRAY
27599: IFFALSE 27625
// tmp := tmp & ( 100 + i ) & ; ;
27601: LD_ADDR_VAR 0 3
27605: PUSH
27606: LD_VAR 0 3
27610: PUSH
27611: LD_INT 100
27613: PUSH
27614: LD_VAR 0 8
27618: PLUS
27619: STR
27620: PUSH
27621: LD_STRING ;
27623: STR
27624: ST_TO_ADDR
// end ;
27625: GO 27580
27627: POP
27628: POP
// if tmp then
27629: LD_VAR 0 3
27633: IFFALSE 27645
// active := tmp ;
27635: LD_ADDR_VAR 0 7
27639: PUSH
27640: LD_VAR 0 3
27644: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27645: LD_STRING getStreamItemsFromMission("
27647: PUSH
27648: LD_VAR 0 5
27652: STR
27653: PUSH
27654: LD_STRING ","
27656: STR
27657: PUSH
27658: LD_VAR 0 6
27662: STR
27663: PUSH
27664: LD_STRING ","
27666: STR
27667: PUSH
27668: LD_VAR 0 7
27672: STR
27673: PUSH
27674: LD_STRING ")
27676: STR
27677: PPUSH
27678: CALL_OW 559
// end else
27682: GO 27691
// ToLua ( getStreamItemsFromMission("","","") ) ;
27684: LD_STRING getStreamItemsFromMission("","","")
27686: PPUSH
27687: CALL_OW 559
// end ;
27691: LD_VAR 0 2
27695: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27696: LD_EXP 51
27700: PUSH
27701: LD_EXP 56
27705: AND
27706: IFFALSE 27830
27708: GO 27710
27710: DISABLE
27711: LD_INT 0
27713: PPUSH
27714: PPUSH
// begin enable ;
27715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27716: LD_ADDR_VAR 0 2
27720: PUSH
27721: LD_INT 22
27723: PUSH
27724: LD_OWVAR 2
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: LD_INT 34
27738: PUSH
27739: LD_INT 7
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 34
27748: PUSH
27749: LD_INT 45
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 34
27758: PUSH
27759: LD_INT 28
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 34
27768: PUSH
27769: LD_INT 47
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PPUSH
27787: CALL_OW 69
27791: ST_TO_ADDR
// if not tmp then
27792: LD_VAR 0 2
27796: NOT
27797: IFFALSE 27801
// exit ;
27799: GO 27830
// for i in tmp do
27801: LD_ADDR_VAR 0 1
27805: PUSH
27806: LD_VAR 0 2
27810: PUSH
27811: FOR_IN
27812: IFFALSE 27828
// begin SetLives ( i , 0 ) ;
27814: LD_VAR 0 1
27818: PPUSH
27819: LD_INT 0
27821: PPUSH
27822: CALL_OW 234
// end ;
27826: GO 27811
27828: POP
27829: POP
// end ;
27830: PPOPN 2
27832: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27833: LD_EXP 51
27837: PUSH
27838: LD_EXP 57
27842: AND
27843: IFFALSE 27927
27845: GO 27847
27847: DISABLE
27848: LD_INT 0
27850: PPUSH
27851: PPUSH
// begin enable ;
27852: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27853: LD_ADDR_VAR 0 2
27857: PUSH
27858: LD_INT 22
27860: PUSH
27861: LD_OWVAR 2
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 32
27872: PUSH
27873: LD_INT 3
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PPUSH
27884: CALL_OW 69
27888: ST_TO_ADDR
// if not tmp then
27889: LD_VAR 0 2
27893: NOT
27894: IFFALSE 27898
// exit ;
27896: GO 27927
// for i in tmp do
27898: LD_ADDR_VAR 0 1
27902: PUSH
27903: LD_VAR 0 2
27907: PUSH
27908: FOR_IN
27909: IFFALSE 27925
// begin SetLives ( i , 0 ) ;
27911: LD_VAR 0 1
27915: PPUSH
27916: LD_INT 0
27918: PPUSH
27919: CALL_OW 234
// end ;
27923: GO 27908
27925: POP
27926: POP
// end ;
27927: PPOPN 2
27929: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27930: LD_EXP 51
27934: PUSH
27935: LD_EXP 54
27939: AND
27940: IFFALSE 28033
27942: GO 27944
27944: DISABLE
27945: LD_INT 0
27947: PPUSH
// begin enable ;
27948: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27949: LD_ADDR_VAR 0 1
27953: PUSH
27954: LD_INT 22
27956: PUSH
27957: LD_OWVAR 2
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 2
27968: PUSH
27969: LD_INT 25
27971: PUSH
27972: LD_INT 5
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 25
27981: PUSH
27982: LD_INT 9
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 25
27991: PUSH
27992: LD_INT 8
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PPUSH
28009: CALL_OW 69
28013: PUSH
28014: FOR_IN
28015: IFFALSE 28031
// begin SetClass ( i , 1 ) ;
28017: LD_VAR 0 1
28021: PPUSH
28022: LD_INT 1
28024: PPUSH
28025: CALL_OW 336
// end ;
28029: GO 28014
28031: POP
28032: POP
// end ;
28033: PPOPN 1
28035: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28036: LD_EXP 51
28040: PUSH
28041: LD_EXP 55
28045: AND
28046: PUSH
28047: LD_OWVAR 65
28051: PUSH
28052: LD_INT 7
28054: LESS
28055: AND
28056: IFFALSE 28070
28058: GO 28060
28060: DISABLE
// begin enable ;
28061: ENABLE
// game_speed := 7 ;
28062: LD_ADDR_OWVAR 65
28066: PUSH
28067: LD_INT 7
28069: ST_TO_ADDR
// end ;
28070: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28071: LD_EXP 51
28075: PUSH
28076: LD_EXP 58
28080: AND
28081: IFFALSE 28283
28083: GO 28085
28085: DISABLE
28086: LD_INT 0
28088: PPUSH
28089: PPUSH
28090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28091: LD_ADDR_VAR 0 3
28095: PUSH
28096: LD_INT 81
28098: PUSH
28099: LD_OWVAR 2
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 21
28110: PUSH
28111: LD_INT 1
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PPUSH
28122: CALL_OW 69
28126: ST_TO_ADDR
// if not tmp then
28127: LD_VAR 0 3
28131: NOT
28132: IFFALSE 28136
// exit ;
28134: GO 28283
// if tmp > 5 then
28136: LD_VAR 0 3
28140: PUSH
28141: LD_INT 5
28143: GREATER
28144: IFFALSE 28156
// k := 5 else
28146: LD_ADDR_VAR 0 2
28150: PUSH
28151: LD_INT 5
28153: ST_TO_ADDR
28154: GO 28166
// k := tmp ;
28156: LD_ADDR_VAR 0 2
28160: PUSH
28161: LD_VAR 0 3
28165: ST_TO_ADDR
// for i := 1 to k do
28166: LD_ADDR_VAR 0 1
28170: PUSH
28171: DOUBLE
28172: LD_INT 1
28174: DEC
28175: ST_TO_ADDR
28176: LD_VAR 0 2
28180: PUSH
28181: FOR_TO
28182: IFFALSE 28281
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28184: LD_VAR 0 3
28188: PUSH
28189: LD_VAR 0 1
28193: ARRAY
28194: PPUSH
28195: LD_VAR 0 1
28199: PUSH
28200: LD_INT 4
28202: MOD
28203: PUSH
28204: LD_INT 1
28206: PLUS
28207: PPUSH
28208: CALL_OW 259
28212: PUSH
28213: LD_INT 10
28215: LESS
28216: IFFALSE 28279
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28218: LD_VAR 0 3
28222: PUSH
28223: LD_VAR 0 1
28227: ARRAY
28228: PPUSH
28229: LD_VAR 0 1
28233: PUSH
28234: LD_INT 4
28236: MOD
28237: PUSH
28238: LD_INT 1
28240: PLUS
28241: PPUSH
28242: LD_VAR 0 3
28246: PUSH
28247: LD_VAR 0 1
28251: ARRAY
28252: PPUSH
28253: LD_VAR 0 1
28257: PUSH
28258: LD_INT 4
28260: MOD
28261: PUSH
28262: LD_INT 1
28264: PLUS
28265: PPUSH
28266: CALL_OW 259
28270: PUSH
28271: LD_INT 1
28273: PLUS
28274: PPUSH
28275: CALL_OW 237
28279: GO 28181
28281: POP
28282: POP
// end ;
28283: PPOPN 3
28285: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28286: LD_EXP 51
28290: PUSH
28291: LD_EXP 59
28295: AND
28296: IFFALSE 28316
28298: GO 28300
28300: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28301: LD_INT 4
28303: PPUSH
28304: LD_OWVAR 2
28308: PPUSH
28309: LD_INT 0
28311: PPUSH
28312: CALL_OW 324
28316: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28317: LD_EXP 51
28321: PUSH
28322: LD_EXP 88
28326: AND
28327: IFFALSE 28347
28329: GO 28331
28331: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28332: LD_INT 19
28334: PPUSH
28335: LD_OWVAR 2
28339: PPUSH
28340: LD_INT 0
28342: PPUSH
28343: CALL_OW 324
28347: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28348: LD_EXP 51
28352: PUSH
28353: LD_EXP 60
28357: AND
28358: IFFALSE 28460
28360: GO 28362
28362: DISABLE
28363: LD_INT 0
28365: PPUSH
28366: PPUSH
// begin enable ;
28367: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28368: LD_ADDR_VAR 0 2
28372: PUSH
28373: LD_INT 22
28375: PUSH
28376: LD_OWVAR 2
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: LD_INT 34
28390: PUSH
28391: LD_INT 11
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 34
28400: PUSH
28401: LD_INT 30
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: LIST
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PPUSH
28417: CALL_OW 69
28421: ST_TO_ADDR
// if not tmp then
28422: LD_VAR 0 2
28426: NOT
28427: IFFALSE 28431
// exit ;
28429: GO 28460
// for i in tmp do
28431: LD_ADDR_VAR 0 1
28435: PUSH
28436: LD_VAR 0 2
28440: PUSH
28441: FOR_IN
28442: IFFALSE 28458
// begin SetLives ( i , 0 ) ;
28444: LD_VAR 0 1
28448: PPUSH
28449: LD_INT 0
28451: PPUSH
28452: CALL_OW 234
// end ;
28456: GO 28441
28458: POP
28459: POP
// end ;
28460: PPOPN 2
28462: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28463: LD_EXP 51
28467: PUSH
28468: LD_EXP 61
28472: AND
28473: IFFALSE 28493
28475: GO 28477
28477: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28478: LD_INT 32
28480: PPUSH
28481: LD_OWVAR 2
28485: PPUSH
28486: LD_INT 0
28488: PPUSH
28489: CALL_OW 324
28493: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28494: LD_EXP 51
28498: PUSH
28499: LD_EXP 62
28503: AND
28504: IFFALSE 28685
28506: GO 28508
28508: DISABLE
28509: LD_INT 0
28511: PPUSH
28512: PPUSH
28513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28514: LD_ADDR_VAR 0 2
28518: PUSH
28519: LD_INT 22
28521: PUSH
28522: LD_OWVAR 2
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 33
28533: PUSH
28534: LD_INT 3
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PPUSH
28545: CALL_OW 69
28549: ST_TO_ADDR
// if not tmp then
28550: LD_VAR 0 2
28554: NOT
28555: IFFALSE 28559
// exit ;
28557: GO 28685
// side := 0 ;
28559: LD_ADDR_VAR 0 3
28563: PUSH
28564: LD_INT 0
28566: ST_TO_ADDR
// for i := 1 to 8 do
28567: LD_ADDR_VAR 0 1
28571: PUSH
28572: DOUBLE
28573: LD_INT 1
28575: DEC
28576: ST_TO_ADDR
28577: LD_INT 8
28579: PUSH
28580: FOR_TO
28581: IFFALSE 28629
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28583: LD_OWVAR 2
28587: PUSH
28588: LD_VAR 0 1
28592: NONEQUAL
28593: PUSH
28594: LD_OWVAR 2
28598: PPUSH
28599: LD_VAR 0 1
28603: PPUSH
28604: CALL_OW 81
28608: PUSH
28609: LD_INT 2
28611: EQUAL
28612: AND
28613: IFFALSE 28627
// begin side := i ;
28615: LD_ADDR_VAR 0 3
28619: PUSH
28620: LD_VAR 0 1
28624: ST_TO_ADDR
// break ;
28625: GO 28629
// end ;
28627: GO 28580
28629: POP
28630: POP
// if not side then
28631: LD_VAR 0 3
28635: NOT
28636: IFFALSE 28640
// exit ;
28638: GO 28685
// for i := 1 to tmp do
28640: LD_ADDR_VAR 0 1
28644: PUSH
28645: DOUBLE
28646: LD_INT 1
28648: DEC
28649: ST_TO_ADDR
28650: LD_VAR 0 2
28654: PUSH
28655: FOR_TO
28656: IFFALSE 28683
// if Prob ( 60 ) then
28658: LD_INT 60
28660: PPUSH
28661: CALL_OW 13
28665: IFFALSE 28681
// SetSide ( i , side ) ;
28667: LD_VAR 0 1
28671: PPUSH
28672: LD_VAR 0 3
28676: PPUSH
28677: CALL_OW 235
28681: GO 28655
28683: POP
28684: POP
// end ;
28685: PPOPN 3
28687: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28688: LD_EXP 51
28692: PUSH
28693: LD_EXP 64
28697: AND
28698: IFFALSE 28817
28700: GO 28702
28702: DISABLE
28703: LD_INT 0
28705: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28706: LD_ADDR_VAR 0 1
28710: PUSH
28711: LD_INT 22
28713: PUSH
28714: LD_OWVAR 2
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 21
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 3
28735: PUSH
28736: LD_INT 23
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: PPUSH
28755: CALL_OW 69
28759: PUSH
28760: FOR_IN
28761: IFFALSE 28815
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28763: LD_VAR 0 1
28767: PPUSH
28768: CALL_OW 257
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: LD_INT 3
28781: PUSH
28782: LD_INT 4
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: IN
28791: IFFALSE 28813
// SetClass ( un , rand ( 1 , 4 ) ) ;
28793: LD_VAR 0 1
28797: PPUSH
28798: LD_INT 1
28800: PPUSH
28801: LD_INT 4
28803: PPUSH
28804: CALL_OW 12
28808: PPUSH
28809: CALL_OW 336
28813: GO 28760
28815: POP
28816: POP
// end ;
28817: PPOPN 1
28819: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28820: LD_EXP 51
28824: PUSH
28825: LD_EXP 63
28829: AND
28830: IFFALSE 28909
28832: GO 28834
28834: DISABLE
28835: LD_INT 0
28837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28838: LD_ADDR_VAR 0 1
28842: PUSH
28843: LD_INT 22
28845: PUSH
28846: LD_OWVAR 2
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 21
28857: PUSH
28858: LD_INT 3
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PPUSH
28869: CALL_OW 69
28873: ST_TO_ADDR
// if not tmp then
28874: LD_VAR 0 1
28878: NOT
28879: IFFALSE 28883
// exit ;
28881: GO 28909
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28883: LD_VAR 0 1
28887: PUSH
28888: LD_INT 1
28890: PPUSH
28891: LD_VAR 0 1
28895: PPUSH
28896: CALL_OW 12
28900: ARRAY
28901: PPUSH
28902: LD_INT 100
28904: PPUSH
28905: CALL_OW 234
// end ;
28909: PPOPN 1
28911: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28912: LD_EXP 51
28916: PUSH
28917: LD_EXP 65
28921: AND
28922: IFFALSE 29020
28924: GO 28926
28926: DISABLE
28927: LD_INT 0
28929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28930: LD_ADDR_VAR 0 1
28934: PUSH
28935: LD_INT 22
28937: PUSH
28938: LD_OWVAR 2
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 21
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PPUSH
28961: CALL_OW 69
28965: ST_TO_ADDR
// if not tmp then
28966: LD_VAR 0 1
28970: NOT
28971: IFFALSE 28975
// exit ;
28973: GO 29020
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28975: LD_VAR 0 1
28979: PUSH
28980: LD_INT 1
28982: PPUSH
28983: LD_VAR 0 1
28987: PPUSH
28988: CALL_OW 12
28992: ARRAY
28993: PPUSH
28994: LD_INT 1
28996: PPUSH
28997: LD_INT 4
28999: PPUSH
29000: CALL_OW 12
29004: PPUSH
29005: LD_INT 3000
29007: PPUSH
29008: LD_INT 9000
29010: PPUSH
29011: CALL_OW 12
29015: PPUSH
29016: CALL_OW 492
// end ;
29020: PPOPN 1
29022: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29023: LD_EXP 51
29027: PUSH
29028: LD_EXP 66
29032: AND
29033: IFFALSE 29053
29035: GO 29037
29037: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29038: LD_INT 1
29040: PPUSH
29041: LD_OWVAR 2
29045: PPUSH
29046: LD_INT 0
29048: PPUSH
29049: CALL_OW 324
29053: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29054: LD_EXP 51
29058: PUSH
29059: LD_EXP 67
29063: AND
29064: IFFALSE 29147
29066: GO 29068
29068: DISABLE
29069: LD_INT 0
29071: PPUSH
29072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29073: LD_ADDR_VAR 0 2
29077: PUSH
29078: LD_INT 22
29080: PUSH
29081: LD_OWVAR 2
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 21
29092: PUSH
29093: LD_INT 3
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PPUSH
29104: CALL_OW 69
29108: ST_TO_ADDR
// if not tmp then
29109: LD_VAR 0 2
29113: NOT
29114: IFFALSE 29118
// exit ;
29116: GO 29147
// for i in tmp do
29118: LD_ADDR_VAR 0 1
29122: PUSH
29123: LD_VAR 0 2
29127: PUSH
29128: FOR_IN
29129: IFFALSE 29145
// SetBLevel ( i , 10 ) ;
29131: LD_VAR 0 1
29135: PPUSH
29136: LD_INT 10
29138: PPUSH
29139: CALL_OW 241
29143: GO 29128
29145: POP
29146: POP
// end ;
29147: PPOPN 2
29149: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29150: LD_EXP 51
29154: PUSH
29155: LD_EXP 68
29159: AND
29160: IFFALSE 29271
29162: GO 29164
29164: DISABLE
29165: LD_INT 0
29167: PPUSH
29168: PPUSH
29169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29170: LD_ADDR_VAR 0 3
29174: PUSH
29175: LD_INT 22
29177: PUSH
29178: LD_OWVAR 2
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 25
29189: PUSH
29190: LD_INT 1
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PPUSH
29201: CALL_OW 69
29205: ST_TO_ADDR
// if not tmp then
29206: LD_VAR 0 3
29210: NOT
29211: IFFALSE 29215
// exit ;
29213: GO 29271
// un := tmp [ rand ( 1 , tmp ) ] ;
29215: LD_ADDR_VAR 0 2
29219: PUSH
29220: LD_VAR 0 3
29224: PUSH
29225: LD_INT 1
29227: PPUSH
29228: LD_VAR 0 3
29232: PPUSH
29233: CALL_OW 12
29237: ARRAY
29238: ST_TO_ADDR
// if Crawls ( un ) then
29239: LD_VAR 0 2
29243: PPUSH
29244: CALL_OW 318
29248: IFFALSE 29259
// ComWalk ( un ) ;
29250: LD_VAR 0 2
29254: PPUSH
29255: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29259: LD_VAR 0 2
29263: PPUSH
29264: LD_INT 5
29266: PPUSH
29267: CALL_OW 336
// end ;
29271: PPOPN 3
29273: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29274: LD_EXP 51
29278: PUSH
29279: LD_EXP 69
29283: AND
29284: PUSH
29285: LD_OWVAR 67
29289: PUSH
29290: LD_INT 4
29292: LESS
29293: AND
29294: IFFALSE 29313
29296: GO 29298
29298: DISABLE
// begin Difficulty := Difficulty + 1 ;
29299: LD_ADDR_OWVAR 67
29303: PUSH
29304: LD_OWVAR 67
29308: PUSH
29309: LD_INT 1
29311: PLUS
29312: ST_TO_ADDR
// end ;
29313: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29314: LD_EXP 51
29318: PUSH
29319: LD_EXP 70
29323: AND
29324: IFFALSE 29427
29326: GO 29328
29328: DISABLE
29329: LD_INT 0
29331: PPUSH
// begin for i := 1 to 5 do
29332: LD_ADDR_VAR 0 1
29336: PUSH
29337: DOUBLE
29338: LD_INT 1
29340: DEC
29341: ST_TO_ADDR
29342: LD_INT 5
29344: PUSH
29345: FOR_TO
29346: IFFALSE 29425
// begin uc_nation := nation_nature ;
29348: LD_ADDR_OWVAR 21
29352: PUSH
29353: LD_INT 0
29355: ST_TO_ADDR
// uc_side := 0 ;
29356: LD_ADDR_OWVAR 20
29360: PUSH
29361: LD_INT 0
29363: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29364: LD_ADDR_OWVAR 29
29368: PUSH
29369: LD_INT 12
29371: PUSH
29372: LD_INT 12
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: ST_TO_ADDR
// hc_agressivity := 20 ;
29379: LD_ADDR_OWVAR 35
29383: PUSH
29384: LD_INT 20
29386: ST_TO_ADDR
// hc_class := class_tiger ;
29387: LD_ADDR_OWVAR 28
29391: PUSH
29392: LD_INT 14
29394: ST_TO_ADDR
// hc_gallery :=  ;
29395: LD_ADDR_OWVAR 33
29399: PUSH
29400: LD_STRING 
29402: ST_TO_ADDR
// hc_name :=  ;
29403: LD_ADDR_OWVAR 26
29407: PUSH
29408: LD_STRING 
29410: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29411: CALL_OW 44
29415: PPUSH
29416: LD_INT 0
29418: PPUSH
29419: CALL_OW 51
// end ;
29423: GO 29345
29425: POP
29426: POP
// end ;
29427: PPOPN 1
29429: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29430: LD_EXP 51
29434: PUSH
29435: LD_EXP 71
29439: AND
29440: IFFALSE 29449
29442: GO 29444
29444: DISABLE
// StreamSibBomb ;
29445: CALL 29450 0 0
29449: END
// export function StreamSibBomb ; var i , x , y ; begin
29450: LD_INT 0
29452: PPUSH
29453: PPUSH
29454: PPUSH
29455: PPUSH
// result := false ;
29456: LD_ADDR_VAR 0 1
29460: PUSH
29461: LD_INT 0
29463: ST_TO_ADDR
// for i := 1 to 16 do
29464: LD_ADDR_VAR 0 2
29468: PUSH
29469: DOUBLE
29470: LD_INT 1
29472: DEC
29473: ST_TO_ADDR
29474: LD_INT 16
29476: PUSH
29477: FOR_TO
29478: IFFALSE 29677
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29480: LD_ADDR_VAR 0 3
29484: PUSH
29485: LD_INT 10
29487: PUSH
29488: LD_INT 20
29490: PUSH
29491: LD_INT 30
29493: PUSH
29494: LD_INT 40
29496: PUSH
29497: LD_INT 50
29499: PUSH
29500: LD_INT 60
29502: PUSH
29503: LD_INT 70
29505: PUSH
29506: LD_INT 80
29508: PUSH
29509: LD_INT 90
29511: PUSH
29512: LD_INT 100
29514: PUSH
29515: LD_INT 110
29517: PUSH
29518: LD_INT 120
29520: PUSH
29521: LD_INT 130
29523: PUSH
29524: LD_INT 140
29526: PUSH
29527: LD_INT 150
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 1
29549: PPUSH
29550: LD_INT 15
29552: PPUSH
29553: CALL_OW 12
29557: ARRAY
29558: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29559: LD_ADDR_VAR 0 4
29563: PUSH
29564: LD_INT 10
29566: PUSH
29567: LD_INT 20
29569: PUSH
29570: LD_INT 30
29572: PUSH
29573: LD_INT 40
29575: PUSH
29576: LD_INT 50
29578: PUSH
29579: LD_INT 60
29581: PUSH
29582: LD_INT 70
29584: PUSH
29585: LD_INT 80
29587: PUSH
29588: LD_INT 90
29590: PUSH
29591: LD_INT 100
29593: PUSH
29594: LD_INT 110
29596: PUSH
29597: LD_INT 120
29599: PUSH
29600: LD_INT 130
29602: PUSH
29603: LD_INT 140
29605: PUSH
29606: LD_INT 150
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 1
29628: PPUSH
29629: LD_INT 15
29631: PPUSH
29632: CALL_OW 12
29636: ARRAY
29637: ST_TO_ADDR
// if ValidHex ( x , y ) then
29638: LD_VAR 0 3
29642: PPUSH
29643: LD_VAR 0 4
29647: PPUSH
29648: CALL_OW 488
29652: IFFALSE 29675
// begin result := [ x , y ] ;
29654: LD_ADDR_VAR 0 1
29658: PUSH
29659: LD_VAR 0 3
29663: PUSH
29664: LD_VAR 0 4
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: ST_TO_ADDR
// break ;
29673: GO 29677
// end ; end ;
29675: GO 29477
29677: POP
29678: POP
// if result then
29679: LD_VAR 0 1
29683: IFFALSE 29743
// begin ToLua ( playSibBomb() ) ;
29685: LD_STRING playSibBomb()
29687: PPUSH
29688: CALL_OW 559
// wait ( 0 0$14 ) ;
29692: LD_INT 490
29694: PPUSH
29695: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29699: LD_VAR 0 1
29703: PUSH
29704: LD_INT 1
29706: ARRAY
29707: PPUSH
29708: LD_VAR 0 1
29712: PUSH
29713: LD_INT 2
29715: ARRAY
29716: PPUSH
29717: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29721: LD_VAR 0 1
29725: PUSH
29726: LD_INT 1
29728: ARRAY
29729: PPUSH
29730: LD_VAR 0 1
29734: PUSH
29735: LD_INT 2
29737: ARRAY
29738: PPUSH
29739: CALL_OW 429
// end ; end ;
29743: LD_VAR 0 1
29747: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29748: LD_EXP 51
29752: PUSH
29753: LD_EXP 73
29757: AND
29758: IFFALSE 29770
29760: GO 29762
29762: DISABLE
// YouLost (  ) ;
29763: LD_STRING 
29765: PPUSH
29766: CALL_OW 104
29770: END
// every 0 0$1 trigger StreamModeActive and sFog do
29771: LD_EXP 51
29775: PUSH
29776: LD_EXP 72
29780: AND
29781: IFFALSE 29795
29783: GO 29785
29785: DISABLE
// FogOff ( your_side ) ;
29786: LD_OWVAR 2
29790: PPUSH
29791: CALL_OW 344
29795: END
// every 0 0$1 trigger StreamModeActive and sSun do
29796: LD_EXP 51
29800: PUSH
29801: LD_EXP 74
29805: AND
29806: IFFALSE 29834
29808: GO 29810
29810: DISABLE
// begin solar_recharge_percent := 0 ;
29811: LD_ADDR_OWVAR 79
29815: PUSH
29816: LD_INT 0
29818: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29819: LD_INT 10500
29821: PPUSH
29822: CALL_OW 67
// solar_recharge_percent := 100 ;
29826: LD_ADDR_OWVAR 79
29830: PUSH
29831: LD_INT 100
29833: ST_TO_ADDR
// end ;
29834: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29835: LD_EXP 51
29839: PUSH
29840: LD_EXP 75
29844: AND
29845: IFFALSE 30084
29847: GO 29849
29849: DISABLE
29850: LD_INT 0
29852: PPUSH
29853: PPUSH
29854: PPUSH
// begin tmp := [ ] ;
29855: LD_ADDR_VAR 0 3
29859: PUSH
29860: EMPTY
29861: ST_TO_ADDR
// for i := 1 to 6 do
29862: LD_ADDR_VAR 0 1
29866: PUSH
29867: DOUBLE
29868: LD_INT 1
29870: DEC
29871: ST_TO_ADDR
29872: LD_INT 6
29874: PUSH
29875: FOR_TO
29876: IFFALSE 29981
// begin uc_nation := nation_nature ;
29878: LD_ADDR_OWVAR 21
29882: PUSH
29883: LD_INT 0
29885: ST_TO_ADDR
// uc_side := 0 ;
29886: LD_ADDR_OWVAR 20
29890: PUSH
29891: LD_INT 0
29893: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29894: LD_ADDR_OWVAR 29
29898: PUSH
29899: LD_INT 12
29901: PUSH
29902: LD_INT 12
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: ST_TO_ADDR
// hc_agressivity := 20 ;
29909: LD_ADDR_OWVAR 35
29913: PUSH
29914: LD_INT 20
29916: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29917: LD_ADDR_OWVAR 28
29921: PUSH
29922: LD_INT 17
29924: ST_TO_ADDR
// hc_gallery :=  ;
29925: LD_ADDR_OWVAR 33
29929: PUSH
29930: LD_STRING 
29932: ST_TO_ADDR
// hc_name :=  ;
29933: LD_ADDR_OWVAR 26
29937: PUSH
29938: LD_STRING 
29940: ST_TO_ADDR
// un := CreateHuman ;
29941: LD_ADDR_VAR 0 2
29945: PUSH
29946: CALL_OW 44
29950: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29951: LD_VAR 0 2
29955: PPUSH
29956: LD_INT 1
29958: PPUSH
29959: CALL_OW 51
// tmp := tmp ^ un ;
29963: LD_ADDR_VAR 0 3
29967: PUSH
29968: LD_VAR 0 3
29972: PUSH
29973: LD_VAR 0 2
29977: ADD
29978: ST_TO_ADDR
// end ;
29979: GO 29875
29981: POP
29982: POP
// repeat wait ( 0 0$1 ) ;
29983: LD_INT 35
29985: PPUSH
29986: CALL_OW 67
// for un in tmp do
29990: LD_ADDR_VAR 0 2
29994: PUSH
29995: LD_VAR 0 3
29999: PUSH
30000: FOR_IN
30001: IFFALSE 30075
// begin if IsDead ( un ) then
30003: LD_VAR 0 2
30007: PPUSH
30008: CALL_OW 301
30012: IFFALSE 30032
// begin tmp := tmp diff un ;
30014: LD_ADDR_VAR 0 3
30018: PUSH
30019: LD_VAR 0 3
30023: PUSH
30024: LD_VAR 0 2
30028: DIFF
30029: ST_TO_ADDR
// continue ;
30030: GO 30000
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30032: LD_VAR 0 2
30036: PPUSH
30037: LD_INT 3
30039: PUSH
30040: LD_INT 22
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PPUSH
30054: CALL_OW 69
30058: PPUSH
30059: LD_VAR 0 2
30063: PPUSH
30064: CALL_OW 74
30068: PPUSH
30069: CALL_OW 115
// end ;
30073: GO 30000
30075: POP
30076: POP
// until not tmp ;
30077: LD_VAR 0 3
30081: NOT
30082: IFFALSE 29983
// end ;
30084: PPOPN 3
30086: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30087: LD_EXP 51
30091: PUSH
30092: LD_EXP 76
30096: AND
30097: IFFALSE 30151
30099: GO 30101
30101: DISABLE
// begin ToLua ( displayTroll(); ) ;
30102: LD_STRING displayTroll();
30104: PPUSH
30105: CALL_OW 559
// wait ( 3 3$00 ) ;
30109: LD_INT 6300
30111: PPUSH
30112: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30116: LD_STRING hideTroll();
30118: PPUSH
30119: CALL_OW 559
// wait ( 1 1$00 ) ;
30123: LD_INT 2100
30125: PPUSH
30126: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30130: LD_STRING displayTroll();
30132: PPUSH
30133: CALL_OW 559
// wait ( 1 1$00 ) ;
30137: LD_INT 2100
30139: PPUSH
30140: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30144: LD_STRING hideTroll();
30146: PPUSH
30147: CALL_OW 559
// end ;
30151: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30152: LD_EXP 51
30156: PUSH
30157: LD_EXP 77
30161: AND
30162: IFFALSE 30225
30164: GO 30166
30166: DISABLE
30167: LD_INT 0
30169: PPUSH
// begin p := 0 ;
30170: LD_ADDR_VAR 0 1
30174: PUSH
30175: LD_INT 0
30177: ST_TO_ADDR
// repeat game_speed := 1 ;
30178: LD_ADDR_OWVAR 65
30182: PUSH
30183: LD_INT 1
30185: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30186: LD_INT 35
30188: PPUSH
30189: CALL_OW 67
// p := p + 1 ;
30193: LD_ADDR_VAR 0 1
30197: PUSH
30198: LD_VAR 0 1
30202: PUSH
30203: LD_INT 1
30205: PLUS
30206: ST_TO_ADDR
// until p >= 60 ;
30207: LD_VAR 0 1
30211: PUSH
30212: LD_INT 60
30214: GREATEREQUAL
30215: IFFALSE 30178
// game_speed := 4 ;
30217: LD_ADDR_OWVAR 65
30221: PUSH
30222: LD_INT 4
30224: ST_TO_ADDR
// end ;
30225: PPOPN 1
30227: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30228: LD_EXP 51
30232: PUSH
30233: LD_EXP 78
30237: AND
30238: IFFALSE 30384
30240: GO 30242
30242: DISABLE
30243: LD_INT 0
30245: PPUSH
30246: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30247: LD_ADDR_VAR 0 1
30251: PUSH
30252: LD_INT 22
30254: PUSH
30255: LD_OWVAR 2
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 2
30266: PUSH
30267: LD_INT 30
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 30
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: LIST
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PPUSH
30296: CALL_OW 69
30300: ST_TO_ADDR
// if not depot then
30301: LD_VAR 0 1
30305: NOT
30306: IFFALSE 30310
// exit ;
30308: GO 30384
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30310: LD_ADDR_VAR 0 2
30314: PUSH
30315: LD_VAR 0 1
30319: PUSH
30320: LD_INT 1
30322: PPUSH
30323: LD_VAR 0 1
30327: PPUSH
30328: CALL_OW 12
30332: ARRAY
30333: PPUSH
30334: CALL_OW 274
30338: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30339: LD_VAR 0 2
30343: PPUSH
30344: LD_INT 1
30346: PPUSH
30347: LD_INT 0
30349: PPUSH
30350: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30354: LD_VAR 0 2
30358: PPUSH
30359: LD_INT 2
30361: PPUSH
30362: LD_INT 0
30364: PPUSH
30365: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30369: LD_VAR 0 2
30373: PPUSH
30374: LD_INT 3
30376: PPUSH
30377: LD_INT 0
30379: PPUSH
30380: CALL_OW 277
// end ;
30384: PPOPN 2
30386: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30387: LD_EXP 51
30391: PUSH
30392: LD_EXP 79
30396: AND
30397: IFFALSE 30494
30399: GO 30401
30401: DISABLE
30402: LD_INT 0
30404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30405: LD_ADDR_VAR 0 1
30409: PUSH
30410: LD_INT 22
30412: PUSH
30413: LD_OWVAR 2
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 21
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 3
30434: PUSH
30435: LD_INT 23
30437: PUSH
30438: LD_INT 0
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: LIST
30453: PPUSH
30454: CALL_OW 69
30458: ST_TO_ADDR
// if not tmp then
30459: LD_VAR 0 1
30463: NOT
30464: IFFALSE 30468
// exit ;
30466: GO 30494
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30468: LD_VAR 0 1
30472: PUSH
30473: LD_INT 1
30475: PPUSH
30476: LD_VAR 0 1
30480: PPUSH
30481: CALL_OW 12
30485: ARRAY
30486: PPUSH
30487: LD_INT 200
30489: PPUSH
30490: CALL_OW 234
// end ;
30494: PPOPN 1
30496: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30497: LD_EXP 51
30501: PUSH
30502: LD_EXP 80
30506: AND
30507: IFFALSE 30586
30509: GO 30511
30511: DISABLE
30512: LD_INT 0
30514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30515: LD_ADDR_VAR 0 1
30519: PUSH
30520: LD_INT 22
30522: PUSH
30523: LD_OWVAR 2
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 21
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PPUSH
30546: CALL_OW 69
30550: ST_TO_ADDR
// if not tmp then
30551: LD_VAR 0 1
30555: NOT
30556: IFFALSE 30560
// exit ;
30558: GO 30586
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30560: LD_VAR 0 1
30564: PUSH
30565: LD_INT 1
30567: PPUSH
30568: LD_VAR 0 1
30572: PPUSH
30573: CALL_OW 12
30577: ARRAY
30578: PPUSH
30579: LD_INT 60
30581: PPUSH
30582: CALL_OW 234
// end ;
30586: PPOPN 1
30588: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30589: LD_EXP 51
30593: PUSH
30594: LD_EXP 81
30598: AND
30599: IFFALSE 30698
30601: GO 30603
30603: DISABLE
30604: LD_INT 0
30606: PPUSH
30607: PPUSH
// begin enable ;
30608: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30609: LD_ADDR_VAR 0 1
30613: PUSH
30614: LD_INT 22
30616: PUSH
30617: LD_OWVAR 2
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 61
30628: PUSH
30629: EMPTY
30630: LIST
30631: PUSH
30632: LD_INT 33
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: LIST
30646: PPUSH
30647: CALL_OW 69
30651: ST_TO_ADDR
// if not tmp then
30652: LD_VAR 0 1
30656: NOT
30657: IFFALSE 30661
// exit ;
30659: GO 30698
// for i in tmp do
30661: LD_ADDR_VAR 0 2
30665: PUSH
30666: LD_VAR 0 1
30670: PUSH
30671: FOR_IN
30672: IFFALSE 30696
// if IsControledBy ( i ) then
30674: LD_VAR 0 2
30678: PPUSH
30679: CALL_OW 312
30683: IFFALSE 30694
// ComUnlink ( i ) ;
30685: LD_VAR 0 2
30689: PPUSH
30690: CALL_OW 136
30694: GO 30671
30696: POP
30697: POP
// end ;
30698: PPOPN 2
30700: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30701: LD_EXP 51
30705: PUSH
30706: LD_EXP 82
30710: AND
30711: IFFALSE 30851
30713: GO 30715
30715: DISABLE
30716: LD_INT 0
30718: PPUSH
30719: PPUSH
// begin ToLua ( displayPowell(); ) ;
30720: LD_STRING displayPowell();
30722: PPUSH
30723: CALL_OW 559
// uc_side := 0 ;
30727: LD_ADDR_OWVAR 20
30731: PUSH
30732: LD_INT 0
30734: ST_TO_ADDR
// uc_nation := 2 ;
30735: LD_ADDR_OWVAR 21
30739: PUSH
30740: LD_INT 2
30742: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30743: LD_ADDR_OWVAR 37
30747: PUSH
30748: LD_INT 14
30750: ST_TO_ADDR
// vc_engine := engine_siberite ;
30751: LD_ADDR_OWVAR 39
30755: PUSH
30756: LD_INT 3
30758: ST_TO_ADDR
// vc_control := control_apeman ;
30759: LD_ADDR_OWVAR 38
30763: PUSH
30764: LD_INT 5
30766: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30767: LD_ADDR_OWVAR 40
30771: PUSH
30772: LD_INT 29
30774: ST_TO_ADDR
// un := CreateVehicle ;
30775: LD_ADDR_VAR 0 2
30779: PUSH
30780: CALL_OW 45
30784: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30785: LD_VAR 0 2
30789: PPUSH
30790: LD_INT 1
30792: PPUSH
30793: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30797: LD_INT 35
30799: PPUSH
30800: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30804: LD_VAR 0 2
30808: PPUSH
30809: LD_INT 22
30811: PUSH
30812: LD_OWVAR 2
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PPUSH
30821: CALL_OW 69
30825: PPUSH
30826: LD_VAR 0 2
30830: PPUSH
30831: CALL_OW 74
30835: PPUSH
30836: CALL_OW 115
// until IsDead ( un ) ;
30840: LD_VAR 0 2
30844: PPUSH
30845: CALL_OW 301
30849: IFFALSE 30797
// end ;
30851: PPOPN 2
30853: END
// every 0 0$1 trigger StreamModeActive and sStu do
30854: LD_EXP 51
30858: PUSH
30859: LD_EXP 90
30863: AND
30864: IFFALSE 30880
30866: GO 30868
30868: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30869: LD_STRING displayStucuk();
30871: PPUSH
30872: CALL_OW 559
// ResetFog ;
30876: CALL_OW 335
// end ;
30880: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30881: LD_EXP 51
30885: PUSH
30886: LD_EXP 83
30890: AND
30891: IFFALSE 31032
30893: GO 30895
30895: DISABLE
30896: LD_INT 0
30898: PPUSH
30899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30900: LD_ADDR_VAR 0 2
30904: PUSH
30905: LD_INT 22
30907: PUSH
30908: LD_OWVAR 2
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 21
30919: PUSH
30920: LD_INT 1
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PPUSH
30931: CALL_OW 69
30935: ST_TO_ADDR
// if not tmp then
30936: LD_VAR 0 2
30940: NOT
30941: IFFALSE 30945
// exit ;
30943: GO 31032
// un := tmp [ rand ( 1 , tmp ) ] ;
30945: LD_ADDR_VAR 0 1
30949: PUSH
30950: LD_VAR 0 2
30954: PUSH
30955: LD_INT 1
30957: PPUSH
30958: LD_VAR 0 2
30962: PPUSH
30963: CALL_OW 12
30967: ARRAY
30968: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30969: LD_VAR 0 1
30973: PPUSH
30974: LD_INT 0
30976: PPUSH
30977: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30981: LD_VAR 0 1
30985: PPUSH
30986: LD_OWVAR 3
30990: PUSH
30991: LD_VAR 0 1
30995: DIFF
30996: PPUSH
30997: LD_VAR 0 1
31001: PPUSH
31002: CALL_OW 74
31006: PPUSH
31007: CALL_OW 115
// wait ( 0 0$20 ) ;
31011: LD_INT 700
31013: PPUSH
31014: CALL_OW 67
// SetSide ( un , your_side ) ;
31018: LD_VAR 0 1
31022: PPUSH
31023: LD_OWVAR 2
31027: PPUSH
31028: CALL_OW 235
// end ;
31032: PPOPN 2
31034: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31035: LD_EXP 51
31039: PUSH
31040: LD_EXP 84
31044: AND
31045: IFFALSE 31151
31047: GO 31049
31049: DISABLE
31050: LD_INT 0
31052: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31053: LD_ADDR_VAR 0 1
31057: PUSH
31058: LD_INT 22
31060: PUSH
31061: LD_OWVAR 2
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 2
31072: PUSH
31073: LD_INT 30
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 30
31085: PUSH
31086: LD_INT 1
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: LIST
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PPUSH
31102: CALL_OW 69
31106: ST_TO_ADDR
// if not depot then
31107: LD_VAR 0 1
31111: NOT
31112: IFFALSE 31116
// exit ;
31114: GO 31151
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31116: LD_VAR 0 1
31120: PUSH
31121: LD_INT 1
31123: ARRAY
31124: PPUSH
31125: CALL_OW 250
31129: PPUSH
31130: LD_VAR 0 1
31134: PUSH
31135: LD_INT 1
31137: ARRAY
31138: PPUSH
31139: CALL_OW 251
31143: PPUSH
31144: LD_INT 70
31146: PPUSH
31147: CALL_OW 495
// end ;
31151: PPOPN 1
31153: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31154: LD_EXP 51
31158: PUSH
31159: LD_EXP 85
31163: AND
31164: IFFALSE 31375
31166: GO 31168
31168: DISABLE
31169: LD_INT 0
31171: PPUSH
31172: PPUSH
31173: PPUSH
31174: PPUSH
31175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31176: LD_ADDR_VAR 0 5
31180: PUSH
31181: LD_INT 22
31183: PUSH
31184: LD_OWVAR 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 21
31195: PUSH
31196: LD_INT 1
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PPUSH
31207: CALL_OW 69
31211: ST_TO_ADDR
// if not tmp then
31212: LD_VAR 0 5
31216: NOT
31217: IFFALSE 31221
// exit ;
31219: GO 31375
// for i in tmp do
31221: LD_ADDR_VAR 0 1
31225: PUSH
31226: LD_VAR 0 5
31230: PUSH
31231: FOR_IN
31232: IFFALSE 31373
// begin d := rand ( 0 , 5 ) ;
31234: LD_ADDR_VAR 0 4
31238: PUSH
31239: LD_INT 0
31241: PPUSH
31242: LD_INT 5
31244: PPUSH
31245: CALL_OW 12
31249: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31250: LD_ADDR_VAR 0 2
31254: PUSH
31255: LD_VAR 0 1
31259: PPUSH
31260: CALL_OW 250
31264: PPUSH
31265: LD_VAR 0 4
31269: PPUSH
31270: LD_INT 3
31272: PPUSH
31273: LD_INT 12
31275: PPUSH
31276: CALL_OW 12
31280: PPUSH
31281: CALL_OW 272
31285: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31286: LD_ADDR_VAR 0 3
31290: PUSH
31291: LD_VAR 0 1
31295: PPUSH
31296: CALL_OW 251
31300: PPUSH
31301: LD_VAR 0 4
31305: PPUSH
31306: LD_INT 3
31308: PPUSH
31309: LD_INT 12
31311: PPUSH
31312: CALL_OW 12
31316: PPUSH
31317: CALL_OW 273
31321: ST_TO_ADDR
// if ValidHex ( x , y ) then
31322: LD_VAR 0 2
31326: PPUSH
31327: LD_VAR 0 3
31331: PPUSH
31332: CALL_OW 488
31336: IFFALSE 31371
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31338: LD_VAR 0 1
31342: PPUSH
31343: LD_VAR 0 2
31347: PPUSH
31348: LD_VAR 0 3
31352: PPUSH
31353: LD_INT 3
31355: PPUSH
31356: LD_INT 6
31358: PPUSH
31359: CALL_OW 12
31363: PPUSH
31364: LD_INT 1
31366: PPUSH
31367: CALL_OW 483
// end ;
31371: GO 31231
31373: POP
31374: POP
// end ;
31375: PPOPN 5
31377: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31378: LD_EXP 51
31382: PUSH
31383: LD_EXP 86
31387: AND
31388: IFFALSE 31482
31390: GO 31392
31392: DISABLE
31393: LD_INT 0
31395: PPUSH
31396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31397: LD_ADDR_VAR 0 2
31401: PUSH
31402: LD_INT 22
31404: PUSH
31405: LD_OWVAR 2
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 32
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 21
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: LIST
31438: PPUSH
31439: CALL_OW 69
31443: ST_TO_ADDR
// if not tmp then
31444: LD_VAR 0 2
31448: NOT
31449: IFFALSE 31453
// exit ;
31451: GO 31482
// for i in tmp do
31453: LD_ADDR_VAR 0 1
31457: PUSH
31458: LD_VAR 0 2
31462: PUSH
31463: FOR_IN
31464: IFFALSE 31480
// SetFuel ( i , 0 ) ;
31466: LD_VAR 0 1
31470: PPUSH
31471: LD_INT 0
31473: PPUSH
31474: CALL_OW 240
31478: GO 31463
31480: POP
31481: POP
// end ;
31482: PPOPN 2
31484: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31485: LD_EXP 51
31489: PUSH
31490: LD_EXP 87
31494: AND
31495: IFFALSE 31561
31497: GO 31499
31499: DISABLE
31500: LD_INT 0
31502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31503: LD_ADDR_VAR 0 1
31507: PUSH
31508: LD_INT 22
31510: PUSH
31511: LD_OWVAR 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 30
31522: PUSH
31523: LD_INT 29
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PPUSH
31534: CALL_OW 69
31538: ST_TO_ADDR
// if not tmp then
31539: LD_VAR 0 1
31543: NOT
31544: IFFALSE 31548
// exit ;
31546: GO 31561
// DestroyUnit ( tmp [ 1 ] ) ;
31548: LD_VAR 0 1
31552: PUSH
31553: LD_INT 1
31555: ARRAY
31556: PPUSH
31557: CALL_OW 65
// end ;
31561: PPOPN 1
31563: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31564: LD_EXP 51
31568: PUSH
31569: LD_EXP 89
31573: AND
31574: IFFALSE 31703
31576: GO 31578
31578: DISABLE
31579: LD_INT 0
31581: PPUSH
// begin uc_side := 0 ;
31582: LD_ADDR_OWVAR 20
31586: PUSH
31587: LD_INT 0
31589: ST_TO_ADDR
// uc_nation := nation_arabian ;
31590: LD_ADDR_OWVAR 21
31594: PUSH
31595: LD_INT 2
31597: ST_TO_ADDR
// hc_gallery :=  ;
31598: LD_ADDR_OWVAR 33
31602: PUSH
31603: LD_STRING 
31605: ST_TO_ADDR
// hc_name :=  ;
31606: LD_ADDR_OWVAR 26
31610: PUSH
31611: LD_STRING 
31613: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31614: LD_INT 1
31616: PPUSH
31617: LD_INT 11
31619: PPUSH
31620: LD_INT 10
31622: PPUSH
31623: CALL_OW 380
// un := CreateHuman ;
31627: LD_ADDR_VAR 0 1
31631: PUSH
31632: CALL_OW 44
31636: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31637: LD_VAR 0 1
31641: PPUSH
31642: LD_INT 1
31644: PPUSH
31645: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31649: LD_INT 35
31651: PPUSH
31652: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31656: LD_VAR 0 1
31660: PPUSH
31661: LD_INT 22
31663: PUSH
31664: LD_OWVAR 2
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PPUSH
31673: CALL_OW 69
31677: PPUSH
31678: LD_VAR 0 1
31682: PPUSH
31683: CALL_OW 74
31687: PPUSH
31688: CALL_OW 115
// until IsDead ( un ) ;
31692: LD_VAR 0 1
31696: PPUSH
31697: CALL_OW 301
31701: IFFALSE 31649
// end ;
31703: PPOPN 1
31705: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31706: LD_EXP 51
31710: PUSH
31711: LD_EXP 91
31715: AND
31716: IFFALSE 31728
31718: GO 31720
31720: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31721: LD_STRING earthquake(getX(game), 0, 32)
31723: PPUSH
31724: CALL_OW 559
31728: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31729: LD_EXP 51
31733: PUSH
31734: LD_EXP 92
31738: AND
31739: IFFALSE 31830
31741: GO 31743
31743: DISABLE
31744: LD_INT 0
31746: PPUSH
// begin enable ;
31747: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31748: LD_ADDR_VAR 0 1
31752: PUSH
31753: LD_INT 22
31755: PUSH
31756: LD_OWVAR 2
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 21
31767: PUSH
31768: LD_INT 2
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 33
31777: PUSH
31778: LD_INT 3
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: PPUSH
31790: CALL_OW 69
31794: ST_TO_ADDR
// if not tmp then
31795: LD_VAR 0 1
31799: NOT
31800: IFFALSE 31804
// exit ;
31802: GO 31830
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31804: LD_VAR 0 1
31808: PUSH
31809: LD_INT 1
31811: PPUSH
31812: LD_VAR 0 1
31816: PPUSH
31817: CALL_OW 12
31821: ARRAY
31822: PPUSH
31823: LD_INT 1
31825: PPUSH
31826: CALL_OW 234
// end ;
31830: PPOPN 1
31832: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31833: LD_EXP 51
31837: PUSH
31838: LD_EXP 93
31842: AND
31843: IFFALSE 31984
31845: GO 31847
31847: DISABLE
31848: LD_INT 0
31850: PPUSH
31851: PPUSH
31852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31853: LD_ADDR_VAR 0 3
31857: PUSH
31858: LD_INT 22
31860: PUSH
31861: LD_OWVAR 2
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 25
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PPUSH
31884: CALL_OW 69
31888: ST_TO_ADDR
// if not tmp then
31889: LD_VAR 0 3
31893: NOT
31894: IFFALSE 31898
// exit ;
31896: GO 31984
// un := tmp [ rand ( 1 , tmp ) ] ;
31898: LD_ADDR_VAR 0 2
31902: PUSH
31903: LD_VAR 0 3
31907: PUSH
31908: LD_INT 1
31910: PPUSH
31911: LD_VAR 0 3
31915: PPUSH
31916: CALL_OW 12
31920: ARRAY
31921: ST_TO_ADDR
// if Crawls ( un ) then
31922: LD_VAR 0 2
31926: PPUSH
31927: CALL_OW 318
31931: IFFALSE 31942
// ComWalk ( un ) ;
31933: LD_VAR 0 2
31937: PPUSH
31938: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31942: LD_VAR 0 2
31946: PPUSH
31947: LD_INT 9
31949: PPUSH
31950: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31954: LD_INT 28
31956: PPUSH
31957: LD_OWVAR 2
31961: PPUSH
31962: LD_INT 2
31964: PPUSH
31965: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31969: LD_INT 29
31971: PPUSH
31972: LD_OWVAR 2
31976: PPUSH
31977: LD_INT 2
31979: PPUSH
31980: CALL_OW 322
// end ;
31984: PPOPN 3
31986: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31987: LD_EXP 51
31991: PUSH
31992: LD_EXP 94
31996: AND
31997: IFFALSE 32108
31999: GO 32001
32001: DISABLE
32002: LD_INT 0
32004: PPUSH
32005: PPUSH
32006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32007: LD_ADDR_VAR 0 3
32011: PUSH
32012: LD_INT 22
32014: PUSH
32015: LD_OWVAR 2
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 25
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PPUSH
32038: CALL_OW 69
32042: ST_TO_ADDR
// if not tmp then
32043: LD_VAR 0 3
32047: NOT
32048: IFFALSE 32052
// exit ;
32050: GO 32108
// un := tmp [ rand ( 1 , tmp ) ] ;
32052: LD_ADDR_VAR 0 2
32056: PUSH
32057: LD_VAR 0 3
32061: PUSH
32062: LD_INT 1
32064: PPUSH
32065: LD_VAR 0 3
32069: PPUSH
32070: CALL_OW 12
32074: ARRAY
32075: ST_TO_ADDR
// if Crawls ( un ) then
32076: LD_VAR 0 2
32080: PPUSH
32081: CALL_OW 318
32085: IFFALSE 32096
// ComWalk ( un ) ;
32087: LD_VAR 0 2
32091: PPUSH
32092: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32096: LD_VAR 0 2
32100: PPUSH
32101: LD_INT 8
32103: PPUSH
32104: CALL_OW 336
// end ;
32108: PPOPN 3
32110: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32111: LD_EXP 51
32115: PUSH
32116: LD_EXP 95
32120: AND
32121: IFFALSE 32265
32123: GO 32125
32125: DISABLE
32126: LD_INT 0
32128: PPUSH
32129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32130: LD_ADDR_VAR 0 2
32134: PUSH
32135: LD_INT 22
32137: PUSH
32138: LD_OWVAR 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 21
32149: PUSH
32150: LD_INT 2
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 2
32159: PUSH
32160: LD_INT 34
32162: PUSH
32163: LD_INT 12
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 34
32172: PUSH
32173: LD_INT 51
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 34
32182: PUSH
32183: LD_INT 32
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: PPUSH
32201: CALL_OW 69
32205: ST_TO_ADDR
// if not tmp then
32206: LD_VAR 0 2
32210: NOT
32211: IFFALSE 32215
// exit ;
32213: GO 32265
// for i in tmp do
32215: LD_ADDR_VAR 0 1
32219: PUSH
32220: LD_VAR 0 2
32224: PUSH
32225: FOR_IN
32226: IFFALSE 32263
// if GetCargo ( i , mat_artifact ) = 0 then
32228: LD_VAR 0 1
32232: PPUSH
32233: LD_INT 4
32235: PPUSH
32236: CALL_OW 289
32240: PUSH
32241: LD_INT 0
32243: EQUAL
32244: IFFALSE 32261
// SetCargo ( i , mat_siberit , 100 ) ;
32246: LD_VAR 0 1
32250: PPUSH
32251: LD_INT 3
32253: PPUSH
32254: LD_INT 100
32256: PPUSH
32257: CALL_OW 290
32261: GO 32225
32263: POP
32264: POP
// end ;
32265: PPOPN 2
32267: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32268: LD_EXP 51
32272: PUSH
32273: LD_EXP 96
32277: AND
32278: IFFALSE 32461
32280: GO 32282
32282: DISABLE
32283: LD_INT 0
32285: PPUSH
32286: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32287: LD_ADDR_VAR 0 2
32291: PUSH
32292: LD_INT 22
32294: PUSH
32295: LD_OWVAR 2
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PPUSH
32304: CALL_OW 69
32308: ST_TO_ADDR
// if not tmp then
32309: LD_VAR 0 2
32313: NOT
32314: IFFALSE 32318
// exit ;
32316: GO 32461
// for i := 1 to 2 do
32318: LD_ADDR_VAR 0 1
32322: PUSH
32323: DOUBLE
32324: LD_INT 1
32326: DEC
32327: ST_TO_ADDR
32328: LD_INT 2
32330: PUSH
32331: FOR_TO
32332: IFFALSE 32459
// begin uc_side := your_side ;
32334: LD_ADDR_OWVAR 20
32338: PUSH
32339: LD_OWVAR 2
32343: ST_TO_ADDR
// uc_nation := nation_american ;
32344: LD_ADDR_OWVAR 21
32348: PUSH
32349: LD_INT 1
32351: ST_TO_ADDR
// vc_chassis := us_morphling ;
32352: LD_ADDR_OWVAR 37
32356: PUSH
32357: LD_INT 5
32359: ST_TO_ADDR
// vc_engine := engine_siberite ;
32360: LD_ADDR_OWVAR 39
32364: PUSH
32365: LD_INT 3
32367: ST_TO_ADDR
// vc_control := control_computer ;
32368: LD_ADDR_OWVAR 38
32372: PUSH
32373: LD_INT 3
32375: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32376: LD_ADDR_OWVAR 40
32380: PUSH
32381: LD_INT 10
32383: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32384: LD_VAR 0 2
32388: PUSH
32389: LD_INT 1
32391: ARRAY
32392: PPUSH
32393: CALL_OW 310
32397: NOT
32398: IFFALSE 32445
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32400: CALL_OW 45
32404: PPUSH
32405: LD_VAR 0 2
32409: PUSH
32410: LD_INT 1
32412: ARRAY
32413: PPUSH
32414: CALL_OW 250
32418: PPUSH
32419: LD_VAR 0 2
32423: PUSH
32424: LD_INT 1
32426: ARRAY
32427: PPUSH
32428: CALL_OW 251
32432: PPUSH
32433: LD_INT 12
32435: PPUSH
32436: LD_INT 1
32438: PPUSH
32439: CALL_OW 50
32443: GO 32457
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32445: CALL_OW 45
32449: PPUSH
32450: LD_INT 1
32452: PPUSH
32453: CALL_OW 51
// end ;
32457: GO 32331
32459: POP
32460: POP
// end ;
32461: PPOPN 2
32463: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32464: LD_EXP 51
32468: PUSH
32469: LD_EXP 97
32473: AND
32474: IFFALSE 32696
32476: GO 32478
32478: DISABLE
32479: LD_INT 0
32481: PPUSH
32482: PPUSH
32483: PPUSH
32484: PPUSH
32485: PPUSH
32486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32487: LD_ADDR_VAR 0 6
32491: PUSH
32492: LD_INT 22
32494: PUSH
32495: LD_OWVAR 2
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 21
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 3
32516: PUSH
32517: LD_INT 23
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: PPUSH
32536: CALL_OW 69
32540: ST_TO_ADDR
// if not tmp then
32541: LD_VAR 0 6
32545: NOT
32546: IFFALSE 32550
// exit ;
32548: GO 32696
// s1 := rand ( 1 , 4 ) ;
32550: LD_ADDR_VAR 0 2
32554: PUSH
32555: LD_INT 1
32557: PPUSH
32558: LD_INT 4
32560: PPUSH
32561: CALL_OW 12
32565: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32566: LD_ADDR_VAR 0 4
32570: PUSH
32571: LD_VAR 0 6
32575: PUSH
32576: LD_INT 1
32578: ARRAY
32579: PPUSH
32580: LD_VAR 0 2
32584: PPUSH
32585: CALL_OW 259
32589: ST_TO_ADDR
// if s1 = 1 then
32590: LD_VAR 0 2
32594: PUSH
32595: LD_INT 1
32597: EQUAL
32598: IFFALSE 32618
// s2 := rand ( 2 , 4 ) else
32600: LD_ADDR_VAR 0 3
32604: PUSH
32605: LD_INT 2
32607: PPUSH
32608: LD_INT 4
32610: PPUSH
32611: CALL_OW 12
32615: ST_TO_ADDR
32616: GO 32626
// s2 := 1 ;
32618: LD_ADDR_VAR 0 3
32622: PUSH
32623: LD_INT 1
32625: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32626: LD_ADDR_VAR 0 5
32630: PUSH
32631: LD_VAR 0 6
32635: PUSH
32636: LD_INT 1
32638: ARRAY
32639: PPUSH
32640: LD_VAR 0 3
32644: PPUSH
32645: CALL_OW 259
32649: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32650: LD_VAR 0 6
32654: PUSH
32655: LD_INT 1
32657: ARRAY
32658: PPUSH
32659: LD_VAR 0 2
32663: PPUSH
32664: LD_VAR 0 5
32668: PPUSH
32669: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32673: LD_VAR 0 6
32677: PUSH
32678: LD_INT 1
32680: ARRAY
32681: PPUSH
32682: LD_VAR 0 3
32686: PPUSH
32687: LD_VAR 0 4
32691: PPUSH
32692: CALL_OW 237
// end ;
32696: PPOPN 6
32698: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32699: LD_EXP 51
32703: PUSH
32704: LD_EXP 98
32708: AND
32709: IFFALSE 32788
32711: GO 32713
32713: DISABLE
32714: LD_INT 0
32716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32717: LD_ADDR_VAR 0 1
32721: PUSH
32722: LD_INT 22
32724: PUSH
32725: LD_OWVAR 2
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 30
32736: PUSH
32737: LD_INT 3
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PPUSH
32748: CALL_OW 69
32752: ST_TO_ADDR
// if not tmp then
32753: LD_VAR 0 1
32757: NOT
32758: IFFALSE 32762
// exit ;
32760: GO 32788
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32762: LD_VAR 0 1
32766: PUSH
32767: LD_INT 1
32769: PPUSH
32770: LD_VAR 0 1
32774: PPUSH
32775: CALL_OW 12
32779: ARRAY
32780: PPUSH
32781: LD_INT 1
32783: PPUSH
32784: CALL_OW 234
// end ;
32788: PPOPN 1
32790: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32791: LD_EXP 51
32795: PUSH
32796: LD_EXP 99
32800: AND
32801: IFFALSE 32913
32803: GO 32805
32805: DISABLE
32806: LD_INT 0
32808: PPUSH
32809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32810: LD_ADDR_VAR 0 2
32814: PUSH
32815: LD_INT 22
32817: PUSH
32818: LD_OWVAR 2
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: LD_INT 30
32832: PUSH
32833: LD_INT 27
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 30
32842: PUSH
32843: LD_INT 26
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 30
32852: PUSH
32853: LD_INT 28
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PPUSH
32870: CALL_OW 69
32874: ST_TO_ADDR
// if not tmp then
32875: LD_VAR 0 2
32879: NOT
32880: IFFALSE 32884
// exit ;
32882: GO 32913
// for i in tmp do
32884: LD_ADDR_VAR 0 1
32888: PUSH
32889: LD_VAR 0 2
32893: PUSH
32894: FOR_IN
32895: IFFALSE 32911
// SetLives ( i , 1 ) ;
32897: LD_VAR 0 1
32901: PPUSH
32902: LD_INT 1
32904: PPUSH
32905: CALL_OW 234
32909: GO 32894
32911: POP
32912: POP
// end ;
32913: PPOPN 2
32915: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32916: LD_EXP 51
32920: PUSH
32921: LD_EXP 100
32925: AND
32926: IFFALSE 33213
32928: GO 32930
32930: DISABLE
32931: LD_INT 0
32933: PPUSH
32934: PPUSH
32935: PPUSH
// begin i := rand ( 1 , 7 ) ;
32936: LD_ADDR_VAR 0 1
32940: PUSH
32941: LD_INT 1
32943: PPUSH
32944: LD_INT 7
32946: PPUSH
32947: CALL_OW 12
32951: ST_TO_ADDR
// case i of 1 :
32952: LD_VAR 0 1
32956: PUSH
32957: LD_INT 1
32959: DOUBLE
32960: EQUAL
32961: IFTRUE 32965
32963: GO 32975
32965: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32966: LD_STRING earthquake(getX(game), 0, 32)
32968: PPUSH
32969: CALL_OW 559
32973: GO 33213
32975: LD_INT 2
32977: DOUBLE
32978: EQUAL
32979: IFTRUE 32983
32981: GO 32997
32983: POP
// begin ToLua ( displayStucuk(); ) ;
32984: LD_STRING displayStucuk();
32986: PPUSH
32987: CALL_OW 559
// ResetFog ;
32991: CALL_OW 335
// end ; 3 :
32995: GO 33213
32997: LD_INT 3
32999: DOUBLE
33000: EQUAL
33001: IFTRUE 33005
33003: GO 33109
33005: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33006: LD_ADDR_VAR 0 2
33010: PUSH
33011: LD_INT 22
33013: PUSH
33014: LD_OWVAR 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 25
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PPUSH
33037: CALL_OW 69
33041: ST_TO_ADDR
// if not tmp then
33042: LD_VAR 0 2
33046: NOT
33047: IFFALSE 33051
// exit ;
33049: GO 33213
// un := tmp [ rand ( 1 , tmp ) ] ;
33051: LD_ADDR_VAR 0 3
33055: PUSH
33056: LD_VAR 0 2
33060: PUSH
33061: LD_INT 1
33063: PPUSH
33064: LD_VAR 0 2
33068: PPUSH
33069: CALL_OW 12
33073: ARRAY
33074: ST_TO_ADDR
// if Crawls ( un ) then
33075: LD_VAR 0 3
33079: PPUSH
33080: CALL_OW 318
33084: IFFALSE 33095
// ComWalk ( un ) ;
33086: LD_VAR 0 3
33090: PPUSH
33091: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33095: LD_VAR 0 3
33099: PPUSH
33100: LD_INT 8
33102: PPUSH
33103: CALL_OW 336
// end ; 4 :
33107: GO 33213
33109: LD_INT 4
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33191
33117: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33118: LD_ADDR_VAR 0 2
33122: PUSH
33123: LD_INT 22
33125: PUSH
33126: LD_OWVAR 2
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 30
33137: PUSH
33138: LD_INT 29
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PPUSH
33149: CALL_OW 69
33153: ST_TO_ADDR
// if not tmp then
33154: LD_VAR 0 2
33158: NOT
33159: IFFALSE 33163
// exit ;
33161: GO 33213
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33163: LD_VAR 0 2
33167: PUSH
33168: LD_INT 1
33170: ARRAY
33171: PPUSH
33172: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33176: LD_VAR 0 2
33180: PUSH
33181: LD_INT 1
33183: ARRAY
33184: PPUSH
33185: CALL_OW 65
// end ; 5 .. 7 :
33189: GO 33213
33191: LD_INT 5
33193: DOUBLE
33194: GREATEREQUAL
33195: IFFALSE 33203
33197: LD_INT 7
33199: DOUBLE
33200: LESSEQUAL
33201: IFTRUE 33205
33203: GO 33212
33205: POP
// StreamSibBomb ; end ;
33206: CALL 29450 0 0
33210: GO 33213
33212: POP
// end ;
33213: PPOPN 3
33215: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33216: LD_EXP 51
33220: PUSH
33221: LD_EXP 101
33225: AND
33226: IFFALSE 33382
33228: GO 33230
33230: DISABLE
33231: LD_INT 0
33233: PPUSH
33234: PPUSH
33235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33236: LD_ADDR_VAR 0 2
33240: PUSH
33241: LD_INT 81
33243: PUSH
33244: LD_OWVAR 2
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 2
33255: PUSH
33256: LD_INT 21
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 21
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: LIST
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PPUSH
33285: CALL_OW 69
33289: ST_TO_ADDR
// if not tmp then
33290: LD_VAR 0 2
33294: NOT
33295: IFFALSE 33299
// exit ;
33297: GO 33382
// p := 0 ;
33299: LD_ADDR_VAR 0 3
33303: PUSH
33304: LD_INT 0
33306: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33307: LD_INT 35
33309: PPUSH
33310: CALL_OW 67
// p := p + 1 ;
33314: LD_ADDR_VAR 0 3
33318: PUSH
33319: LD_VAR 0 3
33323: PUSH
33324: LD_INT 1
33326: PLUS
33327: ST_TO_ADDR
// for i in tmp do
33328: LD_ADDR_VAR 0 1
33332: PUSH
33333: LD_VAR 0 2
33337: PUSH
33338: FOR_IN
33339: IFFALSE 33370
// if GetLives ( i ) < 1000 then
33341: LD_VAR 0 1
33345: PPUSH
33346: CALL_OW 256
33350: PUSH
33351: LD_INT 1000
33353: LESS
33354: IFFALSE 33368
// SetLives ( i , 1000 ) ;
33356: LD_VAR 0 1
33360: PPUSH
33361: LD_INT 1000
33363: PPUSH
33364: CALL_OW 234
33368: GO 33338
33370: POP
33371: POP
// until p > 20 ;
33372: LD_VAR 0 3
33376: PUSH
33377: LD_INT 20
33379: GREATER
33380: IFFALSE 33307
// end ;
33382: PPOPN 3
33384: END
// every 0 0$1 trigger StreamModeActive and sTime do
33385: LD_EXP 51
33389: PUSH
33390: LD_EXP 102
33394: AND
33395: IFFALSE 33430
33397: GO 33399
33399: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33400: LD_INT 28
33402: PPUSH
33403: LD_OWVAR 2
33407: PPUSH
33408: LD_INT 2
33410: PPUSH
33411: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33415: LD_INT 30
33417: PPUSH
33418: LD_OWVAR 2
33422: PPUSH
33423: LD_INT 2
33425: PPUSH
33426: CALL_OW 322
// end ;
33430: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33431: LD_EXP 51
33435: PUSH
33436: LD_EXP 103
33440: AND
33441: IFFALSE 33562
33443: GO 33445
33445: DISABLE
33446: LD_INT 0
33448: PPUSH
33449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33450: LD_ADDR_VAR 0 2
33454: PUSH
33455: LD_INT 22
33457: PUSH
33458: LD_OWVAR 2
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 21
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 3
33479: PUSH
33480: LD_INT 23
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: LIST
33498: PPUSH
33499: CALL_OW 69
33503: ST_TO_ADDR
// if not tmp then
33504: LD_VAR 0 2
33508: NOT
33509: IFFALSE 33513
// exit ;
33511: GO 33562
// for i in tmp do
33513: LD_ADDR_VAR 0 1
33517: PUSH
33518: LD_VAR 0 2
33522: PUSH
33523: FOR_IN
33524: IFFALSE 33560
// begin if Crawls ( i ) then
33526: LD_VAR 0 1
33530: PPUSH
33531: CALL_OW 318
33535: IFFALSE 33546
// ComWalk ( i ) ;
33537: LD_VAR 0 1
33541: PPUSH
33542: CALL_OW 138
// SetClass ( i , 2 ) ;
33546: LD_VAR 0 1
33550: PPUSH
33551: LD_INT 2
33553: PPUSH
33554: CALL_OW 336
// end ;
33558: GO 33523
33560: POP
33561: POP
// end ;
33562: PPOPN 2
33564: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33565: LD_EXP 51
33569: PUSH
33570: LD_EXP 104
33574: AND
33575: IFFALSE 33863
33577: GO 33579
33579: DISABLE
33580: LD_INT 0
33582: PPUSH
33583: PPUSH
33584: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33585: LD_OWVAR 2
33589: PPUSH
33590: LD_INT 9
33592: PPUSH
33593: LD_INT 1
33595: PPUSH
33596: LD_INT 1
33598: PPUSH
33599: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33603: LD_INT 9
33605: PPUSH
33606: LD_OWVAR 2
33610: PPUSH
33611: CALL_OW 343
// uc_side := 9 ;
33615: LD_ADDR_OWVAR 20
33619: PUSH
33620: LD_INT 9
33622: ST_TO_ADDR
// uc_nation := 2 ;
33623: LD_ADDR_OWVAR 21
33627: PUSH
33628: LD_INT 2
33630: ST_TO_ADDR
// hc_name := Dark Warrior ;
33631: LD_ADDR_OWVAR 26
33635: PUSH
33636: LD_STRING Dark Warrior
33638: ST_TO_ADDR
// hc_gallery :=  ;
33639: LD_ADDR_OWVAR 33
33643: PUSH
33644: LD_STRING 
33646: ST_TO_ADDR
// hc_noskilllimit := true ;
33647: LD_ADDR_OWVAR 76
33651: PUSH
33652: LD_INT 1
33654: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33655: LD_ADDR_OWVAR 31
33659: PUSH
33660: LD_INT 30
33662: PUSH
33663: LD_INT 30
33665: PUSH
33666: LD_INT 30
33668: PUSH
33669: LD_INT 30
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: ST_TO_ADDR
// un := CreateHuman ;
33678: LD_ADDR_VAR 0 3
33682: PUSH
33683: CALL_OW 44
33687: ST_TO_ADDR
// hc_noskilllimit := false ;
33688: LD_ADDR_OWVAR 76
33692: PUSH
33693: LD_INT 0
33695: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33696: LD_VAR 0 3
33700: PPUSH
33701: LD_INT 1
33703: PPUSH
33704: CALL_OW 51
// ToLua ( playRanger() ) ;
33708: LD_STRING playRanger()
33710: PPUSH
33711: CALL_OW 559
// p := 0 ;
33715: LD_ADDR_VAR 0 2
33719: PUSH
33720: LD_INT 0
33722: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33723: LD_INT 35
33725: PPUSH
33726: CALL_OW 67
// p := p + 1 ;
33730: LD_ADDR_VAR 0 2
33734: PUSH
33735: LD_VAR 0 2
33739: PUSH
33740: LD_INT 1
33742: PLUS
33743: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33744: LD_VAR 0 3
33748: PPUSH
33749: CALL_OW 256
33753: PUSH
33754: LD_INT 1000
33756: LESS
33757: IFFALSE 33771
// SetLives ( un , 1000 ) ;
33759: LD_VAR 0 3
33763: PPUSH
33764: LD_INT 1000
33766: PPUSH
33767: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33771: LD_VAR 0 3
33775: PPUSH
33776: LD_INT 81
33778: PUSH
33779: LD_OWVAR 2
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 91
33790: PUSH
33791: LD_VAR 0 3
33795: PUSH
33796: LD_INT 30
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PPUSH
33808: CALL_OW 69
33812: PPUSH
33813: LD_VAR 0 3
33817: PPUSH
33818: CALL_OW 74
33822: PPUSH
33823: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33827: LD_VAR 0 2
33831: PUSH
33832: LD_INT 80
33834: GREATER
33835: PUSH
33836: LD_VAR 0 3
33840: PPUSH
33841: CALL_OW 301
33845: OR
33846: IFFALSE 33723
// if un then
33848: LD_VAR 0 3
33852: IFFALSE 33863
// RemoveUnit ( un ) ;
33854: LD_VAR 0 3
33858: PPUSH
33859: CALL_OW 64
// end ;
33863: PPOPN 3
33865: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33866: LD_EXP 105
33870: IFFALSE 33986
33872: GO 33874
33874: DISABLE
33875: LD_INT 0
33877: PPUSH
33878: PPUSH
33879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33880: LD_ADDR_VAR 0 2
33884: PUSH
33885: LD_INT 81
33887: PUSH
33888: LD_OWVAR 2
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 21
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PPUSH
33911: CALL_OW 69
33915: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33916: LD_STRING playComputer()
33918: PPUSH
33919: CALL_OW 559
// if not tmp then
33923: LD_VAR 0 2
33927: NOT
33928: IFFALSE 33932
// exit ;
33930: GO 33986
// for i in tmp do
33932: LD_ADDR_VAR 0 1
33936: PUSH
33937: LD_VAR 0 2
33941: PUSH
33942: FOR_IN
33943: IFFALSE 33984
// for j := 1 to 4 do
33945: LD_ADDR_VAR 0 3
33949: PUSH
33950: DOUBLE
33951: LD_INT 1
33953: DEC
33954: ST_TO_ADDR
33955: LD_INT 4
33957: PUSH
33958: FOR_TO
33959: IFFALSE 33980
// SetSkill ( i , j , 10 ) ;
33961: LD_VAR 0 1
33965: PPUSH
33966: LD_VAR 0 3
33970: PPUSH
33971: LD_INT 10
33973: PPUSH
33974: CALL_OW 237
33978: GO 33958
33980: POP
33981: POP
33982: GO 33942
33984: POP
33985: POP
// end ;
33986: PPOPN 3
33988: END
// every 0 0$1 trigger s30 do var i , tmp ;
33989: LD_EXP 106
33993: IFFALSE 34062
33995: GO 33997
33997: DISABLE
33998: LD_INT 0
34000: PPUSH
34001: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34002: LD_ADDR_VAR 0 2
34006: PUSH
34007: LD_INT 22
34009: PUSH
34010: LD_OWVAR 2
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PPUSH
34019: CALL_OW 69
34023: ST_TO_ADDR
// if not tmp then
34024: LD_VAR 0 2
34028: NOT
34029: IFFALSE 34033
// exit ;
34031: GO 34062
// for i in tmp do
34033: LD_ADDR_VAR 0 1
34037: PUSH
34038: LD_VAR 0 2
34042: PUSH
34043: FOR_IN
34044: IFFALSE 34060
// SetLives ( i , 300 ) ;
34046: LD_VAR 0 1
34050: PPUSH
34051: LD_INT 300
34053: PPUSH
34054: CALL_OW 234
34058: GO 34043
34060: POP
34061: POP
// end ;
34062: PPOPN 2
34064: END
// every 0 0$1 trigger s60 do var i , tmp ;
34065: LD_EXP 107
34069: IFFALSE 34138
34071: GO 34073
34073: DISABLE
34074: LD_INT 0
34076: PPUSH
34077: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34078: LD_ADDR_VAR 0 2
34082: PUSH
34083: LD_INT 22
34085: PUSH
34086: LD_OWVAR 2
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PPUSH
34095: CALL_OW 69
34099: ST_TO_ADDR
// if not tmp then
34100: LD_VAR 0 2
34104: NOT
34105: IFFALSE 34109
// exit ;
34107: GO 34138
// for i in tmp do
34109: LD_ADDR_VAR 0 1
34113: PUSH
34114: LD_VAR 0 2
34118: PUSH
34119: FOR_IN
34120: IFFALSE 34136
// SetLives ( i , 600 ) ;
34122: LD_VAR 0 1
34126: PPUSH
34127: LD_INT 600
34129: PPUSH
34130: CALL_OW 234
34134: GO 34119
34136: POP
34137: POP
// end ;
34138: PPOPN 2
34140: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34141: LD_INT 0
34143: PPUSH
// case cmd of 301 :
34144: LD_VAR 0 1
34148: PUSH
34149: LD_INT 301
34151: DOUBLE
34152: EQUAL
34153: IFTRUE 34157
34155: GO 34189
34157: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34158: LD_VAR 0 6
34162: PPUSH
34163: LD_VAR 0 7
34167: PPUSH
34168: LD_VAR 0 8
34172: PPUSH
34173: LD_VAR 0 4
34177: PPUSH
34178: LD_VAR 0 5
34182: PPUSH
34183: CALL 35398 0 5
34187: GO 34310
34189: LD_INT 302
34191: DOUBLE
34192: EQUAL
34193: IFTRUE 34197
34195: GO 34234
34197: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34198: LD_VAR 0 6
34202: PPUSH
34203: LD_VAR 0 7
34207: PPUSH
34208: LD_VAR 0 8
34212: PPUSH
34213: LD_VAR 0 9
34217: PPUSH
34218: LD_VAR 0 4
34222: PPUSH
34223: LD_VAR 0 5
34227: PPUSH
34228: CALL 35489 0 6
34232: GO 34310
34234: LD_INT 303
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34242
34240: GO 34279
34242: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34243: LD_VAR 0 6
34247: PPUSH
34248: LD_VAR 0 7
34252: PPUSH
34253: LD_VAR 0 8
34257: PPUSH
34258: LD_VAR 0 9
34262: PPUSH
34263: LD_VAR 0 4
34267: PPUSH
34268: LD_VAR 0 5
34272: PPUSH
34273: CALL 34315 0 6
34277: GO 34310
34279: LD_INT 304
34281: DOUBLE
34282: EQUAL
34283: IFTRUE 34287
34285: GO 34309
34287: POP
// hHackTeleport ( unit , x , y ) ; end ;
34288: LD_VAR 0 2
34292: PPUSH
34293: LD_VAR 0 4
34297: PPUSH
34298: LD_VAR 0 5
34302: PPUSH
34303: CALL 36082 0 3
34307: GO 34310
34309: POP
// end ;
34310: LD_VAR 0 12
34314: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34315: LD_INT 0
34317: PPUSH
34318: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34319: LD_VAR 0 1
34323: PUSH
34324: LD_INT 1
34326: LESS
34327: PUSH
34328: LD_VAR 0 1
34332: PUSH
34333: LD_INT 3
34335: GREATER
34336: OR
34337: PUSH
34338: LD_VAR 0 5
34342: PPUSH
34343: LD_VAR 0 6
34347: PPUSH
34348: CALL_OW 428
34352: OR
34353: IFFALSE 34357
// exit ;
34355: GO 35085
// uc_side := your_side ;
34357: LD_ADDR_OWVAR 20
34361: PUSH
34362: LD_OWVAR 2
34366: ST_TO_ADDR
// uc_nation := nation ;
34367: LD_ADDR_OWVAR 21
34371: PUSH
34372: LD_VAR 0 1
34376: ST_TO_ADDR
// bc_level = 1 ;
34377: LD_ADDR_OWVAR 43
34381: PUSH
34382: LD_INT 1
34384: ST_TO_ADDR
// case btype of 1 :
34385: LD_VAR 0 2
34389: PUSH
34390: LD_INT 1
34392: DOUBLE
34393: EQUAL
34394: IFTRUE 34398
34396: GO 34409
34398: POP
// bc_type := b_depot ; 2 :
34399: LD_ADDR_OWVAR 42
34403: PUSH
34404: LD_INT 0
34406: ST_TO_ADDR
34407: GO 35029
34409: LD_INT 2
34411: DOUBLE
34412: EQUAL
34413: IFTRUE 34417
34415: GO 34428
34417: POP
// bc_type := b_warehouse ; 3 :
34418: LD_ADDR_OWVAR 42
34422: PUSH
34423: LD_INT 1
34425: ST_TO_ADDR
34426: GO 35029
34428: LD_INT 3
34430: DOUBLE
34431: EQUAL
34432: IFTRUE 34436
34434: GO 34447
34436: POP
// bc_type := b_lab ; 4 .. 9 :
34437: LD_ADDR_OWVAR 42
34441: PUSH
34442: LD_INT 6
34444: ST_TO_ADDR
34445: GO 35029
34447: LD_INT 4
34449: DOUBLE
34450: GREATEREQUAL
34451: IFFALSE 34459
34453: LD_INT 9
34455: DOUBLE
34456: LESSEQUAL
34457: IFTRUE 34461
34459: GO 34521
34461: POP
// begin bc_type := b_lab_half ;
34462: LD_ADDR_OWVAR 42
34466: PUSH
34467: LD_INT 7
34469: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34470: LD_ADDR_OWVAR 44
34474: PUSH
34475: LD_INT 10
34477: PUSH
34478: LD_INT 11
34480: PUSH
34481: LD_INT 12
34483: PUSH
34484: LD_INT 15
34486: PUSH
34487: LD_INT 14
34489: PUSH
34490: LD_INT 13
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: PUSH
34501: LD_VAR 0 2
34505: PUSH
34506: LD_INT 3
34508: MINUS
34509: ARRAY
34510: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34511: LD_ADDR_OWVAR 45
34515: PUSH
34516: LD_INT 9
34518: ST_TO_ADDR
// end ; 10 .. 13 :
34519: GO 35029
34521: LD_INT 10
34523: DOUBLE
34524: GREATEREQUAL
34525: IFFALSE 34533
34527: LD_INT 13
34529: DOUBLE
34530: LESSEQUAL
34531: IFTRUE 34535
34533: GO 34612
34535: POP
// begin bc_type := b_lab_full ;
34536: LD_ADDR_OWVAR 42
34540: PUSH
34541: LD_INT 8
34543: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34544: LD_ADDR_OWVAR 44
34548: PUSH
34549: LD_INT 10
34551: PUSH
34552: LD_INT 12
34554: PUSH
34555: LD_INT 14
34557: PUSH
34558: LD_INT 13
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: PUSH
34567: LD_VAR 0 2
34571: PUSH
34572: LD_INT 9
34574: MINUS
34575: ARRAY
34576: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34577: LD_ADDR_OWVAR 45
34581: PUSH
34582: LD_INT 11
34584: PUSH
34585: LD_INT 15
34587: PUSH
34588: LD_INT 12
34590: PUSH
34591: LD_INT 15
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: PUSH
34600: LD_VAR 0 2
34604: PUSH
34605: LD_INT 9
34607: MINUS
34608: ARRAY
34609: ST_TO_ADDR
// end ; 14 :
34610: GO 35029
34612: LD_INT 14
34614: DOUBLE
34615: EQUAL
34616: IFTRUE 34620
34618: GO 34631
34620: POP
// bc_type := b_workshop ; 15 :
34621: LD_ADDR_OWVAR 42
34625: PUSH
34626: LD_INT 2
34628: ST_TO_ADDR
34629: GO 35029
34631: LD_INT 15
34633: DOUBLE
34634: EQUAL
34635: IFTRUE 34639
34637: GO 34650
34639: POP
// bc_type := b_factory ; 16 :
34640: LD_ADDR_OWVAR 42
34644: PUSH
34645: LD_INT 3
34647: ST_TO_ADDR
34648: GO 35029
34650: LD_INT 16
34652: DOUBLE
34653: EQUAL
34654: IFTRUE 34658
34656: GO 34669
34658: POP
// bc_type := b_ext_gun ; 17 :
34659: LD_ADDR_OWVAR 42
34663: PUSH
34664: LD_INT 17
34666: ST_TO_ADDR
34667: GO 35029
34669: LD_INT 17
34671: DOUBLE
34672: EQUAL
34673: IFTRUE 34677
34675: GO 34705
34677: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34678: LD_ADDR_OWVAR 42
34682: PUSH
34683: LD_INT 19
34685: PUSH
34686: LD_INT 23
34688: PUSH
34689: LD_INT 19
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: PUSH
34697: LD_VAR 0 1
34701: ARRAY
34702: ST_TO_ADDR
34703: GO 35029
34705: LD_INT 18
34707: DOUBLE
34708: EQUAL
34709: IFTRUE 34713
34711: GO 34724
34713: POP
// bc_type := b_ext_radar ; 19 :
34714: LD_ADDR_OWVAR 42
34718: PUSH
34719: LD_INT 20
34721: ST_TO_ADDR
34722: GO 35029
34724: LD_INT 19
34726: DOUBLE
34727: EQUAL
34728: IFTRUE 34732
34730: GO 34743
34732: POP
// bc_type := b_ext_radio ; 20 :
34733: LD_ADDR_OWVAR 42
34737: PUSH
34738: LD_INT 22
34740: ST_TO_ADDR
34741: GO 35029
34743: LD_INT 20
34745: DOUBLE
34746: EQUAL
34747: IFTRUE 34751
34749: GO 34762
34751: POP
// bc_type := b_ext_siberium ; 21 :
34752: LD_ADDR_OWVAR 42
34756: PUSH
34757: LD_INT 21
34759: ST_TO_ADDR
34760: GO 35029
34762: LD_INT 21
34764: DOUBLE
34765: EQUAL
34766: IFTRUE 34770
34768: GO 34781
34770: POP
// bc_type := b_ext_computer ; 22 :
34771: LD_ADDR_OWVAR 42
34775: PUSH
34776: LD_INT 24
34778: ST_TO_ADDR
34779: GO 35029
34781: LD_INT 22
34783: DOUBLE
34784: EQUAL
34785: IFTRUE 34789
34787: GO 34800
34789: POP
// bc_type := b_ext_track ; 23 :
34790: LD_ADDR_OWVAR 42
34794: PUSH
34795: LD_INT 16
34797: ST_TO_ADDR
34798: GO 35029
34800: LD_INT 23
34802: DOUBLE
34803: EQUAL
34804: IFTRUE 34808
34806: GO 34819
34808: POP
// bc_type := b_ext_laser ; 24 :
34809: LD_ADDR_OWVAR 42
34813: PUSH
34814: LD_INT 25
34816: ST_TO_ADDR
34817: GO 35029
34819: LD_INT 24
34821: DOUBLE
34822: EQUAL
34823: IFTRUE 34827
34825: GO 34838
34827: POP
// bc_type := b_control_tower ; 25 :
34828: LD_ADDR_OWVAR 42
34832: PUSH
34833: LD_INT 36
34835: ST_TO_ADDR
34836: GO 35029
34838: LD_INT 25
34840: DOUBLE
34841: EQUAL
34842: IFTRUE 34846
34844: GO 34857
34846: POP
// bc_type := b_breastwork ; 26 :
34847: LD_ADDR_OWVAR 42
34851: PUSH
34852: LD_INT 31
34854: ST_TO_ADDR
34855: GO 35029
34857: LD_INT 26
34859: DOUBLE
34860: EQUAL
34861: IFTRUE 34865
34863: GO 34876
34865: POP
// bc_type := b_bunker ; 27 :
34866: LD_ADDR_OWVAR 42
34870: PUSH
34871: LD_INT 32
34873: ST_TO_ADDR
34874: GO 35029
34876: LD_INT 27
34878: DOUBLE
34879: EQUAL
34880: IFTRUE 34884
34882: GO 34895
34884: POP
// bc_type := b_turret ; 28 :
34885: LD_ADDR_OWVAR 42
34889: PUSH
34890: LD_INT 33
34892: ST_TO_ADDR
34893: GO 35029
34895: LD_INT 28
34897: DOUBLE
34898: EQUAL
34899: IFTRUE 34903
34901: GO 34914
34903: POP
// bc_type := b_armoury ; 29 :
34904: LD_ADDR_OWVAR 42
34908: PUSH
34909: LD_INT 4
34911: ST_TO_ADDR
34912: GO 35029
34914: LD_INT 29
34916: DOUBLE
34917: EQUAL
34918: IFTRUE 34922
34920: GO 34933
34922: POP
// bc_type := b_barracks ; 30 :
34923: LD_ADDR_OWVAR 42
34927: PUSH
34928: LD_INT 5
34930: ST_TO_ADDR
34931: GO 35029
34933: LD_INT 30
34935: DOUBLE
34936: EQUAL
34937: IFTRUE 34941
34939: GO 34952
34941: POP
// bc_type := b_solar_power ; 31 :
34942: LD_ADDR_OWVAR 42
34946: PUSH
34947: LD_INT 27
34949: ST_TO_ADDR
34950: GO 35029
34952: LD_INT 31
34954: DOUBLE
34955: EQUAL
34956: IFTRUE 34960
34958: GO 34971
34960: POP
// bc_type := b_oil_power ; 32 :
34961: LD_ADDR_OWVAR 42
34965: PUSH
34966: LD_INT 26
34968: ST_TO_ADDR
34969: GO 35029
34971: LD_INT 32
34973: DOUBLE
34974: EQUAL
34975: IFTRUE 34979
34977: GO 34990
34979: POP
// bc_type := b_siberite_power ; 33 :
34980: LD_ADDR_OWVAR 42
34984: PUSH
34985: LD_INT 28
34987: ST_TO_ADDR
34988: GO 35029
34990: LD_INT 33
34992: DOUBLE
34993: EQUAL
34994: IFTRUE 34998
34996: GO 35009
34998: POP
// bc_type := b_oil_mine ; 34 :
34999: LD_ADDR_OWVAR 42
35003: PUSH
35004: LD_INT 29
35006: ST_TO_ADDR
35007: GO 35029
35009: LD_INT 34
35011: DOUBLE
35012: EQUAL
35013: IFTRUE 35017
35015: GO 35028
35017: POP
// bc_type := b_siberite_mine ; end ;
35018: LD_ADDR_OWVAR 42
35022: PUSH
35023: LD_INT 30
35025: ST_TO_ADDR
35026: GO 35029
35028: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35029: LD_ADDR_VAR 0 8
35033: PUSH
35034: LD_VAR 0 5
35038: PPUSH
35039: LD_VAR 0 6
35043: PPUSH
35044: LD_VAR 0 3
35048: PPUSH
35049: CALL_OW 47
35053: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35054: LD_OWVAR 42
35058: PUSH
35059: LD_INT 32
35061: PUSH
35062: LD_INT 33
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: IN
35069: IFFALSE 35085
// PlaceWeaponTurret ( b , weapon ) ;
35071: LD_VAR 0 8
35075: PPUSH
35076: LD_VAR 0 4
35080: PPUSH
35081: CALL_OW 431
// end ;
35085: LD_VAR 0 7
35089: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35090: LD_INT 0
35092: PPUSH
35093: PPUSH
35094: PPUSH
35095: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35096: LD_ADDR_VAR 0 4
35100: PUSH
35101: LD_INT 22
35103: PUSH
35104: LD_OWVAR 2
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 2
35115: PUSH
35116: LD_INT 30
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 30
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PPUSH
35145: CALL_OW 69
35149: ST_TO_ADDR
// if not tmp then
35150: LD_VAR 0 4
35154: NOT
35155: IFFALSE 35159
// exit ;
35157: GO 35218
// for i in tmp do
35159: LD_ADDR_VAR 0 2
35163: PUSH
35164: LD_VAR 0 4
35168: PUSH
35169: FOR_IN
35170: IFFALSE 35216
// for j = 1 to 3 do
35172: LD_ADDR_VAR 0 3
35176: PUSH
35177: DOUBLE
35178: LD_INT 1
35180: DEC
35181: ST_TO_ADDR
35182: LD_INT 3
35184: PUSH
35185: FOR_TO
35186: IFFALSE 35212
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35188: LD_VAR 0 2
35192: PPUSH
35193: CALL_OW 274
35197: PPUSH
35198: LD_VAR 0 3
35202: PPUSH
35203: LD_INT 99999
35205: PPUSH
35206: CALL_OW 277
35210: GO 35185
35212: POP
35213: POP
35214: GO 35169
35216: POP
35217: POP
// end ;
35218: LD_VAR 0 1
35222: RET
// export function hHackSetLevel10 ; var i , j ; begin
35223: LD_INT 0
35225: PPUSH
35226: PPUSH
35227: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35228: LD_ADDR_VAR 0 2
35232: PUSH
35233: LD_INT 21
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PPUSH
35243: CALL_OW 69
35247: PUSH
35248: FOR_IN
35249: IFFALSE 35301
// if IsSelected ( i ) then
35251: LD_VAR 0 2
35255: PPUSH
35256: CALL_OW 306
35260: IFFALSE 35299
// begin for j := 1 to 4 do
35262: LD_ADDR_VAR 0 3
35266: PUSH
35267: DOUBLE
35268: LD_INT 1
35270: DEC
35271: ST_TO_ADDR
35272: LD_INT 4
35274: PUSH
35275: FOR_TO
35276: IFFALSE 35297
// SetSkill ( i , j , 10 ) ;
35278: LD_VAR 0 2
35282: PPUSH
35283: LD_VAR 0 3
35287: PPUSH
35288: LD_INT 10
35290: PPUSH
35291: CALL_OW 237
35295: GO 35275
35297: POP
35298: POP
// end ;
35299: GO 35248
35301: POP
35302: POP
// end ;
35303: LD_VAR 0 1
35307: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35308: LD_INT 0
35310: PPUSH
35311: PPUSH
35312: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35313: LD_ADDR_VAR 0 2
35317: PUSH
35318: LD_INT 22
35320: PUSH
35321: LD_OWVAR 2
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 21
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PPUSH
35344: CALL_OW 69
35348: PUSH
35349: FOR_IN
35350: IFFALSE 35391
// begin for j := 1 to 4 do
35352: LD_ADDR_VAR 0 3
35356: PUSH
35357: DOUBLE
35358: LD_INT 1
35360: DEC
35361: ST_TO_ADDR
35362: LD_INT 4
35364: PUSH
35365: FOR_TO
35366: IFFALSE 35387
// SetSkill ( i , j , 10 ) ;
35368: LD_VAR 0 2
35372: PPUSH
35373: LD_VAR 0 3
35377: PPUSH
35378: LD_INT 10
35380: PPUSH
35381: CALL_OW 237
35385: GO 35365
35387: POP
35388: POP
// end ;
35389: GO 35349
35391: POP
35392: POP
// end ;
35393: LD_VAR 0 1
35397: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35398: LD_INT 0
35400: PPUSH
// uc_side := your_side ;
35401: LD_ADDR_OWVAR 20
35405: PUSH
35406: LD_OWVAR 2
35410: ST_TO_ADDR
// uc_nation := nation ;
35411: LD_ADDR_OWVAR 21
35415: PUSH
35416: LD_VAR 0 1
35420: ST_TO_ADDR
// InitHc ;
35421: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35425: LD_INT 0
35427: PPUSH
35428: LD_VAR 0 2
35432: PPUSH
35433: LD_VAR 0 3
35437: PPUSH
35438: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35442: LD_VAR 0 4
35446: PPUSH
35447: LD_VAR 0 5
35451: PPUSH
35452: CALL_OW 428
35456: PUSH
35457: LD_INT 0
35459: EQUAL
35460: IFFALSE 35484
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35462: CALL_OW 44
35466: PPUSH
35467: LD_VAR 0 4
35471: PPUSH
35472: LD_VAR 0 5
35476: PPUSH
35477: LD_INT 1
35479: PPUSH
35480: CALL_OW 48
// end ;
35484: LD_VAR 0 6
35488: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35489: LD_INT 0
35491: PPUSH
35492: PPUSH
// uc_side := your_side ;
35493: LD_ADDR_OWVAR 20
35497: PUSH
35498: LD_OWVAR 2
35502: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35503: LD_VAR 0 1
35507: PUSH
35508: LD_INT 1
35510: PUSH
35511: LD_INT 2
35513: PUSH
35514: LD_INT 3
35516: PUSH
35517: LD_INT 4
35519: PUSH
35520: LD_INT 5
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: IN
35530: IFFALSE 35542
// uc_nation := nation_american else
35532: LD_ADDR_OWVAR 21
35536: PUSH
35537: LD_INT 1
35539: ST_TO_ADDR
35540: GO 35585
// if chassis in [ 11 , 12 , 13 , 14 ] then
35542: LD_VAR 0 1
35546: PUSH
35547: LD_INT 11
35549: PUSH
35550: LD_INT 12
35552: PUSH
35553: LD_INT 13
35555: PUSH
35556: LD_INT 14
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: IN
35565: IFFALSE 35577
// uc_nation := nation_arabian else
35567: LD_ADDR_OWVAR 21
35571: PUSH
35572: LD_INT 2
35574: ST_TO_ADDR
35575: GO 35585
// uc_nation := nation_russian ;
35577: LD_ADDR_OWVAR 21
35581: PUSH
35582: LD_INT 3
35584: ST_TO_ADDR
// vc_chassis := chassis ;
35585: LD_ADDR_OWVAR 37
35589: PUSH
35590: LD_VAR 0 1
35594: ST_TO_ADDR
// vc_engine := engine ;
35595: LD_ADDR_OWVAR 39
35599: PUSH
35600: LD_VAR 0 2
35604: ST_TO_ADDR
// vc_control := control ;
35605: LD_ADDR_OWVAR 38
35609: PUSH
35610: LD_VAR 0 3
35614: ST_TO_ADDR
// vc_weapon := weapon ;
35615: LD_ADDR_OWVAR 40
35619: PUSH
35620: LD_VAR 0 4
35624: ST_TO_ADDR
// un := CreateVehicle ;
35625: LD_ADDR_VAR 0 8
35629: PUSH
35630: CALL_OW 45
35634: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35635: LD_VAR 0 8
35639: PPUSH
35640: LD_INT 0
35642: PPUSH
35643: LD_INT 5
35645: PPUSH
35646: CALL_OW 12
35650: PPUSH
35651: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35655: LD_VAR 0 8
35659: PPUSH
35660: LD_VAR 0 5
35664: PPUSH
35665: LD_VAR 0 6
35669: PPUSH
35670: LD_INT 1
35672: PPUSH
35673: CALL_OW 48
// end ;
35677: LD_VAR 0 7
35681: RET
// export hInvincible ; every 1 do
35682: GO 35684
35684: DISABLE
// hInvincible := [ ] ;
35685: LD_ADDR_EXP 108
35689: PUSH
35690: EMPTY
35691: ST_TO_ADDR
35692: END
// every 10 do var i ;
35693: GO 35695
35695: DISABLE
35696: LD_INT 0
35698: PPUSH
// begin enable ;
35699: ENABLE
// if not hInvincible then
35700: LD_EXP 108
35704: NOT
35705: IFFALSE 35709
// exit ;
35707: GO 35753
// for i in hInvincible do
35709: LD_ADDR_VAR 0 1
35713: PUSH
35714: LD_EXP 108
35718: PUSH
35719: FOR_IN
35720: IFFALSE 35751
// if GetLives ( i ) < 1000 then
35722: LD_VAR 0 1
35726: PPUSH
35727: CALL_OW 256
35731: PUSH
35732: LD_INT 1000
35734: LESS
35735: IFFALSE 35749
// SetLives ( i , 1000 ) ;
35737: LD_VAR 0 1
35741: PPUSH
35742: LD_INT 1000
35744: PPUSH
35745: CALL_OW 234
35749: GO 35719
35751: POP
35752: POP
// end ;
35753: PPOPN 1
35755: END
// export function hHackInvincible ; var i ; begin
35756: LD_INT 0
35758: PPUSH
35759: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35760: LD_ADDR_VAR 0 2
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: LD_INT 21
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 21
35780: PUSH
35781: LD_INT 2
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: PPUSH
35793: CALL_OW 69
35797: PUSH
35798: FOR_IN
35799: IFFALSE 35860
// if IsSelected ( i ) then
35801: LD_VAR 0 2
35805: PPUSH
35806: CALL_OW 306
35810: IFFALSE 35858
// begin if i in hInvincible then
35812: LD_VAR 0 2
35816: PUSH
35817: LD_EXP 108
35821: IN
35822: IFFALSE 35842
// hInvincible := hInvincible diff i else
35824: LD_ADDR_EXP 108
35828: PUSH
35829: LD_EXP 108
35833: PUSH
35834: LD_VAR 0 2
35838: DIFF
35839: ST_TO_ADDR
35840: GO 35858
// hInvincible := hInvincible union i ;
35842: LD_ADDR_EXP 108
35846: PUSH
35847: LD_EXP 108
35851: PUSH
35852: LD_VAR 0 2
35856: UNION
35857: ST_TO_ADDR
// end ;
35858: GO 35798
35860: POP
35861: POP
// end ;
35862: LD_VAR 0 1
35866: RET
// export function hHackInvisible ; var i , j ; begin
35867: LD_INT 0
35869: PPUSH
35870: PPUSH
35871: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35872: LD_ADDR_VAR 0 2
35876: PUSH
35877: LD_INT 21
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PPUSH
35887: CALL_OW 69
35891: PUSH
35892: FOR_IN
35893: IFFALSE 35917
// if IsSelected ( i ) then
35895: LD_VAR 0 2
35899: PPUSH
35900: CALL_OW 306
35904: IFFALSE 35915
// ComForceInvisible ( i ) ;
35906: LD_VAR 0 2
35910: PPUSH
35911: CALL_OW 496
35915: GO 35892
35917: POP
35918: POP
// end ;
35919: LD_VAR 0 1
35923: RET
// export function hHackChangeYourSide ; begin
35924: LD_INT 0
35926: PPUSH
// if your_side = 8 then
35927: LD_OWVAR 2
35931: PUSH
35932: LD_INT 8
35934: EQUAL
35935: IFFALSE 35947
// your_side := 0 else
35937: LD_ADDR_OWVAR 2
35941: PUSH
35942: LD_INT 0
35944: ST_TO_ADDR
35945: GO 35961
// your_side := your_side + 1 ;
35947: LD_ADDR_OWVAR 2
35951: PUSH
35952: LD_OWVAR 2
35956: PUSH
35957: LD_INT 1
35959: PLUS
35960: ST_TO_ADDR
// end ;
35961: LD_VAR 0 1
35965: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35966: LD_INT 0
35968: PPUSH
35969: PPUSH
35970: PPUSH
// for i in all_units do
35971: LD_ADDR_VAR 0 2
35975: PUSH
35976: LD_OWVAR 3
35980: PUSH
35981: FOR_IN
35982: IFFALSE 36060
// if IsSelected ( i ) then
35984: LD_VAR 0 2
35988: PPUSH
35989: CALL_OW 306
35993: IFFALSE 36058
// begin j := GetSide ( i ) ;
35995: LD_ADDR_VAR 0 3
35999: PUSH
36000: LD_VAR 0 2
36004: PPUSH
36005: CALL_OW 255
36009: ST_TO_ADDR
// if j = 8 then
36010: LD_VAR 0 3
36014: PUSH
36015: LD_INT 8
36017: EQUAL
36018: IFFALSE 36030
// j := 0 else
36020: LD_ADDR_VAR 0 3
36024: PUSH
36025: LD_INT 0
36027: ST_TO_ADDR
36028: GO 36044
// j := j + 1 ;
36030: LD_ADDR_VAR 0 3
36034: PUSH
36035: LD_VAR 0 3
36039: PUSH
36040: LD_INT 1
36042: PLUS
36043: ST_TO_ADDR
// SetSide ( i , j ) ;
36044: LD_VAR 0 2
36048: PPUSH
36049: LD_VAR 0 3
36053: PPUSH
36054: CALL_OW 235
// end ;
36058: GO 35981
36060: POP
36061: POP
// end ;
36062: LD_VAR 0 1
36066: RET
// export function hHackFog ; begin
36067: LD_INT 0
36069: PPUSH
// FogOff ( true ) ;
36070: LD_INT 1
36072: PPUSH
36073: CALL_OW 344
// end ;
36077: LD_VAR 0 1
36081: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36082: LD_INT 0
36084: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36085: LD_VAR 0 1
36089: PPUSH
36090: LD_VAR 0 2
36094: PPUSH
36095: LD_VAR 0 3
36099: PPUSH
36100: LD_INT 1
36102: PPUSH
36103: LD_INT 1
36105: PPUSH
36106: CALL_OW 483
// CenterOnXY ( x , y ) ;
36110: LD_VAR 0 2
36114: PPUSH
36115: LD_VAR 0 3
36119: PPUSH
36120: CALL_OW 84
// end ;
36124: LD_VAR 0 4
36128: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36129: LD_INT 0
36131: PPUSH
36132: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36133: LD_VAR 0 1
36137: NOT
36138: PUSH
36139: LD_VAR 0 2
36143: PPUSH
36144: LD_VAR 0 3
36148: PPUSH
36149: CALL_OW 488
36153: NOT
36154: OR
36155: PUSH
36156: LD_VAR 0 1
36160: PPUSH
36161: CALL_OW 266
36165: PUSH
36166: LD_INT 3
36168: NONEQUAL
36169: PUSH
36170: LD_VAR 0 1
36174: PPUSH
36175: CALL_OW 247
36179: PUSH
36180: LD_INT 1
36182: EQUAL
36183: NOT
36184: AND
36185: OR
36186: IFFALSE 36190
// exit ;
36188: GO 36339
// if GetType ( factory ) = unit_human then
36190: LD_VAR 0 1
36194: PPUSH
36195: CALL_OW 247
36199: PUSH
36200: LD_INT 1
36202: EQUAL
36203: IFFALSE 36220
// factory := IsInUnit ( factory ) ;
36205: LD_ADDR_VAR 0 1
36209: PUSH
36210: LD_VAR 0 1
36214: PPUSH
36215: CALL_OW 310
36219: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36220: LD_VAR 0 1
36224: PPUSH
36225: CALL_OW 266
36229: PUSH
36230: LD_INT 3
36232: NONEQUAL
36233: IFFALSE 36237
// exit ;
36235: GO 36339
// if HexInfo ( x , y ) = factory then
36237: LD_VAR 0 2
36241: PPUSH
36242: LD_VAR 0 3
36246: PPUSH
36247: CALL_OW 428
36251: PUSH
36252: LD_VAR 0 1
36256: EQUAL
36257: IFFALSE 36284
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
36259: LD_ADDR_EXP 109
36263: PUSH
36264: LD_EXP 109
36268: PPUSH
36269: LD_VAR 0 1
36273: PPUSH
36274: LD_INT 0
36276: PPUSH
36277: CALL_OW 1
36281: ST_TO_ADDR
36282: GO 36335
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
36284: LD_ADDR_EXP 109
36288: PUSH
36289: LD_EXP 109
36293: PPUSH
36294: LD_VAR 0 1
36298: PPUSH
36299: LD_VAR 0 1
36303: PPUSH
36304: CALL_OW 255
36308: PUSH
36309: LD_VAR 0 1
36313: PUSH
36314: LD_VAR 0 2
36318: PUSH
36319: LD_VAR 0 3
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: PPUSH
36330: CALL_OW 1
36334: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36335: CALL 36344 0 0
// end ;
36339: LD_VAR 0 4
36343: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36344: LD_INT 0
36346: PPUSH
36347: PPUSH
36348: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36349: LD_STRING resetFactoryWaypoint();
36351: PPUSH
36352: CALL_OW 559
// if factoryWaypoints then
36356: LD_EXP 109
36360: IFFALSE 36486
// begin list := PrepareArray ( factoryWaypoints ) ;
36362: LD_ADDR_VAR 0 3
36366: PUSH
36367: LD_EXP 109
36371: PPUSH
36372: CALL 83628 0 1
36376: ST_TO_ADDR
// for i := 1 to list do
36377: LD_ADDR_VAR 0 2
36381: PUSH
36382: DOUBLE
36383: LD_INT 1
36385: DEC
36386: ST_TO_ADDR
36387: LD_VAR 0 3
36391: PUSH
36392: FOR_TO
36393: IFFALSE 36484
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36395: LD_STRING setFactoryWaypointXY(
36397: PUSH
36398: LD_VAR 0 3
36402: PUSH
36403: LD_VAR 0 2
36407: ARRAY
36408: PUSH
36409: LD_INT 1
36411: ARRAY
36412: STR
36413: PUSH
36414: LD_STRING ,
36416: STR
36417: PUSH
36418: LD_VAR 0 3
36422: PUSH
36423: LD_VAR 0 2
36427: ARRAY
36428: PUSH
36429: LD_INT 2
36431: ARRAY
36432: STR
36433: PUSH
36434: LD_STRING ,
36436: STR
36437: PUSH
36438: LD_VAR 0 3
36442: PUSH
36443: LD_VAR 0 2
36447: ARRAY
36448: PUSH
36449: LD_INT 3
36451: ARRAY
36452: STR
36453: PUSH
36454: LD_STRING ,
36456: STR
36457: PUSH
36458: LD_VAR 0 3
36462: PUSH
36463: LD_VAR 0 2
36467: ARRAY
36468: PUSH
36469: LD_INT 4
36471: ARRAY
36472: STR
36473: PUSH
36474: LD_STRING )
36476: STR
36477: PPUSH
36478: CALL_OW 559
36482: GO 36392
36484: POP
36485: POP
// end ; end ;
36486: LD_VAR 0 1
36490: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36491: LD_INT 0
36493: PPUSH
// if HexInfo ( x , y ) = warehouse then
36494: LD_VAR 0 2
36498: PPUSH
36499: LD_VAR 0 3
36503: PPUSH
36504: CALL_OW 428
36508: PUSH
36509: LD_VAR 0 1
36513: EQUAL
36514: IFFALSE 36541
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36516: LD_ADDR_EXP 110
36520: PUSH
36521: LD_EXP 110
36525: PPUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: LD_INT 0
36533: PPUSH
36534: CALL_OW 1
36538: ST_TO_ADDR
36539: GO 36592
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36541: LD_ADDR_EXP 110
36545: PUSH
36546: LD_EXP 110
36550: PPUSH
36551: LD_VAR 0 1
36555: PPUSH
36556: LD_VAR 0 1
36560: PPUSH
36561: CALL_OW 255
36565: PUSH
36566: LD_VAR 0 1
36570: PUSH
36571: LD_VAR 0 2
36575: PUSH
36576: LD_VAR 0 3
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: PPUSH
36587: CALL_OW 1
36591: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36592: CALL 36601 0 0
// end ;
36596: LD_VAR 0 4
36600: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36601: LD_INT 0
36603: PPUSH
36604: PPUSH
36605: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36606: LD_STRING resetWarehouseGatheringPoints();
36608: PPUSH
36609: CALL_OW 559
// if warehouseGatheringPoints then
36613: LD_EXP 110
36617: IFFALSE 36743
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36619: LD_ADDR_VAR 0 3
36623: PUSH
36624: LD_EXP 110
36628: PPUSH
36629: CALL 83628 0 1
36633: ST_TO_ADDR
// for i := 1 to list do
36634: LD_ADDR_VAR 0 2
36638: PUSH
36639: DOUBLE
36640: LD_INT 1
36642: DEC
36643: ST_TO_ADDR
36644: LD_VAR 0 3
36648: PUSH
36649: FOR_TO
36650: IFFALSE 36741
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36652: LD_STRING setWarehouseGatheringPointXY(
36654: PUSH
36655: LD_VAR 0 3
36659: PUSH
36660: LD_VAR 0 2
36664: ARRAY
36665: PUSH
36666: LD_INT 1
36668: ARRAY
36669: STR
36670: PUSH
36671: LD_STRING ,
36673: STR
36674: PUSH
36675: LD_VAR 0 3
36679: PUSH
36680: LD_VAR 0 2
36684: ARRAY
36685: PUSH
36686: LD_INT 2
36688: ARRAY
36689: STR
36690: PUSH
36691: LD_STRING ,
36693: STR
36694: PUSH
36695: LD_VAR 0 3
36699: PUSH
36700: LD_VAR 0 2
36704: ARRAY
36705: PUSH
36706: LD_INT 3
36708: ARRAY
36709: STR
36710: PUSH
36711: LD_STRING ,
36713: STR
36714: PUSH
36715: LD_VAR 0 3
36719: PUSH
36720: LD_VAR 0 2
36724: ARRAY
36725: PUSH
36726: LD_INT 4
36728: ARRAY
36729: STR
36730: PUSH
36731: LD_STRING )
36733: STR
36734: PPUSH
36735: CALL_OW 559
36739: GO 36649
36741: POP
36742: POP
// end ; end ;
36743: LD_VAR 0 1
36747: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36748: LD_EXP 110
36752: IFFALSE 37437
36754: GO 36756
36756: DISABLE
36757: LD_INT 0
36759: PPUSH
36760: PPUSH
36761: PPUSH
36762: PPUSH
36763: PPUSH
36764: PPUSH
36765: PPUSH
36766: PPUSH
36767: PPUSH
// begin enable ;
36768: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36769: LD_ADDR_VAR 0 3
36773: PUSH
36774: LD_EXP 110
36778: PPUSH
36779: CALL 83628 0 1
36783: ST_TO_ADDR
// if not list then
36784: LD_VAR 0 3
36788: NOT
36789: IFFALSE 36793
// exit ;
36791: GO 37437
// for i := 1 to list do
36793: LD_ADDR_VAR 0 1
36797: PUSH
36798: DOUBLE
36799: LD_INT 1
36801: DEC
36802: ST_TO_ADDR
36803: LD_VAR 0 3
36807: PUSH
36808: FOR_TO
36809: IFFALSE 37435
// begin depot := list [ i ] [ 2 ] ;
36811: LD_ADDR_VAR 0 8
36815: PUSH
36816: LD_VAR 0 3
36820: PUSH
36821: LD_VAR 0 1
36825: ARRAY
36826: PUSH
36827: LD_INT 2
36829: ARRAY
36830: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36831: LD_ADDR_VAR 0 5
36835: PUSH
36836: LD_VAR 0 3
36840: PUSH
36841: LD_VAR 0 1
36845: ARRAY
36846: PUSH
36847: LD_INT 1
36849: ARRAY
36850: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36851: LD_VAR 0 8
36855: PPUSH
36856: CALL_OW 301
36860: PUSH
36861: LD_VAR 0 5
36865: PUSH
36866: LD_VAR 0 8
36870: PPUSH
36871: CALL_OW 255
36875: NONEQUAL
36876: OR
36877: IFFALSE 36906
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36879: LD_ADDR_EXP 110
36883: PUSH
36884: LD_EXP 110
36888: PPUSH
36889: LD_VAR 0 8
36893: PPUSH
36894: LD_INT 0
36896: PPUSH
36897: CALL_OW 1
36901: ST_TO_ADDR
// exit ;
36902: POP
36903: POP
36904: GO 37437
// end ; x := list [ i ] [ 3 ] ;
36906: LD_ADDR_VAR 0 6
36910: PUSH
36911: LD_VAR 0 3
36915: PUSH
36916: LD_VAR 0 1
36920: ARRAY
36921: PUSH
36922: LD_INT 3
36924: ARRAY
36925: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36926: LD_ADDR_VAR 0 7
36930: PUSH
36931: LD_VAR 0 3
36935: PUSH
36936: LD_VAR 0 1
36940: ARRAY
36941: PUSH
36942: LD_INT 4
36944: ARRAY
36945: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36946: LD_ADDR_VAR 0 9
36950: PUSH
36951: LD_VAR 0 6
36955: PPUSH
36956: LD_VAR 0 7
36960: PPUSH
36961: LD_INT 16
36963: PPUSH
36964: CALL 82216 0 3
36968: ST_TO_ADDR
// if not cratesNearbyPoint then
36969: LD_VAR 0 9
36973: NOT
36974: IFFALSE 36980
// exit ;
36976: POP
36977: POP
36978: GO 37437
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36980: LD_ADDR_VAR 0 4
36984: PUSH
36985: LD_INT 22
36987: PUSH
36988: LD_VAR 0 5
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 3
36999: PUSH
37000: LD_INT 60
37002: PUSH
37003: EMPTY
37004: LIST
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 91
37012: PUSH
37013: LD_VAR 0 8
37017: PUSH
37018: LD_INT 6
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: LD_INT 25
37031: PUSH
37032: LD_INT 2
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 25
37041: PUSH
37042: LD_INT 16
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: PPUSH
37060: CALL_OW 69
37064: PUSH
37065: LD_VAR 0 8
37069: PPUSH
37070: CALL_OW 313
37074: PPUSH
37075: LD_INT 3
37077: PUSH
37078: LD_INT 60
37080: PUSH
37081: EMPTY
37082: LIST
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: LD_INT 25
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 25
37103: PUSH
37104: LD_INT 16
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PPUSH
37120: CALL_OW 72
37124: UNION
37125: ST_TO_ADDR
// if tmp then
37126: LD_VAR 0 4
37130: IFFALSE 37210
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37132: LD_ADDR_VAR 0 4
37136: PUSH
37137: LD_VAR 0 4
37141: PPUSH
37142: LD_INT 3
37144: PPUSH
37145: CALL 80185 0 2
37149: ST_TO_ADDR
// for j in tmp do
37150: LD_ADDR_VAR 0 2
37154: PUSH
37155: LD_VAR 0 4
37159: PUSH
37160: FOR_IN
37161: IFFALSE 37204
// begin if IsInUnit ( j ) then
37163: LD_VAR 0 2
37167: PPUSH
37168: CALL_OW 310
37172: IFFALSE 37183
// ComExit ( j ) ;
37174: LD_VAR 0 2
37178: PPUSH
37179: CALL 80268 0 1
// AddComCollect ( j , x , y ) ;
37183: LD_VAR 0 2
37187: PPUSH
37188: LD_VAR 0 6
37192: PPUSH
37193: LD_VAR 0 7
37197: PPUSH
37198: CALL_OW 177
// end ;
37202: GO 37160
37204: POP
37205: POP
// exit ;
37206: POP
37207: POP
37208: GO 37437
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37210: LD_ADDR_VAR 0 4
37214: PUSH
37215: LD_INT 22
37217: PUSH
37218: LD_VAR 0 5
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 91
37229: PUSH
37230: LD_VAR 0 8
37234: PUSH
37235: LD_INT 8
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: LD_INT 34
37248: PUSH
37249: LD_INT 12
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 34
37258: PUSH
37259: LD_INT 51
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 34
37268: PUSH
37269: LD_INT 32
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 34
37278: PUSH
37279: LD_INT 89
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: PPUSH
37298: CALL_OW 69
37302: ST_TO_ADDR
// if tmp then
37303: LD_VAR 0 4
37307: IFFALSE 37433
// begin for j in tmp do
37309: LD_ADDR_VAR 0 2
37313: PUSH
37314: LD_VAR 0 4
37318: PUSH
37319: FOR_IN
37320: IFFALSE 37431
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37322: LD_VAR 0 2
37326: PPUSH
37327: CALL_OW 262
37331: PUSH
37332: LD_INT 3
37334: EQUAL
37335: PUSH
37336: LD_VAR 0 2
37340: PPUSH
37341: CALL_OW 261
37345: PUSH
37346: LD_INT 20
37348: GREATER
37349: OR
37350: PUSH
37351: LD_VAR 0 2
37355: PPUSH
37356: CALL_OW 314
37360: NOT
37361: AND
37362: PUSH
37363: LD_VAR 0 2
37367: PPUSH
37368: CALL_OW 263
37372: PUSH
37373: LD_INT 1
37375: NONEQUAL
37376: PUSH
37377: LD_VAR 0 2
37381: PPUSH
37382: CALL_OW 311
37386: OR
37387: AND
37388: IFFALSE 37429
// begin ComCollect ( j , x , y ) ;
37390: LD_VAR 0 2
37394: PPUSH
37395: LD_VAR 0 6
37399: PPUSH
37400: LD_VAR 0 7
37404: PPUSH
37405: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37409: LD_VAR 0 2
37413: PPUSH
37414: LD_VAR 0 8
37418: PPUSH
37419: CALL_OW 172
// exit ;
37423: POP
37424: POP
37425: POP
37426: POP
37427: GO 37437
// end ;
37429: GO 37319
37431: POP
37432: POP
// end ; end ;
37433: GO 36808
37435: POP
37436: POP
// end ; end_of_file
37437: PPOPN 9
37439: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37440: LD_INT 0
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37446: LD_VAR 0 1
37450: PPUSH
37451: CALL_OW 264
37455: PUSH
37456: LD_INT 91
37458: EQUAL
37459: IFFALSE 37531
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37461: LD_INT 68
37463: PPUSH
37464: LD_VAR 0 1
37468: PPUSH
37469: CALL_OW 255
37473: PPUSH
37474: CALL_OW 321
37478: PUSH
37479: LD_INT 2
37481: EQUAL
37482: IFFALSE 37494
// eff := 70 else
37484: LD_ADDR_VAR 0 4
37488: PUSH
37489: LD_INT 70
37491: ST_TO_ADDR
37492: GO 37502
// eff := 30 ;
37494: LD_ADDR_VAR 0 4
37498: PUSH
37499: LD_INT 30
37501: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37502: LD_VAR 0 1
37506: PPUSH
37507: CALL_OW 250
37511: PPUSH
37512: LD_VAR 0 1
37516: PPUSH
37517: CALL_OW 251
37521: PPUSH
37522: LD_VAR 0 4
37526: PPUSH
37527: CALL_OW 495
// end ; end ;
37531: LD_VAR 0 2
37535: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37536: LD_INT 0
37538: PPUSH
// end ;
37539: LD_VAR 0 4
37543: RET
// export function SOS_Command ( cmd ) ; begin
37544: LD_INT 0
37546: PPUSH
// end ;
37547: LD_VAR 0 2
37551: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37552: LD_INT 0
37554: PPUSH
// end ;
37555: LD_VAR 0 6
37559: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37560: LD_INT 0
37562: PPUSH
37563: PPUSH
// if not vehicle or not factory then
37564: LD_VAR 0 1
37568: NOT
37569: PUSH
37570: LD_VAR 0 2
37574: NOT
37575: OR
37576: IFFALSE 37580
// exit ;
37578: GO 37811
// if factoryWaypoints >= factory then
37580: LD_EXP 109
37584: PUSH
37585: LD_VAR 0 2
37589: GREATEREQUAL
37590: IFFALSE 37811
// if factoryWaypoints [ factory ] then
37592: LD_EXP 109
37596: PUSH
37597: LD_VAR 0 2
37601: ARRAY
37602: IFFALSE 37811
// begin if GetControl ( vehicle ) = control_manual then
37604: LD_VAR 0 1
37608: PPUSH
37609: CALL_OW 263
37613: PUSH
37614: LD_INT 1
37616: EQUAL
37617: IFFALSE 37698
// begin driver := IsDrivenBy ( vehicle ) ;
37619: LD_ADDR_VAR 0 4
37623: PUSH
37624: LD_VAR 0 1
37628: PPUSH
37629: CALL_OW 311
37633: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37634: LD_VAR 0 4
37638: PPUSH
37639: LD_EXP 109
37643: PUSH
37644: LD_VAR 0 2
37648: ARRAY
37649: PUSH
37650: LD_INT 3
37652: ARRAY
37653: PPUSH
37654: LD_EXP 109
37658: PUSH
37659: LD_VAR 0 2
37663: ARRAY
37664: PUSH
37665: LD_INT 4
37667: ARRAY
37668: PPUSH
37669: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37673: LD_VAR 0 4
37677: PPUSH
37678: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37682: LD_VAR 0 4
37686: PPUSH
37687: LD_VAR 0 2
37691: PPUSH
37692: CALL_OW 180
// end else
37696: GO 37811
// if GetControl ( vehicle ) = control_remote then
37698: LD_VAR 0 1
37702: PPUSH
37703: CALL_OW 263
37707: PUSH
37708: LD_INT 2
37710: EQUAL
37711: IFFALSE 37772
// begin wait ( 0 0$2 ) ;
37713: LD_INT 70
37715: PPUSH
37716: CALL_OW 67
// if Connect ( vehicle ) then
37720: LD_VAR 0 1
37724: PPUSH
37725: CALL 50476 0 1
37729: IFFALSE 37770
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37731: LD_VAR 0 1
37735: PPUSH
37736: LD_EXP 109
37740: PUSH
37741: LD_VAR 0 2
37745: ARRAY
37746: PUSH
37747: LD_INT 3
37749: ARRAY
37750: PPUSH
37751: LD_EXP 109
37755: PUSH
37756: LD_VAR 0 2
37760: ARRAY
37761: PUSH
37762: LD_INT 4
37764: ARRAY
37765: PPUSH
37766: CALL_OW 171
// end else
37770: GO 37811
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37772: LD_VAR 0 1
37776: PPUSH
37777: LD_EXP 109
37781: PUSH
37782: LD_VAR 0 2
37786: ARRAY
37787: PUSH
37788: LD_INT 3
37790: ARRAY
37791: PPUSH
37792: LD_EXP 109
37796: PUSH
37797: LD_VAR 0 2
37801: ARRAY
37802: PUSH
37803: LD_INT 4
37805: ARRAY
37806: PPUSH
37807: CALL_OW 171
// end ; end ;
37811: LD_VAR 0 3
37815: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37816: LD_INT 0
37818: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37819: LD_VAR 0 1
37823: PUSH
37824: LD_INT 250
37826: EQUAL
37827: PUSH
37828: LD_VAR 0 2
37832: PPUSH
37833: CALL_OW 264
37837: PUSH
37838: LD_INT 81
37840: EQUAL
37841: AND
37842: IFFALSE 37863
// MinerPlaceMine ( unit , x , y ) ;
37844: LD_VAR 0 2
37848: PPUSH
37849: LD_VAR 0 4
37853: PPUSH
37854: LD_VAR 0 5
37858: PPUSH
37859: CALL 40687 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37863: LD_VAR 0 1
37867: PUSH
37868: LD_INT 251
37870: EQUAL
37871: PUSH
37872: LD_VAR 0 2
37876: PPUSH
37877: CALL_OW 264
37881: PUSH
37882: LD_INT 81
37884: EQUAL
37885: AND
37886: IFFALSE 37907
// MinerDetonateMine ( unit , x , y ) ;
37888: LD_VAR 0 2
37892: PPUSH
37893: LD_VAR 0 4
37897: PPUSH
37898: LD_VAR 0 5
37902: PPUSH
37903: CALL 40962 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37907: LD_VAR 0 1
37911: PUSH
37912: LD_INT 252
37914: EQUAL
37915: PUSH
37916: LD_VAR 0 2
37920: PPUSH
37921: CALL_OW 264
37925: PUSH
37926: LD_INT 81
37928: EQUAL
37929: AND
37930: IFFALSE 37951
// MinerCreateMinefield ( unit , x , y ) ;
37932: LD_VAR 0 2
37936: PPUSH
37937: LD_VAR 0 4
37941: PPUSH
37942: LD_VAR 0 5
37946: PPUSH
37947: CALL 41379 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37951: LD_VAR 0 1
37955: PUSH
37956: LD_INT 253
37958: EQUAL
37959: PUSH
37960: LD_VAR 0 2
37964: PPUSH
37965: CALL_OW 257
37969: PUSH
37970: LD_INT 5
37972: EQUAL
37973: AND
37974: IFFALSE 37995
// ComBinocular ( unit , x , y ) ;
37976: LD_VAR 0 2
37980: PPUSH
37981: LD_VAR 0 4
37985: PPUSH
37986: LD_VAR 0 5
37990: PPUSH
37991: CALL 41748 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37995: LD_VAR 0 1
37999: PUSH
38000: LD_INT 254
38002: EQUAL
38003: PUSH
38004: LD_VAR 0 2
38008: PPUSH
38009: CALL_OW 264
38013: PUSH
38014: LD_INT 99
38016: EQUAL
38017: AND
38018: PUSH
38019: LD_VAR 0 3
38023: PPUSH
38024: CALL_OW 263
38028: PUSH
38029: LD_INT 3
38031: EQUAL
38032: AND
38033: IFFALSE 38049
// HackDestroyVehicle ( unit , selectedUnit ) ;
38035: LD_VAR 0 2
38039: PPUSH
38040: LD_VAR 0 3
38044: PPUSH
38045: CALL 40051 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38049: LD_VAR 0 1
38053: PUSH
38054: LD_INT 255
38056: EQUAL
38057: PUSH
38058: LD_VAR 0 2
38062: PPUSH
38063: CALL_OW 264
38067: PUSH
38068: LD_INT 14
38070: PUSH
38071: LD_INT 53
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: IN
38078: AND
38079: PUSH
38080: LD_VAR 0 4
38084: PPUSH
38085: LD_VAR 0 5
38089: PPUSH
38090: CALL_OW 488
38094: AND
38095: IFFALSE 38119
// CutTreeXYR ( unit , x , y , 12 ) ;
38097: LD_VAR 0 2
38101: PPUSH
38102: LD_VAR 0 4
38106: PPUSH
38107: LD_VAR 0 5
38111: PPUSH
38112: LD_INT 12
38114: PPUSH
38115: CALL 38214 0 4
// if cmd = 256 then
38119: LD_VAR 0 1
38123: PUSH
38124: LD_INT 256
38126: EQUAL
38127: IFFALSE 38148
// SetFactoryWaypoint ( unit , x , y ) ;
38129: LD_VAR 0 2
38133: PPUSH
38134: LD_VAR 0 4
38138: PPUSH
38139: LD_VAR 0 5
38143: PPUSH
38144: CALL 36129 0 3
// if cmd = 257 then
38148: LD_VAR 0 1
38152: PUSH
38153: LD_INT 257
38155: EQUAL
38156: IFFALSE 38177
// SetWarehouseGatheringPoint ( unit , x , y ) ;
38158: LD_VAR 0 2
38162: PPUSH
38163: LD_VAR 0 4
38167: PPUSH
38168: LD_VAR 0 5
38172: PPUSH
38173: CALL 36491 0 3
// if cmd = 258 then
38177: LD_VAR 0 1
38181: PUSH
38182: LD_INT 258
38184: EQUAL
38185: IFFALSE 38209
// BurnTreeXYR ( unit , x , y , 8 ) ;
38187: LD_VAR 0 2
38191: PPUSH
38192: LD_VAR 0 4
38196: PPUSH
38197: LD_VAR 0 5
38201: PPUSH
38202: LD_INT 8
38204: PPUSH
38205: CALL 38608 0 4
// end ;
38209: LD_VAR 0 6
38213: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38214: LD_INT 0
38216: PPUSH
38217: PPUSH
38218: PPUSH
38219: PPUSH
38220: PPUSH
38221: PPUSH
38222: PPUSH
38223: PPUSH
38224: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
38225: LD_VAR 0 1
38229: PPUSH
38230: CALL_OW 302
38234: NOT
38235: PUSH
38236: LD_VAR 0 2
38240: PPUSH
38241: LD_VAR 0 3
38245: PPUSH
38246: CALL_OW 488
38250: NOT
38251: OR
38252: PUSH
38253: LD_VAR 0 4
38257: NOT
38258: OR
38259: IFFALSE 38263
// exit ;
38261: GO 38603
// list := [ ] ;
38263: LD_ADDR_VAR 0 13
38267: PUSH
38268: EMPTY
38269: ST_TO_ADDR
// if x - r < 0 then
38270: LD_VAR 0 2
38274: PUSH
38275: LD_VAR 0 4
38279: MINUS
38280: PUSH
38281: LD_INT 0
38283: LESS
38284: IFFALSE 38296
// min_x := 0 else
38286: LD_ADDR_VAR 0 7
38290: PUSH
38291: LD_INT 0
38293: ST_TO_ADDR
38294: GO 38312
// min_x := x - r ;
38296: LD_ADDR_VAR 0 7
38300: PUSH
38301: LD_VAR 0 2
38305: PUSH
38306: LD_VAR 0 4
38310: MINUS
38311: ST_TO_ADDR
// if y - r < 0 then
38312: LD_VAR 0 3
38316: PUSH
38317: LD_VAR 0 4
38321: MINUS
38322: PUSH
38323: LD_INT 0
38325: LESS
38326: IFFALSE 38338
// min_y := 0 else
38328: LD_ADDR_VAR 0 8
38332: PUSH
38333: LD_INT 0
38335: ST_TO_ADDR
38336: GO 38354
// min_y := y - r ;
38338: LD_ADDR_VAR 0 8
38342: PUSH
38343: LD_VAR 0 3
38347: PUSH
38348: LD_VAR 0 4
38352: MINUS
38353: ST_TO_ADDR
// max_x := x + r ;
38354: LD_ADDR_VAR 0 9
38358: PUSH
38359: LD_VAR 0 2
38363: PUSH
38364: LD_VAR 0 4
38368: PLUS
38369: ST_TO_ADDR
// max_y := y + r ;
38370: LD_ADDR_VAR 0 10
38374: PUSH
38375: LD_VAR 0 3
38379: PUSH
38380: LD_VAR 0 4
38384: PLUS
38385: ST_TO_ADDR
// for _x = min_x to max_x do
38386: LD_ADDR_VAR 0 11
38390: PUSH
38391: DOUBLE
38392: LD_VAR 0 7
38396: DEC
38397: ST_TO_ADDR
38398: LD_VAR 0 9
38402: PUSH
38403: FOR_TO
38404: IFFALSE 38521
// for _y = min_y to max_y do
38406: LD_ADDR_VAR 0 12
38410: PUSH
38411: DOUBLE
38412: LD_VAR 0 8
38416: DEC
38417: ST_TO_ADDR
38418: LD_VAR 0 10
38422: PUSH
38423: FOR_TO
38424: IFFALSE 38517
// begin if not ValidHex ( _x , _y ) then
38426: LD_VAR 0 11
38430: PPUSH
38431: LD_VAR 0 12
38435: PPUSH
38436: CALL_OW 488
38440: NOT
38441: IFFALSE 38445
// continue ;
38443: GO 38423
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38445: LD_VAR 0 11
38449: PPUSH
38450: LD_VAR 0 12
38454: PPUSH
38455: CALL_OW 351
38459: PUSH
38460: LD_VAR 0 11
38464: PPUSH
38465: LD_VAR 0 12
38469: PPUSH
38470: CALL_OW 554
38474: AND
38475: IFFALSE 38515
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38477: LD_ADDR_VAR 0 13
38481: PUSH
38482: LD_VAR 0 13
38486: PPUSH
38487: LD_VAR 0 13
38491: PUSH
38492: LD_INT 1
38494: PLUS
38495: PPUSH
38496: LD_VAR 0 11
38500: PUSH
38501: LD_VAR 0 12
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PPUSH
38510: CALL_OW 2
38514: ST_TO_ADDR
// end ;
38515: GO 38423
38517: POP
38518: POP
38519: GO 38403
38521: POP
38522: POP
// if not list then
38523: LD_VAR 0 13
38527: NOT
38528: IFFALSE 38532
// exit ;
38530: GO 38603
// for i in list do
38532: LD_ADDR_VAR 0 6
38536: PUSH
38537: LD_VAR 0 13
38541: PUSH
38542: FOR_IN
38543: IFFALSE 38601
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38545: LD_VAR 0 1
38549: PPUSH
38550: LD_STRING M
38552: PUSH
38553: LD_VAR 0 6
38557: PUSH
38558: LD_INT 1
38560: ARRAY
38561: PUSH
38562: LD_VAR 0 6
38566: PUSH
38567: LD_INT 2
38569: ARRAY
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: LD_INT 0
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: PUSH
38592: EMPTY
38593: LIST
38594: PPUSH
38595: CALL_OW 447
38599: GO 38542
38601: POP
38602: POP
// end ;
38603: LD_VAR 0 5
38607: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38608: LD_INT 0
38610: PPUSH
38611: PPUSH
38612: PPUSH
38613: PPUSH
38614: PPUSH
38615: PPUSH
38616: PPUSH
38617: PPUSH
38618: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38619: LD_VAR 0 1
38623: PPUSH
38624: CALL_OW 302
38628: NOT
38629: PUSH
38630: LD_VAR 0 2
38634: PPUSH
38635: LD_VAR 0 3
38639: PPUSH
38640: CALL_OW 488
38644: NOT
38645: OR
38646: PUSH
38647: LD_VAR 0 4
38651: NOT
38652: OR
38653: IFFALSE 38657
// exit ;
38655: GO 39005
// list := [ ] ;
38657: LD_ADDR_VAR 0 13
38661: PUSH
38662: EMPTY
38663: ST_TO_ADDR
// if x - r < 0 then
38664: LD_VAR 0 2
38668: PUSH
38669: LD_VAR 0 4
38673: MINUS
38674: PUSH
38675: LD_INT 0
38677: LESS
38678: IFFALSE 38690
// min_x := 0 else
38680: LD_ADDR_VAR 0 7
38684: PUSH
38685: LD_INT 0
38687: ST_TO_ADDR
38688: GO 38706
// min_x := x - r ;
38690: LD_ADDR_VAR 0 7
38694: PUSH
38695: LD_VAR 0 2
38699: PUSH
38700: LD_VAR 0 4
38704: MINUS
38705: ST_TO_ADDR
// if y - r < 0 then
38706: LD_VAR 0 3
38710: PUSH
38711: LD_VAR 0 4
38715: MINUS
38716: PUSH
38717: LD_INT 0
38719: LESS
38720: IFFALSE 38732
// min_y := 0 else
38722: LD_ADDR_VAR 0 8
38726: PUSH
38727: LD_INT 0
38729: ST_TO_ADDR
38730: GO 38748
// min_y := y - r ;
38732: LD_ADDR_VAR 0 8
38736: PUSH
38737: LD_VAR 0 3
38741: PUSH
38742: LD_VAR 0 4
38746: MINUS
38747: ST_TO_ADDR
// max_x := x + r ;
38748: LD_ADDR_VAR 0 9
38752: PUSH
38753: LD_VAR 0 2
38757: PUSH
38758: LD_VAR 0 4
38762: PLUS
38763: ST_TO_ADDR
// max_y := y + r ;
38764: LD_ADDR_VAR 0 10
38768: PUSH
38769: LD_VAR 0 3
38773: PUSH
38774: LD_VAR 0 4
38778: PLUS
38779: ST_TO_ADDR
// for _x = min_x to max_x do
38780: LD_ADDR_VAR 0 11
38784: PUSH
38785: DOUBLE
38786: LD_VAR 0 7
38790: DEC
38791: ST_TO_ADDR
38792: LD_VAR 0 9
38796: PUSH
38797: FOR_TO
38798: IFFALSE 38915
// for _y = min_y to max_y do
38800: LD_ADDR_VAR 0 12
38804: PUSH
38805: DOUBLE
38806: LD_VAR 0 8
38810: DEC
38811: ST_TO_ADDR
38812: LD_VAR 0 10
38816: PUSH
38817: FOR_TO
38818: IFFALSE 38911
// begin if not ValidHex ( _x , _y ) then
38820: LD_VAR 0 11
38824: PPUSH
38825: LD_VAR 0 12
38829: PPUSH
38830: CALL_OW 488
38834: NOT
38835: IFFALSE 38839
// continue ;
38837: GO 38817
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38839: LD_VAR 0 11
38843: PPUSH
38844: LD_VAR 0 12
38848: PPUSH
38849: CALL_OW 351
38853: PUSH
38854: LD_VAR 0 11
38858: PPUSH
38859: LD_VAR 0 12
38863: PPUSH
38864: CALL_OW 554
38868: AND
38869: IFFALSE 38909
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38871: LD_ADDR_VAR 0 13
38875: PUSH
38876: LD_VAR 0 13
38880: PPUSH
38881: LD_VAR 0 13
38885: PUSH
38886: LD_INT 1
38888: PLUS
38889: PPUSH
38890: LD_VAR 0 11
38894: PUSH
38895: LD_VAR 0 12
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PPUSH
38904: CALL_OW 2
38908: ST_TO_ADDR
// end ;
38909: GO 38817
38911: POP
38912: POP
38913: GO 38797
38915: POP
38916: POP
// if not list then
38917: LD_VAR 0 13
38921: NOT
38922: IFFALSE 38926
// exit ;
38924: GO 39005
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38926: LD_ADDR_VAR 0 13
38930: PUSH
38931: LD_VAR 0 1
38935: PPUSH
38936: LD_VAR 0 13
38940: PPUSH
38941: LD_INT 1
38943: PPUSH
38944: LD_INT 1
38946: PPUSH
38947: CALL 47618 0 4
38951: ST_TO_ADDR
// ComStop ( flame ) ;
38952: LD_VAR 0 1
38956: PPUSH
38957: CALL_OW 141
// for i in list do
38961: LD_ADDR_VAR 0 6
38965: PUSH
38966: LD_VAR 0 13
38970: PUSH
38971: FOR_IN
38972: IFFALSE 39003
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38974: LD_VAR 0 1
38978: PPUSH
38979: LD_VAR 0 6
38983: PUSH
38984: LD_INT 1
38986: ARRAY
38987: PPUSH
38988: LD_VAR 0 6
38992: PUSH
38993: LD_INT 2
38995: ARRAY
38996: PPUSH
38997: CALL_OW 176
39001: GO 38971
39003: POP
39004: POP
// end ;
39005: LD_VAR 0 5
39009: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
39010: LD_EXP 112
39014: NOT
39015: IFFALSE 39065
39017: GO 39019
39019: DISABLE
// begin initHack := true ;
39020: LD_ADDR_EXP 112
39024: PUSH
39025: LD_INT 1
39027: ST_TO_ADDR
// hackTanks := [ ] ;
39028: LD_ADDR_EXP 113
39032: PUSH
39033: EMPTY
39034: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
39035: LD_ADDR_EXP 114
39039: PUSH
39040: EMPTY
39041: ST_TO_ADDR
// hackLimit := 3 ;
39042: LD_ADDR_EXP 115
39046: PUSH
39047: LD_INT 3
39049: ST_TO_ADDR
// hackDist := 12 ;
39050: LD_ADDR_EXP 116
39054: PUSH
39055: LD_INT 12
39057: ST_TO_ADDR
// hackCounter := [ ] ;
39058: LD_ADDR_EXP 117
39062: PUSH
39063: EMPTY
39064: ST_TO_ADDR
// end ;
39065: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
39066: LD_EXP 112
39070: PUSH
39071: LD_INT 34
39073: PUSH
39074: LD_INT 99
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PPUSH
39081: CALL_OW 69
39085: AND
39086: IFFALSE 39339
39088: GO 39090
39090: DISABLE
39091: LD_INT 0
39093: PPUSH
39094: PPUSH
// begin enable ;
39095: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
39096: LD_ADDR_VAR 0 1
39100: PUSH
39101: LD_INT 34
39103: PUSH
39104: LD_INT 99
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PPUSH
39111: CALL_OW 69
39115: PUSH
39116: FOR_IN
39117: IFFALSE 39337
// begin if not i in hackTanks then
39119: LD_VAR 0 1
39123: PUSH
39124: LD_EXP 113
39128: IN
39129: NOT
39130: IFFALSE 39213
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39132: LD_ADDR_EXP 113
39136: PUSH
39137: LD_EXP 113
39141: PPUSH
39142: LD_EXP 113
39146: PUSH
39147: LD_INT 1
39149: PLUS
39150: PPUSH
39151: LD_VAR 0 1
39155: PPUSH
39156: CALL_OW 1
39160: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39161: LD_ADDR_EXP 114
39165: PUSH
39166: LD_EXP 114
39170: PPUSH
39171: LD_EXP 114
39175: PUSH
39176: LD_INT 1
39178: PLUS
39179: PPUSH
39180: EMPTY
39181: PPUSH
39182: CALL_OW 1
39186: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39187: LD_ADDR_EXP 117
39191: PUSH
39192: LD_EXP 117
39196: PPUSH
39197: LD_EXP 117
39201: PUSH
39202: LD_INT 1
39204: PLUS
39205: PPUSH
39206: EMPTY
39207: PPUSH
39208: CALL_OW 1
39212: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39213: LD_VAR 0 1
39217: PPUSH
39218: CALL_OW 302
39222: NOT
39223: IFFALSE 39236
// begin HackUnlinkAll ( i ) ;
39225: LD_VAR 0 1
39229: PPUSH
39230: CALL 39342 0 1
// continue ;
39234: GO 39116
// end ; HackCheckCapturedStatus ( i ) ;
39236: LD_VAR 0 1
39240: PPUSH
39241: CALL 39785 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39245: LD_ADDR_VAR 0 2
39249: PUSH
39250: LD_INT 81
39252: PUSH
39253: LD_VAR 0 1
39257: PPUSH
39258: CALL_OW 255
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 33
39269: PUSH
39270: LD_INT 3
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 91
39279: PUSH
39280: LD_VAR 0 1
39284: PUSH
39285: LD_EXP 116
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 50
39297: PUSH
39298: EMPTY
39299: LIST
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: PPUSH
39307: CALL_OW 69
39311: ST_TO_ADDR
// if not tmp then
39312: LD_VAR 0 2
39316: NOT
39317: IFFALSE 39321
// continue ;
39319: GO 39116
// HackLink ( i , tmp ) ;
39321: LD_VAR 0 1
39325: PPUSH
39326: LD_VAR 0 2
39330: PPUSH
39331: CALL 39478 0 2
// end ;
39335: GO 39116
39337: POP
39338: POP
// end ;
39339: PPOPN 2
39341: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39342: LD_INT 0
39344: PPUSH
39345: PPUSH
39346: PPUSH
// if not hack in hackTanks then
39347: LD_VAR 0 1
39351: PUSH
39352: LD_EXP 113
39356: IN
39357: NOT
39358: IFFALSE 39362
// exit ;
39360: GO 39473
// index := GetElementIndex ( hackTanks , hack ) ;
39362: LD_ADDR_VAR 0 4
39366: PUSH
39367: LD_EXP 113
39371: PPUSH
39372: LD_VAR 0 1
39376: PPUSH
39377: CALL 46915 0 2
39381: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39382: LD_EXP 114
39386: PUSH
39387: LD_VAR 0 4
39391: ARRAY
39392: IFFALSE 39473
// begin for i in hackTanksCaptured [ index ] do
39394: LD_ADDR_VAR 0 3
39398: PUSH
39399: LD_EXP 114
39403: PUSH
39404: LD_VAR 0 4
39408: ARRAY
39409: PUSH
39410: FOR_IN
39411: IFFALSE 39437
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39413: LD_VAR 0 3
39417: PUSH
39418: LD_INT 1
39420: ARRAY
39421: PPUSH
39422: LD_VAR 0 3
39426: PUSH
39427: LD_INT 2
39429: ARRAY
39430: PPUSH
39431: CALL_OW 235
39435: GO 39410
39437: POP
39438: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39439: LD_ADDR_EXP 114
39443: PUSH
39444: LD_EXP 114
39448: PPUSH
39449: LD_VAR 0 4
39453: PPUSH
39454: EMPTY
39455: PPUSH
39456: CALL_OW 1
39460: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39461: LD_VAR 0 1
39465: PPUSH
39466: LD_INT 0
39468: PPUSH
39469: CALL_OW 505
// end ; end ;
39473: LD_VAR 0 2
39477: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39478: LD_INT 0
39480: PPUSH
39481: PPUSH
39482: PPUSH
// if not hack in hackTanks or not vehicles then
39483: LD_VAR 0 1
39487: PUSH
39488: LD_EXP 113
39492: IN
39493: NOT
39494: PUSH
39495: LD_VAR 0 2
39499: NOT
39500: OR
39501: IFFALSE 39505
// exit ;
39503: GO 39780
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39505: LD_ADDR_VAR 0 2
39509: PUSH
39510: LD_VAR 0 1
39514: PPUSH
39515: LD_VAR 0 2
39519: PPUSH
39520: LD_INT 1
39522: PPUSH
39523: LD_INT 1
39525: PPUSH
39526: CALL 47565 0 4
39530: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39531: LD_ADDR_VAR 0 5
39535: PUSH
39536: LD_EXP 113
39540: PPUSH
39541: LD_VAR 0 1
39545: PPUSH
39546: CALL 46915 0 2
39550: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39551: LD_EXP 114
39555: PUSH
39556: LD_VAR 0 5
39560: ARRAY
39561: PUSH
39562: LD_EXP 115
39566: LESS
39567: IFFALSE 39756
// begin for i := 1 to vehicles do
39569: LD_ADDR_VAR 0 4
39573: PUSH
39574: DOUBLE
39575: LD_INT 1
39577: DEC
39578: ST_TO_ADDR
39579: LD_VAR 0 2
39583: PUSH
39584: FOR_TO
39585: IFFALSE 39754
// begin if hackTanksCaptured [ index ] = hackLimit then
39587: LD_EXP 114
39591: PUSH
39592: LD_VAR 0 5
39596: ARRAY
39597: PUSH
39598: LD_EXP 115
39602: EQUAL
39603: IFFALSE 39607
// break ;
39605: GO 39754
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39607: LD_ADDR_EXP 117
39611: PUSH
39612: LD_EXP 117
39616: PPUSH
39617: LD_VAR 0 5
39621: PPUSH
39622: LD_EXP 117
39626: PUSH
39627: LD_VAR 0 5
39631: ARRAY
39632: PUSH
39633: LD_INT 1
39635: PLUS
39636: PPUSH
39637: CALL_OW 1
39641: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39642: LD_ADDR_EXP 114
39646: PUSH
39647: LD_EXP 114
39651: PPUSH
39652: LD_VAR 0 5
39656: PUSH
39657: LD_EXP 114
39661: PUSH
39662: LD_VAR 0 5
39666: ARRAY
39667: PUSH
39668: LD_INT 1
39670: PLUS
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PPUSH
39676: LD_VAR 0 2
39680: PUSH
39681: LD_VAR 0 4
39685: ARRAY
39686: PUSH
39687: LD_VAR 0 2
39691: PUSH
39692: LD_VAR 0 4
39696: ARRAY
39697: PPUSH
39698: CALL_OW 255
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PPUSH
39707: CALL 47130 0 3
39711: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39712: LD_VAR 0 2
39716: PUSH
39717: LD_VAR 0 4
39721: ARRAY
39722: PPUSH
39723: LD_VAR 0 1
39727: PPUSH
39728: CALL_OW 255
39732: PPUSH
39733: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39737: LD_VAR 0 2
39741: PUSH
39742: LD_VAR 0 4
39746: ARRAY
39747: PPUSH
39748: CALL_OW 141
// end ;
39752: GO 39584
39754: POP
39755: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39756: LD_VAR 0 1
39760: PPUSH
39761: LD_EXP 114
39765: PUSH
39766: LD_VAR 0 5
39770: ARRAY
39771: PUSH
39772: LD_INT 0
39774: PLUS
39775: PPUSH
39776: CALL_OW 505
// end ;
39780: LD_VAR 0 3
39784: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39785: LD_INT 0
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
// if not hack in hackTanks then
39791: LD_VAR 0 1
39795: PUSH
39796: LD_EXP 113
39800: IN
39801: NOT
39802: IFFALSE 39806
// exit ;
39804: GO 40046
// index := GetElementIndex ( hackTanks , hack ) ;
39806: LD_ADDR_VAR 0 4
39810: PUSH
39811: LD_EXP 113
39815: PPUSH
39816: LD_VAR 0 1
39820: PPUSH
39821: CALL 46915 0 2
39825: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39826: LD_ADDR_VAR 0 3
39830: PUSH
39831: DOUBLE
39832: LD_EXP 114
39836: PUSH
39837: LD_VAR 0 4
39841: ARRAY
39842: INC
39843: ST_TO_ADDR
39844: LD_INT 1
39846: PUSH
39847: FOR_DOWNTO
39848: IFFALSE 40020
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39850: LD_ADDR_VAR 0 5
39854: PUSH
39855: LD_EXP 114
39859: PUSH
39860: LD_VAR 0 4
39864: ARRAY
39865: PUSH
39866: LD_VAR 0 3
39870: ARRAY
39871: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39872: LD_VAR 0 5
39876: PUSH
39877: LD_INT 1
39879: ARRAY
39880: PPUSH
39881: CALL_OW 302
39885: NOT
39886: PUSH
39887: LD_VAR 0 5
39891: PUSH
39892: LD_INT 1
39894: ARRAY
39895: PPUSH
39896: CALL_OW 255
39900: PUSH
39901: LD_VAR 0 1
39905: PPUSH
39906: CALL_OW 255
39910: NONEQUAL
39911: OR
39912: IFFALSE 40018
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39914: LD_VAR 0 5
39918: PUSH
39919: LD_INT 1
39921: ARRAY
39922: PPUSH
39923: CALL_OW 305
39927: PUSH
39928: LD_VAR 0 5
39932: PUSH
39933: LD_INT 1
39935: ARRAY
39936: PPUSH
39937: CALL_OW 255
39941: PUSH
39942: LD_VAR 0 1
39946: PPUSH
39947: CALL_OW 255
39951: EQUAL
39952: AND
39953: IFFALSE 39977
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39955: LD_VAR 0 5
39959: PUSH
39960: LD_INT 1
39962: ARRAY
39963: PPUSH
39964: LD_VAR 0 5
39968: PUSH
39969: LD_INT 2
39971: ARRAY
39972: PPUSH
39973: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39977: LD_ADDR_EXP 114
39981: PUSH
39982: LD_EXP 114
39986: PPUSH
39987: LD_VAR 0 4
39991: PPUSH
39992: LD_EXP 114
39996: PUSH
39997: LD_VAR 0 4
40001: ARRAY
40002: PPUSH
40003: LD_VAR 0 3
40007: PPUSH
40008: CALL_OW 3
40012: PPUSH
40013: CALL_OW 1
40017: ST_TO_ADDR
// end ; end ;
40018: GO 39847
40020: POP
40021: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40022: LD_VAR 0 1
40026: PPUSH
40027: LD_EXP 114
40031: PUSH
40032: LD_VAR 0 4
40036: ARRAY
40037: PUSH
40038: LD_INT 0
40040: PLUS
40041: PPUSH
40042: CALL_OW 505
// end ;
40046: LD_VAR 0 2
40050: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
40051: LD_INT 0
40053: PPUSH
40054: PPUSH
40055: PPUSH
40056: PPUSH
// if not hack in hackTanks then
40057: LD_VAR 0 1
40061: PUSH
40062: LD_EXP 113
40066: IN
40067: NOT
40068: IFFALSE 40072
// exit ;
40070: GO 40157
// index := GetElementIndex ( hackTanks , hack ) ;
40072: LD_ADDR_VAR 0 5
40076: PUSH
40077: LD_EXP 113
40081: PPUSH
40082: LD_VAR 0 1
40086: PPUSH
40087: CALL 46915 0 2
40091: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
40092: LD_ADDR_VAR 0 4
40096: PUSH
40097: DOUBLE
40098: LD_INT 1
40100: DEC
40101: ST_TO_ADDR
40102: LD_EXP 114
40106: PUSH
40107: LD_VAR 0 5
40111: ARRAY
40112: PUSH
40113: FOR_TO
40114: IFFALSE 40155
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40116: LD_EXP 114
40120: PUSH
40121: LD_VAR 0 5
40125: ARRAY
40126: PUSH
40127: LD_VAR 0 4
40131: ARRAY
40132: PUSH
40133: LD_INT 1
40135: ARRAY
40136: PUSH
40137: LD_VAR 0 2
40141: EQUAL
40142: IFFALSE 40153
// KillUnit ( vehicle ) ;
40144: LD_VAR 0 2
40148: PPUSH
40149: CALL_OW 66
40153: GO 40113
40155: POP
40156: POP
// end ;
40157: LD_VAR 0 3
40161: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
40162: LD_EXP 118
40166: NOT
40167: IFFALSE 40202
40169: GO 40171
40171: DISABLE
// begin initMiner := true ;
40172: LD_ADDR_EXP 118
40176: PUSH
40177: LD_INT 1
40179: ST_TO_ADDR
// minersList := [ ] ;
40180: LD_ADDR_EXP 119
40184: PUSH
40185: EMPTY
40186: ST_TO_ADDR
// minerMinesList := [ ] ;
40187: LD_ADDR_EXP 120
40191: PUSH
40192: EMPTY
40193: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
40194: LD_ADDR_EXP 121
40198: PUSH
40199: LD_INT 5
40201: ST_TO_ADDR
// end ;
40202: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
40203: LD_EXP 118
40207: PUSH
40208: LD_INT 34
40210: PUSH
40211: LD_INT 81
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PPUSH
40218: CALL_OW 69
40222: AND
40223: IFFALSE 40684
40225: GO 40227
40227: DISABLE
40228: LD_INT 0
40230: PPUSH
40231: PPUSH
40232: PPUSH
40233: PPUSH
// begin enable ;
40234: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40235: LD_ADDR_VAR 0 1
40239: PUSH
40240: LD_INT 34
40242: PUSH
40243: LD_INT 81
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PPUSH
40250: CALL_OW 69
40254: PUSH
40255: FOR_IN
40256: IFFALSE 40328
// begin if not i in minersList then
40258: LD_VAR 0 1
40262: PUSH
40263: LD_EXP 119
40267: IN
40268: NOT
40269: IFFALSE 40326
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40271: LD_ADDR_EXP 119
40275: PUSH
40276: LD_EXP 119
40280: PPUSH
40281: LD_EXP 119
40285: PUSH
40286: LD_INT 1
40288: PLUS
40289: PPUSH
40290: LD_VAR 0 1
40294: PPUSH
40295: CALL_OW 1
40299: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40300: LD_ADDR_EXP 120
40304: PUSH
40305: LD_EXP 120
40309: PPUSH
40310: LD_EXP 120
40314: PUSH
40315: LD_INT 1
40317: PLUS
40318: PPUSH
40319: EMPTY
40320: PPUSH
40321: CALL_OW 1
40325: ST_TO_ADDR
// end end ;
40326: GO 40255
40328: POP
40329: POP
// for i := minerMinesList downto 1 do
40330: LD_ADDR_VAR 0 1
40334: PUSH
40335: DOUBLE
40336: LD_EXP 120
40340: INC
40341: ST_TO_ADDR
40342: LD_INT 1
40344: PUSH
40345: FOR_DOWNTO
40346: IFFALSE 40682
// begin if IsLive ( minersList [ i ] ) then
40348: LD_EXP 119
40352: PUSH
40353: LD_VAR 0 1
40357: ARRAY
40358: PPUSH
40359: CALL_OW 300
40363: IFFALSE 40391
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
40365: LD_EXP 119
40369: PUSH
40370: LD_VAR 0 1
40374: ARRAY
40375: PPUSH
40376: LD_EXP 120
40380: PUSH
40381: LD_VAR 0 1
40385: ARRAY
40386: PPUSH
40387: CALL_OW 505
// if not minerMinesList [ i ] then
40391: LD_EXP 120
40395: PUSH
40396: LD_VAR 0 1
40400: ARRAY
40401: NOT
40402: IFFALSE 40406
// continue ;
40404: GO 40345
// for j := minerMinesList [ i ] downto 1 do
40406: LD_ADDR_VAR 0 2
40410: PUSH
40411: DOUBLE
40412: LD_EXP 120
40416: PUSH
40417: LD_VAR 0 1
40421: ARRAY
40422: INC
40423: ST_TO_ADDR
40424: LD_INT 1
40426: PUSH
40427: FOR_DOWNTO
40428: IFFALSE 40678
// begin side := GetSide ( minersList [ i ] ) ;
40430: LD_ADDR_VAR 0 3
40434: PUSH
40435: LD_EXP 119
40439: PUSH
40440: LD_VAR 0 1
40444: ARRAY
40445: PPUSH
40446: CALL_OW 255
40450: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40451: LD_ADDR_VAR 0 4
40455: PUSH
40456: LD_EXP 120
40460: PUSH
40461: LD_VAR 0 1
40465: ARRAY
40466: PUSH
40467: LD_VAR 0 2
40471: ARRAY
40472: PUSH
40473: LD_INT 1
40475: ARRAY
40476: PPUSH
40477: LD_EXP 120
40481: PUSH
40482: LD_VAR 0 1
40486: ARRAY
40487: PUSH
40488: LD_VAR 0 2
40492: ARRAY
40493: PUSH
40494: LD_INT 2
40496: ARRAY
40497: PPUSH
40498: CALL_OW 428
40502: ST_TO_ADDR
// if not tmp then
40503: LD_VAR 0 4
40507: NOT
40508: IFFALSE 40512
// continue ;
40510: GO 40427
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40512: LD_VAR 0 4
40516: PUSH
40517: LD_INT 81
40519: PUSH
40520: LD_VAR 0 3
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PPUSH
40529: CALL_OW 69
40533: IN
40534: PUSH
40535: LD_EXP 120
40539: PUSH
40540: LD_VAR 0 1
40544: ARRAY
40545: PUSH
40546: LD_VAR 0 2
40550: ARRAY
40551: PUSH
40552: LD_INT 1
40554: ARRAY
40555: PPUSH
40556: LD_EXP 120
40560: PUSH
40561: LD_VAR 0 1
40565: ARRAY
40566: PUSH
40567: LD_VAR 0 2
40571: ARRAY
40572: PUSH
40573: LD_INT 2
40575: ARRAY
40576: PPUSH
40577: CALL_OW 458
40581: AND
40582: IFFALSE 40676
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40584: LD_EXP 120
40588: PUSH
40589: LD_VAR 0 1
40593: ARRAY
40594: PUSH
40595: LD_VAR 0 2
40599: ARRAY
40600: PUSH
40601: LD_INT 1
40603: ARRAY
40604: PPUSH
40605: LD_EXP 120
40609: PUSH
40610: LD_VAR 0 1
40614: ARRAY
40615: PUSH
40616: LD_VAR 0 2
40620: ARRAY
40621: PUSH
40622: LD_INT 2
40624: ARRAY
40625: PPUSH
40626: LD_VAR 0 3
40630: PPUSH
40631: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40635: LD_ADDR_EXP 120
40639: PUSH
40640: LD_EXP 120
40644: PPUSH
40645: LD_VAR 0 1
40649: PPUSH
40650: LD_EXP 120
40654: PUSH
40655: LD_VAR 0 1
40659: ARRAY
40660: PPUSH
40661: LD_VAR 0 2
40665: PPUSH
40666: CALL_OW 3
40670: PPUSH
40671: CALL_OW 1
40675: ST_TO_ADDR
// end ; end ;
40676: GO 40427
40678: POP
40679: POP
// end ;
40680: GO 40345
40682: POP
40683: POP
// end ;
40684: PPOPN 4
40686: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40687: LD_INT 0
40689: PPUSH
40690: PPUSH
// result := false ;
40691: LD_ADDR_VAR 0 4
40695: PUSH
40696: LD_INT 0
40698: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40699: LD_VAR 0 1
40703: PPUSH
40704: CALL_OW 264
40708: PUSH
40709: LD_INT 81
40711: EQUAL
40712: NOT
40713: IFFALSE 40717
// exit ;
40715: GO 40957
// index := GetElementIndex ( minersList , unit ) ;
40717: LD_ADDR_VAR 0 5
40721: PUSH
40722: LD_EXP 119
40726: PPUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL 46915 0 2
40736: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40737: LD_EXP 120
40741: PUSH
40742: LD_VAR 0 5
40746: ARRAY
40747: PUSH
40748: LD_EXP 121
40752: GREATEREQUAL
40753: IFFALSE 40757
// exit ;
40755: GO 40957
// ComMoveXY ( unit , x , y ) ;
40757: LD_VAR 0 1
40761: PPUSH
40762: LD_VAR 0 2
40766: PPUSH
40767: LD_VAR 0 3
40771: PPUSH
40772: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40776: LD_INT 35
40778: PPUSH
40779: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40783: LD_VAR 0 1
40787: PPUSH
40788: LD_VAR 0 2
40792: PPUSH
40793: LD_VAR 0 3
40797: PPUSH
40798: CALL 78667 0 3
40802: NOT
40803: PUSH
40804: LD_VAR 0 1
40808: PPUSH
40809: CALL_OW 314
40813: AND
40814: IFFALSE 40818
// exit ;
40816: GO 40957
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40818: LD_VAR 0 2
40822: PPUSH
40823: LD_VAR 0 3
40827: PPUSH
40828: CALL_OW 428
40832: PUSH
40833: LD_VAR 0 1
40837: EQUAL
40838: PUSH
40839: LD_VAR 0 1
40843: PPUSH
40844: CALL_OW 314
40848: NOT
40849: AND
40850: IFFALSE 40776
// PlaySoundXY ( x , y , PlantMine ) ;
40852: LD_VAR 0 2
40856: PPUSH
40857: LD_VAR 0 3
40861: PPUSH
40862: LD_STRING PlantMine
40864: PPUSH
40865: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40869: LD_VAR 0 2
40873: PPUSH
40874: LD_VAR 0 3
40878: PPUSH
40879: LD_VAR 0 1
40883: PPUSH
40884: CALL_OW 255
40888: PPUSH
40889: LD_INT 0
40891: PPUSH
40892: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40896: LD_ADDR_EXP 120
40900: PUSH
40901: LD_EXP 120
40905: PPUSH
40906: LD_VAR 0 5
40910: PUSH
40911: LD_EXP 120
40915: PUSH
40916: LD_VAR 0 5
40920: ARRAY
40921: PUSH
40922: LD_INT 1
40924: PLUS
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PPUSH
40930: LD_VAR 0 2
40934: PUSH
40935: LD_VAR 0 3
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PPUSH
40944: CALL 47130 0 3
40948: ST_TO_ADDR
// result := true ;
40949: LD_ADDR_VAR 0 4
40953: PUSH
40954: LD_INT 1
40956: ST_TO_ADDR
// end ;
40957: LD_VAR 0 4
40961: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40962: LD_INT 0
40964: PPUSH
40965: PPUSH
40966: PPUSH
// if not unit in minersList then
40967: LD_VAR 0 1
40971: PUSH
40972: LD_EXP 119
40976: IN
40977: NOT
40978: IFFALSE 40982
// exit ;
40980: GO 41374
// index := GetElementIndex ( minersList , unit ) ;
40982: LD_ADDR_VAR 0 6
40986: PUSH
40987: LD_EXP 119
40991: PPUSH
40992: LD_VAR 0 1
40996: PPUSH
40997: CALL 46915 0 2
41001: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
41002: LD_ADDR_VAR 0 5
41006: PUSH
41007: DOUBLE
41008: LD_EXP 120
41012: PUSH
41013: LD_VAR 0 6
41017: ARRAY
41018: INC
41019: ST_TO_ADDR
41020: LD_INT 1
41022: PUSH
41023: FOR_DOWNTO
41024: IFFALSE 41185
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
41026: LD_EXP 120
41030: PUSH
41031: LD_VAR 0 6
41035: ARRAY
41036: PUSH
41037: LD_VAR 0 5
41041: ARRAY
41042: PUSH
41043: LD_INT 1
41045: ARRAY
41046: PUSH
41047: LD_VAR 0 2
41051: EQUAL
41052: PUSH
41053: LD_EXP 120
41057: PUSH
41058: LD_VAR 0 6
41062: ARRAY
41063: PUSH
41064: LD_VAR 0 5
41068: ARRAY
41069: PUSH
41070: LD_INT 2
41072: ARRAY
41073: PUSH
41074: LD_VAR 0 3
41078: EQUAL
41079: AND
41080: IFFALSE 41183
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41082: LD_EXP 120
41086: PUSH
41087: LD_VAR 0 6
41091: ARRAY
41092: PUSH
41093: LD_VAR 0 5
41097: ARRAY
41098: PUSH
41099: LD_INT 1
41101: ARRAY
41102: PPUSH
41103: LD_EXP 120
41107: PUSH
41108: LD_VAR 0 6
41112: ARRAY
41113: PUSH
41114: LD_VAR 0 5
41118: ARRAY
41119: PUSH
41120: LD_INT 2
41122: ARRAY
41123: PPUSH
41124: LD_VAR 0 1
41128: PPUSH
41129: CALL_OW 255
41133: PPUSH
41134: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41138: LD_ADDR_EXP 120
41142: PUSH
41143: LD_EXP 120
41147: PPUSH
41148: LD_VAR 0 6
41152: PPUSH
41153: LD_EXP 120
41157: PUSH
41158: LD_VAR 0 6
41162: ARRAY
41163: PPUSH
41164: LD_VAR 0 5
41168: PPUSH
41169: CALL_OW 3
41173: PPUSH
41174: CALL_OW 1
41178: ST_TO_ADDR
// exit ;
41179: POP
41180: POP
41181: GO 41374
// end ; end ;
41183: GO 41023
41185: POP
41186: POP
// for i := minerMinesList [ index ] downto 1 do
41187: LD_ADDR_VAR 0 5
41191: PUSH
41192: DOUBLE
41193: LD_EXP 120
41197: PUSH
41198: LD_VAR 0 6
41202: ARRAY
41203: INC
41204: ST_TO_ADDR
41205: LD_INT 1
41207: PUSH
41208: FOR_DOWNTO
41209: IFFALSE 41372
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41211: LD_EXP 120
41215: PUSH
41216: LD_VAR 0 6
41220: ARRAY
41221: PUSH
41222: LD_VAR 0 5
41226: ARRAY
41227: PUSH
41228: LD_INT 1
41230: ARRAY
41231: PPUSH
41232: LD_EXP 120
41236: PUSH
41237: LD_VAR 0 6
41241: ARRAY
41242: PUSH
41243: LD_VAR 0 5
41247: ARRAY
41248: PUSH
41249: LD_INT 2
41251: ARRAY
41252: PPUSH
41253: LD_VAR 0 2
41257: PPUSH
41258: LD_VAR 0 3
41262: PPUSH
41263: CALL_OW 298
41267: PUSH
41268: LD_INT 6
41270: LESS
41271: IFFALSE 41370
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41273: LD_EXP 120
41277: PUSH
41278: LD_VAR 0 6
41282: ARRAY
41283: PUSH
41284: LD_VAR 0 5
41288: ARRAY
41289: PUSH
41290: LD_INT 1
41292: ARRAY
41293: PPUSH
41294: LD_EXP 120
41298: PUSH
41299: LD_VAR 0 6
41303: ARRAY
41304: PUSH
41305: LD_VAR 0 5
41309: ARRAY
41310: PUSH
41311: LD_INT 2
41313: ARRAY
41314: PPUSH
41315: LD_VAR 0 1
41319: PPUSH
41320: CALL_OW 255
41324: PPUSH
41325: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41329: LD_ADDR_EXP 120
41333: PUSH
41334: LD_EXP 120
41338: PPUSH
41339: LD_VAR 0 6
41343: PPUSH
41344: LD_EXP 120
41348: PUSH
41349: LD_VAR 0 6
41353: ARRAY
41354: PPUSH
41355: LD_VAR 0 5
41359: PPUSH
41360: CALL_OW 3
41364: PPUSH
41365: CALL_OW 1
41369: ST_TO_ADDR
// end ; end ;
41370: GO 41208
41372: POP
41373: POP
// end ;
41374: LD_VAR 0 4
41378: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41379: LD_INT 0
41381: PPUSH
41382: PPUSH
41383: PPUSH
41384: PPUSH
41385: PPUSH
41386: PPUSH
41387: PPUSH
41388: PPUSH
41389: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41390: LD_VAR 0 1
41394: PPUSH
41395: CALL_OW 264
41399: PUSH
41400: LD_INT 81
41402: EQUAL
41403: NOT
41404: PUSH
41405: LD_VAR 0 1
41409: PUSH
41410: LD_EXP 119
41414: IN
41415: NOT
41416: OR
41417: IFFALSE 41421
// exit ;
41419: GO 41743
// index := GetElementIndex ( minersList , unit ) ;
41421: LD_ADDR_VAR 0 6
41425: PUSH
41426: LD_EXP 119
41430: PPUSH
41431: LD_VAR 0 1
41435: PPUSH
41436: CALL 46915 0 2
41440: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41441: LD_ADDR_VAR 0 8
41445: PUSH
41446: LD_EXP 121
41450: PUSH
41451: LD_EXP 120
41455: PUSH
41456: LD_VAR 0 6
41460: ARRAY
41461: MINUS
41462: ST_TO_ADDR
// if not minesFreeAmount then
41463: LD_VAR 0 8
41467: NOT
41468: IFFALSE 41472
// exit ;
41470: GO 41743
// tmp := [ ] ;
41472: LD_ADDR_VAR 0 7
41476: PUSH
41477: EMPTY
41478: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41479: LD_ADDR_VAR 0 5
41483: PUSH
41484: DOUBLE
41485: LD_INT 1
41487: DEC
41488: ST_TO_ADDR
41489: LD_VAR 0 8
41493: PUSH
41494: FOR_TO
41495: IFFALSE 41690
// begin _d := rand ( 0 , 5 ) ;
41497: LD_ADDR_VAR 0 11
41501: PUSH
41502: LD_INT 0
41504: PPUSH
41505: LD_INT 5
41507: PPUSH
41508: CALL_OW 12
41512: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41513: LD_ADDR_VAR 0 12
41517: PUSH
41518: LD_INT 2
41520: PPUSH
41521: LD_INT 6
41523: PPUSH
41524: CALL_OW 12
41528: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41529: LD_ADDR_VAR 0 9
41533: PUSH
41534: LD_VAR 0 2
41538: PPUSH
41539: LD_VAR 0 11
41543: PPUSH
41544: LD_VAR 0 12
41548: PPUSH
41549: CALL_OW 272
41553: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41554: LD_ADDR_VAR 0 10
41558: PUSH
41559: LD_VAR 0 3
41563: PPUSH
41564: LD_VAR 0 11
41568: PPUSH
41569: LD_VAR 0 12
41573: PPUSH
41574: CALL_OW 273
41578: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41579: LD_VAR 0 9
41583: PPUSH
41584: LD_VAR 0 10
41588: PPUSH
41589: CALL_OW 488
41593: PUSH
41594: LD_VAR 0 9
41598: PUSH
41599: LD_VAR 0 10
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_VAR 0 7
41612: IN
41613: NOT
41614: AND
41615: PUSH
41616: LD_VAR 0 9
41620: PPUSH
41621: LD_VAR 0 10
41625: PPUSH
41626: CALL_OW 458
41630: NOT
41631: AND
41632: IFFALSE 41674
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41634: LD_ADDR_VAR 0 7
41638: PUSH
41639: LD_VAR 0 7
41643: PPUSH
41644: LD_VAR 0 7
41648: PUSH
41649: LD_INT 1
41651: PLUS
41652: PPUSH
41653: LD_VAR 0 9
41657: PUSH
41658: LD_VAR 0 10
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PPUSH
41667: CALL_OW 1
41671: ST_TO_ADDR
41672: GO 41688
// i := i - 1 ;
41674: LD_ADDR_VAR 0 5
41678: PUSH
41679: LD_VAR 0 5
41683: PUSH
41684: LD_INT 1
41686: MINUS
41687: ST_TO_ADDR
// end ;
41688: GO 41494
41690: POP
41691: POP
// for i in tmp do
41692: LD_ADDR_VAR 0 5
41696: PUSH
41697: LD_VAR 0 7
41701: PUSH
41702: FOR_IN
41703: IFFALSE 41741
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41705: LD_VAR 0 1
41709: PPUSH
41710: LD_VAR 0 5
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: PPUSH
41719: LD_VAR 0 5
41723: PUSH
41724: LD_INT 2
41726: ARRAY
41727: PPUSH
41728: CALL 40687 0 3
41732: NOT
41733: IFFALSE 41739
// exit ;
41735: POP
41736: POP
41737: GO 41743
41739: GO 41702
41741: POP
41742: POP
// end ;
41743: LD_VAR 0 4
41747: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41748: LD_INT 0
41750: PPUSH
41751: PPUSH
41752: PPUSH
41753: PPUSH
41754: PPUSH
41755: PPUSH
41756: PPUSH
// if not GetClass ( unit ) = class_sniper then
41757: LD_VAR 0 1
41761: PPUSH
41762: CALL_OW 257
41766: PUSH
41767: LD_INT 5
41769: EQUAL
41770: NOT
41771: IFFALSE 41775
// exit ;
41773: GO 42163
// dist := 8 ;
41775: LD_ADDR_VAR 0 5
41779: PUSH
41780: LD_INT 8
41782: ST_TO_ADDR
// viewRange := 12 ;
41783: LD_ADDR_VAR 0 7
41787: PUSH
41788: LD_INT 12
41790: ST_TO_ADDR
// side := GetSide ( unit ) ;
41791: LD_ADDR_VAR 0 6
41795: PUSH
41796: LD_VAR 0 1
41800: PPUSH
41801: CALL_OW 255
41805: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41806: LD_INT 61
41808: PPUSH
41809: LD_VAR 0 6
41813: PPUSH
41814: CALL_OW 321
41818: PUSH
41819: LD_INT 2
41821: EQUAL
41822: IFFALSE 41832
// viewRange := 16 ;
41824: LD_ADDR_VAR 0 7
41828: PUSH
41829: LD_INT 16
41831: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41832: LD_VAR 0 1
41836: PPUSH
41837: LD_VAR 0 2
41841: PPUSH
41842: LD_VAR 0 3
41846: PPUSH
41847: CALL_OW 297
41851: PUSH
41852: LD_VAR 0 5
41856: GREATER
41857: IFFALSE 41936
// begin ComMoveXY ( unit , x , y ) ;
41859: LD_VAR 0 1
41863: PPUSH
41864: LD_VAR 0 2
41868: PPUSH
41869: LD_VAR 0 3
41873: PPUSH
41874: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41878: LD_INT 35
41880: PPUSH
41881: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41885: LD_VAR 0 1
41889: PPUSH
41890: LD_VAR 0 2
41894: PPUSH
41895: LD_VAR 0 3
41899: PPUSH
41900: CALL 78667 0 3
41904: NOT
41905: IFFALSE 41909
// exit ;
41907: GO 42163
// until GetDistUnitXY ( unit , x , y ) < dist ;
41909: LD_VAR 0 1
41913: PPUSH
41914: LD_VAR 0 2
41918: PPUSH
41919: LD_VAR 0 3
41923: PPUSH
41924: CALL_OW 297
41928: PUSH
41929: LD_VAR 0 5
41933: LESS
41934: IFFALSE 41878
// end ; ComTurnXY ( unit , x , y ) ;
41936: LD_VAR 0 1
41940: PPUSH
41941: LD_VAR 0 2
41945: PPUSH
41946: LD_VAR 0 3
41950: PPUSH
41951: CALL_OW 118
// wait ( 5 ) ;
41955: LD_INT 5
41957: PPUSH
41958: CALL_OW 67
// _d := GetDir ( unit ) ;
41962: LD_ADDR_VAR 0 10
41966: PUSH
41967: LD_VAR 0 1
41971: PPUSH
41972: CALL_OW 254
41976: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41977: LD_ADDR_VAR 0 8
41981: PUSH
41982: LD_VAR 0 1
41986: PPUSH
41987: CALL_OW 250
41991: PPUSH
41992: LD_VAR 0 10
41996: PPUSH
41997: LD_VAR 0 5
42001: PPUSH
42002: CALL_OW 272
42006: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
42007: LD_ADDR_VAR 0 9
42011: PUSH
42012: LD_VAR 0 1
42016: PPUSH
42017: CALL_OW 251
42021: PPUSH
42022: LD_VAR 0 10
42026: PPUSH
42027: LD_VAR 0 5
42031: PPUSH
42032: CALL_OW 273
42036: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42037: LD_VAR 0 8
42041: PPUSH
42042: LD_VAR 0 9
42046: PPUSH
42047: CALL_OW 488
42051: NOT
42052: IFFALSE 42056
// exit ;
42054: GO 42163
// ComAnimCustom ( unit , 1 ) ;
42056: LD_VAR 0 1
42060: PPUSH
42061: LD_INT 1
42063: PPUSH
42064: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
42068: LD_VAR 0 8
42072: PPUSH
42073: LD_VAR 0 9
42077: PPUSH
42078: LD_VAR 0 6
42082: PPUSH
42083: LD_VAR 0 7
42087: PPUSH
42088: CALL_OW 330
// repeat wait ( 1 ) ;
42092: LD_INT 1
42094: PPUSH
42095: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
42099: LD_VAR 0 1
42103: PPUSH
42104: CALL_OW 316
42108: PUSH
42109: LD_VAR 0 1
42113: PPUSH
42114: CALL_OW 314
42118: OR
42119: PUSH
42120: LD_VAR 0 1
42124: PPUSH
42125: CALL_OW 302
42129: NOT
42130: OR
42131: PUSH
42132: LD_VAR 0 1
42136: PPUSH
42137: CALL_OW 301
42141: OR
42142: IFFALSE 42092
// RemoveSeeing ( _x , _y , side ) ;
42144: LD_VAR 0 8
42148: PPUSH
42149: LD_VAR 0 9
42153: PPUSH
42154: LD_VAR 0 6
42158: PPUSH
42159: CALL_OW 331
// end ; end_of_file
42163: LD_VAR 0 4
42167: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42168: LD_INT 0
42170: PPUSH
42171: PPUSH
// if exist_mode then
42172: LD_VAR 0 2
42176: IFFALSE 42201
// unit := CreateCharacter ( prefix & ident ) else
42178: LD_ADDR_VAR 0 5
42182: PUSH
42183: LD_VAR 0 3
42187: PUSH
42188: LD_VAR 0 1
42192: STR
42193: PPUSH
42194: CALL_OW 34
42198: ST_TO_ADDR
42199: GO 42216
// unit := NewCharacter ( ident ) ;
42201: LD_ADDR_VAR 0 5
42205: PUSH
42206: LD_VAR 0 1
42210: PPUSH
42211: CALL_OW 25
42215: ST_TO_ADDR
// result := unit ;
42216: LD_ADDR_VAR 0 4
42220: PUSH
42221: LD_VAR 0 5
42225: ST_TO_ADDR
// end ;
42226: LD_VAR 0 4
42230: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42231: LD_INT 0
42233: PPUSH
42234: PPUSH
// if not side or not nation then
42235: LD_VAR 0 1
42239: NOT
42240: PUSH
42241: LD_VAR 0 2
42245: NOT
42246: OR
42247: IFFALSE 42251
// exit ;
42249: GO 43019
// case nation of nation_american :
42251: LD_VAR 0 2
42255: PUSH
42256: LD_INT 1
42258: DOUBLE
42259: EQUAL
42260: IFTRUE 42264
42262: GO 42478
42264: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
42265: LD_ADDR_VAR 0 4
42269: PUSH
42270: LD_INT 35
42272: PUSH
42273: LD_INT 45
42275: PUSH
42276: LD_INT 46
42278: PUSH
42279: LD_INT 47
42281: PUSH
42282: LD_INT 82
42284: PUSH
42285: LD_INT 83
42287: PUSH
42288: LD_INT 84
42290: PUSH
42291: LD_INT 85
42293: PUSH
42294: LD_INT 86
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: LD_INT 6
42305: PUSH
42306: LD_INT 15
42308: PUSH
42309: LD_INT 16
42311: PUSH
42312: LD_INT 7
42314: PUSH
42315: LD_INT 12
42317: PUSH
42318: LD_INT 13
42320: PUSH
42321: LD_INT 10
42323: PUSH
42324: LD_INT 14
42326: PUSH
42327: LD_INT 20
42329: PUSH
42330: LD_INT 21
42332: PUSH
42333: LD_INT 22
42335: PUSH
42336: LD_INT 25
42338: PUSH
42339: LD_INT 32
42341: PUSH
42342: LD_INT 27
42344: PUSH
42345: LD_INT 36
42347: PUSH
42348: LD_INT 69
42350: PUSH
42351: LD_INT 39
42353: PUSH
42354: LD_INT 34
42356: PUSH
42357: LD_INT 40
42359: PUSH
42360: LD_INT 48
42362: PUSH
42363: LD_INT 49
42365: PUSH
42366: LD_INT 50
42368: PUSH
42369: LD_INT 51
42371: PUSH
42372: LD_INT 52
42374: PUSH
42375: LD_INT 53
42377: PUSH
42378: LD_INT 54
42380: PUSH
42381: LD_INT 55
42383: PUSH
42384: LD_INT 56
42386: PUSH
42387: LD_INT 57
42389: PUSH
42390: LD_INT 58
42392: PUSH
42393: LD_INT 59
42395: PUSH
42396: LD_INT 60
42398: PUSH
42399: LD_INT 61
42401: PUSH
42402: LD_INT 62
42404: PUSH
42405: LD_INT 80
42407: PUSH
42408: LD_INT 82
42410: PUSH
42411: LD_INT 83
42413: PUSH
42414: LD_INT 84
42416: PUSH
42417: LD_INT 85
42419: PUSH
42420: LD_INT 86
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: ST_TO_ADDR
42476: GO 42943
42478: LD_INT 2
42480: DOUBLE
42481: EQUAL
42482: IFTRUE 42486
42484: GO 42712
42486: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42487: LD_ADDR_VAR 0 4
42491: PUSH
42492: LD_INT 35
42494: PUSH
42495: LD_INT 45
42497: PUSH
42498: LD_INT 46
42500: PUSH
42501: LD_INT 47
42503: PUSH
42504: LD_INT 82
42506: PUSH
42507: LD_INT 83
42509: PUSH
42510: LD_INT 84
42512: PUSH
42513: LD_INT 85
42515: PUSH
42516: LD_INT 87
42518: PUSH
42519: LD_INT 70
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: LD_INT 11
42527: PUSH
42528: LD_INT 3
42530: PUSH
42531: LD_INT 4
42533: PUSH
42534: LD_INT 5
42536: PUSH
42537: LD_INT 6
42539: PUSH
42540: LD_INT 15
42542: PUSH
42543: LD_INT 18
42545: PUSH
42546: LD_INT 7
42548: PUSH
42549: LD_INT 17
42551: PUSH
42552: LD_INT 8
42554: PUSH
42555: LD_INT 20
42557: PUSH
42558: LD_INT 21
42560: PUSH
42561: LD_INT 22
42563: PUSH
42564: LD_INT 72
42566: PUSH
42567: LD_INT 26
42569: PUSH
42570: LD_INT 69
42572: PUSH
42573: LD_INT 39
42575: PUSH
42576: LD_INT 40
42578: PUSH
42579: LD_INT 41
42581: PUSH
42582: LD_INT 42
42584: PUSH
42585: LD_INT 43
42587: PUSH
42588: LD_INT 48
42590: PUSH
42591: LD_INT 49
42593: PUSH
42594: LD_INT 50
42596: PUSH
42597: LD_INT 51
42599: PUSH
42600: LD_INT 52
42602: PUSH
42603: LD_INT 53
42605: PUSH
42606: LD_INT 54
42608: PUSH
42609: LD_INT 55
42611: PUSH
42612: LD_INT 56
42614: PUSH
42615: LD_INT 60
42617: PUSH
42618: LD_INT 61
42620: PUSH
42621: LD_INT 62
42623: PUSH
42624: LD_INT 66
42626: PUSH
42627: LD_INT 67
42629: PUSH
42630: LD_INT 68
42632: PUSH
42633: LD_INT 81
42635: PUSH
42636: LD_INT 82
42638: PUSH
42639: LD_INT 83
42641: PUSH
42642: LD_INT 84
42644: PUSH
42645: LD_INT 85
42647: PUSH
42648: LD_INT 87
42650: PUSH
42651: LD_INT 88
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: ST_TO_ADDR
42710: GO 42943
42712: LD_INT 3
42714: DOUBLE
42715: EQUAL
42716: IFTRUE 42720
42718: GO 42942
42720: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42721: LD_ADDR_VAR 0 4
42725: PUSH
42726: LD_INT 46
42728: PUSH
42729: LD_INT 47
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: LD_INT 82
42740: PUSH
42741: LD_INT 83
42743: PUSH
42744: LD_INT 84
42746: PUSH
42747: LD_INT 85
42749: PUSH
42750: LD_INT 86
42752: PUSH
42753: LD_INT 11
42755: PUSH
42756: LD_INT 9
42758: PUSH
42759: LD_INT 20
42761: PUSH
42762: LD_INT 19
42764: PUSH
42765: LD_INT 21
42767: PUSH
42768: LD_INT 24
42770: PUSH
42771: LD_INT 22
42773: PUSH
42774: LD_INT 25
42776: PUSH
42777: LD_INT 28
42779: PUSH
42780: LD_INT 29
42782: PUSH
42783: LD_INT 30
42785: PUSH
42786: LD_INT 31
42788: PUSH
42789: LD_INT 37
42791: PUSH
42792: LD_INT 38
42794: PUSH
42795: LD_INT 32
42797: PUSH
42798: LD_INT 27
42800: PUSH
42801: LD_INT 33
42803: PUSH
42804: LD_INT 69
42806: PUSH
42807: LD_INT 39
42809: PUSH
42810: LD_INT 34
42812: PUSH
42813: LD_INT 40
42815: PUSH
42816: LD_INT 71
42818: PUSH
42819: LD_INT 23
42821: PUSH
42822: LD_INT 44
42824: PUSH
42825: LD_INT 48
42827: PUSH
42828: LD_INT 49
42830: PUSH
42831: LD_INT 50
42833: PUSH
42834: LD_INT 51
42836: PUSH
42837: LD_INT 52
42839: PUSH
42840: LD_INT 53
42842: PUSH
42843: LD_INT 54
42845: PUSH
42846: LD_INT 55
42848: PUSH
42849: LD_INT 56
42851: PUSH
42852: LD_INT 57
42854: PUSH
42855: LD_INT 58
42857: PUSH
42858: LD_INT 59
42860: PUSH
42861: LD_INT 63
42863: PUSH
42864: LD_INT 64
42866: PUSH
42867: LD_INT 65
42869: PUSH
42870: LD_INT 82
42872: PUSH
42873: LD_INT 83
42875: PUSH
42876: LD_INT 84
42878: PUSH
42879: LD_INT 85
42881: PUSH
42882: LD_INT 86
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: ST_TO_ADDR
42940: GO 42943
42942: POP
// if state > - 1 and state < 3 then
42943: LD_VAR 0 3
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: GREATER
42952: PUSH
42953: LD_VAR 0 3
42957: PUSH
42958: LD_INT 3
42960: LESS
42961: AND
42962: IFFALSE 43019
// for i in result do
42964: LD_ADDR_VAR 0 5
42968: PUSH
42969: LD_VAR 0 4
42973: PUSH
42974: FOR_IN
42975: IFFALSE 43017
// if GetTech ( i , side ) <> state then
42977: LD_VAR 0 5
42981: PPUSH
42982: LD_VAR 0 1
42986: PPUSH
42987: CALL_OW 321
42991: PUSH
42992: LD_VAR 0 3
42996: NONEQUAL
42997: IFFALSE 43015
// result := result diff i ;
42999: LD_ADDR_VAR 0 4
43003: PUSH
43004: LD_VAR 0 4
43008: PUSH
43009: LD_VAR 0 5
43013: DIFF
43014: ST_TO_ADDR
43015: GO 42974
43017: POP
43018: POP
// end ;
43019: LD_VAR 0 4
43023: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43024: LD_INT 0
43026: PPUSH
43027: PPUSH
43028: PPUSH
// result := true ;
43029: LD_ADDR_VAR 0 3
43033: PUSH
43034: LD_INT 1
43036: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43037: LD_ADDR_VAR 0 5
43041: PUSH
43042: LD_VAR 0 2
43046: PPUSH
43047: CALL_OW 480
43051: ST_TO_ADDR
// if not tmp then
43052: LD_VAR 0 5
43056: NOT
43057: IFFALSE 43061
// exit ;
43059: GO 43110
// for i in tmp do
43061: LD_ADDR_VAR 0 4
43065: PUSH
43066: LD_VAR 0 5
43070: PUSH
43071: FOR_IN
43072: IFFALSE 43108
// if GetTech ( i , side ) <> state_researched then
43074: LD_VAR 0 4
43078: PPUSH
43079: LD_VAR 0 1
43083: PPUSH
43084: CALL_OW 321
43088: PUSH
43089: LD_INT 2
43091: NONEQUAL
43092: IFFALSE 43106
// begin result := false ;
43094: LD_ADDR_VAR 0 3
43098: PUSH
43099: LD_INT 0
43101: ST_TO_ADDR
// exit ;
43102: POP
43103: POP
43104: GO 43110
// end ;
43106: GO 43071
43108: POP
43109: POP
// end ;
43110: LD_VAR 0 3
43114: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43115: LD_INT 0
43117: PPUSH
43118: PPUSH
43119: PPUSH
43120: PPUSH
43121: PPUSH
43122: PPUSH
43123: PPUSH
43124: PPUSH
43125: PPUSH
43126: PPUSH
43127: PPUSH
43128: PPUSH
43129: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43130: LD_VAR 0 1
43134: NOT
43135: PUSH
43136: LD_VAR 0 1
43140: PPUSH
43141: CALL_OW 257
43145: PUSH
43146: LD_INT 9
43148: NONEQUAL
43149: OR
43150: IFFALSE 43154
// exit ;
43152: GO 43727
// side := GetSide ( unit ) ;
43154: LD_ADDR_VAR 0 9
43158: PUSH
43159: LD_VAR 0 1
43163: PPUSH
43164: CALL_OW 255
43168: ST_TO_ADDR
// tech_space := tech_spacanom ;
43169: LD_ADDR_VAR 0 12
43173: PUSH
43174: LD_INT 29
43176: ST_TO_ADDR
// tech_time := tech_taurad ;
43177: LD_ADDR_VAR 0 13
43181: PUSH
43182: LD_INT 28
43184: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43185: LD_ADDR_VAR 0 11
43189: PUSH
43190: LD_VAR 0 1
43194: PPUSH
43195: CALL_OW 310
43199: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43200: LD_VAR 0 11
43204: PPUSH
43205: CALL_OW 247
43209: PUSH
43210: LD_INT 2
43212: EQUAL
43213: IFFALSE 43217
// exit ;
43215: GO 43727
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43217: LD_ADDR_VAR 0 8
43221: PUSH
43222: LD_INT 81
43224: PUSH
43225: LD_VAR 0 9
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 3
43236: PUSH
43237: LD_INT 21
43239: PUSH
43240: LD_INT 3
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PPUSH
43255: CALL_OW 69
43259: ST_TO_ADDR
// if not tmp then
43260: LD_VAR 0 8
43264: NOT
43265: IFFALSE 43269
// exit ;
43267: GO 43727
// if in_unit then
43269: LD_VAR 0 11
43273: IFFALSE 43297
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43275: LD_ADDR_VAR 0 10
43279: PUSH
43280: LD_VAR 0 8
43284: PPUSH
43285: LD_VAR 0 11
43289: PPUSH
43290: CALL_OW 74
43294: ST_TO_ADDR
43295: GO 43317
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43297: LD_ADDR_VAR 0 10
43301: PUSH
43302: LD_VAR 0 8
43306: PPUSH
43307: LD_VAR 0 1
43311: PPUSH
43312: CALL_OW 74
43316: ST_TO_ADDR
// if not enemy then
43317: LD_VAR 0 10
43321: NOT
43322: IFFALSE 43326
// exit ;
43324: GO 43727
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43326: LD_VAR 0 11
43330: PUSH
43331: LD_VAR 0 11
43335: PPUSH
43336: LD_VAR 0 10
43340: PPUSH
43341: CALL_OW 296
43345: PUSH
43346: LD_INT 13
43348: GREATER
43349: AND
43350: PUSH
43351: LD_VAR 0 1
43355: PPUSH
43356: LD_VAR 0 10
43360: PPUSH
43361: CALL_OW 296
43365: PUSH
43366: LD_INT 12
43368: GREATER
43369: OR
43370: IFFALSE 43374
// exit ;
43372: GO 43727
// missile := [ 1 ] ;
43374: LD_ADDR_VAR 0 14
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: EMPTY
43383: LIST
43384: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43385: LD_VAR 0 9
43389: PPUSH
43390: LD_VAR 0 12
43394: PPUSH
43395: CALL_OW 325
43399: IFFALSE 43428
// missile := Replace ( missile , missile + 1 , 2 ) ;
43401: LD_ADDR_VAR 0 14
43405: PUSH
43406: LD_VAR 0 14
43410: PPUSH
43411: LD_VAR 0 14
43415: PUSH
43416: LD_INT 1
43418: PLUS
43419: PPUSH
43420: LD_INT 2
43422: PPUSH
43423: CALL_OW 1
43427: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43428: LD_VAR 0 9
43432: PPUSH
43433: LD_VAR 0 13
43437: PPUSH
43438: CALL_OW 325
43442: PUSH
43443: LD_VAR 0 10
43447: PPUSH
43448: CALL_OW 255
43452: PPUSH
43453: LD_VAR 0 13
43457: PPUSH
43458: CALL_OW 325
43462: NOT
43463: AND
43464: IFFALSE 43493
// missile := Replace ( missile , missile + 1 , 3 ) ;
43466: LD_ADDR_VAR 0 14
43470: PUSH
43471: LD_VAR 0 14
43475: PPUSH
43476: LD_VAR 0 14
43480: PUSH
43481: LD_INT 1
43483: PLUS
43484: PPUSH
43485: LD_INT 3
43487: PPUSH
43488: CALL_OW 1
43492: ST_TO_ADDR
// if missile < 2 then
43493: LD_VAR 0 14
43497: PUSH
43498: LD_INT 2
43500: LESS
43501: IFFALSE 43505
// exit ;
43503: GO 43727
// x := GetX ( enemy ) ;
43505: LD_ADDR_VAR 0 4
43509: PUSH
43510: LD_VAR 0 10
43514: PPUSH
43515: CALL_OW 250
43519: ST_TO_ADDR
// y := GetY ( enemy ) ;
43520: LD_ADDR_VAR 0 5
43524: PUSH
43525: LD_VAR 0 10
43529: PPUSH
43530: CALL_OW 251
43534: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43535: LD_ADDR_VAR 0 6
43539: PUSH
43540: LD_VAR 0 4
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PPUSH
43549: LD_INT 1
43551: PPUSH
43552: CALL_OW 12
43556: PLUS
43557: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43558: LD_ADDR_VAR 0 7
43562: PUSH
43563: LD_VAR 0 5
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PPUSH
43572: LD_INT 1
43574: PPUSH
43575: CALL_OW 12
43579: PLUS
43580: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43581: LD_VAR 0 6
43585: PPUSH
43586: LD_VAR 0 7
43590: PPUSH
43591: CALL_OW 488
43595: NOT
43596: IFFALSE 43618
// begin _x := x ;
43598: LD_ADDR_VAR 0 6
43602: PUSH
43603: LD_VAR 0 4
43607: ST_TO_ADDR
// _y := y ;
43608: LD_ADDR_VAR 0 7
43612: PUSH
43613: LD_VAR 0 5
43617: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43618: LD_ADDR_VAR 0 3
43622: PUSH
43623: LD_INT 1
43625: PPUSH
43626: LD_VAR 0 14
43630: PPUSH
43631: CALL_OW 12
43635: ST_TO_ADDR
// case i of 1 :
43636: LD_VAR 0 3
43640: PUSH
43641: LD_INT 1
43643: DOUBLE
43644: EQUAL
43645: IFTRUE 43649
43647: GO 43666
43649: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43650: LD_VAR 0 1
43654: PPUSH
43655: LD_VAR 0 10
43659: PPUSH
43660: CALL_OW 115
43664: GO 43727
43666: LD_INT 2
43668: DOUBLE
43669: EQUAL
43670: IFTRUE 43674
43672: GO 43696
43674: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43675: LD_VAR 0 1
43679: PPUSH
43680: LD_VAR 0 6
43684: PPUSH
43685: LD_VAR 0 7
43689: PPUSH
43690: CALL_OW 153
43694: GO 43727
43696: LD_INT 3
43698: DOUBLE
43699: EQUAL
43700: IFTRUE 43704
43702: GO 43726
43704: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43705: LD_VAR 0 1
43709: PPUSH
43710: LD_VAR 0 6
43714: PPUSH
43715: LD_VAR 0 7
43719: PPUSH
43720: CALL_OW 154
43724: GO 43727
43726: POP
// end ;
43727: LD_VAR 0 2
43731: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43732: LD_INT 0
43734: PPUSH
43735: PPUSH
43736: PPUSH
43737: PPUSH
43738: PPUSH
43739: PPUSH
// if not unit or not building then
43740: LD_VAR 0 1
43744: NOT
43745: PUSH
43746: LD_VAR 0 2
43750: NOT
43751: OR
43752: IFFALSE 43756
// exit ;
43754: GO 43914
// x := GetX ( building ) ;
43756: LD_ADDR_VAR 0 5
43760: PUSH
43761: LD_VAR 0 2
43765: PPUSH
43766: CALL_OW 250
43770: ST_TO_ADDR
// y := GetY ( building ) ;
43771: LD_ADDR_VAR 0 6
43775: PUSH
43776: LD_VAR 0 2
43780: PPUSH
43781: CALL_OW 251
43785: ST_TO_ADDR
// for i = 0 to 5 do
43786: LD_ADDR_VAR 0 4
43790: PUSH
43791: DOUBLE
43792: LD_INT 0
43794: DEC
43795: ST_TO_ADDR
43796: LD_INT 5
43798: PUSH
43799: FOR_TO
43800: IFFALSE 43912
// begin _x := ShiftX ( x , i , 3 ) ;
43802: LD_ADDR_VAR 0 7
43806: PUSH
43807: LD_VAR 0 5
43811: PPUSH
43812: LD_VAR 0 4
43816: PPUSH
43817: LD_INT 3
43819: PPUSH
43820: CALL_OW 272
43824: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43825: LD_ADDR_VAR 0 8
43829: PUSH
43830: LD_VAR 0 6
43834: PPUSH
43835: LD_VAR 0 4
43839: PPUSH
43840: LD_INT 3
43842: PPUSH
43843: CALL_OW 273
43847: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43848: LD_VAR 0 7
43852: PPUSH
43853: LD_VAR 0 8
43857: PPUSH
43858: CALL_OW 488
43862: NOT
43863: IFFALSE 43867
// continue ;
43865: GO 43799
// if HexInfo ( _x , _y ) = 0 then
43867: LD_VAR 0 7
43871: PPUSH
43872: LD_VAR 0 8
43876: PPUSH
43877: CALL_OW 428
43881: PUSH
43882: LD_INT 0
43884: EQUAL
43885: IFFALSE 43910
// begin ComMoveXY ( unit , _x , _y ) ;
43887: LD_VAR 0 1
43891: PPUSH
43892: LD_VAR 0 7
43896: PPUSH
43897: LD_VAR 0 8
43901: PPUSH
43902: CALL_OW 111
// exit ;
43906: POP
43907: POP
43908: GO 43914
// end ; end ;
43910: GO 43799
43912: POP
43913: POP
// end ;
43914: LD_VAR 0 3
43918: RET
// export function ScanBase ( side , base_area ) ; begin
43919: LD_INT 0
43921: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43922: LD_ADDR_VAR 0 3
43926: PUSH
43927: LD_VAR 0 2
43931: PPUSH
43932: LD_INT 81
43934: PUSH
43935: LD_VAR 0 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PPUSH
43944: CALL_OW 70
43948: ST_TO_ADDR
// end ;
43949: LD_VAR 0 3
43953: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43954: LD_INT 0
43956: PPUSH
43957: PPUSH
43958: PPUSH
43959: PPUSH
// result := false ;
43960: LD_ADDR_VAR 0 2
43964: PUSH
43965: LD_INT 0
43967: ST_TO_ADDR
// side := GetSide ( unit ) ;
43968: LD_ADDR_VAR 0 3
43972: PUSH
43973: LD_VAR 0 1
43977: PPUSH
43978: CALL_OW 255
43982: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43983: LD_ADDR_VAR 0 4
43987: PUSH
43988: LD_VAR 0 1
43992: PPUSH
43993: CALL_OW 248
43997: ST_TO_ADDR
// case nat of 1 :
43998: LD_VAR 0 4
44002: PUSH
44003: LD_INT 1
44005: DOUBLE
44006: EQUAL
44007: IFTRUE 44011
44009: GO 44022
44011: POP
// tech := tech_lassight ; 2 :
44012: LD_ADDR_VAR 0 5
44016: PUSH
44017: LD_INT 12
44019: ST_TO_ADDR
44020: GO 44061
44022: LD_INT 2
44024: DOUBLE
44025: EQUAL
44026: IFTRUE 44030
44028: GO 44041
44030: POP
// tech := tech_mortar ; 3 :
44031: LD_ADDR_VAR 0 5
44035: PUSH
44036: LD_INT 41
44038: ST_TO_ADDR
44039: GO 44061
44041: LD_INT 3
44043: DOUBLE
44044: EQUAL
44045: IFTRUE 44049
44047: GO 44060
44049: POP
// tech := tech_bazooka ; end ;
44050: LD_ADDR_VAR 0 5
44054: PUSH
44055: LD_INT 44
44057: ST_TO_ADDR
44058: GO 44061
44060: POP
// if Researched ( side , tech ) then
44061: LD_VAR 0 3
44065: PPUSH
44066: LD_VAR 0 5
44070: PPUSH
44071: CALL_OW 325
44075: IFFALSE 44102
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44077: LD_ADDR_VAR 0 2
44081: PUSH
44082: LD_INT 5
44084: PUSH
44085: LD_INT 8
44087: PUSH
44088: LD_INT 9
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: PUSH
44096: LD_VAR 0 4
44100: ARRAY
44101: ST_TO_ADDR
// end ;
44102: LD_VAR 0 2
44106: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44107: LD_INT 0
44109: PPUSH
44110: PPUSH
44111: PPUSH
// if not mines then
44112: LD_VAR 0 2
44116: NOT
44117: IFFALSE 44121
// exit ;
44119: GO 44265
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44121: LD_ADDR_VAR 0 5
44125: PUSH
44126: LD_INT 81
44128: PUSH
44129: LD_VAR 0 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 3
44140: PUSH
44141: LD_INT 21
44143: PUSH
44144: LD_INT 3
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PPUSH
44159: CALL_OW 69
44163: ST_TO_ADDR
// for i in mines do
44164: LD_ADDR_VAR 0 4
44168: PUSH
44169: LD_VAR 0 2
44173: PUSH
44174: FOR_IN
44175: IFFALSE 44263
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44177: LD_VAR 0 4
44181: PUSH
44182: LD_INT 1
44184: ARRAY
44185: PPUSH
44186: LD_VAR 0 4
44190: PUSH
44191: LD_INT 2
44193: ARRAY
44194: PPUSH
44195: CALL_OW 458
44199: NOT
44200: IFFALSE 44204
// continue ;
44202: GO 44174
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44204: LD_VAR 0 4
44208: PUSH
44209: LD_INT 1
44211: ARRAY
44212: PPUSH
44213: LD_VAR 0 4
44217: PUSH
44218: LD_INT 2
44220: ARRAY
44221: PPUSH
44222: CALL_OW 428
44226: PUSH
44227: LD_VAR 0 5
44231: IN
44232: IFFALSE 44261
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44234: LD_VAR 0 4
44238: PUSH
44239: LD_INT 1
44241: ARRAY
44242: PPUSH
44243: LD_VAR 0 4
44247: PUSH
44248: LD_INT 2
44250: ARRAY
44251: PPUSH
44252: LD_VAR 0 1
44256: PPUSH
44257: CALL_OW 456
// end ;
44261: GO 44174
44263: POP
44264: POP
// end ;
44265: LD_VAR 0 3
44269: RET
// export function Count ( array ) ; begin
44270: LD_INT 0
44272: PPUSH
// result := array + 0 ;
44273: LD_ADDR_VAR 0 2
44277: PUSH
44278: LD_VAR 0 1
44282: PUSH
44283: LD_INT 0
44285: PLUS
44286: ST_TO_ADDR
// end ;
44287: LD_VAR 0 2
44291: RET
// export function IsEmpty ( building ) ; begin
44292: LD_INT 0
44294: PPUSH
// if not building then
44295: LD_VAR 0 1
44299: NOT
44300: IFFALSE 44304
// exit ;
44302: GO 44347
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44304: LD_ADDR_VAR 0 2
44308: PUSH
44309: LD_VAR 0 1
44313: PUSH
44314: LD_INT 22
44316: PUSH
44317: LD_VAR 0 1
44321: PPUSH
44322: CALL_OW 255
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 58
44333: PUSH
44334: EMPTY
44335: LIST
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PPUSH
44341: CALL_OW 69
44345: IN
44346: ST_TO_ADDR
// end ;
44347: LD_VAR 0 2
44351: RET
// export function IsNotFull ( building ) ; var places ; begin
44352: LD_INT 0
44354: PPUSH
44355: PPUSH
// if not building then
44356: LD_VAR 0 1
44360: NOT
44361: IFFALSE 44365
// exit ;
44363: GO 44393
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44365: LD_ADDR_VAR 0 2
44369: PUSH
44370: LD_VAR 0 1
44374: PPUSH
44375: LD_INT 3
44377: PUSH
44378: LD_INT 62
44380: PUSH
44381: EMPTY
44382: LIST
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PPUSH
44388: CALL_OW 72
44392: ST_TO_ADDR
// end ;
44393: LD_VAR 0 2
44397: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44398: LD_INT 0
44400: PPUSH
44401: PPUSH
44402: PPUSH
44403: PPUSH
// tmp := [ ] ;
44404: LD_ADDR_VAR 0 3
44408: PUSH
44409: EMPTY
44410: ST_TO_ADDR
// list := [ ] ;
44411: LD_ADDR_VAR 0 5
44415: PUSH
44416: EMPTY
44417: ST_TO_ADDR
// for i = 16 to 25 do
44418: LD_ADDR_VAR 0 4
44422: PUSH
44423: DOUBLE
44424: LD_INT 16
44426: DEC
44427: ST_TO_ADDR
44428: LD_INT 25
44430: PUSH
44431: FOR_TO
44432: IFFALSE 44505
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44434: LD_ADDR_VAR 0 3
44438: PUSH
44439: LD_VAR 0 3
44443: PUSH
44444: LD_INT 22
44446: PUSH
44447: LD_VAR 0 1
44451: PPUSH
44452: CALL_OW 255
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 91
44463: PUSH
44464: LD_VAR 0 1
44468: PUSH
44469: LD_INT 6
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 30
44479: PUSH
44480: LD_VAR 0 4
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: PUSH
44494: EMPTY
44495: LIST
44496: PPUSH
44497: CALL_OW 69
44501: ADD
44502: ST_TO_ADDR
44503: GO 44431
44505: POP
44506: POP
// for i = 1 to tmp do
44507: LD_ADDR_VAR 0 4
44511: PUSH
44512: DOUBLE
44513: LD_INT 1
44515: DEC
44516: ST_TO_ADDR
44517: LD_VAR 0 3
44521: PUSH
44522: FOR_TO
44523: IFFALSE 44611
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44525: LD_ADDR_VAR 0 5
44529: PUSH
44530: LD_VAR 0 5
44534: PUSH
44535: LD_VAR 0 3
44539: PUSH
44540: LD_VAR 0 4
44544: ARRAY
44545: PPUSH
44546: CALL_OW 266
44550: PUSH
44551: LD_VAR 0 3
44555: PUSH
44556: LD_VAR 0 4
44560: ARRAY
44561: PPUSH
44562: CALL_OW 250
44566: PUSH
44567: LD_VAR 0 3
44571: PUSH
44572: LD_VAR 0 4
44576: ARRAY
44577: PPUSH
44578: CALL_OW 251
44582: PUSH
44583: LD_VAR 0 3
44587: PUSH
44588: LD_VAR 0 4
44592: ARRAY
44593: PPUSH
44594: CALL_OW 254
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: PUSH
44605: EMPTY
44606: LIST
44607: ADD
44608: ST_TO_ADDR
44609: GO 44522
44611: POP
44612: POP
// result := list ;
44613: LD_ADDR_VAR 0 2
44617: PUSH
44618: LD_VAR 0 5
44622: ST_TO_ADDR
// end ;
44623: LD_VAR 0 2
44627: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44628: LD_INT 0
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
// if not factory then
44637: LD_VAR 0 1
44641: NOT
44642: IFFALSE 44646
// exit ;
44644: GO 45239
// if control = control_apeman then
44646: LD_VAR 0 4
44650: PUSH
44651: LD_INT 5
44653: EQUAL
44654: IFFALSE 44763
// begin tmp := UnitsInside ( factory ) ;
44656: LD_ADDR_VAR 0 8
44660: PUSH
44661: LD_VAR 0 1
44665: PPUSH
44666: CALL_OW 313
44670: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44671: LD_VAR 0 8
44675: PPUSH
44676: LD_INT 25
44678: PUSH
44679: LD_INT 12
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PPUSH
44686: CALL_OW 72
44690: NOT
44691: IFFALSE 44701
// control := control_manual ;
44693: LD_ADDR_VAR 0 4
44697: PUSH
44698: LD_INT 1
44700: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44701: LD_ADDR_VAR 0 8
44705: PUSH
44706: LD_VAR 0 1
44710: PPUSH
44711: CALL 44398 0 1
44715: ST_TO_ADDR
// if tmp then
44716: LD_VAR 0 8
44720: IFFALSE 44763
// begin for i in tmp do
44722: LD_ADDR_VAR 0 7
44726: PUSH
44727: LD_VAR 0 8
44731: PUSH
44732: FOR_IN
44733: IFFALSE 44761
// if i [ 1 ] = b_ext_radio then
44735: LD_VAR 0 7
44739: PUSH
44740: LD_INT 1
44742: ARRAY
44743: PUSH
44744: LD_INT 22
44746: EQUAL
44747: IFFALSE 44759
// begin control := control_remote ;
44749: LD_ADDR_VAR 0 4
44753: PUSH
44754: LD_INT 2
44756: ST_TO_ADDR
// break ;
44757: GO 44761
// end ;
44759: GO 44732
44761: POP
44762: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44763: LD_VAR 0 1
44767: PPUSH
44768: LD_VAR 0 2
44772: PPUSH
44773: LD_VAR 0 3
44777: PPUSH
44778: LD_VAR 0 4
44782: PPUSH
44783: LD_VAR 0 5
44787: PPUSH
44788: CALL_OW 448
44792: IFFALSE 44827
// begin result := [ chassis , engine , control , weapon ] ;
44794: LD_ADDR_VAR 0 6
44798: PUSH
44799: LD_VAR 0 2
44803: PUSH
44804: LD_VAR 0 3
44808: PUSH
44809: LD_VAR 0 4
44813: PUSH
44814: LD_VAR 0 5
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: ST_TO_ADDR
// exit ;
44825: GO 45239
// end ; _chassis := AvailableChassisList ( factory ) ;
44827: LD_ADDR_VAR 0 9
44831: PUSH
44832: LD_VAR 0 1
44836: PPUSH
44837: CALL_OW 475
44841: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44842: LD_ADDR_VAR 0 11
44846: PUSH
44847: LD_VAR 0 1
44851: PPUSH
44852: CALL_OW 476
44856: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44857: LD_ADDR_VAR 0 12
44861: PUSH
44862: LD_VAR 0 1
44866: PPUSH
44867: CALL_OW 477
44871: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44872: LD_ADDR_VAR 0 10
44876: PUSH
44877: LD_VAR 0 1
44881: PPUSH
44882: CALL_OW 478
44886: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44887: LD_VAR 0 9
44891: NOT
44892: PUSH
44893: LD_VAR 0 11
44897: NOT
44898: OR
44899: PUSH
44900: LD_VAR 0 12
44904: NOT
44905: OR
44906: PUSH
44907: LD_VAR 0 10
44911: NOT
44912: OR
44913: IFFALSE 44948
// begin result := [ chassis , engine , control , weapon ] ;
44915: LD_ADDR_VAR 0 6
44919: PUSH
44920: LD_VAR 0 2
44924: PUSH
44925: LD_VAR 0 3
44929: PUSH
44930: LD_VAR 0 4
44934: PUSH
44935: LD_VAR 0 5
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: ST_TO_ADDR
// exit ;
44946: GO 45239
// end ; if not chassis in _chassis then
44948: LD_VAR 0 2
44952: PUSH
44953: LD_VAR 0 9
44957: IN
44958: NOT
44959: IFFALSE 44985
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44961: LD_ADDR_VAR 0 2
44965: PUSH
44966: LD_VAR 0 9
44970: PUSH
44971: LD_INT 1
44973: PPUSH
44974: LD_VAR 0 9
44978: PPUSH
44979: CALL_OW 12
44983: ARRAY
44984: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44985: LD_VAR 0 2
44989: PPUSH
44990: LD_VAR 0 3
44994: PPUSH
44995: CALL 45244 0 2
44999: NOT
45000: IFFALSE 45059
// repeat engine := _engine [ 1 ] ;
45002: LD_ADDR_VAR 0 3
45006: PUSH
45007: LD_VAR 0 11
45011: PUSH
45012: LD_INT 1
45014: ARRAY
45015: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45016: LD_ADDR_VAR 0 11
45020: PUSH
45021: LD_VAR 0 11
45025: PPUSH
45026: LD_INT 1
45028: PPUSH
45029: CALL_OW 3
45033: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45034: LD_VAR 0 2
45038: PPUSH
45039: LD_VAR 0 3
45043: PPUSH
45044: CALL 45244 0 2
45048: PUSH
45049: LD_VAR 0 11
45053: PUSH
45054: EMPTY
45055: EQUAL
45056: OR
45057: IFFALSE 45002
// if not control in _control then
45059: LD_VAR 0 4
45063: PUSH
45064: LD_VAR 0 12
45068: IN
45069: NOT
45070: IFFALSE 45096
// control := _control [ rand ( 1 , _control ) ] ;
45072: LD_ADDR_VAR 0 4
45076: PUSH
45077: LD_VAR 0 12
45081: PUSH
45082: LD_INT 1
45084: PPUSH
45085: LD_VAR 0 12
45089: PPUSH
45090: CALL_OW 12
45094: ARRAY
45095: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45096: LD_VAR 0 2
45100: PPUSH
45101: LD_VAR 0 5
45105: PPUSH
45106: CALL 45464 0 2
45110: NOT
45111: IFFALSE 45170
// repeat weapon := _weapon [ 1 ] ;
45113: LD_ADDR_VAR 0 5
45117: PUSH
45118: LD_VAR 0 10
45122: PUSH
45123: LD_INT 1
45125: ARRAY
45126: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45127: LD_ADDR_VAR 0 10
45131: PUSH
45132: LD_VAR 0 10
45136: PPUSH
45137: LD_INT 1
45139: PPUSH
45140: CALL_OW 3
45144: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45145: LD_VAR 0 2
45149: PPUSH
45150: LD_VAR 0 5
45154: PPUSH
45155: CALL 45464 0 2
45159: PUSH
45160: LD_VAR 0 10
45164: PUSH
45165: EMPTY
45166: EQUAL
45167: OR
45168: IFFALSE 45113
// result := [ ] ;
45170: LD_ADDR_VAR 0 6
45174: PUSH
45175: EMPTY
45176: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45177: LD_VAR 0 1
45181: PPUSH
45182: LD_VAR 0 2
45186: PPUSH
45187: LD_VAR 0 3
45191: PPUSH
45192: LD_VAR 0 4
45196: PPUSH
45197: LD_VAR 0 5
45201: PPUSH
45202: CALL_OW 448
45206: IFFALSE 45239
// result := [ chassis , engine , control , weapon ] ;
45208: LD_ADDR_VAR 0 6
45212: PUSH
45213: LD_VAR 0 2
45217: PUSH
45218: LD_VAR 0 3
45222: PUSH
45223: LD_VAR 0 4
45227: PUSH
45228: LD_VAR 0 5
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: ST_TO_ADDR
// end ;
45239: LD_VAR 0 6
45243: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45244: LD_INT 0
45246: PPUSH
// if not chassis or not engine then
45247: LD_VAR 0 1
45251: NOT
45252: PUSH
45253: LD_VAR 0 2
45257: NOT
45258: OR
45259: IFFALSE 45263
// exit ;
45261: GO 45459
// case engine of engine_solar :
45263: LD_VAR 0 2
45267: PUSH
45268: LD_INT 2
45270: DOUBLE
45271: EQUAL
45272: IFTRUE 45276
45274: GO 45314
45276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45277: LD_ADDR_VAR 0 3
45281: PUSH
45282: LD_INT 11
45284: PUSH
45285: LD_INT 12
45287: PUSH
45288: LD_INT 13
45290: PUSH
45291: LD_INT 14
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: ST_TO_ADDR
45312: GO 45443
45314: LD_INT 1
45316: DOUBLE
45317: EQUAL
45318: IFTRUE 45322
45320: GO 45384
45322: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45323: LD_ADDR_VAR 0 3
45327: PUSH
45328: LD_INT 11
45330: PUSH
45331: LD_INT 12
45333: PUSH
45334: LD_INT 13
45336: PUSH
45337: LD_INT 14
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: LD_INT 3
45348: PUSH
45349: LD_INT 4
45351: PUSH
45352: LD_INT 5
45354: PUSH
45355: LD_INT 21
45357: PUSH
45358: LD_INT 23
45360: PUSH
45361: LD_INT 22
45363: PUSH
45364: LD_INT 24
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: ST_TO_ADDR
45382: GO 45443
45384: LD_INT 3
45386: DOUBLE
45387: EQUAL
45388: IFTRUE 45392
45390: GO 45442
45392: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45393: LD_ADDR_VAR 0 3
45397: PUSH
45398: LD_INT 13
45400: PUSH
45401: LD_INT 14
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: LD_INT 3
45409: PUSH
45410: LD_INT 4
45412: PUSH
45413: LD_INT 5
45415: PUSH
45416: LD_INT 21
45418: PUSH
45419: LD_INT 22
45421: PUSH
45422: LD_INT 23
45424: PUSH
45425: LD_INT 24
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
45440: GO 45443
45442: POP
// result := ( chassis in result ) ;
45443: LD_ADDR_VAR 0 3
45447: PUSH
45448: LD_VAR 0 1
45452: PUSH
45453: LD_VAR 0 3
45457: IN
45458: ST_TO_ADDR
// end ;
45459: LD_VAR 0 3
45463: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45464: LD_INT 0
45466: PPUSH
// if not chassis or not weapon then
45467: LD_VAR 0 1
45471: NOT
45472: PUSH
45473: LD_VAR 0 2
45477: NOT
45478: OR
45479: IFFALSE 45483
// exit ;
45481: GO 46543
// case weapon of us_machine_gun :
45483: LD_VAR 0 2
45487: PUSH
45488: LD_INT 2
45490: DOUBLE
45491: EQUAL
45492: IFTRUE 45496
45494: GO 45526
45496: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45497: LD_ADDR_VAR 0 3
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: LD_INT 3
45510: PUSH
45511: LD_INT 4
45513: PUSH
45514: LD_INT 5
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: ST_TO_ADDR
45524: GO 46527
45526: LD_INT 3
45528: DOUBLE
45529: EQUAL
45530: IFTRUE 45534
45532: GO 45564
45534: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45535: LD_ADDR_VAR 0 3
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: LD_INT 3
45548: PUSH
45549: LD_INT 4
45551: PUSH
45552: LD_INT 5
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: ST_TO_ADDR
45562: GO 46527
45564: LD_INT 11
45566: DOUBLE
45567: EQUAL
45568: IFTRUE 45572
45570: GO 45602
45572: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45573: LD_ADDR_VAR 0 3
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: LD_INT 4
45589: PUSH
45590: LD_INT 5
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: ST_TO_ADDR
45600: GO 46527
45602: LD_INT 4
45604: DOUBLE
45605: EQUAL
45606: IFTRUE 45610
45608: GO 45636
45610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45611: LD_ADDR_VAR 0 3
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: LD_INT 3
45621: PUSH
45622: LD_INT 4
45624: PUSH
45625: LD_INT 5
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: ST_TO_ADDR
45634: GO 46527
45636: LD_INT 5
45638: DOUBLE
45639: EQUAL
45640: IFTRUE 45644
45642: GO 45670
45644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45645: LD_ADDR_VAR 0 3
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 3
45655: PUSH
45656: LD_INT 4
45658: PUSH
45659: LD_INT 5
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: ST_TO_ADDR
45668: GO 46527
45670: LD_INT 9
45672: DOUBLE
45673: EQUAL
45674: IFTRUE 45678
45676: GO 45704
45678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45679: LD_ADDR_VAR 0 3
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: LD_INT 3
45689: PUSH
45690: LD_INT 4
45692: PUSH
45693: LD_INT 5
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: ST_TO_ADDR
45702: GO 46527
45704: LD_INT 7
45706: DOUBLE
45707: EQUAL
45708: IFTRUE 45712
45710: GO 45738
45712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45713: LD_ADDR_VAR 0 3
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: LD_INT 3
45723: PUSH
45724: LD_INT 4
45726: PUSH
45727: LD_INT 5
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: ST_TO_ADDR
45736: GO 46527
45738: LD_INT 12
45740: DOUBLE
45741: EQUAL
45742: IFTRUE 45746
45744: GO 45772
45746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45747: LD_ADDR_VAR 0 3
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: LD_INT 3
45757: PUSH
45758: LD_INT 4
45760: PUSH
45761: LD_INT 5
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: ST_TO_ADDR
45770: GO 46527
45772: LD_INT 13
45774: DOUBLE
45775: EQUAL
45776: IFTRUE 45780
45778: GO 45806
45780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45781: LD_ADDR_VAR 0 3
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 3
45791: PUSH
45792: LD_INT 4
45794: PUSH
45795: LD_INT 5
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: ST_TO_ADDR
45804: GO 46527
45806: LD_INT 14
45808: DOUBLE
45809: EQUAL
45810: IFTRUE 45814
45812: GO 45832
45814: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45815: LD_ADDR_VAR 0 3
45819: PUSH
45820: LD_INT 4
45822: PUSH
45823: LD_INT 5
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: ST_TO_ADDR
45830: GO 46527
45832: LD_INT 6
45834: DOUBLE
45835: EQUAL
45836: IFTRUE 45840
45838: GO 45858
45840: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45841: LD_ADDR_VAR 0 3
45845: PUSH
45846: LD_INT 4
45848: PUSH
45849: LD_INT 5
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: ST_TO_ADDR
45856: GO 46527
45858: LD_INT 10
45860: DOUBLE
45861: EQUAL
45862: IFTRUE 45866
45864: GO 45884
45866: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45867: LD_ADDR_VAR 0 3
45871: PUSH
45872: LD_INT 4
45874: PUSH
45875: LD_INT 5
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: ST_TO_ADDR
45882: GO 46527
45884: LD_INT 22
45886: DOUBLE
45887: EQUAL
45888: IFTRUE 45892
45890: GO 45918
45892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45893: LD_ADDR_VAR 0 3
45897: PUSH
45898: LD_INT 11
45900: PUSH
45901: LD_INT 12
45903: PUSH
45904: LD_INT 13
45906: PUSH
45907: LD_INT 14
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: ST_TO_ADDR
45916: GO 46527
45918: LD_INT 23
45920: DOUBLE
45921: EQUAL
45922: IFTRUE 45926
45924: GO 45952
45926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45927: LD_ADDR_VAR 0 3
45931: PUSH
45932: LD_INT 11
45934: PUSH
45935: LD_INT 12
45937: PUSH
45938: LD_INT 13
45940: PUSH
45941: LD_INT 14
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: ST_TO_ADDR
45950: GO 46527
45952: LD_INT 24
45954: DOUBLE
45955: EQUAL
45956: IFTRUE 45960
45958: GO 45986
45960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45961: LD_ADDR_VAR 0 3
45965: PUSH
45966: LD_INT 11
45968: PUSH
45969: LD_INT 12
45971: PUSH
45972: LD_INT 13
45974: PUSH
45975: LD_INT 14
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: ST_TO_ADDR
45984: GO 46527
45986: LD_INT 30
45988: DOUBLE
45989: EQUAL
45990: IFTRUE 45994
45992: GO 46020
45994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45995: LD_ADDR_VAR 0 3
45999: PUSH
46000: LD_INT 11
46002: PUSH
46003: LD_INT 12
46005: PUSH
46006: LD_INT 13
46008: PUSH
46009: LD_INT 14
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: ST_TO_ADDR
46018: GO 46527
46020: LD_INT 25
46022: DOUBLE
46023: EQUAL
46024: IFTRUE 46028
46026: GO 46046
46028: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46029: LD_ADDR_VAR 0 3
46033: PUSH
46034: LD_INT 13
46036: PUSH
46037: LD_INT 14
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: ST_TO_ADDR
46044: GO 46527
46046: LD_INT 27
46048: DOUBLE
46049: EQUAL
46050: IFTRUE 46054
46052: GO 46072
46054: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46055: LD_ADDR_VAR 0 3
46059: PUSH
46060: LD_INT 13
46062: PUSH
46063: LD_INT 14
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: ST_TO_ADDR
46070: GO 46527
46072: LD_INT 92
46074: DOUBLE
46075: EQUAL
46076: IFTRUE 46080
46078: GO 46106
46080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46081: LD_ADDR_VAR 0 3
46085: PUSH
46086: LD_INT 11
46088: PUSH
46089: LD_INT 12
46091: PUSH
46092: LD_INT 13
46094: PUSH
46095: LD_INT 14
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: ST_TO_ADDR
46104: GO 46527
46106: LD_INT 28
46108: DOUBLE
46109: EQUAL
46110: IFTRUE 46114
46112: GO 46132
46114: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46115: LD_ADDR_VAR 0 3
46119: PUSH
46120: LD_INT 13
46122: PUSH
46123: LD_INT 14
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: ST_TO_ADDR
46130: GO 46527
46132: LD_INT 29
46134: DOUBLE
46135: EQUAL
46136: IFTRUE 46140
46138: GO 46158
46140: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46141: LD_ADDR_VAR 0 3
46145: PUSH
46146: LD_INT 13
46148: PUSH
46149: LD_INT 14
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: ST_TO_ADDR
46156: GO 46527
46158: LD_INT 31
46160: DOUBLE
46161: EQUAL
46162: IFTRUE 46166
46164: GO 46184
46166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46167: LD_ADDR_VAR 0 3
46171: PUSH
46172: LD_INT 13
46174: PUSH
46175: LD_INT 14
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: ST_TO_ADDR
46182: GO 46527
46184: LD_INT 26
46186: DOUBLE
46187: EQUAL
46188: IFTRUE 46192
46190: GO 46210
46192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46193: LD_ADDR_VAR 0 3
46197: PUSH
46198: LD_INT 13
46200: PUSH
46201: LD_INT 14
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: ST_TO_ADDR
46208: GO 46527
46210: LD_INT 42
46212: DOUBLE
46213: EQUAL
46214: IFTRUE 46218
46216: GO 46244
46218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46219: LD_ADDR_VAR 0 3
46223: PUSH
46224: LD_INT 21
46226: PUSH
46227: LD_INT 22
46229: PUSH
46230: LD_INT 23
46232: PUSH
46233: LD_INT 24
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: ST_TO_ADDR
46242: GO 46527
46244: LD_INT 43
46246: DOUBLE
46247: EQUAL
46248: IFTRUE 46252
46250: GO 46278
46252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46253: LD_ADDR_VAR 0 3
46257: PUSH
46258: LD_INT 21
46260: PUSH
46261: LD_INT 22
46263: PUSH
46264: LD_INT 23
46266: PUSH
46267: LD_INT 24
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: ST_TO_ADDR
46276: GO 46527
46278: LD_INT 44
46280: DOUBLE
46281: EQUAL
46282: IFTRUE 46286
46284: GO 46312
46286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46287: LD_ADDR_VAR 0 3
46291: PUSH
46292: LD_INT 21
46294: PUSH
46295: LD_INT 22
46297: PUSH
46298: LD_INT 23
46300: PUSH
46301: LD_INT 24
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: ST_TO_ADDR
46310: GO 46527
46312: LD_INT 45
46314: DOUBLE
46315: EQUAL
46316: IFTRUE 46320
46318: GO 46346
46320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46321: LD_ADDR_VAR 0 3
46325: PUSH
46326: LD_INT 21
46328: PUSH
46329: LD_INT 22
46331: PUSH
46332: LD_INT 23
46334: PUSH
46335: LD_INT 24
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: ST_TO_ADDR
46344: GO 46527
46346: LD_INT 49
46348: DOUBLE
46349: EQUAL
46350: IFTRUE 46354
46352: GO 46380
46354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46355: LD_ADDR_VAR 0 3
46359: PUSH
46360: LD_INT 21
46362: PUSH
46363: LD_INT 22
46365: PUSH
46366: LD_INT 23
46368: PUSH
46369: LD_INT 24
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: ST_TO_ADDR
46378: GO 46527
46380: LD_INT 51
46382: DOUBLE
46383: EQUAL
46384: IFTRUE 46388
46386: GO 46414
46388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46389: LD_ADDR_VAR 0 3
46393: PUSH
46394: LD_INT 21
46396: PUSH
46397: LD_INT 22
46399: PUSH
46400: LD_INT 23
46402: PUSH
46403: LD_INT 24
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: ST_TO_ADDR
46412: GO 46527
46414: LD_INT 52
46416: DOUBLE
46417: EQUAL
46418: IFTRUE 46422
46420: GO 46448
46422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46423: LD_ADDR_VAR 0 3
46427: PUSH
46428: LD_INT 21
46430: PUSH
46431: LD_INT 22
46433: PUSH
46434: LD_INT 23
46436: PUSH
46437: LD_INT 24
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: ST_TO_ADDR
46446: GO 46527
46448: LD_INT 53
46450: DOUBLE
46451: EQUAL
46452: IFTRUE 46456
46454: GO 46474
46456: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46457: LD_ADDR_VAR 0 3
46461: PUSH
46462: LD_INT 23
46464: PUSH
46465: LD_INT 24
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: ST_TO_ADDR
46472: GO 46527
46474: LD_INT 46
46476: DOUBLE
46477: EQUAL
46478: IFTRUE 46482
46480: GO 46500
46482: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46483: LD_ADDR_VAR 0 3
46487: PUSH
46488: LD_INT 23
46490: PUSH
46491: LD_INT 24
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: ST_TO_ADDR
46498: GO 46527
46500: LD_INT 47
46502: DOUBLE
46503: EQUAL
46504: IFTRUE 46508
46506: GO 46526
46508: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46509: LD_ADDR_VAR 0 3
46513: PUSH
46514: LD_INT 23
46516: PUSH
46517: LD_INT 24
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: ST_TO_ADDR
46524: GO 46527
46526: POP
// result := ( chassis in result ) ;
46527: LD_ADDR_VAR 0 3
46531: PUSH
46532: LD_VAR 0 1
46536: PUSH
46537: LD_VAR 0 3
46541: IN
46542: ST_TO_ADDR
// end ;
46543: LD_VAR 0 3
46547: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46548: LD_INT 0
46550: PPUSH
46551: PPUSH
46552: PPUSH
46553: PPUSH
46554: PPUSH
46555: PPUSH
46556: PPUSH
// result := array ;
46557: LD_ADDR_VAR 0 5
46561: PUSH
46562: LD_VAR 0 1
46566: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46567: LD_VAR 0 1
46571: NOT
46572: PUSH
46573: LD_VAR 0 2
46577: NOT
46578: OR
46579: PUSH
46580: LD_VAR 0 3
46584: NOT
46585: OR
46586: PUSH
46587: LD_VAR 0 2
46591: PUSH
46592: LD_VAR 0 1
46596: GREATER
46597: OR
46598: PUSH
46599: LD_VAR 0 3
46603: PUSH
46604: LD_VAR 0 1
46608: GREATER
46609: OR
46610: IFFALSE 46614
// exit ;
46612: GO 46910
// if direction then
46614: LD_VAR 0 4
46618: IFFALSE 46682
// begin d := 1 ;
46620: LD_ADDR_VAR 0 9
46624: PUSH
46625: LD_INT 1
46627: ST_TO_ADDR
// if i_from > i_to then
46628: LD_VAR 0 2
46632: PUSH
46633: LD_VAR 0 3
46637: GREATER
46638: IFFALSE 46664
// length := ( array - i_from ) + i_to else
46640: LD_ADDR_VAR 0 11
46644: PUSH
46645: LD_VAR 0 1
46649: PUSH
46650: LD_VAR 0 2
46654: MINUS
46655: PUSH
46656: LD_VAR 0 3
46660: PLUS
46661: ST_TO_ADDR
46662: GO 46680
// length := i_to - i_from ;
46664: LD_ADDR_VAR 0 11
46668: PUSH
46669: LD_VAR 0 3
46673: PUSH
46674: LD_VAR 0 2
46678: MINUS
46679: ST_TO_ADDR
// end else
46680: GO 46743
// begin d := - 1 ;
46682: LD_ADDR_VAR 0 9
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: ST_TO_ADDR
// if i_from > i_to then
46691: LD_VAR 0 2
46695: PUSH
46696: LD_VAR 0 3
46700: GREATER
46701: IFFALSE 46721
// length := i_from - i_to else
46703: LD_ADDR_VAR 0 11
46707: PUSH
46708: LD_VAR 0 2
46712: PUSH
46713: LD_VAR 0 3
46717: MINUS
46718: ST_TO_ADDR
46719: GO 46743
// length := ( array - i_to ) + i_from ;
46721: LD_ADDR_VAR 0 11
46725: PUSH
46726: LD_VAR 0 1
46730: PUSH
46731: LD_VAR 0 3
46735: MINUS
46736: PUSH
46737: LD_VAR 0 2
46741: PLUS
46742: ST_TO_ADDR
// end ; if not length then
46743: LD_VAR 0 11
46747: NOT
46748: IFFALSE 46752
// exit ;
46750: GO 46910
// tmp := array ;
46752: LD_ADDR_VAR 0 10
46756: PUSH
46757: LD_VAR 0 1
46761: ST_TO_ADDR
// for i = 1 to length do
46762: LD_ADDR_VAR 0 6
46766: PUSH
46767: DOUBLE
46768: LD_INT 1
46770: DEC
46771: ST_TO_ADDR
46772: LD_VAR 0 11
46776: PUSH
46777: FOR_TO
46778: IFFALSE 46898
// begin for j = 1 to array do
46780: LD_ADDR_VAR 0 7
46784: PUSH
46785: DOUBLE
46786: LD_INT 1
46788: DEC
46789: ST_TO_ADDR
46790: LD_VAR 0 1
46794: PUSH
46795: FOR_TO
46796: IFFALSE 46884
// begin k := j + d ;
46798: LD_ADDR_VAR 0 8
46802: PUSH
46803: LD_VAR 0 7
46807: PUSH
46808: LD_VAR 0 9
46812: PLUS
46813: ST_TO_ADDR
// if k > array then
46814: LD_VAR 0 8
46818: PUSH
46819: LD_VAR 0 1
46823: GREATER
46824: IFFALSE 46834
// k := 1 ;
46826: LD_ADDR_VAR 0 8
46830: PUSH
46831: LD_INT 1
46833: ST_TO_ADDR
// if not k then
46834: LD_VAR 0 8
46838: NOT
46839: IFFALSE 46851
// k := array ;
46841: LD_ADDR_VAR 0 8
46845: PUSH
46846: LD_VAR 0 1
46850: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46851: LD_ADDR_VAR 0 10
46855: PUSH
46856: LD_VAR 0 10
46860: PPUSH
46861: LD_VAR 0 8
46865: PPUSH
46866: LD_VAR 0 1
46870: PUSH
46871: LD_VAR 0 7
46875: ARRAY
46876: PPUSH
46877: CALL_OW 1
46881: ST_TO_ADDR
// end ;
46882: GO 46795
46884: POP
46885: POP
// array := tmp ;
46886: LD_ADDR_VAR 0 1
46890: PUSH
46891: LD_VAR 0 10
46895: ST_TO_ADDR
// end ;
46896: GO 46777
46898: POP
46899: POP
// result := array ;
46900: LD_ADDR_VAR 0 5
46904: PUSH
46905: LD_VAR 0 1
46909: ST_TO_ADDR
// end ;
46910: LD_VAR 0 5
46914: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46915: LD_INT 0
46917: PPUSH
46918: PPUSH
// result := 0 ;
46919: LD_ADDR_VAR 0 3
46923: PUSH
46924: LD_INT 0
46926: ST_TO_ADDR
// if not array or not value in array then
46927: LD_VAR 0 1
46931: NOT
46932: PUSH
46933: LD_VAR 0 2
46937: PUSH
46938: LD_VAR 0 1
46942: IN
46943: NOT
46944: OR
46945: IFFALSE 46949
// exit ;
46947: GO 47003
// for i = 1 to array do
46949: LD_ADDR_VAR 0 4
46953: PUSH
46954: DOUBLE
46955: LD_INT 1
46957: DEC
46958: ST_TO_ADDR
46959: LD_VAR 0 1
46963: PUSH
46964: FOR_TO
46965: IFFALSE 47001
// if value = array [ i ] then
46967: LD_VAR 0 2
46971: PUSH
46972: LD_VAR 0 1
46976: PUSH
46977: LD_VAR 0 4
46981: ARRAY
46982: EQUAL
46983: IFFALSE 46999
// begin result := i ;
46985: LD_ADDR_VAR 0 3
46989: PUSH
46990: LD_VAR 0 4
46994: ST_TO_ADDR
// exit ;
46995: POP
46996: POP
46997: GO 47003
// end ;
46999: GO 46964
47001: POP
47002: POP
// end ;
47003: LD_VAR 0 3
47007: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47008: LD_INT 0
47010: PPUSH
// vc_chassis := chassis ;
47011: LD_ADDR_OWVAR 37
47015: PUSH
47016: LD_VAR 0 1
47020: ST_TO_ADDR
// vc_engine := engine ;
47021: LD_ADDR_OWVAR 39
47025: PUSH
47026: LD_VAR 0 2
47030: ST_TO_ADDR
// vc_control := control ;
47031: LD_ADDR_OWVAR 38
47035: PUSH
47036: LD_VAR 0 3
47040: ST_TO_ADDR
// vc_weapon := weapon ;
47041: LD_ADDR_OWVAR 40
47045: PUSH
47046: LD_VAR 0 4
47050: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47051: LD_ADDR_OWVAR 41
47055: PUSH
47056: LD_VAR 0 5
47060: ST_TO_ADDR
// end ;
47061: LD_VAR 0 6
47065: RET
// export function WantPlant ( unit ) ; var task ; begin
47066: LD_INT 0
47068: PPUSH
47069: PPUSH
// result := false ;
47070: LD_ADDR_VAR 0 2
47074: PUSH
47075: LD_INT 0
47077: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47078: LD_ADDR_VAR 0 3
47082: PUSH
47083: LD_VAR 0 1
47087: PPUSH
47088: CALL_OW 437
47092: ST_TO_ADDR
// if task then
47093: LD_VAR 0 3
47097: IFFALSE 47125
// if task [ 1 ] [ 1 ] = p then
47099: LD_VAR 0 3
47103: PUSH
47104: LD_INT 1
47106: ARRAY
47107: PUSH
47108: LD_INT 1
47110: ARRAY
47111: PUSH
47112: LD_STRING p
47114: EQUAL
47115: IFFALSE 47125
// result := true ;
47117: LD_ADDR_VAR 0 2
47121: PUSH
47122: LD_INT 1
47124: ST_TO_ADDR
// end ;
47125: LD_VAR 0 2
47129: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47130: LD_INT 0
47132: PPUSH
47133: PPUSH
47134: PPUSH
47135: PPUSH
// if pos < 1 then
47136: LD_VAR 0 2
47140: PUSH
47141: LD_INT 1
47143: LESS
47144: IFFALSE 47148
// exit ;
47146: GO 47451
// if pos = 1 then
47148: LD_VAR 0 2
47152: PUSH
47153: LD_INT 1
47155: EQUAL
47156: IFFALSE 47189
// result := Replace ( arr , pos [ 1 ] , value ) else
47158: LD_ADDR_VAR 0 4
47162: PUSH
47163: LD_VAR 0 1
47167: PPUSH
47168: LD_VAR 0 2
47172: PUSH
47173: LD_INT 1
47175: ARRAY
47176: PPUSH
47177: LD_VAR 0 3
47181: PPUSH
47182: CALL_OW 1
47186: ST_TO_ADDR
47187: GO 47451
// begin tmp := arr ;
47189: LD_ADDR_VAR 0 6
47193: PUSH
47194: LD_VAR 0 1
47198: ST_TO_ADDR
// s_arr := [ tmp ] ;
47199: LD_ADDR_VAR 0 7
47203: PUSH
47204: LD_VAR 0 6
47208: PUSH
47209: EMPTY
47210: LIST
47211: ST_TO_ADDR
// for i = 1 to pos - 1 do
47212: LD_ADDR_VAR 0 5
47216: PUSH
47217: DOUBLE
47218: LD_INT 1
47220: DEC
47221: ST_TO_ADDR
47222: LD_VAR 0 2
47226: PUSH
47227: LD_INT 1
47229: MINUS
47230: PUSH
47231: FOR_TO
47232: IFFALSE 47277
// begin tmp := tmp [ pos [ i ] ] ;
47234: LD_ADDR_VAR 0 6
47238: PUSH
47239: LD_VAR 0 6
47243: PUSH
47244: LD_VAR 0 2
47248: PUSH
47249: LD_VAR 0 5
47253: ARRAY
47254: ARRAY
47255: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47256: LD_ADDR_VAR 0 7
47260: PUSH
47261: LD_VAR 0 7
47265: PUSH
47266: LD_VAR 0 6
47270: PUSH
47271: EMPTY
47272: LIST
47273: ADD
47274: ST_TO_ADDR
// end ;
47275: GO 47231
47277: POP
47278: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47279: LD_ADDR_VAR 0 6
47283: PUSH
47284: LD_VAR 0 6
47288: PPUSH
47289: LD_VAR 0 2
47293: PUSH
47294: LD_VAR 0 2
47298: ARRAY
47299: PPUSH
47300: LD_VAR 0 3
47304: PPUSH
47305: CALL_OW 1
47309: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47310: LD_ADDR_VAR 0 7
47314: PUSH
47315: LD_VAR 0 7
47319: PPUSH
47320: LD_VAR 0 7
47324: PPUSH
47325: LD_VAR 0 6
47329: PPUSH
47330: CALL_OW 1
47334: ST_TO_ADDR
// for i = s_arr downto 2 do
47335: LD_ADDR_VAR 0 5
47339: PUSH
47340: DOUBLE
47341: LD_VAR 0 7
47345: INC
47346: ST_TO_ADDR
47347: LD_INT 2
47349: PUSH
47350: FOR_DOWNTO
47351: IFFALSE 47435
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47353: LD_ADDR_VAR 0 6
47357: PUSH
47358: LD_VAR 0 7
47362: PUSH
47363: LD_VAR 0 5
47367: PUSH
47368: LD_INT 1
47370: MINUS
47371: ARRAY
47372: PPUSH
47373: LD_VAR 0 2
47377: PUSH
47378: LD_VAR 0 5
47382: PUSH
47383: LD_INT 1
47385: MINUS
47386: ARRAY
47387: PPUSH
47388: LD_VAR 0 7
47392: PUSH
47393: LD_VAR 0 5
47397: ARRAY
47398: PPUSH
47399: CALL_OW 1
47403: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47404: LD_ADDR_VAR 0 7
47408: PUSH
47409: LD_VAR 0 7
47413: PPUSH
47414: LD_VAR 0 5
47418: PUSH
47419: LD_INT 1
47421: MINUS
47422: PPUSH
47423: LD_VAR 0 6
47427: PPUSH
47428: CALL_OW 1
47432: ST_TO_ADDR
// end ;
47433: GO 47350
47435: POP
47436: POP
// result := s_arr [ 1 ] ;
47437: LD_ADDR_VAR 0 4
47441: PUSH
47442: LD_VAR 0 7
47446: PUSH
47447: LD_INT 1
47449: ARRAY
47450: ST_TO_ADDR
// end ; end ;
47451: LD_VAR 0 4
47455: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47456: LD_INT 0
47458: PPUSH
47459: PPUSH
// if not list then
47460: LD_VAR 0 1
47464: NOT
47465: IFFALSE 47469
// exit ;
47467: GO 47560
// i := list [ pos1 ] ;
47469: LD_ADDR_VAR 0 5
47473: PUSH
47474: LD_VAR 0 1
47478: PUSH
47479: LD_VAR 0 2
47483: ARRAY
47484: ST_TO_ADDR
// if not i then
47485: LD_VAR 0 5
47489: NOT
47490: IFFALSE 47494
// exit ;
47492: GO 47560
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47494: LD_ADDR_VAR 0 1
47498: PUSH
47499: LD_VAR 0 1
47503: PPUSH
47504: LD_VAR 0 2
47508: PPUSH
47509: LD_VAR 0 1
47513: PUSH
47514: LD_VAR 0 3
47518: ARRAY
47519: PPUSH
47520: CALL_OW 1
47524: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47525: LD_ADDR_VAR 0 1
47529: PUSH
47530: LD_VAR 0 1
47534: PPUSH
47535: LD_VAR 0 3
47539: PPUSH
47540: LD_VAR 0 5
47544: PPUSH
47545: CALL_OW 1
47549: ST_TO_ADDR
// result := list ;
47550: LD_ADDR_VAR 0 4
47554: PUSH
47555: LD_VAR 0 1
47559: ST_TO_ADDR
// end ;
47560: LD_VAR 0 4
47564: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47565: LD_INT 0
47567: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47568: LD_ADDR_VAR 0 5
47572: PUSH
47573: LD_VAR 0 1
47577: PPUSH
47578: CALL_OW 250
47582: PPUSH
47583: LD_VAR 0 1
47587: PPUSH
47588: CALL_OW 251
47592: PPUSH
47593: LD_VAR 0 2
47597: PPUSH
47598: LD_VAR 0 3
47602: PPUSH
47603: LD_VAR 0 4
47607: PPUSH
47608: CALL 47986 0 5
47612: ST_TO_ADDR
// end ;
47613: LD_VAR 0 5
47617: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47618: LD_INT 0
47620: PPUSH
47621: PPUSH
47622: PPUSH
47623: PPUSH
// if not list or not unit then
47624: LD_VAR 0 2
47628: NOT
47629: PUSH
47630: LD_VAR 0 1
47634: NOT
47635: OR
47636: IFFALSE 47640
// exit ;
47638: GO 47981
// result := [ ] ;
47640: LD_ADDR_VAR 0 5
47644: PUSH
47645: EMPTY
47646: ST_TO_ADDR
// for i in list do
47647: LD_ADDR_VAR 0 6
47651: PUSH
47652: LD_VAR 0 2
47656: PUSH
47657: FOR_IN
47658: IFFALSE 47876
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47660: LD_ADDR_VAR 0 8
47664: PUSH
47665: LD_VAR 0 1
47669: PPUSH
47670: LD_VAR 0 6
47674: PUSH
47675: LD_INT 1
47677: ARRAY
47678: PPUSH
47679: LD_VAR 0 6
47683: PUSH
47684: LD_INT 2
47686: ARRAY
47687: PPUSH
47688: CALL_OW 297
47692: ST_TO_ADDR
// if not Count ( result ) then
47693: LD_VAR 0 5
47697: PPUSH
47698: CALL 44270 0 1
47702: NOT
47703: IFFALSE 47736
// begin result := Join ( result , [ i , tmp ] ) ;
47705: LD_ADDR_VAR 0 5
47709: PUSH
47710: LD_VAR 0 5
47714: PPUSH
47715: LD_VAR 0 6
47719: PUSH
47720: LD_VAR 0 8
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PPUSH
47729: CALL 79870 0 2
47733: ST_TO_ADDR
// continue ;
47734: GO 47657
// end ; if result [ result ] [ 2 ] <= tmp then
47736: LD_VAR 0 5
47740: PUSH
47741: LD_VAR 0 5
47745: ARRAY
47746: PUSH
47747: LD_INT 2
47749: ARRAY
47750: PUSH
47751: LD_VAR 0 8
47755: LESSEQUAL
47756: IFFALSE 47789
// result := Join ( result , [ i , tmp ] ) else
47758: LD_ADDR_VAR 0 5
47762: PUSH
47763: LD_VAR 0 5
47767: PPUSH
47768: LD_VAR 0 6
47772: PUSH
47773: LD_VAR 0 8
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PPUSH
47782: CALL 79870 0 2
47786: ST_TO_ADDR
47787: GO 47874
// begin for j := 1 to Count ( result ) do
47789: LD_ADDR_VAR 0 7
47793: PUSH
47794: DOUBLE
47795: LD_INT 1
47797: DEC
47798: ST_TO_ADDR
47799: LD_VAR 0 5
47803: PPUSH
47804: CALL 44270 0 1
47808: PUSH
47809: FOR_TO
47810: IFFALSE 47872
// begin if tmp < result [ j ] [ 2 ] then
47812: LD_VAR 0 8
47816: PUSH
47817: LD_VAR 0 5
47821: PUSH
47822: LD_VAR 0 7
47826: ARRAY
47827: PUSH
47828: LD_INT 2
47830: ARRAY
47831: LESS
47832: IFFALSE 47870
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47834: LD_ADDR_VAR 0 5
47838: PUSH
47839: LD_VAR 0 5
47843: PPUSH
47844: LD_VAR 0 7
47848: PPUSH
47849: LD_VAR 0 6
47853: PUSH
47854: LD_VAR 0 8
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PPUSH
47863: CALL_OW 2
47867: ST_TO_ADDR
// break ;
47868: GO 47872
// end ; end ;
47870: GO 47809
47872: POP
47873: POP
// end ; end ;
47874: GO 47657
47876: POP
47877: POP
// if result and not asc then
47878: LD_VAR 0 5
47882: PUSH
47883: LD_VAR 0 3
47887: NOT
47888: AND
47889: IFFALSE 47906
// result := ReverseArray ( result ) ;
47891: LD_ADDR_VAR 0 5
47895: PUSH
47896: LD_VAR 0 5
47900: PPUSH
47901: CALL 75146 0 1
47905: ST_TO_ADDR
// tmp := [ ] ;
47906: LD_ADDR_VAR 0 8
47910: PUSH
47911: EMPTY
47912: ST_TO_ADDR
// if mode then
47913: LD_VAR 0 4
47917: IFFALSE 47981
// begin for i := 1 to result do
47919: LD_ADDR_VAR 0 6
47923: PUSH
47924: DOUBLE
47925: LD_INT 1
47927: DEC
47928: ST_TO_ADDR
47929: LD_VAR 0 5
47933: PUSH
47934: FOR_TO
47935: IFFALSE 47969
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47937: LD_ADDR_VAR 0 8
47941: PUSH
47942: LD_VAR 0 8
47946: PPUSH
47947: LD_VAR 0 5
47951: PUSH
47952: LD_VAR 0 6
47956: ARRAY
47957: PUSH
47958: LD_INT 1
47960: ARRAY
47961: PPUSH
47962: CALL 79870 0 2
47966: ST_TO_ADDR
47967: GO 47934
47969: POP
47970: POP
// result := tmp ;
47971: LD_ADDR_VAR 0 5
47975: PUSH
47976: LD_VAR 0 8
47980: ST_TO_ADDR
// end ; end ;
47981: LD_VAR 0 5
47985: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47986: LD_INT 0
47988: PPUSH
47989: PPUSH
47990: PPUSH
47991: PPUSH
// if not list then
47992: LD_VAR 0 3
47996: NOT
47997: IFFALSE 48001
// exit ;
47999: GO 48389
// result := [ ] ;
48001: LD_ADDR_VAR 0 6
48005: PUSH
48006: EMPTY
48007: ST_TO_ADDR
// for i in list do
48008: LD_ADDR_VAR 0 7
48012: PUSH
48013: LD_VAR 0 3
48017: PUSH
48018: FOR_IN
48019: IFFALSE 48221
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48021: LD_ADDR_VAR 0 9
48025: PUSH
48026: LD_VAR 0 7
48030: PPUSH
48031: LD_VAR 0 1
48035: PPUSH
48036: LD_VAR 0 2
48040: PPUSH
48041: CALL_OW 297
48045: ST_TO_ADDR
// if not result then
48046: LD_VAR 0 6
48050: NOT
48051: IFFALSE 48077
// result := [ [ i , tmp ] ] else
48053: LD_ADDR_VAR 0 6
48057: PUSH
48058: LD_VAR 0 7
48062: PUSH
48063: LD_VAR 0 9
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: EMPTY
48073: LIST
48074: ST_TO_ADDR
48075: GO 48219
// begin if result [ result ] [ 2 ] < tmp then
48077: LD_VAR 0 6
48081: PUSH
48082: LD_VAR 0 6
48086: ARRAY
48087: PUSH
48088: LD_INT 2
48090: ARRAY
48091: PUSH
48092: LD_VAR 0 9
48096: LESS
48097: IFFALSE 48139
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48099: LD_ADDR_VAR 0 6
48103: PUSH
48104: LD_VAR 0 6
48108: PPUSH
48109: LD_VAR 0 6
48113: PUSH
48114: LD_INT 1
48116: PLUS
48117: PPUSH
48118: LD_VAR 0 7
48122: PUSH
48123: LD_VAR 0 9
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PPUSH
48132: CALL_OW 2
48136: ST_TO_ADDR
48137: GO 48219
// for j = 1 to result do
48139: LD_ADDR_VAR 0 8
48143: PUSH
48144: DOUBLE
48145: LD_INT 1
48147: DEC
48148: ST_TO_ADDR
48149: LD_VAR 0 6
48153: PUSH
48154: FOR_TO
48155: IFFALSE 48217
// begin if tmp < result [ j ] [ 2 ] then
48157: LD_VAR 0 9
48161: PUSH
48162: LD_VAR 0 6
48166: PUSH
48167: LD_VAR 0 8
48171: ARRAY
48172: PUSH
48173: LD_INT 2
48175: ARRAY
48176: LESS
48177: IFFALSE 48215
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48179: LD_ADDR_VAR 0 6
48183: PUSH
48184: LD_VAR 0 6
48188: PPUSH
48189: LD_VAR 0 8
48193: PPUSH
48194: LD_VAR 0 7
48198: PUSH
48199: LD_VAR 0 9
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PPUSH
48208: CALL_OW 2
48212: ST_TO_ADDR
// break ;
48213: GO 48217
// end ; end ;
48215: GO 48154
48217: POP
48218: POP
// end ; end ;
48219: GO 48018
48221: POP
48222: POP
// if result and not asc then
48223: LD_VAR 0 6
48227: PUSH
48228: LD_VAR 0 4
48232: NOT
48233: AND
48234: IFFALSE 48309
// begin tmp := result ;
48236: LD_ADDR_VAR 0 9
48240: PUSH
48241: LD_VAR 0 6
48245: ST_TO_ADDR
// for i = tmp downto 1 do
48246: LD_ADDR_VAR 0 7
48250: PUSH
48251: DOUBLE
48252: LD_VAR 0 9
48256: INC
48257: ST_TO_ADDR
48258: LD_INT 1
48260: PUSH
48261: FOR_DOWNTO
48262: IFFALSE 48307
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48264: LD_ADDR_VAR 0 6
48268: PUSH
48269: LD_VAR 0 6
48273: PPUSH
48274: LD_VAR 0 9
48278: PUSH
48279: LD_VAR 0 7
48283: MINUS
48284: PUSH
48285: LD_INT 1
48287: PLUS
48288: PPUSH
48289: LD_VAR 0 9
48293: PUSH
48294: LD_VAR 0 7
48298: ARRAY
48299: PPUSH
48300: CALL_OW 1
48304: ST_TO_ADDR
48305: GO 48261
48307: POP
48308: POP
// end ; tmp := [ ] ;
48309: LD_ADDR_VAR 0 9
48313: PUSH
48314: EMPTY
48315: ST_TO_ADDR
// if mode then
48316: LD_VAR 0 5
48320: IFFALSE 48389
// begin for i = 1 to result do
48322: LD_ADDR_VAR 0 7
48326: PUSH
48327: DOUBLE
48328: LD_INT 1
48330: DEC
48331: ST_TO_ADDR
48332: LD_VAR 0 6
48336: PUSH
48337: FOR_TO
48338: IFFALSE 48377
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48340: LD_ADDR_VAR 0 9
48344: PUSH
48345: LD_VAR 0 9
48349: PPUSH
48350: LD_VAR 0 7
48354: PPUSH
48355: LD_VAR 0 6
48359: PUSH
48360: LD_VAR 0 7
48364: ARRAY
48365: PUSH
48366: LD_INT 1
48368: ARRAY
48369: PPUSH
48370: CALL_OW 1
48374: ST_TO_ADDR
48375: GO 48337
48377: POP
48378: POP
// result := tmp ;
48379: LD_ADDR_VAR 0 6
48383: PUSH
48384: LD_VAR 0 9
48388: ST_TO_ADDR
// end ; end ;
48389: LD_VAR 0 6
48393: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48394: LD_INT 0
48396: PPUSH
48397: PPUSH
48398: PPUSH
48399: PPUSH
48400: PPUSH
48401: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48402: LD_ADDR_VAR 0 5
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: ST_TO_ADDR
// if not x or not y then
48424: LD_VAR 0 2
48428: NOT
48429: PUSH
48430: LD_VAR 0 3
48434: NOT
48435: OR
48436: IFFALSE 48440
// exit ;
48438: GO 50090
// if not range then
48440: LD_VAR 0 4
48444: NOT
48445: IFFALSE 48455
// range := 10 ;
48447: LD_ADDR_VAR 0 4
48451: PUSH
48452: LD_INT 10
48454: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48455: LD_ADDR_VAR 0 8
48459: PUSH
48460: LD_INT 81
48462: PUSH
48463: LD_VAR 0 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 92
48474: PUSH
48475: LD_VAR 0 2
48479: PUSH
48480: LD_VAR 0 3
48484: PUSH
48485: LD_VAR 0 4
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: LD_INT 21
48501: PUSH
48502: LD_INT 3
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: LIST
48517: PPUSH
48518: CALL_OW 69
48522: ST_TO_ADDR
// if not tmp then
48523: LD_VAR 0 8
48527: NOT
48528: IFFALSE 48532
// exit ;
48530: GO 50090
// for i in tmp do
48532: LD_ADDR_VAR 0 6
48536: PUSH
48537: LD_VAR 0 8
48541: PUSH
48542: FOR_IN
48543: IFFALSE 50065
// begin points := [ 0 , 0 , 0 ] ;
48545: LD_ADDR_VAR 0 9
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: ST_TO_ADDR
// bpoints := 1 ;
48564: LD_ADDR_VAR 0 10
48568: PUSH
48569: LD_INT 1
48571: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48572: LD_VAR 0 6
48576: PPUSH
48577: CALL_OW 247
48581: PUSH
48582: LD_INT 1
48584: DOUBLE
48585: EQUAL
48586: IFTRUE 48590
48588: GO 49168
48590: POP
// begin if GetClass ( i ) = 1 then
48591: LD_VAR 0 6
48595: PPUSH
48596: CALL_OW 257
48600: PUSH
48601: LD_INT 1
48603: EQUAL
48604: IFFALSE 48625
// points := [ 10 , 5 , 3 ] ;
48606: LD_ADDR_VAR 0 9
48610: PUSH
48611: LD_INT 10
48613: PUSH
48614: LD_INT 5
48616: PUSH
48617: LD_INT 3
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48625: LD_VAR 0 6
48629: PPUSH
48630: CALL_OW 257
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: LD_INT 3
48640: PUSH
48641: LD_INT 4
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: LIST
48648: IN
48649: IFFALSE 48670
// points := [ 3 , 2 , 1 ] ;
48651: LD_ADDR_VAR 0 9
48655: PUSH
48656: LD_INT 3
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: LIST
48669: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48670: LD_VAR 0 6
48674: PPUSH
48675: CALL_OW 257
48679: PUSH
48680: LD_INT 5
48682: EQUAL
48683: IFFALSE 48704
// points := [ 130 , 5 , 2 ] ;
48685: LD_ADDR_VAR 0 9
48689: PUSH
48690: LD_INT 130
48692: PUSH
48693: LD_INT 5
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: LIST
48703: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48704: LD_VAR 0 6
48708: PPUSH
48709: CALL_OW 257
48713: PUSH
48714: LD_INT 8
48716: EQUAL
48717: IFFALSE 48738
// points := [ 35 , 35 , 30 ] ;
48719: LD_ADDR_VAR 0 9
48723: PUSH
48724: LD_INT 35
48726: PUSH
48727: LD_INT 35
48729: PUSH
48730: LD_INT 30
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48738: LD_VAR 0 6
48742: PPUSH
48743: CALL_OW 257
48747: PUSH
48748: LD_INT 9
48750: EQUAL
48751: IFFALSE 48772
// points := [ 20 , 55 , 40 ] ;
48753: LD_ADDR_VAR 0 9
48757: PUSH
48758: LD_INT 20
48760: PUSH
48761: LD_INT 55
48763: PUSH
48764: LD_INT 40
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: LIST
48771: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48772: LD_VAR 0 6
48776: PPUSH
48777: CALL_OW 257
48781: PUSH
48782: LD_INT 12
48784: PUSH
48785: LD_INT 16
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: IN
48792: IFFALSE 48813
// points := [ 5 , 3 , 2 ] ;
48794: LD_ADDR_VAR 0 9
48798: PUSH
48799: LD_INT 5
48801: PUSH
48802: LD_INT 3
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48813: LD_VAR 0 6
48817: PPUSH
48818: CALL_OW 257
48822: PUSH
48823: LD_INT 17
48825: EQUAL
48826: IFFALSE 48847
// points := [ 100 , 50 , 75 ] ;
48828: LD_ADDR_VAR 0 9
48832: PUSH
48833: LD_INT 100
48835: PUSH
48836: LD_INT 50
48838: PUSH
48839: LD_INT 75
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: LIST
48846: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48847: LD_VAR 0 6
48851: PPUSH
48852: CALL_OW 257
48856: PUSH
48857: LD_INT 15
48859: EQUAL
48860: IFFALSE 48881
// points := [ 10 , 5 , 3 ] ;
48862: LD_ADDR_VAR 0 9
48866: PUSH
48867: LD_INT 10
48869: PUSH
48870: LD_INT 5
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48881: LD_VAR 0 6
48885: PPUSH
48886: CALL_OW 257
48890: PUSH
48891: LD_INT 14
48893: EQUAL
48894: IFFALSE 48915
// points := [ 10 , 0 , 0 ] ;
48896: LD_ADDR_VAR 0 9
48900: PUSH
48901: LD_INT 10
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: LIST
48914: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48915: LD_VAR 0 6
48919: PPUSH
48920: CALL_OW 257
48924: PUSH
48925: LD_INT 11
48927: EQUAL
48928: IFFALSE 48949
// points := [ 30 , 10 , 5 ] ;
48930: LD_ADDR_VAR 0 9
48934: PUSH
48935: LD_INT 30
48937: PUSH
48938: LD_INT 10
48940: PUSH
48941: LD_INT 5
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48949: LD_VAR 0 1
48953: PPUSH
48954: LD_INT 5
48956: PPUSH
48957: CALL_OW 321
48961: PUSH
48962: LD_INT 2
48964: EQUAL
48965: IFFALSE 48982
// bpoints := bpoints * 1.8 ;
48967: LD_ADDR_VAR 0 10
48971: PUSH
48972: LD_VAR 0 10
48976: PUSH
48977: LD_REAL  1.80000000000000E+0000
48980: MUL
48981: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48982: LD_VAR 0 6
48986: PPUSH
48987: CALL_OW 257
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 3
49000: PUSH
49001: LD_INT 4
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: IN
49010: PUSH
49011: LD_VAR 0 1
49015: PPUSH
49016: LD_INT 51
49018: PPUSH
49019: CALL_OW 321
49023: PUSH
49024: LD_INT 2
49026: EQUAL
49027: AND
49028: IFFALSE 49045
// bpoints := bpoints * 1.2 ;
49030: LD_ADDR_VAR 0 10
49034: PUSH
49035: LD_VAR 0 10
49039: PUSH
49040: LD_REAL  1.20000000000000E+0000
49043: MUL
49044: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49045: LD_VAR 0 6
49049: PPUSH
49050: CALL_OW 257
49054: PUSH
49055: LD_INT 5
49057: PUSH
49058: LD_INT 7
49060: PUSH
49061: LD_INT 9
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: LIST
49068: IN
49069: PUSH
49070: LD_VAR 0 1
49074: PPUSH
49075: LD_INT 52
49077: PPUSH
49078: CALL_OW 321
49082: PUSH
49083: LD_INT 2
49085: EQUAL
49086: AND
49087: IFFALSE 49104
// bpoints := bpoints * 1.5 ;
49089: LD_ADDR_VAR 0 10
49093: PUSH
49094: LD_VAR 0 10
49098: PUSH
49099: LD_REAL  1.50000000000000E+0000
49102: MUL
49103: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49104: LD_VAR 0 1
49108: PPUSH
49109: LD_INT 66
49111: PPUSH
49112: CALL_OW 321
49116: PUSH
49117: LD_INT 2
49119: EQUAL
49120: IFFALSE 49137
// bpoints := bpoints * 1.1 ;
49122: LD_ADDR_VAR 0 10
49126: PUSH
49127: LD_VAR 0 10
49131: PUSH
49132: LD_REAL  1.10000000000000E+0000
49135: MUL
49136: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49137: LD_ADDR_VAR 0 10
49141: PUSH
49142: LD_VAR 0 10
49146: PUSH
49147: LD_VAR 0 6
49151: PPUSH
49152: LD_INT 1
49154: PPUSH
49155: CALL_OW 259
49159: PUSH
49160: LD_REAL  1.15000000000000E+0000
49163: MUL
49164: MUL
49165: ST_TO_ADDR
// end ; unit_vehicle :
49166: GO 49994
49168: LD_INT 2
49170: DOUBLE
49171: EQUAL
49172: IFTRUE 49176
49174: GO 49982
49176: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49177: LD_VAR 0 6
49181: PPUSH
49182: CALL_OW 264
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: LD_INT 42
49192: PUSH
49193: LD_INT 24
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: IN
49201: IFFALSE 49222
// points := [ 25 , 5 , 3 ] ;
49203: LD_ADDR_VAR 0 9
49207: PUSH
49208: LD_INT 25
49210: PUSH
49211: LD_INT 5
49213: PUSH
49214: LD_INT 3
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: LIST
49221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49222: LD_VAR 0 6
49226: PPUSH
49227: CALL_OW 264
49231: PUSH
49232: LD_INT 4
49234: PUSH
49235: LD_INT 43
49237: PUSH
49238: LD_INT 25
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: LIST
49245: IN
49246: IFFALSE 49267
// points := [ 40 , 15 , 5 ] ;
49248: LD_ADDR_VAR 0 9
49252: PUSH
49253: LD_INT 40
49255: PUSH
49256: LD_INT 15
49258: PUSH
49259: LD_INT 5
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49267: LD_VAR 0 6
49271: PPUSH
49272: CALL_OW 264
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: LD_INT 23
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: IN
49287: IFFALSE 49308
// points := [ 7 , 25 , 8 ] ;
49289: LD_ADDR_VAR 0 9
49293: PUSH
49294: LD_INT 7
49296: PUSH
49297: LD_INT 25
49299: PUSH
49300: LD_INT 8
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: LIST
49307: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49308: LD_VAR 0 6
49312: PPUSH
49313: CALL_OW 264
49317: PUSH
49318: LD_INT 5
49320: PUSH
49321: LD_INT 27
49323: PUSH
49324: LD_INT 44
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: IN
49332: IFFALSE 49353
// points := [ 14 , 50 , 16 ] ;
49334: LD_ADDR_VAR 0 9
49338: PUSH
49339: LD_INT 14
49341: PUSH
49342: LD_INT 50
49344: PUSH
49345: LD_INT 16
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: LIST
49352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49353: LD_VAR 0 6
49357: PPUSH
49358: CALL_OW 264
49362: PUSH
49363: LD_INT 6
49365: PUSH
49366: LD_INT 46
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: IN
49373: IFFALSE 49394
// points := [ 32 , 120 , 70 ] ;
49375: LD_ADDR_VAR 0 9
49379: PUSH
49380: LD_INT 32
49382: PUSH
49383: LD_INT 120
49385: PUSH
49386: LD_INT 70
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49394: LD_VAR 0 6
49398: PPUSH
49399: CALL_OW 264
49403: PUSH
49404: LD_INT 7
49406: PUSH
49407: LD_INT 28
49409: PUSH
49410: LD_INT 45
49412: PUSH
49413: LD_INT 92
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: IN
49422: IFFALSE 49443
// points := [ 35 , 20 , 45 ] ;
49424: LD_ADDR_VAR 0 9
49428: PUSH
49429: LD_INT 35
49431: PUSH
49432: LD_INT 20
49434: PUSH
49435: LD_INT 45
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: LIST
49442: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49443: LD_VAR 0 6
49447: PPUSH
49448: CALL_OW 264
49452: PUSH
49453: LD_INT 47
49455: PUSH
49456: EMPTY
49457: LIST
49458: IN
49459: IFFALSE 49480
// points := [ 67 , 45 , 75 ] ;
49461: LD_ADDR_VAR 0 9
49465: PUSH
49466: LD_INT 67
49468: PUSH
49469: LD_INT 45
49471: PUSH
49472: LD_INT 75
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: LIST
49479: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49480: LD_VAR 0 6
49484: PPUSH
49485: CALL_OW 264
49489: PUSH
49490: LD_INT 26
49492: PUSH
49493: EMPTY
49494: LIST
49495: IN
49496: IFFALSE 49517
// points := [ 120 , 30 , 80 ] ;
49498: LD_ADDR_VAR 0 9
49502: PUSH
49503: LD_INT 120
49505: PUSH
49506: LD_INT 30
49508: PUSH
49509: LD_INT 80
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: LIST
49516: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49517: LD_VAR 0 6
49521: PPUSH
49522: CALL_OW 264
49526: PUSH
49527: LD_INT 22
49529: PUSH
49530: EMPTY
49531: LIST
49532: IN
49533: IFFALSE 49554
// points := [ 40 , 1 , 1 ] ;
49535: LD_ADDR_VAR 0 9
49539: PUSH
49540: LD_INT 40
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: LIST
49553: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49554: LD_VAR 0 6
49558: PPUSH
49559: CALL_OW 264
49563: PUSH
49564: LD_INT 29
49566: PUSH
49567: EMPTY
49568: LIST
49569: IN
49570: IFFALSE 49591
// points := [ 70 , 200 , 400 ] ;
49572: LD_ADDR_VAR 0 9
49576: PUSH
49577: LD_INT 70
49579: PUSH
49580: LD_INT 200
49582: PUSH
49583: LD_INT 400
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: LIST
49590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49591: LD_VAR 0 6
49595: PPUSH
49596: CALL_OW 264
49600: PUSH
49601: LD_INT 14
49603: PUSH
49604: LD_INT 53
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: IN
49611: IFFALSE 49632
// points := [ 40 , 10 , 20 ] ;
49613: LD_ADDR_VAR 0 9
49617: PUSH
49618: LD_INT 40
49620: PUSH
49621: LD_INT 10
49623: PUSH
49624: LD_INT 20
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: LIST
49631: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49632: LD_VAR 0 6
49636: PPUSH
49637: CALL_OW 264
49641: PUSH
49642: LD_INT 9
49644: PUSH
49645: EMPTY
49646: LIST
49647: IN
49648: IFFALSE 49669
// points := [ 5 , 70 , 20 ] ;
49650: LD_ADDR_VAR 0 9
49654: PUSH
49655: LD_INT 5
49657: PUSH
49658: LD_INT 70
49660: PUSH
49661: LD_INT 20
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: LIST
49668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49669: LD_VAR 0 6
49673: PPUSH
49674: CALL_OW 264
49678: PUSH
49679: LD_INT 10
49681: PUSH
49682: EMPTY
49683: LIST
49684: IN
49685: IFFALSE 49706
// points := [ 35 , 110 , 70 ] ;
49687: LD_ADDR_VAR 0 9
49691: PUSH
49692: LD_INT 35
49694: PUSH
49695: LD_INT 110
49697: PUSH
49698: LD_INT 70
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: LIST
49705: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49706: LD_VAR 0 6
49710: PPUSH
49711: CALL_OW 265
49715: PUSH
49716: LD_INT 25
49718: EQUAL
49719: IFFALSE 49740
// points := [ 80 , 65 , 100 ] ;
49721: LD_ADDR_VAR 0 9
49725: PUSH
49726: LD_INT 80
49728: PUSH
49729: LD_INT 65
49731: PUSH
49732: LD_INT 100
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: LIST
49739: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49740: LD_VAR 0 6
49744: PPUSH
49745: CALL_OW 263
49749: PUSH
49750: LD_INT 1
49752: EQUAL
49753: IFFALSE 49788
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49755: LD_ADDR_VAR 0 10
49759: PUSH
49760: LD_VAR 0 10
49764: PUSH
49765: LD_VAR 0 6
49769: PPUSH
49770: CALL_OW 311
49774: PPUSH
49775: LD_INT 3
49777: PPUSH
49778: CALL_OW 259
49782: PUSH
49783: LD_INT 4
49785: MUL
49786: MUL
49787: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49788: LD_VAR 0 6
49792: PPUSH
49793: CALL_OW 263
49797: PUSH
49798: LD_INT 2
49800: EQUAL
49801: IFFALSE 49852
// begin j := IsControledBy ( i ) ;
49803: LD_ADDR_VAR 0 7
49807: PUSH
49808: LD_VAR 0 6
49812: PPUSH
49813: CALL_OW 312
49817: ST_TO_ADDR
// if j then
49818: LD_VAR 0 7
49822: IFFALSE 49852
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49824: LD_ADDR_VAR 0 10
49828: PUSH
49829: LD_VAR 0 10
49833: PUSH
49834: LD_VAR 0 7
49838: PPUSH
49839: LD_INT 3
49841: PPUSH
49842: CALL_OW 259
49846: PUSH
49847: LD_INT 3
49849: MUL
49850: MUL
49851: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49852: LD_VAR 0 6
49856: PPUSH
49857: CALL_OW 264
49861: PUSH
49862: LD_INT 5
49864: PUSH
49865: LD_INT 6
49867: PUSH
49868: LD_INT 46
49870: PUSH
49871: LD_INT 44
49873: PUSH
49874: LD_INT 47
49876: PUSH
49877: LD_INT 45
49879: PUSH
49880: LD_INT 28
49882: PUSH
49883: LD_INT 7
49885: PUSH
49886: LD_INT 27
49888: PUSH
49889: LD_INT 29
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: IN
49904: PUSH
49905: LD_VAR 0 1
49909: PPUSH
49910: LD_INT 52
49912: PPUSH
49913: CALL_OW 321
49917: PUSH
49918: LD_INT 2
49920: EQUAL
49921: AND
49922: IFFALSE 49939
// bpoints := bpoints * 1.2 ;
49924: LD_ADDR_VAR 0 10
49928: PUSH
49929: LD_VAR 0 10
49933: PUSH
49934: LD_REAL  1.20000000000000E+0000
49937: MUL
49938: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49939: LD_VAR 0 6
49943: PPUSH
49944: CALL_OW 264
49948: PUSH
49949: LD_INT 6
49951: PUSH
49952: LD_INT 46
49954: PUSH
49955: LD_INT 47
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: IN
49963: IFFALSE 49980
// bpoints := bpoints * 1.2 ;
49965: LD_ADDR_VAR 0 10
49969: PUSH
49970: LD_VAR 0 10
49974: PUSH
49975: LD_REAL  1.20000000000000E+0000
49978: MUL
49979: ST_TO_ADDR
// end ; unit_building :
49980: GO 49994
49982: LD_INT 3
49984: DOUBLE
49985: EQUAL
49986: IFTRUE 49990
49988: GO 49993
49990: POP
// ; end ;
49991: GO 49994
49993: POP
// for j = 1 to 3 do
49994: LD_ADDR_VAR 0 7
49998: PUSH
49999: DOUBLE
50000: LD_INT 1
50002: DEC
50003: ST_TO_ADDR
50004: LD_INT 3
50006: PUSH
50007: FOR_TO
50008: IFFALSE 50061
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50010: LD_ADDR_VAR 0 5
50014: PUSH
50015: LD_VAR 0 5
50019: PPUSH
50020: LD_VAR 0 7
50024: PPUSH
50025: LD_VAR 0 5
50029: PUSH
50030: LD_VAR 0 7
50034: ARRAY
50035: PUSH
50036: LD_VAR 0 9
50040: PUSH
50041: LD_VAR 0 7
50045: ARRAY
50046: PUSH
50047: LD_VAR 0 10
50051: MUL
50052: PLUS
50053: PPUSH
50054: CALL_OW 1
50058: ST_TO_ADDR
50059: GO 50007
50061: POP
50062: POP
// end ;
50063: GO 48542
50065: POP
50066: POP
// result := Replace ( result , 4 , tmp ) ;
50067: LD_ADDR_VAR 0 5
50071: PUSH
50072: LD_VAR 0 5
50076: PPUSH
50077: LD_INT 4
50079: PPUSH
50080: LD_VAR 0 8
50084: PPUSH
50085: CALL_OW 1
50089: ST_TO_ADDR
// end ;
50090: LD_VAR 0 5
50094: RET
// export function DangerAtRange ( unit , range ) ; begin
50095: LD_INT 0
50097: PPUSH
// if not unit then
50098: LD_VAR 0 1
50102: NOT
50103: IFFALSE 50107
// exit ;
50105: GO 50152
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50107: LD_ADDR_VAR 0 3
50111: PUSH
50112: LD_VAR 0 1
50116: PPUSH
50117: CALL_OW 255
50121: PPUSH
50122: LD_VAR 0 1
50126: PPUSH
50127: CALL_OW 250
50131: PPUSH
50132: LD_VAR 0 1
50136: PPUSH
50137: CALL_OW 251
50141: PPUSH
50142: LD_VAR 0 2
50146: PPUSH
50147: CALL 48394 0 4
50151: ST_TO_ADDR
// end ;
50152: LD_VAR 0 3
50156: RET
// export function DangerInArea ( side , area ) ; begin
50157: LD_INT 0
50159: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50160: LD_ADDR_VAR 0 3
50164: PUSH
50165: LD_VAR 0 2
50169: PPUSH
50170: LD_INT 81
50172: PUSH
50173: LD_VAR 0 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PPUSH
50182: CALL_OW 70
50186: ST_TO_ADDR
// end ;
50187: LD_VAR 0 3
50191: RET
// export function IsExtension ( b ) ; begin
50192: LD_INT 0
50194: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50195: LD_ADDR_VAR 0 2
50199: PUSH
50200: LD_VAR 0 1
50204: PUSH
50205: LD_INT 23
50207: PUSH
50208: LD_INT 20
50210: PUSH
50211: LD_INT 22
50213: PUSH
50214: LD_INT 17
50216: PUSH
50217: LD_INT 24
50219: PUSH
50220: LD_INT 21
50222: PUSH
50223: LD_INT 19
50225: PUSH
50226: LD_INT 16
50228: PUSH
50229: LD_INT 25
50231: PUSH
50232: LD_INT 18
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: IN
50247: ST_TO_ADDR
// end ;
50248: LD_VAR 0 2
50252: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50253: LD_INT 0
50255: PPUSH
50256: PPUSH
50257: PPUSH
// result := [ ] ;
50258: LD_ADDR_VAR 0 4
50262: PUSH
50263: EMPTY
50264: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50265: LD_ADDR_VAR 0 5
50269: PUSH
50270: LD_VAR 0 2
50274: PPUSH
50275: LD_INT 21
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PPUSH
50285: CALL_OW 70
50289: ST_TO_ADDR
// if not tmp then
50290: LD_VAR 0 5
50294: NOT
50295: IFFALSE 50299
// exit ;
50297: GO 50363
// if checkLink then
50299: LD_VAR 0 3
50303: IFFALSE 50353
// begin for i in tmp do
50305: LD_ADDR_VAR 0 6
50309: PUSH
50310: LD_VAR 0 5
50314: PUSH
50315: FOR_IN
50316: IFFALSE 50351
// if GetBase ( i ) <> base then
50318: LD_VAR 0 6
50322: PPUSH
50323: CALL_OW 274
50327: PUSH
50328: LD_VAR 0 1
50332: NONEQUAL
50333: IFFALSE 50349
// ComLinkToBase ( base , i ) ;
50335: LD_VAR 0 1
50339: PPUSH
50340: LD_VAR 0 6
50344: PPUSH
50345: CALL_OW 169
50349: GO 50315
50351: POP
50352: POP
// end ; result := tmp ;
50353: LD_ADDR_VAR 0 4
50357: PUSH
50358: LD_VAR 0 5
50362: ST_TO_ADDR
// end ;
50363: LD_VAR 0 4
50367: RET
// export function ComComplete ( units , b ) ; var i ; begin
50368: LD_INT 0
50370: PPUSH
50371: PPUSH
// if not units then
50372: LD_VAR 0 1
50376: NOT
50377: IFFALSE 50381
// exit ;
50379: GO 50471
// for i in units do
50381: LD_ADDR_VAR 0 4
50385: PUSH
50386: LD_VAR 0 1
50390: PUSH
50391: FOR_IN
50392: IFFALSE 50469
// if BuildingStatus ( b ) = bs_build then
50394: LD_VAR 0 2
50398: PPUSH
50399: CALL_OW 461
50403: PUSH
50404: LD_INT 1
50406: EQUAL
50407: IFFALSE 50467
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50409: LD_VAR 0 4
50413: PPUSH
50414: LD_STRING h
50416: PUSH
50417: LD_VAR 0 2
50421: PPUSH
50422: CALL_OW 250
50426: PUSH
50427: LD_VAR 0 2
50431: PPUSH
50432: CALL_OW 251
50436: PUSH
50437: LD_VAR 0 2
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: PPUSH
50463: CALL_OW 446
50467: GO 50391
50469: POP
50470: POP
// end ;
50471: LD_VAR 0 3
50475: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50476: LD_INT 0
50478: PPUSH
50479: PPUSH
50480: PPUSH
50481: PPUSH
50482: PPUSH
50483: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50484: LD_VAR 0 1
50488: NOT
50489: PUSH
50490: LD_VAR 0 1
50494: PPUSH
50495: CALL_OW 263
50499: PUSH
50500: LD_INT 2
50502: NONEQUAL
50503: OR
50504: IFFALSE 50508
// exit ;
50506: GO 50824
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50508: LD_ADDR_VAR 0 6
50512: PUSH
50513: LD_INT 22
50515: PUSH
50516: LD_VAR 0 1
50520: PPUSH
50521: CALL_OW 255
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 30
50535: PUSH
50536: LD_INT 36
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 34
50545: PUSH
50546: LD_INT 31
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: LIST
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PPUSH
50562: CALL_OW 69
50566: ST_TO_ADDR
// if not tmp then
50567: LD_VAR 0 6
50571: NOT
50572: IFFALSE 50576
// exit ;
50574: GO 50824
// result := [ ] ;
50576: LD_ADDR_VAR 0 2
50580: PUSH
50581: EMPTY
50582: ST_TO_ADDR
// for i in tmp do
50583: LD_ADDR_VAR 0 3
50587: PUSH
50588: LD_VAR 0 6
50592: PUSH
50593: FOR_IN
50594: IFFALSE 50665
// begin t := UnitsInside ( i ) ;
50596: LD_ADDR_VAR 0 4
50600: PUSH
50601: LD_VAR 0 3
50605: PPUSH
50606: CALL_OW 313
50610: ST_TO_ADDR
// if t then
50611: LD_VAR 0 4
50615: IFFALSE 50663
// for j in t do
50617: LD_ADDR_VAR 0 7
50621: PUSH
50622: LD_VAR 0 4
50626: PUSH
50627: FOR_IN
50628: IFFALSE 50661
// result := Replace ( result , result + 1 , j ) ;
50630: LD_ADDR_VAR 0 2
50634: PUSH
50635: LD_VAR 0 2
50639: PPUSH
50640: LD_VAR 0 2
50644: PUSH
50645: LD_INT 1
50647: PLUS
50648: PPUSH
50649: LD_VAR 0 7
50653: PPUSH
50654: CALL_OW 1
50658: ST_TO_ADDR
50659: GO 50627
50661: POP
50662: POP
// end ;
50663: GO 50593
50665: POP
50666: POP
// if not result then
50667: LD_VAR 0 2
50671: NOT
50672: IFFALSE 50676
// exit ;
50674: GO 50824
// mech := result [ 1 ] ;
50676: LD_ADDR_VAR 0 5
50680: PUSH
50681: LD_VAR 0 2
50685: PUSH
50686: LD_INT 1
50688: ARRAY
50689: ST_TO_ADDR
// if result > 1 then
50690: LD_VAR 0 2
50694: PUSH
50695: LD_INT 1
50697: GREATER
50698: IFFALSE 50810
// begin for i = 2 to result do
50700: LD_ADDR_VAR 0 3
50704: PUSH
50705: DOUBLE
50706: LD_INT 2
50708: DEC
50709: ST_TO_ADDR
50710: LD_VAR 0 2
50714: PUSH
50715: FOR_TO
50716: IFFALSE 50808
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50718: LD_ADDR_VAR 0 4
50722: PUSH
50723: LD_VAR 0 2
50727: PUSH
50728: LD_VAR 0 3
50732: ARRAY
50733: PPUSH
50734: LD_INT 3
50736: PPUSH
50737: CALL_OW 259
50741: PUSH
50742: LD_VAR 0 2
50746: PUSH
50747: LD_VAR 0 3
50751: ARRAY
50752: PPUSH
50753: CALL_OW 432
50757: MINUS
50758: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50759: LD_VAR 0 4
50763: PUSH
50764: LD_VAR 0 5
50768: PPUSH
50769: LD_INT 3
50771: PPUSH
50772: CALL_OW 259
50776: PUSH
50777: LD_VAR 0 5
50781: PPUSH
50782: CALL_OW 432
50786: MINUS
50787: GREATEREQUAL
50788: IFFALSE 50806
// mech := result [ i ] ;
50790: LD_ADDR_VAR 0 5
50794: PUSH
50795: LD_VAR 0 2
50799: PUSH
50800: LD_VAR 0 3
50804: ARRAY
50805: ST_TO_ADDR
// end ;
50806: GO 50715
50808: POP
50809: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50810: LD_VAR 0 1
50814: PPUSH
50815: LD_VAR 0 5
50819: PPUSH
50820: CALL_OW 135
// end ;
50824: LD_VAR 0 2
50828: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50829: LD_INT 0
50831: PPUSH
50832: PPUSH
50833: PPUSH
50834: PPUSH
50835: PPUSH
50836: PPUSH
50837: PPUSH
50838: PPUSH
50839: PPUSH
50840: PPUSH
50841: PPUSH
50842: PPUSH
50843: PPUSH
// result := [ ] ;
50844: LD_ADDR_VAR 0 7
50848: PUSH
50849: EMPTY
50850: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50851: LD_VAR 0 1
50855: PPUSH
50856: CALL_OW 266
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: IN
50871: NOT
50872: IFFALSE 50876
// exit ;
50874: GO 52510
// if name then
50876: LD_VAR 0 3
50880: IFFALSE 50896
// SetBName ( base_dep , name ) ;
50882: LD_VAR 0 1
50886: PPUSH
50887: LD_VAR 0 3
50891: PPUSH
50892: CALL_OW 500
// base := GetBase ( base_dep ) ;
50896: LD_ADDR_VAR 0 15
50900: PUSH
50901: LD_VAR 0 1
50905: PPUSH
50906: CALL_OW 274
50910: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50911: LD_ADDR_VAR 0 16
50915: PUSH
50916: LD_VAR 0 1
50920: PPUSH
50921: CALL_OW 255
50925: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50926: LD_ADDR_VAR 0 17
50930: PUSH
50931: LD_VAR 0 1
50935: PPUSH
50936: CALL_OW 248
50940: ST_TO_ADDR
// if sources then
50941: LD_VAR 0 5
50945: IFFALSE 50992
// for i = 1 to 3 do
50947: LD_ADDR_VAR 0 8
50951: PUSH
50952: DOUBLE
50953: LD_INT 1
50955: DEC
50956: ST_TO_ADDR
50957: LD_INT 3
50959: PUSH
50960: FOR_TO
50961: IFFALSE 50990
// AddResourceType ( base , i , sources [ i ] ) ;
50963: LD_VAR 0 15
50967: PPUSH
50968: LD_VAR 0 8
50972: PPUSH
50973: LD_VAR 0 5
50977: PUSH
50978: LD_VAR 0 8
50982: ARRAY
50983: PPUSH
50984: CALL_OW 276
50988: GO 50960
50990: POP
50991: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50992: LD_ADDR_VAR 0 18
50996: PUSH
50997: LD_VAR 0 15
51001: PPUSH
51002: LD_VAR 0 2
51006: PPUSH
51007: LD_INT 1
51009: PPUSH
51010: CALL 50253 0 3
51014: ST_TO_ADDR
// InitHc ;
51015: CALL_OW 19
// InitUc ;
51019: CALL_OW 18
// uc_side := side ;
51023: LD_ADDR_OWVAR 20
51027: PUSH
51028: LD_VAR 0 16
51032: ST_TO_ADDR
// uc_nation := nation ;
51033: LD_ADDR_OWVAR 21
51037: PUSH
51038: LD_VAR 0 17
51042: ST_TO_ADDR
// if buildings then
51043: LD_VAR 0 18
51047: IFFALSE 52369
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51049: LD_ADDR_VAR 0 19
51053: PUSH
51054: LD_VAR 0 18
51058: PPUSH
51059: LD_INT 2
51061: PUSH
51062: LD_INT 30
51064: PUSH
51065: LD_INT 29
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 30
51074: PUSH
51075: LD_INT 30
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: LIST
51086: PPUSH
51087: CALL_OW 72
51091: ST_TO_ADDR
// if tmp then
51092: LD_VAR 0 19
51096: IFFALSE 51144
// for i in tmp do
51098: LD_ADDR_VAR 0 8
51102: PUSH
51103: LD_VAR 0 19
51107: PUSH
51108: FOR_IN
51109: IFFALSE 51142
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51111: LD_VAR 0 8
51115: PPUSH
51116: CALL_OW 250
51120: PPUSH
51121: LD_VAR 0 8
51125: PPUSH
51126: CALL_OW 251
51130: PPUSH
51131: LD_VAR 0 16
51135: PPUSH
51136: CALL_OW 441
51140: GO 51108
51142: POP
51143: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51144: LD_VAR 0 18
51148: PPUSH
51149: LD_INT 2
51151: PUSH
51152: LD_INT 30
51154: PUSH
51155: LD_INT 32
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 30
51164: PUSH
51165: LD_INT 33
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: LIST
51176: PPUSH
51177: CALL_OW 72
51181: IFFALSE 51269
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51183: LD_ADDR_VAR 0 8
51187: PUSH
51188: LD_VAR 0 18
51192: PPUSH
51193: LD_INT 2
51195: PUSH
51196: LD_INT 30
51198: PUSH
51199: LD_INT 32
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 30
51208: PUSH
51209: LD_INT 33
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: LIST
51220: PPUSH
51221: CALL_OW 72
51225: PUSH
51226: FOR_IN
51227: IFFALSE 51267
// begin if not GetBWeapon ( i ) then
51229: LD_VAR 0 8
51233: PPUSH
51234: CALL_OW 269
51238: NOT
51239: IFFALSE 51265
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51241: LD_VAR 0 8
51245: PPUSH
51246: LD_VAR 0 8
51250: PPUSH
51251: LD_VAR 0 2
51255: PPUSH
51256: CALL 52515 0 2
51260: PPUSH
51261: CALL_OW 431
// end ;
51265: GO 51226
51267: POP
51268: POP
// end ; for i = 1 to personel do
51269: LD_ADDR_VAR 0 8
51273: PUSH
51274: DOUBLE
51275: LD_INT 1
51277: DEC
51278: ST_TO_ADDR
51279: LD_VAR 0 6
51283: PUSH
51284: FOR_TO
51285: IFFALSE 52349
// begin if i > 4 then
51287: LD_VAR 0 8
51291: PUSH
51292: LD_INT 4
51294: GREATER
51295: IFFALSE 51299
// break ;
51297: GO 52349
// case i of 1 :
51299: LD_VAR 0 8
51303: PUSH
51304: LD_INT 1
51306: DOUBLE
51307: EQUAL
51308: IFTRUE 51312
51310: GO 51392
51312: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51313: LD_ADDR_VAR 0 12
51317: PUSH
51318: LD_VAR 0 18
51322: PPUSH
51323: LD_INT 22
51325: PUSH
51326: LD_VAR 0 16
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 58
51337: PUSH
51338: EMPTY
51339: LIST
51340: PUSH
51341: LD_INT 2
51343: PUSH
51344: LD_INT 30
51346: PUSH
51347: LD_INT 32
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 30
51356: PUSH
51357: LD_INT 4
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 30
51366: PUSH
51367: LD_INT 5
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: LIST
51384: PPUSH
51385: CALL_OW 72
51389: ST_TO_ADDR
51390: GO 51614
51392: LD_INT 2
51394: DOUBLE
51395: EQUAL
51396: IFTRUE 51400
51398: GO 51462
51400: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51401: LD_ADDR_VAR 0 12
51405: PUSH
51406: LD_VAR 0 18
51410: PPUSH
51411: LD_INT 22
51413: PUSH
51414: LD_VAR 0 16
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: LD_INT 30
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 30
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: LIST
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PPUSH
51455: CALL_OW 72
51459: ST_TO_ADDR
51460: GO 51614
51462: LD_INT 3
51464: DOUBLE
51465: EQUAL
51466: IFTRUE 51470
51468: GO 51532
51470: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51471: LD_ADDR_VAR 0 12
51475: PUSH
51476: LD_VAR 0 18
51480: PPUSH
51481: LD_INT 22
51483: PUSH
51484: LD_VAR 0 16
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 30
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 30
51508: PUSH
51509: LD_INT 3
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: LIST
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PPUSH
51525: CALL_OW 72
51529: ST_TO_ADDR
51530: GO 51614
51532: LD_INT 4
51534: DOUBLE
51535: EQUAL
51536: IFTRUE 51540
51538: GO 51613
51540: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51541: LD_ADDR_VAR 0 12
51545: PUSH
51546: LD_VAR 0 18
51550: PPUSH
51551: LD_INT 22
51553: PUSH
51554: LD_VAR 0 16
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: LD_INT 30
51568: PUSH
51569: LD_INT 6
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 30
51578: PUSH
51579: LD_INT 7
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 30
51588: PUSH
51589: LD_INT 8
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PPUSH
51606: CALL_OW 72
51610: ST_TO_ADDR
51611: GO 51614
51613: POP
// if i = 1 then
51614: LD_VAR 0 8
51618: PUSH
51619: LD_INT 1
51621: EQUAL
51622: IFFALSE 51733
// begin tmp := [ ] ;
51624: LD_ADDR_VAR 0 19
51628: PUSH
51629: EMPTY
51630: ST_TO_ADDR
// for j in f do
51631: LD_ADDR_VAR 0 9
51635: PUSH
51636: LD_VAR 0 12
51640: PUSH
51641: FOR_IN
51642: IFFALSE 51715
// if GetBType ( j ) = b_bunker then
51644: LD_VAR 0 9
51648: PPUSH
51649: CALL_OW 266
51653: PUSH
51654: LD_INT 32
51656: EQUAL
51657: IFFALSE 51684
// tmp := Insert ( tmp , 1 , j ) else
51659: LD_ADDR_VAR 0 19
51663: PUSH
51664: LD_VAR 0 19
51668: PPUSH
51669: LD_INT 1
51671: PPUSH
51672: LD_VAR 0 9
51676: PPUSH
51677: CALL_OW 2
51681: ST_TO_ADDR
51682: GO 51713
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51684: LD_ADDR_VAR 0 19
51688: PUSH
51689: LD_VAR 0 19
51693: PPUSH
51694: LD_VAR 0 19
51698: PUSH
51699: LD_INT 1
51701: PLUS
51702: PPUSH
51703: LD_VAR 0 9
51707: PPUSH
51708: CALL_OW 2
51712: ST_TO_ADDR
51713: GO 51641
51715: POP
51716: POP
// if tmp then
51717: LD_VAR 0 19
51721: IFFALSE 51733
// f := tmp ;
51723: LD_ADDR_VAR 0 12
51727: PUSH
51728: LD_VAR 0 19
51732: ST_TO_ADDR
// end ; x := personel [ i ] ;
51733: LD_ADDR_VAR 0 13
51737: PUSH
51738: LD_VAR 0 6
51742: PUSH
51743: LD_VAR 0 8
51747: ARRAY
51748: ST_TO_ADDR
// if x = - 1 then
51749: LD_VAR 0 13
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: EQUAL
51758: IFFALSE 51967
// begin for j in f do
51760: LD_ADDR_VAR 0 9
51764: PUSH
51765: LD_VAR 0 12
51769: PUSH
51770: FOR_IN
51771: IFFALSE 51963
// repeat InitHc ;
51773: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51777: LD_VAR 0 9
51781: PPUSH
51782: CALL_OW 266
51786: PUSH
51787: LD_INT 5
51789: EQUAL
51790: IFFALSE 51860
// begin if UnitsInside ( j ) < 3 then
51792: LD_VAR 0 9
51796: PPUSH
51797: CALL_OW 313
51801: PUSH
51802: LD_INT 3
51804: LESS
51805: IFFALSE 51841
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51807: LD_INT 0
51809: PPUSH
51810: LD_INT 5
51812: PUSH
51813: LD_INT 8
51815: PUSH
51816: LD_INT 9
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: PUSH
51824: LD_VAR 0 17
51828: ARRAY
51829: PPUSH
51830: LD_VAR 0 4
51834: PPUSH
51835: CALL_OW 380
51839: GO 51858
// PrepareHuman ( false , i , skill ) ;
51841: LD_INT 0
51843: PPUSH
51844: LD_VAR 0 8
51848: PPUSH
51849: LD_VAR 0 4
51853: PPUSH
51854: CALL_OW 380
// end else
51858: GO 51877
// PrepareHuman ( false , i , skill ) ;
51860: LD_INT 0
51862: PPUSH
51863: LD_VAR 0 8
51867: PPUSH
51868: LD_VAR 0 4
51872: PPUSH
51873: CALL_OW 380
// un := CreateHuman ;
51877: LD_ADDR_VAR 0 14
51881: PUSH
51882: CALL_OW 44
51886: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51887: LD_ADDR_VAR 0 7
51891: PUSH
51892: LD_VAR 0 7
51896: PPUSH
51897: LD_INT 1
51899: PPUSH
51900: LD_VAR 0 14
51904: PPUSH
51905: CALL_OW 2
51909: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51910: LD_VAR 0 14
51914: PPUSH
51915: LD_VAR 0 9
51919: PPUSH
51920: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51924: LD_VAR 0 9
51928: PPUSH
51929: CALL_OW 313
51933: PUSH
51934: LD_INT 6
51936: EQUAL
51937: PUSH
51938: LD_VAR 0 9
51942: PPUSH
51943: CALL_OW 266
51947: PUSH
51948: LD_INT 32
51950: PUSH
51951: LD_INT 31
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: IN
51958: OR
51959: IFFALSE 51773
51961: GO 51770
51963: POP
51964: POP
// end else
51965: GO 52347
// for j = 1 to x do
51967: LD_ADDR_VAR 0 9
51971: PUSH
51972: DOUBLE
51973: LD_INT 1
51975: DEC
51976: ST_TO_ADDR
51977: LD_VAR 0 13
51981: PUSH
51982: FOR_TO
51983: IFFALSE 52345
// begin InitHc ;
51985: CALL_OW 19
// if not f then
51989: LD_VAR 0 12
51993: NOT
51994: IFFALSE 52083
// begin PrepareHuman ( false , i , skill ) ;
51996: LD_INT 0
51998: PPUSH
51999: LD_VAR 0 8
52003: PPUSH
52004: LD_VAR 0 4
52008: PPUSH
52009: CALL_OW 380
// un := CreateHuman ;
52013: LD_ADDR_VAR 0 14
52017: PUSH
52018: CALL_OW 44
52022: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52023: LD_ADDR_VAR 0 7
52027: PUSH
52028: LD_VAR 0 7
52032: PPUSH
52033: LD_INT 1
52035: PPUSH
52036: LD_VAR 0 14
52040: PPUSH
52041: CALL_OW 2
52045: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52046: LD_VAR 0 14
52050: PPUSH
52051: LD_VAR 0 1
52055: PPUSH
52056: CALL_OW 250
52060: PPUSH
52061: LD_VAR 0 1
52065: PPUSH
52066: CALL_OW 251
52070: PPUSH
52071: LD_INT 10
52073: PPUSH
52074: LD_INT 0
52076: PPUSH
52077: CALL_OW 50
// continue ;
52081: GO 51982
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52083: LD_VAR 0 12
52087: PUSH
52088: LD_INT 1
52090: ARRAY
52091: PPUSH
52092: CALL_OW 313
52096: PUSH
52097: LD_VAR 0 12
52101: PUSH
52102: LD_INT 1
52104: ARRAY
52105: PPUSH
52106: CALL_OW 266
52110: PUSH
52111: LD_INT 32
52113: PUSH
52114: LD_INT 31
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: IN
52121: AND
52122: PUSH
52123: LD_VAR 0 12
52127: PUSH
52128: LD_INT 1
52130: ARRAY
52131: PPUSH
52132: CALL_OW 313
52136: PUSH
52137: LD_INT 6
52139: EQUAL
52140: OR
52141: IFFALSE 52161
// f := Delete ( f , 1 ) ;
52143: LD_ADDR_VAR 0 12
52147: PUSH
52148: LD_VAR 0 12
52152: PPUSH
52153: LD_INT 1
52155: PPUSH
52156: CALL_OW 3
52160: ST_TO_ADDR
// if not f then
52161: LD_VAR 0 12
52165: NOT
52166: IFFALSE 52184
// begin x := x + 2 ;
52168: LD_ADDR_VAR 0 13
52172: PUSH
52173: LD_VAR 0 13
52177: PUSH
52178: LD_INT 2
52180: PLUS
52181: ST_TO_ADDR
// continue ;
52182: GO 51982
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52184: LD_VAR 0 12
52188: PUSH
52189: LD_INT 1
52191: ARRAY
52192: PPUSH
52193: CALL_OW 266
52197: PUSH
52198: LD_INT 5
52200: EQUAL
52201: IFFALSE 52275
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52203: LD_VAR 0 12
52207: PUSH
52208: LD_INT 1
52210: ARRAY
52211: PPUSH
52212: CALL_OW 313
52216: PUSH
52217: LD_INT 3
52219: LESS
52220: IFFALSE 52256
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52222: LD_INT 0
52224: PPUSH
52225: LD_INT 5
52227: PUSH
52228: LD_INT 8
52230: PUSH
52231: LD_INT 9
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: LIST
52238: PUSH
52239: LD_VAR 0 17
52243: ARRAY
52244: PPUSH
52245: LD_VAR 0 4
52249: PPUSH
52250: CALL_OW 380
52254: GO 52273
// PrepareHuman ( false , i , skill ) ;
52256: LD_INT 0
52258: PPUSH
52259: LD_VAR 0 8
52263: PPUSH
52264: LD_VAR 0 4
52268: PPUSH
52269: CALL_OW 380
// end else
52273: GO 52292
// PrepareHuman ( false , i , skill ) ;
52275: LD_INT 0
52277: PPUSH
52278: LD_VAR 0 8
52282: PPUSH
52283: LD_VAR 0 4
52287: PPUSH
52288: CALL_OW 380
// un := CreateHuman ;
52292: LD_ADDR_VAR 0 14
52296: PUSH
52297: CALL_OW 44
52301: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52302: LD_ADDR_VAR 0 7
52306: PUSH
52307: LD_VAR 0 7
52311: PPUSH
52312: LD_INT 1
52314: PPUSH
52315: LD_VAR 0 14
52319: PPUSH
52320: CALL_OW 2
52324: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52325: LD_VAR 0 14
52329: PPUSH
52330: LD_VAR 0 12
52334: PUSH
52335: LD_INT 1
52337: ARRAY
52338: PPUSH
52339: CALL_OW 52
// end ;
52343: GO 51982
52345: POP
52346: POP
// end ;
52347: GO 51284
52349: POP
52350: POP
// result := result ^ buildings ;
52351: LD_ADDR_VAR 0 7
52355: PUSH
52356: LD_VAR 0 7
52360: PUSH
52361: LD_VAR 0 18
52365: ADD
52366: ST_TO_ADDR
// end else
52367: GO 52510
// begin for i = 1 to personel do
52369: LD_ADDR_VAR 0 8
52373: PUSH
52374: DOUBLE
52375: LD_INT 1
52377: DEC
52378: ST_TO_ADDR
52379: LD_VAR 0 6
52383: PUSH
52384: FOR_TO
52385: IFFALSE 52508
// begin if i > 4 then
52387: LD_VAR 0 8
52391: PUSH
52392: LD_INT 4
52394: GREATER
52395: IFFALSE 52399
// break ;
52397: GO 52508
// x := personel [ i ] ;
52399: LD_ADDR_VAR 0 13
52403: PUSH
52404: LD_VAR 0 6
52408: PUSH
52409: LD_VAR 0 8
52413: ARRAY
52414: ST_TO_ADDR
// if x = - 1 then
52415: LD_VAR 0 13
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: EQUAL
52424: IFFALSE 52428
// continue ;
52426: GO 52384
// PrepareHuman ( false , i , skill ) ;
52428: LD_INT 0
52430: PPUSH
52431: LD_VAR 0 8
52435: PPUSH
52436: LD_VAR 0 4
52440: PPUSH
52441: CALL_OW 380
// un := CreateHuman ;
52445: LD_ADDR_VAR 0 14
52449: PUSH
52450: CALL_OW 44
52454: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52455: LD_VAR 0 14
52459: PPUSH
52460: LD_VAR 0 1
52464: PPUSH
52465: CALL_OW 250
52469: PPUSH
52470: LD_VAR 0 1
52474: PPUSH
52475: CALL_OW 251
52479: PPUSH
52480: LD_INT 10
52482: PPUSH
52483: LD_INT 0
52485: PPUSH
52486: CALL_OW 50
// result := result ^ un ;
52490: LD_ADDR_VAR 0 7
52494: PUSH
52495: LD_VAR 0 7
52499: PUSH
52500: LD_VAR 0 14
52504: ADD
52505: ST_TO_ADDR
// end ;
52506: GO 52384
52508: POP
52509: POP
// end ; end ;
52510: LD_VAR 0 7
52514: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52515: LD_INT 0
52517: PPUSH
52518: PPUSH
52519: PPUSH
52520: PPUSH
52521: PPUSH
52522: PPUSH
52523: PPUSH
52524: PPUSH
52525: PPUSH
52526: PPUSH
52527: PPUSH
52528: PPUSH
52529: PPUSH
52530: PPUSH
52531: PPUSH
52532: PPUSH
// result := false ;
52533: LD_ADDR_VAR 0 3
52537: PUSH
52538: LD_INT 0
52540: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52541: LD_VAR 0 1
52545: NOT
52546: PUSH
52547: LD_VAR 0 1
52551: PPUSH
52552: CALL_OW 266
52556: PUSH
52557: LD_INT 32
52559: PUSH
52560: LD_INT 33
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: IN
52567: NOT
52568: OR
52569: IFFALSE 52573
// exit ;
52571: GO 53682
// nat := GetNation ( tower ) ;
52573: LD_ADDR_VAR 0 12
52577: PUSH
52578: LD_VAR 0 1
52582: PPUSH
52583: CALL_OW 248
52587: ST_TO_ADDR
// side := GetSide ( tower ) ;
52588: LD_ADDR_VAR 0 16
52592: PUSH
52593: LD_VAR 0 1
52597: PPUSH
52598: CALL_OW 255
52602: ST_TO_ADDR
// x := GetX ( tower ) ;
52603: LD_ADDR_VAR 0 10
52607: PUSH
52608: LD_VAR 0 1
52612: PPUSH
52613: CALL_OW 250
52617: ST_TO_ADDR
// y := GetY ( tower ) ;
52618: LD_ADDR_VAR 0 11
52622: PUSH
52623: LD_VAR 0 1
52627: PPUSH
52628: CALL_OW 251
52632: ST_TO_ADDR
// if not x or not y then
52633: LD_VAR 0 10
52637: NOT
52638: PUSH
52639: LD_VAR 0 11
52643: NOT
52644: OR
52645: IFFALSE 52649
// exit ;
52647: GO 53682
// weapon := 0 ;
52649: LD_ADDR_VAR 0 18
52653: PUSH
52654: LD_INT 0
52656: ST_TO_ADDR
// fac_list := [ ] ;
52657: LD_ADDR_VAR 0 17
52661: PUSH
52662: EMPTY
52663: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52664: LD_ADDR_VAR 0 6
52668: PUSH
52669: LD_VAR 0 1
52673: PPUSH
52674: CALL_OW 274
52678: PPUSH
52679: LD_VAR 0 2
52683: PPUSH
52684: LD_INT 0
52686: PPUSH
52687: CALL 50253 0 3
52691: PPUSH
52692: LD_INT 30
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PPUSH
52702: CALL_OW 72
52706: ST_TO_ADDR
// if not factories then
52707: LD_VAR 0 6
52711: NOT
52712: IFFALSE 52716
// exit ;
52714: GO 53682
// for i in factories do
52716: LD_ADDR_VAR 0 8
52720: PUSH
52721: LD_VAR 0 6
52725: PUSH
52726: FOR_IN
52727: IFFALSE 52752
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52729: LD_ADDR_VAR 0 17
52733: PUSH
52734: LD_VAR 0 17
52738: PUSH
52739: LD_VAR 0 8
52743: PPUSH
52744: CALL_OW 478
52748: UNION
52749: ST_TO_ADDR
52750: GO 52726
52752: POP
52753: POP
// if not fac_list then
52754: LD_VAR 0 17
52758: NOT
52759: IFFALSE 52763
// exit ;
52761: GO 53682
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52763: LD_ADDR_VAR 0 5
52767: PUSH
52768: LD_INT 4
52770: PUSH
52771: LD_INT 5
52773: PUSH
52774: LD_INT 9
52776: PUSH
52777: LD_INT 10
52779: PUSH
52780: LD_INT 6
52782: PUSH
52783: LD_INT 7
52785: PUSH
52786: LD_INT 11
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 27
52800: PUSH
52801: LD_INT 28
52803: PUSH
52804: LD_INT 26
52806: PUSH
52807: LD_INT 30
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 43
52818: PUSH
52819: LD_INT 44
52821: PUSH
52822: LD_INT 46
52824: PUSH
52825: LD_INT 45
52827: PUSH
52828: LD_INT 47
52830: PUSH
52831: LD_INT 49
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: LIST
52846: PUSH
52847: LD_VAR 0 12
52851: ARRAY
52852: ST_TO_ADDR
// list := list isect fac_list ;
52853: LD_ADDR_VAR 0 5
52857: PUSH
52858: LD_VAR 0 5
52862: PUSH
52863: LD_VAR 0 17
52867: ISECT
52868: ST_TO_ADDR
// if not list then
52869: LD_VAR 0 5
52873: NOT
52874: IFFALSE 52878
// exit ;
52876: GO 53682
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52878: LD_VAR 0 12
52882: PUSH
52883: LD_INT 3
52885: EQUAL
52886: PUSH
52887: LD_INT 49
52889: PUSH
52890: LD_VAR 0 5
52894: IN
52895: AND
52896: PUSH
52897: LD_INT 31
52899: PPUSH
52900: LD_VAR 0 16
52904: PPUSH
52905: CALL_OW 321
52909: PUSH
52910: LD_INT 2
52912: EQUAL
52913: AND
52914: IFFALSE 52974
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52916: LD_INT 22
52918: PUSH
52919: LD_VAR 0 16
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 35
52930: PUSH
52931: LD_INT 49
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 91
52940: PUSH
52941: LD_VAR 0 1
52945: PUSH
52946: LD_INT 10
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: LIST
52958: PPUSH
52959: CALL_OW 69
52963: NOT
52964: IFFALSE 52974
// weapon := ru_time_lapser ;
52966: LD_ADDR_VAR 0 18
52970: PUSH
52971: LD_INT 49
52973: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52974: LD_VAR 0 12
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: IN
52989: PUSH
52990: LD_INT 11
52992: PUSH
52993: LD_VAR 0 5
52997: IN
52998: PUSH
52999: LD_INT 30
53001: PUSH
53002: LD_VAR 0 5
53006: IN
53007: OR
53008: AND
53009: PUSH
53010: LD_INT 6
53012: PPUSH
53013: LD_VAR 0 16
53017: PPUSH
53018: CALL_OW 321
53022: PUSH
53023: LD_INT 2
53025: EQUAL
53026: AND
53027: IFFALSE 53192
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53029: LD_INT 22
53031: PUSH
53032: LD_VAR 0 16
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 35
53046: PUSH
53047: LD_INT 11
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 35
53056: PUSH
53057: LD_INT 30
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 91
53071: PUSH
53072: LD_VAR 0 1
53076: PUSH
53077: LD_INT 18
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: LIST
53089: PPUSH
53090: CALL_OW 69
53094: NOT
53095: PUSH
53096: LD_INT 22
53098: PUSH
53099: LD_VAR 0 16
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: LD_INT 30
53113: PUSH
53114: LD_INT 32
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 30
53123: PUSH
53124: LD_INT 33
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 91
53138: PUSH
53139: LD_VAR 0 1
53143: PUSH
53144: LD_INT 12
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: LIST
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: LIST
53156: PUSH
53157: EMPTY
53158: LIST
53159: PPUSH
53160: CALL_OW 69
53164: PUSH
53165: LD_INT 2
53167: GREATER
53168: AND
53169: IFFALSE 53192
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53171: LD_ADDR_VAR 0 18
53175: PUSH
53176: LD_INT 11
53178: PUSH
53179: LD_INT 30
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_VAR 0 12
53190: ARRAY
53191: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53192: LD_VAR 0 18
53196: NOT
53197: PUSH
53198: LD_INT 40
53200: PPUSH
53201: LD_VAR 0 16
53205: PPUSH
53206: CALL_OW 321
53210: PUSH
53211: LD_INT 2
53213: EQUAL
53214: AND
53215: PUSH
53216: LD_INT 7
53218: PUSH
53219: LD_VAR 0 5
53223: IN
53224: PUSH
53225: LD_INT 28
53227: PUSH
53228: LD_VAR 0 5
53232: IN
53233: OR
53234: PUSH
53235: LD_INT 45
53237: PUSH
53238: LD_VAR 0 5
53242: IN
53243: OR
53244: AND
53245: IFFALSE 53499
// begin hex := GetHexInfo ( x , y ) ;
53247: LD_ADDR_VAR 0 4
53251: PUSH
53252: LD_VAR 0 10
53256: PPUSH
53257: LD_VAR 0 11
53261: PPUSH
53262: CALL_OW 546
53266: ST_TO_ADDR
// if hex [ 1 ] then
53267: LD_VAR 0 4
53271: PUSH
53272: LD_INT 1
53274: ARRAY
53275: IFFALSE 53279
// exit ;
53277: GO 53682
// height := hex [ 2 ] ;
53279: LD_ADDR_VAR 0 15
53283: PUSH
53284: LD_VAR 0 4
53288: PUSH
53289: LD_INT 2
53291: ARRAY
53292: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53293: LD_ADDR_VAR 0 14
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 3
53306: PUSH
53307: LD_INT 5
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: ST_TO_ADDR
// for i in tmp do
53316: LD_ADDR_VAR 0 8
53320: PUSH
53321: LD_VAR 0 14
53325: PUSH
53326: FOR_IN
53327: IFFALSE 53497
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53329: LD_ADDR_VAR 0 9
53333: PUSH
53334: LD_VAR 0 10
53338: PPUSH
53339: LD_VAR 0 8
53343: PPUSH
53344: LD_INT 5
53346: PPUSH
53347: CALL_OW 272
53351: PUSH
53352: LD_VAR 0 11
53356: PPUSH
53357: LD_VAR 0 8
53361: PPUSH
53362: LD_INT 5
53364: PPUSH
53365: CALL_OW 273
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53374: LD_VAR 0 9
53378: PUSH
53379: LD_INT 1
53381: ARRAY
53382: PPUSH
53383: LD_VAR 0 9
53387: PUSH
53388: LD_INT 2
53390: ARRAY
53391: PPUSH
53392: CALL_OW 488
53396: IFFALSE 53495
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53398: LD_ADDR_VAR 0 4
53402: PUSH
53403: LD_VAR 0 9
53407: PUSH
53408: LD_INT 1
53410: ARRAY
53411: PPUSH
53412: LD_VAR 0 9
53416: PUSH
53417: LD_INT 2
53419: ARRAY
53420: PPUSH
53421: CALL_OW 546
53425: ST_TO_ADDR
// if hex [ 1 ] then
53426: LD_VAR 0 4
53430: PUSH
53431: LD_INT 1
53433: ARRAY
53434: IFFALSE 53438
// continue ;
53436: GO 53326
// h := hex [ 2 ] ;
53438: LD_ADDR_VAR 0 13
53442: PUSH
53443: LD_VAR 0 4
53447: PUSH
53448: LD_INT 2
53450: ARRAY
53451: ST_TO_ADDR
// if h + 7 < height then
53452: LD_VAR 0 13
53456: PUSH
53457: LD_INT 7
53459: PLUS
53460: PUSH
53461: LD_VAR 0 15
53465: LESS
53466: IFFALSE 53495
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53468: LD_ADDR_VAR 0 18
53472: PUSH
53473: LD_INT 7
53475: PUSH
53476: LD_INT 28
53478: PUSH
53479: LD_INT 45
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: LIST
53486: PUSH
53487: LD_VAR 0 12
53491: ARRAY
53492: ST_TO_ADDR
// break ;
53493: GO 53497
// end ; end ; end ;
53495: GO 53326
53497: POP
53498: POP
// end ; if not weapon then
53499: LD_VAR 0 18
53503: NOT
53504: IFFALSE 53564
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53506: LD_ADDR_VAR 0 5
53510: PUSH
53511: LD_VAR 0 5
53515: PUSH
53516: LD_INT 11
53518: PUSH
53519: LD_INT 30
53521: PUSH
53522: LD_INT 49
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: LIST
53529: DIFF
53530: ST_TO_ADDR
// if not list then
53531: LD_VAR 0 5
53535: NOT
53536: IFFALSE 53540
// exit ;
53538: GO 53682
// weapon := list [ rand ( 1 , list ) ] ;
53540: LD_ADDR_VAR 0 18
53544: PUSH
53545: LD_VAR 0 5
53549: PUSH
53550: LD_INT 1
53552: PPUSH
53553: LD_VAR 0 5
53557: PPUSH
53558: CALL_OW 12
53562: ARRAY
53563: ST_TO_ADDR
// end ; if weapon then
53564: LD_VAR 0 18
53568: IFFALSE 53682
// begin tmp := CostOfWeapon ( weapon ) ;
53570: LD_ADDR_VAR 0 14
53574: PUSH
53575: LD_VAR 0 18
53579: PPUSH
53580: CALL_OW 451
53584: ST_TO_ADDR
// j := GetBase ( tower ) ;
53585: LD_ADDR_VAR 0 9
53589: PUSH
53590: LD_VAR 0 1
53594: PPUSH
53595: CALL_OW 274
53599: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53600: LD_VAR 0 9
53604: PPUSH
53605: LD_INT 1
53607: PPUSH
53608: CALL_OW 275
53612: PUSH
53613: LD_VAR 0 14
53617: PUSH
53618: LD_INT 1
53620: ARRAY
53621: GREATEREQUAL
53622: PUSH
53623: LD_VAR 0 9
53627: PPUSH
53628: LD_INT 2
53630: PPUSH
53631: CALL_OW 275
53635: PUSH
53636: LD_VAR 0 14
53640: PUSH
53641: LD_INT 2
53643: ARRAY
53644: GREATEREQUAL
53645: AND
53646: PUSH
53647: LD_VAR 0 9
53651: PPUSH
53652: LD_INT 3
53654: PPUSH
53655: CALL_OW 275
53659: PUSH
53660: LD_VAR 0 14
53664: PUSH
53665: LD_INT 3
53667: ARRAY
53668: GREATEREQUAL
53669: AND
53670: IFFALSE 53682
// result := weapon ;
53672: LD_ADDR_VAR 0 3
53676: PUSH
53677: LD_VAR 0 18
53681: ST_TO_ADDR
// end ; end ;
53682: LD_VAR 0 3
53686: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53687: LD_INT 0
53689: PPUSH
53690: PPUSH
// result := true ;
53691: LD_ADDR_VAR 0 3
53695: PUSH
53696: LD_INT 1
53698: ST_TO_ADDR
// if array1 = array2 then
53699: LD_VAR 0 1
53703: PUSH
53704: LD_VAR 0 2
53708: EQUAL
53709: IFFALSE 53769
// begin for i = 1 to array1 do
53711: LD_ADDR_VAR 0 4
53715: PUSH
53716: DOUBLE
53717: LD_INT 1
53719: DEC
53720: ST_TO_ADDR
53721: LD_VAR 0 1
53725: PUSH
53726: FOR_TO
53727: IFFALSE 53765
// if array1 [ i ] <> array2 [ i ] then
53729: LD_VAR 0 1
53733: PUSH
53734: LD_VAR 0 4
53738: ARRAY
53739: PUSH
53740: LD_VAR 0 2
53744: PUSH
53745: LD_VAR 0 4
53749: ARRAY
53750: NONEQUAL
53751: IFFALSE 53763
// begin result := false ;
53753: LD_ADDR_VAR 0 3
53757: PUSH
53758: LD_INT 0
53760: ST_TO_ADDR
// break ;
53761: GO 53765
// end ;
53763: GO 53726
53765: POP
53766: POP
// end else
53767: GO 53777
// result := false ;
53769: LD_ADDR_VAR 0 3
53773: PUSH
53774: LD_INT 0
53776: ST_TO_ADDR
// end ;
53777: LD_VAR 0 3
53781: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53782: LD_INT 0
53784: PPUSH
53785: PPUSH
// if not array1 or not array2 then
53786: LD_VAR 0 1
53790: NOT
53791: PUSH
53792: LD_VAR 0 2
53796: NOT
53797: OR
53798: IFFALSE 53802
// exit ;
53800: GO 53866
// result := true ;
53802: LD_ADDR_VAR 0 3
53806: PUSH
53807: LD_INT 1
53809: ST_TO_ADDR
// for i = 1 to array1 do
53810: LD_ADDR_VAR 0 4
53814: PUSH
53815: DOUBLE
53816: LD_INT 1
53818: DEC
53819: ST_TO_ADDR
53820: LD_VAR 0 1
53824: PUSH
53825: FOR_TO
53826: IFFALSE 53864
// if array1 [ i ] <> array2 [ i ] then
53828: LD_VAR 0 1
53832: PUSH
53833: LD_VAR 0 4
53837: ARRAY
53838: PUSH
53839: LD_VAR 0 2
53843: PUSH
53844: LD_VAR 0 4
53848: ARRAY
53849: NONEQUAL
53850: IFFALSE 53862
// begin result := false ;
53852: LD_ADDR_VAR 0 3
53856: PUSH
53857: LD_INT 0
53859: ST_TO_ADDR
// break ;
53860: GO 53864
// end ;
53862: GO 53825
53864: POP
53865: POP
// end ;
53866: LD_VAR 0 3
53870: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53871: LD_INT 0
53873: PPUSH
53874: PPUSH
53875: PPUSH
// pom := GetBase ( fac ) ;
53876: LD_ADDR_VAR 0 5
53880: PUSH
53881: LD_VAR 0 1
53885: PPUSH
53886: CALL_OW 274
53890: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53891: LD_ADDR_VAR 0 4
53895: PUSH
53896: LD_VAR 0 2
53900: PUSH
53901: LD_INT 1
53903: ARRAY
53904: PPUSH
53905: LD_VAR 0 2
53909: PUSH
53910: LD_INT 2
53912: ARRAY
53913: PPUSH
53914: LD_VAR 0 2
53918: PUSH
53919: LD_INT 3
53921: ARRAY
53922: PPUSH
53923: LD_VAR 0 2
53927: PUSH
53928: LD_INT 4
53930: ARRAY
53931: PPUSH
53932: CALL_OW 449
53936: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53937: LD_ADDR_VAR 0 3
53941: PUSH
53942: LD_VAR 0 5
53946: PPUSH
53947: LD_INT 1
53949: PPUSH
53950: CALL_OW 275
53954: PUSH
53955: LD_VAR 0 4
53959: PUSH
53960: LD_INT 1
53962: ARRAY
53963: GREATEREQUAL
53964: PUSH
53965: LD_VAR 0 5
53969: PPUSH
53970: LD_INT 2
53972: PPUSH
53973: CALL_OW 275
53977: PUSH
53978: LD_VAR 0 4
53982: PUSH
53983: LD_INT 2
53985: ARRAY
53986: GREATEREQUAL
53987: AND
53988: PUSH
53989: LD_VAR 0 5
53993: PPUSH
53994: LD_INT 3
53996: PPUSH
53997: CALL_OW 275
54001: PUSH
54002: LD_VAR 0 4
54006: PUSH
54007: LD_INT 3
54009: ARRAY
54010: GREATEREQUAL
54011: AND
54012: ST_TO_ADDR
// end ;
54013: LD_VAR 0 3
54017: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54018: LD_INT 0
54020: PPUSH
54021: PPUSH
54022: PPUSH
54023: PPUSH
// pom := GetBase ( building ) ;
54024: LD_ADDR_VAR 0 3
54028: PUSH
54029: LD_VAR 0 1
54033: PPUSH
54034: CALL_OW 274
54038: ST_TO_ADDR
// if not pom then
54039: LD_VAR 0 3
54043: NOT
54044: IFFALSE 54048
// exit ;
54046: GO 54218
// btype := GetBType ( building ) ;
54048: LD_ADDR_VAR 0 5
54052: PUSH
54053: LD_VAR 0 1
54057: PPUSH
54058: CALL_OW 266
54062: ST_TO_ADDR
// if btype = b_armoury then
54063: LD_VAR 0 5
54067: PUSH
54068: LD_INT 4
54070: EQUAL
54071: IFFALSE 54081
// btype := b_barracks ;
54073: LD_ADDR_VAR 0 5
54077: PUSH
54078: LD_INT 5
54080: ST_TO_ADDR
// if btype = b_depot then
54081: LD_VAR 0 5
54085: PUSH
54086: LD_INT 0
54088: EQUAL
54089: IFFALSE 54099
// btype := b_warehouse ;
54091: LD_ADDR_VAR 0 5
54095: PUSH
54096: LD_INT 1
54098: ST_TO_ADDR
// if btype = b_workshop then
54099: LD_VAR 0 5
54103: PUSH
54104: LD_INT 2
54106: EQUAL
54107: IFFALSE 54117
// btype := b_factory ;
54109: LD_ADDR_VAR 0 5
54113: PUSH
54114: LD_INT 3
54116: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54117: LD_ADDR_VAR 0 4
54121: PUSH
54122: LD_VAR 0 5
54126: PPUSH
54127: LD_VAR 0 1
54131: PPUSH
54132: CALL_OW 248
54136: PPUSH
54137: CALL_OW 450
54141: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54142: LD_ADDR_VAR 0 2
54146: PUSH
54147: LD_VAR 0 3
54151: PPUSH
54152: LD_INT 1
54154: PPUSH
54155: CALL_OW 275
54159: PUSH
54160: LD_VAR 0 4
54164: PUSH
54165: LD_INT 1
54167: ARRAY
54168: GREATEREQUAL
54169: PUSH
54170: LD_VAR 0 3
54174: PPUSH
54175: LD_INT 2
54177: PPUSH
54178: CALL_OW 275
54182: PUSH
54183: LD_VAR 0 4
54187: PUSH
54188: LD_INT 2
54190: ARRAY
54191: GREATEREQUAL
54192: AND
54193: PUSH
54194: LD_VAR 0 3
54198: PPUSH
54199: LD_INT 3
54201: PPUSH
54202: CALL_OW 275
54206: PUSH
54207: LD_VAR 0 4
54211: PUSH
54212: LD_INT 3
54214: ARRAY
54215: GREATEREQUAL
54216: AND
54217: ST_TO_ADDR
// end ;
54218: LD_VAR 0 2
54222: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54223: LD_INT 0
54225: PPUSH
54226: PPUSH
54227: PPUSH
// pom := GetBase ( building ) ;
54228: LD_ADDR_VAR 0 4
54232: PUSH
54233: LD_VAR 0 1
54237: PPUSH
54238: CALL_OW 274
54242: ST_TO_ADDR
// if not pom then
54243: LD_VAR 0 4
54247: NOT
54248: IFFALSE 54252
// exit ;
54250: GO 54353
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54252: LD_ADDR_VAR 0 5
54256: PUSH
54257: LD_VAR 0 2
54261: PPUSH
54262: LD_VAR 0 1
54266: PPUSH
54267: CALL_OW 248
54271: PPUSH
54272: CALL_OW 450
54276: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54277: LD_ADDR_VAR 0 3
54281: PUSH
54282: LD_VAR 0 4
54286: PPUSH
54287: LD_INT 1
54289: PPUSH
54290: CALL_OW 275
54294: PUSH
54295: LD_VAR 0 5
54299: PUSH
54300: LD_INT 1
54302: ARRAY
54303: GREATEREQUAL
54304: PUSH
54305: LD_VAR 0 4
54309: PPUSH
54310: LD_INT 2
54312: PPUSH
54313: CALL_OW 275
54317: PUSH
54318: LD_VAR 0 5
54322: PUSH
54323: LD_INT 2
54325: ARRAY
54326: GREATEREQUAL
54327: AND
54328: PUSH
54329: LD_VAR 0 4
54333: PPUSH
54334: LD_INT 3
54336: PPUSH
54337: CALL_OW 275
54341: PUSH
54342: LD_VAR 0 5
54346: PUSH
54347: LD_INT 3
54349: ARRAY
54350: GREATEREQUAL
54351: AND
54352: ST_TO_ADDR
// end ;
54353: LD_VAR 0 3
54357: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54358: LD_INT 0
54360: PPUSH
54361: PPUSH
54362: PPUSH
54363: PPUSH
54364: PPUSH
54365: PPUSH
54366: PPUSH
54367: PPUSH
54368: PPUSH
54369: PPUSH
54370: PPUSH
// result := false ;
54371: LD_ADDR_VAR 0 8
54375: PUSH
54376: LD_INT 0
54378: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54379: LD_VAR 0 5
54383: NOT
54384: PUSH
54385: LD_VAR 0 1
54389: NOT
54390: OR
54391: PUSH
54392: LD_VAR 0 2
54396: NOT
54397: OR
54398: PUSH
54399: LD_VAR 0 3
54403: NOT
54404: OR
54405: IFFALSE 54409
// exit ;
54407: GO 55223
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54409: LD_ADDR_VAR 0 14
54413: PUSH
54414: LD_VAR 0 1
54418: PPUSH
54419: LD_VAR 0 2
54423: PPUSH
54424: LD_VAR 0 3
54428: PPUSH
54429: LD_VAR 0 4
54433: PPUSH
54434: LD_VAR 0 5
54438: PUSH
54439: LD_INT 1
54441: ARRAY
54442: PPUSH
54443: CALL_OW 248
54447: PPUSH
54448: LD_INT 0
54450: PPUSH
54451: CALL 56476 0 6
54455: ST_TO_ADDR
// if not hexes then
54456: LD_VAR 0 14
54460: NOT
54461: IFFALSE 54465
// exit ;
54463: GO 55223
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54465: LD_ADDR_VAR 0 17
54469: PUSH
54470: LD_VAR 0 5
54474: PPUSH
54475: LD_INT 22
54477: PUSH
54478: LD_VAR 0 13
54482: PPUSH
54483: CALL_OW 255
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: LD_INT 30
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 30
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PPUSH
54524: CALL_OW 72
54528: ST_TO_ADDR
// for i = 1 to hexes do
54529: LD_ADDR_VAR 0 9
54533: PUSH
54534: DOUBLE
54535: LD_INT 1
54537: DEC
54538: ST_TO_ADDR
54539: LD_VAR 0 14
54543: PUSH
54544: FOR_TO
54545: IFFALSE 55221
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54547: LD_ADDR_VAR 0 13
54551: PUSH
54552: LD_VAR 0 14
54556: PUSH
54557: LD_VAR 0 9
54561: ARRAY
54562: PUSH
54563: LD_INT 1
54565: ARRAY
54566: PPUSH
54567: LD_VAR 0 14
54571: PUSH
54572: LD_VAR 0 9
54576: ARRAY
54577: PUSH
54578: LD_INT 2
54580: ARRAY
54581: PPUSH
54582: CALL_OW 428
54586: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54587: LD_VAR 0 14
54591: PUSH
54592: LD_VAR 0 9
54596: ARRAY
54597: PUSH
54598: LD_INT 1
54600: ARRAY
54601: PPUSH
54602: LD_VAR 0 14
54606: PUSH
54607: LD_VAR 0 9
54611: ARRAY
54612: PUSH
54613: LD_INT 2
54615: ARRAY
54616: PPUSH
54617: CALL_OW 351
54621: PUSH
54622: LD_VAR 0 14
54626: PUSH
54627: LD_VAR 0 9
54631: ARRAY
54632: PUSH
54633: LD_INT 1
54635: ARRAY
54636: PPUSH
54637: LD_VAR 0 14
54641: PUSH
54642: LD_VAR 0 9
54646: ARRAY
54647: PUSH
54648: LD_INT 2
54650: ARRAY
54651: PPUSH
54652: CALL_OW 488
54656: NOT
54657: OR
54658: PUSH
54659: LD_VAR 0 13
54663: PPUSH
54664: CALL_OW 247
54668: PUSH
54669: LD_INT 3
54671: EQUAL
54672: OR
54673: IFFALSE 54679
// exit ;
54675: POP
54676: POP
54677: GO 55223
// if not tmp then
54679: LD_VAR 0 13
54683: NOT
54684: IFFALSE 54688
// continue ;
54686: GO 54544
// result := true ;
54688: LD_ADDR_VAR 0 8
54692: PUSH
54693: LD_INT 1
54695: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54696: LD_VAR 0 6
54700: PUSH
54701: LD_VAR 0 13
54705: PPUSH
54706: CALL_OW 247
54710: PUSH
54711: LD_INT 2
54713: EQUAL
54714: AND
54715: PUSH
54716: LD_VAR 0 13
54720: PPUSH
54721: CALL_OW 263
54725: PUSH
54726: LD_INT 1
54728: EQUAL
54729: AND
54730: IFFALSE 54894
// begin if IsDrivenBy ( tmp ) then
54732: LD_VAR 0 13
54736: PPUSH
54737: CALL_OW 311
54741: IFFALSE 54745
// continue ;
54743: GO 54544
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54745: LD_VAR 0 6
54749: PPUSH
54750: LD_INT 3
54752: PUSH
54753: LD_INT 60
54755: PUSH
54756: EMPTY
54757: LIST
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: LD_INT 55
54768: PUSH
54769: EMPTY
54770: LIST
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PPUSH
54780: CALL_OW 72
54784: IFFALSE 54892
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54786: LD_ADDR_VAR 0 18
54790: PUSH
54791: LD_VAR 0 6
54795: PPUSH
54796: LD_INT 3
54798: PUSH
54799: LD_INT 60
54801: PUSH
54802: EMPTY
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 3
54811: PUSH
54812: LD_INT 55
54814: PUSH
54815: EMPTY
54816: LIST
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PPUSH
54826: CALL_OW 72
54830: PUSH
54831: LD_INT 1
54833: ARRAY
54834: ST_TO_ADDR
// if IsInUnit ( driver ) then
54835: LD_VAR 0 18
54839: PPUSH
54840: CALL_OW 310
54844: IFFALSE 54855
// ComExit ( driver ) ;
54846: LD_VAR 0 18
54850: PPUSH
54851: CALL 80268 0 1
// AddComEnterUnit ( driver , tmp ) ;
54855: LD_VAR 0 18
54859: PPUSH
54860: LD_VAR 0 13
54864: PPUSH
54865: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54869: LD_VAR 0 18
54873: PPUSH
54874: LD_VAR 0 7
54878: PPUSH
54879: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54883: LD_VAR 0 18
54887: PPUSH
54888: CALL_OW 181
// end ; continue ;
54892: GO 54544
// end ; if not cleaners or not tmp in cleaners then
54894: LD_VAR 0 6
54898: NOT
54899: PUSH
54900: LD_VAR 0 13
54904: PUSH
54905: LD_VAR 0 6
54909: IN
54910: NOT
54911: OR
54912: IFFALSE 55219
// begin if dep then
54914: LD_VAR 0 17
54918: IFFALSE 55054
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54920: LD_ADDR_VAR 0 16
54924: PUSH
54925: LD_VAR 0 17
54929: PUSH
54930: LD_INT 1
54932: ARRAY
54933: PPUSH
54934: CALL_OW 250
54938: PPUSH
54939: LD_VAR 0 17
54943: PUSH
54944: LD_INT 1
54946: ARRAY
54947: PPUSH
54948: CALL_OW 254
54952: PPUSH
54953: LD_INT 5
54955: PPUSH
54956: CALL_OW 272
54960: PUSH
54961: LD_VAR 0 17
54965: PUSH
54966: LD_INT 1
54968: ARRAY
54969: PPUSH
54970: CALL_OW 251
54974: PPUSH
54975: LD_VAR 0 17
54979: PUSH
54980: LD_INT 1
54982: ARRAY
54983: PPUSH
54984: CALL_OW 254
54988: PPUSH
54989: LD_INT 5
54991: PPUSH
54992: CALL_OW 273
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55001: LD_VAR 0 16
55005: PUSH
55006: LD_INT 1
55008: ARRAY
55009: PPUSH
55010: LD_VAR 0 16
55014: PUSH
55015: LD_INT 2
55017: ARRAY
55018: PPUSH
55019: CALL_OW 488
55023: IFFALSE 55054
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55025: LD_VAR 0 13
55029: PPUSH
55030: LD_VAR 0 16
55034: PUSH
55035: LD_INT 1
55037: ARRAY
55038: PPUSH
55039: LD_VAR 0 16
55043: PUSH
55044: LD_INT 2
55046: ARRAY
55047: PPUSH
55048: CALL_OW 111
// continue ;
55052: GO 54544
// end ; end ; r := GetDir ( tmp ) ;
55054: LD_ADDR_VAR 0 15
55058: PUSH
55059: LD_VAR 0 13
55063: PPUSH
55064: CALL_OW 254
55068: ST_TO_ADDR
// if r = 5 then
55069: LD_VAR 0 15
55073: PUSH
55074: LD_INT 5
55076: EQUAL
55077: IFFALSE 55087
// r := 0 ;
55079: LD_ADDR_VAR 0 15
55083: PUSH
55084: LD_INT 0
55086: ST_TO_ADDR
// for j = r to 5 do
55087: LD_ADDR_VAR 0 10
55091: PUSH
55092: DOUBLE
55093: LD_VAR 0 15
55097: DEC
55098: ST_TO_ADDR
55099: LD_INT 5
55101: PUSH
55102: FOR_TO
55103: IFFALSE 55217
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55105: LD_ADDR_VAR 0 11
55109: PUSH
55110: LD_VAR 0 13
55114: PPUSH
55115: CALL_OW 250
55119: PPUSH
55120: LD_VAR 0 10
55124: PPUSH
55125: LD_INT 2
55127: PPUSH
55128: CALL_OW 272
55132: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55133: LD_ADDR_VAR 0 12
55137: PUSH
55138: LD_VAR 0 13
55142: PPUSH
55143: CALL_OW 251
55147: PPUSH
55148: LD_VAR 0 10
55152: PPUSH
55153: LD_INT 2
55155: PPUSH
55156: CALL_OW 273
55160: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55161: LD_VAR 0 11
55165: PPUSH
55166: LD_VAR 0 12
55170: PPUSH
55171: CALL_OW 488
55175: PUSH
55176: LD_VAR 0 11
55180: PPUSH
55181: LD_VAR 0 12
55185: PPUSH
55186: CALL_OW 428
55190: NOT
55191: AND
55192: IFFALSE 55215
// begin ComMoveXY ( tmp , _x , _y ) ;
55194: LD_VAR 0 13
55198: PPUSH
55199: LD_VAR 0 11
55203: PPUSH
55204: LD_VAR 0 12
55208: PPUSH
55209: CALL_OW 111
// break ;
55213: GO 55217
// end ; end ;
55215: GO 55102
55217: POP
55218: POP
// end ; end ;
55219: GO 54544
55221: POP
55222: POP
// end ;
55223: LD_VAR 0 8
55227: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55228: LD_INT 0
55230: PPUSH
// result := true ;
55231: LD_ADDR_VAR 0 3
55235: PUSH
55236: LD_INT 1
55238: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55239: LD_VAR 0 2
55243: PUSH
55244: LD_INT 24
55246: DOUBLE
55247: EQUAL
55248: IFTRUE 55258
55250: LD_INT 33
55252: DOUBLE
55253: EQUAL
55254: IFTRUE 55258
55256: GO 55283
55258: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55259: LD_ADDR_VAR 0 3
55263: PUSH
55264: LD_INT 32
55266: PPUSH
55267: LD_VAR 0 1
55271: PPUSH
55272: CALL_OW 321
55276: PUSH
55277: LD_INT 2
55279: EQUAL
55280: ST_TO_ADDR
55281: GO 55599
55283: LD_INT 20
55285: DOUBLE
55286: EQUAL
55287: IFTRUE 55291
55289: GO 55316
55291: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55292: LD_ADDR_VAR 0 3
55296: PUSH
55297: LD_INT 6
55299: PPUSH
55300: LD_VAR 0 1
55304: PPUSH
55305: CALL_OW 321
55309: PUSH
55310: LD_INT 2
55312: EQUAL
55313: ST_TO_ADDR
55314: GO 55599
55316: LD_INT 22
55318: DOUBLE
55319: EQUAL
55320: IFTRUE 55330
55322: LD_INT 36
55324: DOUBLE
55325: EQUAL
55326: IFTRUE 55330
55328: GO 55355
55330: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55331: LD_ADDR_VAR 0 3
55335: PUSH
55336: LD_INT 15
55338: PPUSH
55339: LD_VAR 0 1
55343: PPUSH
55344: CALL_OW 321
55348: PUSH
55349: LD_INT 2
55351: EQUAL
55352: ST_TO_ADDR
55353: GO 55599
55355: LD_INT 30
55357: DOUBLE
55358: EQUAL
55359: IFTRUE 55363
55361: GO 55388
55363: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55364: LD_ADDR_VAR 0 3
55368: PUSH
55369: LD_INT 20
55371: PPUSH
55372: LD_VAR 0 1
55376: PPUSH
55377: CALL_OW 321
55381: PUSH
55382: LD_INT 2
55384: EQUAL
55385: ST_TO_ADDR
55386: GO 55599
55388: LD_INT 28
55390: DOUBLE
55391: EQUAL
55392: IFTRUE 55402
55394: LD_INT 21
55396: DOUBLE
55397: EQUAL
55398: IFTRUE 55402
55400: GO 55427
55402: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55403: LD_ADDR_VAR 0 3
55407: PUSH
55408: LD_INT 21
55410: PPUSH
55411: LD_VAR 0 1
55415: PPUSH
55416: CALL_OW 321
55420: PUSH
55421: LD_INT 2
55423: EQUAL
55424: ST_TO_ADDR
55425: GO 55599
55427: LD_INT 16
55429: DOUBLE
55430: EQUAL
55431: IFTRUE 55435
55433: GO 55460
55435: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55436: LD_ADDR_VAR 0 3
55440: PUSH
55441: LD_INT 84
55443: PPUSH
55444: LD_VAR 0 1
55448: PPUSH
55449: CALL_OW 321
55453: PUSH
55454: LD_INT 2
55456: EQUAL
55457: ST_TO_ADDR
55458: GO 55599
55460: LD_INT 19
55462: DOUBLE
55463: EQUAL
55464: IFTRUE 55474
55466: LD_INT 23
55468: DOUBLE
55469: EQUAL
55470: IFTRUE 55474
55472: GO 55499
55474: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55475: LD_ADDR_VAR 0 3
55479: PUSH
55480: LD_INT 83
55482: PPUSH
55483: LD_VAR 0 1
55487: PPUSH
55488: CALL_OW 321
55492: PUSH
55493: LD_INT 2
55495: EQUAL
55496: ST_TO_ADDR
55497: GO 55599
55499: LD_INT 17
55501: DOUBLE
55502: EQUAL
55503: IFTRUE 55507
55505: GO 55532
55507: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55508: LD_ADDR_VAR 0 3
55512: PUSH
55513: LD_INT 39
55515: PPUSH
55516: LD_VAR 0 1
55520: PPUSH
55521: CALL_OW 321
55525: PUSH
55526: LD_INT 2
55528: EQUAL
55529: ST_TO_ADDR
55530: GO 55599
55532: LD_INT 18
55534: DOUBLE
55535: EQUAL
55536: IFTRUE 55540
55538: GO 55565
55540: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55541: LD_ADDR_VAR 0 3
55545: PUSH
55546: LD_INT 40
55548: PPUSH
55549: LD_VAR 0 1
55553: PPUSH
55554: CALL_OW 321
55558: PUSH
55559: LD_INT 2
55561: EQUAL
55562: ST_TO_ADDR
55563: GO 55599
55565: LD_INT 27
55567: DOUBLE
55568: EQUAL
55569: IFTRUE 55573
55571: GO 55598
55573: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55574: LD_ADDR_VAR 0 3
55578: PUSH
55579: LD_INT 35
55581: PPUSH
55582: LD_VAR 0 1
55586: PPUSH
55587: CALL_OW 321
55591: PUSH
55592: LD_INT 2
55594: EQUAL
55595: ST_TO_ADDR
55596: GO 55599
55598: POP
// end ;
55599: LD_VAR 0 3
55603: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55604: LD_INT 0
55606: PPUSH
55607: PPUSH
55608: PPUSH
55609: PPUSH
55610: PPUSH
55611: PPUSH
55612: PPUSH
55613: PPUSH
55614: PPUSH
55615: PPUSH
55616: PPUSH
// result := false ;
55617: LD_ADDR_VAR 0 6
55621: PUSH
55622: LD_INT 0
55624: ST_TO_ADDR
// if btype = b_depot then
55625: LD_VAR 0 2
55629: PUSH
55630: LD_INT 0
55632: EQUAL
55633: IFFALSE 55645
// begin result := true ;
55635: LD_ADDR_VAR 0 6
55639: PUSH
55640: LD_INT 1
55642: ST_TO_ADDR
// exit ;
55643: GO 56471
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55645: LD_VAR 0 1
55649: NOT
55650: PUSH
55651: LD_VAR 0 1
55655: PPUSH
55656: CALL_OW 266
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: IN
55671: NOT
55672: OR
55673: PUSH
55674: LD_VAR 0 2
55678: NOT
55679: OR
55680: PUSH
55681: LD_VAR 0 5
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: LD_INT 3
55697: PUSH
55698: LD_INT 4
55700: PUSH
55701: LD_INT 5
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: IN
55712: NOT
55713: OR
55714: PUSH
55715: LD_VAR 0 3
55719: PPUSH
55720: LD_VAR 0 4
55724: PPUSH
55725: CALL_OW 488
55729: NOT
55730: OR
55731: IFFALSE 55735
// exit ;
55733: GO 56471
// side := GetSide ( depot ) ;
55735: LD_ADDR_VAR 0 9
55739: PUSH
55740: LD_VAR 0 1
55744: PPUSH
55745: CALL_OW 255
55749: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55750: LD_VAR 0 9
55754: PPUSH
55755: LD_VAR 0 2
55759: PPUSH
55760: CALL 55228 0 2
55764: NOT
55765: IFFALSE 55769
// exit ;
55767: GO 56471
// pom := GetBase ( depot ) ;
55769: LD_ADDR_VAR 0 10
55773: PUSH
55774: LD_VAR 0 1
55778: PPUSH
55779: CALL_OW 274
55783: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55784: LD_ADDR_VAR 0 11
55788: PUSH
55789: LD_VAR 0 2
55793: PPUSH
55794: LD_VAR 0 1
55798: PPUSH
55799: CALL_OW 248
55803: PPUSH
55804: CALL_OW 450
55808: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55809: LD_VAR 0 10
55813: PPUSH
55814: LD_INT 1
55816: PPUSH
55817: CALL_OW 275
55821: PUSH
55822: LD_VAR 0 11
55826: PUSH
55827: LD_INT 1
55829: ARRAY
55830: GREATEREQUAL
55831: PUSH
55832: LD_VAR 0 10
55836: PPUSH
55837: LD_INT 2
55839: PPUSH
55840: CALL_OW 275
55844: PUSH
55845: LD_VAR 0 11
55849: PUSH
55850: LD_INT 2
55852: ARRAY
55853: GREATEREQUAL
55854: AND
55855: PUSH
55856: LD_VAR 0 10
55860: PPUSH
55861: LD_INT 3
55863: PPUSH
55864: CALL_OW 275
55868: PUSH
55869: LD_VAR 0 11
55873: PUSH
55874: LD_INT 3
55876: ARRAY
55877: GREATEREQUAL
55878: AND
55879: NOT
55880: IFFALSE 55884
// exit ;
55882: GO 56471
// if GetBType ( depot ) = b_depot then
55884: LD_VAR 0 1
55888: PPUSH
55889: CALL_OW 266
55893: PUSH
55894: LD_INT 0
55896: EQUAL
55897: IFFALSE 55909
// dist := 28 else
55899: LD_ADDR_VAR 0 14
55903: PUSH
55904: LD_INT 28
55906: ST_TO_ADDR
55907: GO 55917
// dist := 36 ;
55909: LD_ADDR_VAR 0 14
55913: PUSH
55914: LD_INT 36
55916: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55917: LD_VAR 0 1
55921: PPUSH
55922: LD_VAR 0 3
55926: PPUSH
55927: LD_VAR 0 4
55931: PPUSH
55932: CALL_OW 297
55936: PUSH
55937: LD_VAR 0 14
55941: GREATER
55942: IFFALSE 55946
// exit ;
55944: GO 56471
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55946: LD_ADDR_VAR 0 12
55950: PUSH
55951: LD_VAR 0 2
55955: PPUSH
55956: LD_VAR 0 3
55960: PPUSH
55961: LD_VAR 0 4
55965: PPUSH
55966: LD_VAR 0 5
55970: PPUSH
55971: LD_VAR 0 1
55975: PPUSH
55976: CALL_OW 248
55980: PPUSH
55981: LD_INT 0
55983: PPUSH
55984: CALL 56476 0 6
55988: ST_TO_ADDR
// if not hexes then
55989: LD_VAR 0 12
55993: NOT
55994: IFFALSE 55998
// exit ;
55996: GO 56471
// hex := GetHexInfo ( x , y ) ;
55998: LD_ADDR_VAR 0 15
56002: PUSH
56003: LD_VAR 0 3
56007: PPUSH
56008: LD_VAR 0 4
56012: PPUSH
56013: CALL_OW 546
56017: ST_TO_ADDR
// if hex [ 1 ] then
56018: LD_VAR 0 15
56022: PUSH
56023: LD_INT 1
56025: ARRAY
56026: IFFALSE 56030
// exit ;
56028: GO 56471
// height := hex [ 2 ] ;
56030: LD_ADDR_VAR 0 13
56034: PUSH
56035: LD_VAR 0 15
56039: PUSH
56040: LD_INT 2
56042: ARRAY
56043: ST_TO_ADDR
// for i = 1 to hexes do
56044: LD_ADDR_VAR 0 7
56048: PUSH
56049: DOUBLE
56050: LD_INT 1
56052: DEC
56053: ST_TO_ADDR
56054: LD_VAR 0 12
56058: PUSH
56059: FOR_TO
56060: IFFALSE 56390
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56062: LD_VAR 0 12
56066: PUSH
56067: LD_VAR 0 7
56071: ARRAY
56072: PUSH
56073: LD_INT 1
56075: ARRAY
56076: PPUSH
56077: LD_VAR 0 12
56081: PUSH
56082: LD_VAR 0 7
56086: ARRAY
56087: PUSH
56088: LD_INT 2
56090: ARRAY
56091: PPUSH
56092: CALL_OW 488
56096: NOT
56097: PUSH
56098: LD_VAR 0 12
56102: PUSH
56103: LD_VAR 0 7
56107: ARRAY
56108: PUSH
56109: LD_INT 1
56111: ARRAY
56112: PPUSH
56113: LD_VAR 0 12
56117: PUSH
56118: LD_VAR 0 7
56122: ARRAY
56123: PUSH
56124: LD_INT 2
56126: ARRAY
56127: PPUSH
56128: CALL_OW 428
56132: PUSH
56133: LD_INT 0
56135: GREATER
56136: OR
56137: PUSH
56138: LD_VAR 0 12
56142: PUSH
56143: LD_VAR 0 7
56147: ARRAY
56148: PUSH
56149: LD_INT 1
56151: ARRAY
56152: PPUSH
56153: LD_VAR 0 12
56157: PUSH
56158: LD_VAR 0 7
56162: ARRAY
56163: PUSH
56164: LD_INT 2
56166: ARRAY
56167: PPUSH
56168: CALL_OW 351
56172: OR
56173: IFFALSE 56179
// exit ;
56175: POP
56176: POP
56177: GO 56471
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56179: LD_ADDR_VAR 0 8
56183: PUSH
56184: LD_VAR 0 12
56188: PUSH
56189: LD_VAR 0 7
56193: ARRAY
56194: PUSH
56195: LD_INT 1
56197: ARRAY
56198: PPUSH
56199: LD_VAR 0 12
56203: PUSH
56204: LD_VAR 0 7
56208: ARRAY
56209: PUSH
56210: LD_INT 2
56212: ARRAY
56213: PPUSH
56214: CALL_OW 546
56218: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56219: LD_VAR 0 8
56223: PUSH
56224: LD_INT 1
56226: ARRAY
56227: PUSH
56228: LD_VAR 0 8
56232: PUSH
56233: LD_INT 2
56235: ARRAY
56236: PUSH
56237: LD_VAR 0 13
56241: PUSH
56242: LD_INT 2
56244: PLUS
56245: GREATER
56246: OR
56247: PUSH
56248: LD_VAR 0 8
56252: PUSH
56253: LD_INT 2
56255: ARRAY
56256: PUSH
56257: LD_VAR 0 13
56261: PUSH
56262: LD_INT 2
56264: MINUS
56265: LESS
56266: OR
56267: PUSH
56268: LD_VAR 0 8
56272: PUSH
56273: LD_INT 3
56275: ARRAY
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: LD_INT 8
56282: PUSH
56283: LD_INT 9
56285: PUSH
56286: LD_INT 10
56288: PUSH
56289: LD_INT 11
56291: PUSH
56292: LD_INT 12
56294: PUSH
56295: LD_INT 13
56297: PUSH
56298: LD_INT 16
56300: PUSH
56301: LD_INT 17
56303: PUSH
56304: LD_INT 18
56306: PUSH
56307: LD_INT 19
56309: PUSH
56310: LD_INT 20
56312: PUSH
56313: LD_INT 21
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: IN
56331: NOT
56332: OR
56333: PUSH
56334: LD_VAR 0 8
56338: PUSH
56339: LD_INT 5
56341: ARRAY
56342: NOT
56343: OR
56344: PUSH
56345: LD_VAR 0 8
56349: PUSH
56350: LD_INT 6
56352: ARRAY
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: LD_INT 7
56362: PUSH
56363: LD_INT 9
56365: PUSH
56366: LD_INT 10
56368: PUSH
56369: LD_INT 11
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: IN
56380: NOT
56381: OR
56382: IFFALSE 56388
// exit ;
56384: POP
56385: POP
56386: GO 56471
// end ;
56388: GO 56059
56390: POP
56391: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56392: LD_VAR 0 9
56396: PPUSH
56397: LD_VAR 0 3
56401: PPUSH
56402: LD_VAR 0 4
56406: PPUSH
56407: LD_INT 20
56409: PPUSH
56410: CALL 48394 0 4
56414: PUSH
56415: LD_INT 4
56417: ARRAY
56418: IFFALSE 56422
// exit ;
56420: GO 56471
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56422: LD_VAR 0 2
56426: PUSH
56427: LD_INT 29
56429: PUSH
56430: LD_INT 30
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: IN
56437: PUSH
56438: LD_VAR 0 3
56442: PPUSH
56443: LD_VAR 0 4
56447: PPUSH
56448: LD_VAR 0 9
56452: PPUSH
56453: CALL_OW 440
56457: NOT
56458: AND
56459: IFFALSE 56463
// exit ;
56461: GO 56471
// result := true ;
56463: LD_ADDR_VAR 0 6
56467: PUSH
56468: LD_INT 1
56470: ST_TO_ADDR
// end ;
56471: LD_VAR 0 6
56475: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56476: LD_INT 0
56478: PPUSH
56479: PPUSH
56480: PPUSH
56481: PPUSH
56482: PPUSH
56483: PPUSH
56484: PPUSH
56485: PPUSH
56486: PPUSH
56487: PPUSH
56488: PPUSH
56489: PPUSH
56490: PPUSH
56491: PPUSH
56492: PPUSH
56493: PPUSH
56494: PPUSH
56495: PPUSH
56496: PPUSH
56497: PPUSH
56498: PPUSH
56499: PPUSH
56500: PPUSH
56501: PPUSH
56502: PPUSH
56503: PPUSH
56504: PPUSH
56505: PPUSH
56506: PPUSH
56507: PPUSH
56508: PPUSH
56509: PPUSH
56510: PPUSH
56511: PPUSH
56512: PPUSH
56513: PPUSH
56514: PPUSH
56515: PPUSH
56516: PPUSH
56517: PPUSH
56518: PPUSH
56519: PPUSH
56520: PPUSH
56521: PPUSH
56522: PPUSH
56523: PPUSH
56524: PPUSH
56525: PPUSH
56526: PPUSH
56527: PPUSH
56528: PPUSH
56529: PPUSH
56530: PPUSH
56531: PPUSH
56532: PPUSH
56533: PPUSH
56534: PPUSH
56535: PPUSH
// result = [ ] ;
56536: LD_ADDR_VAR 0 7
56540: PUSH
56541: EMPTY
56542: ST_TO_ADDR
// temp_list = [ ] ;
56543: LD_ADDR_VAR 0 9
56547: PUSH
56548: EMPTY
56549: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56550: LD_VAR 0 4
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: LD_INT 4
56569: PUSH
56570: LD_INT 5
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: IN
56581: NOT
56582: PUSH
56583: LD_VAR 0 1
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: IN
56598: PUSH
56599: LD_VAR 0 5
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: LD_INT 3
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: LIST
56617: IN
56618: NOT
56619: AND
56620: OR
56621: IFFALSE 56625
// exit ;
56623: GO 75016
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56625: LD_VAR 0 1
56629: PUSH
56630: LD_INT 6
56632: PUSH
56633: LD_INT 7
56635: PUSH
56636: LD_INT 8
56638: PUSH
56639: LD_INT 13
56641: PUSH
56642: LD_INT 12
56644: PUSH
56645: LD_INT 15
56647: PUSH
56648: LD_INT 11
56650: PUSH
56651: LD_INT 14
56653: PUSH
56654: LD_INT 10
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: IN
56668: IFFALSE 56678
// btype = b_lab ;
56670: LD_ADDR_VAR 0 1
56674: PUSH
56675: LD_INT 6
56677: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56678: LD_VAR 0 6
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: LIST
56696: IN
56697: NOT
56698: PUSH
56699: LD_VAR 0 1
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: LD_INT 6
56718: PUSH
56719: LD_INT 36
56721: PUSH
56722: LD_INT 4
56724: PUSH
56725: LD_INT 5
56727: PUSH
56728: LD_INT 31
56730: PUSH
56731: LD_INT 32
56733: PUSH
56734: LD_INT 33
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: IN
56750: NOT
56751: PUSH
56752: LD_VAR 0 6
56756: PUSH
56757: LD_INT 1
56759: EQUAL
56760: AND
56761: OR
56762: PUSH
56763: LD_VAR 0 1
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: IN
56778: NOT
56779: PUSH
56780: LD_VAR 0 6
56784: PUSH
56785: LD_INT 2
56787: EQUAL
56788: AND
56789: OR
56790: IFFALSE 56800
// mode = 0 ;
56792: LD_ADDR_VAR 0 6
56796: PUSH
56797: LD_INT 0
56799: ST_TO_ADDR
// case mode of 0 :
56800: LD_VAR 0 6
56804: PUSH
56805: LD_INT 0
56807: DOUBLE
56808: EQUAL
56809: IFTRUE 56813
56811: GO 68266
56813: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56814: LD_ADDR_VAR 0 11
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 3
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 3
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57007: LD_ADDR_VAR 0 12
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 2
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 3
57175: NEG
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57203: LD_ADDR_VAR 0 13
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: NEG
57339: PUSH
57340: LD_INT 2
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 2
57350: NEG
57351: PUSH
57352: LD_INT 3
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 3
57362: NEG
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 3
57374: NEG
57375: PUSH
57376: LD_INT 3
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57402: LD_ADDR_VAR 0 14
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: LD_INT 2
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: NEG
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: LD_INT 3
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57598: LD_ADDR_VAR 0 15
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: NEG
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 3
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57791: LD_ADDR_VAR 0 16
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 3
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 3
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: LD_INT 3
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57984: LD_ADDR_VAR 0 17
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: NEG
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: LD_INT 2
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58214: LD_ADDR_VAR 0 18
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 2
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 2
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: NEG
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 2
58413: NEG
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58444: LD_ADDR_VAR 0 19
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: LD_INT 2
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 2
58620: NEG
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58674: LD_ADDR_VAR 0 20
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: LD_INT 2
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58904: LD_ADDR_VAR 0 21
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: NEG
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 2
59091: NEG
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: NEG
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59134: LD_ADDR_VAR 0 22
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 2
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 2
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59364: LD_ADDR_VAR 0 23
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 2
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 2
59499: PUSH
59500: LD_INT 2
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 3
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59644: LD_ADDR_VAR 0 24
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: LD_INT 2
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 3
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59920: LD_ADDR_VAR 0 25
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: NEG
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 2
60119: NEG
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 3
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60194: LD_ADDR_VAR 0 26
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: LD_INT 2
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 2
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 2
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: PUSH
60330: LD_INT 2
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: LD_INT 2
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: PUSH
60406: LD_INT 3
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60470: LD_ADDR_VAR 0 27
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: NEG
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: LD_INT 2
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 2
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 2
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: NEG
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 2
60692: NEG
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 3
60703: NEG
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 3
60715: NEG
60716: PUSH
60717: LD_INT 2
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60750: LD_ADDR_VAR 0 28
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 1
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 2
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 2
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: NEG
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 3
60985: NEG
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 3
60997: NEG
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61032: LD_ADDR_VAR 0 29
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: LD_INT 1
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: LD_INT 2
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: LD_INT 2
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 2
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 2
61198: NEG
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 2
61210: NEG
61211: PUSH
61212: LD_INT 2
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 2
61222: NEG
61223: PUSH
61224: LD_INT 3
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 3
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: LD_INT 3
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61311: LD_ADDR_VAR 0 30
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 1
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: NEG
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: LD_INT 2
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: LD_INT 1
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 2
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: LD_INT 2
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: LD_INT 2
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 2
61488: NEG
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: LD_INT 3
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: LD_INT 2
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 3
61523: PUSH
61524: LD_INT 2
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: LD_INT 3
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 2
61543: NEG
61544: PUSH
61545: LD_INT 1
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61589: LD_ADDR_VAR 0 31
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: LD_INT 2
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 2
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 2
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: LD_INT 1
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 2
61766: NEG
61767: PUSH
61768: LD_INT 2
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 2
61778: NEG
61779: PUSH
61780: LD_INT 3
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 3
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: LD_INT 3
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 3
61832: NEG
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61867: LD_ADDR_VAR 0 32
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 1
61925: NEG
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: LD_INT 2
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 2
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: PUSH
61993: LD_INT 2
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: LD_INT 2
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 2
62044: NEG
62045: PUSH
62046: LD_INT 1
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: LD_INT 3
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: LD_INT 2
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: LD_INT 3
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 2
62099: NEG
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 3
62110: NEG
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62145: LD_ADDR_VAR 0 33
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: LD_INT 2
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: LD_INT 2
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: NEG
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 2
62300: NEG
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 2
62311: NEG
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 2
62323: NEG
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 2
62335: NEG
62336: PUSH
62337: LD_INT 3
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: LD_INT 1
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 3
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: LD_INT 2
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 3
62389: NEG
62390: PUSH
62391: LD_INT 2
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62424: LD_ADDR_VAR 0 34
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 1
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: NEG
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: LD_INT 1
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: LD_INT 2
62509: NEG
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 2
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 1
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 2
62549: PUSH
62550: LD_INT 2
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: PUSH
62560: LD_INT 2
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 2
62580: NEG
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 2
62591: NEG
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 2
62603: NEG
62604: PUSH
62605: LD_INT 2
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: LD_INT 3
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 3
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: LD_INT 3
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 3
62669: NEG
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62704: LD_ADDR_VAR 0 35
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 2
62795: NEG
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62816: LD_ADDR_VAR 0 36
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: LD_INT 0
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: NEG
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 1
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: LD_INT 2
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: LD_INT 2
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62928: LD_ADDR_VAR 0 37
62932: PUSH
62933: LD_INT 0
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: NEG
62998: PUSH
62999: LD_INT 1
63001: NEG
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63040: LD_ADDR_VAR 0 38
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: LD_INT 1
63060: NEG
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: LD_INT 1
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 2
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 2
63131: NEG
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63152: LD_ADDR_VAR 0 39
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 1
63245: PUSH
63246: LD_INT 2
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63264: LD_ADDR_VAR 0 40
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 1
63322: NEG
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: LD_INT 1
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63376: LD_ADDR_VAR 0 41
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: LD_INT 1
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 0
63424: PUSH
63425: LD_INT 1
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: LD_INT 2
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 1
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 2
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 2
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 2
63500: PUSH
63501: LD_INT 2
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: LD_INT 2
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 2
63531: NEG
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 2
63542: NEG
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 2
63554: NEG
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: LD_INT 3
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: LD_INT 1
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 3
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 3
63599: PUSH
63600: LD_INT 1
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 3
63609: PUSH
63610: LD_INT 2
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 3
63619: PUSH
63620: LD_INT 3
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 2
63629: PUSH
63630: LD_INT 3
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 2
63639: NEG
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 3
63650: NEG
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 3
63661: NEG
63662: PUSH
63663: LD_INT 1
63665: NEG
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 3
63673: NEG
63674: PUSH
63675: LD_INT 2
63677: NEG
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 3
63685: NEG
63686: PUSH
63687: LD_INT 3
63689: NEG
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63726: LD_ADDR_VAR 0 42
63730: PUSH
63731: LD_INT 0
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: LD_INT 1
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: NEG
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: LD_INT 2
63811: NEG
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: LD_INT 2
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 1
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 2
63841: PUSH
63842: LD_INT 1
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 2
63851: PUSH
63852: LD_INT 2
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 1
63861: PUSH
63862: LD_INT 2
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: NEG
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: LD_INT 1
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 2
63904: NEG
63905: PUSH
63906: LD_INT 2
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: LD_INT 3
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 1
63928: NEG
63929: PUSH
63930: LD_INT 3
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: LD_INT 3
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: LD_INT 2
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 3
63962: PUSH
63963: LD_INT 2
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 3
63972: PUSH
63973: LD_INT 3
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 2
63982: PUSH
63983: LD_INT 3
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: LD_INT 3
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: LD_INT 3
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 1
64012: NEG
64013: PUSH
64014: LD_INT 2
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 3
64023: NEG
64024: PUSH
64025: LD_INT 2
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 3
64035: NEG
64036: PUSH
64037: LD_INT 3
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64076: LD_ADDR_VAR 0 43
64080: PUSH
64081: LD_INT 0
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: LD_INT 1
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 1
64114: PUSH
64115: LD_INT 1
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: NEG
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: NEG
64146: PUSH
64147: LD_INT 1
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: NEG
64158: PUSH
64159: LD_INT 2
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: LD_INT 2
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 1
64180: PUSH
64181: LD_INT 1
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 2
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 2
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: LD_INT 2
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: LD_INT 2
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: LD_INT 1
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 2
64242: NEG
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 2
64253: NEG
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 1
64265: NEG
64266: PUSH
64267: LD_INT 3
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: LD_INT 3
64280: NEG
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 2
64299: PUSH
64300: LD_INT 1
64302: NEG
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 3
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 3
64320: PUSH
64321: LD_INT 1
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: LD_INT 3
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 3
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: LD_INT 2
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 2
64361: NEG
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 3
64372: NEG
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 3
64383: NEG
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64424: LD_ADDR_VAR 0 44
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: LD_INT 1
64444: NEG
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 1
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: LD_INT 2
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: LD_INT 1
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 2
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 2
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 2
64548: PUSH
64549: LD_INT 2
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: PUSH
64559: LD_INT 2
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 1
64568: NEG
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 2
64579: NEG
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 2
64590: NEG
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 2
64602: NEG
64603: PUSH
64604: LD_INT 2
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 2
64614: NEG
64615: PUSH
64616: LD_INT 3
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 2
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 3
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 3
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 3
64657: PUSH
64658: LD_INT 2
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 3
64667: PUSH
64668: LD_INT 3
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 2
64677: PUSH
64678: LD_INT 3
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 2
64687: NEG
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 3
64698: NEG
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 3
64709: NEG
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 3
64721: NEG
64722: PUSH
64723: LD_INT 2
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 3
64733: NEG
64734: PUSH
64735: LD_INT 3
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64774: LD_ADDR_VAR 0 45
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 1
64855: NEG
64856: PUSH
64857: LD_INT 2
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: LD_INT 2
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: LD_INT 2
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: LD_INT 1
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 2
64940: NEG
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 2
64952: NEG
64953: PUSH
64954: LD_INT 2
64956: NEG
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 2
64964: NEG
64965: PUSH
64966: LD_INT 3
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: LD_INT 3
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: LD_INT 3
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 1
64999: PUSH
65000: LD_INT 2
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 3
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 3
65020: PUSH
65021: LD_INT 3
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 2
65030: PUSH
65031: LD_INT 3
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 1
65040: PUSH
65041: LD_INT 3
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: LD_INT 3
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 1
65060: NEG
65061: PUSH
65062: LD_INT 2
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 3
65071: NEG
65072: PUSH
65073: LD_INT 2
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 3
65083: NEG
65084: PUSH
65085: LD_INT 3
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65124: LD_ADDR_VAR 0 46
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: LD_INT 1
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 1
65193: NEG
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 1
65205: NEG
65206: PUSH
65207: LD_INT 2
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: LD_INT 2
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 1
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 2
65239: PUSH
65240: LD_INT 0
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 2
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: LD_INT 2
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 2
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: LD_INT 1
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 2
65290: NEG
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 2
65301: NEG
65302: PUSH
65303: LD_INT 1
65305: NEG
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 1
65313: NEG
65314: PUSH
65315: LD_INT 3
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: LD_INT 3
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: LD_INT 2
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 2
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 3
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 3
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 1
65378: PUSH
65379: LD_INT 3
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: LD_INT 3
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: LD_INT 2
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 2
65409: NEG
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 3
65420: NEG
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 3
65431: NEG
65432: PUSH
65433: LD_INT 1
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65472: LD_ADDR_VAR 0 47
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: LD_INT 0
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: LD_INT 1
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: LD_INT 1
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: LD_INT 0
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: LD_INT 1
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 1
65553: NEG
65554: PUSH
65555: LD_INT 2
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: LD_INT 2
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 1
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 2
65587: NEG
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 2
65599: NEG
65600: PUSH
65601: LD_INT 2
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65623: LD_ADDR_VAR 0 48
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 0
65640: PUSH
65641: LD_INT 1
65643: NEG
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: LD_INT 1
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 1
65681: NEG
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 1
65704: NEG
65705: PUSH
65706: LD_INT 2
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: LD_INT 2
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: LD_INT 1
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 2
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 2
65748: PUSH
65749: LD_INT 1
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65770: LD_ADDR_VAR 0 49
65774: PUSH
65775: LD_INT 0
65777: PUSH
65778: LD_INT 0
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 0
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 1
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 1
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: LD_INT 1
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 1
65828: NEG
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 1
65839: NEG
65840: PUSH
65841: LD_INT 1
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 1
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 2
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: PUSH
65883: LD_INT 2
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 1
65892: PUSH
65893: LD_INT 2
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65914: LD_ADDR_VAR 0 50
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 1
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: LD_INT 1
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 1
65972: NEG
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 1
65983: NEG
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 2
66005: PUSH
66006: LD_INT 2
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: LD_INT 2
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: LD_INT 2
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 1
66035: NEG
66036: PUSH
66037: LD_INT 1
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66058: LD_ADDR_VAR 0 51
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: LD_INT 0
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 0
66075: PUSH
66076: LD_INT 1
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 1
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 1
66096: PUSH
66097: LD_INT 1
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: LD_INT 1
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 1
66116: NEG
66117: PUSH
66118: LD_INT 0
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 1
66127: NEG
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: LD_INT 2
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 0
66149: PUSH
66150: LD_INT 2
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 1
66159: NEG
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 2
66170: NEG
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 2
66181: NEG
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66205: LD_ADDR_VAR 0 52
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: LD_INT 0
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 1
66243: PUSH
66244: LD_INT 1
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 1
66263: NEG
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: NEG
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: LD_INT 2
66290: NEG
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 2
66309: NEG
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 2
66320: NEG
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66356: LD_ADDR_VAR 0 53
66360: PUSH
66361: LD_INT 0
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: LD_INT 1
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 1
66384: PUSH
66385: LD_INT 0
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 1
66394: PUSH
66395: LD_INT 1
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: LD_INT 1
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: NEG
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: NEG
66438: PUSH
66439: LD_INT 2
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: LD_INT 2
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: LD_INT 1
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 2
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 2
66481: PUSH
66482: LD_INT 1
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 2
66491: PUSH
66492: LD_INT 2
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 1
66501: PUSH
66502: LD_INT 2
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 0
66511: PUSH
66512: LD_INT 2
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 1
66521: NEG
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 2
66532: NEG
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 2
66543: NEG
66544: PUSH
66545: LD_INT 1
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 2
66555: NEG
66556: PUSH
66557: LD_INT 2
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66586: LD_ADDR_VAR 0 54
66590: PUSH
66591: LD_INT 0
66593: PUSH
66594: LD_INT 0
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: LD_INT 1
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: LD_INT 0
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 1
66624: PUSH
66625: LD_INT 1
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: LD_INT 1
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: LD_INT 0
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 1
66667: NEG
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 0
66679: PUSH
66680: LD_INT 2
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 1
66690: PUSH
66691: LD_INT 1
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 2
66701: PUSH
66702: LD_INT 0
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 2
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 2
66721: PUSH
66722: LD_INT 2
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: LD_INT 2
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: LD_INT 2
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 1
66751: NEG
66752: PUSH
66753: LD_INT 1
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 2
66762: NEG
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 2
66773: NEG
66774: PUSH
66775: LD_INT 1
66777: NEG
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 2
66785: NEG
66786: PUSH
66787: LD_INT 2
66789: NEG
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66816: LD_ADDR_VAR 0 55
66820: PUSH
66821: LD_INT 0
66823: PUSH
66824: LD_INT 0
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: LD_INT 1
66836: NEG
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 1
66844: PUSH
66845: LD_INT 0
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 1
66854: PUSH
66855: LD_INT 1
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 1
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: LD_INT 0
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: NEG
66886: PUSH
66887: LD_INT 1
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 1
66897: NEG
66898: PUSH
66899: LD_INT 2
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: LD_INT 2
66912: NEG
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: LD_INT 1
66923: NEG
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 2
66931: PUSH
66932: LD_INT 0
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 2
66941: PUSH
66942: LD_INT 1
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 2
66951: PUSH
66952: LD_INT 2
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 1
66961: PUSH
66962: LD_INT 2
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: LD_INT 2
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: NEG
66982: PUSH
66983: LD_INT 1
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 2
66992: NEG
66993: PUSH
66994: LD_INT 0
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 2
67003: NEG
67004: PUSH
67005: LD_INT 1
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 2
67015: NEG
67016: PUSH
67017: LD_INT 2
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67046: LD_ADDR_VAR 0 56
67050: PUSH
67051: LD_INT 0
67053: PUSH
67054: LD_INT 0
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 0
67063: PUSH
67064: LD_INT 1
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 1
67074: PUSH
67075: LD_INT 0
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 1
67084: PUSH
67085: LD_INT 1
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 0
67094: PUSH
67095: LD_INT 1
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 1
67104: NEG
67105: PUSH
67106: LD_INT 0
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 1
67115: NEG
67116: PUSH
67117: LD_INT 1
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 1
67127: NEG
67128: PUSH
67129: LD_INT 2
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 0
67139: PUSH
67140: LD_INT 2
67142: NEG
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: LD_INT 1
67153: NEG
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 2
67161: PUSH
67162: LD_INT 0
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 2
67171: PUSH
67172: LD_INT 1
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 2
67181: PUSH
67182: LD_INT 2
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 1
67191: PUSH
67192: LD_INT 2
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: LD_INT 2
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 1
67211: NEG
67212: PUSH
67213: LD_INT 1
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 2
67222: NEG
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 2
67233: NEG
67234: PUSH
67235: LD_INT 1
67237: NEG
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 2
67245: NEG
67246: PUSH
67247: LD_INT 2
67249: NEG
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67276: LD_ADDR_VAR 0 57
67280: PUSH
67281: LD_INT 0
67283: PUSH
67284: LD_INT 0
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 0
67293: PUSH
67294: LD_INT 1
67296: NEG
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 1
67304: PUSH
67305: LD_INT 0
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 1
67314: PUSH
67315: LD_INT 1
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: LD_INT 1
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 1
67334: NEG
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: PUSH
67347: LD_INT 1
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: PUSH
67359: LD_INT 2
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: LD_INT 2
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: LD_INT 1
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 2
67391: PUSH
67392: LD_INT 0
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 2
67401: PUSH
67402: LD_INT 1
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 2
67411: PUSH
67412: LD_INT 2
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 1
67421: PUSH
67422: LD_INT 2
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 0
67431: PUSH
67432: LD_INT 2
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 1
67441: NEG
67442: PUSH
67443: LD_INT 1
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 2
67452: NEG
67453: PUSH
67454: LD_INT 0
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 2
67463: NEG
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 2
67475: NEG
67476: PUSH
67477: LD_INT 2
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67506: LD_ADDR_VAR 0 58
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: LD_INT 0
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: LD_INT 1
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 1
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 1
67544: PUSH
67545: LD_INT 1
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: LD_INT 1
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 1
67564: NEG
67565: PUSH
67566: LD_INT 0
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 1
67575: NEG
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 1
67587: NEG
67588: PUSH
67589: LD_INT 2
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 0
67599: PUSH
67600: LD_INT 2
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 1
67610: PUSH
67611: LD_INT 1
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 2
67621: PUSH
67622: LD_INT 0
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 2
67631: PUSH
67632: LD_INT 1
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 2
67641: PUSH
67642: LD_INT 2
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: LD_INT 2
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 0
67661: PUSH
67662: LD_INT 2
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 1
67671: NEG
67672: PUSH
67673: LD_INT 1
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 2
67682: NEG
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 2
67693: NEG
67694: PUSH
67695: LD_INT 1
67697: NEG
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 2
67705: NEG
67706: PUSH
67707: LD_INT 2
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67736: LD_ADDR_VAR 0 59
67740: PUSH
67741: LD_INT 0
67743: PUSH
67744: LD_INT 0
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 0
67753: PUSH
67754: LD_INT 1
67756: NEG
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 1
67764: PUSH
67765: LD_INT 0
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 1
67774: PUSH
67775: LD_INT 1
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 0
67784: PUSH
67785: LD_INT 1
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 1
67794: NEG
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 1
67805: NEG
67806: PUSH
67807: LD_INT 1
67809: NEG
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67824: LD_ADDR_VAR 0 60
67828: PUSH
67829: LD_INT 0
67831: PUSH
67832: LD_INT 0
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 0
67841: PUSH
67842: LD_INT 1
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 1
67852: PUSH
67853: LD_INT 0
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 1
67862: PUSH
67863: LD_INT 1
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: LD_INT 1
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 1
67882: NEG
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 1
67893: NEG
67894: PUSH
67895: LD_INT 1
67897: NEG
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67912: LD_ADDR_VAR 0 61
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 0
67929: PUSH
67930: LD_INT 1
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 1
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 1
67950: PUSH
67951: LD_INT 1
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: LD_INT 1
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 1
67970: NEG
67971: PUSH
67972: LD_INT 0
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 1
67981: NEG
67982: PUSH
67983: LD_INT 1
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68000: LD_ADDR_VAR 0 62
68004: PUSH
68005: LD_INT 0
68007: PUSH
68008: LD_INT 0
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 0
68017: PUSH
68018: LD_INT 1
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: LD_INT 0
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 1
68038: PUSH
68039: LD_INT 1
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: LD_INT 1
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 1
68058: NEG
68059: PUSH
68060: LD_INT 0
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: NEG
68070: PUSH
68071: LD_INT 1
68073: NEG
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68088: LD_ADDR_VAR 0 63
68092: PUSH
68093: LD_INT 0
68095: PUSH
68096: LD_INT 0
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: LD_INT 1
68108: NEG
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 1
68116: PUSH
68117: LD_INT 0
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 1
68126: PUSH
68127: LD_INT 1
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 0
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 1
68146: NEG
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 1
68157: NEG
68158: PUSH
68159: LD_INT 1
68161: NEG
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68176: LD_ADDR_VAR 0 64
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: LD_INT 1
68196: NEG
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 1
68204: PUSH
68205: LD_INT 0
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 1
68214: PUSH
68215: LD_INT 1
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 0
68224: PUSH
68225: LD_INT 1
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 1
68234: NEG
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 1
68245: NEG
68246: PUSH
68247: LD_INT 1
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: ST_TO_ADDR
// end ; 1 :
68264: GO 74161
68266: LD_INT 1
68268: DOUBLE
68269: EQUAL
68270: IFTRUE 68274
68272: GO 70897
68274: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68275: LD_ADDR_VAR 0 11
68279: PUSH
68280: LD_INT 1
68282: NEG
68283: PUSH
68284: LD_INT 3
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: LD_INT 3
68297: NEG
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 1
68305: PUSH
68306: LD_INT 2
68308: NEG
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: LIST
68318: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68319: LD_ADDR_VAR 0 12
68323: PUSH
68324: LD_INT 2
68326: PUSH
68327: LD_INT 1
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 3
68337: PUSH
68338: LD_INT 0
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 3
68347: PUSH
68348: LD_INT 1
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: LIST
68359: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68360: LD_ADDR_VAR 0 13
68364: PUSH
68365: LD_INT 3
68367: PUSH
68368: LD_INT 2
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 3
68377: PUSH
68378: LD_INT 3
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 2
68387: PUSH
68388: LD_INT 3
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: LIST
68399: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68400: LD_ADDR_VAR 0 14
68404: PUSH
68405: LD_INT 1
68407: PUSH
68408: LD_INT 3
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 0
68417: PUSH
68418: LD_INT 3
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 1
68427: NEG
68428: PUSH
68429: LD_INT 2
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: LIST
68440: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68441: LD_ADDR_VAR 0 15
68445: PUSH
68446: LD_INT 2
68448: NEG
68449: PUSH
68450: LD_INT 1
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 3
68459: NEG
68460: PUSH
68461: LD_INT 0
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 3
68470: NEG
68471: PUSH
68472: LD_INT 1
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: LIST
68484: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68485: LD_ADDR_VAR 0 16
68489: PUSH
68490: LD_INT 2
68492: NEG
68493: PUSH
68494: LD_INT 3
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 3
68504: NEG
68505: PUSH
68506: LD_INT 2
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 3
68516: NEG
68517: PUSH
68518: LD_INT 3
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: LIST
68530: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68531: LD_ADDR_VAR 0 17
68535: PUSH
68536: LD_INT 1
68538: NEG
68539: PUSH
68540: LD_INT 3
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: LD_INT 3
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 1
68561: PUSH
68562: LD_INT 2
68564: NEG
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: LIST
68574: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68575: LD_ADDR_VAR 0 18
68579: PUSH
68580: LD_INT 2
68582: PUSH
68583: LD_INT 1
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 3
68593: PUSH
68594: LD_INT 0
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 3
68603: PUSH
68604: LD_INT 1
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: LIST
68615: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68616: LD_ADDR_VAR 0 19
68620: PUSH
68621: LD_INT 3
68623: PUSH
68624: LD_INT 2
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 3
68633: PUSH
68634: LD_INT 3
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 2
68643: PUSH
68644: LD_INT 3
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: LIST
68655: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68656: LD_ADDR_VAR 0 20
68660: PUSH
68661: LD_INT 1
68663: PUSH
68664: LD_INT 3
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 0
68673: PUSH
68674: LD_INT 3
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 1
68683: NEG
68684: PUSH
68685: LD_INT 2
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: LIST
68696: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68697: LD_ADDR_VAR 0 21
68701: PUSH
68702: LD_INT 2
68704: NEG
68705: PUSH
68706: LD_INT 1
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 3
68715: NEG
68716: PUSH
68717: LD_INT 0
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 3
68726: NEG
68727: PUSH
68728: LD_INT 1
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: LIST
68740: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68741: LD_ADDR_VAR 0 22
68745: PUSH
68746: LD_INT 2
68748: NEG
68749: PUSH
68750: LD_INT 3
68752: NEG
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 3
68760: NEG
68761: PUSH
68762: LD_INT 2
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 3
68772: NEG
68773: PUSH
68774: LD_INT 3
68776: NEG
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: LIST
68786: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68787: LD_ADDR_VAR 0 23
68791: PUSH
68792: LD_INT 0
68794: PUSH
68795: LD_INT 3
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 1
68805: NEG
68806: PUSH
68807: LD_INT 4
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 1
68817: PUSH
68818: LD_INT 3
68820: NEG
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: LIST
68830: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68831: LD_ADDR_VAR 0 24
68835: PUSH
68836: LD_INT 3
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 3
68848: PUSH
68849: LD_INT 1
68851: NEG
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 4
68859: PUSH
68860: LD_INT 1
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: LIST
68871: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68872: LD_ADDR_VAR 0 25
68876: PUSH
68877: LD_INT 3
68879: PUSH
68880: LD_INT 3
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 4
68889: PUSH
68890: LD_INT 3
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 3
68899: PUSH
68900: LD_INT 4
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: LIST
68911: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68912: LD_ADDR_VAR 0 26
68916: PUSH
68917: LD_INT 0
68919: PUSH
68920: LD_INT 3
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 1
68929: PUSH
68930: LD_INT 4
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 1
68939: NEG
68940: PUSH
68941: LD_INT 3
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: LIST
68952: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68953: LD_ADDR_VAR 0 27
68957: PUSH
68958: LD_INT 3
68960: NEG
68961: PUSH
68962: LD_INT 0
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 3
68971: NEG
68972: PUSH
68973: LD_INT 1
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 4
68982: NEG
68983: PUSH
68984: LD_INT 1
68986: NEG
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: LIST
68996: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68997: LD_ADDR_VAR 0 28
69001: PUSH
69002: LD_INT 3
69004: NEG
69005: PUSH
69006: LD_INT 3
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 3
69016: NEG
69017: PUSH
69018: LD_INT 4
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 4
69028: NEG
69029: PUSH
69030: LD_INT 3
69032: NEG
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: LIST
69042: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69043: LD_ADDR_VAR 0 29
69047: PUSH
69048: LD_INT 1
69050: NEG
69051: PUSH
69052: LD_INT 3
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 0
69062: PUSH
69063: LD_INT 3
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 1
69073: PUSH
69074: LD_INT 2
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 1
69084: NEG
69085: PUSH
69086: LD_INT 4
69088: NEG
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 0
69096: PUSH
69097: LD_INT 4
69099: NEG
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 1
69107: PUSH
69108: LD_INT 3
69110: NEG
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 1
69118: NEG
69119: PUSH
69120: LD_INT 5
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: LD_INT 5
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 1
69141: PUSH
69142: LD_INT 4
69144: NEG
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 1
69152: NEG
69153: PUSH
69154: LD_INT 6
69156: NEG
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: LD_INT 6
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 1
69175: PUSH
69176: LD_INT 5
69178: NEG
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69198: LD_ADDR_VAR 0 30
69202: PUSH
69203: LD_INT 2
69205: PUSH
69206: LD_INT 1
69208: NEG
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 3
69216: PUSH
69217: LD_INT 0
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 3
69226: PUSH
69227: LD_INT 1
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 3
69236: PUSH
69237: LD_INT 1
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 4
69247: PUSH
69248: LD_INT 0
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 4
69257: PUSH
69258: LD_INT 1
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 4
69267: PUSH
69268: LD_INT 1
69270: NEG
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 5
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 5
69288: PUSH
69289: LD_INT 1
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 5
69298: PUSH
69299: LD_INT 1
69301: NEG
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 6
69309: PUSH
69310: LD_INT 0
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 6
69319: PUSH
69320: LD_INT 1
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69341: LD_ADDR_VAR 0 31
69345: PUSH
69346: LD_INT 3
69348: PUSH
69349: LD_INT 2
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 3
69358: PUSH
69359: LD_INT 3
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 2
69368: PUSH
69369: LD_INT 3
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 4
69378: PUSH
69379: LD_INT 3
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 4
69388: PUSH
69389: LD_INT 4
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 3
69398: PUSH
69399: LD_INT 4
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 5
69408: PUSH
69409: LD_INT 4
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 5
69418: PUSH
69419: LD_INT 5
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 4
69428: PUSH
69429: LD_INT 5
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 6
69438: PUSH
69439: LD_INT 5
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 6
69448: PUSH
69449: LD_INT 6
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 5
69458: PUSH
69459: LD_INT 6
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69480: LD_ADDR_VAR 0 32
69484: PUSH
69485: LD_INT 1
69487: PUSH
69488: LD_INT 3
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 0
69497: PUSH
69498: LD_INT 3
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 1
69507: NEG
69508: PUSH
69509: LD_INT 2
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 1
69518: PUSH
69519: LD_INT 4
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 0
69528: PUSH
69529: LD_INT 4
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 1
69538: NEG
69539: PUSH
69540: LD_INT 3
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 1
69549: PUSH
69550: LD_INT 5
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 0
69559: PUSH
69560: LD_INT 5
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 1
69569: NEG
69570: PUSH
69571: LD_INT 4
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 1
69580: PUSH
69581: LD_INT 6
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 0
69590: PUSH
69591: LD_INT 6
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 1
69600: NEG
69601: PUSH
69602: LD_INT 5
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69623: LD_ADDR_VAR 0 33
69627: PUSH
69628: LD_INT 2
69630: NEG
69631: PUSH
69632: LD_INT 1
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 3
69641: NEG
69642: PUSH
69643: LD_INT 0
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 3
69652: NEG
69653: PUSH
69654: LD_INT 1
69656: NEG
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 3
69664: NEG
69665: PUSH
69666: LD_INT 1
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 4
69675: NEG
69676: PUSH
69677: LD_INT 0
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 4
69686: NEG
69687: PUSH
69688: LD_INT 1
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 4
69698: NEG
69699: PUSH
69700: LD_INT 1
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 5
69709: NEG
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 5
69720: NEG
69721: PUSH
69722: LD_INT 1
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 5
69732: NEG
69733: PUSH
69734: LD_INT 1
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 6
69743: NEG
69744: PUSH
69745: LD_INT 0
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 6
69754: NEG
69755: PUSH
69756: LD_INT 1
69758: NEG
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69778: LD_ADDR_VAR 0 34
69782: PUSH
69783: LD_INT 2
69785: NEG
69786: PUSH
69787: LD_INT 3
69789: NEG
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 3
69797: NEG
69798: PUSH
69799: LD_INT 2
69801: NEG
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 3
69809: NEG
69810: PUSH
69811: LD_INT 3
69813: NEG
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 3
69821: NEG
69822: PUSH
69823: LD_INT 4
69825: NEG
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 4
69833: NEG
69834: PUSH
69835: LD_INT 3
69837: NEG
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 4
69845: NEG
69846: PUSH
69847: LD_INT 4
69849: NEG
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 4
69857: NEG
69858: PUSH
69859: LD_INT 5
69861: NEG
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 5
69869: NEG
69870: PUSH
69871: LD_INT 4
69873: NEG
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 5
69881: NEG
69882: PUSH
69883: LD_INT 5
69885: NEG
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 5
69893: NEG
69894: PUSH
69895: LD_INT 6
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 6
69905: NEG
69906: PUSH
69907: LD_INT 5
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 6
69917: NEG
69918: PUSH
69919: LD_INT 6
69921: NEG
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69941: LD_ADDR_VAR 0 41
69945: PUSH
69946: LD_INT 0
69948: PUSH
69949: LD_INT 2
69951: NEG
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 1
69959: NEG
69960: PUSH
69961: LD_INT 3
69963: NEG
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 1
69971: PUSH
69972: LD_INT 2
69974: NEG
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: LIST
69984: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69985: LD_ADDR_VAR 0 42
69989: PUSH
69990: LD_INT 2
69992: PUSH
69993: LD_INT 0
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 2
70002: PUSH
70003: LD_INT 1
70005: NEG
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 3
70013: PUSH
70014: LD_INT 1
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: LIST
70025: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70026: LD_ADDR_VAR 0 43
70030: PUSH
70031: LD_INT 2
70033: PUSH
70034: LD_INT 2
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 3
70043: PUSH
70044: LD_INT 2
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 2
70053: PUSH
70054: LD_INT 3
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: LIST
70065: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70066: LD_ADDR_VAR 0 44
70070: PUSH
70071: LD_INT 0
70073: PUSH
70074: LD_INT 2
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 1
70083: PUSH
70084: LD_INT 3
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 1
70093: NEG
70094: PUSH
70095: LD_INT 2
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: LIST
70106: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70107: LD_ADDR_VAR 0 45
70111: PUSH
70112: LD_INT 2
70114: NEG
70115: PUSH
70116: LD_INT 0
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 2
70125: NEG
70126: PUSH
70127: LD_INT 1
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 3
70136: NEG
70137: PUSH
70138: LD_INT 1
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: LIST
70150: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70151: LD_ADDR_VAR 0 46
70155: PUSH
70156: LD_INT 2
70158: NEG
70159: PUSH
70160: LD_INT 2
70162: NEG
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 2
70170: NEG
70171: PUSH
70172: LD_INT 3
70174: NEG
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 3
70182: NEG
70183: PUSH
70184: LD_INT 2
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: LIST
70196: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70197: LD_ADDR_VAR 0 47
70201: PUSH
70202: LD_INT 2
70204: NEG
70205: PUSH
70206: LD_INT 3
70208: NEG
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 1
70216: NEG
70217: PUSH
70218: LD_INT 3
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70230: LD_ADDR_VAR 0 48
70234: PUSH
70235: LD_INT 1
70237: PUSH
70238: LD_INT 2
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 2
70248: PUSH
70249: LD_INT 1
70251: NEG
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70261: LD_ADDR_VAR 0 49
70265: PUSH
70266: LD_INT 3
70268: PUSH
70269: LD_INT 1
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 3
70278: PUSH
70279: LD_INT 2
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70290: LD_ADDR_VAR 0 50
70294: PUSH
70295: LD_INT 2
70297: PUSH
70298: LD_INT 3
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 1
70307: PUSH
70308: LD_INT 3
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70319: LD_ADDR_VAR 0 51
70323: PUSH
70324: LD_INT 1
70326: NEG
70327: PUSH
70328: LD_INT 2
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 2
70337: NEG
70338: PUSH
70339: LD_INT 1
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70350: LD_ADDR_VAR 0 52
70354: PUSH
70355: LD_INT 3
70357: NEG
70358: PUSH
70359: LD_INT 1
70361: NEG
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 3
70369: NEG
70370: PUSH
70371: LD_INT 2
70373: NEG
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70383: LD_ADDR_VAR 0 53
70387: PUSH
70388: LD_INT 1
70390: NEG
70391: PUSH
70392: LD_INT 3
70394: NEG
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: LD_INT 3
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 1
70413: PUSH
70414: LD_INT 2
70416: NEG
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: LIST
70426: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70427: LD_ADDR_VAR 0 54
70431: PUSH
70432: LD_INT 2
70434: PUSH
70435: LD_INT 1
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 3
70445: PUSH
70446: LD_INT 0
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 3
70455: PUSH
70456: LD_INT 1
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: LIST
70467: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70468: LD_ADDR_VAR 0 55
70472: PUSH
70473: LD_INT 3
70475: PUSH
70476: LD_INT 2
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 3
70485: PUSH
70486: LD_INT 3
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 2
70495: PUSH
70496: LD_INT 3
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: LIST
70507: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70508: LD_ADDR_VAR 0 56
70512: PUSH
70513: LD_INT 1
70515: PUSH
70516: LD_INT 3
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 0
70525: PUSH
70526: LD_INT 3
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 1
70535: NEG
70536: PUSH
70537: LD_INT 2
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70549: LD_ADDR_VAR 0 57
70553: PUSH
70554: LD_INT 2
70556: NEG
70557: PUSH
70558: LD_INT 1
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 3
70567: NEG
70568: PUSH
70569: LD_INT 0
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 3
70578: NEG
70579: PUSH
70580: LD_INT 1
70582: NEG
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: LIST
70592: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70593: LD_ADDR_VAR 0 58
70597: PUSH
70598: LD_INT 2
70600: NEG
70601: PUSH
70602: LD_INT 3
70604: NEG
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 3
70612: NEG
70613: PUSH
70614: LD_INT 2
70616: NEG
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 3
70624: NEG
70625: PUSH
70626: LD_INT 3
70628: NEG
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: LIST
70638: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70639: LD_ADDR_VAR 0 59
70643: PUSH
70644: LD_INT 1
70646: NEG
70647: PUSH
70648: LD_INT 2
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 0
70658: PUSH
70659: LD_INT 2
70661: NEG
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 1
70669: PUSH
70670: LD_INT 1
70672: NEG
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: LIST
70682: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70683: LD_ADDR_VAR 0 60
70687: PUSH
70688: LD_INT 1
70690: PUSH
70691: LD_INT 1
70693: NEG
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 2
70701: PUSH
70702: LD_INT 0
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 2
70711: PUSH
70712: LD_INT 1
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: LIST
70723: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70724: LD_ADDR_VAR 0 61
70728: PUSH
70729: LD_INT 2
70731: PUSH
70732: LD_INT 1
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 2
70741: PUSH
70742: LD_INT 2
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 1
70751: PUSH
70752: LD_INT 2
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: LIST
70763: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70764: LD_ADDR_VAR 0 62
70768: PUSH
70769: LD_INT 1
70771: PUSH
70772: LD_INT 2
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 0
70781: PUSH
70782: LD_INT 2
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 1
70791: NEG
70792: PUSH
70793: LD_INT 1
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: LIST
70804: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70805: LD_ADDR_VAR 0 63
70809: PUSH
70810: LD_INT 1
70812: NEG
70813: PUSH
70814: LD_INT 1
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 2
70823: NEG
70824: PUSH
70825: LD_INT 0
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 2
70834: NEG
70835: PUSH
70836: LD_INT 1
70838: NEG
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: LIST
70848: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70849: LD_ADDR_VAR 0 64
70853: PUSH
70854: LD_INT 1
70856: NEG
70857: PUSH
70858: LD_INT 2
70860: NEG
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 2
70868: NEG
70869: PUSH
70870: LD_INT 1
70872: NEG
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 2
70880: NEG
70881: PUSH
70882: LD_INT 2
70884: NEG
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: LIST
70894: ST_TO_ADDR
// end ; 2 :
70895: GO 74161
70897: LD_INT 2
70899: DOUBLE
70900: EQUAL
70901: IFTRUE 70905
70903: GO 74160
70905: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70906: LD_ADDR_VAR 0 29
70910: PUSH
70911: LD_INT 4
70913: PUSH
70914: LD_INT 0
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 4
70923: PUSH
70924: LD_INT 1
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 5
70934: PUSH
70935: LD_INT 0
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 5
70944: PUSH
70945: LD_INT 1
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 4
70954: PUSH
70955: LD_INT 1
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 3
70964: PUSH
70965: LD_INT 0
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 3
70974: PUSH
70975: LD_INT 1
70977: NEG
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 3
70985: PUSH
70986: LD_INT 2
70988: NEG
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 5
70996: PUSH
70997: LD_INT 2
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 3
71006: PUSH
71007: LD_INT 3
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 3
71016: PUSH
71017: LD_INT 2
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 4
71026: PUSH
71027: LD_INT 3
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 4
71036: PUSH
71037: LD_INT 4
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 3
71046: PUSH
71047: LD_INT 4
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 2
71056: PUSH
71057: LD_INT 3
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 2
71066: PUSH
71067: LD_INT 2
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 4
71076: PUSH
71077: LD_INT 2
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 2
71086: PUSH
71087: LD_INT 4
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 0
71096: PUSH
71097: LD_INT 4
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 0
71106: PUSH
71107: LD_INT 3
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 1
71116: PUSH
71117: LD_INT 4
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 1
71126: PUSH
71127: LD_INT 5
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 0
71136: PUSH
71137: LD_INT 5
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 1
71146: NEG
71147: PUSH
71148: LD_INT 4
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 1
71157: NEG
71158: PUSH
71159: LD_INT 3
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 2
71168: PUSH
71169: LD_INT 5
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 2
71178: NEG
71179: PUSH
71180: LD_INT 3
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 3
71189: NEG
71190: PUSH
71191: LD_INT 0
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 3
71200: NEG
71201: PUSH
71202: LD_INT 1
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 2
71212: NEG
71213: PUSH
71214: LD_INT 0
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 2
71223: NEG
71224: PUSH
71225: LD_INT 1
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 3
71234: NEG
71235: PUSH
71236: LD_INT 1
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 4
71245: NEG
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 4
71256: NEG
71257: PUSH
71258: LD_INT 1
71260: NEG
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 4
71268: NEG
71269: PUSH
71270: LD_INT 2
71272: NEG
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 2
71280: NEG
71281: PUSH
71282: LD_INT 2
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 4
71291: NEG
71292: PUSH
71293: LD_INT 4
71295: NEG
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 4
71303: NEG
71304: PUSH
71305: LD_INT 5
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 3
71315: NEG
71316: PUSH
71317: LD_INT 4
71319: NEG
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 3
71327: NEG
71328: PUSH
71329: LD_INT 3
71331: NEG
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 4
71339: NEG
71340: PUSH
71341: LD_INT 3
71343: NEG
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 5
71351: NEG
71352: PUSH
71353: LD_INT 4
71355: NEG
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 5
71363: NEG
71364: PUSH
71365: LD_INT 5
71367: NEG
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 3
71375: NEG
71376: PUSH
71377: LD_INT 5
71379: NEG
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 5
71387: NEG
71388: PUSH
71389: LD_INT 3
71391: NEG
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71444: LD_ADDR_VAR 0 30
71448: PUSH
71449: LD_INT 4
71451: PUSH
71452: LD_INT 4
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 4
71461: PUSH
71462: LD_INT 3
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 5
71471: PUSH
71472: LD_INT 4
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 5
71481: PUSH
71482: LD_INT 5
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: PUSH
71489: LD_INT 4
71491: PUSH
71492: LD_INT 5
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 3
71501: PUSH
71502: LD_INT 4
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 3
71511: PUSH
71512: LD_INT 3
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 5
71521: PUSH
71522: LD_INT 3
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 3
71531: PUSH
71532: LD_INT 5
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 0
71541: PUSH
71542: LD_INT 3
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 0
71551: PUSH
71552: LD_INT 2
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 1
71561: PUSH
71562: LD_INT 3
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 1
71571: PUSH
71572: LD_INT 4
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 0
71581: PUSH
71582: LD_INT 4
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 1
71591: NEG
71592: PUSH
71593: LD_INT 3
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 1
71602: NEG
71603: PUSH
71604: LD_INT 2
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 2
71613: PUSH
71614: LD_INT 4
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 2
71623: NEG
71624: PUSH
71625: LD_INT 2
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PUSH
71632: LD_INT 4
71634: NEG
71635: PUSH
71636: LD_INT 0
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 4
71645: NEG
71646: PUSH
71647: LD_INT 1
71649: NEG
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 3
71657: NEG
71658: PUSH
71659: LD_INT 0
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: LD_INT 3
71668: NEG
71669: PUSH
71670: LD_INT 1
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 4
71679: NEG
71680: PUSH
71681: LD_INT 1
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 5
71690: NEG
71691: PUSH
71692: LD_INT 0
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 5
71701: NEG
71702: PUSH
71703: LD_INT 1
71705: NEG
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 5
71713: NEG
71714: PUSH
71715: LD_INT 2
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 3
71725: NEG
71726: PUSH
71727: LD_INT 2
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 3
71736: NEG
71737: PUSH
71738: LD_INT 3
71740: NEG
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 3
71748: NEG
71749: PUSH
71750: LD_INT 4
71752: NEG
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 2
71760: NEG
71761: PUSH
71762: LD_INT 3
71764: NEG
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 2
71772: NEG
71773: PUSH
71774: LD_INT 2
71776: NEG
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 3
71784: NEG
71785: PUSH
71786: LD_INT 2
71788: NEG
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: LD_INT 4
71796: NEG
71797: PUSH
71798: LD_INT 3
71800: NEG
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 4
71808: NEG
71809: PUSH
71810: LD_INT 4
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 2
71820: NEG
71821: PUSH
71822: LD_INT 4
71824: NEG
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 4
71832: NEG
71833: PUSH
71834: LD_INT 2
71836: NEG
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 0
71844: PUSH
71845: LD_INT 4
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 0
71855: PUSH
71856: LD_INT 5
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 1
71866: PUSH
71867: LD_INT 4
71869: NEG
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 1
71877: PUSH
71878: LD_INT 3
71880: NEG
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 0
71888: PUSH
71889: LD_INT 3
71891: NEG
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 1
71899: NEG
71900: PUSH
71901: LD_INT 4
71903: NEG
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 1
71911: NEG
71912: PUSH
71913: LD_INT 5
71915: NEG
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 2
71923: PUSH
71924: LD_INT 3
71926: NEG
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 2
71934: NEG
71935: PUSH
71936: LD_INT 5
71938: NEG
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71991: LD_ADDR_VAR 0 31
71995: PUSH
71996: LD_INT 0
71998: PUSH
71999: LD_INT 4
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_INT 0
72008: PUSH
72009: LD_INT 3
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 1
72018: PUSH
72019: LD_INT 4
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: PUSH
72026: LD_INT 1
72028: PUSH
72029: LD_INT 5
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: PUSH
72036: LD_INT 0
72038: PUSH
72039: LD_INT 5
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: LD_INT 1
72048: NEG
72049: PUSH
72050: LD_INT 4
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: LD_INT 1
72059: NEG
72060: PUSH
72061: LD_INT 3
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PUSH
72068: LD_INT 2
72070: PUSH
72071: LD_INT 5
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PUSH
72078: LD_INT 2
72080: NEG
72081: PUSH
72082: LD_INT 3
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 3
72091: NEG
72092: PUSH
72093: LD_INT 0
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 3
72102: NEG
72103: PUSH
72104: LD_INT 1
72106: NEG
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 2
72114: NEG
72115: PUSH
72116: LD_INT 0
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 2
72125: NEG
72126: PUSH
72127: LD_INT 1
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 3
72136: NEG
72137: PUSH
72138: LD_INT 1
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: PUSH
72145: LD_INT 4
72147: NEG
72148: PUSH
72149: LD_INT 0
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 4
72158: NEG
72159: PUSH
72160: LD_INT 1
72162: NEG
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 4
72170: NEG
72171: PUSH
72172: LD_INT 2
72174: NEG
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 2
72182: NEG
72183: PUSH
72184: LD_INT 2
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_INT 4
72193: NEG
72194: PUSH
72195: LD_INT 4
72197: NEG
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 4
72205: NEG
72206: PUSH
72207: LD_INT 5
72209: NEG
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 3
72217: NEG
72218: PUSH
72219: LD_INT 4
72221: NEG
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 3
72229: NEG
72230: PUSH
72231: LD_INT 3
72233: NEG
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 4
72241: NEG
72242: PUSH
72243: LD_INT 3
72245: NEG
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 5
72253: NEG
72254: PUSH
72255: LD_INT 4
72257: NEG
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 5
72265: NEG
72266: PUSH
72267: LD_INT 5
72269: NEG
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 3
72277: NEG
72278: PUSH
72279: LD_INT 5
72281: NEG
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 5
72289: NEG
72290: PUSH
72291: LD_INT 3
72293: NEG
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 0
72301: PUSH
72302: LD_INT 3
72304: NEG
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 0
72312: PUSH
72313: LD_INT 4
72315: NEG
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_INT 1
72323: PUSH
72324: LD_INT 3
72326: NEG
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 1
72334: PUSH
72335: LD_INT 2
72337: NEG
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 0
72345: PUSH
72346: LD_INT 2
72348: NEG
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_INT 1
72356: NEG
72357: PUSH
72358: LD_INT 3
72360: NEG
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: LD_INT 1
72368: NEG
72369: PUSH
72370: LD_INT 4
72372: NEG
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 2
72380: PUSH
72381: LD_INT 2
72383: NEG
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: LD_INT 2
72391: NEG
72392: PUSH
72393: LD_INT 4
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 4
72403: PUSH
72404: LD_INT 0
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 4
72413: PUSH
72414: LD_INT 1
72416: NEG
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 5
72424: PUSH
72425: LD_INT 0
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 5
72434: PUSH
72435: LD_INT 1
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 4
72444: PUSH
72445: LD_INT 1
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 3
72454: PUSH
72455: LD_INT 0
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 3
72464: PUSH
72465: LD_INT 1
72467: NEG
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 3
72475: PUSH
72476: LD_INT 2
72478: NEG
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 5
72486: PUSH
72487: LD_INT 2
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72541: LD_ADDR_VAR 0 32
72545: PUSH
72546: LD_INT 4
72548: NEG
72549: PUSH
72550: LD_INT 0
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 4
72559: NEG
72560: PUSH
72561: LD_INT 1
72563: NEG
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 3
72571: NEG
72572: PUSH
72573: LD_INT 0
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: PUSH
72580: LD_INT 3
72582: NEG
72583: PUSH
72584: LD_INT 1
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 4
72593: NEG
72594: PUSH
72595: LD_INT 1
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: PUSH
72602: LD_INT 5
72604: NEG
72605: PUSH
72606: LD_INT 0
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 5
72615: NEG
72616: PUSH
72617: LD_INT 1
72619: NEG
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 5
72627: NEG
72628: PUSH
72629: LD_INT 2
72631: NEG
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PUSH
72637: LD_INT 3
72639: NEG
72640: PUSH
72641: LD_INT 2
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: LD_INT 3
72650: NEG
72651: PUSH
72652: LD_INT 3
72654: NEG
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 3
72662: NEG
72663: PUSH
72664: LD_INT 4
72666: NEG
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 2
72674: NEG
72675: PUSH
72676: LD_INT 3
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: LD_INT 2
72686: NEG
72687: PUSH
72688: LD_INT 2
72690: NEG
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 3
72698: NEG
72699: PUSH
72700: LD_INT 2
72702: NEG
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 4
72710: NEG
72711: PUSH
72712: LD_INT 3
72714: NEG
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: LD_INT 4
72722: NEG
72723: PUSH
72724: LD_INT 4
72726: NEG
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 2
72734: NEG
72735: PUSH
72736: LD_INT 4
72738: NEG
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 4
72746: NEG
72747: PUSH
72748: LD_INT 2
72750: NEG
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 0
72758: PUSH
72759: LD_INT 4
72761: NEG
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 0
72769: PUSH
72770: LD_INT 5
72772: NEG
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: LD_INT 1
72780: PUSH
72781: LD_INT 4
72783: NEG
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 1
72791: PUSH
72792: LD_INT 3
72794: NEG
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 0
72802: PUSH
72803: LD_INT 3
72805: NEG
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: LD_INT 1
72813: NEG
72814: PUSH
72815: LD_INT 4
72817: NEG
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 1
72825: NEG
72826: PUSH
72827: LD_INT 5
72829: NEG
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 2
72837: PUSH
72838: LD_INT 3
72840: NEG
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 2
72848: NEG
72849: PUSH
72850: LD_INT 5
72852: NEG
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 3
72860: PUSH
72861: LD_INT 0
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: PUSH
72868: LD_INT 3
72870: PUSH
72871: LD_INT 1
72873: NEG
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: PUSH
72879: LD_INT 4
72881: PUSH
72882: LD_INT 0
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 4
72891: PUSH
72892: LD_INT 1
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 3
72901: PUSH
72902: LD_INT 1
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: LD_INT 2
72911: PUSH
72912: LD_INT 0
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: LD_INT 2
72921: PUSH
72922: LD_INT 1
72924: NEG
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 2
72932: PUSH
72933: LD_INT 2
72935: NEG
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 4
72943: PUSH
72944: LD_INT 2
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 4
72953: PUSH
72954: LD_INT 4
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 4
72963: PUSH
72964: LD_INT 3
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 5
72973: PUSH
72974: LD_INT 4
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 5
72983: PUSH
72984: LD_INT 5
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: LD_INT 4
72993: PUSH
72994: LD_INT 5
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 3
73003: PUSH
73004: LD_INT 4
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: LD_INT 3
73013: PUSH
73014: LD_INT 3
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 5
73023: PUSH
73024: LD_INT 3
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 3
73033: PUSH
73034: LD_INT 5
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: LIST
73064: LIST
73065: LIST
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73088: LD_ADDR_VAR 0 33
73092: PUSH
73093: LD_INT 4
73095: NEG
73096: PUSH
73097: LD_INT 4
73099: NEG
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: LD_INT 4
73107: NEG
73108: PUSH
73109: LD_INT 5
73111: NEG
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 3
73119: NEG
73120: PUSH
73121: LD_INT 4
73123: NEG
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 3
73131: NEG
73132: PUSH
73133: LD_INT 3
73135: NEG
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: LD_INT 4
73143: NEG
73144: PUSH
73145: LD_INT 3
73147: NEG
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: LD_INT 5
73155: NEG
73156: PUSH
73157: LD_INT 4
73159: NEG
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: LD_INT 5
73167: NEG
73168: PUSH
73169: LD_INT 5
73171: NEG
73172: PUSH
73173: EMPTY
73174: LIST
73175: LIST
73176: PUSH
73177: LD_INT 3
73179: NEG
73180: PUSH
73181: LD_INT 5
73183: NEG
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: PUSH
73189: LD_INT 5
73191: NEG
73192: PUSH
73193: LD_INT 3
73195: NEG
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: LD_INT 0
73203: PUSH
73204: LD_INT 3
73206: NEG
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 0
73214: PUSH
73215: LD_INT 4
73217: NEG
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 1
73225: PUSH
73226: LD_INT 3
73228: NEG
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 1
73236: PUSH
73237: LD_INT 2
73239: NEG
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 0
73247: PUSH
73248: LD_INT 2
73250: NEG
73251: PUSH
73252: EMPTY
73253: LIST
73254: LIST
73255: PUSH
73256: LD_INT 1
73258: NEG
73259: PUSH
73260: LD_INT 3
73262: NEG
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: PUSH
73268: LD_INT 1
73270: NEG
73271: PUSH
73272: LD_INT 4
73274: NEG
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: LD_INT 2
73282: PUSH
73283: LD_INT 2
73285: NEG
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 2
73293: NEG
73294: PUSH
73295: LD_INT 4
73297: NEG
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: LD_INT 4
73305: PUSH
73306: LD_INT 0
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: LD_INT 4
73315: PUSH
73316: LD_INT 1
73318: NEG
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: PUSH
73324: LD_INT 5
73326: PUSH
73327: LD_INT 0
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: PUSH
73334: LD_INT 5
73336: PUSH
73337: LD_INT 1
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 4
73346: PUSH
73347: LD_INT 1
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 3
73356: PUSH
73357: LD_INT 0
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: LD_INT 3
73366: PUSH
73367: LD_INT 1
73369: NEG
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 3
73377: PUSH
73378: LD_INT 2
73380: NEG
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 5
73388: PUSH
73389: LD_INT 2
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 3
73398: PUSH
73399: LD_INT 3
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: LD_INT 3
73408: PUSH
73409: LD_INT 2
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 4
73418: PUSH
73419: LD_INT 3
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: PUSH
73426: LD_INT 4
73428: PUSH
73429: LD_INT 4
73431: PUSH
73432: EMPTY
73433: LIST
73434: LIST
73435: PUSH
73436: LD_INT 3
73438: PUSH
73439: LD_INT 4
73441: PUSH
73442: EMPTY
73443: LIST
73444: LIST
73445: PUSH
73446: LD_INT 2
73448: PUSH
73449: LD_INT 3
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: PUSH
73456: LD_INT 2
73458: PUSH
73459: LD_INT 2
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: LD_INT 4
73468: PUSH
73469: LD_INT 2
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PUSH
73476: LD_INT 2
73478: PUSH
73479: LD_INT 4
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: LD_INT 0
73488: PUSH
73489: LD_INT 4
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: LD_INT 0
73498: PUSH
73499: LD_INT 3
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: LD_INT 1
73508: PUSH
73509: LD_INT 4
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: LD_INT 1
73518: PUSH
73519: LD_INT 5
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: PUSH
73526: LD_INT 0
73528: PUSH
73529: LD_INT 5
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: PUSH
73536: LD_INT 1
73538: NEG
73539: PUSH
73540: LD_INT 4
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: LD_INT 1
73549: NEG
73550: PUSH
73551: LD_INT 3
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: PUSH
73558: LD_INT 2
73560: PUSH
73561: LD_INT 5
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 2
73570: NEG
73571: PUSH
73572: LD_INT 3
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: LIST
73606: LIST
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: LIST
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: LIST
73619: LIST
73620: LIST
73621: LIST
73622: LIST
73623: LIST
73624: LIST
73625: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73626: LD_ADDR_VAR 0 34
73630: PUSH
73631: LD_INT 0
73633: PUSH
73634: LD_INT 4
73636: NEG
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: LD_INT 0
73644: PUSH
73645: LD_INT 5
73647: NEG
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: PUSH
73653: LD_INT 1
73655: PUSH
73656: LD_INT 4
73658: NEG
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 1
73666: PUSH
73667: LD_INT 3
73669: NEG
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: PUSH
73675: LD_INT 0
73677: PUSH
73678: LD_INT 3
73680: NEG
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: LD_INT 1
73688: NEG
73689: PUSH
73690: LD_INT 4
73692: NEG
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 1
73700: NEG
73701: PUSH
73702: LD_INT 5
73704: NEG
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: PUSH
73710: LD_INT 2
73712: PUSH
73713: LD_INT 3
73715: NEG
73716: PUSH
73717: EMPTY
73718: LIST
73719: LIST
73720: PUSH
73721: LD_INT 2
73723: NEG
73724: PUSH
73725: LD_INT 5
73727: NEG
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: PUSH
73733: LD_INT 3
73735: PUSH
73736: LD_INT 0
73738: PUSH
73739: EMPTY
73740: LIST
73741: LIST
73742: PUSH
73743: LD_INT 3
73745: PUSH
73746: LD_INT 1
73748: NEG
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: PUSH
73754: LD_INT 4
73756: PUSH
73757: LD_INT 0
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PUSH
73764: LD_INT 4
73766: PUSH
73767: LD_INT 1
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: LD_INT 3
73776: PUSH
73777: LD_INT 1
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 2
73786: PUSH
73787: LD_INT 0
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: PUSH
73794: LD_INT 2
73796: PUSH
73797: LD_INT 1
73799: NEG
73800: PUSH
73801: EMPTY
73802: LIST
73803: LIST
73804: PUSH
73805: LD_INT 2
73807: PUSH
73808: LD_INT 2
73810: NEG
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: LD_INT 4
73818: PUSH
73819: LD_INT 2
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 4
73828: PUSH
73829: LD_INT 4
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: PUSH
73836: LD_INT 4
73838: PUSH
73839: LD_INT 3
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: PUSH
73846: LD_INT 5
73848: PUSH
73849: LD_INT 4
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: LD_INT 5
73858: PUSH
73859: LD_INT 5
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: LD_INT 4
73868: PUSH
73869: LD_INT 5
73871: PUSH
73872: EMPTY
73873: LIST
73874: LIST
73875: PUSH
73876: LD_INT 3
73878: PUSH
73879: LD_INT 4
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: PUSH
73886: LD_INT 3
73888: PUSH
73889: LD_INT 3
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PUSH
73896: LD_INT 5
73898: PUSH
73899: LD_INT 3
73901: PUSH
73902: EMPTY
73903: LIST
73904: LIST
73905: PUSH
73906: LD_INT 3
73908: PUSH
73909: LD_INT 5
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: PUSH
73916: LD_INT 0
73918: PUSH
73919: LD_INT 3
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: PUSH
73926: LD_INT 0
73928: PUSH
73929: LD_INT 2
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: PUSH
73936: LD_INT 1
73938: PUSH
73939: LD_INT 3
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: LD_INT 1
73948: PUSH
73949: LD_INT 4
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 0
73958: PUSH
73959: LD_INT 4
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 1
73968: NEG
73969: PUSH
73970: LD_INT 3
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: PUSH
73977: LD_INT 1
73979: NEG
73980: PUSH
73981: LD_INT 2
73983: PUSH
73984: EMPTY
73985: LIST
73986: LIST
73987: PUSH
73988: LD_INT 2
73990: PUSH
73991: LD_INT 4
73993: PUSH
73994: EMPTY
73995: LIST
73996: LIST
73997: PUSH
73998: LD_INT 2
74000: NEG
74001: PUSH
74002: LD_INT 2
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PUSH
74009: LD_INT 4
74011: NEG
74012: PUSH
74013: LD_INT 0
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 4
74022: NEG
74023: PUSH
74024: LD_INT 1
74026: NEG
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: PUSH
74032: LD_INT 3
74034: NEG
74035: PUSH
74036: LD_INT 0
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: PUSH
74043: LD_INT 3
74045: NEG
74046: PUSH
74047: LD_INT 1
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PUSH
74054: LD_INT 4
74056: NEG
74057: PUSH
74058: LD_INT 1
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 5
74067: NEG
74068: PUSH
74069: LD_INT 0
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: PUSH
74076: LD_INT 5
74078: NEG
74079: PUSH
74080: LD_INT 1
74082: NEG
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: LD_INT 5
74090: NEG
74091: PUSH
74092: LD_INT 2
74094: NEG
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 3
74102: NEG
74103: PUSH
74104: LD_INT 2
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: LIST
74156: LIST
74157: ST_TO_ADDR
// end ; end ;
74158: GO 74161
74160: POP
// case btype of b_depot , b_warehouse :
74161: LD_VAR 0 1
74165: PUSH
74166: LD_INT 0
74168: DOUBLE
74169: EQUAL
74170: IFTRUE 74180
74172: LD_INT 1
74174: DOUBLE
74175: EQUAL
74176: IFTRUE 74180
74178: GO 74381
74180: POP
// case nation of nation_american :
74181: LD_VAR 0 5
74185: PUSH
74186: LD_INT 1
74188: DOUBLE
74189: EQUAL
74190: IFTRUE 74194
74192: GO 74250
74194: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74195: LD_ADDR_VAR 0 9
74199: PUSH
74200: LD_VAR 0 11
74204: PUSH
74205: LD_VAR 0 12
74209: PUSH
74210: LD_VAR 0 13
74214: PUSH
74215: LD_VAR 0 14
74219: PUSH
74220: LD_VAR 0 15
74224: PUSH
74225: LD_VAR 0 16
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: PUSH
74238: LD_VAR 0 4
74242: PUSH
74243: LD_INT 1
74245: PLUS
74246: ARRAY
74247: ST_TO_ADDR
74248: GO 74379
74250: LD_INT 2
74252: DOUBLE
74253: EQUAL
74254: IFTRUE 74258
74256: GO 74314
74258: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74259: LD_ADDR_VAR 0 9
74263: PUSH
74264: LD_VAR 0 17
74268: PUSH
74269: LD_VAR 0 18
74273: PUSH
74274: LD_VAR 0 19
74278: PUSH
74279: LD_VAR 0 20
74283: PUSH
74284: LD_VAR 0 21
74288: PUSH
74289: LD_VAR 0 22
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: PUSH
74302: LD_VAR 0 4
74306: PUSH
74307: LD_INT 1
74309: PLUS
74310: ARRAY
74311: ST_TO_ADDR
74312: GO 74379
74314: LD_INT 3
74316: DOUBLE
74317: EQUAL
74318: IFTRUE 74322
74320: GO 74378
74322: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74323: LD_ADDR_VAR 0 9
74327: PUSH
74328: LD_VAR 0 23
74332: PUSH
74333: LD_VAR 0 24
74337: PUSH
74338: LD_VAR 0 25
74342: PUSH
74343: LD_VAR 0 26
74347: PUSH
74348: LD_VAR 0 27
74352: PUSH
74353: LD_VAR 0 28
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: PUSH
74366: LD_VAR 0 4
74370: PUSH
74371: LD_INT 1
74373: PLUS
74374: ARRAY
74375: ST_TO_ADDR
74376: GO 74379
74378: POP
74379: GO 74934
74381: LD_INT 2
74383: DOUBLE
74384: EQUAL
74385: IFTRUE 74395
74387: LD_INT 3
74389: DOUBLE
74390: EQUAL
74391: IFTRUE 74395
74393: GO 74451
74395: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74396: LD_ADDR_VAR 0 9
74400: PUSH
74401: LD_VAR 0 29
74405: PUSH
74406: LD_VAR 0 30
74410: PUSH
74411: LD_VAR 0 31
74415: PUSH
74416: LD_VAR 0 32
74420: PUSH
74421: LD_VAR 0 33
74425: PUSH
74426: LD_VAR 0 34
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: LIST
74435: LIST
74436: LIST
74437: LIST
74438: PUSH
74439: LD_VAR 0 4
74443: PUSH
74444: LD_INT 1
74446: PLUS
74447: ARRAY
74448: ST_TO_ADDR
74449: GO 74934
74451: LD_INT 16
74453: DOUBLE
74454: EQUAL
74455: IFTRUE 74513
74457: LD_INT 17
74459: DOUBLE
74460: EQUAL
74461: IFTRUE 74513
74463: LD_INT 18
74465: DOUBLE
74466: EQUAL
74467: IFTRUE 74513
74469: LD_INT 19
74471: DOUBLE
74472: EQUAL
74473: IFTRUE 74513
74475: LD_INT 22
74477: DOUBLE
74478: EQUAL
74479: IFTRUE 74513
74481: LD_INT 20
74483: DOUBLE
74484: EQUAL
74485: IFTRUE 74513
74487: LD_INT 21
74489: DOUBLE
74490: EQUAL
74491: IFTRUE 74513
74493: LD_INT 23
74495: DOUBLE
74496: EQUAL
74497: IFTRUE 74513
74499: LD_INT 24
74501: DOUBLE
74502: EQUAL
74503: IFTRUE 74513
74505: LD_INT 25
74507: DOUBLE
74508: EQUAL
74509: IFTRUE 74513
74511: GO 74569
74513: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74514: LD_ADDR_VAR 0 9
74518: PUSH
74519: LD_VAR 0 35
74523: PUSH
74524: LD_VAR 0 36
74528: PUSH
74529: LD_VAR 0 37
74533: PUSH
74534: LD_VAR 0 38
74538: PUSH
74539: LD_VAR 0 39
74543: PUSH
74544: LD_VAR 0 40
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: LIST
74553: LIST
74554: LIST
74555: LIST
74556: PUSH
74557: LD_VAR 0 4
74561: PUSH
74562: LD_INT 1
74564: PLUS
74565: ARRAY
74566: ST_TO_ADDR
74567: GO 74934
74569: LD_INT 6
74571: DOUBLE
74572: EQUAL
74573: IFTRUE 74625
74575: LD_INT 7
74577: DOUBLE
74578: EQUAL
74579: IFTRUE 74625
74581: LD_INT 8
74583: DOUBLE
74584: EQUAL
74585: IFTRUE 74625
74587: LD_INT 13
74589: DOUBLE
74590: EQUAL
74591: IFTRUE 74625
74593: LD_INT 12
74595: DOUBLE
74596: EQUAL
74597: IFTRUE 74625
74599: LD_INT 15
74601: DOUBLE
74602: EQUAL
74603: IFTRUE 74625
74605: LD_INT 11
74607: DOUBLE
74608: EQUAL
74609: IFTRUE 74625
74611: LD_INT 14
74613: DOUBLE
74614: EQUAL
74615: IFTRUE 74625
74617: LD_INT 10
74619: DOUBLE
74620: EQUAL
74621: IFTRUE 74625
74623: GO 74681
74625: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74626: LD_ADDR_VAR 0 9
74630: PUSH
74631: LD_VAR 0 41
74635: PUSH
74636: LD_VAR 0 42
74640: PUSH
74641: LD_VAR 0 43
74645: PUSH
74646: LD_VAR 0 44
74650: PUSH
74651: LD_VAR 0 45
74655: PUSH
74656: LD_VAR 0 46
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: PUSH
74669: LD_VAR 0 4
74673: PUSH
74674: LD_INT 1
74676: PLUS
74677: ARRAY
74678: ST_TO_ADDR
74679: GO 74934
74681: LD_INT 36
74683: DOUBLE
74684: EQUAL
74685: IFTRUE 74689
74687: GO 74745
74689: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74690: LD_ADDR_VAR 0 9
74694: PUSH
74695: LD_VAR 0 47
74699: PUSH
74700: LD_VAR 0 48
74704: PUSH
74705: LD_VAR 0 49
74709: PUSH
74710: LD_VAR 0 50
74714: PUSH
74715: LD_VAR 0 51
74719: PUSH
74720: LD_VAR 0 52
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: LIST
74729: LIST
74730: LIST
74731: LIST
74732: PUSH
74733: LD_VAR 0 4
74737: PUSH
74738: LD_INT 1
74740: PLUS
74741: ARRAY
74742: ST_TO_ADDR
74743: GO 74934
74745: LD_INT 4
74747: DOUBLE
74748: EQUAL
74749: IFTRUE 74771
74751: LD_INT 5
74753: DOUBLE
74754: EQUAL
74755: IFTRUE 74771
74757: LD_INT 34
74759: DOUBLE
74760: EQUAL
74761: IFTRUE 74771
74763: LD_INT 37
74765: DOUBLE
74766: EQUAL
74767: IFTRUE 74771
74769: GO 74827
74771: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74772: LD_ADDR_VAR 0 9
74776: PUSH
74777: LD_VAR 0 53
74781: PUSH
74782: LD_VAR 0 54
74786: PUSH
74787: LD_VAR 0 55
74791: PUSH
74792: LD_VAR 0 56
74796: PUSH
74797: LD_VAR 0 57
74801: PUSH
74802: LD_VAR 0 58
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: PUSH
74815: LD_VAR 0 4
74819: PUSH
74820: LD_INT 1
74822: PLUS
74823: ARRAY
74824: ST_TO_ADDR
74825: GO 74934
74827: LD_INT 31
74829: DOUBLE
74830: EQUAL
74831: IFTRUE 74877
74833: LD_INT 32
74835: DOUBLE
74836: EQUAL
74837: IFTRUE 74877
74839: LD_INT 33
74841: DOUBLE
74842: EQUAL
74843: IFTRUE 74877
74845: LD_INT 27
74847: DOUBLE
74848: EQUAL
74849: IFTRUE 74877
74851: LD_INT 26
74853: DOUBLE
74854: EQUAL
74855: IFTRUE 74877
74857: LD_INT 28
74859: DOUBLE
74860: EQUAL
74861: IFTRUE 74877
74863: LD_INT 29
74865: DOUBLE
74866: EQUAL
74867: IFTRUE 74877
74869: LD_INT 30
74871: DOUBLE
74872: EQUAL
74873: IFTRUE 74877
74875: GO 74933
74877: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74878: LD_ADDR_VAR 0 9
74882: PUSH
74883: LD_VAR 0 59
74887: PUSH
74888: LD_VAR 0 60
74892: PUSH
74893: LD_VAR 0 61
74897: PUSH
74898: LD_VAR 0 62
74902: PUSH
74903: LD_VAR 0 63
74907: PUSH
74908: LD_VAR 0 64
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: PUSH
74921: LD_VAR 0 4
74925: PUSH
74926: LD_INT 1
74928: PLUS
74929: ARRAY
74930: ST_TO_ADDR
74931: GO 74934
74933: POP
// temp_list2 = [ ] ;
74934: LD_ADDR_VAR 0 10
74938: PUSH
74939: EMPTY
74940: ST_TO_ADDR
// for i in temp_list do
74941: LD_ADDR_VAR 0 8
74945: PUSH
74946: LD_VAR 0 9
74950: PUSH
74951: FOR_IN
74952: IFFALSE 75004
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74954: LD_ADDR_VAR 0 10
74958: PUSH
74959: LD_VAR 0 10
74963: PUSH
74964: LD_VAR 0 8
74968: PUSH
74969: LD_INT 1
74971: ARRAY
74972: PUSH
74973: LD_VAR 0 2
74977: PLUS
74978: PUSH
74979: LD_VAR 0 8
74983: PUSH
74984: LD_INT 2
74986: ARRAY
74987: PUSH
74988: LD_VAR 0 3
74992: PLUS
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: PUSH
74998: EMPTY
74999: LIST
75000: ADD
75001: ST_TO_ADDR
75002: GO 74951
75004: POP
75005: POP
// result = temp_list2 ;
75006: LD_ADDR_VAR 0 7
75010: PUSH
75011: LD_VAR 0 10
75015: ST_TO_ADDR
// end ;
75016: LD_VAR 0 7
75020: RET
// export function EnemyInRange ( unit , dist ) ; begin
75021: LD_INT 0
75023: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75024: LD_ADDR_VAR 0 3
75028: PUSH
75029: LD_VAR 0 1
75033: PPUSH
75034: CALL_OW 255
75038: PPUSH
75039: LD_VAR 0 1
75043: PPUSH
75044: CALL_OW 250
75048: PPUSH
75049: LD_VAR 0 1
75053: PPUSH
75054: CALL_OW 251
75058: PPUSH
75059: LD_VAR 0 2
75063: PPUSH
75064: CALL 48394 0 4
75068: PUSH
75069: LD_INT 4
75071: ARRAY
75072: ST_TO_ADDR
// end ;
75073: LD_VAR 0 3
75077: RET
// export function PlayerSeeMe ( unit ) ; begin
75078: LD_INT 0
75080: PPUSH
// result := See ( your_side , unit ) ;
75081: LD_ADDR_VAR 0 2
75085: PUSH
75086: LD_OWVAR 2
75090: PPUSH
75091: LD_VAR 0 1
75095: PPUSH
75096: CALL_OW 292
75100: ST_TO_ADDR
// end ;
75101: LD_VAR 0 2
75105: RET
// export function ReverseDir ( unit ) ; begin
75106: LD_INT 0
75108: PPUSH
// if not unit then
75109: LD_VAR 0 1
75113: NOT
75114: IFFALSE 75118
// exit ;
75116: GO 75141
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75118: LD_ADDR_VAR 0 2
75122: PUSH
75123: LD_VAR 0 1
75127: PPUSH
75128: CALL_OW 254
75132: PUSH
75133: LD_INT 3
75135: PLUS
75136: PUSH
75137: LD_INT 6
75139: MOD
75140: ST_TO_ADDR
// end ;
75141: LD_VAR 0 2
75145: RET
// export function ReverseArray ( array ) ; var i ; begin
75146: LD_INT 0
75148: PPUSH
75149: PPUSH
// if not array then
75150: LD_VAR 0 1
75154: NOT
75155: IFFALSE 75159
// exit ;
75157: GO 75214
// result := [ ] ;
75159: LD_ADDR_VAR 0 2
75163: PUSH
75164: EMPTY
75165: ST_TO_ADDR
// for i := array downto 1 do
75166: LD_ADDR_VAR 0 3
75170: PUSH
75171: DOUBLE
75172: LD_VAR 0 1
75176: INC
75177: ST_TO_ADDR
75178: LD_INT 1
75180: PUSH
75181: FOR_DOWNTO
75182: IFFALSE 75212
// result := Join ( result , array [ i ] ) ;
75184: LD_ADDR_VAR 0 2
75188: PUSH
75189: LD_VAR 0 2
75193: PPUSH
75194: LD_VAR 0 1
75198: PUSH
75199: LD_VAR 0 3
75203: ARRAY
75204: PPUSH
75205: CALL 79870 0 2
75209: ST_TO_ADDR
75210: GO 75181
75212: POP
75213: POP
// end ;
75214: LD_VAR 0 2
75218: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75219: LD_INT 0
75221: PPUSH
75222: PPUSH
75223: PPUSH
75224: PPUSH
75225: PPUSH
75226: PPUSH
// if not unit or not hexes then
75227: LD_VAR 0 1
75231: NOT
75232: PUSH
75233: LD_VAR 0 2
75237: NOT
75238: OR
75239: IFFALSE 75243
// exit ;
75241: GO 75366
// dist := 9999 ;
75243: LD_ADDR_VAR 0 5
75247: PUSH
75248: LD_INT 9999
75250: ST_TO_ADDR
// for i = 1 to hexes do
75251: LD_ADDR_VAR 0 4
75255: PUSH
75256: DOUBLE
75257: LD_INT 1
75259: DEC
75260: ST_TO_ADDR
75261: LD_VAR 0 2
75265: PUSH
75266: FOR_TO
75267: IFFALSE 75354
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75269: LD_ADDR_VAR 0 6
75273: PUSH
75274: LD_VAR 0 1
75278: PPUSH
75279: LD_VAR 0 2
75283: PUSH
75284: LD_VAR 0 4
75288: ARRAY
75289: PUSH
75290: LD_INT 1
75292: ARRAY
75293: PPUSH
75294: LD_VAR 0 2
75298: PUSH
75299: LD_VAR 0 4
75303: ARRAY
75304: PUSH
75305: LD_INT 2
75307: ARRAY
75308: PPUSH
75309: CALL_OW 297
75313: ST_TO_ADDR
// if tdist < dist then
75314: LD_VAR 0 6
75318: PUSH
75319: LD_VAR 0 5
75323: LESS
75324: IFFALSE 75352
// begin hex := hexes [ i ] ;
75326: LD_ADDR_VAR 0 8
75330: PUSH
75331: LD_VAR 0 2
75335: PUSH
75336: LD_VAR 0 4
75340: ARRAY
75341: ST_TO_ADDR
// dist := tdist ;
75342: LD_ADDR_VAR 0 5
75346: PUSH
75347: LD_VAR 0 6
75351: ST_TO_ADDR
// end ; end ;
75352: GO 75266
75354: POP
75355: POP
// result := hex ;
75356: LD_ADDR_VAR 0 3
75360: PUSH
75361: LD_VAR 0 8
75365: ST_TO_ADDR
// end ;
75366: LD_VAR 0 3
75370: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75371: LD_INT 0
75373: PPUSH
75374: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75375: LD_VAR 0 1
75379: NOT
75380: PUSH
75381: LD_VAR 0 1
75385: PUSH
75386: LD_INT 21
75388: PUSH
75389: LD_INT 2
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: PUSH
75396: LD_INT 23
75398: PUSH
75399: LD_INT 2
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PUSH
75406: EMPTY
75407: LIST
75408: LIST
75409: PPUSH
75410: CALL_OW 69
75414: IN
75415: NOT
75416: OR
75417: IFFALSE 75421
// exit ;
75419: GO 75468
// for i = 1 to 3 do
75421: LD_ADDR_VAR 0 3
75425: PUSH
75426: DOUBLE
75427: LD_INT 1
75429: DEC
75430: ST_TO_ADDR
75431: LD_INT 3
75433: PUSH
75434: FOR_TO
75435: IFFALSE 75466
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75437: LD_VAR 0 1
75441: PPUSH
75442: CALL_OW 250
75446: PPUSH
75447: LD_VAR 0 1
75451: PPUSH
75452: CALL_OW 251
75456: PPUSH
75457: LD_INT 1
75459: PPUSH
75460: CALL_OW 453
75464: GO 75434
75466: POP
75467: POP
// end ;
75468: LD_VAR 0 2
75472: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75473: LD_INT 0
75475: PPUSH
75476: PPUSH
75477: PPUSH
75478: PPUSH
75479: PPUSH
75480: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
75481: LD_VAR 0 1
75485: NOT
75486: PUSH
75487: LD_VAR 0 2
75491: NOT
75492: OR
75493: PUSH
75494: LD_VAR 0 1
75498: PPUSH
75499: CALL_OW 314
75503: OR
75504: IFFALSE 75508
// exit ;
75506: GO 75975
// if GetLives ( i ) < 250 then
75508: LD_VAR 0 4
75512: PPUSH
75513: CALL_OW 256
75517: PUSH
75518: LD_INT 250
75520: LESS
75521: IFFALSE 75534
// begin ComAutodestruct ( i ) ;
75523: LD_VAR 0 4
75527: PPUSH
75528: CALL 75371 0 1
// exit ;
75532: GO 75975
// end ; x := GetX ( enemy_unit ) ;
75534: LD_ADDR_VAR 0 7
75538: PUSH
75539: LD_VAR 0 2
75543: PPUSH
75544: CALL_OW 250
75548: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75549: LD_ADDR_VAR 0 8
75553: PUSH
75554: LD_VAR 0 2
75558: PPUSH
75559: CALL_OW 251
75563: ST_TO_ADDR
// if not x or not y then
75564: LD_VAR 0 7
75568: NOT
75569: PUSH
75570: LD_VAR 0 8
75574: NOT
75575: OR
75576: IFFALSE 75580
// exit ;
75578: GO 75975
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75580: LD_ADDR_VAR 0 6
75584: PUSH
75585: LD_VAR 0 7
75589: PPUSH
75590: LD_INT 0
75592: PPUSH
75593: LD_INT 4
75595: PPUSH
75596: CALL_OW 272
75600: PUSH
75601: LD_VAR 0 8
75605: PPUSH
75606: LD_INT 0
75608: PPUSH
75609: LD_INT 4
75611: PPUSH
75612: CALL_OW 273
75616: PUSH
75617: EMPTY
75618: LIST
75619: LIST
75620: PUSH
75621: LD_VAR 0 7
75625: PPUSH
75626: LD_INT 1
75628: PPUSH
75629: LD_INT 4
75631: PPUSH
75632: CALL_OW 272
75636: PUSH
75637: LD_VAR 0 8
75641: PPUSH
75642: LD_INT 1
75644: PPUSH
75645: LD_INT 4
75647: PPUSH
75648: CALL_OW 273
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: PUSH
75657: LD_VAR 0 7
75661: PPUSH
75662: LD_INT 2
75664: PPUSH
75665: LD_INT 4
75667: PPUSH
75668: CALL_OW 272
75672: PUSH
75673: LD_VAR 0 8
75677: PPUSH
75678: LD_INT 2
75680: PPUSH
75681: LD_INT 4
75683: PPUSH
75684: CALL_OW 273
75688: PUSH
75689: EMPTY
75690: LIST
75691: LIST
75692: PUSH
75693: LD_VAR 0 7
75697: PPUSH
75698: LD_INT 3
75700: PPUSH
75701: LD_INT 4
75703: PPUSH
75704: CALL_OW 272
75708: PUSH
75709: LD_VAR 0 8
75713: PPUSH
75714: LD_INT 3
75716: PPUSH
75717: LD_INT 4
75719: PPUSH
75720: CALL_OW 273
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: PUSH
75729: LD_VAR 0 7
75733: PPUSH
75734: LD_INT 4
75736: PPUSH
75737: LD_INT 4
75739: PPUSH
75740: CALL_OW 272
75744: PUSH
75745: LD_VAR 0 8
75749: PPUSH
75750: LD_INT 4
75752: PPUSH
75753: LD_INT 4
75755: PPUSH
75756: CALL_OW 273
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: PUSH
75765: LD_VAR 0 7
75769: PPUSH
75770: LD_INT 5
75772: PPUSH
75773: LD_INT 4
75775: PPUSH
75776: CALL_OW 272
75780: PUSH
75781: LD_VAR 0 8
75785: PPUSH
75786: LD_INT 5
75788: PPUSH
75789: LD_INT 4
75791: PPUSH
75792: CALL_OW 273
75796: PUSH
75797: EMPTY
75798: LIST
75799: LIST
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: LIST
75805: LIST
75806: LIST
75807: LIST
75808: ST_TO_ADDR
// for i = tmp downto 1 do
75809: LD_ADDR_VAR 0 4
75813: PUSH
75814: DOUBLE
75815: LD_VAR 0 6
75819: INC
75820: ST_TO_ADDR
75821: LD_INT 1
75823: PUSH
75824: FOR_DOWNTO
75825: IFFALSE 75926
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75827: LD_VAR 0 6
75831: PUSH
75832: LD_VAR 0 4
75836: ARRAY
75837: PUSH
75838: LD_INT 1
75840: ARRAY
75841: PPUSH
75842: LD_VAR 0 6
75846: PUSH
75847: LD_VAR 0 4
75851: ARRAY
75852: PUSH
75853: LD_INT 2
75855: ARRAY
75856: PPUSH
75857: CALL_OW 488
75861: NOT
75862: PUSH
75863: LD_VAR 0 6
75867: PUSH
75868: LD_VAR 0 4
75872: ARRAY
75873: PUSH
75874: LD_INT 1
75876: ARRAY
75877: PPUSH
75878: LD_VAR 0 6
75882: PUSH
75883: LD_VAR 0 4
75887: ARRAY
75888: PUSH
75889: LD_INT 2
75891: ARRAY
75892: PPUSH
75893: CALL_OW 428
75897: PUSH
75898: LD_INT 0
75900: NONEQUAL
75901: OR
75902: IFFALSE 75924
// tmp := Delete ( tmp , i ) ;
75904: LD_ADDR_VAR 0 6
75908: PUSH
75909: LD_VAR 0 6
75913: PPUSH
75914: LD_VAR 0 4
75918: PPUSH
75919: CALL_OW 3
75923: ST_TO_ADDR
75924: GO 75824
75926: POP
75927: POP
// j := GetClosestHex ( unit , tmp ) ;
75928: LD_ADDR_VAR 0 5
75932: PUSH
75933: LD_VAR 0 1
75937: PPUSH
75938: LD_VAR 0 6
75942: PPUSH
75943: CALL 75219 0 2
75947: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75948: LD_VAR 0 1
75952: PPUSH
75953: LD_VAR 0 5
75957: PUSH
75958: LD_INT 1
75960: ARRAY
75961: PPUSH
75962: LD_VAR 0 5
75966: PUSH
75967: LD_INT 2
75969: ARRAY
75970: PPUSH
75971: CALL_OW 111
// end ;
75975: LD_VAR 0 3
75979: RET
// export function PrepareApemanSoldier ( ) ; begin
75980: LD_INT 0
75982: PPUSH
// uc_nation := 0 ;
75983: LD_ADDR_OWVAR 21
75987: PUSH
75988: LD_INT 0
75990: ST_TO_ADDR
// hc_sex := sex_male ;
75991: LD_ADDR_OWVAR 27
75995: PUSH
75996: LD_INT 1
75998: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75999: LD_ADDR_OWVAR 28
76003: PUSH
76004: LD_INT 15
76006: ST_TO_ADDR
// hc_gallery :=  ;
76007: LD_ADDR_OWVAR 33
76011: PUSH
76012: LD_STRING 
76014: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76015: LD_ADDR_OWVAR 31
76019: PUSH
76020: LD_INT 0
76022: PPUSH
76023: LD_INT 3
76025: PPUSH
76026: CALL_OW 12
76030: PUSH
76031: LD_INT 0
76033: PPUSH
76034: LD_INT 3
76036: PPUSH
76037: CALL_OW 12
76041: PUSH
76042: LD_INT 0
76044: PUSH
76045: LD_INT 0
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: ST_TO_ADDR
// end ;
76054: LD_VAR 0 1
76058: RET
// export function PrepareApemanEngineer ( ) ; begin
76059: LD_INT 0
76061: PPUSH
// uc_nation := 0 ;
76062: LD_ADDR_OWVAR 21
76066: PUSH
76067: LD_INT 0
76069: ST_TO_ADDR
// hc_sex := sex_male ;
76070: LD_ADDR_OWVAR 27
76074: PUSH
76075: LD_INT 1
76077: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76078: LD_ADDR_OWVAR 28
76082: PUSH
76083: LD_INT 16
76085: ST_TO_ADDR
// hc_gallery :=  ;
76086: LD_ADDR_OWVAR 33
76090: PUSH
76091: LD_STRING 
76093: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76094: LD_ADDR_OWVAR 31
76098: PUSH
76099: LD_INT 0
76101: PPUSH
76102: LD_INT 3
76104: PPUSH
76105: CALL_OW 12
76109: PUSH
76110: LD_INT 0
76112: PPUSH
76113: LD_INT 3
76115: PPUSH
76116: CALL_OW 12
76120: PUSH
76121: LD_INT 0
76123: PUSH
76124: LD_INT 0
76126: PUSH
76127: EMPTY
76128: LIST
76129: LIST
76130: LIST
76131: LIST
76132: ST_TO_ADDR
// end ;
76133: LD_VAR 0 1
76137: RET
// export function PrepareApeman ( agressivity ) ; begin
76138: LD_INT 0
76140: PPUSH
// uc_side := 0 ;
76141: LD_ADDR_OWVAR 20
76145: PUSH
76146: LD_INT 0
76148: ST_TO_ADDR
// uc_nation := 0 ;
76149: LD_ADDR_OWVAR 21
76153: PUSH
76154: LD_INT 0
76156: ST_TO_ADDR
// hc_sex := sex_male ;
76157: LD_ADDR_OWVAR 27
76161: PUSH
76162: LD_INT 1
76164: ST_TO_ADDR
// hc_class := class_apeman ;
76165: LD_ADDR_OWVAR 28
76169: PUSH
76170: LD_INT 12
76172: ST_TO_ADDR
// hc_gallery :=  ;
76173: LD_ADDR_OWVAR 33
76177: PUSH
76178: LD_STRING 
76180: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76181: LD_ADDR_OWVAR 35
76185: PUSH
76186: LD_VAR 0 1
76190: NEG
76191: PPUSH
76192: LD_VAR 0 1
76196: PPUSH
76197: CALL_OW 12
76201: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76202: LD_ADDR_OWVAR 31
76206: PUSH
76207: LD_INT 0
76209: PPUSH
76210: LD_INT 3
76212: PPUSH
76213: CALL_OW 12
76217: PUSH
76218: LD_INT 0
76220: PPUSH
76221: LD_INT 3
76223: PPUSH
76224: CALL_OW 12
76228: PUSH
76229: LD_INT 0
76231: PUSH
76232: LD_INT 0
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: ST_TO_ADDR
// end ;
76241: LD_VAR 0 2
76245: RET
// export function PrepareTiger ( agressivity ) ; begin
76246: LD_INT 0
76248: PPUSH
// uc_side := 0 ;
76249: LD_ADDR_OWVAR 20
76253: PUSH
76254: LD_INT 0
76256: ST_TO_ADDR
// uc_nation := 0 ;
76257: LD_ADDR_OWVAR 21
76261: PUSH
76262: LD_INT 0
76264: ST_TO_ADDR
// hc_class := class_tiger ;
76265: LD_ADDR_OWVAR 28
76269: PUSH
76270: LD_INT 14
76272: ST_TO_ADDR
// hc_gallery :=  ;
76273: LD_ADDR_OWVAR 33
76277: PUSH
76278: LD_STRING 
76280: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76281: LD_ADDR_OWVAR 35
76285: PUSH
76286: LD_VAR 0 1
76290: NEG
76291: PPUSH
76292: LD_VAR 0 1
76296: PPUSH
76297: CALL_OW 12
76301: ST_TO_ADDR
// end ;
76302: LD_VAR 0 2
76306: RET
// export function PrepareEnchidna ( ) ; begin
76307: LD_INT 0
76309: PPUSH
// uc_side := 0 ;
76310: LD_ADDR_OWVAR 20
76314: PUSH
76315: LD_INT 0
76317: ST_TO_ADDR
// uc_nation := 0 ;
76318: LD_ADDR_OWVAR 21
76322: PUSH
76323: LD_INT 0
76325: ST_TO_ADDR
// hc_class := class_baggie ;
76326: LD_ADDR_OWVAR 28
76330: PUSH
76331: LD_INT 13
76333: ST_TO_ADDR
// hc_gallery :=  ;
76334: LD_ADDR_OWVAR 33
76338: PUSH
76339: LD_STRING 
76341: ST_TO_ADDR
// end ;
76342: LD_VAR 0 1
76346: RET
// export function PrepareFrog ( ) ; begin
76347: LD_INT 0
76349: PPUSH
// uc_side := 0 ;
76350: LD_ADDR_OWVAR 20
76354: PUSH
76355: LD_INT 0
76357: ST_TO_ADDR
// uc_nation := 0 ;
76358: LD_ADDR_OWVAR 21
76362: PUSH
76363: LD_INT 0
76365: ST_TO_ADDR
// hc_class := class_frog ;
76366: LD_ADDR_OWVAR 28
76370: PUSH
76371: LD_INT 19
76373: ST_TO_ADDR
// hc_gallery :=  ;
76374: LD_ADDR_OWVAR 33
76378: PUSH
76379: LD_STRING 
76381: ST_TO_ADDR
// end ;
76382: LD_VAR 0 1
76386: RET
// export function PrepareFish ( ) ; begin
76387: LD_INT 0
76389: PPUSH
// uc_side := 0 ;
76390: LD_ADDR_OWVAR 20
76394: PUSH
76395: LD_INT 0
76397: ST_TO_ADDR
// uc_nation := 0 ;
76398: LD_ADDR_OWVAR 21
76402: PUSH
76403: LD_INT 0
76405: ST_TO_ADDR
// hc_class := class_fish ;
76406: LD_ADDR_OWVAR 28
76410: PUSH
76411: LD_INT 20
76413: ST_TO_ADDR
// hc_gallery :=  ;
76414: LD_ADDR_OWVAR 33
76418: PUSH
76419: LD_STRING 
76421: ST_TO_ADDR
// end ;
76422: LD_VAR 0 1
76426: RET
// export function PrepareBird ( ) ; begin
76427: LD_INT 0
76429: PPUSH
// uc_side := 0 ;
76430: LD_ADDR_OWVAR 20
76434: PUSH
76435: LD_INT 0
76437: ST_TO_ADDR
// uc_nation := 0 ;
76438: LD_ADDR_OWVAR 21
76442: PUSH
76443: LD_INT 0
76445: ST_TO_ADDR
// hc_class := class_phororhacos ;
76446: LD_ADDR_OWVAR 28
76450: PUSH
76451: LD_INT 18
76453: ST_TO_ADDR
// hc_gallery :=  ;
76454: LD_ADDR_OWVAR 33
76458: PUSH
76459: LD_STRING 
76461: ST_TO_ADDR
// end ;
76462: LD_VAR 0 1
76466: RET
// export function PrepareHorse ( ) ; begin
76467: LD_INT 0
76469: PPUSH
// uc_side := 0 ;
76470: LD_ADDR_OWVAR 20
76474: PUSH
76475: LD_INT 0
76477: ST_TO_ADDR
// uc_nation := 0 ;
76478: LD_ADDR_OWVAR 21
76482: PUSH
76483: LD_INT 0
76485: ST_TO_ADDR
// hc_class := class_horse ;
76486: LD_ADDR_OWVAR 28
76490: PUSH
76491: LD_INT 21
76493: ST_TO_ADDR
// hc_gallery :=  ;
76494: LD_ADDR_OWVAR 33
76498: PUSH
76499: LD_STRING 
76501: ST_TO_ADDR
// end ;
76502: LD_VAR 0 1
76506: RET
// export function PrepareMastodont ( ) ; begin
76507: LD_INT 0
76509: PPUSH
// uc_side := 0 ;
76510: LD_ADDR_OWVAR 20
76514: PUSH
76515: LD_INT 0
76517: ST_TO_ADDR
// uc_nation := 0 ;
76518: LD_ADDR_OWVAR 21
76522: PUSH
76523: LD_INT 0
76525: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76526: LD_ADDR_OWVAR 37
76530: PUSH
76531: LD_INT 31
76533: ST_TO_ADDR
// vc_control := control_rider ;
76534: LD_ADDR_OWVAR 38
76538: PUSH
76539: LD_INT 4
76541: ST_TO_ADDR
// end ;
76542: LD_VAR 0 1
76546: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76547: LD_INT 0
76549: PPUSH
76550: PPUSH
76551: PPUSH
// uc_side = 0 ;
76552: LD_ADDR_OWVAR 20
76556: PUSH
76557: LD_INT 0
76559: ST_TO_ADDR
// uc_nation = 0 ;
76560: LD_ADDR_OWVAR 21
76564: PUSH
76565: LD_INT 0
76567: ST_TO_ADDR
// InitHc_All ( ) ;
76568: CALL_OW 584
// InitVc ;
76572: CALL_OW 20
// if mastodonts then
76576: LD_VAR 0 6
76580: IFFALSE 76647
// for i = 1 to mastodonts do
76582: LD_ADDR_VAR 0 11
76586: PUSH
76587: DOUBLE
76588: LD_INT 1
76590: DEC
76591: ST_TO_ADDR
76592: LD_VAR 0 6
76596: PUSH
76597: FOR_TO
76598: IFFALSE 76645
// begin vc_chassis := 31 ;
76600: LD_ADDR_OWVAR 37
76604: PUSH
76605: LD_INT 31
76607: ST_TO_ADDR
// vc_control := control_rider ;
76608: LD_ADDR_OWVAR 38
76612: PUSH
76613: LD_INT 4
76615: ST_TO_ADDR
// animal := CreateVehicle ;
76616: LD_ADDR_VAR 0 12
76620: PUSH
76621: CALL_OW 45
76625: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76626: LD_VAR 0 12
76630: PPUSH
76631: LD_VAR 0 8
76635: PPUSH
76636: LD_INT 0
76638: PPUSH
76639: CALL 78775 0 3
// end ;
76643: GO 76597
76645: POP
76646: POP
// if horses then
76647: LD_VAR 0 5
76651: IFFALSE 76718
// for i = 1 to horses do
76653: LD_ADDR_VAR 0 11
76657: PUSH
76658: DOUBLE
76659: LD_INT 1
76661: DEC
76662: ST_TO_ADDR
76663: LD_VAR 0 5
76667: PUSH
76668: FOR_TO
76669: IFFALSE 76716
// begin hc_class := 21 ;
76671: LD_ADDR_OWVAR 28
76675: PUSH
76676: LD_INT 21
76678: ST_TO_ADDR
// hc_gallery :=  ;
76679: LD_ADDR_OWVAR 33
76683: PUSH
76684: LD_STRING 
76686: ST_TO_ADDR
// animal := CreateHuman ;
76687: LD_ADDR_VAR 0 12
76691: PUSH
76692: CALL_OW 44
76696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76697: LD_VAR 0 12
76701: PPUSH
76702: LD_VAR 0 8
76706: PPUSH
76707: LD_INT 0
76709: PPUSH
76710: CALL 78775 0 3
// end ;
76714: GO 76668
76716: POP
76717: POP
// if birds then
76718: LD_VAR 0 1
76722: IFFALSE 76789
// for i = 1 to birds do
76724: LD_ADDR_VAR 0 11
76728: PUSH
76729: DOUBLE
76730: LD_INT 1
76732: DEC
76733: ST_TO_ADDR
76734: LD_VAR 0 1
76738: PUSH
76739: FOR_TO
76740: IFFALSE 76787
// begin hc_class := 18 ;
76742: LD_ADDR_OWVAR 28
76746: PUSH
76747: LD_INT 18
76749: ST_TO_ADDR
// hc_gallery =  ;
76750: LD_ADDR_OWVAR 33
76754: PUSH
76755: LD_STRING 
76757: ST_TO_ADDR
// animal := CreateHuman ;
76758: LD_ADDR_VAR 0 12
76762: PUSH
76763: CALL_OW 44
76767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76768: LD_VAR 0 12
76772: PPUSH
76773: LD_VAR 0 8
76777: PPUSH
76778: LD_INT 0
76780: PPUSH
76781: CALL 78775 0 3
// end ;
76785: GO 76739
76787: POP
76788: POP
// if tigers then
76789: LD_VAR 0 2
76793: IFFALSE 76877
// for i = 1 to tigers do
76795: LD_ADDR_VAR 0 11
76799: PUSH
76800: DOUBLE
76801: LD_INT 1
76803: DEC
76804: ST_TO_ADDR
76805: LD_VAR 0 2
76809: PUSH
76810: FOR_TO
76811: IFFALSE 76875
// begin hc_class = class_tiger ;
76813: LD_ADDR_OWVAR 28
76817: PUSH
76818: LD_INT 14
76820: ST_TO_ADDR
// hc_gallery =  ;
76821: LD_ADDR_OWVAR 33
76825: PUSH
76826: LD_STRING 
76828: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76829: LD_ADDR_OWVAR 35
76833: PUSH
76834: LD_INT 7
76836: NEG
76837: PPUSH
76838: LD_INT 7
76840: PPUSH
76841: CALL_OW 12
76845: ST_TO_ADDR
// animal := CreateHuman ;
76846: LD_ADDR_VAR 0 12
76850: PUSH
76851: CALL_OW 44
76855: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76856: LD_VAR 0 12
76860: PPUSH
76861: LD_VAR 0 8
76865: PPUSH
76866: LD_INT 0
76868: PPUSH
76869: CALL 78775 0 3
// end ;
76873: GO 76810
76875: POP
76876: POP
// if apemans then
76877: LD_VAR 0 3
76881: IFFALSE 77004
// for i = 1 to apemans do
76883: LD_ADDR_VAR 0 11
76887: PUSH
76888: DOUBLE
76889: LD_INT 1
76891: DEC
76892: ST_TO_ADDR
76893: LD_VAR 0 3
76897: PUSH
76898: FOR_TO
76899: IFFALSE 77002
// begin hc_class = class_apeman ;
76901: LD_ADDR_OWVAR 28
76905: PUSH
76906: LD_INT 12
76908: ST_TO_ADDR
// hc_gallery =  ;
76909: LD_ADDR_OWVAR 33
76913: PUSH
76914: LD_STRING 
76916: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76917: LD_ADDR_OWVAR 35
76921: PUSH
76922: LD_INT 2
76924: NEG
76925: PPUSH
76926: LD_INT 2
76928: PPUSH
76929: CALL_OW 12
76933: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76934: LD_ADDR_OWVAR 31
76938: PUSH
76939: LD_INT 1
76941: PPUSH
76942: LD_INT 3
76944: PPUSH
76945: CALL_OW 12
76949: PUSH
76950: LD_INT 1
76952: PPUSH
76953: LD_INT 3
76955: PPUSH
76956: CALL_OW 12
76960: PUSH
76961: LD_INT 0
76963: PUSH
76964: LD_INT 0
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: LIST
76971: LIST
76972: ST_TO_ADDR
// animal := CreateHuman ;
76973: LD_ADDR_VAR 0 12
76977: PUSH
76978: CALL_OW 44
76982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76983: LD_VAR 0 12
76987: PPUSH
76988: LD_VAR 0 8
76992: PPUSH
76993: LD_INT 0
76995: PPUSH
76996: CALL 78775 0 3
// end ;
77000: GO 76898
77002: POP
77003: POP
// if enchidnas then
77004: LD_VAR 0 4
77008: IFFALSE 77075
// for i = 1 to enchidnas do
77010: LD_ADDR_VAR 0 11
77014: PUSH
77015: DOUBLE
77016: LD_INT 1
77018: DEC
77019: ST_TO_ADDR
77020: LD_VAR 0 4
77024: PUSH
77025: FOR_TO
77026: IFFALSE 77073
// begin hc_class = 13 ;
77028: LD_ADDR_OWVAR 28
77032: PUSH
77033: LD_INT 13
77035: ST_TO_ADDR
// hc_gallery =  ;
77036: LD_ADDR_OWVAR 33
77040: PUSH
77041: LD_STRING 
77043: ST_TO_ADDR
// animal := CreateHuman ;
77044: LD_ADDR_VAR 0 12
77048: PUSH
77049: CALL_OW 44
77053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77054: LD_VAR 0 12
77058: PPUSH
77059: LD_VAR 0 8
77063: PPUSH
77064: LD_INT 0
77066: PPUSH
77067: CALL 78775 0 3
// end ;
77071: GO 77025
77073: POP
77074: POP
// if fishes then
77075: LD_VAR 0 7
77079: IFFALSE 77146
// for i = 1 to fishes do
77081: LD_ADDR_VAR 0 11
77085: PUSH
77086: DOUBLE
77087: LD_INT 1
77089: DEC
77090: ST_TO_ADDR
77091: LD_VAR 0 7
77095: PUSH
77096: FOR_TO
77097: IFFALSE 77144
// begin hc_class = 20 ;
77099: LD_ADDR_OWVAR 28
77103: PUSH
77104: LD_INT 20
77106: ST_TO_ADDR
// hc_gallery =  ;
77107: LD_ADDR_OWVAR 33
77111: PUSH
77112: LD_STRING 
77114: ST_TO_ADDR
// animal := CreateHuman ;
77115: LD_ADDR_VAR 0 12
77119: PUSH
77120: CALL_OW 44
77124: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77125: LD_VAR 0 12
77129: PPUSH
77130: LD_VAR 0 9
77134: PPUSH
77135: LD_INT 0
77137: PPUSH
77138: CALL 78775 0 3
// end ;
77142: GO 77096
77144: POP
77145: POP
// end ;
77146: LD_VAR 0 10
77150: RET
// export function WantHeal ( sci , unit ) ; begin
77151: LD_INT 0
77153: PPUSH
// if GetTaskList ( sci ) > 0 then
77154: LD_VAR 0 1
77158: PPUSH
77159: CALL_OW 437
77163: PUSH
77164: LD_INT 0
77166: GREATER
77167: IFFALSE 77237
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77169: LD_VAR 0 1
77173: PPUSH
77174: CALL_OW 437
77178: PUSH
77179: LD_INT 1
77181: ARRAY
77182: PUSH
77183: LD_INT 1
77185: ARRAY
77186: PUSH
77187: LD_STRING l
77189: EQUAL
77190: PUSH
77191: LD_VAR 0 1
77195: PPUSH
77196: CALL_OW 437
77200: PUSH
77201: LD_INT 1
77203: ARRAY
77204: PUSH
77205: LD_INT 4
77207: ARRAY
77208: PUSH
77209: LD_VAR 0 2
77213: EQUAL
77214: AND
77215: IFFALSE 77227
// result := true else
77217: LD_ADDR_VAR 0 3
77221: PUSH
77222: LD_INT 1
77224: ST_TO_ADDR
77225: GO 77235
// result := false ;
77227: LD_ADDR_VAR 0 3
77231: PUSH
77232: LD_INT 0
77234: ST_TO_ADDR
// end else
77235: GO 77245
// result := false ;
77237: LD_ADDR_VAR 0 3
77241: PUSH
77242: LD_INT 0
77244: ST_TO_ADDR
// end ;
77245: LD_VAR 0 3
77249: RET
// export function HealTarget ( sci ) ; begin
77250: LD_INT 0
77252: PPUSH
// if not sci then
77253: LD_VAR 0 1
77257: NOT
77258: IFFALSE 77262
// exit ;
77260: GO 77327
// result := 0 ;
77262: LD_ADDR_VAR 0 2
77266: PUSH
77267: LD_INT 0
77269: ST_TO_ADDR
// if GetTaskList ( sci ) then
77270: LD_VAR 0 1
77274: PPUSH
77275: CALL_OW 437
77279: IFFALSE 77327
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77281: LD_VAR 0 1
77285: PPUSH
77286: CALL_OW 437
77290: PUSH
77291: LD_INT 1
77293: ARRAY
77294: PUSH
77295: LD_INT 1
77297: ARRAY
77298: PUSH
77299: LD_STRING l
77301: EQUAL
77302: IFFALSE 77327
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77304: LD_ADDR_VAR 0 2
77308: PUSH
77309: LD_VAR 0 1
77313: PPUSH
77314: CALL_OW 437
77318: PUSH
77319: LD_INT 1
77321: ARRAY
77322: PUSH
77323: LD_INT 4
77325: ARRAY
77326: ST_TO_ADDR
// end ;
77327: LD_VAR 0 2
77331: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77332: LD_INT 0
77334: PPUSH
77335: PPUSH
77336: PPUSH
77337: PPUSH
// if not base_units then
77338: LD_VAR 0 1
77342: NOT
77343: IFFALSE 77347
// exit ;
77345: GO 77434
// result := false ;
77347: LD_ADDR_VAR 0 2
77351: PUSH
77352: LD_INT 0
77354: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77355: LD_ADDR_VAR 0 5
77359: PUSH
77360: LD_VAR 0 1
77364: PPUSH
77365: LD_INT 21
77367: PUSH
77368: LD_INT 3
77370: PUSH
77371: EMPTY
77372: LIST
77373: LIST
77374: PPUSH
77375: CALL_OW 72
77379: ST_TO_ADDR
// if not tmp then
77380: LD_VAR 0 5
77384: NOT
77385: IFFALSE 77389
// exit ;
77387: GO 77434
// for i in tmp do
77389: LD_ADDR_VAR 0 3
77393: PUSH
77394: LD_VAR 0 5
77398: PUSH
77399: FOR_IN
77400: IFFALSE 77432
// begin result := EnemyInRange ( i , 22 ) ;
77402: LD_ADDR_VAR 0 2
77406: PUSH
77407: LD_VAR 0 3
77411: PPUSH
77412: LD_INT 22
77414: PPUSH
77415: CALL 75021 0 2
77419: ST_TO_ADDR
// if result then
77420: LD_VAR 0 2
77424: IFFALSE 77430
// exit ;
77426: POP
77427: POP
77428: GO 77434
// end ;
77430: GO 77399
77432: POP
77433: POP
// end ;
77434: LD_VAR 0 2
77438: RET
// export function FilterByTag ( units , tag ) ; begin
77439: LD_INT 0
77441: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77442: LD_ADDR_VAR 0 3
77446: PUSH
77447: LD_VAR 0 1
77451: PPUSH
77452: LD_INT 120
77454: PUSH
77455: LD_VAR 0 2
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: PPUSH
77464: CALL_OW 72
77468: ST_TO_ADDR
// end ;
77469: LD_VAR 0 3
77473: RET
// export function IsDriver ( un ) ; begin
77474: LD_INT 0
77476: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77477: LD_ADDR_VAR 0 2
77481: PUSH
77482: LD_VAR 0 1
77486: PUSH
77487: LD_INT 55
77489: PUSH
77490: EMPTY
77491: LIST
77492: PPUSH
77493: CALL_OW 69
77497: IN
77498: ST_TO_ADDR
// end ;
77499: LD_VAR 0 2
77503: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77504: LD_INT 0
77506: PPUSH
77507: PPUSH
// list := [ ] ;
77508: LD_ADDR_VAR 0 5
77512: PUSH
77513: EMPTY
77514: ST_TO_ADDR
// case d of 0 :
77515: LD_VAR 0 3
77519: PUSH
77520: LD_INT 0
77522: DOUBLE
77523: EQUAL
77524: IFTRUE 77528
77526: GO 77661
77528: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77529: LD_ADDR_VAR 0 5
77533: PUSH
77534: LD_VAR 0 1
77538: PUSH
77539: LD_INT 4
77541: MINUS
77542: PUSH
77543: LD_VAR 0 2
77547: PUSH
77548: LD_INT 4
77550: MINUS
77551: PUSH
77552: LD_INT 2
77554: PUSH
77555: EMPTY
77556: LIST
77557: LIST
77558: LIST
77559: PUSH
77560: LD_VAR 0 1
77564: PUSH
77565: LD_INT 3
77567: MINUS
77568: PUSH
77569: LD_VAR 0 2
77573: PUSH
77574: LD_INT 1
77576: PUSH
77577: EMPTY
77578: LIST
77579: LIST
77580: LIST
77581: PUSH
77582: LD_VAR 0 1
77586: PUSH
77587: LD_INT 4
77589: PLUS
77590: PUSH
77591: LD_VAR 0 2
77595: PUSH
77596: LD_INT 4
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: LIST
77603: PUSH
77604: LD_VAR 0 1
77608: PUSH
77609: LD_INT 3
77611: PLUS
77612: PUSH
77613: LD_VAR 0 2
77617: PUSH
77618: LD_INT 3
77620: PLUS
77621: PUSH
77622: LD_INT 5
77624: PUSH
77625: EMPTY
77626: LIST
77627: LIST
77628: LIST
77629: PUSH
77630: LD_VAR 0 1
77634: PUSH
77635: LD_VAR 0 2
77639: PUSH
77640: LD_INT 4
77642: PLUS
77643: PUSH
77644: LD_INT 0
77646: PUSH
77647: EMPTY
77648: LIST
77649: LIST
77650: LIST
77651: PUSH
77652: EMPTY
77653: LIST
77654: LIST
77655: LIST
77656: LIST
77657: LIST
77658: ST_TO_ADDR
// end ; 1 :
77659: GO 78359
77661: LD_INT 1
77663: DOUBLE
77664: EQUAL
77665: IFTRUE 77669
77667: GO 77802
77669: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77670: LD_ADDR_VAR 0 5
77674: PUSH
77675: LD_VAR 0 1
77679: PUSH
77680: LD_VAR 0 2
77684: PUSH
77685: LD_INT 4
77687: MINUS
77688: PUSH
77689: LD_INT 3
77691: PUSH
77692: EMPTY
77693: LIST
77694: LIST
77695: LIST
77696: PUSH
77697: LD_VAR 0 1
77701: PUSH
77702: LD_INT 3
77704: MINUS
77705: PUSH
77706: LD_VAR 0 2
77710: PUSH
77711: LD_INT 3
77713: MINUS
77714: PUSH
77715: LD_INT 2
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: LIST
77722: PUSH
77723: LD_VAR 0 1
77727: PUSH
77728: LD_INT 4
77730: MINUS
77731: PUSH
77732: LD_VAR 0 2
77736: PUSH
77737: LD_INT 1
77739: PUSH
77740: EMPTY
77741: LIST
77742: LIST
77743: LIST
77744: PUSH
77745: LD_VAR 0 1
77749: PUSH
77750: LD_VAR 0 2
77754: PUSH
77755: LD_INT 3
77757: PLUS
77758: PUSH
77759: LD_INT 0
77761: PUSH
77762: EMPTY
77763: LIST
77764: LIST
77765: LIST
77766: PUSH
77767: LD_VAR 0 1
77771: PUSH
77772: LD_INT 4
77774: PLUS
77775: PUSH
77776: LD_VAR 0 2
77780: PUSH
77781: LD_INT 4
77783: PLUS
77784: PUSH
77785: LD_INT 5
77787: PUSH
77788: EMPTY
77789: LIST
77790: LIST
77791: LIST
77792: PUSH
77793: EMPTY
77794: LIST
77795: LIST
77796: LIST
77797: LIST
77798: LIST
77799: ST_TO_ADDR
// end ; 2 :
77800: GO 78359
77802: LD_INT 2
77804: DOUBLE
77805: EQUAL
77806: IFTRUE 77810
77808: GO 77939
77810: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77811: LD_ADDR_VAR 0 5
77815: PUSH
77816: LD_VAR 0 1
77820: PUSH
77821: LD_VAR 0 2
77825: PUSH
77826: LD_INT 3
77828: MINUS
77829: PUSH
77830: LD_INT 3
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: LIST
77837: PUSH
77838: LD_VAR 0 1
77842: PUSH
77843: LD_INT 4
77845: PLUS
77846: PUSH
77847: LD_VAR 0 2
77851: PUSH
77852: LD_INT 4
77854: PUSH
77855: EMPTY
77856: LIST
77857: LIST
77858: LIST
77859: PUSH
77860: LD_VAR 0 1
77864: PUSH
77865: LD_VAR 0 2
77869: PUSH
77870: LD_INT 4
77872: PLUS
77873: PUSH
77874: LD_INT 0
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: LIST
77881: PUSH
77882: LD_VAR 0 1
77886: PUSH
77887: LD_INT 3
77889: MINUS
77890: PUSH
77891: LD_VAR 0 2
77895: PUSH
77896: LD_INT 1
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: LIST
77903: PUSH
77904: LD_VAR 0 1
77908: PUSH
77909: LD_INT 4
77911: MINUS
77912: PUSH
77913: LD_VAR 0 2
77917: PUSH
77918: LD_INT 4
77920: MINUS
77921: PUSH
77922: LD_INT 2
77924: PUSH
77925: EMPTY
77926: LIST
77927: LIST
77928: LIST
77929: PUSH
77930: EMPTY
77931: LIST
77932: LIST
77933: LIST
77934: LIST
77935: LIST
77936: ST_TO_ADDR
// end ; 3 :
77937: GO 78359
77939: LD_INT 3
77941: DOUBLE
77942: EQUAL
77943: IFTRUE 77947
77945: GO 78080
77947: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77948: LD_ADDR_VAR 0 5
77952: PUSH
77953: LD_VAR 0 1
77957: PUSH
77958: LD_INT 3
77960: PLUS
77961: PUSH
77962: LD_VAR 0 2
77966: PUSH
77967: LD_INT 4
77969: PUSH
77970: EMPTY
77971: LIST
77972: LIST
77973: LIST
77974: PUSH
77975: LD_VAR 0 1
77979: PUSH
77980: LD_INT 4
77982: PLUS
77983: PUSH
77984: LD_VAR 0 2
77988: PUSH
77989: LD_INT 4
77991: PLUS
77992: PUSH
77993: LD_INT 5
77995: PUSH
77996: EMPTY
77997: LIST
77998: LIST
77999: LIST
78000: PUSH
78001: LD_VAR 0 1
78005: PUSH
78006: LD_INT 4
78008: MINUS
78009: PUSH
78010: LD_VAR 0 2
78014: PUSH
78015: LD_INT 1
78017: PUSH
78018: EMPTY
78019: LIST
78020: LIST
78021: LIST
78022: PUSH
78023: LD_VAR 0 1
78027: PUSH
78028: LD_VAR 0 2
78032: PUSH
78033: LD_INT 4
78035: MINUS
78036: PUSH
78037: LD_INT 3
78039: PUSH
78040: EMPTY
78041: LIST
78042: LIST
78043: LIST
78044: PUSH
78045: LD_VAR 0 1
78049: PUSH
78050: LD_INT 3
78052: MINUS
78053: PUSH
78054: LD_VAR 0 2
78058: PUSH
78059: LD_INT 3
78061: MINUS
78062: PUSH
78063: LD_INT 2
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: LIST
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: LIST
78075: LIST
78076: LIST
78077: ST_TO_ADDR
// end ; 4 :
78078: GO 78359
78080: LD_INT 4
78082: DOUBLE
78083: EQUAL
78084: IFTRUE 78088
78086: GO 78221
78088: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78089: LD_ADDR_VAR 0 5
78093: PUSH
78094: LD_VAR 0 1
78098: PUSH
78099: LD_VAR 0 2
78103: PUSH
78104: LD_INT 4
78106: PLUS
78107: PUSH
78108: LD_INT 0
78110: PUSH
78111: EMPTY
78112: LIST
78113: LIST
78114: LIST
78115: PUSH
78116: LD_VAR 0 1
78120: PUSH
78121: LD_INT 3
78123: PLUS
78124: PUSH
78125: LD_VAR 0 2
78129: PUSH
78130: LD_INT 3
78132: PLUS
78133: PUSH
78134: LD_INT 5
78136: PUSH
78137: EMPTY
78138: LIST
78139: LIST
78140: LIST
78141: PUSH
78142: LD_VAR 0 1
78146: PUSH
78147: LD_INT 4
78149: PLUS
78150: PUSH
78151: LD_VAR 0 2
78155: PUSH
78156: LD_INT 4
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: LIST
78163: PUSH
78164: LD_VAR 0 1
78168: PUSH
78169: LD_VAR 0 2
78173: PUSH
78174: LD_INT 3
78176: MINUS
78177: PUSH
78178: LD_INT 3
78180: PUSH
78181: EMPTY
78182: LIST
78183: LIST
78184: LIST
78185: PUSH
78186: LD_VAR 0 1
78190: PUSH
78191: LD_INT 4
78193: MINUS
78194: PUSH
78195: LD_VAR 0 2
78199: PUSH
78200: LD_INT 4
78202: MINUS
78203: PUSH
78204: LD_INT 2
78206: PUSH
78207: EMPTY
78208: LIST
78209: LIST
78210: LIST
78211: PUSH
78212: EMPTY
78213: LIST
78214: LIST
78215: LIST
78216: LIST
78217: LIST
78218: ST_TO_ADDR
// end ; 5 :
78219: GO 78359
78221: LD_INT 5
78223: DOUBLE
78224: EQUAL
78225: IFTRUE 78229
78227: GO 78358
78229: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78230: LD_ADDR_VAR 0 5
78234: PUSH
78235: LD_VAR 0 1
78239: PUSH
78240: LD_INT 4
78242: MINUS
78243: PUSH
78244: LD_VAR 0 2
78248: PUSH
78249: LD_INT 1
78251: PUSH
78252: EMPTY
78253: LIST
78254: LIST
78255: LIST
78256: PUSH
78257: LD_VAR 0 1
78261: PUSH
78262: LD_VAR 0 2
78266: PUSH
78267: LD_INT 4
78269: MINUS
78270: PUSH
78271: LD_INT 3
78273: PUSH
78274: EMPTY
78275: LIST
78276: LIST
78277: LIST
78278: PUSH
78279: LD_VAR 0 1
78283: PUSH
78284: LD_INT 4
78286: PLUS
78287: PUSH
78288: LD_VAR 0 2
78292: PUSH
78293: LD_INT 4
78295: PLUS
78296: PUSH
78297: LD_INT 5
78299: PUSH
78300: EMPTY
78301: LIST
78302: LIST
78303: LIST
78304: PUSH
78305: LD_VAR 0 1
78309: PUSH
78310: LD_INT 3
78312: PLUS
78313: PUSH
78314: LD_VAR 0 2
78318: PUSH
78319: LD_INT 4
78321: PUSH
78322: EMPTY
78323: LIST
78324: LIST
78325: LIST
78326: PUSH
78327: LD_VAR 0 1
78331: PUSH
78332: LD_VAR 0 2
78336: PUSH
78337: LD_INT 3
78339: PLUS
78340: PUSH
78341: LD_INT 0
78343: PUSH
78344: EMPTY
78345: LIST
78346: LIST
78347: LIST
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: LIST
78353: LIST
78354: LIST
78355: ST_TO_ADDR
// end ; end ;
78356: GO 78359
78358: POP
// result := list ;
78359: LD_ADDR_VAR 0 4
78363: PUSH
78364: LD_VAR 0 5
78368: ST_TO_ADDR
// end ;
78369: LD_VAR 0 4
78373: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78374: LD_INT 0
78376: PPUSH
78377: PPUSH
78378: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78379: LD_VAR 0 1
78383: NOT
78384: PUSH
78385: LD_VAR 0 2
78389: PUSH
78390: LD_INT 1
78392: PUSH
78393: LD_INT 2
78395: PUSH
78396: LD_INT 3
78398: PUSH
78399: LD_INT 4
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: LIST
78406: LIST
78407: IN
78408: NOT
78409: OR
78410: IFFALSE 78414
// exit ;
78412: GO 78497
// tmp := [ ] ;
78414: LD_ADDR_VAR 0 5
78418: PUSH
78419: EMPTY
78420: ST_TO_ADDR
// for i in units do
78421: LD_ADDR_VAR 0 4
78425: PUSH
78426: LD_VAR 0 1
78430: PUSH
78431: FOR_IN
78432: IFFALSE 78466
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78434: LD_ADDR_VAR 0 5
78438: PUSH
78439: LD_VAR 0 5
78443: PPUSH
78444: LD_VAR 0 4
78448: PPUSH
78449: LD_VAR 0 2
78453: PPUSH
78454: CALL_OW 259
78458: PPUSH
78459: CALL 79870 0 2
78463: ST_TO_ADDR
78464: GO 78431
78466: POP
78467: POP
// if not tmp then
78468: LD_VAR 0 5
78472: NOT
78473: IFFALSE 78477
// exit ;
78475: GO 78497
// result := SortListByListDesc ( units , tmp ) ;
78477: LD_ADDR_VAR 0 3
78481: PUSH
78482: LD_VAR 0 1
78486: PPUSH
78487: LD_VAR 0 5
78491: PPUSH
78492: CALL_OW 77
78496: ST_TO_ADDR
// end ;
78497: LD_VAR 0 3
78501: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78502: LD_INT 0
78504: PPUSH
78505: PPUSH
78506: PPUSH
// result := false ;
78507: LD_ADDR_VAR 0 3
78511: PUSH
78512: LD_INT 0
78514: ST_TO_ADDR
// if not building then
78515: LD_VAR 0 2
78519: NOT
78520: IFFALSE 78524
// exit ;
78522: GO 78662
// x := GetX ( building ) ;
78524: LD_ADDR_VAR 0 4
78528: PUSH
78529: LD_VAR 0 2
78533: PPUSH
78534: CALL_OW 250
78538: ST_TO_ADDR
// y := GetY ( building ) ;
78539: LD_ADDR_VAR 0 5
78543: PUSH
78544: LD_VAR 0 2
78548: PPUSH
78549: CALL_OW 251
78553: ST_TO_ADDR
// if not x or not y then
78554: LD_VAR 0 4
78558: NOT
78559: PUSH
78560: LD_VAR 0 5
78564: NOT
78565: OR
78566: IFFALSE 78570
// exit ;
78568: GO 78662
// if GetTaskList ( unit ) then
78570: LD_VAR 0 1
78574: PPUSH
78575: CALL_OW 437
78579: IFFALSE 78662
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78581: LD_STRING e
78583: PUSH
78584: LD_VAR 0 1
78588: PPUSH
78589: CALL_OW 437
78593: PUSH
78594: LD_INT 1
78596: ARRAY
78597: PUSH
78598: LD_INT 1
78600: ARRAY
78601: EQUAL
78602: PUSH
78603: LD_VAR 0 4
78607: PUSH
78608: LD_VAR 0 1
78612: PPUSH
78613: CALL_OW 437
78617: PUSH
78618: LD_INT 1
78620: ARRAY
78621: PUSH
78622: LD_INT 2
78624: ARRAY
78625: EQUAL
78626: AND
78627: PUSH
78628: LD_VAR 0 5
78632: PUSH
78633: LD_VAR 0 1
78637: PPUSH
78638: CALL_OW 437
78642: PUSH
78643: LD_INT 1
78645: ARRAY
78646: PUSH
78647: LD_INT 3
78649: ARRAY
78650: EQUAL
78651: AND
78652: IFFALSE 78662
// result := true end ;
78654: LD_ADDR_VAR 0 3
78658: PUSH
78659: LD_INT 1
78661: ST_TO_ADDR
// end ;
78662: LD_VAR 0 3
78666: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78667: LD_INT 0
78669: PPUSH
// result := false ;
78670: LD_ADDR_VAR 0 4
78674: PUSH
78675: LD_INT 0
78677: ST_TO_ADDR
// if GetTaskList ( unit ) then
78678: LD_VAR 0 1
78682: PPUSH
78683: CALL_OW 437
78687: IFFALSE 78770
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78689: LD_STRING M
78691: PUSH
78692: LD_VAR 0 1
78696: PPUSH
78697: CALL_OW 437
78701: PUSH
78702: LD_INT 1
78704: ARRAY
78705: PUSH
78706: LD_INT 1
78708: ARRAY
78709: EQUAL
78710: PUSH
78711: LD_VAR 0 2
78715: PUSH
78716: LD_VAR 0 1
78720: PPUSH
78721: CALL_OW 437
78725: PUSH
78726: LD_INT 1
78728: ARRAY
78729: PUSH
78730: LD_INT 2
78732: ARRAY
78733: EQUAL
78734: AND
78735: PUSH
78736: LD_VAR 0 3
78740: PUSH
78741: LD_VAR 0 1
78745: PPUSH
78746: CALL_OW 437
78750: PUSH
78751: LD_INT 1
78753: ARRAY
78754: PUSH
78755: LD_INT 3
78757: ARRAY
78758: EQUAL
78759: AND
78760: IFFALSE 78770
// result := true ;
78762: LD_ADDR_VAR 0 4
78766: PUSH
78767: LD_INT 1
78769: ST_TO_ADDR
// end ; end ;
78770: LD_VAR 0 4
78774: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78775: LD_INT 0
78777: PPUSH
78778: PPUSH
78779: PPUSH
78780: PPUSH
// if not unit or not area then
78781: LD_VAR 0 1
78785: NOT
78786: PUSH
78787: LD_VAR 0 2
78791: NOT
78792: OR
78793: IFFALSE 78797
// exit ;
78795: GO 78973
// tmp := AreaToList ( area , i ) ;
78797: LD_ADDR_VAR 0 6
78801: PUSH
78802: LD_VAR 0 2
78806: PPUSH
78807: LD_VAR 0 5
78811: PPUSH
78812: CALL_OW 517
78816: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78817: LD_ADDR_VAR 0 5
78821: PUSH
78822: DOUBLE
78823: LD_INT 1
78825: DEC
78826: ST_TO_ADDR
78827: LD_VAR 0 6
78831: PUSH
78832: LD_INT 1
78834: ARRAY
78835: PUSH
78836: FOR_TO
78837: IFFALSE 78971
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78839: LD_ADDR_VAR 0 7
78843: PUSH
78844: LD_VAR 0 6
78848: PUSH
78849: LD_INT 1
78851: ARRAY
78852: PUSH
78853: LD_VAR 0 5
78857: ARRAY
78858: PUSH
78859: LD_VAR 0 6
78863: PUSH
78864: LD_INT 2
78866: ARRAY
78867: PUSH
78868: LD_VAR 0 5
78872: ARRAY
78873: PUSH
78874: EMPTY
78875: LIST
78876: LIST
78877: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78878: LD_INT 92
78880: PUSH
78881: LD_VAR 0 7
78885: PUSH
78886: LD_INT 1
78888: ARRAY
78889: PUSH
78890: LD_VAR 0 7
78894: PUSH
78895: LD_INT 2
78897: ARRAY
78898: PUSH
78899: LD_INT 2
78901: PUSH
78902: EMPTY
78903: LIST
78904: LIST
78905: LIST
78906: LIST
78907: PPUSH
78908: CALL_OW 69
78912: PUSH
78913: LD_INT 0
78915: EQUAL
78916: IFFALSE 78969
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78918: LD_VAR 0 1
78922: PPUSH
78923: LD_VAR 0 7
78927: PUSH
78928: LD_INT 1
78930: ARRAY
78931: PPUSH
78932: LD_VAR 0 7
78936: PUSH
78937: LD_INT 2
78939: ARRAY
78940: PPUSH
78941: LD_VAR 0 3
78945: PPUSH
78946: CALL_OW 48
// result := IsPlaced ( unit ) ;
78950: LD_ADDR_VAR 0 4
78954: PUSH
78955: LD_VAR 0 1
78959: PPUSH
78960: CALL_OW 305
78964: ST_TO_ADDR
// exit ;
78965: POP
78966: POP
78967: GO 78973
// end ; end ;
78969: GO 78836
78971: POP
78972: POP
// end ;
78973: LD_VAR 0 4
78977: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78978: LD_INT 0
78980: PPUSH
78981: PPUSH
78982: PPUSH
// if not side or side > 8 then
78983: LD_VAR 0 1
78987: NOT
78988: PUSH
78989: LD_VAR 0 1
78993: PUSH
78994: LD_INT 8
78996: GREATER
78997: OR
78998: IFFALSE 79002
// exit ;
79000: GO 79189
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79002: LD_ADDR_VAR 0 4
79006: PUSH
79007: LD_INT 22
79009: PUSH
79010: LD_VAR 0 1
79014: PUSH
79015: EMPTY
79016: LIST
79017: LIST
79018: PUSH
79019: LD_INT 21
79021: PUSH
79022: LD_INT 3
79024: PUSH
79025: EMPTY
79026: LIST
79027: LIST
79028: PUSH
79029: EMPTY
79030: LIST
79031: LIST
79032: PPUSH
79033: CALL_OW 69
79037: ST_TO_ADDR
// if not tmp then
79038: LD_VAR 0 4
79042: NOT
79043: IFFALSE 79047
// exit ;
79045: GO 79189
// enable_addtolog := true ;
79047: LD_ADDR_OWVAR 81
79051: PUSH
79052: LD_INT 1
79054: ST_TO_ADDR
// AddToLog ( [ ) ;
79055: LD_STRING [
79057: PPUSH
79058: CALL_OW 561
// for i in tmp do
79062: LD_ADDR_VAR 0 3
79066: PUSH
79067: LD_VAR 0 4
79071: PUSH
79072: FOR_IN
79073: IFFALSE 79180
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79075: LD_STRING [
79077: PUSH
79078: LD_VAR 0 3
79082: PPUSH
79083: CALL_OW 266
79087: STR
79088: PUSH
79089: LD_STRING , 
79091: STR
79092: PUSH
79093: LD_VAR 0 3
79097: PPUSH
79098: CALL_OW 250
79102: STR
79103: PUSH
79104: LD_STRING , 
79106: STR
79107: PUSH
79108: LD_VAR 0 3
79112: PPUSH
79113: CALL_OW 251
79117: STR
79118: PUSH
79119: LD_STRING , 
79121: STR
79122: PUSH
79123: LD_VAR 0 3
79127: PPUSH
79128: CALL_OW 254
79132: STR
79133: PUSH
79134: LD_STRING , 
79136: STR
79137: PUSH
79138: LD_VAR 0 3
79142: PPUSH
79143: LD_INT 1
79145: PPUSH
79146: CALL_OW 268
79150: STR
79151: PUSH
79152: LD_STRING , 
79154: STR
79155: PUSH
79156: LD_VAR 0 3
79160: PPUSH
79161: LD_INT 2
79163: PPUSH
79164: CALL_OW 268
79168: STR
79169: PUSH
79170: LD_STRING ],
79172: STR
79173: PPUSH
79174: CALL_OW 561
// end ;
79178: GO 79072
79180: POP
79181: POP
// AddToLog ( ]; ) ;
79182: LD_STRING ];
79184: PPUSH
79185: CALL_OW 561
// end ;
79189: LD_VAR 0 2
79193: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79194: LD_INT 0
79196: PPUSH
79197: PPUSH
79198: PPUSH
79199: PPUSH
79200: PPUSH
// if not area or not rate or not max then
79201: LD_VAR 0 1
79205: NOT
79206: PUSH
79207: LD_VAR 0 2
79211: NOT
79212: OR
79213: PUSH
79214: LD_VAR 0 4
79218: NOT
79219: OR
79220: IFFALSE 79224
// exit ;
79222: GO 79413
// while 1 do
79224: LD_INT 1
79226: IFFALSE 79413
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79228: LD_ADDR_VAR 0 9
79232: PUSH
79233: LD_VAR 0 1
79237: PPUSH
79238: LD_INT 1
79240: PPUSH
79241: CALL_OW 287
79245: PUSH
79246: LD_INT 10
79248: MUL
79249: ST_TO_ADDR
// r := rate / 10 ;
79250: LD_ADDR_VAR 0 7
79254: PUSH
79255: LD_VAR 0 2
79259: PUSH
79260: LD_INT 10
79262: DIVREAL
79263: ST_TO_ADDR
// time := 1 1$00 ;
79264: LD_ADDR_VAR 0 8
79268: PUSH
79269: LD_INT 2100
79271: ST_TO_ADDR
// if amount < min then
79272: LD_VAR 0 9
79276: PUSH
79277: LD_VAR 0 3
79281: LESS
79282: IFFALSE 79300
// r := r * 2 else
79284: LD_ADDR_VAR 0 7
79288: PUSH
79289: LD_VAR 0 7
79293: PUSH
79294: LD_INT 2
79296: MUL
79297: ST_TO_ADDR
79298: GO 79326
// if amount > max then
79300: LD_VAR 0 9
79304: PUSH
79305: LD_VAR 0 4
79309: GREATER
79310: IFFALSE 79326
// r := r / 2 ;
79312: LD_ADDR_VAR 0 7
79316: PUSH
79317: LD_VAR 0 7
79321: PUSH
79322: LD_INT 2
79324: DIVREAL
79325: ST_TO_ADDR
// time := time / r ;
79326: LD_ADDR_VAR 0 8
79330: PUSH
79331: LD_VAR 0 8
79335: PUSH
79336: LD_VAR 0 7
79340: DIVREAL
79341: ST_TO_ADDR
// if time < 0 then
79342: LD_VAR 0 8
79346: PUSH
79347: LD_INT 0
79349: LESS
79350: IFFALSE 79367
// time := time * - 1 ;
79352: LD_ADDR_VAR 0 8
79356: PUSH
79357: LD_VAR 0 8
79361: PUSH
79362: LD_INT 1
79364: NEG
79365: MUL
79366: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79367: LD_VAR 0 8
79371: PUSH
79372: LD_INT 35
79374: PPUSH
79375: LD_INT 875
79377: PPUSH
79378: CALL_OW 12
79382: PLUS
79383: PPUSH
79384: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79388: LD_INT 1
79390: PPUSH
79391: LD_INT 5
79393: PPUSH
79394: CALL_OW 12
79398: PPUSH
79399: LD_VAR 0 1
79403: PPUSH
79404: LD_INT 1
79406: PPUSH
79407: CALL_OW 55
// end ;
79411: GO 79224
// end ;
79413: LD_VAR 0 5
79417: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79418: LD_INT 0
79420: PPUSH
79421: PPUSH
79422: PPUSH
79423: PPUSH
79424: PPUSH
79425: PPUSH
79426: PPUSH
79427: PPUSH
// if not turrets or not factories then
79428: LD_VAR 0 1
79432: NOT
79433: PUSH
79434: LD_VAR 0 2
79438: NOT
79439: OR
79440: IFFALSE 79444
// exit ;
79442: GO 79751
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79444: LD_ADDR_VAR 0 10
79448: PUSH
79449: LD_INT 5
79451: PUSH
79452: LD_INT 6
79454: PUSH
79455: EMPTY
79456: LIST
79457: LIST
79458: PUSH
79459: LD_INT 2
79461: PUSH
79462: LD_INT 4
79464: PUSH
79465: EMPTY
79466: LIST
79467: LIST
79468: PUSH
79469: LD_INT 3
79471: PUSH
79472: LD_INT 5
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: LIST
79483: PUSH
79484: LD_INT 24
79486: PUSH
79487: LD_INT 25
79489: PUSH
79490: EMPTY
79491: LIST
79492: LIST
79493: PUSH
79494: LD_INT 23
79496: PUSH
79497: LD_INT 27
79499: PUSH
79500: EMPTY
79501: LIST
79502: LIST
79503: PUSH
79504: EMPTY
79505: LIST
79506: LIST
79507: PUSH
79508: LD_INT 42
79510: PUSH
79511: LD_INT 43
79513: PUSH
79514: EMPTY
79515: LIST
79516: LIST
79517: PUSH
79518: LD_INT 44
79520: PUSH
79521: LD_INT 46
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: PUSH
79528: LD_INT 45
79530: PUSH
79531: LD_INT 47
79533: PUSH
79534: EMPTY
79535: LIST
79536: LIST
79537: PUSH
79538: EMPTY
79539: LIST
79540: LIST
79541: LIST
79542: PUSH
79543: EMPTY
79544: LIST
79545: LIST
79546: LIST
79547: ST_TO_ADDR
// result := [ ] ;
79548: LD_ADDR_VAR 0 3
79552: PUSH
79553: EMPTY
79554: ST_TO_ADDR
// for i in turrets do
79555: LD_ADDR_VAR 0 4
79559: PUSH
79560: LD_VAR 0 1
79564: PUSH
79565: FOR_IN
79566: IFFALSE 79749
// begin nat := GetNation ( i ) ;
79568: LD_ADDR_VAR 0 7
79572: PUSH
79573: LD_VAR 0 4
79577: PPUSH
79578: CALL_OW 248
79582: ST_TO_ADDR
// weapon := 0 ;
79583: LD_ADDR_VAR 0 8
79587: PUSH
79588: LD_INT 0
79590: ST_TO_ADDR
// if not nat then
79591: LD_VAR 0 7
79595: NOT
79596: IFFALSE 79600
// continue ;
79598: GO 79565
// for j in list [ nat ] do
79600: LD_ADDR_VAR 0 5
79604: PUSH
79605: LD_VAR 0 10
79609: PUSH
79610: LD_VAR 0 7
79614: ARRAY
79615: PUSH
79616: FOR_IN
79617: IFFALSE 79658
// if GetBWeapon ( i ) = j [ 1 ] then
79619: LD_VAR 0 4
79623: PPUSH
79624: CALL_OW 269
79628: PUSH
79629: LD_VAR 0 5
79633: PUSH
79634: LD_INT 1
79636: ARRAY
79637: EQUAL
79638: IFFALSE 79656
// begin weapon := j [ 2 ] ;
79640: LD_ADDR_VAR 0 8
79644: PUSH
79645: LD_VAR 0 5
79649: PUSH
79650: LD_INT 2
79652: ARRAY
79653: ST_TO_ADDR
// break ;
79654: GO 79658
// end ;
79656: GO 79616
79658: POP
79659: POP
// if not weapon then
79660: LD_VAR 0 8
79664: NOT
79665: IFFALSE 79669
// continue ;
79667: GO 79565
// for k in factories do
79669: LD_ADDR_VAR 0 6
79673: PUSH
79674: LD_VAR 0 2
79678: PUSH
79679: FOR_IN
79680: IFFALSE 79745
// begin weapons := AvailableWeaponList ( k ) ;
79682: LD_ADDR_VAR 0 9
79686: PUSH
79687: LD_VAR 0 6
79691: PPUSH
79692: CALL_OW 478
79696: ST_TO_ADDR
// if not weapons then
79697: LD_VAR 0 9
79701: NOT
79702: IFFALSE 79706
// continue ;
79704: GO 79679
// if weapon in weapons then
79706: LD_VAR 0 8
79710: PUSH
79711: LD_VAR 0 9
79715: IN
79716: IFFALSE 79743
// begin result := [ i , weapon ] ;
79718: LD_ADDR_VAR 0 3
79722: PUSH
79723: LD_VAR 0 4
79727: PUSH
79728: LD_VAR 0 8
79732: PUSH
79733: EMPTY
79734: LIST
79735: LIST
79736: ST_TO_ADDR
// exit ;
79737: POP
79738: POP
79739: POP
79740: POP
79741: GO 79751
// end ; end ;
79743: GO 79679
79745: POP
79746: POP
// end ;
79747: GO 79565
79749: POP
79750: POP
// end ;
79751: LD_VAR 0 3
79755: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79756: LD_INT 0
79758: PPUSH
// if not side or side > 8 then
79759: LD_VAR 0 3
79763: NOT
79764: PUSH
79765: LD_VAR 0 3
79769: PUSH
79770: LD_INT 8
79772: GREATER
79773: OR
79774: IFFALSE 79778
// exit ;
79776: GO 79837
// if not range then
79778: LD_VAR 0 4
79782: NOT
79783: IFFALSE 79794
// range := - 12 ;
79785: LD_ADDR_VAR 0 4
79789: PUSH
79790: LD_INT 12
79792: NEG
79793: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79794: LD_VAR 0 1
79798: PPUSH
79799: LD_VAR 0 2
79803: PPUSH
79804: LD_VAR 0 3
79808: PPUSH
79809: LD_VAR 0 4
79813: PPUSH
79814: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79818: LD_VAR 0 1
79822: PPUSH
79823: LD_VAR 0 2
79827: PPUSH
79828: LD_VAR 0 3
79832: PPUSH
79833: CALL_OW 331
// end ;
79837: LD_VAR 0 5
79841: RET
// export function Video ( mode ) ; begin
79842: LD_INT 0
79844: PPUSH
// ingame_video = mode ;
79845: LD_ADDR_OWVAR 52
79849: PUSH
79850: LD_VAR 0 1
79854: ST_TO_ADDR
// interface_hidden = mode ;
79855: LD_ADDR_OWVAR 54
79859: PUSH
79860: LD_VAR 0 1
79864: ST_TO_ADDR
// end ;
79865: LD_VAR 0 2
79869: RET
// export function Join ( array , element ) ; begin
79870: LD_INT 0
79872: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79873: LD_ADDR_VAR 0 3
79877: PUSH
79878: LD_VAR 0 1
79882: PPUSH
79883: LD_VAR 0 1
79887: PUSH
79888: LD_INT 1
79890: PLUS
79891: PPUSH
79892: LD_VAR 0 2
79896: PPUSH
79897: CALL_OW 1
79901: ST_TO_ADDR
// end ;
79902: LD_VAR 0 3
79906: RET
// export function JoinUnion ( array , element ) ; begin
79907: LD_INT 0
79909: PPUSH
// result := array union element ;
79910: LD_ADDR_VAR 0 3
79914: PUSH
79915: LD_VAR 0 1
79919: PUSH
79920: LD_VAR 0 2
79924: UNION
79925: ST_TO_ADDR
// end ;
79926: LD_VAR 0 3
79930: RET
// export function GetBehemoths ( side ) ; begin
79931: LD_INT 0
79933: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79934: LD_ADDR_VAR 0 2
79938: PUSH
79939: LD_INT 22
79941: PUSH
79942: LD_VAR 0 1
79946: PUSH
79947: EMPTY
79948: LIST
79949: LIST
79950: PUSH
79951: LD_INT 31
79953: PUSH
79954: LD_INT 25
79956: PUSH
79957: EMPTY
79958: LIST
79959: LIST
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PPUSH
79965: CALL_OW 69
79969: ST_TO_ADDR
// end ;
79970: LD_VAR 0 2
79974: RET
// export function Shuffle ( array ) ; var i , index ; begin
79975: LD_INT 0
79977: PPUSH
79978: PPUSH
79979: PPUSH
// result := [ ] ;
79980: LD_ADDR_VAR 0 2
79984: PUSH
79985: EMPTY
79986: ST_TO_ADDR
// if not array then
79987: LD_VAR 0 1
79991: NOT
79992: IFFALSE 79996
// exit ;
79994: GO 80095
// Randomize ;
79996: CALL_OW 10
// for i = array downto 1 do
80000: LD_ADDR_VAR 0 3
80004: PUSH
80005: DOUBLE
80006: LD_VAR 0 1
80010: INC
80011: ST_TO_ADDR
80012: LD_INT 1
80014: PUSH
80015: FOR_DOWNTO
80016: IFFALSE 80093
// begin index := rand ( 1 , array ) ;
80018: LD_ADDR_VAR 0 4
80022: PUSH
80023: LD_INT 1
80025: PPUSH
80026: LD_VAR 0 1
80030: PPUSH
80031: CALL_OW 12
80035: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80036: LD_ADDR_VAR 0 2
80040: PUSH
80041: LD_VAR 0 2
80045: PPUSH
80046: LD_VAR 0 2
80050: PUSH
80051: LD_INT 1
80053: PLUS
80054: PPUSH
80055: LD_VAR 0 1
80059: PUSH
80060: LD_VAR 0 4
80064: ARRAY
80065: PPUSH
80066: CALL_OW 2
80070: ST_TO_ADDR
// array := Delete ( array , index ) ;
80071: LD_ADDR_VAR 0 1
80075: PUSH
80076: LD_VAR 0 1
80080: PPUSH
80081: LD_VAR 0 4
80085: PPUSH
80086: CALL_OW 3
80090: ST_TO_ADDR
// end ;
80091: GO 80015
80093: POP
80094: POP
// end ;
80095: LD_VAR 0 2
80099: RET
// export function GetBaseMaterials ( base ) ; begin
80100: LD_INT 0
80102: PPUSH
// result := [ 0 , 0 , 0 ] ;
80103: LD_ADDR_VAR 0 2
80107: PUSH
80108: LD_INT 0
80110: PUSH
80111: LD_INT 0
80113: PUSH
80114: LD_INT 0
80116: PUSH
80117: EMPTY
80118: LIST
80119: LIST
80120: LIST
80121: ST_TO_ADDR
// if not base then
80122: LD_VAR 0 1
80126: NOT
80127: IFFALSE 80131
// exit ;
80129: GO 80180
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80131: LD_ADDR_VAR 0 2
80135: PUSH
80136: LD_VAR 0 1
80140: PPUSH
80141: LD_INT 1
80143: PPUSH
80144: CALL_OW 275
80148: PUSH
80149: LD_VAR 0 1
80153: PPUSH
80154: LD_INT 2
80156: PPUSH
80157: CALL_OW 275
80161: PUSH
80162: LD_VAR 0 1
80166: PPUSH
80167: LD_INT 3
80169: PPUSH
80170: CALL_OW 275
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: LIST
80179: ST_TO_ADDR
// end ;
80180: LD_VAR 0 2
80184: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80185: LD_INT 0
80187: PPUSH
80188: PPUSH
// result := array ;
80189: LD_ADDR_VAR 0 3
80193: PUSH
80194: LD_VAR 0 1
80198: ST_TO_ADDR
// if size >= result then
80199: LD_VAR 0 2
80203: PUSH
80204: LD_VAR 0 3
80208: GREATEREQUAL
80209: IFFALSE 80213
// exit ;
80211: GO 80263
// if size then
80213: LD_VAR 0 2
80217: IFFALSE 80263
// for i := array downto size do
80219: LD_ADDR_VAR 0 4
80223: PUSH
80224: DOUBLE
80225: LD_VAR 0 1
80229: INC
80230: ST_TO_ADDR
80231: LD_VAR 0 2
80235: PUSH
80236: FOR_DOWNTO
80237: IFFALSE 80261
// result := Delete ( result , result ) ;
80239: LD_ADDR_VAR 0 3
80243: PUSH
80244: LD_VAR 0 3
80248: PPUSH
80249: LD_VAR 0 3
80253: PPUSH
80254: CALL_OW 3
80258: ST_TO_ADDR
80259: GO 80236
80261: POP
80262: POP
// end ;
80263: LD_VAR 0 3
80267: RET
// export function ComExit ( unit ) ; var tmp ; begin
80268: LD_INT 0
80270: PPUSH
80271: PPUSH
// if not IsInUnit ( unit ) then
80272: LD_VAR 0 1
80276: PPUSH
80277: CALL_OW 310
80281: NOT
80282: IFFALSE 80286
// exit ;
80284: GO 80346
// tmp := IsInUnit ( unit ) ;
80286: LD_ADDR_VAR 0 3
80290: PUSH
80291: LD_VAR 0 1
80295: PPUSH
80296: CALL_OW 310
80300: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80301: LD_VAR 0 3
80305: PPUSH
80306: CALL_OW 247
80310: PUSH
80311: LD_INT 2
80313: EQUAL
80314: IFFALSE 80327
// ComExitVehicle ( unit ) else
80316: LD_VAR 0 1
80320: PPUSH
80321: CALL_OW 121
80325: GO 80336
// ComExitBuilding ( unit ) ;
80327: LD_VAR 0 1
80331: PPUSH
80332: CALL_OW 122
// result := tmp ;
80336: LD_ADDR_VAR 0 2
80340: PUSH
80341: LD_VAR 0 3
80345: ST_TO_ADDR
// end ;
80346: LD_VAR 0 2
80350: RET
// export function ComExitAll ( units ) ; var i ; begin
80351: LD_INT 0
80353: PPUSH
80354: PPUSH
// if not units then
80355: LD_VAR 0 1
80359: NOT
80360: IFFALSE 80364
// exit ;
80362: GO 80390
// for i in units do
80364: LD_ADDR_VAR 0 3
80368: PUSH
80369: LD_VAR 0 1
80373: PUSH
80374: FOR_IN
80375: IFFALSE 80388
// ComExit ( i ) ;
80377: LD_VAR 0 3
80381: PPUSH
80382: CALL 80268 0 1
80386: GO 80374
80388: POP
80389: POP
// end ;
80390: LD_VAR 0 2
80394: RET
// export function ResetHc ; begin
80395: LD_INT 0
80397: PPUSH
// InitHc ;
80398: CALL_OW 19
// hc_importance := 0 ;
80402: LD_ADDR_OWVAR 32
80406: PUSH
80407: LD_INT 0
80409: ST_TO_ADDR
// end ;
80410: LD_VAR 0 1
80414: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80415: LD_INT 0
80417: PPUSH
80418: PPUSH
80419: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80420: LD_ADDR_VAR 0 6
80424: PUSH
80425: LD_VAR 0 1
80429: PUSH
80430: LD_VAR 0 3
80434: PLUS
80435: PUSH
80436: LD_INT 2
80438: DIV
80439: ST_TO_ADDR
// if _x < 0 then
80440: LD_VAR 0 6
80444: PUSH
80445: LD_INT 0
80447: LESS
80448: IFFALSE 80465
// _x := _x * - 1 ;
80450: LD_ADDR_VAR 0 6
80454: PUSH
80455: LD_VAR 0 6
80459: PUSH
80460: LD_INT 1
80462: NEG
80463: MUL
80464: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80465: LD_ADDR_VAR 0 7
80469: PUSH
80470: LD_VAR 0 2
80474: PUSH
80475: LD_VAR 0 4
80479: PLUS
80480: PUSH
80481: LD_INT 2
80483: DIV
80484: ST_TO_ADDR
// if _y < 0 then
80485: LD_VAR 0 7
80489: PUSH
80490: LD_INT 0
80492: LESS
80493: IFFALSE 80510
// _y := _y * - 1 ;
80495: LD_ADDR_VAR 0 7
80499: PUSH
80500: LD_VAR 0 7
80504: PUSH
80505: LD_INT 1
80507: NEG
80508: MUL
80509: ST_TO_ADDR
// result := [ _x , _y ] ;
80510: LD_ADDR_VAR 0 5
80514: PUSH
80515: LD_VAR 0 6
80519: PUSH
80520: LD_VAR 0 7
80524: PUSH
80525: EMPTY
80526: LIST
80527: LIST
80528: ST_TO_ADDR
// end ;
80529: LD_VAR 0 5
80533: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80534: LD_INT 0
80536: PPUSH
80537: PPUSH
80538: PPUSH
80539: PPUSH
// task := GetTaskList ( unit ) ;
80540: LD_ADDR_VAR 0 7
80544: PUSH
80545: LD_VAR 0 1
80549: PPUSH
80550: CALL_OW 437
80554: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80555: LD_VAR 0 7
80559: NOT
80560: PUSH
80561: LD_VAR 0 1
80565: PPUSH
80566: LD_VAR 0 2
80570: PPUSH
80571: CALL_OW 308
80575: NOT
80576: AND
80577: IFFALSE 80581
// exit ;
80579: GO 80699
// if IsInArea ( unit , area ) then
80581: LD_VAR 0 1
80585: PPUSH
80586: LD_VAR 0 2
80590: PPUSH
80591: CALL_OW 308
80595: IFFALSE 80613
// begin ComMoveToArea ( unit , goAway ) ;
80597: LD_VAR 0 1
80601: PPUSH
80602: LD_VAR 0 3
80606: PPUSH
80607: CALL_OW 113
// exit ;
80611: GO 80699
// end ; if task [ 1 ] [ 1 ] <> M then
80613: LD_VAR 0 7
80617: PUSH
80618: LD_INT 1
80620: ARRAY
80621: PUSH
80622: LD_INT 1
80624: ARRAY
80625: PUSH
80626: LD_STRING M
80628: NONEQUAL
80629: IFFALSE 80633
// exit ;
80631: GO 80699
// x := task [ 1 ] [ 2 ] ;
80633: LD_ADDR_VAR 0 5
80637: PUSH
80638: LD_VAR 0 7
80642: PUSH
80643: LD_INT 1
80645: ARRAY
80646: PUSH
80647: LD_INT 2
80649: ARRAY
80650: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80651: LD_ADDR_VAR 0 6
80655: PUSH
80656: LD_VAR 0 7
80660: PUSH
80661: LD_INT 1
80663: ARRAY
80664: PUSH
80665: LD_INT 3
80667: ARRAY
80668: ST_TO_ADDR
// if InArea ( x , y , area ) then
80669: LD_VAR 0 5
80673: PPUSH
80674: LD_VAR 0 6
80678: PPUSH
80679: LD_VAR 0 2
80683: PPUSH
80684: CALL_OW 309
80688: IFFALSE 80699
// ComStop ( unit ) ;
80690: LD_VAR 0 1
80694: PPUSH
80695: CALL_OW 141
// end ;
80699: LD_VAR 0 4
80703: RET
// export function Abs ( value ) ; begin
80704: LD_INT 0
80706: PPUSH
// result := value ;
80707: LD_ADDR_VAR 0 2
80711: PUSH
80712: LD_VAR 0 1
80716: ST_TO_ADDR
// if value < 0 then
80717: LD_VAR 0 1
80721: PUSH
80722: LD_INT 0
80724: LESS
80725: IFFALSE 80742
// result := value * - 1 ;
80727: LD_ADDR_VAR 0 2
80731: PUSH
80732: LD_VAR 0 1
80736: PUSH
80737: LD_INT 1
80739: NEG
80740: MUL
80741: ST_TO_ADDR
// end ;
80742: LD_VAR 0 2
80746: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80747: LD_INT 0
80749: PPUSH
80750: PPUSH
80751: PPUSH
80752: PPUSH
80753: PPUSH
80754: PPUSH
80755: PPUSH
80756: PPUSH
// if not unit or not building then
80757: LD_VAR 0 1
80761: NOT
80762: PUSH
80763: LD_VAR 0 2
80767: NOT
80768: OR
80769: IFFALSE 80773
// exit ;
80771: GO 80999
// x := GetX ( building ) ;
80773: LD_ADDR_VAR 0 4
80777: PUSH
80778: LD_VAR 0 2
80782: PPUSH
80783: CALL_OW 250
80787: ST_TO_ADDR
// y := GetY ( building ) ;
80788: LD_ADDR_VAR 0 6
80792: PUSH
80793: LD_VAR 0 2
80797: PPUSH
80798: CALL_OW 251
80802: ST_TO_ADDR
// d := GetDir ( building ) ;
80803: LD_ADDR_VAR 0 8
80807: PUSH
80808: LD_VAR 0 2
80812: PPUSH
80813: CALL_OW 254
80817: ST_TO_ADDR
// r := 4 ;
80818: LD_ADDR_VAR 0 9
80822: PUSH
80823: LD_INT 4
80825: ST_TO_ADDR
// for i := 1 to 5 do
80826: LD_ADDR_VAR 0 10
80830: PUSH
80831: DOUBLE
80832: LD_INT 1
80834: DEC
80835: ST_TO_ADDR
80836: LD_INT 5
80838: PUSH
80839: FOR_TO
80840: IFFALSE 80997
// begin _x := ShiftX ( x , d , r + i ) ;
80842: LD_ADDR_VAR 0 5
80846: PUSH
80847: LD_VAR 0 4
80851: PPUSH
80852: LD_VAR 0 8
80856: PPUSH
80857: LD_VAR 0 9
80861: PUSH
80862: LD_VAR 0 10
80866: PLUS
80867: PPUSH
80868: CALL_OW 272
80872: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80873: LD_ADDR_VAR 0 7
80877: PUSH
80878: LD_VAR 0 6
80882: PPUSH
80883: LD_VAR 0 8
80887: PPUSH
80888: LD_VAR 0 9
80892: PUSH
80893: LD_VAR 0 10
80897: PLUS
80898: PPUSH
80899: CALL_OW 273
80903: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80904: LD_VAR 0 5
80908: PPUSH
80909: LD_VAR 0 7
80913: PPUSH
80914: CALL_OW 488
80918: PUSH
80919: LD_VAR 0 5
80923: PPUSH
80924: LD_VAR 0 7
80928: PPUSH
80929: CALL_OW 428
80933: PPUSH
80934: CALL_OW 247
80938: PUSH
80939: LD_INT 3
80941: PUSH
80942: LD_INT 2
80944: PUSH
80945: EMPTY
80946: LIST
80947: LIST
80948: IN
80949: NOT
80950: AND
80951: IFFALSE 80995
// begin ComMoveXY ( unit , _x , _y ) ;
80953: LD_VAR 0 1
80957: PPUSH
80958: LD_VAR 0 5
80962: PPUSH
80963: LD_VAR 0 7
80967: PPUSH
80968: CALL_OW 111
// result := [ _x , _y ] ;
80972: LD_ADDR_VAR 0 3
80976: PUSH
80977: LD_VAR 0 5
80981: PUSH
80982: LD_VAR 0 7
80986: PUSH
80987: EMPTY
80988: LIST
80989: LIST
80990: ST_TO_ADDR
// exit ;
80991: POP
80992: POP
80993: GO 80999
// end ; end ;
80995: GO 80839
80997: POP
80998: POP
// end ;
80999: LD_VAR 0 3
81003: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81004: LD_INT 0
81006: PPUSH
81007: PPUSH
81008: PPUSH
// result := 0 ;
81009: LD_ADDR_VAR 0 3
81013: PUSH
81014: LD_INT 0
81016: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81017: LD_VAR 0 1
81021: PUSH
81022: LD_INT 0
81024: LESS
81025: PUSH
81026: LD_VAR 0 1
81030: PUSH
81031: LD_INT 8
81033: GREATER
81034: OR
81035: PUSH
81036: LD_VAR 0 2
81040: PUSH
81041: LD_INT 0
81043: LESS
81044: OR
81045: PUSH
81046: LD_VAR 0 2
81050: PUSH
81051: LD_INT 8
81053: GREATER
81054: OR
81055: IFFALSE 81059
// exit ;
81057: GO 81134
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81059: LD_ADDR_VAR 0 4
81063: PUSH
81064: LD_INT 22
81066: PUSH
81067: LD_VAR 0 2
81071: PUSH
81072: EMPTY
81073: LIST
81074: LIST
81075: PPUSH
81076: CALL_OW 69
81080: PUSH
81081: FOR_IN
81082: IFFALSE 81132
// begin un := UnitShoot ( i ) ;
81084: LD_ADDR_VAR 0 5
81088: PUSH
81089: LD_VAR 0 4
81093: PPUSH
81094: CALL_OW 504
81098: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81099: LD_VAR 0 5
81103: PPUSH
81104: CALL_OW 255
81108: PUSH
81109: LD_VAR 0 1
81113: EQUAL
81114: IFFALSE 81130
// begin result := un ;
81116: LD_ADDR_VAR 0 3
81120: PUSH
81121: LD_VAR 0 5
81125: ST_TO_ADDR
// exit ;
81126: POP
81127: POP
81128: GO 81134
// end ; end ;
81130: GO 81081
81132: POP
81133: POP
// end ;
81134: LD_VAR 0 3
81138: RET
// export function GetCargoBay ( units ) ; begin
81139: LD_INT 0
81141: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81142: LD_ADDR_VAR 0 2
81146: PUSH
81147: LD_VAR 0 1
81151: PPUSH
81152: LD_INT 2
81154: PUSH
81155: LD_INT 34
81157: PUSH
81158: LD_INT 12
81160: PUSH
81161: EMPTY
81162: LIST
81163: LIST
81164: PUSH
81165: LD_INT 34
81167: PUSH
81168: LD_INT 51
81170: PUSH
81171: EMPTY
81172: LIST
81173: LIST
81174: PUSH
81175: LD_INT 34
81177: PUSH
81178: LD_INT 32
81180: PUSH
81181: EMPTY
81182: LIST
81183: LIST
81184: PUSH
81185: LD_INT 34
81187: PUSH
81188: LD_INT 89
81190: PUSH
81191: EMPTY
81192: LIST
81193: LIST
81194: PUSH
81195: EMPTY
81196: LIST
81197: LIST
81198: LIST
81199: LIST
81200: LIST
81201: PPUSH
81202: CALL_OW 72
81206: ST_TO_ADDR
// end ;
81207: LD_VAR 0 2
81211: RET
// export function Negate ( value ) ; begin
81212: LD_INT 0
81214: PPUSH
// result := not value ;
81215: LD_ADDR_VAR 0 2
81219: PUSH
81220: LD_VAR 0 1
81224: NOT
81225: ST_TO_ADDR
// end ;
81226: LD_VAR 0 2
81230: RET
// export function Inc ( value ) ; begin
81231: LD_INT 0
81233: PPUSH
// result := value + 1 ;
81234: LD_ADDR_VAR 0 2
81238: PUSH
81239: LD_VAR 0 1
81243: PUSH
81244: LD_INT 1
81246: PLUS
81247: ST_TO_ADDR
// end ;
81248: LD_VAR 0 2
81252: RET
// export function Dec ( value ) ; begin
81253: LD_INT 0
81255: PPUSH
// result := value - 1 ;
81256: LD_ADDR_VAR 0 2
81260: PUSH
81261: LD_VAR 0 1
81265: PUSH
81266: LD_INT 1
81268: MINUS
81269: ST_TO_ADDR
// end ;
81270: LD_VAR 0 2
81274: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81275: LD_INT 0
81277: PPUSH
81278: PPUSH
81279: PPUSH
81280: PPUSH
81281: PPUSH
81282: PPUSH
81283: PPUSH
81284: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81285: LD_VAR 0 1
81289: PPUSH
81290: LD_VAR 0 2
81294: PPUSH
81295: CALL_OW 488
81299: NOT
81300: PUSH
81301: LD_VAR 0 3
81305: PPUSH
81306: LD_VAR 0 4
81310: PPUSH
81311: CALL_OW 488
81315: NOT
81316: OR
81317: IFFALSE 81330
// begin result := - 1 ;
81319: LD_ADDR_VAR 0 5
81323: PUSH
81324: LD_INT 1
81326: NEG
81327: ST_TO_ADDR
// exit ;
81328: GO 81565
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81330: LD_ADDR_VAR 0 12
81334: PUSH
81335: LD_VAR 0 1
81339: PPUSH
81340: LD_VAR 0 2
81344: PPUSH
81345: LD_VAR 0 3
81349: PPUSH
81350: LD_VAR 0 4
81354: PPUSH
81355: CALL 80415 0 4
81359: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81360: LD_ADDR_VAR 0 11
81364: PUSH
81365: LD_VAR 0 1
81369: PPUSH
81370: LD_VAR 0 2
81374: PPUSH
81375: LD_VAR 0 12
81379: PUSH
81380: LD_INT 1
81382: ARRAY
81383: PPUSH
81384: LD_VAR 0 12
81388: PUSH
81389: LD_INT 2
81391: ARRAY
81392: PPUSH
81393: CALL_OW 298
81397: ST_TO_ADDR
// distance := 9999 ;
81398: LD_ADDR_VAR 0 10
81402: PUSH
81403: LD_INT 9999
81405: ST_TO_ADDR
// for i := 0 to 5 do
81406: LD_ADDR_VAR 0 6
81410: PUSH
81411: DOUBLE
81412: LD_INT 0
81414: DEC
81415: ST_TO_ADDR
81416: LD_INT 5
81418: PUSH
81419: FOR_TO
81420: IFFALSE 81563
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81422: LD_ADDR_VAR 0 7
81426: PUSH
81427: LD_VAR 0 1
81431: PPUSH
81432: LD_VAR 0 6
81436: PPUSH
81437: LD_VAR 0 11
81441: PPUSH
81442: CALL_OW 272
81446: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81447: LD_ADDR_VAR 0 8
81451: PUSH
81452: LD_VAR 0 2
81456: PPUSH
81457: LD_VAR 0 6
81461: PPUSH
81462: LD_VAR 0 11
81466: PPUSH
81467: CALL_OW 273
81471: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81472: LD_VAR 0 7
81476: PPUSH
81477: LD_VAR 0 8
81481: PPUSH
81482: CALL_OW 488
81486: NOT
81487: IFFALSE 81491
// continue ;
81489: GO 81419
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81491: LD_ADDR_VAR 0 9
81495: PUSH
81496: LD_VAR 0 12
81500: PUSH
81501: LD_INT 1
81503: ARRAY
81504: PPUSH
81505: LD_VAR 0 12
81509: PUSH
81510: LD_INT 2
81512: ARRAY
81513: PPUSH
81514: LD_VAR 0 7
81518: PPUSH
81519: LD_VAR 0 8
81523: PPUSH
81524: CALL_OW 298
81528: ST_TO_ADDR
// if tmp < distance then
81529: LD_VAR 0 9
81533: PUSH
81534: LD_VAR 0 10
81538: LESS
81539: IFFALSE 81561
// begin result := i ;
81541: LD_ADDR_VAR 0 5
81545: PUSH
81546: LD_VAR 0 6
81550: ST_TO_ADDR
// distance := tmp ;
81551: LD_ADDR_VAR 0 10
81555: PUSH
81556: LD_VAR 0 9
81560: ST_TO_ADDR
// end ; end ;
81561: GO 81419
81563: POP
81564: POP
// end ;
81565: LD_VAR 0 5
81569: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81570: LD_INT 0
81572: PPUSH
81573: PPUSH
// if not driver or not IsInUnit ( driver ) then
81574: LD_VAR 0 1
81578: NOT
81579: PUSH
81580: LD_VAR 0 1
81584: PPUSH
81585: CALL_OW 310
81589: NOT
81590: OR
81591: IFFALSE 81595
// exit ;
81593: GO 81685
// vehicle := IsInUnit ( driver ) ;
81595: LD_ADDR_VAR 0 3
81599: PUSH
81600: LD_VAR 0 1
81604: PPUSH
81605: CALL_OW 310
81609: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81610: LD_VAR 0 1
81614: PPUSH
81615: LD_STRING \
81617: PUSH
81618: LD_INT 0
81620: PUSH
81621: LD_INT 0
81623: PUSH
81624: LD_INT 0
81626: PUSH
81627: LD_INT 0
81629: PUSH
81630: LD_INT 0
81632: PUSH
81633: LD_INT 0
81635: PUSH
81636: EMPTY
81637: LIST
81638: LIST
81639: LIST
81640: LIST
81641: LIST
81642: LIST
81643: LIST
81644: PUSH
81645: LD_STRING E
81647: PUSH
81648: LD_INT 0
81650: PUSH
81651: LD_INT 0
81653: PUSH
81654: LD_VAR 0 3
81658: PUSH
81659: LD_INT 0
81661: PUSH
81662: LD_INT 0
81664: PUSH
81665: LD_INT 0
81667: PUSH
81668: EMPTY
81669: LIST
81670: LIST
81671: LIST
81672: LIST
81673: LIST
81674: LIST
81675: LIST
81676: PUSH
81677: EMPTY
81678: LIST
81679: LIST
81680: PPUSH
81681: CALL_OW 446
// end ;
81685: LD_VAR 0 2
81689: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81690: LD_INT 0
81692: PPUSH
81693: PPUSH
// if not driver or not IsInUnit ( driver ) then
81694: LD_VAR 0 1
81698: NOT
81699: PUSH
81700: LD_VAR 0 1
81704: PPUSH
81705: CALL_OW 310
81709: NOT
81710: OR
81711: IFFALSE 81715
// exit ;
81713: GO 81805
// vehicle := IsInUnit ( driver ) ;
81715: LD_ADDR_VAR 0 3
81719: PUSH
81720: LD_VAR 0 1
81724: PPUSH
81725: CALL_OW 310
81729: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81730: LD_VAR 0 1
81734: PPUSH
81735: LD_STRING \
81737: PUSH
81738: LD_INT 0
81740: PUSH
81741: LD_INT 0
81743: PUSH
81744: LD_INT 0
81746: PUSH
81747: LD_INT 0
81749: PUSH
81750: LD_INT 0
81752: PUSH
81753: LD_INT 0
81755: PUSH
81756: EMPTY
81757: LIST
81758: LIST
81759: LIST
81760: LIST
81761: LIST
81762: LIST
81763: LIST
81764: PUSH
81765: LD_STRING E
81767: PUSH
81768: LD_INT 0
81770: PUSH
81771: LD_INT 0
81773: PUSH
81774: LD_VAR 0 3
81778: PUSH
81779: LD_INT 0
81781: PUSH
81782: LD_INT 0
81784: PUSH
81785: LD_INT 0
81787: PUSH
81788: EMPTY
81789: LIST
81790: LIST
81791: LIST
81792: LIST
81793: LIST
81794: LIST
81795: LIST
81796: PUSH
81797: EMPTY
81798: LIST
81799: LIST
81800: PPUSH
81801: CALL_OW 447
// end ;
81805: LD_VAR 0 2
81809: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81810: LD_INT 0
81812: PPUSH
81813: PPUSH
81814: PPUSH
// tmp := [ ] ;
81815: LD_ADDR_VAR 0 5
81819: PUSH
81820: EMPTY
81821: ST_TO_ADDR
// for i in units do
81822: LD_ADDR_VAR 0 4
81826: PUSH
81827: LD_VAR 0 1
81831: PUSH
81832: FOR_IN
81833: IFFALSE 81871
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81835: LD_ADDR_VAR 0 5
81839: PUSH
81840: LD_VAR 0 5
81844: PPUSH
81845: LD_VAR 0 5
81849: PUSH
81850: LD_INT 1
81852: PLUS
81853: PPUSH
81854: LD_VAR 0 4
81858: PPUSH
81859: CALL_OW 256
81863: PPUSH
81864: CALL_OW 2
81868: ST_TO_ADDR
81869: GO 81832
81871: POP
81872: POP
// if not tmp then
81873: LD_VAR 0 5
81877: NOT
81878: IFFALSE 81882
// exit ;
81880: GO 81930
// if asc then
81882: LD_VAR 0 2
81886: IFFALSE 81910
// result := SortListByListAsc ( units , tmp ) else
81888: LD_ADDR_VAR 0 3
81892: PUSH
81893: LD_VAR 0 1
81897: PPUSH
81898: LD_VAR 0 5
81902: PPUSH
81903: CALL_OW 76
81907: ST_TO_ADDR
81908: GO 81930
// result := SortListByListDesc ( units , tmp ) ;
81910: LD_ADDR_VAR 0 3
81914: PUSH
81915: LD_VAR 0 1
81919: PPUSH
81920: LD_VAR 0 5
81924: PPUSH
81925: CALL_OW 77
81929: ST_TO_ADDR
// end ;
81930: LD_VAR 0 3
81934: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81935: LD_INT 0
81937: PPUSH
81938: PPUSH
// task := GetTaskList ( mech ) ;
81939: LD_ADDR_VAR 0 4
81943: PUSH
81944: LD_VAR 0 1
81948: PPUSH
81949: CALL_OW 437
81953: ST_TO_ADDR
// if not task then
81954: LD_VAR 0 4
81958: NOT
81959: IFFALSE 81963
// exit ;
81961: GO 82005
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81963: LD_ADDR_VAR 0 3
81967: PUSH
81968: LD_VAR 0 4
81972: PUSH
81973: LD_INT 1
81975: ARRAY
81976: PUSH
81977: LD_INT 1
81979: ARRAY
81980: PUSH
81981: LD_STRING r
81983: EQUAL
81984: PUSH
81985: LD_VAR 0 4
81989: PUSH
81990: LD_INT 1
81992: ARRAY
81993: PUSH
81994: LD_INT 4
81996: ARRAY
81997: PUSH
81998: LD_VAR 0 2
82002: EQUAL
82003: AND
82004: ST_TO_ADDR
// end ;
82005: LD_VAR 0 3
82009: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82010: LD_INT 0
82012: PPUSH
// SetDir ( unit , d ) ;
82013: LD_VAR 0 1
82017: PPUSH
82018: LD_VAR 0 4
82022: PPUSH
82023: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
82027: LD_VAR 0 1
82031: PPUSH
82032: LD_VAR 0 2
82036: PPUSH
82037: LD_VAR 0 3
82041: PPUSH
82042: LD_VAR 0 5
82046: PPUSH
82047: CALL_OW 48
// end ;
82051: LD_VAR 0 6
82055: RET
// export function ToNaturalNumber ( number ) ; begin
82056: LD_INT 0
82058: PPUSH
// result := number div 1 ;
82059: LD_ADDR_VAR 0 2
82063: PUSH
82064: LD_VAR 0 1
82068: PUSH
82069: LD_INT 1
82071: DIV
82072: ST_TO_ADDR
// if number < 0 then
82073: LD_VAR 0 1
82077: PUSH
82078: LD_INT 0
82080: LESS
82081: IFFALSE 82091
// result := 0 ;
82083: LD_ADDR_VAR 0 2
82087: PUSH
82088: LD_INT 0
82090: ST_TO_ADDR
// end ;
82091: LD_VAR 0 2
82095: RET
// export function SortByClass ( units , class ) ; var un ; begin
82096: LD_INT 0
82098: PPUSH
82099: PPUSH
// if not units or not class then
82100: LD_VAR 0 1
82104: NOT
82105: PUSH
82106: LD_VAR 0 2
82110: NOT
82111: OR
82112: IFFALSE 82116
// exit ;
82114: GO 82211
// result := [ ] ;
82116: LD_ADDR_VAR 0 3
82120: PUSH
82121: EMPTY
82122: ST_TO_ADDR
// for un in units do
82123: LD_ADDR_VAR 0 4
82127: PUSH
82128: LD_VAR 0 1
82132: PUSH
82133: FOR_IN
82134: IFFALSE 82209
// if GetClass ( un ) = class then
82136: LD_VAR 0 4
82140: PPUSH
82141: CALL_OW 257
82145: PUSH
82146: LD_VAR 0 2
82150: EQUAL
82151: IFFALSE 82178
// result := Insert ( result , 1 , un ) else
82153: LD_ADDR_VAR 0 3
82157: PUSH
82158: LD_VAR 0 3
82162: PPUSH
82163: LD_INT 1
82165: PPUSH
82166: LD_VAR 0 4
82170: PPUSH
82171: CALL_OW 2
82175: ST_TO_ADDR
82176: GO 82207
// result := Replace ( result , result + 1 , un ) ;
82178: LD_ADDR_VAR 0 3
82182: PUSH
82183: LD_VAR 0 3
82187: PPUSH
82188: LD_VAR 0 3
82192: PUSH
82193: LD_INT 1
82195: PLUS
82196: PPUSH
82197: LD_VAR 0 4
82201: PPUSH
82202: CALL_OW 1
82206: ST_TO_ADDR
82207: GO 82133
82209: POP
82210: POP
// end ;
82211: LD_VAR 0 3
82215: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82216: LD_INT 0
82218: PPUSH
82219: PPUSH
82220: PPUSH
82221: PPUSH
82222: PPUSH
82223: PPUSH
82224: PPUSH
// result := [ ] ;
82225: LD_ADDR_VAR 0 4
82229: PUSH
82230: EMPTY
82231: ST_TO_ADDR
// if x - r < 0 then
82232: LD_VAR 0 1
82236: PUSH
82237: LD_VAR 0 3
82241: MINUS
82242: PUSH
82243: LD_INT 0
82245: LESS
82246: IFFALSE 82258
// min_x := 0 else
82248: LD_ADDR_VAR 0 8
82252: PUSH
82253: LD_INT 0
82255: ST_TO_ADDR
82256: GO 82274
// min_x := x - r ;
82258: LD_ADDR_VAR 0 8
82262: PUSH
82263: LD_VAR 0 1
82267: PUSH
82268: LD_VAR 0 3
82272: MINUS
82273: ST_TO_ADDR
// if y - r < 0 then
82274: LD_VAR 0 2
82278: PUSH
82279: LD_VAR 0 3
82283: MINUS
82284: PUSH
82285: LD_INT 0
82287: LESS
82288: IFFALSE 82300
// min_y := 0 else
82290: LD_ADDR_VAR 0 7
82294: PUSH
82295: LD_INT 0
82297: ST_TO_ADDR
82298: GO 82316
// min_y := y - r ;
82300: LD_ADDR_VAR 0 7
82304: PUSH
82305: LD_VAR 0 2
82309: PUSH
82310: LD_VAR 0 3
82314: MINUS
82315: ST_TO_ADDR
// max_x := x + r ;
82316: LD_ADDR_VAR 0 9
82320: PUSH
82321: LD_VAR 0 1
82325: PUSH
82326: LD_VAR 0 3
82330: PLUS
82331: ST_TO_ADDR
// max_y := y + r ;
82332: LD_ADDR_VAR 0 10
82336: PUSH
82337: LD_VAR 0 2
82341: PUSH
82342: LD_VAR 0 3
82346: PLUS
82347: ST_TO_ADDR
// for _x = min_x to max_x do
82348: LD_ADDR_VAR 0 5
82352: PUSH
82353: DOUBLE
82354: LD_VAR 0 8
82358: DEC
82359: ST_TO_ADDR
82360: LD_VAR 0 9
82364: PUSH
82365: FOR_TO
82366: IFFALSE 82467
// for _y = min_y to max_y do
82368: LD_ADDR_VAR 0 6
82372: PUSH
82373: DOUBLE
82374: LD_VAR 0 7
82378: DEC
82379: ST_TO_ADDR
82380: LD_VAR 0 10
82384: PUSH
82385: FOR_TO
82386: IFFALSE 82463
// begin if not ValidHex ( _x , _y ) then
82388: LD_VAR 0 5
82392: PPUSH
82393: LD_VAR 0 6
82397: PPUSH
82398: CALL_OW 488
82402: NOT
82403: IFFALSE 82407
// continue ;
82405: GO 82385
// if GetResourceTypeXY ( _x , _y ) then
82407: LD_VAR 0 5
82411: PPUSH
82412: LD_VAR 0 6
82416: PPUSH
82417: CALL_OW 283
82421: IFFALSE 82461
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82423: LD_ADDR_VAR 0 4
82427: PUSH
82428: LD_VAR 0 4
82432: PPUSH
82433: LD_VAR 0 4
82437: PUSH
82438: LD_INT 1
82440: PLUS
82441: PPUSH
82442: LD_VAR 0 5
82446: PUSH
82447: LD_VAR 0 6
82451: PUSH
82452: EMPTY
82453: LIST
82454: LIST
82455: PPUSH
82456: CALL_OW 1
82460: ST_TO_ADDR
// end ;
82461: GO 82385
82463: POP
82464: POP
82465: GO 82365
82467: POP
82468: POP
// end ;
82469: LD_VAR 0 4
82473: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82474: LD_INT 0
82476: PPUSH
82477: PPUSH
82478: PPUSH
82479: PPUSH
82480: PPUSH
82481: PPUSH
82482: PPUSH
82483: PPUSH
// if not units then
82484: LD_VAR 0 1
82488: NOT
82489: IFFALSE 82493
// exit ;
82491: GO 83017
// result := UnitFilter ( units , [ f_ok ] ) ;
82493: LD_ADDR_VAR 0 3
82497: PUSH
82498: LD_VAR 0 1
82502: PPUSH
82503: LD_INT 50
82505: PUSH
82506: EMPTY
82507: LIST
82508: PPUSH
82509: CALL_OW 72
82513: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82514: LD_ADDR_VAR 0 8
82518: PUSH
82519: LD_VAR 0 1
82523: PUSH
82524: LD_INT 1
82526: ARRAY
82527: PPUSH
82528: CALL_OW 255
82532: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82533: LD_ADDR_VAR 0 10
82537: PUSH
82538: LD_INT 29
82540: PUSH
82541: LD_INT 91
82543: PUSH
82544: LD_INT 49
82546: PUSH
82547: EMPTY
82548: LIST
82549: LIST
82550: LIST
82551: ST_TO_ADDR
// if not result then
82552: LD_VAR 0 3
82556: NOT
82557: IFFALSE 82561
// exit ;
82559: GO 83017
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82561: LD_ADDR_VAR 0 5
82565: PUSH
82566: LD_INT 81
82568: PUSH
82569: LD_VAR 0 8
82573: PUSH
82574: EMPTY
82575: LIST
82576: LIST
82577: PPUSH
82578: CALL_OW 69
82582: ST_TO_ADDR
// for i in result do
82583: LD_ADDR_VAR 0 4
82587: PUSH
82588: LD_VAR 0 3
82592: PUSH
82593: FOR_IN
82594: IFFALSE 83015
// begin tag := GetTag ( i ) + 1 ;
82596: LD_ADDR_VAR 0 9
82600: PUSH
82601: LD_VAR 0 4
82605: PPUSH
82606: CALL_OW 110
82610: PUSH
82611: LD_INT 1
82613: PLUS
82614: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
82615: LD_ADDR_VAR 0 7
82619: PUSH
82620: LD_VAR 0 4
82624: PPUSH
82625: CALL_OW 250
82629: PPUSH
82630: LD_VAR 0 4
82634: PPUSH
82635: CALL_OW 251
82639: PPUSH
82640: LD_INT 6
82642: PPUSH
82643: CALL 82216 0 3
82647: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
82648: LD_VAR 0 4
82652: PPUSH
82653: CALL_OW 247
82657: PUSH
82658: LD_INT 2
82660: EQUAL
82661: PUSH
82662: LD_VAR 0 7
82666: AND
82667: PUSH
82668: LD_VAR 0 4
82672: PPUSH
82673: CALL_OW 264
82677: PUSH
82678: LD_VAR 0 10
82682: IN
82683: NOT
82684: AND
82685: IFFALSE 82724
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82687: LD_VAR 0 4
82691: PPUSH
82692: LD_VAR 0 7
82696: PUSH
82697: LD_INT 1
82699: ARRAY
82700: PUSH
82701: LD_INT 1
82703: ARRAY
82704: PPUSH
82705: LD_VAR 0 7
82709: PUSH
82710: LD_INT 1
82712: ARRAY
82713: PUSH
82714: LD_INT 2
82716: ARRAY
82717: PPUSH
82718: CALL_OW 116
82722: GO 83013
// if path > tag then
82724: LD_VAR 0 2
82728: PUSH
82729: LD_VAR 0 9
82733: GREATER
82734: IFFALSE 82942
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82736: LD_ADDR_VAR 0 6
82740: PUSH
82741: LD_VAR 0 5
82745: PPUSH
82746: LD_INT 91
82748: PUSH
82749: LD_VAR 0 4
82753: PUSH
82754: LD_INT 8
82756: PUSH
82757: EMPTY
82758: LIST
82759: LIST
82760: LIST
82761: PPUSH
82762: CALL_OW 72
82766: ST_TO_ADDR
// if nearEnemy then
82767: LD_VAR 0 6
82771: IFFALSE 82840
// begin if GetWeapon ( i ) = ru_time_lapser then
82773: LD_VAR 0 4
82777: PPUSH
82778: CALL_OW 264
82782: PUSH
82783: LD_INT 49
82785: EQUAL
82786: IFFALSE 82814
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82788: LD_VAR 0 4
82792: PPUSH
82793: LD_VAR 0 6
82797: PPUSH
82798: LD_VAR 0 4
82802: PPUSH
82803: CALL_OW 74
82807: PPUSH
82808: CALL_OW 112
82812: GO 82838
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82814: LD_VAR 0 4
82818: PPUSH
82819: LD_VAR 0 6
82823: PPUSH
82824: LD_VAR 0 4
82828: PPUSH
82829: CALL_OW 74
82833: PPUSH
82834: CALL 83942 0 2
// end else
82838: GO 82940
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82840: LD_VAR 0 4
82844: PPUSH
82845: LD_VAR 0 2
82849: PUSH
82850: LD_VAR 0 9
82854: ARRAY
82855: PUSH
82856: LD_INT 1
82858: ARRAY
82859: PPUSH
82860: LD_VAR 0 2
82864: PUSH
82865: LD_VAR 0 9
82869: ARRAY
82870: PUSH
82871: LD_INT 2
82873: ARRAY
82874: PPUSH
82875: CALL_OW 297
82879: PUSH
82880: LD_INT 6
82882: GREATER
82883: IFFALSE 82926
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82885: LD_VAR 0 4
82889: PPUSH
82890: LD_VAR 0 2
82894: PUSH
82895: LD_VAR 0 9
82899: ARRAY
82900: PUSH
82901: LD_INT 1
82903: ARRAY
82904: PPUSH
82905: LD_VAR 0 2
82909: PUSH
82910: LD_VAR 0 9
82914: ARRAY
82915: PUSH
82916: LD_INT 2
82918: ARRAY
82919: PPUSH
82920: CALL_OW 114
82924: GO 82940
// SetTag ( i , tag ) ;
82926: LD_VAR 0 4
82930: PPUSH
82931: LD_VAR 0 9
82935: PPUSH
82936: CALL_OW 109
// end else
82940: GO 83013
// if enemy then
82942: LD_VAR 0 5
82946: IFFALSE 83013
// begin if GetWeapon ( i ) = ru_time_lapser then
82948: LD_VAR 0 4
82952: PPUSH
82953: CALL_OW 264
82957: PUSH
82958: LD_INT 49
82960: EQUAL
82961: IFFALSE 82989
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82963: LD_VAR 0 4
82967: PPUSH
82968: LD_VAR 0 5
82972: PPUSH
82973: LD_VAR 0 4
82977: PPUSH
82978: CALL_OW 74
82982: PPUSH
82983: CALL_OW 112
82987: GO 83013
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82989: LD_VAR 0 4
82993: PPUSH
82994: LD_VAR 0 5
82998: PPUSH
82999: LD_VAR 0 4
83003: PPUSH
83004: CALL_OW 74
83008: PPUSH
83009: CALL 83942 0 2
// end ; end ;
83013: GO 82593
83015: POP
83016: POP
// end ;
83017: LD_VAR 0 3
83021: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83022: LD_INT 0
83024: PPUSH
83025: PPUSH
83026: PPUSH
// if not unit or IsInUnit ( unit ) then
83027: LD_VAR 0 1
83031: NOT
83032: PUSH
83033: LD_VAR 0 1
83037: PPUSH
83038: CALL_OW 310
83042: OR
83043: IFFALSE 83047
// exit ;
83045: GO 83138
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83047: LD_ADDR_VAR 0 4
83051: PUSH
83052: LD_VAR 0 1
83056: PPUSH
83057: CALL_OW 250
83061: PPUSH
83062: LD_VAR 0 2
83066: PPUSH
83067: LD_INT 1
83069: PPUSH
83070: CALL_OW 272
83074: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83075: LD_ADDR_VAR 0 5
83079: PUSH
83080: LD_VAR 0 1
83084: PPUSH
83085: CALL_OW 251
83089: PPUSH
83090: LD_VAR 0 2
83094: PPUSH
83095: LD_INT 1
83097: PPUSH
83098: CALL_OW 273
83102: ST_TO_ADDR
// if ValidHex ( x , y ) then
83103: LD_VAR 0 4
83107: PPUSH
83108: LD_VAR 0 5
83112: PPUSH
83113: CALL_OW 488
83117: IFFALSE 83138
// ComTurnXY ( unit , x , y ) ;
83119: LD_VAR 0 1
83123: PPUSH
83124: LD_VAR 0 4
83128: PPUSH
83129: LD_VAR 0 5
83133: PPUSH
83134: CALL_OW 118
// end ;
83138: LD_VAR 0 3
83142: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83143: LD_INT 0
83145: PPUSH
83146: PPUSH
// result := false ;
83147: LD_ADDR_VAR 0 3
83151: PUSH
83152: LD_INT 0
83154: ST_TO_ADDR
// if not units then
83155: LD_VAR 0 2
83159: NOT
83160: IFFALSE 83164
// exit ;
83162: GO 83209
// for i in units do
83164: LD_ADDR_VAR 0 4
83168: PUSH
83169: LD_VAR 0 2
83173: PUSH
83174: FOR_IN
83175: IFFALSE 83207
// if See ( side , i ) then
83177: LD_VAR 0 1
83181: PPUSH
83182: LD_VAR 0 4
83186: PPUSH
83187: CALL_OW 292
83191: IFFALSE 83205
// begin result := true ;
83193: LD_ADDR_VAR 0 3
83197: PUSH
83198: LD_INT 1
83200: ST_TO_ADDR
// exit ;
83201: POP
83202: POP
83203: GO 83209
// end ;
83205: GO 83174
83207: POP
83208: POP
// end ;
83209: LD_VAR 0 3
83213: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83214: LD_INT 0
83216: PPUSH
83217: PPUSH
83218: PPUSH
83219: PPUSH
// if not unit or not points then
83220: LD_VAR 0 1
83224: NOT
83225: PUSH
83226: LD_VAR 0 2
83230: NOT
83231: OR
83232: IFFALSE 83236
// exit ;
83234: GO 83326
// dist := 99999 ;
83236: LD_ADDR_VAR 0 5
83240: PUSH
83241: LD_INT 99999
83243: ST_TO_ADDR
// for i in points do
83244: LD_ADDR_VAR 0 4
83248: PUSH
83249: LD_VAR 0 2
83253: PUSH
83254: FOR_IN
83255: IFFALSE 83324
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83257: LD_ADDR_VAR 0 6
83261: PUSH
83262: LD_VAR 0 1
83266: PPUSH
83267: LD_VAR 0 4
83271: PUSH
83272: LD_INT 1
83274: ARRAY
83275: PPUSH
83276: LD_VAR 0 4
83280: PUSH
83281: LD_INT 2
83283: ARRAY
83284: PPUSH
83285: CALL_OW 297
83289: ST_TO_ADDR
// if tmpDist < dist then
83290: LD_VAR 0 6
83294: PUSH
83295: LD_VAR 0 5
83299: LESS
83300: IFFALSE 83322
// begin result := i ;
83302: LD_ADDR_VAR 0 3
83306: PUSH
83307: LD_VAR 0 4
83311: ST_TO_ADDR
// dist := tmpDist ;
83312: LD_ADDR_VAR 0 5
83316: PUSH
83317: LD_VAR 0 6
83321: ST_TO_ADDR
// end ; end ;
83322: GO 83254
83324: POP
83325: POP
// end ;
83326: LD_VAR 0 3
83330: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83331: LD_INT 0
83333: PPUSH
// uc_side := side ;
83334: LD_ADDR_OWVAR 20
83338: PUSH
83339: LD_VAR 0 1
83343: ST_TO_ADDR
// uc_nation := 3 ;
83344: LD_ADDR_OWVAR 21
83348: PUSH
83349: LD_INT 3
83351: ST_TO_ADDR
// vc_chassis := 25 ;
83352: LD_ADDR_OWVAR 37
83356: PUSH
83357: LD_INT 25
83359: ST_TO_ADDR
// vc_engine := engine_siberite ;
83360: LD_ADDR_OWVAR 39
83364: PUSH
83365: LD_INT 3
83367: ST_TO_ADDR
// vc_control := control_computer ;
83368: LD_ADDR_OWVAR 38
83372: PUSH
83373: LD_INT 3
83375: ST_TO_ADDR
// vc_weapon := 59 ;
83376: LD_ADDR_OWVAR 40
83380: PUSH
83381: LD_INT 59
83383: ST_TO_ADDR
// result := CreateVehicle ;
83384: LD_ADDR_VAR 0 5
83388: PUSH
83389: CALL_OW 45
83393: ST_TO_ADDR
// SetDir ( result , d ) ;
83394: LD_VAR 0 5
83398: PPUSH
83399: LD_VAR 0 4
83403: PPUSH
83404: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83408: LD_VAR 0 5
83412: PPUSH
83413: LD_VAR 0 2
83417: PPUSH
83418: LD_VAR 0 3
83422: PPUSH
83423: LD_INT 0
83425: PPUSH
83426: CALL_OW 48
// end ;
83430: LD_VAR 0 5
83434: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83435: LD_INT 0
83437: PPUSH
83438: PPUSH
83439: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83440: LD_ADDR_VAR 0 2
83444: PUSH
83445: LD_INT 0
83447: PUSH
83448: LD_INT 0
83450: PUSH
83451: LD_INT 0
83453: PUSH
83454: LD_INT 0
83456: PUSH
83457: EMPTY
83458: LIST
83459: LIST
83460: LIST
83461: LIST
83462: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83463: LD_VAR 0 1
83467: NOT
83468: PUSH
83469: LD_VAR 0 1
83473: PPUSH
83474: CALL_OW 264
83478: PUSH
83479: LD_INT 12
83481: PUSH
83482: LD_INT 51
83484: PUSH
83485: LD_INT 32
83487: PUSH
83488: LD_INT 89
83490: PUSH
83491: EMPTY
83492: LIST
83493: LIST
83494: LIST
83495: LIST
83496: IN
83497: NOT
83498: OR
83499: IFFALSE 83503
// exit ;
83501: GO 83601
// for i := 1 to 3 do
83503: LD_ADDR_VAR 0 3
83507: PUSH
83508: DOUBLE
83509: LD_INT 1
83511: DEC
83512: ST_TO_ADDR
83513: LD_INT 3
83515: PUSH
83516: FOR_TO
83517: IFFALSE 83599
// begin tmp := GetCargo ( cargo , i ) ;
83519: LD_ADDR_VAR 0 4
83523: PUSH
83524: LD_VAR 0 1
83528: PPUSH
83529: LD_VAR 0 3
83533: PPUSH
83534: CALL_OW 289
83538: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83539: LD_ADDR_VAR 0 2
83543: PUSH
83544: LD_VAR 0 2
83548: PPUSH
83549: LD_VAR 0 3
83553: PPUSH
83554: LD_VAR 0 4
83558: PPUSH
83559: CALL_OW 1
83563: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83564: LD_ADDR_VAR 0 2
83568: PUSH
83569: LD_VAR 0 2
83573: PPUSH
83574: LD_INT 4
83576: PPUSH
83577: LD_VAR 0 2
83581: PUSH
83582: LD_INT 4
83584: ARRAY
83585: PUSH
83586: LD_VAR 0 4
83590: PLUS
83591: PPUSH
83592: CALL_OW 1
83596: ST_TO_ADDR
// end ;
83597: GO 83516
83599: POP
83600: POP
// end ;
83601: LD_VAR 0 2
83605: RET
// export function Length ( array ) ; begin
83606: LD_INT 0
83608: PPUSH
// result := array + 0 ;
83609: LD_ADDR_VAR 0 2
83613: PUSH
83614: LD_VAR 0 1
83618: PUSH
83619: LD_INT 0
83621: PLUS
83622: ST_TO_ADDR
// end ;
83623: LD_VAR 0 2
83627: RET
// export function PrepareArray ( array ) ; begin
83628: LD_INT 0
83630: PPUSH
// result := array diff 0 ;
83631: LD_ADDR_VAR 0 2
83635: PUSH
83636: LD_VAR 0 1
83640: PUSH
83641: LD_INT 0
83643: DIFF
83644: ST_TO_ADDR
// if not result [ 1 ] then
83645: LD_VAR 0 2
83649: PUSH
83650: LD_INT 1
83652: ARRAY
83653: NOT
83654: IFFALSE 83674
// result := Delete ( result , 1 ) ;
83656: LD_ADDR_VAR 0 2
83660: PUSH
83661: LD_VAR 0 2
83665: PPUSH
83666: LD_INT 1
83668: PPUSH
83669: CALL_OW 3
83673: ST_TO_ADDR
// end ;
83674: LD_VAR 0 2
83678: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83679: LD_INT 0
83681: PPUSH
83682: PPUSH
83683: PPUSH
83684: PPUSH
// sibRocketRange := 25 ;
83685: LD_ADDR_VAR 0 6
83689: PUSH
83690: LD_INT 25
83692: ST_TO_ADDR
// result := false ;
83693: LD_ADDR_VAR 0 4
83697: PUSH
83698: LD_INT 0
83700: ST_TO_ADDR
// for i := 0 to 5 do
83701: LD_ADDR_VAR 0 5
83705: PUSH
83706: DOUBLE
83707: LD_INT 0
83709: DEC
83710: ST_TO_ADDR
83711: LD_INT 5
83713: PUSH
83714: FOR_TO
83715: IFFALSE 83782
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83717: LD_VAR 0 1
83721: PPUSH
83722: LD_VAR 0 5
83726: PPUSH
83727: LD_VAR 0 6
83731: PPUSH
83732: CALL_OW 272
83736: PPUSH
83737: LD_VAR 0 2
83741: PPUSH
83742: LD_VAR 0 5
83746: PPUSH
83747: LD_VAR 0 6
83751: PPUSH
83752: CALL_OW 273
83756: PPUSH
83757: LD_VAR 0 3
83761: PPUSH
83762: CALL_OW 309
83766: IFFALSE 83780
// begin result := true ;
83768: LD_ADDR_VAR 0 4
83772: PUSH
83773: LD_INT 1
83775: ST_TO_ADDR
// exit ;
83776: POP
83777: POP
83778: GO 83784
// end ;
83780: GO 83714
83782: POP
83783: POP
// end ;
83784: LD_VAR 0 4
83788: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83789: LD_INT 0
83791: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83792: LD_VAR 0 1
83796: PPUSH
83797: LD_VAR 0 2
83801: PPUSH
83802: LD_INT 0
83804: PPUSH
83805: LD_INT 0
83807: PPUSH
83808: LD_INT 1
83810: PPUSH
83811: LD_INT 0
83813: PPUSH
83814: CALL_OW 587
// end ;
83818: LD_VAR 0 3
83822: RET
// export function CenterOnNow ( unit ) ; begin
83823: LD_INT 0
83825: PPUSH
// result := IsInUnit ( unit ) ;
83826: LD_ADDR_VAR 0 2
83830: PUSH
83831: LD_VAR 0 1
83835: PPUSH
83836: CALL_OW 310
83840: ST_TO_ADDR
// if not result then
83841: LD_VAR 0 2
83845: NOT
83846: IFFALSE 83858
// result := unit ;
83848: LD_ADDR_VAR 0 2
83852: PUSH
83853: LD_VAR 0 1
83857: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83858: LD_VAR 0 1
83862: PPUSH
83863: CALL_OW 87
// end ;
83867: LD_VAR 0 2
83871: RET
// export function ComMoveHex ( unit , hex ) ; begin
83872: LD_INT 0
83874: PPUSH
// if not hex then
83875: LD_VAR 0 2
83879: NOT
83880: IFFALSE 83884
// exit ;
83882: GO 83937
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83884: LD_VAR 0 2
83888: PUSH
83889: LD_INT 1
83891: ARRAY
83892: PPUSH
83893: LD_VAR 0 2
83897: PUSH
83898: LD_INT 2
83900: ARRAY
83901: PPUSH
83902: CALL_OW 428
83906: IFFALSE 83910
// exit ;
83908: GO 83937
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83910: LD_VAR 0 1
83914: PPUSH
83915: LD_VAR 0 2
83919: PUSH
83920: LD_INT 1
83922: ARRAY
83923: PPUSH
83924: LD_VAR 0 2
83928: PUSH
83929: LD_INT 2
83931: ARRAY
83932: PPUSH
83933: CALL_OW 111
// end ;
83937: LD_VAR 0 3
83941: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83942: LD_INT 0
83944: PPUSH
83945: PPUSH
83946: PPUSH
// if not unit or not enemy then
83947: LD_VAR 0 1
83951: NOT
83952: PUSH
83953: LD_VAR 0 2
83957: NOT
83958: OR
83959: IFFALSE 83963
// exit ;
83961: GO 84087
// x := GetX ( enemy ) ;
83963: LD_ADDR_VAR 0 4
83967: PUSH
83968: LD_VAR 0 2
83972: PPUSH
83973: CALL_OW 250
83977: ST_TO_ADDR
// y := GetY ( enemy ) ;
83978: LD_ADDR_VAR 0 5
83982: PUSH
83983: LD_VAR 0 2
83987: PPUSH
83988: CALL_OW 251
83992: ST_TO_ADDR
// if ValidHex ( x , y ) then
83993: LD_VAR 0 4
83997: PPUSH
83998: LD_VAR 0 5
84002: PPUSH
84003: CALL_OW 488
84007: IFFALSE 84087
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
84009: LD_VAR 0 2
84013: PPUSH
84014: CALL_OW 247
84018: PUSH
84019: LD_INT 3
84021: PUSH
84022: LD_INT 2
84024: PUSH
84025: EMPTY
84026: LIST
84027: LIST
84028: IN
84029: PUSH
84030: LD_VAR 0 1
84034: PPUSH
84035: CALL_OW 255
84039: PPUSH
84040: LD_VAR 0 2
84044: PPUSH
84045: CALL_OW 292
84049: AND
84050: IFFALSE 84068
// ComAttackUnit ( unit , enemy ) else
84052: LD_VAR 0 1
84056: PPUSH
84057: LD_VAR 0 2
84061: PPUSH
84062: CALL_OW 115
84066: GO 84087
// ComAgressiveMove ( unit , x , y ) ;
84068: LD_VAR 0 1
84072: PPUSH
84073: LD_VAR 0 4
84077: PPUSH
84078: LD_VAR 0 5
84082: PPUSH
84083: CALL_OW 114
// end ; end_of_file
84087: LD_VAR 0 3
84091: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84092: LD_VAR 0 1
84096: PUSH
84097: LD_INT 200
84099: DOUBLE
84100: GREATEREQUAL
84101: IFFALSE 84109
84103: LD_INT 299
84105: DOUBLE
84106: LESSEQUAL
84107: IFTRUE 84111
84109: GO 84143
84111: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84112: LD_VAR 0 1
84116: PPUSH
84117: LD_VAR 0 2
84121: PPUSH
84122: LD_VAR 0 3
84126: PPUSH
84127: LD_VAR 0 4
84131: PPUSH
84132: LD_VAR 0 5
84136: PPUSH
84137: CALL 37816 0 5
84141: GO 84220
84143: LD_INT 300
84145: DOUBLE
84146: GREATEREQUAL
84147: IFFALSE 84155
84149: LD_INT 399
84151: DOUBLE
84152: LESSEQUAL
84153: IFTRUE 84157
84155: GO 84219
84157: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84158: LD_VAR 0 1
84162: PPUSH
84163: LD_VAR 0 2
84167: PPUSH
84168: LD_VAR 0 3
84172: PPUSH
84173: LD_VAR 0 4
84177: PPUSH
84178: LD_VAR 0 5
84182: PPUSH
84183: LD_VAR 0 6
84187: PPUSH
84188: LD_VAR 0 7
84192: PPUSH
84193: LD_VAR 0 8
84197: PPUSH
84198: LD_VAR 0 9
84202: PPUSH
84203: LD_VAR 0 10
84207: PPUSH
84208: LD_VAR 0 11
84212: PPUSH
84213: CALL 34141 0 11
84217: GO 84220
84219: POP
// end ;
84220: PPOPN 11
84222: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84223: LD_VAR 0 1
84227: PPUSH
84228: LD_VAR 0 2
84232: PPUSH
84233: LD_VAR 0 3
84237: PPUSH
84238: LD_VAR 0 4
84242: PPUSH
84243: LD_VAR 0 5
84247: PPUSH
84248: CALL 37552 0 5
// end ; end_of_file
84252: PPOPN 5
84254: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84255: LD_VAR 0 1
84259: PPUSH
84260: LD_VAR 0 2
84264: PPUSH
84265: LD_VAR 0 3
84269: PPUSH
84270: LD_VAR 0 4
84274: PPUSH
84275: LD_VAR 0 5
84279: PPUSH
84280: LD_VAR 0 6
84284: PPUSH
84285: CALL 21793 0 6
// end ;
84289: PPOPN 6
84291: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84292: LD_INT 0
84294: PPUSH
// begin if not units then
84295: LD_VAR 0 1
84299: NOT
84300: IFFALSE 84304
// exit ;
84302: GO 84304
// end ;
84304: PPOPN 7
84306: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84307: CALL 21697 0 0
// end ;
84311: PPOPN 1
84313: END
