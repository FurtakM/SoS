// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor , Mike ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 42
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7948 0 0
// CreateNature ;
  57: CALL 21669 0 0
// PrepareRussian ;
  61: CALL 5826 0 0
// PrepareVehicles ;
  65: CALL 1617 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 2026 0 0
// PreparePlayerApemans ;
  77: CALL 2164 0 0
// Action ;
  81: CALL 11315 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 42
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 43
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 44
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 23
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 24
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 40
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 41
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 30
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 21
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 22
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 17
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 46
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 39
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 25
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 800 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 800
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 29
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 33
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 31
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 32
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 37
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 38
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 34
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 28
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 42
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 42
 611: NOT
 612: PPUSH
 613: LD_EXP 44
 617: PPUSH
 618: CALL 44665 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 15
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 44665 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 42
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 42
 804: NOT
 805: PPUSH
 806: LD_EXP 44
 810: PPUSH
 811: CALL 44665 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 44
 925: PPUSH
 926: CALL 44665 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 44
1040: PPUSH
1041: CALL 44665 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 42
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 42
1154: NOT
1155: PPUSH
1156: LD_EXP 44
1160: PPUSH
1161: CALL 44665 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 42
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 42
1274: NOT
1275: PPUSH
1276: LD_EXP 44
1280: PPUSH
1281: CALL 44665 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 42
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 42
1394: NOT
1395: PPUSH
1396: LD_EXP 44
1400: PPUSH
1401: CALL 44665 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 42
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 42
1514: NOT
1515: PPUSH
1516: LD_EXP 44
1520: PPUSH
1521: CALL 44665 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; Mike := PrepareUnit ( Mike , ( not debugMode ) , mission_prefix_prev ) ;
1567: LD_ADDR_EXP 11
1571: PUSH
1572: LD_STRING Mike
1574: PPUSH
1575: LD_EXP 42
1579: NOT
1580: PPUSH
1581: LD_EXP 44
1585: PPUSH
1586: CALL 44665 0 3
1590: ST_TO_ADDR
// if Mike then
1591: LD_EXP 11
1595: IFFALSE 1612
// PlaceUnitArea ( Mike , PlayerSpawn , false ) ;
1597: LD_EXP 11
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// end ;
1612: LD_VAR 0 1
1616: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1617: LD_INT 0
1619: PPUSH
1620: PPUSH
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1625: LD_ADDR_VAR 0 5
1629: PUSH
1630: LD_STRING 06_VehiclesIn06_1
1632: PPUSH
1633: EMPTY
1634: PPUSH
1635: CALL_OW 30
1639: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1640: LD_ADDR_EXP 40
1644: PUSH
1645: LD_STRING 06_ResourcesInCargo06_1
1647: PPUSH
1648: EMPTY
1649: PPUSH
1650: CALL_OW 30
1654: ST_TO_ADDR
// cargoList := [ ] ;
1655: LD_ADDR_VAR 0 6
1659: PUSH
1660: EMPTY
1661: ST_TO_ADDR
// uc_side := 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// if vehicles then
1670: LD_VAR 0 5
1674: IFFALSE 2021
// begin for i := 1 to vehicles do
1676: LD_ADDR_VAR 0 2
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_VAR 0 5
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1841
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_VAR 0 5
1703: PUSH
1704: LD_VAR 0 2
1708: ARRAY
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1714: LD_ADDR_OWVAR 37
1718: PUSH
1719: LD_VAR 0 5
1723: PUSH
1724: LD_VAR 0 2
1728: ARRAY
1729: PUSH
1730: LD_INT 2
1732: ARRAY
1733: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1734: LD_ADDR_OWVAR 39
1738: PUSH
1739: LD_VAR 0 5
1743: PUSH
1744: LD_VAR 0 2
1748: ARRAY
1749: PUSH
1750: LD_INT 3
1752: ARRAY
1753: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1754: LD_ADDR_OWVAR 38
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 4
1772: ARRAY
1773: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1774: LD_ADDR_OWVAR 40
1778: PUSH
1779: LD_VAR 0 5
1783: PUSH
1784: LD_VAR 0 2
1788: ARRAY
1789: PUSH
1790: LD_INT 5
1792: ARRAY
1793: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1794: LD_ADDR_OWVAR 41
1798: PUSH
1799: LD_INT 40
1801: ST_TO_ADDR
// veh := CreateVehicle ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: CALL_OW 45
1811: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1812: LD_VAR 0 4
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1824: LD_VAR 0 4
1828: PPUSH
1829: LD_INT 2
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// end ;
1839: GO 1691
1841: POP
1842: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 22
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 21
1860: PUSH
1861: LD_INT 2
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 34
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// if cargoList then
1888: LD_VAR 0 6
1892: IFFALSE 2021
// for i := 1 to cargoList do
1894: LD_ADDR_VAR 0 2
1898: PUSH
1899: DOUBLE
1900: LD_INT 1
1902: DEC
1903: ST_TO_ADDR
1904: LD_VAR 0 6
1908: PUSH
1909: FOR_TO
1910: IFFALSE 2019
// begin if resources then
1912: LD_EXP 40
1916: IFFALSE 2017
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 2
1927: ARRAY
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_EXP 40
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: PUSH
1943: LD_INT 1
1945: ARRAY
1946: PPUSH
1947: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1951: LD_VAR 0 6
1955: PUSH
1956: LD_VAR 0 2
1960: ARRAY
1961: PPUSH
1962: LD_INT 2
1964: PPUSH
1965: LD_EXP 40
1969: PUSH
1970: LD_VAR 0 2
1974: ARRAY
1975: PUSH
1976: LD_INT 2
1978: ARRAY
1979: PPUSH
1980: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1984: LD_VAR 0 6
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: PPUSH
1995: LD_INT 3
1997: PPUSH
1998: LD_EXP 40
2002: PUSH
2003: LD_VAR 0 2
2007: ARRAY
2008: PUSH
2009: LD_INT 3
2011: ARRAY
2012: PPUSH
2013: CALL_OW 291
// end ; end ;
2017: GO 1909
2019: POP
2020: POP
// end ; end ;
2021: LD_VAR 0 1
2025: RET
// export function PrepareOthers ; var i , veh ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// uc_side := 1 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// uc_nation := 1 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2047: LD_ADDR_EXP 12
2051: PUSH
2052: LD_STRING OthersIn06
2054: PPUSH
2055: CALL_OW 31
2059: ST_TO_ADDR
// for i in others do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_EXP 12
2069: PUSH
2070: FOR_IN
2071: IFFALSE 2157
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: LD_INT 1
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 21
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 58
2100: PUSH
2101: EMPTY
2102: LIST
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PPUSH
2109: CALL_OW 69
2113: ST_TO_ADDR
// if veh then
2114: LD_VAR 0 3
2118: IFFALSE 2140
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2120: LD_VAR 0 2
2124: PPUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 52
2138: GO 2155
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end ;
2155: GO 2070
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// uc_side = 1 ;
2169: LD_ADDR_OWVAR 20
2173: PUSH
2174: LD_INT 1
2176: ST_TO_ADDR
// uc_nation = 0 ;
2177: LD_ADDR_OWVAR 21
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2185: LD_ADDR_EXP 13
2189: PUSH
2190: LD_STRING ApeIn06
2192: PPUSH
2193: CALL_OW 31
2197: ST_TO_ADDR
// if not ape then
2198: LD_EXP 13
2202: NOT
2203: IFFALSE 2207
// exit ;
2205: GO 2239
// for i in ape do
2207: LD_ADDR_VAR 0 2
2211: PUSH
2212: LD_EXP 13
2216: PUSH
2217: FOR_IN
2218: IFFALSE 2237
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
2235: GO 2217
2237: POP
2238: POP
// end ;
2239: LD_VAR 0 1
2243: RET
// export function PrepareDenis ; var xy , i ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
// uc_side := 4 ;
2249: LD_ADDR_OWVAR 20
2253: PUSH
2254: LD_INT 4
2256: ST_TO_ADDR
// uc_nation := 1 ;
2257: LD_ADDR_OWVAR 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_INT 63
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 70
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 83
2292: PUSH
2293: LD_INT 1
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 16
2302: PUSH
2303: LD_INT 1
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 27
2312: PUSH
2313: LD_INT 1
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 38
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 54
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2360: LD_ADDR_EXP 9
2364: PUSH
2365: LD_STRING Denis
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_EXP 44
2375: PPUSH
2376: CALL 44665 0 3
2380: ST_TO_ADDR
// if not Denis then
2381: LD_EXP 9
2385: NOT
2386: IFFALSE 2390
// exit ;
2388: GO 2531
// for i = 1 to xy do
2390: LD_ADDR_VAR 0 3
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_VAR 0 2
2404: PUSH
2405: FOR_TO
2406: IFFALSE 2505
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: CALL_OW 428
2442: PUSH
2443: LD_INT 0
2445: EQUAL
2446: IFFALSE 2503
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2448: LD_EXP 9
2452: PPUSH
2453: LD_VAR 0 2
2457: PUSH
2458: LD_VAR 0 3
2462: ARRAY
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: PPUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_VAR 0 3
2477: ARRAY
2478: PUSH
2479: LD_INT 2
2481: ARRAY
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL_OW 48
// if IsPlaced ( Denis ) then
2490: LD_EXP 9
2494: PPUSH
2495: CALL_OW 305
2499: IFFALSE 2503
// break ;
2501: GO 2505
// end ;
2503: GO 2405
2505: POP
2506: POP
// SetClass ( Denis , 4 ) ;
2507: LD_EXP 9
2511: PPUSH
2512: LD_INT 4
2514: PPUSH
2515: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2519: LD_EXP 9
2523: PPUSH
2524: LD_INT 750
2526: PPUSH
2527: CALL_OW 234
// end ;
2531: LD_VAR 0 1
2535: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2536: LD_INT 0
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// area := HarrisonSupportArea ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// dir := 2 ;
2551: LD_ADDR_VAR 0 5
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// if debugMode or FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2559: LD_EXP 42
2563: IFTRUE 2586
2565: PUSH
2566: LD_VAR 0 4
2570: PPUSH
2571: LD_INT 21
2573: PUSH
2574: LD_INT 3
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PPUSH
2581: CALL_OW 70
2585: OR
2586: IFFALSE 2604
// begin area := HarrisonSupportArea2 ;
2588: LD_ADDR_VAR 0 4
2592: PUSH
2593: LD_INT 31
2595: ST_TO_ADDR
// dir := 1 ;
2596: LD_ADDR_VAR 0 5
2600: PUSH
2601: LD_INT 1
2603: ST_TO_ADDR
// end ; uc_side := 1 ;
2604: LD_ADDR_OWVAR 20
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// uc_nation := 1 ;
2612: LD_ADDR_OWVAR 21
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// hc_class := class_engineer ;
2620: LD_ADDR_OWVAR 28
2624: PUSH
2625: LD_INT 2
2627: ST_TO_ADDR
// hc_sex := sex_male ;
2628: LD_ADDR_OWVAR 27
2632: PUSH
2633: LD_INT 1
2635: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2636: LD_ADDR_OWVAR 33
2640: PUSH
2641: LD_STRING SecondCharsGal
2643: ST_TO_ADDR
// hc_face_number := 52 ;
2644: LD_ADDR_OWVAR 34
2648: PUSH
2649: LD_INT 52
2651: ST_TO_ADDR
// hc_name := Craig Brown ;
2652: LD_ADDR_OWVAR 26
2656: PUSH
2657: LD_STRING Craig Brown
2659: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2660: LD_ADDR_OWVAR 29
2664: PUSH
2665: LD_INT 10
2667: PUSH
2668: LD_INT 10
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2675: LD_ADDR_OWVAR 30
2679: PUSH
2680: LD_INT 0
2682: PUSH
2683: LD_INT 2
2685: PUSH
2686: LD_INT 0
2688: PUSH
2689: LD_INT 0
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2698: LD_ADDR_OWVAR 31
2702: PUSH
2703: LD_INT 2
2705: PUSH
2706: LD_INT 3
2708: PUSH
2709: LD_INT 0
2711: PUSH
2712: LD_INT 0
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2721: LD_ADDR_EXP 18
2725: PUSH
2726: CALL_OW 44
2730: ST_TO_ADDR
// hc_class := class_soldier ;
2731: LD_ADDR_OWVAR 28
2735: PUSH
2736: LD_INT 1
2738: ST_TO_ADDR
// hc_sex := sex_female ;
2739: LD_ADDR_OWVAR 27
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2747: LD_ADDR_OWVAR 33
2751: PUSH
2752: LD_STRING SecondCharsGal
2754: ST_TO_ADDR
// hc_face_number := 42 ;
2755: LD_ADDR_OWVAR 34
2759: PUSH
2760: LD_INT 42
2762: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2763: LD_ADDR_OWVAR 29
2767: PUSH
2768: LD_INT 11
2770: PUSH
2771: LD_INT 10
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2778: LD_ADDR_OWVAR 26
2782: PUSH
2783: LD_STRING Ingrid Jonsson
2785: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2786: LD_ADDR_OWVAR 30
2790: PUSH
2791: LD_INT 1
2793: PUSH
2794: LD_INT 1
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: LD_INT 0
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2809: LD_ADDR_OWVAR 31
2813: PUSH
2814: LD_INT 3
2816: PUSH
2817: LD_INT 1
2819: PUSH
2820: LD_INT 1
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: ST_TO_ADDR
// HarrSupp2 := CreateHuman ;
2832: LD_ADDR_EXP 19
2836: PUSH
2837: CALL_OW 44
2841: ST_TO_ADDR
// vc_engine := engine_combustion ;
2842: LD_ADDR_OWVAR 39
2846: PUSH
2847: LD_INT 1
2849: ST_TO_ADDR
// vc_control := control_manual ;
2850: LD_ADDR_OWVAR 38
2854: PUSH
2855: LD_INT 1
2857: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2858: LD_ADDR_OWVAR 40
2862: PUSH
2863: LD_INT 5
2865: PUSH
2866: LD_INT 5
2868: PUSH
2869: LD_INT 3
2871: PUSH
2872: LD_INT 3
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: LIST
2879: LIST
2880: PUSH
2881: LD_OWVAR 67
2885: ARRAY
2886: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2887: LD_ADDR_OWVAR 37
2891: PUSH
2892: LD_INT 2
2894: ST_TO_ADDR
// veh := CreateVehicle ;
2895: LD_ADDR_VAR 0 3
2899: PUSH
2900: CALL_OW 45
2904: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2905: LD_VAR 0 3
2909: PPUSH
2910: LD_VAR 0 5
2914: PPUSH
2915: CALL_OW 233
// repeat wait ( 10 ) ;
2919: LD_INT 10
2921: PPUSH
2922: CALL_OW 67
// until PlaceUnitArea ( veh , area , false ) ;
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_VAR 0 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
2943: IFFALSE 2919
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2945: LD_EXP 18
2949: PPUSH
2950: LD_VAR 0 3
2954: PPUSH
2955: CALL_OW 52
// SetFuel ( veh , 50 ) ;
2959: LD_VAR 0 3
2963: PPUSH
2964: LD_INT 50
2966: PPUSH
2967: CALL_OW 240
// uc_side := 1 ;
2971: LD_ADDR_OWVAR 20
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// uc_nation := 1 ;
2979: LD_ADDR_OWVAR 21
2983: PUSH
2984: LD_INT 1
2986: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2987: LD_ADDR_OWVAR 40
2991: PUSH
2992: LD_INT 4
2994: PUSH
2995: LD_INT 4
2997: PUSH
2998: LD_INT 2
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: PUSH
3010: LD_OWVAR 67
3014: ARRAY
3015: ST_TO_ADDR
// veh := CreateVehicle ;
3016: LD_ADDR_VAR 0 3
3020: PUSH
3021: CALL_OW 45
3025: ST_TO_ADDR
// SetDir ( veh , dir ) ;
3026: LD_VAR 0 3
3030: PPUSH
3031: LD_VAR 0 5
3035: PPUSH
3036: CALL_OW 233
// repeat wait ( 10 ) ;
3040: LD_INT 10
3042: PPUSH
3043: CALL_OW 67
// until PlaceUnitArea ( veh , area , false ) ;
3047: LD_VAR 0 3
3051: PPUSH
3052: LD_VAR 0 4
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 49
3064: IFFALSE 3040
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3066: LD_EXP 19
3070: PPUSH
3071: LD_VAR 0 3
3075: PPUSH
3076: CALL_OW 52
// SetFuel ( veh , 50 ) ;
3080: LD_VAR 0 3
3084: PPUSH
3085: LD_INT 50
3087: PPUSH
3088: CALL_OW 240
// end ;
3092: LD_VAR 0 1
3096: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
3101: PPUSH
3102: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3103: LD_ADDR_VAR 0 4
3107: PUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 23
3120: PUSH
3121: LD_INT 1
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 26
3130: PUSH
3131: LD_INT 1
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: PPUSH
3143: CALL_OW 69
3147: PUSH
3148: LD_EXP 3
3152: PUSH
3153: LD_EXP 4
3157: PUSH
3158: LD_EXP 8
3162: PUSH
3163: LD_EXP 9
3167: PUSH
3168: LD_EXP 5
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: DIFF
3180: ST_TO_ADDR
// for i in _tmp do
3181: LD_ADDR_VAR 0 2
3185: PUSH
3186: LD_VAR 0 4
3190: PUSH
3191: FOR_IN
3192: IFFALSE 3235
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3194: LD_VAR 0 2
3198: PPUSH
3199: LD_INT 32
3201: PPUSH
3202: CALL_OW 308
3206: IFFALSE 3219
3208: PUSH
3209: LD_VAR 0 2
3213: PPUSH
3214: CALL_OW 302
3218: AND
3219: IFFALSE 3233
// begin tmp := i ;
3221: LD_ADDR_VAR 0 3
3225: PUSH
3226: LD_VAR 0 2
3230: ST_TO_ADDR
// break ;
3231: GO 3235
// end ;
3233: GO 3191
3235: POP
3236: POP
// if not tmp then
3237: LD_VAR 0 3
3241: NOT
3242: IFFALSE 3254
// tmp := JMM ;
3244: LD_ADDR_VAR 0 3
3248: PUSH
3249: LD_EXP 1
3253: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3254: LD_INT 35
3256: PPUSH
3257: CALL_OW 67
// if IsDead ( tmp ) then
3261: LD_VAR 0 3
3265: PPUSH
3266: CALL_OW 301
3270: IFFALSE 3282
// tmp := JMM ;
3272: LD_ADDR_VAR 0 3
3276: PUSH
3277: LD_EXP 1
3281: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3282: LD_INT 81
3284: PUSH
3285: LD_INT 1
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 91
3294: PUSH
3295: LD_VAR 0 3
3299: PUSH
3300: LD_INT 15
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: NOT
3317: IFTRUE 3329
3319: PUSH
3320: LD_EXP 27
3324: PUSH
3325: LD_INT 6300
3327: LESS
3328: OR
3329: IFFALSE 3254
// blockSpawn := 1 ;
3331: LD_ADDR_EXP 30
3335: PUSH
3336: LD_INT 1
3338: ST_TO_ADDR
// uc_side := 4 ;
3339: LD_ADDR_OWVAR 20
3343: PUSH
3344: LD_INT 4
3346: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3347: LD_ADDR_EXP 16
3351: PUSH
3352: LD_STRING Joan
3354: PPUSH
3355: LD_INT 0
3357: PPUSH
3358: LD_EXP 44
3362: PPUSH
3363: CALL 44665 0 3
3367: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3368: LD_EXP 16
3372: PPUSH
3373: LD_VAR 0 3
3377: PPUSH
3378: CALL_OW 250
3382: PPUSH
3383: LD_VAR 0 3
3387: PPUSH
3388: CALL_OW 251
3392: PPUSH
3393: LD_INT 5
3395: PPUSH
3396: LD_INT 1
3398: PPUSH
3399: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3403: LD_EXP 16
3407: PPUSH
3408: LD_INT 250
3410: PPUSH
3411: CALL_OW 234
// InGameOn ;
3415: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3419: LD_EXP 16
3423: PPUSH
3424: CALL_OW 87
// wait ( 0 0$2 ) ;
3428: LD_INT 70
3430: PPUSH
3431: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3435: LD_VAR 0 3
3439: PPUSH
3440: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: CALL_OW 122
// wait ( 0 0$1 ) ;
3453: LD_INT 35
3455: PPUSH
3456: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3460: LD_VAR 0 3
3464: PPUSH
3465: LD_EXP 16
3469: PPUSH
3470: CALL_OW 112
// wait ( 0 0$2 ) ;
3474: LD_INT 70
3476: PPUSH
3477: CALL_OW 67
// DialogueOn ;
3481: CALL_OW 6
// if tmp = JMM then
3485: LD_VAR 0 3
3489: PUSH
3490: LD_EXP 1
3494: EQUAL
3495: IFFALSE 3644
// begin ComTurnUnit ( JMM , Joan ) ;
3497: LD_EXP 1
3501: PPUSH
3502: LD_EXP 16
3506: PPUSH
3507: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3511: LD_EXP 1
3515: PPUSH
3516: LD_STRING D5b-JMM-1
3518: PPUSH
3519: CALL_OW 88
// DialogueOff ;
3523: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3527: LD_EXP 16
3531: PPUSH
3532: LD_INT 500
3534: PPUSH
3535: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3539: LD_EXP 16
3543: PPUSH
3544: LD_EXP 1
3548: PPUSH
3549: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3553: LD_EXP 1
3557: PPUSH
3558: LD_EXP 16
3562: PPUSH
3563: CALL_OW 119
// wait ( 0 0$1 ) ;
3567: LD_INT 35
3569: PPUSH
3570: CALL_OW 67
// DialogueOn ;
3574: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3578: LD_EXP 16
3582: PPUSH
3583: LD_STRING D5b-Joan-1
3585: PPUSH
3586: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3590: LD_EXP 1
3594: PPUSH
3595: LD_STRING D5b-JMM-2
3597: PPUSH
3598: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3602: LD_EXP 16
3606: PPUSH
3607: LD_STRING D5b-Joan-2
3609: PPUSH
3610: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3614: LD_EXP 1
3618: PPUSH
3619: LD_STRING D5b-JMM-3
3621: PPUSH
3622: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3626: LD_EXP 16
3630: PPUSH
3631: LD_STRING D5b-Joan-3
3633: PPUSH
3634: CALL_OW 88
// DialogueOff ;
3638: CALL_OW 7
// end else
3642: GO 4112
// begin ComTurnUnit ( tmp , Joan ) ;
3644: LD_VAR 0 3
3648: PPUSH
3649: LD_EXP 16
3653: PPUSH
3654: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3658: LD_VAR 0 3
3662: PPUSH
3663: LD_STRING D5a-Sol1-1
3665: PPUSH
3666: CALL_OW 88
// DialogueOff ;
3670: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3674: LD_EXP 16
3678: PPUSH
3679: LD_INT 500
3681: PPUSH
3682: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3686: LD_EXP 16
3690: PPUSH
3691: LD_VAR 0 3
3695: PPUSH
3696: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3700: LD_VAR 0 3
3704: PPUSH
3705: LD_EXP 16
3709: PPUSH
3710: CALL_OW 119
// wait ( 0 0$1 ) ;
3714: LD_INT 35
3716: PPUSH
3717: CALL_OW 67
// DialogueOn ;
3721: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3725: LD_EXP 16
3729: PPUSH
3730: LD_STRING D5a-Joan-1
3732: PPUSH
3733: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3737: LD_VAR 0 3
3741: PPUSH
3742: LD_STRING D5a-Sol1-2
3744: PPUSH
3745: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3749: LD_EXP 16
3753: PPUSH
3754: LD_STRING D5a-Joan-2
3756: PPUSH
3757: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_STRING D5a-Sol1-3
3768: PPUSH
3769: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3773: LD_EXP 16
3777: PPUSH
3778: LD_STRING D5a-Joan-3
3780: PPUSH
3781: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3785: LD_VAR 0 3
3789: PPUSH
3790: LD_STRING D5a-Sol1-4
3792: PPUSH
3793: CALL_OW 88
// DialogueOff ;
3797: CALL_OW 7
// if GetDistUnits ( JMM , Joan ) > 10 then
3801: LD_EXP 1
3805: PPUSH
3806: LD_EXP 16
3810: PPUSH
3811: CALL_OW 296
3815: PUSH
3816: LD_INT 10
3818: GREATER
3819: IFFALSE 3904
// begin InGameOff ;
3821: CALL_OW 9
// ComMoveUnit ( Joan , tmp ) ;
3825: LD_EXP 16
3829: PPUSH
3830: LD_VAR 0 3
3834: PPUSH
3835: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
3839: LD_INT 35
3841: PPUSH
3842: CALL_OW 67
// until GetDistUnits ( JMM , Joan ) < 8 or IsDead ( Joan ) ;
3846: LD_EXP 1
3850: PPUSH
3851: LD_EXP 16
3855: PPUSH
3856: CALL_OW 296
3860: PUSH
3861: LD_INT 8
3863: LESS
3864: IFTRUE 3877
3866: PUSH
3867: LD_EXP 16
3871: PPUSH
3872: CALL_OW 301
3876: OR
3877: IFFALSE 3839
// if IsDead ( Joan ) then
3879: LD_EXP 16
3883: PPUSH
3884: CALL_OW 301
3888: IFFALSE 3900
// begin blockSpawn := false ;
3890: LD_ADDR_EXP 30
3894: PUSH
3895: LD_INT 0
3897: ST_TO_ADDR
// exit ;
3898: GO 4243
// end ; InGameOn ;
3900: CALL_OW 8
// end ; if JMM in FilterAllUnits ( [ f_driving ] ) then
3904: LD_EXP 1
3908: PUSH
3909: LD_INT 55
3911: PUSH
3912: EMPTY
3913: LIST
3914: PPUSH
3915: CALL_OW 69
3919: IN
3920: IFFALSE 3943
// begin ComMoveUnit ( JMM , Joan ) ;
3922: LD_EXP 1
3926: PPUSH
3927: LD_EXP 16
3931: PPUSH
3932: CALL_OW 112
// wait ( 0 0$05 ) ;
3936: LD_INT 175
3938: PPUSH
3939: CALL_OW 67
// end ; ComExit ( JMM ) ;
3943: LD_EXP 1
3947: PPUSH
3948: CALL 83253 0 1
// wait ( 0 0$1 ) ;
3952: LD_INT 35
3954: PPUSH
3955: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3959: LD_INT 35
3961: PPUSH
3962: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3966: LD_EXP 16
3970: PUSH
3971: LD_VAR 0 3
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: PPUSH
3980: LD_EXP 1
3984: PPUSH
3985: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3989: LD_EXP 16
3993: PPUSH
3994: LD_EXP 1
3998: PPUSH
3999: CALL_OW 296
4003: PUSH
4004: LD_INT 5
4006: LESS
4007: IFFALSE 3959
// ComTurnUnit ( Joan , JMM ) ;
4009: LD_EXP 16
4013: PPUSH
4014: LD_EXP 1
4018: PPUSH
4019: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
4023: LD_EXP 1
4027: PPUSH
4028: LD_EXP 16
4032: PPUSH
4033: CALL_OW 119
// wait ( 0 0$1 ) ;
4037: LD_INT 35
4039: PPUSH
4040: CALL_OW 67
// DialogueOn ;
4044: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
4048: LD_EXP 16
4052: PPUSH
4053: LD_STRING D5a-Joan-4
4055: PPUSH
4056: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
4060: LD_EXP 1
4064: PPUSH
4065: LD_STRING D5a-JMM-4
4067: PPUSH
4068: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
4072: LD_EXP 16
4076: PPUSH
4077: LD_STRING D5a-Joan-5
4079: PPUSH
4080: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
4084: LD_EXP 1
4088: PPUSH
4089: LD_STRING D5a-JMM-5
4091: PPUSH
4092: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
4096: LD_EXP 16
4100: PPUSH
4101: LD_STRING D5a-Joan-6
4103: PPUSH
4104: CALL_OW 88
// DialogueOff ;
4108: CALL_OW 7
// end ; DialogueOn ;
4112: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4116: LD_EXP 1
4120: PPUSH
4121: LD_STRING D6-JMM-1
4123: PPUSH
4124: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4128: LD_EXP 16
4132: PPUSH
4133: LD_STRING D6-Joan-1
4135: PPUSH
4136: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4140: LD_EXP 1
4144: PPUSH
4145: LD_STRING D6-JMM-2
4147: PPUSH
4148: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4152: LD_EXP 16
4156: PPUSH
4157: LD_STRING D6-Joan-2
4159: PPUSH
4160: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4164: LD_EXP 1
4168: PPUSH
4169: LD_STRING D6-JMM-3
4171: PPUSH
4172: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4176: LD_EXP 16
4180: PPUSH
4181: LD_STRING D6-Joan-3
4183: PPUSH
4184: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4188: LD_EXP 1
4192: PPUSH
4193: LD_STRING D6-JMM-4
4195: PPUSH
4196: CALL_OW 88
// DialogueOff ;
4200: CALL_OW 7
// InGameOff ;
4204: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4208: LD_EXP 16
4212: PPUSH
4213: LD_INT 1
4215: PPUSH
4216: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4220: LD_STRING MJ
4222: PPUSH
4223: CALL_OW 337
// joanStatus = 1 ;
4227: LD_ADDR_EXP 17
4231: PUSH
4232: LD_INT 1
4234: ST_TO_ADDR
// blockSpawn = 0 ;
4235: LD_ADDR_EXP 30
4239: PUSH
4240: LD_INT 0
4242: ST_TO_ADDR
// end ;
4243: LD_VAR 0 1
4247: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4248: LD_INT 0
4250: PPUSH
4251: PPUSH
// if not number or number > 8 then
4252: LD_VAR 0 1
4256: NOT
4257: IFTRUE 4269
4259: PUSH
4260: LD_VAR 0 1
4264: PUSH
4265: LD_INT 8
4267: GREATER
4268: OR
4269: IFFALSE 4273
// exit ;
4271: GO 5821
// repeat wait ( 0 0$7 ) ;
4273: LD_INT 245
4275: PPUSH
4276: CALL_OW 67
// until blockSpawn = 0 ;
4280: LD_EXP 30
4284: PUSH
4285: LD_INT 0
4287: EQUAL
4288: IFFALSE 4273
// uc_side := 1 ;
4290: LD_ADDR_OWVAR 20
4294: PUSH
4295: LD_INT 1
4297: ST_TO_ADDR
// uc_nation := 1 ;
4298: LD_ADDR_OWVAR 21
4302: PUSH
4303: LD_INT 1
4305: ST_TO_ADDR
// InitHc ;
4306: CALL_OW 19
// if number = 1 then
4310: LD_VAR 0 1
4314: PUSH
4315: LD_INT 1
4317: EQUAL
4318: IFFALSE 4494
// begin hc_class := 3 ;
4320: LD_ADDR_OWVAR 28
4324: PUSH
4325: LD_INT 3
4327: ST_TO_ADDR
// hc_sex := sex_male ;
4328: LD_ADDR_OWVAR 27
4332: PUSH
4333: LD_INT 1
4335: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4336: LD_ADDR_OWVAR 33
4340: PUSH
4341: LD_STRING SecondCharsGal
4343: ST_TO_ADDR
// hc_face_number := 55 ;
4344: LD_ADDR_OWVAR 34
4348: PUSH
4349: LD_INT 55
4351: ST_TO_ADDR
// hc_name := George McCarthy ;
4352: LD_ADDR_OWVAR 26
4356: PUSH
4357: LD_STRING George McCarthy
4359: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4360: LD_ADDR_OWVAR 29
4364: PUSH
4365: LD_INT 11
4367: PUSH
4368: LD_INT 10
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
4375: LD_ADDR_OWVAR 30
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: LD_INT 0
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: LD_INT 0
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
4398: LD_ADDR_OWVAR 31
4402: PUSH
4403: LD_INT 0
4405: PUSH
4406: LD_INT 2
4408: PUSH
4409: LD_INT 3
4411: PUSH
4412: LD_INT 1
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: ST_TO_ADDR
// un = CreateHuman ;
4421: LD_ADDR_VAR 0 3
4425: PUSH
4426: CALL_OW 44
4430: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4431: LD_VAR 0 3
4435: PPUSH
4436: LD_INT 23
4438: PPUSH
4439: LD_INT 1
4441: PPUSH
4442: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4446: LD_VAR 0 3
4450: PPUSH
4451: CALL_OW 87
// wait ( 0 0$1 ) ;
4455: LD_INT 35
4457: PPUSH
4458: CALL_OW 67
// DialogueOn ;
4462: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4466: LD_VAR 0 3
4470: PPUSH
4471: LD_STRING D11d-Sol4-1
4473: PPUSH
4474: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4478: LD_EXP 1
4482: PPUSH
4483: LD_STRING D11d-JMM-1
4485: PPUSH
4486: CALL_OW 88
// DialogueOff ;
4490: CALL_OW 7
// end ; if number = 2 then
4494: LD_VAR 0 1
4498: PUSH
4499: LD_INT 2
4501: EQUAL
4502: IFFALSE 4678
// begin hc_class := 1 ;
4504: LD_ADDR_OWVAR 28
4508: PUSH
4509: LD_INT 1
4511: ST_TO_ADDR
// hc_sex := sex_male ;
4512: LD_ADDR_OWVAR 27
4516: PUSH
4517: LD_INT 1
4519: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4520: LD_ADDR_OWVAR 33
4524: PUSH
4525: LD_STRING AmGalRemake
4527: ST_TO_ADDR
// hc_face_number := 7 ;
4528: LD_ADDR_OWVAR 34
4532: PUSH
4533: LD_INT 7
4535: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4536: LD_ADDR_OWVAR 26
4540: PUSH
4541: LD_STRING Bobby Jordan
4543: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4544: LD_ADDR_OWVAR 29
4548: PUSH
4549: LD_INT 9
4551: PUSH
4552: LD_INT 11
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 2 ] ;
4559: LD_ADDR_OWVAR 30
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: LD_INT 0
4569: PUSH
4570: LD_INT 0
4572: PUSH
4573: LD_INT 2
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
4582: LD_ADDR_OWVAR 31
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: LD_INT 1
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: ST_TO_ADDR
// un = CreateHuman ;
4605: LD_ADDR_VAR 0 3
4609: PUSH
4610: CALL_OW 44
4614: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4615: LD_VAR 0 3
4619: PPUSH
4620: LD_INT 24
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: CALL_OW 49
// wait ( 0 0$1 ) ;
4630: LD_INT 35
4632: PPUSH
4633: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4637: LD_VAR 0 3
4641: PPUSH
4642: CALL_OW 87
// DialogueOn ;
4646: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4650: LD_VAR 0 3
4654: PPUSH
4655: LD_STRING D11b-Sol3-1
4657: PPUSH
4658: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4662: LD_EXP 1
4666: PPUSH
4667: LD_STRING D11b-JMM-1
4669: PPUSH
4670: CALL_OW 88
// DialogueOff ;
4674: CALL_OW 7
// end ; if number = 3 then
4678: LD_VAR 0 1
4682: PUSH
4683: LD_INT 3
4685: EQUAL
4686: IFFALSE 4850
// begin hc_class := 1 ;
4688: LD_ADDR_OWVAR 28
4692: PUSH
4693: LD_INT 1
4695: ST_TO_ADDR
// hc_sex := sex_male ;
4696: LD_ADDR_OWVAR 27
4700: PUSH
4701: LD_INT 1
4703: ST_TO_ADDR
// hc_gallery := DJ ;
4704: LD_ADDR_OWVAR 33
4708: PUSH
4709: LD_STRING DJ
4711: ST_TO_ADDR
// hc_face_number := 1 ;
4712: LD_ADDR_OWVAR 34
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// hc_name := Darius Dajay ;
4720: LD_ADDR_OWVAR 26
4724: PUSH
4725: LD_STRING Darius Dajay
4727: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4728: LD_ADDR_OWVAR 29
4732: PUSH
4733: LD_INT 11
4735: PUSH
4736: LD_INT 11
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
4743: LD_ADDR_OWVAR 30
4747: PUSH
4748: LD_INT 2
4750: PUSH
4751: LD_INT 0
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: LD_INT 0
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: ST_TO_ADDR
// hc_skills := [ 5 , 0 , 1 , 0 ] ;
4766: LD_ADDR_OWVAR 31
4770: PUSH
4771: LD_INT 5
4773: PUSH
4774: LD_INT 0
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: LD_INT 0
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: ST_TO_ADDR
// un = CreateHuman ;
4789: LD_ADDR_VAR 0 3
4793: PUSH
4794: CALL_OW 44
4798: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 25
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: CALL_OW 87
// wait ( 0 0$1 ) ;
4823: LD_INT 35
4825: PPUSH
4826: CALL_OW 67
// DialogueOn ;
4830: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4834: LD_VAR 0 3
4838: PPUSH
4839: LD_STRING D11f-Sol5-1
4841: PPUSH
4842: CALL_OW 88
// DialogueOff ;
4846: CALL_OW 7
// end ; if number = 4 then
4850: LD_VAR 0 1
4854: PUSH
4855: LD_INT 4
4857: EQUAL
4858: IFFALSE 4995
// begin hc_class := 2 ;
4860: LD_ADDR_OWVAR 28
4864: PUSH
4865: LD_INT 2
4867: ST_TO_ADDR
// hc_sex := sex_female ;
4868: LD_ADDR_OWVAR 27
4872: PUSH
4873: LD_INT 2
4875: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4876: LD_ADDR_OWVAR 33
4880: PUSH
4881: LD_STRING SecondCharsGal
4883: ST_TO_ADDR
// hc_face_number := 46 ;
4884: LD_ADDR_OWVAR 34
4888: PUSH
4889: LD_INT 46
4891: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4892: LD_ADDR_OWVAR 26
4896: PUSH
4897: LD_STRING Sylvia Creak
4899: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4900: LD_ADDR_OWVAR 29
4904: PUSH
4905: LD_INT 10
4907: PUSH
4908: LD_INT 9
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4915: LD_ADDR_OWVAR 30
4919: PUSH
4920: LD_INT 0
4922: PUSH
4923: LD_INT 1
4925: PUSH
4926: LD_INT 1
4928: PUSH
4929: LD_INT 1
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4938: LD_ADDR_OWVAR 31
4942: PUSH
4943: LD_INT 1
4945: PUSH
4946: LD_INT 3
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: LD_INT 1
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: ST_TO_ADDR
// un = CreateHuman ;
4961: LD_ADDR_VAR 0 3
4965: PUSH
4966: CALL_OW 44
4970: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4971: LD_VAR 0 3
4975: PPUSH
4976: LD_INT 26
4978: PPUSH
4979: LD_INT 1
4981: PPUSH
4982: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4986: LD_VAR 0 3
4990: PPUSH
4991: CALL_OW 87
// end ; if number = 5 then
4995: LD_VAR 0 1
4999: PUSH
5000: LD_INT 5
5002: EQUAL
5003: IFFALSE 5179
// begin hc_class := 1 ;
5005: LD_ADDR_OWVAR 28
5009: PUSH
5010: LD_INT 1
5012: ST_TO_ADDR
// hc_sex := sex_female ;
5013: LD_ADDR_OWVAR 27
5017: PUSH
5018: LD_INT 2
5020: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5021: LD_ADDR_OWVAR 33
5025: PUSH
5026: LD_STRING SecondCharsGal
5028: ST_TO_ADDR
// hc_face_number := 37 ;
5029: LD_ADDR_OWVAR 34
5033: PUSH
5034: LD_INT 37
5036: ST_TO_ADDR
// hc_name := Malena Johnson ;
5037: LD_ADDR_OWVAR 26
5041: PUSH
5042: LD_STRING Malena Johnson
5044: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
5045: LD_ADDR_OWVAR 29
5049: PUSH
5050: LD_INT 11
5052: PUSH
5053: LD_INT 10
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5060: LD_ADDR_OWVAR 30
5064: PUSH
5065: LD_INT 1
5067: PUSH
5068: LD_INT 2
5070: PUSH
5071: LD_INT 0
5073: PUSH
5074: LD_INT 0
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: ST_TO_ADDR
// hc_skills := [ 3 , 2 , 1 , 0 ] ;
5083: LD_ADDR_OWVAR 31
5087: PUSH
5088: LD_INT 3
5090: PUSH
5091: LD_INT 2
5093: PUSH
5094: LD_INT 1
5096: PUSH
5097: LD_INT 0
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: ST_TO_ADDR
// un = CreateHuman ;
5106: LD_ADDR_VAR 0 3
5110: PUSH
5111: CALL_OW 44
5115: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
5116: LD_VAR 0 3
5120: PPUSH
5121: LD_INT 27
5123: PPUSH
5124: LD_INT 1
5126: PPUSH
5127: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5131: LD_VAR 0 3
5135: PPUSH
5136: CALL_OW 87
// wait ( 0 0$1 ) ;
5140: LD_INT 35
5142: PPUSH
5143: CALL_OW 67
// DialogueOn ;
5147: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5151: LD_VAR 0 3
5155: PPUSH
5156: LD_STRING D11c-FSol3-1
5158: PPUSH
5159: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5163: LD_EXP 1
5167: PPUSH
5168: LD_STRING D11c-JMM-1
5170: PPUSH
5171: CALL_OW 88
// DialogueOff ;
5175: CALL_OW 7
// end ; if number = 6 then
5179: LD_VAR 0 1
5183: PUSH
5184: LD_INT 6
5186: EQUAL
5187: IFFALSE 5361
// begin hc_class := 1 ;
5189: LD_ADDR_OWVAR 28
5193: PUSH
5194: LD_INT 1
5196: ST_TO_ADDR
// hc_sex := sex_male ;
5197: LD_ADDR_OWVAR 27
5201: PUSH
5202: LD_INT 1
5204: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5205: LD_ADDR_OWVAR 33
5209: PUSH
5210: LD_STRING AmGalRemake
5212: ST_TO_ADDR
// hc_face_number := 1 ;
5213: LD_ADDR_OWVAR 34
5217: PUSH
5218: LD_INT 1
5220: ST_TO_ADDR
// hc_name := Charles Brown ;
5221: LD_ADDR_OWVAR 26
5225: PUSH
5226: LD_STRING Charles Brown
5228: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5229: LD_ADDR_OWVAR 29
5233: PUSH
5234: LD_INT 12
5236: PUSH
5237: LD_INT 11
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
5244: LD_ADDR_OWVAR 30
5248: PUSH
5249: LD_INT 3
5251: PUSH
5252: LD_INT 0
5254: PUSH
5255: LD_INT 0
5257: PUSH
5258: LD_INT 0
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
5267: LD_ADDR_OWVAR 31
5271: PUSH
5272: LD_INT 3
5274: PUSH
5275: LD_INT 1
5277: PUSH
5278: LD_INT 1
5280: PUSH
5281: LD_INT 1
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: ST_TO_ADDR
// un = CreateHuman ;
5290: LD_ADDR_VAR 0 3
5294: PUSH
5295: CALL_OW 44
5299: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5300: LD_VAR 0 3
5304: PPUSH
5305: LD_INT 28
5307: PPUSH
5308: LD_INT 1
5310: PPUSH
5311: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5315: LD_VAR 0 3
5319: PPUSH
5320: CALL_OW 87
// wait ( 0 0$1 ) ;
5324: LD_INT 35
5326: PPUSH
5327: CALL_OW 67
// DialogueOn ;
5331: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5335: LD_VAR 0 3
5339: PPUSH
5340: LD_STRING D4-Sol1-5
5342: PPUSH
5343: CALL_OW 88
// DialogueOff ;
5347: CALL_OW 7
// tempCharles = un ;
5351: LD_ADDR_EXP 14
5355: PUSH
5356: LD_VAR 0 3
5360: ST_TO_ADDR
// end ; if number = 7 then
5361: LD_VAR 0 1
5365: PUSH
5366: LD_INT 7
5368: EQUAL
5369: IFFALSE 5641
// begin hc_class := 1 ;
5371: LD_ADDR_OWVAR 28
5375: PUSH
5376: LD_INT 1
5378: ST_TO_ADDR
// hc_sex := sex_female ;
5379: LD_ADDR_OWVAR 27
5383: PUSH
5384: LD_INT 2
5386: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5387: LD_ADDR_OWVAR 33
5391: PUSH
5392: LD_STRING AmGalRemake
5394: ST_TO_ADDR
// hc_face_number := 2 ;
5395: LD_ADDR_OWVAR 34
5399: PUSH
5400: LD_INT 2
5402: ST_TO_ADDR
// hc_name := Johanna Holland ;
5403: LD_ADDR_OWVAR 26
5407: PUSH
5408: LD_STRING Johanna Holland
5410: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5411: LD_ADDR_OWVAR 29
5415: PUSH
5416: LD_INT 10
5418: PUSH
5419: LD_INT 10
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 1 ] ;
5426: LD_ADDR_OWVAR 30
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: LD_INT 0
5436: PUSH
5437: LD_INT 0
5439: PUSH
5440: LD_INT 1
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 2 ] ;
5449: LD_ADDR_OWVAR 31
5453: PUSH
5454: LD_INT 3
5456: PUSH
5457: LD_INT 0
5459: PUSH
5460: LD_INT 1
5462: PUSH
5463: LD_INT 2
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: ST_TO_ADDR
// un = CreateHuman ;
5472: LD_ADDR_VAR 0 3
5476: PUSH
5477: CALL_OW 44
5481: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5482: LD_VAR 0 3
5486: PPUSH
5487: LD_INT 29
5489: PPUSH
5490: LD_INT 1
5492: PPUSH
5493: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5497: LD_VAR 0 3
5501: PPUSH
5502: CALL_OW 87
// wait ( 0 0$1 ) ;
5506: LD_INT 35
5508: PPUSH
5509: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5513: LD_INT 30
5515: PPUSH
5516: LD_INT 22
5518: PUSH
5519: LD_INT 3
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PPUSH
5526: CALL_OW 70
5530: IFFALSE 5641
// begin DialogueOn ;
5532: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5536: LD_VAR 0 3
5540: PPUSH
5541: CALL_OW 250
5545: PPUSH
5546: LD_VAR 0 3
5550: PPUSH
5551: CALL_OW 251
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: LD_INT 15
5561: NEG
5562: PPUSH
5563: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5567: LD_VAR 0 3
5571: PPUSH
5572: CALL_OW 250
5576: PPUSH
5577: LD_VAR 0 3
5581: PPUSH
5582: CALL_OW 251
5586: PPUSH
5587: LD_INT 1
5589: PPUSH
5590: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5594: LD_VAR 0 3
5598: PPUSH
5599: LD_STRING D11a-FSol2-1
5601: PPUSH
5602: CALL_OW 88
// DialogueOff ;
5606: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5610: LD_INT 3
5612: PPUSH
5613: LD_VAR 0 3
5617: PPUSH
5618: CALL_OW 471
// wait ( 0 0$2 ) ;
5622: LD_INT 70
5624: PPUSH
5625: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5629: LD_INT 3
5631: PPUSH
5632: LD_VAR 0 3
5636: PPUSH
5637: CALL_OW 472
// end ; end ; if number = 8 then
5641: LD_VAR 0 1
5645: PUSH
5646: LD_INT 8
5648: EQUAL
5649: IFFALSE 5805
// begin hc_class := 1 ;
5651: LD_ADDR_OWVAR 28
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// hc_sex := sex_female ;
5659: LD_ADDR_OWVAR 27
5663: PUSH
5664: LD_INT 2
5666: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5667: LD_ADDR_OWVAR 33
5671: PUSH
5672: LD_STRING SecondCharsGal
5674: ST_TO_ADDR
// hc_face_number := 45 ;
5675: LD_ADDR_OWVAR 34
5679: PUSH
5680: LD_INT 45
5682: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5683: LD_ADDR_OWVAR 26
5687: PUSH
5688: LD_STRING Margherite Simpson
5690: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5691: LD_ADDR_OWVAR 29
5695: PUSH
5696: LD_INT 12
5698: PUSH
5699: LD_INT 10
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5706: LD_ADDR_OWVAR 30
5710: PUSH
5711: LD_INT 1
5713: PUSH
5714: LD_INT 2
5716: PUSH
5717: LD_INT 0
5719: PUSH
5720: LD_INT 0
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 1 ] ;
5729: LD_ADDR_OWVAR 31
5733: PUSH
5734: LD_INT 2
5736: PUSH
5737: LD_INT 3
5739: PUSH
5740: LD_INT 0
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: ST_TO_ADDR
// un = CreateHuman ;
5752: LD_ADDR_VAR 0 3
5756: PUSH
5757: CALL_OW 44
5761: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5762: LD_VAR 0 3
5766: PPUSH
5767: LD_INT 33
5769: PPUSH
5770: LD_INT 1
5772: PPUSH
5773: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5777: LD_VAR 0 3
5781: PPUSH
5782: CALL_OW 87
// wait ( 0 0$1 ) ;
5786: LD_INT 35
5788: PPUSH
5789: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5793: LD_VAR 0 3
5797: PPUSH
5798: LD_STRING D11e-FSol4-1
5800: PPUSH
5801: CALL_OW 88
// end ; arrivals := arrivals union un ;
5805: LD_ADDR_EXP 45
5809: PUSH
5810: LD_EXP 45
5814: PUSH
5815: LD_VAR 0 3
5819: UNION
5820: ST_TO_ADDR
// end ; end_of_file
5821: LD_VAR 0 2
5825: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5826: LD_INT 0
5828: PPUSH
5829: PPUSH
// ruAttackers := [ ] ;
5830: LD_ADDR_EXP 48
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5837: LD_ADDR_EXP 49
5841: PUSH
5842: EMPTY
5843: ST_TO_ADDR
// if Difficulty < 3 then
5844: LD_OWVAR 67
5848: PUSH
5849: LD_INT 3
5851: LESS
5852: IFFALSE 5869
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5854: LD_INT 130
5856: PPUSH
5857: LD_INT 81
5859: PPUSH
5860: CALL_OW 428
5864: PPUSH
5865: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5869: LD_INT 3
5871: PPUSH
5872: LD_INT 3
5874: PPUSH
5875: LD_INT 2
5877: PPUSH
5878: LD_EXP 35
5882: PPUSH
5883: LD_EXP 36
5887: PPUSH
5888: CALL_OW 12
5892: PPUSH
5893: LD_INT 2
5895: PPUSH
5896: LD_INT 4
5898: PPUSH
5899: CALL 7702 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5903: LD_INT 3
5905: PPUSH
5906: LD_INT 3
5908: PPUSH
5909: LD_INT 8
5911: PPUSH
5912: LD_EXP 35
5916: PPUSH
5917: LD_EXP 36
5921: PPUSH
5922: CALL_OW 12
5926: PPUSH
5927: LD_INT 1
5929: PPUSH
5930: LD_INT 4
5932: PPUSH
5933: CALL 7702 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5937: LD_INT 3
5939: PPUSH
5940: LD_INT 3
5942: PPUSH
5943: LD_INT 67
5945: PPUSH
5946: LD_EXP 35
5950: PPUSH
5951: LD_EXP 36
5955: PPUSH
5956: CALL_OW 12
5960: PPUSH
5961: LD_INT 1
5963: PPUSH
5964: LD_INT 2
5966: PPUSH
5967: CALL 7702 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5971: LD_INT 3
5973: PPUSH
5974: LD_INT 3
5976: PPUSH
5977: LD_INT 21
5979: PPUSH
5980: LD_EXP 35
5984: PPUSH
5985: LD_EXP 36
5989: PPUSH
5990: CALL_OW 12
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_INT 6
6000: PPUSH
6001: CALL 7702 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
6005: LD_INT 3
6007: PPUSH
6008: LD_INT 3
6010: PPUSH
6011: LD_INT 17
6013: PPUSH
6014: LD_EXP 35
6018: PPUSH
6019: LD_EXP 36
6023: PPUSH
6024: CALL_OW 12
6028: PPUSH
6029: LD_INT 3
6031: PPUSH
6032: LD_INT 6
6034: PPUSH
6035: CALL 7702 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
6039: LD_INT 3
6041: PPUSH
6042: LD_INT 3
6044: PPUSH
6045: LD_INT 32
6047: PPUSH
6048: LD_EXP 35
6052: PPUSH
6053: LD_EXP 36
6057: PPUSH
6058: CALL_OW 12
6062: PPUSH
6063: LD_INT 4
6065: PPUSH
6066: LD_INT 2
6068: PPUSH
6069: CALL 7702 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
6073: LD_ADDR_VAR 0 2
6077: PUSH
6078: LD_INT 22
6080: PUSH
6081: LD_INT 3
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 21
6090: PUSH
6091: LD_INT 3
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: LD_INT 30
6100: PUSH
6101: LD_INT 32
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 69
6117: PUSH
6118: FOR_IN
6119: IFFALSE 6159
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
6121: LD_INT 3
6123: PPUSH
6124: LD_INT 3
6126: PPUSH
6127: LD_VAR 0 2
6131: PPUSH
6132: LD_EXP 35
6136: PPUSH
6137: LD_EXP 36
6141: PPUSH
6142: CALL_OW 12
6146: PPUSH
6147: LD_INT 1
6149: PPUSH
6150: LD_INT 1
6152: PPUSH
6153: CALL 7702 0 6
6157: GO 6118
6159: POP
6160: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6161: LD_ADDR_VAR 0 2
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 21
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 30
6188: PUSH
6189: LD_INT 31
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: PPUSH
6201: CALL_OW 69
6205: PUSH
6206: FOR_IN
6207: IFFALSE 6235
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6209: LD_EXP 35
6213: PPUSH
6214: LD_EXP 36
6218: PPUSH
6219: CALL_OW 12
6223: PPUSH
6224: LD_VAR 0 2
6228: PPUSH
6229: CALL 7812 0 2
6233: GO 6206
6235: POP
6236: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6237: LD_INT 3
6239: PPUSH
6240: LD_INT 32
6242: PPUSH
6243: LD_INT 3
6245: PPUSH
6246: CALL 8091 0 3
// end ;
6250: LD_VAR 0 1
6254: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6255: LD_INT 22
6257: PUSH
6258: LD_INT 3
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 32
6267: PUSH
6268: LD_INT 1
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PPUSH
6279: CALL_OW 69
6283: IFFALSE 6360
6285: GO 6287
6287: DISABLE
6288: LD_INT 0
6290: PPUSH
// begin enable ;
6291: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6292: LD_ADDR_VAR 0 1
6296: PUSH
6297: LD_INT 22
6299: PUSH
6300: LD_INT 3
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 32
6309: PUSH
6310: LD_INT 1
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PPUSH
6321: CALL_OW 69
6325: PUSH
6326: FOR_IN
6327: IFFALSE 6358
// if GetFuel ( i ) < 3 then
6329: LD_VAR 0 1
6333: PPUSH
6334: CALL_OW 261
6338: PUSH
6339: LD_INT 3
6341: LESS
6342: IFFALSE 6356
// SetFuel ( i , 3 ) ;
6344: LD_VAR 0 1
6348: PPUSH
6349: LD_INT 3
6351: PPUSH
6352: CALL_OW 240
6356: GO 6326
6358: POP
6359: POP
// end ;
6360: PPOPN 1
6362: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6363: LD_OWVAR 67
6367: PUSH
6368: LD_INT 1
6370: GREATER
6371: IFFALSE 6942
6373: GO 6375
6375: DISABLE
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
// begin uc_side := 3 ;
6382: LD_ADDR_OWVAR 20
6386: PUSH
6387: LD_INT 3
6389: ST_TO_ADDR
// uc_nation := 3 ;
6390: LD_ADDR_OWVAR 21
6394: PUSH
6395: LD_INT 3
6397: ST_TO_ADDR
// for i := 1 to 2 do
6398: LD_ADDR_VAR 0 1
6402: PUSH
6403: DOUBLE
6404: LD_INT 1
6406: DEC
6407: ST_TO_ADDR
6408: LD_INT 2
6410: PUSH
6411: FOR_TO
6412: IFFALSE 6526
// begin InitHC_All ( ) ;
6414: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6418: LD_INT 0
6420: PPUSH
6421: LD_INT 4
6423: PUSH
6424: LD_INT 5
6426: PUSH
6427: LD_INT 6
6429: PUSH
6430: LD_INT 6
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: PUSH
6439: LD_OWVAR 67
6443: ARRAY
6444: PPUSH
6445: CALL_OW 381
// un := CreateHuman ;
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: CALL_OW 44
6458: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6459: LD_VAR 0 2
6463: PPUSH
6464: LD_INT 91
6466: PPUSH
6467: LD_INT 87
6469: PPUSH
6470: LD_INT 3
6472: PPUSH
6473: LD_INT 0
6475: PPUSH
6476: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6480: LD_ADDR_EXP 49
6484: PUSH
6485: LD_EXP 49
6489: PPUSH
6490: LD_EXP 49
6494: PUSH
6495: LD_INT 1
6497: PLUS
6498: PPUSH
6499: LD_VAR 0 2
6503: PPUSH
6504: CALL_OW 1
6508: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6509: LD_VAR 0 2
6513: PPUSH
6514: LD_INT 46
6516: PPUSH
6517: LD_INT 78
6519: PPUSH
6520: CALL_OW 114
// end ;
6524: GO 6411
6526: POP
6527: POP
// if Difficulty > 2 then
6528: LD_OWVAR 67
6532: PUSH
6533: LD_INT 2
6535: GREATER
6536: IFFALSE 6668
// begin for i := 1 to 3 do
6538: LD_ADDR_VAR 0 1
6542: PUSH
6543: DOUBLE
6544: LD_INT 1
6546: DEC
6547: ST_TO_ADDR
6548: LD_INT 3
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6666
// begin InitHC_All ( ) ;
6554: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6558: LD_INT 0
6560: PPUSH
6561: LD_INT 4
6563: PUSH
6564: LD_INT 5
6566: PUSH
6567: LD_INT 6
6569: PUSH
6570: LD_INT 6
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_OWVAR 67
6583: ARRAY
6584: PPUSH
6585: CALL_OW 381
// un := CreateHuman ;
6589: LD_ADDR_VAR 0 2
6593: PUSH
6594: CALL_OW 44
6598: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6599: LD_VAR 0 2
6603: PPUSH
6604: LD_INT 91
6606: PPUSH
6607: LD_INT 87
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 0
6615: PPUSH
6616: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6620: LD_ADDR_EXP 49
6624: PUSH
6625: LD_EXP 49
6629: PPUSH
6630: LD_EXP 49
6634: PUSH
6635: LD_INT 1
6637: PLUS
6638: PPUSH
6639: LD_VAR 0 2
6643: PPUSH
6644: CALL_OW 1
6648: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6649: LD_VAR 0 2
6653: PPUSH
6654: LD_INT 89
6656: PPUSH
6657: LD_INT 148
6659: PPUSH
6660: CALL_OW 114
// end ;
6664: GO 6551
6666: POP
6667: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: LD_INT 33
6675: PUSH
6676: LD_INT 61
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 49
6685: PUSH
6686: LD_INT 85
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 76
6695: PUSH
6696: LD_INT 99
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 81
6705: PUSH
6706: LD_INT 135
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 111
6715: PUSH
6716: LD_INT 155
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 147
6725: PUSH
6726: LD_INT 158
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6741: LD_INT 1050
6743: PPUSH
6744: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6748: LD_ADDR_VAR 0 1
6752: PUSH
6753: DOUBLE
6754: LD_INT 1
6756: DEC
6757: ST_TO_ADDR
6758: LD_EXP 49
6762: PUSH
6763: FOR_TO
6764: IFFALSE 6933
// begin un := ruAttackersInForest [ i ] ;
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_EXP 49
6775: PUSH
6776: LD_VAR 0 1
6780: ARRAY
6781: ST_TO_ADDR
// tag := GetTag ( un ) ;
6782: LD_ADDR_VAR 0 4
6786: PUSH
6787: LD_VAR 0 2
6791: PPUSH
6792: CALL_OW 110
6796: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 302
6806: IFFALSE 6820
6808: PUSH
6809: LD_VAR 0 2
6813: PPUSH
6814: CALL_OW 314
6818: NOT
6819: AND
6820: IFFALSE 6931
// begin if tag <> i then
6822: LD_VAR 0 4
6826: PUSH
6827: LD_VAR 0 1
6831: NONEQUAL
6832: IFFALSE 6860
// begin SetTag ( un , i ) ;
6834: LD_VAR 0 2
6838: PPUSH
6839: LD_VAR 0 1
6843: PPUSH
6844: CALL_OW 109
// tag := i ;
6848: LD_ADDR_VAR 0 4
6852: PUSH
6853: LD_VAR 0 1
6857: ST_TO_ADDR
// end else
6858: GO 6892
// begin SetTag ( un , i + 1 ) ;
6860: LD_VAR 0 2
6864: PPUSH
6865: LD_VAR 0 1
6869: PUSH
6870: LD_INT 1
6872: PLUS
6873: PPUSH
6874: CALL_OW 109
// tag := i + 1 ;
6878: LD_ADDR_VAR 0 4
6882: PUSH
6883: LD_VAR 0 1
6887: PUSH
6888: LD_INT 1
6890: PLUS
6891: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6892: LD_VAR 0 2
6896: PPUSH
6897: LD_VAR 0 3
6901: PUSH
6902: LD_VAR 0 4
6906: ARRAY
6907: PUSH
6908: LD_INT 1
6910: ARRAY
6911: PPUSH
6912: LD_VAR 0 3
6916: PUSH
6917: LD_VAR 0 4
6921: ARRAY
6922: PUSH
6923: LD_INT 2
6925: ARRAY
6926: PPUSH
6927: CALL_OW 114
// end ; end ;
6931: GO 6763
6933: POP
6934: POP
// until not ruAttackersInForest ;
6935: LD_EXP 49
6939: NOT
6940: IFFALSE 6741
// end ;
6942: PPOPN 4
6944: END
// every 0 0$2 trigger FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) do var i , tmp , bar , e ;
6945: LD_INT 10
6947: PPUSH
6948: LD_INT 22
6950: PUSH
6951: LD_INT 1
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 70
6962: IFFALSE 7311
6964: GO 6966
6966: DISABLE
6967: LD_INT 0
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// begin enable ;
6973: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] , [ f_tag , 111 ] ] ) ;
6974: LD_ADDR_VAR 0 2
6978: PUSH
6979: LD_INT 22
6981: PUSH
6982: LD_INT 3
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 1
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PUSH
6999: LD_INT 120
7001: PUSH
7002: LD_INT 111
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: LIST
7013: PPUSH
7014: CALL_OW 69
7018: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
7019: LD_ADDR_VAR 0 3
7023: PUSH
7024: LD_INT 22
7026: PUSH
7027: LD_INT 3
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 50
7036: PUSH
7037: EMPTY
7038: LIST
7039: PUSH
7040: LD_INT 2
7042: PUSH
7043: LD_INT 30
7045: PUSH
7046: LD_INT 4
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 30
7055: PUSH
7056: LD_INT 5
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: PPUSH
7073: CALL_OW 69
7077: ST_TO_ADDR
// if not tmp then
7078: LD_VAR 0 2
7082: NOT
7083: IFFALSE 7181
// begin if not bar then
7085: LD_VAR 0 3
7089: NOT
7090: IFFALSE 7095
// begin disable ;
7092: DISABLE
// exit ;
7093: GO 7311
// end ; tmp := [ ] ;
7095: LD_ADDR_VAR 0 2
7099: PUSH
7100: EMPTY
7101: ST_TO_ADDR
// for i in bar do
7102: LD_ADDR_VAR 0 1
7106: PUSH
7107: LD_VAR 0 3
7111: PUSH
7112: FOR_IN
7113: IFFALSE 7138
// tmp := tmp union UnitsInside ( i ) ;
7115: LD_ADDR_VAR 0 2
7119: PUSH
7120: LD_VAR 0 2
7124: PUSH
7125: LD_VAR 0 1
7129: PPUSH
7130: CALL_OW 313
7134: UNION
7135: ST_TO_ADDR
7136: GO 7112
7138: POP
7139: POP
// if not tmp then
7140: LD_VAR 0 2
7144: NOT
7145: IFFALSE 7150
// begin disable ;
7147: DISABLE
// exit ;
7148: GO 7311
// end ; for i in tmp do
7150: LD_ADDR_VAR 0 1
7154: PUSH
7155: LD_VAR 0 2
7159: PUSH
7160: FOR_IN
7161: IFFALSE 7177
// SetTag ( i , 111 ) ;
7163: LD_VAR 0 1
7167: PPUSH
7168: LD_INT 111
7170: PPUSH
7171: CALL_OW 109
7175: GO 7160
7177: POP
7178: POP
// end else
7179: GO 7311
// begin e := FilterUnitsInArea ( RussianBase , [ f_side , 1 ] ) ;
7181: LD_ADDR_VAR 0 4
7185: PUSH
7186: LD_INT 10
7188: PPUSH
7189: LD_INT 22
7191: PUSH
7192: LD_INT 1
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 70
7203: ST_TO_ADDR
// for i in tmp do
7204: LD_ADDR_VAR 0 1
7208: PUSH
7209: LD_VAR 0 2
7213: PUSH
7214: FOR_IN
7215: IFFALSE 7309
// if IsOk ( i ) then
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 302
7226: IFFALSE 7307
// begin if IsInUnit ( i ) then
7228: LD_VAR 0 1
7232: PPUSH
7233: CALL_OW 310
7237: IFFALSE 7248
// ComExitBuilding ( i ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL_OW 122
// wait ( 3 ) ;
7248: LD_INT 3
7250: PPUSH
7251: CALL_OW 67
// ComAttackUnit ( i , NearestUnitToUnit ( e , i ) ) ;
7255: LD_VAR 0 1
7259: PPUSH
7260: LD_VAR 0 4
7264: PPUSH
7265: LD_VAR 0 1
7269: PPUSH
7270: CALL_OW 74
7274: PPUSH
7275: CALL_OW 115
// AddComEnterUnit ( i , bar [ rand ( 1 , bar ) ] ) ;
7279: LD_VAR 0 1
7283: PPUSH
7284: LD_VAR 0 3
7288: PUSH
7289: LD_INT 1
7291: PPUSH
7292: LD_VAR 0 3
7296: PPUSH
7297: CALL_OW 12
7301: ARRAY
7302: PPUSH
7303: CALL_OW 180
// end ;
7307: GO 7214
7309: POP
7310: POP
// end ; end ;
7311: PPOPN 4
7313: END
// every 3 3$00 trigger tick > 2 2$00 and Prob ( 50 ) do var un ;
7314: LD_OWVAR 1
7318: PUSH
7319: LD_INT 4200
7321: GREATER
7322: IFFALSE 7333
7324: PUSH
7325: LD_INT 50
7327: PPUSH
7328: CALL_OW 13
7332: AND
7333: IFFALSE 7424
7335: GO 7337
7337: DISABLE
7338: LD_INT 0
7340: PPUSH
// begin uc_side := 3 ;
7341: LD_ADDR_OWVAR 20
7345: PUSH
7346: LD_INT 3
7348: ST_TO_ADDR
// uc_nation := nation_russian ;
7349: LD_ADDR_OWVAR 21
7353: PUSH
7354: LD_INT 3
7356: ST_TO_ADDR
// InitHC_All ( ) ;
7357: CALL_OW 584
// PrepareEngineer ( false , 2 ) ;
7361: LD_INT 0
7363: PPUSH
7364: LD_INT 2
7366: PPUSH
7367: CALL_OW 382
// un := CreateHuman ;
7371: LD_ADDR_VAR 0 1
7375: PUSH
7376: CALL_OW 44
7380: ST_TO_ADDR
// PlaceUnitXYR ( un , 51 , 7 , 12 , true ) ;
7381: LD_VAR 0 1
7385: PPUSH
7386: LD_INT 51
7388: PPUSH
7389: LD_INT 7
7391: PPUSH
7392: LD_INT 12
7394: PPUSH
7395: LD_INT 1
7397: PPUSH
7398: CALL_OW 50
// wait ( 0 0$1 ) ;
7402: LD_INT 35
7404: PPUSH
7405: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7409: LD_VAR 0 1
7413: PPUSH
7414: LD_INT 106
7416: PPUSH
7417: LD_INT 83
7419: PPUSH
7420: CALL_OW 111
// end ;
7424: PPOPN 1
7426: END
// every 3 3$30 trigger tick > 10 10$00 and Prob ( 45 ) do var un ;
7427: LD_OWVAR 1
7431: PUSH
7432: LD_INT 21000
7434: GREATER
7435: IFFALSE 7446
7437: PUSH
7438: LD_INT 45
7440: PPUSH
7441: CALL_OW 13
7445: AND
7446: IFFALSE 7561
7448: GO 7450
7450: DISABLE
7451: LD_INT 0
7453: PPUSH
// begin uc_side := 3 ;
7454: LD_ADDR_OWVAR 20
7458: PUSH
7459: LD_INT 3
7461: ST_TO_ADDR
// uc_nation := nation_russian ;
7462: LD_ADDR_OWVAR 21
7466: PUSH
7467: LD_INT 3
7469: ST_TO_ADDR
// InitHC_All ( ) ;
7470: CALL_OW 584
// PrepareScientist ( false , 2 ) ;
7474: LD_INT 0
7476: PPUSH
7477: LD_INT 2
7479: PPUSH
7480: CALL_OW 384
// un := CreateHuman ;
7484: LD_ADDR_VAR 0 1
7488: PUSH
7489: CALL_OW 44
7493: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 18 , 15 , true ) ;
7494: LD_VAR 0 1
7498: PPUSH
7499: LD_INT 91
7501: PPUSH
7502: LD_INT 18
7504: PPUSH
7505: LD_INT 15
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 50
// wait ( 0 0$1 ) ;
7515: LD_INT 35
7517: PPUSH
7518: CALL_OW 67
// ComMoveXY ( un , 106 , 83 ) ;
7522: LD_VAR 0 1
7526: PPUSH
7527: LD_INT 106
7529: PPUSH
7530: LD_INT 83
7532: PPUSH
7533: CALL_OW 111
// AddComEnterUnit ( un , ruarm2 ) ;
7537: LD_VAR 0 1
7541: PPUSH
7542: LD_INT 67
7544: PPUSH
7545: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
7549: LD_VAR 0 1
7553: PPUSH
7554: LD_INT 1
7556: PPUSH
7557: CALL_OW 183
// end ; end_of_file
7561: PPOPN 1
7563: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7564: LD_INT 0
7566: PPUSH
7567: PPUSH
7568: PPUSH
// if not characters then
7569: LD_VAR 0 1
7573: NOT
7574: IFFALSE 7578
// exit ;
7576: GO 7657
// speaker := characters [ rand ( 1 , characters ) ] ;
7578: LD_ADDR_VAR 0 6
7582: PUSH
7583: LD_VAR 0 1
7587: PUSH
7588: LD_INT 1
7590: PPUSH
7591: LD_VAR 0 1
7595: PPUSH
7596: CALL_OW 12
7600: ARRAY
7601: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7602: LD_VAR 0 6
7606: PPUSH
7607: CALL_OW 258
7611: PUSH
7612: LD_INT 1
7614: EQUAL
7615: IFFALSE 7633
// Say ( speaker , dialogMID ) else
7617: LD_VAR 0 6
7621: PPUSH
7622: LD_VAR 0 2
7626: PPUSH
7627: CALL_OW 88
7631: GO 7647
// Say ( speaker , dialogFID ) ;
7633: LD_VAR 0 6
7637: PPUSH
7638: LD_VAR 0 3
7642: PPUSH
7643: CALL_OW 88
// result := speaker ;
7647: LD_ADDR_VAR 0 4
7651: PUSH
7652: LD_VAR 0 6
7656: ST_TO_ADDR
// end ;
7657: LD_VAR 0 4
7661: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7662: LD_INT 0
7664: PPUSH
7665: PPUSH
// for i in charactersList do
7666: LD_ADDR_VAR 0 4
7670: PUSH
7671: LD_VAR 0 1
7675: PUSH
7676: FOR_IN
7677: IFFALSE 7695
// SaveCharacters ( i , ident ) ;
7679: LD_VAR 0 4
7683: PPUSH
7684: LD_VAR 0 2
7688: PPUSH
7689: CALL_OW 38
7693: GO 7676
7695: POP
7696: POP
// end ;
7697: LD_VAR 0 3
7701: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7702: LD_INT 0
7704: PPUSH
7705: PPUSH
7706: PPUSH
7707: PPUSH
// for i := 1 to count do
7708: LD_ADDR_VAR 0 8
7712: PUSH
7713: DOUBLE
7714: LD_INT 1
7716: DEC
7717: ST_TO_ADDR
7718: LD_VAR 0 6
7722: PUSH
7723: FOR_TO
7724: IFFALSE 7805
// begin uc_side = side ;
7726: LD_ADDR_OWVAR 20
7730: PUSH
7731: LD_VAR 0 1
7735: ST_TO_ADDR
// uc_nation = nation ;
7736: LD_ADDR_OWVAR 21
7740: PUSH
7741: LD_VAR 0 2
7745: ST_TO_ADDR
// hc_gallery =  ;
7746: LD_ADDR_OWVAR 33
7750: PUSH
7751: LD_STRING 
7753: ST_TO_ADDR
// hc_name =  ;
7754: LD_ADDR_OWVAR 26
7758: PUSH
7759: LD_STRING 
7761: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7762: LD_INT 0
7764: PPUSH
7765: LD_VAR 0 5
7769: PPUSH
7770: LD_VAR 0 4
7774: PPUSH
7775: CALL_OW 380
// un = CreateHuman ;
7779: LD_ADDR_VAR 0 10
7783: PUSH
7784: CALL_OW 44
7788: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7789: LD_VAR 0 10
7793: PPUSH
7794: LD_VAR 0 3
7798: PPUSH
7799: CALL_OW 52
// end ;
7803: GO 7723
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 7
7811: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
// uc_side := GetSide ( b ) ;
7817: LD_ADDR_OWVAR 20
7821: PUSH
7822: LD_VAR 0 2
7826: PPUSH
7827: CALL_OW 255
7831: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7832: LD_ADDR_OWVAR 21
7836: PUSH
7837: LD_VAR 0 2
7841: PPUSH
7842: CALL_OW 248
7846: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7847: LD_INT 0
7849: PPUSH
7850: LD_INT 1
7852: PPUSH
7853: LD_VAR 0 1
7857: PPUSH
7858: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7862: LD_ADDR_VAR 0 5
7866: PUSH
7867: LD_VAR 0 2
7871: PPUSH
7872: CALL_OW 254
7876: PUSH
7877: LD_INT 3
7879: MINUS
7880: ST_TO_ADDR
// if dir < 0 then
7881: LD_VAR 0 5
7885: PUSH
7886: LD_INT 0
7888: LESS
7889: IFFALSE 7905
// dir := 6 + dir ;
7891: LD_ADDR_VAR 0 5
7895: PUSH
7896: LD_INT 6
7898: PUSH
7899: LD_VAR 0 5
7903: PLUS
7904: ST_TO_ADDR
// un := CreateHuman ;
7905: LD_ADDR_VAR 0 4
7909: PUSH
7910: CALL_OW 44
7914: ST_TO_ADDR
// SetDir ( un , dir ) ;
7915: LD_VAR 0 4
7919: PPUSH
7920: LD_VAR 0 5
7924: PPUSH
7925: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7929: LD_VAR 0 4
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 52
// end ;
7943: LD_VAR 0 3
7947: RET
// export function PrepareDifficulty ; begin
7948: LD_INT 0
7950: PPUSH
// case Difficulty of 1 :
7951: LD_OWVAR 67
7955: PUSH
7956: LD_INT 1
7958: DOUBLE
7959: EQUAL
7960: IFTRUE 7964
7962: GO 7983
7964: POP
// begin RuSolMinLevel = 2 ;
7965: LD_ADDR_EXP 35
7969: PUSH
7970: LD_INT 2
7972: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7973: LD_ADDR_EXP 36
7977: PUSH
7978: LD_INT 3
7980: ST_TO_ADDR
// end ; 2 :
7981: GO 8044
7983: LD_INT 2
7985: DOUBLE
7986: EQUAL
7987: IFTRUE 7991
7989: GO 8010
7991: POP
// begin RuSolMinLevel = 3 ;
7992: LD_ADDR_EXP 35
7996: PUSH
7997: LD_INT 3
7999: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
8000: LD_ADDR_EXP 36
8004: PUSH
8005: LD_INT 5
8007: ST_TO_ADDR
// end ; 3 .. 4 :
8008: GO 8044
8010: LD_INT 3
8012: DOUBLE
8013: GREATEREQUAL
8014: IFFALSE 8022
8016: LD_INT 4
8018: DOUBLE
8019: LESSEQUAL
8020: IFTRUE 8024
8022: GO 8043
8024: POP
// begin RuSolMinLevel = 4 ;
8025: LD_ADDR_EXP 35
8029: PUSH
8030: LD_INT 4
8032: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
8033: LD_ADDR_EXP 36
8037: PUSH
8038: LD_INT 6
8040: ST_TO_ADDR
// end ; end ;
8041: GO 8044
8043: POP
// end ;
8044: LD_VAR 0 1
8048: RET
// export function ShowQuery1 ; begin
8049: LD_INT 0
8051: PPUSH
// result := Query ( QKill ) ;
8052: LD_ADDR_VAR 0 1
8056: PUSH
8057: LD_STRING QKill
8059: PPUSH
8060: CALL_OW 97
8064: ST_TO_ADDR
// end ;
8065: LD_VAR 0 1
8069: RET
// export function ShowQuery2 ; begin
8070: LD_INT 0
8072: PPUSH
// result := Query ( QKill2 ) ;
8073: LD_ADDR_VAR 0 1
8077: PUSH
8078: LD_STRING QKill2
8080: PPUSH
8081: CALL_OW 97
8085: ST_TO_ADDR
// end ;
8086: LD_VAR 0 1
8090: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
8091: LD_INT 0
8093: PPUSH
8094: PPUSH
8095: PPUSH
8096: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
8097: LD_ADDR_VAR 0 7
8101: PUSH
8102: LD_INT 48
8104: PUSH
8105: LD_INT 49
8107: PUSH
8108: LD_INT 50
8110: PUSH
8111: LD_INT 20
8113: PUSH
8114: LD_INT 1
8116: PUSH
8117: LD_INT 51
8119: PUSH
8120: LD_INT 52
8122: PUSH
8123: LD_INT 69
8125: PUSH
8126: LD_INT 39
8128: PUSH
8129: LD_INT 34
8131: PUSH
8132: LD_INT 40
8134: PUSH
8135: LD_INT 53
8137: PUSH
8138: LD_INT 71
8140: PUSH
8141: LD_INT 57
8143: PUSH
8144: LD_INT 58
8146: PUSH
8147: LD_INT 44
8149: PUSH
8150: LD_INT 32
8152: PUSH
8153: LD_INT 27
8155: PUSH
8156: LD_INT 23
8158: PUSH
8159: LD_INT 33
8161: PUSH
8162: LD_INT 59
8164: PUSH
8165: LD_INT 54
8167: PUSH
8168: LD_INT 55
8170: PUSH
8171: LD_INT 56
8173: PUSH
8174: LD_INT 63
8176: PUSH
8177: LD_INT 64
8179: PUSH
8180: LD_INT 65
8182: PUSH
8183: LD_INT 30
8185: PUSH
8186: LD_INT 31
8188: PUSH
8189: LD_INT 21
8191: PUSH
8192: LD_INT 22
8194: PUSH
8195: LD_INT 25
8197: PUSH
8198: LD_INT 82
8200: PUSH
8201: LD_INT 83
8203: PUSH
8204: LD_INT 84
8206: PUSH
8207: LD_INT 85
8209: PUSH
8210: LD_INT 86
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: ST_TO_ADDR
// for i = 1 to list do
8252: LD_ADDR_VAR 0 5
8256: PUSH
8257: DOUBLE
8258: LD_INT 1
8260: DEC
8261: ST_TO_ADDR
8262: LD_VAR 0 7
8266: PUSH
8267: FOR_TO
8268: IFFALSE 8342
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
8270: LD_VAR 0 7
8274: PUSH
8275: LD_VAR 0 5
8279: ARRAY
8280: PPUSH
8281: LD_VAR 0 1
8285: PPUSH
8286: CALL_OW 321
8290: PUSH
8291: LD_INT 1
8293: EQUAL
8294: IFFALSE 8318
8296: PUSH
8297: LD_VAR 0 7
8301: PUSH
8302: LD_VAR 0 5
8306: ARRAY
8307: PPUSH
8308: LD_VAR 0 3
8312: PPUSH
8313: CALL_OW 482
8317: AND
8318: IFFALSE 8340
// AddComResearch ( lab , list [ i ] ) ;
8320: LD_VAR 0 2
8324: PPUSH
8325: LD_VAR 0 7
8329: PUSH
8330: LD_VAR 0 5
8334: ARRAY
8335: PPUSH
8336: CALL_OW 184
8340: GO 8267
8342: POP
8343: POP
// end ;
8344: LD_VAR 0 4
8348: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
8349: LD_INT 0
8351: PPUSH
8352: PPUSH
8353: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
8354: LD_INT 22
8356: PUSH
8357: LD_VAR 0 1
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PUSH
8366: LD_INT 21
8368: PUSH
8369: LD_INT 2
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PPUSH
8380: CALL_OW 69
8384: PUSH
8385: LD_VAR 0 3
8389: LESSEQUAL
8390: IFFALSE 8498
// begin for i = 1 to vehCount do
8392: LD_ADDR_VAR 0 9
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_VAR 0 3
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8496
// begin weapon := weaponTab [ i ] ;
8410: LD_ADDR_VAR 0 10
8414: PUSH
8415: LD_VAR 0 4
8419: PUSH
8420: LD_VAR 0 9
8424: ARRAY
8425: ST_TO_ADDR
// if weapon = ru_heavy_gun then
8426: LD_VAR 0 10
8430: PUSH
8431: LD_INT 46
8433: EQUAL
8434: IFFALSE 8465
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
8436: LD_VAR 0 2
8440: PPUSH
8441: LD_INT 24
8443: PPUSH
8444: LD_VAR 0 5
8448: PPUSH
8449: LD_VAR 0 6
8453: PPUSH
8454: LD_VAR 0 10
8458: PPUSH
8459: CALL_OW 185
8463: GO 8494
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
8465: LD_VAR 0 2
8469: PPUSH
8470: LD_VAR 0 7
8474: PPUSH
8475: LD_VAR 0 5
8479: PPUSH
8480: LD_VAR 0 6
8484: PPUSH
8485: LD_VAR 0 10
8489: PPUSH
8490: CALL_OW 185
// end ;
8494: GO 8407
8496: POP
8497: POP
// end ; end ;
8498: LD_VAR 0 8
8502: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
8503: LD_INT 0
8505: PPUSH
8506: PPUSH
8507: PPUSH
8508: PPUSH
8509: PPUSH
8510: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
8511: LD_ADDR_VAR 0 8
8515: PUSH
8516: LD_VAR 0 2
8520: PPUSH
8521: CALL_OW 313
8525: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8526: LD_ADDR_VAR 0 9
8530: PUSH
8531: LD_VAR 0 3
8535: PPUSH
8536: LD_INT 22
8538: PUSH
8539: LD_VAR 0 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: LD_INT 25
8550: PUSH
8551: LD_INT 2
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: LD_INT 24
8560: PUSH
8561: LD_INT 750
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 3
8570: PUSH
8571: LD_INT 54
8573: PUSH
8574: EMPTY
8575: LIST
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: PPUSH
8587: CALL_OW 70
8591: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8592: LD_ADDR_VAR 0 6
8596: PUSH
8597: LD_VAR 0 3
8601: PPUSH
8602: LD_INT 22
8604: PUSH
8605: LD_VAR 0 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 21
8616: PUSH
8617: LD_INT 3
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 3
8626: PUSH
8627: LD_INT 24
8629: PUSH
8630: LD_INT 1000
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: PPUSH
8649: CALL_OW 70
8653: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8654: LD_VAR 0 6
8658: NOT
8659: IFFALSE 8705
8661: PUSH
8662: LD_INT 22
8664: PUSH
8665: LD_VAR 0 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 25
8676: PUSH
8677: LD_INT 2
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 24
8686: PUSH
8687: LD_INT 250
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: PPUSH
8699: CALL_OW 69
8703: NOT
8704: AND
8705: IFFALSE 8709
// exit ;
8707: GO 8879
// if buildingsList and engineerOkInside then
8709: LD_VAR 0 6
8713: IFFALSE 8721
8715: PUSH
8716: LD_VAR 0 8
8720: AND
8721: IFFALSE 8732
// ComExitBuilding ( engineerOkInside ) ;
8723: LD_VAR 0 8
8727: PPUSH
8728: CALL_OW 122
// if buildingsList and engineerOkOutside then
8732: LD_VAR 0 6
8736: IFFALSE 8744
8738: PUSH
8739: LD_VAR 0 9
8743: AND
8744: IFFALSE 8764
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
8746: LD_VAR 0 9
8750: PPUSH
8751: LD_VAR 0 6
8755: PUSH
8756: LD_INT 1
8758: ARRAY
8759: PPUSH
8760: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
8764: LD_VAR 0 6
8768: PUSH
8769: LD_INT 0
8771: EQUAL
8772: IFFALSE 8784
8774: PUSH
8775: LD_VAR 0 4
8779: PUSH
8780: LD_INT 0
8782: EQUAL
8783: AND
8784: IFFALSE 8792
8786: PUSH
8787: LD_VAR 0 9
8791: AND
8792: IFFALSE 8808
// ComEnterUnit ( engineerOkOutside , depot ) ;
8794: LD_VAR 0 9
8798: PPUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8808: LD_VAR 0 9
8812: IFFALSE 8824
8814: PUSH
8815: LD_VAR 0 6
8819: PUSH
8820: LD_INT 0
8822: EQUAL
8823: AND
8824: IFFALSE 8832
8826: PUSH
8827: LD_VAR 0 4
8831: AND
8832: IFFALSE 8879
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8834: LD_VAR 0 9
8838: PPUSH
8839: LD_VAR 0 4
8843: PUSH
8844: LD_INT 1
8846: ARRAY
8847: PPUSH
8848: LD_VAR 0 4
8852: PUSH
8853: LD_INT 2
8855: ARRAY
8856: PPUSH
8857: LD_VAR 0 4
8861: PUSH
8862: LD_INT 3
8864: ARRAY
8865: PPUSH
8866: LD_VAR 0 4
8870: PUSH
8871: LD_INT 4
8873: ARRAY
8874: PPUSH
8875: CALL_OW 145
// end ;
8879: LD_VAR 0 5
8883: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8884: LD_INT 0
8886: PPUSH
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8895: LD_ADDR_VAR 0 6
8899: PUSH
8900: LD_INT 22
8902: PUSH
8903: LD_VAR 0 1
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 25
8914: PUSH
8915: LD_INT 4
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 23
8924: PUSH
8925: LD_INT 2
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: LD_INT 24
8934: PUSH
8935: LD_INT 251
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: PPUSH
8948: CALL_OW 69
8952: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8953: LD_ADDR_VAR 0 7
8957: PUSH
8958: LD_VAR 0 3
8962: PPUSH
8963: LD_INT 22
8965: PUSH
8966: LD_VAR 0 1
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 23
8977: PUSH
8978: LD_INT 2
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: LD_INT 25
8987: PUSH
8988: LD_INT 4
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PUSH
8995: LD_INT 50
8997: PUSH
8998: EMPTY
8999: LIST
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: PPUSH
9007: CALL_OW 70
9011: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9012: LD_ADDR_VAR 0 10
9016: PUSH
9017: LD_VAR 0 3
9021: PPUSH
9022: LD_INT 22
9024: PUSH
9025: LD_VAR 0 1
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: PUSH
9034: LD_INT 21
9036: PUSH
9037: LD_INT 1
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 3
9046: PUSH
9047: LD_INT 25
9049: PUSH
9050: LD_INT 3
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 3
9063: PUSH
9064: LD_INT 24
9066: PUSH
9067: LD_INT 750
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: PPUSH
9084: CALL_OW 70
9088: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9089: LD_ADDR_VAR 0 11
9093: PUSH
9094: LD_VAR 0 2
9098: PPUSH
9099: LD_INT 22
9101: PUSH
9102: LD_VAR 0 1
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 21
9113: PUSH
9114: LD_INT 1
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: LD_INT 3
9123: PUSH
9124: LD_INT 25
9126: PUSH
9127: LD_INT 3
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 3
9140: PUSH
9141: LD_INT 24
9143: PUSH
9144: LD_INT 1000
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: PPUSH
9161: CALL_OW 70
9165: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
9166: LD_VAR 0 10
9170: NOT
9171: IFFALSE 9180
9173: PUSH
9174: LD_VAR 0 11
9178: NOT
9179: AND
9180: IFFALSE 9189
9182: PUSH
9183: LD_VAR 0 6
9187: NOT
9188: AND
9189: IFFALSE 9193
// exit ;
9191: GO 9409
// if damageUnits and sci_list then
9193: LD_VAR 0 10
9197: IFFALSE 9205
9199: PUSH
9200: LD_VAR 0 6
9204: AND
9205: IFFALSE 9221
// ComMoveToArea ( damageUnits , healArea ) ;
9207: LD_VAR 0 10
9211: PPUSH
9212: LD_VAR 0 2
9216: PPUSH
9217: CALL_OW 113
// if unitsToHeal and sci_list then
9221: LD_VAR 0 11
9225: IFFALSE 9233
9227: PUSH
9228: LD_VAR 0 6
9232: AND
9233: IFFALSE 9244
// ComExitBuilding ( sci_list ) ;
9235: LD_VAR 0 6
9239: PPUSH
9240: CALL_OW 122
// if unitsToHeal and sci_listOutside then
9244: LD_VAR 0 11
9248: IFFALSE 9256
9250: PUSH
9251: LD_VAR 0 7
9255: AND
9256: IFFALSE 9276
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
9258: LD_VAR 0 7
9262: PPUSH
9263: LD_VAR 0 11
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PPUSH
9272: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
9276: LD_VAR 0 10
9280: PUSH
9281: LD_INT 0
9283: EQUAL
9284: IFFALSE 9296
9286: PUSH
9287: LD_VAR 0 11
9291: PUSH
9292: LD_INT 0
9294: EQUAL
9295: AND
9296: IFFALSE 9304
9298: PUSH
9299: LD_VAR 0 7
9303: AND
9304: IFFALSE 9409
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
9306: LD_ADDR_VAR 0 12
9310: PUSH
9311: LD_INT 22
9313: PUSH
9314: LD_VAR 0 1
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: LD_INT 21
9325: PUSH
9326: LD_INT 3
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 30
9335: PUSH
9336: LD_INT 8
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: PPUSH
9348: CALL_OW 69
9352: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
9353: LD_ADDR_VAR 0 13
9357: PUSH
9358: LD_INT 1
9360: PPUSH
9361: LD_VAR 0 12
9365: PPUSH
9366: CALL_OW 12
9370: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
9371: LD_VAR 0 7
9375: PPUSH
9376: LD_INT 3
9378: PUSH
9379: LD_INT 60
9381: PUSH
9382: EMPTY
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PPUSH
9389: CALL_OW 72
9393: PPUSH
9394: LD_VAR 0 12
9398: PUSH
9399: LD_VAR 0 13
9403: ARRAY
9404: PPUSH
9405: CALL_OW 120
// end ; end ;
9409: LD_VAR 0 5
9413: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
9414: LD_INT 0
9416: PPUSH
9417: PPUSH
9418: PPUSH
9419: PPUSH
9420: PPUSH
// tmp := [ ] ;
9421: LD_ADDR_VAR 0 6
9425: PUSH
9426: EMPTY
9427: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
9428: LD_ADDR_VAR 0 7
9432: PUSH
9433: LD_INT 22
9435: PUSH
9436: LD_VAR 0 1
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 30
9447: PUSH
9448: LD_INT 32
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PPUSH
9459: CALL_OW 69
9463: ST_TO_ADDR
// if bunkers then
9464: LD_VAR 0 7
9468: IFFALSE 9538
// for i in bunkers do
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: PUSH
9480: FOR_IN
9481: IFFALSE 9536
// for j in UnitsInside ( i ) do
9483: LD_ADDR_VAR 0 5
9487: PUSH
9488: LD_VAR 0 4
9492: PPUSH
9493: CALL_OW 313
9497: PUSH
9498: FOR_IN
9499: IFFALSE 9532
// tmp := Replace ( tmp , tmp + 1 , j ) ;
9501: LD_ADDR_VAR 0 6
9505: PUSH
9506: LD_VAR 0 6
9510: PPUSH
9511: LD_VAR 0 6
9515: PUSH
9516: LD_INT 1
9518: PLUS
9519: PPUSH
9520: LD_VAR 0 5
9524: PPUSH
9525: CALL_OW 1
9529: ST_TO_ADDR
9530: GO 9498
9532: POP
9533: POP
9534: GO 9480
9536: POP
9537: POP
// if tmp then
9538: LD_VAR 0 6
9542: IFFALSE 9582
// begin ComExitBuilding ( tmp ) ;
9544: LD_VAR 0 6
9548: PPUSH
9549: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
9553: LD_VAR 0 6
9557: PPUSH
9558: LD_VAR 0 2
9562: PPUSH
9563: CALL_OW 250
9567: PPUSH
9568: LD_VAR 0 2
9572: PPUSH
9573: CALL_OW 251
9577: PPUSH
9578: CALL_OW 174
// end ; end ;
9582: LD_VAR 0 3
9586: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
9587: LD_INT 0
9589: PPUSH
9590: PPUSH
9591: PPUSH
// enable ;
9592: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
9593: LD_ADDR_VAR 0 6
9597: PUSH
9598: LD_VAR 0 3
9602: PPUSH
9603: CALL_OW 435
9607: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9608: LD_ADDR_VAR 0 5
9612: PUSH
9613: LD_INT 22
9615: PUSH
9616: LD_VAR 0 1
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: LD_INT 34
9627: PUSH
9628: LD_VAR 0 2
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PPUSH
9641: CALL_OW 69
9645: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
9646: LD_VAR 0 5
9650: IFFALSE 9663
9652: PUSH
9653: LD_VAR 0 3
9657: PPUSH
9658: CALL_OW 435
9662: AND
9663: IFFALSE 9671
9665: PUSH
9666: LD_VAR 0 6
9670: AND
9671: IFFALSE 9704
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
9673: LD_VAR 0 5
9677: PUSH
9678: LD_INT 1
9680: ARRAY
9681: PPUSH
9682: LD_VAR 0 6
9686: PUSH
9687: LD_INT 1
9689: ARRAY
9690: PPUSH
9691: LD_VAR 0 6
9695: PUSH
9696: LD_INT 2
9698: ARRAY
9699: PPUSH
9700: CALL_OW 177
// end ;
9704: LD_VAR 0 4
9708: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
9709: LD_INT 0
9711: PPUSH
9712: PPUSH
9713: PPUSH
9714: PPUSH
9715: PPUSH
9716: PPUSH
9717: PPUSH
9718: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
9719: LD_ADDR_VAR 0 6
9723: PUSH
9724: LD_VAR 0 2
9728: PPUSH
9729: LD_INT 22
9731: PUSH
9732: LD_VAR 0 1
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: LD_INT 56
9743: PUSH
9744: EMPTY
9745: LIST
9746: PUSH
9747: LD_INT 24
9749: PUSH
9750: LD_INT 700
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 60
9762: PUSH
9763: EMPTY
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PUSH
9770: LD_INT 2
9772: PUSH
9773: LD_INT 25
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 25
9785: PUSH
9786: LD_INT 5
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 25
9795: PUSH
9796: LD_INT 8
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 25
9805: PUSH
9806: LD_INT 9
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: PPUSH
9827: CALL_OW 70
9831: PUSH
9832: LD_EXP 48
9836: PUSH
9837: LD_EXP 49
9841: UNION
9842: DIFF
9843: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9844: LD_ADDR_VAR 0 7
9848: PUSH
9849: LD_VAR 0 2
9853: PPUSH
9854: LD_INT 22
9856: PUSH
9857: LD_VAR 0 1
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 30
9868: PUSH
9869: LD_INT 32
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 58
9878: PUSH
9879: EMPTY
9880: LIST
9881: PUSH
9882: LD_INT 24
9884: PUSH
9885: LD_INT 251
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 70
9902: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9903: LD_ADDR_VAR 0 9
9907: PUSH
9908: LD_VAR 0 2
9912: PPUSH
9913: LD_INT 22
9915: PUSH
9916: LD_VAR 0 1
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 2
9927: PUSH
9928: LD_INT 30
9930: PUSH
9931: LD_INT 4
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 30
9940: PUSH
9941: LD_INT 5
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: PUSH
9953: LD_INT 24
9955: PUSH
9956: LD_INT 251
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 70
9972: ST_TO_ADDR
// if barrackList then
9973: LD_VAR 0 9
9977: IFFALSE 10133
// begin if turretList = 0 then
9979: LD_VAR 0 7
9983: PUSH
9984: LD_INT 0
9986: EQUAL
9987: IFFALSE 10025
// begin if soldiersList then
9989: LD_VAR 0 6
9993: IFFALSE 10023
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9995: LD_VAR 0 6
9999: PPUSH
10000: LD_VAR 0 9
10004: PUSH
10005: LD_INT 1
10007: PPUSH
10008: LD_VAR 0 9
10012: PPUSH
10013: CALL_OW 12
10017: ARRAY
10018: PPUSH
10019: CALL_OW 120
// end else
10023: GO 10133
// begin for i in barrackList do
10025: LD_ADDR_VAR 0 4
10029: PUSH
10030: LD_VAR 0 9
10034: PUSH
10035: FOR_IN
10036: IFFALSE 10131
// begin if not turretList then
10038: LD_VAR 0 7
10042: NOT
10043: IFFALSE 10049
// exit ;
10045: POP
10046: POP
10047: GO 10133
// insideUnits = UnitsInside ( i ) ;
10049: LD_ADDR_VAR 0 10
10053: PUSH
10054: LD_VAR 0 4
10058: PPUSH
10059: CALL_OW 313
10063: ST_TO_ADDR
// if insideUnits then
10064: LD_VAR 0 10
10068: IFFALSE 10129
// begin tmp := insideUnits [ 1 ] ;
10070: LD_ADDR_VAR 0 8
10074: PUSH
10075: LD_VAR 0 10
10079: PUSH
10080: LD_INT 1
10082: ARRAY
10083: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
10084: LD_VAR 0 8
10088: PPUSH
10089: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
10093: LD_VAR 0 8
10097: PPUSH
10098: LD_VAR 0 7
10102: PUSH
10103: LD_INT 1
10105: ARRAY
10106: PPUSH
10107: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
10111: LD_ADDR_VAR 0 7
10115: PUSH
10116: LD_VAR 0 7
10120: PPUSH
10121: LD_INT 1
10123: PPUSH
10124: CALL_OW 3
10128: ST_TO_ADDR
// end ; end ;
10129: GO 10035
10131: POP
10132: POP
// end ; end ; end ;
10133: LD_VAR 0 3
10137: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
10138: LD_INT 0
10140: PPUSH
10141: PPUSH
10142: PPUSH
10143: PPUSH
10144: PPUSH
10145: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
10146: LD_ADDR_VAR 0 8
10150: PUSH
10151: LD_INT 22
10153: PUSH
10154: LD_VAR 0 1
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 21
10165: PUSH
10166: LD_INT 2
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: LD_INT 34
10175: PUSH
10176: LD_INT 52
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 69
10192: ST_TO_ADDR
// if not craneList then
10193: LD_VAR 0 8
10197: NOT
10198: IFFALSE 10202
// exit ;
10200: GO 10642
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10202: LD_ADDR_VAR 0 9
10206: PUSH
10207: LD_INT 22
10209: PUSH
10210: LD_VAR 0 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 21
10221: PUSH
10222: LD_INT 3
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 3
10231: PUSH
10232: LD_INT 24
10234: PUSH
10235: LD_INT 1000
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: PPUSH
10254: CALL_OW 69
10258: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
10259: LD_VAR 0 9
10263: IFFALSE 10286
10265: PUSH
10266: LD_VAR 0 8
10270: PPUSH
10271: LD_INT 24
10273: PUSH
10274: LD_INT 750
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PPUSH
10281: CALL_OW 72
10285: AND
10286: IFFALSE 10321
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
10288: LD_VAR 0 8
10292: PPUSH
10293: LD_INT 24
10295: PUSH
10296: LD_INT 750
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PPUSH
10303: CALL_OW 72
10307: PPUSH
10308: LD_VAR 0 9
10312: PUSH
10313: LD_INT 1
10315: ARRAY
10316: PPUSH
10317: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
10321: LD_VAR 0 8
10325: PPUSH
10326: LD_INT 3
10328: PUSH
10329: LD_INT 24
10331: PUSH
10332: LD_INT 750
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PPUSH
10343: CALL_OW 72
10347: IFFALSE 10385
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10349: LD_VAR 0 8
10353: PPUSH
10354: LD_INT 3
10356: PUSH
10357: LD_INT 24
10359: PUSH
10360: LD_INT 750
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 72
10375: PPUSH
10376: LD_VAR 0 2
10380: PPUSH
10381: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
10385: LD_VAR 0 8
10389: IFFALSE 10401
10391: PUSH
10392: LD_VAR 0 9
10396: PUSH
10397: LD_INT 0
10399: EQUAL
10400: AND
10401: IFFALSE 10409
10403: PUSH
10404: LD_VAR 0 3
10408: AND
10409: IFFALSE 10456
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10411: LD_VAR 0 8
10415: PPUSH
10416: LD_VAR 0 3
10420: PUSH
10421: LD_INT 1
10423: ARRAY
10424: PPUSH
10425: LD_VAR 0 3
10429: PUSH
10430: LD_INT 2
10432: ARRAY
10433: PPUSH
10434: LD_VAR 0 3
10438: PUSH
10439: LD_INT 3
10441: ARRAY
10442: PPUSH
10443: LD_VAR 0 3
10447: PUSH
10448: LD_INT 4
10450: ARRAY
10451: PPUSH
10452: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10456: LD_ADDR_VAR 0 7
10460: PUSH
10461: LD_VAR 0 2
10465: PPUSH
10466: LD_INT 22
10468: PUSH
10469: LD_VAR 0 1
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 21
10480: PUSH
10481: LD_INT 2
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 34
10490: PUSH
10491: LD_INT 52
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PUSH
10498: LD_INT 3
10500: PUSH
10501: LD_INT 24
10503: PUSH
10504: LD_INT 750
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: PPUSH
10521: CALL_OW 70
10525: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10526: LD_ADDR_VAR 0 6
10530: PUSH
10531: LD_VAR 0 2
10535: PPUSH
10536: LD_INT 22
10538: PUSH
10539: LD_VAR 0 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: LD_INT 30
10553: PUSH
10554: LD_INT 0
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 30
10563: PUSH
10564: LD_INT 1
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PPUSH
10580: CALL_OW 70
10584: ST_TO_ADDR
// if crane then
10585: LD_VAR 0 7
10589: IFFALSE 10642
// for i in crane do
10591: LD_ADDR_VAR 0 5
10595: PUSH
10596: LD_VAR 0 7
10600: PUSH
10601: FOR_IN
10602: IFFALSE 10640
// begin if dep then
10604: LD_VAR 0 6
10608: IFFALSE 10624
// ComMoveUnit ( i , dep ) ;
10610: LD_VAR 0 5
10614: PPUSH
10615: LD_VAR 0 6
10619: PPUSH
10620: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10624: LD_VAR 0 5
10628: PPUSH
10629: CALL_OW 311
10633: PPUSH
10634: CALL 84691 0 1
// end ;
10638: GO 10601
10640: POP
10641: POP
// end ;
10642: LD_VAR 0 4
10646: RET
// export function BuildBulldozer ; begin
10647: LD_INT 0
10649: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
10650: LD_INT 17
10652: PPUSH
10653: CALL_OW 302
10657: NOT
10658: IFTRUE 10673
10660: PUSH
10661: LD_INT 17
10663: PPUSH
10664: CALL_OW 255
10668: PUSH
10669: LD_INT 3
10671: NONEQUAL
10672: OR
10673: IFFALSE 10677
// exit ;
10675: GO 10696
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
10677: LD_INT 17
10679: PPUSH
10680: LD_INT 24
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: LD_INT 1
10688: PPUSH
10689: LD_INT 53
10691: PPUSH
10692: CALL_OW 185
// end ;
10696: LD_VAR 0 1
10700: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
10701: LD_INT 0
10703: PPUSH
10704: PPUSH
10705: PPUSH
10706: PPUSH
10707: PPUSH
// if not bulldozer then
10708: LD_VAR 0 1
10712: NOT
10713: IFFALSE 10717
// exit ;
10715: GO 10999
// list := ListEnvironmentArea ( area ) ;
10717: LD_ADDR_VAR 0 5
10721: PUSH
10722: LD_VAR 0 2
10726: PPUSH
10727: CALL_OW 353
10731: ST_TO_ADDR
// tmp := [ ] ;
10732: LD_ADDR_VAR 0 6
10736: PUSH
10737: EMPTY
10738: ST_TO_ADDR
// for i = 1 to list do
10739: LD_ADDR_VAR 0 4
10743: PUSH
10744: DOUBLE
10745: LD_INT 1
10747: DEC
10748: ST_TO_ADDR
10749: LD_VAR 0 5
10753: PUSH
10754: FOR_TO
10755: IFFALSE 10853
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
10757: LD_VAR 0 5
10761: PUSH
10762: LD_VAR 0 4
10766: ARRAY
10767: PUSH
10768: LD_INT 1
10770: ARRAY
10771: PPUSH
10772: LD_VAR 0 5
10776: PUSH
10777: LD_VAR 0 4
10781: ARRAY
10782: PUSH
10783: LD_INT 2
10785: ARRAY
10786: PPUSH
10787: CALL_OW 554
10791: IFFALSE 10851
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
10793: LD_ADDR_VAR 0 6
10797: PUSH
10798: LD_VAR 0 6
10802: PPUSH
10803: LD_VAR 0 6
10807: PUSH
10808: LD_INT 1
10810: PLUS
10811: PPUSH
10812: LD_VAR 0 5
10816: PUSH
10817: LD_VAR 0 4
10821: ARRAY
10822: PUSH
10823: LD_INT 1
10825: ARRAY
10826: PUSH
10827: LD_VAR 0 5
10831: PUSH
10832: LD_VAR 0 4
10836: ARRAY
10837: PUSH
10838: LD_INT 2
10840: ARRAY
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 1
10850: ST_TO_ADDR
// end ;
10851: GO 10754
10853: POP
10854: POP
// ComStop ( bulldozer ) ;
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10864: LD_ADDR_VAR 0 7
10868: PUSH
10869: LD_VAR 0 1
10873: PPUSH
10874: CALL_OW 250
10878: PUSH
10879: LD_VAR 0 1
10883: PPUSH
10884: CALL_OW 251
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: ST_TO_ADDR
// for i = tmp downto 1 do
10893: LD_ADDR_VAR 0 4
10897: PUSH
10898: DOUBLE
10899: LD_VAR 0 6
10903: INC
10904: ST_TO_ADDR
10905: LD_INT 1
10907: PUSH
10908: FOR_DOWNTO
10909: IFFALSE 10997
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10911: LD_ADDR_VAR 0 7
10915: PUSH
10916: LD_VAR 0 7
10920: PUSH
10921: LD_INT 1
10923: ARRAY
10924: PPUSH
10925: LD_VAR 0 7
10929: PUSH
10930: LD_INT 2
10932: ARRAY
10933: PPUSH
10934: LD_VAR 0 6
10938: PPUSH
10939: CALL 11106 0 3
10943: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10944: LD_VAR 0 1
10948: PPUSH
10949: LD_VAR 0 7
10953: PUSH
10954: LD_INT 1
10956: ARRAY
10957: PPUSH
10958: LD_VAR 0 7
10962: PUSH
10963: LD_INT 2
10965: ARRAY
10966: PPUSH
10967: CALL 11004 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10971: LD_ADDR_VAR 0 6
10975: PUSH
10976: LD_VAR 0 6
10980: PPUSH
10981: LD_VAR 0 7
10985: PUSH
10986: LD_INT 3
10988: ARRAY
10989: PPUSH
10990: CALL_OW 3
10994: ST_TO_ADDR
// end ;
10995: GO 10908
10997: POP
10998: POP
// end ;
10999: LD_VAR 0 3
11003: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
11004: LD_INT 0
11006: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
11007: LD_VAR 0 2
11011: PPUSH
11012: LD_VAR 0 3
11016: PPUSH
11017: CALL_OW 351
11021: IFFALSE 11039
11023: PUSH
11024: LD_VAR 0 2
11028: PPUSH
11029: LD_VAR 0 3
11033: PPUSH
11034: CALL_OW 554
11038: AND
11039: IFFALSE 11057
11041: PUSH
11042: LD_VAR 0 2
11046: PPUSH
11047: LD_VAR 0 3
11051: PPUSH
11052: CALL_OW 488
11056: AND
11057: IFFALSE 11080
11059: PUSH
11060: LD_VAR 0 2
11064: PPUSH
11065: LD_VAR 0 3
11069: PPUSH
11070: CALL_OW 428
11074: PUSH
11075: LD_INT 1
11077: NEG
11078: EQUAL
11079: AND
11080: IFFALSE 11101
// AddComMoveXY ( bulldozer , x , y ) ;
11082: LD_VAR 0 1
11086: PPUSH
11087: LD_VAR 0 2
11091: PPUSH
11092: LD_VAR 0 3
11096: PPUSH
11097: CALL_OW 171
// end ;
11101: LD_VAR 0 4
11105: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
11106: LD_INT 0
11108: PPUSH
11109: PPUSH
11110: PPUSH
11111: PPUSH
11112: PPUSH
11113: PPUSH
11114: PPUSH
// dist := 99999 ;
11115: LD_ADDR_VAR 0 6
11119: PUSH
11120: LD_INT 99999
11122: ST_TO_ADDR
// for i = 1 to list do
11123: LD_ADDR_VAR 0 5
11127: PUSH
11128: DOUBLE
11129: LD_INT 1
11131: DEC
11132: ST_TO_ADDR
11133: LD_VAR 0 3
11137: PUSH
11138: FOR_TO
11139: IFFALSE 11277
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
11141: LD_ADDR_VAR 0 7
11145: PUSH
11146: LD_VAR 0 1
11150: PPUSH
11151: LD_VAR 0 2
11155: PPUSH
11156: LD_VAR 0 3
11160: PUSH
11161: LD_VAR 0 5
11165: ARRAY
11166: PUSH
11167: LD_INT 1
11169: ARRAY
11170: PPUSH
11171: LD_VAR 0 3
11175: PUSH
11176: LD_VAR 0 5
11180: ARRAY
11181: PUSH
11182: LD_INT 2
11184: ARRAY
11185: PPUSH
11186: CALL_OW 298
11190: ST_TO_ADDR
// if d = 0 then
11191: LD_VAR 0 7
11195: PUSH
11196: LD_INT 0
11198: EQUAL
11199: IFFALSE 11203
// continue ;
11201: GO 11138
// if d < dist then
11203: LD_VAR 0 7
11207: PUSH
11208: LD_VAR 0 6
11212: LESS
11213: IFFALSE 11275
// begin _x := list [ i ] [ 1 ] ;
11215: LD_ADDR_VAR 0 8
11219: PUSH
11220: LD_VAR 0 3
11224: PUSH
11225: LD_VAR 0 5
11229: ARRAY
11230: PUSH
11231: LD_INT 1
11233: ARRAY
11234: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
11235: LD_ADDR_VAR 0 9
11239: PUSH
11240: LD_VAR 0 3
11244: PUSH
11245: LD_VAR 0 5
11249: ARRAY
11250: PUSH
11251: LD_INT 2
11253: ARRAY
11254: ST_TO_ADDR
// _i := i ;
11255: LD_ADDR_VAR 0 10
11259: PUSH
11260: LD_VAR 0 5
11264: ST_TO_ADDR
// dist := d ;
11265: LD_ADDR_VAR 0 6
11269: PUSH
11270: LD_VAR 0 7
11274: ST_TO_ADDR
// end ; end ;
11275: GO 11138
11277: POP
11278: POP
// result := [ _x , _y , _i , dist ] ;
11279: LD_ADDR_VAR 0 4
11283: PUSH
11284: LD_VAR 0 8
11288: PUSH
11289: LD_VAR 0 9
11293: PUSH
11294: LD_VAR 0 10
11298: PUSH
11299: LD_VAR 0 6
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: ST_TO_ADDR
// end ; end_of_file
11310: LD_VAR 0 4
11314: RET
// export function Action ; begin
11315: LD_INT 0
11317: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
11318: LD_INT 66
11320: PPUSH
11321: LD_INT 4
11323: PPUSH
11324: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11328: LD_INT 22
11330: PUSH
11331: LD_INT 1
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 25
11340: PUSH
11341: LD_INT 2
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PPUSH
11352: CALL_OW 69
11356: PUSH
11357: LD_INT 0
11359: EQUAL
11360: IFFALSE 11374
// SetClass ( JMM , 2 ) ;
11362: LD_EXP 1
11366: PPUSH
11367: LD_INT 2
11369: PPUSH
11370: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11374: LD_STRING M1
11376: PPUSH
11377: CALL_OW 337
// case Difficulty of 1 :
11381: LD_OWVAR 67
11385: PUSH
11386: LD_INT 1
11388: DOUBLE
11389: EQUAL
11390: IFTRUE 11394
11392: GO 11404
11394: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11395: LD_STRING M1-1
11397: PPUSH
11398: CALL_OW 337
11402: GO 11459
11404: LD_INT 2
11406: DOUBLE
11407: EQUAL
11408: IFTRUE 11412
11410: GO 11422
11412: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11413: LD_STRING M1-2
11415: PPUSH
11416: CALL_OW 337
11420: GO 11459
11422: LD_INT 3
11424: DOUBLE
11425: EQUAL
11426: IFTRUE 11430
11428: GO 11440
11430: POP
// ChangeMissionObjectives ( M1-3 ) ; 4 :
11431: LD_STRING M1-3
11433: PPUSH
11434: CALL_OW 337
11438: GO 11459
11440: LD_INT 4
11442: DOUBLE
11443: EQUAL
11444: IFTRUE 11448
11446: GO 11458
11448: POP
// ChangeMissionObjectives ( M1-4 ) ; end ;
11449: LD_STRING M1-4
11451: PPUSH
11452: CALL_OW 337
11456: GO 11459
11458: POP
// ChangeMissionObjectives ( M1cont ) ;
11459: LD_STRING M1cont
11461: PPUSH
11462: CALL_OW 337
// SaveForQuickRestart ;
11466: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
11470: LD_INT 525
11472: PPUSH
11473: LD_INT 700
11475: PPUSH
11476: CALL_OW 12
11480: PPUSH
11481: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
11485: LD_INT 5
11487: PPUSH
11488: LD_INT 82
11490: PPUSH
11491: LD_INT 38
11493: PPUSH
11494: LD_INT 10
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 56
// wait ( 0 0$14 ) ;
11504: LD_INT 490
11506: PPUSH
11507: CALL_OW 67
// firstCrateSpawn := true ;
11511: LD_ADDR_EXP 41
11515: PUSH
11516: LD_INT 1
11518: ST_TO_ADDR
// end ;
11519: LD_VAR 0 1
11523: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
11524: LD_EXP 41
11528: IFFALSE 11919
11530: GO 11532
11532: DISABLE
11533: LD_INT 0
11535: PPUSH
// begin if IsOk ( Lisa ) then
11536: LD_EXP 2
11540: PPUSH
11541: CALL_OW 302
11545: IFFALSE 11561
// Say ( Lisa , DR0-Lisa-1 ) else
11547: LD_EXP 2
11551: PPUSH
11552: LD_STRING DR0-Lisa-1
11554: PPUSH
11555: CALL_OW 88
11559: GO 11707
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11561: LD_INT 22
11563: PUSH
11564: LD_INT 1
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 21
11573: PUSH
11574: LD_INT 1
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 26
11583: PUSH
11584: LD_INT 1
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: LD_INT 25
11596: PUSH
11597: LD_INT 1
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 25
11606: PUSH
11607: LD_INT 2
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 25
11616: PUSH
11617: LD_INT 3
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 25
11626: PUSH
11627: LD_INT 4
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 69
11651: PUSH
11652: LD_EXP 1
11656: PUSH
11657: LD_EXP 8
11661: PUSH
11662: LD_EXP 5
11666: PUSH
11667: LD_EXP 6
11671: PUSH
11672: LD_EXP 7
11676: PUSH
11677: LD_EXP 4
11681: PUSH
11682: LD_EXP 3
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: DIFF
11696: PPUSH
11697: LD_STRING DR0-Sol1-1
11699: PPUSH
11700: LD_STRING DR0-Sol1-1
11702: PPUSH
11703: CALL 7564 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11707: LD_ADDR_VAR 0 1
11711: PUSH
11712: LD_INT 22
11714: PUSH
11715: LD_INT 1
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 21
11724: PUSH
11725: LD_INT 1
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 26
11734: PUSH
11735: LD_INT 1
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: LD_INT 25
11747: PUSH
11748: LD_INT 1
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PUSH
11755: LD_INT 25
11757: PUSH
11758: LD_INT 2
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 25
11767: PUSH
11768: LD_INT 3
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 25
11777: PUSH
11778: LD_INT 4
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: PUSH
11803: LD_EXP 1
11807: PUSH
11808: LD_EXP 8
11812: PUSH
11813: LD_EXP 5
11817: PUSH
11818: LD_EXP 2
11822: PUSH
11823: LD_EXP 6
11827: PUSH
11828: LD_EXP 7
11832: PUSH
11833: LD_EXP 4
11837: PUSH
11838: LD_EXP 3
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: DIFF
11853: PPUSH
11854: LD_STRING DR0-Sol2-1
11856: PPUSH
11857: LD_STRING DR0-Sol2-1
11859: PPUSH
11860: CALL 7564 0 3
11864: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11865: LD_EXP 4
11869: PPUSH
11870: CALL_OW 302
11874: IFFALSE 11888
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11876: LD_EXP 4
11880: PPUSH
11881: LD_STRING DR0-Cyrus-1
11883: PPUSH
11884: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11888: LD_EXP 2
11892: PPUSH
11893: CALL_OW 302
11897: IFTRUE 11905
11899: PUSH
11900: LD_VAR 0 1
11904: OR
11905: IFFALSE 11919
// Say ( JMM , DR0-JMM-1 ) ;
11907: LD_EXP 1
11911: PPUSH
11912: LD_STRING DR0-JMM-1
11914: PPUSH
11915: CALL_OW 88
// end ;
11919: PPOPN 1
11921: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11922: LD_EXP 5
11926: PPUSH
11927: CALL_OW 302
11931: IFFALSE 11967
11933: PUSH
11934: LD_INT 22
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 25
11946: PUSH
11947: LD_INT 16
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 69
11962: PUSH
11963: LD_INT 0
11965: GREATER
11966: AND
11967: IFFALSE 11979
11969: PUSH
11970: LD_INT 1
11972: PPUSH
11973: CALL_OW 463
11977: NOT
11978: AND
11979: IFFALSE 12257
11981: GO 11983
11983: DISABLE
// begin DialogueOn ;
11984: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11988: LD_EXP 5
11992: PPUSH
11993: LD_STRING D10-Frank-1
11995: PPUSH
11996: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
12000: LD_INT 22
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 21
12012: PUSH
12013: LD_INT 1
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 2
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: LD_INT 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 25
12035: PUSH
12036: LD_INT 2
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 25
12045: PUSH
12046: LD_INT 3
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 25
12055: PUSH
12056: LD_INT 4
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: PPUSH
12075: CALL_OW 69
12079: PUSH
12080: LD_EXP 1
12084: PUSH
12085: LD_EXP 5
12089: PUSH
12090: LD_EXP 2
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: DIFF
12100: PPUSH
12101: LD_STRING D10-Sol1-1
12103: PPUSH
12104: LD_STRING D10-FSol1-1
12106: PPUSH
12107: CALL 7564 0 3
// Say ( Frank , D10-Frank-2 ) ;
12111: LD_EXP 5
12115: PPUSH
12116: LD_STRING D10-Frank-2
12118: PPUSH
12119: CALL_OW 88
// if IsOk ( Lisa ) then
12123: LD_EXP 2
12127: PPUSH
12128: CALL_OW 302
12132: IFFALSE 12148
// Say ( Lisa , D10-Lisa-2 ) else
12134: LD_EXP 2
12138: PPUSH
12139: LD_STRING D10-Lisa-2
12141: PPUSH
12142: CALL_OW 88
12146: GO 12253
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12148: LD_INT 22
12150: PUSH
12151: LD_INT 1
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 21
12160: PUSH
12161: LD_INT 1
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: LD_INT 25
12173: PUSH
12174: LD_INT 1
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 25
12183: PUSH
12184: LD_INT 2
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 25
12193: PUSH
12194: LD_INT 3
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: LD_INT 25
12203: PUSH
12204: LD_INT 4
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 69
12227: PUSH
12228: LD_EXP 1
12232: PUSH
12233: LD_EXP 5
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: DIFF
12242: PPUSH
12243: LD_STRING D10-Sol1-2
12245: PPUSH
12246: LD_STRING D10-FSol1-2
12248: PPUSH
12249: CALL 7564 0 3
// DialogueOff ;
12253: CALL_OW 7
// end ;
12257: END
// every 0 0$30 trigger not InBattle ( 1 ) and tick > 10 10$00 do
12258: LD_INT 1
12260: PPUSH
12261: CALL_OW 463
12265: NOT
12266: IFFALSE 12278
12268: PUSH
12269: LD_OWVAR 1
12273: PUSH
12274: LD_INT 21000
12276: GREATER
12277: AND
12278: IFFALSE 12561
12280: GO 12282
12282: DISABLE
// begin HarrisonSupport ;
12283: CALL 2536 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12287: LD_EXP 18
12291: PPUSH
12292: CALL_OW 310
12296: PPUSH
12297: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12301: LD_EXP 18
12305: PPUSH
12306: LD_STRING DEng-Eng1-1
12308: PPUSH
12309: CALL_OW 88
// wait ( 1 1$0 ) ;
12313: LD_INT 2100
12315: PPUSH
12316: CALL_OW 67
// DialogueOn ;
12320: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12324: LD_EXP 15
12328: PPUSH
12329: LD_STRING DRem-Har-1
12331: PPUSH
12332: CALL_OW 94
// if contactWithRussian then
12336: LD_EXP 23
12340: IFFALSE 12356
// Say ( JMM , DRem-JMM-1 ) else
12342: LD_EXP 1
12346: PPUSH
12347: LD_STRING DRem-JMM-1
12349: PPUSH
12350: CALL_OW 88
12354: GO 12368
// Say ( JMM , DRem-JMM-1a ) ;
12356: LD_EXP 1
12360: PPUSH
12361: LD_STRING DRem-JMM-1a
12363: PPUSH
12364: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
12368: LD_EXP 15
12372: PPUSH
12373: LD_STRING DRem-Har-2
12375: PPUSH
12376: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12380: LD_STRING DenisInDelta
12382: PPUSH
12383: LD_INT 0
12385: PPUSH
12386: CALL_OW 30
12390: IFFALSE 12406
// Say ( JMM , DRem-JMM-2 ) else
12392: LD_EXP 1
12396: PPUSH
12397: LD_STRING DRem-JMM-2
12399: PPUSH
12400: CALL_OW 88
12404: GO 12418
// Say ( JMM , DRem-JMM-2a ) ;
12406: LD_EXP 1
12410: PPUSH
12411: LD_STRING DRem-JMM-2a
12413: PPUSH
12414: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
12418: LD_EXP 15
12422: PPUSH
12423: LD_STRING DRem-Har-3
12425: PPUSH
12426: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12430: LD_EXP 1
12434: PPUSH
12435: LD_STRING DRem-JMM-3
12437: PPUSH
12438: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12442: LD_EXP 15
12446: PPUSH
12447: LD_STRING DRem-Har-4
12449: PPUSH
12450: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
12454: LD_STRING DenisInDelta
12456: PPUSH
12457: LD_INT 0
12459: PPUSH
12460: CALL_OW 30
12464: IFFALSE 12524
// begin Say ( JMM , DRem-JMM-4 ) ;
12466: LD_EXP 1
12470: PPUSH
12471: LD_STRING DRem-JMM-4
12473: PPUSH
12474: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12478: LD_EXP 15
12482: PPUSH
12483: LD_STRING DRem-Har-5
12485: PPUSH
12486: CALL_OW 94
// DialogueOff ;
12490: CALL_OW 7
// wait ( 4 4$00 ) ;
12494: LD_INT 8400
12496: PPUSH
12497: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
12501: LD_INT 35
12503: PPUSH
12504: CALL_OW 67
// until not InBattle ( 1 ) ;
12508: LD_INT 1
12510: PPUSH
12511: CALL_OW 463
12515: NOT
12516: IFFALSE 12501
// SpawnDenis ;
12518: CALL 12562 0 0
// end else
12522: GO 12561
// begin DialogueOff ;
12524: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12528: LD_INT 36
12530: PPUSH
12531: LD_INT 1
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12541: LD_INT 15
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12554: LD_STRING MR
12556: PPUSH
12557: CALL_OW 337
// end ; end ;
12561: END
// export function SpawnDenis ; var tmp ; begin
12562: LD_INT 0
12564: PPUSH
12565: PPUSH
// PrepareDenis ;
12566: CALL 2244 0 0
// if not Denis then
12570: LD_EXP 9
12574: NOT
12575: IFFALSE 12579
// exit ;
12577: GO 12800
// CenterNowOnUnits ( Denis ) ;
12579: LD_EXP 9
12583: PPUSH
12584: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
12588: LD_ADDR_VAR 0 2
12592: PUSH
12593: LD_INT 22
12595: PUSH
12596: LD_INT 1
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PPUSH
12603: CALL_OW 69
12607: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
12608: LD_EXP 9
12612: PPUSH
12613: LD_VAR 0 2
12617: PPUSH
12618: LD_EXP 9
12622: PPUSH
12623: CALL_OW 74
12627: PPUSH
12628: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
12632: LD_INT 35
12634: PPUSH
12635: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
12639: LD_INT 22
12641: PUSH
12642: LD_INT 1
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 91
12651: PUSH
12652: LD_EXP 9
12656: PUSH
12657: LD_INT 10
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: LIST
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PPUSH
12669: CALL_OW 69
12673: IFFALSE 12632
// SetSide ( Denis , 1 ) ;
12675: LD_EXP 9
12679: PPUSH
12680: LD_INT 1
12682: PPUSH
12683: CALL_OW 235
// DialogueOn ;
12687: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12691: LD_EXP 9
12695: PPUSH
12696: LD_STRING DDen-Den-1
12698: PPUSH
12699: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12703: LD_EXP 1
12707: PPUSH
12708: LD_STRING DDen-JMM-1
12710: PPUSH
12711: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12715: LD_EXP 9
12719: PPUSH
12720: LD_STRING DDen-Den-2
12722: PPUSH
12723: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12727: LD_EXP 1
12731: PPUSH
12732: LD_STRING DDen-JMM-2
12734: PPUSH
12735: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12739: LD_EXP 9
12743: PPUSH
12744: LD_STRING DDen-Den-3
12746: PPUSH
12747: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12751: LD_EXP 1
12755: PPUSH
12756: LD_STRING DDen-JMM-3
12758: PPUSH
12759: CALL_OW 88
// DialogueOff ;
12763: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12767: LD_INT 36
12769: PPUSH
12770: LD_INT 1
12772: PPUSH
12773: LD_INT 1
12775: PPUSH
12776: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12780: LD_INT 15
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: LD_INT 1
12788: PPUSH
12789: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12793: LD_STRING MR
12795: PPUSH
12796: CALL_OW 337
// end ;
12800: LD_VAR 0 1
12804: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
12805: LD_INT 22
12807: PUSH
12808: LD_INT 1
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 30
12817: PUSH
12818: LD_INT 15
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 69
12833: IFFALSE 12846
12835: PUSH
12836: LD_EXP 9
12840: PPUSH
12841: CALL_OW 302
12845: AND
12846: IFFALSE 12858
12848: PUSH
12849: LD_INT 1
12851: PPUSH
12852: CALL_OW 463
12856: NOT
12857: AND
12858: IFFALSE 12887
12860: GO 12862
12862: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12863: LD_EXP 9
12867: PPUSH
12868: LD_STRING DR1-Den-1
12870: PPUSH
12871: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12875: LD_EXP 1
12879: PPUSH
12880: LD_STRING DR1-JMM-1
12882: PPUSH
12883: CALL_OW 88
// end ;
12887: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12888: LD_INT 15
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 321
12898: PUSH
12899: LD_INT 2
12901: EQUAL
12902: IFFALSE 12915
12904: PUSH
12905: LD_EXP 9
12909: PPUSH
12910: CALL_OW 302
12914: AND
12915: IFFALSE 12927
12917: PUSH
12918: LD_INT 1
12920: PPUSH
12921: CALL_OW 463
12925: NOT
12926: AND
12927: IFFALSE 13136
12929: GO 12931
12931: DISABLE
// begin DialogueOn ;
12932: CALL_OW 6
// if IsOK ( Denis ) then
12936: LD_EXP 9
12940: PPUSH
12941: CALL_OW 302
12945: IFFALSE 12961
// Say ( Denis , DR2-Den-1 ) else
12947: LD_EXP 9
12951: PPUSH
12952: LD_STRING DR2-Den-1
12954: PPUSH
12955: CALL_OW 88
12959: GO 13020
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12961: LD_INT 22
12963: PUSH
12964: LD_INT 1
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: LD_INT 21
12973: PUSH
12974: LD_INT 1
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: LD_INT 25
12983: PUSH
12984: LD_INT 4
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: PPUSH
12996: CALL_OW 69
13000: PUSH
13001: LD_EXP 1
13005: PUSH
13006: EMPTY
13007: LIST
13008: DIFF
13009: PPUSH
13010: LD_STRING DR2-Sci1-1
13012: PPUSH
13013: LD_STRING DR2-FSci1-1
13015: PPUSH
13016: CALL 7564 0 3
// Say ( JMM , DR2-JMM-1 ) ;
13020: LD_EXP 1
13024: PPUSH
13025: LD_STRING DR2-JMM-1
13027: PPUSH
13028: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff [ JMM , Denis , Gladstone , Frank ] , DR2-Sol1-1 ,  ) ;
13032: LD_INT 22
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 21
13044: PUSH
13045: LD_INT 1
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 26
13054: PUSH
13055: LD_INT 1
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 23
13064: PUSH
13065: LD_INT 1
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: PPUSH
13078: CALL_OW 69
13082: PUSH
13083: LD_EXP 1
13087: PUSH
13088: LD_EXP 9
13092: PUSH
13093: LD_EXP 8
13097: PUSH
13098: LD_EXP 5
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: DIFF
13109: PPUSH
13110: LD_STRING DR2-Sol1-1
13112: PPUSH
13113: LD_STRING 
13115: PPUSH
13116: CALL 7564 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13120: LD_EXP 1
13124: PPUSH
13125: LD_STRING DR2-JMM-2
13127: PPUSH
13128: CALL_OW 88
// DialogueOff ;
13132: CALL_OW 7
// end ;
13136: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
13137: LD_INT 22
13139: PUSH
13140: LD_INT 1
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 30
13149: PUSH
13150: LD_INT 36
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PPUSH
13161: CALL_OW 69
13165: PUSH
13166: LD_INT 0
13168: EQUAL
13169: IFFALSE 13216
13171: PUSH
13172: LD_INT 22
13174: PUSH
13175: LD_INT 1
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 21
13184: PUSH
13185: LD_INT 2
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 33
13194: PUSH
13195: LD_INT 2
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 69
13211: PUSH
13212: LD_INT 0
13214: GREATER
13215: AND
13216: IFFALSE 13228
13218: PUSH
13219: LD_EXP 24
13223: PUSH
13224: LD_INT 0
13226: EQUAL
13227: AND
13228: IFFALSE 13240
13230: PUSH
13231: LD_INT 1
13233: PPUSH
13234: CALL_OW 463
13238: NOT
13239: AND
13240: IFFALSE 13377
13242: GO 13244
13244: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 ,  ) ;
13245: LD_INT 22
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 21
13257: PUSH
13258: LD_INT 1
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: LD_INT 25
13267: PUSH
13268: LD_INT 3
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 26
13277: PUSH
13278: LD_INT 1
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: PPUSH
13291: CALL_OW 69
13295: PUSH
13296: LD_EXP 1
13300: PUSH
13301: LD_EXP 6
13305: PUSH
13306: LD_EXP 7
13310: PUSH
13311: LD_EXP 9
13315: PUSH
13316: LD_EXP 16
13320: PUSH
13321: LD_EXP 3
13325: PUSH
13326: LD_EXP 4
13330: PUSH
13331: LD_EXP 2
13335: PUSH
13336: LD_EXP 5
13340: PUSH
13341: LD_EXP 8
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: DIFF
13358: PPUSH
13359: LD_STRING D3a-Mech1-1
13361: PPUSH
13362: LD_STRING 
13364: PPUSH
13365: CALL 7564 0 3
// firstTower = 2 ;
13369: LD_ADDR_EXP 24
13373: PUSH
13374: LD_INT 2
13376: ST_TO_ADDR
// end ;
13377: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13378: LD_INT 22
13380: PUSH
13381: LD_INT 3
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 21
13390: PUSH
13391: LD_INT 3
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PPUSH
13402: CALL_OW 69
13406: PUSH
13407: LD_INT 0
13409: EQUAL
13410: IFFALSE 13541
13412: GO 13414
13414: DISABLE
13415: LD_INT 0
13417: PPUSH
// begin stop_talking := true ;
13418: LD_ADDR_OWVAR 56
13422: PUSH
13423: LD_INT 1
13425: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13426: LD_ADDR_VAR 0 1
13430: PUSH
13431: LD_INT 22
13433: PUSH
13434: LD_INT 1
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 21
13443: PUSH
13444: LD_INT 1
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 2
13453: PUSH
13454: LD_INT 25
13456: PUSH
13457: LD_INT 1
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 25
13466: PUSH
13467: LD_INT 2
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 25
13476: PUSH
13477: LD_INT 3
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 25
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: PPUSH
13506: CALL_OW 69
13510: PUSH
13511: FOR_IN
13512: IFFALSE 13531
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
13514: LD_VAR 0 1
13518: PPUSH
13519: LD_INT 1
13521: PPUSH
13522: LD_INT 7500
13524: PPUSH
13525: CALL_OW 591
13529: GO 13511
13531: POP
13532: POP
// stop_talking := false ;
13533: LD_ADDR_OWVAR 56
13537: PUSH
13538: LD_INT 0
13540: ST_TO_ADDR
// end ;
13541: PPOPN 1
13543: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13544: LD_INT 22
13546: PUSH
13547: LD_INT 1
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 30
13556: PUSH
13557: LD_INT 36
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PPUSH
13568: CALL_OW 69
13572: IFFALSE 13615
13574: PUSH
13575: LD_INT 22
13577: PUSH
13578: LD_INT 1
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 21
13587: PUSH
13588: LD_INT 2
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 33
13597: PUSH
13598: LD_INT 2
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 69
13614: AND
13615: IFFALSE 13623
13617: PUSH
13618: CALL 14174 0 0
13622: AND
13623: IFFALSE 13635
13625: PUSH
13626: LD_INT 1
13628: PPUSH
13629: CALL_OW 463
13633: NOT
13634: AND
13635: IFFALSE 14171
13637: GO 13639
13639: DISABLE
13640: LD_INT 0
13642: PPUSH
13643: PPUSH
13644: PPUSH
13645: PPUSH
13646: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13647: LD_ADDR_VAR 0 3
13651: PUSH
13652: LD_INT 22
13654: PUSH
13655: LD_INT 1
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 30
13664: PUSH
13665: LD_INT 36
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PPUSH
13676: CALL_OW 69
13680: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13681: LD_ADDR_VAR 0 4
13685: PUSH
13686: LD_INT 22
13688: PUSH
13689: LD_INT 1
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 21
13698: PUSH
13699: LD_INT 2
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 33
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PPUSH
13721: CALL_OW 69
13725: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13726: LD_ADDR_VAR 0 5
13730: PUSH
13731: EMPTY
13732: ST_TO_ADDR
// for i in tmpControlTowers do
13733: LD_ADDR_VAR 0 1
13737: PUSH
13738: LD_VAR 0 3
13742: PUSH
13743: FOR_IN
13744: IFFALSE 14169
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
13746: LD_EXP 1
13750: PPUSH
13751: CALL_OW 310
13755: PUSH
13756: LD_VAR 0 1
13760: EQUAL
13761: IFFALSE 13778
13763: PUSH
13764: LD_EXP 1
13768: PPUSH
13769: CALL_OW 257
13773: PUSH
13774: LD_INT 3
13776: EQUAL
13777: AND
13778: IFFALSE 13912
// begin InGameOn ;
13780: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13784: LD_VAR 0 4
13788: PUSH
13789: LD_INT 1
13791: ARRAY
13792: PPUSH
13793: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13797: LD_EXP 1
13801: PPUSH
13802: LD_STRING D4a-JMM-1
13804: PPUSH
13805: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13809: LD_VAR 0 4
13813: PUSH
13814: LD_INT 1
13816: ARRAY
13817: PPUSH
13818: LD_EXP 1
13822: PPUSH
13823: CALL_OW 53
// wait ( 0 0$1 ) ;
13827: LD_INT 35
13829: PPUSH
13830: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13834: LD_VAR 0 4
13838: PUSH
13839: LD_INT 1
13841: ARRAY
13842: PPUSH
13843: LD_VAR 0 4
13847: PUSH
13848: LD_INT 1
13850: ARRAY
13851: PPUSH
13852: CALL_OW 250
13856: PUSH
13857: LD_INT 3
13859: PLUS
13860: PPUSH
13861: LD_VAR 0 4
13865: PUSH
13866: LD_INT 1
13868: ARRAY
13869: PPUSH
13870: CALL_OW 251
13874: PUSH
13875: LD_INT 2
13877: MINUS
13878: PPUSH
13879: CALL_OW 111
// wait ( 0 0$2 ) ;
13883: LD_INT 70
13885: PPUSH
13886: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13890: LD_EXP 1
13894: PPUSH
13895: LD_STRING D4b-JMM-1
13897: PPUSH
13898: CALL_OW 88
// InGameOff ;
13902: CALL_OW 9
// exit ;
13906: POP
13907: POP
13908: GO 14171
// end else
13910: GO 14167
// begin InGameOn ;
13912: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13916: LD_ADDR_VAR 0 5
13920: PUSH
13921: LD_VAR 0 1
13925: PPUSH
13926: CALL_OW 313
13930: PPUSH
13931: LD_INT 25
13933: PUSH
13934: LD_INT 3
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PPUSH
13941: CALL_OW 72
13945: ST_TO_ADDR
// if not tmpMechanicInside then
13946: LD_VAR 0 5
13950: NOT
13951: IFFALSE 13955
// continue ;
13953: GO 13743
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13955: LD_VAR 0 5
13959: PUSH
13960: LD_INT 1
13962: ARRAY
13963: PPUSH
13964: CALL_OW 258
13968: PUSH
13969: LD_INT 1
13971: EQUAL
13972: IFFALSE 13992
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13974: LD_VAR 0 5
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: LD_STRING D4a-Mech1-1
13985: PPUSH
13986: CALL_OW 88
13990: GO 14008
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13992: LD_VAR 0 5
13996: PUSH
13997: LD_INT 1
13999: ARRAY
14000: PPUSH
14001: LD_STRING D4a-FMech1-1
14003: PPUSH
14004: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14008: LD_VAR 0 4
14012: PUSH
14013: LD_INT 1
14015: ARRAY
14016: PPUSH
14017: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
14021: LD_VAR 0 4
14025: PUSH
14026: LD_INT 1
14028: ARRAY
14029: PPUSH
14030: LD_VAR 0 5
14034: PUSH
14035: LD_INT 1
14037: ARRAY
14038: PPUSH
14039: CALL_OW 53
// wait ( 0 0$1 ) ;
14043: LD_INT 35
14045: PPUSH
14046: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14050: LD_VAR 0 4
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PPUSH
14059: LD_VAR 0 4
14063: PUSH
14064: LD_INT 1
14066: ARRAY
14067: PPUSH
14068: CALL_OW 250
14072: PUSH
14073: LD_INT 3
14075: PLUS
14076: PPUSH
14077: LD_VAR 0 4
14081: PUSH
14082: LD_INT 1
14084: ARRAY
14085: PPUSH
14086: CALL_OW 251
14090: PUSH
14091: LD_INT 2
14093: MINUS
14094: PPUSH
14095: CALL_OW 111
// wait ( 0 0$2 ) ;
14099: LD_INT 70
14101: PPUSH
14102: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
14106: LD_VAR 0 5
14110: PUSH
14111: LD_INT 1
14113: ARRAY
14114: PPUSH
14115: CALL_OW 258
14119: PUSH
14120: LD_INT 1
14122: EQUAL
14123: IFFALSE 14143
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
14125: LD_VAR 0 5
14129: PUSH
14130: LD_INT 1
14132: ARRAY
14133: PPUSH
14134: LD_STRING D4b-Mech1-1
14136: PPUSH
14137: CALL_OW 88
14141: GO 14159
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14143: LD_VAR 0 5
14147: PUSH
14148: LD_INT 1
14150: ARRAY
14151: PPUSH
14152: LD_STRING D4b-FMech1-1
14154: PPUSH
14155: CALL_OW 88
// InGameOff ;
14159: CALL_OW 9
// exit ;
14163: POP
14164: POP
14165: GO 14171
// end ; end ;
14167: GO 13743
14169: POP
14170: POP
// end ;
14171: PPOPN 5
14173: END
// function CheckMehInside ; var i , j , tmp ; begin
14174: LD_INT 0
14176: PPUSH
14177: PPUSH
14178: PPUSH
14179: PPUSH
// result := false ;
14180: LD_ADDR_VAR 0 1
14184: PUSH
14185: LD_INT 0
14187: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
14188: LD_ADDR_VAR 0 4
14192: PUSH
14193: LD_INT 22
14195: PUSH
14196: LD_INT 1
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: LD_INT 30
14205: PUSH
14206: LD_INT 36
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PPUSH
14217: CALL_OW 69
14221: ST_TO_ADDR
// if not tmp then
14222: LD_VAR 0 4
14226: NOT
14227: IFFALSE 14231
// exit ;
14229: GO 14295
// for i in tmp do
14231: LD_ADDR_VAR 0 2
14235: PUSH
14236: LD_VAR 0 4
14240: PUSH
14241: FOR_IN
14242: IFFALSE 14293
// for j in UnitsInside ( i ) do
14244: LD_ADDR_VAR 0 3
14248: PUSH
14249: LD_VAR 0 2
14253: PPUSH
14254: CALL_OW 313
14258: PUSH
14259: FOR_IN
14260: IFFALSE 14289
// if GetClass ( j ) = class_mechanic then
14262: LD_VAR 0 3
14266: PPUSH
14267: CALL_OW 257
14271: PUSH
14272: LD_INT 3
14274: EQUAL
14275: IFFALSE 14287
// begin result := true ;
14277: LD_ADDR_VAR 0 1
14281: PUSH
14282: LD_INT 1
14284: ST_TO_ADDR
// break ;
14285: GO 14289
// end ;
14287: GO 14259
14289: POP
14290: POP
14291: GO 14241
14293: POP
14294: POP
// end ;
14295: LD_VAR 0 1
14299: RET
// every 12 12$0 do
14300: GO 14302
14302: DISABLE
// begin repeat wait ( 0 0$1 ) ;
14303: LD_INT 35
14305: PPUSH
14306: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 5 5$00 ;
14310: LD_INT 1
14312: PPUSH
14313: CALL_OW 463
14317: NOT
14318: IFFALSE 14340
14320: PUSH
14321: LD_INT 32
14323: PPUSH
14324: LD_INT 81
14326: PUSH
14327: LD_INT 1
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PPUSH
14334: CALL_OW 70
14338: NOT
14339: AND
14340: IFTRUE 14352
14342: PUSH
14343: LD_EXP 27
14347: PUSH
14348: LD_INT 10500
14350: LESS
14351: OR
14352: IFFALSE 14303
// PrepareKurt ;
14354: CALL 17047 0 0
// end ;
14358: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
14359: LD_EXP 16
14363: PPUSH
14364: CALL_OW 302
14368: IFFALSE 14385
14370: PUSH
14371: LD_EXP 16
14375: PPUSH
14376: CALL_OW 255
14380: PUSH
14381: LD_INT 1
14383: EQUAL
14384: AND
14385: IFFALSE 14393
14387: PUSH
14388: LD_EXP 2
14392: AND
14393: IFFALSE 14558
14395: GO 14397
14397: DISABLE
// begin wait ( 0 0$50 ) ;
14398: LD_INT 1750
14400: PPUSH
14401: CALL_OW 67
// if not IsOk ( Joan ) then
14405: LD_EXP 16
14409: PPUSH
14410: CALL_OW 302
14414: NOT
14415: IFFALSE 14419
// exit ;
14417: GO 14558
// if IsOK ( Lisa ) then
14419: LD_EXP 2
14423: PPUSH
14424: CALL_OW 302
14428: IFFALSE 14558
// begin DialogueOn ;
14430: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14434: LD_EXP 2
14438: PPUSH
14439: LD_STRING D7-Lisa-1
14441: PPUSH
14442: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14446: LD_EXP 1
14450: PPUSH
14451: LD_STRING D7-JMM-1
14453: PPUSH
14454: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14458: LD_EXP 2
14462: PPUSH
14463: LD_STRING D7-Lisa-2
14465: PPUSH
14466: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14470: LD_EXP 1
14474: PPUSH
14475: LD_STRING D7-JMM-2
14477: PPUSH
14478: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14482: LD_EXP 2
14486: PPUSH
14487: LD_STRING D7-Lisa-3
14489: PPUSH
14490: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14494: LD_EXP 1
14498: PPUSH
14499: LD_STRING D7-JMM-3
14501: PPUSH
14502: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14506: LD_EXP 2
14510: PPUSH
14511: LD_STRING D7-Lisa-4
14513: PPUSH
14514: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14518: LD_EXP 1
14522: PPUSH
14523: LD_STRING D7-JMM-4
14525: PPUSH
14526: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14530: LD_EXP 1
14534: PPUSH
14535: LD_STRING D7-JMM-4a
14537: PPUSH
14538: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14542: LD_EXP 2
14546: PPUSH
14547: LD_STRING D7-Lisa-5
14549: PPUSH
14550: CALL_OW 88
// DialogueOff ;
14554: CALL_OW 7
// end ; end ;
14558: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
14559: LD_EXP 14
14563: IFFALSE 14656
14565: PUSH
14566: LD_INT 22
14568: PUSH
14569: LD_INT 1
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 91
14578: PUSH
14579: LD_EXP 14
14583: PUSH
14584: LD_INT 10
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 2
14594: PUSH
14595: LD_INT 25
14597: PUSH
14598: LD_INT 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 25
14607: PUSH
14608: LD_INT 2
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: LD_INT 25
14617: PUSH
14618: LD_INT 3
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 25
14627: PUSH
14628: LD_INT 4
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: LIST
14646: PPUSH
14647: CALL_OW 69
14651: PUSH
14652: LD_INT 1
14654: GREATER
14655: AND
14656: IFFALSE 14673
14658: GO 14660
14660: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14661: LD_EXP 14
14665: PPUSH
14666: LD_STRING D5-Sol1-1
14668: PPUSH
14669: CALL_OW 88
14673: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14674: LD_INT 22
14676: PUSH
14677: LD_INT 1
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 33
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PPUSH
14698: CALL_OW 69
14702: PUSH
14703: LD_INT 2
14705: GREATEREQUAL
14706: IFFALSE 14726
14708: GO 14710
14710: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14711: LD_STRING MRa
14713: PPUSH
14714: CALL_OW 337
// remoteVehiclesBuild := 1 ;
14718: LD_ADDR_EXP 29
14722: PUSH
14723: LD_INT 1
14725: ST_TO_ADDR
// end ;
14726: END
// every 2 2$00 do var i , last ;
14727: GO 14729
14729: DISABLE
14730: LD_INT 0
14732: PPUSH
14733: PPUSH
// begin last := 8 ;
14734: LD_ADDR_VAR 0 2
14738: PUSH
14739: LD_INT 8
14741: ST_TO_ADDR
// for i := 1 to last do
14742: LD_ADDR_VAR 0 1
14746: PUSH
14747: DOUBLE
14748: LD_INT 1
14750: DEC
14751: ST_TO_ADDR
14752: LD_VAR 0 2
14756: PUSH
14757: FOR_TO
14758: IFFALSE 14786
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
14760: LD_INT 6300
14762: PPUSH
14763: LD_INT 12600
14765: PPUSH
14766: CALL_OW 12
14770: PPUSH
14771: CALL_OW 67
// PrepareRandoms ( i ) ;
14775: LD_VAR 0 1
14779: PPUSH
14780: CALL 4248 0 1
// end ;
14784: GO 14757
14786: POP
14787: POP
// end ;
14788: PPOPN 2
14790: END
// every 5 5$20 do
14791: GO 14793
14793: DISABLE
// begin DialogueOn ;
14794: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14798: LD_EXP 10
14802: PPUSH
14803: LD_STRING D12a-Sci-1
14805: PPUSH
14806: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14810: LD_EXP 1
14814: PPUSH
14815: LD_STRING D12a-JMM-1
14817: PPUSH
14818: CALL_OW 88
// DialogueOff ;
14822: CALL_OW 7
// cratesStatus := 1 ;
14826: LD_ADDR_EXP 39
14830: PUSH
14831: LD_INT 1
14833: ST_TO_ADDR
// end ;
14834: END
// every 13 13$0 do
14835: GO 14837
14837: DISABLE
// begin DialogueOn ;
14838: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14842: LD_EXP 10
14846: PPUSH
14847: LD_STRING D12b-Sci-1
14849: PPUSH
14850: CALL_OW 94
// DialogueOff ;
14854: CALL_OW 7
// cratesStatus := 2 ;
14858: LD_ADDR_EXP 39
14862: PUSH
14863: LD_INT 2
14865: ST_TO_ADDR
// BuildBulldozer ;
14866: CALL 10647 0 0
// end ;
14870: END
// every 32 32$0 do
14871: GO 14873
14873: DISABLE
// begin DialogueOn ;
14874: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14878: LD_EXP 10
14882: PPUSH
14883: LD_STRING D12c-Sci-1
14885: PPUSH
14886: CALL_OW 94
// DialogueOff ;
14890: CALL_OW 7
// wait ( 3 3$0 ) ;
14894: LD_INT 6300
14896: PPUSH
14897: CALL_OW 67
// DialogueOn ;
14901: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14905: LD_EXP 10
14909: PPUSH
14910: LD_STRING D12d-Sci-1
14912: PPUSH
14913: CALL_OW 94
// DialogueOff ;
14917: CALL_OW 7
// cratesStatus = 1 ;
14921: LD_ADDR_EXP 39
14925: PUSH
14926: LD_INT 1
14928: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14929: CALL 21447 0 0
// wait ( 2 2$30 ) ;
14933: LD_INT 5250
14935: PPUSH
14936: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14940: LD_INT 35
14942: PPUSH
14943: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14947: LD_INT 1
14949: PPUSH
14950: CALL_OW 463
14954: NOT
14955: IFFALSE 14977
14957: PUSH
14958: LD_INT 32
14960: PPUSH
14961: LD_INT 81
14963: PUSH
14964: LD_INT 1
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PPUSH
14971: CALL_OW 70
14975: NOT
14976: AND
14977: IFTRUE 14989
14979: PUSH
14980: LD_EXP 27
14984: PUSH
14985: LD_INT 6300
14987: LESS
14988: OR
14989: IFFALSE 14940
// PrepareJoan ;
14991: CALL 3097 0 0
// end ;
14995: END
// every 42 42$0 do
14996: GO 14998
14998: DISABLE
// begin DialogueOn ;
14999: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
15003: LD_EXP 10
15007: PPUSH
15008: LD_STRING D12e-Sci-1
15010: PPUSH
15011: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
15015: LD_EXP 1
15019: PPUSH
15020: LD_STRING D12e-JMM-1
15022: PPUSH
15023: CALL_OW 88
// DialogueOff ;
15027: CALL_OW 7
// cratesStatus := 2 ;
15031: LD_ADDR_EXP 39
15035: PUSH
15036: LD_INT 2
15038: ST_TO_ADDR
// end ; end_of_file
15039: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
15040: LD_VAR 0 1
15044: PUSH
15045: LD_INT 1
15047: EQUAL
15048: IFFALSE 15060
15050: PUSH
15051: LD_VAR 0 2
15055: PUSH
15056: LD_INT 3
15058: EQUAL
15059: AND
15060: IFFALSE 15070
// contactWithRussian := 1 ;
15062: LD_ADDR_EXP 23
15066: PUSH
15067: LD_INT 1
15069: ST_TO_ADDR
// end ;
15070: PPOPN 2
15072: END
// on BuildingComplete ( building ) do var i ;
15073: LD_INT 0
15075: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
15076: LD_VAR 0 1
15080: PPUSH
15081: CALL_OW 266
15085: PUSH
15086: LD_INT 36
15088: EQUAL
15089: IFFALSE 15106
15091: PUSH
15092: LD_VAR 0 1
15096: PPUSH
15097: CALL_OW 255
15101: PUSH
15102: LD_INT 1
15104: EQUAL
15105: AND
15106: IFFALSE 15118
15108: PUSH
15109: LD_EXP 24
15113: PUSH
15114: LD_INT 0
15116: EQUAL
15117: AND
15118: IFFALSE 15198
// begin firstTower = 1 ;
15120: LD_ADDR_EXP 24
15124: PUSH
15125: LD_INT 1
15127: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
15128: LD_INT 22
15130: PUSH
15131: LD_INT 1
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: LD_INT 21
15140: PUSH
15141: LD_INT 1
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: LD_INT 25
15150: PUSH
15151: LD_INT 3
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: LD_INT 26
15160: PUSH
15161: LD_INT 1
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: PUSH
15179: LD_EXP 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: DIFF
15187: PPUSH
15188: LD_STRING D3b-Mech1-1
15190: PPUSH
15191: LD_STRING D3b-Mech1-1
15193: PPUSH
15194: CALL 7564 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15198: LD_VAR 0 1
15202: PPUSH
15203: CALL_OW 266
15207: PUSH
15208: LD_INT 0
15210: EQUAL
15211: IFFALSE 15228
15213: PUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: CALL_OW 255
15223: PUSH
15224: LD_INT 1
15226: EQUAL
15227: AND
15228: IFFALSE 15242
// SetBName ( building , theta ) ;
15230: LD_VAR 0 1
15234: PPUSH
15235: LD_STRING theta
15237: PPUSH
15238: CALL_OW 500
// if GetSide ( building ) = 3 then
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 255
15251: PUSH
15252: LD_INT 3
15254: EQUAL
15255: IFFALSE 15295
// begin for i := 1 to 4 do
15257: LD_ADDR_VAR 0 2
15261: PUSH
15262: DOUBLE
15263: LD_INT 1
15265: DEC
15266: ST_TO_ADDR
15267: LD_INT 4
15269: PUSH
15270: FOR_TO
15271: IFFALSE 15293
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15273: LD_ADDR_EXP 32
15277: PUSH
15278: LD_EXP 32
15282: PPUSH
15283: LD_INT 1
15285: PPUSH
15286: CALL_OW 3
15290: ST_TO_ADDR
15291: GO 15270
15293: POP
15294: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 255
15304: PUSH
15305: LD_INT 3
15307: EQUAL
15308: IFFALSE 15362
15310: PUSH
15311: LD_VAR 0 1
15315: PPUSH
15316: CALL_OW 266
15320: PUSH
15321: LD_INT 0
15323: EQUAL
15324: IFTRUE 15341
15326: PUSH
15327: LD_VAR 0 1
15331: PPUSH
15332: CALL_OW 266
15336: PUSH
15337: LD_INT 2
15339: EQUAL
15340: OR
15341: IFTRUE 15358
15343: PUSH
15344: LD_VAR 0 1
15348: PPUSH
15349: CALL_OW 266
15353: PUSH
15354: LD_INT 4
15356: EQUAL
15357: OR
15358: PUSH
15359: EMPTY
15360: LIST
15361: AND
15362: IFFALSE 15373
// ComUpgrade ( building ) ;
15364: LD_VAR 0 1
15368: PPUSH
15369: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15373: LD_VAR 0 1
15377: PPUSH
15378: CALL_OW 255
15382: PUSH
15383: LD_INT 3
15385: EQUAL
15386: IFFALSE 15403
15388: PUSH
15389: LD_VAR 0 1
15393: PPUSH
15394: CALL_OW 266
15398: PUSH
15399: LD_INT 32
15401: EQUAL
15402: AND
15403: IFFALSE 15444
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15405: LD_VAR 0 1
15409: PPUSH
15410: LD_INT 42
15412: PUSH
15413: LD_INT 43
15415: PUSH
15416: LD_INT 44
15418: PUSH
15419: LD_INT 46
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 1
15430: PPUSH
15431: LD_INT 4
15433: PPUSH
15434: CALL_OW 12
15438: ARRAY
15439: PPUSH
15440: CALL_OW 208
// end ;
15444: PPOPN 2
15446: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
15447: LD_VAR 0 1
15451: PPUSH
15452: CALL 38291 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
15456: LD_VAR 0 1
15460: PUSH
15461: LD_INT 22
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 23
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: PPUSH
15496: CALL_OW 69
15500: IN
15501: IFFALSE 15517
// killCounter := killCounter + 1 ;
15503: LD_ADDR_EXP 46
15507: PUSH
15508: LD_EXP 46
15512: PUSH
15513: LD_INT 1
15515: PLUS
15516: ST_TO_ADDR
// if unit in ruAttackersInForest then
15517: LD_VAR 0 1
15521: PUSH
15522: LD_EXP 49
15526: IN
15527: IFFALSE 15545
// ruAttackersInForest := ruAttackersInForest diff unit ;
15529: LD_ADDR_EXP 49
15533: PUSH
15534: LD_EXP 49
15538: PUSH
15539: LD_VAR 0 1
15543: DIFF
15544: ST_TO_ADDR
// if unit in ruAttackers then
15545: LD_VAR 0 1
15549: PUSH
15550: LD_EXP 48
15554: IN
15555: IFFALSE 15573
// ruAttackers := ruAttackers diff unit ;
15557: LD_ADDR_EXP 48
15561: PUSH
15562: LD_EXP 48
15566: PUSH
15567: LD_VAR 0 1
15571: DIFF
15572: ST_TO_ADDR
// if unit = JMM then
15573: LD_VAR 0 1
15577: PUSH
15578: LD_EXP 1
15582: EQUAL
15583: IFFALSE 15592
// YouLost ( JMM ) ;
15585: LD_STRING JMM
15587: PPUSH
15588: CALL_OW 104
// if unit = Joan then
15592: LD_VAR 0 1
15596: PUSH
15597: LD_EXP 16
15601: EQUAL
15602: IFFALSE 15612
// JoanStatus := 0 ;
15604: LD_ADDR_EXP 17
15608: PUSH
15609: LD_INT 0
15611: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
15612: LD_VAR 0 1
15616: PPUSH
15617: CALL_OW 255
15621: PUSH
15622: LD_INT 1
15624: EQUAL
15625: IFFALSE 15642
15627: PUSH
15628: LD_VAR 0 1
15632: PPUSH
15633: CALL_OW 247
15637: PUSH
15638: LD_INT 1
15640: EQUAL
15641: AND
15642: IFFALSE 15659
15644: PUSH
15645: LD_VAR 0 1
15649: PPUSH
15650: CALL_OW 248
15654: PUSH
15655: LD_INT 1
15657: EQUAL
15658: AND
15659: IFFALSE 15675
// unitLost = unitLost + 1 ;
15661: LD_ADDR_EXP 31
15665: PUSH
15666: LD_EXP 31
15670: PUSH
15671: LD_INT 1
15673: PLUS
15674: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
15675: LD_VAR 0 1
15679: PPUSH
15680: CALL_OW 255
15684: PUSH
15685: LD_INT 3
15687: EQUAL
15688: IFFALSE 15705
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 247
15700: PUSH
15701: LD_INT 3
15703: EQUAL
15704: AND
15705: IFFALSE 15737
15707: PUSH
15708: LD_VAR 0 1
15712: PPUSH
15713: CALL_OW 266
15717: PUSH
15718: LD_INT 4
15720: PUSH
15721: LD_INT 5
15723: PUSH
15724: LD_INT 32
15726: PUSH
15727: LD_INT 31
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: IN
15736: AND
15737: IFFALSE 15823
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15739: LD_ADDR_EXP 32
15743: PUSH
15744: LD_EXP 32
15748: PUSH
15749: LD_VAR 0 1
15753: PPUSH
15754: CALL_OW 266
15758: ADD
15759: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15760: LD_ADDR_EXP 32
15764: PUSH
15765: LD_EXP 32
15769: PUSH
15770: LD_VAR 0 1
15774: PPUSH
15775: CALL_OW 250
15779: ADD
15780: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15781: LD_ADDR_EXP 32
15785: PUSH
15786: LD_EXP 32
15790: PUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL_OW 251
15800: ADD
15801: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15802: LD_ADDR_EXP 32
15806: PUSH
15807: LD_EXP 32
15811: PUSH
15812: LD_VAR 0 1
15816: PPUSH
15817: CALL_OW 254
15821: ADD
15822: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15823: LD_EXP 47
15827: IFFALSE 15844
15829: PUSH
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 257
15839: PUSH
15840: LD_INT 3
15842: EQUAL
15843: AND
15844: IFFALSE 15861
15846: PUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 255
15856: PUSH
15857: LD_INT 3
15859: EQUAL
15860: AND
15861: IFFALSE 15872
15863: PUSH
15864: LD_INT 21
15866: PPUSH
15867: CALL_OW 302
15871: AND
15872: IFFALSE 15887
15874: PUSH
15875: LD_INT 21
15877: PPUSH
15878: CALL_OW 255
15882: PUSH
15883: LD_INT 3
15885: EQUAL
15886: AND
15887: IFFALSE 15969
// begin ruMechCounter := ruMechCounter - 1 ;
15889: LD_ADDR_EXP 47
15893: PUSH
15894: LD_EXP 47
15898: PUSH
15899: LD_INT 1
15901: MINUS
15902: ST_TO_ADDR
// uc_side := 3 ;
15903: LD_ADDR_OWVAR 20
15907: PUSH
15908: LD_INT 3
15910: ST_TO_ADDR
// uc_nation := 3 ;
15911: LD_ADDR_OWVAR 21
15915: PUSH
15916: LD_INT 3
15918: ST_TO_ADDR
// hc_gallery :=  ;
15919: LD_ADDR_OWVAR 33
15923: PUSH
15924: LD_STRING 
15926: ST_TO_ADDR
// hc_name :=  ;
15927: LD_ADDR_OWVAR 26
15931: PUSH
15932: LD_STRING 
15934: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15935: LD_INT 0
15937: PPUSH
15938: LD_EXP 35
15942: PPUSH
15943: LD_EXP 36
15947: PPUSH
15948: CALL_OW 12
15952: PPUSH
15953: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15957: CALL_OW 44
15961: PPUSH
15962: LD_INT 21
15964: PPUSH
15965: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15969: LD_VAR 0 1
15973: PPUSH
15974: CALL_OW 255
15978: PUSH
15979: LD_INT 3
15981: EQUAL
15982: IFFALSE 15999
15984: PUSH
15985: LD_VAR 0 1
15989: PPUSH
15990: CALL_OW 264
15994: PUSH
15995: LD_INT 52
15997: EQUAL
15998: AND
15999: IFFALSE 16010
16001: PUSH
16002: LD_INT 21
16004: PPUSH
16005: CALL_OW 302
16009: AND
16010: IFFALSE 16025
16012: PUSH
16013: LD_INT 21
16015: PPUSH
16016: CALL_OW 255
16020: PUSH
16021: LD_INT 3
16023: EQUAL
16024: AND
16025: IFFALSE 16046
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
16027: LD_INT 21
16029: PPUSH
16030: LD_INT 22
16032: PPUSH
16033: LD_INT 1
16035: PPUSH
16036: LD_INT 1
16038: PPUSH
16039: LD_INT 52
16041: PPUSH
16042: CALL_OW 125
// end ;
16046: PPOPN 1
16048: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
16049: LD_INT 0
16051: PPUSH
16052: PPUSH
16053: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
16054: LD_VAR 0 1
16058: PPUSH
16059: LD_VAR 0 2
16063: PPUSH
16064: CALL 38349 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
16068: LD_VAR 0 1
16072: PPUSH
16073: CALL_OW 255
16077: PUSH
16078: LD_INT 3
16080: EQUAL
16081: IFFALSE 16110
16083: PUSH
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 264
16093: PUSH
16094: LD_INT 51
16096: PUSH
16097: LD_INT 52
16099: PUSH
16100: LD_INT 53
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: IN
16108: NOT
16109: AND
16110: IFFALSE 16141
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
16112: LD_ADDR_EXP 48
16116: PUSH
16117: LD_EXP 48
16121: PPUSH
16122: LD_EXP 48
16126: PUSH
16127: LD_INT 1
16129: PLUS
16130: PPUSH
16131: LD_VAR 0 1
16135: PPUSH
16136: CALL_OW 1
16140: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16141: LD_VAR 0 1
16145: PPUSH
16146: CALL_OW 264
16150: PUSH
16151: LD_INT 53
16153: EQUAL
16154: IFFALSE 16309
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
16156: LD_VAR 0 1
16160: PPUSH
16161: LD_INT 60
16163: PPUSH
16164: LD_INT 85
16166: PPUSH
16167: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
16171: LD_VAR 0 1
16175: PPUSH
16176: LD_INT 43
16178: PPUSH
16179: LD_INT 69
16181: PPUSH
16182: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
16186: LD_VAR 0 1
16190: PPUSH
16191: LD_INT 37
16193: PPUSH
16194: LD_INT 46
16196: PPUSH
16197: CALL_OW 171
// wait ( 0 0$1 ) ;
16201: LD_INT 35
16203: PPUSH
16204: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16208: LD_INT 35
16210: PPUSH
16211: CALL_OW 67
// until not HasTask ( vehicle ) ;
16215: LD_VAR 0 1
16219: PPUSH
16220: CALL_OW 314
16224: NOT
16225: IFFALSE 16208
// CutTreeInArea ( vehicle , cutTreeArea ) ;
16227: LD_VAR 0 1
16231: PPUSH
16232: LD_INT 34
16234: PPUSH
16235: CALL 10701 0 2
// repeat wait ( 0 0$1 ) ;
16239: LD_INT 35
16241: PPUSH
16242: CALL_OW 67
// until not HasTask ( vehicle ) ;
16246: LD_VAR 0 1
16250: PPUSH
16251: CALL_OW 314
16255: NOT
16256: IFFALSE 16239
// un := IsDrivenBy ( vehicle ) ;
16258: LD_ADDR_VAR 0 4
16262: PUSH
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL_OW 311
16272: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
16273: LD_VAR 0 4
16277: PPUSH
16278: LD_INT 96
16280: PPUSH
16281: LD_INT 77
16283: PPUSH
16284: CALL_OW 171
// AddComExitVehicle ( un ) ;
16288: LD_VAR 0 4
16292: PPUSH
16293: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
16297: LD_VAR 0 4
16301: PPUSH
16302: LD_INT 17
16304: PPUSH
16305: CALL_OW 180
// end ; end ;
16309: PPOPN 5
16311: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 255
16321: PUSH
16322: LD_INT 3
16324: EQUAL
16325: IFFALSE 16356
// begin tamedApemans = tamedApemans + 1 ;
16327: LD_ADDR_EXP 33
16331: PUSH
16332: LD_EXP 33
16336: PUSH
16337: LD_INT 1
16339: PLUS
16340: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
16341: LD_VAR 0 1
16345: PPUSH
16346: LD_INT 106
16348: PPUSH
16349: LD_INT 85
16351: PPUSH
16352: CALL_OW 111
// end ; end ;
16356: PPOPN 2
16358: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
16359: LD_VAR 0 2
16363: PPUSH
16364: CALL_OW 255
16368: PUSH
16369: LD_INT 3
16371: EQUAL
16372: IFFALSE 16389
16374: PUSH
16375: LD_VAR 0 1
16379: PPUSH
16380: CALL_OW 255
16384: PUSH
16385: LD_INT 3
16387: EQUAL
16388: AND
16389: IFFALSE 16400
16391: PUSH
16392: LD_INT 21
16394: PPUSH
16395: CALL_OW 302
16399: AND
16400: IFFALSE 16414
// ComEnterUnit ( human , rufab ) ;
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_INT 21
16409: PPUSH
16410: CALL_OW 120
// end ;
16414: PPOPN 4
16416: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16417: LD_VAR 0 1
16421: PUSH
16422: LD_INT 21
16424: EQUAL
16425: IFFALSE 16442
16427: PUSH
16428: LD_VAR 0 2
16432: PPUSH
16433: CALL_OW 255
16437: PUSH
16438: LD_INT 3
16440: EQUAL
16441: AND
16442: IFFALSE 16456
// SetLives ( human , 1000 ) ;
16444: LD_VAR 0 2
16448: PPUSH
16449: LD_INT 1000
16451: PPUSH
16452: CALL_OW 234
// end ;
16456: PPOPN 2
16458: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL 38333 0 1
// end ; end_of_file
16468: PPOPN 1
16470: END
// every 0 0$30 trigger cratesStatus = 1 do
16471: LD_EXP 39
16475: PUSH
16476: LD_INT 1
16478: EQUAL
16479: IFFALSE 16532
16481: GO 16483
16483: DISABLE
// begin enable ;
16484: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
16485: LD_INT 350
16487: PUSH
16488: LD_INT 875
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 1
16497: PPUSH
16498: LD_INT 2
16500: PPUSH
16501: CALL_OW 12
16505: ARRAY
16506: PPUSH
16507: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
16511: LD_INT 1
16513: PPUSH
16514: LD_INT 5
16516: PPUSH
16517: CALL_OW 12
16521: PPUSH
16522: LD_INT 7
16524: PPUSH
16525: LD_INT 1
16527: PPUSH
16528: CALL_OW 55
// end ;
16532: END
// every 1 1$0 trigger cratesStatus = 2 do
16533: LD_EXP 39
16537: PUSH
16538: LD_INT 2
16540: EQUAL
16541: IFFALSE 16624
16543: GO 16545
16545: DISABLE
// begin enable ;
16546: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16547: LD_INT 3150
16549: PUSH
16550: LD_INT 4550
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 1
16559: PPUSH
16560: LD_INT 2
16562: PPUSH
16563: CALL_OW 12
16567: ARRAY
16568: PPUSH
16569: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
16573: LD_INT 2
16575: PUSH
16576: LD_INT 5
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 1
16585: PPUSH
16586: LD_INT 2
16588: PPUSH
16589: CALL_OW 12
16593: ARRAY
16594: PPUSH
16595: LD_INT 6
16597: PUSH
16598: LD_INT 7
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 2
16610: PPUSH
16611: CALL_OW 12
16615: ARRAY
16616: PPUSH
16617: LD_INT 1
16619: PPUSH
16620: CALL_OW 55
// end ;
16624: END
// every 0 0$30 + 0 0$10 do
16625: GO 16627
16627: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16628: LD_INT 4
16630: PUSH
16631: LD_INT 5
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 1
16640: PPUSH
16641: LD_INT 2
16643: PPUSH
16644: CALL_OW 12
16648: ARRAY
16649: PPUSH
16650: LD_INT 7
16652: PPUSH
16653: LD_INT 1
16655: PPUSH
16656: CALL_OW 55
// Wait ( 0 0$15 ) ;
16660: LD_INT 525
16662: PPUSH
16663: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16667: LD_INT 4
16669: PUSH
16670: LD_INT 5
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 1
16679: PPUSH
16680: LD_INT 2
16682: PPUSH
16683: CALL_OW 12
16687: ARRAY
16688: PPUSH
16689: LD_INT 7
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 55
// Wait ( 0 0$20 ) ;
16699: LD_INT 700
16701: PPUSH
16702: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16706: LD_INT 4
16708: PUSH
16709: LD_INT 5
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 1
16718: PPUSH
16719: LD_INT 2
16721: PPUSH
16722: CALL_OW 12
16726: ARRAY
16727: PPUSH
16728: LD_INT 7
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: CALL_OW 55
// end ; end_of_file
16738: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16739: LD_EXP 25
16743: PUSH
16744: LD_INT 1
16746: EQUAL
16747: IFFALSE 17044
16749: GO 16751
16751: DISABLE
16752: LD_INT 0
16754: PPUSH
16755: PPUSH
16756: PPUSH
// begin enable ;
16757: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_INT 22
16765: PUSH
16766: LD_INT 1
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 21
16775: PUSH
16776: LD_INT 3
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 2
16785: PUSH
16786: LD_INT 30
16788: PUSH
16789: LD_INT 0
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 30
16798: PUSH
16799: LD_INT 1
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: PPUSH
16816: CALL_OW 69
16820: ST_TO_ADDR
// for i in tmp do
16821: LD_ADDR_VAR 0 1
16825: PUSH
16826: LD_VAR 0 2
16830: PUSH
16831: FOR_IN
16832: IFFALSE 16865
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16834: LD_ADDR_VAR 0 3
16838: PUSH
16839: LD_VAR 0 3
16843: PUSH
16844: LD_VAR 0 1
16848: PPUSH
16849: CALL_OW 274
16853: PPUSH
16854: LD_INT 1
16856: PPUSH
16857: CALL_OW 275
16861: PLUS
16862: ST_TO_ADDR
16863: GO 16831
16865: POP
16866: POP
// strings = [ ] ;
16867: LD_ADDR_EXP 28
16871: PUSH
16872: EMPTY
16873: ST_TO_ADDR
// if tmp = 0 then
16874: LD_VAR 0 2
16878: PUSH
16879: LD_INT 0
16881: EQUAL
16882: IFFALSE 16907
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16884: LD_ADDR_EXP 28
16888: PUSH
16889: LD_EXP 28
16893: PUSH
16894: LD_STRING #Am06-1
16896: PUSH
16897: LD_EXP 26
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: ADD
16906: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
16907: LD_VAR 0 2
16911: IFFALSE 16925
16913: PUSH
16914: LD_EXP 26
16918: PUSH
16919: LD_VAR 0 3
16923: GREATER
16924: AND
16925: IFFALSE 16956
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16927: LD_ADDR_EXP 28
16931: PUSH
16932: LD_EXP 28
16936: PUSH
16937: LD_STRING #Am06-1
16939: PUSH
16940: LD_EXP 26
16944: PUSH
16945: LD_VAR 0 3
16949: MINUS
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: ADD
16955: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16956: LD_VAR 0 2
16960: IFFALSE 16974
16962: PUSH
16963: LD_EXP 26
16967: PUSH
16968: LD_VAR 0 3
16972: LESSEQUAL
16973: AND
16974: IFFALSE 16997
// strings = strings ^ [ #Am06-1 , 0 ] ;
16976: LD_ADDR_EXP 28
16980: PUSH
16981: LD_EXP 28
16985: PUSH
16986: LD_STRING #Am06-1
16988: PUSH
16989: LD_INT 0
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: ADD
16996: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16997: LD_ADDR_EXP 27
17001: PUSH
17002: LD_EXP 27
17006: PUSH
17007: LD_INT 35
17009: MINUS
17010: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
17011: LD_ADDR_EXP 28
17015: PUSH
17016: LD_EXP 28
17020: PUSH
17021: LD_STRING #Am06-2
17023: PUSH
17024: LD_EXP 27
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: ADD
17033: ST_TO_ADDR
// display_strings = strings ;
17034: LD_ADDR_OWVAR 47
17038: PUSH
17039: LD_EXP 28
17043: ST_TO_ADDR
// end ; end_of_file
17044: PPOPN 3
17046: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 , forceJMM ; begin
17047: LD_INT 0
17049: PPUSH
17050: PPUSH
17051: PPUSH
17052: PPUSH
17053: PPUSH
17054: PPUSH
17055: PPUSH
17056: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17057: LD_ADDR_VAR 0 3
17061: PUSH
17062: LD_INT 22
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 2
17074: PUSH
17075: LD_INT 30
17077: PUSH
17078: LD_INT 0
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 30
17087: PUSH
17088: LD_INT 1
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PPUSH
17104: CALL_OW 69
17108: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17109: LD_INT 35
17111: PPUSH
17112: CALL_OW 67
// until depot ;
17116: LD_VAR 0 3
17120: IFFALSE 17057
// forceJMM := false ;
17122: LD_ADDR_VAR 0 8
17126: PUSH
17127: LD_INT 0
17129: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17130: LD_INT 35
17132: PPUSH
17133: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ) ;
17137: LD_ADDR_VAR 0 4
17141: PUSH
17142: LD_INT 22
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 91
17154: PUSH
17155: LD_VAR 0 3
17159: PUSH
17160: LD_INT 1
17162: ARRAY
17163: PUSH
17164: LD_INT 15
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 21
17174: PUSH
17175: LD_INT 1
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 2
17184: PUSH
17185: LD_INT 25
17187: PUSH
17188: LD_INT 1
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 25
17197: PUSH
17198: LD_INT 2
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 25
17207: PUSH
17208: LD_INT 3
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 25
17217: PUSH
17218: LD_INT 4
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 3
17234: PUSH
17235: LD_INT 54
17237: PUSH
17238: EMPTY
17239: LIST
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 3
17247: PUSH
17248: LD_INT 55
17250: PUSH
17251: EMPTY
17252: LIST
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: PUSH
17271: LD_EXP 2
17275: PUSH
17276: LD_EXP 3
17280: PUSH
17281: LD_EXP 4
17285: PUSH
17286: LD_EXP 5
17290: PUSH
17291: LD_EXP 7
17295: PUSH
17296: LD_EXP 8
17300: PUSH
17301: LD_EXP 9
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: DIFF
17315: ST_TO_ADDR
// if timeToEnd < 10 10$00 then
17316: LD_EXP 27
17320: PUSH
17321: LD_INT 21000
17323: LESS
17324: IFFALSE 17336
// begin forceJMM := true ;
17326: LD_ADDR_VAR 0 8
17330: PUSH
17331: LD_INT 1
17333: ST_TO_ADDR
// break ;
17334: GO 17354
// end ; until tmp and not InBattle ( 1 ) ;
17336: LD_VAR 0 4
17340: IFFALSE 17352
17342: PUSH
17343: LD_INT 1
17345: PPUSH
17346: CALL_OW 463
17350: NOT
17351: AND
17352: IFFALSE 17130
// if not forceJMM then
17354: LD_VAR 0 8
17358: NOT
17359: IFFALSE 17387
// tmp := tmp [ rand ( 1 , tmp ) ] else
17361: LD_ADDR_VAR 0 4
17365: PUSH
17366: LD_VAR 0 4
17370: PUSH
17371: LD_INT 1
17373: PPUSH
17374: LD_VAR 0 4
17378: PPUSH
17379: CALL_OW 12
17383: ARRAY
17384: ST_TO_ADDR
17385: GO 17397
// tmp := JMM ;
17387: LD_ADDR_VAR 0 4
17391: PUSH
17392: LD_EXP 1
17396: ST_TO_ADDR
// blockSpawn := 1 ;
17397: LD_ADDR_EXP 30
17401: PUSH
17402: LD_INT 1
17404: ST_TO_ADDR
// uc_side := 2 ;
17405: LD_ADDR_OWVAR 20
17409: PUSH
17410: LD_INT 2
17412: ST_TO_ADDR
// uc_nation := 2 ;
17413: LD_ADDR_OWVAR 21
17417: PUSH
17418: LD_INT 2
17420: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
17421: LD_ADDR_EXP 20
17425: PUSH
17426: LD_STRING Kurt
17428: PPUSH
17429: LD_INT 0
17431: PPUSH
17432: LD_STRING 
17434: PPUSH
17435: CALL 44665 0 3
17439: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17440: LD_EXP 20
17444: PPUSH
17445: LD_VAR 0 4
17449: PPUSH
17450: CALL_OW 250
17454: PPUSH
17455: LD_VAR 0 4
17459: PPUSH
17460: CALL_OW 251
17464: PPUSH
17465: LD_INT 5
17467: PPUSH
17468: LD_INT 1
17470: PPUSH
17471: CALL_OW 50
// InGameOn ;
17475: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17479: LD_EXP 20
17483: PPUSH
17484: CALL_OW 87
// wait ( 0 0$2 ) ;
17488: LD_INT 70
17490: PPUSH
17491: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17495: LD_EXP 20
17499: PPUSH
17500: LD_VAR 0 4
17504: PPUSH
17505: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
17509: LD_VAR 0 4
17513: PPUSH
17514: LD_EXP 20
17518: PPUSH
17519: CALL_OW 112
// wait ( 0 0$1 ) ;
17523: LD_INT 35
17525: PPUSH
17526: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
17530: LD_VAR 0 4
17534: PPUSH
17535: LD_EXP 20
17539: PPUSH
17540: CALL_OW 119
// DialogueOn ;
17544: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17548: LD_EXP 20
17552: PPUSH
17553: LD_STRING D2-Kurt-1
17555: PPUSH
17556: CALL_OW 88
// if tmp = JMM then
17560: LD_VAR 0 4
17564: PUSH
17565: LD_EXP 1
17569: EQUAL
17570: IFFALSE 17662
// begin Say ( JMM , D2-JMM-1 ) ;
17572: LD_EXP 1
17576: PPUSH
17577: LD_STRING D2-JMM-1
17579: PPUSH
17580: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17584: LD_EXP 20
17588: PPUSH
17589: LD_STRING D2-Kurt-2
17591: PPUSH
17592: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17596: LD_EXP 1
17600: PPUSH
17601: LD_STRING D2-JMM-2
17603: PPUSH
17604: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17608: LD_EXP 20
17612: PPUSH
17613: LD_STRING D2-Kurt-3
17615: PPUSH
17616: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17620: LD_EXP 1
17624: PPUSH
17625: LD_STRING D2-JMM-3
17627: PPUSH
17628: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17632: LD_EXP 20
17636: PPUSH
17637: LD_STRING D2-Kurt-4
17639: PPUSH
17640: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17644: LD_EXP 1
17648: PPUSH
17649: LD_STRING D2-JMM-4
17651: PPUSH
17652: CALL_OW 88
// DialogueOff ;
17656: CALL_OW 7
// end else
17660: GO 17890
// begin if GetSex ( tmp ) = 1 then
17662: LD_VAR 0 4
17666: PPUSH
17667: CALL_OW 258
17671: PUSH
17672: LD_INT 1
17674: EQUAL
17675: IFFALSE 17691
// Say ( tmp , D2-Sol1-1 ) else
17677: LD_VAR 0 4
17681: PPUSH
17682: LD_STRING D2-Sol1-1
17684: PPUSH
17685: CALL_OW 88
17689: GO 17703
// Say ( tmp , D2-FSol1-1 ) ;
17691: LD_VAR 0 4
17695: PPUSH
17696: LD_STRING D2-FSol1-1
17698: PPUSH
17699: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17703: LD_EXP 20
17707: PPUSH
17708: LD_STRING D2-Kurt-2
17710: PPUSH
17711: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17715: LD_VAR 0 4
17719: PPUSH
17720: CALL_OW 258
17724: PUSH
17725: LD_INT 1
17727: EQUAL
17728: IFFALSE 17744
// Say ( tmp , D2-Sol1-2 ) else
17730: LD_VAR 0 4
17734: PPUSH
17735: LD_STRING D2-Sol1-2
17737: PPUSH
17738: CALL_OW 88
17742: GO 17756
// Say ( tmp , D2-FSol1-2 ) ;
17744: LD_VAR 0 4
17748: PPUSH
17749: LD_STRING D2-FSol1-2
17751: PPUSH
17752: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17756: LD_EXP 20
17760: PPUSH
17761: LD_STRING D2-Kurt-3
17763: PPUSH
17764: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17768: LD_VAR 0 4
17772: PPUSH
17773: CALL_OW 258
17777: PUSH
17778: LD_INT 1
17780: EQUAL
17781: IFFALSE 17797
// Say ( tmp , D2-Sol1-3 ) else
17783: LD_VAR 0 4
17787: PPUSH
17788: LD_STRING D2-Sol1-3
17790: PPUSH
17791: CALL_OW 88
17795: GO 17809
// Say ( tmp , D2-FSol1-3 ) ;
17797: LD_VAR 0 4
17801: PPUSH
17802: LD_STRING D2-FSol1-3
17804: PPUSH
17805: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17809: LD_EXP 20
17813: PPUSH
17814: LD_STRING D2-Kurt-4
17816: PPUSH
17817: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17821: LD_VAR 0 4
17825: PPUSH
17826: CALL_OW 258
17830: PUSH
17831: LD_INT 1
17833: EQUAL
17834: IFFALSE 17862
// begin Say ( tmp , D2-Sol1-4 ) ;
17836: LD_VAR 0 4
17840: PPUSH
17841: LD_STRING D2-Sol1-4
17843: PPUSH
17844: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
17848: LD_VAR 0 4
17852: PPUSH
17853: LD_STRING D2-Sol1-5
17855: PPUSH
17856: CALL_OW 88
// end else
17860: GO 17886
// begin Say ( tmp , D2-FSol1-4 ) ;
17862: LD_VAR 0 4
17866: PPUSH
17867: LD_STRING D2-FSol1-4
17869: PPUSH
17870: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
17874: LD_VAR 0 4
17878: PPUSH
17879: LD_STRING D2-FSol1-5
17881: PPUSH
17882: CALL_OW 88
// end ; DialogueOff ;
17886: CALL_OW 7
// end ; dec := ShowQuery1 ;
17890: LD_ADDR_VAR 0 6
17894: PUSH
17895: CALL 8049 0 0
17899: ST_TO_ADDR
// if dec = 1 then
17900: LD_VAR 0 6
17904: PUSH
17905: LD_INT 1
17907: EQUAL
17908: IFFALSE 17970
// begin DialogueOn ;
17910: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17914: LD_EXP 20
17918: PPUSH
17919: LD_STRING D2a-Kurt-1
17921: PPUSH
17922: CALL_OW 88
// DialogueOff ;
17926: CALL_OW 7
// InGameOff ;
17930: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17934: LD_INT 1
17936: PPUSH
17937: LD_INT 2
17939: PPUSH
17940: LD_INT 2
17942: PPUSH
17943: LD_INT 1
17945: PPUSH
17946: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17950: LD_EXP 20
17954: PPUSH
17955: LD_INT 8
17957: PPUSH
17958: CALL_OW 113
// readyToEscape := 1 ;
17962: LD_ADDR_EXP 22
17966: PUSH
17967: LD_INT 1
17969: ST_TO_ADDR
// end ; if dec = 2 then
17970: LD_VAR 0 6
17974: PUSH
17975: LD_INT 2
17977: EQUAL
17978: IFFALSE 18446
// begin DialogueOn ;
17980: CALL_OW 6
// if tmp = JMM then
17984: LD_VAR 0 4
17988: PUSH
17989: LD_EXP 1
17993: EQUAL
17994: IFFALSE 18050
// begin Say ( JMM , D2b-JMM-1 ) ;
17996: LD_EXP 1
18000: PPUSH
18001: LD_STRING D2b-JMM-1
18003: PPUSH
18004: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18008: LD_EXP 20
18012: PPUSH
18013: LD_STRING D2b-Kurt-1
18015: PPUSH
18016: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
18020: LD_EXP 1
18024: PPUSH
18025: LD_STRING D2b-JMM-2
18027: PPUSH
18028: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18032: LD_EXP 20
18036: PPUSH
18037: LD_STRING D2b-Kurt-2
18039: PPUSH
18040: CALL_OW 88
// DialogueOff ;
18044: CALL_OW 7
// end else
18048: GO 18201
// begin if GetSex ( tmp ) = 1 then
18050: LD_VAR 0 4
18054: PPUSH
18055: CALL_OW 258
18059: PUSH
18060: LD_INT 1
18062: EQUAL
18063: IFFALSE 18079
// Say ( tmp , D2b-Sol1-1 ) else
18065: LD_VAR 0 4
18069: PPUSH
18070: LD_STRING D2b-Sol1-1
18072: PPUSH
18073: CALL_OW 88
18077: GO 18091
// Say ( tmp , D2b-FSol1-1 ) ;
18079: LD_VAR 0 4
18083: PPUSH
18084: LD_STRING D2b-FSol1-1
18086: PPUSH
18087: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18091: LD_EXP 20
18095: PPUSH
18096: LD_STRING D2b-Kurt-1
18098: PPUSH
18099: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18103: LD_VAR 0 4
18107: PPUSH
18108: CALL_OW 258
18112: PUSH
18113: LD_INT 1
18115: EQUAL
18116: IFFALSE 18132
// Say ( tmp , D2b-Sol1-2 ) else
18118: LD_VAR 0 4
18122: PPUSH
18123: LD_STRING D2b-Sol1-2
18125: PPUSH
18126: CALL_OW 88
18130: GO 18144
// Say ( tmp , D2b-FSol1-2 ) ;
18132: LD_VAR 0 4
18136: PPUSH
18137: LD_STRING D2b-FSol1-2
18139: PPUSH
18140: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18144: LD_EXP 20
18148: PPUSH
18149: LD_STRING D2b-Kurt-2
18151: PPUSH
18152: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18156: LD_VAR 0 4
18160: PPUSH
18161: CALL_OW 258
18165: PUSH
18166: LD_INT 1
18168: EQUAL
18169: IFFALSE 18185
// Say ( tmp , D2c-Sol1-2 ) else
18171: LD_VAR 0 4
18175: PPUSH
18176: LD_STRING D2c-Sol1-2
18178: PPUSH
18179: CALL_OW 88
18183: GO 18197
// Say ( tmp , D2c-FSol1-2 ) ;
18185: LD_VAR 0 4
18189: PPUSH
18190: LD_STRING D2c-FSol1-2
18192: PPUSH
18193: CALL_OW 88
// DialogueOff ;
18197: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
18201: LD_ADDR_VAR 0 7
18205: PUSH
18206: CALL 8070 0 0
18210: ST_TO_ADDR
// if dec2 = 1 then
18211: LD_VAR 0 7
18215: PUSH
18216: LD_INT 1
18218: EQUAL
18219: IFFALSE 18281
// begin DialogueOn ;
18221: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18225: LD_EXP 20
18229: PPUSH
18230: LD_STRING D2a-Kurt-1
18232: PPUSH
18233: CALL_OW 88
// DialogueOff ;
18237: CALL_OW 7
// InGameOff ;
18241: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18245: LD_INT 1
18247: PPUSH
18248: LD_INT 2
18250: PPUSH
18251: LD_INT 2
18253: PPUSH
18254: LD_INT 1
18256: PPUSH
18257: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
18261: LD_EXP 20
18265: PPUSH
18266: LD_INT 8
18268: PPUSH
18269: CALL_OW 113
// readyToEscape := 1 ;
18273: LD_ADDR_EXP 22
18277: PUSH
18278: LD_INT 1
18280: ST_TO_ADDR
// end ; if dec2 = 2 then
18281: LD_VAR 0 7
18285: PUSH
18286: LD_INT 2
18288: EQUAL
18289: IFFALSE 18446
// begin if tmp = JMM then
18291: LD_VAR 0 4
18295: PUSH
18296: LD_EXP 1
18300: EQUAL
18301: IFFALSE 18361
// begin DialogueOn ;
18303: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18307: LD_EXP 1
18311: PPUSH
18312: LD_STRING D2c-JMM-1
18314: PPUSH
18315: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18319: LD_EXP 20
18323: PPUSH
18324: LD_STRING D2c-Kurt-1
18326: PPUSH
18327: CALL_OW 88
// DialogueOff ;
18331: CALL_OW 7
// InGameOff ;
18335: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18339: LD_EXP 20
18343: PPUSH
18344: LD_INT 8
18346: PPUSH
18347: CALL_OW 113
// readyToEscape := 1 ;
18351: LD_ADDR_EXP 22
18355: PUSH
18356: LD_INT 1
18358: ST_TO_ADDR
// end else
18359: GO 18446
// begin DialogueOn ;
18361: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18365: LD_VAR 0 4
18369: PPUSH
18370: CALL_OW 258
18374: PUSH
18375: LD_INT 1
18377: EQUAL
18378: IFFALSE 18394
// Say ( tmp , D2c-Sol1-1 ) else
18380: LD_VAR 0 4
18384: PPUSH
18385: LD_STRING D2c-Sol1-1
18387: PPUSH
18388: CALL_OW 88
18392: GO 18406
// Say ( tmp , D2c-FSol1-1 ) ;
18394: LD_VAR 0 4
18398: PPUSH
18399: LD_STRING D2c-FSol1-1
18401: PPUSH
18402: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18406: LD_EXP 20
18410: PPUSH
18411: LD_STRING D2c-Kurt-1
18413: PPUSH
18414: CALL_OW 88
// DialogueOff ;
18418: CALL_OW 7
// InGameOff ;
18422: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18426: LD_EXP 20
18430: PPUSH
18431: LD_INT 8
18433: PPUSH
18434: CALL_OW 113
// readyToEscape := 1 ;
18438: LD_ADDR_EXP 22
18442: PUSH
18443: LD_INT 1
18445: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18446: LD_VAR 0 6
18450: PUSH
18451: LD_INT 3
18453: EQUAL
18454: IFFALSE 18615
// begin DialogueOn ;
18456: CALL_OW 6
// if tmp = JMM then
18460: LD_VAR 0 4
18464: PUSH
18465: LD_EXP 1
18469: EQUAL
18470: IFFALSE 18530
// begin DialogueOn ;
18472: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18476: LD_EXP 1
18480: PPUSH
18481: LD_STRING D2c-JMM-1
18483: PPUSH
18484: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18488: LD_EXP 20
18492: PPUSH
18493: LD_STRING D2c-Kurt-1
18495: PPUSH
18496: CALL_OW 88
// DialogueOff ;
18500: CALL_OW 7
// InGameOff ;
18504: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18508: LD_EXP 20
18512: PPUSH
18513: LD_INT 8
18515: PPUSH
18516: CALL_OW 113
// readyToEscape := 1 ;
18520: LD_ADDR_EXP 22
18524: PUSH
18525: LD_INT 1
18527: ST_TO_ADDR
// end else
18528: GO 18615
// begin DialogueOn ;
18530: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18534: LD_VAR 0 4
18538: PPUSH
18539: CALL_OW 258
18543: PUSH
18544: LD_INT 1
18546: EQUAL
18547: IFFALSE 18563
// Say ( tmp , D2c-Sol1-1 ) else
18549: LD_VAR 0 4
18553: PPUSH
18554: LD_STRING D2c-Sol1-1
18556: PPUSH
18557: CALL_OW 88
18561: GO 18575
// Say ( tmp , D2c-FSol1-1 ) ;
18563: LD_VAR 0 4
18567: PPUSH
18568: LD_STRING D2c-FSol1-1
18570: PPUSH
18571: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18575: LD_EXP 20
18579: PPUSH
18580: LD_STRING D2c-Kurt-1
18582: PPUSH
18583: CALL_OW 88
// DialogueOff ;
18587: CALL_OW 7
// InGameOff ;
18591: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18595: LD_EXP 20
18599: PPUSH
18600: LD_INT 8
18602: PPUSH
18603: CALL_OW 113
// readyToEscape := 1 ;
18607: LD_ADDR_EXP 22
18611: PUSH
18612: LD_INT 1
18614: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
18615: LD_ADDR_EXP 30
18619: PUSH
18620: LD_INT 0
18622: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18623: LD_INT 35
18625: PPUSH
18626: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18630: LD_EXP 20
18634: PPUSH
18635: LD_INT 8
18637: PPUSH
18638: CALL_OW 308
18642: IFFALSE 18650
18644: PUSH
18645: LD_EXP 22
18649: AND
18650: IFTRUE 18663
18652: PUSH
18653: LD_EXP 20
18657: PPUSH
18658: CALL_OW 301
18662: OR
18663: IFFALSE 18623
// if IsDead ( Kurt ) then
18665: LD_EXP 20
18669: PPUSH
18670: CALL_OW 301
18674: IFFALSE 18678
// exit ;
18676: GO 18733
// RemoveUnit ( Kurt ) ;
18678: LD_EXP 20
18682: PPUSH
18683: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18687: LD_EXP 20
18691: PPUSH
18692: LD_STRING Kurt
18694: PPUSH
18695: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18699: LD_INT 1
18701: PPUSH
18702: LD_INT 2
18704: PPUSH
18705: CALL_OW 81
18709: PUSH
18710: LD_INT 0
18712: EQUAL
18713: IFFALSE 18725
// kurtStatus = 1 else
18715: LD_ADDR_EXP 21
18719: PUSH
18720: LD_INT 1
18722: ST_TO_ADDR
18723: GO 18733
// kurtStatus = 2 ;
18725: LD_ADDR_EXP 21
18729: PUSH
18730: LD_INT 2
18732: ST_TO_ADDR
// end ; end_of_file
18733: LD_VAR 0 1
18737: RET
// every 0 0$2 do
18738: GO 18740
18740: DISABLE
// begin enable ;
18741: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
18742: LD_INT 3
18744: PPUSH
18745: LD_INT 2
18747: PPUSH
18748: LD_INT 10
18750: PPUSH
18751: LD_EXP 32
18755: PPUSH
18756: CALL 8503 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
18760: LD_INT 3
18762: PPUSH
18763: LD_INT 12
18765: PPUSH
18766: LD_EXP 32
18770: PPUSH
18771: CALL 10138 0 3
// if disableHealAI = 0 then
18775: LD_EXP 34
18779: PUSH
18780: LD_INT 0
18782: EQUAL
18783: IFFALSE 18804
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
18785: LD_INT 3
18787: PPUSH
18788: LD_INT 9
18790: PPUSH
18791: LD_INT 10
18793: PPUSH
18794: LD_INT 32
18796: PUSH
18797: EMPTY
18798: LIST
18799: PPUSH
18800: CALL 8884 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18804: LD_INT 3
18806: PPUSH
18807: LD_INT 51
18809: PPUSH
18810: LD_INT 6
18812: PPUSH
18813: CALL 9587 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
18817: LD_INT 2
18819: PPUSH
18820: CALL_OW 303
18824: IFTRUE 18839
18826: PUSH
18827: LD_INT 2
18829: PPUSH
18830: CALL_OW 255
18834: PUSH
18835: LD_INT 1
18837: EQUAL
18838: OR
18839: IFFALSE 18853
// DefendDepot ( 3 , rudepo ) else
18841: LD_INT 3
18843: PPUSH
18844: LD_INT 2
18846: PPUSH
18847: CALL 9414 0 2
18851: GO 18863
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
18853: LD_INT 3
18855: PPUSH
18856: LD_INT 10
18858: PPUSH
18859: CALL 9709 0 2
// end ;
18863: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
18864: LD_INT 22
18866: PUSH
18867: LD_INT 3
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 21
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 55
18886: PUSH
18887: EMPTY
18888: LIST
18889: PUSH
18890: LD_INT 3
18892: PUSH
18893: LD_INT 34
18895: PUSH
18896: LD_INT 51
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: PPUSH
18913: CALL_OW 69
18917: PUSH
18918: LD_INT 0
18920: EQUAL
18921: IFFALSE 18936
18923: PUSH
18924: LD_INT 21
18926: PPUSH
18927: CALL_OW 255
18931: PUSH
18932: LD_INT 3
18934: EQUAL
18935: AND
18936: IFFALSE 18947
18938: PUSH
18939: LD_INT 21
18941: PPUSH
18942: CALL_OW 302
18946: AND
18947: IFFALSE 18962
18949: PUSH
18950: LD_INT 2
18952: PPUSH
18953: CALL_OW 255
18957: PUSH
18958: LD_INT 3
18960: EQUAL
18961: AND
18962: IFFALSE 18973
18964: PUSH
18965: LD_INT 2
18967: PPUSH
18968: CALL_OW 302
18972: AND
18973: IFFALSE 18984
18975: PUSH
18976: LD_INT 21
18978: PPUSH
18979: CALL_OW 313
18983: AND
18984: IFFALSE 19017
18986: PUSH
18987: LD_EXP 48
18991: PUSH
18992: LD_INT 4
18994: PUSH
18995: LD_INT 5
18997: PUSH
18998: LD_INT 6
19000: PUSH
19001: LD_INT 6
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: PUSH
19010: LD_OWVAR 67
19014: ARRAY
19015: LESS
19016: AND
19017: IFFALSE 19238
19019: GO 19021
19021: DISABLE
// begin enable ;
19022: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
19023: LD_INT 2
19025: PPUSH
19026: CALL_OW 274
19030: PPUSH
19031: LD_INT 1
19033: PPUSH
19034: LD_INT 2000
19036: PPUSH
19037: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
19041: LD_INT 3
19043: PPUSH
19044: LD_INT 21
19046: PPUSH
19047: LD_INT 4
19049: PUSH
19050: LD_INT 5
19052: PUSH
19053: LD_INT 6
19055: PUSH
19056: LD_INT 6
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: PUSH
19065: LD_OWVAR 67
19069: ARRAY
19070: PUSH
19071: LD_EXP 48
19075: MINUS
19076: PPUSH
19077: LD_INT 43
19079: PUSH
19080: LD_INT 43
19082: PUSH
19083: LD_INT 44
19085: PUSH
19086: LD_INT 44
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 43
19097: PUSH
19098: LD_INT 43
19100: PUSH
19101: LD_INT 43
19103: PUSH
19104: LD_INT 44
19106: PUSH
19107: LD_INT 44
19109: PUSH
19110: LD_INT 46
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 43
19123: PUSH
19124: LD_INT 43
19126: PUSH
19127: LD_INT 43
19129: PUSH
19130: LD_INT 44
19132: PUSH
19133: LD_INT 44
19135: PUSH
19136: LD_INT 46
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 43
19149: PUSH
19150: LD_INT 43
19152: PUSH
19153: LD_INT 44
19155: PUSH
19156: LD_INT 46
19158: PUSH
19159: LD_INT 46
19161: PUSH
19162: LD_INT 46
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: PUSH
19179: LD_OWVAR 67
19183: ARRAY
19184: PPUSH
19185: LD_INT 1
19187: PPUSH
19188: LD_INT 1
19190: PPUSH
19191: LD_INT 22
19193: PUSH
19194: LD_INT 22
19196: PUSH
19197: LD_INT 24
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 1
19206: PPUSH
19207: LD_INT 2
19209: PPUSH
19210: CALL_OW 12
19214: ARRAY
19215: PUSH
19216: LD_INT 24
19218: PUSH
19219: LD_INT 24
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: PUSH
19228: LD_OWVAR 67
19232: ARRAY
19233: PPUSH
19234: CALL 8349 0 7
// end ;
19238: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
19239: LD_INT 17
19241: PPUSH
19242: CALL_OW 255
19246: PUSH
19247: LD_INT 3
19249: EQUAL
19250: IFFALSE 19261
19252: PUSH
19253: LD_INT 17
19255: PPUSH
19256: CALL_OW 302
19260: AND
19261: IFFALSE 19276
19263: PUSH
19264: LD_INT 2
19266: PPUSH
19267: CALL_OW 255
19271: PUSH
19272: LD_INT 3
19274: EQUAL
19275: AND
19276: IFFALSE 19287
19278: PUSH
19279: LD_INT 2
19281: PPUSH
19282: CALL_OW 302
19286: AND
19287: IFFALSE 19320
19289: PUSH
19290: LD_EXP 48
19294: PUSH
19295: LD_INT 4
19297: PUSH
19298: LD_INT 5
19300: PUSH
19301: LD_INT 6
19303: PUSH
19304: LD_INT 7
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: PUSH
19313: LD_OWVAR 67
19317: ARRAY
19318: LESS
19319: AND
19320: IFFALSE 19368
19322: GO 19324
19324: DISABLE
// begin enable ;
19325: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19326: LD_INT 17
19328: PPUSH
19329: LD_INT 22
19331: PPUSH
19332: LD_INT 1
19334: PPUSH
19335: LD_INT 1
19337: PPUSH
19338: LD_INT 42
19340: PUSH
19341: LD_INT 43
19343: PUSH
19344: LD_INT 44
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 1
19354: PPUSH
19355: LD_INT 3
19357: PPUSH
19358: CALL_OW 12
19362: ARRAY
19363: PPUSH
19364: CALL_OW 185
// end ;
19368: END
// every 2 2$0 do var i , j ;
19369: GO 19371
19371: DISABLE
19372: LD_INT 0
19374: PPUSH
19375: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19376: LD_INT 14700
19378: PUSH
19379: LD_INT 33600
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: PPUSH
19389: LD_INT 2
19391: PPUSH
19392: CALL_OW 12
19396: ARRAY
19397: PPUSH
19398: CALL_OW 67
// disableHealAI = 1 ;
19402: LD_ADDR_EXP 34
19406: PUSH
19407: LD_INT 1
19409: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19410: LD_ADDR_VAR 0 1
19414: PUSH
19415: LD_INT 22
19417: PUSH
19418: LD_INT 3
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 25
19427: PUSH
19428: LD_INT 4
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PPUSH
19439: CALL_OW 69
19443: PUSH
19444: FOR_IN
19445: IFFALSE 19458
// ComExitBuilding ( i ) ;
19447: LD_VAR 0 1
19451: PPUSH
19452: CALL_OW 122
19456: GO 19444
19458: POP
19459: POP
// wait ( 0 0$1 ) ;
19460: LD_INT 35
19462: PPUSH
19463: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19467: LD_INT 35
19469: PPUSH
19470: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19474: LD_ADDR_VAR 0 1
19478: PUSH
19479: LD_INT 22
19481: PUSH
19482: LD_INT 3
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 25
19491: PUSH
19492: LD_INT 4
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PPUSH
19503: CALL_OW 69
19507: PUSH
19508: FOR_IN
19509: IFFALSE 19586
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19511: LD_ADDR_VAR 0 2
19515: PUSH
19516: LD_INT 17
19518: PPUSH
19519: LD_INT 22
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 25
19531: PUSH
19532: LD_INT 12
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PPUSH
19543: CALL_OW 70
19547: PUSH
19548: FOR_IN
19549: IFFALSE 19582
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19551: LD_VAR 0 1
19555: PPUSH
19556: LD_VAR 0 2
19560: PPUSH
19561: CALL_OW 250
19565: PPUSH
19566: LD_VAR 0 2
19570: PPUSH
19571: CALL_OW 251
19575: PPUSH
19576: CALL_OW 191
19580: GO 19548
19582: POP
19583: POP
19584: GO 19508
19586: POP
19587: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19588: LD_INT 22
19590: PUSH
19591: LD_INT 3
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 25
19600: PUSH
19601: LD_INT 4
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PPUSH
19612: CALL_OW 69
19616: PUSH
19617: LD_INT 0
19619: EQUAL
19620: IFTRUE 19653
19622: PUSH
19623: LD_EXP 33
19627: PUSH
19628: LD_INT 6
19630: PUSH
19631: LD_INT 7
19633: PUSH
19634: LD_INT 8
19636: PUSH
19637: LD_INT 8
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: PUSH
19646: LD_OWVAR 67
19650: ARRAY
19651: GREATEREQUAL
19652: OR
19653: IFTRUE 19692
19655: PUSH
19656: LD_INT 17
19658: PPUSH
19659: LD_INT 22
19661: PUSH
19662: LD_INT 0
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 25
19671: PUSH
19672: LD_INT 12
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PPUSH
19683: CALL_OW 70
19687: PUSH
19688: LD_INT 0
19690: EQUAL
19691: OR
19692: IFFALSE 19467
// disableHealAI = 0 ;
19694: LD_ADDR_EXP 34
19698: PUSH
19699: LD_INT 0
19701: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19702: LD_ADDR_VAR 0 1
19706: PUSH
19707: LD_INT 22
19709: PUSH
19710: LD_INT 3
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 25
19719: PUSH
19720: LD_INT 12
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PPUSH
19731: CALL_OW 69
19735: PUSH
19736: FOR_IN
19737: IFFALSE 19753
// SetClass ( i , 16 ) ;
19739: LD_VAR 0 1
19743: PPUSH
19744: LD_INT 16
19746: PPUSH
19747: CALL_OW 336
19751: GO 19736
19753: POP
19754: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19755: LD_ADDR_VAR 0 1
19759: PUSH
19760: LD_INT 22
19762: PUSH
19763: LD_INT 3
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 25
19772: PUSH
19773: LD_INT 4
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PPUSH
19784: CALL_OW 69
19788: PUSH
19789: FOR_IN
19790: IFFALSE 19806
// ComEnterUnit ( i , rulab ) ;
19792: LD_VAR 0 1
19796: PPUSH
19797: LD_INT 32
19799: PPUSH
19800: CALL_OW 120
19804: GO 19789
19806: POP
19807: POP
// end ; end_of_file
19808: PPOPN 2
19810: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19811: LD_EXP 27
19815: PUSH
19816: LD_INT 0
19818: LESSEQUAL
19819: IFFALSE 19973
19821: GO 19823
19823: DISABLE
19824: LD_INT 0
19826: PPUSH
19827: PPUSH
19828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19829: LD_ADDR_VAR 0 2
19833: PUSH
19834: LD_INT 22
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 21
19846: PUSH
19847: LD_INT 3
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 2
19856: PUSH
19857: LD_INT 30
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 30
19869: PUSH
19870: LD_INT 1
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: LIST
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: PPUSH
19887: CALL_OW 69
19891: ST_TO_ADDR
// for i in tmp do
19892: LD_ADDR_VAR 0 1
19896: PUSH
19897: LD_VAR 0 2
19901: PUSH
19902: FOR_IN
19903: IFFALSE 19936
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19905: LD_ADDR_VAR 0 3
19909: PUSH
19910: LD_VAR 0 3
19914: PUSH
19915: LD_VAR 0 1
19919: PPUSH
19920: CALL_OW 274
19924: PPUSH
19925: LD_INT 1
19927: PPUSH
19928: CALL_OW 275
19932: PLUS
19933: ST_TO_ADDR
19934: GO 19902
19936: POP
19937: POP
// if yourCrates >= needCrates then
19938: LD_VAR 0 3
19942: PUSH
19943: LD_EXP 26
19947: GREATEREQUAL
19948: IFFALSE 19966
// FinishMission ( yourCrates , needCrates ) else
19950: LD_VAR 0 3
19954: PPUSH
19955: LD_EXP 26
19959: PPUSH
19960: CALL 19976 0 2
19964: GO 19973
// YouLost ( matmin ) ;
19966: LD_STRING matmin
19968: PPUSH
19969: CALL_OW 104
// end ;
19973: PPOPN 3
19975: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
19976: LD_INT 0
19978: PPUSH
19979: PPUSH
19980: PPUSH
19981: PPUSH
// if killCounter >= 8 or killCounter >= UnitFilter ( arrivals , [ f_ok ] ) or FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , nation_american ] , [ f_ok ] ] ) < 5 then
19982: LD_EXP 46
19986: PUSH
19987: LD_INT 8
19989: GREATEREQUAL
19990: IFTRUE 20015
19992: PUSH
19993: LD_EXP 46
19997: PUSH
19998: LD_EXP 45
20002: PPUSH
20003: LD_INT 50
20005: PUSH
20006: EMPTY
20007: LIST
20008: PPUSH
20009: CALL_OW 72
20013: GREATEREQUAL
20014: OR
20015: IFTRUE 20069
20017: PUSH
20018: LD_INT 22
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 21
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 23
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 50
20050: PUSH
20051: EMPTY
20052: LIST
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: PPUSH
20060: CALL_OW 69
20064: PUSH
20065: LD_INT 5
20067: LESS
20068: OR
20069: IFFALSE 20080
// begin YouLost ( Troops ) ;
20071: LD_STRING Troops
20073: PPUSH
20074: CALL_OW 104
// exit ;
20078: GO 21053
// end ; if killCounter = 0 then
20080: LD_EXP 46
20084: PUSH
20085: LD_INT 0
20087: EQUAL
20088: IFFALSE 20097
// SetAchievement ( ACH_SURV ) ;
20090: LD_STRING ACH_SURV
20092: PPUSH
20093: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
20097: LD_INT 22
20099: PUSH
20100: LD_INT 3
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 21
20109: PUSH
20110: LD_INT 3
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PPUSH
20121: CALL_OW 69
20125: PUSH
20126: LD_INT 0
20128: EQUAL
20129: IFFALSE 20145
// begin wait ( 3 ) ;
20131: LD_INT 3
20133: PPUSH
20134: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
20138: LD_STRING ACH_BASEDESTROYER
20140: PPUSH
20141: CALL_OW 543
// end ; m1 := false ;
20145: LD_ADDR_VAR 0 4
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
// m2 := false ;
20153: LD_ADDR_VAR 0 5
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// m3 := false ;
20161: LD_ADDR_VAR 0 6
20165: PUSH
20166: LD_INT 0
20168: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
20169: LD_VAR 0 1
20173: PUSH
20174: LD_INT 100
20176: PUSH
20177: LD_INT 140
20179: PUSH
20180: LD_INT 180
20182: PUSH
20183: LD_INT 220
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: PUSH
20192: LD_OWVAR 67
20196: ARRAY
20197: PLUS
20198: PUSH
20199: LD_VAR 0 2
20203: GREATER
20204: IFFALSE 20236
// begin AddMedal ( cans , 1 ) ;
20206: LD_STRING cans
20208: PPUSH
20209: LD_INT 1
20211: PPUSH
20212: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20216: LD_INT 1
20218: PPUSH
20219: LD_STRING 06_crates_1
20221: PPUSH
20222: CALL_OW 39
// m1 := true ;
20226: LD_ADDR_VAR 0 4
20230: PUSH
20231: LD_INT 1
20233: ST_TO_ADDR
// end else
20234: GO 20257
// begin AddMedal ( cans , - 1 ) ;
20236: LD_STRING cans
20238: PPUSH
20239: LD_INT 1
20241: NEG
20242: PPUSH
20243: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20247: LD_INT 0
20249: PPUSH
20250: LD_STRING 06_crates_1
20252: PPUSH
20253: CALL_OW 39
// end ; if unitLost < 3 then
20257: LD_EXP 31
20261: PUSH
20262: LD_INT 3
20264: LESS
20265: IFFALSE 20287
// begin AddMedal ( people , 1 ) ;
20267: LD_STRING people
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL_OW 101
// m2 := true ;
20277: LD_ADDR_VAR 0 5
20281: PUSH
20282: LD_INT 1
20284: ST_TO_ADDR
// end else
20285: GO 20298
// AddMedal ( people , - 1 ) ;
20287: LD_STRING people
20289: PPUSH
20290: LD_INT 1
20292: NEG
20293: PPUSH
20294: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20298: LD_EXP 29
20302: PPUSH
20303: LD_STRING 06_remoteVehs_1
20305: PPUSH
20306: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20310: LD_EXP 29
20314: PUSH
20315: LD_INT 1
20317: EQUAL
20318: IFFALSE 20340
// begin AddMedal ( remote , 1 ) ;
20320: LD_STRING remote
20322: PPUSH
20323: LD_INT 1
20325: PPUSH
20326: CALL_OW 101
// m3 := true ;
20330: LD_ADDR_VAR 0 6
20334: PUSH
20335: LD_INT 1
20337: ST_TO_ADDR
// end else
20338: GO 20380
// begin if GetTech ( 18 , 1 ) = state_enabled then
20340: LD_INT 18
20342: PPUSH
20343: LD_INT 1
20345: PPUSH
20346: CALL_OW 321
20350: PUSH
20351: LD_INT 1
20353: EQUAL
20354: IFFALSE 20369
// AddMedal ( remote , - 1 ) else
20356: LD_STRING remote
20358: PPUSH
20359: LD_INT 1
20361: NEG
20362: PPUSH
20363: CALL_OW 101
20367: GO 20380
// AddMedal ( remote , - 2 ) ;
20369: LD_STRING remote
20371: PPUSH
20372: LD_INT 2
20374: NEG
20375: PPUSH
20376: CALL_OW 101
// end ; if m1 and m2 and m3 then
20380: LD_VAR 0 4
20384: IFFALSE 20392
20386: PUSH
20387: LD_VAR 0 5
20391: AND
20392: IFFALSE 20400
20394: PUSH
20395: LD_VAR 0 6
20399: AND
20400: IFFALSE 20416
// begin wait ( 3 ) ;
20402: LD_INT 3
20404: PPUSH
20405: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
20409: LD_STRING ACH_ASPEED_6
20411: PPUSH
20412: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
20416: LD_OWVAR 67
20420: PUSH
20421: LD_INT 3
20423: GREATEREQUAL
20424: IFFALSE 20432
20426: PUSH
20427: LD_VAR 0 4
20431: AND
20432: IFFALSE 20440
20434: PUSH
20435: LD_VAR 0 5
20439: AND
20440: IFFALSE 20448
20442: PUSH
20443: LD_VAR 0 6
20447: AND
20448: IFFALSE 20460
// SetAchievementEX ( ACH_AMER , 6 ) ;
20450: LD_STRING ACH_AMER
20452: PPUSH
20453: LD_INT 6
20455: PPUSH
20456: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
20460: LD_EXP 21
20464: PPUSH
20465: LD_STRING 06_KurtStatus_1
20467: PPUSH
20468: CALL_OW 39
// GiveMedals ( Main ) ;
20472: LD_STRING Main
20474: PPUSH
20475: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20479: LD_INT 22
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 21
20491: PUSH
20492: LD_INT 1
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 50
20501: PUSH
20502: EMPTY
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: LD_INT 25
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 25
20520: PUSH
20521: LD_INT 2
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 25
20530: PUSH
20531: LD_INT 3
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 25
20540: PUSH
20541: LD_INT 4
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: PPUSH
20561: CALL_OW 69
20565: PPUSH
20566: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20570: LD_EXP 1
20574: PPUSH
20575: LD_EXP 43
20579: PUSH
20580: LD_STRING JMM
20582: STR
20583: PPUSH
20584: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20588: LD_EXP 2
20592: PPUSH
20593: LD_EXP 43
20597: PUSH
20598: LD_STRING Lisa
20600: STR
20601: PPUSH
20602: CALL 7662 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20606: LD_EXP 3
20610: PPUSH
20611: LD_EXP 43
20615: PUSH
20616: LD_STRING Bobby
20618: STR
20619: PPUSH
20620: CALL 7662 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20624: LD_EXP 4
20628: PPUSH
20629: LD_EXP 43
20633: PUSH
20634: LD_STRING Cyrus
20636: STR
20637: PPUSH
20638: CALL 7662 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20642: LD_EXP 5
20646: PPUSH
20647: LD_EXP 43
20651: PUSH
20652: LD_STRING Frank
20654: STR
20655: PPUSH
20656: CALL 7662 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20660: LD_EXP 6
20664: PPUSH
20665: LD_EXP 43
20669: PUSH
20670: LD_STRING Brown
20672: STR
20673: PPUSH
20674: CALL 7662 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20678: LD_EXP 7
20682: PPUSH
20683: LD_EXP 43
20687: PUSH
20688: LD_STRING Donaldson
20690: STR
20691: PPUSH
20692: CALL 7662 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20696: LD_EXP 8
20700: PPUSH
20701: LD_EXP 43
20705: PUSH
20706: LD_STRING Gladstone
20708: STR
20709: PPUSH
20710: CALL 7662 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20714: LD_EXP 9
20718: PPUSH
20719: LD_EXP 43
20723: PUSH
20724: LD_STRING Denis
20726: STR
20727: PPUSH
20728: CALL 7662 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20732: LD_EXP 16
20736: PPUSH
20737: LD_EXP 43
20741: PUSH
20742: LD_STRING Joan
20744: STR
20745: PPUSH
20746: CALL 7662 0 2
// if IsLive ( Mike ) then
20750: LD_EXP 11
20754: PPUSH
20755: CALL_OW 300
20759: IFFALSE 20779
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
20761: LD_EXP 11
20765: PPUSH
20766: LD_EXP 43
20770: PUSH
20771: LD_STRING Mike
20773: STR
20774: PPUSH
20775: CALL_OW 38
// if IsLive ( Joan ) then
20779: LD_EXP 16
20783: PPUSH
20784: CALL_OW 300
20788: IFFALSE 20802
// SaveCharacters ( Joan , Joan ) ;
20790: LD_EXP 16
20794: PPUSH
20795: LD_STRING Joan
20797: PPUSH
20798: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
20802: LD_EXP 17
20806: PPUSH
20807: LD_STRING 06_JoanStatus_1
20809: PPUSH
20810: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20814: LD_INT 50
20816: PUSH
20817: EMPTY
20818: LIST
20819: PUSH
20820: LD_INT 22
20822: PUSH
20823: LD_INT 1
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 21
20832: PUSH
20833: LD_INT 1
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: LD_INT 25
20845: PUSH
20846: LD_INT 1
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 25
20855: PUSH
20856: LD_INT 2
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 25
20865: PUSH
20866: LD_INT 3
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 25
20875: PUSH
20876: LD_INT 4
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: PPUSH
20896: CALL_OW 69
20900: PUSH
20901: LD_EXP 1
20905: PUSH
20906: LD_EXP 2
20910: PUSH
20911: LD_EXP 3
20915: PUSH
20916: LD_EXP 4
20920: PUSH
20921: LD_EXP 5
20925: PUSH
20926: LD_EXP 6
20930: PUSH
20931: LD_EXP 7
20935: PUSH
20936: LD_EXP 8
20940: PUSH
20941: LD_EXP 9
20945: PUSH
20946: LD_EXP 16
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: DIFF
20963: PPUSH
20964: LD_STRING 06_other_survivors
20966: PPUSH
20967: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) diff Mike , 06_other_apemans ) ;
20971: LD_INT 50
20973: PUSH
20974: EMPTY
20975: LIST
20976: PUSH
20977: LD_INT 22
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 21
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 2
20999: PUSH
21000: LD_INT 25
21002: PUSH
21003: LD_INT 12
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 25
21012: PUSH
21013: LD_INT 16
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: LIST
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: PPUSH
21031: CALL_OW 69
21035: PUSH
21036: LD_EXP 11
21040: DIFF
21041: PPUSH
21042: LD_STRING 06_other_apemans
21044: PPUSH
21045: CALL_OW 38
// YouWin ;
21049: CALL_OW 103
// end ; end_of_file
21053: LD_VAR 0 3
21057: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
21058: LD_EXP 48
21062: IFFALSE 21095
21064: PUSH
21065: LD_OWVAR 1
21069: PUSH
21070: LD_INT 23100
21072: PUSH
21073: LD_INT 21000
21075: PUSH
21076: LD_INT 18900
21078: PUSH
21079: LD_INT 16800
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: PUSH
21088: LD_OWVAR 67
21092: ARRAY
21093: GREATER
21094: AND
21095: IFFALSE 21444
21097: GO 21099
21099: DISABLE
21100: LD_INT 0
21102: PPUSH
21103: PPUSH
21104: PPUSH
21105: PPUSH
// begin enable ;
21106: ENABLE
// for i in ruAttackers do
21107: LD_ADDR_VAR 0 1
21111: PUSH
21112: LD_EXP 48
21116: PUSH
21117: FOR_IN
21118: IFFALSE 21442
// begin if not IsDrivenBy ( i ) then
21120: LD_VAR 0 1
21124: PPUSH
21125: CALL_OW 311
21129: NOT
21130: IFFALSE 21134
// continue ;
21132: GO 21117
// if i mod 2 = 0 then
21134: LD_VAR 0 1
21138: PUSH
21139: LD_INT 2
21141: MOD
21142: PUSH
21143: LD_INT 0
21145: EQUAL
21146: IFFALSE 21201
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] ] else
21148: LD_ADDR_VAR 0 3
21152: PUSH
21153: LD_INT 91
21155: PUSH
21156: LD_INT 52
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 82
21165: PUSH
21166: LD_INT 34
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 90
21175: PUSH
21176: LD_INT 26
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 86
21185: PUSH
21186: LD_INT 16
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: ST_TO_ADDR
21199: GO 21296
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 44 , 42 ] , [ 33 , 34 ] , [ 29 , 23 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
21201: LD_ADDR_VAR 0 3
21205: PUSH
21206: LD_INT 91
21208: PUSH
21209: LD_INT 52
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 68
21218: PUSH
21219: LD_INT 46
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 48
21228: PUSH
21229: LD_INT 43
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 44
21238: PUSH
21239: LD_INT 42
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 33
21248: PUSH
21249: LD_INT 34
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 29
21258: PUSH
21259: LD_INT 23
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 30
21268: PUSH
21269: LD_INT 19
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 38
21278: PUSH
21279: LD_INT 16
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL_OW 256
21305: PUSH
21306: LD_INT 1000
21308: EQUAL
21309: IFFALSE 21327
// AgressiveMove ( i , path ) else
21311: LD_VAR 0 1
21315: PPUSH
21316: LD_VAR 0 3
21320: PPUSH
21321: CALL 85621 0 2
21325: GO 21440
// if GetLives ( i ) < 650 then
21327: LD_VAR 0 1
21331: PPUSH
21332: CALL_OW 256
21336: PUSH
21337: LD_INT 650
21339: LESS
21340: IFFALSE 21440
// begin if not IsInArea ( i , russianRepairArea ) then
21342: LD_VAR 0 1
21346: PPUSH
21347: LD_INT 12
21349: PPUSH
21350: CALL_OW 308
21354: NOT
21355: IFFALSE 21426
// begin SetTag ( i , 0 ) ;
21357: LD_VAR 0 1
21361: PPUSH
21362: LD_INT 0
21364: PPUSH
21365: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
21369: LD_VAR 0 1
21373: PPUSH
21374: CALL_OW 261
21378: PUSH
21379: LD_INT 50
21381: LESS
21382: IFFALSE 21393
21384: PUSH
21385: LD_INT 21
21387: PPUSH
21388: CALL_OW 302
21392: AND
21393: IFFALSE 21409
// ComMoveUnit ( i , rufab ) else
21395: LD_VAR 0 1
21399: PPUSH
21400: LD_INT 21
21402: PPUSH
21403: CALL_OW 112
21407: GO 21424
// ComMoveXY ( i , 121 , 99 ) ;
21409: LD_VAR 0 1
21413: PPUSH
21414: LD_INT 121
21416: PPUSH
21417: LD_INT 99
21419: PPUSH
21420: CALL_OW 111
// end else
21424: GO 21440
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
21426: LD_VAR 0 1
21430: PPUSH
21431: CALL_OW 311
21435: PPUSH
21436: CALL 84569 0 1
// end ; end ;
21440: GO 21117
21442: POP
21443: POP
// end ;
21444: PPOPN 4
21446: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
21447: LD_INT 0
21449: PPUSH
21450: PPUSH
21451: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
21452: LD_ADDR_VAR 0 2
21456: PUSH
21457: DOUBLE
21458: LD_INT 1
21460: DEC
21461: ST_TO_ADDR
21462: LD_INT 4
21464: PUSH
21465: LD_INT 5
21467: PUSH
21468: LD_INT 6
21470: PUSH
21471: LD_INT 6
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: PUSH
21480: LD_OWVAR 67
21484: ARRAY
21485: PUSH
21486: FOR_TO
21487: IFFALSE 21662
// begin uc_side := 3 ;
21489: LD_ADDR_OWVAR 20
21493: PUSH
21494: LD_INT 3
21496: ST_TO_ADDR
// uc_nation := 3 ;
21497: LD_ADDR_OWVAR 21
21501: PUSH
21502: LD_INT 3
21504: ST_TO_ADDR
// InitHC_All ( ) ;
21505: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
21509: LD_INT 0
21511: PPUSH
21512: LD_INT 4
21514: PUSH
21515: LD_INT 5
21517: PUSH
21518: LD_INT 6
21520: PUSH
21521: LD_INT 6
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: PUSH
21530: LD_OWVAR 67
21534: ARRAY
21535: PPUSH
21536: CALL_OW 381
// un := CreateHuman ;
21540: LD_ADDR_VAR 0 3
21544: PUSH
21545: CALL_OW 44
21549: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
21550: LD_VAR 0 3
21554: PPUSH
21555: LD_INT 127
21557: PPUSH
21558: LD_INT 62
21560: PPUSH
21561: LD_INT 3
21563: PPUSH
21564: LD_INT 0
21566: PPUSH
21567: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
21571: LD_ADDR_EXP 49
21575: PUSH
21576: LD_EXP 49
21580: PPUSH
21581: LD_EXP 49
21585: PUSH
21586: LD_INT 1
21588: PLUS
21589: PPUSH
21590: LD_VAR 0 3
21594: PPUSH
21595: CALL_OW 1
21599: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
21600: LD_VAR 0 3
21604: PPUSH
21605: LD_INT 83
21607: PPUSH
21608: LD_INT 49
21610: PPUSH
21611: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
21615: LD_VAR 0 3
21619: PPUSH
21620: LD_INT 49
21622: PPUSH
21623: LD_INT 43
21625: PPUSH
21626: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
21630: LD_VAR 0 3
21634: PPUSH
21635: LD_INT 31
21637: PPUSH
21638: LD_INT 15
21640: PPUSH
21641: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
21645: LD_VAR 0 3
21649: PPUSH
21650: LD_INT 63
21652: PPUSH
21653: LD_INT 9
21655: PPUSH
21656: CALL_OW 174
// end ;
21660: GO 21486
21662: POP
21663: POP
// end ; end_of_file
21664: LD_VAR 0 1
21668: RET
// export function CreateNature ; var i , un ; begin
21669: LD_INT 0
21671: PPUSH
21672: PPUSH
21673: PPUSH
// for i := 1 to Difficulty + 2 do
21674: LD_ADDR_VAR 0 2
21678: PUSH
21679: DOUBLE
21680: LD_INT 1
21682: DEC
21683: ST_TO_ADDR
21684: LD_OWVAR 67
21688: PUSH
21689: LD_INT 2
21691: PLUS
21692: PUSH
21693: FOR_TO
21694: IFFALSE 21803
// begin hc_sex := sex_male ;
21696: LD_ADDR_OWVAR 27
21700: PUSH
21701: LD_INT 1
21703: ST_TO_ADDR
// uc_side := 0 ;
21704: LD_ADDR_OWVAR 20
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// uc_nation := nation_nature ;
21712: LD_ADDR_OWVAR 21
21716: PUSH
21717: LD_INT 0
21719: ST_TO_ADDR
// hc_class := class_tiger ;
21720: LD_ADDR_OWVAR 28
21724: PUSH
21725: LD_INT 14
21727: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21728: LD_ADDR_OWVAR 31
21732: PUSH
21733: LD_EXP 36
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: LD_INT 0
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
21753: LD_ADDR_OWVAR 35
21757: PUSH
21758: LD_INT 5
21760: NEG
21761: PPUSH
21762: LD_INT 5
21764: PPUSH
21765: CALL_OW 12
21769: PUSH
21770: LD_OWVAR 67
21774: MUL
21775: ST_TO_ADDR
// un := CreateHuman ;
21776: LD_ADDR_VAR 0 3
21780: PUSH
21781: CALL_OW 44
21785: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21786: LD_VAR 0 3
21790: PPUSH
21791: LD_INT 18
21793: PPUSH
21794: LD_INT 0
21796: PPUSH
21797: CALL_OW 49
// end ;
21801: GO 21693
21803: POP
21804: POP
// for i = 1 to rand ( 3 , 4 ) do
21805: LD_ADDR_VAR 0 2
21809: PUSH
21810: DOUBLE
21811: LD_INT 1
21813: DEC
21814: ST_TO_ADDR
21815: LD_INT 3
21817: PPUSH
21818: LD_INT 4
21820: PPUSH
21821: CALL_OW 12
21825: PUSH
21826: FOR_TO
21827: IFFALSE 21897
// begin hc_class := class_phororhacos ;
21829: LD_ADDR_OWVAR 28
21833: PUSH
21834: LD_INT 18
21836: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21837: LD_ADDR_OWVAR 31
21841: PUSH
21842: LD_EXP 36
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: LD_INT 0
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: ST_TO_ADDR
// hc_agressivity := 0 ;
21862: LD_ADDR_OWVAR 35
21866: PUSH
21867: LD_INT 0
21869: ST_TO_ADDR
// un = CreateHuman ;
21870: LD_ADDR_VAR 0 3
21874: PUSH
21875: CALL_OW 44
21879: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21880: LD_VAR 0 3
21884: PPUSH
21885: LD_INT 18
21887: PPUSH
21888: LD_INT 0
21890: PPUSH
21891: CALL_OW 49
// end ;
21895: GO 21826
21897: POP
21898: POP
// for i := 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
21899: LD_ADDR_VAR 0 2
21903: PUSH
21904: DOUBLE
21905: LD_INT 1
21907: DEC
21908: ST_TO_ADDR
21909: LD_INT 3
21911: PUSH
21912: LD_INT 3
21914: PUSH
21915: LD_INT 4
21917: PUSH
21918: LD_INT 5
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: PUSH
21927: LD_OWVAR 67
21931: ARRAY
21932: PUSH
21933: FOR_TO
21934: IFFALSE 22075
// begin hc_class := class_apeman ;
21936: LD_ADDR_OWVAR 28
21940: PUSH
21941: LD_INT 12
21943: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
21944: LD_ADDR_OWVAR 31
21948: PUSH
21949: LD_INT 2
21951: PPUSH
21952: LD_INT 5
21954: PPUSH
21955: CALL_OW 12
21959: PUSH
21960: LD_INT 0
21962: PPUSH
21963: LD_INT 2
21965: PPUSH
21966: CALL_OW 12
21970: PUSH
21971: LD_INT 0
21973: PUSH
21974: LD_INT 0
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: ST_TO_ADDR
// hc_agressivity := [ rand ( - 5 , 10 ) , rand ( - 10 , 20 ) , rand ( - 20 , 25 ) , rand ( - 30 , 30 ) ] [ Difficulty ] ;
21983: LD_ADDR_OWVAR 35
21987: PUSH
21988: LD_INT 5
21990: NEG
21991: PPUSH
21992: LD_INT 10
21994: PPUSH
21995: CALL_OW 12
21999: PUSH
22000: LD_INT 10
22002: NEG
22003: PPUSH
22004: LD_INT 20
22006: PPUSH
22007: CALL_OW 12
22011: PUSH
22012: LD_INT 20
22014: NEG
22015: PPUSH
22016: LD_INT 25
22018: PPUSH
22019: CALL_OW 12
22023: PUSH
22024: LD_INT 30
22026: NEG
22027: PPUSH
22028: LD_INT 30
22030: PPUSH
22031: CALL_OW 12
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: PUSH
22042: LD_OWVAR 67
22046: ARRAY
22047: ST_TO_ADDR
// un := CreateHuman ;
22048: LD_ADDR_VAR 0 3
22052: PUSH
22053: CALL_OW 44
22057: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
22058: LD_VAR 0 3
22062: PPUSH
22063: LD_INT 19
22065: PPUSH
22066: LD_INT 0
22068: PPUSH
22069: CALL_OW 49
// end ;
22073: GO 21933
22075: POP
22076: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
22077: LD_ADDR_VAR 0 2
22081: PUSH
22082: DOUBLE
22083: LD_INT 1
22085: DEC
22086: ST_TO_ADDR
22087: LD_INT 3
22089: PUSH
22090: LD_INT 4
22092: PUSH
22093: LD_INT 5
22095: PUSH
22096: LD_INT 6
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: PUSH
22105: LD_OWVAR 67
22109: ARRAY
22110: PUSH
22111: FOR_TO
22112: IFFALSE 22205
// begin hc_class := class_apeman ;
22114: LD_ADDR_OWVAR 28
22118: PUSH
22119: LD_INT 12
22121: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
22122: LD_ADDR_OWVAR 31
22126: PUSH
22127: LD_INT 2
22129: PPUSH
22130: LD_INT 5
22132: PPUSH
22133: CALL_OW 12
22137: PUSH
22138: LD_INT 0
22140: PPUSH
22141: LD_INT 2
22143: PPUSH
22144: CALL_OW 12
22148: PUSH
22149: LD_INT 0
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: ST_TO_ADDR
// hc_agressivity := rand ( - 15 , 15 ) ;
22161: LD_ADDR_OWVAR 35
22165: PUSH
22166: LD_INT 15
22168: NEG
22169: PPUSH
22170: LD_INT 15
22172: PPUSH
22173: CALL_OW 12
22177: ST_TO_ADDR
// un = CreateHuman ;
22178: LD_ADDR_VAR 0 3
22182: PUSH
22183: CALL_OW 44
22187: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
22188: LD_VAR 0 3
22192: PPUSH
22193: LD_INT 20
22195: PPUSH
22196: LD_INT 0
22198: PPUSH
22199: CALL_OW 49
// end ;
22203: GO 22111
22205: POP
22206: POP
// end ; end_of_file end_of_file
22207: LD_VAR 0 1
22211: RET
// export globalGameSaveCounter ; every 0 0$1 do
22212: GO 22214
22214: DISABLE
// begin enable ;
22215: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
22216: LD_STRING updateTimer(
22218: PUSH
22219: LD_OWVAR 1
22223: STR
22224: PUSH
22225: LD_STRING );
22227: STR
22228: PPUSH
22229: CALL_OW 559
// end ;
22233: END
// every 0 0$1 do
22234: GO 22236
22236: DISABLE
// begin globalGameSaveCounter := 0 ;
22237: LD_ADDR_EXP 50
22241: PUSH
22242: LD_INT 0
22244: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
22245: LD_STRING setGameSaveCounter(0)
22247: PPUSH
22248: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
22252: LD_STRING initStreamRollete();
22254: PPUSH
22255: CALL_OW 559
// InitStreamMode ;
22259: CALL 23604 0 0
// DefineStreamItems ( false ) ;
22263: LD_INT 0
22265: PPUSH
22266: CALL 24068 0 1
// end ;
22270: END
// export function SOS_MapStart ( ) ; begin
22271: LD_INT 0
22273: PPUSH
// if streamModeActive then
22274: LD_EXP 51
22278: IFFALSE 22287
// DefineStreamItems ( true ) ;
22280: LD_INT 1
22282: PPUSH
22283: CALL 24068 0 1
// UpdateLuaVariables ( ) ;
22287: CALL 22304 0 0
// UpdateFactoryWaypoints ( ) ;
22291: CALL 37190 0 0
// UpdateWarehouseGatheringPoints ( ) ;
22295: CALL 37442 0 0
// end ;
22299: LD_VAR 0 1
22303: RET
// function UpdateLuaVariables ( ) ; begin
22304: LD_INT 0
22306: PPUSH
// if globalGameSaveCounter then
22307: LD_EXP 50
22311: IFFALSE 22345
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
22313: LD_ADDR_EXP 50
22317: PUSH
22318: LD_EXP 50
22322: PPUSH
22323: CALL 84228 0 1
22327: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22328: LD_STRING setGameSaveCounter(
22330: PUSH
22331: LD_EXP 50
22335: STR
22336: PUSH
22337: LD_STRING )
22339: STR
22340: PPUSH
22341: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
22345: LD_STRING setGameDifficulty(
22347: PUSH
22348: LD_OWVAR 67
22352: STR
22353: PUSH
22354: LD_STRING )
22356: STR
22357: PPUSH
22358: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
22362: LD_STRING displayDifficulty(
22364: PUSH
22365: LD_OWVAR 67
22369: STR
22370: PUSH
22371: LD_STRING )
22373: STR
22374: PPUSH
22375: CALL_OW 559
// end ;
22379: LD_VAR 0 1
22383: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22384: LD_INT 0
22386: PPUSH
// if p2 = stream_mode then
22387: LD_VAR 0 2
22391: PUSH
22392: LD_INT 100
22394: EQUAL
22395: IFFALSE 23398
// begin if not StreamModeActive then
22397: LD_EXP 51
22401: NOT
22402: IFFALSE 22412
// StreamModeActive := true ;
22404: LD_ADDR_EXP 51
22408: PUSH
22409: LD_INT 1
22411: ST_TO_ADDR
// if p3 = 0 then
22412: LD_VAR 0 3
22416: PUSH
22417: LD_INT 0
22419: EQUAL
22420: IFFALSE 22426
// InitStreamMode ;
22422: CALL 23604 0 0
// if p3 = 1 then
22426: LD_VAR 0 3
22430: PUSH
22431: LD_INT 1
22433: EQUAL
22434: IFFALSE 22444
// sRocket := true ;
22436: LD_ADDR_EXP 56
22440: PUSH
22441: LD_INT 1
22443: ST_TO_ADDR
// if p3 = 2 then
22444: LD_VAR 0 3
22448: PUSH
22449: LD_INT 2
22451: EQUAL
22452: IFFALSE 22462
// sSpeed := true ;
22454: LD_ADDR_EXP 55
22458: PUSH
22459: LD_INT 1
22461: ST_TO_ADDR
// if p3 = 3 then
22462: LD_VAR 0 3
22466: PUSH
22467: LD_INT 3
22469: EQUAL
22470: IFFALSE 22480
// sEngine := true ;
22472: LD_ADDR_EXP 57
22476: PUSH
22477: LD_INT 1
22479: ST_TO_ADDR
// if p3 = 4 then
22480: LD_VAR 0 3
22484: PUSH
22485: LD_INT 4
22487: EQUAL
22488: IFFALSE 22498
// sSpec := true ;
22490: LD_ADDR_EXP 54
22494: PUSH
22495: LD_INT 1
22497: ST_TO_ADDR
// if p3 = 5 then
22498: LD_VAR 0 3
22502: PUSH
22503: LD_INT 5
22505: EQUAL
22506: IFFALSE 22516
// sLevel := true ;
22508: LD_ADDR_EXP 58
22512: PUSH
22513: LD_INT 1
22515: ST_TO_ADDR
// if p3 = 6 then
22516: LD_VAR 0 3
22520: PUSH
22521: LD_INT 6
22523: EQUAL
22524: IFFALSE 22534
// sArmoury := true ;
22526: LD_ADDR_EXP 59
22530: PUSH
22531: LD_INT 1
22533: ST_TO_ADDR
// if p3 = 7 then
22534: LD_VAR 0 3
22538: PUSH
22539: LD_INT 7
22541: EQUAL
22542: IFFALSE 22552
// sRadar := true ;
22544: LD_ADDR_EXP 60
22548: PUSH
22549: LD_INT 1
22551: ST_TO_ADDR
// if p3 = 8 then
22552: LD_VAR 0 3
22556: PUSH
22557: LD_INT 8
22559: EQUAL
22560: IFFALSE 22570
// sBunker := true ;
22562: LD_ADDR_EXP 61
22566: PUSH
22567: LD_INT 1
22569: ST_TO_ADDR
// if p3 = 9 then
22570: LD_VAR 0 3
22574: PUSH
22575: LD_INT 9
22577: EQUAL
22578: IFFALSE 22588
// sHack := true ;
22580: LD_ADDR_EXP 62
22584: PUSH
22585: LD_INT 1
22587: ST_TO_ADDR
// if p3 = 10 then
22588: LD_VAR 0 3
22592: PUSH
22593: LD_INT 10
22595: EQUAL
22596: IFFALSE 22606
// sFire := true ;
22598: LD_ADDR_EXP 63
22602: PUSH
22603: LD_INT 1
22605: ST_TO_ADDR
// if p3 = 11 then
22606: LD_VAR 0 3
22610: PUSH
22611: LD_INT 11
22613: EQUAL
22614: IFFALSE 22624
// sRefresh := true ;
22616: LD_ADDR_EXP 64
22620: PUSH
22621: LD_INT 1
22623: ST_TO_ADDR
// if p3 = 12 then
22624: LD_VAR 0 3
22628: PUSH
22629: LD_INT 12
22631: EQUAL
22632: IFFALSE 22642
// sExp := true ;
22634: LD_ADDR_EXP 65
22638: PUSH
22639: LD_INT 1
22641: ST_TO_ADDR
// if p3 = 13 then
22642: LD_VAR 0 3
22646: PUSH
22647: LD_INT 13
22649: EQUAL
22650: IFFALSE 22660
// sDepot := true ;
22652: LD_ADDR_EXP 66
22656: PUSH
22657: LD_INT 1
22659: ST_TO_ADDR
// if p3 = 14 then
22660: LD_VAR 0 3
22664: PUSH
22665: LD_INT 14
22667: EQUAL
22668: IFFALSE 22678
// sFlag := true ;
22670: LD_ADDR_EXP 67
22674: PUSH
22675: LD_INT 1
22677: ST_TO_ADDR
// if p3 = 15 then
22678: LD_VAR 0 3
22682: PUSH
22683: LD_INT 15
22685: EQUAL
22686: IFFALSE 22696
// sKamikadze := true ;
22688: LD_ADDR_EXP 75
22692: PUSH
22693: LD_INT 1
22695: ST_TO_ADDR
// if p3 = 16 then
22696: LD_VAR 0 3
22700: PUSH
22701: LD_INT 16
22703: EQUAL
22704: IFFALSE 22714
// sTroll := true ;
22706: LD_ADDR_EXP 76
22710: PUSH
22711: LD_INT 1
22713: ST_TO_ADDR
// if p3 = 17 then
22714: LD_VAR 0 3
22718: PUSH
22719: LD_INT 17
22721: EQUAL
22722: IFFALSE 22732
// sSlow := true ;
22724: LD_ADDR_EXP 77
22728: PUSH
22729: LD_INT 1
22731: ST_TO_ADDR
// if p3 = 18 then
22732: LD_VAR 0 3
22736: PUSH
22737: LD_INT 18
22739: EQUAL
22740: IFFALSE 22750
// sLack := true ;
22742: LD_ADDR_EXP 78
22746: PUSH
22747: LD_INT 1
22749: ST_TO_ADDR
// if p3 = 19 then
22750: LD_VAR 0 3
22754: PUSH
22755: LD_INT 19
22757: EQUAL
22758: IFFALSE 22768
// sTank := true ;
22760: LD_ADDR_EXP 80
22764: PUSH
22765: LD_INT 1
22767: ST_TO_ADDR
// if p3 = 20 then
22768: LD_VAR 0 3
22772: PUSH
22773: LD_INT 20
22775: EQUAL
22776: IFFALSE 22786
// sRemote := true ;
22778: LD_ADDR_EXP 81
22782: PUSH
22783: LD_INT 1
22785: ST_TO_ADDR
// if p3 = 21 then
22786: LD_VAR 0 3
22790: PUSH
22791: LD_INT 21
22793: EQUAL
22794: IFFALSE 22804
// sPowell := true ;
22796: LD_ADDR_EXP 82
22800: PUSH
22801: LD_INT 1
22803: ST_TO_ADDR
// if p3 = 22 then
22804: LD_VAR 0 3
22808: PUSH
22809: LD_INT 22
22811: EQUAL
22812: IFFALSE 22822
// sTeleport := true ;
22814: LD_ADDR_EXP 85
22818: PUSH
22819: LD_INT 1
22821: ST_TO_ADDR
// if p3 = 23 then
22822: LD_VAR 0 3
22826: PUSH
22827: LD_INT 23
22829: EQUAL
22830: IFFALSE 22840
// sOilTower := true ;
22832: LD_ADDR_EXP 87
22836: PUSH
22837: LD_INT 1
22839: ST_TO_ADDR
// if p3 = 24 then
22840: LD_VAR 0 3
22844: PUSH
22845: LD_INT 24
22847: EQUAL
22848: IFFALSE 22858
// sShovel := true ;
22850: LD_ADDR_EXP 88
22854: PUSH
22855: LD_INT 1
22857: ST_TO_ADDR
// if p3 = 25 then
22858: LD_VAR 0 3
22862: PUSH
22863: LD_INT 25
22865: EQUAL
22866: IFFALSE 22876
// sSheik := true ;
22868: LD_ADDR_EXP 89
22872: PUSH
22873: LD_INT 1
22875: ST_TO_ADDR
// if p3 = 26 then
22876: LD_VAR 0 3
22880: PUSH
22881: LD_INT 26
22883: EQUAL
22884: IFFALSE 22894
// sEarthquake := true ;
22886: LD_ADDR_EXP 91
22890: PUSH
22891: LD_INT 1
22893: ST_TO_ADDR
// if p3 = 27 then
22894: LD_VAR 0 3
22898: PUSH
22899: LD_INT 27
22901: EQUAL
22902: IFFALSE 22912
// sAI := true ;
22904: LD_ADDR_EXP 92
22908: PUSH
22909: LD_INT 1
22911: ST_TO_ADDR
// if p3 = 28 then
22912: LD_VAR 0 3
22916: PUSH
22917: LD_INT 28
22919: EQUAL
22920: IFFALSE 22930
// sCargo := true ;
22922: LD_ADDR_EXP 95
22926: PUSH
22927: LD_INT 1
22929: ST_TO_ADDR
// if p3 = 29 then
22930: LD_VAR 0 3
22934: PUSH
22935: LD_INT 29
22937: EQUAL
22938: IFFALSE 22948
// sDLaser := true ;
22940: LD_ADDR_EXP 96
22944: PUSH
22945: LD_INT 1
22947: ST_TO_ADDR
// if p3 = 30 then
22948: LD_VAR 0 3
22952: PUSH
22953: LD_INT 30
22955: EQUAL
22956: IFFALSE 22966
// sExchange := true ;
22958: LD_ADDR_EXP 97
22962: PUSH
22963: LD_INT 1
22965: ST_TO_ADDR
// if p3 = 31 then
22966: LD_VAR 0 3
22970: PUSH
22971: LD_INT 31
22973: EQUAL
22974: IFFALSE 22984
// sFac := true ;
22976: LD_ADDR_EXP 98
22980: PUSH
22981: LD_INT 1
22983: ST_TO_ADDR
// if p3 = 32 then
22984: LD_VAR 0 3
22988: PUSH
22989: LD_INT 32
22991: EQUAL
22992: IFFALSE 23002
// sPower := true ;
22994: LD_ADDR_EXP 99
22998: PUSH
22999: LD_INT 1
23001: ST_TO_ADDR
// if p3 = 33 then
23002: LD_VAR 0 3
23006: PUSH
23007: LD_INT 33
23009: EQUAL
23010: IFFALSE 23020
// sRandom := true ;
23012: LD_ADDR_EXP 100
23016: PUSH
23017: LD_INT 1
23019: ST_TO_ADDR
// if p3 = 34 then
23020: LD_VAR 0 3
23024: PUSH
23025: LD_INT 34
23027: EQUAL
23028: IFFALSE 23038
// sShield := true ;
23030: LD_ADDR_EXP 101
23034: PUSH
23035: LD_INT 1
23037: ST_TO_ADDR
// if p3 = 35 then
23038: LD_VAR 0 3
23042: PUSH
23043: LD_INT 35
23045: EQUAL
23046: IFFALSE 23056
// sTime := true ;
23048: LD_ADDR_EXP 102
23052: PUSH
23053: LD_INT 1
23055: ST_TO_ADDR
// if p3 = 36 then
23056: LD_VAR 0 3
23060: PUSH
23061: LD_INT 36
23063: EQUAL
23064: IFFALSE 23074
// sTools := true ;
23066: LD_ADDR_EXP 103
23070: PUSH
23071: LD_INT 1
23073: ST_TO_ADDR
// if p3 = 101 then
23074: LD_VAR 0 3
23078: PUSH
23079: LD_INT 101
23081: EQUAL
23082: IFFALSE 23092
// sSold := true ;
23084: LD_ADDR_EXP 68
23088: PUSH
23089: LD_INT 1
23091: ST_TO_ADDR
// if p3 = 102 then
23092: LD_VAR 0 3
23096: PUSH
23097: LD_INT 102
23099: EQUAL
23100: IFFALSE 23110
// sDiff := true ;
23102: LD_ADDR_EXP 69
23106: PUSH
23107: LD_INT 1
23109: ST_TO_ADDR
// if p3 = 103 then
23110: LD_VAR 0 3
23114: PUSH
23115: LD_INT 103
23117: EQUAL
23118: IFFALSE 23128
// sFog := true ;
23120: LD_ADDR_EXP 72
23124: PUSH
23125: LD_INT 1
23127: ST_TO_ADDR
// if p3 = 104 then
23128: LD_VAR 0 3
23132: PUSH
23133: LD_INT 104
23135: EQUAL
23136: IFFALSE 23146
// sReset := true ;
23138: LD_ADDR_EXP 73
23142: PUSH
23143: LD_INT 1
23145: ST_TO_ADDR
// if p3 = 105 then
23146: LD_VAR 0 3
23150: PUSH
23151: LD_INT 105
23153: EQUAL
23154: IFFALSE 23164
// sSun := true ;
23156: LD_ADDR_EXP 74
23160: PUSH
23161: LD_INT 1
23163: ST_TO_ADDR
// if p3 = 106 then
23164: LD_VAR 0 3
23168: PUSH
23169: LD_INT 106
23171: EQUAL
23172: IFFALSE 23182
// sTiger := true ;
23174: LD_ADDR_EXP 70
23178: PUSH
23179: LD_INT 1
23181: ST_TO_ADDR
// if p3 = 107 then
23182: LD_VAR 0 3
23186: PUSH
23187: LD_INT 107
23189: EQUAL
23190: IFFALSE 23200
// sBomb := true ;
23192: LD_ADDR_EXP 71
23196: PUSH
23197: LD_INT 1
23199: ST_TO_ADDR
// if p3 = 108 then
23200: LD_VAR 0 3
23204: PUSH
23205: LD_INT 108
23207: EQUAL
23208: IFFALSE 23218
// sWound := true ;
23210: LD_ADDR_EXP 79
23214: PUSH
23215: LD_INT 1
23217: ST_TO_ADDR
// if p3 = 109 then
23218: LD_VAR 0 3
23222: PUSH
23223: LD_INT 109
23225: EQUAL
23226: IFFALSE 23236
// sBetray := true ;
23228: LD_ADDR_EXP 83
23232: PUSH
23233: LD_INT 1
23235: ST_TO_ADDR
// if p3 = 110 then
23236: LD_VAR 0 3
23240: PUSH
23241: LD_INT 110
23243: EQUAL
23244: IFFALSE 23254
// sContamin := true ;
23246: LD_ADDR_EXP 84
23250: PUSH
23251: LD_INT 1
23253: ST_TO_ADDR
// if p3 = 111 then
23254: LD_VAR 0 3
23258: PUSH
23259: LD_INT 111
23261: EQUAL
23262: IFFALSE 23272
// sOil := true ;
23264: LD_ADDR_EXP 86
23268: PUSH
23269: LD_INT 1
23271: ST_TO_ADDR
// if p3 = 112 then
23272: LD_VAR 0 3
23276: PUSH
23277: LD_INT 112
23279: EQUAL
23280: IFFALSE 23290
// sStu := true ;
23282: LD_ADDR_EXP 90
23286: PUSH
23287: LD_INT 1
23289: ST_TO_ADDR
// if p3 = 113 then
23290: LD_VAR 0 3
23294: PUSH
23295: LD_INT 113
23297: EQUAL
23298: IFFALSE 23308
// sBazooka := true ;
23300: LD_ADDR_EXP 93
23304: PUSH
23305: LD_INT 1
23307: ST_TO_ADDR
// if p3 = 114 then
23308: LD_VAR 0 3
23312: PUSH
23313: LD_INT 114
23315: EQUAL
23316: IFFALSE 23326
// sMortar := true ;
23318: LD_ADDR_EXP 94
23322: PUSH
23323: LD_INT 1
23325: ST_TO_ADDR
// if p3 = 115 then
23326: LD_VAR 0 3
23330: PUSH
23331: LD_INT 115
23333: EQUAL
23334: IFFALSE 23344
// sRanger := true ;
23336: LD_ADDR_EXP 104
23340: PUSH
23341: LD_INT 1
23343: ST_TO_ADDR
// if p3 = 116 then
23344: LD_VAR 0 3
23348: PUSH
23349: LD_INT 116
23351: EQUAL
23352: IFFALSE 23362
// sComputer := true ;
23354: LD_ADDR_EXP 105
23358: PUSH
23359: LD_INT 1
23361: ST_TO_ADDR
// if p3 = 117 then
23362: LD_VAR 0 3
23366: PUSH
23367: LD_INT 117
23369: EQUAL
23370: IFFALSE 23380
// s30 := true ;
23372: LD_ADDR_EXP 106
23376: PUSH
23377: LD_INT 1
23379: ST_TO_ADDR
// if p3 = 118 then
23380: LD_VAR 0 3
23384: PUSH
23385: LD_INT 118
23387: EQUAL
23388: IFFALSE 23398
// s60 := true ;
23390: LD_ADDR_EXP 107
23394: PUSH
23395: LD_INT 1
23397: ST_TO_ADDR
// end ; if p2 = hack_mode then
23398: LD_VAR 0 2
23402: PUSH
23403: LD_INT 101
23405: EQUAL
23406: IFFALSE 23534
// begin case p3 of 1 :
23408: LD_VAR 0 3
23412: PUSH
23413: LD_INT 1
23415: DOUBLE
23416: EQUAL
23417: IFTRUE 23421
23419: GO 23428
23421: POP
// hHackUnlimitedResources ; 2 :
23422: CALL 35797 0 0
23426: GO 23534
23428: LD_INT 2
23430: DOUBLE
23431: EQUAL
23432: IFTRUE 23436
23434: GO 23443
23436: POP
// hHackSetLevel10 ; 3 :
23437: CALL 35930 0 0
23441: GO 23534
23443: LD_INT 3
23445: DOUBLE
23446: EQUAL
23447: IFTRUE 23451
23449: GO 23458
23451: POP
// hHackSetLevel10YourUnits ; 4 :
23452: CALL 36015 0 0
23456: GO 23534
23458: LD_INT 4
23460: DOUBLE
23461: EQUAL
23462: IFTRUE 23466
23464: GO 23473
23466: POP
// hHackInvincible ; 5 :
23467: CALL 36463 0 0
23471: GO 23534
23473: LD_INT 5
23475: DOUBLE
23476: EQUAL
23477: IFTRUE 23481
23479: GO 23488
23481: POP
// hHackInvisible ; 6 :
23482: CALL 36574 0 0
23486: GO 23534
23488: LD_INT 6
23490: DOUBLE
23491: EQUAL
23492: IFTRUE 23496
23494: GO 23503
23496: POP
// hHackChangeYourSide ; 7 :
23497: CALL 36631 0 0
23501: GO 23534
23503: LD_INT 7
23505: DOUBLE
23506: EQUAL
23507: IFTRUE 23511
23509: GO 23518
23511: POP
// hHackChangeUnitSide ; 8 :
23512: CALL 36673 0 0
23516: GO 23534
23518: LD_INT 8
23520: DOUBLE
23521: EQUAL
23522: IFTRUE 23526
23524: GO 23533
23526: POP
// hHackFog ; end ;
23527: CALL 36774 0 0
23531: GO 23534
23533: POP
// end ; if p2 = game_save_mode then
23534: LD_VAR 0 2
23538: PUSH
23539: LD_INT 102
23541: EQUAL
23542: IFFALSE 23599
// begin if p3 = 1 then
23544: LD_VAR 0 3
23548: PUSH
23549: LD_INT 1
23551: EQUAL
23552: IFFALSE 23564
// globalGameSaveCounter := p4 ;
23554: LD_ADDR_EXP 50
23558: PUSH
23559: LD_VAR 0 4
23563: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
23564: LD_VAR 0 3
23568: PUSH
23569: LD_INT 2
23571: EQUAL
23572: IFFALSE 23580
23574: PUSH
23575: LD_EXP 50
23579: AND
23580: IFFALSE 23599
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
23582: LD_STRING setGameSaveCounter(
23584: PUSH
23585: LD_EXP 50
23589: STR
23590: PUSH
23591: LD_STRING )
23593: STR
23594: PPUSH
23595: CALL_OW 559
// end ; end ;
23599: LD_VAR 0 7
23603: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
23604: LD_INT 0
23606: PPUSH
// streamModeActive := false ;
23607: LD_ADDR_EXP 51
23611: PUSH
23612: LD_INT 0
23614: ST_TO_ADDR
// normalCounter := 36 ;
23615: LD_ADDR_EXP 52
23619: PUSH
23620: LD_INT 36
23622: ST_TO_ADDR
// hardcoreCounter := 18 ;
23623: LD_ADDR_EXP 53
23627: PUSH
23628: LD_INT 18
23630: ST_TO_ADDR
// sRocket := false ;
23631: LD_ADDR_EXP 56
23635: PUSH
23636: LD_INT 0
23638: ST_TO_ADDR
// sSpeed := false ;
23639: LD_ADDR_EXP 55
23643: PUSH
23644: LD_INT 0
23646: ST_TO_ADDR
// sEngine := false ;
23647: LD_ADDR_EXP 57
23651: PUSH
23652: LD_INT 0
23654: ST_TO_ADDR
// sSpec := false ;
23655: LD_ADDR_EXP 54
23659: PUSH
23660: LD_INT 0
23662: ST_TO_ADDR
// sLevel := false ;
23663: LD_ADDR_EXP 58
23667: PUSH
23668: LD_INT 0
23670: ST_TO_ADDR
// sArmoury := false ;
23671: LD_ADDR_EXP 59
23675: PUSH
23676: LD_INT 0
23678: ST_TO_ADDR
// sRadar := false ;
23679: LD_ADDR_EXP 60
23683: PUSH
23684: LD_INT 0
23686: ST_TO_ADDR
// sBunker := false ;
23687: LD_ADDR_EXP 61
23691: PUSH
23692: LD_INT 0
23694: ST_TO_ADDR
// sHack := false ;
23695: LD_ADDR_EXP 62
23699: PUSH
23700: LD_INT 0
23702: ST_TO_ADDR
// sFire := false ;
23703: LD_ADDR_EXP 63
23707: PUSH
23708: LD_INT 0
23710: ST_TO_ADDR
// sRefresh := false ;
23711: LD_ADDR_EXP 64
23715: PUSH
23716: LD_INT 0
23718: ST_TO_ADDR
// sExp := false ;
23719: LD_ADDR_EXP 65
23723: PUSH
23724: LD_INT 0
23726: ST_TO_ADDR
// sDepot := false ;
23727: LD_ADDR_EXP 66
23731: PUSH
23732: LD_INT 0
23734: ST_TO_ADDR
// sFlag := false ;
23735: LD_ADDR_EXP 67
23739: PUSH
23740: LD_INT 0
23742: ST_TO_ADDR
// sKamikadze := false ;
23743: LD_ADDR_EXP 75
23747: PUSH
23748: LD_INT 0
23750: ST_TO_ADDR
// sTroll := false ;
23751: LD_ADDR_EXP 76
23755: PUSH
23756: LD_INT 0
23758: ST_TO_ADDR
// sSlow := false ;
23759: LD_ADDR_EXP 77
23763: PUSH
23764: LD_INT 0
23766: ST_TO_ADDR
// sLack := false ;
23767: LD_ADDR_EXP 78
23771: PUSH
23772: LD_INT 0
23774: ST_TO_ADDR
// sTank := false ;
23775: LD_ADDR_EXP 80
23779: PUSH
23780: LD_INT 0
23782: ST_TO_ADDR
// sRemote := false ;
23783: LD_ADDR_EXP 81
23787: PUSH
23788: LD_INT 0
23790: ST_TO_ADDR
// sPowell := false ;
23791: LD_ADDR_EXP 82
23795: PUSH
23796: LD_INT 0
23798: ST_TO_ADDR
// sTeleport := false ;
23799: LD_ADDR_EXP 85
23803: PUSH
23804: LD_INT 0
23806: ST_TO_ADDR
// sOilTower := false ;
23807: LD_ADDR_EXP 87
23811: PUSH
23812: LD_INT 0
23814: ST_TO_ADDR
// sShovel := false ;
23815: LD_ADDR_EXP 88
23819: PUSH
23820: LD_INT 0
23822: ST_TO_ADDR
// sSheik := false ;
23823: LD_ADDR_EXP 89
23827: PUSH
23828: LD_INT 0
23830: ST_TO_ADDR
// sEarthquake := false ;
23831: LD_ADDR_EXP 91
23835: PUSH
23836: LD_INT 0
23838: ST_TO_ADDR
// sAI := false ;
23839: LD_ADDR_EXP 92
23843: PUSH
23844: LD_INT 0
23846: ST_TO_ADDR
// sCargo := false ;
23847: LD_ADDR_EXP 95
23851: PUSH
23852: LD_INT 0
23854: ST_TO_ADDR
// sDLaser := false ;
23855: LD_ADDR_EXP 96
23859: PUSH
23860: LD_INT 0
23862: ST_TO_ADDR
// sExchange := false ;
23863: LD_ADDR_EXP 97
23867: PUSH
23868: LD_INT 0
23870: ST_TO_ADDR
// sFac := false ;
23871: LD_ADDR_EXP 98
23875: PUSH
23876: LD_INT 0
23878: ST_TO_ADDR
// sPower := false ;
23879: LD_ADDR_EXP 99
23883: PUSH
23884: LD_INT 0
23886: ST_TO_ADDR
// sRandom := false ;
23887: LD_ADDR_EXP 100
23891: PUSH
23892: LD_INT 0
23894: ST_TO_ADDR
// sShield := false ;
23895: LD_ADDR_EXP 101
23899: PUSH
23900: LD_INT 0
23902: ST_TO_ADDR
// sTime := false ;
23903: LD_ADDR_EXP 102
23907: PUSH
23908: LD_INT 0
23910: ST_TO_ADDR
// sTools := false ;
23911: LD_ADDR_EXP 103
23915: PUSH
23916: LD_INT 0
23918: ST_TO_ADDR
// sSold := false ;
23919: LD_ADDR_EXP 68
23923: PUSH
23924: LD_INT 0
23926: ST_TO_ADDR
// sDiff := false ;
23927: LD_ADDR_EXP 69
23931: PUSH
23932: LD_INT 0
23934: ST_TO_ADDR
// sFog := false ;
23935: LD_ADDR_EXP 72
23939: PUSH
23940: LD_INT 0
23942: ST_TO_ADDR
// sReset := false ;
23943: LD_ADDR_EXP 73
23947: PUSH
23948: LD_INT 0
23950: ST_TO_ADDR
// sSun := false ;
23951: LD_ADDR_EXP 74
23955: PUSH
23956: LD_INT 0
23958: ST_TO_ADDR
// sTiger := false ;
23959: LD_ADDR_EXP 70
23963: PUSH
23964: LD_INT 0
23966: ST_TO_ADDR
// sBomb := false ;
23967: LD_ADDR_EXP 71
23971: PUSH
23972: LD_INT 0
23974: ST_TO_ADDR
// sWound := false ;
23975: LD_ADDR_EXP 79
23979: PUSH
23980: LD_INT 0
23982: ST_TO_ADDR
// sBetray := false ;
23983: LD_ADDR_EXP 83
23987: PUSH
23988: LD_INT 0
23990: ST_TO_ADDR
// sContamin := false ;
23991: LD_ADDR_EXP 84
23995: PUSH
23996: LD_INT 0
23998: ST_TO_ADDR
// sOil := false ;
23999: LD_ADDR_EXP 86
24003: PUSH
24004: LD_INT 0
24006: ST_TO_ADDR
// sStu := false ;
24007: LD_ADDR_EXP 90
24011: PUSH
24012: LD_INT 0
24014: ST_TO_ADDR
// sBazooka := false ;
24015: LD_ADDR_EXP 93
24019: PUSH
24020: LD_INT 0
24022: ST_TO_ADDR
// sMortar := false ;
24023: LD_ADDR_EXP 94
24027: PUSH
24028: LD_INT 0
24030: ST_TO_ADDR
// sRanger := false ;
24031: LD_ADDR_EXP 104
24035: PUSH
24036: LD_INT 0
24038: ST_TO_ADDR
// sComputer := false ;
24039: LD_ADDR_EXP 105
24043: PUSH
24044: LD_INT 0
24046: ST_TO_ADDR
// s30 := false ;
24047: LD_ADDR_EXP 106
24051: PUSH
24052: LD_INT 0
24054: ST_TO_ADDR
// s60 := false ;
24055: LD_ADDR_EXP 107
24059: PUSH
24060: LD_INT 0
24062: ST_TO_ADDR
// end ;
24063: LD_VAR 0 1
24067: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
24068: LD_INT 0
24070: PPUSH
24071: PPUSH
24072: PPUSH
24073: PPUSH
24074: PPUSH
24075: PPUSH
24076: PPUSH
// result := [ ] ;
24077: LD_ADDR_VAR 0 2
24081: PUSH
24082: EMPTY
24083: ST_TO_ADDR
// if campaign_id = 1 then
24084: LD_OWVAR 69
24088: PUSH
24089: LD_INT 1
24091: EQUAL
24092: IFFALSE 27258
// begin case mission_number of 1 :
24094: LD_OWVAR 70
24098: PUSH
24099: LD_INT 1
24101: DOUBLE
24102: EQUAL
24103: IFTRUE 24107
24105: GO 24183
24107: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
24108: LD_ADDR_VAR 0 2
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 4
24118: PUSH
24119: LD_INT 11
24121: PUSH
24122: LD_INT 12
24124: PUSH
24125: LD_INT 15
24127: PUSH
24128: LD_INT 16
24130: PUSH
24131: LD_INT 22
24133: PUSH
24134: LD_INT 23
24136: PUSH
24137: LD_INT 26
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 101
24153: PUSH
24154: LD_INT 102
24156: PUSH
24157: LD_INT 106
24159: PUSH
24160: LD_INT 116
24162: PUSH
24163: LD_INT 117
24165: PUSH
24166: LD_INT 118
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: ST_TO_ADDR
24181: GO 27256
24183: LD_INT 2
24185: DOUBLE
24186: EQUAL
24187: IFTRUE 24191
24189: GO 24275
24191: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
24192: LD_ADDR_VAR 0 2
24196: PUSH
24197: LD_INT 2
24199: PUSH
24200: LD_INT 4
24202: PUSH
24203: LD_INT 11
24205: PUSH
24206: LD_INT 12
24208: PUSH
24209: LD_INT 15
24211: PUSH
24212: LD_INT 16
24214: PUSH
24215: LD_INT 22
24217: PUSH
24218: LD_INT 23
24220: PUSH
24221: LD_INT 26
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 101
24237: PUSH
24238: LD_INT 102
24240: PUSH
24241: LD_INT 105
24243: PUSH
24244: LD_INT 106
24246: PUSH
24247: LD_INT 108
24249: PUSH
24250: LD_INT 116
24252: PUSH
24253: LD_INT 117
24255: PUSH
24256: LD_INT 118
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: ST_TO_ADDR
24273: GO 27256
24275: LD_INT 3
24277: DOUBLE
24278: EQUAL
24279: IFTRUE 24283
24281: GO 24371
24283: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
24284: LD_ADDR_VAR 0 2
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: LD_INT 4
24294: PUSH
24295: LD_INT 5
24297: PUSH
24298: LD_INT 11
24300: PUSH
24301: LD_INT 12
24303: PUSH
24304: LD_INT 15
24306: PUSH
24307: LD_INT 16
24309: PUSH
24310: LD_INT 22
24312: PUSH
24313: LD_INT 26
24315: PUSH
24316: LD_INT 36
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 101
24333: PUSH
24334: LD_INT 102
24336: PUSH
24337: LD_INT 105
24339: PUSH
24340: LD_INT 106
24342: PUSH
24343: LD_INT 108
24345: PUSH
24346: LD_INT 116
24348: PUSH
24349: LD_INT 117
24351: PUSH
24352: LD_INT 118
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: ST_TO_ADDR
24369: GO 27256
24371: LD_INT 4
24373: DOUBLE
24374: EQUAL
24375: IFTRUE 24379
24377: GO 24475
24379: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
24380: LD_ADDR_VAR 0 2
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: LD_INT 4
24390: PUSH
24391: LD_INT 5
24393: PUSH
24394: LD_INT 8
24396: PUSH
24397: LD_INT 11
24399: PUSH
24400: LD_INT 12
24402: PUSH
24403: LD_INT 15
24405: PUSH
24406: LD_INT 16
24408: PUSH
24409: LD_INT 22
24411: PUSH
24412: LD_INT 23
24414: PUSH
24415: LD_INT 26
24417: PUSH
24418: LD_INT 36
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 101
24437: PUSH
24438: LD_INT 102
24440: PUSH
24441: LD_INT 105
24443: PUSH
24444: LD_INT 106
24446: PUSH
24447: LD_INT 108
24449: PUSH
24450: LD_INT 116
24452: PUSH
24453: LD_INT 117
24455: PUSH
24456: LD_INT 118
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: ST_TO_ADDR
24473: GO 27256
24475: LD_INT 5
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24595
24483: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
24484: LD_ADDR_VAR 0 2
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: LD_INT 4
24494: PUSH
24495: LD_INT 5
24497: PUSH
24498: LD_INT 6
24500: PUSH
24501: LD_INT 8
24503: PUSH
24504: LD_INT 11
24506: PUSH
24507: LD_INT 12
24509: PUSH
24510: LD_INT 15
24512: PUSH
24513: LD_INT 16
24515: PUSH
24516: LD_INT 22
24518: PUSH
24519: LD_INT 23
24521: PUSH
24522: LD_INT 25
24524: PUSH
24525: LD_INT 26
24527: PUSH
24528: LD_INT 36
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 101
24549: PUSH
24550: LD_INT 102
24552: PUSH
24553: LD_INT 105
24555: PUSH
24556: LD_INT 106
24558: PUSH
24559: LD_INT 108
24561: PUSH
24562: LD_INT 109
24564: PUSH
24565: LD_INT 112
24567: PUSH
24568: LD_INT 116
24570: PUSH
24571: LD_INT 117
24573: PUSH
24574: LD_INT 118
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: ST_TO_ADDR
24593: GO 27256
24595: LD_INT 6
24597: DOUBLE
24598: EQUAL
24599: IFTRUE 24603
24601: GO 24735
24603: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
24604: LD_ADDR_VAR 0 2
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: LD_INT 4
24614: PUSH
24615: LD_INT 5
24617: PUSH
24618: LD_INT 6
24620: PUSH
24621: LD_INT 8
24623: PUSH
24624: LD_INT 11
24626: PUSH
24627: LD_INT 12
24629: PUSH
24630: LD_INT 15
24632: PUSH
24633: LD_INT 16
24635: PUSH
24636: LD_INT 20
24638: PUSH
24639: LD_INT 21
24641: PUSH
24642: LD_INT 22
24644: PUSH
24645: LD_INT 23
24647: PUSH
24648: LD_INT 25
24650: PUSH
24651: LD_INT 26
24653: PUSH
24654: LD_INT 30
24656: PUSH
24657: LD_INT 31
24659: PUSH
24660: LD_INT 32
24662: PUSH
24663: LD_INT 36
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 101
24689: PUSH
24690: LD_INT 102
24692: PUSH
24693: LD_INT 105
24695: PUSH
24696: LD_INT 106
24698: PUSH
24699: LD_INT 108
24701: PUSH
24702: LD_INT 109
24704: PUSH
24705: LD_INT 112
24707: PUSH
24708: LD_INT 116
24710: PUSH
24711: LD_INT 117
24713: PUSH
24714: LD_INT 118
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: ST_TO_ADDR
24733: GO 27256
24735: LD_INT 7
24737: DOUBLE
24738: EQUAL
24739: IFTRUE 24743
24741: GO 24855
24743: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24744: LD_ADDR_VAR 0 2
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: LD_INT 4
24754: PUSH
24755: LD_INT 5
24757: PUSH
24758: LD_INT 7
24760: PUSH
24761: LD_INT 11
24763: PUSH
24764: LD_INT 12
24766: PUSH
24767: LD_INT 15
24769: PUSH
24770: LD_INT 16
24772: PUSH
24773: LD_INT 20
24775: PUSH
24776: LD_INT 21
24778: PUSH
24779: LD_INT 22
24781: PUSH
24782: LD_INT 23
24784: PUSH
24785: LD_INT 25
24787: PUSH
24788: LD_INT 26
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 101
24809: PUSH
24810: LD_INT 102
24812: PUSH
24813: LD_INT 103
24815: PUSH
24816: LD_INT 105
24818: PUSH
24819: LD_INT 106
24821: PUSH
24822: LD_INT 108
24824: PUSH
24825: LD_INT 112
24827: PUSH
24828: LD_INT 116
24830: PUSH
24831: LD_INT 117
24833: PUSH
24834: LD_INT 118
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: ST_TO_ADDR
24853: GO 27256
24855: LD_INT 8
24857: DOUBLE
24858: EQUAL
24859: IFTRUE 24863
24861: GO 25003
24863: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24864: LD_ADDR_VAR 0 2
24868: PUSH
24869: LD_INT 2
24871: PUSH
24872: LD_INT 4
24874: PUSH
24875: LD_INT 5
24877: PUSH
24878: LD_INT 6
24880: PUSH
24881: LD_INT 7
24883: PUSH
24884: LD_INT 8
24886: PUSH
24887: LD_INT 11
24889: PUSH
24890: LD_INT 12
24892: PUSH
24893: LD_INT 15
24895: PUSH
24896: LD_INT 16
24898: PUSH
24899: LD_INT 20
24901: PUSH
24902: LD_INT 21
24904: PUSH
24905: LD_INT 22
24907: PUSH
24908: LD_INT 23
24910: PUSH
24911: LD_INT 25
24913: PUSH
24914: LD_INT 26
24916: PUSH
24917: LD_INT 30
24919: PUSH
24920: LD_INT 31
24922: PUSH
24923: LD_INT 32
24925: PUSH
24926: LD_INT 36
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 101
24953: PUSH
24954: LD_INT 102
24956: PUSH
24957: LD_INT 103
24959: PUSH
24960: LD_INT 105
24962: PUSH
24963: LD_INT 106
24965: PUSH
24966: LD_INT 108
24968: PUSH
24969: LD_INT 109
24971: PUSH
24972: LD_INT 112
24974: PUSH
24975: LD_INT 116
24977: PUSH
24978: LD_INT 117
24980: PUSH
24981: LD_INT 118
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: ST_TO_ADDR
25001: GO 27256
25003: LD_INT 9
25005: DOUBLE
25006: EQUAL
25007: IFTRUE 25011
25009: GO 25159
25011: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
25012: LD_ADDR_VAR 0 2
25016: PUSH
25017: LD_INT 2
25019: PUSH
25020: LD_INT 4
25022: PUSH
25023: LD_INT 5
25025: PUSH
25026: LD_INT 6
25028: PUSH
25029: LD_INT 7
25031: PUSH
25032: LD_INT 8
25034: PUSH
25035: LD_INT 11
25037: PUSH
25038: LD_INT 12
25040: PUSH
25041: LD_INT 15
25043: PUSH
25044: LD_INT 16
25046: PUSH
25047: LD_INT 20
25049: PUSH
25050: LD_INT 21
25052: PUSH
25053: LD_INT 22
25055: PUSH
25056: LD_INT 23
25058: PUSH
25059: LD_INT 25
25061: PUSH
25062: LD_INT 26
25064: PUSH
25065: LD_INT 28
25067: PUSH
25068: LD_INT 30
25070: PUSH
25071: LD_INT 31
25073: PUSH
25074: LD_INT 32
25076: PUSH
25077: LD_INT 36
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 101
25105: PUSH
25106: LD_INT 102
25108: PUSH
25109: LD_INT 103
25111: PUSH
25112: LD_INT 105
25114: PUSH
25115: LD_INT 106
25117: PUSH
25118: LD_INT 108
25120: PUSH
25121: LD_INT 109
25123: PUSH
25124: LD_INT 112
25126: PUSH
25127: LD_INT 114
25129: PUSH
25130: LD_INT 116
25132: PUSH
25133: LD_INT 117
25135: PUSH
25136: LD_INT 118
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: ST_TO_ADDR
25157: GO 27256
25159: LD_INT 10
25161: DOUBLE
25162: EQUAL
25163: IFTRUE 25167
25165: GO 25363
25167: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
25168: LD_ADDR_VAR 0 2
25172: PUSH
25173: LD_INT 2
25175: PUSH
25176: LD_INT 4
25178: PUSH
25179: LD_INT 5
25181: PUSH
25182: LD_INT 6
25184: PUSH
25185: LD_INT 7
25187: PUSH
25188: LD_INT 8
25190: PUSH
25191: LD_INT 9
25193: PUSH
25194: LD_INT 10
25196: PUSH
25197: LD_INT 11
25199: PUSH
25200: LD_INT 12
25202: PUSH
25203: LD_INT 13
25205: PUSH
25206: LD_INT 14
25208: PUSH
25209: LD_INT 15
25211: PUSH
25212: LD_INT 16
25214: PUSH
25215: LD_INT 17
25217: PUSH
25218: LD_INT 18
25220: PUSH
25221: LD_INT 19
25223: PUSH
25224: LD_INT 20
25226: PUSH
25227: LD_INT 21
25229: PUSH
25230: LD_INT 22
25232: PUSH
25233: LD_INT 23
25235: PUSH
25236: LD_INT 24
25238: PUSH
25239: LD_INT 25
25241: PUSH
25242: LD_INT 26
25244: PUSH
25245: LD_INT 28
25247: PUSH
25248: LD_INT 30
25250: PUSH
25251: LD_INT 31
25253: PUSH
25254: LD_INT 32
25256: PUSH
25257: LD_INT 36
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 101
25293: PUSH
25294: LD_INT 102
25296: PUSH
25297: LD_INT 103
25299: PUSH
25300: LD_INT 104
25302: PUSH
25303: LD_INT 105
25305: PUSH
25306: LD_INT 106
25308: PUSH
25309: LD_INT 107
25311: PUSH
25312: LD_INT 108
25314: PUSH
25315: LD_INT 109
25317: PUSH
25318: LD_INT 110
25320: PUSH
25321: LD_INT 111
25323: PUSH
25324: LD_INT 112
25326: PUSH
25327: LD_INT 114
25329: PUSH
25330: LD_INT 116
25332: PUSH
25333: LD_INT 117
25335: PUSH
25336: LD_INT 118
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: ST_TO_ADDR
25361: GO 27256
25363: LD_INT 11
25365: DOUBLE
25366: EQUAL
25367: IFTRUE 25371
25369: GO 25575
25371: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
25372: LD_ADDR_VAR 0 2
25376: PUSH
25377: LD_INT 2
25379: PUSH
25380: LD_INT 3
25382: PUSH
25383: LD_INT 4
25385: PUSH
25386: LD_INT 5
25388: PUSH
25389: LD_INT 6
25391: PUSH
25392: LD_INT 7
25394: PUSH
25395: LD_INT 8
25397: PUSH
25398: LD_INT 9
25400: PUSH
25401: LD_INT 10
25403: PUSH
25404: LD_INT 11
25406: PUSH
25407: LD_INT 12
25409: PUSH
25410: LD_INT 13
25412: PUSH
25413: LD_INT 14
25415: PUSH
25416: LD_INT 15
25418: PUSH
25419: LD_INT 16
25421: PUSH
25422: LD_INT 17
25424: PUSH
25425: LD_INT 18
25427: PUSH
25428: LD_INT 19
25430: PUSH
25431: LD_INT 20
25433: PUSH
25434: LD_INT 21
25436: PUSH
25437: LD_INT 22
25439: PUSH
25440: LD_INT 23
25442: PUSH
25443: LD_INT 24
25445: PUSH
25446: LD_INT 25
25448: PUSH
25449: LD_INT 26
25451: PUSH
25452: LD_INT 28
25454: PUSH
25455: LD_INT 30
25457: PUSH
25458: LD_INT 31
25460: PUSH
25461: LD_INT 32
25463: PUSH
25464: LD_INT 34
25466: PUSH
25467: LD_INT 36
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 101
25505: PUSH
25506: LD_INT 102
25508: PUSH
25509: LD_INT 103
25511: PUSH
25512: LD_INT 104
25514: PUSH
25515: LD_INT 105
25517: PUSH
25518: LD_INT 106
25520: PUSH
25521: LD_INT 107
25523: PUSH
25524: LD_INT 108
25526: PUSH
25527: LD_INT 109
25529: PUSH
25530: LD_INT 110
25532: PUSH
25533: LD_INT 111
25535: PUSH
25536: LD_INT 112
25538: PUSH
25539: LD_INT 114
25541: PUSH
25542: LD_INT 116
25544: PUSH
25545: LD_INT 117
25547: PUSH
25548: LD_INT 118
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: ST_TO_ADDR
25573: GO 27256
25575: LD_INT 12
25577: DOUBLE
25578: EQUAL
25579: IFTRUE 25583
25581: GO 25803
25583: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
25584: LD_ADDR_VAR 0 2
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: LD_INT 3
25597: PUSH
25598: LD_INT 4
25600: PUSH
25601: LD_INT 5
25603: PUSH
25604: LD_INT 6
25606: PUSH
25607: LD_INT 7
25609: PUSH
25610: LD_INT 8
25612: PUSH
25613: LD_INT 9
25615: PUSH
25616: LD_INT 10
25618: PUSH
25619: LD_INT 11
25621: PUSH
25622: LD_INT 12
25624: PUSH
25625: LD_INT 13
25627: PUSH
25628: LD_INT 14
25630: PUSH
25631: LD_INT 15
25633: PUSH
25634: LD_INT 16
25636: PUSH
25637: LD_INT 17
25639: PUSH
25640: LD_INT 18
25642: PUSH
25643: LD_INT 19
25645: PUSH
25646: LD_INT 20
25648: PUSH
25649: LD_INT 21
25651: PUSH
25652: LD_INT 22
25654: PUSH
25655: LD_INT 23
25657: PUSH
25658: LD_INT 24
25660: PUSH
25661: LD_INT 25
25663: PUSH
25664: LD_INT 26
25666: PUSH
25667: LD_INT 27
25669: PUSH
25670: LD_INT 28
25672: PUSH
25673: LD_INT 30
25675: PUSH
25676: LD_INT 31
25678: PUSH
25679: LD_INT 32
25681: PUSH
25682: LD_INT 33
25684: PUSH
25685: LD_INT 34
25687: PUSH
25688: LD_INT 36
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 101
25729: PUSH
25730: LD_INT 102
25732: PUSH
25733: LD_INT 103
25735: PUSH
25736: LD_INT 104
25738: PUSH
25739: LD_INT 105
25741: PUSH
25742: LD_INT 106
25744: PUSH
25745: LD_INT 107
25747: PUSH
25748: LD_INT 108
25750: PUSH
25751: LD_INT 109
25753: PUSH
25754: LD_INT 110
25756: PUSH
25757: LD_INT 111
25759: PUSH
25760: LD_INT 112
25762: PUSH
25763: LD_INT 113
25765: PUSH
25766: LD_INT 114
25768: PUSH
25769: LD_INT 116
25771: PUSH
25772: LD_INT 117
25774: PUSH
25775: LD_INT 118
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: ST_TO_ADDR
25801: GO 27256
25803: LD_INT 13
25805: DOUBLE
25806: EQUAL
25807: IFTRUE 25811
25809: GO 26019
25811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25812: LD_ADDR_VAR 0 2
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: LD_INT 3
25825: PUSH
25826: LD_INT 4
25828: PUSH
25829: LD_INT 5
25831: PUSH
25832: LD_INT 8
25834: PUSH
25835: LD_INT 9
25837: PUSH
25838: LD_INT 10
25840: PUSH
25841: LD_INT 11
25843: PUSH
25844: LD_INT 12
25846: PUSH
25847: LD_INT 14
25849: PUSH
25850: LD_INT 15
25852: PUSH
25853: LD_INT 16
25855: PUSH
25856: LD_INT 17
25858: PUSH
25859: LD_INT 18
25861: PUSH
25862: LD_INT 19
25864: PUSH
25865: LD_INT 20
25867: PUSH
25868: LD_INT 21
25870: PUSH
25871: LD_INT 22
25873: PUSH
25874: LD_INT 23
25876: PUSH
25877: LD_INT 24
25879: PUSH
25880: LD_INT 25
25882: PUSH
25883: LD_INT 26
25885: PUSH
25886: LD_INT 27
25888: PUSH
25889: LD_INT 28
25891: PUSH
25892: LD_INT 30
25894: PUSH
25895: LD_INT 31
25897: PUSH
25898: LD_INT 32
25900: PUSH
25901: LD_INT 33
25903: PUSH
25904: LD_INT 34
25906: PUSH
25907: LD_INT 36
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 101
25945: PUSH
25946: LD_INT 102
25948: PUSH
25949: LD_INT 103
25951: PUSH
25952: LD_INT 104
25954: PUSH
25955: LD_INT 105
25957: PUSH
25958: LD_INT 106
25960: PUSH
25961: LD_INT 107
25963: PUSH
25964: LD_INT 108
25966: PUSH
25967: LD_INT 109
25969: PUSH
25970: LD_INT 110
25972: PUSH
25973: LD_INT 111
25975: PUSH
25976: LD_INT 112
25978: PUSH
25979: LD_INT 113
25981: PUSH
25982: LD_INT 114
25984: PUSH
25985: LD_INT 116
25987: PUSH
25988: LD_INT 117
25990: PUSH
25991: LD_INT 118
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: ST_TO_ADDR
26017: GO 27256
26019: LD_INT 14
26021: DOUBLE
26022: EQUAL
26023: IFTRUE 26027
26025: GO 26251
26027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
26028: LD_ADDR_VAR 0 2
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: LD_INT 3
26041: PUSH
26042: LD_INT 4
26044: PUSH
26045: LD_INT 5
26047: PUSH
26048: LD_INT 6
26050: PUSH
26051: LD_INT 7
26053: PUSH
26054: LD_INT 8
26056: PUSH
26057: LD_INT 9
26059: PUSH
26060: LD_INT 10
26062: PUSH
26063: LD_INT 11
26065: PUSH
26066: LD_INT 12
26068: PUSH
26069: LD_INT 13
26071: PUSH
26072: LD_INT 14
26074: PUSH
26075: LD_INT 15
26077: PUSH
26078: LD_INT 16
26080: PUSH
26081: LD_INT 17
26083: PUSH
26084: LD_INT 18
26086: PUSH
26087: LD_INT 19
26089: PUSH
26090: LD_INT 20
26092: PUSH
26093: LD_INT 21
26095: PUSH
26096: LD_INT 22
26098: PUSH
26099: LD_INT 23
26101: PUSH
26102: LD_INT 24
26104: PUSH
26105: LD_INT 25
26107: PUSH
26108: LD_INT 26
26110: PUSH
26111: LD_INT 27
26113: PUSH
26114: LD_INT 28
26116: PUSH
26117: LD_INT 29
26119: PUSH
26120: LD_INT 30
26122: PUSH
26123: LD_INT 31
26125: PUSH
26126: LD_INT 32
26128: PUSH
26129: LD_INT 33
26131: PUSH
26132: LD_INT 34
26134: PUSH
26135: LD_INT 36
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 101
26177: PUSH
26178: LD_INT 102
26180: PUSH
26181: LD_INT 103
26183: PUSH
26184: LD_INT 104
26186: PUSH
26187: LD_INT 105
26189: PUSH
26190: LD_INT 106
26192: PUSH
26193: LD_INT 107
26195: PUSH
26196: LD_INT 108
26198: PUSH
26199: LD_INT 109
26201: PUSH
26202: LD_INT 110
26204: PUSH
26205: LD_INT 111
26207: PUSH
26208: LD_INT 112
26210: PUSH
26211: LD_INT 113
26213: PUSH
26214: LD_INT 114
26216: PUSH
26217: LD_INT 116
26219: PUSH
26220: LD_INT 117
26222: PUSH
26223: LD_INT 118
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: ST_TO_ADDR
26249: GO 27256
26251: LD_INT 15
26253: DOUBLE
26254: EQUAL
26255: IFTRUE 26259
26257: GO 26483
26259: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
26260: LD_ADDR_VAR 0 2
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: LD_INT 2
26270: PUSH
26271: LD_INT 3
26273: PUSH
26274: LD_INT 4
26276: PUSH
26277: LD_INT 5
26279: PUSH
26280: LD_INT 6
26282: PUSH
26283: LD_INT 7
26285: PUSH
26286: LD_INT 8
26288: PUSH
26289: LD_INT 9
26291: PUSH
26292: LD_INT 10
26294: PUSH
26295: LD_INT 11
26297: PUSH
26298: LD_INT 12
26300: PUSH
26301: LD_INT 13
26303: PUSH
26304: LD_INT 14
26306: PUSH
26307: LD_INT 15
26309: PUSH
26310: LD_INT 16
26312: PUSH
26313: LD_INT 17
26315: PUSH
26316: LD_INT 18
26318: PUSH
26319: LD_INT 19
26321: PUSH
26322: LD_INT 20
26324: PUSH
26325: LD_INT 21
26327: PUSH
26328: LD_INT 22
26330: PUSH
26331: LD_INT 23
26333: PUSH
26334: LD_INT 24
26336: PUSH
26337: LD_INT 25
26339: PUSH
26340: LD_INT 26
26342: PUSH
26343: LD_INT 27
26345: PUSH
26346: LD_INT 28
26348: PUSH
26349: LD_INT 29
26351: PUSH
26352: LD_INT 30
26354: PUSH
26355: LD_INT 31
26357: PUSH
26358: LD_INT 32
26360: PUSH
26361: LD_INT 33
26363: PUSH
26364: LD_INT 34
26366: PUSH
26367: LD_INT 36
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 101
26409: PUSH
26410: LD_INT 102
26412: PUSH
26413: LD_INT 103
26415: PUSH
26416: LD_INT 104
26418: PUSH
26419: LD_INT 105
26421: PUSH
26422: LD_INT 106
26424: PUSH
26425: LD_INT 107
26427: PUSH
26428: LD_INT 108
26430: PUSH
26431: LD_INT 109
26433: PUSH
26434: LD_INT 110
26436: PUSH
26437: LD_INT 111
26439: PUSH
26440: LD_INT 112
26442: PUSH
26443: LD_INT 113
26445: PUSH
26446: LD_INT 114
26448: PUSH
26449: LD_INT 116
26451: PUSH
26452: LD_INT 117
26454: PUSH
26455: LD_INT 118
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: ST_TO_ADDR
26481: GO 27256
26483: LD_INT 16
26485: DOUBLE
26486: EQUAL
26487: IFTRUE 26491
26489: GO 26627
26491: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
26492: LD_ADDR_VAR 0 2
26496: PUSH
26497: LD_INT 2
26499: PUSH
26500: LD_INT 4
26502: PUSH
26503: LD_INT 5
26505: PUSH
26506: LD_INT 7
26508: PUSH
26509: LD_INT 11
26511: PUSH
26512: LD_INT 12
26514: PUSH
26515: LD_INT 15
26517: PUSH
26518: LD_INT 16
26520: PUSH
26521: LD_INT 20
26523: PUSH
26524: LD_INT 21
26526: PUSH
26527: LD_INT 22
26529: PUSH
26530: LD_INT 23
26532: PUSH
26533: LD_INT 25
26535: PUSH
26536: LD_INT 26
26538: PUSH
26539: LD_INT 30
26541: PUSH
26542: LD_INT 31
26544: PUSH
26545: LD_INT 32
26547: PUSH
26548: LD_INT 33
26550: PUSH
26551: LD_INT 34
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 101
26577: PUSH
26578: LD_INT 102
26580: PUSH
26581: LD_INT 103
26583: PUSH
26584: LD_INT 106
26586: PUSH
26587: LD_INT 108
26589: PUSH
26590: LD_INT 112
26592: PUSH
26593: LD_INT 113
26595: PUSH
26596: LD_INT 114
26598: PUSH
26599: LD_INT 116
26601: PUSH
26602: LD_INT 117
26604: PUSH
26605: LD_INT 118
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: ST_TO_ADDR
26625: GO 27256
26627: LD_INT 17
26629: DOUBLE
26630: EQUAL
26631: IFTRUE 26635
26633: GO 26859
26635: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
26636: LD_ADDR_VAR 0 2
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: LD_INT 2
26646: PUSH
26647: LD_INT 3
26649: PUSH
26650: LD_INT 4
26652: PUSH
26653: LD_INT 5
26655: PUSH
26656: LD_INT 6
26658: PUSH
26659: LD_INT 7
26661: PUSH
26662: LD_INT 8
26664: PUSH
26665: LD_INT 9
26667: PUSH
26668: LD_INT 10
26670: PUSH
26671: LD_INT 11
26673: PUSH
26674: LD_INT 12
26676: PUSH
26677: LD_INT 13
26679: PUSH
26680: LD_INT 14
26682: PUSH
26683: LD_INT 15
26685: PUSH
26686: LD_INT 16
26688: PUSH
26689: LD_INT 17
26691: PUSH
26692: LD_INT 18
26694: PUSH
26695: LD_INT 19
26697: PUSH
26698: LD_INT 20
26700: PUSH
26701: LD_INT 21
26703: PUSH
26704: LD_INT 22
26706: PUSH
26707: LD_INT 23
26709: PUSH
26710: LD_INT 24
26712: PUSH
26713: LD_INT 25
26715: PUSH
26716: LD_INT 26
26718: PUSH
26719: LD_INT 27
26721: PUSH
26722: LD_INT 28
26724: PUSH
26725: LD_INT 29
26727: PUSH
26728: LD_INT 30
26730: PUSH
26731: LD_INT 31
26733: PUSH
26734: LD_INT 32
26736: PUSH
26737: LD_INT 33
26739: PUSH
26740: LD_INT 34
26742: PUSH
26743: LD_INT 36
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 101
26785: PUSH
26786: LD_INT 102
26788: PUSH
26789: LD_INT 103
26791: PUSH
26792: LD_INT 104
26794: PUSH
26795: LD_INT 105
26797: PUSH
26798: LD_INT 106
26800: PUSH
26801: LD_INT 107
26803: PUSH
26804: LD_INT 108
26806: PUSH
26807: LD_INT 109
26809: PUSH
26810: LD_INT 110
26812: PUSH
26813: LD_INT 111
26815: PUSH
26816: LD_INT 112
26818: PUSH
26819: LD_INT 113
26821: PUSH
26822: LD_INT 114
26824: PUSH
26825: LD_INT 116
26827: PUSH
26828: LD_INT 117
26830: PUSH
26831: LD_INT 118
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: ST_TO_ADDR
26857: GO 27256
26859: LD_INT 18
26861: DOUBLE
26862: EQUAL
26863: IFTRUE 26867
26865: GO 27015
26867: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26868: LD_ADDR_VAR 0 2
26872: PUSH
26873: LD_INT 2
26875: PUSH
26876: LD_INT 4
26878: PUSH
26879: LD_INT 5
26881: PUSH
26882: LD_INT 7
26884: PUSH
26885: LD_INT 11
26887: PUSH
26888: LD_INT 12
26890: PUSH
26891: LD_INT 15
26893: PUSH
26894: LD_INT 16
26896: PUSH
26897: LD_INT 20
26899: PUSH
26900: LD_INT 21
26902: PUSH
26903: LD_INT 22
26905: PUSH
26906: LD_INT 23
26908: PUSH
26909: LD_INT 25
26911: PUSH
26912: LD_INT 26
26914: PUSH
26915: LD_INT 30
26917: PUSH
26918: LD_INT 31
26920: PUSH
26921: LD_INT 32
26923: PUSH
26924: LD_INT 33
26926: PUSH
26927: LD_INT 34
26929: PUSH
26930: LD_INT 35
26932: PUSH
26933: LD_INT 36
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 101
26961: PUSH
26962: LD_INT 102
26964: PUSH
26965: LD_INT 103
26967: PUSH
26968: LD_INT 106
26970: PUSH
26971: LD_INT 108
26973: PUSH
26974: LD_INT 112
26976: PUSH
26977: LD_INT 113
26979: PUSH
26980: LD_INT 114
26982: PUSH
26983: LD_INT 115
26985: PUSH
26986: LD_INT 116
26988: PUSH
26989: LD_INT 117
26991: PUSH
26992: LD_INT 118
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: ST_TO_ADDR
27013: GO 27256
27015: LD_INT 19
27017: DOUBLE
27018: EQUAL
27019: IFTRUE 27023
27021: GO 27255
27023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
27024: LD_ADDR_VAR 0 2
27028: PUSH
27029: LD_INT 1
27031: PUSH
27032: LD_INT 2
27034: PUSH
27035: LD_INT 3
27037: PUSH
27038: LD_INT 4
27040: PUSH
27041: LD_INT 5
27043: PUSH
27044: LD_INT 6
27046: PUSH
27047: LD_INT 7
27049: PUSH
27050: LD_INT 8
27052: PUSH
27053: LD_INT 9
27055: PUSH
27056: LD_INT 10
27058: PUSH
27059: LD_INT 11
27061: PUSH
27062: LD_INT 12
27064: PUSH
27065: LD_INT 13
27067: PUSH
27068: LD_INT 14
27070: PUSH
27071: LD_INT 15
27073: PUSH
27074: LD_INT 16
27076: PUSH
27077: LD_INT 17
27079: PUSH
27080: LD_INT 18
27082: PUSH
27083: LD_INT 19
27085: PUSH
27086: LD_INT 20
27088: PUSH
27089: LD_INT 21
27091: PUSH
27092: LD_INT 22
27094: PUSH
27095: LD_INT 23
27097: PUSH
27098: LD_INT 24
27100: PUSH
27101: LD_INT 25
27103: PUSH
27104: LD_INT 26
27106: PUSH
27107: LD_INT 27
27109: PUSH
27110: LD_INT 28
27112: PUSH
27113: LD_INT 29
27115: PUSH
27116: LD_INT 30
27118: PUSH
27119: LD_INT 31
27121: PUSH
27122: LD_INT 32
27124: PUSH
27125: LD_INT 33
27127: PUSH
27128: LD_INT 34
27130: PUSH
27131: LD_INT 35
27133: PUSH
27134: LD_INT 36
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 101
27177: PUSH
27178: LD_INT 102
27180: PUSH
27181: LD_INT 103
27183: PUSH
27184: LD_INT 104
27186: PUSH
27187: LD_INT 105
27189: PUSH
27190: LD_INT 106
27192: PUSH
27193: LD_INT 107
27195: PUSH
27196: LD_INT 108
27198: PUSH
27199: LD_INT 109
27201: PUSH
27202: LD_INT 110
27204: PUSH
27205: LD_INT 111
27207: PUSH
27208: LD_INT 112
27210: PUSH
27211: LD_INT 113
27213: PUSH
27214: LD_INT 114
27216: PUSH
27217: LD_INT 115
27219: PUSH
27220: LD_INT 116
27222: PUSH
27223: LD_INT 117
27225: PUSH
27226: LD_INT 118
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: ST_TO_ADDR
27253: GO 27256
27255: POP
// end else
27256: GO 27487
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
27258: LD_ADDR_VAR 0 2
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: LD_INT 2
27268: PUSH
27269: LD_INT 3
27271: PUSH
27272: LD_INT 4
27274: PUSH
27275: LD_INT 5
27277: PUSH
27278: LD_INT 6
27280: PUSH
27281: LD_INT 7
27283: PUSH
27284: LD_INT 8
27286: PUSH
27287: LD_INT 9
27289: PUSH
27290: LD_INT 10
27292: PUSH
27293: LD_INT 11
27295: PUSH
27296: LD_INT 12
27298: PUSH
27299: LD_INT 13
27301: PUSH
27302: LD_INT 14
27304: PUSH
27305: LD_INT 15
27307: PUSH
27308: LD_INT 16
27310: PUSH
27311: LD_INT 17
27313: PUSH
27314: LD_INT 18
27316: PUSH
27317: LD_INT 19
27319: PUSH
27320: LD_INT 20
27322: PUSH
27323: LD_INT 21
27325: PUSH
27326: LD_INT 22
27328: PUSH
27329: LD_INT 23
27331: PUSH
27332: LD_INT 24
27334: PUSH
27335: LD_INT 25
27337: PUSH
27338: LD_INT 26
27340: PUSH
27341: LD_INT 27
27343: PUSH
27344: LD_INT 28
27346: PUSH
27347: LD_INT 29
27349: PUSH
27350: LD_INT 30
27352: PUSH
27353: LD_INT 31
27355: PUSH
27356: LD_INT 32
27358: PUSH
27359: LD_INT 33
27361: PUSH
27362: LD_INT 34
27364: PUSH
27365: LD_INT 35
27367: PUSH
27368: LD_INT 36
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 101
27411: PUSH
27412: LD_INT 102
27414: PUSH
27415: LD_INT 103
27417: PUSH
27418: LD_INT 104
27420: PUSH
27421: LD_INT 105
27423: PUSH
27424: LD_INT 106
27426: PUSH
27427: LD_INT 107
27429: PUSH
27430: LD_INT 108
27432: PUSH
27433: LD_INT 109
27435: PUSH
27436: LD_INT 110
27438: PUSH
27439: LD_INT 111
27441: PUSH
27442: LD_INT 112
27444: PUSH
27445: LD_INT 113
27447: PUSH
27448: LD_INT 114
27450: PUSH
27451: LD_INT 115
27453: PUSH
27454: LD_INT 116
27456: PUSH
27457: LD_INT 117
27459: PUSH
27460: LD_INT 118
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: ST_TO_ADDR
// if result then
27487: LD_VAR 0 2
27491: IFFALSE 28277
// begin normal :=  ;
27493: LD_ADDR_VAR 0 5
27497: PUSH
27498: LD_STRING 
27500: ST_TO_ADDR
// hardcore :=  ;
27501: LD_ADDR_VAR 0 6
27505: PUSH
27506: LD_STRING 
27508: ST_TO_ADDR
// active :=  ;
27509: LD_ADDR_VAR 0 7
27513: PUSH
27514: LD_STRING 
27516: ST_TO_ADDR
// for i = 1 to normalCounter do
27517: LD_ADDR_VAR 0 8
27521: PUSH
27522: DOUBLE
27523: LD_INT 1
27525: DEC
27526: ST_TO_ADDR
27527: LD_EXP 52
27531: PUSH
27532: FOR_TO
27533: IFFALSE 27634
// begin tmp := 0 ;
27535: LD_ADDR_VAR 0 3
27539: PUSH
27540: LD_STRING 0
27542: ST_TO_ADDR
// if result [ 1 ] then
27543: LD_VAR 0 2
27547: PUSH
27548: LD_INT 1
27550: ARRAY
27551: IFFALSE 27616
// if result [ 1 ] [ 1 ] = i then
27553: LD_VAR 0 2
27557: PUSH
27558: LD_INT 1
27560: ARRAY
27561: PUSH
27562: LD_INT 1
27564: ARRAY
27565: PUSH
27566: LD_VAR 0 8
27570: EQUAL
27571: IFFALSE 27616
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27573: LD_ADDR_VAR 0 2
27577: PUSH
27578: LD_VAR 0 2
27582: PPUSH
27583: LD_INT 1
27585: PPUSH
27586: LD_VAR 0 2
27590: PUSH
27591: LD_INT 1
27593: ARRAY
27594: PPUSH
27595: LD_INT 1
27597: PPUSH
27598: CALL_OW 3
27602: PPUSH
27603: CALL_OW 1
27607: ST_TO_ADDR
// tmp := 1 ;
27608: LD_ADDR_VAR 0 3
27612: PUSH
27613: LD_STRING 1
27615: ST_TO_ADDR
// end ; normal := normal & tmp ;
27616: LD_ADDR_VAR 0 5
27620: PUSH
27621: LD_VAR 0 5
27625: PUSH
27626: LD_VAR 0 3
27630: STR
27631: ST_TO_ADDR
// end ;
27632: GO 27532
27634: POP
27635: POP
// for i = 1 to hardcoreCounter do
27636: LD_ADDR_VAR 0 8
27640: PUSH
27641: DOUBLE
27642: LD_INT 1
27644: DEC
27645: ST_TO_ADDR
27646: LD_EXP 53
27650: PUSH
27651: FOR_TO
27652: IFFALSE 27757
// begin tmp := 0 ;
27654: LD_ADDR_VAR 0 3
27658: PUSH
27659: LD_STRING 0
27661: ST_TO_ADDR
// if result [ 2 ] then
27662: LD_VAR 0 2
27666: PUSH
27667: LD_INT 2
27669: ARRAY
27670: IFFALSE 27739
// if result [ 2 ] [ 1 ] = 100 + i then
27672: LD_VAR 0 2
27676: PUSH
27677: LD_INT 2
27679: ARRAY
27680: PUSH
27681: LD_INT 1
27683: ARRAY
27684: PUSH
27685: LD_INT 100
27687: PUSH
27688: LD_VAR 0 8
27692: PLUS
27693: EQUAL
27694: IFFALSE 27739
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27696: LD_ADDR_VAR 0 2
27700: PUSH
27701: LD_VAR 0 2
27705: PPUSH
27706: LD_INT 2
27708: PPUSH
27709: LD_VAR 0 2
27713: PUSH
27714: LD_INT 2
27716: ARRAY
27717: PPUSH
27718: LD_INT 1
27720: PPUSH
27721: CALL_OW 3
27725: PPUSH
27726: CALL_OW 1
27730: ST_TO_ADDR
// tmp := 1 ;
27731: LD_ADDR_VAR 0 3
27735: PUSH
27736: LD_STRING 1
27738: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27739: LD_ADDR_VAR 0 6
27743: PUSH
27744: LD_VAR 0 6
27748: PUSH
27749: LD_VAR 0 3
27753: STR
27754: ST_TO_ADDR
// end ;
27755: GO 27651
27757: POP
27758: POP
// if isGameLoad then
27759: LD_VAR 0 1
27763: IFFALSE 28238
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27765: LD_ADDR_VAR 0 4
27769: PUSH
27770: LD_EXP 56
27774: PUSH
27775: LD_EXP 55
27779: PUSH
27780: LD_EXP 57
27784: PUSH
27785: LD_EXP 54
27789: PUSH
27790: LD_EXP 58
27794: PUSH
27795: LD_EXP 59
27799: PUSH
27800: LD_EXP 60
27804: PUSH
27805: LD_EXP 61
27809: PUSH
27810: LD_EXP 62
27814: PUSH
27815: LD_EXP 63
27819: PUSH
27820: LD_EXP 64
27824: PUSH
27825: LD_EXP 65
27829: PUSH
27830: LD_EXP 66
27834: PUSH
27835: LD_EXP 67
27839: PUSH
27840: LD_EXP 75
27844: PUSH
27845: LD_EXP 76
27849: PUSH
27850: LD_EXP 77
27854: PUSH
27855: LD_EXP 78
27859: PUSH
27860: LD_EXP 80
27864: PUSH
27865: LD_EXP 81
27869: PUSH
27870: LD_EXP 82
27874: PUSH
27875: LD_EXP 85
27879: PUSH
27880: LD_EXP 87
27884: PUSH
27885: LD_EXP 88
27889: PUSH
27890: LD_EXP 89
27894: PUSH
27895: LD_EXP 91
27899: PUSH
27900: LD_EXP 92
27904: PUSH
27905: LD_EXP 95
27909: PUSH
27910: LD_EXP 96
27914: PUSH
27915: LD_EXP 97
27919: PUSH
27920: LD_EXP 98
27924: PUSH
27925: LD_EXP 99
27929: PUSH
27930: LD_EXP 100
27934: PUSH
27935: LD_EXP 101
27939: PUSH
27940: LD_EXP 102
27944: PUSH
27945: LD_EXP 103
27949: PUSH
27950: LD_EXP 68
27954: PUSH
27955: LD_EXP 69
27959: PUSH
27960: LD_EXP 72
27964: PUSH
27965: LD_EXP 73
27969: PUSH
27970: LD_EXP 74
27974: PUSH
27975: LD_EXP 70
27979: PUSH
27980: LD_EXP 71
27984: PUSH
27985: LD_EXP 79
27989: PUSH
27990: LD_EXP 83
27994: PUSH
27995: LD_EXP 84
27999: PUSH
28000: LD_EXP 86
28004: PUSH
28005: LD_EXP 90
28009: PUSH
28010: LD_EXP 93
28014: PUSH
28015: LD_EXP 94
28019: PUSH
28020: LD_EXP 104
28024: PUSH
28025: LD_EXP 105
28029: PUSH
28030: LD_EXP 106
28034: PUSH
28035: LD_EXP 107
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: ST_TO_ADDR
// tmp :=  ;
28096: LD_ADDR_VAR 0 3
28100: PUSH
28101: LD_STRING 
28103: ST_TO_ADDR
// for i = 1 to normalCounter do
28104: LD_ADDR_VAR 0 8
28108: PUSH
28109: DOUBLE
28110: LD_INT 1
28112: DEC
28113: ST_TO_ADDR
28114: LD_EXP 52
28118: PUSH
28119: FOR_TO
28120: IFFALSE 28156
// begin if flags [ i ] then
28122: LD_VAR 0 4
28126: PUSH
28127: LD_VAR 0 8
28131: ARRAY
28132: IFFALSE 28154
// tmp := tmp & i & ; ;
28134: LD_ADDR_VAR 0 3
28138: PUSH
28139: LD_VAR 0 3
28143: PUSH
28144: LD_VAR 0 8
28148: STR
28149: PUSH
28150: LD_STRING ;
28152: STR
28153: ST_TO_ADDR
// end ;
28154: GO 28119
28156: POP
28157: POP
// for i = 1 to hardcoreCounter do
28158: LD_ADDR_VAR 0 8
28162: PUSH
28163: DOUBLE
28164: LD_INT 1
28166: DEC
28167: ST_TO_ADDR
28168: LD_EXP 53
28172: PUSH
28173: FOR_TO
28174: IFFALSE 28220
// begin if flags [ normalCounter + i ] then
28176: LD_VAR 0 4
28180: PUSH
28181: LD_EXP 52
28185: PUSH
28186: LD_VAR 0 8
28190: PLUS
28191: ARRAY
28192: IFFALSE 28218
// tmp := tmp & ( 100 + i ) & ; ;
28194: LD_ADDR_VAR 0 3
28198: PUSH
28199: LD_VAR 0 3
28203: PUSH
28204: LD_INT 100
28206: PUSH
28207: LD_VAR 0 8
28211: PLUS
28212: STR
28213: PUSH
28214: LD_STRING ;
28216: STR
28217: ST_TO_ADDR
// end ;
28218: GO 28173
28220: POP
28221: POP
// if tmp then
28222: LD_VAR 0 3
28226: IFFALSE 28238
// active := tmp ;
28228: LD_ADDR_VAR 0 7
28232: PUSH
28233: LD_VAR 0 3
28237: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
28238: LD_STRING getStreamItemsFromMission("
28240: PUSH
28241: LD_VAR 0 5
28245: STR
28246: PUSH
28247: LD_STRING ","
28249: STR
28250: PUSH
28251: LD_VAR 0 6
28255: STR
28256: PUSH
28257: LD_STRING ","
28259: STR
28260: PUSH
28261: LD_VAR 0 7
28265: STR
28266: PUSH
28267: LD_STRING ")
28269: STR
28270: PPUSH
28271: CALL_OW 559
// end else
28275: GO 28284
// ToLua ( getStreamItemsFromMission("","","") ) ;
28277: LD_STRING getStreamItemsFromMission("","","")
28279: PPUSH
28280: CALL_OW 559
// end ;
28284: LD_VAR 0 2
28288: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
28289: LD_EXP 51
28293: IFFALSE 28301
28295: PUSH
28296: LD_EXP 56
28300: AND
28301: IFFALSE 28425
28303: GO 28305
28305: DISABLE
28306: LD_INT 0
28308: PPUSH
28309: PPUSH
// begin enable ;
28310: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
28311: LD_ADDR_VAR 0 2
28315: PUSH
28316: LD_INT 22
28318: PUSH
28319: LD_OWVAR 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 2
28330: PUSH
28331: LD_INT 34
28333: PUSH
28334: LD_INT 7
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 34
28343: PUSH
28344: LD_INT 45
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 34
28353: PUSH
28354: LD_INT 28
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 34
28363: PUSH
28364: LD_INT 47
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PPUSH
28382: CALL_OW 69
28386: ST_TO_ADDR
// if not tmp then
28387: LD_VAR 0 2
28391: NOT
28392: IFFALSE 28396
// exit ;
28394: GO 28425
// for i in tmp do
28396: LD_ADDR_VAR 0 1
28400: PUSH
28401: LD_VAR 0 2
28405: PUSH
28406: FOR_IN
28407: IFFALSE 28423
// begin SetLives ( i , 0 ) ;
28409: LD_VAR 0 1
28413: PPUSH
28414: LD_INT 0
28416: PPUSH
28417: CALL_OW 234
// end ;
28421: GO 28406
28423: POP
28424: POP
// end ;
28425: PPOPN 2
28427: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
28428: LD_EXP 51
28432: IFFALSE 28440
28434: PUSH
28435: LD_EXP 57
28439: AND
28440: IFFALSE 28524
28442: GO 28444
28444: DISABLE
28445: LD_INT 0
28447: PPUSH
28448: PPUSH
// begin enable ;
28449: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
28450: LD_ADDR_VAR 0 2
28454: PUSH
28455: LD_INT 22
28457: PUSH
28458: LD_OWVAR 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 32
28469: PUSH
28470: LD_INT 3
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PPUSH
28481: CALL_OW 69
28485: ST_TO_ADDR
// if not tmp then
28486: LD_VAR 0 2
28490: NOT
28491: IFFALSE 28495
// exit ;
28493: GO 28524
// for i in tmp do
28495: LD_ADDR_VAR 0 1
28499: PUSH
28500: LD_VAR 0 2
28504: PUSH
28505: FOR_IN
28506: IFFALSE 28522
// begin SetLives ( i , 0 ) ;
28508: LD_VAR 0 1
28512: PPUSH
28513: LD_INT 0
28515: PPUSH
28516: CALL_OW 234
// end ;
28520: GO 28505
28522: POP
28523: POP
// end ;
28524: PPOPN 2
28526: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28527: LD_EXP 51
28531: IFFALSE 28539
28533: PUSH
28534: LD_EXP 54
28538: AND
28539: IFFALSE 28632
28541: GO 28543
28543: DISABLE
28544: LD_INT 0
28546: PPUSH
// begin enable ;
28547: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28548: LD_ADDR_VAR 0 1
28552: PUSH
28553: LD_INT 22
28555: PUSH
28556: LD_OWVAR 2
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 2
28567: PUSH
28568: LD_INT 25
28570: PUSH
28571: LD_INT 5
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 25
28580: PUSH
28581: LD_INT 9
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 25
28590: PUSH
28591: LD_INT 8
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PPUSH
28608: CALL_OW 69
28612: PUSH
28613: FOR_IN
28614: IFFALSE 28630
// begin SetClass ( i , 1 ) ;
28616: LD_VAR 0 1
28620: PPUSH
28621: LD_INT 1
28623: PPUSH
28624: CALL_OW 336
// end ;
28628: GO 28613
28630: POP
28631: POP
// end ;
28632: PPOPN 1
28634: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28635: LD_EXP 51
28639: IFFALSE 28647
28641: PUSH
28642: LD_EXP 55
28646: AND
28647: IFFALSE 28659
28649: PUSH
28650: LD_OWVAR 65
28654: PUSH
28655: LD_INT 7
28657: LESS
28658: AND
28659: IFFALSE 28673
28661: GO 28663
28663: DISABLE
// begin enable ;
28664: ENABLE
// game_speed := 7 ;
28665: LD_ADDR_OWVAR 65
28669: PUSH
28670: LD_INT 7
28672: ST_TO_ADDR
// end ;
28673: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28674: LD_EXP 51
28678: IFFALSE 28686
28680: PUSH
28681: LD_EXP 58
28685: AND
28686: IFFALSE 28888
28688: GO 28690
28690: DISABLE
28691: LD_INT 0
28693: PPUSH
28694: PPUSH
28695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28696: LD_ADDR_VAR 0 3
28700: PUSH
28701: LD_INT 81
28703: PUSH
28704: LD_OWVAR 2
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 21
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PPUSH
28727: CALL_OW 69
28731: ST_TO_ADDR
// if not tmp then
28732: LD_VAR 0 3
28736: NOT
28737: IFFALSE 28741
// exit ;
28739: GO 28888
// if tmp > 5 then
28741: LD_VAR 0 3
28745: PUSH
28746: LD_INT 5
28748: GREATER
28749: IFFALSE 28761
// k := 5 else
28751: LD_ADDR_VAR 0 2
28755: PUSH
28756: LD_INT 5
28758: ST_TO_ADDR
28759: GO 28771
// k := tmp ;
28761: LD_ADDR_VAR 0 2
28765: PUSH
28766: LD_VAR 0 3
28770: ST_TO_ADDR
// for i := 1 to k do
28771: LD_ADDR_VAR 0 1
28775: PUSH
28776: DOUBLE
28777: LD_INT 1
28779: DEC
28780: ST_TO_ADDR
28781: LD_VAR 0 2
28785: PUSH
28786: FOR_TO
28787: IFFALSE 28886
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28789: LD_VAR 0 3
28793: PUSH
28794: LD_VAR 0 1
28798: ARRAY
28799: PPUSH
28800: LD_VAR 0 1
28804: PUSH
28805: LD_INT 4
28807: MOD
28808: PUSH
28809: LD_INT 1
28811: PLUS
28812: PPUSH
28813: CALL_OW 259
28817: PUSH
28818: LD_INT 10
28820: LESS
28821: IFFALSE 28884
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28823: LD_VAR 0 3
28827: PUSH
28828: LD_VAR 0 1
28832: ARRAY
28833: PPUSH
28834: LD_VAR 0 1
28838: PUSH
28839: LD_INT 4
28841: MOD
28842: PUSH
28843: LD_INT 1
28845: PLUS
28846: PPUSH
28847: LD_VAR 0 3
28851: PUSH
28852: LD_VAR 0 1
28856: ARRAY
28857: PPUSH
28858: LD_VAR 0 1
28862: PUSH
28863: LD_INT 4
28865: MOD
28866: PUSH
28867: LD_INT 1
28869: PLUS
28870: PPUSH
28871: CALL_OW 259
28875: PUSH
28876: LD_INT 1
28878: PLUS
28879: PPUSH
28880: CALL_OW 237
28884: GO 28786
28886: POP
28887: POP
// end ;
28888: PPOPN 3
28890: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28891: LD_EXP 51
28895: IFFALSE 28903
28897: PUSH
28898: LD_EXP 59
28902: AND
28903: IFFALSE 28923
28905: GO 28907
28907: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28908: LD_INT 4
28910: PPUSH
28911: LD_OWVAR 2
28915: PPUSH
28916: LD_INT 0
28918: PPUSH
28919: CALL_OW 324
28923: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28924: LD_EXP 51
28928: IFFALSE 28936
28930: PUSH
28931: LD_EXP 88
28935: AND
28936: IFFALSE 28956
28938: GO 28940
28940: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28941: LD_INT 19
28943: PPUSH
28944: LD_OWVAR 2
28948: PPUSH
28949: LD_INT 0
28951: PPUSH
28952: CALL_OW 324
28956: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28957: LD_EXP 51
28961: IFFALSE 28969
28963: PUSH
28964: LD_EXP 60
28968: AND
28969: IFFALSE 29071
28971: GO 28973
28973: DISABLE
28974: LD_INT 0
28976: PPUSH
28977: PPUSH
// begin enable ;
28978: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28979: LD_ADDR_VAR 0 2
28983: PUSH
28984: LD_INT 22
28986: PUSH
28987: LD_OWVAR 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: LD_INT 34
29001: PUSH
29002: LD_INT 11
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 34
29011: PUSH
29012: LD_INT 30
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: LIST
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PPUSH
29028: CALL_OW 69
29032: ST_TO_ADDR
// if not tmp then
29033: LD_VAR 0 2
29037: NOT
29038: IFFALSE 29042
// exit ;
29040: GO 29071
// for i in tmp do
29042: LD_ADDR_VAR 0 1
29046: PUSH
29047: LD_VAR 0 2
29051: PUSH
29052: FOR_IN
29053: IFFALSE 29069
// begin SetLives ( i , 0 ) ;
29055: LD_VAR 0 1
29059: PPUSH
29060: LD_INT 0
29062: PPUSH
29063: CALL_OW 234
// end ;
29067: GO 29052
29069: POP
29070: POP
// end ;
29071: PPOPN 2
29073: END
// every 0 0$1 trigger StreamModeActive and sBunker do
29074: LD_EXP 51
29078: IFFALSE 29086
29080: PUSH
29081: LD_EXP 61
29085: AND
29086: IFFALSE 29106
29088: GO 29090
29090: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
29091: LD_INT 32
29093: PPUSH
29094: LD_OWVAR 2
29098: PPUSH
29099: LD_INT 0
29101: PPUSH
29102: CALL_OW 324
29106: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
29107: LD_EXP 51
29111: IFFALSE 29119
29113: PUSH
29114: LD_EXP 62
29118: AND
29119: IFFALSE 29302
29121: GO 29123
29123: DISABLE
29124: LD_INT 0
29126: PPUSH
29127: PPUSH
29128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
29129: LD_ADDR_VAR 0 2
29133: PUSH
29134: LD_INT 22
29136: PUSH
29137: LD_OWVAR 2
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 33
29148: PUSH
29149: LD_INT 3
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PPUSH
29160: CALL_OW 69
29164: ST_TO_ADDR
// if not tmp then
29165: LD_VAR 0 2
29169: NOT
29170: IFFALSE 29174
// exit ;
29172: GO 29302
// side := 0 ;
29174: LD_ADDR_VAR 0 3
29178: PUSH
29179: LD_INT 0
29181: ST_TO_ADDR
// for i := 1 to 8 do
29182: LD_ADDR_VAR 0 1
29186: PUSH
29187: DOUBLE
29188: LD_INT 1
29190: DEC
29191: ST_TO_ADDR
29192: LD_INT 8
29194: PUSH
29195: FOR_TO
29196: IFFALSE 29246
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
29198: LD_OWVAR 2
29202: PUSH
29203: LD_VAR 0 1
29207: NONEQUAL
29208: IFFALSE 29230
29210: PUSH
29211: LD_OWVAR 2
29215: PPUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 81
29225: PUSH
29226: LD_INT 2
29228: EQUAL
29229: AND
29230: IFFALSE 29244
// begin side := i ;
29232: LD_ADDR_VAR 0 3
29236: PUSH
29237: LD_VAR 0 1
29241: ST_TO_ADDR
// break ;
29242: GO 29246
// end ;
29244: GO 29195
29246: POP
29247: POP
// if not side then
29248: LD_VAR 0 3
29252: NOT
29253: IFFALSE 29257
// exit ;
29255: GO 29302
// for i := 1 to tmp do
29257: LD_ADDR_VAR 0 1
29261: PUSH
29262: DOUBLE
29263: LD_INT 1
29265: DEC
29266: ST_TO_ADDR
29267: LD_VAR 0 2
29271: PUSH
29272: FOR_TO
29273: IFFALSE 29300
// if Prob ( 60 ) then
29275: LD_INT 60
29277: PPUSH
29278: CALL_OW 13
29282: IFFALSE 29298
// SetSide ( i , side ) ;
29284: LD_VAR 0 1
29288: PPUSH
29289: LD_VAR 0 3
29293: PPUSH
29294: CALL_OW 235
29298: GO 29272
29300: POP
29301: POP
// end ;
29302: PPOPN 3
29304: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
29305: LD_EXP 51
29309: IFFALSE 29317
29311: PUSH
29312: LD_EXP 64
29316: AND
29317: IFFALSE 29436
29319: GO 29321
29321: DISABLE
29322: LD_INT 0
29324: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
29325: LD_ADDR_VAR 0 1
29329: PUSH
29330: LD_INT 22
29332: PUSH
29333: LD_OWVAR 2
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 21
29344: PUSH
29345: LD_INT 1
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: LD_INT 23
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: PPUSH
29374: CALL_OW 69
29378: PUSH
29379: FOR_IN
29380: IFFALSE 29434
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
29382: LD_VAR 0 1
29386: PPUSH
29387: CALL_OW 257
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: LD_INT 2
29397: PUSH
29398: LD_INT 3
29400: PUSH
29401: LD_INT 4
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: IN
29410: IFFALSE 29432
// SetClass ( un , rand ( 1 , 4 ) ) ;
29412: LD_VAR 0 1
29416: PPUSH
29417: LD_INT 1
29419: PPUSH
29420: LD_INT 4
29422: PPUSH
29423: CALL_OW 12
29427: PPUSH
29428: CALL_OW 336
29432: GO 29379
29434: POP
29435: POP
// end ;
29436: PPOPN 1
29438: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
29439: LD_EXP 51
29443: IFFALSE 29451
29445: PUSH
29446: LD_EXP 63
29450: AND
29451: IFFALSE 29530
29453: GO 29455
29455: DISABLE
29456: LD_INT 0
29458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29459: LD_ADDR_VAR 0 1
29463: PUSH
29464: LD_INT 22
29466: PUSH
29467: LD_OWVAR 2
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 21
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PPUSH
29490: CALL_OW 69
29494: ST_TO_ADDR
// if not tmp then
29495: LD_VAR 0 1
29499: NOT
29500: IFFALSE 29504
// exit ;
29502: GO 29530
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29504: LD_VAR 0 1
29508: PUSH
29509: LD_INT 1
29511: PPUSH
29512: LD_VAR 0 1
29516: PPUSH
29517: CALL_OW 12
29521: ARRAY
29522: PPUSH
29523: LD_INT 100
29525: PPUSH
29526: CALL_OW 234
// end ;
29530: PPOPN 1
29532: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29533: LD_EXP 51
29537: IFFALSE 29545
29539: PUSH
29540: LD_EXP 65
29544: AND
29545: IFFALSE 29643
29547: GO 29549
29549: DISABLE
29550: LD_INT 0
29552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_INT 22
29560: PUSH
29561: LD_OWVAR 2
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 21
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PPUSH
29584: CALL_OW 69
29588: ST_TO_ADDR
// if not tmp then
29589: LD_VAR 0 1
29593: NOT
29594: IFFALSE 29598
// exit ;
29596: GO 29643
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29598: LD_VAR 0 1
29602: PUSH
29603: LD_INT 1
29605: PPUSH
29606: LD_VAR 0 1
29610: PPUSH
29611: CALL_OW 12
29615: ARRAY
29616: PPUSH
29617: LD_INT 1
29619: PPUSH
29620: LD_INT 4
29622: PPUSH
29623: CALL_OW 12
29627: PPUSH
29628: LD_INT 3000
29630: PPUSH
29631: LD_INT 9000
29633: PPUSH
29634: CALL_OW 12
29638: PPUSH
29639: CALL_OW 492
// end ;
29643: PPOPN 1
29645: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29646: LD_EXP 51
29650: IFFALSE 29658
29652: PUSH
29653: LD_EXP 66
29657: AND
29658: IFFALSE 29678
29660: GO 29662
29662: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29663: LD_INT 1
29665: PPUSH
29666: LD_OWVAR 2
29670: PPUSH
29671: LD_INT 0
29673: PPUSH
29674: CALL_OW 324
29678: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29679: LD_EXP 51
29683: IFFALSE 29691
29685: PUSH
29686: LD_EXP 67
29690: AND
29691: IFFALSE 29774
29693: GO 29695
29695: DISABLE
29696: LD_INT 0
29698: PPUSH
29699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29700: LD_ADDR_VAR 0 2
29704: PUSH
29705: LD_INT 22
29707: PUSH
29708: LD_OWVAR 2
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 21
29719: PUSH
29720: LD_INT 3
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PPUSH
29731: CALL_OW 69
29735: ST_TO_ADDR
// if not tmp then
29736: LD_VAR 0 2
29740: NOT
29741: IFFALSE 29745
// exit ;
29743: GO 29774
// for i in tmp do
29745: LD_ADDR_VAR 0 1
29749: PUSH
29750: LD_VAR 0 2
29754: PUSH
29755: FOR_IN
29756: IFFALSE 29772
// SetBLevel ( i , 10 ) ;
29758: LD_VAR 0 1
29762: PPUSH
29763: LD_INT 10
29765: PPUSH
29766: CALL_OW 241
29770: GO 29755
29772: POP
29773: POP
// end ;
29774: PPOPN 2
29776: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29777: LD_EXP 51
29781: IFFALSE 29789
29783: PUSH
29784: LD_EXP 68
29788: AND
29789: IFFALSE 29900
29791: GO 29793
29793: DISABLE
29794: LD_INT 0
29796: PPUSH
29797: PPUSH
29798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29799: LD_ADDR_VAR 0 3
29803: PUSH
29804: LD_INT 22
29806: PUSH
29807: LD_OWVAR 2
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 25
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PPUSH
29830: CALL_OW 69
29834: ST_TO_ADDR
// if not tmp then
29835: LD_VAR 0 3
29839: NOT
29840: IFFALSE 29844
// exit ;
29842: GO 29900
// un := tmp [ rand ( 1 , tmp ) ] ;
29844: LD_ADDR_VAR 0 2
29848: PUSH
29849: LD_VAR 0 3
29853: PUSH
29854: LD_INT 1
29856: PPUSH
29857: LD_VAR 0 3
29861: PPUSH
29862: CALL_OW 12
29866: ARRAY
29867: ST_TO_ADDR
// if Crawls ( un ) then
29868: LD_VAR 0 2
29872: PPUSH
29873: CALL_OW 318
29877: IFFALSE 29888
// ComWalk ( un ) ;
29879: LD_VAR 0 2
29883: PPUSH
29884: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29888: LD_VAR 0 2
29892: PPUSH
29893: LD_INT 5
29895: PPUSH
29896: CALL_OW 336
// end ;
29900: PPOPN 3
29902: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29903: LD_EXP 51
29907: IFFALSE 29915
29909: PUSH
29910: LD_EXP 69
29914: AND
29915: IFFALSE 29927
29917: PUSH
29918: LD_OWVAR 67
29922: PUSH
29923: LD_INT 4
29925: LESS
29926: AND
29927: IFFALSE 29946
29929: GO 29931
29931: DISABLE
// begin Difficulty := Difficulty + 1 ;
29932: LD_ADDR_OWVAR 67
29936: PUSH
29937: LD_OWVAR 67
29941: PUSH
29942: LD_INT 1
29944: PLUS
29945: ST_TO_ADDR
// end ;
29946: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29947: LD_EXP 51
29951: IFFALSE 29959
29953: PUSH
29954: LD_EXP 70
29958: AND
29959: IFFALSE 30062
29961: GO 29963
29963: DISABLE
29964: LD_INT 0
29966: PPUSH
// begin for i := 1 to 5 do
29967: LD_ADDR_VAR 0 1
29971: PUSH
29972: DOUBLE
29973: LD_INT 1
29975: DEC
29976: ST_TO_ADDR
29977: LD_INT 5
29979: PUSH
29980: FOR_TO
29981: IFFALSE 30060
// begin uc_nation := nation_nature ;
29983: LD_ADDR_OWVAR 21
29987: PUSH
29988: LD_INT 0
29990: ST_TO_ADDR
// uc_side := 0 ;
29991: LD_ADDR_OWVAR 20
29995: PUSH
29996: LD_INT 0
29998: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29999: LD_ADDR_OWVAR 29
30003: PUSH
30004: LD_INT 12
30006: PUSH
30007: LD_INT 12
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: ST_TO_ADDR
// hc_agressivity := 20 ;
30014: LD_ADDR_OWVAR 35
30018: PUSH
30019: LD_INT 20
30021: ST_TO_ADDR
// hc_class := class_tiger ;
30022: LD_ADDR_OWVAR 28
30026: PUSH
30027: LD_INT 14
30029: ST_TO_ADDR
// hc_gallery :=  ;
30030: LD_ADDR_OWVAR 33
30034: PUSH
30035: LD_STRING 
30037: ST_TO_ADDR
// hc_name :=  ;
30038: LD_ADDR_OWVAR 26
30042: PUSH
30043: LD_STRING 
30045: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
30046: CALL_OW 44
30050: PPUSH
30051: LD_INT 0
30053: PPUSH
30054: CALL_OW 51
// end ;
30058: GO 29980
30060: POP
30061: POP
// end ;
30062: PPOPN 1
30064: END
// every 0 0$1 trigger StreamModeActive and sBomb do
30065: LD_EXP 51
30069: IFFALSE 30077
30071: PUSH
30072: LD_EXP 71
30076: AND
30077: IFFALSE 30086
30079: GO 30081
30081: DISABLE
// StreamSibBomb ;
30082: CALL 30087 0 0
30086: END
// export function StreamSibBomb ; var i , x , y ; begin
30087: LD_INT 0
30089: PPUSH
30090: PPUSH
30091: PPUSH
30092: PPUSH
// result := false ;
30093: LD_ADDR_VAR 0 1
30097: PUSH
30098: LD_INT 0
30100: ST_TO_ADDR
// for i := 1 to 16 do
30101: LD_ADDR_VAR 0 2
30105: PUSH
30106: DOUBLE
30107: LD_INT 1
30109: DEC
30110: ST_TO_ADDR
30111: LD_INT 16
30113: PUSH
30114: FOR_TO
30115: IFFALSE 30314
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30117: LD_ADDR_VAR 0 3
30121: PUSH
30122: LD_INT 10
30124: PUSH
30125: LD_INT 20
30127: PUSH
30128: LD_INT 30
30130: PUSH
30131: LD_INT 40
30133: PUSH
30134: LD_INT 50
30136: PUSH
30137: LD_INT 60
30139: PUSH
30140: LD_INT 70
30142: PUSH
30143: LD_INT 80
30145: PUSH
30146: LD_INT 90
30148: PUSH
30149: LD_INT 100
30151: PUSH
30152: LD_INT 110
30154: PUSH
30155: LD_INT 120
30157: PUSH
30158: LD_INT 130
30160: PUSH
30161: LD_INT 140
30163: PUSH
30164: LD_INT 150
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 1
30186: PPUSH
30187: LD_INT 15
30189: PPUSH
30190: CALL_OW 12
30194: ARRAY
30195: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
30196: LD_ADDR_VAR 0 4
30200: PUSH
30201: LD_INT 10
30203: PUSH
30204: LD_INT 20
30206: PUSH
30207: LD_INT 30
30209: PUSH
30210: LD_INT 40
30212: PUSH
30213: LD_INT 50
30215: PUSH
30216: LD_INT 60
30218: PUSH
30219: LD_INT 70
30221: PUSH
30222: LD_INT 80
30224: PUSH
30225: LD_INT 90
30227: PUSH
30228: LD_INT 100
30230: PUSH
30231: LD_INT 110
30233: PUSH
30234: LD_INT 120
30236: PUSH
30237: LD_INT 130
30239: PUSH
30240: LD_INT 140
30242: PUSH
30243: LD_INT 150
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: PPUSH
30266: LD_INT 15
30268: PPUSH
30269: CALL_OW 12
30273: ARRAY
30274: ST_TO_ADDR
// if ValidHex ( x , y ) then
30275: LD_VAR 0 3
30279: PPUSH
30280: LD_VAR 0 4
30284: PPUSH
30285: CALL_OW 488
30289: IFFALSE 30312
// begin result := [ x , y ] ;
30291: LD_ADDR_VAR 0 1
30295: PUSH
30296: LD_VAR 0 3
30300: PUSH
30301: LD_VAR 0 4
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: ST_TO_ADDR
// break ;
30310: GO 30314
// end ; end ;
30312: GO 30114
30314: POP
30315: POP
// if result then
30316: LD_VAR 0 1
30320: IFFALSE 30380
// begin ToLua ( playSibBomb() ) ;
30322: LD_STRING playSibBomb()
30324: PPUSH
30325: CALL_OW 559
// wait ( 0 0$14 ) ;
30329: LD_INT 490
30331: PPUSH
30332: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
30336: LD_VAR 0 1
30340: PUSH
30341: LD_INT 1
30343: ARRAY
30344: PPUSH
30345: LD_VAR 0 1
30349: PUSH
30350: LD_INT 2
30352: ARRAY
30353: PPUSH
30354: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
30358: LD_VAR 0 1
30362: PUSH
30363: LD_INT 1
30365: ARRAY
30366: PPUSH
30367: LD_VAR 0 1
30371: PUSH
30372: LD_INT 2
30374: ARRAY
30375: PPUSH
30376: CALL_OW 429
// end ; end ;
30380: LD_VAR 0 1
30384: RET
// every 0 0$1 trigger StreamModeActive and sReset do
30385: LD_EXP 51
30389: IFFALSE 30397
30391: PUSH
30392: LD_EXP 73
30396: AND
30397: IFFALSE 30409
30399: GO 30401
30401: DISABLE
// YouLost (  ) ;
30402: LD_STRING 
30404: PPUSH
30405: CALL_OW 104
30409: END
// every 0 0$1 trigger StreamModeActive and sFog do
30410: LD_EXP 51
30414: IFFALSE 30422
30416: PUSH
30417: LD_EXP 72
30421: AND
30422: IFFALSE 30436
30424: GO 30426
30426: DISABLE
// FogOff ( your_side ) ;
30427: LD_OWVAR 2
30431: PPUSH
30432: CALL_OW 344
30436: END
// every 0 0$1 trigger StreamModeActive and sSun do
30437: LD_EXP 51
30441: IFFALSE 30449
30443: PUSH
30444: LD_EXP 74
30448: AND
30449: IFFALSE 30477
30451: GO 30453
30453: DISABLE
// begin solar_recharge_percent := 0 ;
30454: LD_ADDR_OWVAR 79
30458: PUSH
30459: LD_INT 0
30461: ST_TO_ADDR
// wait ( 5 5$00 ) ;
30462: LD_INT 10500
30464: PPUSH
30465: CALL_OW 67
// solar_recharge_percent := 100 ;
30469: LD_ADDR_OWVAR 79
30473: PUSH
30474: LD_INT 100
30476: ST_TO_ADDR
// end ;
30477: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
30478: LD_EXP 51
30482: IFFALSE 30490
30484: PUSH
30485: LD_EXP 75
30489: AND
30490: IFFALSE 30729
30492: GO 30494
30494: DISABLE
30495: LD_INT 0
30497: PPUSH
30498: PPUSH
30499: PPUSH
// begin tmp := [ ] ;
30500: LD_ADDR_VAR 0 3
30504: PUSH
30505: EMPTY
30506: ST_TO_ADDR
// for i := 1 to 6 do
30507: LD_ADDR_VAR 0 1
30511: PUSH
30512: DOUBLE
30513: LD_INT 1
30515: DEC
30516: ST_TO_ADDR
30517: LD_INT 6
30519: PUSH
30520: FOR_TO
30521: IFFALSE 30626
// begin uc_nation := nation_nature ;
30523: LD_ADDR_OWVAR 21
30527: PUSH
30528: LD_INT 0
30530: ST_TO_ADDR
// uc_side := 0 ;
30531: LD_ADDR_OWVAR 20
30535: PUSH
30536: LD_INT 0
30538: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30539: LD_ADDR_OWVAR 29
30543: PUSH
30544: LD_INT 12
30546: PUSH
30547: LD_INT 12
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: ST_TO_ADDR
// hc_agressivity := 20 ;
30554: LD_ADDR_OWVAR 35
30558: PUSH
30559: LD_INT 20
30561: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30562: LD_ADDR_OWVAR 28
30566: PUSH
30567: LD_INT 17
30569: ST_TO_ADDR
// hc_gallery :=  ;
30570: LD_ADDR_OWVAR 33
30574: PUSH
30575: LD_STRING 
30577: ST_TO_ADDR
// hc_name :=  ;
30578: LD_ADDR_OWVAR 26
30582: PUSH
30583: LD_STRING 
30585: ST_TO_ADDR
// un := CreateHuman ;
30586: LD_ADDR_VAR 0 2
30590: PUSH
30591: CALL_OW 44
30595: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30596: LD_VAR 0 2
30600: PPUSH
30601: LD_INT 1
30603: PPUSH
30604: CALL_OW 51
// tmp := tmp ^ un ;
30608: LD_ADDR_VAR 0 3
30612: PUSH
30613: LD_VAR 0 3
30617: PUSH
30618: LD_VAR 0 2
30622: ADD
30623: ST_TO_ADDR
// end ;
30624: GO 30520
30626: POP
30627: POP
// repeat wait ( 0 0$1 ) ;
30628: LD_INT 35
30630: PPUSH
30631: CALL_OW 67
// for un in tmp do
30635: LD_ADDR_VAR 0 2
30639: PUSH
30640: LD_VAR 0 3
30644: PUSH
30645: FOR_IN
30646: IFFALSE 30720
// begin if IsDead ( un ) then
30648: LD_VAR 0 2
30652: PPUSH
30653: CALL_OW 301
30657: IFFALSE 30677
// begin tmp := tmp diff un ;
30659: LD_ADDR_VAR 0 3
30663: PUSH
30664: LD_VAR 0 3
30668: PUSH
30669: LD_VAR 0 2
30673: DIFF
30674: ST_TO_ADDR
// continue ;
30675: GO 30645
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30677: LD_VAR 0 2
30681: PPUSH
30682: LD_INT 3
30684: PUSH
30685: LD_INT 22
30687: PUSH
30688: LD_INT 0
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PPUSH
30699: CALL_OW 69
30703: PPUSH
30704: LD_VAR 0 2
30708: PPUSH
30709: CALL_OW 74
30713: PPUSH
30714: CALL_OW 115
// end ;
30718: GO 30645
30720: POP
30721: POP
// until not tmp ;
30722: LD_VAR 0 3
30726: NOT
30727: IFFALSE 30628
// end ;
30729: PPOPN 3
30731: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30732: LD_EXP 51
30736: IFFALSE 30744
30738: PUSH
30739: LD_EXP 76
30743: AND
30744: IFFALSE 30798
30746: GO 30748
30748: DISABLE
// begin ToLua ( displayTroll(); ) ;
30749: LD_STRING displayTroll();
30751: PPUSH
30752: CALL_OW 559
// wait ( 3 3$00 ) ;
30756: LD_INT 6300
30758: PPUSH
30759: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30763: LD_STRING hideTroll();
30765: PPUSH
30766: CALL_OW 559
// wait ( 1 1$00 ) ;
30770: LD_INT 2100
30772: PPUSH
30773: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30777: LD_STRING displayTroll();
30779: PPUSH
30780: CALL_OW 559
// wait ( 1 1$00 ) ;
30784: LD_INT 2100
30786: PPUSH
30787: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30791: LD_STRING hideTroll();
30793: PPUSH
30794: CALL_OW 559
// end ;
30798: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30799: LD_EXP 51
30803: IFFALSE 30811
30805: PUSH
30806: LD_EXP 77
30810: AND
30811: IFFALSE 30874
30813: GO 30815
30815: DISABLE
30816: LD_INT 0
30818: PPUSH
// begin p := 0 ;
30819: LD_ADDR_VAR 0 1
30823: PUSH
30824: LD_INT 0
30826: ST_TO_ADDR
// repeat game_speed := 1 ;
30827: LD_ADDR_OWVAR 65
30831: PUSH
30832: LD_INT 1
30834: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30835: LD_INT 35
30837: PPUSH
30838: CALL_OW 67
// p := p + 1 ;
30842: LD_ADDR_VAR 0 1
30846: PUSH
30847: LD_VAR 0 1
30851: PUSH
30852: LD_INT 1
30854: PLUS
30855: ST_TO_ADDR
// until p >= 60 ;
30856: LD_VAR 0 1
30860: PUSH
30861: LD_INT 60
30863: GREATEREQUAL
30864: IFFALSE 30827
// game_speed := 4 ;
30866: LD_ADDR_OWVAR 65
30870: PUSH
30871: LD_INT 4
30873: ST_TO_ADDR
// end ;
30874: PPOPN 1
30876: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30877: LD_EXP 51
30881: IFFALSE 30889
30883: PUSH
30884: LD_EXP 78
30888: AND
30889: IFFALSE 31035
30891: GO 30893
30893: DISABLE
30894: LD_INT 0
30896: PPUSH
30897: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30898: LD_ADDR_VAR 0 1
30902: PUSH
30903: LD_INT 22
30905: PUSH
30906: LD_OWVAR 2
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: LD_INT 30
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 30
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PPUSH
30947: CALL_OW 69
30951: ST_TO_ADDR
// if not depot then
30952: LD_VAR 0 1
30956: NOT
30957: IFFALSE 30961
// exit ;
30959: GO 31035
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30961: LD_ADDR_VAR 0 2
30965: PUSH
30966: LD_VAR 0 1
30970: PUSH
30971: LD_INT 1
30973: PPUSH
30974: LD_VAR 0 1
30978: PPUSH
30979: CALL_OW 12
30983: ARRAY
30984: PPUSH
30985: CALL_OW 274
30989: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30990: LD_VAR 0 2
30994: PPUSH
30995: LD_INT 1
30997: PPUSH
30998: LD_INT 0
31000: PPUSH
31001: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
31005: LD_VAR 0 2
31009: PPUSH
31010: LD_INT 2
31012: PPUSH
31013: LD_INT 0
31015: PPUSH
31016: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
31020: LD_VAR 0 2
31024: PPUSH
31025: LD_INT 3
31027: PPUSH
31028: LD_INT 0
31030: PPUSH
31031: CALL_OW 277
// end ;
31035: PPOPN 2
31037: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
31038: LD_EXP 51
31042: IFFALSE 31050
31044: PUSH
31045: LD_EXP 79
31049: AND
31050: IFFALSE 31147
31052: GO 31054
31054: DISABLE
31055: LD_INT 0
31057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31058: LD_ADDR_VAR 0 1
31062: PUSH
31063: LD_INT 22
31065: PUSH
31066: LD_OWVAR 2
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 21
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 3
31087: PUSH
31088: LD_INT 23
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: PPUSH
31107: CALL_OW 69
31111: ST_TO_ADDR
// if not tmp then
31112: LD_VAR 0 1
31116: NOT
31117: IFFALSE 31121
// exit ;
31119: GO 31147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
31121: LD_VAR 0 1
31125: PUSH
31126: LD_INT 1
31128: PPUSH
31129: LD_VAR 0 1
31133: PPUSH
31134: CALL_OW 12
31138: ARRAY
31139: PPUSH
31140: LD_INT 200
31142: PPUSH
31143: CALL_OW 234
// end ;
31147: PPOPN 1
31149: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
31150: LD_EXP 51
31154: IFFALSE 31162
31156: PUSH
31157: LD_EXP 80
31161: AND
31162: IFFALSE 31241
31164: GO 31166
31166: DISABLE
31167: LD_INT 0
31169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
31170: LD_ADDR_VAR 0 1
31174: PUSH
31175: LD_INT 22
31177: PUSH
31178: LD_OWVAR 2
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 21
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PPUSH
31201: CALL_OW 69
31205: ST_TO_ADDR
// if not tmp then
31206: LD_VAR 0 1
31210: NOT
31211: IFFALSE 31215
// exit ;
31213: GO 31241
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
31215: LD_VAR 0 1
31219: PUSH
31220: LD_INT 1
31222: PPUSH
31223: LD_VAR 0 1
31227: PPUSH
31228: CALL_OW 12
31232: ARRAY
31233: PPUSH
31234: LD_INT 60
31236: PPUSH
31237: CALL_OW 234
// end ;
31241: PPOPN 1
31243: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
31244: LD_EXP 51
31248: IFFALSE 31256
31250: PUSH
31251: LD_EXP 81
31255: AND
31256: IFFALSE 31355
31258: GO 31260
31260: DISABLE
31261: LD_INT 0
31263: PPUSH
31264: PPUSH
// begin enable ;
31265: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
31266: LD_ADDR_VAR 0 1
31270: PUSH
31271: LD_INT 22
31273: PUSH
31274: LD_OWVAR 2
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 61
31285: PUSH
31286: EMPTY
31287: LIST
31288: PUSH
31289: LD_INT 33
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: PPUSH
31304: CALL_OW 69
31308: ST_TO_ADDR
// if not tmp then
31309: LD_VAR 0 1
31313: NOT
31314: IFFALSE 31318
// exit ;
31316: GO 31355
// for i in tmp do
31318: LD_ADDR_VAR 0 2
31322: PUSH
31323: LD_VAR 0 1
31327: PUSH
31328: FOR_IN
31329: IFFALSE 31353
// if IsControledBy ( i ) then
31331: LD_VAR 0 2
31335: PPUSH
31336: CALL_OW 312
31340: IFFALSE 31351
// ComUnlink ( i ) ;
31342: LD_VAR 0 2
31346: PPUSH
31347: CALL_OW 136
31351: GO 31328
31353: POP
31354: POP
// end ;
31355: PPOPN 2
31357: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
31358: LD_EXP 51
31362: IFFALSE 31370
31364: PUSH
31365: LD_EXP 82
31369: AND
31370: IFFALSE 31510
31372: GO 31374
31374: DISABLE
31375: LD_INT 0
31377: PPUSH
31378: PPUSH
// begin ToLua ( displayPowell(); ) ;
31379: LD_STRING displayPowell();
31381: PPUSH
31382: CALL_OW 559
// uc_side := 0 ;
31386: LD_ADDR_OWVAR 20
31390: PUSH
31391: LD_INT 0
31393: ST_TO_ADDR
// uc_nation := 2 ;
31394: LD_ADDR_OWVAR 21
31398: PUSH
31399: LD_INT 2
31401: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31402: LD_ADDR_OWVAR 37
31406: PUSH
31407: LD_INT 14
31409: ST_TO_ADDR
// vc_engine := engine_siberite ;
31410: LD_ADDR_OWVAR 39
31414: PUSH
31415: LD_INT 3
31417: ST_TO_ADDR
// vc_control := control_apeman ;
31418: LD_ADDR_OWVAR 38
31422: PUSH
31423: LD_INT 5
31425: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
31426: LD_ADDR_OWVAR 40
31430: PUSH
31431: LD_INT 29
31433: ST_TO_ADDR
// un := CreateVehicle ;
31434: LD_ADDR_VAR 0 2
31438: PUSH
31439: CALL_OW 45
31443: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31444: LD_VAR 0 2
31448: PPUSH
31449: LD_INT 1
31451: PPUSH
31452: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31456: LD_INT 35
31458: PPUSH
31459: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31463: LD_VAR 0 2
31467: PPUSH
31468: LD_INT 22
31470: PUSH
31471: LD_OWVAR 2
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PPUSH
31480: CALL_OW 69
31484: PPUSH
31485: LD_VAR 0 2
31489: PPUSH
31490: CALL_OW 74
31494: PPUSH
31495: CALL_OW 115
// until IsDead ( un ) ;
31499: LD_VAR 0 2
31503: PPUSH
31504: CALL_OW 301
31508: IFFALSE 31456
// end ;
31510: PPOPN 2
31512: END
// every 0 0$1 trigger StreamModeActive and sStu do
31513: LD_EXP 51
31517: IFFALSE 31525
31519: PUSH
31520: LD_EXP 90
31524: AND
31525: IFFALSE 31541
31527: GO 31529
31529: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31530: LD_STRING displayStucuk();
31532: PPUSH
31533: CALL_OW 559
// ResetFog ;
31537: CALL_OW 335
// end ;
31541: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31542: LD_EXP 51
31546: IFFALSE 31554
31548: PUSH
31549: LD_EXP 83
31553: AND
31554: IFFALSE 31695
31556: GO 31558
31558: DISABLE
31559: LD_INT 0
31561: PPUSH
31562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31563: LD_ADDR_VAR 0 2
31567: PUSH
31568: LD_INT 22
31570: PUSH
31571: LD_OWVAR 2
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 21
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PPUSH
31594: CALL_OW 69
31598: ST_TO_ADDR
// if not tmp then
31599: LD_VAR 0 2
31603: NOT
31604: IFFALSE 31608
// exit ;
31606: GO 31695
// un := tmp [ rand ( 1 , tmp ) ] ;
31608: LD_ADDR_VAR 0 1
31612: PUSH
31613: LD_VAR 0 2
31617: PUSH
31618: LD_INT 1
31620: PPUSH
31621: LD_VAR 0 2
31625: PPUSH
31626: CALL_OW 12
31630: ARRAY
31631: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31632: LD_VAR 0 1
31636: PPUSH
31637: LD_INT 0
31639: PPUSH
31640: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31644: LD_VAR 0 1
31648: PPUSH
31649: LD_OWVAR 3
31653: PUSH
31654: LD_VAR 0 1
31658: DIFF
31659: PPUSH
31660: LD_VAR 0 1
31664: PPUSH
31665: CALL_OW 74
31669: PPUSH
31670: CALL_OW 115
// wait ( 0 0$20 ) ;
31674: LD_INT 700
31676: PPUSH
31677: CALL_OW 67
// SetSide ( un , your_side ) ;
31681: LD_VAR 0 1
31685: PPUSH
31686: LD_OWVAR 2
31690: PPUSH
31691: CALL_OW 235
// end ;
31695: PPOPN 2
31697: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31698: LD_EXP 51
31702: IFFALSE 31710
31704: PUSH
31705: LD_EXP 84
31709: AND
31710: IFFALSE 31816
31712: GO 31714
31714: DISABLE
31715: LD_INT 0
31717: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31718: LD_ADDR_VAR 0 1
31722: PUSH
31723: LD_INT 22
31725: PUSH
31726: LD_OWVAR 2
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 2
31737: PUSH
31738: LD_INT 30
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 30
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PPUSH
31767: CALL_OW 69
31771: ST_TO_ADDR
// if not depot then
31772: LD_VAR 0 1
31776: NOT
31777: IFFALSE 31781
// exit ;
31779: GO 31816
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31781: LD_VAR 0 1
31785: PUSH
31786: LD_INT 1
31788: ARRAY
31789: PPUSH
31790: CALL_OW 250
31794: PPUSH
31795: LD_VAR 0 1
31799: PUSH
31800: LD_INT 1
31802: ARRAY
31803: PPUSH
31804: CALL_OW 251
31808: PPUSH
31809: LD_INT 70
31811: PPUSH
31812: CALL_OW 495
// end ;
31816: PPOPN 1
31818: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31819: LD_EXP 51
31823: IFFALSE 31831
31825: PUSH
31826: LD_EXP 85
31830: AND
31831: IFFALSE 32042
31833: GO 31835
31835: DISABLE
31836: LD_INT 0
31838: PPUSH
31839: PPUSH
31840: PPUSH
31841: PPUSH
31842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31843: LD_ADDR_VAR 0 5
31847: PUSH
31848: LD_INT 22
31850: PUSH
31851: LD_OWVAR 2
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 21
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PPUSH
31874: CALL_OW 69
31878: ST_TO_ADDR
// if not tmp then
31879: LD_VAR 0 5
31883: NOT
31884: IFFALSE 31888
// exit ;
31886: GO 32042
// for i in tmp do
31888: LD_ADDR_VAR 0 1
31892: PUSH
31893: LD_VAR 0 5
31897: PUSH
31898: FOR_IN
31899: IFFALSE 32040
// begin d := rand ( 0 , 5 ) ;
31901: LD_ADDR_VAR 0 4
31905: PUSH
31906: LD_INT 0
31908: PPUSH
31909: LD_INT 5
31911: PPUSH
31912: CALL_OW 12
31916: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31917: LD_ADDR_VAR 0 2
31921: PUSH
31922: LD_VAR 0 1
31926: PPUSH
31927: CALL_OW 250
31931: PPUSH
31932: LD_VAR 0 4
31936: PPUSH
31937: LD_INT 3
31939: PPUSH
31940: LD_INT 12
31942: PPUSH
31943: CALL_OW 12
31947: PPUSH
31948: CALL_OW 272
31952: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31953: LD_ADDR_VAR 0 3
31957: PUSH
31958: LD_VAR 0 1
31962: PPUSH
31963: CALL_OW 251
31967: PPUSH
31968: LD_VAR 0 4
31972: PPUSH
31973: LD_INT 3
31975: PPUSH
31976: LD_INT 12
31978: PPUSH
31979: CALL_OW 12
31983: PPUSH
31984: CALL_OW 273
31988: ST_TO_ADDR
// if ValidHex ( x , y ) then
31989: LD_VAR 0 2
31993: PPUSH
31994: LD_VAR 0 3
31998: PPUSH
31999: CALL_OW 488
32003: IFFALSE 32038
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
32005: LD_VAR 0 1
32009: PPUSH
32010: LD_VAR 0 2
32014: PPUSH
32015: LD_VAR 0 3
32019: PPUSH
32020: LD_INT 3
32022: PPUSH
32023: LD_INT 6
32025: PPUSH
32026: CALL_OW 12
32030: PPUSH
32031: LD_INT 1
32033: PPUSH
32034: CALL_OW 483
// end ;
32038: GO 31898
32040: POP
32041: POP
// end ;
32042: PPOPN 5
32044: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
32045: LD_EXP 51
32049: IFFALSE 32057
32051: PUSH
32052: LD_EXP 86
32056: AND
32057: IFFALSE 32151
32059: GO 32061
32061: DISABLE
32062: LD_INT 0
32064: PPUSH
32065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
32066: LD_ADDR_VAR 0 2
32070: PUSH
32071: LD_INT 22
32073: PUSH
32074: LD_OWVAR 2
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 32
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 21
32095: PUSH
32096: LD_INT 2
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: LIST
32107: PPUSH
32108: CALL_OW 69
32112: ST_TO_ADDR
// if not tmp then
32113: LD_VAR 0 2
32117: NOT
32118: IFFALSE 32122
// exit ;
32120: GO 32151
// for i in tmp do
32122: LD_ADDR_VAR 0 1
32126: PUSH
32127: LD_VAR 0 2
32131: PUSH
32132: FOR_IN
32133: IFFALSE 32149
// SetFuel ( i , 0 ) ;
32135: LD_VAR 0 1
32139: PPUSH
32140: LD_INT 0
32142: PPUSH
32143: CALL_OW 240
32147: GO 32132
32149: POP
32150: POP
// end ;
32151: PPOPN 2
32153: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
32154: LD_EXP 51
32158: IFFALSE 32166
32160: PUSH
32161: LD_EXP 87
32165: AND
32166: IFFALSE 32232
32168: GO 32170
32170: DISABLE
32171: LD_INT 0
32173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32174: LD_ADDR_VAR 0 1
32178: PUSH
32179: LD_INT 22
32181: PUSH
32182: LD_OWVAR 2
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 30
32193: PUSH
32194: LD_INT 29
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PPUSH
32205: CALL_OW 69
32209: ST_TO_ADDR
// if not tmp then
32210: LD_VAR 0 1
32214: NOT
32215: IFFALSE 32219
// exit ;
32217: GO 32232
// DestroyUnit ( tmp [ 1 ] ) ;
32219: LD_VAR 0 1
32223: PUSH
32224: LD_INT 1
32226: ARRAY
32227: PPUSH
32228: CALL_OW 65
// end ;
32232: PPOPN 1
32234: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
32235: LD_EXP 51
32239: IFFALSE 32247
32241: PUSH
32242: LD_EXP 89
32246: AND
32247: IFFALSE 32376
32249: GO 32251
32251: DISABLE
32252: LD_INT 0
32254: PPUSH
// begin uc_side := 0 ;
32255: LD_ADDR_OWVAR 20
32259: PUSH
32260: LD_INT 0
32262: ST_TO_ADDR
// uc_nation := nation_arabian ;
32263: LD_ADDR_OWVAR 21
32267: PUSH
32268: LD_INT 2
32270: ST_TO_ADDR
// hc_gallery :=  ;
32271: LD_ADDR_OWVAR 33
32275: PUSH
32276: LD_STRING 
32278: ST_TO_ADDR
// hc_name :=  ;
32279: LD_ADDR_OWVAR 26
32283: PUSH
32284: LD_STRING 
32286: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
32287: LD_INT 1
32289: PPUSH
32290: LD_INT 11
32292: PPUSH
32293: LD_INT 10
32295: PPUSH
32296: CALL_OW 380
// un := CreateHuman ;
32300: LD_ADDR_VAR 0 1
32304: PUSH
32305: CALL_OW 44
32309: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32310: LD_VAR 0 1
32314: PPUSH
32315: LD_INT 1
32317: PPUSH
32318: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
32322: LD_INT 35
32324: PPUSH
32325: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
32329: LD_VAR 0 1
32333: PPUSH
32334: LD_INT 22
32336: PUSH
32337: LD_OWVAR 2
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PPUSH
32346: CALL_OW 69
32350: PPUSH
32351: LD_VAR 0 1
32355: PPUSH
32356: CALL_OW 74
32360: PPUSH
32361: CALL_OW 115
// until IsDead ( un ) ;
32365: LD_VAR 0 1
32369: PPUSH
32370: CALL_OW 301
32374: IFFALSE 32322
// end ;
32376: PPOPN 1
32378: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
32379: LD_EXP 51
32383: IFFALSE 32391
32385: PUSH
32386: LD_EXP 91
32390: AND
32391: IFFALSE 32403
32393: GO 32395
32395: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
32396: LD_STRING earthquake(getX(game), 0, 32)
32398: PPUSH
32399: CALL_OW 559
32403: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
32404: LD_EXP 51
32408: IFFALSE 32416
32410: PUSH
32411: LD_EXP 92
32415: AND
32416: IFFALSE 32507
32418: GO 32420
32420: DISABLE
32421: LD_INT 0
32423: PPUSH
// begin enable ;
32424: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
32425: LD_ADDR_VAR 0 1
32429: PUSH
32430: LD_INT 22
32432: PUSH
32433: LD_OWVAR 2
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 21
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 33
32454: PUSH
32455: LD_INT 3
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: PPUSH
32467: CALL_OW 69
32471: ST_TO_ADDR
// if not tmp then
32472: LD_VAR 0 1
32476: NOT
32477: IFFALSE 32481
// exit ;
32479: GO 32507
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32481: LD_VAR 0 1
32485: PUSH
32486: LD_INT 1
32488: PPUSH
32489: LD_VAR 0 1
32493: PPUSH
32494: CALL_OW 12
32498: ARRAY
32499: PPUSH
32500: LD_INT 1
32502: PPUSH
32503: CALL_OW 234
// end ;
32507: PPOPN 1
32509: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
32510: LD_EXP 51
32514: IFFALSE 32522
32516: PUSH
32517: LD_EXP 93
32521: AND
32522: IFFALSE 32663
32524: GO 32526
32526: DISABLE
32527: LD_INT 0
32529: PPUSH
32530: PPUSH
32531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32532: LD_ADDR_VAR 0 3
32536: PUSH
32537: LD_INT 22
32539: PUSH
32540: LD_OWVAR 2
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 25
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PPUSH
32563: CALL_OW 69
32567: ST_TO_ADDR
// if not tmp then
32568: LD_VAR 0 3
32572: NOT
32573: IFFALSE 32577
// exit ;
32575: GO 32663
// un := tmp [ rand ( 1 , tmp ) ] ;
32577: LD_ADDR_VAR 0 2
32581: PUSH
32582: LD_VAR 0 3
32586: PUSH
32587: LD_INT 1
32589: PPUSH
32590: LD_VAR 0 3
32594: PPUSH
32595: CALL_OW 12
32599: ARRAY
32600: ST_TO_ADDR
// if Crawls ( un ) then
32601: LD_VAR 0 2
32605: PPUSH
32606: CALL_OW 318
32610: IFFALSE 32621
// ComWalk ( un ) ;
32612: LD_VAR 0 2
32616: PPUSH
32617: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32621: LD_VAR 0 2
32625: PPUSH
32626: LD_INT 9
32628: PPUSH
32629: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32633: LD_INT 28
32635: PPUSH
32636: LD_OWVAR 2
32640: PPUSH
32641: LD_INT 2
32643: PPUSH
32644: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32648: LD_INT 29
32650: PPUSH
32651: LD_OWVAR 2
32655: PPUSH
32656: LD_INT 2
32658: PPUSH
32659: CALL_OW 322
// end ;
32663: PPOPN 3
32665: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32666: LD_EXP 51
32670: IFFALSE 32678
32672: PUSH
32673: LD_EXP 94
32677: AND
32678: IFFALSE 32789
32680: GO 32682
32682: DISABLE
32683: LD_INT 0
32685: PPUSH
32686: PPUSH
32687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32688: LD_ADDR_VAR 0 3
32692: PUSH
32693: LD_INT 22
32695: PUSH
32696: LD_OWVAR 2
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 25
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PPUSH
32719: CALL_OW 69
32723: ST_TO_ADDR
// if not tmp then
32724: LD_VAR 0 3
32728: NOT
32729: IFFALSE 32733
// exit ;
32731: GO 32789
// un := tmp [ rand ( 1 , tmp ) ] ;
32733: LD_ADDR_VAR 0 2
32737: PUSH
32738: LD_VAR 0 3
32742: PUSH
32743: LD_INT 1
32745: PPUSH
32746: LD_VAR 0 3
32750: PPUSH
32751: CALL_OW 12
32755: ARRAY
32756: ST_TO_ADDR
// if Crawls ( un ) then
32757: LD_VAR 0 2
32761: PPUSH
32762: CALL_OW 318
32766: IFFALSE 32777
// ComWalk ( un ) ;
32768: LD_VAR 0 2
32772: PPUSH
32773: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32777: LD_VAR 0 2
32781: PPUSH
32782: LD_INT 8
32784: PPUSH
32785: CALL_OW 336
// end ;
32789: PPOPN 3
32791: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32792: LD_EXP 51
32796: IFFALSE 32804
32798: PUSH
32799: LD_EXP 95
32803: AND
32804: IFFALSE 32948
32806: GO 32808
32808: DISABLE
32809: LD_INT 0
32811: PPUSH
32812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32813: LD_ADDR_VAR 0 2
32817: PUSH
32818: LD_INT 22
32820: PUSH
32821: LD_OWVAR 2
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 21
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: LD_INT 34
32845: PUSH
32846: LD_INT 12
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 34
32855: PUSH
32856: LD_INT 51
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 34
32865: PUSH
32866: LD_INT 32
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: PPUSH
32884: CALL_OW 69
32888: ST_TO_ADDR
// if not tmp then
32889: LD_VAR 0 2
32893: NOT
32894: IFFALSE 32898
// exit ;
32896: GO 32948
// for i in tmp do
32898: LD_ADDR_VAR 0 1
32902: PUSH
32903: LD_VAR 0 2
32907: PUSH
32908: FOR_IN
32909: IFFALSE 32946
// if GetCargo ( i , mat_artifact ) = 0 then
32911: LD_VAR 0 1
32915: PPUSH
32916: LD_INT 4
32918: PPUSH
32919: CALL_OW 289
32923: PUSH
32924: LD_INT 0
32926: EQUAL
32927: IFFALSE 32944
// SetCargo ( i , mat_siberit , 100 ) ;
32929: LD_VAR 0 1
32933: PPUSH
32934: LD_INT 3
32936: PPUSH
32937: LD_INT 100
32939: PPUSH
32940: CALL_OW 290
32944: GO 32908
32946: POP
32947: POP
// end ;
32948: PPOPN 2
32950: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32951: LD_EXP 51
32955: IFFALSE 32963
32957: PUSH
32958: LD_EXP 96
32962: AND
32963: IFFALSE 33146
32965: GO 32967
32967: DISABLE
32968: LD_INT 0
32970: PPUSH
32971: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32972: LD_ADDR_VAR 0 2
32976: PUSH
32977: LD_INT 22
32979: PUSH
32980: LD_OWVAR 2
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PPUSH
32989: CALL_OW 69
32993: ST_TO_ADDR
// if not tmp then
32994: LD_VAR 0 2
32998: NOT
32999: IFFALSE 33003
// exit ;
33001: GO 33146
// for i := 1 to 2 do
33003: LD_ADDR_VAR 0 1
33007: PUSH
33008: DOUBLE
33009: LD_INT 1
33011: DEC
33012: ST_TO_ADDR
33013: LD_INT 2
33015: PUSH
33016: FOR_TO
33017: IFFALSE 33144
// begin uc_side := your_side ;
33019: LD_ADDR_OWVAR 20
33023: PUSH
33024: LD_OWVAR 2
33028: ST_TO_ADDR
// uc_nation := nation_american ;
33029: LD_ADDR_OWVAR 21
33033: PUSH
33034: LD_INT 1
33036: ST_TO_ADDR
// vc_chassis := us_morphling ;
33037: LD_ADDR_OWVAR 37
33041: PUSH
33042: LD_INT 5
33044: ST_TO_ADDR
// vc_engine := engine_siberite ;
33045: LD_ADDR_OWVAR 39
33049: PUSH
33050: LD_INT 3
33052: ST_TO_ADDR
// vc_control := control_computer ;
33053: LD_ADDR_OWVAR 38
33057: PUSH
33058: LD_INT 3
33060: ST_TO_ADDR
// vc_weapon := us_double_laser ;
33061: LD_ADDR_OWVAR 40
33065: PUSH
33066: LD_INT 10
33068: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
33069: LD_VAR 0 2
33073: PUSH
33074: LD_INT 1
33076: ARRAY
33077: PPUSH
33078: CALL_OW 310
33082: NOT
33083: IFFALSE 33130
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
33085: CALL_OW 45
33089: PPUSH
33090: LD_VAR 0 2
33094: PUSH
33095: LD_INT 1
33097: ARRAY
33098: PPUSH
33099: CALL_OW 250
33103: PPUSH
33104: LD_VAR 0 2
33108: PUSH
33109: LD_INT 1
33111: ARRAY
33112: PPUSH
33113: CALL_OW 251
33117: PPUSH
33118: LD_INT 12
33120: PPUSH
33121: LD_INT 1
33123: PPUSH
33124: CALL_OW 50
33128: GO 33142
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
33130: CALL_OW 45
33134: PPUSH
33135: LD_INT 1
33137: PPUSH
33138: CALL_OW 51
// end ;
33142: GO 33016
33144: POP
33145: POP
// end ;
33146: PPOPN 2
33148: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
33149: LD_EXP 51
33153: IFFALSE 33161
33155: PUSH
33156: LD_EXP 97
33160: AND
33161: IFFALSE 33383
33163: GO 33165
33165: DISABLE
33166: LD_INT 0
33168: PPUSH
33169: PPUSH
33170: PPUSH
33171: PPUSH
33172: PPUSH
33173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33174: LD_ADDR_VAR 0 6
33178: PUSH
33179: LD_INT 22
33181: PUSH
33182: LD_OWVAR 2
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 21
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 3
33203: PUSH
33204: LD_INT 23
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: PPUSH
33223: CALL_OW 69
33227: ST_TO_ADDR
// if not tmp then
33228: LD_VAR 0 6
33232: NOT
33233: IFFALSE 33237
// exit ;
33235: GO 33383
// s1 := rand ( 1 , 4 ) ;
33237: LD_ADDR_VAR 0 2
33241: PUSH
33242: LD_INT 1
33244: PPUSH
33245: LD_INT 4
33247: PPUSH
33248: CALL_OW 12
33252: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
33253: LD_ADDR_VAR 0 4
33257: PUSH
33258: LD_VAR 0 6
33262: PUSH
33263: LD_INT 1
33265: ARRAY
33266: PPUSH
33267: LD_VAR 0 2
33271: PPUSH
33272: CALL_OW 259
33276: ST_TO_ADDR
// if s1 = 1 then
33277: LD_VAR 0 2
33281: PUSH
33282: LD_INT 1
33284: EQUAL
33285: IFFALSE 33305
// s2 := rand ( 2 , 4 ) else
33287: LD_ADDR_VAR 0 3
33291: PUSH
33292: LD_INT 2
33294: PPUSH
33295: LD_INT 4
33297: PPUSH
33298: CALL_OW 12
33302: ST_TO_ADDR
33303: GO 33313
// s2 := 1 ;
33305: LD_ADDR_VAR 0 3
33309: PUSH
33310: LD_INT 1
33312: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
33313: LD_ADDR_VAR 0 5
33317: PUSH
33318: LD_VAR 0 6
33322: PUSH
33323: LD_INT 1
33325: ARRAY
33326: PPUSH
33327: LD_VAR 0 3
33331: PPUSH
33332: CALL_OW 259
33336: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
33337: LD_VAR 0 6
33341: PUSH
33342: LD_INT 1
33344: ARRAY
33345: PPUSH
33346: LD_VAR 0 2
33350: PPUSH
33351: LD_VAR 0 5
33355: PPUSH
33356: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
33360: LD_VAR 0 6
33364: PUSH
33365: LD_INT 1
33367: ARRAY
33368: PPUSH
33369: LD_VAR 0 3
33373: PPUSH
33374: LD_VAR 0 4
33378: PPUSH
33379: CALL_OW 237
// end ;
33383: PPOPN 6
33385: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
33386: LD_EXP 51
33390: IFFALSE 33398
33392: PUSH
33393: LD_EXP 98
33397: AND
33398: IFFALSE 33477
33400: GO 33402
33402: DISABLE
33403: LD_INT 0
33405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
33406: LD_ADDR_VAR 0 1
33410: PUSH
33411: LD_INT 22
33413: PUSH
33414: LD_OWVAR 2
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 30
33425: PUSH
33426: LD_INT 3
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PPUSH
33437: CALL_OW 69
33441: ST_TO_ADDR
// if not tmp then
33442: LD_VAR 0 1
33446: NOT
33447: IFFALSE 33451
// exit ;
33449: GO 33477
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
33451: LD_VAR 0 1
33455: PUSH
33456: LD_INT 1
33458: PPUSH
33459: LD_VAR 0 1
33463: PPUSH
33464: CALL_OW 12
33468: ARRAY
33469: PPUSH
33470: LD_INT 1
33472: PPUSH
33473: CALL_OW 234
// end ;
33477: PPOPN 1
33479: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
33480: LD_EXP 51
33484: IFFALSE 33492
33486: PUSH
33487: LD_EXP 99
33491: AND
33492: IFFALSE 33604
33494: GO 33496
33496: DISABLE
33497: LD_INT 0
33499: PPUSH
33500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
33501: LD_ADDR_VAR 0 2
33505: PUSH
33506: LD_INT 22
33508: PUSH
33509: LD_OWVAR 2
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 2
33520: PUSH
33521: LD_INT 30
33523: PUSH
33524: LD_INT 27
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 30
33533: PUSH
33534: LD_INT 26
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 30
33543: PUSH
33544: LD_INT 28
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PPUSH
33561: CALL_OW 69
33565: ST_TO_ADDR
// if not tmp then
33566: LD_VAR 0 2
33570: NOT
33571: IFFALSE 33575
// exit ;
33573: GO 33604
// for i in tmp do
33575: LD_ADDR_VAR 0 1
33579: PUSH
33580: LD_VAR 0 2
33584: PUSH
33585: FOR_IN
33586: IFFALSE 33602
// SetLives ( i , 1 ) ;
33588: LD_VAR 0 1
33592: PPUSH
33593: LD_INT 1
33595: PPUSH
33596: CALL_OW 234
33600: GO 33585
33602: POP
33603: POP
// end ;
33604: PPOPN 2
33606: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33607: LD_EXP 51
33611: IFFALSE 33619
33613: PUSH
33614: LD_EXP 100
33618: AND
33619: IFFALSE 33906
33621: GO 33623
33623: DISABLE
33624: LD_INT 0
33626: PPUSH
33627: PPUSH
33628: PPUSH
// begin i := rand ( 1 , 7 ) ;
33629: LD_ADDR_VAR 0 1
33633: PUSH
33634: LD_INT 1
33636: PPUSH
33637: LD_INT 7
33639: PPUSH
33640: CALL_OW 12
33644: ST_TO_ADDR
// case i of 1 :
33645: LD_VAR 0 1
33649: PUSH
33650: LD_INT 1
33652: DOUBLE
33653: EQUAL
33654: IFTRUE 33658
33656: GO 33668
33658: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33659: LD_STRING earthquake(getX(game), 0, 32)
33661: PPUSH
33662: CALL_OW 559
33666: GO 33906
33668: LD_INT 2
33670: DOUBLE
33671: EQUAL
33672: IFTRUE 33676
33674: GO 33690
33676: POP
// begin ToLua ( displayStucuk(); ) ;
33677: LD_STRING displayStucuk();
33679: PPUSH
33680: CALL_OW 559
// ResetFog ;
33684: CALL_OW 335
// end ; 3 :
33688: GO 33906
33690: LD_INT 3
33692: DOUBLE
33693: EQUAL
33694: IFTRUE 33698
33696: GO 33802
33698: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33699: LD_ADDR_VAR 0 2
33703: PUSH
33704: LD_INT 22
33706: PUSH
33707: LD_OWVAR 2
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 25
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PPUSH
33730: CALL_OW 69
33734: ST_TO_ADDR
// if not tmp then
33735: LD_VAR 0 2
33739: NOT
33740: IFFALSE 33744
// exit ;
33742: GO 33906
// un := tmp [ rand ( 1 , tmp ) ] ;
33744: LD_ADDR_VAR 0 3
33748: PUSH
33749: LD_VAR 0 2
33753: PUSH
33754: LD_INT 1
33756: PPUSH
33757: LD_VAR 0 2
33761: PPUSH
33762: CALL_OW 12
33766: ARRAY
33767: ST_TO_ADDR
// if Crawls ( un ) then
33768: LD_VAR 0 3
33772: PPUSH
33773: CALL_OW 318
33777: IFFALSE 33788
// ComWalk ( un ) ;
33779: LD_VAR 0 3
33783: PPUSH
33784: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33788: LD_VAR 0 3
33792: PPUSH
33793: LD_INT 8
33795: PPUSH
33796: CALL_OW 336
// end ; 4 :
33800: GO 33906
33802: LD_INT 4
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33810
33808: GO 33884
33810: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33811: LD_ADDR_VAR 0 2
33815: PUSH
33816: LD_INT 22
33818: PUSH
33819: LD_OWVAR 2
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 30
33830: PUSH
33831: LD_INT 29
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PPUSH
33842: CALL_OW 69
33846: ST_TO_ADDR
// if not tmp then
33847: LD_VAR 0 2
33851: NOT
33852: IFFALSE 33856
// exit ;
33854: GO 33906
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33856: LD_VAR 0 2
33860: PUSH
33861: LD_INT 1
33863: ARRAY
33864: PPUSH
33865: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33869: LD_VAR 0 2
33873: PUSH
33874: LD_INT 1
33876: ARRAY
33877: PPUSH
33878: CALL_OW 65
// end ; 5 .. 7 :
33882: GO 33906
33884: LD_INT 5
33886: DOUBLE
33887: GREATEREQUAL
33888: IFFALSE 33896
33890: LD_INT 7
33892: DOUBLE
33893: LESSEQUAL
33894: IFTRUE 33898
33896: GO 33905
33898: POP
// StreamSibBomb ; end ;
33899: CALL 30087 0 0
33903: GO 33906
33905: POP
// end ;
33906: PPOPN 3
33908: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33909: LD_EXP 51
33913: IFFALSE 33921
33915: PUSH
33916: LD_EXP 101
33920: AND
33921: IFFALSE 34077
33923: GO 33925
33925: DISABLE
33926: LD_INT 0
33928: PPUSH
33929: PPUSH
33930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33931: LD_ADDR_VAR 0 2
33935: PUSH
33936: LD_INT 81
33938: PUSH
33939: LD_OWVAR 2
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 2
33950: PUSH
33951: LD_INT 21
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 21
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: LIST
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PPUSH
33980: CALL_OW 69
33984: ST_TO_ADDR
// if not tmp then
33985: LD_VAR 0 2
33989: NOT
33990: IFFALSE 33994
// exit ;
33992: GO 34077
// p := 0 ;
33994: LD_ADDR_VAR 0 3
33998: PUSH
33999: LD_INT 0
34001: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34002: LD_INT 35
34004: PPUSH
34005: CALL_OW 67
// p := p + 1 ;
34009: LD_ADDR_VAR 0 3
34013: PUSH
34014: LD_VAR 0 3
34018: PUSH
34019: LD_INT 1
34021: PLUS
34022: ST_TO_ADDR
// for i in tmp do
34023: LD_ADDR_VAR 0 1
34027: PUSH
34028: LD_VAR 0 2
34032: PUSH
34033: FOR_IN
34034: IFFALSE 34065
// if GetLives ( i ) < 1000 then
34036: LD_VAR 0 1
34040: PPUSH
34041: CALL_OW 256
34045: PUSH
34046: LD_INT 1000
34048: LESS
34049: IFFALSE 34063
// SetLives ( i , 1000 ) ;
34051: LD_VAR 0 1
34055: PPUSH
34056: LD_INT 1000
34058: PPUSH
34059: CALL_OW 234
34063: GO 34033
34065: POP
34066: POP
// until p > 20 ;
34067: LD_VAR 0 3
34071: PUSH
34072: LD_INT 20
34074: GREATER
34075: IFFALSE 34002
// end ;
34077: PPOPN 3
34079: END
// every 0 0$1 trigger StreamModeActive and sTime do
34080: LD_EXP 51
34084: IFFALSE 34092
34086: PUSH
34087: LD_EXP 102
34091: AND
34092: IFFALSE 34127
34094: GO 34096
34096: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
34097: LD_INT 28
34099: PPUSH
34100: LD_OWVAR 2
34104: PPUSH
34105: LD_INT 2
34107: PPUSH
34108: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
34112: LD_INT 30
34114: PPUSH
34115: LD_OWVAR 2
34119: PPUSH
34120: LD_INT 2
34122: PPUSH
34123: CALL_OW 322
// end ;
34127: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
34128: LD_EXP 51
34132: IFFALSE 34140
34134: PUSH
34135: LD_EXP 103
34139: AND
34140: IFFALSE 34261
34142: GO 34144
34144: DISABLE
34145: LD_INT 0
34147: PPUSH
34148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
34149: LD_ADDR_VAR 0 2
34153: PUSH
34154: LD_INT 22
34156: PUSH
34157: LD_OWVAR 2
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 21
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 3
34178: PUSH
34179: LD_INT 23
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: PPUSH
34198: CALL_OW 69
34202: ST_TO_ADDR
// if not tmp then
34203: LD_VAR 0 2
34207: NOT
34208: IFFALSE 34212
// exit ;
34210: GO 34261
// for i in tmp do
34212: LD_ADDR_VAR 0 1
34216: PUSH
34217: LD_VAR 0 2
34221: PUSH
34222: FOR_IN
34223: IFFALSE 34259
// begin if Crawls ( i ) then
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL_OW 318
34234: IFFALSE 34245
// ComWalk ( i ) ;
34236: LD_VAR 0 1
34240: PPUSH
34241: CALL_OW 138
// SetClass ( i , 2 ) ;
34245: LD_VAR 0 1
34249: PPUSH
34250: LD_INT 2
34252: PPUSH
34253: CALL_OW 336
// end ;
34257: GO 34222
34259: POP
34260: POP
// end ;
34261: PPOPN 2
34263: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
34264: LD_EXP 51
34268: IFFALSE 34276
34270: PUSH
34271: LD_EXP 104
34275: AND
34276: IFFALSE 34566
34278: GO 34280
34280: DISABLE
34281: LD_INT 0
34283: PPUSH
34284: PPUSH
34285: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
34286: LD_OWVAR 2
34290: PPUSH
34291: LD_INT 9
34293: PPUSH
34294: LD_INT 1
34296: PPUSH
34297: LD_INT 1
34299: PPUSH
34300: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
34304: LD_INT 9
34306: PPUSH
34307: LD_OWVAR 2
34311: PPUSH
34312: CALL_OW 343
// uc_side := 9 ;
34316: LD_ADDR_OWVAR 20
34320: PUSH
34321: LD_INT 9
34323: ST_TO_ADDR
// uc_nation := 2 ;
34324: LD_ADDR_OWVAR 21
34328: PUSH
34329: LD_INT 2
34331: ST_TO_ADDR
// hc_name := Dark Warrior ;
34332: LD_ADDR_OWVAR 26
34336: PUSH
34337: LD_STRING Dark Warrior
34339: ST_TO_ADDR
// hc_gallery :=  ;
34340: LD_ADDR_OWVAR 33
34344: PUSH
34345: LD_STRING 
34347: ST_TO_ADDR
// hc_noskilllimit := true ;
34348: LD_ADDR_OWVAR 76
34352: PUSH
34353: LD_INT 1
34355: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
34356: LD_ADDR_OWVAR 31
34360: PUSH
34361: LD_INT 30
34363: PUSH
34364: LD_INT 30
34366: PUSH
34367: LD_INT 30
34369: PUSH
34370: LD_INT 30
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: ST_TO_ADDR
// un := CreateHuman ;
34379: LD_ADDR_VAR 0 3
34383: PUSH
34384: CALL_OW 44
34388: ST_TO_ADDR
// hc_noskilllimit := false ;
34389: LD_ADDR_OWVAR 76
34393: PUSH
34394: LD_INT 0
34396: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34397: LD_VAR 0 3
34401: PPUSH
34402: LD_INT 1
34404: PPUSH
34405: CALL_OW 51
// ToLua ( playRanger() ) ;
34409: LD_STRING playRanger()
34411: PPUSH
34412: CALL_OW 559
// p := 0 ;
34416: LD_ADDR_VAR 0 2
34420: PUSH
34421: LD_INT 0
34423: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34424: LD_INT 35
34426: PPUSH
34427: CALL_OW 67
// p := p + 1 ;
34431: LD_ADDR_VAR 0 2
34435: PUSH
34436: LD_VAR 0 2
34440: PUSH
34441: LD_INT 1
34443: PLUS
34444: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
34445: LD_VAR 0 3
34449: PPUSH
34450: CALL_OW 256
34454: PUSH
34455: LD_INT 1000
34457: LESS
34458: IFFALSE 34472
// SetLives ( un , 1000 ) ;
34460: LD_VAR 0 3
34464: PPUSH
34465: LD_INT 1000
34467: PPUSH
34468: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
34472: LD_VAR 0 3
34476: PPUSH
34477: LD_INT 81
34479: PUSH
34480: LD_OWVAR 2
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 91
34491: PUSH
34492: LD_VAR 0 3
34496: PUSH
34497: LD_INT 30
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PPUSH
34509: CALL_OW 69
34513: PPUSH
34514: LD_VAR 0 3
34518: PPUSH
34519: CALL_OW 74
34523: PPUSH
34524: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
34528: LD_VAR 0 2
34532: PUSH
34533: LD_INT 80
34535: GREATER
34536: IFTRUE 34549
34538: PUSH
34539: LD_VAR 0 3
34543: PPUSH
34544: CALL_OW 301
34548: OR
34549: IFFALSE 34424
// if un then
34551: LD_VAR 0 3
34555: IFFALSE 34566
// RemoveUnit ( un ) ;
34557: LD_VAR 0 3
34561: PPUSH
34562: CALL_OW 64
// end ;
34566: PPOPN 3
34568: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
34569: LD_EXP 105
34573: IFFALSE 34689
34575: GO 34577
34577: DISABLE
34578: LD_INT 0
34580: PPUSH
34581: PPUSH
34582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34583: LD_ADDR_VAR 0 2
34587: PUSH
34588: LD_INT 81
34590: PUSH
34591: LD_OWVAR 2
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 21
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PPUSH
34614: CALL_OW 69
34618: ST_TO_ADDR
// ToLua ( playComputer() ) ;
34619: LD_STRING playComputer()
34621: PPUSH
34622: CALL_OW 559
// if not tmp then
34626: LD_VAR 0 2
34630: NOT
34631: IFFALSE 34635
// exit ;
34633: GO 34689
// for i in tmp do
34635: LD_ADDR_VAR 0 1
34639: PUSH
34640: LD_VAR 0 2
34644: PUSH
34645: FOR_IN
34646: IFFALSE 34687
// for j := 1 to 4 do
34648: LD_ADDR_VAR 0 3
34652: PUSH
34653: DOUBLE
34654: LD_INT 1
34656: DEC
34657: ST_TO_ADDR
34658: LD_INT 4
34660: PUSH
34661: FOR_TO
34662: IFFALSE 34683
// SetSkill ( i , j , 10 ) ;
34664: LD_VAR 0 1
34668: PPUSH
34669: LD_VAR 0 3
34673: PPUSH
34674: LD_INT 10
34676: PPUSH
34677: CALL_OW 237
34681: GO 34661
34683: POP
34684: POP
34685: GO 34645
34687: POP
34688: POP
// end ;
34689: PPOPN 3
34691: END
// every 0 0$1 trigger s30 do var i , tmp ;
34692: LD_EXP 106
34696: IFFALSE 34765
34698: GO 34700
34700: DISABLE
34701: LD_INT 0
34703: PPUSH
34704: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34705: LD_ADDR_VAR 0 2
34709: PUSH
34710: LD_INT 22
34712: PUSH
34713: LD_OWVAR 2
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PPUSH
34722: CALL_OW 69
34726: ST_TO_ADDR
// if not tmp then
34727: LD_VAR 0 2
34731: NOT
34732: IFFALSE 34736
// exit ;
34734: GO 34765
// for i in tmp do
34736: LD_ADDR_VAR 0 1
34740: PUSH
34741: LD_VAR 0 2
34745: PUSH
34746: FOR_IN
34747: IFFALSE 34763
// SetLives ( i , 300 ) ;
34749: LD_VAR 0 1
34753: PPUSH
34754: LD_INT 300
34756: PPUSH
34757: CALL_OW 234
34761: GO 34746
34763: POP
34764: POP
// end ;
34765: PPOPN 2
34767: END
// every 0 0$1 trigger s60 do var i , tmp ;
34768: LD_EXP 107
34772: IFFALSE 34841
34774: GO 34776
34776: DISABLE
34777: LD_INT 0
34779: PPUSH
34780: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34781: LD_ADDR_VAR 0 2
34785: PUSH
34786: LD_INT 22
34788: PUSH
34789: LD_OWVAR 2
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PPUSH
34798: CALL_OW 69
34802: ST_TO_ADDR
// if not tmp then
34803: LD_VAR 0 2
34807: NOT
34808: IFFALSE 34812
// exit ;
34810: GO 34841
// for i in tmp do
34812: LD_ADDR_VAR 0 1
34816: PUSH
34817: LD_VAR 0 2
34821: PUSH
34822: FOR_IN
34823: IFFALSE 34839
// SetLives ( i , 600 ) ;
34825: LD_VAR 0 1
34829: PPUSH
34830: LD_INT 600
34832: PPUSH
34833: CALL_OW 234
34837: GO 34822
34839: POP
34840: POP
// end ;
34841: PPOPN 2
34843: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34844: LD_INT 0
34846: PPUSH
// case cmd of 301 :
34847: LD_VAR 0 1
34851: PUSH
34852: LD_INT 301
34854: DOUBLE
34855: EQUAL
34856: IFTRUE 34860
34858: GO 34892
34860: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34861: LD_VAR 0 6
34865: PPUSH
34866: LD_VAR 0 7
34870: PPUSH
34871: LD_VAR 0 8
34875: PPUSH
34876: LD_VAR 0 4
34880: PPUSH
34881: LD_VAR 0 5
34885: PPUSH
34886: CALL 36105 0 5
34890: GO 35013
34892: LD_INT 302
34894: DOUBLE
34895: EQUAL
34896: IFTRUE 34900
34898: GO 34937
34900: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34901: LD_VAR 0 6
34905: PPUSH
34906: LD_VAR 0 7
34910: PPUSH
34911: LD_VAR 0 8
34915: PPUSH
34916: LD_VAR 0 9
34920: PPUSH
34921: LD_VAR 0 4
34925: PPUSH
34926: LD_VAR 0 5
34930: PPUSH
34931: CALL 36196 0 6
34935: GO 35013
34937: LD_INT 303
34939: DOUBLE
34940: EQUAL
34941: IFTRUE 34945
34943: GO 34982
34945: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34946: LD_VAR 0 6
34950: PPUSH
34951: LD_VAR 0 7
34955: PPUSH
34956: LD_VAR 0 8
34960: PPUSH
34961: LD_VAR 0 9
34965: PPUSH
34966: LD_VAR 0 4
34970: PPUSH
34971: LD_VAR 0 5
34975: PPUSH
34976: CALL 35018 0 6
34980: GO 35013
34982: LD_INT 304
34984: DOUBLE
34985: EQUAL
34986: IFTRUE 34990
34988: GO 35012
34990: POP
// hHackTeleport ( unit , x , y ) ; end ;
34991: LD_VAR 0 2
34995: PPUSH
34996: LD_VAR 0 4
35000: PPUSH
35001: LD_VAR 0 5
35005: PPUSH
35006: CALL 36789 0 3
35010: GO 35013
35012: POP
// end ;
35013: LD_VAR 0 12
35017: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
35018: LD_INT 0
35020: PPUSH
35021: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
35022: LD_VAR 0 1
35026: PUSH
35027: LD_INT 1
35029: LESS
35030: IFTRUE 35042
35032: PUSH
35033: LD_VAR 0 1
35037: PUSH
35038: LD_INT 3
35040: GREATER
35041: OR
35042: IFTRUE 35060
35044: PUSH
35045: LD_VAR 0 5
35049: PPUSH
35050: LD_VAR 0 6
35054: PPUSH
35055: CALL_OW 428
35059: OR
35060: IFFALSE 35064
// exit ;
35062: GO 35792
// uc_side := your_side ;
35064: LD_ADDR_OWVAR 20
35068: PUSH
35069: LD_OWVAR 2
35073: ST_TO_ADDR
// uc_nation := nation ;
35074: LD_ADDR_OWVAR 21
35078: PUSH
35079: LD_VAR 0 1
35083: ST_TO_ADDR
// bc_level = 1 ;
35084: LD_ADDR_OWVAR 43
35088: PUSH
35089: LD_INT 1
35091: ST_TO_ADDR
// case btype of 1 :
35092: LD_VAR 0 2
35096: PUSH
35097: LD_INT 1
35099: DOUBLE
35100: EQUAL
35101: IFTRUE 35105
35103: GO 35116
35105: POP
// bc_type := b_depot ; 2 :
35106: LD_ADDR_OWVAR 42
35110: PUSH
35111: LD_INT 0
35113: ST_TO_ADDR
35114: GO 35736
35116: LD_INT 2
35118: DOUBLE
35119: EQUAL
35120: IFTRUE 35124
35122: GO 35135
35124: POP
// bc_type := b_warehouse ; 3 :
35125: LD_ADDR_OWVAR 42
35129: PUSH
35130: LD_INT 1
35132: ST_TO_ADDR
35133: GO 35736
35135: LD_INT 3
35137: DOUBLE
35138: EQUAL
35139: IFTRUE 35143
35141: GO 35154
35143: POP
// bc_type := b_lab ; 4 .. 9 :
35144: LD_ADDR_OWVAR 42
35148: PUSH
35149: LD_INT 6
35151: ST_TO_ADDR
35152: GO 35736
35154: LD_INT 4
35156: DOUBLE
35157: GREATEREQUAL
35158: IFFALSE 35166
35160: LD_INT 9
35162: DOUBLE
35163: LESSEQUAL
35164: IFTRUE 35168
35166: GO 35228
35168: POP
// begin bc_type := b_lab_half ;
35169: LD_ADDR_OWVAR 42
35173: PUSH
35174: LD_INT 7
35176: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
35177: LD_ADDR_OWVAR 44
35181: PUSH
35182: LD_INT 10
35184: PUSH
35185: LD_INT 11
35187: PUSH
35188: LD_INT 12
35190: PUSH
35191: LD_INT 15
35193: PUSH
35194: LD_INT 14
35196: PUSH
35197: LD_INT 13
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: PUSH
35208: LD_VAR 0 2
35212: PUSH
35213: LD_INT 3
35215: MINUS
35216: ARRAY
35217: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
35218: LD_ADDR_OWVAR 45
35222: PUSH
35223: LD_INT 9
35225: ST_TO_ADDR
// end ; 10 .. 13 :
35226: GO 35736
35228: LD_INT 10
35230: DOUBLE
35231: GREATEREQUAL
35232: IFFALSE 35240
35234: LD_INT 13
35236: DOUBLE
35237: LESSEQUAL
35238: IFTRUE 35242
35240: GO 35319
35242: POP
// begin bc_type := b_lab_full ;
35243: LD_ADDR_OWVAR 42
35247: PUSH
35248: LD_INT 8
35250: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
35251: LD_ADDR_OWVAR 44
35255: PUSH
35256: LD_INT 10
35258: PUSH
35259: LD_INT 12
35261: PUSH
35262: LD_INT 14
35264: PUSH
35265: LD_INT 13
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: PUSH
35274: LD_VAR 0 2
35278: PUSH
35279: LD_INT 9
35281: MINUS
35282: ARRAY
35283: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
35284: LD_ADDR_OWVAR 45
35288: PUSH
35289: LD_INT 11
35291: PUSH
35292: LD_INT 15
35294: PUSH
35295: LD_INT 12
35297: PUSH
35298: LD_INT 15
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: PUSH
35307: LD_VAR 0 2
35311: PUSH
35312: LD_INT 9
35314: MINUS
35315: ARRAY
35316: ST_TO_ADDR
// end ; 14 :
35317: GO 35736
35319: LD_INT 14
35321: DOUBLE
35322: EQUAL
35323: IFTRUE 35327
35325: GO 35338
35327: POP
// bc_type := b_workshop ; 15 :
35328: LD_ADDR_OWVAR 42
35332: PUSH
35333: LD_INT 2
35335: ST_TO_ADDR
35336: GO 35736
35338: LD_INT 15
35340: DOUBLE
35341: EQUAL
35342: IFTRUE 35346
35344: GO 35357
35346: POP
// bc_type := b_factory ; 16 :
35347: LD_ADDR_OWVAR 42
35351: PUSH
35352: LD_INT 3
35354: ST_TO_ADDR
35355: GO 35736
35357: LD_INT 16
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35365
35363: GO 35376
35365: POP
// bc_type := b_ext_gun ; 17 :
35366: LD_ADDR_OWVAR 42
35370: PUSH
35371: LD_INT 17
35373: ST_TO_ADDR
35374: GO 35736
35376: LD_INT 17
35378: DOUBLE
35379: EQUAL
35380: IFTRUE 35384
35382: GO 35412
35384: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
35385: LD_ADDR_OWVAR 42
35389: PUSH
35390: LD_INT 19
35392: PUSH
35393: LD_INT 23
35395: PUSH
35396: LD_INT 19
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: PUSH
35404: LD_VAR 0 1
35408: ARRAY
35409: ST_TO_ADDR
35410: GO 35736
35412: LD_INT 18
35414: DOUBLE
35415: EQUAL
35416: IFTRUE 35420
35418: GO 35431
35420: POP
// bc_type := b_ext_radar ; 19 :
35421: LD_ADDR_OWVAR 42
35425: PUSH
35426: LD_INT 20
35428: ST_TO_ADDR
35429: GO 35736
35431: LD_INT 19
35433: DOUBLE
35434: EQUAL
35435: IFTRUE 35439
35437: GO 35450
35439: POP
// bc_type := b_ext_radio ; 20 :
35440: LD_ADDR_OWVAR 42
35444: PUSH
35445: LD_INT 22
35447: ST_TO_ADDR
35448: GO 35736
35450: LD_INT 20
35452: DOUBLE
35453: EQUAL
35454: IFTRUE 35458
35456: GO 35469
35458: POP
// bc_type := b_ext_siberium ; 21 :
35459: LD_ADDR_OWVAR 42
35463: PUSH
35464: LD_INT 21
35466: ST_TO_ADDR
35467: GO 35736
35469: LD_INT 21
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35477
35475: GO 35488
35477: POP
// bc_type := b_ext_computer ; 22 :
35478: LD_ADDR_OWVAR 42
35482: PUSH
35483: LD_INT 24
35485: ST_TO_ADDR
35486: GO 35736
35488: LD_INT 22
35490: DOUBLE
35491: EQUAL
35492: IFTRUE 35496
35494: GO 35507
35496: POP
// bc_type := b_ext_track ; 23 :
35497: LD_ADDR_OWVAR 42
35501: PUSH
35502: LD_INT 16
35504: ST_TO_ADDR
35505: GO 35736
35507: LD_INT 23
35509: DOUBLE
35510: EQUAL
35511: IFTRUE 35515
35513: GO 35526
35515: POP
// bc_type := b_ext_laser ; 24 :
35516: LD_ADDR_OWVAR 42
35520: PUSH
35521: LD_INT 25
35523: ST_TO_ADDR
35524: GO 35736
35526: LD_INT 24
35528: DOUBLE
35529: EQUAL
35530: IFTRUE 35534
35532: GO 35545
35534: POP
// bc_type := b_control_tower ; 25 :
35535: LD_ADDR_OWVAR 42
35539: PUSH
35540: LD_INT 36
35542: ST_TO_ADDR
35543: GO 35736
35545: LD_INT 25
35547: DOUBLE
35548: EQUAL
35549: IFTRUE 35553
35551: GO 35564
35553: POP
// bc_type := b_breastwork ; 26 :
35554: LD_ADDR_OWVAR 42
35558: PUSH
35559: LD_INT 31
35561: ST_TO_ADDR
35562: GO 35736
35564: LD_INT 26
35566: DOUBLE
35567: EQUAL
35568: IFTRUE 35572
35570: GO 35583
35572: POP
// bc_type := b_bunker ; 27 :
35573: LD_ADDR_OWVAR 42
35577: PUSH
35578: LD_INT 32
35580: ST_TO_ADDR
35581: GO 35736
35583: LD_INT 27
35585: DOUBLE
35586: EQUAL
35587: IFTRUE 35591
35589: GO 35602
35591: POP
// bc_type := b_turret ; 28 :
35592: LD_ADDR_OWVAR 42
35596: PUSH
35597: LD_INT 33
35599: ST_TO_ADDR
35600: GO 35736
35602: LD_INT 28
35604: DOUBLE
35605: EQUAL
35606: IFTRUE 35610
35608: GO 35621
35610: POP
// bc_type := b_armoury ; 29 :
35611: LD_ADDR_OWVAR 42
35615: PUSH
35616: LD_INT 4
35618: ST_TO_ADDR
35619: GO 35736
35621: LD_INT 29
35623: DOUBLE
35624: EQUAL
35625: IFTRUE 35629
35627: GO 35640
35629: POP
// bc_type := b_barracks ; 30 :
35630: LD_ADDR_OWVAR 42
35634: PUSH
35635: LD_INT 5
35637: ST_TO_ADDR
35638: GO 35736
35640: LD_INT 30
35642: DOUBLE
35643: EQUAL
35644: IFTRUE 35648
35646: GO 35659
35648: POP
// bc_type := b_solar_power ; 31 :
35649: LD_ADDR_OWVAR 42
35653: PUSH
35654: LD_INT 27
35656: ST_TO_ADDR
35657: GO 35736
35659: LD_INT 31
35661: DOUBLE
35662: EQUAL
35663: IFTRUE 35667
35665: GO 35678
35667: POP
// bc_type := b_oil_power ; 32 :
35668: LD_ADDR_OWVAR 42
35672: PUSH
35673: LD_INT 26
35675: ST_TO_ADDR
35676: GO 35736
35678: LD_INT 32
35680: DOUBLE
35681: EQUAL
35682: IFTRUE 35686
35684: GO 35697
35686: POP
// bc_type := b_siberite_power ; 33 :
35687: LD_ADDR_OWVAR 42
35691: PUSH
35692: LD_INT 28
35694: ST_TO_ADDR
35695: GO 35736
35697: LD_INT 33
35699: DOUBLE
35700: EQUAL
35701: IFTRUE 35705
35703: GO 35716
35705: POP
// bc_type := b_oil_mine ; 34 :
35706: LD_ADDR_OWVAR 42
35710: PUSH
35711: LD_INT 29
35713: ST_TO_ADDR
35714: GO 35736
35716: LD_INT 34
35718: DOUBLE
35719: EQUAL
35720: IFTRUE 35724
35722: GO 35735
35724: POP
// bc_type := b_siberite_mine ; end ;
35725: LD_ADDR_OWVAR 42
35729: PUSH
35730: LD_INT 30
35732: ST_TO_ADDR
35733: GO 35736
35735: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35736: LD_ADDR_VAR 0 8
35740: PUSH
35741: LD_VAR 0 5
35745: PPUSH
35746: LD_VAR 0 6
35750: PPUSH
35751: LD_VAR 0 3
35755: PPUSH
35756: CALL_OW 47
35760: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35761: LD_OWVAR 42
35765: PUSH
35766: LD_INT 32
35768: PUSH
35769: LD_INT 33
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: IN
35776: IFFALSE 35792
// PlaceWeaponTurret ( b , weapon ) ;
35778: LD_VAR 0 8
35782: PPUSH
35783: LD_VAR 0 4
35787: PPUSH
35788: CALL_OW 431
// end ;
35792: LD_VAR 0 7
35796: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35797: LD_INT 0
35799: PPUSH
35800: PPUSH
35801: PPUSH
35802: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35803: LD_ADDR_VAR 0 4
35807: PUSH
35808: LD_INT 22
35810: PUSH
35811: LD_OWVAR 2
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 30
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 30
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: LIST
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PPUSH
35852: CALL_OW 69
35856: ST_TO_ADDR
// if not tmp then
35857: LD_VAR 0 4
35861: NOT
35862: IFFALSE 35866
// exit ;
35864: GO 35925
// for i in tmp do
35866: LD_ADDR_VAR 0 2
35870: PUSH
35871: LD_VAR 0 4
35875: PUSH
35876: FOR_IN
35877: IFFALSE 35923
// for j = 1 to 3 do
35879: LD_ADDR_VAR 0 3
35883: PUSH
35884: DOUBLE
35885: LD_INT 1
35887: DEC
35888: ST_TO_ADDR
35889: LD_INT 3
35891: PUSH
35892: FOR_TO
35893: IFFALSE 35919
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35895: LD_VAR 0 2
35899: PPUSH
35900: CALL_OW 274
35904: PPUSH
35905: LD_VAR 0 3
35909: PPUSH
35910: LD_INT 99999
35912: PPUSH
35913: CALL_OW 277
35917: GO 35892
35919: POP
35920: POP
35921: GO 35876
35923: POP
35924: POP
// end ;
35925: LD_VAR 0 1
35929: RET
// export function hHackSetLevel10 ; var i , j ; begin
35930: LD_INT 0
35932: PPUSH
35933: PPUSH
35934: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35935: LD_ADDR_VAR 0 2
35939: PUSH
35940: LD_INT 21
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PPUSH
35950: CALL_OW 69
35954: PUSH
35955: FOR_IN
35956: IFFALSE 36008
// if IsSelected ( i ) then
35958: LD_VAR 0 2
35962: PPUSH
35963: CALL_OW 306
35967: IFFALSE 36006
// begin for j := 1 to 4 do
35969: LD_ADDR_VAR 0 3
35973: PUSH
35974: DOUBLE
35975: LD_INT 1
35977: DEC
35978: ST_TO_ADDR
35979: LD_INT 4
35981: PUSH
35982: FOR_TO
35983: IFFALSE 36004
// SetSkill ( i , j , 10 ) ;
35985: LD_VAR 0 2
35989: PPUSH
35990: LD_VAR 0 3
35994: PPUSH
35995: LD_INT 10
35997: PPUSH
35998: CALL_OW 237
36002: GO 35982
36004: POP
36005: POP
// end ;
36006: GO 35955
36008: POP
36009: POP
// end ;
36010: LD_VAR 0 1
36014: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
36015: LD_INT 0
36017: PPUSH
36018: PPUSH
36019: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
36020: LD_ADDR_VAR 0 2
36024: PUSH
36025: LD_INT 22
36027: PUSH
36028: LD_OWVAR 2
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 21
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PPUSH
36051: CALL_OW 69
36055: PUSH
36056: FOR_IN
36057: IFFALSE 36098
// begin for j := 1 to 4 do
36059: LD_ADDR_VAR 0 3
36063: PUSH
36064: DOUBLE
36065: LD_INT 1
36067: DEC
36068: ST_TO_ADDR
36069: LD_INT 4
36071: PUSH
36072: FOR_TO
36073: IFFALSE 36094
// SetSkill ( i , j , 10 ) ;
36075: LD_VAR 0 2
36079: PPUSH
36080: LD_VAR 0 3
36084: PPUSH
36085: LD_INT 10
36087: PPUSH
36088: CALL_OW 237
36092: GO 36072
36094: POP
36095: POP
// end ;
36096: GO 36056
36098: POP
36099: POP
// end ;
36100: LD_VAR 0 1
36104: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
36105: LD_INT 0
36107: PPUSH
// uc_side := your_side ;
36108: LD_ADDR_OWVAR 20
36112: PUSH
36113: LD_OWVAR 2
36117: ST_TO_ADDR
// uc_nation := nation ;
36118: LD_ADDR_OWVAR 21
36122: PUSH
36123: LD_VAR 0 1
36127: ST_TO_ADDR
// InitHc ;
36128: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
36132: LD_INT 0
36134: PPUSH
36135: LD_VAR 0 2
36139: PPUSH
36140: LD_VAR 0 3
36144: PPUSH
36145: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
36149: LD_VAR 0 4
36153: PPUSH
36154: LD_VAR 0 5
36158: PPUSH
36159: CALL_OW 428
36163: PUSH
36164: LD_INT 0
36166: EQUAL
36167: IFFALSE 36191
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
36169: CALL_OW 44
36173: PPUSH
36174: LD_VAR 0 4
36178: PPUSH
36179: LD_VAR 0 5
36183: PPUSH
36184: LD_INT 1
36186: PPUSH
36187: CALL_OW 48
// end ;
36191: LD_VAR 0 6
36195: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
36196: LD_INT 0
36198: PPUSH
36199: PPUSH
// uc_side := your_side ;
36200: LD_ADDR_OWVAR 20
36204: PUSH
36205: LD_OWVAR 2
36209: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
36210: LD_VAR 0 1
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: LD_INT 3
36223: PUSH
36224: LD_INT 4
36226: PUSH
36227: LD_INT 5
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: IN
36237: IFFALSE 36249
// uc_nation := nation_american else
36239: LD_ADDR_OWVAR 21
36243: PUSH
36244: LD_INT 1
36246: ST_TO_ADDR
36247: GO 36292
// if chassis in [ 11 , 12 , 13 , 14 ] then
36249: LD_VAR 0 1
36253: PUSH
36254: LD_INT 11
36256: PUSH
36257: LD_INT 12
36259: PUSH
36260: LD_INT 13
36262: PUSH
36263: LD_INT 14
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: IN
36272: IFFALSE 36284
// uc_nation := nation_arabian else
36274: LD_ADDR_OWVAR 21
36278: PUSH
36279: LD_INT 2
36281: ST_TO_ADDR
36282: GO 36292
// uc_nation := nation_russian ;
36284: LD_ADDR_OWVAR 21
36288: PUSH
36289: LD_INT 3
36291: ST_TO_ADDR
// vc_chassis := chassis ;
36292: LD_ADDR_OWVAR 37
36296: PUSH
36297: LD_VAR 0 1
36301: ST_TO_ADDR
// vc_engine := engine ;
36302: LD_ADDR_OWVAR 39
36306: PUSH
36307: LD_VAR 0 2
36311: ST_TO_ADDR
// vc_control := control ;
36312: LD_ADDR_OWVAR 38
36316: PUSH
36317: LD_VAR 0 3
36321: ST_TO_ADDR
// vc_weapon := weapon ;
36322: LD_ADDR_OWVAR 40
36326: PUSH
36327: LD_VAR 0 4
36331: ST_TO_ADDR
// un := CreateVehicle ;
36332: LD_ADDR_VAR 0 8
36336: PUSH
36337: CALL_OW 45
36341: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
36342: LD_VAR 0 8
36346: PPUSH
36347: LD_INT 0
36349: PPUSH
36350: LD_INT 5
36352: PPUSH
36353: CALL_OW 12
36357: PPUSH
36358: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
36362: LD_VAR 0 8
36366: PPUSH
36367: LD_VAR 0 5
36371: PPUSH
36372: LD_VAR 0 6
36376: PPUSH
36377: LD_INT 1
36379: PPUSH
36380: CALL_OW 48
// end ;
36384: LD_VAR 0 7
36388: RET
// export hInvincible ; every 1 do
36389: GO 36391
36391: DISABLE
// hInvincible := [ ] ;
36392: LD_ADDR_EXP 108
36396: PUSH
36397: EMPTY
36398: ST_TO_ADDR
36399: END
// every 10 do var i ;
36400: GO 36402
36402: DISABLE
36403: LD_INT 0
36405: PPUSH
// begin enable ;
36406: ENABLE
// if not hInvincible then
36407: LD_EXP 108
36411: NOT
36412: IFFALSE 36416
// exit ;
36414: GO 36460
// for i in hInvincible do
36416: LD_ADDR_VAR 0 1
36420: PUSH
36421: LD_EXP 108
36425: PUSH
36426: FOR_IN
36427: IFFALSE 36458
// if GetLives ( i ) < 1000 then
36429: LD_VAR 0 1
36433: PPUSH
36434: CALL_OW 256
36438: PUSH
36439: LD_INT 1000
36441: LESS
36442: IFFALSE 36456
// SetLives ( i , 1000 ) ;
36444: LD_VAR 0 1
36448: PPUSH
36449: LD_INT 1000
36451: PPUSH
36452: CALL_OW 234
36456: GO 36426
36458: POP
36459: POP
// end ;
36460: PPOPN 1
36462: END
// export function hHackInvincible ; var i ; begin
36463: LD_INT 0
36465: PPUSH
36466: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
36467: LD_ADDR_VAR 0 2
36471: PUSH
36472: LD_INT 2
36474: PUSH
36475: LD_INT 21
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 21
36487: PUSH
36488: LD_INT 2
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: LIST
36499: PPUSH
36500: CALL_OW 69
36504: PUSH
36505: FOR_IN
36506: IFFALSE 36567
// if IsSelected ( i ) then
36508: LD_VAR 0 2
36512: PPUSH
36513: CALL_OW 306
36517: IFFALSE 36565
// begin if i in hInvincible then
36519: LD_VAR 0 2
36523: PUSH
36524: LD_EXP 108
36528: IN
36529: IFFALSE 36549
// hInvincible := hInvincible diff i else
36531: LD_ADDR_EXP 108
36535: PUSH
36536: LD_EXP 108
36540: PUSH
36541: LD_VAR 0 2
36545: DIFF
36546: ST_TO_ADDR
36547: GO 36565
// hInvincible := hInvincible union i ;
36549: LD_ADDR_EXP 108
36553: PUSH
36554: LD_EXP 108
36558: PUSH
36559: LD_VAR 0 2
36563: UNION
36564: ST_TO_ADDR
// end ;
36565: GO 36505
36567: POP
36568: POP
// end ;
36569: LD_VAR 0 1
36573: RET
// export function hHackInvisible ; var i , j ; begin
36574: LD_INT 0
36576: PPUSH
36577: PPUSH
36578: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36579: LD_ADDR_VAR 0 2
36583: PUSH
36584: LD_INT 21
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PPUSH
36594: CALL_OW 69
36598: PUSH
36599: FOR_IN
36600: IFFALSE 36624
// if IsSelected ( i ) then
36602: LD_VAR 0 2
36606: PPUSH
36607: CALL_OW 306
36611: IFFALSE 36622
// ComForceInvisible ( i ) ;
36613: LD_VAR 0 2
36617: PPUSH
36618: CALL_OW 496
36622: GO 36599
36624: POP
36625: POP
// end ;
36626: LD_VAR 0 1
36630: RET
// export function hHackChangeYourSide ; begin
36631: LD_INT 0
36633: PPUSH
// if your_side = 8 then
36634: LD_OWVAR 2
36638: PUSH
36639: LD_INT 8
36641: EQUAL
36642: IFFALSE 36654
// your_side := 0 else
36644: LD_ADDR_OWVAR 2
36648: PUSH
36649: LD_INT 0
36651: ST_TO_ADDR
36652: GO 36668
// your_side := your_side + 1 ;
36654: LD_ADDR_OWVAR 2
36658: PUSH
36659: LD_OWVAR 2
36663: PUSH
36664: LD_INT 1
36666: PLUS
36667: ST_TO_ADDR
// end ;
36668: LD_VAR 0 1
36672: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36673: LD_INT 0
36675: PPUSH
36676: PPUSH
36677: PPUSH
// for i in all_units do
36678: LD_ADDR_VAR 0 2
36682: PUSH
36683: LD_OWVAR 3
36687: PUSH
36688: FOR_IN
36689: IFFALSE 36767
// if IsSelected ( i ) then
36691: LD_VAR 0 2
36695: PPUSH
36696: CALL_OW 306
36700: IFFALSE 36765
// begin j := GetSide ( i ) ;
36702: LD_ADDR_VAR 0 3
36706: PUSH
36707: LD_VAR 0 2
36711: PPUSH
36712: CALL_OW 255
36716: ST_TO_ADDR
// if j = 8 then
36717: LD_VAR 0 3
36721: PUSH
36722: LD_INT 8
36724: EQUAL
36725: IFFALSE 36737
// j := 0 else
36727: LD_ADDR_VAR 0 3
36731: PUSH
36732: LD_INT 0
36734: ST_TO_ADDR
36735: GO 36751
// j := j + 1 ;
36737: LD_ADDR_VAR 0 3
36741: PUSH
36742: LD_VAR 0 3
36746: PUSH
36747: LD_INT 1
36749: PLUS
36750: ST_TO_ADDR
// SetSide ( i , j ) ;
36751: LD_VAR 0 2
36755: PPUSH
36756: LD_VAR 0 3
36760: PPUSH
36761: CALL_OW 235
// end ;
36765: GO 36688
36767: POP
36768: POP
// end ;
36769: LD_VAR 0 1
36773: RET
// export function hHackFog ; begin
36774: LD_INT 0
36776: PPUSH
// FogOff ( true ) ;
36777: LD_INT 1
36779: PPUSH
36780: CALL_OW 344
// end ;
36784: LD_VAR 0 1
36788: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36789: LD_INT 0
36791: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36792: LD_VAR 0 1
36796: PPUSH
36797: LD_VAR 0 2
36801: PPUSH
36802: LD_VAR 0 3
36806: PPUSH
36807: LD_INT 1
36809: PPUSH
36810: LD_INT 1
36812: PPUSH
36813: CALL_OW 483
// CenterOnXY ( x , y ) ;
36817: LD_VAR 0 2
36821: PPUSH
36822: LD_VAR 0 3
36826: PPUSH
36827: CALL_OW 84
// end ;
36831: LD_VAR 0 4
36835: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36836: LD_INT 0
36838: PPUSH
36839: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36840: LD_VAR 0 1
36844: NOT
36845: IFTRUE 36864
36847: PUSH
36848: LD_VAR 0 2
36852: PPUSH
36853: LD_VAR 0 3
36857: PPUSH
36858: CALL_OW 488
36862: NOT
36863: OR
36864: IFTRUE 36899
36866: PUSH
36867: LD_VAR 0 1
36871: PPUSH
36872: CALL_OW 266
36876: PUSH
36877: LD_INT 3
36879: NONEQUAL
36880: IFFALSE 36898
36882: PUSH
36883: LD_VAR 0 1
36887: PPUSH
36888: CALL_OW 247
36892: PUSH
36893: LD_INT 1
36895: EQUAL
36896: NOT
36897: AND
36898: OR
36899: IFFALSE 36903
// exit ;
36901: GO 37185
// if GetType ( factory ) = unit_human then
36903: LD_VAR 0 1
36907: PPUSH
36908: CALL_OW 247
36912: PUSH
36913: LD_INT 1
36915: EQUAL
36916: IFFALSE 36933
// factory := IsInUnit ( factory ) ;
36918: LD_ADDR_VAR 0 1
36922: PUSH
36923: LD_VAR 0 1
36927: PPUSH
36928: CALL_OW 310
36932: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36933: LD_VAR 0 1
36937: PPUSH
36938: CALL_OW 266
36942: PUSH
36943: LD_INT 3
36945: NONEQUAL
36946: IFFALSE 36950
// exit ;
36948: GO 37185
// for i := 1 to Count ( factoryWaypoints ) do
36950: LD_ADDR_VAR 0 5
36954: PUSH
36955: DOUBLE
36956: LD_INT 1
36958: DEC
36959: ST_TO_ADDR
36960: LD_EXP 109
36964: PPUSH
36965: CALL 46889 0 1
36969: PUSH
36970: FOR_TO
36971: IFFALSE 37133
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
36973: LD_VAR 0 2
36977: PPUSH
36978: LD_VAR 0 3
36982: PPUSH
36983: CALL_OW 428
36987: PUSH
36988: LD_EXP 109
36992: PUSH
36993: LD_VAR 0 5
36997: ARRAY
36998: PUSH
36999: LD_INT 2
37001: ARRAY
37002: EQUAL
37003: IFFALSE 37035
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
37005: LD_ADDR_EXP 109
37009: PUSH
37010: LD_EXP 109
37014: PPUSH
37015: LD_VAR 0 5
37019: PPUSH
37020: CALL_OW 3
37024: ST_TO_ADDR
// UpdateFactoryWaypoints ;
37025: CALL 37190 0 0
// exit ;
37029: POP
37030: POP
37031: GO 37185
// end else
37033: GO 37131
// if factory = factoryWaypoints [ i ] [ 2 ] then
37035: LD_VAR 0 1
37039: PUSH
37040: LD_EXP 109
37044: PUSH
37045: LD_VAR 0 5
37049: ARRAY
37050: PUSH
37051: LD_INT 2
37053: ARRAY
37054: EQUAL
37055: IFFALSE 37131
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
37057: LD_ADDR_EXP 109
37061: PUSH
37062: LD_EXP 109
37066: PPUSH
37067: LD_VAR 0 5
37071: PPUSH
37072: CALL_OW 3
37076: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
37077: LD_ADDR_EXP 109
37081: PUSH
37082: LD_EXP 109
37086: PPUSH
37087: LD_VAR 0 1
37091: PPUSH
37092: CALL_OW 255
37096: PUSH
37097: LD_VAR 0 1
37101: PUSH
37102: LD_VAR 0 2
37106: PUSH
37107: LD_VAR 0 3
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: PPUSH
37118: CALL 82855 0 2
37122: ST_TO_ADDR
// UpdateFactoryWaypoints ;
37123: CALL 37190 0 0
// exit ;
37127: POP
37128: POP
37129: GO 37185
// end ; end ;
37131: GO 36970
37133: POP
37134: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
37135: LD_ADDR_EXP 109
37139: PUSH
37140: LD_EXP 109
37144: PPUSH
37145: LD_VAR 0 1
37149: PPUSH
37150: CALL_OW 255
37154: PUSH
37155: LD_VAR 0 1
37159: PUSH
37160: LD_VAR 0 2
37164: PUSH
37165: LD_VAR 0 3
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: PPUSH
37176: CALL 82855 0 2
37180: ST_TO_ADDR
// UpdateFactoryWaypoints ;
37181: CALL 37190 0 0
// end ;
37185: LD_VAR 0 4
37189: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
37190: LD_INT 0
37192: PPUSH
37193: PPUSH
37194: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
37195: LD_STRING resetFactoryWaypoint();
37197: PPUSH
37198: CALL_OW 559
// if factoryWaypoints then
37202: LD_EXP 109
37206: IFFALSE 37327
// begin list := factoryWaypoints ;
37208: LD_ADDR_VAR 0 3
37212: PUSH
37213: LD_EXP 109
37217: ST_TO_ADDR
// for i := 1 to list do
37218: LD_ADDR_VAR 0 2
37222: PUSH
37223: DOUBLE
37224: LD_INT 1
37226: DEC
37227: ST_TO_ADDR
37228: LD_VAR 0 3
37232: PUSH
37233: FOR_TO
37234: IFFALSE 37325
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
37236: LD_STRING setFactoryWaypointXY(
37238: PUSH
37239: LD_VAR 0 3
37243: PUSH
37244: LD_VAR 0 2
37248: ARRAY
37249: PUSH
37250: LD_INT 1
37252: ARRAY
37253: STR
37254: PUSH
37255: LD_STRING ,
37257: STR
37258: PUSH
37259: LD_VAR 0 3
37263: PUSH
37264: LD_VAR 0 2
37268: ARRAY
37269: PUSH
37270: LD_INT 2
37272: ARRAY
37273: STR
37274: PUSH
37275: LD_STRING ,
37277: STR
37278: PUSH
37279: LD_VAR 0 3
37283: PUSH
37284: LD_VAR 0 2
37288: ARRAY
37289: PUSH
37290: LD_INT 3
37292: ARRAY
37293: STR
37294: PUSH
37295: LD_STRING ,
37297: STR
37298: PUSH
37299: LD_VAR 0 3
37303: PUSH
37304: LD_VAR 0 2
37308: ARRAY
37309: PUSH
37310: LD_INT 4
37312: ARRAY
37313: STR
37314: PUSH
37315: LD_STRING )
37317: STR
37318: PPUSH
37319: CALL_OW 559
37323: GO 37233
37325: POP
37326: POP
// end ; end ;
37327: LD_VAR 0 1
37331: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
37332: LD_INT 0
37334: PPUSH
// if HexInfo ( x , y ) = warehouse then
37335: LD_VAR 0 2
37339: PPUSH
37340: LD_VAR 0 3
37344: PPUSH
37345: CALL_OW 428
37349: PUSH
37350: LD_VAR 0 1
37354: EQUAL
37355: IFFALSE 37382
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
37357: LD_ADDR_EXP 111
37361: PUSH
37362: LD_EXP 111
37366: PPUSH
37367: LD_VAR 0 1
37371: PPUSH
37372: LD_INT 0
37374: PPUSH
37375: CALL_OW 1
37379: ST_TO_ADDR
37380: GO 37433
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
37382: LD_ADDR_EXP 111
37386: PUSH
37387: LD_EXP 111
37391: PPUSH
37392: LD_VAR 0 1
37396: PPUSH
37397: LD_VAR 0 1
37401: PPUSH
37402: CALL_OW 255
37406: PUSH
37407: LD_VAR 0 1
37411: PUSH
37412: LD_VAR 0 2
37416: PUSH
37417: LD_VAR 0 3
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: PPUSH
37428: CALL_OW 1
37432: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
37433: CALL 37442 0 0
// end ;
37437: LD_VAR 0 4
37441: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
37442: LD_INT 0
37444: PPUSH
37445: PPUSH
37446: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
37447: LD_STRING resetWarehouseGatheringPoints();
37449: PPUSH
37450: CALL_OW 559
// if warehouseGatheringPoints then
37454: LD_EXP 111
37458: IFFALSE 37584
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
37460: LD_ADDR_VAR 0 3
37464: PUSH
37465: LD_EXP 111
37469: PPUSH
37470: CALL 86789 0 1
37474: ST_TO_ADDR
// for i := 1 to list do
37475: LD_ADDR_VAR 0 2
37479: PUSH
37480: DOUBLE
37481: LD_INT 1
37483: DEC
37484: ST_TO_ADDR
37485: LD_VAR 0 3
37489: PUSH
37490: FOR_TO
37491: IFFALSE 37582
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
37493: LD_STRING setWarehouseGatheringPointXY(
37495: PUSH
37496: LD_VAR 0 3
37500: PUSH
37501: LD_VAR 0 2
37505: ARRAY
37506: PUSH
37507: LD_INT 1
37509: ARRAY
37510: STR
37511: PUSH
37512: LD_STRING ,
37514: STR
37515: PUSH
37516: LD_VAR 0 3
37520: PUSH
37521: LD_VAR 0 2
37525: ARRAY
37526: PUSH
37527: LD_INT 2
37529: ARRAY
37530: STR
37531: PUSH
37532: LD_STRING ,
37534: STR
37535: PUSH
37536: LD_VAR 0 3
37540: PUSH
37541: LD_VAR 0 2
37545: ARRAY
37546: PUSH
37547: LD_INT 3
37549: ARRAY
37550: STR
37551: PUSH
37552: LD_STRING ,
37554: STR
37555: PUSH
37556: LD_VAR 0 3
37560: PUSH
37561: LD_VAR 0 2
37565: ARRAY
37566: PUSH
37567: LD_INT 4
37569: ARRAY
37570: STR
37571: PUSH
37572: LD_STRING )
37574: STR
37575: PPUSH
37576: CALL_OW 559
37580: GO 37490
37582: POP
37583: POP
// end ; end ;
37584: LD_VAR 0 1
37588: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
37589: LD_EXP 111
37593: IFFALSE 38288
37595: GO 37597
37597: DISABLE
37598: LD_INT 0
37600: PPUSH
37601: PPUSH
37602: PPUSH
37603: PPUSH
37604: PPUSH
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
// begin enable ;
37609: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
37610: LD_ADDR_VAR 0 3
37614: PUSH
37615: LD_EXP 111
37619: PPUSH
37620: CALL 86789 0 1
37624: ST_TO_ADDR
// if not list then
37625: LD_VAR 0 3
37629: NOT
37630: IFFALSE 37634
// exit ;
37632: GO 38288
// for i := 1 to list do
37634: LD_ADDR_VAR 0 1
37638: PUSH
37639: DOUBLE
37640: LD_INT 1
37642: DEC
37643: ST_TO_ADDR
37644: LD_VAR 0 3
37648: PUSH
37649: FOR_TO
37650: IFFALSE 38286
// begin depot := list [ i ] [ 2 ] ;
37652: LD_ADDR_VAR 0 8
37656: PUSH
37657: LD_VAR 0 3
37661: PUSH
37662: LD_VAR 0 1
37666: ARRAY
37667: PUSH
37668: LD_INT 2
37670: ARRAY
37671: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
37672: LD_ADDR_VAR 0 5
37676: PUSH
37677: LD_VAR 0 3
37681: PUSH
37682: LD_VAR 0 1
37686: ARRAY
37687: PUSH
37688: LD_INT 1
37690: ARRAY
37691: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
37692: LD_VAR 0 8
37696: PPUSH
37697: CALL_OW 301
37701: IFTRUE 37720
37703: PUSH
37704: LD_VAR 0 5
37708: PUSH
37709: LD_VAR 0 8
37713: PPUSH
37714: CALL_OW 255
37718: NONEQUAL
37719: OR
37720: IFFALSE 37749
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
37722: LD_ADDR_EXP 111
37726: PUSH
37727: LD_EXP 111
37731: PPUSH
37732: LD_VAR 0 8
37736: PPUSH
37737: LD_INT 0
37739: PPUSH
37740: CALL_OW 1
37744: ST_TO_ADDR
// exit ;
37745: POP
37746: POP
37747: GO 38288
// end ; x := list [ i ] [ 3 ] ;
37749: LD_ADDR_VAR 0 6
37753: PUSH
37754: LD_VAR 0 3
37758: PUSH
37759: LD_VAR 0 1
37763: ARRAY
37764: PUSH
37765: LD_INT 3
37767: ARRAY
37768: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
37769: LD_ADDR_VAR 0 7
37773: PUSH
37774: LD_VAR 0 3
37778: PUSH
37779: LD_VAR 0 1
37783: ARRAY
37784: PUSH
37785: LD_INT 4
37787: ARRAY
37788: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
37789: LD_ADDR_VAR 0 9
37793: PUSH
37794: LD_VAR 0 6
37798: PPUSH
37799: LD_VAR 0 7
37803: PPUSH
37804: LD_INT 16
37806: PPUSH
37807: CALL 85363 0 3
37811: ST_TO_ADDR
// if not cratesNearbyPoint then
37812: LD_VAR 0 9
37816: NOT
37817: IFFALSE 37823
// exit ;
37819: POP
37820: POP
37821: GO 38288
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
37823: LD_ADDR_VAR 0 4
37827: PUSH
37828: LD_INT 22
37830: PUSH
37831: LD_VAR 0 5
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 3
37842: PUSH
37843: LD_INT 60
37845: PUSH
37846: EMPTY
37847: LIST
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 91
37855: PUSH
37856: LD_VAR 0 8
37860: PUSH
37861: LD_INT 6
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: LD_INT 25
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 25
37884: PUSH
37885: LD_INT 16
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: LIST
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: PPUSH
37903: CALL_OW 69
37907: PUSH
37908: LD_VAR 0 8
37912: PPUSH
37913: CALL_OW 313
37917: PPUSH
37918: LD_INT 3
37920: PUSH
37921: LD_INT 60
37923: PUSH
37924: EMPTY
37925: LIST
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 2
37933: PUSH
37934: LD_INT 25
37936: PUSH
37937: LD_INT 2
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 25
37946: PUSH
37947: LD_INT 16
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PPUSH
37963: CALL_OW 72
37967: UNION
37968: ST_TO_ADDR
// if tmp then
37969: LD_VAR 0 4
37973: IFFALSE 38053
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37975: LD_ADDR_VAR 0 4
37979: PUSH
37980: LD_VAR 0 4
37984: PPUSH
37985: LD_INT 3
37987: PPUSH
37988: CALL 83170 0 2
37992: ST_TO_ADDR
// for j in tmp do
37993: LD_ADDR_VAR 0 2
37997: PUSH
37998: LD_VAR 0 4
38002: PUSH
38003: FOR_IN
38004: IFFALSE 38047
// begin if IsInUnit ( j ) then
38006: LD_VAR 0 2
38010: PPUSH
38011: CALL_OW 310
38015: IFFALSE 38026
// ComExit ( j ) ;
38017: LD_VAR 0 2
38021: PPUSH
38022: CALL 83253 0 1
// AddComCollect ( j , x , y ) ;
38026: LD_VAR 0 2
38030: PPUSH
38031: LD_VAR 0 6
38035: PPUSH
38036: LD_VAR 0 7
38040: PPUSH
38041: CALL_OW 177
// end ;
38045: GO 38003
38047: POP
38048: POP
// exit ;
38049: POP
38050: POP
38051: GO 38288
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
38053: LD_ADDR_VAR 0 4
38057: PUSH
38058: LD_INT 22
38060: PUSH
38061: LD_VAR 0 5
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 91
38072: PUSH
38073: LD_VAR 0 8
38077: PUSH
38078: LD_INT 8
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: LD_INT 34
38091: PUSH
38092: LD_INT 12
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 34
38101: PUSH
38102: LD_INT 51
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 34
38111: PUSH
38112: LD_INT 32
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 34
38121: PUSH
38122: LD_INT 89
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: LIST
38140: PPUSH
38141: CALL_OW 69
38145: ST_TO_ADDR
// if tmp then
38146: LD_VAR 0 4
38150: IFFALSE 38284
// begin for j in tmp do
38152: LD_ADDR_VAR 0 2
38156: PUSH
38157: LD_VAR 0 4
38161: PUSH
38162: FOR_IN
38163: IFFALSE 38282
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
38165: LD_VAR 0 2
38169: PPUSH
38170: CALL_OW 262
38174: PUSH
38175: LD_INT 3
38177: EQUAL
38178: IFTRUE 38195
38180: PUSH
38181: LD_VAR 0 2
38185: PPUSH
38186: CALL_OW 261
38190: PUSH
38191: LD_INT 20
38193: GREATER
38194: OR
38195: IFFALSE 38209
38197: PUSH
38198: LD_VAR 0 2
38202: PPUSH
38203: CALL_OW 314
38207: NOT
38208: AND
38209: IFFALSE 38239
38211: PUSH
38212: LD_VAR 0 2
38216: PPUSH
38217: CALL_OW 263
38221: PUSH
38222: LD_INT 1
38224: NONEQUAL
38225: IFTRUE 38238
38227: PUSH
38228: LD_VAR 0 2
38232: PPUSH
38233: CALL_OW 311
38237: OR
38238: AND
38239: IFFALSE 38280
// begin ComCollect ( j , x , y ) ;
38241: LD_VAR 0 2
38245: PPUSH
38246: LD_VAR 0 6
38250: PPUSH
38251: LD_VAR 0 7
38255: PPUSH
38256: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
38260: LD_VAR 0 2
38264: PPUSH
38265: LD_VAR 0 8
38269: PPUSH
38270: CALL_OW 172
// exit ;
38274: POP
38275: POP
38276: POP
38277: POP
38278: GO 38288
// end ;
38280: GO 38162
38282: POP
38283: POP
// end ; end ;
38284: GO 37649
38286: POP
38287: POP
// end ; end_of_file
38288: PPOPN 9
38290: END
// export function SOS_UnitDestroyed ( un ) ; begin
38291: LD_INT 0
38293: PPUSH
// ComRadiation ( un ) ;
38294: LD_VAR 0 1
38298: PPUSH
38299: CALL 39461 0 1
// end ;
38303: LD_VAR 0 2
38307: RET
// export function SOS_UnitKamikazed ( un ) ; begin
38308: LD_INT 0
38310: PPUSH
// ComRadiation ( un ) ;
38311: LD_VAR 0 1
38315: PPUSH
38316: CALL 39461 0 1
// end ;
38320: LD_VAR 0 2
38324: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
38325: LD_INT 0
38327: PPUSH
// end ;
38328: LD_VAR 0 4
38332: RET
// export function SOS_Command ( cmd ) ; begin
38333: LD_INT 0
38335: PPUSH
// end ;
38336: LD_VAR 0 2
38340: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
38341: LD_INT 0
38343: PPUSH
// end ;
38344: LD_VAR 0 6
38348: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
38349: LD_INT 0
38351: PPUSH
38352: PPUSH
38353: PPUSH
38354: PPUSH
38355: PPUSH
// if not vehicle or not factory then
38356: LD_VAR 0 1
38360: NOT
38361: IFTRUE 38370
38363: PUSH
38364: LD_VAR 0 2
38368: NOT
38369: OR
38370: IFFALSE 38374
// exit ;
38372: GO 39036
// weapon := GetWeapon ( vehicle ) ;
38374: LD_ADDR_VAR 0 7
38378: PUSH
38379: LD_VAR 0 1
38383: PPUSH
38384: CALL_OW 264
38388: ST_TO_ADDR
// if weapon = ar_miner then
38389: LD_VAR 0 7
38393: PUSH
38394: LD_INT 81
38396: EQUAL
38397: IFFALSE 38454
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
38399: LD_ADDR_EXP 120
38403: PUSH
38404: LD_EXP 120
38408: PPUSH
38409: LD_EXP 120
38413: PUSH
38414: LD_INT 1
38416: PLUS
38417: PPUSH
38418: LD_VAR 0 1
38422: PPUSH
38423: CALL_OW 1
38427: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38428: LD_ADDR_EXP 121
38432: PUSH
38433: LD_EXP 121
38437: PPUSH
38438: LD_EXP 121
38442: PUSH
38443: LD_INT 1
38445: PLUS
38446: PPUSH
38447: EMPTY
38448: PPUSH
38449: CALL_OW 1
38453: ST_TO_ADDR
// end ; if not factoryWaypoints then
38454: LD_EXP 109
38458: NOT
38459: IFFALSE 38463
// exit ;
38461: GO 39036
// for i := 1 to Count ( factoryWaypoints ) do
38463: LD_ADDR_VAR 0 4
38467: PUSH
38468: DOUBLE
38469: LD_INT 1
38471: DEC
38472: ST_TO_ADDR
38473: LD_EXP 109
38477: PPUSH
38478: CALL 46889 0 1
38482: PUSH
38483: FOR_TO
38484: IFFALSE 39034
// if factoryWaypoints [ i ] [ 2 ] = factory then
38486: LD_EXP 109
38490: PUSH
38491: LD_VAR 0 4
38495: ARRAY
38496: PUSH
38497: LD_INT 2
38499: ARRAY
38500: PUSH
38501: LD_VAR 0 2
38505: EQUAL
38506: IFFALSE 39032
// begin if GetControl ( vehicle ) = control_manual then
38508: LD_VAR 0 1
38512: PPUSH
38513: CALL_OW 263
38517: PUSH
38518: LD_INT 1
38520: EQUAL
38521: IFFALSE 38885
// begin driver := IsDrivenBy ( vehicle ) ;
38523: LD_ADDR_VAR 0 5
38527: PUSH
38528: LD_VAR 0 1
38532: PPUSH
38533: CALL_OW 311
38537: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
38538: LD_VAR 0 5
38542: PUSH
38543: LD_EXP 110
38547: IN
38548: IFTRUE 38562
38550: PUSH
38551: LD_VAR 0 1
38555: PUSH
38556: LD_EXP 110
38560: IN
38561: OR
38562: IFFALSE 38568
// exit ;
38564: POP
38565: POP
38566: GO 39036
// if not HasTask ( driver ) then
38568: LD_VAR 0 5
38572: PPUSH
38573: CALL_OW 314
38577: NOT
38578: IFFALSE 38883
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
38580: LD_ADDR_EXP 110
38584: PUSH
38585: LD_EXP 110
38589: PPUSH
38590: LD_VAR 0 5
38594: PPUSH
38595: CALL 82855 0 2
38599: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
38600: LD_ADDR_EXP 110
38604: PUSH
38605: LD_EXP 110
38609: PPUSH
38610: LD_VAR 0 1
38614: PPUSH
38615: CALL 82855 0 2
38619: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38620: LD_ADDR_VAR 0 6
38624: PUSH
38625: LD_EXP 109
38629: PUSH
38630: LD_VAR 0 4
38634: ARRAY
38635: PUSH
38636: LD_INT 3
38638: ARRAY
38639: PPUSH
38640: LD_EXP 109
38644: PUSH
38645: LD_VAR 0 4
38649: ARRAY
38650: PUSH
38651: LD_INT 4
38653: ARRAY
38654: PPUSH
38655: CALL_OW 428
38659: ST_TO_ADDR
// if hex then
38660: LD_VAR 0 6
38664: IFFALSE 38682
// ComMoveUnit ( driver , hex ) else
38666: LD_VAR 0 5
38670: PPUSH
38671: LD_VAR 0 6
38675: PPUSH
38676: CALL_OW 112
38680: GO 38766
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
38682: LD_VAR 0 1
38686: PPUSH
38687: LD_EXP 109
38691: PUSH
38692: LD_VAR 0 4
38696: ARRAY
38697: PUSH
38698: LD_INT 3
38700: ARRAY
38701: PPUSH
38702: LD_EXP 109
38706: PUSH
38707: LD_VAR 0 4
38711: ARRAY
38712: PUSH
38713: LD_INT 4
38715: ARRAY
38716: PPUSH
38717: CALL_OW 297
38721: PUSH
38722: LD_INT 0
38724: GREATER
38725: IFFALSE 38766
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38727: LD_VAR 0 5
38731: PPUSH
38732: LD_EXP 109
38736: PUSH
38737: LD_VAR 0 4
38741: ARRAY
38742: PUSH
38743: LD_INT 3
38745: ARRAY
38746: PPUSH
38747: LD_EXP 109
38751: PUSH
38752: LD_VAR 0 4
38756: ARRAY
38757: PUSH
38758: LD_INT 4
38760: ARRAY
38761: PPUSH
38762: CALL_OW 111
// AddComExitVehicle ( driver ) ;
38766: LD_VAR 0 5
38770: PPUSH
38771: CALL_OW 181
// if Multiplayer then
38775: LD_OWVAR 4
38779: IFFALSE 38828
// begin repeat wait ( 10 ) ;
38781: LD_INT 10
38783: PPUSH
38784: CALL_OW 67
// until not IsInUnit ( driver ) ;
38788: LD_VAR 0 5
38792: PPUSH
38793: CALL_OW 310
38797: NOT
38798: IFFALSE 38781
// if not HasTask ( driver ) then
38800: LD_VAR 0 5
38804: PPUSH
38805: CALL_OW 314
38809: NOT
38810: IFFALSE 38826
// ComEnterUnit ( driver , factory ) ;
38812: LD_VAR 0 5
38816: PPUSH
38817: LD_VAR 0 2
38821: PPUSH
38822: CALL_OW 120
// end else
38826: GO 38842
// AddComEnterUnit ( driver , factory ) ;
38828: LD_VAR 0 5
38832: PPUSH
38833: LD_VAR 0 2
38837: PPUSH
38838: CALL_OW 180
// wait ( 0 0$1 ) ;
38842: LD_INT 35
38844: PPUSH
38845: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
38849: LD_ADDR_EXP 110
38853: PUSH
38854: LD_EXP 110
38858: PUSH
38859: LD_VAR 0 5
38863: DIFF
38864: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
38865: LD_ADDR_EXP 110
38869: PUSH
38870: LD_EXP 110
38874: PUSH
38875: LD_VAR 0 1
38879: DIFF
38880: ST_TO_ADDR
// break ;
38881: GO 39034
// end ; end else
38883: GO 39032
// if GetControl ( vehicle ) = control_remote then
38885: LD_VAR 0 1
38889: PPUSH
38890: CALL_OW 263
38894: PUSH
38895: LD_INT 2
38897: EQUAL
38898: IFFALSE 38984
// begin wait ( 0 0$2 ) ;
38900: LD_INT 70
38902: PPUSH
38903: CALL_OW 67
// repeat wait ( 10 ) ;
38907: LD_INT 10
38909: PPUSH
38910: CALL_OW 67
// Connect ( vehicle ) ;
38914: LD_VAR 0 1
38918: PPUSH
38919: CALL 53167 0 1
// until IsControledBy ( vehicle ) ;
38923: LD_VAR 0 1
38927: PPUSH
38928: CALL_OW 312
38932: IFFALSE 38907
// wait ( 10 ) ;
38934: LD_INT 10
38936: PPUSH
38937: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38941: LD_VAR 0 1
38945: PPUSH
38946: LD_EXP 109
38950: PUSH
38951: LD_VAR 0 4
38955: ARRAY
38956: PUSH
38957: LD_INT 3
38959: ARRAY
38960: PPUSH
38961: LD_EXP 109
38965: PUSH
38966: LD_VAR 0 4
38970: ARRAY
38971: PUSH
38972: LD_INT 4
38974: ARRAY
38975: PPUSH
38976: CALL_OW 111
// break ;
38980: GO 39034
// end else
38982: GO 39032
// begin wait ( 0 0$3 ) ;
38984: LD_INT 105
38986: PPUSH
38987: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
38991: LD_VAR 0 1
38995: PPUSH
38996: LD_EXP 109
39000: PUSH
39001: LD_VAR 0 4
39005: ARRAY
39006: PUSH
39007: LD_INT 3
39009: ARRAY
39010: PPUSH
39011: LD_EXP 109
39015: PUSH
39016: LD_VAR 0 4
39020: ARRAY
39021: PUSH
39022: LD_INT 4
39024: ARRAY
39025: PPUSH
39026: CALL_OW 111
// break ;
39030: GO 39034
// end ; end ;
39032: GO 38483
39034: POP
39035: POP
// end ;
39036: LD_VAR 0 3
39040: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
39041: LD_INT 0
39043: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
39044: LD_VAR 0 1
39048: PUSH
39049: LD_INT 250
39051: EQUAL
39052: IFFALSE 39069
39054: PUSH
39055: LD_VAR 0 2
39059: PPUSH
39060: CALL_OW 264
39064: PUSH
39065: LD_INT 81
39067: EQUAL
39068: AND
39069: IFFALSE 39090
// MinerPlaceMine ( unit , x , y ) ;
39071: LD_VAR 0 2
39075: PPUSH
39076: LD_VAR 0 4
39080: PPUSH
39081: LD_VAR 0 5
39085: PPUSH
39086: CALL 42371 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
39090: LD_VAR 0 1
39094: PUSH
39095: LD_INT 251
39097: EQUAL
39098: IFFALSE 39115
39100: PUSH
39101: LD_VAR 0 2
39105: PPUSH
39106: CALL_OW 264
39110: PUSH
39111: LD_INT 81
39113: EQUAL
39114: AND
39115: IFFALSE 39136
// MinerDetonateMine ( unit , x , y ) ;
39117: LD_VAR 0 2
39121: PPUSH
39122: LD_VAR 0 4
39126: PPUSH
39127: LD_VAR 0 5
39131: PPUSH
39132: CALL 42778 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
39136: LD_VAR 0 1
39140: PUSH
39141: LD_INT 252
39143: EQUAL
39144: IFFALSE 39161
39146: PUSH
39147: LD_VAR 0 2
39151: PPUSH
39152: CALL_OW 264
39156: PUSH
39157: LD_INT 81
39159: EQUAL
39160: AND
39161: IFFALSE 39182
// MinerCreateMinefield ( unit , x , y ) ;
39163: LD_VAR 0 2
39167: PPUSH
39168: LD_VAR 0 4
39172: PPUSH
39173: LD_VAR 0 5
39177: PPUSH
39178: CALL 43010 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
39182: LD_VAR 0 1
39186: PUSH
39187: LD_INT 253
39189: EQUAL
39190: IFFALSE 39207
39192: PUSH
39193: LD_VAR 0 2
39197: PPUSH
39198: CALL_OW 257
39202: PUSH
39203: LD_INT 5
39205: EQUAL
39206: AND
39207: IFFALSE 39228
// ComBinocular ( unit , x , y ) ;
39209: LD_VAR 0 2
39213: PPUSH
39214: LD_VAR 0 4
39218: PPUSH
39219: LD_VAR 0 5
39223: PPUSH
39224: CALL 43385 0 3
// if selectedUnit then
39228: LD_VAR 0 3
39232: IFFALSE 39292
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
39234: LD_VAR 0 1
39238: PUSH
39239: LD_INT 254
39241: EQUAL
39242: IFFALSE 39259
39244: PUSH
39245: LD_VAR 0 2
39249: PPUSH
39250: CALL_OW 264
39254: PUSH
39255: LD_INT 99
39257: EQUAL
39258: AND
39259: IFFALSE 39276
39261: PUSH
39262: LD_VAR 0 3
39266: PPUSH
39267: CALL_OW 263
39271: PUSH
39272: LD_INT 3
39274: EQUAL
39275: AND
39276: IFFALSE 39292
// HackDestroyVehicle ( unit , selectedUnit ) ;
39278: LD_VAR 0 2
39282: PPUSH
39283: LD_VAR 0 3
39287: PPUSH
39288: CALL 41582 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
39292: LD_VAR 0 1
39296: PUSH
39297: LD_INT 255
39299: EQUAL
39300: IFFALSE 39324
39302: PUSH
39303: LD_VAR 0 2
39307: PPUSH
39308: CALL_OW 264
39312: PUSH
39313: LD_INT 14
39315: PUSH
39316: LD_INT 53
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: IN
39323: AND
39324: IFFALSE 39342
39326: PUSH
39327: LD_VAR 0 4
39331: PPUSH
39332: LD_VAR 0 5
39336: PPUSH
39337: CALL_OW 488
39341: AND
39342: IFFALSE 39366
// CutTreeXYR ( unit , x , y , 12 ) ;
39344: LD_VAR 0 2
39348: PPUSH
39349: LD_VAR 0 4
39353: PPUSH
39354: LD_VAR 0 5
39358: PPUSH
39359: LD_INT 12
39361: PPUSH
39362: CALL 39557 0 4
// if cmd = 256 then
39366: LD_VAR 0 1
39370: PUSH
39371: LD_INT 256
39373: EQUAL
39374: IFFALSE 39395
// SetFactoryWaypoint ( unit , x , y ) ;
39376: LD_VAR 0 2
39380: PPUSH
39381: LD_VAR 0 4
39385: PPUSH
39386: LD_VAR 0 5
39390: PPUSH
39391: CALL 36836 0 3
// if cmd = 257 then
39395: LD_VAR 0 1
39399: PUSH
39400: LD_INT 257
39402: EQUAL
39403: IFFALSE 39424
// SetWarehouseGatheringPoint ( unit , x , y ) ;
39405: LD_VAR 0 2
39409: PPUSH
39410: LD_VAR 0 4
39414: PPUSH
39415: LD_VAR 0 5
39419: PPUSH
39420: CALL 37332 0 3
// if cmd = 258 then
39424: LD_VAR 0 1
39428: PUSH
39429: LD_INT 258
39431: EQUAL
39432: IFFALSE 39456
// BurnTreeXYR ( unit , x , y , 8 ) ;
39434: LD_VAR 0 2
39438: PPUSH
39439: LD_VAR 0 4
39443: PPUSH
39444: LD_VAR 0 5
39448: PPUSH
39449: LD_INT 8
39451: PPUSH
39452: CALL 39957 0 4
// end ;
39456: LD_VAR 0 6
39460: RET
// export function ComRadiation ( un ) ; var eff ; begin
39461: LD_INT 0
39463: PPUSH
39464: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
39465: LD_VAR 0 1
39469: PPUSH
39470: CALL_OW 264
39474: PUSH
39475: LD_INT 91
39477: NONEQUAL
39478: IFFALSE 39482
// exit ;
39480: GO 39552
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
39482: LD_INT 68
39484: PPUSH
39485: LD_VAR 0 1
39489: PPUSH
39490: CALL_OW 255
39494: PPUSH
39495: CALL_OW 321
39499: PUSH
39500: LD_INT 2
39502: EQUAL
39503: IFFALSE 39515
// eff := 50 else
39505: LD_ADDR_VAR 0 3
39509: PUSH
39510: LD_INT 50
39512: ST_TO_ADDR
39513: GO 39523
// eff := 25 ;
39515: LD_ADDR_VAR 0 3
39519: PUSH
39520: LD_INT 25
39522: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
39523: LD_VAR 0 1
39527: PPUSH
39528: CALL_OW 250
39532: PPUSH
39533: LD_VAR 0 1
39537: PPUSH
39538: CALL_OW 251
39542: PPUSH
39543: LD_VAR 0 3
39547: PPUSH
39548: CALL_OW 495
// end ;
39552: LD_VAR 0 2
39556: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
39557: LD_INT 0
39559: PPUSH
39560: PPUSH
39561: PPUSH
39562: PPUSH
39563: PPUSH
39564: PPUSH
39565: PPUSH
39566: PPUSH
39567: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
39568: LD_VAR 0 1
39572: PPUSH
39573: CALL_OW 302
39577: NOT
39578: IFTRUE 39597
39580: PUSH
39581: LD_VAR 0 2
39585: PPUSH
39586: LD_VAR 0 3
39590: PPUSH
39591: CALL_OW 488
39595: NOT
39596: OR
39597: IFTRUE 39606
39599: PUSH
39600: LD_VAR 0 4
39604: NOT
39605: OR
39606: IFFALSE 39610
// exit ;
39608: GO 39952
// list := [ ] ;
39610: LD_ADDR_VAR 0 13
39614: PUSH
39615: EMPTY
39616: ST_TO_ADDR
// if x - r < 0 then
39617: LD_VAR 0 2
39621: PUSH
39622: LD_VAR 0 4
39626: MINUS
39627: PUSH
39628: LD_INT 0
39630: LESS
39631: IFFALSE 39643
// min_x := 0 else
39633: LD_ADDR_VAR 0 7
39637: PUSH
39638: LD_INT 0
39640: ST_TO_ADDR
39641: GO 39659
// min_x := x - r ;
39643: LD_ADDR_VAR 0 7
39647: PUSH
39648: LD_VAR 0 2
39652: PUSH
39653: LD_VAR 0 4
39657: MINUS
39658: ST_TO_ADDR
// if y - r < 0 then
39659: LD_VAR 0 3
39663: PUSH
39664: LD_VAR 0 4
39668: MINUS
39669: PUSH
39670: LD_INT 0
39672: LESS
39673: IFFALSE 39685
// min_y := 0 else
39675: LD_ADDR_VAR 0 8
39679: PUSH
39680: LD_INT 0
39682: ST_TO_ADDR
39683: GO 39701
// min_y := y - r ;
39685: LD_ADDR_VAR 0 8
39689: PUSH
39690: LD_VAR 0 3
39694: PUSH
39695: LD_VAR 0 4
39699: MINUS
39700: ST_TO_ADDR
// max_x := x + r ;
39701: LD_ADDR_VAR 0 9
39705: PUSH
39706: LD_VAR 0 2
39710: PUSH
39711: LD_VAR 0 4
39715: PLUS
39716: ST_TO_ADDR
// max_y := y + r ;
39717: LD_ADDR_VAR 0 10
39721: PUSH
39722: LD_VAR 0 3
39726: PUSH
39727: LD_VAR 0 4
39731: PLUS
39732: ST_TO_ADDR
// for _x = min_x to max_x do
39733: LD_ADDR_VAR 0 11
39737: PUSH
39738: DOUBLE
39739: LD_VAR 0 7
39743: DEC
39744: ST_TO_ADDR
39745: LD_VAR 0 9
39749: PUSH
39750: FOR_TO
39751: IFFALSE 39870
// for _y = min_y to max_y do
39753: LD_ADDR_VAR 0 12
39757: PUSH
39758: DOUBLE
39759: LD_VAR 0 8
39763: DEC
39764: ST_TO_ADDR
39765: LD_VAR 0 10
39769: PUSH
39770: FOR_TO
39771: IFFALSE 39866
// begin if not ValidHex ( _x , _y ) then
39773: LD_VAR 0 11
39777: PPUSH
39778: LD_VAR 0 12
39782: PPUSH
39783: CALL_OW 488
39787: NOT
39788: IFFALSE 39792
// continue ;
39790: GO 39770
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39792: LD_VAR 0 11
39796: PPUSH
39797: LD_VAR 0 12
39801: PPUSH
39802: CALL_OW 351
39806: IFFALSE 39824
39808: PUSH
39809: LD_VAR 0 11
39813: PPUSH
39814: LD_VAR 0 12
39818: PPUSH
39819: CALL_OW 554
39823: AND
39824: IFFALSE 39864
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39826: LD_ADDR_VAR 0 13
39830: PUSH
39831: LD_VAR 0 13
39835: PPUSH
39836: LD_VAR 0 13
39840: PUSH
39841: LD_INT 1
39843: PLUS
39844: PPUSH
39845: LD_VAR 0 11
39849: PUSH
39850: LD_VAR 0 12
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PPUSH
39859: CALL_OW 2
39863: ST_TO_ADDR
// end ;
39864: GO 39770
39866: POP
39867: POP
39868: GO 39750
39870: POP
39871: POP
// if not list then
39872: LD_VAR 0 13
39876: NOT
39877: IFFALSE 39881
// exit ;
39879: GO 39952
// for i in list do
39881: LD_ADDR_VAR 0 6
39885: PUSH
39886: LD_VAR 0 13
39890: PUSH
39891: FOR_IN
39892: IFFALSE 39950
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
39894: LD_VAR 0 1
39898: PPUSH
39899: LD_STRING M
39901: PUSH
39902: LD_VAR 0 6
39906: PUSH
39907: LD_INT 1
39909: ARRAY
39910: PUSH
39911: LD_VAR 0 6
39915: PUSH
39916: LD_INT 2
39918: ARRAY
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: PUSH
39941: EMPTY
39942: LIST
39943: PPUSH
39944: CALL_OW 447
39948: GO 39891
39950: POP
39951: POP
// end ;
39952: LD_VAR 0 5
39956: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
39957: LD_INT 0
39959: PPUSH
39960: PPUSH
39961: PPUSH
39962: PPUSH
39963: PPUSH
39964: PPUSH
39965: PPUSH
39966: PPUSH
39967: PPUSH
39968: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
39969: LD_VAR 0 1
39973: PPUSH
39974: CALL_OW 302
39978: NOT
39979: IFTRUE 39998
39981: PUSH
39982: LD_VAR 0 2
39986: PPUSH
39987: LD_VAR 0 3
39991: PPUSH
39992: CALL_OW 488
39996: NOT
39997: OR
39998: IFTRUE 40007
40000: PUSH
40001: LD_VAR 0 4
40005: NOT
40006: OR
40007: IFFALSE 40011
// exit ;
40009: GO 40528
// list := [ ] ;
40011: LD_ADDR_VAR 0 13
40015: PUSH
40016: EMPTY
40017: ST_TO_ADDR
// if x - r < 0 then
40018: LD_VAR 0 2
40022: PUSH
40023: LD_VAR 0 4
40027: MINUS
40028: PUSH
40029: LD_INT 0
40031: LESS
40032: IFFALSE 40044
// min_x := 0 else
40034: LD_ADDR_VAR 0 7
40038: PUSH
40039: LD_INT 0
40041: ST_TO_ADDR
40042: GO 40060
// min_x := x - r ;
40044: LD_ADDR_VAR 0 7
40048: PUSH
40049: LD_VAR 0 2
40053: PUSH
40054: LD_VAR 0 4
40058: MINUS
40059: ST_TO_ADDR
// if y - r < 0 then
40060: LD_VAR 0 3
40064: PUSH
40065: LD_VAR 0 4
40069: MINUS
40070: PUSH
40071: LD_INT 0
40073: LESS
40074: IFFALSE 40086
// min_y := 0 else
40076: LD_ADDR_VAR 0 8
40080: PUSH
40081: LD_INT 0
40083: ST_TO_ADDR
40084: GO 40102
// min_y := y - r ;
40086: LD_ADDR_VAR 0 8
40090: PUSH
40091: LD_VAR 0 3
40095: PUSH
40096: LD_VAR 0 4
40100: MINUS
40101: ST_TO_ADDR
// max_x := x + r ;
40102: LD_ADDR_VAR 0 9
40106: PUSH
40107: LD_VAR 0 2
40111: PUSH
40112: LD_VAR 0 4
40116: PLUS
40117: ST_TO_ADDR
// max_y := y + r ;
40118: LD_ADDR_VAR 0 10
40122: PUSH
40123: LD_VAR 0 3
40127: PUSH
40128: LD_VAR 0 4
40132: PLUS
40133: ST_TO_ADDR
// for _x = min_x to max_x do
40134: LD_ADDR_VAR 0 11
40138: PUSH
40139: DOUBLE
40140: LD_VAR 0 7
40144: DEC
40145: ST_TO_ADDR
40146: LD_VAR 0 9
40150: PUSH
40151: FOR_TO
40152: IFFALSE 40271
// for _y = min_y to max_y do
40154: LD_ADDR_VAR 0 12
40158: PUSH
40159: DOUBLE
40160: LD_VAR 0 8
40164: DEC
40165: ST_TO_ADDR
40166: LD_VAR 0 10
40170: PUSH
40171: FOR_TO
40172: IFFALSE 40267
// begin if not ValidHex ( _x , _y ) then
40174: LD_VAR 0 11
40178: PPUSH
40179: LD_VAR 0 12
40183: PPUSH
40184: CALL_OW 488
40188: NOT
40189: IFFALSE 40193
// continue ;
40191: GO 40171
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40193: LD_VAR 0 11
40197: PPUSH
40198: LD_VAR 0 12
40202: PPUSH
40203: CALL_OW 351
40207: IFFALSE 40225
40209: PUSH
40210: LD_VAR 0 11
40214: PPUSH
40215: LD_VAR 0 12
40219: PPUSH
40220: CALL_OW 554
40224: AND
40225: IFFALSE 40265
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
40227: LD_ADDR_VAR 0 13
40231: PUSH
40232: LD_VAR 0 13
40236: PPUSH
40237: LD_VAR 0 13
40241: PUSH
40242: LD_INT 1
40244: PLUS
40245: PPUSH
40246: LD_VAR 0 11
40250: PUSH
40251: LD_VAR 0 12
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PPUSH
40260: CALL_OW 2
40264: ST_TO_ADDR
// end ;
40265: GO 40171
40267: POP
40268: POP
40269: GO 40151
40271: POP
40272: POP
// if not list then
40273: LD_VAR 0 13
40277: NOT
40278: IFFALSE 40282
// exit ;
40280: GO 40528
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
40282: LD_ADDR_VAR 0 13
40286: PUSH
40287: LD_VAR 0 1
40291: PPUSH
40292: LD_VAR 0 13
40296: PPUSH
40297: LD_INT 1
40299: PPUSH
40300: LD_INT 1
40302: PPUSH
40303: CALL 50295 0 4
40307: ST_TO_ADDR
// ComStop ( flame ) ;
40308: LD_VAR 0 1
40312: PPUSH
40313: CALL_OW 141
// for i in list do
40317: LD_ADDR_VAR 0 6
40321: PUSH
40322: LD_VAR 0 13
40326: PUSH
40327: FOR_IN
40328: IFFALSE 40359
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
40330: LD_VAR 0 1
40334: PPUSH
40335: LD_VAR 0 6
40339: PUSH
40340: LD_INT 1
40342: ARRAY
40343: PPUSH
40344: LD_VAR 0 6
40348: PUSH
40349: LD_INT 2
40351: ARRAY
40352: PPUSH
40353: CALL_OW 176
40357: GO 40327
40359: POP
40360: POP
// repeat wait ( 0 0$1 ) ;
40361: LD_INT 35
40363: PPUSH
40364: CALL_OW 67
// task := GetTaskList ( flame ) ;
40368: LD_ADDR_VAR 0 14
40372: PUSH
40373: LD_VAR 0 1
40377: PPUSH
40378: CALL_OW 437
40382: ST_TO_ADDR
// if not task then
40383: LD_VAR 0 14
40387: NOT
40388: IFFALSE 40392
// exit ;
40390: GO 40528
// if task [ 1 ] [ 1 ] <> | then
40392: LD_VAR 0 14
40396: PUSH
40397: LD_INT 1
40399: ARRAY
40400: PUSH
40401: LD_INT 1
40403: ARRAY
40404: PUSH
40405: LD_STRING |
40407: NONEQUAL
40408: IFFALSE 40412
// exit ;
40410: GO 40528
// _x := task [ 1 ] [ 2 ] ;
40412: LD_ADDR_VAR 0 11
40416: PUSH
40417: LD_VAR 0 14
40421: PUSH
40422: LD_INT 1
40424: ARRAY
40425: PUSH
40426: LD_INT 2
40428: ARRAY
40429: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
40430: LD_ADDR_VAR 0 12
40434: PUSH
40435: LD_VAR 0 14
40439: PUSH
40440: LD_INT 1
40442: ARRAY
40443: PUSH
40444: LD_INT 3
40446: ARRAY
40447: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
40448: LD_VAR 0 11
40452: PPUSH
40453: LD_VAR 0 12
40457: PPUSH
40458: CALL_OW 351
40462: NOT
40463: IFTRUE 40482
40465: PUSH
40466: LD_VAR 0 11
40470: PPUSH
40471: LD_VAR 0 12
40475: PPUSH
40476: CALL_OW 554
40480: NOT
40481: OR
40482: IFFALSE 40516
// begin task := Delete ( task , 1 ) ;
40484: LD_ADDR_VAR 0 14
40488: PUSH
40489: LD_VAR 0 14
40493: PPUSH
40494: LD_INT 1
40496: PPUSH
40497: CALL_OW 3
40501: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
40502: LD_VAR 0 1
40506: PPUSH
40507: LD_VAR 0 14
40511: PPUSH
40512: CALL_OW 446
// end ; until not HasTask ( flame ) ;
40516: LD_VAR 0 1
40520: PPUSH
40521: CALL_OW 314
40525: NOT
40526: IFFALSE 40361
// end ;
40528: LD_VAR 0 5
40532: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
40533: LD_EXP 113
40537: NOT
40538: IFFALSE 40588
40540: GO 40542
40542: DISABLE
// begin initHack := true ;
40543: LD_ADDR_EXP 113
40547: PUSH
40548: LD_INT 1
40550: ST_TO_ADDR
// hackTanks := [ ] ;
40551: LD_ADDR_EXP 114
40555: PUSH
40556: EMPTY
40557: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
40558: LD_ADDR_EXP 115
40562: PUSH
40563: EMPTY
40564: ST_TO_ADDR
// hackLimit := 3 ;
40565: LD_ADDR_EXP 116
40569: PUSH
40570: LD_INT 3
40572: ST_TO_ADDR
// hackDist := 12 ;
40573: LD_ADDR_EXP 117
40577: PUSH
40578: LD_INT 12
40580: ST_TO_ADDR
// hackCounter := [ ] ;
40581: LD_ADDR_EXP 118
40585: PUSH
40586: EMPTY
40587: ST_TO_ADDR
// end ;
40588: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
40589: LD_EXP 113
40593: IFFALSE 40611
40595: PUSH
40596: LD_INT 34
40598: PUSH
40599: LD_INT 99
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PPUSH
40606: CALL_OW 69
40610: AND
40611: IFFALSE 40864
40613: GO 40615
40615: DISABLE
40616: LD_INT 0
40618: PPUSH
40619: PPUSH
// begin enable ;
40620: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
40621: LD_ADDR_VAR 0 1
40625: PUSH
40626: LD_INT 34
40628: PUSH
40629: LD_INT 99
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PPUSH
40636: CALL_OW 69
40640: PUSH
40641: FOR_IN
40642: IFFALSE 40862
// begin if not i in hackTanks then
40644: LD_VAR 0 1
40648: PUSH
40649: LD_EXP 114
40653: IN
40654: NOT
40655: IFFALSE 40738
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
40657: LD_ADDR_EXP 114
40661: PUSH
40662: LD_EXP 114
40666: PPUSH
40667: LD_EXP 114
40671: PUSH
40672: LD_INT 1
40674: PLUS
40675: PPUSH
40676: LD_VAR 0 1
40680: PPUSH
40681: CALL_OW 1
40685: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
40686: LD_ADDR_EXP 115
40690: PUSH
40691: LD_EXP 115
40695: PPUSH
40696: LD_EXP 115
40700: PUSH
40701: LD_INT 1
40703: PLUS
40704: PPUSH
40705: EMPTY
40706: PPUSH
40707: CALL_OW 1
40711: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
40712: LD_ADDR_EXP 118
40716: PUSH
40717: LD_EXP 118
40721: PPUSH
40722: LD_EXP 118
40726: PUSH
40727: LD_INT 1
40729: PLUS
40730: PPUSH
40731: EMPTY
40732: PPUSH
40733: CALL_OW 1
40737: ST_TO_ADDR
// end ; if not IsOk ( i ) then
40738: LD_VAR 0 1
40742: PPUSH
40743: CALL_OW 302
40747: NOT
40748: IFFALSE 40761
// begin HackUnlinkAll ( i ) ;
40750: LD_VAR 0 1
40754: PPUSH
40755: CALL 40867 0 1
// continue ;
40759: GO 40641
// end ; HackCheckCapturedStatus ( i ) ;
40761: LD_VAR 0 1
40765: PPUSH
40766: CALL 41312 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
40770: LD_ADDR_VAR 0 2
40774: PUSH
40775: LD_INT 81
40777: PUSH
40778: LD_VAR 0 1
40782: PPUSH
40783: CALL_OW 255
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 33
40794: PUSH
40795: LD_INT 3
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 91
40804: PUSH
40805: LD_VAR 0 1
40809: PUSH
40810: LD_EXP 117
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 50
40822: PUSH
40823: EMPTY
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: PPUSH
40832: CALL_OW 69
40836: ST_TO_ADDR
// if not tmp then
40837: LD_VAR 0 2
40841: NOT
40842: IFFALSE 40846
// continue ;
40844: GO 40641
// HackLink ( i , tmp ) ;
40846: LD_VAR 0 1
40850: PPUSH
40851: LD_VAR 0 2
40855: PPUSH
40856: CALL 41003 0 2
// end ;
40860: GO 40641
40862: POP
40863: POP
// end ;
40864: PPOPN 2
40866: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
40867: LD_INT 0
40869: PPUSH
40870: PPUSH
40871: PPUSH
// if not hack in hackTanks then
40872: LD_VAR 0 1
40876: PUSH
40877: LD_EXP 114
40881: IN
40882: NOT
40883: IFFALSE 40887
// exit ;
40885: GO 40998
// index := GetElementIndex ( hackTanks , hack ) ;
40887: LD_ADDR_VAR 0 4
40891: PUSH
40892: LD_EXP 114
40896: PPUSH
40897: LD_VAR 0 1
40901: PPUSH
40902: CALL 49590 0 2
40906: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
40907: LD_EXP 115
40911: PUSH
40912: LD_VAR 0 4
40916: ARRAY
40917: IFFALSE 40998
// begin for i in hackTanksCaptured [ index ] do
40919: LD_ADDR_VAR 0 3
40923: PUSH
40924: LD_EXP 115
40928: PUSH
40929: LD_VAR 0 4
40933: ARRAY
40934: PUSH
40935: FOR_IN
40936: IFFALSE 40962
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
40938: LD_VAR 0 3
40942: PUSH
40943: LD_INT 1
40945: ARRAY
40946: PPUSH
40947: LD_VAR 0 3
40951: PUSH
40952: LD_INT 2
40954: ARRAY
40955: PPUSH
40956: CALL_OW 235
40960: GO 40935
40962: POP
40963: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
40964: LD_ADDR_EXP 115
40968: PUSH
40969: LD_EXP 115
40973: PPUSH
40974: LD_VAR 0 4
40978: PPUSH
40979: EMPTY
40980: PPUSH
40981: CALL_OW 1
40985: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
40986: LD_VAR 0 1
40990: PPUSH
40991: LD_INT 0
40993: PPUSH
40994: CALL_OW 505
// end ; end ;
40998: LD_VAR 0 2
41002: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
41003: LD_INT 0
41005: PPUSH
41006: PPUSH
41007: PPUSH
// if not hack in hackTanks or not vehicles then
41008: LD_VAR 0 1
41012: PUSH
41013: LD_EXP 114
41017: IN
41018: NOT
41019: IFTRUE 41028
41021: PUSH
41022: LD_VAR 0 2
41026: NOT
41027: OR
41028: IFFALSE 41032
// exit ;
41030: GO 41307
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
41032: LD_ADDR_VAR 0 2
41036: PUSH
41037: LD_VAR 0 1
41041: PPUSH
41042: LD_VAR 0 2
41046: PPUSH
41047: LD_INT 1
41049: PPUSH
41050: LD_INT 1
41052: PPUSH
41053: CALL 50242 0 4
41057: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
41058: LD_ADDR_VAR 0 5
41062: PUSH
41063: LD_EXP 114
41067: PPUSH
41068: LD_VAR 0 1
41072: PPUSH
41073: CALL 49590 0 2
41077: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
41078: LD_EXP 115
41082: PUSH
41083: LD_VAR 0 5
41087: ARRAY
41088: PUSH
41089: LD_EXP 116
41093: LESS
41094: IFFALSE 41283
// begin for i := 1 to vehicles do
41096: LD_ADDR_VAR 0 4
41100: PUSH
41101: DOUBLE
41102: LD_INT 1
41104: DEC
41105: ST_TO_ADDR
41106: LD_VAR 0 2
41110: PUSH
41111: FOR_TO
41112: IFFALSE 41281
// begin if hackTanksCaptured [ index ] = hackLimit then
41114: LD_EXP 115
41118: PUSH
41119: LD_VAR 0 5
41123: ARRAY
41124: PUSH
41125: LD_EXP 116
41129: EQUAL
41130: IFFALSE 41134
// break ;
41132: GO 41281
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
41134: LD_ADDR_EXP 118
41138: PUSH
41139: LD_EXP 118
41143: PPUSH
41144: LD_VAR 0 5
41148: PPUSH
41149: LD_EXP 118
41153: PUSH
41154: LD_VAR 0 5
41158: ARRAY
41159: PUSH
41160: LD_INT 1
41162: PLUS
41163: PPUSH
41164: CALL_OW 1
41168: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
41169: LD_ADDR_EXP 115
41173: PUSH
41174: LD_EXP 115
41178: PPUSH
41179: LD_VAR 0 5
41183: PUSH
41184: LD_EXP 115
41188: PUSH
41189: LD_VAR 0 5
41193: ARRAY
41194: PUSH
41195: LD_INT 1
41197: PLUS
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PPUSH
41203: LD_VAR 0 2
41207: PUSH
41208: LD_VAR 0 4
41212: ARRAY
41213: PUSH
41214: LD_VAR 0 2
41218: PUSH
41219: LD_VAR 0 4
41223: ARRAY
41224: PPUSH
41225: CALL_OW 255
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PPUSH
41234: CALL 49807 0 3
41238: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
41239: LD_VAR 0 2
41243: PUSH
41244: LD_VAR 0 4
41248: ARRAY
41249: PPUSH
41250: LD_VAR 0 1
41254: PPUSH
41255: CALL_OW 255
41259: PPUSH
41260: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
41264: LD_VAR 0 2
41268: PUSH
41269: LD_VAR 0 4
41273: ARRAY
41274: PPUSH
41275: CALL_OW 141
// end ;
41279: GO 41111
41281: POP
41282: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41283: LD_VAR 0 1
41287: PPUSH
41288: LD_EXP 115
41292: PUSH
41293: LD_VAR 0 5
41297: ARRAY
41298: PUSH
41299: LD_INT 0
41301: PLUS
41302: PPUSH
41303: CALL_OW 505
// end ;
41307: LD_VAR 0 3
41311: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
41312: LD_INT 0
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
// if not hack in hackTanks then
41318: LD_VAR 0 1
41322: PUSH
41323: LD_EXP 114
41327: IN
41328: NOT
41329: IFFALSE 41333
// exit ;
41331: GO 41577
// index := GetElementIndex ( hackTanks , hack ) ;
41333: LD_ADDR_VAR 0 4
41337: PUSH
41338: LD_EXP 114
41342: PPUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: CALL 49590 0 2
41352: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
41353: LD_ADDR_VAR 0 3
41357: PUSH
41358: DOUBLE
41359: LD_EXP 115
41363: PUSH
41364: LD_VAR 0 4
41368: ARRAY
41369: INC
41370: ST_TO_ADDR
41371: LD_INT 1
41373: PUSH
41374: FOR_DOWNTO
41375: IFFALSE 41551
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
41377: LD_ADDR_VAR 0 5
41381: PUSH
41382: LD_EXP 115
41386: PUSH
41387: LD_VAR 0 4
41391: ARRAY
41392: PUSH
41393: LD_VAR 0 3
41397: ARRAY
41398: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
41399: LD_VAR 0 5
41403: PUSH
41404: LD_INT 1
41406: ARRAY
41407: PPUSH
41408: CALL_OW 302
41412: NOT
41413: IFTRUE 41441
41415: PUSH
41416: LD_VAR 0 5
41420: PUSH
41421: LD_INT 1
41423: ARRAY
41424: PPUSH
41425: CALL_OW 255
41429: PUSH
41430: LD_VAR 0 1
41434: PPUSH
41435: CALL_OW 255
41439: NONEQUAL
41440: OR
41441: IFFALSE 41549
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
41443: LD_VAR 0 5
41447: PUSH
41448: LD_INT 1
41450: ARRAY
41451: PPUSH
41452: CALL_OW 305
41456: IFFALSE 41484
41458: PUSH
41459: LD_VAR 0 5
41463: PUSH
41464: LD_INT 1
41466: ARRAY
41467: PPUSH
41468: CALL_OW 255
41472: PUSH
41473: LD_VAR 0 1
41477: PPUSH
41478: CALL_OW 255
41482: EQUAL
41483: AND
41484: IFFALSE 41508
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
41486: LD_VAR 0 5
41490: PUSH
41491: LD_INT 1
41493: ARRAY
41494: PPUSH
41495: LD_VAR 0 5
41499: PUSH
41500: LD_INT 2
41502: ARRAY
41503: PPUSH
41504: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
41508: LD_ADDR_EXP 115
41512: PUSH
41513: LD_EXP 115
41517: PPUSH
41518: LD_VAR 0 4
41522: PPUSH
41523: LD_EXP 115
41527: PUSH
41528: LD_VAR 0 4
41532: ARRAY
41533: PPUSH
41534: LD_VAR 0 3
41538: PPUSH
41539: CALL_OW 3
41543: PPUSH
41544: CALL_OW 1
41548: ST_TO_ADDR
// end ; end ;
41549: GO 41374
41551: POP
41552: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
41553: LD_VAR 0 1
41557: PPUSH
41558: LD_EXP 115
41562: PUSH
41563: LD_VAR 0 4
41567: ARRAY
41568: PUSH
41569: LD_INT 0
41571: PLUS
41572: PPUSH
41573: CALL_OW 505
// end ;
41577: LD_VAR 0 2
41581: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
41582: LD_INT 0
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
// if not hack in hackTanks then
41588: LD_VAR 0 1
41592: PUSH
41593: LD_EXP 114
41597: IN
41598: NOT
41599: IFFALSE 41603
// exit ;
41601: GO 41688
// index := GetElementIndex ( hackTanks , hack ) ;
41603: LD_ADDR_VAR 0 5
41607: PUSH
41608: LD_EXP 114
41612: PPUSH
41613: LD_VAR 0 1
41617: PPUSH
41618: CALL 49590 0 2
41622: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
41623: LD_ADDR_VAR 0 4
41627: PUSH
41628: DOUBLE
41629: LD_INT 1
41631: DEC
41632: ST_TO_ADDR
41633: LD_EXP 115
41637: PUSH
41638: LD_VAR 0 5
41642: ARRAY
41643: PUSH
41644: FOR_TO
41645: IFFALSE 41686
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
41647: LD_EXP 115
41651: PUSH
41652: LD_VAR 0 5
41656: ARRAY
41657: PUSH
41658: LD_VAR 0 4
41662: ARRAY
41663: PUSH
41664: LD_INT 1
41666: ARRAY
41667: PUSH
41668: LD_VAR 0 2
41672: EQUAL
41673: IFFALSE 41684
// KillUnit ( vehicle ) ;
41675: LD_VAR 0 2
41679: PPUSH
41680: CALL_OW 66
41684: GO 41644
41686: POP
41687: POP
// end ;
41688: LD_VAR 0 3
41692: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
41693: LD_EXP 119
41697: NOT
41698: IFFALSE 41831
41700: GO 41702
41702: DISABLE
41703: LD_INT 0
41705: PPUSH
// begin initMiner := true ;
41706: LD_ADDR_EXP 119
41710: PUSH
41711: LD_INT 1
41713: ST_TO_ADDR
// minersList := [ ] ;
41714: LD_ADDR_EXP 120
41718: PUSH
41719: EMPTY
41720: ST_TO_ADDR
// minerMinesList := [ ] ;
41721: LD_ADDR_EXP 121
41725: PUSH
41726: EMPTY
41727: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
41728: LD_ADDR_EXP 122
41732: PUSH
41733: LD_INT 6
41735: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
41736: LD_ADDR_VAR 0 1
41740: PUSH
41741: LD_INT 34
41743: PUSH
41744: LD_INT 81
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PPUSH
41751: CALL_OW 69
41755: PUSH
41756: FOR_IN
41757: IFFALSE 41829
// begin if not i in minersList then
41759: LD_VAR 0 1
41763: PUSH
41764: LD_EXP 120
41768: IN
41769: NOT
41770: IFFALSE 41827
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
41772: LD_ADDR_EXP 120
41776: PUSH
41777: LD_EXP 120
41781: PPUSH
41782: LD_EXP 120
41786: PUSH
41787: LD_INT 1
41789: PLUS
41790: PPUSH
41791: LD_VAR 0 1
41795: PPUSH
41796: CALL_OW 1
41800: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
41801: LD_ADDR_EXP 121
41805: PUSH
41806: LD_EXP 121
41810: PPUSH
41811: LD_EXP 121
41815: PUSH
41816: LD_INT 1
41818: PLUS
41819: PPUSH
41820: EMPTY
41821: PPUSH
41822: CALL_OW 1
41826: ST_TO_ADDR
// end end ;
41827: GO 41756
41829: POP
41830: POP
// end ;
41831: PPOPN 1
41833: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
41834: LD_EXP 119
41838: IFFALSE 41869
41840: PUSH
41841: LD_EXP 121
41845: PPUSH
41846: CALL 46889 0 1
41850: IFTRUE 41868
41852: PUSH
41853: LD_INT 34
41855: PUSH
41856: LD_INT 81
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PPUSH
41863: CALL_OW 69
41867: OR
41868: AND
41869: IFFALSE 42368
41871: GO 41873
41873: DISABLE
41874: LD_INT 0
41876: PPUSH
41877: PPUSH
41878: PPUSH
41879: PPUSH
// begin enable ;
41880: ENABLE
// for i := minerMinesList downto 1 do
41881: LD_ADDR_VAR 0 1
41885: PUSH
41886: DOUBLE
41887: LD_EXP 121
41891: INC
41892: ST_TO_ADDR
41893: LD_INT 1
41895: PUSH
41896: FOR_DOWNTO
41897: IFFALSE 42366
// begin if IsLive ( minersList [ i ] ) then
41899: LD_EXP 120
41903: PUSH
41904: LD_VAR 0 1
41908: ARRAY
41909: PPUSH
41910: CALL_OW 300
41914: IFFALSE 41947
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
41916: LD_EXP 120
41920: PUSH
41921: LD_VAR 0 1
41925: ARRAY
41926: PPUSH
41927: LD_EXP 121
41931: PUSH
41932: LD_VAR 0 1
41936: ARRAY
41937: PPUSH
41938: CALL 46889 0 1
41942: PPUSH
41943: CALL_OW 505
// if not minerMinesList [ i ] then
41947: LD_EXP 121
41951: PUSH
41952: LD_VAR 0 1
41956: ARRAY
41957: NOT
41958: IFFALSE 41962
// continue ;
41960: GO 41896
// for j := minerMinesList [ i ] downto 1 do
41962: LD_ADDR_VAR 0 2
41966: PUSH
41967: DOUBLE
41968: LD_EXP 121
41972: PUSH
41973: LD_VAR 0 1
41977: ARRAY
41978: INC
41979: ST_TO_ADDR
41980: LD_INT 1
41982: PUSH
41983: FOR_DOWNTO
41984: IFFALSE 42362
// begin side := GetSide ( minersList [ i ] ) ;
41986: LD_ADDR_VAR 0 3
41990: PUSH
41991: LD_EXP 120
41995: PUSH
41996: LD_VAR 0 1
42000: ARRAY
42001: PPUSH
42002: CALL_OW 255
42006: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
42007: LD_EXP 120
42011: PUSH
42012: LD_VAR 0 1
42016: ARRAY
42017: PPUSH
42018: CALL_OW 301
42022: IFTRUE 42042
42024: PUSH
42025: LD_EXP 120
42029: PUSH
42030: LD_VAR 0 1
42034: ARRAY
42035: PPUSH
42036: CALL_OW 305
42040: NOT
42041: OR
42042: IFFALSE 42133
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42044: LD_EXP 121
42048: PUSH
42049: LD_VAR 0 1
42053: ARRAY
42054: PUSH
42055: LD_VAR 0 2
42059: ARRAY
42060: PUSH
42061: LD_INT 1
42063: ARRAY
42064: PPUSH
42065: LD_EXP 121
42069: PUSH
42070: LD_VAR 0 1
42074: ARRAY
42075: PUSH
42076: LD_VAR 0 2
42080: ARRAY
42081: PUSH
42082: LD_INT 2
42084: ARRAY
42085: PPUSH
42086: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42090: LD_ADDR_EXP 121
42094: PUSH
42095: LD_EXP 121
42099: PPUSH
42100: LD_VAR 0 1
42104: PPUSH
42105: LD_EXP 121
42109: PUSH
42110: LD_VAR 0 1
42114: ARRAY
42115: PPUSH
42116: LD_VAR 0 2
42120: PPUSH
42121: CALL_OW 3
42125: PPUSH
42126: CALL_OW 1
42130: ST_TO_ADDR
// continue ;
42131: GO 41983
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
42133: LD_ADDR_VAR 0 4
42137: PUSH
42138: LD_EXP 121
42142: PUSH
42143: LD_VAR 0 1
42147: ARRAY
42148: PUSH
42149: LD_VAR 0 2
42153: ARRAY
42154: PUSH
42155: LD_INT 1
42157: ARRAY
42158: PPUSH
42159: LD_EXP 121
42163: PUSH
42164: LD_VAR 0 1
42168: ARRAY
42169: PUSH
42170: LD_VAR 0 2
42174: ARRAY
42175: PUSH
42176: LD_INT 2
42178: ARRAY
42179: PPUSH
42180: CALL_OW 428
42184: ST_TO_ADDR
// if not tmp then
42185: LD_VAR 0 4
42189: NOT
42190: IFFALSE 42194
// continue ;
42192: GO 41983
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
42194: LD_VAR 0 4
42198: PUSH
42199: LD_INT 81
42201: PUSH
42202: LD_VAR 0 3
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PPUSH
42211: CALL_OW 69
42215: IN
42216: IFFALSE 42266
42218: PUSH
42219: LD_EXP 121
42223: PUSH
42224: LD_VAR 0 1
42228: ARRAY
42229: PUSH
42230: LD_VAR 0 2
42234: ARRAY
42235: PUSH
42236: LD_INT 1
42238: ARRAY
42239: PPUSH
42240: LD_EXP 121
42244: PUSH
42245: LD_VAR 0 1
42249: ARRAY
42250: PUSH
42251: LD_VAR 0 2
42255: ARRAY
42256: PUSH
42257: LD_INT 2
42259: ARRAY
42260: PPUSH
42261: CALL_OW 458
42265: AND
42266: IFFALSE 42360
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
42268: LD_EXP 121
42272: PUSH
42273: LD_VAR 0 1
42277: ARRAY
42278: PUSH
42279: LD_VAR 0 2
42283: ARRAY
42284: PUSH
42285: LD_INT 1
42287: ARRAY
42288: PPUSH
42289: LD_EXP 121
42293: PUSH
42294: LD_VAR 0 1
42298: ARRAY
42299: PUSH
42300: LD_VAR 0 2
42304: ARRAY
42305: PUSH
42306: LD_INT 2
42308: ARRAY
42309: PPUSH
42310: LD_VAR 0 3
42314: PPUSH
42315: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
42319: LD_ADDR_EXP 121
42323: PUSH
42324: LD_EXP 121
42328: PPUSH
42329: LD_VAR 0 1
42333: PPUSH
42334: LD_EXP 121
42338: PUSH
42339: LD_VAR 0 1
42343: ARRAY
42344: PPUSH
42345: LD_VAR 0 2
42349: PPUSH
42350: CALL_OW 3
42354: PPUSH
42355: CALL_OW 1
42359: ST_TO_ADDR
// end ; end ;
42360: GO 41983
42362: POP
42363: POP
// end ;
42364: GO 41896
42366: POP
42367: POP
// end ;
42368: PPOPN 4
42370: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
42371: LD_INT 0
42373: PPUSH
42374: PPUSH
42375: PPUSH
42376: PPUSH
// result := false ;
42377: LD_ADDR_VAR 0 4
42381: PUSH
42382: LD_INT 0
42384: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
42385: LD_VAR 0 1
42389: PPUSH
42390: CALL_OW 264
42394: PUSH
42395: LD_INT 81
42397: EQUAL
42398: NOT
42399: IFFALSE 42403
// exit ;
42401: GO 42773
// side := GetSide ( unit ) ;
42403: LD_ADDR_VAR 0 6
42407: PUSH
42408: LD_VAR 0 1
42412: PPUSH
42413: CALL_OW 255
42417: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
42418: LD_ADDR_VAR 0 5
42422: PUSH
42423: LD_EXP 120
42427: PPUSH
42428: LD_VAR 0 1
42432: PPUSH
42433: CALL 49590 0 2
42437: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
42438: LD_EXP 121
42442: PUSH
42443: LD_VAR 0 5
42447: ARRAY
42448: PUSH
42449: LD_EXP 122
42453: GREATEREQUAL
42454: IFFALSE 42458
// exit ;
42456: GO 42773
// ComMoveXY ( unit , x , y ) ;
42458: LD_VAR 0 1
42462: PPUSH
42463: LD_VAR 0 2
42467: PPUSH
42468: LD_VAR 0 3
42472: PPUSH
42473: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42477: LD_INT 35
42479: PPUSH
42480: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
42484: LD_VAR 0 1
42488: PPUSH
42489: LD_VAR 0 2
42493: PPUSH
42494: LD_VAR 0 3
42498: PPUSH
42499: CALL 81636 0 3
42503: NOT
42504: IFFALSE 42517
42506: PUSH
42507: LD_VAR 0 1
42511: PPUSH
42512: CALL_OW 314
42516: AND
42517: IFFALSE 42521
// exit ;
42519: GO 42773
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
42521: LD_VAR 0 2
42525: PPUSH
42526: LD_VAR 0 3
42530: PPUSH
42531: CALL_OW 428
42535: PUSH
42536: LD_VAR 0 1
42540: EQUAL
42541: IFFALSE 42555
42543: PUSH
42544: LD_VAR 0 1
42548: PPUSH
42549: CALL_OW 314
42553: NOT
42554: AND
42555: IFFALSE 42477
// if MineAtPos ( x , y ) then
42557: LD_VAR 0 2
42561: PPUSH
42562: LD_VAR 0 3
42566: PPUSH
42567: CALL_OW 458
42571: IFFALSE 42575
// exit ;
42573: GO 42773
// if your_side = side then
42575: LD_OWVAR 2
42579: PUSH
42580: LD_VAR 0 6
42584: EQUAL
42585: IFFALSE 42604
// PlaySoundXY ( x , y , PlantMine ) ;
42587: LD_VAR 0 2
42591: PPUSH
42592: LD_VAR 0 3
42596: PPUSH
42597: LD_STRING PlantMine
42599: PPUSH
42600: CALL_OW 366
// repeat wait ( 1 ) ;
42604: LD_INT 1
42606: PPUSH
42607: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
42611: LD_VAR 0 2
42615: PPUSH
42616: LD_VAR 0 3
42620: PPUSH
42621: LD_VAR 0 6
42625: PPUSH
42626: LD_INT 0
42628: PPUSH
42629: CALL_OW 454
42633: IFFALSE 42604
// if MineAtPos ( x , y ) then
42635: LD_VAR 0 2
42639: PPUSH
42640: LD_VAR 0 3
42644: PPUSH
42645: CALL_OW 458
42649: IFFALSE 42765
// begin for i in minerMinesList [ index ] do
42651: LD_ADDR_VAR 0 7
42655: PUSH
42656: LD_EXP 121
42660: PUSH
42661: LD_VAR 0 5
42665: ARRAY
42666: PUSH
42667: FOR_IN
42668: IFFALSE 42710
// if i [ 1 ] = x and i [ 2 ] = y then
42670: LD_VAR 0 7
42674: PUSH
42675: LD_INT 1
42677: ARRAY
42678: PUSH
42679: LD_VAR 0 2
42683: EQUAL
42684: IFFALSE 42702
42686: PUSH
42687: LD_VAR 0 7
42691: PUSH
42692: LD_INT 2
42694: ARRAY
42695: PUSH
42696: LD_VAR 0 3
42700: EQUAL
42701: AND
42702: IFFALSE 42708
// exit ;
42704: POP
42705: POP
42706: GO 42773
42708: GO 42667
42710: POP
42711: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
42712: LD_ADDR_EXP 121
42716: PUSH
42717: LD_EXP 121
42721: PPUSH
42722: LD_VAR 0 5
42726: PUSH
42727: LD_EXP 121
42731: PUSH
42732: LD_VAR 0 5
42736: ARRAY
42737: PUSH
42738: LD_INT 1
42740: PLUS
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PPUSH
42746: LD_VAR 0 2
42750: PUSH
42751: LD_VAR 0 3
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PPUSH
42760: CALL 49807 0 3
42764: ST_TO_ADDR
// end ; result := true ;
42765: LD_ADDR_VAR 0 4
42769: PUSH
42770: LD_INT 1
42772: ST_TO_ADDR
// end ;
42773: LD_VAR 0 4
42777: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
42778: LD_INT 0
42780: PPUSH
42781: PPUSH
42782: PPUSH
// if not unit in minersList then
42783: LD_VAR 0 1
42787: PUSH
42788: LD_EXP 120
42792: IN
42793: NOT
42794: IFFALSE 42798
// exit ;
42796: GO 43005
// index := GetElementIndex ( minersList , unit ) ;
42798: LD_ADDR_VAR 0 6
42802: PUSH
42803: LD_EXP 120
42807: PPUSH
42808: LD_VAR 0 1
42812: PPUSH
42813: CALL 49590 0 2
42817: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
42818: LD_ADDR_VAR 0 5
42822: PUSH
42823: DOUBLE
42824: LD_EXP 121
42828: PUSH
42829: LD_VAR 0 6
42833: ARRAY
42834: INC
42835: ST_TO_ADDR
42836: LD_INT 1
42838: PUSH
42839: FOR_DOWNTO
42840: IFFALSE 43003
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
42842: LD_EXP 121
42846: PUSH
42847: LD_VAR 0 6
42851: ARRAY
42852: PUSH
42853: LD_VAR 0 5
42857: ARRAY
42858: PUSH
42859: LD_INT 1
42861: ARRAY
42862: PPUSH
42863: LD_EXP 121
42867: PUSH
42868: LD_VAR 0 6
42872: ARRAY
42873: PUSH
42874: LD_VAR 0 5
42878: ARRAY
42879: PUSH
42880: LD_INT 2
42882: ARRAY
42883: PPUSH
42884: LD_VAR 0 2
42888: PPUSH
42889: LD_VAR 0 3
42893: PPUSH
42894: CALL_OW 298
42898: PUSH
42899: LD_INT 6
42901: LESS
42902: IFFALSE 43001
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
42904: LD_EXP 121
42908: PUSH
42909: LD_VAR 0 6
42913: ARRAY
42914: PUSH
42915: LD_VAR 0 5
42919: ARRAY
42920: PUSH
42921: LD_INT 1
42923: ARRAY
42924: PPUSH
42925: LD_EXP 121
42929: PUSH
42930: LD_VAR 0 6
42934: ARRAY
42935: PUSH
42936: LD_VAR 0 5
42940: ARRAY
42941: PUSH
42942: LD_INT 2
42944: ARRAY
42945: PPUSH
42946: LD_VAR 0 1
42950: PPUSH
42951: CALL_OW 255
42955: PPUSH
42956: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
42960: LD_ADDR_EXP 121
42964: PUSH
42965: LD_EXP 121
42969: PPUSH
42970: LD_VAR 0 6
42974: PPUSH
42975: LD_EXP 121
42979: PUSH
42980: LD_VAR 0 6
42984: ARRAY
42985: PPUSH
42986: LD_VAR 0 5
42990: PPUSH
42991: CALL_OW 3
42995: PPUSH
42996: CALL_OW 1
43000: ST_TO_ADDR
// end ; end ;
43001: GO 42839
43003: POP
43004: POP
// end ;
43005: LD_VAR 0 4
43009: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
43010: LD_INT 0
43012: PPUSH
43013: PPUSH
43014: PPUSH
43015: PPUSH
43016: PPUSH
43017: PPUSH
43018: PPUSH
43019: PPUSH
43020: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
43021: LD_VAR 0 1
43025: PPUSH
43026: CALL_OW 264
43030: PUSH
43031: LD_INT 81
43033: EQUAL
43034: NOT
43035: IFTRUE 43050
43037: PUSH
43038: LD_VAR 0 1
43042: PUSH
43043: LD_EXP 120
43047: IN
43048: NOT
43049: OR
43050: IFFALSE 43054
// exit ;
43052: GO 43380
// index := GetElementIndex ( minersList , unit ) ;
43054: LD_ADDR_VAR 0 6
43058: PUSH
43059: LD_EXP 120
43063: PPUSH
43064: LD_VAR 0 1
43068: PPUSH
43069: CALL 49590 0 2
43073: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
43074: LD_ADDR_VAR 0 8
43078: PUSH
43079: LD_EXP 122
43083: PUSH
43084: LD_EXP 121
43088: PUSH
43089: LD_VAR 0 6
43093: ARRAY
43094: MINUS
43095: ST_TO_ADDR
// if not minesFreeAmount then
43096: LD_VAR 0 8
43100: NOT
43101: IFFALSE 43105
// exit ;
43103: GO 43380
// tmp := [ ] ;
43105: LD_ADDR_VAR 0 7
43109: PUSH
43110: EMPTY
43111: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
43112: LD_ADDR_VAR 0 5
43116: PUSH
43117: DOUBLE
43118: LD_INT 1
43120: DEC
43121: ST_TO_ADDR
43122: LD_VAR 0 8
43126: PUSH
43127: FOR_TO
43128: IFFALSE 43327
// begin _d := rand ( 0 , 5 ) ;
43130: LD_ADDR_VAR 0 11
43134: PUSH
43135: LD_INT 0
43137: PPUSH
43138: LD_INT 5
43140: PPUSH
43141: CALL_OW 12
43145: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
43146: LD_ADDR_VAR 0 12
43150: PUSH
43151: LD_INT 2
43153: PPUSH
43154: LD_INT 6
43156: PPUSH
43157: CALL_OW 12
43161: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
43162: LD_ADDR_VAR 0 9
43166: PUSH
43167: LD_VAR 0 2
43171: PPUSH
43172: LD_VAR 0 11
43176: PPUSH
43177: LD_VAR 0 12
43181: PPUSH
43182: CALL_OW 272
43186: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
43187: LD_ADDR_VAR 0 10
43191: PUSH
43192: LD_VAR 0 3
43196: PPUSH
43197: LD_VAR 0 11
43201: PPUSH
43202: LD_VAR 0 12
43206: PPUSH
43207: CALL_OW 273
43211: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
43212: LD_VAR 0 9
43216: PPUSH
43217: LD_VAR 0 10
43221: PPUSH
43222: CALL_OW 488
43226: IFFALSE 43250
43228: PUSH
43229: LD_VAR 0 9
43233: PUSH
43234: LD_VAR 0 10
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_VAR 0 7
43247: IN
43248: NOT
43249: AND
43250: IFFALSE 43269
43252: PUSH
43253: LD_VAR 0 9
43257: PPUSH
43258: LD_VAR 0 10
43262: PPUSH
43263: CALL_OW 458
43267: NOT
43268: AND
43269: IFFALSE 43311
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
43271: LD_ADDR_VAR 0 7
43275: PUSH
43276: LD_VAR 0 7
43280: PPUSH
43281: LD_VAR 0 7
43285: PUSH
43286: LD_INT 1
43288: PLUS
43289: PPUSH
43290: LD_VAR 0 9
43294: PUSH
43295: LD_VAR 0 10
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PPUSH
43304: CALL_OW 1
43308: ST_TO_ADDR
43309: GO 43325
// i := i - 1 ;
43311: LD_ADDR_VAR 0 5
43315: PUSH
43316: LD_VAR 0 5
43320: PUSH
43321: LD_INT 1
43323: MINUS
43324: ST_TO_ADDR
// end ;
43325: GO 43127
43327: POP
43328: POP
// for i in tmp do
43329: LD_ADDR_VAR 0 5
43333: PUSH
43334: LD_VAR 0 7
43338: PUSH
43339: FOR_IN
43340: IFFALSE 43378
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
43342: LD_VAR 0 1
43346: PPUSH
43347: LD_VAR 0 5
43351: PUSH
43352: LD_INT 1
43354: ARRAY
43355: PPUSH
43356: LD_VAR 0 5
43360: PUSH
43361: LD_INT 2
43363: ARRAY
43364: PPUSH
43365: CALL 42371 0 3
43369: NOT
43370: IFFALSE 43376
// exit ;
43372: POP
43373: POP
43374: GO 43380
43376: GO 43339
43378: POP
43379: POP
// end ;
43380: LD_VAR 0 4
43384: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
43385: LD_INT 0
43387: PPUSH
43388: PPUSH
43389: PPUSH
43390: PPUSH
43391: PPUSH
43392: PPUSH
43393: PPUSH
43394: PPUSH
43395: PPUSH
// if GetClass ( unit ) <> class_sniper then
43396: LD_VAR 0 1
43400: PPUSH
43401: CALL_OW 257
43405: PUSH
43406: LD_INT 5
43408: NONEQUAL
43409: IFFALSE 43413
// exit ;
43411: GO 43883
// dist := 8 ;
43413: LD_ADDR_VAR 0 5
43417: PUSH
43418: LD_INT 8
43420: ST_TO_ADDR
// viewRange := 12 ;
43421: LD_ADDR_VAR 0 8
43425: PUSH
43426: LD_INT 12
43428: ST_TO_ADDR
// side := GetSide ( unit ) ;
43429: LD_ADDR_VAR 0 6
43433: PUSH
43434: LD_VAR 0 1
43438: PPUSH
43439: CALL_OW 255
43443: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
43444: LD_INT 61
43446: PPUSH
43447: LD_VAR 0 6
43451: PPUSH
43452: CALL_OW 321
43456: PUSH
43457: LD_INT 2
43459: EQUAL
43460: IFFALSE 43470
// viewRange := 16 ;
43462: LD_ADDR_VAR 0 8
43466: PUSH
43467: LD_INT 16
43469: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
43470: LD_VAR 0 1
43474: PPUSH
43475: LD_VAR 0 2
43479: PPUSH
43480: LD_VAR 0 3
43484: PPUSH
43485: CALL_OW 297
43489: PUSH
43490: LD_VAR 0 5
43494: GREATER
43495: IFFALSE 43574
// begin ComMoveXY ( unit , x , y ) ;
43497: LD_VAR 0 1
43501: PPUSH
43502: LD_VAR 0 2
43506: PPUSH
43507: LD_VAR 0 3
43511: PPUSH
43512: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
43516: LD_INT 35
43518: PPUSH
43519: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
43523: LD_VAR 0 1
43527: PPUSH
43528: LD_VAR 0 2
43532: PPUSH
43533: LD_VAR 0 3
43537: PPUSH
43538: CALL 81636 0 3
43542: NOT
43543: IFFALSE 43547
// exit ;
43545: GO 43883
// until GetDistUnitXY ( unit , x , y ) < dist ;
43547: LD_VAR 0 1
43551: PPUSH
43552: LD_VAR 0 2
43556: PPUSH
43557: LD_VAR 0 3
43561: PPUSH
43562: CALL_OW 297
43566: PUSH
43567: LD_VAR 0 5
43571: LESS
43572: IFFALSE 43516
// end ; ComTurnXY ( unit , x , y ) ;
43574: LD_VAR 0 1
43578: PPUSH
43579: LD_VAR 0 2
43583: PPUSH
43584: LD_VAR 0 3
43588: PPUSH
43589: CALL_OW 118
// repeat if Multiplayer then
43593: LD_OWVAR 4
43597: IFFALSE 43608
// wait ( 35 ) else
43599: LD_INT 35
43601: PPUSH
43602: CALL_OW 67
43606: GO 43615
// wait ( 5 ) ;
43608: LD_INT 5
43610: PPUSH
43611: CALL_OW 67
// _d := GetDir ( unit ) ;
43615: LD_ADDR_VAR 0 11
43619: PUSH
43620: LD_VAR 0 1
43624: PPUSH
43625: CALL_OW 254
43629: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
43630: LD_ADDR_VAR 0 7
43634: PUSH
43635: LD_VAR 0 1
43639: PPUSH
43640: CALL_OW 250
43644: PPUSH
43645: LD_VAR 0 1
43649: PPUSH
43650: CALL_OW 251
43654: PPUSH
43655: LD_VAR 0 2
43659: PPUSH
43660: LD_VAR 0 3
43664: PPUSH
43665: CALL 84272 0 4
43669: ST_TO_ADDR
// until dir = _d ;
43670: LD_VAR 0 7
43674: PUSH
43675: LD_VAR 0 11
43679: EQUAL
43680: IFFALSE 43593
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
43682: LD_ADDR_VAR 0 9
43686: PUSH
43687: LD_VAR 0 1
43691: PPUSH
43692: CALL_OW 250
43696: PPUSH
43697: LD_VAR 0 7
43701: PPUSH
43702: LD_VAR 0 5
43706: PPUSH
43707: CALL_OW 272
43711: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
43712: LD_ADDR_VAR 0 10
43716: PUSH
43717: LD_VAR 0 1
43721: PPUSH
43722: CALL_OW 251
43726: PPUSH
43727: LD_VAR 0 7
43731: PPUSH
43732: LD_VAR 0 5
43736: PPUSH
43737: CALL_OW 273
43741: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43742: LD_VAR 0 9
43746: PPUSH
43747: LD_VAR 0 10
43751: PPUSH
43752: CALL_OW 488
43756: NOT
43757: IFFALSE 43761
// exit ;
43759: GO 43883
// ComAnimCustom ( unit , 1 ) ;
43761: LD_VAR 0 1
43765: PPUSH
43766: LD_INT 1
43768: PPUSH
43769: CALL_OW 592
// p := 0 ;
43773: LD_ADDR_VAR 0 12
43777: PUSH
43778: LD_INT 0
43780: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
43781: LD_VAR 0 9
43785: PPUSH
43786: LD_VAR 0 10
43790: PPUSH
43791: LD_VAR 0 6
43795: PPUSH
43796: LD_VAR 0 8
43800: PPUSH
43801: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
43805: LD_INT 35
43807: PPUSH
43808: CALL_OW 67
// p := Inc ( p ) ;
43812: LD_ADDR_VAR 0 12
43816: PUSH
43817: LD_VAR 0 12
43821: PPUSH
43822: CALL 84228 0 1
43826: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
43827: LD_VAR 0 12
43831: PUSH
43832: LD_INT 3
43834: EQUAL
43835: IFTRUE 43849
43837: PUSH
43838: LD_VAR 0 1
43842: PPUSH
43843: CALL_OW 302
43847: NOT
43848: OR
43849: IFTRUE 43862
43851: PUSH
43852: LD_VAR 0 1
43856: PPUSH
43857: CALL_OW 301
43861: OR
43862: IFFALSE 43805
// RemoveSeeing ( _x , _y , side ) ;
43864: LD_VAR 0 9
43868: PPUSH
43869: LD_VAR 0 10
43873: PPUSH
43874: LD_VAR 0 6
43878: PPUSH
43879: CALL_OW 331
// end ;
43883: LD_VAR 0 4
43887: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
43888: LD_INT 0
43890: PPUSH
43891: PPUSH
43892: PPUSH
43893: PPUSH
43894: PPUSH
43895: PPUSH
43896: PPUSH
43897: PPUSH
43898: PPUSH
43899: PPUSH
43900: PPUSH
// if not unit then
43901: LD_VAR 0 1
43905: NOT
43906: IFFALSE 43910
// exit ;
43908: GO 44181
// side := GetSide ( unit ) ;
43910: LD_ADDR_VAR 0 3
43914: PUSH
43915: LD_VAR 0 1
43919: PPUSH
43920: CALL_OW 255
43924: ST_TO_ADDR
// x := GetX ( unit ) ;
43925: LD_ADDR_VAR 0 5
43929: PUSH
43930: LD_VAR 0 1
43934: PPUSH
43935: CALL_OW 250
43939: ST_TO_ADDR
// y := GetY ( unit ) ;
43940: LD_ADDR_VAR 0 6
43944: PUSH
43945: LD_VAR 0 1
43949: PPUSH
43950: CALL_OW 251
43954: ST_TO_ADDR
// r := 8 ;
43955: LD_ADDR_VAR 0 4
43959: PUSH
43960: LD_INT 8
43962: ST_TO_ADDR
// if x - r < 0 then
43963: LD_VAR 0 5
43967: PUSH
43968: LD_VAR 0 4
43972: MINUS
43973: PUSH
43974: LD_INT 0
43976: LESS
43977: IFFALSE 43989
// min_x := 0 else
43979: LD_ADDR_VAR 0 7
43983: PUSH
43984: LD_INT 0
43986: ST_TO_ADDR
43987: GO 44005
// min_x := x - r ;
43989: LD_ADDR_VAR 0 7
43993: PUSH
43994: LD_VAR 0 5
43998: PUSH
43999: LD_VAR 0 4
44003: MINUS
44004: ST_TO_ADDR
// if y - r < 0 then
44005: LD_VAR 0 6
44009: PUSH
44010: LD_VAR 0 4
44014: MINUS
44015: PUSH
44016: LD_INT 0
44018: LESS
44019: IFFALSE 44031
// min_y := 0 else
44021: LD_ADDR_VAR 0 8
44025: PUSH
44026: LD_INT 0
44028: ST_TO_ADDR
44029: GO 44047
// min_y := y - r ;
44031: LD_ADDR_VAR 0 8
44035: PUSH
44036: LD_VAR 0 6
44040: PUSH
44041: LD_VAR 0 4
44045: MINUS
44046: ST_TO_ADDR
// max_x := x + r ;
44047: LD_ADDR_VAR 0 9
44051: PUSH
44052: LD_VAR 0 5
44056: PUSH
44057: LD_VAR 0 4
44061: PLUS
44062: ST_TO_ADDR
// max_y := y + r ;
44063: LD_ADDR_VAR 0 10
44067: PUSH
44068: LD_VAR 0 6
44072: PUSH
44073: LD_VAR 0 4
44077: PLUS
44078: ST_TO_ADDR
// for _x = min_x to max_x do
44079: LD_ADDR_VAR 0 11
44083: PUSH
44084: DOUBLE
44085: LD_VAR 0 7
44089: DEC
44090: ST_TO_ADDR
44091: LD_VAR 0 9
44095: PUSH
44096: FOR_TO
44097: IFFALSE 44179
// for _y = min_y to max_y do
44099: LD_ADDR_VAR 0 12
44103: PUSH
44104: DOUBLE
44105: LD_VAR 0 8
44109: DEC
44110: ST_TO_ADDR
44111: LD_VAR 0 10
44115: PUSH
44116: FOR_TO
44117: IFFALSE 44175
// begin if not ValidHex ( _x , _y ) then
44119: LD_VAR 0 11
44123: PPUSH
44124: LD_VAR 0 12
44128: PPUSH
44129: CALL_OW 488
44133: NOT
44134: IFFALSE 44138
// continue ;
44136: GO 44116
// if MineAtPos ( _x , _y ) then
44138: LD_VAR 0 11
44142: PPUSH
44143: LD_VAR 0 12
44147: PPUSH
44148: CALL_OW 458
44152: IFFALSE 44173
// ViewMineAtPos ( _x , _y , side ) ;
44154: LD_VAR 0 11
44158: PPUSH
44159: LD_VAR 0 12
44163: PPUSH
44164: LD_VAR 0 3
44168: PPUSH
44169: CALL_OW 457
// end ;
44173: GO 44116
44175: POP
44176: POP
44177: GO 44096
44179: POP
44180: POP
// end ;
44181: LD_VAR 0 2
44185: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
44186: LD_INT 0
44188: PPUSH
44189: PPUSH
44190: PPUSH
44191: PPUSH
44192: PPUSH
44193: PPUSH
// if not units then
44194: LD_VAR 0 1
44198: NOT
44199: IFFALSE 44203
// exit ;
44201: GO 44633
// scaners := [ ] ;
44203: LD_ADDR_VAR 0 6
44207: PUSH
44208: EMPTY
44209: ST_TO_ADDR
// for i in units do
44210: LD_ADDR_VAR 0 3
44214: PUSH
44215: LD_VAR 0 1
44219: PUSH
44220: FOR_IN
44221: IFFALSE 44378
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
44223: LD_VAR 0 3
44227: PPUSH
44228: CALL_OW 264
44232: PUSH
44233: LD_INT 11
44235: NONEQUAL
44236: IFTRUE 44250
44238: PUSH
44239: LD_VAR 0 3
44243: PPUSH
44244: CALL_OW 302
44248: NOT
44249: OR
44250: IFTRUE 44267
44252: PUSH
44253: LD_VAR 0 3
44257: PPUSH
44258: CALL_OW 110
44262: PUSH
44263: LD_INT 502
44265: EQUAL
44266: OR
44267: IFFALSE 44271
// continue ;
44269: GO 44220
// ComStop ( i ) ;
44271: LD_VAR 0 3
44275: PPUSH
44276: CALL_OW 141
// x := GetX ( i ) ;
44280: LD_ADDR_VAR 0 4
44284: PUSH
44285: LD_VAR 0 3
44289: PPUSH
44290: CALL_OW 250
44294: ST_TO_ADDR
// y := GetY ( i ) ;
44295: LD_ADDR_VAR 0 5
44299: PUSH
44300: LD_VAR 0 3
44304: PPUSH
44305: CALL_OW 251
44309: ST_TO_ADDR
// if GetSide ( i ) = your_side then
44310: LD_VAR 0 3
44314: PPUSH
44315: CALL_OW 255
44319: PUSH
44320: LD_OWVAR 2
44324: EQUAL
44325: IFFALSE 44344
// PlaySoundXY ( x , y , mineDetector ) ;
44327: LD_VAR 0 4
44331: PPUSH
44332: LD_VAR 0 5
44336: PPUSH
44337: LD_STRING mineDetector
44339: PPUSH
44340: CALL_OW 366
// scaners := Join ( scaners , i ) ;
44344: LD_ADDR_VAR 0 6
44348: PUSH
44349: LD_VAR 0 6
44353: PPUSH
44354: LD_VAR 0 3
44358: PPUSH
44359: CALL 82855 0 2
44363: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
44364: LD_VAR 0 3
44368: PPUSH
44369: LD_INT 502
44371: PPUSH
44372: CALL_OW 109
// end ;
44376: GO 44220
44378: POP
44379: POP
// if not scaners then
44380: LD_VAR 0 6
44384: NOT
44385: IFFALSE 44389
// exit ;
44387: GO 44633
// wait ( 3 ) ;
44389: LD_INT 3
44391: PPUSH
44392: CALL_OW 67
// timer := 6 ;
44396: LD_ADDR_VAR 0 7
44400: PUSH
44401: LD_INT 6
44403: ST_TO_ADDR
// repeat for i in scaners do
44404: LD_ADDR_VAR 0 3
44408: PUSH
44409: LD_VAR 0 6
44413: PUSH
44414: FOR_IN
44415: IFFALSE 44531
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
44417: LD_VAR 0 3
44421: PPUSH
44422: CALL_OW 302
44426: NOT
44427: IFTRUE 44440
44429: PUSH
44430: LD_VAR 0 3
44434: PPUSH
44435: CALL_OW 314
44439: OR
44440: IFTRUE 44471
44442: PUSH
44443: LD_VAR 0 3
44447: PPUSH
44448: CALL_OW 263
44452: PUSH
44453: LD_INT 1
44455: EQUAL
44456: IFFALSE 44470
44458: PUSH
44459: LD_VAR 0 3
44463: PPUSH
44464: CALL_OW 311
44468: NOT
44469: AND
44470: OR
44471: IFFALSE 44515
// begin SetUnitDisplayNumber ( i , 0 ) ;
44473: LD_VAR 0 3
44477: PPUSH
44478: LD_INT 0
44480: PPUSH
44481: CALL_OW 505
// SetTag ( i , 0 ) ;
44485: LD_VAR 0 3
44489: PPUSH
44490: LD_INT 0
44492: PPUSH
44493: CALL_OW 109
// scaners := scaners diff i ;
44497: LD_ADDR_VAR 0 6
44501: PUSH
44502: LD_VAR 0 6
44506: PUSH
44507: LD_VAR 0 3
44511: DIFF
44512: ST_TO_ADDR
// continue ;
44513: GO 44414
// end ; SetUnitDisplayNumber ( i , timer ) ;
44515: LD_VAR 0 3
44519: PPUSH
44520: LD_VAR 0 7
44524: PPUSH
44525: CALL_OW 505
// end ;
44529: GO 44414
44531: POP
44532: POP
// if not scaners then
44533: LD_VAR 0 6
44537: NOT
44538: IFFALSE 44542
// exit ;
44540: GO 44633
// timer := Dec ( timer ) ;
44542: LD_ADDR_VAR 0 7
44546: PUSH
44547: LD_VAR 0 7
44551: PPUSH
44552: CALL 84250 0 1
44556: ST_TO_ADDR
// wait ( 0 0$1 ) ;
44557: LD_INT 35
44559: PPUSH
44560: CALL_OW 67
// until timer = 0 ;
44564: LD_VAR 0 7
44568: PUSH
44569: LD_INT 0
44571: EQUAL
44572: IFFALSE 44404
// if not scaners then
44574: LD_VAR 0 6
44578: NOT
44579: IFFALSE 44583
// exit ;
44581: GO 44633
// for i in scaners do
44583: LD_ADDR_VAR 0 3
44587: PUSH
44588: LD_VAR 0 6
44592: PUSH
44593: FOR_IN
44594: IFFALSE 44631
// begin SetUnitDisplayNumber ( i , 0 ) ;
44596: LD_VAR 0 3
44600: PPUSH
44601: LD_INT 0
44603: PPUSH
44604: CALL_OW 505
// SetTag ( i , 0 ) ;
44608: LD_VAR 0 3
44612: PPUSH
44613: LD_INT 0
44615: PPUSH
44616: CALL_OW 109
// RevealDetectorMine ( i ) ;
44620: LD_VAR 0 3
44624: PPUSH
44625: CALL 43888 0 1
// end ;
44629: GO 44593
44631: POP
44632: POP
// end ;
44633: LD_VAR 0 2
44637: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
44638: LD_INT 0
44640: PPUSH
// if p1 = mine_detector_mode then
44641: LD_VAR 0 2
44645: PUSH
44646: LD_INT 103
44648: EQUAL
44649: IFFALSE 44660
// DetectMine ( units ) ;
44651: LD_VAR 0 1
44655: PPUSH
44656: CALL 44186 0 1
// end ; end_of_file
44660: LD_VAR 0 7
44664: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44665: LD_INT 0
44667: PPUSH
44668: PPUSH
// if exist_mode then
44669: LD_VAR 0 2
44673: IFFALSE 44719
// begin unit := CreateCharacter ( prefix & ident ) ;
44675: LD_ADDR_VAR 0 5
44679: PUSH
44680: LD_VAR 0 3
44684: PUSH
44685: LD_VAR 0 1
44689: STR
44690: PPUSH
44691: CALL_OW 34
44695: ST_TO_ADDR
// if unit then
44696: LD_VAR 0 5
44700: IFFALSE 44717
// DeleteCharacters ( prefix & ident ) ;
44702: LD_VAR 0 3
44706: PUSH
44707: LD_VAR 0 1
44711: STR
44712: PPUSH
44713: CALL_OW 40
// end else
44717: GO 44734
// unit := NewCharacter ( ident ) ;
44719: LD_ADDR_VAR 0 5
44723: PUSH
44724: LD_VAR 0 1
44728: PPUSH
44729: CALL_OW 25
44733: ST_TO_ADDR
// result := unit ;
44734: LD_ADDR_VAR 0 4
44738: PUSH
44739: LD_VAR 0 5
44743: ST_TO_ADDR
// end ;
44744: LD_VAR 0 4
44748: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
44749: LD_INT 0
44751: PPUSH
44752: PPUSH
// if exist_mode then
44753: LD_VAR 0 2
44757: IFFALSE 44782
// unit := CreateCharacter ( prefix & ident ) else
44759: LD_ADDR_VAR 0 5
44763: PUSH
44764: LD_VAR 0 3
44768: PUSH
44769: LD_VAR 0 1
44773: STR
44774: PPUSH
44775: CALL_OW 34
44779: ST_TO_ADDR
44780: GO 44797
// unit := NewCharacter ( ident ) ;
44782: LD_ADDR_VAR 0 5
44786: PUSH
44787: LD_VAR 0 1
44791: PPUSH
44792: CALL_OW 25
44796: ST_TO_ADDR
// result := unit ;
44797: LD_ADDR_VAR 0 4
44801: PUSH
44802: LD_VAR 0 5
44806: ST_TO_ADDR
// end ;
44807: LD_VAR 0 4
44811: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44812: LD_INT 0
44814: PPUSH
44815: PPUSH
// if not side or not nation then
44816: LD_VAR 0 1
44820: NOT
44821: IFTRUE 44830
44823: PUSH
44824: LD_VAR 0 2
44828: NOT
44829: OR
44830: IFFALSE 44834
// exit ;
44832: GO 45628
// case nation of nation_american :
44834: LD_VAR 0 2
44838: PUSH
44839: LD_INT 1
44841: DOUBLE
44842: EQUAL
44843: IFTRUE 44847
44845: GO 45069
44847: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
44848: LD_ADDR_VAR 0 4
44852: PUSH
44853: LD_INT 35
44855: PUSH
44856: LD_INT 45
44858: PUSH
44859: LD_INT 46
44861: PUSH
44862: LD_INT 47
44864: PUSH
44865: LD_INT 82
44867: PUSH
44868: LD_INT 83
44870: PUSH
44871: LD_INT 84
44873: PUSH
44874: LD_INT 85
44876: PUSH
44877: LD_INT 86
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 6
44888: PUSH
44889: LD_INT 15
44891: PUSH
44892: LD_INT 16
44894: PUSH
44895: LD_INT 7
44897: PUSH
44898: LD_INT 12
44900: PUSH
44901: LD_INT 13
44903: PUSH
44904: LD_INT 10
44906: PUSH
44907: LD_INT 14
44909: PUSH
44910: LD_INT 20
44912: PUSH
44913: LD_INT 21
44915: PUSH
44916: LD_INT 22
44918: PUSH
44919: LD_INT 25
44921: PUSH
44922: LD_INT 32
44924: PUSH
44925: LD_INT 27
44927: PUSH
44928: LD_INT 36
44930: PUSH
44931: LD_INT 69
44933: PUSH
44934: LD_INT 39
44936: PUSH
44937: LD_INT 34
44939: PUSH
44940: LD_INT 40
44942: PUSH
44943: LD_INT 48
44945: PUSH
44946: LD_INT 49
44948: PUSH
44949: LD_INT 50
44951: PUSH
44952: LD_INT 51
44954: PUSH
44955: LD_INT 52
44957: PUSH
44958: LD_INT 53
44960: PUSH
44961: LD_INT 54
44963: PUSH
44964: LD_INT 55
44966: PUSH
44967: LD_INT 56
44969: PUSH
44970: LD_INT 57
44972: PUSH
44973: LD_INT 58
44975: PUSH
44976: LD_INT 59
44978: PUSH
44979: LD_INT 60
44981: PUSH
44982: LD_INT 61
44984: PUSH
44985: LD_INT 62
44987: PUSH
44988: LD_INT 80
44990: PUSH
44991: LD_INT 82
44993: PUSH
44994: LD_INT 83
44996: PUSH
44997: LD_INT 84
44999: PUSH
45000: LD_INT 85
45002: PUSH
45003: LD_INT 86
45005: PUSH
45006: LD_INT 90
45008: PUSH
45009: LD_INT 93
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: ST_TO_ADDR
45067: GO 45550
45069: LD_INT 2
45071: DOUBLE
45072: EQUAL
45073: IFTRUE 45077
45075: GO 45311
45077: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
45078: LD_ADDR_VAR 0 4
45082: PUSH
45083: LD_INT 35
45085: PUSH
45086: LD_INT 45
45088: PUSH
45089: LD_INT 46
45091: PUSH
45092: LD_INT 47
45094: PUSH
45095: LD_INT 82
45097: PUSH
45098: LD_INT 83
45100: PUSH
45101: LD_INT 84
45103: PUSH
45104: LD_INT 85
45106: PUSH
45107: LD_INT 87
45109: PUSH
45110: LD_INT 70
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 11
45118: PUSH
45119: LD_INT 3
45121: PUSH
45122: LD_INT 4
45124: PUSH
45125: LD_INT 5
45127: PUSH
45128: LD_INT 6
45130: PUSH
45131: LD_INT 15
45133: PUSH
45134: LD_INT 18
45136: PUSH
45137: LD_INT 7
45139: PUSH
45140: LD_INT 17
45142: PUSH
45143: LD_INT 8
45145: PUSH
45146: LD_INT 20
45148: PUSH
45149: LD_INT 21
45151: PUSH
45152: LD_INT 22
45154: PUSH
45155: LD_INT 72
45157: PUSH
45158: LD_INT 26
45160: PUSH
45161: LD_INT 69
45163: PUSH
45164: LD_INT 39
45166: PUSH
45167: LD_INT 40
45169: PUSH
45170: LD_INT 41
45172: PUSH
45173: LD_INT 42
45175: PUSH
45176: LD_INT 43
45178: PUSH
45179: LD_INT 48
45181: PUSH
45182: LD_INT 49
45184: PUSH
45185: LD_INT 50
45187: PUSH
45188: LD_INT 51
45190: PUSH
45191: LD_INT 52
45193: PUSH
45194: LD_INT 53
45196: PUSH
45197: LD_INT 54
45199: PUSH
45200: LD_INT 55
45202: PUSH
45203: LD_INT 56
45205: PUSH
45206: LD_INT 60
45208: PUSH
45209: LD_INT 61
45211: PUSH
45212: LD_INT 62
45214: PUSH
45215: LD_INT 66
45217: PUSH
45218: LD_INT 67
45220: PUSH
45221: LD_INT 68
45223: PUSH
45224: LD_INT 81
45226: PUSH
45227: LD_INT 82
45229: PUSH
45230: LD_INT 83
45232: PUSH
45233: LD_INT 84
45235: PUSH
45236: LD_INT 85
45238: PUSH
45239: LD_INT 87
45241: PUSH
45242: LD_INT 88
45244: PUSH
45245: LD_INT 92
45247: PUSH
45248: LD_INT 94
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
45309: GO 45550
45311: LD_INT 3
45313: DOUBLE
45314: EQUAL
45315: IFTRUE 45319
45317: GO 45549
45319: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
45320: LD_ADDR_VAR 0 4
45324: PUSH
45325: LD_INT 46
45327: PUSH
45328: LD_INT 47
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 2
45336: PUSH
45337: LD_INT 82
45339: PUSH
45340: LD_INT 83
45342: PUSH
45343: LD_INT 84
45345: PUSH
45346: LD_INT 85
45348: PUSH
45349: LD_INT 86
45351: PUSH
45352: LD_INT 11
45354: PUSH
45355: LD_INT 9
45357: PUSH
45358: LD_INT 20
45360: PUSH
45361: LD_INT 19
45363: PUSH
45364: LD_INT 21
45366: PUSH
45367: LD_INT 24
45369: PUSH
45370: LD_INT 22
45372: PUSH
45373: LD_INT 25
45375: PUSH
45376: LD_INT 28
45378: PUSH
45379: LD_INT 29
45381: PUSH
45382: LD_INT 30
45384: PUSH
45385: LD_INT 31
45387: PUSH
45388: LD_INT 37
45390: PUSH
45391: LD_INT 38
45393: PUSH
45394: LD_INT 32
45396: PUSH
45397: LD_INT 27
45399: PUSH
45400: LD_INT 33
45402: PUSH
45403: LD_INT 69
45405: PUSH
45406: LD_INT 39
45408: PUSH
45409: LD_INT 34
45411: PUSH
45412: LD_INT 40
45414: PUSH
45415: LD_INT 71
45417: PUSH
45418: LD_INT 23
45420: PUSH
45421: LD_INT 44
45423: PUSH
45424: LD_INT 48
45426: PUSH
45427: LD_INT 49
45429: PUSH
45430: LD_INT 50
45432: PUSH
45433: LD_INT 51
45435: PUSH
45436: LD_INT 52
45438: PUSH
45439: LD_INT 53
45441: PUSH
45442: LD_INT 54
45444: PUSH
45445: LD_INT 55
45447: PUSH
45448: LD_INT 56
45450: PUSH
45451: LD_INT 57
45453: PUSH
45454: LD_INT 58
45456: PUSH
45457: LD_INT 59
45459: PUSH
45460: LD_INT 63
45462: PUSH
45463: LD_INT 64
45465: PUSH
45466: LD_INT 65
45468: PUSH
45469: LD_INT 82
45471: PUSH
45472: LD_INT 83
45474: PUSH
45475: LD_INT 84
45477: PUSH
45478: LD_INT 85
45480: PUSH
45481: LD_INT 86
45483: PUSH
45484: LD_INT 89
45486: PUSH
45487: LD_INT 91
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: ST_TO_ADDR
45547: GO 45550
45549: POP
// if state > - 1 and state < 3 then
45550: LD_VAR 0 3
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: GREATER
45559: IFFALSE 45571
45561: PUSH
45562: LD_VAR 0 3
45566: PUSH
45567: LD_INT 3
45569: LESS
45570: AND
45571: IFFALSE 45628
// for i in result do
45573: LD_ADDR_VAR 0 5
45577: PUSH
45578: LD_VAR 0 4
45582: PUSH
45583: FOR_IN
45584: IFFALSE 45626
// if GetTech ( i , side ) <> state then
45586: LD_VAR 0 5
45590: PPUSH
45591: LD_VAR 0 1
45595: PPUSH
45596: CALL_OW 321
45600: PUSH
45601: LD_VAR 0 3
45605: NONEQUAL
45606: IFFALSE 45624
// result := result diff i ;
45608: LD_ADDR_VAR 0 4
45612: PUSH
45613: LD_VAR 0 4
45617: PUSH
45618: LD_VAR 0 5
45622: DIFF
45623: ST_TO_ADDR
45624: GO 45583
45626: POP
45627: POP
// end ;
45628: LD_VAR 0 4
45632: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45633: LD_INT 0
45635: PPUSH
45636: PPUSH
45637: PPUSH
// result := true ;
45638: LD_ADDR_VAR 0 3
45642: PUSH
45643: LD_INT 1
45645: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45646: LD_ADDR_VAR 0 5
45650: PUSH
45651: LD_VAR 0 2
45655: PPUSH
45656: CALL_OW 480
45660: ST_TO_ADDR
// if not tmp then
45661: LD_VAR 0 5
45665: NOT
45666: IFFALSE 45670
// exit ;
45668: GO 45719
// for i in tmp do
45670: LD_ADDR_VAR 0 4
45674: PUSH
45675: LD_VAR 0 5
45679: PUSH
45680: FOR_IN
45681: IFFALSE 45717
// if GetTech ( i , side ) <> state_researched then
45683: LD_VAR 0 4
45687: PPUSH
45688: LD_VAR 0 1
45692: PPUSH
45693: CALL_OW 321
45697: PUSH
45698: LD_INT 2
45700: NONEQUAL
45701: IFFALSE 45715
// begin result := false ;
45703: LD_ADDR_VAR 0 3
45707: PUSH
45708: LD_INT 0
45710: ST_TO_ADDR
// exit ;
45711: POP
45712: POP
45713: GO 45719
// end ;
45715: GO 45680
45717: POP
45718: POP
// end ;
45719: LD_VAR 0 3
45723: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45724: LD_INT 0
45726: PPUSH
45727: PPUSH
45728: PPUSH
45729: PPUSH
45730: PPUSH
45731: PPUSH
45732: PPUSH
45733: PPUSH
45734: PPUSH
45735: PPUSH
45736: PPUSH
45737: PPUSH
45738: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45739: LD_VAR 0 1
45743: NOT
45744: IFTRUE 45761
45746: PUSH
45747: LD_VAR 0 1
45751: PPUSH
45752: CALL_OW 257
45756: PUSH
45757: LD_INT 9
45759: NONEQUAL
45760: OR
45761: IFFALSE 45765
// exit ;
45763: GO 46344
// side := GetSide ( unit ) ;
45765: LD_ADDR_VAR 0 9
45769: PUSH
45770: LD_VAR 0 1
45774: PPUSH
45775: CALL_OW 255
45779: ST_TO_ADDR
// tech_space := tech_spacanom ;
45780: LD_ADDR_VAR 0 12
45784: PUSH
45785: LD_INT 29
45787: ST_TO_ADDR
// tech_time := tech_taurad ;
45788: LD_ADDR_VAR 0 13
45792: PUSH
45793: LD_INT 28
45795: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45796: LD_ADDR_VAR 0 11
45800: PUSH
45801: LD_VAR 0 1
45805: PPUSH
45806: CALL_OW 310
45810: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45811: LD_VAR 0 11
45815: PPUSH
45816: CALL_OW 247
45820: PUSH
45821: LD_INT 2
45823: EQUAL
45824: IFFALSE 45828
// exit ;
45826: GO 46344
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45828: LD_ADDR_VAR 0 8
45832: PUSH
45833: LD_INT 81
45835: PUSH
45836: LD_VAR 0 9
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: PUSH
45848: LD_INT 21
45850: PUSH
45851: LD_INT 3
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PPUSH
45866: CALL_OW 69
45870: ST_TO_ADDR
// if not tmp then
45871: LD_VAR 0 8
45875: NOT
45876: IFFALSE 45880
// exit ;
45878: GO 46344
// if in_unit then
45880: LD_VAR 0 11
45884: IFFALSE 45908
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45886: LD_ADDR_VAR 0 10
45890: PUSH
45891: LD_VAR 0 8
45895: PPUSH
45896: LD_VAR 0 11
45900: PPUSH
45901: CALL_OW 74
45905: ST_TO_ADDR
45906: GO 45928
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45908: LD_ADDR_VAR 0 10
45912: PUSH
45913: LD_VAR 0 8
45917: PPUSH
45918: LD_VAR 0 1
45922: PPUSH
45923: CALL_OW 74
45927: ST_TO_ADDR
// if not enemy then
45928: LD_VAR 0 10
45932: NOT
45933: IFFALSE 45937
// exit ;
45935: GO 46344
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45937: LD_VAR 0 11
45941: IFFALSE 45963
45943: PUSH
45944: LD_VAR 0 11
45948: PPUSH
45949: LD_VAR 0 10
45953: PPUSH
45954: CALL_OW 296
45958: PUSH
45959: LD_INT 13
45961: GREATER
45962: AND
45963: IFTRUE 45985
45965: PUSH
45966: LD_VAR 0 1
45970: PPUSH
45971: LD_VAR 0 10
45975: PPUSH
45976: CALL_OW 296
45980: PUSH
45981: LD_INT 12
45983: GREATER
45984: OR
45985: IFFALSE 45989
// exit ;
45987: GO 46344
// missile := [ 1 ] ;
45989: LD_ADDR_VAR 0 14
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: EMPTY
45998: LIST
45999: ST_TO_ADDR
// if Researched ( side , tech_space ) then
46000: LD_VAR 0 9
46004: PPUSH
46005: LD_VAR 0 12
46009: PPUSH
46010: CALL_OW 325
46014: IFFALSE 46043
// missile := Replace ( missile , missile + 1 , 2 ) ;
46016: LD_ADDR_VAR 0 14
46020: PUSH
46021: LD_VAR 0 14
46025: PPUSH
46026: LD_VAR 0 14
46030: PUSH
46031: LD_INT 1
46033: PLUS
46034: PPUSH
46035: LD_INT 2
46037: PPUSH
46038: CALL_OW 1
46042: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
46043: LD_VAR 0 9
46047: PPUSH
46048: LD_VAR 0 13
46052: PPUSH
46053: CALL_OW 325
46057: IFFALSE 46081
46059: PUSH
46060: LD_VAR 0 10
46064: PPUSH
46065: CALL_OW 255
46069: PPUSH
46070: LD_VAR 0 13
46074: PPUSH
46075: CALL_OW 325
46079: NOT
46080: AND
46081: IFFALSE 46110
// missile := Replace ( missile , missile + 1 , 3 ) ;
46083: LD_ADDR_VAR 0 14
46087: PUSH
46088: LD_VAR 0 14
46092: PPUSH
46093: LD_VAR 0 14
46097: PUSH
46098: LD_INT 1
46100: PLUS
46101: PPUSH
46102: LD_INT 3
46104: PPUSH
46105: CALL_OW 1
46109: ST_TO_ADDR
// if missile < 2 then
46110: LD_VAR 0 14
46114: PUSH
46115: LD_INT 2
46117: LESS
46118: IFFALSE 46122
// exit ;
46120: GO 46344
// x := GetX ( enemy ) ;
46122: LD_ADDR_VAR 0 4
46126: PUSH
46127: LD_VAR 0 10
46131: PPUSH
46132: CALL_OW 250
46136: ST_TO_ADDR
// y := GetY ( enemy ) ;
46137: LD_ADDR_VAR 0 5
46141: PUSH
46142: LD_VAR 0 10
46146: PPUSH
46147: CALL_OW 251
46151: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
46152: LD_ADDR_VAR 0 6
46156: PUSH
46157: LD_VAR 0 4
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PPUSH
46166: LD_INT 1
46168: PPUSH
46169: CALL_OW 12
46173: PLUS
46174: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
46175: LD_ADDR_VAR 0 7
46179: PUSH
46180: LD_VAR 0 5
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PPUSH
46189: LD_INT 1
46191: PPUSH
46192: CALL_OW 12
46196: PLUS
46197: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46198: LD_VAR 0 6
46202: PPUSH
46203: LD_VAR 0 7
46207: PPUSH
46208: CALL_OW 488
46212: NOT
46213: IFFALSE 46235
// begin _x := x ;
46215: LD_ADDR_VAR 0 6
46219: PUSH
46220: LD_VAR 0 4
46224: ST_TO_ADDR
// _y := y ;
46225: LD_ADDR_VAR 0 7
46229: PUSH
46230: LD_VAR 0 5
46234: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
46235: LD_ADDR_VAR 0 3
46239: PUSH
46240: LD_INT 1
46242: PPUSH
46243: LD_VAR 0 14
46247: PPUSH
46248: CALL_OW 12
46252: ST_TO_ADDR
// case i of 1 :
46253: LD_VAR 0 3
46257: PUSH
46258: LD_INT 1
46260: DOUBLE
46261: EQUAL
46262: IFTRUE 46266
46264: GO 46283
46266: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
46267: LD_VAR 0 1
46271: PPUSH
46272: LD_VAR 0 10
46276: PPUSH
46277: CALL_OW 115
46281: GO 46344
46283: LD_INT 2
46285: DOUBLE
46286: EQUAL
46287: IFTRUE 46291
46289: GO 46313
46291: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
46292: LD_VAR 0 1
46296: PPUSH
46297: LD_VAR 0 6
46301: PPUSH
46302: LD_VAR 0 7
46306: PPUSH
46307: CALL_OW 153
46311: GO 46344
46313: LD_INT 3
46315: DOUBLE
46316: EQUAL
46317: IFTRUE 46321
46319: GO 46343
46321: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
46322: LD_VAR 0 1
46326: PPUSH
46327: LD_VAR 0 6
46331: PPUSH
46332: LD_VAR 0 7
46336: PPUSH
46337: CALL_OW 154
46341: GO 46344
46343: POP
// end ;
46344: LD_VAR 0 2
46348: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
46349: LD_INT 0
46351: PPUSH
46352: PPUSH
46353: PPUSH
46354: PPUSH
46355: PPUSH
46356: PPUSH
// if not unit or not building then
46357: LD_VAR 0 1
46361: NOT
46362: IFTRUE 46371
46364: PUSH
46365: LD_VAR 0 2
46369: NOT
46370: OR
46371: IFFALSE 46375
// exit ;
46373: GO 46533
// x := GetX ( building ) ;
46375: LD_ADDR_VAR 0 5
46379: PUSH
46380: LD_VAR 0 2
46384: PPUSH
46385: CALL_OW 250
46389: ST_TO_ADDR
// y := GetY ( building ) ;
46390: LD_ADDR_VAR 0 6
46394: PUSH
46395: LD_VAR 0 2
46399: PPUSH
46400: CALL_OW 251
46404: ST_TO_ADDR
// for i := 0 to 5 do
46405: LD_ADDR_VAR 0 4
46409: PUSH
46410: DOUBLE
46411: LD_INT 0
46413: DEC
46414: ST_TO_ADDR
46415: LD_INT 5
46417: PUSH
46418: FOR_TO
46419: IFFALSE 46531
// begin _x := ShiftX ( x , i , 3 ) ;
46421: LD_ADDR_VAR 0 7
46425: PUSH
46426: LD_VAR 0 5
46430: PPUSH
46431: LD_VAR 0 4
46435: PPUSH
46436: LD_INT 3
46438: PPUSH
46439: CALL_OW 272
46443: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
46444: LD_ADDR_VAR 0 8
46448: PUSH
46449: LD_VAR 0 6
46453: PPUSH
46454: LD_VAR 0 4
46458: PPUSH
46459: LD_INT 3
46461: PPUSH
46462: CALL_OW 273
46466: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46467: LD_VAR 0 7
46471: PPUSH
46472: LD_VAR 0 8
46476: PPUSH
46477: CALL_OW 488
46481: NOT
46482: IFFALSE 46486
// continue ;
46484: GO 46418
// if HexInfo ( _x , _y ) = 0 then
46486: LD_VAR 0 7
46490: PPUSH
46491: LD_VAR 0 8
46495: PPUSH
46496: CALL_OW 428
46500: PUSH
46501: LD_INT 0
46503: EQUAL
46504: IFFALSE 46529
// begin ComMoveXY ( unit , _x , _y ) ;
46506: LD_VAR 0 1
46510: PPUSH
46511: LD_VAR 0 7
46515: PPUSH
46516: LD_VAR 0 8
46520: PPUSH
46521: CALL_OW 111
// exit ;
46525: POP
46526: POP
46527: GO 46533
// end ; end ;
46529: GO 46418
46531: POP
46532: POP
// end ;
46533: LD_VAR 0 3
46537: RET
// export function ScanBase ( side , base_area ) ; begin
46538: LD_INT 0
46540: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
46541: LD_ADDR_VAR 0 3
46545: PUSH
46546: LD_VAR 0 2
46550: PPUSH
46551: LD_INT 81
46553: PUSH
46554: LD_VAR 0 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PPUSH
46563: CALL_OW 70
46567: ST_TO_ADDR
// end ;
46568: LD_VAR 0 3
46572: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
46573: LD_INT 0
46575: PPUSH
46576: PPUSH
46577: PPUSH
46578: PPUSH
// result := false ;
46579: LD_ADDR_VAR 0 2
46583: PUSH
46584: LD_INT 0
46586: ST_TO_ADDR
// side := GetSide ( unit ) ;
46587: LD_ADDR_VAR 0 3
46591: PUSH
46592: LD_VAR 0 1
46596: PPUSH
46597: CALL_OW 255
46601: ST_TO_ADDR
// nat := GetNation ( unit ) ;
46602: LD_ADDR_VAR 0 4
46606: PUSH
46607: LD_VAR 0 1
46611: PPUSH
46612: CALL_OW 248
46616: ST_TO_ADDR
// case nat of 1 :
46617: LD_VAR 0 4
46621: PUSH
46622: LD_INT 1
46624: DOUBLE
46625: EQUAL
46626: IFTRUE 46630
46628: GO 46641
46630: POP
// tech := tech_lassight ; 2 :
46631: LD_ADDR_VAR 0 5
46635: PUSH
46636: LD_INT 12
46638: ST_TO_ADDR
46639: GO 46680
46641: LD_INT 2
46643: DOUBLE
46644: EQUAL
46645: IFTRUE 46649
46647: GO 46660
46649: POP
// tech := tech_mortar ; 3 :
46650: LD_ADDR_VAR 0 5
46654: PUSH
46655: LD_INT 41
46657: ST_TO_ADDR
46658: GO 46680
46660: LD_INT 3
46662: DOUBLE
46663: EQUAL
46664: IFTRUE 46668
46666: GO 46679
46668: POP
// tech := tech_bazooka ; end ;
46669: LD_ADDR_VAR 0 5
46673: PUSH
46674: LD_INT 44
46676: ST_TO_ADDR
46677: GO 46680
46679: POP
// if Researched ( side , tech ) then
46680: LD_VAR 0 3
46684: PPUSH
46685: LD_VAR 0 5
46689: PPUSH
46690: CALL_OW 325
46694: IFFALSE 46721
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
46696: LD_ADDR_VAR 0 2
46700: PUSH
46701: LD_INT 5
46703: PUSH
46704: LD_INT 8
46706: PUSH
46707: LD_INT 9
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: LIST
46714: PUSH
46715: LD_VAR 0 4
46719: ARRAY
46720: ST_TO_ADDR
// end ;
46721: LD_VAR 0 2
46725: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
46726: LD_INT 0
46728: PPUSH
46729: PPUSH
46730: PPUSH
// if not mines then
46731: LD_VAR 0 2
46735: NOT
46736: IFFALSE 46740
// exit ;
46738: GO 46884
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46740: LD_ADDR_VAR 0 5
46744: PUSH
46745: LD_INT 81
46747: PUSH
46748: LD_VAR 0 1
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 3
46759: PUSH
46760: LD_INT 21
46762: PUSH
46763: LD_INT 3
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PPUSH
46778: CALL_OW 69
46782: ST_TO_ADDR
// for i in mines do
46783: LD_ADDR_VAR 0 4
46787: PUSH
46788: LD_VAR 0 2
46792: PUSH
46793: FOR_IN
46794: IFFALSE 46882
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
46796: LD_VAR 0 4
46800: PUSH
46801: LD_INT 1
46803: ARRAY
46804: PPUSH
46805: LD_VAR 0 4
46809: PUSH
46810: LD_INT 2
46812: ARRAY
46813: PPUSH
46814: CALL_OW 458
46818: NOT
46819: IFFALSE 46823
// continue ;
46821: GO 46793
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
46823: LD_VAR 0 4
46827: PUSH
46828: LD_INT 1
46830: ARRAY
46831: PPUSH
46832: LD_VAR 0 4
46836: PUSH
46837: LD_INT 2
46839: ARRAY
46840: PPUSH
46841: CALL_OW 428
46845: PUSH
46846: LD_VAR 0 5
46850: IN
46851: IFFALSE 46880
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
46853: LD_VAR 0 4
46857: PUSH
46858: LD_INT 1
46860: ARRAY
46861: PPUSH
46862: LD_VAR 0 4
46866: PUSH
46867: LD_INT 2
46869: ARRAY
46870: PPUSH
46871: LD_VAR 0 1
46875: PPUSH
46876: CALL_OW 456
// end ;
46880: GO 46793
46882: POP
46883: POP
// end ;
46884: LD_VAR 0 3
46888: RET
// export function Count ( array ) ; begin
46889: LD_INT 0
46891: PPUSH
// result := array + 0 ;
46892: LD_ADDR_VAR 0 2
46896: PUSH
46897: LD_VAR 0 1
46901: PUSH
46902: LD_INT 0
46904: PLUS
46905: ST_TO_ADDR
// end ;
46906: LD_VAR 0 2
46910: RET
// export function IsEmpty ( building ) ; begin
46911: LD_INT 0
46913: PPUSH
// if not building then
46914: LD_VAR 0 1
46918: NOT
46919: IFFALSE 46923
// exit ;
46921: GO 46966
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
46923: LD_ADDR_VAR 0 2
46927: PUSH
46928: LD_VAR 0 1
46932: PUSH
46933: LD_INT 22
46935: PUSH
46936: LD_VAR 0 1
46940: PPUSH
46941: CALL_OW 255
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 58
46952: PUSH
46953: EMPTY
46954: LIST
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PPUSH
46960: CALL_OW 69
46964: IN
46965: ST_TO_ADDR
// end ;
46966: LD_VAR 0 2
46970: RET
// export function IsNotFull ( building ) ; var places ; begin
46971: LD_INT 0
46973: PPUSH
46974: PPUSH
// if not building then
46975: LD_VAR 0 1
46979: NOT
46980: IFFALSE 46984
// exit ;
46982: GO 47012
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
46984: LD_ADDR_VAR 0 2
46988: PUSH
46989: LD_VAR 0 1
46993: PPUSH
46994: LD_INT 3
46996: PUSH
46997: LD_INT 62
46999: PUSH
47000: EMPTY
47001: LIST
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PPUSH
47007: CALL_OW 72
47011: ST_TO_ADDR
// end ;
47012: LD_VAR 0 2
47016: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
47017: LD_INT 0
47019: PPUSH
47020: PPUSH
47021: PPUSH
47022: PPUSH
// tmp := [ ] ;
47023: LD_ADDR_VAR 0 3
47027: PUSH
47028: EMPTY
47029: ST_TO_ADDR
// list := [ ] ;
47030: LD_ADDR_VAR 0 5
47034: PUSH
47035: EMPTY
47036: ST_TO_ADDR
// for i = 16 to 25 do
47037: LD_ADDR_VAR 0 4
47041: PUSH
47042: DOUBLE
47043: LD_INT 16
47045: DEC
47046: ST_TO_ADDR
47047: LD_INT 25
47049: PUSH
47050: FOR_TO
47051: IFFALSE 47124
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
47053: LD_ADDR_VAR 0 3
47057: PUSH
47058: LD_VAR 0 3
47062: PUSH
47063: LD_INT 22
47065: PUSH
47066: LD_VAR 0 1
47070: PPUSH
47071: CALL_OW 255
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 91
47082: PUSH
47083: LD_VAR 0 1
47087: PUSH
47088: LD_INT 6
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 30
47098: PUSH
47099: LD_VAR 0 4
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: PUSH
47113: EMPTY
47114: LIST
47115: PPUSH
47116: CALL_OW 69
47120: ADD
47121: ST_TO_ADDR
47122: GO 47050
47124: POP
47125: POP
// for i = 1 to tmp do
47126: LD_ADDR_VAR 0 4
47130: PUSH
47131: DOUBLE
47132: LD_INT 1
47134: DEC
47135: ST_TO_ADDR
47136: LD_VAR 0 3
47140: PUSH
47141: FOR_TO
47142: IFFALSE 47230
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
47144: LD_ADDR_VAR 0 5
47148: PUSH
47149: LD_VAR 0 5
47153: PUSH
47154: LD_VAR 0 3
47158: PUSH
47159: LD_VAR 0 4
47163: ARRAY
47164: PPUSH
47165: CALL_OW 266
47169: PUSH
47170: LD_VAR 0 3
47174: PUSH
47175: LD_VAR 0 4
47179: ARRAY
47180: PPUSH
47181: CALL_OW 250
47185: PUSH
47186: LD_VAR 0 3
47190: PUSH
47191: LD_VAR 0 4
47195: ARRAY
47196: PPUSH
47197: CALL_OW 251
47201: PUSH
47202: LD_VAR 0 3
47206: PUSH
47207: LD_VAR 0 4
47211: ARRAY
47212: PPUSH
47213: CALL_OW 254
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: PUSH
47224: EMPTY
47225: LIST
47226: ADD
47227: ST_TO_ADDR
47228: GO 47141
47230: POP
47231: POP
// result := list ;
47232: LD_ADDR_VAR 0 2
47236: PUSH
47237: LD_VAR 0 5
47241: ST_TO_ADDR
// end ;
47242: LD_VAR 0 2
47246: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
47247: LD_INT 0
47249: PPUSH
47250: PPUSH
47251: PPUSH
47252: PPUSH
47253: PPUSH
47254: PPUSH
47255: PPUSH
// if not factory then
47256: LD_VAR 0 1
47260: NOT
47261: IFFALSE 47265
// exit ;
47263: GO 47868
// if control = control_apeman then
47265: LD_VAR 0 4
47269: PUSH
47270: LD_INT 5
47272: EQUAL
47273: IFFALSE 47382
// begin tmp := UnitsInside ( factory ) ;
47275: LD_ADDR_VAR 0 8
47279: PUSH
47280: LD_VAR 0 1
47284: PPUSH
47285: CALL_OW 313
47289: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
47290: LD_VAR 0 8
47294: PPUSH
47295: LD_INT 25
47297: PUSH
47298: LD_INT 12
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PPUSH
47305: CALL_OW 72
47309: NOT
47310: IFFALSE 47320
// control := control_manual ;
47312: LD_ADDR_VAR 0 4
47316: PUSH
47317: LD_INT 1
47319: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
47320: LD_ADDR_VAR 0 8
47324: PUSH
47325: LD_VAR 0 1
47329: PPUSH
47330: CALL 47017 0 1
47334: ST_TO_ADDR
// if tmp then
47335: LD_VAR 0 8
47339: IFFALSE 47382
// begin for i in tmp do
47341: LD_ADDR_VAR 0 7
47345: PUSH
47346: LD_VAR 0 8
47350: PUSH
47351: FOR_IN
47352: IFFALSE 47380
// if i [ 1 ] = b_ext_radio then
47354: LD_VAR 0 7
47358: PUSH
47359: LD_INT 1
47361: ARRAY
47362: PUSH
47363: LD_INT 22
47365: EQUAL
47366: IFFALSE 47378
// begin control := control_remote ;
47368: LD_ADDR_VAR 0 4
47372: PUSH
47373: LD_INT 2
47375: ST_TO_ADDR
// break ;
47376: GO 47380
// end ;
47378: GO 47351
47380: POP
47381: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47382: LD_VAR 0 1
47386: PPUSH
47387: LD_VAR 0 2
47391: PPUSH
47392: LD_VAR 0 3
47396: PPUSH
47397: LD_VAR 0 4
47401: PPUSH
47402: LD_VAR 0 5
47406: PPUSH
47407: CALL_OW 448
47411: IFFALSE 47446
// begin result := [ chassis , engine , control , weapon ] ;
47413: LD_ADDR_VAR 0 6
47417: PUSH
47418: LD_VAR 0 2
47422: PUSH
47423: LD_VAR 0 3
47427: PUSH
47428: LD_VAR 0 4
47432: PUSH
47433: LD_VAR 0 5
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: ST_TO_ADDR
// exit ;
47444: GO 47868
// end ; _chassis := AvailableChassisList ( factory ) ;
47446: LD_ADDR_VAR 0 9
47450: PUSH
47451: LD_VAR 0 1
47455: PPUSH
47456: CALL_OW 475
47460: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
47461: LD_ADDR_VAR 0 11
47465: PUSH
47466: LD_VAR 0 1
47470: PPUSH
47471: CALL_OW 476
47475: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
47476: LD_ADDR_VAR 0 12
47480: PUSH
47481: LD_VAR 0 1
47485: PPUSH
47486: CALL_OW 477
47490: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
47491: LD_ADDR_VAR 0 10
47495: PUSH
47496: LD_VAR 0 1
47500: PPUSH
47501: CALL_OW 478
47505: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
47506: LD_VAR 0 9
47510: NOT
47511: IFTRUE 47520
47513: PUSH
47514: LD_VAR 0 11
47518: NOT
47519: OR
47520: IFTRUE 47529
47522: PUSH
47523: LD_VAR 0 12
47527: NOT
47528: OR
47529: IFTRUE 47538
47531: PUSH
47532: LD_VAR 0 10
47536: NOT
47537: OR
47538: IFFALSE 47573
// begin result := [ chassis , engine , control , weapon ] ;
47540: LD_ADDR_VAR 0 6
47544: PUSH
47545: LD_VAR 0 2
47549: PUSH
47550: LD_VAR 0 3
47554: PUSH
47555: LD_VAR 0 4
47559: PUSH
47560: LD_VAR 0 5
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: ST_TO_ADDR
// exit ;
47571: GO 47868
// end ; if not chassis in _chassis then
47573: LD_VAR 0 2
47577: PUSH
47578: LD_VAR 0 9
47582: IN
47583: NOT
47584: IFFALSE 47610
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
47586: LD_ADDR_VAR 0 2
47590: PUSH
47591: LD_VAR 0 9
47595: PUSH
47596: LD_INT 1
47598: PPUSH
47599: LD_VAR 0 9
47603: PPUSH
47604: CALL_OW 12
47608: ARRAY
47609: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
47610: LD_VAR 0 2
47614: PPUSH
47615: LD_VAR 0 3
47619: PPUSH
47620: CALL 47873 0 2
47624: NOT
47625: IFFALSE 47686
// repeat engine := _engine [ 1 ] ;
47627: LD_ADDR_VAR 0 3
47631: PUSH
47632: LD_VAR 0 11
47636: PUSH
47637: LD_INT 1
47639: ARRAY
47640: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
47641: LD_ADDR_VAR 0 11
47645: PUSH
47646: LD_VAR 0 11
47650: PPUSH
47651: LD_INT 1
47653: PPUSH
47654: CALL_OW 3
47658: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
47659: LD_VAR 0 2
47663: PPUSH
47664: LD_VAR 0 3
47668: PPUSH
47669: CALL 47873 0 2
47673: IFTRUE 47684
47675: PUSH
47676: LD_VAR 0 11
47680: PUSH
47681: EMPTY
47682: EQUAL
47683: OR
47684: IFFALSE 47627
// if not control in _control then
47686: LD_VAR 0 4
47690: PUSH
47691: LD_VAR 0 12
47695: IN
47696: NOT
47697: IFFALSE 47723
// control := _control [ rand ( 1 , _control ) ] ;
47699: LD_ADDR_VAR 0 4
47703: PUSH
47704: LD_VAR 0 12
47708: PUSH
47709: LD_INT 1
47711: PPUSH
47712: LD_VAR 0 12
47716: PPUSH
47717: CALL_OW 12
47721: ARRAY
47722: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
47723: LD_VAR 0 2
47727: PPUSH
47728: LD_VAR 0 5
47732: PPUSH
47733: CALL 48095 0 2
47737: NOT
47738: IFFALSE 47799
// repeat weapon := _weapon [ 1 ] ;
47740: LD_ADDR_VAR 0 5
47744: PUSH
47745: LD_VAR 0 10
47749: PUSH
47750: LD_INT 1
47752: ARRAY
47753: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
47754: LD_ADDR_VAR 0 10
47758: PUSH
47759: LD_VAR 0 10
47763: PPUSH
47764: LD_INT 1
47766: PPUSH
47767: CALL_OW 3
47771: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
47772: LD_VAR 0 2
47776: PPUSH
47777: LD_VAR 0 5
47781: PPUSH
47782: CALL 48095 0 2
47786: IFTRUE 47797
47788: PUSH
47789: LD_VAR 0 10
47793: PUSH
47794: EMPTY
47795: EQUAL
47796: OR
47797: IFFALSE 47740
// result := [ ] ;
47799: LD_ADDR_VAR 0 6
47803: PUSH
47804: EMPTY
47805: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47806: LD_VAR 0 1
47810: PPUSH
47811: LD_VAR 0 2
47815: PPUSH
47816: LD_VAR 0 3
47820: PPUSH
47821: LD_VAR 0 4
47825: PPUSH
47826: LD_VAR 0 5
47830: PPUSH
47831: CALL_OW 448
47835: IFFALSE 47868
// result := [ chassis , engine , control , weapon ] ;
47837: LD_ADDR_VAR 0 6
47841: PUSH
47842: LD_VAR 0 2
47846: PUSH
47847: LD_VAR 0 3
47851: PUSH
47852: LD_VAR 0 4
47856: PUSH
47857: LD_VAR 0 5
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: ST_TO_ADDR
// end ;
47868: LD_VAR 0 6
47872: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
47873: LD_INT 0
47875: PPUSH
// if not chassis or not engine then
47876: LD_VAR 0 1
47880: NOT
47881: IFTRUE 47890
47883: PUSH
47884: LD_VAR 0 2
47888: NOT
47889: OR
47890: IFFALSE 47894
// exit ;
47892: GO 48090
// case engine of engine_solar :
47894: LD_VAR 0 2
47898: PUSH
47899: LD_INT 2
47901: DOUBLE
47902: EQUAL
47903: IFTRUE 47907
47905: GO 47945
47907: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
47908: LD_ADDR_VAR 0 3
47912: PUSH
47913: LD_INT 11
47915: PUSH
47916: LD_INT 12
47918: PUSH
47919: LD_INT 13
47921: PUSH
47922: LD_INT 14
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
47943: GO 48074
47945: LD_INT 1
47947: DOUBLE
47948: EQUAL
47949: IFTRUE 47953
47951: GO 48015
47953: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
47954: LD_ADDR_VAR 0 3
47958: PUSH
47959: LD_INT 11
47961: PUSH
47962: LD_INT 12
47964: PUSH
47965: LD_INT 13
47967: PUSH
47968: LD_INT 14
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: LD_INT 3
47979: PUSH
47980: LD_INT 4
47982: PUSH
47983: LD_INT 5
47985: PUSH
47986: LD_INT 21
47988: PUSH
47989: LD_INT 23
47991: PUSH
47992: LD_INT 22
47994: PUSH
47995: LD_INT 24
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: ST_TO_ADDR
48013: GO 48074
48015: LD_INT 3
48017: DOUBLE
48018: EQUAL
48019: IFTRUE 48023
48021: GO 48073
48023: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48024: LD_ADDR_VAR 0 3
48028: PUSH
48029: LD_INT 13
48031: PUSH
48032: LD_INT 14
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: LD_INT 3
48040: PUSH
48041: LD_INT 4
48043: PUSH
48044: LD_INT 5
48046: PUSH
48047: LD_INT 21
48049: PUSH
48050: LD_INT 22
48052: PUSH
48053: LD_INT 23
48055: PUSH
48056: LD_INT 24
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: ST_TO_ADDR
48071: GO 48074
48073: POP
// result := ( chassis in result ) ;
48074: LD_ADDR_VAR 0 3
48078: PUSH
48079: LD_VAR 0 1
48083: PUSH
48084: LD_VAR 0 3
48088: IN
48089: ST_TO_ADDR
// end ;
48090: LD_VAR 0 3
48094: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
48095: LD_INT 0
48097: PPUSH
// if not chassis or not weapon then
48098: LD_VAR 0 1
48102: NOT
48103: IFTRUE 48112
48105: PUSH
48106: LD_VAR 0 2
48110: NOT
48111: OR
48112: IFFALSE 48116
// exit ;
48114: GO 49210
// case weapon of us_machine_gun :
48116: LD_VAR 0 2
48120: PUSH
48121: LD_INT 2
48123: DOUBLE
48124: EQUAL
48125: IFTRUE 48129
48127: GO 48159
48129: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
48130: LD_ADDR_VAR 0 3
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: LD_INT 3
48143: PUSH
48144: LD_INT 4
48146: PUSH
48147: LD_INT 5
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: ST_TO_ADDR
48157: GO 49194
48159: LD_INT 3
48161: DOUBLE
48162: EQUAL
48163: IFTRUE 48167
48165: GO 48197
48167: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
48168: LD_ADDR_VAR 0 3
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: LD_INT 3
48181: PUSH
48182: LD_INT 4
48184: PUSH
48185: LD_INT 5
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: ST_TO_ADDR
48195: GO 49194
48197: LD_INT 11
48199: DOUBLE
48200: EQUAL
48201: IFTRUE 48205
48203: GO 48235
48205: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
48206: LD_ADDR_VAR 0 3
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: LD_INT 3
48219: PUSH
48220: LD_INT 4
48222: PUSH
48223: LD_INT 5
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: ST_TO_ADDR
48233: GO 49194
48235: LD_INT 4
48237: DOUBLE
48238: EQUAL
48239: IFTRUE 48243
48241: GO 48269
48243: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
48244: LD_ADDR_VAR 0 3
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: LD_INT 4
48257: PUSH
48258: LD_INT 5
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: ST_TO_ADDR
48267: GO 49194
48269: LD_INT 5
48271: DOUBLE
48272: EQUAL
48273: IFTRUE 48277
48275: GO 48303
48277: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
48278: LD_ADDR_VAR 0 3
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: LD_INT 3
48288: PUSH
48289: LD_INT 4
48291: PUSH
48292: LD_INT 5
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: ST_TO_ADDR
48301: GO 49194
48303: LD_INT 9
48305: DOUBLE
48306: EQUAL
48307: IFTRUE 48311
48309: GO 48337
48311: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
48312: LD_ADDR_VAR 0 3
48316: PUSH
48317: LD_INT 2
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: LD_INT 4
48325: PUSH
48326: LD_INT 5
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: ST_TO_ADDR
48335: GO 49194
48337: LD_INT 7
48339: DOUBLE
48340: EQUAL
48341: IFTRUE 48345
48343: GO 48371
48345: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
48346: LD_ADDR_VAR 0 3
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: LD_INT 3
48356: PUSH
48357: LD_INT 4
48359: PUSH
48360: LD_INT 5
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: ST_TO_ADDR
48369: GO 49194
48371: LD_INT 12
48373: DOUBLE
48374: EQUAL
48375: IFTRUE 48379
48377: GO 48405
48379: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
48380: LD_ADDR_VAR 0 3
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 3
48390: PUSH
48391: LD_INT 4
48393: PUSH
48394: LD_INT 5
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: ST_TO_ADDR
48403: GO 49194
48405: LD_INT 13
48407: DOUBLE
48408: EQUAL
48409: IFTRUE 48413
48411: GO 48439
48413: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
48414: LD_ADDR_VAR 0 3
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: LD_INT 3
48424: PUSH
48425: LD_INT 4
48427: PUSH
48428: LD_INT 5
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: ST_TO_ADDR
48437: GO 49194
48439: LD_INT 14
48441: DOUBLE
48442: EQUAL
48443: IFTRUE 48447
48445: GO 48465
48447: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
48448: LD_ADDR_VAR 0 3
48452: PUSH
48453: LD_INT 4
48455: PUSH
48456: LD_INT 5
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: ST_TO_ADDR
48463: GO 49194
48465: LD_INT 6
48467: DOUBLE
48468: EQUAL
48469: IFTRUE 48473
48471: GO 48491
48473: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
48474: LD_ADDR_VAR 0 3
48478: PUSH
48479: LD_INT 4
48481: PUSH
48482: LD_INT 5
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: ST_TO_ADDR
48489: GO 49194
48491: LD_INT 10
48493: DOUBLE
48494: EQUAL
48495: IFTRUE 48499
48497: GO 48517
48499: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
48500: LD_ADDR_VAR 0 3
48504: PUSH
48505: LD_INT 4
48507: PUSH
48508: LD_INT 5
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: ST_TO_ADDR
48515: GO 49194
48517: LD_INT 22
48519: DOUBLE
48520: EQUAL
48521: IFTRUE 48525
48523: GO 48551
48525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
48526: LD_ADDR_VAR 0 3
48530: PUSH
48531: LD_INT 11
48533: PUSH
48534: LD_INT 12
48536: PUSH
48537: LD_INT 13
48539: PUSH
48540: LD_INT 14
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: ST_TO_ADDR
48549: GO 49194
48551: LD_INT 23
48553: DOUBLE
48554: EQUAL
48555: IFTRUE 48559
48557: GO 48585
48559: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
48560: LD_ADDR_VAR 0 3
48564: PUSH
48565: LD_INT 11
48567: PUSH
48568: LD_INT 12
48570: PUSH
48571: LD_INT 13
48573: PUSH
48574: LD_INT 14
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: ST_TO_ADDR
48583: GO 49194
48585: LD_INT 24
48587: DOUBLE
48588: EQUAL
48589: IFTRUE 48593
48591: GO 48619
48593: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
48594: LD_ADDR_VAR 0 3
48598: PUSH
48599: LD_INT 11
48601: PUSH
48602: LD_INT 12
48604: PUSH
48605: LD_INT 13
48607: PUSH
48608: LD_INT 14
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: ST_TO_ADDR
48617: GO 49194
48619: LD_INT 30
48621: DOUBLE
48622: EQUAL
48623: IFTRUE 48627
48625: GO 48653
48627: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
48628: LD_ADDR_VAR 0 3
48632: PUSH
48633: LD_INT 11
48635: PUSH
48636: LD_INT 12
48638: PUSH
48639: LD_INT 13
48641: PUSH
48642: LD_INT 14
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: ST_TO_ADDR
48651: GO 49194
48653: LD_INT 25
48655: DOUBLE
48656: EQUAL
48657: IFTRUE 48661
48659: GO 48679
48661: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
48662: LD_ADDR_VAR 0 3
48666: PUSH
48667: LD_INT 13
48669: PUSH
48670: LD_INT 14
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: ST_TO_ADDR
48677: GO 49194
48679: LD_INT 27
48681: DOUBLE
48682: EQUAL
48683: IFTRUE 48687
48685: GO 48705
48687: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
48688: LD_ADDR_VAR 0 3
48692: PUSH
48693: LD_INT 13
48695: PUSH
48696: LD_INT 14
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: ST_TO_ADDR
48703: GO 49194
48705: LD_INT 92
48707: DOUBLE
48708: EQUAL
48709: IFTRUE 48713
48711: GO 48739
48713: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
48714: LD_ADDR_VAR 0 3
48718: PUSH
48719: LD_INT 11
48721: PUSH
48722: LD_INT 12
48724: PUSH
48725: LD_INT 13
48727: PUSH
48728: LD_INT 14
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: ST_TO_ADDR
48737: GO 49194
48739: LD_INT 28
48741: DOUBLE
48742: EQUAL
48743: IFTRUE 48747
48745: GO 48765
48747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
48748: LD_ADDR_VAR 0 3
48752: PUSH
48753: LD_INT 13
48755: PUSH
48756: LD_INT 14
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: ST_TO_ADDR
48763: GO 49194
48765: LD_INT 29
48767: DOUBLE
48768: EQUAL
48769: IFTRUE 48773
48771: GO 48791
48773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
48774: LD_ADDR_VAR 0 3
48778: PUSH
48779: LD_INT 13
48781: PUSH
48782: LD_INT 14
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: ST_TO_ADDR
48789: GO 49194
48791: LD_INT 31
48793: DOUBLE
48794: EQUAL
48795: IFTRUE 48799
48797: GO 48817
48799: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
48800: LD_ADDR_VAR 0 3
48804: PUSH
48805: LD_INT 13
48807: PUSH
48808: LD_INT 14
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: ST_TO_ADDR
48815: GO 49194
48817: LD_INT 26
48819: DOUBLE
48820: EQUAL
48821: IFTRUE 48825
48823: GO 48843
48825: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
48826: LD_ADDR_VAR 0 3
48830: PUSH
48831: LD_INT 13
48833: PUSH
48834: LD_INT 14
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: ST_TO_ADDR
48841: GO 49194
48843: LD_INT 42
48845: DOUBLE
48846: EQUAL
48847: IFTRUE 48851
48849: GO 48877
48851: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
48852: LD_ADDR_VAR 0 3
48856: PUSH
48857: LD_INT 21
48859: PUSH
48860: LD_INT 22
48862: PUSH
48863: LD_INT 23
48865: PUSH
48866: LD_INT 24
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: ST_TO_ADDR
48875: GO 49194
48877: LD_INT 43
48879: DOUBLE
48880: EQUAL
48881: IFTRUE 48885
48883: GO 48911
48885: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
48886: LD_ADDR_VAR 0 3
48890: PUSH
48891: LD_INT 21
48893: PUSH
48894: LD_INT 22
48896: PUSH
48897: LD_INT 23
48899: PUSH
48900: LD_INT 24
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: ST_TO_ADDR
48909: GO 49194
48911: LD_INT 44
48913: DOUBLE
48914: EQUAL
48915: IFTRUE 48919
48917: GO 48945
48919: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
48920: LD_ADDR_VAR 0 3
48924: PUSH
48925: LD_INT 21
48927: PUSH
48928: LD_INT 22
48930: PUSH
48931: LD_INT 23
48933: PUSH
48934: LD_INT 24
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: ST_TO_ADDR
48943: GO 49194
48945: LD_INT 45
48947: DOUBLE
48948: EQUAL
48949: IFTRUE 48953
48951: GO 48979
48953: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
48954: LD_ADDR_VAR 0 3
48958: PUSH
48959: LD_INT 21
48961: PUSH
48962: LD_INT 22
48964: PUSH
48965: LD_INT 23
48967: PUSH
48968: LD_INT 24
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: ST_TO_ADDR
48977: GO 49194
48979: LD_INT 49
48981: DOUBLE
48982: EQUAL
48983: IFTRUE 48987
48985: GO 49013
48987: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
48988: LD_ADDR_VAR 0 3
48992: PUSH
48993: LD_INT 21
48995: PUSH
48996: LD_INT 22
48998: PUSH
48999: LD_INT 23
49001: PUSH
49002: LD_INT 24
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: ST_TO_ADDR
49011: GO 49194
49013: LD_INT 51
49015: DOUBLE
49016: EQUAL
49017: IFTRUE 49021
49019: GO 49047
49021: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
49022: LD_ADDR_VAR 0 3
49026: PUSH
49027: LD_INT 21
49029: PUSH
49030: LD_INT 22
49032: PUSH
49033: LD_INT 23
49035: PUSH
49036: LD_INT 24
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: ST_TO_ADDR
49045: GO 49194
49047: LD_INT 52
49049: DOUBLE
49050: EQUAL
49051: IFTRUE 49055
49053: GO 49081
49055: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
49056: LD_ADDR_VAR 0 3
49060: PUSH
49061: LD_INT 21
49063: PUSH
49064: LD_INT 22
49066: PUSH
49067: LD_INT 23
49069: PUSH
49070: LD_INT 24
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: ST_TO_ADDR
49079: GO 49194
49081: LD_INT 53
49083: DOUBLE
49084: EQUAL
49085: IFTRUE 49089
49087: GO 49107
49089: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
49090: LD_ADDR_VAR 0 3
49094: PUSH
49095: LD_INT 23
49097: PUSH
49098: LD_INT 24
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: ST_TO_ADDR
49105: GO 49194
49107: LD_INT 46
49109: DOUBLE
49110: EQUAL
49111: IFTRUE 49115
49113: GO 49133
49115: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
49116: LD_ADDR_VAR 0 3
49120: PUSH
49121: LD_INT 23
49123: PUSH
49124: LD_INT 24
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: ST_TO_ADDR
49131: GO 49194
49133: LD_INT 47
49135: DOUBLE
49136: EQUAL
49137: IFTRUE 49141
49139: GO 49159
49141: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
49142: LD_ADDR_VAR 0 3
49146: PUSH
49147: LD_INT 23
49149: PUSH
49150: LD_INT 24
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: ST_TO_ADDR
49157: GO 49194
49159: LD_INT 98
49161: DOUBLE
49162: EQUAL
49163: IFTRUE 49167
49165: GO 49193
49167: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49168: LD_ADDR_VAR 0 3
49172: PUSH
49173: LD_INT 21
49175: PUSH
49176: LD_INT 22
49178: PUSH
49179: LD_INT 23
49181: PUSH
49182: LD_INT 24
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: ST_TO_ADDR
49191: GO 49194
49193: POP
// result := ( chassis in result ) ;
49194: LD_ADDR_VAR 0 3
49198: PUSH
49199: LD_VAR 0 1
49203: PUSH
49204: LD_VAR 0 3
49208: IN
49209: ST_TO_ADDR
// end ;
49210: LD_VAR 0 3
49214: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
49215: LD_INT 0
49217: PPUSH
49218: PPUSH
49219: PPUSH
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
// result := array ;
49224: LD_ADDR_VAR 0 5
49228: PUSH
49229: LD_VAR 0 1
49233: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
49234: LD_VAR 0 1
49238: NOT
49239: IFTRUE 49248
49241: PUSH
49242: LD_VAR 0 2
49246: NOT
49247: OR
49248: IFTRUE 49257
49250: PUSH
49251: LD_VAR 0 3
49255: NOT
49256: OR
49257: IFTRUE 49271
49259: PUSH
49260: LD_VAR 0 2
49264: PUSH
49265: LD_VAR 0 1
49269: GREATER
49270: OR
49271: IFTRUE 49285
49273: PUSH
49274: LD_VAR 0 3
49278: PUSH
49279: LD_VAR 0 1
49283: GREATER
49284: OR
49285: IFFALSE 49289
// exit ;
49287: GO 49585
// if direction then
49289: LD_VAR 0 4
49293: IFFALSE 49357
// begin d := 1 ;
49295: LD_ADDR_VAR 0 9
49299: PUSH
49300: LD_INT 1
49302: ST_TO_ADDR
// if i_from > i_to then
49303: LD_VAR 0 2
49307: PUSH
49308: LD_VAR 0 3
49312: GREATER
49313: IFFALSE 49339
// length := ( array - i_from ) + i_to else
49315: LD_ADDR_VAR 0 11
49319: PUSH
49320: LD_VAR 0 1
49324: PUSH
49325: LD_VAR 0 2
49329: MINUS
49330: PUSH
49331: LD_VAR 0 3
49335: PLUS
49336: ST_TO_ADDR
49337: GO 49355
// length := i_to - i_from ;
49339: LD_ADDR_VAR 0 11
49343: PUSH
49344: LD_VAR 0 3
49348: PUSH
49349: LD_VAR 0 2
49353: MINUS
49354: ST_TO_ADDR
// end else
49355: GO 49418
// begin d := - 1 ;
49357: LD_ADDR_VAR 0 9
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: ST_TO_ADDR
// if i_from > i_to then
49366: LD_VAR 0 2
49370: PUSH
49371: LD_VAR 0 3
49375: GREATER
49376: IFFALSE 49396
// length := i_from - i_to else
49378: LD_ADDR_VAR 0 11
49382: PUSH
49383: LD_VAR 0 2
49387: PUSH
49388: LD_VAR 0 3
49392: MINUS
49393: ST_TO_ADDR
49394: GO 49418
// length := ( array - i_to ) + i_from ;
49396: LD_ADDR_VAR 0 11
49400: PUSH
49401: LD_VAR 0 1
49405: PUSH
49406: LD_VAR 0 3
49410: MINUS
49411: PUSH
49412: LD_VAR 0 2
49416: PLUS
49417: ST_TO_ADDR
// end ; if not length then
49418: LD_VAR 0 11
49422: NOT
49423: IFFALSE 49427
// exit ;
49425: GO 49585
// tmp := array ;
49427: LD_ADDR_VAR 0 10
49431: PUSH
49432: LD_VAR 0 1
49436: ST_TO_ADDR
// for i = 1 to length do
49437: LD_ADDR_VAR 0 6
49441: PUSH
49442: DOUBLE
49443: LD_INT 1
49445: DEC
49446: ST_TO_ADDR
49447: LD_VAR 0 11
49451: PUSH
49452: FOR_TO
49453: IFFALSE 49573
// begin for j = 1 to array do
49455: LD_ADDR_VAR 0 7
49459: PUSH
49460: DOUBLE
49461: LD_INT 1
49463: DEC
49464: ST_TO_ADDR
49465: LD_VAR 0 1
49469: PUSH
49470: FOR_TO
49471: IFFALSE 49559
// begin k := j + d ;
49473: LD_ADDR_VAR 0 8
49477: PUSH
49478: LD_VAR 0 7
49482: PUSH
49483: LD_VAR 0 9
49487: PLUS
49488: ST_TO_ADDR
// if k > array then
49489: LD_VAR 0 8
49493: PUSH
49494: LD_VAR 0 1
49498: GREATER
49499: IFFALSE 49509
// k := 1 ;
49501: LD_ADDR_VAR 0 8
49505: PUSH
49506: LD_INT 1
49508: ST_TO_ADDR
// if not k then
49509: LD_VAR 0 8
49513: NOT
49514: IFFALSE 49526
// k := array ;
49516: LD_ADDR_VAR 0 8
49520: PUSH
49521: LD_VAR 0 1
49525: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
49526: LD_ADDR_VAR 0 10
49530: PUSH
49531: LD_VAR 0 10
49535: PPUSH
49536: LD_VAR 0 8
49540: PPUSH
49541: LD_VAR 0 1
49545: PUSH
49546: LD_VAR 0 7
49550: ARRAY
49551: PPUSH
49552: CALL_OW 1
49556: ST_TO_ADDR
// end ;
49557: GO 49470
49559: POP
49560: POP
// array := tmp ;
49561: LD_ADDR_VAR 0 1
49565: PUSH
49566: LD_VAR 0 10
49570: ST_TO_ADDR
// end ;
49571: GO 49452
49573: POP
49574: POP
// result := array ;
49575: LD_ADDR_VAR 0 5
49579: PUSH
49580: LD_VAR 0 1
49584: ST_TO_ADDR
// end ;
49585: LD_VAR 0 5
49589: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
49590: LD_INT 0
49592: PPUSH
49593: PPUSH
// result := 0 ;
49594: LD_ADDR_VAR 0 3
49598: PUSH
49599: LD_INT 0
49601: ST_TO_ADDR
// if not array or not value in array then
49602: LD_VAR 0 1
49606: NOT
49607: IFTRUE 49622
49609: PUSH
49610: LD_VAR 0 2
49614: PUSH
49615: LD_VAR 0 1
49619: IN
49620: NOT
49621: OR
49622: IFFALSE 49626
// exit ;
49624: GO 49680
// for i = 1 to array do
49626: LD_ADDR_VAR 0 4
49630: PUSH
49631: DOUBLE
49632: LD_INT 1
49634: DEC
49635: ST_TO_ADDR
49636: LD_VAR 0 1
49640: PUSH
49641: FOR_TO
49642: IFFALSE 49678
// if value = array [ i ] then
49644: LD_VAR 0 2
49648: PUSH
49649: LD_VAR 0 1
49653: PUSH
49654: LD_VAR 0 4
49658: ARRAY
49659: EQUAL
49660: IFFALSE 49676
// begin result := i ;
49662: LD_ADDR_VAR 0 3
49666: PUSH
49667: LD_VAR 0 4
49671: ST_TO_ADDR
// exit ;
49672: POP
49673: POP
49674: GO 49680
// end ;
49676: GO 49641
49678: POP
49679: POP
// end ;
49680: LD_VAR 0 3
49684: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
49685: LD_INT 0
49687: PPUSH
// vc_chassis := chassis ;
49688: LD_ADDR_OWVAR 37
49692: PUSH
49693: LD_VAR 0 1
49697: ST_TO_ADDR
// vc_engine := engine ;
49698: LD_ADDR_OWVAR 39
49702: PUSH
49703: LD_VAR 0 2
49707: ST_TO_ADDR
// vc_control := control ;
49708: LD_ADDR_OWVAR 38
49712: PUSH
49713: LD_VAR 0 3
49717: ST_TO_ADDR
// vc_weapon := weapon ;
49718: LD_ADDR_OWVAR 40
49722: PUSH
49723: LD_VAR 0 4
49727: ST_TO_ADDR
// vc_fuel_battery := fuel ;
49728: LD_ADDR_OWVAR 41
49732: PUSH
49733: LD_VAR 0 5
49737: ST_TO_ADDR
// end ;
49738: LD_VAR 0 6
49742: RET
// export function WantPlant ( unit ) ; var task ; begin
49743: LD_INT 0
49745: PPUSH
49746: PPUSH
// result := false ;
49747: LD_ADDR_VAR 0 2
49751: PUSH
49752: LD_INT 0
49754: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
49755: LD_ADDR_VAR 0 3
49759: PUSH
49760: LD_VAR 0 1
49764: PPUSH
49765: CALL_OW 437
49769: ST_TO_ADDR
// if task then
49770: LD_VAR 0 3
49774: IFFALSE 49802
// if task [ 1 ] [ 1 ] = p then
49776: LD_VAR 0 3
49780: PUSH
49781: LD_INT 1
49783: ARRAY
49784: PUSH
49785: LD_INT 1
49787: ARRAY
49788: PUSH
49789: LD_STRING p
49791: EQUAL
49792: IFFALSE 49802
// result := true ;
49794: LD_ADDR_VAR 0 2
49798: PUSH
49799: LD_INT 1
49801: ST_TO_ADDR
// end ;
49802: LD_VAR 0 2
49806: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
49807: LD_INT 0
49809: PPUSH
49810: PPUSH
49811: PPUSH
49812: PPUSH
// if pos < 1 then
49813: LD_VAR 0 2
49817: PUSH
49818: LD_INT 1
49820: LESS
49821: IFFALSE 49825
// exit ;
49823: GO 50128
// if pos = 1 then
49825: LD_VAR 0 2
49829: PUSH
49830: LD_INT 1
49832: EQUAL
49833: IFFALSE 49866
// result := Replace ( arr , pos [ 1 ] , value ) else
49835: LD_ADDR_VAR 0 4
49839: PUSH
49840: LD_VAR 0 1
49844: PPUSH
49845: LD_VAR 0 2
49849: PUSH
49850: LD_INT 1
49852: ARRAY
49853: PPUSH
49854: LD_VAR 0 3
49858: PPUSH
49859: CALL_OW 1
49863: ST_TO_ADDR
49864: GO 50128
// begin tmp := arr ;
49866: LD_ADDR_VAR 0 6
49870: PUSH
49871: LD_VAR 0 1
49875: ST_TO_ADDR
// s_arr := [ tmp ] ;
49876: LD_ADDR_VAR 0 7
49880: PUSH
49881: LD_VAR 0 6
49885: PUSH
49886: EMPTY
49887: LIST
49888: ST_TO_ADDR
// for i = 1 to pos - 1 do
49889: LD_ADDR_VAR 0 5
49893: PUSH
49894: DOUBLE
49895: LD_INT 1
49897: DEC
49898: ST_TO_ADDR
49899: LD_VAR 0 2
49903: PUSH
49904: LD_INT 1
49906: MINUS
49907: PUSH
49908: FOR_TO
49909: IFFALSE 49954
// begin tmp := tmp [ pos [ i ] ] ;
49911: LD_ADDR_VAR 0 6
49915: PUSH
49916: LD_VAR 0 6
49920: PUSH
49921: LD_VAR 0 2
49925: PUSH
49926: LD_VAR 0 5
49930: ARRAY
49931: ARRAY
49932: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
49933: LD_ADDR_VAR 0 7
49937: PUSH
49938: LD_VAR 0 7
49942: PUSH
49943: LD_VAR 0 6
49947: PUSH
49948: EMPTY
49949: LIST
49950: ADD
49951: ST_TO_ADDR
// end ;
49952: GO 49908
49954: POP
49955: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
49956: LD_ADDR_VAR 0 6
49960: PUSH
49961: LD_VAR 0 6
49965: PPUSH
49966: LD_VAR 0 2
49970: PUSH
49971: LD_VAR 0 2
49975: ARRAY
49976: PPUSH
49977: LD_VAR 0 3
49981: PPUSH
49982: CALL_OW 1
49986: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
49987: LD_ADDR_VAR 0 7
49991: PUSH
49992: LD_VAR 0 7
49996: PPUSH
49997: LD_VAR 0 7
50001: PPUSH
50002: LD_VAR 0 6
50006: PPUSH
50007: CALL_OW 1
50011: ST_TO_ADDR
// for i = s_arr downto 2 do
50012: LD_ADDR_VAR 0 5
50016: PUSH
50017: DOUBLE
50018: LD_VAR 0 7
50022: INC
50023: ST_TO_ADDR
50024: LD_INT 2
50026: PUSH
50027: FOR_DOWNTO
50028: IFFALSE 50112
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
50030: LD_ADDR_VAR 0 6
50034: PUSH
50035: LD_VAR 0 7
50039: PUSH
50040: LD_VAR 0 5
50044: PUSH
50045: LD_INT 1
50047: MINUS
50048: ARRAY
50049: PPUSH
50050: LD_VAR 0 2
50054: PUSH
50055: LD_VAR 0 5
50059: PUSH
50060: LD_INT 1
50062: MINUS
50063: ARRAY
50064: PPUSH
50065: LD_VAR 0 7
50069: PUSH
50070: LD_VAR 0 5
50074: ARRAY
50075: PPUSH
50076: CALL_OW 1
50080: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
50081: LD_ADDR_VAR 0 7
50085: PUSH
50086: LD_VAR 0 7
50090: PPUSH
50091: LD_VAR 0 5
50095: PUSH
50096: LD_INT 1
50098: MINUS
50099: PPUSH
50100: LD_VAR 0 6
50104: PPUSH
50105: CALL_OW 1
50109: ST_TO_ADDR
// end ;
50110: GO 50027
50112: POP
50113: POP
// result := s_arr [ 1 ] ;
50114: LD_ADDR_VAR 0 4
50118: PUSH
50119: LD_VAR 0 7
50123: PUSH
50124: LD_INT 1
50126: ARRAY
50127: ST_TO_ADDR
// end ; end ;
50128: LD_VAR 0 4
50132: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
50133: LD_INT 0
50135: PPUSH
50136: PPUSH
// if not list then
50137: LD_VAR 0 1
50141: NOT
50142: IFFALSE 50146
// exit ;
50144: GO 50237
// i := list [ pos1 ] ;
50146: LD_ADDR_VAR 0 5
50150: PUSH
50151: LD_VAR 0 1
50155: PUSH
50156: LD_VAR 0 2
50160: ARRAY
50161: ST_TO_ADDR
// if not i then
50162: LD_VAR 0 5
50166: NOT
50167: IFFALSE 50171
// exit ;
50169: GO 50237
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
50171: LD_ADDR_VAR 0 1
50175: PUSH
50176: LD_VAR 0 1
50180: PPUSH
50181: LD_VAR 0 2
50185: PPUSH
50186: LD_VAR 0 1
50190: PUSH
50191: LD_VAR 0 3
50195: ARRAY
50196: PPUSH
50197: CALL_OW 1
50201: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
50202: LD_ADDR_VAR 0 1
50206: PUSH
50207: LD_VAR 0 1
50211: PPUSH
50212: LD_VAR 0 3
50216: PPUSH
50217: LD_VAR 0 5
50221: PPUSH
50222: CALL_OW 1
50226: ST_TO_ADDR
// result := list ;
50227: LD_ADDR_VAR 0 4
50231: PUSH
50232: LD_VAR 0 1
50236: ST_TO_ADDR
// end ;
50237: LD_VAR 0 4
50241: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
50242: LD_INT 0
50244: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
50245: LD_ADDR_VAR 0 5
50249: PUSH
50250: LD_VAR 0 1
50254: PPUSH
50255: CALL_OW 250
50259: PPUSH
50260: LD_VAR 0 1
50264: PPUSH
50265: CALL_OW 251
50269: PPUSH
50270: LD_VAR 0 2
50274: PPUSH
50275: LD_VAR 0 3
50279: PPUSH
50280: LD_VAR 0 4
50284: PPUSH
50285: CALL 50667 0 5
50289: ST_TO_ADDR
// end ;
50290: LD_VAR 0 5
50294: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
50295: LD_INT 0
50297: PPUSH
50298: PPUSH
50299: PPUSH
50300: PPUSH
// if not list or not unit then
50301: LD_VAR 0 2
50305: NOT
50306: IFTRUE 50315
50308: PUSH
50309: LD_VAR 0 1
50313: NOT
50314: OR
50315: IFFALSE 50319
// exit ;
50317: GO 50662
// result := [ ] ;
50319: LD_ADDR_VAR 0 5
50323: PUSH
50324: EMPTY
50325: ST_TO_ADDR
// for i in list do
50326: LD_ADDR_VAR 0 6
50330: PUSH
50331: LD_VAR 0 2
50335: PUSH
50336: FOR_IN
50337: IFFALSE 50555
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50339: LD_ADDR_VAR 0 8
50343: PUSH
50344: LD_VAR 0 1
50348: PPUSH
50349: LD_VAR 0 6
50353: PUSH
50354: LD_INT 1
50356: ARRAY
50357: PPUSH
50358: LD_VAR 0 6
50362: PUSH
50363: LD_INT 2
50365: ARRAY
50366: PPUSH
50367: CALL_OW 297
50371: ST_TO_ADDR
// if not Count ( result ) then
50372: LD_VAR 0 5
50376: PPUSH
50377: CALL 46889 0 1
50381: NOT
50382: IFFALSE 50415
// begin result := Join ( result , [ i , tmp ] ) ;
50384: LD_ADDR_VAR 0 5
50388: PUSH
50389: LD_VAR 0 5
50393: PPUSH
50394: LD_VAR 0 6
50398: PUSH
50399: LD_VAR 0 8
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PPUSH
50408: CALL 82855 0 2
50412: ST_TO_ADDR
// continue ;
50413: GO 50336
// end ; if result [ result ] [ 2 ] <= tmp then
50415: LD_VAR 0 5
50419: PUSH
50420: LD_VAR 0 5
50424: ARRAY
50425: PUSH
50426: LD_INT 2
50428: ARRAY
50429: PUSH
50430: LD_VAR 0 8
50434: LESSEQUAL
50435: IFFALSE 50468
// result := Join ( result , [ i , tmp ] ) else
50437: LD_ADDR_VAR 0 5
50441: PUSH
50442: LD_VAR 0 5
50446: PPUSH
50447: LD_VAR 0 6
50451: PUSH
50452: LD_VAR 0 8
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PPUSH
50461: CALL 82855 0 2
50465: ST_TO_ADDR
50466: GO 50553
// begin for j := 1 to Count ( result ) do
50468: LD_ADDR_VAR 0 7
50472: PUSH
50473: DOUBLE
50474: LD_INT 1
50476: DEC
50477: ST_TO_ADDR
50478: LD_VAR 0 5
50482: PPUSH
50483: CALL 46889 0 1
50487: PUSH
50488: FOR_TO
50489: IFFALSE 50551
// begin if tmp < result [ j ] [ 2 ] then
50491: LD_VAR 0 8
50495: PUSH
50496: LD_VAR 0 5
50500: PUSH
50501: LD_VAR 0 7
50505: ARRAY
50506: PUSH
50507: LD_INT 2
50509: ARRAY
50510: LESS
50511: IFFALSE 50549
// begin result := Insert ( result , j , [ i , tmp ] ) ;
50513: LD_ADDR_VAR 0 5
50517: PUSH
50518: LD_VAR 0 5
50522: PPUSH
50523: LD_VAR 0 7
50527: PPUSH
50528: LD_VAR 0 6
50532: PUSH
50533: LD_VAR 0 8
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PPUSH
50542: CALL_OW 2
50546: ST_TO_ADDR
// break ;
50547: GO 50551
// end ; end ;
50549: GO 50488
50551: POP
50552: POP
// end ; end ;
50553: GO 50336
50555: POP
50556: POP
// if result and not asc then
50557: LD_VAR 0 5
50561: IFFALSE 50570
50563: PUSH
50564: LD_VAR 0 3
50568: NOT
50569: AND
50570: IFFALSE 50587
// result := ReverseArray ( result ) ;
50572: LD_ADDR_VAR 0 5
50576: PUSH
50577: LD_VAR 0 5
50581: PPUSH
50582: CALL 77945 0 1
50586: ST_TO_ADDR
// tmp := [ ] ;
50587: LD_ADDR_VAR 0 8
50591: PUSH
50592: EMPTY
50593: ST_TO_ADDR
// if mode then
50594: LD_VAR 0 4
50598: IFFALSE 50662
// begin for i := 1 to result do
50600: LD_ADDR_VAR 0 6
50604: PUSH
50605: DOUBLE
50606: LD_INT 1
50608: DEC
50609: ST_TO_ADDR
50610: LD_VAR 0 5
50614: PUSH
50615: FOR_TO
50616: IFFALSE 50650
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
50618: LD_ADDR_VAR 0 8
50622: PUSH
50623: LD_VAR 0 8
50627: PPUSH
50628: LD_VAR 0 5
50632: PUSH
50633: LD_VAR 0 6
50637: ARRAY
50638: PUSH
50639: LD_INT 1
50641: ARRAY
50642: PPUSH
50643: CALL 82855 0 2
50647: ST_TO_ADDR
50648: GO 50615
50650: POP
50651: POP
// result := tmp ;
50652: LD_ADDR_VAR 0 5
50656: PUSH
50657: LD_VAR 0 8
50661: ST_TO_ADDR
// end ; end ;
50662: LD_VAR 0 5
50666: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
50667: LD_INT 0
50669: PPUSH
50670: PPUSH
50671: PPUSH
50672: PPUSH
// if not list then
50673: LD_VAR 0 3
50677: NOT
50678: IFFALSE 50682
// exit ;
50680: GO 51072
// result := [ ] ;
50682: LD_ADDR_VAR 0 6
50686: PUSH
50687: EMPTY
50688: ST_TO_ADDR
// for i in list do
50689: LD_ADDR_VAR 0 7
50693: PUSH
50694: LD_VAR 0 3
50698: PUSH
50699: FOR_IN
50700: IFFALSE 50902
// begin tmp := GetDistUnitXY ( i , x , y ) ;
50702: LD_ADDR_VAR 0 9
50706: PUSH
50707: LD_VAR 0 7
50711: PPUSH
50712: LD_VAR 0 1
50716: PPUSH
50717: LD_VAR 0 2
50721: PPUSH
50722: CALL_OW 297
50726: ST_TO_ADDR
// if not result then
50727: LD_VAR 0 6
50731: NOT
50732: IFFALSE 50758
// result := [ [ i , tmp ] ] else
50734: LD_ADDR_VAR 0 6
50738: PUSH
50739: LD_VAR 0 7
50743: PUSH
50744: LD_VAR 0 9
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: ST_TO_ADDR
50756: GO 50900
// begin if result [ result ] [ 2 ] <= tmp then
50758: LD_VAR 0 6
50762: PUSH
50763: LD_VAR 0 6
50767: ARRAY
50768: PUSH
50769: LD_INT 2
50771: ARRAY
50772: PUSH
50773: LD_VAR 0 9
50777: LESSEQUAL
50778: IFFALSE 50820
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
50780: LD_ADDR_VAR 0 6
50784: PUSH
50785: LD_VAR 0 6
50789: PPUSH
50790: LD_VAR 0 6
50794: PUSH
50795: LD_INT 1
50797: PLUS
50798: PPUSH
50799: LD_VAR 0 7
50803: PUSH
50804: LD_VAR 0 9
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PPUSH
50813: CALL_OW 2
50817: ST_TO_ADDR
50818: GO 50900
// for j := 1 to result do
50820: LD_ADDR_VAR 0 8
50824: PUSH
50825: DOUBLE
50826: LD_INT 1
50828: DEC
50829: ST_TO_ADDR
50830: LD_VAR 0 6
50834: PUSH
50835: FOR_TO
50836: IFFALSE 50898
// begin if tmp < result [ j ] [ 2 ] then
50838: LD_VAR 0 9
50842: PUSH
50843: LD_VAR 0 6
50847: PUSH
50848: LD_VAR 0 8
50852: ARRAY
50853: PUSH
50854: LD_INT 2
50856: ARRAY
50857: LESS
50858: IFFALSE 50896
// begin result := Insert ( result , j , [ i , tmp ] ) ;
50860: LD_ADDR_VAR 0 6
50864: PUSH
50865: LD_VAR 0 6
50869: PPUSH
50870: LD_VAR 0 8
50874: PPUSH
50875: LD_VAR 0 7
50879: PUSH
50880: LD_VAR 0 9
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PPUSH
50889: CALL_OW 2
50893: ST_TO_ADDR
// break ;
50894: GO 50898
// end ; end ;
50896: GO 50835
50898: POP
50899: POP
// end ; end ;
50900: GO 50699
50902: POP
50903: POP
// if result and not asc then
50904: LD_VAR 0 6
50908: IFFALSE 50917
50910: PUSH
50911: LD_VAR 0 4
50915: NOT
50916: AND
50917: IFFALSE 50992
// begin tmp := result ;
50919: LD_ADDR_VAR 0 9
50923: PUSH
50924: LD_VAR 0 6
50928: ST_TO_ADDR
// for i = tmp downto 1 do
50929: LD_ADDR_VAR 0 7
50933: PUSH
50934: DOUBLE
50935: LD_VAR 0 9
50939: INC
50940: ST_TO_ADDR
50941: LD_INT 1
50943: PUSH
50944: FOR_DOWNTO
50945: IFFALSE 50990
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
50947: LD_ADDR_VAR 0 6
50951: PUSH
50952: LD_VAR 0 6
50956: PPUSH
50957: LD_VAR 0 9
50961: PUSH
50962: LD_VAR 0 7
50966: MINUS
50967: PUSH
50968: LD_INT 1
50970: PLUS
50971: PPUSH
50972: LD_VAR 0 9
50976: PUSH
50977: LD_VAR 0 7
50981: ARRAY
50982: PPUSH
50983: CALL_OW 1
50987: ST_TO_ADDR
50988: GO 50944
50990: POP
50991: POP
// end ; tmp := [ ] ;
50992: LD_ADDR_VAR 0 9
50996: PUSH
50997: EMPTY
50998: ST_TO_ADDR
// if mode then
50999: LD_VAR 0 5
51003: IFFALSE 51072
// begin for i = 1 to result do
51005: LD_ADDR_VAR 0 7
51009: PUSH
51010: DOUBLE
51011: LD_INT 1
51013: DEC
51014: ST_TO_ADDR
51015: LD_VAR 0 6
51019: PUSH
51020: FOR_TO
51021: IFFALSE 51060
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
51023: LD_ADDR_VAR 0 9
51027: PUSH
51028: LD_VAR 0 9
51032: PPUSH
51033: LD_VAR 0 7
51037: PPUSH
51038: LD_VAR 0 6
51042: PUSH
51043: LD_VAR 0 7
51047: ARRAY
51048: PUSH
51049: LD_INT 1
51051: ARRAY
51052: PPUSH
51053: CALL_OW 1
51057: ST_TO_ADDR
51058: GO 51020
51060: POP
51061: POP
// result := tmp ;
51062: LD_ADDR_VAR 0 6
51066: PUSH
51067: LD_VAR 0 9
51071: ST_TO_ADDR
// end ; end ;
51072: LD_VAR 0 6
51076: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
51077: LD_INT 0
51079: PPUSH
51080: PPUSH
51081: PPUSH
51082: PPUSH
51083: PPUSH
51084: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
51085: LD_ADDR_VAR 0 5
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: ST_TO_ADDR
// if not x or not y then
51107: LD_VAR 0 2
51111: NOT
51112: IFTRUE 51121
51114: PUSH
51115: LD_VAR 0 3
51119: NOT
51120: OR
51121: IFFALSE 51125
// exit ;
51123: GO 52781
// if not range then
51125: LD_VAR 0 4
51129: NOT
51130: IFFALSE 51140
// range := 10 ;
51132: LD_ADDR_VAR 0 4
51136: PUSH
51137: LD_INT 10
51139: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51140: LD_ADDR_VAR 0 8
51144: PUSH
51145: LD_INT 81
51147: PUSH
51148: LD_VAR 0 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 92
51159: PUSH
51160: LD_VAR 0 2
51164: PUSH
51165: LD_VAR 0 3
51169: PUSH
51170: LD_VAR 0 4
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 3
51183: PUSH
51184: LD_INT 21
51186: PUSH
51187: LD_INT 3
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: LIST
51202: PPUSH
51203: CALL_OW 69
51207: ST_TO_ADDR
// if not tmp then
51208: LD_VAR 0 8
51212: NOT
51213: IFFALSE 51217
// exit ;
51215: GO 52781
// for i in tmp do
51217: LD_ADDR_VAR 0 6
51221: PUSH
51222: LD_VAR 0 8
51226: PUSH
51227: FOR_IN
51228: IFFALSE 52756
// begin points := [ 0 , 0 , 0 ] ;
51230: LD_ADDR_VAR 0 9
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: LIST
51248: ST_TO_ADDR
// bpoints := 1 ;
51249: LD_ADDR_VAR 0 10
51253: PUSH
51254: LD_INT 1
51256: ST_TO_ADDR
// case GetType ( i ) of unit_human :
51257: LD_VAR 0 6
51261: PPUSH
51262: CALL_OW 247
51266: PUSH
51267: LD_INT 1
51269: DOUBLE
51270: EQUAL
51271: IFTRUE 51275
51273: GO 51857
51275: POP
// begin if GetClass ( i ) = 1 then
51276: LD_VAR 0 6
51280: PPUSH
51281: CALL_OW 257
51285: PUSH
51286: LD_INT 1
51288: EQUAL
51289: IFFALSE 51310
// points := [ 10 , 5 , 3 ] ;
51291: LD_ADDR_VAR 0 9
51295: PUSH
51296: LD_INT 10
51298: PUSH
51299: LD_INT 5
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: LIST
51309: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
51310: LD_VAR 0 6
51314: PPUSH
51315: CALL_OW 257
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: LD_INT 4
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: LIST
51333: IN
51334: IFFALSE 51355
// points := [ 3 , 2 , 1 ] ;
51336: LD_ADDR_VAR 0 9
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: LIST
51354: ST_TO_ADDR
// if GetClass ( i ) = 5 then
51355: LD_VAR 0 6
51359: PPUSH
51360: CALL_OW 257
51364: PUSH
51365: LD_INT 5
51367: EQUAL
51368: IFFALSE 51389
// points := [ 130 , 5 , 2 ] ;
51370: LD_ADDR_VAR 0 9
51374: PUSH
51375: LD_INT 130
51377: PUSH
51378: LD_INT 5
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: LIST
51388: ST_TO_ADDR
// if GetClass ( i ) = 8 then
51389: LD_VAR 0 6
51393: PPUSH
51394: CALL_OW 257
51398: PUSH
51399: LD_INT 8
51401: EQUAL
51402: IFFALSE 51423
// points := [ 35 , 35 , 30 ] ;
51404: LD_ADDR_VAR 0 9
51408: PUSH
51409: LD_INT 35
51411: PUSH
51412: LD_INT 35
51414: PUSH
51415: LD_INT 30
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: ST_TO_ADDR
// if GetClass ( i ) = 9 then
51423: LD_VAR 0 6
51427: PPUSH
51428: CALL_OW 257
51432: PUSH
51433: LD_INT 9
51435: EQUAL
51436: IFFALSE 51457
// points := [ 20 , 55 , 40 ] ;
51438: LD_ADDR_VAR 0 9
51442: PUSH
51443: LD_INT 20
51445: PUSH
51446: LD_INT 55
51448: PUSH
51449: LD_INT 40
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: LIST
51456: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
51457: LD_VAR 0 6
51461: PPUSH
51462: CALL_OW 257
51466: PUSH
51467: LD_INT 12
51469: PUSH
51470: LD_INT 16
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: IN
51477: IFFALSE 51498
// points := [ 5 , 3 , 2 ] ;
51479: LD_ADDR_VAR 0 9
51483: PUSH
51484: LD_INT 5
51486: PUSH
51487: LD_INT 3
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: LIST
51497: ST_TO_ADDR
// if GetClass ( i ) = 17 then
51498: LD_VAR 0 6
51502: PPUSH
51503: CALL_OW 257
51507: PUSH
51508: LD_INT 17
51510: EQUAL
51511: IFFALSE 51532
// points := [ 100 , 50 , 75 ] ;
51513: LD_ADDR_VAR 0 9
51517: PUSH
51518: LD_INT 100
51520: PUSH
51521: LD_INT 50
51523: PUSH
51524: LD_INT 75
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: LIST
51531: ST_TO_ADDR
// if GetClass ( i ) = 15 then
51532: LD_VAR 0 6
51536: PPUSH
51537: CALL_OW 257
51541: PUSH
51542: LD_INT 15
51544: EQUAL
51545: IFFALSE 51566
// points := [ 10 , 5 , 3 ] ;
51547: LD_ADDR_VAR 0 9
51551: PUSH
51552: LD_INT 10
51554: PUSH
51555: LD_INT 5
51557: PUSH
51558: LD_INT 3
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: ST_TO_ADDR
// if GetClass ( i ) = 14 then
51566: LD_VAR 0 6
51570: PPUSH
51571: CALL_OW 257
51575: PUSH
51576: LD_INT 14
51578: EQUAL
51579: IFFALSE 51600
// points := [ 10 , 0 , 0 ] ;
51581: LD_ADDR_VAR 0 9
51585: PUSH
51586: LD_INT 10
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: LIST
51599: ST_TO_ADDR
// if GetClass ( i ) = 11 then
51600: LD_VAR 0 6
51604: PPUSH
51605: CALL_OW 257
51609: PUSH
51610: LD_INT 11
51612: EQUAL
51613: IFFALSE 51634
// points := [ 30 , 10 , 5 ] ;
51615: LD_ADDR_VAR 0 9
51619: PUSH
51620: LD_INT 30
51622: PUSH
51623: LD_INT 10
51625: PUSH
51626: LD_INT 5
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
51634: LD_VAR 0 1
51638: PPUSH
51639: LD_INT 5
51641: PPUSH
51642: CALL_OW 321
51646: PUSH
51647: LD_INT 2
51649: EQUAL
51650: IFFALSE 51667
// bpoints := bpoints * 1.8 ;
51652: LD_ADDR_VAR 0 10
51656: PUSH
51657: LD_VAR 0 10
51661: PUSH
51662: LD_REAL  1.80000000000000E+0000
51665: MUL
51666: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
51667: LD_VAR 0 6
51671: PPUSH
51672: CALL_OW 257
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: LD_INT 3
51685: PUSH
51686: LD_INT 4
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: IN
51695: IFFALSE 51715
51697: PUSH
51698: LD_VAR 0 1
51702: PPUSH
51703: LD_INT 51
51705: PPUSH
51706: CALL_OW 321
51710: PUSH
51711: LD_INT 2
51713: EQUAL
51714: AND
51715: IFFALSE 51732
// bpoints := bpoints * 1.2 ;
51717: LD_ADDR_VAR 0 10
51721: PUSH
51722: LD_VAR 0 10
51726: PUSH
51727: LD_REAL  1.20000000000000E+0000
51730: MUL
51731: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
51732: LD_VAR 0 6
51736: PPUSH
51737: CALL_OW 257
51741: PUSH
51742: LD_INT 5
51744: PUSH
51745: LD_INT 7
51747: PUSH
51748: LD_INT 9
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: LIST
51755: IN
51756: IFFALSE 51776
51758: PUSH
51759: LD_VAR 0 1
51763: PPUSH
51764: LD_INT 52
51766: PPUSH
51767: CALL_OW 321
51771: PUSH
51772: LD_INT 2
51774: EQUAL
51775: AND
51776: IFFALSE 51793
// bpoints := bpoints * 1.5 ;
51778: LD_ADDR_VAR 0 10
51782: PUSH
51783: LD_VAR 0 10
51787: PUSH
51788: LD_REAL  1.50000000000000E+0000
51791: MUL
51792: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
51793: LD_VAR 0 1
51797: PPUSH
51798: LD_INT 66
51800: PPUSH
51801: CALL_OW 321
51805: PUSH
51806: LD_INT 2
51808: EQUAL
51809: IFFALSE 51826
// bpoints := bpoints * 1.1 ;
51811: LD_ADDR_VAR 0 10
51815: PUSH
51816: LD_VAR 0 10
51820: PUSH
51821: LD_REAL  1.10000000000000E+0000
51824: MUL
51825: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
51826: LD_ADDR_VAR 0 10
51830: PUSH
51831: LD_VAR 0 10
51835: PUSH
51836: LD_VAR 0 6
51840: PPUSH
51841: LD_INT 1
51843: PPUSH
51844: CALL_OW 259
51848: PUSH
51849: LD_REAL  1.15000000000000E+0000
51852: MUL
51853: MUL
51854: ST_TO_ADDR
// end ; unit_vehicle :
51855: GO 52685
51857: LD_INT 2
51859: DOUBLE
51860: EQUAL
51861: IFTRUE 51865
51863: GO 52673
51865: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
51866: LD_VAR 0 6
51870: PPUSH
51871: CALL_OW 264
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: LD_INT 42
51881: PUSH
51882: LD_INT 24
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: IN
51890: IFFALSE 51911
// points := [ 25 , 5 , 3 ] ;
51892: LD_ADDR_VAR 0 9
51896: PUSH
51897: LD_INT 25
51899: PUSH
51900: LD_INT 5
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
51911: LD_VAR 0 6
51915: PPUSH
51916: CALL_OW 264
51920: PUSH
51921: LD_INT 4
51923: PUSH
51924: LD_INT 43
51926: PUSH
51927: LD_INT 25
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: LIST
51934: IN
51935: IFFALSE 51956
// points := [ 40 , 15 , 5 ] ;
51937: LD_ADDR_VAR 0 9
51941: PUSH
51942: LD_INT 40
51944: PUSH
51945: LD_INT 15
51947: PUSH
51948: LD_INT 5
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: LIST
51955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
51956: LD_VAR 0 6
51960: PPUSH
51961: CALL_OW 264
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: LD_INT 23
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: IN
51976: IFFALSE 51997
// points := [ 7 , 25 , 8 ] ;
51978: LD_ADDR_VAR 0 9
51982: PUSH
51983: LD_INT 7
51985: PUSH
51986: LD_INT 25
51988: PUSH
51989: LD_INT 8
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
51997: LD_VAR 0 6
52001: PPUSH
52002: CALL_OW 264
52006: PUSH
52007: LD_INT 5
52009: PUSH
52010: LD_INT 27
52012: PUSH
52013: LD_INT 44
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: LIST
52020: IN
52021: IFFALSE 52042
// points := [ 14 , 50 , 16 ] ;
52023: LD_ADDR_VAR 0 9
52027: PUSH
52028: LD_INT 14
52030: PUSH
52031: LD_INT 50
52033: PUSH
52034: LD_INT 16
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
52042: LD_VAR 0 6
52046: PPUSH
52047: CALL_OW 264
52051: PUSH
52052: LD_INT 6
52054: PUSH
52055: LD_INT 46
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: IN
52062: IFFALSE 52083
// points := [ 32 , 120 , 70 ] ;
52064: LD_ADDR_VAR 0 9
52068: PUSH
52069: LD_INT 32
52071: PUSH
52072: LD_INT 120
52074: PUSH
52075: LD_INT 70
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: LIST
52082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
52083: LD_VAR 0 6
52087: PPUSH
52088: CALL_OW 264
52092: PUSH
52093: LD_INT 7
52095: PUSH
52096: LD_INT 28
52098: PUSH
52099: LD_INT 45
52101: PUSH
52102: LD_INT 92
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: IN
52111: IFFALSE 52132
// points := [ 35 , 20 , 45 ] ;
52113: LD_ADDR_VAR 0 9
52117: PUSH
52118: LD_INT 35
52120: PUSH
52121: LD_INT 20
52123: PUSH
52124: LD_INT 45
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
52132: LD_VAR 0 6
52136: PPUSH
52137: CALL_OW 264
52141: PUSH
52142: LD_INT 47
52144: PUSH
52145: EMPTY
52146: LIST
52147: IN
52148: IFFALSE 52169
// points := [ 67 , 45 , 75 ] ;
52150: LD_ADDR_VAR 0 9
52154: PUSH
52155: LD_INT 67
52157: PUSH
52158: LD_INT 45
52160: PUSH
52161: LD_INT 75
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: LIST
52168: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
52169: LD_VAR 0 6
52173: PPUSH
52174: CALL_OW 264
52178: PUSH
52179: LD_INT 26
52181: PUSH
52182: EMPTY
52183: LIST
52184: IN
52185: IFFALSE 52206
// points := [ 120 , 30 , 80 ] ;
52187: LD_ADDR_VAR 0 9
52191: PUSH
52192: LD_INT 120
52194: PUSH
52195: LD_INT 30
52197: PUSH
52198: LD_INT 80
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: LIST
52205: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
52206: LD_VAR 0 6
52210: PPUSH
52211: CALL_OW 264
52215: PUSH
52216: LD_INT 22
52218: PUSH
52219: EMPTY
52220: LIST
52221: IN
52222: IFFALSE 52243
// points := [ 40 , 1 , 1 ] ;
52224: LD_ADDR_VAR 0 9
52228: PUSH
52229: LD_INT 40
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
52243: LD_VAR 0 6
52247: PPUSH
52248: CALL_OW 264
52252: PUSH
52253: LD_INT 29
52255: PUSH
52256: EMPTY
52257: LIST
52258: IN
52259: IFFALSE 52280
// points := [ 70 , 200 , 400 ] ;
52261: LD_ADDR_VAR 0 9
52265: PUSH
52266: LD_INT 70
52268: PUSH
52269: LD_INT 200
52271: PUSH
52272: LD_INT 400
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: LIST
52279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
52280: LD_VAR 0 6
52284: PPUSH
52285: CALL_OW 264
52289: PUSH
52290: LD_INT 14
52292: PUSH
52293: LD_INT 53
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: IN
52300: IFFALSE 52321
// points := [ 40 , 10 , 20 ] ;
52302: LD_ADDR_VAR 0 9
52306: PUSH
52307: LD_INT 40
52309: PUSH
52310: LD_INT 10
52312: PUSH
52313: LD_INT 20
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
52321: LD_VAR 0 6
52325: PPUSH
52326: CALL_OW 264
52330: PUSH
52331: LD_INT 9
52333: PUSH
52334: EMPTY
52335: LIST
52336: IN
52337: IFFALSE 52358
// points := [ 5 , 70 , 20 ] ;
52339: LD_ADDR_VAR 0 9
52343: PUSH
52344: LD_INT 5
52346: PUSH
52347: LD_INT 70
52349: PUSH
52350: LD_INT 20
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
52358: LD_VAR 0 6
52362: PPUSH
52363: CALL_OW 264
52367: PUSH
52368: LD_INT 10
52370: PUSH
52371: EMPTY
52372: LIST
52373: IN
52374: IFFALSE 52395
// points := [ 35 , 110 , 70 ] ;
52376: LD_ADDR_VAR 0 9
52380: PUSH
52381: LD_INT 35
52383: PUSH
52384: LD_INT 110
52386: PUSH
52387: LD_INT 70
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
52395: LD_VAR 0 6
52399: PPUSH
52400: CALL_OW 265
52404: PUSH
52405: LD_INT 25
52407: EQUAL
52408: IFFALSE 52429
// points := [ 80 , 65 , 100 ] ;
52410: LD_ADDR_VAR 0 9
52414: PUSH
52415: LD_INT 80
52417: PUSH
52418: LD_INT 65
52420: PUSH
52421: LD_INT 100
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
52429: LD_VAR 0 6
52433: PPUSH
52434: CALL_OW 263
52438: PUSH
52439: LD_INT 1
52441: EQUAL
52442: IFFALSE 52477
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
52444: LD_ADDR_VAR 0 10
52448: PUSH
52449: LD_VAR 0 10
52453: PUSH
52454: LD_VAR 0 6
52458: PPUSH
52459: CALL_OW 311
52463: PPUSH
52464: LD_INT 3
52466: PPUSH
52467: CALL_OW 259
52471: PUSH
52472: LD_INT 4
52474: MUL
52475: MUL
52476: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
52477: LD_VAR 0 6
52481: PPUSH
52482: CALL_OW 263
52486: PUSH
52487: LD_INT 2
52489: EQUAL
52490: IFFALSE 52541
// begin j := IsControledBy ( i ) ;
52492: LD_ADDR_VAR 0 7
52496: PUSH
52497: LD_VAR 0 6
52501: PPUSH
52502: CALL_OW 312
52506: ST_TO_ADDR
// if j then
52507: LD_VAR 0 7
52511: IFFALSE 52541
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
52513: LD_ADDR_VAR 0 10
52517: PUSH
52518: LD_VAR 0 10
52522: PUSH
52523: LD_VAR 0 7
52527: PPUSH
52528: LD_INT 3
52530: PPUSH
52531: CALL_OW 259
52535: PUSH
52536: LD_INT 3
52538: MUL
52539: MUL
52540: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
52541: LD_VAR 0 6
52545: PPUSH
52546: CALL_OW 264
52550: PUSH
52551: LD_INT 5
52553: PUSH
52554: LD_INT 6
52556: PUSH
52557: LD_INT 46
52559: PUSH
52560: LD_INT 44
52562: PUSH
52563: LD_INT 47
52565: PUSH
52566: LD_INT 45
52568: PUSH
52569: LD_INT 28
52571: PUSH
52572: LD_INT 7
52574: PUSH
52575: LD_INT 27
52577: PUSH
52578: LD_INT 29
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: IN
52593: IFFALSE 52613
52595: PUSH
52596: LD_VAR 0 1
52600: PPUSH
52601: LD_INT 52
52603: PPUSH
52604: CALL_OW 321
52608: PUSH
52609: LD_INT 2
52611: EQUAL
52612: AND
52613: IFFALSE 52630
// bpoints := bpoints * 1.2 ;
52615: LD_ADDR_VAR 0 10
52619: PUSH
52620: LD_VAR 0 10
52624: PUSH
52625: LD_REAL  1.20000000000000E+0000
52628: MUL
52629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
52630: LD_VAR 0 6
52634: PPUSH
52635: CALL_OW 264
52639: PUSH
52640: LD_INT 6
52642: PUSH
52643: LD_INT 46
52645: PUSH
52646: LD_INT 47
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: IN
52654: IFFALSE 52671
// bpoints := bpoints * 1.2 ;
52656: LD_ADDR_VAR 0 10
52660: PUSH
52661: LD_VAR 0 10
52665: PUSH
52666: LD_REAL  1.20000000000000E+0000
52669: MUL
52670: ST_TO_ADDR
// end ; unit_building :
52671: GO 52685
52673: LD_INT 3
52675: DOUBLE
52676: EQUAL
52677: IFTRUE 52681
52679: GO 52684
52681: POP
// ; end ;
52682: GO 52685
52684: POP
// for j = 1 to 3 do
52685: LD_ADDR_VAR 0 7
52689: PUSH
52690: DOUBLE
52691: LD_INT 1
52693: DEC
52694: ST_TO_ADDR
52695: LD_INT 3
52697: PUSH
52698: FOR_TO
52699: IFFALSE 52752
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
52701: LD_ADDR_VAR 0 5
52705: PUSH
52706: LD_VAR 0 5
52710: PPUSH
52711: LD_VAR 0 7
52715: PPUSH
52716: LD_VAR 0 5
52720: PUSH
52721: LD_VAR 0 7
52725: ARRAY
52726: PUSH
52727: LD_VAR 0 9
52731: PUSH
52732: LD_VAR 0 7
52736: ARRAY
52737: PUSH
52738: LD_VAR 0 10
52742: MUL
52743: PLUS
52744: PPUSH
52745: CALL_OW 1
52749: ST_TO_ADDR
52750: GO 52698
52752: POP
52753: POP
// end ;
52754: GO 51227
52756: POP
52757: POP
// result := Replace ( result , 4 , tmp ) ;
52758: LD_ADDR_VAR 0 5
52762: PUSH
52763: LD_VAR 0 5
52767: PPUSH
52768: LD_INT 4
52770: PPUSH
52771: LD_VAR 0 8
52775: PPUSH
52776: CALL_OW 1
52780: ST_TO_ADDR
// end ;
52781: LD_VAR 0 5
52785: RET
// export function DangerAtRange ( unit , range ) ; begin
52786: LD_INT 0
52788: PPUSH
// if not unit then
52789: LD_VAR 0 1
52793: NOT
52794: IFFALSE 52798
// exit ;
52796: GO 52843
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
52798: LD_ADDR_VAR 0 3
52802: PUSH
52803: LD_VAR 0 1
52807: PPUSH
52808: CALL_OW 255
52812: PPUSH
52813: LD_VAR 0 1
52817: PPUSH
52818: CALL_OW 250
52822: PPUSH
52823: LD_VAR 0 1
52827: PPUSH
52828: CALL_OW 251
52832: PPUSH
52833: LD_VAR 0 2
52837: PPUSH
52838: CALL 51077 0 4
52842: ST_TO_ADDR
// end ;
52843: LD_VAR 0 3
52847: RET
// export function DangerInArea ( side , area ) ; begin
52848: LD_INT 0
52850: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
52851: LD_ADDR_VAR 0 3
52855: PUSH
52856: LD_VAR 0 2
52860: PPUSH
52861: LD_INT 81
52863: PUSH
52864: LD_VAR 0 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PPUSH
52873: CALL_OW 70
52877: ST_TO_ADDR
// end ;
52878: LD_VAR 0 3
52882: RET
// export function IsExtension ( b ) ; begin
52883: LD_INT 0
52885: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
52886: LD_ADDR_VAR 0 2
52890: PUSH
52891: LD_VAR 0 1
52895: PUSH
52896: LD_INT 23
52898: PUSH
52899: LD_INT 20
52901: PUSH
52902: LD_INT 22
52904: PUSH
52905: LD_INT 17
52907: PUSH
52908: LD_INT 24
52910: PUSH
52911: LD_INT 21
52913: PUSH
52914: LD_INT 19
52916: PUSH
52917: LD_INT 16
52919: PUSH
52920: LD_INT 25
52922: PUSH
52923: LD_INT 18
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: IN
52938: ST_TO_ADDR
// end ;
52939: LD_VAR 0 2
52943: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
52944: LD_INT 0
52946: PPUSH
52947: PPUSH
52948: PPUSH
// result := [ ] ;
52949: LD_ADDR_VAR 0 4
52953: PUSH
52954: EMPTY
52955: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
52956: LD_ADDR_VAR 0 5
52960: PUSH
52961: LD_VAR 0 2
52965: PPUSH
52966: LD_INT 21
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PPUSH
52976: CALL_OW 70
52980: ST_TO_ADDR
// if not tmp then
52981: LD_VAR 0 5
52985: NOT
52986: IFFALSE 52990
// exit ;
52988: GO 53054
// if checkLink then
52990: LD_VAR 0 3
52994: IFFALSE 53044
// begin for i in tmp do
52996: LD_ADDR_VAR 0 6
53000: PUSH
53001: LD_VAR 0 5
53005: PUSH
53006: FOR_IN
53007: IFFALSE 53042
// if GetBase ( i ) <> base then
53009: LD_VAR 0 6
53013: PPUSH
53014: CALL_OW 274
53018: PUSH
53019: LD_VAR 0 1
53023: NONEQUAL
53024: IFFALSE 53040
// ComLinkToBase ( base , i ) ;
53026: LD_VAR 0 1
53030: PPUSH
53031: LD_VAR 0 6
53035: PPUSH
53036: CALL_OW 169
53040: GO 53006
53042: POP
53043: POP
// end ; result := tmp ;
53044: LD_ADDR_VAR 0 4
53048: PUSH
53049: LD_VAR 0 5
53053: ST_TO_ADDR
// end ;
53054: LD_VAR 0 4
53058: RET
// export function ComComplete ( units , b ) ; var i ; begin
53059: LD_INT 0
53061: PPUSH
53062: PPUSH
// if not units then
53063: LD_VAR 0 1
53067: NOT
53068: IFFALSE 53072
// exit ;
53070: GO 53162
// for i in units do
53072: LD_ADDR_VAR 0 4
53076: PUSH
53077: LD_VAR 0 1
53081: PUSH
53082: FOR_IN
53083: IFFALSE 53160
// if BuildingStatus ( b ) = bs_build then
53085: LD_VAR 0 2
53089: PPUSH
53090: CALL_OW 461
53094: PUSH
53095: LD_INT 1
53097: EQUAL
53098: IFFALSE 53158
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
53100: LD_VAR 0 4
53104: PPUSH
53105: LD_STRING h
53107: PUSH
53108: LD_VAR 0 2
53112: PPUSH
53113: CALL_OW 250
53117: PUSH
53118: LD_VAR 0 2
53122: PPUSH
53123: CALL_OW 251
53127: PUSH
53128: LD_VAR 0 2
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: PUSH
53151: EMPTY
53152: LIST
53153: PPUSH
53154: CALL_OW 446
53158: GO 53082
53160: POP
53161: POP
// end ;
53162: LD_VAR 0 3
53166: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
53167: LD_INT 0
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
53173: PPUSH
53174: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
53175: LD_VAR 0 1
53179: NOT
53180: IFTRUE 53197
53182: PUSH
53183: LD_VAR 0 1
53187: PPUSH
53188: CALL_OW 263
53192: PUSH
53193: LD_INT 2
53195: NONEQUAL
53196: OR
53197: IFFALSE 53201
// exit ;
53199: GO 53517
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
53201: LD_ADDR_VAR 0 6
53205: PUSH
53206: LD_INT 22
53208: PUSH
53209: LD_VAR 0 1
53213: PPUSH
53214: CALL_OW 255
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: LD_INT 30
53228: PUSH
53229: LD_INT 36
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 34
53238: PUSH
53239: LD_INT 31
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: LIST
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PPUSH
53255: CALL_OW 69
53259: ST_TO_ADDR
// if not tmp then
53260: LD_VAR 0 6
53264: NOT
53265: IFFALSE 53269
// exit ;
53267: GO 53517
// result := [ ] ;
53269: LD_ADDR_VAR 0 2
53273: PUSH
53274: EMPTY
53275: ST_TO_ADDR
// for i in tmp do
53276: LD_ADDR_VAR 0 3
53280: PUSH
53281: LD_VAR 0 6
53285: PUSH
53286: FOR_IN
53287: IFFALSE 53358
// begin t := UnitsInside ( i ) ;
53289: LD_ADDR_VAR 0 4
53293: PUSH
53294: LD_VAR 0 3
53298: PPUSH
53299: CALL_OW 313
53303: ST_TO_ADDR
// if t then
53304: LD_VAR 0 4
53308: IFFALSE 53356
// for j in t do
53310: LD_ADDR_VAR 0 7
53314: PUSH
53315: LD_VAR 0 4
53319: PUSH
53320: FOR_IN
53321: IFFALSE 53354
// result := Replace ( result , result + 1 , j ) ;
53323: LD_ADDR_VAR 0 2
53327: PUSH
53328: LD_VAR 0 2
53332: PPUSH
53333: LD_VAR 0 2
53337: PUSH
53338: LD_INT 1
53340: PLUS
53341: PPUSH
53342: LD_VAR 0 7
53346: PPUSH
53347: CALL_OW 1
53351: ST_TO_ADDR
53352: GO 53320
53354: POP
53355: POP
// end ;
53356: GO 53286
53358: POP
53359: POP
// if not result then
53360: LD_VAR 0 2
53364: NOT
53365: IFFALSE 53369
// exit ;
53367: GO 53517
// mech := result [ 1 ] ;
53369: LD_ADDR_VAR 0 5
53373: PUSH
53374: LD_VAR 0 2
53378: PUSH
53379: LD_INT 1
53381: ARRAY
53382: ST_TO_ADDR
// if result > 1 then
53383: LD_VAR 0 2
53387: PUSH
53388: LD_INT 1
53390: GREATER
53391: IFFALSE 53503
// begin for i = 2 to result do
53393: LD_ADDR_VAR 0 3
53397: PUSH
53398: DOUBLE
53399: LD_INT 2
53401: DEC
53402: ST_TO_ADDR
53403: LD_VAR 0 2
53407: PUSH
53408: FOR_TO
53409: IFFALSE 53501
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
53411: LD_ADDR_VAR 0 4
53415: PUSH
53416: LD_VAR 0 2
53420: PUSH
53421: LD_VAR 0 3
53425: ARRAY
53426: PPUSH
53427: LD_INT 3
53429: PPUSH
53430: CALL_OW 259
53434: PUSH
53435: LD_VAR 0 2
53439: PUSH
53440: LD_VAR 0 3
53444: ARRAY
53445: PPUSH
53446: CALL_OW 432
53450: MINUS
53451: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
53452: LD_VAR 0 4
53456: PUSH
53457: LD_VAR 0 5
53461: PPUSH
53462: LD_INT 3
53464: PPUSH
53465: CALL_OW 259
53469: PUSH
53470: LD_VAR 0 5
53474: PPUSH
53475: CALL_OW 432
53479: MINUS
53480: GREATEREQUAL
53481: IFFALSE 53499
// mech := result [ i ] ;
53483: LD_ADDR_VAR 0 5
53487: PUSH
53488: LD_VAR 0 2
53492: PUSH
53493: LD_VAR 0 3
53497: ARRAY
53498: ST_TO_ADDR
// end ;
53499: GO 53408
53501: POP
53502: POP
// end ; ComLinkTo ( vehicle , mech ) ;
53503: LD_VAR 0 1
53507: PPUSH
53508: LD_VAR 0 5
53512: PPUSH
53513: CALL_OW 135
// end ;
53517: LD_VAR 0 2
53521: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
53522: LD_INT 0
53524: PPUSH
53525: PPUSH
53526: PPUSH
53527: PPUSH
53528: PPUSH
53529: PPUSH
53530: PPUSH
53531: PPUSH
53532: PPUSH
53533: PPUSH
53534: PPUSH
53535: PPUSH
53536: PPUSH
// result := [ ] ;
53537: LD_ADDR_VAR 0 7
53541: PUSH
53542: EMPTY
53543: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
53544: LD_VAR 0 1
53548: PPUSH
53549: CALL_OW 266
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: IN
53564: NOT
53565: IFFALSE 53569
// exit ;
53567: GO 55209
// if name then
53569: LD_VAR 0 3
53573: IFFALSE 53589
// SetBName ( base_dep , name ) ;
53575: LD_VAR 0 1
53579: PPUSH
53580: LD_VAR 0 3
53584: PPUSH
53585: CALL_OW 500
// base := GetBase ( base_dep ) ;
53589: LD_ADDR_VAR 0 15
53593: PUSH
53594: LD_VAR 0 1
53598: PPUSH
53599: CALL_OW 274
53603: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
53604: LD_ADDR_VAR 0 16
53608: PUSH
53609: LD_VAR 0 1
53613: PPUSH
53614: CALL_OW 255
53618: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
53619: LD_ADDR_VAR 0 17
53623: PUSH
53624: LD_VAR 0 1
53628: PPUSH
53629: CALL_OW 248
53633: ST_TO_ADDR
// if sources then
53634: LD_VAR 0 5
53638: IFFALSE 53685
// for i = 1 to 3 do
53640: LD_ADDR_VAR 0 8
53644: PUSH
53645: DOUBLE
53646: LD_INT 1
53648: DEC
53649: ST_TO_ADDR
53650: LD_INT 3
53652: PUSH
53653: FOR_TO
53654: IFFALSE 53683
// AddResourceType ( base , i , sources [ i ] ) ;
53656: LD_VAR 0 15
53660: PPUSH
53661: LD_VAR 0 8
53665: PPUSH
53666: LD_VAR 0 5
53670: PUSH
53671: LD_VAR 0 8
53675: ARRAY
53676: PPUSH
53677: CALL_OW 276
53681: GO 53653
53683: POP
53684: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
53685: LD_ADDR_VAR 0 18
53689: PUSH
53690: LD_VAR 0 15
53694: PPUSH
53695: LD_VAR 0 2
53699: PPUSH
53700: LD_INT 1
53702: PPUSH
53703: CALL 52944 0 3
53707: ST_TO_ADDR
// InitHc ;
53708: CALL_OW 19
// InitUc ;
53712: CALL_OW 18
// uc_side := side ;
53716: LD_ADDR_OWVAR 20
53720: PUSH
53721: LD_VAR 0 16
53725: ST_TO_ADDR
// uc_nation := nation ;
53726: LD_ADDR_OWVAR 21
53730: PUSH
53731: LD_VAR 0 17
53735: ST_TO_ADDR
// if buildings then
53736: LD_VAR 0 18
53740: IFFALSE 55068
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
53742: LD_ADDR_VAR 0 19
53746: PUSH
53747: LD_VAR 0 18
53751: PPUSH
53752: LD_INT 2
53754: PUSH
53755: LD_INT 30
53757: PUSH
53758: LD_INT 29
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 30
53767: PUSH
53768: LD_INT 30
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: LIST
53779: PPUSH
53780: CALL_OW 72
53784: ST_TO_ADDR
// if tmp then
53785: LD_VAR 0 19
53789: IFFALSE 53837
// for i in tmp do
53791: LD_ADDR_VAR 0 8
53795: PUSH
53796: LD_VAR 0 19
53800: PUSH
53801: FOR_IN
53802: IFFALSE 53835
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
53804: LD_VAR 0 8
53808: PPUSH
53809: CALL_OW 250
53813: PPUSH
53814: LD_VAR 0 8
53818: PPUSH
53819: CALL_OW 251
53823: PPUSH
53824: LD_VAR 0 16
53828: PPUSH
53829: CALL_OW 441
53833: GO 53801
53835: POP
53836: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
53837: LD_VAR 0 18
53841: PPUSH
53842: LD_INT 2
53844: PUSH
53845: LD_INT 30
53847: PUSH
53848: LD_INT 32
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 30
53857: PUSH
53858: LD_INT 33
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: LIST
53869: PPUSH
53870: CALL_OW 72
53874: IFFALSE 53962
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
53876: LD_ADDR_VAR 0 8
53880: PUSH
53881: LD_VAR 0 18
53885: PPUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 30
53891: PUSH
53892: LD_INT 32
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 30
53901: PUSH
53902: LD_INT 33
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: LIST
53913: PPUSH
53914: CALL_OW 72
53918: PUSH
53919: FOR_IN
53920: IFFALSE 53960
// begin if not GetBWeapon ( i ) then
53922: LD_VAR 0 8
53926: PPUSH
53927: CALL_OW 269
53931: NOT
53932: IFFALSE 53958
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
53934: LD_VAR 0 8
53938: PPUSH
53939: LD_VAR 0 8
53943: PPUSH
53944: LD_VAR 0 2
53948: PPUSH
53949: CALL 55214 0 2
53953: PPUSH
53954: CALL_OW 431
// end ;
53958: GO 53919
53960: POP
53961: POP
// end ; for i = 1 to personel do
53962: LD_ADDR_VAR 0 8
53966: PUSH
53967: DOUBLE
53968: LD_INT 1
53970: DEC
53971: ST_TO_ADDR
53972: LD_VAR 0 6
53976: PUSH
53977: FOR_TO
53978: IFFALSE 55048
// begin if i > 4 then
53980: LD_VAR 0 8
53984: PUSH
53985: LD_INT 4
53987: GREATER
53988: IFFALSE 53992
// break ;
53990: GO 55048
// case i of 1 :
53992: LD_VAR 0 8
53996: PUSH
53997: LD_INT 1
53999: DOUBLE
54000: EQUAL
54001: IFTRUE 54005
54003: GO 54085
54005: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
54006: LD_ADDR_VAR 0 12
54010: PUSH
54011: LD_VAR 0 18
54015: PPUSH
54016: LD_INT 22
54018: PUSH
54019: LD_VAR 0 16
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 58
54030: PUSH
54031: EMPTY
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 30
54039: PUSH
54040: LD_INT 32
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 30
54049: PUSH
54050: LD_INT 4
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 30
54059: PUSH
54060: LD_INT 5
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: PPUSH
54078: CALL_OW 72
54082: ST_TO_ADDR
54083: GO 54307
54085: LD_INT 2
54087: DOUBLE
54088: EQUAL
54089: IFTRUE 54093
54091: GO 54155
54093: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
54094: LD_ADDR_VAR 0 12
54098: PUSH
54099: LD_VAR 0 18
54103: PPUSH
54104: LD_INT 22
54106: PUSH
54107: LD_VAR 0 16
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: PUSH
54119: LD_INT 30
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 30
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: LIST
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PPUSH
54148: CALL_OW 72
54152: ST_TO_ADDR
54153: GO 54307
54155: LD_INT 3
54157: DOUBLE
54158: EQUAL
54159: IFTRUE 54163
54161: GO 54225
54163: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
54164: LD_ADDR_VAR 0 12
54168: PUSH
54169: LD_VAR 0 18
54173: PPUSH
54174: LD_INT 22
54176: PUSH
54177: LD_VAR 0 16
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 30
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 30
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: LIST
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PPUSH
54218: CALL_OW 72
54222: ST_TO_ADDR
54223: GO 54307
54225: LD_INT 4
54227: DOUBLE
54228: EQUAL
54229: IFTRUE 54233
54231: GO 54306
54233: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
54234: LD_ADDR_VAR 0 12
54238: PUSH
54239: LD_VAR 0 18
54243: PPUSH
54244: LD_INT 22
54246: PUSH
54247: LD_VAR 0 16
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: LD_INT 30
54261: PUSH
54262: LD_INT 6
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 30
54271: PUSH
54272: LD_INT 7
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 30
54281: PUSH
54282: LD_INT 8
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PPUSH
54299: CALL_OW 72
54303: ST_TO_ADDR
54304: GO 54307
54306: POP
// if i = 1 then
54307: LD_VAR 0 8
54311: PUSH
54312: LD_INT 1
54314: EQUAL
54315: IFFALSE 54426
// begin tmp := [ ] ;
54317: LD_ADDR_VAR 0 19
54321: PUSH
54322: EMPTY
54323: ST_TO_ADDR
// for j in f do
54324: LD_ADDR_VAR 0 9
54328: PUSH
54329: LD_VAR 0 12
54333: PUSH
54334: FOR_IN
54335: IFFALSE 54408
// if GetBType ( j ) = b_bunker then
54337: LD_VAR 0 9
54341: PPUSH
54342: CALL_OW 266
54346: PUSH
54347: LD_INT 32
54349: EQUAL
54350: IFFALSE 54377
// tmp := Insert ( tmp , 1 , j ) else
54352: LD_ADDR_VAR 0 19
54356: PUSH
54357: LD_VAR 0 19
54361: PPUSH
54362: LD_INT 1
54364: PPUSH
54365: LD_VAR 0 9
54369: PPUSH
54370: CALL_OW 2
54374: ST_TO_ADDR
54375: GO 54406
// tmp := Insert ( tmp , tmp + 1 , j ) ;
54377: LD_ADDR_VAR 0 19
54381: PUSH
54382: LD_VAR 0 19
54386: PPUSH
54387: LD_VAR 0 19
54391: PUSH
54392: LD_INT 1
54394: PLUS
54395: PPUSH
54396: LD_VAR 0 9
54400: PPUSH
54401: CALL_OW 2
54405: ST_TO_ADDR
54406: GO 54334
54408: POP
54409: POP
// if tmp then
54410: LD_VAR 0 19
54414: IFFALSE 54426
// f := tmp ;
54416: LD_ADDR_VAR 0 12
54420: PUSH
54421: LD_VAR 0 19
54425: ST_TO_ADDR
// end ; x := personel [ i ] ;
54426: LD_ADDR_VAR 0 13
54430: PUSH
54431: LD_VAR 0 6
54435: PUSH
54436: LD_VAR 0 8
54440: ARRAY
54441: ST_TO_ADDR
// if x = - 1 then
54442: LD_VAR 0 13
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: EQUAL
54451: IFFALSE 54662
// begin for j in f do
54453: LD_ADDR_VAR 0 9
54457: PUSH
54458: LD_VAR 0 12
54462: PUSH
54463: FOR_IN
54464: IFFALSE 54658
// repeat InitHc ;
54466: CALL_OW 19
// if GetBType ( j ) = b_barracks then
54470: LD_VAR 0 9
54474: PPUSH
54475: CALL_OW 266
54479: PUSH
54480: LD_INT 5
54482: EQUAL
54483: IFFALSE 54553
// begin if UnitsInside ( j ) < 3 then
54485: LD_VAR 0 9
54489: PPUSH
54490: CALL_OW 313
54494: PUSH
54495: LD_INT 3
54497: LESS
54498: IFFALSE 54534
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54500: LD_INT 0
54502: PPUSH
54503: LD_INT 5
54505: PUSH
54506: LD_INT 8
54508: PUSH
54509: LD_INT 9
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: PUSH
54517: LD_VAR 0 17
54521: ARRAY
54522: PPUSH
54523: LD_VAR 0 4
54527: PPUSH
54528: CALL_OW 380
54532: GO 54551
// PrepareHuman ( false , i , skill ) ;
54534: LD_INT 0
54536: PPUSH
54537: LD_VAR 0 8
54541: PPUSH
54542: LD_VAR 0 4
54546: PPUSH
54547: CALL_OW 380
// end else
54551: GO 54570
// PrepareHuman ( false , i , skill ) ;
54553: LD_INT 0
54555: PPUSH
54556: LD_VAR 0 8
54560: PPUSH
54561: LD_VAR 0 4
54565: PPUSH
54566: CALL_OW 380
// un := CreateHuman ;
54570: LD_ADDR_VAR 0 14
54574: PUSH
54575: CALL_OW 44
54579: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54580: LD_ADDR_VAR 0 7
54584: PUSH
54585: LD_VAR 0 7
54589: PPUSH
54590: LD_INT 1
54592: PPUSH
54593: LD_VAR 0 14
54597: PPUSH
54598: CALL_OW 2
54602: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
54603: LD_VAR 0 14
54607: PPUSH
54608: LD_VAR 0 9
54612: PPUSH
54613: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
54617: LD_VAR 0 9
54621: PPUSH
54622: CALL_OW 313
54626: PUSH
54627: LD_INT 6
54629: EQUAL
54630: IFTRUE 54654
54632: PUSH
54633: LD_VAR 0 9
54637: PPUSH
54638: CALL_OW 266
54642: PUSH
54643: LD_INT 32
54645: PUSH
54646: LD_INT 31
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: IN
54653: OR
54654: IFFALSE 54466
54656: GO 54463
54658: POP
54659: POP
// end else
54660: GO 55046
// for j = 1 to x do
54662: LD_ADDR_VAR 0 9
54666: PUSH
54667: DOUBLE
54668: LD_INT 1
54670: DEC
54671: ST_TO_ADDR
54672: LD_VAR 0 13
54676: PUSH
54677: FOR_TO
54678: IFFALSE 55044
// begin InitHc ;
54680: CALL_OW 19
// if not f then
54684: LD_VAR 0 12
54688: NOT
54689: IFFALSE 54778
// begin PrepareHuman ( false , i , skill ) ;
54691: LD_INT 0
54693: PPUSH
54694: LD_VAR 0 8
54698: PPUSH
54699: LD_VAR 0 4
54703: PPUSH
54704: CALL_OW 380
// un := CreateHuman ;
54708: LD_ADDR_VAR 0 14
54712: PUSH
54713: CALL_OW 44
54717: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54718: LD_ADDR_VAR 0 7
54722: PUSH
54723: LD_VAR 0 7
54727: PPUSH
54728: LD_INT 1
54730: PPUSH
54731: LD_VAR 0 14
54735: PPUSH
54736: CALL_OW 2
54740: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54741: LD_VAR 0 14
54745: PPUSH
54746: LD_VAR 0 1
54750: PPUSH
54751: CALL_OW 250
54755: PPUSH
54756: LD_VAR 0 1
54760: PPUSH
54761: CALL_OW 251
54765: PPUSH
54766: LD_INT 10
54768: PPUSH
54769: LD_INT 0
54771: PPUSH
54772: CALL_OW 50
// continue ;
54776: GO 54677
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
54778: LD_VAR 0 12
54782: PUSH
54783: LD_INT 1
54785: ARRAY
54786: PPUSH
54787: CALL_OW 313
54791: IFFALSE 54819
54793: PUSH
54794: LD_VAR 0 12
54798: PUSH
54799: LD_INT 1
54801: ARRAY
54802: PPUSH
54803: CALL_OW 266
54807: PUSH
54808: LD_INT 32
54810: PUSH
54811: LD_INT 31
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: IN
54818: AND
54819: IFTRUE 54840
54821: PUSH
54822: LD_VAR 0 12
54826: PUSH
54827: LD_INT 1
54829: ARRAY
54830: PPUSH
54831: CALL_OW 313
54835: PUSH
54836: LD_INT 6
54838: EQUAL
54839: OR
54840: IFFALSE 54860
// f := Delete ( f , 1 ) ;
54842: LD_ADDR_VAR 0 12
54846: PUSH
54847: LD_VAR 0 12
54851: PPUSH
54852: LD_INT 1
54854: PPUSH
54855: CALL_OW 3
54859: ST_TO_ADDR
// if not f then
54860: LD_VAR 0 12
54864: NOT
54865: IFFALSE 54883
// begin x := x + 2 ;
54867: LD_ADDR_VAR 0 13
54871: PUSH
54872: LD_VAR 0 13
54876: PUSH
54877: LD_INT 2
54879: PLUS
54880: ST_TO_ADDR
// continue ;
54881: GO 54677
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
54883: LD_VAR 0 12
54887: PUSH
54888: LD_INT 1
54890: ARRAY
54891: PPUSH
54892: CALL_OW 266
54896: PUSH
54897: LD_INT 5
54899: EQUAL
54900: IFFALSE 54974
// begin if UnitsInside ( f [ 1 ] ) < 3 then
54902: LD_VAR 0 12
54906: PUSH
54907: LD_INT 1
54909: ARRAY
54910: PPUSH
54911: CALL_OW 313
54915: PUSH
54916: LD_INT 3
54918: LESS
54919: IFFALSE 54955
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54921: LD_INT 0
54923: PPUSH
54924: LD_INT 5
54926: PUSH
54927: LD_INT 8
54929: PUSH
54930: LD_INT 9
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: LIST
54937: PUSH
54938: LD_VAR 0 17
54942: ARRAY
54943: PPUSH
54944: LD_VAR 0 4
54948: PPUSH
54949: CALL_OW 380
54953: GO 54972
// PrepareHuman ( false , i , skill ) ;
54955: LD_INT 0
54957: PPUSH
54958: LD_VAR 0 8
54962: PPUSH
54963: LD_VAR 0 4
54967: PPUSH
54968: CALL_OW 380
// end else
54972: GO 54991
// PrepareHuman ( false , i , skill ) ;
54974: LD_INT 0
54976: PPUSH
54977: LD_VAR 0 8
54981: PPUSH
54982: LD_VAR 0 4
54986: PPUSH
54987: CALL_OW 380
// un := CreateHuman ;
54991: LD_ADDR_VAR 0 14
54995: PUSH
54996: CALL_OW 44
55000: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55001: LD_ADDR_VAR 0 7
55005: PUSH
55006: LD_VAR 0 7
55010: PPUSH
55011: LD_INT 1
55013: PPUSH
55014: LD_VAR 0 14
55018: PPUSH
55019: CALL_OW 2
55023: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
55024: LD_VAR 0 14
55028: PPUSH
55029: LD_VAR 0 12
55033: PUSH
55034: LD_INT 1
55036: ARRAY
55037: PPUSH
55038: CALL_OW 52
// end ;
55042: GO 54677
55044: POP
55045: POP
// end ;
55046: GO 53977
55048: POP
55049: POP
// result := result ^ buildings ;
55050: LD_ADDR_VAR 0 7
55054: PUSH
55055: LD_VAR 0 7
55059: PUSH
55060: LD_VAR 0 18
55064: ADD
55065: ST_TO_ADDR
// end else
55066: GO 55209
// begin for i = 1 to personel do
55068: LD_ADDR_VAR 0 8
55072: PUSH
55073: DOUBLE
55074: LD_INT 1
55076: DEC
55077: ST_TO_ADDR
55078: LD_VAR 0 6
55082: PUSH
55083: FOR_TO
55084: IFFALSE 55207
// begin if i > 4 then
55086: LD_VAR 0 8
55090: PUSH
55091: LD_INT 4
55093: GREATER
55094: IFFALSE 55098
// break ;
55096: GO 55207
// x := personel [ i ] ;
55098: LD_ADDR_VAR 0 13
55102: PUSH
55103: LD_VAR 0 6
55107: PUSH
55108: LD_VAR 0 8
55112: ARRAY
55113: ST_TO_ADDR
// if x = - 1 then
55114: LD_VAR 0 13
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: EQUAL
55123: IFFALSE 55127
// continue ;
55125: GO 55083
// PrepareHuman ( false , i , skill ) ;
55127: LD_INT 0
55129: PPUSH
55130: LD_VAR 0 8
55134: PPUSH
55135: LD_VAR 0 4
55139: PPUSH
55140: CALL_OW 380
// un := CreateHuman ;
55144: LD_ADDR_VAR 0 14
55148: PUSH
55149: CALL_OW 44
55153: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55154: LD_VAR 0 14
55158: PPUSH
55159: LD_VAR 0 1
55163: PPUSH
55164: CALL_OW 250
55168: PPUSH
55169: LD_VAR 0 1
55173: PPUSH
55174: CALL_OW 251
55178: PPUSH
55179: LD_INT 10
55181: PPUSH
55182: LD_INT 0
55184: PPUSH
55185: CALL_OW 50
// result := result ^ un ;
55189: LD_ADDR_VAR 0 7
55193: PUSH
55194: LD_VAR 0 7
55198: PUSH
55199: LD_VAR 0 14
55203: ADD
55204: ST_TO_ADDR
// end ;
55205: GO 55083
55207: POP
55208: POP
// end ; end ;
55209: LD_VAR 0 7
55213: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
55214: LD_INT 0
55216: PPUSH
55217: PPUSH
55218: PPUSH
55219: PPUSH
55220: PPUSH
55221: PPUSH
55222: PPUSH
55223: PPUSH
55224: PPUSH
55225: PPUSH
55226: PPUSH
55227: PPUSH
55228: PPUSH
55229: PPUSH
55230: PPUSH
55231: PPUSH
// result := false ;
55232: LD_ADDR_VAR 0 3
55236: PUSH
55237: LD_INT 0
55239: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
55240: LD_VAR 0 1
55244: NOT
55245: IFTRUE 55270
55247: PUSH
55248: LD_VAR 0 1
55252: PPUSH
55253: CALL_OW 266
55257: PUSH
55258: LD_INT 32
55260: PUSH
55261: LD_INT 33
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: IN
55268: NOT
55269: OR
55270: IFFALSE 55274
// exit ;
55272: GO 56409
// nat := GetNation ( tower ) ;
55274: LD_ADDR_VAR 0 12
55278: PUSH
55279: LD_VAR 0 1
55283: PPUSH
55284: CALL_OW 248
55288: ST_TO_ADDR
// side := GetSide ( tower ) ;
55289: LD_ADDR_VAR 0 16
55293: PUSH
55294: LD_VAR 0 1
55298: PPUSH
55299: CALL_OW 255
55303: ST_TO_ADDR
// x := GetX ( tower ) ;
55304: LD_ADDR_VAR 0 10
55308: PUSH
55309: LD_VAR 0 1
55313: PPUSH
55314: CALL_OW 250
55318: ST_TO_ADDR
// y := GetY ( tower ) ;
55319: LD_ADDR_VAR 0 11
55323: PUSH
55324: LD_VAR 0 1
55328: PPUSH
55329: CALL_OW 251
55333: ST_TO_ADDR
// if not x or not y then
55334: LD_VAR 0 10
55338: NOT
55339: IFTRUE 55348
55341: PUSH
55342: LD_VAR 0 11
55346: NOT
55347: OR
55348: IFFALSE 55352
// exit ;
55350: GO 56409
// weapon := 0 ;
55352: LD_ADDR_VAR 0 18
55356: PUSH
55357: LD_INT 0
55359: ST_TO_ADDR
// fac_list := [ ] ;
55360: LD_ADDR_VAR 0 17
55364: PUSH
55365: EMPTY
55366: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
55367: LD_ADDR_VAR 0 6
55371: PUSH
55372: LD_VAR 0 1
55376: PPUSH
55377: CALL_OW 274
55381: PPUSH
55382: LD_VAR 0 2
55386: PPUSH
55387: LD_INT 0
55389: PPUSH
55390: CALL 52944 0 3
55394: PPUSH
55395: LD_INT 30
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PPUSH
55405: CALL_OW 72
55409: ST_TO_ADDR
// if not factories then
55410: LD_VAR 0 6
55414: NOT
55415: IFFALSE 55419
// exit ;
55417: GO 56409
// for i in factories do
55419: LD_ADDR_VAR 0 8
55423: PUSH
55424: LD_VAR 0 6
55428: PUSH
55429: FOR_IN
55430: IFFALSE 55455
// fac_list := fac_list union AvailableWeaponList ( i ) ;
55432: LD_ADDR_VAR 0 17
55436: PUSH
55437: LD_VAR 0 17
55441: PUSH
55442: LD_VAR 0 8
55446: PPUSH
55447: CALL_OW 478
55451: UNION
55452: ST_TO_ADDR
55453: GO 55429
55455: POP
55456: POP
// if not fac_list then
55457: LD_VAR 0 17
55461: NOT
55462: IFFALSE 55466
// exit ;
55464: GO 56409
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
55466: LD_ADDR_VAR 0 5
55470: PUSH
55471: LD_INT 4
55473: PUSH
55474: LD_INT 5
55476: PUSH
55477: LD_INT 9
55479: PUSH
55480: LD_INT 10
55482: PUSH
55483: LD_INT 6
55485: PUSH
55486: LD_INT 7
55488: PUSH
55489: LD_INT 11
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 27
55503: PUSH
55504: LD_INT 28
55506: PUSH
55507: LD_INT 26
55509: PUSH
55510: LD_INT 30
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 43
55521: PUSH
55522: LD_INT 44
55524: PUSH
55525: LD_INT 46
55527: PUSH
55528: LD_INT 45
55530: PUSH
55531: LD_INT 47
55533: PUSH
55534: LD_INT 49
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: LIST
55549: PUSH
55550: LD_VAR 0 12
55554: ARRAY
55555: ST_TO_ADDR
// list := list isect fac_list ;
55556: LD_ADDR_VAR 0 5
55560: PUSH
55561: LD_VAR 0 5
55565: PUSH
55566: LD_VAR 0 17
55570: ISECT
55571: ST_TO_ADDR
// if not list then
55572: LD_VAR 0 5
55576: NOT
55577: IFFALSE 55581
// exit ;
55579: GO 56409
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
55581: LD_VAR 0 12
55585: PUSH
55586: LD_INT 3
55588: EQUAL
55589: IFFALSE 55601
55591: PUSH
55592: LD_INT 49
55594: PUSH
55595: LD_VAR 0 5
55599: IN
55600: AND
55601: IFFALSE 55621
55603: PUSH
55604: LD_INT 31
55606: PPUSH
55607: LD_VAR 0 16
55611: PPUSH
55612: CALL_OW 321
55616: PUSH
55617: LD_INT 2
55619: EQUAL
55620: AND
55621: IFFALSE 55681
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
55623: LD_INT 22
55625: PUSH
55626: LD_VAR 0 16
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 35
55637: PUSH
55638: LD_INT 49
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 91
55647: PUSH
55648: LD_VAR 0 1
55652: PUSH
55653: LD_INT 10
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: LIST
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: LIST
55665: PPUSH
55666: CALL_OW 69
55670: NOT
55671: IFFALSE 55681
// weapon := ru_time_lapser ;
55673: LD_ADDR_VAR 0 18
55677: PUSH
55678: LD_INT 49
55680: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
55681: LD_VAR 0 12
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: IN
55696: IFFALSE 55720
55698: PUSH
55699: LD_INT 11
55701: PUSH
55702: LD_VAR 0 5
55706: IN
55707: IFTRUE 55719
55709: PUSH
55710: LD_INT 30
55712: PUSH
55713: LD_VAR 0 5
55717: IN
55718: OR
55719: AND
55720: IFFALSE 55740
55722: PUSH
55723: LD_INT 6
55725: PPUSH
55726: LD_VAR 0 16
55730: PPUSH
55731: CALL_OW 321
55735: PUSH
55736: LD_INT 2
55738: EQUAL
55739: AND
55740: IFFALSE 55907
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
55742: LD_INT 22
55744: PUSH
55745: LD_VAR 0 16
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: PUSH
55757: LD_INT 35
55759: PUSH
55760: LD_INT 11
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 35
55769: PUSH
55770: LD_INT 30
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 91
55784: PUSH
55785: LD_VAR 0 1
55789: PUSH
55790: LD_INT 18
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: LIST
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: LIST
55802: PPUSH
55803: CALL_OW 69
55807: NOT
55808: IFFALSE 55884
55810: PUSH
55811: LD_INT 22
55813: PUSH
55814: LD_VAR 0 16
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: LD_INT 30
55828: PUSH
55829: LD_INT 32
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 30
55838: PUSH
55839: LD_INT 33
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 91
55853: PUSH
55854: LD_VAR 0 1
55858: PUSH
55859: LD_INT 12
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: LIST
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: PUSH
55872: EMPTY
55873: LIST
55874: PPUSH
55875: CALL_OW 69
55879: PUSH
55880: LD_INT 2
55882: GREATER
55883: AND
55884: IFFALSE 55907
// weapon := [ us_radar , ar_radar ] [ nat ] ;
55886: LD_ADDR_VAR 0 18
55890: PUSH
55891: LD_INT 11
55893: PUSH
55894: LD_INT 30
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_VAR 0 12
55905: ARRAY
55906: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
55907: LD_VAR 0 18
55911: NOT
55912: IFFALSE 55932
55914: PUSH
55915: LD_INT 40
55917: PPUSH
55918: LD_VAR 0 16
55922: PPUSH
55923: CALL_OW 321
55927: PUSH
55928: LD_INT 2
55930: EQUAL
55931: AND
55932: IFFALSE 55968
55934: PUSH
55935: LD_INT 7
55937: PUSH
55938: LD_VAR 0 5
55942: IN
55943: IFTRUE 55955
55945: PUSH
55946: LD_INT 28
55948: PUSH
55949: LD_VAR 0 5
55953: IN
55954: OR
55955: IFTRUE 55967
55957: PUSH
55958: LD_INT 45
55960: PUSH
55961: LD_VAR 0 5
55965: IN
55966: OR
55967: AND
55968: IFFALSE 56222
// begin hex := GetHexInfo ( x , y ) ;
55970: LD_ADDR_VAR 0 4
55974: PUSH
55975: LD_VAR 0 10
55979: PPUSH
55980: LD_VAR 0 11
55984: PPUSH
55985: CALL_OW 546
55989: ST_TO_ADDR
// if hex [ 1 ] then
55990: LD_VAR 0 4
55994: PUSH
55995: LD_INT 1
55997: ARRAY
55998: IFFALSE 56002
// exit ;
56000: GO 56409
// height := hex [ 2 ] ;
56002: LD_ADDR_VAR 0 15
56006: PUSH
56007: LD_VAR 0 4
56011: PUSH
56012: LD_INT 2
56014: ARRAY
56015: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
56016: LD_ADDR_VAR 0 14
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: LD_INT 3
56029: PUSH
56030: LD_INT 5
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: ST_TO_ADDR
// for i in tmp do
56039: LD_ADDR_VAR 0 8
56043: PUSH
56044: LD_VAR 0 14
56048: PUSH
56049: FOR_IN
56050: IFFALSE 56220
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
56052: LD_ADDR_VAR 0 9
56056: PUSH
56057: LD_VAR 0 10
56061: PPUSH
56062: LD_VAR 0 8
56066: PPUSH
56067: LD_INT 5
56069: PPUSH
56070: CALL_OW 272
56074: PUSH
56075: LD_VAR 0 11
56079: PPUSH
56080: LD_VAR 0 8
56084: PPUSH
56085: LD_INT 5
56087: PPUSH
56088: CALL_OW 273
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
56097: LD_VAR 0 9
56101: PUSH
56102: LD_INT 1
56104: ARRAY
56105: PPUSH
56106: LD_VAR 0 9
56110: PUSH
56111: LD_INT 2
56113: ARRAY
56114: PPUSH
56115: CALL_OW 488
56119: IFFALSE 56218
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
56121: LD_ADDR_VAR 0 4
56125: PUSH
56126: LD_VAR 0 9
56130: PUSH
56131: LD_INT 1
56133: ARRAY
56134: PPUSH
56135: LD_VAR 0 9
56139: PUSH
56140: LD_INT 2
56142: ARRAY
56143: PPUSH
56144: CALL_OW 546
56148: ST_TO_ADDR
// if hex [ 1 ] then
56149: LD_VAR 0 4
56153: PUSH
56154: LD_INT 1
56156: ARRAY
56157: IFFALSE 56161
// continue ;
56159: GO 56049
// h := hex [ 2 ] ;
56161: LD_ADDR_VAR 0 13
56165: PUSH
56166: LD_VAR 0 4
56170: PUSH
56171: LD_INT 2
56173: ARRAY
56174: ST_TO_ADDR
// if h + 7 < height then
56175: LD_VAR 0 13
56179: PUSH
56180: LD_INT 7
56182: PLUS
56183: PUSH
56184: LD_VAR 0 15
56188: LESS
56189: IFFALSE 56218
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
56191: LD_ADDR_VAR 0 18
56195: PUSH
56196: LD_INT 7
56198: PUSH
56199: LD_INT 28
56201: PUSH
56202: LD_INT 45
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: LIST
56209: PUSH
56210: LD_VAR 0 12
56214: ARRAY
56215: ST_TO_ADDR
// break ;
56216: GO 56220
// end ; end ; end ;
56218: GO 56049
56220: POP
56221: POP
// end ; if not weapon then
56222: LD_VAR 0 18
56226: NOT
56227: IFFALSE 56287
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
56229: LD_ADDR_VAR 0 5
56233: PUSH
56234: LD_VAR 0 5
56238: PUSH
56239: LD_INT 11
56241: PUSH
56242: LD_INT 30
56244: PUSH
56245: LD_INT 49
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: LIST
56252: DIFF
56253: ST_TO_ADDR
// if not list then
56254: LD_VAR 0 5
56258: NOT
56259: IFFALSE 56263
// exit ;
56261: GO 56409
// weapon := list [ rand ( 1 , list ) ] ;
56263: LD_ADDR_VAR 0 18
56267: PUSH
56268: LD_VAR 0 5
56272: PUSH
56273: LD_INT 1
56275: PPUSH
56276: LD_VAR 0 5
56280: PPUSH
56281: CALL_OW 12
56285: ARRAY
56286: ST_TO_ADDR
// end ; if weapon then
56287: LD_VAR 0 18
56291: IFFALSE 56409
// begin tmp := CostOfWeapon ( weapon ) ;
56293: LD_ADDR_VAR 0 14
56297: PUSH
56298: LD_VAR 0 18
56302: PPUSH
56303: CALL_OW 451
56307: ST_TO_ADDR
// j := GetBase ( tower ) ;
56308: LD_ADDR_VAR 0 9
56312: PUSH
56313: LD_VAR 0 1
56317: PPUSH
56318: CALL_OW 274
56322: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
56323: LD_VAR 0 9
56327: PPUSH
56328: LD_INT 1
56330: PPUSH
56331: CALL_OW 275
56335: PUSH
56336: LD_VAR 0 14
56340: PUSH
56341: LD_INT 1
56343: ARRAY
56344: GREATEREQUAL
56345: IFFALSE 56371
56347: PUSH
56348: LD_VAR 0 9
56352: PPUSH
56353: LD_INT 2
56355: PPUSH
56356: CALL_OW 275
56360: PUSH
56361: LD_VAR 0 14
56365: PUSH
56366: LD_INT 2
56368: ARRAY
56369: GREATEREQUAL
56370: AND
56371: IFFALSE 56397
56373: PUSH
56374: LD_VAR 0 9
56378: PPUSH
56379: LD_INT 3
56381: PPUSH
56382: CALL_OW 275
56386: PUSH
56387: LD_VAR 0 14
56391: PUSH
56392: LD_INT 3
56394: ARRAY
56395: GREATEREQUAL
56396: AND
56397: IFFALSE 56409
// result := weapon ;
56399: LD_ADDR_VAR 0 3
56403: PUSH
56404: LD_VAR 0 18
56408: ST_TO_ADDR
// end ; end ;
56409: LD_VAR 0 3
56413: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
56414: LD_INT 0
56416: PPUSH
56417: PPUSH
// result := true ;
56418: LD_ADDR_VAR 0 3
56422: PUSH
56423: LD_INT 1
56425: ST_TO_ADDR
// if array1 = array2 then
56426: LD_VAR 0 1
56430: PUSH
56431: LD_VAR 0 2
56435: EQUAL
56436: IFFALSE 56496
// begin for i = 1 to array1 do
56438: LD_ADDR_VAR 0 4
56442: PUSH
56443: DOUBLE
56444: LD_INT 1
56446: DEC
56447: ST_TO_ADDR
56448: LD_VAR 0 1
56452: PUSH
56453: FOR_TO
56454: IFFALSE 56492
// if array1 [ i ] <> array2 [ i ] then
56456: LD_VAR 0 1
56460: PUSH
56461: LD_VAR 0 4
56465: ARRAY
56466: PUSH
56467: LD_VAR 0 2
56471: PUSH
56472: LD_VAR 0 4
56476: ARRAY
56477: NONEQUAL
56478: IFFALSE 56490
// begin result := false ;
56480: LD_ADDR_VAR 0 3
56484: PUSH
56485: LD_INT 0
56487: ST_TO_ADDR
// break ;
56488: GO 56492
// end ;
56490: GO 56453
56492: POP
56493: POP
// end else
56494: GO 56504
// result := false ;
56496: LD_ADDR_VAR 0 3
56500: PUSH
56501: LD_INT 0
56503: ST_TO_ADDR
// end ;
56504: LD_VAR 0 3
56508: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
56509: LD_INT 0
56511: PPUSH
56512: PPUSH
// if not array1 or not array2 then
56513: LD_VAR 0 1
56517: NOT
56518: IFTRUE 56527
56520: PUSH
56521: LD_VAR 0 2
56525: NOT
56526: OR
56527: IFFALSE 56531
// exit ;
56529: GO 56595
// result := true ;
56531: LD_ADDR_VAR 0 3
56535: PUSH
56536: LD_INT 1
56538: ST_TO_ADDR
// for i = 1 to array1 do
56539: LD_ADDR_VAR 0 4
56543: PUSH
56544: DOUBLE
56545: LD_INT 1
56547: DEC
56548: ST_TO_ADDR
56549: LD_VAR 0 1
56553: PUSH
56554: FOR_TO
56555: IFFALSE 56593
// if array1 [ i ] <> array2 [ i ] then
56557: LD_VAR 0 1
56561: PUSH
56562: LD_VAR 0 4
56566: ARRAY
56567: PUSH
56568: LD_VAR 0 2
56572: PUSH
56573: LD_VAR 0 4
56577: ARRAY
56578: NONEQUAL
56579: IFFALSE 56591
// begin result := false ;
56581: LD_ADDR_VAR 0 3
56585: PUSH
56586: LD_INT 0
56588: ST_TO_ADDR
// break ;
56589: GO 56593
// end ;
56591: GO 56554
56593: POP
56594: POP
// end ;
56595: LD_VAR 0 3
56599: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
56600: LD_INT 0
56602: PPUSH
56603: PPUSH
56604: PPUSH
// pom := GetBase ( fac ) ;
56605: LD_ADDR_VAR 0 5
56609: PUSH
56610: LD_VAR 0 1
56614: PPUSH
56615: CALL_OW 274
56619: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
56620: LD_ADDR_VAR 0 4
56624: PUSH
56625: LD_VAR 0 2
56629: PUSH
56630: LD_INT 1
56632: ARRAY
56633: PPUSH
56634: LD_VAR 0 2
56638: PUSH
56639: LD_INT 2
56641: ARRAY
56642: PPUSH
56643: LD_VAR 0 2
56647: PUSH
56648: LD_INT 3
56650: ARRAY
56651: PPUSH
56652: LD_VAR 0 2
56656: PUSH
56657: LD_INT 4
56659: ARRAY
56660: PPUSH
56661: CALL_OW 449
56665: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56666: LD_ADDR_VAR 0 3
56670: PUSH
56671: LD_VAR 0 5
56675: PPUSH
56676: LD_INT 1
56678: PPUSH
56679: CALL_OW 275
56683: PUSH
56684: LD_VAR 0 4
56688: PUSH
56689: LD_INT 1
56691: ARRAY
56692: GREATEREQUAL
56693: IFFALSE 56719
56695: PUSH
56696: LD_VAR 0 5
56700: PPUSH
56701: LD_INT 2
56703: PPUSH
56704: CALL_OW 275
56708: PUSH
56709: LD_VAR 0 4
56713: PUSH
56714: LD_INT 2
56716: ARRAY
56717: GREATEREQUAL
56718: AND
56719: IFFALSE 56745
56721: PUSH
56722: LD_VAR 0 5
56726: PPUSH
56727: LD_INT 3
56729: PPUSH
56730: CALL_OW 275
56734: PUSH
56735: LD_VAR 0 4
56739: PUSH
56740: LD_INT 3
56742: ARRAY
56743: GREATEREQUAL
56744: AND
56745: ST_TO_ADDR
// end ;
56746: LD_VAR 0 3
56750: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
56751: LD_INT 0
56753: PPUSH
56754: PPUSH
56755: PPUSH
56756: PPUSH
// pom := GetBase ( building ) ;
56757: LD_ADDR_VAR 0 3
56761: PUSH
56762: LD_VAR 0 1
56766: PPUSH
56767: CALL_OW 274
56771: ST_TO_ADDR
// if not pom then
56772: LD_VAR 0 3
56776: NOT
56777: IFFALSE 56781
// exit ;
56779: GO 56955
// btype := GetBType ( building ) ;
56781: LD_ADDR_VAR 0 5
56785: PUSH
56786: LD_VAR 0 1
56790: PPUSH
56791: CALL_OW 266
56795: ST_TO_ADDR
// if btype = b_armoury then
56796: LD_VAR 0 5
56800: PUSH
56801: LD_INT 4
56803: EQUAL
56804: IFFALSE 56814
// btype := b_barracks ;
56806: LD_ADDR_VAR 0 5
56810: PUSH
56811: LD_INT 5
56813: ST_TO_ADDR
// if btype = b_depot then
56814: LD_VAR 0 5
56818: PUSH
56819: LD_INT 0
56821: EQUAL
56822: IFFALSE 56832
// btype := b_warehouse ;
56824: LD_ADDR_VAR 0 5
56828: PUSH
56829: LD_INT 1
56831: ST_TO_ADDR
// if btype = b_workshop then
56832: LD_VAR 0 5
56836: PUSH
56837: LD_INT 2
56839: EQUAL
56840: IFFALSE 56850
// btype := b_factory ;
56842: LD_ADDR_VAR 0 5
56846: PUSH
56847: LD_INT 3
56849: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56850: LD_ADDR_VAR 0 4
56854: PUSH
56855: LD_VAR 0 5
56859: PPUSH
56860: LD_VAR 0 1
56864: PPUSH
56865: CALL_OW 248
56869: PPUSH
56870: CALL_OW 450
56874: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56875: LD_ADDR_VAR 0 2
56879: PUSH
56880: LD_VAR 0 3
56884: PPUSH
56885: LD_INT 1
56887: PPUSH
56888: CALL_OW 275
56892: PUSH
56893: LD_VAR 0 4
56897: PUSH
56898: LD_INT 1
56900: ARRAY
56901: GREATEREQUAL
56902: IFFALSE 56928
56904: PUSH
56905: LD_VAR 0 3
56909: PPUSH
56910: LD_INT 2
56912: PPUSH
56913: CALL_OW 275
56917: PUSH
56918: LD_VAR 0 4
56922: PUSH
56923: LD_INT 2
56925: ARRAY
56926: GREATEREQUAL
56927: AND
56928: IFFALSE 56954
56930: PUSH
56931: LD_VAR 0 3
56935: PPUSH
56936: LD_INT 3
56938: PPUSH
56939: CALL_OW 275
56943: PUSH
56944: LD_VAR 0 4
56948: PUSH
56949: LD_INT 3
56951: ARRAY
56952: GREATEREQUAL
56953: AND
56954: ST_TO_ADDR
// end ;
56955: LD_VAR 0 2
56959: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
56960: LD_INT 0
56962: PPUSH
56963: PPUSH
56964: PPUSH
// pom := GetBase ( building ) ;
56965: LD_ADDR_VAR 0 4
56969: PUSH
56970: LD_VAR 0 1
56974: PPUSH
56975: CALL_OW 274
56979: ST_TO_ADDR
// if not pom then
56980: LD_VAR 0 4
56984: NOT
56985: IFFALSE 56989
// exit ;
56987: GO 57094
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56989: LD_ADDR_VAR 0 5
56993: PUSH
56994: LD_VAR 0 2
56998: PPUSH
56999: LD_VAR 0 1
57003: PPUSH
57004: CALL_OW 248
57008: PPUSH
57009: CALL_OW 450
57013: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57014: LD_ADDR_VAR 0 3
57018: PUSH
57019: LD_VAR 0 4
57023: PPUSH
57024: LD_INT 1
57026: PPUSH
57027: CALL_OW 275
57031: PUSH
57032: LD_VAR 0 5
57036: PUSH
57037: LD_INT 1
57039: ARRAY
57040: GREATEREQUAL
57041: IFFALSE 57067
57043: PUSH
57044: LD_VAR 0 4
57048: PPUSH
57049: LD_INT 2
57051: PPUSH
57052: CALL_OW 275
57056: PUSH
57057: LD_VAR 0 5
57061: PUSH
57062: LD_INT 2
57064: ARRAY
57065: GREATEREQUAL
57066: AND
57067: IFFALSE 57093
57069: PUSH
57070: LD_VAR 0 4
57074: PPUSH
57075: LD_INT 3
57077: PPUSH
57078: CALL_OW 275
57082: PUSH
57083: LD_VAR 0 5
57087: PUSH
57088: LD_INT 3
57090: ARRAY
57091: GREATEREQUAL
57092: AND
57093: ST_TO_ADDR
// end ;
57094: LD_VAR 0 3
57098: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
57099: LD_INT 0
57101: PPUSH
57102: PPUSH
57103: PPUSH
57104: PPUSH
57105: PPUSH
57106: PPUSH
57107: PPUSH
57108: PPUSH
57109: PPUSH
57110: PPUSH
57111: PPUSH
// result := false ;
57112: LD_ADDR_VAR 0 8
57116: PUSH
57117: LD_INT 0
57119: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
57120: LD_VAR 0 5
57124: NOT
57125: IFTRUE 57134
57127: PUSH
57128: LD_VAR 0 1
57132: NOT
57133: OR
57134: IFTRUE 57143
57136: PUSH
57137: LD_VAR 0 2
57141: NOT
57142: OR
57143: IFTRUE 57152
57145: PUSH
57146: LD_VAR 0 3
57150: NOT
57151: OR
57152: IFFALSE 57156
// exit ;
57154: GO 57982
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
57156: LD_ADDR_VAR 0 14
57160: PUSH
57161: LD_VAR 0 1
57165: PPUSH
57166: LD_VAR 0 2
57170: PPUSH
57171: LD_VAR 0 3
57175: PPUSH
57176: LD_VAR 0 4
57180: PPUSH
57181: LD_VAR 0 5
57185: PUSH
57186: LD_INT 1
57188: ARRAY
57189: PPUSH
57190: CALL_OW 248
57194: PPUSH
57195: LD_INT 0
57197: PPUSH
57198: CALL 59263 0 6
57202: ST_TO_ADDR
// if not hexes then
57203: LD_VAR 0 14
57207: NOT
57208: IFFALSE 57212
// exit ;
57210: GO 57982
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57212: LD_ADDR_VAR 0 17
57216: PUSH
57217: LD_VAR 0 5
57221: PPUSH
57222: LD_INT 22
57224: PUSH
57225: LD_VAR 0 13
57229: PPUSH
57230: CALL_OW 255
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: LD_INT 30
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 30
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PPUSH
57271: CALL_OW 72
57275: ST_TO_ADDR
// for i = 1 to hexes do
57276: LD_ADDR_VAR 0 9
57280: PUSH
57281: DOUBLE
57282: LD_INT 1
57284: DEC
57285: ST_TO_ADDR
57286: LD_VAR 0 14
57290: PUSH
57291: FOR_TO
57292: IFFALSE 57980
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57294: LD_ADDR_VAR 0 13
57298: PUSH
57299: LD_VAR 0 14
57303: PUSH
57304: LD_VAR 0 9
57308: ARRAY
57309: PUSH
57310: LD_INT 1
57312: ARRAY
57313: PPUSH
57314: LD_VAR 0 14
57318: PUSH
57319: LD_VAR 0 9
57323: ARRAY
57324: PUSH
57325: LD_INT 2
57327: ARRAY
57328: PPUSH
57329: CALL_OW 428
57333: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
57334: LD_VAR 0 14
57338: PUSH
57339: LD_VAR 0 9
57343: ARRAY
57344: PUSH
57345: LD_INT 1
57347: ARRAY
57348: PPUSH
57349: LD_VAR 0 14
57353: PUSH
57354: LD_VAR 0 9
57358: ARRAY
57359: PUSH
57360: LD_INT 2
57362: ARRAY
57363: PPUSH
57364: CALL_OW 351
57368: IFTRUE 57407
57370: PUSH
57371: LD_VAR 0 14
57375: PUSH
57376: LD_VAR 0 9
57380: ARRAY
57381: PUSH
57382: LD_INT 1
57384: ARRAY
57385: PPUSH
57386: LD_VAR 0 14
57390: PUSH
57391: LD_VAR 0 9
57395: ARRAY
57396: PUSH
57397: LD_INT 2
57399: ARRAY
57400: PPUSH
57401: CALL_OW 488
57405: NOT
57406: OR
57407: IFTRUE 57424
57409: PUSH
57410: LD_VAR 0 13
57414: PPUSH
57415: CALL_OW 247
57419: PUSH
57420: LD_INT 3
57422: EQUAL
57423: OR
57424: IFFALSE 57430
// exit ;
57426: POP
57427: POP
57428: GO 57982
// if not tmp then
57430: LD_VAR 0 13
57434: NOT
57435: IFFALSE 57439
// continue ;
57437: GO 57291
// result := true ;
57439: LD_ADDR_VAR 0 8
57443: PUSH
57444: LD_INT 1
57446: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
57447: LD_VAR 0 6
57451: IFFALSE 57468
57453: PUSH
57454: LD_VAR 0 13
57458: PPUSH
57459: CALL_OW 247
57463: PUSH
57464: LD_INT 2
57466: EQUAL
57467: AND
57468: IFFALSE 57485
57470: PUSH
57471: LD_VAR 0 13
57475: PPUSH
57476: CALL_OW 263
57480: PUSH
57481: LD_INT 1
57483: EQUAL
57484: AND
57485: IFFALSE 57649
// begin if IsDrivenBy ( tmp ) then
57487: LD_VAR 0 13
57491: PPUSH
57492: CALL_OW 311
57496: IFFALSE 57500
// continue ;
57498: GO 57291
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
57500: LD_VAR 0 6
57504: PPUSH
57505: LD_INT 3
57507: PUSH
57508: LD_INT 60
57510: PUSH
57511: EMPTY
57512: LIST
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 3
57520: PUSH
57521: LD_INT 55
57523: PUSH
57524: EMPTY
57525: LIST
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PPUSH
57535: CALL_OW 72
57539: IFFALSE 57647
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
57541: LD_ADDR_VAR 0 18
57545: PUSH
57546: LD_VAR 0 6
57550: PPUSH
57551: LD_INT 3
57553: PUSH
57554: LD_INT 60
57556: PUSH
57557: EMPTY
57558: LIST
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: PUSH
57567: LD_INT 55
57569: PUSH
57570: EMPTY
57571: LIST
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PPUSH
57581: CALL_OW 72
57585: PUSH
57586: LD_INT 1
57588: ARRAY
57589: ST_TO_ADDR
// if IsInUnit ( driver ) then
57590: LD_VAR 0 18
57594: PPUSH
57595: CALL_OW 310
57599: IFFALSE 57610
// ComExit ( driver ) ;
57601: LD_VAR 0 18
57605: PPUSH
57606: CALL 83253 0 1
// AddComEnterUnit ( driver , tmp ) ;
57610: LD_VAR 0 18
57614: PPUSH
57615: LD_VAR 0 13
57619: PPUSH
57620: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
57624: LD_VAR 0 18
57628: PPUSH
57629: LD_VAR 0 7
57633: PPUSH
57634: CALL_OW 173
// AddComExitVehicle ( driver ) ;
57638: LD_VAR 0 18
57642: PPUSH
57643: CALL_OW 181
// end ; continue ;
57647: GO 57291
// end ; if not cleaners or not tmp in cleaners then
57649: LD_VAR 0 6
57653: NOT
57654: IFTRUE 57669
57656: PUSH
57657: LD_VAR 0 13
57661: PUSH
57662: LD_VAR 0 6
57666: IN
57667: NOT
57668: OR
57669: IFFALSE 57978
// begin if dep then
57671: LD_VAR 0 17
57675: IFFALSE 57811
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
57677: LD_ADDR_VAR 0 16
57681: PUSH
57682: LD_VAR 0 17
57686: PUSH
57687: LD_INT 1
57689: ARRAY
57690: PPUSH
57691: CALL_OW 250
57695: PPUSH
57696: LD_VAR 0 17
57700: PUSH
57701: LD_INT 1
57703: ARRAY
57704: PPUSH
57705: CALL_OW 254
57709: PPUSH
57710: LD_INT 5
57712: PPUSH
57713: CALL_OW 272
57717: PUSH
57718: LD_VAR 0 17
57722: PUSH
57723: LD_INT 1
57725: ARRAY
57726: PPUSH
57727: CALL_OW 251
57731: PPUSH
57732: LD_VAR 0 17
57736: PUSH
57737: LD_INT 1
57739: ARRAY
57740: PPUSH
57741: CALL_OW 254
57745: PPUSH
57746: LD_INT 5
57748: PPUSH
57749: CALL_OW 273
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
57758: LD_VAR 0 16
57762: PUSH
57763: LD_INT 1
57765: ARRAY
57766: PPUSH
57767: LD_VAR 0 16
57771: PUSH
57772: LD_INT 2
57774: ARRAY
57775: PPUSH
57776: CALL_OW 488
57780: IFFALSE 57811
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
57782: LD_VAR 0 13
57786: PPUSH
57787: LD_VAR 0 16
57791: PUSH
57792: LD_INT 1
57794: ARRAY
57795: PPUSH
57796: LD_VAR 0 16
57800: PUSH
57801: LD_INT 2
57803: ARRAY
57804: PPUSH
57805: CALL_OW 111
// continue ;
57809: GO 57291
// end ; end ; r := GetDir ( tmp ) ;
57811: LD_ADDR_VAR 0 15
57815: PUSH
57816: LD_VAR 0 13
57820: PPUSH
57821: CALL_OW 254
57825: ST_TO_ADDR
// if r = 5 then
57826: LD_VAR 0 15
57830: PUSH
57831: LD_INT 5
57833: EQUAL
57834: IFFALSE 57844
// r := 0 ;
57836: LD_ADDR_VAR 0 15
57840: PUSH
57841: LD_INT 0
57843: ST_TO_ADDR
// for j = r to 5 do
57844: LD_ADDR_VAR 0 10
57848: PUSH
57849: DOUBLE
57850: LD_VAR 0 15
57854: DEC
57855: ST_TO_ADDR
57856: LD_INT 5
57858: PUSH
57859: FOR_TO
57860: IFFALSE 57976
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
57862: LD_ADDR_VAR 0 11
57866: PUSH
57867: LD_VAR 0 13
57871: PPUSH
57872: CALL_OW 250
57876: PPUSH
57877: LD_VAR 0 10
57881: PPUSH
57882: LD_INT 2
57884: PPUSH
57885: CALL_OW 272
57889: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
57890: LD_ADDR_VAR 0 12
57894: PUSH
57895: LD_VAR 0 13
57899: PPUSH
57900: CALL_OW 251
57904: PPUSH
57905: LD_VAR 0 10
57909: PPUSH
57910: LD_INT 2
57912: PPUSH
57913: CALL_OW 273
57917: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
57918: LD_VAR 0 11
57922: PPUSH
57923: LD_VAR 0 12
57927: PPUSH
57928: CALL_OW 488
57932: IFFALSE 57951
57934: PUSH
57935: LD_VAR 0 11
57939: PPUSH
57940: LD_VAR 0 12
57944: PPUSH
57945: CALL_OW 428
57949: NOT
57950: AND
57951: IFFALSE 57974
// begin ComMoveXY ( tmp , _x , _y ) ;
57953: LD_VAR 0 13
57957: PPUSH
57958: LD_VAR 0 11
57962: PPUSH
57963: LD_VAR 0 12
57967: PPUSH
57968: CALL_OW 111
// break ;
57972: GO 57976
// end ; end ;
57974: GO 57859
57976: POP
57977: POP
// end ; end ;
57978: GO 57291
57980: POP
57981: POP
// end ;
57982: LD_VAR 0 8
57986: RET
// export function BuildingTechInvented ( side , btype ) ; begin
57987: LD_INT 0
57989: PPUSH
// result := true ;
57990: LD_ADDR_VAR 0 3
57994: PUSH
57995: LD_INT 1
57997: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
57998: LD_VAR 0 2
58002: PUSH
58003: LD_INT 24
58005: DOUBLE
58006: EQUAL
58007: IFTRUE 58017
58009: LD_INT 33
58011: DOUBLE
58012: EQUAL
58013: IFTRUE 58017
58015: GO 58042
58017: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
58018: LD_ADDR_VAR 0 3
58022: PUSH
58023: LD_INT 32
58025: PPUSH
58026: LD_VAR 0 1
58030: PPUSH
58031: CALL_OW 321
58035: PUSH
58036: LD_INT 2
58038: EQUAL
58039: ST_TO_ADDR
58040: GO 58358
58042: LD_INT 20
58044: DOUBLE
58045: EQUAL
58046: IFTRUE 58050
58048: GO 58075
58050: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
58051: LD_ADDR_VAR 0 3
58055: PUSH
58056: LD_INT 6
58058: PPUSH
58059: LD_VAR 0 1
58063: PPUSH
58064: CALL_OW 321
58068: PUSH
58069: LD_INT 2
58071: EQUAL
58072: ST_TO_ADDR
58073: GO 58358
58075: LD_INT 22
58077: DOUBLE
58078: EQUAL
58079: IFTRUE 58089
58081: LD_INT 36
58083: DOUBLE
58084: EQUAL
58085: IFTRUE 58089
58087: GO 58114
58089: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
58090: LD_ADDR_VAR 0 3
58094: PUSH
58095: LD_INT 15
58097: PPUSH
58098: LD_VAR 0 1
58102: PPUSH
58103: CALL_OW 321
58107: PUSH
58108: LD_INT 2
58110: EQUAL
58111: ST_TO_ADDR
58112: GO 58358
58114: LD_INT 30
58116: DOUBLE
58117: EQUAL
58118: IFTRUE 58122
58120: GO 58147
58122: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
58123: LD_ADDR_VAR 0 3
58127: PUSH
58128: LD_INT 20
58130: PPUSH
58131: LD_VAR 0 1
58135: PPUSH
58136: CALL_OW 321
58140: PUSH
58141: LD_INT 2
58143: EQUAL
58144: ST_TO_ADDR
58145: GO 58358
58147: LD_INT 28
58149: DOUBLE
58150: EQUAL
58151: IFTRUE 58161
58153: LD_INT 21
58155: DOUBLE
58156: EQUAL
58157: IFTRUE 58161
58159: GO 58186
58161: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
58162: LD_ADDR_VAR 0 3
58166: PUSH
58167: LD_INT 21
58169: PPUSH
58170: LD_VAR 0 1
58174: PPUSH
58175: CALL_OW 321
58179: PUSH
58180: LD_INT 2
58182: EQUAL
58183: ST_TO_ADDR
58184: GO 58358
58186: LD_INT 16
58188: DOUBLE
58189: EQUAL
58190: IFTRUE 58194
58192: GO 58219
58194: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
58195: LD_ADDR_VAR 0 3
58199: PUSH
58200: LD_INT 84
58202: PPUSH
58203: LD_VAR 0 1
58207: PPUSH
58208: CALL_OW 321
58212: PUSH
58213: LD_INT 2
58215: EQUAL
58216: ST_TO_ADDR
58217: GO 58358
58219: LD_INT 19
58221: DOUBLE
58222: EQUAL
58223: IFTRUE 58233
58225: LD_INT 23
58227: DOUBLE
58228: EQUAL
58229: IFTRUE 58233
58231: GO 58258
58233: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
58234: LD_ADDR_VAR 0 3
58238: PUSH
58239: LD_INT 83
58241: PPUSH
58242: LD_VAR 0 1
58246: PPUSH
58247: CALL_OW 321
58251: PUSH
58252: LD_INT 2
58254: EQUAL
58255: ST_TO_ADDR
58256: GO 58358
58258: LD_INT 17
58260: DOUBLE
58261: EQUAL
58262: IFTRUE 58266
58264: GO 58291
58266: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
58267: LD_ADDR_VAR 0 3
58271: PUSH
58272: LD_INT 39
58274: PPUSH
58275: LD_VAR 0 1
58279: PPUSH
58280: CALL_OW 321
58284: PUSH
58285: LD_INT 2
58287: EQUAL
58288: ST_TO_ADDR
58289: GO 58358
58291: LD_INT 18
58293: DOUBLE
58294: EQUAL
58295: IFTRUE 58299
58297: GO 58324
58299: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
58300: LD_ADDR_VAR 0 3
58304: PUSH
58305: LD_INT 40
58307: PPUSH
58308: LD_VAR 0 1
58312: PPUSH
58313: CALL_OW 321
58317: PUSH
58318: LD_INT 2
58320: EQUAL
58321: ST_TO_ADDR
58322: GO 58358
58324: LD_INT 27
58326: DOUBLE
58327: EQUAL
58328: IFTRUE 58332
58330: GO 58357
58332: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
58333: LD_ADDR_VAR 0 3
58337: PUSH
58338: LD_INT 35
58340: PPUSH
58341: LD_VAR 0 1
58345: PPUSH
58346: CALL_OW 321
58350: PUSH
58351: LD_INT 2
58353: EQUAL
58354: ST_TO_ADDR
58355: GO 58358
58357: POP
// end ;
58358: LD_VAR 0 3
58362: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
58363: LD_INT 0
58365: PPUSH
58366: PPUSH
58367: PPUSH
58368: PPUSH
58369: PPUSH
58370: PPUSH
58371: PPUSH
58372: PPUSH
58373: PPUSH
58374: PPUSH
58375: PPUSH
// result := false ;
58376: LD_ADDR_VAR 0 6
58380: PUSH
58381: LD_INT 0
58383: ST_TO_ADDR
// if btype = b_depot then
58384: LD_VAR 0 2
58388: PUSH
58389: LD_INT 0
58391: EQUAL
58392: IFFALSE 58404
// begin result := true ;
58394: LD_ADDR_VAR 0 6
58398: PUSH
58399: LD_INT 1
58401: ST_TO_ADDR
// exit ;
58402: GO 59258
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
58404: LD_VAR 0 1
58408: NOT
58409: IFTRUE 58434
58411: PUSH
58412: LD_VAR 0 1
58416: PPUSH
58417: CALL_OW 266
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: IN
58432: NOT
58433: OR
58434: IFTRUE 58443
58436: PUSH
58437: LD_VAR 0 2
58441: NOT
58442: OR
58443: IFTRUE 58479
58445: PUSH
58446: LD_VAR 0 5
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: LD_INT 3
58462: PUSH
58463: LD_INT 4
58465: PUSH
58466: LD_INT 5
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: IN
58477: NOT
58478: OR
58479: IFTRUE 58498
58481: PUSH
58482: LD_VAR 0 3
58486: PPUSH
58487: LD_VAR 0 4
58491: PPUSH
58492: CALL_OW 488
58496: NOT
58497: OR
58498: IFFALSE 58502
// exit ;
58500: GO 59258
// side := GetSide ( depot ) ;
58502: LD_ADDR_VAR 0 9
58506: PUSH
58507: LD_VAR 0 1
58511: PPUSH
58512: CALL_OW 255
58516: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
58517: LD_VAR 0 9
58521: PPUSH
58522: LD_VAR 0 2
58526: PPUSH
58527: CALL 57987 0 2
58531: NOT
58532: IFFALSE 58536
// exit ;
58534: GO 59258
// pom := GetBase ( depot ) ;
58536: LD_ADDR_VAR 0 10
58540: PUSH
58541: LD_VAR 0 1
58545: PPUSH
58546: CALL_OW 274
58550: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58551: LD_ADDR_VAR 0 11
58555: PUSH
58556: LD_VAR 0 2
58560: PPUSH
58561: LD_VAR 0 1
58565: PPUSH
58566: CALL_OW 248
58570: PPUSH
58571: CALL_OW 450
58575: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
58576: LD_VAR 0 10
58580: PPUSH
58581: LD_INT 1
58583: PPUSH
58584: CALL_OW 275
58588: PUSH
58589: LD_VAR 0 11
58593: PUSH
58594: LD_INT 1
58596: ARRAY
58597: GREATEREQUAL
58598: IFFALSE 58624
58600: PUSH
58601: LD_VAR 0 10
58605: PPUSH
58606: LD_INT 2
58608: PPUSH
58609: CALL_OW 275
58613: PUSH
58614: LD_VAR 0 11
58618: PUSH
58619: LD_INT 2
58621: ARRAY
58622: GREATEREQUAL
58623: AND
58624: IFFALSE 58650
58626: PUSH
58627: LD_VAR 0 10
58631: PPUSH
58632: LD_INT 3
58634: PPUSH
58635: CALL_OW 275
58639: PUSH
58640: LD_VAR 0 11
58644: PUSH
58645: LD_INT 3
58647: ARRAY
58648: GREATEREQUAL
58649: AND
58650: NOT
58651: IFFALSE 58655
// exit ;
58653: GO 59258
// if GetBType ( depot ) = b_depot then
58655: LD_VAR 0 1
58659: PPUSH
58660: CALL_OW 266
58664: PUSH
58665: LD_INT 0
58667: EQUAL
58668: IFFALSE 58680
// dist := 28 else
58670: LD_ADDR_VAR 0 14
58674: PUSH
58675: LD_INT 28
58677: ST_TO_ADDR
58678: GO 58688
// dist := 36 ;
58680: LD_ADDR_VAR 0 14
58684: PUSH
58685: LD_INT 36
58687: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
58688: LD_VAR 0 1
58692: PPUSH
58693: LD_VAR 0 3
58697: PPUSH
58698: LD_VAR 0 4
58702: PPUSH
58703: CALL_OW 297
58707: PUSH
58708: LD_VAR 0 14
58712: GREATER
58713: IFFALSE 58717
// exit ;
58715: GO 59258
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
58717: LD_ADDR_VAR 0 12
58721: PUSH
58722: LD_VAR 0 2
58726: PPUSH
58727: LD_VAR 0 3
58731: PPUSH
58732: LD_VAR 0 4
58736: PPUSH
58737: LD_VAR 0 5
58741: PPUSH
58742: LD_VAR 0 1
58746: PPUSH
58747: CALL_OW 248
58751: PPUSH
58752: LD_INT 0
58754: PPUSH
58755: CALL 59263 0 6
58759: ST_TO_ADDR
// if not hexes then
58760: LD_VAR 0 12
58764: NOT
58765: IFFALSE 58769
// exit ;
58767: GO 59258
// hex := GetHexInfo ( x , y ) ;
58769: LD_ADDR_VAR 0 15
58773: PUSH
58774: LD_VAR 0 3
58778: PPUSH
58779: LD_VAR 0 4
58783: PPUSH
58784: CALL_OW 546
58788: ST_TO_ADDR
// if hex [ 1 ] then
58789: LD_VAR 0 15
58793: PUSH
58794: LD_INT 1
58796: ARRAY
58797: IFFALSE 58801
// exit ;
58799: GO 59258
// height := hex [ 2 ] ;
58801: LD_ADDR_VAR 0 13
58805: PUSH
58806: LD_VAR 0 15
58810: PUSH
58811: LD_INT 2
58813: ARRAY
58814: ST_TO_ADDR
// for i = 1 to hexes do
58815: LD_ADDR_VAR 0 7
58819: PUSH
58820: DOUBLE
58821: LD_INT 1
58823: DEC
58824: ST_TO_ADDR
58825: LD_VAR 0 12
58829: PUSH
58830: FOR_TO
58831: IFFALSE 59175
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
58833: LD_VAR 0 12
58837: PUSH
58838: LD_VAR 0 7
58842: ARRAY
58843: PUSH
58844: LD_INT 1
58846: ARRAY
58847: PPUSH
58848: LD_VAR 0 12
58852: PUSH
58853: LD_VAR 0 7
58857: ARRAY
58858: PUSH
58859: LD_INT 2
58861: ARRAY
58862: PPUSH
58863: CALL_OW 488
58867: NOT
58868: IFTRUE 58910
58870: PUSH
58871: LD_VAR 0 12
58875: PUSH
58876: LD_VAR 0 7
58880: ARRAY
58881: PUSH
58882: LD_INT 1
58884: ARRAY
58885: PPUSH
58886: LD_VAR 0 12
58890: PUSH
58891: LD_VAR 0 7
58895: ARRAY
58896: PUSH
58897: LD_INT 2
58899: ARRAY
58900: PPUSH
58901: CALL_OW 428
58905: PUSH
58906: LD_INT 0
58908: GREATER
58909: OR
58910: IFTRUE 58948
58912: PUSH
58913: LD_VAR 0 12
58917: PUSH
58918: LD_VAR 0 7
58922: ARRAY
58923: PUSH
58924: LD_INT 1
58926: ARRAY
58927: PPUSH
58928: LD_VAR 0 12
58932: PUSH
58933: LD_VAR 0 7
58937: ARRAY
58938: PUSH
58939: LD_INT 2
58941: ARRAY
58942: PPUSH
58943: CALL_OW 351
58947: OR
58948: IFFALSE 58954
// exit ;
58950: POP
58951: POP
58952: GO 59258
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58954: LD_ADDR_VAR 0 8
58958: PUSH
58959: LD_VAR 0 12
58963: PUSH
58964: LD_VAR 0 7
58968: ARRAY
58969: PUSH
58970: LD_INT 1
58972: ARRAY
58973: PPUSH
58974: LD_VAR 0 12
58978: PUSH
58979: LD_VAR 0 7
58983: ARRAY
58984: PUSH
58985: LD_INT 2
58987: ARRAY
58988: PPUSH
58989: CALL_OW 546
58993: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
58994: LD_VAR 0 8
58998: PUSH
58999: LD_INT 1
59001: ARRAY
59002: IFTRUE 59024
59004: PUSH
59005: LD_VAR 0 8
59009: PUSH
59010: LD_INT 2
59012: ARRAY
59013: PUSH
59014: LD_VAR 0 13
59018: PUSH
59019: LD_INT 2
59021: PLUS
59022: GREATER
59023: OR
59024: IFTRUE 59046
59026: PUSH
59027: LD_VAR 0 8
59031: PUSH
59032: LD_INT 2
59034: ARRAY
59035: PUSH
59036: LD_VAR 0 13
59040: PUSH
59041: LD_INT 2
59043: MINUS
59044: LESS
59045: OR
59046: IFTRUE 59114
59048: PUSH
59049: LD_VAR 0 8
59053: PUSH
59054: LD_INT 3
59056: ARRAY
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 8
59063: PUSH
59064: LD_INT 9
59066: PUSH
59067: LD_INT 10
59069: PUSH
59070: LD_INT 11
59072: PUSH
59073: LD_INT 12
59075: PUSH
59076: LD_INT 13
59078: PUSH
59079: LD_INT 16
59081: PUSH
59082: LD_INT 17
59084: PUSH
59085: LD_INT 18
59087: PUSH
59088: LD_INT 19
59090: PUSH
59091: LD_INT 20
59093: PUSH
59094: LD_INT 21
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: IN
59112: NOT
59113: OR
59114: IFTRUE 59127
59116: PUSH
59117: LD_VAR 0 8
59121: PUSH
59122: LD_INT 5
59124: ARRAY
59125: NOT
59126: OR
59127: IFTRUE 59167
59129: PUSH
59130: LD_VAR 0 8
59134: PUSH
59135: LD_INT 6
59137: ARRAY
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: LD_INT 7
59147: PUSH
59148: LD_INT 9
59150: PUSH
59151: LD_INT 10
59153: PUSH
59154: LD_INT 11
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: IN
59165: NOT
59166: OR
59167: IFFALSE 59173
// exit ;
59169: POP
59170: POP
59171: GO 59258
// end ;
59173: GO 58830
59175: POP
59176: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
59177: LD_VAR 0 9
59181: PPUSH
59182: LD_VAR 0 3
59186: PPUSH
59187: LD_VAR 0 4
59191: PPUSH
59192: LD_INT 20
59194: PPUSH
59195: CALL 51077 0 4
59199: PUSH
59200: LD_INT 4
59202: ARRAY
59203: IFFALSE 59207
// exit ;
59205: GO 59258
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
59207: LD_VAR 0 2
59211: PUSH
59212: LD_INT 29
59214: PUSH
59215: LD_INT 30
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: IN
59222: IFFALSE 59246
59224: PUSH
59225: LD_VAR 0 3
59229: PPUSH
59230: LD_VAR 0 4
59234: PPUSH
59235: LD_VAR 0 9
59239: PPUSH
59240: CALL_OW 440
59244: NOT
59245: AND
59246: IFFALSE 59250
// exit ;
59248: GO 59258
// result := true ;
59250: LD_ADDR_VAR 0 6
59254: PUSH
59255: LD_INT 1
59257: ST_TO_ADDR
// end ;
59258: LD_VAR 0 6
59262: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
59263: LD_INT 0
59265: PPUSH
59266: PPUSH
59267: PPUSH
59268: PPUSH
59269: PPUSH
59270: PPUSH
59271: PPUSH
59272: PPUSH
59273: PPUSH
59274: PPUSH
59275: PPUSH
59276: PPUSH
59277: PPUSH
59278: PPUSH
59279: PPUSH
59280: PPUSH
59281: PPUSH
59282: PPUSH
59283: PPUSH
59284: PPUSH
59285: PPUSH
59286: PPUSH
59287: PPUSH
59288: PPUSH
59289: PPUSH
59290: PPUSH
59291: PPUSH
59292: PPUSH
59293: PPUSH
59294: PPUSH
59295: PPUSH
59296: PPUSH
59297: PPUSH
59298: PPUSH
59299: PPUSH
59300: PPUSH
59301: PPUSH
59302: PPUSH
59303: PPUSH
59304: PPUSH
59305: PPUSH
59306: PPUSH
59307: PPUSH
59308: PPUSH
59309: PPUSH
59310: PPUSH
59311: PPUSH
59312: PPUSH
59313: PPUSH
59314: PPUSH
59315: PPUSH
59316: PPUSH
59317: PPUSH
59318: PPUSH
59319: PPUSH
59320: PPUSH
59321: PPUSH
59322: PPUSH
// result = [ ] ;
59323: LD_ADDR_VAR 0 7
59327: PUSH
59328: EMPTY
59329: ST_TO_ADDR
// temp_list = [ ] ;
59330: LD_ADDR_VAR 0 9
59334: PUSH
59335: EMPTY
59336: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
59337: LD_VAR 0 4
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: LD_INT 3
59353: PUSH
59354: LD_INT 4
59356: PUSH
59357: LD_INT 5
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: IN
59368: NOT
59369: IFTRUE 59412
59371: PUSH
59372: LD_VAR 0 1
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: IN
59387: IFFALSE 59411
59389: PUSH
59390: LD_VAR 0 5
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: LD_INT 3
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: LIST
59408: IN
59409: NOT
59410: AND
59411: OR
59412: IFFALSE 59416
// exit ;
59414: GO 77815
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
59416: LD_VAR 0 1
59420: PUSH
59421: LD_INT 6
59423: PUSH
59424: LD_INT 7
59426: PUSH
59427: LD_INT 8
59429: PUSH
59430: LD_INT 13
59432: PUSH
59433: LD_INT 12
59435: PUSH
59436: LD_INT 15
59438: PUSH
59439: LD_INT 11
59441: PUSH
59442: LD_INT 14
59444: PUSH
59445: LD_INT 10
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: IN
59459: IFFALSE 59469
// btype = b_lab ;
59461: LD_ADDR_VAR 0 1
59465: PUSH
59466: LD_INT 6
59468: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
59469: LD_VAR 0 6
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: LIST
59487: IN
59488: NOT
59489: IFTRUE 59557
59491: PUSH
59492: LD_VAR 0 1
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: LD_INT 1
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: LD_INT 6
59511: PUSH
59512: LD_INT 36
59514: PUSH
59515: LD_INT 4
59517: PUSH
59518: LD_INT 5
59520: PUSH
59521: LD_INT 31
59523: PUSH
59524: LD_INT 32
59526: PUSH
59527: LD_INT 33
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: IN
59543: NOT
59544: IFFALSE 59556
59546: PUSH
59547: LD_VAR 0 6
59551: PUSH
59552: LD_INT 1
59554: EQUAL
59555: AND
59556: OR
59557: IFTRUE 59589
59559: PUSH
59560: LD_VAR 0 1
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 3
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: IN
59575: NOT
59576: IFFALSE 59588
59578: PUSH
59579: LD_VAR 0 6
59583: PUSH
59584: LD_INT 2
59586: EQUAL
59587: AND
59588: OR
59589: IFFALSE 59599
// mode = 0 ;
59591: LD_ADDR_VAR 0 6
59595: PUSH
59596: LD_INT 0
59598: ST_TO_ADDR
// case mode of 0 :
59599: LD_VAR 0 6
59603: PUSH
59604: LD_INT 0
59606: DOUBLE
59607: EQUAL
59608: IFTRUE 59612
59610: GO 71065
59612: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59613: LD_ADDR_VAR 0 11
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 1
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: LD_INT 2
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 2
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: LD_INT 3
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59806: LD_ADDR_VAR 0 12
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 2
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 3
59963: NEG
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60002: LD_ADDR_VAR 0 13
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: LD_INT 2
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: LD_INT 2
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 2
60137: NEG
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: LD_INT 3
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 3
60161: NEG
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60201: LD_ADDR_VAR 0 14
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: LD_INT 2
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: LD_INT 2
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: LD_INT 2
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 2
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: LD_INT 3
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: LD_INT 2
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60397: LD_ADDR_VAR 0 15
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 2
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 2
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 2
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 3
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60590: LD_ADDR_VAR 0 16
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: NEG
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: LD_INT 2
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 2
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 2
60725: NEG
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 3
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 3
60747: PUSH
60748: LD_INT 3
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: LD_INT 3
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60783: LD_ADDR_VAR 0 17
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 1
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: NEG
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 1
60864: NEG
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: LD_INT 2
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: NEG
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 2
60982: NEG
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61013: LD_ADDR_VAR 0 18
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: LD_INT 2
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 2
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 2
61189: NEG
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61243: LD_ADDR_VAR 0 19
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 2
61419: NEG
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 2
61430: NEG
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: NEG
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61473: LD_ADDR_VAR 0 20
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 2
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 2
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: LD_INT 2
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 2
61649: NEG
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: NEG
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61703: LD_ADDR_VAR 0 21
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 2
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 2
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: LD_INT 2
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: LD_INT 2
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 2
61879: NEG
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: NEG
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 2
61902: NEG
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61933: LD_ADDR_VAR 0 22
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: LD_INT 2
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 2
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: LD_INT 2
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: LD_INT 2
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62163: LD_ADDR_VAR 0 23
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 2
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 2
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 2
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 2
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 2
62339: NEG
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 2
62350: NEG
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 2
62362: NEG
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 2
62374: NEG
62375: PUSH
62376: LD_INT 3
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: LD_INT 3
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: LD_INT 2
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 2
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
62443: LD_ADDR_VAR 0 24
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: LD_INT 2
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 2
62558: PUSH
62559: LD_INT 0
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 2
62568: PUSH
62569: LD_INT 1
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 2
62578: PUSH
62579: LD_INT 2
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: LD_INT 2
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: LD_INT 2
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 2
62619: NEG
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 2
62642: NEG
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 3
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 3
62686: PUSH
62687: LD_INT 2
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
62719: LD_ADDR_VAR 0 25
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 0
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 1
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 2
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 2
62854: PUSH
62855: LD_INT 2
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: LD_INT 2
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 2
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 2
62895: NEG
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 2
62906: NEG
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 2
62918: NEG
62919: PUSH
62920: LD_INT 2
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 3
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 3
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: LD_INT 3
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: LD_INT 3
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62993: LD_ADDR_VAR 0 26
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 2
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: PUSH
63129: LD_INT 2
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: LD_INT 2
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 2
63169: NEG
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 2
63192: NEG
63193: PUSH
63194: LD_INT 2
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: LD_INT 3
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: LD_INT 3
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 2
63235: NEG
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63269: LD_ADDR_VAR 0 27
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: LD_INT 1
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: LD_INT 2
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: LD_INT 2
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 2
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 2
63394: PUSH
63395: LD_INT 1
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 2
63404: PUSH
63405: LD_INT 2
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 0
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 2
63445: NEG
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 2
63456: NEG
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 2
63468: NEG
63469: PUSH
63470: LD_INT 2
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 1
63480: NEG
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 2
63491: NEG
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 3
63502: NEG
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 3
63514: NEG
63515: PUSH
63516: LD_INT 2
63518: NEG
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63549: LD_ADDR_VAR 0 28
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 1
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: LD_INT 1
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: LD_INT 1
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: LD_INT 2
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 2
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 2
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 2
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 2
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 2
63725: NEG
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 2
63736: NEG
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 2
63748: NEG
63749: PUSH
63750: LD_INT 2
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: LD_INT 3
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 1
63772: NEG
63773: PUSH
63774: LD_INT 3
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 3
63784: NEG
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 3
63796: NEG
63797: PUSH
63798: LD_INT 2
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63831: LD_ADDR_VAR 0 29
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 1
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: LD_INT 1
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 2
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 2
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 2
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: PUSH
63967: LD_INT 2
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: LD_INT 2
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 2
63997: NEG
63998: PUSH
63999: LD_INT 1
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 2
64009: NEG
64010: PUSH
64011: LD_INT 2
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 2
64021: NEG
64022: PUSH
64023: LD_INT 3
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 2
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 3
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: PUSH
64055: LD_INT 3
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 3
64075: NEG
64076: PUSH
64077: LD_INT 2
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64110: LD_ADDR_VAR 0 30
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: LD_INT 1
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: LD_INT 1
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: LD_INT 2
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: LD_INT 2
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 2
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 2
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 2
64245: PUSH
64246: LD_INT 2
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: LD_INT 2
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 1
64265: NEG
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 2
64276: NEG
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: LD_INT 3
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: PUSH
64312: LD_INT 2
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 3
64322: PUSH
64323: LD_INT 2
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: LD_INT 3
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 2
64342: NEG
64343: PUSH
64344: LD_INT 1
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 3
64353: NEG
64354: PUSH
64355: LD_INT 1
64357: NEG
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64388: LD_ADDR_VAR 0 31
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: NEG
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: NEG
64470: PUSH
64471: LD_INT 2
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: PUSH
64482: LD_INT 1
64484: NEG
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 2
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 2
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 2
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: LD_INT 2
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: LD_INT 2
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 1
64542: NEG
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 2
64553: NEG
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 2
64565: NEG
64566: PUSH
64567: LD_INT 2
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 2
64577: NEG
64578: PUSH
64579: LD_INT 3
64581: NEG
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 2
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 3
64600: PUSH
64601: LD_INT 1
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: LD_INT 3
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: LD_INT 2
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 3
64631: NEG
64632: PUSH
64633: LD_INT 2
64635: NEG
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64666: LD_ADDR_VAR 0 32
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: LD_INT 1
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 1
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 1
64724: NEG
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 1
64747: NEG
64748: PUSH
64749: LD_INT 2
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: LD_INT 2
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: LD_INT 1
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 2
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 2
64791: PUSH
64792: LD_INT 2
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: LD_INT 2
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: NEG
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 2
64843: NEG
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 1
64855: NEG
64856: PUSH
64857: LD_INT 3
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: LD_INT 2
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 3
64878: PUSH
64879: LD_INT 2
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 2
64888: PUSH
64889: LD_INT 3
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 2
64898: NEG
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 3
64909: NEG
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64944: LD_ADDR_VAR 0 33
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 1
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: LD_INT 1
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: NEG
65003: PUSH
65004: LD_INT 0
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: LD_INT 2
65029: NEG
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 1
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 2
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 2
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: LD_INT 2
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 1
65088: NEG
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 2
65099: NEG
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: LD_INT 2
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 2
65134: NEG
65135: PUSH
65136: LD_INT 3
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 2
65146: PUSH
65147: LD_INT 1
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 3
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: LD_INT 3
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 1
65177: NEG
65178: PUSH
65179: LD_INT 2
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 3
65188: NEG
65189: PUSH
65190: LD_INT 2
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65223: LD_ADDR_VAR 0 34
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 1
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 1
65281: NEG
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 1
65292: NEG
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 2
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 1
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 2
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 2
65348: PUSH
65349: LD_INT 2
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: LD_INT 2
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 1
65368: NEG
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 2
65379: NEG
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 2
65390: NEG
65391: PUSH
65392: LD_INT 1
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 2
65402: NEG
65403: PUSH
65404: LD_INT 2
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: LD_INT 3
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: LD_INT 2
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 3
65437: PUSH
65438: LD_INT 2
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 2
65447: PUSH
65448: LD_INT 3
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 2
65457: NEG
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 3
65468: NEG
65469: PUSH
65470: LD_INT 1
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65503: LD_ADDR_VAR 0 35
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: LD_INT 1
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 1
65531: PUSH
65532: LD_INT 0
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: LD_INT 1
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: LD_INT 1
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: LD_INT 1
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 2
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 2
65594: NEG
65595: PUSH
65596: LD_INT 1
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65615: LD_ADDR_VAR 0 36
65619: PUSH
65620: LD_INT 0
65622: PUSH
65623: LD_INT 0
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 0
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 1
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: LD_INT 1
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 1
65684: NEG
65685: PUSH
65686: LD_INT 1
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: LD_INT 2
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: LD_INT 2
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65727: LD_ADDR_VAR 0 37
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 0
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 0
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 1
65785: NEG
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 1
65796: NEG
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 1
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 1
65819: NEG
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65839: LD_ADDR_VAR 0 38
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 1
65867: PUSH
65868: LD_INT 0
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 1
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: LD_INT 1
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 2
65920: PUSH
65921: LD_INT 1
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 2
65930: NEG
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65951: LD_ADDR_VAR 0 39
65955: PUSH
65956: LD_INT 0
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 0
65968: PUSH
65969: LD_INT 1
65971: NEG
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 1
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 1
65989: PUSH
65990: LD_INT 1
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: LD_INT 1
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 1
66009: NEG
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: LD_INT 1
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 1
66032: NEG
66033: PUSH
66034: LD_INT 2
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: PUSH
66045: LD_INT 2
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66063: LD_ADDR_VAR 0 40
66067: PUSH
66068: LD_INT 0
66070: PUSH
66071: LD_INT 0
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: LD_INT 1
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: LD_INT 1
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: LD_INT 1
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 1
66121: NEG
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 1
66132: NEG
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 1
66144: PUSH
66145: LD_INT 1
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 1
66155: NEG
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66175: LD_ADDR_VAR 0 41
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: LD_INT 0
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 0
66192: PUSH
66193: LD_INT 1
66195: NEG
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 1
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 1
66213: PUSH
66214: LD_INT 1
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 0
66223: PUSH
66224: LD_INT 1
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 1
66233: NEG
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 1
66244: NEG
66245: PUSH
66246: LD_INT 1
66248: NEG
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 1
66256: NEG
66257: PUSH
66258: LD_INT 2
66260: NEG
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 1
66268: PUSH
66269: LD_INT 1
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 2
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 2
66289: PUSH
66290: LD_INT 1
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 2
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 1
66309: PUSH
66310: LD_INT 2
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: NEG
66320: PUSH
66321: LD_INT 1
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 2
66330: NEG
66331: PUSH
66332: LD_INT 0
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 2
66341: NEG
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 2
66353: NEG
66354: PUSH
66355: LD_INT 2
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 2
66365: NEG
66366: PUSH
66367: LD_INT 3
66369: NEG
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 2
66377: PUSH
66378: LD_INT 1
66380: NEG
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 3
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 3
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 3
66408: PUSH
66409: LD_INT 2
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 3
66418: PUSH
66419: LD_INT 3
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 2
66428: PUSH
66429: LD_INT 3
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 2
66438: NEG
66439: PUSH
66440: LD_INT 1
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 3
66449: NEG
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 3
66460: NEG
66461: PUSH
66462: LD_INT 1
66464: NEG
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 3
66472: NEG
66473: PUSH
66474: LD_INT 2
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 3
66484: NEG
66485: PUSH
66486: LD_INT 3
66488: NEG
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66525: LD_ADDR_VAR 0 42
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: LD_INT 0
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 1
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 1
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 0
66573: PUSH
66574: LD_INT 1
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: NEG
66595: PUSH
66596: LD_INT 1
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 1
66606: NEG
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: LD_INT 2
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 1
66629: PUSH
66630: LD_INT 1
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 2
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 2
66650: PUSH
66651: LD_INT 2
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: LD_INT 2
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: LD_INT 2
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 1
66680: NEG
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 2
66691: NEG
66692: PUSH
66693: LD_INT 1
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 2
66703: NEG
66704: PUSH
66705: LD_INT 2
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 2
66715: NEG
66716: PUSH
66717: LD_INT 3
66719: NEG
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 1
66727: NEG
66728: PUSH
66729: LD_INT 3
66731: NEG
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 0
66739: PUSH
66740: LD_INT 3
66742: NEG
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 1
66750: PUSH
66751: LD_INT 2
66753: NEG
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 3
66761: PUSH
66762: LD_INT 2
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 3
66771: PUSH
66772: LD_INT 3
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 2
66781: PUSH
66782: LD_INT 3
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: LD_INT 3
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: LD_INT 3
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: NEG
66812: PUSH
66813: LD_INT 2
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 3
66822: NEG
66823: PUSH
66824: LD_INT 2
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 3
66834: NEG
66835: PUSH
66836: LD_INT 3
66838: NEG
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66875: LD_ADDR_VAR 0 43
66879: PUSH
66880: LD_INT 0
66882: PUSH
66883: LD_INT 0
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 0
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 1
66903: PUSH
66904: LD_INT 0
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: LD_INT 1
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 0
66923: PUSH
66924: LD_INT 1
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 1
66933: NEG
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 1
66944: NEG
66945: PUSH
66946: LD_INT 1
66948: NEG
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 1
66956: NEG
66957: PUSH
66958: LD_INT 2
66960: NEG
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 0
66968: PUSH
66969: LD_INT 2
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 1
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 2
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 2
67000: PUSH
67001: LD_INT 1
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 1
67010: PUSH
67011: LD_INT 2
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 0
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: NEG
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 2
67041: NEG
67042: PUSH
67043: LD_INT 0
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 2
67052: NEG
67053: PUSH
67054: LD_INT 1
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 1
67064: NEG
67065: PUSH
67066: LD_INT 3
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: LD_INT 3
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 1
67087: PUSH
67088: LD_INT 2
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 2
67098: PUSH
67099: LD_INT 1
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 3
67109: PUSH
67110: LD_INT 0
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 3
67119: PUSH
67120: LD_INT 1
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 1
67129: PUSH
67130: LD_INT 3
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 0
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 1
67149: NEG
67150: PUSH
67151: LD_INT 2
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 2
67160: NEG
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 3
67171: NEG
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 3
67182: NEG
67183: PUSH
67184: LD_INT 1
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67223: LD_ADDR_VAR 0 44
67227: PUSH
67228: LD_INT 0
67230: PUSH
67231: LD_INT 0
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: LD_INT 1
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 1
67251: PUSH
67252: LD_INT 0
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 1
67261: PUSH
67262: LD_INT 1
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 0
67271: PUSH
67272: LD_INT 1
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 1
67281: NEG
67282: PUSH
67283: LD_INT 0
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 1
67292: NEG
67293: PUSH
67294: LD_INT 1
67296: NEG
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 1
67304: NEG
67305: PUSH
67306: LD_INT 2
67308: NEG
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 1
67316: PUSH
67317: LD_INT 1
67319: NEG
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 2
67327: PUSH
67328: LD_INT 0
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 2
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 2
67347: PUSH
67348: LD_INT 2
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: LD_INT 2
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 1
67367: NEG
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 2
67378: NEG
67379: PUSH
67380: LD_INT 0
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 2
67389: NEG
67390: PUSH
67391: LD_INT 1
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 2
67401: NEG
67402: PUSH
67403: LD_INT 2
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 2
67413: NEG
67414: PUSH
67415: LD_INT 3
67417: NEG
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 2
67425: PUSH
67426: LD_INT 1
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: LD_INT 0
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 3
67446: PUSH
67447: LD_INT 1
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 3
67456: PUSH
67457: LD_INT 2
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 3
67466: PUSH
67467: LD_INT 3
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 2
67476: PUSH
67477: LD_INT 3
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 2
67486: NEG
67487: PUSH
67488: LD_INT 1
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 3
67497: NEG
67498: PUSH
67499: LD_INT 0
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 3
67508: NEG
67509: PUSH
67510: LD_INT 1
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 3
67520: NEG
67521: PUSH
67522: LD_INT 2
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 3
67532: NEG
67533: PUSH
67534: LD_INT 3
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67573: LD_ADDR_VAR 0 45
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: LD_INT 0
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: LD_INT 1
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: LD_INT 0
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 1
67611: PUSH
67612: LD_INT 1
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: LD_INT 1
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 1
67631: NEG
67632: PUSH
67633: LD_INT 0
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 1
67642: NEG
67643: PUSH
67644: LD_INT 1
67646: NEG
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 1
67654: NEG
67655: PUSH
67656: LD_INT 2
67658: NEG
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 0
67666: PUSH
67667: LD_INT 2
67669: NEG
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 1
67677: PUSH
67678: LD_INT 1
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 2
67698: PUSH
67699: LD_INT 2
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 1
67708: PUSH
67709: LD_INT 2
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 0
67718: PUSH
67719: LD_INT 2
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 1
67728: NEG
67729: PUSH
67730: LD_INT 1
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 2
67739: NEG
67740: PUSH
67741: LD_INT 1
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 2
67751: NEG
67752: PUSH
67753: LD_INT 2
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 2
67763: NEG
67764: PUSH
67765: LD_INT 3
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 1
67775: NEG
67776: PUSH
67777: LD_INT 3
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 0
67787: PUSH
67788: LD_INT 3
67790: NEG
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 1
67798: PUSH
67799: LD_INT 2
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 3
67809: PUSH
67810: LD_INT 2
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 3
67819: PUSH
67820: LD_INT 3
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 2
67829: PUSH
67830: LD_INT 3
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: LD_INT 3
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: LD_INT 3
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 1
67859: NEG
67860: PUSH
67861: LD_INT 2
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 3
67870: NEG
67871: PUSH
67872: LD_INT 2
67874: NEG
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 3
67882: NEG
67883: PUSH
67884: LD_INT 3
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67923: LD_ADDR_VAR 0 46
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: LD_INT 0
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 0
67940: PUSH
67941: LD_INT 1
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 1
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 1
67961: PUSH
67962: LD_INT 1
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 0
67971: PUSH
67972: LD_INT 1
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 1
67981: NEG
67982: PUSH
67983: LD_INT 0
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 1
67992: NEG
67993: PUSH
67994: LD_INT 1
67996: NEG
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 1
68004: NEG
68005: PUSH
68006: LD_INT 2
68008: NEG
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 0
68016: PUSH
68017: LD_INT 2
68019: NEG
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 1
68027: PUSH
68028: LD_INT 1
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 2
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 2
68048: PUSH
68049: LD_INT 1
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 1
68058: PUSH
68059: LD_INT 2
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 0
68068: PUSH
68069: LD_INT 2
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 1
68078: NEG
68079: PUSH
68080: LD_INT 1
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 2
68089: NEG
68090: PUSH
68091: LD_INT 0
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 2
68100: NEG
68101: PUSH
68102: LD_INT 1
68104: NEG
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 1
68112: NEG
68113: PUSH
68114: LD_INT 3
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 0
68124: PUSH
68125: LD_INT 3
68127: NEG
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 1
68135: PUSH
68136: LD_INT 2
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 2
68146: PUSH
68147: LD_INT 1
68149: NEG
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 3
68157: PUSH
68158: LD_INT 0
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 3
68167: PUSH
68168: LD_INT 1
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: LD_INT 3
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 0
68187: PUSH
68188: LD_INT 3
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 1
68197: NEG
68198: PUSH
68199: LD_INT 2
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 2
68208: NEG
68209: PUSH
68210: LD_INT 1
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 3
68219: NEG
68220: PUSH
68221: LD_INT 0
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 3
68230: NEG
68231: PUSH
68232: LD_INT 1
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68271: LD_ADDR_VAR 0 47
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: LD_INT 0
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: LD_INT 1
68291: NEG
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 1
68299: PUSH
68300: LD_INT 0
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 1
68309: PUSH
68310: LD_INT 1
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: LD_INT 1
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 1
68329: NEG
68330: PUSH
68331: LD_INT 0
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 1
68340: NEG
68341: PUSH
68342: LD_INT 1
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 1
68352: NEG
68353: PUSH
68354: LD_INT 2
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: LD_INT 2
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 1
68375: PUSH
68376: LD_INT 1
68378: NEG
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 2
68386: NEG
68387: PUSH
68388: LD_INT 1
68390: NEG
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 2
68398: NEG
68399: PUSH
68400: LD_INT 2
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68422: LD_ADDR_VAR 0 48
68426: PUSH
68427: LD_INT 0
68429: PUSH
68430: LD_INT 0
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: LD_INT 1
68442: NEG
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 1
68450: PUSH
68451: LD_INT 0
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 1
68460: PUSH
68461: LD_INT 1
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 0
68470: PUSH
68471: LD_INT 1
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 1
68480: NEG
68481: PUSH
68482: LD_INT 0
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: LD_INT 1
68495: NEG
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 1
68503: NEG
68504: PUSH
68505: LD_INT 2
68507: NEG
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 0
68515: PUSH
68516: LD_INT 2
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 1
68526: PUSH
68527: LD_INT 1
68529: NEG
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 2
68537: PUSH
68538: LD_INT 0
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 2
68547: PUSH
68548: LD_INT 1
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68569: LD_ADDR_VAR 0 49
68573: PUSH
68574: LD_INT 0
68576: PUSH
68577: LD_INT 0
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 0
68586: PUSH
68587: LD_INT 1
68589: NEG
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 1
68597: PUSH
68598: LD_INT 0
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 1
68607: PUSH
68608: LD_INT 1
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 0
68617: PUSH
68618: LD_INT 1
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 1
68627: NEG
68628: PUSH
68629: LD_INT 0
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 1
68638: NEG
68639: PUSH
68640: LD_INT 1
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 1
68650: PUSH
68651: LD_INT 1
68653: NEG
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 2
68661: PUSH
68662: LD_INT 0
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 2
68671: PUSH
68672: LD_INT 1
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PUSH
68679: LD_INT 2
68681: PUSH
68682: LD_INT 2
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 1
68691: PUSH
68692: LD_INT 2
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68713: LD_ADDR_VAR 0 50
68717: PUSH
68718: LD_INT 0
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: LD_INT 1
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 1
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 1
68751: PUSH
68752: LD_INT 1
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: LD_INT 1
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 1
68771: NEG
68772: PUSH
68773: LD_INT 0
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 1
68782: NEG
68783: PUSH
68784: LD_INT 1
68786: NEG
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 2
68794: PUSH
68795: LD_INT 1
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 2
68804: PUSH
68805: LD_INT 2
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 1
68814: PUSH
68815: LD_INT 2
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 0
68824: PUSH
68825: LD_INT 2
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 1
68834: NEG
68835: PUSH
68836: LD_INT 1
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68857: LD_ADDR_VAR 0 51
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: LD_INT 1
68877: NEG
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 1
68885: PUSH
68886: LD_INT 0
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 1
68895: PUSH
68896: LD_INT 1
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 0
68905: PUSH
68906: LD_INT 1
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 1
68915: NEG
68916: PUSH
68917: LD_INT 0
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 1
68926: NEG
68927: PUSH
68928: LD_INT 1
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 1
68938: PUSH
68939: LD_INT 2
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 0
68948: PUSH
68949: LD_INT 2
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 1
68958: NEG
68959: PUSH
68960: LD_INT 1
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 2
68969: NEG
68970: PUSH
68971: LD_INT 0
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 2
68980: NEG
68981: PUSH
68982: LD_INT 1
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69004: LD_ADDR_VAR 0 52
69008: PUSH
69009: LD_INT 0
69011: PUSH
69012: LD_INT 0
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: LD_INT 1
69024: NEG
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 1
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 1
69042: PUSH
69043: LD_INT 1
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 0
69052: PUSH
69053: LD_INT 1
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 1
69062: NEG
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 1
69073: NEG
69074: PUSH
69075: LD_INT 1
69077: NEG
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 1
69085: NEG
69086: PUSH
69087: LD_INT 2
69089: NEG
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 1
69097: NEG
69098: PUSH
69099: LD_INT 1
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 2
69108: NEG
69109: PUSH
69110: LD_INT 0
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 2
69119: NEG
69120: PUSH
69121: LD_INT 1
69123: NEG
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 2
69131: NEG
69132: PUSH
69133: LD_INT 2
69135: NEG
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69155: LD_ADDR_VAR 0 53
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: LD_INT 0
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 0
69172: PUSH
69173: LD_INT 1
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 1
69183: PUSH
69184: LD_INT 0
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 1
69193: PUSH
69194: LD_INT 1
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: LD_INT 1
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 1
69213: NEG
69214: PUSH
69215: LD_INT 0
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 1
69224: NEG
69225: PUSH
69226: LD_INT 1
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 1
69236: NEG
69237: PUSH
69238: LD_INT 2
69240: NEG
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 0
69248: PUSH
69249: LD_INT 2
69251: NEG
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: LD_INT 1
69262: NEG
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 2
69270: PUSH
69271: LD_INT 0
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 2
69280: PUSH
69281: LD_INT 1
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 2
69290: PUSH
69291: LD_INT 2
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: PUSH
69301: LD_INT 2
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 0
69310: PUSH
69311: LD_INT 2
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 1
69320: NEG
69321: PUSH
69322: LD_INT 1
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 2
69331: NEG
69332: PUSH
69333: LD_INT 0
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 2
69342: NEG
69343: PUSH
69344: LD_INT 1
69346: NEG
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 2
69354: NEG
69355: PUSH
69356: LD_INT 2
69358: NEG
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69385: LD_ADDR_VAR 0 54
69389: PUSH
69390: LD_INT 0
69392: PUSH
69393: LD_INT 0
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 0
69402: PUSH
69403: LD_INT 1
69405: NEG
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 1
69413: PUSH
69414: LD_INT 0
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 1
69423: PUSH
69424: LD_INT 1
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 0
69433: PUSH
69434: LD_INT 1
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 1
69443: NEG
69444: PUSH
69445: LD_INT 0
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 1
69454: NEG
69455: PUSH
69456: LD_INT 1
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 1
69466: NEG
69467: PUSH
69468: LD_INT 2
69470: NEG
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: LD_INT 2
69481: NEG
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 1
69489: PUSH
69490: LD_INT 1
69492: NEG
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 2
69500: PUSH
69501: LD_INT 0
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 2
69510: PUSH
69511: LD_INT 1
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 2
69520: PUSH
69521: LD_INT 2
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: LD_INT 2
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 0
69540: PUSH
69541: LD_INT 2
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 1
69550: NEG
69551: PUSH
69552: LD_INT 1
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 2
69561: NEG
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 2
69572: NEG
69573: PUSH
69574: LD_INT 1
69576: NEG
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 2
69584: NEG
69585: PUSH
69586: LD_INT 2
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69615: LD_ADDR_VAR 0 55
69619: PUSH
69620: LD_INT 0
69622: PUSH
69623: LD_INT 0
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: LD_INT 1
69635: NEG
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 1
69643: PUSH
69644: LD_INT 0
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 1
69653: PUSH
69654: LD_INT 1
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 0
69663: PUSH
69664: LD_INT 1
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 1
69673: NEG
69674: PUSH
69675: LD_INT 0
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 1
69684: NEG
69685: PUSH
69686: LD_INT 1
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 1
69696: NEG
69697: PUSH
69698: LD_INT 2
69700: NEG
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 0
69708: PUSH
69709: LD_INT 2
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 1
69719: PUSH
69720: LD_INT 1
69722: NEG
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 2
69730: PUSH
69731: LD_INT 0
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 2
69740: PUSH
69741: LD_INT 1
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 2
69750: PUSH
69751: LD_INT 2
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 1
69760: PUSH
69761: LD_INT 2
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: LD_INT 2
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 1
69780: NEG
69781: PUSH
69782: LD_INT 1
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 2
69791: NEG
69792: PUSH
69793: LD_INT 0
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 2
69802: NEG
69803: PUSH
69804: LD_INT 1
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 2
69814: NEG
69815: PUSH
69816: LD_INT 2
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69845: LD_ADDR_VAR 0 56
69849: PUSH
69850: LD_INT 0
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 0
69862: PUSH
69863: LD_INT 1
69865: NEG
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 1
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 1
69883: PUSH
69884: LD_INT 1
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 0
69893: PUSH
69894: LD_INT 1
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 1
69903: NEG
69904: PUSH
69905: LD_INT 0
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 1
69914: NEG
69915: PUSH
69916: LD_INT 1
69918: NEG
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 1
69926: NEG
69927: PUSH
69928: LD_INT 2
69930: NEG
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 0
69938: PUSH
69939: LD_INT 2
69941: NEG
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 1
69949: PUSH
69950: LD_INT 1
69952: NEG
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 2
69960: PUSH
69961: LD_INT 0
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 2
69970: PUSH
69971: LD_INT 1
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 2
69980: PUSH
69981: LD_INT 2
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 1
69990: PUSH
69991: LD_INT 2
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 0
70000: PUSH
70001: LD_INT 2
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 1
70010: NEG
70011: PUSH
70012: LD_INT 1
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 2
70021: NEG
70022: PUSH
70023: LD_INT 0
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 2
70032: NEG
70033: PUSH
70034: LD_INT 1
70036: NEG
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 2
70044: NEG
70045: PUSH
70046: LD_INT 2
70048: NEG
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70075: LD_ADDR_VAR 0 57
70079: PUSH
70080: LD_INT 0
70082: PUSH
70083: LD_INT 0
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 0
70092: PUSH
70093: LD_INT 1
70095: NEG
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 1
70103: PUSH
70104: LD_INT 0
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 1
70113: PUSH
70114: LD_INT 1
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 0
70123: PUSH
70124: LD_INT 1
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 1
70133: NEG
70134: PUSH
70135: LD_INT 0
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 1
70144: NEG
70145: PUSH
70146: LD_INT 1
70148: NEG
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 1
70156: NEG
70157: PUSH
70158: LD_INT 2
70160: NEG
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 0
70168: PUSH
70169: LD_INT 2
70171: NEG
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 1
70179: PUSH
70180: LD_INT 1
70182: NEG
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 2
70190: PUSH
70191: LD_INT 0
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 2
70200: PUSH
70201: LD_INT 1
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 2
70210: PUSH
70211: LD_INT 2
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 1
70220: PUSH
70221: LD_INT 2
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 0
70230: PUSH
70231: LD_INT 2
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 1
70240: NEG
70241: PUSH
70242: LD_INT 1
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 2
70251: NEG
70252: PUSH
70253: LD_INT 0
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 2
70262: NEG
70263: PUSH
70264: LD_INT 1
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 2
70274: NEG
70275: PUSH
70276: LD_INT 2
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70305: LD_ADDR_VAR 0 58
70309: PUSH
70310: LD_INT 0
70312: PUSH
70313: LD_INT 0
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 0
70322: PUSH
70323: LD_INT 1
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 1
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 1
70343: PUSH
70344: LD_INT 1
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 0
70353: PUSH
70354: LD_INT 1
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 1
70363: NEG
70364: PUSH
70365: LD_INT 0
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 1
70374: NEG
70375: PUSH
70376: LD_INT 1
70378: NEG
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 1
70386: NEG
70387: PUSH
70388: LD_INT 2
70390: NEG
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 0
70398: PUSH
70399: LD_INT 2
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 1
70409: PUSH
70410: LD_INT 1
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 2
70420: PUSH
70421: LD_INT 0
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 2
70430: PUSH
70431: LD_INT 1
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 2
70440: PUSH
70441: LD_INT 2
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 1
70450: PUSH
70451: LD_INT 2
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: LD_INT 2
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 1
70470: NEG
70471: PUSH
70472: LD_INT 1
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 2
70481: NEG
70482: PUSH
70483: LD_INT 0
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 2
70492: NEG
70493: PUSH
70494: LD_INT 1
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 2
70504: NEG
70505: PUSH
70506: LD_INT 2
70508: NEG
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70535: LD_ADDR_VAR 0 59
70539: PUSH
70540: LD_INT 0
70542: PUSH
70543: LD_INT 0
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 0
70552: PUSH
70553: LD_INT 1
70555: NEG
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 1
70563: PUSH
70564: LD_INT 0
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 1
70573: PUSH
70574: LD_INT 1
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 0
70583: PUSH
70584: LD_INT 1
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 1
70593: NEG
70594: PUSH
70595: LD_INT 0
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 1
70604: NEG
70605: PUSH
70606: LD_INT 1
70608: NEG
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70623: LD_ADDR_VAR 0 60
70627: PUSH
70628: LD_INT 0
70630: PUSH
70631: LD_INT 0
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: LD_INT 0
70640: PUSH
70641: LD_INT 1
70643: NEG
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: LD_INT 1
70651: PUSH
70652: LD_INT 0
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 1
70661: PUSH
70662: LD_INT 1
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 0
70671: PUSH
70672: LD_INT 1
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 1
70681: NEG
70682: PUSH
70683: LD_INT 0
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 1
70692: NEG
70693: PUSH
70694: LD_INT 1
70696: NEG
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70711: LD_ADDR_VAR 0 61
70715: PUSH
70716: LD_INT 0
70718: PUSH
70719: LD_INT 0
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 0
70728: PUSH
70729: LD_INT 1
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 1
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 1
70749: PUSH
70750: LD_INT 1
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 0
70759: PUSH
70760: LD_INT 1
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 1
70769: NEG
70770: PUSH
70771: LD_INT 0
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 1
70780: NEG
70781: PUSH
70782: LD_INT 1
70784: NEG
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70799: LD_ADDR_VAR 0 62
70803: PUSH
70804: LD_INT 0
70806: PUSH
70807: LD_INT 0
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 0
70816: PUSH
70817: LD_INT 1
70819: NEG
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 1
70827: PUSH
70828: LD_INT 0
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 1
70837: PUSH
70838: LD_INT 1
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 0
70847: PUSH
70848: LD_INT 1
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 1
70857: NEG
70858: PUSH
70859: LD_INT 0
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 1
70868: NEG
70869: PUSH
70870: LD_INT 1
70872: NEG
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70887: LD_ADDR_VAR 0 63
70891: PUSH
70892: LD_INT 0
70894: PUSH
70895: LD_INT 0
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 0
70904: PUSH
70905: LD_INT 1
70907: NEG
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 1
70915: PUSH
70916: LD_INT 0
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 1
70925: PUSH
70926: LD_INT 1
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 0
70935: PUSH
70936: LD_INT 1
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 1
70945: NEG
70946: PUSH
70947: LD_INT 0
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 1
70956: NEG
70957: PUSH
70958: LD_INT 1
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70975: LD_ADDR_VAR 0 64
70979: PUSH
70980: LD_INT 0
70982: PUSH
70983: LD_INT 0
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 0
70992: PUSH
70993: LD_INT 1
70995: NEG
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 1
71003: PUSH
71004: LD_INT 0
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 1
71013: PUSH
71014: LD_INT 1
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 0
71023: PUSH
71024: LD_INT 1
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 1
71033: NEG
71034: PUSH
71035: LD_INT 0
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 1
71044: NEG
71045: PUSH
71046: LD_INT 1
71048: NEG
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: ST_TO_ADDR
// end ; 1 :
71063: GO 76960
71065: LD_INT 1
71067: DOUBLE
71068: EQUAL
71069: IFTRUE 71073
71071: GO 73696
71073: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71074: LD_ADDR_VAR 0 11
71078: PUSH
71079: LD_INT 1
71081: NEG
71082: PUSH
71083: LD_INT 3
71085: NEG
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 0
71093: PUSH
71094: LD_INT 3
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 1
71104: PUSH
71105: LD_INT 2
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: LIST
71117: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71118: LD_ADDR_VAR 0 12
71122: PUSH
71123: LD_INT 2
71125: PUSH
71126: LD_INT 1
71128: NEG
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 3
71136: PUSH
71137: LD_INT 0
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 3
71146: PUSH
71147: LD_INT 1
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: LIST
71158: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71159: LD_ADDR_VAR 0 13
71163: PUSH
71164: LD_INT 3
71166: PUSH
71167: LD_INT 2
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 3
71176: PUSH
71177: LD_INT 3
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 2
71186: PUSH
71187: LD_INT 3
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: LIST
71198: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71199: LD_ADDR_VAR 0 14
71203: PUSH
71204: LD_INT 1
71206: PUSH
71207: LD_INT 3
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 0
71216: PUSH
71217: LD_INT 3
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 1
71226: NEG
71227: PUSH
71228: LD_INT 2
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: LIST
71239: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71240: LD_ADDR_VAR 0 15
71244: PUSH
71245: LD_INT 2
71247: NEG
71248: PUSH
71249: LD_INT 1
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: LD_INT 0
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 3
71269: NEG
71270: PUSH
71271: LD_INT 1
71273: NEG
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: LIST
71283: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71284: LD_ADDR_VAR 0 16
71288: PUSH
71289: LD_INT 2
71291: NEG
71292: PUSH
71293: LD_INT 3
71295: NEG
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 3
71303: NEG
71304: PUSH
71305: LD_INT 2
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 3
71315: NEG
71316: PUSH
71317: LD_INT 3
71319: NEG
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: LIST
71329: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71330: LD_ADDR_VAR 0 17
71334: PUSH
71335: LD_INT 1
71337: NEG
71338: PUSH
71339: LD_INT 3
71341: NEG
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 0
71349: PUSH
71350: LD_INT 3
71352: NEG
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 1
71360: PUSH
71361: LD_INT 2
71363: NEG
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: LIST
71373: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71374: LD_ADDR_VAR 0 18
71378: PUSH
71379: LD_INT 2
71381: PUSH
71382: LD_INT 1
71384: NEG
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 3
71392: PUSH
71393: LD_INT 0
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 3
71402: PUSH
71403: LD_INT 1
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: LIST
71414: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71415: LD_ADDR_VAR 0 19
71419: PUSH
71420: LD_INT 3
71422: PUSH
71423: LD_INT 2
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 3
71432: PUSH
71433: LD_INT 3
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 2
71442: PUSH
71443: LD_INT 3
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: LIST
71454: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71455: LD_ADDR_VAR 0 20
71459: PUSH
71460: LD_INT 1
71462: PUSH
71463: LD_INT 3
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 0
71472: PUSH
71473: LD_INT 3
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 1
71482: NEG
71483: PUSH
71484: LD_INT 2
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: LIST
71495: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71496: LD_ADDR_VAR 0 21
71500: PUSH
71501: LD_INT 2
71503: NEG
71504: PUSH
71505: LD_INT 1
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 3
71514: NEG
71515: PUSH
71516: LD_INT 0
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 3
71525: NEG
71526: PUSH
71527: LD_INT 1
71529: NEG
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: LIST
71539: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71540: LD_ADDR_VAR 0 22
71544: PUSH
71545: LD_INT 2
71547: NEG
71548: PUSH
71549: LD_INT 3
71551: NEG
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 3
71559: NEG
71560: PUSH
71561: LD_INT 2
71563: NEG
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 3
71571: NEG
71572: PUSH
71573: LD_INT 3
71575: NEG
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: LIST
71585: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
71586: LD_ADDR_VAR 0 23
71590: PUSH
71591: LD_INT 0
71593: PUSH
71594: LD_INT 3
71596: NEG
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PUSH
71602: LD_INT 1
71604: NEG
71605: PUSH
71606: LD_INT 4
71608: NEG
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 1
71616: PUSH
71617: LD_INT 3
71619: NEG
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: LIST
71629: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
71630: LD_ADDR_VAR 0 24
71634: PUSH
71635: LD_INT 3
71637: PUSH
71638: LD_INT 0
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 3
71647: PUSH
71648: LD_INT 1
71650: NEG
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 4
71658: PUSH
71659: LD_INT 1
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: LIST
71670: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
71671: LD_ADDR_VAR 0 25
71675: PUSH
71676: LD_INT 3
71678: PUSH
71679: LD_INT 3
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 4
71688: PUSH
71689: LD_INT 3
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 3
71698: PUSH
71699: LD_INT 4
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: LIST
71710: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
71711: LD_ADDR_VAR 0 26
71715: PUSH
71716: LD_INT 0
71718: PUSH
71719: LD_INT 3
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: LD_INT 1
71728: PUSH
71729: LD_INT 4
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 1
71738: NEG
71739: PUSH
71740: LD_INT 3
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: LIST
71751: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
71752: LD_ADDR_VAR 0 27
71756: PUSH
71757: LD_INT 3
71759: NEG
71760: PUSH
71761: LD_INT 0
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 3
71770: NEG
71771: PUSH
71772: LD_INT 1
71774: PUSH
71775: EMPTY
71776: LIST
71777: LIST
71778: PUSH
71779: LD_INT 4
71781: NEG
71782: PUSH
71783: LD_INT 1
71785: NEG
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: LIST
71795: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
71796: LD_ADDR_VAR 0 28
71800: PUSH
71801: LD_INT 3
71803: NEG
71804: PUSH
71805: LD_INT 3
71807: NEG
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 3
71815: NEG
71816: PUSH
71817: LD_INT 4
71819: NEG
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 4
71827: NEG
71828: PUSH
71829: LD_INT 3
71831: NEG
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: LIST
71841: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
71842: LD_ADDR_VAR 0 29
71846: PUSH
71847: LD_INT 1
71849: NEG
71850: PUSH
71851: LD_INT 3
71853: NEG
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 0
71861: PUSH
71862: LD_INT 3
71864: NEG
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 1
71872: PUSH
71873: LD_INT 2
71875: NEG
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 1
71883: NEG
71884: PUSH
71885: LD_INT 4
71887: NEG
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 0
71895: PUSH
71896: LD_INT 4
71898: NEG
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 1
71906: PUSH
71907: LD_INT 3
71909: NEG
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 1
71917: NEG
71918: PUSH
71919: LD_INT 5
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 0
71929: PUSH
71930: LD_INT 5
71932: NEG
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 1
71940: PUSH
71941: LD_INT 4
71943: NEG
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 1
71951: NEG
71952: PUSH
71953: LD_INT 6
71955: NEG
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: LD_INT 6
71966: NEG
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 1
71974: PUSH
71975: LD_INT 5
71977: NEG
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
71997: LD_ADDR_VAR 0 30
72001: PUSH
72002: LD_INT 2
72004: PUSH
72005: LD_INT 1
72007: NEG
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 3
72015: PUSH
72016: LD_INT 0
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 3
72025: PUSH
72026: LD_INT 1
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 3
72035: PUSH
72036: LD_INT 1
72038: NEG
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 4
72046: PUSH
72047: LD_INT 0
72049: PUSH
72050: EMPTY
72051: LIST
72052: LIST
72053: PUSH
72054: LD_INT 4
72056: PUSH
72057: LD_INT 1
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 4
72066: PUSH
72067: LD_INT 1
72069: NEG
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 5
72077: PUSH
72078: LD_INT 0
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: LD_INT 5
72087: PUSH
72088: LD_INT 1
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 5
72097: PUSH
72098: LD_INT 1
72100: NEG
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 6
72108: PUSH
72109: LD_INT 0
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 6
72118: PUSH
72119: LD_INT 1
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
72140: LD_ADDR_VAR 0 31
72144: PUSH
72145: LD_INT 3
72147: PUSH
72148: LD_INT 2
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: LD_INT 3
72157: PUSH
72158: LD_INT 3
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: PUSH
72165: LD_INT 2
72167: PUSH
72168: LD_INT 3
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 4
72177: PUSH
72178: LD_INT 3
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 4
72187: PUSH
72188: LD_INT 4
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 3
72197: PUSH
72198: LD_INT 4
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 5
72207: PUSH
72208: LD_INT 4
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 5
72217: PUSH
72218: LD_INT 5
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 4
72227: PUSH
72228: LD_INT 5
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 6
72237: PUSH
72238: LD_INT 5
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 6
72247: PUSH
72248: LD_INT 6
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 5
72257: PUSH
72258: LD_INT 6
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
72279: LD_ADDR_VAR 0 32
72283: PUSH
72284: LD_INT 1
72286: PUSH
72287: LD_INT 3
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 0
72296: PUSH
72297: LD_INT 3
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PUSH
72304: LD_INT 1
72306: NEG
72307: PUSH
72308: LD_INT 2
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 1
72317: PUSH
72318: LD_INT 4
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 0
72327: PUSH
72328: LD_INT 4
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 1
72337: NEG
72338: PUSH
72339: LD_INT 3
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 1
72348: PUSH
72349: LD_INT 5
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 0
72358: PUSH
72359: LD_INT 5
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: PUSH
72366: LD_INT 1
72368: NEG
72369: PUSH
72370: LD_INT 4
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: PUSH
72377: LD_INT 1
72379: PUSH
72380: LD_INT 6
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 0
72389: PUSH
72390: LD_INT 6
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 1
72399: NEG
72400: PUSH
72401: LD_INT 5
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: LIST
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
72422: LD_ADDR_VAR 0 33
72426: PUSH
72427: LD_INT 2
72429: NEG
72430: PUSH
72431: LD_INT 1
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PUSH
72438: LD_INT 3
72440: NEG
72441: PUSH
72442: LD_INT 0
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 3
72451: NEG
72452: PUSH
72453: LD_INT 1
72455: NEG
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 3
72463: NEG
72464: PUSH
72465: LD_INT 1
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: LD_INT 4
72474: NEG
72475: PUSH
72476: LD_INT 0
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: PUSH
72483: LD_INT 4
72485: NEG
72486: PUSH
72487: LD_INT 1
72489: NEG
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 4
72497: NEG
72498: PUSH
72499: LD_INT 1
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: LD_INT 5
72508: NEG
72509: PUSH
72510: LD_INT 0
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 5
72519: NEG
72520: PUSH
72521: LD_INT 1
72523: NEG
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 5
72531: NEG
72532: PUSH
72533: LD_INT 1
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 6
72542: NEG
72543: PUSH
72544: LD_INT 0
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 6
72553: NEG
72554: PUSH
72555: LD_INT 1
72557: NEG
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
72577: LD_ADDR_VAR 0 34
72581: PUSH
72582: LD_INT 2
72584: NEG
72585: PUSH
72586: LD_INT 3
72588: NEG
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 3
72596: NEG
72597: PUSH
72598: LD_INT 2
72600: NEG
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 3
72608: NEG
72609: PUSH
72610: LD_INT 3
72612: NEG
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 3
72620: NEG
72621: PUSH
72622: LD_INT 4
72624: NEG
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PUSH
72630: LD_INT 4
72632: NEG
72633: PUSH
72634: LD_INT 3
72636: NEG
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: PUSH
72642: LD_INT 4
72644: NEG
72645: PUSH
72646: LD_INT 4
72648: NEG
72649: PUSH
72650: EMPTY
72651: LIST
72652: LIST
72653: PUSH
72654: LD_INT 4
72656: NEG
72657: PUSH
72658: LD_INT 5
72660: NEG
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 5
72668: NEG
72669: PUSH
72670: LD_INT 4
72672: NEG
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 5
72680: NEG
72681: PUSH
72682: LD_INT 5
72684: NEG
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 5
72692: NEG
72693: PUSH
72694: LD_INT 6
72696: NEG
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: PUSH
72702: LD_INT 6
72704: NEG
72705: PUSH
72706: LD_INT 5
72708: NEG
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 6
72716: NEG
72717: PUSH
72718: LD_INT 6
72720: NEG
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
72740: LD_ADDR_VAR 0 41
72744: PUSH
72745: LD_INT 0
72747: PUSH
72748: LD_INT 2
72750: NEG
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 1
72758: NEG
72759: PUSH
72760: LD_INT 3
72762: NEG
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: PUSH
72768: LD_INT 1
72770: PUSH
72771: LD_INT 2
72773: NEG
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: LIST
72783: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
72784: LD_ADDR_VAR 0 42
72788: PUSH
72789: LD_INT 2
72791: PUSH
72792: LD_INT 0
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 2
72801: PUSH
72802: LD_INT 1
72804: NEG
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_INT 3
72812: PUSH
72813: LD_INT 1
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: LIST
72824: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
72825: LD_ADDR_VAR 0 43
72829: PUSH
72830: LD_INT 2
72832: PUSH
72833: LD_INT 2
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 3
72842: PUSH
72843: LD_INT 2
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 2
72852: PUSH
72853: LD_INT 3
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: LIST
72864: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
72865: LD_ADDR_VAR 0 44
72869: PUSH
72870: LD_INT 0
72872: PUSH
72873: LD_INT 2
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 1
72882: PUSH
72883: LD_INT 3
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 1
72892: NEG
72893: PUSH
72894: LD_INT 2
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: LIST
72905: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
72906: LD_ADDR_VAR 0 45
72910: PUSH
72911: LD_INT 2
72913: NEG
72914: PUSH
72915: LD_INT 0
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: PUSH
72922: LD_INT 2
72924: NEG
72925: PUSH
72926: LD_INT 1
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PUSH
72933: LD_INT 3
72935: NEG
72936: PUSH
72937: LD_INT 1
72939: NEG
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: LIST
72949: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
72950: LD_ADDR_VAR 0 46
72954: PUSH
72955: LD_INT 2
72957: NEG
72958: PUSH
72959: LD_INT 2
72961: NEG
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: LD_INT 2
72969: NEG
72970: PUSH
72971: LD_INT 3
72973: NEG
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PUSH
72979: LD_INT 3
72981: NEG
72982: PUSH
72983: LD_INT 2
72985: NEG
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: LIST
72995: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
72996: LD_ADDR_VAR 0 47
73000: PUSH
73001: LD_INT 2
73003: NEG
73004: PUSH
73005: LD_INT 3
73007: NEG
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 1
73015: NEG
73016: PUSH
73017: LD_INT 3
73019: NEG
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73029: LD_ADDR_VAR 0 48
73033: PUSH
73034: LD_INT 1
73036: PUSH
73037: LD_INT 2
73039: NEG
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: PUSH
73045: LD_INT 2
73047: PUSH
73048: LD_INT 1
73050: NEG
73051: PUSH
73052: EMPTY
73053: LIST
73054: LIST
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
73060: LD_ADDR_VAR 0 49
73064: PUSH
73065: LD_INT 3
73067: PUSH
73068: LD_INT 1
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 3
73077: PUSH
73078: LD_INT 2
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
73089: LD_ADDR_VAR 0 50
73093: PUSH
73094: LD_INT 2
73096: PUSH
73097: LD_INT 3
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PUSH
73104: LD_INT 1
73106: PUSH
73107: LD_INT 3
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73118: LD_ADDR_VAR 0 51
73122: PUSH
73123: LD_INT 1
73125: NEG
73126: PUSH
73127: LD_INT 2
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 2
73136: NEG
73137: PUSH
73138: LD_INT 1
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: EMPTY
73146: LIST
73147: LIST
73148: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73149: LD_ADDR_VAR 0 52
73153: PUSH
73154: LD_INT 3
73156: NEG
73157: PUSH
73158: LD_INT 1
73160: NEG
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: PUSH
73166: LD_INT 3
73168: NEG
73169: PUSH
73170: LD_INT 2
73172: NEG
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73182: LD_ADDR_VAR 0 53
73186: PUSH
73187: LD_INT 1
73189: NEG
73190: PUSH
73191: LD_INT 3
73193: NEG
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: PUSH
73199: LD_INT 0
73201: PUSH
73202: LD_INT 3
73204: NEG
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 1
73212: PUSH
73213: LD_INT 2
73215: NEG
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: LIST
73225: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73226: LD_ADDR_VAR 0 54
73230: PUSH
73231: LD_INT 2
73233: PUSH
73234: LD_INT 1
73236: NEG
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_INT 3
73244: PUSH
73245: LD_INT 0
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: LD_INT 3
73254: PUSH
73255: LD_INT 1
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: LIST
73266: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73267: LD_ADDR_VAR 0 55
73271: PUSH
73272: LD_INT 3
73274: PUSH
73275: LD_INT 2
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 3
73284: PUSH
73285: LD_INT 3
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: PUSH
73292: LD_INT 2
73294: PUSH
73295: LD_INT 3
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: LIST
73306: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73307: LD_ADDR_VAR 0 56
73311: PUSH
73312: LD_INT 1
73314: PUSH
73315: LD_INT 3
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: PUSH
73322: LD_INT 0
73324: PUSH
73325: LD_INT 3
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: LD_INT 1
73334: NEG
73335: PUSH
73336: LD_INT 2
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: LIST
73347: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73348: LD_ADDR_VAR 0 57
73352: PUSH
73353: LD_INT 2
73355: NEG
73356: PUSH
73357: LD_INT 1
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: LD_INT 3
73366: NEG
73367: PUSH
73368: LD_INT 0
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 3
73377: NEG
73378: PUSH
73379: LD_INT 1
73381: NEG
73382: PUSH
73383: EMPTY
73384: LIST
73385: LIST
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: LIST
73391: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73392: LD_ADDR_VAR 0 58
73396: PUSH
73397: LD_INT 2
73399: NEG
73400: PUSH
73401: LD_INT 3
73403: NEG
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: PUSH
73409: LD_INT 3
73411: NEG
73412: PUSH
73413: LD_INT 2
73415: NEG
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: LD_INT 3
73423: NEG
73424: PUSH
73425: LD_INT 3
73427: NEG
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: LIST
73437: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
73438: LD_ADDR_VAR 0 59
73442: PUSH
73443: LD_INT 1
73445: NEG
73446: PUSH
73447: LD_INT 2
73449: NEG
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: PUSH
73455: LD_INT 0
73457: PUSH
73458: LD_INT 2
73460: NEG
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: LD_INT 1
73468: PUSH
73469: LD_INT 1
73471: NEG
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: LIST
73481: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73482: LD_ADDR_VAR 0 60
73486: PUSH
73487: LD_INT 1
73489: PUSH
73490: LD_INT 1
73492: NEG
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: PUSH
73498: LD_INT 2
73500: PUSH
73501: LD_INT 0
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: LD_INT 2
73510: PUSH
73511: LD_INT 1
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: LIST
73522: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73523: LD_ADDR_VAR 0 61
73527: PUSH
73528: LD_INT 2
73530: PUSH
73531: LD_INT 1
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: PUSH
73538: LD_INT 2
73540: PUSH
73541: LD_INT 2
73543: PUSH
73544: EMPTY
73545: LIST
73546: LIST
73547: PUSH
73548: LD_INT 1
73550: PUSH
73551: LD_INT 2
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: LIST
73562: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73563: LD_ADDR_VAR 0 62
73567: PUSH
73568: LD_INT 1
73570: PUSH
73571: LD_INT 2
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 0
73580: PUSH
73581: LD_INT 2
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PUSH
73588: LD_INT 1
73590: NEG
73591: PUSH
73592: LD_INT 1
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: LIST
73603: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73604: LD_ADDR_VAR 0 63
73608: PUSH
73609: LD_INT 1
73611: NEG
73612: PUSH
73613: LD_INT 1
73615: PUSH
73616: EMPTY
73617: LIST
73618: LIST
73619: PUSH
73620: LD_INT 2
73622: NEG
73623: PUSH
73624: LD_INT 0
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: PUSH
73631: LD_INT 2
73633: NEG
73634: PUSH
73635: LD_INT 1
73637: NEG
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: LIST
73647: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73648: LD_ADDR_VAR 0 64
73652: PUSH
73653: LD_INT 1
73655: NEG
73656: PUSH
73657: LD_INT 2
73659: NEG
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 2
73667: NEG
73668: PUSH
73669: LD_INT 1
73671: NEG
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 2
73679: NEG
73680: PUSH
73681: LD_INT 2
73683: NEG
73684: PUSH
73685: EMPTY
73686: LIST
73687: LIST
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: LIST
73693: ST_TO_ADDR
// end ; 2 :
73694: GO 76960
73696: LD_INT 2
73698: DOUBLE
73699: EQUAL
73700: IFTRUE 73704
73702: GO 76959
73704: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
73705: LD_ADDR_VAR 0 29
73709: PUSH
73710: LD_INT 4
73712: PUSH
73713: LD_INT 0
73715: PUSH
73716: EMPTY
73717: LIST
73718: LIST
73719: PUSH
73720: LD_INT 4
73722: PUSH
73723: LD_INT 1
73725: NEG
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: PUSH
73731: LD_INT 5
73733: PUSH
73734: LD_INT 0
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: PUSH
73741: LD_INT 5
73743: PUSH
73744: LD_INT 1
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PUSH
73751: LD_INT 4
73753: PUSH
73754: LD_INT 1
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 3
73763: PUSH
73764: LD_INT 0
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: PUSH
73771: LD_INT 3
73773: PUSH
73774: LD_INT 1
73776: NEG
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: PUSH
73782: LD_INT 3
73784: PUSH
73785: LD_INT 2
73787: NEG
73788: PUSH
73789: EMPTY
73790: LIST
73791: LIST
73792: PUSH
73793: LD_INT 5
73795: PUSH
73796: LD_INT 2
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: LD_INT 3
73805: PUSH
73806: LD_INT 3
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PUSH
73813: LD_INT 3
73815: PUSH
73816: LD_INT 2
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: LD_INT 4
73825: PUSH
73826: LD_INT 3
73828: PUSH
73829: EMPTY
73830: LIST
73831: LIST
73832: PUSH
73833: LD_INT 4
73835: PUSH
73836: LD_INT 4
73838: PUSH
73839: EMPTY
73840: LIST
73841: LIST
73842: PUSH
73843: LD_INT 3
73845: PUSH
73846: LD_INT 4
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: PUSH
73853: LD_INT 2
73855: PUSH
73856: LD_INT 3
73858: PUSH
73859: EMPTY
73860: LIST
73861: LIST
73862: PUSH
73863: LD_INT 2
73865: PUSH
73866: LD_INT 2
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: PUSH
73873: LD_INT 4
73875: PUSH
73876: LD_INT 2
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: PUSH
73883: LD_INT 2
73885: PUSH
73886: LD_INT 4
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: PUSH
73893: LD_INT 0
73895: PUSH
73896: LD_INT 4
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: PUSH
73903: LD_INT 0
73905: PUSH
73906: LD_INT 3
73908: PUSH
73909: EMPTY
73910: LIST
73911: LIST
73912: PUSH
73913: LD_INT 1
73915: PUSH
73916: LD_INT 4
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PUSH
73923: LD_INT 1
73925: PUSH
73926: LD_INT 5
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: PUSH
73933: LD_INT 0
73935: PUSH
73936: LD_INT 5
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: PUSH
73943: LD_INT 1
73945: NEG
73946: PUSH
73947: LD_INT 4
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PUSH
73954: LD_INT 1
73956: NEG
73957: PUSH
73958: LD_INT 3
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: PUSH
73965: LD_INT 2
73967: PUSH
73968: LD_INT 5
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: PUSH
73975: LD_INT 2
73977: NEG
73978: PUSH
73979: LD_INT 3
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PUSH
73986: LD_INT 3
73988: NEG
73989: PUSH
73990: LD_INT 0
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PUSH
73997: LD_INT 3
73999: NEG
74000: PUSH
74001: LD_INT 1
74003: NEG
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PUSH
74009: LD_INT 2
74011: NEG
74012: PUSH
74013: LD_INT 0
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 2
74022: NEG
74023: PUSH
74024: LD_INT 1
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 3
74033: NEG
74034: PUSH
74035: LD_INT 1
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: PUSH
74042: LD_INT 4
74044: NEG
74045: PUSH
74046: LD_INT 0
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: LD_INT 4
74055: NEG
74056: PUSH
74057: LD_INT 1
74059: NEG
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 4
74067: NEG
74068: PUSH
74069: LD_INT 2
74071: NEG
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 2
74079: NEG
74080: PUSH
74081: LD_INT 2
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: LD_INT 4
74090: NEG
74091: PUSH
74092: LD_INT 4
74094: NEG
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 4
74102: NEG
74103: PUSH
74104: LD_INT 5
74106: NEG
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: PUSH
74112: LD_INT 3
74114: NEG
74115: PUSH
74116: LD_INT 4
74118: NEG
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PUSH
74124: LD_INT 3
74126: NEG
74127: PUSH
74128: LD_INT 3
74130: NEG
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PUSH
74136: LD_INT 4
74138: NEG
74139: PUSH
74140: LD_INT 3
74142: NEG
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: PUSH
74148: LD_INT 5
74150: NEG
74151: PUSH
74152: LD_INT 4
74154: NEG
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 5
74162: NEG
74163: PUSH
74164: LD_INT 5
74166: NEG
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: PUSH
74172: LD_INT 3
74174: NEG
74175: PUSH
74176: LD_INT 5
74178: NEG
74179: PUSH
74180: EMPTY
74181: LIST
74182: LIST
74183: PUSH
74184: LD_INT 5
74186: NEG
74187: PUSH
74188: LD_INT 3
74190: NEG
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: EMPTY
74197: LIST
74198: LIST
74199: LIST
74200: LIST
74201: LIST
74202: LIST
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
74243: LD_ADDR_VAR 0 30
74247: PUSH
74248: LD_INT 4
74250: PUSH
74251: LD_INT 4
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PUSH
74258: LD_INT 4
74260: PUSH
74261: LD_INT 3
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: LD_INT 5
74270: PUSH
74271: LD_INT 4
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PUSH
74278: LD_INT 5
74280: PUSH
74281: LD_INT 5
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: PUSH
74288: LD_INT 4
74290: PUSH
74291: LD_INT 5
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: PUSH
74298: LD_INT 3
74300: PUSH
74301: LD_INT 4
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: PUSH
74308: LD_INT 3
74310: PUSH
74311: LD_INT 3
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: PUSH
74318: LD_INT 5
74320: PUSH
74321: LD_INT 3
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 3
74330: PUSH
74331: LD_INT 5
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: PUSH
74338: LD_INT 0
74340: PUSH
74341: LD_INT 3
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: PUSH
74348: LD_INT 0
74350: PUSH
74351: LD_INT 2
74353: PUSH
74354: EMPTY
74355: LIST
74356: LIST
74357: PUSH
74358: LD_INT 1
74360: PUSH
74361: LD_INT 3
74363: PUSH
74364: EMPTY
74365: LIST
74366: LIST
74367: PUSH
74368: LD_INT 1
74370: PUSH
74371: LD_INT 4
74373: PUSH
74374: EMPTY
74375: LIST
74376: LIST
74377: PUSH
74378: LD_INT 0
74380: PUSH
74381: LD_INT 4
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: PUSH
74388: LD_INT 1
74390: NEG
74391: PUSH
74392: LD_INT 3
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: LD_INT 1
74401: NEG
74402: PUSH
74403: LD_INT 2
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: PUSH
74410: LD_INT 2
74412: PUSH
74413: LD_INT 4
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: PUSH
74420: LD_INT 2
74422: NEG
74423: PUSH
74424: LD_INT 2
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: PUSH
74431: LD_INT 4
74433: NEG
74434: PUSH
74435: LD_INT 0
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: LD_INT 4
74444: NEG
74445: PUSH
74446: LD_INT 1
74448: NEG
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: PUSH
74454: LD_INT 3
74456: NEG
74457: PUSH
74458: LD_INT 0
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PUSH
74465: LD_INT 3
74467: NEG
74468: PUSH
74469: LD_INT 1
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 4
74478: NEG
74479: PUSH
74480: LD_INT 1
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: PUSH
74487: LD_INT 5
74489: NEG
74490: PUSH
74491: LD_INT 0
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: PUSH
74498: LD_INT 5
74500: NEG
74501: PUSH
74502: LD_INT 1
74504: NEG
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: PUSH
74510: LD_INT 5
74512: NEG
74513: PUSH
74514: LD_INT 2
74516: NEG
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: PUSH
74522: LD_INT 3
74524: NEG
74525: PUSH
74526: LD_INT 2
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: PUSH
74533: LD_INT 3
74535: NEG
74536: PUSH
74537: LD_INT 3
74539: NEG
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 3
74547: NEG
74548: PUSH
74549: LD_INT 4
74551: NEG
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 2
74559: NEG
74560: PUSH
74561: LD_INT 3
74563: NEG
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 2
74571: NEG
74572: PUSH
74573: LD_INT 2
74575: NEG
74576: PUSH
74577: EMPTY
74578: LIST
74579: LIST
74580: PUSH
74581: LD_INT 3
74583: NEG
74584: PUSH
74585: LD_INT 2
74587: NEG
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: PUSH
74593: LD_INT 4
74595: NEG
74596: PUSH
74597: LD_INT 3
74599: NEG
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: PUSH
74605: LD_INT 4
74607: NEG
74608: PUSH
74609: LD_INT 4
74611: NEG
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: PUSH
74617: LD_INT 2
74619: NEG
74620: PUSH
74621: LD_INT 4
74623: NEG
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 4
74631: NEG
74632: PUSH
74633: LD_INT 2
74635: NEG
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PUSH
74641: LD_INT 0
74643: PUSH
74644: LD_INT 4
74646: NEG
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: PUSH
74652: LD_INT 0
74654: PUSH
74655: LD_INT 5
74657: NEG
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: LD_INT 1
74665: PUSH
74666: LD_INT 4
74668: NEG
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: PUSH
74674: LD_INT 1
74676: PUSH
74677: LD_INT 3
74679: NEG
74680: PUSH
74681: EMPTY
74682: LIST
74683: LIST
74684: PUSH
74685: LD_INT 0
74687: PUSH
74688: LD_INT 3
74690: NEG
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: PUSH
74696: LD_INT 1
74698: NEG
74699: PUSH
74700: LD_INT 4
74702: NEG
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: PUSH
74708: LD_INT 1
74710: NEG
74711: PUSH
74712: LD_INT 5
74714: NEG
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PUSH
74720: LD_INT 2
74722: PUSH
74723: LD_INT 3
74725: NEG
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: LD_INT 2
74733: NEG
74734: PUSH
74735: LD_INT 5
74737: NEG
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: LIST
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: LIST
74775: LIST
74776: LIST
74777: LIST
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: LIST
74787: LIST
74788: LIST
74789: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
74790: LD_ADDR_VAR 0 31
74794: PUSH
74795: LD_INT 0
74797: PUSH
74798: LD_INT 4
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: LD_INT 0
74807: PUSH
74808: LD_INT 3
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: LD_INT 1
74817: PUSH
74818: LD_INT 4
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: PUSH
74825: LD_INT 1
74827: PUSH
74828: LD_INT 5
74830: PUSH
74831: EMPTY
74832: LIST
74833: LIST
74834: PUSH
74835: LD_INT 0
74837: PUSH
74838: LD_INT 5
74840: PUSH
74841: EMPTY
74842: LIST
74843: LIST
74844: PUSH
74845: LD_INT 1
74847: NEG
74848: PUSH
74849: LD_INT 4
74851: PUSH
74852: EMPTY
74853: LIST
74854: LIST
74855: PUSH
74856: LD_INT 1
74858: NEG
74859: PUSH
74860: LD_INT 3
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: PUSH
74867: LD_INT 2
74869: PUSH
74870: LD_INT 5
74872: PUSH
74873: EMPTY
74874: LIST
74875: LIST
74876: PUSH
74877: LD_INT 2
74879: NEG
74880: PUSH
74881: LD_INT 3
74883: PUSH
74884: EMPTY
74885: LIST
74886: LIST
74887: PUSH
74888: LD_INT 3
74890: NEG
74891: PUSH
74892: LD_INT 0
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: PUSH
74899: LD_INT 3
74901: NEG
74902: PUSH
74903: LD_INT 1
74905: NEG
74906: PUSH
74907: EMPTY
74908: LIST
74909: LIST
74910: PUSH
74911: LD_INT 2
74913: NEG
74914: PUSH
74915: LD_INT 0
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: PUSH
74922: LD_INT 2
74924: NEG
74925: PUSH
74926: LD_INT 1
74928: PUSH
74929: EMPTY
74930: LIST
74931: LIST
74932: PUSH
74933: LD_INT 3
74935: NEG
74936: PUSH
74937: LD_INT 1
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: PUSH
74944: LD_INT 4
74946: NEG
74947: PUSH
74948: LD_INT 0
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: LD_INT 4
74957: NEG
74958: PUSH
74959: LD_INT 1
74961: NEG
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: LD_INT 4
74969: NEG
74970: PUSH
74971: LD_INT 2
74973: NEG
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: PUSH
74979: LD_INT 2
74981: NEG
74982: PUSH
74983: LD_INT 2
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: LD_INT 4
74992: NEG
74993: PUSH
74994: LD_INT 4
74996: NEG
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: PUSH
75002: LD_INT 4
75004: NEG
75005: PUSH
75006: LD_INT 5
75008: NEG
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: LD_INT 3
75016: NEG
75017: PUSH
75018: LD_INT 4
75020: NEG
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: PUSH
75026: LD_INT 3
75028: NEG
75029: PUSH
75030: LD_INT 3
75032: NEG
75033: PUSH
75034: EMPTY
75035: LIST
75036: LIST
75037: PUSH
75038: LD_INT 4
75040: NEG
75041: PUSH
75042: LD_INT 3
75044: NEG
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: PUSH
75050: LD_INT 5
75052: NEG
75053: PUSH
75054: LD_INT 4
75056: NEG
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: LD_INT 5
75064: NEG
75065: PUSH
75066: LD_INT 5
75068: NEG
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: PUSH
75074: LD_INT 3
75076: NEG
75077: PUSH
75078: LD_INT 5
75080: NEG
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: PUSH
75086: LD_INT 5
75088: NEG
75089: PUSH
75090: LD_INT 3
75092: NEG
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PUSH
75098: LD_INT 0
75100: PUSH
75101: LD_INT 3
75103: NEG
75104: PUSH
75105: EMPTY
75106: LIST
75107: LIST
75108: PUSH
75109: LD_INT 0
75111: PUSH
75112: LD_INT 4
75114: NEG
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 1
75122: PUSH
75123: LD_INT 3
75125: NEG
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: LD_INT 1
75133: PUSH
75134: LD_INT 2
75136: NEG
75137: PUSH
75138: EMPTY
75139: LIST
75140: LIST
75141: PUSH
75142: LD_INT 0
75144: PUSH
75145: LD_INT 2
75147: NEG
75148: PUSH
75149: EMPTY
75150: LIST
75151: LIST
75152: PUSH
75153: LD_INT 1
75155: NEG
75156: PUSH
75157: LD_INT 3
75159: NEG
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PUSH
75165: LD_INT 1
75167: NEG
75168: PUSH
75169: LD_INT 4
75171: NEG
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: PUSH
75177: LD_INT 2
75179: PUSH
75180: LD_INT 2
75182: NEG
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: PUSH
75188: LD_INT 2
75190: NEG
75191: PUSH
75192: LD_INT 4
75194: NEG
75195: PUSH
75196: EMPTY
75197: LIST
75198: LIST
75199: PUSH
75200: LD_INT 4
75202: PUSH
75203: LD_INT 0
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 4
75212: PUSH
75213: LD_INT 1
75215: NEG
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: LD_INT 5
75223: PUSH
75224: LD_INT 0
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 5
75233: PUSH
75234: LD_INT 1
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: PUSH
75241: LD_INT 4
75243: PUSH
75244: LD_INT 1
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PUSH
75251: LD_INT 3
75253: PUSH
75254: LD_INT 0
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PUSH
75261: LD_INT 3
75263: PUSH
75264: LD_INT 1
75266: NEG
75267: PUSH
75268: EMPTY
75269: LIST
75270: LIST
75271: PUSH
75272: LD_INT 3
75274: PUSH
75275: LD_INT 2
75277: NEG
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: LD_INT 5
75285: PUSH
75286: LD_INT 2
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: LIST
75297: LIST
75298: LIST
75299: LIST
75300: LIST
75301: LIST
75302: LIST
75303: LIST
75304: LIST
75305: LIST
75306: LIST
75307: LIST
75308: LIST
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: LIST
75314: LIST
75315: LIST
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: LIST
75336: LIST
75337: LIST
75338: LIST
75339: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
75340: LD_ADDR_VAR 0 32
75344: PUSH
75345: LD_INT 4
75347: NEG
75348: PUSH
75349: LD_INT 0
75351: PUSH
75352: EMPTY
75353: LIST
75354: LIST
75355: PUSH
75356: LD_INT 4
75358: NEG
75359: PUSH
75360: LD_INT 1
75362: NEG
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: PUSH
75368: LD_INT 3
75370: NEG
75371: PUSH
75372: LD_INT 0
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: PUSH
75379: LD_INT 3
75381: NEG
75382: PUSH
75383: LD_INT 1
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: LD_INT 4
75392: NEG
75393: PUSH
75394: LD_INT 1
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: PUSH
75401: LD_INT 5
75403: NEG
75404: PUSH
75405: LD_INT 0
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: PUSH
75412: LD_INT 5
75414: NEG
75415: PUSH
75416: LD_INT 1
75418: NEG
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: PUSH
75424: LD_INT 5
75426: NEG
75427: PUSH
75428: LD_INT 2
75430: NEG
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 3
75438: NEG
75439: PUSH
75440: LD_INT 2
75442: PUSH
75443: EMPTY
75444: LIST
75445: LIST
75446: PUSH
75447: LD_INT 3
75449: NEG
75450: PUSH
75451: LD_INT 3
75453: NEG
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: PUSH
75459: LD_INT 3
75461: NEG
75462: PUSH
75463: LD_INT 4
75465: NEG
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: PUSH
75471: LD_INT 2
75473: NEG
75474: PUSH
75475: LD_INT 3
75477: NEG
75478: PUSH
75479: EMPTY
75480: LIST
75481: LIST
75482: PUSH
75483: LD_INT 2
75485: NEG
75486: PUSH
75487: LD_INT 2
75489: NEG
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 3
75497: NEG
75498: PUSH
75499: LD_INT 2
75501: NEG
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: PUSH
75507: LD_INT 4
75509: NEG
75510: PUSH
75511: LD_INT 3
75513: NEG
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: PUSH
75519: LD_INT 4
75521: NEG
75522: PUSH
75523: LD_INT 4
75525: NEG
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: PUSH
75531: LD_INT 2
75533: NEG
75534: PUSH
75535: LD_INT 4
75537: NEG
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PUSH
75543: LD_INT 4
75545: NEG
75546: PUSH
75547: LD_INT 2
75549: NEG
75550: PUSH
75551: EMPTY
75552: LIST
75553: LIST
75554: PUSH
75555: LD_INT 0
75557: PUSH
75558: LD_INT 4
75560: NEG
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PUSH
75566: LD_INT 0
75568: PUSH
75569: LD_INT 5
75571: NEG
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: LD_INT 1
75579: PUSH
75580: LD_INT 4
75582: NEG
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: PUSH
75588: LD_INT 1
75590: PUSH
75591: LD_INT 3
75593: NEG
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: PUSH
75599: LD_INT 0
75601: PUSH
75602: LD_INT 3
75604: NEG
75605: PUSH
75606: EMPTY
75607: LIST
75608: LIST
75609: PUSH
75610: LD_INT 1
75612: NEG
75613: PUSH
75614: LD_INT 4
75616: NEG
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PUSH
75622: LD_INT 1
75624: NEG
75625: PUSH
75626: LD_INT 5
75628: NEG
75629: PUSH
75630: EMPTY
75631: LIST
75632: LIST
75633: PUSH
75634: LD_INT 2
75636: PUSH
75637: LD_INT 3
75639: NEG
75640: PUSH
75641: EMPTY
75642: LIST
75643: LIST
75644: PUSH
75645: LD_INT 2
75647: NEG
75648: PUSH
75649: LD_INT 5
75651: NEG
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: PUSH
75657: LD_INT 3
75659: PUSH
75660: LD_INT 0
75662: PUSH
75663: EMPTY
75664: LIST
75665: LIST
75666: PUSH
75667: LD_INT 3
75669: PUSH
75670: LD_INT 1
75672: NEG
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: PUSH
75678: LD_INT 4
75680: PUSH
75681: LD_INT 0
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PUSH
75688: LD_INT 4
75690: PUSH
75691: LD_INT 1
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PUSH
75698: LD_INT 3
75700: PUSH
75701: LD_INT 1
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: LD_INT 2
75710: PUSH
75711: LD_INT 0
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: LD_INT 2
75720: PUSH
75721: LD_INT 1
75723: NEG
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: PUSH
75729: LD_INT 2
75731: PUSH
75732: LD_INT 2
75734: NEG
75735: PUSH
75736: EMPTY
75737: LIST
75738: LIST
75739: PUSH
75740: LD_INT 4
75742: PUSH
75743: LD_INT 2
75745: PUSH
75746: EMPTY
75747: LIST
75748: LIST
75749: PUSH
75750: LD_INT 4
75752: PUSH
75753: LD_INT 4
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: PUSH
75760: LD_INT 4
75762: PUSH
75763: LD_INT 3
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: PUSH
75770: LD_INT 5
75772: PUSH
75773: LD_INT 4
75775: PUSH
75776: EMPTY
75777: LIST
75778: LIST
75779: PUSH
75780: LD_INT 5
75782: PUSH
75783: LD_INT 5
75785: PUSH
75786: EMPTY
75787: LIST
75788: LIST
75789: PUSH
75790: LD_INT 4
75792: PUSH
75793: LD_INT 5
75795: PUSH
75796: EMPTY
75797: LIST
75798: LIST
75799: PUSH
75800: LD_INT 3
75802: PUSH
75803: LD_INT 4
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: PUSH
75810: LD_INT 3
75812: PUSH
75813: LD_INT 3
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: PUSH
75820: LD_INT 5
75822: PUSH
75823: LD_INT 3
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: PUSH
75830: LD_INT 3
75832: PUSH
75833: LD_INT 5
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: PUSH
75840: EMPTY
75841: LIST
75842: LIST
75843: LIST
75844: LIST
75845: LIST
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: LIST
75854: LIST
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: LIST
75872: LIST
75873: LIST
75874: LIST
75875: LIST
75876: LIST
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
75887: LD_ADDR_VAR 0 33
75891: PUSH
75892: LD_INT 4
75894: NEG
75895: PUSH
75896: LD_INT 4
75898: NEG
75899: PUSH
75900: EMPTY
75901: LIST
75902: LIST
75903: PUSH
75904: LD_INT 4
75906: NEG
75907: PUSH
75908: LD_INT 5
75910: NEG
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: PUSH
75916: LD_INT 3
75918: NEG
75919: PUSH
75920: LD_INT 4
75922: NEG
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: LD_INT 3
75930: NEG
75931: PUSH
75932: LD_INT 3
75934: NEG
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: PUSH
75940: LD_INT 4
75942: NEG
75943: PUSH
75944: LD_INT 3
75946: NEG
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 5
75954: NEG
75955: PUSH
75956: LD_INT 4
75958: NEG
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: PUSH
75964: LD_INT 5
75966: NEG
75967: PUSH
75968: LD_INT 5
75970: NEG
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PUSH
75976: LD_INT 3
75978: NEG
75979: PUSH
75980: LD_INT 5
75982: NEG
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: PUSH
75988: LD_INT 5
75990: NEG
75991: PUSH
75992: LD_INT 3
75994: NEG
75995: PUSH
75996: EMPTY
75997: LIST
75998: LIST
75999: PUSH
76000: LD_INT 0
76002: PUSH
76003: LD_INT 3
76005: NEG
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: PUSH
76011: LD_INT 0
76013: PUSH
76014: LD_INT 4
76016: NEG
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: PUSH
76022: LD_INT 1
76024: PUSH
76025: LD_INT 3
76027: NEG
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: PUSH
76033: LD_INT 1
76035: PUSH
76036: LD_INT 2
76038: NEG
76039: PUSH
76040: EMPTY
76041: LIST
76042: LIST
76043: PUSH
76044: LD_INT 0
76046: PUSH
76047: LD_INT 2
76049: NEG
76050: PUSH
76051: EMPTY
76052: LIST
76053: LIST
76054: PUSH
76055: LD_INT 1
76057: NEG
76058: PUSH
76059: LD_INT 3
76061: NEG
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: PUSH
76067: LD_INT 1
76069: NEG
76070: PUSH
76071: LD_INT 4
76073: NEG
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: PUSH
76079: LD_INT 2
76081: PUSH
76082: LD_INT 2
76084: NEG
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: PUSH
76090: LD_INT 2
76092: NEG
76093: PUSH
76094: LD_INT 4
76096: NEG
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: PUSH
76102: LD_INT 4
76104: PUSH
76105: LD_INT 0
76107: PUSH
76108: EMPTY
76109: LIST
76110: LIST
76111: PUSH
76112: LD_INT 4
76114: PUSH
76115: LD_INT 1
76117: NEG
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: PUSH
76123: LD_INT 5
76125: PUSH
76126: LD_INT 0
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: PUSH
76133: LD_INT 5
76135: PUSH
76136: LD_INT 1
76138: PUSH
76139: EMPTY
76140: LIST
76141: LIST
76142: PUSH
76143: LD_INT 4
76145: PUSH
76146: LD_INT 1
76148: PUSH
76149: EMPTY
76150: LIST
76151: LIST
76152: PUSH
76153: LD_INT 3
76155: PUSH
76156: LD_INT 0
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: PUSH
76163: LD_INT 3
76165: PUSH
76166: LD_INT 1
76168: NEG
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: PUSH
76174: LD_INT 3
76176: PUSH
76177: LD_INT 2
76179: NEG
76180: PUSH
76181: EMPTY
76182: LIST
76183: LIST
76184: PUSH
76185: LD_INT 5
76187: PUSH
76188: LD_INT 2
76190: PUSH
76191: EMPTY
76192: LIST
76193: LIST
76194: PUSH
76195: LD_INT 3
76197: PUSH
76198: LD_INT 3
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PUSH
76205: LD_INT 3
76207: PUSH
76208: LD_INT 2
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: PUSH
76215: LD_INT 4
76217: PUSH
76218: LD_INT 3
76220: PUSH
76221: EMPTY
76222: LIST
76223: LIST
76224: PUSH
76225: LD_INT 4
76227: PUSH
76228: LD_INT 4
76230: PUSH
76231: EMPTY
76232: LIST
76233: LIST
76234: PUSH
76235: LD_INT 3
76237: PUSH
76238: LD_INT 4
76240: PUSH
76241: EMPTY
76242: LIST
76243: LIST
76244: PUSH
76245: LD_INT 2
76247: PUSH
76248: LD_INT 3
76250: PUSH
76251: EMPTY
76252: LIST
76253: LIST
76254: PUSH
76255: LD_INT 2
76257: PUSH
76258: LD_INT 2
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: PUSH
76265: LD_INT 4
76267: PUSH
76268: LD_INT 2
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: PUSH
76275: LD_INT 2
76277: PUSH
76278: LD_INT 4
76280: PUSH
76281: EMPTY
76282: LIST
76283: LIST
76284: PUSH
76285: LD_INT 0
76287: PUSH
76288: LD_INT 4
76290: PUSH
76291: EMPTY
76292: LIST
76293: LIST
76294: PUSH
76295: LD_INT 0
76297: PUSH
76298: LD_INT 3
76300: PUSH
76301: EMPTY
76302: LIST
76303: LIST
76304: PUSH
76305: LD_INT 1
76307: PUSH
76308: LD_INT 4
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: PUSH
76315: LD_INT 1
76317: PUSH
76318: LD_INT 5
76320: PUSH
76321: EMPTY
76322: LIST
76323: LIST
76324: PUSH
76325: LD_INT 0
76327: PUSH
76328: LD_INT 5
76330: PUSH
76331: EMPTY
76332: LIST
76333: LIST
76334: PUSH
76335: LD_INT 1
76337: NEG
76338: PUSH
76339: LD_INT 4
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PUSH
76346: LD_INT 1
76348: NEG
76349: PUSH
76350: LD_INT 3
76352: PUSH
76353: EMPTY
76354: LIST
76355: LIST
76356: PUSH
76357: LD_INT 2
76359: PUSH
76360: LD_INT 5
76362: PUSH
76363: EMPTY
76364: LIST
76365: LIST
76366: PUSH
76367: LD_INT 2
76369: NEG
76370: PUSH
76371: LD_INT 3
76373: PUSH
76374: EMPTY
76375: LIST
76376: LIST
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: LIST
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: LIST
76393: LIST
76394: LIST
76395: LIST
76396: LIST
76397: LIST
76398: LIST
76399: LIST
76400: LIST
76401: LIST
76402: LIST
76403: LIST
76404: LIST
76405: LIST
76406: LIST
76407: LIST
76408: LIST
76409: LIST
76410: LIST
76411: LIST
76412: LIST
76413: LIST
76414: LIST
76415: LIST
76416: LIST
76417: LIST
76418: LIST
76419: LIST
76420: LIST
76421: LIST
76422: LIST
76423: LIST
76424: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
76425: LD_ADDR_VAR 0 34
76429: PUSH
76430: LD_INT 0
76432: PUSH
76433: LD_INT 4
76435: NEG
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PUSH
76441: LD_INT 0
76443: PUSH
76444: LD_INT 5
76446: NEG
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: PUSH
76452: LD_INT 1
76454: PUSH
76455: LD_INT 4
76457: NEG
76458: PUSH
76459: EMPTY
76460: LIST
76461: LIST
76462: PUSH
76463: LD_INT 1
76465: PUSH
76466: LD_INT 3
76468: NEG
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: PUSH
76474: LD_INT 0
76476: PUSH
76477: LD_INT 3
76479: NEG
76480: PUSH
76481: EMPTY
76482: LIST
76483: LIST
76484: PUSH
76485: LD_INT 1
76487: NEG
76488: PUSH
76489: LD_INT 4
76491: NEG
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: PUSH
76497: LD_INT 1
76499: NEG
76500: PUSH
76501: LD_INT 5
76503: NEG
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: PUSH
76509: LD_INT 2
76511: PUSH
76512: LD_INT 3
76514: NEG
76515: PUSH
76516: EMPTY
76517: LIST
76518: LIST
76519: PUSH
76520: LD_INT 2
76522: NEG
76523: PUSH
76524: LD_INT 5
76526: NEG
76527: PUSH
76528: EMPTY
76529: LIST
76530: LIST
76531: PUSH
76532: LD_INT 3
76534: PUSH
76535: LD_INT 0
76537: PUSH
76538: EMPTY
76539: LIST
76540: LIST
76541: PUSH
76542: LD_INT 3
76544: PUSH
76545: LD_INT 1
76547: NEG
76548: PUSH
76549: EMPTY
76550: LIST
76551: LIST
76552: PUSH
76553: LD_INT 4
76555: PUSH
76556: LD_INT 0
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: PUSH
76563: LD_INT 4
76565: PUSH
76566: LD_INT 1
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: PUSH
76573: LD_INT 3
76575: PUSH
76576: LD_INT 1
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: PUSH
76583: LD_INT 2
76585: PUSH
76586: LD_INT 0
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PUSH
76593: LD_INT 2
76595: PUSH
76596: LD_INT 1
76598: NEG
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: PUSH
76604: LD_INT 2
76606: PUSH
76607: LD_INT 2
76609: NEG
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: PUSH
76615: LD_INT 4
76617: PUSH
76618: LD_INT 2
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 4
76627: PUSH
76628: LD_INT 4
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: PUSH
76635: LD_INT 4
76637: PUSH
76638: LD_INT 3
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: PUSH
76645: LD_INT 5
76647: PUSH
76648: LD_INT 4
76650: PUSH
76651: EMPTY
76652: LIST
76653: LIST
76654: PUSH
76655: LD_INT 5
76657: PUSH
76658: LD_INT 5
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: PUSH
76665: LD_INT 4
76667: PUSH
76668: LD_INT 5
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: PUSH
76675: LD_INT 3
76677: PUSH
76678: LD_INT 4
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: PUSH
76685: LD_INT 3
76687: PUSH
76688: LD_INT 3
76690: PUSH
76691: EMPTY
76692: LIST
76693: LIST
76694: PUSH
76695: LD_INT 5
76697: PUSH
76698: LD_INT 3
76700: PUSH
76701: EMPTY
76702: LIST
76703: LIST
76704: PUSH
76705: LD_INT 3
76707: PUSH
76708: LD_INT 5
76710: PUSH
76711: EMPTY
76712: LIST
76713: LIST
76714: PUSH
76715: LD_INT 0
76717: PUSH
76718: LD_INT 3
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: PUSH
76725: LD_INT 0
76727: PUSH
76728: LD_INT 2
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: PUSH
76735: LD_INT 1
76737: PUSH
76738: LD_INT 3
76740: PUSH
76741: EMPTY
76742: LIST
76743: LIST
76744: PUSH
76745: LD_INT 1
76747: PUSH
76748: LD_INT 4
76750: PUSH
76751: EMPTY
76752: LIST
76753: LIST
76754: PUSH
76755: LD_INT 0
76757: PUSH
76758: LD_INT 4
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 1
76767: NEG
76768: PUSH
76769: LD_INT 3
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 1
76778: NEG
76779: PUSH
76780: LD_INT 2
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: PUSH
76787: LD_INT 2
76789: PUSH
76790: LD_INT 4
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: PUSH
76797: LD_INT 2
76799: NEG
76800: PUSH
76801: LD_INT 2
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: PUSH
76808: LD_INT 4
76810: NEG
76811: PUSH
76812: LD_INT 0
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: PUSH
76819: LD_INT 4
76821: NEG
76822: PUSH
76823: LD_INT 1
76825: NEG
76826: PUSH
76827: EMPTY
76828: LIST
76829: LIST
76830: PUSH
76831: LD_INT 3
76833: NEG
76834: PUSH
76835: LD_INT 0
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_INT 3
76844: NEG
76845: PUSH
76846: LD_INT 1
76848: PUSH
76849: EMPTY
76850: LIST
76851: LIST
76852: PUSH
76853: LD_INT 4
76855: NEG
76856: PUSH
76857: LD_INT 1
76859: PUSH
76860: EMPTY
76861: LIST
76862: LIST
76863: PUSH
76864: LD_INT 5
76866: NEG
76867: PUSH
76868: LD_INT 0
76870: PUSH
76871: EMPTY
76872: LIST
76873: LIST
76874: PUSH
76875: LD_INT 5
76877: NEG
76878: PUSH
76879: LD_INT 1
76881: NEG
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: PUSH
76887: LD_INT 5
76889: NEG
76890: PUSH
76891: LD_INT 2
76893: NEG
76894: PUSH
76895: EMPTY
76896: LIST
76897: LIST
76898: PUSH
76899: LD_INT 3
76901: NEG
76902: PUSH
76903: LD_INT 2
76905: PUSH
76906: EMPTY
76907: LIST
76908: LIST
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: LIST
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: LIST
76922: LIST
76923: LIST
76924: LIST
76925: LIST
76926: LIST
76927: LIST
76928: LIST
76929: LIST
76930: LIST
76931: LIST
76932: LIST
76933: LIST
76934: LIST
76935: LIST
76936: LIST
76937: LIST
76938: LIST
76939: LIST
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: LIST
76948: LIST
76949: LIST
76950: LIST
76951: LIST
76952: LIST
76953: LIST
76954: LIST
76955: LIST
76956: ST_TO_ADDR
// end ; end ;
76957: GO 76960
76959: POP
// case btype of b_depot , b_warehouse :
76960: LD_VAR 0 1
76964: PUSH
76965: LD_INT 0
76967: DOUBLE
76968: EQUAL
76969: IFTRUE 76979
76971: LD_INT 1
76973: DOUBLE
76974: EQUAL
76975: IFTRUE 76979
76977: GO 77180
76979: POP
// case nation of nation_american :
76980: LD_VAR 0 5
76984: PUSH
76985: LD_INT 1
76987: DOUBLE
76988: EQUAL
76989: IFTRUE 76993
76991: GO 77049
76993: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
76994: LD_ADDR_VAR 0 9
76998: PUSH
76999: LD_VAR 0 11
77003: PUSH
77004: LD_VAR 0 12
77008: PUSH
77009: LD_VAR 0 13
77013: PUSH
77014: LD_VAR 0 14
77018: PUSH
77019: LD_VAR 0 15
77023: PUSH
77024: LD_VAR 0 16
77028: PUSH
77029: EMPTY
77030: LIST
77031: LIST
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: PUSH
77037: LD_VAR 0 4
77041: PUSH
77042: LD_INT 1
77044: PLUS
77045: ARRAY
77046: ST_TO_ADDR
77047: GO 77178
77049: LD_INT 2
77051: DOUBLE
77052: EQUAL
77053: IFTRUE 77057
77055: GO 77113
77057: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
77058: LD_ADDR_VAR 0 9
77062: PUSH
77063: LD_VAR 0 17
77067: PUSH
77068: LD_VAR 0 18
77072: PUSH
77073: LD_VAR 0 19
77077: PUSH
77078: LD_VAR 0 20
77082: PUSH
77083: LD_VAR 0 21
77087: PUSH
77088: LD_VAR 0 22
77092: PUSH
77093: EMPTY
77094: LIST
77095: LIST
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: PUSH
77101: LD_VAR 0 4
77105: PUSH
77106: LD_INT 1
77108: PLUS
77109: ARRAY
77110: ST_TO_ADDR
77111: GO 77178
77113: LD_INT 3
77115: DOUBLE
77116: EQUAL
77117: IFTRUE 77121
77119: GO 77177
77121: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
77122: LD_ADDR_VAR 0 9
77126: PUSH
77127: LD_VAR 0 23
77131: PUSH
77132: LD_VAR 0 24
77136: PUSH
77137: LD_VAR 0 25
77141: PUSH
77142: LD_VAR 0 26
77146: PUSH
77147: LD_VAR 0 27
77151: PUSH
77152: LD_VAR 0 28
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: LIST
77161: LIST
77162: LIST
77163: LIST
77164: PUSH
77165: LD_VAR 0 4
77169: PUSH
77170: LD_INT 1
77172: PLUS
77173: ARRAY
77174: ST_TO_ADDR
77175: GO 77178
77177: POP
77178: GO 77733
77180: LD_INT 2
77182: DOUBLE
77183: EQUAL
77184: IFTRUE 77194
77186: LD_INT 3
77188: DOUBLE
77189: EQUAL
77190: IFTRUE 77194
77192: GO 77250
77194: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
77195: LD_ADDR_VAR 0 9
77199: PUSH
77200: LD_VAR 0 29
77204: PUSH
77205: LD_VAR 0 30
77209: PUSH
77210: LD_VAR 0 31
77214: PUSH
77215: LD_VAR 0 32
77219: PUSH
77220: LD_VAR 0 33
77224: PUSH
77225: LD_VAR 0 34
77229: PUSH
77230: EMPTY
77231: LIST
77232: LIST
77233: LIST
77234: LIST
77235: LIST
77236: LIST
77237: PUSH
77238: LD_VAR 0 4
77242: PUSH
77243: LD_INT 1
77245: PLUS
77246: ARRAY
77247: ST_TO_ADDR
77248: GO 77733
77250: LD_INT 16
77252: DOUBLE
77253: EQUAL
77254: IFTRUE 77312
77256: LD_INT 17
77258: DOUBLE
77259: EQUAL
77260: IFTRUE 77312
77262: LD_INT 18
77264: DOUBLE
77265: EQUAL
77266: IFTRUE 77312
77268: LD_INT 19
77270: DOUBLE
77271: EQUAL
77272: IFTRUE 77312
77274: LD_INT 22
77276: DOUBLE
77277: EQUAL
77278: IFTRUE 77312
77280: LD_INT 20
77282: DOUBLE
77283: EQUAL
77284: IFTRUE 77312
77286: LD_INT 21
77288: DOUBLE
77289: EQUAL
77290: IFTRUE 77312
77292: LD_INT 23
77294: DOUBLE
77295: EQUAL
77296: IFTRUE 77312
77298: LD_INT 24
77300: DOUBLE
77301: EQUAL
77302: IFTRUE 77312
77304: LD_INT 25
77306: DOUBLE
77307: EQUAL
77308: IFTRUE 77312
77310: GO 77368
77312: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
77313: LD_ADDR_VAR 0 9
77317: PUSH
77318: LD_VAR 0 35
77322: PUSH
77323: LD_VAR 0 36
77327: PUSH
77328: LD_VAR 0 37
77332: PUSH
77333: LD_VAR 0 38
77337: PUSH
77338: LD_VAR 0 39
77342: PUSH
77343: LD_VAR 0 40
77347: PUSH
77348: EMPTY
77349: LIST
77350: LIST
77351: LIST
77352: LIST
77353: LIST
77354: LIST
77355: PUSH
77356: LD_VAR 0 4
77360: PUSH
77361: LD_INT 1
77363: PLUS
77364: ARRAY
77365: ST_TO_ADDR
77366: GO 77733
77368: LD_INT 6
77370: DOUBLE
77371: EQUAL
77372: IFTRUE 77424
77374: LD_INT 7
77376: DOUBLE
77377: EQUAL
77378: IFTRUE 77424
77380: LD_INT 8
77382: DOUBLE
77383: EQUAL
77384: IFTRUE 77424
77386: LD_INT 13
77388: DOUBLE
77389: EQUAL
77390: IFTRUE 77424
77392: LD_INT 12
77394: DOUBLE
77395: EQUAL
77396: IFTRUE 77424
77398: LD_INT 15
77400: DOUBLE
77401: EQUAL
77402: IFTRUE 77424
77404: LD_INT 11
77406: DOUBLE
77407: EQUAL
77408: IFTRUE 77424
77410: LD_INT 14
77412: DOUBLE
77413: EQUAL
77414: IFTRUE 77424
77416: LD_INT 10
77418: DOUBLE
77419: EQUAL
77420: IFTRUE 77424
77422: GO 77480
77424: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
77425: LD_ADDR_VAR 0 9
77429: PUSH
77430: LD_VAR 0 41
77434: PUSH
77435: LD_VAR 0 42
77439: PUSH
77440: LD_VAR 0 43
77444: PUSH
77445: LD_VAR 0 44
77449: PUSH
77450: LD_VAR 0 45
77454: PUSH
77455: LD_VAR 0 46
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: LIST
77464: LIST
77465: LIST
77466: LIST
77467: PUSH
77468: LD_VAR 0 4
77472: PUSH
77473: LD_INT 1
77475: PLUS
77476: ARRAY
77477: ST_TO_ADDR
77478: GO 77733
77480: LD_INT 36
77482: DOUBLE
77483: EQUAL
77484: IFTRUE 77488
77486: GO 77544
77488: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
77489: LD_ADDR_VAR 0 9
77493: PUSH
77494: LD_VAR 0 47
77498: PUSH
77499: LD_VAR 0 48
77503: PUSH
77504: LD_VAR 0 49
77508: PUSH
77509: LD_VAR 0 50
77513: PUSH
77514: LD_VAR 0 51
77518: PUSH
77519: LD_VAR 0 52
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: PUSH
77532: LD_VAR 0 4
77536: PUSH
77537: LD_INT 1
77539: PLUS
77540: ARRAY
77541: ST_TO_ADDR
77542: GO 77733
77544: LD_INT 4
77546: DOUBLE
77547: EQUAL
77548: IFTRUE 77570
77550: LD_INT 5
77552: DOUBLE
77553: EQUAL
77554: IFTRUE 77570
77556: LD_INT 34
77558: DOUBLE
77559: EQUAL
77560: IFTRUE 77570
77562: LD_INT 37
77564: DOUBLE
77565: EQUAL
77566: IFTRUE 77570
77568: GO 77626
77570: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
77571: LD_ADDR_VAR 0 9
77575: PUSH
77576: LD_VAR 0 53
77580: PUSH
77581: LD_VAR 0 54
77585: PUSH
77586: LD_VAR 0 55
77590: PUSH
77591: LD_VAR 0 56
77595: PUSH
77596: LD_VAR 0 57
77600: PUSH
77601: LD_VAR 0 58
77605: PUSH
77606: EMPTY
77607: LIST
77608: LIST
77609: LIST
77610: LIST
77611: LIST
77612: LIST
77613: PUSH
77614: LD_VAR 0 4
77618: PUSH
77619: LD_INT 1
77621: PLUS
77622: ARRAY
77623: ST_TO_ADDR
77624: GO 77733
77626: LD_INT 31
77628: DOUBLE
77629: EQUAL
77630: IFTRUE 77676
77632: LD_INT 32
77634: DOUBLE
77635: EQUAL
77636: IFTRUE 77676
77638: LD_INT 33
77640: DOUBLE
77641: EQUAL
77642: IFTRUE 77676
77644: LD_INT 27
77646: DOUBLE
77647: EQUAL
77648: IFTRUE 77676
77650: LD_INT 26
77652: DOUBLE
77653: EQUAL
77654: IFTRUE 77676
77656: LD_INT 28
77658: DOUBLE
77659: EQUAL
77660: IFTRUE 77676
77662: LD_INT 29
77664: DOUBLE
77665: EQUAL
77666: IFTRUE 77676
77668: LD_INT 30
77670: DOUBLE
77671: EQUAL
77672: IFTRUE 77676
77674: GO 77732
77676: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
77677: LD_ADDR_VAR 0 9
77681: PUSH
77682: LD_VAR 0 59
77686: PUSH
77687: LD_VAR 0 60
77691: PUSH
77692: LD_VAR 0 61
77696: PUSH
77697: LD_VAR 0 62
77701: PUSH
77702: LD_VAR 0 63
77706: PUSH
77707: LD_VAR 0 64
77711: PUSH
77712: EMPTY
77713: LIST
77714: LIST
77715: LIST
77716: LIST
77717: LIST
77718: LIST
77719: PUSH
77720: LD_VAR 0 4
77724: PUSH
77725: LD_INT 1
77727: PLUS
77728: ARRAY
77729: ST_TO_ADDR
77730: GO 77733
77732: POP
// temp_list2 = [ ] ;
77733: LD_ADDR_VAR 0 10
77737: PUSH
77738: EMPTY
77739: ST_TO_ADDR
// for i in temp_list do
77740: LD_ADDR_VAR 0 8
77744: PUSH
77745: LD_VAR 0 9
77749: PUSH
77750: FOR_IN
77751: IFFALSE 77803
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
77753: LD_ADDR_VAR 0 10
77757: PUSH
77758: LD_VAR 0 10
77762: PUSH
77763: LD_VAR 0 8
77767: PUSH
77768: LD_INT 1
77770: ARRAY
77771: PUSH
77772: LD_VAR 0 2
77776: PLUS
77777: PUSH
77778: LD_VAR 0 8
77782: PUSH
77783: LD_INT 2
77785: ARRAY
77786: PUSH
77787: LD_VAR 0 3
77791: PLUS
77792: PUSH
77793: EMPTY
77794: LIST
77795: LIST
77796: PUSH
77797: EMPTY
77798: LIST
77799: ADD
77800: ST_TO_ADDR
77801: GO 77750
77803: POP
77804: POP
// result = temp_list2 ;
77805: LD_ADDR_VAR 0 7
77809: PUSH
77810: LD_VAR 0 10
77814: ST_TO_ADDR
// end ;
77815: LD_VAR 0 7
77819: RET
// export function EnemyInRange ( unit , dist ) ; begin
77820: LD_INT 0
77822: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
77823: LD_ADDR_VAR 0 3
77827: PUSH
77828: LD_VAR 0 1
77832: PPUSH
77833: CALL_OW 255
77837: PPUSH
77838: LD_VAR 0 1
77842: PPUSH
77843: CALL_OW 250
77847: PPUSH
77848: LD_VAR 0 1
77852: PPUSH
77853: CALL_OW 251
77857: PPUSH
77858: LD_VAR 0 2
77862: PPUSH
77863: CALL 51077 0 4
77867: PUSH
77868: LD_INT 4
77870: ARRAY
77871: ST_TO_ADDR
// end ;
77872: LD_VAR 0 3
77876: RET
// export function PlayerSeeMe ( unit ) ; begin
77877: LD_INT 0
77879: PPUSH
// result := See ( your_side , unit ) ;
77880: LD_ADDR_VAR 0 2
77884: PUSH
77885: LD_OWVAR 2
77889: PPUSH
77890: LD_VAR 0 1
77894: PPUSH
77895: CALL_OW 292
77899: ST_TO_ADDR
// end ;
77900: LD_VAR 0 2
77904: RET
// export function ReverseDir ( unit ) ; begin
77905: LD_INT 0
77907: PPUSH
// if not unit then
77908: LD_VAR 0 1
77912: NOT
77913: IFFALSE 77917
// exit ;
77915: GO 77940
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
77917: LD_ADDR_VAR 0 2
77921: PUSH
77922: LD_VAR 0 1
77926: PPUSH
77927: CALL_OW 254
77931: PUSH
77932: LD_INT 3
77934: PLUS
77935: PUSH
77936: LD_INT 6
77938: MOD
77939: ST_TO_ADDR
// end ;
77940: LD_VAR 0 2
77944: RET
// export function ReverseArray ( array ) ; var i ; begin
77945: LD_INT 0
77947: PPUSH
77948: PPUSH
// if not array then
77949: LD_VAR 0 1
77953: NOT
77954: IFFALSE 77958
// exit ;
77956: GO 78013
// result := [ ] ;
77958: LD_ADDR_VAR 0 2
77962: PUSH
77963: EMPTY
77964: ST_TO_ADDR
// for i := array downto 1 do
77965: LD_ADDR_VAR 0 3
77969: PUSH
77970: DOUBLE
77971: LD_VAR 0 1
77975: INC
77976: ST_TO_ADDR
77977: LD_INT 1
77979: PUSH
77980: FOR_DOWNTO
77981: IFFALSE 78011
// result := Join ( result , array [ i ] ) ;
77983: LD_ADDR_VAR 0 2
77987: PUSH
77988: LD_VAR 0 2
77992: PPUSH
77993: LD_VAR 0 1
77997: PUSH
77998: LD_VAR 0 3
78002: ARRAY
78003: PPUSH
78004: CALL 82855 0 2
78008: ST_TO_ADDR
78009: GO 77980
78011: POP
78012: POP
// end ;
78013: LD_VAR 0 2
78017: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
78018: LD_INT 0
78020: PPUSH
78021: PPUSH
78022: PPUSH
78023: PPUSH
78024: PPUSH
78025: PPUSH
// if not unit or not hexes then
78026: LD_VAR 0 1
78030: NOT
78031: IFTRUE 78040
78033: PUSH
78034: LD_VAR 0 2
78038: NOT
78039: OR
78040: IFFALSE 78044
// exit ;
78042: GO 78167
// dist := 9999 ;
78044: LD_ADDR_VAR 0 5
78048: PUSH
78049: LD_INT 9999
78051: ST_TO_ADDR
// for i = 1 to hexes do
78052: LD_ADDR_VAR 0 4
78056: PUSH
78057: DOUBLE
78058: LD_INT 1
78060: DEC
78061: ST_TO_ADDR
78062: LD_VAR 0 2
78066: PUSH
78067: FOR_TO
78068: IFFALSE 78155
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
78070: LD_ADDR_VAR 0 6
78074: PUSH
78075: LD_VAR 0 1
78079: PPUSH
78080: LD_VAR 0 2
78084: PUSH
78085: LD_VAR 0 4
78089: ARRAY
78090: PUSH
78091: LD_INT 1
78093: ARRAY
78094: PPUSH
78095: LD_VAR 0 2
78099: PUSH
78100: LD_VAR 0 4
78104: ARRAY
78105: PUSH
78106: LD_INT 2
78108: ARRAY
78109: PPUSH
78110: CALL_OW 297
78114: ST_TO_ADDR
// if tdist < dist then
78115: LD_VAR 0 6
78119: PUSH
78120: LD_VAR 0 5
78124: LESS
78125: IFFALSE 78153
// begin hex := hexes [ i ] ;
78127: LD_ADDR_VAR 0 8
78131: PUSH
78132: LD_VAR 0 2
78136: PUSH
78137: LD_VAR 0 4
78141: ARRAY
78142: ST_TO_ADDR
// dist := tdist ;
78143: LD_ADDR_VAR 0 5
78147: PUSH
78148: LD_VAR 0 6
78152: ST_TO_ADDR
// end ; end ;
78153: GO 78067
78155: POP
78156: POP
// result := hex ;
78157: LD_ADDR_VAR 0 3
78161: PUSH
78162: LD_VAR 0 8
78166: ST_TO_ADDR
// end ;
78167: LD_VAR 0 3
78171: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
78172: LD_INT 0
78174: PPUSH
78175: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
78176: LD_VAR 0 1
78180: NOT
78181: IFTRUE 78220
78183: PUSH
78184: LD_VAR 0 1
78188: PUSH
78189: LD_INT 21
78191: PUSH
78192: LD_INT 2
78194: PUSH
78195: EMPTY
78196: LIST
78197: LIST
78198: PUSH
78199: LD_INT 23
78201: PUSH
78202: LD_INT 2
78204: PUSH
78205: EMPTY
78206: LIST
78207: LIST
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: PPUSH
78213: CALL_OW 69
78217: IN
78218: NOT
78219: OR
78220: IFFALSE 78224
// exit ;
78222: GO 78271
// for i = 1 to 3 do
78224: LD_ADDR_VAR 0 3
78228: PUSH
78229: DOUBLE
78230: LD_INT 1
78232: DEC
78233: ST_TO_ADDR
78234: LD_INT 3
78236: PUSH
78237: FOR_TO
78238: IFFALSE 78269
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
78240: LD_VAR 0 1
78244: PPUSH
78245: CALL_OW 250
78249: PPUSH
78250: LD_VAR 0 1
78254: PPUSH
78255: CALL_OW 251
78259: PPUSH
78260: LD_INT 1
78262: PPUSH
78263: CALL_OW 453
78267: GO 78237
78269: POP
78270: POP
// end ;
78271: LD_VAR 0 2
78275: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
78276: LD_INT 0
78278: PPUSH
78279: PPUSH
78280: PPUSH
78281: PPUSH
78282: PPUSH
78283: PPUSH
// if not unit or not enemy_unit then
78284: LD_VAR 0 1
78288: NOT
78289: IFTRUE 78298
78291: PUSH
78292: LD_VAR 0 2
78296: NOT
78297: OR
78298: IFFALSE 78302
// exit ;
78300: GO 78773
// if GetLives ( i ) < 250 then
78302: LD_VAR 0 4
78306: PPUSH
78307: CALL_OW 256
78311: PUSH
78312: LD_INT 250
78314: LESS
78315: IFFALSE 78328
// begin ComAutodestruct ( i ) ;
78317: LD_VAR 0 4
78321: PPUSH
78322: CALL 78172 0 1
// exit ;
78326: GO 78773
// end ; x := GetX ( enemy_unit ) ;
78328: LD_ADDR_VAR 0 7
78332: PUSH
78333: LD_VAR 0 2
78337: PPUSH
78338: CALL_OW 250
78342: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
78343: LD_ADDR_VAR 0 8
78347: PUSH
78348: LD_VAR 0 2
78352: PPUSH
78353: CALL_OW 251
78357: ST_TO_ADDR
// if not x or not y then
78358: LD_VAR 0 7
78362: NOT
78363: IFTRUE 78372
78365: PUSH
78366: LD_VAR 0 8
78370: NOT
78371: OR
78372: IFFALSE 78376
// exit ;
78374: GO 78773
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
78376: LD_ADDR_VAR 0 6
78380: PUSH
78381: LD_VAR 0 7
78385: PPUSH
78386: LD_INT 0
78388: PPUSH
78389: LD_INT 4
78391: PPUSH
78392: CALL_OW 272
78396: PUSH
78397: LD_VAR 0 8
78401: PPUSH
78402: LD_INT 0
78404: PPUSH
78405: LD_INT 4
78407: PPUSH
78408: CALL_OW 273
78412: PUSH
78413: EMPTY
78414: LIST
78415: LIST
78416: PUSH
78417: LD_VAR 0 7
78421: PPUSH
78422: LD_INT 1
78424: PPUSH
78425: LD_INT 4
78427: PPUSH
78428: CALL_OW 272
78432: PUSH
78433: LD_VAR 0 8
78437: PPUSH
78438: LD_INT 1
78440: PPUSH
78441: LD_INT 4
78443: PPUSH
78444: CALL_OW 273
78448: PUSH
78449: EMPTY
78450: LIST
78451: LIST
78452: PUSH
78453: LD_VAR 0 7
78457: PPUSH
78458: LD_INT 2
78460: PPUSH
78461: LD_INT 4
78463: PPUSH
78464: CALL_OW 272
78468: PUSH
78469: LD_VAR 0 8
78473: PPUSH
78474: LD_INT 2
78476: PPUSH
78477: LD_INT 4
78479: PPUSH
78480: CALL_OW 273
78484: PUSH
78485: EMPTY
78486: LIST
78487: LIST
78488: PUSH
78489: LD_VAR 0 7
78493: PPUSH
78494: LD_INT 3
78496: PPUSH
78497: LD_INT 4
78499: PPUSH
78500: CALL_OW 272
78504: PUSH
78505: LD_VAR 0 8
78509: PPUSH
78510: LD_INT 3
78512: PPUSH
78513: LD_INT 4
78515: PPUSH
78516: CALL_OW 273
78520: PUSH
78521: EMPTY
78522: LIST
78523: LIST
78524: PUSH
78525: LD_VAR 0 7
78529: PPUSH
78530: LD_INT 4
78532: PPUSH
78533: LD_INT 4
78535: PPUSH
78536: CALL_OW 272
78540: PUSH
78541: LD_VAR 0 8
78545: PPUSH
78546: LD_INT 4
78548: PPUSH
78549: LD_INT 4
78551: PPUSH
78552: CALL_OW 273
78556: PUSH
78557: EMPTY
78558: LIST
78559: LIST
78560: PUSH
78561: LD_VAR 0 7
78565: PPUSH
78566: LD_INT 5
78568: PPUSH
78569: LD_INT 4
78571: PPUSH
78572: CALL_OW 272
78576: PUSH
78577: LD_VAR 0 8
78581: PPUSH
78582: LD_INT 5
78584: PPUSH
78585: LD_INT 4
78587: PPUSH
78588: CALL_OW 273
78592: PUSH
78593: EMPTY
78594: LIST
78595: LIST
78596: PUSH
78597: EMPTY
78598: LIST
78599: LIST
78600: LIST
78601: LIST
78602: LIST
78603: LIST
78604: ST_TO_ADDR
// for i = tmp downto 1 do
78605: LD_ADDR_VAR 0 4
78609: PUSH
78610: DOUBLE
78611: LD_VAR 0 6
78615: INC
78616: ST_TO_ADDR
78617: LD_INT 1
78619: PUSH
78620: FOR_DOWNTO
78621: IFFALSE 78724
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
78623: LD_VAR 0 6
78627: PUSH
78628: LD_VAR 0 4
78632: ARRAY
78633: PUSH
78634: LD_INT 1
78636: ARRAY
78637: PPUSH
78638: LD_VAR 0 6
78642: PUSH
78643: LD_VAR 0 4
78647: ARRAY
78648: PUSH
78649: LD_INT 2
78651: ARRAY
78652: PPUSH
78653: CALL_OW 488
78657: NOT
78658: IFTRUE 78700
78660: PUSH
78661: LD_VAR 0 6
78665: PUSH
78666: LD_VAR 0 4
78670: ARRAY
78671: PUSH
78672: LD_INT 1
78674: ARRAY
78675: PPUSH
78676: LD_VAR 0 6
78680: PUSH
78681: LD_VAR 0 4
78685: ARRAY
78686: PUSH
78687: LD_INT 2
78689: ARRAY
78690: PPUSH
78691: CALL_OW 428
78695: PUSH
78696: LD_INT 0
78698: NONEQUAL
78699: OR
78700: IFFALSE 78722
// tmp := Delete ( tmp , i ) ;
78702: LD_ADDR_VAR 0 6
78706: PUSH
78707: LD_VAR 0 6
78711: PPUSH
78712: LD_VAR 0 4
78716: PPUSH
78717: CALL_OW 3
78721: ST_TO_ADDR
78722: GO 78620
78724: POP
78725: POP
// j := GetClosestHex ( unit , tmp ) ;
78726: LD_ADDR_VAR 0 5
78730: PUSH
78731: LD_VAR 0 1
78735: PPUSH
78736: LD_VAR 0 6
78740: PPUSH
78741: CALL 78018 0 2
78745: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
78746: LD_VAR 0 1
78750: PPUSH
78751: LD_VAR 0 5
78755: PUSH
78756: LD_INT 1
78758: ARRAY
78759: PPUSH
78760: LD_VAR 0 5
78764: PUSH
78765: LD_INT 2
78767: ARRAY
78768: PPUSH
78769: CALL_OW 111
// end ;
78773: LD_VAR 0 3
78777: RET
// export function PrepareApemanSoldier ( ) ; begin
78778: LD_INT 0
78780: PPUSH
// uc_nation := 0 ;
78781: LD_ADDR_OWVAR 21
78785: PUSH
78786: LD_INT 0
78788: ST_TO_ADDR
// hc_sex := sex_male ;
78789: LD_ADDR_OWVAR 27
78793: PUSH
78794: LD_INT 1
78796: ST_TO_ADDR
// hc_name :=  ;
78797: LD_ADDR_OWVAR 26
78801: PUSH
78802: LD_STRING 
78804: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
78805: LD_ADDR_OWVAR 28
78809: PUSH
78810: LD_INT 15
78812: ST_TO_ADDR
// hc_gallery :=  ;
78813: LD_ADDR_OWVAR 33
78817: PUSH
78818: LD_STRING 
78820: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
78821: LD_ADDR_OWVAR 31
78825: PUSH
78826: LD_INT 0
78828: PPUSH
78829: LD_INT 3
78831: PPUSH
78832: CALL_OW 12
78836: PUSH
78837: LD_INT 0
78839: PPUSH
78840: LD_INT 3
78842: PPUSH
78843: CALL_OW 12
78847: PUSH
78848: LD_INT 0
78850: PUSH
78851: LD_INT 0
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: LIST
78858: LIST
78859: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78860: LD_ADDR_OWVAR 29
78864: PUSH
78865: LD_INT 12
78867: PUSH
78868: LD_INT 12
78870: PUSH
78871: EMPTY
78872: LIST
78873: LIST
78874: ST_TO_ADDR
// end ;
78875: LD_VAR 0 1
78879: RET
// export function PrepareApemanEngineer ( ) ; begin
78880: LD_INT 0
78882: PPUSH
// uc_nation := 0 ;
78883: LD_ADDR_OWVAR 21
78887: PUSH
78888: LD_INT 0
78890: ST_TO_ADDR
// hc_sex := sex_male ;
78891: LD_ADDR_OWVAR 27
78895: PUSH
78896: LD_INT 1
78898: ST_TO_ADDR
// hc_name :=  ;
78899: LD_ADDR_OWVAR 26
78903: PUSH
78904: LD_STRING 
78906: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
78907: LD_ADDR_OWVAR 28
78911: PUSH
78912: LD_INT 16
78914: ST_TO_ADDR
// hc_gallery :=  ;
78915: LD_ADDR_OWVAR 33
78919: PUSH
78920: LD_STRING 
78922: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
78923: LD_ADDR_OWVAR 31
78927: PUSH
78928: LD_INT 0
78930: PPUSH
78931: LD_INT 3
78933: PPUSH
78934: CALL_OW 12
78938: PUSH
78939: LD_INT 0
78941: PPUSH
78942: LD_INT 3
78944: PPUSH
78945: CALL_OW 12
78949: PUSH
78950: LD_INT 0
78952: PUSH
78953: LD_INT 0
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: LIST
78960: LIST
78961: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
78962: LD_ADDR_OWVAR 29
78966: PUSH
78967: LD_INT 12
78969: PUSH
78970: LD_INT 12
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: ST_TO_ADDR
// end ;
78977: LD_VAR 0 1
78981: RET
// export function PrepareApeman ( agressivity ) ; begin
78982: LD_INT 0
78984: PPUSH
// uc_side := 0 ;
78985: LD_ADDR_OWVAR 20
78989: PUSH
78990: LD_INT 0
78992: ST_TO_ADDR
// uc_nation := 0 ;
78993: LD_ADDR_OWVAR 21
78997: PUSH
78998: LD_INT 0
79000: ST_TO_ADDR
// hc_sex := sex_male ;
79001: LD_ADDR_OWVAR 27
79005: PUSH
79006: LD_INT 1
79008: ST_TO_ADDR
// hc_class := class_apeman ;
79009: LD_ADDR_OWVAR 28
79013: PUSH
79014: LD_INT 12
79016: ST_TO_ADDR
// hc_gallery :=  ;
79017: LD_ADDR_OWVAR 33
79021: PUSH
79022: LD_STRING 
79024: ST_TO_ADDR
// hc_name :=  ;
79025: LD_ADDR_OWVAR 26
79029: PUSH
79030: LD_STRING 
79032: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79033: LD_ADDR_OWVAR 29
79037: PUSH
79038: LD_INT 12
79040: PUSH
79041: LD_INT 12
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: ST_TO_ADDR
// if agressivity = 0 then
79048: LD_VAR 0 1
79052: PUSH
79053: LD_INT 0
79055: EQUAL
79056: IFFALSE 79068
// hc_agressivity := 0 else
79058: LD_ADDR_OWVAR 35
79062: PUSH
79063: LD_INT 0
79065: ST_TO_ADDR
79066: GO 79089
// hc_agressivity := rand ( - agressivity , agressivity ) ;
79068: LD_ADDR_OWVAR 35
79072: PUSH
79073: LD_VAR 0 1
79077: NEG
79078: PPUSH
79079: LD_VAR 0 1
79083: PPUSH
79084: CALL_OW 12
79088: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
79089: LD_ADDR_OWVAR 31
79093: PUSH
79094: LD_INT 0
79096: PPUSH
79097: LD_INT 3
79099: PPUSH
79100: CALL_OW 12
79104: PUSH
79105: LD_INT 0
79107: PPUSH
79108: LD_INT 3
79110: PPUSH
79111: CALL_OW 12
79115: PUSH
79116: LD_INT 0
79118: PUSH
79119: LD_INT 0
79121: PUSH
79122: EMPTY
79123: LIST
79124: LIST
79125: LIST
79126: LIST
79127: ST_TO_ADDR
// end ;
79128: LD_VAR 0 2
79132: RET
// export function PrepareTiger ( agressivity ) ; begin
79133: LD_INT 0
79135: PPUSH
// uc_side := 0 ;
79136: LD_ADDR_OWVAR 20
79140: PUSH
79141: LD_INT 0
79143: ST_TO_ADDR
// uc_nation := 0 ;
79144: LD_ADDR_OWVAR 21
79148: PUSH
79149: LD_INT 0
79151: ST_TO_ADDR
// InitHc ;
79152: CALL_OW 19
// hc_class := class_tiger ;
79156: LD_ADDR_OWVAR 28
79160: PUSH
79161: LD_INT 14
79163: ST_TO_ADDR
// hc_gallery :=  ;
79164: LD_ADDR_OWVAR 33
79168: PUSH
79169: LD_STRING 
79171: ST_TO_ADDR
// hc_name :=  ;
79172: LD_ADDR_OWVAR 26
79176: PUSH
79177: LD_STRING 
79179: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
79180: LD_ADDR_OWVAR 35
79184: PUSH
79185: LD_VAR 0 1
79189: NEG
79190: PPUSH
79191: LD_VAR 0 1
79195: PPUSH
79196: CALL_OW 12
79200: ST_TO_ADDR
// end ;
79201: LD_VAR 0 2
79205: RET
// export function PrepareEnchidna ( ) ; begin
79206: LD_INT 0
79208: PPUSH
// uc_side := 0 ;
79209: LD_ADDR_OWVAR 20
79213: PUSH
79214: LD_INT 0
79216: ST_TO_ADDR
// uc_nation := 0 ;
79217: LD_ADDR_OWVAR 21
79221: PUSH
79222: LD_INT 0
79224: ST_TO_ADDR
// InitHc ;
79225: CALL_OW 19
// hc_class := class_baggie ;
79229: LD_ADDR_OWVAR 28
79233: PUSH
79234: LD_INT 13
79236: ST_TO_ADDR
// hc_gallery :=  ;
79237: LD_ADDR_OWVAR 33
79241: PUSH
79242: LD_STRING 
79244: ST_TO_ADDR
// hc_name :=  ;
79245: LD_ADDR_OWVAR 26
79249: PUSH
79250: LD_STRING 
79252: ST_TO_ADDR
// end ;
79253: LD_VAR 0 1
79257: RET
// export function PrepareFrog ( ) ; begin
79258: LD_INT 0
79260: PPUSH
// uc_side := 0 ;
79261: LD_ADDR_OWVAR 20
79265: PUSH
79266: LD_INT 0
79268: ST_TO_ADDR
// uc_nation := 0 ;
79269: LD_ADDR_OWVAR 21
79273: PUSH
79274: LD_INT 0
79276: ST_TO_ADDR
// InitHc ;
79277: CALL_OW 19
// hc_class := class_frog ;
79281: LD_ADDR_OWVAR 28
79285: PUSH
79286: LD_INT 19
79288: ST_TO_ADDR
// hc_gallery :=  ;
79289: LD_ADDR_OWVAR 33
79293: PUSH
79294: LD_STRING 
79296: ST_TO_ADDR
// hc_name :=  ;
79297: LD_ADDR_OWVAR 26
79301: PUSH
79302: LD_STRING 
79304: ST_TO_ADDR
// end ;
79305: LD_VAR 0 1
79309: RET
// export function PrepareFish ( ) ; begin
79310: LD_INT 0
79312: PPUSH
// uc_side := 0 ;
79313: LD_ADDR_OWVAR 20
79317: PUSH
79318: LD_INT 0
79320: ST_TO_ADDR
// uc_nation := 0 ;
79321: LD_ADDR_OWVAR 21
79325: PUSH
79326: LD_INT 0
79328: ST_TO_ADDR
// InitHc ;
79329: CALL_OW 19
// hc_class := class_fish ;
79333: LD_ADDR_OWVAR 28
79337: PUSH
79338: LD_INT 20
79340: ST_TO_ADDR
// hc_gallery :=  ;
79341: LD_ADDR_OWVAR 33
79345: PUSH
79346: LD_STRING 
79348: ST_TO_ADDR
// hc_name :=  ;
79349: LD_ADDR_OWVAR 26
79353: PUSH
79354: LD_STRING 
79356: ST_TO_ADDR
// end ;
79357: LD_VAR 0 1
79361: RET
// export function PrepareBird ( ) ; begin
79362: LD_INT 0
79364: PPUSH
// uc_side := 0 ;
79365: LD_ADDR_OWVAR 20
79369: PUSH
79370: LD_INT 0
79372: ST_TO_ADDR
// uc_nation := 0 ;
79373: LD_ADDR_OWVAR 21
79377: PUSH
79378: LD_INT 0
79380: ST_TO_ADDR
// InitHc ;
79381: CALL_OW 19
// hc_class := class_phororhacos ;
79385: LD_ADDR_OWVAR 28
79389: PUSH
79390: LD_INT 18
79392: ST_TO_ADDR
// hc_gallery :=  ;
79393: LD_ADDR_OWVAR 33
79397: PUSH
79398: LD_STRING 
79400: ST_TO_ADDR
// hc_name :=  ;
79401: LD_ADDR_OWVAR 26
79405: PUSH
79406: LD_STRING 
79408: ST_TO_ADDR
// end ;
79409: LD_VAR 0 1
79413: RET
// export function PrepareHorse ( ) ; begin
79414: LD_INT 0
79416: PPUSH
// uc_side := 0 ;
79417: LD_ADDR_OWVAR 20
79421: PUSH
79422: LD_INT 0
79424: ST_TO_ADDR
// uc_nation := 0 ;
79425: LD_ADDR_OWVAR 21
79429: PUSH
79430: LD_INT 0
79432: ST_TO_ADDR
// InitHc ;
79433: CALL_OW 19
// hc_class := class_horse ;
79437: LD_ADDR_OWVAR 28
79441: PUSH
79442: LD_INT 21
79444: ST_TO_ADDR
// hc_gallery :=  ;
79445: LD_ADDR_OWVAR 33
79449: PUSH
79450: LD_STRING 
79452: ST_TO_ADDR
// hc_name :=  ;
79453: LD_ADDR_OWVAR 26
79457: PUSH
79458: LD_STRING 
79460: ST_TO_ADDR
// end ;
79461: LD_VAR 0 1
79465: RET
// export function PrepareMastodont ( ) ; begin
79466: LD_INT 0
79468: PPUSH
// uc_side := 0 ;
79469: LD_ADDR_OWVAR 20
79473: PUSH
79474: LD_INT 0
79476: ST_TO_ADDR
// uc_nation := 0 ;
79477: LD_ADDR_OWVAR 21
79481: PUSH
79482: LD_INT 0
79484: ST_TO_ADDR
// vc_chassis := class_mastodont ;
79485: LD_ADDR_OWVAR 37
79489: PUSH
79490: LD_INT 31
79492: ST_TO_ADDR
// vc_control := control_rider ;
79493: LD_ADDR_OWVAR 38
79497: PUSH
79498: LD_INT 4
79500: ST_TO_ADDR
// end ;
79501: LD_VAR 0 1
79505: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
79506: LD_INT 0
79508: PPUSH
79509: PPUSH
79510: PPUSH
// uc_side = 0 ;
79511: LD_ADDR_OWVAR 20
79515: PUSH
79516: LD_INT 0
79518: ST_TO_ADDR
// uc_nation = 0 ;
79519: LD_ADDR_OWVAR 21
79523: PUSH
79524: LD_INT 0
79526: ST_TO_ADDR
// InitHc_All ( ) ;
79527: CALL_OW 584
// InitVc ;
79531: CALL_OW 20
// if mastodonts then
79535: LD_VAR 0 6
79539: IFFALSE 79606
// for i = 1 to mastodonts do
79541: LD_ADDR_VAR 0 11
79545: PUSH
79546: DOUBLE
79547: LD_INT 1
79549: DEC
79550: ST_TO_ADDR
79551: LD_VAR 0 6
79555: PUSH
79556: FOR_TO
79557: IFFALSE 79604
// begin vc_chassis := 31 ;
79559: LD_ADDR_OWVAR 37
79563: PUSH
79564: LD_INT 31
79566: ST_TO_ADDR
// vc_control := control_rider ;
79567: LD_ADDR_OWVAR 38
79571: PUSH
79572: LD_INT 4
79574: ST_TO_ADDR
// animal := CreateVehicle ;
79575: LD_ADDR_VAR 0 12
79579: PUSH
79580: CALL_OW 45
79584: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79585: LD_VAR 0 12
79589: PPUSH
79590: LD_VAR 0 8
79594: PPUSH
79595: LD_INT 0
79597: PPUSH
79598: CALL 81748 0 3
// end ;
79602: GO 79556
79604: POP
79605: POP
// if horses then
79606: LD_VAR 0 5
79610: IFFALSE 79677
// for i = 1 to horses do
79612: LD_ADDR_VAR 0 11
79616: PUSH
79617: DOUBLE
79618: LD_INT 1
79620: DEC
79621: ST_TO_ADDR
79622: LD_VAR 0 5
79626: PUSH
79627: FOR_TO
79628: IFFALSE 79675
// begin hc_class := 21 ;
79630: LD_ADDR_OWVAR 28
79634: PUSH
79635: LD_INT 21
79637: ST_TO_ADDR
// hc_gallery :=  ;
79638: LD_ADDR_OWVAR 33
79642: PUSH
79643: LD_STRING 
79645: ST_TO_ADDR
// animal := CreateHuman ;
79646: LD_ADDR_VAR 0 12
79650: PUSH
79651: CALL_OW 44
79655: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79656: LD_VAR 0 12
79660: PPUSH
79661: LD_VAR 0 8
79665: PPUSH
79666: LD_INT 0
79668: PPUSH
79669: CALL 81748 0 3
// end ;
79673: GO 79627
79675: POP
79676: POP
// if birds then
79677: LD_VAR 0 1
79681: IFFALSE 79748
// for i = 1 to birds do
79683: LD_ADDR_VAR 0 11
79687: PUSH
79688: DOUBLE
79689: LD_INT 1
79691: DEC
79692: ST_TO_ADDR
79693: LD_VAR 0 1
79697: PUSH
79698: FOR_TO
79699: IFFALSE 79746
// begin hc_class := 18 ;
79701: LD_ADDR_OWVAR 28
79705: PUSH
79706: LD_INT 18
79708: ST_TO_ADDR
// hc_gallery =  ;
79709: LD_ADDR_OWVAR 33
79713: PUSH
79714: LD_STRING 
79716: ST_TO_ADDR
// animal := CreateHuman ;
79717: LD_ADDR_VAR 0 12
79721: PUSH
79722: CALL_OW 44
79726: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79727: LD_VAR 0 12
79731: PPUSH
79732: LD_VAR 0 8
79736: PPUSH
79737: LD_INT 0
79739: PPUSH
79740: CALL 81748 0 3
// end ;
79744: GO 79698
79746: POP
79747: POP
// if tigers then
79748: LD_VAR 0 2
79752: IFFALSE 79836
// for i = 1 to tigers do
79754: LD_ADDR_VAR 0 11
79758: PUSH
79759: DOUBLE
79760: LD_INT 1
79762: DEC
79763: ST_TO_ADDR
79764: LD_VAR 0 2
79768: PUSH
79769: FOR_TO
79770: IFFALSE 79834
// begin hc_class = class_tiger ;
79772: LD_ADDR_OWVAR 28
79776: PUSH
79777: LD_INT 14
79779: ST_TO_ADDR
// hc_gallery =  ;
79780: LD_ADDR_OWVAR 33
79784: PUSH
79785: LD_STRING 
79787: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
79788: LD_ADDR_OWVAR 35
79792: PUSH
79793: LD_INT 7
79795: NEG
79796: PPUSH
79797: LD_INT 7
79799: PPUSH
79800: CALL_OW 12
79804: ST_TO_ADDR
// animal := CreateHuman ;
79805: LD_ADDR_VAR 0 12
79809: PUSH
79810: CALL_OW 44
79814: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79815: LD_VAR 0 12
79819: PPUSH
79820: LD_VAR 0 8
79824: PPUSH
79825: LD_INT 0
79827: PPUSH
79828: CALL 81748 0 3
// end ;
79832: GO 79769
79834: POP
79835: POP
// if apemans then
79836: LD_VAR 0 3
79840: IFFALSE 79963
// for i = 1 to apemans do
79842: LD_ADDR_VAR 0 11
79846: PUSH
79847: DOUBLE
79848: LD_INT 1
79850: DEC
79851: ST_TO_ADDR
79852: LD_VAR 0 3
79856: PUSH
79857: FOR_TO
79858: IFFALSE 79961
// begin hc_class = class_apeman ;
79860: LD_ADDR_OWVAR 28
79864: PUSH
79865: LD_INT 12
79867: ST_TO_ADDR
// hc_gallery =  ;
79868: LD_ADDR_OWVAR 33
79872: PUSH
79873: LD_STRING 
79875: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
79876: LD_ADDR_OWVAR 35
79880: PUSH
79881: LD_INT 2
79883: NEG
79884: PPUSH
79885: LD_INT 2
79887: PPUSH
79888: CALL_OW 12
79892: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
79893: LD_ADDR_OWVAR 31
79897: PUSH
79898: LD_INT 1
79900: PPUSH
79901: LD_INT 3
79903: PPUSH
79904: CALL_OW 12
79908: PUSH
79909: LD_INT 1
79911: PPUSH
79912: LD_INT 3
79914: PPUSH
79915: CALL_OW 12
79919: PUSH
79920: LD_INT 0
79922: PUSH
79923: LD_INT 0
79925: PUSH
79926: EMPTY
79927: LIST
79928: LIST
79929: LIST
79930: LIST
79931: ST_TO_ADDR
// animal := CreateHuman ;
79932: LD_ADDR_VAR 0 12
79936: PUSH
79937: CALL_OW 44
79941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79942: LD_VAR 0 12
79946: PPUSH
79947: LD_VAR 0 8
79951: PPUSH
79952: LD_INT 0
79954: PPUSH
79955: CALL 81748 0 3
// end ;
79959: GO 79857
79961: POP
79962: POP
// if enchidnas then
79963: LD_VAR 0 4
79967: IFFALSE 80034
// for i = 1 to enchidnas do
79969: LD_ADDR_VAR 0 11
79973: PUSH
79974: DOUBLE
79975: LD_INT 1
79977: DEC
79978: ST_TO_ADDR
79979: LD_VAR 0 4
79983: PUSH
79984: FOR_TO
79985: IFFALSE 80032
// begin hc_class = 13 ;
79987: LD_ADDR_OWVAR 28
79991: PUSH
79992: LD_INT 13
79994: ST_TO_ADDR
// hc_gallery =  ;
79995: LD_ADDR_OWVAR 33
79999: PUSH
80000: LD_STRING 
80002: ST_TO_ADDR
// animal := CreateHuman ;
80003: LD_ADDR_VAR 0 12
80007: PUSH
80008: CALL_OW 44
80012: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80013: LD_VAR 0 12
80017: PPUSH
80018: LD_VAR 0 8
80022: PPUSH
80023: LD_INT 0
80025: PPUSH
80026: CALL 81748 0 3
// end ;
80030: GO 79984
80032: POP
80033: POP
// if fishes then
80034: LD_VAR 0 7
80038: IFFALSE 80105
// for i = 1 to fishes do
80040: LD_ADDR_VAR 0 11
80044: PUSH
80045: DOUBLE
80046: LD_INT 1
80048: DEC
80049: ST_TO_ADDR
80050: LD_VAR 0 7
80054: PUSH
80055: FOR_TO
80056: IFFALSE 80103
// begin hc_class = 20 ;
80058: LD_ADDR_OWVAR 28
80062: PUSH
80063: LD_INT 20
80065: ST_TO_ADDR
// hc_gallery =  ;
80066: LD_ADDR_OWVAR 33
80070: PUSH
80071: LD_STRING 
80073: ST_TO_ADDR
// animal := CreateHuman ;
80074: LD_ADDR_VAR 0 12
80078: PUSH
80079: CALL_OW 44
80083: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
80084: LD_VAR 0 12
80088: PPUSH
80089: LD_VAR 0 9
80093: PPUSH
80094: LD_INT 0
80096: PPUSH
80097: CALL 81748 0 3
// end ;
80101: GO 80055
80103: POP
80104: POP
// end ;
80105: LD_VAR 0 10
80109: RET
// export function WantHeal ( sci , unit ) ; begin
80110: LD_INT 0
80112: PPUSH
// if GetTaskList ( sci ) > 0 then
80113: LD_VAR 0 1
80117: PPUSH
80118: CALL_OW 437
80122: PUSH
80123: LD_INT 0
80125: GREATER
80126: IFFALSE 80198
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
80128: LD_VAR 0 1
80132: PPUSH
80133: CALL_OW 437
80137: PUSH
80138: LD_INT 1
80140: ARRAY
80141: PUSH
80142: LD_INT 1
80144: ARRAY
80145: PUSH
80146: LD_STRING l
80148: EQUAL
80149: IFFALSE 80176
80151: PUSH
80152: LD_VAR 0 1
80156: PPUSH
80157: CALL_OW 437
80161: PUSH
80162: LD_INT 1
80164: ARRAY
80165: PUSH
80166: LD_INT 4
80168: ARRAY
80169: PUSH
80170: LD_VAR 0 2
80174: EQUAL
80175: AND
80176: IFFALSE 80188
// result := true else
80178: LD_ADDR_VAR 0 3
80182: PUSH
80183: LD_INT 1
80185: ST_TO_ADDR
80186: GO 80196
// result := false ;
80188: LD_ADDR_VAR 0 3
80192: PUSH
80193: LD_INT 0
80195: ST_TO_ADDR
// end else
80196: GO 80206
// result := false ;
80198: LD_ADDR_VAR 0 3
80202: PUSH
80203: LD_INT 0
80205: ST_TO_ADDR
// end ;
80206: LD_VAR 0 3
80210: RET
// export function HealTarget ( sci ) ; begin
80211: LD_INT 0
80213: PPUSH
// if not sci then
80214: LD_VAR 0 1
80218: NOT
80219: IFFALSE 80223
// exit ;
80221: GO 80288
// result := 0 ;
80223: LD_ADDR_VAR 0 2
80227: PUSH
80228: LD_INT 0
80230: ST_TO_ADDR
// if GetTaskList ( sci ) then
80231: LD_VAR 0 1
80235: PPUSH
80236: CALL_OW 437
80240: IFFALSE 80288
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
80242: LD_VAR 0 1
80246: PPUSH
80247: CALL_OW 437
80251: PUSH
80252: LD_INT 1
80254: ARRAY
80255: PUSH
80256: LD_INT 1
80258: ARRAY
80259: PUSH
80260: LD_STRING l
80262: EQUAL
80263: IFFALSE 80288
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
80265: LD_ADDR_VAR 0 2
80269: PUSH
80270: LD_VAR 0 1
80274: PPUSH
80275: CALL_OW 437
80279: PUSH
80280: LD_INT 1
80282: ARRAY
80283: PUSH
80284: LD_INT 4
80286: ARRAY
80287: ST_TO_ADDR
// end ;
80288: LD_VAR 0 2
80292: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
80293: LD_INT 0
80295: PPUSH
80296: PPUSH
80297: PPUSH
80298: PPUSH
// if not base_units then
80299: LD_VAR 0 1
80303: NOT
80304: IFFALSE 80308
// exit ;
80306: GO 80395
// result := false ;
80308: LD_ADDR_VAR 0 2
80312: PUSH
80313: LD_INT 0
80315: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
80316: LD_ADDR_VAR 0 5
80320: PUSH
80321: LD_VAR 0 1
80325: PPUSH
80326: LD_INT 21
80328: PUSH
80329: LD_INT 3
80331: PUSH
80332: EMPTY
80333: LIST
80334: LIST
80335: PPUSH
80336: CALL_OW 72
80340: ST_TO_ADDR
// if not tmp then
80341: LD_VAR 0 5
80345: NOT
80346: IFFALSE 80350
// exit ;
80348: GO 80395
// for i in tmp do
80350: LD_ADDR_VAR 0 3
80354: PUSH
80355: LD_VAR 0 5
80359: PUSH
80360: FOR_IN
80361: IFFALSE 80393
// begin result := EnemyInRange ( i , 22 ) ;
80363: LD_ADDR_VAR 0 2
80367: PUSH
80368: LD_VAR 0 3
80372: PPUSH
80373: LD_INT 22
80375: PPUSH
80376: CALL 77820 0 2
80380: ST_TO_ADDR
// if result then
80381: LD_VAR 0 2
80385: IFFALSE 80391
// exit ;
80387: POP
80388: POP
80389: GO 80395
// end ;
80391: GO 80360
80393: POP
80394: POP
// end ;
80395: LD_VAR 0 2
80399: RET
// export function FilterByTag ( units , tag ) ; begin
80400: LD_INT 0
80402: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
80403: LD_ADDR_VAR 0 3
80407: PUSH
80408: LD_VAR 0 1
80412: PPUSH
80413: LD_INT 120
80415: PUSH
80416: LD_VAR 0 2
80420: PUSH
80421: EMPTY
80422: LIST
80423: LIST
80424: PPUSH
80425: CALL_OW 72
80429: ST_TO_ADDR
// end ;
80430: LD_VAR 0 3
80434: RET
// export function IsDriver ( un ) ; begin
80435: LD_INT 0
80437: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
80438: LD_ADDR_VAR 0 2
80442: PUSH
80443: LD_VAR 0 1
80447: PUSH
80448: LD_INT 55
80450: PUSH
80451: EMPTY
80452: LIST
80453: PPUSH
80454: CALL_OW 69
80458: IN
80459: ST_TO_ADDR
// end ;
80460: LD_VAR 0 2
80464: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
80465: LD_INT 0
80467: PPUSH
80468: PPUSH
// list := [ ] ;
80469: LD_ADDR_VAR 0 5
80473: PUSH
80474: EMPTY
80475: ST_TO_ADDR
// case d of 0 :
80476: LD_VAR 0 3
80480: PUSH
80481: LD_INT 0
80483: DOUBLE
80484: EQUAL
80485: IFTRUE 80489
80487: GO 80622
80489: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
80490: LD_ADDR_VAR 0 5
80494: PUSH
80495: LD_VAR 0 1
80499: PUSH
80500: LD_INT 4
80502: MINUS
80503: PUSH
80504: LD_VAR 0 2
80508: PUSH
80509: LD_INT 4
80511: MINUS
80512: PUSH
80513: LD_INT 2
80515: PUSH
80516: EMPTY
80517: LIST
80518: LIST
80519: LIST
80520: PUSH
80521: LD_VAR 0 1
80525: PUSH
80526: LD_INT 3
80528: MINUS
80529: PUSH
80530: LD_VAR 0 2
80534: PUSH
80535: LD_INT 1
80537: PUSH
80538: EMPTY
80539: LIST
80540: LIST
80541: LIST
80542: PUSH
80543: LD_VAR 0 1
80547: PUSH
80548: LD_INT 4
80550: PLUS
80551: PUSH
80552: LD_VAR 0 2
80556: PUSH
80557: LD_INT 4
80559: PUSH
80560: EMPTY
80561: LIST
80562: LIST
80563: LIST
80564: PUSH
80565: LD_VAR 0 1
80569: PUSH
80570: LD_INT 3
80572: PLUS
80573: PUSH
80574: LD_VAR 0 2
80578: PUSH
80579: LD_INT 3
80581: PLUS
80582: PUSH
80583: LD_INT 5
80585: PUSH
80586: EMPTY
80587: LIST
80588: LIST
80589: LIST
80590: PUSH
80591: LD_VAR 0 1
80595: PUSH
80596: LD_VAR 0 2
80600: PUSH
80601: LD_INT 4
80603: PLUS
80604: PUSH
80605: LD_INT 0
80607: PUSH
80608: EMPTY
80609: LIST
80610: LIST
80611: LIST
80612: PUSH
80613: EMPTY
80614: LIST
80615: LIST
80616: LIST
80617: LIST
80618: LIST
80619: ST_TO_ADDR
// end ; 1 :
80620: GO 81320
80622: LD_INT 1
80624: DOUBLE
80625: EQUAL
80626: IFTRUE 80630
80628: GO 80763
80630: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
80631: LD_ADDR_VAR 0 5
80635: PUSH
80636: LD_VAR 0 1
80640: PUSH
80641: LD_VAR 0 2
80645: PUSH
80646: LD_INT 4
80648: MINUS
80649: PUSH
80650: LD_INT 3
80652: PUSH
80653: EMPTY
80654: LIST
80655: LIST
80656: LIST
80657: PUSH
80658: LD_VAR 0 1
80662: PUSH
80663: LD_INT 3
80665: MINUS
80666: PUSH
80667: LD_VAR 0 2
80671: PUSH
80672: LD_INT 3
80674: MINUS
80675: PUSH
80676: LD_INT 2
80678: PUSH
80679: EMPTY
80680: LIST
80681: LIST
80682: LIST
80683: PUSH
80684: LD_VAR 0 1
80688: PUSH
80689: LD_INT 4
80691: MINUS
80692: PUSH
80693: LD_VAR 0 2
80697: PUSH
80698: LD_INT 1
80700: PUSH
80701: EMPTY
80702: LIST
80703: LIST
80704: LIST
80705: PUSH
80706: LD_VAR 0 1
80710: PUSH
80711: LD_VAR 0 2
80715: PUSH
80716: LD_INT 3
80718: PLUS
80719: PUSH
80720: LD_INT 0
80722: PUSH
80723: EMPTY
80724: LIST
80725: LIST
80726: LIST
80727: PUSH
80728: LD_VAR 0 1
80732: PUSH
80733: LD_INT 4
80735: PLUS
80736: PUSH
80737: LD_VAR 0 2
80741: PUSH
80742: LD_INT 4
80744: PLUS
80745: PUSH
80746: LD_INT 5
80748: PUSH
80749: EMPTY
80750: LIST
80751: LIST
80752: LIST
80753: PUSH
80754: EMPTY
80755: LIST
80756: LIST
80757: LIST
80758: LIST
80759: LIST
80760: ST_TO_ADDR
// end ; 2 :
80761: GO 81320
80763: LD_INT 2
80765: DOUBLE
80766: EQUAL
80767: IFTRUE 80771
80769: GO 80900
80771: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
80772: LD_ADDR_VAR 0 5
80776: PUSH
80777: LD_VAR 0 1
80781: PUSH
80782: LD_VAR 0 2
80786: PUSH
80787: LD_INT 3
80789: MINUS
80790: PUSH
80791: LD_INT 3
80793: PUSH
80794: EMPTY
80795: LIST
80796: LIST
80797: LIST
80798: PUSH
80799: LD_VAR 0 1
80803: PUSH
80804: LD_INT 4
80806: PLUS
80807: PUSH
80808: LD_VAR 0 2
80812: PUSH
80813: LD_INT 4
80815: PUSH
80816: EMPTY
80817: LIST
80818: LIST
80819: LIST
80820: PUSH
80821: LD_VAR 0 1
80825: PUSH
80826: LD_VAR 0 2
80830: PUSH
80831: LD_INT 4
80833: PLUS
80834: PUSH
80835: LD_INT 0
80837: PUSH
80838: EMPTY
80839: LIST
80840: LIST
80841: LIST
80842: PUSH
80843: LD_VAR 0 1
80847: PUSH
80848: LD_INT 3
80850: MINUS
80851: PUSH
80852: LD_VAR 0 2
80856: PUSH
80857: LD_INT 1
80859: PUSH
80860: EMPTY
80861: LIST
80862: LIST
80863: LIST
80864: PUSH
80865: LD_VAR 0 1
80869: PUSH
80870: LD_INT 4
80872: MINUS
80873: PUSH
80874: LD_VAR 0 2
80878: PUSH
80879: LD_INT 4
80881: MINUS
80882: PUSH
80883: LD_INT 2
80885: PUSH
80886: EMPTY
80887: LIST
80888: LIST
80889: LIST
80890: PUSH
80891: EMPTY
80892: LIST
80893: LIST
80894: LIST
80895: LIST
80896: LIST
80897: ST_TO_ADDR
// end ; 3 :
80898: GO 81320
80900: LD_INT 3
80902: DOUBLE
80903: EQUAL
80904: IFTRUE 80908
80906: GO 81041
80908: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
80909: LD_ADDR_VAR 0 5
80913: PUSH
80914: LD_VAR 0 1
80918: PUSH
80919: LD_INT 3
80921: PLUS
80922: PUSH
80923: LD_VAR 0 2
80927: PUSH
80928: LD_INT 4
80930: PUSH
80931: EMPTY
80932: LIST
80933: LIST
80934: LIST
80935: PUSH
80936: LD_VAR 0 1
80940: PUSH
80941: LD_INT 4
80943: PLUS
80944: PUSH
80945: LD_VAR 0 2
80949: PUSH
80950: LD_INT 4
80952: PLUS
80953: PUSH
80954: LD_INT 5
80956: PUSH
80957: EMPTY
80958: LIST
80959: LIST
80960: LIST
80961: PUSH
80962: LD_VAR 0 1
80966: PUSH
80967: LD_INT 4
80969: MINUS
80970: PUSH
80971: LD_VAR 0 2
80975: PUSH
80976: LD_INT 1
80978: PUSH
80979: EMPTY
80980: LIST
80981: LIST
80982: LIST
80983: PUSH
80984: LD_VAR 0 1
80988: PUSH
80989: LD_VAR 0 2
80993: PUSH
80994: LD_INT 4
80996: MINUS
80997: PUSH
80998: LD_INT 3
81000: PUSH
81001: EMPTY
81002: LIST
81003: LIST
81004: LIST
81005: PUSH
81006: LD_VAR 0 1
81010: PUSH
81011: LD_INT 3
81013: MINUS
81014: PUSH
81015: LD_VAR 0 2
81019: PUSH
81020: LD_INT 3
81022: MINUS
81023: PUSH
81024: LD_INT 2
81026: PUSH
81027: EMPTY
81028: LIST
81029: LIST
81030: LIST
81031: PUSH
81032: EMPTY
81033: LIST
81034: LIST
81035: LIST
81036: LIST
81037: LIST
81038: ST_TO_ADDR
// end ; 4 :
81039: GO 81320
81041: LD_INT 4
81043: DOUBLE
81044: EQUAL
81045: IFTRUE 81049
81047: GO 81182
81049: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
81050: LD_ADDR_VAR 0 5
81054: PUSH
81055: LD_VAR 0 1
81059: PUSH
81060: LD_VAR 0 2
81064: PUSH
81065: LD_INT 4
81067: PLUS
81068: PUSH
81069: LD_INT 0
81071: PUSH
81072: EMPTY
81073: LIST
81074: LIST
81075: LIST
81076: PUSH
81077: LD_VAR 0 1
81081: PUSH
81082: LD_INT 3
81084: PLUS
81085: PUSH
81086: LD_VAR 0 2
81090: PUSH
81091: LD_INT 3
81093: PLUS
81094: PUSH
81095: LD_INT 5
81097: PUSH
81098: EMPTY
81099: LIST
81100: LIST
81101: LIST
81102: PUSH
81103: LD_VAR 0 1
81107: PUSH
81108: LD_INT 4
81110: PLUS
81111: PUSH
81112: LD_VAR 0 2
81116: PUSH
81117: LD_INT 4
81119: PUSH
81120: EMPTY
81121: LIST
81122: LIST
81123: LIST
81124: PUSH
81125: LD_VAR 0 1
81129: PUSH
81130: LD_VAR 0 2
81134: PUSH
81135: LD_INT 3
81137: MINUS
81138: PUSH
81139: LD_INT 3
81141: PUSH
81142: EMPTY
81143: LIST
81144: LIST
81145: LIST
81146: PUSH
81147: LD_VAR 0 1
81151: PUSH
81152: LD_INT 4
81154: MINUS
81155: PUSH
81156: LD_VAR 0 2
81160: PUSH
81161: LD_INT 4
81163: MINUS
81164: PUSH
81165: LD_INT 2
81167: PUSH
81168: EMPTY
81169: LIST
81170: LIST
81171: LIST
81172: PUSH
81173: EMPTY
81174: LIST
81175: LIST
81176: LIST
81177: LIST
81178: LIST
81179: ST_TO_ADDR
// end ; 5 :
81180: GO 81320
81182: LD_INT 5
81184: DOUBLE
81185: EQUAL
81186: IFTRUE 81190
81188: GO 81319
81190: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
81191: LD_ADDR_VAR 0 5
81195: PUSH
81196: LD_VAR 0 1
81200: PUSH
81201: LD_INT 4
81203: MINUS
81204: PUSH
81205: LD_VAR 0 2
81209: PUSH
81210: LD_INT 1
81212: PUSH
81213: EMPTY
81214: LIST
81215: LIST
81216: LIST
81217: PUSH
81218: LD_VAR 0 1
81222: PUSH
81223: LD_VAR 0 2
81227: PUSH
81228: LD_INT 4
81230: MINUS
81231: PUSH
81232: LD_INT 3
81234: PUSH
81235: EMPTY
81236: LIST
81237: LIST
81238: LIST
81239: PUSH
81240: LD_VAR 0 1
81244: PUSH
81245: LD_INT 4
81247: PLUS
81248: PUSH
81249: LD_VAR 0 2
81253: PUSH
81254: LD_INT 4
81256: PLUS
81257: PUSH
81258: LD_INT 5
81260: PUSH
81261: EMPTY
81262: LIST
81263: LIST
81264: LIST
81265: PUSH
81266: LD_VAR 0 1
81270: PUSH
81271: LD_INT 3
81273: PLUS
81274: PUSH
81275: LD_VAR 0 2
81279: PUSH
81280: LD_INT 4
81282: PUSH
81283: EMPTY
81284: LIST
81285: LIST
81286: LIST
81287: PUSH
81288: LD_VAR 0 1
81292: PUSH
81293: LD_VAR 0 2
81297: PUSH
81298: LD_INT 3
81300: PLUS
81301: PUSH
81302: LD_INT 0
81304: PUSH
81305: EMPTY
81306: LIST
81307: LIST
81308: LIST
81309: PUSH
81310: EMPTY
81311: LIST
81312: LIST
81313: LIST
81314: LIST
81315: LIST
81316: ST_TO_ADDR
// end ; end ;
81317: GO 81320
81319: POP
// result := list ;
81320: LD_ADDR_VAR 0 4
81324: PUSH
81325: LD_VAR 0 5
81329: ST_TO_ADDR
// end ;
81330: LD_VAR 0 4
81334: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
81335: LD_INT 0
81337: PPUSH
81338: PPUSH
81339: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
81340: LD_VAR 0 1
81344: NOT
81345: IFTRUE 81373
81347: PUSH
81348: LD_VAR 0 2
81352: PUSH
81353: LD_INT 1
81355: PUSH
81356: LD_INT 2
81358: PUSH
81359: LD_INT 3
81361: PUSH
81362: LD_INT 4
81364: PUSH
81365: EMPTY
81366: LIST
81367: LIST
81368: LIST
81369: LIST
81370: IN
81371: NOT
81372: OR
81373: IFFALSE 81377
// exit ;
81375: GO 81460
// tmp := [ ] ;
81377: LD_ADDR_VAR 0 5
81381: PUSH
81382: EMPTY
81383: ST_TO_ADDR
// for i in units do
81384: LD_ADDR_VAR 0 4
81388: PUSH
81389: LD_VAR 0 1
81393: PUSH
81394: FOR_IN
81395: IFFALSE 81429
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
81397: LD_ADDR_VAR 0 5
81401: PUSH
81402: LD_VAR 0 5
81406: PPUSH
81407: LD_VAR 0 4
81411: PPUSH
81412: LD_VAR 0 2
81416: PPUSH
81417: CALL_OW 259
81421: PPUSH
81422: CALL 82855 0 2
81426: ST_TO_ADDR
81427: GO 81394
81429: POP
81430: POP
// if not tmp then
81431: LD_VAR 0 5
81435: NOT
81436: IFFALSE 81440
// exit ;
81438: GO 81460
// result := SortListByListDesc ( units , tmp ) ;
81440: LD_ADDR_VAR 0 3
81444: PUSH
81445: LD_VAR 0 1
81449: PPUSH
81450: LD_VAR 0 5
81454: PPUSH
81455: CALL_OW 77
81459: ST_TO_ADDR
// end ;
81460: LD_VAR 0 3
81464: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
81465: LD_INT 0
81467: PPUSH
81468: PPUSH
81469: PPUSH
// result := false ;
81470: LD_ADDR_VAR 0 3
81474: PUSH
81475: LD_INT 0
81477: ST_TO_ADDR
// if not building then
81478: LD_VAR 0 2
81482: NOT
81483: IFFALSE 81487
// exit ;
81485: GO 81631
// x := GetX ( building ) ;
81487: LD_ADDR_VAR 0 4
81491: PUSH
81492: LD_VAR 0 2
81496: PPUSH
81497: CALL_OW 250
81501: ST_TO_ADDR
// y := GetY ( building ) ;
81502: LD_ADDR_VAR 0 5
81506: PUSH
81507: LD_VAR 0 2
81511: PPUSH
81512: CALL_OW 251
81516: ST_TO_ADDR
// if not x or not y then
81517: LD_VAR 0 4
81521: NOT
81522: IFTRUE 81531
81524: PUSH
81525: LD_VAR 0 5
81529: NOT
81530: OR
81531: IFFALSE 81535
// exit ;
81533: GO 81631
// if GetTaskList ( unit ) then
81535: LD_VAR 0 1
81539: PPUSH
81540: CALL_OW 437
81544: IFFALSE 81631
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81546: LD_STRING e
81548: PUSH
81549: LD_VAR 0 1
81553: PPUSH
81554: CALL_OW 437
81558: PUSH
81559: LD_INT 1
81561: ARRAY
81562: PUSH
81563: LD_INT 1
81565: ARRAY
81566: EQUAL
81567: IFFALSE 81594
81569: PUSH
81570: LD_VAR 0 4
81574: PUSH
81575: LD_VAR 0 1
81579: PPUSH
81580: CALL_OW 437
81584: PUSH
81585: LD_INT 1
81587: ARRAY
81588: PUSH
81589: LD_INT 2
81591: ARRAY
81592: EQUAL
81593: AND
81594: IFFALSE 81621
81596: PUSH
81597: LD_VAR 0 5
81601: PUSH
81602: LD_VAR 0 1
81606: PPUSH
81607: CALL_OW 437
81611: PUSH
81612: LD_INT 1
81614: ARRAY
81615: PUSH
81616: LD_INT 3
81618: ARRAY
81619: EQUAL
81620: AND
81621: IFFALSE 81631
// result := true end ;
81623: LD_ADDR_VAR 0 3
81627: PUSH
81628: LD_INT 1
81630: ST_TO_ADDR
// end ;
81631: LD_VAR 0 3
81635: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
81636: LD_INT 0
81638: PPUSH
// result := false ;
81639: LD_ADDR_VAR 0 4
81643: PUSH
81644: LD_INT 0
81646: ST_TO_ADDR
// if GetTaskList ( unit ) then
81647: LD_VAR 0 1
81651: PPUSH
81652: CALL_OW 437
81656: IFFALSE 81743
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81658: LD_STRING M
81660: PUSH
81661: LD_VAR 0 1
81665: PPUSH
81666: CALL_OW 437
81670: PUSH
81671: LD_INT 1
81673: ARRAY
81674: PUSH
81675: LD_INT 1
81677: ARRAY
81678: EQUAL
81679: IFFALSE 81706
81681: PUSH
81682: LD_VAR 0 2
81686: PUSH
81687: LD_VAR 0 1
81691: PPUSH
81692: CALL_OW 437
81696: PUSH
81697: LD_INT 1
81699: ARRAY
81700: PUSH
81701: LD_INT 2
81703: ARRAY
81704: EQUAL
81705: AND
81706: IFFALSE 81733
81708: PUSH
81709: LD_VAR 0 3
81713: PUSH
81714: LD_VAR 0 1
81718: PPUSH
81719: CALL_OW 437
81723: PUSH
81724: LD_INT 1
81726: ARRAY
81727: PUSH
81728: LD_INT 3
81730: ARRAY
81731: EQUAL
81732: AND
81733: IFFALSE 81743
// result := true ;
81735: LD_ADDR_VAR 0 4
81739: PUSH
81740: LD_INT 1
81742: ST_TO_ADDR
// end ; end ;
81743: LD_VAR 0 4
81747: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
81748: LD_INT 0
81750: PPUSH
81751: PPUSH
81752: PPUSH
81753: PPUSH
// if not unit or not area then
81754: LD_VAR 0 1
81758: NOT
81759: IFTRUE 81768
81761: PUSH
81762: LD_VAR 0 2
81766: NOT
81767: OR
81768: IFFALSE 81772
// exit ;
81770: GO 81948
// tmp := AreaToList ( area , i ) ;
81772: LD_ADDR_VAR 0 6
81776: PUSH
81777: LD_VAR 0 2
81781: PPUSH
81782: LD_VAR 0 5
81786: PPUSH
81787: CALL_OW 517
81791: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
81792: LD_ADDR_VAR 0 5
81796: PUSH
81797: DOUBLE
81798: LD_INT 1
81800: DEC
81801: ST_TO_ADDR
81802: LD_VAR 0 6
81806: PUSH
81807: LD_INT 1
81809: ARRAY
81810: PUSH
81811: FOR_TO
81812: IFFALSE 81946
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
81814: LD_ADDR_VAR 0 7
81818: PUSH
81819: LD_VAR 0 6
81823: PUSH
81824: LD_INT 1
81826: ARRAY
81827: PUSH
81828: LD_VAR 0 5
81832: ARRAY
81833: PUSH
81834: LD_VAR 0 6
81838: PUSH
81839: LD_INT 2
81841: ARRAY
81842: PUSH
81843: LD_VAR 0 5
81847: ARRAY
81848: PUSH
81849: EMPTY
81850: LIST
81851: LIST
81852: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
81853: LD_INT 92
81855: PUSH
81856: LD_VAR 0 7
81860: PUSH
81861: LD_INT 1
81863: ARRAY
81864: PUSH
81865: LD_VAR 0 7
81869: PUSH
81870: LD_INT 2
81872: ARRAY
81873: PUSH
81874: LD_INT 2
81876: PUSH
81877: EMPTY
81878: LIST
81879: LIST
81880: LIST
81881: LIST
81882: PPUSH
81883: CALL_OW 69
81887: PUSH
81888: LD_INT 0
81890: EQUAL
81891: IFFALSE 81944
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
81893: LD_VAR 0 1
81897: PPUSH
81898: LD_VAR 0 7
81902: PUSH
81903: LD_INT 1
81905: ARRAY
81906: PPUSH
81907: LD_VAR 0 7
81911: PUSH
81912: LD_INT 2
81914: ARRAY
81915: PPUSH
81916: LD_VAR 0 3
81920: PPUSH
81921: CALL_OW 48
// result := IsPlaced ( unit ) ;
81925: LD_ADDR_VAR 0 4
81929: PUSH
81930: LD_VAR 0 1
81934: PPUSH
81935: CALL_OW 305
81939: ST_TO_ADDR
// exit ;
81940: POP
81941: POP
81942: GO 81948
// end ; end ;
81944: GO 81811
81946: POP
81947: POP
// end ;
81948: LD_VAR 0 4
81952: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
81953: LD_INT 0
81955: PPUSH
81956: PPUSH
81957: PPUSH
// if not side or side > 8 then
81958: LD_VAR 0 1
81962: NOT
81963: IFTRUE 81975
81965: PUSH
81966: LD_VAR 0 1
81970: PUSH
81971: LD_INT 8
81973: GREATER
81974: OR
81975: IFFALSE 81979
// exit ;
81977: GO 82166
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
81979: LD_ADDR_VAR 0 4
81983: PUSH
81984: LD_INT 22
81986: PUSH
81987: LD_VAR 0 1
81991: PUSH
81992: EMPTY
81993: LIST
81994: LIST
81995: PUSH
81996: LD_INT 21
81998: PUSH
81999: LD_INT 3
82001: PUSH
82002: EMPTY
82003: LIST
82004: LIST
82005: PUSH
82006: EMPTY
82007: LIST
82008: LIST
82009: PPUSH
82010: CALL_OW 69
82014: ST_TO_ADDR
// if not tmp then
82015: LD_VAR 0 4
82019: NOT
82020: IFFALSE 82024
// exit ;
82022: GO 82166
// enable_addtolog := true ;
82024: LD_ADDR_OWVAR 81
82028: PUSH
82029: LD_INT 1
82031: ST_TO_ADDR
// AddToLog ( [ ) ;
82032: LD_STRING [
82034: PPUSH
82035: CALL_OW 561
// for i in tmp do
82039: LD_ADDR_VAR 0 3
82043: PUSH
82044: LD_VAR 0 4
82048: PUSH
82049: FOR_IN
82050: IFFALSE 82157
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
82052: LD_STRING [
82054: PUSH
82055: LD_VAR 0 3
82059: PPUSH
82060: CALL_OW 266
82064: STR
82065: PUSH
82066: LD_STRING , 
82068: STR
82069: PUSH
82070: LD_VAR 0 3
82074: PPUSH
82075: CALL_OW 250
82079: STR
82080: PUSH
82081: LD_STRING , 
82083: STR
82084: PUSH
82085: LD_VAR 0 3
82089: PPUSH
82090: CALL_OW 251
82094: STR
82095: PUSH
82096: LD_STRING , 
82098: STR
82099: PUSH
82100: LD_VAR 0 3
82104: PPUSH
82105: CALL_OW 254
82109: STR
82110: PUSH
82111: LD_STRING , 
82113: STR
82114: PUSH
82115: LD_VAR 0 3
82119: PPUSH
82120: LD_INT 1
82122: PPUSH
82123: CALL_OW 268
82127: STR
82128: PUSH
82129: LD_STRING , 
82131: STR
82132: PUSH
82133: LD_VAR 0 3
82137: PPUSH
82138: LD_INT 2
82140: PPUSH
82141: CALL_OW 268
82145: STR
82146: PUSH
82147: LD_STRING ],
82149: STR
82150: PPUSH
82151: CALL_OW 561
// end ;
82155: GO 82049
82157: POP
82158: POP
// AddToLog ( ]; ) ;
82159: LD_STRING ];
82161: PPUSH
82162: CALL_OW 561
// end ;
82166: LD_VAR 0 2
82170: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
82171: LD_INT 0
82173: PPUSH
82174: PPUSH
82175: PPUSH
82176: PPUSH
82177: PPUSH
// if not area or not rate or not max then
82178: LD_VAR 0 1
82182: NOT
82183: IFTRUE 82192
82185: PUSH
82186: LD_VAR 0 2
82190: NOT
82191: OR
82192: IFTRUE 82201
82194: PUSH
82195: LD_VAR 0 4
82199: NOT
82200: OR
82201: IFFALSE 82205
// exit ;
82203: GO 82394
// while 1 do
82205: LD_INT 1
82207: IFFALSE 82394
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
82209: LD_ADDR_VAR 0 9
82213: PUSH
82214: LD_VAR 0 1
82218: PPUSH
82219: LD_INT 1
82221: PPUSH
82222: CALL_OW 287
82226: PUSH
82227: LD_INT 10
82229: MUL
82230: ST_TO_ADDR
// r := rate / 10 ;
82231: LD_ADDR_VAR 0 7
82235: PUSH
82236: LD_VAR 0 2
82240: PUSH
82241: LD_INT 10
82243: DIVREAL
82244: ST_TO_ADDR
// time := 1 1$00 ;
82245: LD_ADDR_VAR 0 8
82249: PUSH
82250: LD_INT 2100
82252: ST_TO_ADDR
// if amount < min then
82253: LD_VAR 0 9
82257: PUSH
82258: LD_VAR 0 3
82262: LESS
82263: IFFALSE 82281
// r := r * 2 else
82265: LD_ADDR_VAR 0 7
82269: PUSH
82270: LD_VAR 0 7
82274: PUSH
82275: LD_INT 2
82277: MUL
82278: ST_TO_ADDR
82279: GO 82307
// if amount > max then
82281: LD_VAR 0 9
82285: PUSH
82286: LD_VAR 0 4
82290: GREATER
82291: IFFALSE 82307
// r := r / 2 ;
82293: LD_ADDR_VAR 0 7
82297: PUSH
82298: LD_VAR 0 7
82302: PUSH
82303: LD_INT 2
82305: DIVREAL
82306: ST_TO_ADDR
// time := time / r ;
82307: LD_ADDR_VAR 0 8
82311: PUSH
82312: LD_VAR 0 8
82316: PUSH
82317: LD_VAR 0 7
82321: DIVREAL
82322: ST_TO_ADDR
// if time < 0 then
82323: LD_VAR 0 8
82327: PUSH
82328: LD_INT 0
82330: LESS
82331: IFFALSE 82348
// time := time * - 1 ;
82333: LD_ADDR_VAR 0 8
82337: PUSH
82338: LD_VAR 0 8
82342: PUSH
82343: LD_INT 1
82345: NEG
82346: MUL
82347: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
82348: LD_VAR 0 8
82352: PUSH
82353: LD_INT 35
82355: PPUSH
82356: LD_INT 875
82358: PPUSH
82359: CALL_OW 12
82363: PLUS
82364: PPUSH
82365: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
82369: LD_INT 1
82371: PPUSH
82372: LD_INT 5
82374: PPUSH
82375: CALL_OW 12
82379: PPUSH
82380: LD_VAR 0 1
82384: PPUSH
82385: LD_INT 1
82387: PPUSH
82388: CALL_OW 55
// end ;
82392: GO 82205
// end ;
82394: LD_VAR 0 5
82398: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
82399: LD_INT 0
82401: PPUSH
82402: PPUSH
82403: PPUSH
82404: PPUSH
82405: PPUSH
82406: PPUSH
82407: PPUSH
82408: PPUSH
// if not turrets or not factories then
82409: LD_VAR 0 1
82413: NOT
82414: IFTRUE 82423
82416: PUSH
82417: LD_VAR 0 2
82421: NOT
82422: OR
82423: IFFALSE 82427
// exit ;
82425: GO 82734
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
82427: LD_ADDR_VAR 0 10
82431: PUSH
82432: LD_INT 5
82434: PUSH
82435: LD_INT 6
82437: PUSH
82438: EMPTY
82439: LIST
82440: LIST
82441: PUSH
82442: LD_INT 2
82444: PUSH
82445: LD_INT 4
82447: PUSH
82448: EMPTY
82449: LIST
82450: LIST
82451: PUSH
82452: LD_INT 3
82454: PUSH
82455: LD_INT 5
82457: PUSH
82458: EMPTY
82459: LIST
82460: LIST
82461: PUSH
82462: EMPTY
82463: LIST
82464: LIST
82465: LIST
82466: PUSH
82467: LD_INT 24
82469: PUSH
82470: LD_INT 25
82472: PUSH
82473: EMPTY
82474: LIST
82475: LIST
82476: PUSH
82477: LD_INT 23
82479: PUSH
82480: LD_INT 27
82482: PUSH
82483: EMPTY
82484: LIST
82485: LIST
82486: PUSH
82487: EMPTY
82488: LIST
82489: LIST
82490: PUSH
82491: LD_INT 42
82493: PUSH
82494: LD_INT 43
82496: PUSH
82497: EMPTY
82498: LIST
82499: LIST
82500: PUSH
82501: LD_INT 44
82503: PUSH
82504: LD_INT 46
82506: PUSH
82507: EMPTY
82508: LIST
82509: LIST
82510: PUSH
82511: LD_INT 45
82513: PUSH
82514: LD_INT 47
82516: PUSH
82517: EMPTY
82518: LIST
82519: LIST
82520: PUSH
82521: EMPTY
82522: LIST
82523: LIST
82524: LIST
82525: PUSH
82526: EMPTY
82527: LIST
82528: LIST
82529: LIST
82530: ST_TO_ADDR
// result := [ ] ;
82531: LD_ADDR_VAR 0 3
82535: PUSH
82536: EMPTY
82537: ST_TO_ADDR
// for i in turrets do
82538: LD_ADDR_VAR 0 4
82542: PUSH
82543: LD_VAR 0 1
82547: PUSH
82548: FOR_IN
82549: IFFALSE 82732
// begin nat := GetNation ( i ) ;
82551: LD_ADDR_VAR 0 7
82555: PUSH
82556: LD_VAR 0 4
82560: PPUSH
82561: CALL_OW 248
82565: ST_TO_ADDR
// weapon := 0 ;
82566: LD_ADDR_VAR 0 8
82570: PUSH
82571: LD_INT 0
82573: ST_TO_ADDR
// if not nat then
82574: LD_VAR 0 7
82578: NOT
82579: IFFALSE 82583
// continue ;
82581: GO 82548
// for j in list [ nat ] do
82583: LD_ADDR_VAR 0 5
82587: PUSH
82588: LD_VAR 0 10
82592: PUSH
82593: LD_VAR 0 7
82597: ARRAY
82598: PUSH
82599: FOR_IN
82600: IFFALSE 82641
// if GetBWeapon ( i ) = j [ 1 ] then
82602: LD_VAR 0 4
82606: PPUSH
82607: CALL_OW 269
82611: PUSH
82612: LD_VAR 0 5
82616: PUSH
82617: LD_INT 1
82619: ARRAY
82620: EQUAL
82621: IFFALSE 82639
// begin weapon := j [ 2 ] ;
82623: LD_ADDR_VAR 0 8
82627: PUSH
82628: LD_VAR 0 5
82632: PUSH
82633: LD_INT 2
82635: ARRAY
82636: ST_TO_ADDR
// break ;
82637: GO 82641
// end ;
82639: GO 82599
82641: POP
82642: POP
// if not weapon then
82643: LD_VAR 0 8
82647: NOT
82648: IFFALSE 82652
// continue ;
82650: GO 82548
// for k in factories do
82652: LD_ADDR_VAR 0 6
82656: PUSH
82657: LD_VAR 0 2
82661: PUSH
82662: FOR_IN
82663: IFFALSE 82728
// begin weapons := AvailableWeaponList ( k ) ;
82665: LD_ADDR_VAR 0 9
82669: PUSH
82670: LD_VAR 0 6
82674: PPUSH
82675: CALL_OW 478
82679: ST_TO_ADDR
// if not weapons then
82680: LD_VAR 0 9
82684: NOT
82685: IFFALSE 82689
// continue ;
82687: GO 82662
// if weapon in weapons then
82689: LD_VAR 0 8
82693: PUSH
82694: LD_VAR 0 9
82698: IN
82699: IFFALSE 82726
// begin result := [ i , weapon ] ;
82701: LD_ADDR_VAR 0 3
82705: PUSH
82706: LD_VAR 0 4
82710: PUSH
82711: LD_VAR 0 8
82715: PUSH
82716: EMPTY
82717: LIST
82718: LIST
82719: ST_TO_ADDR
// exit ;
82720: POP
82721: POP
82722: POP
82723: POP
82724: GO 82734
// end ; end ;
82726: GO 82662
82728: POP
82729: POP
// end ;
82730: GO 82548
82732: POP
82733: POP
// end ;
82734: LD_VAR 0 3
82738: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
82739: LD_INT 0
82741: PPUSH
// if not side or side > 8 then
82742: LD_VAR 0 3
82746: NOT
82747: IFTRUE 82759
82749: PUSH
82750: LD_VAR 0 3
82754: PUSH
82755: LD_INT 8
82757: GREATER
82758: OR
82759: IFFALSE 82763
// exit ;
82761: GO 82822
// if not range then
82763: LD_VAR 0 4
82767: NOT
82768: IFFALSE 82779
// range := - 12 ;
82770: LD_ADDR_VAR 0 4
82774: PUSH
82775: LD_INT 12
82777: NEG
82778: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
82779: LD_VAR 0 1
82783: PPUSH
82784: LD_VAR 0 2
82788: PPUSH
82789: LD_VAR 0 3
82793: PPUSH
82794: LD_VAR 0 4
82798: PPUSH
82799: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
82803: LD_VAR 0 1
82807: PPUSH
82808: LD_VAR 0 2
82812: PPUSH
82813: LD_VAR 0 3
82817: PPUSH
82818: CALL_OW 331
// end ;
82822: LD_VAR 0 5
82826: RET
// export function Video ( mode ) ; begin
82827: LD_INT 0
82829: PPUSH
// ingame_video = mode ;
82830: LD_ADDR_OWVAR 52
82834: PUSH
82835: LD_VAR 0 1
82839: ST_TO_ADDR
// interface_hidden = mode ;
82840: LD_ADDR_OWVAR 54
82844: PUSH
82845: LD_VAR 0 1
82849: ST_TO_ADDR
// end ;
82850: LD_VAR 0 2
82854: RET
// export function Join ( array , element ) ; begin
82855: LD_INT 0
82857: PPUSH
// result := Replace ( array , array + 1 , element ) ;
82858: LD_ADDR_VAR 0 3
82862: PUSH
82863: LD_VAR 0 1
82867: PPUSH
82868: LD_VAR 0 1
82872: PUSH
82873: LD_INT 1
82875: PLUS
82876: PPUSH
82877: LD_VAR 0 2
82881: PPUSH
82882: CALL_OW 1
82886: ST_TO_ADDR
// end ;
82887: LD_VAR 0 3
82891: RET
// export function JoinUnion ( array , element ) ; begin
82892: LD_INT 0
82894: PPUSH
// result := array union element ;
82895: LD_ADDR_VAR 0 3
82899: PUSH
82900: LD_VAR 0 1
82904: PUSH
82905: LD_VAR 0 2
82909: UNION
82910: ST_TO_ADDR
// end ;
82911: LD_VAR 0 3
82915: RET
// export function GetBehemoths ( side ) ; begin
82916: LD_INT 0
82918: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
82919: LD_ADDR_VAR 0 2
82923: PUSH
82924: LD_INT 22
82926: PUSH
82927: LD_VAR 0 1
82931: PUSH
82932: EMPTY
82933: LIST
82934: LIST
82935: PUSH
82936: LD_INT 31
82938: PUSH
82939: LD_INT 25
82941: PUSH
82942: EMPTY
82943: LIST
82944: LIST
82945: PUSH
82946: EMPTY
82947: LIST
82948: LIST
82949: PPUSH
82950: CALL_OW 69
82954: ST_TO_ADDR
// end ;
82955: LD_VAR 0 2
82959: RET
// export function Shuffle ( array ) ; var i , index ; begin
82960: LD_INT 0
82962: PPUSH
82963: PPUSH
82964: PPUSH
// result := [ ] ;
82965: LD_ADDR_VAR 0 2
82969: PUSH
82970: EMPTY
82971: ST_TO_ADDR
// if not array then
82972: LD_VAR 0 1
82976: NOT
82977: IFFALSE 82981
// exit ;
82979: GO 83080
// Randomize ;
82981: CALL_OW 10
// for i = array downto 1 do
82985: LD_ADDR_VAR 0 3
82989: PUSH
82990: DOUBLE
82991: LD_VAR 0 1
82995: INC
82996: ST_TO_ADDR
82997: LD_INT 1
82999: PUSH
83000: FOR_DOWNTO
83001: IFFALSE 83078
// begin index := rand ( 1 , array ) ;
83003: LD_ADDR_VAR 0 4
83007: PUSH
83008: LD_INT 1
83010: PPUSH
83011: LD_VAR 0 1
83015: PPUSH
83016: CALL_OW 12
83020: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
83021: LD_ADDR_VAR 0 2
83025: PUSH
83026: LD_VAR 0 2
83030: PPUSH
83031: LD_VAR 0 2
83035: PUSH
83036: LD_INT 1
83038: PLUS
83039: PPUSH
83040: LD_VAR 0 1
83044: PUSH
83045: LD_VAR 0 4
83049: ARRAY
83050: PPUSH
83051: CALL_OW 2
83055: ST_TO_ADDR
// array := Delete ( array , index ) ;
83056: LD_ADDR_VAR 0 1
83060: PUSH
83061: LD_VAR 0 1
83065: PPUSH
83066: LD_VAR 0 4
83070: PPUSH
83071: CALL_OW 3
83075: ST_TO_ADDR
// end ;
83076: GO 83000
83078: POP
83079: POP
// end ;
83080: LD_VAR 0 2
83084: RET
// export function GetBaseMaterials ( base ) ; begin
83085: LD_INT 0
83087: PPUSH
// result := [ 0 , 0 , 0 ] ;
83088: LD_ADDR_VAR 0 2
83092: PUSH
83093: LD_INT 0
83095: PUSH
83096: LD_INT 0
83098: PUSH
83099: LD_INT 0
83101: PUSH
83102: EMPTY
83103: LIST
83104: LIST
83105: LIST
83106: ST_TO_ADDR
// if not base then
83107: LD_VAR 0 1
83111: NOT
83112: IFFALSE 83116
// exit ;
83114: GO 83165
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
83116: LD_ADDR_VAR 0 2
83120: PUSH
83121: LD_VAR 0 1
83125: PPUSH
83126: LD_INT 1
83128: PPUSH
83129: CALL_OW 275
83133: PUSH
83134: LD_VAR 0 1
83138: PPUSH
83139: LD_INT 2
83141: PPUSH
83142: CALL_OW 275
83146: PUSH
83147: LD_VAR 0 1
83151: PPUSH
83152: LD_INT 3
83154: PPUSH
83155: CALL_OW 275
83159: PUSH
83160: EMPTY
83161: LIST
83162: LIST
83163: LIST
83164: ST_TO_ADDR
// end ;
83165: LD_VAR 0 2
83169: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
83170: LD_INT 0
83172: PPUSH
83173: PPUSH
// result := array ;
83174: LD_ADDR_VAR 0 3
83178: PUSH
83179: LD_VAR 0 1
83183: ST_TO_ADDR
// if size >= result then
83184: LD_VAR 0 2
83188: PUSH
83189: LD_VAR 0 3
83193: GREATEREQUAL
83194: IFFALSE 83198
// exit ;
83196: GO 83248
// if size then
83198: LD_VAR 0 2
83202: IFFALSE 83248
// for i := array downto size do
83204: LD_ADDR_VAR 0 4
83208: PUSH
83209: DOUBLE
83210: LD_VAR 0 1
83214: INC
83215: ST_TO_ADDR
83216: LD_VAR 0 2
83220: PUSH
83221: FOR_DOWNTO
83222: IFFALSE 83246
// result := Delete ( result , result ) ;
83224: LD_ADDR_VAR 0 3
83228: PUSH
83229: LD_VAR 0 3
83233: PPUSH
83234: LD_VAR 0 3
83238: PPUSH
83239: CALL_OW 3
83243: ST_TO_ADDR
83244: GO 83221
83246: POP
83247: POP
// end ;
83248: LD_VAR 0 3
83252: RET
// export function ComExit ( unit ) ; var tmp ; begin
83253: LD_INT 0
83255: PPUSH
83256: PPUSH
// if not IsInUnit ( unit ) then
83257: LD_VAR 0 1
83261: PPUSH
83262: CALL_OW 310
83266: NOT
83267: IFFALSE 83271
// exit ;
83269: GO 83331
// tmp := IsInUnit ( unit ) ;
83271: LD_ADDR_VAR 0 3
83275: PUSH
83276: LD_VAR 0 1
83280: PPUSH
83281: CALL_OW 310
83285: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
83286: LD_VAR 0 3
83290: PPUSH
83291: CALL_OW 247
83295: PUSH
83296: LD_INT 2
83298: EQUAL
83299: IFFALSE 83312
// ComExitVehicle ( unit ) else
83301: LD_VAR 0 1
83305: PPUSH
83306: CALL_OW 121
83310: GO 83321
// ComExitBuilding ( unit ) ;
83312: LD_VAR 0 1
83316: PPUSH
83317: CALL_OW 122
// result := tmp ;
83321: LD_ADDR_VAR 0 2
83325: PUSH
83326: LD_VAR 0 3
83330: ST_TO_ADDR
// end ;
83331: LD_VAR 0 2
83335: RET
// export function ComExitAll ( units ) ; var i ; begin
83336: LD_INT 0
83338: PPUSH
83339: PPUSH
// if not units then
83340: LD_VAR 0 1
83344: NOT
83345: IFFALSE 83349
// exit ;
83347: GO 83375
// for i in units do
83349: LD_ADDR_VAR 0 3
83353: PUSH
83354: LD_VAR 0 1
83358: PUSH
83359: FOR_IN
83360: IFFALSE 83373
// ComExit ( i ) ;
83362: LD_VAR 0 3
83366: PPUSH
83367: CALL 83253 0 1
83371: GO 83359
83373: POP
83374: POP
// end ;
83375: LD_VAR 0 2
83379: RET
// export function ResetHc ; begin
83380: LD_INT 0
83382: PPUSH
// InitHc ;
83383: CALL_OW 19
// hc_importance := 0 ;
83387: LD_ADDR_OWVAR 32
83391: PUSH
83392: LD_INT 0
83394: ST_TO_ADDR
// end ;
83395: LD_VAR 0 1
83399: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
83400: LD_INT 0
83402: PPUSH
83403: PPUSH
83404: PPUSH
// _x := ( x1 + x2 ) div 2 ;
83405: LD_ADDR_VAR 0 6
83409: PUSH
83410: LD_VAR 0 1
83414: PUSH
83415: LD_VAR 0 3
83419: PLUS
83420: PUSH
83421: LD_INT 2
83423: DIV
83424: ST_TO_ADDR
// if _x < 0 then
83425: LD_VAR 0 6
83429: PUSH
83430: LD_INT 0
83432: LESS
83433: IFFALSE 83450
// _x := _x * - 1 ;
83435: LD_ADDR_VAR 0 6
83439: PUSH
83440: LD_VAR 0 6
83444: PUSH
83445: LD_INT 1
83447: NEG
83448: MUL
83449: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
83450: LD_ADDR_VAR 0 7
83454: PUSH
83455: LD_VAR 0 2
83459: PUSH
83460: LD_VAR 0 4
83464: PLUS
83465: PUSH
83466: LD_INT 2
83468: DIV
83469: ST_TO_ADDR
// if _y < 0 then
83470: LD_VAR 0 7
83474: PUSH
83475: LD_INT 0
83477: LESS
83478: IFFALSE 83495
// _y := _y * - 1 ;
83480: LD_ADDR_VAR 0 7
83484: PUSH
83485: LD_VAR 0 7
83489: PUSH
83490: LD_INT 1
83492: NEG
83493: MUL
83494: ST_TO_ADDR
// result := [ _x , _y ] ;
83495: LD_ADDR_VAR 0 5
83499: PUSH
83500: LD_VAR 0 6
83504: PUSH
83505: LD_VAR 0 7
83509: PUSH
83510: EMPTY
83511: LIST
83512: LIST
83513: ST_TO_ADDR
// end ;
83514: LD_VAR 0 5
83518: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
83519: LD_INT 0
83521: PPUSH
83522: PPUSH
83523: PPUSH
83524: PPUSH
// task := GetTaskList ( unit ) ;
83525: LD_ADDR_VAR 0 7
83529: PUSH
83530: LD_VAR 0 1
83534: PPUSH
83535: CALL_OW 437
83539: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
83540: LD_VAR 0 7
83544: NOT
83545: IFFALSE 83564
83547: PUSH
83548: LD_VAR 0 1
83552: PPUSH
83553: LD_VAR 0 2
83557: PPUSH
83558: CALL_OW 308
83562: NOT
83563: AND
83564: IFFALSE 83568
// exit ;
83566: GO 83686
// if IsInArea ( unit , area ) then
83568: LD_VAR 0 1
83572: PPUSH
83573: LD_VAR 0 2
83577: PPUSH
83578: CALL_OW 308
83582: IFFALSE 83600
// begin ComMoveToArea ( unit , goAway ) ;
83584: LD_VAR 0 1
83588: PPUSH
83589: LD_VAR 0 3
83593: PPUSH
83594: CALL_OW 113
// exit ;
83598: GO 83686
// end ; if task [ 1 ] [ 1 ] <> M then
83600: LD_VAR 0 7
83604: PUSH
83605: LD_INT 1
83607: ARRAY
83608: PUSH
83609: LD_INT 1
83611: ARRAY
83612: PUSH
83613: LD_STRING M
83615: NONEQUAL
83616: IFFALSE 83620
// exit ;
83618: GO 83686
// x := task [ 1 ] [ 2 ] ;
83620: LD_ADDR_VAR 0 5
83624: PUSH
83625: LD_VAR 0 7
83629: PUSH
83630: LD_INT 1
83632: ARRAY
83633: PUSH
83634: LD_INT 2
83636: ARRAY
83637: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
83638: LD_ADDR_VAR 0 6
83642: PUSH
83643: LD_VAR 0 7
83647: PUSH
83648: LD_INT 1
83650: ARRAY
83651: PUSH
83652: LD_INT 3
83654: ARRAY
83655: ST_TO_ADDR
// if InArea ( x , y , area ) then
83656: LD_VAR 0 5
83660: PPUSH
83661: LD_VAR 0 6
83665: PPUSH
83666: LD_VAR 0 2
83670: PPUSH
83671: CALL_OW 309
83675: IFFALSE 83686
// ComStop ( unit ) ;
83677: LD_VAR 0 1
83681: PPUSH
83682: CALL_OW 141
// end ;
83686: LD_VAR 0 4
83690: RET
// export function Abs ( value ) ; begin
83691: LD_INT 0
83693: PPUSH
// result := value ;
83694: LD_ADDR_VAR 0 2
83698: PUSH
83699: LD_VAR 0 1
83703: ST_TO_ADDR
// if value < 0 then
83704: LD_VAR 0 1
83708: PUSH
83709: LD_INT 0
83711: LESS
83712: IFFALSE 83729
// result := value * - 1 ;
83714: LD_ADDR_VAR 0 2
83718: PUSH
83719: LD_VAR 0 1
83723: PUSH
83724: LD_INT 1
83726: NEG
83727: MUL
83728: ST_TO_ADDR
// end ;
83729: LD_VAR 0 2
83733: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
83734: LD_INT 0
83736: PPUSH
83737: PPUSH
83738: PPUSH
83739: PPUSH
83740: PPUSH
83741: PPUSH
83742: PPUSH
83743: PPUSH
// if not unit or not building then
83744: LD_VAR 0 1
83748: NOT
83749: IFTRUE 83758
83751: PUSH
83752: LD_VAR 0 2
83756: NOT
83757: OR
83758: IFFALSE 83762
// exit ;
83760: GO 83990
// x := GetX ( building ) ;
83762: LD_ADDR_VAR 0 4
83766: PUSH
83767: LD_VAR 0 2
83771: PPUSH
83772: CALL_OW 250
83776: ST_TO_ADDR
// y := GetY ( building ) ;
83777: LD_ADDR_VAR 0 6
83781: PUSH
83782: LD_VAR 0 2
83786: PPUSH
83787: CALL_OW 251
83791: ST_TO_ADDR
// d := GetDir ( building ) ;
83792: LD_ADDR_VAR 0 8
83796: PUSH
83797: LD_VAR 0 2
83801: PPUSH
83802: CALL_OW 254
83806: ST_TO_ADDR
// r := 4 ;
83807: LD_ADDR_VAR 0 9
83811: PUSH
83812: LD_INT 4
83814: ST_TO_ADDR
// for i := 1 to 5 do
83815: LD_ADDR_VAR 0 10
83819: PUSH
83820: DOUBLE
83821: LD_INT 1
83823: DEC
83824: ST_TO_ADDR
83825: LD_INT 5
83827: PUSH
83828: FOR_TO
83829: IFFALSE 83988
// begin _x := ShiftX ( x , d , r + i ) ;
83831: LD_ADDR_VAR 0 5
83835: PUSH
83836: LD_VAR 0 4
83840: PPUSH
83841: LD_VAR 0 8
83845: PPUSH
83846: LD_VAR 0 9
83850: PUSH
83851: LD_VAR 0 10
83855: PLUS
83856: PPUSH
83857: CALL_OW 272
83861: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
83862: LD_ADDR_VAR 0 7
83866: PUSH
83867: LD_VAR 0 6
83871: PPUSH
83872: LD_VAR 0 8
83876: PPUSH
83877: LD_VAR 0 9
83881: PUSH
83882: LD_VAR 0 10
83886: PLUS
83887: PPUSH
83888: CALL_OW 273
83892: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
83893: LD_VAR 0 5
83897: PPUSH
83898: LD_VAR 0 7
83902: PPUSH
83903: CALL_OW 488
83907: IFFALSE 83942
83909: PUSH
83910: LD_VAR 0 5
83914: PPUSH
83915: LD_VAR 0 7
83919: PPUSH
83920: CALL_OW 428
83924: PPUSH
83925: CALL_OW 247
83929: PUSH
83930: LD_INT 3
83932: PUSH
83933: LD_INT 2
83935: PUSH
83936: EMPTY
83937: LIST
83938: LIST
83939: IN
83940: NOT
83941: AND
83942: IFFALSE 83986
// begin ComMoveXY ( unit , _x , _y ) ;
83944: LD_VAR 0 1
83948: PPUSH
83949: LD_VAR 0 5
83953: PPUSH
83954: LD_VAR 0 7
83958: PPUSH
83959: CALL_OW 111
// result := [ _x , _y ] ;
83963: LD_ADDR_VAR 0 3
83967: PUSH
83968: LD_VAR 0 5
83972: PUSH
83973: LD_VAR 0 7
83977: PUSH
83978: EMPTY
83979: LIST
83980: LIST
83981: ST_TO_ADDR
// exit ;
83982: POP
83983: POP
83984: GO 83990
// end ; end ;
83986: GO 83828
83988: POP
83989: POP
// end ;
83990: LD_VAR 0 3
83994: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
83995: LD_INT 0
83997: PPUSH
83998: PPUSH
83999: PPUSH
// result := 0 ;
84000: LD_ADDR_VAR 0 3
84004: PUSH
84005: LD_INT 0
84007: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
84008: LD_VAR 0 1
84012: PUSH
84013: LD_INT 0
84015: LESS
84016: IFTRUE 84028
84018: PUSH
84019: LD_VAR 0 1
84023: PUSH
84024: LD_INT 8
84026: GREATER
84027: OR
84028: IFTRUE 84040
84030: PUSH
84031: LD_VAR 0 2
84035: PUSH
84036: LD_INT 0
84038: LESS
84039: OR
84040: IFTRUE 84052
84042: PUSH
84043: LD_VAR 0 2
84047: PUSH
84048: LD_INT 8
84050: GREATER
84051: OR
84052: IFFALSE 84056
// exit ;
84054: GO 84131
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
84056: LD_ADDR_VAR 0 4
84060: PUSH
84061: LD_INT 22
84063: PUSH
84064: LD_VAR 0 2
84068: PUSH
84069: EMPTY
84070: LIST
84071: LIST
84072: PPUSH
84073: CALL_OW 69
84077: PUSH
84078: FOR_IN
84079: IFFALSE 84129
// begin un := UnitShoot ( i ) ;
84081: LD_ADDR_VAR 0 5
84085: PUSH
84086: LD_VAR 0 4
84090: PPUSH
84091: CALL_OW 504
84095: ST_TO_ADDR
// if GetSide ( un ) = side1 then
84096: LD_VAR 0 5
84100: PPUSH
84101: CALL_OW 255
84105: PUSH
84106: LD_VAR 0 1
84110: EQUAL
84111: IFFALSE 84127
// begin result := un ;
84113: LD_ADDR_VAR 0 3
84117: PUSH
84118: LD_VAR 0 5
84122: ST_TO_ADDR
// exit ;
84123: POP
84124: POP
84125: GO 84131
// end ; end ;
84127: GO 84078
84129: POP
84130: POP
// end ;
84131: LD_VAR 0 3
84135: RET
// export function GetCargoBay ( units ) ; begin
84136: LD_INT 0
84138: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
84139: LD_ADDR_VAR 0 2
84143: PUSH
84144: LD_VAR 0 1
84148: PPUSH
84149: LD_INT 2
84151: PUSH
84152: LD_INT 34
84154: PUSH
84155: LD_INT 12
84157: PUSH
84158: EMPTY
84159: LIST
84160: LIST
84161: PUSH
84162: LD_INT 34
84164: PUSH
84165: LD_INT 51
84167: PUSH
84168: EMPTY
84169: LIST
84170: LIST
84171: PUSH
84172: LD_INT 34
84174: PUSH
84175: LD_INT 32
84177: PUSH
84178: EMPTY
84179: LIST
84180: LIST
84181: PUSH
84182: LD_INT 34
84184: PUSH
84185: LD_INT 89
84187: PUSH
84188: EMPTY
84189: LIST
84190: LIST
84191: PUSH
84192: EMPTY
84193: LIST
84194: LIST
84195: LIST
84196: LIST
84197: LIST
84198: PPUSH
84199: CALL_OW 72
84203: ST_TO_ADDR
// end ;
84204: LD_VAR 0 2
84208: RET
// export function Negate ( value ) ; begin
84209: LD_INT 0
84211: PPUSH
// result := not value ;
84212: LD_ADDR_VAR 0 2
84216: PUSH
84217: LD_VAR 0 1
84221: NOT
84222: ST_TO_ADDR
// end ;
84223: LD_VAR 0 2
84227: RET
// export function Inc ( value ) ; begin
84228: LD_INT 0
84230: PPUSH
// result := value + 1 ;
84231: LD_ADDR_VAR 0 2
84235: PUSH
84236: LD_VAR 0 1
84240: PUSH
84241: LD_INT 1
84243: PLUS
84244: ST_TO_ADDR
// end ;
84245: LD_VAR 0 2
84249: RET
// export function Dec ( value ) ; begin
84250: LD_INT 0
84252: PPUSH
// result := value - 1 ;
84253: LD_ADDR_VAR 0 2
84257: PUSH
84258: LD_VAR 0 1
84262: PUSH
84263: LD_INT 1
84265: MINUS
84266: ST_TO_ADDR
// end ;
84267: LD_VAR 0 2
84271: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
84272: LD_INT 0
84274: PPUSH
84275: PPUSH
84276: PPUSH
84277: PPUSH
84278: PPUSH
84279: PPUSH
84280: PPUSH
84281: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
84282: LD_VAR 0 1
84286: PPUSH
84287: LD_VAR 0 2
84291: PPUSH
84292: CALL_OW 488
84296: NOT
84297: IFTRUE 84316
84299: PUSH
84300: LD_VAR 0 3
84304: PPUSH
84305: LD_VAR 0 4
84309: PPUSH
84310: CALL_OW 488
84314: NOT
84315: OR
84316: IFFALSE 84329
// begin result := - 1 ;
84318: LD_ADDR_VAR 0 5
84322: PUSH
84323: LD_INT 1
84325: NEG
84326: ST_TO_ADDR
// exit ;
84327: GO 84564
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
84329: LD_ADDR_VAR 0 12
84333: PUSH
84334: LD_VAR 0 1
84338: PPUSH
84339: LD_VAR 0 2
84343: PPUSH
84344: LD_VAR 0 3
84348: PPUSH
84349: LD_VAR 0 4
84353: PPUSH
84354: CALL 83400 0 4
84358: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
84359: LD_ADDR_VAR 0 11
84363: PUSH
84364: LD_VAR 0 1
84368: PPUSH
84369: LD_VAR 0 2
84373: PPUSH
84374: LD_VAR 0 12
84378: PUSH
84379: LD_INT 1
84381: ARRAY
84382: PPUSH
84383: LD_VAR 0 12
84387: PUSH
84388: LD_INT 2
84390: ARRAY
84391: PPUSH
84392: CALL_OW 298
84396: ST_TO_ADDR
// distance := 9999 ;
84397: LD_ADDR_VAR 0 10
84401: PUSH
84402: LD_INT 9999
84404: ST_TO_ADDR
// for i := 0 to 5 do
84405: LD_ADDR_VAR 0 6
84409: PUSH
84410: DOUBLE
84411: LD_INT 0
84413: DEC
84414: ST_TO_ADDR
84415: LD_INT 5
84417: PUSH
84418: FOR_TO
84419: IFFALSE 84562
// begin _x := ShiftX ( x1 , i , centerDist ) ;
84421: LD_ADDR_VAR 0 7
84425: PUSH
84426: LD_VAR 0 1
84430: PPUSH
84431: LD_VAR 0 6
84435: PPUSH
84436: LD_VAR 0 11
84440: PPUSH
84441: CALL_OW 272
84445: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
84446: LD_ADDR_VAR 0 8
84450: PUSH
84451: LD_VAR 0 2
84455: PPUSH
84456: LD_VAR 0 6
84460: PPUSH
84461: LD_VAR 0 11
84465: PPUSH
84466: CALL_OW 273
84470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
84471: LD_VAR 0 7
84475: PPUSH
84476: LD_VAR 0 8
84480: PPUSH
84481: CALL_OW 488
84485: NOT
84486: IFFALSE 84490
// continue ;
84488: GO 84418
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
84490: LD_ADDR_VAR 0 9
84494: PUSH
84495: LD_VAR 0 12
84499: PUSH
84500: LD_INT 1
84502: ARRAY
84503: PPUSH
84504: LD_VAR 0 12
84508: PUSH
84509: LD_INT 2
84511: ARRAY
84512: PPUSH
84513: LD_VAR 0 7
84517: PPUSH
84518: LD_VAR 0 8
84522: PPUSH
84523: CALL_OW 298
84527: ST_TO_ADDR
// if tmp < distance then
84528: LD_VAR 0 9
84532: PUSH
84533: LD_VAR 0 10
84537: LESS
84538: IFFALSE 84560
// begin result := i ;
84540: LD_ADDR_VAR 0 5
84544: PUSH
84545: LD_VAR 0 6
84549: ST_TO_ADDR
// distance := tmp ;
84550: LD_ADDR_VAR 0 10
84554: PUSH
84555: LD_VAR 0 9
84559: ST_TO_ADDR
// end ; end ;
84560: GO 84418
84562: POP
84563: POP
// end ;
84564: LD_VAR 0 5
84568: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
84569: LD_INT 0
84571: PPUSH
84572: PPUSH
// if not driver or not IsInUnit ( driver ) then
84573: LD_VAR 0 1
84577: NOT
84578: IFTRUE 84592
84580: PUSH
84581: LD_VAR 0 1
84585: PPUSH
84586: CALL_OW 310
84590: NOT
84591: OR
84592: IFFALSE 84596
// exit ;
84594: GO 84686
// vehicle := IsInUnit ( driver ) ;
84596: LD_ADDR_VAR 0 3
84600: PUSH
84601: LD_VAR 0 1
84605: PPUSH
84606: CALL_OW 310
84610: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
84611: LD_VAR 0 1
84615: PPUSH
84616: LD_STRING \
84618: PUSH
84619: LD_INT 0
84621: PUSH
84622: LD_INT 0
84624: PUSH
84625: LD_INT 0
84627: PUSH
84628: LD_INT 0
84630: PUSH
84631: LD_INT 0
84633: PUSH
84634: LD_INT 0
84636: PUSH
84637: EMPTY
84638: LIST
84639: LIST
84640: LIST
84641: LIST
84642: LIST
84643: LIST
84644: LIST
84645: PUSH
84646: LD_STRING E
84648: PUSH
84649: LD_INT 0
84651: PUSH
84652: LD_INT 0
84654: PUSH
84655: LD_VAR 0 3
84659: PUSH
84660: LD_INT 0
84662: PUSH
84663: LD_INT 0
84665: PUSH
84666: LD_INT 0
84668: PUSH
84669: EMPTY
84670: LIST
84671: LIST
84672: LIST
84673: LIST
84674: LIST
84675: LIST
84676: LIST
84677: PUSH
84678: EMPTY
84679: LIST
84680: LIST
84681: PPUSH
84682: CALL_OW 446
// end ;
84686: LD_VAR 0 2
84690: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
84691: LD_INT 0
84693: PPUSH
84694: PPUSH
// if not driver or not IsInUnit ( driver ) then
84695: LD_VAR 0 1
84699: NOT
84700: IFTRUE 84714
84702: PUSH
84703: LD_VAR 0 1
84707: PPUSH
84708: CALL_OW 310
84712: NOT
84713: OR
84714: IFFALSE 84718
// exit ;
84716: GO 84808
// vehicle := IsInUnit ( driver ) ;
84718: LD_ADDR_VAR 0 3
84722: PUSH
84723: LD_VAR 0 1
84727: PPUSH
84728: CALL_OW 310
84732: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
84733: LD_VAR 0 1
84737: PPUSH
84738: LD_STRING \
84740: PUSH
84741: LD_INT 0
84743: PUSH
84744: LD_INT 0
84746: PUSH
84747: LD_INT 0
84749: PUSH
84750: LD_INT 0
84752: PUSH
84753: LD_INT 0
84755: PUSH
84756: LD_INT 0
84758: PUSH
84759: EMPTY
84760: LIST
84761: LIST
84762: LIST
84763: LIST
84764: LIST
84765: LIST
84766: LIST
84767: PUSH
84768: LD_STRING E
84770: PUSH
84771: LD_INT 0
84773: PUSH
84774: LD_INT 0
84776: PUSH
84777: LD_VAR 0 3
84781: PUSH
84782: LD_INT 0
84784: PUSH
84785: LD_INT 0
84787: PUSH
84788: LD_INT 0
84790: PUSH
84791: EMPTY
84792: LIST
84793: LIST
84794: LIST
84795: LIST
84796: LIST
84797: LIST
84798: LIST
84799: PUSH
84800: EMPTY
84801: LIST
84802: LIST
84803: PPUSH
84804: CALL_OW 447
// end ;
84808: LD_VAR 0 2
84812: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
84813: LD_INT 0
84815: PPUSH
84816: PPUSH
84817: PPUSH
// tmp := [ ] ;
84818: LD_ADDR_VAR 0 5
84822: PUSH
84823: EMPTY
84824: ST_TO_ADDR
// for i in units do
84825: LD_ADDR_VAR 0 4
84829: PUSH
84830: LD_VAR 0 1
84834: PUSH
84835: FOR_IN
84836: IFFALSE 84874
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
84838: LD_ADDR_VAR 0 5
84842: PUSH
84843: LD_VAR 0 5
84847: PPUSH
84848: LD_VAR 0 5
84852: PUSH
84853: LD_INT 1
84855: PLUS
84856: PPUSH
84857: LD_VAR 0 4
84861: PPUSH
84862: CALL_OW 256
84866: PPUSH
84867: CALL_OW 2
84871: ST_TO_ADDR
84872: GO 84835
84874: POP
84875: POP
// if not tmp then
84876: LD_VAR 0 5
84880: NOT
84881: IFFALSE 84885
// exit ;
84883: GO 84933
// if asc then
84885: LD_VAR 0 2
84889: IFFALSE 84913
// result := SortListByListAsc ( units , tmp ) else
84891: LD_ADDR_VAR 0 3
84895: PUSH
84896: LD_VAR 0 1
84900: PPUSH
84901: LD_VAR 0 5
84905: PPUSH
84906: CALL_OW 76
84910: ST_TO_ADDR
84911: GO 84933
// result := SortListByListDesc ( units , tmp ) ;
84913: LD_ADDR_VAR 0 3
84917: PUSH
84918: LD_VAR 0 1
84922: PPUSH
84923: LD_VAR 0 5
84927: PPUSH
84928: CALL_OW 77
84932: ST_TO_ADDR
// end ;
84933: LD_VAR 0 3
84937: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
84938: LD_INT 0
84940: PPUSH
84941: PPUSH
// task := GetTaskList ( mech ) ;
84942: LD_ADDR_VAR 0 4
84946: PUSH
84947: LD_VAR 0 1
84951: PPUSH
84952: CALL_OW 437
84956: ST_TO_ADDR
// if not task then
84957: LD_VAR 0 4
84961: NOT
84962: IFFALSE 84966
// exit ;
84964: GO 85010
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
84966: LD_ADDR_VAR 0 3
84970: PUSH
84971: LD_VAR 0 4
84975: PUSH
84976: LD_INT 1
84978: ARRAY
84979: PUSH
84980: LD_INT 1
84982: ARRAY
84983: PUSH
84984: LD_STRING r
84986: EQUAL
84987: IFFALSE 85009
84989: PUSH
84990: LD_VAR 0 4
84994: PUSH
84995: LD_INT 1
84997: ARRAY
84998: PUSH
84999: LD_INT 4
85001: ARRAY
85002: PUSH
85003: LD_VAR 0 2
85007: EQUAL
85008: AND
85009: ST_TO_ADDR
// end ;
85010: LD_VAR 0 3
85014: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
85015: LD_INT 0
85017: PPUSH
// SetDir ( unit , d ) ;
85018: LD_VAR 0 1
85022: PPUSH
85023: LD_VAR 0 4
85027: PPUSH
85028: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
85032: LD_ADDR_VAR 0 6
85036: PUSH
85037: LD_VAR 0 1
85041: PPUSH
85042: LD_VAR 0 2
85046: PPUSH
85047: LD_VAR 0 3
85051: PPUSH
85052: LD_VAR 0 5
85056: PPUSH
85057: CALL_OW 48
85061: ST_TO_ADDR
// end ;
85062: LD_VAR 0 6
85066: RET
// export function ToNaturalNumber ( number ) ; begin
85067: LD_INT 0
85069: PPUSH
// result := number div 1 ;
85070: LD_ADDR_VAR 0 2
85074: PUSH
85075: LD_VAR 0 1
85079: PUSH
85080: LD_INT 1
85082: DIV
85083: ST_TO_ADDR
// if number < 0 then
85084: LD_VAR 0 1
85088: PUSH
85089: LD_INT 0
85091: LESS
85092: IFFALSE 85102
// result := 0 ;
85094: LD_ADDR_VAR 0 2
85098: PUSH
85099: LD_INT 0
85101: ST_TO_ADDR
// end ;
85102: LD_VAR 0 2
85106: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
85107: LD_INT 0
85109: PPUSH
85110: PPUSH
85111: PPUSH
// if not buildings then
85112: LD_VAR 0 1
85116: NOT
85117: IFFALSE 85121
// exit ;
85119: GO 85236
// tmp := [ ] ;
85121: LD_ADDR_VAR 0 5
85125: PUSH
85126: EMPTY
85127: ST_TO_ADDR
// for b in buildings do
85128: LD_ADDR_VAR 0 4
85132: PUSH
85133: LD_VAR 0 1
85137: PUSH
85138: FOR_IN
85139: IFFALSE 85177
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
85141: LD_ADDR_VAR 0 5
85145: PUSH
85146: LD_VAR 0 5
85150: PPUSH
85151: LD_VAR 0 5
85155: PUSH
85156: LD_INT 1
85158: PLUS
85159: PPUSH
85160: LD_VAR 0 4
85164: PPUSH
85165: CALL_OW 266
85169: PPUSH
85170: CALL_OW 1
85174: ST_TO_ADDR
85175: GO 85138
85177: POP
85178: POP
// if not tmp then
85179: LD_VAR 0 5
85183: NOT
85184: IFFALSE 85188
// exit ;
85186: GO 85236
// if asc then
85188: LD_VAR 0 2
85192: IFFALSE 85216
// result := SortListByListAsc ( buildings , tmp ) else
85194: LD_ADDR_VAR 0 3
85198: PUSH
85199: LD_VAR 0 1
85203: PPUSH
85204: LD_VAR 0 5
85208: PPUSH
85209: CALL_OW 76
85213: ST_TO_ADDR
85214: GO 85236
// result := SortListByListDesc ( buildings , tmp ) ;
85216: LD_ADDR_VAR 0 3
85220: PUSH
85221: LD_VAR 0 1
85225: PPUSH
85226: LD_VAR 0 5
85230: PPUSH
85231: CALL_OW 77
85235: ST_TO_ADDR
// end ;
85236: LD_VAR 0 3
85240: RET
// export function SortByClass ( units , class ) ; var un ; begin
85241: LD_INT 0
85243: PPUSH
85244: PPUSH
// if not units or not class then
85245: LD_VAR 0 1
85249: NOT
85250: IFTRUE 85259
85252: PUSH
85253: LD_VAR 0 2
85257: NOT
85258: OR
85259: IFFALSE 85263
// exit ;
85261: GO 85358
// result := [ ] ;
85263: LD_ADDR_VAR 0 3
85267: PUSH
85268: EMPTY
85269: ST_TO_ADDR
// for un in units do
85270: LD_ADDR_VAR 0 4
85274: PUSH
85275: LD_VAR 0 1
85279: PUSH
85280: FOR_IN
85281: IFFALSE 85356
// if GetClass ( un ) = class then
85283: LD_VAR 0 4
85287: PPUSH
85288: CALL_OW 257
85292: PUSH
85293: LD_VAR 0 2
85297: EQUAL
85298: IFFALSE 85325
// result := Insert ( result , 1 , un ) else
85300: LD_ADDR_VAR 0 3
85304: PUSH
85305: LD_VAR 0 3
85309: PPUSH
85310: LD_INT 1
85312: PPUSH
85313: LD_VAR 0 4
85317: PPUSH
85318: CALL_OW 2
85322: ST_TO_ADDR
85323: GO 85354
// result := Replace ( result , result + 1 , un ) ;
85325: LD_ADDR_VAR 0 3
85329: PUSH
85330: LD_VAR 0 3
85334: PPUSH
85335: LD_VAR 0 3
85339: PUSH
85340: LD_INT 1
85342: PLUS
85343: PPUSH
85344: LD_VAR 0 4
85348: PPUSH
85349: CALL_OW 1
85353: ST_TO_ADDR
85354: GO 85280
85356: POP
85357: POP
// end ;
85358: LD_VAR 0 3
85362: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
85363: LD_INT 0
85365: PPUSH
85366: PPUSH
85367: PPUSH
85368: PPUSH
85369: PPUSH
85370: PPUSH
85371: PPUSH
// result := [ ] ;
85372: LD_ADDR_VAR 0 4
85376: PUSH
85377: EMPTY
85378: ST_TO_ADDR
// if x - r < 0 then
85379: LD_VAR 0 1
85383: PUSH
85384: LD_VAR 0 3
85388: MINUS
85389: PUSH
85390: LD_INT 0
85392: LESS
85393: IFFALSE 85405
// min_x := 0 else
85395: LD_ADDR_VAR 0 8
85399: PUSH
85400: LD_INT 0
85402: ST_TO_ADDR
85403: GO 85421
// min_x := x - r ;
85405: LD_ADDR_VAR 0 8
85409: PUSH
85410: LD_VAR 0 1
85414: PUSH
85415: LD_VAR 0 3
85419: MINUS
85420: ST_TO_ADDR
// if y - r < 0 then
85421: LD_VAR 0 2
85425: PUSH
85426: LD_VAR 0 3
85430: MINUS
85431: PUSH
85432: LD_INT 0
85434: LESS
85435: IFFALSE 85447
// min_y := 0 else
85437: LD_ADDR_VAR 0 7
85441: PUSH
85442: LD_INT 0
85444: ST_TO_ADDR
85445: GO 85463
// min_y := y - r ;
85447: LD_ADDR_VAR 0 7
85451: PUSH
85452: LD_VAR 0 2
85456: PUSH
85457: LD_VAR 0 3
85461: MINUS
85462: ST_TO_ADDR
// max_x := x + r ;
85463: LD_ADDR_VAR 0 9
85467: PUSH
85468: LD_VAR 0 1
85472: PUSH
85473: LD_VAR 0 3
85477: PLUS
85478: ST_TO_ADDR
// max_y := y + r ;
85479: LD_ADDR_VAR 0 10
85483: PUSH
85484: LD_VAR 0 2
85488: PUSH
85489: LD_VAR 0 3
85493: PLUS
85494: ST_TO_ADDR
// for _x = min_x to max_x do
85495: LD_ADDR_VAR 0 5
85499: PUSH
85500: DOUBLE
85501: LD_VAR 0 8
85505: DEC
85506: ST_TO_ADDR
85507: LD_VAR 0 9
85511: PUSH
85512: FOR_TO
85513: IFFALSE 85614
// for _y = min_y to max_y do
85515: LD_ADDR_VAR 0 6
85519: PUSH
85520: DOUBLE
85521: LD_VAR 0 7
85525: DEC
85526: ST_TO_ADDR
85527: LD_VAR 0 10
85531: PUSH
85532: FOR_TO
85533: IFFALSE 85610
// begin if not ValidHex ( _x , _y ) then
85535: LD_VAR 0 5
85539: PPUSH
85540: LD_VAR 0 6
85544: PPUSH
85545: CALL_OW 488
85549: NOT
85550: IFFALSE 85554
// continue ;
85552: GO 85532
// if GetResourceTypeXY ( _x , _y ) then
85554: LD_VAR 0 5
85558: PPUSH
85559: LD_VAR 0 6
85563: PPUSH
85564: CALL_OW 283
85568: IFFALSE 85608
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
85570: LD_ADDR_VAR 0 4
85574: PUSH
85575: LD_VAR 0 4
85579: PPUSH
85580: LD_VAR 0 4
85584: PUSH
85585: LD_INT 1
85587: PLUS
85588: PPUSH
85589: LD_VAR 0 5
85593: PUSH
85594: LD_VAR 0 6
85598: PUSH
85599: EMPTY
85600: LIST
85601: LIST
85602: PPUSH
85603: CALL_OW 1
85607: ST_TO_ADDR
// end ;
85608: GO 85532
85610: POP
85611: POP
85612: GO 85512
85614: POP
85615: POP
// end ;
85616: LD_VAR 0 4
85620: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
85621: LD_INT 0
85623: PPUSH
85624: PPUSH
85625: PPUSH
85626: PPUSH
85627: PPUSH
85628: PPUSH
85629: PPUSH
85630: PPUSH
// if not units then
85631: LD_VAR 0 1
85635: NOT
85636: IFFALSE 85640
// exit ;
85638: GO 86172
// result := UnitFilter ( units , [ f_ok ] ) ;
85640: LD_ADDR_VAR 0 3
85644: PUSH
85645: LD_VAR 0 1
85649: PPUSH
85650: LD_INT 50
85652: PUSH
85653: EMPTY
85654: LIST
85655: PPUSH
85656: CALL_OW 72
85660: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
85661: LD_ADDR_VAR 0 8
85665: PUSH
85666: LD_VAR 0 1
85670: PUSH
85671: LD_INT 1
85673: ARRAY
85674: PPUSH
85675: CALL_OW 255
85679: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
85680: LD_ADDR_VAR 0 10
85684: PUSH
85685: LD_INT 29
85687: PUSH
85688: LD_INT 91
85690: PUSH
85691: LD_INT 49
85693: PUSH
85694: EMPTY
85695: LIST
85696: LIST
85697: LIST
85698: ST_TO_ADDR
// if not result then
85699: LD_VAR 0 3
85703: NOT
85704: IFFALSE 85708
// exit ;
85706: GO 86172
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
85708: LD_ADDR_VAR 0 5
85712: PUSH
85713: LD_INT 81
85715: PUSH
85716: LD_VAR 0 8
85720: PUSH
85721: EMPTY
85722: LIST
85723: LIST
85724: PPUSH
85725: CALL_OW 69
85729: ST_TO_ADDR
// for i in result do
85730: LD_ADDR_VAR 0 4
85734: PUSH
85735: LD_VAR 0 3
85739: PUSH
85740: FOR_IN
85741: IFFALSE 86170
// begin tag := GetTag ( i ) + 1 ;
85743: LD_ADDR_VAR 0 9
85747: PUSH
85748: LD_VAR 0 4
85752: PPUSH
85753: CALL_OW 110
85757: PUSH
85758: LD_INT 1
85760: PLUS
85761: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
85762: LD_ADDR_VAR 0 7
85766: PUSH
85767: LD_VAR 0 4
85771: PPUSH
85772: CALL_OW 250
85776: PPUSH
85777: LD_VAR 0 4
85781: PPUSH
85782: CALL_OW 251
85786: PPUSH
85787: LD_INT 4
85789: PPUSH
85790: CALL 85363 0 3
85794: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
85795: LD_VAR 0 4
85799: PPUSH
85800: CALL_OW 247
85804: PUSH
85805: LD_INT 2
85807: EQUAL
85808: IFFALSE 85820
85810: PUSH
85811: LD_VAR 0 7
85815: PUSH
85816: LD_INT 2
85818: GREATER
85819: AND
85820: IFFALSE 85840
85822: PUSH
85823: LD_VAR 0 4
85827: PPUSH
85828: CALL_OW 264
85832: PUSH
85833: LD_VAR 0 10
85837: IN
85838: NOT
85839: AND
85840: IFFALSE 85879
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
85842: LD_VAR 0 4
85846: PPUSH
85847: LD_VAR 0 7
85851: PUSH
85852: LD_INT 1
85854: ARRAY
85855: PUSH
85856: LD_INT 1
85858: ARRAY
85859: PPUSH
85860: LD_VAR 0 7
85864: PUSH
85865: LD_INT 1
85867: ARRAY
85868: PUSH
85869: LD_INT 2
85871: ARRAY
85872: PPUSH
85873: CALL_OW 116
85877: GO 86168
// if path > tag then
85879: LD_VAR 0 2
85883: PUSH
85884: LD_VAR 0 9
85888: GREATER
85889: IFFALSE 86097
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
85891: LD_ADDR_VAR 0 6
85895: PUSH
85896: LD_VAR 0 5
85900: PPUSH
85901: LD_INT 91
85903: PUSH
85904: LD_VAR 0 4
85908: PUSH
85909: LD_INT 8
85911: PUSH
85912: EMPTY
85913: LIST
85914: LIST
85915: LIST
85916: PPUSH
85917: CALL_OW 72
85921: ST_TO_ADDR
// if nearEnemy then
85922: LD_VAR 0 6
85926: IFFALSE 85995
// begin if GetWeapon ( i ) = ru_time_lapser then
85928: LD_VAR 0 4
85932: PPUSH
85933: CALL_OW 264
85937: PUSH
85938: LD_INT 49
85940: EQUAL
85941: IFFALSE 85969
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
85943: LD_VAR 0 4
85947: PPUSH
85948: LD_VAR 0 6
85952: PPUSH
85953: LD_VAR 0 4
85957: PPUSH
85958: CALL_OW 74
85962: PPUSH
85963: CALL_OW 112
85967: GO 85993
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
85969: LD_VAR 0 4
85973: PPUSH
85974: LD_VAR 0 6
85978: PPUSH
85979: LD_VAR 0 4
85983: PPUSH
85984: CALL_OW 74
85988: PPUSH
85989: CALL 87253 0 2
// end else
85993: GO 86095
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
85995: LD_VAR 0 4
85999: PPUSH
86000: LD_VAR 0 2
86004: PUSH
86005: LD_VAR 0 9
86009: ARRAY
86010: PUSH
86011: LD_INT 1
86013: ARRAY
86014: PPUSH
86015: LD_VAR 0 2
86019: PUSH
86020: LD_VAR 0 9
86024: ARRAY
86025: PUSH
86026: LD_INT 2
86028: ARRAY
86029: PPUSH
86030: CALL_OW 297
86034: PUSH
86035: LD_INT 6
86037: GREATER
86038: IFFALSE 86081
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
86040: LD_VAR 0 4
86044: PPUSH
86045: LD_VAR 0 2
86049: PUSH
86050: LD_VAR 0 9
86054: ARRAY
86055: PUSH
86056: LD_INT 1
86058: ARRAY
86059: PPUSH
86060: LD_VAR 0 2
86064: PUSH
86065: LD_VAR 0 9
86069: ARRAY
86070: PUSH
86071: LD_INT 2
86073: ARRAY
86074: PPUSH
86075: CALL_OW 114
86079: GO 86095
// SetTag ( i , tag ) ;
86081: LD_VAR 0 4
86085: PPUSH
86086: LD_VAR 0 9
86090: PPUSH
86091: CALL_OW 109
// end else
86095: GO 86168
// if enemy then
86097: LD_VAR 0 5
86101: IFFALSE 86168
// begin if GetWeapon ( i ) = ru_time_lapser then
86103: LD_VAR 0 4
86107: PPUSH
86108: CALL_OW 264
86112: PUSH
86113: LD_INT 49
86115: EQUAL
86116: IFFALSE 86144
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
86118: LD_VAR 0 4
86122: PPUSH
86123: LD_VAR 0 5
86127: PPUSH
86128: LD_VAR 0 4
86132: PPUSH
86133: CALL_OW 74
86137: PPUSH
86138: CALL_OW 112
86142: GO 86168
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
86144: LD_VAR 0 4
86148: PPUSH
86149: LD_VAR 0 5
86153: PPUSH
86154: LD_VAR 0 4
86158: PPUSH
86159: CALL_OW 74
86163: PPUSH
86164: CALL 87253 0 2
// end ; end ;
86168: GO 85740
86170: POP
86171: POP
// end ;
86172: LD_VAR 0 3
86176: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
86177: LD_INT 0
86179: PPUSH
86180: PPUSH
86181: PPUSH
// if not unit or IsInUnit ( unit ) then
86182: LD_VAR 0 1
86186: NOT
86187: IFTRUE 86200
86189: PUSH
86190: LD_VAR 0 1
86194: PPUSH
86195: CALL_OW 310
86199: OR
86200: IFFALSE 86204
// exit ;
86202: GO 86295
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
86204: LD_ADDR_VAR 0 4
86208: PUSH
86209: LD_VAR 0 1
86213: PPUSH
86214: CALL_OW 250
86218: PPUSH
86219: LD_VAR 0 2
86223: PPUSH
86224: LD_INT 1
86226: PPUSH
86227: CALL_OW 272
86231: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
86232: LD_ADDR_VAR 0 5
86236: PUSH
86237: LD_VAR 0 1
86241: PPUSH
86242: CALL_OW 251
86246: PPUSH
86247: LD_VAR 0 2
86251: PPUSH
86252: LD_INT 1
86254: PPUSH
86255: CALL_OW 273
86259: ST_TO_ADDR
// if ValidHex ( x , y ) then
86260: LD_VAR 0 4
86264: PPUSH
86265: LD_VAR 0 5
86269: PPUSH
86270: CALL_OW 488
86274: IFFALSE 86295
// ComTurnXY ( unit , x , y ) ;
86276: LD_VAR 0 1
86280: PPUSH
86281: LD_VAR 0 4
86285: PPUSH
86286: LD_VAR 0 5
86290: PPUSH
86291: CALL_OW 118
// end ;
86295: LD_VAR 0 3
86299: RET
// export function SeeUnits ( side , units ) ; var i ; begin
86300: LD_INT 0
86302: PPUSH
86303: PPUSH
// result := false ;
86304: LD_ADDR_VAR 0 3
86308: PUSH
86309: LD_INT 0
86311: ST_TO_ADDR
// if not units then
86312: LD_VAR 0 2
86316: NOT
86317: IFFALSE 86321
// exit ;
86319: GO 86366
// for i in units do
86321: LD_ADDR_VAR 0 4
86325: PUSH
86326: LD_VAR 0 2
86330: PUSH
86331: FOR_IN
86332: IFFALSE 86364
// if See ( side , i ) then
86334: LD_VAR 0 1
86338: PPUSH
86339: LD_VAR 0 4
86343: PPUSH
86344: CALL_OW 292
86348: IFFALSE 86362
// begin result := true ;
86350: LD_ADDR_VAR 0 3
86354: PUSH
86355: LD_INT 1
86357: ST_TO_ADDR
// exit ;
86358: POP
86359: POP
86360: GO 86366
// end ;
86362: GO 86331
86364: POP
86365: POP
// end ;
86366: LD_VAR 0 3
86370: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
86371: LD_INT 0
86373: PPUSH
86374: PPUSH
86375: PPUSH
86376: PPUSH
// if not unit or not points then
86377: LD_VAR 0 1
86381: NOT
86382: IFTRUE 86391
86384: PUSH
86385: LD_VAR 0 2
86389: NOT
86390: OR
86391: IFFALSE 86395
// exit ;
86393: GO 86485
// dist := 99999 ;
86395: LD_ADDR_VAR 0 5
86399: PUSH
86400: LD_INT 99999
86402: ST_TO_ADDR
// for i in points do
86403: LD_ADDR_VAR 0 4
86407: PUSH
86408: LD_VAR 0 2
86412: PUSH
86413: FOR_IN
86414: IFFALSE 86483
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
86416: LD_ADDR_VAR 0 6
86420: PUSH
86421: LD_VAR 0 1
86425: PPUSH
86426: LD_VAR 0 4
86430: PUSH
86431: LD_INT 1
86433: ARRAY
86434: PPUSH
86435: LD_VAR 0 4
86439: PUSH
86440: LD_INT 2
86442: ARRAY
86443: PPUSH
86444: CALL_OW 297
86448: ST_TO_ADDR
// if tmpDist < dist then
86449: LD_VAR 0 6
86453: PUSH
86454: LD_VAR 0 5
86458: LESS
86459: IFFALSE 86481
// begin result := i ;
86461: LD_ADDR_VAR 0 3
86465: PUSH
86466: LD_VAR 0 4
86470: ST_TO_ADDR
// dist := tmpDist ;
86471: LD_ADDR_VAR 0 5
86475: PUSH
86476: LD_VAR 0 6
86480: ST_TO_ADDR
// end ; end ;
86481: GO 86413
86483: POP
86484: POP
// end ;
86485: LD_VAR 0 3
86489: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
86490: LD_INT 0
86492: PPUSH
// uc_side := side ;
86493: LD_ADDR_OWVAR 20
86497: PUSH
86498: LD_VAR 0 1
86502: ST_TO_ADDR
// uc_nation := 3 ;
86503: LD_ADDR_OWVAR 21
86507: PUSH
86508: LD_INT 3
86510: ST_TO_ADDR
// vc_chassis := 25 ;
86511: LD_ADDR_OWVAR 37
86515: PUSH
86516: LD_INT 25
86518: ST_TO_ADDR
// vc_engine := engine_siberite ;
86519: LD_ADDR_OWVAR 39
86523: PUSH
86524: LD_INT 3
86526: ST_TO_ADDR
// vc_control := control_computer ;
86527: LD_ADDR_OWVAR 38
86531: PUSH
86532: LD_INT 3
86534: ST_TO_ADDR
// vc_weapon := 59 ;
86535: LD_ADDR_OWVAR 40
86539: PUSH
86540: LD_INT 59
86542: ST_TO_ADDR
// result := CreateVehicle ;
86543: LD_ADDR_VAR 0 5
86547: PUSH
86548: CALL_OW 45
86552: ST_TO_ADDR
// SetDir ( result , d ) ;
86553: LD_VAR 0 5
86557: PPUSH
86558: LD_VAR 0 4
86562: PPUSH
86563: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
86567: LD_VAR 0 5
86571: PPUSH
86572: LD_VAR 0 2
86576: PPUSH
86577: LD_VAR 0 3
86581: PPUSH
86582: LD_INT 0
86584: PPUSH
86585: CALL_OW 48
// end ;
86589: LD_VAR 0 5
86593: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
86594: LD_INT 0
86596: PPUSH
86597: PPUSH
86598: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
86599: LD_ADDR_VAR 0 2
86603: PUSH
86604: LD_INT 0
86606: PUSH
86607: LD_INT 0
86609: PUSH
86610: LD_INT 0
86612: PUSH
86613: LD_INT 0
86615: PUSH
86616: EMPTY
86617: LIST
86618: LIST
86619: LIST
86620: LIST
86621: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
86622: LD_VAR 0 1
86626: NOT
86627: IFTRUE 86660
86629: PUSH
86630: LD_VAR 0 1
86634: PPUSH
86635: CALL_OW 264
86639: PUSH
86640: LD_INT 12
86642: PUSH
86643: LD_INT 51
86645: PUSH
86646: LD_INT 32
86648: PUSH
86649: LD_INT 89
86651: PUSH
86652: EMPTY
86653: LIST
86654: LIST
86655: LIST
86656: LIST
86657: IN
86658: NOT
86659: OR
86660: IFFALSE 86664
// exit ;
86662: GO 86762
// for i := 1 to 3 do
86664: LD_ADDR_VAR 0 3
86668: PUSH
86669: DOUBLE
86670: LD_INT 1
86672: DEC
86673: ST_TO_ADDR
86674: LD_INT 3
86676: PUSH
86677: FOR_TO
86678: IFFALSE 86760
// begin tmp := GetCargo ( cargo , i ) ;
86680: LD_ADDR_VAR 0 4
86684: PUSH
86685: LD_VAR 0 1
86689: PPUSH
86690: LD_VAR 0 3
86694: PPUSH
86695: CALL_OW 289
86699: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
86700: LD_ADDR_VAR 0 2
86704: PUSH
86705: LD_VAR 0 2
86709: PPUSH
86710: LD_VAR 0 3
86714: PPUSH
86715: LD_VAR 0 4
86719: PPUSH
86720: CALL_OW 1
86724: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
86725: LD_ADDR_VAR 0 2
86729: PUSH
86730: LD_VAR 0 2
86734: PPUSH
86735: LD_INT 4
86737: PPUSH
86738: LD_VAR 0 2
86742: PUSH
86743: LD_INT 4
86745: ARRAY
86746: PUSH
86747: LD_VAR 0 4
86751: PLUS
86752: PPUSH
86753: CALL_OW 1
86757: ST_TO_ADDR
// end ;
86758: GO 86677
86760: POP
86761: POP
// end ;
86762: LD_VAR 0 2
86766: RET
// export function Length ( array ) ; begin
86767: LD_INT 0
86769: PPUSH
// result := array + 0 ;
86770: LD_ADDR_VAR 0 2
86774: PUSH
86775: LD_VAR 0 1
86779: PUSH
86780: LD_INT 0
86782: PLUS
86783: ST_TO_ADDR
// end ;
86784: LD_VAR 0 2
86788: RET
// export function PrepareArray ( array ) ; begin
86789: LD_INT 0
86791: PPUSH
// result := array diff 0 ;
86792: LD_ADDR_VAR 0 2
86796: PUSH
86797: LD_VAR 0 1
86801: PUSH
86802: LD_INT 0
86804: DIFF
86805: ST_TO_ADDR
// if not result [ 1 ] then
86806: LD_VAR 0 2
86810: PUSH
86811: LD_INT 1
86813: ARRAY
86814: NOT
86815: IFFALSE 86835
// result := Delete ( result , 1 ) ;
86817: LD_ADDR_VAR 0 2
86821: PUSH
86822: LD_VAR 0 2
86826: PPUSH
86827: LD_INT 1
86829: PPUSH
86830: CALL_OW 3
86834: ST_TO_ADDR
// end ;
86835: LD_VAR 0 2
86839: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
86840: LD_INT 0
86842: PPUSH
86843: PPUSH
86844: PPUSH
86845: PPUSH
// sibRocketRange := 25 ;
86846: LD_ADDR_VAR 0 6
86850: PUSH
86851: LD_INT 25
86853: ST_TO_ADDR
// result := false ;
86854: LD_ADDR_VAR 0 4
86858: PUSH
86859: LD_INT 0
86861: ST_TO_ADDR
// for i := 0 to 5 do
86862: LD_ADDR_VAR 0 5
86866: PUSH
86867: DOUBLE
86868: LD_INT 0
86870: DEC
86871: ST_TO_ADDR
86872: LD_INT 5
86874: PUSH
86875: FOR_TO
86876: IFFALSE 86943
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
86878: LD_VAR 0 1
86882: PPUSH
86883: LD_VAR 0 5
86887: PPUSH
86888: LD_VAR 0 6
86892: PPUSH
86893: CALL_OW 272
86897: PPUSH
86898: LD_VAR 0 2
86902: PPUSH
86903: LD_VAR 0 5
86907: PPUSH
86908: LD_VAR 0 6
86912: PPUSH
86913: CALL_OW 273
86917: PPUSH
86918: LD_VAR 0 3
86922: PPUSH
86923: CALL_OW 309
86927: IFFALSE 86941
// begin result := true ;
86929: LD_ADDR_VAR 0 4
86933: PUSH
86934: LD_INT 1
86936: ST_TO_ADDR
// exit ;
86937: POP
86938: POP
86939: GO 86945
// end ;
86941: GO 86875
86943: POP
86944: POP
// end ;
86945: LD_VAR 0 4
86949: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
86950: LD_INT 0
86952: PPUSH
86953: PPUSH
86954: PPUSH
// if btype = b_depot then
86955: LD_VAR 0 2
86959: PUSH
86960: LD_INT 0
86962: EQUAL
86963: IFFALSE 86975
// begin result := true ;
86965: LD_ADDR_VAR 0 3
86969: PUSH
86970: LD_INT 1
86972: ST_TO_ADDR
// exit ;
86973: GO 87095
// end ; pom := GetBase ( depot ) ;
86975: LD_ADDR_VAR 0 4
86979: PUSH
86980: LD_VAR 0 1
86984: PPUSH
86985: CALL_OW 274
86989: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
86990: LD_ADDR_VAR 0 5
86994: PUSH
86995: LD_VAR 0 2
86999: PPUSH
87000: LD_VAR 0 1
87004: PPUSH
87005: CALL_OW 248
87009: PPUSH
87010: CALL_OW 450
87014: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
87015: LD_ADDR_VAR 0 3
87019: PUSH
87020: LD_VAR 0 4
87024: PPUSH
87025: LD_INT 1
87027: PPUSH
87028: CALL_OW 275
87032: PUSH
87033: LD_VAR 0 5
87037: PUSH
87038: LD_INT 1
87040: ARRAY
87041: GREATEREQUAL
87042: IFFALSE 87068
87044: PUSH
87045: LD_VAR 0 4
87049: PPUSH
87050: LD_INT 2
87052: PPUSH
87053: CALL_OW 275
87057: PUSH
87058: LD_VAR 0 5
87062: PUSH
87063: LD_INT 2
87065: ARRAY
87066: GREATEREQUAL
87067: AND
87068: IFFALSE 87094
87070: PUSH
87071: LD_VAR 0 4
87075: PPUSH
87076: LD_INT 3
87078: PPUSH
87079: CALL_OW 275
87083: PUSH
87084: LD_VAR 0 5
87088: PUSH
87089: LD_INT 3
87091: ARRAY
87092: GREATEREQUAL
87093: AND
87094: ST_TO_ADDR
// end ;
87095: LD_VAR 0 3
87099: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
87100: LD_INT 0
87102: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
87103: LD_VAR 0 1
87107: PPUSH
87108: LD_VAR 0 2
87112: PPUSH
87113: LD_INT 0
87115: PPUSH
87116: LD_INT 0
87118: PPUSH
87119: LD_INT 1
87121: PPUSH
87122: LD_INT 0
87124: PPUSH
87125: CALL_OW 587
// end ;
87129: LD_VAR 0 3
87133: RET
// export function CenterOnNow ( unit ) ; begin
87134: LD_INT 0
87136: PPUSH
// result := IsInUnit ( unit ) ;
87137: LD_ADDR_VAR 0 2
87141: PUSH
87142: LD_VAR 0 1
87146: PPUSH
87147: CALL_OW 310
87151: ST_TO_ADDR
// if not result then
87152: LD_VAR 0 2
87156: NOT
87157: IFFALSE 87169
// result := unit ;
87159: LD_ADDR_VAR 0 2
87163: PUSH
87164: LD_VAR 0 1
87168: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
87169: LD_VAR 0 1
87173: PPUSH
87174: CALL_OW 87
// end ;
87178: LD_VAR 0 2
87182: RET
// export function ComMoveHex ( unit , hex ) ; begin
87183: LD_INT 0
87185: PPUSH
// if not hex then
87186: LD_VAR 0 2
87190: NOT
87191: IFFALSE 87195
// exit ;
87193: GO 87248
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
87195: LD_VAR 0 2
87199: PUSH
87200: LD_INT 1
87202: ARRAY
87203: PPUSH
87204: LD_VAR 0 2
87208: PUSH
87209: LD_INT 2
87211: ARRAY
87212: PPUSH
87213: CALL_OW 428
87217: IFFALSE 87221
// exit ;
87219: GO 87248
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
87221: LD_VAR 0 1
87225: PPUSH
87226: LD_VAR 0 2
87230: PUSH
87231: LD_INT 1
87233: ARRAY
87234: PPUSH
87235: LD_VAR 0 2
87239: PUSH
87240: LD_INT 2
87242: ARRAY
87243: PPUSH
87244: CALL_OW 111
// end ;
87248: LD_VAR 0 3
87252: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
87253: LD_INT 0
87255: PPUSH
87256: PPUSH
87257: PPUSH
// if not unit or not enemy then
87258: LD_VAR 0 1
87262: NOT
87263: IFTRUE 87272
87265: PUSH
87266: LD_VAR 0 2
87270: NOT
87271: OR
87272: IFFALSE 87276
// exit ;
87274: GO 87402
// x := GetX ( enemy ) ;
87276: LD_ADDR_VAR 0 4
87280: PUSH
87281: LD_VAR 0 2
87285: PPUSH
87286: CALL_OW 250
87290: ST_TO_ADDR
// y := GetY ( enemy ) ;
87291: LD_ADDR_VAR 0 5
87295: PUSH
87296: LD_VAR 0 2
87300: PPUSH
87301: CALL_OW 251
87305: ST_TO_ADDR
// if ValidHex ( x , y ) then
87306: LD_VAR 0 4
87310: PPUSH
87311: LD_VAR 0 5
87315: PPUSH
87316: CALL_OW 488
87320: IFFALSE 87402
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
87322: LD_VAR 0 2
87326: PPUSH
87327: CALL_OW 247
87331: PUSH
87332: LD_INT 3
87334: PUSH
87335: LD_INT 2
87337: PUSH
87338: EMPTY
87339: LIST
87340: LIST
87341: IN
87342: IFTRUE 87365
87344: PUSH
87345: LD_VAR 0 1
87349: PPUSH
87350: CALL_OW 255
87354: PPUSH
87355: LD_VAR 0 2
87359: PPUSH
87360: CALL_OW 292
87364: OR
87365: IFFALSE 87383
// ComAttackUnit ( unit , enemy ) else
87367: LD_VAR 0 1
87371: PPUSH
87372: LD_VAR 0 2
87376: PPUSH
87377: CALL_OW 115
87381: GO 87402
// ComAgressiveMove ( unit , x , y ) ;
87383: LD_VAR 0 1
87387: PPUSH
87388: LD_VAR 0 4
87392: PPUSH
87393: LD_VAR 0 5
87397: PPUSH
87398: CALL_OW 114
// end ;
87402: LD_VAR 0 3
87406: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
87407: LD_INT 0
87409: PPUSH
87410: PPUSH
87411: PPUSH
// list := AreaToList ( area , 0 ) ;
87412: LD_ADDR_VAR 0 5
87416: PUSH
87417: LD_VAR 0 1
87421: PPUSH
87422: LD_INT 0
87424: PPUSH
87425: CALL_OW 517
87429: ST_TO_ADDR
// if not list then
87430: LD_VAR 0 5
87434: NOT
87435: IFFALSE 87439
// exit ;
87437: GO 87569
// if all then
87439: LD_VAR 0 2
87443: IFFALSE 87531
// begin for i := 1 to list [ 1 ] do
87445: LD_ADDR_VAR 0 4
87449: PUSH
87450: DOUBLE
87451: LD_INT 1
87453: DEC
87454: ST_TO_ADDR
87455: LD_VAR 0 5
87459: PUSH
87460: LD_INT 1
87462: ARRAY
87463: PUSH
87464: FOR_TO
87465: IFFALSE 87527
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
87467: LD_ADDR_VAR 0 3
87471: PUSH
87472: LD_VAR 0 3
87476: PPUSH
87477: LD_VAR 0 3
87481: PUSH
87482: LD_INT 1
87484: PLUS
87485: PPUSH
87486: LD_VAR 0 5
87490: PUSH
87491: LD_INT 1
87493: ARRAY
87494: PUSH
87495: LD_VAR 0 4
87499: ARRAY
87500: PUSH
87501: LD_VAR 0 5
87505: PUSH
87506: LD_INT 2
87508: ARRAY
87509: PUSH
87510: LD_VAR 0 4
87514: ARRAY
87515: PUSH
87516: EMPTY
87517: LIST
87518: LIST
87519: PPUSH
87520: CALL_OW 1
87524: ST_TO_ADDR
87525: GO 87464
87527: POP
87528: POP
// exit ;
87529: GO 87569
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
87531: LD_ADDR_VAR 0 3
87535: PUSH
87536: LD_VAR 0 5
87540: PUSH
87541: LD_INT 1
87543: ARRAY
87544: PUSH
87545: LD_INT 1
87547: ARRAY
87548: PUSH
87549: LD_VAR 0 5
87553: PUSH
87554: LD_INT 2
87556: ARRAY
87557: PUSH
87558: LD_INT 1
87560: ARRAY
87561: PUSH
87562: EMPTY
87563: LIST
87564: LIST
87565: PUSH
87566: EMPTY
87567: LIST
87568: ST_TO_ADDR
// end ;
87569: LD_VAR 0 3
87573: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
87574: LD_INT 0
87576: PPUSH
87577: PPUSH
// list := AreaToList ( area , 0 ) ;
87578: LD_ADDR_VAR 0 4
87582: PUSH
87583: LD_VAR 0 1
87587: PPUSH
87588: LD_INT 0
87590: PPUSH
87591: CALL_OW 517
87595: ST_TO_ADDR
// if not list then
87596: LD_VAR 0 4
87600: NOT
87601: IFFALSE 87605
// exit ;
87603: GO 87646
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
87605: LD_ADDR_VAR 0 3
87609: PUSH
87610: LD_VAR 0 4
87614: PUSH
87615: LD_INT 1
87617: ARRAY
87618: PUSH
87619: LD_INT 1
87621: ARRAY
87622: PUSH
87623: LD_VAR 0 4
87627: PUSH
87628: LD_INT 2
87630: ARRAY
87631: PUSH
87632: LD_INT 1
87634: ARRAY
87635: PUSH
87636: LD_VAR 0 2
87640: PUSH
87641: EMPTY
87642: LIST
87643: LIST
87644: LIST
87645: ST_TO_ADDR
// end ;
87646: LD_VAR 0 3
87650: RET
// export function First ( array ) ; begin
87651: LD_INT 0
87653: PPUSH
// if not array then
87654: LD_VAR 0 1
87658: NOT
87659: IFFALSE 87663
// exit ;
87661: GO 87677
// result := array [ 1 ] ;
87663: LD_ADDR_VAR 0 2
87667: PUSH
87668: LD_VAR 0 1
87672: PUSH
87673: LD_INT 1
87675: ARRAY
87676: ST_TO_ADDR
// end ;
87677: LD_VAR 0 2
87681: RET
// export function Last ( array ) ; begin
87682: LD_INT 0
87684: PPUSH
// if not array then
87685: LD_VAR 0 1
87689: NOT
87690: IFFALSE 87694
// exit ;
87692: GO 87710
// result := array [ array ] ;
87694: LD_ADDR_VAR 0 2
87698: PUSH
87699: LD_VAR 0 1
87703: PUSH
87704: LD_VAR 0 1
87708: ARRAY
87709: ST_TO_ADDR
// end ;
87710: LD_VAR 0 2
87714: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
87715: LD_INT 0
87717: PPUSH
87718: PPUSH
// result := [ ] ;
87719: LD_ADDR_VAR 0 5
87723: PUSH
87724: EMPTY
87725: ST_TO_ADDR
// if not array then
87726: LD_VAR 0 1
87730: NOT
87731: IFFALSE 87735
// exit ;
87733: GO 87847
// for i := 1 to array do
87735: LD_ADDR_VAR 0 6
87739: PUSH
87740: DOUBLE
87741: LD_INT 1
87743: DEC
87744: ST_TO_ADDR
87745: LD_VAR 0 1
87749: PUSH
87750: FOR_TO
87751: IFFALSE 87845
// if array [ i ] [ index ] = value then
87753: LD_VAR 0 1
87757: PUSH
87758: LD_VAR 0 6
87762: ARRAY
87763: PUSH
87764: LD_VAR 0 2
87768: ARRAY
87769: PUSH
87770: LD_VAR 0 3
87774: EQUAL
87775: IFFALSE 87843
// begin if indexColumn then
87777: LD_VAR 0 4
87781: IFFALSE 87817
// result := Join ( result , array [ i ] [ indexColumn ] ) else
87783: LD_ADDR_VAR 0 5
87787: PUSH
87788: LD_VAR 0 5
87792: PPUSH
87793: LD_VAR 0 1
87797: PUSH
87798: LD_VAR 0 6
87802: ARRAY
87803: PUSH
87804: LD_VAR 0 4
87808: ARRAY
87809: PPUSH
87810: CALL 82855 0 2
87814: ST_TO_ADDR
87815: GO 87843
// result := Join ( result , array [ i ] ) ;
87817: LD_ADDR_VAR 0 5
87821: PUSH
87822: LD_VAR 0 5
87826: PPUSH
87827: LD_VAR 0 1
87831: PUSH
87832: LD_VAR 0 6
87836: ARRAY
87837: PPUSH
87838: CALL 82855 0 2
87842: ST_TO_ADDR
// end ;
87843: GO 87750
87845: POP
87846: POP
// end ;
87847: LD_VAR 0 5
87851: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
87852: LD_INT 0
87854: PPUSH
// if not vehicles or not parkingPoint then
87855: LD_VAR 0 1
87859: NOT
87860: IFTRUE 87869
87862: PUSH
87863: LD_VAR 0 2
87867: NOT
87868: OR
87869: IFFALSE 87873
// exit ;
87871: GO 87971
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
87873: LD_ADDR_VAR 0 1
87877: PUSH
87878: LD_VAR 0 1
87882: PPUSH
87883: LD_INT 50
87885: PUSH
87886: EMPTY
87887: LIST
87888: PUSH
87889: LD_INT 3
87891: PUSH
87892: LD_INT 92
87894: PUSH
87895: LD_VAR 0 2
87899: PUSH
87900: LD_INT 1
87902: ARRAY
87903: PUSH
87904: LD_VAR 0 2
87908: PUSH
87909: LD_INT 2
87911: ARRAY
87912: PUSH
87913: LD_INT 8
87915: PUSH
87916: EMPTY
87917: LIST
87918: LIST
87919: LIST
87920: LIST
87921: PUSH
87922: EMPTY
87923: LIST
87924: LIST
87925: PUSH
87926: EMPTY
87927: LIST
87928: LIST
87929: PPUSH
87930: CALL_OW 72
87934: ST_TO_ADDR
// if not vehicles then
87935: LD_VAR 0 1
87939: NOT
87940: IFFALSE 87944
// exit ;
87942: GO 87971
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
87944: LD_VAR 0 1
87948: PPUSH
87949: LD_VAR 0 2
87953: PUSH
87954: LD_INT 1
87956: ARRAY
87957: PPUSH
87958: LD_VAR 0 2
87962: PUSH
87963: LD_INT 2
87965: ARRAY
87966: PPUSH
87967: CALL_OW 111
// end ;
87971: LD_VAR 0 3
87975: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
87976: LD_INT 0
87978: PPUSH
87979: PPUSH
87980: PPUSH
// if not side or not area then
87981: LD_VAR 0 1
87985: NOT
87986: IFTRUE 87995
87988: PUSH
87989: LD_VAR 0 2
87993: NOT
87994: OR
87995: IFFALSE 87999
// exit ;
87997: GO 88118
// tmp := AreaToList ( area , 0 ) ;
87999: LD_ADDR_VAR 0 5
88003: PUSH
88004: LD_VAR 0 2
88008: PPUSH
88009: LD_INT 0
88011: PPUSH
88012: CALL_OW 517
88016: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
88017: LD_ADDR_VAR 0 4
88021: PUSH
88022: DOUBLE
88023: LD_INT 1
88025: DEC
88026: ST_TO_ADDR
88027: LD_VAR 0 5
88031: PUSH
88032: LD_INT 1
88034: ARRAY
88035: PUSH
88036: FOR_TO
88037: IFFALSE 88116
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
88039: LD_VAR 0 5
88043: PUSH
88044: LD_INT 1
88046: ARRAY
88047: PUSH
88048: LD_VAR 0 4
88052: ARRAY
88053: PPUSH
88054: LD_VAR 0 5
88058: PUSH
88059: LD_INT 2
88061: ARRAY
88062: PUSH
88063: LD_VAR 0 4
88067: ARRAY
88068: PPUSH
88069: CALL_OW 351
88073: IFFALSE 88114
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
88075: LD_VAR 0 5
88079: PUSH
88080: LD_INT 1
88082: ARRAY
88083: PUSH
88084: LD_VAR 0 4
88088: ARRAY
88089: PPUSH
88090: LD_VAR 0 5
88094: PUSH
88095: LD_INT 2
88097: ARRAY
88098: PUSH
88099: LD_VAR 0 4
88103: ARRAY
88104: PPUSH
88105: LD_VAR 0 1
88109: PPUSH
88110: CALL_OW 244
// end ;
88114: GO 88036
88116: POP
88117: POP
// end ;
88118: LD_VAR 0 3
88122: RET
// export function UniqueArray ( array ) ; var i ; begin
88123: LD_INT 0
88125: PPUSH
88126: PPUSH
// result := [ ] ;
88127: LD_ADDR_VAR 0 2
88131: PUSH
88132: EMPTY
88133: ST_TO_ADDR
// if not array then
88134: LD_VAR 0 1
88138: NOT
88139: IFFALSE 88143
// exit ;
88141: GO 88204
// for i := 1 to array do
88143: LD_ADDR_VAR 0 3
88147: PUSH
88148: DOUBLE
88149: LD_INT 1
88151: DEC
88152: ST_TO_ADDR
88153: LD_VAR 0 1
88157: PUSH
88158: FOR_TO
88159: IFFALSE 88202
// if not array [ i ] in result then
88161: LD_VAR 0 1
88165: PUSH
88166: LD_VAR 0 3
88170: ARRAY
88171: PUSH
88172: LD_VAR 0 2
88176: IN
88177: NOT
88178: IFFALSE 88200
// result := Join ( result , i ) ;
88180: LD_ADDR_VAR 0 2
88184: PUSH
88185: LD_VAR 0 2
88189: PPUSH
88190: LD_VAR 0 3
88194: PPUSH
88195: CALL 82855 0 2
88199: ST_TO_ADDR
88200: GO 88158
88202: POP
88203: POP
// end ; end_of_file
88204: LD_VAR 0 2
88208: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
88209: LD_VAR 0 1
88213: PUSH
88214: LD_INT 200
88216: DOUBLE
88217: GREATEREQUAL
88218: IFFALSE 88226
88220: LD_INT 299
88222: DOUBLE
88223: LESSEQUAL
88224: IFTRUE 88228
88226: GO 88260
88228: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
88229: LD_VAR 0 1
88233: PPUSH
88234: LD_VAR 0 2
88238: PPUSH
88239: LD_VAR 0 3
88243: PPUSH
88244: LD_VAR 0 4
88248: PPUSH
88249: LD_VAR 0 5
88253: PPUSH
88254: CALL 39041 0 5
88258: GO 88337
88260: LD_INT 300
88262: DOUBLE
88263: GREATEREQUAL
88264: IFFALSE 88272
88266: LD_INT 399
88268: DOUBLE
88269: LESSEQUAL
88270: IFTRUE 88274
88272: GO 88336
88274: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
88275: LD_VAR 0 1
88279: PPUSH
88280: LD_VAR 0 2
88284: PPUSH
88285: LD_VAR 0 3
88289: PPUSH
88290: LD_VAR 0 4
88294: PPUSH
88295: LD_VAR 0 5
88299: PPUSH
88300: LD_VAR 0 6
88304: PPUSH
88305: LD_VAR 0 7
88309: PPUSH
88310: LD_VAR 0 8
88314: PPUSH
88315: LD_VAR 0 9
88319: PPUSH
88320: LD_VAR 0 10
88324: PPUSH
88325: LD_VAR 0 11
88329: PPUSH
88330: CALL 34844 0 11
88334: GO 88337
88336: POP
// end ;
88337: PPOPN 11
88339: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
88340: LD_VAR 0 1
88344: PPUSH
88345: LD_VAR 0 2
88349: PPUSH
88350: LD_VAR 0 3
88354: PPUSH
88355: LD_VAR 0 4
88359: PPUSH
88360: LD_VAR 0 5
88364: PPUSH
88365: CALL 38341 0 5
// end ; end_of_file
88369: PPOPN 5
88371: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
88372: LD_VAR 0 1
88376: PPUSH
88377: LD_VAR 0 2
88381: PPUSH
88382: LD_VAR 0 3
88386: PPUSH
88387: LD_VAR 0 4
88391: PPUSH
88392: LD_VAR 0 5
88396: PPUSH
88397: LD_VAR 0 6
88401: PPUSH
88402: CALL 22384 0 6
// end ;
88406: PPOPN 6
88408: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
88409: LD_INT 0
88411: PPUSH
// begin if not units then
88412: LD_VAR 0 1
88416: NOT
88417: IFFALSE 88421
// exit ;
88419: GO 88455
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
88421: LD_VAR 0 1
88425: PPUSH
88426: LD_VAR 0 2
88430: PPUSH
88431: LD_VAR 0 3
88435: PPUSH
88436: LD_VAR 0 4
88440: PPUSH
88441: LD_VAR 0 5
88445: PPUSH
88446: LD_VAR 0 6
88450: PPUSH
88451: CALL 44638 0 6
// end ;
88455: PPOPN 7
88457: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
88458: CALL 22271 0 0
// end ;
88462: PPOPN 1
88464: END
