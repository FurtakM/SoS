// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 41
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7155 0 0
// CreateNature ;
  57: CALL 20493 0 0
// PrepareRussian ;
  61: CALL 5654 0 0
// PrepareVehicles ;
  65: CALL 1572 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 1981 0 0
// PreparePlayerApemans ;
  77: CALL 2119 0 0
// Action ;
  81: CALL 10474 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 41
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 42
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 43
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 22
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 23
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 39
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 40
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 29
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 45
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 38
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 24
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 25
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 26
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 28
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 32
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 44
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 30
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 31
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 36
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 37
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 33
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 27
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 41
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 41
 611: NOT
 612: PPUSH
 613: LD_EXP 43
 617: PPUSH
 618: CALL 41131 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 14
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 41131 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 41
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 41
 804: NOT
 805: PPUSH
 806: LD_EXP 43
 810: PPUSH
 811: CALL 41131 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 43
 925: PPUSH
 926: CALL 41131 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 43
1040: PPUSH
1041: CALL 41131 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 41
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 41
1154: NOT
1155: PPUSH
1156: LD_EXP 43
1160: PPUSH
1161: CALL 41131 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 41
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 41
1274: NOT
1275: PPUSH
1276: LD_EXP 43
1280: PPUSH
1281: CALL 41131 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 41
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 41
1394: NOT
1395: PPUSH
1396: LD_EXP 43
1400: PPUSH
1401: CALL 41131 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 41
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 41
1514: NOT
1515: PPUSH
1516: LD_EXP 43
1520: PPUSH
1521: CALL 41131 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; end ;
1567: LD_VAR 0 1
1571: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1580: LD_ADDR_VAR 0 5
1584: PUSH
1585: LD_STRING 06_VehiclesIn06_1
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: CALL_OW 30
1594: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1595: LD_ADDR_EXP 39
1599: PUSH
1600: LD_STRING 06_ResourcesInCargo06_1
1602: PPUSH
1603: EMPTY
1604: PPUSH
1605: CALL_OW 30
1609: ST_TO_ADDR
// cargoList := [ ] ;
1610: LD_ADDR_VAR 0 6
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// uc_side := 1 ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if vehicles then
1625: LD_VAR 0 5
1629: IFFALSE 1976
// begin for i := 1 to vehicles do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_VAR 0 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 21
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 37
1673: PUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1709: LD_ADDR_OWVAR 38
1713: PUSH
1714: LD_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1729: LD_ADDR_OWVAR 40
1733: PUSH
1734: LD_VAR 0 5
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 5
1747: ARRAY
1748: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1749: LD_ADDR_OWVAR 41
1753: PUSH
1754: LD_INT 40
1756: ST_TO_ADDR
// veh := CreateVehicle ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1767: LD_VAR 0 4
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1779: LD_VAR 0 4
1783: PPUSH
1784: LD_INT 2
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 49
// end ;
1794: GO 1646
1796: POP
1797: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1798: LD_ADDR_VAR 0 6
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: ST_TO_ADDR
// if cargoList then
1843: LD_VAR 0 6
1847: IFFALSE 1976
// for i := 1 to cargoList do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: DOUBLE
1855: LD_INT 1
1857: DEC
1858: ST_TO_ADDR
1859: LD_VAR 0 6
1863: PUSH
1864: FOR_TO
1865: IFFALSE 1974
// begin if resources then
1867: LD_EXP 39
1871: IFFALSE 1972
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_EXP 39
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_EXP 39
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 2
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1939: LD_VAR 0 6
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_EXP 39
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PUSH
1964: LD_INT 3
1966: ARRAY
1967: PPUSH
1968: CALL_OW 291
// end ; end ;
1972: GO 1864
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// export function PrepareOthers ; var i , veh ; begin
1981: LD_INT 0
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 1 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// uc_nation := 1 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2002: LD_ADDR_EXP 11
2006: PUSH
2007: LD_STRING OthersIn06
2009: PPUSH
2010: CALL_OW 31
2014: ST_TO_ADDR
// for i in others do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 11
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: ST_TO_ADDR
// if veh then
2069: LD_VAR 0 3
2073: IFFALSE 2095
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
2093: GO 2110
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2095: LD_VAR 0 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// end ;
2110: GO 2025
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// uc_side = 1 ;
2124: LD_ADDR_OWVAR 20
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// uc_nation = 0 ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 0
2139: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2140: LD_ADDR_EXP 12
2144: PUSH
2145: LD_STRING ApeIn06
2147: PPUSH
2148: CALL_OW 31
2152: ST_TO_ADDR
// if not ape then
2153: LD_EXP 12
2157: NOT
2158: IFFALSE 2162
// exit ;
2160: GO 2194
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side := 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation := 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_EXP 43
2330: PPUSH
2331: CALL 41131 0 3
2335: ST_TO_ADDR
// if not Denis then
2336: LD_EXP 9
2340: NOT
2341: IFFALSE 2345
// exit ;
2343: GO 2486
// for i = 1 to xy do
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_VAR 0 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2460
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 2
2382: PUSH
2383: LD_VAR 0 3
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: CALL_OW 428
2397: PUSH
2398: LD_INT 0
2400: EQUAL
2401: IFFALSE 2458
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2403: LD_EXP 9
2407: PPUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 48
// if IsPlaced ( Denis ) then
2445: LD_EXP 9
2449: PPUSH
2450: CALL_OW 305
2454: IFFALSE 2458
// break ;
2456: GO 2460
// end ;
2458: GO 2360
2460: POP
2461: POP
// SetClass ( Denis , 4 ) ;
2462: LD_EXP 9
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2474: LD_EXP 9
2478: PPUSH
2479: LD_INT 750
2481: PPUSH
2482: CALL_OW 234
// end ;
2486: LD_VAR 0 1
2490: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
// area := HarrisonSupportArea ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_INT 3
2505: ST_TO_ADDR
// dir := 2 ;
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 2
2513: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2514: LD_VAR 0 4
2518: PPUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 70
2533: IFFALSE 2551
// begin area := HarrisonSupportArea2 ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 31
2542: ST_TO_ADDR
// dir := 1 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; uc_side = 1 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// uc_nation = 1 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// vc_engine := engine_combustion ;
2567: LD_ADDR_OWVAR 39
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// vc_control := control_manual ;
2575: LD_ADDR_OWVAR 38
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2583: LD_ADDR_OWVAR 40
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 2
2619: ST_TO_ADDR
// veh := CreateVehicle ;
2620: LD_ADDR_VAR 0 3
2624: PUSH
2625: CALL_OW 45
2629: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_VAR 0 5
2639: PPUSH
2640: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 50
2668: PPUSH
2669: CALL_OW 240
// hc_class := class_engineer ;
2673: LD_ADDR_OWVAR 28
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// hc_sex := sex_male ;
2681: LD_ADDR_OWVAR 27
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2689: LD_ADDR_OWVAR 33
2693: PUSH
2694: LD_STRING SecondCharsGal
2696: ST_TO_ADDR
// hc_face_number := 52 ;
2697: LD_ADDR_OWVAR 34
2701: PUSH
2702: LD_INT 52
2704: ST_TO_ADDR
// hc_name := Craig Brown ;
2705: LD_ADDR_OWVAR 26
2709: PUSH
2710: LD_STRING Craig Brown
2712: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2713: LD_ADDR_OWVAR 29
2717: PUSH
2718: LD_INT 10
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2728: LD_ADDR_OWVAR 30
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2751: LD_ADDR_OWVAR 31
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2774: LD_ADDR_EXP 17
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: CALL_OW 52
// vc_engine := engine_combustion ;
2798: LD_ADDR_OWVAR 39
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// vc_control := control_manual ;
2806: LD_ADDR_OWVAR 38
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2814: LD_ADDR_OWVAR 40
2818: PUSH
2819: LD_INT 5
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2843: LD_ADDR_OWVAR 37
2847: PUSH
2848: LD_INT 2
2850: ST_TO_ADDR
// veh := CreateVehicle ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 45
2860: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2892: LD_VAR 0 3
2896: PPUSH
2897: LD_INT 50
2899: PPUSH
2900: CALL_OW 240
// hc_class := class_soldier ;
2904: LD_ADDR_OWVAR 28
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_sex := sex_female ;
2912: LD_ADDR_OWVAR 27
2916: PUSH
2917: LD_INT 2
2919: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING SecondCharsGal
2927: ST_TO_ADDR
// hc_face_number := 42 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 42
2935: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2936: LD_ADDR_OWVAR 29
2940: PUSH
2941: LD_INT 11
2943: PUSH
2944: LD_INT 10
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2951: LD_ADDR_OWVAR 26
2955: PUSH
2956: LD_STRING Ingrid Jonsson
2958: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2959: LD_ADDR_OWVAR 30
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2982: LD_ADDR_OWVAR 31
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3015: LD_EXP 18
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 23
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 26
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: LD_EXP 3
3089: PUSH
3090: LD_EXP 4
3094: PUSH
3095: LD_EXP 8
3099: PUSH
3100: LD_EXP 9
3104: PUSH
3105: LD_EXP 5
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: DIFF
3117: ST_TO_ADDR
// for i in _tmp do
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_VAR 0 4
3127: PUSH
3128: FOR_IN
3129: IFFALSE 3170
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 32
3138: PPUSH
3139: CALL_OW 308
3143: PUSH
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL_OW 302
3153: AND
3154: IFFALSE 3168
// begin tmp := i ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_VAR 0 2
3165: ST_TO_ADDR
// break ;
3166: GO 3170
// end ;
3168: GO 3128
3170: POP
3171: POP
// if not tmp then
3172: LD_VAR 0 3
3176: NOT
3177: IFFALSE 3189
// tmp := JMM ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_EXP 1
3188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3189: LD_INT 35
3191: PPUSH
3192: CALL_OW 67
// if IsDead ( tmp ) then
3196: LD_VAR 0 3
3200: PPUSH
3201: CALL_OW 301
3205: IFFALSE 3217
// tmp := JMM ;
3207: LD_ADDR_VAR 0 3
3211: PUSH
3212: LD_EXP 1
3216: ST_TO_ADDR
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , tmp , 15 ] ] ) or timeToEnd < 3 3$00 ;
3217: LD_INT 81
3219: PUSH
3220: LD_INT 1
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 91
3229: PUSH
3230: LD_VAR 0 3
3234: PUSH
3235: LD_INT 15
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: NOT
3252: PUSH
3253: LD_EXP 26
3257: PUSH
3258: LD_INT 6300
3260: LESS
3261: OR
3262: IFFALSE 3189
// blockSpawn := 1 ;
3264: LD_ADDR_EXP 29
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// uc_side := 4 ;
3272: LD_ADDR_OWVAR 20
3276: PUSH
3277: LD_INT 4
3279: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3280: LD_ADDR_EXP 15
3284: PUSH
3285: LD_STRING Joan
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: LD_EXP 43
3295: PPUSH
3296: CALL 41131 0 3
3300: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3301: LD_EXP 15
3305: PPUSH
3306: LD_VAR 0 3
3310: PPUSH
3311: CALL_OW 250
3315: PPUSH
3316: LD_VAR 0 3
3320: PPUSH
3321: CALL_OW 251
3325: PPUSH
3326: LD_INT 5
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3336: LD_EXP 15
3340: PPUSH
3341: LD_INT 250
3343: PPUSH
3344: CALL_OW 234
// InGameOn ;
3348: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3352: LD_EXP 15
3356: PPUSH
3357: CALL_OW 87
// wait ( 0 0$2 ) ;
3361: LD_INT 70
3363: PPUSH
3364: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3368: LD_VAR 0 3
3372: PPUSH
3373: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3377: LD_VAR 0 3
3381: PPUSH
3382: CALL_OW 122
// wait ( 0 0$1 ) ;
3386: LD_INT 35
3388: PPUSH
3389: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: LD_EXP 15
3402: PPUSH
3403: CALL_OW 112
// wait ( 0 0$2 ) ;
3407: LD_INT 70
3409: PPUSH
3410: CALL_OW 67
// DialogueOn ;
3414: CALL_OW 6
// if tmp = JMM then
3418: LD_VAR 0 3
3422: PUSH
3423: LD_EXP 1
3427: EQUAL
3428: IFFALSE 3577
// begin ComTurnUnit ( JMM , Joan ) ;
3430: LD_EXP 1
3434: PPUSH
3435: LD_EXP 15
3439: PPUSH
3440: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3444: LD_EXP 1
3448: PPUSH
3449: LD_STRING D5b-JMM-1
3451: PPUSH
3452: CALL_OW 88
// DialogueOff ;
3456: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3460: LD_EXP 15
3464: PPUSH
3465: LD_INT 500
3467: PPUSH
3468: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3472: LD_EXP 15
3476: PPUSH
3477: LD_EXP 1
3481: PPUSH
3482: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3486: LD_EXP 1
3490: PPUSH
3491: LD_EXP 15
3495: PPUSH
3496: CALL_OW 119
// wait ( 0 0$1 ) ;
3500: LD_INT 35
3502: PPUSH
3503: CALL_OW 67
// DialogueOn ;
3507: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3511: LD_EXP 15
3515: PPUSH
3516: LD_STRING D5b-Joan-1
3518: PPUSH
3519: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3523: LD_EXP 1
3527: PPUSH
3528: LD_STRING D5b-JMM-2
3530: PPUSH
3531: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3535: LD_EXP 15
3539: PPUSH
3540: LD_STRING D5b-Joan-2
3542: PPUSH
3543: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_STRING D5b-JMM-3
3554: PPUSH
3555: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_STRING D5b-Joan-3
3566: PPUSH
3567: CALL_OW 88
// DialogueOff ;
3571: CALL_OW 7
// end else
3575: GO 3942
// begin ComTurnUnit ( tmp , Joan ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_EXP 15
3586: PPUSH
3587: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3591: LD_VAR 0 3
3595: PPUSH
3596: LD_STRING D5a-Sol1-1
3598: PPUSH
3599: CALL_OW 88
// DialogueOff ;
3603: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_INT 500
3614: PPUSH
3615: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3619: LD_EXP 15
3623: PPUSH
3624: LD_VAR 0 3
3628: PPUSH
3629: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3633: LD_VAR 0 3
3637: PPUSH
3638: LD_EXP 15
3642: PPUSH
3643: CALL_OW 119
// wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// DialogueOn ;
3654: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3658: LD_EXP 15
3662: PPUSH
3663: LD_STRING D5a-Joan-1
3665: PPUSH
3666: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3670: LD_VAR 0 3
3674: PPUSH
3675: LD_STRING D5a-Sol1-2
3677: PPUSH
3678: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3682: LD_EXP 15
3686: PPUSH
3687: LD_STRING D5a-Joan-2
3689: PPUSH
3690: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_STRING D5a-Sol1-3
3701: PPUSH
3702: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3706: LD_EXP 15
3710: PPUSH
3711: LD_STRING D5a-Joan-3
3713: PPUSH
3714: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_STRING D5a-Sol1-4
3725: PPUSH
3726: CALL_OW 88
// DialogueOff ;
3730: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3734: LD_EXP 1
3738: PUSH
3739: LD_INT 55
3741: PUSH
3742: EMPTY
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: IN
3750: IFFALSE 3773
// begin ComMoveUnit ( JMM , Joan ) ;
3752: LD_EXP 1
3756: PPUSH
3757: LD_EXP 15
3761: PPUSH
3762: CALL_OW 112
// wait ( 0 0$05 ) ;
3766: LD_INT 175
3768: PPUSH
3769: CALL_OW 67
// end ; ComExit ( JMM ) ;
3773: LD_EXP 1
3777: PPUSH
3778: CALL 78930 0 1
// wait ( 0 0$1 ) ;
3782: LD_INT 35
3784: PPUSH
3785: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3789: LD_INT 35
3791: PPUSH
3792: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3796: LD_EXP 15
3800: PUSH
3801: LD_VAR 0 3
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PPUSH
3810: LD_EXP 1
3814: PPUSH
3815: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3819: LD_EXP 15
3823: PPUSH
3824: LD_EXP 1
3828: PPUSH
3829: CALL_OW 296
3833: PUSH
3834: LD_INT 5
3836: LESS
3837: IFFALSE 3789
// ComTurnUnit ( Joan , JMM ) ;
3839: LD_EXP 15
3843: PPUSH
3844: LD_EXP 1
3848: PPUSH
3849: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3853: LD_EXP 1
3857: PPUSH
3858: LD_EXP 15
3862: PPUSH
3863: CALL_OW 119
// wait ( 0 0$1 ) ;
3867: LD_INT 35
3869: PPUSH
3870: CALL_OW 67
// DialogueOn ;
3874: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3878: LD_EXP 15
3882: PPUSH
3883: LD_STRING D5a-Joan-4
3885: PPUSH
3886: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3890: LD_EXP 1
3894: PPUSH
3895: LD_STRING D5a-JMM-4
3897: PPUSH
3898: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3902: LD_EXP 15
3906: PPUSH
3907: LD_STRING D5a-Joan-5
3909: PPUSH
3910: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_STRING D5a-JMM-5
3921: PPUSH
3922: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_STRING D5a-Joan-6
3933: PPUSH
3934: CALL_OW 88
// DialogueOff ;
3938: CALL_OW 7
// end ; DialogueOn ;
3942: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3946: LD_EXP 1
3950: PPUSH
3951: LD_STRING D6-JMM-1
3953: PPUSH
3954: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3958: LD_EXP 15
3962: PPUSH
3963: LD_STRING D6-Joan-1
3965: PPUSH
3966: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3970: LD_EXP 1
3974: PPUSH
3975: LD_STRING D6-JMM-2
3977: PPUSH
3978: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3982: LD_EXP 15
3986: PPUSH
3987: LD_STRING D6-Joan-2
3989: PPUSH
3990: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3994: LD_EXP 1
3998: PPUSH
3999: LD_STRING D6-JMM-3
4001: PPUSH
4002: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4006: LD_EXP 15
4010: PPUSH
4011: LD_STRING D6-Joan-3
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D6-JMM-4
4025: PPUSH
4026: CALL_OW 88
// DialogueOff ;
4030: CALL_OW 7
// InGameOff ;
4034: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4038: LD_EXP 15
4042: PPUSH
4043: LD_INT 1
4045: PPUSH
4046: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4050: LD_STRING MJ
4052: PPUSH
4053: CALL_OW 337
// joanStatus = 1 ;
4057: LD_ADDR_EXP 16
4061: PUSH
4062: LD_INT 1
4064: ST_TO_ADDR
// blockSpawn = 0 ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_INT 0
4072: ST_TO_ADDR
// end ;
4073: LD_VAR 0 1
4077: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4078: LD_INT 0
4080: PPUSH
4081: PPUSH
// if not number or number > 8 then
4082: LD_VAR 0 1
4086: NOT
4087: PUSH
4088: LD_VAR 0 1
4092: PUSH
4093: LD_INT 8
4095: GREATER
4096: OR
4097: IFFALSE 4101
// exit ;
4099: GO 5649
// repeat wait ( 0 0$7 ) ;
4101: LD_INT 245
4103: PPUSH
4104: CALL_OW 67
// until blockSpawn = 0 ;
4108: LD_EXP 29
4112: PUSH
4113: LD_INT 0
4115: EQUAL
4116: IFFALSE 4101
// uc_side := 1 ;
4118: LD_ADDR_OWVAR 20
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// uc_nation := 1 ;
4126: LD_ADDR_OWVAR 21
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// InitHc ;
4134: CALL_OW 19
// if number = 1 then
4138: LD_VAR 0 1
4142: PUSH
4143: LD_INT 1
4145: EQUAL
4146: IFFALSE 4322
// begin hc_class := 3 ;
4148: LD_ADDR_OWVAR 28
4152: PUSH
4153: LD_INT 3
4155: ST_TO_ADDR
// hc_sex := sex_male ;
4156: LD_ADDR_OWVAR 27
4160: PUSH
4161: LD_INT 1
4163: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING SecondCharsGal
4171: ST_TO_ADDR
// hc_face_number := 55 ;
4172: LD_ADDR_OWVAR 34
4176: PUSH
4177: LD_INT 55
4179: ST_TO_ADDR
// hc_name := George McCarthy ;
4180: LD_ADDR_OWVAR 26
4184: PUSH
4185: LD_STRING George McCarthy
4187: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4188: LD_ADDR_OWVAR 29
4192: PUSH
4193: LD_INT 11
4195: PUSH
4196: LD_INT 10
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4203: LD_ADDR_OWVAR 30
4207: PUSH
4208: LD_INT 0
4210: PUSH
4211: LD_INT 0
4213: PUSH
4214: LD_INT 2
4216: PUSH
4217: LD_INT 0
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4226: LD_ADDR_OWVAR 31
4230: PUSH
4231: LD_INT 1
4233: PUSH
4234: LD_INT 2
4236: PUSH
4237: LD_INT 3
4239: PUSH
4240: LD_INT 1
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: ST_TO_ADDR
// un = CreateHuman ;
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: CALL_OW 44
4258: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_INT 23
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: CALL_OW 87
// wait ( 0 0$1 ) ;
4283: LD_INT 35
4285: PPUSH
4286: CALL_OW 67
// DialogueOn ;
4290: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4294: LD_VAR 0 3
4298: PPUSH
4299: LD_STRING D11d-Sol4-1
4301: PPUSH
4302: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4306: LD_EXP 1
4310: PPUSH
4311: LD_STRING D11d-JMM-1
4313: PPUSH
4314: CALL_OW 88
// DialogueOff ;
4318: CALL_OW 7
// end ; if number = 2 then
4322: LD_VAR 0 1
4326: PUSH
4327: LD_INT 2
4329: EQUAL
4330: IFFALSE 4506
// begin hc_class := 1 ;
4332: LD_ADDR_OWVAR 28
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// hc_sex := sex_male ;
4340: LD_ADDR_OWVAR 27
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4348: LD_ADDR_OWVAR 33
4352: PUSH
4353: LD_STRING AmGalRemake
4355: ST_TO_ADDR
// hc_face_number := 7 ;
4356: LD_ADDR_OWVAR 34
4360: PUSH
4361: LD_INT 7
4363: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING Bobby Jordan
4371: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4372: LD_ADDR_OWVAR 29
4376: PUSH
4377: LD_INT 9
4379: PUSH
4380: LD_INT 11
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4387: LD_ADDR_OWVAR 30
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: LD_INT 0
4397: PUSH
4398: LD_INT 0
4400: PUSH
4401: LD_INT 1
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4410: LD_ADDR_OWVAR 31
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: LD_INT 1
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: ST_TO_ADDR
// un = CreateHuman ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: CALL_OW 44
4442: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_INT 24
4450: PPUSH
4451: LD_INT 1
4453: PPUSH
4454: CALL_OW 49
// wait ( 0 0$1 ) ;
4458: LD_INT 35
4460: PPUSH
4461: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4465: LD_VAR 0 3
4469: PPUSH
4470: CALL_OW 87
// DialogueOn ;
4474: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4478: LD_VAR 0 3
4482: PPUSH
4483: LD_STRING D11b-Sol3-1
4485: PPUSH
4486: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4490: LD_EXP 1
4494: PPUSH
4495: LD_STRING D11b-JMM-1
4497: PPUSH
4498: CALL_OW 88
// DialogueOff ;
4502: CALL_OW 7
// end ; if number = 3 then
4506: LD_VAR 0 1
4510: PUSH
4511: LD_INT 3
4513: EQUAL
4514: IFFALSE 4678
// begin hc_class := 1 ;
4516: LD_ADDR_OWVAR 28
4520: PUSH
4521: LD_INT 1
4523: ST_TO_ADDR
// hc_sex := sex_male ;
4524: LD_ADDR_OWVAR 27
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// hc_gallery := DJ ;
4532: LD_ADDR_OWVAR 33
4536: PUSH
4537: LD_STRING DJ
4539: ST_TO_ADDR
// hc_face_number := 1 ;
4540: LD_ADDR_OWVAR 34
4544: PUSH
4545: LD_INT 1
4547: ST_TO_ADDR
// hc_name := Darius Dajay ;
4548: LD_ADDR_OWVAR 26
4552: PUSH
4553: LD_STRING Darius Dajay
4555: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4556: LD_ADDR_OWVAR 29
4560: PUSH
4561: LD_INT 11
4563: PUSH
4564: LD_INT 11
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4571: LD_ADDR_OWVAR 30
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: LD_INT 0
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: LD_INT 0
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4594: LD_ADDR_OWVAR 31
4598: PUSH
4599: LD_INT 4
4601: PUSH
4602: LD_INT 0
4604: PUSH
4605: LD_INT 1
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: ST_TO_ADDR
// un = CreateHuman ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: CALL_OW 44
4626: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4627: LD_VAR 0 3
4631: PPUSH
4632: LD_INT 25
4634: PPUSH
4635: LD_INT 1
4637: PPUSH
4638: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL_OW 87
// wait ( 0 0$1 ) ;
4651: LD_INT 35
4653: PPUSH
4654: CALL_OW 67
// DialogueOn ;
4658: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4662: LD_VAR 0 3
4666: PPUSH
4667: LD_STRING D11f-Sol5-1
4669: PPUSH
4670: CALL_OW 88
// DialogueOff ;
4674: CALL_OW 7
// end ; if number = 4 then
4678: LD_VAR 0 1
4682: PUSH
4683: LD_INT 4
4685: EQUAL
4686: IFFALSE 4823
// begin hc_class := 2 ;
4688: LD_ADDR_OWVAR 28
4692: PUSH
4693: LD_INT 2
4695: ST_TO_ADDR
// hc_sex := sex_female ;
4696: LD_ADDR_OWVAR 27
4700: PUSH
4701: LD_INT 2
4703: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4704: LD_ADDR_OWVAR 33
4708: PUSH
4709: LD_STRING SecondCharsGal
4711: ST_TO_ADDR
// hc_face_number := 46 ;
4712: LD_ADDR_OWVAR 34
4716: PUSH
4717: LD_INT 46
4719: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4720: LD_ADDR_OWVAR 26
4724: PUSH
4725: LD_STRING Sylvia Creak
4727: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4728: LD_ADDR_OWVAR 29
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: LD_INT 9
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4743: LD_ADDR_OWVAR 30
4747: PUSH
4748: LD_INT 0
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4766: LD_ADDR_OWVAR 31
4770: PUSH
4771: LD_INT 1
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: LD_INT 1
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: ST_TO_ADDR
// un = CreateHuman ;
4789: LD_ADDR_VAR 0 3
4793: PUSH
4794: CALL_OW 44
4798: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 26
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: CALL_OW 87
// end ; if number = 5 then
4823: LD_VAR 0 1
4827: PUSH
4828: LD_INT 5
4830: EQUAL
4831: IFFALSE 5007
// begin hc_class := 1 ;
4833: LD_ADDR_OWVAR 28
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// hc_sex := sex_female ;
4841: LD_ADDR_OWVAR 27
4845: PUSH
4846: LD_INT 2
4848: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4849: LD_ADDR_OWVAR 33
4853: PUSH
4854: LD_STRING SecondCharsGal
4856: ST_TO_ADDR
// hc_face_number := 37 ;
4857: LD_ADDR_OWVAR 34
4861: PUSH
4862: LD_INT 37
4864: ST_TO_ADDR
// hc_name := Malena Johnson ;
4865: LD_ADDR_OWVAR 26
4869: PUSH
4870: LD_STRING Malena Johnson
4872: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4873: LD_ADDR_OWVAR 29
4877: PUSH
4878: LD_INT 11
4880: PUSH
4881: LD_INT 10
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4888: LD_ADDR_OWVAR 30
4892: PUSH
4893: LD_INT 1
4895: PUSH
4896: LD_INT 1
4898: PUSH
4899: LD_INT 0
4901: PUSH
4902: LD_INT 0
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4911: LD_ADDR_OWVAR 31
4915: PUSH
4916: LD_INT 1
4918: PUSH
4919: LD_INT 1
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: LD_INT 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// un = CreateHuman ;
4934: LD_ADDR_VAR 0 3
4938: PUSH
4939: CALL_OW 44
4943: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4944: LD_VAR 0 3
4948: PPUSH
4949: LD_INT 27
4951: PPUSH
4952: LD_INT 1
4954: PPUSH
4955: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4959: LD_VAR 0 3
4963: PPUSH
4964: CALL_OW 87
// wait ( 0 0$1 ) ;
4968: LD_INT 35
4970: PPUSH
4971: CALL_OW 67
// DialogueOn ;
4975: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4979: LD_VAR 0 3
4983: PPUSH
4984: LD_STRING D11c-FSol3-1
4986: PPUSH
4987: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4991: LD_EXP 1
4995: PPUSH
4996: LD_STRING D11c-JMM-1
4998: PPUSH
4999: CALL_OW 88
// DialogueOff ;
5003: CALL_OW 7
// end ; if number = 6 then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 6
5014: EQUAL
5015: IFFALSE 5189
// begin hc_class := 1 ;
5017: LD_ADDR_OWVAR 28
5021: PUSH
5022: LD_INT 1
5024: ST_TO_ADDR
// hc_sex := sex_male ;
5025: LD_ADDR_OWVAR 27
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5033: LD_ADDR_OWVAR 33
5037: PUSH
5038: LD_STRING AmGalRemake
5040: ST_TO_ADDR
// hc_face_number := 1 ;
5041: LD_ADDR_OWVAR 34
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// hc_name := Charles Brown ;
5049: LD_ADDR_OWVAR 26
5053: PUSH
5054: LD_STRING Charles Brown
5056: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5057: LD_ADDR_OWVAR 29
5061: PUSH
5062: LD_INT 12
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5072: LD_ADDR_OWVAR 30
5076: PUSH
5077: LD_INT 2
5079: PUSH
5080: LD_INT 0
5082: PUSH
5083: LD_INT 0
5085: PUSH
5086: LD_INT 0
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5095: LD_ADDR_OWVAR 31
5099: PUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 0
5105: PUSH
5106: LD_INT 1
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: ST_TO_ADDR
// un = CreateHuman ;
5118: LD_ADDR_VAR 0 3
5122: PUSH
5123: CALL_OW 44
5127: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5128: LD_VAR 0 3
5132: PPUSH
5133: LD_INT 28
5135: PPUSH
5136: LD_INT 1
5138: PPUSH
5139: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5143: LD_VAR 0 3
5147: PPUSH
5148: CALL_OW 87
// wait ( 0 0$1 ) ;
5152: LD_INT 35
5154: PPUSH
5155: CALL_OW 67
// DialogueOn ;
5159: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5163: LD_VAR 0 3
5167: PPUSH
5168: LD_STRING D4-Sol1-5
5170: PPUSH
5171: CALL_OW 88
// DialogueOff ;
5175: CALL_OW 7
// tempCharles = un ;
5179: LD_ADDR_EXP 13
5183: PUSH
5184: LD_VAR 0 3
5188: ST_TO_ADDR
// end ; if number = 7 then
5189: LD_VAR 0 1
5193: PUSH
5194: LD_INT 7
5196: EQUAL
5197: IFFALSE 5469
// begin hc_class := 1 ;
5199: LD_ADDR_OWVAR 28
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// hc_sex := sex_female ;
5207: LD_ADDR_OWVAR 27
5211: PUSH
5212: LD_INT 2
5214: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5215: LD_ADDR_OWVAR 33
5219: PUSH
5220: LD_STRING AmGalRemake
5222: ST_TO_ADDR
// hc_face_number := 2 ;
5223: LD_ADDR_OWVAR 34
5227: PUSH
5228: LD_INT 2
5230: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5231: LD_ADDR_OWVAR 26
5235: PUSH
5236: LD_STRING Rebecca Macdonald
5238: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5239: LD_ADDR_OWVAR 29
5243: PUSH
5244: LD_INT 10
5246: PUSH
5247: LD_INT 10
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5254: LD_ADDR_OWVAR 30
5258: PUSH
5259: LD_INT 1
5261: PUSH
5262: LD_INT 0
5264: PUSH
5265: LD_INT 0
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5277: LD_ADDR_OWVAR 31
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 0
5287: PUSH
5288: LD_INT 0
5290: PUSH
5291: LD_INT 1
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: ST_TO_ADDR
// un = CreateHuman ;
5300: LD_ADDR_VAR 0 3
5304: PUSH
5305: CALL_OW 44
5309: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5310: LD_VAR 0 3
5314: PPUSH
5315: LD_INT 29
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5325: LD_VAR 0 3
5329: PPUSH
5330: CALL_OW 87
// wait ( 0 0$1 ) ;
5334: LD_INT 35
5336: PPUSH
5337: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5341: LD_INT 30
5343: PPUSH
5344: LD_INT 22
5346: PUSH
5347: LD_INT 3
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PPUSH
5354: CALL_OW 70
5358: IFFALSE 5469
// begin DialogueOn ;
5360: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: CALL_OW 250
5373: PPUSH
5374: LD_VAR 0 3
5378: PPUSH
5379: CALL_OW 251
5383: PPUSH
5384: LD_INT 1
5386: PPUSH
5387: LD_INT 15
5389: NEG
5390: PPUSH
5391: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5395: LD_VAR 0 3
5399: PPUSH
5400: CALL_OW 250
5404: PPUSH
5405: LD_VAR 0 3
5409: PPUSH
5410: CALL_OW 251
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5422: LD_VAR 0 3
5426: PPUSH
5427: LD_STRING D11a-FSol2-1
5429: PPUSH
5430: CALL_OW 88
// DialogueOff ;
5434: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5438: LD_INT 3
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: CALL_OW 471
// wait ( 0 0$2 ) ;
5450: LD_INT 70
5452: PPUSH
5453: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5457: LD_INT 3
5459: PPUSH
5460: LD_VAR 0 3
5464: PPUSH
5465: CALL_OW 472
// end ; end ; if number = 8 then
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 8
5476: EQUAL
5477: IFFALSE 5633
// begin hc_class := 1 ;
5479: LD_ADDR_OWVAR 28
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// hc_sex := sex_female ;
5487: LD_ADDR_OWVAR 27
5491: PUSH
5492: LD_INT 2
5494: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5495: LD_ADDR_OWVAR 33
5499: PUSH
5500: LD_STRING SecondCharsGal
5502: ST_TO_ADDR
// hc_face_number := 45 ;
5503: LD_ADDR_OWVAR 34
5507: PUSH
5508: LD_INT 45
5510: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5511: LD_ADDR_OWVAR 26
5515: PUSH
5516: LD_STRING Margherite Simpson
5518: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5519: LD_ADDR_OWVAR 29
5523: PUSH
5524: LD_INT 12
5526: PUSH
5527: LD_INT 10
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5534: LD_ADDR_OWVAR 30
5538: PUSH
5539: LD_INT 1
5541: PUSH
5542: LD_INT 2
5544: PUSH
5545: LD_INT 0
5547: PUSH
5548: LD_INT 0
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5557: LD_ADDR_OWVAR 31
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: LD_INT 2
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: LD_INT 1
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: ST_TO_ADDR
// un = CreateHuman ;
5580: LD_ADDR_VAR 0 3
5584: PUSH
5585: CALL_OW 44
5589: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5590: LD_VAR 0 3
5594: PPUSH
5595: LD_INT 33
5597: PPUSH
5598: LD_INT 1
5600: PPUSH
5601: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5605: LD_VAR 0 3
5609: PPUSH
5610: CALL_OW 87
// wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5621: LD_VAR 0 3
5625: PPUSH
5626: LD_STRING D11e-FSol4-1
5628: PPUSH
5629: CALL_OW 88
// end ; arrivals := arrivals union un ;
5633: LD_ADDR_EXP 44
5637: PUSH
5638: LD_EXP 44
5642: PUSH
5643: LD_VAR 0 3
5647: UNION
5648: ST_TO_ADDR
// end ; end_of_file
5649: LD_VAR 0 2
5653: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5654: LD_INT 0
5656: PPUSH
5657: PPUSH
// ruAttackers := [ ] ;
5658: LD_ADDR_EXP 47
5662: PUSH
5663: EMPTY
5664: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5665: LD_ADDR_EXP 48
5669: PUSH
5670: EMPTY
5671: ST_TO_ADDR
// if Difficulty < 3 then
5672: LD_OWVAR 67
5676: PUSH
5677: LD_INT 3
5679: LESS
5680: IFFALSE 5697
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5682: LD_INT 130
5684: PPUSH
5685: LD_INT 81
5687: PPUSH
5688: CALL_OW 428
5692: PPUSH
5693: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5697: LD_INT 3
5699: PPUSH
5700: LD_INT 3
5702: PPUSH
5703: LD_INT 2
5705: PPUSH
5706: LD_EXP 34
5710: PPUSH
5711: LD_EXP 35
5715: PPUSH
5716: CALL_OW 12
5720: PPUSH
5721: LD_INT 2
5723: PPUSH
5724: LD_INT 4
5726: PPUSH
5727: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5731: LD_INT 3
5733: PPUSH
5734: LD_INT 3
5736: PPUSH
5737: LD_INT 8
5739: PPUSH
5740: LD_EXP 34
5744: PPUSH
5745: LD_EXP 35
5749: PPUSH
5750: CALL_OW 12
5754: PPUSH
5755: LD_INT 1
5757: PPUSH
5758: LD_INT 4
5760: PPUSH
5761: CALL 6909 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: LD_INT 67
5773: PPUSH
5774: LD_EXP 34
5778: PPUSH
5779: LD_EXP 35
5783: PPUSH
5784: CALL_OW 12
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: LD_INT 2
5794: PPUSH
5795: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5799: LD_INT 3
5801: PPUSH
5802: LD_INT 3
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_EXP 34
5812: PPUSH
5813: LD_EXP 35
5817: PPUSH
5818: CALL_OW 12
5822: PPUSH
5823: LD_INT 3
5825: PPUSH
5826: LD_INT 6
5828: PPUSH
5829: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5833: LD_INT 3
5835: PPUSH
5836: LD_INT 3
5838: PPUSH
5839: LD_INT 17
5841: PPUSH
5842: LD_EXP 34
5846: PPUSH
5847: LD_EXP 35
5851: PPUSH
5852: CALL_OW 12
5856: PPUSH
5857: LD_INT 3
5859: PPUSH
5860: LD_INT 6
5862: PPUSH
5863: CALL 6909 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5867: LD_INT 3
5869: PPUSH
5870: LD_INT 3
5872: PPUSH
5873: LD_INT 32
5875: PPUSH
5876: LD_EXP 34
5880: PPUSH
5881: LD_EXP 35
5885: PPUSH
5886: CALL_OW 12
5890: PPUSH
5891: LD_INT 4
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL 6909 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 3
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 21
5918: PUSH
5919: LD_INT 3
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 30
5928: PUSH
5929: LD_INT 32
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 69
5945: PUSH
5946: FOR_IN
5947: IFFALSE 5987
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5949: LD_INT 3
5951: PPUSH
5952: LD_INT 3
5954: PPUSH
5955: LD_VAR 0 2
5959: PPUSH
5960: LD_EXP 34
5964: PPUSH
5965: LD_EXP 35
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: CALL 6909 0 6
5985: GO 5946
5987: POP
5988: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
5989: LD_ADDR_VAR 0 2
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_INT 3
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 21
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 30
6016: PUSH
6017: LD_INT 31
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 69
6033: PUSH
6034: FOR_IN
6035: IFFALSE 6063
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6037: LD_EXP 34
6041: PPUSH
6042: LD_EXP 35
6046: PPUSH
6047: CALL_OW 12
6051: PPUSH
6052: LD_VAR 0 2
6056: PPUSH
6057: CALL 7019 0 2
6061: GO 6034
6063: POP
6064: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6065: LD_INT 3
6067: PPUSH
6068: LD_INT 32
6070: PPUSH
6071: LD_INT 3
6073: PPUSH
6074: CALL 7298 0 3
// end ;
6078: LD_VAR 0 1
6082: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6083: LD_INT 22
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 32
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PPUSH
6107: CALL_OW 69
6111: IFFALSE 6188
6113: GO 6115
6115: DISABLE
6116: LD_INT 0
6118: PPUSH
// begin enable ;
6119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6120: LD_ADDR_VAR 0 1
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 32
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: CALL_OW 69
6153: PUSH
6154: FOR_IN
6155: IFFALSE 6186
// if GetFuel ( i ) < 3 then
6157: LD_VAR 0 1
6161: PPUSH
6162: CALL_OW 261
6166: PUSH
6167: LD_INT 3
6169: LESS
6170: IFFALSE 6184
// SetFuel ( i , 3 ) ;
6172: LD_VAR 0 1
6176: PPUSH
6177: LD_INT 3
6179: PPUSH
6180: CALL_OW 240
6184: GO 6154
6186: POP
6187: POP
// end ;
6188: PPOPN 1
6190: END
// every 10 10$00 trigger Difficulty > 1 do var i , un , points , tag ;
6191: LD_OWVAR 67
6195: PUSH
6196: LD_INT 1
6198: GREATER
6199: IFFALSE 6768
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
// begin uc_side := 3 ;
6210: LD_ADDR_OWVAR 20
6214: PUSH
6215: LD_INT 3
6217: ST_TO_ADDR
// uc_nation := 3 ;
6218: LD_ADDR_OWVAR 21
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// for i := 1 to 2 do
6226: LD_ADDR_VAR 0 1
6230: PUSH
6231: DOUBLE
6232: LD_INT 1
6234: DEC
6235: ST_TO_ADDR
6236: LD_INT 2
6238: PUSH
6239: FOR_TO
6240: IFFALSE 6354
// begin InitHC_All ( ) ;
6242: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6246: LD_INT 0
6248: PPUSH
6249: LD_INT 4
6251: PUSH
6252: LD_INT 5
6254: PUSH
6255: LD_INT 6
6257: PUSH
6258: LD_INT 6
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_OWVAR 67
6271: ARRAY
6272: PPUSH
6273: CALL_OW 381
// un := CreateHuman ;
6277: LD_ADDR_VAR 0 2
6281: PUSH
6282: CALL_OW 44
6286: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6287: LD_VAR 0 2
6291: PPUSH
6292: LD_INT 91
6294: PPUSH
6295: LD_INT 87
6297: PPUSH
6298: LD_INT 3
6300: PPUSH
6301: LD_INT 0
6303: PPUSH
6304: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6308: LD_ADDR_EXP 48
6312: PUSH
6313: LD_EXP 48
6317: PPUSH
6318: LD_EXP 48
6322: PUSH
6323: LD_INT 1
6325: PLUS
6326: PPUSH
6327: LD_VAR 0 2
6331: PPUSH
6332: CALL_OW 1
6336: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6337: LD_VAR 0 2
6341: PPUSH
6342: LD_INT 46
6344: PPUSH
6345: LD_INT 78
6347: PPUSH
6348: CALL_OW 114
// end ;
6352: GO 6239
6354: POP
6355: POP
// if Difficulty > 2 then
6356: LD_OWVAR 67
6360: PUSH
6361: LD_INT 2
6363: GREATER
6364: IFFALSE 6496
// begin for i := 1 to 3 do
6366: LD_ADDR_VAR 0 1
6370: PUSH
6371: DOUBLE
6372: LD_INT 1
6374: DEC
6375: ST_TO_ADDR
6376: LD_INT 3
6378: PUSH
6379: FOR_TO
6380: IFFALSE 6494
// begin InitHC_All ( ) ;
6382: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6386: LD_INT 0
6388: PPUSH
6389: LD_INT 4
6391: PUSH
6392: LD_INT 5
6394: PUSH
6395: LD_INT 6
6397: PUSH
6398: LD_INT 6
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_OWVAR 67
6411: ARRAY
6412: PPUSH
6413: CALL_OW 381
// un := CreateHuman ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: CALL_OW 44
6426: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6427: LD_VAR 0 2
6431: PPUSH
6432: LD_INT 91
6434: PPUSH
6435: LD_INT 87
6437: PPUSH
6438: LD_INT 3
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6448: LD_ADDR_EXP 48
6452: PUSH
6453: LD_EXP 48
6457: PPUSH
6458: LD_EXP 48
6462: PUSH
6463: LD_INT 1
6465: PLUS
6466: PPUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: CALL_OW 1
6476: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6477: LD_VAR 0 2
6481: PPUSH
6482: LD_INT 89
6484: PPUSH
6485: LD_INT 148
6487: PPUSH
6488: CALL_OW 114
// end ;
6492: GO 6379
6494: POP
6495: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: LD_INT 33
6503: PUSH
6504: LD_INT 61
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 49
6513: PUSH
6514: LD_INT 85
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 76
6523: PUSH
6524: LD_INT 99
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 81
6533: PUSH
6534: LD_INT 135
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 111
6543: PUSH
6544: LD_INT 155
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: LD_INT 147
6553: PUSH
6554: LD_INT 158
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6569: LD_INT 1050
6571: PPUSH
6572: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6576: LD_ADDR_VAR 0 1
6580: PUSH
6581: DOUBLE
6582: LD_INT 1
6584: DEC
6585: ST_TO_ADDR
6586: LD_EXP 48
6590: PUSH
6591: FOR_TO
6592: IFFALSE 6759
// begin un := ruAttackersInForest [ i ] ;
6594: LD_ADDR_VAR 0 2
6598: PUSH
6599: LD_EXP 48
6603: PUSH
6604: LD_VAR 0 1
6608: ARRAY
6609: ST_TO_ADDR
// tag := GetTag ( un ) ;
6610: LD_ADDR_VAR 0 4
6614: PUSH
6615: LD_VAR 0 2
6619: PPUSH
6620: CALL_OW 110
6624: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6625: LD_VAR 0 2
6629: PPUSH
6630: CALL_OW 302
6634: PUSH
6635: LD_VAR 0 2
6639: PPUSH
6640: CALL_OW 314
6644: NOT
6645: AND
6646: IFFALSE 6757
// begin if tag <> i then
6648: LD_VAR 0 4
6652: PUSH
6653: LD_VAR 0 1
6657: NONEQUAL
6658: IFFALSE 6686
// begin SetTag ( un , i ) ;
6660: LD_VAR 0 2
6664: PPUSH
6665: LD_VAR 0 1
6669: PPUSH
6670: CALL_OW 109
// tag := i ;
6674: LD_ADDR_VAR 0 4
6678: PUSH
6679: LD_VAR 0 1
6683: ST_TO_ADDR
// end else
6684: GO 6718
// begin SetTag ( un , i + 1 ) ;
6686: LD_VAR 0 2
6690: PPUSH
6691: LD_VAR 0 1
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: PPUSH
6700: CALL_OW 109
// tag := i + 1 ;
6704: LD_ADDR_VAR 0 4
6708: PUSH
6709: LD_VAR 0 1
6713: PUSH
6714: LD_INT 1
6716: PLUS
6717: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6718: LD_VAR 0 2
6722: PPUSH
6723: LD_VAR 0 3
6727: PUSH
6728: LD_VAR 0 4
6732: ARRAY
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_VAR 0 3
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: PUSH
6749: LD_INT 2
6751: ARRAY
6752: PPUSH
6753: CALL_OW 114
// end ; end ;
6757: GO 6591
6759: POP
6760: POP
// until not ruAttackersInForest ;
6761: LD_EXP 48
6765: NOT
6766: IFFALSE 6569
// end ; end_of_file
6768: PPOPN 4
6770: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
// if not characters then
6776: LD_VAR 0 1
6780: NOT
6781: IFFALSE 6785
// exit ;
6783: GO 6864
// speaker := characters [ rand ( 1 , characters ) ] ;
6785: LD_ADDR_VAR 0 6
6789: PUSH
6790: LD_VAR 0 1
6794: PUSH
6795: LD_INT 1
6797: PPUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 12
6807: ARRAY
6808: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6809: LD_VAR 0 6
6813: PPUSH
6814: CALL_OW 258
6818: PUSH
6819: LD_INT 1
6821: EQUAL
6822: IFFALSE 6840
// Say ( speaker , dialogMID ) else
6824: LD_VAR 0 6
6828: PPUSH
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 88
6838: GO 6854
// Say ( speaker , dialogFID ) ;
6840: LD_VAR 0 6
6844: PPUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: CALL_OW 88
// result := speaker ;
6854: LD_ADDR_VAR 0 4
6858: PUSH
6859: LD_VAR 0 6
6863: ST_TO_ADDR
// end ;
6864: LD_VAR 0 4
6868: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6869: LD_INT 0
6871: PPUSH
6872: PPUSH
// for i in charactersList do
6873: LD_ADDR_VAR 0 4
6877: PUSH
6878: LD_VAR 0 1
6882: PUSH
6883: FOR_IN
6884: IFFALSE 6902
// SaveCharacters ( i , ident ) ;
6886: LD_VAR 0 4
6890: PPUSH
6891: LD_VAR 0 2
6895: PPUSH
6896: CALL_OW 38
6900: GO 6883
6902: POP
6903: POP
// end ;
6904: LD_VAR 0 3
6908: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// for i = 1 to count do
6915: LD_ADDR_VAR 0 8
6919: PUSH
6920: DOUBLE
6921: LD_INT 1
6923: DEC
6924: ST_TO_ADDR
6925: LD_VAR 0 6
6929: PUSH
6930: FOR_TO
6931: IFFALSE 7012
// begin uc_side = side ;
6933: LD_ADDR_OWVAR 20
6937: PUSH
6938: LD_VAR 0 1
6942: ST_TO_ADDR
// uc_nation = nation ;
6943: LD_ADDR_OWVAR 21
6947: PUSH
6948: LD_VAR 0 2
6952: ST_TO_ADDR
// hc_gallery =  ;
6953: LD_ADDR_OWVAR 33
6957: PUSH
6958: LD_STRING 
6960: ST_TO_ADDR
// hc_name =  ;
6961: LD_ADDR_OWVAR 26
6965: PUSH
6966: LD_STRING 
6968: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6969: LD_INT 0
6971: PPUSH
6972: LD_VAR 0 5
6976: PPUSH
6977: LD_VAR 0 4
6981: PPUSH
6982: CALL_OW 380
// un = CreateHuman ;
6986: LD_ADDR_VAR 0 10
6990: PUSH
6991: CALL_OW 44
6995: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6996: LD_VAR 0 10
7000: PPUSH
7001: LD_VAR 0 3
7005: PPUSH
7006: CALL_OW 52
// end ;
7010: GO 6930
7012: POP
7013: POP
// end ;
7014: LD_VAR 0 7
7018: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7019: LD_INT 0
7021: PPUSH
7022: PPUSH
7023: PPUSH
// uc_side := GetSide ( b ) ;
7024: LD_ADDR_OWVAR 20
7028: PUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: CALL_OW 255
7038: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7039: LD_ADDR_OWVAR 21
7043: PUSH
7044: LD_VAR 0 2
7048: PPUSH
7049: CALL_OW 248
7053: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7054: LD_INT 0
7056: PPUSH
7057: LD_INT 1
7059: PPUSH
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7069: LD_ADDR_VAR 0 5
7073: PUSH
7074: LD_VAR 0 2
7078: PPUSH
7079: CALL_OW 254
7083: PUSH
7084: LD_INT 3
7086: MINUS
7087: ST_TO_ADDR
// if dir < 0 then
7088: LD_VAR 0 5
7092: PUSH
7093: LD_INT 0
7095: LESS
7096: IFFALSE 7112
// dir := 6 + dir ;
7098: LD_ADDR_VAR 0 5
7102: PUSH
7103: LD_INT 6
7105: PUSH
7106: LD_VAR 0 5
7110: PLUS
7111: ST_TO_ADDR
// un := CreateHuman ;
7112: LD_ADDR_VAR 0 4
7116: PUSH
7117: CALL_OW 44
7121: ST_TO_ADDR
// SetDir ( un , dir ) ;
7122: LD_VAR 0 4
7126: PPUSH
7127: LD_VAR 0 5
7131: PPUSH
7132: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7136: LD_VAR 0 4
7140: PPUSH
7141: LD_VAR 0 2
7145: PPUSH
7146: CALL_OW 52
// end ;
7150: LD_VAR 0 3
7154: RET
// export function PrepareDifficulty ; begin
7155: LD_INT 0
7157: PPUSH
// case Difficulty of 1 :
7158: LD_OWVAR 67
7162: PUSH
7163: LD_INT 1
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7190
7171: POP
// begin RuSolMinLevel = 2 ;
7172: LD_ADDR_EXP 34
7176: PUSH
7177: LD_INT 2
7179: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7180: LD_ADDR_EXP 35
7184: PUSH
7185: LD_INT 3
7187: ST_TO_ADDR
// end ; 2 :
7188: GO 7251
7190: LD_INT 2
7192: DOUBLE
7193: EQUAL
7194: IFTRUE 7198
7196: GO 7217
7198: POP
// begin RuSolMinLevel = 3 ;
7199: LD_ADDR_EXP 34
7203: PUSH
7204: LD_INT 3
7206: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7207: LD_ADDR_EXP 35
7211: PUSH
7212: LD_INT 5
7214: ST_TO_ADDR
// end ; 3 .. 4 :
7215: GO 7251
7217: LD_INT 3
7219: DOUBLE
7220: GREATEREQUAL
7221: IFFALSE 7229
7223: LD_INT 4
7225: DOUBLE
7226: LESSEQUAL
7227: IFTRUE 7231
7229: GO 7250
7231: POP
// begin RuSolMinLevel = 4 ;
7232: LD_ADDR_EXP 34
7236: PUSH
7237: LD_INT 4
7239: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7240: LD_ADDR_EXP 35
7244: PUSH
7245: LD_INT 6
7247: ST_TO_ADDR
// end ; end ;
7248: GO 7251
7250: POP
// end ;
7251: LD_VAR 0 1
7255: RET
// export function ShowQuery1 ; begin
7256: LD_INT 0
7258: PPUSH
// result := Query ( QKill ) ;
7259: LD_ADDR_VAR 0 1
7263: PUSH
7264: LD_STRING QKill
7266: PPUSH
7267: CALL_OW 97
7271: ST_TO_ADDR
// end ;
7272: LD_VAR 0 1
7276: RET
// export function ShowQuery2 ; begin
7277: LD_INT 0
7279: PPUSH
// result := Query ( QKill2 ) ;
7280: LD_ADDR_VAR 0 1
7284: PUSH
7285: LD_STRING QKill2
7287: PPUSH
7288: CALL_OW 97
7292: ST_TO_ADDR
// end ;
7293: LD_VAR 0 1
7297: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7298: LD_INT 0
7300: PPUSH
7301: PPUSH
7302: PPUSH
7303: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 82 , 83 , 84 , 85 , 86 ] ;
7304: LD_ADDR_VAR 0 7
7308: PUSH
7309: LD_INT 48
7311: PUSH
7312: LD_INT 49
7314: PUSH
7315: LD_INT 50
7317: PUSH
7318: LD_INT 20
7320: PUSH
7321: LD_INT 1
7323: PUSH
7324: LD_INT 51
7326: PUSH
7327: LD_INT 52
7329: PUSH
7330: LD_INT 69
7332: PUSH
7333: LD_INT 39
7335: PUSH
7336: LD_INT 34
7338: PUSH
7339: LD_INT 40
7341: PUSH
7342: LD_INT 53
7344: PUSH
7345: LD_INT 71
7347: PUSH
7348: LD_INT 57
7350: PUSH
7351: LD_INT 58
7353: PUSH
7354: LD_INT 44
7356: PUSH
7357: LD_INT 32
7359: PUSH
7360: LD_INT 27
7362: PUSH
7363: LD_INT 23
7365: PUSH
7366: LD_INT 33
7368: PUSH
7369: LD_INT 59
7371: PUSH
7372: LD_INT 54
7374: PUSH
7375: LD_INT 55
7377: PUSH
7378: LD_INT 56
7380: PUSH
7381: LD_INT 63
7383: PUSH
7384: LD_INT 64
7386: PUSH
7387: LD_INT 65
7389: PUSH
7390: LD_INT 30
7392: PUSH
7393: LD_INT 31
7395: PUSH
7396: LD_INT 21
7398: PUSH
7399: LD_INT 22
7401: PUSH
7402: LD_INT 25
7404: PUSH
7405: LD_INT 82
7407: PUSH
7408: LD_INT 83
7410: PUSH
7411: LD_INT 84
7413: PUSH
7414: LD_INT 85
7416: PUSH
7417: LD_INT 86
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: ST_TO_ADDR
// for i = 1 to list do
7459: LD_ADDR_VAR 0 5
7463: PUSH
7464: DOUBLE
7465: LD_INT 1
7467: DEC
7468: ST_TO_ADDR
7469: LD_VAR 0 7
7473: PUSH
7474: FOR_TO
7475: IFFALSE 7547
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7477: LD_VAR 0 7
7481: PUSH
7482: LD_VAR 0 5
7486: ARRAY
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 321
7497: PUSH
7498: LD_INT 1
7500: EQUAL
7501: PUSH
7502: LD_VAR 0 7
7506: PUSH
7507: LD_VAR 0 5
7511: ARRAY
7512: PPUSH
7513: LD_VAR 0 3
7517: PPUSH
7518: CALL_OW 482
7522: AND
7523: IFFALSE 7545
// AddComResearch ( lab , list [ i ] ) ;
7525: LD_VAR 0 2
7529: PPUSH
7530: LD_VAR 0 7
7534: PUSH
7535: LD_VAR 0 5
7539: ARRAY
7540: PPUSH
7541: CALL_OW 184
7545: GO 7474
7547: POP
7548: POP
// end ;
7549: LD_VAR 0 4
7553: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7554: LD_INT 0
7556: PPUSH
7557: PPUSH
7558: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7559: LD_INT 22
7561: PUSH
7562: LD_VAR 0 1
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 21
7573: PUSH
7574: LD_INT 2
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: PUSH
7590: LD_VAR 0 3
7594: LESSEQUAL
7595: IFFALSE 7703
// begin for i = 1 to vehCount do
7597: LD_ADDR_VAR 0 9
7601: PUSH
7602: DOUBLE
7603: LD_INT 1
7605: DEC
7606: ST_TO_ADDR
7607: LD_VAR 0 3
7611: PUSH
7612: FOR_TO
7613: IFFALSE 7701
// begin weapon := weaponTab [ i ] ;
7615: LD_ADDR_VAR 0 10
7619: PUSH
7620: LD_VAR 0 4
7624: PUSH
7625: LD_VAR 0 9
7629: ARRAY
7630: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7631: LD_VAR 0 10
7635: PUSH
7636: LD_INT 46
7638: EQUAL
7639: IFFALSE 7670
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7641: LD_VAR 0 2
7645: PPUSH
7646: LD_INT 24
7648: PPUSH
7649: LD_VAR 0 5
7653: PPUSH
7654: LD_VAR 0 6
7658: PPUSH
7659: LD_VAR 0 10
7663: PPUSH
7664: CALL_OW 185
7668: GO 7699
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_VAR 0 7
7679: PPUSH
7680: LD_VAR 0 5
7684: PPUSH
7685: LD_VAR 0 6
7689: PPUSH
7690: LD_VAR 0 10
7694: PPUSH
7695: CALL_OW 185
// end ;
7699: GO 7612
7701: POP
7702: POP
// end ; end ;
7703: LD_VAR 0 8
7707: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7708: LD_INT 0
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
7715: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7716: LD_ADDR_VAR 0 8
7720: PUSH
7721: LD_VAR 0 2
7725: PPUSH
7726: CALL_OW 313
7730: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7731: LD_ADDR_VAR 0 9
7735: PUSH
7736: LD_VAR 0 3
7740: PPUSH
7741: LD_INT 22
7743: PUSH
7744: LD_VAR 0 1
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 25
7755: PUSH
7756: LD_INT 2
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 24
7765: PUSH
7766: LD_INT 750
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: LD_INT 54
7778: PUSH
7779: EMPTY
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 70
7796: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7797: LD_ADDR_VAR 0 6
7801: PUSH
7802: LD_VAR 0 3
7806: PPUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 21
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 24
7834: PUSH
7835: LD_INT 1000
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: PPUSH
7854: CALL_OW 70
7858: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7859: LD_VAR 0 6
7863: NOT
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_VAR 0 1
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 25
7879: PUSH
7880: LD_INT 2
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 24
7889: PUSH
7890: LD_INT 250
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: PPUSH
7902: CALL_OW 69
7906: NOT
7907: AND
7908: IFFALSE 7912
// exit ;
7910: GO 8070
// if buildingsList and engineerOkInside then
7912: LD_VAR 0 6
7916: PUSH
7917: LD_VAR 0 8
7921: AND
7922: IFFALSE 7933
// ComExitBuilding ( engineerOkInside ) ;
7924: LD_VAR 0 8
7928: PPUSH
7929: CALL_OW 122
// if buildingsList and engineerOkOutside then
7933: LD_VAR 0 6
7937: PUSH
7938: LD_VAR 0 9
7942: AND
7943: IFFALSE 7963
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7945: LD_VAR 0 9
7949: PPUSH
7950: LD_VAR 0 6
7954: PUSH
7955: LD_INT 1
7957: ARRAY
7958: PPUSH
7959: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
7963: LD_VAR 0 6
7967: PUSH
7968: LD_INT 0
7970: EQUAL
7971: PUSH
7972: LD_VAR 0 4
7976: PUSH
7977: LD_INT 0
7979: EQUAL
7980: AND
7981: PUSH
7982: LD_VAR 0 9
7986: AND
7987: IFFALSE 8003
// ComEnterUnit ( engineerOkOutside , depot ) ;
7989: LD_VAR 0 9
7993: PPUSH
7994: LD_VAR 0 2
7998: PPUSH
7999: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8003: LD_VAR 0 9
8007: PUSH
8008: LD_VAR 0 6
8012: PUSH
8013: LD_INT 0
8015: EQUAL
8016: AND
8017: PUSH
8018: LD_VAR 0 4
8022: AND
8023: IFFALSE 8070
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8025: LD_VAR 0 9
8029: PPUSH
8030: LD_VAR 0 4
8034: PUSH
8035: LD_INT 1
8037: ARRAY
8038: PPUSH
8039: LD_VAR 0 4
8043: PUSH
8044: LD_INT 2
8046: ARRAY
8047: PPUSH
8048: LD_VAR 0 4
8052: PUSH
8053: LD_INT 3
8055: ARRAY
8056: PPUSH
8057: LD_VAR 0 4
8061: PUSH
8062: LD_INT 4
8064: ARRAY
8065: PPUSH
8066: CALL_OW 145
// end ;
8070: LD_VAR 0 5
8074: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8075: LD_INT 0
8077: PPUSH
8078: PPUSH
8079: PPUSH
8080: PPUSH
8081: PPUSH
8082: PPUSH
8083: PPUSH
8084: PPUSH
8085: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8086: LD_ADDR_VAR 0 6
8090: PUSH
8091: LD_INT 22
8093: PUSH
8094: LD_VAR 0 1
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 25
8105: PUSH
8106: LD_INT 4
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 23
8115: PUSH
8116: LD_INT 2
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 24
8125: PUSH
8126: LD_INT 251
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: PPUSH
8139: CALL_OW 69
8143: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8144: LD_ADDR_VAR 0 7
8148: PUSH
8149: LD_VAR 0 3
8153: PPUSH
8154: LD_INT 22
8156: PUSH
8157: LD_VAR 0 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 23
8168: PUSH
8169: LD_INT 2
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 25
8178: PUSH
8179: LD_INT 4
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: LD_INT 50
8188: PUSH
8189: EMPTY
8190: LIST
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: PPUSH
8198: CALL_OW 70
8202: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8203: LD_ADDR_VAR 0 10
8207: PUSH
8208: LD_VAR 0 3
8212: PPUSH
8213: LD_INT 22
8215: PUSH
8216: LD_VAR 0 1
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 21
8227: PUSH
8228: LD_INT 1
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 3
8237: PUSH
8238: LD_INT 25
8240: PUSH
8241: LD_INT 3
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 3
8254: PUSH
8255: LD_INT 24
8257: PUSH
8258: LD_INT 750
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 70
8279: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8280: LD_ADDR_VAR 0 11
8284: PUSH
8285: LD_VAR 0 2
8289: PPUSH
8290: LD_INT 22
8292: PUSH
8293: LD_VAR 0 1
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 21
8304: PUSH
8305: LD_INT 1
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PUSH
8312: LD_INT 3
8314: PUSH
8315: LD_INT 25
8317: PUSH
8318: LD_INT 3
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 3
8331: PUSH
8332: LD_INT 24
8334: PUSH
8335: LD_INT 1000
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 70
8356: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8357: LD_VAR 0 10
8361: NOT
8362: PUSH
8363: LD_VAR 0 11
8367: NOT
8368: AND
8369: PUSH
8370: LD_VAR 0 6
8374: NOT
8375: AND
8376: IFFALSE 8380
// exit ;
8378: GO 8586
// if damageUnits and sci_list then
8380: LD_VAR 0 10
8384: PUSH
8385: LD_VAR 0 6
8389: AND
8390: IFFALSE 8406
// ComMoveToArea ( damageUnits , healArea ) ;
8392: LD_VAR 0 10
8396: PPUSH
8397: LD_VAR 0 2
8401: PPUSH
8402: CALL_OW 113
// if unitsToHeal and sci_list then
8406: LD_VAR 0 11
8410: PUSH
8411: LD_VAR 0 6
8415: AND
8416: IFFALSE 8427
// ComExitBuilding ( sci_list ) ;
8418: LD_VAR 0 6
8422: PPUSH
8423: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8427: LD_VAR 0 11
8431: PUSH
8432: LD_VAR 0 7
8436: AND
8437: IFFALSE 8457
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8439: LD_VAR 0 7
8443: PPUSH
8444: LD_VAR 0 11
8448: PUSH
8449: LD_INT 1
8451: ARRAY
8452: PPUSH
8453: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8457: LD_VAR 0 10
8461: PUSH
8462: LD_INT 0
8464: EQUAL
8465: PUSH
8466: LD_VAR 0 11
8470: PUSH
8471: LD_INT 0
8473: EQUAL
8474: AND
8475: PUSH
8476: LD_VAR 0 7
8480: AND
8481: IFFALSE 8586
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8483: LD_ADDR_VAR 0 12
8487: PUSH
8488: LD_INT 22
8490: PUSH
8491: LD_VAR 0 1
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 21
8502: PUSH
8503: LD_INT 3
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 30
8512: PUSH
8513: LD_INT 8
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8530: LD_ADDR_VAR 0 13
8534: PUSH
8535: LD_INT 1
8537: PPUSH
8538: LD_VAR 0 12
8542: PPUSH
8543: CALL_OW 12
8547: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8548: LD_VAR 0 7
8552: PPUSH
8553: LD_INT 3
8555: PUSH
8556: LD_INT 60
8558: PUSH
8559: EMPTY
8560: LIST
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PPUSH
8566: CALL_OW 72
8570: PPUSH
8571: LD_VAR 0 12
8575: PUSH
8576: LD_VAR 0 13
8580: ARRAY
8581: PPUSH
8582: CALL_OW 120
// end ; end ;
8586: LD_VAR 0 5
8590: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8591: LD_INT 0
8593: PPUSH
8594: PPUSH
8595: PPUSH
8596: PPUSH
8597: PPUSH
// tmp := [ ] ;
8598: LD_ADDR_VAR 0 6
8602: PUSH
8603: EMPTY
8604: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8605: LD_ADDR_VAR 0 7
8609: PUSH
8610: LD_INT 22
8612: PUSH
8613: LD_VAR 0 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PUSH
8622: LD_INT 30
8624: PUSH
8625: LD_INT 32
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PPUSH
8636: CALL_OW 69
8640: ST_TO_ADDR
// if bunkers then
8641: LD_VAR 0 7
8645: IFFALSE 8715
// for i in bunkers do
8647: LD_ADDR_VAR 0 4
8651: PUSH
8652: LD_VAR 0 7
8656: PUSH
8657: FOR_IN
8658: IFFALSE 8713
// for j in UnitsInside ( i ) do
8660: LD_ADDR_VAR 0 5
8664: PUSH
8665: LD_VAR 0 4
8669: PPUSH
8670: CALL_OW 313
8674: PUSH
8675: FOR_IN
8676: IFFALSE 8709
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8678: LD_ADDR_VAR 0 6
8682: PUSH
8683: LD_VAR 0 6
8687: PPUSH
8688: LD_VAR 0 6
8692: PUSH
8693: LD_INT 1
8695: PLUS
8696: PPUSH
8697: LD_VAR 0 5
8701: PPUSH
8702: CALL_OW 1
8706: ST_TO_ADDR
8707: GO 8675
8709: POP
8710: POP
8711: GO 8657
8713: POP
8714: POP
// if tmp then
8715: LD_VAR 0 6
8719: IFFALSE 8759
// begin ComExitBuilding ( tmp ) ;
8721: LD_VAR 0 6
8725: PPUSH
8726: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8730: LD_VAR 0 6
8734: PPUSH
8735: LD_VAR 0 2
8739: PPUSH
8740: CALL_OW 250
8744: PPUSH
8745: LD_VAR 0 2
8749: PPUSH
8750: CALL_OW 251
8754: PPUSH
8755: CALL_OW 174
// end ; end ;
8759: LD_VAR 0 3
8763: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8764: LD_INT 0
8766: PPUSH
8767: PPUSH
8768: PPUSH
// enable ;
8769: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8770: LD_ADDR_VAR 0 6
8774: PUSH
8775: LD_VAR 0 3
8779: PPUSH
8780: CALL_OW 435
8784: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8785: LD_ADDR_VAR 0 5
8789: PUSH
8790: LD_INT 22
8792: PUSH
8793: LD_VAR 0 1
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 34
8804: PUSH
8805: LD_VAR 0 2
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PPUSH
8818: CALL_OW 69
8822: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8823: LD_VAR 0 5
8827: PUSH
8828: LD_VAR 0 3
8832: PPUSH
8833: CALL_OW 435
8837: AND
8838: PUSH
8839: LD_VAR 0 6
8843: AND
8844: IFFALSE 8877
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8846: LD_VAR 0 5
8850: PUSH
8851: LD_INT 1
8853: ARRAY
8854: PPUSH
8855: LD_VAR 0 6
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: LD_VAR 0 6
8868: PUSH
8869: LD_INT 2
8871: ARRAY
8872: PPUSH
8873: CALL_OW 177
// end ;
8877: LD_VAR 0 4
8881: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8882: LD_INT 0
8884: PPUSH
8885: PPUSH
8886: PPUSH
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8892: LD_ADDR_VAR 0 6
8896: PUSH
8897: LD_VAR 0 2
8901: PPUSH
8902: LD_INT 22
8904: PUSH
8905: LD_VAR 0 1
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 56
8916: PUSH
8917: EMPTY
8918: LIST
8919: PUSH
8920: LD_INT 24
8922: PUSH
8923: LD_INT 700
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 3
8932: PUSH
8933: LD_INT 60
8935: PUSH
8936: EMPTY
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 2
8945: PUSH
8946: LD_INT 25
8948: PUSH
8949: LD_INT 1
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 5
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 25
8968: PUSH
8969: LD_INT 8
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 25
8978: PUSH
8979: LD_INT 9
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: PPUSH
9000: CALL_OW 70
9004: PUSH
9005: LD_EXP 47
9009: PUSH
9010: LD_EXP 48
9014: UNION
9015: DIFF
9016: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9017: LD_ADDR_VAR 0 7
9021: PUSH
9022: LD_VAR 0 2
9026: PPUSH
9027: LD_INT 22
9029: PUSH
9030: LD_VAR 0 1
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 32
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 58
9051: PUSH
9052: EMPTY
9053: LIST
9054: PUSH
9055: LD_INT 24
9057: PUSH
9058: LD_INT 251
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: PPUSH
9071: CALL_OW 70
9075: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9076: LD_ADDR_VAR 0 9
9080: PUSH
9081: LD_VAR 0 2
9085: PPUSH
9086: LD_INT 22
9088: PUSH
9089: LD_VAR 0 1
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 2
9100: PUSH
9101: LD_INT 30
9103: PUSH
9104: LD_INT 4
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 30
9113: PUSH
9114: LD_INT 5
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 24
9128: PUSH
9129: LD_INT 251
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: PPUSH
9141: CALL_OW 70
9145: ST_TO_ADDR
// if barrackList then
9146: LD_VAR 0 9
9150: IFFALSE 9306
// begin if turretList = 0 then
9152: LD_VAR 0 7
9156: PUSH
9157: LD_INT 0
9159: EQUAL
9160: IFFALSE 9198
// begin if soldiersList then
9162: LD_VAR 0 6
9166: IFFALSE 9196
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9168: LD_VAR 0 6
9172: PPUSH
9173: LD_VAR 0 9
9177: PUSH
9178: LD_INT 1
9180: PPUSH
9181: LD_VAR 0 9
9185: PPUSH
9186: CALL_OW 12
9190: ARRAY
9191: PPUSH
9192: CALL_OW 120
// end else
9196: GO 9306
// begin for i in barrackList do
9198: LD_ADDR_VAR 0 4
9202: PUSH
9203: LD_VAR 0 9
9207: PUSH
9208: FOR_IN
9209: IFFALSE 9304
// begin if not turretList then
9211: LD_VAR 0 7
9215: NOT
9216: IFFALSE 9222
// exit ;
9218: POP
9219: POP
9220: GO 9306
// insideUnits = UnitsInside ( i ) ;
9222: LD_ADDR_VAR 0 10
9226: PUSH
9227: LD_VAR 0 4
9231: PPUSH
9232: CALL_OW 313
9236: ST_TO_ADDR
// if insideUnits then
9237: LD_VAR 0 10
9241: IFFALSE 9302
// begin tmp := insideUnits [ 1 ] ;
9243: LD_ADDR_VAR 0 8
9247: PUSH
9248: LD_VAR 0 10
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9257: LD_VAR 0 8
9261: PPUSH
9262: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9266: LD_VAR 0 8
9270: PPUSH
9271: LD_VAR 0 7
9275: PUSH
9276: LD_INT 1
9278: ARRAY
9279: PPUSH
9280: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9284: LD_ADDR_VAR 0 7
9288: PUSH
9289: LD_VAR 0 7
9293: PPUSH
9294: LD_INT 1
9296: PPUSH
9297: CALL_OW 3
9301: ST_TO_ADDR
// end ; end ;
9302: GO 9208
9304: POP
9305: POP
// end ; end ; end ;
9306: LD_VAR 0 3
9310: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9311: LD_INT 0
9313: PPUSH
9314: PPUSH
9315: PPUSH
9316: PPUSH
9317: PPUSH
9318: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9319: LD_ADDR_VAR 0 8
9323: PUSH
9324: LD_INT 22
9326: PUSH
9327: LD_VAR 0 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 21
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 34
9348: PUSH
9349: LD_INT 52
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: PPUSH
9361: CALL_OW 69
9365: ST_TO_ADDR
// if not craneList then
9366: LD_VAR 0 8
9370: NOT
9371: IFFALSE 9375
// exit ;
9373: GO 9809
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9375: LD_ADDR_VAR 0 9
9379: PUSH
9380: LD_INT 22
9382: PUSH
9383: LD_VAR 0 1
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: PUSH
9392: LD_INT 21
9394: PUSH
9395: LD_INT 3
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 3
9404: PUSH
9405: LD_INT 24
9407: PUSH
9408: LD_INT 1000
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: LIST
9423: PUSH
9424: EMPTY
9425: LIST
9426: PPUSH
9427: CALL_OW 69
9431: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9432: LD_VAR 0 9
9436: PUSH
9437: LD_VAR 0 8
9441: PPUSH
9442: LD_INT 24
9444: PUSH
9445: LD_INT 750
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 72
9456: AND
9457: IFFALSE 9492
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9459: LD_VAR 0 8
9463: PPUSH
9464: LD_INT 24
9466: PUSH
9467: LD_INT 750
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 72
9478: PPUSH
9479: LD_VAR 0 9
9483: PUSH
9484: LD_INT 1
9486: ARRAY
9487: PPUSH
9488: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9492: LD_VAR 0 8
9496: PPUSH
9497: LD_INT 3
9499: PUSH
9500: LD_INT 24
9502: PUSH
9503: LD_INT 750
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PPUSH
9514: CALL_OW 72
9518: IFFALSE 9556
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9520: LD_VAR 0 8
9524: PPUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 24
9530: PUSH
9531: LD_INT 750
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PPUSH
9542: CALL_OW 72
9546: PPUSH
9547: LD_VAR 0 2
9551: PPUSH
9552: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9556: LD_VAR 0 8
9560: PUSH
9561: LD_VAR 0 9
9565: PUSH
9566: LD_INT 0
9568: EQUAL
9569: AND
9570: PUSH
9571: LD_VAR 0 3
9575: AND
9576: IFFALSE 9623
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9578: LD_VAR 0 8
9582: PPUSH
9583: LD_VAR 0 3
9587: PUSH
9588: LD_INT 1
9590: ARRAY
9591: PPUSH
9592: LD_VAR 0 3
9596: PUSH
9597: LD_INT 2
9599: ARRAY
9600: PPUSH
9601: LD_VAR 0 3
9605: PUSH
9606: LD_INT 3
9608: ARRAY
9609: PPUSH
9610: LD_VAR 0 3
9614: PUSH
9615: LD_INT 4
9617: ARRAY
9618: PPUSH
9619: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9623: LD_ADDR_VAR 0 7
9627: PUSH
9628: LD_VAR 0 2
9632: PPUSH
9633: LD_INT 22
9635: PUSH
9636: LD_VAR 0 1
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 21
9647: PUSH
9648: LD_INT 2
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 34
9657: PUSH
9658: LD_INT 52
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 3
9667: PUSH
9668: LD_INT 24
9670: PUSH
9671: LD_INT 750
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: PPUSH
9688: CALL_OW 70
9692: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9693: LD_ADDR_VAR 0 6
9697: PUSH
9698: LD_VAR 0 2
9702: PPUSH
9703: LD_INT 22
9705: PUSH
9706: LD_VAR 0 1
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: LD_INT 2
9717: PUSH
9718: LD_INT 30
9720: PUSH
9721: LD_INT 0
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: LD_INT 30
9730: PUSH
9731: LD_INT 1
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PPUSH
9747: CALL_OW 70
9751: ST_TO_ADDR
// if crane then
9752: LD_VAR 0 7
9756: IFFALSE 9809
// for i in crane do
9758: LD_ADDR_VAR 0 5
9762: PUSH
9763: LD_VAR 0 7
9767: PUSH
9768: FOR_IN
9769: IFFALSE 9807
// begin if dep then
9771: LD_VAR 0 6
9775: IFFALSE 9791
// ComMoveUnit ( i , dep ) ;
9777: LD_VAR 0 5
9781: PPUSH
9782: LD_VAR 0 6
9786: PPUSH
9787: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9791: LD_VAR 0 5
9795: PPUSH
9796: CALL_OW 311
9800: PPUSH
9801: CALL 80354 0 1
// end ;
9805: GO 9768
9807: POP
9808: POP
// end ;
9809: LD_VAR 0 4
9813: RET
// export function BuildBulldozer ; begin
9814: LD_INT 0
9816: PPUSH
// if not IsOk ( rufabsupp ) or GetSide ( rufabsupp ) <> 3 then
9817: LD_INT 17
9819: PPUSH
9820: CALL_OW 302
9824: NOT
9825: PUSH
9826: LD_INT 17
9828: PPUSH
9829: CALL_OW 255
9833: PUSH
9834: LD_INT 3
9836: NONEQUAL
9837: OR
9838: IFFALSE 9842
// exit ;
9840: GO 9861
// AddComConstruct ( rufabsupp , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
9842: LD_INT 17
9844: PPUSH
9845: LD_INT 24
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: LD_INT 53
9856: PPUSH
9857: CALL_OW 185
// end ;
9861: LD_VAR 0 1
9865: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
9866: LD_INT 0
9868: PPUSH
9869: PPUSH
9870: PPUSH
9871: PPUSH
9872: PPUSH
// if not bulldozer then
9873: LD_VAR 0 1
9877: NOT
9878: IFFALSE 9882
// exit ;
9880: GO 10164
// list := ListEnvironmentArea ( area ) ;
9882: LD_ADDR_VAR 0 5
9886: PUSH
9887: LD_VAR 0 2
9891: PPUSH
9892: CALL_OW 353
9896: ST_TO_ADDR
// tmp := [ ] ;
9897: LD_ADDR_VAR 0 6
9901: PUSH
9902: EMPTY
9903: ST_TO_ADDR
// for i = 1 to list do
9904: LD_ADDR_VAR 0 4
9908: PUSH
9909: DOUBLE
9910: LD_INT 1
9912: DEC
9913: ST_TO_ADDR
9914: LD_VAR 0 5
9918: PUSH
9919: FOR_TO
9920: IFFALSE 10018
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
9922: LD_VAR 0 5
9926: PUSH
9927: LD_VAR 0 4
9931: ARRAY
9932: PUSH
9933: LD_INT 1
9935: ARRAY
9936: PPUSH
9937: LD_VAR 0 5
9941: PUSH
9942: LD_VAR 0 4
9946: ARRAY
9947: PUSH
9948: LD_INT 2
9950: ARRAY
9951: PPUSH
9952: CALL_OW 554
9956: IFFALSE 10016
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
9958: LD_ADDR_VAR 0 6
9962: PUSH
9963: LD_VAR 0 6
9967: PPUSH
9968: LD_VAR 0 6
9972: PUSH
9973: LD_INT 1
9975: PLUS
9976: PPUSH
9977: LD_VAR 0 5
9981: PUSH
9982: LD_VAR 0 4
9986: ARRAY
9987: PUSH
9988: LD_INT 1
9990: ARRAY
9991: PUSH
9992: LD_VAR 0 5
9996: PUSH
9997: LD_VAR 0 4
10001: ARRAY
10002: PUSH
10003: LD_INT 2
10005: ARRAY
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PPUSH
10011: CALL_OW 1
10015: ST_TO_ADDR
// end ;
10016: GO 9919
10018: POP
10019: POP
// ComStop ( bulldozer ) ;
10020: LD_VAR 0 1
10024: PPUSH
10025: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
10029: LD_ADDR_VAR 0 7
10033: PUSH
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 250
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 251
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: ST_TO_ADDR
// for i = tmp downto 1 do
10058: LD_ADDR_VAR 0 4
10062: PUSH
10063: DOUBLE
10064: LD_VAR 0 6
10068: INC
10069: ST_TO_ADDR
10070: LD_INT 1
10072: PUSH
10073: FOR_DOWNTO
10074: IFFALSE 10162
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
10076: LD_ADDR_VAR 0 7
10080: PUSH
10081: LD_VAR 0 7
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: PPUSH
10090: LD_VAR 0 7
10094: PUSH
10095: LD_INT 2
10097: ARRAY
10098: PPUSH
10099: LD_VAR 0 6
10103: PPUSH
10104: CALL 10265 0 3
10108: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
10109: LD_VAR 0 1
10113: PPUSH
10114: LD_VAR 0 7
10118: PUSH
10119: LD_INT 1
10121: ARRAY
10122: PPUSH
10123: LD_VAR 0 7
10127: PUSH
10128: LD_INT 2
10130: ARRAY
10131: PPUSH
10132: CALL 10169 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
10136: LD_ADDR_VAR 0 6
10140: PUSH
10141: LD_VAR 0 6
10145: PPUSH
10146: LD_VAR 0 7
10150: PUSH
10151: LD_INT 3
10153: ARRAY
10154: PPUSH
10155: CALL_OW 3
10159: ST_TO_ADDR
// end ;
10160: GO 10073
10162: POP
10163: POP
// end ;
10164: LD_VAR 0 3
10168: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
10169: LD_INT 0
10171: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
10172: LD_VAR 0 2
10176: PPUSH
10177: LD_VAR 0 3
10181: PPUSH
10182: CALL_OW 351
10186: PUSH
10187: LD_VAR 0 2
10191: PPUSH
10192: LD_VAR 0 3
10196: PPUSH
10197: CALL_OW 554
10201: AND
10202: PUSH
10203: LD_VAR 0 2
10207: PPUSH
10208: LD_VAR 0 3
10212: PPUSH
10213: CALL_OW 488
10217: AND
10218: PUSH
10219: LD_VAR 0 2
10223: PPUSH
10224: LD_VAR 0 3
10228: PPUSH
10229: CALL_OW 428
10233: PUSH
10234: LD_INT 1
10236: NEG
10237: EQUAL
10238: AND
10239: IFFALSE 10260
// AddComMoveXY ( bulldozer , x , y ) ;
10241: LD_VAR 0 1
10245: PPUSH
10246: LD_VAR 0 2
10250: PPUSH
10251: LD_VAR 0 3
10255: PPUSH
10256: CALL_OW 171
// end ;
10260: LD_VAR 0 4
10264: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
10265: LD_INT 0
10267: PPUSH
10268: PPUSH
10269: PPUSH
10270: PPUSH
10271: PPUSH
10272: PPUSH
10273: PPUSH
// dist := 99999 ;
10274: LD_ADDR_VAR 0 6
10278: PUSH
10279: LD_INT 99999
10281: ST_TO_ADDR
// for i = 1 to list do
10282: LD_ADDR_VAR 0 5
10286: PUSH
10287: DOUBLE
10288: LD_INT 1
10290: DEC
10291: ST_TO_ADDR
10292: LD_VAR 0 3
10296: PUSH
10297: FOR_TO
10298: IFFALSE 10436
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
10300: LD_ADDR_VAR 0 7
10304: PUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_VAR 0 2
10314: PPUSH
10315: LD_VAR 0 3
10319: PUSH
10320: LD_VAR 0 5
10324: ARRAY
10325: PUSH
10326: LD_INT 1
10328: ARRAY
10329: PPUSH
10330: LD_VAR 0 3
10334: PUSH
10335: LD_VAR 0 5
10339: ARRAY
10340: PUSH
10341: LD_INT 2
10343: ARRAY
10344: PPUSH
10345: CALL_OW 298
10349: ST_TO_ADDR
// if d = 0 then
10350: LD_VAR 0 7
10354: PUSH
10355: LD_INT 0
10357: EQUAL
10358: IFFALSE 10362
// continue ;
10360: GO 10297
// if d < dist then
10362: LD_VAR 0 7
10366: PUSH
10367: LD_VAR 0 6
10371: LESS
10372: IFFALSE 10434
// begin _x := list [ i ] [ 1 ] ;
10374: LD_ADDR_VAR 0 8
10378: PUSH
10379: LD_VAR 0 3
10383: PUSH
10384: LD_VAR 0 5
10388: ARRAY
10389: PUSH
10390: LD_INT 1
10392: ARRAY
10393: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
10394: LD_ADDR_VAR 0 9
10398: PUSH
10399: LD_VAR 0 3
10403: PUSH
10404: LD_VAR 0 5
10408: ARRAY
10409: PUSH
10410: LD_INT 2
10412: ARRAY
10413: ST_TO_ADDR
// _i := i ;
10414: LD_ADDR_VAR 0 10
10418: PUSH
10419: LD_VAR 0 5
10423: ST_TO_ADDR
// dist := d ;
10424: LD_ADDR_VAR 0 6
10428: PUSH
10429: LD_VAR 0 7
10433: ST_TO_ADDR
// end ; end ;
10434: GO 10297
10436: POP
10437: POP
// result := [ _x , _y , _i , dist ] ;
10438: LD_ADDR_VAR 0 4
10442: PUSH
10443: LD_VAR 0 8
10447: PUSH
10448: LD_VAR 0 9
10452: PUSH
10453: LD_VAR 0 10
10457: PUSH
10458: LD_VAR 0 6
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: ST_TO_ADDR
// end ; end_of_file
10469: LD_VAR 0 4
10473: RET
// export function Action ; begin
10474: LD_INT 0
10476: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
10477: LD_INT 66
10479: PPUSH
10480: LD_INT 4
10482: PPUSH
10483: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10487: LD_INT 22
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 25
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL_OW 69
10515: PUSH
10516: LD_INT 0
10518: EQUAL
10519: IFFALSE 10533
// SetClass ( JMM , 2 ) ;
10521: LD_EXP 1
10525: PPUSH
10526: LD_INT 2
10528: PPUSH
10529: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10533: LD_STRING M1
10535: PPUSH
10536: CALL_OW 337
// case Difficulty of 1 :
10540: LD_OWVAR 67
10544: PUSH
10545: LD_INT 1
10547: DOUBLE
10548: EQUAL
10549: IFTRUE 10553
10551: GO 10563
10553: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10554: LD_STRING M1-1
10556: PPUSH
10557: CALL_OW 337
10561: GO 10606
10563: LD_INT 2
10565: DOUBLE
10566: EQUAL
10567: IFTRUE 10571
10569: GO 10581
10571: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
10572: LD_STRING M1-2
10574: PPUSH
10575: CALL_OW 337
10579: GO 10606
10581: LD_INT 3
10583: DOUBLE
10584: GREATEREQUAL
10585: IFFALSE 10593
10587: LD_INT 4
10589: DOUBLE
10590: LESSEQUAL
10591: IFTRUE 10595
10593: GO 10605
10595: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10596: LD_STRING M1-3
10598: PPUSH
10599: CALL_OW 337
10603: GO 10606
10605: POP
// ChangeMissionObjectives ( M1cont ) ;
10606: LD_STRING M1cont
10608: PPUSH
10609: CALL_OW 337
// SaveForQuickRestart ;
10613: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
10617: LD_INT 525
10619: PPUSH
10620: LD_INT 700
10622: PPUSH
10623: CALL_OW 12
10627: PPUSH
10628: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
10632: LD_INT 5
10634: PPUSH
10635: LD_INT 82
10637: PPUSH
10638: LD_INT 38
10640: PPUSH
10641: LD_INT 10
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 56
// wait ( 0 0$14 ) ;
10651: LD_INT 490
10653: PPUSH
10654: CALL_OW 67
// firstCrateSpawn := true ;
10658: LD_ADDR_EXP 40
10662: PUSH
10663: LD_INT 1
10665: ST_TO_ADDR
// end ;
10666: LD_VAR 0 1
10670: RET
// every 0 0$02 trigger firstCrateSpawn do var hasSpeaker ;
10671: LD_EXP 40
10675: IFFALSE 11064
10677: GO 10679
10679: DISABLE
10680: LD_INT 0
10682: PPUSH
// begin if IsOk ( Lisa ) then
10683: LD_EXP 2
10687: PPUSH
10688: CALL_OW 302
10692: IFFALSE 10708
// Say ( Lisa , DR0-Lisa-1 ) else
10694: LD_EXP 2
10698: PPUSH
10699: LD_STRING DR0-Lisa-1
10701: PPUSH
10702: CALL_OW 88
10706: GO 10854
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10708: LD_INT 22
10710: PUSH
10711: LD_INT 1
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 21
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 26
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 2
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 25
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 3
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 4
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: PPUSH
10794: CALL_OW 69
10798: PUSH
10799: LD_EXP 1
10803: PUSH
10804: LD_EXP 8
10808: PUSH
10809: LD_EXP 5
10813: PUSH
10814: LD_EXP 6
10818: PUSH
10819: LD_EXP 7
10823: PUSH
10824: LD_EXP 4
10828: PUSH
10829: LD_EXP 3
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: DIFF
10843: PPUSH
10844: LD_STRING DR0-Sol1-1
10846: PPUSH
10847: LD_STRING DR0-Sol1-1
10849: PPUSH
10850: CALL 6771 0 3
// hasSpeaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10854: LD_ADDR_VAR 0 1
10858: PUSH
10859: LD_INT 22
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 21
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 26
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 2
10891: PUSH
10892: LD_INT 25
10894: PUSH
10895: LD_INT 1
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 25
10904: PUSH
10905: LD_INT 2
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 3
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 25
10924: PUSH
10925: LD_INT 4
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: PPUSH
10945: CALL_OW 69
10949: PUSH
10950: LD_EXP 1
10954: PUSH
10955: LD_EXP 8
10959: PUSH
10960: LD_EXP 5
10964: PUSH
10965: LD_EXP 2
10969: PUSH
10970: LD_EXP 6
10974: PUSH
10975: LD_EXP 7
10979: PUSH
10980: LD_EXP 4
10984: PUSH
10985: LD_EXP 3
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: DIFF
11000: PPUSH
11001: LD_STRING DR0-Sol2-1
11003: PPUSH
11004: LD_STRING DR0-Sol2-1
11006: PPUSH
11007: CALL 6771 0 3
11011: ST_TO_ADDR
// if IsOk ( Cyrus ) then
11012: LD_EXP 4
11016: PPUSH
11017: CALL_OW 302
11021: IFFALSE 11035
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11023: LD_EXP 4
11027: PPUSH
11028: LD_STRING DR0-Cyrus-1
11030: PPUSH
11031: CALL_OW 88
// if IsOk ( Lisa ) or hasSpeaker then
11035: LD_EXP 2
11039: PPUSH
11040: CALL_OW 302
11044: PUSH
11045: LD_VAR 0 1
11049: OR
11050: IFFALSE 11064
// Say ( JMM , DR0-JMM-1 ) ;
11052: LD_EXP 1
11056: PPUSH
11057: LD_STRING DR0-JMM-1
11059: PPUSH
11060: CALL_OW 88
// end ;
11064: PPOPN 1
11066: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
11067: LD_EXP 5
11071: PPUSH
11072: CALL_OW 302
11076: PUSH
11077: LD_INT 22
11079: PUSH
11080: LD_INT 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 25
11089: PUSH
11090: LD_INT 16
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PPUSH
11101: CALL_OW 69
11105: PUSH
11106: LD_INT 0
11108: GREATER
11109: AND
11110: PUSH
11111: LD_INT 1
11113: PPUSH
11114: CALL_OW 463
11118: NOT
11119: AND
11120: IFFALSE 11398
11122: GO 11124
11124: DISABLE
// begin DialogueOn ;
11125: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11129: LD_EXP 5
11133: PPUSH
11134: LD_STRING D10-Frank-1
11136: PPUSH
11137: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11141: LD_INT 22
11143: PUSH
11144: LD_INT 1
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 21
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 2
11163: PUSH
11164: LD_INT 25
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 25
11176: PUSH
11177: LD_INT 2
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 25
11186: PUSH
11187: LD_INT 3
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 25
11196: PUSH
11197: LD_INT 4
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: LIST
11215: PPUSH
11216: CALL_OW 69
11220: PUSH
11221: LD_EXP 1
11225: PUSH
11226: LD_EXP 5
11230: PUSH
11231: LD_EXP 2
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: LIST
11240: DIFF
11241: PPUSH
11242: LD_STRING D10-Sol1-1
11244: PPUSH
11245: LD_STRING D10-FSol1-1
11247: PPUSH
11248: CALL 6771 0 3
// Say ( Frank , D10-Frank-2 ) ;
11252: LD_EXP 5
11256: PPUSH
11257: LD_STRING D10-Frank-2
11259: PPUSH
11260: CALL_OW 88
// if IsOk ( Lisa ) then
11264: LD_EXP 2
11268: PPUSH
11269: CALL_OW 302
11273: IFFALSE 11289
// Say ( Lisa , D10-Lisa-2 ) else
11275: LD_EXP 2
11279: PPUSH
11280: LD_STRING D10-Lisa-2
11282: PPUSH
11283: CALL_OW 88
11287: GO 11394
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11289: LD_INT 22
11291: PUSH
11292: LD_INT 1
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 21
11301: PUSH
11302: LD_INT 1
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 2
11311: PUSH
11312: LD_INT 25
11314: PUSH
11315: LD_INT 1
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 25
11324: PUSH
11325: LD_INT 2
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 25
11334: PUSH
11335: LD_INT 3
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 25
11344: PUSH
11345: LD_INT 4
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: PPUSH
11364: CALL_OW 69
11368: PUSH
11369: LD_EXP 1
11373: PUSH
11374: LD_EXP 5
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: DIFF
11383: PPUSH
11384: LD_STRING D10-Sol1-2
11386: PPUSH
11387: LD_STRING D10-FSol1-2
11389: PPUSH
11390: CALL 6771 0 3
// DialogueOff ;
11394: CALL_OW 7
// end ;
11398: END
// every 10 10$30 trigger not InBattle ( 1 ) do
11399: LD_INT 1
11401: PPUSH
11402: CALL_OW 463
11406: NOT
11407: IFFALSE 11690
11409: GO 11411
11411: DISABLE
// begin HarrisonSupport ;
11412: CALL 2491 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11416: LD_EXP 17
11420: PPUSH
11421: CALL_OW 310
11425: PPUSH
11426: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11430: LD_EXP 17
11434: PPUSH
11435: LD_STRING DEng-Eng1-1
11437: PPUSH
11438: CALL_OW 88
// wait ( 1 1$0 ) ;
11442: LD_INT 2100
11444: PPUSH
11445: CALL_OW 67
// DialogueOn ;
11449: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11453: LD_EXP 14
11457: PPUSH
11458: LD_STRING DRem-Har-1
11460: PPUSH
11461: CALL_OW 94
// if contactWithRussian then
11465: LD_EXP 22
11469: IFFALSE 11485
// Say ( JMM , DRem-JMM-1 ) else
11471: LD_EXP 1
11475: PPUSH
11476: LD_STRING DRem-JMM-1
11478: PPUSH
11479: CALL_OW 88
11483: GO 11497
// Say ( JMM , DRem-JMM-1a ) ;
11485: LD_EXP 1
11489: PPUSH
11490: LD_STRING DRem-JMM-1a
11492: PPUSH
11493: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-2 ) ;
11497: LD_EXP 14
11501: PPUSH
11502: LD_STRING DRem-Har-2
11504: PPUSH
11505: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11509: LD_STRING DenisInDelta
11511: PPUSH
11512: LD_INT 0
11514: PPUSH
11515: CALL_OW 30
11519: IFFALSE 11535
// Say ( JMM , DRem-JMM-2 ) else
11521: LD_EXP 1
11525: PPUSH
11526: LD_STRING DRem-JMM-2
11528: PPUSH
11529: CALL_OW 88
11533: GO 11547
// Say ( JMM , DRem-JMM-2a ) ;
11535: LD_EXP 1
11539: PPUSH
11540: LD_STRING DRem-JMM-2a
11542: PPUSH
11543: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11547: LD_EXP 14
11551: PPUSH
11552: LD_STRING DRem-Har-3
11554: PPUSH
11555: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11559: LD_EXP 1
11563: PPUSH
11564: LD_STRING DRem-JMM-3
11566: PPUSH
11567: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11571: LD_EXP 14
11575: PPUSH
11576: LD_STRING DRem-Har-4
11578: PPUSH
11579: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) then
11583: LD_STRING DenisInDelta
11585: PPUSH
11586: LD_INT 0
11588: PPUSH
11589: CALL_OW 30
11593: IFFALSE 11653
// begin Say ( JMM , DRem-JMM-4 ) ;
11595: LD_EXP 1
11599: PPUSH
11600: LD_STRING DRem-JMM-4
11602: PPUSH
11603: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11607: LD_EXP 14
11611: PPUSH
11612: LD_STRING DRem-Har-5
11614: PPUSH
11615: CALL_OW 94
// DialogueOff ;
11619: CALL_OW 7
// wait ( 4 4$00 ) ;
11623: LD_INT 8400
11625: PPUSH
11626: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// until not InBattle ( 1 ) ;
11637: LD_INT 1
11639: PPUSH
11640: CALL_OW 463
11644: NOT
11645: IFFALSE 11630
// SpawnDenis ;
11647: CALL 11691 0 0
// end else
11651: GO 11690
// begin DialogueOff ;
11653: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11657: LD_INT 36
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11670: LD_INT 15
11672: PPUSH
11673: LD_INT 1
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11683: LD_STRING MR
11685: PPUSH
11686: CALL_OW 337
// end ; end ;
11690: END
// export function SpawnDenis ; var tmp ; begin
11691: LD_INT 0
11693: PPUSH
11694: PPUSH
// PrepareDenis ;
11695: CALL 2199 0 0
// if not Denis then
11699: LD_EXP 9
11703: NOT
11704: IFFALSE 11708
// exit ;
11706: GO 11929
// CenterNowOnUnits ( Denis ) ;
11708: LD_EXP 9
11712: PPUSH
11713: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11717: LD_ADDR_VAR 0 2
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_INT 1
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PPUSH
11732: CALL_OW 69
11736: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11737: LD_EXP 9
11741: PPUSH
11742: LD_VAR 0 2
11746: PPUSH
11747: LD_EXP 9
11751: PPUSH
11752: CALL_OW 74
11756: PPUSH
11757: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11761: LD_INT 35
11763: PPUSH
11764: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11768: LD_INT 22
11770: PUSH
11771: LD_INT 1
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 91
11780: PUSH
11781: LD_EXP 9
11785: PUSH
11786: LD_INT 10
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: IFFALSE 11761
// SetSide ( Denis , 1 ) ;
11804: LD_EXP 9
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 235
// DialogueOn ;
11816: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11820: LD_EXP 9
11824: PPUSH
11825: LD_STRING DDen-Den-1
11827: PPUSH
11828: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11832: LD_EXP 1
11836: PPUSH
11837: LD_STRING DDen-JMM-1
11839: PPUSH
11840: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11844: LD_EXP 9
11848: PPUSH
11849: LD_STRING DDen-Den-2
11851: PPUSH
11852: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11856: LD_EXP 1
11860: PPUSH
11861: LD_STRING DDen-JMM-2
11863: PPUSH
11864: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11868: LD_EXP 9
11872: PPUSH
11873: LD_STRING DDen-Den-3
11875: PPUSH
11876: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11880: LD_EXP 1
11884: PPUSH
11885: LD_STRING DDen-JMM-3
11887: PPUSH
11888: CALL_OW 88
// DialogueOff ;
11892: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11896: LD_INT 36
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11909: LD_INT 15
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: LD_INT 1
11917: PPUSH
11918: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11922: LD_STRING MR
11924: PPUSH
11925: CALL_OW 337
// end ;
11929: LD_VAR 0 1
11933: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11934: LD_INT 22
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 30
11946: PUSH
11947: LD_INT 15
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 69
11962: PUSH
11963: LD_EXP 9
11967: PPUSH
11968: CALL_OW 302
11972: AND
11973: PUSH
11974: LD_INT 1
11976: PPUSH
11977: CALL_OW 463
11981: NOT
11982: AND
11983: IFFALSE 12012
11985: GO 11987
11987: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11988: LD_EXP 9
11992: PPUSH
11993: LD_STRING DR1-Den-1
11995: PPUSH
11996: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12000: LD_EXP 1
12004: PPUSH
12005: LD_STRING DR1-JMM-1
12007: PPUSH
12008: CALL_OW 88
// end ;
12012: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
12013: LD_INT 15
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 321
12023: PUSH
12024: LD_INT 2
12026: EQUAL
12027: PUSH
12028: LD_EXP 9
12032: PPUSH
12033: CALL_OW 302
12037: AND
12038: PUSH
12039: LD_INT 1
12041: PPUSH
12042: CALL_OW 463
12046: NOT
12047: AND
12048: IFFALSE 12280
12050: GO 12052
12052: DISABLE
// begin DialogueOn ;
12053: CALL_OW 6
// if IsOK ( Denis ) then
12057: LD_EXP 9
12061: PPUSH
12062: CALL_OW 302
12066: IFFALSE 12082
// Say ( Denis , DR2-Den-1 ) else
12068: LD_EXP 9
12072: PPUSH
12073: LD_STRING DR2-Den-1
12075: PPUSH
12076: CALL_OW 88
12080: GO 12141
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12082: LD_INT 22
12084: PUSH
12085: LD_INT 1
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 21
12094: PUSH
12095: LD_INT 1
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 25
12104: PUSH
12105: LD_INT 4
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: PUSH
12122: LD_EXP 1
12126: PUSH
12127: EMPTY
12128: LIST
12129: DIFF
12130: PPUSH
12131: LD_STRING DR2-Sci1-1
12133: PPUSH
12134: LD_STRING DR2-FSci1-1
12136: PPUSH
12137: CALL 6771 0 3
// Say ( JMM , DR2-JMM-1 ) ;
12141: LD_EXP 1
12145: PPUSH
12146: LD_STRING DR2-JMM-1
12148: PPUSH
12149: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12153: LD_INT 22
12155: PUSH
12156: LD_INT 1
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 21
12165: PUSH
12166: LD_INT 1
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 2
12175: PUSH
12176: LD_INT 25
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 25
12188: PUSH
12189: LD_INT 2
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 25
12198: PUSH
12199: LD_INT 3
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 25
12208: PUSH
12209: LD_INT 4
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: PPUSH
12228: CALL_OW 69
12232: PUSH
12233: LD_EXP 1
12237: PUSH
12238: LD_EXP 9
12242: PUSH
12243: LD_EXP 8
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: DIFF
12253: PPUSH
12254: LD_STRING DR2-Sol1-1
12256: PPUSH
12257: LD_STRING DR2-Sol1-11
12259: PPUSH
12260: CALL 6771 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12264: LD_EXP 1
12268: PPUSH
12269: LD_STRING DR2-JMM-2
12271: PPUSH
12272: CALL_OW 88
// DialogueOff ;
12276: CALL_OW 7
// end ;
12280: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
12281: LD_INT 22
12283: PUSH
12284: LD_INT 1
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: LD_INT 36
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PPUSH
12305: CALL_OW 69
12309: PUSH
12310: LD_INT 0
12312: EQUAL
12313: PUSH
12314: LD_INT 22
12316: PUSH
12317: LD_INT 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 21
12326: PUSH
12327: LD_INT 2
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 33
12336: PUSH
12337: LD_INT 2
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PPUSH
12349: CALL_OW 69
12353: PUSH
12354: LD_INT 0
12356: GREATER
12357: AND
12358: PUSH
12359: LD_EXP 23
12363: PUSH
12364: LD_INT 0
12366: EQUAL
12367: AND
12368: PUSH
12369: LD_INT 1
12371: PPUSH
12372: CALL_OW 463
12376: NOT
12377: AND
12378: IFFALSE 12515
12380: GO 12382
12382: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12383: LD_INT 22
12385: PUSH
12386: LD_INT 1
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 21
12395: PUSH
12396: LD_INT 1
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 25
12405: PUSH
12406: LD_INT 3
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 26
12415: PUSH
12416: LD_INT 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: PUSH
12434: LD_EXP 1
12438: PUSH
12439: LD_EXP 6
12443: PUSH
12444: LD_EXP 7
12448: PUSH
12449: LD_EXP 9
12453: PUSH
12454: LD_EXP 15
12458: PUSH
12459: LD_EXP 3
12463: PUSH
12464: LD_EXP 4
12468: PUSH
12469: LD_EXP 2
12473: PUSH
12474: LD_EXP 5
12478: PUSH
12479: LD_EXP 8
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: DIFF
12496: PPUSH
12497: LD_STRING D3a-Mech1-1
12499: PPUSH
12500: LD_STRING D3a-Mech1-1
12502: PPUSH
12503: CALL 6771 0 3
// firstTower = 2 ;
12507: LD_ADDR_EXP 23
12511: PUSH
12512: LD_INT 2
12514: ST_TO_ADDR
// end ;
12515: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12516: LD_INT 22
12518: PUSH
12519: LD_INT 3
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 3
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PPUSH
12540: CALL_OW 69
12544: PUSH
12545: LD_INT 0
12547: EQUAL
12548: IFFALSE 12679
12550: GO 12552
12552: DISABLE
12553: LD_INT 0
12555: PPUSH
// begin stop_talking := true ;
12556: LD_ADDR_OWVAR 56
12560: PUSH
12561: LD_INT 1
12563: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12564: LD_ADDR_VAR 0 1
12568: PUSH
12569: LD_INT 22
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 21
12581: PUSH
12582: LD_INT 1
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 2
12591: PUSH
12592: LD_INT 25
12594: PUSH
12595: LD_INT 1
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 25
12604: PUSH
12605: LD_INT 2
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 25
12614: PUSH
12615: LD_INT 3
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 25
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: PPUSH
12644: CALL_OW 69
12648: PUSH
12649: FOR_IN
12650: IFFALSE 12669
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
12652: LD_VAR 0 1
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: LD_INT 7500
12662: PPUSH
12663: CALL_OW 591
12667: GO 12649
12669: POP
12670: POP
// stop_talking := false ;
12671: LD_ADDR_OWVAR 56
12675: PUSH
12676: LD_INT 0
12678: ST_TO_ADDR
// end ;
12679: PPOPN 1
12681: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12682: LD_INT 22
12684: PUSH
12685: LD_INT 1
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 30
12694: PUSH
12695: LD_INT 36
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PPUSH
12706: CALL_OW 69
12710: PUSH
12711: LD_INT 22
12713: PUSH
12714: LD_INT 1
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 21
12723: PUSH
12724: LD_INT 2
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 33
12733: PUSH
12734: LD_INT 2
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 69
12750: AND
12751: PUSH
12752: CALL 13304 0 0
12756: AND
12757: PUSH
12758: LD_INT 1
12760: PPUSH
12761: CALL_OW 463
12765: NOT
12766: AND
12767: IFFALSE 13301
12769: GO 12771
12771: DISABLE
12772: LD_INT 0
12774: PPUSH
12775: PPUSH
12776: PPUSH
12777: PPUSH
12778: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12779: LD_ADDR_VAR 0 3
12783: PUSH
12784: LD_INT 22
12786: PUSH
12787: LD_INT 1
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 30
12796: PUSH
12797: LD_INT 36
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PPUSH
12808: CALL_OW 69
12812: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12813: LD_ADDR_VAR 0 4
12817: PUSH
12818: LD_INT 22
12820: PUSH
12821: LD_INT 1
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 21
12830: PUSH
12831: LD_INT 2
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 33
12840: PUSH
12841: LD_INT 2
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: PPUSH
12853: CALL_OW 69
12857: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12858: LD_ADDR_VAR 0 5
12862: PUSH
12863: EMPTY
12864: ST_TO_ADDR
// for i in tmpControlTowers do
12865: LD_ADDR_VAR 0 1
12869: PUSH
12870: LD_VAR 0 3
12874: PUSH
12875: FOR_IN
12876: IFFALSE 13299
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12878: LD_EXP 1
12882: PPUSH
12883: CALL_OW 310
12887: PUSH
12888: LD_VAR 0 1
12892: EQUAL
12893: PUSH
12894: LD_EXP 1
12898: PPUSH
12899: CALL_OW 257
12903: PUSH
12904: LD_INT 3
12906: EQUAL
12907: AND
12908: IFFALSE 13042
// begin InGameOn ;
12910: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12914: LD_VAR 0 4
12918: PUSH
12919: LD_INT 1
12921: ARRAY
12922: PPUSH
12923: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12927: LD_EXP 1
12931: PPUSH
12932: LD_STRING D4a-JMM-1
12934: PPUSH
12935: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12939: LD_VAR 0 4
12943: PUSH
12944: LD_INT 1
12946: ARRAY
12947: PPUSH
12948: LD_EXP 1
12952: PPUSH
12953: CALL_OW 53
// wait ( 0 0$1 ) ;
12957: LD_INT 35
12959: PPUSH
12960: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12964: LD_VAR 0 4
12968: PUSH
12969: LD_INT 1
12971: ARRAY
12972: PPUSH
12973: LD_VAR 0 4
12977: PUSH
12978: LD_INT 1
12980: ARRAY
12981: PPUSH
12982: CALL_OW 250
12986: PUSH
12987: LD_INT 3
12989: PLUS
12990: PPUSH
12991: LD_VAR 0 4
12995: PUSH
12996: LD_INT 1
12998: ARRAY
12999: PPUSH
13000: CALL_OW 251
13004: PUSH
13005: LD_INT 2
13007: MINUS
13008: PPUSH
13009: CALL_OW 111
// wait ( 0 0$2 ) ;
13013: LD_INT 70
13015: PPUSH
13016: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13020: LD_EXP 1
13024: PPUSH
13025: LD_STRING D4b-JMM-1
13027: PPUSH
13028: CALL_OW 88
// InGameOff ;
13032: CALL_OW 9
// exit ;
13036: POP
13037: POP
13038: GO 13301
// end else
13040: GO 13297
// begin InGameOn ;
13042: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
13046: LD_ADDR_VAR 0 5
13050: PUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 313
13060: PPUSH
13061: LD_INT 25
13063: PUSH
13064: LD_INT 3
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 72
13075: ST_TO_ADDR
// if not tmpMechanicInside then
13076: LD_VAR 0 5
13080: NOT
13081: IFFALSE 13085
// continue ;
13083: GO 12875
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13085: LD_VAR 0 5
13089: PUSH
13090: LD_INT 1
13092: ARRAY
13093: PPUSH
13094: CALL_OW 258
13098: PUSH
13099: LD_INT 1
13101: EQUAL
13102: IFFALSE 13122
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
13104: LD_VAR 0 5
13108: PUSH
13109: LD_INT 1
13111: ARRAY
13112: PPUSH
13113: LD_STRING D4a-Mech1-1
13115: PPUSH
13116: CALL_OW 88
13120: GO 13138
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13122: LD_VAR 0 5
13126: PUSH
13127: LD_INT 1
13129: ARRAY
13130: PPUSH
13131: LD_STRING D4a-FMech1-1
13133: PPUSH
13134: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13138: LD_VAR 0 4
13142: PUSH
13143: LD_INT 1
13145: ARRAY
13146: PPUSH
13147: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13151: LD_VAR 0 4
13155: PUSH
13156: LD_INT 1
13158: ARRAY
13159: PPUSH
13160: LD_VAR 0 5
13164: PUSH
13165: LD_INT 1
13167: ARRAY
13168: PPUSH
13169: CALL_OW 53
// wait ( 0 0$1 ) ;
13173: LD_INT 35
13175: PPUSH
13176: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13180: LD_VAR 0 4
13184: PUSH
13185: LD_INT 1
13187: ARRAY
13188: PPUSH
13189: LD_VAR 0 4
13193: PUSH
13194: LD_INT 1
13196: ARRAY
13197: PPUSH
13198: CALL_OW 250
13202: PUSH
13203: LD_INT 3
13205: PLUS
13206: PPUSH
13207: LD_VAR 0 4
13211: PUSH
13212: LD_INT 1
13214: ARRAY
13215: PPUSH
13216: CALL_OW 251
13220: PUSH
13221: LD_INT 2
13223: MINUS
13224: PPUSH
13225: CALL_OW 111
// wait ( 0 0$2 ) ;
13229: LD_INT 70
13231: PPUSH
13232: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
13236: LD_VAR 0 5
13240: PUSH
13241: LD_INT 1
13243: ARRAY
13244: PPUSH
13245: CALL_OW 258
13249: PUSH
13250: LD_INT 1
13252: EQUAL
13253: IFFALSE 13273
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
13255: LD_VAR 0 5
13259: PUSH
13260: LD_INT 1
13262: ARRAY
13263: PPUSH
13264: LD_STRING D4b-Mech1-1
13266: PPUSH
13267: CALL_OW 88
13271: GO 13289
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13273: LD_VAR 0 5
13277: PUSH
13278: LD_INT 1
13280: ARRAY
13281: PPUSH
13282: LD_STRING D4b-FMech1-1
13284: PPUSH
13285: CALL_OW 88
// InGameOff ;
13289: CALL_OW 9
// exit ;
13293: POP
13294: POP
13295: GO 13301
// end ; end ;
13297: GO 12875
13299: POP
13300: POP
// end ;
13301: PPOPN 5
13303: END
// function CheckMehInside ; var i , j , tmp ; begin
13304: LD_INT 0
13306: PPUSH
13307: PPUSH
13308: PPUSH
13309: PPUSH
// result := false ;
13310: LD_ADDR_VAR 0 1
13314: PUSH
13315: LD_INT 0
13317: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
13318: LD_ADDR_VAR 0 4
13322: PUSH
13323: LD_INT 22
13325: PUSH
13326: LD_INT 1
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 30
13335: PUSH
13336: LD_INT 36
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 69
13351: ST_TO_ADDR
// if not tmp then
13352: LD_VAR 0 4
13356: NOT
13357: IFFALSE 13361
// exit ;
13359: GO 13425
// for i in tmp do
13361: LD_ADDR_VAR 0 2
13365: PUSH
13366: LD_VAR 0 4
13370: PUSH
13371: FOR_IN
13372: IFFALSE 13423
// for j in UnitsInside ( i ) do
13374: LD_ADDR_VAR 0 3
13378: PUSH
13379: LD_VAR 0 2
13383: PPUSH
13384: CALL_OW 313
13388: PUSH
13389: FOR_IN
13390: IFFALSE 13419
// if GetClass ( j ) = class_mechanic then
13392: LD_VAR 0 3
13396: PPUSH
13397: CALL_OW 257
13401: PUSH
13402: LD_INT 3
13404: EQUAL
13405: IFFALSE 13417
// begin result := true ;
13407: LD_ADDR_VAR 0 1
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
// break ;
13415: GO 13419
// end ;
13417: GO 13389
13419: POP
13420: POP
13421: GO 13371
13423: POP
13424: POP
// end ;
13425: LD_VAR 0 1
13429: RET
// every 12 12$0 do
13430: GO 13432
13432: DISABLE
// begin repeat wait ( 0 0$1 ) ;
13433: LD_INT 35
13435: PPUSH
13436: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
13440: LD_INT 1
13442: PPUSH
13443: CALL_OW 463
13447: NOT
13448: PUSH
13449: LD_INT 32
13451: PPUSH
13452: LD_INT 81
13454: PUSH
13455: LD_INT 1
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 70
13466: NOT
13467: AND
13468: IFFALSE 13433
// PrepareKurt ;
13470: CALL 16103 0 0
// end ;
13474: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
13475: LD_EXP 15
13479: PPUSH
13480: CALL_OW 302
13484: PUSH
13485: LD_EXP 15
13489: PPUSH
13490: CALL_OW 255
13494: PUSH
13495: LD_INT 1
13497: EQUAL
13498: AND
13499: PUSH
13500: LD_EXP 2
13504: AND
13505: IFFALSE 13670
13507: GO 13509
13509: DISABLE
// begin wait ( 0 0$50 ) ;
13510: LD_INT 1750
13512: PPUSH
13513: CALL_OW 67
// if not IsOk ( Joan ) then
13517: LD_EXP 15
13521: PPUSH
13522: CALL_OW 302
13526: NOT
13527: IFFALSE 13531
// exit ;
13529: GO 13670
// if IsOK ( Lisa ) then
13531: LD_EXP 2
13535: PPUSH
13536: CALL_OW 302
13540: IFFALSE 13670
// begin DialogueOn ;
13542: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13546: LD_EXP 2
13550: PPUSH
13551: LD_STRING D7-Lisa-1
13553: PPUSH
13554: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13558: LD_EXP 1
13562: PPUSH
13563: LD_STRING D7-JMM-1
13565: PPUSH
13566: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13570: LD_EXP 2
13574: PPUSH
13575: LD_STRING D7-Lisa-2
13577: PPUSH
13578: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13582: LD_EXP 1
13586: PPUSH
13587: LD_STRING D7-JMM-2
13589: PPUSH
13590: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13594: LD_EXP 2
13598: PPUSH
13599: LD_STRING D7-Lisa-3
13601: PPUSH
13602: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13606: LD_EXP 1
13610: PPUSH
13611: LD_STRING D7-JMM-3
13613: PPUSH
13614: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13618: LD_EXP 2
13622: PPUSH
13623: LD_STRING D7-Lisa-4
13625: PPUSH
13626: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13630: LD_EXP 1
13634: PPUSH
13635: LD_STRING D7-JMM-4
13637: PPUSH
13638: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13642: LD_EXP 1
13646: PPUSH
13647: LD_STRING D7-JMM-4a
13649: PPUSH
13650: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13654: LD_EXP 2
13658: PPUSH
13659: LD_STRING D7-Lisa-5
13661: PPUSH
13662: CALL_OW 88
// DialogueOff ;
13666: CALL_OW 7
// end ; end ;
13670: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13671: LD_EXP 13
13675: PUSH
13676: LD_INT 22
13678: PUSH
13679: LD_INT 1
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 91
13688: PUSH
13689: LD_EXP 13
13693: PUSH
13694: LD_INT 10
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 2
13704: PUSH
13705: LD_INT 25
13707: PUSH
13708: LD_INT 1
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 25
13717: PUSH
13718: LD_INT 2
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: LD_INT 25
13727: PUSH
13728: LD_INT 3
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 25
13737: PUSH
13738: LD_INT 4
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: PPUSH
13757: CALL_OW 69
13761: PUSH
13762: LD_INT 1
13764: GREATER
13765: AND
13766: IFFALSE 13783
13768: GO 13770
13770: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13771: LD_EXP 13
13775: PPUSH
13776: LD_STRING D5-Sol1-1
13778: PPUSH
13779: CALL_OW 88
13783: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13784: LD_INT 22
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 33
13796: PUSH
13797: LD_INT 2
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PPUSH
13808: CALL_OW 69
13812: PUSH
13813: LD_INT 2
13815: GREATEREQUAL
13816: IFFALSE 13836
13818: GO 13820
13820: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13821: LD_STRING MRa
13823: PPUSH
13824: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13828: LD_ADDR_EXP 28
13832: PUSH
13833: LD_INT 1
13835: ST_TO_ADDR
// end ;
13836: END
// every 2 2$00 do var i , last ;
13837: GO 13839
13839: DISABLE
13840: LD_INT 0
13842: PPUSH
13843: PPUSH
// begin last := 8 ;
13844: LD_ADDR_VAR 0 2
13848: PUSH
13849: LD_INT 8
13851: ST_TO_ADDR
// for i = 1 to last do
13852: LD_ADDR_VAR 0 1
13856: PUSH
13857: DOUBLE
13858: LD_INT 1
13860: DEC
13861: ST_TO_ADDR
13862: LD_VAR 0 2
13866: PUSH
13867: FOR_TO
13868: IFFALSE 13896
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13870: LD_INT 6300
13872: PPUSH
13873: LD_INT 12600
13875: PPUSH
13876: CALL_OW 12
13880: PPUSH
13881: CALL_OW 67
// PrepareRandoms ( i ) ;
13885: LD_VAR 0 1
13889: PPUSH
13890: CALL 4078 0 1
// end ;
13894: GO 13867
13896: POP
13897: POP
// end ;
13898: PPOPN 2
13900: END
// every 5 5$20 do
13901: GO 13903
13903: DISABLE
// begin DialogueOn ;
13904: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13908: LD_EXP 10
13912: PPUSH
13913: LD_STRING D12a-Sci-1
13915: PPUSH
13916: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13920: LD_EXP 1
13924: PPUSH
13925: LD_STRING D12a-JMM-1
13927: PPUSH
13928: CALL_OW 88
// DialogueOff ;
13932: CALL_OW 7
// cratesStatus := 1 ;
13936: LD_ADDR_EXP 38
13940: PUSH
13941: LD_INT 1
13943: ST_TO_ADDR
// end ;
13944: END
// every 13 13$0 do
13945: GO 13947
13947: DISABLE
// begin DialogueOn ;
13948: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13952: LD_EXP 10
13956: PPUSH
13957: LD_STRING D12b-Sci-1
13959: PPUSH
13960: CALL_OW 94
// DialogueOff ;
13964: CALL_OW 7
// cratesStatus := 2 ;
13968: LD_ADDR_EXP 38
13972: PUSH
13973: LD_INT 2
13975: ST_TO_ADDR
// BuildBulldozer ;
13976: CALL 9814 0 0
// end ;
13980: END
// every 32 32$0 do
13981: GO 13983
13983: DISABLE
// begin DialogueOn ;
13984: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
13988: LD_EXP 10
13992: PPUSH
13993: LD_STRING D12c-Sci-1
13995: PPUSH
13996: CALL_OW 94
// DialogueOff ;
14000: CALL_OW 7
// wait ( 3 3$0 ) ;
14004: LD_INT 6300
14006: PPUSH
14007: CALL_OW 67
// DialogueOn ;
14011: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14015: LD_EXP 10
14019: PPUSH
14020: LD_STRING D12d-Sci-1
14022: PPUSH
14023: CALL_OW 94
// DialogueOff ;
14027: CALL_OW 7
// cratesStatus = 1 ;
14031: LD_ADDR_EXP 38
14035: PUSH
14036: LD_INT 1
14038: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
14039: CALL 20271 0 0
// wait ( 2 2$30 ) ;
14043: LD_INT 5250
14045: PPUSH
14046: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14050: LD_INT 35
14052: PPUSH
14053: CALL_OW 67
// until ( not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ) or timeToEnd < 3 3$00 ;
14057: LD_INT 1
14059: PPUSH
14060: CALL_OW 463
14064: NOT
14065: PUSH
14066: LD_INT 32
14068: PPUSH
14069: LD_INT 81
14071: PUSH
14072: LD_INT 1
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PPUSH
14079: CALL_OW 70
14083: NOT
14084: AND
14085: PUSH
14086: LD_EXP 26
14090: PUSH
14091: LD_INT 6300
14093: LESS
14094: OR
14095: IFFALSE 14050
// PrepareJoan ;
14097: CALL 3034 0 0
// end ;
14101: END
// every 42 42$0 do
14102: GO 14104
14104: DISABLE
// begin DialogueOn ;
14105: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14109: LD_EXP 10
14113: PPUSH
14114: LD_STRING D12e-Sci-1
14116: PPUSH
14117: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14121: LD_EXP 1
14125: PPUSH
14126: LD_STRING D12e-JMM-1
14128: PPUSH
14129: CALL_OW 88
// DialogueOff ;
14133: CALL_OW 7
// cratesStatus := 2 ;
14137: LD_ADDR_EXP 38
14141: PUSH
14142: LD_INT 2
14144: ST_TO_ADDR
// end ; end_of_file
14145: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14146: LD_VAR 0 1
14150: PUSH
14151: LD_INT 1
14153: EQUAL
14154: PUSH
14155: LD_VAR 0 2
14159: PUSH
14160: LD_INT 3
14162: EQUAL
14163: AND
14164: IFFALSE 14174
// contactWithRussian := 1 ;
14166: LD_ADDR_EXP 22
14170: PUSH
14171: LD_INT 1
14173: ST_TO_ADDR
// end ;
14174: PPOPN 2
14176: END
// on BuildingComplete ( building ) do var i ;
14177: LD_INT 0
14179: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 266
14189: PUSH
14190: LD_INT 36
14192: EQUAL
14193: PUSH
14194: LD_VAR 0 1
14198: PPUSH
14199: CALL_OW 255
14203: PUSH
14204: LD_INT 1
14206: EQUAL
14207: AND
14208: PUSH
14209: LD_EXP 23
14213: PUSH
14214: LD_INT 0
14216: EQUAL
14217: AND
14218: IFFALSE 14298
// begin firstTower = 1 ;
14220: LD_ADDR_EXP 23
14224: PUSH
14225: LD_INT 1
14227: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14228: LD_INT 22
14230: PUSH
14231: LD_INT 1
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 21
14240: PUSH
14241: LD_INT 1
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 25
14250: PUSH
14251: LD_INT 3
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 26
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: PPUSH
14274: CALL_OW 69
14278: PUSH
14279: LD_EXP 1
14283: PUSH
14284: EMPTY
14285: LIST
14286: DIFF
14287: PPUSH
14288: LD_STRING D3b-Mech1-1
14290: PPUSH
14291: LD_STRING D3b-Mech1-1
14293: PPUSH
14294: CALL 6771 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14298: LD_VAR 0 1
14302: PPUSH
14303: CALL_OW 266
14307: PUSH
14308: LD_INT 0
14310: EQUAL
14311: PUSH
14312: LD_VAR 0 1
14316: PPUSH
14317: CALL_OW 255
14321: PUSH
14322: LD_INT 1
14324: EQUAL
14325: AND
14326: IFFALSE 14340
// SetBName ( building , theta ) ;
14328: LD_VAR 0 1
14332: PPUSH
14333: LD_STRING theta
14335: PPUSH
14336: CALL_OW 500
// if GetSide ( building ) = 3 then
14340: LD_VAR 0 1
14344: PPUSH
14345: CALL_OW 255
14349: PUSH
14350: LD_INT 3
14352: EQUAL
14353: IFFALSE 14393
// begin for i := 1 to 4 do
14355: LD_ADDR_VAR 0 2
14359: PUSH
14360: DOUBLE
14361: LD_INT 1
14363: DEC
14364: ST_TO_ADDR
14365: LD_INT 4
14367: PUSH
14368: FOR_TO
14369: IFFALSE 14391
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14371: LD_ADDR_EXP 31
14375: PUSH
14376: LD_EXP 31
14380: PPUSH
14381: LD_INT 1
14383: PPUSH
14384: CALL_OW 3
14388: ST_TO_ADDR
14389: GO 14368
14391: POP
14392: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14393: LD_VAR 0 1
14397: PPUSH
14398: CALL_OW 255
14402: PUSH
14403: LD_INT 3
14405: EQUAL
14406: PUSH
14407: LD_VAR 0 1
14411: PPUSH
14412: CALL_OW 266
14416: PUSH
14417: LD_INT 0
14419: EQUAL
14420: PUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL_OW 266
14430: PUSH
14431: LD_INT 2
14433: EQUAL
14434: OR
14435: PUSH
14436: LD_VAR 0 1
14440: PPUSH
14441: CALL_OW 266
14445: PUSH
14446: LD_INT 4
14448: EQUAL
14449: OR
14450: PUSH
14451: EMPTY
14452: LIST
14453: AND
14454: IFFALSE 14465
// ComUpgrade ( building ) ;
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14465: LD_VAR 0 1
14469: PPUSH
14470: CALL_OW 255
14474: PUSH
14475: LD_INT 3
14477: EQUAL
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 266
14488: PUSH
14489: LD_INT 32
14491: EQUAL
14492: AND
14493: IFFALSE 14534
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14495: LD_VAR 0 1
14499: PPUSH
14500: LD_INT 42
14502: PUSH
14503: LD_INT 43
14505: PUSH
14506: LD_INT 44
14508: PUSH
14509: LD_INT 46
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 1
14520: PPUSH
14521: LD_INT 4
14523: PPUSH
14524: CALL_OW 12
14528: ARRAY
14529: PPUSH
14530: CALL_OW 208
// end ;
14534: PPOPN 2
14536: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14537: LD_VAR 0 1
14541: PPUSH
14542: CALL 36820 0 1
// if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
14546: LD_VAR 0 1
14550: PUSH
14551: LD_INT 22
14553: PUSH
14554: LD_INT 1
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 21
14563: PUSH
14564: LD_INT 1
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 23
14573: PUSH
14574: LD_INT 1
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: PPUSH
14586: CALL_OW 69
14590: IN
14591: IFFALSE 14607
// killCounter := killCounter + 1 ;
14593: LD_ADDR_EXP 45
14597: PUSH
14598: LD_EXP 45
14602: PUSH
14603: LD_INT 1
14605: PLUS
14606: ST_TO_ADDR
// if unit in ruAttackersInForest then
14607: LD_VAR 0 1
14611: PUSH
14612: LD_EXP 48
14616: IN
14617: IFFALSE 14635
// ruAttackersInForest := ruAttackersInForest diff unit ;
14619: LD_ADDR_EXP 48
14623: PUSH
14624: LD_EXP 48
14628: PUSH
14629: LD_VAR 0 1
14633: DIFF
14634: ST_TO_ADDR
// if unit in ruAttackers then
14635: LD_VAR 0 1
14639: PUSH
14640: LD_EXP 47
14644: IN
14645: IFFALSE 14663
// ruAttackers := ruAttackers diff unit ;
14647: LD_ADDR_EXP 47
14651: PUSH
14652: LD_EXP 47
14656: PUSH
14657: LD_VAR 0 1
14661: DIFF
14662: ST_TO_ADDR
// if unit = JMM then
14663: LD_VAR 0 1
14667: PUSH
14668: LD_EXP 1
14672: EQUAL
14673: IFFALSE 14682
// YouLost ( JMM ) ;
14675: LD_STRING JMM
14677: PPUSH
14678: CALL_OW 104
// if unit = Joan then
14682: LD_VAR 0 1
14686: PUSH
14687: LD_EXP 15
14691: EQUAL
14692: IFFALSE 14702
// JoanStatus := 0 ;
14694: LD_ADDR_EXP 16
14698: PUSH
14699: LD_INT 0
14701: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 255
14711: PUSH
14712: LD_INT 1
14714: EQUAL
14715: PUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: CALL_OW 247
14725: PUSH
14726: LD_INT 1
14728: EQUAL
14729: AND
14730: PUSH
14731: LD_VAR 0 1
14735: PPUSH
14736: CALL_OW 248
14740: PUSH
14741: LD_INT 1
14743: EQUAL
14744: AND
14745: IFFALSE 14761
// unitLost = unitLost + 1 ;
14747: LD_ADDR_EXP 30
14751: PUSH
14752: LD_EXP 30
14756: PUSH
14757: LD_INT 1
14759: PLUS
14760: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14761: LD_VAR 0 1
14765: PPUSH
14766: CALL_OW 255
14770: PUSH
14771: LD_INT 3
14773: EQUAL
14774: PUSH
14775: LD_VAR 0 1
14779: PPUSH
14780: CALL_OW 247
14784: PUSH
14785: LD_INT 3
14787: EQUAL
14788: AND
14789: PUSH
14790: LD_VAR 0 1
14794: PPUSH
14795: CALL_OW 266
14799: PUSH
14800: LD_INT 4
14802: PUSH
14803: LD_INT 5
14805: PUSH
14806: LD_INT 32
14808: PUSH
14809: LD_INT 31
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: IN
14818: AND
14819: IFFALSE 14905
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14821: LD_ADDR_EXP 31
14825: PUSH
14826: LD_EXP 31
14830: PUSH
14831: LD_VAR 0 1
14835: PPUSH
14836: CALL_OW 266
14840: ADD
14841: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14842: LD_ADDR_EXP 31
14846: PUSH
14847: LD_EXP 31
14851: PUSH
14852: LD_VAR 0 1
14856: PPUSH
14857: CALL_OW 250
14861: ADD
14862: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14863: LD_ADDR_EXP 31
14867: PUSH
14868: LD_EXP 31
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 251
14882: ADD
14883: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14884: LD_ADDR_EXP 31
14888: PUSH
14889: LD_EXP 31
14893: PUSH
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 254
14903: ADD
14904: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14905: LD_EXP 46
14909: PUSH
14910: LD_VAR 0 1
14914: PPUSH
14915: CALL_OW 257
14919: PUSH
14920: LD_INT 3
14922: EQUAL
14923: AND
14924: PUSH
14925: LD_VAR 0 1
14929: PPUSH
14930: CALL_OW 255
14934: PUSH
14935: LD_INT 3
14937: EQUAL
14938: AND
14939: PUSH
14940: LD_INT 21
14942: PPUSH
14943: CALL_OW 302
14947: AND
14948: PUSH
14949: LD_INT 21
14951: PPUSH
14952: CALL_OW 255
14956: PUSH
14957: LD_INT 3
14959: EQUAL
14960: AND
14961: IFFALSE 15043
// begin ruMechCounter := ruMechCounter - 1 ;
14963: LD_ADDR_EXP 46
14967: PUSH
14968: LD_EXP 46
14972: PUSH
14973: LD_INT 1
14975: MINUS
14976: ST_TO_ADDR
// uc_side := 3 ;
14977: LD_ADDR_OWVAR 20
14981: PUSH
14982: LD_INT 3
14984: ST_TO_ADDR
// uc_nation := 3 ;
14985: LD_ADDR_OWVAR 21
14989: PUSH
14990: LD_INT 3
14992: ST_TO_ADDR
// hc_gallery :=  ;
14993: LD_ADDR_OWVAR 33
14997: PUSH
14998: LD_STRING 
15000: ST_TO_ADDR
// hc_name :=  ;
15001: LD_ADDR_OWVAR 26
15005: PUSH
15006: LD_STRING 
15008: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15009: LD_INT 0
15011: PPUSH
15012: LD_EXP 34
15016: PPUSH
15017: LD_EXP 35
15021: PPUSH
15022: CALL_OW 12
15026: PPUSH
15027: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
15031: CALL_OW 44
15035: PPUSH
15036: LD_INT 21
15038: PPUSH
15039: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
15043: LD_VAR 0 1
15047: PPUSH
15048: CALL_OW 255
15052: PUSH
15053: LD_INT 3
15055: EQUAL
15056: PUSH
15057: LD_VAR 0 1
15061: PPUSH
15062: CALL_OW 264
15066: PUSH
15067: LD_INT 52
15069: EQUAL
15070: AND
15071: PUSH
15072: LD_INT 21
15074: PPUSH
15075: CALL_OW 302
15079: AND
15080: PUSH
15081: LD_INT 21
15083: PPUSH
15084: CALL_OW 255
15088: PUSH
15089: LD_INT 3
15091: EQUAL
15092: AND
15093: IFFALSE 15114
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
15095: LD_INT 21
15097: PPUSH
15098: LD_INT 22
15100: PPUSH
15101: LD_INT 1
15103: PPUSH
15104: LD_INT 1
15106: PPUSH
15107: LD_INT 52
15109: PPUSH
15110: CALL_OW 125
// end ;
15114: PPOPN 1
15116: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15117: LD_INT 0
15119: PPUSH
15120: PPUSH
15121: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15122: LD_VAR 0 1
15126: PPUSH
15127: LD_VAR 0 2
15131: PPUSH
15132: CALL 36942 0 2
// if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane , ru_bulldozer ] then
15136: LD_VAR 0 1
15140: PPUSH
15141: CALL_OW 255
15145: PUSH
15146: LD_INT 3
15148: EQUAL
15149: PUSH
15150: LD_VAR 0 1
15154: PPUSH
15155: CALL_OW 264
15159: PUSH
15160: LD_INT 51
15162: PUSH
15163: LD_INT 52
15165: PUSH
15166: LD_INT 53
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: IN
15174: NOT
15175: AND
15176: IFFALSE 15207
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
15178: LD_ADDR_EXP 47
15182: PUSH
15183: LD_EXP 47
15187: PPUSH
15188: LD_EXP 47
15192: PUSH
15193: LD_INT 1
15195: PLUS
15196: PPUSH
15197: LD_VAR 0 1
15201: PPUSH
15202: CALL_OW 1
15206: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15207: LD_VAR 0 1
15211: PPUSH
15212: CALL_OW 264
15216: PUSH
15217: LD_INT 53
15219: EQUAL
15220: IFFALSE 15375
// begin AddComMoveXY ( vehicle , 60 , 85 ) ;
15222: LD_VAR 0 1
15226: PPUSH
15227: LD_INT 60
15229: PPUSH
15230: LD_INT 85
15232: PPUSH
15233: CALL_OW 171
// AddComMoveXY ( vehicle , 43 , 69 ) ;
15237: LD_VAR 0 1
15241: PPUSH
15242: LD_INT 43
15244: PPUSH
15245: LD_INT 69
15247: PPUSH
15248: CALL_OW 171
// AddComMoveXY ( vehicle , 37 , 46 ) ;
15252: LD_VAR 0 1
15256: PPUSH
15257: LD_INT 37
15259: PPUSH
15260: LD_INT 46
15262: PPUSH
15263: CALL_OW 171
// wait ( 0 0$1 ) ;
15267: LD_INT 35
15269: PPUSH
15270: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15274: LD_INT 35
15276: PPUSH
15277: CALL_OW 67
// until not HasTask ( vehicle ) ;
15281: LD_VAR 0 1
15285: PPUSH
15286: CALL_OW 314
15290: NOT
15291: IFFALSE 15274
// CutTreeInArea ( vehicle , cutTreeArea ) ;
15293: LD_VAR 0 1
15297: PPUSH
15298: LD_INT 34
15300: PPUSH
15301: CALL 9866 0 2
// repeat wait ( 0 0$1 ) ;
15305: LD_INT 35
15307: PPUSH
15308: CALL_OW 67
// until not HasTask ( vehicle ) ;
15312: LD_VAR 0 1
15316: PPUSH
15317: CALL_OW 314
15321: NOT
15322: IFFALSE 15305
// un := IsDrivenBy ( vehicle ) ;
15324: LD_ADDR_VAR 0 4
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 311
15338: ST_TO_ADDR
// AddComMoveXY ( un , 96 , 77 ) ;
15339: LD_VAR 0 4
15343: PPUSH
15344: LD_INT 96
15346: PPUSH
15347: LD_INT 77
15349: PPUSH
15350: CALL_OW 171
// AddComExitVehicle ( un ) ;
15354: LD_VAR 0 4
15358: PPUSH
15359: CALL_OW 181
// AddComEnterUnit ( un , rufabsupp ) ;
15363: LD_VAR 0 4
15367: PPUSH
15368: LD_INT 17
15370: PPUSH
15371: CALL_OW 180
// end ; end ;
15375: PPOPN 5
15377: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 255
15387: PUSH
15388: LD_INT 3
15390: EQUAL
15391: IFFALSE 15422
// begin tamedApemans = tamedApemans + 1 ;
15393: LD_ADDR_EXP 32
15397: PUSH
15398: LD_EXP 32
15402: PUSH
15403: LD_INT 1
15405: PLUS
15406: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
15407: LD_VAR 0 1
15411: PPUSH
15412: LD_INT 106
15414: PPUSH
15415: LD_INT 85
15417: PPUSH
15418: CALL_OW 111
// end ; end ;
15422: PPOPN 2
15424: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
15425: LD_VAR 0 2
15429: PPUSH
15430: CALL_OW 255
15434: PUSH
15435: LD_INT 3
15437: EQUAL
15438: PUSH
15439: LD_VAR 0 1
15443: PPUSH
15444: CALL_OW 255
15448: PUSH
15449: LD_INT 3
15451: EQUAL
15452: AND
15453: PUSH
15454: LD_INT 21
15456: PPUSH
15457: CALL_OW 302
15461: AND
15462: IFFALSE 15476
// ComEnterUnit ( human , rufab ) ;
15464: LD_VAR 0 1
15468: PPUSH
15469: LD_INT 21
15471: PPUSH
15472: CALL_OW 120
// end ;
15476: PPOPN 4
15478: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
15479: LD_VAR 0 1
15483: PUSH
15484: LD_INT 21
15486: EQUAL
15487: PUSH
15488: LD_VAR 0 2
15492: PPUSH
15493: CALL_OW 255
15497: PUSH
15498: LD_INT 3
15500: EQUAL
15501: AND
15502: IFFALSE 15516
// SetLives ( human , 1000 ) ;
15504: LD_VAR 0 2
15508: PPUSH
15509: LD_INT 1000
15511: PPUSH
15512: CALL_OW 234
// end ;
15516: PPOPN 2
15518: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15519: LD_VAR 0 1
15523: PPUSH
15524: CALL 36926 0 1
// end ; end_of_file
15528: PPOPN 1
15530: END
// every 0 0$30 trigger cratesStatus = 1 do
15531: LD_EXP 38
15535: PUSH
15536: LD_INT 1
15538: EQUAL
15539: IFFALSE 15592
15541: GO 15543
15543: DISABLE
// begin enable ;
15544: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
15545: LD_INT 350
15547: PUSH
15548: LD_INT 875
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 1
15557: PPUSH
15558: LD_INT 2
15560: PPUSH
15561: CALL_OW 12
15565: ARRAY
15566: PPUSH
15567: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
15571: LD_INT 1
15573: PPUSH
15574: LD_INT 5
15576: PPUSH
15577: CALL_OW 12
15581: PPUSH
15582: LD_INT 7
15584: PPUSH
15585: LD_INT 1
15587: PPUSH
15588: CALL_OW 55
// end ;
15592: END
// every 1 1$0 trigger cratesStatus = 2 do
15593: LD_EXP 38
15597: PUSH
15598: LD_INT 2
15600: EQUAL
15601: IFFALSE 15684
15603: GO 15605
15605: DISABLE
// begin enable ;
15606: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15607: LD_INT 3150
15609: PUSH
15610: LD_INT 4550
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 1
15619: PPUSH
15620: LD_INT 2
15622: PPUSH
15623: CALL_OW 12
15627: ARRAY
15628: PPUSH
15629: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
15633: LD_INT 2
15635: PUSH
15636: LD_INT 5
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 1
15645: PPUSH
15646: LD_INT 2
15648: PPUSH
15649: CALL_OW 12
15653: ARRAY
15654: PPUSH
15655: LD_INT 6
15657: PUSH
15658: LD_INT 7
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 1
15667: PPUSH
15668: LD_INT 2
15670: PPUSH
15671: CALL_OW 12
15675: ARRAY
15676: PPUSH
15677: LD_INT 1
15679: PPUSH
15680: CALL_OW 55
// end ;
15684: END
// every 0 0$30 + 0 0$10 do
15685: GO 15687
15687: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15688: LD_INT 4
15690: PUSH
15691: LD_INT 5
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 1
15700: PPUSH
15701: LD_INT 2
15703: PPUSH
15704: CALL_OW 12
15708: ARRAY
15709: PPUSH
15710: LD_INT 7
15712: PPUSH
15713: LD_INT 1
15715: PPUSH
15716: CALL_OW 55
// Wait ( 0 0$15 ) ;
15720: LD_INT 525
15722: PPUSH
15723: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15727: LD_INT 4
15729: PUSH
15730: LD_INT 5
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 1
15739: PPUSH
15740: LD_INT 2
15742: PPUSH
15743: CALL_OW 12
15747: ARRAY
15748: PPUSH
15749: LD_INT 7
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: CALL_OW 55
// Wait ( 0 0$20 ) ;
15759: LD_INT 700
15761: PPUSH
15762: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15766: LD_INT 4
15768: PUSH
15769: LD_INT 5
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 1
15778: PPUSH
15779: LD_INT 2
15781: PPUSH
15782: CALL_OW 12
15786: ARRAY
15787: PPUSH
15788: LD_INT 7
15790: PPUSH
15791: LD_INT 1
15793: PPUSH
15794: CALL_OW 55
// end ; end_of_file
15798: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15799: LD_EXP 24
15803: PUSH
15804: LD_INT 1
15806: EQUAL
15807: IFFALSE 16100
15809: GO 15811
15811: DISABLE
15812: LD_INT 0
15814: PPUSH
15815: PPUSH
15816: PPUSH
// begin enable ;
15817: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15818: LD_ADDR_VAR 0 2
15822: PUSH
15823: LD_INT 22
15825: PUSH
15826: LD_INT 1
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 21
15835: PUSH
15836: LD_INT 3
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 30
15848: PUSH
15849: LD_INT 0
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 30
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 69
15880: ST_TO_ADDR
// for i in tmp do
15881: LD_ADDR_VAR 0 1
15885: PUSH
15886: LD_VAR 0 2
15890: PUSH
15891: FOR_IN
15892: IFFALSE 15925
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_VAR 0 3
15903: PUSH
15904: LD_VAR 0 1
15908: PPUSH
15909: CALL_OW 274
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: CALL_OW 275
15921: PLUS
15922: ST_TO_ADDR
15923: GO 15891
15925: POP
15926: POP
// strings = [ ] ;
15927: LD_ADDR_EXP 27
15931: PUSH
15932: EMPTY
15933: ST_TO_ADDR
// if tmp = 0 then
15934: LD_VAR 0 2
15938: PUSH
15939: LD_INT 0
15941: EQUAL
15942: IFFALSE 15967
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15944: LD_ADDR_EXP 27
15948: PUSH
15949: LD_EXP 27
15953: PUSH
15954: LD_STRING #Am06-1
15956: PUSH
15957: LD_EXP 25
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: ADD
15966: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15967: LD_VAR 0 2
15971: PUSH
15972: LD_EXP 25
15976: PUSH
15977: LD_VAR 0 3
15981: GREATER
15982: AND
15983: IFFALSE 16014
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15985: LD_ADDR_EXP 27
15989: PUSH
15990: LD_EXP 27
15994: PUSH
15995: LD_STRING #Am06-1
15997: PUSH
15998: LD_EXP 25
16002: PUSH
16003: LD_VAR 0 3
16007: MINUS
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: ADD
16013: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
16014: LD_VAR 0 2
16018: PUSH
16019: LD_EXP 25
16023: PUSH
16024: LD_VAR 0 3
16028: LESSEQUAL
16029: AND
16030: IFFALSE 16053
// strings = strings ^ [ #Am06-1 , 0 ] ;
16032: LD_ADDR_EXP 27
16036: PUSH
16037: LD_EXP 27
16041: PUSH
16042: LD_STRING #Am06-1
16044: PUSH
16045: LD_INT 0
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: ADD
16052: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16053: LD_ADDR_EXP 26
16057: PUSH
16058: LD_EXP 26
16062: PUSH
16063: LD_INT 35
16065: MINUS
16066: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16067: LD_ADDR_EXP 27
16071: PUSH
16072: LD_EXP 27
16076: PUSH
16077: LD_STRING #Am06-2
16079: PUSH
16080: LD_EXP 26
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: ADD
16089: ST_TO_ADDR
// display_strings = strings ;
16090: LD_ADDR_OWVAR 47
16094: PUSH
16095: LD_EXP 27
16099: ST_TO_ADDR
// end ; end_of_file
16100: PPOPN 3
16102: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
16103: LD_INT 0
16105: PPUSH
16106: PPUSH
16107: PPUSH
16108: PPUSH
16109: PPUSH
16110: PPUSH
16111: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16112: LD_ADDR_VAR 0 3
16116: PUSH
16117: LD_INT 22
16119: PUSH
16120: LD_INT 1
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: LD_INT 2
16129: PUSH
16130: LD_INT 30
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 30
16142: PUSH
16143: LD_INT 1
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PPUSH
16159: CALL_OW 69
16163: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16164: LD_INT 35
16166: PPUSH
16167: CALL_OW 67
// until depot ;
16171: LD_VAR 0 3
16175: IFFALSE 16112
// repeat wait ( 0 0$1 ) ;
16177: LD_INT 35
16179: PPUSH
16180: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
16184: LD_ADDR_VAR 0 4
16188: PUSH
16189: LD_INT 22
16191: PUSH
16192: LD_INT 1
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 91
16201: PUSH
16202: LD_VAR 0 3
16206: PUSH
16207: LD_INT 1
16209: ARRAY
16210: PUSH
16211: LD_INT 15
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 21
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 2
16231: PUSH
16232: LD_INT 25
16234: PUSH
16235: LD_INT 1
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 25
16244: PUSH
16245: LD_INT 2
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 25
16254: PUSH
16255: LD_INT 3
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 25
16264: PUSH
16265: LD_INT 4
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 3
16281: PUSH
16282: LD_INT 54
16284: PUSH
16285: EMPTY
16286: LIST
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 3
16294: PUSH
16295: LD_INT 55
16297: PUSH
16298: EMPTY
16299: LIST
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: PPUSH
16313: CALL_OW 69
16317: PUSH
16318: LD_EXP 2
16322: PUSH
16323: LD_EXP 3
16327: PUSH
16328: LD_EXP 4
16332: PUSH
16333: LD_EXP 5
16337: PUSH
16338: LD_EXP 7
16342: PUSH
16343: LD_EXP 8
16347: PUSH
16348: LD_EXP 9
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: PUSH
16362: LD_EXP 44
16366: ADD
16367: DIFF
16368: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
16369: LD_VAR 0 4
16373: PUSH
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 463
16381: NOT
16382: AND
16383: IFFALSE 16177
// tmp := tmp [ rand ( 1 , tmp ) ] ;
16385: LD_ADDR_VAR 0 4
16389: PUSH
16390: LD_VAR 0 4
16394: PUSH
16395: LD_INT 1
16397: PPUSH
16398: LD_VAR 0 4
16402: PPUSH
16403: CALL_OW 12
16407: ARRAY
16408: ST_TO_ADDR
// blockSpawn := 1 ;
16409: LD_ADDR_EXP 29
16413: PUSH
16414: LD_INT 1
16416: ST_TO_ADDR
// uc_side := 2 ;
16417: LD_ADDR_OWVAR 20
16421: PUSH
16422: LD_INT 2
16424: ST_TO_ADDR
// uc_nation := 2 ;
16425: LD_ADDR_OWVAR 21
16429: PUSH
16430: LD_INT 2
16432: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
16433: LD_ADDR_EXP 19
16437: PUSH
16438: LD_STRING Kurt
16440: PPUSH
16441: LD_INT 0
16443: PPUSH
16444: LD_STRING 
16446: PPUSH
16447: CALL 41131 0 3
16451: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16452: LD_EXP 19
16456: PPUSH
16457: LD_VAR 0 4
16461: PPUSH
16462: CALL_OW 250
16466: PPUSH
16467: LD_VAR 0 4
16471: PPUSH
16472: CALL_OW 251
16476: PPUSH
16477: LD_INT 5
16479: PPUSH
16480: LD_INT 1
16482: PPUSH
16483: CALL_OW 50
// InGameOn ;
16487: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16491: LD_EXP 19
16495: PPUSH
16496: CALL_OW 87
// wait ( 0 0$2 ) ;
16500: LD_INT 70
16502: PPUSH
16503: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16507: LD_EXP 19
16511: PPUSH
16512: LD_VAR 0 4
16516: PPUSH
16517: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
16521: LD_VAR 0 4
16525: PPUSH
16526: LD_EXP 19
16530: PPUSH
16531: CALL_OW 112
// wait ( 0 0$1 ) ;
16535: LD_INT 35
16537: PPUSH
16538: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
16542: LD_VAR 0 4
16546: PPUSH
16547: LD_EXP 19
16551: PPUSH
16552: CALL_OW 119
// DialogueOn ;
16556: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16560: LD_EXP 19
16564: PPUSH
16565: LD_STRING D2-Kurt-1
16567: PPUSH
16568: CALL_OW 88
// if tmp = JMM then
16572: LD_VAR 0 4
16576: PUSH
16577: LD_EXP 1
16581: EQUAL
16582: IFFALSE 16674
// begin Say ( JMM , D2-JMM-1 ) ;
16584: LD_EXP 1
16588: PPUSH
16589: LD_STRING D2-JMM-1
16591: PPUSH
16592: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16596: LD_EXP 19
16600: PPUSH
16601: LD_STRING D2-Kurt-2
16603: PPUSH
16604: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16608: LD_EXP 1
16612: PPUSH
16613: LD_STRING D2-JMM-2
16615: PPUSH
16616: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16620: LD_EXP 19
16624: PPUSH
16625: LD_STRING D2-Kurt-3
16627: PPUSH
16628: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16632: LD_EXP 1
16636: PPUSH
16637: LD_STRING D2-JMM-3
16639: PPUSH
16640: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16644: LD_EXP 19
16648: PPUSH
16649: LD_STRING D2-Kurt-4
16651: PPUSH
16652: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16656: LD_EXP 1
16660: PPUSH
16661: LD_STRING D2-JMM-4
16663: PPUSH
16664: CALL_OW 88
// DialogueOff ;
16668: CALL_OW 7
// end else
16672: GO 16902
// begin if GetSex ( tmp ) = 1 then
16674: LD_VAR 0 4
16678: PPUSH
16679: CALL_OW 258
16683: PUSH
16684: LD_INT 1
16686: EQUAL
16687: IFFALSE 16703
// Say ( tmp , D2-Sol1-1 ) else
16689: LD_VAR 0 4
16693: PPUSH
16694: LD_STRING D2-Sol1-1
16696: PPUSH
16697: CALL_OW 88
16701: GO 16715
// Say ( tmp , D2-FSol1-1 ) ;
16703: LD_VAR 0 4
16707: PPUSH
16708: LD_STRING D2-FSol1-1
16710: PPUSH
16711: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16715: LD_EXP 19
16719: PPUSH
16720: LD_STRING D2-Kurt-2
16722: PPUSH
16723: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16727: LD_VAR 0 4
16731: PPUSH
16732: CALL_OW 258
16736: PUSH
16737: LD_INT 1
16739: EQUAL
16740: IFFALSE 16756
// Say ( tmp , D2-Sol1-2 ) else
16742: LD_VAR 0 4
16746: PPUSH
16747: LD_STRING D2-Sol1-2
16749: PPUSH
16750: CALL_OW 88
16754: GO 16768
// Say ( tmp , D2-FSol1-2 ) ;
16756: LD_VAR 0 4
16760: PPUSH
16761: LD_STRING D2-FSol1-2
16763: PPUSH
16764: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16768: LD_EXP 19
16772: PPUSH
16773: LD_STRING D2-Kurt-3
16775: PPUSH
16776: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16780: LD_VAR 0 4
16784: PPUSH
16785: CALL_OW 258
16789: PUSH
16790: LD_INT 1
16792: EQUAL
16793: IFFALSE 16809
// Say ( tmp , D2-Sol1-3 ) else
16795: LD_VAR 0 4
16799: PPUSH
16800: LD_STRING D2-Sol1-3
16802: PPUSH
16803: CALL_OW 88
16807: GO 16821
// Say ( tmp , D2-FSol1-3 ) ;
16809: LD_VAR 0 4
16813: PPUSH
16814: LD_STRING D2-FSol1-3
16816: PPUSH
16817: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16821: LD_EXP 19
16825: PPUSH
16826: LD_STRING D2-Kurt-4
16828: PPUSH
16829: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16833: LD_VAR 0 4
16837: PPUSH
16838: CALL_OW 258
16842: PUSH
16843: LD_INT 1
16845: EQUAL
16846: IFFALSE 16874
// begin Say ( tmp , D2-Sol1-4 ) ;
16848: LD_VAR 0 4
16852: PPUSH
16853: LD_STRING D2-Sol1-4
16855: PPUSH
16856: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
16860: LD_VAR 0 4
16864: PPUSH
16865: LD_STRING D2-Sol1-5
16867: PPUSH
16868: CALL_OW 88
// end else
16872: GO 16898
// begin Say ( tmp , D2-FSol1-4 ) ;
16874: LD_VAR 0 4
16878: PPUSH
16879: LD_STRING D2-FSol1-4
16881: PPUSH
16882: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16886: LD_VAR 0 4
16890: PPUSH
16891: LD_STRING D2-FSol1-5
16893: PPUSH
16894: CALL_OW 88
// end ; DialogueOff ;
16898: CALL_OW 7
// end ; dec := ShowQuery1 ;
16902: LD_ADDR_VAR 0 6
16906: PUSH
16907: CALL 7256 0 0
16911: ST_TO_ADDR
// if dec = 1 then
16912: LD_VAR 0 6
16916: PUSH
16917: LD_INT 1
16919: EQUAL
16920: IFFALSE 16982
// begin DialogueOn ;
16922: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16926: LD_EXP 19
16930: PPUSH
16931: LD_STRING D2a-Kurt-1
16933: PPUSH
16934: CALL_OW 88
// DialogueOff ;
16938: CALL_OW 7
// InGameOff ;
16942: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16946: LD_INT 1
16948: PPUSH
16949: LD_INT 2
16951: PPUSH
16952: LD_INT 2
16954: PPUSH
16955: LD_INT 1
16957: PPUSH
16958: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16962: LD_EXP 19
16966: PPUSH
16967: LD_INT 8
16969: PPUSH
16970: CALL_OW 113
// readyToEscape := 1 ;
16974: LD_ADDR_EXP 21
16978: PUSH
16979: LD_INT 1
16981: ST_TO_ADDR
// end ; if dec = 2 then
16982: LD_VAR 0 6
16986: PUSH
16987: LD_INT 2
16989: EQUAL
16990: IFFALSE 17458
// begin DialogueOn ;
16992: CALL_OW 6
// if tmp = JMM then
16996: LD_VAR 0 4
17000: PUSH
17001: LD_EXP 1
17005: EQUAL
17006: IFFALSE 17062
// begin Say ( JMM , D2b-JMM-1 ) ;
17008: LD_EXP 1
17012: PPUSH
17013: LD_STRING D2b-JMM-1
17015: PPUSH
17016: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17020: LD_EXP 19
17024: PPUSH
17025: LD_STRING D2b-Kurt-1
17027: PPUSH
17028: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17032: LD_EXP 1
17036: PPUSH
17037: LD_STRING D2b-JMM-2
17039: PPUSH
17040: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17044: LD_EXP 19
17048: PPUSH
17049: LD_STRING D2b-Kurt-2
17051: PPUSH
17052: CALL_OW 88
// DialogueOff ;
17056: CALL_OW 7
// end else
17060: GO 17213
// begin if GetSex ( tmp ) = 1 then
17062: LD_VAR 0 4
17066: PPUSH
17067: CALL_OW 258
17071: PUSH
17072: LD_INT 1
17074: EQUAL
17075: IFFALSE 17091
// Say ( tmp , D2b-Sol1-1 ) else
17077: LD_VAR 0 4
17081: PPUSH
17082: LD_STRING D2b-Sol1-1
17084: PPUSH
17085: CALL_OW 88
17089: GO 17103
// Say ( tmp , D2b-FSol1-1 ) ;
17091: LD_VAR 0 4
17095: PPUSH
17096: LD_STRING D2b-FSol1-1
17098: PPUSH
17099: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17103: LD_EXP 19
17107: PPUSH
17108: LD_STRING D2b-Kurt-1
17110: PPUSH
17111: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17115: LD_VAR 0 4
17119: PPUSH
17120: CALL_OW 258
17124: PUSH
17125: LD_INT 1
17127: EQUAL
17128: IFFALSE 17144
// Say ( tmp , D2b-Sol1-2 ) else
17130: LD_VAR 0 4
17134: PPUSH
17135: LD_STRING D2b-Sol1-2
17137: PPUSH
17138: CALL_OW 88
17142: GO 17156
// Say ( tmp , D2b-FSol1-2 ) ;
17144: LD_VAR 0 4
17148: PPUSH
17149: LD_STRING D2b-FSol1-2
17151: PPUSH
17152: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17156: LD_EXP 19
17160: PPUSH
17161: LD_STRING D2b-Kurt-2
17163: PPUSH
17164: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17168: LD_VAR 0 4
17172: PPUSH
17173: CALL_OW 258
17177: PUSH
17178: LD_INT 1
17180: EQUAL
17181: IFFALSE 17197
// Say ( tmp , D2c-Sol1-2 ) else
17183: LD_VAR 0 4
17187: PPUSH
17188: LD_STRING D2c-Sol1-2
17190: PPUSH
17191: CALL_OW 88
17195: GO 17209
// Say ( tmp , D2c-FSol1-2 ) ;
17197: LD_VAR 0 4
17201: PPUSH
17202: LD_STRING D2c-FSol1-2
17204: PPUSH
17205: CALL_OW 88
// DialogueOff ;
17209: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
17213: LD_ADDR_VAR 0 7
17217: PUSH
17218: CALL 7277 0 0
17222: ST_TO_ADDR
// if dec2 = 1 then
17223: LD_VAR 0 7
17227: PUSH
17228: LD_INT 1
17230: EQUAL
17231: IFFALSE 17293
// begin DialogueOn ;
17233: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17237: LD_EXP 19
17241: PPUSH
17242: LD_STRING D2a-Kurt-1
17244: PPUSH
17245: CALL_OW 88
// DialogueOff ;
17249: CALL_OW 7
// InGameOff ;
17253: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 2
17262: PPUSH
17263: LD_INT 2
17265: PPUSH
17266: LD_INT 1
17268: PPUSH
17269: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
17273: LD_EXP 19
17277: PPUSH
17278: LD_INT 8
17280: PPUSH
17281: CALL_OW 113
// readyToEscape := 1 ;
17285: LD_ADDR_EXP 21
17289: PUSH
17290: LD_INT 1
17292: ST_TO_ADDR
// end ; if dec2 = 2 then
17293: LD_VAR 0 7
17297: PUSH
17298: LD_INT 2
17300: EQUAL
17301: IFFALSE 17458
// begin if tmp = JMM then
17303: LD_VAR 0 4
17307: PUSH
17308: LD_EXP 1
17312: EQUAL
17313: IFFALSE 17373
// begin DialogueOn ;
17315: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17319: LD_EXP 1
17323: PPUSH
17324: LD_STRING D2c-JMM-1
17326: PPUSH
17327: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17331: LD_EXP 19
17335: PPUSH
17336: LD_STRING D2c-Kurt-1
17338: PPUSH
17339: CALL_OW 88
// DialogueOff ;
17343: CALL_OW 7
// InGameOff ;
17347: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17351: LD_EXP 19
17355: PPUSH
17356: LD_INT 8
17358: PPUSH
17359: CALL_OW 113
// readyToEscape := 1 ;
17363: LD_ADDR_EXP 21
17367: PUSH
17368: LD_INT 1
17370: ST_TO_ADDR
// end else
17371: GO 17458
// begin DialogueOn ;
17373: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17377: LD_VAR 0 4
17381: PPUSH
17382: CALL_OW 258
17386: PUSH
17387: LD_INT 1
17389: EQUAL
17390: IFFALSE 17406
// Say ( tmp , D2c-Sol1-1 ) else
17392: LD_VAR 0 4
17396: PPUSH
17397: LD_STRING D2c-Sol1-1
17399: PPUSH
17400: CALL_OW 88
17404: GO 17418
// Say ( tmp , D2c-FSol1-1 ) ;
17406: LD_VAR 0 4
17410: PPUSH
17411: LD_STRING D2c-FSol1-1
17413: PPUSH
17414: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17418: LD_EXP 19
17422: PPUSH
17423: LD_STRING D2c-Kurt-1
17425: PPUSH
17426: CALL_OW 88
// DialogueOff ;
17430: CALL_OW 7
// InGameOff ;
17434: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17438: LD_EXP 19
17442: PPUSH
17443: LD_INT 8
17445: PPUSH
17446: CALL_OW 113
// readyToEscape := 1 ;
17450: LD_ADDR_EXP 21
17454: PUSH
17455: LD_INT 1
17457: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17458: LD_VAR 0 6
17462: PUSH
17463: LD_INT 3
17465: EQUAL
17466: IFFALSE 17627
// begin DialogueOn ;
17468: CALL_OW 6
// if tmp = JMM then
17472: LD_VAR 0 4
17476: PUSH
17477: LD_EXP 1
17481: EQUAL
17482: IFFALSE 17542
// begin DialogueOn ;
17484: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17488: LD_EXP 1
17492: PPUSH
17493: LD_STRING D2c-JMM-1
17495: PPUSH
17496: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17500: LD_EXP 19
17504: PPUSH
17505: LD_STRING D2c-Kurt-1
17507: PPUSH
17508: CALL_OW 88
// DialogueOff ;
17512: CALL_OW 7
// InGameOff ;
17516: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17520: LD_EXP 19
17524: PPUSH
17525: LD_INT 8
17527: PPUSH
17528: CALL_OW 113
// readyToEscape := 1 ;
17532: LD_ADDR_EXP 21
17536: PUSH
17537: LD_INT 1
17539: ST_TO_ADDR
// end else
17540: GO 17627
// begin DialogueOn ;
17542: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17546: LD_VAR 0 4
17550: PPUSH
17551: CALL_OW 258
17555: PUSH
17556: LD_INT 1
17558: EQUAL
17559: IFFALSE 17575
// Say ( tmp , D2c-Sol1-1 ) else
17561: LD_VAR 0 4
17565: PPUSH
17566: LD_STRING D2c-Sol1-1
17568: PPUSH
17569: CALL_OW 88
17573: GO 17587
// Say ( tmp , D2c-FSol1-1 ) ;
17575: LD_VAR 0 4
17579: PPUSH
17580: LD_STRING D2c-FSol1-1
17582: PPUSH
17583: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17587: LD_EXP 19
17591: PPUSH
17592: LD_STRING D2c-Kurt-1
17594: PPUSH
17595: CALL_OW 88
// DialogueOff ;
17599: CALL_OW 7
// InGameOff ;
17603: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17607: LD_EXP 19
17611: PPUSH
17612: LD_INT 8
17614: PPUSH
17615: CALL_OW 113
// readyToEscape := 1 ;
17619: LD_ADDR_EXP 21
17623: PUSH
17624: LD_INT 1
17626: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
17627: LD_ADDR_EXP 29
17631: PUSH
17632: LD_INT 0
17634: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17635: LD_INT 35
17637: PPUSH
17638: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
17642: LD_EXP 19
17646: PPUSH
17647: LD_INT 8
17649: PPUSH
17650: CALL_OW 308
17654: PUSH
17655: LD_EXP 21
17659: AND
17660: PUSH
17661: LD_EXP 19
17665: PPUSH
17666: CALL_OW 301
17670: OR
17671: IFFALSE 17635
// if IsDead ( Kurt ) then
17673: LD_EXP 19
17677: PPUSH
17678: CALL_OW 301
17682: IFFALSE 17686
// exit ;
17684: GO 17741
// RemoveUnit ( Kurt ) ;
17686: LD_EXP 19
17690: PPUSH
17691: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
17695: LD_EXP 19
17699: PPUSH
17700: LD_STRING Kurt
17702: PPUSH
17703: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
17707: LD_INT 1
17709: PPUSH
17710: LD_INT 2
17712: PPUSH
17713: CALL_OW 81
17717: PUSH
17718: LD_INT 0
17720: EQUAL
17721: IFFALSE 17733
// kurtStatus = 1 else
17723: LD_ADDR_EXP 20
17727: PUSH
17728: LD_INT 1
17730: ST_TO_ADDR
17731: GO 17741
// kurtStatus = 2 ;
17733: LD_ADDR_EXP 20
17737: PUSH
17738: LD_INT 2
17740: ST_TO_ADDR
// end ; end_of_file
17741: LD_VAR 0 1
17745: RET
// every 0 0$2 do
17746: GO 17748
17748: DISABLE
// begin enable ;
17749: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
17750: LD_INT 3
17752: PPUSH
17753: LD_INT 2
17755: PPUSH
17756: LD_INT 10
17758: PPUSH
17759: LD_EXP 31
17763: PPUSH
17764: CALL 7708 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
17768: LD_INT 3
17770: PPUSH
17771: LD_INT 12
17773: PPUSH
17774: LD_EXP 31
17778: PPUSH
17779: CALL 9311 0 3
// if disableHealAI = 0 then
17783: LD_EXP 33
17787: PUSH
17788: LD_INT 0
17790: EQUAL
17791: IFFALSE 17812
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
17793: LD_INT 3
17795: PPUSH
17796: LD_INT 9
17798: PPUSH
17799: LD_INT 10
17801: PPUSH
17802: LD_INT 32
17804: PUSH
17805: EMPTY
17806: LIST
17807: PPUSH
17808: CALL 8075 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17812: LD_INT 3
17814: PPUSH
17815: LD_INT 51
17817: PPUSH
17818: LD_INT 6
17820: PPUSH
17821: CALL 8764 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
17825: LD_INT 2
17827: PPUSH
17828: CALL_OW 303
17832: PUSH
17833: LD_INT 2
17835: PPUSH
17836: CALL_OW 255
17840: PUSH
17841: LD_INT 1
17843: EQUAL
17844: OR
17845: IFFALSE 17859
// DefendDepot ( 3 , rudepo ) else
17847: LD_INT 3
17849: PPUSH
17850: LD_INT 2
17852: PPUSH
17853: CALL 8591 0 2
17857: GO 17869
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
17859: LD_INT 3
17861: PPUSH
17862: LD_INT 10
17864: PPUSH
17865: CALL 8882 0 2
// end ;
17869: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
17870: LD_INT 22
17872: PUSH
17873: LD_INT 3
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 21
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 55
17892: PUSH
17893: EMPTY
17894: LIST
17895: PUSH
17896: LD_INT 3
17898: PUSH
17899: LD_INT 34
17901: PUSH
17902: LD_INT 51
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: PPUSH
17919: CALL_OW 69
17923: PUSH
17924: LD_INT 0
17926: EQUAL
17927: PUSH
17928: LD_INT 21
17930: PPUSH
17931: CALL_OW 255
17935: PUSH
17936: LD_INT 3
17938: EQUAL
17939: AND
17940: PUSH
17941: LD_INT 21
17943: PPUSH
17944: CALL_OW 302
17948: AND
17949: PUSH
17950: LD_INT 2
17952: PPUSH
17953: CALL_OW 255
17957: PUSH
17958: LD_INT 3
17960: EQUAL
17961: AND
17962: PUSH
17963: LD_INT 2
17965: PPUSH
17966: CALL_OW 302
17970: AND
17971: PUSH
17972: LD_INT 21
17974: PPUSH
17975: CALL_OW 313
17979: AND
17980: PUSH
17981: LD_EXP 47
17985: PUSH
17986: LD_INT 4
17988: PUSH
17989: LD_INT 5
17991: PUSH
17992: LD_INT 6
17994: PUSH
17995: LD_INT 6
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: PUSH
18004: LD_OWVAR 67
18008: ARRAY
18009: LESS
18010: AND
18011: IFFALSE 18232
18013: GO 18015
18015: DISABLE
// begin enable ;
18016: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
18017: LD_INT 2
18019: PPUSH
18020: CALL_OW 274
18024: PPUSH
18025: LD_INT 1
18027: PPUSH
18028: LD_INT 2000
18030: PPUSH
18031: CALL_OW 277
// BuildingVehicle ( 3 , rufab , ( [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) - ruAttackers , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
18035: LD_INT 3
18037: PPUSH
18038: LD_INT 21
18040: PPUSH
18041: LD_INT 4
18043: PUSH
18044: LD_INT 5
18046: PUSH
18047: LD_INT 6
18049: PUSH
18050: LD_INT 6
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: PUSH
18059: LD_OWVAR 67
18063: ARRAY
18064: PUSH
18065: LD_EXP 47
18069: MINUS
18070: PPUSH
18071: LD_INT 43
18073: PUSH
18074: LD_INT 43
18076: PUSH
18077: LD_INT 44
18079: PUSH
18080: LD_INT 44
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 43
18091: PUSH
18092: LD_INT 43
18094: PUSH
18095: LD_INT 43
18097: PUSH
18098: LD_INT 44
18100: PUSH
18101: LD_INT 44
18103: PUSH
18104: LD_INT 46
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 43
18117: PUSH
18118: LD_INT 43
18120: PUSH
18121: LD_INT 43
18123: PUSH
18124: LD_INT 44
18126: PUSH
18127: LD_INT 44
18129: PUSH
18130: LD_INT 46
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 43
18143: PUSH
18144: LD_INT 43
18146: PUSH
18147: LD_INT 44
18149: PUSH
18150: LD_INT 46
18152: PUSH
18153: LD_INT 46
18155: PUSH
18156: LD_INT 46
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: PUSH
18173: LD_OWVAR 67
18177: ARRAY
18178: PPUSH
18179: LD_INT 1
18181: PPUSH
18182: LD_INT 1
18184: PPUSH
18185: LD_INT 22
18187: PUSH
18188: LD_INT 22
18190: PUSH
18191: LD_INT 24
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 1
18200: PPUSH
18201: LD_INT 2
18203: PPUSH
18204: CALL_OW 12
18208: ARRAY
18209: PUSH
18210: LD_INT 24
18212: PUSH
18213: LD_INT 24
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: PUSH
18222: LD_OWVAR 67
18226: ARRAY
18227: PPUSH
18228: CALL 7554 0 7
// end ;
18232: END
// every 2 2$00 + 10 10$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
18233: LD_INT 17
18235: PPUSH
18236: CALL_OW 255
18240: PUSH
18241: LD_INT 3
18243: EQUAL
18244: PUSH
18245: LD_INT 17
18247: PPUSH
18248: CALL_OW 302
18252: AND
18253: PUSH
18254: LD_INT 2
18256: PPUSH
18257: CALL_OW 255
18261: PUSH
18262: LD_INT 3
18264: EQUAL
18265: AND
18266: PUSH
18267: LD_INT 2
18269: PPUSH
18270: CALL_OW 302
18274: AND
18275: PUSH
18276: LD_EXP 47
18280: PUSH
18281: LD_INT 4
18283: PUSH
18284: LD_INT 5
18286: PUSH
18287: LD_INT 6
18289: PUSH
18290: LD_INT 7
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: PUSH
18299: LD_OWVAR 67
18303: ARRAY
18304: LESS
18305: AND
18306: IFFALSE 18354
18308: GO 18310
18310: DISABLE
// begin enable ;
18311: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18312: LD_INT 17
18314: PPUSH
18315: LD_INT 22
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: LD_INT 1
18323: PPUSH
18324: LD_INT 42
18326: PUSH
18327: LD_INT 43
18329: PUSH
18330: LD_INT 44
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: PPUSH
18341: LD_INT 3
18343: PPUSH
18344: CALL_OW 12
18348: ARRAY
18349: PPUSH
18350: CALL_OW 185
// end ;
18354: END
// every 2 2$0 do var i , j ;
18355: GO 18357
18357: DISABLE
18358: LD_INT 0
18360: PPUSH
18361: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18362: LD_INT 14700
18364: PUSH
18365: LD_INT 33600
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 1
18374: PPUSH
18375: LD_INT 2
18377: PPUSH
18378: CALL_OW 12
18382: ARRAY
18383: PPUSH
18384: CALL_OW 67
// disableHealAI = 1 ;
18388: LD_ADDR_EXP 33
18392: PUSH
18393: LD_INT 1
18395: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18396: LD_ADDR_VAR 0 1
18400: PUSH
18401: LD_INT 22
18403: PUSH
18404: LD_INT 3
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 25
18413: PUSH
18414: LD_INT 4
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PPUSH
18425: CALL_OW 69
18429: PUSH
18430: FOR_IN
18431: IFFALSE 18444
// ComExitBuilding ( i ) ;
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 122
18442: GO 18430
18444: POP
18445: POP
// wait ( 0 0$1 ) ;
18446: LD_INT 35
18448: PPUSH
18449: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18453: LD_INT 35
18455: PPUSH
18456: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18460: LD_ADDR_VAR 0 1
18464: PUSH
18465: LD_INT 22
18467: PUSH
18468: LD_INT 3
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 25
18477: PUSH
18478: LD_INT 4
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: PUSH
18494: FOR_IN
18495: IFFALSE 18572
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18497: LD_ADDR_VAR 0 2
18501: PUSH
18502: LD_INT 17
18504: PPUSH
18505: LD_INT 22
18507: PUSH
18508: LD_INT 0
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 25
18517: PUSH
18518: LD_INT 12
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PPUSH
18529: CALL_OW 70
18533: PUSH
18534: FOR_IN
18535: IFFALSE 18568
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18537: LD_VAR 0 1
18541: PPUSH
18542: LD_VAR 0 2
18546: PPUSH
18547: CALL_OW 250
18551: PPUSH
18552: LD_VAR 0 2
18556: PPUSH
18557: CALL_OW 251
18561: PPUSH
18562: CALL_OW 191
18566: GO 18534
18568: POP
18569: POP
18570: GO 18494
18572: POP
18573: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18574: LD_INT 22
18576: PUSH
18577: LD_INT 3
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 25
18586: PUSH
18587: LD_INT 4
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PPUSH
18598: CALL_OW 69
18602: PUSH
18603: LD_INT 0
18605: EQUAL
18606: PUSH
18607: LD_EXP 32
18611: PUSH
18612: LD_INT 6
18614: PUSH
18615: LD_INT 7
18617: PUSH
18618: LD_INT 8
18620: PUSH
18621: LD_INT 8
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: PUSH
18630: LD_OWVAR 67
18634: ARRAY
18635: GREATEREQUAL
18636: OR
18637: PUSH
18638: LD_INT 17
18640: PPUSH
18641: LD_INT 22
18643: PUSH
18644: LD_INT 0
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 25
18653: PUSH
18654: LD_INT 12
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PPUSH
18665: CALL_OW 70
18669: PUSH
18670: LD_INT 0
18672: EQUAL
18673: OR
18674: IFFALSE 18453
// disableHealAI = 0 ;
18676: LD_ADDR_EXP 33
18680: PUSH
18681: LD_INT 0
18683: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18684: LD_ADDR_VAR 0 1
18688: PUSH
18689: LD_INT 22
18691: PUSH
18692: LD_INT 3
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 25
18701: PUSH
18702: LD_INT 12
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PPUSH
18713: CALL_OW 69
18717: PUSH
18718: FOR_IN
18719: IFFALSE 18735
// SetClass ( i , 16 ) ;
18721: LD_VAR 0 1
18725: PPUSH
18726: LD_INT 16
18728: PPUSH
18729: CALL_OW 336
18733: GO 18718
18735: POP
18736: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18737: LD_ADDR_VAR 0 1
18741: PUSH
18742: LD_INT 22
18744: PUSH
18745: LD_INT 3
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 25
18754: PUSH
18755: LD_INT 4
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PPUSH
18766: CALL_OW 69
18770: PUSH
18771: FOR_IN
18772: IFFALSE 18788
// ComEnterUnit ( i , rulab ) ;
18774: LD_VAR 0 1
18778: PPUSH
18779: LD_INT 32
18781: PPUSH
18782: CALL_OW 120
18786: GO 18771
18788: POP
18789: POP
// end ; end_of_file
18790: PPOPN 2
18792: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18793: LD_EXP 26
18797: PUSH
18798: LD_INT 0
18800: LESSEQUAL
18801: IFFALSE 18955
18803: GO 18805
18805: DISABLE
18806: LD_INT 0
18808: PPUSH
18809: PPUSH
18810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18811: LD_ADDR_VAR 0 2
18815: PUSH
18816: LD_INT 22
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 21
18828: PUSH
18829: LD_INT 3
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 30
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 30
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: LIST
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: PPUSH
18869: CALL_OW 69
18873: ST_TO_ADDR
// for i in tmp do
18874: LD_ADDR_VAR 0 1
18878: PUSH
18879: LD_VAR 0 2
18883: PUSH
18884: FOR_IN
18885: IFFALSE 18918
// yourCrates := yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18887: LD_ADDR_VAR 0 3
18891: PUSH
18892: LD_VAR 0 3
18896: PUSH
18897: LD_VAR 0 1
18901: PPUSH
18902: CALL_OW 274
18906: PPUSH
18907: LD_INT 1
18909: PPUSH
18910: CALL_OW 275
18914: PLUS
18915: ST_TO_ADDR
18916: GO 18884
18918: POP
18919: POP
// if yourCrates >= needCrates then
18920: LD_VAR 0 3
18924: PUSH
18925: LD_EXP 25
18929: GREATEREQUAL
18930: IFFALSE 18948
// FinishMission ( yourCrates , needCrates ) else
18932: LD_VAR 0 3
18936: PPUSH
18937: LD_EXP 25
18941: PPUSH
18942: CALL 18958 0 2
18946: GO 18955
// YouLost ( matmin ) ;
18948: LD_STRING matmin
18950: PPUSH
18951: CALL_OW 104
// end ;
18955: PPOPN 3
18957: END
// export function FinishMission ( crates , needCrates ) ; var m1 , m2 , m3 ; begin
18958: LD_INT 0
18960: PPUSH
18961: PPUSH
18962: PPUSH
18963: PPUSH
// if killCounter = 0 then
18964: LD_EXP 45
18968: PUSH
18969: LD_INT 0
18971: EQUAL
18972: IFFALSE 18981
// SetAchievement ( ACH_SURV ) ;
18974: LD_STRING ACH_SURV
18976: PPUSH
18977: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
18981: LD_INT 22
18983: PUSH
18984: LD_INT 3
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 21
18993: PUSH
18994: LD_INT 3
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PPUSH
19005: CALL_OW 69
19009: PUSH
19010: LD_INT 0
19012: EQUAL
19013: IFFALSE 19029
// begin wait ( 3 ) ;
19015: LD_INT 3
19017: PPUSH
19018: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
19022: LD_STRING ACH_BASEDESTROYER
19024: PPUSH
19025: CALL_OW 543
// end ; m1 := false ;
19029: LD_ADDR_VAR 0 4
19033: PUSH
19034: LD_INT 0
19036: ST_TO_ADDR
// m2 := false ;
19037: LD_ADDR_VAR 0 5
19041: PUSH
19042: LD_INT 0
19044: ST_TO_ADDR
// m3 := false ;
19045: LD_ADDR_VAR 0 6
19049: PUSH
19050: LD_INT 0
19052: ST_TO_ADDR
// if crates + [ 100 , 140 , 180 , 220 ] [ Difficulty ] > needCrates then
19053: LD_VAR 0 1
19057: PUSH
19058: LD_INT 100
19060: PUSH
19061: LD_INT 140
19063: PUSH
19064: LD_INT 180
19066: PUSH
19067: LD_INT 220
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: PUSH
19076: LD_OWVAR 67
19080: ARRAY
19081: PLUS
19082: PUSH
19083: LD_VAR 0 2
19087: GREATER
19088: IFFALSE 19120
// begin AddMedal ( cans , 1 ) ;
19090: LD_STRING cans
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19100: LD_INT 1
19102: PPUSH
19103: LD_STRING 06_crates_1
19105: PPUSH
19106: CALL_OW 39
// m1 := true ;
19110: LD_ADDR_VAR 0 4
19114: PUSH
19115: LD_INT 1
19117: ST_TO_ADDR
// end else
19118: GO 19141
// begin AddMedal ( cans , - 1 ) ;
19120: LD_STRING cans
19122: PPUSH
19123: LD_INT 1
19125: NEG
19126: PPUSH
19127: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19131: LD_INT 0
19133: PPUSH
19134: LD_STRING 06_crates_1
19136: PPUSH
19137: CALL_OW 39
// end ; if unitLost < 3 then
19141: LD_EXP 30
19145: PUSH
19146: LD_INT 3
19148: LESS
19149: IFFALSE 19171
// begin AddMedal ( people , 1 ) ;
19151: LD_STRING people
19153: PPUSH
19154: LD_INT 1
19156: PPUSH
19157: CALL_OW 101
// m2 := true ;
19161: LD_ADDR_VAR 0 5
19165: PUSH
19166: LD_INT 1
19168: ST_TO_ADDR
// end else
19169: GO 19182
// AddMedal ( people , - 1 ) ;
19171: LD_STRING people
19173: PPUSH
19174: LD_INT 1
19176: NEG
19177: PPUSH
19178: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19182: LD_EXP 28
19186: PPUSH
19187: LD_STRING 06_remoteVehs_1
19189: PPUSH
19190: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19194: LD_EXP 28
19198: PUSH
19199: LD_INT 1
19201: EQUAL
19202: IFFALSE 19224
// begin AddMedal ( remote , 1 ) ;
19204: LD_STRING remote
19206: PPUSH
19207: LD_INT 1
19209: PPUSH
19210: CALL_OW 101
// m3 := true ;
19214: LD_ADDR_VAR 0 6
19218: PUSH
19219: LD_INT 1
19221: ST_TO_ADDR
// end else
19222: GO 19264
// begin if GetTech ( 18 , 1 ) = state_enabled then
19224: LD_INT 18
19226: PPUSH
19227: LD_INT 1
19229: PPUSH
19230: CALL_OW 321
19234: PUSH
19235: LD_INT 1
19237: EQUAL
19238: IFFALSE 19253
// AddMedal ( remote , - 1 ) else
19240: LD_STRING remote
19242: PPUSH
19243: LD_INT 1
19245: NEG
19246: PPUSH
19247: CALL_OW 101
19251: GO 19264
// AddMedal ( remote , - 2 ) ;
19253: LD_STRING remote
19255: PPUSH
19256: LD_INT 2
19258: NEG
19259: PPUSH
19260: CALL_OW 101
// end ; if m1 and m2 and m3 then
19264: LD_VAR 0 4
19268: PUSH
19269: LD_VAR 0 5
19273: AND
19274: PUSH
19275: LD_VAR 0 6
19279: AND
19280: IFFALSE 19296
// begin wait ( 3 ) ;
19282: LD_INT 3
19284: PPUSH
19285: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
19289: LD_STRING ACH_ASPEED_6
19291: PPUSH
19292: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
19296: LD_OWVAR 67
19300: PUSH
19301: LD_INT 3
19303: GREATEREQUAL
19304: PUSH
19305: LD_VAR 0 4
19309: AND
19310: PUSH
19311: LD_VAR 0 5
19315: AND
19316: PUSH
19317: LD_VAR 0 6
19321: AND
19322: IFFALSE 19334
// SetAchievementEX ( ACH_AMER , 6 ) ;
19324: LD_STRING ACH_AMER
19326: PPUSH
19327: LD_INT 6
19329: PPUSH
19330: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
19334: LD_EXP 20
19338: PPUSH
19339: LD_STRING 06_KurtStatus_1
19341: PPUSH
19342: CALL_OW 39
// GiveMedals ( Main ) ;
19346: LD_STRING Main
19348: PPUSH
19349: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19353: LD_INT 22
19355: PUSH
19356: LD_INT 1
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 21
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 50
19375: PUSH
19376: EMPTY
19377: LIST
19378: PUSH
19379: LD_INT 2
19381: PUSH
19382: LD_INT 25
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 25
19394: PUSH
19395: LD_INT 2
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 25
19404: PUSH
19405: LD_INT 3
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 25
19414: PUSH
19415: LD_INT 4
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: PPUSH
19435: CALL_OW 69
19439: PPUSH
19440: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19444: LD_EXP 1
19448: PPUSH
19449: LD_EXP 42
19453: PUSH
19454: LD_STRING JMM
19456: STR
19457: PPUSH
19458: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19462: LD_EXP 2
19466: PPUSH
19467: LD_EXP 42
19471: PUSH
19472: LD_STRING Lisa
19474: STR
19475: PPUSH
19476: CALL 6869 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19480: LD_EXP 3
19484: PPUSH
19485: LD_EXP 42
19489: PUSH
19490: LD_STRING Bobby
19492: STR
19493: PPUSH
19494: CALL 6869 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19498: LD_EXP 4
19502: PPUSH
19503: LD_EXP 42
19507: PUSH
19508: LD_STRING Cyrus
19510: STR
19511: PPUSH
19512: CALL 6869 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19516: LD_EXP 5
19520: PPUSH
19521: LD_EXP 42
19525: PUSH
19526: LD_STRING Frank
19528: STR
19529: PPUSH
19530: CALL 6869 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19534: LD_EXP 6
19538: PPUSH
19539: LD_EXP 42
19543: PUSH
19544: LD_STRING Brown
19546: STR
19547: PPUSH
19548: CALL 6869 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19552: LD_EXP 7
19556: PPUSH
19557: LD_EXP 42
19561: PUSH
19562: LD_STRING Donaldson
19564: STR
19565: PPUSH
19566: CALL 6869 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19570: LD_EXP 8
19574: PPUSH
19575: LD_EXP 42
19579: PUSH
19580: LD_STRING Gladstone
19582: STR
19583: PPUSH
19584: CALL 6869 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19588: LD_EXP 9
19592: PPUSH
19593: LD_EXP 42
19597: PUSH
19598: LD_STRING Denis
19600: STR
19601: PPUSH
19602: CALL 6869 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19606: LD_EXP 15
19610: PPUSH
19611: LD_EXP 42
19615: PUSH
19616: LD_STRING Joan
19618: STR
19619: PPUSH
19620: CALL 6869 0 2
// if IsLive ( Joan ) then
19624: LD_EXP 15
19628: PPUSH
19629: CALL_OW 300
19633: IFFALSE 19647
// SaveCharacters ( Joan , Joan ) ;
19635: LD_EXP 15
19639: PPUSH
19640: LD_STRING Joan
19642: PPUSH
19643: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
19647: LD_EXP 16
19651: PPUSH
19652: LD_STRING 06_JoanStatus_1
19654: PPUSH
19655: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19659: LD_INT 50
19661: PUSH
19662: EMPTY
19663: LIST
19664: PUSH
19665: LD_INT 22
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 21
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: LD_INT 25
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 25
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 25
19710: PUSH
19711: LD_INT 3
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 25
19720: PUSH
19721: LD_INT 4
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: PPUSH
19741: CALL_OW 69
19745: PUSH
19746: LD_EXP 1
19750: PUSH
19751: LD_EXP 2
19755: PUSH
19756: LD_EXP 3
19760: PUSH
19761: LD_EXP 4
19765: PUSH
19766: LD_EXP 5
19770: PUSH
19771: LD_EXP 6
19775: PUSH
19776: LD_EXP 7
19780: PUSH
19781: LD_EXP 8
19785: PUSH
19786: LD_EXP 9
19790: PUSH
19791: LD_EXP 15
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: DIFF
19808: PPUSH
19809: LD_STRING 06_other_survivors
19811: PPUSH
19812: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19816: LD_INT 50
19818: PUSH
19819: EMPTY
19820: LIST
19821: PUSH
19822: LD_INT 22
19824: PUSH
19825: LD_INT 1
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 21
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: LD_INT 25
19847: PUSH
19848: LD_INT 12
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 25
19857: PUSH
19858: LD_INT 16
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: LIST
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: PPUSH
19876: CALL_OW 69
19880: PPUSH
19881: LD_STRING 06_other_apemans
19883: PPUSH
19884: CALL_OW 38
// YouWin ;
19888: CALL_OW 103
// end ; end_of_file
19892: LD_VAR 0 3
19896: RET
// every 0 0$1 trigger ruAttackers and tick > [ 11 11$00 , 10 10$00 , 9 9$00 , 8 8$00 ] [ Difficulty ] do var i , tmp , path , driver ;
19897: LD_EXP 47
19901: PUSH
19902: LD_OWVAR 1
19906: PUSH
19907: LD_INT 23100
19909: PUSH
19910: LD_INT 21000
19912: PUSH
19913: LD_INT 18900
19915: PUSH
19916: LD_INT 16800
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: PUSH
19925: LD_OWVAR 67
19929: ARRAY
19930: GREATER
19931: AND
19932: IFFALSE 20268
19934: GO 19936
19936: DISABLE
19937: LD_INT 0
19939: PPUSH
19940: PPUSH
19941: PPUSH
19942: PPUSH
// begin enable ;
19943: ENABLE
// for i in ruAttackers do
19944: LD_ADDR_VAR 0 1
19948: PUSH
19949: LD_EXP 47
19953: PUSH
19954: FOR_IN
19955: IFFALSE 20266
// begin if not IsDrivenBy ( i ) then
19957: LD_VAR 0 1
19961: PPUSH
19962: CALL_OW 311
19966: NOT
19967: IFFALSE 19971
// continue ;
19969: GO 19954
// if i mod 2 = 0 then
19971: LD_VAR 0 1
19975: PUSH
19976: LD_INT 2
19978: MOD
19979: PUSH
19980: LD_INT 0
19982: EQUAL
19983: IFFALSE 20049
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 86 , 16 ] , [ 80 , 12 ] ] else
19985: LD_ADDR_VAR 0 3
19989: PUSH
19990: LD_INT 91
19992: PUSH
19993: LD_INT 52
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 82
20002: PUSH
20003: LD_INT 34
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 90
20012: PUSH
20013: LD_INT 26
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 86
20022: PUSH
20023: LD_INT 16
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 80
20032: PUSH
20033: LD_INT 12
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: ST_TO_ADDR
20047: GO 20122
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] , [ 38 , 16 ] ] ;
20049: LD_ADDR_VAR 0 3
20053: PUSH
20054: LD_INT 91
20056: PUSH
20057: LD_INT 52
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 68
20066: PUSH
20067: LD_INT 46
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 48
20076: PUSH
20077: LD_INT 43
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 33
20086: PUSH
20087: LD_INT 34
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 30
20096: PUSH
20097: LD_INT 19
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 38
20106: PUSH
20107: LD_INT 16
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
20122: LD_VAR 0 1
20126: PPUSH
20127: CALL_OW 256
20131: PUSH
20132: LD_INT 1000
20134: EQUAL
20135: IFFALSE 20153
// AgressiveMove ( i , path ) else
20137: LD_VAR 0 1
20141: PPUSH
20142: LD_VAR 0 3
20146: PPUSH
20147: CALL 81138 0 2
20151: GO 20264
// if GetLives ( i ) < 650 then
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 256
20162: PUSH
20163: LD_INT 650
20165: LESS
20166: IFFALSE 20264
// begin if not IsInArea ( i , russianRepairArea ) then
20168: LD_VAR 0 1
20172: PPUSH
20173: LD_INT 12
20175: PPUSH
20176: CALL_OW 308
20180: NOT
20181: IFFALSE 20250
// begin SetTag ( i , 0 ) ;
20183: LD_VAR 0 1
20187: PPUSH
20188: LD_INT 0
20190: PPUSH
20191: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
20195: LD_VAR 0 1
20199: PPUSH
20200: CALL_OW 261
20204: PUSH
20205: LD_INT 50
20207: LESS
20208: PUSH
20209: LD_INT 21
20211: PPUSH
20212: CALL_OW 302
20216: AND
20217: IFFALSE 20233
// ComMoveUnit ( i , rufab ) else
20219: LD_VAR 0 1
20223: PPUSH
20224: LD_INT 21
20226: PPUSH
20227: CALL_OW 112
20231: GO 20248
// ComMoveXY ( i , 121 , 99 ) ;
20233: LD_VAR 0 1
20237: PPUSH
20238: LD_INT 121
20240: PPUSH
20241: LD_INT 99
20243: PPUSH
20244: CALL_OW 111
// end else
20248: GO 20264
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
20250: LD_VAR 0 1
20254: PPUSH
20255: CALL_OW 311
20259: PPUSH
20260: CALL 80234 0 1
// end ; end ;
20264: GO 19954
20266: POP
20267: POP
// end ;
20268: PPOPN 4
20270: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
20271: LD_INT 0
20273: PPUSH
20274: PPUSH
20275: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
20276: LD_ADDR_VAR 0 2
20280: PUSH
20281: DOUBLE
20282: LD_INT 1
20284: DEC
20285: ST_TO_ADDR
20286: LD_INT 4
20288: PUSH
20289: LD_INT 5
20291: PUSH
20292: LD_INT 6
20294: PUSH
20295: LD_INT 6
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: PUSH
20304: LD_OWVAR 67
20308: ARRAY
20309: PUSH
20310: FOR_TO
20311: IFFALSE 20486
// begin uc_side := 3 ;
20313: LD_ADDR_OWVAR 20
20317: PUSH
20318: LD_INT 3
20320: ST_TO_ADDR
// uc_nation := 3 ;
20321: LD_ADDR_OWVAR 21
20325: PUSH
20326: LD_INT 3
20328: ST_TO_ADDR
// InitHC_All ( ) ;
20329: CALL_OW 584
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
20333: LD_INT 0
20335: PPUSH
20336: LD_INT 4
20338: PUSH
20339: LD_INT 5
20341: PUSH
20342: LD_INT 6
20344: PUSH
20345: LD_INT 6
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: PUSH
20354: LD_OWVAR 67
20358: ARRAY
20359: PPUSH
20360: CALL_OW 381
// un := CreateHuman ;
20364: LD_ADDR_VAR 0 3
20368: PUSH
20369: CALL_OW 44
20373: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
20374: LD_VAR 0 3
20378: PPUSH
20379: LD_INT 127
20381: PPUSH
20382: LD_INT 62
20384: PPUSH
20385: LD_INT 3
20387: PPUSH
20388: LD_INT 0
20390: PPUSH
20391: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
20395: LD_ADDR_EXP 48
20399: PUSH
20400: LD_EXP 48
20404: PPUSH
20405: LD_EXP 48
20409: PUSH
20410: LD_INT 1
20412: PLUS
20413: PPUSH
20414: LD_VAR 0 3
20418: PPUSH
20419: CALL_OW 1
20423: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
20424: LD_VAR 0 3
20428: PPUSH
20429: LD_INT 83
20431: PPUSH
20432: LD_INT 49
20434: PPUSH
20435: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
20439: LD_VAR 0 3
20443: PPUSH
20444: LD_INT 49
20446: PPUSH
20447: LD_INT 43
20449: PPUSH
20450: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
20454: LD_VAR 0 3
20458: PPUSH
20459: LD_INT 31
20461: PPUSH
20462: LD_INT 15
20464: PPUSH
20465: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
20469: LD_VAR 0 3
20473: PPUSH
20474: LD_INT 63
20476: PPUSH
20477: LD_INT 9
20479: PPUSH
20480: CALL_OW 174
// end ;
20484: GO 20310
20486: POP
20487: POP
// end ; end_of_file
20488: LD_VAR 0 1
20492: RET
// export function CreateNature ; var i , un ; begin
20493: LD_INT 0
20495: PPUSH
20496: PPUSH
20497: PPUSH
// for i := 1 to Difficulty + 2 do
20498: LD_ADDR_VAR 0 2
20502: PUSH
20503: DOUBLE
20504: LD_INT 1
20506: DEC
20507: ST_TO_ADDR
20508: LD_OWVAR 67
20512: PUSH
20513: LD_INT 2
20515: PLUS
20516: PUSH
20517: FOR_TO
20518: IFFALSE 20627
// begin hc_sex := sex_male ;
20520: LD_ADDR_OWVAR 27
20524: PUSH
20525: LD_INT 1
20527: ST_TO_ADDR
// uc_side := 0 ;
20528: LD_ADDR_OWVAR 20
20532: PUSH
20533: LD_INT 0
20535: ST_TO_ADDR
// uc_nation := nation_nature ;
20536: LD_ADDR_OWVAR 21
20540: PUSH
20541: LD_INT 0
20543: ST_TO_ADDR
// hc_class := class_tiger ;
20544: LD_ADDR_OWVAR 28
20548: PUSH
20549: LD_INT 14
20551: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20552: LD_ADDR_OWVAR 31
20556: PUSH
20557: LD_EXP 35
20561: PUSH
20562: LD_INT 0
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
20577: LD_ADDR_OWVAR 35
20581: PUSH
20582: LD_INT 5
20584: NEG
20585: PPUSH
20586: LD_INT 5
20588: PPUSH
20589: CALL_OW 12
20593: PUSH
20594: LD_OWVAR 67
20598: MUL
20599: ST_TO_ADDR
// un := CreateHuman ;
20600: LD_ADDR_VAR 0 3
20604: PUSH
20605: CALL_OW 44
20609: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20610: LD_VAR 0 3
20614: PPUSH
20615: LD_INT 18
20617: PPUSH
20618: LD_INT 0
20620: PPUSH
20621: CALL_OW 49
// end ;
20625: GO 20517
20627: POP
20628: POP
// for i = 1 to rand ( 3 , 4 ) do
20629: LD_ADDR_VAR 0 2
20633: PUSH
20634: DOUBLE
20635: LD_INT 1
20637: DEC
20638: ST_TO_ADDR
20639: LD_INT 3
20641: PPUSH
20642: LD_INT 4
20644: PPUSH
20645: CALL_OW 12
20649: PUSH
20650: FOR_TO
20651: IFFALSE 20721
// begin hc_class := class_phororhacos ;
20653: LD_ADDR_OWVAR 28
20657: PUSH
20658: LD_INT 18
20660: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20661: LD_ADDR_OWVAR 31
20665: PUSH
20666: LD_EXP 35
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: LD_INT 0
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: ST_TO_ADDR
// hc_agressivity := 0 ;
20686: LD_ADDR_OWVAR 35
20690: PUSH
20691: LD_INT 0
20693: ST_TO_ADDR
// un = CreateHuman ;
20694: LD_ADDR_VAR 0 3
20698: PUSH
20699: CALL_OW 44
20703: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20704: LD_VAR 0 3
20708: PPUSH
20709: LD_INT 18
20711: PPUSH
20712: LD_INT 0
20714: PPUSH
20715: CALL_OW 49
// end ;
20719: GO 20650
20721: POP
20722: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
20723: LD_ADDR_VAR 0 2
20727: PUSH
20728: DOUBLE
20729: LD_INT 1
20731: DEC
20732: ST_TO_ADDR
20733: LD_INT 1
20735: PPUSH
20736: LD_INT 3
20738: PPUSH
20739: CALL_OW 12
20743: PUSH
20744: LD_OWVAR 67
20748: PLUS
20749: PUSH
20750: FOR_TO
20751: IFFALSE 20888
// begin hc_class := class_apeman ;
20753: LD_ADDR_OWVAR 28
20757: PUSH
20758: LD_INT 12
20760: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20761: LD_ADDR_OWVAR 31
20765: PUSH
20766: LD_INT 2
20768: PPUSH
20769: LD_INT 5
20771: PPUSH
20772: CALL_OW 12
20776: PUSH
20777: LD_INT 0
20779: PPUSH
20780: LD_INT 2
20782: PPUSH
20783: CALL_OW 12
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: LD_INT 0
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: ST_TO_ADDR
// hc_agressivity := [ rand ( 0 , 10 ) , rand ( 10 , 20 ) , rand ( 20 , 25 ) , rand ( 20 , 30 ) ] [ Difficulty ] ;
20800: LD_ADDR_OWVAR 35
20804: PUSH
20805: LD_INT 0
20807: PPUSH
20808: LD_INT 10
20810: PPUSH
20811: CALL_OW 12
20815: PUSH
20816: LD_INT 10
20818: PPUSH
20819: LD_INT 20
20821: PPUSH
20822: CALL_OW 12
20826: PUSH
20827: LD_INT 20
20829: PPUSH
20830: LD_INT 25
20832: PPUSH
20833: CALL_OW 12
20837: PUSH
20838: LD_INT 20
20840: PPUSH
20841: LD_INT 30
20843: PPUSH
20844: CALL_OW 12
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: LD_OWVAR 67
20859: ARRAY
20860: ST_TO_ADDR
// un := CreateHuman ;
20861: LD_ADDR_VAR 0 3
20865: PUSH
20866: CALL_OW 44
20870: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
20871: LD_VAR 0 3
20875: PPUSH
20876: LD_INT 19
20878: PPUSH
20879: LD_INT 0
20881: PPUSH
20882: CALL_OW 49
// end ;
20886: GO 20750
20888: POP
20889: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
20890: LD_ADDR_VAR 0 2
20894: PUSH
20895: DOUBLE
20896: LD_INT 1
20898: DEC
20899: ST_TO_ADDR
20900: LD_INT 5
20902: PPUSH
20903: LD_INT 6
20905: PPUSH
20906: CALL_OW 12
20910: PUSH
20911: LD_OWVAR 67
20915: PLUS
20916: PUSH
20917: FOR_TO
20918: IFFALSE 21002
// begin hc_class := class_apeman ;
20920: LD_ADDR_OWVAR 28
20924: PUSH
20925: LD_INT 12
20927: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
20928: LD_ADDR_OWVAR 31
20932: PUSH
20933: LD_INT 2
20935: PPUSH
20936: LD_INT 5
20938: PPUSH
20939: CALL_OW 12
20943: PUSH
20944: LD_INT 0
20946: PPUSH
20947: LD_INT 2
20949: PPUSH
20950: CALL_OW 12
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: ST_TO_ADDR
// hc_agressivity := 0 ;
20967: LD_ADDR_OWVAR 35
20971: PUSH
20972: LD_INT 0
20974: ST_TO_ADDR
// un = CreateHuman ;
20975: LD_ADDR_VAR 0 3
20979: PUSH
20980: CALL_OW 44
20984: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20985: LD_VAR 0 3
20989: PPUSH
20990: LD_INT 20
20992: PPUSH
20993: LD_INT 0
20995: PPUSH
20996: CALL_OW 49
// end ;
21000: GO 20917
21002: POP
21003: POP
// end ; end_of_file
21004: LD_VAR 0 1
21008: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
21009: LD_INT 0
21011: PPUSH
// ar_miner := 81 ;
21012: LD_ADDR_EXP 56
21016: PUSH
21017: LD_INT 81
21019: ST_TO_ADDR
// ar_crane := 88 ;
21020: LD_ADDR_EXP 55
21024: PUSH
21025: LD_INT 88
21027: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21028: LD_ADDR_EXP 50
21032: PUSH
21033: LD_INT 89
21035: ST_TO_ADDR
// us_hack := 99 ;
21036: LD_ADDR_EXP 51
21040: PUSH
21041: LD_INT 99
21043: ST_TO_ADDR
// us_artillery := 97 ;
21044: LD_ADDR_EXP 52
21048: PUSH
21049: LD_INT 97
21051: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21052: LD_ADDR_EXP 53
21056: PUSH
21057: LD_INT 91
21059: ST_TO_ADDR
// ar_mortar := 92 ;
21060: LD_ADDR_EXP 54
21064: PUSH
21065: LD_INT 92
21067: ST_TO_ADDR
// ru_flamethrower := 93 ;
21068: LD_ADDR_EXP 57
21072: PUSH
21073: LD_INT 93
21075: ST_TO_ADDR
// ru_radar := 98 ;
21076: LD_ADDR_EXP 49
21080: PUSH
21081: LD_INT 98
21083: ST_TO_ADDR
// tech_Artillery := 80 ;
21084: LD_ADDR_EXP 58
21088: PUSH
21089: LD_INT 80
21091: ST_TO_ADDR
// tech_RadMat := 81 ;
21092: LD_ADDR_EXP 59
21096: PUSH
21097: LD_INT 81
21099: ST_TO_ADDR
// tech_BasicTools := 82 ;
21100: LD_ADDR_EXP 60
21104: PUSH
21105: LD_INT 82
21107: ST_TO_ADDR
// tech_Cargo := 83 ;
21108: LD_ADDR_EXP 61
21112: PUSH
21113: LD_INT 83
21115: ST_TO_ADDR
// tech_Track := 84 ;
21116: LD_ADDR_EXP 62
21120: PUSH
21121: LD_INT 84
21123: ST_TO_ADDR
// tech_Crane := 85 ;
21124: LD_ADDR_EXP 63
21128: PUSH
21129: LD_INT 85
21131: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21132: LD_ADDR_EXP 64
21136: PUSH
21137: LD_INT 86
21139: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21140: LD_ADDR_EXP 65
21144: PUSH
21145: LD_INT 87
21147: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
21148: LD_ADDR_EXP 66
21152: PUSH
21153: LD_INT 88
21155: ST_TO_ADDR
// end ;
21156: LD_VAR 0 1
21160: RET
// every 1 do
21161: GO 21163
21163: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
21164: CALL 21009 0 0
21168: END
// every 0 0$1 do
21169: GO 21171
21171: DISABLE
// begin enable ;
21172: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21173: LD_STRING updateTimer(
21175: PUSH
21176: LD_OWVAR 1
21180: STR
21181: PUSH
21182: LD_STRING );
21184: STR
21185: PPUSH
21186: CALL_OW 559
// end ;
21190: END
// export function SOS_MapStart ( ) ; begin
21191: LD_INT 0
21193: PPUSH
// if streamModeActive then
21194: LD_EXP 67
21198: IFFALSE 21207
// DefineStreamItems ( true ) ;
21200: LD_INT 1
21202: PPUSH
21203: CALL 22861 0 1
// UpdateFactoryWaypoints ( ) ;
21207: CALL 35722 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21211: CALL 35979 0 0
// end ;
21215: LD_VAR 0 1
21219: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21220: LD_INT 0
21222: PPUSH
// if p2 = 100 then
21223: LD_VAR 0 2
21227: PUSH
21228: LD_INT 100
21230: EQUAL
21231: IFFALSE 22234
// begin if not StreamModeActive then
21233: LD_EXP 67
21237: NOT
21238: IFFALSE 21248
// StreamModeActive := true ;
21240: LD_ADDR_EXP 67
21244: PUSH
21245: LD_INT 1
21247: ST_TO_ADDR
// if p3 = 0 then
21248: LD_VAR 0 3
21252: PUSH
21253: LD_INT 0
21255: EQUAL
21256: IFFALSE 21262
// InitStreamMode ;
21258: CALL 22397 0 0
// if p3 = 1 then
21262: LD_VAR 0 3
21266: PUSH
21267: LD_INT 1
21269: EQUAL
21270: IFFALSE 21280
// sRocket := true ;
21272: LD_ADDR_EXP 72
21276: PUSH
21277: LD_INT 1
21279: ST_TO_ADDR
// if p3 = 2 then
21280: LD_VAR 0 3
21284: PUSH
21285: LD_INT 2
21287: EQUAL
21288: IFFALSE 21298
// sSpeed := true ;
21290: LD_ADDR_EXP 71
21294: PUSH
21295: LD_INT 1
21297: ST_TO_ADDR
// if p3 = 3 then
21298: LD_VAR 0 3
21302: PUSH
21303: LD_INT 3
21305: EQUAL
21306: IFFALSE 21316
// sEngine := true ;
21308: LD_ADDR_EXP 73
21312: PUSH
21313: LD_INT 1
21315: ST_TO_ADDR
// if p3 = 4 then
21316: LD_VAR 0 3
21320: PUSH
21321: LD_INT 4
21323: EQUAL
21324: IFFALSE 21334
// sSpec := true ;
21326: LD_ADDR_EXP 70
21330: PUSH
21331: LD_INT 1
21333: ST_TO_ADDR
// if p3 = 5 then
21334: LD_VAR 0 3
21338: PUSH
21339: LD_INT 5
21341: EQUAL
21342: IFFALSE 21352
// sLevel := true ;
21344: LD_ADDR_EXP 74
21348: PUSH
21349: LD_INT 1
21351: ST_TO_ADDR
// if p3 = 6 then
21352: LD_VAR 0 3
21356: PUSH
21357: LD_INT 6
21359: EQUAL
21360: IFFALSE 21370
// sArmoury := true ;
21362: LD_ADDR_EXP 75
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// if p3 = 7 then
21370: LD_VAR 0 3
21374: PUSH
21375: LD_INT 7
21377: EQUAL
21378: IFFALSE 21388
// sRadar := true ;
21380: LD_ADDR_EXP 76
21384: PUSH
21385: LD_INT 1
21387: ST_TO_ADDR
// if p3 = 8 then
21388: LD_VAR 0 3
21392: PUSH
21393: LD_INT 8
21395: EQUAL
21396: IFFALSE 21406
// sBunker := true ;
21398: LD_ADDR_EXP 77
21402: PUSH
21403: LD_INT 1
21405: ST_TO_ADDR
// if p3 = 9 then
21406: LD_VAR 0 3
21410: PUSH
21411: LD_INT 9
21413: EQUAL
21414: IFFALSE 21424
// sHack := true ;
21416: LD_ADDR_EXP 78
21420: PUSH
21421: LD_INT 1
21423: ST_TO_ADDR
// if p3 = 10 then
21424: LD_VAR 0 3
21428: PUSH
21429: LD_INT 10
21431: EQUAL
21432: IFFALSE 21442
// sFire := true ;
21434: LD_ADDR_EXP 79
21438: PUSH
21439: LD_INT 1
21441: ST_TO_ADDR
// if p3 = 11 then
21442: LD_VAR 0 3
21446: PUSH
21447: LD_INT 11
21449: EQUAL
21450: IFFALSE 21460
// sRefresh := true ;
21452: LD_ADDR_EXP 80
21456: PUSH
21457: LD_INT 1
21459: ST_TO_ADDR
// if p3 = 12 then
21460: LD_VAR 0 3
21464: PUSH
21465: LD_INT 12
21467: EQUAL
21468: IFFALSE 21478
// sExp := true ;
21470: LD_ADDR_EXP 81
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// if p3 = 13 then
21478: LD_VAR 0 3
21482: PUSH
21483: LD_INT 13
21485: EQUAL
21486: IFFALSE 21496
// sDepot := true ;
21488: LD_ADDR_EXP 82
21492: PUSH
21493: LD_INT 1
21495: ST_TO_ADDR
// if p3 = 14 then
21496: LD_VAR 0 3
21500: PUSH
21501: LD_INT 14
21503: EQUAL
21504: IFFALSE 21514
// sFlag := true ;
21506: LD_ADDR_EXP 83
21510: PUSH
21511: LD_INT 1
21513: ST_TO_ADDR
// if p3 = 15 then
21514: LD_VAR 0 3
21518: PUSH
21519: LD_INT 15
21521: EQUAL
21522: IFFALSE 21532
// sKamikadze := true ;
21524: LD_ADDR_EXP 91
21528: PUSH
21529: LD_INT 1
21531: ST_TO_ADDR
// if p3 = 16 then
21532: LD_VAR 0 3
21536: PUSH
21537: LD_INT 16
21539: EQUAL
21540: IFFALSE 21550
// sTroll := true ;
21542: LD_ADDR_EXP 92
21546: PUSH
21547: LD_INT 1
21549: ST_TO_ADDR
// if p3 = 17 then
21550: LD_VAR 0 3
21554: PUSH
21555: LD_INT 17
21557: EQUAL
21558: IFFALSE 21568
// sSlow := true ;
21560: LD_ADDR_EXP 93
21564: PUSH
21565: LD_INT 1
21567: ST_TO_ADDR
// if p3 = 18 then
21568: LD_VAR 0 3
21572: PUSH
21573: LD_INT 18
21575: EQUAL
21576: IFFALSE 21586
// sLack := true ;
21578: LD_ADDR_EXP 94
21582: PUSH
21583: LD_INT 1
21585: ST_TO_ADDR
// if p3 = 19 then
21586: LD_VAR 0 3
21590: PUSH
21591: LD_INT 19
21593: EQUAL
21594: IFFALSE 21604
// sTank := true ;
21596: LD_ADDR_EXP 96
21600: PUSH
21601: LD_INT 1
21603: ST_TO_ADDR
// if p3 = 20 then
21604: LD_VAR 0 3
21608: PUSH
21609: LD_INT 20
21611: EQUAL
21612: IFFALSE 21622
// sRemote := true ;
21614: LD_ADDR_EXP 97
21618: PUSH
21619: LD_INT 1
21621: ST_TO_ADDR
// if p3 = 21 then
21622: LD_VAR 0 3
21626: PUSH
21627: LD_INT 21
21629: EQUAL
21630: IFFALSE 21640
// sPowell := true ;
21632: LD_ADDR_EXP 98
21636: PUSH
21637: LD_INT 1
21639: ST_TO_ADDR
// if p3 = 22 then
21640: LD_VAR 0 3
21644: PUSH
21645: LD_INT 22
21647: EQUAL
21648: IFFALSE 21658
// sTeleport := true ;
21650: LD_ADDR_EXP 101
21654: PUSH
21655: LD_INT 1
21657: ST_TO_ADDR
// if p3 = 23 then
21658: LD_VAR 0 3
21662: PUSH
21663: LD_INT 23
21665: EQUAL
21666: IFFALSE 21676
// sOilTower := true ;
21668: LD_ADDR_EXP 103
21672: PUSH
21673: LD_INT 1
21675: ST_TO_ADDR
// if p3 = 24 then
21676: LD_VAR 0 3
21680: PUSH
21681: LD_INT 24
21683: EQUAL
21684: IFFALSE 21694
// sShovel := true ;
21686: LD_ADDR_EXP 104
21690: PUSH
21691: LD_INT 1
21693: ST_TO_ADDR
// if p3 = 25 then
21694: LD_VAR 0 3
21698: PUSH
21699: LD_INT 25
21701: EQUAL
21702: IFFALSE 21712
// sSheik := true ;
21704: LD_ADDR_EXP 105
21708: PUSH
21709: LD_INT 1
21711: ST_TO_ADDR
// if p3 = 26 then
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 26
21719: EQUAL
21720: IFFALSE 21730
// sEarthquake := true ;
21722: LD_ADDR_EXP 107
21726: PUSH
21727: LD_INT 1
21729: ST_TO_ADDR
// if p3 = 27 then
21730: LD_VAR 0 3
21734: PUSH
21735: LD_INT 27
21737: EQUAL
21738: IFFALSE 21748
// sAI := true ;
21740: LD_ADDR_EXP 108
21744: PUSH
21745: LD_INT 1
21747: ST_TO_ADDR
// if p3 = 28 then
21748: LD_VAR 0 3
21752: PUSH
21753: LD_INT 28
21755: EQUAL
21756: IFFALSE 21766
// sCargo := true ;
21758: LD_ADDR_EXP 111
21762: PUSH
21763: LD_INT 1
21765: ST_TO_ADDR
// if p3 = 29 then
21766: LD_VAR 0 3
21770: PUSH
21771: LD_INT 29
21773: EQUAL
21774: IFFALSE 21784
// sDLaser := true ;
21776: LD_ADDR_EXP 112
21780: PUSH
21781: LD_INT 1
21783: ST_TO_ADDR
// if p3 = 30 then
21784: LD_VAR 0 3
21788: PUSH
21789: LD_INT 30
21791: EQUAL
21792: IFFALSE 21802
// sExchange := true ;
21794: LD_ADDR_EXP 113
21798: PUSH
21799: LD_INT 1
21801: ST_TO_ADDR
// if p3 = 31 then
21802: LD_VAR 0 3
21806: PUSH
21807: LD_INT 31
21809: EQUAL
21810: IFFALSE 21820
// sFac := true ;
21812: LD_ADDR_EXP 114
21816: PUSH
21817: LD_INT 1
21819: ST_TO_ADDR
// if p3 = 32 then
21820: LD_VAR 0 3
21824: PUSH
21825: LD_INT 32
21827: EQUAL
21828: IFFALSE 21838
// sPower := true ;
21830: LD_ADDR_EXP 115
21834: PUSH
21835: LD_INT 1
21837: ST_TO_ADDR
// if p3 = 33 then
21838: LD_VAR 0 3
21842: PUSH
21843: LD_INT 33
21845: EQUAL
21846: IFFALSE 21856
// sRandom := true ;
21848: LD_ADDR_EXP 116
21852: PUSH
21853: LD_INT 1
21855: ST_TO_ADDR
// if p3 = 34 then
21856: LD_VAR 0 3
21860: PUSH
21861: LD_INT 34
21863: EQUAL
21864: IFFALSE 21874
// sShield := true ;
21866: LD_ADDR_EXP 117
21870: PUSH
21871: LD_INT 1
21873: ST_TO_ADDR
// if p3 = 35 then
21874: LD_VAR 0 3
21878: PUSH
21879: LD_INT 35
21881: EQUAL
21882: IFFALSE 21892
// sTime := true ;
21884: LD_ADDR_EXP 118
21888: PUSH
21889: LD_INT 1
21891: ST_TO_ADDR
// if p3 = 36 then
21892: LD_VAR 0 3
21896: PUSH
21897: LD_INT 36
21899: EQUAL
21900: IFFALSE 21910
// sTools := true ;
21902: LD_ADDR_EXP 119
21906: PUSH
21907: LD_INT 1
21909: ST_TO_ADDR
// if p3 = 101 then
21910: LD_VAR 0 3
21914: PUSH
21915: LD_INT 101
21917: EQUAL
21918: IFFALSE 21928
// sSold := true ;
21920: LD_ADDR_EXP 84
21924: PUSH
21925: LD_INT 1
21927: ST_TO_ADDR
// if p3 = 102 then
21928: LD_VAR 0 3
21932: PUSH
21933: LD_INT 102
21935: EQUAL
21936: IFFALSE 21946
// sDiff := true ;
21938: LD_ADDR_EXP 85
21942: PUSH
21943: LD_INT 1
21945: ST_TO_ADDR
// if p3 = 103 then
21946: LD_VAR 0 3
21950: PUSH
21951: LD_INT 103
21953: EQUAL
21954: IFFALSE 21964
// sFog := true ;
21956: LD_ADDR_EXP 88
21960: PUSH
21961: LD_INT 1
21963: ST_TO_ADDR
// if p3 = 104 then
21964: LD_VAR 0 3
21968: PUSH
21969: LD_INT 104
21971: EQUAL
21972: IFFALSE 21982
// sReset := true ;
21974: LD_ADDR_EXP 89
21978: PUSH
21979: LD_INT 1
21981: ST_TO_ADDR
// if p3 = 105 then
21982: LD_VAR 0 3
21986: PUSH
21987: LD_INT 105
21989: EQUAL
21990: IFFALSE 22000
// sSun := true ;
21992: LD_ADDR_EXP 90
21996: PUSH
21997: LD_INT 1
21999: ST_TO_ADDR
// if p3 = 106 then
22000: LD_VAR 0 3
22004: PUSH
22005: LD_INT 106
22007: EQUAL
22008: IFFALSE 22018
// sTiger := true ;
22010: LD_ADDR_EXP 86
22014: PUSH
22015: LD_INT 1
22017: ST_TO_ADDR
// if p3 = 107 then
22018: LD_VAR 0 3
22022: PUSH
22023: LD_INT 107
22025: EQUAL
22026: IFFALSE 22036
// sBomb := true ;
22028: LD_ADDR_EXP 87
22032: PUSH
22033: LD_INT 1
22035: ST_TO_ADDR
// if p3 = 108 then
22036: LD_VAR 0 3
22040: PUSH
22041: LD_INT 108
22043: EQUAL
22044: IFFALSE 22054
// sWound := true ;
22046: LD_ADDR_EXP 95
22050: PUSH
22051: LD_INT 1
22053: ST_TO_ADDR
// if p3 = 109 then
22054: LD_VAR 0 3
22058: PUSH
22059: LD_INT 109
22061: EQUAL
22062: IFFALSE 22072
// sBetray := true ;
22064: LD_ADDR_EXP 99
22068: PUSH
22069: LD_INT 1
22071: ST_TO_ADDR
// if p3 = 110 then
22072: LD_VAR 0 3
22076: PUSH
22077: LD_INT 110
22079: EQUAL
22080: IFFALSE 22090
// sContamin := true ;
22082: LD_ADDR_EXP 100
22086: PUSH
22087: LD_INT 1
22089: ST_TO_ADDR
// if p3 = 111 then
22090: LD_VAR 0 3
22094: PUSH
22095: LD_INT 111
22097: EQUAL
22098: IFFALSE 22108
// sOil := true ;
22100: LD_ADDR_EXP 102
22104: PUSH
22105: LD_INT 1
22107: ST_TO_ADDR
// if p3 = 112 then
22108: LD_VAR 0 3
22112: PUSH
22113: LD_INT 112
22115: EQUAL
22116: IFFALSE 22126
// sStu := true ;
22118: LD_ADDR_EXP 106
22122: PUSH
22123: LD_INT 1
22125: ST_TO_ADDR
// if p3 = 113 then
22126: LD_VAR 0 3
22130: PUSH
22131: LD_INT 113
22133: EQUAL
22134: IFFALSE 22144
// sBazooka := true ;
22136: LD_ADDR_EXP 109
22140: PUSH
22141: LD_INT 1
22143: ST_TO_ADDR
// if p3 = 114 then
22144: LD_VAR 0 3
22148: PUSH
22149: LD_INT 114
22151: EQUAL
22152: IFFALSE 22162
// sMortar := true ;
22154: LD_ADDR_EXP 110
22158: PUSH
22159: LD_INT 1
22161: ST_TO_ADDR
// if p3 = 115 then
22162: LD_VAR 0 3
22166: PUSH
22167: LD_INT 115
22169: EQUAL
22170: IFFALSE 22180
// sRanger := true ;
22172: LD_ADDR_EXP 120
22176: PUSH
22177: LD_INT 1
22179: ST_TO_ADDR
// if p3 = 116 then
22180: LD_VAR 0 3
22184: PUSH
22185: LD_INT 116
22187: EQUAL
22188: IFFALSE 22198
// sComputer := true ;
22190: LD_ADDR_EXP 121
22194: PUSH
22195: LD_INT 1
22197: ST_TO_ADDR
// if p3 = 117 then
22198: LD_VAR 0 3
22202: PUSH
22203: LD_INT 117
22205: EQUAL
22206: IFFALSE 22216
// s30 := true ;
22208: LD_ADDR_EXP 122
22212: PUSH
22213: LD_INT 1
22215: ST_TO_ADDR
// if p3 = 118 then
22216: LD_VAR 0 3
22220: PUSH
22221: LD_INT 118
22223: EQUAL
22224: IFFALSE 22234
// s60 := true ;
22226: LD_ADDR_EXP 123
22230: PUSH
22231: LD_INT 1
22233: ST_TO_ADDR
// end ; if p2 = 101 then
22234: LD_VAR 0 2
22238: PUSH
22239: LD_INT 101
22241: EQUAL
22242: IFFALSE 22370
// begin case p3 of 1 :
22244: LD_VAR 0 3
22248: PUSH
22249: LD_INT 1
22251: DOUBLE
22252: EQUAL
22253: IFTRUE 22257
22255: GO 22264
22257: POP
// hHackUnlimitedResources ; 2 :
22258: CALL 34468 0 0
22262: GO 22370
22264: LD_INT 2
22266: DOUBLE
22267: EQUAL
22268: IFTRUE 22272
22270: GO 22279
22272: POP
// hHackSetLevel10 ; 3 :
22273: CALL 34601 0 0
22277: GO 22370
22279: LD_INT 3
22281: DOUBLE
22282: EQUAL
22283: IFTRUE 22287
22285: GO 22294
22287: POP
// hHackSetLevel10YourUnits ; 4 :
22288: CALL 34686 0 0
22292: GO 22370
22294: LD_INT 4
22296: DOUBLE
22297: EQUAL
22298: IFTRUE 22302
22300: GO 22309
22302: POP
// hHackInvincible ; 5 :
22303: CALL 35134 0 0
22307: GO 22370
22309: LD_INT 5
22311: DOUBLE
22312: EQUAL
22313: IFTRUE 22317
22315: GO 22324
22317: POP
// hHackInvisible ; 6 :
22318: CALL 35245 0 0
22322: GO 22370
22324: LD_INT 6
22326: DOUBLE
22327: EQUAL
22328: IFTRUE 22332
22330: GO 22339
22332: POP
// hHackChangeYourSide ; 7 :
22333: CALL 35302 0 0
22337: GO 22370
22339: LD_INT 7
22341: DOUBLE
22342: EQUAL
22343: IFTRUE 22347
22345: GO 22354
22347: POP
// hHackChangeUnitSide ; 8 :
22348: CALL 35344 0 0
22352: GO 22370
22354: LD_INT 8
22356: DOUBLE
22357: EQUAL
22358: IFTRUE 22362
22360: GO 22369
22362: POP
// hHackFog ; end ;
22363: CALL 35445 0 0
22367: GO 22370
22369: POP
// end ; end ;
22370: LD_VAR 0 7
22374: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
22375: GO 22377
22377: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
22378: LD_STRING initStreamRollete();
22380: PPUSH
22381: CALL_OW 559
// InitStreamMode ;
22385: CALL 22397 0 0
// DefineStreamItems ( false ) ;
22389: LD_INT 0
22391: PPUSH
22392: CALL 22861 0 1
// end ;
22396: END
// function InitStreamMode ; begin
22397: LD_INT 0
22399: PPUSH
// streamModeActive := false ;
22400: LD_ADDR_EXP 67
22404: PUSH
22405: LD_INT 0
22407: ST_TO_ADDR
// normalCounter := 36 ;
22408: LD_ADDR_EXP 68
22412: PUSH
22413: LD_INT 36
22415: ST_TO_ADDR
// hardcoreCounter := 18 ;
22416: LD_ADDR_EXP 69
22420: PUSH
22421: LD_INT 18
22423: ST_TO_ADDR
// sRocket := false ;
22424: LD_ADDR_EXP 72
22428: PUSH
22429: LD_INT 0
22431: ST_TO_ADDR
// sSpeed := false ;
22432: LD_ADDR_EXP 71
22436: PUSH
22437: LD_INT 0
22439: ST_TO_ADDR
// sEngine := false ;
22440: LD_ADDR_EXP 73
22444: PUSH
22445: LD_INT 0
22447: ST_TO_ADDR
// sSpec := false ;
22448: LD_ADDR_EXP 70
22452: PUSH
22453: LD_INT 0
22455: ST_TO_ADDR
// sLevel := false ;
22456: LD_ADDR_EXP 74
22460: PUSH
22461: LD_INT 0
22463: ST_TO_ADDR
// sArmoury := false ;
22464: LD_ADDR_EXP 75
22468: PUSH
22469: LD_INT 0
22471: ST_TO_ADDR
// sRadar := false ;
22472: LD_ADDR_EXP 76
22476: PUSH
22477: LD_INT 0
22479: ST_TO_ADDR
// sBunker := false ;
22480: LD_ADDR_EXP 77
22484: PUSH
22485: LD_INT 0
22487: ST_TO_ADDR
// sHack := false ;
22488: LD_ADDR_EXP 78
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
// sFire := false ;
22496: LD_ADDR_EXP 79
22500: PUSH
22501: LD_INT 0
22503: ST_TO_ADDR
// sRefresh := false ;
22504: LD_ADDR_EXP 80
22508: PUSH
22509: LD_INT 0
22511: ST_TO_ADDR
// sExp := false ;
22512: LD_ADDR_EXP 81
22516: PUSH
22517: LD_INT 0
22519: ST_TO_ADDR
// sDepot := false ;
22520: LD_ADDR_EXP 82
22524: PUSH
22525: LD_INT 0
22527: ST_TO_ADDR
// sFlag := false ;
22528: LD_ADDR_EXP 83
22532: PUSH
22533: LD_INT 0
22535: ST_TO_ADDR
// sKamikadze := false ;
22536: LD_ADDR_EXP 91
22540: PUSH
22541: LD_INT 0
22543: ST_TO_ADDR
// sTroll := false ;
22544: LD_ADDR_EXP 92
22548: PUSH
22549: LD_INT 0
22551: ST_TO_ADDR
// sSlow := false ;
22552: LD_ADDR_EXP 93
22556: PUSH
22557: LD_INT 0
22559: ST_TO_ADDR
// sLack := false ;
22560: LD_ADDR_EXP 94
22564: PUSH
22565: LD_INT 0
22567: ST_TO_ADDR
// sTank := false ;
22568: LD_ADDR_EXP 96
22572: PUSH
22573: LD_INT 0
22575: ST_TO_ADDR
// sRemote := false ;
22576: LD_ADDR_EXP 97
22580: PUSH
22581: LD_INT 0
22583: ST_TO_ADDR
// sPowell := false ;
22584: LD_ADDR_EXP 98
22588: PUSH
22589: LD_INT 0
22591: ST_TO_ADDR
// sTeleport := false ;
22592: LD_ADDR_EXP 101
22596: PUSH
22597: LD_INT 0
22599: ST_TO_ADDR
// sOilTower := false ;
22600: LD_ADDR_EXP 103
22604: PUSH
22605: LD_INT 0
22607: ST_TO_ADDR
// sShovel := false ;
22608: LD_ADDR_EXP 104
22612: PUSH
22613: LD_INT 0
22615: ST_TO_ADDR
// sSheik := false ;
22616: LD_ADDR_EXP 105
22620: PUSH
22621: LD_INT 0
22623: ST_TO_ADDR
// sEarthquake := false ;
22624: LD_ADDR_EXP 107
22628: PUSH
22629: LD_INT 0
22631: ST_TO_ADDR
// sAI := false ;
22632: LD_ADDR_EXP 108
22636: PUSH
22637: LD_INT 0
22639: ST_TO_ADDR
// sCargo := false ;
22640: LD_ADDR_EXP 111
22644: PUSH
22645: LD_INT 0
22647: ST_TO_ADDR
// sDLaser := false ;
22648: LD_ADDR_EXP 112
22652: PUSH
22653: LD_INT 0
22655: ST_TO_ADDR
// sExchange := false ;
22656: LD_ADDR_EXP 113
22660: PUSH
22661: LD_INT 0
22663: ST_TO_ADDR
// sFac := false ;
22664: LD_ADDR_EXP 114
22668: PUSH
22669: LD_INT 0
22671: ST_TO_ADDR
// sPower := false ;
22672: LD_ADDR_EXP 115
22676: PUSH
22677: LD_INT 0
22679: ST_TO_ADDR
// sRandom := false ;
22680: LD_ADDR_EXP 116
22684: PUSH
22685: LD_INT 0
22687: ST_TO_ADDR
// sShield := false ;
22688: LD_ADDR_EXP 117
22692: PUSH
22693: LD_INT 0
22695: ST_TO_ADDR
// sTime := false ;
22696: LD_ADDR_EXP 118
22700: PUSH
22701: LD_INT 0
22703: ST_TO_ADDR
// sTools := false ;
22704: LD_ADDR_EXP 119
22708: PUSH
22709: LD_INT 0
22711: ST_TO_ADDR
// sSold := false ;
22712: LD_ADDR_EXP 84
22716: PUSH
22717: LD_INT 0
22719: ST_TO_ADDR
// sDiff := false ;
22720: LD_ADDR_EXP 85
22724: PUSH
22725: LD_INT 0
22727: ST_TO_ADDR
// sFog := false ;
22728: LD_ADDR_EXP 88
22732: PUSH
22733: LD_INT 0
22735: ST_TO_ADDR
// sReset := false ;
22736: LD_ADDR_EXP 89
22740: PUSH
22741: LD_INT 0
22743: ST_TO_ADDR
// sSun := false ;
22744: LD_ADDR_EXP 90
22748: PUSH
22749: LD_INT 0
22751: ST_TO_ADDR
// sTiger := false ;
22752: LD_ADDR_EXP 86
22756: PUSH
22757: LD_INT 0
22759: ST_TO_ADDR
// sBomb := false ;
22760: LD_ADDR_EXP 87
22764: PUSH
22765: LD_INT 0
22767: ST_TO_ADDR
// sWound := false ;
22768: LD_ADDR_EXP 95
22772: PUSH
22773: LD_INT 0
22775: ST_TO_ADDR
// sBetray := false ;
22776: LD_ADDR_EXP 99
22780: PUSH
22781: LD_INT 0
22783: ST_TO_ADDR
// sContamin := false ;
22784: LD_ADDR_EXP 100
22788: PUSH
22789: LD_INT 0
22791: ST_TO_ADDR
// sOil := false ;
22792: LD_ADDR_EXP 102
22796: PUSH
22797: LD_INT 0
22799: ST_TO_ADDR
// sStu := false ;
22800: LD_ADDR_EXP 106
22804: PUSH
22805: LD_INT 0
22807: ST_TO_ADDR
// sBazooka := false ;
22808: LD_ADDR_EXP 109
22812: PUSH
22813: LD_INT 0
22815: ST_TO_ADDR
// sMortar := false ;
22816: LD_ADDR_EXP 110
22820: PUSH
22821: LD_INT 0
22823: ST_TO_ADDR
// sRanger := false ;
22824: LD_ADDR_EXP 120
22828: PUSH
22829: LD_INT 0
22831: ST_TO_ADDR
// sComputer := false ;
22832: LD_ADDR_EXP 121
22836: PUSH
22837: LD_INT 0
22839: ST_TO_ADDR
// s30 := false ;
22840: LD_ADDR_EXP 122
22844: PUSH
22845: LD_INT 0
22847: ST_TO_ADDR
// s60 := false ;
22848: LD_ADDR_EXP 123
22852: PUSH
22853: LD_INT 0
22855: ST_TO_ADDR
// end ;
22856: LD_VAR 0 1
22860: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22861: LD_INT 0
22863: PPUSH
22864: PPUSH
22865: PPUSH
22866: PPUSH
22867: PPUSH
22868: PPUSH
22869: PPUSH
// result := [ ] ;
22870: LD_ADDR_VAR 0 2
22874: PUSH
22875: EMPTY
22876: ST_TO_ADDR
// if campaign_id = 1 then
22877: LD_OWVAR 69
22881: PUSH
22882: LD_INT 1
22884: EQUAL
22885: IFFALSE 26051
// begin case mission_number of 1 :
22887: LD_OWVAR 70
22891: PUSH
22892: LD_INT 1
22894: DOUBLE
22895: EQUAL
22896: IFTRUE 22900
22898: GO 22976
22900: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22901: LD_ADDR_VAR 0 2
22905: PUSH
22906: LD_INT 2
22908: PUSH
22909: LD_INT 4
22911: PUSH
22912: LD_INT 11
22914: PUSH
22915: LD_INT 12
22917: PUSH
22918: LD_INT 15
22920: PUSH
22921: LD_INT 16
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_INT 23
22929: PUSH
22930: LD_INT 26
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 101
22946: PUSH
22947: LD_INT 102
22949: PUSH
22950: LD_INT 106
22952: PUSH
22953: LD_INT 116
22955: PUSH
22956: LD_INT 117
22958: PUSH
22959: LD_INT 118
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: ST_TO_ADDR
22974: GO 26049
22976: LD_INT 2
22978: DOUBLE
22979: EQUAL
22980: IFTRUE 22984
22982: GO 23068
22984: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22985: LD_ADDR_VAR 0 2
22989: PUSH
22990: LD_INT 2
22992: PUSH
22993: LD_INT 4
22995: PUSH
22996: LD_INT 11
22998: PUSH
22999: LD_INT 12
23001: PUSH
23002: LD_INT 15
23004: PUSH
23005: LD_INT 16
23007: PUSH
23008: LD_INT 22
23010: PUSH
23011: LD_INT 23
23013: PUSH
23014: LD_INT 26
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 101
23030: PUSH
23031: LD_INT 102
23033: PUSH
23034: LD_INT 105
23036: PUSH
23037: LD_INT 106
23039: PUSH
23040: LD_INT 108
23042: PUSH
23043: LD_INT 116
23045: PUSH
23046: LD_INT 117
23048: PUSH
23049: LD_INT 118
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: ST_TO_ADDR
23066: GO 26049
23068: LD_INT 3
23070: DOUBLE
23071: EQUAL
23072: IFTRUE 23076
23074: GO 23164
23076: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23077: LD_ADDR_VAR 0 2
23081: PUSH
23082: LD_INT 2
23084: PUSH
23085: LD_INT 4
23087: PUSH
23088: LD_INT 5
23090: PUSH
23091: LD_INT 11
23093: PUSH
23094: LD_INT 12
23096: PUSH
23097: LD_INT 15
23099: PUSH
23100: LD_INT 16
23102: PUSH
23103: LD_INT 22
23105: PUSH
23106: LD_INT 26
23108: PUSH
23109: LD_INT 36
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 101
23126: PUSH
23127: LD_INT 102
23129: PUSH
23130: LD_INT 105
23132: PUSH
23133: LD_INT 106
23135: PUSH
23136: LD_INT 108
23138: PUSH
23139: LD_INT 116
23141: PUSH
23142: LD_INT 117
23144: PUSH
23145: LD_INT 118
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: ST_TO_ADDR
23162: GO 26049
23164: LD_INT 4
23166: DOUBLE
23167: EQUAL
23168: IFTRUE 23172
23170: GO 23268
23172: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23173: LD_ADDR_VAR 0 2
23177: PUSH
23178: LD_INT 2
23180: PUSH
23181: LD_INT 4
23183: PUSH
23184: LD_INT 5
23186: PUSH
23187: LD_INT 8
23189: PUSH
23190: LD_INT 11
23192: PUSH
23193: LD_INT 12
23195: PUSH
23196: LD_INT 15
23198: PUSH
23199: LD_INT 16
23201: PUSH
23202: LD_INT 22
23204: PUSH
23205: LD_INT 23
23207: PUSH
23208: LD_INT 26
23210: PUSH
23211: LD_INT 36
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 101
23230: PUSH
23231: LD_INT 102
23233: PUSH
23234: LD_INT 105
23236: PUSH
23237: LD_INT 106
23239: PUSH
23240: LD_INT 108
23242: PUSH
23243: LD_INT 116
23245: PUSH
23246: LD_INT 117
23248: PUSH
23249: LD_INT 118
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: ST_TO_ADDR
23266: GO 26049
23268: LD_INT 5
23270: DOUBLE
23271: EQUAL
23272: IFTRUE 23276
23274: GO 23388
23276: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23277: LD_ADDR_VAR 0 2
23281: PUSH
23282: LD_INT 2
23284: PUSH
23285: LD_INT 4
23287: PUSH
23288: LD_INT 5
23290: PUSH
23291: LD_INT 6
23293: PUSH
23294: LD_INT 8
23296: PUSH
23297: LD_INT 11
23299: PUSH
23300: LD_INT 12
23302: PUSH
23303: LD_INT 15
23305: PUSH
23306: LD_INT 16
23308: PUSH
23309: LD_INT 22
23311: PUSH
23312: LD_INT 23
23314: PUSH
23315: LD_INT 25
23317: PUSH
23318: LD_INT 26
23320: PUSH
23321: LD_INT 36
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 101
23342: PUSH
23343: LD_INT 102
23345: PUSH
23346: LD_INT 105
23348: PUSH
23349: LD_INT 106
23351: PUSH
23352: LD_INT 108
23354: PUSH
23355: LD_INT 109
23357: PUSH
23358: LD_INT 112
23360: PUSH
23361: LD_INT 116
23363: PUSH
23364: LD_INT 117
23366: PUSH
23367: LD_INT 118
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: ST_TO_ADDR
23386: GO 26049
23388: LD_INT 6
23390: DOUBLE
23391: EQUAL
23392: IFTRUE 23396
23394: GO 23528
23396: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23397: LD_ADDR_VAR 0 2
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: LD_INT 4
23407: PUSH
23408: LD_INT 5
23410: PUSH
23411: LD_INT 6
23413: PUSH
23414: LD_INT 8
23416: PUSH
23417: LD_INT 11
23419: PUSH
23420: LD_INT 12
23422: PUSH
23423: LD_INT 15
23425: PUSH
23426: LD_INT 16
23428: PUSH
23429: LD_INT 20
23431: PUSH
23432: LD_INT 21
23434: PUSH
23435: LD_INT 22
23437: PUSH
23438: LD_INT 23
23440: PUSH
23441: LD_INT 25
23443: PUSH
23444: LD_INT 26
23446: PUSH
23447: LD_INT 30
23449: PUSH
23450: LD_INT 31
23452: PUSH
23453: LD_INT 32
23455: PUSH
23456: LD_INT 36
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 101
23482: PUSH
23483: LD_INT 102
23485: PUSH
23486: LD_INT 105
23488: PUSH
23489: LD_INT 106
23491: PUSH
23492: LD_INT 108
23494: PUSH
23495: LD_INT 109
23497: PUSH
23498: LD_INT 112
23500: PUSH
23501: LD_INT 116
23503: PUSH
23504: LD_INT 117
23506: PUSH
23507: LD_INT 118
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: ST_TO_ADDR
23526: GO 26049
23528: LD_INT 7
23530: DOUBLE
23531: EQUAL
23532: IFTRUE 23536
23534: GO 23648
23536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23537: LD_ADDR_VAR 0 2
23541: PUSH
23542: LD_INT 2
23544: PUSH
23545: LD_INT 4
23547: PUSH
23548: LD_INT 5
23550: PUSH
23551: LD_INT 7
23553: PUSH
23554: LD_INT 11
23556: PUSH
23557: LD_INT 12
23559: PUSH
23560: LD_INT 15
23562: PUSH
23563: LD_INT 16
23565: PUSH
23566: LD_INT 20
23568: PUSH
23569: LD_INT 21
23571: PUSH
23572: LD_INT 22
23574: PUSH
23575: LD_INT 23
23577: PUSH
23578: LD_INT 25
23580: PUSH
23581: LD_INT 26
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 101
23602: PUSH
23603: LD_INT 102
23605: PUSH
23606: LD_INT 103
23608: PUSH
23609: LD_INT 105
23611: PUSH
23612: LD_INT 106
23614: PUSH
23615: LD_INT 108
23617: PUSH
23618: LD_INT 112
23620: PUSH
23621: LD_INT 116
23623: PUSH
23624: LD_INT 117
23626: PUSH
23627: LD_INT 118
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: ST_TO_ADDR
23646: GO 26049
23648: LD_INT 8
23650: DOUBLE
23651: EQUAL
23652: IFTRUE 23656
23654: GO 23796
23656: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23657: LD_ADDR_VAR 0 2
23661: PUSH
23662: LD_INT 2
23664: PUSH
23665: LD_INT 4
23667: PUSH
23668: LD_INT 5
23670: PUSH
23671: LD_INT 6
23673: PUSH
23674: LD_INT 7
23676: PUSH
23677: LD_INT 8
23679: PUSH
23680: LD_INT 11
23682: PUSH
23683: LD_INT 12
23685: PUSH
23686: LD_INT 15
23688: PUSH
23689: LD_INT 16
23691: PUSH
23692: LD_INT 20
23694: PUSH
23695: LD_INT 21
23697: PUSH
23698: LD_INT 22
23700: PUSH
23701: LD_INT 23
23703: PUSH
23704: LD_INT 25
23706: PUSH
23707: LD_INT 26
23709: PUSH
23710: LD_INT 30
23712: PUSH
23713: LD_INT 31
23715: PUSH
23716: LD_INT 32
23718: PUSH
23719: LD_INT 36
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 101
23746: PUSH
23747: LD_INT 102
23749: PUSH
23750: LD_INT 103
23752: PUSH
23753: LD_INT 105
23755: PUSH
23756: LD_INT 106
23758: PUSH
23759: LD_INT 108
23761: PUSH
23762: LD_INT 109
23764: PUSH
23765: LD_INT 112
23767: PUSH
23768: LD_INT 116
23770: PUSH
23771: LD_INT 117
23773: PUSH
23774: LD_INT 118
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: ST_TO_ADDR
23794: GO 26049
23796: LD_INT 9
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23952
23804: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23805: LD_ADDR_VAR 0 2
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 4
23815: PUSH
23816: LD_INT 5
23818: PUSH
23819: LD_INT 6
23821: PUSH
23822: LD_INT 7
23824: PUSH
23825: LD_INT 8
23827: PUSH
23828: LD_INT 11
23830: PUSH
23831: LD_INT 12
23833: PUSH
23834: LD_INT 15
23836: PUSH
23837: LD_INT 16
23839: PUSH
23840: LD_INT 20
23842: PUSH
23843: LD_INT 21
23845: PUSH
23846: LD_INT 22
23848: PUSH
23849: LD_INT 23
23851: PUSH
23852: LD_INT 25
23854: PUSH
23855: LD_INT 26
23857: PUSH
23858: LD_INT 28
23860: PUSH
23861: LD_INT 30
23863: PUSH
23864: LD_INT 31
23866: PUSH
23867: LD_INT 32
23869: PUSH
23870: LD_INT 36
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 101
23898: PUSH
23899: LD_INT 102
23901: PUSH
23902: LD_INT 103
23904: PUSH
23905: LD_INT 105
23907: PUSH
23908: LD_INT 106
23910: PUSH
23911: LD_INT 108
23913: PUSH
23914: LD_INT 109
23916: PUSH
23917: LD_INT 112
23919: PUSH
23920: LD_INT 114
23922: PUSH
23923: LD_INT 116
23925: PUSH
23926: LD_INT 117
23928: PUSH
23929: LD_INT 118
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: ST_TO_ADDR
23950: GO 26049
23952: LD_INT 10
23954: DOUBLE
23955: EQUAL
23956: IFTRUE 23960
23958: GO 24156
23960: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23961: LD_ADDR_VAR 0 2
23965: PUSH
23966: LD_INT 2
23968: PUSH
23969: LD_INT 4
23971: PUSH
23972: LD_INT 5
23974: PUSH
23975: LD_INT 6
23977: PUSH
23978: LD_INT 7
23980: PUSH
23981: LD_INT 8
23983: PUSH
23984: LD_INT 9
23986: PUSH
23987: LD_INT 10
23989: PUSH
23990: LD_INT 11
23992: PUSH
23993: LD_INT 12
23995: PUSH
23996: LD_INT 13
23998: PUSH
23999: LD_INT 14
24001: PUSH
24002: LD_INT 15
24004: PUSH
24005: LD_INT 16
24007: PUSH
24008: LD_INT 17
24010: PUSH
24011: LD_INT 18
24013: PUSH
24014: LD_INT 19
24016: PUSH
24017: LD_INT 20
24019: PUSH
24020: LD_INT 21
24022: PUSH
24023: LD_INT 22
24025: PUSH
24026: LD_INT 23
24028: PUSH
24029: LD_INT 24
24031: PUSH
24032: LD_INT 25
24034: PUSH
24035: LD_INT 26
24037: PUSH
24038: LD_INT 28
24040: PUSH
24041: LD_INT 30
24043: PUSH
24044: LD_INT 31
24046: PUSH
24047: LD_INT 32
24049: PUSH
24050: LD_INT 36
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 101
24086: PUSH
24087: LD_INT 102
24089: PUSH
24090: LD_INT 103
24092: PUSH
24093: LD_INT 104
24095: PUSH
24096: LD_INT 105
24098: PUSH
24099: LD_INT 106
24101: PUSH
24102: LD_INT 107
24104: PUSH
24105: LD_INT 108
24107: PUSH
24108: LD_INT 109
24110: PUSH
24111: LD_INT 110
24113: PUSH
24114: LD_INT 111
24116: PUSH
24117: LD_INT 112
24119: PUSH
24120: LD_INT 114
24122: PUSH
24123: LD_INT 116
24125: PUSH
24126: LD_INT 117
24128: PUSH
24129: LD_INT 118
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: ST_TO_ADDR
24154: GO 26049
24156: LD_INT 11
24158: DOUBLE
24159: EQUAL
24160: IFTRUE 24164
24162: GO 24368
24164: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24165: LD_ADDR_VAR 0 2
24169: PUSH
24170: LD_INT 2
24172: PUSH
24173: LD_INT 3
24175: PUSH
24176: LD_INT 4
24178: PUSH
24179: LD_INT 5
24181: PUSH
24182: LD_INT 6
24184: PUSH
24185: LD_INT 7
24187: PUSH
24188: LD_INT 8
24190: PUSH
24191: LD_INT 9
24193: PUSH
24194: LD_INT 10
24196: PUSH
24197: LD_INT 11
24199: PUSH
24200: LD_INT 12
24202: PUSH
24203: LD_INT 13
24205: PUSH
24206: LD_INT 14
24208: PUSH
24209: LD_INT 15
24211: PUSH
24212: LD_INT 16
24214: PUSH
24215: LD_INT 17
24217: PUSH
24218: LD_INT 18
24220: PUSH
24221: LD_INT 19
24223: PUSH
24224: LD_INT 20
24226: PUSH
24227: LD_INT 21
24229: PUSH
24230: LD_INT 22
24232: PUSH
24233: LD_INT 23
24235: PUSH
24236: LD_INT 24
24238: PUSH
24239: LD_INT 25
24241: PUSH
24242: LD_INT 26
24244: PUSH
24245: LD_INT 28
24247: PUSH
24248: LD_INT 30
24250: PUSH
24251: LD_INT 31
24253: PUSH
24254: LD_INT 32
24256: PUSH
24257: LD_INT 34
24259: PUSH
24260: LD_INT 36
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 101
24298: PUSH
24299: LD_INT 102
24301: PUSH
24302: LD_INT 103
24304: PUSH
24305: LD_INT 104
24307: PUSH
24308: LD_INT 105
24310: PUSH
24311: LD_INT 106
24313: PUSH
24314: LD_INT 107
24316: PUSH
24317: LD_INT 108
24319: PUSH
24320: LD_INT 109
24322: PUSH
24323: LD_INT 110
24325: PUSH
24326: LD_INT 111
24328: PUSH
24329: LD_INT 112
24331: PUSH
24332: LD_INT 114
24334: PUSH
24335: LD_INT 116
24337: PUSH
24338: LD_INT 117
24340: PUSH
24341: LD_INT 118
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: ST_TO_ADDR
24366: GO 26049
24368: LD_INT 12
24370: DOUBLE
24371: EQUAL
24372: IFTRUE 24376
24374: GO 24596
24376: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24377: LD_ADDR_VAR 0 2
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: LD_INT 3
24390: PUSH
24391: LD_INT 4
24393: PUSH
24394: LD_INT 5
24396: PUSH
24397: LD_INT 6
24399: PUSH
24400: LD_INT 7
24402: PUSH
24403: LD_INT 8
24405: PUSH
24406: LD_INT 9
24408: PUSH
24409: LD_INT 10
24411: PUSH
24412: LD_INT 11
24414: PUSH
24415: LD_INT 12
24417: PUSH
24418: LD_INT 13
24420: PUSH
24421: LD_INT 14
24423: PUSH
24424: LD_INT 15
24426: PUSH
24427: LD_INT 16
24429: PUSH
24430: LD_INT 17
24432: PUSH
24433: LD_INT 18
24435: PUSH
24436: LD_INT 19
24438: PUSH
24439: LD_INT 20
24441: PUSH
24442: LD_INT 21
24444: PUSH
24445: LD_INT 22
24447: PUSH
24448: LD_INT 23
24450: PUSH
24451: LD_INT 24
24453: PUSH
24454: LD_INT 25
24456: PUSH
24457: LD_INT 26
24459: PUSH
24460: LD_INT 27
24462: PUSH
24463: LD_INT 28
24465: PUSH
24466: LD_INT 30
24468: PUSH
24469: LD_INT 31
24471: PUSH
24472: LD_INT 32
24474: PUSH
24475: LD_INT 33
24477: PUSH
24478: LD_INT 34
24480: PUSH
24481: LD_INT 36
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 101
24522: PUSH
24523: LD_INT 102
24525: PUSH
24526: LD_INT 103
24528: PUSH
24529: LD_INT 104
24531: PUSH
24532: LD_INT 105
24534: PUSH
24535: LD_INT 106
24537: PUSH
24538: LD_INT 107
24540: PUSH
24541: LD_INT 108
24543: PUSH
24544: LD_INT 109
24546: PUSH
24547: LD_INT 110
24549: PUSH
24550: LD_INT 111
24552: PUSH
24553: LD_INT 112
24555: PUSH
24556: LD_INT 113
24558: PUSH
24559: LD_INT 114
24561: PUSH
24562: LD_INT 116
24564: PUSH
24565: LD_INT 117
24567: PUSH
24568: LD_INT 118
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: ST_TO_ADDR
24594: GO 26049
24596: LD_INT 13
24598: DOUBLE
24599: EQUAL
24600: IFTRUE 24604
24602: GO 24812
24604: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24605: LD_ADDR_VAR 0 2
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: LD_INT 2
24615: PUSH
24616: LD_INT 3
24618: PUSH
24619: LD_INT 4
24621: PUSH
24622: LD_INT 5
24624: PUSH
24625: LD_INT 8
24627: PUSH
24628: LD_INT 9
24630: PUSH
24631: LD_INT 10
24633: PUSH
24634: LD_INT 11
24636: PUSH
24637: LD_INT 12
24639: PUSH
24640: LD_INT 14
24642: PUSH
24643: LD_INT 15
24645: PUSH
24646: LD_INT 16
24648: PUSH
24649: LD_INT 17
24651: PUSH
24652: LD_INT 18
24654: PUSH
24655: LD_INT 19
24657: PUSH
24658: LD_INT 20
24660: PUSH
24661: LD_INT 21
24663: PUSH
24664: LD_INT 22
24666: PUSH
24667: LD_INT 23
24669: PUSH
24670: LD_INT 24
24672: PUSH
24673: LD_INT 25
24675: PUSH
24676: LD_INT 26
24678: PUSH
24679: LD_INT 27
24681: PUSH
24682: LD_INT 28
24684: PUSH
24685: LD_INT 30
24687: PUSH
24688: LD_INT 31
24690: PUSH
24691: LD_INT 32
24693: PUSH
24694: LD_INT 33
24696: PUSH
24697: LD_INT 34
24699: PUSH
24700: LD_INT 36
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 101
24738: PUSH
24739: LD_INT 102
24741: PUSH
24742: LD_INT 103
24744: PUSH
24745: LD_INT 104
24747: PUSH
24748: LD_INT 105
24750: PUSH
24751: LD_INT 106
24753: PUSH
24754: LD_INT 107
24756: PUSH
24757: LD_INT 108
24759: PUSH
24760: LD_INT 109
24762: PUSH
24763: LD_INT 110
24765: PUSH
24766: LD_INT 111
24768: PUSH
24769: LD_INT 112
24771: PUSH
24772: LD_INT 113
24774: PUSH
24775: LD_INT 114
24777: PUSH
24778: LD_INT 116
24780: PUSH
24781: LD_INT 117
24783: PUSH
24784: LD_INT 118
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: ST_TO_ADDR
24810: GO 26049
24812: LD_INT 14
24814: DOUBLE
24815: EQUAL
24816: IFTRUE 24820
24818: GO 25044
24820: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24821: LD_ADDR_VAR 0 2
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: LD_INT 3
24834: PUSH
24835: LD_INT 4
24837: PUSH
24838: LD_INT 5
24840: PUSH
24841: LD_INT 6
24843: PUSH
24844: LD_INT 7
24846: PUSH
24847: LD_INT 8
24849: PUSH
24850: LD_INT 9
24852: PUSH
24853: LD_INT 10
24855: PUSH
24856: LD_INT 11
24858: PUSH
24859: LD_INT 12
24861: PUSH
24862: LD_INT 13
24864: PUSH
24865: LD_INT 14
24867: PUSH
24868: LD_INT 15
24870: PUSH
24871: LD_INT 16
24873: PUSH
24874: LD_INT 17
24876: PUSH
24877: LD_INT 18
24879: PUSH
24880: LD_INT 19
24882: PUSH
24883: LD_INT 20
24885: PUSH
24886: LD_INT 21
24888: PUSH
24889: LD_INT 22
24891: PUSH
24892: LD_INT 23
24894: PUSH
24895: LD_INT 24
24897: PUSH
24898: LD_INT 25
24900: PUSH
24901: LD_INT 26
24903: PUSH
24904: LD_INT 27
24906: PUSH
24907: LD_INT 28
24909: PUSH
24910: LD_INT 29
24912: PUSH
24913: LD_INT 30
24915: PUSH
24916: LD_INT 31
24918: PUSH
24919: LD_INT 32
24921: PUSH
24922: LD_INT 33
24924: PUSH
24925: LD_INT 34
24927: PUSH
24928: LD_INT 36
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 101
24970: PUSH
24971: LD_INT 102
24973: PUSH
24974: LD_INT 103
24976: PUSH
24977: LD_INT 104
24979: PUSH
24980: LD_INT 105
24982: PUSH
24983: LD_INT 106
24985: PUSH
24986: LD_INT 107
24988: PUSH
24989: LD_INT 108
24991: PUSH
24992: LD_INT 109
24994: PUSH
24995: LD_INT 110
24997: PUSH
24998: LD_INT 111
25000: PUSH
25001: LD_INT 112
25003: PUSH
25004: LD_INT 113
25006: PUSH
25007: LD_INT 114
25009: PUSH
25010: LD_INT 116
25012: PUSH
25013: LD_INT 117
25015: PUSH
25016: LD_INT 118
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: ST_TO_ADDR
25042: GO 26049
25044: LD_INT 15
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25276
25052: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25053: LD_ADDR_VAR 0 2
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: LD_INT 2
25063: PUSH
25064: LD_INT 3
25066: PUSH
25067: LD_INT 4
25069: PUSH
25070: LD_INT 5
25072: PUSH
25073: LD_INT 6
25075: PUSH
25076: LD_INT 7
25078: PUSH
25079: LD_INT 8
25081: PUSH
25082: LD_INT 9
25084: PUSH
25085: LD_INT 10
25087: PUSH
25088: LD_INT 11
25090: PUSH
25091: LD_INT 12
25093: PUSH
25094: LD_INT 13
25096: PUSH
25097: LD_INT 14
25099: PUSH
25100: LD_INT 15
25102: PUSH
25103: LD_INT 16
25105: PUSH
25106: LD_INT 17
25108: PUSH
25109: LD_INT 18
25111: PUSH
25112: LD_INT 19
25114: PUSH
25115: LD_INT 20
25117: PUSH
25118: LD_INT 21
25120: PUSH
25121: LD_INT 22
25123: PUSH
25124: LD_INT 23
25126: PUSH
25127: LD_INT 24
25129: PUSH
25130: LD_INT 25
25132: PUSH
25133: LD_INT 26
25135: PUSH
25136: LD_INT 27
25138: PUSH
25139: LD_INT 28
25141: PUSH
25142: LD_INT 29
25144: PUSH
25145: LD_INT 30
25147: PUSH
25148: LD_INT 31
25150: PUSH
25151: LD_INT 32
25153: PUSH
25154: LD_INT 33
25156: PUSH
25157: LD_INT 34
25159: PUSH
25160: LD_INT 36
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 101
25202: PUSH
25203: LD_INT 102
25205: PUSH
25206: LD_INT 103
25208: PUSH
25209: LD_INT 104
25211: PUSH
25212: LD_INT 105
25214: PUSH
25215: LD_INT 106
25217: PUSH
25218: LD_INT 107
25220: PUSH
25221: LD_INT 108
25223: PUSH
25224: LD_INT 109
25226: PUSH
25227: LD_INT 110
25229: PUSH
25230: LD_INT 111
25232: PUSH
25233: LD_INT 112
25235: PUSH
25236: LD_INT 113
25238: PUSH
25239: LD_INT 114
25241: PUSH
25242: LD_INT 116
25244: PUSH
25245: LD_INT 117
25247: PUSH
25248: LD_INT 118
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: ST_TO_ADDR
25274: GO 26049
25276: LD_INT 16
25278: DOUBLE
25279: EQUAL
25280: IFTRUE 25284
25282: GO 25420
25284: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25285: LD_ADDR_VAR 0 2
25289: PUSH
25290: LD_INT 2
25292: PUSH
25293: LD_INT 4
25295: PUSH
25296: LD_INT 5
25298: PUSH
25299: LD_INT 7
25301: PUSH
25302: LD_INT 11
25304: PUSH
25305: LD_INT 12
25307: PUSH
25308: LD_INT 15
25310: PUSH
25311: LD_INT 16
25313: PUSH
25314: LD_INT 20
25316: PUSH
25317: LD_INT 21
25319: PUSH
25320: LD_INT 22
25322: PUSH
25323: LD_INT 23
25325: PUSH
25326: LD_INT 25
25328: PUSH
25329: LD_INT 26
25331: PUSH
25332: LD_INT 30
25334: PUSH
25335: LD_INT 31
25337: PUSH
25338: LD_INT 32
25340: PUSH
25341: LD_INT 33
25343: PUSH
25344: LD_INT 34
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 101
25370: PUSH
25371: LD_INT 102
25373: PUSH
25374: LD_INT 103
25376: PUSH
25377: LD_INT 106
25379: PUSH
25380: LD_INT 108
25382: PUSH
25383: LD_INT 112
25385: PUSH
25386: LD_INT 113
25388: PUSH
25389: LD_INT 114
25391: PUSH
25392: LD_INT 116
25394: PUSH
25395: LD_INT 117
25397: PUSH
25398: LD_INT 118
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: ST_TO_ADDR
25418: GO 26049
25420: LD_INT 17
25422: DOUBLE
25423: EQUAL
25424: IFTRUE 25428
25426: GO 25652
25428: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25429: LD_ADDR_VAR 0 2
25433: PUSH
25434: LD_INT 1
25436: PUSH
25437: LD_INT 2
25439: PUSH
25440: LD_INT 3
25442: PUSH
25443: LD_INT 4
25445: PUSH
25446: LD_INT 5
25448: PUSH
25449: LD_INT 6
25451: PUSH
25452: LD_INT 7
25454: PUSH
25455: LD_INT 8
25457: PUSH
25458: LD_INT 9
25460: PUSH
25461: LD_INT 10
25463: PUSH
25464: LD_INT 11
25466: PUSH
25467: LD_INT 12
25469: PUSH
25470: LD_INT 13
25472: PUSH
25473: LD_INT 14
25475: PUSH
25476: LD_INT 15
25478: PUSH
25479: LD_INT 16
25481: PUSH
25482: LD_INT 17
25484: PUSH
25485: LD_INT 18
25487: PUSH
25488: LD_INT 19
25490: PUSH
25491: LD_INT 20
25493: PUSH
25494: LD_INT 21
25496: PUSH
25497: LD_INT 22
25499: PUSH
25500: LD_INT 23
25502: PUSH
25503: LD_INT 24
25505: PUSH
25506: LD_INT 25
25508: PUSH
25509: LD_INT 26
25511: PUSH
25512: LD_INT 27
25514: PUSH
25515: LD_INT 28
25517: PUSH
25518: LD_INT 29
25520: PUSH
25521: LD_INT 30
25523: PUSH
25524: LD_INT 31
25526: PUSH
25527: LD_INT 32
25529: PUSH
25530: LD_INT 33
25532: PUSH
25533: LD_INT 34
25535: PUSH
25536: LD_INT 36
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 101
25578: PUSH
25579: LD_INT 102
25581: PUSH
25582: LD_INT 103
25584: PUSH
25585: LD_INT 104
25587: PUSH
25588: LD_INT 105
25590: PUSH
25591: LD_INT 106
25593: PUSH
25594: LD_INT 107
25596: PUSH
25597: LD_INT 108
25599: PUSH
25600: LD_INT 109
25602: PUSH
25603: LD_INT 110
25605: PUSH
25606: LD_INT 111
25608: PUSH
25609: LD_INT 112
25611: PUSH
25612: LD_INT 113
25614: PUSH
25615: LD_INT 114
25617: PUSH
25618: LD_INT 116
25620: PUSH
25621: LD_INT 117
25623: PUSH
25624: LD_INT 118
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: ST_TO_ADDR
25650: GO 26049
25652: LD_INT 18
25654: DOUBLE
25655: EQUAL
25656: IFTRUE 25660
25658: GO 25808
25660: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25661: LD_ADDR_VAR 0 2
25665: PUSH
25666: LD_INT 2
25668: PUSH
25669: LD_INT 4
25671: PUSH
25672: LD_INT 5
25674: PUSH
25675: LD_INT 7
25677: PUSH
25678: LD_INT 11
25680: PUSH
25681: LD_INT 12
25683: PUSH
25684: LD_INT 15
25686: PUSH
25687: LD_INT 16
25689: PUSH
25690: LD_INT 20
25692: PUSH
25693: LD_INT 21
25695: PUSH
25696: LD_INT 22
25698: PUSH
25699: LD_INT 23
25701: PUSH
25702: LD_INT 25
25704: PUSH
25705: LD_INT 26
25707: PUSH
25708: LD_INT 30
25710: PUSH
25711: LD_INT 31
25713: PUSH
25714: LD_INT 32
25716: PUSH
25717: LD_INT 33
25719: PUSH
25720: LD_INT 34
25722: PUSH
25723: LD_INT 35
25725: PUSH
25726: LD_INT 36
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 101
25754: PUSH
25755: LD_INT 102
25757: PUSH
25758: LD_INT 103
25760: PUSH
25761: LD_INT 106
25763: PUSH
25764: LD_INT 108
25766: PUSH
25767: LD_INT 112
25769: PUSH
25770: LD_INT 113
25772: PUSH
25773: LD_INT 114
25775: PUSH
25776: LD_INT 115
25778: PUSH
25779: LD_INT 116
25781: PUSH
25782: LD_INT 117
25784: PUSH
25785: LD_INT 118
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: ST_TO_ADDR
25806: GO 26049
25808: LD_INT 19
25810: DOUBLE
25811: EQUAL
25812: IFTRUE 25816
25814: GO 26048
25816: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25817: LD_ADDR_VAR 0 2
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: LD_INT 2
25827: PUSH
25828: LD_INT 3
25830: PUSH
25831: LD_INT 4
25833: PUSH
25834: LD_INT 5
25836: PUSH
25837: LD_INT 6
25839: PUSH
25840: LD_INT 7
25842: PUSH
25843: LD_INT 8
25845: PUSH
25846: LD_INT 9
25848: PUSH
25849: LD_INT 10
25851: PUSH
25852: LD_INT 11
25854: PUSH
25855: LD_INT 12
25857: PUSH
25858: LD_INT 13
25860: PUSH
25861: LD_INT 14
25863: PUSH
25864: LD_INT 15
25866: PUSH
25867: LD_INT 16
25869: PUSH
25870: LD_INT 17
25872: PUSH
25873: LD_INT 18
25875: PUSH
25876: LD_INT 19
25878: PUSH
25879: LD_INT 20
25881: PUSH
25882: LD_INT 21
25884: PUSH
25885: LD_INT 22
25887: PUSH
25888: LD_INT 23
25890: PUSH
25891: LD_INT 24
25893: PUSH
25894: LD_INT 25
25896: PUSH
25897: LD_INT 26
25899: PUSH
25900: LD_INT 27
25902: PUSH
25903: LD_INT 28
25905: PUSH
25906: LD_INT 29
25908: PUSH
25909: LD_INT 30
25911: PUSH
25912: LD_INT 31
25914: PUSH
25915: LD_INT 32
25917: PUSH
25918: LD_INT 33
25920: PUSH
25921: LD_INT 34
25923: PUSH
25924: LD_INT 35
25926: PUSH
25927: LD_INT 36
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 101
25970: PUSH
25971: LD_INT 102
25973: PUSH
25974: LD_INT 103
25976: PUSH
25977: LD_INT 104
25979: PUSH
25980: LD_INT 105
25982: PUSH
25983: LD_INT 106
25985: PUSH
25986: LD_INT 107
25988: PUSH
25989: LD_INT 108
25991: PUSH
25992: LD_INT 109
25994: PUSH
25995: LD_INT 110
25997: PUSH
25998: LD_INT 111
26000: PUSH
26001: LD_INT 112
26003: PUSH
26004: LD_INT 113
26006: PUSH
26007: LD_INT 114
26009: PUSH
26010: LD_INT 115
26012: PUSH
26013: LD_INT 116
26015: PUSH
26016: LD_INT 117
26018: PUSH
26019: LD_INT 118
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: ST_TO_ADDR
26046: GO 26049
26048: POP
// end else
26049: GO 26280
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26051: LD_ADDR_VAR 0 2
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: LD_INT 3
26064: PUSH
26065: LD_INT 4
26067: PUSH
26068: LD_INT 5
26070: PUSH
26071: LD_INT 6
26073: PUSH
26074: LD_INT 7
26076: PUSH
26077: LD_INT 8
26079: PUSH
26080: LD_INT 9
26082: PUSH
26083: LD_INT 10
26085: PUSH
26086: LD_INT 11
26088: PUSH
26089: LD_INT 12
26091: PUSH
26092: LD_INT 13
26094: PUSH
26095: LD_INT 14
26097: PUSH
26098: LD_INT 15
26100: PUSH
26101: LD_INT 16
26103: PUSH
26104: LD_INT 17
26106: PUSH
26107: LD_INT 18
26109: PUSH
26110: LD_INT 19
26112: PUSH
26113: LD_INT 20
26115: PUSH
26116: LD_INT 21
26118: PUSH
26119: LD_INT 22
26121: PUSH
26122: LD_INT 23
26124: PUSH
26125: LD_INT 24
26127: PUSH
26128: LD_INT 25
26130: PUSH
26131: LD_INT 26
26133: PUSH
26134: LD_INT 27
26136: PUSH
26137: LD_INT 28
26139: PUSH
26140: LD_INT 29
26142: PUSH
26143: LD_INT 30
26145: PUSH
26146: LD_INT 31
26148: PUSH
26149: LD_INT 32
26151: PUSH
26152: LD_INT 33
26154: PUSH
26155: LD_INT 34
26157: PUSH
26158: LD_INT 35
26160: PUSH
26161: LD_INT 36
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 101
26204: PUSH
26205: LD_INT 102
26207: PUSH
26208: LD_INT 103
26210: PUSH
26211: LD_INT 104
26213: PUSH
26214: LD_INT 105
26216: PUSH
26217: LD_INT 106
26219: PUSH
26220: LD_INT 107
26222: PUSH
26223: LD_INT 108
26225: PUSH
26226: LD_INT 109
26228: PUSH
26229: LD_INT 110
26231: PUSH
26232: LD_INT 111
26234: PUSH
26235: LD_INT 112
26237: PUSH
26238: LD_INT 113
26240: PUSH
26241: LD_INT 114
26243: PUSH
26244: LD_INT 115
26246: PUSH
26247: LD_INT 116
26249: PUSH
26250: LD_INT 117
26252: PUSH
26253: LD_INT 118
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: ST_TO_ADDR
// if result then
26280: LD_VAR 0 2
26284: IFFALSE 27070
// begin normal :=  ;
26286: LD_ADDR_VAR 0 5
26290: PUSH
26291: LD_STRING 
26293: ST_TO_ADDR
// hardcore :=  ;
26294: LD_ADDR_VAR 0 6
26298: PUSH
26299: LD_STRING 
26301: ST_TO_ADDR
// active :=  ;
26302: LD_ADDR_VAR 0 7
26306: PUSH
26307: LD_STRING 
26309: ST_TO_ADDR
// for i = 1 to normalCounter do
26310: LD_ADDR_VAR 0 8
26314: PUSH
26315: DOUBLE
26316: LD_INT 1
26318: DEC
26319: ST_TO_ADDR
26320: LD_EXP 68
26324: PUSH
26325: FOR_TO
26326: IFFALSE 26427
// begin tmp := 0 ;
26328: LD_ADDR_VAR 0 3
26332: PUSH
26333: LD_STRING 0
26335: ST_TO_ADDR
// if result [ 1 ] then
26336: LD_VAR 0 2
26340: PUSH
26341: LD_INT 1
26343: ARRAY
26344: IFFALSE 26409
// if result [ 1 ] [ 1 ] = i then
26346: LD_VAR 0 2
26350: PUSH
26351: LD_INT 1
26353: ARRAY
26354: PUSH
26355: LD_INT 1
26357: ARRAY
26358: PUSH
26359: LD_VAR 0 8
26363: EQUAL
26364: IFFALSE 26409
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26366: LD_ADDR_VAR 0 2
26370: PUSH
26371: LD_VAR 0 2
26375: PPUSH
26376: LD_INT 1
26378: PPUSH
26379: LD_VAR 0 2
26383: PUSH
26384: LD_INT 1
26386: ARRAY
26387: PPUSH
26388: LD_INT 1
26390: PPUSH
26391: CALL_OW 3
26395: PPUSH
26396: CALL_OW 1
26400: ST_TO_ADDR
// tmp := 1 ;
26401: LD_ADDR_VAR 0 3
26405: PUSH
26406: LD_STRING 1
26408: ST_TO_ADDR
// end ; normal := normal & tmp ;
26409: LD_ADDR_VAR 0 5
26413: PUSH
26414: LD_VAR 0 5
26418: PUSH
26419: LD_VAR 0 3
26423: STR
26424: ST_TO_ADDR
// end ;
26425: GO 26325
26427: POP
26428: POP
// for i = 1 to hardcoreCounter do
26429: LD_ADDR_VAR 0 8
26433: PUSH
26434: DOUBLE
26435: LD_INT 1
26437: DEC
26438: ST_TO_ADDR
26439: LD_EXP 69
26443: PUSH
26444: FOR_TO
26445: IFFALSE 26550
// begin tmp := 0 ;
26447: LD_ADDR_VAR 0 3
26451: PUSH
26452: LD_STRING 0
26454: ST_TO_ADDR
// if result [ 2 ] then
26455: LD_VAR 0 2
26459: PUSH
26460: LD_INT 2
26462: ARRAY
26463: IFFALSE 26532
// if result [ 2 ] [ 1 ] = 100 + i then
26465: LD_VAR 0 2
26469: PUSH
26470: LD_INT 2
26472: ARRAY
26473: PUSH
26474: LD_INT 1
26476: ARRAY
26477: PUSH
26478: LD_INT 100
26480: PUSH
26481: LD_VAR 0 8
26485: PLUS
26486: EQUAL
26487: IFFALSE 26532
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26489: LD_ADDR_VAR 0 2
26493: PUSH
26494: LD_VAR 0 2
26498: PPUSH
26499: LD_INT 2
26501: PPUSH
26502: LD_VAR 0 2
26506: PUSH
26507: LD_INT 2
26509: ARRAY
26510: PPUSH
26511: LD_INT 1
26513: PPUSH
26514: CALL_OW 3
26518: PPUSH
26519: CALL_OW 1
26523: ST_TO_ADDR
// tmp := 1 ;
26524: LD_ADDR_VAR 0 3
26528: PUSH
26529: LD_STRING 1
26531: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26532: LD_ADDR_VAR 0 6
26536: PUSH
26537: LD_VAR 0 6
26541: PUSH
26542: LD_VAR 0 3
26546: STR
26547: ST_TO_ADDR
// end ;
26548: GO 26444
26550: POP
26551: POP
// if isGameLoad then
26552: LD_VAR 0 1
26556: IFFALSE 27031
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26558: LD_ADDR_VAR 0 4
26562: PUSH
26563: LD_EXP 72
26567: PUSH
26568: LD_EXP 71
26572: PUSH
26573: LD_EXP 73
26577: PUSH
26578: LD_EXP 70
26582: PUSH
26583: LD_EXP 74
26587: PUSH
26588: LD_EXP 75
26592: PUSH
26593: LD_EXP 76
26597: PUSH
26598: LD_EXP 77
26602: PUSH
26603: LD_EXP 78
26607: PUSH
26608: LD_EXP 79
26612: PUSH
26613: LD_EXP 80
26617: PUSH
26618: LD_EXP 81
26622: PUSH
26623: LD_EXP 82
26627: PUSH
26628: LD_EXP 83
26632: PUSH
26633: LD_EXP 91
26637: PUSH
26638: LD_EXP 92
26642: PUSH
26643: LD_EXP 93
26647: PUSH
26648: LD_EXP 94
26652: PUSH
26653: LD_EXP 96
26657: PUSH
26658: LD_EXP 97
26662: PUSH
26663: LD_EXP 98
26667: PUSH
26668: LD_EXP 101
26672: PUSH
26673: LD_EXP 103
26677: PUSH
26678: LD_EXP 104
26682: PUSH
26683: LD_EXP 105
26687: PUSH
26688: LD_EXP 107
26692: PUSH
26693: LD_EXP 108
26697: PUSH
26698: LD_EXP 111
26702: PUSH
26703: LD_EXP 112
26707: PUSH
26708: LD_EXP 113
26712: PUSH
26713: LD_EXP 114
26717: PUSH
26718: LD_EXP 115
26722: PUSH
26723: LD_EXP 116
26727: PUSH
26728: LD_EXP 117
26732: PUSH
26733: LD_EXP 118
26737: PUSH
26738: LD_EXP 119
26742: PUSH
26743: LD_EXP 84
26747: PUSH
26748: LD_EXP 85
26752: PUSH
26753: LD_EXP 88
26757: PUSH
26758: LD_EXP 89
26762: PUSH
26763: LD_EXP 90
26767: PUSH
26768: LD_EXP 86
26772: PUSH
26773: LD_EXP 87
26777: PUSH
26778: LD_EXP 95
26782: PUSH
26783: LD_EXP 99
26787: PUSH
26788: LD_EXP 100
26792: PUSH
26793: LD_EXP 102
26797: PUSH
26798: LD_EXP 106
26802: PUSH
26803: LD_EXP 109
26807: PUSH
26808: LD_EXP 110
26812: PUSH
26813: LD_EXP 120
26817: PUSH
26818: LD_EXP 121
26822: PUSH
26823: LD_EXP 122
26827: PUSH
26828: LD_EXP 123
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: ST_TO_ADDR
// tmp :=  ;
26889: LD_ADDR_VAR 0 3
26893: PUSH
26894: LD_STRING 
26896: ST_TO_ADDR
// for i = 1 to normalCounter do
26897: LD_ADDR_VAR 0 8
26901: PUSH
26902: DOUBLE
26903: LD_INT 1
26905: DEC
26906: ST_TO_ADDR
26907: LD_EXP 68
26911: PUSH
26912: FOR_TO
26913: IFFALSE 26949
// begin if flags [ i ] then
26915: LD_VAR 0 4
26919: PUSH
26920: LD_VAR 0 8
26924: ARRAY
26925: IFFALSE 26947
// tmp := tmp & i & ; ;
26927: LD_ADDR_VAR 0 3
26931: PUSH
26932: LD_VAR 0 3
26936: PUSH
26937: LD_VAR 0 8
26941: STR
26942: PUSH
26943: LD_STRING ;
26945: STR
26946: ST_TO_ADDR
// end ;
26947: GO 26912
26949: POP
26950: POP
// for i = 1 to hardcoreCounter do
26951: LD_ADDR_VAR 0 8
26955: PUSH
26956: DOUBLE
26957: LD_INT 1
26959: DEC
26960: ST_TO_ADDR
26961: LD_EXP 69
26965: PUSH
26966: FOR_TO
26967: IFFALSE 27013
// begin if flags [ normalCounter + i ] then
26969: LD_VAR 0 4
26973: PUSH
26974: LD_EXP 68
26978: PUSH
26979: LD_VAR 0 8
26983: PLUS
26984: ARRAY
26985: IFFALSE 27011
// tmp := tmp & ( 100 + i ) & ; ;
26987: LD_ADDR_VAR 0 3
26991: PUSH
26992: LD_VAR 0 3
26996: PUSH
26997: LD_INT 100
26999: PUSH
27000: LD_VAR 0 8
27004: PLUS
27005: STR
27006: PUSH
27007: LD_STRING ;
27009: STR
27010: ST_TO_ADDR
// end ;
27011: GO 26966
27013: POP
27014: POP
// if tmp then
27015: LD_VAR 0 3
27019: IFFALSE 27031
// active := tmp ;
27021: LD_ADDR_VAR 0 7
27025: PUSH
27026: LD_VAR 0 3
27030: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27031: LD_STRING getStreamItemsFromMission("
27033: PUSH
27034: LD_VAR 0 5
27038: STR
27039: PUSH
27040: LD_STRING ","
27042: STR
27043: PUSH
27044: LD_VAR 0 6
27048: STR
27049: PUSH
27050: LD_STRING ","
27052: STR
27053: PUSH
27054: LD_VAR 0 7
27058: STR
27059: PUSH
27060: LD_STRING ")
27062: STR
27063: PPUSH
27064: CALL_OW 559
// end else
27068: GO 27077
// ToLua ( getStreamItemsFromMission("","","") ) ;
27070: LD_STRING getStreamItemsFromMission("","","")
27072: PPUSH
27073: CALL_OW 559
// end ;
27077: LD_VAR 0 2
27081: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27082: LD_EXP 67
27086: PUSH
27087: LD_EXP 72
27091: AND
27092: IFFALSE 27216
27094: GO 27096
27096: DISABLE
27097: LD_INT 0
27099: PPUSH
27100: PPUSH
// begin enable ;
27101: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27102: LD_ADDR_VAR 0 2
27106: PUSH
27107: LD_INT 22
27109: PUSH
27110: LD_OWVAR 2
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 34
27124: PUSH
27125: LD_INT 7
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 34
27134: PUSH
27135: LD_INT 45
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 34
27144: PUSH
27145: LD_INT 28
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 34
27154: PUSH
27155: LD_INT 47
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PPUSH
27173: CALL_OW 69
27177: ST_TO_ADDR
// if not tmp then
27178: LD_VAR 0 2
27182: NOT
27183: IFFALSE 27187
// exit ;
27185: GO 27216
// for i in tmp do
27187: LD_ADDR_VAR 0 1
27191: PUSH
27192: LD_VAR 0 2
27196: PUSH
27197: FOR_IN
27198: IFFALSE 27214
// begin SetLives ( i , 0 ) ;
27200: LD_VAR 0 1
27204: PPUSH
27205: LD_INT 0
27207: PPUSH
27208: CALL_OW 234
// end ;
27212: GO 27197
27214: POP
27215: POP
// end ;
27216: PPOPN 2
27218: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27219: LD_EXP 67
27223: PUSH
27224: LD_EXP 73
27228: AND
27229: IFFALSE 27313
27231: GO 27233
27233: DISABLE
27234: LD_INT 0
27236: PPUSH
27237: PPUSH
// begin enable ;
27238: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27239: LD_ADDR_VAR 0 2
27243: PUSH
27244: LD_INT 22
27246: PUSH
27247: LD_OWVAR 2
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 32
27258: PUSH
27259: LD_INT 3
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PPUSH
27270: CALL_OW 69
27274: ST_TO_ADDR
// if not tmp then
27275: LD_VAR 0 2
27279: NOT
27280: IFFALSE 27284
// exit ;
27282: GO 27313
// for i in tmp do
27284: LD_ADDR_VAR 0 1
27288: PUSH
27289: LD_VAR 0 2
27293: PUSH
27294: FOR_IN
27295: IFFALSE 27311
// begin SetLives ( i , 0 ) ;
27297: LD_VAR 0 1
27301: PPUSH
27302: LD_INT 0
27304: PPUSH
27305: CALL_OW 234
// end ;
27309: GO 27294
27311: POP
27312: POP
// end ;
27313: PPOPN 2
27315: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27316: LD_EXP 67
27320: PUSH
27321: LD_EXP 70
27325: AND
27326: IFFALSE 27419
27328: GO 27330
27330: DISABLE
27331: LD_INT 0
27333: PPUSH
// begin enable ;
27334: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27335: LD_ADDR_VAR 0 1
27339: PUSH
27340: LD_INT 22
27342: PUSH
27343: LD_OWVAR 2
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: LD_INT 25
27357: PUSH
27358: LD_INT 5
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 25
27367: PUSH
27368: LD_INT 9
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 25
27377: PUSH
27378: LD_INT 8
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PPUSH
27395: CALL_OW 69
27399: PUSH
27400: FOR_IN
27401: IFFALSE 27417
// begin SetClass ( i , 1 ) ;
27403: LD_VAR 0 1
27407: PPUSH
27408: LD_INT 1
27410: PPUSH
27411: CALL_OW 336
// end ;
27415: GO 27400
27417: POP
27418: POP
// end ;
27419: PPOPN 1
27421: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27422: LD_EXP 67
27426: PUSH
27427: LD_EXP 71
27431: AND
27432: PUSH
27433: LD_OWVAR 65
27437: PUSH
27438: LD_INT 7
27440: LESS
27441: AND
27442: IFFALSE 27456
27444: GO 27446
27446: DISABLE
// begin enable ;
27447: ENABLE
// game_speed := 7 ;
27448: LD_ADDR_OWVAR 65
27452: PUSH
27453: LD_INT 7
27455: ST_TO_ADDR
// end ;
27456: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27457: LD_EXP 67
27461: PUSH
27462: LD_EXP 74
27466: AND
27467: IFFALSE 27669
27469: GO 27471
27471: DISABLE
27472: LD_INT 0
27474: PPUSH
27475: PPUSH
27476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27477: LD_ADDR_VAR 0 3
27481: PUSH
27482: LD_INT 81
27484: PUSH
27485: LD_OWVAR 2
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 21
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PPUSH
27508: CALL_OW 69
27512: ST_TO_ADDR
// if not tmp then
27513: LD_VAR 0 3
27517: NOT
27518: IFFALSE 27522
// exit ;
27520: GO 27669
// if tmp > 5 then
27522: LD_VAR 0 3
27526: PUSH
27527: LD_INT 5
27529: GREATER
27530: IFFALSE 27542
// k := 5 else
27532: LD_ADDR_VAR 0 2
27536: PUSH
27537: LD_INT 5
27539: ST_TO_ADDR
27540: GO 27552
// k := tmp ;
27542: LD_ADDR_VAR 0 2
27546: PUSH
27547: LD_VAR 0 3
27551: ST_TO_ADDR
// for i := 1 to k do
27552: LD_ADDR_VAR 0 1
27556: PUSH
27557: DOUBLE
27558: LD_INT 1
27560: DEC
27561: ST_TO_ADDR
27562: LD_VAR 0 2
27566: PUSH
27567: FOR_TO
27568: IFFALSE 27667
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27570: LD_VAR 0 3
27574: PUSH
27575: LD_VAR 0 1
27579: ARRAY
27580: PPUSH
27581: LD_VAR 0 1
27585: PUSH
27586: LD_INT 4
27588: MOD
27589: PUSH
27590: LD_INT 1
27592: PLUS
27593: PPUSH
27594: CALL_OW 259
27598: PUSH
27599: LD_INT 10
27601: LESS
27602: IFFALSE 27665
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27604: LD_VAR 0 3
27608: PUSH
27609: LD_VAR 0 1
27613: ARRAY
27614: PPUSH
27615: LD_VAR 0 1
27619: PUSH
27620: LD_INT 4
27622: MOD
27623: PUSH
27624: LD_INT 1
27626: PLUS
27627: PPUSH
27628: LD_VAR 0 3
27632: PUSH
27633: LD_VAR 0 1
27637: ARRAY
27638: PPUSH
27639: LD_VAR 0 1
27643: PUSH
27644: LD_INT 4
27646: MOD
27647: PUSH
27648: LD_INT 1
27650: PLUS
27651: PPUSH
27652: CALL_OW 259
27656: PUSH
27657: LD_INT 1
27659: PLUS
27660: PPUSH
27661: CALL_OW 237
27665: GO 27567
27667: POP
27668: POP
// end ;
27669: PPOPN 3
27671: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27672: LD_EXP 67
27676: PUSH
27677: LD_EXP 75
27681: AND
27682: IFFALSE 27702
27684: GO 27686
27686: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27687: LD_INT 4
27689: PPUSH
27690: LD_OWVAR 2
27694: PPUSH
27695: LD_INT 0
27697: PPUSH
27698: CALL_OW 324
27702: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27703: LD_EXP 67
27707: PUSH
27708: LD_EXP 104
27712: AND
27713: IFFALSE 27733
27715: GO 27717
27717: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27718: LD_INT 19
27720: PPUSH
27721: LD_OWVAR 2
27725: PPUSH
27726: LD_INT 0
27728: PPUSH
27729: CALL_OW 324
27733: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27734: LD_EXP 67
27738: PUSH
27739: LD_EXP 76
27743: AND
27744: IFFALSE 27846
27746: GO 27748
27748: DISABLE
27749: LD_INT 0
27751: PPUSH
27752: PPUSH
// begin enable ;
27753: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27754: LD_ADDR_VAR 0 2
27758: PUSH
27759: LD_INT 22
27761: PUSH
27762: LD_OWVAR 2
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: LD_INT 34
27776: PUSH
27777: LD_INT 11
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 34
27786: PUSH
27787: LD_INT 30
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PPUSH
27803: CALL_OW 69
27807: ST_TO_ADDR
// if not tmp then
27808: LD_VAR 0 2
27812: NOT
27813: IFFALSE 27817
// exit ;
27815: GO 27846
// for i in tmp do
27817: LD_ADDR_VAR 0 1
27821: PUSH
27822: LD_VAR 0 2
27826: PUSH
27827: FOR_IN
27828: IFFALSE 27844
// begin SetLives ( i , 0 ) ;
27830: LD_VAR 0 1
27834: PPUSH
27835: LD_INT 0
27837: PPUSH
27838: CALL_OW 234
// end ;
27842: GO 27827
27844: POP
27845: POP
// end ;
27846: PPOPN 2
27848: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27849: LD_EXP 67
27853: PUSH
27854: LD_EXP 77
27858: AND
27859: IFFALSE 27879
27861: GO 27863
27863: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27864: LD_INT 32
27866: PPUSH
27867: LD_OWVAR 2
27871: PPUSH
27872: LD_INT 0
27874: PPUSH
27875: CALL_OW 324
27879: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27880: LD_EXP 67
27884: PUSH
27885: LD_EXP 78
27889: AND
27890: IFFALSE 28071
27892: GO 27894
27894: DISABLE
27895: LD_INT 0
27897: PPUSH
27898: PPUSH
27899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27900: LD_ADDR_VAR 0 2
27904: PUSH
27905: LD_INT 22
27907: PUSH
27908: LD_OWVAR 2
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 33
27919: PUSH
27920: LD_INT 3
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PPUSH
27931: CALL_OW 69
27935: ST_TO_ADDR
// if not tmp then
27936: LD_VAR 0 2
27940: NOT
27941: IFFALSE 27945
// exit ;
27943: GO 28071
// side := 0 ;
27945: LD_ADDR_VAR 0 3
27949: PUSH
27950: LD_INT 0
27952: ST_TO_ADDR
// for i := 1 to 8 do
27953: LD_ADDR_VAR 0 1
27957: PUSH
27958: DOUBLE
27959: LD_INT 1
27961: DEC
27962: ST_TO_ADDR
27963: LD_INT 8
27965: PUSH
27966: FOR_TO
27967: IFFALSE 28015
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27969: LD_OWVAR 2
27973: PUSH
27974: LD_VAR 0 1
27978: NONEQUAL
27979: PUSH
27980: LD_OWVAR 2
27984: PPUSH
27985: LD_VAR 0 1
27989: PPUSH
27990: CALL_OW 81
27994: PUSH
27995: LD_INT 2
27997: EQUAL
27998: AND
27999: IFFALSE 28013
// begin side := i ;
28001: LD_ADDR_VAR 0 3
28005: PUSH
28006: LD_VAR 0 1
28010: ST_TO_ADDR
// break ;
28011: GO 28015
// end ;
28013: GO 27966
28015: POP
28016: POP
// if not side then
28017: LD_VAR 0 3
28021: NOT
28022: IFFALSE 28026
// exit ;
28024: GO 28071
// for i := 1 to tmp do
28026: LD_ADDR_VAR 0 1
28030: PUSH
28031: DOUBLE
28032: LD_INT 1
28034: DEC
28035: ST_TO_ADDR
28036: LD_VAR 0 2
28040: PUSH
28041: FOR_TO
28042: IFFALSE 28069
// if Prob ( 60 ) then
28044: LD_INT 60
28046: PPUSH
28047: CALL_OW 13
28051: IFFALSE 28067
// SetSide ( i , side ) ;
28053: LD_VAR 0 1
28057: PPUSH
28058: LD_VAR 0 3
28062: PPUSH
28063: CALL_OW 235
28067: GO 28041
28069: POP
28070: POP
// end ;
28071: PPOPN 3
28073: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28074: LD_EXP 67
28078: PUSH
28079: LD_EXP 80
28083: AND
28084: IFFALSE 28203
28086: GO 28088
28088: DISABLE
28089: LD_INT 0
28091: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28092: LD_ADDR_VAR 0 1
28096: PUSH
28097: LD_INT 22
28099: PUSH
28100: LD_OWVAR 2
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 21
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 3
28121: PUSH
28122: LD_INT 23
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: PPUSH
28141: CALL_OW 69
28145: PUSH
28146: FOR_IN
28147: IFFALSE 28201
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28149: LD_VAR 0 1
28153: PPUSH
28154: CALL_OW 257
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: LD_INT 3
28167: PUSH
28168: LD_INT 4
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: IN
28177: IFFALSE 28199
// SetClass ( un , rand ( 1 , 4 ) ) ;
28179: LD_VAR 0 1
28183: PPUSH
28184: LD_INT 1
28186: PPUSH
28187: LD_INT 4
28189: PPUSH
28190: CALL_OW 12
28194: PPUSH
28195: CALL_OW 336
28199: GO 28146
28201: POP
28202: POP
// end ;
28203: PPOPN 1
28205: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28206: LD_EXP 67
28210: PUSH
28211: LD_EXP 79
28215: AND
28216: IFFALSE 28295
28218: GO 28220
28220: DISABLE
28221: LD_INT 0
28223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28224: LD_ADDR_VAR 0 1
28228: PUSH
28229: LD_INT 22
28231: PUSH
28232: LD_OWVAR 2
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 21
28243: PUSH
28244: LD_INT 3
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PPUSH
28255: CALL_OW 69
28259: ST_TO_ADDR
// if not tmp then
28260: LD_VAR 0 1
28264: NOT
28265: IFFALSE 28269
// exit ;
28267: GO 28295
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28269: LD_VAR 0 1
28273: PUSH
28274: LD_INT 1
28276: PPUSH
28277: LD_VAR 0 1
28281: PPUSH
28282: CALL_OW 12
28286: ARRAY
28287: PPUSH
28288: LD_INT 100
28290: PPUSH
28291: CALL_OW 234
// end ;
28295: PPOPN 1
28297: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28298: LD_EXP 67
28302: PUSH
28303: LD_EXP 81
28307: AND
28308: IFFALSE 28406
28310: GO 28312
28312: DISABLE
28313: LD_INT 0
28315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28316: LD_ADDR_VAR 0 1
28320: PUSH
28321: LD_INT 22
28323: PUSH
28324: LD_OWVAR 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 21
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PPUSH
28347: CALL_OW 69
28351: ST_TO_ADDR
// if not tmp then
28352: LD_VAR 0 1
28356: NOT
28357: IFFALSE 28361
// exit ;
28359: GO 28406
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28361: LD_VAR 0 1
28365: PUSH
28366: LD_INT 1
28368: PPUSH
28369: LD_VAR 0 1
28373: PPUSH
28374: CALL_OW 12
28378: ARRAY
28379: PPUSH
28380: LD_INT 1
28382: PPUSH
28383: LD_INT 4
28385: PPUSH
28386: CALL_OW 12
28390: PPUSH
28391: LD_INT 3000
28393: PPUSH
28394: LD_INT 9000
28396: PPUSH
28397: CALL_OW 12
28401: PPUSH
28402: CALL_OW 492
// end ;
28406: PPOPN 1
28408: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28409: LD_EXP 67
28413: PUSH
28414: LD_EXP 82
28418: AND
28419: IFFALSE 28439
28421: GO 28423
28423: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28424: LD_INT 1
28426: PPUSH
28427: LD_OWVAR 2
28431: PPUSH
28432: LD_INT 0
28434: PPUSH
28435: CALL_OW 324
28439: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28440: LD_EXP 67
28444: PUSH
28445: LD_EXP 83
28449: AND
28450: IFFALSE 28533
28452: GO 28454
28454: DISABLE
28455: LD_INT 0
28457: PPUSH
28458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28459: LD_ADDR_VAR 0 2
28463: PUSH
28464: LD_INT 22
28466: PUSH
28467: LD_OWVAR 2
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 21
28478: PUSH
28479: LD_INT 3
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PPUSH
28490: CALL_OW 69
28494: ST_TO_ADDR
// if not tmp then
28495: LD_VAR 0 2
28499: NOT
28500: IFFALSE 28504
// exit ;
28502: GO 28533
// for i in tmp do
28504: LD_ADDR_VAR 0 1
28508: PUSH
28509: LD_VAR 0 2
28513: PUSH
28514: FOR_IN
28515: IFFALSE 28531
// SetBLevel ( i , 10 ) ;
28517: LD_VAR 0 1
28521: PPUSH
28522: LD_INT 10
28524: PPUSH
28525: CALL_OW 241
28529: GO 28514
28531: POP
28532: POP
// end ;
28533: PPOPN 2
28535: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28536: LD_EXP 67
28540: PUSH
28541: LD_EXP 84
28545: AND
28546: IFFALSE 28657
28548: GO 28550
28550: DISABLE
28551: LD_INT 0
28553: PPUSH
28554: PPUSH
28555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28556: LD_ADDR_VAR 0 3
28560: PUSH
28561: LD_INT 22
28563: PUSH
28564: LD_OWVAR 2
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 25
28575: PUSH
28576: LD_INT 1
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PPUSH
28587: CALL_OW 69
28591: ST_TO_ADDR
// if not tmp then
28592: LD_VAR 0 3
28596: NOT
28597: IFFALSE 28601
// exit ;
28599: GO 28657
// un := tmp [ rand ( 1 , tmp ) ] ;
28601: LD_ADDR_VAR 0 2
28605: PUSH
28606: LD_VAR 0 3
28610: PUSH
28611: LD_INT 1
28613: PPUSH
28614: LD_VAR 0 3
28618: PPUSH
28619: CALL_OW 12
28623: ARRAY
28624: ST_TO_ADDR
// if Crawls ( un ) then
28625: LD_VAR 0 2
28629: PPUSH
28630: CALL_OW 318
28634: IFFALSE 28645
// ComWalk ( un ) ;
28636: LD_VAR 0 2
28640: PPUSH
28641: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28645: LD_VAR 0 2
28649: PPUSH
28650: LD_INT 5
28652: PPUSH
28653: CALL_OW 336
// end ;
28657: PPOPN 3
28659: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28660: LD_EXP 67
28664: PUSH
28665: LD_EXP 85
28669: AND
28670: PUSH
28671: LD_OWVAR 67
28675: PUSH
28676: LD_INT 4
28678: LESS
28679: AND
28680: IFFALSE 28699
28682: GO 28684
28684: DISABLE
// begin Difficulty := Difficulty + 1 ;
28685: LD_ADDR_OWVAR 67
28689: PUSH
28690: LD_OWVAR 67
28694: PUSH
28695: LD_INT 1
28697: PLUS
28698: ST_TO_ADDR
// end ;
28699: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28700: LD_EXP 67
28704: PUSH
28705: LD_EXP 86
28709: AND
28710: IFFALSE 28813
28712: GO 28714
28714: DISABLE
28715: LD_INT 0
28717: PPUSH
// begin for i := 1 to 5 do
28718: LD_ADDR_VAR 0 1
28722: PUSH
28723: DOUBLE
28724: LD_INT 1
28726: DEC
28727: ST_TO_ADDR
28728: LD_INT 5
28730: PUSH
28731: FOR_TO
28732: IFFALSE 28811
// begin uc_nation := nation_nature ;
28734: LD_ADDR_OWVAR 21
28738: PUSH
28739: LD_INT 0
28741: ST_TO_ADDR
// uc_side := 0 ;
28742: LD_ADDR_OWVAR 20
28746: PUSH
28747: LD_INT 0
28749: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28750: LD_ADDR_OWVAR 29
28754: PUSH
28755: LD_INT 12
28757: PUSH
28758: LD_INT 12
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: ST_TO_ADDR
// hc_agressivity := 20 ;
28765: LD_ADDR_OWVAR 35
28769: PUSH
28770: LD_INT 20
28772: ST_TO_ADDR
// hc_class := class_tiger ;
28773: LD_ADDR_OWVAR 28
28777: PUSH
28778: LD_INT 14
28780: ST_TO_ADDR
// hc_gallery :=  ;
28781: LD_ADDR_OWVAR 33
28785: PUSH
28786: LD_STRING 
28788: ST_TO_ADDR
// hc_name :=  ;
28789: LD_ADDR_OWVAR 26
28793: PUSH
28794: LD_STRING 
28796: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28797: CALL_OW 44
28801: PPUSH
28802: LD_INT 0
28804: PPUSH
28805: CALL_OW 51
// end ;
28809: GO 28731
28811: POP
28812: POP
// end ;
28813: PPOPN 1
28815: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28816: LD_EXP 67
28820: PUSH
28821: LD_EXP 87
28825: AND
28826: IFFALSE 28835
28828: GO 28830
28830: DISABLE
// StreamSibBomb ;
28831: CALL 28836 0 0
28835: END
// export function StreamSibBomb ; var i , x , y ; begin
28836: LD_INT 0
28838: PPUSH
28839: PPUSH
28840: PPUSH
28841: PPUSH
// result := false ;
28842: LD_ADDR_VAR 0 1
28846: PUSH
28847: LD_INT 0
28849: ST_TO_ADDR
// for i := 1 to 16 do
28850: LD_ADDR_VAR 0 2
28854: PUSH
28855: DOUBLE
28856: LD_INT 1
28858: DEC
28859: ST_TO_ADDR
28860: LD_INT 16
28862: PUSH
28863: FOR_TO
28864: IFFALSE 29063
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: LD_INT 10
28873: PUSH
28874: LD_INT 20
28876: PUSH
28877: LD_INT 30
28879: PUSH
28880: LD_INT 40
28882: PUSH
28883: LD_INT 50
28885: PUSH
28886: LD_INT 60
28888: PUSH
28889: LD_INT 70
28891: PUSH
28892: LD_INT 80
28894: PUSH
28895: LD_INT 90
28897: PUSH
28898: LD_INT 100
28900: PUSH
28901: LD_INT 110
28903: PUSH
28904: LD_INT 120
28906: PUSH
28907: LD_INT 130
28909: PUSH
28910: LD_INT 140
28912: PUSH
28913: LD_INT 150
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 1
28935: PPUSH
28936: LD_INT 15
28938: PPUSH
28939: CALL_OW 12
28943: ARRAY
28944: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28945: LD_ADDR_VAR 0 4
28949: PUSH
28950: LD_INT 10
28952: PUSH
28953: LD_INT 20
28955: PUSH
28956: LD_INT 30
28958: PUSH
28959: LD_INT 40
28961: PUSH
28962: LD_INT 50
28964: PUSH
28965: LD_INT 60
28967: PUSH
28968: LD_INT 70
28970: PUSH
28971: LD_INT 80
28973: PUSH
28974: LD_INT 90
28976: PUSH
28977: LD_INT 100
28979: PUSH
28980: LD_INT 110
28982: PUSH
28983: LD_INT 120
28985: PUSH
28986: LD_INT 130
28988: PUSH
28989: LD_INT 140
28991: PUSH
28992: LD_INT 150
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 1
29014: PPUSH
29015: LD_INT 15
29017: PPUSH
29018: CALL_OW 12
29022: ARRAY
29023: ST_TO_ADDR
// if ValidHex ( x , y ) then
29024: LD_VAR 0 3
29028: PPUSH
29029: LD_VAR 0 4
29033: PPUSH
29034: CALL_OW 488
29038: IFFALSE 29061
// begin result := [ x , y ] ;
29040: LD_ADDR_VAR 0 1
29044: PUSH
29045: LD_VAR 0 3
29049: PUSH
29050: LD_VAR 0 4
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: ST_TO_ADDR
// break ;
29059: GO 29063
// end ; end ;
29061: GO 28863
29063: POP
29064: POP
// if result then
29065: LD_VAR 0 1
29069: IFFALSE 29129
// begin ToLua ( playSibBomb() ) ;
29071: LD_STRING playSibBomb()
29073: PPUSH
29074: CALL_OW 559
// wait ( 0 0$14 ) ;
29078: LD_INT 490
29080: PPUSH
29081: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29085: LD_VAR 0 1
29089: PUSH
29090: LD_INT 1
29092: ARRAY
29093: PPUSH
29094: LD_VAR 0 1
29098: PUSH
29099: LD_INT 2
29101: ARRAY
29102: PPUSH
29103: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29107: LD_VAR 0 1
29111: PUSH
29112: LD_INT 1
29114: ARRAY
29115: PPUSH
29116: LD_VAR 0 1
29120: PUSH
29121: LD_INT 2
29123: ARRAY
29124: PPUSH
29125: CALL_OW 429
// end ; end ;
29129: LD_VAR 0 1
29133: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29134: LD_EXP 67
29138: PUSH
29139: LD_EXP 89
29143: AND
29144: IFFALSE 29156
29146: GO 29148
29148: DISABLE
// YouLost (  ) ;
29149: LD_STRING 
29151: PPUSH
29152: CALL_OW 104
29156: END
// every 0 0$1 trigger StreamModeActive and sFog do
29157: LD_EXP 67
29161: PUSH
29162: LD_EXP 88
29166: AND
29167: IFFALSE 29181
29169: GO 29171
29171: DISABLE
// FogOff ( your_side ) ;
29172: LD_OWVAR 2
29176: PPUSH
29177: CALL_OW 344
29181: END
// every 0 0$1 trigger StreamModeActive and sSun do
29182: LD_EXP 67
29186: PUSH
29187: LD_EXP 90
29191: AND
29192: IFFALSE 29220
29194: GO 29196
29196: DISABLE
// begin solar_recharge_percent := 0 ;
29197: LD_ADDR_OWVAR 79
29201: PUSH
29202: LD_INT 0
29204: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29205: LD_INT 10500
29207: PPUSH
29208: CALL_OW 67
// solar_recharge_percent := 100 ;
29212: LD_ADDR_OWVAR 79
29216: PUSH
29217: LD_INT 100
29219: ST_TO_ADDR
// end ;
29220: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29221: LD_EXP 67
29225: PUSH
29226: LD_EXP 91
29230: AND
29231: IFFALSE 29470
29233: GO 29235
29235: DISABLE
29236: LD_INT 0
29238: PPUSH
29239: PPUSH
29240: PPUSH
// begin tmp := [ ] ;
29241: LD_ADDR_VAR 0 3
29245: PUSH
29246: EMPTY
29247: ST_TO_ADDR
// for i := 1 to 6 do
29248: LD_ADDR_VAR 0 1
29252: PUSH
29253: DOUBLE
29254: LD_INT 1
29256: DEC
29257: ST_TO_ADDR
29258: LD_INT 6
29260: PUSH
29261: FOR_TO
29262: IFFALSE 29367
// begin uc_nation := nation_nature ;
29264: LD_ADDR_OWVAR 21
29268: PUSH
29269: LD_INT 0
29271: ST_TO_ADDR
// uc_side := 0 ;
29272: LD_ADDR_OWVAR 20
29276: PUSH
29277: LD_INT 0
29279: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29280: LD_ADDR_OWVAR 29
29284: PUSH
29285: LD_INT 12
29287: PUSH
29288: LD_INT 12
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: ST_TO_ADDR
// hc_agressivity := 20 ;
29295: LD_ADDR_OWVAR 35
29299: PUSH
29300: LD_INT 20
29302: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29303: LD_ADDR_OWVAR 28
29307: PUSH
29308: LD_INT 17
29310: ST_TO_ADDR
// hc_gallery :=  ;
29311: LD_ADDR_OWVAR 33
29315: PUSH
29316: LD_STRING 
29318: ST_TO_ADDR
// hc_name :=  ;
29319: LD_ADDR_OWVAR 26
29323: PUSH
29324: LD_STRING 
29326: ST_TO_ADDR
// un := CreateHuman ;
29327: LD_ADDR_VAR 0 2
29331: PUSH
29332: CALL_OW 44
29336: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29337: LD_VAR 0 2
29341: PPUSH
29342: LD_INT 1
29344: PPUSH
29345: CALL_OW 51
// tmp := tmp ^ un ;
29349: LD_ADDR_VAR 0 3
29353: PUSH
29354: LD_VAR 0 3
29358: PUSH
29359: LD_VAR 0 2
29363: ADD
29364: ST_TO_ADDR
// end ;
29365: GO 29261
29367: POP
29368: POP
// repeat wait ( 0 0$1 ) ;
29369: LD_INT 35
29371: PPUSH
29372: CALL_OW 67
// for un in tmp do
29376: LD_ADDR_VAR 0 2
29380: PUSH
29381: LD_VAR 0 3
29385: PUSH
29386: FOR_IN
29387: IFFALSE 29461
// begin if IsDead ( un ) then
29389: LD_VAR 0 2
29393: PPUSH
29394: CALL_OW 301
29398: IFFALSE 29418
// begin tmp := tmp diff un ;
29400: LD_ADDR_VAR 0 3
29404: PUSH
29405: LD_VAR 0 3
29409: PUSH
29410: LD_VAR 0 2
29414: DIFF
29415: ST_TO_ADDR
// continue ;
29416: GO 29386
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29418: LD_VAR 0 2
29422: PPUSH
29423: LD_INT 3
29425: PUSH
29426: LD_INT 22
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PPUSH
29440: CALL_OW 69
29444: PPUSH
29445: LD_VAR 0 2
29449: PPUSH
29450: CALL_OW 74
29454: PPUSH
29455: CALL_OW 115
// end ;
29459: GO 29386
29461: POP
29462: POP
// until not tmp ;
29463: LD_VAR 0 3
29467: NOT
29468: IFFALSE 29369
// end ;
29470: PPOPN 3
29472: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29473: LD_EXP 67
29477: PUSH
29478: LD_EXP 92
29482: AND
29483: IFFALSE 29537
29485: GO 29487
29487: DISABLE
// begin ToLua ( displayTroll(); ) ;
29488: LD_STRING displayTroll();
29490: PPUSH
29491: CALL_OW 559
// wait ( 3 3$00 ) ;
29495: LD_INT 6300
29497: PPUSH
29498: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29502: LD_STRING hideTroll();
29504: PPUSH
29505: CALL_OW 559
// wait ( 1 1$00 ) ;
29509: LD_INT 2100
29511: PPUSH
29512: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29516: LD_STRING displayTroll();
29518: PPUSH
29519: CALL_OW 559
// wait ( 1 1$00 ) ;
29523: LD_INT 2100
29525: PPUSH
29526: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29530: LD_STRING hideTroll();
29532: PPUSH
29533: CALL_OW 559
// end ;
29537: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29538: LD_EXP 67
29542: PUSH
29543: LD_EXP 93
29547: AND
29548: IFFALSE 29611
29550: GO 29552
29552: DISABLE
29553: LD_INT 0
29555: PPUSH
// begin p := 0 ;
29556: LD_ADDR_VAR 0 1
29560: PUSH
29561: LD_INT 0
29563: ST_TO_ADDR
// repeat game_speed := 1 ;
29564: LD_ADDR_OWVAR 65
29568: PUSH
29569: LD_INT 1
29571: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29572: LD_INT 35
29574: PPUSH
29575: CALL_OW 67
// p := p + 1 ;
29579: LD_ADDR_VAR 0 1
29583: PUSH
29584: LD_VAR 0 1
29588: PUSH
29589: LD_INT 1
29591: PLUS
29592: ST_TO_ADDR
// until p >= 60 ;
29593: LD_VAR 0 1
29597: PUSH
29598: LD_INT 60
29600: GREATEREQUAL
29601: IFFALSE 29564
// game_speed := 4 ;
29603: LD_ADDR_OWVAR 65
29607: PUSH
29608: LD_INT 4
29610: ST_TO_ADDR
// end ;
29611: PPOPN 1
29613: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29614: LD_EXP 67
29618: PUSH
29619: LD_EXP 94
29623: AND
29624: IFFALSE 29770
29626: GO 29628
29628: DISABLE
29629: LD_INT 0
29631: PPUSH
29632: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29633: LD_ADDR_VAR 0 1
29637: PUSH
29638: LD_INT 22
29640: PUSH
29641: LD_OWVAR 2
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: LD_INT 30
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 30
29665: PUSH
29666: LD_INT 1
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PPUSH
29682: CALL_OW 69
29686: ST_TO_ADDR
// if not depot then
29687: LD_VAR 0 1
29691: NOT
29692: IFFALSE 29696
// exit ;
29694: GO 29770
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29696: LD_ADDR_VAR 0 2
29700: PUSH
29701: LD_VAR 0 1
29705: PUSH
29706: LD_INT 1
29708: PPUSH
29709: LD_VAR 0 1
29713: PPUSH
29714: CALL_OW 12
29718: ARRAY
29719: PPUSH
29720: CALL_OW 274
29724: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29725: LD_VAR 0 2
29729: PPUSH
29730: LD_INT 1
29732: PPUSH
29733: LD_INT 0
29735: PPUSH
29736: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29740: LD_VAR 0 2
29744: PPUSH
29745: LD_INT 2
29747: PPUSH
29748: LD_INT 0
29750: PPUSH
29751: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29755: LD_VAR 0 2
29759: PPUSH
29760: LD_INT 3
29762: PPUSH
29763: LD_INT 0
29765: PPUSH
29766: CALL_OW 277
// end ;
29770: PPOPN 2
29772: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29773: LD_EXP 67
29777: PUSH
29778: LD_EXP 95
29782: AND
29783: IFFALSE 29880
29785: GO 29787
29787: DISABLE
29788: LD_INT 0
29790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29791: LD_ADDR_VAR 0 1
29795: PUSH
29796: LD_INT 22
29798: PUSH
29799: LD_OWVAR 2
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 21
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 3
29820: PUSH
29821: LD_INT 23
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: PPUSH
29840: CALL_OW 69
29844: ST_TO_ADDR
// if not tmp then
29845: LD_VAR 0 1
29849: NOT
29850: IFFALSE 29854
// exit ;
29852: GO 29880
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29854: LD_VAR 0 1
29858: PUSH
29859: LD_INT 1
29861: PPUSH
29862: LD_VAR 0 1
29866: PPUSH
29867: CALL_OW 12
29871: ARRAY
29872: PPUSH
29873: LD_INT 200
29875: PPUSH
29876: CALL_OW 234
// end ;
29880: PPOPN 1
29882: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29883: LD_EXP 67
29887: PUSH
29888: LD_EXP 96
29892: AND
29893: IFFALSE 29972
29895: GO 29897
29897: DISABLE
29898: LD_INT 0
29900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29901: LD_ADDR_VAR 0 1
29905: PUSH
29906: LD_INT 22
29908: PUSH
29909: LD_OWVAR 2
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 21
29920: PUSH
29921: LD_INT 2
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PPUSH
29932: CALL_OW 69
29936: ST_TO_ADDR
// if not tmp then
29937: LD_VAR 0 1
29941: NOT
29942: IFFALSE 29946
// exit ;
29944: GO 29972
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29946: LD_VAR 0 1
29950: PUSH
29951: LD_INT 1
29953: PPUSH
29954: LD_VAR 0 1
29958: PPUSH
29959: CALL_OW 12
29963: ARRAY
29964: PPUSH
29965: LD_INT 60
29967: PPUSH
29968: CALL_OW 234
// end ;
29972: PPOPN 1
29974: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29975: LD_EXP 67
29979: PUSH
29980: LD_EXP 97
29984: AND
29985: IFFALSE 30084
29987: GO 29989
29989: DISABLE
29990: LD_INT 0
29992: PPUSH
29993: PPUSH
// begin enable ;
29994: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29995: LD_ADDR_VAR 0 1
29999: PUSH
30000: LD_INT 22
30002: PUSH
30003: LD_OWVAR 2
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 61
30014: PUSH
30015: EMPTY
30016: LIST
30017: PUSH
30018: LD_INT 33
30020: PUSH
30021: LD_INT 2
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: LIST
30032: PPUSH
30033: CALL_OW 69
30037: ST_TO_ADDR
// if not tmp then
30038: LD_VAR 0 1
30042: NOT
30043: IFFALSE 30047
// exit ;
30045: GO 30084
// for i in tmp do
30047: LD_ADDR_VAR 0 2
30051: PUSH
30052: LD_VAR 0 1
30056: PUSH
30057: FOR_IN
30058: IFFALSE 30082
// if IsControledBy ( i ) then
30060: LD_VAR 0 2
30064: PPUSH
30065: CALL_OW 312
30069: IFFALSE 30080
// ComUnlink ( i ) ;
30071: LD_VAR 0 2
30075: PPUSH
30076: CALL_OW 136
30080: GO 30057
30082: POP
30083: POP
// end ;
30084: PPOPN 2
30086: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30087: LD_EXP 67
30091: PUSH
30092: LD_EXP 98
30096: AND
30097: IFFALSE 30237
30099: GO 30101
30101: DISABLE
30102: LD_INT 0
30104: PPUSH
30105: PPUSH
// begin ToLua ( displayPowell(); ) ;
30106: LD_STRING displayPowell();
30108: PPUSH
30109: CALL_OW 559
// uc_side := 0 ;
30113: LD_ADDR_OWVAR 20
30117: PUSH
30118: LD_INT 0
30120: ST_TO_ADDR
// uc_nation := 2 ;
30121: LD_ADDR_OWVAR 21
30125: PUSH
30126: LD_INT 2
30128: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30129: LD_ADDR_OWVAR 37
30133: PUSH
30134: LD_INT 14
30136: ST_TO_ADDR
// vc_engine := engine_siberite ;
30137: LD_ADDR_OWVAR 39
30141: PUSH
30142: LD_INT 3
30144: ST_TO_ADDR
// vc_control := control_apeman ;
30145: LD_ADDR_OWVAR 38
30149: PUSH
30150: LD_INT 5
30152: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30153: LD_ADDR_OWVAR 40
30157: PUSH
30158: LD_INT 29
30160: ST_TO_ADDR
// un := CreateVehicle ;
30161: LD_ADDR_VAR 0 2
30165: PUSH
30166: CALL_OW 45
30170: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30171: LD_VAR 0 2
30175: PPUSH
30176: LD_INT 1
30178: PPUSH
30179: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30183: LD_INT 35
30185: PPUSH
30186: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30190: LD_VAR 0 2
30194: PPUSH
30195: LD_INT 22
30197: PUSH
30198: LD_OWVAR 2
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PPUSH
30207: CALL_OW 69
30211: PPUSH
30212: LD_VAR 0 2
30216: PPUSH
30217: CALL_OW 74
30221: PPUSH
30222: CALL_OW 115
// until IsDead ( un ) ;
30226: LD_VAR 0 2
30230: PPUSH
30231: CALL_OW 301
30235: IFFALSE 30183
// end ;
30237: PPOPN 2
30239: END
// every 0 0$1 trigger StreamModeActive and sStu do
30240: LD_EXP 67
30244: PUSH
30245: LD_EXP 106
30249: AND
30250: IFFALSE 30266
30252: GO 30254
30254: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30255: LD_STRING displayStucuk();
30257: PPUSH
30258: CALL_OW 559
// ResetFog ;
30262: CALL_OW 335
// end ;
30266: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30267: LD_EXP 67
30271: PUSH
30272: LD_EXP 99
30276: AND
30277: IFFALSE 30418
30279: GO 30281
30281: DISABLE
30282: LD_INT 0
30284: PPUSH
30285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30286: LD_ADDR_VAR 0 2
30290: PUSH
30291: LD_INT 22
30293: PUSH
30294: LD_OWVAR 2
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 21
30305: PUSH
30306: LD_INT 1
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PPUSH
30317: CALL_OW 69
30321: ST_TO_ADDR
// if not tmp then
30322: LD_VAR 0 2
30326: NOT
30327: IFFALSE 30331
// exit ;
30329: GO 30418
// un := tmp [ rand ( 1 , tmp ) ] ;
30331: LD_ADDR_VAR 0 1
30335: PUSH
30336: LD_VAR 0 2
30340: PUSH
30341: LD_INT 1
30343: PPUSH
30344: LD_VAR 0 2
30348: PPUSH
30349: CALL_OW 12
30353: ARRAY
30354: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30355: LD_VAR 0 1
30359: PPUSH
30360: LD_INT 0
30362: PPUSH
30363: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30367: LD_VAR 0 1
30371: PPUSH
30372: LD_OWVAR 3
30376: PUSH
30377: LD_VAR 0 1
30381: DIFF
30382: PPUSH
30383: LD_VAR 0 1
30387: PPUSH
30388: CALL_OW 74
30392: PPUSH
30393: CALL_OW 115
// wait ( 0 0$20 ) ;
30397: LD_INT 700
30399: PPUSH
30400: CALL_OW 67
// SetSide ( un , your_side ) ;
30404: LD_VAR 0 1
30408: PPUSH
30409: LD_OWVAR 2
30413: PPUSH
30414: CALL_OW 235
// end ;
30418: PPOPN 2
30420: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30421: LD_EXP 67
30425: PUSH
30426: LD_EXP 100
30430: AND
30431: IFFALSE 30537
30433: GO 30435
30435: DISABLE
30436: LD_INT 0
30438: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30439: LD_ADDR_VAR 0 1
30443: PUSH
30444: LD_INT 22
30446: PUSH
30447: LD_OWVAR 2
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 30
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 30
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PPUSH
30488: CALL_OW 69
30492: ST_TO_ADDR
// if not depot then
30493: LD_VAR 0 1
30497: NOT
30498: IFFALSE 30502
// exit ;
30500: GO 30537
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30502: LD_VAR 0 1
30506: PUSH
30507: LD_INT 1
30509: ARRAY
30510: PPUSH
30511: CALL_OW 250
30515: PPUSH
30516: LD_VAR 0 1
30520: PUSH
30521: LD_INT 1
30523: ARRAY
30524: PPUSH
30525: CALL_OW 251
30529: PPUSH
30530: LD_INT 70
30532: PPUSH
30533: CALL_OW 495
// end ;
30537: PPOPN 1
30539: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30540: LD_EXP 67
30544: PUSH
30545: LD_EXP 101
30549: AND
30550: IFFALSE 30761
30552: GO 30554
30554: DISABLE
30555: LD_INT 0
30557: PPUSH
30558: PPUSH
30559: PPUSH
30560: PPUSH
30561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30562: LD_ADDR_VAR 0 5
30566: PUSH
30567: LD_INT 22
30569: PUSH
30570: LD_OWVAR 2
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 21
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PPUSH
30593: CALL_OW 69
30597: ST_TO_ADDR
// if not tmp then
30598: LD_VAR 0 5
30602: NOT
30603: IFFALSE 30607
// exit ;
30605: GO 30761
// for i in tmp do
30607: LD_ADDR_VAR 0 1
30611: PUSH
30612: LD_VAR 0 5
30616: PUSH
30617: FOR_IN
30618: IFFALSE 30759
// begin d := rand ( 0 , 5 ) ;
30620: LD_ADDR_VAR 0 4
30624: PUSH
30625: LD_INT 0
30627: PPUSH
30628: LD_INT 5
30630: PPUSH
30631: CALL_OW 12
30635: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30636: LD_ADDR_VAR 0 2
30640: PUSH
30641: LD_VAR 0 1
30645: PPUSH
30646: CALL_OW 250
30650: PPUSH
30651: LD_VAR 0 4
30655: PPUSH
30656: LD_INT 3
30658: PPUSH
30659: LD_INT 12
30661: PPUSH
30662: CALL_OW 12
30666: PPUSH
30667: CALL_OW 272
30671: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30672: LD_ADDR_VAR 0 3
30676: PUSH
30677: LD_VAR 0 1
30681: PPUSH
30682: CALL_OW 251
30686: PPUSH
30687: LD_VAR 0 4
30691: PPUSH
30692: LD_INT 3
30694: PPUSH
30695: LD_INT 12
30697: PPUSH
30698: CALL_OW 12
30702: PPUSH
30703: CALL_OW 273
30707: ST_TO_ADDR
// if ValidHex ( x , y ) then
30708: LD_VAR 0 2
30712: PPUSH
30713: LD_VAR 0 3
30717: PPUSH
30718: CALL_OW 488
30722: IFFALSE 30757
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30724: LD_VAR 0 1
30728: PPUSH
30729: LD_VAR 0 2
30733: PPUSH
30734: LD_VAR 0 3
30738: PPUSH
30739: LD_INT 3
30741: PPUSH
30742: LD_INT 6
30744: PPUSH
30745: CALL_OW 12
30749: PPUSH
30750: LD_INT 1
30752: PPUSH
30753: CALL_OW 483
// end ;
30757: GO 30617
30759: POP
30760: POP
// end ;
30761: PPOPN 5
30763: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30764: LD_EXP 67
30768: PUSH
30769: LD_EXP 102
30773: AND
30774: IFFALSE 30868
30776: GO 30778
30778: DISABLE
30779: LD_INT 0
30781: PPUSH
30782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30783: LD_ADDR_VAR 0 2
30787: PUSH
30788: LD_INT 22
30790: PUSH
30791: LD_OWVAR 2
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 32
30802: PUSH
30803: LD_INT 1
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 21
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: LIST
30824: PPUSH
30825: CALL_OW 69
30829: ST_TO_ADDR
// if not tmp then
30830: LD_VAR 0 2
30834: NOT
30835: IFFALSE 30839
// exit ;
30837: GO 30868
// for i in tmp do
30839: LD_ADDR_VAR 0 1
30843: PUSH
30844: LD_VAR 0 2
30848: PUSH
30849: FOR_IN
30850: IFFALSE 30866
// SetFuel ( i , 0 ) ;
30852: LD_VAR 0 1
30856: PPUSH
30857: LD_INT 0
30859: PPUSH
30860: CALL_OW 240
30864: GO 30849
30866: POP
30867: POP
// end ;
30868: PPOPN 2
30870: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30871: LD_EXP 67
30875: PUSH
30876: LD_EXP 103
30880: AND
30881: IFFALSE 30947
30883: GO 30885
30885: DISABLE
30886: LD_INT 0
30888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30889: LD_ADDR_VAR 0 1
30893: PUSH
30894: LD_INT 22
30896: PUSH
30897: LD_OWVAR 2
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 30
30908: PUSH
30909: LD_INT 29
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PPUSH
30920: CALL_OW 69
30924: ST_TO_ADDR
// if not tmp then
30925: LD_VAR 0 1
30929: NOT
30930: IFFALSE 30934
// exit ;
30932: GO 30947
// DestroyUnit ( tmp [ 1 ] ) ;
30934: LD_VAR 0 1
30938: PUSH
30939: LD_INT 1
30941: ARRAY
30942: PPUSH
30943: CALL_OW 65
// end ;
30947: PPOPN 1
30949: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30950: LD_EXP 67
30954: PUSH
30955: LD_EXP 105
30959: AND
30960: IFFALSE 31089
30962: GO 30964
30964: DISABLE
30965: LD_INT 0
30967: PPUSH
// begin uc_side := 0 ;
30968: LD_ADDR_OWVAR 20
30972: PUSH
30973: LD_INT 0
30975: ST_TO_ADDR
// uc_nation := nation_arabian ;
30976: LD_ADDR_OWVAR 21
30980: PUSH
30981: LD_INT 2
30983: ST_TO_ADDR
// hc_gallery :=  ;
30984: LD_ADDR_OWVAR 33
30988: PUSH
30989: LD_STRING 
30991: ST_TO_ADDR
// hc_name :=  ;
30992: LD_ADDR_OWVAR 26
30996: PUSH
30997: LD_STRING 
30999: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31000: LD_INT 1
31002: PPUSH
31003: LD_INT 11
31005: PPUSH
31006: LD_INT 10
31008: PPUSH
31009: CALL_OW 380
// un := CreateHuman ;
31013: LD_ADDR_VAR 0 1
31017: PUSH
31018: CALL_OW 44
31022: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31023: LD_VAR 0 1
31027: PPUSH
31028: LD_INT 1
31030: PPUSH
31031: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31035: LD_INT 35
31037: PPUSH
31038: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31042: LD_VAR 0 1
31046: PPUSH
31047: LD_INT 22
31049: PUSH
31050: LD_OWVAR 2
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PPUSH
31059: CALL_OW 69
31063: PPUSH
31064: LD_VAR 0 1
31068: PPUSH
31069: CALL_OW 74
31073: PPUSH
31074: CALL_OW 115
// until IsDead ( un ) ;
31078: LD_VAR 0 1
31082: PPUSH
31083: CALL_OW 301
31087: IFFALSE 31035
// end ;
31089: PPOPN 1
31091: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31092: LD_EXP 67
31096: PUSH
31097: LD_EXP 107
31101: AND
31102: IFFALSE 31114
31104: GO 31106
31106: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31107: LD_STRING earthquake(getX(game), 0, 32)
31109: PPUSH
31110: CALL_OW 559
31114: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31115: LD_EXP 67
31119: PUSH
31120: LD_EXP 108
31124: AND
31125: IFFALSE 31216
31127: GO 31129
31129: DISABLE
31130: LD_INT 0
31132: PPUSH
// begin enable ;
31133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31134: LD_ADDR_VAR 0 1
31138: PUSH
31139: LD_INT 22
31141: PUSH
31142: LD_OWVAR 2
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 21
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 33
31163: PUSH
31164: LD_INT 3
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: PPUSH
31176: CALL_OW 69
31180: ST_TO_ADDR
// if not tmp then
31181: LD_VAR 0 1
31185: NOT
31186: IFFALSE 31190
// exit ;
31188: GO 31216
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31190: LD_VAR 0 1
31194: PUSH
31195: LD_INT 1
31197: PPUSH
31198: LD_VAR 0 1
31202: PPUSH
31203: CALL_OW 12
31207: ARRAY
31208: PPUSH
31209: LD_INT 1
31211: PPUSH
31212: CALL_OW 234
// end ;
31216: PPOPN 1
31218: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31219: LD_EXP 67
31223: PUSH
31224: LD_EXP 109
31228: AND
31229: IFFALSE 31370
31231: GO 31233
31233: DISABLE
31234: LD_INT 0
31236: PPUSH
31237: PPUSH
31238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31239: LD_ADDR_VAR 0 3
31243: PUSH
31244: LD_INT 22
31246: PUSH
31247: LD_OWVAR 2
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 25
31258: PUSH
31259: LD_INT 1
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PPUSH
31270: CALL_OW 69
31274: ST_TO_ADDR
// if not tmp then
31275: LD_VAR 0 3
31279: NOT
31280: IFFALSE 31284
// exit ;
31282: GO 31370
// un := tmp [ rand ( 1 , tmp ) ] ;
31284: LD_ADDR_VAR 0 2
31288: PUSH
31289: LD_VAR 0 3
31293: PUSH
31294: LD_INT 1
31296: PPUSH
31297: LD_VAR 0 3
31301: PPUSH
31302: CALL_OW 12
31306: ARRAY
31307: ST_TO_ADDR
// if Crawls ( un ) then
31308: LD_VAR 0 2
31312: PPUSH
31313: CALL_OW 318
31317: IFFALSE 31328
// ComWalk ( un ) ;
31319: LD_VAR 0 2
31323: PPUSH
31324: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31328: LD_VAR 0 2
31332: PPUSH
31333: LD_INT 9
31335: PPUSH
31336: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31340: LD_INT 28
31342: PPUSH
31343: LD_OWVAR 2
31347: PPUSH
31348: LD_INT 2
31350: PPUSH
31351: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31355: LD_INT 29
31357: PPUSH
31358: LD_OWVAR 2
31362: PPUSH
31363: LD_INT 2
31365: PPUSH
31366: CALL_OW 322
// end ;
31370: PPOPN 3
31372: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31373: LD_EXP 67
31377: PUSH
31378: LD_EXP 110
31382: AND
31383: IFFALSE 31494
31385: GO 31387
31387: DISABLE
31388: LD_INT 0
31390: PPUSH
31391: PPUSH
31392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31393: LD_ADDR_VAR 0 3
31397: PUSH
31398: LD_INT 22
31400: PUSH
31401: LD_OWVAR 2
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 25
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PPUSH
31424: CALL_OW 69
31428: ST_TO_ADDR
// if not tmp then
31429: LD_VAR 0 3
31433: NOT
31434: IFFALSE 31438
// exit ;
31436: GO 31494
// un := tmp [ rand ( 1 , tmp ) ] ;
31438: LD_ADDR_VAR 0 2
31442: PUSH
31443: LD_VAR 0 3
31447: PUSH
31448: LD_INT 1
31450: PPUSH
31451: LD_VAR 0 3
31455: PPUSH
31456: CALL_OW 12
31460: ARRAY
31461: ST_TO_ADDR
// if Crawls ( un ) then
31462: LD_VAR 0 2
31466: PPUSH
31467: CALL_OW 318
31471: IFFALSE 31482
// ComWalk ( un ) ;
31473: LD_VAR 0 2
31477: PPUSH
31478: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31482: LD_VAR 0 2
31486: PPUSH
31487: LD_INT 8
31489: PPUSH
31490: CALL_OW 336
// end ;
31494: PPOPN 3
31496: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31497: LD_EXP 67
31501: PUSH
31502: LD_EXP 111
31506: AND
31507: IFFALSE 31651
31509: GO 31511
31511: DISABLE
31512: LD_INT 0
31514: PPUSH
31515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31516: LD_ADDR_VAR 0 2
31520: PUSH
31521: LD_INT 22
31523: PUSH
31524: LD_OWVAR 2
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 21
31535: PUSH
31536: LD_INT 2
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 2
31545: PUSH
31546: LD_INT 34
31548: PUSH
31549: LD_INT 12
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 34
31558: PUSH
31559: LD_INT 51
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 34
31568: PUSH
31569: LD_INT 32
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: LIST
31586: PPUSH
31587: CALL_OW 69
31591: ST_TO_ADDR
// if not tmp then
31592: LD_VAR 0 2
31596: NOT
31597: IFFALSE 31601
// exit ;
31599: GO 31651
// for i in tmp do
31601: LD_ADDR_VAR 0 1
31605: PUSH
31606: LD_VAR 0 2
31610: PUSH
31611: FOR_IN
31612: IFFALSE 31649
// if GetCargo ( i , mat_artifact ) = 0 then
31614: LD_VAR 0 1
31618: PPUSH
31619: LD_INT 4
31621: PPUSH
31622: CALL_OW 289
31626: PUSH
31627: LD_INT 0
31629: EQUAL
31630: IFFALSE 31647
// SetCargo ( i , mat_siberit , 100 ) ;
31632: LD_VAR 0 1
31636: PPUSH
31637: LD_INT 3
31639: PPUSH
31640: LD_INT 100
31642: PPUSH
31643: CALL_OW 290
31647: GO 31611
31649: POP
31650: POP
// end ;
31651: PPOPN 2
31653: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31654: LD_EXP 67
31658: PUSH
31659: LD_EXP 112
31663: AND
31664: IFFALSE 31847
31666: GO 31668
31668: DISABLE
31669: LD_INT 0
31671: PPUSH
31672: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31673: LD_ADDR_VAR 0 2
31677: PUSH
31678: LD_INT 22
31680: PUSH
31681: LD_OWVAR 2
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PPUSH
31690: CALL_OW 69
31694: ST_TO_ADDR
// if not tmp then
31695: LD_VAR 0 2
31699: NOT
31700: IFFALSE 31704
// exit ;
31702: GO 31847
// for i := 1 to 2 do
31704: LD_ADDR_VAR 0 1
31708: PUSH
31709: DOUBLE
31710: LD_INT 1
31712: DEC
31713: ST_TO_ADDR
31714: LD_INT 2
31716: PUSH
31717: FOR_TO
31718: IFFALSE 31845
// begin uc_side := your_side ;
31720: LD_ADDR_OWVAR 20
31724: PUSH
31725: LD_OWVAR 2
31729: ST_TO_ADDR
// uc_nation := nation_american ;
31730: LD_ADDR_OWVAR 21
31734: PUSH
31735: LD_INT 1
31737: ST_TO_ADDR
// vc_chassis := us_morphling ;
31738: LD_ADDR_OWVAR 37
31742: PUSH
31743: LD_INT 5
31745: ST_TO_ADDR
// vc_engine := engine_siberite ;
31746: LD_ADDR_OWVAR 39
31750: PUSH
31751: LD_INT 3
31753: ST_TO_ADDR
// vc_control := control_computer ;
31754: LD_ADDR_OWVAR 38
31758: PUSH
31759: LD_INT 3
31761: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31762: LD_ADDR_OWVAR 40
31766: PUSH
31767: LD_INT 10
31769: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31770: LD_VAR 0 2
31774: PUSH
31775: LD_INT 1
31777: ARRAY
31778: PPUSH
31779: CALL_OW 310
31783: NOT
31784: IFFALSE 31831
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31786: CALL_OW 45
31790: PPUSH
31791: LD_VAR 0 2
31795: PUSH
31796: LD_INT 1
31798: ARRAY
31799: PPUSH
31800: CALL_OW 250
31804: PPUSH
31805: LD_VAR 0 2
31809: PUSH
31810: LD_INT 1
31812: ARRAY
31813: PPUSH
31814: CALL_OW 251
31818: PPUSH
31819: LD_INT 12
31821: PPUSH
31822: LD_INT 1
31824: PPUSH
31825: CALL_OW 50
31829: GO 31843
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31831: CALL_OW 45
31835: PPUSH
31836: LD_INT 1
31838: PPUSH
31839: CALL_OW 51
// end ;
31843: GO 31717
31845: POP
31846: POP
// end ;
31847: PPOPN 2
31849: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31850: LD_EXP 67
31854: PUSH
31855: LD_EXP 113
31859: AND
31860: IFFALSE 32082
31862: GO 31864
31864: DISABLE
31865: LD_INT 0
31867: PPUSH
31868: PPUSH
31869: PPUSH
31870: PPUSH
31871: PPUSH
31872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31873: LD_ADDR_VAR 0 6
31877: PUSH
31878: LD_INT 22
31880: PUSH
31881: LD_OWVAR 2
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 21
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 3
31902: PUSH
31903: LD_INT 23
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: LIST
31921: PPUSH
31922: CALL_OW 69
31926: ST_TO_ADDR
// if not tmp then
31927: LD_VAR 0 6
31931: NOT
31932: IFFALSE 31936
// exit ;
31934: GO 32082
// s1 := rand ( 1 , 4 ) ;
31936: LD_ADDR_VAR 0 2
31940: PUSH
31941: LD_INT 1
31943: PPUSH
31944: LD_INT 4
31946: PPUSH
31947: CALL_OW 12
31951: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31952: LD_ADDR_VAR 0 4
31956: PUSH
31957: LD_VAR 0 6
31961: PUSH
31962: LD_INT 1
31964: ARRAY
31965: PPUSH
31966: LD_VAR 0 2
31970: PPUSH
31971: CALL_OW 259
31975: ST_TO_ADDR
// if s1 = 1 then
31976: LD_VAR 0 2
31980: PUSH
31981: LD_INT 1
31983: EQUAL
31984: IFFALSE 32004
// s2 := rand ( 2 , 4 ) else
31986: LD_ADDR_VAR 0 3
31990: PUSH
31991: LD_INT 2
31993: PPUSH
31994: LD_INT 4
31996: PPUSH
31997: CALL_OW 12
32001: ST_TO_ADDR
32002: GO 32012
// s2 := 1 ;
32004: LD_ADDR_VAR 0 3
32008: PUSH
32009: LD_INT 1
32011: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32012: LD_ADDR_VAR 0 5
32016: PUSH
32017: LD_VAR 0 6
32021: PUSH
32022: LD_INT 1
32024: ARRAY
32025: PPUSH
32026: LD_VAR 0 3
32030: PPUSH
32031: CALL_OW 259
32035: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32036: LD_VAR 0 6
32040: PUSH
32041: LD_INT 1
32043: ARRAY
32044: PPUSH
32045: LD_VAR 0 2
32049: PPUSH
32050: LD_VAR 0 5
32054: PPUSH
32055: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32059: LD_VAR 0 6
32063: PUSH
32064: LD_INT 1
32066: ARRAY
32067: PPUSH
32068: LD_VAR 0 3
32072: PPUSH
32073: LD_VAR 0 4
32077: PPUSH
32078: CALL_OW 237
// end ;
32082: PPOPN 6
32084: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32085: LD_EXP 67
32089: PUSH
32090: LD_EXP 114
32094: AND
32095: IFFALSE 32174
32097: GO 32099
32099: DISABLE
32100: LD_INT 0
32102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32103: LD_ADDR_VAR 0 1
32107: PUSH
32108: LD_INT 22
32110: PUSH
32111: LD_OWVAR 2
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 30
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PPUSH
32134: CALL_OW 69
32138: ST_TO_ADDR
// if not tmp then
32139: LD_VAR 0 1
32143: NOT
32144: IFFALSE 32148
// exit ;
32146: GO 32174
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32148: LD_VAR 0 1
32152: PUSH
32153: LD_INT 1
32155: PPUSH
32156: LD_VAR 0 1
32160: PPUSH
32161: CALL_OW 12
32165: ARRAY
32166: PPUSH
32167: LD_INT 1
32169: PPUSH
32170: CALL_OW 234
// end ;
32174: PPOPN 1
32176: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32177: LD_EXP 67
32181: PUSH
32182: LD_EXP 115
32186: AND
32187: IFFALSE 32299
32189: GO 32191
32191: DISABLE
32192: LD_INT 0
32194: PPUSH
32195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32196: LD_ADDR_VAR 0 2
32200: PUSH
32201: LD_INT 22
32203: PUSH
32204: LD_OWVAR 2
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: LD_INT 30
32218: PUSH
32219: LD_INT 27
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 30
32228: PUSH
32229: LD_INT 26
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 30
32238: PUSH
32239: LD_INT 28
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PPUSH
32256: CALL_OW 69
32260: ST_TO_ADDR
// if not tmp then
32261: LD_VAR 0 2
32265: NOT
32266: IFFALSE 32270
// exit ;
32268: GO 32299
// for i in tmp do
32270: LD_ADDR_VAR 0 1
32274: PUSH
32275: LD_VAR 0 2
32279: PUSH
32280: FOR_IN
32281: IFFALSE 32297
// SetLives ( i , 1 ) ;
32283: LD_VAR 0 1
32287: PPUSH
32288: LD_INT 1
32290: PPUSH
32291: CALL_OW 234
32295: GO 32280
32297: POP
32298: POP
// end ;
32299: PPOPN 2
32301: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32302: LD_EXP 67
32306: PUSH
32307: LD_EXP 116
32311: AND
32312: IFFALSE 32599
32314: GO 32316
32316: DISABLE
32317: LD_INT 0
32319: PPUSH
32320: PPUSH
32321: PPUSH
// begin i := rand ( 1 , 7 ) ;
32322: LD_ADDR_VAR 0 1
32326: PUSH
32327: LD_INT 1
32329: PPUSH
32330: LD_INT 7
32332: PPUSH
32333: CALL_OW 12
32337: ST_TO_ADDR
// case i of 1 :
32338: LD_VAR 0 1
32342: PUSH
32343: LD_INT 1
32345: DOUBLE
32346: EQUAL
32347: IFTRUE 32351
32349: GO 32361
32351: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32352: LD_STRING earthquake(getX(game), 0, 32)
32354: PPUSH
32355: CALL_OW 559
32359: GO 32599
32361: LD_INT 2
32363: DOUBLE
32364: EQUAL
32365: IFTRUE 32369
32367: GO 32383
32369: POP
// begin ToLua ( displayStucuk(); ) ;
32370: LD_STRING displayStucuk();
32372: PPUSH
32373: CALL_OW 559
// ResetFog ;
32377: CALL_OW 335
// end ; 3 :
32381: GO 32599
32383: LD_INT 3
32385: DOUBLE
32386: EQUAL
32387: IFTRUE 32391
32389: GO 32495
32391: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32392: LD_ADDR_VAR 0 2
32396: PUSH
32397: LD_INT 22
32399: PUSH
32400: LD_OWVAR 2
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 25
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PPUSH
32423: CALL_OW 69
32427: ST_TO_ADDR
// if not tmp then
32428: LD_VAR 0 2
32432: NOT
32433: IFFALSE 32437
// exit ;
32435: GO 32599
// un := tmp [ rand ( 1 , tmp ) ] ;
32437: LD_ADDR_VAR 0 3
32441: PUSH
32442: LD_VAR 0 2
32446: PUSH
32447: LD_INT 1
32449: PPUSH
32450: LD_VAR 0 2
32454: PPUSH
32455: CALL_OW 12
32459: ARRAY
32460: ST_TO_ADDR
// if Crawls ( un ) then
32461: LD_VAR 0 3
32465: PPUSH
32466: CALL_OW 318
32470: IFFALSE 32481
// ComWalk ( un ) ;
32472: LD_VAR 0 3
32476: PPUSH
32477: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32481: LD_VAR 0 3
32485: PPUSH
32486: LD_INT 8
32488: PPUSH
32489: CALL_OW 336
// end ; 4 :
32493: GO 32599
32495: LD_INT 4
32497: DOUBLE
32498: EQUAL
32499: IFTRUE 32503
32501: GO 32577
32503: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32504: LD_ADDR_VAR 0 2
32508: PUSH
32509: LD_INT 22
32511: PUSH
32512: LD_OWVAR 2
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 30
32523: PUSH
32524: LD_INT 29
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PPUSH
32535: CALL_OW 69
32539: ST_TO_ADDR
// if not tmp then
32540: LD_VAR 0 2
32544: NOT
32545: IFFALSE 32549
// exit ;
32547: GO 32599
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32549: LD_VAR 0 2
32553: PUSH
32554: LD_INT 1
32556: ARRAY
32557: PPUSH
32558: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32562: LD_VAR 0 2
32566: PUSH
32567: LD_INT 1
32569: ARRAY
32570: PPUSH
32571: CALL_OW 65
// end ; 5 .. 7 :
32575: GO 32599
32577: LD_INT 5
32579: DOUBLE
32580: GREATEREQUAL
32581: IFFALSE 32589
32583: LD_INT 7
32585: DOUBLE
32586: LESSEQUAL
32587: IFTRUE 32591
32589: GO 32598
32591: POP
// StreamSibBomb ; end ;
32592: CALL 28836 0 0
32596: GO 32599
32598: POP
// end ;
32599: PPOPN 3
32601: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32602: LD_EXP 67
32606: PUSH
32607: LD_EXP 117
32611: AND
32612: IFFALSE 32768
32614: GO 32616
32616: DISABLE
32617: LD_INT 0
32619: PPUSH
32620: PPUSH
32621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32622: LD_ADDR_VAR 0 2
32626: PUSH
32627: LD_INT 81
32629: PUSH
32630: LD_OWVAR 2
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 2
32641: PUSH
32642: LD_INT 21
32644: PUSH
32645: LD_INT 1
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 21
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: LIST
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PPUSH
32671: CALL_OW 69
32675: ST_TO_ADDR
// if not tmp then
32676: LD_VAR 0 2
32680: NOT
32681: IFFALSE 32685
// exit ;
32683: GO 32768
// p := 0 ;
32685: LD_ADDR_VAR 0 3
32689: PUSH
32690: LD_INT 0
32692: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32693: LD_INT 35
32695: PPUSH
32696: CALL_OW 67
// p := p + 1 ;
32700: LD_ADDR_VAR 0 3
32704: PUSH
32705: LD_VAR 0 3
32709: PUSH
32710: LD_INT 1
32712: PLUS
32713: ST_TO_ADDR
// for i in tmp do
32714: LD_ADDR_VAR 0 1
32718: PUSH
32719: LD_VAR 0 2
32723: PUSH
32724: FOR_IN
32725: IFFALSE 32756
// if GetLives ( i ) < 1000 then
32727: LD_VAR 0 1
32731: PPUSH
32732: CALL_OW 256
32736: PUSH
32737: LD_INT 1000
32739: LESS
32740: IFFALSE 32754
// SetLives ( i , 1000 ) ;
32742: LD_VAR 0 1
32746: PPUSH
32747: LD_INT 1000
32749: PPUSH
32750: CALL_OW 234
32754: GO 32724
32756: POP
32757: POP
// until p > 20 ;
32758: LD_VAR 0 3
32762: PUSH
32763: LD_INT 20
32765: GREATER
32766: IFFALSE 32693
// end ;
32768: PPOPN 3
32770: END
// every 0 0$1 trigger StreamModeActive and sTime do
32771: LD_EXP 67
32775: PUSH
32776: LD_EXP 118
32780: AND
32781: IFFALSE 32816
32783: GO 32785
32785: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32786: LD_INT 28
32788: PPUSH
32789: LD_OWVAR 2
32793: PPUSH
32794: LD_INT 2
32796: PPUSH
32797: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32801: LD_INT 30
32803: PPUSH
32804: LD_OWVAR 2
32808: PPUSH
32809: LD_INT 2
32811: PPUSH
32812: CALL_OW 322
// end ;
32816: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32817: LD_EXP 67
32821: PUSH
32822: LD_EXP 119
32826: AND
32827: IFFALSE 32948
32829: GO 32831
32831: DISABLE
32832: LD_INT 0
32834: PPUSH
32835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32836: LD_ADDR_VAR 0 2
32840: PUSH
32841: LD_INT 22
32843: PUSH
32844: LD_OWVAR 2
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 21
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 3
32865: PUSH
32866: LD_INT 23
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: PPUSH
32885: CALL_OW 69
32889: ST_TO_ADDR
// if not tmp then
32890: LD_VAR 0 2
32894: NOT
32895: IFFALSE 32899
// exit ;
32897: GO 32948
// for i in tmp do
32899: LD_ADDR_VAR 0 1
32903: PUSH
32904: LD_VAR 0 2
32908: PUSH
32909: FOR_IN
32910: IFFALSE 32946
// begin if Crawls ( i ) then
32912: LD_VAR 0 1
32916: PPUSH
32917: CALL_OW 318
32921: IFFALSE 32932
// ComWalk ( i ) ;
32923: LD_VAR 0 1
32927: PPUSH
32928: CALL_OW 138
// SetClass ( i , 2 ) ;
32932: LD_VAR 0 1
32936: PPUSH
32937: LD_INT 2
32939: PPUSH
32940: CALL_OW 336
// end ;
32944: GO 32909
32946: POP
32947: POP
// end ;
32948: PPOPN 2
32950: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32951: LD_EXP 67
32955: PUSH
32956: LD_EXP 120
32960: AND
32961: IFFALSE 33249
32963: GO 32965
32965: DISABLE
32966: LD_INT 0
32968: PPUSH
32969: PPUSH
32970: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32971: LD_OWVAR 2
32975: PPUSH
32976: LD_INT 9
32978: PPUSH
32979: LD_INT 1
32981: PPUSH
32982: LD_INT 1
32984: PPUSH
32985: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32989: LD_INT 9
32991: PPUSH
32992: LD_OWVAR 2
32996: PPUSH
32997: CALL_OW 343
// uc_side := 9 ;
33001: LD_ADDR_OWVAR 20
33005: PUSH
33006: LD_INT 9
33008: ST_TO_ADDR
// uc_nation := 2 ;
33009: LD_ADDR_OWVAR 21
33013: PUSH
33014: LD_INT 2
33016: ST_TO_ADDR
// hc_name := Dark Warrior ;
33017: LD_ADDR_OWVAR 26
33021: PUSH
33022: LD_STRING Dark Warrior
33024: ST_TO_ADDR
// hc_gallery :=  ;
33025: LD_ADDR_OWVAR 33
33029: PUSH
33030: LD_STRING 
33032: ST_TO_ADDR
// hc_noskilllimit := true ;
33033: LD_ADDR_OWVAR 76
33037: PUSH
33038: LD_INT 1
33040: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33041: LD_ADDR_OWVAR 31
33045: PUSH
33046: LD_INT 30
33048: PUSH
33049: LD_INT 30
33051: PUSH
33052: LD_INT 30
33054: PUSH
33055: LD_INT 30
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: ST_TO_ADDR
// un := CreateHuman ;
33064: LD_ADDR_VAR 0 3
33068: PUSH
33069: CALL_OW 44
33073: ST_TO_ADDR
// hc_noskilllimit := false ;
33074: LD_ADDR_OWVAR 76
33078: PUSH
33079: LD_INT 0
33081: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33082: LD_VAR 0 3
33086: PPUSH
33087: LD_INT 1
33089: PPUSH
33090: CALL_OW 51
// ToLua ( playRanger() ) ;
33094: LD_STRING playRanger()
33096: PPUSH
33097: CALL_OW 559
// p := 0 ;
33101: LD_ADDR_VAR 0 2
33105: PUSH
33106: LD_INT 0
33108: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33109: LD_INT 35
33111: PPUSH
33112: CALL_OW 67
// p := p + 1 ;
33116: LD_ADDR_VAR 0 2
33120: PUSH
33121: LD_VAR 0 2
33125: PUSH
33126: LD_INT 1
33128: PLUS
33129: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33130: LD_VAR 0 3
33134: PPUSH
33135: CALL_OW 256
33139: PUSH
33140: LD_INT 1000
33142: LESS
33143: IFFALSE 33157
// SetLives ( un , 1000 ) ;
33145: LD_VAR 0 3
33149: PPUSH
33150: LD_INT 1000
33152: PPUSH
33153: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33157: LD_VAR 0 3
33161: PPUSH
33162: LD_INT 81
33164: PUSH
33165: LD_OWVAR 2
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 91
33176: PUSH
33177: LD_VAR 0 3
33181: PUSH
33182: LD_INT 30
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: LIST
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PPUSH
33194: CALL_OW 69
33198: PPUSH
33199: LD_VAR 0 3
33203: PPUSH
33204: CALL_OW 74
33208: PPUSH
33209: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33213: LD_VAR 0 2
33217: PUSH
33218: LD_INT 80
33220: GREATER
33221: PUSH
33222: LD_VAR 0 3
33226: PPUSH
33227: CALL_OW 301
33231: OR
33232: IFFALSE 33109
// if un then
33234: LD_VAR 0 3
33238: IFFALSE 33249
// RemoveUnit ( un ) ;
33240: LD_VAR 0 3
33244: PPUSH
33245: CALL_OW 64
// end ;
33249: PPOPN 3
33251: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33252: LD_EXP 121
33256: IFFALSE 33372
33258: GO 33260
33260: DISABLE
33261: LD_INT 0
33263: PPUSH
33264: PPUSH
33265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33266: LD_ADDR_VAR 0 2
33270: PUSH
33271: LD_INT 81
33273: PUSH
33274: LD_OWVAR 2
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 21
33285: PUSH
33286: LD_INT 1
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PPUSH
33297: CALL_OW 69
33301: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33302: LD_STRING playComputer()
33304: PPUSH
33305: CALL_OW 559
// if not tmp then
33309: LD_VAR 0 2
33313: NOT
33314: IFFALSE 33318
// exit ;
33316: GO 33372
// for i in tmp do
33318: LD_ADDR_VAR 0 1
33322: PUSH
33323: LD_VAR 0 2
33327: PUSH
33328: FOR_IN
33329: IFFALSE 33370
// for j := 1 to 4 do
33331: LD_ADDR_VAR 0 3
33335: PUSH
33336: DOUBLE
33337: LD_INT 1
33339: DEC
33340: ST_TO_ADDR
33341: LD_INT 4
33343: PUSH
33344: FOR_TO
33345: IFFALSE 33366
// SetSkill ( i , j , 10 ) ;
33347: LD_VAR 0 1
33351: PPUSH
33352: LD_VAR 0 3
33356: PPUSH
33357: LD_INT 10
33359: PPUSH
33360: CALL_OW 237
33364: GO 33344
33366: POP
33367: POP
33368: GO 33328
33370: POP
33371: POP
// end ;
33372: PPOPN 3
33374: END
// every 0 0$1 trigger s30 do var i , tmp ;
33375: LD_EXP 122
33379: IFFALSE 33448
33381: GO 33383
33383: DISABLE
33384: LD_INT 0
33386: PPUSH
33387: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33388: LD_ADDR_VAR 0 2
33392: PUSH
33393: LD_INT 22
33395: PUSH
33396: LD_OWVAR 2
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PPUSH
33405: CALL_OW 69
33409: ST_TO_ADDR
// if not tmp then
33410: LD_VAR 0 2
33414: NOT
33415: IFFALSE 33419
// exit ;
33417: GO 33448
// for i in tmp do
33419: LD_ADDR_VAR 0 1
33423: PUSH
33424: LD_VAR 0 2
33428: PUSH
33429: FOR_IN
33430: IFFALSE 33446
// SetLives ( i , 300 ) ;
33432: LD_VAR 0 1
33436: PPUSH
33437: LD_INT 300
33439: PPUSH
33440: CALL_OW 234
33444: GO 33429
33446: POP
33447: POP
// end ;
33448: PPOPN 2
33450: END
// every 0 0$1 trigger s60 do var i , tmp ;
33451: LD_EXP 123
33455: IFFALSE 33524
33457: GO 33459
33459: DISABLE
33460: LD_INT 0
33462: PPUSH
33463: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33464: LD_ADDR_VAR 0 2
33468: PUSH
33469: LD_INT 22
33471: PUSH
33472: LD_OWVAR 2
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PPUSH
33481: CALL_OW 69
33485: ST_TO_ADDR
// if not tmp then
33486: LD_VAR 0 2
33490: NOT
33491: IFFALSE 33495
// exit ;
33493: GO 33524
// for i in tmp do
33495: LD_ADDR_VAR 0 1
33499: PUSH
33500: LD_VAR 0 2
33504: PUSH
33505: FOR_IN
33506: IFFALSE 33522
// SetLives ( i , 600 ) ;
33508: LD_VAR 0 1
33512: PPUSH
33513: LD_INT 600
33515: PPUSH
33516: CALL_OW 234
33520: GO 33505
33522: POP
33523: POP
// end ;
33524: PPOPN 2
33526: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33527: LD_INT 0
33529: PPUSH
// case cmd of 301 :
33530: LD_VAR 0 1
33534: PUSH
33535: LD_INT 301
33537: DOUBLE
33538: EQUAL
33539: IFTRUE 33543
33541: GO 33575
33543: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33544: LD_VAR 0 6
33548: PPUSH
33549: LD_VAR 0 7
33553: PPUSH
33554: LD_VAR 0 8
33558: PPUSH
33559: LD_VAR 0 4
33563: PPUSH
33564: LD_VAR 0 5
33568: PPUSH
33569: CALL 34776 0 5
33573: GO 33696
33575: LD_INT 302
33577: DOUBLE
33578: EQUAL
33579: IFTRUE 33583
33581: GO 33620
33583: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33584: LD_VAR 0 6
33588: PPUSH
33589: LD_VAR 0 7
33593: PPUSH
33594: LD_VAR 0 8
33598: PPUSH
33599: LD_VAR 0 9
33603: PPUSH
33604: LD_VAR 0 4
33608: PPUSH
33609: LD_VAR 0 5
33613: PPUSH
33614: CALL 34867 0 6
33618: GO 33696
33620: LD_INT 303
33622: DOUBLE
33623: EQUAL
33624: IFTRUE 33628
33626: GO 33665
33628: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33629: LD_VAR 0 6
33633: PPUSH
33634: LD_VAR 0 7
33638: PPUSH
33639: LD_VAR 0 8
33643: PPUSH
33644: LD_VAR 0 9
33648: PPUSH
33649: LD_VAR 0 4
33653: PPUSH
33654: LD_VAR 0 5
33658: PPUSH
33659: CALL 33701 0 6
33663: GO 33696
33665: LD_INT 304
33667: DOUBLE
33668: EQUAL
33669: IFTRUE 33673
33671: GO 33695
33673: POP
// hHackTeleport ( unit , x , y ) ; end ;
33674: LD_VAR 0 2
33678: PPUSH
33679: LD_VAR 0 4
33683: PPUSH
33684: LD_VAR 0 5
33688: PPUSH
33689: CALL 35460 0 3
33693: GO 33696
33695: POP
// end ;
33696: LD_VAR 0 12
33700: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33701: LD_INT 0
33703: PPUSH
33704: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33705: LD_VAR 0 1
33709: PUSH
33710: LD_INT 1
33712: LESS
33713: PUSH
33714: LD_VAR 0 1
33718: PUSH
33719: LD_INT 3
33721: GREATER
33722: OR
33723: PUSH
33724: LD_VAR 0 5
33728: PPUSH
33729: LD_VAR 0 6
33733: PPUSH
33734: CALL_OW 428
33738: OR
33739: IFFALSE 33743
// exit ;
33741: GO 34463
// uc_side := your_side ;
33743: LD_ADDR_OWVAR 20
33747: PUSH
33748: LD_OWVAR 2
33752: ST_TO_ADDR
// uc_nation := nation ;
33753: LD_ADDR_OWVAR 21
33757: PUSH
33758: LD_VAR 0 1
33762: ST_TO_ADDR
// bc_level = 1 ;
33763: LD_ADDR_OWVAR 43
33767: PUSH
33768: LD_INT 1
33770: ST_TO_ADDR
// case btype of 1 :
33771: LD_VAR 0 2
33775: PUSH
33776: LD_INT 1
33778: DOUBLE
33779: EQUAL
33780: IFTRUE 33784
33782: GO 33795
33784: POP
// bc_type := b_depot ; 2 :
33785: LD_ADDR_OWVAR 42
33789: PUSH
33790: LD_INT 0
33792: ST_TO_ADDR
33793: GO 34407
33795: LD_INT 2
33797: DOUBLE
33798: EQUAL
33799: IFTRUE 33803
33801: GO 33814
33803: POP
// bc_type := b_warehouse ; 3 :
33804: LD_ADDR_OWVAR 42
33808: PUSH
33809: LD_INT 1
33811: ST_TO_ADDR
33812: GO 34407
33814: LD_INT 3
33816: DOUBLE
33817: EQUAL
33818: IFTRUE 33822
33820: GO 33833
33822: POP
// bc_type := b_lab ; 4 .. 9 :
33823: LD_ADDR_OWVAR 42
33827: PUSH
33828: LD_INT 6
33830: ST_TO_ADDR
33831: GO 34407
33833: LD_INT 4
33835: DOUBLE
33836: GREATEREQUAL
33837: IFFALSE 33845
33839: LD_INT 9
33841: DOUBLE
33842: LESSEQUAL
33843: IFTRUE 33847
33845: GO 33899
33847: POP
// begin bc_type := b_lab_half ;
33848: LD_ADDR_OWVAR 42
33852: PUSH
33853: LD_INT 7
33855: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33856: LD_ADDR_OWVAR 44
33860: PUSH
33861: LD_INT 10
33863: PUSH
33864: LD_INT 11
33866: PUSH
33867: LD_INT 12
33869: PUSH
33870: LD_INT 15
33872: PUSH
33873: LD_INT 14
33875: PUSH
33876: LD_INT 13
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: PUSH
33887: LD_VAR 0 2
33891: PUSH
33892: LD_INT 3
33894: MINUS
33895: ARRAY
33896: ST_TO_ADDR
// end ; 10 .. 13 :
33897: GO 34407
33899: LD_INT 10
33901: DOUBLE
33902: GREATEREQUAL
33903: IFFALSE 33911
33905: LD_INT 13
33907: DOUBLE
33908: LESSEQUAL
33909: IFTRUE 33913
33911: GO 33990
33913: POP
// begin bc_type := b_lab_full ;
33914: LD_ADDR_OWVAR 42
33918: PUSH
33919: LD_INT 8
33921: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33922: LD_ADDR_OWVAR 44
33926: PUSH
33927: LD_INT 10
33929: PUSH
33930: LD_INT 12
33932: PUSH
33933: LD_INT 14
33935: PUSH
33936: LD_INT 13
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: PUSH
33945: LD_VAR 0 2
33949: PUSH
33950: LD_INT 9
33952: MINUS
33953: ARRAY
33954: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33955: LD_ADDR_OWVAR 45
33959: PUSH
33960: LD_INT 11
33962: PUSH
33963: LD_INT 15
33965: PUSH
33966: LD_INT 12
33968: PUSH
33969: LD_INT 15
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: PUSH
33978: LD_VAR 0 2
33982: PUSH
33983: LD_INT 9
33985: MINUS
33986: ARRAY
33987: ST_TO_ADDR
// end ; 14 :
33988: GO 34407
33990: LD_INT 14
33992: DOUBLE
33993: EQUAL
33994: IFTRUE 33998
33996: GO 34009
33998: POP
// bc_type := b_workshop ; 15 :
33999: LD_ADDR_OWVAR 42
34003: PUSH
34004: LD_INT 2
34006: ST_TO_ADDR
34007: GO 34407
34009: LD_INT 15
34011: DOUBLE
34012: EQUAL
34013: IFTRUE 34017
34015: GO 34028
34017: POP
// bc_type := b_factory ; 16 :
34018: LD_ADDR_OWVAR 42
34022: PUSH
34023: LD_INT 3
34025: ST_TO_ADDR
34026: GO 34407
34028: LD_INT 16
34030: DOUBLE
34031: EQUAL
34032: IFTRUE 34036
34034: GO 34047
34036: POP
// bc_type := b_ext_gun ; 17 :
34037: LD_ADDR_OWVAR 42
34041: PUSH
34042: LD_INT 17
34044: ST_TO_ADDR
34045: GO 34407
34047: LD_INT 17
34049: DOUBLE
34050: EQUAL
34051: IFTRUE 34055
34053: GO 34083
34055: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34056: LD_ADDR_OWVAR 42
34060: PUSH
34061: LD_INT 19
34063: PUSH
34064: LD_INT 23
34066: PUSH
34067: LD_INT 19
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: PUSH
34075: LD_VAR 0 1
34079: ARRAY
34080: ST_TO_ADDR
34081: GO 34407
34083: LD_INT 18
34085: DOUBLE
34086: EQUAL
34087: IFTRUE 34091
34089: GO 34102
34091: POP
// bc_type := b_ext_radar ; 19 :
34092: LD_ADDR_OWVAR 42
34096: PUSH
34097: LD_INT 20
34099: ST_TO_ADDR
34100: GO 34407
34102: LD_INT 19
34104: DOUBLE
34105: EQUAL
34106: IFTRUE 34110
34108: GO 34121
34110: POP
// bc_type := b_ext_radio ; 20 :
34111: LD_ADDR_OWVAR 42
34115: PUSH
34116: LD_INT 22
34118: ST_TO_ADDR
34119: GO 34407
34121: LD_INT 20
34123: DOUBLE
34124: EQUAL
34125: IFTRUE 34129
34127: GO 34140
34129: POP
// bc_type := b_ext_siberium ; 21 :
34130: LD_ADDR_OWVAR 42
34134: PUSH
34135: LD_INT 21
34137: ST_TO_ADDR
34138: GO 34407
34140: LD_INT 21
34142: DOUBLE
34143: EQUAL
34144: IFTRUE 34148
34146: GO 34159
34148: POP
// bc_type := b_ext_computer ; 22 :
34149: LD_ADDR_OWVAR 42
34153: PUSH
34154: LD_INT 24
34156: ST_TO_ADDR
34157: GO 34407
34159: LD_INT 22
34161: DOUBLE
34162: EQUAL
34163: IFTRUE 34167
34165: GO 34178
34167: POP
// bc_type := b_ext_track ; 23 :
34168: LD_ADDR_OWVAR 42
34172: PUSH
34173: LD_INT 16
34175: ST_TO_ADDR
34176: GO 34407
34178: LD_INT 23
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34186
34184: GO 34197
34186: POP
// bc_type := b_ext_laser ; 24 :
34187: LD_ADDR_OWVAR 42
34191: PUSH
34192: LD_INT 25
34194: ST_TO_ADDR
34195: GO 34407
34197: LD_INT 24
34199: DOUBLE
34200: EQUAL
34201: IFTRUE 34205
34203: GO 34216
34205: POP
// bc_type := b_control_tower ; 25 :
34206: LD_ADDR_OWVAR 42
34210: PUSH
34211: LD_INT 36
34213: ST_TO_ADDR
34214: GO 34407
34216: LD_INT 25
34218: DOUBLE
34219: EQUAL
34220: IFTRUE 34224
34222: GO 34235
34224: POP
// bc_type := b_breastwork ; 26 :
34225: LD_ADDR_OWVAR 42
34229: PUSH
34230: LD_INT 31
34232: ST_TO_ADDR
34233: GO 34407
34235: LD_INT 26
34237: DOUBLE
34238: EQUAL
34239: IFTRUE 34243
34241: GO 34254
34243: POP
// bc_type := b_bunker ; 27 :
34244: LD_ADDR_OWVAR 42
34248: PUSH
34249: LD_INT 32
34251: ST_TO_ADDR
34252: GO 34407
34254: LD_INT 27
34256: DOUBLE
34257: EQUAL
34258: IFTRUE 34262
34260: GO 34273
34262: POP
// bc_type := b_turret ; 28 :
34263: LD_ADDR_OWVAR 42
34267: PUSH
34268: LD_INT 33
34270: ST_TO_ADDR
34271: GO 34407
34273: LD_INT 28
34275: DOUBLE
34276: EQUAL
34277: IFTRUE 34281
34279: GO 34292
34281: POP
// bc_type := b_armoury ; 29 :
34282: LD_ADDR_OWVAR 42
34286: PUSH
34287: LD_INT 4
34289: ST_TO_ADDR
34290: GO 34407
34292: LD_INT 29
34294: DOUBLE
34295: EQUAL
34296: IFTRUE 34300
34298: GO 34311
34300: POP
// bc_type := b_barracks ; 30 :
34301: LD_ADDR_OWVAR 42
34305: PUSH
34306: LD_INT 5
34308: ST_TO_ADDR
34309: GO 34407
34311: LD_INT 30
34313: DOUBLE
34314: EQUAL
34315: IFTRUE 34319
34317: GO 34330
34319: POP
// bc_type := b_solar_power ; 31 :
34320: LD_ADDR_OWVAR 42
34324: PUSH
34325: LD_INT 27
34327: ST_TO_ADDR
34328: GO 34407
34330: LD_INT 31
34332: DOUBLE
34333: EQUAL
34334: IFTRUE 34338
34336: GO 34349
34338: POP
// bc_type := b_oil_power ; 32 :
34339: LD_ADDR_OWVAR 42
34343: PUSH
34344: LD_INT 26
34346: ST_TO_ADDR
34347: GO 34407
34349: LD_INT 32
34351: DOUBLE
34352: EQUAL
34353: IFTRUE 34357
34355: GO 34368
34357: POP
// bc_type := b_siberite_power ; 33 :
34358: LD_ADDR_OWVAR 42
34362: PUSH
34363: LD_INT 28
34365: ST_TO_ADDR
34366: GO 34407
34368: LD_INT 33
34370: DOUBLE
34371: EQUAL
34372: IFTRUE 34376
34374: GO 34387
34376: POP
// bc_type := b_oil_mine ; 34 :
34377: LD_ADDR_OWVAR 42
34381: PUSH
34382: LD_INT 29
34384: ST_TO_ADDR
34385: GO 34407
34387: LD_INT 34
34389: DOUBLE
34390: EQUAL
34391: IFTRUE 34395
34393: GO 34406
34395: POP
// bc_type := b_siberite_mine ; end ;
34396: LD_ADDR_OWVAR 42
34400: PUSH
34401: LD_INT 30
34403: ST_TO_ADDR
34404: GO 34407
34406: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34407: LD_ADDR_VAR 0 8
34411: PUSH
34412: LD_VAR 0 5
34416: PPUSH
34417: LD_VAR 0 6
34421: PPUSH
34422: LD_VAR 0 3
34426: PPUSH
34427: CALL_OW 47
34431: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34432: LD_OWVAR 42
34436: PUSH
34437: LD_INT 32
34439: PUSH
34440: LD_INT 33
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: IN
34447: IFFALSE 34463
// PlaceWeaponTurret ( b , weapon ) ;
34449: LD_VAR 0 8
34453: PPUSH
34454: LD_VAR 0 4
34458: PPUSH
34459: CALL_OW 431
// end ;
34463: LD_VAR 0 7
34467: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34468: LD_INT 0
34470: PPUSH
34471: PPUSH
34472: PPUSH
34473: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34474: LD_ADDR_VAR 0 4
34478: PUSH
34479: LD_INT 22
34481: PUSH
34482: LD_OWVAR 2
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 2
34493: PUSH
34494: LD_INT 30
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 30
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PPUSH
34523: CALL_OW 69
34527: ST_TO_ADDR
// if not tmp then
34528: LD_VAR 0 4
34532: NOT
34533: IFFALSE 34537
// exit ;
34535: GO 34596
// for i in tmp do
34537: LD_ADDR_VAR 0 2
34541: PUSH
34542: LD_VAR 0 4
34546: PUSH
34547: FOR_IN
34548: IFFALSE 34594
// for j = 1 to 3 do
34550: LD_ADDR_VAR 0 3
34554: PUSH
34555: DOUBLE
34556: LD_INT 1
34558: DEC
34559: ST_TO_ADDR
34560: LD_INT 3
34562: PUSH
34563: FOR_TO
34564: IFFALSE 34590
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34566: LD_VAR 0 2
34570: PPUSH
34571: CALL_OW 274
34575: PPUSH
34576: LD_VAR 0 3
34580: PPUSH
34581: LD_INT 99999
34583: PPUSH
34584: CALL_OW 277
34588: GO 34563
34590: POP
34591: POP
34592: GO 34547
34594: POP
34595: POP
// end ;
34596: LD_VAR 0 1
34600: RET
// export function hHackSetLevel10 ; var i , j ; begin
34601: LD_INT 0
34603: PPUSH
34604: PPUSH
34605: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34606: LD_ADDR_VAR 0 2
34610: PUSH
34611: LD_INT 21
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PPUSH
34621: CALL_OW 69
34625: PUSH
34626: FOR_IN
34627: IFFALSE 34679
// if IsSelected ( i ) then
34629: LD_VAR 0 2
34633: PPUSH
34634: CALL_OW 306
34638: IFFALSE 34677
// begin for j := 1 to 4 do
34640: LD_ADDR_VAR 0 3
34644: PUSH
34645: DOUBLE
34646: LD_INT 1
34648: DEC
34649: ST_TO_ADDR
34650: LD_INT 4
34652: PUSH
34653: FOR_TO
34654: IFFALSE 34675
// SetSkill ( i , j , 10 ) ;
34656: LD_VAR 0 2
34660: PPUSH
34661: LD_VAR 0 3
34665: PPUSH
34666: LD_INT 10
34668: PPUSH
34669: CALL_OW 237
34673: GO 34653
34675: POP
34676: POP
// end ;
34677: GO 34626
34679: POP
34680: POP
// end ;
34681: LD_VAR 0 1
34685: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34686: LD_INT 0
34688: PPUSH
34689: PPUSH
34690: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34691: LD_ADDR_VAR 0 2
34695: PUSH
34696: LD_INT 22
34698: PUSH
34699: LD_OWVAR 2
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 21
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PPUSH
34722: CALL_OW 69
34726: PUSH
34727: FOR_IN
34728: IFFALSE 34769
// begin for j := 1 to 4 do
34730: LD_ADDR_VAR 0 3
34734: PUSH
34735: DOUBLE
34736: LD_INT 1
34738: DEC
34739: ST_TO_ADDR
34740: LD_INT 4
34742: PUSH
34743: FOR_TO
34744: IFFALSE 34765
// SetSkill ( i , j , 10 ) ;
34746: LD_VAR 0 2
34750: PPUSH
34751: LD_VAR 0 3
34755: PPUSH
34756: LD_INT 10
34758: PPUSH
34759: CALL_OW 237
34763: GO 34743
34765: POP
34766: POP
// end ;
34767: GO 34727
34769: POP
34770: POP
// end ;
34771: LD_VAR 0 1
34775: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34776: LD_INT 0
34778: PPUSH
// uc_side := your_side ;
34779: LD_ADDR_OWVAR 20
34783: PUSH
34784: LD_OWVAR 2
34788: ST_TO_ADDR
// uc_nation := nation ;
34789: LD_ADDR_OWVAR 21
34793: PUSH
34794: LD_VAR 0 1
34798: ST_TO_ADDR
// InitHc ;
34799: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34803: LD_INT 0
34805: PPUSH
34806: LD_VAR 0 2
34810: PPUSH
34811: LD_VAR 0 3
34815: PPUSH
34816: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34820: LD_VAR 0 4
34824: PPUSH
34825: LD_VAR 0 5
34829: PPUSH
34830: CALL_OW 428
34834: PUSH
34835: LD_INT 0
34837: EQUAL
34838: IFFALSE 34862
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34840: CALL_OW 44
34844: PPUSH
34845: LD_VAR 0 4
34849: PPUSH
34850: LD_VAR 0 5
34854: PPUSH
34855: LD_INT 1
34857: PPUSH
34858: CALL_OW 48
// end ;
34862: LD_VAR 0 6
34866: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34867: LD_INT 0
34869: PPUSH
34870: PPUSH
// uc_side := your_side ;
34871: LD_ADDR_OWVAR 20
34875: PUSH
34876: LD_OWVAR 2
34880: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34881: LD_VAR 0 1
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: LD_INT 2
34891: PUSH
34892: LD_INT 3
34894: PUSH
34895: LD_INT 4
34897: PUSH
34898: LD_INT 5
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: IN
34908: IFFALSE 34920
// uc_nation := nation_american else
34910: LD_ADDR_OWVAR 21
34914: PUSH
34915: LD_INT 1
34917: ST_TO_ADDR
34918: GO 34963
// if chassis in [ 11 , 12 , 13 , 14 ] then
34920: LD_VAR 0 1
34924: PUSH
34925: LD_INT 11
34927: PUSH
34928: LD_INT 12
34930: PUSH
34931: LD_INT 13
34933: PUSH
34934: LD_INT 14
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: IN
34943: IFFALSE 34955
// uc_nation := nation_arabian else
34945: LD_ADDR_OWVAR 21
34949: PUSH
34950: LD_INT 2
34952: ST_TO_ADDR
34953: GO 34963
// uc_nation := nation_russian ;
34955: LD_ADDR_OWVAR 21
34959: PUSH
34960: LD_INT 3
34962: ST_TO_ADDR
// vc_chassis := chassis ;
34963: LD_ADDR_OWVAR 37
34967: PUSH
34968: LD_VAR 0 1
34972: ST_TO_ADDR
// vc_engine := engine ;
34973: LD_ADDR_OWVAR 39
34977: PUSH
34978: LD_VAR 0 2
34982: ST_TO_ADDR
// vc_control := control ;
34983: LD_ADDR_OWVAR 38
34987: PUSH
34988: LD_VAR 0 3
34992: ST_TO_ADDR
// vc_weapon := weapon ;
34993: LD_ADDR_OWVAR 40
34997: PUSH
34998: LD_VAR 0 4
35002: ST_TO_ADDR
// un := CreateVehicle ;
35003: LD_ADDR_VAR 0 8
35007: PUSH
35008: CALL_OW 45
35012: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35013: LD_VAR 0 8
35017: PPUSH
35018: LD_INT 0
35020: PPUSH
35021: LD_INT 5
35023: PPUSH
35024: CALL_OW 12
35028: PPUSH
35029: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35033: LD_VAR 0 8
35037: PPUSH
35038: LD_VAR 0 5
35042: PPUSH
35043: LD_VAR 0 6
35047: PPUSH
35048: LD_INT 1
35050: PPUSH
35051: CALL_OW 48
// end ;
35055: LD_VAR 0 7
35059: RET
// export hInvincible ; every 1 do
35060: GO 35062
35062: DISABLE
// hInvincible := [ ] ;
35063: LD_ADDR_EXP 124
35067: PUSH
35068: EMPTY
35069: ST_TO_ADDR
35070: END
// every 10 do var i ;
35071: GO 35073
35073: DISABLE
35074: LD_INT 0
35076: PPUSH
// begin enable ;
35077: ENABLE
// if not hInvincible then
35078: LD_EXP 124
35082: NOT
35083: IFFALSE 35087
// exit ;
35085: GO 35131
// for i in hInvincible do
35087: LD_ADDR_VAR 0 1
35091: PUSH
35092: LD_EXP 124
35096: PUSH
35097: FOR_IN
35098: IFFALSE 35129
// if GetLives ( i ) < 1000 then
35100: LD_VAR 0 1
35104: PPUSH
35105: CALL_OW 256
35109: PUSH
35110: LD_INT 1000
35112: LESS
35113: IFFALSE 35127
// SetLives ( i , 1000 ) ;
35115: LD_VAR 0 1
35119: PPUSH
35120: LD_INT 1000
35122: PPUSH
35123: CALL_OW 234
35127: GO 35097
35129: POP
35130: POP
// end ;
35131: PPOPN 1
35133: END
// export function hHackInvincible ; var i ; begin
35134: LD_INT 0
35136: PPUSH
35137: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35138: LD_ADDR_VAR 0 2
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 21
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 21
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: PPUSH
35171: CALL_OW 69
35175: PUSH
35176: FOR_IN
35177: IFFALSE 35238
// if IsSelected ( i ) then
35179: LD_VAR 0 2
35183: PPUSH
35184: CALL_OW 306
35188: IFFALSE 35236
// begin if i in hInvincible then
35190: LD_VAR 0 2
35194: PUSH
35195: LD_EXP 124
35199: IN
35200: IFFALSE 35220
// hInvincible := hInvincible diff i else
35202: LD_ADDR_EXP 124
35206: PUSH
35207: LD_EXP 124
35211: PUSH
35212: LD_VAR 0 2
35216: DIFF
35217: ST_TO_ADDR
35218: GO 35236
// hInvincible := hInvincible union i ;
35220: LD_ADDR_EXP 124
35224: PUSH
35225: LD_EXP 124
35229: PUSH
35230: LD_VAR 0 2
35234: UNION
35235: ST_TO_ADDR
// end ;
35236: GO 35176
35238: POP
35239: POP
// end ;
35240: LD_VAR 0 1
35244: RET
// export function hHackInvisible ; var i , j ; begin
35245: LD_INT 0
35247: PPUSH
35248: PPUSH
35249: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35250: LD_ADDR_VAR 0 2
35254: PUSH
35255: LD_INT 21
35257: PUSH
35258: LD_INT 1
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PPUSH
35265: CALL_OW 69
35269: PUSH
35270: FOR_IN
35271: IFFALSE 35295
// if IsSelected ( i ) then
35273: LD_VAR 0 2
35277: PPUSH
35278: CALL_OW 306
35282: IFFALSE 35293
// ComForceInvisible ( i ) ;
35284: LD_VAR 0 2
35288: PPUSH
35289: CALL_OW 496
35293: GO 35270
35295: POP
35296: POP
// end ;
35297: LD_VAR 0 1
35301: RET
// export function hHackChangeYourSide ; begin
35302: LD_INT 0
35304: PPUSH
// if your_side = 8 then
35305: LD_OWVAR 2
35309: PUSH
35310: LD_INT 8
35312: EQUAL
35313: IFFALSE 35325
// your_side := 0 else
35315: LD_ADDR_OWVAR 2
35319: PUSH
35320: LD_INT 0
35322: ST_TO_ADDR
35323: GO 35339
// your_side := your_side + 1 ;
35325: LD_ADDR_OWVAR 2
35329: PUSH
35330: LD_OWVAR 2
35334: PUSH
35335: LD_INT 1
35337: PLUS
35338: ST_TO_ADDR
// end ;
35339: LD_VAR 0 1
35343: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35344: LD_INT 0
35346: PPUSH
35347: PPUSH
35348: PPUSH
// for i in all_units do
35349: LD_ADDR_VAR 0 2
35353: PUSH
35354: LD_OWVAR 3
35358: PUSH
35359: FOR_IN
35360: IFFALSE 35438
// if IsSelected ( i ) then
35362: LD_VAR 0 2
35366: PPUSH
35367: CALL_OW 306
35371: IFFALSE 35436
// begin j := GetSide ( i ) ;
35373: LD_ADDR_VAR 0 3
35377: PUSH
35378: LD_VAR 0 2
35382: PPUSH
35383: CALL_OW 255
35387: ST_TO_ADDR
// if j = 8 then
35388: LD_VAR 0 3
35392: PUSH
35393: LD_INT 8
35395: EQUAL
35396: IFFALSE 35408
// j := 0 else
35398: LD_ADDR_VAR 0 3
35402: PUSH
35403: LD_INT 0
35405: ST_TO_ADDR
35406: GO 35422
// j := j + 1 ;
35408: LD_ADDR_VAR 0 3
35412: PUSH
35413: LD_VAR 0 3
35417: PUSH
35418: LD_INT 1
35420: PLUS
35421: ST_TO_ADDR
// SetSide ( i , j ) ;
35422: LD_VAR 0 2
35426: PPUSH
35427: LD_VAR 0 3
35431: PPUSH
35432: CALL_OW 235
// end ;
35436: GO 35359
35438: POP
35439: POP
// end ;
35440: LD_VAR 0 1
35444: RET
// export function hHackFog ; begin
35445: LD_INT 0
35447: PPUSH
// FogOff ( true ) ;
35448: LD_INT 1
35450: PPUSH
35451: CALL_OW 344
// end ;
35455: LD_VAR 0 1
35459: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35460: LD_INT 0
35462: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35463: LD_VAR 0 1
35467: PPUSH
35468: LD_VAR 0 2
35472: PPUSH
35473: LD_VAR 0 3
35477: PPUSH
35478: LD_INT 1
35480: PPUSH
35481: LD_INT 1
35483: PPUSH
35484: CALL_OW 483
// CenterOnXY ( x , y ) ;
35488: LD_VAR 0 2
35492: PPUSH
35493: LD_VAR 0 3
35497: PPUSH
35498: CALL_OW 84
// end ;
35502: LD_VAR 0 4
35506: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35507: LD_INT 0
35509: PPUSH
35510: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35511: LD_VAR 0 1
35515: NOT
35516: PUSH
35517: LD_VAR 0 2
35521: PPUSH
35522: LD_VAR 0 3
35526: PPUSH
35527: CALL_OW 488
35531: NOT
35532: OR
35533: PUSH
35534: LD_VAR 0 1
35538: PPUSH
35539: CALL_OW 266
35543: PUSH
35544: LD_INT 3
35546: NONEQUAL
35547: PUSH
35548: LD_VAR 0 1
35552: PPUSH
35553: CALL_OW 247
35557: PUSH
35558: LD_INT 1
35560: EQUAL
35561: NOT
35562: AND
35563: OR
35564: IFFALSE 35568
// exit ;
35566: GO 35717
// if GetType ( factory ) = unit_human then
35568: LD_VAR 0 1
35572: PPUSH
35573: CALL_OW 247
35577: PUSH
35578: LD_INT 1
35580: EQUAL
35581: IFFALSE 35598
// factory := IsInUnit ( factory ) ;
35583: LD_ADDR_VAR 0 1
35587: PUSH
35588: LD_VAR 0 1
35592: PPUSH
35593: CALL_OW 310
35597: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35598: LD_VAR 0 1
35602: PPUSH
35603: CALL_OW 266
35607: PUSH
35608: LD_INT 3
35610: NONEQUAL
35611: IFFALSE 35615
// exit ;
35613: GO 35717
// if HexInfo ( x , y ) = factory then
35615: LD_VAR 0 2
35619: PPUSH
35620: LD_VAR 0 3
35624: PPUSH
35625: CALL_OW 428
35629: PUSH
35630: LD_VAR 0 1
35634: EQUAL
35635: IFFALSE 35662
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35637: LD_ADDR_EXP 125
35641: PUSH
35642: LD_EXP 125
35646: PPUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: LD_INT 0
35654: PPUSH
35655: CALL_OW 1
35659: ST_TO_ADDR
35660: GO 35713
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35662: LD_ADDR_EXP 125
35666: PUSH
35667: LD_EXP 125
35671: PPUSH
35672: LD_VAR 0 1
35676: PPUSH
35677: LD_VAR 0 1
35681: PPUSH
35682: CALL_OW 255
35686: PUSH
35687: LD_VAR 0 1
35691: PUSH
35692: LD_VAR 0 2
35696: PUSH
35697: LD_VAR 0 3
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: PPUSH
35708: CALL_OW 1
35712: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35713: CALL 35722 0 0
// end ;
35717: LD_VAR 0 4
35721: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35722: LD_INT 0
35724: PPUSH
35725: PPUSH
35726: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35727: LD_STRING resetFactoryWaypoint();
35729: PPUSH
35730: CALL_OW 559
// if factoryWaypoints then
35734: LD_EXP 125
35738: IFFALSE 35864
// begin list := PrepareArray ( factoryWaypoints ) ;
35740: LD_ADDR_VAR 0 3
35744: PUSH
35745: LD_EXP 125
35749: PPUSH
35750: CALL 82296 0 1
35754: ST_TO_ADDR
// for i := 1 to list do
35755: LD_ADDR_VAR 0 2
35759: PUSH
35760: DOUBLE
35761: LD_INT 1
35763: DEC
35764: ST_TO_ADDR
35765: LD_VAR 0 3
35769: PUSH
35770: FOR_TO
35771: IFFALSE 35862
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35773: LD_STRING setFactoryWaypointXY(
35775: PUSH
35776: LD_VAR 0 3
35780: PUSH
35781: LD_VAR 0 2
35785: ARRAY
35786: PUSH
35787: LD_INT 1
35789: ARRAY
35790: STR
35791: PUSH
35792: LD_STRING ,
35794: STR
35795: PUSH
35796: LD_VAR 0 3
35800: PUSH
35801: LD_VAR 0 2
35805: ARRAY
35806: PUSH
35807: LD_INT 2
35809: ARRAY
35810: STR
35811: PUSH
35812: LD_STRING ,
35814: STR
35815: PUSH
35816: LD_VAR 0 3
35820: PUSH
35821: LD_VAR 0 2
35825: ARRAY
35826: PUSH
35827: LD_INT 3
35829: ARRAY
35830: STR
35831: PUSH
35832: LD_STRING ,
35834: STR
35835: PUSH
35836: LD_VAR 0 3
35840: PUSH
35841: LD_VAR 0 2
35845: ARRAY
35846: PUSH
35847: LD_INT 4
35849: ARRAY
35850: STR
35851: PUSH
35852: LD_STRING )
35854: STR
35855: PPUSH
35856: CALL_OW 559
35860: GO 35770
35862: POP
35863: POP
// end ; end ;
35864: LD_VAR 0 1
35868: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35869: LD_INT 0
35871: PPUSH
// if HexInfo ( x , y ) = warehouse then
35872: LD_VAR 0 2
35876: PPUSH
35877: LD_VAR 0 3
35881: PPUSH
35882: CALL_OW 428
35886: PUSH
35887: LD_VAR 0 1
35891: EQUAL
35892: IFFALSE 35919
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35894: LD_ADDR_EXP 126
35898: PUSH
35899: LD_EXP 126
35903: PPUSH
35904: LD_VAR 0 1
35908: PPUSH
35909: LD_INT 0
35911: PPUSH
35912: CALL_OW 1
35916: ST_TO_ADDR
35917: GO 35970
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35919: LD_ADDR_EXP 126
35923: PUSH
35924: LD_EXP 126
35928: PPUSH
35929: LD_VAR 0 1
35933: PPUSH
35934: LD_VAR 0 1
35938: PPUSH
35939: CALL_OW 255
35943: PUSH
35944: LD_VAR 0 1
35948: PUSH
35949: LD_VAR 0 2
35953: PUSH
35954: LD_VAR 0 3
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: PPUSH
35965: CALL_OW 1
35969: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35970: CALL 35979 0 0
// end ;
35974: LD_VAR 0 4
35978: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35979: LD_INT 0
35981: PPUSH
35982: PPUSH
35983: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35984: LD_STRING resetWarehouseGatheringPoints();
35986: PPUSH
35987: CALL_OW 559
// if warehouseGatheringPoints then
35991: LD_EXP 126
35995: IFFALSE 36121
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35997: LD_ADDR_VAR 0 3
36001: PUSH
36002: LD_EXP 126
36006: PPUSH
36007: CALL 82296 0 1
36011: ST_TO_ADDR
// for i := 1 to list do
36012: LD_ADDR_VAR 0 2
36016: PUSH
36017: DOUBLE
36018: LD_INT 1
36020: DEC
36021: ST_TO_ADDR
36022: LD_VAR 0 3
36026: PUSH
36027: FOR_TO
36028: IFFALSE 36119
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36030: LD_STRING setWarehouseGatheringPointXY(
36032: PUSH
36033: LD_VAR 0 3
36037: PUSH
36038: LD_VAR 0 2
36042: ARRAY
36043: PUSH
36044: LD_INT 1
36046: ARRAY
36047: STR
36048: PUSH
36049: LD_STRING ,
36051: STR
36052: PUSH
36053: LD_VAR 0 3
36057: PUSH
36058: LD_VAR 0 2
36062: ARRAY
36063: PUSH
36064: LD_INT 2
36066: ARRAY
36067: STR
36068: PUSH
36069: LD_STRING ,
36071: STR
36072: PUSH
36073: LD_VAR 0 3
36077: PUSH
36078: LD_VAR 0 2
36082: ARRAY
36083: PUSH
36084: LD_INT 3
36086: ARRAY
36087: STR
36088: PUSH
36089: LD_STRING ,
36091: STR
36092: PUSH
36093: LD_VAR 0 3
36097: PUSH
36098: LD_VAR 0 2
36102: ARRAY
36103: PUSH
36104: LD_INT 4
36106: ARRAY
36107: STR
36108: PUSH
36109: LD_STRING )
36111: STR
36112: PPUSH
36113: CALL_OW 559
36117: GO 36027
36119: POP
36120: POP
// end ; end ;
36121: LD_VAR 0 1
36125: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36126: LD_EXP 126
36130: IFFALSE 36817
36132: GO 36134
36134: DISABLE
36135: LD_INT 0
36137: PPUSH
36138: PPUSH
36139: PPUSH
36140: PPUSH
36141: PPUSH
36142: PPUSH
36143: PPUSH
36144: PPUSH
36145: PPUSH
// begin enable ;
36146: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36147: LD_ADDR_VAR 0 3
36151: PUSH
36152: LD_EXP 126
36156: PPUSH
36157: CALL 82296 0 1
36161: ST_TO_ADDR
// if not list then
36162: LD_VAR 0 3
36166: NOT
36167: IFFALSE 36171
// exit ;
36169: GO 36817
// for i := 1 to list do
36171: LD_ADDR_VAR 0 1
36175: PUSH
36176: DOUBLE
36177: LD_INT 1
36179: DEC
36180: ST_TO_ADDR
36181: LD_VAR 0 3
36185: PUSH
36186: FOR_TO
36187: IFFALSE 36815
// begin depot := list [ i ] [ 2 ] ;
36189: LD_ADDR_VAR 0 8
36193: PUSH
36194: LD_VAR 0 3
36198: PUSH
36199: LD_VAR 0 1
36203: ARRAY
36204: PUSH
36205: LD_INT 2
36207: ARRAY
36208: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36209: LD_ADDR_VAR 0 5
36213: PUSH
36214: LD_VAR 0 3
36218: PUSH
36219: LD_VAR 0 1
36223: ARRAY
36224: PUSH
36225: LD_INT 1
36227: ARRAY
36228: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36229: LD_VAR 0 8
36233: PPUSH
36234: CALL_OW 301
36238: PUSH
36239: LD_VAR 0 5
36243: PUSH
36244: LD_VAR 0 8
36248: PPUSH
36249: CALL_OW 255
36253: NONEQUAL
36254: OR
36255: IFFALSE 36284
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36257: LD_ADDR_EXP 126
36261: PUSH
36262: LD_EXP 126
36266: PPUSH
36267: LD_VAR 0 8
36271: PPUSH
36272: LD_INT 0
36274: PPUSH
36275: CALL_OW 1
36279: ST_TO_ADDR
// exit ;
36280: POP
36281: POP
36282: GO 36817
// end ; x := list [ i ] [ 3 ] ;
36284: LD_ADDR_VAR 0 6
36288: PUSH
36289: LD_VAR 0 3
36293: PUSH
36294: LD_VAR 0 1
36298: ARRAY
36299: PUSH
36300: LD_INT 3
36302: ARRAY
36303: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36304: LD_ADDR_VAR 0 7
36308: PUSH
36309: LD_VAR 0 3
36313: PUSH
36314: LD_VAR 0 1
36318: ARRAY
36319: PUSH
36320: LD_INT 4
36322: ARRAY
36323: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36324: LD_ADDR_VAR 0 9
36328: PUSH
36329: LD_VAR 0 6
36333: PPUSH
36334: LD_VAR 0 7
36338: PPUSH
36339: LD_INT 16
36341: PPUSH
36342: CALL 80880 0 3
36346: ST_TO_ADDR
// if not cratesNearbyPoint then
36347: LD_VAR 0 9
36351: NOT
36352: IFFALSE 36358
// exit ;
36354: POP
36355: POP
36356: GO 36817
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36358: LD_ADDR_VAR 0 4
36362: PUSH
36363: LD_INT 22
36365: PUSH
36366: LD_VAR 0 5
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 3
36377: PUSH
36378: LD_INT 60
36380: PUSH
36381: EMPTY
36382: LIST
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 91
36390: PUSH
36391: LD_VAR 0 8
36395: PUSH
36396: LD_INT 6
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: LD_INT 25
36409: PUSH
36410: LD_INT 2
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 25
36419: PUSH
36420: LD_INT 16
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: LIST
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: PPUSH
36438: CALL_OW 69
36442: PUSH
36443: LD_VAR 0 8
36447: PPUSH
36448: CALL_OW 313
36452: PPUSH
36453: LD_INT 3
36455: PUSH
36456: LD_INT 60
36458: PUSH
36459: EMPTY
36460: LIST
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: LD_INT 25
36471: PUSH
36472: LD_INT 2
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 25
36481: PUSH
36482: LD_INT 16
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PPUSH
36498: CALL_OW 72
36502: UNION
36503: ST_TO_ADDR
// if tmp then
36504: LD_VAR 0 4
36508: IFFALSE 36588
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36510: LD_ADDR_VAR 0 4
36514: PUSH
36515: LD_VAR 0 4
36519: PPUSH
36520: LD_INT 3
36522: PPUSH
36523: CALL 78847 0 2
36527: ST_TO_ADDR
// for j in tmp do
36528: LD_ADDR_VAR 0 2
36532: PUSH
36533: LD_VAR 0 4
36537: PUSH
36538: FOR_IN
36539: IFFALSE 36582
// begin if IsInUnit ( j ) then
36541: LD_VAR 0 2
36545: PPUSH
36546: CALL_OW 310
36550: IFFALSE 36561
// ComExit ( j ) ;
36552: LD_VAR 0 2
36556: PPUSH
36557: CALL 78930 0 1
// AddComCollect ( j , x , y ) ;
36561: LD_VAR 0 2
36565: PPUSH
36566: LD_VAR 0 6
36570: PPUSH
36571: LD_VAR 0 7
36575: PPUSH
36576: CALL_OW 177
// end ;
36580: GO 36538
36582: POP
36583: POP
// exit ;
36584: POP
36585: POP
36586: GO 36817
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36588: LD_ADDR_VAR 0 4
36592: PUSH
36593: LD_INT 22
36595: PUSH
36596: LD_VAR 0 5
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 91
36607: PUSH
36608: LD_VAR 0 8
36612: PUSH
36613: LD_INT 8
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 2
36623: PUSH
36624: LD_INT 34
36626: PUSH
36627: LD_INT 12
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 34
36636: PUSH
36637: LD_INT 51
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 34
36646: PUSH
36647: LD_INT 32
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 34
36656: PUSH
36657: LD_EXP 50
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: PPUSH
36678: CALL_OW 69
36682: ST_TO_ADDR
// if tmp then
36683: LD_VAR 0 4
36687: IFFALSE 36813
// begin for j in tmp do
36689: LD_ADDR_VAR 0 2
36693: PUSH
36694: LD_VAR 0 4
36698: PUSH
36699: FOR_IN
36700: IFFALSE 36811
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36702: LD_VAR 0 2
36706: PPUSH
36707: CALL_OW 262
36711: PUSH
36712: LD_INT 3
36714: EQUAL
36715: PUSH
36716: LD_VAR 0 2
36720: PPUSH
36721: CALL_OW 261
36725: PUSH
36726: LD_INT 20
36728: GREATER
36729: OR
36730: PUSH
36731: LD_VAR 0 2
36735: PPUSH
36736: CALL_OW 314
36740: NOT
36741: AND
36742: PUSH
36743: LD_VAR 0 2
36747: PPUSH
36748: CALL_OW 263
36752: PUSH
36753: LD_INT 1
36755: NONEQUAL
36756: PUSH
36757: LD_VAR 0 2
36761: PPUSH
36762: CALL_OW 311
36766: OR
36767: AND
36768: IFFALSE 36809
// begin ComCollect ( j , x , y ) ;
36770: LD_VAR 0 2
36774: PPUSH
36775: LD_VAR 0 6
36779: PPUSH
36780: LD_VAR 0 7
36784: PPUSH
36785: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36789: LD_VAR 0 2
36793: PPUSH
36794: LD_VAR 0 8
36798: PPUSH
36799: CALL_OW 172
// exit ;
36803: POP
36804: POP
36805: POP
36806: POP
36807: GO 36817
// end ;
36809: GO 36699
36811: POP
36812: POP
// end ; end ;
36813: GO 36186
36815: POP
36816: POP
// end ; end_of_file
36817: PPOPN 9
36819: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36820: LD_INT 0
36822: PPUSH
36823: PPUSH
36824: PPUSH
36825: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36826: LD_VAR 0 1
36830: PPUSH
36831: CALL_OW 264
36835: PUSH
36836: LD_EXP 53
36840: EQUAL
36841: IFFALSE 36913
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36843: LD_INT 68
36845: PPUSH
36846: LD_VAR 0 1
36850: PPUSH
36851: CALL_OW 255
36855: PPUSH
36856: CALL_OW 321
36860: PUSH
36861: LD_INT 2
36863: EQUAL
36864: IFFALSE 36876
// eff := 70 else
36866: LD_ADDR_VAR 0 4
36870: PUSH
36871: LD_INT 70
36873: ST_TO_ADDR
36874: GO 36884
// eff := 30 ;
36876: LD_ADDR_VAR 0 4
36880: PUSH
36881: LD_INT 30
36883: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36884: LD_VAR 0 1
36888: PPUSH
36889: CALL_OW 250
36893: PPUSH
36894: LD_VAR 0 1
36898: PPUSH
36899: CALL_OW 251
36903: PPUSH
36904: LD_VAR 0 4
36908: PPUSH
36909: CALL_OW 495
// end ; end ;
36913: LD_VAR 0 2
36917: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36918: LD_INT 0
36920: PPUSH
// end ;
36921: LD_VAR 0 4
36925: RET
// export function SOS_Command ( cmd ) ; begin
36926: LD_INT 0
36928: PPUSH
// end ;
36929: LD_VAR 0 2
36933: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36934: LD_INT 0
36936: PPUSH
// end ;
36937: LD_VAR 0 6
36941: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36942: LD_INT 0
36944: PPUSH
36945: PPUSH
// if not vehicle or not factory then
36946: LD_VAR 0 1
36950: NOT
36951: PUSH
36952: LD_VAR 0 2
36956: NOT
36957: OR
36958: IFFALSE 36962
// exit ;
36960: GO 37193
// if factoryWaypoints >= factory then
36962: LD_EXP 125
36966: PUSH
36967: LD_VAR 0 2
36971: GREATEREQUAL
36972: IFFALSE 37193
// if factoryWaypoints [ factory ] then
36974: LD_EXP 125
36978: PUSH
36979: LD_VAR 0 2
36983: ARRAY
36984: IFFALSE 37193
// begin if GetControl ( vehicle ) = control_manual then
36986: LD_VAR 0 1
36990: PPUSH
36991: CALL_OW 263
36995: PUSH
36996: LD_INT 1
36998: EQUAL
36999: IFFALSE 37080
// begin driver := IsDrivenBy ( vehicle ) ;
37001: LD_ADDR_VAR 0 4
37005: PUSH
37006: LD_VAR 0 1
37010: PPUSH
37011: CALL_OW 311
37015: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37016: LD_VAR 0 4
37020: PPUSH
37021: LD_EXP 125
37025: PUSH
37026: LD_VAR 0 2
37030: ARRAY
37031: PUSH
37032: LD_INT 3
37034: ARRAY
37035: PPUSH
37036: LD_EXP 125
37040: PUSH
37041: LD_VAR 0 2
37045: ARRAY
37046: PUSH
37047: LD_INT 4
37049: ARRAY
37050: PPUSH
37051: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37055: LD_VAR 0 4
37059: PPUSH
37060: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37064: LD_VAR 0 4
37068: PPUSH
37069: LD_VAR 0 2
37073: PPUSH
37074: CALL_OW 180
// end else
37078: GO 37193
// if GetControl ( vehicle ) = control_remote then
37080: LD_VAR 0 1
37084: PPUSH
37085: CALL_OW 263
37089: PUSH
37090: LD_INT 2
37092: EQUAL
37093: IFFALSE 37154
// begin wait ( 0 0$2 ) ;
37095: LD_INT 70
37097: PPUSH
37098: CALL_OW 67
// if Connect ( vehicle ) then
37102: LD_VAR 0 1
37106: PPUSH
37107: CALL 49241 0 1
37111: IFFALSE 37152
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37113: LD_VAR 0 1
37117: PPUSH
37118: LD_EXP 125
37122: PUSH
37123: LD_VAR 0 2
37127: ARRAY
37128: PUSH
37129: LD_INT 3
37131: ARRAY
37132: PPUSH
37133: LD_EXP 125
37137: PUSH
37138: LD_VAR 0 2
37142: ARRAY
37143: PUSH
37144: LD_INT 4
37146: ARRAY
37147: PPUSH
37148: CALL_OW 171
// end else
37152: GO 37193
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37154: LD_VAR 0 1
37158: PPUSH
37159: LD_EXP 125
37163: PUSH
37164: LD_VAR 0 2
37168: ARRAY
37169: PUSH
37170: LD_INT 3
37172: ARRAY
37173: PPUSH
37174: LD_EXP 125
37178: PUSH
37179: LD_VAR 0 2
37183: ARRAY
37184: PUSH
37185: LD_INT 4
37187: ARRAY
37188: PPUSH
37189: CALL_OW 171
// end ; end ;
37193: LD_VAR 0 3
37197: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37198: LD_INT 0
37200: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37201: LD_VAR 0 1
37205: PUSH
37206: LD_INT 250
37208: EQUAL
37209: PUSH
37210: LD_VAR 0 2
37214: PPUSH
37215: CALL_OW 264
37219: PUSH
37220: LD_EXP 56
37224: EQUAL
37225: AND
37226: IFFALSE 37247
// MinerPlaceMine ( unit , x , y ) ;
37228: LD_VAR 0 2
37232: PPUSH
37233: LD_VAR 0 4
37237: PPUSH
37238: LD_VAR 0 5
37242: PPUSH
37243: CALL 39646 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37247: LD_VAR 0 1
37251: PUSH
37252: LD_INT 251
37254: EQUAL
37255: PUSH
37256: LD_VAR 0 2
37260: PPUSH
37261: CALL_OW 264
37265: PUSH
37266: LD_EXP 56
37270: EQUAL
37271: AND
37272: IFFALSE 37293
// MinerDetonateMine ( unit , x , y ) ;
37274: LD_VAR 0 2
37278: PPUSH
37279: LD_VAR 0 4
37283: PPUSH
37284: LD_VAR 0 5
37288: PPUSH
37289: CALL 39923 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37293: LD_VAR 0 1
37297: PUSH
37298: LD_INT 252
37300: EQUAL
37301: PUSH
37302: LD_VAR 0 2
37306: PPUSH
37307: CALL_OW 264
37311: PUSH
37312: LD_EXP 56
37316: EQUAL
37317: AND
37318: IFFALSE 37339
// MinerCreateMinefield ( unit , x , y ) ;
37320: LD_VAR 0 2
37324: PPUSH
37325: LD_VAR 0 4
37329: PPUSH
37330: LD_VAR 0 5
37334: PPUSH
37335: CALL 40340 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37339: LD_VAR 0 1
37343: PUSH
37344: LD_INT 253
37346: EQUAL
37347: PUSH
37348: LD_VAR 0 2
37352: PPUSH
37353: CALL_OW 257
37357: PUSH
37358: LD_INT 5
37360: EQUAL
37361: AND
37362: IFFALSE 37383
// ComBinocular ( unit , x , y ) ;
37364: LD_VAR 0 2
37368: PPUSH
37369: LD_VAR 0 4
37373: PPUSH
37374: LD_VAR 0 5
37378: PPUSH
37379: CALL 40711 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37383: LD_VAR 0 1
37387: PUSH
37388: LD_INT 254
37390: EQUAL
37391: PUSH
37392: LD_VAR 0 2
37396: PPUSH
37397: CALL_OW 264
37401: PUSH
37402: LD_EXP 51
37406: EQUAL
37407: AND
37408: PUSH
37409: LD_VAR 0 3
37413: PPUSH
37414: CALL_OW 263
37418: PUSH
37419: LD_INT 3
37421: EQUAL
37422: AND
37423: IFFALSE 37439
// HackDestroyVehicle ( unit , selectedUnit ) ;
37425: LD_VAR 0 2
37429: PPUSH
37430: LD_VAR 0 3
37434: PPUSH
37435: CALL 39006 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37439: LD_VAR 0 1
37443: PUSH
37444: LD_INT 255
37446: EQUAL
37447: PUSH
37448: LD_VAR 0 2
37452: PPUSH
37453: CALL_OW 264
37457: PUSH
37458: LD_INT 14
37460: PUSH
37461: LD_INT 53
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: IN
37468: AND
37469: PUSH
37470: LD_VAR 0 4
37474: PPUSH
37475: LD_VAR 0 5
37479: PPUSH
37480: CALL_OW 488
37484: AND
37485: IFFALSE 37509
// CutTreeXYR ( unit , x , y , 12 ) ;
37487: LD_VAR 0 2
37491: PPUSH
37492: LD_VAR 0 4
37496: PPUSH
37497: LD_VAR 0 5
37501: PPUSH
37502: LD_INT 12
37504: PPUSH
37505: CALL 37572 0 4
// if cmd = 256 then
37509: LD_VAR 0 1
37513: PUSH
37514: LD_INT 256
37516: EQUAL
37517: IFFALSE 37538
// SetFactoryWaypoint ( unit , x , y ) ;
37519: LD_VAR 0 2
37523: PPUSH
37524: LD_VAR 0 4
37528: PPUSH
37529: LD_VAR 0 5
37533: PPUSH
37534: CALL 35507 0 3
// if cmd = 257 then
37538: LD_VAR 0 1
37542: PUSH
37543: LD_INT 257
37545: EQUAL
37546: IFFALSE 37567
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37548: LD_VAR 0 2
37552: PPUSH
37553: LD_VAR 0 4
37557: PPUSH
37558: LD_VAR 0 5
37562: PPUSH
37563: CALL 35869 0 3
// end ;
37567: LD_VAR 0 6
37571: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37572: LD_INT 0
37574: PPUSH
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
37583: LD_VAR 0 1
37587: NOT
37588: PUSH
37589: LD_VAR 0 2
37593: PPUSH
37594: LD_VAR 0 3
37598: PPUSH
37599: CALL_OW 488
37603: NOT
37604: OR
37605: PUSH
37606: LD_VAR 0 4
37610: NOT
37611: OR
37612: IFFALSE 37616
// exit ;
37614: GO 37956
// list := [ ] ;
37616: LD_ADDR_VAR 0 13
37620: PUSH
37621: EMPTY
37622: ST_TO_ADDR
// if x - r < 0 then
37623: LD_VAR 0 2
37627: PUSH
37628: LD_VAR 0 4
37632: MINUS
37633: PUSH
37634: LD_INT 0
37636: LESS
37637: IFFALSE 37649
// min_x := 0 else
37639: LD_ADDR_VAR 0 7
37643: PUSH
37644: LD_INT 0
37646: ST_TO_ADDR
37647: GO 37665
// min_x := x - r ;
37649: LD_ADDR_VAR 0 7
37653: PUSH
37654: LD_VAR 0 2
37658: PUSH
37659: LD_VAR 0 4
37663: MINUS
37664: ST_TO_ADDR
// if y - r < 0 then
37665: LD_VAR 0 3
37669: PUSH
37670: LD_VAR 0 4
37674: MINUS
37675: PUSH
37676: LD_INT 0
37678: LESS
37679: IFFALSE 37691
// min_y := 0 else
37681: LD_ADDR_VAR 0 8
37685: PUSH
37686: LD_INT 0
37688: ST_TO_ADDR
37689: GO 37707
// min_y := y - r ;
37691: LD_ADDR_VAR 0 8
37695: PUSH
37696: LD_VAR 0 3
37700: PUSH
37701: LD_VAR 0 4
37705: MINUS
37706: ST_TO_ADDR
// max_x := x + r ;
37707: LD_ADDR_VAR 0 9
37711: PUSH
37712: LD_VAR 0 2
37716: PUSH
37717: LD_VAR 0 4
37721: PLUS
37722: ST_TO_ADDR
// max_y := y + r ;
37723: LD_ADDR_VAR 0 10
37727: PUSH
37728: LD_VAR 0 3
37732: PUSH
37733: LD_VAR 0 4
37737: PLUS
37738: ST_TO_ADDR
// for _x = min_x to max_x do
37739: LD_ADDR_VAR 0 11
37743: PUSH
37744: DOUBLE
37745: LD_VAR 0 7
37749: DEC
37750: ST_TO_ADDR
37751: LD_VAR 0 9
37755: PUSH
37756: FOR_TO
37757: IFFALSE 37874
// for _y = min_y to max_y do
37759: LD_ADDR_VAR 0 12
37763: PUSH
37764: DOUBLE
37765: LD_VAR 0 8
37769: DEC
37770: ST_TO_ADDR
37771: LD_VAR 0 10
37775: PUSH
37776: FOR_TO
37777: IFFALSE 37870
// begin if not ValidHex ( _x , _y ) then
37779: LD_VAR 0 11
37783: PPUSH
37784: LD_VAR 0 12
37788: PPUSH
37789: CALL_OW 488
37793: NOT
37794: IFFALSE 37798
// continue ;
37796: GO 37776
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37798: LD_VAR 0 11
37802: PPUSH
37803: LD_VAR 0 12
37807: PPUSH
37808: CALL_OW 351
37812: PUSH
37813: LD_VAR 0 11
37817: PPUSH
37818: LD_VAR 0 12
37822: PPUSH
37823: CALL_OW 554
37827: AND
37828: IFFALSE 37868
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37830: LD_ADDR_VAR 0 13
37834: PUSH
37835: LD_VAR 0 13
37839: PPUSH
37840: LD_VAR 0 13
37844: PUSH
37845: LD_INT 1
37847: PLUS
37848: PPUSH
37849: LD_VAR 0 11
37853: PUSH
37854: LD_VAR 0 12
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PPUSH
37863: CALL_OW 2
37867: ST_TO_ADDR
// end ;
37868: GO 37776
37870: POP
37871: POP
37872: GO 37756
37874: POP
37875: POP
// if not list then
37876: LD_VAR 0 13
37880: NOT
37881: IFFALSE 37885
// exit ;
37883: GO 37956
// for i in list do
37885: LD_ADDR_VAR 0 6
37889: PUSH
37890: LD_VAR 0 13
37894: PUSH
37895: FOR_IN
37896: IFFALSE 37954
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37898: LD_VAR 0 1
37902: PPUSH
37903: LD_STRING M
37905: PUSH
37906: LD_VAR 0 6
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: PUSH
37915: LD_VAR 0 6
37919: PUSH
37920: LD_INT 2
37922: ARRAY
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: PUSH
37945: EMPTY
37946: LIST
37947: PPUSH
37948: CALL_OW 447
37952: GO 37895
37954: POP
37955: POP
// end ;
37956: LD_VAR 0 5
37960: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37961: LD_EXP 128
37965: NOT
37966: IFFALSE 38016
37968: GO 37970
37970: DISABLE
// begin initHack := true ;
37971: LD_ADDR_EXP 128
37975: PUSH
37976: LD_INT 1
37978: ST_TO_ADDR
// hackTanks := [ ] ;
37979: LD_ADDR_EXP 129
37983: PUSH
37984: EMPTY
37985: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37986: LD_ADDR_EXP 130
37990: PUSH
37991: EMPTY
37992: ST_TO_ADDR
// hackLimit := 3 ;
37993: LD_ADDR_EXP 131
37997: PUSH
37998: LD_INT 3
38000: ST_TO_ADDR
// hackDist := 12 ;
38001: LD_ADDR_EXP 132
38005: PUSH
38006: LD_INT 12
38008: ST_TO_ADDR
// hackCounter := [ ] ;
38009: LD_ADDR_EXP 133
38013: PUSH
38014: EMPTY
38015: ST_TO_ADDR
// end ;
38016: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38017: LD_EXP 128
38021: PUSH
38022: LD_INT 34
38024: PUSH
38025: LD_EXP 51
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PPUSH
38034: CALL_OW 69
38038: AND
38039: IFFALSE 38294
38041: GO 38043
38043: DISABLE
38044: LD_INT 0
38046: PPUSH
38047: PPUSH
// begin enable ;
38048: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38049: LD_ADDR_VAR 0 1
38053: PUSH
38054: LD_INT 34
38056: PUSH
38057: LD_EXP 51
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PPUSH
38066: CALL_OW 69
38070: PUSH
38071: FOR_IN
38072: IFFALSE 38292
// begin if not i in hackTanks then
38074: LD_VAR 0 1
38078: PUSH
38079: LD_EXP 129
38083: IN
38084: NOT
38085: IFFALSE 38168
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38087: LD_ADDR_EXP 129
38091: PUSH
38092: LD_EXP 129
38096: PPUSH
38097: LD_EXP 129
38101: PUSH
38102: LD_INT 1
38104: PLUS
38105: PPUSH
38106: LD_VAR 0 1
38110: PPUSH
38111: CALL_OW 1
38115: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38116: LD_ADDR_EXP 130
38120: PUSH
38121: LD_EXP 130
38125: PPUSH
38126: LD_EXP 130
38130: PUSH
38131: LD_INT 1
38133: PLUS
38134: PPUSH
38135: EMPTY
38136: PPUSH
38137: CALL_OW 1
38141: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38142: LD_ADDR_EXP 133
38146: PUSH
38147: LD_EXP 133
38151: PPUSH
38152: LD_EXP 133
38156: PUSH
38157: LD_INT 1
38159: PLUS
38160: PPUSH
38161: EMPTY
38162: PPUSH
38163: CALL_OW 1
38167: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38168: LD_VAR 0 1
38172: PPUSH
38173: CALL_OW 302
38177: NOT
38178: IFFALSE 38191
// begin HackUnlinkAll ( i ) ;
38180: LD_VAR 0 1
38184: PPUSH
38185: CALL 38297 0 1
// continue ;
38189: GO 38071
// end ; HackCheckCapturedStatus ( i ) ;
38191: LD_VAR 0 1
38195: PPUSH
38196: CALL 38740 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38200: LD_ADDR_VAR 0 2
38204: PUSH
38205: LD_INT 81
38207: PUSH
38208: LD_VAR 0 1
38212: PPUSH
38213: CALL_OW 255
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 33
38224: PUSH
38225: LD_INT 3
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 91
38234: PUSH
38235: LD_VAR 0 1
38239: PUSH
38240: LD_EXP 132
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 50
38252: PUSH
38253: EMPTY
38254: LIST
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: PPUSH
38262: CALL_OW 69
38266: ST_TO_ADDR
// if not tmp then
38267: LD_VAR 0 2
38271: NOT
38272: IFFALSE 38276
// continue ;
38274: GO 38071
// HackLink ( i , tmp ) ;
38276: LD_VAR 0 1
38280: PPUSH
38281: LD_VAR 0 2
38285: PPUSH
38286: CALL 38433 0 2
// end ;
38290: GO 38071
38292: POP
38293: POP
// end ;
38294: PPOPN 2
38296: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38297: LD_INT 0
38299: PPUSH
38300: PPUSH
38301: PPUSH
// if not hack in hackTanks then
38302: LD_VAR 0 1
38306: PUSH
38307: LD_EXP 129
38311: IN
38312: NOT
38313: IFFALSE 38317
// exit ;
38315: GO 38428
// index := GetElementIndex ( hackTanks , hack ) ;
38317: LD_ADDR_VAR 0 4
38321: PUSH
38322: LD_EXP 129
38326: PPUSH
38327: LD_VAR 0 1
38331: PPUSH
38332: CALL 46055 0 2
38336: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38337: LD_EXP 130
38341: PUSH
38342: LD_VAR 0 4
38346: ARRAY
38347: IFFALSE 38428
// begin for i in hackTanksCaptured [ index ] do
38349: LD_ADDR_VAR 0 3
38353: PUSH
38354: LD_EXP 130
38358: PUSH
38359: LD_VAR 0 4
38363: ARRAY
38364: PUSH
38365: FOR_IN
38366: IFFALSE 38392
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38368: LD_VAR 0 3
38372: PUSH
38373: LD_INT 1
38375: ARRAY
38376: PPUSH
38377: LD_VAR 0 3
38381: PUSH
38382: LD_INT 2
38384: ARRAY
38385: PPUSH
38386: CALL_OW 235
38390: GO 38365
38392: POP
38393: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38394: LD_ADDR_EXP 130
38398: PUSH
38399: LD_EXP 130
38403: PPUSH
38404: LD_VAR 0 4
38408: PPUSH
38409: EMPTY
38410: PPUSH
38411: CALL_OW 1
38415: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38416: LD_VAR 0 1
38420: PPUSH
38421: LD_INT 0
38423: PPUSH
38424: CALL_OW 505
// end ; end ;
38428: LD_VAR 0 2
38432: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38433: LD_INT 0
38435: PPUSH
38436: PPUSH
38437: PPUSH
// if not hack in hackTanks or not vehicles then
38438: LD_VAR 0 1
38442: PUSH
38443: LD_EXP 129
38447: IN
38448: NOT
38449: PUSH
38450: LD_VAR 0 2
38454: NOT
38455: OR
38456: IFFALSE 38460
// exit ;
38458: GO 38735
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38460: LD_ADDR_VAR 0 2
38464: PUSH
38465: LD_VAR 0 1
38469: PPUSH
38470: LD_VAR 0 2
38474: PPUSH
38475: LD_INT 1
38477: PPUSH
38478: LD_INT 1
38480: PPUSH
38481: CALL 46705 0 4
38485: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38486: LD_ADDR_VAR 0 5
38490: PUSH
38491: LD_EXP 129
38495: PPUSH
38496: LD_VAR 0 1
38500: PPUSH
38501: CALL 46055 0 2
38505: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38506: LD_EXP 130
38510: PUSH
38511: LD_VAR 0 5
38515: ARRAY
38516: PUSH
38517: LD_EXP 131
38521: LESS
38522: IFFALSE 38711
// begin for i := 1 to vehicles do
38524: LD_ADDR_VAR 0 4
38528: PUSH
38529: DOUBLE
38530: LD_INT 1
38532: DEC
38533: ST_TO_ADDR
38534: LD_VAR 0 2
38538: PUSH
38539: FOR_TO
38540: IFFALSE 38709
// begin if hackTanksCaptured [ index ] = hackLimit then
38542: LD_EXP 130
38546: PUSH
38547: LD_VAR 0 5
38551: ARRAY
38552: PUSH
38553: LD_EXP 131
38557: EQUAL
38558: IFFALSE 38562
// break ;
38560: GO 38709
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38562: LD_ADDR_EXP 133
38566: PUSH
38567: LD_EXP 133
38571: PPUSH
38572: LD_VAR 0 5
38576: PPUSH
38577: LD_EXP 133
38581: PUSH
38582: LD_VAR 0 5
38586: ARRAY
38587: PUSH
38588: LD_INT 1
38590: PLUS
38591: PPUSH
38592: CALL_OW 1
38596: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38597: LD_ADDR_EXP 130
38601: PUSH
38602: LD_EXP 130
38606: PPUSH
38607: LD_VAR 0 5
38611: PUSH
38612: LD_EXP 130
38616: PUSH
38617: LD_VAR 0 5
38621: ARRAY
38622: PUSH
38623: LD_INT 1
38625: PLUS
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PPUSH
38631: LD_VAR 0 2
38635: PUSH
38636: LD_VAR 0 4
38640: ARRAY
38641: PUSH
38642: LD_VAR 0 2
38646: PUSH
38647: LD_VAR 0 4
38651: ARRAY
38652: PPUSH
38653: CALL_OW 255
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PPUSH
38662: CALL 46270 0 3
38666: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38667: LD_VAR 0 2
38671: PUSH
38672: LD_VAR 0 4
38676: ARRAY
38677: PPUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 255
38687: PPUSH
38688: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38692: LD_VAR 0 2
38696: PUSH
38697: LD_VAR 0 4
38701: ARRAY
38702: PPUSH
38703: CALL_OW 141
// end ;
38707: GO 38539
38709: POP
38710: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38711: LD_VAR 0 1
38715: PPUSH
38716: LD_EXP 130
38720: PUSH
38721: LD_VAR 0 5
38725: ARRAY
38726: PUSH
38727: LD_INT 0
38729: PLUS
38730: PPUSH
38731: CALL_OW 505
// end ;
38735: LD_VAR 0 3
38739: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38740: LD_INT 0
38742: PPUSH
38743: PPUSH
38744: PPUSH
38745: PPUSH
// if not hack in hackTanks then
38746: LD_VAR 0 1
38750: PUSH
38751: LD_EXP 129
38755: IN
38756: NOT
38757: IFFALSE 38761
// exit ;
38759: GO 39001
// index := GetElementIndex ( hackTanks , hack ) ;
38761: LD_ADDR_VAR 0 4
38765: PUSH
38766: LD_EXP 129
38770: PPUSH
38771: LD_VAR 0 1
38775: PPUSH
38776: CALL 46055 0 2
38780: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38781: LD_ADDR_VAR 0 3
38785: PUSH
38786: DOUBLE
38787: LD_EXP 130
38791: PUSH
38792: LD_VAR 0 4
38796: ARRAY
38797: INC
38798: ST_TO_ADDR
38799: LD_INT 1
38801: PUSH
38802: FOR_DOWNTO
38803: IFFALSE 38975
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38805: LD_ADDR_VAR 0 5
38809: PUSH
38810: LD_EXP 130
38814: PUSH
38815: LD_VAR 0 4
38819: ARRAY
38820: PUSH
38821: LD_VAR 0 3
38825: ARRAY
38826: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38827: LD_VAR 0 5
38831: PUSH
38832: LD_INT 1
38834: ARRAY
38835: PPUSH
38836: CALL_OW 302
38840: NOT
38841: PUSH
38842: LD_VAR 0 5
38846: PUSH
38847: LD_INT 1
38849: ARRAY
38850: PPUSH
38851: CALL_OW 255
38855: PUSH
38856: LD_VAR 0 1
38860: PPUSH
38861: CALL_OW 255
38865: NONEQUAL
38866: OR
38867: IFFALSE 38973
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38869: LD_VAR 0 5
38873: PUSH
38874: LD_INT 1
38876: ARRAY
38877: PPUSH
38878: CALL_OW 305
38882: PUSH
38883: LD_VAR 0 5
38887: PUSH
38888: LD_INT 1
38890: ARRAY
38891: PPUSH
38892: CALL_OW 255
38896: PUSH
38897: LD_VAR 0 1
38901: PPUSH
38902: CALL_OW 255
38906: EQUAL
38907: AND
38908: IFFALSE 38932
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38910: LD_VAR 0 5
38914: PUSH
38915: LD_INT 1
38917: ARRAY
38918: PPUSH
38919: LD_VAR 0 5
38923: PUSH
38924: LD_INT 2
38926: ARRAY
38927: PPUSH
38928: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38932: LD_ADDR_EXP 130
38936: PUSH
38937: LD_EXP 130
38941: PPUSH
38942: LD_VAR 0 4
38946: PPUSH
38947: LD_EXP 130
38951: PUSH
38952: LD_VAR 0 4
38956: ARRAY
38957: PPUSH
38958: LD_VAR 0 3
38962: PPUSH
38963: CALL_OW 3
38967: PPUSH
38968: CALL_OW 1
38972: ST_TO_ADDR
// end ; end ;
38973: GO 38802
38975: POP
38976: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38977: LD_VAR 0 1
38981: PPUSH
38982: LD_EXP 130
38986: PUSH
38987: LD_VAR 0 4
38991: ARRAY
38992: PUSH
38993: LD_INT 0
38995: PLUS
38996: PPUSH
38997: CALL_OW 505
// end ;
39001: LD_VAR 0 2
39005: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39006: LD_INT 0
39008: PPUSH
39009: PPUSH
39010: PPUSH
39011: PPUSH
// if not hack in hackTanks then
39012: LD_VAR 0 1
39016: PUSH
39017: LD_EXP 129
39021: IN
39022: NOT
39023: IFFALSE 39027
// exit ;
39025: GO 39112
// index := GetElementIndex ( hackTanks , hack ) ;
39027: LD_ADDR_VAR 0 5
39031: PUSH
39032: LD_EXP 129
39036: PPUSH
39037: LD_VAR 0 1
39041: PPUSH
39042: CALL 46055 0 2
39046: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39047: LD_ADDR_VAR 0 4
39051: PUSH
39052: DOUBLE
39053: LD_INT 1
39055: DEC
39056: ST_TO_ADDR
39057: LD_EXP 130
39061: PUSH
39062: LD_VAR 0 5
39066: ARRAY
39067: PUSH
39068: FOR_TO
39069: IFFALSE 39110
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39071: LD_EXP 130
39075: PUSH
39076: LD_VAR 0 5
39080: ARRAY
39081: PUSH
39082: LD_VAR 0 4
39086: ARRAY
39087: PUSH
39088: LD_INT 1
39090: ARRAY
39091: PUSH
39092: LD_VAR 0 2
39096: EQUAL
39097: IFFALSE 39108
// KillUnit ( vehicle ) ;
39099: LD_VAR 0 2
39103: PPUSH
39104: CALL_OW 66
39108: GO 39068
39110: POP
39111: POP
// end ;
39112: LD_VAR 0 3
39116: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39117: LD_EXP 134
39121: NOT
39122: IFFALSE 39157
39124: GO 39126
39126: DISABLE
// begin initMiner := true ;
39127: LD_ADDR_EXP 134
39131: PUSH
39132: LD_INT 1
39134: ST_TO_ADDR
// minersList := [ ] ;
39135: LD_ADDR_EXP 135
39139: PUSH
39140: EMPTY
39141: ST_TO_ADDR
// minerMinesList := [ ] ;
39142: LD_ADDR_EXP 136
39146: PUSH
39147: EMPTY
39148: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39149: LD_ADDR_EXP 137
39153: PUSH
39154: LD_INT 5
39156: ST_TO_ADDR
// end ;
39157: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39158: LD_EXP 134
39162: PUSH
39163: LD_INT 34
39165: PUSH
39166: LD_EXP 56
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PPUSH
39175: CALL_OW 69
39179: AND
39180: IFFALSE 39643
39182: GO 39184
39184: DISABLE
39185: LD_INT 0
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
// begin enable ;
39191: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39192: LD_ADDR_VAR 0 1
39196: PUSH
39197: LD_INT 34
39199: PUSH
39200: LD_EXP 56
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PPUSH
39209: CALL_OW 69
39213: PUSH
39214: FOR_IN
39215: IFFALSE 39287
// begin if not i in minersList then
39217: LD_VAR 0 1
39221: PUSH
39222: LD_EXP 135
39226: IN
39227: NOT
39228: IFFALSE 39285
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39230: LD_ADDR_EXP 135
39234: PUSH
39235: LD_EXP 135
39239: PPUSH
39240: LD_EXP 135
39244: PUSH
39245: LD_INT 1
39247: PLUS
39248: PPUSH
39249: LD_VAR 0 1
39253: PPUSH
39254: CALL_OW 1
39258: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39259: LD_ADDR_EXP 136
39263: PUSH
39264: LD_EXP 136
39268: PPUSH
39269: LD_EXP 136
39273: PUSH
39274: LD_INT 1
39276: PLUS
39277: PPUSH
39278: EMPTY
39279: PPUSH
39280: CALL_OW 1
39284: ST_TO_ADDR
// end end ;
39285: GO 39214
39287: POP
39288: POP
// for i := minerMinesList downto 1 do
39289: LD_ADDR_VAR 0 1
39293: PUSH
39294: DOUBLE
39295: LD_EXP 136
39299: INC
39300: ST_TO_ADDR
39301: LD_INT 1
39303: PUSH
39304: FOR_DOWNTO
39305: IFFALSE 39641
// begin if IsLive ( minersList [ i ] ) then
39307: LD_EXP 135
39311: PUSH
39312: LD_VAR 0 1
39316: ARRAY
39317: PPUSH
39318: CALL_OW 300
39322: IFFALSE 39350
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39324: LD_EXP 135
39328: PUSH
39329: LD_VAR 0 1
39333: ARRAY
39334: PPUSH
39335: LD_EXP 136
39339: PUSH
39340: LD_VAR 0 1
39344: ARRAY
39345: PPUSH
39346: CALL_OW 505
// if not minerMinesList [ i ] then
39350: LD_EXP 136
39354: PUSH
39355: LD_VAR 0 1
39359: ARRAY
39360: NOT
39361: IFFALSE 39365
// continue ;
39363: GO 39304
// for j := minerMinesList [ i ] downto 1 do
39365: LD_ADDR_VAR 0 2
39369: PUSH
39370: DOUBLE
39371: LD_EXP 136
39375: PUSH
39376: LD_VAR 0 1
39380: ARRAY
39381: INC
39382: ST_TO_ADDR
39383: LD_INT 1
39385: PUSH
39386: FOR_DOWNTO
39387: IFFALSE 39637
// begin side := GetSide ( minersList [ i ] ) ;
39389: LD_ADDR_VAR 0 3
39393: PUSH
39394: LD_EXP 135
39398: PUSH
39399: LD_VAR 0 1
39403: ARRAY
39404: PPUSH
39405: CALL_OW 255
39409: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39410: LD_ADDR_VAR 0 4
39414: PUSH
39415: LD_EXP 136
39419: PUSH
39420: LD_VAR 0 1
39424: ARRAY
39425: PUSH
39426: LD_VAR 0 2
39430: ARRAY
39431: PUSH
39432: LD_INT 1
39434: ARRAY
39435: PPUSH
39436: LD_EXP 136
39440: PUSH
39441: LD_VAR 0 1
39445: ARRAY
39446: PUSH
39447: LD_VAR 0 2
39451: ARRAY
39452: PUSH
39453: LD_INT 2
39455: ARRAY
39456: PPUSH
39457: CALL_OW 428
39461: ST_TO_ADDR
// if not tmp then
39462: LD_VAR 0 4
39466: NOT
39467: IFFALSE 39471
// continue ;
39469: GO 39386
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39471: LD_VAR 0 4
39475: PUSH
39476: LD_INT 81
39478: PUSH
39479: LD_VAR 0 3
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PPUSH
39488: CALL_OW 69
39492: IN
39493: PUSH
39494: LD_EXP 136
39498: PUSH
39499: LD_VAR 0 1
39503: ARRAY
39504: PUSH
39505: LD_VAR 0 2
39509: ARRAY
39510: PUSH
39511: LD_INT 1
39513: ARRAY
39514: PPUSH
39515: LD_EXP 136
39519: PUSH
39520: LD_VAR 0 1
39524: ARRAY
39525: PUSH
39526: LD_VAR 0 2
39530: ARRAY
39531: PUSH
39532: LD_INT 2
39534: ARRAY
39535: PPUSH
39536: CALL_OW 458
39540: AND
39541: IFFALSE 39635
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39543: LD_EXP 136
39547: PUSH
39548: LD_VAR 0 1
39552: ARRAY
39553: PUSH
39554: LD_VAR 0 2
39558: ARRAY
39559: PUSH
39560: LD_INT 1
39562: ARRAY
39563: PPUSH
39564: LD_EXP 136
39568: PUSH
39569: LD_VAR 0 1
39573: ARRAY
39574: PUSH
39575: LD_VAR 0 2
39579: ARRAY
39580: PUSH
39581: LD_INT 2
39583: ARRAY
39584: PPUSH
39585: LD_VAR 0 3
39589: PPUSH
39590: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39594: LD_ADDR_EXP 136
39598: PUSH
39599: LD_EXP 136
39603: PPUSH
39604: LD_VAR 0 1
39608: PPUSH
39609: LD_EXP 136
39613: PUSH
39614: LD_VAR 0 1
39618: ARRAY
39619: PPUSH
39620: LD_VAR 0 2
39624: PPUSH
39625: CALL_OW 3
39629: PPUSH
39630: CALL_OW 1
39634: ST_TO_ADDR
// end ; end ;
39635: GO 39386
39637: POP
39638: POP
// end ;
39639: GO 39304
39641: POP
39642: POP
// end ;
39643: PPOPN 4
39645: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39646: LD_INT 0
39648: PPUSH
39649: PPUSH
// result := false ;
39650: LD_ADDR_VAR 0 4
39654: PUSH
39655: LD_INT 0
39657: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39658: LD_VAR 0 1
39662: PPUSH
39663: CALL_OW 264
39667: PUSH
39668: LD_EXP 56
39672: EQUAL
39673: NOT
39674: IFFALSE 39678
// exit ;
39676: GO 39918
// index := GetElementIndex ( minersList , unit ) ;
39678: LD_ADDR_VAR 0 5
39682: PUSH
39683: LD_EXP 135
39687: PPUSH
39688: LD_VAR 0 1
39692: PPUSH
39693: CALL 46055 0 2
39697: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39698: LD_EXP 136
39702: PUSH
39703: LD_VAR 0 5
39707: ARRAY
39708: PUSH
39709: LD_EXP 137
39713: GREATEREQUAL
39714: IFFALSE 39718
// exit ;
39716: GO 39918
// ComMoveXY ( unit , x , y ) ;
39718: LD_VAR 0 1
39722: PPUSH
39723: LD_VAR 0 2
39727: PPUSH
39728: LD_VAR 0 3
39732: PPUSH
39733: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39737: LD_INT 35
39739: PPUSH
39740: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39744: LD_VAR 0 1
39748: PPUSH
39749: LD_VAR 0 2
39753: PPUSH
39754: LD_VAR 0 3
39758: PPUSH
39759: CALL 77341 0 3
39763: NOT
39764: PUSH
39765: LD_VAR 0 1
39769: PPUSH
39770: CALL_OW 314
39774: AND
39775: IFFALSE 39779
// exit ;
39777: GO 39918
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39779: LD_VAR 0 2
39783: PPUSH
39784: LD_VAR 0 3
39788: PPUSH
39789: CALL_OW 428
39793: PUSH
39794: LD_VAR 0 1
39798: EQUAL
39799: PUSH
39800: LD_VAR 0 1
39804: PPUSH
39805: CALL_OW 314
39809: NOT
39810: AND
39811: IFFALSE 39737
// PlaySoundXY ( x , y , PlantMine ) ;
39813: LD_VAR 0 2
39817: PPUSH
39818: LD_VAR 0 3
39822: PPUSH
39823: LD_STRING PlantMine
39825: PPUSH
39826: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39830: LD_VAR 0 2
39834: PPUSH
39835: LD_VAR 0 3
39839: PPUSH
39840: LD_VAR 0 1
39844: PPUSH
39845: CALL_OW 255
39849: PPUSH
39850: LD_INT 0
39852: PPUSH
39853: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39857: LD_ADDR_EXP 136
39861: PUSH
39862: LD_EXP 136
39866: PPUSH
39867: LD_VAR 0 5
39871: PUSH
39872: LD_EXP 136
39876: PUSH
39877: LD_VAR 0 5
39881: ARRAY
39882: PUSH
39883: LD_INT 1
39885: PLUS
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PPUSH
39891: LD_VAR 0 2
39895: PUSH
39896: LD_VAR 0 3
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PPUSH
39905: CALL 46270 0 3
39909: ST_TO_ADDR
// result := true ;
39910: LD_ADDR_VAR 0 4
39914: PUSH
39915: LD_INT 1
39917: ST_TO_ADDR
// end ;
39918: LD_VAR 0 4
39922: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39923: LD_INT 0
39925: PPUSH
39926: PPUSH
39927: PPUSH
// if not unit in minersList then
39928: LD_VAR 0 1
39932: PUSH
39933: LD_EXP 135
39937: IN
39938: NOT
39939: IFFALSE 39943
// exit ;
39941: GO 40335
// index := GetElementIndex ( minersList , unit ) ;
39943: LD_ADDR_VAR 0 6
39947: PUSH
39948: LD_EXP 135
39952: PPUSH
39953: LD_VAR 0 1
39957: PPUSH
39958: CALL 46055 0 2
39962: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39963: LD_ADDR_VAR 0 5
39967: PUSH
39968: DOUBLE
39969: LD_EXP 136
39973: PUSH
39974: LD_VAR 0 6
39978: ARRAY
39979: INC
39980: ST_TO_ADDR
39981: LD_INT 1
39983: PUSH
39984: FOR_DOWNTO
39985: IFFALSE 40146
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39987: LD_EXP 136
39991: PUSH
39992: LD_VAR 0 6
39996: ARRAY
39997: PUSH
39998: LD_VAR 0 5
40002: ARRAY
40003: PUSH
40004: LD_INT 1
40006: ARRAY
40007: PUSH
40008: LD_VAR 0 2
40012: EQUAL
40013: PUSH
40014: LD_EXP 136
40018: PUSH
40019: LD_VAR 0 6
40023: ARRAY
40024: PUSH
40025: LD_VAR 0 5
40029: ARRAY
40030: PUSH
40031: LD_INT 2
40033: ARRAY
40034: PUSH
40035: LD_VAR 0 3
40039: EQUAL
40040: AND
40041: IFFALSE 40144
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40043: LD_EXP 136
40047: PUSH
40048: LD_VAR 0 6
40052: ARRAY
40053: PUSH
40054: LD_VAR 0 5
40058: ARRAY
40059: PUSH
40060: LD_INT 1
40062: ARRAY
40063: PPUSH
40064: LD_EXP 136
40068: PUSH
40069: LD_VAR 0 6
40073: ARRAY
40074: PUSH
40075: LD_VAR 0 5
40079: ARRAY
40080: PUSH
40081: LD_INT 2
40083: ARRAY
40084: PPUSH
40085: LD_VAR 0 1
40089: PPUSH
40090: CALL_OW 255
40094: PPUSH
40095: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40099: LD_ADDR_EXP 136
40103: PUSH
40104: LD_EXP 136
40108: PPUSH
40109: LD_VAR 0 6
40113: PPUSH
40114: LD_EXP 136
40118: PUSH
40119: LD_VAR 0 6
40123: ARRAY
40124: PPUSH
40125: LD_VAR 0 5
40129: PPUSH
40130: CALL_OW 3
40134: PPUSH
40135: CALL_OW 1
40139: ST_TO_ADDR
// exit ;
40140: POP
40141: POP
40142: GO 40335
// end ; end ;
40144: GO 39984
40146: POP
40147: POP
// for i := minerMinesList [ index ] downto 1 do
40148: LD_ADDR_VAR 0 5
40152: PUSH
40153: DOUBLE
40154: LD_EXP 136
40158: PUSH
40159: LD_VAR 0 6
40163: ARRAY
40164: INC
40165: ST_TO_ADDR
40166: LD_INT 1
40168: PUSH
40169: FOR_DOWNTO
40170: IFFALSE 40333
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40172: LD_EXP 136
40176: PUSH
40177: LD_VAR 0 6
40181: ARRAY
40182: PUSH
40183: LD_VAR 0 5
40187: ARRAY
40188: PUSH
40189: LD_INT 1
40191: ARRAY
40192: PPUSH
40193: LD_EXP 136
40197: PUSH
40198: LD_VAR 0 6
40202: ARRAY
40203: PUSH
40204: LD_VAR 0 5
40208: ARRAY
40209: PUSH
40210: LD_INT 2
40212: ARRAY
40213: PPUSH
40214: LD_VAR 0 2
40218: PPUSH
40219: LD_VAR 0 3
40223: PPUSH
40224: CALL_OW 298
40228: PUSH
40229: LD_INT 6
40231: LESS
40232: IFFALSE 40331
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40234: LD_EXP 136
40238: PUSH
40239: LD_VAR 0 6
40243: ARRAY
40244: PUSH
40245: LD_VAR 0 5
40249: ARRAY
40250: PUSH
40251: LD_INT 1
40253: ARRAY
40254: PPUSH
40255: LD_EXP 136
40259: PUSH
40260: LD_VAR 0 6
40264: ARRAY
40265: PUSH
40266: LD_VAR 0 5
40270: ARRAY
40271: PUSH
40272: LD_INT 2
40274: ARRAY
40275: PPUSH
40276: LD_VAR 0 1
40280: PPUSH
40281: CALL_OW 255
40285: PPUSH
40286: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40290: LD_ADDR_EXP 136
40294: PUSH
40295: LD_EXP 136
40299: PPUSH
40300: LD_VAR 0 6
40304: PPUSH
40305: LD_EXP 136
40309: PUSH
40310: LD_VAR 0 6
40314: ARRAY
40315: PPUSH
40316: LD_VAR 0 5
40320: PPUSH
40321: CALL_OW 3
40325: PPUSH
40326: CALL_OW 1
40330: ST_TO_ADDR
// end ; end ;
40331: GO 40169
40333: POP
40334: POP
// end ;
40335: LD_VAR 0 4
40339: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40340: LD_INT 0
40342: PPUSH
40343: PPUSH
40344: PPUSH
40345: PPUSH
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40351: LD_VAR 0 1
40355: PPUSH
40356: CALL_OW 264
40360: PUSH
40361: LD_EXP 56
40365: EQUAL
40366: NOT
40367: PUSH
40368: LD_VAR 0 1
40372: PUSH
40373: LD_EXP 135
40377: IN
40378: NOT
40379: OR
40380: IFFALSE 40384
// exit ;
40382: GO 40706
// index := GetElementIndex ( minersList , unit ) ;
40384: LD_ADDR_VAR 0 6
40388: PUSH
40389: LD_EXP 135
40393: PPUSH
40394: LD_VAR 0 1
40398: PPUSH
40399: CALL 46055 0 2
40403: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40404: LD_ADDR_VAR 0 8
40408: PUSH
40409: LD_EXP 137
40413: PUSH
40414: LD_EXP 136
40418: PUSH
40419: LD_VAR 0 6
40423: ARRAY
40424: MINUS
40425: ST_TO_ADDR
// if not minesFreeAmount then
40426: LD_VAR 0 8
40430: NOT
40431: IFFALSE 40435
// exit ;
40433: GO 40706
// tmp := [ ] ;
40435: LD_ADDR_VAR 0 7
40439: PUSH
40440: EMPTY
40441: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40442: LD_ADDR_VAR 0 5
40446: PUSH
40447: DOUBLE
40448: LD_INT 1
40450: DEC
40451: ST_TO_ADDR
40452: LD_VAR 0 8
40456: PUSH
40457: FOR_TO
40458: IFFALSE 40653
// begin _d := rand ( 0 , 5 ) ;
40460: LD_ADDR_VAR 0 11
40464: PUSH
40465: LD_INT 0
40467: PPUSH
40468: LD_INT 5
40470: PPUSH
40471: CALL_OW 12
40475: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40476: LD_ADDR_VAR 0 12
40480: PUSH
40481: LD_INT 2
40483: PPUSH
40484: LD_INT 6
40486: PPUSH
40487: CALL_OW 12
40491: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40492: LD_ADDR_VAR 0 9
40496: PUSH
40497: LD_VAR 0 2
40501: PPUSH
40502: LD_VAR 0 11
40506: PPUSH
40507: LD_VAR 0 12
40511: PPUSH
40512: CALL_OW 272
40516: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40517: LD_ADDR_VAR 0 10
40521: PUSH
40522: LD_VAR 0 3
40526: PPUSH
40527: LD_VAR 0 11
40531: PPUSH
40532: LD_VAR 0 12
40536: PPUSH
40537: CALL_OW 273
40541: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40542: LD_VAR 0 9
40546: PPUSH
40547: LD_VAR 0 10
40551: PPUSH
40552: CALL_OW 488
40556: PUSH
40557: LD_VAR 0 9
40561: PUSH
40562: LD_VAR 0 10
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_VAR 0 7
40575: IN
40576: NOT
40577: AND
40578: PUSH
40579: LD_VAR 0 9
40583: PPUSH
40584: LD_VAR 0 10
40588: PPUSH
40589: CALL_OW 458
40593: NOT
40594: AND
40595: IFFALSE 40637
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40597: LD_ADDR_VAR 0 7
40601: PUSH
40602: LD_VAR 0 7
40606: PPUSH
40607: LD_VAR 0 7
40611: PUSH
40612: LD_INT 1
40614: PLUS
40615: PPUSH
40616: LD_VAR 0 9
40620: PUSH
40621: LD_VAR 0 10
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PPUSH
40630: CALL_OW 1
40634: ST_TO_ADDR
40635: GO 40651
// i := i - 1 ;
40637: LD_ADDR_VAR 0 5
40641: PUSH
40642: LD_VAR 0 5
40646: PUSH
40647: LD_INT 1
40649: MINUS
40650: ST_TO_ADDR
// end ;
40651: GO 40457
40653: POP
40654: POP
// for i in tmp do
40655: LD_ADDR_VAR 0 5
40659: PUSH
40660: LD_VAR 0 7
40664: PUSH
40665: FOR_IN
40666: IFFALSE 40704
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40668: LD_VAR 0 1
40672: PPUSH
40673: LD_VAR 0 5
40677: PUSH
40678: LD_INT 1
40680: ARRAY
40681: PPUSH
40682: LD_VAR 0 5
40686: PUSH
40687: LD_INT 2
40689: ARRAY
40690: PPUSH
40691: CALL 39646 0 3
40695: NOT
40696: IFFALSE 40702
// exit ;
40698: POP
40699: POP
40700: GO 40706
40702: GO 40665
40704: POP
40705: POP
// end ;
40706: LD_VAR 0 4
40710: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40711: LD_INT 0
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
40719: PPUSH
// if not GetClass ( unit ) = class_sniper then
40720: LD_VAR 0 1
40724: PPUSH
40725: CALL_OW 257
40729: PUSH
40730: LD_INT 5
40732: EQUAL
40733: NOT
40734: IFFALSE 40738
// exit ;
40736: GO 41126
// dist := 8 ;
40738: LD_ADDR_VAR 0 5
40742: PUSH
40743: LD_INT 8
40745: ST_TO_ADDR
// viewRange := 12 ;
40746: LD_ADDR_VAR 0 7
40750: PUSH
40751: LD_INT 12
40753: ST_TO_ADDR
// side := GetSide ( unit ) ;
40754: LD_ADDR_VAR 0 6
40758: PUSH
40759: LD_VAR 0 1
40763: PPUSH
40764: CALL_OW 255
40768: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40769: LD_INT 61
40771: PPUSH
40772: LD_VAR 0 6
40776: PPUSH
40777: CALL_OW 321
40781: PUSH
40782: LD_INT 2
40784: EQUAL
40785: IFFALSE 40795
// viewRange := 16 ;
40787: LD_ADDR_VAR 0 7
40791: PUSH
40792: LD_INT 16
40794: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40795: LD_VAR 0 1
40799: PPUSH
40800: LD_VAR 0 2
40804: PPUSH
40805: LD_VAR 0 3
40809: PPUSH
40810: CALL_OW 297
40814: PUSH
40815: LD_VAR 0 5
40819: GREATER
40820: IFFALSE 40899
// begin ComMoveXY ( unit , x , y ) ;
40822: LD_VAR 0 1
40826: PPUSH
40827: LD_VAR 0 2
40831: PPUSH
40832: LD_VAR 0 3
40836: PPUSH
40837: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40841: LD_INT 35
40843: PPUSH
40844: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40848: LD_VAR 0 1
40852: PPUSH
40853: LD_VAR 0 2
40857: PPUSH
40858: LD_VAR 0 3
40862: PPUSH
40863: CALL 77341 0 3
40867: NOT
40868: IFFALSE 40872
// exit ;
40870: GO 41126
// until GetDistUnitXY ( unit , x , y ) < dist ;
40872: LD_VAR 0 1
40876: PPUSH
40877: LD_VAR 0 2
40881: PPUSH
40882: LD_VAR 0 3
40886: PPUSH
40887: CALL_OW 297
40891: PUSH
40892: LD_VAR 0 5
40896: LESS
40897: IFFALSE 40841
// end ; ComTurnXY ( unit , x , y ) ;
40899: LD_VAR 0 1
40903: PPUSH
40904: LD_VAR 0 2
40908: PPUSH
40909: LD_VAR 0 3
40913: PPUSH
40914: CALL_OW 118
// wait ( 5 ) ;
40918: LD_INT 5
40920: PPUSH
40921: CALL_OW 67
// _d := GetDir ( unit ) ;
40925: LD_ADDR_VAR 0 10
40929: PUSH
40930: LD_VAR 0 1
40934: PPUSH
40935: CALL_OW 254
40939: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40940: LD_ADDR_VAR 0 8
40944: PUSH
40945: LD_VAR 0 1
40949: PPUSH
40950: CALL_OW 250
40954: PPUSH
40955: LD_VAR 0 10
40959: PPUSH
40960: LD_VAR 0 5
40964: PPUSH
40965: CALL_OW 272
40969: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40970: LD_ADDR_VAR 0 9
40974: PUSH
40975: LD_VAR 0 1
40979: PPUSH
40980: CALL_OW 251
40984: PPUSH
40985: LD_VAR 0 10
40989: PPUSH
40990: LD_VAR 0 5
40994: PPUSH
40995: CALL_OW 273
40999: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41000: LD_VAR 0 8
41004: PPUSH
41005: LD_VAR 0 9
41009: PPUSH
41010: CALL_OW 488
41014: NOT
41015: IFFALSE 41019
// exit ;
41017: GO 41126
// ComAnimCustom ( unit , 1 ) ;
41019: LD_VAR 0 1
41023: PPUSH
41024: LD_INT 1
41026: PPUSH
41027: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41031: LD_VAR 0 8
41035: PPUSH
41036: LD_VAR 0 9
41040: PPUSH
41041: LD_VAR 0 6
41045: PPUSH
41046: LD_VAR 0 7
41050: PPUSH
41051: CALL_OW 330
// repeat wait ( 1 ) ;
41055: LD_INT 1
41057: PPUSH
41058: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41062: LD_VAR 0 1
41066: PPUSH
41067: CALL_OW 316
41071: PUSH
41072: LD_VAR 0 1
41076: PPUSH
41077: CALL_OW 314
41081: OR
41082: PUSH
41083: LD_VAR 0 1
41087: PPUSH
41088: CALL_OW 302
41092: NOT
41093: OR
41094: PUSH
41095: LD_VAR 0 1
41099: PPUSH
41100: CALL_OW 301
41104: OR
41105: IFFALSE 41055
// RemoveSeeing ( _x , _y , side ) ;
41107: LD_VAR 0 8
41111: PPUSH
41112: LD_VAR 0 9
41116: PPUSH
41117: LD_VAR 0 6
41121: PPUSH
41122: CALL_OW 331
// end ; end_of_file
41126: LD_VAR 0 4
41130: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41131: LD_INT 0
41133: PPUSH
41134: PPUSH
// if exist_mode then
41135: LD_VAR 0 2
41139: IFFALSE 41164
// unit := CreateCharacter ( prefix & ident ) else
41141: LD_ADDR_VAR 0 5
41145: PUSH
41146: LD_VAR 0 3
41150: PUSH
41151: LD_VAR 0 1
41155: STR
41156: PPUSH
41157: CALL_OW 34
41161: ST_TO_ADDR
41162: GO 41179
// unit := NewCharacter ( ident ) ;
41164: LD_ADDR_VAR 0 5
41168: PUSH
41169: LD_VAR 0 1
41173: PPUSH
41174: CALL_OW 25
41178: ST_TO_ADDR
// result := unit ;
41179: LD_ADDR_VAR 0 4
41183: PUSH
41184: LD_VAR 0 5
41188: ST_TO_ADDR
// end ;
41189: LD_VAR 0 4
41193: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41194: LD_INT 0
41196: PPUSH
41197: PPUSH
// if not side or not nation then
41198: LD_VAR 0 1
41202: NOT
41203: PUSH
41204: LD_VAR 0 2
41208: NOT
41209: OR
41210: IFFALSE 41214
// exit ;
41212: GO 41982
// case nation of nation_american :
41214: LD_VAR 0 2
41218: PUSH
41219: LD_INT 1
41221: DOUBLE
41222: EQUAL
41223: IFTRUE 41227
41225: GO 41441
41227: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41228: LD_ADDR_VAR 0 4
41232: PUSH
41233: LD_INT 35
41235: PUSH
41236: LD_INT 45
41238: PUSH
41239: LD_INT 46
41241: PUSH
41242: LD_INT 47
41244: PUSH
41245: LD_INT 82
41247: PUSH
41248: LD_INT 83
41250: PUSH
41251: LD_INT 84
41253: PUSH
41254: LD_INT 85
41256: PUSH
41257: LD_INT 86
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: LD_INT 6
41268: PUSH
41269: LD_INT 15
41271: PUSH
41272: LD_INT 16
41274: PUSH
41275: LD_INT 7
41277: PUSH
41278: LD_INT 12
41280: PUSH
41281: LD_INT 13
41283: PUSH
41284: LD_INT 10
41286: PUSH
41287: LD_INT 14
41289: PUSH
41290: LD_INT 20
41292: PUSH
41293: LD_INT 21
41295: PUSH
41296: LD_INT 22
41298: PUSH
41299: LD_INT 25
41301: PUSH
41302: LD_INT 32
41304: PUSH
41305: LD_INT 27
41307: PUSH
41308: LD_INT 36
41310: PUSH
41311: LD_INT 69
41313: PUSH
41314: LD_INT 39
41316: PUSH
41317: LD_INT 34
41319: PUSH
41320: LD_INT 40
41322: PUSH
41323: LD_INT 48
41325: PUSH
41326: LD_INT 49
41328: PUSH
41329: LD_INT 50
41331: PUSH
41332: LD_INT 51
41334: PUSH
41335: LD_INT 52
41337: PUSH
41338: LD_INT 53
41340: PUSH
41341: LD_INT 54
41343: PUSH
41344: LD_INT 55
41346: PUSH
41347: LD_INT 56
41349: PUSH
41350: LD_INT 57
41352: PUSH
41353: LD_INT 58
41355: PUSH
41356: LD_INT 59
41358: PUSH
41359: LD_INT 60
41361: PUSH
41362: LD_INT 61
41364: PUSH
41365: LD_INT 62
41367: PUSH
41368: LD_INT 80
41370: PUSH
41371: LD_INT 82
41373: PUSH
41374: LD_INT 83
41376: PUSH
41377: LD_INT 84
41379: PUSH
41380: LD_INT 85
41382: PUSH
41383: LD_INT 86
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: ST_TO_ADDR
41439: GO 41906
41441: LD_INT 2
41443: DOUBLE
41444: EQUAL
41445: IFTRUE 41449
41447: GO 41675
41449: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41450: LD_ADDR_VAR 0 4
41454: PUSH
41455: LD_INT 35
41457: PUSH
41458: LD_INT 45
41460: PUSH
41461: LD_INT 46
41463: PUSH
41464: LD_INT 47
41466: PUSH
41467: LD_INT 82
41469: PUSH
41470: LD_INT 83
41472: PUSH
41473: LD_INT 84
41475: PUSH
41476: LD_INT 85
41478: PUSH
41479: LD_INT 87
41481: PUSH
41482: LD_INT 70
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: LD_INT 11
41490: PUSH
41491: LD_INT 3
41493: PUSH
41494: LD_INT 4
41496: PUSH
41497: LD_INT 5
41499: PUSH
41500: LD_INT 6
41502: PUSH
41503: LD_INT 15
41505: PUSH
41506: LD_INT 18
41508: PUSH
41509: LD_INT 7
41511: PUSH
41512: LD_INT 17
41514: PUSH
41515: LD_INT 8
41517: PUSH
41518: LD_INT 20
41520: PUSH
41521: LD_INT 21
41523: PUSH
41524: LD_INT 22
41526: PUSH
41527: LD_INT 72
41529: PUSH
41530: LD_INT 26
41532: PUSH
41533: LD_INT 69
41535: PUSH
41536: LD_INT 39
41538: PUSH
41539: LD_INT 40
41541: PUSH
41542: LD_INT 41
41544: PUSH
41545: LD_INT 42
41547: PUSH
41548: LD_INT 43
41550: PUSH
41551: LD_INT 48
41553: PUSH
41554: LD_INT 49
41556: PUSH
41557: LD_INT 50
41559: PUSH
41560: LD_INT 51
41562: PUSH
41563: LD_INT 52
41565: PUSH
41566: LD_INT 53
41568: PUSH
41569: LD_INT 54
41571: PUSH
41572: LD_INT 55
41574: PUSH
41575: LD_INT 56
41577: PUSH
41578: LD_INT 60
41580: PUSH
41581: LD_INT 61
41583: PUSH
41584: LD_INT 62
41586: PUSH
41587: LD_INT 66
41589: PUSH
41590: LD_INT 67
41592: PUSH
41593: LD_INT 68
41595: PUSH
41596: LD_INT 81
41598: PUSH
41599: LD_INT 82
41601: PUSH
41602: LD_INT 83
41604: PUSH
41605: LD_INT 84
41607: PUSH
41608: LD_INT 85
41610: PUSH
41611: LD_INT 87
41613: PUSH
41614: LD_INT 88
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: ST_TO_ADDR
41673: GO 41906
41675: LD_INT 3
41677: DOUBLE
41678: EQUAL
41679: IFTRUE 41683
41681: GO 41905
41683: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41684: LD_ADDR_VAR 0 4
41688: PUSH
41689: LD_INT 46
41691: PUSH
41692: LD_INT 47
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: LD_INT 82
41703: PUSH
41704: LD_INT 83
41706: PUSH
41707: LD_INT 84
41709: PUSH
41710: LD_INT 85
41712: PUSH
41713: LD_INT 86
41715: PUSH
41716: LD_INT 11
41718: PUSH
41719: LD_INT 9
41721: PUSH
41722: LD_INT 20
41724: PUSH
41725: LD_INT 19
41727: PUSH
41728: LD_INT 21
41730: PUSH
41731: LD_INT 24
41733: PUSH
41734: LD_INT 22
41736: PUSH
41737: LD_INT 25
41739: PUSH
41740: LD_INT 28
41742: PUSH
41743: LD_INT 29
41745: PUSH
41746: LD_INT 30
41748: PUSH
41749: LD_INT 31
41751: PUSH
41752: LD_INT 37
41754: PUSH
41755: LD_INT 38
41757: PUSH
41758: LD_INT 32
41760: PUSH
41761: LD_INT 27
41763: PUSH
41764: LD_INT 33
41766: PUSH
41767: LD_INT 69
41769: PUSH
41770: LD_INT 39
41772: PUSH
41773: LD_INT 34
41775: PUSH
41776: LD_INT 40
41778: PUSH
41779: LD_INT 71
41781: PUSH
41782: LD_INT 23
41784: PUSH
41785: LD_INT 44
41787: PUSH
41788: LD_INT 48
41790: PUSH
41791: LD_INT 49
41793: PUSH
41794: LD_INT 50
41796: PUSH
41797: LD_INT 51
41799: PUSH
41800: LD_INT 52
41802: PUSH
41803: LD_INT 53
41805: PUSH
41806: LD_INT 54
41808: PUSH
41809: LD_INT 55
41811: PUSH
41812: LD_INT 56
41814: PUSH
41815: LD_INT 57
41817: PUSH
41818: LD_INT 58
41820: PUSH
41821: LD_INT 59
41823: PUSH
41824: LD_INT 63
41826: PUSH
41827: LD_INT 64
41829: PUSH
41830: LD_INT 65
41832: PUSH
41833: LD_INT 82
41835: PUSH
41836: LD_INT 83
41838: PUSH
41839: LD_INT 84
41841: PUSH
41842: LD_INT 85
41844: PUSH
41845: LD_INT 86
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: ST_TO_ADDR
41903: GO 41906
41905: POP
// if state > - 1 and state < 3 then
41906: LD_VAR 0 3
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: GREATER
41915: PUSH
41916: LD_VAR 0 3
41920: PUSH
41921: LD_INT 3
41923: LESS
41924: AND
41925: IFFALSE 41982
// for i in result do
41927: LD_ADDR_VAR 0 5
41931: PUSH
41932: LD_VAR 0 4
41936: PUSH
41937: FOR_IN
41938: IFFALSE 41980
// if GetTech ( i , side ) <> state then
41940: LD_VAR 0 5
41944: PPUSH
41945: LD_VAR 0 1
41949: PPUSH
41950: CALL_OW 321
41954: PUSH
41955: LD_VAR 0 3
41959: NONEQUAL
41960: IFFALSE 41978
// result := result diff i ;
41962: LD_ADDR_VAR 0 4
41966: PUSH
41967: LD_VAR 0 4
41971: PUSH
41972: LD_VAR 0 5
41976: DIFF
41977: ST_TO_ADDR
41978: GO 41937
41980: POP
41981: POP
// end ;
41982: LD_VAR 0 4
41986: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41987: LD_INT 0
41989: PPUSH
41990: PPUSH
41991: PPUSH
// result := true ;
41992: LD_ADDR_VAR 0 3
41996: PUSH
41997: LD_INT 1
41999: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42000: LD_ADDR_VAR 0 5
42004: PUSH
42005: LD_VAR 0 2
42009: PPUSH
42010: CALL_OW 480
42014: ST_TO_ADDR
// if not tmp then
42015: LD_VAR 0 5
42019: NOT
42020: IFFALSE 42024
// exit ;
42022: GO 42073
// for i in tmp do
42024: LD_ADDR_VAR 0 4
42028: PUSH
42029: LD_VAR 0 5
42033: PUSH
42034: FOR_IN
42035: IFFALSE 42071
// if GetTech ( i , side ) <> state_researched then
42037: LD_VAR 0 4
42041: PPUSH
42042: LD_VAR 0 1
42046: PPUSH
42047: CALL_OW 321
42051: PUSH
42052: LD_INT 2
42054: NONEQUAL
42055: IFFALSE 42069
// begin result := false ;
42057: LD_ADDR_VAR 0 3
42061: PUSH
42062: LD_INT 0
42064: ST_TO_ADDR
// exit ;
42065: POP
42066: POP
42067: GO 42073
// end ;
42069: GO 42034
42071: POP
42072: POP
// end ;
42073: LD_VAR 0 3
42077: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42078: LD_INT 0
42080: PPUSH
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
42091: PPUSH
42092: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42093: LD_VAR 0 1
42097: NOT
42098: PUSH
42099: LD_VAR 0 1
42103: PPUSH
42104: CALL_OW 257
42108: PUSH
42109: LD_INT 9
42111: NONEQUAL
42112: OR
42113: IFFALSE 42117
// exit ;
42115: GO 42690
// side := GetSide ( unit ) ;
42117: LD_ADDR_VAR 0 9
42121: PUSH
42122: LD_VAR 0 1
42126: PPUSH
42127: CALL_OW 255
42131: ST_TO_ADDR
// tech_space := tech_spacanom ;
42132: LD_ADDR_VAR 0 12
42136: PUSH
42137: LD_INT 29
42139: ST_TO_ADDR
// tech_time := tech_taurad ;
42140: LD_ADDR_VAR 0 13
42144: PUSH
42145: LD_INT 28
42147: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42148: LD_ADDR_VAR 0 11
42152: PUSH
42153: LD_VAR 0 1
42157: PPUSH
42158: CALL_OW 310
42162: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42163: LD_VAR 0 11
42167: PPUSH
42168: CALL_OW 247
42172: PUSH
42173: LD_INT 2
42175: EQUAL
42176: IFFALSE 42180
// exit ;
42178: GO 42690
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42180: LD_ADDR_VAR 0 8
42184: PUSH
42185: LD_INT 81
42187: PUSH
42188: LD_VAR 0 9
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: LD_INT 21
42202: PUSH
42203: LD_INT 3
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PPUSH
42218: CALL_OW 69
42222: ST_TO_ADDR
// if not tmp then
42223: LD_VAR 0 8
42227: NOT
42228: IFFALSE 42232
// exit ;
42230: GO 42690
// if in_unit then
42232: LD_VAR 0 11
42236: IFFALSE 42260
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42238: LD_ADDR_VAR 0 10
42242: PUSH
42243: LD_VAR 0 8
42247: PPUSH
42248: LD_VAR 0 11
42252: PPUSH
42253: CALL_OW 74
42257: ST_TO_ADDR
42258: GO 42280
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42260: LD_ADDR_VAR 0 10
42264: PUSH
42265: LD_VAR 0 8
42269: PPUSH
42270: LD_VAR 0 1
42274: PPUSH
42275: CALL_OW 74
42279: ST_TO_ADDR
// if not enemy then
42280: LD_VAR 0 10
42284: NOT
42285: IFFALSE 42289
// exit ;
42287: GO 42690
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42289: LD_VAR 0 11
42293: PUSH
42294: LD_VAR 0 11
42298: PPUSH
42299: LD_VAR 0 10
42303: PPUSH
42304: CALL_OW 296
42308: PUSH
42309: LD_INT 13
42311: GREATER
42312: AND
42313: PUSH
42314: LD_VAR 0 1
42318: PPUSH
42319: LD_VAR 0 10
42323: PPUSH
42324: CALL_OW 296
42328: PUSH
42329: LD_INT 12
42331: GREATER
42332: OR
42333: IFFALSE 42337
// exit ;
42335: GO 42690
// missile := [ 1 ] ;
42337: LD_ADDR_VAR 0 14
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: EMPTY
42346: LIST
42347: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42348: LD_VAR 0 9
42352: PPUSH
42353: LD_VAR 0 12
42357: PPUSH
42358: CALL_OW 325
42362: IFFALSE 42391
// missile := Replace ( missile , missile + 1 , 2 ) ;
42364: LD_ADDR_VAR 0 14
42368: PUSH
42369: LD_VAR 0 14
42373: PPUSH
42374: LD_VAR 0 14
42378: PUSH
42379: LD_INT 1
42381: PLUS
42382: PPUSH
42383: LD_INT 2
42385: PPUSH
42386: CALL_OW 1
42390: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42391: LD_VAR 0 9
42395: PPUSH
42396: LD_VAR 0 13
42400: PPUSH
42401: CALL_OW 325
42405: PUSH
42406: LD_VAR 0 10
42410: PPUSH
42411: CALL_OW 255
42415: PPUSH
42416: LD_VAR 0 13
42420: PPUSH
42421: CALL_OW 325
42425: NOT
42426: AND
42427: IFFALSE 42456
// missile := Replace ( missile , missile + 1 , 3 ) ;
42429: LD_ADDR_VAR 0 14
42433: PUSH
42434: LD_VAR 0 14
42438: PPUSH
42439: LD_VAR 0 14
42443: PUSH
42444: LD_INT 1
42446: PLUS
42447: PPUSH
42448: LD_INT 3
42450: PPUSH
42451: CALL_OW 1
42455: ST_TO_ADDR
// if missile < 2 then
42456: LD_VAR 0 14
42460: PUSH
42461: LD_INT 2
42463: LESS
42464: IFFALSE 42468
// exit ;
42466: GO 42690
// x := GetX ( enemy ) ;
42468: LD_ADDR_VAR 0 4
42472: PUSH
42473: LD_VAR 0 10
42477: PPUSH
42478: CALL_OW 250
42482: ST_TO_ADDR
// y := GetY ( enemy ) ;
42483: LD_ADDR_VAR 0 5
42487: PUSH
42488: LD_VAR 0 10
42492: PPUSH
42493: CALL_OW 251
42497: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42498: LD_ADDR_VAR 0 6
42502: PUSH
42503: LD_VAR 0 4
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PPUSH
42512: LD_INT 1
42514: PPUSH
42515: CALL_OW 12
42519: PLUS
42520: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42521: LD_ADDR_VAR 0 7
42525: PUSH
42526: LD_VAR 0 5
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PPUSH
42535: LD_INT 1
42537: PPUSH
42538: CALL_OW 12
42542: PLUS
42543: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42544: LD_VAR 0 6
42548: PPUSH
42549: LD_VAR 0 7
42553: PPUSH
42554: CALL_OW 488
42558: NOT
42559: IFFALSE 42581
// begin _x := x ;
42561: LD_ADDR_VAR 0 6
42565: PUSH
42566: LD_VAR 0 4
42570: ST_TO_ADDR
// _y := y ;
42571: LD_ADDR_VAR 0 7
42575: PUSH
42576: LD_VAR 0 5
42580: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42581: LD_ADDR_VAR 0 3
42585: PUSH
42586: LD_INT 1
42588: PPUSH
42589: LD_VAR 0 14
42593: PPUSH
42594: CALL_OW 12
42598: ST_TO_ADDR
// case i of 1 :
42599: LD_VAR 0 3
42603: PUSH
42604: LD_INT 1
42606: DOUBLE
42607: EQUAL
42608: IFTRUE 42612
42610: GO 42629
42612: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42613: LD_VAR 0 1
42617: PPUSH
42618: LD_VAR 0 10
42622: PPUSH
42623: CALL_OW 115
42627: GO 42690
42629: LD_INT 2
42631: DOUBLE
42632: EQUAL
42633: IFTRUE 42637
42635: GO 42659
42637: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42638: LD_VAR 0 1
42642: PPUSH
42643: LD_VAR 0 6
42647: PPUSH
42648: LD_VAR 0 7
42652: PPUSH
42653: CALL_OW 153
42657: GO 42690
42659: LD_INT 3
42661: DOUBLE
42662: EQUAL
42663: IFTRUE 42667
42665: GO 42689
42667: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42668: LD_VAR 0 1
42672: PPUSH
42673: LD_VAR 0 6
42677: PPUSH
42678: LD_VAR 0 7
42682: PPUSH
42683: CALL_OW 154
42687: GO 42690
42689: POP
// end ;
42690: LD_VAR 0 2
42694: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42695: LD_INT 0
42697: PPUSH
42698: PPUSH
42699: PPUSH
42700: PPUSH
42701: PPUSH
42702: PPUSH
// if not unit or not building then
42703: LD_VAR 0 1
42707: NOT
42708: PUSH
42709: LD_VAR 0 2
42713: NOT
42714: OR
42715: IFFALSE 42719
// exit ;
42717: GO 42877
// x := GetX ( building ) ;
42719: LD_ADDR_VAR 0 5
42723: PUSH
42724: LD_VAR 0 2
42728: PPUSH
42729: CALL_OW 250
42733: ST_TO_ADDR
// y := GetY ( building ) ;
42734: LD_ADDR_VAR 0 6
42738: PUSH
42739: LD_VAR 0 2
42743: PPUSH
42744: CALL_OW 251
42748: ST_TO_ADDR
// for i = 0 to 5 do
42749: LD_ADDR_VAR 0 4
42753: PUSH
42754: DOUBLE
42755: LD_INT 0
42757: DEC
42758: ST_TO_ADDR
42759: LD_INT 5
42761: PUSH
42762: FOR_TO
42763: IFFALSE 42875
// begin _x := ShiftX ( x , i , 3 ) ;
42765: LD_ADDR_VAR 0 7
42769: PUSH
42770: LD_VAR 0 5
42774: PPUSH
42775: LD_VAR 0 4
42779: PPUSH
42780: LD_INT 3
42782: PPUSH
42783: CALL_OW 272
42787: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42788: LD_ADDR_VAR 0 8
42792: PUSH
42793: LD_VAR 0 6
42797: PPUSH
42798: LD_VAR 0 4
42802: PPUSH
42803: LD_INT 3
42805: PPUSH
42806: CALL_OW 273
42810: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42811: LD_VAR 0 7
42815: PPUSH
42816: LD_VAR 0 8
42820: PPUSH
42821: CALL_OW 488
42825: NOT
42826: IFFALSE 42830
// continue ;
42828: GO 42762
// if HexInfo ( _x , _y ) = 0 then
42830: LD_VAR 0 7
42834: PPUSH
42835: LD_VAR 0 8
42839: PPUSH
42840: CALL_OW 428
42844: PUSH
42845: LD_INT 0
42847: EQUAL
42848: IFFALSE 42873
// begin ComMoveXY ( unit , _x , _y ) ;
42850: LD_VAR 0 1
42854: PPUSH
42855: LD_VAR 0 7
42859: PPUSH
42860: LD_VAR 0 8
42864: PPUSH
42865: CALL_OW 111
// exit ;
42869: POP
42870: POP
42871: GO 42877
// end ; end ;
42873: GO 42762
42875: POP
42876: POP
// end ;
42877: LD_VAR 0 3
42881: RET
// export function ScanBase ( side , base_area ) ; begin
42882: LD_INT 0
42884: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42885: LD_ADDR_VAR 0 3
42889: PUSH
42890: LD_VAR 0 2
42894: PPUSH
42895: LD_INT 81
42897: PUSH
42898: LD_VAR 0 1
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PPUSH
42907: CALL_OW 70
42911: ST_TO_ADDR
// end ;
42912: LD_VAR 0 3
42916: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42917: LD_INT 0
42919: PPUSH
42920: PPUSH
42921: PPUSH
42922: PPUSH
// result := false ;
42923: LD_ADDR_VAR 0 2
42927: PUSH
42928: LD_INT 0
42930: ST_TO_ADDR
// side := GetSide ( unit ) ;
42931: LD_ADDR_VAR 0 3
42935: PUSH
42936: LD_VAR 0 1
42940: PPUSH
42941: CALL_OW 255
42945: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42946: LD_ADDR_VAR 0 4
42950: PUSH
42951: LD_VAR 0 1
42955: PPUSH
42956: CALL_OW 248
42960: ST_TO_ADDR
// case nat of 1 :
42961: LD_VAR 0 4
42965: PUSH
42966: LD_INT 1
42968: DOUBLE
42969: EQUAL
42970: IFTRUE 42974
42972: GO 42985
42974: POP
// tech := tech_lassight ; 2 :
42975: LD_ADDR_VAR 0 5
42979: PUSH
42980: LD_INT 12
42982: ST_TO_ADDR
42983: GO 43024
42985: LD_INT 2
42987: DOUBLE
42988: EQUAL
42989: IFTRUE 42993
42991: GO 43004
42993: POP
// tech := tech_mortar ; 3 :
42994: LD_ADDR_VAR 0 5
42998: PUSH
42999: LD_INT 41
43001: ST_TO_ADDR
43002: GO 43024
43004: LD_INT 3
43006: DOUBLE
43007: EQUAL
43008: IFTRUE 43012
43010: GO 43023
43012: POP
// tech := tech_bazooka ; end ;
43013: LD_ADDR_VAR 0 5
43017: PUSH
43018: LD_INT 44
43020: ST_TO_ADDR
43021: GO 43024
43023: POP
// if Researched ( side , tech ) then
43024: LD_VAR 0 3
43028: PPUSH
43029: LD_VAR 0 5
43033: PPUSH
43034: CALL_OW 325
43038: IFFALSE 43065
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43040: LD_ADDR_VAR 0 2
43044: PUSH
43045: LD_INT 5
43047: PUSH
43048: LD_INT 8
43050: PUSH
43051: LD_INT 9
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: LIST
43058: PUSH
43059: LD_VAR 0 4
43063: ARRAY
43064: ST_TO_ADDR
// end ;
43065: LD_VAR 0 2
43069: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43070: LD_INT 0
43072: PPUSH
43073: PPUSH
43074: PPUSH
// if not mines then
43075: LD_VAR 0 2
43079: NOT
43080: IFFALSE 43084
// exit ;
43082: GO 43228
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43084: LD_ADDR_VAR 0 5
43088: PUSH
43089: LD_INT 81
43091: PUSH
43092: LD_VAR 0 1
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 3
43103: PUSH
43104: LD_INT 21
43106: PUSH
43107: LD_INT 3
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PPUSH
43122: CALL_OW 69
43126: ST_TO_ADDR
// for i in mines do
43127: LD_ADDR_VAR 0 4
43131: PUSH
43132: LD_VAR 0 2
43136: PUSH
43137: FOR_IN
43138: IFFALSE 43226
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43140: LD_VAR 0 4
43144: PUSH
43145: LD_INT 1
43147: ARRAY
43148: PPUSH
43149: LD_VAR 0 4
43153: PUSH
43154: LD_INT 2
43156: ARRAY
43157: PPUSH
43158: CALL_OW 458
43162: NOT
43163: IFFALSE 43167
// continue ;
43165: GO 43137
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43167: LD_VAR 0 4
43171: PUSH
43172: LD_INT 1
43174: ARRAY
43175: PPUSH
43176: LD_VAR 0 4
43180: PUSH
43181: LD_INT 2
43183: ARRAY
43184: PPUSH
43185: CALL_OW 428
43189: PUSH
43190: LD_VAR 0 5
43194: IN
43195: IFFALSE 43224
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43197: LD_VAR 0 4
43201: PUSH
43202: LD_INT 1
43204: ARRAY
43205: PPUSH
43206: LD_VAR 0 4
43210: PUSH
43211: LD_INT 2
43213: ARRAY
43214: PPUSH
43215: LD_VAR 0 1
43219: PPUSH
43220: CALL_OW 456
// end ;
43224: GO 43137
43226: POP
43227: POP
// end ;
43228: LD_VAR 0 3
43232: RET
// export function Count ( array ) ; var i ; begin
43233: LD_INT 0
43235: PPUSH
43236: PPUSH
// result := 0 ;
43237: LD_ADDR_VAR 0 2
43241: PUSH
43242: LD_INT 0
43244: ST_TO_ADDR
// for i in array do
43245: LD_ADDR_VAR 0 3
43249: PUSH
43250: LD_VAR 0 1
43254: PUSH
43255: FOR_IN
43256: IFFALSE 43280
// if i then
43258: LD_VAR 0 3
43262: IFFALSE 43278
// result := result + 1 ;
43264: LD_ADDR_VAR 0 2
43268: PUSH
43269: LD_VAR 0 2
43273: PUSH
43274: LD_INT 1
43276: PLUS
43277: ST_TO_ADDR
43278: GO 43255
43280: POP
43281: POP
// end ;
43282: LD_VAR 0 2
43286: RET
// export function IsEmpty ( building ) ; begin
43287: LD_INT 0
43289: PPUSH
// if not building then
43290: LD_VAR 0 1
43294: NOT
43295: IFFALSE 43299
// exit ;
43297: GO 43342
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43299: LD_ADDR_VAR 0 2
43303: PUSH
43304: LD_VAR 0 1
43308: PUSH
43309: LD_INT 22
43311: PUSH
43312: LD_VAR 0 1
43316: PPUSH
43317: CALL_OW 255
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 58
43328: PUSH
43329: EMPTY
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PPUSH
43336: CALL_OW 69
43340: IN
43341: ST_TO_ADDR
// end ;
43342: LD_VAR 0 2
43346: RET
// export function IsNotFull ( building ) ; var places ; begin
43347: LD_INT 0
43349: PPUSH
43350: PPUSH
// if not building then
43351: LD_VAR 0 1
43355: NOT
43356: IFFALSE 43360
// exit ;
43358: GO 43531
// result := false ;
43360: LD_ADDR_VAR 0 2
43364: PUSH
43365: LD_INT 0
43367: ST_TO_ADDR
// places := 0 ;
43368: LD_ADDR_VAR 0 3
43372: PUSH
43373: LD_INT 0
43375: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
43376: LD_VAR 0 1
43380: PPUSH
43381: CALL_OW 266
43385: PUSH
43386: LD_INT 0
43388: DOUBLE
43389: EQUAL
43390: IFTRUE 43448
43392: LD_INT 1
43394: DOUBLE
43395: EQUAL
43396: IFTRUE 43448
43398: LD_INT 6
43400: DOUBLE
43401: EQUAL
43402: IFTRUE 43448
43404: LD_INT 7
43406: DOUBLE
43407: EQUAL
43408: IFTRUE 43448
43410: LD_INT 8
43412: DOUBLE
43413: EQUAL
43414: IFTRUE 43448
43416: LD_INT 4
43418: DOUBLE
43419: EQUAL
43420: IFTRUE 43448
43422: LD_INT 5
43424: DOUBLE
43425: EQUAL
43426: IFTRUE 43448
43428: LD_INT 2
43430: DOUBLE
43431: EQUAL
43432: IFTRUE 43448
43434: LD_INT 3
43436: DOUBLE
43437: EQUAL
43438: IFTRUE 43448
43440: LD_INT 35
43442: DOUBLE
43443: EQUAL
43444: IFTRUE 43448
43446: GO 43459
43448: POP
// places := 6 ; b_bunker , b_breastwork :
43449: LD_ADDR_VAR 0 3
43453: PUSH
43454: LD_INT 6
43456: ST_TO_ADDR
43457: GO 43504
43459: LD_INT 32
43461: DOUBLE
43462: EQUAL
43463: IFTRUE 43473
43465: LD_INT 31
43467: DOUBLE
43468: EQUAL
43469: IFTRUE 43473
43471: GO 43484
43473: POP
// places := 1 ; b_control_tower :
43474: LD_ADDR_VAR 0 3
43478: PUSH
43479: LD_INT 1
43481: ST_TO_ADDR
43482: GO 43504
43484: LD_INT 36
43486: DOUBLE
43487: EQUAL
43488: IFTRUE 43492
43490: GO 43503
43492: POP
// places := 3 ; end ;
43493: LD_ADDR_VAR 0 3
43497: PUSH
43498: LD_INT 3
43500: ST_TO_ADDR
43501: GO 43504
43503: POP
// if places then
43504: LD_VAR 0 3
43508: IFFALSE 43531
// result := UnitsInside ( building ) < places ;
43510: LD_ADDR_VAR 0 2
43514: PUSH
43515: LD_VAR 0 1
43519: PPUSH
43520: CALL_OW 313
43524: PUSH
43525: LD_VAR 0 3
43529: LESS
43530: ST_TO_ADDR
// end ;
43531: LD_VAR 0 2
43535: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43536: LD_INT 0
43538: PPUSH
43539: PPUSH
43540: PPUSH
43541: PPUSH
// tmp := [ ] ;
43542: LD_ADDR_VAR 0 3
43546: PUSH
43547: EMPTY
43548: ST_TO_ADDR
// list := [ ] ;
43549: LD_ADDR_VAR 0 5
43553: PUSH
43554: EMPTY
43555: ST_TO_ADDR
// for i = 16 to 25 do
43556: LD_ADDR_VAR 0 4
43560: PUSH
43561: DOUBLE
43562: LD_INT 16
43564: DEC
43565: ST_TO_ADDR
43566: LD_INT 25
43568: PUSH
43569: FOR_TO
43570: IFFALSE 43643
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43572: LD_ADDR_VAR 0 3
43576: PUSH
43577: LD_VAR 0 3
43581: PUSH
43582: LD_INT 22
43584: PUSH
43585: LD_VAR 0 1
43589: PPUSH
43590: CALL_OW 255
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 91
43601: PUSH
43602: LD_VAR 0 1
43606: PUSH
43607: LD_INT 6
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 30
43617: PUSH
43618: LD_VAR 0 4
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: LIST
43631: PUSH
43632: EMPTY
43633: LIST
43634: PPUSH
43635: CALL_OW 69
43639: ADD
43640: ST_TO_ADDR
43641: GO 43569
43643: POP
43644: POP
// for i = 1 to tmp do
43645: LD_ADDR_VAR 0 4
43649: PUSH
43650: DOUBLE
43651: LD_INT 1
43653: DEC
43654: ST_TO_ADDR
43655: LD_VAR 0 3
43659: PUSH
43660: FOR_TO
43661: IFFALSE 43749
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43663: LD_ADDR_VAR 0 5
43667: PUSH
43668: LD_VAR 0 5
43672: PUSH
43673: LD_VAR 0 3
43677: PUSH
43678: LD_VAR 0 4
43682: ARRAY
43683: PPUSH
43684: CALL_OW 266
43688: PUSH
43689: LD_VAR 0 3
43693: PUSH
43694: LD_VAR 0 4
43698: ARRAY
43699: PPUSH
43700: CALL_OW 250
43704: PUSH
43705: LD_VAR 0 3
43709: PUSH
43710: LD_VAR 0 4
43714: ARRAY
43715: PPUSH
43716: CALL_OW 251
43720: PUSH
43721: LD_VAR 0 3
43725: PUSH
43726: LD_VAR 0 4
43730: ARRAY
43731: PPUSH
43732: CALL_OW 254
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: PUSH
43743: EMPTY
43744: LIST
43745: ADD
43746: ST_TO_ADDR
43747: GO 43660
43749: POP
43750: POP
// result := list ;
43751: LD_ADDR_VAR 0 2
43755: PUSH
43756: LD_VAR 0 5
43760: ST_TO_ADDR
// end ;
43761: LD_VAR 0 2
43765: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43766: LD_INT 0
43768: PPUSH
43769: PPUSH
43770: PPUSH
43771: PPUSH
43772: PPUSH
43773: PPUSH
43774: PPUSH
// if not factory then
43775: LD_VAR 0 1
43779: NOT
43780: IFFALSE 43784
// exit ;
43782: GO 44377
// if control = control_apeman then
43784: LD_VAR 0 4
43788: PUSH
43789: LD_INT 5
43791: EQUAL
43792: IFFALSE 43901
// begin tmp := UnitsInside ( factory ) ;
43794: LD_ADDR_VAR 0 8
43798: PUSH
43799: LD_VAR 0 1
43803: PPUSH
43804: CALL_OW 313
43808: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43809: LD_VAR 0 8
43813: PPUSH
43814: LD_INT 25
43816: PUSH
43817: LD_INT 12
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PPUSH
43824: CALL_OW 72
43828: NOT
43829: IFFALSE 43839
// control := control_manual ;
43831: LD_ADDR_VAR 0 4
43835: PUSH
43836: LD_INT 1
43838: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43839: LD_ADDR_VAR 0 8
43843: PUSH
43844: LD_VAR 0 1
43848: PPUSH
43849: CALL 43536 0 1
43853: ST_TO_ADDR
// if tmp then
43854: LD_VAR 0 8
43858: IFFALSE 43901
// begin for i in tmp do
43860: LD_ADDR_VAR 0 7
43864: PUSH
43865: LD_VAR 0 8
43869: PUSH
43870: FOR_IN
43871: IFFALSE 43899
// if i [ 1 ] = b_ext_radio then
43873: LD_VAR 0 7
43877: PUSH
43878: LD_INT 1
43880: ARRAY
43881: PUSH
43882: LD_INT 22
43884: EQUAL
43885: IFFALSE 43897
// begin control := control_remote ;
43887: LD_ADDR_VAR 0 4
43891: PUSH
43892: LD_INT 2
43894: ST_TO_ADDR
// break ;
43895: GO 43899
// end ;
43897: GO 43870
43899: POP
43900: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43901: LD_VAR 0 1
43905: PPUSH
43906: LD_VAR 0 2
43910: PPUSH
43911: LD_VAR 0 3
43915: PPUSH
43916: LD_VAR 0 4
43920: PPUSH
43921: LD_VAR 0 5
43925: PPUSH
43926: CALL_OW 448
43930: IFFALSE 43965
// begin result := [ chassis , engine , control , weapon ] ;
43932: LD_ADDR_VAR 0 6
43936: PUSH
43937: LD_VAR 0 2
43941: PUSH
43942: LD_VAR 0 3
43946: PUSH
43947: LD_VAR 0 4
43951: PUSH
43952: LD_VAR 0 5
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: ST_TO_ADDR
// exit ;
43963: GO 44377
// end ; _chassis := AvailableChassisList ( factory ) ;
43965: LD_ADDR_VAR 0 9
43969: PUSH
43970: LD_VAR 0 1
43974: PPUSH
43975: CALL_OW 475
43979: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43980: LD_ADDR_VAR 0 11
43984: PUSH
43985: LD_VAR 0 1
43989: PPUSH
43990: CALL_OW 476
43994: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43995: LD_ADDR_VAR 0 12
43999: PUSH
44000: LD_VAR 0 1
44004: PPUSH
44005: CALL_OW 477
44009: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44010: LD_ADDR_VAR 0 10
44014: PUSH
44015: LD_VAR 0 1
44019: PPUSH
44020: CALL_OW 478
44024: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44025: LD_VAR 0 9
44029: NOT
44030: PUSH
44031: LD_VAR 0 11
44035: NOT
44036: OR
44037: PUSH
44038: LD_VAR 0 12
44042: NOT
44043: OR
44044: PUSH
44045: LD_VAR 0 10
44049: NOT
44050: OR
44051: IFFALSE 44086
// begin result := [ chassis , engine , control , weapon ] ;
44053: LD_ADDR_VAR 0 6
44057: PUSH
44058: LD_VAR 0 2
44062: PUSH
44063: LD_VAR 0 3
44067: PUSH
44068: LD_VAR 0 4
44072: PUSH
44073: LD_VAR 0 5
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: ST_TO_ADDR
// exit ;
44084: GO 44377
// end ; if not chassis in _chassis then
44086: LD_VAR 0 2
44090: PUSH
44091: LD_VAR 0 9
44095: IN
44096: NOT
44097: IFFALSE 44123
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44099: LD_ADDR_VAR 0 2
44103: PUSH
44104: LD_VAR 0 9
44108: PUSH
44109: LD_INT 1
44111: PPUSH
44112: LD_VAR 0 9
44116: PPUSH
44117: CALL_OW 12
44121: ARRAY
44122: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44123: LD_VAR 0 2
44127: PPUSH
44128: LD_VAR 0 3
44132: PPUSH
44133: CALL 44382 0 2
44137: NOT
44138: IFFALSE 44197
// repeat engine := _engine [ 1 ] ;
44140: LD_ADDR_VAR 0 3
44144: PUSH
44145: LD_VAR 0 11
44149: PUSH
44150: LD_INT 1
44152: ARRAY
44153: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44154: LD_ADDR_VAR 0 11
44158: PUSH
44159: LD_VAR 0 11
44163: PPUSH
44164: LD_INT 1
44166: PPUSH
44167: CALL_OW 3
44171: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44172: LD_VAR 0 2
44176: PPUSH
44177: LD_VAR 0 3
44181: PPUSH
44182: CALL 44382 0 2
44186: PUSH
44187: LD_VAR 0 11
44191: PUSH
44192: EMPTY
44193: EQUAL
44194: OR
44195: IFFALSE 44140
// if not control in _control then
44197: LD_VAR 0 4
44201: PUSH
44202: LD_VAR 0 12
44206: IN
44207: NOT
44208: IFFALSE 44234
// control := _control [ rand ( 1 , _control ) ] ;
44210: LD_ADDR_VAR 0 4
44214: PUSH
44215: LD_VAR 0 12
44219: PUSH
44220: LD_INT 1
44222: PPUSH
44223: LD_VAR 0 12
44227: PPUSH
44228: CALL_OW 12
44232: ARRAY
44233: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44234: LD_VAR 0 2
44238: PPUSH
44239: LD_VAR 0 5
44243: PPUSH
44244: CALL 44602 0 2
44248: NOT
44249: IFFALSE 44308
// repeat weapon := _weapon [ 1 ] ;
44251: LD_ADDR_VAR 0 5
44255: PUSH
44256: LD_VAR 0 10
44260: PUSH
44261: LD_INT 1
44263: ARRAY
44264: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44265: LD_ADDR_VAR 0 10
44269: PUSH
44270: LD_VAR 0 10
44274: PPUSH
44275: LD_INT 1
44277: PPUSH
44278: CALL_OW 3
44282: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44283: LD_VAR 0 2
44287: PPUSH
44288: LD_VAR 0 5
44292: PPUSH
44293: CALL 44602 0 2
44297: PUSH
44298: LD_VAR 0 10
44302: PUSH
44303: EMPTY
44304: EQUAL
44305: OR
44306: IFFALSE 44251
// result := [ ] ;
44308: LD_ADDR_VAR 0 6
44312: PUSH
44313: EMPTY
44314: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44315: LD_VAR 0 1
44319: PPUSH
44320: LD_VAR 0 2
44324: PPUSH
44325: LD_VAR 0 3
44329: PPUSH
44330: LD_VAR 0 4
44334: PPUSH
44335: LD_VAR 0 5
44339: PPUSH
44340: CALL_OW 448
44344: IFFALSE 44377
// result := [ chassis , engine , control , weapon ] ;
44346: LD_ADDR_VAR 0 6
44350: PUSH
44351: LD_VAR 0 2
44355: PUSH
44356: LD_VAR 0 3
44360: PUSH
44361: LD_VAR 0 4
44365: PUSH
44366: LD_VAR 0 5
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: ST_TO_ADDR
// end ;
44377: LD_VAR 0 6
44381: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44382: LD_INT 0
44384: PPUSH
// if not chassis or not engine then
44385: LD_VAR 0 1
44389: NOT
44390: PUSH
44391: LD_VAR 0 2
44395: NOT
44396: OR
44397: IFFALSE 44401
// exit ;
44399: GO 44597
// case engine of engine_solar :
44401: LD_VAR 0 2
44405: PUSH
44406: LD_INT 2
44408: DOUBLE
44409: EQUAL
44410: IFTRUE 44414
44412: GO 44452
44414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44415: LD_ADDR_VAR 0 3
44419: PUSH
44420: LD_INT 11
44422: PUSH
44423: LD_INT 12
44425: PUSH
44426: LD_INT 13
44428: PUSH
44429: LD_INT 14
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: LD_INT 3
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: ST_TO_ADDR
44450: GO 44581
44452: LD_INT 1
44454: DOUBLE
44455: EQUAL
44456: IFTRUE 44460
44458: GO 44522
44460: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44461: LD_ADDR_VAR 0 3
44465: PUSH
44466: LD_INT 11
44468: PUSH
44469: LD_INT 12
44471: PUSH
44472: LD_INT 13
44474: PUSH
44475: LD_INT 14
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: LD_INT 3
44486: PUSH
44487: LD_INT 4
44489: PUSH
44490: LD_INT 5
44492: PUSH
44493: LD_INT 21
44495: PUSH
44496: LD_INT 23
44498: PUSH
44499: LD_INT 22
44501: PUSH
44502: LD_INT 24
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: ST_TO_ADDR
44520: GO 44581
44522: LD_INT 3
44524: DOUBLE
44525: EQUAL
44526: IFTRUE 44530
44528: GO 44580
44530: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44531: LD_ADDR_VAR 0 3
44535: PUSH
44536: LD_INT 13
44538: PUSH
44539: LD_INT 14
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: LD_INT 4
44550: PUSH
44551: LD_INT 5
44553: PUSH
44554: LD_INT 21
44556: PUSH
44557: LD_INT 22
44559: PUSH
44560: LD_INT 23
44562: PUSH
44563: LD_INT 24
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: ST_TO_ADDR
44578: GO 44581
44580: POP
// result := ( chassis in result ) ;
44581: LD_ADDR_VAR 0 3
44585: PUSH
44586: LD_VAR 0 1
44590: PUSH
44591: LD_VAR 0 3
44595: IN
44596: ST_TO_ADDR
// end ;
44597: LD_VAR 0 3
44601: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44602: LD_INT 0
44604: PPUSH
// if not chassis or not weapon then
44605: LD_VAR 0 1
44609: NOT
44610: PUSH
44611: LD_VAR 0 2
44615: NOT
44616: OR
44617: IFFALSE 44621
// exit ;
44619: GO 45683
// case weapon of us_machine_gun :
44621: LD_VAR 0 2
44625: PUSH
44626: LD_INT 2
44628: DOUBLE
44629: EQUAL
44630: IFTRUE 44634
44632: GO 44664
44634: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44635: LD_ADDR_VAR 0 3
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 3
44648: PUSH
44649: LD_INT 4
44651: PUSH
44652: LD_INT 5
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: ST_TO_ADDR
44662: GO 45667
44664: LD_INT 3
44666: DOUBLE
44667: EQUAL
44668: IFTRUE 44672
44670: GO 44702
44672: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44673: LD_ADDR_VAR 0 3
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: LD_INT 4
44689: PUSH
44690: LD_INT 5
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: ST_TO_ADDR
44700: GO 45667
44702: LD_INT 11
44704: DOUBLE
44705: EQUAL
44706: IFTRUE 44710
44708: GO 44740
44710: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44711: LD_ADDR_VAR 0 3
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: LD_INT 3
44724: PUSH
44725: LD_INT 4
44727: PUSH
44728: LD_INT 5
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: ST_TO_ADDR
44738: GO 45667
44740: LD_INT 4
44742: DOUBLE
44743: EQUAL
44744: IFTRUE 44748
44746: GO 44774
44748: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44749: LD_ADDR_VAR 0 3
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: LD_INT 4
44762: PUSH
44763: LD_INT 5
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: ST_TO_ADDR
44772: GO 45667
44774: LD_INT 5
44776: DOUBLE
44777: EQUAL
44778: IFTRUE 44782
44780: GO 44808
44782: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44783: LD_ADDR_VAR 0 3
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 3
44793: PUSH
44794: LD_INT 4
44796: PUSH
44797: LD_INT 5
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: ST_TO_ADDR
44806: GO 45667
44808: LD_INT 9
44810: DOUBLE
44811: EQUAL
44812: IFTRUE 44816
44814: GO 44842
44816: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44817: LD_ADDR_VAR 0 3
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: LD_INT 3
44827: PUSH
44828: LD_INT 4
44830: PUSH
44831: LD_INT 5
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: ST_TO_ADDR
44840: GO 45667
44842: LD_INT 7
44844: DOUBLE
44845: EQUAL
44846: IFTRUE 44850
44848: GO 44876
44850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44851: LD_ADDR_VAR 0 3
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 3
44861: PUSH
44862: LD_INT 4
44864: PUSH
44865: LD_INT 5
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: ST_TO_ADDR
44874: GO 45667
44876: LD_INT 12
44878: DOUBLE
44879: EQUAL
44880: IFTRUE 44884
44882: GO 44910
44884: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44885: LD_ADDR_VAR 0 3
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: LD_INT 3
44895: PUSH
44896: LD_INT 4
44898: PUSH
44899: LD_INT 5
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: ST_TO_ADDR
44908: GO 45667
44910: LD_INT 13
44912: DOUBLE
44913: EQUAL
44914: IFTRUE 44918
44916: GO 44944
44918: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44919: LD_ADDR_VAR 0 3
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: LD_INT 3
44929: PUSH
44930: LD_INT 4
44932: PUSH
44933: LD_INT 5
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: ST_TO_ADDR
44942: GO 45667
44944: LD_INT 14
44946: DOUBLE
44947: EQUAL
44948: IFTRUE 44952
44950: GO 44970
44952: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44953: LD_ADDR_VAR 0 3
44957: PUSH
44958: LD_INT 4
44960: PUSH
44961: LD_INT 5
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: ST_TO_ADDR
44968: GO 45667
44970: LD_INT 6
44972: DOUBLE
44973: EQUAL
44974: IFTRUE 44978
44976: GO 44996
44978: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44979: LD_ADDR_VAR 0 3
44983: PUSH
44984: LD_INT 4
44986: PUSH
44987: LD_INT 5
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: ST_TO_ADDR
44994: GO 45667
44996: LD_INT 10
44998: DOUBLE
44999: EQUAL
45000: IFTRUE 45004
45002: GO 45022
45004: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45005: LD_ADDR_VAR 0 3
45009: PUSH
45010: LD_INT 4
45012: PUSH
45013: LD_INT 5
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: ST_TO_ADDR
45020: GO 45667
45022: LD_INT 22
45024: DOUBLE
45025: EQUAL
45026: IFTRUE 45030
45028: GO 45056
45030: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45031: LD_ADDR_VAR 0 3
45035: PUSH
45036: LD_INT 11
45038: PUSH
45039: LD_INT 12
45041: PUSH
45042: LD_INT 13
45044: PUSH
45045: LD_INT 14
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: ST_TO_ADDR
45054: GO 45667
45056: LD_INT 23
45058: DOUBLE
45059: EQUAL
45060: IFTRUE 45064
45062: GO 45090
45064: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45065: LD_ADDR_VAR 0 3
45069: PUSH
45070: LD_INT 11
45072: PUSH
45073: LD_INT 12
45075: PUSH
45076: LD_INT 13
45078: PUSH
45079: LD_INT 14
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: ST_TO_ADDR
45088: GO 45667
45090: LD_INT 24
45092: DOUBLE
45093: EQUAL
45094: IFTRUE 45098
45096: GO 45124
45098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45099: LD_ADDR_VAR 0 3
45103: PUSH
45104: LD_INT 11
45106: PUSH
45107: LD_INT 12
45109: PUSH
45110: LD_INT 13
45112: PUSH
45113: LD_INT 14
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: ST_TO_ADDR
45122: GO 45667
45124: LD_INT 30
45126: DOUBLE
45127: EQUAL
45128: IFTRUE 45132
45130: GO 45158
45132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45133: LD_ADDR_VAR 0 3
45137: PUSH
45138: LD_INT 11
45140: PUSH
45141: LD_INT 12
45143: PUSH
45144: LD_INT 13
45146: PUSH
45147: LD_INT 14
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: ST_TO_ADDR
45156: GO 45667
45158: LD_INT 25
45160: DOUBLE
45161: EQUAL
45162: IFTRUE 45166
45164: GO 45184
45166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45167: LD_ADDR_VAR 0 3
45171: PUSH
45172: LD_INT 13
45174: PUSH
45175: LD_INT 14
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: ST_TO_ADDR
45182: GO 45667
45184: LD_INT 27
45186: DOUBLE
45187: EQUAL
45188: IFTRUE 45192
45190: GO 45210
45192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45193: LD_ADDR_VAR 0 3
45197: PUSH
45198: LD_INT 13
45200: PUSH
45201: LD_INT 14
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: ST_TO_ADDR
45208: GO 45667
45210: LD_EXP 54
45214: DOUBLE
45215: EQUAL
45216: IFTRUE 45220
45218: GO 45246
45220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45221: LD_ADDR_VAR 0 3
45225: PUSH
45226: LD_INT 11
45228: PUSH
45229: LD_INT 12
45231: PUSH
45232: LD_INT 13
45234: PUSH
45235: LD_INT 14
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: ST_TO_ADDR
45244: GO 45667
45246: LD_INT 28
45248: DOUBLE
45249: EQUAL
45250: IFTRUE 45254
45252: GO 45272
45254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45255: LD_ADDR_VAR 0 3
45259: PUSH
45260: LD_INT 13
45262: PUSH
45263: LD_INT 14
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: ST_TO_ADDR
45270: GO 45667
45272: LD_INT 29
45274: DOUBLE
45275: EQUAL
45276: IFTRUE 45280
45278: GO 45298
45280: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45281: LD_ADDR_VAR 0 3
45285: PUSH
45286: LD_INT 13
45288: PUSH
45289: LD_INT 14
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: ST_TO_ADDR
45296: GO 45667
45298: LD_INT 31
45300: DOUBLE
45301: EQUAL
45302: IFTRUE 45306
45304: GO 45324
45306: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45307: LD_ADDR_VAR 0 3
45311: PUSH
45312: LD_INT 13
45314: PUSH
45315: LD_INT 14
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: ST_TO_ADDR
45322: GO 45667
45324: LD_INT 26
45326: DOUBLE
45327: EQUAL
45328: IFTRUE 45332
45330: GO 45350
45332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45333: LD_ADDR_VAR 0 3
45337: PUSH
45338: LD_INT 13
45340: PUSH
45341: LD_INT 14
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: ST_TO_ADDR
45348: GO 45667
45350: LD_INT 42
45352: DOUBLE
45353: EQUAL
45354: IFTRUE 45358
45356: GO 45384
45358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45359: LD_ADDR_VAR 0 3
45363: PUSH
45364: LD_INT 21
45366: PUSH
45367: LD_INT 22
45369: PUSH
45370: LD_INT 23
45372: PUSH
45373: LD_INT 24
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: ST_TO_ADDR
45382: GO 45667
45384: LD_INT 43
45386: DOUBLE
45387: EQUAL
45388: IFTRUE 45392
45390: GO 45418
45392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45393: LD_ADDR_VAR 0 3
45397: PUSH
45398: LD_INT 21
45400: PUSH
45401: LD_INT 22
45403: PUSH
45404: LD_INT 23
45406: PUSH
45407: LD_INT 24
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: ST_TO_ADDR
45416: GO 45667
45418: LD_INT 44
45420: DOUBLE
45421: EQUAL
45422: IFTRUE 45426
45424: GO 45452
45426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45427: LD_ADDR_VAR 0 3
45431: PUSH
45432: LD_INT 21
45434: PUSH
45435: LD_INT 22
45437: PUSH
45438: LD_INT 23
45440: PUSH
45441: LD_INT 24
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: ST_TO_ADDR
45450: GO 45667
45452: LD_INT 45
45454: DOUBLE
45455: EQUAL
45456: IFTRUE 45460
45458: GO 45486
45460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45461: LD_ADDR_VAR 0 3
45465: PUSH
45466: LD_INT 21
45468: PUSH
45469: LD_INT 22
45471: PUSH
45472: LD_INT 23
45474: PUSH
45475: LD_INT 24
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: ST_TO_ADDR
45484: GO 45667
45486: LD_INT 49
45488: DOUBLE
45489: EQUAL
45490: IFTRUE 45494
45492: GO 45520
45494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45495: LD_ADDR_VAR 0 3
45499: PUSH
45500: LD_INT 21
45502: PUSH
45503: LD_INT 22
45505: PUSH
45506: LD_INT 23
45508: PUSH
45509: LD_INT 24
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: ST_TO_ADDR
45518: GO 45667
45520: LD_INT 51
45522: DOUBLE
45523: EQUAL
45524: IFTRUE 45528
45526: GO 45554
45528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45529: LD_ADDR_VAR 0 3
45533: PUSH
45534: LD_INT 21
45536: PUSH
45537: LD_INT 22
45539: PUSH
45540: LD_INT 23
45542: PUSH
45543: LD_INT 24
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: ST_TO_ADDR
45552: GO 45667
45554: LD_INT 52
45556: DOUBLE
45557: EQUAL
45558: IFTRUE 45562
45560: GO 45588
45562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45563: LD_ADDR_VAR 0 3
45567: PUSH
45568: LD_INT 21
45570: PUSH
45571: LD_INT 22
45573: PUSH
45574: LD_INT 23
45576: PUSH
45577: LD_INT 24
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: ST_TO_ADDR
45586: GO 45667
45588: LD_INT 53
45590: DOUBLE
45591: EQUAL
45592: IFTRUE 45596
45594: GO 45614
45596: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45597: LD_ADDR_VAR 0 3
45601: PUSH
45602: LD_INT 23
45604: PUSH
45605: LD_INT 24
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: ST_TO_ADDR
45612: GO 45667
45614: LD_INT 46
45616: DOUBLE
45617: EQUAL
45618: IFTRUE 45622
45620: GO 45640
45622: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45623: LD_ADDR_VAR 0 3
45627: PUSH
45628: LD_INT 23
45630: PUSH
45631: LD_INT 24
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: ST_TO_ADDR
45638: GO 45667
45640: LD_INT 47
45642: DOUBLE
45643: EQUAL
45644: IFTRUE 45648
45646: GO 45666
45648: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45649: LD_ADDR_VAR 0 3
45653: PUSH
45654: LD_INT 23
45656: PUSH
45657: LD_INT 24
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: ST_TO_ADDR
45664: GO 45667
45666: POP
// result := ( chassis in result ) ;
45667: LD_ADDR_VAR 0 3
45671: PUSH
45672: LD_VAR 0 1
45676: PUSH
45677: LD_VAR 0 3
45681: IN
45682: ST_TO_ADDR
// end ;
45683: LD_VAR 0 3
45687: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45688: LD_INT 0
45690: PPUSH
45691: PPUSH
45692: PPUSH
45693: PPUSH
45694: PPUSH
45695: PPUSH
45696: PPUSH
// result := array ;
45697: LD_ADDR_VAR 0 5
45701: PUSH
45702: LD_VAR 0 1
45706: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45707: LD_VAR 0 1
45711: NOT
45712: PUSH
45713: LD_VAR 0 2
45717: NOT
45718: OR
45719: PUSH
45720: LD_VAR 0 3
45724: NOT
45725: OR
45726: PUSH
45727: LD_VAR 0 2
45731: PUSH
45732: LD_VAR 0 1
45736: GREATER
45737: OR
45738: PUSH
45739: LD_VAR 0 3
45743: PUSH
45744: LD_VAR 0 1
45748: GREATER
45749: OR
45750: IFFALSE 45754
// exit ;
45752: GO 46050
// if direction then
45754: LD_VAR 0 4
45758: IFFALSE 45822
// begin d := 1 ;
45760: LD_ADDR_VAR 0 9
45764: PUSH
45765: LD_INT 1
45767: ST_TO_ADDR
// if i_from > i_to then
45768: LD_VAR 0 2
45772: PUSH
45773: LD_VAR 0 3
45777: GREATER
45778: IFFALSE 45804
// length := ( array - i_from ) + i_to else
45780: LD_ADDR_VAR 0 11
45784: PUSH
45785: LD_VAR 0 1
45789: PUSH
45790: LD_VAR 0 2
45794: MINUS
45795: PUSH
45796: LD_VAR 0 3
45800: PLUS
45801: ST_TO_ADDR
45802: GO 45820
// length := i_to - i_from ;
45804: LD_ADDR_VAR 0 11
45808: PUSH
45809: LD_VAR 0 3
45813: PUSH
45814: LD_VAR 0 2
45818: MINUS
45819: ST_TO_ADDR
// end else
45820: GO 45883
// begin d := - 1 ;
45822: LD_ADDR_VAR 0 9
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: ST_TO_ADDR
// if i_from > i_to then
45831: LD_VAR 0 2
45835: PUSH
45836: LD_VAR 0 3
45840: GREATER
45841: IFFALSE 45861
// length := i_from - i_to else
45843: LD_ADDR_VAR 0 11
45847: PUSH
45848: LD_VAR 0 2
45852: PUSH
45853: LD_VAR 0 3
45857: MINUS
45858: ST_TO_ADDR
45859: GO 45883
// length := ( array - i_to ) + i_from ;
45861: LD_ADDR_VAR 0 11
45865: PUSH
45866: LD_VAR 0 1
45870: PUSH
45871: LD_VAR 0 3
45875: MINUS
45876: PUSH
45877: LD_VAR 0 2
45881: PLUS
45882: ST_TO_ADDR
// end ; if not length then
45883: LD_VAR 0 11
45887: NOT
45888: IFFALSE 45892
// exit ;
45890: GO 46050
// tmp := array ;
45892: LD_ADDR_VAR 0 10
45896: PUSH
45897: LD_VAR 0 1
45901: ST_TO_ADDR
// for i = 1 to length do
45902: LD_ADDR_VAR 0 6
45906: PUSH
45907: DOUBLE
45908: LD_INT 1
45910: DEC
45911: ST_TO_ADDR
45912: LD_VAR 0 11
45916: PUSH
45917: FOR_TO
45918: IFFALSE 46038
// begin for j = 1 to array do
45920: LD_ADDR_VAR 0 7
45924: PUSH
45925: DOUBLE
45926: LD_INT 1
45928: DEC
45929: ST_TO_ADDR
45930: LD_VAR 0 1
45934: PUSH
45935: FOR_TO
45936: IFFALSE 46024
// begin k := j + d ;
45938: LD_ADDR_VAR 0 8
45942: PUSH
45943: LD_VAR 0 7
45947: PUSH
45948: LD_VAR 0 9
45952: PLUS
45953: ST_TO_ADDR
// if k > array then
45954: LD_VAR 0 8
45958: PUSH
45959: LD_VAR 0 1
45963: GREATER
45964: IFFALSE 45974
// k := 1 ;
45966: LD_ADDR_VAR 0 8
45970: PUSH
45971: LD_INT 1
45973: ST_TO_ADDR
// if not k then
45974: LD_VAR 0 8
45978: NOT
45979: IFFALSE 45991
// k := array ;
45981: LD_ADDR_VAR 0 8
45985: PUSH
45986: LD_VAR 0 1
45990: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45991: LD_ADDR_VAR 0 10
45995: PUSH
45996: LD_VAR 0 10
46000: PPUSH
46001: LD_VAR 0 8
46005: PPUSH
46006: LD_VAR 0 1
46010: PUSH
46011: LD_VAR 0 7
46015: ARRAY
46016: PPUSH
46017: CALL_OW 1
46021: ST_TO_ADDR
// end ;
46022: GO 45935
46024: POP
46025: POP
// array := tmp ;
46026: LD_ADDR_VAR 0 1
46030: PUSH
46031: LD_VAR 0 10
46035: ST_TO_ADDR
// end ;
46036: GO 45917
46038: POP
46039: POP
// result := array ;
46040: LD_ADDR_VAR 0 5
46044: PUSH
46045: LD_VAR 0 1
46049: ST_TO_ADDR
// end ;
46050: LD_VAR 0 5
46054: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46055: LD_INT 0
46057: PPUSH
46058: PPUSH
// result := 0 ;
46059: LD_ADDR_VAR 0 3
46063: PUSH
46064: LD_INT 0
46066: ST_TO_ADDR
// if not array or not value in array then
46067: LD_VAR 0 1
46071: NOT
46072: PUSH
46073: LD_VAR 0 2
46077: PUSH
46078: LD_VAR 0 1
46082: IN
46083: NOT
46084: OR
46085: IFFALSE 46089
// exit ;
46087: GO 46143
// for i = 1 to array do
46089: LD_ADDR_VAR 0 4
46093: PUSH
46094: DOUBLE
46095: LD_INT 1
46097: DEC
46098: ST_TO_ADDR
46099: LD_VAR 0 1
46103: PUSH
46104: FOR_TO
46105: IFFALSE 46141
// if value = array [ i ] then
46107: LD_VAR 0 2
46111: PUSH
46112: LD_VAR 0 1
46116: PUSH
46117: LD_VAR 0 4
46121: ARRAY
46122: EQUAL
46123: IFFALSE 46139
// begin result := i ;
46125: LD_ADDR_VAR 0 3
46129: PUSH
46130: LD_VAR 0 4
46134: ST_TO_ADDR
// exit ;
46135: POP
46136: POP
46137: GO 46143
// end ;
46139: GO 46104
46141: POP
46142: POP
// end ;
46143: LD_VAR 0 3
46147: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46148: LD_INT 0
46150: PPUSH
// vc_chassis := chassis ;
46151: LD_ADDR_OWVAR 37
46155: PUSH
46156: LD_VAR 0 1
46160: ST_TO_ADDR
// vc_engine := engine ;
46161: LD_ADDR_OWVAR 39
46165: PUSH
46166: LD_VAR 0 2
46170: ST_TO_ADDR
// vc_control := control ;
46171: LD_ADDR_OWVAR 38
46175: PUSH
46176: LD_VAR 0 3
46180: ST_TO_ADDR
// vc_weapon := weapon ;
46181: LD_ADDR_OWVAR 40
46185: PUSH
46186: LD_VAR 0 4
46190: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46191: LD_ADDR_OWVAR 41
46195: PUSH
46196: LD_VAR 0 5
46200: ST_TO_ADDR
// end ;
46201: LD_VAR 0 6
46205: RET
// export function WantPlant ( unit ) ; var task ; begin
46206: LD_INT 0
46208: PPUSH
46209: PPUSH
// result := false ;
46210: LD_ADDR_VAR 0 2
46214: PUSH
46215: LD_INT 0
46217: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46218: LD_ADDR_VAR 0 3
46222: PUSH
46223: LD_VAR 0 1
46227: PPUSH
46228: CALL_OW 437
46232: ST_TO_ADDR
// if task then
46233: LD_VAR 0 3
46237: IFFALSE 46265
// if task [ 1 ] [ 1 ] = p then
46239: LD_VAR 0 3
46243: PUSH
46244: LD_INT 1
46246: ARRAY
46247: PUSH
46248: LD_INT 1
46250: ARRAY
46251: PUSH
46252: LD_STRING p
46254: EQUAL
46255: IFFALSE 46265
// result := true ;
46257: LD_ADDR_VAR 0 2
46261: PUSH
46262: LD_INT 1
46264: ST_TO_ADDR
// end ;
46265: LD_VAR 0 2
46269: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46270: LD_INT 0
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
// if pos < 1 then
46276: LD_VAR 0 2
46280: PUSH
46281: LD_INT 1
46283: LESS
46284: IFFALSE 46288
// exit ;
46286: GO 46591
// if pos = 1 then
46288: LD_VAR 0 2
46292: PUSH
46293: LD_INT 1
46295: EQUAL
46296: IFFALSE 46329
// result := Replace ( arr , pos [ 1 ] , value ) else
46298: LD_ADDR_VAR 0 4
46302: PUSH
46303: LD_VAR 0 1
46307: PPUSH
46308: LD_VAR 0 2
46312: PUSH
46313: LD_INT 1
46315: ARRAY
46316: PPUSH
46317: LD_VAR 0 3
46321: PPUSH
46322: CALL_OW 1
46326: ST_TO_ADDR
46327: GO 46591
// begin tmp := arr ;
46329: LD_ADDR_VAR 0 6
46333: PUSH
46334: LD_VAR 0 1
46338: ST_TO_ADDR
// s_arr := [ tmp ] ;
46339: LD_ADDR_VAR 0 7
46343: PUSH
46344: LD_VAR 0 6
46348: PUSH
46349: EMPTY
46350: LIST
46351: ST_TO_ADDR
// for i = 1 to pos - 1 do
46352: LD_ADDR_VAR 0 5
46356: PUSH
46357: DOUBLE
46358: LD_INT 1
46360: DEC
46361: ST_TO_ADDR
46362: LD_VAR 0 2
46366: PUSH
46367: LD_INT 1
46369: MINUS
46370: PUSH
46371: FOR_TO
46372: IFFALSE 46417
// begin tmp := tmp [ pos [ i ] ] ;
46374: LD_ADDR_VAR 0 6
46378: PUSH
46379: LD_VAR 0 6
46383: PUSH
46384: LD_VAR 0 2
46388: PUSH
46389: LD_VAR 0 5
46393: ARRAY
46394: ARRAY
46395: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46396: LD_ADDR_VAR 0 7
46400: PUSH
46401: LD_VAR 0 7
46405: PUSH
46406: LD_VAR 0 6
46410: PUSH
46411: EMPTY
46412: LIST
46413: ADD
46414: ST_TO_ADDR
// end ;
46415: GO 46371
46417: POP
46418: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46419: LD_ADDR_VAR 0 6
46423: PUSH
46424: LD_VAR 0 6
46428: PPUSH
46429: LD_VAR 0 2
46433: PUSH
46434: LD_VAR 0 2
46438: ARRAY
46439: PPUSH
46440: LD_VAR 0 3
46444: PPUSH
46445: CALL_OW 1
46449: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46450: LD_ADDR_VAR 0 7
46454: PUSH
46455: LD_VAR 0 7
46459: PPUSH
46460: LD_VAR 0 7
46464: PPUSH
46465: LD_VAR 0 6
46469: PPUSH
46470: CALL_OW 1
46474: ST_TO_ADDR
// for i = s_arr downto 2 do
46475: LD_ADDR_VAR 0 5
46479: PUSH
46480: DOUBLE
46481: LD_VAR 0 7
46485: INC
46486: ST_TO_ADDR
46487: LD_INT 2
46489: PUSH
46490: FOR_DOWNTO
46491: IFFALSE 46575
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46493: LD_ADDR_VAR 0 6
46497: PUSH
46498: LD_VAR 0 7
46502: PUSH
46503: LD_VAR 0 5
46507: PUSH
46508: LD_INT 1
46510: MINUS
46511: ARRAY
46512: PPUSH
46513: LD_VAR 0 2
46517: PUSH
46518: LD_VAR 0 5
46522: PUSH
46523: LD_INT 1
46525: MINUS
46526: ARRAY
46527: PPUSH
46528: LD_VAR 0 7
46532: PUSH
46533: LD_VAR 0 5
46537: ARRAY
46538: PPUSH
46539: CALL_OW 1
46543: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46544: LD_ADDR_VAR 0 7
46548: PUSH
46549: LD_VAR 0 7
46553: PPUSH
46554: LD_VAR 0 5
46558: PUSH
46559: LD_INT 1
46561: MINUS
46562: PPUSH
46563: LD_VAR 0 6
46567: PPUSH
46568: CALL_OW 1
46572: ST_TO_ADDR
// end ;
46573: GO 46490
46575: POP
46576: POP
// result := s_arr [ 1 ] ;
46577: LD_ADDR_VAR 0 4
46581: PUSH
46582: LD_VAR 0 7
46586: PUSH
46587: LD_INT 1
46589: ARRAY
46590: ST_TO_ADDR
// end ; end ;
46591: LD_VAR 0 4
46595: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46596: LD_INT 0
46598: PPUSH
46599: PPUSH
// if not list then
46600: LD_VAR 0 1
46604: NOT
46605: IFFALSE 46609
// exit ;
46607: GO 46700
// i := list [ pos1 ] ;
46609: LD_ADDR_VAR 0 5
46613: PUSH
46614: LD_VAR 0 1
46618: PUSH
46619: LD_VAR 0 2
46623: ARRAY
46624: ST_TO_ADDR
// if not i then
46625: LD_VAR 0 5
46629: NOT
46630: IFFALSE 46634
// exit ;
46632: GO 46700
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46634: LD_ADDR_VAR 0 1
46638: PUSH
46639: LD_VAR 0 1
46643: PPUSH
46644: LD_VAR 0 2
46648: PPUSH
46649: LD_VAR 0 1
46653: PUSH
46654: LD_VAR 0 3
46658: ARRAY
46659: PPUSH
46660: CALL_OW 1
46664: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46665: LD_ADDR_VAR 0 1
46669: PUSH
46670: LD_VAR 0 1
46674: PPUSH
46675: LD_VAR 0 3
46679: PPUSH
46680: LD_VAR 0 5
46684: PPUSH
46685: CALL_OW 1
46689: ST_TO_ADDR
// result := list ;
46690: LD_ADDR_VAR 0 4
46694: PUSH
46695: LD_VAR 0 1
46699: ST_TO_ADDR
// end ;
46700: LD_VAR 0 4
46704: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46705: LD_INT 0
46707: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46708: LD_ADDR_VAR 0 5
46712: PUSH
46713: LD_VAR 0 1
46717: PPUSH
46718: CALL_OW 250
46722: PPUSH
46723: LD_VAR 0 1
46727: PPUSH
46728: CALL_OW 251
46732: PPUSH
46733: LD_VAR 0 2
46737: PPUSH
46738: LD_VAR 0 3
46742: PPUSH
46743: LD_VAR 0 4
46747: PPUSH
46748: CALL 46758 0 5
46752: ST_TO_ADDR
// end ;
46753: LD_VAR 0 5
46757: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46758: LD_INT 0
46760: PPUSH
46761: PPUSH
46762: PPUSH
46763: PPUSH
// if not list then
46764: LD_VAR 0 3
46768: NOT
46769: IFFALSE 46773
// exit ;
46771: GO 47161
// result := [ ] ;
46773: LD_ADDR_VAR 0 6
46777: PUSH
46778: EMPTY
46779: ST_TO_ADDR
// for i in list do
46780: LD_ADDR_VAR 0 7
46784: PUSH
46785: LD_VAR 0 3
46789: PUSH
46790: FOR_IN
46791: IFFALSE 46993
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46793: LD_ADDR_VAR 0 9
46797: PUSH
46798: LD_VAR 0 7
46802: PPUSH
46803: LD_VAR 0 1
46807: PPUSH
46808: LD_VAR 0 2
46812: PPUSH
46813: CALL_OW 297
46817: ST_TO_ADDR
// if not result then
46818: LD_VAR 0 6
46822: NOT
46823: IFFALSE 46849
// result := [ [ i , tmp ] ] else
46825: LD_ADDR_VAR 0 6
46829: PUSH
46830: LD_VAR 0 7
46834: PUSH
46835: LD_VAR 0 9
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: EMPTY
46845: LIST
46846: ST_TO_ADDR
46847: GO 46991
// begin if result [ result ] [ 2 ] < tmp then
46849: LD_VAR 0 6
46853: PUSH
46854: LD_VAR 0 6
46858: ARRAY
46859: PUSH
46860: LD_INT 2
46862: ARRAY
46863: PUSH
46864: LD_VAR 0 9
46868: LESS
46869: IFFALSE 46911
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46871: LD_ADDR_VAR 0 6
46875: PUSH
46876: LD_VAR 0 6
46880: PPUSH
46881: LD_VAR 0 6
46885: PUSH
46886: LD_INT 1
46888: PLUS
46889: PPUSH
46890: LD_VAR 0 7
46894: PUSH
46895: LD_VAR 0 9
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PPUSH
46904: CALL_OW 2
46908: ST_TO_ADDR
46909: GO 46991
// for j = 1 to result do
46911: LD_ADDR_VAR 0 8
46915: PUSH
46916: DOUBLE
46917: LD_INT 1
46919: DEC
46920: ST_TO_ADDR
46921: LD_VAR 0 6
46925: PUSH
46926: FOR_TO
46927: IFFALSE 46989
// begin if tmp < result [ j ] [ 2 ] then
46929: LD_VAR 0 9
46933: PUSH
46934: LD_VAR 0 6
46938: PUSH
46939: LD_VAR 0 8
46943: ARRAY
46944: PUSH
46945: LD_INT 2
46947: ARRAY
46948: LESS
46949: IFFALSE 46987
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46951: LD_ADDR_VAR 0 6
46955: PUSH
46956: LD_VAR 0 6
46960: PPUSH
46961: LD_VAR 0 8
46965: PPUSH
46966: LD_VAR 0 7
46970: PUSH
46971: LD_VAR 0 9
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PPUSH
46980: CALL_OW 2
46984: ST_TO_ADDR
// break ;
46985: GO 46989
// end ; end ;
46987: GO 46926
46989: POP
46990: POP
// end ; end ;
46991: GO 46790
46993: POP
46994: POP
// if result and not asc then
46995: LD_VAR 0 6
46999: PUSH
47000: LD_VAR 0 4
47004: NOT
47005: AND
47006: IFFALSE 47081
// begin tmp := result ;
47008: LD_ADDR_VAR 0 9
47012: PUSH
47013: LD_VAR 0 6
47017: ST_TO_ADDR
// for i = tmp downto 1 do
47018: LD_ADDR_VAR 0 7
47022: PUSH
47023: DOUBLE
47024: LD_VAR 0 9
47028: INC
47029: ST_TO_ADDR
47030: LD_INT 1
47032: PUSH
47033: FOR_DOWNTO
47034: IFFALSE 47079
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47036: LD_ADDR_VAR 0 6
47040: PUSH
47041: LD_VAR 0 6
47045: PPUSH
47046: LD_VAR 0 9
47050: PUSH
47051: LD_VAR 0 7
47055: MINUS
47056: PUSH
47057: LD_INT 1
47059: PLUS
47060: PPUSH
47061: LD_VAR 0 9
47065: PUSH
47066: LD_VAR 0 7
47070: ARRAY
47071: PPUSH
47072: CALL_OW 1
47076: ST_TO_ADDR
47077: GO 47033
47079: POP
47080: POP
// end ; tmp := [ ] ;
47081: LD_ADDR_VAR 0 9
47085: PUSH
47086: EMPTY
47087: ST_TO_ADDR
// if mode then
47088: LD_VAR 0 5
47092: IFFALSE 47161
// begin for i = 1 to result do
47094: LD_ADDR_VAR 0 7
47098: PUSH
47099: DOUBLE
47100: LD_INT 1
47102: DEC
47103: ST_TO_ADDR
47104: LD_VAR 0 6
47108: PUSH
47109: FOR_TO
47110: IFFALSE 47149
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47112: LD_ADDR_VAR 0 9
47116: PUSH
47117: LD_VAR 0 9
47121: PPUSH
47122: LD_VAR 0 7
47126: PPUSH
47127: LD_VAR 0 6
47131: PUSH
47132: LD_VAR 0 7
47136: ARRAY
47137: PUSH
47138: LD_INT 1
47140: ARRAY
47141: PPUSH
47142: CALL_OW 1
47146: ST_TO_ADDR
47147: GO 47109
47149: POP
47150: POP
// result := tmp ;
47151: LD_ADDR_VAR 0 6
47155: PUSH
47156: LD_VAR 0 9
47160: ST_TO_ADDR
// end ; end ;
47161: LD_VAR 0 6
47165: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47166: LD_INT 0
47168: PPUSH
47169: PPUSH
47170: PPUSH
47171: PPUSH
47172: PPUSH
47173: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47174: LD_ADDR_VAR 0 5
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: ST_TO_ADDR
// if not x or not y then
47196: LD_VAR 0 2
47200: NOT
47201: PUSH
47202: LD_VAR 0 3
47206: NOT
47207: OR
47208: IFFALSE 47212
// exit ;
47210: GO 48864
// if not range then
47212: LD_VAR 0 4
47216: NOT
47217: IFFALSE 47227
// range := 10 ;
47219: LD_ADDR_VAR 0 4
47223: PUSH
47224: LD_INT 10
47226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47227: LD_ADDR_VAR 0 8
47231: PUSH
47232: LD_INT 81
47234: PUSH
47235: LD_VAR 0 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 92
47246: PUSH
47247: LD_VAR 0 2
47251: PUSH
47252: LD_VAR 0 3
47256: PUSH
47257: LD_VAR 0 4
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 3
47270: PUSH
47271: LD_INT 21
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: LIST
47289: PPUSH
47290: CALL_OW 69
47294: ST_TO_ADDR
// if not tmp then
47295: LD_VAR 0 8
47299: NOT
47300: IFFALSE 47304
// exit ;
47302: GO 48864
// for i in tmp do
47304: LD_ADDR_VAR 0 6
47308: PUSH
47309: LD_VAR 0 8
47313: PUSH
47314: FOR_IN
47315: IFFALSE 48839
// begin points := [ 0 , 0 , 0 ] ;
47317: LD_ADDR_VAR 0 9
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: ST_TO_ADDR
// bpoints := 1 ;
47336: LD_ADDR_VAR 0 10
47340: PUSH
47341: LD_INT 1
47343: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47344: LD_VAR 0 6
47348: PPUSH
47349: CALL_OW 247
47353: PUSH
47354: LD_INT 1
47356: DOUBLE
47357: EQUAL
47358: IFTRUE 47362
47360: GO 47940
47362: POP
// begin if GetClass ( i ) = 1 then
47363: LD_VAR 0 6
47367: PPUSH
47368: CALL_OW 257
47372: PUSH
47373: LD_INT 1
47375: EQUAL
47376: IFFALSE 47397
// points := [ 10 , 5 , 3 ] ;
47378: LD_ADDR_VAR 0 9
47382: PUSH
47383: LD_INT 10
47385: PUSH
47386: LD_INT 5
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47397: LD_VAR 0 6
47401: PPUSH
47402: CALL_OW 257
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 3
47412: PUSH
47413: LD_INT 4
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: LIST
47420: IN
47421: IFFALSE 47442
// points := [ 3 , 2 , 1 ] ;
47423: LD_ADDR_VAR 0 9
47427: PUSH
47428: LD_INT 3
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47442: LD_VAR 0 6
47446: PPUSH
47447: CALL_OW 257
47451: PUSH
47452: LD_INT 5
47454: EQUAL
47455: IFFALSE 47476
// points := [ 130 , 5 , 2 ] ;
47457: LD_ADDR_VAR 0 9
47461: PUSH
47462: LD_INT 130
47464: PUSH
47465: LD_INT 5
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: LIST
47475: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47476: LD_VAR 0 6
47480: PPUSH
47481: CALL_OW 257
47485: PUSH
47486: LD_INT 8
47488: EQUAL
47489: IFFALSE 47510
// points := [ 35 , 35 , 30 ] ;
47491: LD_ADDR_VAR 0 9
47495: PUSH
47496: LD_INT 35
47498: PUSH
47499: LD_INT 35
47501: PUSH
47502: LD_INT 30
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47510: LD_VAR 0 6
47514: PPUSH
47515: CALL_OW 257
47519: PUSH
47520: LD_INT 9
47522: EQUAL
47523: IFFALSE 47544
// points := [ 20 , 55 , 40 ] ;
47525: LD_ADDR_VAR 0 9
47529: PUSH
47530: LD_INT 20
47532: PUSH
47533: LD_INT 55
47535: PUSH
47536: LD_INT 40
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: LIST
47543: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47544: LD_VAR 0 6
47548: PPUSH
47549: CALL_OW 257
47553: PUSH
47554: LD_INT 12
47556: PUSH
47557: LD_INT 16
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: IN
47564: IFFALSE 47585
// points := [ 5 , 3 , 2 ] ;
47566: LD_ADDR_VAR 0 9
47570: PUSH
47571: LD_INT 5
47573: PUSH
47574: LD_INT 3
47576: PUSH
47577: LD_INT 2
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: LIST
47584: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47585: LD_VAR 0 6
47589: PPUSH
47590: CALL_OW 257
47594: PUSH
47595: LD_INT 17
47597: EQUAL
47598: IFFALSE 47619
// points := [ 100 , 50 , 75 ] ;
47600: LD_ADDR_VAR 0 9
47604: PUSH
47605: LD_INT 100
47607: PUSH
47608: LD_INT 50
47610: PUSH
47611: LD_INT 75
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47619: LD_VAR 0 6
47623: PPUSH
47624: CALL_OW 257
47628: PUSH
47629: LD_INT 15
47631: EQUAL
47632: IFFALSE 47653
// points := [ 10 , 5 , 3 ] ;
47634: LD_ADDR_VAR 0 9
47638: PUSH
47639: LD_INT 10
47641: PUSH
47642: LD_INT 5
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47653: LD_VAR 0 6
47657: PPUSH
47658: CALL_OW 257
47662: PUSH
47663: LD_INT 14
47665: EQUAL
47666: IFFALSE 47687
// points := [ 10 , 0 , 0 ] ;
47668: LD_ADDR_VAR 0 9
47672: PUSH
47673: LD_INT 10
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: LIST
47686: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47687: LD_VAR 0 6
47691: PPUSH
47692: CALL_OW 257
47696: PUSH
47697: LD_INT 11
47699: EQUAL
47700: IFFALSE 47721
// points := [ 30 , 10 , 5 ] ;
47702: LD_ADDR_VAR 0 9
47706: PUSH
47707: LD_INT 30
47709: PUSH
47710: LD_INT 10
47712: PUSH
47713: LD_INT 5
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: LIST
47720: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47721: LD_VAR 0 1
47725: PPUSH
47726: LD_INT 5
47728: PPUSH
47729: CALL_OW 321
47733: PUSH
47734: LD_INT 2
47736: EQUAL
47737: IFFALSE 47754
// bpoints := bpoints * 1.8 ;
47739: LD_ADDR_VAR 0 10
47743: PUSH
47744: LD_VAR 0 10
47748: PUSH
47749: LD_REAL  1.80000000000000E+0000
47752: MUL
47753: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47754: LD_VAR 0 6
47758: PPUSH
47759: CALL_OW 257
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: LD_INT 3
47772: PUSH
47773: LD_INT 4
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: IN
47782: PUSH
47783: LD_VAR 0 1
47787: PPUSH
47788: LD_INT 51
47790: PPUSH
47791: CALL_OW 321
47795: PUSH
47796: LD_INT 2
47798: EQUAL
47799: AND
47800: IFFALSE 47817
// bpoints := bpoints * 1.2 ;
47802: LD_ADDR_VAR 0 10
47806: PUSH
47807: LD_VAR 0 10
47811: PUSH
47812: LD_REAL  1.20000000000000E+0000
47815: MUL
47816: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47817: LD_VAR 0 6
47821: PPUSH
47822: CALL_OW 257
47826: PUSH
47827: LD_INT 5
47829: PUSH
47830: LD_INT 7
47832: PUSH
47833: LD_INT 9
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: IN
47841: PUSH
47842: LD_VAR 0 1
47846: PPUSH
47847: LD_INT 52
47849: PPUSH
47850: CALL_OW 321
47854: PUSH
47855: LD_INT 2
47857: EQUAL
47858: AND
47859: IFFALSE 47876
// bpoints := bpoints * 1.5 ;
47861: LD_ADDR_VAR 0 10
47865: PUSH
47866: LD_VAR 0 10
47870: PUSH
47871: LD_REAL  1.50000000000000E+0000
47874: MUL
47875: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47876: LD_VAR 0 1
47880: PPUSH
47881: LD_INT 66
47883: PPUSH
47884: CALL_OW 321
47888: PUSH
47889: LD_INT 2
47891: EQUAL
47892: IFFALSE 47909
// bpoints := bpoints * 1.1 ;
47894: LD_ADDR_VAR 0 10
47898: PUSH
47899: LD_VAR 0 10
47903: PUSH
47904: LD_REAL  1.10000000000000E+0000
47907: MUL
47908: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47909: LD_ADDR_VAR 0 10
47913: PUSH
47914: LD_VAR 0 10
47918: PUSH
47919: LD_VAR 0 6
47923: PPUSH
47924: LD_INT 1
47926: PPUSH
47927: CALL_OW 259
47931: PUSH
47932: LD_REAL  1.15000000000000E+0000
47935: MUL
47936: MUL
47937: ST_TO_ADDR
// end ; unit_vehicle :
47938: GO 48768
47940: LD_INT 2
47942: DOUBLE
47943: EQUAL
47944: IFTRUE 47948
47946: GO 48756
47948: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47949: LD_VAR 0 6
47953: PPUSH
47954: CALL_OW 264
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: LD_INT 42
47964: PUSH
47965: LD_INT 24
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: IN
47973: IFFALSE 47994
// points := [ 25 , 5 , 3 ] ;
47975: LD_ADDR_VAR 0 9
47979: PUSH
47980: LD_INT 25
47982: PUSH
47983: LD_INT 5
47985: PUSH
47986: LD_INT 3
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47994: LD_VAR 0 6
47998: PPUSH
47999: CALL_OW 264
48003: PUSH
48004: LD_INT 4
48006: PUSH
48007: LD_INT 43
48009: PUSH
48010: LD_INT 25
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: LIST
48017: IN
48018: IFFALSE 48039
// points := [ 40 , 15 , 5 ] ;
48020: LD_ADDR_VAR 0 9
48024: PUSH
48025: LD_INT 40
48027: PUSH
48028: LD_INT 15
48030: PUSH
48031: LD_INT 5
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48039: LD_VAR 0 6
48043: PPUSH
48044: CALL_OW 264
48048: PUSH
48049: LD_INT 3
48051: PUSH
48052: LD_INT 23
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: IN
48059: IFFALSE 48080
// points := [ 7 , 25 , 8 ] ;
48061: LD_ADDR_VAR 0 9
48065: PUSH
48066: LD_INT 7
48068: PUSH
48069: LD_INT 25
48071: PUSH
48072: LD_INT 8
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: LIST
48079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48080: LD_VAR 0 6
48084: PPUSH
48085: CALL_OW 264
48089: PUSH
48090: LD_INT 5
48092: PUSH
48093: LD_INT 27
48095: PUSH
48096: LD_INT 44
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: LIST
48103: IN
48104: IFFALSE 48125
// points := [ 14 , 50 , 16 ] ;
48106: LD_ADDR_VAR 0 9
48110: PUSH
48111: LD_INT 14
48113: PUSH
48114: LD_INT 50
48116: PUSH
48117: LD_INT 16
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: LIST
48124: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48125: LD_VAR 0 6
48129: PPUSH
48130: CALL_OW 264
48134: PUSH
48135: LD_INT 6
48137: PUSH
48138: LD_INT 46
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: IN
48145: IFFALSE 48166
// points := [ 32 , 120 , 70 ] ;
48147: LD_ADDR_VAR 0 9
48151: PUSH
48152: LD_INT 32
48154: PUSH
48155: LD_INT 120
48157: PUSH
48158: LD_INT 70
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: LIST
48165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48166: LD_VAR 0 6
48170: PPUSH
48171: CALL_OW 264
48175: PUSH
48176: LD_INT 7
48178: PUSH
48179: LD_INT 28
48181: PUSH
48182: LD_INT 45
48184: PUSH
48185: LD_EXP 54
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: IN
48196: IFFALSE 48217
// points := [ 35 , 20 , 45 ] ;
48198: LD_ADDR_VAR 0 9
48202: PUSH
48203: LD_INT 35
48205: PUSH
48206: LD_INT 20
48208: PUSH
48209: LD_INT 45
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: LIST
48216: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48217: LD_VAR 0 6
48221: PPUSH
48222: CALL_OW 264
48226: PUSH
48227: LD_INT 47
48229: PUSH
48230: EMPTY
48231: LIST
48232: IN
48233: IFFALSE 48254
// points := [ 67 , 45 , 75 ] ;
48235: LD_ADDR_VAR 0 9
48239: PUSH
48240: LD_INT 67
48242: PUSH
48243: LD_INT 45
48245: PUSH
48246: LD_INT 75
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: LIST
48253: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48254: LD_VAR 0 6
48258: PPUSH
48259: CALL_OW 264
48263: PUSH
48264: LD_INT 26
48266: PUSH
48267: EMPTY
48268: LIST
48269: IN
48270: IFFALSE 48291
// points := [ 120 , 30 , 80 ] ;
48272: LD_ADDR_VAR 0 9
48276: PUSH
48277: LD_INT 120
48279: PUSH
48280: LD_INT 30
48282: PUSH
48283: LD_INT 80
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48291: LD_VAR 0 6
48295: PPUSH
48296: CALL_OW 264
48300: PUSH
48301: LD_INT 22
48303: PUSH
48304: EMPTY
48305: LIST
48306: IN
48307: IFFALSE 48328
// points := [ 40 , 1 , 1 ] ;
48309: LD_ADDR_VAR 0 9
48313: PUSH
48314: LD_INT 40
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48328: LD_VAR 0 6
48332: PPUSH
48333: CALL_OW 264
48337: PUSH
48338: LD_INT 29
48340: PUSH
48341: EMPTY
48342: LIST
48343: IN
48344: IFFALSE 48365
// points := [ 70 , 200 , 400 ] ;
48346: LD_ADDR_VAR 0 9
48350: PUSH
48351: LD_INT 70
48353: PUSH
48354: LD_INT 200
48356: PUSH
48357: LD_INT 400
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: LIST
48364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48365: LD_VAR 0 6
48369: PPUSH
48370: CALL_OW 264
48374: PUSH
48375: LD_INT 14
48377: PUSH
48378: LD_INT 53
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: IN
48385: IFFALSE 48406
// points := [ 40 , 10 , 20 ] ;
48387: LD_ADDR_VAR 0 9
48391: PUSH
48392: LD_INT 40
48394: PUSH
48395: LD_INT 10
48397: PUSH
48398: LD_INT 20
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: LIST
48405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48406: LD_VAR 0 6
48410: PPUSH
48411: CALL_OW 264
48415: PUSH
48416: LD_INT 9
48418: PUSH
48419: EMPTY
48420: LIST
48421: IN
48422: IFFALSE 48443
// points := [ 5 , 70 , 20 ] ;
48424: LD_ADDR_VAR 0 9
48428: PUSH
48429: LD_INT 5
48431: PUSH
48432: LD_INT 70
48434: PUSH
48435: LD_INT 20
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48443: LD_VAR 0 6
48447: PPUSH
48448: CALL_OW 264
48452: PUSH
48453: LD_INT 10
48455: PUSH
48456: EMPTY
48457: LIST
48458: IN
48459: IFFALSE 48480
// points := [ 35 , 110 , 70 ] ;
48461: LD_ADDR_VAR 0 9
48465: PUSH
48466: LD_INT 35
48468: PUSH
48469: LD_INT 110
48471: PUSH
48472: LD_INT 70
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48480: LD_VAR 0 6
48484: PPUSH
48485: CALL_OW 265
48489: PUSH
48490: LD_INT 25
48492: EQUAL
48493: IFFALSE 48514
// points := [ 80 , 65 , 100 ] ;
48495: LD_ADDR_VAR 0 9
48499: PUSH
48500: LD_INT 80
48502: PUSH
48503: LD_INT 65
48505: PUSH
48506: LD_INT 100
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: LIST
48513: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48514: LD_VAR 0 6
48518: PPUSH
48519: CALL_OW 263
48523: PUSH
48524: LD_INT 1
48526: EQUAL
48527: IFFALSE 48562
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48529: LD_ADDR_VAR 0 10
48533: PUSH
48534: LD_VAR 0 10
48538: PUSH
48539: LD_VAR 0 6
48543: PPUSH
48544: CALL_OW 311
48548: PPUSH
48549: LD_INT 3
48551: PPUSH
48552: CALL_OW 259
48556: PUSH
48557: LD_INT 4
48559: MUL
48560: MUL
48561: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48562: LD_VAR 0 6
48566: PPUSH
48567: CALL_OW 263
48571: PUSH
48572: LD_INT 2
48574: EQUAL
48575: IFFALSE 48626
// begin j := IsControledBy ( i ) ;
48577: LD_ADDR_VAR 0 7
48581: PUSH
48582: LD_VAR 0 6
48586: PPUSH
48587: CALL_OW 312
48591: ST_TO_ADDR
// if j then
48592: LD_VAR 0 7
48596: IFFALSE 48626
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48598: LD_ADDR_VAR 0 10
48602: PUSH
48603: LD_VAR 0 10
48607: PUSH
48608: LD_VAR 0 7
48612: PPUSH
48613: LD_INT 3
48615: PPUSH
48616: CALL_OW 259
48620: PUSH
48621: LD_INT 3
48623: MUL
48624: MUL
48625: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48626: LD_VAR 0 6
48630: PPUSH
48631: CALL_OW 264
48635: PUSH
48636: LD_INT 5
48638: PUSH
48639: LD_INT 6
48641: PUSH
48642: LD_INT 46
48644: PUSH
48645: LD_INT 44
48647: PUSH
48648: LD_INT 47
48650: PUSH
48651: LD_INT 45
48653: PUSH
48654: LD_INT 28
48656: PUSH
48657: LD_INT 7
48659: PUSH
48660: LD_INT 27
48662: PUSH
48663: LD_INT 29
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: IN
48678: PUSH
48679: LD_VAR 0 1
48683: PPUSH
48684: LD_INT 52
48686: PPUSH
48687: CALL_OW 321
48691: PUSH
48692: LD_INT 2
48694: EQUAL
48695: AND
48696: IFFALSE 48713
// bpoints := bpoints * 1.2 ;
48698: LD_ADDR_VAR 0 10
48702: PUSH
48703: LD_VAR 0 10
48707: PUSH
48708: LD_REAL  1.20000000000000E+0000
48711: MUL
48712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48713: LD_VAR 0 6
48717: PPUSH
48718: CALL_OW 264
48722: PUSH
48723: LD_INT 6
48725: PUSH
48726: LD_INT 46
48728: PUSH
48729: LD_INT 47
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: LIST
48736: IN
48737: IFFALSE 48754
// bpoints := bpoints * 1.2 ;
48739: LD_ADDR_VAR 0 10
48743: PUSH
48744: LD_VAR 0 10
48748: PUSH
48749: LD_REAL  1.20000000000000E+0000
48752: MUL
48753: ST_TO_ADDR
// end ; unit_building :
48754: GO 48768
48756: LD_INT 3
48758: DOUBLE
48759: EQUAL
48760: IFTRUE 48764
48762: GO 48767
48764: POP
// ; end ;
48765: GO 48768
48767: POP
// for j = 1 to 3 do
48768: LD_ADDR_VAR 0 7
48772: PUSH
48773: DOUBLE
48774: LD_INT 1
48776: DEC
48777: ST_TO_ADDR
48778: LD_INT 3
48780: PUSH
48781: FOR_TO
48782: IFFALSE 48835
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48784: LD_ADDR_VAR 0 5
48788: PUSH
48789: LD_VAR 0 5
48793: PPUSH
48794: LD_VAR 0 7
48798: PPUSH
48799: LD_VAR 0 5
48803: PUSH
48804: LD_VAR 0 7
48808: ARRAY
48809: PUSH
48810: LD_VAR 0 9
48814: PUSH
48815: LD_VAR 0 7
48819: ARRAY
48820: PUSH
48821: LD_VAR 0 10
48825: MUL
48826: PLUS
48827: PPUSH
48828: CALL_OW 1
48832: ST_TO_ADDR
48833: GO 48781
48835: POP
48836: POP
// end ;
48837: GO 47314
48839: POP
48840: POP
// result := Replace ( result , 4 , tmp ) ;
48841: LD_ADDR_VAR 0 5
48845: PUSH
48846: LD_VAR 0 5
48850: PPUSH
48851: LD_INT 4
48853: PPUSH
48854: LD_VAR 0 8
48858: PPUSH
48859: CALL_OW 1
48863: ST_TO_ADDR
// end ;
48864: LD_VAR 0 5
48868: RET
// export function DangerAtRange ( unit , range ) ; begin
48869: LD_INT 0
48871: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48872: LD_ADDR_VAR 0 3
48876: PUSH
48877: LD_VAR 0 1
48881: PPUSH
48882: CALL_OW 255
48886: PPUSH
48887: LD_VAR 0 1
48891: PPUSH
48892: CALL_OW 250
48896: PPUSH
48897: LD_VAR 0 1
48901: PPUSH
48902: CALL_OW 251
48906: PPUSH
48907: LD_VAR 0 2
48911: PPUSH
48912: CALL 47166 0 4
48916: ST_TO_ADDR
// end ;
48917: LD_VAR 0 3
48921: RET
// export function DangerInArea ( side , area ) ; begin
48922: LD_INT 0
48924: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48925: LD_ADDR_VAR 0 3
48929: PUSH
48930: LD_VAR 0 2
48934: PPUSH
48935: LD_INT 81
48937: PUSH
48938: LD_VAR 0 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PPUSH
48947: CALL_OW 70
48951: ST_TO_ADDR
// end ;
48952: LD_VAR 0 3
48956: RET
// export function IsExtension ( b ) ; begin
48957: LD_INT 0
48959: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48960: LD_ADDR_VAR 0 2
48964: PUSH
48965: LD_VAR 0 1
48969: PUSH
48970: LD_INT 23
48972: PUSH
48973: LD_INT 20
48975: PUSH
48976: LD_INT 22
48978: PUSH
48979: LD_INT 17
48981: PUSH
48982: LD_INT 24
48984: PUSH
48985: LD_INT 21
48987: PUSH
48988: LD_INT 19
48990: PUSH
48991: LD_INT 16
48993: PUSH
48994: LD_INT 25
48996: PUSH
48997: LD_INT 18
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: IN
49012: ST_TO_ADDR
// end ;
49013: LD_VAR 0 2
49017: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49018: LD_INT 0
49020: PPUSH
49021: PPUSH
49022: PPUSH
// result := [ ] ;
49023: LD_ADDR_VAR 0 4
49027: PUSH
49028: EMPTY
49029: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49030: LD_ADDR_VAR 0 5
49034: PUSH
49035: LD_VAR 0 2
49039: PPUSH
49040: LD_INT 21
49042: PUSH
49043: LD_INT 3
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PPUSH
49050: CALL_OW 70
49054: ST_TO_ADDR
// if not tmp then
49055: LD_VAR 0 5
49059: NOT
49060: IFFALSE 49064
// exit ;
49062: GO 49128
// if checkLink then
49064: LD_VAR 0 3
49068: IFFALSE 49118
// begin for i in tmp do
49070: LD_ADDR_VAR 0 6
49074: PUSH
49075: LD_VAR 0 5
49079: PUSH
49080: FOR_IN
49081: IFFALSE 49116
// if GetBase ( i ) <> base then
49083: LD_VAR 0 6
49087: PPUSH
49088: CALL_OW 274
49092: PUSH
49093: LD_VAR 0 1
49097: NONEQUAL
49098: IFFALSE 49114
// ComLinkToBase ( base , i ) ;
49100: LD_VAR 0 1
49104: PPUSH
49105: LD_VAR 0 6
49109: PPUSH
49110: CALL_OW 169
49114: GO 49080
49116: POP
49117: POP
// end ; result := tmp ;
49118: LD_ADDR_VAR 0 4
49122: PUSH
49123: LD_VAR 0 5
49127: ST_TO_ADDR
// end ;
49128: LD_VAR 0 4
49132: RET
// export function ComComplete ( units , b ) ; var i ; begin
49133: LD_INT 0
49135: PPUSH
49136: PPUSH
// if not units then
49137: LD_VAR 0 1
49141: NOT
49142: IFFALSE 49146
// exit ;
49144: GO 49236
// for i in units do
49146: LD_ADDR_VAR 0 4
49150: PUSH
49151: LD_VAR 0 1
49155: PUSH
49156: FOR_IN
49157: IFFALSE 49234
// if BuildingStatus ( b ) = bs_build then
49159: LD_VAR 0 2
49163: PPUSH
49164: CALL_OW 461
49168: PUSH
49169: LD_INT 1
49171: EQUAL
49172: IFFALSE 49232
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49174: LD_VAR 0 4
49178: PPUSH
49179: LD_STRING h
49181: PUSH
49182: LD_VAR 0 2
49186: PPUSH
49187: CALL_OW 250
49191: PUSH
49192: LD_VAR 0 2
49196: PPUSH
49197: CALL_OW 251
49201: PUSH
49202: LD_VAR 0 2
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: PUSH
49225: EMPTY
49226: LIST
49227: PPUSH
49228: CALL_OW 446
49232: GO 49156
49234: POP
49235: POP
// end ;
49236: LD_VAR 0 3
49240: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49241: LD_INT 0
49243: PPUSH
49244: PPUSH
49245: PPUSH
49246: PPUSH
49247: PPUSH
49248: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49249: LD_VAR 0 1
49253: NOT
49254: PUSH
49255: LD_VAR 0 1
49259: PPUSH
49260: CALL_OW 263
49264: PUSH
49265: LD_INT 2
49267: NONEQUAL
49268: OR
49269: IFFALSE 49273
// exit ;
49271: GO 49589
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49273: LD_ADDR_VAR 0 6
49277: PUSH
49278: LD_INT 22
49280: PUSH
49281: LD_VAR 0 1
49285: PPUSH
49286: CALL_OW 255
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 30
49300: PUSH
49301: LD_INT 36
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 34
49310: PUSH
49311: LD_INT 31
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: LIST
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PPUSH
49327: CALL_OW 69
49331: ST_TO_ADDR
// if not tmp then
49332: LD_VAR 0 6
49336: NOT
49337: IFFALSE 49341
// exit ;
49339: GO 49589
// result := [ ] ;
49341: LD_ADDR_VAR 0 2
49345: PUSH
49346: EMPTY
49347: ST_TO_ADDR
// for i in tmp do
49348: LD_ADDR_VAR 0 3
49352: PUSH
49353: LD_VAR 0 6
49357: PUSH
49358: FOR_IN
49359: IFFALSE 49430
// begin t := UnitsInside ( i ) ;
49361: LD_ADDR_VAR 0 4
49365: PUSH
49366: LD_VAR 0 3
49370: PPUSH
49371: CALL_OW 313
49375: ST_TO_ADDR
// if t then
49376: LD_VAR 0 4
49380: IFFALSE 49428
// for j in t do
49382: LD_ADDR_VAR 0 7
49386: PUSH
49387: LD_VAR 0 4
49391: PUSH
49392: FOR_IN
49393: IFFALSE 49426
// result := Replace ( result , result + 1 , j ) ;
49395: LD_ADDR_VAR 0 2
49399: PUSH
49400: LD_VAR 0 2
49404: PPUSH
49405: LD_VAR 0 2
49409: PUSH
49410: LD_INT 1
49412: PLUS
49413: PPUSH
49414: LD_VAR 0 7
49418: PPUSH
49419: CALL_OW 1
49423: ST_TO_ADDR
49424: GO 49392
49426: POP
49427: POP
// end ;
49428: GO 49358
49430: POP
49431: POP
// if not result then
49432: LD_VAR 0 2
49436: NOT
49437: IFFALSE 49441
// exit ;
49439: GO 49589
// mech := result [ 1 ] ;
49441: LD_ADDR_VAR 0 5
49445: PUSH
49446: LD_VAR 0 2
49450: PUSH
49451: LD_INT 1
49453: ARRAY
49454: ST_TO_ADDR
// if result > 1 then
49455: LD_VAR 0 2
49459: PUSH
49460: LD_INT 1
49462: GREATER
49463: IFFALSE 49575
// begin for i = 2 to result do
49465: LD_ADDR_VAR 0 3
49469: PUSH
49470: DOUBLE
49471: LD_INT 2
49473: DEC
49474: ST_TO_ADDR
49475: LD_VAR 0 2
49479: PUSH
49480: FOR_TO
49481: IFFALSE 49573
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49483: LD_ADDR_VAR 0 4
49487: PUSH
49488: LD_VAR 0 2
49492: PUSH
49493: LD_VAR 0 3
49497: ARRAY
49498: PPUSH
49499: LD_INT 3
49501: PPUSH
49502: CALL_OW 259
49506: PUSH
49507: LD_VAR 0 2
49511: PUSH
49512: LD_VAR 0 3
49516: ARRAY
49517: PPUSH
49518: CALL_OW 432
49522: MINUS
49523: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49524: LD_VAR 0 4
49528: PUSH
49529: LD_VAR 0 5
49533: PPUSH
49534: LD_INT 3
49536: PPUSH
49537: CALL_OW 259
49541: PUSH
49542: LD_VAR 0 5
49546: PPUSH
49547: CALL_OW 432
49551: MINUS
49552: GREATEREQUAL
49553: IFFALSE 49571
// mech := result [ i ] ;
49555: LD_ADDR_VAR 0 5
49559: PUSH
49560: LD_VAR 0 2
49564: PUSH
49565: LD_VAR 0 3
49569: ARRAY
49570: ST_TO_ADDR
// end ;
49571: GO 49480
49573: POP
49574: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49575: LD_VAR 0 1
49579: PPUSH
49580: LD_VAR 0 5
49584: PPUSH
49585: CALL_OW 135
// end ;
49589: LD_VAR 0 2
49593: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49594: LD_INT 0
49596: PPUSH
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
49603: PPUSH
49604: PPUSH
49605: PPUSH
49606: PPUSH
49607: PPUSH
49608: PPUSH
// result := [ ] ;
49609: LD_ADDR_VAR 0 7
49613: PUSH
49614: EMPTY
49615: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49616: LD_VAR 0 1
49620: PPUSH
49621: CALL_OW 266
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: IN
49636: NOT
49637: IFFALSE 49641
// exit ;
49639: GO 51275
// if name then
49641: LD_VAR 0 3
49645: IFFALSE 49661
// SetBName ( base_dep , name ) ;
49647: LD_VAR 0 1
49651: PPUSH
49652: LD_VAR 0 3
49656: PPUSH
49657: CALL_OW 500
// base := GetBase ( base_dep ) ;
49661: LD_ADDR_VAR 0 15
49665: PUSH
49666: LD_VAR 0 1
49670: PPUSH
49671: CALL_OW 274
49675: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49676: LD_ADDR_VAR 0 16
49680: PUSH
49681: LD_VAR 0 1
49685: PPUSH
49686: CALL_OW 255
49690: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49691: LD_ADDR_VAR 0 17
49695: PUSH
49696: LD_VAR 0 1
49700: PPUSH
49701: CALL_OW 248
49705: ST_TO_ADDR
// if sources then
49706: LD_VAR 0 5
49710: IFFALSE 49757
// for i = 1 to 3 do
49712: LD_ADDR_VAR 0 8
49716: PUSH
49717: DOUBLE
49718: LD_INT 1
49720: DEC
49721: ST_TO_ADDR
49722: LD_INT 3
49724: PUSH
49725: FOR_TO
49726: IFFALSE 49755
// AddResourceType ( base , i , sources [ i ] ) ;
49728: LD_VAR 0 15
49732: PPUSH
49733: LD_VAR 0 8
49737: PPUSH
49738: LD_VAR 0 5
49742: PUSH
49743: LD_VAR 0 8
49747: ARRAY
49748: PPUSH
49749: CALL_OW 276
49753: GO 49725
49755: POP
49756: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49757: LD_ADDR_VAR 0 18
49761: PUSH
49762: LD_VAR 0 15
49766: PPUSH
49767: LD_VAR 0 2
49771: PPUSH
49772: LD_INT 1
49774: PPUSH
49775: CALL 49018 0 3
49779: ST_TO_ADDR
// InitHc ;
49780: CALL_OW 19
// InitUc ;
49784: CALL_OW 18
// uc_side := side ;
49788: LD_ADDR_OWVAR 20
49792: PUSH
49793: LD_VAR 0 16
49797: ST_TO_ADDR
// uc_nation := nation ;
49798: LD_ADDR_OWVAR 21
49802: PUSH
49803: LD_VAR 0 17
49807: ST_TO_ADDR
// if buildings then
49808: LD_VAR 0 18
49812: IFFALSE 51134
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49814: LD_ADDR_VAR 0 19
49818: PUSH
49819: LD_VAR 0 18
49823: PPUSH
49824: LD_INT 2
49826: PUSH
49827: LD_INT 30
49829: PUSH
49830: LD_INT 29
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 30
49839: PUSH
49840: LD_INT 30
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: LIST
49851: PPUSH
49852: CALL_OW 72
49856: ST_TO_ADDR
// if tmp then
49857: LD_VAR 0 19
49861: IFFALSE 49909
// for i in tmp do
49863: LD_ADDR_VAR 0 8
49867: PUSH
49868: LD_VAR 0 19
49872: PUSH
49873: FOR_IN
49874: IFFALSE 49907
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49876: LD_VAR 0 8
49880: PPUSH
49881: CALL_OW 250
49885: PPUSH
49886: LD_VAR 0 8
49890: PPUSH
49891: CALL_OW 251
49895: PPUSH
49896: LD_VAR 0 16
49900: PPUSH
49901: CALL_OW 441
49905: GO 49873
49907: POP
49908: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49909: LD_VAR 0 18
49913: PPUSH
49914: LD_INT 2
49916: PUSH
49917: LD_INT 30
49919: PUSH
49920: LD_INT 32
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 30
49929: PUSH
49930: LD_INT 33
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: LIST
49941: PPUSH
49942: CALL_OW 72
49946: IFFALSE 50034
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49948: LD_ADDR_VAR 0 8
49952: PUSH
49953: LD_VAR 0 18
49957: PPUSH
49958: LD_INT 2
49960: PUSH
49961: LD_INT 30
49963: PUSH
49964: LD_INT 32
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 30
49973: PUSH
49974: LD_INT 33
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: PPUSH
49986: CALL_OW 72
49990: PUSH
49991: FOR_IN
49992: IFFALSE 50032
// begin if not GetBWeapon ( i ) then
49994: LD_VAR 0 8
49998: PPUSH
49999: CALL_OW 269
50003: NOT
50004: IFFALSE 50030
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50006: LD_VAR 0 8
50010: PPUSH
50011: LD_VAR 0 8
50015: PPUSH
50016: LD_VAR 0 2
50020: PPUSH
50021: CALL 51280 0 2
50025: PPUSH
50026: CALL_OW 431
// end ;
50030: GO 49991
50032: POP
50033: POP
// end ; for i = 1 to personel do
50034: LD_ADDR_VAR 0 8
50038: PUSH
50039: DOUBLE
50040: LD_INT 1
50042: DEC
50043: ST_TO_ADDR
50044: LD_VAR 0 6
50048: PUSH
50049: FOR_TO
50050: IFFALSE 51114
// begin if i > 4 then
50052: LD_VAR 0 8
50056: PUSH
50057: LD_INT 4
50059: GREATER
50060: IFFALSE 50064
// break ;
50062: GO 51114
// case i of 1 :
50064: LD_VAR 0 8
50068: PUSH
50069: LD_INT 1
50071: DOUBLE
50072: EQUAL
50073: IFTRUE 50077
50075: GO 50157
50077: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50078: LD_ADDR_VAR 0 12
50082: PUSH
50083: LD_VAR 0 18
50087: PPUSH
50088: LD_INT 22
50090: PUSH
50091: LD_VAR 0 16
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 58
50102: PUSH
50103: EMPTY
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: LD_INT 30
50111: PUSH
50112: LD_INT 32
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 30
50121: PUSH
50122: LD_INT 4
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 30
50131: PUSH
50132: LD_INT 5
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: LIST
50149: PPUSH
50150: CALL_OW 72
50154: ST_TO_ADDR
50155: GO 50379
50157: LD_INT 2
50159: DOUBLE
50160: EQUAL
50161: IFTRUE 50165
50163: GO 50227
50165: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50166: LD_ADDR_VAR 0 12
50170: PUSH
50171: LD_VAR 0 18
50175: PPUSH
50176: LD_INT 22
50178: PUSH
50179: LD_VAR 0 16
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: LD_INT 30
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 30
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PPUSH
50220: CALL_OW 72
50224: ST_TO_ADDR
50225: GO 50379
50227: LD_INT 3
50229: DOUBLE
50230: EQUAL
50231: IFTRUE 50235
50233: GO 50297
50235: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50236: LD_ADDR_VAR 0 12
50240: PUSH
50241: LD_VAR 0 18
50245: PPUSH
50246: LD_INT 22
50248: PUSH
50249: LD_VAR 0 16
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: LD_INT 30
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 30
50273: PUSH
50274: LD_INT 3
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: LIST
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PPUSH
50290: CALL_OW 72
50294: ST_TO_ADDR
50295: GO 50379
50297: LD_INT 4
50299: DOUBLE
50300: EQUAL
50301: IFTRUE 50305
50303: GO 50378
50305: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50306: LD_ADDR_VAR 0 12
50310: PUSH
50311: LD_VAR 0 18
50315: PPUSH
50316: LD_INT 22
50318: PUSH
50319: LD_VAR 0 16
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 30
50333: PUSH
50334: LD_INT 6
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 30
50343: PUSH
50344: LD_INT 7
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 30
50353: PUSH
50354: LD_INT 8
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PPUSH
50371: CALL_OW 72
50375: ST_TO_ADDR
50376: GO 50379
50378: POP
// if i = 1 then
50379: LD_VAR 0 8
50383: PUSH
50384: LD_INT 1
50386: EQUAL
50387: IFFALSE 50498
// begin tmp := [ ] ;
50389: LD_ADDR_VAR 0 19
50393: PUSH
50394: EMPTY
50395: ST_TO_ADDR
// for j in f do
50396: LD_ADDR_VAR 0 9
50400: PUSH
50401: LD_VAR 0 12
50405: PUSH
50406: FOR_IN
50407: IFFALSE 50480
// if GetBType ( j ) = b_bunker then
50409: LD_VAR 0 9
50413: PPUSH
50414: CALL_OW 266
50418: PUSH
50419: LD_INT 32
50421: EQUAL
50422: IFFALSE 50449
// tmp := Insert ( tmp , 1 , j ) else
50424: LD_ADDR_VAR 0 19
50428: PUSH
50429: LD_VAR 0 19
50433: PPUSH
50434: LD_INT 1
50436: PPUSH
50437: LD_VAR 0 9
50441: PPUSH
50442: CALL_OW 2
50446: ST_TO_ADDR
50447: GO 50478
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50449: LD_ADDR_VAR 0 19
50453: PUSH
50454: LD_VAR 0 19
50458: PPUSH
50459: LD_VAR 0 19
50463: PUSH
50464: LD_INT 1
50466: PLUS
50467: PPUSH
50468: LD_VAR 0 9
50472: PPUSH
50473: CALL_OW 2
50477: ST_TO_ADDR
50478: GO 50406
50480: POP
50481: POP
// if tmp then
50482: LD_VAR 0 19
50486: IFFALSE 50498
// f := tmp ;
50488: LD_ADDR_VAR 0 12
50492: PUSH
50493: LD_VAR 0 19
50497: ST_TO_ADDR
// end ; x := personel [ i ] ;
50498: LD_ADDR_VAR 0 13
50502: PUSH
50503: LD_VAR 0 6
50507: PUSH
50508: LD_VAR 0 8
50512: ARRAY
50513: ST_TO_ADDR
// if x = - 1 then
50514: LD_VAR 0 13
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: EQUAL
50523: IFFALSE 50732
// begin for j in f do
50525: LD_ADDR_VAR 0 9
50529: PUSH
50530: LD_VAR 0 12
50534: PUSH
50535: FOR_IN
50536: IFFALSE 50728
// repeat InitHc ;
50538: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50542: LD_VAR 0 9
50546: PPUSH
50547: CALL_OW 266
50551: PUSH
50552: LD_INT 5
50554: EQUAL
50555: IFFALSE 50625
// begin if UnitsInside ( j ) < 3 then
50557: LD_VAR 0 9
50561: PPUSH
50562: CALL_OW 313
50566: PUSH
50567: LD_INT 3
50569: LESS
50570: IFFALSE 50606
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50572: LD_INT 0
50574: PPUSH
50575: LD_INT 5
50577: PUSH
50578: LD_INT 8
50580: PUSH
50581: LD_INT 9
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: PUSH
50589: LD_VAR 0 17
50593: ARRAY
50594: PPUSH
50595: LD_VAR 0 4
50599: PPUSH
50600: CALL_OW 380
50604: GO 50623
// PrepareHuman ( false , i , skill ) ;
50606: LD_INT 0
50608: PPUSH
50609: LD_VAR 0 8
50613: PPUSH
50614: LD_VAR 0 4
50618: PPUSH
50619: CALL_OW 380
// end else
50623: GO 50642
// PrepareHuman ( false , i , skill ) ;
50625: LD_INT 0
50627: PPUSH
50628: LD_VAR 0 8
50632: PPUSH
50633: LD_VAR 0 4
50637: PPUSH
50638: CALL_OW 380
// un := CreateHuman ;
50642: LD_ADDR_VAR 0 14
50646: PUSH
50647: CALL_OW 44
50651: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50652: LD_ADDR_VAR 0 7
50656: PUSH
50657: LD_VAR 0 7
50661: PPUSH
50662: LD_INT 1
50664: PPUSH
50665: LD_VAR 0 14
50669: PPUSH
50670: CALL_OW 2
50674: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50675: LD_VAR 0 14
50679: PPUSH
50680: LD_VAR 0 9
50684: PPUSH
50685: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50689: LD_VAR 0 9
50693: PPUSH
50694: CALL_OW 313
50698: PUSH
50699: LD_INT 6
50701: EQUAL
50702: PUSH
50703: LD_VAR 0 9
50707: PPUSH
50708: CALL_OW 266
50712: PUSH
50713: LD_INT 32
50715: PUSH
50716: LD_INT 31
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: IN
50723: OR
50724: IFFALSE 50538
50726: GO 50535
50728: POP
50729: POP
// end else
50730: GO 51112
// for j = 1 to x do
50732: LD_ADDR_VAR 0 9
50736: PUSH
50737: DOUBLE
50738: LD_INT 1
50740: DEC
50741: ST_TO_ADDR
50742: LD_VAR 0 13
50746: PUSH
50747: FOR_TO
50748: IFFALSE 51110
// begin InitHc ;
50750: CALL_OW 19
// if not f then
50754: LD_VAR 0 12
50758: NOT
50759: IFFALSE 50848
// begin PrepareHuman ( false , i , skill ) ;
50761: LD_INT 0
50763: PPUSH
50764: LD_VAR 0 8
50768: PPUSH
50769: LD_VAR 0 4
50773: PPUSH
50774: CALL_OW 380
// un := CreateHuman ;
50778: LD_ADDR_VAR 0 14
50782: PUSH
50783: CALL_OW 44
50787: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50788: LD_ADDR_VAR 0 7
50792: PUSH
50793: LD_VAR 0 7
50797: PPUSH
50798: LD_INT 1
50800: PPUSH
50801: LD_VAR 0 14
50805: PPUSH
50806: CALL_OW 2
50810: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50811: LD_VAR 0 14
50815: PPUSH
50816: LD_VAR 0 1
50820: PPUSH
50821: CALL_OW 250
50825: PPUSH
50826: LD_VAR 0 1
50830: PPUSH
50831: CALL_OW 251
50835: PPUSH
50836: LD_INT 10
50838: PPUSH
50839: LD_INT 0
50841: PPUSH
50842: CALL_OW 50
// continue ;
50846: GO 50747
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50848: LD_VAR 0 12
50852: PUSH
50853: LD_INT 1
50855: ARRAY
50856: PPUSH
50857: CALL_OW 313
50861: PUSH
50862: LD_VAR 0 12
50866: PUSH
50867: LD_INT 1
50869: ARRAY
50870: PPUSH
50871: CALL_OW 266
50875: PUSH
50876: LD_INT 32
50878: PUSH
50879: LD_INT 31
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: IN
50886: AND
50887: PUSH
50888: LD_VAR 0 12
50892: PUSH
50893: LD_INT 1
50895: ARRAY
50896: PPUSH
50897: CALL_OW 313
50901: PUSH
50902: LD_INT 6
50904: EQUAL
50905: OR
50906: IFFALSE 50926
// f := Delete ( f , 1 ) ;
50908: LD_ADDR_VAR 0 12
50912: PUSH
50913: LD_VAR 0 12
50917: PPUSH
50918: LD_INT 1
50920: PPUSH
50921: CALL_OW 3
50925: ST_TO_ADDR
// if not f then
50926: LD_VAR 0 12
50930: NOT
50931: IFFALSE 50949
// begin x := x + 2 ;
50933: LD_ADDR_VAR 0 13
50937: PUSH
50938: LD_VAR 0 13
50942: PUSH
50943: LD_INT 2
50945: PLUS
50946: ST_TO_ADDR
// continue ;
50947: GO 50747
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50949: LD_VAR 0 12
50953: PUSH
50954: LD_INT 1
50956: ARRAY
50957: PPUSH
50958: CALL_OW 266
50962: PUSH
50963: LD_INT 5
50965: EQUAL
50966: IFFALSE 51040
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50968: LD_VAR 0 12
50972: PUSH
50973: LD_INT 1
50975: ARRAY
50976: PPUSH
50977: CALL_OW 313
50981: PUSH
50982: LD_INT 3
50984: LESS
50985: IFFALSE 51021
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50987: LD_INT 0
50989: PPUSH
50990: LD_INT 5
50992: PUSH
50993: LD_INT 8
50995: PUSH
50996: LD_INT 9
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: PUSH
51004: LD_VAR 0 17
51008: ARRAY
51009: PPUSH
51010: LD_VAR 0 4
51014: PPUSH
51015: CALL_OW 380
51019: GO 51038
// PrepareHuman ( false , i , skill ) ;
51021: LD_INT 0
51023: PPUSH
51024: LD_VAR 0 8
51028: PPUSH
51029: LD_VAR 0 4
51033: PPUSH
51034: CALL_OW 380
// end else
51038: GO 51057
// PrepareHuman ( false , i , skill ) ;
51040: LD_INT 0
51042: PPUSH
51043: LD_VAR 0 8
51047: PPUSH
51048: LD_VAR 0 4
51052: PPUSH
51053: CALL_OW 380
// un := CreateHuman ;
51057: LD_ADDR_VAR 0 14
51061: PUSH
51062: CALL_OW 44
51066: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51067: LD_ADDR_VAR 0 7
51071: PUSH
51072: LD_VAR 0 7
51076: PPUSH
51077: LD_INT 1
51079: PPUSH
51080: LD_VAR 0 14
51084: PPUSH
51085: CALL_OW 2
51089: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51090: LD_VAR 0 14
51094: PPUSH
51095: LD_VAR 0 12
51099: PUSH
51100: LD_INT 1
51102: ARRAY
51103: PPUSH
51104: CALL_OW 52
// end ;
51108: GO 50747
51110: POP
51111: POP
// end ;
51112: GO 50049
51114: POP
51115: POP
// result := result ^ buildings ;
51116: LD_ADDR_VAR 0 7
51120: PUSH
51121: LD_VAR 0 7
51125: PUSH
51126: LD_VAR 0 18
51130: ADD
51131: ST_TO_ADDR
// end else
51132: GO 51275
// begin for i = 1 to personel do
51134: LD_ADDR_VAR 0 8
51138: PUSH
51139: DOUBLE
51140: LD_INT 1
51142: DEC
51143: ST_TO_ADDR
51144: LD_VAR 0 6
51148: PUSH
51149: FOR_TO
51150: IFFALSE 51273
// begin if i > 4 then
51152: LD_VAR 0 8
51156: PUSH
51157: LD_INT 4
51159: GREATER
51160: IFFALSE 51164
// break ;
51162: GO 51273
// x := personel [ i ] ;
51164: LD_ADDR_VAR 0 13
51168: PUSH
51169: LD_VAR 0 6
51173: PUSH
51174: LD_VAR 0 8
51178: ARRAY
51179: ST_TO_ADDR
// if x = - 1 then
51180: LD_VAR 0 13
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: EQUAL
51189: IFFALSE 51193
// continue ;
51191: GO 51149
// PrepareHuman ( false , i , skill ) ;
51193: LD_INT 0
51195: PPUSH
51196: LD_VAR 0 8
51200: PPUSH
51201: LD_VAR 0 4
51205: PPUSH
51206: CALL_OW 380
// un := CreateHuman ;
51210: LD_ADDR_VAR 0 14
51214: PUSH
51215: CALL_OW 44
51219: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51220: LD_VAR 0 14
51224: PPUSH
51225: LD_VAR 0 1
51229: PPUSH
51230: CALL_OW 250
51234: PPUSH
51235: LD_VAR 0 1
51239: PPUSH
51240: CALL_OW 251
51244: PPUSH
51245: LD_INT 10
51247: PPUSH
51248: LD_INT 0
51250: PPUSH
51251: CALL_OW 50
// result := result ^ un ;
51255: LD_ADDR_VAR 0 7
51259: PUSH
51260: LD_VAR 0 7
51264: PUSH
51265: LD_VAR 0 14
51269: ADD
51270: ST_TO_ADDR
// end ;
51271: GO 51149
51273: POP
51274: POP
// end ; end ;
51275: LD_VAR 0 7
51279: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51280: LD_INT 0
51282: PPUSH
51283: PPUSH
51284: PPUSH
51285: PPUSH
51286: PPUSH
51287: PPUSH
51288: PPUSH
51289: PPUSH
51290: PPUSH
51291: PPUSH
51292: PPUSH
51293: PPUSH
51294: PPUSH
51295: PPUSH
51296: PPUSH
51297: PPUSH
// result := false ;
51298: LD_ADDR_VAR 0 3
51302: PUSH
51303: LD_INT 0
51305: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51306: LD_VAR 0 1
51310: NOT
51311: PUSH
51312: LD_VAR 0 1
51316: PPUSH
51317: CALL_OW 266
51321: PUSH
51322: LD_INT 32
51324: PUSH
51325: LD_INT 33
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: IN
51332: NOT
51333: OR
51334: IFFALSE 51338
// exit ;
51336: GO 52447
// nat := GetNation ( tower ) ;
51338: LD_ADDR_VAR 0 12
51342: PUSH
51343: LD_VAR 0 1
51347: PPUSH
51348: CALL_OW 248
51352: ST_TO_ADDR
// side := GetSide ( tower ) ;
51353: LD_ADDR_VAR 0 16
51357: PUSH
51358: LD_VAR 0 1
51362: PPUSH
51363: CALL_OW 255
51367: ST_TO_ADDR
// x := GetX ( tower ) ;
51368: LD_ADDR_VAR 0 10
51372: PUSH
51373: LD_VAR 0 1
51377: PPUSH
51378: CALL_OW 250
51382: ST_TO_ADDR
// y := GetY ( tower ) ;
51383: LD_ADDR_VAR 0 11
51387: PUSH
51388: LD_VAR 0 1
51392: PPUSH
51393: CALL_OW 251
51397: ST_TO_ADDR
// if not x or not y then
51398: LD_VAR 0 10
51402: NOT
51403: PUSH
51404: LD_VAR 0 11
51408: NOT
51409: OR
51410: IFFALSE 51414
// exit ;
51412: GO 52447
// weapon := 0 ;
51414: LD_ADDR_VAR 0 18
51418: PUSH
51419: LD_INT 0
51421: ST_TO_ADDR
// fac_list := [ ] ;
51422: LD_ADDR_VAR 0 17
51426: PUSH
51427: EMPTY
51428: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51429: LD_ADDR_VAR 0 6
51433: PUSH
51434: LD_VAR 0 1
51438: PPUSH
51439: CALL_OW 274
51443: PPUSH
51444: LD_VAR 0 2
51448: PPUSH
51449: LD_INT 0
51451: PPUSH
51452: CALL 49018 0 3
51456: PPUSH
51457: LD_INT 30
51459: PUSH
51460: LD_INT 3
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PPUSH
51467: CALL_OW 72
51471: ST_TO_ADDR
// if not factories then
51472: LD_VAR 0 6
51476: NOT
51477: IFFALSE 51481
// exit ;
51479: GO 52447
// for i in factories do
51481: LD_ADDR_VAR 0 8
51485: PUSH
51486: LD_VAR 0 6
51490: PUSH
51491: FOR_IN
51492: IFFALSE 51517
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51494: LD_ADDR_VAR 0 17
51498: PUSH
51499: LD_VAR 0 17
51503: PUSH
51504: LD_VAR 0 8
51508: PPUSH
51509: CALL_OW 478
51513: UNION
51514: ST_TO_ADDR
51515: GO 51491
51517: POP
51518: POP
// if not fac_list then
51519: LD_VAR 0 17
51523: NOT
51524: IFFALSE 51528
// exit ;
51526: GO 52447
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51528: LD_ADDR_VAR 0 5
51532: PUSH
51533: LD_INT 4
51535: PUSH
51536: LD_INT 5
51538: PUSH
51539: LD_INT 9
51541: PUSH
51542: LD_INT 10
51544: PUSH
51545: LD_INT 6
51547: PUSH
51548: LD_INT 7
51550: PUSH
51551: LD_INT 11
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 27
51565: PUSH
51566: LD_INT 28
51568: PUSH
51569: LD_INT 26
51571: PUSH
51572: LD_INT 30
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 43
51583: PUSH
51584: LD_INT 44
51586: PUSH
51587: LD_INT 46
51589: PUSH
51590: LD_INT 45
51592: PUSH
51593: LD_INT 47
51595: PUSH
51596: LD_INT 49
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: PUSH
51612: LD_VAR 0 12
51616: ARRAY
51617: ST_TO_ADDR
// list := list isect fac_list ;
51618: LD_ADDR_VAR 0 5
51622: PUSH
51623: LD_VAR 0 5
51627: PUSH
51628: LD_VAR 0 17
51632: ISECT
51633: ST_TO_ADDR
// if not list then
51634: LD_VAR 0 5
51638: NOT
51639: IFFALSE 51643
// exit ;
51641: GO 52447
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51643: LD_VAR 0 12
51647: PUSH
51648: LD_INT 3
51650: EQUAL
51651: PUSH
51652: LD_INT 49
51654: PUSH
51655: LD_VAR 0 5
51659: IN
51660: AND
51661: PUSH
51662: LD_INT 31
51664: PPUSH
51665: LD_VAR 0 16
51669: PPUSH
51670: CALL_OW 321
51674: PUSH
51675: LD_INT 2
51677: EQUAL
51678: AND
51679: IFFALSE 51739
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51681: LD_INT 22
51683: PUSH
51684: LD_VAR 0 16
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 35
51695: PUSH
51696: LD_INT 49
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 91
51705: PUSH
51706: LD_VAR 0 1
51710: PUSH
51711: LD_INT 10
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: LIST
51723: PPUSH
51724: CALL_OW 69
51728: NOT
51729: IFFALSE 51739
// weapon := ru_time_lapser ;
51731: LD_ADDR_VAR 0 18
51735: PUSH
51736: LD_INT 49
51738: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51739: LD_VAR 0 12
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: IN
51754: PUSH
51755: LD_INT 11
51757: PUSH
51758: LD_VAR 0 5
51762: IN
51763: PUSH
51764: LD_INT 30
51766: PUSH
51767: LD_VAR 0 5
51771: IN
51772: OR
51773: AND
51774: PUSH
51775: LD_INT 6
51777: PPUSH
51778: LD_VAR 0 16
51782: PPUSH
51783: CALL_OW 321
51787: PUSH
51788: LD_INT 2
51790: EQUAL
51791: AND
51792: IFFALSE 51957
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51794: LD_INT 22
51796: PUSH
51797: LD_VAR 0 16
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: LD_INT 35
51811: PUSH
51812: LD_INT 11
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 35
51821: PUSH
51822: LD_INT 30
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 91
51836: PUSH
51837: LD_VAR 0 1
51841: PUSH
51842: LD_INT 18
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: LIST
51854: PPUSH
51855: CALL_OW 69
51859: NOT
51860: PUSH
51861: LD_INT 22
51863: PUSH
51864: LD_VAR 0 16
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 30
51878: PUSH
51879: LD_INT 32
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 30
51888: PUSH
51889: LD_INT 33
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 91
51903: PUSH
51904: LD_VAR 0 1
51908: PUSH
51909: LD_INT 12
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: LIST
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: PUSH
51922: EMPTY
51923: LIST
51924: PPUSH
51925: CALL_OW 69
51929: PUSH
51930: LD_INT 2
51932: GREATER
51933: AND
51934: IFFALSE 51957
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51936: LD_ADDR_VAR 0 18
51940: PUSH
51941: LD_INT 11
51943: PUSH
51944: LD_INT 30
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_VAR 0 12
51955: ARRAY
51956: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51957: LD_VAR 0 18
51961: NOT
51962: PUSH
51963: LD_INT 40
51965: PPUSH
51966: LD_VAR 0 16
51970: PPUSH
51971: CALL_OW 321
51975: PUSH
51976: LD_INT 2
51978: EQUAL
51979: AND
51980: PUSH
51981: LD_INT 7
51983: PUSH
51984: LD_VAR 0 5
51988: IN
51989: PUSH
51990: LD_INT 28
51992: PUSH
51993: LD_VAR 0 5
51997: IN
51998: OR
51999: PUSH
52000: LD_INT 45
52002: PUSH
52003: LD_VAR 0 5
52007: IN
52008: OR
52009: AND
52010: IFFALSE 52264
// begin hex := GetHexInfo ( x , y ) ;
52012: LD_ADDR_VAR 0 4
52016: PUSH
52017: LD_VAR 0 10
52021: PPUSH
52022: LD_VAR 0 11
52026: PPUSH
52027: CALL_OW 546
52031: ST_TO_ADDR
// if hex [ 1 ] then
52032: LD_VAR 0 4
52036: PUSH
52037: LD_INT 1
52039: ARRAY
52040: IFFALSE 52044
// exit ;
52042: GO 52447
// height := hex [ 2 ] ;
52044: LD_ADDR_VAR 0 15
52048: PUSH
52049: LD_VAR 0 4
52053: PUSH
52054: LD_INT 2
52056: ARRAY
52057: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52058: LD_ADDR_VAR 0 14
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 3
52071: PUSH
52072: LD_INT 5
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: ST_TO_ADDR
// for i in tmp do
52081: LD_ADDR_VAR 0 8
52085: PUSH
52086: LD_VAR 0 14
52090: PUSH
52091: FOR_IN
52092: IFFALSE 52262
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52094: LD_ADDR_VAR 0 9
52098: PUSH
52099: LD_VAR 0 10
52103: PPUSH
52104: LD_VAR 0 8
52108: PPUSH
52109: LD_INT 5
52111: PPUSH
52112: CALL_OW 272
52116: PUSH
52117: LD_VAR 0 11
52121: PPUSH
52122: LD_VAR 0 8
52126: PPUSH
52127: LD_INT 5
52129: PPUSH
52130: CALL_OW 273
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52139: LD_VAR 0 9
52143: PUSH
52144: LD_INT 1
52146: ARRAY
52147: PPUSH
52148: LD_VAR 0 9
52152: PUSH
52153: LD_INT 2
52155: ARRAY
52156: PPUSH
52157: CALL_OW 488
52161: IFFALSE 52260
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52163: LD_ADDR_VAR 0 4
52167: PUSH
52168: LD_VAR 0 9
52172: PUSH
52173: LD_INT 1
52175: ARRAY
52176: PPUSH
52177: LD_VAR 0 9
52181: PUSH
52182: LD_INT 2
52184: ARRAY
52185: PPUSH
52186: CALL_OW 546
52190: ST_TO_ADDR
// if hex [ 1 ] then
52191: LD_VAR 0 4
52195: PUSH
52196: LD_INT 1
52198: ARRAY
52199: IFFALSE 52203
// continue ;
52201: GO 52091
// h := hex [ 2 ] ;
52203: LD_ADDR_VAR 0 13
52207: PUSH
52208: LD_VAR 0 4
52212: PUSH
52213: LD_INT 2
52215: ARRAY
52216: ST_TO_ADDR
// if h + 7 < height then
52217: LD_VAR 0 13
52221: PUSH
52222: LD_INT 7
52224: PLUS
52225: PUSH
52226: LD_VAR 0 15
52230: LESS
52231: IFFALSE 52260
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52233: LD_ADDR_VAR 0 18
52237: PUSH
52238: LD_INT 7
52240: PUSH
52241: LD_INT 28
52243: PUSH
52244: LD_INT 45
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: LIST
52251: PUSH
52252: LD_VAR 0 12
52256: ARRAY
52257: ST_TO_ADDR
// break ;
52258: GO 52262
// end ; end ; end ;
52260: GO 52091
52262: POP
52263: POP
// end ; if not weapon then
52264: LD_VAR 0 18
52268: NOT
52269: IFFALSE 52329
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52271: LD_ADDR_VAR 0 5
52275: PUSH
52276: LD_VAR 0 5
52280: PUSH
52281: LD_INT 11
52283: PUSH
52284: LD_INT 30
52286: PUSH
52287: LD_INT 49
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: LIST
52294: DIFF
52295: ST_TO_ADDR
// if not list then
52296: LD_VAR 0 5
52300: NOT
52301: IFFALSE 52305
// exit ;
52303: GO 52447
// weapon := list [ rand ( 1 , list ) ] ;
52305: LD_ADDR_VAR 0 18
52309: PUSH
52310: LD_VAR 0 5
52314: PUSH
52315: LD_INT 1
52317: PPUSH
52318: LD_VAR 0 5
52322: PPUSH
52323: CALL_OW 12
52327: ARRAY
52328: ST_TO_ADDR
// end ; if weapon then
52329: LD_VAR 0 18
52333: IFFALSE 52447
// begin tmp := CostOfWeapon ( weapon ) ;
52335: LD_ADDR_VAR 0 14
52339: PUSH
52340: LD_VAR 0 18
52344: PPUSH
52345: CALL_OW 451
52349: ST_TO_ADDR
// j := GetBase ( tower ) ;
52350: LD_ADDR_VAR 0 9
52354: PUSH
52355: LD_VAR 0 1
52359: PPUSH
52360: CALL_OW 274
52364: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52365: LD_VAR 0 9
52369: PPUSH
52370: LD_INT 1
52372: PPUSH
52373: CALL_OW 275
52377: PUSH
52378: LD_VAR 0 14
52382: PUSH
52383: LD_INT 1
52385: ARRAY
52386: GREATEREQUAL
52387: PUSH
52388: LD_VAR 0 9
52392: PPUSH
52393: LD_INT 2
52395: PPUSH
52396: CALL_OW 275
52400: PUSH
52401: LD_VAR 0 14
52405: PUSH
52406: LD_INT 2
52408: ARRAY
52409: GREATEREQUAL
52410: AND
52411: PUSH
52412: LD_VAR 0 9
52416: PPUSH
52417: LD_INT 3
52419: PPUSH
52420: CALL_OW 275
52424: PUSH
52425: LD_VAR 0 14
52429: PUSH
52430: LD_INT 3
52432: ARRAY
52433: GREATEREQUAL
52434: AND
52435: IFFALSE 52447
// result := weapon ;
52437: LD_ADDR_VAR 0 3
52441: PUSH
52442: LD_VAR 0 18
52446: ST_TO_ADDR
// end ; end ;
52447: LD_VAR 0 3
52451: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52452: LD_INT 0
52454: PPUSH
52455: PPUSH
// result := true ;
52456: LD_ADDR_VAR 0 3
52460: PUSH
52461: LD_INT 1
52463: ST_TO_ADDR
// if array1 = array2 then
52464: LD_VAR 0 1
52468: PUSH
52469: LD_VAR 0 2
52473: EQUAL
52474: IFFALSE 52534
// begin for i = 1 to array1 do
52476: LD_ADDR_VAR 0 4
52480: PUSH
52481: DOUBLE
52482: LD_INT 1
52484: DEC
52485: ST_TO_ADDR
52486: LD_VAR 0 1
52490: PUSH
52491: FOR_TO
52492: IFFALSE 52530
// if array1 [ i ] <> array2 [ i ] then
52494: LD_VAR 0 1
52498: PUSH
52499: LD_VAR 0 4
52503: ARRAY
52504: PUSH
52505: LD_VAR 0 2
52509: PUSH
52510: LD_VAR 0 4
52514: ARRAY
52515: NONEQUAL
52516: IFFALSE 52528
// begin result := false ;
52518: LD_ADDR_VAR 0 3
52522: PUSH
52523: LD_INT 0
52525: ST_TO_ADDR
// break ;
52526: GO 52530
// end ;
52528: GO 52491
52530: POP
52531: POP
// end else
52532: GO 52542
// result := false ;
52534: LD_ADDR_VAR 0 3
52538: PUSH
52539: LD_INT 0
52541: ST_TO_ADDR
// end ;
52542: LD_VAR 0 3
52546: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52547: LD_INT 0
52549: PPUSH
52550: PPUSH
// if not array1 or not array2 then
52551: LD_VAR 0 1
52555: NOT
52556: PUSH
52557: LD_VAR 0 2
52561: NOT
52562: OR
52563: IFFALSE 52567
// exit ;
52565: GO 52631
// result := true ;
52567: LD_ADDR_VAR 0 3
52571: PUSH
52572: LD_INT 1
52574: ST_TO_ADDR
// for i = 1 to array1 do
52575: LD_ADDR_VAR 0 4
52579: PUSH
52580: DOUBLE
52581: LD_INT 1
52583: DEC
52584: ST_TO_ADDR
52585: LD_VAR 0 1
52589: PUSH
52590: FOR_TO
52591: IFFALSE 52629
// if array1 [ i ] <> array2 [ i ] then
52593: LD_VAR 0 1
52597: PUSH
52598: LD_VAR 0 4
52602: ARRAY
52603: PUSH
52604: LD_VAR 0 2
52608: PUSH
52609: LD_VAR 0 4
52613: ARRAY
52614: NONEQUAL
52615: IFFALSE 52627
// begin result := false ;
52617: LD_ADDR_VAR 0 3
52621: PUSH
52622: LD_INT 0
52624: ST_TO_ADDR
// break ;
52625: GO 52629
// end ;
52627: GO 52590
52629: POP
52630: POP
// end ;
52631: LD_VAR 0 3
52635: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52636: LD_INT 0
52638: PPUSH
52639: PPUSH
52640: PPUSH
// pom := GetBase ( fac ) ;
52641: LD_ADDR_VAR 0 5
52645: PUSH
52646: LD_VAR 0 1
52650: PPUSH
52651: CALL_OW 274
52655: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52656: LD_ADDR_VAR 0 4
52660: PUSH
52661: LD_VAR 0 2
52665: PUSH
52666: LD_INT 1
52668: ARRAY
52669: PPUSH
52670: LD_VAR 0 2
52674: PUSH
52675: LD_INT 2
52677: ARRAY
52678: PPUSH
52679: LD_VAR 0 2
52683: PUSH
52684: LD_INT 3
52686: ARRAY
52687: PPUSH
52688: LD_VAR 0 2
52692: PUSH
52693: LD_INT 4
52695: ARRAY
52696: PPUSH
52697: CALL_OW 449
52701: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52702: LD_ADDR_VAR 0 3
52706: PUSH
52707: LD_VAR 0 5
52711: PPUSH
52712: LD_INT 1
52714: PPUSH
52715: CALL_OW 275
52719: PUSH
52720: LD_VAR 0 4
52724: PUSH
52725: LD_INT 1
52727: ARRAY
52728: GREATEREQUAL
52729: PUSH
52730: LD_VAR 0 5
52734: PPUSH
52735: LD_INT 2
52737: PPUSH
52738: CALL_OW 275
52742: PUSH
52743: LD_VAR 0 4
52747: PUSH
52748: LD_INT 2
52750: ARRAY
52751: GREATEREQUAL
52752: AND
52753: PUSH
52754: LD_VAR 0 5
52758: PPUSH
52759: LD_INT 3
52761: PPUSH
52762: CALL_OW 275
52766: PUSH
52767: LD_VAR 0 4
52771: PUSH
52772: LD_INT 3
52774: ARRAY
52775: GREATEREQUAL
52776: AND
52777: ST_TO_ADDR
// end ;
52778: LD_VAR 0 3
52782: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52783: LD_INT 0
52785: PPUSH
52786: PPUSH
52787: PPUSH
52788: PPUSH
// pom := GetBase ( building ) ;
52789: LD_ADDR_VAR 0 3
52793: PUSH
52794: LD_VAR 0 1
52798: PPUSH
52799: CALL_OW 274
52803: ST_TO_ADDR
// if not pom then
52804: LD_VAR 0 3
52808: NOT
52809: IFFALSE 52813
// exit ;
52811: GO 52983
// btype := GetBType ( building ) ;
52813: LD_ADDR_VAR 0 5
52817: PUSH
52818: LD_VAR 0 1
52822: PPUSH
52823: CALL_OW 266
52827: ST_TO_ADDR
// if btype = b_armoury then
52828: LD_VAR 0 5
52832: PUSH
52833: LD_INT 4
52835: EQUAL
52836: IFFALSE 52846
// btype := b_barracks ;
52838: LD_ADDR_VAR 0 5
52842: PUSH
52843: LD_INT 5
52845: ST_TO_ADDR
// if btype = b_depot then
52846: LD_VAR 0 5
52850: PUSH
52851: LD_INT 0
52853: EQUAL
52854: IFFALSE 52864
// btype := b_warehouse ;
52856: LD_ADDR_VAR 0 5
52860: PUSH
52861: LD_INT 1
52863: ST_TO_ADDR
// if btype = b_workshop then
52864: LD_VAR 0 5
52868: PUSH
52869: LD_INT 2
52871: EQUAL
52872: IFFALSE 52882
// btype := b_factory ;
52874: LD_ADDR_VAR 0 5
52878: PUSH
52879: LD_INT 3
52881: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52882: LD_ADDR_VAR 0 4
52886: PUSH
52887: LD_VAR 0 5
52891: PPUSH
52892: LD_VAR 0 1
52896: PPUSH
52897: CALL_OW 248
52901: PPUSH
52902: CALL_OW 450
52906: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52907: LD_ADDR_VAR 0 2
52911: PUSH
52912: LD_VAR 0 3
52916: PPUSH
52917: LD_INT 1
52919: PPUSH
52920: CALL_OW 275
52924: PUSH
52925: LD_VAR 0 4
52929: PUSH
52930: LD_INT 1
52932: ARRAY
52933: GREATEREQUAL
52934: PUSH
52935: LD_VAR 0 3
52939: PPUSH
52940: LD_INT 2
52942: PPUSH
52943: CALL_OW 275
52947: PUSH
52948: LD_VAR 0 4
52952: PUSH
52953: LD_INT 2
52955: ARRAY
52956: GREATEREQUAL
52957: AND
52958: PUSH
52959: LD_VAR 0 3
52963: PPUSH
52964: LD_INT 3
52966: PPUSH
52967: CALL_OW 275
52971: PUSH
52972: LD_VAR 0 4
52976: PUSH
52977: LD_INT 3
52979: ARRAY
52980: GREATEREQUAL
52981: AND
52982: ST_TO_ADDR
// end ;
52983: LD_VAR 0 2
52987: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52988: LD_INT 0
52990: PPUSH
52991: PPUSH
52992: PPUSH
// pom := GetBase ( building ) ;
52993: LD_ADDR_VAR 0 4
52997: PUSH
52998: LD_VAR 0 1
53002: PPUSH
53003: CALL_OW 274
53007: ST_TO_ADDR
// if not pom then
53008: LD_VAR 0 4
53012: NOT
53013: IFFALSE 53017
// exit ;
53015: GO 53118
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53017: LD_ADDR_VAR 0 5
53021: PUSH
53022: LD_VAR 0 2
53026: PPUSH
53027: LD_VAR 0 1
53031: PPUSH
53032: CALL_OW 248
53036: PPUSH
53037: CALL_OW 450
53041: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53042: LD_ADDR_VAR 0 3
53046: PUSH
53047: LD_VAR 0 4
53051: PPUSH
53052: LD_INT 1
53054: PPUSH
53055: CALL_OW 275
53059: PUSH
53060: LD_VAR 0 5
53064: PUSH
53065: LD_INT 1
53067: ARRAY
53068: GREATEREQUAL
53069: PUSH
53070: LD_VAR 0 4
53074: PPUSH
53075: LD_INT 2
53077: PPUSH
53078: CALL_OW 275
53082: PUSH
53083: LD_VAR 0 5
53087: PUSH
53088: LD_INT 2
53090: ARRAY
53091: GREATEREQUAL
53092: AND
53093: PUSH
53094: LD_VAR 0 4
53098: PPUSH
53099: LD_INT 3
53101: PPUSH
53102: CALL_OW 275
53106: PUSH
53107: LD_VAR 0 5
53111: PUSH
53112: LD_INT 3
53114: ARRAY
53115: GREATEREQUAL
53116: AND
53117: ST_TO_ADDR
// end ;
53118: LD_VAR 0 3
53122: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53123: LD_INT 0
53125: PPUSH
53126: PPUSH
53127: PPUSH
53128: PPUSH
53129: PPUSH
53130: PPUSH
53131: PPUSH
53132: PPUSH
53133: PPUSH
53134: PPUSH
53135: PPUSH
// result := false ;
53136: LD_ADDR_VAR 0 8
53140: PUSH
53141: LD_INT 0
53143: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53144: LD_VAR 0 5
53148: NOT
53149: PUSH
53150: LD_VAR 0 1
53154: NOT
53155: OR
53156: PUSH
53157: LD_VAR 0 2
53161: NOT
53162: OR
53163: PUSH
53164: LD_VAR 0 3
53168: NOT
53169: OR
53170: IFFALSE 53174
// exit ;
53172: GO 53988
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53174: LD_ADDR_VAR 0 14
53178: PUSH
53179: LD_VAR 0 1
53183: PPUSH
53184: LD_VAR 0 2
53188: PPUSH
53189: LD_VAR 0 3
53193: PPUSH
53194: LD_VAR 0 4
53198: PPUSH
53199: LD_VAR 0 5
53203: PUSH
53204: LD_INT 1
53206: ARRAY
53207: PPUSH
53208: CALL_OW 248
53212: PPUSH
53213: LD_INT 0
53215: PPUSH
53216: CALL 55225 0 6
53220: ST_TO_ADDR
// if not hexes then
53221: LD_VAR 0 14
53225: NOT
53226: IFFALSE 53230
// exit ;
53228: GO 53988
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53230: LD_ADDR_VAR 0 17
53234: PUSH
53235: LD_VAR 0 5
53239: PPUSH
53240: LD_INT 22
53242: PUSH
53243: LD_VAR 0 13
53247: PPUSH
53248: CALL_OW 255
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: LD_INT 30
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 30
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PPUSH
53289: CALL_OW 72
53293: ST_TO_ADDR
// for i = 1 to hexes do
53294: LD_ADDR_VAR 0 9
53298: PUSH
53299: DOUBLE
53300: LD_INT 1
53302: DEC
53303: ST_TO_ADDR
53304: LD_VAR 0 14
53308: PUSH
53309: FOR_TO
53310: IFFALSE 53986
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53312: LD_ADDR_VAR 0 13
53316: PUSH
53317: LD_VAR 0 14
53321: PUSH
53322: LD_VAR 0 9
53326: ARRAY
53327: PUSH
53328: LD_INT 1
53330: ARRAY
53331: PPUSH
53332: LD_VAR 0 14
53336: PUSH
53337: LD_VAR 0 9
53341: ARRAY
53342: PUSH
53343: LD_INT 2
53345: ARRAY
53346: PPUSH
53347: CALL_OW 428
53351: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53352: LD_VAR 0 14
53356: PUSH
53357: LD_VAR 0 9
53361: ARRAY
53362: PUSH
53363: LD_INT 1
53365: ARRAY
53366: PPUSH
53367: LD_VAR 0 14
53371: PUSH
53372: LD_VAR 0 9
53376: ARRAY
53377: PUSH
53378: LD_INT 2
53380: ARRAY
53381: PPUSH
53382: CALL_OW 351
53386: PUSH
53387: LD_VAR 0 14
53391: PUSH
53392: LD_VAR 0 9
53396: ARRAY
53397: PUSH
53398: LD_INT 1
53400: ARRAY
53401: PPUSH
53402: LD_VAR 0 14
53406: PUSH
53407: LD_VAR 0 9
53411: ARRAY
53412: PUSH
53413: LD_INT 2
53415: ARRAY
53416: PPUSH
53417: CALL_OW 488
53421: NOT
53422: OR
53423: PUSH
53424: LD_VAR 0 13
53428: PPUSH
53429: CALL_OW 247
53433: PUSH
53434: LD_INT 3
53436: EQUAL
53437: OR
53438: IFFALSE 53444
// exit ;
53440: POP
53441: POP
53442: GO 53988
// if not tmp then
53444: LD_VAR 0 13
53448: NOT
53449: IFFALSE 53453
// continue ;
53451: GO 53309
// result := true ;
53453: LD_ADDR_VAR 0 8
53457: PUSH
53458: LD_INT 1
53460: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53461: LD_VAR 0 6
53465: PUSH
53466: LD_VAR 0 13
53470: PPUSH
53471: CALL_OW 247
53475: PUSH
53476: LD_INT 2
53478: EQUAL
53479: AND
53480: PUSH
53481: LD_VAR 0 13
53485: PPUSH
53486: CALL_OW 263
53490: PUSH
53491: LD_INT 1
53493: EQUAL
53494: AND
53495: IFFALSE 53659
// begin if IsDrivenBy ( tmp ) then
53497: LD_VAR 0 13
53501: PPUSH
53502: CALL_OW 311
53506: IFFALSE 53510
// continue ;
53508: GO 53309
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53510: LD_VAR 0 6
53514: PPUSH
53515: LD_INT 3
53517: PUSH
53518: LD_INT 60
53520: PUSH
53521: EMPTY
53522: LIST
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 3
53530: PUSH
53531: LD_INT 55
53533: PUSH
53534: EMPTY
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PPUSH
53545: CALL_OW 72
53549: IFFALSE 53657
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53551: LD_ADDR_VAR 0 18
53555: PUSH
53556: LD_VAR 0 6
53560: PPUSH
53561: LD_INT 3
53563: PUSH
53564: LD_INT 60
53566: PUSH
53567: EMPTY
53568: LIST
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 3
53576: PUSH
53577: LD_INT 55
53579: PUSH
53580: EMPTY
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PPUSH
53591: CALL_OW 72
53595: PUSH
53596: LD_INT 1
53598: ARRAY
53599: ST_TO_ADDR
// if IsInUnit ( driver ) then
53600: LD_VAR 0 18
53604: PPUSH
53605: CALL_OW 310
53609: IFFALSE 53620
// ComExit ( driver ) ;
53611: LD_VAR 0 18
53615: PPUSH
53616: CALL 78930 0 1
// AddComEnterUnit ( driver , tmp ) ;
53620: LD_VAR 0 18
53624: PPUSH
53625: LD_VAR 0 13
53629: PPUSH
53630: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53634: LD_VAR 0 18
53638: PPUSH
53639: LD_VAR 0 7
53643: PPUSH
53644: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53648: LD_VAR 0 18
53652: PPUSH
53653: CALL_OW 181
// end ; continue ;
53657: GO 53309
// end ; if not cleaners or not tmp in cleaners then
53659: LD_VAR 0 6
53663: NOT
53664: PUSH
53665: LD_VAR 0 13
53669: PUSH
53670: LD_VAR 0 6
53674: IN
53675: NOT
53676: OR
53677: IFFALSE 53984
// begin if dep then
53679: LD_VAR 0 17
53683: IFFALSE 53819
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53685: LD_ADDR_VAR 0 16
53689: PUSH
53690: LD_VAR 0 17
53694: PUSH
53695: LD_INT 1
53697: ARRAY
53698: PPUSH
53699: CALL_OW 250
53703: PPUSH
53704: LD_VAR 0 17
53708: PUSH
53709: LD_INT 1
53711: ARRAY
53712: PPUSH
53713: CALL_OW 254
53717: PPUSH
53718: LD_INT 5
53720: PPUSH
53721: CALL_OW 272
53725: PUSH
53726: LD_VAR 0 17
53730: PUSH
53731: LD_INT 1
53733: ARRAY
53734: PPUSH
53735: CALL_OW 251
53739: PPUSH
53740: LD_VAR 0 17
53744: PUSH
53745: LD_INT 1
53747: ARRAY
53748: PPUSH
53749: CALL_OW 254
53753: PPUSH
53754: LD_INT 5
53756: PPUSH
53757: CALL_OW 273
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53766: LD_VAR 0 16
53770: PUSH
53771: LD_INT 1
53773: ARRAY
53774: PPUSH
53775: LD_VAR 0 16
53779: PUSH
53780: LD_INT 2
53782: ARRAY
53783: PPUSH
53784: CALL_OW 488
53788: IFFALSE 53819
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53790: LD_VAR 0 13
53794: PPUSH
53795: LD_VAR 0 16
53799: PUSH
53800: LD_INT 1
53802: ARRAY
53803: PPUSH
53804: LD_VAR 0 16
53808: PUSH
53809: LD_INT 2
53811: ARRAY
53812: PPUSH
53813: CALL_OW 111
// continue ;
53817: GO 53309
// end ; end ; r := GetDir ( tmp ) ;
53819: LD_ADDR_VAR 0 15
53823: PUSH
53824: LD_VAR 0 13
53828: PPUSH
53829: CALL_OW 254
53833: ST_TO_ADDR
// if r = 5 then
53834: LD_VAR 0 15
53838: PUSH
53839: LD_INT 5
53841: EQUAL
53842: IFFALSE 53852
// r := 0 ;
53844: LD_ADDR_VAR 0 15
53848: PUSH
53849: LD_INT 0
53851: ST_TO_ADDR
// for j = r to 5 do
53852: LD_ADDR_VAR 0 10
53856: PUSH
53857: DOUBLE
53858: LD_VAR 0 15
53862: DEC
53863: ST_TO_ADDR
53864: LD_INT 5
53866: PUSH
53867: FOR_TO
53868: IFFALSE 53982
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53870: LD_ADDR_VAR 0 11
53874: PUSH
53875: LD_VAR 0 13
53879: PPUSH
53880: CALL_OW 250
53884: PPUSH
53885: LD_VAR 0 10
53889: PPUSH
53890: LD_INT 2
53892: PPUSH
53893: CALL_OW 272
53897: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53898: LD_ADDR_VAR 0 12
53902: PUSH
53903: LD_VAR 0 13
53907: PPUSH
53908: CALL_OW 251
53912: PPUSH
53913: LD_VAR 0 10
53917: PPUSH
53918: LD_INT 2
53920: PPUSH
53921: CALL_OW 273
53925: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53926: LD_VAR 0 11
53930: PPUSH
53931: LD_VAR 0 12
53935: PPUSH
53936: CALL_OW 488
53940: PUSH
53941: LD_VAR 0 11
53945: PPUSH
53946: LD_VAR 0 12
53950: PPUSH
53951: CALL_OW 428
53955: NOT
53956: AND
53957: IFFALSE 53980
// begin ComMoveXY ( tmp , _x , _y ) ;
53959: LD_VAR 0 13
53963: PPUSH
53964: LD_VAR 0 11
53968: PPUSH
53969: LD_VAR 0 12
53973: PPUSH
53974: CALL_OW 111
// break ;
53978: GO 53982
// end ; end ;
53980: GO 53867
53982: POP
53983: POP
// end ; end ;
53984: GO 53309
53986: POP
53987: POP
// end ;
53988: LD_VAR 0 8
53992: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53993: LD_INT 0
53995: PPUSH
// result := true ;
53996: LD_ADDR_VAR 0 3
54000: PUSH
54001: LD_INT 1
54003: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54004: LD_VAR 0 2
54008: PUSH
54009: LD_INT 24
54011: DOUBLE
54012: EQUAL
54013: IFTRUE 54023
54015: LD_INT 33
54017: DOUBLE
54018: EQUAL
54019: IFTRUE 54023
54021: GO 54048
54023: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54024: LD_ADDR_VAR 0 3
54028: PUSH
54029: LD_INT 32
54031: PPUSH
54032: LD_VAR 0 1
54036: PPUSH
54037: CALL_OW 321
54041: PUSH
54042: LD_INT 2
54044: EQUAL
54045: ST_TO_ADDR
54046: GO 54368
54048: LD_INT 20
54050: DOUBLE
54051: EQUAL
54052: IFTRUE 54056
54054: GO 54081
54056: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54057: LD_ADDR_VAR 0 3
54061: PUSH
54062: LD_INT 6
54064: PPUSH
54065: LD_VAR 0 1
54069: PPUSH
54070: CALL_OW 321
54074: PUSH
54075: LD_INT 2
54077: EQUAL
54078: ST_TO_ADDR
54079: GO 54368
54081: LD_INT 22
54083: DOUBLE
54084: EQUAL
54085: IFTRUE 54095
54087: LD_INT 36
54089: DOUBLE
54090: EQUAL
54091: IFTRUE 54095
54093: GO 54120
54095: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54096: LD_ADDR_VAR 0 3
54100: PUSH
54101: LD_INT 15
54103: PPUSH
54104: LD_VAR 0 1
54108: PPUSH
54109: CALL_OW 321
54113: PUSH
54114: LD_INT 2
54116: EQUAL
54117: ST_TO_ADDR
54118: GO 54368
54120: LD_INT 30
54122: DOUBLE
54123: EQUAL
54124: IFTRUE 54128
54126: GO 54153
54128: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54129: LD_ADDR_VAR 0 3
54133: PUSH
54134: LD_INT 20
54136: PPUSH
54137: LD_VAR 0 1
54141: PPUSH
54142: CALL_OW 321
54146: PUSH
54147: LD_INT 2
54149: EQUAL
54150: ST_TO_ADDR
54151: GO 54368
54153: LD_INT 28
54155: DOUBLE
54156: EQUAL
54157: IFTRUE 54167
54159: LD_INT 21
54161: DOUBLE
54162: EQUAL
54163: IFTRUE 54167
54165: GO 54192
54167: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54168: LD_ADDR_VAR 0 3
54172: PUSH
54173: LD_INT 21
54175: PPUSH
54176: LD_VAR 0 1
54180: PPUSH
54181: CALL_OW 321
54185: PUSH
54186: LD_INT 2
54188: EQUAL
54189: ST_TO_ADDR
54190: GO 54368
54192: LD_INT 16
54194: DOUBLE
54195: EQUAL
54196: IFTRUE 54200
54198: GO 54227
54200: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54201: LD_ADDR_VAR 0 3
54205: PUSH
54206: LD_EXP 62
54210: PPUSH
54211: LD_VAR 0 1
54215: PPUSH
54216: CALL_OW 321
54220: PUSH
54221: LD_INT 2
54223: EQUAL
54224: ST_TO_ADDR
54225: GO 54368
54227: LD_INT 19
54229: DOUBLE
54230: EQUAL
54231: IFTRUE 54241
54233: LD_INT 23
54235: DOUBLE
54236: EQUAL
54237: IFTRUE 54241
54239: GO 54268
54241: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54242: LD_ADDR_VAR 0 3
54246: PUSH
54247: LD_EXP 61
54251: PPUSH
54252: LD_VAR 0 1
54256: PPUSH
54257: CALL_OW 321
54261: PUSH
54262: LD_INT 2
54264: EQUAL
54265: ST_TO_ADDR
54266: GO 54368
54268: LD_INT 17
54270: DOUBLE
54271: EQUAL
54272: IFTRUE 54276
54274: GO 54301
54276: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54277: LD_ADDR_VAR 0 3
54281: PUSH
54282: LD_INT 39
54284: PPUSH
54285: LD_VAR 0 1
54289: PPUSH
54290: CALL_OW 321
54294: PUSH
54295: LD_INT 2
54297: EQUAL
54298: ST_TO_ADDR
54299: GO 54368
54301: LD_INT 18
54303: DOUBLE
54304: EQUAL
54305: IFTRUE 54309
54307: GO 54334
54309: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54310: LD_ADDR_VAR 0 3
54314: PUSH
54315: LD_INT 40
54317: PPUSH
54318: LD_VAR 0 1
54322: PPUSH
54323: CALL_OW 321
54327: PUSH
54328: LD_INT 2
54330: EQUAL
54331: ST_TO_ADDR
54332: GO 54368
54334: LD_INT 27
54336: DOUBLE
54337: EQUAL
54338: IFTRUE 54342
54340: GO 54367
54342: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54343: LD_ADDR_VAR 0 3
54347: PUSH
54348: LD_INT 35
54350: PPUSH
54351: LD_VAR 0 1
54355: PPUSH
54356: CALL_OW 321
54360: PUSH
54361: LD_INT 2
54363: EQUAL
54364: ST_TO_ADDR
54365: GO 54368
54367: POP
// end ;
54368: LD_VAR 0 3
54372: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54373: LD_INT 0
54375: PPUSH
54376: PPUSH
54377: PPUSH
54378: PPUSH
54379: PPUSH
54380: PPUSH
54381: PPUSH
54382: PPUSH
54383: PPUSH
54384: PPUSH
54385: PPUSH
// result := false ;
54386: LD_ADDR_VAR 0 6
54390: PUSH
54391: LD_INT 0
54393: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54394: LD_VAR 0 1
54398: NOT
54399: PUSH
54400: LD_VAR 0 1
54404: PPUSH
54405: CALL_OW 266
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: IN
54420: NOT
54421: OR
54422: PUSH
54423: LD_VAR 0 2
54427: NOT
54428: OR
54429: PUSH
54430: LD_VAR 0 5
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: LD_INT 4
54449: PUSH
54450: LD_INT 5
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: IN
54461: NOT
54462: OR
54463: PUSH
54464: LD_VAR 0 3
54468: PPUSH
54469: LD_VAR 0 4
54473: PPUSH
54474: CALL_OW 488
54478: NOT
54479: OR
54480: IFFALSE 54484
// exit ;
54482: GO 55220
// side := GetSide ( depot ) ;
54484: LD_ADDR_VAR 0 9
54488: PUSH
54489: LD_VAR 0 1
54493: PPUSH
54494: CALL_OW 255
54498: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54499: LD_VAR 0 9
54503: PPUSH
54504: LD_VAR 0 2
54508: PPUSH
54509: CALL 53993 0 2
54513: NOT
54514: IFFALSE 54518
// exit ;
54516: GO 55220
// pom := GetBase ( depot ) ;
54518: LD_ADDR_VAR 0 10
54522: PUSH
54523: LD_VAR 0 1
54527: PPUSH
54528: CALL_OW 274
54532: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54533: LD_ADDR_VAR 0 11
54537: PUSH
54538: LD_VAR 0 2
54542: PPUSH
54543: LD_VAR 0 1
54547: PPUSH
54548: CALL_OW 248
54552: PPUSH
54553: CALL_OW 450
54557: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54558: LD_VAR 0 10
54562: PPUSH
54563: LD_INT 1
54565: PPUSH
54566: CALL_OW 275
54570: PUSH
54571: LD_VAR 0 11
54575: PUSH
54576: LD_INT 1
54578: ARRAY
54579: GREATEREQUAL
54580: PUSH
54581: LD_VAR 0 10
54585: PPUSH
54586: LD_INT 2
54588: PPUSH
54589: CALL_OW 275
54593: PUSH
54594: LD_VAR 0 11
54598: PUSH
54599: LD_INT 2
54601: ARRAY
54602: GREATEREQUAL
54603: AND
54604: PUSH
54605: LD_VAR 0 10
54609: PPUSH
54610: LD_INT 3
54612: PPUSH
54613: CALL_OW 275
54617: PUSH
54618: LD_VAR 0 11
54622: PUSH
54623: LD_INT 3
54625: ARRAY
54626: GREATEREQUAL
54627: AND
54628: NOT
54629: IFFALSE 54633
// exit ;
54631: GO 55220
// if GetBType ( depot ) = b_depot then
54633: LD_VAR 0 1
54637: PPUSH
54638: CALL_OW 266
54642: PUSH
54643: LD_INT 0
54645: EQUAL
54646: IFFALSE 54658
// dist := 28 else
54648: LD_ADDR_VAR 0 14
54652: PUSH
54653: LD_INT 28
54655: ST_TO_ADDR
54656: GO 54666
// dist := 36 ;
54658: LD_ADDR_VAR 0 14
54662: PUSH
54663: LD_INT 36
54665: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54666: LD_VAR 0 1
54670: PPUSH
54671: LD_VAR 0 3
54675: PPUSH
54676: LD_VAR 0 4
54680: PPUSH
54681: CALL_OW 297
54685: PUSH
54686: LD_VAR 0 14
54690: GREATER
54691: IFFALSE 54695
// exit ;
54693: GO 55220
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54695: LD_ADDR_VAR 0 12
54699: PUSH
54700: LD_VAR 0 2
54704: PPUSH
54705: LD_VAR 0 3
54709: PPUSH
54710: LD_VAR 0 4
54714: PPUSH
54715: LD_VAR 0 5
54719: PPUSH
54720: LD_VAR 0 1
54724: PPUSH
54725: CALL_OW 248
54729: PPUSH
54730: LD_INT 0
54732: PPUSH
54733: CALL 55225 0 6
54737: ST_TO_ADDR
// if not hexes then
54738: LD_VAR 0 12
54742: NOT
54743: IFFALSE 54747
// exit ;
54745: GO 55220
// hex := GetHexInfo ( x , y ) ;
54747: LD_ADDR_VAR 0 15
54751: PUSH
54752: LD_VAR 0 3
54756: PPUSH
54757: LD_VAR 0 4
54761: PPUSH
54762: CALL_OW 546
54766: ST_TO_ADDR
// if hex [ 1 ] then
54767: LD_VAR 0 15
54771: PUSH
54772: LD_INT 1
54774: ARRAY
54775: IFFALSE 54779
// exit ;
54777: GO 55220
// height := hex [ 2 ] ;
54779: LD_ADDR_VAR 0 13
54783: PUSH
54784: LD_VAR 0 15
54788: PUSH
54789: LD_INT 2
54791: ARRAY
54792: ST_TO_ADDR
// for i = 1 to hexes do
54793: LD_ADDR_VAR 0 7
54797: PUSH
54798: DOUBLE
54799: LD_INT 1
54801: DEC
54802: ST_TO_ADDR
54803: LD_VAR 0 12
54807: PUSH
54808: FOR_TO
54809: IFFALSE 55139
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54811: LD_VAR 0 12
54815: PUSH
54816: LD_VAR 0 7
54820: ARRAY
54821: PUSH
54822: LD_INT 1
54824: ARRAY
54825: PPUSH
54826: LD_VAR 0 12
54830: PUSH
54831: LD_VAR 0 7
54835: ARRAY
54836: PUSH
54837: LD_INT 2
54839: ARRAY
54840: PPUSH
54841: CALL_OW 488
54845: NOT
54846: PUSH
54847: LD_VAR 0 12
54851: PUSH
54852: LD_VAR 0 7
54856: ARRAY
54857: PUSH
54858: LD_INT 1
54860: ARRAY
54861: PPUSH
54862: LD_VAR 0 12
54866: PUSH
54867: LD_VAR 0 7
54871: ARRAY
54872: PUSH
54873: LD_INT 2
54875: ARRAY
54876: PPUSH
54877: CALL_OW 428
54881: PUSH
54882: LD_INT 0
54884: GREATER
54885: OR
54886: PUSH
54887: LD_VAR 0 12
54891: PUSH
54892: LD_VAR 0 7
54896: ARRAY
54897: PUSH
54898: LD_INT 1
54900: ARRAY
54901: PPUSH
54902: LD_VAR 0 12
54906: PUSH
54907: LD_VAR 0 7
54911: ARRAY
54912: PUSH
54913: LD_INT 2
54915: ARRAY
54916: PPUSH
54917: CALL_OW 351
54921: OR
54922: IFFALSE 54928
// exit ;
54924: POP
54925: POP
54926: GO 55220
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54928: LD_ADDR_VAR 0 8
54932: PUSH
54933: LD_VAR 0 12
54937: PUSH
54938: LD_VAR 0 7
54942: ARRAY
54943: PUSH
54944: LD_INT 1
54946: ARRAY
54947: PPUSH
54948: LD_VAR 0 12
54952: PUSH
54953: LD_VAR 0 7
54957: ARRAY
54958: PUSH
54959: LD_INT 2
54961: ARRAY
54962: PPUSH
54963: CALL_OW 546
54967: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54968: LD_VAR 0 8
54972: PUSH
54973: LD_INT 1
54975: ARRAY
54976: PUSH
54977: LD_VAR 0 8
54981: PUSH
54982: LD_INT 2
54984: ARRAY
54985: PUSH
54986: LD_VAR 0 13
54990: PUSH
54991: LD_INT 2
54993: PLUS
54994: GREATER
54995: OR
54996: PUSH
54997: LD_VAR 0 8
55001: PUSH
55002: LD_INT 2
55004: ARRAY
55005: PUSH
55006: LD_VAR 0 13
55010: PUSH
55011: LD_INT 2
55013: MINUS
55014: LESS
55015: OR
55016: PUSH
55017: LD_VAR 0 8
55021: PUSH
55022: LD_INT 3
55024: ARRAY
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 8
55031: PUSH
55032: LD_INT 9
55034: PUSH
55035: LD_INT 10
55037: PUSH
55038: LD_INT 11
55040: PUSH
55041: LD_INT 12
55043: PUSH
55044: LD_INT 13
55046: PUSH
55047: LD_INT 16
55049: PUSH
55050: LD_INT 17
55052: PUSH
55053: LD_INT 18
55055: PUSH
55056: LD_INT 19
55058: PUSH
55059: LD_INT 20
55061: PUSH
55062: LD_INT 21
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: IN
55080: NOT
55081: OR
55082: PUSH
55083: LD_VAR 0 8
55087: PUSH
55088: LD_INT 5
55090: ARRAY
55091: NOT
55092: OR
55093: PUSH
55094: LD_VAR 0 8
55098: PUSH
55099: LD_INT 6
55101: ARRAY
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: LD_INT 7
55111: PUSH
55112: LD_INT 9
55114: PUSH
55115: LD_INT 10
55117: PUSH
55118: LD_INT 11
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: IN
55129: NOT
55130: OR
55131: IFFALSE 55137
// exit ;
55133: POP
55134: POP
55135: GO 55220
// end ;
55137: GO 54808
55139: POP
55140: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55141: LD_VAR 0 9
55145: PPUSH
55146: LD_VAR 0 3
55150: PPUSH
55151: LD_VAR 0 4
55155: PPUSH
55156: LD_INT 20
55158: PPUSH
55159: CALL 47166 0 4
55163: PUSH
55164: LD_INT 4
55166: ARRAY
55167: IFFALSE 55171
// exit ;
55169: GO 55220
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55171: LD_VAR 0 2
55175: PUSH
55176: LD_INT 29
55178: PUSH
55179: LD_INT 30
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: IN
55186: PUSH
55187: LD_VAR 0 3
55191: PPUSH
55192: LD_VAR 0 4
55196: PPUSH
55197: LD_VAR 0 9
55201: PPUSH
55202: CALL_OW 440
55206: NOT
55207: AND
55208: IFFALSE 55212
// exit ;
55210: GO 55220
// result := true ;
55212: LD_ADDR_VAR 0 6
55216: PUSH
55217: LD_INT 1
55219: ST_TO_ADDR
// end ;
55220: LD_VAR 0 6
55224: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55225: LD_INT 0
55227: PPUSH
55228: PPUSH
55229: PPUSH
55230: PPUSH
55231: PPUSH
55232: PPUSH
55233: PPUSH
55234: PPUSH
55235: PPUSH
55236: PPUSH
55237: PPUSH
55238: PPUSH
55239: PPUSH
55240: PPUSH
55241: PPUSH
55242: PPUSH
55243: PPUSH
55244: PPUSH
55245: PPUSH
55246: PPUSH
55247: PPUSH
55248: PPUSH
55249: PPUSH
55250: PPUSH
55251: PPUSH
55252: PPUSH
55253: PPUSH
55254: PPUSH
55255: PPUSH
55256: PPUSH
55257: PPUSH
55258: PPUSH
55259: PPUSH
55260: PPUSH
55261: PPUSH
55262: PPUSH
55263: PPUSH
55264: PPUSH
55265: PPUSH
55266: PPUSH
55267: PPUSH
55268: PPUSH
55269: PPUSH
55270: PPUSH
55271: PPUSH
55272: PPUSH
55273: PPUSH
55274: PPUSH
55275: PPUSH
55276: PPUSH
55277: PPUSH
55278: PPUSH
55279: PPUSH
55280: PPUSH
55281: PPUSH
55282: PPUSH
55283: PPUSH
55284: PPUSH
// result = [ ] ;
55285: LD_ADDR_VAR 0 7
55289: PUSH
55290: EMPTY
55291: ST_TO_ADDR
// temp_list = [ ] ;
55292: LD_ADDR_VAR 0 9
55296: PUSH
55297: EMPTY
55298: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55299: LD_VAR 0 4
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: LD_INT 4
55318: PUSH
55319: LD_INT 5
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: IN
55330: NOT
55331: PUSH
55332: LD_VAR 0 1
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: IN
55347: PUSH
55348: LD_VAR 0 5
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: IN
55367: NOT
55368: AND
55369: OR
55370: IFFALSE 55374
// exit ;
55372: GO 73765
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55374: LD_VAR 0 1
55378: PUSH
55379: LD_INT 6
55381: PUSH
55382: LD_INT 7
55384: PUSH
55385: LD_INT 8
55387: PUSH
55388: LD_INT 13
55390: PUSH
55391: LD_INT 12
55393: PUSH
55394: LD_INT 15
55396: PUSH
55397: LD_INT 11
55399: PUSH
55400: LD_INT 14
55402: PUSH
55403: LD_INT 10
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: IN
55417: IFFALSE 55427
// btype = b_lab ;
55419: LD_ADDR_VAR 0 1
55423: PUSH
55424: LD_INT 6
55426: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55427: LD_VAR 0 6
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: LIST
55445: IN
55446: NOT
55447: PUSH
55448: LD_VAR 0 1
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: LD_INT 6
55467: PUSH
55468: LD_INT 36
55470: PUSH
55471: LD_INT 4
55473: PUSH
55474: LD_INT 5
55476: PUSH
55477: LD_INT 31
55479: PUSH
55480: LD_INT 32
55482: PUSH
55483: LD_INT 33
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: IN
55499: NOT
55500: PUSH
55501: LD_VAR 0 6
55505: PUSH
55506: LD_INT 1
55508: EQUAL
55509: AND
55510: OR
55511: PUSH
55512: LD_VAR 0 1
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: LD_INT 3
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: IN
55527: NOT
55528: PUSH
55529: LD_VAR 0 6
55533: PUSH
55534: LD_INT 2
55536: EQUAL
55537: AND
55538: OR
55539: IFFALSE 55549
// mode = 0 ;
55541: LD_ADDR_VAR 0 6
55545: PUSH
55546: LD_INT 0
55548: ST_TO_ADDR
// case mode of 0 :
55549: LD_VAR 0 6
55553: PUSH
55554: LD_INT 0
55556: DOUBLE
55557: EQUAL
55558: IFTRUE 55562
55560: GO 67015
55562: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55563: LD_ADDR_VAR 0 11
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 3
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55756: LD_ADDR_VAR 0 12
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55952: LD_ADDR_VAR 0 13
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: LD_INT 2
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 3
56123: NEG
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56151: LD_ADDR_VAR 0 14
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 3
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56347: LD_ADDR_VAR 0 15
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 2
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 3
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 3
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56540: LD_ADDR_VAR 0 16
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: LD_INT 2
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: LD_INT 3
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 2
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56733: LD_ADDR_VAR 0 17
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 2
56932: NEG
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56963: LD_ADDR_VAR 0 18
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: LD_INT 2
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57193: LD_ADDR_VAR 0 19
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57423: LD_ADDR_VAR 0 20
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 2
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: NEG
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57653: LD_ADDR_VAR 0 21
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 2
57852: NEG
57853: PUSH
57854: LD_INT 2
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57883: LD_ADDR_VAR 0 22
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 2
58082: NEG
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58113: LD_ADDR_VAR 0 23
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: LD_INT 3
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 2
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58393: LD_ADDR_VAR 0 24
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: NEG
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 2
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 2
58592: NEG
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 3
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58669: LD_ADDR_VAR 0 25
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: LD_INT 2
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 3
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: LD_INT 3
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: LD_INT 3
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58943: LD_ADDR_VAR 0 26
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: LD_INT 2
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: NEG
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: LD_INT 2
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59219: LD_ADDR_VAR 0 27
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: NEG
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: LD_INT 2
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 2
59395: NEG
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: NEG
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 3
59452: NEG
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 3
59464: NEG
59465: PUSH
59466: LD_INT 2
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59499: LD_ADDR_VAR 0 28
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 0
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 2
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: PUSH
59604: LD_INT 1
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 2
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: NEG
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: NEG
59699: PUSH
59700: LD_INT 2
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: NEG
59711: PUSH
59712: LD_INT 3
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: LD_INT 3
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 3
59734: NEG
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 3
59746: NEG
59747: PUSH
59748: LD_INT 2
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59781: LD_ADDR_VAR 0 29
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: LD_INT 1
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: LD_INT 2
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 2
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: LD_INT 2
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 2
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: LD_INT 2
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: LD_INT 3
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: LD_INT 3
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 3
60025: NEG
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60060: LD_ADDR_VAR 0 30
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 2
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: NEG
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: LD_INT 3
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: LD_INT 3
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 3
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60338: LD_ADDR_VAR 0 31
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 2
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 2
60515: NEG
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 2
60527: NEG
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 3
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 3
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 3
60581: NEG
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60616: LD_ADDR_VAR 0 32
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 0
60633: PUSH
60634: LD_INT 1
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: NEG
60698: PUSH
60699: LD_INT 2
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: LD_INT 2
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 2
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: LD_INT 2
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 2
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 2
60782: NEG
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 2
60793: NEG
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: LD_INT 3
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: LD_INT 2
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: LD_INT 3
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 3
60859: NEG
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60894: LD_ADDR_VAR 0 33
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: LD_INT 2
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 2
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: NEG
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: NEG
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: NEG
61073: PUSH
61074: LD_INT 2
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: LD_INT 3
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 3
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: LD_INT 3
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 3
61138: NEG
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61173: LD_ADDR_VAR 0 34
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: LD_INT 1
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: NEG
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 1
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 2
61340: NEG
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 2
61352: NEG
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: NEG
61365: PUSH
61366: LD_INT 3
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 2
61397: PUSH
61398: LD_INT 3
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 3
61418: NEG
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61453: LD_ADDR_VAR 0 35
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: LD_INT 1
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61565: LD_ADDR_VAR 0 36
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: LD_INT 2
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: LD_INT 2
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61677: LD_ADDR_VAR 0 37
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61789: LD_ADDR_VAR 0 38
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: LD_INT 1
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 2
61880: NEG
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61901: LD_ADDR_VAR 0 39
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: LD_INT 2
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62013: LD_ADDR_VAR 0 40
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62125: LD_ADDR_VAR 0 41
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: LD_INT 2
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: NEG
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: NEG
62304: PUSH
62305: LD_INT 2
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: NEG
62316: PUSH
62317: LD_INT 3
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 3
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 3
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 3
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 2
62388: NEG
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 3
62399: NEG
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 3
62410: NEG
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: LD_INT 3
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62475: LD_ADDR_VAR 0 42
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 2
62641: NEG
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 2
62653: NEG
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: LD_INT 3
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: LD_INT 3
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: LD_INT 2
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 3
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 3
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: LD_INT 3
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: LD_INT 3
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 2
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 3
62772: NEG
62773: PUSH
62774: LD_INT 2
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 3
62784: NEG
62785: PUSH
62786: LD_INT 3
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62825: LD_ADDR_VAR 0 43
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: NEG
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 1
62894: NEG
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: LD_INT 2
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: LD_INT 2
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 2
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 2
62991: NEG
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: LD_INT 3
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: LD_INT 3
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: LD_INT 2
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 2
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 3
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 3
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: LD_INT 3
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: LD_INT 3
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: LD_INT 2
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 2
63110: NEG
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: NEG
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 3
63132: NEG
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63173: LD_ADDR_VAR 0 44
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 2
63297: PUSH
63298: LD_INT 2
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 2
63328: NEG
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 2
63339: NEG
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 2
63351: NEG
63352: PUSH
63353: LD_INT 2
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 2
63363: NEG
63364: PUSH
63365: LD_INT 3
63367: NEG
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 2
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 3
63386: PUSH
63387: LD_INT 0
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 3
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 3
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 3
63416: PUSH
63417: LD_INT 3
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: LD_INT 3
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 2
63436: NEG
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 3
63447: NEG
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 3
63458: NEG
63459: PUSH
63460: LD_INT 1
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 3
63470: NEG
63471: PUSH
63472: LD_INT 2
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 3
63482: NEG
63483: PUSH
63484: LD_INT 3
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63523: LD_ADDR_VAR 0 45
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 1
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 1
63581: NEG
63582: PUSH
63583: LD_INT 0
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 1
63592: NEG
63593: PUSH
63594: LD_INT 1
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 1
63604: NEG
63605: PUSH
63606: LD_INT 2
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 1
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 2
63638: PUSH
63639: LD_INT 1
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: LD_INT 2
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: LD_INT 2
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: NEG
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: LD_INT 2
63701: NEG
63702: PUSH
63703: LD_INT 2
63705: NEG
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 2
63713: NEG
63714: PUSH
63715: LD_INT 3
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: LD_INT 3
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: LD_INT 3
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 3
63759: PUSH
63760: LD_INT 2
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 3
63769: PUSH
63770: LD_INT 3
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 2
63779: PUSH
63780: LD_INT 3
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: LD_INT 3
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: LD_INT 3
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 1
63809: NEG
63810: PUSH
63811: LD_INT 2
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 3
63820: NEG
63821: PUSH
63822: LD_INT 2
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 3
63832: NEG
63833: PUSH
63834: LD_INT 3
63836: NEG
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63873: LD_ADDR_VAR 0 46
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: LD_INT 1
63893: NEG
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 1
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 1
63931: NEG
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 1
63954: NEG
63955: PUSH
63956: LD_INT 2
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 2
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 2
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 0
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 1
64028: NEG
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 2
64039: NEG
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 2
64050: NEG
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: LD_INT 3
64066: NEG
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 3
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 2
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 2
64096: PUSH
64097: LD_INT 1
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 3
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 3
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: LD_INT 3
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: LD_INT 3
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 1
64147: NEG
64148: PUSH
64149: LD_INT 2
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 2
64158: NEG
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 3
64169: NEG
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 3
64180: NEG
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64221: LD_ADDR_VAR 0 47
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 1
64302: NEG
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: LD_INT 2
64317: NEG
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 1
64325: PUSH
64326: LD_INT 1
64328: NEG
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 2
64336: NEG
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 2
64348: NEG
64349: PUSH
64350: LD_INT 2
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64372: LD_ADDR_VAR 0 48
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: LD_INT 0
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: LD_INT 1
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 1
64400: PUSH
64401: LD_INT 0
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 1
64410: PUSH
64411: LD_INT 1
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: LD_INT 2
64457: NEG
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_INT 2
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 2
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 2
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64519: LD_ADDR_VAR 0 49
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 1
64577: NEG
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 2
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: LD_INT 2
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64663: LD_ADDR_VAR 0 50
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: LD_INT 1
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 1
64721: NEG
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 1
64732: NEG
64733: PUSH
64734: LD_INT 1
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 2
64744: PUSH
64745: LD_INT 1
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 2
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: PUSH
64765: LD_INT 2
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: LD_INT 2
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64807: LD_ADDR_VAR 0 51
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 1
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 1
64865: NEG
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 1
64876: NEG
64877: PUSH
64878: LD_INT 1
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: LD_INT 2
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: LD_INT 2
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: NEG
64909: PUSH
64910: LD_INT 1
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 2
64919: NEG
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 2
64930: NEG
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64954: LD_ADDR_VAR 0 52
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 1
64974: NEG
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: LD_INT 1
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 1
65012: NEG
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: LD_INT 2
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 2
65058: NEG
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 2
65069: NEG
65070: PUSH
65071: LD_INT 1
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 2
65081: NEG
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65105: LD_ADDR_VAR 0 53
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: LD_INT 1
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 1
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 0
65153: PUSH
65154: LD_INT 1
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 1
65163: NEG
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 1
65174: NEG
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 1
65186: NEG
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: LD_INT 2
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 1
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 2
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 2
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 2
65240: PUSH
65241: LD_INT 2
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: LD_INT 2
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 0
65260: PUSH
65261: LD_INT 2
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 1
65270: NEG
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 2
65281: NEG
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 2
65292: NEG
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 2
65304: NEG
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65335: LD_ADDR_VAR 0 54
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: LD_INT 1
65355: NEG
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: LD_INT 1
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 1
65416: NEG
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: LD_INT 2
65431: NEG
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: LD_INT 1
65442: NEG
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 2
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 2
65460: PUSH
65461: LD_INT 1
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 2
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 1
65480: PUSH
65481: LD_INT 2
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: LD_INT 2
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 2
65511: NEG
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 2
65522: NEG
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 2
65534: NEG
65535: PUSH
65536: LD_INT 2
65538: NEG
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65565: LD_ADDR_VAR 0 55
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 0
65582: PUSH
65583: LD_INT 1
65585: NEG
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 1
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: LD_INT 1
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 1
65623: NEG
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 1
65646: NEG
65647: PUSH
65648: LD_INT 2
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: LD_INT 2
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: LD_INT 1
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 2
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 2
65690: PUSH
65691: LD_INT 1
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 2
65700: PUSH
65701: LD_INT 2
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 1
65710: PUSH
65711: LD_INT 2
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: LD_INT 2
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 1
65730: NEG
65731: PUSH
65732: LD_INT 1
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 2
65741: NEG
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 2
65752: NEG
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 2
65764: NEG
65765: PUSH
65766: LD_INT 2
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65795: LD_ADDR_VAR 0 56
65799: PUSH
65800: LD_INT 0
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: LD_INT 1
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: LD_INT 1
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 1
65876: NEG
65877: PUSH
65878: LD_INT 2
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: LD_INT 2
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: LD_INT 1
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 2
65910: PUSH
65911: LD_INT 0
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 2
65920: PUSH
65921: LD_INT 1
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 1
65940: PUSH
65941: LD_INT 2
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 0
65950: PUSH
65951: LD_INT 2
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 1
65960: NEG
65961: PUSH
65962: LD_INT 1
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 2
65971: NEG
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 2
65982: NEG
65983: PUSH
65984: LD_INT 1
65986: NEG
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 2
65994: NEG
65995: PUSH
65996: LD_INT 2
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66025: LD_ADDR_VAR 0 57
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: LD_INT 0
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 1
66063: PUSH
66064: LD_INT 1
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 0
66073: PUSH
66074: LD_INT 1
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 1
66083: NEG
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 1
66094: NEG
66095: PUSH
66096: LD_INT 1
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 1
66106: NEG
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: LD_INT 2
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 1
66129: PUSH
66130: LD_INT 1
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 2
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 2
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 2
66160: PUSH
66161: LD_INT 2
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 1
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 1
66190: NEG
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 2
66201: NEG
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 2
66212: NEG
66213: PUSH
66214: LD_INT 1
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 2
66224: NEG
66225: PUSH
66226: LD_INT 2
66228: NEG
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66255: LD_ADDR_VAR 0 58
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 1
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 0
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 1
66336: NEG
66337: PUSH
66338: LD_INT 2
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 2
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 1
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 2
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 2
66380: PUSH
66381: LD_INT 1
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 2
66390: PUSH
66391: LD_INT 2
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 1
66400: PUSH
66401: LD_INT 2
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: LD_INT 2
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 1
66420: NEG
66421: PUSH
66422: LD_INT 1
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 2
66431: NEG
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 2
66442: NEG
66443: PUSH
66444: LD_INT 1
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 2
66454: NEG
66455: PUSH
66456: LD_INT 2
66458: NEG
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66485: LD_ADDR_VAR 0 59
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: LD_INT 0
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 0
66502: PUSH
66503: LD_INT 1
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 1
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 0
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 1
66543: NEG
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 1
66554: NEG
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66573: LD_ADDR_VAR 0 60
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: LD_INT 1
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 1
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: LD_INT 1
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 1
66631: NEG
66632: PUSH
66633: LD_INT 0
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 1
66642: NEG
66643: PUSH
66644: LD_INT 1
66646: NEG
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66661: LD_ADDR_VAR 0 61
66665: PUSH
66666: LD_INT 0
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 0
66678: PUSH
66679: LD_INT 1
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 1
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: LD_INT 1
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 0
66709: PUSH
66710: LD_INT 1
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 1
66719: NEG
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 1
66730: NEG
66731: PUSH
66732: LD_INT 1
66734: NEG
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66749: LD_ADDR_VAR 0 62
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: LD_INT 1
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: LD_INT 1
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: LD_INT 1
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66837: LD_ADDR_VAR 0 63
66841: PUSH
66842: LD_INT 0
66844: PUSH
66845: LD_INT 0
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 1
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 1
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 1
66875: PUSH
66876: LD_INT 1
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 0
66885: PUSH
66886: LD_INT 1
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: PUSH
66897: LD_INT 0
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 1
66906: NEG
66907: PUSH
66908: LD_INT 1
66910: NEG
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66925: LD_ADDR_VAR 0 64
66929: PUSH
66930: LD_INT 0
66932: PUSH
66933: LD_INT 0
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: LD_INT 1
66945: NEG
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 1
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 1
66963: PUSH
66964: LD_INT 1
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 0
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 1
66983: NEG
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 1
66994: NEG
66995: PUSH
66996: LD_INT 1
66998: NEG
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: ST_TO_ADDR
// end ; 1 :
67013: GO 72910
67015: LD_INT 1
67017: DOUBLE
67018: EQUAL
67019: IFTRUE 67023
67021: GO 69646
67023: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67024: LD_ADDR_VAR 0 11
67028: PUSH
67029: LD_INT 1
67031: NEG
67032: PUSH
67033: LD_INT 3
67035: NEG
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: LD_INT 3
67046: NEG
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: LD_INT 2
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: LIST
67067: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67068: LD_ADDR_VAR 0 12
67072: PUSH
67073: LD_INT 2
67075: PUSH
67076: LD_INT 1
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 3
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 3
67096: PUSH
67097: LD_INT 1
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: LIST
67108: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67109: LD_ADDR_VAR 0 13
67113: PUSH
67114: LD_INT 3
67116: PUSH
67117: LD_INT 2
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 3
67126: PUSH
67127: LD_INT 3
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 2
67136: PUSH
67137: LD_INT 3
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67149: LD_ADDR_VAR 0 14
67153: PUSH
67154: LD_INT 1
67156: PUSH
67157: LD_INT 3
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 0
67166: PUSH
67167: LD_INT 3
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 1
67176: NEG
67177: PUSH
67178: LD_INT 2
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: LIST
67189: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67190: LD_ADDR_VAR 0 15
67194: PUSH
67195: LD_INT 2
67197: NEG
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: NEG
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 3
67219: NEG
67220: PUSH
67221: LD_INT 1
67223: NEG
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: LIST
67233: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67234: LD_ADDR_VAR 0 16
67238: PUSH
67239: LD_INT 2
67241: NEG
67242: PUSH
67243: LD_INT 3
67245: NEG
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 3
67253: NEG
67254: PUSH
67255: LD_INT 2
67257: NEG
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 3
67265: NEG
67266: PUSH
67267: LD_INT 3
67269: NEG
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: LIST
67279: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67280: LD_ADDR_VAR 0 17
67284: PUSH
67285: LD_INT 1
67287: NEG
67288: PUSH
67289: LD_INT 3
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 0
67299: PUSH
67300: LD_INT 3
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: PUSH
67311: LD_INT 2
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: LIST
67323: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67324: LD_ADDR_VAR 0 18
67328: PUSH
67329: LD_INT 2
67331: PUSH
67332: LD_INT 1
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 3
67342: PUSH
67343: LD_INT 0
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 3
67352: PUSH
67353: LD_INT 1
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: LIST
67364: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67365: LD_ADDR_VAR 0 19
67369: PUSH
67370: LD_INT 3
67372: PUSH
67373: LD_INT 2
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 3
67382: PUSH
67383: LD_INT 3
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 2
67392: PUSH
67393: LD_INT 3
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: LIST
67404: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67405: LD_ADDR_VAR 0 20
67409: PUSH
67410: LD_INT 1
67412: PUSH
67413: LD_INT 3
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 0
67422: PUSH
67423: LD_INT 3
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 1
67432: NEG
67433: PUSH
67434: LD_INT 2
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: LIST
67445: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67446: LD_ADDR_VAR 0 21
67450: PUSH
67451: LD_INT 2
67453: NEG
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 3
67464: NEG
67465: PUSH
67466: LD_INT 0
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 3
67475: NEG
67476: PUSH
67477: LD_INT 1
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: LIST
67489: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67490: LD_ADDR_VAR 0 22
67494: PUSH
67495: LD_INT 2
67497: NEG
67498: PUSH
67499: LD_INT 3
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 3
67509: NEG
67510: PUSH
67511: LD_INT 2
67513: NEG
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 3
67521: NEG
67522: PUSH
67523: LD_INT 3
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: LIST
67535: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67536: LD_ADDR_VAR 0 23
67540: PUSH
67541: LD_INT 0
67543: PUSH
67544: LD_INT 3
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 1
67554: NEG
67555: PUSH
67556: LD_INT 4
67558: NEG
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 1
67566: PUSH
67567: LD_INT 3
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: LIST
67579: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67580: LD_ADDR_VAR 0 24
67584: PUSH
67585: LD_INT 3
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 3
67597: PUSH
67598: LD_INT 1
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: LD_INT 1
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: LIST
67620: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67621: LD_ADDR_VAR 0 25
67625: PUSH
67626: LD_INT 3
67628: PUSH
67629: LD_INT 3
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 4
67638: PUSH
67639: LD_INT 3
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 3
67648: PUSH
67649: LD_INT 4
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: LIST
67660: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67661: LD_ADDR_VAR 0 26
67665: PUSH
67666: LD_INT 0
67668: PUSH
67669: LD_INT 3
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 1
67678: PUSH
67679: LD_INT 4
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 1
67688: NEG
67689: PUSH
67690: LD_INT 3
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: LIST
67701: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67702: LD_ADDR_VAR 0 27
67706: PUSH
67707: LD_INT 3
67709: NEG
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 3
67720: NEG
67721: PUSH
67722: LD_INT 1
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 4
67731: NEG
67732: PUSH
67733: LD_INT 1
67735: NEG
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: LIST
67745: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67746: LD_ADDR_VAR 0 28
67750: PUSH
67751: LD_INT 3
67753: NEG
67754: PUSH
67755: LD_INT 3
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 3
67765: NEG
67766: PUSH
67767: LD_INT 4
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 4
67777: NEG
67778: PUSH
67779: LD_INT 3
67781: NEG
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: LIST
67791: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67792: LD_ADDR_VAR 0 29
67796: PUSH
67797: LD_INT 1
67799: NEG
67800: PUSH
67801: LD_INT 3
67803: NEG
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: LD_INT 3
67814: NEG
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 1
67822: PUSH
67823: LD_INT 2
67825: NEG
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: PUSH
67835: LD_INT 4
67837: NEG
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: LD_INT 4
67848: NEG
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 1
67856: PUSH
67857: LD_INT 3
67859: NEG
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 1
67867: NEG
67868: PUSH
67869: LD_INT 5
67871: NEG
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: LD_INT 5
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 1
67890: PUSH
67891: LD_INT 4
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: LD_INT 6
67905: NEG
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: LD_INT 6
67916: NEG
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: LD_INT 5
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67947: LD_ADDR_VAR 0 30
67951: PUSH
67952: LD_INT 2
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 3
67965: PUSH
67966: LD_INT 0
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 3
67975: PUSH
67976: LD_INT 1
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 3
67985: PUSH
67986: LD_INT 1
67988: NEG
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 4
67996: PUSH
67997: LD_INT 0
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 4
68006: PUSH
68007: LD_INT 1
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 4
68016: PUSH
68017: LD_INT 1
68019: NEG
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 5
68027: PUSH
68028: LD_INT 0
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 5
68037: PUSH
68038: LD_INT 1
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 5
68047: PUSH
68048: LD_INT 1
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 6
68058: PUSH
68059: LD_INT 0
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 6
68068: PUSH
68069: LD_INT 1
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68090: LD_ADDR_VAR 0 31
68094: PUSH
68095: LD_INT 3
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 3
68107: PUSH
68108: LD_INT 3
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 2
68117: PUSH
68118: LD_INT 3
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 4
68127: PUSH
68128: LD_INT 3
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 4
68137: PUSH
68138: LD_INT 4
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 3
68147: PUSH
68148: LD_INT 4
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 5
68157: PUSH
68158: LD_INT 4
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 5
68167: PUSH
68168: LD_INT 5
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 4
68177: PUSH
68178: LD_INT 5
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 6
68187: PUSH
68188: LD_INT 5
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 6
68197: PUSH
68198: LD_INT 6
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 5
68207: PUSH
68208: LD_INT 6
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68229: LD_ADDR_VAR 0 32
68233: PUSH
68234: LD_INT 1
68236: PUSH
68237: LD_INT 3
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 0
68246: PUSH
68247: LD_INT 3
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 1
68256: NEG
68257: PUSH
68258: LD_INT 2
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 1
68267: PUSH
68268: LD_INT 4
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: LD_INT 4
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 1
68287: NEG
68288: PUSH
68289: LD_INT 3
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: LD_INT 5
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 0
68308: PUSH
68309: LD_INT 5
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 1
68318: NEG
68319: PUSH
68320: LD_INT 4
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 1
68329: PUSH
68330: LD_INT 6
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 0
68339: PUSH
68340: LD_INT 6
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 1
68349: NEG
68350: PUSH
68351: LD_INT 5
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68372: LD_ADDR_VAR 0 33
68376: PUSH
68377: LD_INT 2
68379: NEG
68380: PUSH
68381: LD_INT 1
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 3
68390: NEG
68391: PUSH
68392: LD_INT 0
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 3
68401: NEG
68402: PUSH
68403: LD_INT 1
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 3
68413: NEG
68414: PUSH
68415: LD_INT 1
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 4
68424: NEG
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 4
68435: NEG
68436: PUSH
68437: LD_INT 1
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 4
68447: NEG
68448: PUSH
68449: LD_INT 1
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 5
68458: NEG
68459: PUSH
68460: LD_INT 0
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 5
68469: NEG
68470: PUSH
68471: LD_INT 1
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 5
68481: NEG
68482: PUSH
68483: LD_INT 1
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 6
68492: NEG
68493: PUSH
68494: LD_INT 0
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 6
68503: NEG
68504: PUSH
68505: LD_INT 1
68507: NEG
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68527: LD_ADDR_VAR 0 34
68531: PUSH
68532: LD_INT 2
68534: NEG
68535: PUSH
68536: LD_INT 3
68538: NEG
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 3
68546: NEG
68547: PUSH
68548: LD_INT 2
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 3
68558: NEG
68559: PUSH
68560: LD_INT 3
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 3
68570: NEG
68571: PUSH
68572: LD_INT 4
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 4
68582: NEG
68583: PUSH
68584: LD_INT 3
68586: NEG
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 4
68594: NEG
68595: PUSH
68596: LD_INT 4
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 4
68606: NEG
68607: PUSH
68608: LD_INT 5
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 5
68618: NEG
68619: PUSH
68620: LD_INT 4
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 5
68630: NEG
68631: PUSH
68632: LD_INT 5
68634: NEG
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 5
68642: NEG
68643: PUSH
68644: LD_INT 6
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 6
68654: NEG
68655: PUSH
68656: LD_INT 5
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 6
68666: NEG
68667: PUSH
68668: LD_INT 6
68670: NEG
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68690: LD_ADDR_VAR 0 41
68694: PUSH
68695: LD_INT 0
68697: PUSH
68698: LD_INT 2
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 1
68708: NEG
68709: PUSH
68710: LD_INT 3
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 1
68720: PUSH
68721: LD_INT 2
68723: NEG
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: LIST
68733: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68734: LD_ADDR_VAR 0 42
68738: PUSH
68739: LD_INT 2
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 2
68751: PUSH
68752: LD_INT 1
68754: NEG
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 3
68762: PUSH
68763: LD_INT 1
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: LIST
68774: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68775: LD_ADDR_VAR 0 43
68779: PUSH
68780: LD_INT 2
68782: PUSH
68783: LD_INT 2
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 3
68792: PUSH
68793: LD_INT 2
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 2
68802: PUSH
68803: LD_INT 3
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: LIST
68814: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68815: LD_ADDR_VAR 0 44
68819: PUSH
68820: LD_INT 0
68822: PUSH
68823: LD_INT 2
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 1
68832: PUSH
68833: LD_INT 3
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 1
68842: NEG
68843: PUSH
68844: LD_INT 2
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: LIST
68855: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68856: LD_ADDR_VAR 0 45
68860: PUSH
68861: LD_INT 2
68863: NEG
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 2
68874: NEG
68875: PUSH
68876: LD_INT 1
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 3
68885: NEG
68886: PUSH
68887: LD_INT 1
68889: NEG
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: LIST
68899: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68900: LD_ADDR_VAR 0 46
68904: PUSH
68905: LD_INT 2
68907: NEG
68908: PUSH
68909: LD_INT 2
68911: NEG
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 2
68919: NEG
68920: PUSH
68921: LD_INT 3
68923: NEG
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 3
68931: NEG
68932: PUSH
68933: LD_INT 2
68935: NEG
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: LIST
68945: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68946: LD_ADDR_VAR 0 47
68950: PUSH
68951: LD_INT 2
68953: NEG
68954: PUSH
68955: LD_INT 3
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 1
68965: NEG
68966: PUSH
68967: LD_INT 3
68969: NEG
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68979: LD_ADDR_VAR 0 48
68983: PUSH
68984: LD_INT 1
68986: PUSH
68987: LD_INT 2
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 2
68997: PUSH
68998: LD_INT 1
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69010: LD_ADDR_VAR 0 49
69014: PUSH
69015: LD_INT 3
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 3
69027: PUSH
69028: LD_INT 2
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69039: LD_ADDR_VAR 0 50
69043: PUSH
69044: LD_INT 2
69046: PUSH
69047: LD_INT 3
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 1
69056: PUSH
69057: LD_INT 3
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69068: LD_ADDR_VAR 0 51
69072: PUSH
69073: LD_INT 1
69075: NEG
69076: PUSH
69077: LD_INT 2
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 2
69086: NEG
69087: PUSH
69088: LD_INT 1
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69099: LD_ADDR_VAR 0 52
69103: PUSH
69104: LD_INT 3
69106: NEG
69107: PUSH
69108: LD_INT 1
69110: NEG
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 3
69118: NEG
69119: PUSH
69120: LD_INT 2
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69132: LD_ADDR_VAR 0 53
69136: PUSH
69137: LD_INT 1
69139: NEG
69140: PUSH
69141: LD_INT 3
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: LD_INT 3
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 1
69162: PUSH
69163: LD_INT 2
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: LIST
69175: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69176: LD_ADDR_VAR 0 54
69180: PUSH
69181: LD_INT 2
69183: PUSH
69184: LD_INT 1
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 3
69194: PUSH
69195: LD_INT 0
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 3
69204: PUSH
69205: LD_INT 1
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: LIST
69216: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69217: LD_ADDR_VAR 0 55
69221: PUSH
69222: LD_INT 3
69224: PUSH
69225: LD_INT 2
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 3
69234: PUSH
69235: LD_INT 3
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 2
69244: PUSH
69245: LD_INT 3
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: LIST
69256: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69257: LD_ADDR_VAR 0 56
69261: PUSH
69262: LD_INT 1
69264: PUSH
69265: LD_INT 3
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 0
69274: PUSH
69275: LD_INT 3
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 1
69284: NEG
69285: PUSH
69286: LD_INT 2
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: LIST
69297: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69298: LD_ADDR_VAR 0 57
69302: PUSH
69303: LD_INT 2
69305: NEG
69306: PUSH
69307: LD_INT 1
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 3
69316: NEG
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 3
69327: NEG
69328: PUSH
69329: LD_INT 1
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: LIST
69341: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69342: LD_ADDR_VAR 0 58
69346: PUSH
69347: LD_INT 2
69349: NEG
69350: PUSH
69351: LD_INT 3
69353: NEG
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 3
69361: NEG
69362: PUSH
69363: LD_INT 2
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 3
69373: NEG
69374: PUSH
69375: LD_INT 3
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: LIST
69387: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69388: LD_ADDR_VAR 0 59
69392: PUSH
69393: LD_INT 1
69395: NEG
69396: PUSH
69397: LD_INT 2
69399: NEG
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 0
69407: PUSH
69408: LD_INT 2
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 1
69418: PUSH
69419: LD_INT 1
69421: NEG
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: LIST
69431: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69432: LD_ADDR_VAR 0 60
69436: PUSH
69437: LD_INT 1
69439: PUSH
69440: LD_INT 1
69442: NEG
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 2
69450: PUSH
69451: LD_INT 0
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 2
69460: PUSH
69461: LD_INT 1
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: LIST
69472: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69473: LD_ADDR_VAR 0 61
69477: PUSH
69478: LD_INT 2
69480: PUSH
69481: LD_INT 1
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 2
69490: PUSH
69491: LD_INT 2
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 1
69500: PUSH
69501: LD_INT 2
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: LIST
69512: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69513: LD_ADDR_VAR 0 62
69517: PUSH
69518: LD_INT 1
69520: PUSH
69521: LD_INT 2
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 0
69530: PUSH
69531: LD_INT 2
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 1
69540: NEG
69541: PUSH
69542: LD_INT 1
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: LIST
69553: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69554: LD_ADDR_VAR 0 63
69558: PUSH
69559: LD_INT 1
69561: NEG
69562: PUSH
69563: LD_INT 1
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 2
69572: NEG
69573: PUSH
69574: LD_INT 0
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: LD_INT 2
69583: NEG
69584: PUSH
69585: LD_INT 1
69587: NEG
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: LIST
69597: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69598: LD_ADDR_VAR 0 64
69602: PUSH
69603: LD_INT 1
69605: NEG
69606: PUSH
69607: LD_INT 2
69609: NEG
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 2
69617: NEG
69618: PUSH
69619: LD_INT 1
69621: NEG
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 2
69629: NEG
69630: PUSH
69631: LD_INT 2
69633: NEG
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: LIST
69643: ST_TO_ADDR
// end ; 2 :
69644: GO 72910
69646: LD_INT 2
69648: DOUBLE
69649: EQUAL
69650: IFTRUE 69654
69652: GO 72909
69654: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69655: LD_ADDR_VAR 0 29
69659: PUSH
69660: LD_INT 4
69662: PUSH
69663: LD_INT 0
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 4
69672: PUSH
69673: LD_INT 1
69675: NEG
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 5
69683: PUSH
69684: LD_INT 0
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 5
69693: PUSH
69694: LD_INT 1
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 4
69703: PUSH
69704: LD_INT 1
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 3
69713: PUSH
69714: LD_INT 0
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 3
69723: PUSH
69724: LD_INT 1
69726: NEG
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 3
69734: PUSH
69735: LD_INT 2
69737: NEG
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 5
69745: PUSH
69746: LD_INT 2
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 3
69755: PUSH
69756: LD_INT 3
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 3
69765: PUSH
69766: LD_INT 2
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 4
69775: PUSH
69776: LD_INT 3
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 4
69785: PUSH
69786: LD_INT 4
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 3
69795: PUSH
69796: LD_INT 4
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 2
69805: PUSH
69806: LD_INT 3
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 2
69815: PUSH
69816: LD_INT 2
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 4
69825: PUSH
69826: LD_INT 2
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 2
69835: PUSH
69836: LD_INT 4
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 0
69845: PUSH
69846: LD_INT 4
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: LD_INT 3
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 1
69865: PUSH
69866: LD_INT 4
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 1
69875: PUSH
69876: LD_INT 5
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 0
69885: PUSH
69886: LD_INT 5
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 1
69895: NEG
69896: PUSH
69897: LD_INT 4
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 1
69906: NEG
69907: PUSH
69908: LD_INT 3
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 2
69917: PUSH
69918: LD_INT 5
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 2
69927: NEG
69928: PUSH
69929: LD_INT 3
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 3
69938: NEG
69939: PUSH
69940: LD_INT 0
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 3
69949: NEG
69950: PUSH
69951: LD_INT 1
69953: NEG
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 2
69961: NEG
69962: PUSH
69963: LD_INT 0
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 2
69972: NEG
69973: PUSH
69974: LD_INT 1
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 3
69983: NEG
69984: PUSH
69985: LD_INT 1
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 4
69994: NEG
69995: PUSH
69996: LD_INT 0
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 4
70005: NEG
70006: PUSH
70007: LD_INT 1
70009: NEG
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 4
70017: NEG
70018: PUSH
70019: LD_INT 2
70021: NEG
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 2
70029: NEG
70030: PUSH
70031: LD_INT 2
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 4
70040: NEG
70041: PUSH
70042: LD_INT 4
70044: NEG
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 4
70052: NEG
70053: PUSH
70054: LD_INT 5
70056: NEG
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 3
70064: NEG
70065: PUSH
70066: LD_INT 4
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 3
70076: NEG
70077: PUSH
70078: LD_INT 3
70080: NEG
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 4
70088: NEG
70089: PUSH
70090: LD_INT 3
70092: NEG
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 5
70100: NEG
70101: PUSH
70102: LD_INT 4
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 5
70112: NEG
70113: PUSH
70114: LD_INT 5
70116: NEG
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 3
70124: NEG
70125: PUSH
70126: LD_INT 5
70128: NEG
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 5
70136: NEG
70137: PUSH
70138: LD_INT 3
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70193: LD_ADDR_VAR 0 30
70197: PUSH
70198: LD_INT 4
70200: PUSH
70201: LD_INT 4
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 4
70210: PUSH
70211: LD_INT 3
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 5
70220: PUSH
70221: LD_INT 4
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 5
70230: PUSH
70231: LD_INT 5
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 4
70240: PUSH
70241: LD_INT 5
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 3
70250: PUSH
70251: LD_INT 4
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 3
70260: PUSH
70261: LD_INT 3
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 5
70270: PUSH
70271: LD_INT 3
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 3
70280: PUSH
70281: LD_INT 5
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 0
70290: PUSH
70291: LD_INT 3
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: LD_INT 2
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 1
70310: PUSH
70311: LD_INT 3
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 1
70320: PUSH
70321: LD_INT 4
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: LD_INT 4
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 1
70340: NEG
70341: PUSH
70342: LD_INT 3
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 1
70351: NEG
70352: PUSH
70353: LD_INT 2
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 2
70362: PUSH
70363: LD_INT 4
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 2
70372: NEG
70373: PUSH
70374: LD_INT 2
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 4
70383: NEG
70384: PUSH
70385: LD_INT 0
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 4
70394: NEG
70395: PUSH
70396: LD_INT 1
70398: NEG
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 3
70406: NEG
70407: PUSH
70408: LD_INT 0
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 3
70417: NEG
70418: PUSH
70419: LD_INT 1
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 4
70428: NEG
70429: PUSH
70430: LD_INT 1
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 5
70439: NEG
70440: PUSH
70441: LD_INT 0
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 5
70450: NEG
70451: PUSH
70452: LD_INT 1
70454: NEG
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 5
70462: NEG
70463: PUSH
70464: LD_INT 2
70466: NEG
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 3
70474: NEG
70475: PUSH
70476: LD_INT 2
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 3
70485: NEG
70486: PUSH
70487: LD_INT 3
70489: NEG
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: PUSH
70495: LD_INT 3
70497: NEG
70498: PUSH
70499: LD_INT 4
70501: NEG
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 2
70509: NEG
70510: PUSH
70511: LD_INT 3
70513: NEG
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 2
70521: NEG
70522: PUSH
70523: LD_INT 2
70525: NEG
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 3
70533: NEG
70534: PUSH
70535: LD_INT 2
70537: NEG
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 4
70545: NEG
70546: PUSH
70547: LD_INT 3
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 4
70557: NEG
70558: PUSH
70559: LD_INT 4
70561: NEG
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 2
70569: NEG
70570: PUSH
70571: LD_INT 4
70573: NEG
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 4
70581: NEG
70582: PUSH
70583: LD_INT 2
70585: NEG
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 0
70593: PUSH
70594: LD_INT 4
70596: NEG
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 0
70604: PUSH
70605: LD_INT 5
70607: NEG
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 1
70615: PUSH
70616: LD_INT 4
70618: NEG
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 1
70626: PUSH
70627: LD_INT 3
70629: NEG
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 0
70637: PUSH
70638: LD_INT 3
70640: NEG
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 1
70648: NEG
70649: PUSH
70650: LD_INT 4
70652: NEG
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 1
70660: NEG
70661: PUSH
70662: LD_INT 5
70664: NEG
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 2
70672: PUSH
70673: LD_INT 3
70675: NEG
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 2
70683: NEG
70684: PUSH
70685: LD_INT 5
70687: NEG
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70740: LD_ADDR_VAR 0 31
70744: PUSH
70745: LD_INT 0
70747: PUSH
70748: LD_INT 4
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 0
70757: PUSH
70758: LD_INT 3
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 1
70767: PUSH
70768: LD_INT 4
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 1
70777: PUSH
70778: LD_INT 5
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 0
70787: PUSH
70788: LD_INT 5
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 1
70797: NEG
70798: PUSH
70799: LD_INT 4
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 1
70808: NEG
70809: PUSH
70810: LD_INT 3
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 2
70819: PUSH
70820: LD_INT 5
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 2
70829: NEG
70830: PUSH
70831: LD_INT 3
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 3
70840: NEG
70841: PUSH
70842: LD_INT 0
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 3
70851: NEG
70852: PUSH
70853: LD_INT 1
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 2
70863: NEG
70864: PUSH
70865: LD_INT 0
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 2
70874: NEG
70875: PUSH
70876: LD_INT 1
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 3
70885: NEG
70886: PUSH
70887: LD_INT 1
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 4
70896: NEG
70897: PUSH
70898: LD_INT 0
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: LD_INT 4
70907: NEG
70908: PUSH
70909: LD_INT 1
70911: NEG
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 4
70919: NEG
70920: PUSH
70921: LD_INT 2
70923: NEG
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 2
70931: NEG
70932: PUSH
70933: LD_INT 2
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 4
70942: NEG
70943: PUSH
70944: LD_INT 4
70946: NEG
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 4
70954: NEG
70955: PUSH
70956: LD_INT 5
70958: NEG
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 3
70966: NEG
70967: PUSH
70968: LD_INT 4
70970: NEG
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 3
70978: NEG
70979: PUSH
70980: LD_INT 3
70982: NEG
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 4
70990: NEG
70991: PUSH
70992: LD_INT 3
70994: NEG
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 5
71002: NEG
71003: PUSH
71004: LD_INT 4
71006: NEG
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 5
71014: NEG
71015: PUSH
71016: LD_INT 5
71018: NEG
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 3
71026: NEG
71027: PUSH
71028: LD_INT 5
71030: NEG
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 5
71038: NEG
71039: PUSH
71040: LD_INT 3
71042: NEG
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 0
71050: PUSH
71051: LD_INT 3
71053: NEG
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 0
71061: PUSH
71062: LD_INT 4
71064: NEG
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 1
71072: PUSH
71073: LD_INT 3
71075: NEG
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 1
71083: PUSH
71084: LD_INT 2
71086: NEG
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 0
71094: PUSH
71095: LD_INT 2
71097: NEG
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 1
71105: NEG
71106: PUSH
71107: LD_INT 3
71109: NEG
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 1
71117: NEG
71118: PUSH
71119: LD_INT 4
71121: NEG
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 2
71129: PUSH
71130: LD_INT 2
71132: NEG
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 2
71140: NEG
71141: PUSH
71142: LD_INT 4
71144: NEG
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 4
71152: PUSH
71153: LD_INT 0
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 4
71162: PUSH
71163: LD_INT 1
71165: NEG
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: LD_INT 5
71173: PUSH
71174: LD_INT 0
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 5
71183: PUSH
71184: LD_INT 1
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 4
71193: PUSH
71194: LD_INT 1
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: LD_INT 3
71203: PUSH
71204: LD_INT 0
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 3
71213: PUSH
71214: LD_INT 1
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 3
71224: PUSH
71225: LD_INT 2
71227: NEG
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 5
71235: PUSH
71236: LD_INT 2
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71290: LD_ADDR_VAR 0 32
71294: PUSH
71295: LD_INT 4
71297: NEG
71298: PUSH
71299: LD_INT 0
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 4
71308: NEG
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 3
71320: NEG
71321: PUSH
71322: LD_INT 0
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 3
71331: NEG
71332: PUSH
71333: LD_INT 1
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 4
71342: NEG
71343: PUSH
71344: LD_INT 1
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 5
71353: NEG
71354: PUSH
71355: LD_INT 0
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 5
71364: NEG
71365: PUSH
71366: LD_INT 1
71368: NEG
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 5
71376: NEG
71377: PUSH
71378: LD_INT 2
71380: NEG
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 3
71388: NEG
71389: PUSH
71390: LD_INT 2
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 3
71399: NEG
71400: PUSH
71401: LD_INT 3
71403: NEG
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 3
71411: NEG
71412: PUSH
71413: LD_INT 4
71415: NEG
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_INT 2
71423: NEG
71424: PUSH
71425: LD_INT 3
71427: NEG
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 2
71435: NEG
71436: PUSH
71437: LD_INT 2
71439: NEG
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 3
71447: NEG
71448: PUSH
71449: LD_INT 2
71451: NEG
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 4
71459: NEG
71460: PUSH
71461: LD_INT 3
71463: NEG
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 4
71471: NEG
71472: PUSH
71473: LD_INT 4
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 2
71483: NEG
71484: PUSH
71485: LD_INT 4
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 4
71495: NEG
71496: PUSH
71497: LD_INT 2
71499: NEG
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 0
71507: PUSH
71508: LD_INT 4
71510: NEG
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 0
71518: PUSH
71519: LD_INT 5
71521: NEG
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 1
71529: PUSH
71530: LD_INT 4
71532: NEG
71533: PUSH
71534: EMPTY
71535: LIST
71536: LIST
71537: PUSH
71538: LD_INT 1
71540: PUSH
71541: LD_INT 3
71543: NEG
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 0
71551: PUSH
71552: LD_INT 3
71554: NEG
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 1
71562: NEG
71563: PUSH
71564: LD_INT 4
71566: NEG
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 1
71574: NEG
71575: PUSH
71576: LD_INT 5
71578: NEG
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 2
71586: PUSH
71587: LD_INT 3
71589: NEG
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 2
71597: NEG
71598: PUSH
71599: LD_INT 5
71601: NEG
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 3
71609: PUSH
71610: LD_INT 0
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 3
71619: PUSH
71620: LD_INT 1
71622: NEG
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 4
71630: PUSH
71631: LD_INT 0
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 4
71640: PUSH
71641: LD_INT 1
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 3
71650: PUSH
71651: LD_INT 1
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 2
71660: PUSH
71661: LD_INT 0
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 2
71670: PUSH
71671: LD_INT 1
71673: NEG
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 2
71681: PUSH
71682: LD_INT 2
71684: NEG
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 4
71692: PUSH
71693: LD_INT 2
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PUSH
71700: LD_INT 4
71702: PUSH
71703: LD_INT 4
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 4
71712: PUSH
71713: LD_INT 3
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 5
71722: PUSH
71723: LD_INT 4
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 5
71732: PUSH
71733: LD_INT 5
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 4
71742: PUSH
71743: LD_INT 5
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 3
71752: PUSH
71753: LD_INT 4
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 3
71762: PUSH
71763: LD_INT 3
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 5
71772: PUSH
71773: LD_INT 3
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 3
71782: PUSH
71783: LD_INT 5
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71837: LD_ADDR_VAR 0 33
71841: PUSH
71842: LD_INT 4
71844: NEG
71845: PUSH
71846: LD_INT 4
71848: NEG
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 4
71856: NEG
71857: PUSH
71858: LD_INT 5
71860: NEG
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 3
71868: NEG
71869: PUSH
71870: LD_INT 4
71872: NEG
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 3
71880: NEG
71881: PUSH
71882: LD_INT 3
71884: NEG
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 4
71892: NEG
71893: PUSH
71894: LD_INT 3
71896: NEG
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 5
71904: NEG
71905: PUSH
71906: LD_INT 4
71908: NEG
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 5
71916: NEG
71917: PUSH
71918: LD_INT 5
71920: NEG
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 3
71928: NEG
71929: PUSH
71930: LD_INT 5
71932: NEG
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 5
71940: NEG
71941: PUSH
71942: LD_INT 3
71944: NEG
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 0
71952: PUSH
71953: LD_INT 3
71955: NEG
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: LD_INT 4
71966: NEG
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: LD_INT 1
71974: PUSH
71975: LD_INT 3
71977: NEG
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: LD_INT 1
71985: PUSH
71986: LD_INT 2
71988: NEG
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: LD_INT 0
71996: PUSH
71997: LD_INT 2
71999: NEG
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 1
72007: NEG
72008: PUSH
72009: LD_INT 3
72011: NEG
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_INT 1
72019: NEG
72020: PUSH
72021: LD_INT 4
72023: NEG
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 2
72031: PUSH
72032: LD_INT 2
72034: NEG
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 2
72042: NEG
72043: PUSH
72044: LD_INT 4
72046: NEG
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 4
72054: PUSH
72055: LD_INT 0
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 4
72064: PUSH
72065: LD_INT 1
72067: NEG
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 5
72075: PUSH
72076: LD_INT 0
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 5
72085: PUSH
72086: LD_INT 1
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 4
72095: PUSH
72096: LD_INT 1
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: LD_INT 3
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 3
72115: PUSH
72116: LD_INT 1
72118: NEG
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 3
72126: PUSH
72127: LD_INT 2
72129: NEG
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 5
72137: PUSH
72138: LD_INT 2
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: PUSH
72145: LD_INT 3
72147: PUSH
72148: LD_INT 3
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: LD_INT 3
72157: PUSH
72158: LD_INT 2
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: PUSH
72165: LD_INT 4
72167: PUSH
72168: LD_INT 3
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 4
72177: PUSH
72178: LD_INT 4
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 3
72187: PUSH
72188: LD_INT 4
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 2
72197: PUSH
72198: LD_INT 3
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 2
72207: PUSH
72208: LD_INT 2
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 4
72217: PUSH
72218: LD_INT 2
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 2
72227: PUSH
72228: LD_INT 4
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 0
72237: PUSH
72238: LD_INT 4
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 0
72247: PUSH
72248: LD_INT 3
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 1
72257: PUSH
72258: LD_INT 4
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 1
72267: PUSH
72268: LD_INT 5
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 0
72277: PUSH
72278: LD_INT 5
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 1
72287: NEG
72288: PUSH
72289: LD_INT 4
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_INT 1
72298: NEG
72299: PUSH
72300: LD_INT 3
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 2
72309: PUSH
72310: LD_INT 5
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 2
72319: NEG
72320: PUSH
72321: LD_INT 3
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: LIST
72372: LIST
72373: LIST
72374: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72375: LD_ADDR_VAR 0 34
72379: PUSH
72380: LD_INT 0
72382: PUSH
72383: LD_INT 4
72385: NEG
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 0
72393: PUSH
72394: LD_INT 5
72396: NEG
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 1
72404: PUSH
72405: LD_INT 4
72407: NEG
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 1
72415: PUSH
72416: LD_INT 3
72418: NEG
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_INT 0
72426: PUSH
72427: LD_INT 3
72429: NEG
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 1
72437: NEG
72438: PUSH
72439: LD_INT 4
72441: NEG
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 1
72449: NEG
72450: PUSH
72451: LD_INT 5
72453: NEG
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PUSH
72459: LD_INT 2
72461: PUSH
72462: LD_INT 3
72464: NEG
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 2
72472: NEG
72473: PUSH
72474: LD_INT 5
72476: NEG
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: LD_INT 3
72484: PUSH
72485: LD_INT 0
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: LD_INT 3
72494: PUSH
72495: LD_INT 1
72497: NEG
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 4
72505: PUSH
72506: LD_INT 0
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 4
72515: PUSH
72516: LD_INT 1
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: PUSH
72523: LD_INT 3
72525: PUSH
72526: LD_INT 1
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: LD_INT 2
72535: PUSH
72536: LD_INT 0
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 2
72545: PUSH
72546: LD_INT 1
72548: NEG
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 2
72556: PUSH
72557: LD_INT 2
72559: NEG
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 4
72567: PUSH
72568: LD_INT 2
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_INT 4
72577: PUSH
72578: LD_INT 4
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: LD_INT 4
72587: PUSH
72588: LD_INT 3
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 5
72597: PUSH
72598: LD_INT 4
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 5
72607: PUSH
72608: LD_INT 5
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 4
72617: PUSH
72618: LD_INT 5
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 3
72627: PUSH
72628: LD_INT 4
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 3
72637: PUSH
72638: LD_INT 3
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 5
72647: PUSH
72648: LD_INT 3
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 3
72657: PUSH
72658: LD_INT 5
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: LD_INT 0
72667: PUSH
72668: LD_INT 3
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 0
72677: PUSH
72678: LD_INT 2
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 1
72687: PUSH
72688: LD_INT 3
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 1
72697: PUSH
72698: LD_INT 4
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: LD_INT 0
72707: PUSH
72708: LD_INT 4
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: PUSH
72715: LD_INT 1
72717: NEG
72718: PUSH
72719: LD_INT 3
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PUSH
72726: LD_INT 1
72728: NEG
72729: PUSH
72730: LD_INT 2
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 2
72739: PUSH
72740: LD_INT 4
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 2
72749: NEG
72750: PUSH
72751: LD_INT 2
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 4
72760: NEG
72761: PUSH
72762: LD_INT 0
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 4
72771: NEG
72772: PUSH
72773: LD_INT 1
72775: NEG
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: LD_INT 3
72783: NEG
72784: PUSH
72785: LD_INT 0
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 3
72794: NEG
72795: PUSH
72796: LD_INT 1
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: PUSH
72803: LD_INT 4
72805: NEG
72806: PUSH
72807: LD_INT 1
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 5
72816: NEG
72817: PUSH
72818: LD_INT 0
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 5
72827: NEG
72828: PUSH
72829: LD_INT 1
72831: NEG
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: PUSH
72837: LD_INT 5
72839: NEG
72840: PUSH
72841: LD_INT 2
72843: NEG
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: PUSH
72849: LD_INT 3
72851: NEG
72852: PUSH
72853: LD_INT 2
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: ST_TO_ADDR
// end ; end ;
72907: GO 72910
72909: POP
// case btype of b_depot , b_warehouse :
72910: LD_VAR 0 1
72914: PUSH
72915: LD_INT 0
72917: DOUBLE
72918: EQUAL
72919: IFTRUE 72929
72921: LD_INT 1
72923: DOUBLE
72924: EQUAL
72925: IFTRUE 72929
72927: GO 73130
72929: POP
// case nation of nation_american :
72930: LD_VAR 0 5
72934: PUSH
72935: LD_INT 1
72937: DOUBLE
72938: EQUAL
72939: IFTRUE 72943
72941: GO 72999
72943: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72944: LD_ADDR_VAR 0 9
72948: PUSH
72949: LD_VAR 0 11
72953: PUSH
72954: LD_VAR 0 12
72958: PUSH
72959: LD_VAR 0 13
72963: PUSH
72964: LD_VAR 0 14
72968: PUSH
72969: LD_VAR 0 15
72973: PUSH
72974: LD_VAR 0 16
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: LIST
72986: PUSH
72987: LD_VAR 0 4
72991: PUSH
72992: LD_INT 1
72994: PLUS
72995: ARRAY
72996: ST_TO_ADDR
72997: GO 73128
72999: LD_INT 2
73001: DOUBLE
73002: EQUAL
73003: IFTRUE 73007
73005: GO 73063
73007: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73008: LD_ADDR_VAR 0 9
73012: PUSH
73013: LD_VAR 0 17
73017: PUSH
73018: LD_VAR 0 18
73022: PUSH
73023: LD_VAR 0 19
73027: PUSH
73028: LD_VAR 0 20
73032: PUSH
73033: LD_VAR 0 21
73037: PUSH
73038: LD_VAR 0 22
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: LIST
73050: PUSH
73051: LD_VAR 0 4
73055: PUSH
73056: LD_INT 1
73058: PLUS
73059: ARRAY
73060: ST_TO_ADDR
73061: GO 73128
73063: LD_INT 3
73065: DOUBLE
73066: EQUAL
73067: IFTRUE 73071
73069: GO 73127
73071: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73072: LD_ADDR_VAR 0 9
73076: PUSH
73077: LD_VAR 0 23
73081: PUSH
73082: LD_VAR 0 24
73086: PUSH
73087: LD_VAR 0 25
73091: PUSH
73092: LD_VAR 0 26
73096: PUSH
73097: LD_VAR 0 27
73101: PUSH
73102: LD_VAR 0 28
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: PUSH
73115: LD_VAR 0 4
73119: PUSH
73120: LD_INT 1
73122: PLUS
73123: ARRAY
73124: ST_TO_ADDR
73125: GO 73128
73127: POP
73128: GO 73683
73130: LD_INT 2
73132: DOUBLE
73133: EQUAL
73134: IFTRUE 73144
73136: LD_INT 3
73138: DOUBLE
73139: EQUAL
73140: IFTRUE 73144
73142: GO 73200
73144: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73145: LD_ADDR_VAR 0 9
73149: PUSH
73150: LD_VAR 0 29
73154: PUSH
73155: LD_VAR 0 30
73159: PUSH
73160: LD_VAR 0 31
73164: PUSH
73165: LD_VAR 0 32
73169: PUSH
73170: LD_VAR 0 33
73174: PUSH
73175: LD_VAR 0 34
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: PUSH
73188: LD_VAR 0 4
73192: PUSH
73193: LD_INT 1
73195: PLUS
73196: ARRAY
73197: ST_TO_ADDR
73198: GO 73683
73200: LD_INT 16
73202: DOUBLE
73203: EQUAL
73204: IFTRUE 73262
73206: LD_INT 17
73208: DOUBLE
73209: EQUAL
73210: IFTRUE 73262
73212: LD_INT 18
73214: DOUBLE
73215: EQUAL
73216: IFTRUE 73262
73218: LD_INT 19
73220: DOUBLE
73221: EQUAL
73222: IFTRUE 73262
73224: LD_INT 22
73226: DOUBLE
73227: EQUAL
73228: IFTRUE 73262
73230: LD_INT 20
73232: DOUBLE
73233: EQUAL
73234: IFTRUE 73262
73236: LD_INT 21
73238: DOUBLE
73239: EQUAL
73240: IFTRUE 73262
73242: LD_INT 23
73244: DOUBLE
73245: EQUAL
73246: IFTRUE 73262
73248: LD_INT 24
73250: DOUBLE
73251: EQUAL
73252: IFTRUE 73262
73254: LD_INT 25
73256: DOUBLE
73257: EQUAL
73258: IFTRUE 73262
73260: GO 73318
73262: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73263: LD_ADDR_VAR 0 9
73267: PUSH
73268: LD_VAR 0 35
73272: PUSH
73273: LD_VAR 0 36
73277: PUSH
73278: LD_VAR 0 37
73282: PUSH
73283: LD_VAR 0 38
73287: PUSH
73288: LD_VAR 0 39
73292: PUSH
73293: LD_VAR 0 40
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: PUSH
73306: LD_VAR 0 4
73310: PUSH
73311: LD_INT 1
73313: PLUS
73314: ARRAY
73315: ST_TO_ADDR
73316: GO 73683
73318: LD_INT 6
73320: DOUBLE
73321: EQUAL
73322: IFTRUE 73374
73324: LD_INT 7
73326: DOUBLE
73327: EQUAL
73328: IFTRUE 73374
73330: LD_INT 8
73332: DOUBLE
73333: EQUAL
73334: IFTRUE 73374
73336: LD_INT 13
73338: DOUBLE
73339: EQUAL
73340: IFTRUE 73374
73342: LD_INT 12
73344: DOUBLE
73345: EQUAL
73346: IFTRUE 73374
73348: LD_INT 15
73350: DOUBLE
73351: EQUAL
73352: IFTRUE 73374
73354: LD_INT 11
73356: DOUBLE
73357: EQUAL
73358: IFTRUE 73374
73360: LD_INT 14
73362: DOUBLE
73363: EQUAL
73364: IFTRUE 73374
73366: LD_INT 10
73368: DOUBLE
73369: EQUAL
73370: IFTRUE 73374
73372: GO 73430
73374: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73375: LD_ADDR_VAR 0 9
73379: PUSH
73380: LD_VAR 0 41
73384: PUSH
73385: LD_VAR 0 42
73389: PUSH
73390: LD_VAR 0 43
73394: PUSH
73395: LD_VAR 0 44
73399: PUSH
73400: LD_VAR 0 45
73404: PUSH
73405: LD_VAR 0 46
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: PUSH
73418: LD_VAR 0 4
73422: PUSH
73423: LD_INT 1
73425: PLUS
73426: ARRAY
73427: ST_TO_ADDR
73428: GO 73683
73430: LD_INT 36
73432: DOUBLE
73433: EQUAL
73434: IFTRUE 73438
73436: GO 73494
73438: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73439: LD_ADDR_VAR 0 9
73443: PUSH
73444: LD_VAR 0 47
73448: PUSH
73449: LD_VAR 0 48
73453: PUSH
73454: LD_VAR 0 49
73458: PUSH
73459: LD_VAR 0 50
73463: PUSH
73464: LD_VAR 0 51
73468: PUSH
73469: LD_VAR 0 52
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: LIST
73478: LIST
73479: LIST
73480: LIST
73481: PUSH
73482: LD_VAR 0 4
73486: PUSH
73487: LD_INT 1
73489: PLUS
73490: ARRAY
73491: ST_TO_ADDR
73492: GO 73683
73494: LD_INT 4
73496: DOUBLE
73497: EQUAL
73498: IFTRUE 73520
73500: LD_INT 5
73502: DOUBLE
73503: EQUAL
73504: IFTRUE 73520
73506: LD_INT 34
73508: DOUBLE
73509: EQUAL
73510: IFTRUE 73520
73512: LD_INT 37
73514: DOUBLE
73515: EQUAL
73516: IFTRUE 73520
73518: GO 73576
73520: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73521: LD_ADDR_VAR 0 9
73525: PUSH
73526: LD_VAR 0 53
73530: PUSH
73531: LD_VAR 0 54
73535: PUSH
73536: LD_VAR 0 55
73540: PUSH
73541: LD_VAR 0 56
73545: PUSH
73546: LD_VAR 0 57
73550: PUSH
73551: LD_VAR 0 58
73555: PUSH
73556: EMPTY
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: PUSH
73564: LD_VAR 0 4
73568: PUSH
73569: LD_INT 1
73571: PLUS
73572: ARRAY
73573: ST_TO_ADDR
73574: GO 73683
73576: LD_INT 31
73578: DOUBLE
73579: EQUAL
73580: IFTRUE 73626
73582: LD_INT 32
73584: DOUBLE
73585: EQUAL
73586: IFTRUE 73626
73588: LD_INT 33
73590: DOUBLE
73591: EQUAL
73592: IFTRUE 73626
73594: LD_INT 27
73596: DOUBLE
73597: EQUAL
73598: IFTRUE 73626
73600: LD_INT 26
73602: DOUBLE
73603: EQUAL
73604: IFTRUE 73626
73606: LD_INT 28
73608: DOUBLE
73609: EQUAL
73610: IFTRUE 73626
73612: LD_INT 29
73614: DOUBLE
73615: EQUAL
73616: IFTRUE 73626
73618: LD_INT 30
73620: DOUBLE
73621: EQUAL
73622: IFTRUE 73626
73624: GO 73682
73626: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73627: LD_ADDR_VAR 0 9
73631: PUSH
73632: LD_VAR 0 59
73636: PUSH
73637: LD_VAR 0 60
73641: PUSH
73642: LD_VAR 0 61
73646: PUSH
73647: LD_VAR 0 62
73651: PUSH
73652: LD_VAR 0 63
73656: PUSH
73657: LD_VAR 0 64
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: PUSH
73670: LD_VAR 0 4
73674: PUSH
73675: LD_INT 1
73677: PLUS
73678: ARRAY
73679: ST_TO_ADDR
73680: GO 73683
73682: POP
// temp_list2 = [ ] ;
73683: LD_ADDR_VAR 0 10
73687: PUSH
73688: EMPTY
73689: ST_TO_ADDR
// for i in temp_list do
73690: LD_ADDR_VAR 0 8
73694: PUSH
73695: LD_VAR 0 9
73699: PUSH
73700: FOR_IN
73701: IFFALSE 73753
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73703: LD_ADDR_VAR 0 10
73707: PUSH
73708: LD_VAR 0 10
73712: PUSH
73713: LD_VAR 0 8
73717: PUSH
73718: LD_INT 1
73720: ARRAY
73721: PUSH
73722: LD_VAR 0 2
73726: PLUS
73727: PUSH
73728: LD_VAR 0 8
73732: PUSH
73733: LD_INT 2
73735: ARRAY
73736: PUSH
73737: LD_VAR 0 3
73741: PLUS
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: EMPTY
73748: LIST
73749: ADD
73750: ST_TO_ADDR
73751: GO 73700
73753: POP
73754: POP
// result = temp_list2 ;
73755: LD_ADDR_VAR 0 7
73759: PUSH
73760: LD_VAR 0 10
73764: ST_TO_ADDR
// end ;
73765: LD_VAR 0 7
73769: RET
// export function EnemyInRange ( unit , dist ) ; begin
73770: LD_INT 0
73772: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73773: LD_ADDR_VAR 0 3
73777: PUSH
73778: LD_VAR 0 1
73782: PPUSH
73783: CALL_OW 255
73787: PPUSH
73788: LD_VAR 0 1
73792: PPUSH
73793: CALL_OW 250
73797: PPUSH
73798: LD_VAR 0 1
73802: PPUSH
73803: CALL_OW 251
73807: PPUSH
73808: LD_VAR 0 2
73812: PPUSH
73813: CALL 47166 0 4
73817: PUSH
73818: LD_INT 4
73820: ARRAY
73821: ST_TO_ADDR
// end ;
73822: LD_VAR 0 3
73826: RET
// export function PlayerSeeMe ( unit ) ; begin
73827: LD_INT 0
73829: PPUSH
// result := See ( your_side , unit ) ;
73830: LD_ADDR_VAR 0 2
73834: PUSH
73835: LD_OWVAR 2
73839: PPUSH
73840: LD_VAR 0 1
73844: PPUSH
73845: CALL_OW 292
73849: ST_TO_ADDR
// end ;
73850: LD_VAR 0 2
73854: RET
// export function ReverseDir ( unit ) ; begin
73855: LD_INT 0
73857: PPUSH
// if not unit then
73858: LD_VAR 0 1
73862: NOT
73863: IFFALSE 73867
// exit ;
73865: GO 73890
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73867: LD_ADDR_VAR 0 2
73871: PUSH
73872: LD_VAR 0 1
73876: PPUSH
73877: CALL_OW 254
73881: PUSH
73882: LD_INT 3
73884: PLUS
73885: PUSH
73886: LD_INT 6
73888: MOD
73889: ST_TO_ADDR
// end ;
73890: LD_VAR 0 2
73894: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
73895: LD_INT 0
73897: PPUSH
73898: PPUSH
73899: PPUSH
73900: PPUSH
73901: PPUSH
// if not hexes then
73902: LD_VAR 0 2
73906: NOT
73907: IFFALSE 73911
// exit ;
73909: GO 74059
// dist := 9999 ;
73911: LD_ADDR_VAR 0 5
73915: PUSH
73916: LD_INT 9999
73918: ST_TO_ADDR
// for i = 1 to hexes do
73919: LD_ADDR_VAR 0 4
73923: PUSH
73924: DOUBLE
73925: LD_INT 1
73927: DEC
73928: ST_TO_ADDR
73929: LD_VAR 0 2
73933: PUSH
73934: FOR_TO
73935: IFFALSE 74047
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
73937: LD_VAR 0 1
73941: PPUSH
73942: LD_VAR 0 2
73946: PUSH
73947: LD_VAR 0 4
73951: ARRAY
73952: PUSH
73953: LD_INT 1
73955: ARRAY
73956: PPUSH
73957: LD_VAR 0 2
73961: PUSH
73962: LD_VAR 0 4
73966: ARRAY
73967: PUSH
73968: LD_INT 2
73970: ARRAY
73971: PPUSH
73972: CALL_OW 297
73976: PUSH
73977: LD_VAR 0 5
73981: LESS
73982: IFFALSE 74045
// begin hex := hexes [ i ] ;
73984: LD_ADDR_VAR 0 7
73988: PUSH
73989: LD_VAR 0 2
73993: PUSH
73994: LD_VAR 0 4
73998: ARRAY
73999: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74000: LD_ADDR_VAR 0 5
74004: PUSH
74005: LD_VAR 0 1
74009: PPUSH
74010: LD_VAR 0 2
74014: PUSH
74015: LD_VAR 0 4
74019: ARRAY
74020: PUSH
74021: LD_INT 1
74023: ARRAY
74024: PPUSH
74025: LD_VAR 0 2
74029: PUSH
74030: LD_VAR 0 4
74034: ARRAY
74035: PUSH
74036: LD_INT 2
74038: ARRAY
74039: PPUSH
74040: CALL_OW 297
74044: ST_TO_ADDR
// end ; end ;
74045: GO 73934
74047: POP
74048: POP
// result := hex ;
74049: LD_ADDR_VAR 0 3
74053: PUSH
74054: LD_VAR 0 7
74058: ST_TO_ADDR
// end ;
74059: LD_VAR 0 3
74063: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74064: LD_INT 0
74066: PPUSH
74067: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74068: LD_VAR 0 1
74072: NOT
74073: PUSH
74074: LD_VAR 0 1
74078: PUSH
74079: LD_INT 21
74081: PUSH
74082: LD_INT 2
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: LD_INT 23
74091: PUSH
74092: LD_INT 2
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PPUSH
74103: CALL_OW 69
74107: IN
74108: NOT
74109: OR
74110: IFFALSE 74114
// exit ;
74112: GO 74161
// for i = 1 to 3 do
74114: LD_ADDR_VAR 0 3
74118: PUSH
74119: DOUBLE
74120: LD_INT 1
74122: DEC
74123: ST_TO_ADDR
74124: LD_INT 3
74126: PUSH
74127: FOR_TO
74128: IFFALSE 74159
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74130: LD_VAR 0 1
74134: PPUSH
74135: CALL_OW 250
74139: PPUSH
74140: LD_VAR 0 1
74144: PPUSH
74145: CALL_OW 251
74149: PPUSH
74150: LD_INT 1
74152: PPUSH
74153: CALL_OW 453
74157: GO 74127
74159: POP
74160: POP
// end ;
74161: LD_VAR 0 2
74165: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74166: LD_INT 0
74168: PPUSH
74169: PPUSH
74170: PPUSH
74171: PPUSH
74172: PPUSH
74173: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74174: LD_VAR 0 1
74178: NOT
74179: PUSH
74180: LD_VAR 0 2
74184: NOT
74185: OR
74186: PUSH
74187: LD_VAR 0 1
74191: PPUSH
74192: CALL_OW 314
74196: OR
74197: IFFALSE 74201
// exit ;
74199: GO 74642
// x := GetX ( enemy_unit ) ;
74201: LD_ADDR_VAR 0 7
74205: PUSH
74206: LD_VAR 0 2
74210: PPUSH
74211: CALL_OW 250
74215: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74216: LD_ADDR_VAR 0 8
74220: PUSH
74221: LD_VAR 0 2
74225: PPUSH
74226: CALL_OW 251
74230: ST_TO_ADDR
// if not x or not y then
74231: LD_VAR 0 7
74235: NOT
74236: PUSH
74237: LD_VAR 0 8
74241: NOT
74242: OR
74243: IFFALSE 74247
// exit ;
74245: GO 74642
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74247: LD_ADDR_VAR 0 6
74251: PUSH
74252: LD_VAR 0 7
74256: PPUSH
74257: LD_INT 0
74259: PPUSH
74260: LD_INT 4
74262: PPUSH
74263: CALL_OW 272
74267: PUSH
74268: LD_VAR 0 8
74272: PPUSH
74273: LD_INT 0
74275: PPUSH
74276: LD_INT 4
74278: PPUSH
74279: CALL_OW 273
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: PUSH
74288: LD_VAR 0 7
74292: PPUSH
74293: LD_INT 1
74295: PPUSH
74296: LD_INT 4
74298: PPUSH
74299: CALL_OW 272
74303: PUSH
74304: LD_VAR 0 8
74308: PPUSH
74309: LD_INT 1
74311: PPUSH
74312: LD_INT 4
74314: PPUSH
74315: CALL_OW 273
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: LD_VAR 0 7
74328: PPUSH
74329: LD_INT 2
74331: PPUSH
74332: LD_INT 4
74334: PPUSH
74335: CALL_OW 272
74339: PUSH
74340: LD_VAR 0 8
74344: PPUSH
74345: LD_INT 2
74347: PPUSH
74348: LD_INT 4
74350: PPUSH
74351: CALL_OW 273
74355: PUSH
74356: EMPTY
74357: LIST
74358: LIST
74359: PUSH
74360: LD_VAR 0 7
74364: PPUSH
74365: LD_INT 3
74367: PPUSH
74368: LD_INT 4
74370: PPUSH
74371: CALL_OW 272
74375: PUSH
74376: LD_VAR 0 8
74380: PPUSH
74381: LD_INT 3
74383: PPUSH
74384: LD_INT 4
74386: PPUSH
74387: CALL_OW 273
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: PUSH
74396: LD_VAR 0 7
74400: PPUSH
74401: LD_INT 4
74403: PPUSH
74404: LD_INT 4
74406: PPUSH
74407: CALL_OW 272
74411: PUSH
74412: LD_VAR 0 8
74416: PPUSH
74417: LD_INT 4
74419: PPUSH
74420: LD_INT 4
74422: PPUSH
74423: CALL_OW 273
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: PUSH
74432: LD_VAR 0 7
74436: PPUSH
74437: LD_INT 5
74439: PPUSH
74440: LD_INT 4
74442: PPUSH
74443: CALL_OW 272
74447: PUSH
74448: LD_VAR 0 8
74452: PPUSH
74453: LD_INT 5
74455: PPUSH
74456: LD_INT 4
74458: PPUSH
74459: CALL_OW 273
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: ST_TO_ADDR
// for i = tmp downto 1 do
74476: LD_ADDR_VAR 0 4
74480: PUSH
74481: DOUBLE
74482: LD_VAR 0 6
74486: INC
74487: ST_TO_ADDR
74488: LD_INT 1
74490: PUSH
74491: FOR_DOWNTO
74492: IFFALSE 74593
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74494: LD_VAR 0 6
74498: PUSH
74499: LD_VAR 0 4
74503: ARRAY
74504: PUSH
74505: LD_INT 1
74507: ARRAY
74508: PPUSH
74509: LD_VAR 0 6
74513: PUSH
74514: LD_VAR 0 4
74518: ARRAY
74519: PUSH
74520: LD_INT 2
74522: ARRAY
74523: PPUSH
74524: CALL_OW 488
74528: NOT
74529: PUSH
74530: LD_VAR 0 6
74534: PUSH
74535: LD_VAR 0 4
74539: ARRAY
74540: PUSH
74541: LD_INT 1
74543: ARRAY
74544: PPUSH
74545: LD_VAR 0 6
74549: PUSH
74550: LD_VAR 0 4
74554: ARRAY
74555: PUSH
74556: LD_INT 2
74558: ARRAY
74559: PPUSH
74560: CALL_OW 428
74564: PUSH
74565: LD_INT 0
74567: NONEQUAL
74568: OR
74569: IFFALSE 74591
// tmp := Delete ( tmp , i ) ;
74571: LD_ADDR_VAR 0 6
74575: PUSH
74576: LD_VAR 0 6
74580: PPUSH
74581: LD_VAR 0 4
74585: PPUSH
74586: CALL_OW 3
74590: ST_TO_ADDR
74591: GO 74491
74593: POP
74594: POP
// j := GetClosestHex ( unit , tmp ) ;
74595: LD_ADDR_VAR 0 5
74599: PUSH
74600: LD_VAR 0 1
74604: PPUSH
74605: LD_VAR 0 6
74609: PPUSH
74610: CALL 73895 0 2
74614: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74615: LD_VAR 0 1
74619: PPUSH
74620: LD_VAR 0 5
74624: PUSH
74625: LD_INT 1
74627: ARRAY
74628: PPUSH
74629: LD_VAR 0 5
74633: PUSH
74634: LD_INT 2
74636: ARRAY
74637: PPUSH
74638: CALL_OW 111
// end ;
74642: LD_VAR 0 3
74646: RET
// export function PrepareApemanSoldier ( ) ; begin
74647: LD_INT 0
74649: PPUSH
// uc_nation := 0 ;
74650: LD_ADDR_OWVAR 21
74654: PUSH
74655: LD_INT 0
74657: ST_TO_ADDR
// hc_sex := sex_male ;
74658: LD_ADDR_OWVAR 27
74662: PUSH
74663: LD_INT 1
74665: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74666: LD_ADDR_OWVAR 28
74670: PUSH
74671: LD_INT 15
74673: ST_TO_ADDR
// hc_gallery :=  ;
74674: LD_ADDR_OWVAR 33
74678: PUSH
74679: LD_STRING 
74681: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74682: LD_ADDR_OWVAR 31
74686: PUSH
74687: LD_INT 0
74689: PPUSH
74690: LD_INT 3
74692: PPUSH
74693: CALL_OW 12
74697: PUSH
74698: LD_INT 0
74700: PPUSH
74701: LD_INT 3
74703: PPUSH
74704: CALL_OW 12
74708: PUSH
74709: LD_INT 0
74711: PUSH
74712: LD_INT 0
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: LIST
74719: LIST
74720: ST_TO_ADDR
// end ;
74721: LD_VAR 0 1
74725: RET
// export function PrepareApemanEngineer ( ) ; begin
74726: LD_INT 0
74728: PPUSH
// uc_nation := 0 ;
74729: LD_ADDR_OWVAR 21
74733: PUSH
74734: LD_INT 0
74736: ST_TO_ADDR
// hc_sex := sex_male ;
74737: LD_ADDR_OWVAR 27
74741: PUSH
74742: LD_INT 1
74744: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74745: LD_ADDR_OWVAR 28
74749: PUSH
74750: LD_INT 16
74752: ST_TO_ADDR
// hc_gallery :=  ;
74753: LD_ADDR_OWVAR 33
74757: PUSH
74758: LD_STRING 
74760: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74761: LD_ADDR_OWVAR 31
74765: PUSH
74766: LD_INT 0
74768: PPUSH
74769: LD_INT 3
74771: PPUSH
74772: CALL_OW 12
74776: PUSH
74777: LD_INT 0
74779: PPUSH
74780: LD_INT 3
74782: PPUSH
74783: CALL_OW 12
74787: PUSH
74788: LD_INT 0
74790: PUSH
74791: LD_INT 0
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: ST_TO_ADDR
// end ;
74800: LD_VAR 0 1
74804: RET
// export function PrepareApeman ( agressivity ) ; begin
74805: LD_INT 0
74807: PPUSH
// uc_side := 0 ;
74808: LD_ADDR_OWVAR 20
74812: PUSH
74813: LD_INT 0
74815: ST_TO_ADDR
// uc_nation := 0 ;
74816: LD_ADDR_OWVAR 21
74820: PUSH
74821: LD_INT 0
74823: ST_TO_ADDR
// hc_sex := sex_male ;
74824: LD_ADDR_OWVAR 27
74828: PUSH
74829: LD_INT 1
74831: ST_TO_ADDR
// hc_class := class_apeman ;
74832: LD_ADDR_OWVAR 28
74836: PUSH
74837: LD_INT 12
74839: ST_TO_ADDR
// hc_gallery :=  ;
74840: LD_ADDR_OWVAR 33
74844: PUSH
74845: LD_STRING 
74847: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74848: LD_ADDR_OWVAR 35
74852: PUSH
74853: LD_VAR 0 1
74857: NEG
74858: PPUSH
74859: LD_VAR 0 1
74863: PPUSH
74864: CALL_OW 12
74868: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74869: LD_ADDR_OWVAR 31
74873: PUSH
74874: LD_INT 0
74876: PPUSH
74877: LD_INT 3
74879: PPUSH
74880: CALL_OW 12
74884: PUSH
74885: LD_INT 0
74887: PPUSH
74888: LD_INT 3
74890: PPUSH
74891: CALL_OW 12
74895: PUSH
74896: LD_INT 0
74898: PUSH
74899: LD_INT 0
74901: PUSH
74902: EMPTY
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: ST_TO_ADDR
// end ;
74908: LD_VAR 0 2
74912: RET
// export function PrepareTiger ( agressivity ) ; begin
74913: LD_INT 0
74915: PPUSH
// uc_side := 0 ;
74916: LD_ADDR_OWVAR 20
74920: PUSH
74921: LD_INT 0
74923: ST_TO_ADDR
// uc_nation := 0 ;
74924: LD_ADDR_OWVAR 21
74928: PUSH
74929: LD_INT 0
74931: ST_TO_ADDR
// hc_class := class_tiger ;
74932: LD_ADDR_OWVAR 28
74936: PUSH
74937: LD_INT 14
74939: ST_TO_ADDR
// hc_gallery :=  ;
74940: LD_ADDR_OWVAR 33
74944: PUSH
74945: LD_STRING 
74947: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74948: LD_ADDR_OWVAR 35
74952: PUSH
74953: LD_VAR 0 1
74957: NEG
74958: PPUSH
74959: LD_VAR 0 1
74963: PPUSH
74964: CALL_OW 12
74968: ST_TO_ADDR
// end ;
74969: LD_VAR 0 2
74973: RET
// export function PrepareEnchidna ( ) ; begin
74974: LD_INT 0
74976: PPUSH
// uc_side := 0 ;
74977: LD_ADDR_OWVAR 20
74981: PUSH
74982: LD_INT 0
74984: ST_TO_ADDR
// uc_nation := 0 ;
74985: LD_ADDR_OWVAR 21
74989: PUSH
74990: LD_INT 0
74992: ST_TO_ADDR
// hc_class := class_baggie ;
74993: LD_ADDR_OWVAR 28
74997: PUSH
74998: LD_INT 13
75000: ST_TO_ADDR
// hc_gallery :=  ;
75001: LD_ADDR_OWVAR 33
75005: PUSH
75006: LD_STRING 
75008: ST_TO_ADDR
// end ;
75009: LD_VAR 0 1
75013: RET
// export function PrepareFrog ( ) ; begin
75014: LD_INT 0
75016: PPUSH
// uc_side := 0 ;
75017: LD_ADDR_OWVAR 20
75021: PUSH
75022: LD_INT 0
75024: ST_TO_ADDR
// uc_nation := 0 ;
75025: LD_ADDR_OWVAR 21
75029: PUSH
75030: LD_INT 0
75032: ST_TO_ADDR
// hc_class := class_frog ;
75033: LD_ADDR_OWVAR 28
75037: PUSH
75038: LD_INT 19
75040: ST_TO_ADDR
// hc_gallery :=  ;
75041: LD_ADDR_OWVAR 33
75045: PUSH
75046: LD_STRING 
75048: ST_TO_ADDR
// end ;
75049: LD_VAR 0 1
75053: RET
// export function PrepareFish ( ) ; begin
75054: LD_INT 0
75056: PPUSH
// uc_side := 0 ;
75057: LD_ADDR_OWVAR 20
75061: PUSH
75062: LD_INT 0
75064: ST_TO_ADDR
// uc_nation := 0 ;
75065: LD_ADDR_OWVAR 21
75069: PUSH
75070: LD_INT 0
75072: ST_TO_ADDR
// hc_class := class_fish ;
75073: LD_ADDR_OWVAR 28
75077: PUSH
75078: LD_INT 20
75080: ST_TO_ADDR
// hc_gallery :=  ;
75081: LD_ADDR_OWVAR 33
75085: PUSH
75086: LD_STRING 
75088: ST_TO_ADDR
// end ;
75089: LD_VAR 0 1
75093: RET
// export function PrepareBird ( ) ; begin
75094: LD_INT 0
75096: PPUSH
// uc_side := 0 ;
75097: LD_ADDR_OWVAR 20
75101: PUSH
75102: LD_INT 0
75104: ST_TO_ADDR
// uc_nation := 0 ;
75105: LD_ADDR_OWVAR 21
75109: PUSH
75110: LD_INT 0
75112: ST_TO_ADDR
// hc_class := class_phororhacos ;
75113: LD_ADDR_OWVAR 28
75117: PUSH
75118: LD_INT 18
75120: ST_TO_ADDR
// hc_gallery :=  ;
75121: LD_ADDR_OWVAR 33
75125: PUSH
75126: LD_STRING 
75128: ST_TO_ADDR
// end ;
75129: LD_VAR 0 1
75133: RET
// export function PrepareHorse ( ) ; begin
75134: LD_INT 0
75136: PPUSH
// uc_side := 0 ;
75137: LD_ADDR_OWVAR 20
75141: PUSH
75142: LD_INT 0
75144: ST_TO_ADDR
// uc_nation := 0 ;
75145: LD_ADDR_OWVAR 21
75149: PUSH
75150: LD_INT 0
75152: ST_TO_ADDR
// hc_class := class_horse ;
75153: LD_ADDR_OWVAR 28
75157: PUSH
75158: LD_INT 21
75160: ST_TO_ADDR
// hc_gallery :=  ;
75161: LD_ADDR_OWVAR 33
75165: PUSH
75166: LD_STRING 
75168: ST_TO_ADDR
// end ;
75169: LD_VAR 0 1
75173: RET
// export function PrepareMastodont ( ) ; begin
75174: LD_INT 0
75176: PPUSH
// uc_side := 0 ;
75177: LD_ADDR_OWVAR 20
75181: PUSH
75182: LD_INT 0
75184: ST_TO_ADDR
// uc_nation := 0 ;
75185: LD_ADDR_OWVAR 21
75189: PUSH
75190: LD_INT 0
75192: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75193: LD_ADDR_OWVAR 37
75197: PUSH
75198: LD_INT 31
75200: ST_TO_ADDR
// vc_control := control_rider ;
75201: LD_ADDR_OWVAR 38
75205: PUSH
75206: LD_INT 4
75208: ST_TO_ADDR
// end ;
75209: LD_VAR 0 1
75213: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75214: LD_INT 0
75216: PPUSH
75217: PPUSH
75218: PPUSH
// uc_side = 0 ;
75219: LD_ADDR_OWVAR 20
75223: PUSH
75224: LD_INT 0
75226: ST_TO_ADDR
// uc_nation = 0 ;
75227: LD_ADDR_OWVAR 21
75231: PUSH
75232: LD_INT 0
75234: ST_TO_ADDR
// InitHc_All ( ) ;
75235: CALL_OW 584
// InitVc ;
75239: CALL_OW 20
// if mastodonts then
75243: LD_VAR 0 6
75247: IFFALSE 75314
// for i = 1 to mastodonts do
75249: LD_ADDR_VAR 0 11
75253: PUSH
75254: DOUBLE
75255: LD_INT 1
75257: DEC
75258: ST_TO_ADDR
75259: LD_VAR 0 6
75263: PUSH
75264: FOR_TO
75265: IFFALSE 75312
// begin vc_chassis := 31 ;
75267: LD_ADDR_OWVAR 37
75271: PUSH
75272: LD_INT 31
75274: ST_TO_ADDR
// vc_control := control_rider ;
75275: LD_ADDR_OWVAR 38
75279: PUSH
75280: LD_INT 4
75282: ST_TO_ADDR
// animal := CreateVehicle ;
75283: LD_ADDR_VAR 0 12
75287: PUSH
75288: CALL_OW 45
75292: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75293: LD_VAR 0 12
75297: PPUSH
75298: LD_VAR 0 8
75302: PPUSH
75303: LD_INT 0
75305: PPUSH
75306: CALL 77449 0 3
// end ;
75310: GO 75264
75312: POP
75313: POP
// if horses then
75314: LD_VAR 0 5
75318: IFFALSE 75385
// for i = 1 to horses do
75320: LD_ADDR_VAR 0 11
75324: PUSH
75325: DOUBLE
75326: LD_INT 1
75328: DEC
75329: ST_TO_ADDR
75330: LD_VAR 0 5
75334: PUSH
75335: FOR_TO
75336: IFFALSE 75383
// begin hc_class := 21 ;
75338: LD_ADDR_OWVAR 28
75342: PUSH
75343: LD_INT 21
75345: ST_TO_ADDR
// hc_gallery :=  ;
75346: LD_ADDR_OWVAR 33
75350: PUSH
75351: LD_STRING 
75353: ST_TO_ADDR
// animal := CreateHuman ;
75354: LD_ADDR_VAR 0 12
75358: PUSH
75359: CALL_OW 44
75363: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75364: LD_VAR 0 12
75368: PPUSH
75369: LD_VAR 0 8
75373: PPUSH
75374: LD_INT 0
75376: PPUSH
75377: CALL 77449 0 3
// end ;
75381: GO 75335
75383: POP
75384: POP
// if birds then
75385: LD_VAR 0 1
75389: IFFALSE 75456
// for i = 1 to birds do
75391: LD_ADDR_VAR 0 11
75395: PUSH
75396: DOUBLE
75397: LD_INT 1
75399: DEC
75400: ST_TO_ADDR
75401: LD_VAR 0 1
75405: PUSH
75406: FOR_TO
75407: IFFALSE 75454
// begin hc_class = 18 ;
75409: LD_ADDR_OWVAR 28
75413: PUSH
75414: LD_INT 18
75416: ST_TO_ADDR
// hc_gallery =  ;
75417: LD_ADDR_OWVAR 33
75421: PUSH
75422: LD_STRING 
75424: ST_TO_ADDR
// animal := CreateHuman ;
75425: LD_ADDR_VAR 0 12
75429: PUSH
75430: CALL_OW 44
75434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75435: LD_VAR 0 12
75439: PPUSH
75440: LD_VAR 0 8
75444: PPUSH
75445: LD_INT 0
75447: PPUSH
75448: CALL 77449 0 3
// end ;
75452: GO 75406
75454: POP
75455: POP
// if tigers then
75456: LD_VAR 0 2
75460: IFFALSE 75544
// for i = 1 to tigers do
75462: LD_ADDR_VAR 0 11
75466: PUSH
75467: DOUBLE
75468: LD_INT 1
75470: DEC
75471: ST_TO_ADDR
75472: LD_VAR 0 2
75476: PUSH
75477: FOR_TO
75478: IFFALSE 75542
// begin hc_class = class_tiger ;
75480: LD_ADDR_OWVAR 28
75484: PUSH
75485: LD_INT 14
75487: ST_TO_ADDR
// hc_gallery =  ;
75488: LD_ADDR_OWVAR 33
75492: PUSH
75493: LD_STRING 
75495: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75496: LD_ADDR_OWVAR 35
75500: PUSH
75501: LD_INT 7
75503: NEG
75504: PPUSH
75505: LD_INT 7
75507: PPUSH
75508: CALL_OW 12
75512: ST_TO_ADDR
// animal := CreateHuman ;
75513: LD_ADDR_VAR 0 12
75517: PUSH
75518: CALL_OW 44
75522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75523: LD_VAR 0 12
75527: PPUSH
75528: LD_VAR 0 8
75532: PPUSH
75533: LD_INT 0
75535: PPUSH
75536: CALL 77449 0 3
// end ;
75540: GO 75477
75542: POP
75543: POP
// if apemans then
75544: LD_VAR 0 3
75548: IFFALSE 75671
// for i = 1 to apemans do
75550: LD_ADDR_VAR 0 11
75554: PUSH
75555: DOUBLE
75556: LD_INT 1
75558: DEC
75559: ST_TO_ADDR
75560: LD_VAR 0 3
75564: PUSH
75565: FOR_TO
75566: IFFALSE 75669
// begin hc_class = class_apeman ;
75568: LD_ADDR_OWVAR 28
75572: PUSH
75573: LD_INT 12
75575: ST_TO_ADDR
// hc_gallery =  ;
75576: LD_ADDR_OWVAR 33
75580: PUSH
75581: LD_STRING 
75583: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75584: LD_ADDR_OWVAR 35
75588: PUSH
75589: LD_INT 2
75591: NEG
75592: PPUSH
75593: LD_INT 2
75595: PPUSH
75596: CALL_OW 12
75600: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75601: LD_ADDR_OWVAR 31
75605: PUSH
75606: LD_INT 1
75608: PPUSH
75609: LD_INT 3
75611: PPUSH
75612: CALL_OW 12
75616: PUSH
75617: LD_INT 1
75619: PPUSH
75620: LD_INT 3
75622: PPUSH
75623: CALL_OW 12
75627: PUSH
75628: LD_INT 0
75630: PUSH
75631: LD_INT 0
75633: PUSH
75634: EMPTY
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: ST_TO_ADDR
// animal := CreateHuman ;
75640: LD_ADDR_VAR 0 12
75644: PUSH
75645: CALL_OW 44
75649: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75650: LD_VAR 0 12
75654: PPUSH
75655: LD_VAR 0 8
75659: PPUSH
75660: LD_INT 0
75662: PPUSH
75663: CALL 77449 0 3
// end ;
75667: GO 75565
75669: POP
75670: POP
// if enchidnas then
75671: LD_VAR 0 4
75675: IFFALSE 75742
// for i = 1 to enchidnas do
75677: LD_ADDR_VAR 0 11
75681: PUSH
75682: DOUBLE
75683: LD_INT 1
75685: DEC
75686: ST_TO_ADDR
75687: LD_VAR 0 4
75691: PUSH
75692: FOR_TO
75693: IFFALSE 75740
// begin hc_class = 13 ;
75695: LD_ADDR_OWVAR 28
75699: PUSH
75700: LD_INT 13
75702: ST_TO_ADDR
// hc_gallery =  ;
75703: LD_ADDR_OWVAR 33
75707: PUSH
75708: LD_STRING 
75710: ST_TO_ADDR
// animal := CreateHuman ;
75711: LD_ADDR_VAR 0 12
75715: PUSH
75716: CALL_OW 44
75720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75721: LD_VAR 0 12
75725: PPUSH
75726: LD_VAR 0 8
75730: PPUSH
75731: LD_INT 0
75733: PPUSH
75734: CALL 77449 0 3
// end ;
75738: GO 75692
75740: POP
75741: POP
// if fishes then
75742: LD_VAR 0 7
75746: IFFALSE 75813
// for i = 1 to fishes do
75748: LD_ADDR_VAR 0 11
75752: PUSH
75753: DOUBLE
75754: LD_INT 1
75756: DEC
75757: ST_TO_ADDR
75758: LD_VAR 0 7
75762: PUSH
75763: FOR_TO
75764: IFFALSE 75811
// begin hc_class = 20 ;
75766: LD_ADDR_OWVAR 28
75770: PUSH
75771: LD_INT 20
75773: ST_TO_ADDR
// hc_gallery =  ;
75774: LD_ADDR_OWVAR 33
75778: PUSH
75779: LD_STRING 
75781: ST_TO_ADDR
// animal := CreateHuman ;
75782: LD_ADDR_VAR 0 12
75786: PUSH
75787: CALL_OW 44
75791: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75792: LD_VAR 0 12
75796: PPUSH
75797: LD_VAR 0 9
75801: PPUSH
75802: LD_INT 0
75804: PPUSH
75805: CALL 77449 0 3
// end ;
75809: GO 75763
75811: POP
75812: POP
// end ;
75813: LD_VAR 0 10
75817: RET
// export function WantHeal ( sci , unit ) ; begin
75818: LD_INT 0
75820: PPUSH
// if GetTaskList ( sci ) > 0 then
75821: LD_VAR 0 1
75825: PPUSH
75826: CALL_OW 437
75830: PUSH
75831: LD_INT 0
75833: GREATER
75834: IFFALSE 75904
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75836: LD_VAR 0 1
75840: PPUSH
75841: CALL_OW 437
75845: PUSH
75846: LD_INT 1
75848: ARRAY
75849: PUSH
75850: LD_INT 1
75852: ARRAY
75853: PUSH
75854: LD_STRING l
75856: EQUAL
75857: PUSH
75858: LD_VAR 0 1
75862: PPUSH
75863: CALL_OW 437
75867: PUSH
75868: LD_INT 1
75870: ARRAY
75871: PUSH
75872: LD_INT 4
75874: ARRAY
75875: PUSH
75876: LD_VAR 0 2
75880: EQUAL
75881: AND
75882: IFFALSE 75894
// result := true else
75884: LD_ADDR_VAR 0 3
75888: PUSH
75889: LD_INT 1
75891: ST_TO_ADDR
75892: GO 75902
// result := false ;
75894: LD_ADDR_VAR 0 3
75898: PUSH
75899: LD_INT 0
75901: ST_TO_ADDR
// end else
75902: GO 75912
// result := false ;
75904: LD_ADDR_VAR 0 3
75908: PUSH
75909: LD_INT 0
75911: ST_TO_ADDR
// end ;
75912: LD_VAR 0 3
75916: RET
// export function HealTarget ( sci ) ; begin
75917: LD_INT 0
75919: PPUSH
// if not sci then
75920: LD_VAR 0 1
75924: NOT
75925: IFFALSE 75929
// exit ;
75927: GO 75994
// result := 0 ;
75929: LD_ADDR_VAR 0 2
75933: PUSH
75934: LD_INT 0
75936: ST_TO_ADDR
// if GetTaskList ( sci ) then
75937: LD_VAR 0 1
75941: PPUSH
75942: CALL_OW 437
75946: IFFALSE 75994
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75948: LD_VAR 0 1
75952: PPUSH
75953: CALL_OW 437
75957: PUSH
75958: LD_INT 1
75960: ARRAY
75961: PUSH
75962: LD_INT 1
75964: ARRAY
75965: PUSH
75966: LD_STRING l
75968: EQUAL
75969: IFFALSE 75994
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75971: LD_ADDR_VAR 0 2
75975: PUSH
75976: LD_VAR 0 1
75980: PPUSH
75981: CALL_OW 437
75985: PUSH
75986: LD_INT 1
75988: ARRAY
75989: PUSH
75990: LD_INT 4
75992: ARRAY
75993: ST_TO_ADDR
// end ;
75994: LD_VAR 0 2
75998: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75999: LD_INT 0
76001: PPUSH
76002: PPUSH
76003: PPUSH
76004: PPUSH
// if not base_units then
76005: LD_VAR 0 1
76009: NOT
76010: IFFALSE 76014
// exit ;
76012: GO 76101
// result := false ;
76014: LD_ADDR_VAR 0 2
76018: PUSH
76019: LD_INT 0
76021: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76022: LD_ADDR_VAR 0 5
76026: PUSH
76027: LD_VAR 0 1
76031: PPUSH
76032: LD_INT 21
76034: PUSH
76035: LD_INT 3
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: PPUSH
76042: CALL_OW 72
76046: ST_TO_ADDR
// if not tmp then
76047: LD_VAR 0 5
76051: NOT
76052: IFFALSE 76056
// exit ;
76054: GO 76101
// for i in tmp do
76056: LD_ADDR_VAR 0 3
76060: PUSH
76061: LD_VAR 0 5
76065: PUSH
76066: FOR_IN
76067: IFFALSE 76099
// begin result := EnemyInRange ( i , 22 ) ;
76069: LD_ADDR_VAR 0 2
76073: PUSH
76074: LD_VAR 0 3
76078: PPUSH
76079: LD_INT 22
76081: PPUSH
76082: CALL 73770 0 2
76086: ST_TO_ADDR
// if result then
76087: LD_VAR 0 2
76091: IFFALSE 76097
// exit ;
76093: POP
76094: POP
76095: GO 76101
// end ;
76097: GO 76066
76099: POP
76100: POP
// end ;
76101: LD_VAR 0 2
76105: RET
// export function FilterByTag ( units , tag ) ; begin
76106: LD_INT 0
76108: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76109: LD_ADDR_VAR 0 3
76113: PUSH
76114: LD_VAR 0 1
76118: PPUSH
76119: LD_INT 120
76121: PUSH
76122: LD_VAR 0 2
76126: PUSH
76127: EMPTY
76128: LIST
76129: LIST
76130: PPUSH
76131: CALL_OW 72
76135: ST_TO_ADDR
// end ;
76136: LD_VAR 0 3
76140: RET
// export function IsDriver ( un ) ; begin
76141: LD_INT 0
76143: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76144: LD_ADDR_VAR 0 2
76148: PUSH
76149: LD_VAR 0 1
76153: PUSH
76154: LD_INT 55
76156: PUSH
76157: EMPTY
76158: LIST
76159: PPUSH
76160: CALL_OW 69
76164: IN
76165: ST_TO_ADDR
// end ;
76166: LD_VAR 0 2
76170: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76171: LD_INT 0
76173: PPUSH
76174: PPUSH
// list := [ ] ;
76175: LD_ADDR_VAR 0 5
76179: PUSH
76180: EMPTY
76181: ST_TO_ADDR
// case d of 0 :
76182: LD_VAR 0 3
76186: PUSH
76187: LD_INT 0
76189: DOUBLE
76190: EQUAL
76191: IFTRUE 76195
76193: GO 76328
76195: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76196: LD_ADDR_VAR 0 5
76200: PUSH
76201: LD_VAR 0 1
76205: PUSH
76206: LD_INT 4
76208: MINUS
76209: PUSH
76210: LD_VAR 0 2
76214: PUSH
76215: LD_INT 4
76217: MINUS
76218: PUSH
76219: LD_INT 2
76221: PUSH
76222: EMPTY
76223: LIST
76224: LIST
76225: LIST
76226: PUSH
76227: LD_VAR 0 1
76231: PUSH
76232: LD_INT 3
76234: MINUS
76235: PUSH
76236: LD_VAR 0 2
76240: PUSH
76241: LD_INT 1
76243: PUSH
76244: EMPTY
76245: LIST
76246: LIST
76247: LIST
76248: PUSH
76249: LD_VAR 0 1
76253: PUSH
76254: LD_INT 4
76256: PLUS
76257: PUSH
76258: LD_VAR 0 2
76262: PUSH
76263: LD_INT 4
76265: PUSH
76266: EMPTY
76267: LIST
76268: LIST
76269: LIST
76270: PUSH
76271: LD_VAR 0 1
76275: PUSH
76276: LD_INT 3
76278: PLUS
76279: PUSH
76280: LD_VAR 0 2
76284: PUSH
76285: LD_INT 3
76287: PLUS
76288: PUSH
76289: LD_INT 5
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: LIST
76296: PUSH
76297: LD_VAR 0 1
76301: PUSH
76302: LD_VAR 0 2
76306: PUSH
76307: LD_INT 4
76309: PLUS
76310: PUSH
76311: LD_INT 0
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: LIST
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: LIST
76323: LIST
76324: LIST
76325: ST_TO_ADDR
// end ; 1 :
76326: GO 77026
76328: LD_INT 1
76330: DOUBLE
76331: EQUAL
76332: IFTRUE 76336
76334: GO 76469
76336: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76337: LD_ADDR_VAR 0 5
76341: PUSH
76342: LD_VAR 0 1
76346: PUSH
76347: LD_VAR 0 2
76351: PUSH
76352: LD_INT 4
76354: MINUS
76355: PUSH
76356: LD_INT 3
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: LIST
76363: PUSH
76364: LD_VAR 0 1
76368: PUSH
76369: LD_INT 3
76371: MINUS
76372: PUSH
76373: LD_VAR 0 2
76377: PUSH
76378: LD_INT 3
76380: MINUS
76381: PUSH
76382: LD_INT 2
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: LIST
76389: PUSH
76390: LD_VAR 0 1
76394: PUSH
76395: LD_INT 4
76397: MINUS
76398: PUSH
76399: LD_VAR 0 2
76403: PUSH
76404: LD_INT 1
76406: PUSH
76407: EMPTY
76408: LIST
76409: LIST
76410: LIST
76411: PUSH
76412: LD_VAR 0 1
76416: PUSH
76417: LD_VAR 0 2
76421: PUSH
76422: LD_INT 3
76424: PLUS
76425: PUSH
76426: LD_INT 0
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: LIST
76433: PUSH
76434: LD_VAR 0 1
76438: PUSH
76439: LD_INT 4
76441: PLUS
76442: PUSH
76443: LD_VAR 0 2
76447: PUSH
76448: LD_INT 4
76450: PLUS
76451: PUSH
76452: LD_INT 5
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: LIST
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: LIST
76466: ST_TO_ADDR
// end ; 2 :
76467: GO 77026
76469: LD_INT 2
76471: DOUBLE
76472: EQUAL
76473: IFTRUE 76477
76475: GO 76606
76477: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76478: LD_ADDR_VAR 0 5
76482: PUSH
76483: LD_VAR 0 1
76487: PUSH
76488: LD_VAR 0 2
76492: PUSH
76493: LD_INT 3
76495: MINUS
76496: PUSH
76497: LD_INT 3
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: LIST
76504: PUSH
76505: LD_VAR 0 1
76509: PUSH
76510: LD_INT 4
76512: PLUS
76513: PUSH
76514: LD_VAR 0 2
76518: PUSH
76519: LD_INT 4
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: LIST
76526: PUSH
76527: LD_VAR 0 1
76531: PUSH
76532: LD_VAR 0 2
76536: PUSH
76537: LD_INT 4
76539: PLUS
76540: PUSH
76541: LD_INT 0
76543: PUSH
76544: EMPTY
76545: LIST
76546: LIST
76547: LIST
76548: PUSH
76549: LD_VAR 0 1
76553: PUSH
76554: LD_INT 3
76556: MINUS
76557: PUSH
76558: LD_VAR 0 2
76562: PUSH
76563: LD_INT 1
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: LIST
76570: PUSH
76571: LD_VAR 0 1
76575: PUSH
76576: LD_INT 4
76578: MINUS
76579: PUSH
76580: LD_VAR 0 2
76584: PUSH
76585: LD_INT 4
76587: MINUS
76588: PUSH
76589: LD_INT 2
76591: PUSH
76592: EMPTY
76593: LIST
76594: LIST
76595: LIST
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: LIST
76601: LIST
76602: LIST
76603: ST_TO_ADDR
// end ; 3 :
76604: GO 77026
76606: LD_INT 3
76608: DOUBLE
76609: EQUAL
76610: IFTRUE 76614
76612: GO 76747
76614: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76615: LD_ADDR_VAR 0 5
76619: PUSH
76620: LD_VAR 0 1
76624: PUSH
76625: LD_INT 3
76627: PLUS
76628: PUSH
76629: LD_VAR 0 2
76633: PUSH
76634: LD_INT 4
76636: PUSH
76637: EMPTY
76638: LIST
76639: LIST
76640: LIST
76641: PUSH
76642: LD_VAR 0 1
76646: PUSH
76647: LD_INT 4
76649: PLUS
76650: PUSH
76651: LD_VAR 0 2
76655: PUSH
76656: LD_INT 4
76658: PLUS
76659: PUSH
76660: LD_INT 5
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: LIST
76667: PUSH
76668: LD_VAR 0 1
76672: PUSH
76673: LD_INT 4
76675: MINUS
76676: PUSH
76677: LD_VAR 0 2
76681: PUSH
76682: LD_INT 1
76684: PUSH
76685: EMPTY
76686: LIST
76687: LIST
76688: LIST
76689: PUSH
76690: LD_VAR 0 1
76694: PUSH
76695: LD_VAR 0 2
76699: PUSH
76700: LD_INT 4
76702: MINUS
76703: PUSH
76704: LD_INT 3
76706: PUSH
76707: EMPTY
76708: LIST
76709: LIST
76710: LIST
76711: PUSH
76712: LD_VAR 0 1
76716: PUSH
76717: LD_INT 3
76719: MINUS
76720: PUSH
76721: LD_VAR 0 2
76725: PUSH
76726: LD_INT 3
76728: MINUS
76729: PUSH
76730: LD_INT 2
76732: PUSH
76733: EMPTY
76734: LIST
76735: LIST
76736: LIST
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: LIST
76742: LIST
76743: LIST
76744: ST_TO_ADDR
// end ; 4 :
76745: GO 77026
76747: LD_INT 4
76749: DOUBLE
76750: EQUAL
76751: IFTRUE 76755
76753: GO 76888
76755: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76756: LD_ADDR_VAR 0 5
76760: PUSH
76761: LD_VAR 0 1
76765: PUSH
76766: LD_VAR 0 2
76770: PUSH
76771: LD_INT 4
76773: PLUS
76774: PUSH
76775: LD_INT 0
76777: PUSH
76778: EMPTY
76779: LIST
76780: LIST
76781: LIST
76782: PUSH
76783: LD_VAR 0 1
76787: PUSH
76788: LD_INT 3
76790: PLUS
76791: PUSH
76792: LD_VAR 0 2
76796: PUSH
76797: LD_INT 3
76799: PLUS
76800: PUSH
76801: LD_INT 5
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: LIST
76808: PUSH
76809: LD_VAR 0 1
76813: PUSH
76814: LD_INT 4
76816: PLUS
76817: PUSH
76818: LD_VAR 0 2
76822: PUSH
76823: LD_INT 4
76825: PUSH
76826: EMPTY
76827: LIST
76828: LIST
76829: LIST
76830: PUSH
76831: LD_VAR 0 1
76835: PUSH
76836: LD_VAR 0 2
76840: PUSH
76841: LD_INT 3
76843: MINUS
76844: PUSH
76845: LD_INT 3
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: LIST
76852: PUSH
76853: LD_VAR 0 1
76857: PUSH
76858: LD_INT 4
76860: MINUS
76861: PUSH
76862: LD_VAR 0 2
76866: PUSH
76867: LD_INT 4
76869: MINUS
76870: PUSH
76871: LD_INT 2
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: LIST
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: LIST
76883: LIST
76884: LIST
76885: ST_TO_ADDR
// end ; 5 :
76886: GO 77026
76888: LD_INT 5
76890: DOUBLE
76891: EQUAL
76892: IFTRUE 76896
76894: GO 77025
76896: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76897: LD_ADDR_VAR 0 5
76901: PUSH
76902: LD_VAR 0 1
76906: PUSH
76907: LD_INT 4
76909: MINUS
76910: PUSH
76911: LD_VAR 0 2
76915: PUSH
76916: LD_INT 1
76918: PUSH
76919: EMPTY
76920: LIST
76921: LIST
76922: LIST
76923: PUSH
76924: LD_VAR 0 1
76928: PUSH
76929: LD_VAR 0 2
76933: PUSH
76934: LD_INT 4
76936: MINUS
76937: PUSH
76938: LD_INT 3
76940: PUSH
76941: EMPTY
76942: LIST
76943: LIST
76944: LIST
76945: PUSH
76946: LD_VAR 0 1
76950: PUSH
76951: LD_INT 4
76953: PLUS
76954: PUSH
76955: LD_VAR 0 2
76959: PUSH
76960: LD_INT 4
76962: PLUS
76963: PUSH
76964: LD_INT 5
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: LIST
76971: PUSH
76972: LD_VAR 0 1
76976: PUSH
76977: LD_INT 3
76979: PLUS
76980: PUSH
76981: LD_VAR 0 2
76985: PUSH
76986: LD_INT 4
76988: PUSH
76989: EMPTY
76990: LIST
76991: LIST
76992: LIST
76993: PUSH
76994: LD_VAR 0 1
76998: PUSH
76999: LD_VAR 0 2
77003: PUSH
77004: LD_INT 3
77006: PLUS
77007: PUSH
77008: LD_INT 0
77010: PUSH
77011: EMPTY
77012: LIST
77013: LIST
77014: LIST
77015: PUSH
77016: EMPTY
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: ST_TO_ADDR
// end ; end ;
77023: GO 77026
77025: POP
// result := list ;
77026: LD_ADDR_VAR 0 4
77030: PUSH
77031: LD_VAR 0 5
77035: ST_TO_ADDR
// end ;
77036: LD_VAR 0 4
77040: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77041: LD_INT 0
77043: PPUSH
77044: PPUSH
77045: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77046: LD_VAR 0 1
77050: NOT
77051: PUSH
77052: LD_VAR 0 2
77056: PUSH
77057: LD_INT 1
77059: PUSH
77060: LD_INT 2
77062: PUSH
77063: LD_INT 3
77065: PUSH
77066: LD_INT 4
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: LIST
77073: LIST
77074: IN
77075: NOT
77076: OR
77077: IFFALSE 77081
// exit ;
77079: GO 77173
// tmp := [ ] ;
77081: LD_ADDR_VAR 0 5
77085: PUSH
77086: EMPTY
77087: ST_TO_ADDR
// for i in units do
77088: LD_ADDR_VAR 0 4
77092: PUSH
77093: LD_VAR 0 1
77097: PUSH
77098: FOR_IN
77099: IFFALSE 77142
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
77101: LD_ADDR_VAR 0 5
77105: PUSH
77106: LD_VAR 0 5
77110: PPUSH
77111: LD_VAR 0 5
77115: PUSH
77116: LD_INT 1
77118: PLUS
77119: PPUSH
77120: LD_VAR 0 4
77124: PPUSH
77125: LD_VAR 0 2
77129: PPUSH
77130: CALL_OW 259
77134: PPUSH
77135: CALL_OW 2
77139: ST_TO_ADDR
77140: GO 77098
77142: POP
77143: POP
// if not tmp then
77144: LD_VAR 0 5
77148: NOT
77149: IFFALSE 77153
// exit ;
77151: GO 77173
// result := SortListByListDesc ( units , tmp ) ;
77153: LD_ADDR_VAR 0 3
77157: PUSH
77158: LD_VAR 0 1
77162: PPUSH
77163: LD_VAR 0 5
77167: PPUSH
77168: CALL_OW 77
77172: ST_TO_ADDR
// end ;
77173: LD_VAR 0 3
77177: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77178: LD_INT 0
77180: PPUSH
77181: PPUSH
77182: PPUSH
// result := false ;
77183: LD_ADDR_VAR 0 3
77187: PUSH
77188: LD_INT 0
77190: ST_TO_ADDR
// x := GetX ( building ) ;
77191: LD_ADDR_VAR 0 4
77195: PUSH
77196: LD_VAR 0 2
77200: PPUSH
77201: CALL_OW 250
77205: ST_TO_ADDR
// y := GetY ( building ) ;
77206: LD_ADDR_VAR 0 5
77210: PUSH
77211: LD_VAR 0 2
77215: PPUSH
77216: CALL_OW 251
77220: ST_TO_ADDR
// if not building or not x or not y then
77221: LD_VAR 0 2
77225: NOT
77226: PUSH
77227: LD_VAR 0 4
77231: NOT
77232: OR
77233: PUSH
77234: LD_VAR 0 5
77238: NOT
77239: OR
77240: IFFALSE 77244
// exit ;
77242: GO 77336
// if GetTaskList ( unit ) then
77244: LD_VAR 0 1
77248: PPUSH
77249: CALL_OW 437
77253: IFFALSE 77336
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77255: LD_STRING e
77257: PUSH
77258: LD_VAR 0 1
77262: PPUSH
77263: CALL_OW 437
77267: PUSH
77268: LD_INT 1
77270: ARRAY
77271: PUSH
77272: LD_INT 1
77274: ARRAY
77275: EQUAL
77276: PUSH
77277: LD_VAR 0 4
77281: PUSH
77282: LD_VAR 0 1
77286: PPUSH
77287: CALL_OW 437
77291: PUSH
77292: LD_INT 1
77294: ARRAY
77295: PUSH
77296: LD_INT 2
77298: ARRAY
77299: EQUAL
77300: AND
77301: PUSH
77302: LD_VAR 0 5
77306: PUSH
77307: LD_VAR 0 1
77311: PPUSH
77312: CALL_OW 437
77316: PUSH
77317: LD_INT 1
77319: ARRAY
77320: PUSH
77321: LD_INT 3
77323: ARRAY
77324: EQUAL
77325: AND
77326: IFFALSE 77336
// result := true end ;
77328: LD_ADDR_VAR 0 3
77332: PUSH
77333: LD_INT 1
77335: ST_TO_ADDR
// end ;
77336: LD_VAR 0 3
77340: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77341: LD_INT 0
77343: PPUSH
// result := false ;
77344: LD_ADDR_VAR 0 4
77348: PUSH
77349: LD_INT 0
77351: ST_TO_ADDR
// if GetTaskList ( unit ) then
77352: LD_VAR 0 1
77356: PPUSH
77357: CALL_OW 437
77361: IFFALSE 77444
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77363: LD_STRING M
77365: PUSH
77366: LD_VAR 0 1
77370: PPUSH
77371: CALL_OW 437
77375: PUSH
77376: LD_INT 1
77378: ARRAY
77379: PUSH
77380: LD_INT 1
77382: ARRAY
77383: EQUAL
77384: PUSH
77385: LD_VAR 0 2
77389: PUSH
77390: LD_VAR 0 1
77394: PPUSH
77395: CALL_OW 437
77399: PUSH
77400: LD_INT 1
77402: ARRAY
77403: PUSH
77404: LD_INT 2
77406: ARRAY
77407: EQUAL
77408: AND
77409: PUSH
77410: LD_VAR 0 3
77414: PUSH
77415: LD_VAR 0 1
77419: PPUSH
77420: CALL_OW 437
77424: PUSH
77425: LD_INT 1
77427: ARRAY
77428: PUSH
77429: LD_INT 3
77431: ARRAY
77432: EQUAL
77433: AND
77434: IFFALSE 77444
// result := true ;
77436: LD_ADDR_VAR 0 4
77440: PUSH
77441: LD_INT 1
77443: ST_TO_ADDR
// end ; end ;
77444: LD_VAR 0 4
77448: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77449: LD_INT 0
77451: PPUSH
77452: PPUSH
77453: PPUSH
77454: PPUSH
// if not unit or not area then
77455: LD_VAR 0 1
77459: NOT
77460: PUSH
77461: LD_VAR 0 2
77465: NOT
77466: OR
77467: IFFALSE 77471
// exit ;
77469: GO 77635
// tmp := AreaToList ( area , i ) ;
77471: LD_ADDR_VAR 0 6
77475: PUSH
77476: LD_VAR 0 2
77480: PPUSH
77481: LD_VAR 0 5
77485: PPUSH
77486: CALL_OW 517
77490: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77491: LD_ADDR_VAR 0 5
77495: PUSH
77496: DOUBLE
77497: LD_INT 1
77499: DEC
77500: ST_TO_ADDR
77501: LD_VAR 0 6
77505: PUSH
77506: LD_INT 1
77508: ARRAY
77509: PUSH
77510: FOR_TO
77511: IFFALSE 77633
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77513: LD_ADDR_VAR 0 7
77517: PUSH
77518: LD_VAR 0 6
77522: PUSH
77523: LD_INT 1
77525: ARRAY
77526: PUSH
77527: LD_VAR 0 5
77531: ARRAY
77532: PUSH
77533: LD_VAR 0 6
77537: PUSH
77538: LD_INT 2
77540: ARRAY
77541: PUSH
77542: LD_VAR 0 5
77546: ARRAY
77547: PUSH
77548: EMPTY
77549: LIST
77550: LIST
77551: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77552: LD_VAR 0 7
77556: PUSH
77557: LD_INT 1
77559: ARRAY
77560: PPUSH
77561: LD_VAR 0 7
77565: PUSH
77566: LD_INT 2
77568: ARRAY
77569: PPUSH
77570: CALL_OW 428
77574: PUSH
77575: LD_INT 0
77577: EQUAL
77578: IFFALSE 77631
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77580: LD_VAR 0 1
77584: PPUSH
77585: LD_VAR 0 7
77589: PUSH
77590: LD_INT 1
77592: ARRAY
77593: PPUSH
77594: LD_VAR 0 7
77598: PUSH
77599: LD_INT 2
77601: ARRAY
77602: PPUSH
77603: LD_VAR 0 3
77607: PPUSH
77608: CALL_OW 48
// result := IsPlaced ( unit ) ;
77612: LD_ADDR_VAR 0 4
77616: PUSH
77617: LD_VAR 0 1
77621: PPUSH
77622: CALL_OW 305
77626: ST_TO_ADDR
// exit ;
77627: POP
77628: POP
77629: GO 77635
// end ; end ;
77631: GO 77510
77633: POP
77634: POP
// end ;
77635: LD_VAR 0 4
77639: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77640: LD_INT 0
77642: PPUSH
77643: PPUSH
77644: PPUSH
// if not side or side > 8 then
77645: LD_VAR 0 1
77649: NOT
77650: PUSH
77651: LD_VAR 0 1
77655: PUSH
77656: LD_INT 8
77658: GREATER
77659: OR
77660: IFFALSE 77664
// exit ;
77662: GO 77851
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77664: LD_ADDR_VAR 0 4
77668: PUSH
77669: LD_INT 22
77671: PUSH
77672: LD_VAR 0 1
77676: PUSH
77677: EMPTY
77678: LIST
77679: LIST
77680: PUSH
77681: LD_INT 21
77683: PUSH
77684: LD_INT 3
77686: PUSH
77687: EMPTY
77688: LIST
77689: LIST
77690: PUSH
77691: EMPTY
77692: LIST
77693: LIST
77694: PPUSH
77695: CALL_OW 69
77699: ST_TO_ADDR
// if not tmp then
77700: LD_VAR 0 4
77704: NOT
77705: IFFALSE 77709
// exit ;
77707: GO 77851
// enable_addtolog := true ;
77709: LD_ADDR_OWVAR 81
77713: PUSH
77714: LD_INT 1
77716: ST_TO_ADDR
// AddToLog ( [ ) ;
77717: LD_STRING [
77719: PPUSH
77720: CALL_OW 561
// for i in tmp do
77724: LD_ADDR_VAR 0 3
77728: PUSH
77729: LD_VAR 0 4
77733: PUSH
77734: FOR_IN
77735: IFFALSE 77842
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77737: LD_STRING [
77739: PUSH
77740: LD_VAR 0 3
77744: PPUSH
77745: CALL_OW 266
77749: STR
77750: PUSH
77751: LD_STRING , 
77753: STR
77754: PUSH
77755: LD_VAR 0 3
77759: PPUSH
77760: CALL_OW 250
77764: STR
77765: PUSH
77766: LD_STRING , 
77768: STR
77769: PUSH
77770: LD_VAR 0 3
77774: PPUSH
77775: CALL_OW 251
77779: STR
77780: PUSH
77781: LD_STRING , 
77783: STR
77784: PUSH
77785: LD_VAR 0 3
77789: PPUSH
77790: CALL_OW 254
77794: STR
77795: PUSH
77796: LD_STRING , 
77798: STR
77799: PUSH
77800: LD_VAR 0 3
77804: PPUSH
77805: LD_INT 1
77807: PPUSH
77808: CALL_OW 268
77812: STR
77813: PUSH
77814: LD_STRING , 
77816: STR
77817: PUSH
77818: LD_VAR 0 3
77822: PPUSH
77823: LD_INT 2
77825: PPUSH
77826: CALL_OW 268
77830: STR
77831: PUSH
77832: LD_STRING ],
77834: STR
77835: PPUSH
77836: CALL_OW 561
// end ;
77840: GO 77734
77842: POP
77843: POP
// AddToLog ( ]; ) ;
77844: LD_STRING ];
77846: PPUSH
77847: CALL_OW 561
// end ;
77851: LD_VAR 0 2
77855: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77856: LD_INT 0
77858: PPUSH
77859: PPUSH
77860: PPUSH
77861: PPUSH
77862: PPUSH
// if not area or not rate or not max then
77863: LD_VAR 0 1
77867: NOT
77868: PUSH
77869: LD_VAR 0 2
77873: NOT
77874: OR
77875: PUSH
77876: LD_VAR 0 4
77880: NOT
77881: OR
77882: IFFALSE 77886
// exit ;
77884: GO 78075
// while 1 do
77886: LD_INT 1
77888: IFFALSE 78075
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77890: LD_ADDR_VAR 0 9
77894: PUSH
77895: LD_VAR 0 1
77899: PPUSH
77900: LD_INT 1
77902: PPUSH
77903: CALL_OW 287
77907: PUSH
77908: LD_INT 10
77910: MUL
77911: ST_TO_ADDR
// r := rate / 10 ;
77912: LD_ADDR_VAR 0 7
77916: PUSH
77917: LD_VAR 0 2
77921: PUSH
77922: LD_INT 10
77924: DIVREAL
77925: ST_TO_ADDR
// time := 1 1$00 ;
77926: LD_ADDR_VAR 0 8
77930: PUSH
77931: LD_INT 2100
77933: ST_TO_ADDR
// if amount < min then
77934: LD_VAR 0 9
77938: PUSH
77939: LD_VAR 0 3
77943: LESS
77944: IFFALSE 77962
// r := r * 2 else
77946: LD_ADDR_VAR 0 7
77950: PUSH
77951: LD_VAR 0 7
77955: PUSH
77956: LD_INT 2
77958: MUL
77959: ST_TO_ADDR
77960: GO 77988
// if amount > max then
77962: LD_VAR 0 9
77966: PUSH
77967: LD_VAR 0 4
77971: GREATER
77972: IFFALSE 77988
// r := r / 2 ;
77974: LD_ADDR_VAR 0 7
77978: PUSH
77979: LD_VAR 0 7
77983: PUSH
77984: LD_INT 2
77986: DIVREAL
77987: ST_TO_ADDR
// time := time / r ;
77988: LD_ADDR_VAR 0 8
77992: PUSH
77993: LD_VAR 0 8
77997: PUSH
77998: LD_VAR 0 7
78002: DIVREAL
78003: ST_TO_ADDR
// if time < 0 then
78004: LD_VAR 0 8
78008: PUSH
78009: LD_INT 0
78011: LESS
78012: IFFALSE 78029
// time := time * - 1 ;
78014: LD_ADDR_VAR 0 8
78018: PUSH
78019: LD_VAR 0 8
78023: PUSH
78024: LD_INT 1
78026: NEG
78027: MUL
78028: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78029: LD_VAR 0 8
78033: PUSH
78034: LD_INT 35
78036: PPUSH
78037: LD_INT 875
78039: PPUSH
78040: CALL_OW 12
78044: PLUS
78045: PPUSH
78046: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78050: LD_INT 1
78052: PPUSH
78053: LD_INT 5
78055: PPUSH
78056: CALL_OW 12
78060: PPUSH
78061: LD_VAR 0 1
78065: PPUSH
78066: LD_INT 1
78068: PPUSH
78069: CALL_OW 55
// end ;
78073: GO 77886
// end ;
78075: LD_VAR 0 5
78079: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78080: LD_INT 0
78082: PPUSH
78083: PPUSH
78084: PPUSH
78085: PPUSH
78086: PPUSH
78087: PPUSH
78088: PPUSH
78089: PPUSH
// if not turrets or not factories then
78090: LD_VAR 0 1
78094: NOT
78095: PUSH
78096: LD_VAR 0 2
78100: NOT
78101: OR
78102: IFFALSE 78106
// exit ;
78104: GO 78413
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78106: LD_ADDR_VAR 0 10
78110: PUSH
78111: LD_INT 5
78113: PUSH
78114: LD_INT 6
78116: PUSH
78117: EMPTY
78118: LIST
78119: LIST
78120: PUSH
78121: LD_INT 2
78123: PUSH
78124: LD_INT 4
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: PUSH
78131: LD_INT 3
78133: PUSH
78134: LD_INT 5
78136: PUSH
78137: EMPTY
78138: LIST
78139: LIST
78140: PUSH
78141: EMPTY
78142: LIST
78143: LIST
78144: LIST
78145: PUSH
78146: LD_INT 24
78148: PUSH
78149: LD_INT 25
78151: PUSH
78152: EMPTY
78153: LIST
78154: LIST
78155: PUSH
78156: LD_INT 23
78158: PUSH
78159: LD_INT 27
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: PUSH
78166: EMPTY
78167: LIST
78168: LIST
78169: PUSH
78170: LD_INT 42
78172: PUSH
78173: LD_INT 43
78175: PUSH
78176: EMPTY
78177: LIST
78178: LIST
78179: PUSH
78180: LD_INT 44
78182: PUSH
78183: LD_INT 46
78185: PUSH
78186: EMPTY
78187: LIST
78188: LIST
78189: PUSH
78190: LD_INT 45
78192: PUSH
78193: LD_INT 47
78195: PUSH
78196: EMPTY
78197: LIST
78198: LIST
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: LIST
78204: PUSH
78205: EMPTY
78206: LIST
78207: LIST
78208: LIST
78209: ST_TO_ADDR
// result := [ ] ;
78210: LD_ADDR_VAR 0 3
78214: PUSH
78215: EMPTY
78216: ST_TO_ADDR
// for i in turrets do
78217: LD_ADDR_VAR 0 4
78221: PUSH
78222: LD_VAR 0 1
78226: PUSH
78227: FOR_IN
78228: IFFALSE 78411
// begin nat := GetNation ( i ) ;
78230: LD_ADDR_VAR 0 7
78234: PUSH
78235: LD_VAR 0 4
78239: PPUSH
78240: CALL_OW 248
78244: ST_TO_ADDR
// weapon := 0 ;
78245: LD_ADDR_VAR 0 8
78249: PUSH
78250: LD_INT 0
78252: ST_TO_ADDR
// if not nat then
78253: LD_VAR 0 7
78257: NOT
78258: IFFALSE 78262
// continue ;
78260: GO 78227
// for j in list [ nat ] do
78262: LD_ADDR_VAR 0 5
78266: PUSH
78267: LD_VAR 0 10
78271: PUSH
78272: LD_VAR 0 7
78276: ARRAY
78277: PUSH
78278: FOR_IN
78279: IFFALSE 78320
// if GetBWeapon ( i ) = j [ 1 ] then
78281: LD_VAR 0 4
78285: PPUSH
78286: CALL_OW 269
78290: PUSH
78291: LD_VAR 0 5
78295: PUSH
78296: LD_INT 1
78298: ARRAY
78299: EQUAL
78300: IFFALSE 78318
// begin weapon := j [ 2 ] ;
78302: LD_ADDR_VAR 0 8
78306: PUSH
78307: LD_VAR 0 5
78311: PUSH
78312: LD_INT 2
78314: ARRAY
78315: ST_TO_ADDR
// break ;
78316: GO 78320
// end ;
78318: GO 78278
78320: POP
78321: POP
// if not weapon then
78322: LD_VAR 0 8
78326: NOT
78327: IFFALSE 78331
// continue ;
78329: GO 78227
// for k in factories do
78331: LD_ADDR_VAR 0 6
78335: PUSH
78336: LD_VAR 0 2
78340: PUSH
78341: FOR_IN
78342: IFFALSE 78407
// begin weapons := AvailableWeaponList ( k ) ;
78344: LD_ADDR_VAR 0 9
78348: PUSH
78349: LD_VAR 0 6
78353: PPUSH
78354: CALL_OW 478
78358: ST_TO_ADDR
// if not weapons then
78359: LD_VAR 0 9
78363: NOT
78364: IFFALSE 78368
// continue ;
78366: GO 78341
// if weapon in weapons then
78368: LD_VAR 0 8
78372: PUSH
78373: LD_VAR 0 9
78377: IN
78378: IFFALSE 78405
// begin result := [ i , weapon ] ;
78380: LD_ADDR_VAR 0 3
78384: PUSH
78385: LD_VAR 0 4
78389: PUSH
78390: LD_VAR 0 8
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: ST_TO_ADDR
// exit ;
78399: POP
78400: POP
78401: POP
78402: POP
78403: GO 78413
// end ; end ;
78405: GO 78341
78407: POP
78408: POP
// end ;
78409: GO 78227
78411: POP
78412: POP
// end ;
78413: LD_VAR 0 3
78417: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78418: LD_INT 0
78420: PPUSH
// if not side or side > 8 then
78421: LD_VAR 0 3
78425: NOT
78426: PUSH
78427: LD_VAR 0 3
78431: PUSH
78432: LD_INT 8
78434: GREATER
78435: OR
78436: IFFALSE 78440
// exit ;
78438: GO 78499
// if not range then
78440: LD_VAR 0 4
78444: NOT
78445: IFFALSE 78456
// range := - 12 ;
78447: LD_ADDR_VAR 0 4
78451: PUSH
78452: LD_INT 12
78454: NEG
78455: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78456: LD_VAR 0 1
78460: PPUSH
78461: LD_VAR 0 2
78465: PPUSH
78466: LD_VAR 0 3
78470: PPUSH
78471: LD_VAR 0 4
78475: PPUSH
78476: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78480: LD_VAR 0 1
78484: PPUSH
78485: LD_VAR 0 2
78489: PPUSH
78490: LD_VAR 0 3
78494: PPUSH
78495: CALL_OW 331
// end ;
78499: LD_VAR 0 5
78503: RET
// export function Video ( mode ) ; begin
78504: LD_INT 0
78506: PPUSH
// ingame_video = mode ;
78507: LD_ADDR_OWVAR 52
78511: PUSH
78512: LD_VAR 0 1
78516: ST_TO_ADDR
// interface_hidden = mode ;
78517: LD_ADDR_OWVAR 54
78521: PUSH
78522: LD_VAR 0 1
78526: ST_TO_ADDR
// end ;
78527: LD_VAR 0 2
78531: RET
// export function Join ( array , element ) ; begin
78532: LD_INT 0
78534: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78535: LD_ADDR_VAR 0 3
78539: PUSH
78540: LD_VAR 0 1
78544: PPUSH
78545: LD_VAR 0 1
78549: PUSH
78550: LD_INT 1
78552: PLUS
78553: PPUSH
78554: LD_VAR 0 2
78558: PPUSH
78559: CALL_OW 1
78563: ST_TO_ADDR
// end ;
78564: LD_VAR 0 3
78568: RET
// export function JoinUnion ( array , element ) ; begin
78569: LD_INT 0
78571: PPUSH
// result := array union element ;
78572: LD_ADDR_VAR 0 3
78576: PUSH
78577: LD_VAR 0 1
78581: PUSH
78582: LD_VAR 0 2
78586: UNION
78587: ST_TO_ADDR
// end ;
78588: LD_VAR 0 3
78592: RET
// export function GetBehemoths ( side ) ; begin
78593: LD_INT 0
78595: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78596: LD_ADDR_VAR 0 2
78600: PUSH
78601: LD_INT 22
78603: PUSH
78604: LD_VAR 0 1
78608: PUSH
78609: EMPTY
78610: LIST
78611: LIST
78612: PUSH
78613: LD_INT 31
78615: PUSH
78616: LD_INT 25
78618: PUSH
78619: EMPTY
78620: LIST
78621: LIST
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PPUSH
78627: CALL_OW 69
78631: ST_TO_ADDR
// end ;
78632: LD_VAR 0 2
78636: RET
// export function Shuffle ( array ) ; var i , index ; begin
78637: LD_INT 0
78639: PPUSH
78640: PPUSH
78641: PPUSH
// result := [ ] ;
78642: LD_ADDR_VAR 0 2
78646: PUSH
78647: EMPTY
78648: ST_TO_ADDR
// if not array then
78649: LD_VAR 0 1
78653: NOT
78654: IFFALSE 78658
// exit ;
78656: GO 78757
// Randomize ;
78658: CALL_OW 10
// for i = array downto 1 do
78662: LD_ADDR_VAR 0 3
78666: PUSH
78667: DOUBLE
78668: LD_VAR 0 1
78672: INC
78673: ST_TO_ADDR
78674: LD_INT 1
78676: PUSH
78677: FOR_DOWNTO
78678: IFFALSE 78755
// begin index := rand ( 1 , array ) ;
78680: LD_ADDR_VAR 0 4
78684: PUSH
78685: LD_INT 1
78687: PPUSH
78688: LD_VAR 0 1
78692: PPUSH
78693: CALL_OW 12
78697: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78698: LD_ADDR_VAR 0 2
78702: PUSH
78703: LD_VAR 0 2
78707: PPUSH
78708: LD_VAR 0 2
78712: PUSH
78713: LD_INT 1
78715: PLUS
78716: PPUSH
78717: LD_VAR 0 1
78721: PUSH
78722: LD_VAR 0 4
78726: ARRAY
78727: PPUSH
78728: CALL_OW 2
78732: ST_TO_ADDR
// array := Delete ( array , index ) ;
78733: LD_ADDR_VAR 0 1
78737: PUSH
78738: LD_VAR 0 1
78742: PPUSH
78743: LD_VAR 0 4
78747: PPUSH
78748: CALL_OW 3
78752: ST_TO_ADDR
// end ;
78753: GO 78677
78755: POP
78756: POP
// end ;
78757: LD_VAR 0 2
78761: RET
// export function GetBaseMaterials ( base ) ; begin
78762: LD_INT 0
78764: PPUSH
// result := [ 0 , 0 , 0 ] ;
78765: LD_ADDR_VAR 0 2
78769: PUSH
78770: LD_INT 0
78772: PUSH
78773: LD_INT 0
78775: PUSH
78776: LD_INT 0
78778: PUSH
78779: EMPTY
78780: LIST
78781: LIST
78782: LIST
78783: ST_TO_ADDR
// if not base then
78784: LD_VAR 0 1
78788: NOT
78789: IFFALSE 78793
// exit ;
78791: GO 78842
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78793: LD_ADDR_VAR 0 2
78797: PUSH
78798: LD_VAR 0 1
78802: PPUSH
78803: LD_INT 1
78805: PPUSH
78806: CALL_OW 275
78810: PUSH
78811: LD_VAR 0 1
78815: PPUSH
78816: LD_INT 2
78818: PPUSH
78819: CALL_OW 275
78823: PUSH
78824: LD_VAR 0 1
78828: PPUSH
78829: LD_INT 3
78831: PPUSH
78832: CALL_OW 275
78836: PUSH
78837: EMPTY
78838: LIST
78839: LIST
78840: LIST
78841: ST_TO_ADDR
// end ;
78842: LD_VAR 0 2
78846: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78847: LD_INT 0
78849: PPUSH
78850: PPUSH
// result := array ;
78851: LD_ADDR_VAR 0 3
78855: PUSH
78856: LD_VAR 0 1
78860: ST_TO_ADDR
// if size >= result then
78861: LD_VAR 0 2
78865: PUSH
78866: LD_VAR 0 3
78870: GREATEREQUAL
78871: IFFALSE 78875
// exit ;
78873: GO 78925
// if size then
78875: LD_VAR 0 2
78879: IFFALSE 78925
// for i := array downto size do
78881: LD_ADDR_VAR 0 4
78885: PUSH
78886: DOUBLE
78887: LD_VAR 0 1
78891: INC
78892: ST_TO_ADDR
78893: LD_VAR 0 2
78897: PUSH
78898: FOR_DOWNTO
78899: IFFALSE 78923
// result := Delete ( result , result ) ;
78901: LD_ADDR_VAR 0 3
78905: PUSH
78906: LD_VAR 0 3
78910: PPUSH
78911: LD_VAR 0 3
78915: PPUSH
78916: CALL_OW 3
78920: ST_TO_ADDR
78921: GO 78898
78923: POP
78924: POP
// end ;
78925: LD_VAR 0 3
78929: RET
// export function ComExit ( unit ) ; var tmp ; begin
78930: LD_INT 0
78932: PPUSH
78933: PPUSH
// if not IsInUnit ( unit ) then
78934: LD_VAR 0 1
78938: PPUSH
78939: CALL_OW 310
78943: NOT
78944: IFFALSE 78948
// exit ;
78946: GO 79008
// tmp := IsInUnit ( unit ) ;
78948: LD_ADDR_VAR 0 3
78952: PUSH
78953: LD_VAR 0 1
78957: PPUSH
78958: CALL_OW 310
78962: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78963: LD_VAR 0 3
78967: PPUSH
78968: CALL_OW 247
78972: PUSH
78973: LD_INT 2
78975: EQUAL
78976: IFFALSE 78989
// ComExitVehicle ( unit ) else
78978: LD_VAR 0 1
78982: PPUSH
78983: CALL_OW 121
78987: GO 78998
// ComExitBuilding ( unit ) ;
78989: LD_VAR 0 1
78993: PPUSH
78994: CALL_OW 122
// result := tmp ;
78998: LD_ADDR_VAR 0 2
79002: PUSH
79003: LD_VAR 0 3
79007: ST_TO_ADDR
// end ;
79008: LD_VAR 0 2
79012: RET
// export function ComExitAll ( units ) ; var i ; begin
79013: LD_INT 0
79015: PPUSH
79016: PPUSH
// if not units then
79017: LD_VAR 0 1
79021: NOT
79022: IFFALSE 79026
// exit ;
79024: GO 79052
// for i in units do
79026: LD_ADDR_VAR 0 3
79030: PUSH
79031: LD_VAR 0 1
79035: PUSH
79036: FOR_IN
79037: IFFALSE 79050
// ComExit ( i ) ;
79039: LD_VAR 0 3
79043: PPUSH
79044: CALL 78930 0 1
79048: GO 79036
79050: POP
79051: POP
// end ;
79052: LD_VAR 0 2
79056: RET
// export function ResetHc ; begin
79057: LD_INT 0
79059: PPUSH
// InitHc ;
79060: CALL_OW 19
// hc_importance := 0 ;
79064: LD_ADDR_OWVAR 32
79068: PUSH
79069: LD_INT 0
79071: ST_TO_ADDR
// end ;
79072: LD_VAR 0 1
79076: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79077: LD_INT 0
79079: PPUSH
79080: PPUSH
79081: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79082: LD_ADDR_VAR 0 6
79086: PUSH
79087: LD_VAR 0 1
79091: PUSH
79092: LD_VAR 0 3
79096: PLUS
79097: PUSH
79098: LD_INT 2
79100: DIV
79101: ST_TO_ADDR
// if _x < 0 then
79102: LD_VAR 0 6
79106: PUSH
79107: LD_INT 0
79109: LESS
79110: IFFALSE 79127
// _x := _x * - 1 ;
79112: LD_ADDR_VAR 0 6
79116: PUSH
79117: LD_VAR 0 6
79121: PUSH
79122: LD_INT 1
79124: NEG
79125: MUL
79126: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79127: LD_ADDR_VAR 0 7
79131: PUSH
79132: LD_VAR 0 2
79136: PUSH
79137: LD_VAR 0 4
79141: PLUS
79142: PUSH
79143: LD_INT 2
79145: DIV
79146: ST_TO_ADDR
// if _y < 0 then
79147: LD_VAR 0 7
79151: PUSH
79152: LD_INT 0
79154: LESS
79155: IFFALSE 79172
// _y := _y * - 1 ;
79157: LD_ADDR_VAR 0 7
79161: PUSH
79162: LD_VAR 0 7
79166: PUSH
79167: LD_INT 1
79169: NEG
79170: MUL
79171: ST_TO_ADDR
// result := [ _x , _y ] ;
79172: LD_ADDR_VAR 0 5
79176: PUSH
79177: LD_VAR 0 6
79181: PUSH
79182: LD_VAR 0 7
79186: PUSH
79187: EMPTY
79188: LIST
79189: LIST
79190: ST_TO_ADDR
// end ;
79191: LD_VAR 0 5
79195: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79196: LD_INT 0
79198: PPUSH
79199: PPUSH
79200: PPUSH
79201: PPUSH
// task := GetTaskList ( unit ) ;
79202: LD_ADDR_VAR 0 7
79206: PUSH
79207: LD_VAR 0 1
79211: PPUSH
79212: CALL_OW 437
79216: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79217: LD_VAR 0 7
79221: NOT
79222: PUSH
79223: LD_VAR 0 1
79227: PPUSH
79228: LD_VAR 0 2
79232: PPUSH
79233: CALL_OW 308
79237: NOT
79238: AND
79239: IFFALSE 79243
// exit ;
79241: GO 79361
// if IsInArea ( unit , area ) then
79243: LD_VAR 0 1
79247: PPUSH
79248: LD_VAR 0 2
79252: PPUSH
79253: CALL_OW 308
79257: IFFALSE 79275
// begin ComMoveToArea ( unit , goAway ) ;
79259: LD_VAR 0 1
79263: PPUSH
79264: LD_VAR 0 3
79268: PPUSH
79269: CALL_OW 113
// exit ;
79273: GO 79361
// end ; if task [ 1 ] [ 1 ] <> M then
79275: LD_VAR 0 7
79279: PUSH
79280: LD_INT 1
79282: ARRAY
79283: PUSH
79284: LD_INT 1
79286: ARRAY
79287: PUSH
79288: LD_STRING M
79290: NONEQUAL
79291: IFFALSE 79295
// exit ;
79293: GO 79361
// x := task [ 1 ] [ 2 ] ;
79295: LD_ADDR_VAR 0 5
79299: PUSH
79300: LD_VAR 0 7
79304: PUSH
79305: LD_INT 1
79307: ARRAY
79308: PUSH
79309: LD_INT 2
79311: ARRAY
79312: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79313: LD_ADDR_VAR 0 6
79317: PUSH
79318: LD_VAR 0 7
79322: PUSH
79323: LD_INT 1
79325: ARRAY
79326: PUSH
79327: LD_INT 3
79329: ARRAY
79330: ST_TO_ADDR
// if InArea ( x , y , area ) then
79331: LD_VAR 0 5
79335: PPUSH
79336: LD_VAR 0 6
79340: PPUSH
79341: LD_VAR 0 2
79345: PPUSH
79346: CALL_OW 309
79350: IFFALSE 79361
// ComStop ( unit ) ;
79352: LD_VAR 0 1
79356: PPUSH
79357: CALL_OW 141
// end ;
79361: LD_VAR 0 4
79365: RET
// export function Abs ( value ) ; begin
79366: LD_INT 0
79368: PPUSH
// result := value ;
79369: LD_ADDR_VAR 0 2
79373: PUSH
79374: LD_VAR 0 1
79378: ST_TO_ADDR
// if value < 0 then
79379: LD_VAR 0 1
79383: PUSH
79384: LD_INT 0
79386: LESS
79387: IFFALSE 79404
// result := value * - 1 ;
79389: LD_ADDR_VAR 0 2
79393: PUSH
79394: LD_VAR 0 1
79398: PUSH
79399: LD_INT 1
79401: NEG
79402: MUL
79403: ST_TO_ADDR
// end ;
79404: LD_VAR 0 2
79408: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79409: LD_INT 0
79411: PPUSH
79412: PPUSH
79413: PPUSH
79414: PPUSH
79415: PPUSH
79416: PPUSH
79417: PPUSH
79418: PPUSH
// if not unit or not building then
79419: LD_VAR 0 1
79423: NOT
79424: PUSH
79425: LD_VAR 0 2
79429: NOT
79430: OR
79431: IFFALSE 79435
// exit ;
79433: GO 79661
// x := GetX ( building ) ;
79435: LD_ADDR_VAR 0 4
79439: PUSH
79440: LD_VAR 0 2
79444: PPUSH
79445: CALL_OW 250
79449: ST_TO_ADDR
// y := GetY ( building ) ;
79450: LD_ADDR_VAR 0 6
79454: PUSH
79455: LD_VAR 0 2
79459: PPUSH
79460: CALL_OW 251
79464: ST_TO_ADDR
// d := GetDir ( building ) ;
79465: LD_ADDR_VAR 0 8
79469: PUSH
79470: LD_VAR 0 2
79474: PPUSH
79475: CALL_OW 254
79479: ST_TO_ADDR
// r := 4 ;
79480: LD_ADDR_VAR 0 9
79484: PUSH
79485: LD_INT 4
79487: ST_TO_ADDR
// for i := 1 to 5 do
79488: LD_ADDR_VAR 0 10
79492: PUSH
79493: DOUBLE
79494: LD_INT 1
79496: DEC
79497: ST_TO_ADDR
79498: LD_INT 5
79500: PUSH
79501: FOR_TO
79502: IFFALSE 79659
// begin _x := ShiftX ( x , d , r + i ) ;
79504: LD_ADDR_VAR 0 5
79508: PUSH
79509: LD_VAR 0 4
79513: PPUSH
79514: LD_VAR 0 8
79518: PPUSH
79519: LD_VAR 0 9
79523: PUSH
79524: LD_VAR 0 10
79528: PLUS
79529: PPUSH
79530: CALL_OW 272
79534: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79535: LD_ADDR_VAR 0 7
79539: PUSH
79540: LD_VAR 0 6
79544: PPUSH
79545: LD_VAR 0 8
79549: PPUSH
79550: LD_VAR 0 9
79554: PUSH
79555: LD_VAR 0 10
79559: PLUS
79560: PPUSH
79561: CALL_OW 273
79565: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79566: LD_VAR 0 5
79570: PPUSH
79571: LD_VAR 0 7
79575: PPUSH
79576: CALL_OW 488
79580: PUSH
79581: LD_VAR 0 5
79585: PPUSH
79586: LD_VAR 0 7
79590: PPUSH
79591: CALL_OW 428
79595: PPUSH
79596: CALL_OW 247
79600: PUSH
79601: LD_INT 3
79603: PUSH
79604: LD_INT 2
79606: PUSH
79607: EMPTY
79608: LIST
79609: LIST
79610: IN
79611: NOT
79612: AND
79613: IFFALSE 79657
// begin ComMoveXY ( unit , _x , _y ) ;
79615: LD_VAR 0 1
79619: PPUSH
79620: LD_VAR 0 5
79624: PPUSH
79625: LD_VAR 0 7
79629: PPUSH
79630: CALL_OW 111
// result := [ _x , _y ] ;
79634: LD_ADDR_VAR 0 3
79638: PUSH
79639: LD_VAR 0 5
79643: PUSH
79644: LD_VAR 0 7
79648: PUSH
79649: EMPTY
79650: LIST
79651: LIST
79652: ST_TO_ADDR
// exit ;
79653: POP
79654: POP
79655: GO 79661
// end ; end ;
79657: GO 79501
79659: POP
79660: POP
// end ;
79661: LD_VAR 0 3
79665: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79666: LD_INT 0
79668: PPUSH
79669: PPUSH
79670: PPUSH
// result := 0 ;
79671: LD_ADDR_VAR 0 3
79675: PUSH
79676: LD_INT 0
79678: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79679: LD_VAR 0 1
79683: PUSH
79684: LD_INT 0
79686: LESS
79687: PUSH
79688: LD_VAR 0 1
79692: PUSH
79693: LD_INT 8
79695: GREATER
79696: OR
79697: PUSH
79698: LD_VAR 0 2
79702: PUSH
79703: LD_INT 0
79705: LESS
79706: OR
79707: PUSH
79708: LD_VAR 0 2
79712: PUSH
79713: LD_INT 8
79715: GREATER
79716: OR
79717: IFFALSE 79721
// exit ;
79719: GO 79796
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79721: LD_ADDR_VAR 0 4
79725: PUSH
79726: LD_INT 22
79728: PUSH
79729: LD_VAR 0 2
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PPUSH
79738: CALL_OW 69
79742: PUSH
79743: FOR_IN
79744: IFFALSE 79794
// begin un := UnitShoot ( i ) ;
79746: LD_ADDR_VAR 0 5
79750: PUSH
79751: LD_VAR 0 4
79755: PPUSH
79756: CALL_OW 504
79760: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79761: LD_VAR 0 5
79765: PPUSH
79766: CALL_OW 255
79770: PUSH
79771: LD_VAR 0 1
79775: EQUAL
79776: IFFALSE 79792
// begin result := un ;
79778: LD_ADDR_VAR 0 3
79782: PUSH
79783: LD_VAR 0 5
79787: ST_TO_ADDR
// exit ;
79788: POP
79789: POP
79790: GO 79796
// end ; end ;
79792: GO 79743
79794: POP
79795: POP
// end ;
79796: LD_VAR 0 3
79800: RET
// export function GetCargoBay ( units ) ; begin
79801: LD_INT 0
79803: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79804: LD_ADDR_VAR 0 2
79808: PUSH
79809: LD_VAR 0 1
79813: PPUSH
79814: LD_INT 2
79816: PUSH
79817: LD_INT 34
79819: PUSH
79820: LD_INT 12
79822: PUSH
79823: EMPTY
79824: LIST
79825: LIST
79826: PUSH
79827: LD_INT 34
79829: PUSH
79830: LD_INT 51
79832: PUSH
79833: EMPTY
79834: LIST
79835: LIST
79836: PUSH
79837: LD_INT 34
79839: PUSH
79840: LD_INT 32
79842: PUSH
79843: EMPTY
79844: LIST
79845: LIST
79846: PUSH
79847: LD_INT 34
79849: PUSH
79850: LD_EXP 50
79854: PUSH
79855: EMPTY
79856: LIST
79857: LIST
79858: PUSH
79859: EMPTY
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: LIST
79865: PPUSH
79866: CALL_OW 72
79870: ST_TO_ADDR
// end ;
79871: LD_VAR 0 2
79875: RET
// export function Negate ( value ) ; begin
79876: LD_INT 0
79878: PPUSH
// result := not value ;
79879: LD_ADDR_VAR 0 2
79883: PUSH
79884: LD_VAR 0 1
79888: NOT
79889: ST_TO_ADDR
// end ;
79890: LD_VAR 0 2
79894: RET
// export function Inc ( value ) ; begin
79895: LD_INT 0
79897: PPUSH
// result := value + 1 ;
79898: LD_ADDR_VAR 0 2
79902: PUSH
79903: LD_VAR 0 1
79907: PUSH
79908: LD_INT 1
79910: PLUS
79911: ST_TO_ADDR
// end ;
79912: LD_VAR 0 2
79916: RET
// export function Dec ( value ) ; begin
79917: LD_INT 0
79919: PPUSH
// result := value - 1 ;
79920: LD_ADDR_VAR 0 2
79924: PUSH
79925: LD_VAR 0 1
79929: PUSH
79930: LD_INT 1
79932: MINUS
79933: ST_TO_ADDR
// end ;
79934: LD_VAR 0 2
79938: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79939: LD_INT 0
79941: PPUSH
79942: PPUSH
79943: PPUSH
79944: PPUSH
79945: PPUSH
79946: PPUSH
79947: PPUSH
79948: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79949: LD_VAR 0 1
79953: PPUSH
79954: LD_VAR 0 2
79958: PPUSH
79959: CALL_OW 488
79963: NOT
79964: PUSH
79965: LD_VAR 0 3
79969: PPUSH
79970: LD_VAR 0 4
79974: PPUSH
79975: CALL_OW 488
79979: NOT
79980: OR
79981: IFFALSE 79994
// begin result := - 1 ;
79983: LD_ADDR_VAR 0 5
79987: PUSH
79988: LD_INT 1
79990: NEG
79991: ST_TO_ADDR
// exit ;
79992: GO 80229
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79994: LD_ADDR_VAR 0 12
79998: PUSH
79999: LD_VAR 0 1
80003: PPUSH
80004: LD_VAR 0 2
80008: PPUSH
80009: LD_VAR 0 3
80013: PPUSH
80014: LD_VAR 0 4
80018: PPUSH
80019: CALL 79077 0 4
80023: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80024: LD_ADDR_VAR 0 11
80028: PUSH
80029: LD_VAR 0 1
80033: PPUSH
80034: LD_VAR 0 2
80038: PPUSH
80039: LD_VAR 0 12
80043: PUSH
80044: LD_INT 1
80046: ARRAY
80047: PPUSH
80048: LD_VAR 0 12
80052: PUSH
80053: LD_INT 2
80055: ARRAY
80056: PPUSH
80057: CALL_OW 298
80061: ST_TO_ADDR
// distance := 9999 ;
80062: LD_ADDR_VAR 0 10
80066: PUSH
80067: LD_INT 9999
80069: ST_TO_ADDR
// for i := 0 to 5 do
80070: LD_ADDR_VAR 0 6
80074: PUSH
80075: DOUBLE
80076: LD_INT 0
80078: DEC
80079: ST_TO_ADDR
80080: LD_INT 5
80082: PUSH
80083: FOR_TO
80084: IFFALSE 80227
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80086: LD_ADDR_VAR 0 7
80090: PUSH
80091: LD_VAR 0 1
80095: PPUSH
80096: LD_VAR 0 6
80100: PPUSH
80101: LD_VAR 0 11
80105: PPUSH
80106: CALL_OW 272
80110: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80111: LD_ADDR_VAR 0 8
80115: PUSH
80116: LD_VAR 0 2
80120: PPUSH
80121: LD_VAR 0 6
80125: PPUSH
80126: LD_VAR 0 11
80130: PPUSH
80131: CALL_OW 273
80135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80136: LD_VAR 0 7
80140: PPUSH
80141: LD_VAR 0 8
80145: PPUSH
80146: CALL_OW 488
80150: NOT
80151: IFFALSE 80155
// continue ;
80153: GO 80083
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80155: LD_ADDR_VAR 0 9
80159: PUSH
80160: LD_VAR 0 12
80164: PUSH
80165: LD_INT 1
80167: ARRAY
80168: PPUSH
80169: LD_VAR 0 12
80173: PUSH
80174: LD_INT 2
80176: ARRAY
80177: PPUSH
80178: LD_VAR 0 7
80182: PPUSH
80183: LD_VAR 0 8
80187: PPUSH
80188: CALL_OW 298
80192: ST_TO_ADDR
// if tmp < distance then
80193: LD_VAR 0 9
80197: PUSH
80198: LD_VAR 0 10
80202: LESS
80203: IFFALSE 80225
// begin result := i ;
80205: LD_ADDR_VAR 0 5
80209: PUSH
80210: LD_VAR 0 6
80214: ST_TO_ADDR
// distance := tmp ;
80215: LD_ADDR_VAR 0 10
80219: PUSH
80220: LD_VAR 0 9
80224: ST_TO_ADDR
// end ; end ;
80225: GO 80083
80227: POP
80228: POP
// end ;
80229: LD_VAR 0 5
80233: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80234: LD_INT 0
80236: PPUSH
80237: PPUSH
// if not driver or not IsInUnit ( driver ) then
80238: LD_VAR 0 1
80242: NOT
80243: PUSH
80244: LD_VAR 0 1
80248: PPUSH
80249: CALL_OW 310
80253: NOT
80254: OR
80255: IFFALSE 80259
// exit ;
80257: GO 80349
// vehicle := IsInUnit ( driver ) ;
80259: LD_ADDR_VAR 0 3
80263: PUSH
80264: LD_VAR 0 1
80268: PPUSH
80269: CALL_OW 310
80273: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80274: LD_VAR 0 1
80278: PPUSH
80279: LD_STRING \
80281: PUSH
80282: LD_INT 0
80284: PUSH
80285: LD_INT 0
80287: PUSH
80288: LD_INT 0
80290: PUSH
80291: LD_INT 0
80293: PUSH
80294: LD_INT 0
80296: PUSH
80297: LD_INT 0
80299: PUSH
80300: EMPTY
80301: LIST
80302: LIST
80303: LIST
80304: LIST
80305: LIST
80306: LIST
80307: LIST
80308: PUSH
80309: LD_STRING E
80311: PUSH
80312: LD_INT 0
80314: PUSH
80315: LD_INT 0
80317: PUSH
80318: LD_VAR 0 3
80322: PUSH
80323: LD_INT 0
80325: PUSH
80326: LD_INT 0
80328: PUSH
80329: LD_INT 0
80331: PUSH
80332: EMPTY
80333: LIST
80334: LIST
80335: LIST
80336: LIST
80337: LIST
80338: LIST
80339: LIST
80340: PUSH
80341: EMPTY
80342: LIST
80343: LIST
80344: PPUSH
80345: CALL_OW 446
// end ;
80349: LD_VAR 0 2
80353: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80354: LD_INT 0
80356: PPUSH
80357: PPUSH
// if not driver or not IsInUnit ( driver ) then
80358: LD_VAR 0 1
80362: NOT
80363: PUSH
80364: LD_VAR 0 1
80368: PPUSH
80369: CALL_OW 310
80373: NOT
80374: OR
80375: IFFALSE 80379
// exit ;
80377: GO 80469
// vehicle := IsInUnit ( driver ) ;
80379: LD_ADDR_VAR 0 3
80383: PUSH
80384: LD_VAR 0 1
80388: PPUSH
80389: CALL_OW 310
80393: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80394: LD_VAR 0 1
80398: PPUSH
80399: LD_STRING \
80401: PUSH
80402: LD_INT 0
80404: PUSH
80405: LD_INT 0
80407: PUSH
80408: LD_INT 0
80410: PUSH
80411: LD_INT 0
80413: PUSH
80414: LD_INT 0
80416: PUSH
80417: LD_INT 0
80419: PUSH
80420: EMPTY
80421: LIST
80422: LIST
80423: LIST
80424: LIST
80425: LIST
80426: LIST
80427: LIST
80428: PUSH
80429: LD_STRING E
80431: PUSH
80432: LD_INT 0
80434: PUSH
80435: LD_INT 0
80437: PUSH
80438: LD_VAR 0 3
80442: PUSH
80443: LD_INT 0
80445: PUSH
80446: LD_INT 0
80448: PUSH
80449: LD_INT 0
80451: PUSH
80452: EMPTY
80453: LIST
80454: LIST
80455: LIST
80456: LIST
80457: LIST
80458: LIST
80459: LIST
80460: PUSH
80461: EMPTY
80462: LIST
80463: LIST
80464: PPUSH
80465: CALL_OW 447
// end ;
80469: LD_VAR 0 2
80473: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80474: LD_INT 0
80476: PPUSH
80477: PPUSH
80478: PPUSH
// tmp := [ ] ;
80479: LD_ADDR_VAR 0 5
80483: PUSH
80484: EMPTY
80485: ST_TO_ADDR
// for i in units do
80486: LD_ADDR_VAR 0 4
80490: PUSH
80491: LD_VAR 0 1
80495: PUSH
80496: FOR_IN
80497: IFFALSE 80535
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80499: LD_ADDR_VAR 0 5
80503: PUSH
80504: LD_VAR 0 5
80508: PPUSH
80509: LD_VAR 0 5
80513: PUSH
80514: LD_INT 1
80516: PLUS
80517: PPUSH
80518: LD_VAR 0 4
80522: PPUSH
80523: CALL_OW 256
80527: PPUSH
80528: CALL_OW 2
80532: ST_TO_ADDR
80533: GO 80496
80535: POP
80536: POP
// if not tmp then
80537: LD_VAR 0 5
80541: NOT
80542: IFFALSE 80546
// exit ;
80544: GO 80594
// if asc then
80546: LD_VAR 0 2
80550: IFFALSE 80574
// result := SortListByListAsc ( units , tmp ) else
80552: LD_ADDR_VAR 0 3
80556: PUSH
80557: LD_VAR 0 1
80561: PPUSH
80562: LD_VAR 0 5
80566: PPUSH
80567: CALL_OW 76
80571: ST_TO_ADDR
80572: GO 80594
// result := SortListByListDesc ( units , tmp ) ;
80574: LD_ADDR_VAR 0 3
80578: PUSH
80579: LD_VAR 0 1
80583: PPUSH
80584: LD_VAR 0 5
80588: PPUSH
80589: CALL_OW 77
80593: ST_TO_ADDR
// end ;
80594: LD_VAR 0 3
80598: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80599: LD_INT 0
80601: PPUSH
80602: PPUSH
// task := GetTaskList ( mech ) ;
80603: LD_ADDR_VAR 0 4
80607: PUSH
80608: LD_VAR 0 1
80612: PPUSH
80613: CALL_OW 437
80617: ST_TO_ADDR
// if not task then
80618: LD_VAR 0 4
80622: NOT
80623: IFFALSE 80627
// exit ;
80625: GO 80669
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80627: LD_ADDR_VAR 0 3
80631: PUSH
80632: LD_VAR 0 4
80636: PUSH
80637: LD_INT 1
80639: ARRAY
80640: PUSH
80641: LD_INT 1
80643: ARRAY
80644: PUSH
80645: LD_STRING r
80647: EQUAL
80648: PUSH
80649: LD_VAR 0 4
80653: PUSH
80654: LD_INT 1
80656: ARRAY
80657: PUSH
80658: LD_INT 4
80660: ARRAY
80661: PUSH
80662: LD_VAR 0 2
80666: EQUAL
80667: AND
80668: ST_TO_ADDR
// end ;
80669: LD_VAR 0 3
80673: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80674: LD_INT 0
80676: PPUSH
// SetDir ( unit , d ) ;
80677: LD_VAR 0 1
80681: PPUSH
80682: LD_VAR 0 4
80686: PPUSH
80687: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80691: LD_VAR 0 1
80695: PPUSH
80696: LD_VAR 0 2
80700: PPUSH
80701: LD_VAR 0 3
80705: PPUSH
80706: LD_VAR 0 5
80710: PPUSH
80711: CALL_OW 48
// end ;
80715: LD_VAR 0 6
80719: RET
// export function ToNaturalNumber ( number ) ; begin
80720: LD_INT 0
80722: PPUSH
// result := number div 1 ;
80723: LD_ADDR_VAR 0 2
80727: PUSH
80728: LD_VAR 0 1
80732: PUSH
80733: LD_INT 1
80735: DIV
80736: ST_TO_ADDR
// if number < 0 then
80737: LD_VAR 0 1
80741: PUSH
80742: LD_INT 0
80744: LESS
80745: IFFALSE 80755
// result := 0 ;
80747: LD_ADDR_VAR 0 2
80751: PUSH
80752: LD_INT 0
80754: ST_TO_ADDR
// end ;
80755: LD_VAR 0 2
80759: RET
// export function SortByClass ( units , class ) ; var un ; begin
80760: LD_INT 0
80762: PPUSH
80763: PPUSH
// if not units or not class then
80764: LD_VAR 0 1
80768: NOT
80769: PUSH
80770: LD_VAR 0 2
80774: NOT
80775: OR
80776: IFFALSE 80780
// exit ;
80778: GO 80875
// result := [ ] ;
80780: LD_ADDR_VAR 0 3
80784: PUSH
80785: EMPTY
80786: ST_TO_ADDR
// for un in units do
80787: LD_ADDR_VAR 0 4
80791: PUSH
80792: LD_VAR 0 1
80796: PUSH
80797: FOR_IN
80798: IFFALSE 80873
// if GetClass ( un ) = class then
80800: LD_VAR 0 4
80804: PPUSH
80805: CALL_OW 257
80809: PUSH
80810: LD_VAR 0 2
80814: EQUAL
80815: IFFALSE 80842
// result := Insert ( result , 1 , un ) else
80817: LD_ADDR_VAR 0 3
80821: PUSH
80822: LD_VAR 0 3
80826: PPUSH
80827: LD_INT 1
80829: PPUSH
80830: LD_VAR 0 4
80834: PPUSH
80835: CALL_OW 2
80839: ST_TO_ADDR
80840: GO 80871
// result := Replace ( result , result + 1 , un ) ;
80842: LD_ADDR_VAR 0 3
80846: PUSH
80847: LD_VAR 0 3
80851: PPUSH
80852: LD_VAR 0 3
80856: PUSH
80857: LD_INT 1
80859: PLUS
80860: PPUSH
80861: LD_VAR 0 4
80865: PPUSH
80866: CALL_OW 1
80870: ST_TO_ADDR
80871: GO 80797
80873: POP
80874: POP
// end ;
80875: LD_VAR 0 3
80879: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80880: LD_INT 0
80882: PPUSH
80883: PPUSH
80884: PPUSH
80885: PPUSH
80886: PPUSH
80887: PPUSH
80888: PPUSH
// result := [ ] ;
80889: LD_ADDR_VAR 0 4
80893: PUSH
80894: EMPTY
80895: ST_TO_ADDR
// if x - r < 0 then
80896: LD_VAR 0 1
80900: PUSH
80901: LD_VAR 0 3
80905: MINUS
80906: PUSH
80907: LD_INT 0
80909: LESS
80910: IFFALSE 80922
// min_x := 0 else
80912: LD_ADDR_VAR 0 8
80916: PUSH
80917: LD_INT 0
80919: ST_TO_ADDR
80920: GO 80938
// min_x := x - r ;
80922: LD_ADDR_VAR 0 8
80926: PUSH
80927: LD_VAR 0 1
80931: PUSH
80932: LD_VAR 0 3
80936: MINUS
80937: ST_TO_ADDR
// if y - r < 0 then
80938: LD_VAR 0 2
80942: PUSH
80943: LD_VAR 0 3
80947: MINUS
80948: PUSH
80949: LD_INT 0
80951: LESS
80952: IFFALSE 80964
// min_y := 0 else
80954: LD_ADDR_VAR 0 7
80958: PUSH
80959: LD_INT 0
80961: ST_TO_ADDR
80962: GO 80980
// min_y := y - r ;
80964: LD_ADDR_VAR 0 7
80968: PUSH
80969: LD_VAR 0 2
80973: PUSH
80974: LD_VAR 0 3
80978: MINUS
80979: ST_TO_ADDR
// max_x := x + r ;
80980: LD_ADDR_VAR 0 9
80984: PUSH
80985: LD_VAR 0 1
80989: PUSH
80990: LD_VAR 0 3
80994: PLUS
80995: ST_TO_ADDR
// max_y := y + r ;
80996: LD_ADDR_VAR 0 10
81000: PUSH
81001: LD_VAR 0 2
81005: PUSH
81006: LD_VAR 0 3
81010: PLUS
81011: ST_TO_ADDR
// for _x = min_x to max_x do
81012: LD_ADDR_VAR 0 5
81016: PUSH
81017: DOUBLE
81018: LD_VAR 0 8
81022: DEC
81023: ST_TO_ADDR
81024: LD_VAR 0 9
81028: PUSH
81029: FOR_TO
81030: IFFALSE 81131
// for _y = min_y to max_y do
81032: LD_ADDR_VAR 0 6
81036: PUSH
81037: DOUBLE
81038: LD_VAR 0 7
81042: DEC
81043: ST_TO_ADDR
81044: LD_VAR 0 10
81048: PUSH
81049: FOR_TO
81050: IFFALSE 81127
// begin if not ValidHex ( _x , _y ) then
81052: LD_VAR 0 5
81056: PPUSH
81057: LD_VAR 0 6
81061: PPUSH
81062: CALL_OW 488
81066: NOT
81067: IFFALSE 81071
// continue ;
81069: GO 81049
// if GetResourceTypeXY ( _x , _y ) then
81071: LD_VAR 0 5
81075: PPUSH
81076: LD_VAR 0 6
81080: PPUSH
81081: CALL_OW 283
81085: IFFALSE 81125
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81087: LD_ADDR_VAR 0 4
81091: PUSH
81092: LD_VAR 0 4
81096: PPUSH
81097: LD_VAR 0 4
81101: PUSH
81102: LD_INT 1
81104: PLUS
81105: PPUSH
81106: LD_VAR 0 5
81110: PUSH
81111: LD_VAR 0 6
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: PPUSH
81120: CALL_OW 1
81124: ST_TO_ADDR
// end ;
81125: GO 81049
81127: POP
81128: POP
81129: GO 81029
81131: POP
81132: POP
// end ;
81133: LD_VAR 0 4
81137: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81138: LD_INT 0
81140: PPUSH
81141: PPUSH
81142: PPUSH
81143: PPUSH
81144: PPUSH
81145: PPUSH
81146: PPUSH
81147: PPUSH
// if not units then
81148: LD_VAR 0 1
81152: NOT
81153: IFFALSE 81157
// exit ;
81155: GO 81683
// result := UnitFilter ( units , [ f_ok ] ) ;
81157: LD_ADDR_VAR 0 3
81161: PUSH
81162: LD_VAR 0 1
81166: PPUSH
81167: LD_INT 50
81169: PUSH
81170: EMPTY
81171: LIST
81172: PPUSH
81173: CALL_OW 72
81177: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81178: LD_ADDR_VAR 0 8
81182: PUSH
81183: LD_VAR 0 1
81187: PUSH
81188: LD_INT 1
81190: ARRAY
81191: PPUSH
81192: CALL_OW 255
81196: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81197: LD_ADDR_VAR 0 10
81201: PUSH
81202: LD_INT 29
81204: PUSH
81205: LD_EXP 53
81209: PUSH
81210: LD_INT 49
81212: PUSH
81213: EMPTY
81214: LIST
81215: LIST
81216: LIST
81217: ST_TO_ADDR
// if not result then
81218: LD_VAR 0 3
81222: NOT
81223: IFFALSE 81227
// exit ;
81225: GO 81683
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81227: LD_ADDR_VAR 0 5
81231: PUSH
81232: LD_INT 81
81234: PUSH
81235: LD_VAR 0 8
81239: PUSH
81240: EMPTY
81241: LIST
81242: LIST
81243: PPUSH
81244: CALL_OW 69
81248: ST_TO_ADDR
// for i in result do
81249: LD_ADDR_VAR 0 4
81253: PUSH
81254: LD_VAR 0 3
81258: PUSH
81259: FOR_IN
81260: IFFALSE 81681
// begin tag := GetTag ( i ) + 1 ;
81262: LD_ADDR_VAR 0 9
81266: PUSH
81267: LD_VAR 0 4
81271: PPUSH
81272: CALL_OW 110
81276: PUSH
81277: LD_INT 1
81279: PLUS
81280: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81281: LD_ADDR_VAR 0 7
81285: PUSH
81286: LD_VAR 0 4
81290: PPUSH
81291: CALL_OW 250
81295: PPUSH
81296: LD_VAR 0 4
81300: PPUSH
81301: CALL_OW 251
81305: PPUSH
81306: LD_INT 6
81308: PPUSH
81309: CALL 80880 0 3
81313: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81314: LD_VAR 0 4
81318: PPUSH
81319: CALL_OW 247
81323: PUSH
81324: LD_INT 2
81326: EQUAL
81327: PUSH
81328: LD_VAR 0 7
81332: AND
81333: PUSH
81334: LD_VAR 0 4
81338: PPUSH
81339: CALL_OW 264
81343: PUSH
81344: LD_VAR 0 10
81348: IN
81349: NOT
81350: AND
81351: IFFALSE 81390
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81353: LD_VAR 0 4
81357: PPUSH
81358: LD_VAR 0 7
81362: PUSH
81363: LD_INT 1
81365: ARRAY
81366: PUSH
81367: LD_INT 1
81369: ARRAY
81370: PPUSH
81371: LD_VAR 0 7
81375: PUSH
81376: LD_INT 1
81378: ARRAY
81379: PUSH
81380: LD_INT 2
81382: ARRAY
81383: PPUSH
81384: CALL_OW 116
81388: GO 81679
// if path > tag then
81390: LD_VAR 0 2
81394: PUSH
81395: LD_VAR 0 9
81399: GREATER
81400: IFFALSE 81608
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81402: LD_ADDR_VAR 0 6
81406: PUSH
81407: LD_VAR 0 5
81411: PPUSH
81412: LD_INT 91
81414: PUSH
81415: LD_VAR 0 4
81419: PUSH
81420: LD_INT 8
81422: PUSH
81423: EMPTY
81424: LIST
81425: LIST
81426: LIST
81427: PPUSH
81428: CALL_OW 72
81432: ST_TO_ADDR
// if nearEnemy then
81433: LD_VAR 0 6
81437: IFFALSE 81506
// begin if GetWeapon ( i ) = ru_time_lapser then
81439: LD_VAR 0 4
81443: PPUSH
81444: CALL_OW 264
81448: PUSH
81449: LD_INT 49
81451: EQUAL
81452: IFFALSE 81480
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81454: LD_VAR 0 4
81458: PPUSH
81459: LD_VAR 0 6
81463: PPUSH
81464: LD_VAR 0 4
81468: PPUSH
81469: CALL_OW 74
81473: PPUSH
81474: CALL_OW 112
81478: GO 81504
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81480: LD_VAR 0 4
81484: PPUSH
81485: LD_VAR 0 6
81489: PPUSH
81490: LD_VAR 0 4
81494: PPUSH
81495: CALL_OW 74
81499: PPUSH
81500: CALL_OW 115
// end else
81504: GO 81606
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81506: LD_VAR 0 4
81510: PPUSH
81511: LD_VAR 0 2
81515: PUSH
81516: LD_VAR 0 9
81520: ARRAY
81521: PUSH
81522: LD_INT 1
81524: ARRAY
81525: PPUSH
81526: LD_VAR 0 2
81530: PUSH
81531: LD_VAR 0 9
81535: ARRAY
81536: PUSH
81537: LD_INT 2
81539: ARRAY
81540: PPUSH
81541: CALL_OW 297
81545: PUSH
81546: LD_INT 6
81548: GREATER
81549: IFFALSE 81592
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81551: LD_VAR 0 4
81555: PPUSH
81556: LD_VAR 0 2
81560: PUSH
81561: LD_VAR 0 9
81565: ARRAY
81566: PUSH
81567: LD_INT 1
81569: ARRAY
81570: PPUSH
81571: LD_VAR 0 2
81575: PUSH
81576: LD_VAR 0 9
81580: ARRAY
81581: PUSH
81582: LD_INT 2
81584: ARRAY
81585: PPUSH
81586: CALL_OW 114
81590: GO 81606
// SetTag ( i , tag ) ;
81592: LD_VAR 0 4
81596: PPUSH
81597: LD_VAR 0 9
81601: PPUSH
81602: CALL_OW 109
// end else
81606: GO 81679
// if enemy then
81608: LD_VAR 0 5
81612: IFFALSE 81679
// begin if GetWeapon ( i ) = ru_time_lapser then
81614: LD_VAR 0 4
81618: PPUSH
81619: CALL_OW 264
81623: PUSH
81624: LD_INT 49
81626: EQUAL
81627: IFFALSE 81655
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81629: LD_VAR 0 4
81633: PPUSH
81634: LD_VAR 0 5
81638: PPUSH
81639: LD_VAR 0 4
81643: PPUSH
81644: CALL_OW 74
81648: PPUSH
81649: CALL_OW 112
81653: GO 81679
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81655: LD_VAR 0 4
81659: PPUSH
81660: LD_VAR 0 5
81664: PPUSH
81665: LD_VAR 0 4
81669: PPUSH
81670: CALL_OW 74
81674: PPUSH
81675: CALL_OW 115
// end ; end ;
81679: GO 81259
81681: POP
81682: POP
// end ;
81683: LD_VAR 0 3
81687: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81688: LD_INT 0
81690: PPUSH
81691: PPUSH
81692: PPUSH
// if not unit or IsInUnit ( unit ) then
81693: LD_VAR 0 1
81697: NOT
81698: PUSH
81699: LD_VAR 0 1
81703: PPUSH
81704: CALL_OW 310
81708: OR
81709: IFFALSE 81713
// exit ;
81711: GO 81804
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81713: LD_ADDR_VAR 0 4
81717: PUSH
81718: LD_VAR 0 1
81722: PPUSH
81723: CALL_OW 250
81727: PPUSH
81728: LD_VAR 0 2
81732: PPUSH
81733: LD_INT 1
81735: PPUSH
81736: CALL_OW 272
81740: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81741: LD_ADDR_VAR 0 5
81745: PUSH
81746: LD_VAR 0 1
81750: PPUSH
81751: CALL_OW 251
81755: PPUSH
81756: LD_VAR 0 2
81760: PPUSH
81761: LD_INT 1
81763: PPUSH
81764: CALL_OW 273
81768: ST_TO_ADDR
// if ValidHex ( x , y ) then
81769: LD_VAR 0 4
81773: PPUSH
81774: LD_VAR 0 5
81778: PPUSH
81779: CALL_OW 488
81783: IFFALSE 81804
// ComTurnXY ( unit , x , y ) ;
81785: LD_VAR 0 1
81789: PPUSH
81790: LD_VAR 0 4
81794: PPUSH
81795: LD_VAR 0 5
81799: PPUSH
81800: CALL_OW 118
// end ;
81804: LD_VAR 0 3
81808: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81809: LD_INT 0
81811: PPUSH
81812: PPUSH
// result := false ;
81813: LD_ADDR_VAR 0 3
81817: PUSH
81818: LD_INT 0
81820: ST_TO_ADDR
// if not units then
81821: LD_VAR 0 2
81825: NOT
81826: IFFALSE 81830
// exit ;
81828: GO 81875
// for i in units do
81830: LD_ADDR_VAR 0 4
81834: PUSH
81835: LD_VAR 0 2
81839: PUSH
81840: FOR_IN
81841: IFFALSE 81873
// if See ( side , i ) then
81843: LD_VAR 0 1
81847: PPUSH
81848: LD_VAR 0 4
81852: PPUSH
81853: CALL_OW 292
81857: IFFALSE 81871
// begin result := true ;
81859: LD_ADDR_VAR 0 3
81863: PUSH
81864: LD_INT 1
81866: ST_TO_ADDR
// exit ;
81867: POP
81868: POP
81869: GO 81875
// end ;
81871: GO 81840
81873: POP
81874: POP
// end ;
81875: LD_VAR 0 3
81879: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81880: LD_INT 0
81882: PPUSH
81883: PPUSH
81884: PPUSH
81885: PPUSH
// if not unit or not points then
81886: LD_VAR 0 1
81890: NOT
81891: PUSH
81892: LD_VAR 0 2
81896: NOT
81897: OR
81898: IFFALSE 81902
// exit ;
81900: GO 81992
// dist := 99999 ;
81902: LD_ADDR_VAR 0 5
81906: PUSH
81907: LD_INT 99999
81909: ST_TO_ADDR
// for i in points do
81910: LD_ADDR_VAR 0 4
81914: PUSH
81915: LD_VAR 0 2
81919: PUSH
81920: FOR_IN
81921: IFFALSE 81990
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81923: LD_ADDR_VAR 0 6
81927: PUSH
81928: LD_VAR 0 1
81932: PPUSH
81933: LD_VAR 0 4
81937: PUSH
81938: LD_INT 1
81940: ARRAY
81941: PPUSH
81942: LD_VAR 0 4
81946: PUSH
81947: LD_INT 2
81949: ARRAY
81950: PPUSH
81951: CALL_OW 297
81955: ST_TO_ADDR
// if tmpDist < dist then
81956: LD_VAR 0 6
81960: PUSH
81961: LD_VAR 0 5
81965: LESS
81966: IFFALSE 81988
// begin result := i ;
81968: LD_ADDR_VAR 0 3
81972: PUSH
81973: LD_VAR 0 4
81977: ST_TO_ADDR
// dist := tmpDist ;
81978: LD_ADDR_VAR 0 5
81982: PUSH
81983: LD_VAR 0 6
81987: ST_TO_ADDR
// end ; end ;
81988: GO 81920
81990: POP
81991: POP
// end ;
81992: LD_VAR 0 3
81996: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81997: LD_INT 0
81999: PPUSH
// uc_side := side ;
82000: LD_ADDR_OWVAR 20
82004: PUSH
82005: LD_VAR 0 1
82009: ST_TO_ADDR
// uc_nation := 3 ;
82010: LD_ADDR_OWVAR 21
82014: PUSH
82015: LD_INT 3
82017: ST_TO_ADDR
// vc_chassis := 25 ;
82018: LD_ADDR_OWVAR 37
82022: PUSH
82023: LD_INT 25
82025: ST_TO_ADDR
// vc_engine := engine_siberite ;
82026: LD_ADDR_OWVAR 39
82030: PUSH
82031: LD_INT 3
82033: ST_TO_ADDR
// vc_control := control_computer ;
82034: LD_ADDR_OWVAR 38
82038: PUSH
82039: LD_INT 3
82041: ST_TO_ADDR
// vc_weapon := 59 ;
82042: LD_ADDR_OWVAR 40
82046: PUSH
82047: LD_INT 59
82049: ST_TO_ADDR
// result := CreateVehicle ;
82050: LD_ADDR_VAR 0 5
82054: PUSH
82055: CALL_OW 45
82059: ST_TO_ADDR
// SetDir ( result , d ) ;
82060: LD_VAR 0 5
82064: PPUSH
82065: LD_VAR 0 4
82069: PPUSH
82070: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82074: LD_VAR 0 5
82078: PPUSH
82079: LD_VAR 0 2
82083: PPUSH
82084: LD_VAR 0 3
82088: PPUSH
82089: LD_INT 0
82091: PPUSH
82092: CALL_OW 48
// end ;
82096: LD_VAR 0 5
82100: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82101: LD_INT 0
82103: PPUSH
82104: PPUSH
82105: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82106: LD_ADDR_VAR 0 2
82110: PUSH
82111: LD_INT 0
82113: PUSH
82114: LD_INT 0
82116: PUSH
82117: LD_INT 0
82119: PUSH
82120: LD_INT 0
82122: PUSH
82123: EMPTY
82124: LIST
82125: LIST
82126: LIST
82127: LIST
82128: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82129: LD_VAR 0 1
82133: NOT
82134: PUSH
82135: LD_VAR 0 1
82139: PPUSH
82140: CALL_OW 264
82144: PUSH
82145: LD_INT 12
82147: PUSH
82148: LD_INT 51
82150: PUSH
82151: LD_INT 32
82153: PUSH
82154: LD_EXP 50
82158: PUSH
82159: EMPTY
82160: LIST
82161: LIST
82162: LIST
82163: LIST
82164: IN
82165: NOT
82166: OR
82167: IFFALSE 82171
// exit ;
82169: GO 82269
// for i := 1 to 3 do
82171: LD_ADDR_VAR 0 3
82175: PUSH
82176: DOUBLE
82177: LD_INT 1
82179: DEC
82180: ST_TO_ADDR
82181: LD_INT 3
82183: PUSH
82184: FOR_TO
82185: IFFALSE 82267
// begin tmp := GetCargo ( cargo , i ) ;
82187: LD_ADDR_VAR 0 4
82191: PUSH
82192: LD_VAR 0 1
82196: PPUSH
82197: LD_VAR 0 3
82201: PPUSH
82202: CALL_OW 289
82206: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82207: LD_ADDR_VAR 0 2
82211: PUSH
82212: LD_VAR 0 2
82216: PPUSH
82217: LD_VAR 0 3
82221: PPUSH
82222: LD_VAR 0 4
82226: PPUSH
82227: CALL_OW 1
82231: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82232: LD_ADDR_VAR 0 2
82236: PUSH
82237: LD_VAR 0 2
82241: PPUSH
82242: LD_INT 4
82244: PPUSH
82245: LD_VAR 0 2
82249: PUSH
82250: LD_INT 4
82252: ARRAY
82253: PUSH
82254: LD_VAR 0 4
82258: PLUS
82259: PPUSH
82260: CALL_OW 1
82264: ST_TO_ADDR
// end ;
82265: GO 82184
82267: POP
82268: POP
// end ;
82269: LD_VAR 0 2
82273: RET
// export function Length ( array ) ; begin
82274: LD_INT 0
82276: PPUSH
// result := array + 0 ;
82277: LD_ADDR_VAR 0 2
82281: PUSH
82282: LD_VAR 0 1
82286: PUSH
82287: LD_INT 0
82289: PLUS
82290: ST_TO_ADDR
// end ;
82291: LD_VAR 0 2
82295: RET
// export function PrepareArray ( array ) ; begin
82296: LD_INT 0
82298: PPUSH
// result := array diff 0 ;
82299: LD_ADDR_VAR 0 2
82303: PUSH
82304: LD_VAR 0 1
82308: PUSH
82309: LD_INT 0
82311: DIFF
82312: ST_TO_ADDR
// if not result [ 1 ] then
82313: LD_VAR 0 2
82317: PUSH
82318: LD_INT 1
82320: ARRAY
82321: NOT
82322: IFFALSE 82342
// result := Delete ( result , 1 ) ;
82324: LD_ADDR_VAR 0 2
82328: PUSH
82329: LD_VAR 0 2
82333: PPUSH
82334: LD_INT 1
82336: PPUSH
82337: CALL_OW 3
82341: ST_TO_ADDR
// end ; end_of_file
82342: LD_VAR 0 2
82346: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82347: LD_VAR 0 1
82351: PUSH
82352: LD_INT 200
82354: DOUBLE
82355: GREATEREQUAL
82356: IFFALSE 82364
82358: LD_INT 299
82360: DOUBLE
82361: LESSEQUAL
82362: IFTRUE 82366
82364: GO 82398
82366: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82367: LD_VAR 0 1
82371: PPUSH
82372: LD_VAR 0 2
82376: PPUSH
82377: LD_VAR 0 3
82381: PPUSH
82382: LD_VAR 0 4
82386: PPUSH
82387: LD_VAR 0 5
82391: PPUSH
82392: CALL 37198 0 5
82396: GO 82475
82398: LD_INT 300
82400: DOUBLE
82401: GREATEREQUAL
82402: IFFALSE 82410
82404: LD_INT 399
82406: DOUBLE
82407: LESSEQUAL
82408: IFTRUE 82412
82410: GO 82474
82412: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82413: LD_VAR 0 1
82417: PPUSH
82418: LD_VAR 0 2
82422: PPUSH
82423: LD_VAR 0 3
82427: PPUSH
82428: LD_VAR 0 4
82432: PPUSH
82433: LD_VAR 0 5
82437: PPUSH
82438: LD_VAR 0 6
82442: PPUSH
82443: LD_VAR 0 7
82447: PPUSH
82448: LD_VAR 0 8
82452: PPUSH
82453: LD_VAR 0 9
82457: PPUSH
82458: LD_VAR 0 10
82462: PPUSH
82463: LD_VAR 0 11
82467: PPUSH
82468: CALL 33527 0 11
82472: GO 82475
82474: POP
// end ;
82475: PPOPN 11
82477: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82478: LD_VAR 0 1
82482: PPUSH
82483: LD_VAR 0 2
82487: PPUSH
82488: LD_VAR 0 3
82492: PPUSH
82493: LD_VAR 0 4
82497: PPUSH
82498: LD_VAR 0 5
82502: PPUSH
82503: CALL 36934 0 5
// end ; end_of_file
82507: PPOPN 5
82509: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82510: LD_VAR 0 1
82514: PPUSH
82515: LD_VAR 0 2
82519: PPUSH
82520: LD_VAR 0 3
82524: PPUSH
82525: LD_VAR 0 4
82529: PPUSH
82530: LD_VAR 0 5
82534: PPUSH
82535: LD_VAR 0 6
82539: PPUSH
82540: CALL 21220 0 6
// end ;
82544: PPOPN 6
82546: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82547: LD_INT 0
82549: PPUSH
// begin if not units then
82550: LD_VAR 0 1
82554: NOT
82555: IFFALSE 82559
// exit ;
82557: GO 82559
// end ;
82559: PPOPN 7
82561: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82562: CALL 21191 0 0
// end ;
82566: PPOPN 1
82568: END
