// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export arrivals , killCounter , ruMechCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 86 0 0
// if debugMode then
  19: LD_EXP 41
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// SetBName ( rudepo , sverdlov ) ;
  33: LD_INT 2
  35: PPUSH
  36: LD_STRING sverdlov
  38: PPUSH
  39: CALL_OW 500
// ChangeSideFog ( 4 , 1 ) ;
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 1
  48: PPUSH
  49: CALL_OW 343
// PrepareDifficulty ;
  53: CALL 7195 0 0
// CreateNature ;
  57: CALL 19540 0 0
// PrepareRussian ;
  61: CALL 5702 0 0
// PrepareVehicles ;
  65: CALL 1572 0 0
// PrepareHeroes ;
  69: CALL 579 0 0
// PrepareOthers ;
  73: CALL 1981 0 0
// PreparePlayerApemans ;
  77: CALL 2119 0 0
// Action ;
  81: CALL 9834 0 0
// end ;
  85: END
// function Init ; begin
  86: LD_INT 0
  88: PPUSH
// debugMode = 0 ;
  89: LD_ADDR_EXP 41
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// mission_prefix := 06c_ ;
  97: LD_ADDR_EXP 42
 101: PUSH
 102: LD_STRING 06c_
 104: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
 105: LD_ADDR_EXP 43
 109: PUSH
 110: LD_STRING 06_
 112: ST_TO_ADDR
// contactWithRussian = 0 ;
 113: LD_ADDR_EXP 22
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// firstTower = 0 ;
 121: LD_ADDR_EXP 23
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// resources = [ ] ;
 129: LD_ADDR_EXP 39
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// firstCrateSpawn := false ;
 136: LD_ADDR_EXP 40
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// blockSpawn = 0 ;
 144: LD_ADDR_EXP 29
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// kurtStatus = 0 ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// readyToEscape = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// joanStatus = 0 ;
 168: LD_ADDR_EXP 16
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// killCounter := 0 ;
 176: LD_ADDR_EXP 45
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// cratesStatus = 2 ;
 184: LD_ADDR_EXP 38
 188: PUSH
 189: LD_INT 2
 191: ST_TO_ADDR
// timerStatus = 1 ;
 192: LD_ADDR_EXP 24
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 , 700 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 25
 204: PUSH
 205: LD_INT 350
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 700
 213: PUSH
 214: LD_INT 700
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 229: LD_ADDR_EXP 26
 233: PUSH
 234: LD_INT 105000
 236: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 237: LD_ADDR_EXP 28
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// ruMechCounter := [ 3 , 4 , 6 , 8 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 4
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 8
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// tamedApemans = 0 ;
 274: LD_ADDR_EXP 32
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// arrivals := [ ] ;
 282: LD_ADDR_EXP 44
 286: PUSH
 287: EMPTY
 288: ST_TO_ADDR
// unitLost = 0 ;
 289: LD_ADDR_EXP 30
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 297: LD_ADDR_EXP 31
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// russianTanks = [ ] ;
 304: LD_ADDR_EXP 36
 308: PUSH
 309: EMPTY
 310: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 311: LD_ADDR_EXP 37
 315: PUSH
 316: EMPTY
 317: ST_TO_ADDR
// disableHealAI = 0 ;
 318: LD_ADDR_EXP 33
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// strings = [ ] ;
 326: LD_ADDR_EXP 27
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ;
 333: LD_VAR 0 1
 337: RET
// every 0 0$1 trigger debugMode do var i , j ;
 338: LD_EXP 41
 342: IFFALSE 531
 344: GO 346
 346: DISABLE
 347: LD_INT 0
 349: PPUSH
 350: PPUSH
// begin enable ;
 351: ENABLE
// FogOff ( true ) ;
 352: LD_INT 1
 354: PPUSH
 355: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 21
 376: PUSH
 377: LD_INT 1
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 410
// SetLives ( i , 1000 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: LD_INT 1000
 403: PPUSH
 404: CALL_OW 234
 408: GO 393
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 30
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: PUSH
 446: FOR_IN
 447: IFFALSE 493
// for j := 1 to 2 do
 449: LD_ADDR_VAR 0 2
 453: PUSH
 454: DOUBLE
 455: LD_INT 1
 457: DEC
 458: ST_TO_ADDR
 459: LD_INT 2
 461: PUSH
 462: FOR_TO
 463: IFFALSE 489
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_VAR 0 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 462
 489: POP
 490: POP
 491: GO 446
 493: POP
 494: POP
// if IsSelected ( rudepo ) then
 495: LD_INT 2
 497: PPUSH
 498: CALL_OW 306
 502: IFFALSE 512
// your_side = 3 ;
 504: LD_ADDR_OWVAR 2
 508: PUSH
 509: LD_INT 3
 511: ST_TO_ADDR
// if IsSelected ( JMM ) then
 512: LD_EXP 1
 516: PPUSH
 517: CALL_OW 306
 521: IFFALSE 531
// your_side = 1 ;
 523: LD_ADDR_OWVAR 2
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// end ;
 531: PPOPN 2
 533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) >= 3 do
 534: LD_INT 22
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 34
 546: PUSH
 547: LD_INT 12
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PPUSH
 558: CALL_OW 69
 562: PUSH
 563: LD_INT 3
 565: GREATEREQUAL
 566: IFFALSE 578
 568: GO 570
 570: DISABLE
// SetAchievement ( ACH_FULLCARGO ) ; end_of_file
 571: LD_STRING ACH_FULLCARGO
 573: PPUSH
 574: CALL_OW 543
 578: END
// export function PrepareHeroes ; var veh ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// uc_side := 1 ;
 583: LD_ADDR_OWVAR 20
 587: PUSH
 588: LD_INT 1
 590: ST_TO_ADDR
// uc_nation := 1 ;
 591: LD_ADDR_OWVAR 21
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING JMM
 606: PPUSH
 607: LD_EXP 41
 611: NOT
 612: PPUSH
 613: LD_EXP 43
 617: PPUSH
 618: CALL 37411 0 3
 622: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 623: LD_ADDR_EXP 14
 627: PUSH
 628: LD_STRING Harisson
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: LD_STRING 
 636: PPUSH
 637: CALL 37411 0 3
 641: ST_TO_ADDR
// DeltaDoctor := CreateCharacter ( DeltaDoctor ) ;
 642: LD_ADDR_EXP 10
 646: PUSH
 647: LD_STRING DeltaDoctor
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: LD_INT 22
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: LD_INT 58
 682: PUSH
 683: EMPTY
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: PPUSH
 691: CALL_OW 69
 695: ST_TO_ADDR
// if veh then
 696: LD_VAR 0 2
 700: IFFALSE 722
// PlaceHumanInUnit ( JMM , veh [ 1 ] ) else
 702: LD_EXP 1
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 52
 720: GO 737
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: CALL_OW 49
// if LoadVariable ( LisaIn06 , debugMode ) then
 737: LD_STRING LisaIn06
 739: PPUSH
 740: LD_EXP 41
 744: PPUSH
 745: CALL_OW 30
 749: IFFALSE 857
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: LD_INT 22
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 58
 778: PUSH
 779: EMPTY
 780: LIST
 781: PUSH
 782: EMPTY
 783: LIST
 784: LIST
 785: LIST
 786: PPUSH
 787: CALL_OW 69
 791: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 792: LD_ADDR_EXP 2
 796: PUSH
 797: LD_STRING Lisa
 799: PPUSH
 800: LD_EXP 41
 804: NOT
 805: PPUSH
 806: LD_EXP 43
 810: PPUSH
 811: CALL 37411 0 3
 815: ST_TO_ADDR
// if veh then
 816: LD_VAR 0 2
 820: IFFALSE 842
// PlaceHumanInUnit ( Lisa , veh [ 1 ] ) else
 822: LD_EXP 2
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 52
 840: GO 857
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 842: LD_EXP 2
 846: PPUSH
 847: LD_INT 2
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: CALL_OW 49
// end ; if LoadVariable ( BobbyIn06 , 0 ) then
 857: LD_STRING BobbyIn06
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 30
 867: IFFALSE 972
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 869: LD_ADDR_VAR 0 2
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_INT 21
 886: PUSH
 887: LD_INT 2
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 3
 914: PUSH
 915: LD_STRING Bobby
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 43
 925: PPUSH
 926: CALL 37411 0 3
 930: ST_TO_ADDR
// if veh then
 931: LD_VAR 0 2
 935: IFFALSE 957
// PlaceHumanInUnit ( Bobby , veh [ 1 ] ) else
 937: LD_EXP 3
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: CALL_OW 52
 955: GO 972
// PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ; if LoadVariable ( CyrusIn06 , 0 ) then
 972: LD_STRING CyrusIn06
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: IFFALSE 1087
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 984: LD_ADDR_VAR 0 2
 988: PUSH
 989: LD_INT 22
 991: PUSH
 992: LD_INT 1
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 21
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: EMPTY
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PPUSH
1020: CALL_OW 69
1024: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
1025: LD_ADDR_EXP 4
1029: PUSH
1030: LD_STRING Cyrus
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 43
1040: PPUSH
1041: CALL 37411 0 3
1045: ST_TO_ADDR
// if veh then
1046: LD_VAR 0 2
1050: IFFALSE 1072
// PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) else
1052: LD_EXP 4
1056: PPUSH
1057: LD_VAR 0 2
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 52
1070: GO 1087
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1072: LD_EXP 4
1076: PPUSH
1077: LD_INT 2
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ; if LoadVariable ( FrankIn06 , debugMode ) then
1087: LD_STRING FrankIn06
1089: PPUSH
1090: LD_EXP 41
1094: PPUSH
1095: CALL_OW 30
1099: IFFALSE 1207
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 58
1128: PUSH
1129: EMPTY
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 69
1141: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debugMode ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 5
1146: PUSH
1147: LD_STRING Frank
1149: PPUSH
1150: LD_EXP 41
1154: NOT
1155: PPUSH
1156: LD_EXP 43
1160: PPUSH
1161: CALL 37411 0 3
1165: ST_TO_ADDR
// if veh then
1166: LD_VAR 0 2
1170: IFFALSE 1192
// PlaceHumanInUnit ( Frank , veh [ 1 ] ) else
1172: LD_EXP 5
1176: PPUSH
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 1
1184: ARRAY
1185: PPUSH
1186: CALL_OW 52
1190: GO 1207
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1192: LD_EXP 5
1196: PPUSH
1197: LD_INT 2
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// end ; if LoadVariable ( BrownIn06 , debugMode ) then
1207: LD_STRING BrownIn06
1209: PPUSH
1210: LD_EXP 41
1214: PPUSH
1215: CALL_OW 30
1219: IFFALSE 1327
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 21
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 58
1248: PUSH
1249: EMPTY
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PPUSH
1257: CALL_OW 69
1261: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , mission_prefix_prev ) ;
1262: LD_ADDR_EXP 6
1266: PUSH
1267: LD_STRING Brown
1269: PPUSH
1270: LD_EXP 41
1274: NOT
1275: PPUSH
1276: LD_EXP 43
1280: PPUSH
1281: CALL 37411 0 3
1285: ST_TO_ADDR
// if veh then
1286: LD_VAR 0 2
1290: IFFALSE 1312
// PlaceHumanInUnit ( Brown , veh [ 1 ] ) else
1292: LD_EXP 6
1296: PPUSH
1297: LD_VAR 0 2
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 52
1310: GO 1327
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1312: LD_EXP 6
1316: PPUSH
1317: LD_INT 2
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// end ; if LoadVariable ( DonaldsonIn06 , debugMode ) then
1327: LD_STRING DonaldsonIn06
1329: PPUSH
1330: LD_EXP 41
1334: PPUSH
1335: CALL_OW 30
1339: IFFALSE 1447
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1341: LD_ADDR_VAR 0 2
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 21
1358: PUSH
1359: LD_INT 2
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 58
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , mission_prefix_prev ) ;
1382: LD_ADDR_EXP 7
1386: PUSH
1387: LD_STRING Donaldson
1389: PPUSH
1390: LD_EXP 41
1394: NOT
1395: PPUSH
1396: LD_EXP 43
1400: PPUSH
1401: CALL 37411 0 3
1405: ST_TO_ADDR
// if veh then
1406: LD_VAR 0 2
1410: IFFALSE 1432
// PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) else
1412: LD_EXP 7
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 1
1424: ARRAY
1425: PPUSH
1426: CALL_OW 52
1430: GO 1447
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1432: LD_EXP 7
1436: PPUSH
1437: LD_INT 2
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// end ; if LoadVariable ( GladstoneIn06 , debugMode ) then
1447: LD_STRING GladstoneIn06
1449: PPUSH
1450: LD_EXP 41
1454: PPUSH
1455: CALL_OW 30
1459: IFFALSE 1567
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: LD_INT 22
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debugMode ) , mission_prefix_prev ) ;
1502: LD_ADDR_EXP 8
1506: PUSH
1507: LD_STRING Gladstone
1509: PPUSH
1510: LD_EXP 41
1514: NOT
1515: PPUSH
1516: LD_EXP 43
1520: PPUSH
1521: CALL 37411 0 3
1525: ST_TO_ADDR
// if veh then
1526: LD_VAR 0 2
1530: IFFALSE 1552
// PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) else
1532: LD_EXP 8
1536: PPUSH
1537: LD_VAR 0 2
1541: PUSH
1542: LD_INT 1
1544: ARRAY
1545: PPUSH
1546: CALL_OW 52
1550: GO 1567
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1552: LD_EXP 8
1556: PPUSH
1557: LD_INT 2
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// end ; end ;
1567: LD_VAR 0 1
1571: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1572: LD_INT 0
1574: PPUSH
1575: PPUSH
1576: PPUSH
1577: PPUSH
1578: PPUSH
1579: PPUSH
// vehicles := LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1580: LD_ADDR_VAR 0 5
1584: PUSH
1585: LD_STRING 06_VehiclesIn06_1
1587: PPUSH
1588: EMPTY
1589: PPUSH
1590: CALL_OW 30
1594: ST_TO_ADDR
// resources := LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1595: LD_ADDR_EXP 39
1599: PUSH
1600: LD_STRING 06_ResourcesInCargo06_1
1602: PPUSH
1603: EMPTY
1604: PPUSH
1605: CALL_OW 30
1609: ST_TO_ADDR
// cargoList := [ ] ;
1610: LD_ADDR_VAR 0 6
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// uc_side := 1 ;
1617: LD_ADDR_OWVAR 20
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if vehicles then
1625: LD_VAR 0 5
1629: IFFALSE 1976
// begin for i := 1 to vehicles do
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: DOUBLE
1637: LD_INT 1
1639: DEC
1640: ST_TO_ADDR
1641: LD_VAR 0 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1796
// begin uc_nation := vehicles [ i ] [ 1 ] ;
1649: LD_ADDR_OWVAR 21
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: ST_TO_ADDR
// vc_chassis := vehicles [ i ] [ 2 ] ;
1669: LD_ADDR_OWVAR 37
1673: PUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 2
1687: ARRAY
1688: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 3 ] ;
1689: LD_ADDR_OWVAR 39
1693: PUSH
1694: LD_VAR 0 5
1698: PUSH
1699: LD_VAR 0 2
1703: ARRAY
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 4 ] ;
1709: LD_ADDR_OWVAR 38
1713: PUSH
1714: LD_VAR 0 5
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PUSH
1725: LD_INT 4
1727: ARRAY
1728: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 5 ] ;
1729: LD_ADDR_OWVAR 40
1733: PUSH
1734: LD_VAR 0 5
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 5
1747: ARRAY
1748: ST_TO_ADDR
// vc_fuel_battery := 40 ;
1749: LD_ADDR_OWVAR 41
1753: PUSH
1754: LD_INT 40
1756: ST_TO_ADDR
// veh := CreateVehicle ;
1757: LD_ADDR_VAR 0 4
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1767: LD_VAR 0 4
1771: PPUSH
1772: LD_INT 3
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1779: LD_VAR 0 4
1783: PPUSH
1784: LD_INT 2
1786: PPUSH
1787: LD_INT 0
1789: PPUSH
1790: CALL_OW 49
// end ;
1794: GO 1646
1796: POP
1797: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1798: LD_ADDR_VAR 0 6
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 2
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 34
1825: PUSH
1826: LD_INT 12
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: ST_TO_ADDR
// if cargoList then
1843: LD_VAR 0 6
1847: IFFALSE 1976
// for i := 1 to cargoList do
1849: LD_ADDR_VAR 0 2
1853: PUSH
1854: DOUBLE
1855: LD_INT 1
1857: DEC
1858: ST_TO_ADDR
1859: LD_VAR 0 6
1863: PUSH
1864: FOR_TO
1865: IFFALSE 1974
// begin if resources then
1867: LD_EXP 39
1871: IFFALSE 1972
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_EXP 39
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_EXP 39
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 2
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1939: LD_VAR 0 6
1943: PUSH
1944: LD_VAR 0 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 3
1952: PPUSH
1953: LD_EXP 39
1957: PUSH
1958: LD_VAR 0 2
1962: ARRAY
1963: PUSH
1964: LD_INT 3
1966: ARRAY
1967: PPUSH
1968: CALL_OW 291
// end ; end ;
1972: GO 1864
1974: POP
1975: POP
// end ; end ;
1976: LD_VAR 0 1
1980: RET
// export function PrepareOthers ; var i , veh ; begin
1981: LD_INT 0
1983: PPUSH
1984: PPUSH
1985: PPUSH
// uc_side := 1 ;
1986: LD_ADDR_OWVAR 20
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// uc_nation := 1 ;
1994: LD_ADDR_OWVAR 21
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn06 ) ;
2002: LD_ADDR_EXP 11
2006: PUSH
2007: LD_STRING OthersIn06
2009: PPUSH
2010: CALL_OW 31
2014: ST_TO_ADDR
// for i in others do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_EXP 11
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: ST_TO_ADDR
// if veh then
2069: LD_VAR 0 3
2073: IFFALSE 2095
// PlaceHumanInUnit ( i , veh [ 1 ] ) else
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: ARRAY
2088: PPUSH
2089: CALL_OW 52
2093: GO 2110
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2095: LD_VAR 0 2
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// end ;
2110: GO 2025
2112: POP
2113: POP
// end ;
2114: LD_VAR 0 1
2118: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2119: LD_INT 0
2121: PPUSH
2122: PPUSH
2123: PPUSH
// uc_side = 1 ;
2124: LD_ADDR_OWVAR 20
2128: PUSH
2129: LD_INT 1
2131: ST_TO_ADDR
// uc_nation = 0 ;
2132: LD_ADDR_OWVAR 21
2136: PUSH
2137: LD_INT 0
2139: ST_TO_ADDR
// ape := CreateCharacterSet ( ApeIn06 ) ;
2140: LD_ADDR_EXP 12
2144: PUSH
2145: LD_STRING ApeIn06
2147: PPUSH
2148: CALL_OW 31
2152: ST_TO_ADDR
// if not ape then
2153: LD_EXP 12
2157: NOT
2158: IFFALSE 2162
// exit ;
2160: GO 2194
// for i in ape do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 12
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2192
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
2190: GO 2172
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 1
2198: RET
// export function PrepareDenis ; var xy , i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// uc_side := 4 ;
2204: LD_ADDR_OWVAR 20
2208: PUSH
2209: LD_INT 4
2211: ST_TO_ADDR
// uc_nation := 1 ;
2212: LD_ADDR_OWVAR 21
2216: PUSH
2217: LD_INT 1
2219: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2220: LD_ADDR_VAR 0 2
2224: PUSH
2225: LD_INT 63
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 70
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 83
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: PUSH
2255: LD_INT 16
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 27
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 38
2277: PUSH
2278: LD_INT 1
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 5
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 54
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
2315: LD_ADDR_EXP 9
2319: PUSH
2320: LD_STRING Denis
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_EXP 43
2330: PPUSH
2331: CALL 37411 0 3
2335: ST_TO_ADDR
// if not Denis then
2336: LD_EXP 9
2340: NOT
2341: IFFALSE 2345
// exit ;
2343: GO 2486
// for i = 1 to xy do
2345: LD_ADDR_VAR 0 3
2349: PUSH
2350: DOUBLE
2351: LD_INT 1
2353: DEC
2354: ST_TO_ADDR
2355: LD_VAR 0 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2460
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_VAR 0 3
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 2
2382: PUSH
2383: LD_VAR 0 3
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: CALL_OW 428
2397: PUSH
2398: LD_INT 0
2400: EQUAL
2401: IFFALSE 2458
// begin PlaceUnitXY ( Denis , xy [ i ] [ 1 ] , xy [ i ] [ 2 ] , false ) ;
2403: LD_EXP 9
2407: PPUSH
2408: LD_VAR 0 2
2412: PUSH
2413: LD_VAR 0 3
2417: ARRAY
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 2
2427: PUSH
2428: LD_VAR 0 3
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 48
// if IsPlaced ( Denis ) then
2445: LD_EXP 9
2449: PPUSH
2450: CALL_OW 305
2454: IFFALSE 2458
// break ;
2456: GO 2460
// end ;
2458: GO 2360
2460: POP
2461: POP
// SetClass ( Denis , 4 ) ;
2462: LD_EXP 9
2466: PPUSH
2467: LD_INT 4
2469: PPUSH
2470: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2474: LD_EXP 9
2478: PPUSH
2479: LD_INT 750
2481: PPUSH
2482: CALL_OW 234
// end ;
2486: LD_VAR 0 1
2490: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
// area := HarrisonSupportArea ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_INT 3
2505: ST_TO_ADDR
// dir := 2 ;
2506: LD_ADDR_VAR 0 5
2510: PUSH
2511: LD_INT 2
2513: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2514: LD_VAR 0 4
2518: PPUSH
2519: LD_INT 21
2521: PUSH
2522: LD_INT 3
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 70
2533: IFFALSE 2551
// begin area := HarrisonSupportArea2 ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: LD_INT 31
2542: ST_TO_ADDR
// dir := 1 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; uc_side = 1 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// uc_nation = 1 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// vc_engine := engine_combustion ;
2567: LD_ADDR_OWVAR 39
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// vc_control := control_manual ;
2575: LD_ADDR_OWVAR 38
2579: PUSH
2580: LD_INT 1
2582: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_gatling_gun , us_machine_gun , us_machine_gun ] [ Difficulty ] ;
2583: LD_ADDR_OWVAR 40
2587: PUSH
2588: LD_INT 4
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: LD_INT 2
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2612: LD_ADDR_OWVAR 37
2616: PUSH
2617: LD_INT 2
2619: ST_TO_ADDR
// veh := CreateVehicle ;
2620: LD_ADDR_VAR 0 3
2624: PUSH
2625: CALL_OW 45
2629: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_VAR 0 5
2639: PPUSH
2640: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 50
2668: PPUSH
2669: CALL_OW 240
// hc_class := class_engineer ;
2673: LD_ADDR_OWVAR 28
2677: PUSH
2678: LD_INT 2
2680: ST_TO_ADDR
// hc_sex := sex_male ;
2681: LD_ADDR_OWVAR 27
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2689: LD_ADDR_OWVAR 33
2693: PUSH
2694: LD_STRING SecondCharsGal
2696: ST_TO_ADDR
// hc_face_number := 52 ;
2697: LD_ADDR_OWVAR 34
2701: PUSH
2702: LD_INT 52
2704: ST_TO_ADDR
// hc_name := Craig Brown ;
2705: LD_ADDR_OWVAR 26
2709: PUSH
2710: LD_STRING Craig Brown
2712: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2713: LD_ADDR_OWVAR 29
2717: PUSH
2718: LD_INT 10
2720: PUSH
2721: LD_INT 10
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2728: LD_ADDR_OWVAR 30
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2751: LD_ADDR_OWVAR 31
2755: PUSH
2756: LD_INT 2
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// HarrSupp1 := CreateHuman ;
2774: LD_ADDR_EXP 17
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: CALL_OW 52
// vc_engine := engine_combustion ;
2798: LD_ADDR_OWVAR 39
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// vc_control := control_manual ;
2806: LD_ADDR_OWVAR 38
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_light_gun , us_light_gun ] [ Difficulty ] ;
2814: LD_ADDR_OWVAR 40
2818: PUSH
2819: LD_INT 5
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 3
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: LD_OWVAR 67
2841: ARRAY
2842: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2843: LD_ADDR_OWVAR 37
2847: PUSH
2848: LD_INT 2
2850: ST_TO_ADDR
// veh := CreateVehicle ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 45
2860: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2875: LD_VAR 0 3
2879: PPUSH
2880: LD_VAR 0 4
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2892: LD_VAR 0 3
2896: PPUSH
2897: LD_INT 50
2899: PPUSH
2900: CALL_OW 240
// hc_class := class_soldier ;
2904: LD_ADDR_OWVAR 28
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// hc_sex := sex_female ;
2912: LD_ADDR_OWVAR 27
2916: PUSH
2917: LD_INT 2
2919: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING SecondCharsGal
2927: ST_TO_ADDR
// hc_face_number := 45 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 45
2935: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2936: LD_ADDR_OWVAR 29
2940: PUSH
2941: LD_INT 11
2943: PUSH
2944: LD_INT 10
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2951: LD_ADDR_OWVAR 26
2955: PUSH
2956: LD_STRING Ingrid Jonsson
2958: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2959: LD_ADDR_OWVAR 30
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 1
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2982: LD_ADDR_OWVAR 31
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 1
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: CALL_OW 44
3014: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
3015: LD_EXP 18
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: CALL_OW 52
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareJoan ; var i , tmp , _tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// _tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ Bobby , Cyrus , Gladstone , Denis , Frank ] ;
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 23
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 26
3067: PUSH
3068: LD_INT 1
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: PPUSH
3080: CALL_OW 69
3084: PUSH
3085: LD_EXP 3
3089: PUSH
3090: LD_EXP 4
3094: PUSH
3095: LD_EXP 8
3099: PUSH
3100: LD_EXP 9
3104: PUSH
3105: LD_EXP 5
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: DIFF
3117: ST_TO_ADDR
// for i in _tmp do
3118: LD_ADDR_VAR 0 2
3122: PUSH
3123: LD_VAR 0 4
3127: PUSH
3128: FOR_IN
3129: IFFALSE 3170
// if IsInArea ( i , scanArea ) and IsOk ( i ) then
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 32
3138: PPUSH
3139: CALL_OW 308
3143: PUSH
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL_OW 302
3153: AND
3154: IFFALSE 3168
// begin tmp := i ;
3156: LD_ADDR_VAR 0 3
3160: PUSH
3161: LD_VAR 0 2
3165: ST_TO_ADDR
// break ;
3166: GO 3170
// end ;
3168: GO 3128
3170: POP
3171: POP
// if not tmp then
3172: LD_VAR 0 3
3176: NOT
3177: IFFALSE 3189
// tmp := JMM ;
3179: LD_ADDR_VAR 0 3
3183: PUSH
3184: LD_EXP 1
3188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3189: LD_INT 35
3191: PPUSH
3192: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 22 ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_distxy , GetX ( tmp ) , GetY ( tmp ) , 20 ] ] ) ;
3196: LD_INT 81
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: LD_INT 92
3208: PUSH
3209: LD_VAR 0 3
3213: PPUSH
3214: CALL_OW 250
3218: PUSH
3219: LD_VAR 0 3
3223: PPUSH
3224: CALL_OW 251
3228: PUSH
3229: LD_INT 22
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: NOT
3247: PUSH
3248: LD_INT 22
3250: PUSH
3251: LD_INT 1
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 21
3260: PUSH
3261: LD_INT 3
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 92
3270: PUSH
3271: LD_VAR 0 3
3275: PPUSH
3276: CALL_OW 250
3280: PUSH
3281: LD_VAR 0 3
3285: PPUSH
3286: CALL_OW 251
3290: PUSH
3291: LD_INT 20
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: PPUSH
3305: CALL_OW 69
3309: AND
3310: IFFALSE 3189
// blockSpawn := 1 ;
3312: LD_ADDR_EXP 29
3316: PUSH
3317: LD_INT 1
3319: ST_TO_ADDR
// uc_side := 4 ;
3320: LD_ADDR_OWVAR 20
3324: PUSH
3325: LD_INT 4
3327: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false , mission_prefix_prev ) ;
3328: LD_ADDR_EXP 15
3332: PUSH
3333: LD_STRING Joan
3335: PPUSH
3336: LD_INT 0
3338: PPUSH
3339: LD_EXP 43
3343: PPUSH
3344: CALL 37411 0 3
3348: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3349: LD_EXP 15
3353: PPUSH
3354: LD_VAR 0 3
3358: PPUSH
3359: CALL_OW 250
3363: PPUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: CALL_OW 251
3373: PPUSH
3374: LD_INT 5
3376: PPUSH
3377: LD_INT 1
3379: PPUSH
3380: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3384: LD_EXP 15
3388: PPUSH
3389: LD_INT 250
3391: PPUSH
3392: CALL_OW 234
// InGameOn ;
3396: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3400: LD_EXP 15
3404: PPUSH
3405: CALL_OW 87
// wait ( 0 0$2 ) ;
3409: LD_INT 70
3411: PPUSH
3412: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3416: LD_VAR 0 3
3420: PPUSH
3421: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3425: LD_VAR 0 3
3429: PPUSH
3430: CALL_OW 122
// wait ( 0 0$1 ) ;
3434: LD_INT 35
3436: PPUSH
3437: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3441: LD_VAR 0 3
3445: PPUSH
3446: LD_EXP 15
3450: PPUSH
3451: CALL_OW 112
// wait ( 0 0$2 ) ;
3455: LD_INT 70
3457: PPUSH
3458: CALL_OW 67
// DialogueOn ;
3462: CALL_OW 6
// if tmp = JMM then
3466: LD_VAR 0 3
3470: PUSH
3471: LD_EXP 1
3475: EQUAL
3476: IFFALSE 3625
// begin ComTurnUnit ( JMM , Joan ) ;
3478: LD_EXP 1
3482: PPUSH
3483: LD_EXP 15
3487: PPUSH
3488: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3492: LD_EXP 1
3496: PPUSH
3497: LD_STRING D5b-JMM-1
3499: PPUSH
3500: CALL_OW 88
// DialogueOff ;
3504: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3508: LD_EXP 15
3512: PPUSH
3513: LD_INT 500
3515: PPUSH
3516: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3520: LD_EXP 15
3524: PPUSH
3525: LD_EXP 1
3529: PPUSH
3530: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3534: LD_EXP 1
3538: PPUSH
3539: LD_EXP 15
3543: PPUSH
3544: CALL_OW 119
// wait ( 0 0$1 ) ;
3548: LD_INT 35
3550: PPUSH
3551: CALL_OW 67
// DialogueOn ;
3555: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_STRING D5b-Joan-1
3566: PPUSH
3567: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3571: LD_EXP 1
3575: PPUSH
3576: LD_STRING D5b-JMM-2
3578: PPUSH
3579: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3583: LD_EXP 15
3587: PPUSH
3588: LD_STRING D5b-Joan-2
3590: PPUSH
3591: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3595: LD_EXP 1
3599: PPUSH
3600: LD_STRING D5b-JMM-3
3602: PPUSH
3603: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_STRING D5b-Joan-3
3614: PPUSH
3615: CALL_OW 88
// DialogueOff ;
3619: CALL_OW 7
// end else
3623: GO 3990
// begin ComTurnUnit ( tmp , Joan ) ;
3625: LD_VAR 0 3
3629: PPUSH
3630: LD_EXP 15
3634: PPUSH
3635: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3639: LD_VAR 0 3
3643: PPUSH
3644: LD_STRING D5a-Sol1-1
3646: PPUSH
3647: CALL_OW 88
// DialogueOff ;
3651: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3655: LD_EXP 15
3659: PPUSH
3660: LD_INT 500
3662: PPUSH
3663: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3667: LD_EXP 15
3671: PPUSH
3672: LD_VAR 0 3
3676: PPUSH
3677: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3681: LD_VAR 0 3
3685: PPUSH
3686: LD_EXP 15
3690: PPUSH
3691: CALL_OW 119
// wait ( 0 0$1 ) ;
3695: LD_INT 35
3697: PPUSH
3698: CALL_OW 67
// DialogueOn ;
3702: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3706: LD_EXP 15
3710: PPUSH
3711: LD_STRING D5a-Joan-1
3713: PPUSH
3714: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_STRING D5a-Sol1-2
3725: PPUSH
3726: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3730: LD_EXP 15
3734: PPUSH
3735: LD_STRING D5a-Joan-2
3737: PPUSH
3738: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3742: LD_VAR 0 3
3746: PPUSH
3747: LD_STRING D5a-Sol1-3
3749: PPUSH
3750: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3754: LD_EXP 15
3758: PPUSH
3759: LD_STRING D5a-Joan-3
3761: PPUSH
3762: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3766: LD_VAR 0 3
3770: PPUSH
3771: LD_STRING D5a-Sol1-4
3773: PPUSH
3774: CALL_OW 88
// DialogueOff ;
3778: CALL_OW 7
// if JMM in FilterAllUnits ( [ f_driving ] ) then
3782: LD_EXP 1
3786: PUSH
3787: LD_INT 55
3789: PUSH
3790: EMPTY
3791: LIST
3792: PPUSH
3793: CALL_OW 69
3797: IN
3798: IFFALSE 3821
// begin ComMoveUnit ( JMM , Joan ) ;
3800: LD_EXP 1
3804: PPUSH
3805: LD_EXP 15
3809: PPUSH
3810: CALL_OW 112
// wait ( 0 0$05 ) ;
3814: LD_INT 175
3816: PPUSH
3817: CALL_OW 67
// end ; ComExit ( JMM ) ;
3821: LD_EXP 1
3825: PPUSH
3826: CALL 74536 0 1
// wait ( 0 0$1 ) ;
3830: LD_INT 35
3832: PPUSH
3833: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3837: LD_INT 35
3839: PPUSH
3840: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3844: LD_EXP 15
3848: PUSH
3849: LD_VAR 0 3
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PPUSH
3858: LD_EXP 1
3862: PPUSH
3863: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3867: LD_EXP 15
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 296
3881: PUSH
3882: LD_INT 5
3884: LESS
3885: IFFALSE 3837
// ComTurnUnit ( Joan , JMM ) ;
3887: LD_EXP 15
3891: PPUSH
3892: LD_EXP 1
3896: PPUSH
3897: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_EXP 15
3910: PPUSH
3911: CALL_OW 119
// wait ( 0 0$1 ) ;
3915: LD_INT 35
3917: PPUSH
3918: CALL_OW 67
// DialogueOn ;
3922: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3926: LD_EXP 15
3930: PPUSH
3931: LD_STRING D5a-Joan-4
3933: PPUSH
3934: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3938: LD_EXP 1
3942: PPUSH
3943: LD_STRING D5a-JMM-4
3945: PPUSH
3946: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3950: LD_EXP 15
3954: PPUSH
3955: LD_STRING D5a-Joan-5
3957: PPUSH
3958: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3962: LD_EXP 1
3966: PPUSH
3967: LD_STRING D5a-JMM-5
3969: PPUSH
3970: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3974: LD_EXP 15
3978: PPUSH
3979: LD_STRING D5a-Joan-6
3981: PPUSH
3982: CALL_OW 88
// DialogueOff ;
3986: CALL_OW 7
// end ; DialogueOn ;
3990: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3994: LD_EXP 1
3998: PPUSH
3999: LD_STRING D6-JMM-1
4001: PPUSH
4002: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
4006: LD_EXP 15
4010: PPUSH
4011: LD_STRING D6-Joan-1
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D6-JMM-2
4025: PPUSH
4026: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
4030: LD_EXP 15
4034: PPUSH
4035: LD_STRING D6-Joan-2
4037: PPUSH
4038: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4042: LD_EXP 1
4046: PPUSH
4047: LD_STRING D6-JMM-3
4049: PPUSH
4050: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
4054: LD_EXP 15
4058: PPUSH
4059: LD_STRING D6-Joan-3
4061: PPUSH
4062: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4066: LD_EXP 1
4070: PPUSH
4071: LD_STRING D6-JMM-4
4073: PPUSH
4074: CALL_OW 88
// DialogueOff ;
4078: CALL_OW 7
// InGameOff ;
4082: CALL_OW 9
// SetSide ( Joan , 1 ) ;
4086: LD_EXP 15
4090: PPUSH
4091: LD_INT 1
4093: PPUSH
4094: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
4098: LD_STRING MJ
4100: PPUSH
4101: CALL_OW 337
// joanStatus = 1 ;
4105: LD_ADDR_EXP 16
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// blockSpawn = 0 ;
4113: LD_ADDR_EXP 29
4117: PUSH
4118: LD_INT 0
4120: ST_TO_ADDR
// end ;
4121: LD_VAR 0 1
4125: RET
// export function PrepareRandoms ( number ) ; var un ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
// if not number or number > 8 then
4130: LD_VAR 0 1
4134: NOT
4135: PUSH
4136: LD_VAR 0 1
4140: PUSH
4141: LD_INT 8
4143: GREATER
4144: OR
4145: IFFALSE 4149
// exit ;
4147: GO 5697
// repeat wait ( 0 0$7 ) ;
4149: LD_INT 245
4151: PPUSH
4152: CALL_OW 67
// until blockSpawn = 0 ;
4156: LD_EXP 29
4160: PUSH
4161: LD_INT 0
4163: EQUAL
4164: IFFALSE 4149
// uc_side := 1 ;
4166: LD_ADDR_OWVAR 20
4170: PUSH
4171: LD_INT 1
4173: ST_TO_ADDR
// uc_nation := 1 ;
4174: LD_ADDR_OWVAR 21
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// InitHc ;
4182: CALL_OW 19
// if number = 1 then
4186: LD_VAR 0 1
4190: PUSH
4191: LD_INT 1
4193: EQUAL
4194: IFFALSE 4370
// begin hc_class := 3 ;
4196: LD_ADDR_OWVAR 28
4200: PUSH
4201: LD_INT 3
4203: ST_TO_ADDR
// hc_sex := sex_male ;
4204: LD_ADDR_OWVAR 27
4208: PUSH
4209: LD_INT 1
4211: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4212: LD_ADDR_OWVAR 33
4216: PUSH
4217: LD_STRING SecondCharsGal
4219: ST_TO_ADDR
// hc_face_number := 55 ;
4220: LD_ADDR_OWVAR 34
4224: PUSH
4225: LD_INT 55
4227: ST_TO_ADDR
// hc_name := George McCarthy ;
4228: LD_ADDR_OWVAR 26
4232: PUSH
4233: LD_STRING George McCarthy
4235: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4236: LD_ADDR_OWVAR 29
4240: PUSH
4241: LD_INT 11
4243: PUSH
4244: LD_INT 10
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4251: LD_ADDR_OWVAR 30
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 2
4264: PUSH
4265: LD_INT 0
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4274: LD_ADDR_OWVAR 31
4278: PUSH
4279: LD_INT 1
4281: PUSH
4282: LD_INT 2
4284: PUSH
4285: LD_INT 3
4287: PUSH
4288: LD_INT 1
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: ST_TO_ADDR
// un = CreateHuman ;
4297: LD_ADDR_VAR 0 3
4301: PUSH
4302: CALL_OW 44
4306: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_INT 23
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4322: LD_VAR 0 3
4326: PPUSH
4327: CALL_OW 87
// wait ( 0 0$1 ) ;
4331: LD_INT 35
4333: PPUSH
4334: CALL_OW 67
// DialogueOn ;
4338: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4342: LD_VAR 0 3
4346: PPUSH
4347: LD_STRING D11d-Sol4-1
4349: PPUSH
4350: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4354: LD_EXP 1
4358: PPUSH
4359: LD_STRING D11d-JMM-1
4361: PPUSH
4362: CALL_OW 88
// DialogueOff ;
4366: CALL_OW 7
// end ; if number = 2 then
4370: LD_VAR 0 1
4374: PUSH
4375: LD_INT 2
4377: EQUAL
4378: IFFALSE 4554
// begin hc_class := 1 ;
4380: LD_ADDR_OWVAR 28
4384: PUSH
4385: LD_INT 1
4387: ST_TO_ADDR
// hc_sex := sex_male ;
4388: LD_ADDR_OWVAR 27
4392: PUSH
4393: LD_INT 1
4395: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING AmGalRemake
4403: ST_TO_ADDR
// hc_face_number := 7 ;
4404: LD_ADDR_OWVAR 34
4408: PUSH
4409: LD_INT 7
4411: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4412: LD_ADDR_OWVAR 26
4416: PUSH
4417: LD_STRING Bobby Jordan
4419: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4420: LD_ADDR_OWVAR 29
4424: PUSH
4425: LD_INT 9
4427: PUSH
4428: LD_INT 11
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4435: LD_ADDR_OWVAR 30
4439: PUSH
4440: LD_INT 1
4442: PUSH
4443: LD_INT 0
4445: PUSH
4446: LD_INT 0
4448: PUSH
4449: LD_INT 1
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4458: LD_ADDR_OWVAR 31
4462: PUSH
4463: LD_INT 2
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: ST_TO_ADDR
// un = CreateHuman ;
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: CALL_OW 44
4490: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4491: LD_VAR 0 3
4495: PPUSH
4496: LD_INT 24
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL_OW 49
// wait ( 0 0$1 ) ;
4506: LD_INT 35
4508: PPUSH
4509: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4513: LD_VAR 0 3
4517: PPUSH
4518: CALL_OW 87
// DialogueOn ;
4522: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4526: LD_VAR 0 3
4530: PPUSH
4531: LD_STRING D11b-Sol3-1
4533: PPUSH
4534: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4538: LD_EXP 1
4542: PPUSH
4543: LD_STRING D11b-JMM-1
4545: PPUSH
4546: CALL_OW 88
// DialogueOff ;
4550: CALL_OW 7
// end ; if number = 3 then
4554: LD_VAR 0 1
4558: PUSH
4559: LD_INT 3
4561: EQUAL
4562: IFFALSE 4726
// begin hc_class := 1 ;
4564: LD_ADDR_OWVAR 28
4568: PUSH
4569: LD_INT 1
4571: ST_TO_ADDR
// hc_sex := sex_male ;
4572: LD_ADDR_OWVAR 27
4576: PUSH
4577: LD_INT 1
4579: ST_TO_ADDR
// hc_gallery := DJ ;
4580: LD_ADDR_OWVAR 33
4584: PUSH
4585: LD_STRING DJ
4587: ST_TO_ADDR
// hc_face_number := 1 ;
4588: LD_ADDR_OWVAR 34
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// hc_name := Darius Dajay ;
4596: LD_ADDR_OWVAR 26
4600: PUSH
4601: LD_STRING Darius Dajay
4603: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4604: LD_ADDR_OWVAR 29
4608: PUSH
4609: LD_INT 11
4611: PUSH
4612: LD_INT 11
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4619: LD_ADDR_OWVAR 30
4623: PUSH
4624: LD_INT 2
4626: PUSH
4627: LD_INT 0
4629: PUSH
4630: LD_INT 0
4632: PUSH
4633: LD_INT 0
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4642: LD_ADDR_OWVAR 31
4646: PUSH
4647: LD_INT 4
4649: PUSH
4650: LD_INT 0
4652: PUSH
4653: LD_INT 1
4655: PUSH
4656: LD_INT 0
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: ST_TO_ADDR
// un = CreateHuman ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: CALL_OW 44
4674: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4675: LD_VAR 0 3
4679: PPUSH
4680: LD_INT 25
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4690: LD_VAR 0 3
4694: PPUSH
4695: CALL_OW 87
// wait ( 0 0$1 ) ;
4699: LD_INT 35
4701: PPUSH
4702: CALL_OW 67
// DialogueOn ;
4706: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4710: LD_VAR 0 3
4714: PPUSH
4715: LD_STRING D11f-Sol5-1
4717: PPUSH
4718: CALL_OW 88
// DialogueOff ;
4722: CALL_OW 7
// end ; if number = 4 then
4726: LD_VAR 0 1
4730: PUSH
4731: LD_INT 4
4733: EQUAL
4734: IFFALSE 4871
// begin hc_class := 2 ;
4736: LD_ADDR_OWVAR 28
4740: PUSH
4741: LD_INT 2
4743: ST_TO_ADDR
// hc_sex := sex_female ;
4744: LD_ADDR_OWVAR 27
4748: PUSH
4749: LD_INT 2
4751: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4752: LD_ADDR_OWVAR 33
4756: PUSH
4757: LD_STRING SecondCharsGal
4759: ST_TO_ADDR
// hc_face_number := 46 ;
4760: LD_ADDR_OWVAR 34
4764: PUSH
4765: LD_INT 46
4767: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4768: LD_ADDR_OWVAR 26
4772: PUSH
4773: LD_STRING Sylvia Creak
4775: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4776: LD_ADDR_OWVAR 29
4780: PUSH
4781: LD_INT 10
4783: PUSH
4784: LD_INT 9
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4791: LD_ADDR_OWVAR 30
4795: PUSH
4796: LD_INT 0
4798: PUSH
4799: LD_INT 1
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4814: LD_ADDR_OWVAR 31
4818: PUSH
4819: LD_INT 1
4821: PUSH
4822: LD_INT 3
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: ST_TO_ADDR
// un = CreateHuman ;
4837: LD_ADDR_VAR 0 3
4841: PUSH
4842: CALL_OW 44
4846: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4847: LD_VAR 0 3
4851: PPUSH
4852: LD_INT 26
4854: PPUSH
4855: LD_INT 1
4857: PPUSH
4858: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4862: LD_VAR 0 3
4866: PPUSH
4867: CALL_OW 87
// end ; if number = 5 then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_INT 5
4878: EQUAL
4879: IFFALSE 5055
// begin hc_class := 1 ;
4881: LD_ADDR_OWVAR 28
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// hc_sex := sex_female ;
4889: LD_ADDR_OWVAR 27
4893: PUSH
4894: LD_INT 2
4896: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4897: LD_ADDR_OWVAR 33
4901: PUSH
4902: LD_STRING SecondCharsGal
4904: ST_TO_ADDR
// hc_face_number := 37 ;
4905: LD_ADDR_OWVAR 34
4909: PUSH
4910: LD_INT 37
4912: ST_TO_ADDR
// hc_name := Malena Johnson ;
4913: LD_ADDR_OWVAR 26
4917: PUSH
4918: LD_STRING Malena Johnson
4920: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4921: LD_ADDR_OWVAR 29
4925: PUSH
4926: LD_INT 11
4928: PUSH
4929: LD_INT 10
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4936: LD_ADDR_OWVAR 30
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: LD_INT 0
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4959: LD_ADDR_OWVAR 31
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: ST_TO_ADDR
// un = CreateHuman ;
4982: LD_ADDR_VAR 0 3
4986: PUSH
4987: CALL_OW 44
4991: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4992: LD_VAR 0 3
4996: PPUSH
4997: LD_INT 27
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5007: LD_VAR 0 3
5011: PPUSH
5012: CALL_OW 87
// wait ( 0 0$1 ) ;
5016: LD_INT 35
5018: PPUSH
5019: CALL_OW 67
// DialogueOn ;
5023: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_STRING D11c-FSol3-1
5034: PPUSH
5035: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
5039: LD_EXP 1
5043: PPUSH
5044: LD_STRING D11c-JMM-1
5046: PPUSH
5047: CALL_OW 88
// DialogueOff ;
5051: CALL_OW 7
// end ; if number = 6 then
5055: LD_VAR 0 1
5059: PUSH
5060: LD_INT 6
5062: EQUAL
5063: IFFALSE 5237
// begin hc_class := 1 ;
5065: LD_ADDR_OWVAR 28
5069: PUSH
5070: LD_INT 1
5072: ST_TO_ADDR
// hc_sex := sex_male ;
5073: LD_ADDR_OWVAR 27
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5081: LD_ADDR_OWVAR 33
5085: PUSH
5086: LD_STRING AmGalRemake
5088: ST_TO_ADDR
// hc_face_number := 1 ;
5089: LD_ADDR_OWVAR 34
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// hc_name := Charles Brown ;
5097: LD_ADDR_OWVAR 26
5101: PUSH
5102: LD_STRING Charles Brown
5104: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
5105: LD_ADDR_OWVAR 29
5109: PUSH
5110: LD_INT 12
5112: PUSH
5113: LD_INT 11
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
5120: LD_ADDR_OWVAR 30
5124: PUSH
5125: LD_INT 2
5127: PUSH
5128: LD_INT 0
5130: PUSH
5131: LD_INT 0
5133: PUSH
5134: LD_INT 0
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
5143: LD_ADDR_OWVAR 31
5147: PUSH
5148: LD_INT 3
5150: PUSH
5151: LD_INT 0
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: ST_TO_ADDR
// un = CreateHuman ;
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: CALL_OW 44
5175: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5176: LD_VAR 0 3
5180: PPUSH
5181: LD_INT 28
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5191: LD_VAR 0 3
5195: PPUSH
5196: CALL_OW 87
// wait ( 0 0$1 ) ;
5200: LD_INT 35
5202: PPUSH
5203: CALL_OW 67
// DialogueOn ;
5207: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_STRING D4-Sol1-5
5218: PPUSH
5219: CALL_OW 88
// DialogueOff ;
5223: CALL_OW 7
// tempCharles = un ;
5227: LD_ADDR_EXP 13
5231: PUSH
5232: LD_VAR 0 3
5236: ST_TO_ADDR
// end ; if number = 7 then
5237: LD_VAR 0 1
5241: PUSH
5242: LD_INT 7
5244: EQUAL
5245: IFFALSE 5517
// begin hc_class := 1 ;
5247: LD_ADDR_OWVAR 28
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// hc_sex := sex_female ;
5255: LD_ADDR_OWVAR 27
5259: PUSH
5260: LD_INT 2
5262: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5263: LD_ADDR_OWVAR 33
5267: PUSH
5268: LD_STRING AmGalRemake
5270: ST_TO_ADDR
// hc_face_number := 2 ;
5271: LD_ADDR_OWVAR 34
5275: PUSH
5276: LD_INT 2
5278: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5279: LD_ADDR_OWVAR 26
5283: PUSH
5284: LD_STRING Rebecca Macdonald
5286: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5287: LD_ADDR_OWVAR 29
5291: PUSH
5292: LD_INT 10
5294: PUSH
5295: LD_INT 10
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5302: LD_ADDR_OWVAR 30
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: LD_INT 0
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5325: LD_ADDR_OWVAR 31
5329: PUSH
5330: LD_INT 1
5332: PUSH
5333: LD_INT 0
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: ST_TO_ADDR
// un = CreateHuman ;
5348: LD_ADDR_VAR 0 3
5352: PUSH
5353: CALL_OW 44
5357: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5358: LD_VAR 0 3
5362: PPUSH
5363: LD_INT 29
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5373: LD_VAR 0 3
5377: PPUSH
5378: CALL_OW 87
// wait ( 0 0$1 ) ;
5382: LD_INT 35
5384: PPUSH
5385: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5389: LD_INT 30
5391: PPUSH
5392: LD_INT 22
5394: PUSH
5395: LD_INT 3
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PPUSH
5402: CALL_OW 70
5406: IFFALSE 5517
// begin DialogueOn ;
5408: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5412: LD_VAR 0 3
5416: PPUSH
5417: CALL_OW 250
5421: PPUSH
5422: LD_VAR 0 3
5426: PPUSH
5427: CALL_OW 251
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: LD_INT 15
5437: NEG
5438: PPUSH
5439: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5443: LD_VAR 0 3
5447: PPUSH
5448: CALL_OW 250
5452: PPUSH
5453: LD_VAR 0 3
5457: PPUSH
5458: CALL_OW 251
5462: PPUSH
5463: LD_INT 1
5465: PPUSH
5466: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5470: LD_VAR 0 3
5474: PPUSH
5475: LD_STRING D11a-FSol2-1
5477: PPUSH
5478: CALL_OW 88
// DialogueOff ;
5482: CALL_OW 7
// DoNotAttack ( 3 , un ) ;
5486: LD_INT 3
5488: PPUSH
5489: LD_VAR 0 3
5493: PPUSH
5494: CALL_OW 471
// wait ( 0 0$2 ) ;
5498: LD_INT 70
5500: PPUSH
5501: CALL_OW 67
// NormalAttack ( 3 , un ) ;
5505: LD_INT 3
5507: PPUSH
5508: LD_VAR 0 3
5512: PPUSH
5513: CALL_OW 472
// end ; end ; if number = 8 then
5517: LD_VAR 0 1
5521: PUSH
5522: LD_INT 8
5524: EQUAL
5525: IFFALSE 5681
// begin hc_class := 1 ;
5527: LD_ADDR_OWVAR 28
5531: PUSH
5532: LD_INT 1
5534: ST_TO_ADDR
// hc_sex := sex_female ;
5535: LD_ADDR_OWVAR 27
5539: PUSH
5540: LD_INT 2
5542: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
5543: LD_ADDR_OWVAR 33
5547: PUSH
5548: LD_STRING SecondCharsGal
5550: ST_TO_ADDR
// hc_face_number := 42 ;
5551: LD_ADDR_OWVAR 34
5555: PUSH
5556: LD_INT 42
5558: ST_TO_ADDR
// hc_name := Margherite Simpson ;
5559: LD_ADDR_OWVAR 26
5563: PUSH
5564: LD_STRING Margherite Simpson
5566: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5567: LD_ADDR_OWVAR 29
5571: PUSH
5572: LD_INT 12
5574: PUSH
5575: LD_INT 10
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
5582: LD_ADDR_OWVAR 30
5586: PUSH
5587: LD_INT 1
5589: PUSH
5590: LD_INT 2
5592: PUSH
5593: LD_INT 0
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
5605: LD_ADDR_OWVAR 31
5609: PUSH
5610: LD_INT 1
5612: PUSH
5613: LD_INT 2
5615: PUSH
5616: LD_INT 0
5618: PUSH
5619: LD_INT 1
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: ST_TO_ADDR
// un = CreateHuman ;
5628: LD_ADDR_VAR 0 3
5632: PUSH
5633: CALL_OW 44
5637: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn8 , true ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_INT 33
5645: PPUSH
5646: LD_INT 1
5648: PPUSH
5649: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5653: LD_VAR 0 3
5657: PPUSH
5658: CALL_OW 87
// wait ( 0 0$1 ) ;
5662: LD_INT 35
5664: PPUSH
5665: CALL_OW 67
// Say ( un , D11e-FSol4-1 ) ;
5669: LD_VAR 0 3
5673: PPUSH
5674: LD_STRING D11e-FSol4-1
5676: PPUSH
5677: CALL_OW 88
// end ; arrivals := arrivals union un ;
5681: LD_ADDR_EXP 44
5685: PUSH
5686: LD_EXP 44
5690: PUSH
5691: LD_VAR 0 3
5695: UNION
5696: ST_TO_ADDR
// end ; end_of_file
5697: LD_VAR 0 2
5701: RET
// export ruAttackers , ruAttackersInForest ; export function PrepareRussian ; var i ; begin
5702: LD_INT 0
5704: PPUSH
5705: PPUSH
// ruAttackers := [ ] ;
5706: LD_ADDR_EXP 47
5710: PUSH
5711: EMPTY
5712: ST_TO_ADDR
// ruAttackersInForest := [ ] ;
5713: LD_ADDR_EXP 48
5717: PUSH
5718: EMPTY
5719: ST_TO_ADDR
// if Difficulty < 3 then
5720: LD_OWVAR 67
5724: PUSH
5725: LD_INT 3
5727: LESS
5728: IFFALSE 5745
// RemoveUnit ( HexInfo ( 130 , 81 ) ) ;
5730: LD_INT 130
5732: PPUSH
5733: LD_INT 81
5735: PPUSH
5736: CALL_OW 428
5740: PPUSH
5741: CALL_OW 64
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5745: LD_INT 3
5747: PPUSH
5748: LD_INT 3
5750: PPUSH
5751: LD_INT 2
5753: PPUSH
5754: LD_EXP 34
5758: PPUSH
5759: LD_EXP 35
5763: PPUSH
5764: CALL_OW 12
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: CALL 6949 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5779: LD_INT 3
5781: PPUSH
5782: LD_INT 3
5784: PPUSH
5785: LD_INT 8
5787: PPUSH
5788: LD_EXP 34
5792: PPUSH
5793: LD_EXP 35
5797: PPUSH
5798: CALL_OW 12
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: LD_INT 4
5808: PPUSH
5809: CALL 6949 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5813: LD_INT 3
5815: PPUSH
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 67
5821: PPUSH
5822: LD_EXP 34
5826: PPUSH
5827: LD_EXP 35
5831: PPUSH
5832: CALL_OW 12
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: CALL 6949 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5847: LD_INT 3
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 21
5855: PPUSH
5856: LD_EXP 34
5860: PPUSH
5861: LD_EXP 35
5865: PPUSH
5866: CALL_OW 12
5870: PPUSH
5871: LD_INT 3
5873: PPUSH
5874: LD_INT 6
5876: PPUSH
5877: CALL 6949 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5881: LD_INT 3
5883: PPUSH
5884: LD_INT 3
5886: PPUSH
5887: LD_INT 17
5889: PPUSH
5890: LD_EXP 34
5894: PPUSH
5895: LD_EXP 35
5899: PPUSH
5900: CALL_OW 12
5904: PPUSH
5905: LD_INT 3
5907: PPUSH
5908: LD_INT 6
5910: PPUSH
5911: CALL 6949 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5915: LD_INT 3
5917: PPUSH
5918: LD_INT 3
5920: PPUSH
5921: LD_INT 32
5923: PPUSH
5924: LD_EXP 34
5928: PPUSH
5929: LD_EXP 35
5933: PPUSH
5934: CALL_OW 12
5938: PPUSH
5939: LD_INT 4
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: CALL 6949 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5949: LD_ADDR_VAR 0 2
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 21
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 30
5976: PUSH
5977: LD_INT 32
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 69
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6035
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5997: LD_INT 3
5999: PPUSH
6000: LD_INT 3
6002: PPUSH
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_EXP 34
6012: PPUSH
6013: LD_EXP 35
6017: PPUSH
6018: CALL_OW 12
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: CALL 6949 0 6
6033: GO 5994
6035: POP
6036: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
6037: LD_ADDR_VAR 0 2
6041: PUSH
6042: LD_INT 22
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 21
6054: PUSH
6055: LD_INT 3
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 30
6064: PUSH
6065: LD_INT 31
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: PPUSH
6077: CALL_OW 69
6081: PUSH
6082: FOR_IN
6083: IFFALSE 6111
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
6085: LD_EXP 34
6089: PPUSH
6090: LD_EXP 35
6094: PPUSH
6095: CALL_OW 12
6099: PPUSH
6100: LD_VAR 0 2
6104: PPUSH
6105: CALL 7059 0 2
6109: GO 6082
6111: POP
6112: POP
// ResAllTechs ( 3 , rulab , 3 ) ;
6113: LD_INT 3
6115: PPUSH
6116: LD_INT 32
6118: PPUSH
6119: LD_INT 3
6121: PPUSH
6122: CALL 7338 0 3
// end ;
6126: LD_VAR 0 1
6130: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6131: LD_INT 22
6133: PUSH
6134: LD_INT 3
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: LD_INT 32
6143: PUSH
6144: LD_INT 1
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PPUSH
6155: CALL_OW 69
6159: IFFALSE 6236
6161: GO 6163
6163: DISABLE
6164: LD_INT 0
6166: PPUSH
// begin enable ;
6167: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6168: LD_ADDR_VAR 0 1
6172: PUSH
6173: LD_INT 22
6175: PUSH
6176: LD_INT 3
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 32
6185: PUSH
6186: LD_INT 1
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: PUSH
6202: FOR_IN
6203: IFFALSE 6234
// if GetFuel ( i ) < 3 then
6205: LD_VAR 0 1
6209: PPUSH
6210: CALL_OW 261
6214: PUSH
6215: LD_INT 3
6217: LESS
6218: IFFALSE 6232
// SetFuel ( i , 3 ) ;
6220: LD_VAR 0 1
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: CALL_OW 240
6232: GO 6202
6234: POP
6235: POP
// end ;
6236: PPOPN 1
6238: END
// every 9 9$00 trigger Difficulty > 1 do var i , un , points , tag ;
6239: LD_OWVAR 67
6243: PUSH
6244: LD_INT 1
6246: GREATER
6247: IFFALSE 6808
6249: GO 6251
6251: DISABLE
6252: LD_INT 0
6254: PPUSH
6255: PPUSH
6256: PPUSH
6257: PPUSH
// begin uc_side := 3 ;
6258: LD_ADDR_OWVAR 20
6262: PUSH
6263: LD_INT 3
6265: ST_TO_ADDR
// uc_nation := 3 ;
6266: LD_ADDR_OWVAR 21
6270: PUSH
6271: LD_INT 3
6273: ST_TO_ADDR
// for i := 1 to 2 do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: DOUBLE
6280: LD_INT 1
6282: DEC
6283: ST_TO_ADDR
6284: LD_INT 2
6286: PUSH
6287: FOR_TO
6288: IFFALSE 6398
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6290: LD_INT 0
6292: PPUSH
6293: LD_INT 4
6295: PUSH
6296: LD_INT 5
6298: PUSH
6299: LD_INT 6
6301: PUSH
6302: LD_INT 6
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: PUSH
6311: LD_OWVAR 67
6315: ARRAY
6316: PPUSH
6317: CALL_OW 381
// un := CreateHuman ;
6321: LD_ADDR_VAR 0 2
6325: PUSH
6326: CALL_OW 44
6330: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6331: LD_VAR 0 2
6335: PPUSH
6336: LD_INT 91
6338: PPUSH
6339: LD_INT 87
6341: PPUSH
6342: LD_INT 3
6344: PPUSH
6345: LD_INT 0
6347: PPUSH
6348: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6352: LD_ADDR_EXP 48
6356: PUSH
6357: LD_EXP 48
6361: PPUSH
6362: LD_EXP 48
6366: PUSH
6367: LD_INT 1
6369: PLUS
6370: PPUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 1
6380: ST_TO_ADDR
// ComAgressiveMove ( un , 46 , 78 ) ;
6381: LD_VAR 0 2
6385: PPUSH
6386: LD_INT 46
6388: PPUSH
6389: LD_INT 78
6391: PPUSH
6392: CALL_OW 114
// end ;
6396: GO 6287
6398: POP
6399: POP
// if Difficulty > 2 then
6400: LD_OWVAR 67
6404: PUSH
6405: LD_INT 2
6407: GREATER
6408: IFFALSE 6536
// begin for i := 1 to 3 do
6410: LD_ADDR_VAR 0 1
6414: PUSH
6415: DOUBLE
6416: LD_INT 1
6418: DEC
6419: ST_TO_ADDR
6420: LD_INT 3
6422: PUSH
6423: FOR_TO
6424: IFFALSE 6534
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
6426: LD_INT 0
6428: PPUSH
6429: LD_INT 4
6431: PUSH
6432: LD_INT 5
6434: PUSH
6435: LD_INT 6
6437: PUSH
6438: LD_INT 6
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: PUSH
6447: LD_OWVAR 67
6451: ARRAY
6452: PPUSH
6453: CALL_OW 381
// un := CreateHuman ;
6457: LD_ADDR_VAR 0 2
6461: PUSH
6462: CALL_OW 44
6466: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 87 , 3 , false ) ;
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_INT 91
6474: PPUSH
6475: LD_INT 87
6477: PPUSH
6478: LD_INT 3
6480: PPUSH
6481: LD_INT 0
6483: PPUSH
6484: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
6488: LD_ADDR_EXP 48
6492: PUSH
6493: LD_EXP 48
6497: PPUSH
6498: LD_EXP 48
6502: PUSH
6503: LD_INT 1
6505: PLUS
6506: PPUSH
6507: LD_VAR 0 2
6511: PPUSH
6512: CALL_OW 1
6516: ST_TO_ADDR
// ComAgressiveMove ( un , 89 , 148 ) ;
6517: LD_VAR 0 2
6521: PPUSH
6522: LD_INT 89
6524: PPUSH
6525: LD_INT 148
6527: PPUSH
6528: CALL_OW 114
// end ;
6532: GO 6423
6534: POP
6535: POP
// end ; points := [ [ 33 , 61 ] , [ 49 , 85 ] , [ 76 , 99 ] , [ 81 , 135 ] , [ 111 , 155 ] , [ 147 , 158 ] ] ;
6536: LD_ADDR_VAR 0 3
6540: PUSH
6541: LD_INT 33
6543: PUSH
6544: LD_INT 61
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: LD_INT 49
6553: PUSH
6554: LD_INT 85
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 76
6563: PUSH
6564: LD_INT 99
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 81
6573: PUSH
6574: LD_INT 135
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 111
6583: PUSH
6584: LD_INT 155
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 147
6593: PUSH
6594: LD_INT 158
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
6609: LD_INT 1050
6611: PPUSH
6612: CALL_OW 67
// for i := 1 to ruAttackersInForest do
6616: LD_ADDR_VAR 0 1
6620: PUSH
6621: DOUBLE
6622: LD_INT 1
6624: DEC
6625: ST_TO_ADDR
6626: LD_EXP 48
6630: PUSH
6631: FOR_TO
6632: IFFALSE 6799
// begin un := ruAttackersInForest [ i ] ;
6634: LD_ADDR_VAR 0 2
6638: PUSH
6639: LD_EXP 48
6643: PUSH
6644: LD_VAR 0 1
6648: ARRAY
6649: ST_TO_ADDR
// tag := GetTag ( un ) ;
6650: LD_ADDR_VAR 0 4
6654: PUSH
6655: LD_VAR 0 2
6659: PPUSH
6660: CALL_OW 110
6664: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6665: LD_VAR 0 2
6669: PPUSH
6670: CALL_OW 302
6674: PUSH
6675: LD_VAR 0 2
6679: PPUSH
6680: CALL_OW 314
6684: NOT
6685: AND
6686: IFFALSE 6797
// begin if tag <> i then
6688: LD_VAR 0 4
6692: PUSH
6693: LD_VAR 0 1
6697: NONEQUAL
6698: IFFALSE 6726
// begin SetTag ( un , i ) ;
6700: LD_VAR 0 2
6704: PPUSH
6705: LD_VAR 0 1
6709: PPUSH
6710: CALL_OW 109
// tag := i ;
6714: LD_ADDR_VAR 0 4
6718: PUSH
6719: LD_VAR 0 1
6723: ST_TO_ADDR
// end else
6724: GO 6758
// begin SetTag ( un , i + 1 ) ;
6726: LD_VAR 0 2
6730: PPUSH
6731: LD_VAR 0 1
6735: PUSH
6736: LD_INT 1
6738: PLUS
6739: PPUSH
6740: CALL_OW 109
// tag := i + 1 ;
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_VAR 0 1
6753: PUSH
6754: LD_INT 1
6756: PLUS
6757: ST_TO_ADDR
// end ; ComAgressiveMove ( un , points [ tag ] [ 1 ] , points [ tag ] [ 2 ] ) ;
6758: LD_VAR 0 2
6762: PPUSH
6763: LD_VAR 0 3
6767: PUSH
6768: LD_VAR 0 4
6772: ARRAY
6773: PUSH
6774: LD_INT 1
6776: ARRAY
6777: PPUSH
6778: LD_VAR 0 3
6782: PUSH
6783: LD_VAR 0 4
6787: ARRAY
6788: PUSH
6789: LD_INT 2
6791: ARRAY
6792: PPUSH
6793: CALL_OW 114
// end ; end ;
6797: GO 6631
6799: POP
6800: POP
// until not ruAttackersInForest ;
6801: LD_EXP 48
6805: NOT
6806: IFFALSE 6609
// end ; end_of_file
6808: PPOPN 4
6810: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6811: LD_INT 0
6813: PPUSH
6814: PPUSH
6815: PPUSH
// if not characters then
6816: LD_VAR 0 1
6820: NOT
6821: IFFALSE 6825
// exit ;
6823: GO 6904
// speaker := characters [ rand ( 1 , characters ) ] ;
6825: LD_ADDR_VAR 0 6
6829: PUSH
6830: LD_VAR 0 1
6834: PUSH
6835: LD_INT 1
6837: PPUSH
6838: LD_VAR 0 1
6842: PPUSH
6843: CALL_OW 12
6847: ARRAY
6848: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6849: LD_VAR 0 6
6853: PPUSH
6854: CALL_OW 258
6858: PUSH
6859: LD_INT 1
6861: EQUAL
6862: IFFALSE 6880
// Say ( speaker , dialogMID ) else
6864: LD_VAR 0 6
6868: PPUSH
6869: LD_VAR 0 2
6873: PPUSH
6874: CALL_OW 88
6878: GO 6894
// Say ( speaker , dialogFID ) ;
6880: LD_VAR 0 6
6884: PPUSH
6885: LD_VAR 0 3
6889: PPUSH
6890: CALL_OW 88
// result := speaker ;
6894: LD_ADDR_VAR 0 4
6898: PUSH
6899: LD_VAR 0 6
6903: ST_TO_ADDR
// end ;
6904: LD_VAR 0 4
6908: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
// for i in charactersList do
6913: LD_ADDR_VAR 0 4
6917: PUSH
6918: LD_VAR 0 1
6922: PUSH
6923: FOR_IN
6924: IFFALSE 6942
// SaveCharacters ( i , ident ) ;
6926: LD_VAR 0 4
6930: PPUSH
6931: LD_VAR 0 2
6935: PPUSH
6936: CALL_OW 38
6940: GO 6923
6942: POP
6943: POP
// end ;
6944: LD_VAR 0 3
6948: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6949: LD_INT 0
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
// for i = 1 to count do
6955: LD_ADDR_VAR 0 8
6959: PUSH
6960: DOUBLE
6961: LD_INT 1
6963: DEC
6964: ST_TO_ADDR
6965: LD_VAR 0 6
6969: PUSH
6970: FOR_TO
6971: IFFALSE 7052
// begin uc_side = side ;
6973: LD_ADDR_OWVAR 20
6977: PUSH
6978: LD_VAR 0 1
6982: ST_TO_ADDR
// uc_nation = nation ;
6983: LD_ADDR_OWVAR 21
6987: PUSH
6988: LD_VAR 0 2
6992: ST_TO_ADDR
// hc_gallery =  ;
6993: LD_ADDR_OWVAR 33
6997: PUSH
6998: LD_STRING 
7000: ST_TO_ADDR
// hc_name =  ;
7001: LD_ADDR_OWVAR 26
7005: PUSH
7006: LD_STRING 
7008: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7009: LD_INT 0
7011: PPUSH
7012: LD_VAR 0 5
7016: PPUSH
7017: LD_VAR 0 4
7021: PPUSH
7022: CALL_OW 380
// un = CreateHuman ;
7026: LD_ADDR_VAR 0 10
7030: PUSH
7031: CALL_OW 44
7035: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7036: LD_VAR 0 10
7040: PPUSH
7041: LD_VAR 0 3
7045: PPUSH
7046: CALL_OW 52
// end ;
7050: GO 6970
7052: POP
7053: POP
// end ;
7054: LD_VAR 0 7
7058: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7059: LD_INT 0
7061: PPUSH
7062: PPUSH
7063: PPUSH
// uc_side := GetSide ( b ) ;
7064: LD_ADDR_OWVAR 20
7068: PUSH
7069: LD_VAR 0 2
7073: PPUSH
7074: CALL_OW 255
7078: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7079: LD_ADDR_OWVAR 21
7083: PUSH
7084: LD_VAR 0 2
7088: PPUSH
7089: CALL_OW 248
7093: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7094: LD_INT 0
7096: PPUSH
7097: LD_INT 1
7099: PPUSH
7100: LD_VAR 0 1
7104: PPUSH
7105: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7109: LD_ADDR_VAR 0 5
7113: PUSH
7114: LD_VAR 0 2
7118: PPUSH
7119: CALL_OW 254
7123: PUSH
7124: LD_INT 3
7126: MINUS
7127: ST_TO_ADDR
// if dir < 0 then
7128: LD_VAR 0 5
7132: PUSH
7133: LD_INT 0
7135: LESS
7136: IFFALSE 7152
// dir := 6 + dir ;
7138: LD_ADDR_VAR 0 5
7142: PUSH
7143: LD_INT 6
7145: PUSH
7146: LD_VAR 0 5
7150: PLUS
7151: ST_TO_ADDR
// un := CreateHuman ;
7152: LD_ADDR_VAR 0 4
7156: PUSH
7157: CALL_OW 44
7161: ST_TO_ADDR
// SetDir ( un , dir ) ;
7162: LD_VAR 0 4
7166: PPUSH
7167: LD_VAR 0 5
7171: PPUSH
7172: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7176: LD_VAR 0 4
7180: PPUSH
7181: LD_VAR 0 2
7185: PPUSH
7186: CALL_OW 52
// end ;
7190: LD_VAR 0 3
7194: RET
// export function PrepareDifficulty ; begin
7195: LD_INT 0
7197: PPUSH
// case Difficulty of 1 :
7198: LD_OWVAR 67
7202: PUSH
7203: LD_INT 1
7205: DOUBLE
7206: EQUAL
7207: IFTRUE 7211
7209: GO 7230
7211: POP
// begin RuSolMinLevel = 2 ;
7212: LD_ADDR_EXP 34
7216: PUSH
7217: LD_INT 2
7219: ST_TO_ADDR
// RuSolMaxLevel = 3 ;
7220: LD_ADDR_EXP 35
7224: PUSH
7225: LD_INT 3
7227: ST_TO_ADDR
// end ; 2 :
7228: GO 7291
7230: LD_INT 2
7232: DOUBLE
7233: EQUAL
7234: IFTRUE 7238
7236: GO 7257
7238: POP
// begin RuSolMinLevel = 3 ;
7239: LD_ADDR_EXP 34
7243: PUSH
7244: LD_INT 3
7246: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
7247: LD_ADDR_EXP 35
7251: PUSH
7252: LD_INT 5
7254: ST_TO_ADDR
// end ; 3 .. 4 :
7255: GO 7291
7257: LD_INT 3
7259: DOUBLE
7260: GREATEREQUAL
7261: IFFALSE 7269
7263: LD_INT 4
7265: DOUBLE
7266: LESSEQUAL
7267: IFTRUE 7271
7269: GO 7290
7271: POP
// begin RuSolMinLevel = 4 ;
7272: LD_ADDR_EXP 34
7276: PUSH
7277: LD_INT 4
7279: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7280: LD_ADDR_EXP 35
7284: PUSH
7285: LD_INT 6
7287: ST_TO_ADDR
// end ; end ;
7288: GO 7291
7290: POP
// end ;
7291: LD_VAR 0 1
7295: RET
// export function ShowQuery1 ; begin
7296: LD_INT 0
7298: PPUSH
// result := Query ( QKill ) ;
7299: LD_ADDR_VAR 0 1
7303: PUSH
7304: LD_STRING QKill
7306: PPUSH
7307: CALL_OW 97
7311: ST_TO_ADDR
// end ;
7312: LD_VAR 0 1
7316: RET
// export function ShowQuery2 ; begin
7317: LD_INT 0
7319: PPUSH
// result := Query ( QKill2 ) ;
7320: LD_ADDR_VAR 0 1
7324: PUSH
7325: LD_STRING QKill2
7327: PPUSH
7328: CALL_OW 97
7332: ST_TO_ADDR
// end ;
7333: LD_VAR 0 1
7337: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , list ; begin
7338: LD_INT 0
7340: PPUSH
7341: PPUSH
7342: PPUSH
7343: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
7344: LD_ADDR_VAR 0 7
7348: PUSH
7349: LD_INT 48
7351: PUSH
7352: LD_INT 49
7354: PUSH
7355: LD_INT 50
7357: PUSH
7358: LD_INT 20
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: LD_INT 51
7366: PUSH
7367: LD_INT 52
7369: PUSH
7370: LD_INT 69
7372: PUSH
7373: LD_INT 39
7375: PUSH
7376: LD_INT 34
7378: PUSH
7379: LD_INT 40
7381: PUSH
7382: LD_INT 53
7384: PUSH
7385: LD_INT 71
7387: PUSH
7388: LD_INT 57
7390: PUSH
7391: LD_INT 58
7393: PUSH
7394: LD_INT 44
7396: PUSH
7397: LD_INT 32
7399: PUSH
7400: LD_INT 27
7402: PUSH
7403: LD_INT 23
7405: PUSH
7406: LD_INT 33
7408: PUSH
7409: LD_INT 59
7411: PUSH
7412: LD_INT 54
7414: PUSH
7415: LD_INT 55
7417: PUSH
7418: LD_INT 56
7420: PUSH
7421: LD_INT 63
7423: PUSH
7424: LD_INT 64
7426: PUSH
7427: LD_INT 65
7429: PUSH
7430: LD_INT 30
7432: PUSH
7433: LD_INT 31
7435: PUSH
7436: LD_INT 21
7438: PUSH
7439: LD_INT 22
7441: PUSH
7442: LD_INT 25
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: ST_TO_ADDR
// for i = 1 to list do
7479: LD_ADDR_VAR 0 5
7483: PUSH
7484: DOUBLE
7485: LD_INT 1
7487: DEC
7488: ST_TO_ADDR
7489: LD_VAR 0 7
7493: PUSH
7494: FOR_TO
7495: IFFALSE 7567
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
7497: LD_VAR 0 7
7501: PUSH
7502: LD_VAR 0 5
7506: ARRAY
7507: PPUSH
7508: LD_VAR 0 1
7512: PPUSH
7513: CALL_OW 321
7517: PUSH
7518: LD_INT 1
7520: EQUAL
7521: PUSH
7522: LD_VAR 0 7
7526: PUSH
7527: LD_VAR 0 5
7531: ARRAY
7532: PPUSH
7533: LD_VAR 0 3
7537: PPUSH
7538: CALL_OW 482
7542: AND
7543: IFFALSE 7565
// AddComResearch ( lab , list [ i ] ) ;
7545: LD_VAR 0 2
7549: PPUSH
7550: LD_VAR 0 7
7554: PUSH
7555: LD_VAR 0 5
7559: ARRAY
7560: PPUSH
7561: CALL_OW 184
7565: GO 7494
7567: POP
7568: POP
// end ;
7569: LD_VAR 0 4
7573: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7574: LD_INT 0
7576: PPUSH
7577: PPUSH
7578: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7579: LD_INT 22
7581: PUSH
7582: LD_VAR 0 1
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 21
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 69
7609: PUSH
7610: LD_VAR 0 3
7614: LESSEQUAL
7615: IFFALSE 7723
// begin for i = 1 to vehCount do
7617: LD_ADDR_VAR 0 9
7621: PUSH
7622: DOUBLE
7623: LD_INT 1
7625: DEC
7626: ST_TO_ADDR
7627: LD_VAR 0 3
7631: PUSH
7632: FOR_TO
7633: IFFALSE 7721
// begin weapon := weaponTab [ i ] ;
7635: LD_ADDR_VAR 0 10
7639: PUSH
7640: LD_VAR 0 4
7644: PUSH
7645: LD_VAR 0 9
7649: ARRAY
7650: ST_TO_ADDR
// if weapon = ru_heavy_gun then
7651: LD_VAR 0 10
7655: PUSH
7656: LD_INT 46
7658: EQUAL
7659: IFFALSE 7690
// AddComConstruct ( fabric , ru_heavy_tracked , engine , control , weapon ) else
7661: LD_VAR 0 2
7665: PPUSH
7666: LD_INT 24
7668: PPUSH
7669: LD_VAR 0 5
7673: PPUSH
7674: LD_VAR 0 6
7678: PPUSH
7679: LD_VAR 0 10
7683: PPUSH
7684: CALL_OW 185
7688: GO 7719
// AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7690: LD_VAR 0 2
7694: PPUSH
7695: LD_VAR 0 7
7699: PPUSH
7700: LD_VAR 0 5
7704: PPUSH
7705: LD_VAR 0 6
7709: PPUSH
7710: LD_VAR 0 10
7714: PPUSH
7715: CALL_OW 185
// end ;
7719: GO 7632
7721: POP
7722: POP
// end ; end ;
7723: LD_VAR 0 8
7727: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
7728: LD_INT 0
7730: PPUSH
7731: PPUSH
7732: PPUSH
7733: PPUSH
7734: PPUSH
7735: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
7736: LD_ADDR_VAR 0 8
7740: PUSH
7741: LD_VAR 0 2
7745: PPUSH
7746: CALL_OW 313
7750: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7751: LD_ADDR_VAR 0 9
7755: PUSH
7756: LD_VAR 0 3
7760: PPUSH
7761: LD_INT 22
7763: PUSH
7764: LD_VAR 0 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 25
7775: PUSH
7776: LD_INT 2
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 24
7785: PUSH
7786: LD_INT 750
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: LD_INT 3
7795: PUSH
7796: LD_INT 54
7798: PUSH
7799: EMPTY
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: PPUSH
7812: CALL_OW 70
7816: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7817: LD_ADDR_VAR 0 6
7821: PUSH
7822: LD_VAR 0 3
7826: PPUSH
7827: LD_INT 22
7829: PUSH
7830: LD_VAR 0 1
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 21
7841: PUSH
7842: LD_INT 3
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: LD_INT 3
7851: PUSH
7852: LD_INT 24
7854: PUSH
7855: LD_INT 1000
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: PPUSH
7874: CALL_OW 70
7878: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7879: LD_VAR 0 6
7883: NOT
7884: PUSH
7885: LD_INT 22
7887: PUSH
7888: LD_VAR 0 1
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 25
7899: PUSH
7900: LD_INT 2
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 24
7909: PUSH
7910: LD_INT 250
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: LIST
7921: PPUSH
7922: CALL_OW 69
7926: NOT
7927: AND
7928: IFFALSE 7932
// exit ;
7930: GO 8090
// if buildingsList and engineerOkInside then
7932: LD_VAR 0 6
7936: PUSH
7937: LD_VAR 0 8
7941: AND
7942: IFFALSE 7953
// ComExitBuilding ( engineerOkInside ) ;
7944: LD_VAR 0 8
7948: PPUSH
7949: CALL_OW 122
// if buildingsList and engineerOkOutside then
7953: LD_VAR 0 6
7957: PUSH
7958: LD_VAR 0 9
7962: AND
7963: IFFALSE 7983
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
7965: LD_VAR 0 9
7969: PPUSH
7970: LD_VAR 0 6
7974: PUSH
7975: LD_INT 1
7977: ARRAY
7978: PPUSH
7979: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
7983: LD_VAR 0 6
7987: PUSH
7988: LD_INT 0
7990: EQUAL
7991: PUSH
7992: LD_VAR 0 4
7996: PUSH
7997: LD_INT 0
7999: EQUAL
8000: AND
8001: PUSH
8002: LD_VAR 0 9
8006: AND
8007: IFFALSE 8023
// ComEnterUnit ( engineerOkOutside , depot ) ;
8009: LD_VAR 0 9
8013: PPUSH
8014: LD_VAR 0 2
8018: PPUSH
8019: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
8023: LD_VAR 0 9
8027: PUSH
8028: LD_VAR 0 6
8032: PUSH
8033: LD_INT 0
8035: EQUAL
8036: AND
8037: PUSH
8038: LD_VAR 0 4
8042: AND
8043: IFFALSE 8090
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8045: LD_VAR 0 9
8049: PPUSH
8050: LD_VAR 0 4
8054: PUSH
8055: LD_INT 1
8057: ARRAY
8058: PPUSH
8059: LD_VAR 0 4
8063: PUSH
8064: LD_INT 2
8066: ARRAY
8067: PPUSH
8068: LD_VAR 0 4
8072: PUSH
8073: LD_INT 3
8075: ARRAY
8076: PPUSH
8077: LD_VAR 0 4
8081: PUSH
8082: LD_INT 4
8084: ARRAY
8085: PPUSH
8086: CALL_OW 145
// end ;
8090: LD_VAR 0 5
8094: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8095: LD_INT 0
8097: PPUSH
8098: PPUSH
8099: PPUSH
8100: PPUSH
8101: PPUSH
8102: PPUSH
8103: PPUSH
8104: PPUSH
8105: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8106: LD_ADDR_VAR 0 6
8110: PUSH
8111: LD_INT 22
8113: PUSH
8114: LD_VAR 0 1
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 25
8125: PUSH
8126: LD_INT 4
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: LD_INT 23
8135: PUSH
8136: LD_INT 2
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 24
8145: PUSH
8146: LD_INT 251
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: PPUSH
8159: CALL_OW 69
8163: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8164: LD_ADDR_VAR 0 7
8168: PUSH
8169: LD_VAR 0 3
8173: PPUSH
8174: LD_INT 22
8176: PUSH
8177: LD_VAR 0 1
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: LD_INT 23
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: LD_INT 25
8198: PUSH
8199: LD_INT 4
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 50
8208: PUSH
8209: EMPTY
8210: LIST
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: PPUSH
8218: CALL_OW 70
8222: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8223: LD_ADDR_VAR 0 10
8227: PUSH
8228: LD_VAR 0 3
8232: PPUSH
8233: LD_INT 22
8235: PUSH
8236: LD_VAR 0 1
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 21
8247: PUSH
8248: LD_INT 1
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PUSH
8255: LD_INT 3
8257: PUSH
8258: LD_INT 25
8260: PUSH
8261: LD_INT 3
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: LD_INT 3
8274: PUSH
8275: LD_INT 24
8277: PUSH
8278: LD_INT 750
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: PPUSH
8295: CALL_OW 70
8299: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8300: LD_ADDR_VAR 0 11
8304: PUSH
8305: LD_VAR 0 2
8309: PPUSH
8310: LD_INT 22
8312: PUSH
8313: LD_VAR 0 1
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 21
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 3
8334: PUSH
8335: LD_INT 25
8337: PUSH
8338: LD_INT 3
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 3
8351: PUSH
8352: LD_INT 24
8354: PUSH
8355: LD_INT 1000
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: PPUSH
8372: CALL_OW 70
8376: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8377: LD_VAR 0 10
8381: NOT
8382: PUSH
8383: LD_VAR 0 11
8387: NOT
8388: AND
8389: PUSH
8390: LD_VAR 0 6
8394: NOT
8395: AND
8396: IFFALSE 8400
// exit ;
8398: GO 8606
// if damageUnits and sci_list then
8400: LD_VAR 0 10
8404: PUSH
8405: LD_VAR 0 6
8409: AND
8410: IFFALSE 8426
// ComMoveToArea ( damageUnits , healArea ) ;
8412: LD_VAR 0 10
8416: PPUSH
8417: LD_VAR 0 2
8421: PPUSH
8422: CALL_OW 113
// if unitsToHeal and sci_list then
8426: LD_VAR 0 11
8430: PUSH
8431: LD_VAR 0 6
8435: AND
8436: IFFALSE 8447
// ComExitBuilding ( sci_list ) ;
8438: LD_VAR 0 6
8442: PPUSH
8443: CALL_OW 122
// if unitsToHeal and sci_listOutside then
8447: LD_VAR 0 11
8451: PUSH
8452: LD_VAR 0 7
8456: AND
8457: IFFALSE 8477
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8459: LD_VAR 0 7
8463: PPUSH
8464: LD_VAR 0 11
8468: PUSH
8469: LD_INT 1
8471: ARRAY
8472: PPUSH
8473: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside then
8477: LD_VAR 0 10
8481: PUSH
8482: LD_INT 0
8484: EQUAL
8485: PUSH
8486: LD_VAR 0 11
8490: PUSH
8491: LD_INT 0
8493: EQUAL
8494: AND
8495: PUSH
8496: LD_VAR 0 7
8500: AND
8501: IFFALSE 8606
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8503: LD_ADDR_VAR 0 12
8507: PUSH
8508: LD_INT 22
8510: PUSH
8511: LD_VAR 0 1
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: LD_INT 21
8522: PUSH
8523: LD_INT 3
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 30
8532: PUSH
8533: LD_INT 8
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 69
8549: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
8550: LD_ADDR_VAR 0 13
8554: PUSH
8555: LD_INT 1
8557: PPUSH
8558: LD_VAR 0 12
8562: PPUSH
8563: CALL_OW 12
8567: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8568: LD_VAR 0 7
8572: PPUSH
8573: LD_INT 3
8575: PUSH
8576: LD_INT 60
8578: PUSH
8579: EMPTY
8580: LIST
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PPUSH
8586: CALL_OW 72
8590: PPUSH
8591: LD_VAR 0 12
8595: PUSH
8596: LD_VAR 0 13
8600: ARRAY
8601: PPUSH
8602: CALL_OW 120
// end ; end ;
8606: LD_VAR 0 5
8610: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
8611: LD_INT 0
8613: PPUSH
8614: PPUSH
8615: PPUSH
8616: PPUSH
8617: PPUSH
// tmp := [ ] ;
8618: LD_ADDR_VAR 0 6
8622: PUSH
8623: EMPTY
8624: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
8625: LD_ADDR_VAR 0 7
8629: PUSH
8630: LD_INT 22
8632: PUSH
8633: LD_VAR 0 1
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 30
8644: PUSH
8645: LD_INT 32
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PPUSH
8656: CALL_OW 69
8660: ST_TO_ADDR
// if bunkers then
8661: LD_VAR 0 7
8665: IFFALSE 8735
// for i in bunkers do
8667: LD_ADDR_VAR 0 4
8671: PUSH
8672: LD_VAR 0 7
8676: PUSH
8677: FOR_IN
8678: IFFALSE 8733
// for j in UnitsInside ( i ) do
8680: LD_ADDR_VAR 0 5
8684: PUSH
8685: LD_VAR 0 4
8689: PPUSH
8690: CALL_OW 313
8694: PUSH
8695: FOR_IN
8696: IFFALSE 8729
// tmp := Replace ( tmp , tmp + 1 , j ) ;
8698: LD_ADDR_VAR 0 6
8702: PUSH
8703: LD_VAR 0 6
8707: PPUSH
8708: LD_VAR 0 6
8712: PUSH
8713: LD_INT 1
8715: PLUS
8716: PPUSH
8717: LD_VAR 0 5
8721: PPUSH
8722: CALL_OW 1
8726: ST_TO_ADDR
8727: GO 8695
8729: POP
8730: POP
8731: GO 8677
8733: POP
8734: POP
// if tmp then
8735: LD_VAR 0 6
8739: IFFALSE 8779
// begin ComExitBuilding ( tmp ) ;
8741: LD_VAR 0 6
8745: PPUSH
8746: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
8750: LD_VAR 0 6
8754: PPUSH
8755: LD_VAR 0 2
8759: PPUSH
8760: CALL_OW 250
8764: PPUSH
8765: LD_VAR 0 2
8769: PPUSH
8770: CALL_OW 251
8774: PPUSH
8775: CALL_OW 174
// end ; end ;
8779: LD_VAR 0 3
8783: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var cargoList , crateList ; begin
8784: LD_INT 0
8786: PPUSH
8787: PPUSH
8788: PPUSH
// enable ;
8789: ENABLE
// crateList := GetListOfCratesInArea ( cratesArea ) ;
8790: LD_ADDR_VAR 0 6
8794: PUSH
8795: LD_VAR 0 3
8799: PPUSH
8800: CALL_OW 435
8804: ST_TO_ADDR
// cargoList := FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8805: LD_ADDR_VAR 0 5
8809: PUSH
8810: LD_INT 22
8812: PUSH
8813: LD_VAR 0 1
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: LD_INT 34
8824: PUSH
8825: LD_VAR 0 2
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PPUSH
8838: CALL_OW 69
8842: ST_TO_ADDR
// if cargoList and GetListOfCratesInArea ( cratesArea ) and crateList then
8843: LD_VAR 0 5
8847: PUSH
8848: LD_VAR 0 3
8852: PPUSH
8853: CALL_OW 435
8857: AND
8858: PUSH
8859: LD_VAR 0 6
8863: AND
8864: IFFALSE 8897
// AddComCollect ( cargoList [ 1 ] , crateList [ 1 ] , crateList [ 2 ] ) ;
8866: LD_VAR 0 5
8870: PUSH
8871: LD_INT 1
8873: ARRAY
8874: PPUSH
8875: LD_VAR 0 6
8879: PUSH
8880: LD_INT 1
8882: ARRAY
8883: PPUSH
8884: LD_VAR 0 6
8888: PUSH
8889: LD_INT 2
8891: ARRAY
8892: PPUSH
8893: CALL_OW 177
// end ;
8897: LD_VAR 0 4
8901: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiersList , turretList , tmp , barrackList , insideUnits ; begin
8902: LD_INT 0
8904: PPUSH
8905: PPUSH
8906: PPUSH
8907: PPUSH
8908: PPUSH
8909: PPUSH
8910: PPUSH
8911: PPUSH
// soldiersList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff ( ruAttackers union ruAttackersInForest ) ;
8912: LD_ADDR_VAR 0 6
8916: PUSH
8917: LD_VAR 0 2
8921: PPUSH
8922: LD_INT 22
8924: PUSH
8925: LD_VAR 0 1
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: PUSH
8934: LD_INT 56
8936: PUSH
8937: EMPTY
8938: LIST
8939: PUSH
8940: LD_INT 24
8942: PUSH
8943: LD_INT 700
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 3
8952: PUSH
8953: LD_INT 60
8955: PUSH
8956: EMPTY
8957: LIST
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 2
8965: PUSH
8966: LD_INT 25
8968: PUSH
8969: LD_INT 1
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 25
8978: PUSH
8979: LD_INT 5
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 25
8988: PUSH
8989: LD_INT 8
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 25
8998: PUSH
8999: LD_INT 9
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: PPUSH
9020: CALL_OW 70
9024: PUSH
9025: LD_EXP 47
9029: PUSH
9030: LD_EXP 48
9034: UNION
9035: DIFF
9036: ST_TO_ADDR
// turretList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9037: LD_ADDR_VAR 0 7
9041: PUSH
9042: LD_VAR 0 2
9046: PPUSH
9047: LD_INT 22
9049: PUSH
9050: LD_VAR 0 1
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 30
9061: PUSH
9062: LD_INT 32
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 58
9071: PUSH
9072: EMPTY
9073: LIST
9074: PUSH
9075: LD_INT 24
9077: PUSH
9078: LD_INT 251
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 70
9095: ST_TO_ADDR
// barrackList := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9096: LD_ADDR_VAR 0 9
9100: PUSH
9101: LD_VAR 0 2
9105: PPUSH
9106: LD_INT 22
9108: PUSH
9109: LD_VAR 0 1
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: PUSH
9118: LD_INT 2
9120: PUSH
9121: LD_INT 30
9123: PUSH
9124: LD_INT 4
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PUSH
9131: LD_INT 30
9133: PUSH
9134: LD_INT 5
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 24
9148: PUSH
9149: LD_INT 251
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: PPUSH
9161: CALL_OW 70
9165: ST_TO_ADDR
// if barrackList then
9166: LD_VAR 0 9
9170: IFFALSE 9326
// begin if turretList = 0 then
9172: LD_VAR 0 7
9176: PUSH
9177: LD_INT 0
9179: EQUAL
9180: IFFALSE 9218
// begin if soldiersList then
9182: LD_VAR 0 6
9186: IFFALSE 9216
// ComEnterUnit ( soldiersList , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9188: LD_VAR 0 6
9192: PPUSH
9193: LD_VAR 0 9
9197: PUSH
9198: LD_INT 1
9200: PPUSH
9201: LD_VAR 0 9
9205: PPUSH
9206: CALL_OW 12
9210: ARRAY
9211: PPUSH
9212: CALL_OW 120
// end else
9216: GO 9326
// begin for i in barrackList do
9218: LD_ADDR_VAR 0 4
9222: PUSH
9223: LD_VAR 0 9
9227: PUSH
9228: FOR_IN
9229: IFFALSE 9324
// begin if not turretList then
9231: LD_VAR 0 7
9235: NOT
9236: IFFALSE 9242
// exit ;
9238: POP
9239: POP
9240: GO 9326
// insideUnits = UnitsInside ( i ) ;
9242: LD_ADDR_VAR 0 10
9246: PUSH
9247: LD_VAR 0 4
9251: PPUSH
9252: CALL_OW 313
9256: ST_TO_ADDR
// if insideUnits then
9257: LD_VAR 0 10
9261: IFFALSE 9322
// begin tmp := insideUnits [ 1 ] ;
9263: LD_ADDR_VAR 0 8
9267: PUSH
9268: LD_VAR 0 10
9272: PUSH
9273: LD_INT 1
9275: ARRAY
9276: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
9277: LD_VAR 0 8
9281: PPUSH
9282: CALL_OW 122
// AddComEnterUnit ( tmp , turretList [ 1 ] ) ;
9286: LD_VAR 0 8
9290: PPUSH
9291: LD_VAR 0 7
9295: PUSH
9296: LD_INT 1
9298: ARRAY
9299: PPUSH
9300: CALL_OW 180
// turretList := Delete ( turretList , 1 ) ;
9304: LD_ADDR_VAR 0 7
9308: PUSH
9309: LD_VAR 0 7
9313: PPUSH
9314: LD_INT 1
9316: PPUSH
9317: CALL_OW 3
9321: ST_TO_ADDR
// end ; end ;
9322: GO 9228
9324: POP
9325: POP
// end ; end ; end ;
9326: LD_VAR 0 3
9330: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , dep , crane , craneList , buildingsList ; begin
9331: LD_INT 0
9333: PPUSH
9334: PPUSH
9335: PPUSH
9336: PPUSH
9337: PPUSH
9338: PPUSH
// craneList := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9339: LD_ADDR_VAR 0 8
9343: PUSH
9344: LD_INT 22
9346: PUSH
9347: LD_VAR 0 1
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: LD_INT 21
9358: PUSH
9359: LD_INT 2
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 34
9368: PUSH
9369: LD_INT 52
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: PPUSH
9381: CALL_OW 69
9385: ST_TO_ADDR
// if not craneList then
9386: LD_VAR 0 8
9390: NOT
9391: IFFALSE 9395
// exit ;
9393: GO 9829
// buildingsList := FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9395: LD_ADDR_VAR 0 9
9399: PUSH
9400: LD_INT 22
9402: PUSH
9403: LD_VAR 0 1
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 21
9414: PUSH
9415: LD_INT 3
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 3
9424: PUSH
9425: LD_INT 24
9427: PUSH
9428: LD_INT 1000
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: PPUSH
9447: CALL_OW 69
9451: ST_TO_ADDR
// if buildingsList and UnitFilter ( craneList , [ f_lives , 750 ] ) then
9452: LD_VAR 0 9
9456: PUSH
9457: LD_VAR 0 8
9461: PPUSH
9462: LD_INT 24
9464: PUSH
9465: LD_INT 750
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 72
9476: AND
9477: IFFALSE 9512
// ComRepairBuilding ( UnitFilter ( craneList , [ f_lives , 750 ] ) , buildingsList [ 1 ] ) ;
9479: LD_VAR 0 8
9483: PPUSH
9484: LD_INT 24
9486: PUSH
9487: LD_INT 750
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PPUSH
9494: CALL_OW 72
9498: PPUSH
9499: LD_VAR 0 9
9503: PUSH
9504: LD_INT 1
9506: ARRAY
9507: PPUSH
9508: CALL_OW 130
// if UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) then
9512: LD_VAR 0 8
9516: PPUSH
9517: LD_INT 3
9519: PUSH
9520: LD_INT 24
9522: PUSH
9523: LD_INT 750
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 72
9538: IFFALSE 9576
// ComMoveToArea ( UnitFilter ( craneList , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9540: LD_VAR 0 8
9544: PPUSH
9545: LD_INT 3
9547: PUSH
9548: LD_INT 24
9550: PUSH
9551: LD_INT 750
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PPUSH
9562: CALL_OW 72
9566: PPUSH
9567: LD_VAR 0 2
9571: PPUSH
9572: CALL_OW 113
// if craneList and buildingsList = 0 and destroyedBuildings then
9576: LD_VAR 0 8
9580: PUSH
9581: LD_VAR 0 9
9585: PUSH
9586: LD_INT 0
9588: EQUAL
9589: AND
9590: PUSH
9591: LD_VAR 0 3
9595: AND
9596: IFFALSE 9643
// AddComCraneBuild ( craneList , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9598: LD_VAR 0 8
9602: PPUSH
9603: LD_VAR 0 3
9607: PUSH
9608: LD_INT 1
9610: ARRAY
9611: PPUSH
9612: LD_VAR 0 3
9616: PUSH
9617: LD_INT 2
9619: ARRAY
9620: PPUSH
9621: LD_VAR 0 3
9625: PUSH
9626: LD_INT 3
9628: ARRAY
9629: PPUSH
9630: LD_VAR 0 3
9634: PUSH
9635: LD_INT 4
9637: ARRAY
9638: PPUSH
9639: CALL_OW 567
// crane := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9643: LD_ADDR_VAR 0 7
9647: PUSH
9648: LD_VAR 0 2
9652: PPUSH
9653: LD_INT 22
9655: PUSH
9656: LD_VAR 0 1
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 21
9667: PUSH
9668: LD_INT 2
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: LD_INT 34
9677: PUSH
9678: LD_INT 52
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PUSH
9685: LD_INT 3
9687: PUSH
9688: LD_INT 24
9690: PUSH
9691: LD_INT 750
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: PPUSH
9708: CALL_OW 70
9712: ST_TO_ADDR
// dep := FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9713: LD_ADDR_VAR 0 6
9717: PUSH
9718: LD_VAR 0 2
9722: PPUSH
9723: LD_INT 22
9725: PUSH
9726: LD_VAR 0 1
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 2
9737: PUSH
9738: LD_INT 30
9740: PUSH
9741: LD_INT 0
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: LD_INT 30
9750: PUSH
9751: LD_INT 1
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PPUSH
9767: CALL_OW 70
9771: ST_TO_ADDR
// if crane then
9772: LD_VAR 0 7
9776: IFFALSE 9829
// for i in crane do
9778: LD_ADDR_VAR 0 5
9782: PUSH
9783: LD_VAR 0 7
9787: PUSH
9788: FOR_IN
9789: IFFALSE 9827
// begin if dep then
9791: LD_VAR 0 6
9795: IFFALSE 9811
// ComMoveUnit ( i , dep ) ;
9797: LD_VAR 0 5
9801: PPUSH
9802: LD_VAR 0 6
9806: PPUSH
9807: CALL_OW 112
// AddComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9811: LD_VAR 0 5
9815: PPUSH
9816: CALL_OW 311
9820: PPUSH
9821: CALL 75759 0 1
// end ;
9825: GO 9788
9827: POP
9828: POP
// end ; end_of_file
9829: LD_VAR 0 4
9833: RET
// export function Action ; begin
9834: LD_INT 0
9836: PPUSH
// CenterNowOnXY ( 66 , 4 ) ;
9837: LD_INT 66
9839: PPUSH
9840: LD_INT 4
9842: PPUSH
9843: CALL_OW 86
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 25
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 69
9875: PUSH
9876: LD_INT 0
9878: EQUAL
9879: IFFALSE 9893
// SetClass ( JMM , 2 ) ;
9881: LD_EXP 1
9885: PPUSH
9886: LD_INT 2
9888: PPUSH
9889: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
9893: LD_STRING M1
9895: PPUSH
9896: CALL_OW 337
// case Difficulty of 1 :
9900: LD_OWVAR 67
9904: PUSH
9905: LD_INT 1
9907: DOUBLE
9908: EQUAL
9909: IFTRUE 9913
9911: GO 9923
9913: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
9914: LD_STRING M1-1
9916: PPUSH
9917: CALL_OW 337
9921: GO 9966
9923: LD_INT 2
9925: DOUBLE
9926: EQUAL
9927: IFTRUE 9931
9929: GO 9941
9931: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 .. 4 :
9932: LD_STRING M1-2
9934: PPUSH
9935: CALL_OW 337
9939: GO 9966
9941: LD_INT 3
9943: DOUBLE
9944: GREATEREQUAL
9945: IFFALSE 9953
9947: LD_INT 4
9949: DOUBLE
9950: LESSEQUAL
9951: IFTRUE 9955
9953: GO 9965
9955: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
9956: LD_STRING M1-3
9958: PPUSH
9959: CALL_OW 337
9963: GO 9966
9965: POP
// ChangeMissionObjectives ( M1cont ) ;
9966: LD_STRING M1cont
9968: PPUSH
9969: CALL_OW 337
// wait ( 0 0$2 ) ;
9973: LD_INT 70
9975: PPUSH
9976: CALL_OW 67
// SaveForQuickRestart ;
9980: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
9984: LD_INT 525
9986: PPUSH
9987: LD_INT 700
9989: PPUSH
9990: CALL_OW 12
9994: PPUSH
9995: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
9999: LD_INT 5
10001: PPUSH
10002: LD_INT 82
10004: PPUSH
10005: LD_INT 38
10007: PPUSH
10008: LD_INT 10
10010: PPUSH
10011: LD_INT 1
10013: PPUSH
10014: CALL_OW 56
// wait ( 0 0$14 ) ;
10018: LD_INT 490
10020: PPUSH
10021: CALL_OW 67
// firstCrateSpawn := true ;
10025: LD_ADDR_EXP 40
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// end ;
10033: LD_VAR 0 1
10037: RET
// every 0 0$02 trigger firstCrateSpawn do
10038: LD_EXP 40
10042: IFFALSE 10405
10044: GO 10046
10046: DISABLE
// begin if IsOk ( Lisa ) then
10047: LD_EXP 2
10051: PPUSH
10052: CALL_OW 302
10056: IFFALSE 10072
// Say ( Lisa , DR0-Lisa-1 ) else
10058: LD_EXP 2
10062: PPUSH
10063: LD_STRING DR0-Lisa-1
10065: PPUSH
10066: CALL_OW 88
10070: GO 10218
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10072: LD_INT 22
10074: PUSH
10075: LD_INT 1
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PUSH
10082: LD_INT 21
10084: PUSH
10085: LD_INT 1
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PUSH
10092: LD_INT 26
10094: PUSH
10095: LD_INT 1
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 2
10104: PUSH
10105: LD_INT 25
10107: PUSH
10108: LD_INT 1
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 25
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 25
10127: PUSH
10128: LD_INT 3
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 25
10137: PUSH
10138: LD_INT 4
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: PPUSH
10158: CALL_OW 69
10162: PUSH
10163: LD_EXP 1
10167: PUSH
10168: LD_EXP 8
10172: PUSH
10173: LD_EXP 5
10177: PUSH
10178: LD_EXP 6
10182: PUSH
10183: LD_EXP 7
10187: PUSH
10188: LD_EXP 4
10192: PUSH
10193: LD_EXP 3
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: DIFF
10207: PPUSH
10208: LD_STRING DR0-Sol1-1
10210: PPUSH
10211: LD_STRING DR0-Sol1-1
10213: PPUSH
10214: CALL 6811 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10218: LD_INT 22
10220: PUSH
10221: LD_INT 1
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: LD_INT 21
10230: PUSH
10231: LD_INT 1
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 26
10240: PUSH
10241: LD_INT 1
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 2
10250: PUSH
10251: LD_INT 25
10253: PUSH
10254: LD_INT 1
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: LD_INT 25
10263: PUSH
10264: LD_INT 2
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: LD_INT 25
10273: PUSH
10274: LD_INT 3
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 25
10283: PUSH
10284: LD_INT 4
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: PPUSH
10304: CALL_OW 69
10308: PUSH
10309: LD_EXP 1
10313: PUSH
10314: LD_EXP 8
10318: PUSH
10319: LD_EXP 5
10323: PUSH
10324: LD_EXP 2
10328: PUSH
10329: LD_EXP 6
10333: PUSH
10334: LD_EXP 7
10338: PUSH
10339: LD_EXP 4
10343: PUSH
10344: LD_EXP 3
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: DIFF
10359: PPUSH
10360: LD_STRING DR0-Sol2-1
10362: PPUSH
10363: LD_STRING DR0-Sol2-1
10365: PPUSH
10366: CALL 6811 0 3
// if IsOk ( Cyrus ) then
10370: LD_EXP 4
10374: PPUSH
10375: CALL_OW 302
10379: IFFALSE 10393
// Say ( Cyrus , DR0-Cyrus-1 ) ;
10381: LD_EXP 4
10385: PPUSH
10386: LD_STRING DR0-Cyrus-1
10388: PPUSH
10389: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
10393: LD_EXP 1
10397: PPUSH
10398: LD_STRING DR0-JMM-1
10400: PPUSH
10401: CALL_OW 88
// end ;
10405: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
10406: LD_EXP 5
10410: PPUSH
10411: CALL_OW 302
10415: PUSH
10416: LD_INT 22
10418: PUSH
10419: LD_INT 1
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: LD_INT 25
10428: PUSH
10429: LD_INT 16
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PPUSH
10440: CALL_OW 69
10444: PUSH
10445: LD_INT 0
10447: GREATER
10448: AND
10449: PUSH
10450: LD_INT 1
10452: PPUSH
10453: CALL_OW 463
10457: NOT
10458: AND
10459: IFFALSE 10737
10461: GO 10463
10463: DISABLE
// begin DialogueOn ;
10464: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10468: LD_EXP 5
10472: PPUSH
10473: LD_STRING D10-Frank-1
10475: PPUSH
10476: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10480: LD_INT 22
10482: PUSH
10483: LD_INT 1
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: LD_INT 21
10492: PUSH
10493: LD_INT 1
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: LD_INT 25
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 25
10515: PUSH
10516: LD_INT 2
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 25
10525: PUSH
10526: LD_INT 3
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 25
10535: PUSH
10536: LD_INT 4
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 69
10559: PUSH
10560: LD_EXP 1
10564: PUSH
10565: LD_EXP 5
10569: PUSH
10570: LD_EXP 2
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: DIFF
10580: PPUSH
10581: LD_STRING D10-Sol1-1
10583: PPUSH
10584: LD_STRING D10-FSol1-1
10586: PPUSH
10587: CALL 6811 0 3
// Say ( Frank , D10-Frank-2 ) ;
10591: LD_EXP 5
10595: PPUSH
10596: LD_STRING D10-Frank-2
10598: PPUSH
10599: CALL_OW 88
// if IsOK ( Lisa ) then
10603: LD_EXP 2
10607: PPUSH
10608: CALL_OW 302
10612: IFFALSE 10628
// begin Say ( Lisa , D10-Lisa-2 ) ;
10614: LD_EXP 2
10618: PPUSH
10619: LD_STRING D10-Lisa-2
10621: PPUSH
10622: CALL_OW 88
// end else
10626: GO 10733
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10628: LD_INT 22
10630: PUSH
10631: LD_INT 1
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 21
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 2
10650: PUSH
10651: LD_INT 25
10653: PUSH
10654: LD_INT 1
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 25
10663: PUSH
10664: LD_INT 2
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: PUSH
10671: LD_INT 25
10673: PUSH
10674: LD_INT 3
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 25
10683: PUSH
10684: LD_INT 4
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: LIST
10702: PPUSH
10703: CALL_OW 69
10707: PUSH
10708: LD_EXP 1
10712: PUSH
10713: LD_EXP 5
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: DIFF
10722: PPUSH
10723: LD_STRING D10-Sol1-2
10725: PPUSH
10726: LD_STRING D10-FSol1-2
10728: PPUSH
10729: CALL 6811 0 3
// end ; DialogueOff ;
10733: CALL_OW 7
// end ;
10737: END
// every 10 10$30 trigger not InBattle ( 1 ) do
10738: LD_INT 1
10740: PPUSH
10741: CALL_OW 463
10745: NOT
10746: IFFALSE 11041
10748: GO 10750
10750: DISABLE
// begin HarrisonSupport ;
10751: CALL 2491 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10755: LD_EXP 17
10759: PPUSH
10760: CALL_OW 310
10764: PPUSH
10765: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10769: LD_EXP 17
10773: PPUSH
10774: LD_STRING DEng-Eng1-1
10776: PPUSH
10777: CALL_OW 88
// wait ( 1 1$0 ) ;
10781: LD_INT 2100
10783: PPUSH
10784: CALL_OW 67
// DialogueOn ;
10788: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10792: LD_EXP 14
10796: PPUSH
10797: LD_STRING DRem-Har-1
10799: PPUSH
10800: CALL_OW 94
// if contactWithRussian = 1 then
10804: LD_EXP 22
10808: PUSH
10809: LD_INT 1
10811: EQUAL
10812: IFFALSE 10828
// begin Say ( JMM , DRem-JMM-1 ) ;
10814: LD_EXP 1
10818: PPUSH
10819: LD_STRING DRem-JMM-1
10821: PPUSH
10822: CALL_OW 88
// end else
10826: GO 10840
// begin Say ( JMM , DRem-JMM-1a ) ;
10828: LD_EXP 1
10832: PPUSH
10833: LD_STRING DRem-JMM-1a
10835: PPUSH
10836: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
10840: LD_EXP 14
10844: PPUSH
10845: LD_STRING DRem-Har-2
10847: PPUSH
10848: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
10852: LD_STRING DenisInDelta
10854: PPUSH
10855: LD_INT 0
10857: PPUSH
10858: CALL_OW 30
10862: PUSH
10863: LD_INT 1
10865: EQUAL
10866: IFFALSE 10882
// begin Say ( JMM , DRem-JMM-2 ) ;
10868: LD_EXP 1
10872: PPUSH
10873: LD_STRING DRem-JMM-2
10875: PPUSH
10876: CALL_OW 88
// end else
10880: GO 10894
// begin Say ( JMM , DRem-JMM-2a ) ;
10882: LD_EXP 1
10886: PPUSH
10887: LD_STRING DRem-JMM-2a
10889: PPUSH
10890: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
10894: LD_EXP 14
10898: PPUSH
10899: LD_STRING DRem-Har-3
10901: PPUSH
10902: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
10906: LD_EXP 1
10910: PPUSH
10911: LD_STRING DRem-JMM-3
10913: PPUSH
10914: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
10918: LD_EXP 14
10922: PPUSH
10923: LD_STRING DRem-Har-4
10925: PPUSH
10926: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
10930: LD_STRING DenisInDelta
10932: PPUSH
10933: LD_INT 0
10935: PPUSH
10936: CALL_OW 30
10940: PUSH
10941: LD_INT 1
10943: EQUAL
10944: IFFALSE 11004
// begin Say ( JMM , DRem-JMM-4 ) ;
10946: LD_EXP 1
10950: PPUSH
10951: LD_STRING DRem-JMM-4
10953: PPUSH
10954: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
10958: LD_EXP 14
10962: PPUSH
10963: LD_STRING DRem-Har-5
10965: PPUSH
10966: CALL_OW 94
// DialogueOff ;
10970: CALL_OW 7
// wait ( 4 4$00 ) ;
10974: LD_INT 8400
10976: PPUSH
10977: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10981: LD_INT 35
10983: PPUSH
10984: CALL_OW 67
// until not InBattle ( 1 ) ;
10988: LD_INT 1
10990: PPUSH
10991: CALL_OW 463
10995: NOT
10996: IFFALSE 10981
// SpawnDenis ;
10998: CALL 11042 0 0
// end else
11002: GO 11041
// begin DialogueOff ;
11004: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11008: LD_INT 36
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: LD_INT 1
11016: PPUSH
11017: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11021: LD_INT 15
11023: PPUSH
11024: LD_INT 1
11026: PPUSH
11027: LD_INT 1
11029: PPUSH
11030: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11034: LD_STRING MR
11036: PPUSH
11037: CALL_OW 337
// end ; end ;
11041: END
// export function SpawnDenis ; var tmp ; begin
11042: LD_INT 0
11044: PPUSH
11045: PPUSH
// PrepareDenis ;
11046: CALL 2199 0 0
// if not Denis then
11050: LD_EXP 9
11054: NOT
11055: IFFALSE 11059
// exit ;
11057: GO 11280
// CenterNowOnUnits ( Denis ) ;
11059: LD_EXP 9
11063: PPUSH
11064: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
11068: LD_ADDR_VAR 0 2
11072: PUSH
11073: LD_INT 22
11075: PUSH
11076: LD_INT 1
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PPUSH
11083: CALL_OW 69
11087: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
11088: LD_EXP 9
11092: PPUSH
11093: LD_VAR 0 2
11097: PPUSH
11098: LD_EXP 9
11102: PPUSH
11103: CALL_OW 74
11107: PPUSH
11108: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
11112: LD_INT 35
11114: PPUSH
11115: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
11119: LD_INT 22
11121: PUSH
11122: LD_INT 1
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 91
11131: PUSH
11132: LD_EXP 9
11136: PUSH
11137: LD_INT 10
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: LIST
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PPUSH
11149: CALL_OW 69
11153: IFFALSE 11112
// SetSide ( Denis , 1 ) ;
11155: LD_EXP 9
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 235
// DialogueOn ;
11167: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11171: LD_EXP 9
11175: PPUSH
11176: LD_STRING DDen-Den-1
11178: PPUSH
11179: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11183: LD_EXP 1
11187: PPUSH
11188: LD_STRING DDen-JMM-1
11190: PPUSH
11191: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11195: LD_EXP 9
11199: PPUSH
11200: LD_STRING DDen-Den-2
11202: PPUSH
11203: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11207: LD_EXP 1
11211: PPUSH
11212: LD_STRING DDen-JMM-2
11214: PPUSH
11215: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11219: LD_EXP 9
11223: PPUSH
11224: LD_STRING DDen-Den-3
11226: PPUSH
11227: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11231: LD_EXP 1
11235: PPUSH
11236: LD_STRING DDen-JMM-3
11238: PPUSH
11239: CALL_OW 88
// DialogueOff ;
11243: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11247: LD_INT 36
11249: PPUSH
11250: LD_INT 1
11252: PPUSH
11253: LD_INT 1
11255: PPUSH
11256: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11260: LD_INT 15
11262: PPUSH
11263: LD_INT 1
11265: PPUSH
11266: LD_INT 1
11268: PPUSH
11269: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11273: LD_STRING MR
11275: PPUSH
11276: CALL_OW 337
// end ;
11280: LD_VAR 0 1
11284: RET
// every 0 0$6 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_opto ] ] ) and IsOk ( Denis ) and not InBattle ( 1 ) do
11285: LD_INT 22
11287: PUSH
11288: LD_INT 1
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 30
11297: PUSH
11298: LD_INT 15
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PPUSH
11309: CALL_OW 69
11313: PUSH
11314: LD_EXP 9
11318: PPUSH
11319: CALL_OW 302
11323: AND
11324: PUSH
11325: LD_INT 1
11327: PPUSH
11328: CALL_OW 463
11332: NOT
11333: AND
11334: IFFALSE 11363
11336: GO 11338
11338: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11339: LD_EXP 9
11343: PPUSH
11344: LD_STRING DR1-Den-1
11346: PPUSH
11347: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11351: LD_EXP 1
11355: PPUSH
11356: LD_STRING DR1-JMM-1
11358: PPUSH
11359: CALL_OW 88
// end ;
11363: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
11364: LD_INT 15
11366: PPUSH
11367: LD_INT 1
11369: PPUSH
11370: CALL_OW 321
11374: PUSH
11375: LD_INT 2
11377: EQUAL
11378: PUSH
11379: LD_EXP 9
11383: PPUSH
11384: CALL_OW 302
11388: AND
11389: PUSH
11390: LD_INT 1
11392: PPUSH
11393: CALL_OW 463
11397: NOT
11398: AND
11399: IFFALSE 11631
11401: GO 11403
11403: DISABLE
// begin DialogueOn ;
11404: CALL_OW 6
// if IsOK ( Denis ) then
11408: LD_EXP 9
11412: PPUSH
11413: CALL_OW 302
11417: IFFALSE 11433
// Say ( Denis , DR2-Den-1 ) else
11419: LD_EXP 9
11423: PPUSH
11424: LD_STRING DR2-Den-1
11426: PPUSH
11427: CALL_OW 88
11431: GO 11492
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11433: LD_INT 22
11435: PUSH
11436: LD_INT 1
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 21
11445: PUSH
11446: LD_INT 1
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 25
11455: PUSH
11456: LD_INT 4
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: LIST
11467: PPUSH
11468: CALL_OW 69
11472: PUSH
11473: LD_EXP 1
11477: PUSH
11478: EMPTY
11479: LIST
11480: DIFF
11481: PPUSH
11482: LD_STRING DR2-Sci1-1
11484: PPUSH
11485: LD_STRING DR2-FSci1-1
11487: PPUSH
11488: CALL 6811 0 3
// Say ( JMM , DR2-JMM-1 ) ;
11492: LD_EXP 1
11496: PPUSH
11497: LD_STRING DR2-JMM-1
11499: PPUSH
11500: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11504: LD_INT 22
11506: PUSH
11507: LD_INT 1
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 21
11516: PUSH
11517: LD_INT 1
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 2
11526: PUSH
11527: LD_INT 25
11529: PUSH
11530: LD_INT 1
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 25
11539: PUSH
11540: LD_INT 2
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 25
11549: PUSH
11550: LD_INT 3
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: LD_INT 25
11559: PUSH
11560: LD_INT 4
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: PPUSH
11579: CALL_OW 69
11583: PUSH
11584: LD_EXP 1
11588: PUSH
11589: LD_EXP 9
11593: PUSH
11594: LD_EXP 8
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: DIFF
11604: PPUSH
11605: LD_STRING DR2-Sol1-1
11607: PPUSH
11608: LD_STRING DR2-Sol1-11
11610: PPUSH
11611: CALL 6811 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11615: LD_EXP 1
11619: PPUSH
11620: LD_STRING DR2-JMM-2
11622: PPUSH
11623: CALL_OW 88
// DialogueOff ;
11627: CALL_OW 7
// end ;
11631: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
11632: LD_INT 22
11634: PUSH
11635: LD_INT 1
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 30
11644: PUSH
11645: LD_INT 36
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PPUSH
11656: CALL_OW 69
11660: PUSH
11661: LD_INT 0
11663: EQUAL
11664: PUSH
11665: LD_INT 22
11667: PUSH
11668: LD_INT 1
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: LD_INT 21
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 33
11687: PUSH
11688: LD_INT 2
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 69
11704: PUSH
11705: LD_INT 0
11707: GREATER
11708: AND
11709: PUSH
11710: LD_EXP 23
11714: PUSH
11715: LD_INT 0
11717: EQUAL
11718: AND
11719: PUSH
11720: LD_INT 1
11722: PPUSH
11723: CALL_OW 463
11727: NOT
11728: AND
11729: IFFALSE 11866
11731: GO 11733
11733: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11734: LD_INT 22
11736: PUSH
11737: LD_INT 1
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 21
11746: PUSH
11747: LD_INT 1
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 25
11756: PUSH
11757: LD_INT 3
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 26
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: PPUSH
11780: CALL_OW 69
11784: PUSH
11785: LD_EXP 1
11789: PUSH
11790: LD_EXP 6
11794: PUSH
11795: LD_EXP 7
11799: PUSH
11800: LD_EXP 9
11804: PUSH
11805: LD_EXP 15
11809: PUSH
11810: LD_EXP 3
11814: PUSH
11815: LD_EXP 4
11819: PUSH
11820: LD_EXP 2
11824: PUSH
11825: LD_EXP 5
11829: PUSH
11830: LD_EXP 8
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: DIFF
11847: PPUSH
11848: LD_STRING D3a-Mech1-1
11850: PPUSH
11851: LD_STRING D3a-Mech1-1
11853: PPUSH
11854: CALL 6811 0 3
// firstTower = 2 ;
11858: LD_ADDR_EXP 23
11862: PUSH
11863: LD_INT 2
11865: ST_TO_ADDR
// end ;
11866: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11867: LD_INT 22
11869: PUSH
11870: LD_INT 3
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 21
11879: PUSH
11880: LD_INT 3
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PPUSH
11891: CALL_OW 69
11895: PUSH
11896: LD_INT 0
11898: EQUAL
11899: IFFALSE 12014
11901: GO 11903
11903: DISABLE
11904: LD_INT 0
11906: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
11907: LD_ADDR_VAR 0 1
11911: PUSH
11912: LD_INT 22
11914: PUSH
11915: LD_INT 1
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 21
11924: PUSH
11925: LD_INT 1
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 2
11934: PUSH
11935: LD_INT 25
11937: PUSH
11938: LD_INT 1
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 25
11947: PUSH
11948: LD_INT 2
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 25
11957: PUSH
11958: LD_INT 3
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 25
11967: PUSH
11968: LD_INT 4
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: PPUSH
11987: CALL_OW 69
11991: PUSH
11992: FOR_IN
11993: IFFALSE 12012
// AddExperience_NoLimit ( i , 1 , 7500 ) ;
11995: LD_VAR 0 1
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: LD_INT 7500
12005: PPUSH
12006: CALL_OW 591
12010: GO 11992
12012: POP
12013: POP
// end ;
12014: PPOPN 1
12016: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12017: LD_INT 22
12019: PUSH
12020: LD_INT 1
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 30
12029: PUSH
12030: LD_INT 36
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PPUSH
12041: CALL_OW 69
12045: PUSH
12046: LD_INT 22
12048: PUSH
12049: LD_INT 1
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: LD_INT 21
12058: PUSH
12059: LD_INT 2
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 33
12068: PUSH
12069: LD_INT 2
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: PPUSH
12081: CALL_OW 69
12085: AND
12086: PUSH
12087: CALL 12639 0 0
12091: AND
12092: PUSH
12093: LD_INT 1
12095: PPUSH
12096: CALL_OW 463
12100: NOT
12101: AND
12102: IFFALSE 12636
12104: GO 12106
12106: DISABLE
12107: LD_INT 0
12109: PPUSH
12110: PPUSH
12111: PPUSH
12112: PPUSH
12113: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_INT 1
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 30
12131: PUSH
12132: LD_INT 36
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12148: LD_ADDR_VAR 0 4
12152: PUSH
12153: LD_INT 22
12155: PUSH
12156: LD_INT 1
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 21
12165: PUSH
12166: LD_INT 2
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 33
12175: PUSH
12176: LD_INT 2
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: PPUSH
12188: CALL_OW 69
12192: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12193: LD_ADDR_VAR 0 5
12197: PUSH
12198: EMPTY
12199: ST_TO_ADDR
// for i in tmpControlTowers do
12200: LD_ADDR_VAR 0 1
12204: PUSH
12205: LD_VAR 0 3
12209: PUSH
12210: FOR_IN
12211: IFFALSE 12634
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = class_mechanic then
12213: LD_EXP 1
12217: PPUSH
12218: CALL_OW 310
12222: PUSH
12223: LD_VAR 0 1
12227: EQUAL
12228: PUSH
12229: LD_EXP 1
12233: PPUSH
12234: CALL_OW 257
12238: PUSH
12239: LD_INT 3
12241: EQUAL
12242: AND
12243: IFFALSE 12377
// begin InGameOn ;
12245: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12249: LD_VAR 0 4
12253: PUSH
12254: LD_INT 1
12256: ARRAY
12257: PPUSH
12258: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12262: LD_EXP 1
12266: PPUSH
12267: LD_STRING D4a-JMM-1
12269: PPUSH
12270: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12274: LD_VAR 0 4
12278: PUSH
12279: LD_INT 1
12281: ARRAY
12282: PPUSH
12283: LD_EXP 1
12287: PPUSH
12288: CALL_OW 53
// wait ( 0 0$1 ) ;
12292: LD_INT 35
12294: PPUSH
12295: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12299: LD_VAR 0 4
12303: PUSH
12304: LD_INT 1
12306: ARRAY
12307: PPUSH
12308: LD_VAR 0 4
12312: PUSH
12313: LD_INT 1
12315: ARRAY
12316: PPUSH
12317: CALL_OW 250
12321: PUSH
12322: LD_INT 3
12324: PLUS
12325: PPUSH
12326: LD_VAR 0 4
12330: PUSH
12331: LD_INT 1
12333: ARRAY
12334: PPUSH
12335: CALL_OW 251
12339: PUSH
12340: LD_INT 2
12342: MINUS
12343: PPUSH
12344: CALL_OW 111
// wait ( 0 0$2 ) ;
12348: LD_INT 70
12350: PPUSH
12351: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12355: LD_EXP 1
12359: PPUSH
12360: LD_STRING D4b-JMM-1
12362: PPUSH
12363: CALL_OW 88
// InGameOff ;
12367: CALL_OW 9
// exit ;
12371: POP
12372: POP
12373: GO 12636
// end else
12375: GO 12632
// begin InGameOn ;
12377: CALL_OW 8
// tmpMechanicInside := UnitFilter ( UnitsInside ( i ) , [ f_class , class_mechanic ] ) ;
12381: LD_ADDR_VAR 0 5
12385: PUSH
12386: LD_VAR 0 1
12390: PPUSH
12391: CALL_OW 313
12395: PPUSH
12396: LD_INT 25
12398: PUSH
12399: LD_INT 3
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PPUSH
12406: CALL_OW 72
12410: ST_TO_ADDR
// if not tmpMechanicInside then
12411: LD_VAR 0 5
12415: NOT
12416: IFFALSE 12420
// continue ;
12418: GO 12210
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12420: LD_VAR 0 5
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: PPUSH
12429: CALL_OW 258
12433: PUSH
12434: LD_INT 1
12436: EQUAL
12437: IFFALSE 12457
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) else
12439: LD_VAR 0 5
12443: PUSH
12444: LD_INT 1
12446: ARRAY
12447: PPUSH
12448: LD_STRING D4a-Mech1-1
12450: PPUSH
12451: CALL_OW 88
12455: GO 12473
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12457: LD_VAR 0 5
12461: PUSH
12462: LD_INT 1
12464: ARRAY
12465: PPUSH
12466: LD_STRING D4a-FMech1-1
12468: PPUSH
12469: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12473: LD_VAR 0 4
12477: PUSH
12478: LD_INT 1
12480: ARRAY
12481: PPUSH
12482: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12486: LD_VAR 0 4
12490: PUSH
12491: LD_INT 1
12493: ARRAY
12494: PPUSH
12495: LD_VAR 0 5
12499: PUSH
12500: LD_INT 1
12502: ARRAY
12503: PPUSH
12504: CALL_OW 53
// wait ( 0 0$1 ) ;
12508: LD_INT 35
12510: PPUSH
12511: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12515: LD_VAR 0 4
12519: PUSH
12520: LD_INT 1
12522: ARRAY
12523: PPUSH
12524: LD_VAR 0 4
12528: PUSH
12529: LD_INT 1
12531: ARRAY
12532: PPUSH
12533: CALL_OW 250
12537: PUSH
12538: LD_INT 3
12540: PLUS
12541: PPUSH
12542: LD_VAR 0 4
12546: PUSH
12547: LD_INT 1
12549: ARRAY
12550: PPUSH
12551: CALL_OW 251
12555: PUSH
12556: LD_INT 2
12558: MINUS
12559: PPUSH
12560: CALL_OW 111
// wait ( 0 0$2 ) ;
12564: LD_INT 70
12566: PPUSH
12567: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = sex_male then
12571: LD_VAR 0 5
12575: PUSH
12576: LD_INT 1
12578: ARRAY
12579: PPUSH
12580: CALL_OW 258
12584: PUSH
12585: LD_INT 1
12587: EQUAL
12588: IFFALSE 12608
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) else
12590: LD_VAR 0 5
12594: PUSH
12595: LD_INT 1
12597: ARRAY
12598: PPUSH
12599: LD_STRING D4b-Mech1-1
12601: PPUSH
12602: CALL_OW 88
12606: GO 12624
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12608: LD_VAR 0 5
12612: PUSH
12613: LD_INT 1
12615: ARRAY
12616: PPUSH
12617: LD_STRING D4b-FMech1-1
12619: PPUSH
12620: CALL_OW 88
// InGameOff ;
12624: CALL_OW 9
// exit ;
12628: POP
12629: POP
12630: GO 12636
// end ; end ;
12632: GO 12210
12634: POP
12635: POP
// end ;
12636: PPOPN 5
12638: END
// function CheckMehInside ; var i , j , tmp ; begin
12639: LD_INT 0
12641: PPUSH
12642: PPUSH
12643: PPUSH
12644: PPUSH
// result := false ;
12645: LD_ADDR_VAR 0 1
12649: PUSH
12650: LD_INT 0
12652: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
12653: LD_ADDR_VAR 0 4
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_INT 1
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 36
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: CALL_OW 69
12686: ST_TO_ADDR
// if not tmp then
12687: LD_VAR 0 4
12691: NOT
12692: IFFALSE 12696
// exit ;
12694: GO 12760
// for i in tmp do
12696: LD_ADDR_VAR 0 2
12700: PUSH
12701: LD_VAR 0 4
12705: PUSH
12706: FOR_IN
12707: IFFALSE 12758
// for j in UnitsInside ( i ) do
12709: LD_ADDR_VAR 0 3
12713: PUSH
12714: LD_VAR 0 2
12718: PPUSH
12719: CALL_OW 313
12723: PUSH
12724: FOR_IN
12725: IFFALSE 12754
// if GetClass ( j ) = class_mechanic then
12727: LD_VAR 0 3
12731: PPUSH
12732: CALL_OW 257
12736: PUSH
12737: LD_INT 3
12739: EQUAL
12740: IFFALSE 12752
// begin result := true ;
12742: LD_ADDR_VAR 0 1
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// break ;
12750: GO 12754
// end ;
12752: GO 12724
12754: POP
12755: POP
12756: GO 12706
12758: POP
12759: POP
// end ;
12760: LD_VAR 0 1
12764: RET
// every 12 12$0 do
12765: GO 12767
12767: DISABLE
// begin repeat wait ( 0 0$1 ) ;
12768: LD_INT 35
12770: PPUSH
12771: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
12775: LD_INT 1
12777: PPUSH
12778: CALL_OW 463
12782: NOT
12783: PUSH
12784: LD_INT 32
12786: PPUSH
12787: LD_INT 81
12789: PUSH
12790: LD_INT 1
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PPUSH
12797: CALL_OW 70
12801: NOT
12802: AND
12803: IFFALSE 12768
// PrepareKurt ;
12805: CALL 15229 0 0
// end ;
12809: END
// every 0 0$10 + 1 1$00 trigger IsOk ( Joan ) and GetSide ( Joan ) = 1 and Lisa do
12810: LD_EXP 15
12814: PPUSH
12815: CALL_OW 302
12819: PUSH
12820: LD_EXP 15
12824: PPUSH
12825: CALL_OW 255
12829: PUSH
12830: LD_INT 1
12832: EQUAL
12833: AND
12834: PUSH
12835: LD_EXP 2
12839: AND
12840: IFFALSE 13005
12842: GO 12844
12844: DISABLE
// begin wait ( 0 0$50 ) ;
12845: LD_INT 1750
12847: PPUSH
12848: CALL_OW 67
// if not IsOk ( Joan ) then
12852: LD_EXP 15
12856: PPUSH
12857: CALL_OW 302
12861: NOT
12862: IFFALSE 12866
// exit ;
12864: GO 13005
// if IsOK ( Lisa ) then
12866: LD_EXP 2
12870: PPUSH
12871: CALL_OW 302
12875: IFFALSE 13005
// begin DialogueOn ;
12877: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
12881: LD_EXP 2
12885: PPUSH
12886: LD_STRING D7-Lisa-1
12888: PPUSH
12889: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
12893: LD_EXP 1
12897: PPUSH
12898: LD_STRING D7-JMM-1
12900: PPUSH
12901: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
12905: LD_EXP 2
12909: PPUSH
12910: LD_STRING D7-Lisa-2
12912: PPUSH
12913: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
12917: LD_EXP 1
12921: PPUSH
12922: LD_STRING D7-JMM-2
12924: PPUSH
12925: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
12929: LD_EXP 2
12933: PPUSH
12934: LD_STRING D7-Lisa-3
12936: PPUSH
12937: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
12941: LD_EXP 1
12945: PPUSH
12946: LD_STRING D7-JMM-3
12948: PPUSH
12949: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
12953: LD_EXP 2
12957: PPUSH
12958: LD_STRING D7-Lisa-4
12960: PPUSH
12961: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
12965: LD_EXP 1
12969: PPUSH
12970: LD_STRING D7-JMM-4
12972: PPUSH
12973: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
12977: LD_EXP 1
12981: PPUSH
12982: LD_STRING D7-JMM-4a
12984: PPUSH
12985: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
12989: LD_EXP 2
12993: PPUSH
12994: LD_STRING D7-Lisa-5
12996: PPUSH
12997: CALL_OW 88
// DialogueOff ;
13001: CALL_OW 7
// end ; end ;
13005: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
13006: LD_EXP 13
13010: PUSH
13011: LD_INT 22
13013: PUSH
13014: LD_INT 1
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 91
13023: PUSH
13024: LD_EXP 13
13028: PUSH
13029: LD_INT 10
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 2
13039: PUSH
13040: LD_INT 25
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 25
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 25
13062: PUSH
13063: LD_INT 3
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 25
13072: PUSH
13073: LD_INT 4
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 69
13096: PUSH
13097: LD_INT 1
13099: GREATER
13100: AND
13101: IFFALSE 13118
13103: GO 13105
13105: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
13106: LD_EXP 13
13110: PPUSH
13111: LD_STRING D5-Sol1-1
13113: PPUSH
13114: CALL_OW 88
13118: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13119: LD_INT 22
13121: PUSH
13122: LD_INT 1
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 33
13131: PUSH
13132: LD_INT 2
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PPUSH
13143: CALL_OW 69
13147: PUSH
13148: LD_INT 2
13150: GREATEREQUAL
13151: IFFALSE 13171
13153: GO 13155
13155: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13156: LD_STRING MRa
13158: PPUSH
13159: CALL_OW 337
// remoteVehiclesBuild := 1 ;
13163: LD_ADDR_EXP 28
13167: PUSH
13168: LD_INT 1
13170: ST_TO_ADDR
// end ;
13171: END
// every 2 2$00 do var i , last ;
13172: GO 13174
13174: DISABLE
13175: LD_INT 0
13177: PPUSH
13178: PPUSH
// begin last := 8 ;
13179: LD_ADDR_VAR 0 2
13183: PUSH
13184: LD_INT 8
13186: ST_TO_ADDR
// for i = 1 to last do
13187: LD_ADDR_VAR 0 1
13191: PUSH
13192: DOUBLE
13193: LD_INT 1
13195: DEC
13196: ST_TO_ADDR
13197: LD_VAR 0 2
13201: PUSH
13202: FOR_TO
13203: IFFALSE 13231
// begin wait ( rand ( 3 3$00 , 6 6$00 ) ) ;
13205: LD_INT 6300
13207: PPUSH
13208: LD_INT 12600
13210: PPUSH
13211: CALL_OW 12
13215: PPUSH
13216: CALL_OW 67
// PrepareRandoms ( i ) ;
13220: LD_VAR 0 1
13224: PPUSH
13225: CALL 4126 0 1
// end ;
13229: GO 13202
13231: POP
13232: POP
// end ;
13233: PPOPN 2
13235: END
// every 5 5$20 do
13236: GO 13238
13238: DISABLE
// begin DialogueOn ;
13239: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13243: LD_EXP 10
13247: PPUSH
13248: LD_STRING D12a-Sci-1
13250: PPUSH
13251: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13255: LD_EXP 1
13259: PPUSH
13260: LD_STRING D12a-JMM-1
13262: PPUSH
13263: CALL_OW 88
// DialogueOff ;
13267: CALL_OW 7
// cratesStatus = 1 ;
13271: LD_ADDR_EXP 38
13275: PUSH
13276: LD_INT 1
13278: ST_TO_ADDR
// end ;
13279: END
// every 13 13$0 do
13280: GO 13282
13282: DISABLE
// begin DialogueOn ;
13283: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13287: LD_EXP 10
13291: PPUSH
13292: LD_STRING D12b-Sci-1
13294: PPUSH
13295: CALL_OW 94
// DialogueOff ;
13299: CALL_OW 7
// cratesStatus = 2 ;
13303: LD_ADDR_EXP 38
13307: PUSH
13308: LD_INT 2
13310: ST_TO_ADDR
// end ;
13311: END
// every 32 32$0 do
13312: GO 13314
13314: DISABLE
// begin DialogueOn ;
13315: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
13319: LD_EXP 10
13323: PPUSH
13324: LD_STRING D12c-Sci-1
13326: PPUSH
13327: CALL_OW 94
// DialogueOff ;
13331: CALL_OW 7
// wait ( 3 3$0 ) ;
13335: LD_INT 6300
13337: PPUSH
13338: CALL_OW 67
// DialogueOn ;
13342: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
13346: LD_EXP 10
13350: PPUSH
13351: LD_STRING D12d-Sci-1
13353: PPUSH
13354: CALL_OW 94
// DialogueOff ;
13358: CALL_OW 7
// cratesStatus = 1 ;
13362: LD_ADDR_EXP 38
13366: PUSH
13367: LD_INT 1
13369: ST_TO_ADDR
// PrepareRussianAdditionalAttack ;
13370: CALL 19322 0 0
// wait ( 2 2$30 ) ;
13374: LD_INT 5250
13376: PPUSH
13377: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
13381: LD_INT 35
13383: PPUSH
13384: CALL_OW 67
// until not InBattle ( 1 ) and not FilterUnitsInArea ( scanArea , [ f_enemy , 1 ] ) ;
13388: LD_INT 1
13390: PPUSH
13391: CALL_OW 463
13395: NOT
13396: PUSH
13397: LD_INT 32
13399: PPUSH
13400: LD_INT 81
13402: PUSH
13403: LD_INT 1
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: NOT
13415: AND
13416: IFFALSE 13381
// PrepareJoan ;
13418: CALL 3034 0 0
// end ;
13422: END
// every 42 42$0 do
13423: GO 13425
13425: DISABLE
// begin DialogueOn ;
13426: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13430: LD_EXP 10
13434: PPUSH
13435: LD_STRING D12e-Sci-1
13437: PPUSH
13438: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13442: LD_EXP 1
13446: PPUSH
13447: LD_STRING D12e-JMM-1
13449: PPUSH
13450: CALL_OW 88
// DialogueOff ;
13454: CALL_OW 7
// cratesStatus := 2 ;
13458: LD_ADDR_EXP 38
13462: PUSH
13463: LD_INT 2
13465: ST_TO_ADDR
// end ; end_of_file
13466: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13467: LD_VAR 0 1
13471: PUSH
13472: LD_INT 1
13474: EQUAL
13475: PUSH
13476: LD_VAR 0 2
13480: PUSH
13481: LD_INT 3
13483: EQUAL
13484: AND
13485: IFFALSE 13495
// contactWithRussian := 1 ;
13487: LD_ADDR_EXP 22
13491: PUSH
13492: LD_INT 1
13494: ST_TO_ADDR
// end ;
13495: PPOPN 2
13497: END
// on BuildingComplete ( building ) do var i ;
13498: LD_INT 0
13500: PPUSH
// begin if GetBType ( building ) = b_control_tower and GetSide ( building ) = 1 and firstTower = 0 then
13501: LD_VAR 0 1
13505: PPUSH
13506: CALL_OW 266
13510: PUSH
13511: LD_INT 36
13513: EQUAL
13514: PUSH
13515: LD_VAR 0 1
13519: PPUSH
13520: CALL_OW 255
13524: PUSH
13525: LD_INT 1
13527: EQUAL
13528: AND
13529: PUSH
13530: LD_EXP 23
13534: PUSH
13535: LD_INT 0
13537: EQUAL
13538: AND
13539: IFFALSE 13619
// begin firstTower = 1 ;
13541: LD_ADDR_EXP 23
13545: PUSH
13546: LD_INT 1
13548: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13549: LD_INT 22
13551: PUSH
13552: LD_INT 1
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: LD_INT 21
13561: PUSH
13562: LD_INT 1
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 25
13571: PUSH
13572: LD_INT 3
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 26
13581: PUSH
13582: LD_INT 1
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: PPUSH
13595: CALL_OW 69
13599: PUSH
13600: LD_EXP 1
13604: PUSH
13605: EMPTY
13606: LIST
13607: DIFF
13608: PPUSH
13609: LD_STRING D3b-Mech1-1
13611: PPUSH
13612: LD_STRING D3b-Mech1-1
13614: PPUSH
13615: CALL 6811 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
13619: LD_VAR 0 1
13623: PPUSH
13624: CALL_OW 266
13628: PUSH
13629: LD_INT 0
13631: EQUAL
13632: PUSH
13633: LD_VAR 0 1
13637: PPUSH
13638: CALL_OW 255
13642: PUSH
13643: LD_INT 1
13645: EQUAL
13646: AND
13647: IFFALSE 13661
// SetBName ( building , theta ) ;
13649: LD_VAR 0 1
13653: PPUSH
13654: LD_STRING theta
13656: PPUSH
13657: CALL_OW 500
// if GetSide ( building ) = 3 then
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 255
13670: PUSH
13671: LD_INT 3
13673: EQUAL
13674: IFFALSE 13714
// begin for i := 1 to 4 do
13676: LD_ADDR_VAR 0 2
13680: PUSH
13681: DOUBLE
13682: LD_INT 1
13684: DEC
13685: ST_TO_ADDR
13686: LD_INT 4
13688: PUSH
13689: FOR_TO
13690: IFFALSE 13712
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13692: LD_ADDR_EXP 31
13696: PUSH
13697: LD_EXP 31
13701: PPUSH
13702: LD_INT 1
13704: PPUSH
13705: CALL_OW 3
13709: ST_TO_ADDR
13710: GO 13689
13712: POP
13713: POP
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13714: LD_VAR 0 1
13718: PPUSH
13719: CALL_OW 255
13723: PUSH
13724: LD_INT 3
13726: EQUAL
13727: PUSH
13728: LD_VAR 0 1
13732: PPUSH
13733: CALL_OW 266
13737: PUSH
13738: LD_INT 0
13740: EQUAL
13741: PUSH
13742: LD_VAR 0 1
13746: PPUSH
13747: CALL_OW 266
13751: PUSH
13752: LD_INT 2
13754: EQUAL
13755: OR
13756: PUSH
13757: LD_VAR 0 1
13761: PPUSH
13762: CALL_OW 266
13766: PUSH
13767: LD_INT 4
13769: EQUAL
13770: OR
13771: PUSH
13772: EMPTY
13773: LIST
13774: AND
13775: IFFALSE 13786
// ComUpgrade ( building ) ;
13777: LD_VAR 0 1
13781: PPUSH
13782: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
13786: LD_VAR 0 1
13790: PPUSH
13791: CALL_OW 255
13795: PUSH
13796: LD_INT 3
13798: EQUAL
13799: PUSH
13800: LD_VAR 0 1
13804: PPUSH
13805: CALL_OW 266
13809: PUSH
13810: LD_INT 32
13812: EQUAL
13813: AND
13814: IFFALSE 13855
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_INT 42
13823: PUSH
13824: LD_INT 43
13826: PUSH
13827: LD_INT 44
13829: PUSH
13830: LD_INT 46
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 1
13841: PPUSH
13842: LD_INT 4
13844: PPUSH
13845: CALL_OW 12
13849: ARRAY
13850: PPUSH
13851: CALL_OW 208
// end ;
13855: PPOPN 2
13857: END
// on UnitDestroyed ( unit ) do begin if unit in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
13858: LD_VAR 0 1
13862: PUSH
13863: LD_INT 22
13865: PUSH
13866: LD_INT 1
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 21
13875: PUSH
13876: LD_INT 1
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 23
13885: PUSH
13886: LD_INT 1
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: LIST
13897: PPUSH
13898: CALL_OW 69
13902: IN
13903: IFFALSE 13919
// killCounter := killCounter + 1 ;
13905: LD_ADDR_EXP 45
13909: PUSH
13910: LD_EXP 45
13914: PUSH
13915: LD_INT 1
13917: PLUS
13918: ST_TO_ADDR
// if unit in ruAttackersInForest then
13919: LD_VAR 0 1
13923: PUSH
13924: LD_EXP 48
13928: IN
13929: IFFALSE 13947
// ruAttackersInForest := ruAttackersInForest diff unit ;
13931: LD_ADDR_EXP 48
13935: PUSH
13936: LD_EXP 48
13940: PUSH
13941: LD_VAR 0 1
13945: DIFF
13946: ST_TO_ADDR
// if unit in ruAttackers then
13947: LD_VAR 0 1
13951: PUSH
13952: LD_EXP 47
13956: IN
13957: IFFALSE 13975
// ruAttackers := ruAttackers diff unit ;
13959: LD_ADDR_EXP 47
13963: PUSH
13964: LD_EXP 47
13968: PUSH
13969: LD_VAR 0 1
13973: DIFF
13974: ST_TO_ADDR
// if unit = JMM then
13975: LD_VAR 0 1
13979: PUSH
13980: LD_EXP 1
13984: EQUAL
13985: IFFALSE 13994
// YouLost ( JMM ) ;
13987: LD_STRING JMM
13989: PPUSH
13990: CALL_OW 104
// if unit = Joan then
13994: LD_VAR 0 1
13998: PUSH
13999: LD_EXP 15
14003: EQUAL
14004: IFFALSE 14014
// JoanStatus := 0 ;
14006: LD_ADDR_EXP 16
14010: PUSH
14011: LD_INT 0
14013: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and GetNation ( unit ) = nation_american then
14014: LD_VAR 0 1
14018: PPUSH
14019: CALL_OW 255
14023: PUSH
14024: LD_INT 1
14026: EQUAL
14027: PUSH
14028: LD_VAR 0 1
14032: PPUSH
14033: CALL_OW 247
14037: PUSH
14038: LD_INT 1
14040: EQUAL
14041: AND
14042: PUSH
14043: LD_VAR 0 1
14047: PPUSH
14048: CALL_OW 248
14052: PUSH
14053: LD_INT 1
14055: EQUAL
14056: AND
14057: IFFALSE 14073
// unitLost = unitLost + 1 ;
14059: LD_ADDR_EXP 30
14063: PUSH
14064: LD_EXP 30
14068: PUSH
14069: LD_INT 1
14071: PLUS
14072: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building and GetBType ( unit ) in [ b_armoury , b_barracks , b_bunker , b_breastwork ] then
14073: LD_VAR 0 1
14077: PPUSH
14078: CALL_OW 255
14082: PUSH
14083: LD_INT 3
14085: EQUAL
14086: PUSH
14087: LD_VAR 0 1
14091: PPUSH
14092: CALL_OW 247
14096: PUSH
14097: LD_INT 3
14099: EQUAL
14100: AND
14101: PUSH
14102: LD_VAR 0 1
14106: PPUSH
14107: CALL_OW 266
14111: PUSH
14112: LD_INT 4
14114: PUSH
14115: LD_INT 5
14117: PUSH
14118: LD_INT 32
14120: PUSH
14121: LD_INT 31
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: IN
14130: AND
14131: IFFALSE 14217
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14133: LD_ADDR_EXP 31
14137: PUSH
14138: LD_EXP 31
14142: PUSH
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 266
14152: ADD
14153: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14154: LD_ADDR_EXP 31
14158: PUSH
14159: LD_EXP 31
14163: PUSH
14164: LD_VAR 0 1
14168: PPUSH
14169: CALL_OW 250
14173: ADD
14174: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14175: LD_ADDR_EXP 31
14179: PUSH
14180: LD_EXP 31
14184: PUSH
14185: LD_VAR 0 1
14189: PPUSH
14190: CALL_OW 251
14194: ADD
14195: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14196: LD_ADDR_EXP 31
14200: PUSH
14201: LD_EXP 31
14205: PUSH
14206: LD_VAR 0 1
14210: PPUSH
14211: CALL_OW 254
14215: ADD
14216: ST_TO_ADDR
// end ; if ruMechCounter and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14217: LD_EXP 46
14221: PUSH
14222: LD_VAR 0 1
14226: PPUSH
14227: CALL_OW 257
14231: PUSH
14232: LD_INT 3
14234: EQUAL
14235: AND
14236: PUSH
14237: LD_VAR 0 1
14241: PPUSH
14242: CALL_OW 255
14246: PUSH
14247: LD_INT 3
14249: EQUAL
14250: AND
14251: PUSH
14252: LD_INT 21
14254: PPUSH
14255: CALL_OW 302
14259: AND
14260: PUSH
14261: LD_INT 21
14263: PPUSH
14264: CALL_OW 255
14268: PUSH
14269: LD_INT 3
14271: EQUAL
14272: AND
14273: IFFALSE 14355
// begin ruMechCounter := ruMechCounter - 1 ;
14275: LD_ADDR_EXP 46
14279: PUSH
14280: LD_EXP 46
14284: PUSH
14285: LD_INT 1
14287: MINUS
14288: ST_TO_ADDR
// uc_side := 3 ;
14289: LD_ADDR_OWVAR 20
14293: PUSH
14294: LD_INT 3
14296: ST_TO_ADDR
// uc_nation := 3 ;
14297: LD_ADDR_OWVAR 21
14301: PUSH
14302: LD_INT 3
14304: ST_TO_ADDR
// hc_gallery :=  ;
14305: LD_ADDR_OWVAR 33
14309: PUSH
14310: LD_STRING 
14312: ST_TO_ADDR
// hc_name :=  ;
14313: LD_ADDR_OWVAR 26
14317: PUSH
14318: LD_STRING 
14320: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
14321: LD_INT 0
14323: PPUSH
14324: LD_EXP 34
14328: PPUSH
14329: LD_EXP 35
14333: PPUSH
14334: CALL_OW 12
14338: PPUSH
14339: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
14343: CALL_OW 44
14347: PPUSH
14348: LD_INT 21
14350: PPUSH
14351: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOk ( rufab ) and GetSide ( rufab ) = 3 then
14355: LD_VAR 0 1
14359: PPUSH
14360: CALL_OW 255
14364: PUSH
14365: LD_INT 3
14367: EQUAL
14368: PUSH
14369: LD_VAR 0 1
14373: PPUSH
14374: CALL_OW 264
14378: PUSH
14379: LD_INT 52
14381: EQUAL
14382: AND
14383: PUSH
14384: LD_INT 21
14386: PPUSH
14387: CALL_OW 302
14391: AND
14392: PUSH
14393: LD_INT 21
14395: PPUSH
14396: CALL_OW 255
14400: PUSH
14401: LD_INT 3
14403: EQUAL
14404: AND
14405: IFFALSE 14426
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
14407: LD_INT 21
14409: PPUSH
14410: LD_INT 22
14412: PPUSH
14413: LD_INT 1
14415: PPUSH
14416: LD_INT 1
14418: PPUSH
14419: LD_INT 52
14421: PPUSH
14422: CALL_OW 125
// end ;
14426: PPOPN 1
14428: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14429: LD_INT 0
14431: PPUSH
14432: PPUSH
14433: PPUSH
// begin if GetSide ( vehicle ) = 3 and not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
14434: LD_VAR 0 1
14438: PPUSH
14439: CALL_OW 255
14443: PUSH
14444: LD_INT 3
14446: EQUAL
14447: PUSH
14448: LD_VAR 0 1
14452: PPUSH
14453: CALL_OW 264
14457: PUSH
14458: LD_INT 51
14460: PUSH
14461: LD_INT 52
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: IN
14468: NOT
14469: AND
14470: IFFALSE 14501
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , vehicle ) ;
14472: LD_ADDR_EXP 47
14476: PUSH
14477: LD_EXP 47
14481: PPUSH
14482: LD_EXP 47
14486: PUSH
14487: LD_INT 1
14489: PLUS
14490: PPUSH
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 1
14500: ST_TO_ADDR
// end ;
14501: PPOPN 5
14503: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
14504: LD_VAR 0 1
14508: PPUSH
14509: CALL_OW 255
14513: PUSH
14514: LD_INT 3
14516: EQUAL
14517: IFFALSE 14548
// begin tamedApemans = tamedApemans + 1 ;
14519: LD_ADDR_EXP 32
14523: PUSH
14524: LD_EXP 32
14528: PUSH
14529: LD_INT 1
14531: PLUS
14532: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
14533: LD_VAR 0 1
14537: PPUSH
14538: LD_INT 106
14540: PPUSH
14541: LD_INT 85
14543: PPUSH
14544: CALL_OW 111
// end ; end ;
14548: PPOPN 2
14550: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( rufab ) then
14551: LD_VAR 0 2
14555: PPUSH
14556: CALL_OW 255
14560: PUSH
14561: LD_INT 3
14563: EQUAL
14564: PUSH
14565: LD_VAR 0 1
14569: PPUSH
14570: CALL_OW 255
14574: PUSH
14575: LD_INT 3
14577: EQUAL
14578: AND
14579: PUSH
14580: LD_INT 21
14582: PPUSH
14583: CALL_OW 302
14587: AND
14588: IFFALSE 14602
// ComEnterUnit ( human , rufab ) ;
14590: LD_VAR 0 1
14594: PPUSH
14595: LD_INT 21
14597: PPUSH
14598: CALL_OW 120
// end ;
14602: PPOPN 4
14604: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
14605: LD_VAR 0 1
14609: PUSH
14610: LD_INT 21
14612: EQUAL
14613: PUSH
14614: LD_VAR 0 2
14618: PPUSH
14619: CALL_OW 255
14623: PUSH
14624: LD_INT 3
14626: EQUAL
14627: AND
14628: IFFALSE 14642
// SetLives ( human , 1000 ) ;
14630: LD_VAR 0 2
14634: PPUSH
14635: LD_INT 1000
14637: PPUSH
14638: CALL_OW 234
// end ;
14642: PPOPN 2
14644: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL 33502 0 1
// end ; end_of_file
14654: PPOPN 1
14656: END
// every 0 0$30 trigger cratesStatus = 1 do
14657: LD_EXP 38
14661: PUSH
14662: LD_INT 1
14664: EQUAL
14665: IFFALSE 14718
14667: GO 14669
14669: DISABLE
// begin enable ;
14670: ENABLE
// wait ( [ 0 0$10 , 0 0$25 ] [ Rand ( 1 , 2 ) ] ) ;
14671: LD_INT 350
14673: PUSH
14674: LD_INT 875
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 1
14683: PPUSH
14684: LD_INT 2
14686: PPUSH
14687: CALL_OW 12
14691: ARRAY
14692: PPUSH
14693: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesSpawn2 , true ) ;
14697: LD_INT 1
14699: PPUSH
14700: LD_INT 5
14702: PPUSH
14703: CALL_OW 12
14707: PPUSH
14708: LD_INT 7
14710: PPUSH
14711: LD_INT 1
14713: PPUSH
14714: CALL_OW 55
// end ;
14718: END
// every 1 1$0 trigger cratesStatus = 2 do
14719: LD_EXP 38
14723: PUSH
14724: LD_INT 2
14726: EQUAL
14727: IFFALSE 14810
14729: GO 14731
14731: DISABLE
// begin enable ;
14732: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
14733: LD_INT 3150
14735: PUSH
14736: LD_INT 4550
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 1
14745: PPUSH
14746: LD_INT 2
14748: PPUSH
14749: CALL_OW 12
14753: ARRAY
14754: PPUSH
14755: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
14759: LD_INT 2
14761: PUSH
14762: LD_INT 5
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 1
14771: PPUSH
14772: LD_INT 2
14774: PPUSH
14775: CALL_OW 12
14779: ARRAY
14780: PPUSH
14781: LD_INT 6
14783: PUSH
14784: LD_INT 7
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 1
14793: PPUSH
14794: LD_INT 2
14796: PPUSH
14797: CALL_OW 12
14801: ARRAY
14802: PPUSH
14803: LD_INT 1
14805: PPUSH
14806: CALL_OW 55
// end ;
14810: END
// every 0 0$30 + 0 0$10 do
14811: GO 14813
14813: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14814: LD_INT 4
14816: PUSH
14817: LD_INT 5
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 1
14826: PPUSH
14827: LD_INT 2
14829: PPUSH
14830: CALL_OW 12
14834: ARRAY
14835: PPUSH
14836: LD_INT 7
14838: PPUSH
14839: LD_INT 1
14841: PPUSH
14842: CALL_OW 55
// Wait ( 0 0$15 ) ;
14846: LD_INT 525
14848: PPUSH
14849: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14853: LD_INT 4
14855: PUSH
14856: LD_INT 5
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 1
14865: PPUSH
14866: LD_INT 2
14868: PPUSH
14869: CALL_OW 12
14873: ARRAY
14874: PPUSH
14875: LD_INT 7
14877: PPUSH
14878: LD_INT 1
14880: PPUSH
14881: CALL_OW 55
// Wait ( 0 0$20 ) ;
14885: LD_INT 700
14887: PPUSH
14888: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14892: LD_INT 4
14894: PUSH
14895: LD_INT 5
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: LD_INT 1
14904: PPUSH
14905: LD_INT 2
14907: PPUSH
14908: CALL_OW 12
14912: ARRAY
14913: PPUSH
14914: LD_INT 7
14916: PPUSH
14917: LD_INT 1
14919: PPUSH
14920: CALL_OW 55
// end ; end_of_file
14924: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
14925: LD_EXP 24
14929: PUSH
14930: LD_INT 1
14932: EQUAL
14933: IFFALSE 15226
14935: GO 14937
14937: DISABLE
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
// begin enable ;
14943: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14944: LD_ADDR_VAR 0 2
14948: PUSH
14949: LD_INT 22
14951: PUSH
14952: LD_INT 1
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 21
14961: PUSH
14962: LD_INT 3
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: LD_INT 2
14971: PUSH
14972: LD_INT 30
14974: PUSH
14975: LD_INT 0
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 30
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: PPUSH
15002: CALL_OW 69
15006: ST_TO_ADDR
// for i in tmp do
15007: LD_ADDR_VAR 0 1
15011: PUSH
15012: LD_VAR 0 2
15016: PUSH
15017: FOR_IN
15018: IFFALSE 15051
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15020: LD_ADDR_VAR 0 3
15024: PUSH
15025: LD_VAR 0 3
15029: PUSH
15030: LD_VAR 0 1
15034: PPUSH
15035: CALL_OW 274
15039: PPUSH
15040: LD_INT 1
15042: PPUSH
15043: CALL_OW 275
15047: PLUS
15048: ST_TO_ADDR
15049: GO 15017
15051: POP
15052: POP
// strings = [ ] ;
15053: LD_ADDR_EXP 27
15057: PUSH
15058: EMPTY
15059: ST_TO_ADDR
// if tmp = 0 then
15060: LD_VAR 0 2
15064: PUSH
15065: LD_INT 0
15067: EQUAL
15068: IFFALSE 15093
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15070: LD_ADDR_EXP 27
15074: PUSH
15075: LD_EXP 27
15079: PUSH
15080: LD_STRING #Am06-1
15082: PUSH
15083: LD_EXP 25
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: ADD
15092: ST_TO_ADDR
// if tmp and needCrates > yourCrates then
15093: LD_VAR 0 2
15097: PUSH
15098: LD_EXP 25
15102: PUSH
15103: LD_VAR 0 3
15107: GREATER
15108: AND
15109: IFFALSE 15140
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15111: LD_ADDR_EXP 27
15115: PUSH
15116: LD_EXP 27
15120: PUSH
15121: LD_STRING #Am06-1
15123: PUSH
15124: LD_EXP 25
15128: PUSH
15129: LD_VAR 0 3
15133: MINUS
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: ADD
15139: ST_TO_ADDR
// if tmp and needCrates <= yourCrates then
15140: LD_VAR 0 2
15144: PUSH
15145: LD_EXP 25
15149: PUSH
15150: LD_VAR 0 3
15154: LESSEQUAL
15155: AND
15156: IFFALSE 15179
// strings = strings ^ [ #Am06-1 , 0 ] ;
15158: LD_ADDR_EXP 27
15162: PUSH
15163: LD_EXP 27
15167: PUSH
15168: LD_STRING #Am06-1
15170: PUSH
15171: LD_INT 0
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: ADD
15178: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15179: LD_ADDR_EXP 26
15183: PUSH
15184: LD_EXP 26
15188: PUSH
15189: LD_INT 35
15191: MINUS
15192: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15193: LD_ADDR_EXP 27
15197: PUSH
15198: LD_EXP 27
15202: PUSH
15203: LD_STRING #Am06-2
15205: PUSH
15206: LD_EXP 26
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: ADD
15215: ST_TO_ADDR
// display_strings = strings ;
15216: LD_ADDR_OWVAR 47
15220: PUSH
15221: LD_EXP 27
15225: ST_TO_ADDR
// end ; end_of_file
15226: PPOPN 3
15228: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
15229: LD_INT 0
15231: PPUSH
15232: PPUSH
15233: PPUSH
15234: PPUSH
15235: PPUSH
15236: PPUSH
15237: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15238: LD_ADDR_VAR 0 3
15242: PUSH
15243: LD_INT 22
15245: PUSH
15246: LD_INT 1
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 2
15255: PUSH
15256: LD_INT 30
15258: PUSH
15259: LD_INT 0
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 30
15268: PUSH
15269: LD_INT 1
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PPUSH
15285: CALL_OW 69
15289: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15290: LD_INT 35
15292: PPUSH
15293: CALL_OW 67
// until depot ;
15297: LD_VAR 0 3
15301: IFFALSE 15238
// repeat wait ( 0 0$1 ) ;
15303: LD_INT 35
15305: PPUSH
15306: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
15310: LD_ADDR_VAR 0 4
15314: PUSH
15315: LD_INT 22
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 91
15327: PUSH
15328: LD_VAR 0 3
15332: PUSH
15333: LD_INT 1
15335: ARRAY
15336: PUSH
15337: LD_INT 15
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 21
15347: PUSH
15348: LD_INT 1
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 2
15357: PUSH
15358: LD_INT 25
15360: PUSH
15361: LD_INT 1
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 25
15370: PUSH
15371: LD_INT 2
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 25
15380: PUSH
15381: LD_INT 3
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: LD_INT 25
15390: PUSH
15391: LD_INT 4
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 3
15407: PUSH
15408: LD_INT 54
15410: PUSH
15411: EMPTY
15412: LIST
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: LD_INT 55
15423: PUSH
15424: EMPTY
15425: LIST
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: PPUSH
15439: CALL_OW 69
15443: PUSH
15444: LD_EXP 2
15448: PUSH
15449: LD_EXP 3
15453: PUSH
15454: LD_EXP 4
15458: PUSH
15459: LD_EXP 5
15463: PUSH
15464: LD_EXP 7
15468: PUSH
15469: LD_EXP 8
15473: PUSH
15474: LD_EXP 9
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: PUSH
15488: LD_EXP 44
15492: ADD
15493: DIFF
15494: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
15495: LD_VAR 0 4
15499: PUSH
15500: LD_INT 1
15502: PPUSH
15503: CALL_OW 463
15507: NOT
15508: AND
15509: IFFALSE 15303
// tmp := tmp [ rand ( 1 , tmp ) ] ;
15511: LD_ADDR_VAR 0 4
15515: PUSH
15516: LD_VAR 0 4
15520: PUSH
15521: LD_INT 1
15523: PPUSH
15524: LD_VAR 0 4
15528: PPUSH
15529: CALL_OW 12
15533: ARRAY
15534: ST_TO_ADDR
// blockSpawn := 1 ;
15535: LD_ADDR_EXP 29
15539: PUSH
15540: LD_INT 1
15542: ST_TO_ADDR
// uc_side := 2 ;
15543: LD_ADDR_OWVAR 20
15547: PUSH
15548: LD_INT 2
15550: ST_TO_ADDR
// uc_nation := 2 ;
15551: LD_ADDR_OWVAR 21
15555: PUSH
15556: LD_INT 2
15558: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
15559: LD_ADDR_EXP 19
15563: PUSH
15564: LD_STRING Kurt
15566: PPUSH
15567: LD_INT 0
15569: PPUSH
15570: LD_STRING 
15572: PPUSH
15573: CALL 37411 0 3
15577: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
15578: LD_EXP 19
15582: PPUSH
15583: LD_VAR 0 4
15587: PPUSH
15588: CALL_OW 250
15592: PPUSH
15593: LD_VAR 0 4
15597: PPUSH
15598: CALL_OW 251
15602: PPUSH
15603: LD_INT 5
15605: PPUSH
15606: LD_INT 1
15608: PPUSH
15609: CALL_OW 50
// InGameOn ;
15613: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15617: LD_EXP 19
15621: PPUSH
15622: CALL_OW 87
// wait ( 0 0$2 ) ;
15626: LD_INT 70
15628: PPUSH
15629: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
15633: LD_EXP 19
15637: PPUSH
15638: LD_VAR 0 4
15642: PPUSH
15643: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
15647: LD_VAR 0 4
15651: PPUSH
15652: LD_EXP 19
15656: PPUSH
15657: CALL_OW 112
// wait ( 0 0$1 ) ;
15661: LD_INT 35
15663: PPUSH
15664: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
15668: LD_VAR 0 4
15672: PPUSH
15673: LD_EXP 19
15677: PPUSH
15678: CALL_OW 119
// DialogueOn ;
15682: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15686: LD_EXP 19
15690: PPUSH
15691: LD_STRING D2-Kurt-1
15693: PPUSH
15694: CALL_OW 88
// if tmp = JMM then
15698: LD_VAR 0 4
15702: PUSH
15703: LD_EXP 1
15707: EQUAL
15708: IFFALSE 15800
// begin Say ( JMM , D2-JMM-1 ) ;
15710: LD_EXP 1
15714: PPUSH
15715: LD_STRING D2-JMM-1
15717: PPUSH
15718: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15722: LD_EXP 19
15726: PPUSH
15727: LD_STRING D2-Kurt-2
15729: PPUSH
15730: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15734: LD_EXP 1
15738: PPUSH
15739: LD_STRING D2-JMM-2
15741: PPUSH
15742: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15746: LD_EXP 19
15750: PPUSH
15751: LD_STRING D2-Kurt-3
15753: PPUSH
15754: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
15758: LD_EXP 1
15762: PPUSH
15763: LD_STRING D2-JMM-3
15765: PPUSH
15766: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15770: LD_EXP 19
15774: PPUSH
15775: LD_STRING D2-Kurt-4
15777: PPUSH
15778: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
15782: LD_EXP 1
15786: PPUSH
15787: LD_STRING D2-JMM-4
15789: PPUSH
15790: CALL_OW 88
// DialogueOff ;
15794: CALL_OW 7
// end else
15798: GO 16028
// begin if GetSex ( tmp ) = 1 then
15800: LD_VAR 0 4
15804: PPUSH
15805: CALL_OW 258
15809: PUSH
15810: LD_INT 1
15812: EQUAL
15813: IFFALSE 15829
// Say ( tmp , D2-Sol1-1 ) else
15815: LD_VAR 0 4
15819: PPUSH
15820: LD_STRING D2-Sol1-1
15822: PPUSH
15823: CALL_OW 88
15827: GO 15841
// Say ( tmp , D2-FSol1-1 ) ;
15829: LD_VAR 0 4
15833: PPUSH
15834: LD_STRING D2-FSol1-1
15836: PPUSH
15837: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15841: LD_EXP 19
15845: PPUSH
15846: LD_STRING D2-Kurt-2
15848: PPUSH
15849: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15853: LD_VAR 0 4
15857: PPUSH
15858: CALL_OW 258
15862: PUSH
15863: LD_INT 1
15865: EQUAL
15866: IFFALSE 15882
// Say ( tmp , D2-Sol1-2 ) else
15868: LD_VAR 0 4
15872: PPUSH
15873: LD_STRING D2-Sol1-2
15875: PPUSH
15876: CALL_OW 88
15880: GO 15894
// Say ( tmp , D2-FSol1-2 ) ;
15882: LD_VAR 0 4
15886: PPUSH
15887: LD_STRING D2-FSol1-2
15889: PPUSH
15890: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15894: LD_EXP 19
15898: PPUSH
15899: LD_STRING D2-Kurt-3
15901: PPUSH
15902: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15906: LD_VAR 0 4
15910: PPUSH
15911: CALL_OW 258
15915: PUSH
15916: LD_INT 1
15918: EQUAL
15919: IFFALSE 15935
// Say ( tmp , D2-Sol1-3 ) else
15921: LD_VAR 0 4
15925: PPUSH
15926: LD_STRING D2-Sol1-3
15928: PPUSH
15929: CALL_OW 88
15933: GO 15947
// Say ( tmp , D2-FSol1-3 ) ;
15935: LD_VAR 0 4
15939: PPUSH
15940: LD_STRING D2-FSol1-3
15942: PPUSH
15943: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15947: LD_EXP 19
15951: PPUSH
15952: LD_STRING D2-Kurt-4
15954: PPUSH
15955: CALL_OW 88
// if GetSex ( tmp ) = 1 then
15959: LD_VAR 0 4
15963: PPUSH
15964: CALL_OW 258
15968: PUSH
15969: LD_INT 1
15971: EQUAL
15972: IFFALSE 16000
// begin Say ( tmp , D2-Sol1-4 ) ;
15974: LD_VAR 0 4
15978: PPUSH
15979: LD_STRING D2-Sol1-4
15981: PPUSH
15982: CALL_OW 88
// Say ( tmp , D2-Sol1-5 ) ;
15986: LD_VAR 0 4
15990: PPUSH
15991: LD_STRING D2-Sol1-5
15993: PPUSH
15994: CALL_OW 88
// end else
15998: GO 16024
// begin Say ( tmp , D2-FSol1-4 ) ;
16000: LD_VAR 0 4
16004: PPUSH
16005: LD_STRING D2-FSol1-4
16007: PPUSH
16008: CALL_OW 88
// Say ( tmp , D2-FSol1-5 ) ;
16012: LD_VAR 0 4
16016: PPUSH
16017: LD_STRING D2-FSol1-5
16019: PPUSH
16020: CALL_OW 88
// end ; DialogueOff ;
16024: CALL_OW 7
// end ; dec := ShowQuery1 ;
16028: LD_ADDR_VAR 0 6
16032: PUSH
16033: CALL 7296 0 0
16037: ST_TO_ADDR
// if dec = 1 then
16038: LD_VAR 0 6
16042: PUSH
16043: LD_INT 1
16045: EQUAL
16046: IFFALSE 16108
// begin DialogueOn ;
16048: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16052: LD_EXP 19
16056: PPUSH
16057: LD_STRING D2a-Kurt-1
16059: PPUSH
16060: CALL_OW 88
// DialogueOff ;
16064: CALL_OW 7
// InGameOff ;
16068: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16072: LD_INT 1
16074: PPUSH
16075: LD_INT 2
16077: PPUSH
16078: LD_INT 2
16080: PPUSH
16081: LD_INT 1
16083: PPUSH
16084: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16088: LD_EXP 19
16092: PPUSH
16093: LD_INT 8
16095: PPUSH
16096: CALL_OW 113
// readyToEscape := 1 ;
16100: LD_ADDR_EXP 21
16104: PUSH
16105: LD_INT 1
16107: ST_TO_ADDR
// end ; if dec = 2 then
16108: LD_VAR 0 6
16112: PUSH
16113: LD_INT 2
16115: EQUAL
16116: IFFALSE 16584
// begin DialogueOn ;
16118: CALL_OW 6
// if tmp = JMM then
16122: LD_VAR 0 4
16126: PUSH
16127: LD_EXP 1
16131: EQUAL
16132: IFFALSE 16188
// begin Say ( JMM , D2b-JMM-1 ) ;
16134: LD_EXP 1
16138: PPUSH
16139: LD_STRING D2b-JMM-1
16141: PPUSH
16142: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16146: LD_EXP 19
16150: PPUSH
16151: LD_STRING D2b-Kurt-1
16153: PPUSH
16154: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16158: LD_EXP 1
16162: PPUSH
16163: LD_STRING D2b-JMM-2
16165: PPUSH
16166: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16170: LD_EXP 19
16174: PPUSH
16175: LD_STRING D2b-Kurt-2
16177: PPUSH
16178: CALL_OW 88
// DialogueOff ;
16182: CALL_OW 7
// end else
16186: GO 16339
// begin if GetSex ( tmp ) = 1 then
16188: LD_VAR 0 4
16192: PPUSH
16193: CALL_OW 258
16197: PUSH
16198: LD_INT 1
16200: EQUAL
16201: IFFALSE 16217
// Say ( tmp , D2b-Sol1-1 ) else
16203: LD_VAR 0 4
16207: PPUSH
16208: LD_STRING D2b-Sol1-1
16210: PPUSH
16211: CALL_OW 88
16215: GO 16229
// Say ( tmp , D2b-FSol1-1 ) ;
16217: LD_VAR 0 4
16221: PPUSH
16222: LD_STRING D2b-FSol1-1
16224: PPUSH
16225: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16229: LD_EXP 19
16233: PPUSH
16234: LD_STRING D2b-Kurt-1
16236: PPUSH
16237: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16241: LD_VAR 0 4
16245: PPUSH
16246: CALL_OW 258
16250: PUSH
16251: LD_INT 1
16253: EQUAL
16254: IFFALSE 16270
// Say ( tmp , D2b-Sol1-2 ) else
16256: LD_VAR 0 4
16260: PPUSH
16261: LD_STRING D2b-Sol1-2
16263: PPUSH
16264: CALL_OW 88
16268: GO 16282
// Say ( tmp , D2b-FSol1-2 ) ;
16270: LD_VAR 0 4
16274: PPUSH
16275: LD_STRING D2b-FSol1-2
16277: PPUSH
16278: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16282: LD_EXP 19
16286: PPUSH
16287: LD_STRING D2b-Kurt-2
16289: PPUSH
16290: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16294: LD_VAR 0 4
16298: PPUSH
16299: CALL_OW 258
16303: PUSH
16304: LD_INT 1
16306: EQUAL
16307: IFFALSE 16323
// Say ( tmp , D2c-Sol1-2 ) else
16309: LD_VAR 0 4
16313: PPUSH
16314: LD_STRING D2c-Sol1-2
16316: PPUSH
16317: CALL_OW 88
16321: GO 16335
// Say ( tmp , D2c-FSol1-2 ) ;
16323: LD_VAR 0 4
16327: PPUSH
16328: LD_STRING D2c-FSol1-2
16330: PPUSH
16331: CALL_OW 88
// DialogueOff ;
16335: CALL_OW 7
// end ; dec2 := ShowQuery2 ;
16339: LD_ADDR_VAR 0 7
16343: PUSH
16344: CALL 7317 0 0
16348: ST_TO_ADDR
// if dec2 = 1 then
16349: LD_VAR 0 7
16353: PUSH
16354: LD_INT 1
16356: EQUAL
16357: IFFALSE 16419
// begin DialogueOn ;
16359: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16363: LD_EXP 19
16367: PPUSH
16368: LD_STRING D2a-Kurt-1
16370: PPUSH
16371: CALL_OW 88
// DialogueOff ;
16375: CALL_OW 7
// InGameOff ;
16379: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16383: LD_INT 1
16385: PPUSH
16386: LD_INT 2
16388: PPUSH
16389: LD_INT 2
16391: PPUSH
16392: LD_INT 1
16394: PPUSH
16395: CALL_OW 80
// ComMoveToArea ( Kurt , KurtEscape ) ;
16399: LD_EXP 19
16403: PPUSH
16404: LD_INT 8
16406: PPUSH
16407: CALL_OW 113
// readyToEscape := 1 ;
16411: LD_ADDR_EXP 21
16415: PUSH
16416: LD_INT 1
16418: ST_TO_ADDR
// end ; if dec2 = 2 then
16419: LD_VAR 0 7
16423: PUSH
16424: LD_INT 2
16426: EQUAL
16427: IFFALSE 16584
// begin if tmp = JMM then
16429: LD_VAR 0 4
16433: PUSH
16434: LD_EXP 1
16438: EQUAL
16439: IFFALSE 16499
// begin DialogueOn ;
16441: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16445: LD_EXP 1
16449: PPUSH
16450: LD_STRING D2c-JMM-1
16452: PPUSH
16453: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16457: LD_EXP 19
16461: PPUSH
16462: LD_STRING D2c-Kurt-1
16464: PPUSH
16465: CALL_OW 88
// DialogueOff ;
16469: CALL_OW 7
// InGameOff ;
16473: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16477: LD_EXP 19
16481: PPUSH
16482: LD_INT 8
16484: PPUSH
16485: CALL_OW 113
// readyToEscape := 1 ;
16489: LD_ADDR_EXP 21
16493: PUSH
16494: LD_INT 1
16496: ST_TO_ADDR
// end else
16497: GO 16584
// begin DialogueOn ;
16499: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16503: LD_VAR 0 4
16507: PPUSH
16508: CALL_OW 258
16512: PUSH
16513: LD_INT 1
16515: EQUAL
16516: IFFALSE 16532
// Say ( tmp , D2c-Sol1-1 ) else
16518: LD_VAR 0 4
16522: PPUSH
16523: LD_STRING D2c-Sol1-1
16525: PPUSH
16526: CALL_OW 88
16530: GO 16544
// Say ( tmp , D2c-FSol1-1 ) ;
16532: LD_VAR 0 4
16536: PPUSH
16537: LD_STRING D2c-FSol1-1
16539: PPUSH
16540: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16544: LD_EXP 19
16548: PPUSH
16549: LD_STRING D2c-Kurt-1
16551: PPUSH
16552: CALL_OW 88
// DialogueOff ;
16556: CALL_OW 7
// InGameOff ;
16560: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16564: LD_EXP 19
16568: PPUSH
16569: LD_INT 8
16571: PPUSH
16572: CALL_OW 113
// readyToEscape := 1 ;
16576: LD_ADDR_EXP 21
16580: PUSH
16581: LD_INT 1
16583: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
16584: LD_VAR 0 6
16588: PUSH
16589: LD_INT 3
16591: EQUAL
16592: IFFALSE 16753
// begin DialogueOn ;
16594: CALL_OW 6
// if tmp = JMM then
16598: LD_VAR 0 4
16602: PUSH
16603: LD_EXP 1
16607: EQUAL
16608: IFFALSE 16668
// begin DialogueOn ;
16610: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
16614: LD_EXP 1
16618: PPUSH
16619: LD_STRING D2c-JMM-1
16621: PPUSH
16622: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16626: LD_EXP 19
16630: PPUSH
16631: LD_STRING D2c-Kurt-1
16633: PPUSH
16634: CALL_OW 88
// DialogueOff ;
16638: CALL_OW 7
// InGameOff ;
16642: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16646: LD_EXP 19
16650: PPUSH
16651: LD_INT 8
16653: PPUSH
16654: CALL_OW 113
// readyToEscape := 1 ;
16658: LD_ADDR_EXP 21
16662: PUSH
16663: LD_INT 1
16665: ST_TO_ADDR
// end else
16666: GO 16753
// begin DialogueOn ;
16668: CALL_OW 6
// if GetSex ( tmp ) = 1 then
16672: LD_VAR 0 4
16676: PPUSH
16677: CALL_OW 258
16681: PUSH
16682: LD_INT 1
16684: EQUAL
16685: IFFALSE 16701
// Say ( tmp , D2c-Sol1-1 ) else
16687: LD_VAR 0 4
16691: PPUSH
16692: LD_STRING D2c-Sol1-1
16694: PPUSH
16695: CALL_OW 88
16699: GO 16713
// Say ( tmp , D2c-FSol1-1 ) ;
16701: LD_VAR 0 4
16705: PPUSH
16706: LD_STRING D2c-FSol1-1
16708: PPUSH
16709: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16713: LD_EXP 19
16717: PPUSH
16718: LD_STRING D2c-Kurt-1
16720: PPUSH
16721: CALL_OW 88
// DialogueOff ;
16725: CALL_OW 7
// InGameOff ;
16729: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16733: LD_EXP 19
16737: PPUSH
16738: LD_INT 8
16740: PPUSH
16741: CALL_OW 113
// readyToEscape := 1 ;
16745: LD_ADDR_EXP 21
16749: PUSH
16750: LD_INT 1
16752: ST_TO_ADDR
// end ; end ; blockSpawn := 0 ;
16753: LD_ADDR_EXP 29
16757: PUSH
16758: LD_INT 0
16760: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16761: LD_INT 35
16763: PPUSH
16764: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
16768: LD_EXP 19
16772: PPUSH
16773: LD_INT 8
16775: PPUSH
16776: CALL_OW 308
16780: PUSH
16781: LD_EXP 21
16785: AND
16786: PUSH
16787: LD_EXP 19
16791: PPUSH
16792: CALL_OW 301
16796: OR
16797: IFFALSE 16761
// if IsDead ( Kurt ) then
16799: LD_EXP 19
16803: PPUSH
16804: CALL_OW 301
16808: IFFALSE 16812
// exit ;
16810: GO 16867
// RemoveUnit ( Kurt ) ;
16812: LD_EXP 19
16816: PPUSH
16817: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
16821: LD_EXP 19
16825: PPUSH
16826: LD_STRING Kurt
16828: PPUSH
16829: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
16833: LD_INT 1
16835: PPUSH
16836: LD_INT 2
16838: PPUSH
16839: CALL_OW 81
16843: PUSH
16844: LD_INT 0
16846: EQUAL
16847: IFFALSE 16859
// kurtStatus = 1 else
16849: LD_ADDR_EXP 20
16853: PUSH
16854: LD_INT 1
16856: ST_TO_ADDR
16857: GO 16867
// kurtStatus = 2 ;
16859: LD_ADDR_EXP 20
16863: PUSH
16864: LD_INT 2
16866: ST_TO_ADDR
// end ; end_of_file
16867: LD_VAR 0 1
16871: RET
// every 0 0$2 do
16872: GO 16874
16874: DISABLE
// begin enable ;
16875: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
16876: LD_INT 3
16878: PPUSH
16879: LD_INT 2
16881: PPUSH
16882: LD_INT 10
16884: PPUSH
16885: LD_EXP 31
16889: PPUSH
16890: CALL 7728 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
16894: LD_INT 3
16896: PPUSH
16897: LD_INT 12
16899: PPUSH
16900: LD_EXP 31
16904: PPUSH
16905: CALL 9331 0 3
// if disableHealAI = 0 then
16909: LD_EXP 33
16913: PUSH
16914: LD_INT 0
16916: EQUAL
16917: IFFALSE 16938
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
16919: LD_INT 3
16921: PPUSH
16922: LD_INT 9
16924: PPUSH
16925: LD_INT 10
16927: PPUSH
16928: LD_INT 32
16930: PUSH
16931: EMPTY
16932: LIST
16933: PPUSH
16934: CALL 8095 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
16938: LD_INT 3
16940: PPUSH
16941: LD_INT 51
16943: PPUSH
16944: LD_INT 6
16946: PPUSH
16947: CALL 8784 0 3
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
16951: LD_INT 2
16953: PPUSH
16954: CALL_OW 303
16958: PUSH
16959: LD_INT 2
16961: PPUSH
16962: CALL_OW 255
16966: PUSH
16967: LD_INT 1
16969: EQUAL
16970: OR
16971: IFFALSE 16985
// DefendDepot ( 3 , rudepo ) else
16973: LD_INT 3
16975: PPUSH
16976: LD_INT 2
16978: PPUSH
16979: CALL 8611 0 2
16983: GO 16995
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
16985: LD_INT 3
16987: PPUSH
16988: LD_INT 10
16990: PPUSH
16991: CALL 8902 0 2
// end ;
16995: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and UnitsInside ( rufab ) and ruAttackers < 4 do
16996: LD_INT 22
16998: PUSH
16999: LD_INT 3
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 21
17008: PUSH
17009: LD_INT 2
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 55
17018: PUSH
17019: EMPTY
17020: LIST
17021: PUSH
17022: LD_INT 3
17024: PUSH
17025: LD_INT 34
17027: PUSH
17028: LD_INT 51
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: PPUSH
17045: CALL_OW 69
17049: PUSH
17050: LD_INT 0
17052: EQUAL
17053: PUSH
17054: LD_INT 21
17056: PPUSH
17057: CALL_OW 255
17061: PUSH
17062: LD_INT 3
17064: EQUAL
17065: AND
17066: PUSH
17067: LD_INT 21
17069: PPUSH
17070: CALL_OW 302
17074: AND
17075: PUSH
17076: LD_INT 2
17078: PPUSH
17079: CALL_OW 255
17083: PUSH
17084: LD_INT 3
17086: EQUAL
17087: AND
17088: PUSH
17089: LD_INT 2
17091: PPUSH
17092: CALL_OW 302
17096: AND
17097: PUSH
17098: LD_INT 21
17100: PPUSH
17101: CALL_OW 313
17105: AND
17106: PUSH
17107: LD_EXP 47
17111: PUSH
17112: LD_INT 4
17114: LESS
17115: AND
17116: IFFALSE 17331
17118: GO 17120
17120: DISABLE
// begin enable ;
17121: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 2000 ) ;
17122: LD_INT 2
17124: PPUSH
17125: CALL_OW 274
17129: PPUSH
17130: LD_INT 1
17132: PPUSH
17133: LD_INT 2000
17135: PPUSH
17136: CALL_OW 277
// BuildingVehicle ( 3 , rufab , [ 4 , 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 46 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 , 24 ] [ Difficulty ] ) ;
17140: LD_INT 3
17142: PPUSH
17143: LD_INT 21
17145: PPUSH
17146: LD_INT 4
17148: PUSH
17149: LD_INT 5
17151: PUSH
17152: LD_INT 6
17154: PUSH
17155: LD_INT 6
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: PUSH
17164: LD_OWVAR 67
17168: ARRAY
17169: PPUSH
17170: LD_INT 43
17172: PUSH
17173: LD_INT 43
17175: PUSH
17176: LD_INT 44
17178: PUSH
17179: LD_INT 44
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 43
17190: PUSH
17191: LD_INT 43
17193: PUSH
17194: LD_INT 43
17196: PUSH
17197: LD_INT 44
17199: PUSH
17200: LD_INT 44
17202: PUSH
17203: LD_INT 46
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 43
17216: PUSH
17217: LD_INT 43
17219: PUSH
17220: LD_INT 43
17222: PUSH
17223: LD_INT 44
17225: PUSH
17226: LD_INT 44
17228: PUSH
17229: LD_INT 46
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 43
17242: PUSH
17243: LD_INT 43
17245: PUSH
17246: LD_INT 44
17248: PUSH
17249: LD_INT 46
17251: PUSH
17252: LD_INT 46
17254: PUSH
17255: LD_INT 46
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: PUSH
17272: LD_OWVAR 67
17276: ARRAY
17277: PPUSH
17278: LD_INT 1
17280: PPUSH
17281: LD_INT 1
17283: PPUSH
17284: LD_INT 22
17286: PUSH
17287: LD_INT 22
17289: PUSH
17290: LD_INT 24
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 1
17299: PPUSH
17300: LD_INT 2
17302: PPUSH
17303: CALL_OW 12
17307: ARRAY
17308: PUSH
17309: LD_INT 24
17311: PUSH
17312: LD_INT 24
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: PUSH
17321: LD_OWVAR 67
17325: ARRAY
17326: PPUSH
17327: CALL 7574 0 7
// end ;
17331: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) and ruAttackers < [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17332: LD_INT 17
17334: PPUSH
17335: CALL_OW 255
17339: PUSH
17340: LD_INT 3
17342: EQUAL
17343: PUSH
17344: LD_INT 17
17346: PPUSH
17347: CALL_OW 302
17351: AND
17352: PUSH
17353: LD_INT 2
17355: PPUSH
17356: CALL_OW 255
17360: PUSH
17361: LD_INT 3
17363: EQUAL
17364: AND
17365: PUSH
17366: LD_INT 2
17368: PPUSH
17369: CALL_OW 302
17373: AND
17374: PUSH
17375: LD_EXP 47
17379: PUSH
17380: LD_INT 4
17382: PUSH
17383: LD_INT 5
17385: PUSH
17386: LD_INT 6
17388: PUSH
17389: LD_INT 7
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: PUSH
17398: LD_OWVAR 67
17402: ARRAY
17403: LESS
17404: AND
17405: IFFALSE 17453
17407: GO 17409
17409: DISABLE
// begin enable ;
17410: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17411: LD_INT 17
17413: PPUSH
17414: LD_INT 22
17416: PPUSH
17417: LD_INT 1
17419: PPUSH
17420: LD_INT 1
17422: PPUSH
17423: LD_INT 42
17425: PUSH
17426: LD_INT 43
17428: PUSH
17429: LD_INT 44
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 1
17439: PPUSH
17440: LD_INT 3
17442: PPUSH
17443: CALL_OW 12
17447: ARRAY
17448: PPUSH
17449: CALL_OW 185
// end ;
17453: END
// every 2 2$0 do var i , j ;
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
17460: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17461: LD_INT 14700
17463: PUSH
17464: LD_INT 33600
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 1
17473: PPUSH
17474: LD_INT 2
17476: PPUSH
17477: CALL_OW 12
17481: ARRAY
17482: PPUSH
17483: CALL_OW 67
// disableHealAI = 1 ;
17487: LD_ADDR_EXP 33
17491: PUSH
17492: LD_INT 1
17494: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17495: LD_ADDR_VAR 0 1
17499: PUSH
17500: LD_INT 22
17502: PUSH
17503: LD_INT 3
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 25
17512: PUSH
17513: LD_INT 4
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PPUSH
17524: CALL_OW 69
17528: PUSH
17529: FOR_IN
17530: IFFALSE 17543
// ComExitBuilding ( i ) ;
17532: LD_VAR 0 1
17536: PPUSH
17537: CALL_OW 122
17541: GO 17529
17543: POP
17544: POP
// wait ( 0 0$1 ) ;
17545: LD_INT 35
17547: PPUSH
17548: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17552: LD_INT 35
17554: PPUSH
17555: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17559: LD_ADDR_VAR 0 1
17563: PUSH
17564: LD_INT 22
17566: PUSH
17567: LD_INT 3
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 25
17576: PUSH
17577: LD_INT 4
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PPUSH
17588: CALL_OW 69
17592: PUSH
17593: FOR_IN
17594: IFFALSE 17671
// for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17596: LD_ADDR_VAR 0 2
17600: PUSH
17601: LD_INT 17
17603: PPUSH
17604: LD_INT 22
17606: PUSH
17607: LD_INT 0
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 25
17616: PUSH
17617: LD_INT 12
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PPUSH
17628: CALL_OW 70
17632: PUSH
17633: FOR_IN
17634: IFFALSE 17667
// AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17636: LD_VAR 0 1
17640: PPUSH
17641: LD_VAR 0 2
17645: PPUSH
17646: CALL_OW 250
17650: PPUSH
17651: LD_VAR 0 2
17655: PPUSH
17656: CALL_OW 251
17660: PPUSH
17661: CALL_OW 191
17665: GO 17633
17667: POP
17668: POP
17669: GO 17593
17671: POP
17672: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17673: LD_INT 22
17675: PUSH
17676: LD_INT 3
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 25
17685: PUSH
17686: LD_INT 4
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PPUSH
17697: CALL_OW 69
17701: PUSH
17702: LD_INT 0
17704: EQUAL
17705: PUSH
17706: LD_EXP 32
17710: PUSH
17711: LD_INT 6
17713: PUSH
17714: LD_INT 7
17716: PUSH
17717: LD_INT 8
17719: PUSH
17720: LD_INT 8
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: PUSH
17729: LD_OWVAR 67
17733: ARRAY
17734: GREATEREQUAL
17735: OR
17736: PUSH
17737: LD_INT 17
17739: PPUSH
17740: LD_INT 22
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 25
17752: PUSH
17753: LD_INT 12
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 70
17768: PUSH
17769: LD_INT 0
17771: EQUAL
17772: OR
17773: IFFALSE 17552
// disableHealAI = 0 ;
17775: LD_ADDR_EXP 33
17779: PUSH
17780: LD_INT 0
17782: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
17783: LD_ADDR_VAR 0 1
17787: PUSH
17788: LD_INT 22
17790: PUSH
17791: LD_INT 3
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 25
17800: PUSH
17801: LD_INT 12
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PPUSH
17812: CALL_OW 69
17816: PUSH
17817: FOR_IN
17818: IFFALSE 17834
// SetClass ( i , 16 ) ;
17820: LD_VAR 0 1
17824: PPUSH
17825: LD_INT 16
17827: PPUSH
17828: CALL_OW 336
17832: GO 17817
17834: POP
17835: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17836: LD_ADDR_VAR 0 1
17840: PUSH
17841: LD_INT 22
17843: PUSH
17844: LD_INT 3
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 25
17853: PUSH
17854: LD_INT 4
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PPUSH
17865: CALL_OW 69
17869: PUSH
17870: FOR_IN
17871: IFFALSE 17887
// ComEnterUnit ( i , rulab ) ;
17873: LD_VAR 0 1
17877: PPUSH
17878: LD_INT 32
17880: PPUSH
17881: CALL_OW 120
17885: GO 17870
17887: POP
17888: POP
// end ; end_of_file
17889: PPOPN 2
17891: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
17892: LD_EXP 26
17896: PUSH
17897: LD_INT 0
17899: LESSEQUAL
17900: IFFALSE 18049
17902: GO 17904
17904: DISABLE
17905: LD_INT 0
17907: PPUSH
17908: PPUSH
17909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17910: LD_ADDR_VAR 0 2
17914: PUSH
17915: LD_INT 22
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 21
17927: PUSH
17928: LD_INT 3
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 2
17937: PUSH
17938: LD_INT 30
17940: PUSH
17941: LD_INT 0
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 30
17950: PUSH
17951: LD_INT 1
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: LIST
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: PPUSH
17968: CALL_OW 69
17972: ST_TO_ADDR
// for i in tmp do
17973: LD_ADDR_VAR 0 1
17977: PUSH
17978: LD_VAR 0 2
17982: PUSH
17983: FOR_IN
17984: IFFALSE 18017
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
17986: LD_ADDR_VAR 0 3
17990: PUSH
17991: LD_VAR 0 3
17995: PUSH
17996: LD_VAR 0 1
18000: PPUSH
18001: CALL_OW 274
18005: PPUSH
18006: LD_INT 1
18008: PPUSH
18009: CALL_OW 275
18013: PLUS
18014: ST_TO_ADDR
18015: GO 17983
18017: POP
18018: POP
// if yourCrates >= needCrates then
18019: LD_VAR 0 3
18023: PUSH
18024: LD_EXP 25
18028: GREATEREQUAL
18029: IFFALSE 18042
// FinishMission ( yourCrates ) else
18031: LD_VAR 0 3
18035: PPUSH
18036: CALL 18052 0 1
18040: GO 18049
// YouLost ( matmin ) ;
18042: LD_STRING matmin
18044: PPUSH
18045: CALL_OW 104
// end ;
18049: PPOPN 3
18051: END
// export function FinishMission ( crates ) ; var m1 , m2 , m3 ; begin
18052: LD_INT 0
18054: PPUSH
18055: PPUSH
18056: PPUSH
18057: PPUSH
// if killCounter = 0 then
18058: LD_EXP 45
18062: PUSH
18063: LD_INT 0
18065: EQUAL
18066: IFFALSE 18075
// SetAchievement ( ACH_SURV ) ;
18068: LD_STRING ACH_SURV
18070: PPUSH
18071: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 then
18075: LD_INT 22
18077: PUSH
18078: LD_INT 3
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 21
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PPUSH
18099: CALL_OW 69
18103: PUSH
18104: LD_INT 0
18106: EQUAL
18107: IFFALSE 18123
// begin wait ( 3 ) ;
18109: LD_INT 3
18111: PPUSH
18112: CALL_OW 67
// SetAchievement ( ACH_BASEDESTROYER ) ;
18116: LD_STRING ACH_BASEDESTROYER
18118: PPUSH
18119: CALL_OW 543
// end ; m1 := false ;
18123: LD_ADDR_VAR 0 3
18127: PUSH
18128: LD_INT 0
18130: ST_TO_ADDR
// m2 := false ;
18131: LD_ADDR_VAR 0 4
18135: PUSH
18136: LD_INT 0
18138: ST_TO_ADDR
// m3 := false ;
18139: LD_ADDR_VAR 0 5
18143: PUSH
18144: LD_INT 0
18146: ST_TO_ADDR
// if crates + 100 > crates then
18147: LD_VAR 0 1
18151: PUSH
18152: LD_INT 100
18154: PLUS
18155: PUSH
18156: LD_VAR 0 1
18160: GREATER
18161: IFFALSE 18193
// begin AddMedal ( cans , 1 ) ;
18163: LD_STRING cans
18165: PPUSH
18166: LD_INT 1
18168: PPUSH
18169: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18173: LD_INT 1
18175: PPUSH
18176: LD_STRING 06_crates_1
18178: PPUSH
18179: CALL_OW 39
// m1 := true ;
18183: LD_ADDR_VAR 0 3
18187: PUSH
18188: LD_INT 1
18190: ST_TO_ADDR
// end else
18191: GO 18214
// begin AddMedal ( cans , - 1 ) ;
18193: LD_STRING cans
18195: PPUSH
18196: LD_INT 1
18198: NEG
18199: PPUSH
18200: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18204: LD_INT 0
18206: PPUSH
18207: LD_STRING 06_crates_1
18209: PPUSH
18210: CALL_OW 39
// end ; if unitLost < 3 then
18214: LD_EXP 30
18218: PUSH
18219: LD_INT 3
18221: LESS
18222: IFFALSE 18244
// begin AddMedal ( people , 1 ) ;
18224: LD_STRING people
18226: PPUSH
18227: LD_INT 1
18229: PPUSH
18230: CALL_OW 101
// m2 := true ;
18234: LD_ADDR_VAR 0 4
18238: PUSH
18239: LD_INT 1
18241: ST_TO_ADDR
// end else
18242: GO 18255
// AddMedal ( people , - 1 ) ;
18244: LD_STRING people
18246: PPUSH
18247: LD_INT 1
18249: NEG
18250: PPUSH
18251: CALL_OW 101
// SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18255: LD_EXP 28
18259: PPUSH
18260: LD_STRING 06_remoteVehs_1
18262: PPUSH
18263: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18267: LD_EXP 28
18271: PUSH
18272: LD_INT 1
18274: EQUAL
18275: IFFALSE 18297
// begin AddMedal ( remote , 1 ) ;
18277: LD_STRING remote
18279: PPUSH
18280: LD_INT 1
18282: PPUSH
18283: CALL_OW 101
// m3 := true ;
18287: LD_ADDR_VAR 0 5
18291: PUSH
18292: LD_INT 1
18294: ST_TO_ADDR
// end else
18295: GO 18337
// begin if GetTech ( 18 , 1 ) = state_enabled then
18297: LD_INT 18
18299: PPUSH
18300: LD_INT 1
18302: PPUSH
18303: CALL_OW 321
18307: PUSH
18308: LD_INT 1
18310: EQUAL
18311: IFFALSE 18326
// AddMedal ( remote , - 1 ) else
18313: LD_STRING remote
18315: PPUSH
18316: LD_INT 1
18318: NEG
18319: PPUSH
18320: CALL_OW 101
18324: GO 18337
// AddMedal ( remote , - 2 ) ;
18326: LD_STRING remote
18328: PPUSH
18329: LD_INT 2
18331: NEG
18332: PPUSH
18333: CALL_OW 101
// end ; if m1 and m2 and m3 then
18337: LD_VAR 0 3
18341: PUSH
18342: LD_VAR 0 4
18346: AND
18347: PUSH
18348: LD_VAR 0 5
18352: AND
18353: IFFALSE 18369
// begin wait ( 3 ) ;
18355: LD_INT 3
18357: PPUSH
18358: CALL_OW 67
// SetAchievement ( ACH_ASPEED_6 ) ;
18362: LD_STRING ACH_ASPEED_6
18364: PPUSH
18365: CALL_OW 543
// end ; if Difficulty >= 3 and m1 and m2 and m3 then
18369: LD_OWVAR 67
18373: PUSH
18374: LD_INT 3
18376: GREATEREQUAL
18377: PUSH
18378: LD_VAR 0 3
18382: AND
18383: PUSH
18384: LD_VAR 0 4
18388: AND
18389: PUSH
18390: LD_VAR 0 5
18394: AND
18395: IFFALSE 18407
// SetAchievementEX ( ACH_AMER , 6 ) ;
18397: LD_STRING ACH_AMER
18399: PPUSH
18400: LD_INT 6
18402: PPUSH
18403: CALL_OW 564
// SaveVariable ( kurtStatus , 06_KurtStatus_1 ) ;
18407: LD_EXP 20
18411: PPUSH
18412: LD_STRING 06_KurtStatus_1
18414: PPUSH
18415: CALL_OW 39
// GiveMedals ( Main ) ;
18419: LD_STRING Main
18421: PPUSH
18422: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18426: LD_INT 22
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 21
18438: PUSH
18439: LD_INT 1
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 50
18448: PUSH
18449: EMPTY
18450: LIST
18451: PUSH
18452: LD_INT 2
18454: PUSH
18455: LD_INT 25
18457: PUSH
18458: LD_INT 1
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 25
18467: PUSH
18468: LD_INT 2
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 25
18477: PUSH
18478: LD_INT 3
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 25
18487: PUSH
18488: LD_INT 4
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: PPUSH
18508: CALL_OW 69
18512: PPUSH
18513: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18517: LD_EXP 1
18521: PPUSH
18522: LD_EXP 42
18526: PUSH
18527: LD_STRING JMM
18529: STR
18530: PPUSH
18531: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18535: LD_EXP 2
18539: PPUSH
18540: LD_EXP 42
18544: PUSH
18545: LD_STRING Lisa
18547: STR
18548: PPUSH
18549: CALL 6909 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18553: LD_EXP 3
18557: PPUSH
18558: LD_EXP 42
18562: PUSH
18563: LD_STRING Bobby
18565: STR
18566: PPUSH
18567: CALL 6909 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18571: LD_EXP 4
18575: PPUSH
18576: LD_EXP 42
18580: PUSH
18581: LD_STRING Cyrus
18583: STR
18584: PPUSH
18585: CALL 6909 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18589: LD_EXP 5
18593: PPUSH
18594: LD_EXP 42
18598: PUSH
18599: LD_STRING Frank
18601: STR
18602: PPUSH
18603: CALL 6909 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18607: LD_EXP 6
18611: PPUSH
18612: LD_EXP 42
18616: PUSH
18617: LD_STRING Brown
18619: STR
18620: PPUSH
18621: CALL 6909 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18625: LD_EXP 7
18629: PPUSH
18630: LD_EXP 42
18634: PUSH
18635: LD_STRING Donaldson
18637: STR
18638: PPUSH
18639: CALL 6909 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18643: LD_EXP 8
18647: PPUSH
18648: LD_EXP 42
18652: PUSH
18653: LD_STRING Gladstone
18655: STR
18656: PPUSH
18657: CALL 6909 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18661: LD_EXP 9
18665: PPUSH
18666: LD_EXP 42
18670: PUSH
18671: LD_STRING Denis
18673: STR
18674: PPUSH
18675: CALL 6909 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
18679: LD_EXP 15
18683: PPUSH
18684: LD_EXP 42
18688: PUSH
18689: LD_STRING Joan
18691: STR
18692: PPUSH
18693: CALL 6909 0 2
// if IsLive ( Joan ) then
18697: LD_EXP 15
18701: PPUSH
18702: CALL_OW 300
18706: IFFALSE 18720
// SaveCharacters ( Joan , Joan ) ;
18708: LD_EXP 15
18712: PPUSH
18713: LD_STRING Joan
18715: PPUSH
18716: CALL_OW 38
// SaveVariable ( joanStatus , 06_JoanStatus_1 ) ;
18720: LD_EXP 16
18724: PPUSH
18725: LD_STRING 06_JoanStatus_1
18727: PPUSH
18728: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18732: LD_INT 50
18734: PUSH
18735: EMPTY
18736: LIST
18737: PUSH
18738: LD_INT 22
18740: PUSH
18741: LD_INT 1
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 21
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 2
18760: PUSH
18761: LD_INT 25
18763: PUSH
18764: LD_INT 1
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 25
18773: PUSH
18774: LD_INT 2
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 25
18783: PUSH
18784: LD_INT 3
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 25
18793: PUSH
18794: LD_INT 4
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: PPUSH
18814: CALL_OW 69
18818: PUSH
18819: LD_EXP 1
18823: PUSH
18824: LD_EXP 2
18828: PUSH
18829: LD_EXP 3
18833: PUSH
18834: LD_EXP 4
18838: PUSH
18839: LD_EXP 5
18843: PUSH
18844: LD_EXP 6
18848: PUSH
18849: LD_EXP 7
18853: PUSH
18854: LD_EXP 8
18858: PUSH
18859: LD_EXP 9
18863: PUSH
18864: LD_EXP 15
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: DIFF
18881: PPUSH
18882: LD_STRING 06_other_survivors
18884: PPUSH
18885: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
18889: LD_INT 50
18891: PUSH
18892: EMPTY
18893: LIST
18894: PUSH
18895: LD_INT 22
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 21
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: LD_INT 25
18920: PUSH
18921: LD_INT 12
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 25
18930: PUSH
18931: LD_INT 16
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: LIST
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: PPUSH
18949: CALL_OW 69
18953: PPUSH
18954: LD_STRING 06_other_apemans
18956: PPUSH
18957: CALL_OW 38
// YouWin ;
18961: CALL_OW 103
// end ; end_of_file
18965: LD_VAR 0 2
18969: RET
// every 0 0$1 trigger ruAttackers and tick > [ 10 10$00 , 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] do var i , tmp , path , driver ;
18970: LD_EXP 47
18974: PUSH
18975: LD_OWVAR 1
18979: PUSH
18980: LD_INT 21000
18982: PUSH
18983: LD_INT 18900
18985: PUSH
18986: LD_INT 16800
18988: PUSH
18989: LD_INT 14700
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: PUSH
18998: LD_OWVAR 67
19002: ARRAY
19003: GREATER
19004: AND
19005: IFFALSE 19319
19007: GO 19009
19009: DISABLE
19010: LD_INT 0
19012: PPUSH
19013: PPUSH
19014: PPUSH
19015: PPUSH
// begin enable ;
19016: ENABLE
// for i in ruAttackers do
19017: LD_ADDR_VAR 0 1
19021: PUSH
19022: LD_EXP 47
19026: PUSH
19027: FOR_IN
19028: IFFALSE 19317
// begin if not IsDrivenBy ( i ) then
19030: LD_VAR 0 1
19034: PPUSH
19035: CALL_OW 311
19039: NOT
19040: IFFALSE 19044
// continue ;
19042: GO 19027
// if i mod 2 = 0 then
19044: LD_VAR 0 1
19048: PUSH
19049: LD_INT 2
19051: MOD
19052: PUSH
19053: LD_INT 0
19055: EQUAL
19056: IFFALSE 19111
// path := [ [ 91 , 52 ] , [ 82 , 34 ] , [ 90 , 26 ] , [ 80 , 12 ] ] else
19058: LD_ADDR_VAR 0 3
19062: PUSH
19063: LD_INT 91
19065: PUSH
19066: LD_INT 52
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 82
19075: PUSH
19076: LD_INT 34
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 90
19085: PUSH
19086: LD_INT 26
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 80
19095: PUSH
19096: LD_INT 12
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: ST_TO_ADDR
19109: GO 19173
// path := [ [ 91 , 52 ] , [ 68 , 46 ] , [ 48 , 43 ] , [ 33 , 34 ] , [ 30 , 19 ] ] ;
19111: LD_ADDR_VAR 0 3
19115: PUSH
19116: LD_INT 91
19118: PUSH
19119: LD_INT 52
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 68
19128: PUSH
19129: LD_INT 46
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 48
19138: PUSH
19139: LD_INT 43
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 33
19148: PUSH
19149: LD_INT 34
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 30
19158: PUSH
19159: LD_INT 19
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: ST_TO_ADDR
// if GetLives ( i ) = 1000 then
19173: LD_VAR 0 1
19177: PPUSH
19178: CALL_OW 256
19182: PUSH
19183: LD_INT 1000
19185: EQUAL
19186: IFFALSE 19204
// AgressiveMove ( i , path ) else
19188: LD_VAR 0 1
19192: PPUSH
19193: LD_VAR 0 3
19197: PPUSH
19198: CALL 76543 0 2
19202: GO 19315
// if GetLives ( i ) < 650 then
19204: LD_VAR 0 1
19208: PPUSH
19209: CALL_OW 256
19213: PUSH
19214: LD_INT 650
19216: LESS
19217: IFFALSE 19315
// begin if not IsInArea ( i , russianRepairArea ) then
19219: LD_VAR 0 1
19223: PPUSH
19224: LD_INT 12
19226: PPUSH
19227: CALL_OW 308
19231: NOT
19232: IFFALSE 19301
// begin SetTag ( i , 0 ) ;
19234: LD_VAR 0 1
19238: PPUSH
19239: LD_INT 0
19241: PPUSH
19242: CALL_OW 109
// if GetFuel ( i ) < 50 and IsOk ( rufab ) then
19246: LD_VAR 0 1
19250: PPUSH
19251: CALL_OW 261
19255: PUSH
19256: LD_INT 50
19258: LESS
19259: PUSH
19260: LD_INT 21
19262: PPUSH
19263: CALL_OW 302
19267: AND
19268: IFFALSE 19284
// ComMoveUnit ( i , rufab ) else
19270: LD_VAR 0 1
19274: PPUSH
19275: LD_INT 21
19277: PPUSH
19278: CALL_OW 112
19282: GO 19299
// ComMoveXY ( i , 121 , 99 ) ;
19284: LD_VAR 0 1
19288: PPUSH
19289: LD_INT 121
19291: PPUSH
19292: LD_INT 99
19294: PPUSH
19295: CALL_OW 111
// end else
19299: GO 19315
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
19301: LD_VAR 0 1
19305: PPUSH
19306: CALL_OW 311
19310: PPUSH
19311: CALL 75639 0 1
// end ; end ;
19315: GO 19027
19317: POP
19318: POP
// end ;
19319: PPOPN 4
19321: END
// export function PrepareRussianAdditionalAttack ; var i , un ; begin
19322: LD_INT 0
19324: PPUSH
19325: PPUSH
19326: PPUSH
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
19327: LD_ADDR_VAR 0 2
19331: PUSH
19332: DOUBLE
19333: LD_INT 1
19335: DEC
19336: ST_TO_ADDR
19337: LD_INT 4
19339: PUSH
19340: LD_INT 5
19342: PUSH
19343: LD_INT 6
19345: PUSH
19346: LD_INT 6
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: PUSH
19355: LD_OWVAR 67
19359: ARRAY
19360: PUSH
19361: FOR_TO
19362: IFFALSE 19533
// begin uc_side := 3 ;
19364: LD_ADDR_OWVAR 20
19368: PUSH
19369: LD_INT 3
19371: ST_TO_ADDR
// uc_nation := 3 ;
19372: LD_ADDR_OWVAR 21
19376: PUSH
19377: LD_INT 3
19379: ST_TO_ADDR
// PrepareSoldier ( false , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
19380: LD_INT 0
19382: PPUSH
19383: LD_INT 4
19385: PUSH
19386: LD_INT 5
19388: PUSH
19389: LD_INT 6
19391: PUSH
19392: LD_INT 6
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: PUSH
19401: LD_OWVAR 67
19405: ARRAY
19406: PPUSH
19407: CALL_OW 381
// un := CreateHuman ;
19411: LD_ADDR_VAR 0 3
19415: PUSH
19416: CALL_OW 44
19420: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 62 , 3 , false ) ;
19421: LD_VAR 0 3
19425: PPUSH
19426: LD_INT 127
19428: PPUSH
19429: LD_INT 62
19431: PPUSH
19432: LD_INT 3
19434: PPUSH
19435: LD_INT 0
19437: PPUSH
19438: CALL_OW 50
// ruAttackersInForest := Replace ( ruAttackersInForest , ruAttackersInForest + 1 , un ) ;
19442: LD_ADDR_EXP 48
19446: PUSH
19447: LD_EXP 48
19451: PPUSH
19452: LD_EXP 48
19456: PUSH
19457: LD_INT 1
19459: PLUS
19460: PPUSH
19461: LD_VAR 0 3
19465: PPUSH
19466: CALL_OW 1
19470: ST_TO_ADDR
// ComAgressiveMove ( un , 83 , 49 ) ;
19471: LD_VAR 0 3
19475: PPUSH
19476: LD_INT 83
19478: PPUSH
19479: LD_INT 49
19481: PPUSH
19482: CALL_OW 114
// AddComAgressiveMove ( un , 49 , 43 ) ;
19486: LD_VAR 0 3
19490: PPUSH
19491: LD_INT 49
19493: PPUSH
19494: LD_INT 43
19496: PPUSH
19497: CALL_OW 174
// AddComAgressiveMove ( un , 31 , 15 ) ;
19501: LD_VAR 0 3
19505: PPUSH
19506: LD_INT 31
19508: PPUSH
19509: LD_INT 15
19511: PPUSH
19512: CALL_OW 174
// AddComAgressiveMove ( un , 63 , 9 ) ;
19516: LD_VAR 0 3
19520: PPUSH
19521: LD_INT 63
19523: PPUSH
19524: LD_INT 9
19526: PPUSH
19527: CALL_OW 174
// end ;
19531: GO 19361
19533: POP
19534: POP
// end ; end_of_file
19535: LD_VAR 0 1
19539: RET
// export function CreateNature ; var i , un ; begin
19540: LD_INT 0
19542: PPUSH
19543: PPUSH
19544: PPUSH
// for i := 1 to Difficulty + 2 do
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: DOUBLE
19551: LD_INT 1
19553: DEC
19554: ST_TO_ADDR
19555: LD_OWVAR 67
19559: PUSH
19560: LD_INT 2
19562: PLUS
19563: PUSH
19564: FOR_TO
19565: IFFALSE 19674
// begin hc_sex := sex_male ;
19567: LD_ADDR_OWVAR 27
19571: PUSH
19572: LD_INT 1
19574: ST_TO_ADDR
// uc_side := 0 ;
19575: LD_ADDR_OWVAR 20
19579: PUSH
19580: LD_INT 0
19582: ST_TO_ADDR
// uc_nation := nation_nature ;
19583: LD_ADDR_OWVAR 21
19587: PUSH
19588: LD_INT 0
19590: ST_TO_ADDR
// hc_class := class_tiger ;
19591: LD_ADDR_OWVAR 28
19595: PUSH
19596: LD_INT 14
19598: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19599: LD_ADDR_OWVAR 31
19603: PUSH
19604: LD_EXP 35
19608: PUSH
19609: LD_INT 0
19611: PUSH
19612: LD_INT 0
19614: PUSH
19615: LD_INT 0
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
19624: LD_ADDR_OWVAR 35
19628: PUSH
19629: LD_INT 5
19631: NEG
19632: PPUSH
19633: LD_INT 5
19635: PPUSH
19636: CALL_OW 12
19640: PUSH
19641: LD_OWVAR 67
19645: MUL
19646: ST_TO_ADDR
// un := CreateHuman ;
19647: LD_ADDR_VAR 0 3
19651: PUSH
19652: CALL_OW 44
19656: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19657: LD_VAR 0 3
19661: PPUSH
19662: LD_INT 18
19664: PPUSH
19665: LD_INT 0
19667: PPUSH
19668: CALL_OW 49
// end ;
19672: GO 19564
19674: POP
19675: POP
// for i = 1 to rand ( 3 , 4 ) do
19676: LD_ADDR_VAR 0 2
19680: PUSH
19681: DOUBLE
19682: LD_INT 1
19684: DEC
19685: ST_TO_ADDR
19686: LD_INT 3
19688: PPUSH
19689: LD_INT 4
19691: PPUSH
19692: CALL_OW 12
19696: PUSH
19697: FOR_TO
19698: IFFALSE 19768
// begin hc_class := class_phororhacos ;
19700: LD_ADDR_OWVAR 28
19704: PUSH
19705: LD_INT 18
19707: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19708: LD_ADDR_OWVAR 31
19712: PUSH
19713: LD_EXP 35
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: LD_INT 0
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: ST_TO_ADDR
// hc_agressivity := 0 ;
19733: LD_ADDR_OWVAR 35
19737: PUSH
19738: LD_INT 0
19740: ST_TO_ADDR
// un = CreateHuman ;
19741: LD_ADDR_VAR 0 3
19745: PUSH
19746: CALL_OW 44
19750: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19751: LD_VAR 0 3
19755: PPUSH
19756: LD_INT 18
19758: PPUSH
19759: LD_INT 0
19761: PPUSH
19762: CALL_OW 49
// end ;
19766: GO 19697
19768: POP
19769: POP
// for i := 1 to rand ( 1 , 3 ) + Difficulty do
19770: LD_ADDR_VAR 0 2
19774: PUSH
19775: DOUBLE
19776: LD_INT 1
19778: DEC
19779: ST_TO_ADDR
19780: LD_INT 1
19782: PPUSH
19783: LD_INT 3
19785: PPUSH
19786: CALL_OW 12
19790: PUSH
19791: LD_OWVAR 67
19795: PLUS
19796: PUSH
19797: FOR_TO
19798: IFFALSE 19935
// begin hc_class := class_apeman ;
19800: LD_ADDR_OWVAR 28
19804: PUSH
19805: LD_INT 12
19807: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
19808: LD_ADDR_OWVAR 31
19812: PUSH
19813: LD_INT 2
19815: PPUSH
19816: LD_INT 5
19818: PPUSH
19819: CALL_OW 12
19823: PUSH
19824: LD_INT 0
19826: PPUSH
19827: LD_INT 2
19829: PPUSH
19830: CALL_OW 12
19834: PUSH
19835: LD_INT 0
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: ST_TO_ADDR
// hc_agressivity := [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 45 , 55 ) ] [ Difficulty ] ;
19847: LD_ADDR_OWVAR 35
19851: PUSH
19852: LD_INT 20
19854: PPUSH
19855: LD_INT 30
19857: PPUSH
19858: CALL_OW 12
19862: PUSH
19863: LD_INT 30
19865: PPUSH
19866: LD_INT 40
19868: PPUSH
19869: CALL_OW 12
19873: PUSH
19874: LD_INT 40
19876: PPUSH
19877: LD_INT 50
19879: PPUSH
19880: CALL_OW 12
19884: PUSH
19885: LD_INT 45
19887: PPUSH
19888: LD_INT 55
19890: PPUSH
19891: CALL_OW 12
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: PUSH
19902: LD_OWVAR 67
19906: ARRAY
19907: ST_TO_ADDR
// un := CreateHuman ;
19908: LD_ADDR_VAR 0 3
19912: PUSH
19913: CALL_OW 44
19917: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
19918: LD_VAR 0 3
19922: PPUSH
19923: LD_INT 19
19925: PPUSH
19926: LD_INT 0
19928: PPUSH
19929: CALL_OW 49
// end ;
19933: GO 19797
19935: POP
19936: POP
// for i := 1 to rand ( 5 , 6 ) + Difficulty do
19937: LD_ADDR_VAR 0 2
19941: PUSH
19942: DOUBLE
19943: LD_INT 1
19945: DEC
19946: ST_TO_ADDR
19947: LD_INT 5
19949: PPUSH
19950: LD_INT 6
19952: PPUSH
19953: CALL_OW 12
19957: PUSH
19958: LD_OWVAR 67
19962: PLUS
19963: PUSH
19964: FOR_TO
19965: IFFALSE 20049
// begin hc_class := class_apeman ;
19967: LD_ADDR_OWVAR 28
19971: PUSH
19972: LD_INT 12
19974: ST_TO_ADDR
// hc_skills := [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
19975: LD_ADDR_OWVAR 31
19979: PUSH
19980: LD_INT 2
19982: PPUSH
19983: LD_INT 5
19985: PPUSH
19986: CALL_OW 12
19990: PUSH
19991: LD_INT 0
19993: PPUSH
19994: LD_INT 2
19996: PPUSH
19997: CALL_OW 12
20001: PUSH
20002: LD_INT 0
20004: PUSH
20005: LD_INT 0
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: ST_TO_ADDR
// hc_agressivity := 0 ;
20014: LD_ADDR_OWVAR 35
20018: PUSH
20019: LD_INT 0
20021: ST_TO_ADDR
// un = CreateHuman ;
20022: LD_ADDR_VAR 0 3
20026: PUSH
20027: CALL_OW 44
20031: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20032: LD_VAR 0 3
20036: PPUSH
20037: LD_INT 20
20039: PPUSH
20040: LD_INT 0
20042: PPUSH
20043: CALL_OW 49
// end ;
20047: GO 19964
20049: POP
20050: POP
// end ; end_of_file end_of_file
20051: LD_VAR 0 1
20055: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20056: LD_INT 0
20058: PPUSH
// ar_miner := 81 ;
20059: LD_ADDR_EXP 56
20063: PUSH
20064: LD_INT 81
20066: ST_TO_ADDR
// ar_crane := 88 ;
20067: LD_ADDR_EXP 55
20071: PUSH
20072: LD_INT 88
20074: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20075: LD_ADDR_EXP 50
20079: PUSH
20080: LD_INT 89
20082: ST_TO_ADDR
// us_hack := 99 ;
20083: LD_ADDR_EXP 51
20087: PUSH
20088: LD_INT 99
20090: ST_TO_ADDR
// us_artillery := 97 ;
20091: LD_ADDR_EXP 52
20095: PUSH
20096: LD_INT 97
20098: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20099: LD_ADDR_EXP 53
20103: PUSH
20104: LD_INT 91
20106: ST_TO_ADDR
// ar_mortar := 92 ;
20107: LD_ADDR_EXP 54
20111: PUSH
20112: LD_INT 92
20114: ST_TO_ADDR
// ru_radar := 98 ;
20115: LD_ADDR_EXP 49
20119: PUSH
20120: LD_INT 98
20122: ST_TO_ADDR
// tech_Artillery := 80 ;
20123: LD_ADDR_EXP 57
20127: PUSH
20128: LD_INT 80
20130: ST_TO_ADDR
// tech_RadMat := 81 ;
20131: LD_ADDR_EXP 58
20135: PUSH
20136: LD_INT 81
20138: ST_TO_ADDR
// tech_BasicTools := 82 ;
20139: LD_ADDR_EXP 59
20143: PUSH
20144: LD_INT 82
20146: ST_TO_ADDR
// tech_Cargo := 83 ;
20147: LD_ADDR_EXP 60
20151: PUSH
20152: LD_INT 83
20154: ST_TO_ADDR
// tech_Track := 84 ;
20155: LD_ADDR_EXP 61
20159: PUSH
20160: LD_INT 84
20162: ST_TO_ADDR
// tech_Crane := 85 ;
20163: LD_ADDR_EXP 62
20167: PUSH
20168: LD_INT 85
20170: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20171: LD_ADDR_EXP 63
20175: PUSH
20176: LD_INT 86
20178: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20179: LD_ADDR_EXP 64
20183: PUSH
20184: LD_INT 87
20186: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
20187: LD_ADDR_EXP 65
20191: PUSH
20192: LD_INT 88
20194: ST_TO_ADDR
// class_mastodont := 31 ;
20195: LD_ADDR_EXP 66
20199: PUSH
20200: LD_INT 31
20202: ST_TO_ADDR
// class_horse := 21 ;
20203: LD_ADDR_EXP 67
20207: PUSH
20208: LD_INT 21
20210: ST_TO_ADDR
// end ;
20211: LD_VAR 0 1
20215: RET
// every 1 do
20216: GO 20218
20218: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
20219: CALL 20056 0 0
20223: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20224: LD_INT 0
20226: PPUSH
// if p2 = 100 then
20227: LD_VAR 0 2
20231: PUSH
20232: LD_INT 100
20234: EQUAL
20235: IFFALSE 21184
// begin if not StreamModeActive then
20237: LD_EXP 68
20241: NOT
20242: IFFALSE 20252
// StreamModeActive := true ;
20244: LD_ADDR_EXP 68
20248: PUSH
20249: LD_INT 1
20251: ST_TO_ADDR
// if p3 = 0 then
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 0
20259: EQUAL
20260: IFFALSE 20266
// InitStreamMode ;
20262: CALL 21344 0 0
// if p3 = 1 then
20266: LD_VAR 0 3
20270: PUSH
20271: LD_INT 1
20273: EQUAL
20274: IFFALSE 20284
// sRocket := true ;
20276: LD_ADDR_EXP 73
20280: PUSH
20281: LD_INT 1
20283: ST_TO_ADDR
// if p3 = 2 then
20284: LD_VAR 0 3
20288: PUSH
20289: LD_INT 2
20291: EQUAL
20292: IFFALSE 20302
// sSpeed := true ;
20294: LD_ADDR_EXP 72
20298: PUSH
20299: LD_INT 1
20301: ST_TO_ADDR
// if p3 = 3 then
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 3
20309: EQUAL
20310: IFFALSE 20320
// sEngine := true ;
20312: LD_ADDR_EXP 74
20316: PUSH
20317: LD_INT 1
20319: ST_TO_ADDR
// if p3 = 4 then
20320: LD_VAR 0 3
20324: PUSH
20325: LD_INT 4
20327: EQUAL
20328: IFFALSE 20338
// sSpec := true ;
20330: LD_ADDR_EXP 71
20334: PUSH
20335: LD_INT 1
20337: ST_TO_ADDR
// if p3 = 5 then
20338: LD_VAR 0 3
20342: PUSH
20343: LD_INT 5
20345: EQUAL
20346: IFFALSE 20356
// sLevel := true ;
20348: LD_ADDR_EXP 75
20352: PUSH
20353: LD_INT 1
20355: ST_TO_ADDR
// if p3 = 6 then
20356: LD_VAR 0 3
20360: PUSH
20361: LD_INT 6
20363: EQUAL
20364: IFFALSE 20374
// sArmoury := true ;
20366: LD_ADDR_EXP 76
20370: PUSH
20371: LD_INT 1
20373: ST_TO_ADDR
// if p3 = 7 then
20374: LD_VAR 0 3
20378: PUSH
20379: LD_INT 7
20381: EQUAL
20382: IFFALSE 20392
// sRadar := true ;
20384: LD_ADDR_EXP 77
20388: PUSH
20389: LD_INT 1
20391: ST_TO_ADDR
// if p3 = 8 then
20392: LD_VAR 0 3
20396: PUSH
20397: LD_INT 8
20399: EQUAL
20400: IFFALSE 20410
// sBunker := true ;
20402: LD_ADDR_EXP 78
20406: PUSH
20407: LD_INT 1
20409: ST_TO_ADDR
// if p3 = 9 then
20410: LD_VAR 0 3
20414: PUSH
20415: LD_INT 9
20417: EQUAL
20418: IFFALSE 20428
// sHack := true ;
20420: LD_ADDR_EXP 79
20424: PUSH
20425: LD_INT 1
20427: ST_TO_ADDR
// if p3 = 10 then
20428: LD_VAR 0 3
20432: PUSH
20433: LD_INT 10
20435: EQUAL
20436: IFFALSE 20446
// sFire := true ;
20438: LD_ADDR_EXP 80
20442: PUSH
20443: LD_INT 1
20445: ST_TO_ADDR
// if p3 = 11 then
20446: LD_VAR 0 3
20450: PUSH
20451: LD_INT 11
20453: EQUAL
20454: IFFALSE 20464
// sRefresh := true ;
20456: LD_ADDR_EXP 81
20460: PUSH
20461: LD_INT 1
20463: ST_TO_ADDR
// if p3 = 12 then
20464: LD_VAR 0 3
20468: PUSH
20469: LD_INT 12
20471: EQUAL
20472: IFFALSE 20482
// sExp := true ;
20474: LD_ADDR_EXP 82
20478: PUSH
20479: LD_INT 1
20481: ST_TO_ADDR
// if p3 = 13 then
20482: LD_VAR 0 3
20486: PUSH
20487: LD_INT 13
20489: EQUAL
20490: IFFALSE 20500
// sDepot := true ;
20492: LD_ADDR_EXP 83
20496: PUSH
20497: LD_INT 1
20499: ST_TO_ADDR
// if p3 = 14 then
20500: LD_VAR 0 3
20504: PUSH
20505: LD_INT 14
20507: EQUAL
20508: IFFALSE 20518
// sFlag := true ;
20510: LD_ADDR_EXP 84
20514: PUSH
20515: LD_INT 1
20517: ST_TO_ADDR
// if p3 = 15 then
20518: LD_VAR 0 3
20522: PUSH
20523: LD_INT 15
20525: EQUAL
20526: IFFALSE 20536
// sKamikadze := true ;
20528: LD_ADDR_EXP 92
20532: PUSH
20533: LD_INT 1
20535: ST_TO_ADDR
// if p3 = 16 then
20536: LD_VAR 0 3
20540: PUSH
20541: LD_INT 16
20543: EQUAL
20544: IFFALSE 20554
// sTroll := true ;
20546: LD_ADDR_EXP 93
20550: PUSH
20551: LD_INT 1
20553: ST_TO_ADDR
// if p3 = 17 then
20554: LD_VAR 0 3
20558: PUSH
20559: LD_INT 17
20561: EQUAL
20562: IFFALSE 20572
// sSlow := true ;
20564: LD_ADDR_EXP 94
20568: PUSH
20569: LD_INT 1
20571: ST_TO_ADDR
// if p3 = 18 then
20572: LD_VAR 0 3
20576: PUSH
20577: LD_INT 18
20579: EQUAL
20580: IFFALSE 20590
// sLack := true ;
20582: LD_ADDR_EXP 95
20586: PUSH
20587: LD_INT 1
20589: ST_TO_ADDR
// if p3 = 19 then
20590: LD_VAR 0 3
20594: PUSH
20595: LD_INT 19
20597: EQUAL
20598: IFFALSE 20608
// sTank := true ;
20600: LD_ADDR_EXP 97
20604: PUSH
20605: LD_INT 1
20607: ST_TO_ADDR
// if p3 = 20 then
20608: LD_VAR 0 3
20612: PUSH
20613: LD_INT 20
20615: EQUAL
20616: IFFALSE 20626
// sRemote := true ;
20618: LD_ADDR_EXP 98
20622: PUSH
20623: LD_INT 1
20625: ST_TO_ADDR
// if p3 = 21 then
20626: LD_VAR 0 3
20630: PUSH
20631: LD_INT 21
20633: EQUAL
20634: IFFALSE 20644
// sPowell := true ;
20636: LD_ADDR_EXP 99
20640: PUSH
20641: LD_INT 1
20643: ST_TO_ADDR
// if p3 = 22 then
20644: LD_VAR 0 3
20648: PUSH
20649: LD_INT 22
20651: EQUAL
20652: IFFALSE 20662
// sTeleport := true ;
20654: LD_ADDR_EXP 102
20658: PUSH
20659: LD_INT 1
20661: ST_TO_ADDR
// if p3 = 23 then
20662: LD_VAR 0 3
20666: PUSH
20667: LD_INT 23
20669: EQUAL
20670: IFFALSE 20680
// sOilTower := true ;
20672: LD_ADDR_EXP 104
20676: PUSH
20677: LD_INT 1
20679: ST_TO_ADDR
// if p3 = 24 then
20680: LD_VAR 0 3
20684: PUSH
20685: LD_INT 24
20687: EQUAL
20688: IFFALSE 20698
// sShovel := true ;
20690: LD_ADDR_EXP 105
20694: PUSH
20695: LD_INT 1
20697: ST_TO_ADDR
// if p3 = 25 then
20698: LD_VAR 0 3
20702: PUSH
20703: LD_INT 25
20705: EQUAL
20706: IFFALSE 20716
// sSheik := true ;
20708: LD_ADDR_EXP 106
20712: PUSH
20713: LD_INT 1
20715: ST_TO_ADDR
// if p3 = 26 then
20716: LD_VAR 0 3
20720: PUSH
20721: LD_INT 26
20723: EQUAL
20724: IFFALSE 20734
// sEarthquake := true ;
20726: LD_ADDR_EXP 108
20730: PUSH
20731: LD_INT 1
20733: ST_TO_ADDR
// if p3 = 27 then
20734: LD_VAR 0 3
20738: PUSH
20739: LD_INT 27
20741: EQUAL
20742: IFFALSE 20752
// sAI := true ;
20744: LD_ADDR_EXP 109
20748: PUSH
20749: LD_INT 1
20751: ST_TO_ADDR
// if p3 = 28 then
20752: LD_VAR 0 3
20756: PUSH
20757: LD_INT 28
20759: EQUAL
20760: IFFALSE 20770
// sCargo := true ;
20762: LD_ADDR_EXP 112
20766: PUSH
20767: LD_INT 1
20769: ST_TO_ADDR
// if p3 = 29 then
20770: LD_VAR 0 3
20774: PUSH
20775: LD_INT 29
20777: EQUAL
20778: IFFALSE 20788
// sDLaser := true ;
20780: LD_ADDR_EXP 113
20784: PUSH
20785: LD_INT 1
20787: ST_TO_ADDR
// if p3 = 30 then
20788: LD_VAR 0 3
20792: PUSH
20793: LD_INT 30
20795: EQUAL
20796: IFFALSE 20806
// sExchange := true ;
20798: LD_ADDR_EXP 114
20802: PUSH
20803: LD_INT 1
20805: ST_TO_ADDR
// if p3 = 31 then
20806: LD_VAR 0 3
20810: PUSH
20811: LD_INT 31
20813: EQUAL
20814: IFFALSE 20824
// sFac := true ;
20816: LD_ADDR_EXP 115
20820: PUSH
20821: LD_INT 1
20823: ST_TO_ADDR
// if p3 = 32 then
20824: LD_VAR 0 3
20828: PUSH
20829: LD_INT 32
20831: EQUAL
20832: IFFALSE 20842
// sPower := true ;
20834: LD_ADDR_EXP 116
20838: PUSH
20839: LD_INT 1
20841: ST_TO_ADDR
// if p3 = 33 then
20842: LD_VAR 0 3
20846: PUSH
20847: LD_INT 33
20849: EQUAL
20850: IFFALSE 20860
// sRandom := true ;
20852: LD_ADDR_EXP 117
20856: PUSH
20857: LD_INT 1
20859: ST_TO_ADDR
// if p3 = 34 then
20860: LD_VAR 0 3
20864: PUSH
20865: LD_INT 34
20867: EQUAL
20868: IFFALSE 20878
// sShield := true ;
20870: LD_ADDR_EXP 118
20874: PUSH
20875: LD_INT 1
20877: ST_TO_ADDR
// if p3 = 35 then
20878: LD_VAR 0 3
20882: PUSH
20883: LD_INT 35
20885: EQUAL
20886: IFFALSE 20896
// sTime := true ;
20888: LD_ADDR_EXP 119
20892: PUSH
20893: LD_INT 1
20895: ST_TO_ADDR
// if p3 = 36 then
20896: LD_VAR 0 3
20900: PUSH
20901: LD_INT 36
20903: EQUAL
20904: IFFALSE 20914
// sTools := true ;
20906: LD_ADDR_EXP 120
20910: PUSH
20911: LD_INT 1
20913: ST_TO_ADDR
// if p3 = 101 then
20914: LD_VAR 0 3
20918: PUSH
20919: LD_INT 101
20921: EQUAL
20922: IFFALSE 20932
// sSold := true ;
20924: LD_ADDR_EXP 85
20928: PUSH
20929: LD_INT 1
20931: ST_TO_ADDR
// if p3 = 102 then
20932: LD_VAR 0 3
20936: PUSH
20937: LD_INT 102
20939: EQUAL
20940: IFFALSE 20950
// sDiff := true ;
20942: LD_ADDR_EXP 86
20946: PUSH
20947: LD_INT 1
20949: ST_TO_ADDR
// if p3 = 103 then
20950: LD_VAR 0 3
20954: PUSH
20955: LD_INT 103
20957: EQUAL
20958: IFFALSE 20968
// sFog := true ;
20960: LD_ADDR_EXP 89
20964: PUSH
20965: LD_INT 1
20967: ST_TO_ADDR
// if p3 = 104 then
20968: LD_VAR 0 3
20972: PUSH
20973: LD_INT 104
20975: EQUAL
20976: IFFALSE 20986
// sReset := true ;
20978: LD_ADDR_EXP 90
20982: PUSH
20983: LD_INT 1
20985: ST_TO_ADDR
// if p3 = 105 then
20986: LD_VAR 0 3
20990: PUSH
20991: LD_INT 105
20993: EQUAL
20994: IFFALSE 21004
// sSun := true ;
20996: LD_ADDR_EXP 91
21000: PUSH
21001: LD_INT 1
21003: ST_TO_ADDR
// if p3 = 106 then
21004: LD_VAR 0 3
21008: PUSH
21009: LD_INT 106
21011: EQUAL
21012: IFFALSE 21022
// sTiger := true ;
21014: LD_ADDR_EXP 87
21018: PUSH
21019: LD_INT 1
21021: ST_TO_ADDR
// if p3 = 107 then
21022: LD_VAR 0 3
21026: PUSH
21027: LD_INT 107
21029: EQUAL
21030: IFFALSE 21040
// sBomb := true ;
21032: LD_ADDR_EXP 88
21036: PUSH
21037: LD_INT 1
21039: ST_TO_ADDR
// if p3 = 108 then
21040: LD_VAR 0 3
21044: PUSH
21045: LD_INT 108
21047: EQUAL
21048: IFFALSE 21058
// sWound := true ;
21050: LD_ADDR_EXP 96
21054: PUSH
21055: LD_INT 1
21057: ST_TO_ADDR
// if p3 = 109 then
21058: LD_VAR 0 3
21062: PUSH
21063: LD_INT 109
21065: EQUAL
21066: IFFALSE 21076
// sBetray := true ;
21068: LD_ADDR_EXP 100
21072: PUSH
21073: LD_INT 1
21075: ST_TO_ADDR
// if p3 = 110 then
21076: LD_VAR 0 3
21080: PUSH
21081: LD_INT 110
21083: EQUAL
21084: IFFALSE 21094
// sContamin := true ;
21086: LD_ADDR_EXP 101
21090: PUSH
21091: LD_INT 1
21093: ST_TO_ADDR
// if p3 = 111 then
21094: LD_VAR 0 3
21098: PUSH
21099: LD_INT 111
21101: EQUAL
21102: IFFALSE 21112
// sOil := true ;
21104: LD_ADDR_EXP 103
21108: PUSH
21109: LD_INT 1
21111: ST_TO_ADDR
// if p3 = 112 then
21112: LD_VAR 0 3
21116: PUSH
21117: LD_INT 112
21119: EQUAL
21120: IFFALSE 21130
// sStu := true ;
21122: LD_ADDR_EXP 107
21126: PUSH
21127: LD_INT 1
21129: ST_TO_ADDR
// if p3 = 113 then
21130: LD_VAR 0 3
21134: PUSH
21135: LD_INT 113
21137: EQUAL
21138: IFFALSE 21148
// sBazooka := true ;
21140: LD_ADDR_EXP 110
21144: PUSH
21145: LD_INT 1
21147: ST_TO_ADDR
// if p3 = 114 then
21148: LD_VAR 0 3
21152: PUSH
21153: LD_INT 114
21155: EQUAL
21156: IFFALSE 21166
// sMortar := true ;
21158: LD_ADDR_EXP 111
21162: PUSH
21163: LD_INT 1
21165: ST_TO_ADDR
// if p3 = 115 then
21166: LD_VAR 0 3
21170: PUSH
21171: LD_INT 115
21173: EQUAL
21174: IFFALSE 21184
// sRanger := true ;
21176: LD_ADDR_EXP 121
21180: PUSH
21181: LD_INT 1
21183: ST_TO_ADDR
// end ; if p2 = 101 then
21184: LD_VAR 0 2
21188: PUSH
21189: LD_INT 101
21191: EQUAL
21192: IFFALSE 21320
// begin case p3 of 1 :
21194: LD_VAR 0 3
21198: PUSH
21199: LD_INT 1
21201: DOUBLE
21202: EQUAL
21203: IFTRUE 21207
21205: GO 21214
21207: POP
// hHackUnlimitedResources ; 2 :
21208: CALL 32357 0 0
21212: GO 21320
21214: LD_INT 2
21216: DOUBLE
21217: EQUAL
21218: IFTRUE 21222
21220: GO 21229
21222: POP
// hHackSetLevel10 ; 3 :
21223: CALL 32490 0 0
21227: GO 21320
21229: LD_INT 3
21231: DOUBLE
21232: EQUAL
21233: IFTRUE 21237
21235: GO 21244
21237: POP
// hHackSetLevel10YourUnits ; 4 :
21238: CALL 32575 0 0
21242: GO 21320
21244: LD_INT 4
21246: DOUBLE
21247: EQUAL
21248: IFTRUE 21252
21250: GO 21259
21252: POP
// hHackInvincible ; 5 :
21253: CALL 33023 0 0
21257: GO 21320
21259: LD_INT 5
21261: DOUBLE
21262: EQUAL
21263: IFTRUE 21267
21265: GO 21274
21267: POP
// hHackInvisible ; 6 :
21268: CALL 33134 0 0
21272: GO 21320
21274: LD_INT 6
21276: DOUBLE
21277: EQUAL
21278: IFTRUE 21282
21280: GO 21289
21282: POP
// hHackChangeYourSide ; 7 :
21283: CALL 33191 0 0
21287: GO 21320
21289: LD_INT 7
21291: DOUBLE
21292: EQUAL
21293: IFTRUE 21297
21295: GO 21304
21297: POP
// hHackChangeUnitSide ; 8 :
21298: CALL 33233 0 0
21302: GO 21320
21304: LD_INT 8
21306: DOUBLE
21307: EQUAL
21308: IFTRUE 21312
21310: GO 21319
21312: POP
// hHackFog ; end ;
21313: CALL 33334 0 0
21317: GO 21320
21319: POP
// end ; end ;
21320: LD_VAR 0 7
21324: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
21325: GO 21327
21327: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21328: LD_STRING initStreamRollete();
21330: PPUSH
21331: CALL_OW 559
// InitStreamMode ;
21335: CALL 21344 0 0
// DefineStreamItems ( ) ;
21339: CALL 21784 0 0
// end ;
21343: END
// function InitStreamMode ; begin
21344: LD_INT 0
21346: PPUSH
// streamModeActive := false ;
21347: LD_ADDR_EXP 68
21351: PUSH
21352: LD_INT 0
21354: ST_TO_ADDR
// normalCounter := 36 ;
21355: LD_ADDR_EXP 69
21359: PUSH
21360: LD_INT 36
21362: ST_TO_ADDR
// hardcoreCounter := 16 ;
21363: LD_ADDR_EXP 70
21367: PUSH
21368: LD_INT 16
21370: ST_TO_ADDR
// sRocket := false ;
21371: LD_ADDR_EXP 73
21375: PUSH
21376: LD_INT 0
21378: ST_TO_ADDR
// sSpeed := false ;
21379: LD_ADDR_EXP 72
21383: PUSH
21384: LD_INT 0
21386: ST_TO_ADDR
// sEngine := false ;
21387: LD_ADDR_EXP 74
21391: PUSH
21392: LD_INT 0
21394: ST_TO_ADDR
// sSpec := false ;
21395: LD_ADDR_EXP 71
21399: PUSH
21400: LD_INT 0
21402: ST_TO_ADDR
// sLevel := false ;
21403: LD_ADDR_EXP 75
21407: PUSH
21408: LD_INT 0
21410: ST_TO_ADDR
// sArmoury := false ;
21411: LD_ADDR_EXP 76
21415: PUSH
21416: LD_INT 0
21418: ST_TO_ADDR
// sRadar := false ;
21419: LD_ADDR_EXP 77
21423: PUSH
21424: LD_INT 0
21426: ST_TO_ADDR
// sBunker := false ;
21427: LD_ADDR_EXP 78
21431: PUSH
21432: LD_INT 0
21434: ST_TO_ADDR
// sHack := false ;
21435: LD_ADDR_EXP 79
21439: PUSH
21440: LD_INT 0
21442: ST_TO_ADDR
// sFire := false ;
21443: LD_ADDR_EXP 80
21447: PUSH
21448: LD_INT 0
21450: ST_TO_ADDR
// sRefresh := false ;
21451: LD_ADDR_EXP 81
21455: PUSH
21456: LD_INT 0
21458: ST_TO_ADDR
// sExp := false ;
21459: LD_ADDR_EXP 82
21463: PUSH
21464: LD_INT 0
21466: ST_TO_ADDR
// sDepot := false ;
21467: LD_ADDR_EXP 83
21471: PUSH
21472: LD_INT 0
21474: ST_TO_ADDR
// sFlag := false ;
21475: LD_ADDR_EXP 84
21479: PUSH
21480: LD_INT 0
21482: ST_TO_ADDR
// sKamikadze := false ;
21483: LD_ADDR_EXP 92
21487: PUSH
21488: LD_INT 0
21490: ST_TO_ADDR
// sTroll := false ;
21491: LD_ADDR_EXP 93
21495: PUSH
21496: LD_INT 0
21498: ST_TO_ADDR
// sSlow := false ;
21499: LD_ADDR_EXP 94
21503: PUSH
21504: LD_INT 0
21506: ST_TO_ADDR
// sLack := false ;
21507: LD_ADDR_EXP 95
21511: PUSH
21512: LD_INT 0
21514: ST_TO_ADDR
// sTank := false ;
21515: LD_ADDR_EXP 97
21519: PUSH
21520: LD_INT 0
21522: ST_TO_ADDR
// sRemote := false ;
21523: LD_ADDR_EXP 98
21527: PUSH
21528: LD_INT 0
21530: ST_TO_ADDR
// sPowell := false ;
21531: LD_ADDR_EXP 99
21535: PUSH
21536: LD_INT 0
21538: ST_TO_ADDR
// sTeleport := false ;
21539: LD_ADDR_EXP 102
21543: PUSH
21544: LD_INT 0
21546: ST_TO_ADDR
// sOilTower := false ;
21547: LD_ADDR_EXP 104
21551: PUSH
21552: LD_INT 0
21554: ST_TO_ADDR
// sShovel := false ;
21555: LD_ADDR_EXP 105
21559: PUSH
21560: LD_INT 0
21562: ST_TO_ADDR
// sSheik := false ;
21563: LD_ADDR_EXP 106
21567: PUSH
21568: LD_INT 0
21570: ST_TO_ADDR
// sEarthquake := false ;
21571: LD_ADDR_EXP 108
21575: PUSH
21576: LD_INT 0
21578: ST_TO_ADDR
// sAI := false ;
21579: LD_ADDR_EXP 109
21583: PUSH
21584: LD_INT 0
21586: ST_TO_ADDR
// sCargo := false ;
21587: LD_ADDR_EXP 112
21591: PUSH
21592: LD_INT 0
21594: ST_TO_ADDR
// sDLaser := false ;
21595: LD_ADDR_EXP 113
21599: PUSH
21600: LD_INT 0
21602: ST_TO_ADDR
// sExchange := false ;
21603: LD_ADDR_EXP 114
21607: PUSH
21608: LD_INT 0
21610: ST_TO_ADDR
// sFac := false ;
21611: LD_ADDR_EXP 115
21615: PUSH
21616: LD_INT 0
21618: ST_TO_ADDR
// sPower := false ;
21619: LD_ADDR_EXP 116
21623: PUSH
21624: LD_INT 0
21626: ST_TO_ADDR
// sRandom := false ;
21627: LD_ADDR_EXP 117
21631: PUSH
21632: LD_INT 0
21634: ST_TO_ADDR
// sShield := false ;
21635: LD_ADDR_EXP 118
21639: PUSH
21640: LD_INT 0
21642: ST_TO_ADDR
// sTime := false ;
21643: LD_ADDR_EXP 119
21647: PUSH
21648: LD_INT 0
21650: ST_TO_ADDR
// sTools := false ;
21651: LD_ADDR_EXP 120
21655: PUSH
21656: LD_INT 0
21658: ST_TO_ADDR
// sSold := false ;
21659: LD_ADDR_EXP 85
21663: PUSH
21664: LD_INT 0
21666: ST_TO_ADDR
// sDiff := false ;
21667: LD_ADDR_EXP 86
21671: PUSH
21672: LD_INT 0
21674: ST_TO_ADDR
// sFog := false ;
21675: LD_ADDR_EXP 89
21679: PUSH
21680: LD_INT 0
21682: ST_TO_ADDR
// sReset := false ;
21683: LD_ADDR_EXP 90
21687: PUSH
21688: LD_INT 0
21690: ST_TO_ADDR
// sSun := false ;
21691: LD_ADDR_EXP 91
21695: PUSH
21696: LD_INT 0
21698: ST_TO_ADDR
// sTiger := false ;
21699: LD_ADDR_EXP 87
21703: PUSH
21704: LD_INT 0
21706: ST_TO_ADDR
// sBomb := false ;
21707: LD_ADDR_EXP 88
21711: PUSH
21712: LD_INT 0
21714: ST_TO_ADDR
// sWound := false ;
21715: LD_ADDR_EXP 96
21719: PUSH
21720: LD_INT 0
21722: ST_TO_ADDR
// sBetray := false ;
21723: LD_ADDR_EXP 100
21727: PUSH
21728: LD_INT 0
21730: ST_TO_ADDR
// sContamin := false ;
21731: LD_ADDR_EXP 101
21735: PUSH
21736: LD_INT 0
21738: ST_TO_ADDR
// sOil := false ;
21739: LD_ADDR_EXP 103
21743: PUSH
21744: LD_INT 0
21746: ST_TO_ADDR
// sStu := false ;
21747: LD_ADDR_EXP 107
21751: PUSH
21752: LD_INT 0
21754: ST_TO_ADDR
// sBazooka := false ;
21755: LD_ADDR_EXP 110
21759: PUSH
21760: LD_INT 0
21762: ST_TO_ADDR
// sMortar := false ;
21763: LD_ADDR_EXP 111
21767: PUSH
21768: LD_INT 0
21770: ST_TO_ADDR
// sRanger := false ;
21771: LD_ADDR_EXP 121
21775: PUSH
21776: LD_INT 0
21778: ST_TO_ADDR
// end ;
21779: LD_VAR 0 1
21783: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21784: LD_INT 0
21786: PPUSH
21787: PPUSH
21788: PPUSH
21789: PPUSH
21790: PPUSH
// result := [ ] ;
21791: LD_ADDR_VAR 0 1
21795: PUSH
21796: EMPTY
21797: ST_TO_ADDR
// if campaign_id = 1 then
21798: LD_OWVAR 69
21802: PUSH
21803: LD_INT 1
21805: EQUAL
21806: IFFALSE 24744
// begin case mission_number of 1 :
21808: LD_OWVAR 70
21812: PUSH
21813: LD_INT 1
21815: DOUBLE
21816: EQUAL
21817: IFTRUE 21821
21819: GO 21885
21821: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21822: LD_ADDR_VAR 0 1
21826: PUSH
21827: LD_INT 2
21829: PUSH
21830: LD_INT 4
21832: PUSH
21833: LD_INT 11
21835: PUSH
21836: LD_INT 12
21838: PUSH
21839: LD_INT 15
21841: PUSH
21842: LD_INT 16
21844: PUSH
21845: LD_INT 22
21847: PUSH
21848: LD_INT 23
21850: PUSH
21851: LD_INT 26
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 101
21867: PUSH
21868: LD_INT 102
21870: PUSH
21871: LD_INT 106
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: LIST
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: ST_TO_ADDR
21883: GO 24742
21885: LD_INT 2
21887: DOUBLE
21888: EQUAL
21889: IFTRUE 21893
21891: GO 21965
21893: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21894: LD_ADDR_VAR 0 1
21898: PUSH
21899: LD_INT 2
21901: PUSH
21902: LD_INT 4
21904: PUSH
21905: LD_INT 11
21907: PUSH
21908: LD_INT 12
21910: PUSH
21911: LD_INT 15
21913: PUSH
21914: LD_INT 16
21916: PUSH
21917: LD_INT 22
21919: PUSH
21920: LD_INT 23
21922: PUSH
21923: LD_INT 26
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 101
21939: PUSH
21940: LD_INT 102
21942: PUSH
21943: LD_INT 105
21945: PUSH
21946: LD_INT 106
21948: PUSH
21949: LD_INT 108
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: ST_TO_ADDR
21963: GO 24742
21965: LD_INT 3
21967: DOUBLE
21968: EQUAL
21969: IFTRUE 21973
21971: GO 22049
21973: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21974: LD_ADDR_VAR 0 1
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: LD_INT 4
21984: PUSH
21985: LD_INT 5
21987: PUSH
21988: LD_INT 11
21990: PUSH
21991: LD_INT 12
21993: PUSH
21994: LD_INT 15
21996: PUSH
21997: LD_INT 16
21999: PUSH
22000: LD_INT 22
22002: PUSH
22003: LD_INT 26
22005: PUSH
22006: LD_INT 36
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 101
22023: PUSH
22024: LD_INT 102
22026: PUSH
22027: LD_INT 105
22029: PUSH
22030: LD_INT 106
22032: PUSH
22033: LD_INT 108
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: ST_TO_ADDR
22047: GO 24742
22049: LD_INT 4
22051: DOUBLE
22052: EQUAL
22053: IFTRUE 22057
22055: GO 22141
22057: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
22058: LD_ADDR_VAR 0 1
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: LD_INT 4
22068: PUSH
22069: LD_INT 5
22071: PUSH
22072: LD_INT 8
22074: PUSH
22075: LD_INT 11
22077: PUSH
22078: LD_INT 12
22080: PUSH
22081: LD_INT 15
22083: PUSH
22084: LD_INT 16
22086: PUSH
22087: LD_INT 22
22089: PUSH
22090: LD_INT 23
22092: PUSH
22093: LD_INT 26
22095: PUSH
22096: LD_INT 36
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 101
22115: PUSH
22116: LD_INT 102
22118: PUSH
22119: LD_INT 105
22121: PUSH
22122: LD_INT 106
22124: PUSH
22125: LD_INT 108
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: ST_TO_ADDR
22139: GO 24742
22141: LD_INT 5
22143: DOUBLE
22144: EQUAL
22145: IFTRUE 22149
22147: GO 22249
22149: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
22150: LD_ADDR_VAR 0 1
22154: PUSH
22155: LD_INT 2
22157: PUSH
22158: LD_INT 4
22160: PUSH
22161: LD_INT 5
22163: PUSH
22164: LD_INT 6
22166: PUSH
22167: LD_INT 8
22169: PUSH
22170: LD_INT 11
22172: PUSH
22173: LD_INT 12
22175: PUSH
22176: LD_INT 15
22178: PUSH
22179: LD_INT 16
22181: PUSH
22182: LD_INT 22
22184: PUSH
22185: LD_INT 23
22187: PUSH
22188: LD_INT 25
22190: PUSH
22191: LD_INT 26
22193: PUSH
22194: LD_INT 36
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 101
22215: PUSH
22216: LD_INT 102
22218: PUSH
22219: LD_INT 105
22221: PUSH
22222: LD_INT 106
22224: PUSH
22225: LD_INT 108
22227: PUSH
22228: LD_INT 109
22230: PUSH
22231: LD_INT 112
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: ST_TO_ADDR
22247: GO 24742
22249: LD_INT 6
22251: DOUBLE
22252: EQUAL
22253: IFTRUE 22257
22255: GO 22377
22257: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
22258: LD_ADDR_VAR 0 1
22262: PUSH
22263: LD_INT 2
22265: PUSH
22266: LD_INT 4
22268: PUSH
22269: LD_INT 5
22271: PUSH
22272: LD_INT 6
22274: PUSH
22275: LD_INT 8
22277: PUSH
22278: LD_INT 11
22280: PUSH
22281: LD_INT 12
22283: PUSH
22284: LD_INT 15
22286: PUSH
22287: LD_INT 16
22289: PUSH
22290: LD_INT 20
22292: PUSH
22293: LD_INT 21
22295: PUSH
22296: LD_INT 22
22298: PUSH
22299: LD_INT 23
22301: PUSH
22302: LD_INT 25
22304: PUSH
22305: LD_INT 26
22307: PUSH
22308: LD_INT 30
22310: PUSH
22311: LD_INT 31
22313: PUSH
22314: LD_INT 32
22316: PUSH
22317: LD_INT 36
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 101
22343: PUSH
22344: LD_INT 102
22346: PUSH
22347: LD_INT 105
22349: PUSH
22350: LD_INT 106
22352: PUSH
22353: LD_INT 108
22355: PUSH
22356: LD_INT 109
22358: PUSH
22359: LD_INT 112
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: ST_TO_ADDR
22375: GO 24742
22377: LD_INT 7
22379: DOUBLE
22380: EQUAL
22381: IFTRUE 22385
22383: GO 22485
22385: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
22386: LD_ADDR_VAR 0 1
22390: PUSH
22391: LD_INT 2
22393: PUSH
22394: LD_INT 4
22396: PUSH
22397: LD_INT 5
22399: PUSH
22400: LD_INT 7
22402: PUSH
22403: LD_INT 11
22405: PUSH
22406: LD_INT 12
22408: PUSH
22409: LD_INT 15
22411: PUSH
22412: LD_INT 16
22414: PUSH
22415: LD_INT 20
22417: PUSH
22418: LD_INT 21
22420: PUSH
22421: LD_INT 22
22423: PUSH
22424: LD_INT 23
22426: PUSH
22427: LD_INT 25
22429: PUSH
22430: LD_INT 26
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 101
22451: PUSH
22452: LD_INT 102
22454: PUSH
22455: LD_INT 103
22457: PUSH
22458: LD_INT 105
22460: PUSH
22461: LD_INT 106
22463: PUSH
22464: LD_INT 108
22466: PUSH
22467: LD_INT 112
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: ST_TO_ADDR
22483: GO 24742
22485: LD_INT 8
22487: DOUBLE
22488: EQUAL
22489: IFTRUE 22493
22491: GO 22621
22493: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
22494: LD_ADDR_VAR 0 1
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: LD_INT 4
22504: PUSH
22505: LD_INT 5
22507: PUSH
22508: LD_INT 6
22510: PUSH
22511: LD_INT 7
22513: PUSH
22514: LD_INT 8
22516: PUSH
22517: LD_INT 11
22519: PUSH
22520: LD_INT 12
22522: PUSH
22523: LD_INT 15
22525: PUSH
22526: LD_INT 16
22528: PUSH
22529: LD_INT 20
22531: PUSH
22532: LD_INT 21
22534: PUSH
22535: LD_INT 22
22537: PUSH
22538: LD_INT 23
22540: PUSH
22541: LD_INT 25
22543: PUSH
22544: LD_INT 26
22546: PUSH
22547: LD_INT 30
22549: PUSH
22550: LD_INT 31
22552: PUSH
22553: LD_INT 32
22555: PUSH
22556: LD_INT 36
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 101
22583: PUSH
22584: LD_INT 102
22586: PUSH
22587: LD_INT 103
22589: PUSH
22590: LD_INT 105
22592: PUSH
22593: LD_INT 106
22595: PUSH
22596: LD_INT 108
22598: PUSH
22599: LD_INT 109
22601: PUSH
22602: LD_INT 112
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: ST_TO_ADDR
22619: GO 24742
22621: LD_INT 9
22623: DOUBLE
22624: EQUAL
22625: IFTRUE 22629
22627: GO 22765
22629: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
22630: LD_ADDR_VAR 0 1
22634: PUSH
22635: LD_INT 2
22637: PUSH
22638: LD_INT 4
22640: PUSH
22641: LD_INT 5
22643: PUSH
22644: LD_INT 6
22646: PUSH
22647: LD_INT 7
22649: PUSH
22650: LD_INT 8
22652: PUSH
22653: LD_INT 11
22655: PUSH
22656: LD_INT 12
22658: PUSH
22659: LD_INT 15
22661: PUSH
22662: LD_INT 16
22664: PUSH
22665: LD_INT 20
22667: PUSH
22668: LD_INT 21
22670: PUSH
22671: LD_INT 22
22673: PUSH
22674: LD_INT 23
22676: PUSH
22677: LD_INT 25
22679: PUSH
22680: LD_INT 26
22682: PUSH
22683: LD_INT 28
22685: PUSH
22686: LD_INT 30
22688: PUSH
22689: LD_INT 31
22691: PUSH
22692: LD_INT 32
22694: PUSH
22695: LD_INT 36
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 101
22723: PUSH
22724: LD_INT 102
22726: PUSH
22727: LD_INT 103
22729: PUSH
22730: LD_INT 105
22732: PUSH
22733: LD_INT 106
22735: PUSH
22736: LD_INT 108
22738: PUSH
22739: LD_INT 109
22741: PUSH
22742: LD_INT 112
22744: PUSH
22745: LD_INT 114
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: ST_TO_ADDR
22763: GO 24742
22765: LD_INT 10
22767: DOUBLE
22768: EQUAL
22769: IFTRUE 22773
22771: GO 22957
22773: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22774: LD_ADDR_VAR 0 1
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: LD_INT 4
22784: PUSH
22785: LD_INT 5
22787: PUSH
22788: LD_INT 6
22790: PUSH
22791: LD_INT 7
22793: PUSH
22794: LD_INT 8
22796: PUSH
22797: LD_INT 9
22799: PUSH
22800: LD_INT 10
22802: PUSH
22803: LD_INT 11
22805: PUSH
22806: LD_INT 12
22808: PUSH
22809: LD_INT 13
22811: PUSH
22812: LD_INT 14
22814: PUSH
22815: LD_INT 15
22817: PUSH
22818: LD_INT 16
22820: PUSH
22821: LD_INT 17
22823: PUSH
22824: LD_INT 18
22826: PUSH
22827: LD_INT 19
22829: PUSH
22830: LD_INT 20
22832: PUSH
22833: LD_INT 21
22835: PUSH
22836: LD_INT 22
22838: PUSH
22839: LD_INT 23
22841: PUSH
22842: LD_INT 24
22844: PUSH
22845: LD_INT 25
22847: PUSH
22848: LD_INT 26
22850: PUSH
22851: LD_INT 28
22853: PUSH
22854: LD_INT 30
22856: PUSH
22857: LD_INT 31
22859: PUSH
22860: LD_INT 32
22862: PUSH
22863: LD_INT 36
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 101
22899: PUSH
22900: LD_INT 102
22902: PUSH
22903: LD_INT 103
22905: PUSH
22906: LD_INT 104
22908: PUSH
22909: LD_INT 105
22911: PUSH
22912: LD_INT 106
22914: PUSH
22915: LD_INT 107
22917: PUSH
22918: LD_INT 108
22920: PUSH
22921: LD_INT 109
22923: PUSH
22924: LD_INT 110
22926: PUSH
22927: LD_INT 111
22929: PUSH
22930: LD_INT 112
22932: PUSH
22933: LD_INT 114
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: ST_TO_ADDR
22955: GO 24742
22957: LD_INT 11
22959: DOUBLE
22960: EQUAL
22961: IFTRUE 22965
22963: GO 23157
22965: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22966: LD_ADDR_VAR 0 1
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 3
22976: PUSH
22977: LD_INT 4
22979: PUSH
22980: LD_INT 5
22982: PUSH
22983: LD_INT 6
22985: PUSH
22986: LD_INT 7
22988: PUSH
22989: LD_INT 8
22991: PUSH
22992: LD_INT 9
22994: PUSH
22995: LD_INT 10
22997: PUSH
22998: LD_INT 11
23000: PUSH
23001: LD_INT 12
23003: PUSH
23004: LD_INT 13
23006: PUSH
23007: LD_INT 14
23009: PUSH
23010: LD_INT 15
23012: PUSH
23013: LD_INT 16
23015: PUSH
23016: LD_INT 17
23018: PUSH
23019: LD_INT 18
23021: PUSH
23022: LD_INT 19
23024: PUSH
23025: LD_INT 20
23027: PUSH
23028: LD_INT 21
23030: PUSH
23031: LD_INT 22
23033: PUSH
23034: LD_INT 23
23036: PUSH
23037: LD_INT 24
23039: PUSH
23040: LD_INT 25
23042: PUSH
23043: LD_INT 26
23045: PUSH
23046: LD_INT 28
23048: PUSH
23049: LD_INT 30
23051: PUSH
23052: LD_INT 31
23054: PUSH
23055: LD_INT 32
23057: PUSH
23058: LD_INT 34
23060: PUSH
23061: LD_INT 36
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 101
23099: PUSH
23100: LD_INT 102
23102: PUSH
23103: LD_INT 103
23105: PUSH
23106: LD_INT 104
23108: PUSH
23109: LD_INT 105
23111: PUSH
23112: LD_INT 106
23114: PUSH
23115: LD_INT 107
23117: PUSH
23118: LD_INT 108
23120: PUSH
23121: LD_INT 109
23123: PUSH
23124: LD_INT 110
23126: PUSH
23127: LD_INT 111
23129: PUSH
23130: LD_INT 112
23132: PUSH
23133: LD_INT 114
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: ST_TO_ADDR
23155: GO 24742
23157: LD_INT 12
23159: DOUBLE
23160: EQUAL
23161: IFTRUE 23165
23163: GO 23373
23165: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
23166: LD_ADDR_VAR 0 1
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: LD_INT 3
23179: PUSH
23180: LD_INT 4
23182: PUSH
23183: LD_INT 5
23185: PUSH
23186: LD_INT 6
23188: PUSH
23189: LD_INT 7
23191: PUSH
23192: LD_INT 8
23194: PUSH
23195: LD_INT 9
23197: PUSH
23198: LD_INT 10
23200: PUSH
23201: LD_INT 11
23203: PUSH
23204: LD_INT 12
23206: PUSH
23207: LD_INT 13
23209: PUSH
23210: LD_INT 14
23212: PUSH
23213: LD_INT 15
23215: PUSH
23216: LD_INT 16
23218: PUSH
23219: LD_INT 17
23221: PUSH
23222: LD_INT 18
23224: PUSH
23225: LD_INT 19
23227: PUSH
23228: LD_INT 20
23230: PUSH
23231: LD_INT 21
23233: PUSH
23234: LD_INT 22
23236: PUSH
23237: LD_INT 23
23239: PUSH
23240: LD_INT 24
23242: PUSH
23243: LD_INT 25
23245: PUSH
23246: LD_INT 26
23248: PUSH
23249: LD_INT 27
23251: PUSH
23252: LD_INT 28
23254: PUSH
23255: LD_INT 30
23257: PUSH
23258: LD_INT 31
23260: PUSH
23261: LD_INT 32
23263: PUSH
23264: LD_INT 33
23266: PUSH
23267: LD_INT 34
23269: PUSH
23270: LD_INT 36
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 101
23311: PUSH
23312: LD_INT 102
23314: PUSH
23315: LD_INT 103
23317: PUSH
23318: LD_INT 104
23320: PUSH
23321: LD_INT 105
23323: PUSH
23324: LD_INT 106
23326: PUSH
23327: LD_INT 107
23329: PUSH
23330: LD_INT 108
23332: PUSH
23333: LD_INT 109
23335: PUSH
23336: LD_INT 110
23338: PUSH
23339: LD_INT 111
23341: PUSH
23342: LD_INT 112
23344: PUSH
23345: LD_INT 113
23347: PUSH
23348: LD_INT 114
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: ST_TO_ADDR
23371: GO 24742
23373: LD_INT 13
23375: DOUBLE
23376: EQUAL
23377: IFTRUE 23381
23379: GO 23577
23381: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
23382: LD_ADDR_VAR 0 1
23386: PUSH
23387: LD_INT 1
23389: PUSH
23390: LD_INT 2
23392: PUSH
23393: LD_INT 3
23395: PUSH
23396: LD_INT 4
23398: PUSH
23399: LD_INT 5
23401: PUSH
23402: LD_INT 8
23404: PUSH
23405: LD_INT 9
23407: PUSH
23408: LD_INT 10
23410: PUSH
23411: LD_INT 11
23413: PUSH
23414: LD_INT 12
23416: PUSH
23417: LD_INT 14
23419: PUSH
23420: LD_INT 15
23422: PUSH
23423: LD_INT 16
23425: PUSH
23426: LD_INT 17
23428: PUSH
23429: LD_INT 18
23431: PUSH
23432: LD_INT 19
23434: PUSH
23435: LD_INT 20
23437: PUSH
23438: LD_INT 21
23440: PUSH
23441: LD_INT 22
23443: PUSH
23444: LD_INT 23
23446: PUSH
23447: LD_INT 24
23449: PUSH
23450: LD_INT 25
23452: PUSH
23453: LD_INT 26
23455: PUSH
23456: LD_INT 27
23458: PUSH
23459: LD_INT 28
23461: PUSH
23462: LD_INT 30
23464: PUSH
23465: LD_INT 31
23467: PUSH
23468: LD_INT 32
23470: PUSH
23471: LD_INT 33
23473: PUSH
23474: LD_INT 34
23476: PUSH
23477: LD_INT 36
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 101
23515: PUSH
23516: LD_INT 102
23518: PUSH
23519: LD_INT 103
23521: PUSH
23522: LD_INT 104
23524: PUSH
23525: LD_INT 105
23527: PUSH
23528: LD_INT 106
23530: PUSH
23531: LD_INT 107
23533: PUSH
23534: LD_INT 108
23536: PUSH
23537: LD_INT 109
23539: PUSH
23540: LD_INT 110
23542: PUSH
23543: LD_INT 111
23545: PUSH
23546: LD_INT 112
23548: PUSH
23549: LD_INT 113
23551: PUSH
23552: LD_INT 114
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: ST_TO_ADDR
23575: GO 24742
23577: LD_INT 14
23579: DOUBLE
23580: EQUAL
23581: IFTRUE 23585
23583: GO 23797
23585: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
23586: LD_ADDR_VAR 0 1
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: LD_INT 2
23596: PUSH
23597: LD_INT 3
23599: PUSH
23600: LD_INT 4
23602: PUSH
23603: LD_INT 5
23605: PUSH
23606: LD_INT 6
23608: PUSH
23609: LD_INT 7
23611: PUSH
23612: LD_INT 8
23614: PUSH
23615: LD_INT 9
23617: PUSH
23618: LD_INT 10
23620: PUSH
23621: LD_INT 11
23623: PUSH
23624: LD_INT 12
23626: PUSH
23627: LD_INT 13
23629: PUSH
23630: LD_INT 14
23632: PUSH
23633: LD_INT 15
23635: PUSH
23636: LD_INT 16
23638: PUSH
23639: LD_INT 17
23641: PUSH
23642: LD_INT 18
23644: PUSH
23645: LD_INT 19
23647: PUSH
23648: LD_INT 20
23650: PUSH
23651: LD_INT 21
23653: PUSH
23654: LD_INT 22
23656: PUSH
23657: LD_INT 23
23659: PUSH
23660: LD_INT 24
23662: PUSH
23663: LD_INT 25
23665: PUSH
23666: LD_INT 26
23668: PUSH
23669: LD_INT 27
23671: PUSH
23672: LD_INT 28
23674: PUSH
23675: LD_INT 29
23677: PUSH
23678: LD_INT 30
23680: PUSH
23681: LD_INT 31
23683: PUSH
23684: LD_INT 32
23686: PUSH
23687: LD_INT 33
23689: PUSH
23690: LD_INT 34
23692: PUSH
23693: LD_INT 36
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 101
23735: PUSH
23736: LD_INT 102
23738: PUSH
23739: LD_INT 103
23741: PUSH
23742: LD_INT 104
23744: PUSH
23745: LD_INT 105
23747: PUSH
23748: LD_INT 106
23750: PUSH
23751: LD_INT 107
23753: PUSH
23754: LD_INT 108
23756: PUSH
23757: LD_INT 109
23759: PUSH
23760: LD_INT 110
23762: PUSH
23763: LD_INT 111
23765: PUSH
23766: LD_INT 112
23768: PUSH
23769: LD_INT 113
23771: PUSH
23772: LD_INT 114
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: ST_TO_ADDR
23795: GO 24742
23797: LD_INT 15
23799: DOUBLE
23800: EQUAL
23801: IFTRUE 23805
23803: GO 24017
23805: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23806: LD_ADDR_VAR 0 1
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: LD_INT 2
23816: PUSH
23817: LD_INT 3
23819: PUSH
23820: LD_INT 4
23822: PUSH
23823: LD_INT 5
23825: PUSH
23826: LD_INT 6
23828: PUSH
23829: LD_INT 7
23831: PUSH
23832: LD_INT 8
23834: PUSH
23835: LD_INT 9
23837: PUSH
23838: LD_INT 10
23840: PUSH
23841: LD_INT 11
23843: PUSH
23844: LD_INT 12
23846: PUSH
23847: LD_INT 13
23849: PUSH
23850: LD_INT 14
23852: PUSH
23853: LD_INT 15
23855: PUSH
23856: LD_INT 16
23858: PUSH
23859: LD_INT 17
23861: PUSH
23862: LD_INT 18
23864: PUSH
23865: LD_INT 19
23867: PUSH
23868: LD_INT 20
23870: PUSH
23871: LD_INT 21
23873: PUSH
23874: LD_INT 22
23876: PUSH
23877: LD_INT 23
23879: PUSH
23880: LD_INT 24
23882: PUSH
23883: LD_INT 25
23885: PUSH
23886: LD_INT 26
23888: PUSH
23889: LD_INT 27
23891: PUSH
23892: LD_INT 28
23894: PUSH
23895: LD_INT 29
23897: PUSH
23898: LD_INT 30
23900: PUSH
23901: LD_INT 31
23903: PUSH
23904: LD_INT 32
23906: PUSH
23907: LD_INT 33
23909: PUSH
23910: LD_INT 34
23912: PUSH
23913: LD_INT 36
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 101
23955: PUSH
23956: LD_INT 102
23958: PUSH
23959: LD_INT 103
23961: PUSH
23962: LD_INT 104
23964: PUSH
23965: LD_INT 105
23967: PUSH
23968: LD_INT 106
23970: PUSH
23971: LD_INT 107
23973: PUSH
23974: LD_INT 108
23976: PUSH
23977: LD_INT 109
23979: PUSH
23980: LD_INT 110
23982: PUSH
23983: LD_INT 111
23985: PUSH
23986: LD_INT 112
23988: PUSH
23989: LD_INT 113
23991: PUSH
23992: LD_INT 114
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: ST_TO_ADDR
24015: GO 24742
24017: LD_INT 16
24019: DOUBLE
24020: EQUAL
24021: IFTRUE 24025
24023: GO 24149
24025: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
24026: LD_ADDR_VAR 0 1
24030: PUSH
24031: LD_INT 2
24033: PUSH
24034: LD_INT 4
24036: PUSH
24037: LD_INT 5
24039: PUSH
24040: LD_INT 7
24042: PUSH
24043: LD_INT 11
24045: PUSH
24046: LD_INT 12
24048: PUSH
24049: LD_INT 15
24051: PUSH
24052: LD_INT 16
24054: PUSH
24055: LD_INT 20
24057: PUSH
24058: LD_INT 21
24060: PUSH
24061: LD_INT 22
24063: PUSH
24064: LD_INT 23
24066: PUSH
24067: LD_INT 25
24069: PUSH
24070: LD_INT 26
24072: PUSH
24073: LD_INT 30
24075: PUSH
24076: LD_INT 31
24078: PUSH
24079: LD_INT 32
24081: PUSH
24082: LD_INT 33
24084: PUSH
24085: LD_INT 34
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 101
24111: PUSH
24112: LD_INT 102
24114: PUSH
24115: LD_INT 103
24117: PUSH
24118: LD_INT 106
24120: PUSH
24121: LD_INT 108
24123: PUSH
24124: LD_INT 112
24126: PUSH
24127: LD_INT 113
24129: PUSH
24130: LD_INT 114
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: ST_TO_ADDR
24147: GO 24742
24149: LD_INT 17
24151: DOUBLE
24152: EQUAL
24153: IFTRUE 24157
24155: GO 24369
24157: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
24158: LD_ADDR_VAR 0 1
24162: PUSH
24163: LD_INT 1
24165: PUSH
24166: LD_INT 2
24168: PUSH
24169: LD_INT 3
24171: PUSH
24172: LD_INT 4
24174: PUSH
24175: LD_INT 5
24177: PUSH
24178: LD_INT 6
24180: PUSH
24181: LD_INT 7
24183: PUSH
24184: LD_INT 8
24186: PUSH
24187: LD_INT 9
24189: PUSH
24190: LD_INT 10
24192: PUSH
24193: LD_INT 11
24195: PUSH
24196: LD_INT 12
24198: PUSH
24199: LD_INT 13
24201: PUSH
24202: LD_INT 14
24204: PUSH
24205: LD_INT 15
24207: PUSH
24208: LD_INT 16
24210: PUSH
24211: LD_INT 17
24213: PUSH
24214: LD_INT 18
24216: PUSH
24217: LD_INT 19
24219: PUSH
24220: LD_INT 20
24222: PUSH
24223: LD_INT 21
24225: PUSH
24226: LD_INT 22
24228: PUSH
24229: LD_INT 23
24231: PUSH
24232: LD_INT 24
24234: PUSH
24235: LD_INT 25
24237: PUSH
24238: LD_INT 26
24240: PUSH
24241: LD_INT 27
24243: PUSH
24244: LD_INT 28
24246: PUSH
24247: LD_INT 29
24249: PUSH
24250: LD_INT 30
24252: PUSH
24253: LD_INT 31
24255: PUSH
24256: LD_INT 32
24258: PUSH
24259: LD_INT 33
24261: PUSH
24262: LD_INT 34
24264: PUSH
24265: LD_INT 36
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 101
24307: PUSH
24308: LD_INT 102
24310: PUSH
24311: LD_INT 103
24313: PUSH
24314: LD_INT 104
24316: PUSH
24317: LD_INT 105
24319: PUSH
24320: LD_INT 106
24322: PUSH
24323: LD_INT 107
24325: PUSH
24326: LD_INT 108
24328: PUSH
24329: LD_INT 109
24331: PUSH
24332: LD_INT 110
24334: PUSH
24335: LD_INT 111
24337: PUSH
24338: LD_INT 112
24340: PUSH
24341: LD_INT 113
24343: PUSH
24344: LD_INT 114
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: ST_TO_ADDR
24367: GO 24742
24369: LD_INT 18
24371: DOUBLE
24372: EQUAL
24373: IFTRUE 24377
24375: GO 24513
24377: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
24378: LD_ADDR_VAR 0 1
24382: PUSH
24383: LD_INT 2
24385: PUSH
24386: LD_INT 4
24388: PUSH
24389: LD_INT 5
24391: PUSH
24392: LD_INT 7
24394: PUSH
24395: LD_INT 11
24397: PUSH
24398: LD_INT 12
24400: PUSH
24401: LD_INT 15
24403: PUSH
24404: LD_INT 16
24406: PUSH
24407: LD_INT 20
24409: PUSH
24410: LD_INT 21
24412: PUSH
24413: LD_INT 22
24415: PUSH
24416: LD_INT 23
24418: PUSH
24419: LD_INT 25
24421: PUSH
24422: LD_INT 26
24424: PUSH
24425: LD_INT 30
24427: PUSH
24428: LD_INT 31
24430: PUSH
24431: LD_INT 32
24433: PUSH
24434: LD_INT 33
24436: PUSH
24437: LD_INT 34
24439: PUSH
24440: LD_INT 35
24442: PUSH
24443: LD_INT 36
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 101
24471: PUSH
24472: LD_INT 102
24474: PUSH
24475: LD_INT 103
24477: PUSH
24478: LD_INT 106
24480: PUSH
24481: LD_INT 108
24483: PUSH
24484: LD_INT 112
24486: PUSH
24487: LD_INT 113
24489: PUSH
24490: LD_INT 114
24492: PUSH
24493: LD_INT 115
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: ST_TO_ADDR
24511: GO 24742
24513: LD_INT 19
24515: DOUBLE
24516: EQUAL
24517: IFTRUE 24521
24519: GO 24741
24521: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
24522: LD_ADDR_VAR 0 1
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: LD_INT 3
24535: PUSH
24536: LD_INT 4
24538: PUSH
24539: LD_INT 5
24541: PUSH
24542: LD_INT 6
24544: PUSH
24545: LD_INT 7
24547: PUSH
24548: LD_INT 8
24550: PUSH
24551: LD_INT 9
24553: PUSH
24554: LD_INT 10
24556: PUSH
24557: LD_INT 11
24559: PUSH
24560: LD_INT 12
24562: PUSH
24563: LD_INT 13
24565: PUSH
24566: LD_INT 14
24568: PUSH
24569: LD_INT 15
24571: PUSH
24572: LD_INT 16
24574: PUSH
24575: LD_INT 17
24577: PUSH
24578: LD_INT 18
24580: PUSH
24581: LD_INT 19
24583: PUSH
24584: LD_INT 20
24586: PUSH
24587: LD_INT 21
24589: PUSH
24590: LD_INT 22
24592: PUSH
24593: LD_INT 23
24595: PUSH
24596: LD_INT 24
24598: PUSH
24599: LD_INT 25
24601: PUSH
24602: LD_INT 26
24604: PUSH
24605: LD_INT 27
24607: PUSH
24608: LD_INT 28
24610: PUSH
24611: LD_INT 29
24613: PUSH
24614: LD_INT 30
24616: PUSH
24617: LD_INT 31
24619: PUSH
24620: LD_INT 32
24622: PUSH
24623: LD_INT 33
24625: PUSH
24626: LD_INT 34
24628: PUSH
24629: LD_INT 35
24631: PUSH
24632: LD_INT 36
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 101
24675: PUSH
24676: LD_INT 102
24678: PUSH
24679: LD_INT 103
24681: PUSH
24682: LD_INT 104
24684: PUSH
24685: LD_INT 105
24687: PUSH
24688: LD_INT 106
24690: PUSH
24691: LD_INT 107
24693: PUSH
24694: LD_INT 108
24696: PUSH
24697: LD_INT 109
24699: PUSH
24700: LD_INT 110
24702: PUSH
24703: LD_INT 111
24705: PUSH
24706: LD_INT 112
24708: PUSH
24709: LD_INT 113
24711: PUSH
24712: LD_INT 114
24714: PUSH
24715: LD_INT 115
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: ST_TO_ADDR
24739: GO 24742
24741: POP
// end else
24742: GO 24961
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24744: LD_ADDR_VAR 0 1
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: LD_INT 2
24754: PUSH
24755: LD_INT 3
24757: PUSH
24758: LD_INT 4
24760: PUSH
24761: LD_INT 5
24763: PUSH
24764: LD_INT 6
24766: PUSH
24767: LD_INT 7
24769: PUSH
24770: LD_INT 8
24772: PUSH
24773: LD_INT 9
24775: PUSH
24776: LD_INT 10
24778: PUSH
24779: LD_INT 11
24781: PUSH
24782: LD_INT 12
24784: PUSH
24785: LD_INT 13
24787: PUSH
24788: LD_INT 14
24790: PUSH
24791: LD_INT 15
24793: PUSH
24794: LD_INT 16
24796: PUSH
24797: LD_INT 17
24799: PUSH
24800: LD_INT 18
24802: PUSH
24803: LD_INT 19
24805: PUSH
24806: LD_INT 20
24808: PUSH
24809: LD_INT 21
24811: PUSH
24812: LD_INT 22
24814: PUSH
24815: LD_INT 23
24817: PUSH
24818: LD_INT 24
24820: PUSH
24821: LD_INT 25
24823: PUSH
24824: LD_INT 26
24826: PUSH
24827: LD_INT 27
24829: PUSH
24830: LD_INT 28
24832: PUSH
24833: LD_INT 29
24835: PUSH
24836: LD_INT 30
24838: PUSH
24839: LD_INT 31
24841: PUSH
24842: LD_INT 32
24844: PUSH
24845: LD_INT 33
24847: PUSH
24848: LD_INT 34
24850: PUSH
24851: LD_INT 35
24853: PUSH
24854: LD_INT 36
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 101
24897: PUSH
24898: LD_INT 102
24900: PUSH
24901: LD_INT 103
24903: PUSH
24904: LD_INT 104
24906: PUSH
24907: LD_INT 105
24909: PUSH
24910: LD_INT 106
24912: PUSH
24913: LD_INT 107
24915: PUSH
24916: LD_INT 108
24918: PUSH
24919: LD_INT 109
24921: PUSH
24922: LD_INT 110
24924: PUSH
24925: LD_INT 111
24927: PUSH
24928: LD_INT 112
24930: PUSH
24931: LD_INT 113
24933: PUSH
24934: LD_INT 114
24936: PUSH
24937: LD_INT 115
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: ST_TO_ADDR
// if result then
24961: LD_VAR 0 1
24965: IFFALSE 25254
// begin normal :=  ;
24967: LD_ADDR_VAR 0 3
24971: PUSH
24972: LD_STRING 
24974: ST_TO_ADDR
// hardcore :=  ;
24975: LD_ADDR_VAR 0 4
24979: PUSH
24980: LD_STRING 
24982: ST_TO_ADDR
// for i = 1 to normalCounter do
24983: LD_ADDR_VAR 0 5
24987: PUSH
24988: DOUBLE
24989: LD_INT 1
24991: DEC
24992: ST_TO_ADDR
24993: LD_EXP 69
24997: PUSH
24998: FOR_TO
24999: IFFALSE 25100
// begin tmp := 0 ;
25001: LD_ADDR_VAR 0 2
25005: PUSH
25006: LD_STRING 0
25008: ST_TO_ADDR
// if result [ 1 ] then
25009: LD_VAR 0 1
25013: PUSH
25014: LD_INT 1
25016: ARRAY
25017: IFFALSE 25082
// if result [ 1 ] [ 1 ] = i then
25019: LD_VAR 0 1
25023: PUSH
25024: LD_INT 1
25026: ARRAY
25027: PUSH
25028: LD_INT 1
25030: ARRAY
25031: PUSH
25032: LD_VAR 0 5
25036: EQUAL
25037: IFFALSE 25082
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25039: LD_ADDR_VAR 0 1
25043: PUSH
25044: LD_VAR 0 1
25048: PPUSH
25049: LD_INT 1
25051: PPUSH
25052: LD_VAR 0 1
25056: PUSH
25057: LD_INT 1
25059: ARRAY
25060: PPUSH
25061: LD_INT 1
25063: PPUSH
25064: CALL_OW 3
25068: PPUSH
25069: CALL_OW 1
25073: ST_TO_ADDR
// tmp := 1 ;
25074: LD_ADDR_VAR 0 2
25078: PUSH
25079: LD_STRING 1
25081: ST_TO_ADDR
// end ; normal := normal & tmp ;
25082: LD_ADDR_VAR 0 3
25086: PUSH
25087: LD_VAR 0 3
25091: PUSH
25092: LD_VAR 0 2
25096: STR
25097: ST_TO_ADDR
// end ;
25098: GO 24998
25100: POP
25101: POP
// for i = 1 to hardcoreCounter do
25102: LD_ADDR_VAR 0 5
25106: PUSH
25107: DOUBLE
25108: LD_INT 1
25110: DEC
25111: ST_TO_ADDR
25112: LD_EXP 70
25116: PUSH
25117: FOR_TO
25118: IFFALSE 25223
// begin tmp := 0 ;
25120: LD_ADDR_VAR 0 2
25124: PUSH
25125: LD_STRING 0
25127: ST_TO_ADDR
// if result [ 2 ] then
25128: LD_VAR 0 1
25132: PUSH
25133: LD_INT 2
25135: ARRAY
25136: IFFALSE 25205
// if result [ 2 ] [ 1 ] = 100 + i then
25138: LD_VAR 0 1
25142: PUSH
25143: LD_INT 2
25145: ARRAY
25146: PUSH
25147: LD_INT 1
25149: ARRAY
25150: PUSH
25151: LD_INT 100
25153: PUSH
25154: LD_VAR 0 5
25158: PLUS
25159: EQUAL
25160: IFFALSE 25205
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25162: LD_ADDR_VAR 0 1
25166: PUSH
25167: LD_VAR 0 1
25171: PPUSH
25172: LD_INT 2
25174: PPUSH
25175: LD_VAR 0 1
25179: PUSH
25180: LD_INT 2
25182: ARRAY
25183: PPUSH
25184: LD_INT 1
25186: PPUSH
25187: CALL_OW 3
25191: PPUSH
25192: CALL_OW 1
25196: ST_TO_ADDR
// tmp := 1 ;
25197: LD_ADDR_VAR 0 2
25201: PUSH
25202: LD_STRING 1
25204: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25205: LD_ADDR_VAR 0 4
25209: PUSH
25210: LD_VAR 0 4
25214: PUSH
25215: LD_VAR 0 2
25219: STR
25220: ST_TO_ADDR
// end ;
25221: GO 25117
25223: POP
25224: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
25225: LD_STRING getStreamItemsFromMission("
25227: PUSH
25228: LD_VAR 0 3
25232: STR
25233: PUSH
25234: LD_STRING ","
25236: STR
25237: PUSH
25238: LD_VAR 0 4
25242: STR
25243: PUSH
25244: LD_STRING ")
25246: STR
25247: PPUSH
25248: CALL_OW 559
// end else
25252: GO 25261
// ToLua ( getStreamItemsFromMission("","") ) ;
25254: LD_STRING getStreamItemsFromMission("","")
25256: PPUSH
25257: CALL_OW 559
// end ;
25261: LD_VAR 0 1
25265: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25266: LD_EXP 68
25270: PUSH
25271: LD_EXP 73
25275: AND
25276: IFFALSE 25400
25278: GO 25280
25280: DISABLE
25281: LD_INT 0
25283: PPUSH
25284: PPUSH
// begin enable ;
25285: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25286: LD_ADDR_VAR 0 2
25290: PUSH
25291: LD_INT 22
25293: PUSH
25294: LD_OWVAR 2
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 2
25305: PUSH
25306: LD_INT 34
25308: PUSH
25309: LD_INT 7
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 34
25318: PUSH
25319: LD_INT 45
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 34
25328: PUSH
25329: LD_INT 28
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 34
25338: PUSH
25339: LD_INT 47
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PPUSH
25357: CALL_OW 69
25361: ST_TO_ADDR
// if not tmp then
25362: LD_VAR 0 2
25366: NOT
25367: IFFALSE 25371
// exit ;
25369: GO 25400
// for i in tmp do
25371: LD_ADDR_VAR 0 1
25375: PUSH
25376: LD_VAR 0 2
25380: PUSH
25381: FOR_IN
25382: IFFALSE 25398
// begin SetLives ( i , 0 ) ;
25384: LD_VAR 0 1
25388: PPUSH
25389: LD_INT 0
25391: PPUSH
25392: CALL_OW 234
// end ;
25396: GO 25381
25398: POP
25399: POP
// end ;
25400: PPOPN 2
25402: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25403: LD_EXP 68
25407: PUSH
25408: LD_EXP 74
25412: AND
25413: IFFALSE 25497
25415: GO 25417
25417: DISABLE
25418: LD_INT 0
25420: PPUSH
25421: PPUSH
// begin enable ;
25422: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25423: LD_ADDR_VAR 0 2
25427: PUSH
25428: LD_INT 22
25430: PUSH
25431: LD_OWVAR 2
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 32
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PPUSH
25454: CALL_OW 69
25458: ST_TO_ADDR
// if not tmp then
25459: LD_VAR 0 2
25463: NOT
25464: IFFALSE 25468
// exit ;
25466: GO 25497
// for i in tmp do
25468: LD_ADDR_VAR 0 1
25472: PUSH
25473: LD_VAR 0 2
25477: PUSH
25478: FOR_IN
25479: IFFALSE 25495
// begin SetLives ( i , 0 ) ;
25481: LD_VAR 0 1
25485: PPUSH
25486: LD_INT 0
25488: PPUSH
25489: CALL_OW 234
// end ;
25493: GO 25478
25495: POP
25496: POP
// end ;
25497: PPOPN 2
25499: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25500: LD_EXP 68
25504: PUSH
25505: LD_EXP 71
25509: AND
25510: IFFALSE 25603
25512: GO 25514
25514: DISABLE
25515: LD_INT 0
25517: PPUSH
// begin enable ;
25518: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25519: LD_ADDR_VAR 0 1
25523: PUSH
25524: LD_INT 22
25526: PUSH
25527: LD_OWVAR 2
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 2
25538: PUSH
25539: LD_INT 25
25541: PUSH
25542: LD_INT 5
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 25
25551: PUSH
25552: LD_INT 9
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 25
25561: PUSH
25562: LD_INT 8
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PPUSH
25579: CALL_OW 69
25583: PUSH
25584: FOR_IN
25585: IFFALSE 25601
// begin SetClass ( i , 1 ) ;
25587: LD_VAR 0 1
25591: PPUSH
25592: LD_INT 1
25594: PPUSH
25595: CALL_OW 336
// end ;
25599: GO 25584
25601: POP
25602: POP
// end ;
25603: PPOPN 1
25605: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25606: LD_EXP 68
25610: PUSH
25611: LD_EXP 72
25615: AND
25616: PUSH
25617: LD_OWVAR 65
25621: PUSH
25622: LD_INT 7
25624: LESS
25625: AND
25626: IFFALSE 25640
25628: GO 25630
25630: DISABLE
// begin enable ;
25631: ENABLE
// game_speed := 7 ;
25632: LD_ADDR_OWVAR 65
25636: PUSH
25637: LD_INT 7
25639: ST_TO_ADDR
// end ;
25640: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25641: LD_EXP 68
25645: PUSH
25646: LD_EXP 75
25650: AND
25651: IFFALSE 25853
25653: GO 25655
25655: DISABLE
25656: LD_INT 0
25658: PPUSH
25659: PPUSH
25660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25661: LD_ADDR_VAR 0 3
25665: PUSH
25666: LD_INT 81
25668: PUSH
25669: LD_OWVAR 2
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 21
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PPUSH
25692: CALL_OW 69
25696: ST_TO_ADDR
// if not tmp then
25697: LD_VAR 0 3
25701: NOT
25702: IFFALSE 25706
// exit ;
25704: GO 25853
// if tmp > 5 then
25706: LD_VAR 0 3
25710: PUSH
25711: LD_INT 5
25713: GREATER
25714: IFFALSE 25726
// k := 5 else
25716: LD_ADDR_VAR 0 2
25720: PUSH
25721: LD_INT 5
25723: ST_TO_ADDR
25724: GO 25736
// k := tmp ;
25726: LD_ADDR_VAR 0 2
25730: PUSH
25731: LD_VAR 0 3
25735: ST_TO_ADDR
// for i := 1 to k do
25736: LD_ADDR_VAR 0 1
25740: PUSH
25741: DOUBLE
25742: LD_INT 1
25744: DEC
25745: ST_TO_ADDR
25746: LD_VAR 0 2
25750: PUSH
25751: FOR_TO
25752: IFFALSE 25851
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25754: LD_VAR 0 3
25758: PUSH
25759: LD_VAR 0 1
25763: ARRAY
25764: PPUSH
25765: LD_VAR 0 1
25769: PUSH
25770: LD_INT 4
25772: MOD
25773: PUSH
25774: LD_INT 1
25776: PLUS
25777: PPUSH
25778: CALL_OW 259
25782: PUSH
25783: LD_INT 10
25785: LESS
25786: IFFALSE 25849
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25788: LD_VAR 0 3
25792: PUSH
25793: LD_VAR 0 1
25797: ARRAY
25798: PPUSH
25799: LD_VAR 0 1
25803: PUSH
25804: LD_INT 4
25806: MOD
25807: PUSH
25808: LD_INT 1
25810: PLUS
25811: PPUSH
25812: LD_VAR 0 3
25816: PUSH
25817: LD_VAR 0 1
25821: ARRAY
25822: PPUSH
25823: LD_VAR 0 1
25827: PUSH
25828: LD_INT 4
25830: MOD
25831: PUSH
25832: LD_INT 1
25834: PLUS
25835: PPUSH
25836: CALL_OW 259
25840: PUSH
25841: LD_INT 1
25843: PLUS
25844: PPUSH
25845: CALL_OW 237
25849: GO 25751
25851: POP
25852: POP
// end ;
25853: PPOPN 3
25855: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25856: LD_EXP 68
25860: PUSH
25861: LD_EXP 76
25865: AND
25866: IFFALSE 25886
25868: GO 25870
25870: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25871: LD_INT 4
25873: PPUSH
25874: LD_OWVAR 2
25878: PPUSH
25879: LD_INT 0
25881: PPUSH
25882: CALL_OW 324
25886: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25887: LD_EXP 68
25891: PUSH
25892: LD_EXP 105
25896: AND
25897: IFFALSE 25917
25899: GO 25901
25901: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25902: LD_INT 19
25904: PPUSH
25905: LD_OWVAR 2
25909: PPUSH
25910: LD_INT 0
25912: PPUSH
25913: CALL_OW 324
25917: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25918: LD_EXP 68
25922: PUSH
25923: LD_EXP 77
25927: AND
25928: IFFALSE 26030
25930: GO 25932
25932: DISABLE
25933: LD_INT 0
25935: PPUSH
25936: PPUSH
// begin enable ;
25937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25938: LD_ADDR_VAR 0 2
25942: PUSH
25943: LD_INT 22
25945: PUSH
25946: LD_OWVAR 2
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 2
25957: PUSH
25958: LD_INT 34
25960: PUSH
25961: LD_INT 11
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 34
25970: PUSH
25971: LD_INT 30
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: LIST
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PPUSH
25987: CALL_OW 69
25991: ST_TO_ADDR
// if not tmp then
25992: LD_VAR 0 2
25996: NOT
25997: IFFALSE 26001
// exit ;
25999: GO 26030
// for i in tmp do
26001: LD_ADDR_VAR 0 1
26005: PUSH
26006: LD_VAR 0 2
26010: PUSH
26011: FOR_IN
26012: IFFALSE 26028
// begin SetLives ( i , 0 ) ;
26014: LD_VAR 0 1
26018: PPUSH
26019: LD_INT 0
26021: PPUSH
26022: CALL_OW 234
// end ;
26026: GO 26011
26028: POP
26029: POP
// end ;
26030: PPOPN 2
26032: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26033: LD_EXP 68
26037: PUSH
26038: LD_EXP 78
26042: AND
26043: IFFALSE 26063
26045: GO 26047
26047: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26048: LD_INT 32
26050: PPUSH
26051: LD_OWVAR 2
26055: PPUSH
26056: LD_INT 0
26058: PPUSH
26059: CALL_OW 324
26063: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26064: LD_EXP 68
26068: PUSH
26069: LD_EXP 79
26073: AND
26074: IFFALSE 26255
26076: GO 26078
26078: DISABLE
26079: LD_INT 0
26081: PPUSH
26082: PPUSH
26083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26084: LD_ADDR_VAR 0 2
26088: PUSH
26089: LD_INT 22
26091: PUSH
26092: LD_OWVAR 2
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 33
26103: PUSH
26104: LD_INT 3
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PPUSH
26115: CALL_OW 69
26119: ST_TO_ADDR
// if not tmp then
26120: LD_VAR 0 2
26124: NOT
26125: IFFALSE 26129
// exit ;
26127: GO 26255
// side := 0 ;
26129: LD_ADDR_VAR 0 3
26133: PUSH
26134: LD_INT 0
26136: ST_TO_ADDR
// for i := 1 to 8 do
26137: LD_ADDR_VAR 0 1
26141: PUSH
26142: DOUBLE
26143: LD_INT 1
26145: DEC
26146: ST_TO_ADDR
26147: LD_INT 8
26149: PUSH
26150: FOR_TO
26151: IFFALSE 26199
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26153: LD_OWVAR 2
26157: PUSH
26158: LD_VAR 0 1
26162: NONEQUAL
26163: PUSH
26164: LD_OWVAR 2
26168: PPUSH
26169: LD_VAR 0 1
26173: PPUSH
26174: CALL_OW 81
26178: PUSH
26179: LD_INT 2
26181: EQUAL
26182: AND
26183: IFFALSE 26197
// begin side := i ;
26185: LD_ADDR_VAR 0 3
26189: PUSH
26190: LD_VAR 0 1
26194: ST_TO_ADDR
// break ;
26195: GO 26199
// end ;
26197: GO 26150
26199: POP
26200: POP
// if not side then
26201: LD_VAR 0 3
26205: NOT
26206: IFFALSE 26210
// exit ;
26208: GO 26255
// for i := 1 to tmp do
26210: LD_ADDR_VAR 0 1
26214: PUSH
26215: DOUBLE
26216: LD_INT 1
26218: DEC
26219: ST_TO_ADDR
26220: LD_VAR 0 2
26224: PUSH
26225: FOR_TO
26226: IFFALSE 26253
// if Prob ( 60 ) then
26228: LD_INT 60
26230: PPUSH
26231: CALL_OW 13
26235: IFFALSE 26251
// SetSide ( i , side ) ;
26237: LD_VAR 0 1
26241: PPUSH
26242: LD_VAR 0 3
26246: PPUSH
26247: CALL_OW 235
26251: GO 26225
26253: POP
26254: POP
// end ;
26255: PPOPN 3
26257: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26258: LD_EXP 68
26262: PUSH
26263: LD_EXP 81
26267: AND
26268: IFFALSE 26387
26270: GO 26272
26272: DISABLE
26273: LD_INT 0
26275: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26276: LD_ADDR_VAR 0 1
26280: PUSH
26281: LD_INT 22
26283: PUSH
26284: LD_OWVAR 2
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 21
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 3
26305: PUSH
26306: LD_INT 23
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: LIST
26324: PPUSH
26325: CALL_OW 69
26329: PUSH
26330: FOR_IN
26331: IFFALSE 26385
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26333: LD_VAR 0 1
26337: PPUSH
26338: CALL_OW 257
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: LD_INT 2
26348: PUSH
26349: LD_INT 3
26351: PUSH
26352: LD_INT 4
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: IN
26361: IFFALSE 26383
// SetClass ( un , rand ( 1 , 4 ) ) ;
26363: LD_VAR 0 1
26367: PPUSH
26368: LD_INT 1
26370: PPUSH
26371: LD_INT 4
26373: PPUSH
26374: CALL_OW 12
26378: PPUSH
26379: CALL_OW 336
26383: GO 26330
26385: POP
26386: POP
// end ;
26387: PPOPN 1
26389: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26390: LD_EXP 68
26394: PUSH
26395: LD_EXP 80
26399: AND
26400: IFFALSE 26479
26402: GO 26404
26404: DISABLE
26405: LD_INT 0
26407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26408: LD_ADDR_VAR 0 1
26412: PUSH
26413: LD_INT 22
26415: PUSH
26416: LD_OWVAR 2
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 21
26427: PUSH
26428: LD_INT 3
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PPUSH
26439: CALL_OW 69
26443: ST_TO_ADDR
// if not tmp then
26444: LD_VAR 0 1
26448: NOT
26449: IFFALSE 26453
// exit ;
26451: GO 26479
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26453: LD_VAR 0 1
26457: PUSH
26458: LD_INT 1
26460: PPUSH
26461: LD_VAR 0 1
26465: PPUSH
26466: CALL_OW 12
26470: ARRAY
26471: PPUSH
26472: LD_INT 100
26474: PPUSH
26475: CALL_OW 234
// end ;
26479: PPOPN 1
26481: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26482: LD_EXP 68
26486: PUSH
26487: LD_EXP 82
26491: AND
26492: IFFALSE 26590
26494: GO 26496
26496: DISABLE
26497: LD_INT 0
26499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26500: LD_ADDR_VAR 0 1
26504: PUSH
26505: LD_INT 22
26507: PUSH
26508: LD_OWVAR 2
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 21
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PPUSH
26531: CALL_OW 69
26535: ST_TO_ADDR
// if not tmp then
26536: LD_VAR 0 1
26540: NOT
26541: IFFALSE 26545
// exit ;
26543: GO 26590
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26545: LD_VAR 0 1
26549: PUSH
26550: LD_INT 1
26552: PPUSH
26553: LD_VAR 0 1
26557: PPUSH
26558: CALL_OW 12
26562: ARRAY
26563: PPUSH
26564: LD_INT 1
26566: PPUSH
26567: LD_INT 4
26569: PPUSH
26570: CALL_OW 12
26574: PPUSH
26575: LD_INT 3000
26577: PPUSH
26578: LD_INT 9000
26580: PPUSH
26581: CALL_OW 12
26585: PPUSH
26586: CALL_OW 492
// end ;
26590: PPOPN 1
26592: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26593: LD_EXP 68
26597: PUSH
26598: LD_EXP 83
26602: AND
26603: IFFALSE 26623
26605: GO 26607
26607: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26608: LD_INT 1
26610: PPUSH
26611: LD_OWVAR 2
26615: PPUSH
26616: LD_INT 0
26618: PPUSH
26619: CALL_OW 324
26623: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26624: LD_EXP 68
26628: PUSH
26629: LD_EXP 84
26633: AND
26634: IFFALSE 26717
26636: GO 26638
26638: DISABLE
26639: LD_INT 0
26641: PPUSH
26642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26643: LD_ADDR_VAR 0 2
26647: PUSH
26648: LD_INT 22
26650: PUSH
26651: LD_OWVAR 2
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 21
26662: PUSH
26663: LD_INT 3
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PPUSH
26674: CALL_OW 69
26678: ST_TO_ADDR
// if not tmp then
26679: LD_VAR 0 2
26683: NOT
26684: IFFALSE 26688
// exit ;
26686: GO 26717
// for i in tmp do
26688: LD_ADDR_VAR 0 1
26692: PUSH
26693: LD_VAR 0 2
26697: PUSH
26698: FOR_IN
26699: IFFALSE 26715
// SetBLevel ( i , 10 ) ;
26701: LD_VAR 0 1
26705: PPUSH
26706: LD_INT 10
26708: PPUSH
26709: CALL_OW 241
26713: GO 26698
26715: POP
26716: POP
// end ;
26717: PPOPN 2
26719: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26720: LD_EXP 68
26724: PUSH
26725: LD_EXP 85
26729: AND
26730: IFFALSE 26841
26732: GO 26734
26734: DISABLE
26735: LD_INT 0
26737: PPUSH
26738: PPUSH
26739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26740: LD_ADDR_VAR 0 3
26744: PUSH
26745: LD_INT 22
26747: PUSH
26748: LD_OWVAR 2
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 25
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PPUSH
26771: CALL_OW 69
26775: ST_TO_ADDR
// if not tmp then
26776: LD_VAR 0 3
26780: NOT
26781: IFFALSE 26785
// exit ;
26783: GO 26841
// un := tmp [ rand ( 1 , tmp ) ] ;
26785: LD_ADDR_VAR 0 2
26789: PUSH
26790: LD_VAR 0 3
26794: PUSH
26795: LD_INT 1
26797: PPUSH
26798: LD_VAR 0 3
26802: PPUSH
26803: CALL_OW 12
26807: ARRAY
26808: ST_TO_ADDR
// if Crawls ( un ) then
26809: LD_VAR 0 2
26813: PPUSH
26814: CALL_OW 318
26818: IFFALSE 26829
// ComWalk ( un ) ;
26820: LD_VAR 0 2
26824: PPUSH
26825: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26829: LD_VAR 0 2
26833: PPUSH
26834: LD_INT 5
26836: PPUSH
26837: CALL_OW 336
// end ;
26841: PPOPN 3
26843: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26844: LD_EXP 68
26848: PUSH
26849: LD_EXP 86
26853: AND
26854: PUSH
26855: LD_OWVAR 67
26859: PUSH
26860: LD_INT 3
26862: LESS
26863: AND
26864: IFFALSE 26883
26866: GO 26868
26868: DISABLE
// Difficulty := Difficulty + 1 ;
26869: LD_ADDR_OWVAR 67
26873: PUSH
26874: LD_OWVAR 67
26878: PUSH
26879: LD_INT 1
26881: PLUS
26882: ST_TO_ADDR
26883: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26884: LD_EXP 68
26888: PUSH
26889: LD_EXP 87
26893: AND
26894: IFFALSE 26997
26896: GO 26898
26898: DISABLE
26899: LD_INT 0
26901: PPUSH
// begin for i := 1 to 5 do
26902: LD_ADDR_VAR 0 1
26906: PUSH
26907: DOUBLE
26908: LD_INT 1
26910: DEC
26911: ST_TO_ADDR
26912: LD_INT 5
26914: PUSH
26915: FOR_TO
26916: IFFALSE 26995
// begin uc_nation := nation_nature ;
26918: LD_ADDR_OWVAR 21
26922: PUSH
26923: LD_INT 0
26925: ST_TO_ADDR
// uc_side := 0 ;
26926: LD_ADDR_OWVAR 20
26930: PUSH
26931: LD_INT 0
26933: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26934: LD_ADDR_OWVAR 29
26938: PUSH
26939: LD_INT 12
26941: PUSH
26942: LD_INT 12
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: ST_TO_ADDR
// hc_agressivity := 20 ;
26949: LD_ADDR_OWVAR 35
26953: PUSH
26954: LD_INT 20
26956: ST_TO_ADDR
// hc_class := class_tiger ;
26957: LD_ADDR_OWVAR 28
26961: PUSH
26962: LD_INT 14
26964: ST_TO_ADDR
// hc_gallery :=  ;
26965: LD_ADDR_OWVAR 33
26969: PUSH
26970: LD_STRING 
26972: ST_TO_ADDR
// hc_name :=  ;
26973: LD_ADDR_OWVAR 26
26977: PUSH
26978: LD_STRING 
26980: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26981: CALL_OW 44
26985: PPUSH
26986: LD_INT 0
26988: PPUSH
26989: CALL_OW 51
// end ;
26993: GO 26915
26995: POP
26996: POP
// end ;
26997: PPOPN 1
26999: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27000: LD_EXP 68
27004: PUSH
27005: LD_EXP 88
27009: AND
27010: IFFALSE 27019
27012: GO 27014
27014: DISABLE
// StreamSibBomb ;
27015: CALL 27020 0 0
27019: END
// export function StreamSibBomb ; var i , x , y ; begin
27020: LD_INT 0
27022: PPUSH
27023: PPUSH
27024: PPUSH
27025: PPUSH
// result := false ;
27026: LD_ADDR_VAR 0 1
27030: PUSH
27031: LD_INT 0
27033: ST_TO_ADDR
// for i := 1 to 16 do
27034: LD_ADDR_VAR 0 2
27038: PUSH
27039: DOUBLE
27040: LD_INT 1
27042: DEC
27043: ST_TO_ADDR
27044: LD_INT 16
27046: PUSH
27047: FOR_TO
27048: IFFALSE 27247
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27050: LD_ADDR_VAR 0 3
27054: PUSH
27055: LD_INT 10
27057: PUSH
27058: LD_INT 20
27060: PUSH
27061: LD_INT 30
27063: PUSH
27064: LD_INT 40
27066: PUSH
27067: LD_INT 50
27069: PUSH
27070: LD_INT 60
27072: PUSH
27073: LD_INT 70
27075: PUSH
27076: LD_INT 80
27078: PUSH
27079: LD_INT 90
27081: PUSH
27082: LD_INT 100
27084: PUSH
27085: LD_INT 110
27087: PUSH
27088: LD_INT 120
27090: PUSH
27091: LD_INT 130
27093: PUSH
27094: LD_INT 140
27096: PUSH
27097: LD_INT 150
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PPUSH
27120: LD_INT 15
27122: PPUSH
27123: CALL_OW 12
27127: ARRAY
27128: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27129: LD_ADDR_VAR 0 4
27133: PUSH
27134: LD_INT 10
27136: PUSH
27137: LD_INT 20
27139: PUSH
27140: LD_INT 30
27142: PUSH
27143: LD_INT 40
27145: PUSH
27146: LD_INT 50
27148: PUSH
27149: LD_INT 60
27151: PUSH
27152: LD_INT 70
27154: PUSH
27155: LD_INT 80
27157: PUSH
27158: LD_INT 90
27160: PUSH
27161: LD_INT 100
27163: PUSH
27164: LD_INT 110
27166: PUSH
27167: LD_INT 120
27169: PUSH
27170: LD_INT 130
27172: PUSH
27173: LD_INT 140
27175: PUSH
27176: LD_INT 150
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 1
27198: PPUSH
27199: LD_INT 15
27201: PPUSH
27202: CALL_OW 12
27206: ARRAY
27207: ST_TO_ADDR
// if ValidHex ( x , y ) then
27208: LD_VAR 0 3
27212: PPUSH
27213: LD_VAR 0 4
27217: PPUSH
27218: CALL_OW 488
27222: IFFALSE 27245
// begin result := [ x , y ] ;
27224: LD_ADDR_VAR 0 1
27228: PUSH
27229: LD_VAR 0 3
27233: PUSH
27234: LD_VAR 0 4
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: ST_TO_ADDR
// break ;
27243: GO 27247
// end ; end ;
27245: GO 27047
27247: POP
27248: POP
// if result then
27249: LD_VAR 0 1
27253: IFFALSE 27313
// begin ToLua ( playSibBomb() ) ;
27255: LD_STRING playSibBomb()
27257: PPUSH
27258: CALL_OW 559
// wait ( 0 0$14 ) ;
27262: LD_INT 490
27264: PPUSH
27265: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27269: LD_VAR 0 1
27273: PUSH
27274: LD_INT 1
27276: ARRAY
27277: PPUSH
27278: LD_VAR 0 1
27282: PUSH
27283: LD_INT 2
27285: ARRAY
27286: PPUSH
27287: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27291: LD_VAR 0 1
27295: PUSH
27296: LD_INT 1
27298: ARRAY
27299: PPUSH
27300: LD_VAR 0 1
27304: PUSH
27305: LD_INT 2
27307: ARRAY
27308: PPUSH
27309: CALL_OW 429
// end ; end ;
27313: LD_VAR 0 1
27317: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27318: LD_EXP 68
27322: PUSH
27323: LD_EXP 90
27327: AND
27328: IFFALSE 27340
27330: GO 27332
27332: DISABLE
// YouLost (  ) ;
27333: LD_STRING 
27335: PPUSH
27336: CALL_OW 104
27340: END
// every 0 0$1 trigger StreamModeActive and sFog do
27341: LD_EXP 68
27345: PUSH
27346: LD_EXP 89
27350: AND
27351: IFFALSE 27365
27353: GO 27355
27355: DISABLE
// FogOff ( your_side ) ;
27356: LD_OWVAR 2
27360: PPUSH
27361: CALL_OW 344
27365: END
// every 0 0$1 trigger StreamModeActive and sSun do
27366: LD_EXP 68
27370: PUSH
27371: LD_EXP 91
27375: AND
27376: IFFALSE 27404
27378: GO 27380
27380: DISABLE
// begin solar_recharge_percent := 0 ;
27381: LD_ADDR_OWVAR 79
27385: PUSH
27386: LD_INT 0
27388: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27389: LD_INT 10500
27391: PPUSH
27392: CALL_OW 67
// solar_recharge_percent := 100 ;
27396: LD_ADDR_OWVAR 79
27400: PUSH
27401: LD_INT 100
27403: ST_TO_ADDR
// end ;
27404: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27405: LD_EXP 68
27409: PUSH
27410: LD_EXP 92
27414: AND
27415: IFFALSE 27654
27417: GO 27419
27419: DISABLE
27420: LD_INT 0
27422: PPUSH
27423: PPUSH
27424: PPUSH
// begin tmp := [ ] ;
27425: LD_ADDR_VAR 0 3
27429: PUSH
27430: EMPTY
27431: ST_TO_ADDR
// for i := 1 to 6 do
27432: LD_ADDR_VAR 0 1
27436: PUSH
27437: DOUBLE
27438: LD_INT 1
27440: DEC
27441: ST_TO_ADDR
27442: LD_INT 6
27444: PUSH
27445: FOR_TO
27446: IFFALSE 27551
// begin uc_nation := nation_nature ;
27448: LD_ADDR_OWVAR 21
27452: PUSH
27453: LD_INT 0
27455: ST_TO_ADDR
// uc_side := 0 ;
27456: LD_ADDR_OWVAR 20
27460: PUSH
27461: LD_INT 0
27463: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27464: LD_ADDR_OWVAR 29
27468: PUSH
27469: LD_INT 12
27471: PUSH
27472: LD_INT 12
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: ST_TO_ADDR
// hc_agressivity := 20 ;
27479: LD_ADDR_OWVAR 35
27483: PUSH
27484: LD_INT 20
27486: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27487: LD_ADDR_OWVAR 28
27491: PUSH
27492: LD_INT 17
27494: ST_TO_ADDR
// hc_gallery :=  ;
27495: LD_ADDR_OWVAR 33
27499: PUSH
27500: LD_STRING 
27502: ST_TO_ADDR
// hc_name :=  ;
27503: LD_ADDR_OWVAR 26
27507: PUSH
27508: LD_STRING 
27510: ST_TO_ADDR
// un := CreateHuman ;
27511: LD_ADDR_VAR 0 2
27515: PUSH
27516: CALL_OW 44
27520: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27521: LD_VAR 0 2
27525: PPUSH
27526: LD_INT 1
27528: PPUSH
27529: CALL_OW 51
// tmp := tmp ^ un ;
27533: LD_ADDR_VAR 0 3
27537: PUSH
27538: LD_VAR 0 3
27542: PUSH
27543: LD_VAR 0 2
27547: ADD
27548: ST_TO_ADDR
// end ;
27549: GO 27445
27551: POP
27552: POP
// repeat wait ( 0 0$1 ) ;
27553: LD_INT 35
27555: PPUSH
27556: CALL_OW 67
// for un in tmp do
27560: LD_ADDR_VAR 0 2
27564: PUSH
27565: LD_VAR 0 3
27569: PUSH
27570: FOR_IN
27571: IFFALSE 27645
// begin if IsDead ( un ) then
27573: LD_VAR 0 2
27577: PPUSH
27578: CALL_OW 301
27582: IFFALSE 27602
// begin tmp := tmp diff un ;
27584: LD_ADDR_VAR 0 3
27588: PUSH
27589: LD_VAR 0 3
27593: PUSH
27594: LD_VAR 0 2
27598: DIFF
27599: ST_TO_ADDR
// continue ;
27600: GO 27570
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27602: LD_VAR 0 2
27606: PPUSH
27607: LD_INT 3
27609: PUSH
27610: LD_INT 22
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PPUSH
27624: CALL_OW 69
27628: PPUSH
27629: LD_VAR 0 2
27633: PPUSH
27634: CALL_OW 74
27638: PPUSH
27639: CALL_OW 115
// end ;
27643: GO 27570
27645: POP
27646: POP
// until not tmp ;
27647: LD_VAR 0 3
27651: NOT
27652: IFFALSE 27553
// end ;
27654: PPOPN 3
27656: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27657: LD_EXP 68
27661: PUSH
27662: LD_EXP 93
27666: AND
27667: IFFALSE 27721
27669: GO 27671
27671: DISABLE
// begin ToLua ( displayTroll(); ) ;
27672: LD_STRING displayTroll();
27674: PPUSH
27675: CALL_OW 559
// wait ( 3 3$00 ) ;
27679: LD_INT 6300
27681: PPUSH
27682: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27686: LD_STRING hideTroll();
27688: PPUSH
27689: CALL_OW 559
// wait ( 1 1$00 ) ;
27693: LD_INT 2100
27695: PPUSH
27696: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27700: LD_STRING displayTroll();
27702: PPUSH
27703: CALL_OW 559
// wait ( 1 1$00 ) ;
27707: LD_INT 2100
27709: PPUSH
27710: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27714: LD_STRING hideTroll();
27716: PPUSH
27717: CALL_OW 559
// end ;
27721: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27722: LD_EXP 68
27726: PUSH
27727: LD_EXP 94
27731: AND
27732: IFFALSE 27795
27734: GO 27736
27736: DISABLE
27737: LD_INT 0
27739: PPUSH
// begin p := 0 ;
27740: LD_ADDR_VAR 0 1
27744: PUSH
27745: LD_INT 0
27747: ST_TO_ADDR
// repeat game_speed := 1 ;
27748: LD_ADDR_OWVAR 65
27752: PUSH
27753: LD_INT 1
27755: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27756: LD_INT 35
27758: PPUSH
27759: CALL_OW 67
// p := p + 1 ;
27763: LD_ADDR_VAR 0 1
27767: PUSH
27768: LD_VAR 0 1
27772: PUSH
27773: LD_INT 1
27775: PLUS
27776: ST_TO_ADDR
// until p >= 60 ;
27777: LD_VAR 0 1
27781: PUSH
27782: LD_INT 60
27784: GREATEREQUAL
27785: IFFALSE 27748
// game_speed := 4 ;
27787: LD_ADDR_OWVAR 65
27791: PUSH
27792: LD_INT 4
27794: ST_TO_ADDR
// end ;
27795: PPOPN 1
27797: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27798: LD_EXP 68
27802: PUSH
27803: LD_EXP 95
27807: AND
27808: IFFALSE 27954
27810: GO 27812
27812: DISABLE
27813: LD_INT 0
27815: PPUSH
27816: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27817: LD_ADDR_VAR 0 1
27821: PUSH
27822: LD_INT 22
27824: PUSH
27825: LD_OWVAR 2
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: LD_INT 30
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 30
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PPUSH
27866: CALL_OW 69
27870: ST_TO_ADDR
// if not depot then
27871: LD_VAR 0 1
27875: NOT
27876: IFFALSE 27880
// exit ;
27878: GO 27954
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27880: LD_ADDR_VAR 0 2
27884: PUSH
27885: LD_VAR 0 1
27889: PUSH
27890: LD_INT 1
27892: PPUSH
27893: LD_VAR 0 1
27897: PPUSH
27898: CALL_OW 12
27902: ARRAY
27903: PPUSH
27904: CALL_OW 274
27908: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27909: LD_VAR 0 2
27913: PPUSH
27914: LD_INT 1
27916: PPUSH
27917: LD_INT 0
27919: PPUSH
27920: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27924: LD_VAR 0 2
27928: PPUSH
27929: LD_INT 2
27931: PPUSH
27932: LD_INT 0
27934: PPUSH
27935: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27939: LD_VAR 0 2
27943: PPUSH
27944: LD_INT 3
27946: PPUSH
27947: LD_INT 0
27949: PPUSH
27950: CALL_OW 277
// end ;
27954: PPOPN 2
27956: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27957: LD_EXP 68
27961: PUSH
27962: LD_EXP 96
27966: AND
27967: IFFALSE 28064
27969: GO 27971
27971: DISABLE
27972: LD_INT 0
27974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27975: LD_ADDR_VAR 0 1
27979: PUSH
27980: LD_INT 22
27982: PUSH
27983: LD_OWVAR 2
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 21
27994: PUSH
27995: LD_INT 1
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 3
28004: PUSH
28005: LD_INT 23
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: LIST
28023: PPUSH
28024: CALL_OW 69
28028: ST_TO_ADDR
// if not tmp then
28029: LD_VAR 0 1
28033: NOT
28034: IFFALSE 28038
// exit ;
28036: GO 28064
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28038: LD_VAR 0 1
28042: PUSH
28043: LD_INT 1
28045: PPUSH
28046: LD_VAR 0 1
28050: PPUSH
28051: CALL_OW 12
28055: ARRAY
28056: PPUSH
28057: LD_INT 200
28059: PPUSH
28060: CALL_OW 234
// end ;
28064: PPOPN 1
28066: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28067: LD_EXP 68
28071: PUSH
28072: LD_EXP 97
28076: AND
28077: IFFALSE 28156
28079: GO 28081
28081: DISABLE
28082: LD_INT 0
28084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28085: LD_ADDR_VAR 0 1
28089: PUSH
28090: LD_INT 22
28092: PUSH
28093: LD_OWVAR 2
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 21
28104: PUSH
28105: LD_INT 2
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PPUSH
28116: CALL_OW 69
28120: ST_TO_ADDR
// if not tmp then
28121: LD_VAR 0 1
28125: NOT
28126: IFFALSE 28130
// exit ;
28128: GO 28156
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28130: LD_VAR 0 1
28134: PUSH
28135: LD_INT 1
28137: PPUSH
28138: LD_VAR 0 1
28142: PPUSH
28143: CALL_OW 12
28147: ARRAY
28148: PPUSH
28149: LD_INT 60
28151: PPUSH
28152: CALL_OW 234
// end ;
28156: PPOPN 1
28158: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28159: LD_EXP 68
28163: PUSH
28164: LD_EXP 98
28168: AND
28169: IFFALSE 28268
28171: GO 28173
28173: DISABLE
28174: LD_INT 0
28176: PPUSH
28177: PPUSH
// begin enable ;
28178: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28179: LD_ADDR_VAR 0 1
28183: PUSH
28184: LD_INT 22
28186: PUSH
28187: LD_OWVAR 2
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 61
28198: PUSH
28199: EMPTY
28200: LIST
28201: PUSH
28202: LD_INT 33
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: LIST
28216: PPUSH
28217: CALL_OW 69
28221: ST_TO_ADDR
// if not tmp then
28222: LD_VAR 0 1
28226: NOT
28227: IFFALSE 28231
// exit ;
28229: GO 28268
// for i in tmp do
28231: LD_ADDR_VAR 0 2
28235: PUSH
28236: LD_VAR 0 1
28240: PUSH
28241: FOR_IN
28242: IFFALSE 28266
// if IsControledBy ( i ) then
28244: LD_VAR 0 2
28248: PPUSH
28249: CALL_OW 312
28253: IFFALSE 28264
// ComUnlink ( i ) ;
28255: LD_VAR 0 2
28259: PPUSH
28260: CALL_OW 136
28264: GO 28241
28266: POP
28267: POP
// end ;
28268: PPOPN 2
28270: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28271: LD_EXP 68
28275: PUSH
28276: LD_EXP 99
28280: AND
28281: IFFALSE 28421
28283: GO 28285
28285: DISABLE
28286: LD_INT 0
28288: PPUSH
28289: PPUSH
// begin ToLua ( displayPowell(); ) ;
28290: LD_STRING displayPowell();
28292: PPUSH
28293: CALL_OW 559
// uc_side := 0 ;
28297: LD_ADDR_OWVAR 20
28301: PUSH
28302: LD_INT 0
28304: ST_TO_ADDR
// uc_nation := 2 ;
28305: LD_ADDR_OWVAR 21
28309: PUSH
28310: LD_INT 2
28312: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28313: LD_ADDR_OWVAR 37
28317: PUSH
28318: LD_INT 14
28320: ST_TO_ADDR
// vc_engine := engine_siberite ;
28321: LD_ADDR_OWVAR 39
28325: PUSH
28326: LD_INT 3
28328: ST_TO_ADDR
// vc_control := control_apeman ;
28329: LD_ADDR_OWVAR 38
28333: PUSH
28334: LD_INT 5
28336: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28337: LD_ADDR_OWVAR 40
28341: PUSH
28342: LD_INT 29
28344: ST_TO_ADDR
// un := CreateVehicle ;
28345: LD_ADDR_VAR 0 2
28349: PUSH
28350: CALL_OW 45
28354: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28355: LD_VAR 0 2
28359: PPUSH
28360: LD_INT 1
28362: PPUSH
28363: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28367: LD_INT 35
28369: PPUSH
28370: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28374: LD_VAR 0 2
28378: PPUSH
28379: LD_INT 22
28381: PUSH
28382: LD_OWVAR 2
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PPUSH
28391: CALL_OW 69
28395: PPUSH
28396: LD_VAR 0 2
28400: PPUSH
28401: CALL_OW 74
28405: PPUSH
28406: CALL_OW 115
// until IsDead ( un ) ;
28410: LD_VAR 0 2
28414: PPUSH
28415: CALL_OW 301
28419: IFFALSE 28367
// end ;
28421: PPOPN 2
28423: END
// every 0 0$1 trigger StreamModeActive and sStu do
28424: LD_EXP 68
28428: PUSH
28429: LD_EXP 107
28433: AND
28434: IFFALSE 28450
28436: GO 28438
28438: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28439: LD_STRING displayStucuk();
28441: PPUSH
28442: CALL_OW 559
// ResetFog ;
28446: CALL_OW 335
// end ;
28450: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28451: LD_EXP 68
28455: PUSH
28456: LD_EXP 100
28460: AND
28461: IFFALSE 28602
28463: GO 28465
28465: DISABLE
28466: LD_INT 0
28468: PPUSH
28469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28470: LD_ADDR_VAR 0 2
28474: PUSH
28475: LD_INT 22
28477: PUSH
28478: LD_OWVAR 2
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 21
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PPUSH
28501: CALL_OW 69
28505: ST_TO_ADDR
// if not tmp then
28506: LD_VAR 0 2
28510: NOT
28511: IFFALSE 28515
// exit ;
28513: GO 28602
// un := tmp [ rand ( 1 , tmp ) ] ;
28515: LD_ADDR_VAR 0 1
28519: PUSH
28520: LD_VAR 0 2
28524: PUSH
28525: LD_INT 1
28527: PPUSH
28528: LD_VAR 0 2
28532: PPUSH
28533: CALL_OW 12
28537: ARRAY
28538: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28539: LD_VAR 0 1
28543: PPUSH
28544: LD_INT 0
28546: PPUSH
28547: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28551: LD_VAR 0 1
28555: PPUSH
28556: LD_OWVAR 3
28560: PUSH
28561: LD_VAR 0 1
28565: DIFF
28566: PPUSH
28567: LD_VAR 0 1
28571: PPUSH
28572: CALL_OW 74
28576: PPUSH
28577: CALL_OW 115
// wait ( 0 0$20 ) ;
28581: LD_INT 700
28583: PPUSH
28584: CALL_OW 67
// SetSide ( un , your_side ) ;
28588: LD_VAR 0 1
28592: PPUSH
28593: LD_OWVAR 2
28597: PPUSH
28598: CALL_OW 235
// end ;
28602: PPOPN 2
28604: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28605: LD_EXP 68
28609: PUSH
28610: LD_EXP 101
28614: AND
28615: IFFALSE 28721
28617: GO 28619
28619: DISABLE
28620: LD_INT 0
28622: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28623: LD_ADDR_VAR 0 1
28627: PUSH
28628: LD_INT 22
28630: PUSH
28631: LD_OWVAR 2
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: LD_INT 30
28645: PUSH
28646: LD_INT 0
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 30
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: LIST
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PPUSH
28672: CALL_OW 69
28676: ST_TO_ADDR
// if not depot then
28677: LD_VAR 0 1
28681: NOT
28682: IFFALSE 28686
// exit ;
28684: GO 28721
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28686: LD_VAR 0 1
28690: PUSH
28691: LD_INT 1
28693: ARRAY
28694: PPUSH
28695: CALL_OW 250
28699: PPUSH
28700: LD_VAR 0 1
28704: PUSH
28705: LD_INT 1
28707: ARRAY
28708: PPUSH
28709: CALL_OW 251
28713: PPUSH
28714: LD_INT 70
28716: PPUSH
28717: CALL_OW 495
// end ;
28721: PPOPN 1
28723: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28724: LD_EXP 68
28728: PUSH
28729: LD_EXP 102
28733: AND
28734: IFFALSE 28945
28736: GO 28738
28738: DISABLE
28739: LD_INT 0
28741: PPUSH
28742: PPUSH
28743: PPUSH
28744: PPUSH
28745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28746: LD_ADDR_VAR 0 5
28750: PUSH
28751: LD_INT 22
28753: PUSH
28754: LD_OWVAR 2
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 21
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PPUSH
28777: CALL_OW 69
28781: ST_TO_ADDR
// if not tmp then
28782: LD_VAR 0 5
28786: NOT
28787: IFFALSE 28791
// exit ;
28789: GO 28945
// for i in tmp do
28791: LD_ADDR_VAR 0 1
28795: PUSH
28796: LD_VAR 0 5
28800: PUSH
28801: FOR_IN
28802: IFFALSE 28943
// begin d := rand ( 0 , 5 ) ;
28804: LD_ADDR_VAR 0 4
28808: PUSH
28809: LD_INT 0
28811: PPUSH
28812: LD_INT 5
28814: PPUSH
28815: CALL_OW 12
28819: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28820: LD_ADDR_VAR 0 2
28824: PUSH
28825: LD_VAR 0 1
28829: PPUSH
28830: CALL_OW 250
28834: PPUSH
28835: LD_VAR 0 4
28839: PPUSH
28840: LD_INT 3
28842: PPUSH
28843: LD_INT 12
28845: PPUSH
28846: CALL_OW 12
28850: PPUSH
28851: CALL_OW 272
28855: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28856: LD_ADDR_VAR 0 3
28860: PUSH
28861: LD_VAR 0 1
28865: PPUSH
28866: CALL_OW 251
28870: PPUSH
28871: LD_VAR 0 4
28875: PPUSH
28876: LD_INT 3
28878: PPUSH
28879: LD_INT 12
28881: PPUSH
28882: CALL_OW 12
28886: PPUSH
28887: CALL_OW 273
28891: ST_TO_ADDR
// if ValidHex ( x , y ) then
28892: LD_VAR 0 2
28896: PPUSH
28897: LD_VAR 0 3
28901: PPUSH
28902: CALL_OW 488
28906: IFFALSE 28941
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28908: LD_VAR 0 1
28912: PPUSH
28913: LD_VAR 0 2
28917: PPUSH
28918: LD_VAR 0 3
28922: PPUSH
28923: LD_INT 3
28925: PPUSH
28926: LD_INT 6
28928: PPUSH
28929: CALL_OW 12
28933: PPUSH
28934: LD_INT 1
28936: PPUSH
28937: CALL_OW 483
// end ;
28941: GO 28801
28943: POP
28944: POP
// end ;
28945: PPOPN 5
28947: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28948: LD_EXP 68
28952: PUSH
28953: LD_EXP 103
28957: AND
28958: IFFALSE 29052
28960: GO 28962
28962: DISABLE
28963: LD_INT 0
28965: PPUSH
28966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28967: LD_ADDR_VAR 0 2
28971: PUSH
28972: LD_INT 22
28974: PUSH
28975: LD_OWVAR 2
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 32
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 21
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: PPUSH
29009: CALL_OW 69
29013: ST_TO_ADDR
// if not tmp then
29014: LD_VAR 0 2
29018: NOT
29019: IFFALSE 29023
// exit ;
29021: GO 29052
// for i in tmp do
29023: LD_ADDR_VAR 0 1
29027: PUSH
29028: LD_VAR 0 2
29032: PUSH
29033: FOR_IN
29034: IFFALSE 29050
// SetFuel ( i , 0 ) ;
29036: LD_VAR 0 1
29040: PPUSH
29041: LD_INT 0
29043: PPUSH
29044: CALL_OW 240
29048: GO 29033
29050: POP
29051: POP
// end ;
29052: PPOPN 2
29054: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29055: LD_EXP 68
29059: PUSH
29060: LD_EXP 104
29064: AND
29065: IFFALSE 29131
29067: GO 29069
29069: DISABLE
29070: LD_INT 0
29072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29073: LD_ADDR_VAR 0 1
29077: PUSH
29078: LD_INT 22
29080: PUSH
29081: LD_OWVAR 2
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 30
29092: PUSH
29093: LD_INT 29
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PPUSH
29104: CALL_OW 69
29108: ST_TO_ADDR
// if not tmp then
29109: LD_VAR 0 1
29113: NOT
29114: IFFALSE 29118
// exit ;
29116: GO 29131
// DestroyUnit ( tmp [ 1 ] ) ;
29118: LD_VAR 0 1
29122: PUSH
29123: LD_INT 1
29125: ARRAY
29126: PPUSH
29127: CALL_OW 65
// end ;
29131: PPOPN 1
29133: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29134: LD_EXP 68
29138: PUSH
29139: LD_EXP 106
29143: AND
29144: IFFALSE 29273
29146: GO 29148
29148: DISABLE
29149: LD_INT 0
29151: PPUSH
// begin uc_side := 0 ;
29152: LD_ADDR_OWVAR 20
29156: PUSH
29157: LD_INT 0
29159: ST_TO_ADDR
// uc_nation := nation_arabian ;
29160: LD_ADDR_OWVAR 21
29164: PUSH
29165: LD_INT 2
29167: ST_TO_ADDR
// hc_gallery :=  ;
29168: LD_ADDR_OWVAR 33
29172: PUSH
29173: LD_STRING 
29175: ST_TO_ADDR
// hc_name :=  ;
29176: LD_ADDR_OWVAR 26
29180: PUSH
29181: LD_STRING 
29183: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29184: LD_INT 1
29186: PPUSH
29187: LD_INT 11
29189: PPUSH
29190: LD_INT 10
29192: PPUSH
29193: CALL_OW 380
// un := CreateHuman ;
29197: LD_ADDR_VAR 0 1
29201: PUSH
29202: CALL_OW 44
29206: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29207: LD_VAR 0 1
29211: PPUSH
29212: LD_INT 1
29214: PPUSH
29215: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29219: LD_INT 35
29221: PPUSH
29222: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29226: LD_VAR 0 1
29230: PPUSH
29231: LD_INT 22
29233: PUSH
29234: LD_OWVAR 2
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PPUSH
29243: CALL_OW 69
29247: PPUSH
29248: LD_VAR 0 1
29252: PPUSH
29253: CALL_OW 74
29257: PPUSH
29258: CALL_OW 115
// until IsDead ( un ) ;
29262: LD_VAR 0 1
29266: PPUSH
29267: CALL_OW 301
29271: IFFALSE 29219
// end ;
29273: PPOPN 1
29275: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29276: LD_EXP 68
29280: PUSH
29281: LD_EXP 108
29285: AND
29286: IFFALSE 29298
29288: GO 29290
29290: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29291: LD_STRING earthquake(getX(game), 0, 32)
29293: PPUSH
29294: CALL_OW 559
29298: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29299: LD_EXP 68
29303: PUSH
29304: LD_EXP 109
29308: AND
29309: IFFALSE 29400
29311: GO 29313
29313: DISABLE
29314: LD_INT 0
29316: PPUSH
// begin enable ;
29317: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29318: LD_ADDR_VAR 0 1
29322: PUSH
29323: LD_INT 22
29325: PUSH
29326: LD_OWVAR 2
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 21
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 33
29347: PUSH
29348: LD_INT 3
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: PPUSH
29360: CALL_OW 69
29364: ST_TO_ADDR
// if not tmp then
29365: LD_VAR 0 1
29369: NOT
29370: IFFALSE 29374
// exit ;
29372: GO 29400
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29374: LD_VAR 0 1
29378: PUSH
29379: LD_INT 1
29381: PPUSH
29382: LD_VAR 0 1
29386: PPUSH
29387: CALL_OW 12
29391: ARRAY
29392: PPUSH
29393: LD_INT 1
29395: PPUSH
29396: CALL_OW 234
// end ;
29400: PPOPN 1
29402: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29403: LD_EXP 68
29407: PUSH
29408: LD_EXP 110
29412: AND
29413: IFFALSE 29554
29415: GO 29417
29417: DISABLE
29418: LD_INT 0
29420: PPUSH
29421: PPUSH
29422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29423: LD_ADDR_VAR 0 3
29427: PUSH
29428: LD_INT 22
29430: PUSH
29431: LD_OWVAR 2
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 25
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PPUSH
29454: CALL_OW 69
29458: ST_TO_ADDR
// if not tmp then
29459: LD_VAR 0 3
29463: NOT
29464: IFFALSE 29468
// exit ;
29466: GO 29554
// un := tmp [ rand ( 1 , tmp ) ] ;
29468: LD_ADDR_VAR 0 2
29472: PUSH
29473: LD_VAR 0 3
29477: PUSH
29478: LD_INT 1
29480: PPUSH
29481: LD_VAR 0 3
29485: PPUSH
29486: CALL_OW 12
29490: ARRAY
29491: ST_TO_ADDR
// if Crawls ( un ) then
29492: LD_VAR 0 2
29496: PPUSH
29497: CALL_OW 318
29501: IFFALSE 29512
// ComWalk ( un ) ;
29503: LD_VAR 0 2
29507: PPUSH
29508: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29512: LD_VAR 0 2
29516: PPUSH
29517: LD_INT 9
29519: PPUSH
29520: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29524: LD_INT 28
29526: PPUSH
29527: LD_OWVAR 2
29531: PPUSH
29532: LD_INT 2
29534: PPUSH
29535: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29539: LD_INT 29
29541: PPUSH
29542: LD_OWVAR 2
29546: PPUSH
29547: LD_INT 2
29549: PPUSH
29550: CALL_OW 322
// end ;
29554: PPOPN 3
29556: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29557: LD_EXP 68
29561: PUSH
29562: LD_EXP 111
29566: AND
29567: IFFALSE 29678
29569: GO 29571
29571: DISABLE
29572: LD_INT 0
29574: PPUSH
29575: PPUSH
29576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29577: LD_ADDR_VAR 0 3
29581: PUSH
29582: LD_INT 22
29584: PUSH
29585: LD_OWVAR 2
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 25
29596: PUSH
29597: LD_INT 1
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PPUSH
29608: CALL_OW 69
29612: ST_TO_ADDR
// if not tmp then
29613: LD_VAR 0 3
29617: NOT
29618: IFFALSE 29622
// exit ;
29620: GO 29678
// un := tmp [ rand ( 1 , tmp ) ] ;
29622: LD_ADDR_VAR 0 2
29626: PUSH
29627: LD_VAR 0 3
29631: PUSH
29632: LD_INT 1
29634: PPUSH
29635: LD_VAR 0 3
29639: PPUSH
29640: CALL_OW 12
29644: ARRAY
29645: ST_TO_ADDR
// if Crawls ( un ) then
29646: LD_VAR 0 2
29650: PPUSH
29651: CALL_OW 318
29655: IFFALSE 29666
// ComWalk ( un ) ;
29657: LD_VAR 0 2
29661: PPUSH
29662: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29666: LD_VAR 0 2
29670: PPUSH
29671: LD_INT 8
29673: PPUSH
29674: CALL_OW 336
// end ;
29678: PPOPN 3
29680: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29681: LD_EXP 68
29685: PUSH
29686: LD_EXP 112
29690: AND
29691: IFFALSE 29835
29693: GO 29695
29695: DISABLE
29696: LD_INT 0
29698: PPUSH
29699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29700: LD_ADDR_VAR 0 2
29704: PUSH
29705: LD_INT 22
29707: PUSH
29708: LD_OWVAR 2
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 21
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 2
29729: PUSH
29730: LD_INT 34
29732: PUSH
29733: LD_INT 12
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 34
29742: PUSH
29743: LD_INT 51
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 34
29752: PUSH
29753: LD_INT 32
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: PPUSH
29771: CALL_OW 69
29775: ST_TO_ADDR
// if not tmp then
29776: LD_VAR 0 2
29780: NOT
29781: IFFALSE 29785
// exit ;
29783: GO 29835
// for i in tmp do
29785: LD_ADDR_VAR 0 1
29789: PUSH
29790: LD_VAR 0 2
29794: PUSH
29795: FOR_IN
29796: IFFALSE 29833
// if GetCargo ( i , mat_artifact ) = 0 then
29798: LD_VAR 0 1
29802: PPUSH
29803: LD_INT 4
29805: PPUSH
29806: CALL_OW 289
29810: PUSH
29811: LD_INT 0
29813: EQUAL
29814: IFFALSE 29831
// SetCargo ( i , mat_siberit , 100 ) ;
29816: LD_VAR 0 1
29820: PPUSH
29821: LD_INT 3
29823: PPUSH
29824: LD_INT 100
29826: PPUSH
29827: CALL_OW 290
29831: GO 29795
29833: POP
29834: POP
// end ;
29835: PPOPN 2
29837: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29838: LD_EXP 68
29842: PUSH
29843: LD_EXP 113
29847: AND
29848: IFFALSE 30031
29850: GO 29852
29852: DISABLE
29853: LD_INT 0
29855: PPUSH
29856: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29857: LD_ADDR_VAR 0 2
29861: PUSH
29862: LD_INT 22
29864: PUSH
29865: LD_OWVAR 2
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PPUSH
29874: CALL_OW 69
29878: ST_TO_ADDR
// if not tmp then
29879: LD_VAR 0 2
29883: NOT
29884: IFFALSE 29888
// exit ;
29886: GO 30031
// for i := 1 to 2 do
29888: LD_ADDR_VAR 0 1
29892: PUSH
29893: DOUBLE
29894: LD_INT 1
29896: DEC
29897: ST_TO_ADDR
29898: LD_INT 2
29900: PUSH
29901: FOR_TO
29902: IFFALSE 30029
// begin uc_side := your_side ;
29904: LD_ADDR_OWVAR 20
29908: PUSH
29909: LD_OWVAR 2
29913: ST_TO_ADDR
// uc_nation := nation_american ;
29914: LD_ADDR_OWVAR 21
29918: PUSH
29919: LD_INT 1
29921: ST_TO_ADDR
// vc_chassis := us_morphling ;
29922: LD_ADDR_OWVAR 37
29926: PUSH
29927: LD_INT 5
29929: ST_TO_ADDR
// vc_engine := engine_siberite ;
29930: LD_ADDR_OWVAR 39
29934: PUSH
29935: LD_INT 3
29937: ST_TO_ADDR
// vc_control := control_computer ;
29938: LD_ADDR_OWVAR 38
29942: PUSH
29943: LD_INT 3
29945: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29946: LD_ADDR_OWVAR 40
29950: PUSH
29951: LD_INT 10
29953: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29954: LD_VAR 0 2
29958: PUSH
29959: LD_INT 1
29961: ARRAY
29962: PPUSH
29963: CALL_OW 310
29967: NOT
29968: IFFALSE 30015
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29970: CALL_OW 45
29974: PPUSH
29975: LD_VAR 0 2
29979: PUSH
29980: LD_INT 1
29982: ARRAY
29983: PPUSH
29984: CALL_OW 250
29988: PPUSH
29989: LD_VAR 0 2
29993: PUSH
29994: LD_INT 1
29996: ARRAY
29997: PPUSH
29998: CALL_OW 251
30002: PPUSH
30003: LD_INT 12
30005: PPUSH
30006: LD_INT 1
30008: PPUSH
30009: CALL_OW 50
30013: GO 30027
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30015: CALL_OW 45
30019: PPUSH
30020: LD_INT 1
30022: PPUSH
30023: CALL_OW 51
// end ;
30027: GO 29901
30029: POP
30030: POP
// end ;
30031: PPOPN 2
30033: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30034: LD_EXP 68
30038: PUSH
30039: LD_EXP 114
30043: AND
30044: IFFALSE 30266
30046: GO 30048
30048: DISABLE
30049: LD_INT 0
30051: PPUSH
30052: PPUSH
30053: PPUSH
30054: PPUSH
30055: PPUSH
30056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30057: LD_ADDR_VAR 0 6
30061: PUSH
30062: LD_INT 22
30064: PUSH
30065: LD_OWVAR 2
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 21
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 3
30086: PUSH
30087: LD_INT 23
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: LIST
30105: PPUSH
30106: CALL_OW 69
30110: ST_TO_ADDR
// if not tmp then
30111: LD_VAR 0 6
30115: NOT
30116: IFFALSE 30120
// exit ;
30118: GO 30266
// s1 := rand ( 1 , 4 ) ;
30120: LD_ADDR_VAR 0 2
30124: PUSH
30125: LD_INT 1
30127: PPUSH
30128: LD_INT 4
30130: PPUSH
30131: CALL_OW 12
30135: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30136: LD_ADDR_VAR 0 4
30140: PUSH
30141: LD_VAR 0 6
30145: PUSH
30146: LD_INT 1
30148: ARRAY
30149: PPUSH
30150: LD_VAR 0 2
30154: PPUSH
30155: CALL_OW 259
30159: ST_TO_ADDR
// if s1 = 1 then
30160: LD_VAR 0 2
30164: PUSH
30165: LD_INT 1
30167: EQUAL
30168: IFFALSE 30188
// s2 := rand ( 2 , 4 ) else
30170: LD_ADDR_VAR 0 3
30174: PUSH
30175: LD_INT 2
30177: PPUSH
30178: LD_INT 4
30180: PPUSH
30181: CALL_OW 12
30185: ST_TO_ADDR
30186: GO 30196
// s2 := 1 ;
30188: LD_ADDR_VAR 0 3
30192: PUSH
30193: LD_INT 1
30195: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30196: LD_ADDR_VAR 0 5
30200: PUSH
30201: LD_VAR 0 6
30205: PUSH
30206: LD_INT 1
30208: ARRAY
30209: PPUSH
30210: LD_VAR 0 3
30214: PPUSH
30215: CALL_OW 259
30219: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30220: LD_VAR 0 6
30224: PUSH
30225: LD_INT 1
30227: ARRAY
30228: PPUSH
30229: LD_VAR 0 2
30233: PPUSH
30234: LD_VAR 0 5
30238: PPUSH
30239: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30243: LD_VAR 0 6
30247: PUSH
30248: LD_INT 1
30250: ARRAY
30251: PPUSH
30252: LD_VAR 0 3
30256: PPUSH
30257: LD_VAR 0 4
30261: PPUSH
30262: CALL_OW 237
// end ;
30266: PPOPN 6
30268: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30269: LD_EXP 68
30273: PUSH
30274: LD_EXP 115
30278: AND
30279: IFFALSE 30358
30281: GO 30283
30283: DISABLE
30284: LD_INT 0
30286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30287: LD_ADDR_VAR 0 1
30291: PUSH
30292: LD_INT 22
30294: PUSH
30295: LD_OWVAR 2
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 30
30306: PUSH
30307: LD_INT 3
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PPUSH
30318: CALL_OW 69
30322: ST_TO_ADDR
// if not tmp then
30323: LD_VAR 0 1
30327: NOT
30328: IFFALSE 30332
// exit ;
30330: GO 30358
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30332: LD_VAR 0 1
30336: PUSH
30337: LD_INT 1
30339: PPUSH
30340: LD_VAR 0 1
30344: PPUSH
30345: CALL_OW 12
30349: ARRAY
30350: PPUSH
30351: LD_INT 1
30353: PPUSH
30354: CALL_OW 234
// end ;
30358: PPOPN 1
30360: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30361: LD_EXP 68
30365: PUSH
30366: LD_EXP 116
30370: AND
30371: IFFALSE 30483
30373: GO 30375
30375: DISABLE
30376: LD_INT 0
30378: PPUSH
30379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30380: LD_ADDR_VAR 0 2
30384: PUSH
30385: LD_INT 22
30387: PUSH
30388: LD_OWVAR 2
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 2
30399: PUSH
30400: LD_INT 30
30402: PUSH
30403: LD_INT 27
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 30
30412: PUSH
30413: LD_INT 26
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 30
30422: PUSH
30423: LD_INT 28
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PPUSH
30440: CALL_OW 69
30444: ST_TO_ADDR
// if not tmp then
30445: LD_VAR 0 2
30449: NOT
30450: IFFALSE 30454
// exit ;
30452: GO 30483
// for i in tmp do
30454: LD_ADDR_VAR 0 1
30458: PUSH
30459: LD_VAR 0 2
30463: PUSH
30464: FOR_IN
30465: IFFALSE 30481
// SetLives ( i , 1 ) ;
30467: LD_VAR 0 1
30471: PPUSH
30472: LD_INT 1
30474: PPUSH
30475: CALL_OW 234
30479: GO 30464
30481: POP
30482: POP
// end ;
30483: PPOPN 2
30485: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30486: LD_EXP 68
30490: PUSH
30491: LD_EXP 117
30495: AND
30496: IFFALSE 30770
30498: GO 30500
30500: DISABLE
30501: LD_INT 0
30503: PPUSH
30504: PPUSH
30505: PPUSH
// begin i := rand ( 1 , 7 ) ;
30506: LD_ADDR_VAR 0 1
30510: PUSH
30511: LD_INT 1
30513: PPUSH
30514: LD_INT 7
30516: PPUSH
30517: CALL_OW 12
30521: ST_TO_ADDR
// case i of 1 :
30522: LD_VAR 0 1
30526: PUSH
30527: LD_INT 1
30529: DOUBLE
30530: EQUAL
30531: IFTRUE 30535
30533: GO 30545
30535: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30536: LD_STRING earthquake(getX(game), 0, 32)
30538: PPUSH
30539: CALL_OW 559
30543: GO 30770
30545: LD_INT 2
30547: DOUBLE
30548: EQUAL
30549: IFTRUE 30553
30551: GO 30567
30553: POP
// begin ToLua ( displayStucuk(); ) ;
30554: LD_STRING displayStucuk();
30556: PPUSH
30557: CALL_OW 559
// ResetFog ;
30561: CALL_OW 335
// end ; 3 :
30565: GO 30770
30567: LD_INT 3
30569: DOUBLE
30570: EQUAL
30571: IFTRUE 30575
30573: GO 30679
30575: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30576: LD_ADDR_VAR 0 2
30580: PUSH
30581: LD_INT 22
30583: PUSH
30584: LD_OWVAR 2
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 25
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PPUSH
30607: CALL_OW 69
30611: ST_TO_ADDR
// if not tmp then
30612: LD_VAR 0 2
30616: NOT
30617: IFFALSE 30621
// exit ;
30619: GO 30770
// un := tmp [ rand ( 1 , tmp ) ] ;
30621: LD_ADDR_VAR 0 3
30625: PUSH
30626: LD_VAR 0 2
30630: PUSH
30631: LD_INT 1
30633: PPUSH
30634: LD_VAR 0 2
30638: PPUSH
30639: CALL_OW 12
30643: ARRAY
30644: ST_TO_ADDR
// if Crawls ( un ) then
30645: LD_VAR 0 3
30649: PPUSH
30650: CALL_OW 318
30654: IFFALSE 30665
// ComWalk ( un ) ;
30656: LD_VAR 0 3
30660: PPUSH
30661: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30665: LD_VAR 0 3
30669: PPUSH
30670: LD_INT 8
30672: PPUSH
30673: CALL_OW 336
// end ; 4 :
30677: GO 30770
30679: LD_INT 4
30681: DOUBLE
30682: EQUAL
30683: IFTRUE 30687
30685: GO 30748
30687: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30688: LD_ADDR_VAR 0 2
30692: PUSH
30693: LD_INT 22
30695: PUSH
30696: LD_OWVAR 2
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 30
30707: PUSH
30708: LD_INT 29
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PPUSH
30719: CALL_OW 69
30723: ST_TO_ADDR
// if not tmp then
30724: LD_VAR 0 2
30728: NOT
30729: IFFALSE 30733
// exit ;
30731: GO 30770
// DestroyUnit ( tmp [ 1 ] ) ;
30733: LD_VAR 0 2
30737: PUSH
30738: LD_INT 1
30740: ARRAY
30741: PPUSH
30742: CALL_OW 65
// end ; 5 .. 7 :
30746: GO 30770
30748: LD_INT 5
30750: DOUBLE
30751: GREATEREQUAL
30752: IFFALSE 30760
30754: LD_INT 7
30756: DOUBLE
30757: LESSEQUAL
30758: IFTRUE 30762
30760: GO 30769
30762: POP
// StreamSibBomb ; end ;
30763: CALL 27020 0 0
30767: GO 30770
30769: POP
// end ;
30770: PPOPN 3
30772: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30773: LD_EXP 68
30777: PUSH
30778: LD_EXP 118
30782: AND
30783: IFFALSE 30939
30785: GO 30787
30787: DISABLE
30788: LD_INT 0
30790: PPUSH
30791: PPUSH
30792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30793: LD_ADDR_VAR 0 2
30797: PUSH
30798: LD_INT 81
30800: PUSH
30801: LD_OWVAR 2
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 2
30812: PUSH
30813: LD_INT 21
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 21
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: LIST
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PPUSH
30842: CALL_OW 69
30846: ST_TO_ADDR
// if not tmp then
30847: LD_VAR 0 2
30851: NOT
30852: IFFALSE 30856
// exit ;
30854: GO 30939
// p := 0 ;
30856: LD_ADDR_VAR 0 3
30860: PUSH
30861: LD_INT 0
30863: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30864: LD_INT 35
30866: PPUSH
30867: CALL_OW 67
// p := p + 1 ;
30871: LD_ADDR_VAR 0 3
30875: PUSH
30876: LD_VAR 0 3
30880: PUSH
30881: LD_INT 1
30883: PLUS
30884: ST_TO_ADDR
// for i in tmp do
30885: LD_ADDR_VAR 0 1
30889: PUSH
30890: LD_VAR 0 2
30894: PUSH
30895: FOR_IN
30896: IFFALSE 30927
// if GetLives ( i ) < 1000 then
30898: LD_VAR 0 1
30902: PPUSH
30903: CALL_OW 256
30907: PUSH
30908: LD_INT 1000
30910: LESS
30911: IFFALSE 30925
// SetLives ( i , 1000 ) ;
30913: LD_VAR 0 1
30917: PPUSH
30918: LD_INT 1000
30920: PPUSH
30921: CALL_OW 234
30925: GO 30895
30927: POP
30928: POP
// until p > 20 ;
30929: LD_VAR 0 3
30933: PUSH
30934: LD_INT 20
30936: GREATER
30937: IFFALSE 30864
// end ;
30939: PPOPN 3
30941: END
// every 0 0$1 trigger StreamModeActive and sTime do
30942: LD_EXP 68
30946: PUSH
30947: LD_EXP 119
30951: AND
30952: IFFALSE 30987
30954: GO 30956
30956: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30957: LD_INT 28
30959: PPUSH
30960: LD_OWVAR 2
30964: PPUSH
30965: LD_INT 2
30967: PPUSH
30968: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30972: LD_INT 30
30974: PPUSH
30975: LD_OWVAR 2
30979: PPUSH
30980: LD_INT 2
30982: PPUSH
30983: CALL_OW 322
// end ;
30987: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30988: LD_EXP 68
30992: PUSH
30993: LD_EXP 120
30997: AND
30998: IFFALSE 31119
31000: GO 31002
31002: DISABLE
31003: LD_INT 0
31005: PPUSH
31006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31007: LD_ADDR_VAR 0 2
31011: PUSH
31012: LD_INT 22
31014: PUSH
31015: LD_OWVAR 2
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 21
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 3
31036: PUSH
31037: LD_INT 23
31039: PUSH
31040: LD_INT 0
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: LIST
31055: PPUSH
31056: CALL_OW 69
31060: ST_TO_ADDR
// if not tmp then
31061: LD_VAR 0 2
31065: NOT
31066: IFFALSE 31070
// exit ;
31068: GO 31119
// for i in tmp do
31070: LD_ADDR_VAR 0 1
31074: PUSH
31075: LD_VAR 0 2
31079: PUSH
31080: FOR_IN
31081: IFFALSE 31117
// begin if Crawls ( i ) then
31083: LD_VAR 0 1
31087: PPUSH
31088: CALL_OW 318
31092: IFFALSE 31103
// ComWalk ( i ) ;
31094: LD_VAR 0 1
31098: PPUSH
31099: CALL_OW 138
// SetClass ( i , 2 ) ;
31103: LD_VAR 0 1
31107: PPUSH
31108: LD_INT 2
31110: PPUSH
31111: CALL_OW 336
// end ;
31115: GO 31080
31117: POP
31118: POP
// end ;
31119: PPOPN 2
31121: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31122: LD_EXP 68
31126: PUSH
31127: LD_EXP 121
31131: AND
31132: IFFALSE 31413
31134: GO 31136
31136: DISABLE
31137: LD_INT 0
31139: PPUSH
31140: PPUSH
31141: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31142: LD_OWVAR 2
31146: PPUSH
31147: LD_INT 9
31149: PPUSH
31150: LD_INT 1
31152: PPUSH
31153: LD_INT 1
31155: PPUSH
31156: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31160: LD_INT 9
31162: PPUSH
31163: LD_OWVAR 2
31167: PPUSH
31168: CALL_OW 343
// uc_side := 9 ;
31172: LD_ADDR_OWVAR 20
31176: PUSH
31177: LD_INT 9
31179: ST_TO_ADDR
// uc_nation := 2 ;
31180: LD_ADDR_OWVAR 21
31184: PUSH
31185: LD_INT 2
31187: ST_TO_ADDR
// hc_name := Dark Warrior ;
31188: LD_ADDR_OWVAR 26
31192: PUSH
31193: LD_STRING Dark Warrior
31195: ST_TO_ADDR
// hc_gallery :=  ;
31196: LD_ADDR_OWVAR 33
31200: PUSH
31201: LD_STRING 
31203: ST_TO_ADDR
// hc_noskilllimit := true ;
31204: LD_ADDR_OWVAR 76
31208: PUSH
31209: LD_INT 1
31211: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31212: LD_ADDR_OWVAR 31
31216: PUSH
31217: LD_INT 30
31219: PUSH
31220: LD_INT 30
31222: PUSH
31223: LD_INT 30
31225: PUSH
31226: LD_INT 30
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: ST_TO_ADDR
// un := CreateHuman ;
31235: LD_ADDR_VAR 0 3
31239: PUSH
31240: CALL_OW 44
31244: ST_TO_ADDR
// hc_noskilllimit := false ;
31245: LD_ADDR_OWVAR 76
31249: PUSH
31250: LD_INT 0
31252: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31253: LD_VAR 0 3
31257: PPUSH
31258: LD_INT 1
31260: PPUSH
31261: CALL_OW 51
// p := 0 ;
31265: LD_ADDR_VAR 0 2
31269: PUSH
31270: LD_INT 0
31272: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31273: LD_INT 35
31275: PPUSH
31276: CALL_OW 67
// p := p + 1 ;
31280: LD_ADDR_VAR 0 2
31284: PUSH
31285: LD_VAR 0 2
31289: PUSH
31290: LD_INT 1
31292: PLUS
31293: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31294: LD_VAR 0 3
31298: PPUSH
31299: CALL_OW 256
31303: PUSH
31304: LD_INT 1000
31306: LESS
31307: IFFALSE 31321
// SetLives ( un , 1000 ) ;
31309: LD_VAR 0 3
31313: PPUSH
31314: LD_INT 1000
31316: PPUSH
31317: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31321: LD_VAR 0 3
31325: PPUSH
31326: LD_INT 81
31328: PUSH
31329: LD_OWVAR 2
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 91
31340: PUSH
31341: LD_VAR 0 3
31345: PUSH
31346: LD_INT 30
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: LIST
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PPUSH
31358: CALL_OW 69
31362: PPUSH
31363: LD_VAR 0 3
31367: PPUSH
31368: CALL_OW 74
31372: PPUSH
31373: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
31377: LD_VAR 0 2
31381: PUSH
31382: LD_INT 60
31384: GREATER
31385: PUSH
31386: LD_VAR 0 3
31390: PPUSH
31391: CALL_OW 301
31395: OR
31396: IFFALSE 31273
// if un then
31398: LD_VAR 0 3
31402: IFFALSE 31413
// RemoveUnit ( un ) ;
31404: LD_VAR 0 3
31408: PPUSH
31409: CALL_OW 64
// end ;
31413: PPOPN 3
31415: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31416: LD_INT 0
31418: PPUSH
// case cmd of 301 :
31419: LD_VAR 0 1
31423: PUSH
31424: LD_INT 301
31426: DOUBLE
31427: EQUAL
31428: IFTRUE 31432
31430: GO 31464
31432: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31433: LD_VAR 0 6
31437: PPUSH
31438: LD_VAR 0 7
31442: PPUSH
31443: LD_VAR 0 8
31447: PPUSH
31448: LD_VAR 0 4
31452: PPUSH
31453: LD_VAR 0 5
31457: PPUSH
31458: CALL 32665 0 5
31462: GO 31585
31464: LD_INT 302
31466: DOUBLE
31467: EQUAL
31468: IFTRUE 31472
31470: GO 31509
31472: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31473: LD_VAR 0 6
31477: PPUSH
31478: LD_VAR 0 7
31482: PPUSH
31483: LD_VAR 0 8
31487: PPUSH
31488: LD_VAR 0 9
31492: PPUSH
31493: LD_VAR 0 4
31497: PPUSH
31498: LD_VAR 0 5
31502: PPUSH
31503: CALL 32756 0 6
31507: GO 31585
31509: LD_INT 303
31511: DOUBLE
31512: EQUAL
31513: IFTRUE 31517
31515: GO 31554
31517: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31518: LD_VAR 0 6
31522: PPUSH
31523: LD_VAR 0 7
31527: PPUSH
31528: LD_VAR 0 8
31532: PPUSH
31533: LD_VAR 0 9
31537: PPUSH
31538: LD_VAR 0 4
31542: PPUSH
31543: LD_VAR 0 5
31547: PPUSH
31548: CALL 31590 0 6
31552: GO 31585
31554: LD_INT 304
31556: DOUBLE
31557: EQUAL
31558: IFTRUE 31562
31560: GO 31584
31562: POP
// hHackTeleport ( unit , x , y ) ; end ;
31563: LD_VAR 0 2
31567: PPUSH
31568: LD_VAR 0 4
31572: PPUSH
31573: LD_VAR 0 5
31577: PPUSH
31578: CALL 33349 0 3
31582: GO 31585
31584: POP
// end ;
31585: LD_VAR 0 12
31589: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31590: LD_INT 0
31592: PPUSH
31593: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31594: LD_VAR 0 1
31598: PUSH
31599: LD_INT 1
31601: LESS
31602: PUSH
31603: LD_VAR 0 1
31607: PUSH
31608: LD_INT 3
31610: GREATER
31611: OR
31612: PUSH
31613: LD_VAR 0 5
31617: PPUSH
31618: LD_VAR 0 6
31622: PPUSH
31623: CALL_OW 428
31627: OR
31628: IFFALSE 31632
// exit ;
31630: GO 32352
// uc_side := your_side ;
31632: LD_ADDR_OWVAR 20
31636: PUSH
31637: LD_OWVAR 2
31641: ST_TO_ADDR
// uc_nation := nation ;
31642: LD_ADDR_OWVAR 21
31646: PUSH
31647: LD_VAR 0 1
31651: ST_TO_ADDR
// bc_level = 1 ;
31652: LD_ADDR_OWVAR 43
31656: PUSH
31657: LD_INT 1
31659: ST_TO_ADDR
// case btype of 1 :
31660: LD_VAR 0 2
31664: PUSH
31665: LD_INT 1
31667: DOUBLE
31668: EQUAL
31669: IFTRUE 31673
31671: GO 31684
31673: POP
// bc_type := b_depot ; 2 :
31674: LD_ADDR_OWVAR 42
31678: PUSH
31679: LD_INT 0
31681: ST_TO_ADDR
31682: GO 32296
31684: LD_INT 2
31686: DOUBLE
31687: EQUAL
31688: IFTRUE 31692
31690: GO 31703
31692: POP
// bc_type := b_warehouse ; 3 :
31693: LD_ADDR_OWVAR 42
31697: PUSH
31698: LD_INT 1
31700: ST_TO_ADDR
31701: GO 32296
31703: LD_INT 3
31705: DOUBLE
31706: EQUAL
31707: IFTRUE 31711
31709: GO 31722
31711: POP
// bc_type := b_lab ; 4 .. 9 :
31712: LD_ADDR_OWVAR 42
31716: PUSH
31717: LD_INT 6
31719: ST_TO_ADDR
31720: GO 32296
31722: LD_INT 4
31724: DOUBLE
31725: GREATEREQUAL
31726: IFFALSE 31734
31728: LD_INT 9
31730: DOUBLE
31731: LESSEQUAL
31732: IFTRUE 31736
31734: GO 31788
31736: POP
// begin bc_type := b_lab_half ;
31737: LD_ADDR_OWVAR 42
31741: PUSH
31742: LD_INT 7
31744: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31745: LD_ADDR_OWVAR 44
31749: PUSH
31750: LD_INT 10
31752: PUSH
31753: LD_INT 11
31755: PUSH
31756: LD_INT 12
31758: PUSH
31759: LD_INT 15
31761: PUSH
31762: LD_INT 14
31764: PUSH
31765: LD_INT 13
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: PUSH
31776: LD_VAR 0 2
31780: PUSH
31781: LD_INT 3
31783: MINUS
31784: ARRAY
31785: ST_TO_ADDR
// end ; 10 .. 13 :
31786: GO 32296
31788: LD_INT 10
31790: DOUBLE
31791: GREATEREQUAL
31792: IFFALSE 31800
31794: LD_INT 13
31796: DOUBLE
31797: LESSEQUAL
31798: IFTRUE 31802
31800: GO 31879
31802: POP
// begin bc_type := b_lab_full ;
31803: LD_ADDR_OWVAR 42
31807: PUSH
31808: LD_INT 8
31810: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31811: LD_ADDR_OWVAR 44
31815: PUSH
31816: LD_INT 10
31818: PUSH
31819: LD_INT 12
31821: PUSH
31822: LD_INT 14
31824: PUSH
31825: LD_INT 13
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: PUSH
31834: LD_VAR 0 2
31838: PUSH
31839: LD_INT 9
31841: MINUS
31842: ARRAY
31843: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31844: LD_ADDR_OWVAR 45
31848: PUSH
31849: LD_INT 11
31851: PUSH
31852: LD_INT 15
31854: PUSH
31855: LD_INT 12
31857: PUSH
31858: LD_INT 15
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: PUSH
31867: LD_VAR 0 2
31871: PUSH
31872: LD_INT 9
31874: MINUS
31875: ARRAY
31876: ST_TO_ADDR
// end ; 14 :
31877: GO 32296
31879: LD_INT 14
31881: DOUBLE
31882: EQUAL
31883: IFTRUE 31887
31885: GO 31898
31887: POP
// bc_type := b_workshop ; 15 :
31888: LD_ADDR_OWVAR 42
31892: PUSH
31893: LD_INT 2
31895: ST_TO_ADDR
31896: GO 32296
31898: LD_INT 15
31900: DOUBLE
31901: EQUAL
31902: IFTRUE 31906
31904: GO 31917
31906: POP
// bc_type := b_factory ; 16 :
31907: LD_ADDR_OWVAR 42
31911: PUSH
31912: LD_INT 3
31914: ST_TO_ADDR
31915: GO 32296
31917: LD_INT 16
31919: DOUBLE
31920: EQUAL
31921: IFTRUE 31925
31923: GO 31936
31925: POP
// bc_type := b_ext_gun ; 17 :
31926: LD_ADDR_OWVAR 42
31930: PUSH
31931: LD_INT 17
31933: ST_TO_ADDR
31934: GO 32296
31936: LD_INT 17
31938: DOUBLE
31939: EQUAL
31940: IFTRUE 31944
31942: GO 31972
31944: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31945: LD_ADDR_OWVAR 42
31949: PUSH
31950: LD_INT 19
31952: PUSH
31953: LD_INT 23
31955: PUSH
31956: LD_INT 19
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: PUSH
31964: LD_VAR 0 1
31968: ARRAY
31969: ST_TO_ADDR
31970: GO 32296
31972: LD_INT 18
31974: DOUBLE
31975: EQUAL
31976: IFTRUE 31980
31978: GO 31991
31980: POP
// bc_type := b_ext_radar ; 19 :
31981: LD_ADDR_OWVAR 42
31985: PUSH
31986: LD_INT 20
31988: ST_TO_ADDR
31989: GO 32296
31991: LD_INT 19
31993: DOUBLE
31994: EQUAL
31995: IFTRUE 31999
31997: GO 32010
31999: POP
// bc_type := b_ext_radio ; 20 :
32000: LD_ADDR_OWVAR 42
32004: PUSH
32005: LD_INT 22
32007: ST_TO_ADDR
32008: GO 32296
32010: LD_INT 20
32012: DOUBLE
32013: EQUAL
32014: IFTRUE 32018
32016: GO 32029
32018: POP
// bc_type := b_ext_siberium ; 21 :
32019: LD_ADDR_OWVAR 42
32023: PUSH
32024: LD_INT 21
32026: ST_TO_ADDR
32027: GO 32296
32029: LD_INT 21
32031: DOUBLE
32032: EQUAL
32033: IFTRUE 32037
32035: GO 32048
32037: POP
// bc_type := b_ext_computer ; 22 :
32038: LD_ADDR_OWVAR 42
32042: PUSH
32043: LD_INT 24
32045: ST_TO_ADDR
32046: GO 32296
32048: LD_INT 22
32050: DOUBLE
32051: EQUAL
32052: IFTRUE 32056
32054: GO 32067
32056: POP
// bc_type := b_ext_track ; 23 :
32057: LD_ADDR_OWVAR 42
32061: PUSH
32062: LD_INT 16
32064: ST_TO_ADDR
32065: GO 32296
32067: LD_INT 23
32069: DOUBLE
32070: EQUAL
32071: IFTRUE 32075
32073: GO 32086
32075: POP
// bc_type := b_ext_laser ; 24 :
32076: LD_ADDR_OWVAR 42
32080: PUSH
32081: LD_INT 25
32083: ST_TO_ADDR
32084: GO 32296
32086: LD_INT 24
32088: DOUBLE
32089: EQUAL
32090: IFTRUE 32094
32092: GO 32105
32094: POP
// bc_type := b_control_tower ; 25 :
32095: LD_ADDR_OWVAR 42
32099: PUSH
32100: LD_INT 36
32102: ST_TO_ADDR
32103: GO 32296
32105: LD_INT 25
32107: DOUBLE
32108: EQUAL
32109: IFTRUE 32113
32111: GO 32124
32113: POP
// bc_type := b_breastwork ; 26 :
32114: LD_ADDR_OWVAR 42
32118: PUSH
32119: LD_INT 31
32121: ST_TO_ADDR
32122: GO 32296
32124: LD_INT 26
32126: DOUBLE
32127: EQUAL
32128: IFTRUE 32132
32130: GO 32143
32132: POP
// bc_type := b_bunker ; 27 :
32133: LD_ADDR_OWVAR 42
32137: PUSH
32138: LD_INT 32
32140: ST_TO_ADDR
32141: GO 32296
32143: LD_INT 27
32145: DOUBLE
32146: EQUAL
32147: IFTRUE 32151
32149: GO 32162
32151: POP
// bc_type := b_turret ; 28 :
32152: LD_ADDR_OWVAR 42
32156: PUSH
32157: LD_INT 33
32159: ST_TO_ADDR
32160: GO 32296
32162: LD_INT 28
32164: DOUBLE
32165: EQUAL
32166: IFTRUE 32170
32168: GO 32181
32170: POP
// bc_type := b_armoury ; 29 :
32171: LD_ADDR_OWVAR 42
32175: PUSH
32176: LD_INT 4
32178: ST_TO_ADDR
32179: GO 32296
32181: LD_INT 29
32183: DOUBLE
32184: EQUAL
32185: IFTRUE 32189
32187: GO 32200
32189: POP
// bc_type := b_barracks ; 30 :
32190: LD_ADDR_OWVAR 42
32194: PUSH
32195: LD_INT 5
32197: ST_TO_ADDR
32198: GO 32296
32200: LD_INT 30
32202: DOUBLE
32203: EQUAL
32204: IFTRUE 32208
32206: GO 32219
32208: POP
// bc_type := b_solar_power ; 31 :
32209: LD_ADDR_OWVAR 42
32213: PUSH
32214: LD_INT 27
32216: ST_TO_ADDR
32217: GO 32296
32219: LD_INT 31
32221: DOUBLE
32222: EQUAL
32223: IFTRUE 32227
32225: GO 32238
32227: POP
// bc_type := b_oil_power ; 32 :
32228: LD_ADDR_OWVAR 42
32232: PUSH
32233: LD_INT 26
32235: ST_TO_ADDR
32236: GO 32296
32238: LD_INT 32
32240: DOUBLE
32241: EQUAL
32242: IFTRUE 32246
32244: GO 32257
32246: POP
// bc_type := b_siberite_power ; 33 :
32247: LD_ADDR_OWVAR 42
32251: PUSH
32252: LD_INT 28
32254: ST_TO_ADDR
32255: GO 32296
32257: LD_INT 33
32259: DOUBLE
32260: EQUAL
32261: IFTRUE 32265
32263: GO 32276
32265: POP
// bc_type := b_oil_mine ; 34 :
32266: LD_ADDR_OWVAR 42
32270: PUSH
32271: LD_INT 29
32273: ST_TO_ADDR
32274: GO 32296
32276: LD_INT 34
32278: DOUBLE
32279: EQUAL
32280: IFTRUE 32284
32282: GO 32295
32284: POP
// bc_type := b_siberite_mine ; end ;
32285: LD_ADDR_OWVAR 42
32289: PUSH
32290: LD_INT 30
32292: ST_TO_ADDR
32293: GO 32296
32295: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32296: LD_ADDR_VAR 0 8
32300: PUSH
32301: LD_VAR 0 5
32305: PPUSH
32306: LD_VAR 0 6
32310: PPUSH
32311: LD_VAR 0 3
32315: PPUSH
32316: CALL_OW 47
32320: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32321: LD_OWVAR 42
32325: PUSH
32326: LD_INT 32
32328: PUSH
32329: LD_INT 33
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: IN
32336: IFFALSE 32352
// PlaceWeaponTurret ( b , weapon ) ;
32338: LD_VAR 0 8
32342: PPUSH
32343: LD_VAR 0 4
32347: PPUSH
32348: CALL_OW 431
// end ;
32352: LD_VAR 0 7
32356: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32357: LD_INT 0
32359: PPUSH
32360: PPUSH
32361: PPUSH
32362: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32363: LD_ADDR_VAR 0 4
32367: PUSH
32368: LD_INT 22
32370: PUSH
32371: LD_OWVAR 2
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 2
32382: PUSH
32383: LD_INT 30
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 30
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PPUSH
32412: CALL_OW 69
32416: ST_TO_ADDR
// if not tmp then
32417: LD_VAR 0 4
32421: NOT
32422: IFFALSE 32426
// exit ;
32424: GO 32485
// for i in tmp do
32426: LD_ADDR_VAR 0 2
32430: PUSH
32431: LD_VAR 0 4
32435: PUSH
32436: FOR_IN
32437: IFFALSE 32483
// for j = 1 to 3 do
32439: LD_ADDR_VAR 0 3
32443: PUSH
32444: DOUBLE
32445: LD_INT 1
32447: DEC
32448: ST_TO_ADDR
32449: LD_INT 3
32451: PUSH
32452: FOR_TO
32453: IFFALSE 32479
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32455: LD_VAR 0 2
32459: PPUSH
32460: CALL_OW 274
32464: PPUSH
32465: LD_VAR 0 3
32469: PPUSH
32470: LD_INT 99999
32472: PPUSH
32473: CALL_OW 277
32477: GO 32452
32479: POP
32480: POP
32481: GO 32436
32483: POP
32484: POP
// end ;
32485: LD_VAR 0 1
32489: RET
// export function hHackSetLevel10 ; var i , j ; begin
32490: LD_INT 0
32492: PPUSH
32493: PPUSH
32494: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32495: LD_ADDR_VAR 0 2
32499: PUSH
32500: LD_INT 21
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PPUSH
32510: CALL_OW 69
32514: PUSH
32515: FOR_IN
32516: IFFALSE 32568
// if IsSelected ( i ) then
32518: LD_VAR 0 2
32522: PPUSH
32523: CALL_OW 306
32527: IFFALSE 32566
// begin for j := 1 to 4 do
32529: LD_ADDR_VAR 0 3
32533: PUSH
32534: DOUBLE
32535: LD_INT 1
32537: DEC
32538: ST_TO_ADDR
32539: LD_INT 4
32541: PUSH
32542: FOR_TO
32543: IFFALSE 32564
// SetSkill ( i , j , 10 ) ;
32545: LD_VAR 0 2
32549: PPUSH
32550: LD_VAR 0 3
32554: PPUSH
32555: LD_INT 10
32557: PPUSH
32558: CALL_OW 237
32562: GO 32542
32564: POP
32565: POP
// end ;
32566: GO 32515
32568: POP
32569: POP
// end ;
32570: LD_VAR 0 1
32574: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32575: LD_INT 0
32577: PPUSH
32578: PPUSH
32579: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32580: LD_ADDR_VAR 0 2
32584: PUSH
32585: LD_INT 22
32587: PUSH
32588: LD_OWVAR 2
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 21
32599: PUSH
32600: LD_INT 1
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PPUSH
32611: CALL_OW 69
32615: PUSH
32616: FOR_IN
32617: IFFALSE 32658
// begin for j := 1 to 4 do
32619: LD_ADDR_VAR 0 3
32623: PUSH
32624: DOUBLE
32625: LD_INT 1
32627: DEC
32628: ST_TO_ADDR
32629: LD_INT 4
32631: PUSH
32632: FOR_TO
32633: IFFALSE 32654
// SetSkill ( i , j , 10 ) ;
32635: LD_VAR 0 2
32639: PPUSH
32640: LD_VAR 0 3
32644: PPUSH
32645: LD_INT 10
32647: PPUSH
32648: CALL_OW 237
32652: GO 32632
32654: POP
32655: POP
// end ;
32656: GO 32616
32658: POP
32659: POP
// end ;
32660: LD_VAR 0 1
32664: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32665: LD_INT 0
32667: PPUSH
// uc_side := your_side ;
32668: LD_ADDR_OWVAR 20
32672: PUSH
32673: LD_OWVAR 2
32677: ST_TO_ADDR
// uc_nation := nation ;
32678: LD_ADDR_OWVAR 21
32682: PUSH
32683: LD_VAR 0 1
32687: ST_TO_ADDR
// InitHc ;
32688: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32692: LD_INT 0
32694: PPUSH
32695: LD_VAR 0 2
32699: PPUSH
32700: LD_VAR 0 3
32704: PPUSH
32705: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32709: LD_VAR 0 4
32713: PPUSH
32714: LD_VAR 0 5
32718: PPUSH
32719: CALL_OW 428
32723: PUSH
32724: LD_INT 0
32726: EQUAL
32727: IFFALSE 32751
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32729: CALL_OW 44
32733: PPUSH
32734: LD_VAR 0 4
32738: PPUSH
32739: LD_VAR 0 5
32743: PPUSH
32744: LD_INT 1
32746: PPUSH
32747: CALL_OW 48
// end ;
32751: LD_VAR 0 6
32755: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32756: LD_INT 0
32758: PPUSH
32759: PPUSH
// uc_side := your_side ;
32760: LD_ADDR_OWVAR 20
32764: PUSH
32765: LD_OWVAR 2
32769: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32770: LD_VAR 0 1
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: LD_INT 2
32780: PUSH
32781: LD_INT 3
32783: PUSH
32784: LD_INT 4
32786: PUSH
32787: LD_INT 5
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: IN
32797: IFFALSE 32809
// uc_nation := nation_american else
32799: LD_ADDR_OWVAR 21
32803: PUSH
32804: LD_INT 1
32806: ST_TO_ADDR
32807: GO 32852
// if chassis in [ 11 , 12 , 13 , 14 ] then
32809: LD_VAR 0 1
32813: PUSH
32814: LD_INT 11
32816: PUSH
32817: LD_INT 12
32819: PUSH
32820: LD_INT 13
32822: PUSH
32823: LD_INT 14
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: IN
32832: IFFALSE 32844
// uc_nation := nation_arabian else
32834: LD_ADDR_OWVAR 21
32838: PUSH
32839: LD_INT 2
32841: ST_TO_ADDR
32842: GO 32852
// uc_nation := nation_russian ;
32844: LD_ADDR_OWVAR 21
32848: PUSH
32849: LD_INT 3
32851: ST_TO_ADDR
// vc_chassis := chassis ;
32852: LD_ADDR_OWVAR 37
32856: PUSH
32857: LD_VAR 0 1
32861: ST_TO_ADDR
// vc_engine := engine ;
32862: LD_ADDR_OWVAR 39
32866: PUSH
32867: LD_VAR 0 2
32871: ST_TO_ADDR
// vc_control := control ;
32872: LD_ADDR_OWVAR 38
32876: PUSH
32877: LD_VAR 0 3
32881: ST_TO_ADDR
// vc_weapon := weapon ;
32882: LD_ADDR_OWVAR 40
32886: PUSH
32887: LD_VAR 0 4
32891: ST_TO_ADDR
// un := CreateVehicle ;
32892: LD_ADDR_VAR 0 8
32896: PUSH
32897: CALL_OW 45
32901: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32902: LD_VAR 0 8
32906: PPUSH
32907: LD_INT 0
32909: PPUSH
32910: LD_INT 5
32912: PPUSH
32913: CALL_OW 12
32917: PPUSH
32918: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32922: LD_VAR 0 8
32926: PPUSH
32927: LD_VAR 0 5
32931: PPUSH
32932: LD_VAR 0 6
32936: PPUSH
32937: LD_INT 1
32939: PPUSH
32940: CALL_OW 48
// end ;
32944: LD_VAR 0 7
32948: RET
// export hInvincible ; every 1 do
32949: GO 32951
32951: DISABLE
// hInvincible := [ ] ;
32952: LD_ADDR_EXP 122
32956: PUSH
32957: EMPTY
32958: ST_TO_ADDR
32959: END
// every 10 do var i ;
32960: GO 32962
32962: DISABLE
32963: LD_INT 0
32965: PPUSH
// begin enable ;
32966: ENABLE
// if not hInvincible then
32967: LD_EXP 122
32971: NOT
32972: IFFALSE 32976
// exit ;
32974: GO 33020
// for i in hInvincible do
32976: LD_ADDR_VAR 0 1
32980: PUSH
32981: LD_EXP 122
32985: PUSH
32986: FOR_IN
32987: IFFALSE 33018
// if GetLives ( i ) < 1000 then
32989: LD_VAR 0 1
32993: PPUSH
32994: CALL_OW 256
32998: PUSH
32999: LD_INT 1000
33001: LESS
33002: IFFALSE 33016
// SetLives ( i , 1000 ) ;
33004: LD_VAR 0 1
33008: PPUSH
33009: LD_INT 1000
33011: PPUSH
33012: CALL_OW 234
33016: GO 32986
33018: POP
33019: POP
// end ;
33020: PPOPN 1
33022: END
// export function hHackInvincible ; var i ; begin
33023: LD_INT 0
33025: PPUSH
33026: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33027: LD_ADDR_VAR 0 2
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: LD_INT 21
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 21
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: PPUSH
33060: CALL_OW 69
33064: PUSH
33065: FOR_IN
33066: IFFALSE 33127
// if IsSelected ( i ) then
33068: LD_VAR 0 2
33072: PPUSH
33073: CALL_OW 306
33077: IFFALSE 33125
// begin if i in hInvincible then
33079: LD_VAR 0 2
33083: PUSH
33084: LD_EXP 122
33088: IN
33089: IFFALSE 33109
// hInvincible := hInvincible diff i else
33091: LD_ADDR_EXP 122
33095: PUSH
33096: LD_EXP 122
33100: PUSH
33101: LD_VAR 0 2
33105: DIFF
33106: ST_TO_ADDR
33107: GO 33125
// hInvincible := hInvincible union i ;
33109: LD_ADDR_EXP 122
33113: PUSH
33114: LD_EXP 122
33118: PUSH
33119: LD_VAR 0 2
33123: UNION
33124: ST_TO_ADDR
// end ;
33125: GO 33065
33127: POP
33128: POP
// end ;
33129: LD_VAR 0 1
33133: RET
// export function hHackInvisible ; var i , j ; begin
33134: LD_INT 0
33136: PPUSH
33137: PPUSH
33138: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33139: LD_ADDR_VAR 0 2
33143: PUSH
33144: LD_INT 21
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PPUSH
33154: CALL_OW 69
33158: PUSH
33159: FOR_IN
33160: IFFALSE 33184
// if IsSelected ( i ) then
33162: LD_VAR 0 2
33166: PPUSH
33167: CALL_OW 306
33171: IFFALSE 33182
// ComForceInvisible ( i ) ;
33173: LD_VAR 0 2
33177: PPUSH
33178: CALL_OW 496
33182: GO 33159
33184: POP
33185: POP
// end ;
33186: LD_VAR 0 1
33190: RET
// export function hHackChangeYourSide ; begin
33191: LD_INT 0
33193: PPUSH
// if your_side = 8 then
33194: LD_OWVAR 2
33198: PUSH
33199: LD_INT 8
33201: EQUAL
33202: IFFALSE 33214
// your_side := 0 else
33204: LD_ADDR_OWVAR 2
33208: PUSH
33209: LD_INT 0
33211: ST_TO_ADDR
33212: GO 33228
// your_side := your_side + 1 ;
33214: LD_ADDR_OWVAR 2
33218: PUSH
33219: LD_OWVAR 2
33223: PUSH
33224: LD_INT 1
33226: PLUS
33227: ST_TO_ADDR
// end ;
33228: LD_VAR 0 1
33232: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33233: LD_INT 0
33235: PPUSH
33236: PPUSH
33237: PPUSH
// for i in all_units do
33238: LD_ADDR_VAR 0 2
33242: PUSH
33243: LD_OWVAR 3
33247: PUSH
33248: FOR_IN
33249: IFFALSE 33327
// if IsSelected ( i ) then
33251: LD_VAR 0 2
33255: PPUSH
33256: CALL_OW 306
33260: IFFALSE 33325
// begin j := GetSide ( i ) ;
33262: LD_ADDR_VAR 0 3
33266: PUSH
33267: LD_VAR 0 2
33271: PPUSH
33272: CALL_OW 255
33276: ST_TO_ADDR
// if j = 8 then
33277: LD_VAR 0 3
33281: PUSH
33282: LD_INT 8
33284: EQUAL
33285: IFFALSE 33297
// j := 0 else
33287: LD_ADDR_VAR 0 3
33291: PUSH
33292: LD_INT 0
33294: ST_TO_ADDR
33295: GO 33311
// j := j + 1 ;
33297: LD_ADDR_VAR 0 3
33301: PUSH
33302: LD_VAR 0 3
33306: PUSH
33307: LD_INT 1
33309: PLUS
33310: ST_TO_ADDR
// SetSide ( i , j ) ;
33311: LD_VAR 0 2
33315: PPUSH
33316: LD_VAR 0 3
33320: PPUSH
33321: CALL_OW 235
// end ;
33325: GO 33248
33327: POP
33328: POP
// end ;
33329: LD_VAR 0 1
33333: RET
// export function hHackFog ; begin
33334: LD_INT 0
33336: PPUSH
// FogOff ( true ) ;
33337: LD_INT 1
33339: PPUSH
33340: CALL_OW 344
// end ;
33344: LD_VAR 0 1
33348: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33349: LD_INT 0
33351: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33352: LD_VAR 0 1
33356: PPUSH
33357: LD_VAR 0 2
33361: PPUSH
33362: LD_VAR 0 3
33366: PPUSH
33367: LD_INT 1
33369: PPUSH
33370: LD_INT 1
33372: PPUSH
33373: CALL_OW 483
// CenterOnXY ( x , y ) ;
33377: LD_VAR 0 2
33381: PPUSH
33382: LD_VAR 0 3
33386: PPUSH
33387: CALL_OW 84
// end ; end_of_file
33391: LD_VAR 0 4
33395: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33396: LD_INT 0
33398: PPUSH
33399: PPUSH
33400: PPUSH
33401: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33402: LD_VAR 0 1
33406: PPUSH
33407: CALL_OW 264
33411: PUSH
33412: LD_EXP 53
33416: EQUAL
33417: IFFALSE 33489
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33419: LD_INT 68
33421: PPUSH
33422: LD_VAR 0 1
33426: PPUSH
33427: CALL_OW 255
33431: PPUSH
33432: CALL_OW 321
33436: PUSH
33437: LD_INT 2
33439: EQUAL
33440: IFFALSE 33452
// eff := 70 else
33442: LD_ADDR_VAR 0 4
33446: PUSH
33447: LD_INT 70
33449: ST_TO_ADDR
33450: GO 33460
// eff := 30 ;
33452: LD_ADDR_VAR 0 4
33456: PUSH
33457: LD_INT 30
33459: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33460: LD_VAR 0 1
33464: PPUSH
33465: CALL_OW 250
33469: PPUSH
33470: LD_VAR 0 1
33474: PPUSH
33475: CALL_OW 251
33479: PPUSH
33480: LD_VAR 0 4
33484: PPUSH
33485: CALL_OW 495
// end ; end ;
33489: LD_VAR 0 2
33493: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33494: LD_INT 0
33496: PPUSH
// end ;
33497: LD_VAR 0 4
33501: RET
// export function SOS_Command ( cmd ) ; begin
33502: LD_INT 0
33504: PPUSH
// end ;
33505: LD_VAR 0 2
33509: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33510: LD_INT 0
33512: PPUSH
// if cmd = 121 then
33513: LD_VAR 0 1
33517: PUSH
33518: LD_INT 121
33520: EQUAL
33521: IFFALSE 33523
// end ;
33523: LD_VAR 0 6
33527: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33528: LD_INT 0
33530: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33531: LD_VAR 0 1
33535: PUSH
33536: LD_INT 250
33538: EQUAL
33539: PUSH
33540: LD_VAR 0 2
33544: PPUSH
33545: CALL_OW 264
33549: PUSH
33550: LD_EXP 56
33554: EQUAL
33555: AND
33556: IFFALSE 33577
// MinerPlaceMine ( unit , x , y ) ;
33558: LD_VAR 0 2
33562: PPUSH
33563: LD_VAR 0 4
33567: PPUSH
33568: LD_VAR 0 5
33572: PPUSH
33573: CALL 35926 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33577: LD_VAR 0 1
33581: PUSH
33582: LD_INT 251
33584: EQUAL
33585: PUSH
33586: LD_VAR 0 2
33590: PPUSH
33591: CALL_OW 264
33595: PUSH
33596: LD_EXP 56
33600: EQUAL
33601: AND
33602: IFFALSE 33623
// MinerDetonateMine ( unit , x , y ) ;
33604: LD_VAR 0 2
33608: PPUSH
33609: LD_VAR 0 4
33613: PPUSH
33614: LD_VAR 0 5
33618: PPUSH
33619: CALL 36203 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33623: LD_VAR 0 1
33627: PUSH
33628: LD_INT 252
33630: EQUAL
33631: PUSH
33632: LD_VAR 0 2
33636: PPUSH
33637: CALL_OW 264
33641: PUSH
33642: LD_EXP 56
33646: EQUAL
33647: AND
33648: IFFALSE 33669
// MinerCreateMinefield ( unit , x , y ) ;
33650: LD_VAR 0 2
33654: PPUSH
33655: LD_VAR 0 4
33659: PPUSH
33660: LD_VAR 0 5
33664: PPUSH
33665: CALL 36620 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33669: LD_VAR 0 1
33673: PUSH
33674: LD_INT 253
33676: EQUAL
33677: PUSH
33678: LD_VAR 0 2
33682: PPUSH
33683: CALL_OW 257
33687: PUSH
33688: LD_INT 5
33690: EQUAL
33691: AND
33692: IFFALSE 33713
// ComBinocular ( unit , x , y ) ;
33694: LD_VAR 0 2
33698: PPUSH
33699: LD_VAR 0 4
33703: PPUSH
33704: LD_VAR 0 5
33708: PPUSH
33709: CALL 36991 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33713: LD_VAR 0 1
33717: PUSH
33718: LD_INT 254
33720: EQUAL
33721: PUSH
33722: LD_VAR 0 2
33726: PPUSH
33727: CALL_OW 264
33731: PUSH
33732: LD_EXP 51
33736: EQUAL
33737: AND
33738: PUSH
33739: LD_VAR 0 3
33743: PPUSH
33744: CALL_OW 263
33748: PUSH
33749: LD_INT 3
33751: EQUAL
33752: AND
33753: IFFALSE 33769
// HackDestroyVehicle ( unit , selectedUnit ) ;
33755: LD_VAR 0 2
33759: PPUSH
33760: LD_VAR 0 3
33764: PPUSH
33765: CALL 35286 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33769: LD_VAR 0 1
33773: PUSH
33774: LD_INT 255
33776: EQUAL
33777: PUSH
33778: LD_VAR 0 2
33782: PPUSH
33783: CALL_OW 264
33787: PUSH
33788: LD_INT 14
33790: PUSH
33791: LD_INT 53
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: IN
33798: AND
33799: PUSH
33800: LD_VAR 0 4
33804: PPUSH
33805: LD_VAR 0 5
33809: PPUSH
33810: CALL_OW 488
33814: AND
33815: IFFALSE 33839
// CutTreeXYR ( unit , x , y , 12 ) ;
33817: LD_VAR 0 2
33821: PPUSH
33822: LD_VAR 0 4
33826: PPUSH
33827: LD_VAR 0 5
33831: PPUSH
33832: LD_INT 12
33834: PPUSH
33835: CALL 33852 0 4
// end ;
33839: LD_VAR 0 6
33843: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33844: LD_INT 0
33846: PPUSH
// end ;
33847: LD_VAR 0 4
33851: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33852: LD_INT 0
33854: PPUSH
33855: PPUSH
33856: PPUSH
33857: PPUSH
33858: PPUSH
33859: PPUSH
33860: PPUSH
33861: PPUSH
33862: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33863: LD_VAR 0 1
33867: NOT
33868: PUSH
33869: LD_VAR 0 2
33873: PPUSH
33874: LD_VAR 0 3
33878: PPUSH
33879: CALL_OW 488
33883: NOT
33884: OR
33885: PUSH
33886: LD_VAR 0 4
33890: NOT
33891: OR
33892: IFFALSE 33896
// exit ;
33894: GO 34236
// list := [ ] ;
33896: LD_ADDR_VAR 0 13
33900: PUSH
33901: EMPTY
33902: ST_TO_ADDR
// if x - r < 0 then
33903: LD_VAR 0 2
33907: PUSH
33908: LD_VAR 0 4
33912: MINUS
33913: PUSH
33914: LD_INT 0
33916: LESS
33917: IFFALSE 33929
// min_x := 0 else
33919: LD_ADDR_VAR 0 7
33923: PUSH
33924: LD_INT 0
33926: ST_TO_ADDR
33927: GO 33945
// min_x := x - r ;
33929: LD_ADDR_VAR 0 7
33933: PUSH
33934: LD_VAR 0 2
33938: PUSH
33939: LD_VAR 0 4
33943: MINUS
33944: ST_TO_ADDR
// if y - r < 0 then
33945: LD_VAR 0 3
33949: PUSH
33950: LD_VAR 0 4
33954: MINUS
33955: PUSH
33956: LD_INT 0
33958: LESS
33959: IFFALSE 33971
// min_y := 0 else
33961: LD_ADDR_VAR 0 8
33965: PUSH
33966: LD_INT 0
33968: ST_TO_ADDR
33969: GO 33987
// min_y := y - r ;
33971: LD_ADDR_VAR 0 8
33975: PUSH
33976: LD_VAR 0 3
33980: PUSH
33981: LD_VAR 0 4
33985: MINUS
33986: ST_TO_ADDR
// max_x := x + r ;
33987: LD_ADDR_VAR 0 9
33991: PUSH
33992: LD_VAR 0 2
33996: PUSH
33997: LD_VAR 0 4
34001: PLUS
34002: ST_TO_ADDR
// max_y := y + r ;
34003: LD_ADDR_VAR 0 10
34007: PUSH
34008: LD_VAR 0 3
34012: PUSH
34013: LD_VAR 0 4
34017: PLUS
34018: ST_TO_ADDR
// for _x = min_x to max_x do
34019: LD_ADDR_VAR 0 11
34023: PUSH
34024: DOUBLE
34025: LD_VAR 0 7
34029: DEC
34030: ST_TO_ADDR
34031: LD_VAR 0 9
34035: PUSH
34036: FOR_TO
34037: IFFALSE 34154
// for _y = min_y to max_y do
34039: LD_ADDR_VAR 0 12
34043: PUSH
34044: DOUBLE
34045: LD_VAR 0 8
34049: DEC
34050: ST_TO_ADDR
34051: LD_VAR 0 10
34055: PUSH
34056: FOR_TO
34057: IFFALSE 34150
// begin if not ValidHex ( _x , _y ) then
34059: LD_VAR 0 11
34063: PPUSH
34064: LD_VAR 0 12
34068: PPUSH
34069: CALL_OW 488
34073: NOT
34074: IFFALSE 34078
// continue ;
34076: GO 34056
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34078: LD_VAR 0 11
34082: PPUSH
34083: LD_VAR 0 12
34087: PPUSH
34088: CALL_OW 351
34092: PUSH
34093: LD_VAR 0 11
34097: PPUSH
34098: LD_VAR 0 12
34102: PPUSH
34103: CALL_OW 554
34107: AND
34108: IFFALSE 34148
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34110: LD_ADDR_VAR 0 13
34114: PUSH
34115: LD_VAR 0 13
34119: PPUSH
34120: LD_VAR 0 13
34124: PUSH
34125: LD_INT 1
34127: PLUS
34128: PPUSH
34129: LD_VAR 0 11
34133: PUSH
34134: LD_VAR 0 12
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PPUSH
34143: CALL_OW 2
34147: ST_TO_ADDR
// end ;
34148: GO 34056
34150: POP
34151: POP
34152: GO 34036
34154: POP
34155: POP
// if not list then
34156: LD_VAR 0 13
34160: NOT
34161: IFFALSE 34165
// exit ;
34163: GO 34236
// for i in list do
34165: LD_ADDR_VAR 0 6
34169: PUSH
34170: LD_VAR 0 13
34174: PUSH
34175: FOR_IN
34176: IFFALSE 34234
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34178: LD_VAR 0 1
34182: PPUSH
34183: LD_STRING M
34185: PUSH
34186: LD_VAR 0 6
34190: PUSH
34191: LD_INT 1
34193: ARRAY
34194: PUSH
34195: LD_VAR 0 6
34199: PUSH
34200: LD_INT 2
34202: ARRAY
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: PUSH
34225: EMPTY
34226: LIST
34227: PPUSH
34228: CALL_OW 447
34232: GO 34175
34234: POP
34235: POP
// end ;
34236: LD_VAR 0 5
34240: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34241: LD_EXP 125
34245: NOT
34246: IFFALSE 34296
34248: GO 34250
34250: DISABLE
// begin initHack := true ;
34251: LD_ADDR_EXP 125
34255: PUSH
34256: LD_INT 1
34258: ST_TO_ADDR
// hackTanks := [ ] ;
34259: LD_ADDR_EXP 126
34263: PUSH
34264: EMPTY
34265: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34266: LD_ADDR_EXP 127
34270: PUSH
34271: EMPTY
34272: ST_TO_ADDR
// hackLimit := 3 ;
34273: LD_ADDR_EXP 128
34277: PUSH
34278: LD_INT 3
34280: ST_TO_ADDR
// hackDist := 12 ;
34281: LD_ADDR_EXP 129
34285: PUSH
34286: LD_INT 12
34288: ST_TO_ADDR
// hackCounter := [ ] ;
34289: LD_ADDR_EXP 130
34293: PUSH
34294: EMPTY
34295: ST_TO_ADDR
// end ;
34296: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34297: LD_EXP 125
34301: PUSH
34302: LD_INT 34
34304: PUSH
34305: LD_EXP 51
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PPUSH
34314: CALL_OW 69
34318: AND
34319: IFFALSE 34574
34321: GO 34323
34323: DISABLE
34324: LD_INT 0
34326: PPUSH
34327: PPUSH
// begin enable ;
34328: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34329: LD_ADDR_VAR 0 1
34333: PUSH
34334: LD_INT 34
34336: PUSH
34337: LD_EXP 51
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PPUSH
34346: CALL_OW 69
34350: PUSH
34351: FOR_IN
34352: IFFALSE 34572
// begin if not i in hackTanks then
34354: LD_VAR 0 1
34358: PUSH
34359: LD_EXP 126
34363: IN
34364: NOT
34365: IFFALSE 34448
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34367: LD_ADDR_EXP 126
34371: PUSH
34372: LD_EXP 126
34376: PPUSH
34377: LD_EXP 126
34381: PUSH
34382: LD_INT 1
34384: PLUS
34385: PPUSH
34386: LD_VAR 0 1
34390: PPUSH
34391: CALL_OW 1
34395: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34396: LD_ADDR_EXP 127
34400: PUSH
34401: LD_EXP 127
34405: PPUSH
34406: LD_EXP 127
34410: PUSH
34411: LD_INT 1
34413: PLUS
34414: PPUSH
34415: EMPTY
34416: PPUSH
34417: CALL_OW 1
34421: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34422: LD_ADDR_EXP 130
34426: PUSH
34427: LD_EXP 130
34431: PPUSH
34432: LD_EXP 130
34436: PUSH
34437: LD_INT 1
34439: PLUS
34440: PPUSH
34441: EMPTY
34442: PPUSH
34443: CALL_OW 1
34447: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34448: LD_VAR 0 1
34452: PPUSH
34453: CALL_OW 302
34457: NOT
34458: IFFALSE 34471
// begin HackUnlinkAll ( i ) ;
34460: LD_VAR 0 1
34464: PPUSH
34465: CALL 34577 0 1
// continue ;
34469: GO 34351
// end ; HackCheckCapturedStatus ( i ) ;
34471: LD_VAR 0 1
34475: PPUSH
34476: CALL 35020 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34480: LD_ADDR_VAR 0 2
34484: PUSH
34485: LD_INT 81
34487: PUSH
34488: LD_VAR 0 1
34492: PPUSH
34493: CALL_OW 255
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 33
34504: PUSH
34505: LD_INT 3
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 91
34514: PUSH
34515: LD_VAR 0 1
34519: PUSH
34520: LD_EXP 129
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 50
34532: PUSH
34533: EMPTY
34534: LIST
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: PPUSH
34542: CALL_OW 69
34546: ST_TO_ADDR
// if not tmp then
34547: LD_VAR 0 2
34551: NOT
34552: IFFALSE 34556
// continue ;
34554: GO 34351
// HackLink ( i , tmp ) ;
34556: LD_VAR 0 1
34560: PPUSH
34561: LD_VAR 0 2
34565: PPUSH
34566: CALL 34713 0 2
// end ;
34570: GO 34351
34572: POP
34573: POP
// end ;
34574: PPOPN 2
34576: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34577: LD_INT 0
34579: PPUSH
34580: PPUSH
34581: PPUSH
// if not hack in hackTanks then
34582: LD_VAR 0 1
34586: PUSH
34587: LD_EXP 126
34591: IN
34592: NOT
34593: IFFALSE 34597
// exit ;
34595: GO 34708
// index := GetElementIndex ( hackTanks , hack ) ;
34597: LD_ADDR_VAR 0 4
34601: PUSH
34602: LD_EXP 126
34606: PPUSH
34607: LD_VAR 0 1
34611: PPUSH
34612: CALL 42182 0 2
34616: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34617: LD_EXP 127
34621: PUSH
34622: LD_VAR 0 4
34626: ARRAY
34627: IFFALSE 34708
// begin for i in hackTanksCaptured [ index ] do
34629: LD_ADDR_VAR 0 3
34633: PUSH
34634: LD_EXP 127
34638: PUSH
34639: LD_VAR 0 4
34643: ARRAY
34644: PUSH
34645: FOR_IN
34646: IFFALSE 34672
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34648: LD_VAR 0 3
34652: PUSH
34653: LD_INT 1
34655: ARRAY
34656: PPUSH
34657: LD_VAR 0 3
34661: PUSH
34662: LD_INT 2
34664: ARRAY
34665: PPUSH
34666: CALL_OW 235
34670: GO 34645
34672: POP
34673: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34674: LD_ADDR_EXP 127
34678: PUSH
34679: LD_EXP 127
34683: PPUSH
34684: LD_VAR 0 4
34688: PPUSH
34689: EMPTY
34690: PPUSH
34691: CALL_OW 1
34695: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34696: LD_VAR 0 1
34700: PPUSH
34701: LD_INT 0
34703: PPUSH
34704: CALL_OW 505
// end ; end ;
34708: LD_VAR 0 2
34712: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34713: LD_INT 0
34715: PPUSH
34716: PPUSH
34717: PPUSH
// if not hack in hackTanks or not vehicles then
34718: LD_VAR 0 1
34722: PUSH
34723: LD_EXP 126
34727: IN
34728: NOT
34729: PUSH
34730: LD_VAR 0 2
34734: NOT
34735: OR
34736: IFFALSE 34740
// exit ;
34738: GO 35015
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34740: LD_ADDR_VAR 0 2
34744: PUSH
34745: LD_VAR 0 1
34749: PPUSH
34750: LD_VAR 0 2
34754: PPUSH
34755: LD_INT 1
34757: PPUSH
34758: LD_INT 1
34760: PPUSH
34761: CALL 42832 0 4
34765: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34766: LD_ADDR_VAR 0 5
34770: PUSH
34771: LD_EXP 126
34775: PPUSH
34776: LD_VAR 0 1
34780: PPUSH
34781: CALL 42182 0 2
34785: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34786: LD_EXP 127
34790: PUSH
34791: LD_VAR 0 5
34795: ARRAY
34796: PUSH
34797: LD_EXP 128
34801: LESS
34802: IFFALSE 34991
// begin for i := 1 to vehicles do
34804: LD_ADDR_VAR 0 4
34808: PUSH
34809: DOUBLE
34810: LD_INT 1
34812: DEC
34813: ST_TO_ADDR
34814: LD_VAR 0 2
34818: PUSH
34819: FOR_TO
34820: IFFALSE 34989
// begin if hackTanksCaptured [ index ] = hackLimit then
34822: LD_EXP 127
34826: PUSH
34827: LD_VAR 0 5
34831: ARRAY
34832: PUSH
34833: LD_EXP 128
34837: EQUAL
34838: IFFALSE 34842
// break ;
34840: GO 34989
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34842: LD_ADDR_EXP 130
34846: PUSH
34847: LD_EXP 130
34851: PPUSH
34852: LD_VAR 0 5
34856: PPUSH
34857: LD_EXP 130
34861: PUSH
34862: LD_VAR 0 5
34866: ARRAY
34867: PUSH
34868: LD_INT 1
34870: PLUS
34871: PPUSH
34872: CALL_OW 1
34876: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34877: LD_ADDR_EXP 127
34881: PUSH
34882: LD_EXP 127
34886: PPUSH
34887: LD_VAR 0 5
34891: PUSH
34892: LD_EXP 127
34896: PUSH
34897: LD_VAR 0 5
34901: ARRAY
34902: PUSH
34903: LD_INT 1
34905: PLUS
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PPUSH
34911: LD_VAR 0 2
34915: PUSH
34916: LD_VAR 0 4
34920: ARRAY
34921: PUSH
34922: LD_VAR 0 2
34926: PUSH
34927: LD_VAR 0 4
34931: ARRAY
34932: PPUSH
34933: CALL_OW 255
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PPUSH
34942: CALL 42397 0 3
34946: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34947: LD_VAR 0 2
34951: PUSH
34952: LD_VAR 0 4
34956: ARRAY
34957: PPUSH
34958: LD_VAR 0 1
34962: PPUSH
34963: CALL_OW 255
34967: PPUSH
34968: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34972: LD_VAR 0 2
34976: PUSH
34977: LD_VAR 0 4
34981: ARRAY
34982: PPUSH
34983: CALL_OW 141
// end ;
34987: GO 34819
34989: POP
34990: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34991: LD_VAR 0 1
34995: PPUSH
34996: LD_EXP 127
35000: PUSH
35001: LD_VAR 0 5
35005: ARRAY
35006: PUSH
35007: LD_INT 0
35009: PLUS
35010: PPUSH
35011: CALL_OW 505
// end ;
35015: LD_VAR 0 3
35019: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35020: LD_INT 0
35022: PPUSH
35023: PPUSH
35024: PPUSH
35025: PPUSH
// if not hack in hackTanks then
35026: LD_VAR 0 1
35030: PUSH
35031: LD_EXP 126
35035: IN
35036: NOT
35037: IFFALSE 35041
// exit ;
35039: GO 35281
// index := GetElementIndex ( hackTanks , hack ) ;
35041: LD_ADDR_VAR 0 4
35045: PUSH
35046: LD_EXP 126
35050: PPUSH
35051: LD_VAR 0 1
35055: PPUSH
35056: CALL 42182 0 2
35060: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35061: LD_ADDR_VAR 0 3
35065: PUSH
35066: DOUBLE
35067: LD_EXP 127
35071: PUSH
35072: LD_VAR 0 4
35076: ARRAY
35077: INC
35078: ST_TO_ADDR
35079: LD_INT 1
35081: PUSH
35082: FOR_DOWNTO
35083: IFFALSE 35255
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35085: LD_ADDR_VAR 0 5
35089: PUSH
35090: LD_EXP 127
35094: PUSH
35095: LD_VAR 0 4
35099: ARRAY
35100: PUSH
35101: LD_VAR 0 3
35105: ARRAY
35106: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35107: LD_VAR 0 5
35111: PUSH
35112: LD_INT 1
35114: ARRAY
35115: PPUSH
35116: CALL_OW 302
35120: NOT
35121: PUSH
35122: LD_VAR 0 5
35126: PUSH
35127: LD_INT 1
35129: ARRAY
35130: PPUSH
35131: CALL_OW 255
35135: PUSH
35136: LD_VAR 0 1
35140: PPUSH
35141: CALL_OW 255
35145: NONEQUAL
35146: OR
35147: IFFALSE 35253
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35149: LD_VAR 0 5
35153: PUSH
35154: LD_INT 1
35156: ARRAY
35157: PPUSH
35158: CALL_OW 305
35162: PUSH
35163: LD_VAR 0 5
35167: PUSH
35168: LD_INT 1
35170: ARRAY
35171: PPUSH
35172: CALL_OW 255
35176: PUSH
35177: LD_VAR 0 1
35181: PPUSH
35182: CALL_OW 255
35186: EQUAL
35187: AND
35188: IFFALSE 35212
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35190: LD_VAR 0 5
35194: PUSH
35195: LD_INT 1
35197: ARRAY
35198: PPUSH
35199: LD_VAR 0 5
35203: PUSH
35204: LD_INT 2
35206: ARRAY
35207: PPUSH
35208: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35212: LD_ADDR_EXP 127
35216: PUSH
35217: LD_EXP 127
35221: PPUSH
35222: LD_VAR 0 4
35226: PPUSH
35227: LD_EXP 127
35231: PUSH
35232: LD_VAR 0 4
35236: ARRAY
35237: PPUSH
35238: LD_VAR 0 3
35242: PPUSH
35243: CALL_OW 3
35247: PPUSH
35248: CALL_OW 1
35252: ST_TO_ADDR
// end ; end ;
35253: GO 35082
35255: POP
35256: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35257: LD_VAR 0 1
35261: PPUSH
35262: LD_EXP 127
35266: PUSH
35267: LD_VAR 0 4
35271: ARRAY
35272: PUSH
35273: LD_INT 0
35275: PLUS
35276: PPUSH
35277: CALL_OW 505
// end ;
35281: LD_VAR 0 2
35285: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35286: LD_INT 0
35288: PPUSH
35289: PPUSH
35290: PPUSH
35291: PPUSH
// if not hack in hackTanks then
35292: LD_VAR 0 1
35296: PUSH
35297: LD_EXP 126
35301: IN
35302: NOT
35303: IFFALSE 35307
// exit ;
35305: GO 35392
// index := GetElementIndex ( hackTanks , hack ) ;
35307: LD_ADDR_VAR 0 5
35311: PUSH
35312: LD_EXP 126
35316: PPUSH
35317: LD_VAR 0 1
35321: PPUSH
35322: CALL 42182 0 2
35326: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35327: LD_ADDR_VAR 0 4
35331: PUSH
35332: DOUBLE
35333: LD_INT 1
35335: DEC
35336: ST_TO_ADDR
35337: LD_EXP 127
35341: PUSH
35342: LD_VAR 0 5
35346: ARRAY
35347: PUSH
35348: FOR_TO
35349: IFFALSE 35390
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35351: LD_EXP 127
35355: PUSH
35356: LD_VAR 0 5
35360: ARRAY
35361: PUSH
35362: LD_VAR 0 4
35366: ARRAY
35367: PUSH
35368: LD_INT 1
35370: ARRAY
35371: PUSH
35372: LD_VAR 0 2
35376: EQUAL
35377: IFFALSE 35388
// KillUnit ( vehicle ) ;
35379: LD_VAR 0 2
35383: PPUSH
35384: CALL_OW 66
35388: GO 35348
35390: POP
35391: POP
// end ;
35392: LD_VAR 0 3
35396: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35397: LD_EXP 131
35401: NOT
35402: IFFALSE 35437
35404: GO 35406
35406: DISABLE
// begin initMiner := true ;
35407: LD_ADDR_EXP 131
35411: PUSH
35412: LD_INT 1
35414: ST_TO_ADDR
// minersList := [ ] ;
35415: LD_ADDR_EXP 132
35419: PUSH
35420: EMPTY
35421: ST_TO_ADDR
// minerMinesList := [ ] ;
35422: LD_ADDR_EXP 133
35426: PUSH
35427: EMPTY
35428: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35429: LD_ADDR_EXP 134
35433: PUSH
35434: LD_INT 5
35436: ST_TO_ADDR
// end ;
35437: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35438: LD_EXP 131
35442: PUSH
35443: LD_INT 34
35445: PUSH
35446: LD_EXP 56
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PPUSH
35455: CALL_OW 69
35459: AND
35460: IFFALSE 35923
35462: GO 35464
35464: DISABLE
35465: LD_INT 0
35467: PPUSH
35468: PPUSH
35469: PPUSH
35470: PPUSH
// begin enable ;
35471: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35472: LD_ADDR_VAR 0 1
35476: PUSH
35477: LD_INT 34
35479: PUSH
35480: LD_EXP 56
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PPUSH
35489: CALL_OW 69
35493: PUSH
35494: FOR_IN
35495: IFFALSE 35567
// begin if not i in minersList then
35497: LD_VAR 0 1
35501: PUSH
35502: LD_EXP 132
35506: IN
35507: NOT
35508: IFFALSE 35565
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35510: LD_ADDR_EXP 132
35514: PUSH
35515: LD_EXP 132
35519: PPUSH
35520: LD_EXP 132
35524: PUSH
35525: LD_INT 1
35527: PLUS
35528: PPUSH
35529: LD_VAR 0 1
35533: PPUSH
35534: CALL_OW 1
35538: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35539: LD_ADDR_EXP 133
35543: PUSH
35544: LD_EXP 133
35548: PPUSH
35549: LD_EXP 133
35553: PUSH
35554: LD_INT 1
35556: PLUS
35557: PPUSH
35558: EMPTY
35559: PPUSH
35560: CALL_OW 1
35564: ST_TO_ADDR
// end end ;
35565: GO 35494
35567: POP
35568: POP
// for i := minerMinesList downto 1 do
35569: LD_ADDR_VAR 0 1
35573: PUSH
35574: DOUBLE
35575: LD_EXP 133
35579: INC
35580: ST_TO_ADDR
35581: LD_INT 1
35583: PUSH
35584: FOR_DOWNTO
35585: IFFALSE 35921
// begin if IsLive ( minersList [ i ] ) then
35587: LD_EXP 132
35591: PUSH
35592: LD_VAR 0 1
35596: ARRAY
35597: PPUSH
35598: CALL_OW 300
35602: IFFALSE 35630
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35604: LD_EXP 132
35608: PUSH
35609: LD_VAR 0 1
35613: ARRAY
35614: PPUSH
35615: LD_EXP 133
35619: PUSH
35620: LD_VAR 0 1
35624: ARRAY
35625: PPUSH
35626: CALL_OW 505
// if not minerMinesList [ i ] then
35630: LD_EXP 133
35634: PUSH
35635: LD_VAR 0 1
35639: ARRAY
35640: NOT
35641: IFFALSE 35645
// continue ;
35643: GO 35584
// for j := minerMinesList [ i ] downto 1 do
35645: LD_ADDR_VAR 0 2
35649: PUSH
35650: DOUBLE
35651: LD_EXP 133
35655: PUSH
35656: LD_VAR 0 1
35660: ARRAY
35661: INC
35662: ST_TO_ADDR
35663: LD_INT 1
35665: PUSH
35666: FOR_DOWNTO
35667: IFFALSE 35917
// begin side := GetSide ( minersList [ i ] ) ;
35669: LD_ADDR_VAR 0 3
35673: PUSH
35674: LD_EXP 132
35678: PUSH
35679: LD_VAR 0 1
35683: ARRAY
35684: PPUSH
35685: CALL_OW 255
35689: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35690: LD_ADDR_VAR 0 4
35694: PUSH
35695: LD_EXP 133
35699: PUSH
35700: LD_VAR 0 1
35704: ARRAY
35705: PUSH
35706: LD_VAR 0 2
35710: ARRAY
35711: PUSH
35712: LD_INT 1
35714: ARRAY
35715: PPUSH
35716: LD_EXP 133
35720: PUSH
35721: LD_VAR 0 1
35725: ARRAY
35726: PUSH
35727: LD_VAR 0 2
35731: ARRAY
35732: PUSH
35733: LD_INT 2
35735: ARRAY
35736: PPUSH
35737: CALL_OW 428
35741: ST_TO_ADDR
// if not tmp then
35742: LD_VAR 0 4
35746: NOT
35747: IFFALSE 35751
// continue ;
35749: GO 35666
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35751: LD_VAR 0 4
35755: PUSH
35756: LD_INT 81
35758: PUSH
35759: LD_VAR 0 3
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PPUSH
35768: CALL_OW 69
35772: IN
35773: PUSH
35774: LD_EXP 133
35778: PUSH
35779: LD_VAR 0 1
35783: ARRAY
35784: PUSH
35785: LD_VAR 0 2
35789: ARRAY
35790: PUSH
35791: LD_INT 1
35793: ARRAY
35794: PPUSH
35795: LD_EXP 133
35799: PUSH
35800: LD_VAR 0 1
35804: ARRAY
35805: PUSH
35806: LD_VAR 0 2
35810: ARRAY
35811: PUSH
35812: LD_INT 2
35814: ARRAY
35815: PPUSH
35816: CALL_OW 458
35820: AND
35821: IFFALSE 35915
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35823: LD_EXP 133
35827: PUSH
35828: LD_VAR 0 1
35832: ARRAY
35833: PUSH
35834: LD_VAR 0 2
35838: ARRAY
35839: PUSH
35840: LD_INT 1
35842: ARRAY
35843: PPUSH
35844: LD_EXP 133
35848: PUSH
35849: LD_VAR 0 1
35853: ARRAY
35854: PUSH
35855: LD_VAR 0 2
35859: ARRAY
35860: PUSH
35861: LD_INT 2
35863: ARRAY
35864: PPUSH
35865: LD_VAR 0 3
35869: PPUSH
35870: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35874: LD_ADDR_EXP 133
35878: PUSH
35879: LD_EXP 133
35883: PPUSH
35884: LD_VAR 0 1
35888: PPUSH
35889: LD_EXP 133
35893: PUSH
35894: LD_VAR 0 1
35898: ARRAY
35899: PPUSH
35900: LD_VAR 0 2
35904: PPUSH
35905: CALL_OW 3
35909: PPUSH
35910: CALL_OW 1
35914: ST_TO_ADDR
// end ; end ;
35915: GO 35666
35917: POP
35918: POP
// end ;
35919: GO 35584
35921: POP
35922: POP
// end ;
35923: PPOPN 4
35925: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35926: LD_INT 0
35928: PPUSH
35929: PPUSH
// result := false ;
35930: LD_ADDR_VAR 0 4
35934: PUSH
35935: LD_INT 0
35937: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35938: LD_VAR 0 1
35942: PPUSH
35943: CALL_OW 264
35947: PUSH
35948: LD_EXP 56
35952: EQUAL
35953: NOT
35954: IFFALSE 35958
// exit ;
35956: GO 36198
// index := GetElementIndex ( minersList , unit ) ;
35958: LD_ADDR_VAR 0 5
35962: PUSH
35963: LD_EXP 132
35967: PPUSH
35968: LD_VAR 0 1
35972: PPUSH
35973: CALL 42182 0 2
35977: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35978: LD_EXP 133
35982: PUSH
35983: LD_VAR 0 5
35987: ARRAY
35988: PUSH
35989: LD_EXP 134
35993: GREATEREQUAL
35994: IFFALSE 35998
// exit ;
35996: GO 36198
// ComMoveXY ( unit , x , y ) ;
35998: LD_VAR 0 1
36002: PPUSH
36003: LD_VAR 0 2
36007: PPUSH
36008: LD_VAR 0 3
36012: PPUSH
36013: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36017: LD_INT 35
36019: PPUSH
36020: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36024: LD_VAR 0 1
36028: PPUSH
36029: LD_VAR 0 2
36033: PPUSH
36034: LD_VAR 0 3
36038: PPUSH
36039: CALL 72954 0 3
36043: NOT
36044: PUSH
36045: LD_VAR 0 1
36049: PPUSH
36050: CALL_OW 314
36054: AND
36055: IFFALSE 36059
// exit ;
36057: GO 36198
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36059: LD_VAR 0 2
36063: PPUSH
36064: LD_VAR 0 3
36068: PPUSH
36069: CALL_OW 428
36073: PUSH
36074: LD_VAR 0 1
36078: EQUAL
36079: PUSH
36080: LD_VAR 0 1
36084: PPUSH
36085: CALL_OW 314
36089: NOT
36090: AND
36091: IFFALSE 36017
// PlaySoundXY ( x , y , PlantMine ) ;
36093: LD_VAR 0 2
36097: PPUSH
36098: LD_VAR 0 3
36102: PPUSH
36103: LD_STRING PlantMine
36105: PPUSH
36106: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36110: LD_VAR 0 2
36114: PPUSH
36115: LD_VAR 0 3
36119: PPUSH
36120: LD_VAR 0 1
36124: PPUSH
36125: CALL_OW 255
36129: PPUSH
36130: LD_INT 0
36132: PPUSH
36133: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36137: LD_ADDR_EXP 133
36141: PUSH
36142: LD_EXP 133
36146: PPUSH
36147: LD_VAR 0 5
36151: PUSH
36152: LD_EXP 133
36156: PUSH
36157: LD_VAR 0 5
36161: ARRAY
36162: PUSH
36163: LD_INT 1
36165: PLUS
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PPUSH
36171: LD_VAR 0 2
36175: PUSH
36176: LD_VAR 0 3
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PPUSH
36185: CALL 42397 0 3
36189: ST_TO_ADDR
// result := true ;
36190: LD_ADDR_VAR 0 4
36194: PUSH
36195: LD_INT 1
36197: ST_TO_ADDR
// end ;
36198: LD_VAR 0 4
36202: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36203: LD_INT 0
36205: PPUSH
36206: PPUSH
36207: PPUSH
// if not unit in minersList then
36208: LD_VAR 0 1
36212: PUSH
36213: LD_EXP 132
36217: IN
36218: NOT
36219: IFFALSE 36223
// exit ;
36221: GO 36615
// index := GetElementIndex ( minersList , unit ) ;
36223: LD_ADDR_VAR 0 6
36227: PUSH
36228: LD_EXP 132
36232: PPUSH
36233: LD_VAR 0 1
36237: PPUSH
36238: CALL 42182 0 2
36242: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36243: LD_ADDR_VAR 0 5
36247: PUSH
36248: DOUBLE
36249: LD_EXP 133
36253: PUSH
36254: LD_VAR 0 6
36258: ARRAY
36259: INC
36260: ST_TO_ADDR
36261: LD_INT 1
36263: PUSH
36264: FOR_DOWNTO
36265: IFFALSE 36426
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36267: LD_EXP 133
36271: PUSH
36272: LD_VAR 0 6
36276: ARRAY
36277: PUSH
36278: LD_VAR 0 5
36282: ARRAY
36283: PUSH
36284: LD_INT 1
36286: ARRAY
36287: PUSH
36288: LD_VAR 0 2
36292: EQUAL
36293: PUSH
36294: LD_EXP 133
36298: PUSH
36299: LD_VAR 0 6
36303: ARRAY
36304: PUSH
36305: LD_VAR 0 5
36309: ARRAY
36310: PUSH
36311: LD_INT 2
36313: ARRAY
36314: PUSH
36315: LD_VAR 0 3
36319: EQUAL
36320: AND
36321: IFFALSE 36424
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36323: LD_EXP 133
36327: PUSH
36328: LD_VAR 0 6
36332: ARRAY
36333: PUSH
36334: LD_VAR 0 5
36338: ARRAY
36339: PUSH
36340: LD_INT 1
36342: ARRAY
36343: PPUSH
36344: LD_EXP 133
36348: PUSH
36349: LD_VAR 0 6
36353: ARRAY
36354: PUSH
36355: LD_VAR 0 5
36359: ARRAY
36360: PUSH
36361: LD_INT 2
36363: ARRAY
36364: PPUSH
36365: LD_VAR 0 1
36369: PPUSH
36370: CALL_OW 255
36374: PPUSH
36375: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36379: LD_ADDR_EXP 133
36383: PUSH
36384: LD_EXP 133
36388: PPUSH
36389: LD_VAR 0 6
36393: PPUSH
36394: LD_EXP 133
36398: PUSH
36399: LD_VAR 0 6
36403: ARRAY
36404: PPUSH
36405: LD_VAR 0 5
36409: PPUSH
36410: CALL_OW 3
36414: PPUSH
36415: CALL_OW 1
36419: ST_TO_ADDR
// exit ;
36420: POP
36421: POP
36422: GO 36615
// end ; end ;
36424: GO 36264
36426: POP
36427: POP
// for i := minerMinesList [ index ] downto 1 do
36428: LD_ADDR_VAR 0 5
36432: PUSH
36433: DOUBLE
36434: LD_EXP 133
36438: PUSH
36439: LD_VAR 0 6
36443: ARRAY
36444: INC
36445: ST_TO_ADDR
36446: LD_INT 1
36448: PUSH
36449: FOR_DOWNTO
36450: IFFALSE 36613
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36452: LD_EXP 133
36456: PUSH
36457: LD_VAR 0 6
36461: ARRAY
36462: PUSH
36463: LD_VAR 0 5
36467: ARRAY
36468: PUSH
36469: LD_INT 1
36471: ARRAY
36472: PPUSH
36473: LD_EXP 133
36477: PUSH
36478: LD_VAR 0 6
36482: ARRAY
36483: PUSH
36484: LD_VAR 0 5
36488: ARRAY
36489: PUSH
36490: LD_INT 2
36492: ARRAY
36493: PPUSH
36494: LD_VAR 0 2
36498: PPUSH
36499: LD_VAR 0 3
36503: PPUSH
36504: CALL_OW 298
36508: PUSH
36509: LD_INT 6
36511: LESS
36512: IFFALSE 36611
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36514: LD_EXP 133
36518: PUSH
36519: LD_VAR 0 6
36523: ARRAY
36524: PUSH
36525: LD_VAR 0 5
36529: ARRAY
36530: PUSH
36531: LD_INT 1
36533: ARRAY
36534: PPUSH
36535: LD_EXP 133
36539: PUSH
36540: LD_VAR 0 6
36544: ARRAY
36545: PUSH
36546: LD_VAR 0 5
36550: ARRAY
36551: PUSH
36552: LD_INT 2
36554: ARRAY
36555: PPUSH
36556: LD_VAR 0 1
36560: PPUSH
36561: CALL_OW 255
36565: PPUSH
36566: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36570: LD_ADDR_EXP 133
36574: PUSH
36575: LD_EXP 133
36579: PPUSH
36580: LD_VAR 0 6
36584: PPUSH
36585: LD_EXP 133
36589: PUSH
36590: LD_VAR 0 6
36594: ARRAY
36595: PPUSH
36596: LD_VAR 0 5
36600: PPUSH
36601: CALL_OW 3
36605: PPUSH
36606: CALL_OW 1
36610: ST_TO_ADDR
// end ; end ;
36611: GO 36449
36613: POP
36614: POP
// end ;
36615: LD_VAR 0 4
36619: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36620: LD_INT 0
36622: PPUSH
36623: PPUSH
36624: PPUSH
36625: PPUSH
36626: PPUSH
36627: PPUSH
36628: PPUSH
36629: PPUSH
36630: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36631: LD_VAR 0 1
36635: PPUSH
36636: CALL_OW 264
36640: PUSH
36641: LD_EXP 56
36645: EQUAL
36646: NOT
36647: PUSH
36648: LD_VAR 0 1
36652: PUSH
36653: LD_EXP 132
36657: IN
36658: NOT
36659: OR
36660: IFFALSE 36664
// exit ;
36662: GO 36986
// index := GetElementIndex ( minersList , unit ) ;
36664: LD_ADDR_VAR 0 6
36668: PUSH
36669: LD_EXP 132
36673: PPUSH
36674: LD_VAR 0 1
36678: PPUSH
36679: CALL 42182 0 2
36683: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36684: LD_ADDR_VAR 0 8
36688: PUSH
36689: LD_EXP 134
36693: PUSH
36694: LD_EXP 133
36698: PUSH
36699: LD_VAR 0 6
36703: ARRAY
36704: MINUS
36705: ST_TO_ADDR
// if not minesFreeAmount then
36706: LD_VAR 0 8
36710: NOT
36711: IFFALSE 36715
// exit ;
36713: GO 36986
// tmp := [ ] ;
36715: LD_ADDR_VAR 0 7
36719: PUSH
36720: EMPTY
36721: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36722: LD_ADDR_VAR 0 5
36726: PUSH
36727: DOUBLE
36728: LD_INT 1
36730: DEC
36731: ST_TO_ADDR
36732: LD_VAR 0 8
36736: PUSH
36737: FOR_TO
36738: IFFALSE 36933
// begin _d := rand ( 0 , 5 ) ;
36740: LD_ADDR_VAR 0 11
36744: PUSH
36745: LD_INT 0
36747: PPUSH
36748: LD_INT 5
36750: PPUSH
36751: CALL_OW 12
36755: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36756: LD_ADDR_VAR 0 12
36760: PUSH
36761: LD_INT 2
36763: PPUSH
36764: LD_INT 6
36766: PPUSH
36767: CALL_OW 12
36771: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36772: LD_ADDR_VAR 0 9
36776: PUSH
36777: LD_VAR 0 2
36781: PPUSH
36782: LD_VAR 0 11
36786: PPUSH
36787: LD_VAR 0 12
36791: PPUSH
36792: CALL_OW 272
36796: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36797: LD_ADDR_VAR 0 10
36801: PUSH
36802: LD_VAR 0 3
36806: PPUSH
36807: LD_VAR 0 11
36811: PPUSH
36812: LD_VAR 0 12
36816: PPUSH
36817: CALL_OW 273
36821: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36822: LD_VAR 0 9
36826: PPUSH
36827: LD_VAR 0 10
36831: PPUSH
36832: CALL_OW 488
36836: PUSH
36837: LD_VAR 0 9
36841: PUSH
36842: LD_VAR 0 10
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_VAR 0 7
36855: IN
36856: NOT
36857: AND
36858: PUSH
36859: LD_VAR 0 9
36863: PPUSH
36864: LD_VAR 0 10
36868: PPUSH
36869: CALL_OW 458
36873: NOT
36874: AND
36875: IFFALSE 36917
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36877: LD_ADDR_VAR 0 7
36881: PUSH
36882: LD_VAR 0 7
36886: PPUSH
36887: LD_VAR 0 7
36891: PUSH
36892: LD_INT 1
36894: PLUS
36895: PPUSH
36896: LD_VAR 0 9
36900: PUSH
36901: LD_VAR 0 10
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PPUSH
36910: CALL_OW 1
36914: ST_TO_ADDR
36915: GO 36931
// i := i - 1 ;
36917: LD_ADDR_VAR 0 5
36921: PUSH
36922: LD_VAR 0 5
36926: PUSH
36927: LD_INT 1
36929: MINUS
36930: ST_TO_ADDR
// end ;
36931: GO 36737
36933: POP
36934: POP
// for i in tmp do
36935: LD_ADDR_VAR 0 5
36939: PUSH
36940: LD_VAR 0 7
36944: PUSH
36945: FOR_IN
36946: IFFALSE 36984
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36948: LD_VAR 0 1
36952: PPUSH
36953: LD_VAR 0 5
36957: PUSH
36958: LD_INT 1
36960: ARRAY
36961: PPUSH
36962: LD_VAR 0 5
36966: PUSH
36967: LD_INT 2
36969: ARRAY
36970: PPUSH
36971: CALL 35926 0 3
36975: NOT
36976: IFFALSE 36982
// exit ;
36978: POP
36979: POP
36980: GO 36986
36982: GO 36945
36984: POP
36985: POP
// end ;
36986: LD_VAR 0 4
36990: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36991: LD_INT 0
36993: PPUSH
36994: PPUSH
36995: PPUSH
36996: PPUSH
36997: PPUSH
36998: PPUSH
36999: PPUSH
// if not GetClass ( unit ) = class_sniper then
37000: LD_VAR 0 1
37004: PPUSH
37005: CALL_OW 257
37009: PUSH
37010: LD_INT 5
37012: EQUAL
37013: NOT
37014: IFFALSE 37018
// exit ;
37016: GO 37406
// dist := 8 ;
37018: LD_ADDR_VAR 0 5
37022: PUSH
37023: LD_INT 8
37025: ST_TO_ADDR
// viewRange := 12 ;
37026: LD_ADDR_VAR 0 7
37030: PUSH
37031: LD_INT 12
37033: ST_TO_ADDR
// side := GetSide ( unit ) ;
37034: LD_ADDR_VAR 0 6
37038: PUSH
37039: LD_VAR 0 1
37043: PPUSH
37044: CALL_OW 255
37048: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37049: LD_INT 61
37051: PPUSH
37052: LD_VAR 0 6
37056: PPUSH
37057: CALL_OW 321
37061: PUSH
37062: LD_INT 2
37064: EQUAL
37065: IFFALSE 37075
// viewRange := 16 ;
37067: LD_ADDR_VAR 0 7
37071: PUSH
37072: LD_INT 16
37074: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37075: LD_VAR 0 1
37079: PPUSH
37080: LD_VAR 0 2
37084: PPUSH
37085: LD_VAR 0 3
37089: PPUSH
37090: CALL_OW 297
37094: PUSH
37095: LD_VAR 0 5
37099: GREATER
37100: IFFALSE 37179
// begin ComMoveXY ( unit , x , y ) ;
37102: LD_VAR 0 1
37106: PPUSH
37107: LD_VAR 0 2
37111: PPUSH
37112: LD_VAR 0 3
37116: PPUSH
37117: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37121: LD_INT 35
37123: PPUSH
37124: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37128: LD_VAR 0 1
37132: PPUSH
37133: LD_VAR 0 2
37137: PPUSH
37138: LD_VAR 0 3
37142: PPUSH
37143: CALL 72954 0 3
37147: NOT
37148: IFFALSE 37152
// exit ;
37150: GO 37406
// until GetDistUnitXY ( unit , x , y ) < dist ;
37152: LD_VAR 0 1
37156: PPUSH
37157: LD_VAR 0 2
37161: PPUSH
37162: LD_VAR 0 3
37166: PPUSH
37167: CALL_OW 297
37171: PUSH
37172: LD_VAR 0 5
37176: LESS
37177: IFFALSE 37121
// end ; ComTurnXY ( unit , x , y ) ;
37179: LD_VAR 0 1
37183: PPUSH
37184: LD_VAR 0 2
37188: PPUSH
37189: LD_VAR 0 3
37193: PPUSH
37194: CALL_OW 118
// wait ( 5 ) ;
37198: LD_INT 5
37200: PPUSH
37201: CALL_OW 67
// _d := GetDir ( unit ) ;
37205: LD_ADDR_VAR 0 10
37209: PUSH
37210: LD_VAR 0 1
37214: PPUSH
37215: CALL_OW 254
37219: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37220: LD_ADDR_VAR 0 8
37224: PUSH
37225: LD_VAR 0 1
37229: PPUSH
37230: CALL_OW 250
37234: PPUSH
37235: LD_VAR 0 10
37239: PPUSH
37240: LD_VAR 0 5
37244: PPUSH
37245: CALL_OW 272
37249: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37250: LD_ADDR_VAR 0 9
37254: PUSH
37255: LD_VAR 0 1
37259: PPUSH
37260: CALL_OW 251
37264: PPUSH
37265: LD_VAR 0 10
37269: PPUSH
37270: LD_VAR 0 5
37274: PPUSH
37275: CALL_OW 273
37279: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37280: LD_VAR 0 8
37284: PPUSH
37285: LD_VAR 0 9
37289: PPUSH
37290: CALL_OW 488
37294: NOT
37295: IFFALSE 37299
// exit ;
37297: GO 37406
// ComAnimCustom ( unit , 1 ) ;
37299: LD_VAR 0 1
37303: PPUSH
37304: LD_INT 1
37306: PPUSH
37307: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37311: LD_VAR 0 8
37315: PPUSH
37316: LD_VAR 0 9
37320: PPUSH
37321: LD_VAR 0 6
37325: PPUSH
37326: LD_VAR 0 7
37330: PPUSH
37331: CALL_OW 330
// repeat wait ( 1 ) ;
37335: LD_INT 1
37337: PPUSH
37338: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37342: LD_VAR 0 1
37346: PPUSH
37347: CALL_OW 316
37351: PUSH
37352: LD_VAR 0 1
37356: PPUSH
37357: CALL_OW 314
37361: OR
37362: PUSH
37363: LD_VAR 0 1
37367: PPUSH
37368: CALL_OW 302
37372: NOT
37373: OR
37374: PUSH
37375: LD_VAR 0 1
37379: PPUSH
37380: CALL_OW 301
37384: OR
37385: IFFALSE 37335
// RemoveSeeing ( _x , _y , side ) ;
37387: LD_VAR 0 8
37391: PPUSH
37392: LD_VAR 0 9
37396: PPUSH
37397: LD_VAR 0 6
37401: PPUSH
37402: CALL_OW 331
// end ; end_of_file
37406: LD_VAR 0 4
37410: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37411: LD_INT 0
37413: PPUSH
37414: PPUSH
// if exist_mode then
37415: LD_VAR 0 2
37419: IFFALSE 37444
// unit := CreateCharacter ( prefix & ident ) else
37421: LD_ADDR_VAR 0 5
37425: PUSH
37426: LD_VAR 0 3
37430: PUSH
37431: LD_VAR 0 1
37435: STR
37436: PPUSH
37437: CALL_OW 34
37441: ST_TO_ADDR
37442: GO 37459
// unit := NewCharacter ( ident ) ;
37444: LD_ADDR_VAR 0 5
37448: PUSH
37449: LD_VAR 0 1
37453: PPUSH
37454: CALL_OW 25
37458: ST_TO_ADDR
// result := unit ;
37459: LD_ADDR_VAR 0 4
37463: PUSH
37464: LD_VAR 0 5
37468: ST_TO_ADDR
// end ;
37469: LD_VAR 0 4
37473: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37474: LD_INT 0
37476: PPUSH
37477: PPUSH
// if not side or not nation then
37478: LD_VAR 0 1
37482: NOT
37483: PUSH
37484: LD_VAR 0 2
37488: NOT
37489: OR
37490: IFFALSE 37494
// exit ;
37492: GO 38262
// case nation of nation_american :
37494: LD_VAR 0 2
37498: PUSH
37499: LD_INT 1
37501: DOUBLE
37502: EQUAL
37503: IFTRUE 37507
37505: GO 37721
37507: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37508: LD_ADDR_VAR 0 4
37512: PUSH
37513: LD_INT 35
37515: PUSH
37516: LD_INT 45
37518: PUSH
37519: LD_INT 46
37521: PUSH
37522: LD_INT 47
37524: PUSH
37525: LD_INT 82
37527: PUSH
37528: LD_INT 83
37530: PUSH
37531: LD_INT 84
37533: PUSH
37534: LD_INT 85
37536: PUSH
37537: LD_INT 86
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 6
37548: PUSH
37549: LD_INT 15
37551: PUSH
37552: LD_INT 16
37554: PUSH
37555: LD_INT 7
37557: PUSH
37558: LD_INT 12
37560: PUSH
37561: LD_INT 13
37563: PUSH
37564: LD_INT 10
37566: PUSH
37567: LD_INT 14
37569: PUSH
37570: LD_INT 20
37572: PUSH
37573: LD_INT 21
37575: PUSH
37576: LD_INT 22
37578: PUSH
37579: LD_INT 25
37581: PUSH
37582: LD_INT 32
37584: PUSH
37585: LD_INT 27
37587: PUSH
37588: LD_INT 36
37590: PUSH
37591: LD_INT 69
37593: PUSH
37594: LD_INT 39
37596: PUSH
37597: LD_INT 34
37599: PUSH
37600: LD_INT 40
37602: PUSH
37603: LD_INT 48
37605: PUSH
37606: LD_INT 49
37608: PUSH
37609: LD_INT 50
37611: PUSH
37612: LD_INT 51
37614: PUSH
37615: LD_INT 52
37617: PUSH
37618: LD_INT 53
37620: PUSH
37621: LD_INT 54
37623: PUSH
37624: LD_INT 55
37626: PUSH
37627: LD_INT 56
37629: PUSH
37630: LD_INT 57
37632: PUSH
37633: LD_INT 58
37635: PUSH
37636: LD_INT 59
37638: PUSH
37639: LD_INT 60
37641: PUSH
37642: LD_INT 61
37644: PUSH
37645: LD_INT 62
37647: PUSH
37648: LD_INT 80
37650: PUSH
37651: LD_INT 82
37653: PUSH
37654: LD_INT 83
37656: PUSH
37657: LD_INT 84
37659: PUSH
37660: LD_INT 85
37662: PUSH
37663: LD_INT 86
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: ST_TO_ADDR
37719: GO 38186
37721: LD_INT 2
37723: DOUBLE
37724: EQUAL
37725: IFTRUE 37729
37727: GO 37955
37729: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37730: LD_ADDR_VAR 0 4
37734: PUSH
37735: LD_INT 35
37737: PUSH
37738: LD_INT 45
37740: PUSH
37741: LD_INT 46
37743: PUSH
37744: LD_INT 47
37746: PUSH
37747: LD_INT 82
37749: PUSH
37750: LD_INT 83
37752: PUSH
37753: LD_INT 84
37755: PUSH
37756: LD_INT 85
37758: PUSH
37759: LD_INT 87
37761: PUSH
37762: LD_INT 70
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: LD_INT 11
37770: PUSH
37771: LD_INT 3
37773: PUSH
37774: LD_INT 4
37776: PUSH
37777: LD_INT 5
37779: PUSH
37780: LD_INT 6
37782: PUSH
37783: LD_INT 15
37785: PUSH
37786: LD_INT 18
37788: PUSH
37789: LD_INT 7
37791: PUSH
37792: LD_INT 17
37794: PUSH
37795: LD_INT 8
37797: PUSH
37798: LD_INT 20
37800: PUSH
37801: LD_INT 21
37803: PUSH
37804: LD_INT 22
37806: PUSH
37807: LD_INT 72
37809: PUSH
37810: LD_INT 26
37812: PUSH
37813: LD_INT 69
37815: PUSH
37816: LD_INT 39
37818: PUSH
37819: LD_INT 40
37821: PUSH
37822: LD_INT 41
37824: PUSH
37825: LD_INT 42
37827: PUSH
37828: LD_INT 43
37830: PUSH
37831: LD_INT 48
37833: PUSH
37834: LD_INT 49
37836: PUSH
37837: LD_INT 50
37839: PUSH
37840: LD_INT 51
37842: PUSH
37843: LD_INT 52
37845: PUSH
37846: LD_INT 53
37848: PUSH
37849: LD_INT 54
37851: PUSH
37852: LD_INT 55
37854: PUSH
37855: LD_INT 56
37857: PUSH
37858: LD_INT 60
37860: PUSH
37861: LD_INT 61
37863: PUSH
37864: LD_INT 62
37866: PUSH
37867: LD_INT 66
37869: PUSH
37870: LD_INT 67
37872: PUSH
37873: LD_INT 68
37875: PUSH
37876: LD_INT 81
37878: PUSH
37879: LD_INT 82
37881: PUSH
37882: LD_INT 83
37884: PUSH
37885: LD_INT 84
37887: PUSH
37888: LD_INT 85
37890: PUSH
37891: LD_INT 87
37893: PUSH
37894: LD_INT 88
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: ST_TO_ADDR
37953: GO 38186
37955: LD_INT 3
37957: DOUBLE
37958: EQUAL
37959: IFTRUE 37963
37961: GO 38185
37963: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37964: LD_ADDR_VAR 0 4
37968: PUSH
37969: LD_INT 46
37971: PUSH
37972: LD_INT 47
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 2
37980: PUSH
37981: LD_INT 82
37983: PUSH
37984: LD_INT 83
37986: PUSH
37987: LD_INT 84
37989: PUSH
37990: LD_INT 85
37992: PUSH
37993: LD_INT 86
37995: PUSH
37996: LD_INT 11
37998: PUSH
37999: LD_INT 9
38001: PUSH
38002: LD_INT 20
38004: PUSH
38005: LD_INT 19
38007: PUSH
38008: LD_INT 21
38010: PUSH
38011: LD_INT 24
38013: PUSH
38014: LD_INT 22
38016: PUSH
38017: LD_INT 25
38019: PUSH
38020: LD_INT 28
38022: PUSH
38023: LD_INT 29
38025: PUSH
38026: LD_INT 30
38028: PUSH
38029: LD_INT 31
38031: PUSH
38032: LD_INT 37
38034: PUSH
38035: LD_INT 38
38037: PUSH
38038: LD_INT 32
38040: PUSH
38041: LD_INT 27
38043: PUSH
38044: LD_INT 33
38046: PUSH
38047: LD_INT 69
38049: PUSH
38050: LD_INT 39
38052: PUSH
38053: LD_INT 34
38055: PUSH
38056: LD_INT 40
38058: PUSH
38059: LD_INT 71
38061: PUSH
38062: LD_INT 23
38064: PUSH
38065: LD_INT 44
38067: PUSH
38068: LD_INT 48
38070: PUSH
38071: LD_INT 49
38073: PUSH
38074: LD_INT 50
38076: PUSH
38077: LD_INT 51
38079: PUSH
38080: LD_INT 52
38082: PUSH
38083: LD_INT 53
38085: PUSH
38086: LD_INT 54
38088: PUSH
38089: LD_INT 55
38091: PUSH
38092: LD_INT 56
38094: PUSH
38095: LD_INT 57
38097: PUSH
38098: LD_INT 58
38100: PUSH
38101: LD_INT 59
38103: PUSH
38104: LD_INT 63
38106: PUSH
38107: LD_INT 64
38109: PUSH
38110: LD_INT 65
38112: PUSH
38113: LD_INT 82
38115: PUSH
38116: LD_INT 83
38118: PUSH
38119: LD_INT 84
38121: PUSH
38122: LD_INT 85
38124: PUSH
38125: LD_INT 86
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: ST_TO_ADDR
38183: GO 38186
38185: POP
// if state > - 1 and state < 3 then
38186: LD_VAR 0 3
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: GREATER
38195: PUSH
38196: LD_VAR 0 3
38200: PUSH
38201: LD_INT 3
38203: LESS
38204: AND
38205: IFFALSE 38262
// for i in result do
38207: LD_ADDR_VAR 0 5
38211: PUSH
38212: LD_VAR 0 4
38216: PUSH
38217: FOR_IN
38218: IFFALSE 38260
// if GetTech ( i , side ) <> state then
38220: LD_VAR 0 5
38224: PPUSH
38225: LD_VAR 0 1
38229: PPUSH
38230: CALL_OW 321
38234: PUSH
38235: LD_VAR 0 3
38239: NONEQUAL
38240: IFFALSE 38258
// result := result diff i ;
38242: LD_ADDR_VAR 0 4
38246: PUSH
38247: LD_VAR 0 4
38251: PUSH
38252: LD_VAR 0 5
38256: DIFF
38257: ST_TO_ADDR
38258: GO 38217
38260: POP
38261: POP
// end ;
38262: LD_VAR 0 4
38266: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38267: LD_INT 0
38269: PPUSH
38270: PPUSH
38271: PPUSH
// result := true ;
38272: LD_ADDR_VAR 0 3
38276: PUSH
38277: LD_INT 1
38279: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38280: LD_ADDR_VAR 0 5
38284: PUSH
38285: LD_VAR 0 2
38289: PPUSH
38290: CALL_OW 480
38294: ST_TO_ADDR
// if not tmp then
38295: LD_VAR 0 5
38299: NOT
38300: IFFALSE 38304
// exit ;
38302: GO 38353
// for i in tmp do
38304: LD_ADDR_VAR 0 4
38308: PUSH
38309: LD_VAR 0 5
38313: PUSH
38314: FOR_IN
38315: IFFALSE 38351
// if GetTech ( i , side ) <> state_researched then
38317: LD_VAR 0 4
38321: PPUSH
38322: LD_VAR 0 1
38326: PPUSH
38327: CALL_OW 321
38331: PUSH
38332: LD_INT 2
38334: NONEQUAL
38335: IFFALSE 38349
// begin result := false ;
38337: LD_ADDR_VAR 0 3
38341: PUSH
38342: LD_INT 0
38344: ST_TO_ADDR
// exit ;
38345: POP
38346: POP
38347: GO 38353
// end ;
38349: GO 38314
38351: POP
38352: POP
// end ;
38353: LD_VAR 0 3
38357: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38358: LD_INT 0
38360: PPUSH
38361: PPUSH
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38373: LD_VAR 0 1
38377: NOT
38378: PUSH
38379: LD_VAR 0 1
38383: PPUSH
38384: CALL_OW 257
38388: PUSH
38389: LD_INT 9
38391: NONEQUAL
38392: OR
38393: IFFALSE 38397
// exit ;
38395: GO 38970
// side := GetSide ( unit ) ;
38397: LD_ADDR_VAR 0 9
38401: PUSH
38402: LD_VAR 0 1
38406: PPUSH
38407: CALL_OW 255
38411: ST_TO_ADDR
// tech_space := tech_spacanom ;
38412: LD_ADDR_VAR 0 12
38416: PUSH
38417: LD_INT 29
38419: ST_TO_ADDR
// tech_time := tech_taurad ;
38420: LD_ADDR_VAR 0 13
38424: PUSH
38425: LD_INT 28
38427: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38428: LD_ADDR_VAR 0 11
38432: PUSH
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL_OW 310
38442: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38443: LD_VAR 0 11
38447: PPUSH
38448: CALL_OW 247
38452: PUSH
38453: LD_INT 2
38455: EQUAL
38456: IFFALSE 38460
// exit ;
38458: GO 38970
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38460: LD_ADDR_VAR 0 8
38464: PUSH
38465: LD_INT 81
38467: PUSH
38468: LD_VAR 0 9
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 3
38479: PUSH
38480: LD_INT 21
38482: PUSH
38483: LD_INT 3
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PPUSH
38498: CALL_OW 69
38502: ST_TO_ADDR
// if not tmp then
38503: LD_VAR 0 8
38507: NOT
38508: IFFALSE 38512
// exit ;
38510: GO 38970
// if in_unit then
38512: LD_VAR 0 11
38516: IFFALSE 38540
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38518: LD_ADDR_VAR 0 10
38522: PUSH
38523: LD_VAR 0 8
38527: PPUSH
38528: LD_VAR 0 11
38532: PPUSH
38533: CALL_OW 74
38537: ST_TO_ADDR
38538: GO 38560
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38540: LD_ADDR_VAR 0 10
38544: PUSH
38545: LD_VAR 0 8
38549: PPUSH
38550: LD_VAR 0 1
38554: PPUSH
38555: CALL_OW 74
38559: ST_TO_ADDR
// if not enemy then
38560: LD_VAR 0 10
38564: NOT
38565: IFFALSE 38569
// exit ;
38567: GO 38970
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38569: LD_VAR 0 11
38573: PUSH
38574: LD_VAR 0 11
38578: PPUSH
38579: LD_VAR 0 10
38583: PPUSH
38584: CALL_OW 296
38588: PUSH
38589: LD_INT 13
38591: GREATER
38592: AND
38593: PUSH
38594: LD_VAR 0 1
38598: PPUSH
38599: LD_VAR 0 10
38603: PPUSH
38604: CALL_OW 296
38608: PUSH
38609: LD_INT 12
38611: GREATER
38612: OR
38613: IFFALSE 38617
// exit ;
38615: GO 38970
// missile := [ 1 ] ;
38617: LD_ADDR_VAR 0 14
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: EMPTY
38626: LIST
38627: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38628: LD_VAR 0 9
38632: PPUSH
38633: LD_VAR 0 12
38637: PPUSH
38638: CALL_OW 325
38642: IFFALSE 38671
// missile := Insert ( missile , missile + 1 , 2 ) ;
38644: LD_ADDR_VAR 0 14
38648: PUSH
38649: LD_VAR 0 14
38653: PPUSH
38654: LD_VAR 0 14
38658: PUSH
38659: LD_INT 1
38661: PLUS
38662: PPUSH
38663: LD_INT 2
38665: PPUSH
38666: CALL_OW 2
38670: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38671: LD_VAR 0 9
38675: PPUSH
38676: LD_VAR 0 13
38680: PPUSH
38681: CALL_OW 325
38685: PUSH
38686: LD_VAR 0 10
38690: PPUSH
38691: CALL_OW 255
38695: PPUSH
38696: LD_VAR 0 13
38700: PPUSH
38701: CALL_OW 325
38705: NOT
38706: AND
38707: IFFALSE 38736
// missile := Insert ( missile , missile + 1 , 3 ) ;
38709: LD_ADDR_VAR 0 14
38713: PUSH
38714: LD_VAR 0 14
38718: PPUSH
38719: LD_VAR 0 14
38723: PUSH
38724: LD_INT 1
38726: PLUS
38727: PPUSH
38728: LD_INT 3
38730: PPUSH
38731: CALL_OW 2
38735: ST_TO_ADDR
// if missile < 2 then
38736: LD_VAR 0 14
38740: PUSH
38741: LD_INT 2
38743: LESS
38744: IFFALSE 38748
// exit ;
38746: GO 38970
// x := GetX ( enemy ) ;
38748: LD_ADDR_VAR 0 4
38752: PUSH
38753: LD_VAR 0 10
38757: PPUSH
38758: CALL_OW 250
38762: ST_TO_ADDR
// y := GetY ( enemy ) ;
38763: LD_ADDR_VAR 0 5
38767: PUSH
38768: LD_VAR 0 10
38772: PPUSH
38773: CALL_OW 251
38777: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38778: LD_ADDR_VAR 0 6
38782: PUSH
38783: LD_VAR 0 4
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PPUSH
38792: LD_INT 1
38794: PPUSH
38795: CALL_OW 12
38799: PLUS
38800: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38801: LD_ADDR_VAR 0 7
38805: PUSH
38806: LD_VAR 0 5
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PPUSH
38815: LD_INT 1
38817: PPUSH
38818: CALL_OW 12
38822: PLUS
38823: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38824: LD_VAR 0 6
38828: PPUSH
38829: LD_VAR 0 7
38833: PPUSH
38834: CALL_OW 488
38838: NOT
38839: IFFALSE 38861
// begin _x := x ;
38841: LD_ADDR_VAR 0 6
38845: PUSH
38846: LD_VAR 0 4
38850: ST_TO_ADDR
// _y := y ;
38851: LD_ADDR_VAR 0 7
38855: PUSH
38856: LD_VAR 0 5
38860: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38861: LD_ADDR_VAR 0 3
38865: PUSH
38866: LD_INT 1
38868: PPUSH
38869: LD_VAR 0 14
38873: PPUSH
38874: CALL_OW 12
38878: ST_TO_ADDR
// case i of 1 :
38879: LD_VAR 0 3
38883: PUSH
38884: LD_INT 1
38886: DOUBLE
38887: EQUAL
38888: IFTRUE 38892
38890: GO 38909
38892: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38893: LD_VAR 0 1
38897: PPUSH
38898: LD_VAR 0 10
38902: PPUSH
38903: CALL_OW 115
38907: GO 38970
38909: LD_INT 2
38911: DOUBLE
38912: EQUAL
38913: IFTRUE 38917
38915: GO 38939
38917: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38918: LD_VAR 0 1
38922: PPUSH
38923: LD_VAR 0 6
38927: PPUSH
38928: LD_VAR 0 7
38932: PPUSH
38933: CALL_OW 153
38937: GO 38970
38939: LD_INT 3
38941: DOUBLE
38942: EQUAL
38943: IFTRUE 38947
38945: GO 38969
38947: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38948: LD_VAR 0 1
38952: PPUSH
38953: LD_VAR 0 6
38957: PPUSH
38958: LD_VAR 0 7
38962: PPUSH
38963: CALL_OW 154
38967: GO 38970
38969: POP
// end ;
38970: LD_VAR 0 2
38974: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38975: LD_INT 0
38977: PPUSH
38978: PPUSH
38979: PPUSH
38980: PPUSH
38981: PPUSH
38982: PPUSH
// if not unit or not building then
38983: LD_VAR 0 1
38987: NOT
38988: PUSH
38989: LD_VAR 0 2
38993: NOT
38994: OR
38995: IFFALSE 38999
// exit ;
38997: GO 39157
// x := GetX ( building ) ;
38999: LD_ADDR_VAR 0 5
39003: PUSH
39004: LD_VAR 0 2
39008: PPUSH
39009: CALL_OW 250
39013: ST_TO_ADDR
// y := GetY ( building ) ;
39014: LD_ADDR_VAR 0 6
39018: PUSH
39019: LD_VAR 0 2
39023: PPUSH
39024: CALL_OW 251
39028: ST_TO_ADDR
// for i = 0 to 5 do
39029: LD_ADDR_VAR 0 4
39033: PUSH
39034: DOUBLE
39035: LD_INT 0
39037: DEC
39038: ST_TO_ADDR
39039: LD_INT 5
39041: PUSH
39042: FOR_TO
39043: IFFALSE 39155
// begin _x := ShiftX ( x , i , 3 ) ;
39045: LD_ADDR_VAR 0 7
39049: PUSH
39050: LD_VAR 0 5
39054: PPUSH
39055: LD_VAR 0 4
39059: PPUSH
39060: LD_INT 3
39062: PPUSH
39063: CALL_OW 272
39067: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39068: LD_ADDR_VAR 0 8
39072: PUSH
39073: LD_VAR 0 6
39077: PPUSH
39078: LD_VAR 0 4
39082: PPUSH
39083: LD_INT 3
39085: PPUSH
39086: CALL_OW 273
39090: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39091: LD_VAR 0 7
39095: PPUSH
39096: LD_VAR 0 8
39100: PPUSH
39101: CALL_OW 488
39105: NOT
39106: IFFALSE 39110
// continue ;
39108: GO 39042
// if HexInfo ( _x , _y ) = 0 then
39110: LD_VAR 0 7
39114: PPUSH
39115: LD_VAR 0 8
39119: PPUSH
39120: CALL_OW 428
39124: PUSH
39125: LD_INT 0
39127: EQUAL
39128: IFFALSE 39153
// begin ComMoveXY ( unit , _x , _y ) ;
39130: LD_VAR 0 1
39134: PPUSH
39135: LD_VAR 0 7
39139: PPUSH
39140: LD_VAR 0 8
39144: PPUSH
39145: CALL_OW 111
// exit ;
39149: POP
39150: POP
39151: GO 39157
// end ; end ;
39153: GO 39042
39155: POP
39156: POP
// end ;
39157: LD_VAR 0 3
39161: RET
// export function ScanBase ( side , base_area ) ; begin
39162: LD_INT 0
39164: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39165: LD_ADDR_VAR 0 3
39169: PUSH
39170: LD_VAR 0 2
39174: PPUSH
39175: LD_INT 81
39177: PUSH
39178: LD_VAR 0 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PPUSH
39187: CALL_OW 70
39191: ST_TO_ADDR
// end ;
39192: LD_VAR 0 3
39196: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39197: LD_INT 0
39199: PPUSH
39200: PPUSH
39201: PPUSH
39202: PPUSH
// result := false ;
39203: LD_ADDR_VAR 0 2
39207: PUSH
39208: LD_INT 0
39210: ST_TO_ADDR
// side := GetSide ( unit ) ;
39211: LD_ADDR_VAR 0 3
39215: PUSH
39216: LD_VAR 0 1
39220: PPUSH
39221: CALL_OW 255
39225: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39226: LD_ADDR_VAR 0 4
39230: PUSH
39231: LD_VAR 0 1
39235: PPUSH
39236: CALL_OW 248
39240: ST_TO_ADDR
// case nat of 1 :
39241: LD_VAR 0 4
39245: PUSH
39246: LD_INT 1
39248: DOUBLE
39249: EQUAL
39250: IFTRUE 39254
39252: GO 39265
39254: POP
// tech := tech_lassight ; 2 :
39255: LD_ADDR_VAR 0 5
39259: PUSH
39260: LD_INT 12
39262: ST_TO_ADDR
39263: GO 39304
39265: LD_INT 2
39267: DOUBLE
39268: EQUAL
39269: IFTRUE 39273
39271: GO 39284
39273: POP
// tech := tech_mortar ; 3 :
39274: LD_ADDR_VAR 0 5
39278: PUSH
39279: LD_INT 41
39281: ST_TO_ADDR
39282: GO 39304
39284: LD_INT 3
39286: DOUBLE
39287: EQUAL
39288: IFTRUE 39292
39290: GO 39303
39292: POP
// tech := tech_bazooka ; end ;
39293: LD_ADDR_VAR 0 5
39297: PUSH
39298: LD_INT 44
39300: ST_TO_ADDR
39301: GO 39304
39303: POP
// if Researched ( side , tech ) then
39304: LD_VAR 0 3
39308: PPUSH
39309: LD_VAR 0 5
39313: PPUSH
39314: CALL_OW 325
39318: IFFALSE 39345
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39320: LD_ADDR_VAR 0 2
39324: PUSH
39325: LD_INT 5
39327: PUSH
39328: LD_INT 8
39330: PUSH
39331: LD_INT 9
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: LIST
39338: PUSH
39339: LD_VAR 0 4
39343: ARRAY
39344: ST_TO_ADDR
// end ;
39345: LD_VAR 0 2
39349: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39350: LD_INT 0
39352: PPUSH
39353: PPUSH
39354: PPUSH
// if not mines then
39355: LD_VAR 0 2
39359: NOT
39360: IFFALSE 39364
// exit ;
39362: GO 39508
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39364: LD_ADDR_VAR 0 5
39368: PUSH
39369: LD_INT 81
39371: PUSH
39372: LD_VAR 0 1
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 3
39383: PUSH
39384: LD_INT 21
39386: PUSH
39387: LD_INT 3
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PPUSH
39402: CALL_OW 69
39406: ST_TO_ADDR
// for i in mines do
39407: LD_ADDR_VAR 0 4
39411: PUSH
39412: LD_VAR 0 2
39416: PUSH
39417: FOR_IN
39418: IFFALSE 39506
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39420: LD_VAR 0 4
39424: PUSH
39425: LD_INT 1
39427: ARRAY
39428: PPUSH
39429: LD_VAR 0 4
39433: PUSH
39434: LD_INT 2
39436: ARRAY
39437: PPUSH
39438: CALL_OW 458
39442: NOT
39443: IFFALSE 39447
// continue ;
39445: GO 39417
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39447: LD_VAR 0 4
39451: PUSH
39452: LD_INT 1
39454: ARRAY
39455: PPUSH
39456: LD_VAR 0 4
39460: PUSH
39461: LD_INT 2
39463: ARRAY
39464: PPUSH
39465: CALL_OW 428
39469: PUSH
39470: LD_VAR 0 5
39474: IN
39475: IFFALSE 39504
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39477: LD_VAR 0 4
39481: PUSH
39482: LD_INT 1
39484: ARRAY
39485: PPUSH
39486: LD_VAR 0 4
39490: PUSH
39491: LD_INT 2
39493: ARRAY
39494: PPUSH
39495: LD_VAR 0 1
39499: PPUSH
39500: CALL_OW 456
// end ;
39504: GO 39417
39506: POP
39507: POP
// end ;
39508: LD_VAR 0 3
39512: RET
// export function Count ( array ) ; var i ; begin
39513: LD_INT 0
39515: PPUSH
39516: PPUSH
// result := 0 ;
39517: LD_ADDR_VAR 0 2
39521: PUSH
39522: LD_INT 0
39524: ST_TO_ADDR
// for i in array do
39525: LD_ADDR_VAR 0 3
39529: PUSH
39530: LD_VAR 0 1
39534: PUSH
39535: FOR_IN
39536: IFFALSE 39560
// if i then
39538: LD_VAR 0 3
39542: IFFALSE 39558
// result := result + 1 ;
39544: LD_ADDR_VAR 0 2
39548: PUSH
39549: LD_VAR 0 2
39553: PUSH
39554: LD_INT 1
39556: PLUS
39557: ST_TO_ADDR
39558: GO 39535
39560: POP
39561: POP
// end ;
39562: LD_VAR 0 2
39566: RET
// export function IsEmpty ( building ) ; begin
39567: LD_INT 0
39569: PPUSH
// if not building then
39570: LD_VAR 0 1
39574: NOT
39575: IFFALSE 39579
// exit ;
39577: GO 39622
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39579: LD_ADDR_VAR 0 2
39583: PUSH
39584: LD_VAR 0 1
39588: PUSH
39589: LD_INT 22
39591: PUSH
39592: LD_VAR 0 1
39596: PPUSH
39597: CALL_OW 255
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 58
39608: PUSH
39609: EMPTY
39610: LIST
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PPUSH
39616: CALL_OW 69
39620: IN
39621: ST_TO_ADDR
// end ;
39622: LD_VAR 0 2
39626: RET
// export function IsNotFull ( building ) ; begin
39627: LD_INT 0
39629: PPUSH
// if not building then
39630: LD_VAR 0 1
39634: NOT
39635: IFFALSE 39639
// exit ;
39637: GO 39658
// result := UnitsInside ( building ) < 6 ;
39639: LD_ADDR_VAR 0 2
39643: PUSH
39644: LD_VAR 0 1
39648: PPUSH
39649: CALL_OW 313
39653: PUSH
39654: LD_INT 6
39656: LESS
39657: ST_TO_ADDR
// end ;
39658: LD_VAR 0 2
39662: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39663: LD_INT 0
39665: PPUSH
39666: PPUSH
39667: PPUSH
39668: PPUSH
// tmp := [ ] ;
39669: LD_ADDR_VAR 0 3
39673: PUSH
39674: EMPTY
39675: ST_TO_ADDR
// list := [ ] ;
39676: LD_ADDR_VAR 0 5
39680: PUSH
39681: EMPTY
39682: ST_TO_ADDR
// for i = 16 to 25 do
39683: LD_ADDR_VAR 0 4
39687: PUSH
39688: DOUBLE
39689: LD_INT 16
39691: DEC
39692: ST_TO_ADDR
39693: LD_INT 25
39695: PUSH
39696: FOR_TO
39697: IFFALSE 39770
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39699: LD_ADDR_VAR 0 3
39703: PUSH
39704: LD_VAR 0 3
39708: PUSH
39709: LD_INT 22
39711: PUSH
39712: LD_VAR 0 1
39716: PPUSH
39717: CALL_OW 255
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 91
39728: PUSH
39729: LD_VAR 0 1
39733: PUSH
39734: LD_INT 6
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 30
39744: PUSH
39745: LD_VAR 0 4
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: LIST
39758: PUSH
39759: EMPTY
39760: LIST
39761: PPUSH
39762: CALL_OW 69
39766: ADD
39767: ST_TO_ADDR
39768: GO 39696
39770: POP
39771: POP
// for i = 1 to tmp do
39772: LD_ADDR_VAR 0 4
39776: PUSH
39777: DOUBLE
39778: LD_INT 1
39780: DEC
39781: ST_TO_ADDR
39782: LD_VAR 0 3
39786: PUSH
39787: FOR_TO
39788: IFFALSE 39876
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39790: LD_ADDR_VAR 0 5
39794: PUSH
39795: LD_VAR 0 5
39799: PUSH
39800: LD_VAR 0 3
39804: PUSH
39805: LD_VAR 0 4
39809: ARRAY
39810: PPUSH
39811: CALL_OW 266
39815: PUSH
39816: LD_VAR 0 3
39820: PUSH
39821: LD_VAR 0 4
39825: ARRAY
39826: PPUSH
39827: CALL_OW 250
39831: PUSH
39832: LD_VAR 0 3
39836: PUSH
39837: LD_VAR 0 4
39841: ARRAY
39842: PPUSH
39843: CALL_OW 251
39847: PUSH
39848: LD_VAR 0 3
39852: PUSH
39853: LD_VAR 0 4
39857: ARRAY
39858: PPUSH
39859: CALL_OW 254
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: PUSH
39870: EMPTY
39871: LIST
39872: ADD
39873: ST_TO_ADDR
39874: GO 39787
39876: POP
39877: POP
// result := list ;
39878: LD_ADDR_VAR 0 2
39882: PUSH
39883: LD_VAR 0 5
39887: ST_TO_ADDR
// end ;
39888: LD_VAR 0 2
39892: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39893: LD_INT 0
39895: PPUSH
39896: PPUSH
39897: PPUSH
39898: PPUSH
39899: PPUSH
39900: PPUSH
39901: PPUSH
// if not factory then
39902: LD_VAR 0 1
39906: NOT
39907: IFFALSE 39911
// exit ;
39909: GO 40504
// if control = control_apeman then
39911: LD_VAR 0 4
39915: PUSH
39916: LD_INT 5
39918: EQUAL
39919: IFFALSE 40028
// begin tmp := UnitsInside ( factory ) ;
39921: LD_ADDR_VAR 0 8
39925: PUSH
39926: LD_VAR 0 1
39930: PPUSH
39931: CALL_OW 313
39935: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39936: LD_VAR 0 8
39940: PPUSH
39941: LD_INT 25
39943: PUSH
39944: LD_INT 12
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PPUSH
39951: CALL_OW 72
39955: NOT
39956: IFFALSE 39966
// control := control_manual ;
39958: LD_ADDR_VAR 0 4
39962: PUSH
39963: LD_INT 1
39965: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39966: LD_ADDR_VAR 0 8
39970: PUSH
39971: LD_VAR 0 1
39975: PPUSH
39976: CALL 39663 0 1
39980: ST_TO_ADDR
// if tmp then
39981: LD_VAR 0 8
39985: IFFALSE 40028
// begin for i in tmp do
39987: LD_ADDR_VAR 0 7
39991: PUSH
39992: LD_VAR 0 8
39996: PUSH
39997: FOR_IN
39998: IFFALSE 40026
// if i [ 1 ] = b_ext_radio then
40000: LD_VAR 0 7
40004: PUSH
40005: LD_INT 1
40007: ARRAY
40008: PUSH
40009: LD_INT 22
40011: EQUAL
40012: IFFALSE 40024
// begin control := control_remote ;
40014: LD_ADDR_VAR 0 4
40018: PUSH
40019: LD_INT 2
40021: ST_TO_ADDR
// break ;
40022: GO 40026
// end ;
40024: GO 39997
40026: POP
40027: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40028: LD_VAR 0 1
40032: PPUSH
40033: LD_VAR 0 2
40037: PPUSH
40038: LD_VAR 0 3
40042: PPUSH
40043: LD_VAR 0 4
40047: PPUSH
40048: LD_VAR 0 5
40052: PPUSH
40053: CALL_OW 448
40057: IFFALSE 40092
// begin result := [ chassis , engine , control , weapon ] ;
40059: LD_ADDR_VAR 0 6
40063: PUSH
40064: LD_VAR 0 2
40068: PUSH
40069: LD_VAR 0 3
40073: PUSH
40074: LD_VAR 0 4
40078: PUSH
40079: LD_VAR 0 5
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: ST_TO_ADDR
// exit ;
40090: GO 40504
// end ; _chassis := AvailableChassisList ( factory ) ;
40092: LD_ADDR_VAR 0 9
40096: PUSH
40097: LD_VAR 0 1
40101: PPUSH
40102: CALL_OW 475
40106: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40107: LD_ADDR_VAR 0 11
40111: PUSH
40112: LD_VAR 0 1
40116: PPUSH
40117: CALL_OW 476
40121: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40122: LD_ADDR_VAR 0 12
40126: PUSH
40127: LD_VAR 0 1
40131: PPUSH
40132: CALL_OW 477
40136: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40137: LD_ADDR_VAR 0 10
40141: PUSH
40142: LD_VAR 0 1
40146: PPUSH
40147: CALL_OW 478
40151: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40152: LD_VAR 0 9
40156: NOT
40157: PUSH
40158: LD_VAR 0 11
40162: NOT
40163: OR
40164: PUSH
40165: LD_VAR 0 12
40169: NOT
40170: OR
40171: PUSH
40172: LD_VAR 0 10
40176: NOT
40177: OR
40178: IFFALSE 40213
// begin result := [ chassis , engine , control , weapon ] ;
40180: LD_ADDR_VAR 0 6
40184: PUSH
40185: LD_VAR 0 2
40189: PUSH
40190: LD_VAR 0 3
40194: PUSH
40195: LD_VAR 0 4
40199: PUSH
40200: LD_VAR 0 5
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: ST_TO_ADDR
// exit ;
40211: GO 40504
// end ; if not chassis in _chassis then
40213: LD_VAR 0 2
40217: PUSH
40218: LD_VAR 0 9
40222: IN
40223: NOT
40224: IFFALSE 40250
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40226: LD_ADDR_VAR 0 2
40230: PUSH
40231: LD_VAR 0 9
40235: PUSH
40236: LD_INT 1
40238: PPUSH
40239: LD_VAR 0 9
40243: PPUSH
40244: CALL_OW 12
40248: ARRAY
40249: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40250: LD_VAR 0 2
40254: PPUSH
40255: LD_VAR 0 3
40259: PPUSH
40260: CALL 40509 0 2
40264: NOT
40265: IFFALSE 40324
// repeat engine := _engine [ 1 ] ;
40267: LD_ADDR_VAR 0 3
40271: PUSH
40272: LD_VAR 0 11
40276: PUSH
40277: LD_INT 1
40279: ARRAY
40280: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40281: LD_ADDR_VAR 0 11
40285: PUSH
40286: LD_VAR 0 11
40290: PPUSH
40291: LD_INT 1
40293: PPUSH
40294: CALL_OW 3
40298: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40299: LD_VAR 0 2
40303: PPUSH
40304: LD_VAR 0 3
40308: PPUSH
40309: CALL 40509 0 2
40313: PUSH
40314: LD_VAR 0 11
40318: PUSH
40319: EMPTY
40320: EQUAL
40321: OR
40322: IFFALSE 40267
// if not control in _control then
40324: LD_VAR 0 4
40328: PUSH
40329: LD_VAR 0 12
40333: IN
40334: NOT
40335: IFFALSE 40361
// control := _control [ rand ( 1 , _control ) ] ;
40337: LD_ADDR_VAR 0 4
40341: PUSH
40342: LD_VAR 0 12
40346: PUSH
40347: LD_INT 1
40349: PPUSH
40350: LD_VAR 0 12
40354: PPUSH
40355: CALL_OW 12
40359: ARRAY
40360: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40361: LD_VAR 0 2
40365: PPUSH
40366: LD_VAR 0 5
40370: PPUSH
40371: CALL 40729 0 2
40375: NOT
40376: IFFALSE 40435
// repeat weapon := _weapon [ 1 ] ;
40378: LD_ADDR_VAR 0 5
40382: PUSH
40383: LD_VAR 0 10
40387: PUSH
40388: LD_INT 1
40390: ARRAY
40391: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40392: LD_ADDR_VAR 0 10
40396: PUSH
40397: LD_VAR 0 10
40401: PPUSH
40402: LD_INT 1
40404: PPUSH
40405: CALL_OW 3
40409: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40410: LD_VAR 0 2
40414: PPUSH
40415: LD_VAR 0 5
40419: PPUSH
40420: CALL 40729 0 2
40424: PUSH
40425: LD_VAR 0 10
40429: PUSH
40430: EMPTY
40431: EQUAL
40432: OR
40433: IFFALSE 40378
// result := [ ] ;
40435: LD_ADDR_VAR 0 6
40439: PUSH
40440: EMPTY
40441: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40442: LD_VAR 0 1
40446: PPUSH
40447: LD_VAR 0 2
40451: PPUSH
40452: LD_VAR 0 3
40456: PPUSH
40457: LD_VAR 0 4
40461: PPUSH
40462: LD_VAR 0 5
40466: PPUSH
40467: CALL_OW 448
40471: IFFALSE 40504
// result := [ chassis , engine , control , weapon ] ;
40473: LD_ADDR_VAR 0 6
40477: PUSH
40478: LD_VAR 0 2
40482: PUSH
40483: LD_VAR 0 3
40487: PUSH
40488: LD_VAR 0 4
40492: PUSH
40493: LD_VAR 0 5
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: ST_TO_ADDR
// end ;
40504: LD_VAR 0 6
40508: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40509: LD_INT 0
40511: PPUSH
// if not chassis or not engine then
40512: LD_VAR 0 1
40516: NOT
40517: PUSH
40518: LD_VAR 0 2
40522: NOT
40523: OR
40524: IFFALSE 40528
// exit ;
40526: GO 40724
// case engine of engine_solar :
40528: LD_VAR 0 2
40532: PUSH
40533: LD_INT 2
40535: DOUBLE
40536: EQUAL
40537: IFTRUE 40541
40539: GO 40579
40541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40542: LD_ADDR_VAR 0 3
40546: PUSH
40547: LD_INT 11
40549: PUSH
40550: LD_INT 12
40552: PUSH
40553: LD_INT 13
40555: PUSH
40556: LD_INT 14
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: LD_INT 3
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: ST_TO_ADDR
40577: GO 40708
40579: LD_INT 1
40581: DOUBLE
40582: EQUAL
40583: IFTRUE 40587
40585: GO 40649
40587: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40588: LD_ADDR_VAR 0 3
40592: PUSH
40593: LD_INT 11
40595: PUSH
40596: LD_INT 12
40598: PUSH
40599: LD_INT 13
40601: PUSH
40602: LD_INT 14
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: LD_INT 3
40613: PUSH
40614: LD_INT 4
40616: PUSH
40617: LD_INT 5
40619: PUSH
40620: LD_INT 21
40622: PUSH
40623: LD_INT 23
40625: PUSH
40626: LD_INT 22
40628: PUSH
40629: LD_INT 24
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: ST_TO_ADDR
40647: GO 40708
40649: LD_INT 3
40651: DOUBLE
40652: EQUAL
40653: IFTRUE 40657
40655: GO 40707
40657: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40658: LD_ADDR_VAR 0 3
40662: PUSH
40663: LD_INT 13
40665: PUSH
40666: LD_INT 14
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: LD_INT 3
40674: PUSH
40675: LD_INT 4
40677: PUSH
40678: LD_INT 5
40680: PUSH
40681: LD_INT 21
40683: PUSH
40684: LD_INT 22
40686: PUSH
40687: LD_INT 23
40689: PUSH
40690: LD_INT 24
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: ST_TO_ADDR
40705: GO 40708
40707: POP
// result := ( chassis in result ) ;
40708: LD_ADDR_VAR 0 3
40712: PUSH
40713: LD_VAR 0 1
40717: PUSH
40718: LD_VAR 0 3
40722: IN
40723: ST_TO_ADDR
// end ;
40724: LD_VAR 0 3
40728: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40729: LD_INT 0
40731: PPUSH
// if not chassis or not weapon then
40732: LD_VAR 0 1
40736: NOT
40737: PUSH
40738: LD_VAR 0 2
40742: NOT
40743: OR
40744: IFFALSE 40748
// exit ;
40746: GO 41810
// case weapon of us_machine_gun :
40748: LD_VAR 0 2
40752: PUSH
40753: LD_INT 2
40755: DOUBLE
40756: EQUAL
40757: IFTRUE 40761
40759: GO 40791
40761: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40762: LD_ADDR_VAR 0 3
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: LD_INT 4
40778: PUSH
40779: LD_INT 5
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: ST_TO_ADDR
40789: GO 41794
40791: LD_INT 3
40793: DOUBLE
40794: EQUAL
40795: IFTRUE 40799
40797: GO 40829
40799: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40800: LD_ADDR_VAR 0 3
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: LD_INT 3
40813: PUSH
40814: LD_INT 4
40816: PUSH
40817: LD_INT 5
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: ST_TO_ADDR
40827: GO 41794
40829: LD_INT 11
40831: DOUBLE
40832: EQUAL
40833: IFTRUE 40837
40835: GO 40867
40837: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40838: LD_ADDR_VAR 0 3
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: LD_INT 3
40851: PUSH
40852: LD_INT 4
40854: PUSH
40855: LD_INT 5
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: ST_TO_ADDR
40865: GO 41794
40867: LD_INT 4
40869: DOUBLE
40870: EQUAL
40871: IFTRUE 40875
40873: GO 40901
40875: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40876: LD_ADDR_VAR 0 3
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 3
40886: PUSH
40887: LD_INT 4
40889: PUSH
40890: LD_INT 5
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: ST_TO_ADDR
40899: GO 41794
40901: LD_INT 5
40903: DOUBLE
40904: EQUAL
40905: IFTRUE 40909
40907: GO 40935
40909: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40910: LD_ADDR_VAR 0 3
40914: PUSH
40915: LD_INT 2
40917: PUSH
40918: LD_INT 3
40920: PUSH
40921: LD_INT 4
40923: PUSH
40924: LD_INT 5
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: ST_TO_ADDR
40933: GO 41794
40935: LD_INT 9
40937: DOUBLE
40938: EQUAL
40939: IFTRUE 40943
40941: GO 40969
40943: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40944: LD_ADDR_VAR 0 3
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 3
40954: PUSH
40955: LD_INT 4
40957: PUSH
40958: LD_INT 5
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: ST_TO_ADDR
40967: GO 41794
40969: LD_INT 7
40971: DOUBLE
40972: EQUAL
40973: IFTRUE 40977
40975: GO 41003
40977: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40978: LD_ADDR_VAR 0 3
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: LD_INT 3
40988: PUSH
40989: LD_INT 4
40991: PUSH
40992: LD_INT 5
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: ST_TO_ADDR
41001: GO 41794
41003: LD_INT 12
41005: DOUBLE
41006: EQUAL
41007: IFTRUE 41011
41009: GO 41037
41011: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41012: LD_ADDR_VAR 0 3
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: LD_INT 3
41022: PUSH
41023: LD_INT 4
41025: PUSH
41026: LD_INT 5
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: ST_TO_ADDR
41035: GO 41794
41037: LD_INT 13
41039: DOUBLE
41040: EQUAL
41041: IFTRUE 41045
41043: GO 41071
41045: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41046: LD_ADDR_VAR 0 3
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: LD_INT 4
41059: PUSH
41060: LD_INT 5
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: ST_TO_ADDR
41069: GO 41794
41071: LD_INT 14
41073: DOUBLE
41074: EQUAL
41075: IFTRUE 41079
41077: GO 41097
41079: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41080: LD_ADDR_VAR 0 3
41084: PUSH
41085: LD_INT 4
41087: PUSH
41088: LD_INT 5
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: ST_TO_ADDR
41095: GO 41794
41097: LD_INT 6
41099: DOUBLE
41100: EQUAL
41101: IFTRUE 41105
41103: GO 41123
41105: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41106: LD_ADDR_VAR 0 3
41110: PUSH
41111: LD_INT 4
41113: PUSH
41114: LD_INT 5
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: ST_TO_ADDR
41121: GO 41794
41123: LD_INT 10
41125: DOUBLE
41126: EQUAL
41127: IFTRUE 41131
41129: GO 41149
41131: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41132: LD_ADDR_VAR 0 3
41136: PUSH
41137: LD_INT 4
41139: PUSH
41140: LD_INT 5
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: ST_TO_ADDR
41147: GO 41794
41149: LD_INT 22
41151: DOUBLE
41152: EQUAL
41153: IFTRUE 41157
41155: GO 41183
41157: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41158: LD_ADDR_VAR 0 3
41162: PUSH
41163: LD_INT 11
41165: PUSH
41166: LD_INT 12
41168: PUSH
41169: LD_INT 13
41171: PUSH
41172: LD_INT 14
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: ST_TO_ADDR
41181: GO 41794
41183: LD_INT 23
41185: DOUBLE
41186: EQUAL
41187: IFTRUE 41191
41189: GO 41217
41191: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41192: LD_ADDR_VAR 0 3
41196: PUSH
41197: LD_INT 11
41199: PUSH
41200: LD_INT 12
41202: PUSH
41203: LD_INT 13
41205: PUSH
41206: LD_INT 14
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: ST_TO_ADDR
41215: GO 41794
41217: LD_INT 24
41219: DOUBLE
41220: EQUAL
41221: IFTRUE 41225
41223: GO 41251
41225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41226: LD_ADDR_VAR 0 3
41230: PUSH
41231: LD_INT 11
41233: PUSH
41234: LD_INT 12
41236: PUSH
41237: LD_INT 13
41239: PUSH
41240: LD_INT 14
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: ST_TO_ADDR
41249: GO 41794
41251: LD_INT 30
41253: DOUBLE
41254: EQUAL
41255: IFTRUE 41259
41257: GO 41285
41259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41260: LD_ADDR_VAR 0 3
41264: PUSH
41265: LD_INT 11
41267: PUSH
41268: LD_INT 12
41270: PUSH
41271: LD_INT 13
41273: PUSH
41274: LD_INT 14
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: ST_TO_ADDR
41283: GO 41794
41285: LD_INT 25
41287: DOUBLE
41288: EQUAL
41289: IFTRUE 41293
41291: GO 41311
41293: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41294: LD_ADDR_VAR 0 3
41298: PUSH
41299: LD_INT 13
41301: PUSH
41302: LD_INT 14
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: ST_TO_ADDR
41309: GO 41794
41311: LD_INT 27
41313: DOUBLE
41314: EQUAL
41315: IFTRUE 41319
41317: GO 41337
41319: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41320: LD_ADDR_VAR 0 3
41324: PUSH
41325: LD_INT 13
41327: PUSH
41328: LD_INT 14
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: ST_TO_ADDR
41335: GO 41794
41337: LD_EXP 54
41341: DOUBLE
41342: EQUAL
41343: IFTRUE 41347
41345: GO 41373
41347: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41348: LD_ADDR_VAR 0 3
41352: PUSH
41353: LD_INT 11
41355: PUSH
41356: LD_INT 12
41358: PUSH
41359: LD_INT 13
41361: PUSH
41362: LD_INT 14
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: ST_TO_ADDR
41371: GO 41794
41373: LD_INT 28
41375: DOUBLE
41376: EQUAL
41377: IFTRUE 41381
41379: GO 41399
41381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41382: LD_ADDR_VAR 0 3
41386: PUSH
41387: LD_INT 13
41389: PUSH
41390: LD_INT 14
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: ST_TO_ADDR
41397: GO 41794
41399: LD_INT 29
41401: DOUBLE
41402: EQUAL
41403: IFTRUE 41407
41405: GO 41425
41407: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41408: LD_ADDR_VAR 0 3
41412: PUSH
41413: LD_INT 13
41415: PUSH
41416: LD_INT 14
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: ST_TO_ADDR
41423: GO 41794
41425: LD_INT 31
41427: DOUBLE
41428: EQUAL
41429: IFTRUE 41433
41431: GO 41451
41433: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41434: LD_ADDR_VAR 0 3
41438: PUSH
41439: LD_INT 13
41441: PUSH
41442: LD_INT 14
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: ST_TO_ADDR
41449: GO 41794
41451: LD_INT 26
41453: DOUBLE
41454: EQUAL
41455: IFTRUE 41459
41457: GO 41477
41459: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41460: LD_ADDR_VAR 0 3
41464: PUSH
41465: LD_INT 13
41467: PUSH
41468: LD_INT 14
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: ST_TO_ADDR
41475: GO 41794
41477: LD_INT 42
41479: DOUBLE
41480: EQUAL
41481: IFTRUE 41485
41483: GO 41511
41485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41486: LD_ADDR_VAR 0 3
41490: PUSH
41491: LD_INT 21
41493: PUSH
41494: LD_INT 22
41496: PUSH
41497: LD_INT 23
41499: PUSH
41500: LD_INT 24
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: ST_TO_ADDR
41509: GO 41794
41511: LD_INT 43
41513: DOUBLE
41514: EQUAL
41515: IFTRUE 41519
41517: GO 41545
41519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41520: LD_ADDR_VAR 0 3
41524: PUSH
41525: LD_INT 21
41527: PUSH
41528: LD_INT 22
41530: PUSH
41531: LD_INT 23
41533: PUSH
41534: LD_INT 24
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: ST_TO_ADDR
41543: GO 41794
41545: LD_INT 44
41547: DOUBLE
41548: EQUAL
41549: IFTRUE 41553
41551: GO 41579
41553: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41554: LD_ADDR_VAR 0 3
41558: PUSH
41559: LD_INT 21
41561: PUSH
41562: LD_INT 22
41564: PUSH
41565: LD_INT 23
41567: PUSH
41568: LD_INT 24
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: ST_TO_ADDR
41577: GO 41794
41579: LD_INT 45
41581: DOUBLE
41582: EQUAL
41583: IFTRUE 41587
41585: GO 41613
41587: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41588: LD_ADDR_VAR 0 3
41592: PUSH
41593: LD_INT 21
41595: PUSH
41596: LD_INT 22
41598: PUSH
41599: LD_INT 23
41601: PUSH
41602: LD_INT 24
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: ST_TO_ADDR
41611: GO 41794
41613: LD_INT 49
41615: DOUBLE
41616: EQUAL
41617: IFTRUE 41621
41619: GO 41647
41621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41622: LD_ADDR_VAR 0 3
41626: PUSH
41627: LD_INT 21
41629: PUSH
41630: LD_INT 22
41632: PUSH
41633: LD_INT 23
41635: PUSH
41636: LD_INT 24
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: ST_TO_ADDR
41645: GO 41794
41647: LD_INT 51
41649: DOUBLE
41650: EQUAL
41651: IFTRUE 41655
41653: GO 41681
41655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41656: LD_ADDR_VAR 0 3
41660: PUSH
41661: LD_INT 21
41663: PUSH
41664: LD_INT 22
41666: PUSH
41667: LD_INT 23
41669: PUSH
41670: LD_INT 24
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: ST_TO_ADDR
41679: GO 41794
41681: LD_INT 52
41683: DOUBLE
41684: EQUAL
41685: IFTRUE 41689
41687: GO 41715
41689: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41690: LD_ADDR_VAR 0 3
41694: PUSH
41695: LD_INT 21
41697: PUSH
41698: LD_INT 22
41700: PUSH
41701: LD_INT 23
41703: PUSH
41704: LD_INT 24
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: ST_TO_ADDR
41713: GO 41794
41715: LD_INT 53
41717: DOUBLE
41718: EQUAL
41719: IFTRUE 41723
41721: GO 41741
41723: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41724: LD_ADDR_VAR 0 3
41728: PUSH
41729: LD_INT 23
41731: PUSH
41732: LD_INT 24
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: ST_TO_ADDR
41739: GO 41794
41741: LD_INT 46
41743: DOUBLE
41744: EQUAL
41745: IFTRUE 41749
41747: GO 41767
41749: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41750: LD_ADDR_VAR 0 3
41754: PUSH
41755: LD_INT 23
41757: PUSH
41758: LD_INT 24
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: ST_TO_ADDR
41765: GO 41794
41767: LD_INT 47
41769: DOUBLE
41770: EQUAL
41771: IFTRUE 41775
41773: GO 41793
41775: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41776: LD_ADDR_VAR 0 3
41780: PUSH
41781: LD_INT 23
41783: PUSH
41784: LD_INT 24
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: ST_TO_ADDR
41791: GO 41794
41793: POP
// result := ( chassis in result ) ;
41794: LD_ADDR_VAR 0 3
41798: PUSH
41799: LD_VAR 0 1
41803: PUSH
41804: LD_VAR 0 3
41808: IN
41809: ST_TO_ADDR
// end ;
41810: LD_VAR 0 3
41814: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41815: LD_INT 0
41817: PPUSH
41818: PPUSH
41819: PPUSH
41820: PPUSH
41821: PPUSH
41822: PPUSH
41823: PPUSH
// result := array ;
41824: LD_ADDR_VAR 0 5
41828: PUSH
41829: LD_VAR 0 1
41833: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41834: LD_VAR 0 1
41838: NOT
41839: PUSH
41840: LD_VAR 0 2
41844: NOT
41845: OR
41846: PUSH
41847: LD_VAR 0 3
41851: NOT
41852: OR
41853: PUSH
41854: LD_VAR 0 2
41858: PUSH
41859: LD_VAR 0 1
41863: GREATER
41864: OR
41865: PUSH
41866: LD_VAR 0 3
41870: PUSH
41871: LD_VAR 0 1
41875: GREATER
41876: OR
41877: IFFALSE 41881
// exit ;
41879: GO 42177
// if direction then
41881: LD_VAR 0 4
41885: IFFALSE 41949
// begin d := 1 ;
41887: LD_ADDR_VAR 0 9
41891: PUSH
41892: LD_INT 1
41894: ST_TO_ADDR
// if i_from > i_to then
41895: LD_VAR 0 2
41899: PUSH
41900: LD_VAR 0 3
41904: GREATER
41905: IFFALSE 41931
// length := ( array - i_from ) + i_to else
41907: LD_ADDR_VAR 0 11
41911: PUSH
41912: LD_VAR 0 1
41916: PUSH
41917: LD_VAR 0 2
41921: MINUS
41922: PUSH
41923: LD_VAR 0 3
41927: PLUS
41928: ST_TO_ADDR
41929: GO 41947
// length := i_to - i_from ;
41931: LD_ADDR_VAR 0 11
41935: PUSH
41936: LD_VAR 0 3
41940: PUSH
41941: LD_VAR 0 2
41945: MINUS
41946: ST_TO_ADDR
// end else
41947: GO 42010
// begin d := - 1 ;
41949: LD_ADDR_VAR 0 9
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: ST_TO_ADDR
// if i_from > i_to then
41958: LD_VAR 0 2
41962: PUSH
41963: LD_VAR 0 3
41967: GREATER
41968: IFFALSE 41988
// length := i_from - i_to else
41970: LD_ADDR_VAR 0 11
41974: PUSH
41975: LD_VAR 0 2
41979: PUSH
41980: LD_VAR 0 3
41984: MINUS
41985: ST_TO_ADDR
41986: GO 42010
// length := ( array - i_to ) + i_from ;
41988: LD_ADDR_VAR 0 11
41992: PUSH
41993: LD_VAR 0 1
41997: PUSH
41998: LD_VAR 0 3
42002: MINUS
42003: PUSH
42004: LD_VAR 0 2
42008: PLUS
42009: ST_TO_ADDR
// end ; if not length then
42010: LD_VAR 0 11
42014: NOT
42015: IFFALSE 42019
// exit ;
42017: GO 42177
// tmp := array ;
42019: LD_ADDR_VAR 0 10
42023: PUSH
42024: LD_VAR 0 1
42028: ST_TO_ADDR
// for i = 1 to length do
42029: LD_ADDR_VAR 0 6
42033: PUSH
42034: DOUBLE
42035: LD_INT 1
42037: DEC
42038: ST_TO_ADDR
42039: LD_VAR 0 11
42043: PUSH
42044: FOR_TO
42045: IFFALSE 42165
// begin for j = 1 to array do
42047: LD_ADDR_VAR 0 7
42051: PUSH
42052: DOUBLE
42053: LD_INT 1
42055: DEC
42056: ST_TO_ADDR
42057: LD_VAR 0 1
42061: PUSH
42062: FOR_TO
42063: IFFALSE 42151
// begin k := j + d ;
42065: LD_ADDR_VAR 0 8
42069: PUSH
42070: LD_VAR 0 7
42074: PUSH
42075: LD_VAR 0 9
42079: PLUS
42080: ST_TO_ADDR
// if k > array then
42081: LD_VAR 0 8
42085: PUSH
42086: LD_VAR 0 1
42090: GREATER
42091: IFFALSE 42101
// k := 1 ;
42093: LD_ADDR_VAR 0 8
42097: PUSH
42098: LD_INT 1
42100: ST_TO_ADDR
// if not k then
42101: LD_VAR 0 8
42105: NOT
42106: IFFALSE 42118
// k := array ;
42108: LD_ADDR_VAR 0 8
42112: PUSH
42113: LD_VAR 0 1
42117: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42118: LD_ADDR_VAR 0 10
42122: PUSH
42123: LD_VAR 0 10
42127: PPUSH
42128: LD_VAR 0 8
42132: PPUSH
42133: LD_VAR 0 1
42137: PUSH
42138: LD_VAR 0 7
42142: ARRAY
42143: PPUSH
42144: CALL_OW 1
42148: ST_TO_ADDR
// end ;
42149: GO 42062
42151: POP
42152: POP
// array := tmp ;
42153: LD_ADDR_VAR 0 1
42157: PUSH
42158: LD_VAR 0 10
42162: ST_TO_ADDR
// end ;
42163: GO 42044
42165: POP
42166: POP
// result := array ;
42167: LD_ADDR_VAR 0 5
42171: PUSH
42172: LD_VAR 0 1
42176: ST_TO_ADDR
// end ;
42177: LD_VAR 0 5
42181: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42182: LD_INT 0
42184: PPUSH
42185: PPUSH
// result := 0 ;
42186: LD_ADDR_VAR 0 3
42190: PUSH
42191: LD_INT 0
42193: ST_TO_ADDR
// if not array or not value in array then
42194: LD_VAR 0 1
42198: NOT
42199: PUSH
42200: LD_VAR 0 2
42204: PUSH
42205: LD_VAR 0 1
42209: IN
42210: NOT
42211: OR
42212: IFFALSE 42216
// exit ;
42214: GO 42270
// for i = 1 to array do
42216: LD_ADDR_VAR 0 4
42220: PUSH
42221: DOUBLE
42222: LD_INT 1
42224: DEC
42225: ST_TO_ADDR
42226: LD_VAR 0 1
42230: PUSH
42231: FOR_TO
42232: IFFALSE 42268
// if value = array [ i ] then
42234: LD_VAR 0 2
42238: PUSH
42239: LD_VAR 0 1
42243: PUSH
42244: LD_VAR 0 4
42248: ARRAY
42249: EQUAL
42250: IFFALSE 42266
// begin result := i ;
42252: LD_ADDR_VAR 0 3
42256: PUSH
42257: LD_VAR 0 4
42261: ST_TO_ADDR
// exit ;
42262: POP
42263: POP
42264: GO 42270
// end ;
42266: GO 42231
42268: POP
42269: POP
// end ;
42270: LD_VAR 0 3
42274: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42275: LD_INT 0
42277: PPUSH
// vc_chassis := chassis ;
42278: LD_ADDR_OWVAR 37
42282: PUSH
42283: LD_VAR 0 1
42287: ST_TO_ADDR
// vc_engine := engine ;
42288: LD_ADDR_OWVAR 39
42292: PUSH
42293: LD_VAR 0 2
42297: ST_TO_ADDR
// vc_control := control ;
42298: LD_ADDR_OWVAR 38
42302: PUSH
42303: LD_VAR 0 3
42307: ST_TO_ADDR
// vc_weapon := weapon ;
42308: LD_ADDR_OWVAR 40
42312: PUSH
42313: LD_VAR 0 4
42317: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42318: LD_ADDR_OWVAR 41
42322: PUSH
42323: LD_VAR 0 5
42327: ST_TO_ADDR
// end ;
42328: LD_VAR 0 6
42332: RET
// export function WantPlant ( unit ) ; var task ; begin
42333: LD_INT 0
42335: PPUSH
42336: PPUSH
// result := false ;
42337: LD_ADDR_VAR 0 2
42341: PUSH
42342: LD_INT 0
42344: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42345: LD_ADDR_VAR 0 3
42349: PUSH
42350: LD_VAR 0 1
42354: PPUSH
42355: CALL_OW 437
42359: ST_TO_ADDR
// if task then
42360: LD_VAR 0 3
42364: IFFALSE 42392
// if task [ 1 ] [ 1 ] = p then
42366: LD_VAR 0 3
42370: PUSH
42371: LD_INT 1
42373: ARRAY
42374: PUSH
42375: LD_INT 1
42377: ARRAY
42378: PUSH
42379: LD_STRING p
42381: EQUAL
42382: IFFALSE 42392
// result := true ;
42384: LD_ADDR_VAR 0 2
42388: PUSH
42389: LD_INT 1
42391: ST_TO_ADDR
// end ;
42392: LD_VAR 0 2
42396: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42397: LD_INT 0
42399: PPUSH
42400: PPUSH
42401: PPUSH
42402: PPUSH
// if pos < 1 then
42403: LD_VAR 0 2
42407: PUSH
42408: LD_INT 1
42410: LESS
42411: IFFALSE 42415
// exit ;
42413: GO 42718
// if pos = 1 then
42415: LD_VAR 0 2
42419: PUSH
42420: LD_INT 1
42422: EQUAL
42423: IFFALSE 42456
// result := Replace ( arr , pos [ 1 ] , value ) else
42425: LD_ADDR_VAR 0 4
42429: PUSH
42430: LD_VAR 0 1
42434: PPUSH
42435: LD_VAR 0 2
42439: PUSH
42440: LD_INT 1
42442: ARRAY
42443: PPUSH
42444: LD_VAR 0 3
42448: PPUSH
42449: CALL_OW 1
42453: ST_TO_ADDR
42454: GO 42718
// begin tmp := arr ;
42456: LD_ADDR_VAR 0 6
42460: PUSH
42461: LD_VAR 0 1
42465: ST_TO_ADDR
// s_arr := [ tmp ] ;
42466: LD_ADDR_VAR 0 7
42470: PUSH
42471: LD_VAR 0 6
42475: PUSH
42476: EMPTY
42477: LIST
42478: ST_TO_ADDR
// for i = 1 to pos - 1 do
42479: LD_ADDR_VAR 0 5
42483: PUSH
42484: DOUBLE
42485: LD_INT 1
42487: DEC
42488: ST_TO_ADDR
42489: LD_VAR 0 2
42493: PUSH
42494: LD_INT 1
42496: MINUS
42497: PUSH
42498: FOR_TO
42499: IFFALSE 42544
// begin tmp := tmp [ pos [ i ] ] ;
42501: LD_ADDR_VAR 0 6
42505: PUSH
42506: LD_VAR 0 6
42510: PUSH
42511: LD_VAR 0 2
42515: PUSH
42516: LD_VAR 0 5
42520: ARRAY
42521: ARRAY
42522: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42523: LD_ADDR_VAR 0 7
42527: PUSH
42528: LD_VAR 0 7
42532: PUSH
42533: LD_VAR 0 6
42537: PUSH
42538: EMPTY
42539: LIST
42540: ADD
42541: ST_TO_ADDR
// end ;
42542: GO 42498
42544: POP
42545: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42546: LD_ADDR_VAR 0 6
42550: PUSH
42551: LD_VAR 0 6
42555: PPUSH
42556: LD_VAR 0 2
42560: PUSH
42561: LD_VAR 0 2
42565: ARRAY
42566: PPUSH
42567: LD_VAR 0 3
42571: PPUSH
42572: CALL_OW 1
42576: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42577: LD_ADDR_VAR 0 7
42581: PUSH
42582: LD_VAR 0 7
42586: PPUSH
42587: LD_VAR 0 7
42591: PPUSH
42592: LD_VAR 0 6
42596: PPUSH
42597: CALL_OW 1
42601: ST_TO_ADDR
// for i = s_arr downto 2 do
42602: LD_ADDR_VAR 0 5
42606: PUSH
42607: DOUBLE
42608: LD_VAR 0 7
42612: INC
42613: ST_TO_ADDR
42614: LD_INT 2
42616: PUSH
42617: FOR_DOWNTO
42618: IFFALSE 42702
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42620: LD_ADDR_VAR 0 6
42624: PUSH
42625: LD_VAR 0 7
42629: PUSH
42630: LD_VAR 0 5
42634: PUSH
42635: LD_INT 1
42637: MINUS
42638: ARRAY
42639: PPUSH
42640: LD_VAR 0 2
42644: PUSH
42645: LD_VAR 0 5
42649: PUSH
42650: LD_INT 1
42652: MINUS
42653: ARRAY
42654: PPUSH
42655: LD_VAR 0 7
42659: PUSH
42660: LD_VAR 0 5
42664: ARRAY
42665: PPUSH
42666: CALL_OW 1
42670: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42671: LD_ADDR_VAR 0 7
42675: PUSH
42676: LD_VAR 0 7
42680: PPUSH
42681: LD_VAR 0 5
42685: PUSH
42686: LD_INT 1
42688: MINUS
42689: PPUSH
42690: LD_VAR 0 6
42694: PPUSH
42695: CALL_OW 1
42699: ST_TO_ADDR
// end ;
42700: GO 42617
42702: POP
42703: POP
// result := s_arr [ 1 ] ;
42704: LD_ADDR_VAR 0 4
42708: PUSH
42709: LD_VAR 0 7
42713: PUSH
42714: LD_INT 1
42716: ARRAY
42717: ST_TO_ADDR
// end ; end ;
42718: LD_VAR 0 4
42722: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42723: LD_INT 0
42725: PPUSH
42726: PPUSH
// if not list then
42727: LD_VAR 0 1
42731: NOT
42732: IFFALSE 42736
// exit ;
42734: GO 42827
// i := list [ pos1 ] ;
42736: LD_ADDR_VAR 0 5
42740: PUSH
42741: LD_VAR 0 1
42745: PUSH
42746: LD_VAR 0 2
42750: ARRAY
42751: ST_TO_ADDR
// if not i then
42752: LD_VAR 0 5
42756: NOT
42757: IFFALSE 42761
// exit ;
42759: GO 42827
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42761: LD_ADDR_VAR 0 1
42765: PUSH
42766: LD_VAR 0 1
42770: PPUSH
42771: LD_VAR 0 2
42775: PPUSH
42776: LD_VAR 0 1
42780: PUSH
42781: LD_VAR 0 3
42785: ARRAY
42786: PPUSH
42787: CALL_OW 1
42791: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42792: LD_ADDR_VAR 0 1
42796: PUSH
42797: LD_VAR 0 1
42801: PPUSH
42802: LD_VAR 0 3
42806: PPUSH
42807: LD_VAR 0 5
42811: PPUSH
42812: CALL_OW 1
42816: ST_TO_ADDR
// result := list ;
42817: LD_ADDR_VAR 0 4
42821: PUSH
42822: LD_VAR 0 1
42826: ST_TO_ADDR
// end ;
42827: LD_VAR 0 4
42831: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42832: LD_INT 0
42834: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42835: LD_ADDR_VAR 0 5
42839: PUSH
42840: LD_VAR 0 1
42844: PPUSH
42845: CALL_OW 250
42849: PPUSH
42850: LD_VAR 0 1
42854: PPUSH
42855: CALL_OW 251
42859: PPUSH
42860: LD_VAR 0 2
42864: PPUSH
42865: LD_VAR 0 3
42869: PPUSH
42870: LD_VAR 0 4
42874: PPUSH
42875: CALL 42885 0 5
42879: ST_TO_ADDR
// end ;
42880: LD_VAR 0 5
42884: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42885: LD_INT 0
42887: PPUSH
42888: PPUSH
42889: PPUSH
42890: PPUSH
// if not list then
42891: LD_VAR 0 3
42895: NOT
42896: IFFALSE 42900
// exit ;
42898: GO 43288
// result := [ ] ;
42900: LD_ADDR_VAR 0 6
42904: PUSH
42905: EMPTY
42906: ST_TO_ADDR
// for i in list do
42907: LD_ADDR_VAR 0 7
42911: PUSH
42912: LD_VAR 0 3
42916: PUSH
42917: FOR_IN
42918: IFFALSE 43120
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42920: LD_ADDR_VAR 0 9
42924: PUSH
42925: LD_VAR 0 7
42929: PPUSH
42930: LD_VAR 0 1
42934: PPUSH
42935: LD_VAR 0 2
42939: PPUSH
42940: CALL_OW 297
42944: ST_TO_ADDR
// if not result then
42945: LD_VAR 0 6
42949: NOT
42950: IFFALSE 42976
// result := [ [ i , tmp ] ] else
42952: LD_ADDR_VAR 0 6
42956: PUSH
42957: LD_VAR 0 7
42961: PUSH
42962: LD_VAR 0 9
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: EMPTY
42972: LIST
42973: ST_TO_ADDR
42974: GO 43118
// begin if result [ result ] [ 2 ] < tmp then
42976: LD_VAR 0 6
42980: PUSH
42981: LD_VAR 0 6
42985: ARRAY
42986: PUSH
42987: LD_INT 2
42989: ARRAY
42990: PUSH
42991: LD_VAR 0 9
42995: LESS
42996: IFFALSE 43038
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42998: LD_ADDR_VAR 0 6
43002: PUSH
43003: LD_VAR 0 6
43007: PPUSH
43008: LD_VAR 0 6
43012: PUSH
43013: LD_INT 1
43015: PLUS
43016: PPUSH
43017: LD_VAR 0 7
43021: PUSH
43022: LD_VAR 0 9
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PPUSH
43031: CALL_OW 2
43035: ST_TO_ADDR
43036: GO 43118
// for j = 1 to result do
43038: LD_ADDR_VAR 0 8
43042: PUSH
43043: DOUBLE
43044: LD_INT 1
43046: DEC
43047: ST_TO_ADDR
43048: LD_VAR 0 6
43052: PUSH
43053: FOR_TO
43054: IFFALSE 43116
// begin if tmp < result [ j ] [ 2 ] then
43056: LD_VAR 0 9
43060: PUSH
43061: LD_VAR 0 6
43065: PUSH
43066: LD_VAR 0 8
43070: ARRAY
43071: PUSH
43072: LD_INT 2
43074: ARRAY
43075: LESS
43076: IFFALSE 43114
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43078: LD_ADDR_VAR 0 6
43082: PUSH
43083: LD_VAR 0 6
43087: PPUSH
43088: LD_VAR 0 8
43092: PPUSH
43093: LD_VAR 0 7
43097: PUSH
43098: LD_VAR 0 9
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PPUSH
43107: CALL_OW 2
43111: ST_TO_ADDR
// break ;
43112: GO 43116
// end ; end ;
43114: GO 43053
43116: POP
43117: POP
// end ; end ;
43118: GO 42917
43120: POP
43121: POP
// if result and not asc then
43122: LD_VAR 0 6
43126: PUSH
43127: LD_VAR 0 4
43131: NOT
43132: AND
43133: IFFALSE 43208
// begin tmp := result ;
43135: LD_ADDR_VAR 0 9
43139: PUSH
43140: LD_VAR 0 6
43144: ST_TO_ADDR
// for i = tmp downto 1 do
43145: LD_ADDR_VAR 0 7
43149: PUSH
43150: DOUBLE
43151: LD_VAR 0 9
43155: INC
43156: ST_TO_ADDR
43157: LD_INT 1
43159: PUSH
43160: FOR_DOWNTO
43161: IFFALSE 43206
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43163: LD_ADDR_VAR 0 6
43167: PUSH
43168: LD_VAR 0 6
43172: PPUSH
43173: LD_VAR 0 9
43177: PUSH
43178: LD_VAR 0 7
43182: MINUS
43183: PUSH
43184: LD_INT 1
43186: PLUS
43187: PPUSH
43188: LD_VAR 0 9
43192: PUSH
43193: LD_VAR 0 7
43197: ARRAY
43198: PPUSH
43199: CALL_OW 1
43203: ST_TO_ADDR
43204: GO 43160
43206: POP
43207: POP
// end ; tmp := [ ] ;
43208: LD_ADDR_VAR 0 9
43212: PUSH
43213: EMPTY
43214: ST_TO_ADDR
// if mode then
43215: LD_VAR 0 5
43219: IFFALSE 43288
// begin for i = 1 to result do
43221: LD_ADDR_VAR 0 7
43225: PUSH
43226: DOUBLE
43227: LD_INT 1
43229: DEC
43230: ST_TO_ADDR
43231: LD_VAR 0 6
43235: PUSH
43236: FOR_TO
43237: IFFALSE 43276
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43239: LD_ADDR_VAR 0 9
43243: PUSH
43244: LD_VAR 0 9
43248: PPUSH
43249: LD_VAR 0 7
43253: PPUSH
43254: LD_VAR 0 6
43258: PUSH
43259: LD_VAR 0 7
43263: ARRAY
43264: PUSH
43265: LD_INT 1
43267: ARRAY
43268: PPUSH
43269: CALL_OW 1
43273: ST_TO_ADDR
43274: GO 43236
43276: POP
43277: POP
// result := tmp ;
43278: LD_ADDR_VAR 0 6
43282: PUSH
43283: LD_VAR 0 9
43287: ST_TO_ADDR
// end ; end ;
43288: LD_VAR 0 6
43292: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43293: LD_INT 0
43295: PPUSH
43296: PPUSH
43297: PPUSH
43298: PPUSH
43299: PPUSH
43300: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43301: LD_ADDR_VAR 0 5
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: EMPTY
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: ST_TO_ADDR
// if not x or not y then
43323: LD_VAR 0 2
43327: NOT
43328: PUSH
43329: LD_VAR 0 3
43333: NOT
43334: OR
43335: IFFALSE 43339
// exit ;
43337: GO 44991
// if not range then
43339: LD_VAR 0 4
43343: NOT
43344: IFFALSE 43354
// range := 10 ;
43346: LD_ADDR_VAR 0 4
43350: PUSH
43351: LD_INT 10
43353: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43354: LD_ADDR_VAR 0 8
43358: PUSH
43359: LD_INT 81
43361: PUSH
43362: LD_VAR 0 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 92
43373: PUSH
43374: LD_VAR 0 2
43378: PUSH
43379: LD_VAR 0 3
43383: PUSH
43384: LD_VAR 0 4
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 3
43397: PUSH
43398: LD_INT 21
43400: PUSH
43401: LD_INT 3
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: PPUSH
43417: CALL_OW 69
43421: ST_TO_ADDR
// if not tmp then
43422: LD_VAR 0 8
43426: NOT
43427: IFFALSE 43431
// exit ;
43429: GO 44991
// for i in tmp do
43431: LD_ADDR_VAR 0 6
43435: PUSH
43436: LD_VAR 0 8
43440: PUSH
43441: FOR_IN
43442: IFFALSE 44966
// begin points := [ 0 , 0 , 0 ] ;
43444: LD_ADDR_VAR 0 9
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: ST_TO_ADDR
// bpoints := 1 ;
43463: LD_ADDR_VAR 0 10
43467: PUSH
43468: LD_INT 1
43470: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43471: LD_VAR 0 6
43475: PPUSH
43476: CALL_OW 247
43480: PUSH
43481: LD_INT 1
43483: DOUBLE
43484: EQUAL
43485: IFTRUE 43489
43487: GO 44067
43489: POP
// begin if GetClass ( i ) = 1 then
43490: LD_VAR 0 6
43494: PPUSH
43495: CALL_OW 257
43499: PUSH
43500: LD_INT 1
43502: EQUAL
43503: IFFALSE 43524
// points := [ 10 , 5 , 3 ] ;
43505: LD_ADDR_VAR 0 9
43509: PUSH
43510: LD_INT 10
43512: PUSH
43513: LD_INT 5
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: LIST
43523: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43524: LD_VAR 0 6
43528: PPUSH
43529: CALL_OW 257
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 3
43539: PUSH
43540: LD_INT 4
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: LIST
43547: IN
43548: IFFALSE 43569
// points := [ 3 , 2 , 1 ] ;
43550: LD_ADDR_VAR 0 9
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43569: LD_VAR 0 6
43573: PPUSH
43574: CALL_OW 257
43578: PUSH
43579: LD_INT 5
43581: EQUAL
43582: IFFALSE 43603
// points := [ 130 , 5 , 2 ] ;
43584: LD_ADDR_VAR 0 9
43588: PUSH
43589: LD_INT 130
43591: PUSH
43592: LD_INT 5
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: LIST
43602: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43603: LD_VAR 0 6
43607: PPUSH
43608: CALL_OW 257
43612: PUSH
43613: LD_INT 8
43615: EQUAL
43616: IFFALSE 43637
// points := [ 35 , 35 , 30 ] ;
43618: LD_ADDR_VAR 0 9
43622: PUSH
43623: LD_INT 35
43625: PUSH
43626: LD_INT 35
43628: PUSH
43629: LD_INT 30
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43637: LD_VAR 0 6
43641: PPUSH
43642: CALL_OW 257
43646: PUSH
43647: LD_INT 9
43649: EQUAL
43650: IFFALSE 43671
// points := [ 20 , 55 , 40 ] ;
43652: LD_ADDR_VAR 0 9
43656: PUSH
43657: LD_INT 20
43659: PUSH
43660: LD_INT 55
43662: PUSH
43663: LD_INT 40
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: LIST
43670: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43671: LD_VAR 0 6
43675: PPUSH
43676: CALL_OW 257
43680: PUSH
43681: LD_INT 12
43683: PUSH
43684: LD_INT 16
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: IN
43691: IFFALSE 43712
// points := [ 5 , 3 , 2 ] ;
43693: LD_ADDR_VAR 0 9
43697: PUSH
43698: LD_INT 5
43700: PUSH
43701: LD_INT 3
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43712: LD_VAR 0 6
43716: PPUSH
43717: CALL_OW 257
43721: PUSH
43722: LD_INT 17
43724: EQUAL
43725: IFFALSE 43746
// points := [ 100 , 50 , 75 ] ;
43727: LD_ADDR_VAR 0 9
43731: PUSH
43732: LD_INT 100
43734: PUSH
43735: LD_INT 50
43737: PUSH
43738: LD_INT 75
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: LIST
43745: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43746: LD_VAR 0 6
43750: PPUSH
43751: CALL_OW 257
43755: PUSH
43756: LD_INT 15
43758: EQUAL
43759: IFFALSE 43780
// points := [ 10 , 5 , 3 ] ;
43761: LD_ADDR_VAR 0 9
43765: PUSH
43766: LD_INT 10
43768: PUSH
43769: LD_INT 5
43771: PUSH
43772: LD_INT 3
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: LIST
43779: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43780: LD_VAR 0 6
43784: PPUSH
43785: CALL_OW 257
43789: PUSH
43790: LD_INT 14
43792: EQUAL
43793: IFFALSE 43814
// points := [ 10 , 0 , 0 ] ;
43795: LD_ADDR_VAR 0 9
43799: PUSH
43800: LD_INT 10
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: LIST
43813: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43814: LD_VAR 0 6
43818: PPUSH
43819: CALL_OW 257
43823: PUSH
43824: LD_INT 11
43826: EQUAL
43827: IFFALSE 43848
// points := [ 30 , 10 , 5 ] ;
43829: LD_ADDR_VAR 0 9
43833: PUSH
43834: LD_INT 30
43836: PUSH
43837: LD_INT 10
43839: PUSH
43840: LD_INT 5
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43848: LD_VAR 0 1
43852: PPUSH
43853: LD_INT 5
43855: PPUSH
43856: CALL_OW 321
43860: PUSH
43861: LD_INT 2
43863: EQUAL
43864: IFFALSE 43881
// bpoints := bpoints * 1.8 ;
43866: LD_ADDR_VAR 0 10
43870: PUSH
43871: LD_VAR 0 10
43875: PUSH
43876: LD_REAL  1.80000000000000E+0000
43879: MUL
43880: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43881: LD_VAR 0 6
43885: PPUSH
43886: CALL_OW 257
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: LD_INT 4
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: IN
43909: PUSH
43910: LD_VAR 0 1
43914: PPUSH
43915: LD_INT 51
43917: PPUSH
43918: CALL_OW 321
43922: PUSH
43923: LD_INT 2
43925: EQUAL
43926: AND
43927: IFFALSE 43944
// bpoints := bpoints * 1.2 ;
43929: LD_ADDR_VAR 0 10
43933: PUSH
43934: LD_VAR 0 10
43938: PUSH
43939: LD_REAL  1.20000000000000E+0000
43942: MUL
43943: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43944: LD_VAR 0 6
43948: PPUSH
43949: CALL_OW 257
43953: PUSH
43954: LD_INT 5
43956: PUSH
43957: LD_INT 7
43959: PUSH
43960: LD_INT 9
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: IN
43968: PUSH
43969: LD_VAR 0 1
43973: PPUSH
43974: LD_INT 52
43976: PPUSH
43977: CALL_OW 321
43981: PUSH
43982: LD_INT 2
43984: EQUAL
43985: AND
43986: IFFALSE 44003
// bpoints := bpoints * 1.5 ;
43988: LD_ADDR_VAR 0 10
43992: PUSH
43993: LD_VAR 0 10
43997: PUSH
43998: LD_REAL  1.50000000000000E+0000
44001: MUL
44002: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44003: LD_VAR 0 1
44007: PPUSH
44008: LD_INT 66
44010: PPUSH
44011: CALL_OW 321
44015: PUSH
44016: LD_INT 2
44018: EQUAL
44019: IFFALSE 44036
// bpoints := bpoints * 1.1 ;
44021: LD_ADDR_VAR 0 10
44025: PUSH
44026: LD_VAR 0 10
44030: PUSH
44031: LD_REAL  1.10000000000000E+0000
44034: MUL
44035: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44036: LD_ADDR_VAR 0 10
44040: PUSH
44041: LD_VAR 0 10
44045: PUSH
44046: LD_VAR 0 6
44050: PPUSH
44051: LD_INT 1
44053: PPUSH
44054: CALL_OW 259
44058: PUSH
44059: LD_REAL  1.15000000000000E+0000
44062: MUL
44063: MUL
44064: ST_TO_ADDR
// end ; unit_vehicle :
44065: GO 44895
44067: LD_INT 2
44069: DOUBLE
44070: EQUAL
44071: IFTRUE 44075
44073: GO 44883
44075: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44076: LD_VAR 0 6
44080: PPUSH
44081: CALL_OW 264
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 42
44091: PUSH
44092: LD_INT 24
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: LIST
44099: IN
44100: IFFALSE 44121
// points := [ 25 , 5 , 3 ] ;
44102: LD_ADDR_VAR 0 9
44106: PUSH
44107: LD_INT 25
44109: PUSH
44110: LD_INT 5
44112: PUSH
44113: LD_INT 3
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44121: LD_VAR 0 6
44125: PPUSH
44126: CALL_OW 264
44130: PUSH
44131: LD_INT 4
44133: PUSH
44134: LD_INT 43
44136: PUSH
44137: LD_INT 25
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: LIST
44144: IN
44145: IFFALSE 44166
// points := [ 40 , 15 , 5 ] ;
44147: LD_ADDR_VAR 0 9
44151: PUSH
44152: LD_INT 40
44154: PUSH
44155: LD_INT 15
44157: PUSH
44158: LD_INT 5
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44166: LD_VAR 0 6
44170: PPUSH
44171: CALL_OW 264
44175: PUSH
44176: LD_INT 3
44178: PUSH
44179: LD_INT 23
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: IN
44186: IFFALSE 44207
// points := [ 7 , 25 , 8 ] ;
44188: LD_ADDR_VAR 0 9
44192: PUSH
44193: LD_INT 7
44195: PUSH
44196: LD_INT 25
44198: PUSH
44199: LD_INT 8
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44207: LD_VAR 0 6
44211: PPUSH
44212: CALL_OW 264
44216: PUSH
44217: LD_INT 5
44219: PUSH
44220: LD_INT 27
44222: PUSH
44223: LD_INT 44
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: LIST
44230: IN
44231: IFFALSE 44252
// points := [ 14 , 50 , 16 ] ;
44233: LD_ADDR_VAR 0 9
44237: PUSH
44238: LD_INT 14
44240: PUSH
44241: LD_INT 50
44243: PUSH
44244: LD_INT 16
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: LIST
44251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44252: LD_VAR 0 6
44256: PPUSH
44257: CALL_OW 264
44261: PUSH
44262: LD_INT 6
44264: PUSH
44265: LD_INT 46
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: IN
44272: IFFALSE 44293
// points := [ 32 , 120 , 70 ] ;
44274: LD_ADDR_VAR 0 9
44278: PUSH
44279: LD_INT 32
44281: PUSH
44282: LD_INT 120
44284: PUSH
44285: LD_INT 70
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: LIST
44292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44293: LD_VAR 0 6
44297: PPUSH
44298: CALL_OW 264
44302: PUSH
44303: LD_INT 7
44305: PUSH
44306: LD_INT 28
44308: PUSH
44309: LD_INT 45
44311: PUSH
44312: LD_EXP 54
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: IN
44323: IFFALSE 44344
// points := [ 35 , 20 , 45 ] ;
44325: LD_ADDR_VAR 0 9
44329: PUSH
44330: LD_INT 35
44332: PUSH
44333: LD_INT 20
44335: PUSH
44336: LD_INT 45
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44344: LD_VAR 0 6
44348: PPUSH
44349: CALL_OW 264
44353: PUSH
44354: LD_INT 47
44356: PUSH
44357: EMPTY
44358: LIST
44359: IN
44360: IFFALSE 44381
// points := [ 67 , 45 , 75 ] ;
44362: LD_ADDR_VAR 0 9
44366: PUSH
44367: LD_INT 67
44369: PUSH
44370: LD_INT 45
44372: PUSH
44373: LD_INT 75
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44381: LD_VAR 0 6
44385: PPUSH
44386: CALL_OW 264
44390: PUSH
44391: LD_INT 26
44393: PUSH
44394: EMPTY
44395: LIST
44396: IN
44397: IFFALSE 44418
// points := [ 120 , 30 , 80 ] ;
44399: LD_ADDR_VAR 0 9
44403: PUSH
44404: LD_INT 120
44406: PUSH
44407: LD_INT 30
44409: PUSH
44410: LD_INT 80
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44418: LD_VAR 0 6
44422: PPUSH
44423: CALL_OW 264
44427: PUSH
44428: LD_INT 22
44430: PUSH
44431: EMPTY
44432: LIST
44433: IN
44434: IFFALSE 44455
// points := [ 40 , 1 , 1 ] ;
44436: LD_ADDR_VAR 0 9
44440: PUSH
44441: LD_INT 40
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: LIST
44454: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44455: LD_VAR 0 6
44459: PPUSH
44460: CALL_OW 264
44464: PUSH
44465: LD_INT 29
44467: PUSH
44468: EMPTY
44469: LIST
44470: IN
44471: IFFALSE 44492
// points := [ 70 , 200 , 400 ] ;
44473: LD_ADDR_VAR 0 9
44477: PUSH
44478: LD_INT 70
44480: PUSH
44481: LD_INT 200
44483: PUSH
44484: LD_INT 400
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44492: LD_VAR 0 6
44496: PPUSH
44497: CALL_OW 264
44501: PUSH
44502: LD_INT 14
44504: PUSH
44505: LD_INT 53
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: IN
44512: IFFALSE 44533
// points := [ 40 , 10 , 20 ] ;
44514: LD_ADDR_VAR 0 9
44518: PUSH
44519: LD_INT 40
44521: PUSH
44522: LD_INT 10
44524: PUSH
44525: LD_INT 20
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44533: LD_VAR 0 6
44537: PPUSH
44538: CALL_OW 264
44542: PUSH
44543: LD_INT 9
44545: PUSH
44546: EMPTY
44547: LIST
44548: IN
44549: IFFALSE 44570
// points := [ 5 , 70 , 20 ] ;
44551: LD_ADDR_VAR 0 9
44555: PUSH
44556: LD_INT 5
44558: PUSH
44559: LD_INT 70
44561: PUSH
44562: LD_INT 20
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: LIST
44569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44570: LD_VAR 0 6
44574: PPUSH
44575: CALL_OW 264
44579: PUSH
44580: LD_INT 10
44582: PUSH
44583: EMPTY
44584: LIST
44585: IN
44586: IFFALSE 44607
// points := [ 35 , 110 , 70 ] ;
44588: LD_ADDR_VAR 0 9
44592: PUSH
44593: LD_INT 35
44595: PUSH
44596: LD_INT 110
44598: PUSH
44599: LD_INT 70
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: LIST
44606: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44607: LD_VAR 0 6
44611: PPUSH
44612: CALL_OW 265
44616: PUSH
44617: LD_INT 25
44619: EQUAL
44620: IFFALSE 44641
// points := [ 80 , 65 , 100 ] ;
44622: LD_ADDR_VAR 0 9
44626: PUSH
44627: LD_INT 80
44629: PUSH
44630: LD_INT 65
44632: PUSH
44633: LD_INT 100
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: LIST
44640: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44641: LD_VAR 0 6
44645: PPUSH
44646: CALL_OW 263
44650: PUSH
44651: LD_INT 1
44653: EQUAL
44654: IFFALSE 44689
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44656: LD_ADDR_VAR 0 10
44660: PUSH
44661: LD_VAR 0 10
44665: PUSH
44666: LD_VAR 0 6
44670: PPUSH
44671: CALL_OW 311
44675: PPUSH
44676: LD_INT 3
44678: PPUSH
44679: CALL_OW 259
44683: PUSH
44684: LD_INT 4
44686: MUL
44687: MUL
44688: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44689: LD_VAR 0 6
44693: PPUSH
44694: CALL_OW 263
44698: PUSH
44699: LD_INT 2
44701: EQUAL
44702: IFFALSE 44753
// begin j := IsControledBy ( i ) ;
44704: LD_ADDR_VAR 0 7
44708: PUSH
44709: LD_VAR 0 6
44713: PPUSH
44714: CALL_OW 312
44718: ST_TO_ADDR
// if j then
44719: LD_VAR 0 7
44723: IFFALSE 44753
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44725: LD_ADDR_VAR 0 10
44729: PUSH
44730: LD_VAR 0 10
44734: PUSH
44735: LD_VAR 0 7
44739: PPUSH
44740: LD_INT 3
44742: PPUSH
44743: CALL_OW 259
44747: PUSH
44748: LD_INT 3
44750: MUL
44751: MUL
44752: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44753: LD_VAR 0 6
44757: PPUSH
44758: CALL_OW 264
44762: PUSH
44763: LD_INT 5
44765: PUSH
44766: LD_INT 6
44768: PUSH
44769: LD_INT 46
44771: PUSH
44772: LD_INT 44
44774: PUSH
44775: LD_INT 47
44777: PUSH
44778: LD_INT 45
44780: PUSH
44781: LD_INT 28
44783: PUSH
44784: LD_INT 7
44786: PUSH
44787: LD_INT 27
44789: PUSH
44790: LD_INT 29
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: IN
44805: PUSH
44806: LD_VAR 0 1
44810: PPUSH
44811: LD_INT 52
44813: PPUSH
44814: CALL_OW 321
44818: PUSH
44819: LD_INT 2
44821: EQUAL
44822: AND
44823: IFFALSE 44840
// bpoints := bpoints * 1.2 ;
44825: LD_ADDR_VAR 0 10
44829: PUSH
44830: LD_VAR 0 10
44834: PUSH
44835: LD_REAL  1.20000000000000E+0000
44838: MUL
44839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44840: LD_VAR 0 6
44844: PPUSH
44845: CALL_OW 264
44849: PUSH
44850: LD_INT 6
44852: PUSH
44853: LD_INT 46
44855: PUSH
44856: LD_INT 47
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: IN
44864: IFFALSE 44881
// bpoints := bpoints * 1.2 ;
44866: LD_ADDR_VAR 0 10
44870: PUSH
44871: LD_VAR 0 10
44875: PUSH
44876: LD_REAL  1.20000000000000E+0000
44879: MUL
44880: ST_TO_ADDR
// end ; unit_building :
44881: GO 44895
44883: LD_INT 3
44885: DOUBLE
44886: EQUAL
44887: IFTRUE 44891
44889: GO 44894
44891: POP
// ; end ;
44892: GO 44895
44894: POP
// for j = 1 to 3 do
44895: LD_ADDR_VAR 0 7
44899: PUSH
44900: DOUBLE
44901: LD_INT 1
44903: DEC
44904: ST_TO_ADDR
44905: LD_INT 3
44907: PUSH
44908: FOR_TO
44909: IFFALSE 44962
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44911: LD_ADDR_VAR 0 5
44915: PUSH
44916: LD_VAR 0 5
44920: PPUSH
44921: LD_VAR 0 7
44925: PPUSH
44926: LD_VAR 0 5
44930: PUSH
44931: LD_VAR 0 7
44935: ARRAY
44936: PUSH
44937: LD_VAR 0 9
44941: PUSH
44942: LD_VAR 0 7
44946: ARRAY
44947: PUSH
44948: LD_VAR 0 10
44952: MUL
44953: PLUS
44954: PPUSH
44955: CALL_OW 1
44959: ST_TO_ADDR
44960: GO 44908
44962: POP
44963: POP
// end ;
44964: GO 43441
44966: POP
44967: POP
// result := Replace ( result , 4 , tmp ) ;
44968: LD_ADDR_VAR 0 5
44972: PUSH
44973: LD_VAR 0 5
44977: PPUSH
44978: LD_INT 4
44980: PPUSH
44981: LD_VAR 0 8
44985: PPUSH
44986: CALL_OW 1
44990: ST_TO_ADDR
// end ;
44991: LD_VAR 0 5
44995: RET
// export function DangerAtRange ( unit , range ) ; begin
44996: LD_INT 0
44998: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44999: LD_ADDR_VAR 0 3
45003: PUSH
45004: LD_VAR 0 1
45008: PPUSH
45009: CALL_OW 255
45013: PPUSH
45014: LD_VAR 0 1
45018: PPUSH
45019: CALL_OW 250
45023: PPUSH
45024: LD_VAR 0 1
45028: PPUSH
45029: CALL_OW 251
45033: PPUSH
45034: LD_VAR 0 2
45038: PPUSH
45039: CALL 43293 0 4
45043: ST_TO_ADDR
// end ;
45044: LD_VAR 0 3
45048: RET
// export function DangerInArea ( side , area ) ; begin
45049: LD_INT 0
45051: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45052: LD_ADDR_VAR 0 3
45056: PUSH
45057: LD_VAR 0 2
45061: PPUSH
45062: LD_INT 81
45064: PUSH
45065: LD_VAR 0 1
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PPUSH
45074: CALL_OW 70
45078: ST_TO_ADDR
// end ;
45079: LD_VAR 0 3
45083: RET
// export function IsExtension ( b ) ; begin
45084: LD_INT 0
45086: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45087: LD_ADDR_VAR 0 2
45091: PUSH
45092: LD_VAR 0 1
45096: PUSH
45097: LD_INT 23
45099: PUSH
45100: LD_INT 20
45102: PUSH
45103: LD_INT 22
45105: PUSH
45106: LD_INT 17
45108: PUSH
45109: LD_INT 24
45111: PUSH
45112: LD_INT 21
45114: PUSH
45115: LD_INT 19
45117: PUSH
45118: LD_INT 16
45120: PUSH
45121: LD_INT 25
45123: PUSH
45124: LD_INT 18
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: IN
45139: ST_TO_ADDR
// end ;
45140: LD_VAR 0 2
45144: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45145: LD_INT 0
45147: PPUSH
45148: PPUSH
45149: PPUSH
// result := [ ] ;
45150: LD_ADDR_VAR 0 4
45154: PUSH
45155: EMPTY
45156: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45157: LD_ADDR_VAR 0 5
45161: PUSH
45162: LD_VAR 0 2
45166: PPUSH
45167: LD_INT 21
45169: PUSH
45170: LD_INT 3
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PPUSH
45177: CALL_OW 70
45181: ST_TO_ADDR
// if not tmp then
45182: LD_VAR 0 5
45186: NOT
45187: IFFALSE 45191
// exit ;
45189: GO 45255
// if checkLink then
45191: LD_VAR 0 3
45195: IFFALSE 45245
// begin for i in tmp do
45197: LD_ADDR_VAR 0 6
45201: PUSH
45202: LD_VAR 0 5
45206: PUSH
45207: FOR_IN
45208: IFFALSE 45243
// if GetBase ( i ) <> base then
45210: LD_VAR 0 6
45214: PPUSH
45215: CALL_OW 274
45219: PUSH
45220: LD_VAR 0 1
45224: NONEQUAL
45225: IFFALSE 45241
// ComLinkToBase ( base , i ) ;
45227: LD_VAR 0 1
45231: PPUSH
45232: LD_VAR 0 6
45236: PPUSH
45237: CALL_OW 169
45241: GO 45207
45243: POP
45244: POP
// end ; result := tmp ;
45245: LD_ADDR_VAR 0 4
45249: PUSH
45250: LD_VAR 0 5
45254: ST_TO_ADDR
// end ;
45255: LD_VAR 0 4
45259: RET
// export function ComComplete ( units , b ) ; var i ; begin
45260: LD_INT 0
45262: PPUSH
45263: PPUSH
// if not units then
45264: LD_VAR 0 1
45268: NOT
45269: IFFALSE 45273
// exit ;
45271: GO 45363
// for i in units do
45273: LD_ADDR_VAR 0 4
45277: PUSH
45278: LD_VAR 0 1
45282: PUSH
45283: FOR_IN
45284: IFFALSE 45361
// if BuildingStatus ( b ) = bs_build then
45286: LD_VAR 0 2
45290: PPUSH
45291: CALL_OW 461
45295: PUSH
45296: LD_INT 1
45298: EQUAL
45299: IFFALSE 45359
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45301: LD_VAR 0 4
45305: PPUSH
45306: LD_STRING h
45308: PUSH
45309: LD_VAR 0 2
45313: PPUSH
45314: CALL_OW 250
45318: PUSH
45319: LD_VAR 0 2
45323: PPUSH
45324: CALL_OW 251
45328: PUSH
45329: LD_VAR 0 2
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: PUSH
45352: EMPTY
45353: LIST
45354: PPUSH
45355: CALL_OW 446
45359: GO 45283
45361: POP
45362: POP
// end ;
45363: LD_VAR 0 3
45367: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45368: LD_INT 0
45370: PPUSH
45371: PPUSH
45372: PPUSH
45373: PPUSH
45374: PPUSH
45375: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45376: LD_VAR 0 1
45380: NOT
45381: PUSH
45382: LD_VAR 0 1
45386: PPUSH
45387: CALL_OW 263
45391: PUSH
45392: LD_INT 2
45394: NONEQUAL
45395: OR
45396: IFFALSE 45400
// exit ;
45398: GO 45716
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45400: LD_ADDR_VAR 0 6
45404: PUSH
45405: LD_INT 22
45407: PUSH
45408: LD_VAR 0 1
45412: PPUSH
45413: CALL_OW 255
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 30
45427: PUSH
45428: LD_INT 36
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 34
45437: PUSH
45438: LD_INT 31
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: LIST
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PPUSH
45454: CALL_OW 69
45458: ST_TO_ADDR
// if not tmp then
45459: LD_VAR 0 6
45463: NOT
45464: IFFALSE 45468
// exit ;
45466: GO 45716
// result := [ ] ;
45468: LD_ADDR_VAR 0 2
45472: PUSH
45473: EMPTY
45474: ST_TO_ADDR
// for i in tmp do
45475: LD_ADDR_VAR 0 3
45479: PUSH
45480: LD_VAR 0 6
45484: PUSH
45485: FOR_IN
45486: IFFALSE 45557
// begin t := UnitsInside ( i ) ;
45488: LD_ADDR_VAR 0 4
45492: PUSH
45493: LD_VAR 0 3
45497: PPUSH
45498: CALL_OW 313
45502: ST_TO_ADDR
// if t then
45503: LD_VAR 0 4
45507: IFFALSE 45555
// for j in t do
45509: LD_ADDR_VAR 0 7
45513: PUSH
45514: LD_VAR 0 4
45518: PUSH
45519: FOR_IN
45520: IFFALSE 45553
// result := Replace ( result , result + 1 , j ) ;
45522: LD_ADDR_VAR 0 2
45526: PUSH
45527: LD_VAR 0 2
45531: PPUSH
45532: LD_VAR 0 2
45536: PUSH
45537: LD_INT 1
45539: PLUS
45540: PPUSH
45541: LD_VAR 0 7
45545: PPUSH
45546: CALL_OW 1
45550: ST_TO_ADDR
45551: GO 45519
45553: POP
45554: POP
// end ;
45555: GO 45485
45557: POP
45558: POP
// if not result then
45559: LD_VAR 0 2
45563: NOT
45564: IFFALSE 45568
// exit ;
45566: GO 45716
// mech := result [ 1 ] ;
45568: LD_ADDR_VAR 0 5
45572: PUSH
45573: LD_VAR 0 2
45577: PUSH
45578: LD_INT 1
45580: ARRAY
45581: ST_TO_ADDR
// if result > 1 then
45582: LD_VAR 0 2
45586: PUSH
45587: LD_INT 1
45589: GREATER
45590: IFFALSE 45702
// begin for i = 2 to result do
45592: LD_ADDR_VAR 0 3
45596: PUSH
45597: DOUBLE
45598: LD_INT 2
45600: DEC
45601: ST_TO_ADDR
45602: LD_VAR 0 2
45606: PUSH
45607: FOR_TO
45608: IFFALSE 45700
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45610: LD_ADDR_VAR 0 4
45614: PUSH
45615: LD_VAR 0 2
45619: PUSH
45620: LD_VAR 0 3
45624: ARRAY
45625: PPUSH
45626: LD_INT 3
45628: PPUSH
45629: CALL_OW 259
45633: PUSH
45634: LD_VAR 0 2
45638: PUSH
45639: LD_VAR 0 3
45643: ARRAY
45644: PPUSH
45645: CALL_OW 432
45649: MINUS
45650: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45651: LD_VAR 0 4
45655: PUSH
45656: LD_VAR 0 5
45660: PPUSH
45661: LD_INT 3
45663: PPUSH
45664: CALL_OW 259
45668: PUSH
45669: LD_VAR 0 5
45673: PPUSH
45674: CALL_OW 432
45678: MINUS
45679: GREATEREQUAL
45680: IFFALSE 45698
// mech := result [ i ] ;
45682: LD_ADDR_VAR 0 5
45686: PUSH
45687: LD_VAR 0 2
45691: PUSH
45692: LD_VAR 0 3
45696: ARRAY
45697: ST_TO_ADDR
// end ;
45698: GO 45607
45700: POP
45701: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45702: LD_VAR 0 1
45706: PPUSH
45707: LD_VAR 0 5
45711: PPUSH
45712: CALL_OW 135
// end ;
45716: LD_VAR 0 2
45720: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45721: LD_INT 0
45723: PPUSH
45724: PPUSH
45725: PPUSH
45726: PPUSH
45727: PPUSH
45728: PPUSH
45729: PPUSH
45730: PPUSH
45731: PPUSH
45732: PPUSH
45733: PPUSH
45734: PPUSH
45735: PPUSH
// result := [ ] ;
45736: LD_ADDR_VAR 0 7
45740: PUSH
45741: EMPTY
45742: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45743: LD_VAR 0 1
45747: PPUSH
45748: CALL_OW 266
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: IN
45763: NOT
45764: IFFALSE 45768
// exit ;
45766: GO 47402
// if name then
45768: LD_VAR 0 3
45772: IFFALSE 45788
// SetBName ( base_dep , name ) ;
45774: LD_VAR 0 1
45778: PPUSH
45779: LD_VAR 0 3
45783: PPUSH
45784: CALL_OW 500
// base := GetBase ( base_dep ) ;
45788: LD_ADDR_VAR 0 15
45792: PUSH
45793: LD_VAR 0 1
45797: PPUSH
45798: CALL_OW 274
45802: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45803: LD_ADDR_VAR 0 16
45807: PUSH
45808: LD_VAR 0 1
45812: PPUSH
45813: CALL_OW 255
45817: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45818: LD_ADDR_VAR 0 17
45822: PUSH
45823: LD_VAR 0 1
45827: PPUSH
45828: CALL_OW 248
45832: ST_TO_ADDR
// if sources then
45833: LD_VAR 0 5
45837: IFFALSE 45884
// for i = 1 to 3 do
45839: LD_ADDR_VAR 0 8
45843: PUSH
45844: DOUBLE
45845: LD_INT 1
45847: DEC
45848: ST_TO_ADDR
45849: LD_INT 3
45851: PUSH
45852: FOR_TO
45853: IFFALSE 45882
// AddResourceType ( base , i , sources [ i ] ) ;
45855: LD_VAR 0 15
45859: PPUSH
45860: LD_VAR 0 8
45864: PPUSH
45865: LD_VAR 0 5
45869: PUSH
45870: LD_VAR 0 8
45874: ARRAY
45875: PPUSH
45876: CALL_OW 276
45880: GO 45852
45882: POP
45883: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45884: LD_ADDR_VAR 0 18
45888: PUSH
45889: LD_VAR 0 15
45893: PPUSH
45894: LD_VAR 0 2
45898: PPUSH
45899: LD_INT 1
45901: PPUSH
45902: CALL 45145 0 3
45906: ST_TO_ADDR
// InitHc ;
45907: CALL_OW 19
// InitUc ;
45911: CALL_OW 18
// uc_side := side ;
45915: LD_ADDR_OWVAR 20
45919: PUSH
45920: LD_VAR 0 16
45924: ST_TO_ADDR
// uc_nation := nation ;
45925: LD_ADDR_OWVAR 21
45929: PUSH
45930: LD_VAR 0 17
45934: ST_TO_ADDR
// if buildings then
45935: LD_VAR 0 18
45939: IFFALSE 47261
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45941: LD_ADDR_VAR 0 19
45945: PUSH
45946: LD_VAR 0 18
45950: PPUSH
45951: LD_INT 2
45953: PUSH
45954: LD_INT 30
45956: PUSH
45957: LD_INT 29
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 30
45966: PUSH
45967: LD_INT 30
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: LIST
45978: PPUSH
45979: CALL_OW 72
45983: ST_TO_ADDR
// if tmp then
45984: LD_VAR 0 19
45988: IFFALSE 46036
// for i in tmp do
45990: LD_ADDR_VAR 0 8
45994: PUSH
45995: LD_VAR 0 19
45999: PUSH
46000: FOR_IN
46001: IFFALSE 46034
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46003: LD_VAR 0 8
46007: PPUSH
46008: CALL_OW 250
46012: PPUSH
46013: LD_VAR 0 8
46017: PPUSH
46018: CALL_OW 251
46022: PPUSH
46023: LD_VAR 0 16
46027: PPUSH
46028: CALL_OW 441
46032: GO 46000
46034: POP
46035: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46036: LD_VAR 0 18
46040: PPUSH
46041: LD_INT 2
46043: PUSH
46044: LD_INT 30
46046: PUSH
46047: LD_INT 32
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 30
46056: PUSH
46057: LD_INT 33
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: LIST
46068: PPUSH
46069: CALL_OW 72
46073: IFFALSE 46161
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46075: LD_ADDR_VAR 0 8
46079: PUSH
46080: LD_VAR 0 18
46084: PPUSH
46085: LD_INT 2
46087: PUSH
46088: LD_INT 30
46090: PUSH
46091: LD_INT 32
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 30
46100: PUSH
46101: LD_INT 33
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: PPUSH
46113: CALL_OW 72
46117: PUSH
46118: FOR_IN
46119: IFFALSE 46159
// begin if not GetBWeapon ( i ) then
46121: LD_VAR 0 8
46125: PPUSH
46126: CALL_OW 269
46130: NOT
46131: IFFALSE 46157
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46133: LD_VAR 0 8
46137: PPUSH
46138: LD_VAR 0 8
46142: PPUSH
46143: LD_VAR 0 2
46147: PPUSH
46148: CALL 47407 0 2
46152: PPUSH
46153: CALL_OW 431
// end ;
46157: GO 46118
46159: POP
46160: POP
// end ; for i = 1 to personel do
46161: LD_ADDR_VAR 0 8
46165: PUSH
46166: DOUBLE
46167: LD_INT 1
46169: DEC
46170: ST_TO_ADDR
46171: LD_VAR 0 6
46175: PUSH
46176: FOR_TO
46177: IFFALSE 47241
// begin if i > 4 then
46179: LD_VAR 0 8
46183: PUSH
46184: LD_INT 4
46186: GREATER
46187: IFFALSE 46191
// break ;
46189: GO 47241
// case i of 1 :
46191: LD_VAR 0 8
46195: PUSH
46196: LD_INT 1
46198: DOUBLE
46199: EQUAL
46200: IFTRUE 46204
46202: GO 46284
46204: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46205: LD_ADDR_VAR 0 12
46209: PUSH
46210: LD_VAR 0 18
46214: PPUSH
46215: LD_INT 22
46217: PUSH
46218: LD_VAR 0 16
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 58
46229: PUSH
46230: EMPTY
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: PUSH
46236: LD_INT 30
46238: PUSH
46239: LD_INT 32
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 30
46248: PUSH
46249: LD_INT 4
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 30
46258: PUSH
46259: LD_INT 5
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: PPUSH
46277: CALL_OW 72
46281: ST_TO_ADDR
46282: GO 46506
46284: LD_INT 2
46286: DOUBLE
46287: EQUAL
46288: IFTRUE 46292
46290: GO 46354
46292: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46293: LD_ADDR_VAR 0 12
46297: PUSH
46298: LD_VAR 0 18
46302: PPUSH
46303: LD_INT 22
46305: PUSH
46306: LD_VAR 0 16
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: LD_INT 30
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 30
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PPUSH
46347: CALL_OW 72
46351: ST_TO_ADDR
46352: GO 46506
46354: LD_INT 3
46356: DOUBLE
46357: EQUAL
46358: IFTRUE 46362
46360: GO 46424
46362: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46363: LD_ADDR_VAR 0 12
46367: PUSH
46368: LD_VAR 0 18
46372: PPUSH
46373: LD_INT 22
46375: PUSH
46376: LD_VAR 0 16
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 30
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 30
46400: PUSH
46401: LD_INT 3
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: LIST
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PPUSH
46417: CALL_OW 72
46421: ST_TO_ADDR
46422: GO 46506
46424: LD_INT 4
46426: DOUBLE
46427: EQUAL
46428: IFTRUE 46432
46430: GO 46505
46432: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46433: LD_ADDR_VAR 0 12
46437: PUSH
46438: LD_VAR 0 18
46442: PPUSH
46443: LD_INT 22
46445: PUSH
46446: LD_VAR 0 16
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 30
46460: PUSH
46461: LD_INT 6
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 30
46470: PUSH
46471: LD_INT 7
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 30
46480: PUSH
46481: LD_INT 8
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PPUSH
46498: CALL_OW 72
46502: ST_TO_ADDR
46503: GO 46506
46505: POP
// if i = 1 then
46506: LD_VAR 0 8
46510: PUSH
46511: LD_INT 1
46513: EQUAL
46514: IFFALSE 46625
// begin tmp := [ ] ;
46516: LD_ADDR_VAR 0 19
46520: PUSH
46521: EMPTY
46522: ST_TO_ADDR
// for j in f do
46523: LD_ADDR_VAR 0 9
46527: PUSH
46528: LD_VAR 0 12
46532: PUSH
46533: FOR_IN
46534: IFFALSE 46607
// if GetBType ( j ) = b_bunker then
46536: LD_VAR 0 9
46540: PPUSH
46541: CALL_OW 266
46545: PUSH
46546: LD_INT 32
46548: EQUAL
46549: IFFALSE 46576
// tmp := Insert ( tmp , 1 , j ) else
46551: LD_ADDR_VAR 0 19
46555: PUSH
46556: LD_VAR 0 19
46560: PPUSH
46561: LD_INT 1
46563: PPUSH
46564: LD_VAR 0 9
46568: PPUSH
46569: CALL_OW 2
46573: ST_TO_ADDR
46574: GO 46605
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46576: LD_ADDR_VAR 0 19
46580: PUSH
46581: LD_VAR 0 19
46585: PPUSH
46586: LD_VAR 0 19
46590: PUSH
46591: LD_INT 1
46593: PLUS
46594: PPUSH
46595: LD_VAR 0 9
46599: PPUSH
46600: CALL_OW 2
46604: ST_TO_ADDR
46605: GO 46533
46607: POP
46608: POP
// if tmp then
46609: LD_VAR 0 19
46613: IFFALSE 46625
// f := tmp ;
46615: LD_ADDR_VAR 0 12
46619: PUSH
46620: LD_VAR 0 19
46624: ST_TO_ADDR
// end ; x := personel [ i ] ;
46625: LD_ADDR_VAR 0 13
46629: PUSH
46630: LD_VAR 0 6
46634: PUSH
46635: LD_VAR 0 8
46639: ARRAY
46640: ST_TO_ADDR
// if x = - 1 then
46641: LD_VAR 0 13
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: EQUAL
46650: IFFALSE 46859
// begin for j in f do
46652: LD_ADDR_VAR 0 9
46656: PUSH
46657: LD_VAR 0 12
46661: PUSH
46662: FOR_IN
46663: IFFALSE 46855
// repeat InitHc ;
46665: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46669: LD_VAR 0 9
46673: PPUSH
46674: CALL_OW 266
46678: PUSH
46679: LD_INT 5
46681: EQUAL
46682: IFFALSE 46752
// begin if UnitsInside ( j ) < 3 then
46684: LD_VAR 0 9
46688: PPUSH
46689: CALL_OW 313
46693: PUSH
46694: LD_INT 3
46696: LESS
46697: IFFALSE 46733
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46699: LD_INT 0
46701: PPUSH
46702: LD_INT 5
46704: PUSH
46705: LD_INT 8
46707: PUSH
46708: LD_INT 9
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: LIST
46715: PUSH
46716: LD_VAR 0 17
46720: ARRAY
46721: PPUSH
46722: LD_VAR 0 4
46726: PPUSH
46727: CALL_OW 380
46731: GO 46750
// PrepareHuman ( false , i , skill ) ;
46733: LD_INT 0
46735: PPUSH
46736: LD_VAR 0 8
46740: PPUSH
46741: LD_VAR 0 4
46745: PPUSH
46746: CALL_OW 380
// end else
46750: GO 46769
// PrepareHuman ( false , i , skill ) ;
46752: LD_INT 0
46754: PPUSH
46755: LD_VAR 0 8
46759: PPUSH
46760: LD_VAR 0 4
46764: PPUSH
46765: CALL_OW 380
// un := CreateHuman ;
46769: LD_ADDR_VAR 0 14
46773: PUSH
46774: CALL_OW 44
46778: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46779: LD_ADDR_VAR 0 7
46783: PUSH
46784: LD_VAR 0 7
46788: PPUSH
46789: LD_INT 1
46791: PPUSH
46792: LD_VAR 0 14
46796: PPUSH
46797: CALL_OW 2
46801: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46802: LD_VAR 0 14
46806: PPUSH
46807: LD_VAR 0 9
46811: PPUSH
46812: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46816: LD_VAR 0 9
46820: PPUSH
46821: CALL_OW 313
46825: PUSH
46826: LD_INT 6
46828: EQUAL
46829: PUSH
46830: LD_VAR 0 9
46834: PPUSH
46835: CALL_OW 266
46839: PUSH
46840: LD_INT 32
46842: PUSH
46843: LD_INT 31
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: IN
46850: OR
46851: IFFALSE 46665
46853: GO 46662
46855: POP
46856: POP
// end else
46857: GO 47239
// for j = 1 to x do
46859: LD_ADDR_VAR 0 9
46863: PUSH
46864: DOUBLE
46865: LD_INT 1
46867: DEC
46868: ST_TO_ADDR
46869: LD_VAR 0 13
46873: PUSH
46874: FOR_TO
46875: IFFALSE 47237
// begin InitHc ;
46877: CALL_OW 19
// if not f then
46881: LD_VAR 0 12
46885: NOT
46886: IFFALSE 46975
// begin PrepareHuman ( false , i , skill ) ;
46888: LD_INT 0
46890: PPUSH
46891: LD_VAR 0 8
46895: PPUSH
46896: LD_VAR 0 4
46900: PPUSH
46901: CALL_OW 380
// un := CreateHuman ;
46905: LD_ADDR_VAR 0 14
46909: PUSH
46910: CALL_OW 44
46914: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46915: LD_ADDR_VAR 0 7
46919: PUSH
46920: LD_VAR 0 7
46924: PPUSH
46925: LD_INT 1
46927: PPUSH
46928: LD_VAR 0 14
46932: PPUSH
46933: CALL_OW 2
46937: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46938: LD_VAR 0 14
46942: PPUSH
46943: LD_VAR 0 1
46947: PPUSH
46948: CALL_OW 250
46952: PPUSH
46953: LD_VAR 0 1
46957: PPUSH
46958: CALL_OW 251
46962: PPUSH
46963: LD_INT 10
46965: PPUSH
46966: LD_INT 0
46968: PPUSH
46969: CALL_OW 50
// continue ;
46973: GO 46874
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46975: LD_VAR 0 12
46979: PUSH
46980: LD_INT 1
46982: ARRAY
46983: PPUSH
46984: CALL_OW 313
46988: PUSH
46989: LD_VAR 0 12
46993: PUSH
46994: LD_INT 1
46996: ARRAY
46997: PPUSH
46998: CALL_OW 266
47002: PUSH
47003: LD_INT 32
47005: PUSH
47006: LD_INT 31
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: IN
47013: AND
47014: PUSH
47015: LD_VAR 0 12
47019: PUSH
47020: LD_INT 1
47022: ARRAY
47023: PPUSH
47024: CALL_OW 313
47028: PUSH
47029: LD_INT 6
47031: EQUAL
47032: OR
47033: IFFALSE 47053
// f := Delete ( f , 1 ) ;
47035: LD_ADDR_VAR 0 12
47039: PUSH
47040: LD_VAR 0 12
47044: PPUSH
47045: LD_INT 1
47047: PPUSH
47048: CALL_OW 3
47052: ST_TO_ADDR
// if not f then
47053: LD_VAR 0 12
47057: NOT
47058: IFFALSE 47076
// begin x := x + 2 ;
47060: LD_ADDR_VAR 0 13
47064: PUSH
47065: LD_VAR 0 13
47069: PUSH
47070: LD_INT 2
47072: PLUS
47073: ST_TO_ADDR
// continue ;
47074: GO 46874
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47076: LD_VAR 0 12
47080: PUSH
47081: LD_INT 1
47083: ARRAY
47084: PPUSH
47085: CALL_OW 266
47089: PUSH
47090: LD_INT 5
47092: EQUAL
47093: IFFALSE 47167
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47095: LD_VAR 0 12
47099: PUSH
47100: LD_INT 1
47102: ARRAY
47103: PPUSH
47104: CALL_OW 313
47108: PUSH
47109: LD_INT 3
47111: LESS
47112: IFFALSE 47148
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47114: LD_INT 0
47116: PPUSH
47117: LD_INT 5
47119: PUSH
47120: LD_INT 8
47122: PUSH
47123: LD_INT 9
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: LIST
47130: PUSH
47131: LD_VAR 0 17
47135: ARRAY
47136: PPUSH
47137: LD_VAR 0 4
47141: PPUSH
47142: CALL_OW 380
47146: GO 47165
// PrepareHuman ( false , i , skill ) ;
47148: LD_INT 0
47150: PPUSH
47151: LD_VAR 0 8
47155: PPUSH
47156: LD_VAR 0 4
47160: PPUSH
47161: CALL_OW 380
// end else
47165: GO 47184
// PrepareHuman ( false , i , skill ) ;
47167: LD_INT 0
47169: PPUSH
47170: LD_VAR 0 8
47174: PPUSH
47175: LD_VAR 0 4
47179: PPUSH
47180: CALL_OW 380
// un := CreateHuman ;
47184: LD_ADDR_VAR 0 14
47188: PUSH
47189: CALL_OW 44
47193: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47194: LD_ADDR_VAR 0 7
47198: PUSH
47199: LD_VAR 0 7
47203: PPUSH
47204: LD_INT 1
47206: PPUSH
47207: LD_VAR 0 14
47211: PPUSH
47212: CALL_OW 2
47216: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47217: LD_VAR 0 14
47221: PPUSH
47222: LD_VAR 0 12
47226: PUSH
47227: LD_INT 1
47229: ARRAY
47230: PPUSH
47231: CALL_OW 52
// end ;
47235: GO 46874
47237: POP
47238: POP
// end ;
47239: GO 46176
47241: POP
47242: POP
// result := result ^ buildings ;
47243: LD_ADDR_VAR 0 7
47247: PUSH
47248: LD_VAR 0 7
47252: PUSH
47253: LD_VAR 0 18
47257: ADD
47258: ST_TO_ADDR
// end else
47259: GO 47402
// begin for i = 1 to personel do
47261: LD_ADDR_VAR 0 8
47265: PUSH
47266: DOUBLE
47267: LD_INT 1
47269: DEC
47270: ST_TO_ADDR
47271: LD_VAR 0 6
47275: PUSH
47276: FOR_TO
47277: IFFALSE 47400
// begin if i > 4 then
47279: LD_VAR 0 8
47283: PUSH
47284: LD_INT 4
47286: GREATER
47287: IFFALSE 47291
// break ;
47289: GO 47400
// x := personel [ i ] ;
47291: LD_ADDR_VAR 0 13
47295: PUSH
47296: LD_VAR 0 6
47300: PUSH
47301: LD_VAR 0 8
47305: ARRAY
47306: ST_TO_ADDR
// if x = - 1 then
47307: LD_VAR 0 13
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: EQUAL
47316: IFFALSE 47320
// continue ;
47318: GO 47276
// PrepareHuman ( false , i , skill ) ;
47320: LD_INT 0
47322: PPUSH
47323: LD_VAR 0 8
47327: PPUSH
47328: LD_VAR 0 4
47332: PPUSH
47333: CALL_OW 380
// un := CreateHuman ;
47337: LD_ADDR_VAR 0 14
47341: PUSH
47342: CALL_OW 44
47346: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47347: LD_VAR 0 14
47351: PPUSH
47352: LD_VAR 0 1
47356: PPUSH
47357: CALL_OW 250
47361: PPUSH
47362: LD_VAR 0 1
47366: PPUSH
47367: CALL_OW 251
47371: PPUSH
47372: LD_INT 10
47374: PPUSH
47375: LD_INT 0
47377: PPUSH
47378: CALL_OW 50
// result := result ^ un ;
47382: LD_ADDR_VAR 0 7
47386: PUSH
47387: LD_VAR 0 7
47391: PUSH
47392: LD_VAR 0 14
47396: ADD
47397: ST_TO_ADDR
// end ;
47398: GO 47276
47400: POP
47401: POP
// end ; end ;
47402: LD_VAR 0 7
47406: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47407: LD_INT 0
47409: PPUSH
47410: PPUSH
47411: PPUSH
47412: PPUSH
47413: PPUSH
47414: PPUSH
47415: PPUSH
47416: PPUSH
47417: PPUSH
47418: PPUSH
47419: PPUSH
47420: PPUSH
47421: PPUSH
47422: PPUSH
47423: PPUSH
47424: PPUSH
// result := false ;
47425: LD_ADDR_VAR 0 3
47429: PUSH
47430: LD_INT 0
47432: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47433: LD_VAR 0 1
47437: NOT
47438: PUSH
47439: LD_VAR 0 1
47443: PPUSH
47444: CALL_OW 266
47448: PUSH
47449: LD_INT 32
47451: PUSH
47452: LD_INT 33
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: IN
47459: NOT
47460: OR
47461: IFFALSE 47465
// exit ;
47463: GO 48574
// nat := GetNation ( tower ) ;
47465: LD_ADDR_VAR 0 12
47469: PUSH
47470: LD_VAR 0 1
47474: PPUSH
47475: CALL_OW 248
47479: ST_TO_ADDR
// side := GetSide ( tower ) ;
47480: LD_ADDR_VAR 0 16
47484: PUSH
47485: LD_VAR 0 1
47489: PPUSH
47490: CALL_OW 255
47494: ST_TO_ADDR
// x := GetX ( tower ) ;
47495: LD_ADDR_VAR 0 10
47499: PUSH
47500: LD_VAR 0 1
47504: PPUSH
47505: CALL_OW 250
47509: ST_TO_ADDR
// y := GetY ( tower ) ;
47510: LD_ADDR_VAR 0 11
47514: PUSH
47515: LD_VAR 0 1
47519: PPUSH
47520: CALL_OW 251
47524: ST_TO_ADDR
// if not x or not y then
47525: LD_VAR 0 10
47529: NOT
47530: PUSH
47531: LD_VAR 0 11
47535: NOT
47536: OR
47537: IFFALSE 47541
// exit ;
47539: GO 48574
// weapon := 0 ;
47541: LD_ADDR_VAR 0 18
47545: PUSH
47546: LD_INT 0
47548: ST_TO_ADDR
// fac_list := [ ] ;
47549: LD_ADDR_VAR 0 17
47553: PUSH
47554: EMPTY
47555: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47556: LD_ADDR_VAR 0 6
47560: PUSH
47561: LD_VAR 0 1
47565: PPUSH
47566: CALL_OW 274
47570: PPUSH
47571: LD_VAR 0 2
47575: PPUSH
47576: LD_INT 0
47578: PPUSH
47579: CALL 45145 0 3
47583: PPUSH
47584: LD_INT 30
47586: PUSH
47587: LD_INT 3
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PPUSH
47594: CALL_OW 72
47598: ST_TO_ADDR
// if not factories then
47599: LD_VAR 0 6
47603: NOT
47604: IFFALSE 47608
// exit ;
47606: GO 48574
// for i in factories do
47608: LD_ADDR_VAR 0 8
47612: PUSH
47613: LD_VAR 0 6
47617: PUSH
47618: FOR_IN
47619: IFFALSE 47644
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47621: LD_ADDR_VAR 0 17
47625: PUSH
47626: LD_VAR 0 17
47630: PUSH
47631: LD_VAR 0 8
47635: PPUSH
47636: CALL_OW 478
47640: UNION
47641: ST_TO_ADDR
47642: GO 47618
47644: POP
47645: POP
// if not fac_list then
47646: LD_VAR 0 17
47650: NOT
47651: IFFALSE 47655
// exit ;
47653: GO 48574
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47655: LD_ADDR_VAR 0 5
47659: PUSH
47660: LD_INT 4
47662: PUSH
47663: LD_INT 5
47665: PUSH
47666: LD_INT 9
47668: PUSH
47669: LD_INT 10
47671: PUSH
47672: LD_INT 6
47674: PUSH
47675: LD_INT 7
47677: PUSH
47678: LD_INT 11
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 27
47692: PUSH
47693: LD_INT 28
47695: PUSH
47696: LD_INT 26
47698: PUSH
47699: LD_INT 30
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 43
47710: PUSH
47711: LD_INT 44
47713: PUSH
47714: LD_INT 46
47716: PUSH
47717: LD_INT 45
47719: PUSH
47720: LD_INT 47
47722: PUSH
47723: LD_INT 49
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: LIST
47738: PUSH
47739: LD_VAR 0 12
47743: ARRAY
47744: ST_TO_ADDR
// list := list isect fac_list ;
47745: LD_ADDR_VAR 0 5
47749: PUSH
47750: LD_VAR 0 5
47754: PUSH
47755: LD_VAR 0 17
47759: ISECT
47760: ST_TO_ADDR
// if not list then
47761: LD_VAR 0 5
47765: NOT
47766: IFFALSE 47770
// exit ;
47768: GO 48574
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47770: LD_VAR 0 12
47774: PUSH
47775: LD_INT 3
47777: EQUAL
47778: PUSH
47779: LD_INT 49
47781: PUSH
47782: LD_VAR 0 5
47786: IN
47787: AND
47788: PUSH
47789: LD_INT 31
47791: PPUSH
47792: LD_VAR 0 16
47796: PPUSH
47797: CALL_OW 321
47801: PUSH
47802: LD_INT 2
47804: EQUAL
47805: AND
47806: IFFALSE 47866
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47808: LD_INT 22
47810: PUSH
47811: LD_VAR 0 16
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 35
47822: PUSH
47823: LD_INT 49
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 91
47832: PUSH
47833: LD_VAR 0 1
47837: PUSH
47838: LD_INT 10
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: PPUSH
47851: CALL_OW 69
47855: NOT
47856: IFFALSE 47866
// weapon := ru_time_lapser ;
47858: LD_ADDR_VAR 0 18
47862: PUSH
47863: LD_INT 49
47865: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47866: LD_VAR 0 12
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: IN
47881: PUSH
47882: LD_INT 11
47884: PUSH
47885: LD_VAR 0 5
47889: IN
47890: PUSH
47891: LD_INT 30
47893: PUSH
47894: LD_VAR 0 5
47898: IN
47899: OR
47900: AND
47901: PUSH
47902: LD_INT 6
47904: PPUSH
47905: LD_VAR 0 16
47909: PPUSH
47910: CALL_OW 321
47914: PUSH
47915: LD_INT 2
47917: EQUAL
47918: AND
47919: IFFALSE 48084
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47921: LD_INT 22
47923: PUSH
47924: LD_VAR 0 16
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: LD_INT 35
47938: PUSH
47939: LD_INT 11
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 35
47948: PUSH
47949: LD_INT 30
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 91
47963: PUSH
47964: LD_VAR 0 1
47968: PUSH
47969: LD_INT 18
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: LIST
47981: PPUSH
47982: CALL_OW 69
47986: NOT
47987: PUSH
47988: LD_INT 22
47990: PUSH
47991: LD_VAR 0 16
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: LD_INT 30
48005: PUSH
48006: LD_INT 32
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 30
48015: PUSH
48016: LD_INT 33
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 91
48030: PUSH
48031: LD_VAR 0 1
48035: PUSH
48036: LD_INT 12
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: LIST
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: PUSH
48049: EMPTY
48050: LIST
48051: PPUSH
48052: CALL_OW 69
48056: PUSH
48057: LD_INT 2
48059: GREATER
48060: AND
48061: IFFALSE 48084
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48063: LD_ADDR_VAR 0 18
48067: PUSH
48068: LD_INT 11
48070: PUSH
48071: LD_INT 30
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_VAR 0 12
48082: ARRAY
48083: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48084: LD_VAR 0 18
48088: NOT
48089: PUSH
48090: LD_INT 40
48092: PPUSH
48093: LD_VAR 0 16
48097: PPUSH
48098: CALL_OW 321
48102: PUSH
48103: LD_INT 2
48105: EQUAL
48106: AND
48107: PUSH
48108: LD_INT 7
48110: PUSH
48111: LD_VAR 0 5
48115: IN
48116: PUSH
48117: LD_INT 28
48119: PUSH
48120: LD_VAR 0 5
48124: IN
48125: OR
48126: PUSH
48127: LD_INT 45
48129: PUSH
48130: LD_VAR 0 5
48134: IN
48135: OR
48136: AND
48137: IFFALSE 48391
// begin hex := GetHexInfo ( x , y ) ;
48139: LD_ADDR_VAR 0 4
48143: PUSH
48144: LD_VAR 0 10
48148: PPUSH
48149: LD_VAR 0 11
48153: PPUSH
48154: CALL_OW 546
48158: ST_TO_ADDR
// if hex [ 1 ] then
48159: LD_VAR 0 4
48163: PUSH
48164: LD_INT 1
48166: ARRAY
48167: IFFALSE 48171
// exit ;
48169: GO 48574
// height := hex [ 2 ] ;
48171: LD_ADDR_VAR 0 15
48175: PUSH
48176: LD_VAR 0 4
48180: PUSH
48181: LD_INT 2
48183: ARRAY
48184: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48185: LD_ADDR_VAR 0 14
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: LD_INT 3
48198: PUSH
48199: LD_INT 5
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: ST_TO_ADDR
// for i in tmp do
48208: LD_ADDR_VAR 0 8
48212: PUSH
48213: LD_VAR 0 14
48217: PUSH
48218: FOR_IN
48219: IFFALSE 48389
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48221: LD_ADDR_VAR 0 9
48225: PUSH
48226: LD_VAR 0 10
48230: PPUSH
48231: LD_VAR 0 8
48235: PPUSH
48236: LD_INT 5
48238: PPUSH
48239: CALL_OW 272
48243: PUSH
48244: LD_VAR 0 11
48248: PPUSH
48249: LD_VAR 0 8
48253: PPUSH
48254: LD_INT 5
48256: PPUSH
48257: CALL_OW 273
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48266: LD_VAR 0 9
48270: PUSH
48271: LD_INT 1
48273: ARRAY
48274: PPUSH
48275: LD_VAR 0 9
48279: PUSH
48280: LD_INT 2
48282: ARRAY
48283: PPUSH
48284: CALL_OW 488
48288: IFFALSE 48387
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48290: LD_ADDR_VAR 0 4
48294: PUSH
48295: LD_VAR 0 9
48299: PUSH
48300: LD_INT 1
48302: ARRAY
48303: PPUSH
48304: LD_VAR 0 9
48308: PUSH
48309: LD_INT 2
48311: ARRAY
48312: PPUSH
48313: CALL_OW 546
48317: ST_TO_ADDR
// if hex [ 1 ] then
48318: LD_VAR 0 4
48322: PUSH
48323: LD_INT 1
48325: ARRAY
48326: IFFALSE 48330
// continue ;
48328: GO 48218
// h := hex [ 2 ] ;
48330: LD_ADDR_VAR 0 13
48334: PUSH
48335: LD_VAR 0 4
48339: PUSH
48340: LD_INT 2
48342: ARRAY
48343: ST_TO_ADDR
// if h + 7 < height then
48344: LD_VAR 0 13
48348: PUSH
48349: LD_INT 7
48351: PLUS
48352: PUSH
48353: LD_VAR 0 15
48357: LESS
48358: IFFALSE 48387
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48360: LD_ADDR_VAR 0 18
48364: PUSH
48365: LD_INT 7
48367: PUSH
48368: LD_INT 28
48370: PUSH
48371: LD_INT 45
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: LIST
48378: PUSH
48379: LD_VAR 0 12
48383: ARRAY
48384: ST_TO_ADDR
// break ;
48385: GO 48389
// end ; end ; end ;
48387: GO 48218
48389: POP
48390: POP
// end ; if not weapon then
48391: LD_VAR 0 18
48395: NOT
48396: IFFALSE 48456
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48398: LD_ADDR_VAR 0 5
48402: PUSH
48403: LD_VAR 0 5
48407: PUSH
48408: LD_INT 11
48410: PUSH
48411: LD_INT 30
48413: PUSH
48414: LD_INT 49
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: LIST
48421: DIFF
48422: ST_TO_ADDR
// if not list then
48423: LD_VAR 0 5
48427: NOT
48428: IFFALSE 48432
// exit ;
48430: GO 48574
// weapon := list [ rand ( 1 , list ) ] ;
48432: LD_ADDR_VAR 0 18
48436: PUSH
48437: LD_VAR 0 5
48441: PUSH
48442: LD_INT 1
48444: PPUSH
48445: LD_VAR 0 5
48449: PPUSH
48450: CALL_OW 12
48454: ARRAY
48455: ST_TO_ADDR
// end ; if weapon then
48456: LD_VAR 0 18
48460: IFFALSE 48574
// begin tmp := CostOfWeapon ( weapon ) ;
48462: LD_ADDR_VAR 0 14
48466: PUSH
48467: LD_VAR 0 18
48471: PPUSH
48472: CALL_OW 451
48476: ST_TO_ADDR
// j := GetBase ( tower ) ;
48477: LD_ADDR_VAR 0 9
48481: PUSH
48482: LD_VAR 0 1
48486: PPUSH
48487: CALL_OW 274
48491: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48492: LD_VAR 0 9
48496: PPUSH
48497: LD_INT 1
48499: PPUSH
48500: CALL_OW 275
48504: PUSH
48505: LD_VAR 0 14
48509: PUSH
48510: LD_INT 1
48512: ARRAY
48513: GREATEREQUAL
48514: PUSH
48515: LD_VAR 0 9
48519: PPUSH
48520: LD_INT 2
48522: PPUSH
48523: CALL_OW 275
48527: PUSH
48528: LD_VAR 0 14
48532: PUSH
48533: LD_INT 2
48535: ARRAY
48536: GREATEREQUAL
48537: AND
48538: PUSH
48539: LD_VAR 0 9
48543: PPUSH
48544: LD_INT 3
48546: PPUSH
48547: CALL_OW 275
48551: PUSH
48552: LD_VAR 0 14
48556: PUSH
48557: LD_INT 3
48559: ARRAY
48560: GREATEREQUAL
48561: AND
48562: IFFALSE 48574
// result := weapon ;
48564: LD_ADDR_VAR 0 3
48568: PUSH
48569: LD_VAR 0 18
48573: ST_TO_ADDR
// end ; end ;
48574: LD_VAR 0 3
48578: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48579: LD_INT 0
48581: PPUSH
48582: PPUSH
// result := true ;
48583: LD_ADDR_VAR 0 3
48587: PUSH
48588: LD_INT 1
48590: ST_TO_ADDR
// if array1 = array2 then
48591: LD_VAR 0 1
48595: PUSH
48596: LD_VAR 0 2
48600: EQUAL
48601: IFFALSE 48661
// begin for i = 1 to array1 do
48603: LD_ADDR_VAR 0 4
48607: PUSH
48608: DOUBLE
48609: LD_INT 1
48611: DEC
48612: ST_TO_ADDR
48613: LD_VAR 0 1
48617: PUSH
48618: FOR_TO
48619: IFFALSE 48657
// if array1 [ i ] <> array2 [ i ] then
48621: LD_VAR 0 1
48625: PUSH
48626: LD_VAR 0 4
48630: ARRAY
48631: PUSH
48632: LD_VAR 0 2
48636: PUSH
48637: LD_VAR 0 4
48641: ARRAY
48642: NONEQUAL
48643: IFFALSE 48655
// begin result := false ;
48645: LD_ADDR_VAR 0 3
48649: PUSH
48650: LD_INT 0
48652: ST_TO_ADDR
// break ;
48653: GO 48657
// end ;
48655: GO 48618
48657: POP
48658: POP
// end else
48659: GO 48669
// result := false ;
48661: LD_ADDR_VAR 0 3
48665: PUSH
48666: LD_INT 0
48668: ST_TO_ADDR
// end ;
48669: LD_VAR 0 3
48673: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48674: LD_INT 0
48676: PPUSH
48677: PPUSH
// if not array1 or not array2 then
48678: LD_VAR 0 1
48682: NOT
48683: PUSH
48684: LD_VAR 0 2
48688: NOT
48689: OR
48690: IFFALSE 48694
// exit ;
48692: GO 48758
// result := true ;
48694: LD_ADDR_VAR 0 3
48698: PUSH
48699: LD_INT 1
48701: ST_TO_ADDR
// for i = 1 to array1 do
48702: LD_ADDR_VAR 0 4
48706: PUSH
48707: DOUBLE
48708: LD_INT 1
48710: DEC
48711: ST_TO_ADDR
48712: LD_VAR 0 1
48716: PUSH
48717: FOR_TO
48718: IFFALSE 48756
// if array1 [ i ] <> array2 [ i ] then
48720: LD_VAR 0 1
48724: PUSH
48725: LD_VAR 0 4
48729: ARRAY
48730: PUSH
48731: LD_VAR 0 2
48735: PUSH
48736: LD_VAR 0 4
48740: ARRAY
48741: NONEQUAL
48742: IFFALSE 48754
// begin result := false ;
48744: LD_ADDR_VAR 0 3
48748: PUSH
48749: LD_INT 0
48751: ST_TO_ADDR
// break ;
48752: GO 48756
// end ;
48754: GO 48717
48756: POP
48757: POP
// end ;
48758: LD_VAR 0 3
48762: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48763: LD_INT 0
48765: PPUSH
48766: PPUSH
48767: PPUSH
// pom := GetBase ( fac ) ;
48768: LD_ADDR_VAR 0 5
48772: PUSH
48773: LD_VAR 0 1
48777: PPUSH
48778: CALL_OW 274
48782: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48783: LD_ADDR_VAR 0 4
48787: PUSH
48788: LD_VAR 0 2
48792: PUSH
48793: LD_INT 1
48795: ARRAY
48796: PPUSH
48797: LD_VAR 0 2
48801: PUSH
48802: LD_INT 2
48804: ARRAY
48805: PPUSH
48806: LD_VAR 0 2
48810: PUSH
48811: LD_INT 3
48813: ARRAY
48814: PPUSH
48815: LD_VAR 0 2
48819: PUSH
48820: LD_INT 4
48822: ARRAY
48823: PPUSH
48824: CALL_OW 449
48828: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48829: LD_ADDR_VAR 0 3
48833: PUSH
48834: LD_VAR 0 5
48838: PPUSH
48839: LD_INT 1
48841: PPUSH
48842: CALL_OW 275
48846: PUSH
48847: LD_VAR 0 4
48851: PUSH
48852: LD_INT 1
48854: ARRAY
48855: GREATEREQUAL
48856: PUSH
48857: LD_VAR 0 5
48861: PPUSH
48862: LD_INT 2
48864: PPUSH
48865: CALL_OW 275
48869: PUSH
48870: LD_VAR 0 4
48874: PUSH
48875: LD_INT 2
48877: ARRAY
48878: GREATEREQUAL
48879: AND
48880: PUSH
48881: LD_VAR 0 5
48885: PPUSH
48886: LD_INT 3
48888: PPUSH
48889: CALL_OW 275
48893: PUSH
48894: LD_VAR 0 4
48898: PUSH
48899: LD_INT 3
48901: ARRAY
48902: GREATEREQUAL
48903: AND
48904: ST_TO_ADDR
// end ;
48905: LD_VAR 0 3
48909: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48910: LD_INT 0
48912: PPUSH
48913: PPUSH
48914: PPUSH
48915: PPUSH
// pom := GetBase ( building ) ;
48916: LD_ADDR_VAR 0 3
48920: PUSH
48921: LD_VAR 0 1
48925: PPUSH
48926: CALL_OW 274
48930: ST_TO_ADDR
// if not pom then
48931: LD_VAR 0 3
48935: NOT
48936: IFFALSE 48940
// exit ;
48938: GO 49110
// btype := GetBType ( building ) ;
48940: LD_ADDR_VAR 0 5
48944: PUSH
48945: LD_VAR 0 1
48949: PPUSH
48950: CALL_OW 266
48954: ST_TO_ADDR
// if btype = b_armoury then
48955: LD_VAR 0 5
48959: PUSH
48960: LD_INT 4
48962: EQUAL
48963: IFFALSE 48973
// btype := b_barracks ;
48965: LD_ADDR_VAR 0 5
48969: PUSH
48970: LD_INT 5
48972: ST_TO_ADDR
// if btype = b_depot then
48973: LD_VAR 0 5
48977: PUSH
48978: LD_INT 0
48980: EQUAL
48981: IFFALSE 48991
// btype := b_warehouse ;
48983: LD_ADDR_VAR 0 5
48987: PUSH
48988: LD_INT 1
48990: ST_TO_ADDR
// if btype = b_workshop then
48991: LD_VAR 0 5
48995: PUSH
48996: LD_INT 2
48998: EQUAL
48999: IFFALSE 49009
// btype := b_factory ;
49001: LD_ADDR_VAR 0 5
49005: PUSH
49006: LD_INT 3
49008: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49009: LD_ADDR_VAR 0 4
49013: PUSH
49014: LD_VAR 0 5
49018: PPUSH
49019: LD_VAR 0 1
49023: PPUSH
49024: CALL_OW 248
49028: PPUSH
49029: CALL_OW 450
49033: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49034: LD_ADDR_VAR 0 2
49038: PUSH
49039: LD_VAR 0 3
49043: PPUSH
49044: LD_INT 1
49046: PPUSH
49047: CALL_OW 275
49051: PUSH
49052: LD_VAR 0 4
49056: PUSH
49057: LD_INT 1
49059: ARRAY
49060: GREATEREQUAL
49061: PUSH
49062: LD_VAR 0 3
49066: PPUSH
49067: LD_INT 2
49069: PPUSH
49070: CALL_OW 275
49074: PUSH
49075: LD_VAR 0 4
49079: PUSH
49080: LD_INT 2
49082: ARRAY
49083: GREATEREQUAL
49084: AND
49085: PUSH
49086: LD_VAR 0 3
49090: PPUSH
49091: LD_INT 3
49093: PPUSH
49094: CALL_OW 275
49098: PUSH
49099: LD_VAR 0 4
49103: PUSH
49104: LD_INT 3
49106: ARRAY
49107: GREATEREQUAL
49108: AND
49109: ST_TO_ADDR
// end ;
49110: LD_VAR 0 2
49114: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49115: LD_INT 0
49117: PPUSH
49118: PPUSH
49119: PPUSH
// pom := GetBase ( building ) ;
49120: LD_ADDR_VAR 0 4
49124: PUSH
49125: LD_VAR 0 1
49129: PPUSH
49130: CALL_OW 274
49134: ST_TO_ADDR
// if not pom then
49135: LD_VAR 0 4
49139: NOT
49140: IFFALSE 49144
// exit ;
49142: GO 49245
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49144: LD_ADDR_VAR 0 5
49148: PUSH
49149: LD_VAR 0 2
49153: PPUSH
49154: LD_VAR 0 1
49158: PPUSH
49159: CALL_OW 248
49163: PPUSH
49164: CALL_OW 450
49168: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49169: LD_ADDR_VAR 0 3
49173: PUSH
49174: LD_VAR 0 4
49178: PPUSH
49179: LD_INT 1
49181: PPUSH
49182: CALL_OW 275
49186: PUSH
49187: LD_VAR 0 5
49191: PUSH
49192: LD_INT 1
49194: ARRAY
49195: GREATEREQUAL
49196: PUSH
49197: LD_VAR 0 4
49201: PPUSH
49202: LD_INT 2
49204: PPUSH
49205: CALL_OW 275
49209: PUSH
49210: LD_VAR 0 5
49214: PUSH
49215: LD_INT 2
49217: ARRAY
49218: GREATEREQUAL
49219: AND
49220: PUSH
49221: LD_VAR 0 4
49225: PPUSH
49226: LD_INT 3
49228: PPUSH
49229: CALL_OW 275
49233: PUSH
49234: LD_VAR 0 5
49238: PUSH
49239: LD_INT 3
49241: ARRAY
49242: GREATEREQUAL
49243: AND
49244: ST_TO_ADDR
// end ;
49245: LD_VAR 0 3
49249: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49250: LD_INT 0
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
49256: PPUSH
49257: PPUSH
49258: PPUSH
49259: PPUSH
49260: PPUSH
49261: PPUSH
49262: PPUSH
// result := false ;
49263: LD_ADDR_VAR 0 8
49267: PUSH
49268: LD_INT 0
49270: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49271: LD_VAR 0 5
49275: NOT
49276: PUSH
49277: LD_VAR 0 1
49281: NOT
49282: OR
49283: PUSH
49284: LD_VAR 0 2
49288: NOT
49289: OR
49290: PUSH
49291: LD_VAR 0 3
49295: NOT
49296: OR
49297: IFFALSE 49301
// exit ;
49299: GO 50115
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49301: LD_ADDR_VAR 0 14
49305: PUSH
49306: LD_VAR 0 1
49310: PPUSH
49311: LD_VAR 0 2
49315: PPUSH
49316: LD_VAR 0 3
49320: PPUSH
49321: LD_VAR 0 4
49325: PPUSH
49326: LD_VAR 0 5
49330: PUSH
49331: LD_INT 1
49333: ARRAY
49334: PPUSH
49335: CALL_OW 248
49339: PPUSH
49340: LD_INT 0
49342: PPUSH
49343: CALL 51352 0 6
49347: ST_TO_ADDR
// if not hexes then
49348: LD_VAR 0 14
49352: NOT
49353: IFFALSE 49357
// exit ;
49355: GO 50115
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49357: LD_ADDR_VAR 0 17
49361: PUSH
49362: LD_VAR 0 5
49366: PPUSH
49367: LD_INT 22
49369: PUSH
49370: LD_VAR 0 13
49374: PPUSH
49375: CALL_OW 255
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: LD_INT 30
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 30
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: LIST
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PPUSH
49416: CALL_OW 72
49420: ST_TO_ADDR
// for i = 1 to hexes do
49421: LD_ADDR_VAR 0 9
49425: PUSH
49426: DOUBLE
49427: LD_INT 1
49429: DEC
49430: ST_TO_ADDR
49431: LD_VAR 0 14
49435: PUSH
49436: FOR_TO
49437: IFFALSE 50113
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49439: LD_ADDR_VAR 0 13
49443: PUSH
49444: LD_VAR 0 14
49448: PUSH
49449: LD_VAR 0 9
49453: ARRAY
49454: PUSH
49455: LD_INT 1
49457: ARRAY
49458: PPUSH
49459: LD_VAR 0 14
49463: PUSH
49464: LD_VAR 0 9
49468: ARRAY
49469: PUSH
49470: LD_INT 2
49472: ARRAY
49473: PPUSH
49474: CALL_OW 428
49478: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49479: LD_VAR 0 14
49483: PUSH
49484: LD_VAR 0 9
49488: ARRAY
49489: PUSH
49490: LD_INT 1
49492: ARRAY
49493: PPUSH
49494: LD_VAR 0 14
49498: PUSH
49499: LD_VAR 0 9
49503: ARRAY
49504: PUSH
49505: LD_INT 2
49507: ARRAY
49508: PPUSH
49509: CALL_OW 351
49513: PUSH
49514: LD_VAR 0 14
49518: PUSH
49519: LD_VAR 0 9
49523: ARRAY
49524: PUSH
49525: LD_INT 1
49527: ARRAY
49528: PPUSH
49529: LD_VAR 0 14
49533: PUSH
49534: LD_VAR 0 9
49538: ARRAY
49539: PUSH
49540: LD_INT 2
49542: ARRAY
49543: PPUSH
49544: CALL_OW 488
49548: NOT
49549: OR
49550: PUSH
49551: LD_VAR 0 13
49555: PPUSH
49556: CALL_OW 247
49560: PUSH
49561: LD_INT 3
49563: EQUAL
49564: OR
49565: IFFALSE 49571
// exit ;
49567: POP
49568: POP
49569: GO 50115
// if not tmp then
49571: LD_VAR 0 13
49575: NOT
49576: IFFALSE 49580
// continue ;
49578: GO 49436
// result := true ;
49580: LD_ADDR_VAR 0 8
49584: PUSH
49585: LD_INT 1
49587: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49588: LD_VAR 0 6
49592: PUSH
49593: LD_VAR 0 13
49597: PPUSH
49598: CALL_OW 247
49602: PUSH
49603: LD_INT 2
49605: EQUAL
49606: AND
49607: PUSH
49608: LD_VAR 0 13
49612: PPUSH
49613: CALL_OW 263
49617: PUSH
49618: LD_INT 1
49620: EQUAL
49621: AND
49622: IFFALSE 49786
// begin if IsDrivenBy ( tmp ) then
49624: LD_VAR 0 13
49628: PPUSH
49629: CALL_OW 311
49633: IFFALSE 49637
// continue ;
49635: GO 49436
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49637: LD_VAR 0 6
49641: PPUSH
49642: LD_INT 3
49644: PUSH
49645: LD_INT 60
49647: PUSH
49648: EMPTY
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 3
49657: PUSH
49658: LD_INT 55
49660: PUSH
49661: EMPTY
49662: LIST
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PPUSH
49672: CALL_OW 72
49676: IFFALSE 49784
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49678: LD_ADDR_VAR 0 18
49682: PUSH
49683: LD_VAR 0 6
49687: PPUSH
49688: LD_INT 3
49690: PUSH
49691: LD_INT 60
49693: PUSH
49694: EMPTY
49695: LIST
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 3
49703: PUSH
49704: LD_INT 55
49706: PUSH
49707: EMPTY
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PPUSH
49718: CALL_OW 72
49722: PUSH
49723: LD_INT 1
49725: ARRAY
49726: ST_TO_ADDR
// if IsInUnit ( driver ) then
49727: LD_VAR 0 18
49731: PPUSH
49732: CALL_OW 310
49736: IFFALSE 49747
// ComExit ( driver ) ;
49738: LD_VAR 0 18
49742: PPUSH
49743: CALL 74536 0 1
// AddComEnterUnit ( driver , tmp ) ;
49747: LD_VAR 0 18
49751: PPUSH
49752: LD_VAR 0 13
49756: PPUSH
49757: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49761: LD_VAR 0 18
49765: PPUSH
49766: LD_VAR 0 7
49770: PPUSH
49771: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49775: LD_VAR 0 18
49779: PPUSH
49780: CALL_OW 181
// end ; continue ;
49784: GO 49436
// end ; if not cleaners or not tmp in cleaners then
49786: LD_VAR 0 6
49790: NOT
49791: PUSH
49792: LD_VAR 0 13
49796: PUSH
49797: LD_VAR 0 6
49801: IN
49802: NOT
49803: OR
49804: IFFALSE 50111
// begin if dep then
49806: LD_VAR 0 17
49810: IFFALSE 49946
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49812: LD_ADDR_VAR 0 16
49816: PUSH
49817: LD_VAR 0 17
49821: PUSH
49822: LD_INT 1
49824: ARRAY
49825: PPUSH
49826: CALL_OW 250
49830: PPUSH
49831: LD_VAR 0 17
49835: PUSH
49836: LD_INT 1
49838: ARRAY
49839: PPUSH
49840: CALL_OW 254
49844: PPUSH
49845: LD_INT 5
49847: PPUSH
49848: CALL_OW 272
49852: PUSH
49853: LD_VAR 0 17
49857: PUSH
49858: LD_INT 1
49860: ARRAY
49861: PPUSH
49862: CALL_OW 251
49866: PPUSH
49867: LD_VAR 0 17
49871: PUSH
49872: LD_INT 1
49874: ARRAY
49875: PPUSH
49876: CALL_OW 254
49880: PPUSH
49881: LD_INT 5
49883: PPUSH
49884: CALL_OW 273
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49893: LD_VAR 0 16
49897: PUSH
49898: LD_INT 1
49900: ARRAY
49901: PPUSH
49902: LD_VAR 0 16
49906: PUSH
49907: LD_INT 2
49909: ARRAY
49910: PPUSH
49911: CALL_OW 488
49915: IFFALSE 49946
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49917: LD_VAR 0 13
49921: PPUSH
49922: LD_VAR 0 16
49926: PUSH
49927: LD_INT 1
49929: ARRAY
49930: PPUSH
49931: LD_VAR 0 16
49935: PUSH
49936: LD_INT 2
49938: ARRAY
49939: PPUSH
49940: CALL_OW 111
// continue ;
49944: GO 49436
// end ; end ; r := GetDir ( tmp ) ;
49946: LD_ADDR_VAR 0 15
49950: PUSH
49951: LD_VAR 0 13
49955: PPUSH
49956: CALL_OW 254
49960: ST_TO_ADDR
// if r = 5 then
49961: LD_VAR 0 15
49965: PUSH
49966: LD_INT 5
49968: EQUAL
49969: IFFALSE 49979
// r := 0 ;
49971: LD_ADDR_VAR 0 15
49975: PUSH
49976: LD_INT 0
49978: ST_TO_ADDR
// for j = r to 5 do
49979: LD_ADDR_VAR 0 10
49983: PUSH
49984: DOUBLE
49985: LD_VAR 0 15
49989: DEC
49990: ST_TO_ADDR
49991: LD_INT 5
49993: PUSH
49994: FOR_TO
49995: IFFALSE 50109
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49997: LD_ADDR_VAR 0 11
50001: PUSH
50002: LD_VAR 0 13
50006: PPUSH
50007: CALL_OW 250
50011: PPUSH
50012: LD_VAR 0 10
50016: PPUSH
50017: LD_INT 2
50019: PPUSH
50020: CALL_OW 272
50024: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50025: LD_ADDR_VAR 0 12
50029: PUSH
50030: LD_VAR 0 13
50034: PPUSH
50035: CALL_OW 251
50039: PPUSH
50040: LD_VAR 0 10
50044: PPUSH
50045: LD_INT 2
50047: PPUSH
50048: CALL_OW 273
50052: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50053: LD_VAR 0 11
50057: PPUSH
50058: LD_VAR 0 12
50062: PPUSH
50063: CALL_OW 488
50067: PUSH
50068: LD_VAR 0 11
50072: PPUSH
50073: LD_VAR 0 12
50077: PPUSH
50078: CALL_OW 428
50082: NOT
50083: AND
50084: IFFALSE 50107
// begin ComMoveXY ( tmp , _x , _y ) ;
50086: LD_VAR 0 13
50090: PPUSH
50091: LD_VAR 0 11
50095: PPUSH
50096: LD_VAR 0 12
50100: PPUSH
50101: CALL_OW 111
// break ;
50105: GO 50109
// end ; end ;
50107: GO 49994
50109: POP
50110: POP
// end ; end ;
50111: GO 49436
50113: POP
50114: POP
// end ;
50115: LD_VAR 0 8
50119: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50120: LD_INT 0
50122: PPUSH
// result := true ;
50123: LD_ADDR_VAR 0 3
50127: PUSH
50128: LD_INT 1
50130: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50131: LD_VAR 0 2
50135: PUSH
50136: LD_INT 24
50138: DOUBLE
50139: EQUAL
50140: IFTRUE 50150
50142: LD_INT 33
50144: DOUBLE
50145: EQUAL
50146: IFTRUE 50150
50148: GO 50175
50150: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50151: LD_ADDR_VAR 0 3
50155: PUSH
50156: LD_INT 32
50158: PPUSH
50159: LD_VAR 0 1
50163: PPUSH
50164: CALL_OW 321
50168: PUSH
50169: LD_INT 2
50171: EQUAL
50172: ST_TO_ADDR
50173: GO 50495
50175: LD_INT 20
50177: DOUBLE
50178: EQUAL
50179: IFTRUE 50183
50181: GO 50208
50183: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50184: LD_ADDR_VAR 0 3
50188: PUSH
50189: LD_INT 6
50191: PPUSH
50192: LD_VAR 0 1
50196: PPUSH
50197: CALL_OW 321
50201: PUSH
50202: LD_INT 2
50204: EQUAL
50205: ST_TO_ADDR
50206: GO 50495
50208: LD_INT 22
50210: DOUBLE
50211: EQUAL
50212: IFTRUE 50222
50214: LD_INT 36
50216: DOUBLE
50217: EQUAL
50218: IFTRUE 50222
50220: GO 50247
50222: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50223: LD_ADDR_VAR 0 3
50227: PUSH
50228: LD_INT 15
50230: PPUSH
50231: LD_VAR 0 1
50235: PPUSH
50236: CALL_OW 321
50240: PUSH
50241: LD_INT 2
50243: EQUAL
50244: ST_TO_ADDR
50245: GO 50495
50247: LD_INT 30
50249: DOUBLE
50250: EQUAL
50251: IFTRUE 50255
50253: GO 50280
50255: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50256: LD_ADDR_VAR 0 3
50260: PUSH
50261: LD_INT 20
50263: PPUSH
50264: LD_VAR 0 1
50268: PPUSH
50269: CALL_OW 321
50273: PUSH
50274: LD_INT 2
50276: EQUAL
50277: ST_TO_ADDR
50278: GO 50495
50280: LD_INT 28
50282: DOUBLE
50283: EQUAL
50284: IFTRUE 50294
50286: LD_INT 21
50288: DOUBLE
50289: EQUAL
50290: IFTRUE 50294
50292: GO 50319
50294: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50295: LD_ADDR_VAR 0 3
50299: PUSH
50300: LD_INT 21
50302: PPUSH
50303: LD_VAR 0 1
50307: PPUSH
50308: CALL_OW 321
50312: PUSH
50313: LD_INT 2
50315: EQUAL
50316: ST_TO_ADDR
50317: GO 50495
50319: LD_INT 16
50321: DOUBLE
50322: EQUAL
50323: IFTRUE 50327
50325: GO 50354
50327: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50328: LD_ADDR_VAR 0 3
50332: PUSH
50333: LD_EXP 61
50337: PPUSH
50338: LD_VAR 0 1
50342: PPUSH
50343: CALL_OW 321
50347: PUSH
50348: LD_INT 2
50350: EQUAL
50351: ST_TO_ADDR
50352: GO 50495
50354: LD_INT 19
50356: DOUBLE
50357: EQUAL
50358: IFTRUE 50368
50360: LD_INT 23
50362: DOUBLE
50363: EQUAL
50364: IFTRUE 50368
50366: GO 50395
50368: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50369: LD_ADDR_VAR 0 3
50373: PUSH
50374: LD_EXP 60
50378: PPUSH
50379: LD_VAR 0 1
50383: PPUSH
50384: CALL_OW 321
50388: PUSH
50389: LD_INT 2
50391: EQUAL
50392: ST_TO_ADDR
50393: GO 50495
50395: LD_INT 17
50397: DOUBLE
50398: EQUAL
50399: IFTRUE 50403
50401: GO 50428
50403: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50404: LD_ADDR_VAR 0 3
50408: PUSH
50409: LD_INT 39
50411: PPUSH
50412: LD_VAR 0 1
50416: PPUSH
50417: CALL_OW 321
50421: PUSH
50422: LD_INT 2
50424: EQUAL
50425: ST_TO_ADDR
50426: GO 50495
50428: LD_INT 18
50430: DOUBLE
50431: EQUAL
50432: IFTRUE 50436
50434: GO 50461
50436: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50437: LD_ADDR_VAR 0 3
50441: PUSH
50442: LD_INT 40
50444: PPUSH
50445: LD_VAR 0 1
50449: PPUSH
50450: CALL_OW 321
50454: PUSH
50455: LD_INT 2
50457: EQUAL
50458: ST_TO_ADDR
50459: GO 50495
50461: LD_INT 27
50463: DOUBLE
50464: EQUAL
50465: IFTRUE 50469
50467: GO 50494
50469: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50470: LD_ADDR_VAR 0 3
50474: PUSH
50475: LD_INT 35
50477: PPUSH
50478: LD_VAR 0 1
50482: PPUSH
50483: CALL_OW 321
50487: PUSH
50488: LD_INT 2
50490: EQUAL
50491: ST_TO_ADDR
50492: GO 50495
50494: POP
// end ;
50495: LD_VAR 0 3
50499: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50500: LD_INT 0
50502: PPUSH
50503: PPUSH
50504: PPUSH
50505: PPUSH
50506: PPUSH
50507: PPUSH
50508: PPUSH
50509: PPUSH
50510: PPUSH
50511: PPUSH
50512: PPUSH
// result := false ;
50513: LD_ADDR_VAR 0 6
50517: PUSH
50518: LD_INT 0
50520: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50521: LD_VAR 0 1
50525: NOT
50526: PUSH
50527: LD_VAR 0 1
50531: PPUSH
50532: CALL_OW 266
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: IN
50547: NOT
50548: OR
50549: PUSH
50550: LD_VAR 0 2
50554: NOT
50555: OR
50556: PUSH
50557: LD_VAR 0 5
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: LD_INT 4
50576: PUSH
50577: LD_INT 5
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: IN
50588: NOT
50589: OR
50590: PUSH
50591: LD_VAR 0 3
50595: PPUSH
50596: LD_VAR 0 4
50600: PPUSH
50601: CALL_OW 488
50605: NOT
50606: OR
50607: IFFALSE 50611
// exit ;
50609: GO 51347
// side := GetSide ( depot ) ;
50611: LD_ADDR_VAR 0 9
50615: PUSH
50616: LD_VAR 0 1
50620: PPUSH
50621: CALL_OW 255
50625: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50626: LD_VAR 0 9
50630: PPUSH
50631: LD_VAR 0 2
50635: PPUSH
50636: CALL 50120 0 2
50640: NOT
50641: IFFALSE 50645
// exit ;
50643: GO 51347
// pom := GetBase ( depot ) ;
50645: LD_ADDR_VAR 0 10
50649: PUSH
50650: LD_VAR 0 1
50654: PPUSH
50655: CALL_OW 274
50659: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50660: LD_ADDR_VAR 0 11
50664: PUSH
50665: LD_VAR 0 2
50669: PPUSH
50670: LD_VAR 0 1
50674: PPUSH
50675: CALL_OW 248
50679: PPUSH
50680: CALL_OW 450
50684: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50685: LD_VAR 0 10
50689: PPUSH
50690: LD_INT 1
50692: PPUSH
50693: CALL_OW 275
50697: PUSH
50698: LD_VAR 0 11
50702: PUSH
50703: LD_INT 1
50705: ARRAY
50706: GREATEREQUAL
50707: PUSH
50708: LD_VAR 0 10
50712: PPUSH
50713: LD_INT 2
50715: PPUSH
50716: CALL_OW 275
50720: PUSH
50721: LD_VAR 0 11
50725: PUSH
50726: LD_INT 2
50728: ARRAY
50729: GREATEREQUAL
50730: AND
50731: PUSH
50732: LD_VAR 0 10
50736: PPUSH
50737: LD_INT 3
50739: PPUSH
50740: CALL_OW 275
50744: PUSH
50745: LD_VAR 0 11
50749: PUSH
50750: LD_INT 3
50752: ARRAY
50753: GREATEREQUAL
50754: AND
50755: NOT
50756: IFFALSE 50760
// exit ;
50758: GO 51347
// if GetBType ( depot ) = b_depot then
50760: LD_VAR 0 1
50764: PPUSH
50765: CALL_OW 266
50769: PUSH
50770: LD_INT 0
50772: EQUAL
50773: IFFALSE 50785
// dist := 28 else
50775: LD_ADDR_VAR 0 14
50779: PUSH
50780: LD_INT 28
50782: ST_TO_ADDR
50783: GO 50793
// dist := 36 ;
50785: LD_ADDR_VAR 0 14
50789: PUSH
50790: LD_INT 36
50792: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50793: LD_VAR 0 1
50797: PPUSH
50798: LD_VAR 0 3
50802: PPUSH
50803: LD_VAR 0 4
50807: PPUSH
50808: CALL_OW 297
50812: PUSH
50813: LD_VAR 0 14
50817: GREATER
50818: IFFALSE 50822
// exit ;
50820: GO 51347
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50822: LD_ADDR_VAR 0 12
50826: PUSH
50827: LD_VAR 0 2
50831: PPUSH
50832: LD_VAR 0 3
50836: PPUSH
50837: LD_VAR 0 4
50841: PPUSH
50842: LD_VAR 0 5
50846: PPUSH
50847: LD_VAR 0 1
50851: PPUSH
50852: CALL_OW 248
50856: PPUSH
50857: LD_INT 0
50859: PPUSH
50860: CALL 51352 0 6
50864: ST_TO_ADDR
// if not hexes then
50865: LD_VAR 0 12
50869: NOT
50870: IFFALSE 50874
// exit ;
50872: GO 51347
// hex := GetHexInfo ( x , y ) ;
50874: LD_ADDR_VAR 0 15
50878: PUSH
50879: LD_VAR 0 3
50883: PPUSH
50884: LD_VAR 0 4
50888: PPUSH
50889: CALL_OW 546
50893: ST_TO_ADDR
// if hex [ 1 ] then
50894: LD_VAR 0 15
50898: PUSH
50899: LD_INT 1
50901: ARRAY
50902: IFFALSE 50906
// exit ;
50904: GO 51347
// height := hex [ 2 ] ;
50906: LD_ADDR_VAR 0 13
50910: PUSH
50911: LD_VAR 0 15
50915: PUSH
50916: LD_INT 2
50918: ARRAY
50919: ST_TO_ADDR
// for i = 1 to hexes do
50920: LD_ADDR_VAR 0 7
50924: PUSH
50925: DOUBLE
50926: LD_INT 1
50928: DEC
50929: ST_TO_ADDR
50930: LD_VAR 0 12
50934: PUSH
50935: FOR_TO
50936: IFFALSE 51266
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50938: LD_VAR 0 12
50942: PUSH
50943: LD_VAR 0 7
50947: ARRAY
50948: PUSH
50949: LD_INT 1
50951: ARRAY
50952: PPUSH
50953: LD_VAR 0 12
50957: PUSH
50958: LD_VAR 0 7
50962: ARRAY
50963: PUSH
50964: LD_INT 2
50966: ARRAY
50967: PPUSH
50968: CALL_OW 488
50972: NOT
50973: PUSH
50974: LD_VAR 0 12
50978: PUSH
50979: LD_VAR 0 7
50983: ARRAY
50984: PUSH
50985: LD_INT 1
50987: ARRAY
50988: PPUSH
50989: LD_VAR 0 12
50993: PUSH
50994: LD_VAR 0 7
50998: ARRAY
50999: PUSH
51000: LD_INT 2
51002: ARRAY
51003: PPUSH
51004: CALL_OW 428
51008: PUSH
51009: LD_INT 0
51011: GREATER
51012: OR
51013: PUSH
51014: LD_VAR 0 12
51018: PUSH
51019: LD_VAR 0 7
51023: ARRAY
51024: PUSH
51025: LD_INT 1
51027: ARRAY
51028: PPUSH
51029: LD_VAR 0 12
51033: PUSH
51034: LD_VAR 0 7
51038: ARRAY
51039: PUSH
51040: LD_INT 2
51042: ARRAY
51043: PPUSH
51044: CALL_OW 351
51048: OR
51049: IFFALSE 51055
// exit ;
51051: POP
51052: POP
51053: GO 51347
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51055: LD_ADDR_VAR 0 8
51059: PUSH
51060: LD_VAR 0 12
51064: PUSH
51065: LD_VAR 0 7
51069: ARRAY
51070: PUSH
51071: LD_INT 1
51073: ARRAY
51074: PPUSH
51075: LD_VAR 0 12
51079: PUSH
51080: LD_VAR 0 7
51084: ARRAY
51085: PUSH
51086: LD_INT 2
51088: ARRAY
51089: PPUSH
51090: CALL_OW 546
51094: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51095: LD_VAR 0 8
51099: PUSH
51100: LD_INT 1
51102: ARRAY
51103: PUSH
51104: LD_VAR 0 8
51108: PUSH
51109: LD_INT 2
51111: ARRAY
51112: PUSH
51113: LD_VAR 0 13
51117: PUSH
51118: LD_INT 2
51120: PLUS
51121: GREATER
51122: OR
51123: PUSH
51124: LD_VAR 0 8
51128: PUSH
51129: LD_INT 2
51131: ARRAY
51132: PUSH
51133: LD_VAR 0 13
51137: PUSH
51138: LD_INT 2
51140: MINUS
51141: LESS
51142: OR
51143: PUSH
51144: LD_VAR 0 8
51148: PUSH
51149: LD_INT 3
51151: ARRAY
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 8
51158: PUSH
51159: LD_INT 9
51161: PUSH
51162: LD_INT 10
51164: PUSH
51165: LD_INT 11
51167: PUSH
51168: LD_INT 12
51170: PUSH
51171: LD_INT 13
51173: PUSH
51174: LD_INT 16
51176: PUSH
51177: LD_INT 17
51179: PUSH
51180: LD_INT 18
51182: PUSH
51183: LD_INT 19
51185: PUSH
51186: LD_INT 20
51188: PUSH
51189: LD_INT 21
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: IN
51207: NOT
51208: OR
51209: PUSH
51210: LD_VAR 0 8
51214: PUSH
51215: LD_INT 5
51217: ARRAY
51218: NOT
51219: OR
51220: PUSH
51221: LD_VAR 0 8
51225: PUSH
51226: LD_INT 6
51228: ARRAY
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 7
51238: PUSH
51239: LD_INT 9
51241: PUSH
51242: LD_INT 10
51244: PUSH
51245: LD_INT 11
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: IN
51256: NOT
51257: OR
51258: IFFALSE 51264
// exit ;
51260: POP
51261: POP
51262: GO 51347
// end ;
51264: GO 50935
51266: POP
51267: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51268: LD_VAR 0 9
51272: PPUSH
51273: LD_VAR 0 3
51277: PPUSH
51278: LD_VAR 0 4
51282: PPUSH
51283: LD_INT 20
51285: PPUSH
51286: CALL 43293 0 4
51290: PUSH
51291: LD_INT 4
51293: ARRAY
51294: IFFALSE 51298
// exit ;
51296: GO 51347
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51298: LD_VAR 0 2
51302: PUSH
51303: LD_INT 29
51305: PUSH
51306: LD_INT 30
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: IN
51313: PUSH
51314: LD_VAR 0 3
51318: PPUSH
51319: LD_VAR 0 4
51323: PPUSH
51324: LD_VAR 0 9
51328: PPUSH
51329: CALL_OW 440
51333: NOT
51334: AND
51335: IFFALSE 51339
// exit ;
51337: GO 51347
// result := true ;
51339: LD_ADDR_VAR 0 6
51343: PUSH
51344: LD_INT 1
51346: ST_TO_ADDR
// end ;
51347: LD_VAR 0 6
51351: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51352: LD_INT 0
51354: PPUSH
51355: PPUSH
51356: PPUSH
51357: PPUSH
51358: PPUSH
51359: PPUSH
51360: PPUSH
51361: PPUSH
51362: PPUSH
51363: PPUSH
51364: PPUSH
51365: PPUSH
51366: PPUSH
51367: PPUSH
51368: PPUSH
51369: PPUSH
51370: PPUSH
51371: PPUSH
51372: PPUSH
51373: PPUSH
51374: PPUSH
51375: PPUSH
51376: PPUSH
51377: PPUSH
51378: PPUSH
51379: PPUSH
51380: PPUSH
51381: PPUSH
51382: PPUSH
51383: PPUSH
51384: PPUSH
51385: PPUSH
51386: PPUSH
51387: PPUSH
51388: PPUSH
51389: PPUSH
51390: PPUSH
51391: PPUSH
51392: PPUSH
51393: PPUSH
51394: PPUSH
51395: PPUSH
51396: PPUSH
51397: PPUSH
51398: PPUSH
51399: PPUSH
51400: PPUSH
51401: PPUSH
51402: PPUSH
51403: PPUSH
51404: PPUSH
51405: PPUSH
51406: PPUSH
51407: PPUSH
51408: PPUSH
51409: PPUSH
51410: PPUSH
51411: PPUSH
// result = [ ] ;
51412: LD_ADDR_VAR 0 7
51416: PUSH
51417: EMPTY
51418: ST_TO_ADDR
// temp_list = [ ] ;
51419: LD_ADDR_VAR 0 9
51423: PUSH
51424: EMPTY
51425: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51426: LD_VAR 0 4
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: LD_INT 3
51442: PUSH
51443: LD_INT 4
51445: PUSH
51446: LD_INT 5
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: IN
51457: NOT
51458: PUSH
51459: LD_VAR 0 1
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: IN
51474: PUSH
51475: LD_VAR 0 5
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 3
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: LIST
51493: IN
51494: NOT
51495: AND
51496: OR
51497: IFFALSE 51501
// exit ;
51499: GO 69892
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51501: LD_VAR 0 1
51505: PUSH
51506: LD_INT 6
51508: PUSH
51509: LD_INT 7
51511: PUSH
51512: LD_INT 8
51514: PUSH
51515: LD_INT 13
51517: PUSH
51518: LD_INT 12
51520: PUSH
51521: LD_INT 15
51523: PUSH
51524: LD_INT 11
51526: PUSH
51527: LD_INT 14
51529: PUSH
51530: LD_INT 10
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: IN
51544: IFFALSE 51554
// btype = b_lab ;
51546: LD_ADDR_VAR 0 1
51550: PUSH
51551: LD_INT 6
51553: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51554: LD_VAR 0 6
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: LIST
51572: IN
51573: NOT
51574: PUSH
51575: LD_VAR 0 1
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: LD_INT 6
51594: PUSH
51595: LD_INT 36
51597: PUSH
51598: LD_INT 4
51600: PUSH
51601: LD_INT 5
51603: PUSH
51604: LD_INT 31
51606: PUSH
51607: LD_INT 32
51609: PUSH
51610: LD_INT 33
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: IN
51626: NOT
51627: PUSH
51628: LD_VAR 0 6
51632: PUSH
51633: LD_INT 1
51635: EQUAL
51636: AND
51637: OR
51638: PUSH
51639: LD_VAR 0 1
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 3
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: IN
51654: NOT
51655: PUSH
51656: LD_VAR 0 6
51660: PUSH
51661: LD_INT 2
51663: EQUAL
51664: AND
51665: OR
51666: IFFALSE 51676
// mode = 0 ;
51668: LD_ADDR_VAR 0 6
51672: PUSH
51673: LD_INT 0
51675: ST_TO_ADDR
// case mode of 0 :
51676: LD_VAR 0 6
51680: PUSH
51681: LD_INT 0
51683: DOUBLE
51684: EQUAL
51685: IFTRUE 51689
51687: GO 63142
51689: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51690: LD_ADDR_VAR 0 11
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: LD_INT 2
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 3
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51883: LD_ADDR_VAR 0 12
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 3
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52079: LD_ADDR_VAR 0 13
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: LD_INT 3
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 3
52250: NEG
52251: PUSH
52252: LD_INT 3
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52278: LD_ADDR_VAR 0 14
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 2
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 3
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 3
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52474: LD_ADDR_VAR 0 15
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 3
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52667: LD_ADDR_VAR 0 16
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 2
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 3
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 3
52824: PUSH
52825: LD_INT 3
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 3
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52860: LD_ADDR_VAR 0 17
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: NEG
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 2
53059: NEG
53060: PUSH
53061: LD_INT 2
53063: NEG
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53090: LD_ADDR_VAR 0 18
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 2
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 2
53277: NEG
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 2
53289: NEG
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53320: LD_ADDR_VAR 0 19
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: NEG
53520: PUSH
53521: LD_INT 2
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53550: LD_ADDR_VAR 0 20
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 2
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 2
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53780: LD_ADDR_VAR 0 21
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 2
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 2
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54010: LD_ADDR_VAR 0 22
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 2
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54240: LD_ADDR_VAR 0 23
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: LD_INT 2
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: LD_INT 3
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 3
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54520: LD_ADDR_VAR 0 24
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 2
54719: NEG
54720: PUSH
54721: LD_INT 2
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 3
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 3
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54796: LD_ADDR_VAR 0 25
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 3
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 3
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: LD_INT 3
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 3
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55070: LD_ADDR_VAR 0 26
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 3
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55346: LD_ADDR_VAR 0 27
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 2
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 2
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 2
55568: NEG
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55626: LD_ADDR_VAR 0 28
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 2
55813: NEG
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: LD_INT 3
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: LD_INT 3
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 3
55861: NEG
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 3
55873: NEG
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55908: LD_ADDR_VAR 0 29
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: LD_INT 2
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: LD_INT 3
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 3
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 3
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 3
56152: NEG
56153: PUSH
56154: LD_INT 2
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56187: LD_ADDR_VAR 0 30
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 3
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 3
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56465: LD_ADDR_VAR 0 31
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: LD_INT 3
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 3
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: NEG
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56743: LD_ADDR_VAR 0 32
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 3
56986: NEG
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57021: LD_ADDR_VAR 0 33
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: NEG
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: NEG
57212: PUSH
57213: LD_INT 3
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 3
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 3
57265: NEG
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57300: LD_ADDR_VAR 0 34
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 2
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 2
57479: NEG
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: NEG
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 3
57545: NEG
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57580: LD_ADDR_VAR 0 35
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57692: LD_ADDR_VAR 0 36
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 2
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57804: LD_ADDR_VAR 0 37
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57916: LD_ADDR_VAR 0 38
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: NEG
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58028: LD_ADDR_VAR 0 39
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58140: LD_ADDR_VAR 0 40
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58252: LD_ADDR_VAR 0 41
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 2
58418: NEG
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: LD_INT 3
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: LD_INT 1
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 3
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 3
58495: PUSH
58496: LD_INT 3
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: LD_INT 3
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 3
58526: NEG
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 3
58549: NEG
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: LD_INT 3
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58602: LD_ADDR_VAR 0 42
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: LD_INT 2
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 3
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 3
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 3
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 3
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: LD_INT 3
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 3
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: LD_INT 3
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58952: LD_ADDR_VAR 0 43
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 2
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 3
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 3
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: LD_INT 3
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 3
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: NEG
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 3
59259: NEG
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59300: LD_ADDR_VAR 0 44
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: LD_INT 2
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: NEG
59491: PUSH
59492: LD_INT 3
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 2
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 3
59513: PUSH
59514: LD_INT 0
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 3
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 3
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 3
59543: PUSH
59544: LD_INT 3
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: LD_INT 3
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 3
59574: NEG
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 3
59585: NEG
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 3
59597: NEG
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: NEG
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59650: LD_ADDR_VAR 0 45
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: LD_INT 3
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: LD_INT 3
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: LD_INT 3
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 3
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 3
59896: PUSH
59897: LD_INT 3
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: PUSH
59907: LD_INT 3
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: LD_INT 3
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 3
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 3
59947: NEG
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 3
59959: NEG
59960: PUSH
59961: LD_INT 3
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60000: LD_ADDR_VAR 0 46
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: LD_INT 3
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: LD_INT 3
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: LD_INT 2
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 3
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60348: LD_ADDR_VAR 0 47
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: NEG
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 2
60475: NEG
60476: PUSH
60477: LD_INT 2
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60499: LD_ADDR_VAR 0 48
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60646: LD_ADDR_VAR 0 49
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: LD_INT 2
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60790: LD_ADDR_VAR 0 50
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 2
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 1
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60934: LD_ADDR_VAR 0 51
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: NEG
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61081: LD_ADDR_VAR 0 52
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: LD_INT 1
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 1
61162: NEG
61163: PUSH
61164: LD_INT 2
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 2
61185: NEG
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 2
61208: NEG
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61232: LD_ADDR_VAR 0 53
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: LD_INT 2
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 1
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 2
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: PUSH
61368: LD_INT 2
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: LD_INT 2
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: LD_INT 1
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: NEG
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 2
61419: NEG
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 2
61431: NEG
61432: PUSH
61433: LD_INT 2
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61462: LD_ADDR_VAR 0 54
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: PUSH
61501: LD_INT 1
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: LD_INT 2
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 2
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 2
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: PUSH
61608: LD_INT 2
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: LD_INT 2
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: LD_INT 1
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 2
61638: NEG
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 2
61649: NEG
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61692: LD_ADDR_VAR 0 55
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 0
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: LD_INT 1
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: LD_INT 2
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 2
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 2
61868: NEG
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 2
61879: NEG
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: NEG
61892: PUSH
61893: LD_INT 2
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61922: LD_ADDR_VAR 0 56
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 2
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: LD_INT 2
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: LD_INT 2
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: LD_INT 2
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 2
62121: NEG
62122: PUSH
62123: LD_INT 2
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62152: LD_ADDR_VAR 0 57
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: LD_INT 2
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 2
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 2
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 2
62287: PUSH
62288: LD_INT 2
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: LD_INT 2
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 2
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: NEG
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 2
62339: NEG
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PUSH
62353: LD_INT 2
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62382: LD_ADDR_VAR 0 58
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: LD_INT 1
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: PUSH
62465: LD_INT 2
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 0
62475: PUSH
62476: LD_INT 2
62478: NEG
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 2
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 2
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: LD_INT 2
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: LD_INT 2
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: LD_INT 2
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 2
62558: NEG
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 2
62569: NEG
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 2
62581: NEG
62582: PUSH
62583: LD_INT 2
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62612: LD_ADDR_VAR 0 59
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: LD_INT 1
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62700: LD_ADDR_VAR 0 60
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62788: LD_ADDR_VAR 0 61
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 1
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62876: LD_ADDR_VAR 0 62
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: LD_INT 1
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: NEG
62946: PUSH
62947: LD_INT 1
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62964: LD_ADDR_VAR 0 63
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: LD_INT 1
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: LD_INT 1
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63052: LD_ADDR_VAR 0 64
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: PUSH
63091: LD_INT 1
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: LD_INT 1
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: NEG
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: ST_TO_ADDR
// end ; 1 :
63140: GO 69037
63142: LD_INT 1
63144: DOUBLE
63145: EQUAL
63146: IFTRUE 63150
63148: GO 65773
63150: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63151: LD_ADDR_VAR 0 11
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: LD_INT 3
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: LD_INT 2
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63195: LD_ADDR_VAR 0 12
63199: PUSH
63200: LD_INT 2
63202: PUSH
63203: LD_INT 1
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 3
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 3
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63236: LD_ADDR_VAR 0 13
63240: PUSH
63241: LD_INT 3
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 3
63253: PUSH
63254: LD_INT 3
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 2
63263: PUSH
63264: LD_INT 3
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: LIST
63275: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63276: LD_ADDR_VAR 0 14
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: LD_INT 3
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: LD_INT 3
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: LD_INT 2
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: LIST
63316: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63317: LD_ADDR_VAR 0 15
63321: PUSH
63322: LD_INT 2
63324: NEG
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 3
63335: NEG
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 3
63346: NEG
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: LIST
63360: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63361: LD_ADDR_VAR 0 16
63365: PUSH
63366: LD_INT 2
63368: NEG
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 3
63380: NEG
63381: PUSH
63382: LD_INT 2
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 3
63392: NEG
63393: PUSH
63394: LD_INT 3
63396: NEG
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: LIST
63406: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63407: LD_ADDR_VAR 0 17
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: LD_INT 3
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 3
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 2
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63451: LD_ADDR_VAR 0 18
63455: PUSH
63456: LD_INT 2
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 3
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 3
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: LIST
63491: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63492: LD_ADDR_VAR 0 19
63496: PUSH
63497: LD_INT 3
63499: PUSH
63500: LD_INT 2
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 3
63509: PUSH
63510: LD_INT 3
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: LD_INT 3
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63532: LD_ADDR_VAR 0 20
63536: PUSH
63537: LD_INT 1
63539: PUSH
63540: LD_INT 3
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: LD_INT 3
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 1
63559: NEG
63560: PUSH
63561: LD_INT 2
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: LIST
63572: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63573: LD_ADDR_VAR 0 21
63577: PUSH
63578: LD_INT 2
63580: NEG
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 3
63591: NEG
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 3
63602: NEG
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63617: LD_ADDR_VAR 0 22
63621: PUSH
63622: LD_INT 2
63624: NEG
63625: PUSH
63626: LD_INT 3
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 3
63636: NEG
63637: PUSH
63638: LD_INT 2
63640: NEG
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 3
63648: NEG
63649: PUSH
63650: LD_INT 3
63652: NEG
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: LIST
63662: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63663: LD_ADDR_VAR 0 23
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: LD_INT 3
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: LD_INT 4
63685: NEG
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: LD_INT 3
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: LIST
63706: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63707: LD_ADDR_VAR 0 24
63711: PUSH
63712: LD_INT 3
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 3
63724: PUSH
63725: LD_INT 1
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 4
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63748: LD_ADDR_VAR 0 25
63752: PUSH
63753: LD_INT 3
63755: PUSH
63756: LD_INT 3
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 4
63765: PUSH
63766: LD_INT 3
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 3
63775: PUSH
63776: LD_INT 4
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63788: LD_ADDR_VAR 0 26
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: LD_INT 3
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: LD_INT 4
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: LD_INT 3
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: LIST
63828: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63829: LD_ADDR_VAR 0 27
63833: PUSH
63834: LD_INT 3
63836: NEG
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 3
63847: NEG
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 4
63858: NEG
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63873: LD_ADDR_VAR 0 28
63877: PUSH
63878: LD_INT 3
63880: NEG
63881: PUSH
63882: LD_INT 3
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 3
63892: NEG
63893: PUSH
63894: LD_INT 4
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 4
63904: NEG
63905: PUSH
63906: LD_INT 3
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: LIST
63918: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63919: LD_ADDR_VAR 0 29
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: LD_INT 3
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: PUSH
63950: LD_INT 2
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: LD_INT 4
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: LD_INT 4
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: PUSH
63984: LD_INT 3
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: LD_INT 5
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 5
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: LD_INT 4
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 1
64028: NEG
64029: PUSH
64030: LD_INT 6
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: LD_INT 6
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: LD_INT 5
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64074: LD_ADDR_VAR 0 30
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 3
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 3
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 3
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 4
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 4
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 4
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 5
64154: PUSH
64155: LD_INT 0
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 5
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 5
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 6
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 6
64195: PUSH
64196: LD_INT 1
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64217: LD_ADDR_VAR 0 31
64221: PUSH
64222: LD_INT 3
64224: PUSH
64225: LD_INT 2
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 3
64234: PUSH
64235: LD_INT 3
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 2
64244: PUSH
64245: LD_INT 3
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 4
64254: PUSH
64255: LD_INT 3
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 4
64264: PUSH
64265: LD_INT 4
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 3
64274: PUSH
64275: LD_INT 4
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 5
64284: PUSH
64285: LD_INT 4
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 5
64294: PUSH
64295: LD_INT 5
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 4
64304: PUSH
64305: LD_INT 5
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 6
64314: PUSH
64315: LD_INT 5
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 6
64324: PUSH
64325: LD_INT 6
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 5
64334: PUSH
64335: LD_INT 6
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64356: LD_ADDR_VAR 0 32
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: LD_INT 3
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: LD_INT 3
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: LD_INT 2
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: LD_INT 4
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: LD_INT 4
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: LD_INT 3
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: LD_INT 5
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 5
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: LD_INT 4
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: LD_INT 6
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: LD_INT 6
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: LD_INT 5
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64499: LD_ADDR_VAR 0 33
64503: PUSH
64504: LD_INT 2
64506: NEG
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 3
64517: NEG
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 3
64528: NEG
64529: PUSH
64530: LD_INT 1
64532: NEG
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 3
64540: NEG
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 4
64551: NEG
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 4
64562: NEG
64563: PUSH
64564: LD_INT 1
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 4
64574: NEG
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 5
64585: NEG
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 5
64596: NEG
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 5
64608: NEG
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 6
64619: NEG
64620: PUSH
64621: LD_INT 0
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 6
64630: NEG
64631: PUSH
64632: LD_INT 1
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64654: LD_ADDR_VAR 0 34
64658: PUSH
64659: LD_INT 2
64661: NEG
64662: PUSH
64663: LD_INT 3
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 3
64673: NEG
64674: PUSH
64675: LD_INT 2
64677: NEG
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 3
64685: NEG
64686: PUSH
64687: LD_INT 3
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 3
64697: NEG
64698: PUSH
64699: LD_INT 4
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 4
64709: NEG
64710: PUSH
64711: LD_INT 3
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 4
64721: NEG
64722: PUSH
64723: LD_INT 4
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 4
64733: NEG
64734: PUSH
64735: LD_INT 5
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 5
64745: NEG
64746: PUSH
64747: LD_INT 4
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 5
64757: NEG
64758: PUSH
64759: LD_INT 5
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 5
64769: NEG
64770: PUSH
64771: LD_INT 6
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 6
64781: NEG
64782: PUSH
64783: LD_INT 5
64785: NEG
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 6
64793: NEG
64794: PUSH
64795: LD_INT 6
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64817: LD_ADDR_VAR 0 41
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_INT 2
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: LD_INT 3
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: LD_INT 2
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: LIST
64860: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64861: LD_ADDR_VAR 0 42
64865: PUSH
64866: LD_INT 2
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 2
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 3
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64902: LD_ADDR_VAR 0 43
64906: PUSH
64907: LD_INT 2
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 3
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 2
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: LIST
64941: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64942: LD_ADDR_VAR 0 44
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: LD_INT 2
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 1
64959: PUSH
64960: LD_INT 3
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 1
64969: NEG
64970: PUSH
64971: LD_INT 2
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64983: LD_ADDR_VAR 0 45
64987: PUSH
64988: LD_INT 2
64990: NEG
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 2
65001: NEG
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 3
65012: NEG
65013: PUSH
65014: LD_INT 1
65016: NEG
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: LIST
65026: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65027: LD_ADDR_VAR 0 46
65031: PUSH
65032: LD_INT 2
65034: NEG
65035: PUSH
65036: LD_INT 2
65038: NEG
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 2
65046: NEG
65047: PUSH
65048: LD_INT 3
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 3
65058: NEG
65059: PUSH
65060: LD_INT 2
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: LIST
65072: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65073: LD_ADDR_VAR 0 47
65077: PUSH
65078: LD_INT 2
65080: NEG
65081: PUSH
65082: LD_INT 3
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: LD_INT 3
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65106: LD_ADDR_VAR 0 48
65110: PUSH
65111: LD_INT 1
65113: PUSH
65114: LD_INT 2
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 2
65124: PUSH
65125: LD_INT 1
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65137: LD_ADDR_VAR 0 49
65141: PUSH
65142: LD_INT 3
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 3
65154: PUSH
65155: LD_INT 2
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65166: LD_ADDR_VAR 0 50
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: LD_INT 3
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: LD_INT 3
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65195: LD_ADDR_VAR 0 51
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: LD_INT 2
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 2
65213: NEG
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65226: LD_ADDR_VAR 0 52
65230: PUSH
65231: LD_INT 3
65233: NEG
65234: PUSH
65235: LD_INT 1
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 3
65245: NEG
65246: PUSH
65247: LD_INT 2
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65259: LD_ADDR_VAR 0 53
65263: PUSH
65264: LD_INT 1
65266: NEG
65267: PUSH
65268: LD_INT 3
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: LD_INT 3
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 1
65289: PUSH
65290: LD_INT 2
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: LIST
65302: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65303: LD_ADDR_VAR 0 54
65307: PUSH
65308: LD_INT 2
65310: PUSH
65311: LD_INT 1
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 3
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 3
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65344: LD_ADDR_VAR 0 55
65348: PUSH
65349: LD_INT 3
65351: PUSH
65352: LD_INT 2
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 3
65361: PUSH
65362: LD_INT 3
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 2
65371: PUSH
65372: LD_INT 3
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: LIST
65383: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65384: LD_ADDR_VAR 0 56
65388: PUSH
65389: LD_INT 1
65391: PUSH
65392: LD_INT 3
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: LD_INT 3
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: NEG
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: LIST
65424: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65425: LD_ADDR_VAR 0 57
65429: PUSH
65430: LD_INT 2
65432: NEG
65433: PUSH
65434: LD_INT 1
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 3
65443: NEG
65444: PUSH
65445: LD_INT 0
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 3
65454: NEG
65455: PUSH
65456: LD_INT 1
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: LIST
65468: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65469: LD_ADDR_VAR 0 58
65473: PUSH
65474: LD_INT 2
65476: NEG
65477: PUSH
65478: LD_INT 3
65480: NEG
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 3
65488: NEG
65489: PUSH
65490: LD_INT 2
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 3
65500: NEG
65501: PUSH
65502: LD_INT 3
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: LIST
65514: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65515: LD_ADDR_VAR 0 59
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: LD_INT 2
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 0
65534: PUSH
65535: LD_INT 2
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 1
65545: PUSH
65546: LD_INT 1
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: LIST
65558: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65559: LD_ADDR_VAR 0 60
65563: PUSH
65564: LD_INT 1
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 2
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 2
65587: PUSH
65588: LD_INT 1
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: LIST
65599: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65600: LD_ADDR_VAR 0 61
65604: PUSH
65605: LD_INT 2
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 2
65617: PUSH
65618: LD_INT 2
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: LD_INT 2
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: LIST
65639: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65640: LD_ADDR_VAR 0 62
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: LD_INT 2
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: LD_INT 1
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: LIST
65680: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65681: LD_ADDR_VAR 0 63
65685: PUSH
65686: LD_INT 1
65688: NEG
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 2
65699: NEG
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 2
65710: NEG
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: LIST
65724: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65725: LD_ADDR_VAR 0 64
65729: PUSH
65730: LD_INT 1
65732: NEG
65733: PUSH
65734: LD_INT 2
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 2
65744: NEG
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 2
65756: NEG
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: LIST
65770: ST_TO_ADDR
// end ; 2 :
65771: GO 69037
65773: LD_INT 2
65775: DOUBLE
65776: EQUAL
65777: IFTRUE 65781
65779: GO 69036
65781: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65782: LD_ADDR_VAR 0 29
65786: PUSH
65787: LD_INT 4
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 4
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 5
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 5
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 4
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 3
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 3
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 3
65861: PUSH
65862: LD_INT 2
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 5
65872: PUSH
65873: LD_INT 2
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 3
65882: PUSH
65883: LD_INT 3
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 3
65892: PUSH
65893: LD_INT 2
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 4
65902: PUSH
65903: LD_INT 3
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 4
65912: PUSH
65913: LD_INT 4
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 3
65922: PUSH
65923: LD_INT 4
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 2
65932: PUSH
65933: LD_INT 3
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 2
65942: PUSH
65943: LD_INT 2
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 4
65952: PUSH
65953: LD_INT 2
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: LD_INT 4
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 0
65972: PUSH
65973: LD_INT 4
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: LD_INT 3
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 1
65992: PUSH
65993: LD_INT 4
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 1
66002: PUSH
66003: LD_INT 5
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: LD_INT 5
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: LD_INT 4
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 1
66033: NEG
66034: PUSH
66035: LD_INT 3
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 2
66044: PUSH
66045: LD_INT 5
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 2
66054: NEG
66055: PUSH
66056: LD_INT 3
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 3
66065: NEG
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 3
66076: NEG
66077: PUSH
66078: LD_INT 1
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 2
66088: NEG
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 2
66099: NEG
66100: PUSH
66101: LD_INT 1
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 3
66110: NEG
66111: PUSH
66112: LD_INT 1
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 4
66121: NEG
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 4
66132: NEG
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 4
66144: NEG
66145: PUSH
66146: LD_INT 2
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 2
66156: NEG
66157: PUSH
66158: LD_INT 2
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 4
66167: NEG
66168: PUSH
66169: LD_INT 4
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 4
66179: NEG
66180: PUSH
66181: LD_INT 5
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 3
66191: NEG
66192: PUSH
66193: LD_INT 4
66195: NEG
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 3
66203: NEG
66204: PUSH
66205: LD_INT 3
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 4
66215: NEG
66216: PUSH
66217: LD_INT 3
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 5
66227: NEG
66228: PUSH
66229: LD_INT 4
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 5
66239: NEG
66240: PUSH
66241: LD_INT 5
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 3
66251: NEG
66252: PUSH
66253: LD_INT 5
66255: NEG
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 5
66263: NEG
66264: PUSH
66265: LD_INT 3
66267: NEG
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66320: LD_ADDR_VAR 0 30
66324: PUSH
66325: LD_INT 4
66327: PUSH
66328: LD_INT 4
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 4
66337: PUSH
66338: LD_INT 3
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 5
66347: PUSH
66348: LD_INT 4
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 5
66357: PUSH
66358: LD_INT 5
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 4
66367: PUSH
66368: LD_INT 5
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 3
66377: PUSH
66378: LD_INT 4
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 3
66387: PUSH
66388: LD_INT 3
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 5
66397: PUSH
66398: LD_INT 3
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 3
66407: PUSH
66408: LD_INT 5
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 0
66417: PUSH
66418: LD_INT 3
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: LD_INT 2
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: LD_INT 4
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: LD_INT 4
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: NEG
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 2
66489: PUSH
66490: LD_INT 4
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 2
66499: NEG
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 4
66510: NEG
66511: PUSH
66512: LD_INT 0
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 4
66521: NEG
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 3
66533: NEG
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 3
66544: NEG
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 4
66555: NEG
66556: PUSH
66557: LD_INT 1
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 5
66566: NEG
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 5
66577: NEG
66578: PUSH
66579: LD_INT 1
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 5
66589: NEG
66590: PUSH
66591: LD_INT 2
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 3
66601: NEG
66602: PUSH
66603: LD_INT 2
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 3
66612: NEG
66613: PUSH
66614: LD_INT 3
66616: NEG
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 3
66624: NEG
66625: PUSH
66626: LD_INT 4
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 2
66636: NEG
66637: PUSH
66638: LD_INT 3
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 2
66648: NEG
66649: PUSH
66650: LD_INT 2
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 3
66660: NEG
66661: PUSH
66662: LD_INT 2
66664: NEG
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 4
66672: NEG
66673: PUSH
66674: LD_INT 3
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 4
66684: NEG
66685: PUSH
66686: LD_INT 4
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 2
66696: NEG
66697: PUSH
66698: LD_INT 4
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 4
66708: NEG
66709: PUSH
66710: LD_INT 2
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: LD_INT 4
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: LD_INT 5
66734: NEG
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 1
66742: PUSH
66743: LD_INT 4
66745: NEG
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: LD_INT 3
66756: NEG
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 0
66764: PUSH
66765: LD_INT 3
66767: NEG
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 1
66775: NEG
66776: PUSH
66777: LD_INT 4
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: NEG
66788: PUSH
66789: LD_INT 5
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 2
66799: PUSH
66800: LD_INT 3
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 2
66810: NEG
66811: PUSH
66812: LD_INT 5
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66867: LD_ADDR_VAR 0 31
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: LD_INT 4
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: LD_INT 3
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 1
66894: PUSH
66895: LD_INT 4
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 1
66904: PUSH
66905: LD_INT 5
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 0
66914: PUSH
66915: LD_INT 5
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 1
66924: NEG
66925: PUSH
66926: LD_INT 4
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: LD_INT 3
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 2
66946: PUSH
66947: LD_INT 5
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 2
66956: NEG
66957: PUSH
66958: LD_INT 3
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 3
66967: NEG
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 3
66978: NEG
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 2
66990: NEG
66991: PUSH
66992: LD_INT 0
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 2
67001: NEG
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 3
67012: NEG
67013: PUSH
67014: LD_INT 1
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 4
67023: NEG
67024: PUSH
67025: LD_INT 0
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 4
67034: NEG
67035: PUSH
67036: LD_INT 1
67038: NEG
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 4
67046: NEG
67047: PUSH
67048: LD_INT 2
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 2
67058: NEG
67059: PUSH
67060: LD_INT 2
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 4
67069: NEG
67070: PUSH
67071: LD_INT 4
67073: NEG
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 4
67081: NEG
67082: PUSH
67083: LD_INT 5
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 3
67093: NEG
67094: PUSH
67095: LD_INT 4
67097: NEG
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 3
67105: NEG
67106: PUSH
67107: LD_INT 3
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 4
67117: NEG
67118: PUSH
67119: LD_INT 3
67121: NEG
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 5
67129: NEG
67130: PUSH
67131: LD_INT 4
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 5
67141: NEG
67142: PUSH
67143: LD_INT 5
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 3
67153: NEG
67154: PUSH
67155: LD_INT 5
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 5
67165: NEG
67166: PUSH
67167: LD_INT 3
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: LD_INT 3
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 0
67188: PUSH
67189: LD_INT 4
67191: NEG
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: LD_INT 3
67202: NEG
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 1
67210: PUSH
67211: LD_INT 2
67213: NEG
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 0
67221: PUSH
67222: LD_INT 2
67224: NEG
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 1
67232: NEG
67233: PUSH
67234: LD_INT 3
67236: NEG
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 1
67244: NEG
67245: PUSH
67246: LD_INT 4
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 2
67256: PUSH
67257: LD_INT 2
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 2
67267: NEG
67268: PUSH
67269: LD_INT 4
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 4
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 4
67289: PUSH
67290: LD_INT 1
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 5
67300: PUSH
67301: LD_INT 0
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 5
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 4
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 3
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 3
67340: PUSH
67341: LD_INT 1
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 3
67351: PUSH
67352: LD_INT 2
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 5
67362: PUSH
67363: LD_INT 2
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67417: LD_ADDR_VAR 0 32
67421: PUSH
67422: LD_INT 4
67424: NEG
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 4
67435: NEG
67436: PUSH
67437: LD_INT 1
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 3
67447: NEG
67448: PUSH
67449: LD_INT 0
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 3
67458: NEG
67459: PUSH
67460: LD_INT 1
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 4
67469: NEG
67470: PUSH
67471: LD_INT 1
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 5
67480: NEG
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 5
67491: NEG
67492: PUSH
67493: LD_INT 1
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 5
67503: NEG
67504: PUSH
67505: LD_INT 2
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 3
67515: NEG
67516: PUSH
67517: LD_INT 2
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 3
67526: NEG
67527: PUSH
67528: LD_INT 3
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 3
67538: NEG
67539: PUSH
67540: LD_INT 4
67542: NEG
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 2
67550: NEG
67551: PUSH
67552: LD_INT 3
67554: NEG
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 2
67562: NEG
67563: PUSH
67564: LD_INT 2
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 3
67574: NEG
67575: PUSH
67576: LD_INT 2
67578: NEG
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 4
67586: NEG
67587: PUSH
67588: LD_INT 3
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 4
67598: NEG
67599: PUSH
67600: LD_INT 4
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 2
67610: NEG
67611: PUSH
67612: LD_INT 4
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 4
67622: NEG
67623: PUSH
67624: LD_INT 2
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 0
67634: PUSH
67635: LD_INT 4
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: LD_INT 5
67648: NEG
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 1
67656: PUSH
67657: LD_INT 4
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 1
67667: PUSH
67668: LD_INT 3
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: LD_INT 3
67681: NEG
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: LD_INT 4
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: NEG
67702: PUSH
67703: LD_INT 5
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 2
67713: PUSH
67714: LD_INT 3
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 2
67724: NEG
67725: PUSH
67726: LD_INT 5
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: LD_INT 0
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 3
67746: PUSH
67747: LD_INT 1
67749: NEG
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 4
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 4
67767: PUSH
67768: LD_INT 1
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 3
67777: PUSH
67778: LD_INT 1
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 2
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 2
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 2
67808: PUSH
67809: LD_INT 2
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 4
67819: PUSH
67820: LD_INT 2
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 4
67829: PUSH
67830: LD_INT 4
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 4
67839: PUSH
67840: LD_INT 3
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 5
67849: PUSH
67850: LD_INT 4
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 5
67859: PUSH
67860: LD_INT 5
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 4
67869: PUSH
67870: LD_INT 5
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 3
67879: PUSH
67880: LD_INT 4
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 3
67889: PUSH
67890: LD_INT 3
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 5
67899: PUSH
67900: LD_INT 3
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: LD_INT 5
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67964: LD_ADDR_VAR 0 33
67968: PUSH
67969: LD_INT 4
67971: NEG
67972: PUSH
67973: LD_INT 4
67975: NEG
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 4
67983: NEG
67984: PUSH
67985: LD_INT 5
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 3
67995: NEG
67996: PUSH
67997: LD_INT 4
67999: NEG
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 3
68007: NEG
68008: PUSH
68009: LD_INT 3
68011: NEG
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 4
68019: NEG
68020: PUSH
68021: LD_INT 3
68023: NEG
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 5
68031: NEG
68032: PUSH
68033: LD_INT 4
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 5
68043: NEG
68044: PUSH
68045: LD_INT 5
68047: NEG
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 3
68055: NEG
68056: PUSH
68057: LD_INT 5
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 5
68067: NEG
68068: PUSH
68069: LD_INT 3
68071: NEG
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 0
68079: PUSH
68080: LD_INT 3
68082: NEG
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 0
68090: PUSH
68091: LD_INT 4
68093: NEG
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 1
68101: PUSH
68102: LD_INT 3
68104: NEG
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 1
68112: PUSH
68113: LD_INT 2
68115: NEG
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: LD_INT 2
68126: NEG
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 1
68134: NEG
68135: PUSH
68136: LD_INT 3
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 1
68146: NEG
68147: PUSH
68148: LD_INT 4
68150: NEG
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 2
68158: PUSH
68159: LD_INT 2
68161: NEG
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 2
68169: NEG
68170: PUSH
68171: LD_INT 4
68173: NEG
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 4
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 4
68191: PUSH
68192: LD_INT 1
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 5
68202: PUSH
68203: LD_INT 0
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 5
68212: PUSH
68213: LD_INT 1
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 4
68222: PUSH
68223: LD_INT 1
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 3
68232: PUSH
68233: LD_INT 0
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 3
68242: PUSH
68243: LD_INT 1
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 3
68253: PUSH
68254: LD_INT 2
68256: NEG
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 5
68264: PUSH
68265: LD_INT 2
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 3
68274: PUSH
68275: LD_INT 3
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 3
68284: PUSH
68285: LD_INT 2
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 4
68294: PUSH
68295: LD_INT 3
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 4
68304: PUSH
68305: LD_INT 4
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 3
68314: PUSH
68315: LD_INT 4
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 2
68324: PUSH
68325: LD_INT 3
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 2
68334: PUSH
68335: LD_INT 2
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 4
68344: PUSH
68345: LD_INT 2
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 2
68354: PUSH
68355: LD_INT 4
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: LD_INT 4
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 0
68374: PUSH
68375: LD_INT 3
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 1
68384: PUSH
68385: LD_INT 4
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 1
68394: PUSH
68395: LD_INT 5
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: LD_INT 5
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 1
68414: NEG
68415: PUSH
68416: LD_INT 4
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 1
68425: NEG
68426: PUSH
68427: LD_INT 3
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 2
68436: PUSH
68437: LD_INT 5
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 2
68446: NEG
68447: PUSH
68448: LD_INT 3
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68502: LD_ADDR_VAR 0 34
68506: PUSH
68507: LD_INT 0
68509: PUSH
68510: LD_INT 4
68512: NEG
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 0
68520: PUSH
68521: LD_INT 5
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 1
68531: PUSH
68532: LD_INT 4
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 1
68542: PUSH
68543: LD_INT 3
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 0
68553: PUSH
68554: LD_INT 3
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 1
68564: NEG
68565: PUSH
68566: LD_INT 4
68568: NEG
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 1
68576: NEG
68577: PUSH
68578: LD_INT 5
68580: NEG
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 2
68588: PUSH
68589: LD_INT 3
68591: NEG
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 2
68599: NEG
68600: PUSH
68601: LD_INT 5
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 3
68611: PUSH
68612: LD_INT 0
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 3
68621: PUSH
68622: LD_INT 1
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 4
68632: PUSH
68633: LD_INT 0
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 4
68642: PUSH
68643: LD_INT 1
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 3
68652: PUSH
68653: LD_INT 1
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 2
68662: PUSH
68663: LD_INT 0
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 2
68672: PUSH
68673: LD_INT 1
68675: NEG
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 2
68683: PUSH
68684: LD_INT 2
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 4
68694: PUSH
68695: LD_INT 2
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 4
68704: PUSH
68705: LD_INT 4
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 4
68714: PUSH
68715: LD_INT 3
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 5
68724: PUSH
68725: LD_INT 4
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 5
68734: PUSH
68735: LD_INT 5
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 4
68744: PUSH
68745: LD_INT 5
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 3
68754: PUSH
68755: LD_INT 4
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 3
68764: PUSH
68765: LD_INT 3
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 5
68774: PUSH
68775: LD_INT 3
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 3
68784: PUSH
68785: LD_INT 5
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 0
68794: PUSH
68795: LD_INT 3
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 0
68804: PUSH
68805: LD_INT 2
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 1
68814: PUSH
68815: LD_INT 3
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 1
68824: PUSH
68825: LD_INT 4
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 0
68834: PUSH
68835: LD_INT 4
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 1
68844: NEG
68845: PUSH
68846: LD_INT 3
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 1
68855: NEG
68856: PUSH
68857: LD_INT 2
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 2
68866: PUSH
68867: LD_INT 4
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 2
68876: NEG
68877: PUSH
68878: LD_INT 2
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 4
68887: NEG
68888: PUSH
68889: LD_INT 0
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 4
68898: NEG
68899: PUSH
68900: LD_INT 1
68902: NEG
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 3
68910: NEG
68911: PUSH
68912: LD_INT 0
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 3
68921: NEG
68922: PUSH
68923: LD_INT 1
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 4
68932: NEG
68933: PUSH
68934: LD_INT 1
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 5
68943: NEG
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 5
68954: NEG
68955: PUSH
68956: LD_INT 1
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 5
68966: NEG
68967: PUSH
68968: LD_INT 2
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 3
68978: NEG
68979: PUSH
68980: LD_INT 2
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: ST_TO_ADDR
// end ; end ;
69034: GO 69037
69036: POP
// case btype of b_depot , b_warehouse :
69037: LD_VAR 0 1
69041: PUSH
69042: LD_INT 0
69044: DOUBLE
69045: EQUAL
69046: IFTRUE 69056
69048: LD_INT 1
69050: DOUBLE
69051: EQUAL
69052: IFTRUE 69056
69054: GO 69257
69056: POP
// case nation of nation_american :
69057: LD_VAR 0 5
69061: PUSH
69062: LD_INT 1
69064: DOUBLE
69065: EQUAL
69066: IFTRUE 69070
69068: GO 69126
69070: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69071: LD_ADDR_VAR 0 9
69075: PUSH
69076: LD_VAR 0 11
69080: PUSH
69081: LD_VAR 0 12
69085: PUSH
69086: LD_VAR 0 13
69090: PUSH
69091: LD_VAR 0 14
69095: PUSH
69096: LD_VAR 0 15
69100: PUSH
69101: LD_VAR 0 16
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: PUSH
69114: LD_VAR 0 4
69118: PUSH
69119: LD_INT 1
69121: PLUS
69122: ARRAY
69123: ST_TO_ADDR
69124: GO 69255
69126: LD_INT 2
69128: DOUBLE
69129: EQUAL
69130: IFTRUE 69134
69132: GO 69190
69134: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69135: LD_ADDR_VAR 0 9
69139: PUSH
69140: LD_VAR 0 17
69144: PUSH
69145: LD_VAR 0 18
69149: PUSH
69150: LD_VAR 0 19
69154: PUSH
69155: LD_VAR 0 20
69159: PUSH
69160: LD_VAR 0 21
69164: PUSH
69165: LD_VAR 0 22
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: PUSH
69178: LD_VAR 0 4
69182: PUSH
69183: LD_INT 1
69185: PLUS
69186: ARRAY
69187: ST_TO_ADDR
69188: GO 69255
69190: LD_INT 3
69192: DOUBLE
69193: EQUAL
69194: IFTRUE 69198
69196: GO 69254
69198: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69199: LD_ADDR_VAR 0 9
69203: PUSH
69204: LD_VAR 0 23
69208: PUSH
69209: LD_VAR 0 24
69213: PUSH
69214: LD_VAR 0 25
69218: PUSH
69219: LD_VAR 0 26
69223: PUSH
69224: LD_VAR 0 27
69228: PUSH
69229: LD_VAR 0 28
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: PUSH
69242: LD_VAR 0 4
69246: PUSH
69247: LD_INT 1
69249: PLUS
69250: ARRAY
69251: ST_TO_ADDR
69252: GO 69255
69254: POP
69255: GO 69810
69257: LD_INT 2
69259: DOUBLE
69260: EQUAL
69261: IFTRUE 69271
69263: LD_INT 3
69265: DOUBLE
69266: EQUAL
69267: IFTRUE 69271
69269: GO 69327
69271: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69272: LD_ADDR_VAR 0 9
69276: PUSH
69277: LD_VAR 0 29
69281: PUSH
69282: LD_VAR 0 30
69286: PUSH
69287: LD_VAR 0 31
69291: PUSH
69292: LD_VAR 0 32
69296: PUSH
69297: LD_VAR 0 33
69301: PUSH
69302: LD_VAR 0 34
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: PUSH
69315: LD_VAR 0 4
69319: PUSH
69320: LD_INT 1
69322: PLUS
69323: ARRAY
69324: ST_TO_ADDR
69325: GO 69810
69327: LD_INT 16
69329: DOUBLE
69330: EQUAL
69331: IFTRUE 69389
69333: LD_INT 17
69335: DOUBLE
69336: EQUAL
69337: IFTRUE 69389
69339: LD_INT 18
69341: DOUBLE
69342: EQUAL
69343: IFTRUE 69389
69345: LD_INT 19
69347: DOUBLE
69348: EQUAL
69349: IFTRUE 69389
69351: LD_INT 22
69353: DOUBLE
69354: EQUAL
69355: IFTRUE 69389
69357: LD_INT 20
69359: DOUBLE
69360: EQUAL
69361: IFTRUE 69389
69363: LD_INT 21
69365: DOUBLE
69366: EQUAL
69367: IFTRUE 69389
69369: LD_INT 23
69371: DOUBLE
69372: EQUAL
69373: IFTRUE 69389
69375: LD_INT 24
69377: DOUBLE
69378: EQUAL
69379: IFTRUE 69389
69381: LD_INT 25
69383: DOUBLE
69384: EQUAL
69385: IFTRUE 69389
69387: GO 69445
69389: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69390: LD_ADDR_VAR 0 9
69394: PUSH
69395: LD_VAR 0 35
69399: PUSH
69400: LD_VAR 0 36
69404: PUSH
69405: LD_VAR 0 37
69409: PUSH
69410: LD_VAR 0 38
69414: PUSH
69415: LD_VAR 0 39
69419: PUSH
69420: LD_VAR 0 40
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: PUSH
69433: LD_VAR 0 4
69437: PUSH
69438: LD_INT 1
69440: PLUS
69441: ARRAY
69442: ST_TO_ADDR
69443: GO 69810
69445: LD_INT 6
69447: DOUBLE
69448: EQUAL
69449: IFTRUE 69501
69451: LD_INT 7
69453: DOUBLE
69454: EQUAL
69455: IFTRUE 69501
69457: LD_INT 8
69459: DOUBLE
69460: EQUAL
69461: IFTRUE 69501
69463: LD_INT 13
69465: DOUBLE
69466: EQUAL
69467: IFTRUE 69501
69469: LD_INT 12
69471: DOUBLE
69472: EQUAL
69473: IFTRUE 69501
69475: LD_INT 15
69477: DOUBLE
69478: EQUAL
69479: IFTRUE 69501
69481: LD_INT 11
69483: DOUBLE
69484: EQUAL
69485: IFTRUE 69501
69487: LD_INT 14
69489: DOUBLE
69490: EQUAL
69491: IFTRUE 69501
69493: LD_INT 10
69495: DOUBLE
69496: EQUAL
69497: IFTRUE 69501
69499: GO 69557
69501: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69502: LD_ADDR_VAR 0 9
69506: PUSH
69507: LD_VAR 0 41
69511: PUSH
69512: LD_VAR 0 42
69516: PUSH
69517: LD_VAR 0 43
69521: PUSH
69522: LD_VAR 0 44
69526: PUSH
69527: LD_VAR 0 45
69531: PUSH
69532: LD_VAR 0 46
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: PUSH
69545: LD_VAR 0 4
69549: PUSH
69550: LD_INT 1
69552: PLUS
69553: ARRAY
69554: ST_TO_ADDR
69555: GO 69810
69557: LD_INT 36
69559: DOUBLE
69560: EQUAL
69561: IFTRUE 69565
69563: GO 69621
69565: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69566: LD_ADDR_VAR 0 9
69570: PUSH
69571: LD_VAR 0 47
69575: PUSH
69576: LD_VAR 0 48
69580: PUSH
69581: LD_VAR 0 49
69585: PUSH
69586: LD_VAR 0 50
69590: PUSH
69591: LD_VAR 0 51
69595: PUSH
69596: LD_VAR 0 52
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: PUSH
69609: LD_VAR 0 4
69613: PUSH
69614: LD_INT 1
69616: PLUS
69617: ARRAY
69618: ST_TO_ADDR
69619: GO 69810
69621: LD_INT 4
69623: DOUBLE
69624: EQUAL
69625: IFTRUE 69647
69627: LD_INT 5
69629: DOUBLE
69630: EQUAL
69631: IFTRUE 69647
69633: LD_INT 34
69635: DOUBLE
69636: EQUAL
69637: IFTRUE 69647
69639: LD_INT 37
69641: DOUBLE
69642: EQUAL
69643: IFTRUE 69647
69645: GO 69703
69647: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69648: LD_ADDR_VAR 0 9
69652: PUSH
69653: LD_VAR 0 53
69657: PUSH
69658: LD_VAR 0 54
69662: PUSH
69663: LD_VAR 0 55
69667: PUSH
69668: LD_VAR 0 56
69672: PUSH
69673: LD_VAR 0 57
69677: PUSH
69678: LD_VAR 0 58
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: PUSH
69691: LD_VAR 0 4
69695: PUSH
69696: LD_INT 1
69698: PLUS
69699: ARRAY
69700: ST_TO_ADDR
69701: GO 69810
69703: LD_INT 31
69705: DOUBLE
69706: EQUAL
69707: IFTRUE 69753
69709: LD_INT 32
69711: DOUBLE
69712: EQUAL
69713: IFTRUE 69753
69715: LD_INT 33
69717: DOUBLE
69718: EQUAL
69719: IFTRUE 69753
69721: LD_INT 27
69723: DOUBLE
69724: EQUAL
69725: IFTRUE 69753
69727: LD_INT 26
69729: DOUBLE
69730: EQUAL
69731: IFTRUE 69753
69733: LD_INT 28
69735: DOUBLE
69736: EQUAL
69737: IFTRUE 69753
69739: LD_INT 29
69741: DOUBLE
69742: EQUAL
69743: IFTRUE 69753
69745: LD_INT 30
69747: DOUBLE
69748: EQUAL
69749: IFTRUE 69753
69751: GO 69809
69753: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69754: LD_ADDR_VAR 0 9
69758: PUSH
69759: LD_VAR 0 59
69763: PUSH
69764: LD_VAR 0 60
69768: PUSH
69769: LD_VAR 0 61
69773: PUSH
69774: LD_VAR 0 62
69778: PUSH
69779: LD_VAR 0 63
69783: PUSH
69784: LD_VAR 0 64
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: PUSH
69797: LD_VAR 0 4
69801: PUSH
69802: LD_INT 1
69804: PLUS
69805: ARRAY
69806: ST_TO_ADDR
69807: GO 69810
69809: POP
// temp_list2 = [ ] ;
69810: LD_ADDR_VAR 0 10
69814: PUSH
69815: EMPTY
69816: ST_TO_ADDR
// for i in temp_list do
69817: LD_ADDR_VAR 0 8
69821: PUSH
69822: LD_VAR 0 9
69826: PUSH
69827: FOR_IN
69828: IFFALSE 69880
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69830: LD_ADDR_VAR 0 10
69834: PUSH
69835: LD_VAR 0 10
69839: PUSH
69840: LD_VAR 0 8
69844: PUSH
69845: LD_INT 1
69847: ARRAY
69848: PUSH
69849: LD_VAR 0 2
69853: PLUS
69854: PUSH
69855: LD_VAR 0 8
69859: PUSH
69860: LD_INT 2
69862: ARRAY
69863: PUSH
69864: LD_VAR 0 3
69868: PLUS
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: EMPTY
69875: LIST
69876: ADD
69877: ST_TO_ADDR
69878: GO 69827
69880: POP
69881: POP
// result = temp_list2 ;
69882: LD_ADDR_VAR 0 7
69886: PUSH
69887: LD_VAR 0 10
69891: ST_TO_ADDR
// end ;
69892: LD_VAR 0 7
69896: RET
// export function EnemyInRange ( unit , dist ) ; begin
69897: LD_INT 0
69899: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69900: LD_ADDR_VAR 0 3
69904: PUSH
69905: LD_VAR 0 1
69909: PPUSH
69910: CALL_OW 255
69914: PPUSH
69915: LD_VAR 0 1
69919: PPUSH
69920: CALL_OW 250
69924: PPUSH
69925: LD_VAR 0 1
69929: PPUSH
69930: CALL_OW 251
69934: PPUSH
69935: LD_VAR 0 2
69939: PPUSH
69940: CALL 43293 0 4
69944: PUSH
69945: LD_INT 4
69947: ARRAY
69948: ST_TO_ADDR
// end ;
69949: LD_VAR 0 3
69953: RET
// export function PlayerSeeMe ( unit ) ; begin
69954: LD_INT 0
69956: PPUSH
// result := See ( your_side , unit ) ;
69957: LD_ADDR_VAR 0 2
69961: PUSH
69962: LD_OWVAR 2
69966: PPUSH
69967: LD_VAR 0 1
69971: PPUSH
69972: CALL_OW 292
69976: ST_TO_ADDR
// end ;
69977: LD_VAR 0 2
69981: RET
// export function ReverseDir ( unit ) ; begin
69982: LD_INT 0
69984: PPUSH
// if not unit then
69985: LD_VAR 0 1
69989: NOT
69990: IFFALSE 69994
// exit ;
69992: GO 70017
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69994: LD_ADDR_VAR 0 2
69998: PUSH
69999: LD_VAR 0 1
70003: PPUSH
70004: CALL_OW 254
70008: PUSH
70009: LD_INT 3
70011: PLUS
70012: PUSH
70013: LD_INT 6
70015: MOD
70016: ST_TO_ADDR
// end ;
70017: LD_VAR 0 2
70021: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70022: LD_INT 0
70024: PPUSH
70025: PPUSH
70026: PPUSH
70027: PPUSH
70028: PPUSH
// if not hexes then
70029: LD_VAR 0 2
70033: NOT
70034: IFFALSE 70038
// exit ;
70036: GO 70186
// dist := 9999 ;
70038: LD_ADDR_VAR 0 5
70042: PUSH
70043: LD_INT 9999
70045: ST_TO_ADDR
// for i = 1 to hexes do
70046: LD_ADDR_VAR 0 4
70050: PUSH
70051: DOUBLE
70052: LD_INT 1
70054: DEC
70055: ST_TO_ADDR
70056: LD_VAR 0 2
70060: PUSH
70061: FOR_TO
70062: IFFALSE 70174
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70064: LD_VAR 0 1
70068: PPUSH
70069: LD_VAR 0 2
70073: PUSH
70074: LD_VAR 0 4
70078: ARRAY
70079: PUSH
70080: LD_INT 1
70082: ARRAY
70083: PPUSH
70084: LD_VAR 0 2
70088: PUSH
70089: LD_VAR 0 4
70093: ARRAY
70094: PUSH
70095: LD_INT 2
70097: ARRAY
70098: PPUSH
70099: CALL_OW 297
70103: PUSH
70104: LD_VAR 0 5
70108: LESS
70109: IFFALSE 70172
// begin hex := hexes [ i ] ;
70111: LD_ADDR_VAR 0 7
70115: PUSH
70116: LD_VAR 0 2
70120: PUSH
70121: LD_VAR 0 4
70125: ARRAY
70126: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70127: LD_ADDR_VAR 0 5
70131: PUSH
70132: LD_VAR 0 1
70136: PPUSH
70137: LD_VAR 0 2
70141: PUSH
70142: LD_VAR 0 4
70146: ARRAY
70147: PUSH
70148: LD_INT 1
70150: ARRAY
70151: PPUSH
70152: LD_VAR 0 2
70156: PUSH
70157: LD_VAR 0 4
70161: ARRAY
70162: PUSH
70163: LD_INT 2
70165: ARRAY
70166: PPUSH
70167: CALL_OW 297
70171: ST_TO_ADDR
// end ; end ;
70172: GO 70061
70174: POP
70175: POP
// result := hex ;
70176: LD_ADDR_VAR 0 3
70180: PUSH
70181: LD_VAR 0 7
70185: ST_TO_ADDR
// end ;
70186: LD_VAR 0 3
70190: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70191: LD_INT 0
70193: PPUSH
70194: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70195: LD_VAR 0 1
70199: NOT
70200: PUSH
70201: LD_VAR 0 1
70205: PUSH
70206: LD_INT 21
70208: PUSH
70209: LD_INT 2
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 23
70218: PUSH
70219: LD_INT 2
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PPUSH
70230: CALL_OW 69
70234: IN
70235: NOT
70236: OR
70237: IFFALSE 70241
// exit ;
70239: GO 70288
// for i = 1 to 3 do
70241: LD_ADDR_VAR 0 3
70245: PUSH
70246: DOUBLE
70247: LD_INT 1
70249: DEC
70250: ST_TO_ADDR
70251: LD_INT 3
70253: PUSH
70254: FOR_TO
70255: IFFALSE 70286
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70257: LD_VAR 0 1
70261: PPUSH
70262: CALL_OW 250
70266: PPUSH
70267: LD_VAR 0 1
70271: PPUSH
70272: CALL_OW 251
70276: PPUSH
70277: LD_INT 1
70279: PPUSH
70280: CALL_OW 453
70284: GO 70254
70286: POP
70287: POP
// end ;
70288: LD_VAR 0 2
70292: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70293: LD_INT 0
70295: PPUSH
70296: PPUSH
70297: PPUSH
70298: PPUSH
70299: PPUSH
70300: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70301: LD_VAR 0 1
70305: NOT
70306: PUSH
70307: LD_VAR 0 2
70311: NOT
70312: OR
70313: PUSH
70314: LD_VAR 0 1
70318: PPUSH
70319: CALL_OW 314
70323: OR
70324: IFFALSE 70328
// exit ;
70326: GO 70769
// x := GetX ( enemy_unit ) ;
70328: LD_ADDR_VAR 0 7
70332: PUSH
70333: LD_VAR 0 2
70337: PPUSH
70338: CALL_OW 250
70342: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70343: LD_ADDR_VAR 0 8
70347: PUSH
70348: LD_VAR 0 2
70352: PPUSH
70353: CALL_OW 251
70357: ST_TO_ADDR
// if not x or not y then
70358: LD_VAR 0 7
70362: NOT
70363: PUSH
70364: LD_VAR 0 8
70368: NOT
70369: OR
70370: IFFALSE 70374
// exit ;
70372: GO 70769
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70374: LD_ADDR_VAR 0 6
70378: PUSH
70379: LD_VAR 0 7
70383: PPUSH
70384: LD_INT 0
70386: PPUSH
70387: LD_INT 4
70389: PPUSH
70390: CALL_OW 272
70394: PUSH
70395: LD_VAR 0 8
70399: PPUSH
70400: LD_INT 0
70402: PPUSH
70403: LD_INT 4
70405: PPUSH
70406: CALL_OW 273
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_VAR 0 7
70419: PPUSH
70420: LD_INT 1
70422: PPUSH
70423: LD_INT 4
70425: PPUSH
70426: CALL_OW 272
70430: PUSH
70431: LD_VAR 0 8
70435: PPUSH
70436: LD_INT 1
70438: PPUSH
70439: LD_INT 4
70441: PPUSH
70442: CALL_OW 273
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_VAR 0 7
70455: PPUSH
70456: LD_INT 2
70458: PPUSH
70459: LD_INT 4
70461: PPUSH
70462: CALL_OW 272
70466: PUSH
70467: LD_VAR 0 8
70471: PPUSH
70472: LD_INT 2
70474: PPUSH
70475: LD_INT 4
70477: PPUSH
70478: CALL_OW 273
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_VAR 0 7
70491: PPUSH
70492: LD_INT 3
70494: PPUSH
70495: LD_INT 4
70497: PPUSH
70498: CALL_OW 272
70502: PUSH
70503: LD_VAR 0 8
70507: PPUSH
70508: LD_INT 3
70510: PPUSH
70511: LD_INT 4
70513: PPUSH
70514: CALL_OW 273
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_VAR 0 7
70527: PPUSH
70528: LD_INT 4
70530: PPUSH
70531: LD_INT 4
70533: PPUSH
70534: CALL_OW 272
70538: PUSH
70539: LD_VAR 0 8
70543: PPUSH
70544: LD_INT 4
70546: PPUSH
70547: LD_INT 4
70549: PPUSH
70550: CALL_OW 273
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_VAR 0 7
70563: PPUSH
70564: LD_INT 5
70566: PPUSH
70567: LD_INT 4
70569: PPUSH
70570: CALL_OW 272
70574: PUSH
70575: LD_VAR 0 8
70579: PPUSH
70580: LD_INT 5
70582: PPUSH
70583: LD_INT 4
70585: PPUSH
70586: CALL_OW 273
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: ST_TO_ADDR
// for i = tmp downto 1 do
70603: LD_ADDR_VAR 0 4
70607: PUSH
70608: DOUBLE
70609: LD_VAR 0 6
70613: INC
70614: ST_TO_ADDR
70615: LD_INT 1
70617: PUSH
70618: FOR_DOWNTO
70619: IFFALSE 70720
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70621: LD_VAR 0 6
70625: PUSH
70626: LD_VAR 0 4
70630: ARRAY
70631: PUSH
70632: LD_INT 1
70634: ARRAY
70635: PPUSH
70636: LD_VAR 0 6
70640: PUSH
70641: LD_VAR 0 4
70645: ARRAY
70646: PUSH
70647: LD_INT 2
70649: ARRAY
70650: PPUSH
70651: CALL_OW 488
70655: NOT
70656: PUSH
70657: LD_VAR 0 6
70661: PUSH
70662: LD_VAR 0 4
70666: ARRAY
70667: PUSH
70668: LD_INT 1
70670: ARRAY
70671: PPUSH
70672: LD_VAR 0 6
70676: PUSH
70677: LD_VAR 0 4
70681: ARRAY
70682: PUSH
70683: LD_INT 2
70685: ARRAY
70686: PPUSH
70687: CALL_OW 428
70691: PUSH
70692: LD_INT 0
70694: NONEQUAL
70695: OR
70696: IFFALSE 70718
// tmp := Delete ( tmp , i ) ;
70698: LD_ADDR_VAR 0 6
70702: PUSH
70703: LD_VAR 0 6
70707: PPUSH
70708: LD_VAR 0 4
70712: PPUSH
70713: CALL_OW 3
70717: ST_TO_ADDR
70718: GO 70618
70720: POP
70721: POP
// j := GetClosestHex ( unit , tmp ) ;
70722: LD_ADDR_VAR 0 5
70726: PUSH
70727: LD_VAR 0 1
70731: PPUSH
70732: LD_VAR 0 6
70736: PPUSH
70737: CALL 70022 0 2
70741: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70742: LD_VAR 0 1
70746: PPUSH
70747: LD_VAR 0 5
70751: PUSH
70752: LD_INT 1
70754: ARRAY
70755: PPUSH
70756: LD_VAR 0 5
70760: PUSH
70761: LD_INT 2
70763: ARRAY
70764: PPUSH
70765: CALL_OW 111
// end ;
70769: LD_VAR 0 3
70773: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70774: LD_INT 0
70776: PPUSH
70777: PPUSH
70778: PPUSH
// uc_side = 0 ;
70779: LD_ADDR_OWVAR 20
70783: PUSH
70784: LD_INT 0
70786: ST_TO_ADDR
// uc_nation = 0 ;
70787: LD_ADDR_OWVAR 21
70791: PUSH
70792: LD_INT 0
70794: ST_TO_ADDR
// InitHc_All ( ) ;
70795: CALL_OW 584
// InitVc ;
70799: CALL_OW 20
// if mastodonts then
70803: LD_VAR 0 6
70807: IFFALSE 70874
// for i = 1 to mastodonts do
70809: LD_ADDR_VAR 0 11
70813: PUSH
70814: DOUBLE
70815: LD_INT 1
70817: DEC
70818: ST_TO_ADDR
70819: LD_VAR 0 6
70823: PUSH
70824: FOR_TO
70825: IFFALSE 70872
// begin vc_chassis := 31 ;
70827: LD_ADDR_OWVAR 37
70831: PUSH
70832: LD_INT 31
70834: ST_TO_ADDR
// vc_control := control_rider ;
70835: LD_ADDR_OWVAR 38
70839: PUSH
70840: LD_INT 4
70842: ST_TO_ADDR
// animal := CreateVehicle ;
70843: LD_ADDR_VAR 0 12
70847: PUSH
70848: CALL_OW 45
70852: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70853: LD_VAR 0 12
70857: PPUSH
70858: LD_VAR 0 8
70862: PPUSH
70863: LD_INT 0
70865: PPUSH
70866: CALL 73062 0 3
// end ;
70870: GO 70824
70872: POP
70873: POP
// if horses then
70874: LD_VAR 0 5
70878: IFFALSE 70945
// for i = 1 to horses do
70880: LD_ADDR_VAR 0 11
70884: PUSH
70885: DOUBLE
70886: LD_INT 1
70888: DEC
70889: ST_TO_ADDR
70890: LD_VAR 0 5
70894: PUSH
70895: FOR_TO
70896: IFFALSE 70943
// begin hc_class := 21 ;
70898: LD_ADDR_OWVAR 28
70902: PUSH
70903: LD_INT 21
70905: ST_TO_ADDR
// hc_gallery :=  ;
70906: LD_ADDR_OWVAR 33
70910: PUSH
70911: LD_STRING 
70913: ST_TO_ADDR
// animal := CreateHuman ;
70914: LD_ADDR_VAR 0 12
70918: PUSH
70919: CALL_OW 44
70923: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70924: LD_VAR 0 12
70928: PPUSH
70929: LD_VAR 0 8
70933: PPUSH
70934: LD_INT 0
70936: PPUSH
70937: CALL 73062 0 3
// end ;
70941: GO 70895
70943: POP
70944: POP
// if birds then
70945: LD_VAR 0 1
70949: IFFALSE 71016
// for i = 1 to birds do
70951: LD_ADDR_VAR 0 11
70955: PUSH
70956: DOUBLE
70957: LD_INT 1
70959: DEC
70960: ST_TO_ADDR
70961: LD_VAR 0 1
70965: PUSH
70966: FOR_TO
70967: IFFALSE 71014
// begin hc_class = 18 ;
70969: LD_ADDR_OWVAR 28
70973: PUSH
70974: LD_INT 18
70976: ST_TO_ADDR
// hc_gallery =  ;
70977: LD_ADDR_OWVAR 33
70981: PUSH
70982: LD_STRING 
70984: ST_TO_ADDR
// animal := CreateHuman ;
70985: LD_ADDR_VAR 0 12
70989: PUSH
70990: CALL_OW 44
70994: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70995: LD_VAR 0 12
70999: PPUSH
71000: LD_VAR 0 8
71004: PPUSH
71005: LD_INT 0
71007: PPUSH
71008: CALL 73062 0 3
// end ;
71012: GO 70966
71014: POP
71015: POP
// if tigers then
71016: LD_VAR 0 2
71020: IFFALSE 71104
// for i = 1 to tigers do
71022: LD_ADDR_VAR 0 11
71026: PUSH
71027: DOUBLE
71028: LD_INT 1
71030: DEC
71031: ST_TO_ADDR
71032: LD_VAR 0 2
71036: PUSH
71037: FOR_TO
71038: IFFALSE 71102
// begin hc_class = class_tiger ;
71040: LD_ADDR_OWVAR 28
71044: PUSH
71045: LD_INT 14
71047: ST_TO_ADDR
// hc_gallery =  ;
71048: LD_ADDR_OWVAR 33
71052: PUSH
71053: LD_STRING 
71055: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71056: LD_ADDR_OWVAR 35
71060: PUSH
71061: LD_INT 7
71063: NEG
71064: PPUSH
71065: LD_INT 7
71067: PPUSH
71068: CALL_OW 12
71072: ST_TO_ADDR
// animal := CreateHuman ;
71073: LD_ADDR_VAR 0 12
71077: PUSH
71078: CALL_OW 44
71082: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71083: LD_VAR 0 12
71087: PPUSH
71088: LD_VAR 0 8
71092: PPUSH
71093: LD_INT 0
71095: PPUSH
71096: CALL 73062 0 3
// end ;
71100: GO 71037
71102: POP
71103: POP
// if apemans then
71104: LD_VAR 0 3
71108: IFFALSE 71231
// for i = 1 to apemans do
71110: LD_ADDR_VAR 0 11
71114: PUSH
71115: DOUBLE
71116: LD_INT 1
71118: DEC
71119: ST_TO_ADDR
71120: LD_VAR 0 3
71124: PUSH
71125: FOR_TO
71126: IFFALSE 71229
// begin hc_class = class_apeman ;
71128: LD_ADDR_OWVAR 28
71132: PUSH
71133: LD_INT 12
71135: ST_TO_ADDR
// hc_gallery =  ;
71136: LD_ADDR_OWVAR 33
71140: PUSH
71141: LD_STRING 
71143: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71144: LD_ADDR_OWVAR 35
71148: PUSH
71149: LD_INT 2
71151: NEG
71152: PPUSH
71153: LD_INT 2
71155: PPUSH
71156: CALL_OW 12
71160: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71161: LD_ADDR_OWVAR 31
71165: PUSH
71166: LD_INT 1
71168: PPUSH
71169: LD_INT 3
71171: PPUSH
71172: CALL_OW 12
71176: PUSH
71177: LD_INT 1
71179: PPUSH
71180: LD_INT 3
71182: PPUSH
71183: CALL_OW 12
71187: PUSH
71188: LD_INT 0
71190: PUSH
71191: LD_INT 0
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: ST_TO_ADDR
// animal := CreateHuman ;
71200: LD_ADDR_VAR 0 12
71204: PUSH
71205: CALL_OW 44
71209: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71210: LD_VAR 0 12
71214: PPUSH
71215: LD_VAR 0 8
71219: PPUSH
71220: LD_INT 0
71222: PPUSH
71223: CALL 73062 0 3
// end ;
71227: GO 71125
71229: POP
71230: POP
// if enchidnas then
71231: LD_VAR 0 4
71235: IFFALSE 71302
// for i = 1 to enchidnas do
71237: LD_ADDR_VAR 0 11
71241: PUSH
71242: DOUBLE
71243: LD_INT 1
71245: DEC
71246: ST_TO_ADDR
71247: LD_VAR 0 4
71251: PUSH
71252: FOR_TO
71253: IFFALSE 71300
// begin hc_class = 13 ;
71255: LD_ADDR_OWVAR 28
71259: PUSH
71260: LD_INT 13
71262: ST_TO_ADDR
// hc_gallery =  ;
71263: LD_ADDR_OWVAR 33
71267: PUSH
71268: LD_STRING 
71270: ST_TO_ADDR
// animal := CreateHuman ;
71271: LD_ADDR_VAR 0 12
71275: PUSH
71276: CALL_OW 44
71280: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71281: LD_VAR 0 12
71285: PPUSH
71286: LD_VAR 0 8
71290: PPUSH
71291: LD_INT 0
71293: PPUSH
71294: CALL 73062 0 3
// end ;
71298: GO 71252
71300: POP
71301: POP
// if fishes then
71302: LD_VAR 0 7
71306: IFFALSE 71373
// for i = 1 to fishes do
71308: LD_ADDR_VAR 0 11
71312: PUSH
71313: DOUBLE
71314: LD_INT 1
71316: DEC
71317: ST_TO_ADDR
71318: LD_VAR 0 7
71322: PUSH
71323: FOR_TO
71324: IFFALSE 71371
// begin hc_class = 20 ;
71326: LD_ADDR_OWVAR 28
71330: PUSH
71331: LD_INT 20
71333: ST_TO_ADDR
// hc_gallery =  ;
71334: LD_ADDR_OWVAR 33
71338: PUSH
71339: LD_STRING 
71341: ST_TO_ADDR
// animal := CreateHuman ;
71342: LD_ADDR_VAR 0 12
71346: PUSH
71347: CALL_OW 44
71351: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71352: LD_VAR 0 12
71356: PPUSH
71357: LD_VAR 0 9
71361: PPUSH
71362: LD_INT 0
71364: PPUSH
71365: CALL 73062 0 3
// end ;
71369: GO 71323
71371: POP
71372: POP
// end ;
71373: LD_VAR 0 10
71377: RET
// export function WantHeal ( sci , unit ) ; begin
71378: LD_INT 0
71380: PPUSH
// if GetTaskList ( sci ) > 0 then
71381: LD_VAR 0 1
71385: PPUSH
71386: CALL_OW 437
71390: PUSH
71391: LD_INT 0
71393: GREATER
71394: IFFALSE 71464
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71396: LD_VAR 0 1
71400: PPUSH
71401: CALL_OW 437
71405: PUSH
71406: LD_INT 1
71408: ARRAY
71409: PUSH
71410: LD_INT 1
71412: ARRAY
71413: PUSH
71414: LD_STRING l
71416: EQUAL
71417: PUSH
71418: LD_VAR 0 1
71422: PPUSH
71423: CALL_OW 437
71427: PUSH
71428: LD_INT 1
71430: ARRAY
71431: PUSH
71432: LD_INT 4
71434: ARRAY
71435: PUSH
71436: LD_VAR 0 2
71440: EQUAL
71441: AND
71442: IFFALSE 71454
// result := true else
71444: LD_ADDR_VAR 0 3
71448: PUSH
71449: LD_INT 1
71451: ST_TO_ADDR
71452: GO 71462
// result := false ;
71454: LD_ADDR_VAR 0 3
71458: PUSH
71459: LD_INT 0
71461: ST_TO_ADDR
// end else
71462: GO 71472
// result := false ;
71464: LD_ADDR_VAR 0 3
71468: PUSH
71469: LD_INT 0
71471: ST_TO_ADDR
// end ;
71472: LD_VAR 0 3
71476: RET
// export function HealTarget ( sci ) ; begin
71477: LD_INT 0
71479: PPUSH
// if not sci then
71480: LD_VAR 0 1
71484: NOT
71485: IFFALSE 71489
// exit ;
71487: GO 71554
// result := 0 ;
71489: LD_ADDR_VAR 0 2
71493: PUSH
71494: LD_INT 0
71496: ST_TO_ADDR
// if GetTaskList ( sci ) then
71497: LD_VAR 0 1
71501: PPUSH
71502: CALL_OW 437
71506: IFFALSE 71554
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71508: LD_VAR 0 1
71512: PPUSH
71513: CALL_OW 437
71517: PUSH
71518: LD_INT 1
71520: ARRAY
71521: PUSH
71522: LD_INT 1
71524: ARRAY
71525: PUSH
71526: LD_STRING l
71528: EQUAL
71529: IFFALSE 71554
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71531: LD_ADDR_VAR 0 2
71535: PUSH
71536: LD_VAR 0 1
71540: PPUSH
71541: CALL_OW 437
71545: PUSH
71546: LD_INT 1
71548: ARRAY
71549: PUSH
71550: LD_INT 4
71552: ARRAY
71553: ST_TO_ADDR
// end ;
71554: LD_VAR 0 2
71558: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71559: LD_INT 0
71561: PPUSH
71562: PPUSH
71563: PPUSH
71564: PPUSH
// if not base_units then
71565: LD_VAR 0 1
71569: NOT
71570: IFFALSE 71574
// exit ;
71572: GO 71661
// result := false ;
71574: LD_ADDR_VAR 0 2
71578: PUSH
71579: LD_INT 0
71581: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71582: LD_ADDR_VAR 0 5
71586: PUSH
71587: LD_VAR 0 1
71591: PPUSH
71592: LD_INT 21
71594: PUSH
71595: LD_INT 3
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PPUSH
71602: CALL_OW 72
71606: ST_TO_ADDR
// if not tmp then
71607: LD_VAR 0 5
71611: NOT
71612: IFFALSE 71616
// exit ;
71614: GO 71661
// for i in tmp do
71616: LD_ADDR_VAR 0 3
71620: PUSH
71621: LD_VAR 0 5
71625: PUSH
71626: FOR_IN
71627: IFFALSE 71659
// begin result := EnemyInRange ( i , 22 ) ;
71629: LD_ADDR_VAR 0 2
71633: PUSH
71634: LD_VAR 0 3
71638: PPUSH
71639: LD_INT 22
71641: PPUSH
71642: CALL 69897 0 2
71646: ST_TO_ADDR
// if result then
71647: LD_VAR 0 2
71651: IFFALSE 71657
// exit ;
71653: POP
71654: POP
71655: GO 71661
// end ;
71657: GO 71626
71659: POP
71660: POP
// end ;
71661: LD_VAR 0 2
71665: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71666: LD_INT 0
71668: PPUSH
71669: PPUSH
// if not units then
71670: LD_VAR 0 1
71674: NOT
71675: IFFALSE 71679
// exit ;
71677: GO 71749
// result := [ ] ;
71679: LD_ADDR_VAR 0 3
71683: PUSH
71684: EMPTY
71685: ST_TO_ADDR
// for i in units do
71686: LD_ADDR_VAR 0 4
71690: PUSH
71691: LD_VAR 0 1
71695: PUSH
71696: FOR_IN
71697: IFFALSE 71747
// if GetTag ( i ) = tag then
71699: LD_VAR 0 4
71703: PPUSH
71704: CALL_OW 110
71708: PUSH
71709: LD_VAR 0 2
71713: EQUAL
71714: IFFALSE 71745
// result := Replace ( result , result + 1 , i ) ;
71716: LD_ADDR_VAR 0 3
71720: PUSH
71721: LD_VAR 0 3
71725: PPUSH
71726: LD_VAR 0 3
71730: PUSH
71731: LD_INT 1
71733: PLUS
71734: PPUSH
71735: LD_VAR 0 4
71739: PPUSH
71740: CALL_OW 1
71744: ST_TO_ADDR
71745: GO 71696
71747: POP
71748: POP
// end ;
71749: LD_VAR 0 3
71753: RET
// export function IsDriver ( un ) ; begin
71754: LD_INT 0
71756: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71757: LD_ADDR_VAR 0 2
71761: PUSH
71762: LD_VAR 0 1
71766: PUSH
71767: LD_INT 55
71769: PUSH
71770: EMPTY
71771: LIST
71772: PPUSH
71773: CALL_OW 69
71777: IN
71778: ST_TO_ADDR
// end ;
71779: LD_VAR 0 2
71783: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71784: LD_INT 0
71786: PPUSH
71787: PPUSH
// list := [ ] ;
71788: LD_ADDR_VAR 0 5
71792: PUSH
71793: EMPTY
71794: ST_TO_ADDR
// case d of 0 :
71795: LD_VAR 0 3
71799: PUSH
71800: LD_INT 0
71802: DOUBLE
71803: EQUAL
71804: IFTRUE 71808
71806: GO 71941
71808: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71809: LD_ADDR_VAR 0 5
71813: PUSH
71814: LD_VAR 0 1
71818: PUSH
71819: LD_INT 4
71821: MINUS
71822: PUSH
71823: LD_VAR 0 2
71827: PUSH
71828: LD_INT 4
71830: MINUS
71831: PUSH
71832: LD_INT 2
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: LIST
71839: PUSH
71840: LD_VAR 0 1
71844: PUSH
71845: LD_INT 3
71847: MINUS
71848: PUSH
71849: LD_VAR 0 2
71853: PUSH
71854: LD_INT 1
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: LIST
71861: PUSH
71862: LD_VAR 0 1
71866: PUSH
71867: LD_INT 4
71869: PLUS
71870: PUSH
71871: LD_VAR 0 2
71875: PUSH
71876: LD_INT 4
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: LIST
71883: PUSH
71884: LD_VAR 0 1
71888: PUSH
71889: LD_INT 3
71891: PLUS
71892: PUSH
71893: LD_VAR 0 2
71897: PUSH
71898: LD_INT 3
71900: PLUS
71901: PUSH
71902: LD_INT 5
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: LIST
71909: PUSH
71910: LD_VAR 0 1
71914: PUSH
71915: LD_VAR 0 2
71919: PUSH
71920: LD_INT 4
71922: PLUS
71923: PUSH
71924: LD_INT 0
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: LIST
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: ST_TO_ADDR
// end ; 1 :
71939: GO 72639
71941: LD_INT 1
71943: DOUBLE
71944: EQUAL
71945: IFTRUE 71949
71947: GO 72082
71949: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71950: LD_ADDR_VAR 0 5
71954: PUSH
71955: LD_VAR 0 1
71959: PUSH
71960: LD_VAR 0 2
71964: PUSH
71965: LD_INT 4
71967: MINUS
71968: PUSH
71969: LD_INT 3
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: LIST
71976: PUSH
71977: LD_VAR 0 1
71981: PUSH
71982: LD_INT 3
71984: MINUS
71985: PUSH
71986: LD_VAR 0 2
71990: PUSH
71991: LD_INT 3
71993: MINUS
71994: PUSH
71995: LD_INT 2
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: LIST
72002: PUSH
72003: LD_VAR 0 1
72007: PUSH
72008: LD_INT 4
72010: MINUS
72011: PUSH
72012: LD_VAR 0 2
72016: PUSH
72017: LD_INT 1
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: LIST
72024: PUSH
72025: LD_VAR 0 1
72029: PUSH
72030: LD_VAR 0 2
72034: PUSH
72035: LD_INT 3
72037: PLUS
72038: PUSH
72039: LD_INT 0
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: LIST
72046: PUSH
72047: LD_VAR 0 1
72051: PUSH
72052: LD_INT 4
72054: PLUS
72055: PUSH
72056: LD_VAR 0 2
72060: PUSH
72061: LD_INT 4
72063: PLUS
72064: PUSH
72065: LD_INT 5
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: LIST
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: ST_TO_ADDR
// end ; 2 :
72080: GO 72639
72082: LD_INT 2
72084: DOUBLE
72085: EQUAL
72086: IFTRUE 72090
72088: GO 72219
72090: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72091: LD_ADDR_VAR 0 5
72095: PUSH
72096: LD_VAR 0 1
72100: PUSH
72101: LD_VAR 0 2
72105: PUSH
72106: LD_INT 3
72108: MINUS
72109: PUSH
72110: LD_INT 3
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: LIST
72117: PUSH
72118: LD_VAR 0 1
72122: PUSH
72123: LD_INT 4
72125: PLUS
72126: PUSH
72127: LD_VAR 0 2
72131: PUSH
72132: LD_INT 4
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: LIST
72139: PUSH
72140: LD_VAR 0 1
72144: PUSH
72145: LD_VAR 0 2
72149: PUSH
72150: LD_INT 4
72152: PLUS
72153: PUSH
72154: LD_INT 0
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: LIST
72161: PUSH
72162: LD_VAR 0 1
72166: PUSH
72167: LD_INT 3
72169: MINUS
72170: PUSH
72171: LD_VAR 0 2
72175: PUSH
72176: LD_INT 1
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: LIST
72183: PUSH
72184: LD_VAR 0 1
72188: PUSH
72189: LD_INT 4
72191: MINUS
72192: PUSH
72193: LD_VAR 0 2
72197: PUSH
72198: LD_INT 4
72200: MINUS
72201: PUSH
72202: LD_INT 2
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: LIST
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: ST_TO_ADDR
// end ; 3 :
72217: GO 72639
72219: LD_INT 3
72221: DOUBLE
72222: EQUAL
72223: IFTRUE 72227
72225: GO 72360
72227: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72228: LD_ADDR_VAR 0 5
72232: PUSH
72233: LD_VAR 0 1
72237: PUSH
72238: LD_INT 3
72240: PLUS
72241: PUSH
72242: LD_VAR 0 2
72246: PUSH
72247: LD_INT 4
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: LIST
72254: PUSH
72255: LD_VAR 0 1
72259: PUSH
72260: LD_INT 4
72262: PLUS
72263: PUSH
72264: LD_VAR 0 2
72268: PUSH
72269: LD_INT 4
72271: PLUS
72272: PUSH
72273: LD_INT 5
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: LIST
72280: PUSH
72281: LD_VAR 0 1
72285: PUSH
72286: LD_INT 4
72288: MINUS
72289: PUSH
72290: LD_VAR 0 2
72294: PUSH
72295: LD_INT 1
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: LIST
72302: PUSH
72303: LD_VAR 0 1
72307: PUSH
72308: LD_VAR 0 2
72312: PUSH
72313: LD_INT 4
72315: MINUS
72316: PUSH
72317: LD_INT 3
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: LIST
72324: PUSH
72325: LD_VAR 0 1
72329: PUSH
72330: LD_INT 3
72332: MINUS
72333: PUSH
72334: LD_VAR 0 2
72338: PUSH
72339: LD_INT 3
72341: MINUS
72342: PUSH
72343: LD_INT 2
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: LIST
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: ST_TO_ADDR
// end ; 4 :
72358: GO 72639
72360: LD_INT 4
72362: DOUBLE
72363: EQUAL
72364: IFTRUE 72368
72366: GO 72501
72368: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72369: LD_ADDR_VAR 0 5
72373: PUSH
72374: LD_VAR 0 1
72378: PUSH
72379: LD_VAR 0 2
72383: PUSH
72384: LD_INT 4
72386: PLUS
72387: PUSH
72388: LD_INT 0
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: LIST
72395: PUSH
72396: LD_VAR 0 1
72400: PUSH
72401: LD_INT 3
72403: PLUS
72404: PUSH
72405: LD_VAR 0 2
72409: PUSH
72410: LD_INT 3
72412: PLUS
72413: PUSH
72414: LD_INT 5
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: LIST
72421: PUSH
72422: LD_VAR 0 1
72426: PUSH
72427: LD_INT 4
72429: PLUS
72430: PUSH
72431: LD_VAR 0 2
72435: PUSH
72436: LD_INT 4
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: LIST
72443: PUSH
72444: LD_VAR 0 1
72448: PUSH
72449: LD_VAR 0 2
72453: PUSH
72454: LD_INT 3
72456: MINUS
72457: PUSH
72458: LD_INT 3
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: LIST
72465: PUSH
72466: LD_VAR 0 1
72470: PUSH
72471: LD_INT 4
72473: MINUS
72474: PUSH
72475: LD_VAR 0 2
72479: PUSH
72480: LD_INT 4
72482: MINUS
72483: PUSH
72484: LD_INT 2
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: LIST
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: ST_TO_ADDR
// end ; 5 :
72499: GO 72639
72501: LD_INT 5
72503: DOUBLE
72504: EQUAL
72505: IFTRUE 72509
72507: GO 72638
72509: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72510: LD_ADDR_VAR 0 5
72514: PUSH
72515: LD_VAR 0 1
72519: PUSH
72520: LD_INT 4
72522: MINUS
72523: PUSH
72524: LD_VAR 0 2
72528: PUSH
72529: LD_INT 1
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: LIST
72536: PUSH
72537: LD_VAR 0 1
72541: PUSH
72542: LD_VAR 0 2
72546: PUSH
72547: LD_INT 4
72549: MINUS
72550: PUSH
72551: LD_INT 3
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: LIST
72558: PUSH
72559: LD_VAR 0 1
72563: PUSH
72564: LD_INT 4
72566: PLUS
72567: PUSH
72568: LD_VAR 0 2
72572: PUSH
72573: LD_INT 4
72575: PLUS
72576: PUSH
72577: LD_INT 5
72579: PUSH
72580: EMPTY
72581: LIST
72582: LIST
72583: LIST
72584: PUSH
72585: LD_VAR 0 1
72589: PUSH
72590: LD_INT 3
72592: PLUS
72593: PUSH
72594: LD_VAR 0 2
72598: PUSH
72599: LD_INT 4
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: LIST
72606: PUSH
72607: LD_VAR 0 1
72611: PUSH
72612: LD_VAR 0 2
72616: PUSH
72617: LD_INT 3
72619: PLUS
72620: PUSH
72621: LD_INT 0
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: LIST
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: ST_TO_ADDR
// end ; end ;
72636: GO 72639
72638: POP
// result := list ;
72639: LD_ADDR_VAR 0 4
72643: PUSH
72644: LD_VAR 0 5
72648: ST_TO_ADDR
// end ;
72649: LD_VAR 0 4
72653: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72654: LD_INT 0
72656: PPUSH
72657: PPUSH
72658: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72659: LD_VAR 0 1
72663: NOT
72664: PUSH
72665: LD_VAR 0 2
72669: PUSH
72670: LD_INT 1
72672: PUSH
72673: LD_INT 2
72675: PUSH
72676: LD_INT 3
72678: PUSH
72679: LD_INT 4
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: IN
72688: NOT
72689: OR
72690: IFFALSE 72694
// exit ;
72692: GO 72786
// tmp := [ ] ;
72694: LD_ADDR_VAR 0 5
72698: PUSH
72699: EMPTY
72700: ST_TO_ADDR
// for i in units do
72701: LD_ADDR_VAR 0 4
72705: PUSH
72706: LD_VAR 0 1
72710: PUSH
72711: FOR_IN
72712: IFFALSE 72755
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72714: LD_ADDR_VAR 0 5
72718: PUSH
72719: LD_VAR 0 5
72723: PPUSH
72724: LD_VAR 0 5
72728: PUSH
72729: LD_INT 1
72731: PLUS
72732: PPUSH
72733: LD_VAR 0 4
72737: PPUSH
72738: LD_VAR 0 2
72742: PPUSH
72743: CALL_OW 259
72747: PPUSH
72748: CALL_OW 2
72752: ST_TO_ADDR
72753: GO 72711
72755: POP
72756: POP
// if not tmp then
72757: LD_VAR 0 5
72761: NOT
72762: IFFALSE 72766
// exit ;
72764: GO 72786
// result := SortListByListDesc ( units , tmp ) ;
72766: LD_ADDR_VAR 0 3
72770: PUSH
72771: LD_VAR 0 1
72775: PPUSH
72776: LD_VAR 0 5
72780: PPUSH
72781: CALL_OW 77
72785: ST_TO_ADDR
// end ;
72786: LD_VAR 0 3
72790: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72791: LD_INT 0
72793: PPUSH
72794: PPUSH
72795: PPUSH
// result := false ;
72796: LD_ADDR_VAR 0 3
72800: PUSH
72801: LD_INT 0
72803: ST_TO_ADDR
// x := GetX ( building ) ;
72804: LD_ADDR_VAR 0 4
72808: PUSH
72809: LD_VAR 0 2
72813: PPUSH
72814: CALL_OW 250
72818: ST_TO_ADDR
// y := GetY ( building ) ;
72819: LD_ADDR_VAR 0 5
72823: PUSH
72824: LD_VAR 0 2
72828: PPUSH
72829: CALL_OW 251
72833: ST_TO_ADDR
// if not building or not x or not y then
72834: LD_VAR 0 2
72838: NOT
72839: PUSH
72840: LD_VAR 0 4
72844: NOT
72845: OR
72846: PUSH
72847: LD_VAR 0 5
72851: NOT
72852: OR
72853: IFFALSE 72857
// exit ;
72855: GO 72949
// if GetTaskList ( unit ) then
72857: LD_VAR 0 1
72861: PPUSH
72862: CALL_OW 437
72866: IFFALSE 72949
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72868: LD_STRING e
72870: PUSH
72871: LD_VAR 0 1
72875: PPUSH
72876: CALL_OW 437
72880: PUSH
72881: LD_INT 1
72883: ARRAY
72884: PUSH
72885: LD_INT 1
72887: ARRAY
72888: EQUAL
72889: PUSH
72890: LD_VAR 0 4
72894: PUSH
72895: LD_VAR 0 1
72899: PPUSH
72900: CALL_OW 437
72904: PUSH
72905: LD_INT 1
72907: ARRAY
72908: PUSH
72909: LD_INT 2
72911: ARRAY
72912: EQUAL
72913: AND
72914: PUSH
72915: LD_VAR 0 5
72919: PUSH
72920: LD_VAR 0 1
72924: PPUSH
72925: CALL_OW 437
72929: PUSH
72930: LD_INT 1
72932: ARRAY
72933: PUSH
72934: LD_INT 3
72936: ARRAY
72937: EQUAL
72938: AND
72939: IFFALSE 72949
// result := true end ;
72941: LD_ADDR_VAR 0 3
72945: PUSH
72946: LD_INT 1
72948: ST_TO_ADDR
// end ;
72949: LD_VAR 0 3
72953: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72954: LD_INT 0
72956: PPUSH
// result := false ;
72957: LD_ADDR_VAR 0 4
72961: PUSH
72962: LD_INT 0
72964: ST_TO_ADDR
// if GetTaskList ( unit ) then
72965: LD_VAR 0 1
72969: PPUSH
72970: CALL_OW 437
72974: IFFALSE 73057
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72976: LD_STRING M
72978: PUSH
72979: LD_VAR 0 1
72983: PPUSH
72984: CALL_OW 437
72988: PUSH
72989: LD_INT 1
72991: ARRAY
72992: PUSH
72993: LD_INT 1
72995: ARRAY
72996: EQUAL
72997: PUSH
72998: LD_VAR 0 2
73002: PUSH
73003: LD_VAR 0 1
73007: PPUSH
73008: CALL_OW 437
73012: PUSH
73013: LD_INT 1
73015: ARRAY
73016: PUSH
73017: LD_INT 2
73019: ARRAY
73020: EQUAL
73021: AND
73022: PUSH
73023: LD_VAR 0 3
73027: PUSH
73028: LD_VAR 0 1
73032: PPUSH
73033: CALL_OW 437
73037: PUSH
73038: LD_INT 1
73040: ARRAY
73041: PUSH
73042: LD_INT 3
73044: ARRAY
73045: EQUAL
73046: AND
73047: IFFALSE 73057
// result := true ;
73049: LD_ADDR_VAR 0 4
73053: PUSH
73054: LD_INT 1
73056: ST_TO_ADDR
// end ; end ;
73057: LD_VAR 0 4
73061: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73062: LD_INT 0
73064: PPUSH
73065: PPUSH
73066: PPUSH
73067: PPUSH
// if not unit or not area then
73068: LD_VAR 0 1
73072: NOT
73073: PUSH
73074: LD_VAR 0 2
73078: NOT
73079: OR
73080: IFFALSE 73084
// exit ;
73082: GO 73248
// tmp := AreaToList ( area , i ) ;
73084: LD_ADDR_VAR 0 6
73088: PUSH
73089: LD_VAR 0 2
73093: PPUSH
73094: LD_VAR 0 5
73098: PPUSH
73099: CALL_OW 517
73103: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73104: LD_ADDR_VAR 0 5
73108: PUSH
73109: DOUBLE
73110: LD_INT 1
73112: DEC
73113: ST_TO_ADDR
73114: LD_VAR 0 6
73118: PUSH
73119: LD_INT 1
73121: ARRAY
73122: PUSH
73123: FOR_TO
73124: IFFALSE 73246
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73126: LD_ADDR_VAR 0 7
73130: PUSH
73131: LD_VAR 0 6
73135: PUSH
73136: LD_INT 1
73138: ARRAY
73139: PUSH
73140: LD_VAR 0 5
73144: ARRAY
73145: PUSH
73146: LD_VAR 0 6
73150: PUSH
73151: LD_INT 2
73153: ARRAY
73154: PUSH
73155: LD_VAR 0 5
73159: ARRAY
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73165: LD_VAR 0 7
73169: PUSH
73170: LD_INT 1
73172: ARRAY
73173: PPUSH
73174: LD_VAR 0 7
73178: PUSH
73179: LD_INT 2
73181: ARRAY
73182: PPUSH
73183: CALL_OW 428
73187: PUSH
73188: LD_INT 0
73190: EQUAL
73191: IFFALSE 73244
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73193: LD_VAR 0 1
73197: PPUSH
73198: LD_VAR 0 7
73202: PUSH
73203: LD_INT 1
73205: ARRAY
73206: PPUSH
73207: LD_VAR 0 7
73211: PUSH
73212: LD_INT 2
73214: ARRAY
73215: PPUSH
73216: LD_VAR 0 3
73220: PPUSH
73221: CALL_OW 48
// result := IsPlaced ( unit ) ;
73225: LD_ADDR_VAR 0 4
73229: PUSH
73230: LD_VAR 0 1
73234: PPUSH
73235: CALL_OW 305
73239: ST_TO_ADDR
// exit ;
73240: POP
73241: POP
73242: GO 73248
// end ; end ;
73244: GO 73123
73246: POP
73247: POP
// end ;
73248: LD_VAR 0 4
73252: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73253: LD_INT 0
73255: PPUSH
73256: PPUSH
73257: PPUSH
// if not side or side > 8 then
73258: LD_VAR 0 1
73262: NOT
73263: PUSH
73264: LD_VAR 0 1
73268: PUSH
73269: LD_INT 8
73271: GREATER
73272: OR
73273: IFFALSE 73277
// exit ;
73275: GO 73464
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73277: LD_ADDR_VAR 0 4
73281: PUSH
73282: LD_INT 22
73284: PUSH
73285: LD_VAR 0 1
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: PUSH
73294: LD_INT 21
73296: PUSH
73297: LD_INT 3
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PPUSH
73308: CALL_OW 69
73312: ST_TO_ADDR
// if not tmp then
73313: LD_VAR 0 4
73317: NOT
73318: IFFALSE 73322
// exit ;
73320: GO 73464
// enable_addtolog := true ;
73322: LD_ADDR_OWVAR 81
73326: PUSH
73327: LD_INT 1
73329: ST_TO_ADDR
// AddToLog ( [ ) ;
73330: LD_STRING [
73332: PPUSH
73333: CALL_OW 561
// for i in tmp do
73337: LD_ADDR_VAR 0 3
73341: PUSH
73342: LD_VAR 0 4
73346: PUSH
73347: FOR_IN
73348: IFFALSE 73455
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73350: LD_STRING [
73352: PUSH
73353: LD_VAR 0 3
73357: PPUSH
73358: CALL_OW 266
73362: STR
73363: PUSH
73364: LD_STRING , 
73366: STR
73367: PUSH
73368: LD_VAR 0 3
73372: PPUSH
73373: CALL_OW 250
73377: STR
73378: PUSH
73379: LD_STRING , 
73381: STR
73382: PUSH
73383: LD_VAR 0 3
73387: PPUSH
73388: CALL_OW 251
73392: STR
73393: PUSH
73394: LD_STRING , 
73396: STR
73397: PUSH
73398: LD_VAR 0 3
73402: PPUSH
73403: CALL_OW 254
73407: STR
73408: PUSH
73409: LD_STRING , 
73411: STR
73412: PUSH
73413: LD_VAR 0 3
73417: PPUSH
73418: LD_INT 1
73420: PPUSH
73421: CALL_OW 268
73425: STR
73426: PUSH
73427: LD_STRING , 
73429: STR
73430: PUSH
73431: LD_VAR 0 3
73435: PPUSH
73436: LD_INT 2
73438: PPUSH
73439: CALL_OW 268
73443: STR
73444: PUSH
73445: LD_STRING ],
73447: STR
73448: PPUSH
73449: CALL_OW 561
// end ;
73453: GO 73347
73455: POP
73456: POP
// AddToLog ( ]; ) ;
73457: LD_STRING ];
73459: PPUSH
73460: CALL_OW 561
// end ;
73464: LD_VAR 0 2
73468: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73469: LD_INT 0
73471: PPUSH
73472: PPUSH
73473: PPUSH
73474: PPUSH
73475: PPUSH
// if not area or not rate or not max then
73476: LD_VAR 0 1
73480: NOT
73481: PUSH
73482: LD_VAR 0 2
73486: NOT
73487: OR
73488: PUSH
73489: LD_VAR 0 4
73493: NOT
73494: OR
73495: IFFALSE 73499
// exit ;
73497: GO 73691
// while 1 do
73499: LD_INT 1
73501: IFFALSE 73691
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73503: LD_ADDR_VAR 0 9
73507: PUSH
73508: LD_VAR 0 1
73512: PPUSH
73513: LD_INT 1
73515: PPUSH
73516: CALL_OW 287
73520: PUSH
73521: LD_INT 10
73523: MUL
73524: ST_TO_ADDR
// r := rate / 10 ;
73525: LD_ADDR_VAR 0 7
73529: PUSH
73530: LD_VAR 0 2
73534: PUSH
73535: LD_INT 10
73537: DIVREAL
73538: ST_TO_ADDR
// time := 1 1$00 ;
73539: LD_ADDR_VAR 0 8
73543: PUSH
73544: LD_INT 2100
73546: ST_TO_ADDR
// if amount < min then
73547: LD_VAR 0 9
73551: PUSH
73552: LD_VAR 0 3
73556: LESS
73557: IFFALSE 73575
// r := r * 2 else
73559: LD_ADDR_VAR 0 7
73563: PUSH
73564: LD_VAR 0 7
73568: PUSH
73569: LD_INT 2
73571: MUL
73572: ST_TO_ADDR
73573: GO 73601
// if amount > max then
73575: LD_VAR 0 9
73579: PUSH
73580: LD_VAR 0 4
73584: GREATER
73585: IFFALSE 73601
// r := r / 2 ;
73587: LD_ADDR_VAR 0 7
73591: PUSH
73592: LD_VAR 0 7
73596: PUSH
73597: LD_INT 2
73599: DIVREAL
73600: ST_TO_ADDR
// time := time / r ;
73601: LD_ADDR_VAR 0 8
73605: PUSH
73606: LD_VAR 0 8
73610: PUSH
73611: LD_VAR 0 7
73615: DIVREAL
73616: ST_TO_ADDR
// if time < 0 then
73617: LD_VAR 0 8
73621: PUSH
73622: LD_INT 0
73624: LESS
73625: IFFALSE 73642
// time := time * - 1 ;
73627: LD_ADDR_VAR 0 8
73631: PUSH
73632: LD_VAR 0 8
73636: PUSH
73637: LD_INT 1
73639: NEG
73640: MUL
73641: ST_TO_ADDR
// wait ( time ) ;
73642: LD_VAR 0 8
73646: PPUSH
73647: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73651: LD_INT 35
73653: PPUSH
73654: LD_INT 875
73656: PPUSH
73657: CALL_OW 12
73661: PPUSH
73662: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73666: LD_INT 1
73668: PPUSH
73669: LD_INT 5
73671: PPUSH
73672: CALL_OW 12
73676: PPUSH
73677: LD_VAR 0 1
73681: PPUSH
73682: LD_INT 1
73684: PPUSH
73685: CALL_OW 55
// end ;
73689: GO 73499
// end ;
73691: LD_VAR 0 5
73695: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73696: LD_INT 0
73698: PPUSH
73699: PPUSH
73700: PPUSH
73701: PPUSH
73702: PPUSH
73703: PPUSH
73704: PPUSH
73705: PPUSH
// if not turrets or not factories then
73706: LD_VAR 0 1
73710: NOT
73711: PUSH
73712: LD_VAR 0 2
73716: NOT
73717: OR
73718: IFFALSE 73722
// exit ;
73720: GO 74029
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73722: LD_ADDR_VAR 0 10
73726: PUSH
73727: LD_INT 5
73729: PUSH
73730: LD_INT 6
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: LD_INT 2
73739: PUSH
73740: LD_INT 4
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: LD_INT 3
73749: PUSH
73750: LD_INT 5
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: LIST
73761: PUSH
73762: LD_INT 24
73764: PUSH
73765: LD_INT 25
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 23
73774: PUSH
73775: LD_INT 27
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PUSH
73786: LD_INT 42
73788: PUSH
73789: LD_INT 43
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 44
73798: PUSH
73799: LD_INT 46
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 45
73808: PUSH
73809: LD_INT 47
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: LIST
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: LIST
73825: ST_TO_ADDR
// result := [ ] ;
73826: LD_ADDR_VAR 0 3
73830: PUSH
73831: EMPTY
73832: ST_TO_ADDR
// for i in turrets do
73833: LD_ADDR_VAR 0 4
73837: PUSH
73838: LD_VAR 0 1
73842: PUSH
73843: FOR_IN
73844: IFFALSE 74027
// begin nat := GetNation ( i ) ;
73846: LD_ADDR_VAR 0 7
73850: PUSH
73851: LD_VAR 0 4
73855: PPUSH
73856: CALL_OW 248
73860: ST_TO_ADDR
// weapon := 0 ;
73861: LD_ADDR_VAR 0 8
73865: PUSH
73866: LD_INT 0
73868: ST_TO_ADDR
// if not nat then
73869: LD_VAR 0 7
73873: NOT
73874: IFFALSE 73878
// continue ;
73876: GO 73843
// for j in list [ nat ] do
73878: LD_ADDR_VAR 0 5
73882: PUSH
73883: LD_VAR 0 10
73887: PUSH
73888: LD_VAR 0 7
73892: ARRAY
73893: PUSH
73894: FOR_IN
73895: IFFALSE 73936
// if GetBWeapon ( i ) = j [ 1 ] then
73897: LD_VAR 0 4
73901: PPUSH
73902: CALL_OW 269
73906: PUSH
73907: LD_VAR 0 5
73911: PUSH
73912: LD_INT 1
73914: ARRAY
73915: EQUAL
73916: IFFALSE 73934
// begin weapon := j [ 2 ] ;
73918: LD_ADDR_VAR 0 8
73922: PUSH
73923: LD_VAR 0 5
73927: PUSH
73928: LD_INT 2
73930: ARRAY
73931: ST_TO_ADDR
// break ;
73932: GO 73936
// end ;
73934: GO 73894
73936: POP
73937: POP
// if not weapon then
73938: LD_VAR 0 8
73942: NOT
73943: IFFALSE 73947
// continue ;
73945: GO 73843
// for k in factories do
73947: LD_ADDR_VAR 0 6
73951: PUSH
73952: LD_VAR 0 2
73956: PUSH
73957: FOR_IN
73958: IFFALSE 74023
// begin weapons := AvailableWeaponList ( k ) ;
73960: LD_ADDR_VAR 0 9
73964: PUSH
73965: LD_VAR 0 6
73969: PPUSH
73970: CALL_OW 478
73974: ST_TO_ADDR
// if not weapons then
73975: LD_VAR 0 9
73979: NOT
73980: IFFALSE 73984
// continue ;
73982: GO 73957
// if weapon in weapons then
73984: LD_VAR 0 8
73988: PUSH
73989: LD_VAR 0 9
73993: IN
73994: IFFALSE 74021
// begin result := [ i , weapon ] ;
73996: LD_ADDR_VAR 0 3
74000: PUSH
74001: LD_VAR 0 4
74005: PUSH
74006: LD_VAR 0 8
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: ST_TO_ADDR
// exit ;
74015: POP
74016: POP
74017: POP
74018: POP
74019: GO 74029
// end ; end ;
74021: GO 73957
74023: POP
74024: POP
// end ;
74025: GO 73843
74027: POP
74028: POP
// end ;
74029: LD_VAR 0 3
74033: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74034: LD_INT 0
74036: PPUSH
// if not side or side > 8 then
74037: LD_VAR 0 3
74041: NOT
74042: PUSH
74043: LD_VAR 0 3
74047: PUSH
74048: LD_INT 8
74050: GREATER
74051: OR
74052: IFFALSE 74056
// exit ;
74054: GO 74115
// if not range then
74056: LD_VAR 0 4
74060: NOT
74061: IFFALSE 74072
// range := - 12 ;
74063: LD_ADDR_VAR 0 4
74067: PUSH
74068: LD_INT 12
74070: NEG
74071: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74072: LD_VAR 0 1
74076: PPUSH
74077: LD_VAR 0 2
74081: PPUSH
74082: LD_VAR 0 3
74086: PPUSH
74087: LD_VAR 0 4
74091: PPUSH
74092: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74096: LD_VAR 0 1
74100: PPUSH
74101: LD_VAR 0 2
74105: PPUSH
74106: LD_VAR 0 3
74110: PPUSH
74111: CALL_OW 331
// end ;
74115: LD_VAR 0 5
74119: RET
// export function Video ( mode ) ; begin
74120: LD_INT 0
74122: PPUSH
// ingame_video = mode ;
74123: LD_ADDR_OWVAR 52
74127: PUSH
74128: LD_VAR 0 1
74132: ST_TO_ADDR
// interface_hidden = mode ;
74133: LD_ADDR_OWVAR 54
74137: PUSH
74138: LD_VAR 0 1
74142: ST_TO_ADDR
// end ;
74143: LD_VAR 0 2
74147: RET
// export function Join ( array , element ) ; begin
74148: LD_INT 0
74150: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74151: LD_ADDR_VAR 0 3
74155: PUSH
74156: LD_VAR 0 1
74160: PPUSH
74161: LD_VAR 0 1
74165: PUSH
74166: LD_INT 1
74168: PLUS
74169: PPUSH
74170: LD_VAR 0 2
74174: PPUSH
74175: CALL_OW 1
74179: ST_TO_ADDR
// end ;
74180: LD_VAR 0 3
74184: RET
// export function JoinUnion ( array , element ) ; begin
74185: LD_INT 0
74187: PPUSH
// result := array union element ;
74188: LD_ADDR_VAR 0 3
74192: PUSH
74193: LD_VAR 0 1
74197: PUSH
74198: LD_VAR 0 2
74202: UNION
74203: ST_TO_ADDR
// end ;
74204: LD_VAR 0 3
74208: RET
// export function GetBehemoths ( side ) ; begin
74209: LD_INT 0
74211: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74212: LD_ADDR_VAR 0 2
74216: PUSH
74217: LD_INT 22
74219: PUSH
74220: LD_VAR 0 1
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PUSH
74229: LD_INT 31
74231: PUSH
74232: LD_INT 25
74234: PUSH
74235: EMPTY
74236: LIST
74237: LIST
74238: PUSH
74239: EMPTY
74240: LIST
74241: LIST
74242: PPUSH
74243: CALL_OW 69
74247: ST_TO_ADDR
// end ;
74248: LD_VAR 0 2
74252: RET
// export function Shuffle ( array ) ; var i , index ; begin
74253: LD_INT 0
74255: PPUSH
74256: PPUSH
74257: PPUSH
// result := [ ] ;
74258: LD_ADDR_VAR 0 2
74262: PUSH
74263: EMPTY
74264: ST_TO_ADDR
// if not array then
74265: LD_VAR 0 1
74269: NOT
74270: IFFALSE 74274
// exit ;
74272: GO 74373
// Randomize ;
74274: CALL_OW 10
// for i = array downto 1 do
74278: LD_ADDR_VAR 0 3
74282: PUSH
74283: DOUBLE
74284: LD_VAR 0 1
74288: INC
74289: ST_TO_ADDR
74290: LD_INT 1
74292: PUSH
74293: FOR_DOWNTO
74294: IFFALSE 74371
// begin index := rand ( 1 , array ) ;
74296: LD_ADDR_VAR 0 4
74300: PUSH
74301: LD_INT 1
74303: PPUSH
74304: LD_VAR 0 1
74308: PPUSH
74309: CALL_OW 12
74313: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74314: LD_ADDR_VAR 0 2
74318: PUSH
74319: LD_VAR 0 2
74323: PPUSH
74324: LD_VAR 0 2
74328: PUSH
74329: LD_INT 1
74331: PLUS
74332: PPUSH
74333: LD_VAR 0 1
74337: PUSH
74338: LD_VAR 0 4
74342: ARRAY
74343: PPUSH
74344: CALL_OW 2
74348: ST_TO_ADDR
// array := Delete ( array , index ) ;
74349: LD_ADDR_VAR 0 1
74353: PUSH
74354: LD_VAR 0 1
74358: PPUSH
74359: LD_VAR 0 4
74363: PPUSH
74364: CALL_OW 3
74368: ST_TO_ADDR
// end ;
74369: GO 74293
74371: POP
74372: POP
// end ;
74373: LD_VAR 0 2
74377: RET
// export function GetBaseMaterials ( base ) ; begin
74378: LD_INT 0
74380: PPUSH
// result := [ 0 , 0 , 0 ] ;
74381: LD_ADDR_VAR 0 2
74385: PUSH
74386: LD_INT 0
74388: PUSH
74389: LD_INT 0
74391: PUSH
74392: LD_INT 0
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: LIST
74399: ST_TO_ADDR
// if not base then
74400: LD_VAR 0 1
74404: NOT
74405: IFFALSE 74409
// exit ;
74407: GO 74458
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74409: LD_ADDR_VAR 0 2
74413: PUSH
74414: LD_VAR 0 1
74418: PPUSH
74419: LD_INT 1
74421: PPUSH
74422: CALL_OW 275
74426: PUSH
74427: LD_VAR 0 1
74431: PPUSH
74432: LD_INT 2
74434: PPUSH
74435: CALL_OW 275
74439: PUSH
74440: LD_VAR 0 1
74444: PPUSH
74445: LD_INT 3
74447: PPUSH
74448: CALL_OW 275
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: LIST
74457: ST_TO_ADDR
// end ;
74458: LD_VAR 0 2
74462: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74463: LD_INT 0
74465: PPUSH
74466: PPUSH
// result := array ;
74467: LD_ADDR_VAR 0 3
74471: PUSH
74472: LD_VAR 0 1
74476: ST_TO_ADDR
// if size > 0 then
74477: LD_VAR 0 2
74481: PUSH
74482: LD_INT 0
74484: GREATER
74485: IFFALSE 74531
// for i := array downto size do
74487: LD_ADDR_VAR 0 4
74491: PUSH
74492: DOUBLE
74493: LD_VAR 0 1
74497: INC
74498: ST_TO_ADDR
74499: LD_VAR 0 2
74503: PUSH
74504: FOR_DOWNTO
74505: IFFALSE 74529
// result := Delete ( result , result ) ;
74507: LD_ADDR_VAR 0 3
74511: PUSH
74512: LD_VAR 0 3
74516: PPUSH
74517: LD_VAR 0 3
74521: PPUSH
74522: CALL_OW 3
74526: ST_TO_ADDR
74527: GO 74504
74529: POP
74530: POP
// end ;
74531: LD_VAR 0 3
74535: RET
// export function ComExit ( unit ) ; var tmp ; begin
74536: LD_INT 0
74538: PPUSH
74539: PPUSH
// if not IsInUnit ( unit ) then
74540: LD_VAR 0 1
74544: PPUSH
74545: CALL_OW 310
74549: NOT
74550: IFFALSE 74554
// exit ;
74552: GO 74614
// tmp := IsInUnit ( unit ) ;
74554: LD_ADDR_VAR 0 3
74558: PUSH
74559: LD_VAR 0 1
74563: PPUSH
74564: CALL_OW 310
74568: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74569: LD_VAR 0 3
74573: PPUSH
74574: CALL_OW 247
74578: PUSH
74579: LD_INT 2
74581: EQUAL
74582: IFFALSE 74595
// ComExitVehicle ( unit ) else
74584: LD_VAR 0 1
74588: PPUSH
74589: CALL_OW 121
74593: GO 74604
// ComExitBuilding ( unit ) ;
74595: LD_VAR 0 1
74599: PPUSH
74600: CALL_OW 122
// result := tmp ;
74604: LD_ADDR_VAR 0 2
74608: PUSH
74609: LD_VAR 0 3
74613: ST_TO_ADDR
// end ;
74614: LD_VAR 0 2
74618: RET
// export function ComExitAll ( units ) ; var i ; begin
74619: LD_INT 0
74621: PPUSH
74622: PPUSH
// if not units then
74623: LD_VAR 0 1
74627: NOT
74628: IFFALSE 74632
// exit ;
74630: GO 74658
// for i in units do
74632: LD_ADDR_VAR 0 3
74636: PUSH
74637: LD_VAR 0 1
74641: PUSH
74642: FOR_IN
74643: IFFALSE 74656
// ComExit ( i ) ;
74645: LD_VAR 0 3
74649: PPUSH
74650: CALL 74536 0 1
74654: GO 74642
74656: POP
74657: POP
// end ;
74658: LD_VAR 0 2
74662: RET
// export function ResetHc ; begin
74663: LD_INT 0
74665: PPUSH
// InitHc ;
74666: CALL_OW 19
// hc_importance := 0 ;
74670: LD_ADDR_OWVAR 32
74674: PUSH
74675: LD_INT 0
74677: ST_TO_ADDR
// end ;
74678: LD_VAR 0 1
74682: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74683: LD_INT 0
74685: PPUSH
74686: PPUSH
74687: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74688: LD_ADDR_VAR 0 6
74692: PUSH
74693: LD_VAR 0 1
74697: PUSH
74698: LD_VAR 0 3
74702: PLUS
74703: PUSH
74704: LD_INT 2
74706: DIV
74707: ST_TO_ADDR
// if _x < 0 then
74708: LD_VAR 0 6
74712: PUSH
74713: LD_INT 0
74715: LESS
74716: IFFALSE 74733
// _x := _x * - 1 ;
74718: LD_ADDR_VAR 0 6
74722: PUSH
74723: LD_VAR 0 6
74727: PUSH
74728: LD_INT 1
74730: NEG
74731: MUL
74732: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74733: LD_ADDR_VAR 0 7
74737: PUSH
74738: LD_VAR 0 2
74742: PUSH
74743: LD_VAR 0 4
74747: PLUS
74748: PUSH
74749: LD_INT 2
74751: DIV
74752: ST_TO_ADDR
// if _y < 0 then
74753: LD_VAR 0 7
74757: PUSH
74758: LD_INT 0
74760: LESS
74761: IFFALSE 74778
// _y := _y * - 1 ;
74763: LD_ADDR_VAR 0 7
74767: PUSH
74768: LD_VAR 0 7
74772: PUSH
74773: LD_INT 1
74775: NEG
74776: MUL
74777: ST_TO_ADDR
// result := [ _x , _y ] ;
74778: LD_ADDR_VAR 0 5
74782: PUSH
74783: LD_VAR 0 6
74787: PUSH
74788: LD_VAR 0 7
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: ST_TO_ADDR
// end ;
74797: LD_VAR 0 5
74801: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74802: LD_INT 0
74804: PPUSH
74805: PPUSH
74806: PPUSH
74807: PPUSH
// task := GetTaskList ( unit ) ;
74808: LD_ADDR_VAR 0 7
74812: PUSH
74813: LD_VAR 0 1
74817: PPUSH
74818: CALL_OW 437
74822: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74823: LD_VAR 0 7
74827: NOT
74828: PUSH
74829: LD_VAR 0 1
74833: PPUSH
74834: LD_VAR 0 2
74838: PPUSH
74839: CALL_OW 308
74843: NOT
74844: AND
74845: IFFALSE 74849
// exit ;
74847: GO 74967
// if IsInArea ( unit , area ) then
74849: LD_VAR 0 1
74853: PPUSH
74854: LD_VAR 0 2
74858: PPUSH
74859: CALL_OW 308
74863: IFFALSE 74881
// begin ComMoveToArea ( unit , goAway ) ;
74865: LD_VAR 0 1
74869: PPUSH
74870: LD_VAR 0 3
74874: PPUSH
74875: CALL_OW 113
// exit ;
74879: GO 74967
// end ; if task [ 1 ] [ 1 ] <> M then
74881: LD_VAR 0 7
74885: PUSH
74886: LD_INT 1
74888: ARRAY
74889: PUSH
74890: LD_INT 1
74892: ARRAY
74893: PUSH
74894: LD_STRING M
74896: NONEQUAL
74897: IFFALSE 74901
// exit ;
74899: GO 74967
// x := task [ 1 ] [ 2 ] ;
74901: LD_ADDR_VAR 0 5
74905: PUSH
74906: LD_VAR 0 7
74910: PUSH
74911: LD_INT 1
74913: ARRAY
74914: PUSH
74915: LD_INT 2
74917: ARRAY
74918: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74919: LD_ADDR_VAR 0 6
74923: PUSH
74924: LD_VAR 0 7
74928: PUSH
74929: LD_INT 1
74931: ARRAY
74932: PUSH
74933: LD_INT 3
74935: ARRAY
74936: ST_TO_ADDR
// if InArea ( x , y , area ) then
74937: LD_VAR 0 5
74941: PPUSH
74942: LD_VAR 0 6
74946: PPUSH
74947: LD_VAR 0 2
74951: PPUSH
74952: CALL_OW 309
74956: IFFALSE 74967
// ComStop ( unit ) ;
74958: LD_VAR 0 1
74962: PPUSH
74963: CALL_OW 141
// end ;
74967: LD_VAR 0 4
74971: RET
// export function Abs ( value ) ; begin
74972: LD_INT 0
74974: PPUSH
// result := value ;
74975: LD_ADDR_VAR 0 2
74979: PUSH
74980: LD_VAR 0 1
74984: ST_TO_ADDR
// if value < 0 then
74985: LD_VAR 0 1
74989: PUSH
74990: LD_INT 0
74992: LESS
74993: IFFALSE 75010
// result := value * - 1 ;
74995: LD_ADDR_VAR 0 2
74999: PUSH
75000: LD_VAR 0 1
75004: PUSH
75005: LD_INT 1
75007: NEG
75008: MUL
75009: ST_TO_ADDR
// end ;
75010: LD_VAR 0 2
75014: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75015: LD_INT 0
75017: PPUSH
75018: PPUSH
75019: PPUSH
75020: PPUSH
75021: PPUSH
75022: PPUSH
75023: PPUSH
75024: PPUSH
// if not unit or not building then
75025: LD_VAR 0 1
75029: NOT
75030: PUSH
75031: LD_VAR 0 2
75035: NOT
75036: OR
75037: IFFALSE 75041
// exit ;
75039: GO 75267
// x := GetX ( building ) ;
75041: LD_ADDR_VAR 0 4
75045: PUSH
75046: LD_VAR 0 2
75050: PPUSH
75051: CALL_OW 250
75055: ST_TO_ADDR
// y := GetY ( building ) ;
75056: LD_ADDR_VAR 0 6
75060: PUSH
75061: LD_VAR 0 2
75065: PPUSH
75066: CALL_OW 251
75070: ST_TO_ADDR
// d := GetDir ( building ) ;
75071: LD_ADDR_VAR 0 8
75075: PUSH
75076: LD_VAR 0 2
75080: PPUSH
75081: CALL_OW 254
75085: ST_TO_ADDR
// r := 4 ;
75086: LD_ADDR_VAR 0 9
75090: PUSH
75091: LD_INT 4
75093: ST_TO_ADDR
// for i := 1 to 5 do
75094: LD_ADDR_VAR 0 10
75098: PUSH
75099: DOUBLE
75100: LD_INT 1
75102: DEC
75103: ST_TO_ADDR
75104: LD_INT 5
75106: PUSH
75107: FOR_TO
75108: IFFALSE 75265
// begin _x := ShiftX ( x , d , r + i ) ;
75110: LD_ADDR_VAR 0 5
75114: PUSH
75115: LD_VAR 0 4
75119: PPUSH
75120: LD_VAR 0 8
75124: PPUSH
75125: LD_VAR 0 9
75129: PUSH
75130: LD_VAR 0 10
75134: PLUS
75135: PPUSH
75136: CALL_OW 272
75140: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75141: LD_ADDR_VAR 0 7
75145: PUSH
75146: LD_VAR 0 6
75150: PPUSH
75151: LD_VAR 0 8
75155: PPUSH
75156: LD_VAR 0 9
75160: PUSH
75161: LD_VAR 0 10
75165: PLUS
75166: PPUSH
75167: CALL_OW 273
75171: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75172: LD_VAR 0 5
75176: PPUSH
75177: LD_VAR 0 7
75181: PPUSH
75182: CALL_OW 488
75186: PUSH
75187: LD_VAR 0 5
75191: PPUSH
75192: LD_VAR 0 7
75196: PPUSH
75197: CALL_OW 428
75201: PPUSH
75202: CALL_OW 247
75206: PUSH
75207: LD_INT 3
75209: PUSH
75210: LD_INT 2
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: IN
75217: NOT
75218: AND
75219: IFFALSE 75263
// begin ComMoveXY ( unit , _x , _y ) ;
75221: LD_VAR 0 1
75225: PPUSH
75226: LD_VAR 0 5
75230: PPUSH
75231: LD_VAR 0 7
75235: PPUSH
75236: CALL_OW 111
// result := [ _x , _y ] ;
75240: LD_ADDR_VAR 0 3
75244: PUSH
75245: LD_VAR 0 5
75249: PUSH
75250: LD_VAR 0 7
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: ST_TO_ADDR
// exit ;
75259: POP
75260: POP
75261: GO 75267
// end ; end ;
75263: GO 75107
75265: POP
75266: POP
// end ;
75267: LD_VAR 0 3
75271: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75272: LD_INT 0
75274: PPUSH
75275: PPUSH
75276: PPUSH
// result := 0 ;
75277: LD_ADDR_VAR 0 3
75281: PUSH
75282: LD_INT 0
75284: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75285: LD_VAR 0 1
75289: PUSH
75290: LD_INT 0
75292: LESS
75293: PUSH
75294: LD_VAR 0 1
75298: PUSH
75299: LD_INT 8
75301: GREATER
75302: OR
75303: PUSH
75304: LD_VAR 0 2
75308: PUSH
75309: LD_INT 0
75311: LESS
75312: OR
75313: PUSH
75314: LD_VAR 0 2
75318: PUSH
75319: LD_INT 8
75321: GREATER
75322: OR
75323: IFFALSE 75327
// exit ;
75325: GO 75402
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75327: LD_ADDR_VAR 0 4
75331: PUSH
75332: LD_INT 22
75334: PUSH
75335: LD_VAR 0 2
75339: PUSH
75340: EMPTY
75341: LIST
75342: LIST
75343: PPUSH
75344: CALL_OW 69
75348: PUSH
75349: FOR_IN
75350: IFFALSE 75400
// begin un := UnitShoot ( i ) ;
75352: LD_ADDR_VAR 0 5
75356: PUSH
75357: LD_VAR 0 4
75361: PPUSH
75362: CALL_OW 504
75366: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75367: LD_VAR 0 5
75371: PPUSH
75372: CALL_OW 255
75376: PUSH
75377: LD_VAR 0 1
75381: EQUAL
75382: IFFALSE 75398
// begin result := un ;
75384: LD_ADDR_VAR 0 3
75388: PUSH
75389: LD_VAR 0 5
75393: ST_TO_ADDR
// exit ;
75394: POP
75395: POP
75396: GO 75402
// end ; end ;
75398: GO 75349
75400: POP
75401: POP
// end ;
75402: LD_VAR 0 3
75406: RET
// export function GetCargoBay ( units ) ; begin
75407: LD_INT 0
75409: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75410: LD_ADDR_VAR 0 2
75414: PUSH
75415: LD_VAR 0 1
75419: PPUSH
75420: LD_INT 2
75422: PUSH
75423: LD_INT 34
75425: PUSH
75426: LD_INT 12
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: PUSH
75433: LD_INT 34
75435: PUSH
75436: LD_INT 51
75438: PUSH
75439: EMPTY
75440: LIST
75441: LIST
75442: PUSH
75443: LD_INT 34
75445: PUSH
75446: LD_INT 32
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: PUSH
75453: LD_INT 34
75455: PUSH
75456: LD_EXP 50
75460: PUSH
75461: EMPTY
75462: LIST
75463: LIST
75464: PUSH
75465: EMPTY
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: LIST
75471: PPUSH
75472: CALL_OW 72
75476: ST_TO_ADDR
// end ;
75477: LD_VAR 0 2
75481: RET
// export function Negate ( value ) ; begin
75482: LD_INT 0
75484: PPUSH
// result := not value ;
75485: LD_ADDR_VAR 0 2
75489: PUSH
75490: LD_VAR 0 1
75494: NOT
75495: ST_TO_ADDR
// end ;
75496: LD_VAR 0 2
75500: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
75501: LD_INT 0
75503: PPUSH
// if x1 = x2 then
75504: LD_VAR 0 1
75508: PUSH
75509: LD_VAR 0 3
75513: EQUAL
75514: IFFALSE 75548
// begin if y1 > y2 then
75516: LD_VAR 0 2
75520: PUSH
75521: LD_VAR 0 4
75525: GREATER
75526: IFFALSE 75538
// result := 0 else
75528: LD_ADDR_VAR 0 5
75532: PUSH
75533: LD_INT 0
75535: ST_TO_ADDR
75536: GO 75546
// result := 3 ;
75538: LD_ADDR_VAR 0 5
75542: PUSH
75543: LD_INT 3
75545: ST_TO_ADDR
// exit ;
75546: GO 75634
// end ; if y1 = y2 then
75548: LD_VAR 0 2
75552: PUSH
75553: LD_VAR 0 4
75557: EQUAL
75558: IFFALSE 75592
// begin if x1 > x2 then
75560: LD_VAR 0 1
75564: PUSH
75565: LD_VAR 0 3
75569: GREATER
75570: IFFALSE 75582
// result := 1 else
75572: LD_ADDR_VAR 0 5
75576: PUSH
75577: LD_INT 1
75579: ST_TO_ADDR
75580: GO 75590
// result := 4 ;
75582: LD_ADDR_VAR 0 5
75586: PUSH
75587: LD_INT 4
75589: ST_TO_ADDR
// exit ;
75590: GO 75634
// end ; if x1 > x2 and y1 > y2 then
75592: LD_VAR 0 1
75596: PUSH
75597: LD_VAR 0 3
75601: GREATER
75602: PUSH
75603: LD_VAR 0 2
75607: PUSH
75608: LD_VAR 0 4
75612: GREATER
75613: AND
75614: IFFALSE 75626
// result := 2 else
75616: LD_ADDR_VAR 0 5
75620: PUSH
75621: LD_INT 2
75623: ST_TO_ADDR
75624: GO 75634
// result := 5 ;
75626: LD_ADDR_VAR 0 5
75630: PUSH
75631: LD_INT 5
75633: ST_TO_ADDR
// end ;
75634: LD_VAR 0 5
75638: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75639: LD_INT 0
75641: PPUSH
75642: PPUSH
// if not driver or not IsInUnit ( driver ) then
75643: LD_VAR 0 1
75647: NOT
75648: PUSH
75649: LD_VAR 0 1
75653: PPUSH
75654: CALL_OW 310
75658: NOT
75659: OR
75660: IFFALSE 75664
// exit ;
75662: GO 75754
// vehicle := IsInUnit ( driver ) ;
75664: LD_ADDR_VAR 0 3
75668: PUSH
75669: LD_VAR 0 1
75673: PPUSH
75674: CALL_OW 310
75678: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75679: LD_VAR 0 1
75683: PPUSH
75684: LD_STRING \
75686: PUSH
75687: LD_INT 0
75689: PUSH
75690: LD_INT 0
75692: PUSH
75693: LD_INT 0
75695: PUSH
75696: LD_INT 0
75698: PUSH
75699: LD_INT 0
75701: PUSH
75702: LD_INT 0
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: LIST
75709: LIST
75710: LIST
75711: LIST
75712: LIST
75713: PUSH
75714: LD_STRING E
75716: PUSH
75717: LD_INT 0
75719: PUSH
75720: LD_INT 0
75722: PUSH
75723: LD_VAR 0 3
75727: PUSH
75728: LD_INT 0
75730: PUSH
75731: LD_INT 0
75733: PUSH
75734: LD_INT 0
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: PUSH
75746: EMPTY
75747: LIST
75748: LIST
75749: PPUSH
75750: CALL_OW 446
// end ;
75754: LD_VAR 0 2
75758: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75759: LD_INT 0
75761: PPUSH
75762: PPUSH
// if not driver or not IsInUnit ( driver ) then
75763: LD_VAR 0 1
75767: NOT
75768: PUSH
75769: LD_VAR 0 1
75773: PPUSH
75774: CALL_OW 310
75778: NOT
75779: OR
75780: IFFALSE 75784
// exit ;
75782: GO 75874
// vehicle := IsInUnit ( driver ) ;
75784: LD_ADDR_VAR 0 3
75788: PUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL_OW 310
75798: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75799: LD_VAR 0 1
75803: PPUSH
75804: LD_STRING \
75806: PUSH
75807: LD_INT 0
75809: PUSH
75810: LD_INT 0
75812: PUSH
75813: LD_INT 0
75815: PUSH
75816: LD_INT 0
75818: PUSH
75819: LD_INT 0
75821: PUSH
75822: LD_INT 0
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: PUSH
75834: LD_STRING E
75836: PUSH
75837: LD_INT 0
75839: PUSH
75840: LD_INT 0
75842: PUSH
75843: LD_VAR 0 3
75847: PUSH
75848: LD_INT 0
75850: PUSH
75851: LD_INT 0
75853: PUSH
75854: LD_INT 0
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: PPUSH
75870: CALL_OW 447
// end ;
75874: LD_VAR 0 2
75878: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75879: LD_INT 0
75881: PPUSH
75882: PPUSH
75883: PPUSH
// tmp := [ ] ;
75884: LD_ADDR_VAR 0 5
75888: PUSH
75889: EMPTY
75890: ST_TO_ADDR
// for i in units do
75891: LD_ADDR_VAR 0 4
75895: PUSH
75896: LD_VAR 0 1
75900: PUSH
75901: FOR_IN
75902: IFFALSE 75940
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75904: LD_ADDR_VAR 0 5
75908: PUSH
75909: LD_VAR 0 5
75913: PPUSH
75914: LD_VAR 0 5
75918: PUSH
75919: LD_INT 1
75921: PLUS
75922: PPUSH
75923: LD_VAR 0 4
75927: PPUSH
75928: CALL_OW 256
75932: PPUSH
75933: CALL_OW 2
75937: ST_TO_ADDR
75938: GO 75901
75940: POP
75941: POP
// if not tmp then
75942: LD_VAR 0 5
75946: NOT
75947: IFFALSE 75951
// exit ;
75949: GO 75999
// if asc then
75951: LD_VAR 0 2
75955: IFFALSE 75979
// result := SortListByListAsc ( units , tmp ) else
75957: LD_ADDR_VAR 0 3
75961: PUSH
75962: LD_VAR 0 1
75966: PPUSH
75967: LD_VAR 0 5
75971: PPUSH
75972: CALL_OW 76
75976: ST_TO_ADDR
75977: GO 75999
// result := SortListByListDesc ( units , tmp ) ;
75979: LD_ADDR_VAR 0 3
75983: PUSH
75984: LD_VAR 0 1
75988: PPUSH
75989: LD_VAR 0 5
75993: PPUSH
75994: CALL_OW 77
75998: ST_TO_ADDR
// end ;
75999: LD_VAR 0 3
76003: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76004: LD_INT 0
76006: PPUSH
76007: PPUSH
// task := GetTaskList ( mech ) ;
76008: LD_ADDR_VAR 0 4
76012: PUSH
76013: LD_VAR 0 1
76017: PPUSH
76018: CALL_OW 437
76022: ST_TO_ADDR
// if not task then
76023: LD_VAR 0 4
76027: NOT
76028: IFFALSE 76032
// exit ;
76030: GO 76074
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76032: LD_ADDR_VAR 0 3
76036: PUSH
76037: LD_VAR 0 4
76041: PUSH
76042: LD_INT 1
76044: ARRAY
76045: PUSH
76046: LD_INT 1
76048: ARRAY
76049: PUSH
76050: LD_STRING r
76052: EQUAL
76053: PUSH
76054: LD_VAR 0 4
76058: PUSH
76059: LD_INT 1
76061: ARRAY
76062: PUSH
76063: LD_INT 4
76065: ARRAY
76066: PUSH
76067: LD_VAR 0 2
76071: EQUAL
76072: AND
76073: ST_TO_ADDR
// end ;
76074: LD_VAR 0 3
76078: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76079: LD_INT 0
76081: PPUSH
// SetDir ( unit , d ) ;
76082: LD_VAR 0 1
76086: PPUSH
76087: LD_VAR 0 4
76091: PPUSH
76092: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76096: LD_VAR 0 1
76100: PPUSH
76101: LD_VAR 0 2
76105: PPUSH
76106: LD_VAR 0 3
76110: PPUSH
76111: LD_VAR 0 5
76115: PPUSH
76116: CALL_OW 48
// end ;
76120: LD_VAR 0 6
76124: RET
// export function ToNaturalNumber ( number ) ; begin
76125: LD_INT 0
76127: PPUSH
// result := number div 1 ;
76128: LD_ADDR_VAR 0 2
76132: PUSH
76133: LD_VAR 0 1
76137: PUSH
76138: LD_INT 1
76140: DIV
76141: ST_TO_ADDR
// if number < 0 then
76142: LD_VAR 0 1
76146: PUSH
76147: LD_INT 0
76149: LESS
76150: IFFALSE 76160
// result := 0 ;
76152: LD_ADDR_VAR 0 2
76156: PUSH
76157: LD_INT 0
76159: ST_TO_ADDR
// end ;
76160: LD_VAR 0 2
76164: RET
// export function SortByClass ( units , class ) ; var un ; begin
76165: LD_INT 0
76167: PPUSH
76168: PPUSH
// if not units or not class then
76169: LD_VAR 0 1
76173: NOT
76174: PUSH
76175: LD_VAR 0 2
76179: NOT
76180: OR
76181: IFFALSE 76185
// exit ;
76183: GO 76280
// result := [ ] ;
76185: LD_ADDR_VAR 0 3
76189: PUSH
76190: EMPTY
76191: ST_TO_ADDR
// for un in units do
76192: LD_ADDR_VAR 0 4
76196: PUSH
76197: LD_VAR 0 1
76201: PUSH
76202: FOR_IN
76203: IFFALSE 76278
// if GetClass ( un ) = class then
76205: LD_VAR 0 4
76209: PPUSH
76210: CALL_OW 257
76214: PUSH
76215: LD_VAR 0 2
76219: EQUAL
76220: IFFALSE 76247
// result := Insert ( result , 1 , un ) else
76222: LD_ADDR_VAR 0 3
76226: PUSH
76227: LD_VAR 0 3
76231: PPUSH
76232: LD_INT 1
76234: PPUSH
76235: LD_VAR 0 4
76239: PPUSH
76240: CALL_OW 2
76244: ST_TO_ADDR
76245: GO 76276
// result := Replace ( result , result + 1 , un ) ;
76247: LD_ADDR_VAR 0 3
76251: PUSH
76252: LD_VAR 0 3
76256: PPUSH
76257: LD_VAR 0 3
76261: PUSH
76262: LD_INT 1
76264: PLUS
76265: PPUSH
76266: LD_VAR 0 4
76270: PPUSH
76271: CALL_OW 1
76275: ST_TO_ADDR
76276: GO 76202
76278: POP
76279: POP
// end ;
76280: LD_VAR 0 3
76284: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76285: LD_INT 0
76287: PPUSH
76288: PPUSH
76289: PPUSH
76290: PPUSH
76291: PPUSH
76292: PPUSH
76293: PPUSH
// result := [ ] ;
76294: LD_ADDR_VAR 0 4
76298: PUSH
76299: EMPTY
76300: ST_TO_ADDR
// if x - r < 0 then
76301: LD_VAR 0 1
76305: PUSH
76306: LD_VAR 0 3
76310: MINUS
76311: PUSH
76312: LD_INT 0
76314: LESS
76315: IFFALSE 76327
// min_x := 0 else
76317: LD_ADDR_VAR 0 8
76321: PUSH
76322: LD_INT 0
76324: ST_TO_ADDR
76325: GO 76343
// min_x := x - r ;
76327: LD_ADDR_VAR 0 8
76331: PUSH
76332: LD_VAR 0 1
76336: PUSH
76337: LD_VAR 0 3
76341: MINUS
76342: ST_TO_ADDR
// if y - r < 0 then
76343: LD_VAR 0 2
76347: PUSH
76348: LD_VAR 0 3
76352: MINUS
76353: PUSH
76354: LD_INT 0
76356: LESS
76357: IFFALSE 76369
// min_y := 0 else
76359: LD_ADDR_VAR 0 7
76363: PUSH
76364: LD_INT 0
76366: ST_TO_ADDR
76367: GO 76385
// min_y := y - r ;
76369: LD_ADDR_VAR 0 7
76373: PUSH
76374: LD_VAR 0 2
76378: PUSH
76379: LD_VAR 0 3
76383: MINUS
76384: ST_TO_ADDR
// max_x := x + r ;
76385: LD_ADDR_VAR 0 9
76389: PUSH
76390: LD_VAR 0 1
76394: PUSH
76395: LD_VAR 0 3
76399: PLUS
76400: ST_TO_ADDR
// max_y := y + r ;
76401: LD_ADDR_VAR 0 10
76405: PUSH
76406: LD_VAR 0 2
76410: PUSH
76411: LD_VAR 0 3
76415: PLUS
76416: ST_TO_ADDR
// for _x = min_x to max_x do
76417: LD_ADDR_VAR 0 5
76421: PUSH
76422: DOUBLE
76423: LD_VAR 0 8
76427: DEC
76428: ST_TO_ADDR
76429: LD_VAR 0 9
76433: PUSH
76434: FOR_TO
76435: IFFALSE 76536
// for _y = min_y to max_y do
76437: LD_ADDR_VAR 0 6
76441: PUSH
76442: DOUBLE
76443: LD_VAR 0 7
76447: DEC
76448: ST_TO_ADDR
76449: LD_VAR 0 10
76453: PUSH
76454: FOR_TO
76455: IFFALSE 76532
// begin if not ValidHex ( _x , _y ) then
76457: LD_VAR 0 5
76461: PPUSH
76462: LD_VAR 0 6
76466: PPUSH
76467: CALL_OW 488
76471: NOT
76472: IFFALSE 76476
// continue ;
76474: GO 76454
// if GetResourceTypeXY ( _x , _y ) then
76476: LD_VAR 0 5
76480: PPUSH
76481: LD_VAR 0 6
76485: PPUSH
76486: CALL_OW 283
76490: IFFALSE 76530
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76492: LD_ADDR_VAR 0 4
76496: PUSH
76497: LD_VAR 0 4
76501: PPUSH
76502: LD_VAR 0 4
76506: PUSH
76507: LD_INT 1
76509: PLUS
76510: PPUSH
76511: LD_VAR 0 5
76515: PUSH
76516: LD_VAR 0 6
76520: PUSH
76521: EMPTY
76522: LIST
76523: LIST
76524: PPUSH
76525: CALL_OW 1
76529: ST_TO_ADDR
// end ;
76530: GO 76454
76532: POP
76533: POP
76534: GO 76434
76536: POP
76537: POP
// end ;
76538: LD_VAR 0 4
76542: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
76543: LD_INT 0
76545: PPUSH
76546: PPUSH
76547: PPUSH
76548: PPUSH
76549: PPUSH
76550: PPUSH
// if not units then
76551: LD_VAR 0 1
76555: NOT
76556: IFFALSE 76560
// exit ;
76558: GO 76961
// result := UnitFilter ( units , [ f_ok ] ) ;
76560: LD_ADDR_VAR 0 3
76564: PUSH
76565: LD_VAR 0 1
76569: PPUSH
76570: LD_INT 50
76572: PUSH
76573: EMPTY
76574: LIST
76575: PPUSH
76576: CALL_OW 72
76580: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76581: LD_ADDR_VAR 0 7
76585: PUSH
76586: LD_VAR 0 1
76590: PUSH
76591: LD_INT 1
76593: ARRAY
76594: PPUSH
76595: CALL_OW 255
76599: ST_TO_ADDR
// if not result then
76600: LD_VAR 0 3
76604: NOT
76605: IFFALSE 76609
// exit ;
76607: GO 76961
// for i in result do
76609: LD_ADDR_VAR 0 4
76613: PUSH
76614: LD_VAR 0 3
76618: PUSH
76619: FOR_IN
76620: IFFALSE 76959
// begin tag := GetTag ( i ) + 1 ;
76622: LD_ADDR_VAR 0 8
76626: PUSH
76627: LD_VAR 0 4
76631: PPUSH
76632: CALL_OW 110
76636: PUSH
76637: LD_INT 1
76639: PLUS
76640: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76641: LD_ADDR_VAR 0 6
76645: PUSH
76646: LD_VAR 0 4
76650: PPUSH
76651: CALL_OW 250
76655: PPUSH
76656: LD_VAR 0 4
76660: PPUSH
76661: CALL_OW 251
76665: PPUSH
76666: LD_INT 6
76668: PPUSH
76669: CALL 76285 0 3
76673: ST_TO_ADDR
// if cr then
76674: LD_VAR 0 6
76678: IFFALSE 76717
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76680: LD_VAR 0 4
76684: PPUSH
76685: LD_VAR 0 6
76689: PUSH
76690: LD_INT 1
76692: ARRAY
76693: PUSH
76694: LD_INT 1
76696: ARRAY
76697: PPUSH
76698: LD_VAR 0 6
76702: PUSH
76703: LD_INT 1
76705: ARRAY
76706: PUSH
76707: LD_INT 2
76709: ARRAY
76710: PPUSH
76711: CALL_OW 116
76715: GO 76957
// if path > tag then
76717: LD_VAR 0 2
76721: PUSH
76722: LD_VAR 0 8
76726: GREATER
76727: IFFALSE 76905
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
76729: LD_ADDR_VAR 0 5
76733: PUSH
76734: LD_INT 81
76736: PUSH
76737: LD_VAR 0 7
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: PUSH
76746: LD_INT 91
76748: PUSH
76749: LD_VAR 0 4
76753: PUSH
76754: LD_INT 12
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: LIST
76761: PUSH
76762: EMPTY
76763: LIST
76764: LIST
76765: PPUSH
76766: CALL_OW 69
76770: ST_TO_ADDR
// if enemy then
76771: LD_VAR 0 5
76775: IFFALSE 76803
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76777: LD_VAR 0 4
76781: PPUSH
76782: LD_VAR 0 5
76786: PPUSH
76787: LD_VAR 0 4
76791: PPUSH
76792: CALL_OW 74
76796: PPUSH
76797: CALL_OW 115
76801: GO 76903
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76803: LD_VAR 0 4
76807: PPUSH
76808: LD_VAR 0 2
76812: PUSH
76813: LD_VAR 0 8
76817: ARRAY
76818: PUSH
76819: LD_INT 1
76821: ARRAY
76822: PPUSH
76823: LD_VAR 0 2
76827: PUSH
76828: LD_VAR 0 8
76832: ARRAY
76833: PUSH
76834: LD_INT 2
76836: ARRAY
76837: PPUSH
76838: CALL_OW 297
76842: PUSH
76843: LD_INT 6
76845: GREATER
76846: IFFALSE 76889
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76848: LD_VAR 0 4
76852: PPUSH
76853: LD_VAR 0 2
76857: PUSH
76858: LD_VAR 0 8
76862: ARRAY
76863: PUSH
76864: LD_INT 1
76866: ARRAY
76867: PPUSH
76868: LD_VAR 0 2
76872: PUSH
76873: LD_VAR 0 8
76877: ARRAY
76878: PUSH
76879: LD_INT 2
76881: ARRAY
76882: PPUSH
76883: CALL_OW 114
76887: GO 76903
// SetTag ( i , tag ) ;
76889: LD_VAR 0 4
76893: PPUSH
76894: LD_VAR 0 8
76898: PPUSH
76899: CALL_OW 109
// end else
76903: GO 76957
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76905: LD_ADDR_VAR 0 5
76909: PUSH
76910: LD_INT 81
76912: PUSH
76913: LD_VAR 0 7
76917: PUSH
76918: EMPTY
76919: LIST
76920: LIST
76921: PPUSH
76922: CALL_OW 69
76926: ST_TO_ADDR
// if enemy then
76927: LD_VAR 0 5
76931: IFFALSE 76957
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76933: LD_VAR 0 4
76937: PPUSH
76938: LD_VAR 0 5
76942: PPUSH
76943: LD_VAR 0 4
76947: PPUSH
76948: CALL_OW 74
76952: PPUSH
76953: CALL_OW 115
// end ; end ;
76957: GO 76619
76959: POP
76960: POP
// end ; end_of_file
76961: LD_VAR 0 3
76965: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76966: LD_VAR 0 1
76970: PUSH
76971: LD_INT 200
76973: DOUBLE
76974: GREATEREQUAL
76975: IFFALSE 76983
76977: LD_INT 299
76979: DOUBLE
76980: LESSEQUAL
76981: IFTRUE 76985
76983: GO 77017
76985: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76986: LD_VAR 0 1
76990: PPUSH
76991: LD_VAR 0 2
76995: PPUSH
76996: LD_VAR 0 3
77000: PPUSH
77001: LD_VAR 0 4
77005: PPUSH
77006: LD_VAR 0 5
77010: PPUSH
77011: CALL 33528 0 5
77015: GO 77094
77017: LD_INT 300
77019: DOUBLE
77020: GREATEREQUAL
77021: IFFALSE 77029
77023: LD_INT 399
77025: DOUBLE
77026: LESSEQUAL
77027: IFTRUE 77031
77029: GO 77093
77031: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77032: LD_VAR 0 1
77036: PPUSH
77037: LD_VAR 0 2
77041: PPUSH
77042: LD_VAR 0 3
77046: PPUSH
77047: LD_VAR 0 4
77051: PPUSH
77052: LD_VAR 0 5
77056: PPUSH
77057: LD_VAR 0 6
77061: PPUSH
77062: LD_VAR 0 7
77066: PPUSH
77067: LD_VAR 0 8
77071: PPUSH
77072: LD_VAR 0 9
77076: PPUSH
77077: LD_VAR 0 10
77081: PPUSH
77082: LD_VAR 0 11
77086: PPUSH
77087: CALL 31416 0 11
77091: GO 77094
77093: POP
// end ;
77094: PPOPN 11
77096: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77097: LD_VAR 0 1
77101: PPUSH
77102: LD_VAR 0 2
77106: PPUSH
77107: LD_VAR 0 3
77111: PPUSH
77112: LD_VAR 0 4
77116: PPUSH
77117: LD_VAR 0 5
77121: PPUSH
77122: CALL 33510 0 5
// end ; end_of_file
77126: PPOPN 5
77128: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77129: LD_VAR 0 1
77133: PPUSH
77134: LD_VAR 0 2
77138: PPUSH
77139: LD_VAR 0 3
77143: PPUSH
77144: LD_VAR 0 4
77148: PPUSH
77149: LD_VAR 0 5
77153: PPUSH
77154: LD_VAR 0 6
77158: PPUSH
77159: CALL 20224 0 6
// end ;
77163: PPOPN 6
77165: END
