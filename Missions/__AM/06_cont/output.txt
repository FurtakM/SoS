// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// unitLost = 0 ;
 178: LD_ADDR_EXP 30
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 186: LD_ADDR_EXP 31
 190: PUSH
 191: EMPTY
 192: ST_TO_ADDR
// russianTanks = [ ] ;
 193: LD_ADDR_EXP 36
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 200: LD_ADDR_EXP 37
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// disableHealAI = 0 ;
 207: LD_ADDR_EXP 33
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// strings = [ ] ;
 215: LD_ADDR_EXP 27
 219: PUSH
 220: EMPTY
 221: ST_TO_ADDR
// PrepareDifficulty ;
 222: CALL 5709 0 0
// PrepareNature ;
 226: CALL 21349 0 0
// PrepareRussian ;
 230: CALL 4816 0 0
// PrepareVehicles ;
 234: CALL 1471 0 0
// PrepareHeroes ;
 238: CALL 489 0 0
// PrepareOthers ;
 242: CALL 1892 0 0
// PreparePlayerApemans ;
 246: CALL 2034 0 0
// end ;
 250: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 251: LD_EXP 42
 255: PUSH
 256: LD_INT 1
 258: EQUAL
 259: IFFALSE 486
 261: GO 263
 263: DISABLE
 264: LD_INT 0
 266: PPUSH
// begin enable ;
 267: ENABLE
// fogoff ( true ) ;
 268: LD_INT 1
 270: PPUSH
 271: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 275: LD_ADDR_VAR 0 1
 279: PUSH
 280: LD_INT 22
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 21
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PPUSH
 304: CALL_OW 69
 308: PUSH
 309: FOR_IN
 310: IFFALSE 326
// SetLives ( i , 1000 ) ;
 312: LD_VAR 0 1
 316: PPUSH
 317: LD_INT 1000
 319: PPUSH
 320: CALL_OW 234
 324: GO 309
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 30
 345: PUSH
 346: LD_INT 0
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PPUSH
 357: CALL_OW 69
 361: PUSH
 362: FOR_IN
 363: IFFALSE 387
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 365: LD_VAR 0 1
 369: PPUSH
 370: CALL_OW 274
 374: PPUSH
 375: LD_INT 1
 377: PPUSH
 378: LD_INT 9999
 380: PPUSH
 381: CALL_OW 277
 385: GO 362
 387: POP
 388: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 389: LD_ADDR_VAR 0 1
 393: PUSH
 394: LD_INT 22
 396: PUSH
 397: LD_INT 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 30
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 2
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// if IsSelected ( rudepo ) then
 450: LD_INT 2
 452: PPUSH
 453: CALL_OW 306
 457: IFFALSE 467
// your_side = 3 ;
 459: LD_ADDR_OWVAR 2
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// if IsSelected ( JMM ) then
 467: LD_EXP 1
 471: PPUSH
 472: CALL_OW 306
 476: IFFALSE 486
// your_side = 1 ;
 478: LD_ADDR_OWVAR 2
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; var veh ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
// uc_side = 1 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// uc_nation = 1 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 1
 508: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 509: LD_ADDR_EXP 1
 513: PUSH
 514: LD_STRING JMM
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL 5193 0 2
 524: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 525: LD_ADDR_EXP 14
 529: PUSH
 530: LD_STRING Harisson
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL 5193 0 2
 540: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 541: LD_ADDR_EXP 10
 545: PUSH
 546: LD_STRING DeltaDoctor
 548: PPUSH
 549: CALL_OW 34
 553: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 554: LD_ADDR_VAR 0 2
 558: PUSH
 559: LD_INT 22
 561: PUSH
 562: LD_INT 1
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 21
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 58
 581: PUSH
 582: EMPTY
 583: LIST
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PPUSH
 590: CALL_OW 69
 594: ST_TO_ADDR
// if veh > 0 then
 595: LD_VAR 0 2
 599: PUSH
 600: LD_INT 0
 602: GREATER
 603: IFFALSE 625
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 605: LD_EXP 1
 609: PPUSH
 610: LD_VAR 0 2
 614: PUSH
 615: LD_INT 1
 617: ARRAY
 618: PPUSH
 619: CALL_OW 52
// end else
 623: GO 640
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 625: LD_EXP 1
 629: PPUSH
 630: LD_INT 2
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 640: LD_STRING LisaIn06
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: CALL_OW 30
 650: PUSH
 651: LD_INT 1
 653: EQUAL
 654: IFFALSE 758
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: LD_INT 22
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 58
 683: PUSH
 684: EMPTY
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 697: LD_ADDR_EXP 2
 701: PUSH
 702: LD_STRING Lisa
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5193 0 2
 712: ST_TO_ADDR
// if veh > 0 then
 713: LD_VAR 0 2
 717: PUSH
 718: LD_INT 0
 720: GREATER
 721: IFFALSE 743
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 723: LD_EXP 2
 727: PPUSH
 728: LD_VAR 0 2
 732: PUSH
 733: LD_INT 1
 735: ARRAY
 736: PPUSH
 737: CALL_OW 52
// end else
 741: GO 758
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 743: LD_EXP 2
 747: PPUSH
 748: LD_INT 2
 750: PPUSH
 751: LD_INT 0
 753: PPUSH
 754: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 758: LD_STRING BobbyIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: PUSH
 769: LD_INT 1
 771: EQUAL
 772: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 1
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 21
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 58
 801: PUSH
 802: EMPTY
 803: LIST
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: LIST
 809: PPUSH
 810: CALL_OW 69
 814: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 815: LD_ADDR_EXP 3
 819: PUSH
 820: LD_STRING Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 5193 0 2
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 841: LD_EXP 3
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 861: LD_EXP 3
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 876: LD_STRING CyrusIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 994
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 933: LD_ADDR_EXP 4
 937: PUSH
 938: LD_STRING Cyrus
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: CALL 5193 0 2
 948: ST_TO_ADDR
// if veh > 0 then
 949: LD_VAR 0 2
 953: PUSH
 954: LD_INT 0
 956: GREATER
 957: IFFALSE 979
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 959: LD_EXP 4
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: CALL_OW 52
// end else
 977: GO 994
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 979: LD_EXP 4
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 994: LD_STRING FrankIn06
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 30
1004: PUSH
1005: LD_INT 1
1007: EQUAL
1008: IFFALSE 1112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 21
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 58
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1051: LD_ADDR_EXP 5
1055: PUSH
1056: LD_STRING Frank
1058: PPUSH
1059: LD_INT 1
1061: PPUSH
1062: CALL 5193 0 2
1066: ST_TO_ADDR
// if veh > 0 then
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 0
1074: GREATER
1075: IFFALSE 1097
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1077: LD_EXP 5
1081: PPUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 1
1089: ARRAY
1090: PPUSH
1091: CALL_OW 52
// end else
1095: GO 1112
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1097: LD_EXP 5
1101: PPUSH
1102: LD_INT 2
1104: PPUSH
1105: LD_INT 0
1107: PPUSH
1108: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1112: LD_STRING BrownIn06
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 30
1122: PUSH
1123: LD_INT 1
1125: EQUAL
1126: IFFALSE 1230
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 21
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 58
1155: PUSH
1156: EMPTY
1157: LIST
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PPUSH
1164: CALL_OW 69
1168: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1169: LD_ADDR_EXP 6
1173: PUSH
1174: LD_STRING Brown
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 5193 0 2
1184: ST_TO_ADDR
// if veh > 0 then
1185: LD_VAR 0 2
1189: PUSH
1190: LD_INT 0
1192: GREATER
1193: IFFALSE 1215
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1195: LD_EXP 6
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 1
1207: ARRAY
1208: PPUSH
1209: CALL_OW 52
// end else
1213: GO 1230
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1215: LD_EXP 6
1219: PPUSH
1220: LD_INT 2
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1230: LD_STRING DonaldsonIn06
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 30
1240: PUSH
1241: LD_INT 1
1243: EQUAL
1244: IFFALSE 1348
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1246: LD_ADDR_VAR 0 2
1250: PUSH
1251: LD_INT 22
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 2
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1287: LD_ADDR_EXP 7
1291: PUSH
1292: LD_STRING Donaldson
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL 5193 0 2
1302: ST_TO_ADDR
// if veh > 0 then
1303: LD_VAR 0 2
1307: PUSH
1308: LD_INT 0
1310: GREATER
1311: IFFALSE 1333
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1313: LD_EXP 7
1317: PPUSH
1318: LD_VAR 0 2
1322: PUSH
1323: LD_INT 1
1325: ARRAY
1326: PPUSH
1327: CALL_OW 52
// end else
1331: GO 1348
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1333: LD_EXP 7
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1348: LD_STRING GladstoneIn06
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 30
1358: PUSH
1359: LD_INT 1
1361: EQUAL
1362: IFFALSE 1466
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1364: LD_ADDR_VAR 0 2
1368: PUSH
1369: LD_INT 22
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 21
1381: PUSH
1382: LD_INT 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 58
1391: PUSH
1392: EMPTY
1393: LIST
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: PPUSH
1400: CALL_OW 69
1404: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1405: LD_ADDR_EXP 8
1409: PUSH
1410: LD_STRING Gladstone
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: CALL 5193 0 2
1420: ST_TO_ADDR
// if veh > 0 then
1421: LD_VAR 0 2
1425: PUSH
1426: LD_INT 0
1428: GREATER
1429: IFFALSE 1451
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1431: LD_EXP 8
1435: PPUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 1
1443: ARRAY
1444: PPUSH
1445: CALL_OW 52
// end else
1449: GO 1466
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1451: LD_EXP 8
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 49
// end ; end ; end ;
1466: LD_VAR 0 1
1470: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1471: LD_INT 0
1473: PPUSH
1474: PPUSH
1475: PPUSH
1476: PPUSH
1477: PPUSH
1478: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1479: LD_ADDR_VAR 0 5
1483: PUSH
1484: LD_STRING 06_VehiclesIn06_1
1486: PPUSH
1487: EMPTY
1488: PPUSH
1489: CALL_OW 30
1493: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1494: LD_ADDR_EXP 40
1498: PUSH
1499: LD_STRING 06_ResourcesInCargo06_1
1501: PPUSH
1502: EMPTY
1503: PPUSH
1504: CALL_OW 30
1508: ST_TO_ADDR
// cargoList = [ ] ;
1509: LD_ADDR_VAR 0 6
1513: PUSH
1514: EMPTY
1515: ST_TO_ADDR
// uc_side = 1 ;
1516: LD_ADDR_OWVAR 20
1520: PUSH
1521: LD_INT 1
1523: ST_TO_ADDR
// if vehicles > 0 then
1524: LD_VAR 0 5
1528: PUSH
1529: LD_INT 0
1531: GREATER
1532: IFFALSE 1887
// begin for i := 1 to vehicles do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: DOUBLE
1540: LD_INT 1
1542: DEC
1543: ST_TO_ADDR
1544: LD_VAR 0 5
1548: PUSH
1549: FOR_TO
1550: IFFALSE 1699
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: LD_VAR 0 2
1566: ARRAY
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1572: LD_ADDR_OWVAR 37
1576: PUSH
1577: LD_VAR 0 5
1581: PUSH
1582: LD_VAR 0 2
1586: ARRAY
1587: PUSH
1588: LD_INT 2
1590: ARRAY
1591: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1592: LD_ADDR_OWVAR 39
1596: PUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_VAR 0 2
1606: ARRAY
1607: PUSH
1608: LD_INT 3
1610: ARRAY
1611: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1612: LD_ADDR_OWVAR 38
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_VAR 0 2
1626: ARRAY
1627: PUSH
1628: LD_INT 4
1630: ARRAY
1631: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1632: LD_ADDR_OWVAR 40
1636: PUSH
1637: LD_VAR 0 5
1641: PUSH
1642: LD_VAR 0 2
1646: ARRAY
1647: PUSH
1648: LD_INT 5
1650: ARRAY
1651: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1652: LD_ADDR_OWVAR 41
1656: PUSH
1657: LD_INT 40
1659: ST_TO_ADDR
// veh = CreateVehicle ;
1660: LD_ADDR_VAR 0 4
1664: PUSH
1665: CALL_OW 45
1669: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_INT 3
1677: PPUSH
1678: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1682: LD_VAR 0 4
1686: PPUSH
1687: LD_INT 2
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: CALL_OW 49
// end ;
1697: GO 1549
1699: POP
1700: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1701: LD_ADDR_VAR 0 6
1705: PUSH
1706: LD_INT 22
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 21
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 34
1728: PUSH
1729: LD_INT 12
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: PPUSH
1741: CALL_OW 69
1745: ST_TO_ADDR
// if cargoList > 0 then
1746: LD_VAR 0 6
1750: PUSH
1751: LD_INT 0
1753: GREATER
1754: IFFALSE 1887
// for i = 1 to cargoList do
1756: LD_ADDR_VAR 0 2
1760: PUSH
1761: DOUBLE
1762: LD_INT 1
1764: DEC
1765: ST_TO_ADDR
1766: LD_VAR 0 6
1770: PUSH
1771: FOR_TO
1772: IFFALSE 1885
// begin if resources > 0 then
1774: LD_EXP 40
1778: PUSH
1779: LD_INT 0
1781: GREATER
1782: IFFALSE 1883
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1784: LD_VAR 0 6
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_EXP 40
1802: PUSH
1803: LD_VAR 0 2
1807: ARRAY
1808: PUSH
1809: LD_INT 1
1811: ARRAY
1812: PPUSH
1813: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1817: LD_VAR 0 6
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PPUSH
1828: LD_INT 2
1830: PPUSH
1831: LD_EXP 40
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PUSH
1842: LD_INT 2
1844: ARRAY
1845: PPUSH
1846: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1850: LD_VAR 0 6
1854: PUSH
1855: LD_VAR 0 2
1859: ARRAY
1860: PPUSH
1861: LD_INT 3
1863: PPUSH
1864: LD_EXP 40
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PUSH
1875: LD_INT 3
1877: ARRAY
1878: PPUSH
1879: CALL_OW 291
// end ; end ;
1883: GO 1771
1885: POP
1886: POP
// end ; end ;
1887: LD_VAR 0 1
1891: RET
// export function PrepareOthers ; var i , veh ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// uc_side = 1 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// uc_nation = 1 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1913: LD_ADDR_EXP 11
1917: PUSH
1918: LD_STRING OthersIn06
1920: PPUSH
1921: CALL_OW 31
1925: ST_TO_ADDR
// for i in others do
1926: LD_ADDR_VAR 0 2
1930: PUSH
1931: LD_EXP 11
1935: PUSH
1936: FOR_IN
1937: IFFALSE 2027
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1939: LD_ADDR_VAR 0 3
1943: PUSH
1944: LD_INT 22
1946: PUSH
1947: LD_INT 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 21
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 58
1966: PUSH
1967: EMPTY
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PPUSH
1975: CALL_OW 69
1979: ST_TO_ADDR
// if veh > 0 then
1980: LD_VAR 0 3
1984: PUSH
1985: LD_INT 0
1987: GREATER
1988: IFFALSE 2010
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1990: LD_VAR 0 2
1994: PPUSH
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 1
2002: ARRAY
2003: PPUSH
2004: CALL_OW 52
// end else
2008: GO 2025
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2010: LD_VAR 0 2
2014: PPUSH
2015: LD_INT 2
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// end ; end ;
2025: GO 1936
2027: POP
2028: POP
// end ;
2029: LD_VAR 0 1
2033: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2034: LD_INT 0
2036: PPUSH
2037: PPUSH
2038: PPUSH
// uc_side = 1 ;
2039: LD_ADDR_OWVAR 20
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// uc_nation = 0 ;
2047: LD_ADDR_OWVAR 21
2051: PUSH
2052: LD_INT 0
2054: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2055: LD_ADDR_EXP 12
2059: PUSH
2060: LD_STRING ApeIn06
2062: PPUSH
2063: CALL_OW 31
2067: ST_TO_ADDR
// for i in ape do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_EXP 12
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2098
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_INT 2
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: GO 2078
2098: POP
2099: POP
// end ;
2100: LD_VAR 0 1
2104: RET
// export function PrepareDenis ; begin
2105: LD_INT 0
2107: PPUSH
// uc_side = 1 ;
2108: LD_ADDR_OWVAR 20
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// uc_nation = 1 ;
2116: LD_ADDR_OWVAR 21
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2124: LD_ADDR_EXP 9
2128: PUSH
2129: LD_STRING Denis
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL 5193 0 2
2139: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2140: LD_EXP 9
2144: PPUSH
2145: LD_INT 13
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2155: LD_EXP 9
2159: PPUSH
2160: LD_INT 4
2162: PPUSH
2163: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2167: LD_EXP 9
2171: PPUSH
2172: LD_INT 750
2174: PPUSH
2175: CALL_OW 234
// end ;
2179: LD_VAR 0 1
2183: RET
// export function HarrisonSupport ; var un , veh ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
// uc_side = 1 ;
2189: LD_ADDR_OWVAR 20
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// uc_nation = 1 ;
2197: LD_ADDR_OWVAR 21
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// vc_engine = 1 ;
2205: LD_ADDR_OWVAR 39
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// vc_control = 1 ;
2213: LD_ADDR_OWVAR 38
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2221: LD_ADDR_OWVAR 40
2225: PUSH
2226: LD_INT 4
2228: PUSH
2229: LD_INT 4
2231: PUSH
2232: LD_INT 2
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: LD_OWVAR 67
2244: ARRAY
2245: ST_TO_ADDR
// vc_chassis = 2 ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 2
2253: ST_TO_ADDR
// veh = CreateVehicle ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: CALL_OW 45
2263: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2276: LD_VAR 0 3
2280: PPUSH
2281: LD_INT 3
2283: PPUSH
2284: LD_INT 0
2286: PPUSH
2287: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 50
2298: PPUSH
2299: CALL_OW 240
// hc_class := 2 ;
2303: LD_ADDR_OWVAR 28
2307: PUSH
2308: LD_INT 2
2310: ST_TO_ADDR
// hc_sex := sex_male ;
2311: LD_ADDR_OWVAR 27
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2319: LD_ADDR_OWVAR 33
2323: PUSH
2324: LD_STRING SecondCharsGal
2326: ST_TO_ADDR
// hc_face_number := 52 ;
2327: LD_ADDR_OWVAR 34
2331: PUSH
2332: LD_INT 52
2334: ST_TO_ADDR
// hc_name := Craig Brown ;
2335: LD_ADDR_OWVAR 26
2339: PUSH
2340: LD_STRING Craig Brown
2342: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2343: LD_ADDR_OWVAR 29
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 10
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2358: LD_ADDR_OWVAR 30
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 0
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2381: LD_ADDR_OWVAR 31
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 3
2391: PUSH
2392: LD_INT 0
2394: PUSH
2395: LD_INT 0
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2404: LD_ADDR_EXP 17
2408: PUSH
2409: CALL_OW 44
2413: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2414: LD_EXP 17
2418: PPUSH
2419: LD_VAR 0 3
2423: PPUSH
2424: CALL_OW 52
// vc_engine = 1 ;
2428: LD_ADDR_OWVAR 39
2432: PUSH
2433: LD_INT 1
2435: ST_TO_ADDR
// vc_control = 1 ;
2436: LD_ADDR_OWVAR 38
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2444: LD_ADDR_OWVAR 40
2448: PUSH
2449: LD_INT 4
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_OWVAR 67
2467: ARRAY
2468: ST_TO_ADDR
// vc_chassis = 2 ;
2469: LD_ADDR_OWVAR 37
2473: PUSH
2474: LD_INT 2
2476: ST_TO_ADDR
// veh = CreateVehicle ;
2477: LD_ADDR_VAR 0 3
2481: PUSH
2482: CALL_OW 45
2486: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2514: LD_VAR 0 3
2518: PPUSH
2519: LD_INT 50
2521: PPUSH
2522: CALL_OW 240
// hc_class := 1 ;
2526: LD_ADDR_OWVAR 28
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// hc_sex := sex_female ;
2534: LD_ADDR_OWVAR 27
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2542: LD_ADDR_OWVAR 33
2546: PUSH
2547: LD_STRING SecondCharsGal
2549: ST_TO_ADDR
// hc_face_number := 45 ;
2550: LD_ADDR_OWVAR 34
2554: PUSH
2555: LD_INT 45
2557: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2558: LD_ADDR_OWVAR 29
2562: PUSH
2563: LD_INT 11
2565: PUSH
2566: LD_INT 10
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2573: LD_ADDR_OWVAR 26
2577: PUSH
2578: LD_STRING Ingrid Jonsson
2580: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2581: LD_ADDR_OWVAR 30
2585: PUSH
2586: LD_INT 1
2588: PUSH
2589: LD_INT 1
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2604: LD_ADDR_OWVAR 31
2608: PUSH
2609: LD_INT 3
2611: PUSH
2612: LD_INT 1
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2627: LD_ADDR_EXP 18
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2637: LD_EXP 18
2641: PPUSH
2642: LD_VAR 0 3
2646: PPUSH
2647: CALL_OW 52
// end ;
2651: LD_VAR 0 1
2655: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2656: LD_INT 0
2658: PPUSH
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// j = 0 ;
2663: LD_ADDR_VAR 0 3
2667: PUSH
2668: LD_INT 0
2670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2671: LD_INT 35
2673: PPUSH
2674: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_INT 1
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 21
2695: PUSH
2696: LD_INT 1
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 26
2705: PUSH
2706: LD_INT 1
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: LD_INT 25
2718: PUSH
2719: LD_INT 1
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 25
2728: PUSH
2729: LD_INT 2
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 25
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 25
2748: PUSH
2749: LD_INT 4
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: PUSH
2774: FOR_IN
2775: IFFALSE 2901
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2777: LD_INT 22
2779: PUSH
2780: LD_INT 3
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 21
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 2
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 21
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 59
2822: PUSH
2823: EMPTY
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 91
2835: PUSH
2836: LD_VAR 0 2
2840: PUSH
2841: LD_INT 25
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 69
2858: NOT
2859: PUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: LD_EXP 1
2869: PPUSH
2870: CALL_OW 296
2874: PUSH
2875: LD_INT 15
2877: LESS
2878: AND
2879: IFFALSE 2899
// begin tmp = i ;
2881: LD_ADDR_VAR 0 4
2885: PUSH
2886: LD_VAR 0 2
2890: ST_TO_ADDR
// j = 1 ;
2891: LD_ADDR_VAR 0 3
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// end ; end ;
2899: GO 2774
2901: POP
2902: POP
// until j = 1 ;
2903: LD_VAR 0 3
2907: PUSH
2908: LD_INT 1
2910: EQUAL
2911: IFFALSE 2671
// blockSpawn = 1 ;
2913: LD_ADDR_EXP 29
2917: PUSH
2918: LD_INT 1
2920: ST_TO_ADDR
// uc_side = 4 ;
2921: LD_ADDR_OWVAR 20
2925: PUSH
2926: LD_INT 4
2928: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2929: LD_ADDR_EXP 15
2933: PUSH
2934: LD_STRING Joan
2936: PPUSH
2937: LD_INT 0
2939: PPUSH
2940: CALL 5193 0 2
2944: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 250
2959: PPUSH
2960: LD_VAR 0 4
2964: PPUSH
2965: CALL_OW 251
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2980: LD_EXP 15
2984: PPUSH
2985: LD_INT 250
2987: PPUSH
2988: CALL_OW 234
// InGameOn ;
2992: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2996: LD_EXP 15
3000: PPUSH
3001: CALL_OW 87
// wait ( 0 0$2 ) ;
3005: LD_INT 70
3007: PPUSH
3008: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3012: LD_VAR 0 4
3016: PPUSH
3017: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: CALL_OW 122
// wait ( 0 0$1 ) ;
3030: LD_INT 35
3032: PPUSH
3033: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3037: LD_VAR 0 4
3041: PPUSH
3042: LD_EXP 15
3046: PPUSH
3047: CALL_OW 112
// wait ( 0 0$2 ) ;
3051: LD_INT 70
3053: PPUSH
3054: CALL_OW 67
// DialogueOn ;
3058: CALL_OW 6
// if tmp = JMM then
3062: LD_VAR 0 4
3066: PUSH
3067: LD_EXP 1
3071: EQUAL
3072: IFFALSE 3221
// begin ComTurnUnit ( JMM , Joan ) ;
3074: LD_EXP 1
3078: PPUSH
3079: LD_EXP 15
3083: PPUSH
3084: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING D5b-JMM-1
3095: PPUSH
3096: CALL_OW 88
// DialogueOff ;
3100: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3104: LD_EXP 15
3108: PPUSH
3109: LD_INT 500
3111: PPUSH
3112: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3116: LD_EXP 15
3120: PPUSH
3121: LD_EXP 1
3125: PPUSH
3126: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3130: LD_EXP 1
3134: PPUSH
3135: LD_EXP 15
3139: PPUSH
3140: CALL_OW 119
// wait ( 0 0$1 ) ;
3144: LD_INT 35
3146: PPUSH
3147: CALL_OW 67
// DialogueOn ;
3151: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3155: LD_EXP 15
3159: PPUSH
3160: LD_STRING D5b-Joan-1
3162: PPUSH
3163: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING D5b-JMM-2
3174: PPUSH
3175: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3179: LD_EXP 15
3183: PPUSH
3184: LD_STRING D5b-Joan-2
3186: PPUSH
3187: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3191: LD_EXP 1
3195: PPUSH
3196: LD_STRING D5b-JMM-3
3198: PPUSH
3199: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3203: LD_EXP 15
3207: PPUSH
3208: LD_STRING D5b-Joan-3
3210: PPUSH
3211: CALL_OW 88
// DialogueOff ;
3215: CALL_OW 7
// end else
3219: GO 3556
// begin ComTurnUnit ( tmp , Joan ) ;
3221: LD_VAR 0 4
3225: PPUSH
3226: LD_EXP 15
3230: PPUSH
3231: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_STRING D5a-Sol1-1
3242: PPUSH
3243: CALL_OW 88
// DialogueOff ;
3247: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3251: LD_EXP 15
3255: PPUSH
3256: LD_INT 500
3258: PPUSH
3259: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3263: LD_EXP 15
3267: PPUSH
3268: LD_VAR 0 4
3272: PPUSH
3273: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3277: LD_VAR 0 4
3281: PPUSH
3282: LD_EXP 15
3286: PPUSH
3287: CALL_OW 119
// wait ( 0 0$1 ) ;
3291: LD_INT 35
3293: PPUSH
3294: CALL_OW 67
// DialogueOn ;
3298: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3302: LD_EXP 15
3306: PPUSH
3307: LD_STRING D5a-Joan-1
3309: PPUSH
3310: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3314: LD_VAR 0 4
3318: PPUSH
3319: LD_STRING D5a-Sol1-2
3321: PPUSH
3322: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3326: LD_EXP 15
3330: PPUSH
3331: LD_STRING D5a-Joan-2
3333: PPUSH
3334: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3338: LD_VAR 0 4
3342: PPUSH
3343: LD_STRING D5a-Sol1-3
3345: PPUSH
3346: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3350: LD_EXP 15
3354: PPUSH
3355: LD_STRING D5a-Joan-3
3357: PPUSH
3358: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3362: LD_VAR 0 4
3366: PPUSH
3367: LD_STRING D5a-Sol1-4
3369: PPUSH
3370: CALL_OW 88
// DialogueOff ;
3374: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3378: LD_EXP 1
3382: PPUSH
3383: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3387: LD_EXP 1
3391: PPUSH
3392: CALL_OW 122
// wait ( 0 0$1 ) ;
3396: LD_INT 35
3398: PPUSH
3399: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3410: LD_EXP 15
3414: PUSH
3415: LD_VAR 0 4
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PPUSH
3424: LD_EXP 1
3428: PPUSH
3429: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3433: LD_EXP 15
3437: PPUSH
3438: LD_EXP 1
3442: PPUSH
3443: CALL_OW 296
3447: PUSH
3448: LD_INT 5
3450: LESS
3451: IFFALSE 3403
// ComTurnUnit ( Joan , JMM ) ;
3453: LD_EXP 15
3457: PPUSH
3458: LD_EXP 1
3462: PPUSH
3463: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3467: LD_EXP 1
3471: PPUSH
3472: LD_EXP 15
3476: PPUSH
3477: CALL_OW 119
// wait ( 0 0$1 ) ;
3481: LD_INT 35
3483: PPUSH
3484: CALL_OW 67
// DialogueOn ;
3488: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3492: LD_EXP 15
3496: PPUSH
3497: LD_STRING D5a-Joan-4
3499: PPUSH
3500: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3504: LD_EXP 1
3508: PPUSH
3509: LD_STRING D5a-JMM-4
3511: PPUSH
3512: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3516: LD_EXP 15
3520: PPUSH
3521: LD_STRING D5a-Joan-5
3523: PPUSH
3524: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3528: LD_EXP 1
3532: PPUSH
3533: LD_STRING D5a-JMM-5
3535: PPUSH
3536: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3540: LD_EXP 15
3544: PPUSH
3545: LD_STRING D5a-Joan-6
3547: PPUSH
3548: CALL_OW 88
// DialogueOff ;
3552: CALL_OW 7
// end ; DialogueOn ;
3556: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3560: LD_EXP 1
3564: PPUSH
3565: LD_STRING D6-JMM-1
3567: PPUSH
3568: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3572: LD_EXP 15
3576: PPUSH
3577: LD_STRING D6-Joan-1
3579: PPUSH
3580: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3584: LD_EXP 1
3588: PPUSH
3589: LD_STRING D6-JMM-2
3591: PPUSH
3592: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3596: LD_EXP 15
3600: PPUSH
3601: LD_STRING D6-Joan-2
3603: PPUSH
3604: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING D6-JMM-3
3615: PPUSH
3616: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3620: LD_EXP 15
3624: PPUSH
3625: LD_STRING D6-Joan-3
3627: PPUSH
3628: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3632: LD_EXP 1
3636: PPUSH
3637: LD_STRING D6-JMM-4
3639: PPUSH
3640: CALL_OW 88
// DialogueOff ;
3644: CALL_OW 7
// InGameOff ;
3648: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3652: LD_EXP 15
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3664: LD_STRING MJ
3666: PPUSH
3667: CALL_OW 337
// JoanStatus = 1 ;
3671: LD_ADDR_EXP 16
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// blockSpawn = 0 ;
3679: LD_ADDR_EXP 29
3683: PUSH
3684: LD_INT 0
3686: ST_TO_ADDR
// end ;
3687: LD_VAR 0 1
3691: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3692: LD_INT 0
3694: PPUSH
3695: PPUSH
// repeat wait ( 0 0$7 ) ;
3696: LD_INT 245
3698: PPUSH
3699: CALL_OW 67
// until blockSpawn = 0 ;
3703: LD_EXP 29
3707: PUSH
3708: LD_INT 0
3710: EQUAL
3711: IFFALSE 3696
// uc_side = 1 ;
3713: LD_ADDR_OWVAR 20
3717: PUSH
3718: LD_INT 1
3720: ST_TO_ADDR
// uc_nation = 1 ;
3721: LD_ADDR_OWVAR 21
3725: PUSH
3726: LD_INT 1
3728: ST_TO_ADDR
// InitHc ;
3729: CALL_OW 19
// if number = 1 then
3733: LD_VAR 0 1
3737: PUSH
3738: LD_INT 1
3740: EQUAL
3741: IFFALSE 3917
// begin hc_class := 1 ;
3743: LD_ADDR_OWVAR 28
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// hc_sex := sex_male ;
3751: LD_ADDR_OWVAR 27
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3759: LD_ADDR_OWVAR 33
3763: PUSH
3764: LD_STRING AmGalRemake
3766: ST_TO_ADDR
// hc_face_number := 7 ;
3767: LD_ADDR_OWVAR 34
3771: PUSH
3772: LD_INT 7
3774: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3775: LD_ADDR_OWVAR 26
3779: PUSH
3780: LD_STRING Bobby Jordan
3782: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3783: LD_ADDR_OWVAR 29
3787: PUSH
3788: LD_INT 9
3790: PUSH
3791: LD_INT 11
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3798: LD_ADDR_OWVAR 30
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: LD_INT 0
3808: PUSH
3809: LD_INT 0
3811: PUSH
3812: LD_INT 1
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3821: LD_ADDR_OWVAR 31
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: LD_INT 1
3831: PUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: ST_TO_ADDR
// un = CreateHuman ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: CALL_OW 44
3853: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3854: LD_VAR 0 3
3858: PPUSH
3859: LD_INT 12
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: CALL_OW 49
// wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 87
// DialogueOn ;
3885: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_STRING D11b-Sol3-1
3896: PPUSH
3897: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_STRING D11b-JMM-1
3908: PPUSH
3909: CALL_OW 88
// DialogueOff ;
3913: CALL_OW 7
// end ; if number = 2 then
3917: LD_VAR 0 1
3921: PUSH
3922: LD_INT 2
3924: EQUAL
3925: IFFALSE 4101
// begin hc_class := 3 ;
3927: LD_ADDR_OWVAR 28
3931: PUSH
3932: LD_INT 3
3934: ST_TO_ADDR
// hc_sex := sex_male ;
3935: LD_ADDR_OWVAR 27
3939: PUSH
3940: LD_INT 1
3942: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3943: LD_ADDR_OWVAR 33
3947: PUSH
3948: LD_STRING SecondCharsGal
3950: ST_TO_ADDR
// hc_face_number := 55 ;
3951: LD_ADDR_OWVAR 34
3955: PUSH
3956: LD_INT 55
3958: ST_TO_ADDR
// hc_name := George McCarthy ;
3959: LD_ADDR_OWVAR 26
3963: PUSH
3964: LD_STRING George McCarthy
3966: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3967: LD_ADDR_OWVAR 29
3971: PUSH
3972: LD_INT 11
3974: PUSH
3975: LD_INT 10
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3982: LD_ADDR_OWVAR 30
3986: PUSH
3987: LD_INT 0
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4005: LD_ADDR_OWVAR 31
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 3
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: ST_TO_ADDR
// un = CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4038: LD_VAR 0 3
4042: PPUSH
4043: LD_INT 12
4045: PPUSH
4046: LD_INT 1
4048: PPUSH
4049: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4053: LD_VAR 0 3
4057: PPUSH
4058: CALL_OW 87
// wait ( 0 0$1 ) ;
4062: LD_INT 35
4064: PPUSH
4065: CALL_OW 67
// DialogueOn ;
4069: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_STRING D11d-Sol4-1
4080: PPUSH
4081: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4085: LD_EXP 1
4089: PPUSH
4090: LD_STRING D11d-JMM-1
4092: PPUSH
4093: CALL_OW 88
// DialogueOff ;
4097: CALL_OW 7
// end ; if number = 4 then
4101: LD_VAR 0 1
4105: PUSH
4106: LD_INT 4
4108: EQUAL
4109: IFFALSE 4273
// begin hc_class := 3 ;
4111: LD_ADDR_OWVAR 28
4115: PUSH
4116: LD_INT 3
4118: ST_TO_ADDR
// hc_sex := sex_female ;
4119: LD_ADDR_OWVAR 27
4123: PUSH
4124: LD_INT 2
4126: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4127: LD_ADDR_OWVAR 33
4131: PUSH
4132: LD_STRING SecondCharsGal
4134: ST_TO_ADDR
// hc_face_number := 46 ;
4135: LD_ADDR_OWVAR 34
4139: PUSH
4140: LD_INT 46
4142: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4143: LD_ADDR_OWVAR 26
4147: PUSH
4148: LD_STRING Sylvia Creak
4150: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4151: LD_ADDR_OWVAR 29
4155: PUSH
4156: LD_INT 10
4158: PUSH
4159: LD_INT 9
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4166: LD_ADDR_OWVAR 30
4170: PUSH
4171: LD_INT 0
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: LD_INT 1
4179: PUSH
4180: LD_INT 1
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4189: LD_ADDR_OWVAR 31
4193: PUSH
4194: LD_INT 1
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: LD_INT 1
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: ST_TO_ADDR
// un = CreateHuman ;
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: CALL_OW 44
4221: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4222: LD_VAR 0 3
4226: PPUSH
4227: LD_INT 12
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4237: LD_VAR 0 3
4241: PPUSH
4242: CALL_OW 87
// wait ( 0 0$1 ) ;
4246: LD_INT 35
4248: PPUSH
4249: CALL_OW 67
// DialogueOn ;
4253: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_STRING D11e-FSol4-1
4264: PPUSH
4265: CALL_OW 88
// DialogueOff ;
4269: CALL_OW 7
// end ; if number = 5 then
4273: LD_VAR 0 1
4277: PUSH
4278: LD_INT 5
4280: EQUAL
4281: IFFALSE 4457
// begin hc_class := 1 ;
4283: LD_ADDR_OWVAR 28
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// hc_sex := sex_female ;
4291: LD_ADDR_OWVAR 27
4295: PUSH
4296: LD_INT 2
4298: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4299: LD_ADDR_OWVAR 33
4303: PUSH
4304: LD_STRING SecondCharsGal
4306: ST_TO_ADDR
// hc_face_number := 37 ;
4307: LD_ADDR_OWVAR 34
4311: PUSH
4312: LD_INT 37
4314: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4315: LD_ADDR_OWVAR 26
4319: PUSH
4320: LD_STRING Margherite Simpson
4322: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4323: LD_ADDR_OWVAR 29
4327: PUSH
4328: LD_INT 11
4330: PUSH
4331: LD_INT 10
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4338: LD_ADDR_OWVAR 30
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: LD_INT 0
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4361: LD_ADDR_OWVAR 31
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: LD_INT 1
4374: PUSH
4375: LD_INT 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// un = CreateHuman ;
4384: LD_ADDR_VAR 0 3
4388: PUSH
4389: CALL_OW 44
4393: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 12
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4409: LD_VAR 0 3
4413: PPUSH
4414: CALL_OW 87
// wait ( 0 0$1 ) ;
4418: LD_INT 35
4420: PPUSH
4421: CALL_OW 67
// DialogueOn ;
4425: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4429: LD_VAR 0 3
4433: PPUSH
4434: LD_STRING D11c-FSol3-1
4436: PPUSH
4437: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4441: LD_EXP 1
4445: PPUSH
4446: LD_STRING D11c-JMM-1
4448: PPUSH
4449: CALL_OW 88
// DialogueOff ;
4453: CALL_OW 7
// end ; if number = 6 then
4457: LD_VAR 0 1
4461: PUSH
4462: LD_INT 6
4464: EQUAL
4465: IFFALSE 4639
// begin hc_class := 1 ;
4467: LD_ADDR_OWVAR 28
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// hc_sex := sex_male ;
4475: LD_ADDR_OWVAR 27
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4483: LD_ADDR_OWVAR 33
4487: PUSH
4488: LD_STRING AmGalRemake
4490: ST_TO_ADDR
// hc_face_number := 1 ;
4491: LD_ADDR_OWVAR 34
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// hc_name := Charles Brown ;
4499: LD_ADDR_OWVAR 26
4503: PUSH
4504: LD_STRING Charles Brown
4506: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4507: LD_ADDR_OWVAR 29
4511: PUSH
4512: LD_INT 12
4514: PUSH
4515: LD_INT 11
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4522: LD_ADDR_OWVAR 30
4526: PUSH
4527: LD_INT 2
4529: PUSH
4530: LD_INT 0
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4545: LD_ADDR_OWVAR 31
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: LD_INT 1
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: ST_TO_ADDR
// un = CreateHuman ;
4568: LD_ADDR_VAR 0 3
4572: PUSH
4573: CALL_OW 44
4577: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_INT 12
4585: PPUSH
4586: LD_INT 1
4588: PPUSH
4589: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4593: LD_VAR 0 3
4597: PPUSH
4598: CALL_OW 87
// wait ( 0 0$1 ) ;
4602: LD_INT 35
4604: PPUSH
4605: CALL_OW 67
// DialogueOn ;
4609: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4613: LD_VAR 0 3
4617: PPUSH
4618: LD_STRING D4-Sol1-5
4620: PPUSH
4621: CALL_OW 88
// DialogueOff ;
4625: CALL_OW 7
// tempCharles = un ;
4629: LD_ADDR_EXP 13
4633: PUSH
4634: LD_VAR 0 3
4638: ST_TO_ADDR
// end ; if number = 7 then
4639: LD_VAR 0 1
4643: PUSH
4644: LD_INT 7
4646: EQUAL
4647: IFFALSE 4811
// begin hc_class := 1 ;
4649: LD_ADDR_OWVAR 28
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// hc_sex := sex_female ;
4657: LD_ADDR_OWVAR 27
4661: PUSH
4662: LD_INT 2
4664: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4665: LD_ADDR_OWVAR 33
4669: PUSH
4670: LD_STRING AmGalRemake
4672: ST_TO_ADDR
// hc_face_number := 2 ;
4673: LD_ADDR_OWVAR 34
4677: PUSH
4678: LD_INT 2
4680: ST_TO_ADDR
// hc_name := Johanna Holland ;
4681: LD_ADDR_OWVAR 26
4685: PUSH
4686: LD_STRING Johanna Holland
4688: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4689: LD_ADDR_OWVAR 29
4693: PUSH
4694: LD_INT 10
4696: PUSH
4697: LD_INT 10
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4704: LD_ADDR_OWVAR 30
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 0
4714: PUSH
4715: LD_INT 0
4717: PUSH
4718: LD_INT 1
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4727: LD_ADDR_OWVAR 31
4731: PUSH
4732: LD_INT 1
4734: PUSH
4735: LD_INT 0
4737: PUSH
4738: LD_INT 0
4740: PUSH
4741: LD_INT 1
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: ST_TO_ADDR
// un = CreateHuman ;
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: CALL_OW 44
4759: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_INT 12
4767: PPUSH
4768: LD_INT 1
4770: PPUSH
4771: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4775: LD_VAR 0 3
4779: PPUSH
4780: CALL_OW 87
// wait ( 0 0$1 ) ;
4784: LD_INT 35
4786: PPUSH
4787: CALL_OW 67
// DialogueOn ;
4791: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4795: LD_VAR 0 3
4799: PPUSH
4800: LD_STRING D11a-FSol2-1
4802: PPUSH
4803: CALL_OW 88
// DialogueOff ;
4807: CALL_OW 7
// end ; end ; end_of_file
4811: LD_VAR 0 2
4815: RET
// export function PrepareRussian ; var i ; begin
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4820: LD_INT 3
4822: PPUSH
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 2
4828: PPUSH
4829: LD_EXP 34
4833: PPUSH
4834: LD_EXP 35
4838: PPUSH
4839: CALL_OW 12
4843: PPUSH
4844: LD_INT 2
4846: PPUSH
4847: LD_INT 4
4849: PPUSH
4850: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4854: LD_INT 3
4856: PPUSH
4857: LD_INT 3
4859: PPUSH
4860: LD_INT 8
4862: PPUSH
4863: LD_EXP 34
4867: PPUSH
4868: LD_EXP 35
4872: PPUSH
4873: CALL_OW 12
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: LD_INT 4
4883: PPUSH
4884: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4888: LD_INT 3
4890: PPUSH
4891: LD_INT 3
4893: PPUSH
4894: LD_INT 67
4896: PPUSH
4897: LD_EXP 34
4901: PPUSH
4902: LD_EXP 35
4906: PPUSH
4907: CALL_OW 12
4911: PPUSH
4912: LD_INT 1
4914: PPUSH
4915: LD_INT 2
4917: PPUSH
4918: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4922: LD_INT 3
4924: PPUSH
4925: LD_INT 3
4927: PPUSH
4928: LD_INT 21
4930: PPUSH
4931: LD_EXP 34
4935: PPUSH
4936: LD_EXP 35
4940: PPUSH
4941: CALL_OW 12
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 6
4951: PPUSH
4952: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4956: LD_INT 3
4958: PPUSH
4959: LD_INT 3
4961: PPUSH
4962: LD_INT 17
4964: PPUSH
4965: LD_EXP 34
4969: PPUSH
4970: LD_EXP 35
4974: PPUSH
4975: CALL_OW 12
4979: PPUSH
4980: LD_INT 3
4982: PPUSH
4983: LD_INT 6
4985: PPUSH
4986: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 3
4995: PPUSH
4996: LD_INT 32
4998: PPUSH
4999: LD_EXP 34
5003: PPUSH
5004: LD_EXP 35
5008: PPUSH
5009: CALL_OW 12
5013: PPUSH
5014: LD_INT 4
5016: PPUSH
5017: LD_INT 2
5019: PPUSH
5020: CALL 5463 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 21
5041: PUSH
5042: LD_INT 3
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 30
5051: PUSH
5052: LD_INT 32
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL_OW 69
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5110
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5072: LD_INT 3
5074: PPUSH
5075: LD_INT 3
5077: PPUSH
5078: LD_VAR 0 2
5082: PPUSH
5083: LD_EXP 34
5087: PPUSH
5088: LD_EXP 35
5092: PPUSH
5093: CALL_OW 12
5097: PPUSH
5098: LD_INT 1
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL 5463 0 6
5108: GO 5069
5110: POP
5111: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: LD_INT 22
5119: PUSH
5120: LD_INT 3
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 21
5129: PUSH
5130: LD_INT 3
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 30
5139: PUSH
5140: LD_INT 31
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: PUSH
5157: FOR_IN
5158: IFFALSE 5186
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5160: LD_EXP 34
5164: PPUSH
5165: LD_EXP 35
5169: PPUSH
5170: CALL_OW 12
5174: PPUSH
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL 5573 0 2
5184: GO 5157
5186: POP
5187: POP
// end ; end_of_file
5188: LD_VAR 0 1
5192: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5193: LD_INT 0
5195: PPUSH
5196: PPUSH
// if exist_mode then
5197: LD_VAR 0 2
5201: IFFALSE 5226
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: LD_EXP 44
5212: PUSH
5213: LD_VAR 0 1
5217: STR
5218: PPUSH
5219: CALL_OW 34
5223: ST_TO_ADDR
// end else
5224: GO 5241
// begin unit := NewCharacter ( ident ) ;
5226: LD_ADDR_VAR 0 4
5230: PUSH
5231: LD_VAR 0 1
5235: PPUSH
5236: CALL_OW 25
5240: ST_TO_ADDR
// end ; result := unit ;
5241: LD_ADDR_VAR 0 3
5245: PUSH
5246: LD_VAR 0 4
5250: ST_TO_ADDR
// end ;
5251: LD_VAR 0 3
5255: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5256: LD_INT 0
5258: PPUSH
5259: PPUSH
5260: PPUSH
// rnd = rand ( 1 , characters ) ;
5261: LD_ADDR_VAR 0 6
5265: PUSH
5266: LD_INT 1
5268: PPUSH
5269: LD_VAR 0 1
5273: PPUSH
5274: CALL_OW 12
5278: ST_TO_ADDR
// for i = 1 to characters do
5279: LD_ADDR_VAR 0 5
5283: PUSH
5284: DOUBLE
5285: LD_INT 1
5287: DEC
5288: ST_TO_ADDR
5289: LD_VAR 0 1
5293: PUSH
5294: FOR_TO
5295: IFFALSE 5405
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5297: LD_VAR 0 5
5301: PUSH
5302: LD_VAR 0 6
5306: EQUAL
5307: PUSH
5308: LD_VAR 0 1
5312: PUSH
5313: LD_VAR 0 5
5317: ARRAY
5318: PPUSH
5319: CALL_OW 258
5323: PUSH
5324: LD_INT 1
5326: EQUAL
5327: AND
5328: IFFALSE 5350
// Say ( characters [ i ] , dialogMID ) ;
5330: LD_VAR 0 1
5334: PUSH
5335: LD_VAR 0 5
5339: ARRAY
5340: PPUSH
5341: LD_VAR 0 2
5345: PPUSH
5346: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5350: LD_VAR 0 5
5354: PUSH
5355: LD_VAR 0 6
5359: EQUAL
5360: PUSH
5361: LD_VAR 0 1
5365: PUSH
5366: LD_VAR 0 5
5370: ARRAY
5371: PPUSH
5372: CALL_OW 258
5376: PUSH
5377: LD_INT 2
5379: EQUAL
5380: AND
5381: IFFALSE 5403
// Say ( characters [ i ] , dialogFID ) ;
5383: LD_VAR 0 1
5387: PUSH
5388: LD_VAR 0 5
5392: ARRAY
5393: PPUSH
5394: LD_VAR 0 3
5398: PPUSH
5399: CALL_OW 88
// end ;
5403: GO 5294
5405: POP
5406: POP
// end ;
5407: LD_VAR 0 4
5411: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5412: LD_INT 0
5414: PPUSH
5415: PPUSH
// for i in charactersList do
5416: LD_ADDR_VAR 0 4
5420: PUSH
5421: LD_VAR 0 1
5425: PUSH
5426: FOR_IN
5427: IFFALSE 5456
// begin if IsOk ( i ) then
5429: LD_VAR 0 4
5433: PPUSH
5434: CALL_OW 302
5438: IFFALSE 5454
// SaveCharacters ( i , ident ) ;
5440: LD_VAR 0 4
5444: PPUSH
5445: LD_VAR 0 2
5449: PPUSH
5450: CALL_OW 38
// end ;
5454: GO 5426
5456: POP
5457: POP
// end ;
5458: LD_VAR 0 3
5462: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5463: LD_INT 0
5465: PPUSH
5466: PPUSH
5467: PPUSH
5468: PPUSH
// for i = 1 to count do
5469: LD_ADDR_VAR 0 8
5473: PUSH
5474: DOUBLE
5475: LD_INT 1
5477: DEC
5478: ST_TO_ADDR
5479: LD_VAR 0 6
5483: PUSH
5484: FOR_TO
5485: IFFALSE 5566
// begin uc_side = side ;
5487: LD_ADDR_OWVAR 20
5491: PUSH
5492: LD_VAR 0 1
5496: ST_TO_ADDR
// uc_nation = nation ;
5497: LD_ADDR_OWVAR 21
5501: PUSH
5502: LD_VAR 0 2
5506: ST_TO_ADDR
// hc_gallery =  ;
5507: LD_ADDR_OWVAR 33
5511: PUSH
5512: LD_STRING 
5514: ST_TO_ADDR
// hc_name =  ;
5515: LD_ADDR_OWVAR 26
5519: PUSH
5520: LD_STRING 
5522: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5523: LD_INT 0
5525: PPUSH
5526: LD_VAR 0 5
5530: PPUSH
5531: LD_VAR 0 4
5535: PPUSH
5536: CALL_OW 380
// un = CreateHuman ;
5540: LD_ADDR_VAR 0 10
5544: PUSH
5545: CALL_OW 44
5549: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5550: LD_VAR 0 10
5554: PPUSH
5555: LD_VAR 0 3
5559: PPUSH
5560: CALL_OW 52
// end ;
5564: GO 5484
5566: POP
5567: POP
// end ;
5568: LD_VAR 0 7
5572: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5573: LD_INT 0
5575: PPUSH
5576: PPUSH
5577: PPUSH
// uc_side := GetSide ( b ) ;
5578: LD_ADDR_OWVAR 20
5582: PUSH
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 255
5592: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5593: LD_ADDR_OWVAR 21
5597: PUSH
5598: LD_VAR 0 2
5602: PPUSH
5603: CALL_OW 248
5607: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5608: LD_INT 0
5610: PPUSH
5611: LD_INT 1
5613: PPUSH
5614: LD_VAR 0 1
5618: PPUSH
5619: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5623: LD_ADDR_VAR 0 5
5627: PUSH
5628: LD_VAR 0 2
5632: PPUSH
5633: CALL_OW 254
5637: PUSH
5638: LD_INT 3
5640: MINUS
5641: ST_TO_ADDR
// if dir < 0 then
5642: LD_VAR 0 5
5646: PUSH
5647: LD_INT 0
5649: LESS
5650: IFFALSE 5666
// dir := 6 + dir ;
5652: LD_ADDR_VAR 0 5
5656: PUSH
5657: LD_INT 6
5659: PUSH
5660: LD_VAR 0 5
5664: PLUS
5665: ST_TO_ADDR
// un := CreateHuman ;
5666: LD_ADDR_VAR 0 4
5670: PUSH
5671: CALL_OW 44
5675: ST_TO_ADDR
// SetDir ( un , dir ) ;
5676: LD_VAR 0 4
5680: PPUSH
5681: LD_VAR 0 5
5685: PPUSH
5686: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5690: LD_VAR 0 4
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: CALL_OW 52
// end ;
5704: LD_VAR 0 3
5708: RET
// export function PrepareDifficulty ; begin
5709: LD_INT 0
5711: PPUSH
// if Difficulty = 1 then
5712: LD_OWVAR 67
5716: PUSH
5717: LD_INT 1
5719: EQUAL
5720: IFFALSE 5738
// begin RuSolMinLevel = 2 ;
5722: LD_ADDR_EXP 34
5726: PUSH
5727: LD_INT 2
5729: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
5730: LD_ADDR_EXP 35
5734: PUSH
5735: LD_INT 4
5737: ST_TO_ADDR
// end ; if Difficulty = 2 then
5738: LD_OWVAR 67
5742: PUSH
5743: LD_INT 2
5745: EQUAL
5746: IFFALSE 5764
// begin RuSolMinLevel = 3 ;
5748: LD_ADDR_EXP 34
5752: PUSH
5753: LD_INT 3
5755: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5756: LD_ADDR_EXP 35
5760: PUSH
5761: LD_INT 5
5763: ST_TO_ADDR
// end ; if Difficulty = 3 then
5764: LD_OWVAR 67
5768: PUSH
5769: LD_INT 3
5771: EQUAL
5772: IFFALSE 5790
// begin RuSolMinLevel = 3 ;
5774: LD_ADDR_EXP 34
5778: PUSH
5779: LD_INT 3
5781: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5782: LD_ADDR_EXP 35
5786: PUSH
5787: LD_INT 6
5789: ST_TO_ADDR
// end ; end ;
5790: LD_VAR 0 1
5794: RET
// export function ShowQuery1 ; begin
5795: LD_INT 0
5797: PPUSH
// case query ( QKill ) of 1 :
5798: LD_STRING QKill
5800: PPUSH
5801: CALL_OW 97
5805: PUSH
5806: LD_INT 1
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5814
5812: GO 5825
5814: POP
// begin result = 1 ;
5815: LD_ADDR_VAR 0 1
5819: PUSH
5820: LD_INT 1
5822: ST_TO_ADDR
// end ; 2 :
5823: GO 5864
5825: LD_INT 2
5827: DOUBLE
5828: EQUAL
5829: IFTRUE 5833
5831: GO 5844
5833: POP
// begin result = 2 ;
5834: LD_ADDR_VAR 0 1
5838: PUSH
5839: LD_INT 2
5841: ST_TO_ADDR
// end ; 3 :
5842: GO 5864
5844: LD_INT 3
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5852
5850: GO 5863
5852: POP
// begin result = 3 ;
5853: LD_ADDR_VAR 0 1
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// end ; end ;
5861: GO 5864
5863: POP
// end ;
5864: LD_VAR 0 1
5868: RET
// export function ShowQuery2 ; begin
5869: LD_INT 0
5871: PPUSH
// case query ( QKill2 ) of 1 :
5872: LD_STRING QKill2
5874: PPUSH
5875: CALL_OW 97
5879: PUSH
5880: LD_INT 1
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 5899
5888: POP
// begin result = 1 ;
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// end ; 2 :
5897: GO 5919
5899: LD_INT 2
5901: DOUBLE
5902: EQUAL
5903: IFTRUE 5907
5905: GO 5918
5907: POP
// begin result = 2 ;
5908: LD_ADDR_VAR 0 1
5912: PUSH
5913: LD_INT 2
5915: ST_TO_ADDR
// end ; end ;
5916: GO 5919
5918: POP
// end ;
5919: LD_VAR 0 1
5923: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5924: LD_INT 0
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// for i = 1 to 72 do
5930: LD_ADDR_VAR 0 5
5934: PUSH
5935: DOUBLE
5936: LD_INT 1
5938: DEC
5939: ST_TO_ADDR
5940: LD_INT 72
5942: PUSH
5943: FOR_TO
5944: IFFALSE 6002
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5946: LD_VAR 0 5
5950: PPUSH
5951: LD_VAR 0 1
5955: PPUSH
5956: CALL_OW 321
5960: PUSH
5961: LD_INT 1
5963: EQUAL
5964: PUSH
5965: LD_VAR 0 5
5969: PPUSH
5970: LD_VAR 0 3
5974: PPUSH
5975: CALL_OW 482
5979: PUSH
5980: LD_INT 1
5982: EQUAL
5983: AND
5984: IFFALSE 6000
// AddComResearch ( lab , i ) ;
5986: LD_VAR 0 2
5990: PPUSH
5991: LD_VAR 0 5
5995: PPUSH
5996: CALL_OW 184
6000: GO 5943
6002: POP
6003: POP
// end ;
6004: LD_VAR 0 4
6008: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6009: LD_INT 0
6011: PPUSH
6012: PPUSH
6013: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6014: LD_INT 22
6016: PUSH
6017: LD_VAR 0 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 21
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PUSH
6045: LD_VAR 0 3
6049: LESSEQUAL
6050: IFFALSE 6158
// begin for i = 1 to vehCount do
6052: LD_ADDR_VAR 0 9
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_VAR 0 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6156
// begin weapon = weaponTab [ i ] ;
6070: LD_ADDR_VAR 0 10
6074: PUSH
6075: LD_VAR 0 4
6079: PUSH
6080: LD_VAR 0 9
6084: ARRAY
6085: ST_TO_ADDR
// if weapon = 46 then
6086: LD_VAR 0 10
6090: PUSH
6091: LD_INT 46
6093: EQUAL
6094: IFFALSE 6125
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6096: LD_VAR 0 2
6100: PPUSH
6101: LD_INT 24
6103: PPUSH
6104: LD_VAR 0 5
6108: PPUSH
6109: LD_VAR 0 6
6113: PPUSH
6114: LD_VAR 0 10
6118: PPUSH
6119: CALL_OW 185
// end else
6123: GO 6154
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6125: LD_VAR 0 2
6129: PPUSH
6130: LD_VAR 0 7
6134: PPUSH
6135: LD_VAR 0 5
6139: PPUSH
6140: LD_VAR 0 6
6144: PPUSH
6145: LD_VAR 0 10
6149: PPUSH
6150: CALL_OW 185
// end ; end ;
6154: GO 6067
6156: POP
6157: POP
// end ; end ;
6158: LD_VAR 0 8
6162: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6163: LD_INT 0
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6169: LD_ADDR_VAR 0 8
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_VAR 0 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 21
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: LD_INT 24
6201: PUSH
6202: LD_INT 650
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: ST_TO_ADDR
// if damageVehicles > 0 then
6223: LD_VAR 0 8
6227: PUSH
6228: LD_INT 0
6230: GREATER
6231: IFFALSE 6252
// ComMoveXY ( damageVehicles , repX , repY ) ;
6233: LD_VAR 0 8
6237: PPUSH
6238: LD_VAR 0 3
6242: PPUSH
6243: LD_VAR 0 4
6247: PPUSH
6248: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
6252: LD_VAR 0 8
6256: PPUSH
6257: LD_INT 95
6259: PUSH
6260: LD_VAR 0 2
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: LD_INT 3
6271: PUSH
6272: LD_INT 58
6274: PUSH
6275: EMPTY
6276: LIST
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PPUSH
6286: CALL_OW 72
6290: PUSH
6291: LD_INT 0
6293: GREATER
6294: IFFALSE 6361
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
6296: LD_ADDR_VAR 0 6
6300: PUSH
6301: LD_VAR 0 8
6305: PPUSH
6306: LD_INT 95
6308: PUSH
6309: LD_VAR 0 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: LD_INT 58
6323: PUSH
6324: EMPTY
6325: LIST
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PPUSH
6335: CALL_OW 72
6339: PUSH
6340: FOR_IN
6341: IFFALSE 6359
// ComExitVehicle ( UnitsInside ( i ) ) ;
6343: LD_VAR 0 6
6347: PPUSH
6348: CALL_OW 313
6352: PPUSH
6353: CALL_OW 121
6357: GO 6340
6359: POP
6360: POP
// end ;
6361: LD_VAR 0 5
6365: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6366: LD_INT 0
6368: PPUSH
6369: PPUSH
6370: PPUSH
6371: PPUSH
6372: PPUSH
6373: PPUSH
6374: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6375: LD_ADDR_VAR 0 8
6379: PUSH
6380: LD_INT 22
6382: PUSH
6383: LD_VAR 0 1
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 21
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 24
6404: PUSH
6405: LD_INT 660
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 3
6414: PUSH
6415: LD_INT 58
6417: PUSH
6418: EMPTY
6419: LIST
6420: PUSH
6421: LD_INT 2
6423: PUSH
6424: LD_INT 34
6426: PUSH
6427: LD_INT 43
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 34
6436: PUSH
6437: LD_INT 44
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 34
6446: PUSH
6447: LD_INT 46
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: LIST
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: PPUSH
6471: CALL_OW 69
6475: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
6476: LD_INT 22
6478: PUSH
6479: LD_VAR 0 1
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: LD_INT 21
6490: PUSH
6491: LD_INT 2
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 24
6500: PUSH
6501: LD_INT 1000
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: LD_INT 58
6513: PUSH
6514: EMPTY
6515: LIST
6516: PUSH
6517: LD_INT 2
6519: PUSH
6520: LD_INT 34
6522: PUSH
6523: LD_INT 43
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 34
6532: PUSH
6533: LD_INT 44
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 34
6542: PUSH
6543: LD_INT 46
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: PPUSH
6567: CALL_OW 69
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: LD_INT 6
6577: PUSH
6578: LD_INT 6
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: PUSH
6586: LD_OWVAR 67
6590: ARRAY
6591: EQUAL
6592: IFFALSE 7157
// repeat wait ( 0 0$1 ) ;
6594: LD_INT 35
6596: PPUSH
6597: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6601: LD_ADDR_VAR 0 8
6605: PUSH
6606: LD_INT 22
6608: PUSH
6609: LD_VAR 0 1
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PUSH
6618: LD_INT 21
6620: PUSH
6621: LD_INT 2
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 24
6630: PUSH
6631: LD_INT 660
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 3
6640: PUSH
6641: LD_INT 58
6643: PUSH
6644: EMPTY
6645: LIST
6646: PUSH
6647: LD_INT 2
6649: PUSH
6650: LD_INT 34
6652: PUSH
6653: LD_INT 43
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: LD_INT 34
6662: PUSH
6663: LD_INT 44
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 34
6672: PUSH
6673: LD_INT 46
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: PPUSH
6697: CALL_OW 69
6701: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6702: LD_INT 22
6704: PUSH
6705: LD_VAR 0 1
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: PUSH
6714: LD_INT 95
6716: PUSH
6717: LD_VAR 0 2
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PPUSH
6730: CALL_OW 69
6734: NOT
6735: PUSH
6736: LD_VAR 0 11
6740: PUSH
6741: LD_INT 0
6743: EQUAL
6744: AND
6745: IFFALSE 6800
// for i := 1 to wayX do
6747: LD_ADDR_VAR 0 6
6751: PUSH
6752: DOUBLE
6753: LD_INT 1
6755: DEC
6756: ST_TO_ADDR
6757: LD_VAR 0 3
6761: PUSH
6762: FOR_TO
6763: IFFALSE 6798
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6765: LD_VAR 0 8
6769: PPUSH
6770: LD_VAR 0 3
6774: PUSH
6775: LD_VAR 0 6
6779: ARRAY
6780: PPUSH
6781: LD_VAR 0 4
6785: PUSH
6786: LD_VAR 0 6
6790: ARRAY
6791: PPUSH
6792: CALL_OW 114
6796: GO 6762
6798: POP
6799: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
6800: LD_INT 22
6802: PUSH
6803: LD_VAR 0 1
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 95
6814: PUSH
6815: LD_VAR 0 2
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 69
6832: IFFALSE 7056
// begin seeEnemy = 1 ;
6834: LD_ADDR_VAR 0 11
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// for j in vehiclesOK do
6842: LD_ADDR_VAR 0 7
6846: PUSH
6847: LD_VAR 0 8
6851: PUSH
6852: FOR_IN
6853: IFFALSE 7054
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
6855: LD_ADDR_VAR 0 9
6859: PUSH
6860: LD_INT 81
6862: PUSH
6863: LD_VAR 0 1
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 101
6874: PUSH
6875: LD_INT 1
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: PPUSH
6891: LD_VAR 0 7
6895: PPUSH
6896: CALL_OW 74
6900: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
6901: LD_ADDR_VAR 0 10
6905: PUSH
6906: LD_INT 81
6908: PUSH
6909: LD_VAR 0 1
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 101
6920: PUSH
6921: LD_INT 1
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PUSH
6928: LD_INT 2
6930: PUSH
6931: LD_INT 59
6933: PUSH
6934: EMPTY
6935: LIST
6936: PUSH
6937: LD_INT 21
6939: PUSH
6940: LD_INT 1
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 21
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: PPUSH
6971: CALL_OW 69
6975: PPUSH
6976: LD_VAR 0 7
6980: PPUSH
6981: CALL_OW 74
6985: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
6986: LD_VAR 0 7
6990: PPUSH
6991: LD_VAR 0 9
6995: PPUSH
6996: CALL_OW 296
7000: PUSH
7001: LD_INT 8
7003: PLUS
7004: PUSH
7005: LD_VAR 0 7
7009: PPUSH
7010: LD_VAR 0 10
7014: PPUSH
7015: CALL_OW 296
7019: LESS
7020: IFFALSE 7038
// ComAttackUnit ( j , target1 ) else
7022: LD_VAR 0 7
7026: PPUSH
7027: LD_VAR 0 9
7031: PPUSH
7032: CALL_OW 115
7036: GO 7052
// ComAttackUnit ( j , target2 ) ;
7038: LD_VAR 0 7
7042: PPUSH
7043: LD_VAR 0 10
7047: PPUSH
7048: CALL_OW 115
// end ;
7052: GO 6852
7054: POP
7055: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7056: LD_INT 22
7058: PUSH
7059: LD_VAR 0 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 21
7070: PUSH
7071: LD_INT 2
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 24
7080: PUSH
7081: LD_INT 1000
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 3
7090: PUSH
7091: LD_INT 58
7093: PUSH
7094: EMPTY
7095: LIST
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: LD_INT 34
7102: PUSH
7103: LD_INT 43
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: LD_INT 34
7112: PUSH
7113: LD_INT 44
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: LD_INT 34
7122: PUSH
7123: LD_INT 46
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: LIST
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: PPUSH
7147: CALL_OW 69
7151: PUSH
7152: LD_INT 0
7154: EQUAL
7155: IFFALSE 6594
// seeEnemy = 0 ;
7157: LD_ADDR_VAR 0 11
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
// end ;
7165: LD_VAR 0 5
7169: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7170: LD_INT 0
7172: PPUSH
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7178: LD_ADDR_VAR 0 8
7182: PUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 313
7192: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7193: LD_ADDR_VAR 0 9
7197: PUSH
7198: LD_VAR 0 3
7202: PPUSH
7203: LD_INT 22
7205: PUSH
7206: LD_VAR 0 1
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 25
7217: PUSH
7218: LD_INT 2
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 24
7227: PUSH
7228: LD_INT 750
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 3
7237: PUSH
7238: LD_INT 54
7240: PUSH
7241: EMPTY
7242: LIST
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: PPUSH
7254: CALL_OW 70
7258: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7259: LD_ADDR_VAR 0 6
7263: PUSH
7264: LD_VAR 0 3
7268: PPUSH
7269: LD_INT 22
7271: PUSH
7272: LD_VAR 0 1
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 21
7283: PUSH
7284: LD_INT 3
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 3
7293: PUSH
7294: LD_INT 24
7296: PUSH
7297: LD_INT 1000
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: PPUSH
7316: CALL_OW 70
7320: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7321: LD_VAR 0 6
7325: NOT
7326: PUSH
7327: LD_INT 22
7329: PUSH
7330: LD_VAR 0 1
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: LD_INT 25
7341: PUSH
7342: LD_INT 2
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 24
7351: PUSH
7352: LD_INT 250
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PPUSH
7364: CALL_OW 69
7368: NOT
7369: AND
7370: IFFALSE 7374
// exit ;
7372: GO 7556
// if buildings_list > 0 and engineerOkInside then
7374: LD_VAR 0 6
7378: PUSH
7379: LD_INT 0
7381: GREATER
7382: PUSH
7383: LD_VAR 0 8
7387: AND
7388: IFFALSE 7399
// ComExitBuilding ( engineerOkInside ) ;
7390: LD_VAR 0 8
7394: PPUSH
7395: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
7399: LD_VAR 0 6
7403: PUSH
7404: LD_INT 0
7406: GREATER
7407: PUSH
7408: LD_VAR 0 9
7412: PUSH
7413: LD_INT 0
7415: GREATER
7416: AND
7417: IFFALSE 7437
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
7419: LD_VAR 0 9
7423: PPUSH
7424: LD_VAR 0 6
7428: PUSH
7429: LD_INT 1
7431: ARRAY
7432: PPUSH
7433: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
7437: LD_VAR 0 6
7441: PUSH
7442: LD_INT 0
7444: EQUAL
7445: PUSH
7446: LD_VAR 0 4
7450: PUSH
7451: LD_INT 0
7453: EQUAL
7454: AND
7455: PUSH
7456: LD_VAR 0 9
7460: PUSH
7461: LD_INT 0
7463: GREATER
7464: AND
7465: IFFALSE 7481
// ComEnterUnit ( engineerOkOutside , building ) ;
7467: LD_VAR 0 9
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
7481: LD_VAR 0 9
7485: PUSH
7486: LD_INT 0
7488: GREATER
7489: PUSH
7490: LD_VAR 0 6
7494: PUSH
7495: LD_INT 0
7497: EQUAL
7498: AND
7499: PUSH
7500: LD_VAR 0 4
7504: PUSH
7505: LD_INT 0
7507: GREATER
7508: AND
7509: IFFALSE 7556
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7511: LD_VAR 0 9
7515: PPUSH
7516: LD_VAR 0 4
7520: PUSH
7521: LD_INT 1
7523: ARRAY
7524: PPUSH
7525: LD_VAR 0 4
7529: PUSH
7530: LD_INT 2
7532: ARRAY
7533: PPUSH
7534: LD_VAR 0 4
7538: PUSH
7539: LD_INT 3
7541: ARRAY
7542: PPUSH
7543: LD_VAR 0 4
7547: PUSH
7548: LD_INT 4
7550: ARRAY
7551: PPUSH
7552: CALL_OW 145
// end ;
7556: LD_VAR 0 5
7560: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
7561: LD_INT 0
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
7569: PPUSH
7570: PPUSH
7571: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
7572: LD_ADDR_VAR 0 6
7576: PUSH
7577: LD_INT 22
7579: PUSH
7580: LD_VAR 0 1
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 25
7591: PUSH
7592: LD_INT 4
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 23
7601: PUSH
7602: LD_INT 2
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 24
7611: PUSH
7612: LD_INT 251
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PPUSH
7625: CALL_OW 69
7629: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
7630: LD_ADDR_VAR 0 7
7634: PUSH
7635: LD_VAR 0 3
7639: PPUSH
7640: LD_INT 22
7642: PUSH
7643: LD_VAR 0 1
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: LD_INT 23
7654: PUSH
7655: LD_INT 2
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 25
7664: PUSH
7665: LD_INT 4
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 50
7674: PUSH
7675: EMPTY
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: PPUSH
7684: CALL_OW 70
7688: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
7689: LD_ADDR_VAR 0 10
7693: PUSH
7694: LD_VAR 0 3
7698: PPUSH
7699: LD_INT 22
7701: PUSH
7702: LD_VAR 0 1
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: LD_INT 21
7713: PUSH
7714: LD_INT 1
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 3
7723: PUSH
7724: LD_INT 25
7726: PUSH
7727: LD_INT 3
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PUSH
7738: LD_INT 3
7740: PUSH
7741: LD_INT 24
7743: PUSH
7744: LD_INT 750
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: PPUSH
7761: CALL_OW 70
7765: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7766: LD_ADDR_VAR 0 11
7770: PUSH
7771: LD_VAR 0 2
7775: PPUSH
7776: LD_INT 22
7778: PUSH
7779: LD_VAR 0 1
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: LD_INT 21
7790: PUSH
7791: LD_INT 1
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: LD_INT 25
7803: PUSH
7804: LD_INT 3
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 3
7817: PUSH
7818: LD_INT 24
7820: PUSH
7821: LD_INT 1000
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: PPUSH
7838: CALL_OW 70
7842: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
7843: LD_VAR 0 10
7847: NOT
7848: PUSH
7849: LD_VAR 0 11
7853: NOT
7854: AND
7855: PUSH
7856: LD_VAR 0 6
7860: NOT
7861: AND
7862: IFFALSE 7866
// exit ;
7864: GO 8100
// if damageUnits > 0 and sci_list > 0 then
7866: LD_VAR 0 10
7870: PUSH
7871: LD_INT 0
7873: GREATER
7874: PUSH
7875: LD_VAR 0 6
7879: PUSH
7880: LD_INT 0
7882: GREATER
7883: AND
7884: IFFALSE 7900
// ComMoveToArea ( damageUnits , healArea ) ;
7886: LD_VAR 0 10
7890: PPUSH
7891: LD_VAR 0 2
7895: PPUSH
7896: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
7900: LD_VAR 0 11
7904: PUSH
7905: LD_INT 0
7907: GREATER
7908: PUSH
7909: LD_VAR 0 6
7913: PUSH
7914: LD_INT 0
7916: GREATER
7917: AND
7918: IFFALSE 7929
// ComExitBuilding ( sci_list ) ;
7920: LD_VAR 0 6
7924: PPUSH
7925: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
7929: LD_VAR 0 11
7933: PUSH
7934: LD_INT 0
7936: GREATER
7937: PUSH
7938: LD_VAR 0 7
7942: PUSH
7943: LD_INT 0
7945: GREATER
7946: AND
7947: IFFALSE 7967
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
7949: LD_VAR 0 7
7953: PPUSH
7954: LD_VAR 0 11
7958: PUSH
7959: LD_INT 1
7961: ARRAY
7962: PPUSH
7963: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
7967: LD_VAR 0 10
7971: PUSH
7972: LD_INT 0
7974: EQUAL
7975: PUSH
7976: LD_VAR 0 11
7980: PUSH
7981: LD_INT 0
7983: EQUAL
7984: AND
7985: PUSH
7986: LD_VAR 0 7
7990: PUSH
7991: LD_INT 0
7993: GREATER
7994: AND
7995: IFFALSE 8100
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
7997: LD_ADDR_VAR 0 12
8001: PUSH
8002: LD_INT 22
8004: PUSH
8005: LD_VAR 0 1
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 21
8016: PUSH
8017: LD_INT 3
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 30
8026: PUSH
8027: LD_INT 8
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8044: LD_ADDR_VAR 0 13
8048: PUSH
8049: LD_INT 1
8051: PPUSH
8052: LD_VAR 0 12
8056: PPUSH
8057: CALL_OW 12
8061: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8062: LD_VAR 0 7
8066: PPUSH
8067: LD_INT 3
8069: PUSH
8070: LD_INT 60
8072: PUSH
8073: EMPTY
8074: LIST
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PPUSH
8080: CALL_OW 72
8084: PPUSH
8085: LD_VAR 0 12
8089: PUSH
8090: LD_VAR 0 13
8094: ARRAY
8095: PPUSH
8096: CALL_OW 120
// end ; end ;
8100: LD_VAR 0 5
8104: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8105: LD_INT 0
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
// tmpTab = [ ] ;
8111: LD_ADDR_VAR 0 6
8115: PUSH
8116: EMPTY
8117: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8118: LD_INT 22
8120: PUSH
8121: LD_VAR 0 1
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: LD_INT 32
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: PUSH
8149: LD_INT 0
8151: GREATER
8152: IFFALSE 8235
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8154: LD_ADDR_VAR 0 4
8158: PUSH
8159: LD_INT 22
8161: PUSH
8162: LD_VAR 0 1
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: LD_INT 30
8173: PUSH
8174: LD_INT 32
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PPUSH
8185: CALL_OW 69
8189: PUSH
8190: FOR_IN
8191: IFFALSE 8233
// begin for j in UnitsInside ( i ) do
8193: LD_ADDR_VAR 0 5
8197: PUSH
8198: LD_VAR 0 4
8202: PPUSH
8203: CALL_OW 313
8207: PUSH
8208: FOR_IN
8209: IFFALSE 8229
// tmpTab = tmpTab ^ j ;
8211: LD_ADDR_VAR 0 6
8215: PUSH
8216: LD_VAR 0 6
8220: PUSH
8221: LD_VAR 0 5
8225: ADD
8226: ST_TO_ADDR
8227: GO 8208
8229: POP
8230: POP
// end ;
8231: GO 8190
8233: POP
8234: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
8235: LD_VAR 0 6
8239: PPUSH
8240: LD_VAR 0 2
8244: PPUSH
8245: CALL_OW 250
8249: PPUSH
8250: LD_VAR 0 2
8254: PPUSH
8255: CALL_OW 251
8259: PPUSH
8260: CALL_OW 114
// end ;
8264: LD_VAR 0 3
8268: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
8269: LD_INT 0
8271: PPUSH
8272: PPUSH
8273: PPUSH
8274: PPUSH
// enable ;
8275: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
8276: LD_ADDR_VAR 0 7
8280: PUSH
8281: LD_VAR 0 3
8285: PPUSH
8286: CALL_OW 435
8290: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8291: LD_ADDR_VAR 0 6
8295: PUSH
8296: LD_INT 22
8298: PUSH
8299: LD_VAR 0 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: LD_INT 34
8310: PUSH
8311: LD_VAR 0 2
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PPUSH
8324: CALL_OW 69
8328: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8329: LD_VAR 0 6
8333: PUSH
8334: LD_INT 0
8336: GREATER
8337: PUSH
8338: LD_VAR 0 3
8342: PPUSH
8343: CALL_OW 435
8347: AND
8348: PUSH
8349: LD_VAR 0 7
8353: PUSH
8354: LD_INT 0
8356: GREATER
8357: AND
8358: IFFALSE 8407
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
8360: LD_VAR 0 6
8364: PUSH
8365: LD_INT 1
8367: ARRAY
8368: PPUSH
8369: LD_VAR 0 7
8373: PUSH
8374: LD_INT 1
8376: ARRAY
8377: PPUSH
8378: LD_VAR 0 7
8382: PUSH
8383: LD_INT 2
8385: ARRAY
8386: PPUSH
8387: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8391: LD_VAR 0 6
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: PPUSH
8400: LD_INT 100
8402: PPUSH
8403: CALL_OW 240
// end ; end ;
8407: LD_VAR 0 4
8411: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8412: LD_INT 0
8414: PPUSH
8415: PPUSH
8416: PPUSH
8417: PPUSH
8418: PPUSH
8419: PPUSH
8420: PPUSH
8421: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8422: LD_ADDR_VAR 0 6
8426: PUSH
8427: LD_VAR 0 2
8431: PPUSH
8432: LD_INT 22
8434: PUSH
8435: LD_VAR 0 1
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 56
8446: PUSH
8447: EMPTY
8448: LIST
8449: PUSH
8450: LD_INT 24
8452: PUSH
8453: LD_INT 700
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 3
8462: PUSH
8463: LD_INT 60
8465: PUSH
8466: EMPTY
8467: LIST
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: LD_INT 25
8478: PUSH
8479: LD_INT 1
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PUSH
8486: LD_INT 25
8488: PUSH
8489: LD_INT 5
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 25
8498: PUSH
8499: LD_INT 8
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 25
8508: PUSH
8509: LD_INT 9
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 70
8534: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8535: LD_ADDR_VAR 0 7
8539: PUSH
8540: LD_VAR 0 2
8544: PPUSH
8545: LD_INT 22
8547: PUSH
8548: LD_VAR 0 1
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 30
8559: PUSH
8560: LD_INT 32
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 58
8569: PUSH
8570: EMPTY
8571: LIST
8572: PUSH
8573: LD_INT 24
8575: PUSH
8576: LD_INT 251
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: PPUSH
8589: CALL_OW 70
8593: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8594: LD_ADDR_VAR 0 9
8598: PUSH
8599: LD_VAR 0 2
8603: PPUSH
8604: LD_INT 22
8606: PUSH
8607: LD_VAR 0 1
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: LD_INT 2
8618: PUSH
8619: LD_INT 30
8621: PUSH
8622: LD_INT 4
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 30
8631: PUSH
8632: LD_INT 5
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 24
8646: PUSH
8647: LD_INT 251
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: PPUSH
8659: CALL_OW 70
8663: ST_TO_ADDR
// if barrackList > 0 then
8664: LD_VAR 0 9
8668: PUSH
8669: LD_INT 0
8671: GREATER
8672: IFFALSE 8820
// begin if turretList = 0 then
8674: LD_VAR 0 7
8678: PUSH
8679: LD_INT 0
8681: EQUAL
8682: IFFALSE 8724
// begin if soldiers_list > 0 then
8684: LD_VAR 0 6
8688: PUSH
8689: LD_INT 0
8691: GREATER
8692: IFFALSE 8722
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8694: LD_VAR 0 6
8698: PPUSH
8699: LD_VAR 0 9
8703: PUSH
8704: LD_INT 1
8706: PPUSH
8707: LD_VAR 0 9
8711: PPUSH
8712: CALL_OW 12
8716: ARRAY
8717: PPUSH
8718: CALL_OW 120
// end else
8722: GO 8820
// begin for i in barrackList do
8724: LD_ADDR_VAR 0 4
8728: PUSH
8729: LD_VAR 0 9
8733: PUSH
8734: FOR_IN
8735: IFFALSE 8818
// begin insideUnits = UnitsInside ( i ) ;
8737: LD_ADDR_VAR 0 10
8741: PUSH
8742: LD_VAR 0 4
8746: PPUSH
8747: CALL_OW 313
8751: ST_TO_ADDR
// if insideUnits > 0 then
8752: LD_VAR 0 10
8756: PUSH
8757: LD_INT 0
8759: GREATER
8760: IFFALSE 8784
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8762: LD_VAR 0 10
8766: PUSH
8767: LD_INT 1
8769: ARRAY
8770: PPUSH
8771: LD_VAR 0 7
8775: PUSH
8776: LD_INT 1
8778: ARRAY
8779: PPUSH
8780: CALL_OW 120
// if soldiers_list > 0 then
8784: LD_VAR 0 6
8788: PUSH
8789: LD_INT 0
8791: GREATER
8792: IFFALSE 8816
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8794: LD_VAR 0 6
8798: PUSH
8799: LD_INT 1
8801: ARRAY
8802: PPUSH
8803: LD_VAR 0 7
8807: PUSH
8808: LD_INT 1
8810: ARRAY
8811: PPUSH
8812: CALL_OW 120
// end ;
8816: GO 8734
8818: POP
8819: POP
// end ; end ; end ;
8820: LD_VAR 0 3
8824: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
8825: LD_INT 0
8827: PPUSH
8828: PPUSH
8829: PPUSH
8830: PPUSH
8831: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
8832: LD_ADDR_VAR 0 6
8836: PUSH
8837: LD_INT 22
8839: PUSH
8840: LD_VAR 0 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 2
8851: PUSH
8852: LD_INT 30
8854: PUSH
8855: LD_INT 31
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: LD_INT 30
8864: PUSH
8865: LD_INT 32
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 30
8874: PUSH
8875: LD_INT 33
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 30
8884: PUSH
8885: LD_INT 4
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 30
8894: PUSH
8895: LD_INT 5
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8919: LD_ADDR_VAR 0 7
8923: PUSH
8924: LD_INT 22
8926: PUSH
8927: LD_VAR 0 2
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: LD_INT 21
8938: PUSH
8939: LD_INT 3
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 58
8948: PUSH
8949: EMPTY
8950: LIST
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: LIST
8956: PPUSH
8957: CALL_OW 69
8961: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8962: LD_VAR 0 6
8966: PUSH
8967: LD_INT 0
8969: GREATER
8970: PUSH
8971: LD_VAR 0 7
8975: PUSH
8976: LD_INT 0
8978: GREATER
8979: AND
8980: IFFALSE 9050
// begin for i in turretsList do
8982: LD_ADDR_VAR 0 4
8986: PUSH
8987: LD_VAR 0 6
8991: PUSH
8992: FOR_IN
8993: IFFALSE 9048
// begin for j in enemyBuildings do
8995: LD_ADDR_VAR 0 5
8999: PUSH
9000: LD_VAR 0 7
9004: PUSH
9005: FOR_IN
9006: IFFALSE 9044
// begin if GetDistUnits ( i , j ) < 20 then
9008: LD_VAR 0 4
9012: PPUSH
9013: LD_VAR 0 5
9017: PPUSH
9018: CALL_OW 296
9022: PUSH
9023: LD_INT 20
9025: LESS
9026: IFFALSE 9042
// begin ComAttackUnit ( i , j ) ;
9028: LD_VAR 0 4
9032: PPUSH
9033: LD_VAR 0 5
9037: PPUSH
9038: CALL_OW 115
// end ; end ;
9042: GO 9005
9044: POP
9045: POP
// end ;
9046: GO 8992
9048: POP
9049: POP
// end ; end ;
9050: LD_VAR 0 3
9054: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
9055: LD_INT 0
9057: PPUSH
9058: PPUSH
9059: PPUSH
9060: PPUSH
9061: PPUSH
9062: PPUSH
9063: PPUSH
9064: PPUSH
9065: PPUSH
9066: PPUSH
9067: PPUSH
// for i = 1 to medicCount do
9068: LD_ADDR_VAR 0 14
9072: PUSH
9073: DOUBLE
9074: LD_INT 1
9076: DEC
9077: ST_TO_ADDR
9078: LD_VAR 0 7
9082: PUSH
9083: FOR_TO
9084: IFFALSE 9166
// begin uc_side = side ;
9086: LD_ADDR_OWVAR 20
9090: PUSH
9091: LD_VAR 0 1
9095: ST_TO_ADDR
// uc_nation = nation ;
9096: LD_ADDR_OWVAR 21
9100: PUSH
9101: LD_VAR 0 2
9105: ST_TO_ADDR
// hc_name =  ;
9106: LD_ADDR_OWVAR 26
9110: PUSH
9111: LD_STRING 
9113: ST_TO_ADDR
// hc_gallery =  ;
9114: LD_ADDR_OWVAR 33
9118: PUSH
9119: LD_STRING 
9121: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
9122: LD_INT 0
9124: PPUSH
9125: LD_INT 4
9127: PPUSH
9128: LD_VAR 0 8
9132: PPUSH
9133: CALL_OW 380
// un = CreateHuman ;
9137: LD_ADDR_VAR 0 16
9141: PUSH
9142: CALL_OW 44
9146: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9147: LD_VAR 0 16
9151: PPUSH
9152: LD_VAR 0 9
9156: PPUSH
9157: LD_INT 0
9159: PPUSH
9160: CALL_OW 49
// end ;
9164: GO 9083
9166: POP
9167: POP
// for i = 1 to soldierCount do
9168: LD_ADDR_VAR 0 14
9172: PUSH
9173: DOUBLE
9174: LD_INT 1
9176: DEC
9177: ST_TO_ADDR
9178: LD_VAR 0 3
9182: PUSH
9183: FOR_TO
9184: IFFALSE 9266
// begin uc_side = side ;
9186: LD_ADDR_OWVAR 20
9190: PUSH
9191: LD_VAR 0 1
9195: ST_TO_ADDR
// uc_nation = nation ;
9196: LD_ADDR_OWVAR 21
9200: PUSH
9201: LD_VAR 0 2
9205: ST_TO_ADDR
// hc_name =  ;
9206: LD_ADDR_OWVAR 26
9210: PUSH
9211: LD_STRING 
9213: ST_TO_ADDR
// hc_gallery =  ;
9214: LD_ADDR_OWVAR 33
9218: PUSH
9219: LD_STRING 
9221: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9222: LD_INT 0
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: LD_VAR 0 8
9232: PPUSH
9233: CALL_OW 380
// un = CreateHuman ;
9237: LD_ADDR_VAR 0 16
9241: PUSH
9242: CALL_OW 44
9246: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9247: LD_VAR 0 16
9251: PPUSH
9252: LD_VAR 0 9
9256: PPUSH
9257: LD_INT 0
9259: PPUSH
9260: CALL_OW 49
// end ;
9264: GO 9183
9266: POP
9267: POP
// for i = 1 to sniperCount do
9268: LD_ADDR_VAR 0 14
9272: PUSH
9273: DOUBLE
9274: LD_INT 1
9276: DEC
9277: ST_TO_ADDR
9278: LD_VAR 0 4
9282: PUSH
9283: FOR_TO
9284: IFFALSE 9366
// begin uc_side = side ;
9286: LD_ADDR_OWVAR 20
9290: PUSH
9291: LD_VAR 0 1
9295: ST_TO_ADDR
// uc_nation = nation ;
9296: LD_ADDR_OWVAR 21
9300: PUSH
9301: LD_VAR 0 2
9305: ST_TO_ADDR
// hc_name =  ;
9306: LD_ADDR_OWVAR 26
9310: PUSH
9311: LD_STRING 
9313: ST_TO_ADDR
// hc_gallery =  ;
9314: LD_ADDR_OWVAR 33
9318: PUSH
9319: LD_STRING 
9321: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9322: LD_INT 0
9324: PPUSH
9325: LD_INT 5
9327: PPUSH
9328: LD_VAR 0 8
9332: PPUSH
9333: CALL_OW 380
// un = CreateHuman ;
9337: LD_ADDR_VAR 0 16
9341: PUSH
9342: CALL_OW 44
9346: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9347: LD_VAR 0 16
9351: PPUSH
9352: LD_VAR 0 9
9356: PPUSH
9357: LD_INT 0
9359: PPUSH
9360: CALL_OW 49
// end ;
9364: GO 9283
9366: POP
9367: POP
// for i = 1 to bazookCount do
9368: LD_ADDR_VAR 0 14
9372: PUSH
9373: DOUBLE
9374: LD_INT 1
9376: DEC
9377: ST_TO_ADDR
9378: LD_VAR 0 5
9382: PUSH
9383: FOR_TO
9384: IFFALSE 9466
// begin uc_side = side ;
9386: LD_ADDR_OWVAR 20
9390: PUSH
9391: LD_VAR 0 1
9395: ST_TO_ADDR
// uc_nation = nation ;
9396: LD_ADDR_OWVAR 21
9400: PUSH
9401: LD_VAR 0 2
9405: ST_TO_ADDR
// hc_name =  ;
9406: LD_ADDR_OWVAR 26
9410: PUSH
9411: LD_STRING 
9413: ST_TO_ADDR
// hc_gallery =  ;
9414: LD_ADDR_OWVAR 33
9418: PUSH
9419: LD_STRING 
9421: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9422: LD_INT 0
9424: PPUSH
9425: LD_INT 9
9427: PPUSH
9428: LD_VAR 0 8
9432: PPUSH
9433: CALL_OW 380
// un = CreateHuman ;
9437: LD_ADDR_VAR 0 16
9441: PUSH
9442: CALL_OW 44
9446: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9447: LD_VAR 0 16
9451: PPUSH
9452: LD_VAR 0 9
9456: PPUSH
9457: LD_INT 0
9459: PPUSH
9460: CALL_OW 49
// end ;
9464: GO 9383
9466: POP
9467: POP
// for i = 1 to mortalCount do
9468: LD_ADDR_VAR 0 14
9472: PUSH
9473: DOUBLE
9474: LD_INT 1
9476: DEC
9477: ST_TO_ADDR
9478: LD_VAR 0 6
9482: PUSH
9483: FOR_TO
9484: IFFALSE 9566
// begin uc_side = side ;
9486: LD_ADDR_OWVAR 20
9490: PUSH
9491: LD_VAR 0 1
9495: ST_TO_ADDR
// uc_nation = nation ;
9496: LD_ADDR_OWVAR 21
9500: PUSH
9501: LD_VAR 0 2
9505: ST_TO_ADDR
// hc_name =  ;
9506: LD_ADDR_OWVAR 26
9510: PUSH
9511: LD_STRING 
9513: ST_TO_ADDR
// hc_gallery =  ;
9514: LD_ADDR_OWVAR 33
9518: PUSH
9519: LD_STRING 
9521: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9522: LD_INT 0
9524: PPUSH
9525: LD_INT 8
9527: PPUSH
9528: LD_VAR 0 8
9532: PPUSH
9533: CALL_OW 380
// un = CreateHuman ;
9537: LD_ADDR_VAR 0 16
9541: PUSH
9542: CALL_OW 44
9546: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9547: LD_VAR 0 16
9551: PPUSH
9552: LD_VAR 0 9
9556: PPUSH
9557: LD_INT 0
9559: PPUSH
9560: CALL_OW 49
// end ;
9564: GO 9483
9566: POP
9567: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9568: LD_ADDR_VAR 0 19
9572: PUSH
9573: LD_INT 22
9575: PUSH
9576: LD_VAR 0 1
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PUSH
9585: LD_INT 2
9587: PUSH
9588: LD_INT 25
9590: PUSH
9591: LD_INT 1
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 25
9600: PUSH
9601: LD_INT 5
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 25
9610: PUSH
9611: LD_INT 8
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 25
9620: PUSH
9621: LD_INT 9
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PPUSH
9639: CALL_OW 69
9643: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9644: LD_ADDR_VAR 0 18
9648: PUSH
9649: LD_INT 22
9651: PUSH
9652: LD_VAR 0 1
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: LD_INT 25
9663: PUSH
9664: LD_INT 4
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PPUSH
9675: CALL_OW 69
9679: ST_TO_ADDR
// for i in medic_list do
9680: LD_ADDR_VAR 0 14
9684: PUSH
9685: LD_VAR 0 18
9689: PUSH
9690: FOR_IN
9691: IFFALSE 9709
// ComMoveToArea ( i , healArea ) ;
9693: LD_VAR 0 14
9697: PPUSH
9698: LD_VAR 0 10
9702: PPUSH
9703: CALL_OW 113
9707: GO 9690
9709: POP
9710: POP
// if strategy = 1 then
9711: LD_VAR 0 12
9715: PUSH
9716: LD_INT 1
9718: EQUAL
9719: IFFALSE 10424
// begin repeat wait ( 0 0$3 ) ;
9721: LD_INT 105
9723: PPUSH
9724: CALL_OW 67
// for i in soldiersOK_list do
9728: LD_ADDR_VAR 0 14
9732: PUSH
9733: LD_VAR 0 19
9737: PUSH
9738: FOR_IN
9739: IFFALSE 9773
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
9741: LD_VAR 0 14
9745: PPUSH
9746: LD_INT 80
9748: PPUSH
9749: LD_INT 109
9751: PPUSH
9752: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
9756: LD_VAR 0 14
9760: PPUSH
9761: LD_INT 39
9763: PPUSH
9764: LD_INT 49
9766: PPUSH
9767: CALL_OW 174
// end ;
9771: GO 9738
9773: POP
9774: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
9775: LD_INT 15
9777: PPUSH
9778: LD_INT 22
9780: PUSH
9781: LD_VAR 0 1
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PPUSH
9790: CALL_OW 70
9794: PUSH
9795: LD_INT 0
9797: GREATER
9798: IFFALSE 9721
// repeat wait ( 0 0$1 ) ;
9800: LD_INT 35
9802: PPUSH
9803: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9807: LD_ADDR_VAR 0 17
9811: PUSH
9812: LD_INT 22
9814: PUSH
9815: LD_VAR 0 1
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 1
9826: PUSH
9827: LD_INT 3
9829: PUSH
9830: LD_INT 24
9832: PUSH
9833: LD_INT 550
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: LD_INT 24
9846: PUSH
9847: LD_INT 250
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: LIST
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PPUSH
9863: CALL_OW 69
9867: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9868: LD_ADDR_VAR 0 19
9872: PUSH
9873: LD_INT 22
9875: PUSH
9876: LD_VAR 0 1
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: LD_INT 2
9887: PUSH
9888: LD_INT 25
9890: PUSH
9891: LD_INT 1
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: LD_INT 25
9900: PUSH
9901: LD_INT 5
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 25
9910: PUSH
9911: LD_INT 8
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 25
9920: PUSH
9921: LD_INT 9
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 24
9937: PUSH
9938: LD_INT 1000
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: PPUSH
9950: CALL_OW 69
9954: ST_TO_ADDR
// if medicCount > 0 then
9955: LD_VAR 0 7
9959: PUSH
9960: LD_INT 0
9962: GREATER
9963: IFFALSE 10037
// begin if damageUnit_list > 0 then
9965: LD_VAR 0 17
9969: PUSH
9970: LD_INT 0
9972: GREATER
9973: IFFALSE 10037
// begin for i in damageUnit_list do
9975: LD_ADDR_VAR 0 14
9979: PUSH
9980: LD_VAR 0 17
9984: PUSH
9985: FOR_IN
9986: IFFALSE 10035
// begin ComMoveToArea ( i , healArea ) ;
9988: LD_VAR 0 14
9992: PPUSH
9993: LD_VAR 0 10
9997: PPUSH
9998: CALL_OW 113
// for j in medic_list do
10002: LD_ADDR_VAR 0 15
10006: PUSH
10007: LD_VAR 0 18
10011: PUSH
10012: FOR_IN
10013: IFFALSE 10031
// AddComHeal ( j , i ) ;
10015: LD_VAR 0 15
10019: PPUSH
10020: LD_VAR 0 14
10024: PPUSH
10025: CALL_OW 188
10029: GO 10012
10031: POP
10032: POP
// end ;
10033: GO 9985
10035: POP
10036: POP
// end ; end ; for i in soldiersOK_list do
10037: LD_ADDR_VAR 0 14
10041: PUSH
10042: LD_VAR 0 19
10046: PUSH
10047: FOR_IN
10048: IFFALSE 10224
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10050: LD_ADDR_VAR 0 22
10054: PUSH
10055: LD_INT 22
10057: PUSH
10058: LD_VAR 0 11
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PPUSH
10067: CALL_OW 69
10071: PPUSH
10072: LD_VAR 0 14
10076: PPUSH
10077: CALL_OW 74
10081: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10082: LD_ADDR_VAR 0 23
10086: PUSH
10087: LD_INT 22
10089: PUSH
10090: LD_VAR 0 11
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 2
10101: PUSH
10102: LD_INT 59
10104: PUSH
10105: EMPTY
10106: LIST
10107: PUSH
10108: LD_INT 21
10110: PUSH
10111: LD_INT 1
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 21
10120: PUSH
10121: LD_INT 2
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: PPUSH
10141: CALL_OW 69
10145: PPUSH
10146: LD_VAR 0 14
10150: PPUSH
10151: CALL_OW 74
10155: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10156: LD_VAR 0 14
10160: PPUSH
10161: LD_VAR 0 22
10165: PPUSH
10166: CALL_OW 296
10170: PUSH
10171: LD_INT 8
10173: PLUS
10174: PUSH
10175: LD_VAR 0 14
10179: PPUSH
10180: LD_VAR 0 23
10184: PPUSH
10185: CALL_OW 296
10189: LESS
10190: IFFALSE 10208
// begin ComAttackUnit ( i , target1 ) ;
10192: LD_VAR 0 14
10196: PPUSH
10197: LD_VAR 0 22
10201: PPUSH
10202: CALL_OW 115
// end else
10206: GO 10222
// begin ComAttackUnit ( i , target2 ) ;
10208: LD_VAR 0 14
10212: PPUSH
10213: LD_VAR 0 23
10217: PPUSH
10218: CALL_OW 115
// end ; end ;
10222: GO 10047
10224: POP
10225: POP
// for i in soldiersOK_list do
10226: LD_ADDR_VAR 0 14
10230: PUSH
10231: LD_VAR 0 19
10235: PUSH
10236: FOR_IN
10237: IFFALSE 10413
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10239: LD_ADDR_VAR 0 22
10243: PUSH
10244: LD_INT 22
10246: PUSH
10247: LD_VAR 0 11
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PPUSH
10256: CALL_OW 69
10260: PPUSH
10261: LD_VAR 0 14
10265: PPUSH
10266: CALL_OW 74
10270: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10271: LD_ADDR_VAR 0 23
10275: PUSH
10276: LD_INT 22
10278: PUSH
10279: LD_VAR 0 11
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: LD_INT 2
10290: PUSH
10291: LD_INT 59
10293: PUSH
10294: EMPTY
10295: LIST
10296: PUSH
10297: LD_INT 21
10299: PUSH
10300: LD_INT 1
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 21
10309: PUSH
10310: LD_INT 2
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: PPUSH
10330: CALL_OW 69
10334: PPUSH
10335: LD_VAR 0 14
10339: PPUSH
10340: CALL_OW 74
10344: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10345: LD_VAR 0 14
10349: PPUSH
10350: LD_VAR 0 22
10354: PPUSH
10355: CALL_OW 296
10359: PUSH
10360: LD_INT 8
10362: PLUS
10363: PUSH
10364: LD_VAR 0 14
10368: PPUSH
10369: LD_VAR 0 23
10373: PPUSH
10374: CALL_OW 296
10378: LESS
10379: IFFALSE 10397
// begin ComAttackUnit ( i , target1 ) ;
10381: LD_VAR 0 14
10385: PPUSH
10386: LD_VAR 0 22
10390: PPUSH
10391: CALL_OW 115
// end else
10395: GO 10411
// begin ComAttackUnit ( i , target2 ) ;
10397: LD_VAR 0 14
10401: PPUSH
10402: LD_VAR 0 23
10406: PPUSH
10407: CALL_OW 115
// end ; end ;
10411: GO 10236
10413: POP
10414: POP
// until soldiersOK_list = [ ] ;
10415: LD_VAR 0 19
10419: PUSH
10420: EMPTY
10421: EQUAL
10422: IFFALSE 9800
// end ; if strategy = 2 then
10424: LD_VAR 0 12
10428: PUSH
10429: LD_INT 2
10431: EQUAL
10432: IFFALSE 11137
// begin repeat wait ( 0 0$1 ) ;
10434: LD_INT 35
10436: PPUSH
10437: CALL_OW 67
// for i in soldiersOK_list do
10441: LD_ADDR_VAR 0 14
10445: PUSH
10446: LD_VAR 0 19
10450: PUSH
10451: FOR_IN
10452: IFFALSE 10486
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
10454: LD_VAR 0 14
10458: PPUSH
10459: LD_INT 117
10461: PPUSH
10462: LD_INT 97
10464: PPUSH
10465: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
10469: LD_VAR 0 14
10473: PPUSH
10474: LD_INT 94
10476: PPUSH
10477: LD_INT 50
10479: PPUSH
10480: CALL_OW 174
// end ;
10484: GO 10451
10486: POP
10487: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
10488: LD_INT 16
10490: PPUSH
10491: LD_INT 22
10493: PUSH
10494: LD_VAR 0 1
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PPUSH
10503: CALL_OW 70
10507: PUSH
10508: LD_INT 0
10510: GREATER
10511: IFFALSE 10434
// repeat wait ( 0 0$3 ) ;
10513: LD_INT 105
10515: PPUSH
10516: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10520: LD_ADDR_VAR 0 17
10524: PUSH
10525: LD_INT 22
10527: PUSH
10528: LD_VAR 0 1
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: LD_INT 1
10539: PUSH
10540: LD_INT 3
10542: PUSH
10543: LD_INT 24
10545: PUSH
10546: LD_INT 550
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 24
10559: PUSH
10560: LD_INT 250
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 69
10580: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10581: LD_ADDR_VAR 0 19
10585: PUSH
10586: LD_INT 22
10588: PUSH
10589: LD_VAR 0 1
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 2
10600: PUSH
10601: LD_INT 25
10603: PUSH
10604: LD_INT 1
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 25
10613: PUSH
10614: LD_INT 5
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 25
10623: PUSH
10624: LD_INT 8
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 25
10633: PUSH
10634: LD_INT 9
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 24
10650: PUSH
10651: LD_INT 1000
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: LIST
10662: PPUSH
10663: CALL_OW 69
10667: ST_TO_ADDR
// if medicCount > 0 then
10668: LD_VAR 0 7
10672: PUSH
10673: LD_INT 0
10675: GREATER
10676: IFFALSE 10750
// begin if damageUnit_list > 0 then
10678: LD_VAR 0 17
10682: PUSH
10683: LD_INT 0
10685: GREATER
10686: IFFALSE 10750
// begin for i in damageUnit_list do
10688: LD_ADDR_VAR 0 14
10692: PUSH
10693: LD_VAR 0 17
10697: PUSH
10698: FOR_IN
10699: IFFALSE 10748
// begin ComMoveToArea ( i , healArea ) ;
10701: LD_VAR 0 14
10705: PPUSH
10706: LD_VAR 0 10
10710: PPUSH
10711: CALL_OW 113
// for j in medic_list do
10715: LD_ADDR_VAR 0 15
10719: PUSH
10720: LD_VAR 0 18
10724: PUSH
10725: FOR_IN
10726: IFFALSE 10744
// AddComHeal ( j , i ) ;
10728: LD_VAR 0 15
10732: PPUSH
10733: LD_VAR 0 14
10737: PPUSH
10738: CALL_OW 188
10742: GO 10725
10744: POP
10745: POP
// end ;
10746: GO 10698
10748: POP
10749: POP
// end ; end ; for i in soldiersOK_list do
10750: LD_ADDR_VAR 0 14
10754: PUSH
10755: LD_VAR 0 19
10759: PUSH
10760: FOR_IN
10761: IFFALSE 10937
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10763: LD_ADDR_VAR 0 22
10767: PUSH
10768: LD_INT 22
10770: PUSH
10771: LD_VAR 0 11
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PPUSH
10780: CALL_OW 69
10784: PPUSH
10785: LD_VAR 0 14
10789: PPUSH
10790: CALL_OW 74
10794: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10795: LD_ADDR_VAR 0 23
10799: PUSH
10800: LD_INT 22
10802: PUSH
10803: LD_VAR 0 11
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 2
10814: PUSH
10815: LD_INT 59
10817: PUSH
10818: EMPTY
10819: LIST
10820: PUSH
10821: LD_INT 21
10823: PUSH
10824: LD_INT 1
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: LD_INT 21
10833: PUSH
10834: LD_INT 2
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: PPUSH
10854: CALL_OW 69
10858: PPUSH
10859: LD_VAR 0 14
10863: PPUSH
10864: CALL_OW 74
10868: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10869: LD_VAR 0 14
10873: PPUSH
10874: LD_VAR 0 22
10878: PPUSH
10879: CALL_OW 296
10883: PUSH
10884: LD_INT 8
10886: PLUS
10887: PUSH
10888: LD_VAR 0 14
10892: PPUSH
10893: LD_VAR 0 23
10897: PPUSH
10898: CALL_OW 296
10902: LESS
10903: IFFALSE 10921
// begin ComAttackUnit ( i , target1 ) ;
10905: LD_VAR 0 14
10909: PPUSH
10910: LD_VAR 0 22
10914: PPUSH
10915: CALL_OW 115
// end else
10919: GO 10935
// begin ComAttackUnit ( i , target2 ) ;
10921: LD_VAR 0 14
10925: PPUSH
10926: LD_VAR 0 23
10930: PPUSH
10931: CALL_OW 115
// end ; end ;
10935: GO 10760
10937: POP
10938: POP
// for i in soldiersOK_list do
10939: LD_ADDR_VAR 0 14
10943: PUSH
10944: LD_VAR 0 19
10948: PUSH
10949: FOR_IN
10950: IFFALSE 11126
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10952: LD_ADDR_VAR 0 22
10956: PUSH
10957: LD_INT 22
10959: PUSH
10960: LD_VAR 0 11
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PPUSH
10969: CALL_OW 69
10973: PPUSH
10974: LD_VAR 0 14
10978: PPUSH
10979: CALL_OW 74
10983: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10984: LD_ADDR_VAR 0 23
10988: PUSH
10989: LD_INT 22
10991: PUSH
10992: LD_VAR 0 11
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 2
11003: PUSH
11004: LD_INT 59
11006: PUSH
11007: EMPTY
11008: LIST
11009: PUSH
11010: LD_INT 21
11012: PUSH
11013: LD_INT 1
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: LD_INT 21
11022: PUSH
11023: LD_INT 2
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: EMPTY
11041: LIST
11042: PPUSH
11043: CALL_OW 69
11047: PPUSH
11048: LD_VAR 0 14
11052: PPUSH
11053: CALL_OW 74
11057: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11058: LD_VAR 0 14
11062: PPUSH
11063: LD_VAR 0 22
11067: PPUSH
11068: CALL_OW 296
11072: PUSH
11073: LD_INT 8
11075: PLUS
11076: PUSH
11077: LD_VAR 0 14
11081: PPUSH
11082: LD_VAR 0 23
11086: PPUSH
11087: CALL_OW 296
11091: LESS
11092: IFFALSE 11110
// begin ComAttackUnit ( i , target1 ) ;
11094: LD_VAR 0 14
11098: PPUSH
11099: LD_VAR 0 22
11103: PPUSH
11104: CALL_OW 115
// end else
11108: GO 11124
// begin ComAttackUnit ( i , target2 ) ;
11110: LD_VAR 0 14
11114: PPUSH
11115: LD_VAR 0 23
11119: PPUSH
11120: CALL_OW 115
// end ; end ;
11124: GO 10949
11126: POP
11127: POP
// until soldiersOK_list = [ ] ;
11128: LD_VAR 0 19
11132: PUSH
11133: EMPTY
11134: EQUAL
11135: IFFALSE 10513
// end ; end ; end_of_file
11137: LD_VAR 0 13
11141: RET
// every 0 0$01 do
11142: GO 11144
11144: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11145: LD_INT 22
11147: PUSH
11148: LD_INT 1
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 25
11157: PUSH
11158: LD_INT 2
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 69
11173: PUSH
11174: LD_INT 0
11176: EQUAL
11177: IFFALSE 11191
// SetClass ( JMM , 2 ) ;
11179: LD_EXP 1
11183: PPUSH
11184: LD_INT 2
11186: PPUSH
11187: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11191: LD_STRING M1
11193: PPUSH
11194: CALL_OW 337
// case difficulty of 1 :
11198: LD_OWVAR 67
11202: PUSH
11203: LD_INT 1
11205: DOUBLE
11206: EQUAL
11207: IFTRUE 11211
11209: GO 11221
11211: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11212: LD_STRING M1-1
11214: PPUSH
11215: CALL_OW 337
11219: GO 11258
11221: LD_INT 2
11223: DOUBLE
11224: EQUAL
11225: IFTRUE 11229
11227: GO 11239
11229: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11230: LD_STRING M1-2
11232: PPUSH
11233: CALL_OW 337
11237: GO 11258
11239: LD_INT 3
11241: DOUBLE
11242: EQUAL
11243: IFTRUE 11247
11245: GO 11257
11247: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
11248: LD_STRING M1-3
11250: PPUSH
11251: CALL_OW 337
11255: GO 11258
11257: POP
// ChangeMissionObjectives ( M1cont ) ;
11258: LD_STRING M1cont
11260: PPUSH
11261: CALL_OW 337
// SaveForQuickRestart ;
11265: CALL_OW 22
// Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
11269: LD_INT 350
11271: PPUSH
11272: LD_INT 875
11274: PPUSH
11275: CALL_OW 12
11279: PPUSH
11280: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
11284: LD_INT 5
11286: PPUSH
11287: LD_INT 4
11289: PPUSH
11290: LD_INT 1
11292: PPUSH
11293: CALL_OW 55
// end ;
11297: END
// every 0 0$15 trigger firstCrateSpawn do
11298: LD_EXP 41
11302: IFFALSE 11641
11304: GO 11306
11306: DISABLE
// begin if IsOk ( Lisa ) then
11307: LD_EXP 2
11311: PPUSH
11312: CALL_OW 302
11316: IFFALSE 11332
// Say ( Lisa , DR0-Lisa-1 ) else
11318: LD_EXP 2
11322: PPUSH
11323: LD_STRING DR0-Lisa-1
11325: PPUSH
11326: CALL_OW 88
11330: GO 11466
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11332: LD_INT 22
11334: PUSH
11335: LD_INT 1
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 21
11344: PUSH
11345: LD_INT 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 26
11354: PUSH
11355: LD_INT 1
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 2
11364: PUSH
11365: LD_INT 25
11367: PUSH
11368: LD_INT 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 25
11377: PUSH
11378: LD_INT 2
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 25
11387: PUSH
11388: LD_INT 3
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 25
11397: PUSH
11398: LD_INT 4
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: PPUSH
11418: CALL_OW 69
11422: PUSH
11423: LD_EXP 1
11427: PUSH
11428: LD_EXP 8
11432: PUSH
11433: LD_EXP 5
11437: PUSH
11438: LD_EXP 6
11442: PUSH
11443: LD_EXP 7
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: DIFF
11455: PPUSH
11456: LD_STRING DR0-Sol1-1
11458: PPUSH
11459: LD_STRING DR0-Sol1-1
11461: PPUSH
11462: CALL 5256 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11466: LD_INT 22
11468: PUSH
11469: LD_INT 1
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 21
11478: PUSH
11479: LD_INT 1
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 26
11488: PUSH
11489: LD_INT 1
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 2
11498: PUSH
11499: LD_INT 25
11501: PUSH
11502: LD_INT 1
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 25
11511: PUSH
11512: LD_INT 2
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 25
11521: PUSH
11522: LD_INT 3
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 25
11531: PUSH
11532: LD_INT 4
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: PPUSH
11552: CALL_OW 69
11556: PUSH
11557: LD_EXP 1
11561: PUSH
11562: LD_EXP 8
11566: PUSH
11567: LD_EXP 5
11571: PUSH
11572: LD_EXP 2
11576: PUSH
11577: LD_EXP 6
11581: PUSH
11582: LD_EXP 7
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: DIFF
11595: PPUSH
11596: LD_STRING DR0-Sol2-1
11598: PPUSH
11599: LD_STRING DR0-Sol2-1
11601: PPUSH
11602: CALL 5256 0 3
// if IsOk ( Cyrus ) then
11606: LD_EXP 4
11610: PPUSH
11611: CALL_OW 302
11615: IFFALSE 11629
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11617: LD_EXP 4
11621: PPUSH
11622: LD_STRING DR0-Cyrus-1
11624: PPUSH
11625: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
11629: LD_EXP 1
11633: PPUSH
11634: LD_STRING DR0-JMM-1
11636: PPUSH
11637: CALL_OW 88
// end ;
11641: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
11642: LD_EXP 5
11646: PPUSH
11647: CALL_OW 302
11651: PUSH
11652: LD_INT 22
11654: PUSH
11655: LD_INT 1
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: LD_INT 25
11664: PUSH
11665: LD_INT 16
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 69
11680: PUSH
11681: LD_INT 0
11683: GREATER
11684: AND
11685: IFFALSE 11963
11687: GO 11689
11689: DISABLE
// begin DialogueOn ;
11690: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11694: LD_EXP 5
11698: PPUSH
11699: LD_STRING D10-Frank-1
11701: PPUSH
11702: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11706: LD_INT 22
11708: PUSH
11709: LD_INT 1
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: LD_INT 21
11718: PUSH
11719: LD_INT 1
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 2
11728: PUSH
11729: LD_INT 25
11731: PUSH
11732: LD_INT 1
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: LD_INT 25
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 3
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 25
11761: PUSH
11762: LD_INT 4
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: LIST
11780: PPUSH
11781: CALL_OW 69
11785: PUSH
11786: LD_EXP 1
11790: PUSH
11791: LD_EXP 5
11795: PUSH
11796: LD_EXP 2
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: DIFF
11806: PPUSH
11807: LD_STRING D10-Sol1-1
11809: PPUSH
11810: LD_STRING D10-FSol1-1
11812: PPUSH
11813: CALL 5256 0 3
// Say ( Frank , D10-Frank-2 ) ;
11817: LD_EXP 5
11821: PPUSH
11822: LD_STRING D10-Frank-2
11824: PPUSH
11825: CALL_OW 88
// if IsOK ( Lisa ) then
11829: LD_EXP 2
11833: PPUSH
11834: CALL_OW 302
11838: IFFALSE 11854
// begin Say ( Lisa , D10-Lisa-2 ) ;
11840: LD_EXP 2
11844: PPUSH
11845: LD_STRING D10-Lisa-2
11847: PPUSH
11848: CALL_OW 88
// end else
11852: GO 11959
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11854: LD_INT 22
11856: PUSH
11857: LD_INT 1
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 21
11866: PUSH
11867: LD_INT 1
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 2
11876: PUSH
11877: LD_INT 25
11879: PUSH
11880: LD_INT 1
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: LD_INT 25
11889: PUSH
11890: LD_INT 2
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 25
11899: PUSH
11900: LD_INT 3
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 25
11909: PUSH
11910: LD_INT 4
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: LIST
11928: PPUSH
11929: CALL_OW 69
11933: PUSH
11934: LD_EXP 1
11938: PUSH
11939: LD_EXP 5
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: DIFF
11948: PPUSH
11949: LD_STRING D10-Sol1-2
11951: PPUSH
11952: LD_STRING D10-FSol1-2
11954: PPUSH
11955: CALL 5256 0 3
// end ; DialogueOff ;
11959: CALL_OW 7
// end ;
11963: END
// every 10 10$30 do
11964: GO 11966
11966: DISABLE
// begin HarrisonSupport ;
11967: CALL 2184 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11971: LD_EXP 17
11975: PPUSH
11976: CALL_OW 310
11980: PPUSH
11981: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11985: LD_EXP 17
11989: PPUSH
11990: LD_STRING DEng-Eng1-1
11992: PPUSH
11993: CALL_OW 88
// wait ( 1 1$0 ) ;
11997: LD_INT 2100
11999: PPUSH
12000: CALL_OW 67
// DialogueOn ;
12004: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12008: LD_EXP 14
12012: PPUSH
12013: LD_STRING DRem-Har-1
12015: PPUSH
12016: CALL_OW 94
// if contactWithRussian = 1 then
12020: LD_EXP 22
12024: PUSH
12025: LD_INT 1
12027: EQUAL
12028: IFFALSE 12044
// begin Say ( JMM , DRem-JMM-1 ) ;
12030: LD_EXP 1
12034: PPUSH
12035: LD_STRING DRem-JMM-1
12037: PPUSH
12038: CALL_OW 88
// end else
12042: GO 12056
// begin Say ( JMM , DRem-JMM-1a ) ;
12044: LD_EXP 1
12048: PPUSH
12049: LD_STRING DRem-JMM-1a
12051: PPUSH
12052: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
12056: LD_EXP 14
12060: PPUSH
12061: LD_STRING DRem-Har-2
12063: PPUSH
12064: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12068: LD_STRING DenisInDelta
12070: PPUSH
12071: LD_INT 0
12073: PPUSH
12074: CALL_OW 30
12078: PUSH
12079: LD_INT 1
12081: EQUAL
12082: IFFALSE 12098
// begin Say ( JMM , DRem-JMM-2 ) ;
12084: LD_EXP 1
12088: PPUSH
12089: LD_STRING DRem-JMM-2
12091: PPUSH
12092: CALL_OW 88
// end else
12096: GO 12110
// begin Say ( JMM , DRem-JMM-2a ) ;
12098: LD_EXP 1
12102: PPUSH
12103: LD_STRING DRem-JMM-2a
12105: PPUSH
12106: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
12110: LD_EXP 14
12114: PPUSH
12115: LD_STRING DRem-Har-3
12117: PPUSH
12118: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12122: LD_EXP 1
12126: PPUSH
12127: LD_STRING DRem-JMM-3
12129: PPUSH
12130: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12134: LD_EXP 14
12138: PPUSH
12139: LD_STRING DRem-Har-4
12141: PPUSH
12142: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12146: LD_STRING DenisInDelta
12148: PPUSH
12149: LD_INT 0
12151: PPUSH
12152: CALL_OW 30
12156: PUSH
12157: LD_INT 1
12159: EQUAL
12160: IFFALSE 12188
// begin Say ( JMM , DRem-JMM-4 ) ;
12162: LD_EXP 1
12166: PPUSH
12167: LD_STRING DRem-JMM-4
12169: PPUSH
12170: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12174: LD_EXP 14
12178: PPUSH
12179: LD_STRING DRem-Har-5
12181: PPUSH
12182: CALL_OW 94
// end else
12186: GO 12221
// begin SetRestrict ( 36 , 1 , true ) ;
12188: LD_INT 36
12190: PPUSH
12191: LD_INT 1
12193: PPUSH
12194: LD_INT 1
12196: PPUSH
12197: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12201: LD_INT 15
12203: PPUSH
12204: LD_INT 1
12206: PPUSH
12207: LD_INT 1
12209: PPUSH
12210: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12214: LD_STRING MR
12216: PPUSH
12217: CALL_OW 337
// end ; DialogueOff ;
12221: CALL_OW 7
// end ;
12225: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
12226: LD_STRING DenisInDelta
12228: PPUSH
12229: LD_INT 0
12231: PPUSH
12232: CALL_OW 30
12236: PUSH
12237: LD_INT 1
12239: EQUAL
12240: IFFALSE 12371
12242: GO 12244
12244: DISABLE
// begin PrepareDenis ;
12245: CALL 2105 0 0
// CenterNowOnUnits ( Denis ) ;
12249: LD_EXP 9
12253: PPUSH
12254: CALL_OW 87
// DialogueOn ;
12258: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12262: LD_EXP 9
12266: PPUSH
12267: LD_STRING DDen-Den-1
12269: PPUSH
12270: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12274: LD_EXP 1
12278: PPUSH
12279: LD_STRING DDen-JMM-1
12281: PPUSH
12282: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12286: LD_EXP 9
12290: PPUSH
12291: LD_STRING DDen-Den-2
12293: PPUSH
12294: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12298: LD_EXP 1
12302: PPUSH
12303: LD_STRING DDen-JMM-2
12305: PPUSH
12306: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12310: LD_EXP 9
12314: PPUSH
12315: LD_STRING DDen-Den-3
12317: PPUSH
12318: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12322: LD_EXP 1
12326: PPUSH
12327: LD_STRING DDen-JMM-3
12329: PPUSH
12330: CALL_OW 88
// DialogueOff ;
12334: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12338: LD_INT 36
12340: PPUSH
12341: LD_INT 1
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12351: LD_INT 15
12353: PPUSH
12354: LD_INT 1
12356: PPUSH
12357: LD_INT 1
12359: PPUSH
12360: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12364: LD_STRING MR
12366: PPUSH
12367: CALL_OW 337
// end ;
12371: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
12372: CALL 12417 0 0
12376: PUSH
12377: LD_EXP 9
12381: PPUSH
12382: CALL_OW 302
12386: AND
12387: IFFALSE 12416
12389: GO 12391
12391: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12392: LD_EXP 9
12396: PPUSH
12397: LD_STRING DR1-Den-1
12399: PPUSH
12400: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12404: LD_EXP 1
12408: PPUSH
12409: LD_STRING DR1-JMM-1
12411: PPUSH
12412: CALL_OW 88
// end ;
12416: END
// function CheckOptoLab ; var i ; begin
12417: LD_INT 0
12419: PPUSH
12420: PPUSH
// result = false ;
12421: LD_ADDR_VAR 0 1
12425: PUSH
12426: LD_INT 0
12428: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
12429: LD_ADDR_VAR 0 2
12433: PUSH
12434: LD_INT 22
12436: PUSH
12437: LD_INT 1
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 2
12446: PUSH
12447: LD_INT 30
12449: PUSH
12450: LD_INT 7
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 30
12459: PUSH
12460: LD_INT 8
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PPUSH
12476: CALL_OW 69
12480: PUSH
12481: FOR_IN
12482: IFFALSE 12534
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
12484: LD_VAR 0 2
12488: PPUSH
12489: LD_INT 1
12491: PPUSH
12492: CALL_OW 268
12496: PUSH
12497: LD_INT 15
12499: EQUAL
12500: PUSH
12501: LD_VAR 0 2
12505: PPUSH
12506: LD_INT 2
12508: PPUSH
12509: CALL_OW 268
12513: PUSH
12514: LD_INT 15
12516: EQUAL
12517: OR
12518: IFFALSE 12530
// begin result = true ;
12520: LD_ADDR_VAR 0 1
12524: PUSH
12525: LD_INT 1
12527: ST_TO_ADDR
// break ;
12528: GO 12534
// end ; break ;
12530: GO 12534
// end ;
12532: GO 12481
12534: POP
12535: POP
// end ;
12536: LD_VAR 0 1
12540: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
12541: LD_INT 15
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: CALL_OW 321
12551: PUSH
12552: LD_INT 2
12554: EQUAL
12555: PUSH
12556: LD_EXP 9
12560: PPUSH
12561: CALL_OW 302
12565: AND
12566: IFFALSE 12798
12568: GO 12570
12570: DISABLE
// begin DialogueOn ;
12571: CALL_OW 6
// if IsOK ( Denis ) then
12575: LD_EXP 9
12579: PPUSH
12580: CALL_OW 302
12584: IFFALSE 12600
// begin Say ( Denis , DR2-Den-1 ) ;
12586: LD_EXP 9
12590: PPUSH
12591: LD_STRING DR2-Den-1
12593: PPUSH
12594: CALL_OW 88
// end else
12598: GO 12659
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12600: LD_INT 22
12602: PUSH
12603: LD_INT 1
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 21
12612: PUSH
12613: LD_INT 1
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 25
12622: PUSH
12623: LD_INT 4
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: PPUSH
12635: CALL_OW 69
12639: PUSH
12640: LD_EXP 1
12644: PUSH
12645: EMPTY
12646: LIST
12647: DIFF
12648: PPUSH
12649: LD_STRING DR2-Sci1-1
12651: PPUSH
12652: LD_STRING DR2-FSci1-1
12654: PPUSH
12655: CALL 5256 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
12659: LD_EXP 1
12663: PPUSH
12664: LD_STRING DR2-JMM-1
12666: PPUSH
12667: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12671: LD_INT 22
12673: PUSH
12674: LD_INT 1
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 21
12683: PUSH
12684: LD_INT 1
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: LD_INT 2
12693: PUSH
12694: LD_INT 25
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 25
12706: PUSH
12707: LD_INT 2
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 25
12716: PUSH
12717: LD_INT 3
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 25
12726: PUSH
12727: LD_INT 4
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 69
12750: PUSH
12751: LD_EXP 1
12755: PUSH
12756: LD_EXP 9
12760: PUSH
12761: LD_EXP 8
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: DIFF
12771: PPUSH
12772: LD_STRING DR2-Sol1-1
12774: PPUSH
12775: LD_STRING DR2-Sol1-11
12777: PPUSH
12778: CALL 5256 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12782: LD_EXP 1
12786: PPUSH
12787: LD_STRING DR2-JMM-2
12789: PPUSH
12790: CALL_OW 88
// DialogueOff ;
12794: CALL_OW 7
// end ;
12798: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
12799: LD_INT 22
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 30
12811: PUSH
12812: LD_INT 36
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 69
12827: PUSH
12828: LD_INT 0
12830: EQUAL
12831: PUSH
12832: LD_INT 22
12834: PUSH
12835: LD_INT 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 21
12844: PUSH
12845: LD_INT 2
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 33
12854: PUSH
12855: LD_INT 2
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: LIST
12866: PPUSH
12867: CALL_OW 69
12871: PUSH
12872: LD_INT 0
12874: GREATER
12875: AND
12876: PUSH
12877: LD_EXP 23
12881: PUSH
12882: LD_INT 0
12884: EQUAL
12885: AND
12886: IFFALSE 13012
12888: GO 12890
12890: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12891: LD_INT 22
12893: PUSH
12894: LD_INT 1
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 21
12903: PUSH
12904: LD_INT 1
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 25
12913: PUSH
12914: LD_INT 3
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: PPUSH
12926: CALL_OW 69
12930: PUSH
12931: LD_EXP 1
12935: PUSH
12936: LD_EXP 6
12940: PUSH
12941: LD_EXP 7
12945: PUSH
12946: LD_EXP 9
12950: PUSH
12951: LD_EXP 15
12955: PUSH
12956: LD_EXP 3
12960: PUSH
12961: LD_EXP 4
12965: PUSH
12966: LD_EXP 2
12970: PUSH
12971: LD_EXP 5
12975: PUSH
12976: LD_EXP 8
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: DIFF
12993: PPUSH
12994: LD_STRING D3a-Mech1-1
12996: PPUSH
12997: LD_STRING D3a-Mech1-1
12999: PPUSH
13000: CALL 5256 0 3
// firstTower = 2 ;
13004: LD_ADDR_EXP 23
13008: PUSH
13009: LD_INT 2
13011: ST_TO_ADDR
// end ;
13012: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13013: LD_INT 22
13015: PUSH
13016: LD_INT 3
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 21
13025: PUSH
13026: LD_INT 3
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PPUSH
13037: CALL_OW 69
13041: PUSH
13042: LD_INT 0
13044: EQUAL
13045: IFFALSE 13160
13047: GO 13049
13049: DISABLE
13050: LD_INT 0
13052: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13053: LD_ADDR_VAR 0 1
13057: PUSH
13058: LD_INT 22
13060: PUSH
13061: LD_INT 1
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 21
13070: PUSH
13071: LD_INT 1
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 2
13080: PUSH
13081: LD_INT 25
13083: PUSH
13084: LD_INT 1
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 25
13093: PUSH
13094: LD_INT 2
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 25
13103: PUSH
13104: LD_INT 3
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 25
13113: PUSH
13114: LD_INT 4
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: LIST
13132: PPUSH
13133: CALL_OW 69
13137: PUSH
13138: FOR_IN
13139: IFFALSE 13158
// AddExperience ( i , 1 , 10000 ) ;
13141: LD_VAR 0 1
13145: PPUSH
13146: LD_INT 1
13148: PPUSH
13149: LD_INT 10000
13151: PPUSH
13152: CALL_OW 492
13156: GO 13138
13158: POP
13159: POP
// end ;
13160: PPOPN 1
13162: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13163: LD_INT 22
13165: PUSH
13166: LD_INT 1
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 30
13175: PUSH
13176: LD_INT 36
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: PUSH
13192: LD_INT 0
13194: GREATER
13195: PUSH
13196: LD_INT 22
13198: PUSH
13199: LD_INT 1
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 21
13208: PUSH
13209: LD_INT 2
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 33
13218: PUSH
13219: LD_INT 2
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: PPUSH
13231: CALL_OW 69
13235: PUSH
13236: LD_INT 0
13238: GREATER
13239: AND
13240: PUSH
13241: CALL 13823 0 0
13245: AND
13246: IFFALSE 13820
13248: GO 13250
13250: DISABLE
13251: LD_INT 0
13253: PPUSH
13254: PPUSH
13255: PPUSH
13256: PPUSH
13257: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
13258: LD_ADDR_VAR 0 3
13262: PUSH
13263: LD_INT 22
13265: PUSH
13266: LD_INT 1
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 30
13275: PUSH
13276: LD_INT 36
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PPUSH
13287: CALL_OW 69
13291: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13292: LD_ADDR_VAR 0 4
13296: PUSH
13297: LD_INT 22
13299: PUSH
13300: LD_INT 1
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 21
13309: PUSH
13310: LD_INT 2
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 33
13319: PUSH
13320: LD_INT 2
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: PPUSH
13332: CALL_OW 69
13336: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13337: LD_ADDR_VAR 0 5
13341: PUSH
13342: EMPTY
13343: ST_TO_ADDR
// for i in tmpControlTowers do
13344: LD_ADDR_VAR 0 1
13348: PUSH
13349: LD_VAR 0 3
13353: PUSH
13354: FOR_IN
13355: IFFALSE 13818
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
13357: LD_EXP 1
13361: PPUSH
13362: CALL_OW 310
13366: PUSH
13367: LD_VAR 0 1
13371: EQUAL
13372: PUSH
13373: LD_EXP 1
13377: PPUSH
13378: CALL_OW 257
13382: PUSH
13383: LD_INT 3
13385: EQUAL
13386: AND
13387: IFFALSE 13517
// begin InGameOn ;
13389: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13393: LD_VAR 0 4
13397: PUSH
13398: LD_INT 1
13400: ARRAY
13401: PPUSH
13402: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13406: LD_EXP 1
13410: PPUSH
13411: LD_STRING D4a-JMM-1
13413: PPUSH
13414: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13418: LD_VAR 0 4
13422: PUSH
13423: LD_INT 1
13425: ARRAY
13426: PPUSH
13427: LD_EXP 1
13431: PPUSH
13432: CALL_OW 53
// wait ( 0 0$1 ) ;
13436: LD_INT 35
13438: PPUSH
13439: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13443: LD_VAR 0 4
13447: PUSH
13448: LD_INT 1
13450: ARRAY
13451: PPUSH
13452: LD_VAR 0 4
13456: PUSH
13457: LD_INT 1
13459: ARRAY
13460: PPUSH
13461: CALL_OW 250
13465: PUSH
13466: LD_INT 3
13468: PLUS
13469: PPUSH
13470: LD_VAR 0 4
13474: PUSH
13475: LD_INT 1
13477: ARRAY
13478: PPUSH
13479: CALL_OW 251
13483: PUSH
13484: LD_INT 2
13486: MINUS
13487: PPUSH
13488: CALL_OW 111
// wait ( 0 0$2 ) ;
13492: LD_INT 70
13494: PPUSH
13495: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13499: LD_EXP 1
13503: PPUSH
13504: LD_STRING D4b-JMM-1
13506: PPUSH
13507: CALL_OW 88
// InGameOff ;
13511: CALL_OW 9
// end else
13515: GO 13816
// begin InGameOn ;
13517: CALL_OW 8
// for j in UnitsInside ( i ) do
13521: LD_ADDR_VAR 0 2
13525: PUSH
13526: LD_VAR 0 1
13530: PPUSH
13531: CALL_OW 313
13535: PUSH
13536: FOR_IN
13537: IFFALSE 13572
// if GetClass ( j ) = 3 then
13539: LD_VAR 0 2
13543: PPUSH
13544: CALL_OW 257
13548: PUSH
13549: LD_INT 3
13551: EQUAL
13552: IFFALSE 13570
// tmpMechanicInside = tmpMechanicInside ^ j ;
13554: LD_ADDR_VAR 0 5
13558: PUSH
13559: LD_VAR 0 5
13563: PUSH
13564: LD_VAR 0 2
13568: ADD
13569: ST_TO_ADDR
13570: GO 13536
13572: POP
13573: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13574: LD_VAR 0 5
13578: PUSH
13579: LD_INT 1
13581: ARRAY
13582: PPUSH
13583: CALL_OW 258
13587: PUSH
13588: LD_INT 1
13590: EQUAL
13591: IFFALSE 13609
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
13593: LD_VAR 0 5
13597: PUSH
13598: LD_INT 1
13600: ARRAY
13601: PPUSH
13602: LD_STRING D4a-Mech1-1
13604: PPUSH
13605: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13609: LD_VAR 0 5
13613: PUSH
13614: LD_INT 1
13616: ARRAY
13617: PPUSH
13618: CALL_OW 258
13622: PUSH
13623: LD_INT 2
13625: EQUAL
13626: IFFALSE 13644
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13628: LD_VAR 0 5
13632: PUSH
13633: LD_INT 1
13635: ARRAY
13636: PPUSH
13637: LD_STRING D4a-FMech1-1
13639: PPUSH
13640: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13644: LD_VAR 0 4
13648: PUSH
13649: LD_INT 1
13651: ARRAY
13652: PPUSH
13653: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13657: LD_VAR 0 4
13661: PUSH
13662: LD_INT 1
13664: ARRAY
13665: PPUSH
13666: LD_VAR 0 5
13670: PUSH
13671: LD_INT 1
13673: ARRAY
13674: PPUSH
13675: CALL_OW 53
// wait ( 0 0$1 ) ;
13679: LD_INT 35
13681: PPUSH
13682: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13686: LD_VAR 0 4
13690: PUSH
13691: LD_INT 1
13693: ARRAY
13694: PPUSH
13695: LD_VAR 0 4
13699: PUSH
13700: LD_INT 1
13702: ARRAY
13703: PPUSH
13704: CALL_OW 250
13708: PUSH
13709: LD_INT 3
13711: PLUS
13712: PPUSH
13713: LD_VAR 0 4
13717: PUSH
13718: LD_INT 1
13720: ARRAY
13721: PPUSH
13722: CALL_OW 251
13726: PUSH
13727: LD_INT 2
13729: MINUS
13730: PPUSH
13731: CALL_OW 111
// wait ( 0 0$2 ) ;
13735: LD_INT 70
13737: PPUSH
13738: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13742: LD_VAR 0 5
13746: PUSH
13747: LD_INT 1
13749: ARRAY
13750: PPUSH
13751: CALL_OW 258
13755: PUSH
13756: LD_INT 1
13758: EQUAL
13759: IFFALSE 13777
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
13761: LD_VAR 0 5
13765: PUSH
13766: LD_INT 1
13768: ARRAY
13769: PPUSH
13770: LD_STRING D4b-Mech1-1
13772: PPUSH
13773: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13777: LD_VAR 0 5
13781: PUSH
13782: LD_INT 1
13784: ARRAY
13785: PPUSH
13786: CALL_OW 258
13790: PUSH
13791: LD_INT 2
13793: EQUAL
13794: IFFALSE 13812
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13796: LD_VAR 0 5
13800: PUSH
13801: LD_INT 1
13803: ARRAY
13804: PPUSH
13805: LD_STRING D4b-FMech1-1
13807: PPUSH
13808: CALL_OW 88
// InGameOff ;
13812: CALL_OW 9
// end ; end ;
13816: GO 13354
13818: POP
13819: POP
// end ;
13820: PPOPN 5
13822: END
// function CheckMehInside ; var i , j ; begin
13823: LD_INT 0
13825: PPUSH
13826: PPUSH
13827: PPUSH
// result = false ;
13828: LD_ADDR_VAR 0 1
13832: PUSH
13833: LD_INT 0
13835: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
13836: LD_ADDR_VAR 0 2
13840: PUSH
13841: LD_INT 22
13843: PUSH
13844: LD_INT 1
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 30
13853: PUSH
13854: LD_INT 36
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PPUSH
13865: CALL_OW 69
13869: PUSH
13870: FOR_IN
13871: IFFALSE 13922
// begin for j in UnitsInside ( i ) do
13873: LD_ADDR_VAR 0 3
13877: PUSH
13878: LD_VAR 0 2
13882: PPUSH
13883: CALL_OW 313
13887: PUSH
13888: FOR_IN
13889: IFFALSE 13918
// begin if GetClass ( j ) = 3 then
13891: LD_VAR 0 3
13895: PPUSH
13896: CALL_OW 257
13900: PUSH
13901: LD_INT 3
13903: EQUAL
13904: IFFALSE 13916
// begin result = true ;
13906: LD_ADDR_VAR 0 1
13910: PUSH
13911: LD_INT 1
13913: ST_TO_ADDR
// break ;
13914: GO 13918
// end ; end ;
13916: GO 13888
13918: POP
13919: POP
// end ;
13920: GO 13870
13922: POP
13923: POP
// end ;
13924: LD_VAR 0 1
13928: RET
// every 25 25$0 do
13929: GO 13931
13931: DISABLE
// begin PrepareKurt ;
13932: CALL 17278 0 0
// end ;
13936: END
// every 35 35$0 do
13937: GO 13939
13939: DISABLE
// begin PrepareJoan ;
13940: CALL 2656 0 0
// wait ( 1 1$0 ) ;
13944: LD_INT 2100
13946: PPUSH
13947: CALL_OW 67
// if IsOK ( Lisa ) then
13951: LD_EXP 2
13955: PPUSH
13956: CALL_OW 302
13960: IFFALSE 14090
// begin DialogueOn ;
13962: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13966: LD_EXP 2
13970: PPUSH
13971: LD_STRING D7-Lisa-1
13973: PPUSH
13974: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13978: LD_EXP 1
13982: PPUSH
13983: LD_STRING D7-JMM-1
13985: PPUSH
13986: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13990: LD_EXP 2
13994: PPUSH
13995: LD_STRING D7-Lisa-2
13997: PPUSH
13998: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14002: LD_EXP 1
14006: PPUSH
14007: LD_STRING D7-JMM-2
14009: PPUSH
14010: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14014: LD_EXP 2
14018: PPUSH
14019: LD_STRING D7-Lisa-3
14021: PPUSH
14022: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14026: LD_EXP 1
14030: PPUSH
14031: LD_STRING D7-JMM-3
14033: PPUSH
14034: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14038: LD_EXP 2
14042: PPUSH
14043: LD_STRING D7-Lisa-4
14045: PPUSH
14046: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14050: LD_EXP 1
14054: PPUSH
14055: LD_STRING D7-JMM-4
14057: PPUSH
14058: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14062: LD_EXP 1
14066: PPUSH
14067: LD_STRING D7-JMM-4a
14069: PPUSH
14070: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14074: LD_EXP 2
14078: PPUSH
14079: LD_STRING D7-Lisa-5
14081: PPUSH
14082: CALL_OW 88
// DialogueOff ;
14086: CALL_OW 7
// end ; end ;
14090: END
// every 0 0$1 do var i , others ;
14091: GO 14093
14093: DISABLE
14094: LD_INT 0
14096: PPUSH
14097: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
14098: LD_ADDR_VAR 0 2
14102: PUSH
14103: LD_INT 22
14105: PUSH
14106: LD_INT 1
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: LD_INT 21
14115: PUSH
14116: LD_INT 1
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 2
14125: PUSH
14126: LD_INT 25
14128: PUSH
14129: LD_INT 1
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 25
14138: PUSH
14139: LD_INT 2
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: LD_INT 25
14148: PUSH
14149: LD_INT 3
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 25
14158: PUSH
14159: LD_INT 4
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: PPUSH
14178: CALL_OW 69
14182: PUSH
14183: LD_EXP 13
14187: PUSH
14188: EMPTY
14189: LIST
14190: DIFF
14191: ST_TO_ADDR
// for i in others do
14192: LD_ADDR_VAR 0 1
14196: PUSH
14197: LD_VAR 0 2
14201: PUSH
14202: FOR_IN
14203: IFFALSE 14240
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14205: LD_EXP 13
14209: PPUSH
14210: LD_VAR 0 1
14214: PPUSH
14215: CALL_OW 296
14219: PUSH
14220: LD_INT 6
14222: LESS
14223: IFFALSE 14238
// begin disable ;
14225: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14226: LD_EXP 13
14230: PPUSH
14231: LD_STRING D5-Sol1-1
14233: PPUSH
14234: CALL_OW 88
// end ; end ;
14238: GO 14202
14240: POP
14241: POP
// end ;
14242: PPOPN 2
14244: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14245: LD_INT 22
14247: PUSH
14248: LD_INT 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 33
14257: PUSH
14258: LD_INT 2
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PPUSH
14269: CALL_OW 69
14273: PUSH
14274: LD_INT 2
14276: GREATEREQUAL
14277: IFFALSE 14297
14279: GO 14281
14281: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14282: LD_STRING MRa
14284: PPUSH
14285: CALL_OW 337
// remoteVehiclesBuild = 1 ;
14289: LD_ADDR_EXP 28
14293: PUSH
14294: LD_INT 1
14296: ST_TO_ADDR
// end ;
14297: END
// every 4 4$0 do
14298: GO 14300
14300: DISABLE
// PrepareRandoms ( 1 ) ;
14301: LD_INT 1
14303: PPUSH
14304: CALL 3692 0 1
14308: END
// every 10 10$0 do
14309: GO 14311
14311: DISABLE
// PrepareRandoms ( 2 ) ;
14312: LD_INT 2
14314: PPUSH
14315: CALL 3692 0 1
14319: END
// every 28 28$0 do
14320: GO 14322
14322: DISABLE
// PrepareRandoms ( 4 ) ;
14323: LD_INT 4
14325: PPUSH
14326: CALL 3692 0 1
14330: END
// every 32 32$0 do
14331: GO 14333
14333: DISABLE
// PrepareRandoms ( 5 ) ;
14334: LD_INT 5
14336: PPUSH
14337: CALL 3692 0 1
14341: END
// every 35 35$30 do
14342: GO 14344
14344: DISABLE
// PrepareRandoms ( 6 ) ;
14345: LD_INT 6
14347: PPUSH
14348: CALL 3692 0 1
14352: END
// every 37 37$20 do
14353: GO 14355
14355: DISABLE
// PrepareRandoms ( 7 ) ;
14356: LD_INT 7
14358: PPUSH
14359: CALL 3692 0 1
14363: END
// every 5 5$20 do
14364: GO 14366
14366: DISABLE
// begin DialogueOn ;
14367: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14371: LD_EXP 10
14375: PPUSH
14376: LD_STRING D12a-Sci-1
14378: PPUSH
14379: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14383: LD_EXP 1
14387: PPUSH
14388: LD_STRING D12a-JMM-1
14390: PPUSH
14391: CALL_OW 88
// DialogueOff ;
14395: CALL_OW 7
// cratesStatus = 1 ;
14399: LD_ADDR_EXP 38
14403: PUSH
14404: LD_INT 1
14406: ST_TO_ADDR
// end ;
14407: END
// every 13 13$0 do
14408: GO 14410
14410: DISABLE
// begin DialogueOn ;
14411: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14415: LD_EXP 10
14419: PPUSH
14420: LD_STRING D12b-Sci-1
14422: PPUSH
14423: CALL_OW 94
// DialogueOff ;
14427: CALL_OW 7
// cratesStatus = 2 ;
14431: LD_ADDR_EXP 38
14435: PUSH
14436: LD_INT 2
14438: ST_TO_ADDR
// end ;
14439: END
// every 32 32$0 do
14440: GO 14442
14442: DISABLE
// begin DialogueOn ;
14443: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14447: LD_EXP 10
14451: PPUSH
14452: LD_STRING D12c-Sci-1
14454: PPUSH
14455: CALL_OW 94
// DialogueOff ;
14459: CALL_OW 7
// wait ( 3 3$0 ) ;
14463: LD_INT 6300
14465: PPUSH
14466: CALL_OW 67
// DialogueOn ;
14470: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14474: LD_EXP 10
14478: PPUSH
14479: LD_STRING D12d-Sci-1
14481: PPUSH
14482: CALL_OW 94
// DialogueOff ;
14486: CALL_OW 7
// cratesStatus = 1 ;
14490: LD_ADDR_EXP 38
14494: PUSH
14495: LD_INT 1
14497: ST_TO_ADDR
// end ;
14498: END
// every 42 42$0 do
14499: GO 14501
14501: DISABLE
// begin DialogueOn ;
14502: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14506: LD_EXP 10
14510: PPUSH
14511: LD_STRING D12e-Sci-1
14513: PPUSH
14514: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14518: LD_EXP 1
14522: PPUSH
14523: LD_STRING D12e-JMM-1
14525: PPUSH
14526: CALL_OW 88
// DialogueOff ;
14530: CALL_OW 7
// cratesStatus = 2 ;
14534: LD_ADDR_EXP 38
14538: PUSH
14539: LD_INT 2
14541: ST_TO_ADDR
// end ;
14542: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
14543: LD_INT 22
14545: PUSH
14546: LD_INT 6
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 21
14555: PUSH
14556: LD_INT 2
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 34
14565: PUSH
14566: LD_INT 51
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: LIST
14577: PPUSH
14578: CALL_OW 69
14582: PUSH
14583: LD_INT 0
14585: GREATER
14586: IFFALSE 14669
14588: GO 14590
14590: DISABLE
14591: LD_INT 0
14593: PPUSH
// begin enable ;
14594: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14595: LD_ADDR_VAR 0 1
14599: PUSH
14600: LD_INT 22
14602: PUSH
14603: LD_INT 6
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: LD_INT 2
14612: PUSH
14613: LD_INT 21
14615: PUSH
14616: LD_INT 1
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 21
14625: PUSH
14626: LD_INT 2
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PPUSH
14642: CALL_OW 69
14646: PUSH
14647: FOR_IN
14648: IFFALSE 14667
// ComAgressiveMove ( i , 138 , 168 ) ;
14650: LD_VAR 0 1
14654: PPUSH
14655: LD_INT 138
14657: PPUSH
14658: LD_INT 168
14660: PPUSH
14661: CALL_OW 114
14665: GO 14647
14667: POP
14668: POP
// end ;
14669: PPOPN 1
14671: END
// every 0 0$1 do var i ;
14672: GO 14674
14674: DISABLE
14675: LD_INT 0
14677: PPUSH
// begin enable ;
14678: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
14679: LD_ADDR_VAR 0 1
14683: PUSH
14684: LD_INT 5
14686: PPUSH
14687: LD_INT 2
14689: PUSH
14690: LD_INT 22
14692: PUSH
14693: LD_INT 3
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 22
14702: PUSH
14703: LD_INT 6
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: PUSH
14715: EMPTY
14716: LIST
14717: PPUSH
14718: CALL_OW 70
14722: PUSH
14723: FOR_IN
14724: IFFALSE 14788
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
14726: LD_INT 5
14728: PPUSH
14729: LD_INT 22
14731: PUSH
14732: LD_INT 6
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 34
14741: PUSH
14742: LD_INT 51
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PPUSH
14753: CALL_OW 70
14757: PUSH
14758: LD_INT 0
14760: GREATER
14761: IFFALSE 14777
// sendedConvoys = sendedConvoys + 1 ;
14763: LD_ADDR_EXP 39
14767: PUSH
14768: LD_EXP 39
14772: PUSH
14773: LD_INT 1
14775: PLUS
14776: ST_TO_ADDR
// RemoveUnit ( i ) ;
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL_OW 64
// end ;
14786: GO 14723
14788: POP
14789: POP
// end ; end_of_file
14790: PPOPN 1
14792: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14793: LD_VAR 0 1
14797: PUSH
14798: LD_INT 1
14800: EQUAL
14801: PUSH
14802: LD_VAR 0 2
14806: PUSH
14807: LD_INT 3
14809: EQUAL
14810: AND
14811: IFFALSE 14821
// contactWithRussian = 1 ;
14813: LD_ADDR_EXP 22
14817: PUSH
14818: LD_INT 1
14820: ST_TO_ADDR
// end ;
14821: PPOPN 2
14823: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
14824: LD_VAR 0 1
14828: PPUSH
14829: CALL_OW 266
14833: PUSH
14834: LD_INT 36
14836: EQUAL
14837: PUSH
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 255
14847: PUSH
14848: LD_INT 1
14850: EQUAL
14851: AND
14852: PUSH
14853: LD_INT 22
14855: PUSH
14856: LD_INT 1
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 21
14865: PUSH
14866: LD_INT 2
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 33
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: LIST
14887: PPUSH
14888: CALL_OW 69
14892: PUSH
14893: LD_INT 0
14895: EQUAL
14896: AND
14897: PUSH
14898: LD_EXP 23
14902: PUSH
14903: LD_INT 0
14905: EQUAL
14906: AND
14907: IFFALSE 14987
// begin firstTower = 1 ;
14909: LD_ADDR_EXP 23
14913: PUSH
14914: LD_INT 1
14916: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14917: LD_INT 22
14919: PUSH
14920: LD_INT 1
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 21
14929: PUSH
14930: LD_INT 1
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 25
14939: PUSH
14940: LD_INT 3
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 26
14949: PUSH
14950: LD_INT 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: PPUSH
14963: CALL_OW 69
14967: PUSH
14968: LD_EXP 1
14972: PUSH
14973: EMPTY
14974: LIST
14975: DIFF
14976: PPUSH
14977: LD_STRING D3b-Mech1-1
14979: PPUSH
14980: LD_STRING D3b-Mech1-1
14982: PPUSH
14983: CALL 5256 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14987: LD_VAR 0 1
14991: PPUSH
14992: CALL_OW 266
14996: PUSH
14997: LD_INT 0
14999: EQUAL
15000: PUSH
15001: LD_VAR 0 1
15005: PPUSH
15006: CALL_OW 255
15010: PUSH
15011: LD_INT 1
15013: EQUAL
15014: AND
15015: IFFALSE 15029
// SetBName ( building , theta ) ;
15017: LD_VAR 0 1
15021: PPUSH
15022: LD_STRING theta
15024: PPUSH
15025: CALL_OW 500
// if GetSide ( building ) = 3 then
15029: LD_VAR 0 1
15033: PPUSH
15034: CALL_OW 255
15038: PUSH
15039: LD_INT 3
15041: EQUAL
15042: IFFALSE 15116
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15044: LD_ADDR_EXP 31
15048: PUSH
15049: LD_EXP 31
15053: PPUSH
15054: LD_INT 1
15056: PPUSH
15057: CALL_OW 3
15061: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15062: LD_ADDR_EXP 31
15066: PUSH
15067: LD_EXP 31
15071: PPUSH
15072: LD_INT 1
15074: PPUSH
15075: CALL_OW 3
15079: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15080: LD_ADDR_EXP 31
15084: PUSH
15085: LD_EXP 31
15089: PPUSH
15090: LD_INT 1
15092: PPUSH
15093: CALL_OW 3
15097: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15098: LD_ADDR_EXP 31
15102: PUSH
15103: LD_EXP 31
15107: PPUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 3
15115: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 255
15125: PUSH
15126: LD_INT 3
15128: EQUAL
15129: PUSH
15130: LD_VAR 0 1
15134: PPUSH
15135: CALL_OW 266
15139: PUSH
15140: LD_INT 0
15142: EQUAL
15143: PUSH
15144: LD_VAR 0 1
15148: PPUSH
15149: CALL_OW 266
15153: PUSH
15154: LD_INT 2
15156: EQUAL
15157: OR
15158: PUSH
15159: LD_VAR 0 1
15163: PPUSH
15164: CALL_OW 266
15168: PUSH
15169: LD_INT 4
15171: EQUAL
15172: OR
15173: PUSH
15174: EMPTY
15175: LIST
15176: AND
15177: IFFALSE 15188
// ComUpgrade ( building ) ;
15179: LD_VAR 0 1
15183: PPUSH
15184: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15188: LD_VAR 0 1
15192: PPUSH
15193: CALL_OW 255
15197: PUSH
15198: LD_INT 3
15200: EQUAL
15201: PUSH
15202: LD_VAR 0 1
15206: PPUSH
15207: CALL_OW 266
15211: PUSH
15212: LD_INT 32
15214: EQUAL
15215: AND
15216: IFFALSE 15257
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15218: LD_VAR 0 1
15222: PPUSH
15223: LD_INT 42
15225: PUSH
15226: LD_INT 43
15228: PUSH
15229: LD_INT 44
15231: PUSH
15232: LD_INT 46
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 1
15243: PPUSH
15244: LD_INT 4
15246: PPUSH
15247: CALL_OW 12
15251: ARRAY
15252: PPUSH
15253: CALL_OW 208
// end ; end ;
15257: PPOPN 1
15259: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15260: LD_VAR 0 1
15264: PPUSH
15265: CALL_OW 255
15269: PUSH
15270: LD_INT 1
15272: EQUAL
15273: PUSH
15274: LD_VAR 0 1
15278: PPUSH
15279: CALL_OW 247
15283: PUSH
15284: LD_INT 1
15286: EQUAL
15287: AND
15288: IFFALSE 15364
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
15290: LD_VAR 0 1
15294: PPUSH
15295: CALL_OW 257
15299: PUSH
15300: LD_INT 1
15302: EQUAL
15303: PUSH
15304: LD_VAR 0 1
15308: PPUSH
15309: CALL_OW 257
15313: PUSH
15314: LD_INT 2
15316: EQUAL
15317: OR
15318: PUSH
15319: LD_VAR 0 1
15323: PPUSH
15324: CALL_OW 257
15328: PUSH
15329: LD_INT 3
15331: EQUAL
15332: OR
15333: PUSH
15334: LD_VAR 0 1
15338: PPUSH
15339: CALL_OW 257
15343: PUSH
15344: LD_INT 4
15346: EQUAL
15347: OR
15348: IFFALSE 15364
// unitLost = unitLost + 1 ;
15350: LD_ADDR_EXP 30
15354: PUSH
15355: LD_EXP 30
15359: PUSH
15360: LD_INT 1
15362: PLUS
15363: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15364: LD_VAR 0 1
15368: PPUSH
15369: CALL_OW 255
15373: PUSH
15374: LD_INT 3
15376: EQUAL
15377: PUSH
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 247
15387: PUSH
15388: LD_INT 3
15390: EQUAL
15391: AND
15392: IFFALSE 16084
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15394: LD_VAR 0 1
15398: PPUSH
15399: CALL_OW 266
15403: PUSH
15404: LD_INT 31
15406: EQUAL
15407: PUSH
15408: LD_VAR 0 1
15412: PPUSH
15413: CALL_OW 266
15417: PUSH
15418: LD_INT 32
15420: EQUAL
15421: OR
15422: PUSH
15423: LD_VAR 0 1
15427: PPUSH
15428: CALL_OW 266
15432: PUSH
15433: LD_INT 36
15435: EQUAL
15436: OR
15437: PUSH
15438: LD_VAR 0 1
15442: PPUSH
15443: CALL_OW 266
15447: PUSH
15448: LD_INT 0
15450: EQUAL
15451: OR
15452: PUSH
15453: LD_VAR 0 1
15457: PPUSH
15458: CALL_OW 266
15462: PUSH
15463: LD_INT 24
15465: EQUAL
15466: OR
15467: PUSH
15468: LD_VAR 0 1
15472: PPUSH
15473: CALL_OW 266
15477: PUSH
15478: LD_INT 17
15480: EQUAL
15481: OR
15482: PUSH
15483: LD_VAR 0 1
15487: PPUSH
15488: CALL_OW 266
15492: PUSH
15493: LD_INT 25
15495: EQUAL
15496: OR
15497: PUSH
15498: LD_VAR 0 1
15502: PPUSH
15503: CALL_OW 266
15507: PUSH
15508: LD_INT 19
15510: EQUAL
15511: OR
15512: PUSH
15513: LD_VAR 0 1
15517: PPUSH
15518: CALL_OW 266
15522: PUSH
15523: LD_INT 20
15525: EQUAL
15526: OR
15527: PUSH
15528: LD_VAR 0 1
15532: PPUSH
15533: CALL_OW 266
15537: PUSH
15538: LD_INT 18
15540: EQUAL
15541: OR
15542: PUSH
15543: LD_VAR 0 1
15547: PPUSH
15548: CALL_OW 266
15552: PUSH
15553: LD_INT 21
15555: EQUAL
15556: OR
15557: PUSH
15558: LD_VAR 0 1
15562: PPUSH
15563: CALL_OW 266
15567: PUSH
15568: LD_INT 23
15570: EQUAL
15571: OR
15572: PUSH
15573: LD_VAR 0 1
15577: PPUSH
15578: CALL_OW 266
15582: PUSH
15583: LD_INT 16
15585: EQUAL
15586: OR
15587: PUSH
15588: LD_VAR 0 1
15592: PPUSH
15593: CALL_OW 266
15597: PUSH
15598: LD_INT 6
15600: EQUAL
15601: OR
15602: PUSH
15603: LD_VAR 0 1
15607: PPUSH
15608: CALL_OW 266
15612: PUSH
15613: LD_INT 29
15615: EQUAL
15616: OR
15617: PUSH
15618: LD_VAR 0 1
15622: PPUSH
15623: CALL_OW 266
15627: PUSH
15628: LD_INT 26
15630: EQUAL
15631: OR
15632: PUSH
15633: LD_VAR 0 1
15637: PPUSH
15638: CALL_OW 266
15642: PUSH
15643: LD_INT 30
15645: EQUAL
15646: OR
15647: PUSH
15648: LD_VAR 0 1
15652: PPUSH
15653: CALL_OW 266
15657: PUSH
15658: LD_INT 28
15660: EQUAL
15661: OR
15662: PUSH
15663: LD_VAR 0 1
15667: PPUSH
15668: CALL_OW 266
15672: PUSH
15673: LD_INT 27
15675: EQUAL
15676: OR
15677: PUSH
15678: LD_VAR 0 1
15682: PPUSH
15683: CALL_OW 266
15687: PUSH
15688: LD_INT 33
15690: EQUAL
15691: OR
15692: PUSH
15693: LD_VAR 0 1
15697: PPUSH
15698: CALL_OW 266
15702: PUSH
15703: LD_INT 2
15705: EQUAL
15706: OR
15707: PUSH
15708: LD_VAR 0 1
15712: PPUSH
15713: CALL_OW 266
15717: PUSH
15718: LD_INT 4
15720: EQUAL
15721: OR
15722: IFFALSE 15808
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15724: LD_ADDR_EXP 31
15728: PUSH
15729: LD_EXP 31
15733: PUSH
15734: LD_VAR 0 1
15738: PPUSH
15739: CALL_OW 266
15743: ADD
15744: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15745: LD_ADDR_EXP 31
15749: PUSH
15750: LD_EXP 31
15754: PUSH
15755: LD_VAR 0 1
15759: PPUSH
15760: CALL_OW 250
15764: ADD
15765: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15766: LD_ADDR_EXP 31
15770: PUSH
15771: LD_EXP 31
15775: PUSH
15776: LD_VAR 0 1
15780: PPUSH
15781: CALL_OW 251
15785: ADD
15786: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15787: LD_ADDR_EXP 31
15791: PUSH
15792: LD_EXP 31
15796: PUSH
15797: LD_VAR 0 1
15801: PPUSH
15802: CALL_OW 254
15806: ADD
15807: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15808: LD_VAR 0 1
15812: PPUSH
15813: CALL_OW 266
15817: PUSH
15818: LD_INT 1
15820: EQUAL
15821: IFFALSE 15900
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
15823: LD_ADDR_EXP 31
15827: PUSH
15828: LD_EXP 31
15832: PUSH
15833: LD_INT 0
15835: ADD
15836: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15837: LD_ADDR_EXP 31
15841: PUSH
15842: LD_EXP 31
15846: PUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 250
15856: ADD
15857: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15858: LD_ADDR_EXP 31
15862: PUSH
15863: LD_EXP 31
15867: PUSH
15868: LD_VAR 0 1
15872: PPUSH
15873: CALL_OW 251
15877: ADD
15878: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15879: LD_ADDR_EXP 31
15883: PUSH
15884: LD_EXP 31
15888: PUSH
15889: LD_VAR 0 1
15893: PPUSH
15894: CALL_OW 254
15898: ADD
15899: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15900: LD_VAR 0 1
15904: PPUSH
15905: CALL_OW 266
15909: PUSH
15910: LD_INT 3
15912: EQUAL
15913: IFFALSE 15992
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
15915: LD_ADDR_EXP 31
15919: PUSH
15920: LD_EXP 31
15924: PUSH
15925: LD_INT 2
15927: ADD
15928: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15929: LD_ADDR_EXP 31
15933: PUSH
15934: LD_EXP 31
15938: PUSH
15939: LD_VAR 0 1
15943: PPUSH
15944: CALL_OW 250
15948: ADD
15949: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15950: LD_ADDR_EXP 31
15954: PUSH
15955: LD_EXP 31
15959: PUSH
15960: LD_VAR 0 1
15964: PPUSH
15965: CALL_OW 251
15969: ADD
15970: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15971: LD_ADDR_EXP 31
15975: PUSH
15976: LD_EXP 31
15980: PUSH
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 254
15990: ADD
15991: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
15992: LD_VAR 0 1
15996: PPUSH
15997: CALL_OW 266
16001: PUSH
16002: LD_INT 5
16004: EQUAL
16005: IFFALSE 16084
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
16007: LD_ADDR_EXP 31
16011: PUSH
16012: LD_EXP 31
16016: PUSH
16017: LD_INT 4
16019: ADD
16020: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16021: LD_ADDR_EXP 31
16025: PUSH
16026: LD_EXP 31
16030: PUSH
16031: LD_VAR 0 1
16035: PPUSH
16036: CALL_OW 250
16040: ADD
16041: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16042: LD_ADDR_EXP 31
16046: PUSH
16047: LD_EXP 31
16051: PUSH
16052: LD_VAR 0 1
16056: PPUSH
16057: CALL_OW 251
16061: ADD
16062: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16063: LD_ADDR_EXP 31
16067: PUSH
16068: LD_EXP 31
16072: PUSH
16073: LD_VAR 0 1
16077: PPUSH
16078: CALL_OW 254
16082: ADD
16083: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 257
16093: PUSH
16094: LD_INT 3
16096: EQUAL
16097: PUSH
16098: LD_VAR 0 1
16102: PPUSH
16103: CALL_OW 255
16107: PUSH
16108: LD_INT 3
16110: EQUAL
16111: AND
16112: PUSH
16113: LD_INT 21
16115: PPUSH
16116: CALL_OW 302
16120: AND
16121: PUSH
16122: LD_INT 21
16124: PPUSH
16125: CALL_OW 255
16129: PUSH
16130: LD_INT 3
16132: EQUAL
16133: AND
16134: IFFALSE 16202
// begin uc_side = 3 ;
16136: LD_ADDR_OWVAR 20
16140: PUSH
16141: LD_INT 3
16143: ST_TO_ADDR
// uc_nation = 3 ;
16144: LD_ADDR_OWVAR 21
16148: PUSH
16149: LD_INT 3
16151: ST_TO_ADDR
// hc_gallery :=  ;
16152: LD_ADDR_OWVAR 33
16156: PUSH
16157: LD_STRING 
16159: ST_TO_ADDR
// hc_name :=  ;
16160: LD_ADDR_OWVAR 26
16164: PUSH
16165: LD_STRING 
16167: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16168: LD_INT 0
16170: PPUSH
16171: LD_EXP 34
16175: PPUSH
16176: LD_EXP 35
16180: PPUSH
16181: CALL_OW 12
16185: PPUSH
16186: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
16190: CALL_OW 44
16194: PPUSH
16195: LD_INT 21
16197: PPUSH
16198: CALL_OW 52
// end ; end ;
16202: PPOPN 1
16204: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
16205: LD_INT 0
16207: PPUSH
16208: PPUSH
16209: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL_OW 264
16219: PUSH
16220: LD_INT 51
16222: EQUAL
16223: PUSH
16224: LD_VAR 0 1
16228: PPUSH
16229: CALL_OW 255
16233: PUSH
16234: LD_INT 3
16236: EQUAL
16237: AND
16238: IFFALSE 16300
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
16240: LD_ADDR_VAR 0 5
16244: PUSH
16245: LD_INT 2
16247: PPUSH
16248: CALL_OW 274
16252: PPUSH
16253: LD_INT 1
16255: PPUSH
16256: CALL_OW 275
16260: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
16261: LD_INT 2
16263: PPUSH
16264: CALL_OW 274
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: LD_VAR 0 5
16276: PUSH
16277: LD_INT 100
16279: MINUS
16280: PPUSH
16281: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
16285: LD_VAR 0 1
16289: PPUSH
16290: LD_INT 1
16292: PPUSH
16293: LD_INT 100
16295: PPUSH
16296: CALL_OW 291
// end ; if building = rufabsupp then
16300: LD_VAR 0 2
16304: PUSH
16305: LD_INT 17
16307: EQUAL
16308: IFFALSE 16322
// SetSide ( vehicle , 6 ) ;
16310: LD_VAR 0 1
16314: PPUSH
16315: LD_INT 6
16317: PPUSH
16318: CALL_OW 235
// end ;
16322: PPOPN 5
16324: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16325: LD_VAR 0 1
16329: PPUSH
16330: CALL_OW 255
16334: PUSH
16335: LD_INT 3
16337: EQUAL
16338: IFFALSE 16354
// tamedApemans = tamedApemans + 1 ;
16340: LD_ADDR_EXP 32
16344: PUSH
16345: LD_EXP 32
16349: PUSH
16350: LD_INT 1
16352: PLUS
16353: ST_TO_ADDR
// end ;
16354: PPOPN 2
16356: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
16357: LD_INT 0
16359: PPUSH
16360: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 255
16370: PUSH
16371: LD_INT 3
16373: EQUAL
16374: PUSH
16375: LD_VAR 0 1
16379: PPUSH
16380: CALL_OW 247
16384: PUSH
16385: LD_INT 2
16387: EQUAL
16388: AND
16389: IFFALSE 16498
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
16391: LD_VAR 0 1
16395: PPUSH
16396: CALL_OW 264
16400: PUSH
16401: LD_INT 42
16403: EQUAL
16404: PUSH
16405: LD_VAR 0 1
16409: PPUSH
16410: CALL_OW 264
16414: PUSH
16415: LD_INT 43
16417: EQUAL
16418: OR
16419: PUSH
16420: LD_VAR 0 1
16424: PPUSH
16425: CALL_OW 264
16429: PUSH
16430: LD_INT 44
16432: EQUAL
16433: OR
16434: PUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 264
16444: PUSH
16445: LD_INT 46
16447: EQUAL
16448: OR
16449: IFFALSE 16498
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16451: LD_INT 21
16453: PPUSH
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 265
16463: PPUSH
16464: LD_VAR 0 1
16468: PPUSH
16469: CALL_OW 262
16473: PPUSH
16474: LD_VAR 0 1
16478: PPUSH
16479: CALL_OW 263
16483: PPUSH
16484: LD_VAR 0 1
16488: PPUSH
16489: CALL_OW 264
16493: PPUSH
16494: CALL_OW 185
// end ;
16498: PPOPN 3
16500: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 255
16510: PUSH
16511: LD_INT 3
16513: EQUAL
16514: PUSH
16515: LD_VAR 0 2
16519: PPUSH
16520: CALL_OW 255
16524: PUSH
16525: LD_INT 3
16527: EQUAL
16528: AND
16529: PUSH
16530: LD_VAR 0 1
16534: PPUSH
16535: CALL_OW 302
16539: AND
16540: IFFALSE 16582
// begin ComRepairVehicle ( human , vehicle ) ;
16542: LD_VAR 0 2
16546: PPUSH
16547: LD_VAR 0 1
16551: PPUSH
16552: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
16556: LD_VAR 0 2
16560: PPUSH
16561: LD_VAR 0 1
16565: PPUSH
16566: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
16570: LD_VAR 0 1
16574: PPUSH
16575: LD_INT 100
16577: PPUSH
16578: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
16582: LD_VAR 0 1
16586: PPUSH
16587: CALL_OW 255
16591: PUSH
16592: LD_INT 3
16594: EQUAL
16595: PUSH
16596: LD_VAR 0 2
16600: PPUSH
16601: CALL_OW 255
16605: PUSH
16606: LD_INT 3
16608: EQUAL
16609: AND
16610: PUSH
16611: LD_INT 21
16613: PPUSH
16614: CALL_OW 302
16618: AND
16619: PUSH
16620: LD_VAR 0 1
16624: PPUSH
16625: CALL_OW 302
16629: NOT
16630: AND
16631: IFFALSE 16645
// ComEnterUnit ( human , rufab ) ;
16633: LD_VAR 0 2
16637: PPUSH
16638: LD_INT 21
16640: PPUSH
16641: CALL_OW 120
// end ;
16645: PPOPN 2
16647: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16648: LD_VAR 0 1
16652: PUSH
16653: LD_INT 21
16655: EQUAL
16656: PUSH
16657: LD_VAR 0 2
16661: PPUSH
16662: CALL_OW 255
16666: PUSH
16667: LD_INT 3
16669: EQUAL
16670: AND
16671: IFFALSE 16685
// SetLives ( human , 1000 ) ;
16673: LD_VAR 0 2
16677: PPUSH
16678: LD_INT 1000
16680: PPUSH
16681: CALL_OW 234
// end ;
16685: PPOPN 2
16687: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not firstCrateSpawn then
16688: LD_EXP 41
16692: NOT
16693: IFFALSE 16703
// firstCrateSpawn := true ;
16695: LD_ADDR_EXP 41
16699: PUSH
16700: LD_INT 1
16702: ST_TO_ADDR
// end ; end_of_file
16703: PPOPN 5
16705: END
// every 0 0$30 trigger cratesStatus = 1 do
16706: LD_EXP 38
16710: PUSH
16711: LD_INT 1
16713: EQUAL
16714: IFFALSE 16778
16716: GO 16718
16718: DISABLE
// begin enable ;
16719: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
16720: LD_INT 350
16722: PUSH
16723: LD_INT 1050
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 1
16732: PPUSH
16733: LD_INT 2
16735: PPUSH
16736: CALL_OW 12
16740: ARRAY
16741: PPUSH
16742: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
16746: LD_INT 4
16748: PUSH
16749: LD_INT 5
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 1
16758: PPUSH
16759: LD_INT 2
16761: PPUSH
16762: CALL_OW 12
16766: ARRAY
16767: PPUSH
16768: LD_INT 7
16770: PPUSH
16771: LD_INT 1
16773: PPUSH
16774: CALL_OW 55
// end ;
16778: END
// every 1 1$0 trigger cratesStatus = 2 do
16779: LD_EXP 38
16783: PUSH
16784: LD_INT 2
16786: EQUAL
16787: IFFALSE 16851
16789: GO 16791
16791: DISABLE
// begin enable ;
16792: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16793: LD_INT 3150
16795: PUSH
16796: LD_INT 4550
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 1
16805: PPUSH
16806: LD_INT 2
16808: PPUSH
16809: CALL_OW 12
16813: ARRAY
16814: PPUSH
16815: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16819: LD_INT 2
16821: PUSH
16822: LD_INT 5
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 1
16831: PPUSH
16832: LD_INT 2
16834: PPUSH
16835: CALL_OW 12
16839: ARRAY
16840: PPUSH
16841: LD_INT 8
16843: PPUSH
16844: LD_INT 1
16846: PPUSH
16847: CALL_OW 55
// end ;
16851: END
// every 0 0$30 + 0 0$10 do
16852: GO 16854
16854: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16855: LD_INT 4
16857: PUSH
16858: LD_INT 5
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 1
16867: PPUSH
16868: LD_INT 2
16870: PPUSH
16871: CALL_OW 12
16875: ARRAY
16876: PPUSH
16877: LD_INT 8
16879: PPUSH
16880: LD_INT 1
16882: PPUSH
16883: CALL_OW 55
// Wait ( 0 0$15 ) ;
16887: LD_INT 525
16889: PPUSH
16890: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16894: LD_INT 4
16896: PUSH
16897: LD_INT 5
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 1
16906: PPUSH
16907: LD_INT 2
16909: PPUSH
16910: CALL_OW 12
16914: ARRAY
16915: PPUSH
16916: LD_INT 8
16918: PPUSH
16919: LD_INT 1
16921: PPUSH
16922: CALL_OW 55
// Wait ( 0 0$20 ) ;
16926: LD_INT 700
16928: PPUSH
16929: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16933: LD_INT 4
16935: PUSH
16936: LD_INT 5
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 1
16945: PPUSH
16946: LD_INT 2
16948: PPUSH
16949: CALL_OW 12
16953: ARRAY
16954: PPUSH
16955: LD_INT 8
16957: PPUSH
16958: LD_INT 1
16960: PPUSH
16961: CALL_OW 55
// end ; end_of_file
16965: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16966: LD_EXP 24
16970: PUSH
16971: LD_INT 1
16973: EQUAL
16974: IFFALSE 17275
16976: GO 16978
16978: DISABLE
16979: LD_INT 0
16981: PPUSH
16982: PPUSH
16983: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16984: LD_ADDR_VAR 0 2
16988: PUSH
16989: LD_INT 22
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 21
17001: PUSH
17002: LD_INT 3
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 2
17011: PUSH
17012: LD_INT 30
17014: PUSH
17015: LD_INT 0
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 30
17024: PUSH
17025: LD_INT 1
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: PPUSH
17042: CALL_OW 69
17046: ST_TO_ADDR
// for i in tmp do
17047: LD_ADDR_VAR 0 1
17051: PUSH
17052: LD_VAR 0 2
17056: PUSH
17057: FOR_IN
17058: IFFALSE 17091
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
17060: LD_ADDR_VAR 0 3
17064: PUSH
17065: LD_VAR 0 3
17069: PUSH
17070: LD_VAR 0 1
17074: PPUSH
17075: CALL_OW 274
17079: PPUSH
17080: LD_INT 1
17082: PPUSH
17083: CALL_OW 275
17087: PLUS
17088: ST_TO_ADDR
17089: GO 17057
17091: POP
17092: POP
// strings = [ ] ;
17093: LD_ADDR_EXP 27
17097: PUSH
17098: EMPTY
17099: ST_TO_ADDR
// if tmp = 0 then
17100: LD_VAR 0 2
17104: PUSH
17105: LD_INT 0
17107: EQUAL
17108: IFFALSE 17133
// strings = strings ^ [ #Am06-1 , needCrates ] ;
17110: LD_ADDR_EXP 27
17114: PUSH
17115: LD_EXP 27
17119: PUSH
17120: LD_STRING #Am06-1
17122: PUSH
17123: LD_EXP 25
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: ADD
17132: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
17133: LD_VAR 0 2
17137: PUSH
17138: LD_INT 0
17140: GREATER
17141: PUSH
17142: LD_EXP 25
17146: PUSH
17147: LD_VAR 0 3
17151: GREATER
17152: AND
17153: IFFALSE 17184
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
17155: LD_ADDR_EXP 27
17159: PUSH
17160: LD_EXP 27
17164: PUSH
17165: LD_STRING #Am06-1
17167: PUSH
17168: LD_EXP 25
17172: PUSH
17173: LD_VAR 0 3
17177: MINUS
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: ADD
17183: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
17184: LD_VAR 0 2
17188: PUSH
17189: LD_INT 0
17191: GREATER
17192: PUSH
17193: LD_EXP 25
17197: PUSH
17198: LD_VAR 0 3
17202: LESSEQUAL
17203: AND
17204: IFFALSE 17227
// strings = strings ^ [ #Am06-1 , 0 ] ;
17206: LD_ADDR_EXP 27
17210: PUSH
17211: LD_EXP 27
17215: PUSH
17216: LD_STRING #Am06-1
17218: PUSH
17219: LD_INT 0
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: ADD
17226: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
17227: LD_ADDR_EXP 26
17231: PUSH
17232: LD_EXP 26
17236: PUSH
17237: LD_INT 35
17239: MINUS
17240: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
17241: LD_ADDR_EXP 27
17245: PUSH
17246: LD_EXP 27
17250: PUSH
17251: LD_STRING #Am06-2
17253: PUSH
17254: LD_EXP 26
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: ADD
17263: ST_TO_ADDR
// display_strings = strings ;
17264: LD_ADDR_OWVAR 47
17268: PUSH
17269: LD_EXP 27
17273: ST_TO_ADDR
// enable ;
17274: ENABLE
// end ; end_of_file
17275: PPOPN 3
17277: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
17278: LD_INT 0
17280: PPUSH
17281: PPUSH
17282: PPUSH
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
// j = 0 ;
17287: LD_ADDR_VAR 0 3
17291: PUSH
17292: LD_INT 0
17294: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17295: LD_INT 35
17297: PPUSH
17298: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
17302: LD_ADDR_VAR 0 2
17306: PUSH
17307: LD_INT 22
17309: PUSH
17310: LD_INT 1
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 21
17319: PUSH
17320: LD_INT 1
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: LD_INT 25
17332: PUSH
17333: LD_INT 1
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 25
17342: PUSH
17343: LD_INT 2
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 25
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 25
17362: PUSH
17363: LD_INT 4
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: LIST
17381: PPUSH
17382: CALL_OW 69
17386: PUSH
17387: FOR_IN
17388: IFFALSE 17494
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
17390: LD_INT 22
17392: PUSH
17393: LD_INT 3
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 2
17402: PUSH
17403: LD_INT 21
17405: PUSH
17406: LD_INT 1
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 21
17415: PUSH
17416: LD_INT 2
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 3
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 59
17435: PUSH
17436: EMPTY
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 91
17448: PUSH
17449: LD_VAR 0 2
17453: PUSH
17454: LD_INT 25
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: LIST
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: LIST
17466: PPUSH
17467: CALL_OW 69
17471: NOT
17472: IFFALSE 17492
// begin tmp = i ;
17474: LD_ADDR_VAR 0 4
17478: PUSH
17479: LD_VAR 0 2
17483: ST_TO_ADDR
// j = 1 ;
17484: LD_ADDR_VAR 0 3
17488: PUSH
17489: LD_INT 1
17491: ST_TO_ADDR
// end ; end ;
17492: GO 17387
17494: POP
17495: POP
// until j = 1 ;
17496: LD_VAR 0 3
17500: PUSH
17501: LD_INT 1
17503: EQUAL
17504: IFFALSE 17295
// blockSpawn = 1 ;
17506: LD_ADDR_EXP 29
17510: PUSH
17511: LD_INT 1
17513: ST_TO_ADDR
// uc_side = 2 ;
17514: LD_ADDR_OWVAR 20
17518: PUSH
17519: LD_INT 2
17521: ST_TO_ADDR
// uc_nation = 2 ;
17522: LD_ADDR_OWVAR 21
17526: PUSH
17527: LD_INT 2
17529: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
17530: LD_ADDR_EXP 19
17534: PUSH
17535: LD_STRING Kurt
17537: PPUSH
17538: LD_INT 0
17540: PPUSH
17541: CALL 5193 0 2
17545: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17546: LD_EXP 19
17550: PPUSH
17551: LD_VAR 0 4
17555: PPUSH
17556: CALL_OW 250
17560: PPUSH
17561: LD_VAR 0 4
17565: PPUSH
17566: CALL_OW 251
17570: PPUSH
17571: LD_INT 5
17573: PPUSH
17574: LD_INT 1
17576: PPUSH
17577: CALL_OW 50
// InGameOn ;
17581: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17585: LD_EXP 19
17589: PPUSH
17590: CALL_OW 87
// wait ( 0 0$2 ) ;
17594: LD_INT 70
17596: PPUSH
17597: CALL_OW 67
// ComExitVehicle ( tmp ) ;
17601: LD_VAR 0 4
17605: PPUSH
17606: CALL_OW 121
// ComExitBuilding ( tmp ) ;
17610: LD_VAR 0 4
17614: PPUSH
17615: CALL_OW 122
// wait ( 0 0$1 ) ;
17619: LD_INT 35
17621: PPUSH
17622: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17626: LD_EXP 19
17630: PPUSH
17631: LD_VAR 0 4
17635: PPUSH
17636: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
17640: LD_VAR 0 4
17644: PPUSH
17645: LD_EXP 19
17649: PPUSH
17650: CALL_OW 119
// DialogueOn ;
17654: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17658: LD_EXP 19
17662: PPUSH
17663: LD_STRING D2-Kurt-1
17665: PPUSH
17666: CALL_OW 88
// if tmp = JMM then
17670: LD_VAR 0 4
17674: PUSH
17675: LD_EXP 1
17679: EQUAL
17680: IFFALSE 17772
// begin Say ( JMM , D2-JMM-1 ) ;
17682: LD_EXP 1
17686: PPUSH
17687: LD_STRING D2-JMM-1
17689: PPUSH
17690: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17694: LD_EXP 19
17698: PPUSH
17699: LD_STRING D2-Kurt-2
17701: PPUSH
17702: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17706: LD_EXP 1
17710: PPUSH
17711: LD_STRING D2-JMM-2
17713: PPUSH
17714: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17718: LD_EXP 19
17722: PPUSH
17723: LD_STRING D2-Kurt-3
17725: PPUSH
17726: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17730: LD_EXP 1
17734: PPUSH
17735: LD_STRING D2-JMM-3
17737: PPUSH
17738: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17742: LD_EXP 19
17746: PPUSH
17747: LD_STRING D2-Kurt-4
17749: PPUSH
17750: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17754: LD_EXP 1
17758: PPUSH
17759: LD_STRING D2-JMM-4
17761: PPUSH
17762: CALL_OW 88
// DialogueOff ;
17766: CALL_OW 7
// end else
17770: GO 18082
// begin if GetSex ( tmp ) = 1 then
17772: LD_VAR 0 4
17776: PPUSH
17777: CALL_OW 258
17781: PUSH
17782: LD_INT 1
17784: EQUAL
17785: IFFALSE 17799
// Say ( tmp , D2-Sol1-1 ) ;
17787: LD_VAR 0 4
17791: PPUSH
17792: LD_STRING D2-Sol1-1
17794: PPUSH
17795: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17799: LD_VAR 0 4
17803: PPUSH
17804: CALL_OW 258
17808: PUSH
17809: LD_INT 2
17811: EQUAL
17812: IFFALSE 17826
// Say ( tmp , D2-FSol1-1 ) ;
17814: LD_VAR 0 4
17818: PPUSH
17819: LD_STRING D2-FSol1-1
17821: PPUSH
17822: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17826: LD_EXP 19
17830: PPUSH
17831: LD_STRING D2-Kurt-2
17833: PPUSH
17834: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17838: LD_VAR 0 4
17842: PPUSH
17843: CALL_OW 258
17847: PUSH
17848: LD_INT 1
17850: EQUAL
17851: IFFALSE 17865
// Say ( tmp , D2-Sol1-2 ) ;
17853: LD_VAR 0 4
17857: PPUSH
17858: LD_STRING D2-Sol1-2
17860: PPUSH
17861: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17865: LD_VAR 0 4
17869: PPUSH
17870: CALL_OW 258
17874: PUSH
17875: LD_INT 2
17877: EQUAL
17878: IFFALSE 17892
// Say ( tmp , D2-FSol1-2 ) ;
17880: LD_VAR 0 4
17884: PPUSH
17885: LD_STRING D2-FSol1-2
17887: PPUSH
17888: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17892: LD_EXP 19
17896: PPUSH
17897: LD_STRING D2-Kurt-3
17899: PPUSH
17900: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17904: LD_VAR 0 4
17908: PPUSH
17909: CALL_OW 258
17913: PUSH
17914: LD_INT 1
17916: EQUAL
17917: IFFALSE 17931
// Say ( tmp , D2-Sol1-3 ) ;
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_STRING D2-Sol1-3
17926: PPUSH
17927: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17931: LD_VAR 0 4
17935: PPUSH
17936: CALL_OW 258
17940: PUSH
17941: LD_INT 2
17943: EQUAL
17944: IFFALSE 17958
// Say ( tmp , D2-FSol1-3 ) ;
17946: LD_VAR 0 4
17950: PPUSH
17951: LD_STRING D2-FSol1-3
17953: PPUSH
17954: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17958: LD_EXP 19
17962: PPUSH
17963: LD_STRING D2-Kurt-4
17965: PPUSH
17966: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17970: LD_VAR 0 4
17974: PPUSH
17975: CALL_OW 258
17979: PUSH
17980: LD_INT 1
17982: EQUAL
17983: IFFALSE 17997
// Say ( tmp , D2-Sol1-4 ) ;
17985: LD_VAR 0 4
17989: PPUSH
17990: LD_STRING D2-Sol1-4
17992: PPUSH
17993: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17997: LD_VAR 0 4
18001: PPUSH
18002: CALL_OW 258
18006: PUSH
18007: LD_INT 2
18009: EQUAL
18010: IFFALSE 18024
// Say ( tmp , D2-FSol1-4 ) ;
18012: LD_VAR 0 4
18016: PPUSH
18017: LD_STRING D2-FSol1-4
18019: PPUSH
18020: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18024: LD_VAR 0 4
18028: PPUSH
18029: CALL_OW 258
18033: PUSH
18034: LD_INT 1
18036: EQUAL
18037: IFFALSE 18051
// Say ( tmp , D2-Sol1-5 ) ;
18039: LD_VAR 0 4
18043: PPUSH
18044: LD_STRING D2-Sol1-5
18046: PPUSH
18047: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18051: LD_VAR 0 4
18055: PPUSH
18056: CALL_OW 258
18060: PUSH
18061: LD_INT 2
18063: EQUAL
18064: IFFALSE 18078
// Say ( tmp , D2-FSol1-5 ) ;
18066: LD_VAR 0 4
18070: PPUSH
18071: LD_STRING D2-FSol1-5
18073: PPUSH
18074: CALL_OW 88
// DialogueOff ;
18078: CALL_OW 7
// end ; dec = ShowQuery1 ;
18082: LD_ADDR_VAR 0 6
18086: PUSH
18087: CALL 5795 0 0
18091: ST_TO_ADDR
// if dec = 1 then
18092: LD_VAR 0 6
18096: PUSH
18097: LD_INT 1
18099: EQUAL
18100: IFFALSE 18142
// begin DialogueOn ;
18102: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18106: LD_EXP 19
18110: PPUSH
18111: LD_STRING D2a-Kurt-1
18113: PPUSH
18114: CALL_OW 88
// DialogueOff ;
18118: CALL_OW 7
// InGameOff ;
18122: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18126: LD_INT 1
18128: PPUSH
18129: LD_INT 2
18131: PPUSH
18132: LD_INT 2
18134: PPUSH
18135: LD_INT 1
18137: PPUSH
18138: CALL_OW 80
// end ; if dec = 2 then
18142: LD_VAR 0 6
18146: PUSH
18147: LD_INT 2
18149: EQUAL
18150: IFFALSE 18650
// begin DialogueOn ;
18152: CALL_OW 6
// if tmp = JMM then
18156: LD_VAR 0 4
18160: PUSH
18161: LD_EXP 1
18165: EQUAL
18166: IFFALSE 18222
// begin Say ( JMM , D2b-JMM-1 ) ;
18168: LD_EXP 1
18172: PPUSH
18173: LD_STRING D2b-JMM-1
18175: PPUSH
18176: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18180: LD_EXP 19
18184: PPUSH
18185: LD_STRING D2b-Kurt-1
18187: PPUSH
18188: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
18192: LD_EXP 1
18196: PPUSH
18197: LD_STRING D2b-JMM-2
18199: PPUSH
18200: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18204: LD_EXP 19
18208: PPUSH
18209: LD_STRING D2b-Kurt-2
18211: PPUSH
18212: CALL_OW 88
// DialogueOff ;
18216: CALL_OW 7
// end else
18220: GO 18412
// begin if GetSex ( tmp ) = 1 then
18222: LD_VAR 0 4
18226: PPUSH
18227: CALL_OW 258
18231: PUSH
18232: LD_INT 1
18234: EQUAL
18235: IFFALSE 18249
// Say ( tmp , D2b-Sol1-1 ) ;
18237: LD_VAR 0 4
18241: PPUSH
18242: LD_STRING D2b-Sol1-1
18244: PPUSH
18245: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18249: LD_VAR 0 4
18253: PPUSH
18254: CALL_OW 258
18258: PUSH
18259: LD_INT 2
18261: EQUAL
18262: IFFALSE 18276
// Say ( tmp , D2b-FSol1-1 ) ;
18264: LD_VAR 0 4
18268: PPUSH
18269: LD_STRING D2b-FSol1-1
18271: PPUSH
18272: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18276: LD_EXP 19
18280: PPUSH
18281: LD_STRING D2b-Kurt-1
18283: PPUSH
18284: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18288: LD_VAR 0 4
18292: PPUSH
18293: CALL_OW 258
18297: PUSH
18298: LD_INT 1
18300: EQUAL
18301: IFFALSE 18315
// Say ( tmp , D2b-Sol1-2 ) ;
18303: LD_VAR 0 4
18307: PPUSH
18308: LD_STRING D2b-Sol1-2
18310: PPUSH
18311: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18315: LD_VAR 0 4
18319: PPUSH
18320: CALL_OW 258
18324: PUSH
18325: LD_INT 2
18327: EQUAL
18328: IFFALSE 18342
// Say ( tmp , D2b-FSol1-2 ) ;
18330: LD_VAR 0 4
18334: PPUSH
18335: LD_STRING D2b-FSol1-2
18337: PPUSH
18338: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18342: LD_EXP 19
18346: PPUSH
18347: LD_STRING D2b-Kurt-2
18349: PPUSH
18350: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18354: LD_VAR 0 4
18358: PPUSH
18359: CALL_OW 258
18363: PUSH
18364: LD_INT 1
18366: EQUAL
18367: IFFALSE 18381
// Say ( tmp , D2c-Sol1-2 ) ;
18369: LD_VAR 0 4
18373: PPUSH
18374: LD_STRING D2c-Sol1-2
18376: PPUSH
18377: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18381: LD_VAR 0 4
18385: PPUSH
18386: CALL_OW 258
18390: PUSH
18391: LD_INT 2
18393: EQUAL
18394: IFFALSE 18408
// Say ( tmp , D2c-FSol1-2 ) ;
18396: LD_VAR 0 4
18400: PPUSH
18401: LD_STRING D2c-FSol1-2
18403: PPUSH
18404: CALL_OW 88
// DialogueOff ;
18408: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
18412: LD_ADDR_VAR 0 7
18416: PUSH
18417: CALL 5869 0 0
18421: ST_TO_ADDR
// if dec2 = 1 then
18422: LD_VAR 0 7
18426: PUSH
18427: LD_INT 1
18429: EQUAL
18430: IFFALSE 18472
// begin DialogueOn ;
18432: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18436: LD_EXP 19
18440: PPUSH
18441: LD_STRING D2a-Kurt-1
18443: PPUSH
18444: CALL_OW 88
// DialogueOff ;
18448: CALL_OW 7
// InGameOff ;
18452: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18456: LD_INT 1
18458: PPUSH
18459: LD_INT 2
18461: PPUSH
18462: LD_INT 2
18464: PPUSH
18465: LD_INT 1
18467: PPUSH
18468: CALL_OW 80
// end ; if dec2 = 2 then
18472: LD_VAR 0 7
18476: PUSH
18477: LD_INT 2
18479: EQUAL
18480: IFFALSE 18650
// begin if tmp = JMM then
18482: LD_VAR 0 4
18486: PUSH
18487: LD_EXP 1
18491: EQUAL
18492: IFFALSE 18552
// begin DialogueOn ;
18494: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18498: LD_EXP 1
18502: PPUSH
18503: LD_STRING D2c-JMM-1
18505: PPUSH
18506: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18510: LD_EXP 19
18514: PPUSH
18515: LD_STRING D2c-Kurt-1
18517: PPUSH
18518: CALL_OW 88
// DialogueOff ;
18522: CALL_OW 7
// InGameOff ;
18526: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18530: LD_EXP 19
18534: PPUSH
18535: LD_INT 9
18537: PPUSH
18538: CALL_OW 113
// readyToEscape = 1 ;
18542: LD_ADDR_EXP 21
18546: PUSH
18547: LD_INT 1
18549: ST_TO_ADDR
// end else
18550: GO 18650
// begin DialogueOn ;
18552: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18556: LD_VAR 0 4
18560: PPUSH
18561: CALL_OW 258
18565: PUSH
18566: LD_INT 1
18568: EQUAL
18569: IFFALSE 18583
// Say ( tmp , D2c-Sol1-1 ) ;
18571: LD_VAR 0 4
18575: PPUSH
18576: LD_STRING D2c-Sol1-1
18578: PPUSH
18579: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18583: LD_VAR 0 4
18587: PPUSH
18588: CALL_OW 258
18592: PUSH
18593: LD_INT 2
18595: EQUAL
18596: IFFALSE 18610
// Say ( tmp , D2c-FSol1-1 ) ;
18598: LD_VAR 0 4
18602: PPUSH
18603: LD_STRING D2c-FSol1-1
18605: PPUSH
18606: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18610: LD_EXP 19
18614: PPUSH
18615: LD_STRING D2c-Kurt-1
18617: PPUSH
18618: CALL_OW 88
// DialogueOff ;
18622: CALL_OW 7
// InGameOff ;
18626: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18630: LD_EXP 19
18634: PPUSH
18635: LD_INT 9
18637: PPUSH
18638: CALL_OW 113
// readyToEscape = 1 ;
18642: LD_ADDR_EXP 21
18646: PUSH
18647: LD_INT 1
18649: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18650: LD_VAR 0 6
18654: PUSH
18655: LD_INT 3
18657: EQUAL
18658: IFFALSE 18832
// begin DialogueOn ;
18660: CALL_OW 6
// if tmp = JMM then
18664: LD_VAR 0 4
18668: PUSH
18669: LD_EXP 1
18673: EQUAL
18674: IFFALSE 18734
// begin DialogueOn ;
18676: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18680: LD_EXP 1
18684: PPUSH
18685: LD_STRING D2c-JMM-1
18687: PPUSH
18688: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18692: LD_EXP 19
18696: PPUSH
18697: LD_STRING D2c-Kurt-1
18699: PPUSH
18700: CALL_OW 88
// DialogueOff ;
18704: CALL_OW 7
// InGameOff ;
18708: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18712: LD_EXP 19
18716: PPUSH
18717: LD_INT 9
18719: PPUSH
18720: CALL_OW 113
// readyToEscape = 1 ;
18724: LD_ADDR_EXP 21
18728: PUSH
18729: LD_INT 1
18731: ST_TO_ADDR
// end else
18732: GO 18832
// begin DialogueOn ;
18734: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18738: LD_VAR 0 4
18742: PPUSH
18743: CALL_OW 258
18747: PUSH
18748: LD_INT 1
18750: EQUAL
18751: IFFALSE 18765
// Say ( tmp , D2c-Sol1-1 ) ;
18753: LD_VAR 0 4
18757: PPUSH
18758: LD_STRING D2c-Sol1-1
18760: PPUSH
18761: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18765: LD_VAR 0 4
18769: PPUSH
18770: CALL_OW 258
18774: PUSH
18775: LD_INT 2
18777: EQUAL
18778: IFFALSE 18792
// Say ( tmp , D2c-FSol1-1 ) ;
18780: LD_VAR 0 4
18784: PPUSH
18785: LD_STRING D2c-FSol1-1
18787: PPUSH
18788: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18792: LD_EXP 19
18796: PPUSH
18797: LD_STRING D2c-Kurt-1
18799: PPUSH
18800: CALL_OW 88
// DialogueOff ;
18804: CALL_OW 7
// InGameOff ;
18808: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18812: LD_EXP 19
18816: PPUSH
18817: LD_INT 9
18819: PPUSH
18820: CALL_OW 113
// readyToEscape = 1 ;
18824: LD_ADDR_EXP 21
18828: PUSH
18829: LD_INT 1
18831: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
18832: LD_ADDR_EXP 29
18836: PUSH
18837: LD_INT 0
18839: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18840: LD_INT 35
18842: PPUSH
18843: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18847: LD_EXP 19
18851: PPUSH
18852: LD_INT 9
18854: PPUSH
18855: CALL_OW 308
18859: PUSH
18860: LD_EXP 21
18864: AND
18865: PUSH
18866: LD_EXP 19
18870: PPUSH
18871: CALL_OW 301
18875: OR
18876: IFFALSE 18840
// if IsDead ( Kurt ) then
18878: LD_EXP 19
18882: PPUSH
18883: CALL_OW 301
18887: IFFALSE 18891
// exit ;
18889: GO 18960
// RemoveUnit ( Kurt ) ;
18891: LD_EXP 19
18895: PPUSH
18896: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18900: LD_EXP 19
18904: PPUSH
18905: LD_STRING Kurt
18907: PPUSH
18908: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18912: LD_INT 1
18914: PPUSH
18915: LD_INT 2
18917: PPUSH
18918: CALL_OW 81
18922: PUSH
18923: LD_INT 0
18925: EQUAL
18926: IFFALSE 18936
// KurtStatus = 1 ;
18928: LD_ADDR_EXP 20
18932: PUSH
18933: LD_INT 1
18935: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
18936: LD_INT 1
18938: PPUSH
18939: LD_INT 2
18941: PPUSH
18942: CALL_OW 81
18946: PUSH
18947: LD_INT 2
18949: EQUAL
18950: IFFALSE 18960
// KurtStatus = 2 ;
18952: LD_ADDR_EXP 20
18956: PUSH
18957: LD_INT 2
18959: ST_TO_ADDR
// end ; end_of_file
18960: LD_VAR 0 1
18964: RET
// every 0 0$1 do
18965: GO 18967
18967: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
18968: LD_INT 3
18970: PPUSH
18971: LD_INT 32
18973: PPUSH
18974: LD_INT 3
18976: PPUSH
18977: CALL 5924 0 3
18981: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
18982: GO 18984
18984: DISABLE
18985: LD_INT 0
18987: PPUSH
// begin enemyWayX = [ ] ;
18988: LD_ADDR_EXP 45
18992: PUSH
18993: EMPTY
18994: ST_TO_ADDR
// enemyWayY = [ ] ;
18995: LD_ADDR_EXP 46
18999: PUSH
19000: EMPTY
19001: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
19002: LD_ADDR_VAR 0 1
19006: PUSH
19007: LD_INT 1
19009: PPUSH
19010: LD_INT 2
19012: PPUSH
19013: CALL_OW 12
19017: ST_TO_ADDR
// if rnd = 1 then
19018: LD_VAR 0 1
19022: PUSH
19023: LD_INT 1
19025: EQUAL
19026: IFFALSE 19066
// begin enemyWayX = [ 93 , 84 , 104 ] ;
19028: LD_ADDR_EXP 45
19032: PUSH
19033: LD_INT 93
19035: PUSH
19036: LD_INT 84
19038: PUSH
19039: LD_INT 104
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: LIST
19046: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
19047: LD_ADDR_EXP 46
19051: PUSH
19052: LD_INT 51
19054: PUSH
19055: LD_INT 35
19057: PUSH
19058: LD_INT 28
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: LIST
19065: ST_TO_ADDR
// end ; if rnd = 2 then
19066: LD_VAR 0 1
19070: PUSH
19071: LD_INT 2
19073: EQUAL
19074: IFFALSE 19130
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
19076: LD_ADDR_EXP 45
19080: PUSH
19081: LD_INT 93
19083: PUSH
19084: LD_INT 52
19086: PUSH
19087: LD_INT 34
19089: PUSH
19090: LD_INT 28
19092: PUSH
19093: LD_INT 30
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
19103: LD_ADDR_EXP 46
19107: PUSH
19108: LD_INT 51
19110: PUSH
19111: LD_INT 45
19113: PUSH
19114: LD_INT 35
19116: PUSH
19117: LD_INT 26
19119: PUSH
19120: LD_INT 20
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: ST_TO_ADDR
// end ; enable ;
19130: ENABLE
// end ;
19131: PPOPN 1
19133: END
// every 0 0$1 do
19134: GO 19136
19136: DISABLE
// begin enable ;
19137: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
19138: LD_INT 3
19140: PPUSH
19141: LD_INT 2
19143: PPUSH
19144: LD_INT 11
19146: PPUSH
19147: LD_EXP 31
19151: PPUSH
19152: CALL 7170 0 4
// if disableHealAI = 0 then
19156: LD_EXP 33
19160: PUSH
19161: LD_INT 0
19163: EQUAL
19164: IFFALSE 19185
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
19166: LD_INT 3
19168: PPUSH
19169: LD_INT 10
19171: PPUSH
19172: LD_INT 11
19174: PPUSH
19175: LD_INT 32
19177: PUSH
19178: EMPTY
19179: LIST
19180: PPUSH
19181: CALL 7561 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
19185: LD_INT 3
19187: PPUSH
19188: LD_INT 51
19190: PPUSH
19191: LD_INT 7
19193: PPUSH
19194: CALL 8269 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
19198: LD_INT 3
19200: PPUSH
19201: LD_INT 14
19203: PPUSH
19204: LD_INT 121
19206: PPUSH
19207: LD_INT 100
19209: PPUSH
19210: CALL 6163 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
19214: LD_INT 3
19216: PPUSH
19217: LD_INT 24
19219: PPUSH
19220: LD_EXP 45
19224: PPUSH
19225: LD_EXP 46
19229: PPUSH
19230: CALL 6366 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
19234: LD_INT 3
19236: PPUSH
19237: LD_INT 11
19239: PPUSH
19240: CALL 8412 0 2
// AttackNearBuildings ( 3 , 1 ) ;
19244: LD_INT 3
19246: PPUSH
19247: LD_INT 1
19249: PPUSH
19250: CALL 8825 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
19254: LD_INT 2
19256: PPUSH
19257: CALL_OW 303
19261: PUSH
19262: LD_INT 2
19264: PPUSH
19265: CALL_OW 255
19269: PUSH
19270: LD_INT 1
19272: EQUAL
19273: OR
19274: IFFALSE 19286
// DefendDepot ( 3 , rudepo ) ;
19276: LD_INT 3
19278: PPUSH
19279: LD_INT 2
19281: PPUSH
19282: CALL 8105 0 2
// end ;
19286: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19287: LD_INT 22
19289: PUSH
19290: LD_INT 3
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 21
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 55
19309: PUSH
19310: EMPTY
19311: LIST
19312: PUSH
19313: LD_INT 3
19315: PUSH
19316: LD_INT 34
19318: PUSH
19319: LD_INT 51
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: PPUSH
19336: CALL_OW 69
19340: PUSH
19341: LD_INT 0
19343: EQUAL
19344: PUSH
19345: LD_INT 21
19347: PPUSH
19348: CALL_OW 255
19352: PUSH
19353: LD_INT 3
19355: EQUAL
19356: AND
19357: PUSH
19358: LD_INT 21
19360: PPUSH
19361: CALL_OW 302
19365: AND
19366: PUSH
19367: LD_INT 2
19369: PPUSH
19370: CALL_OW 255
19374: PUSH
19375: LD_INT 3
19377: EQUAL
19378: AND
19379: PUSH
19380: LD_INT 2
19382: PPUSH
19383: CALL_OW 302
19387: AND
19388: IFFALSE 19572
19390: GO 19392
19392: DISABLE
// begin enable ;
19393: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
19394: LD_INT 2
19396: PPUSH
19397: CALL_OW 274
19401: PPUSH
19402: LD_INT 1
19404: PPUSH
19405: LD_INT 1000
19407: PPUSH
19408: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
19412: LD_INT 3
19414: PPUSH
19415: LD_INT 21
19417: PPUSH
19418: LD_INT 5
19420: PUSH
19421: LD_INT 6
19423: PUSH
19424: LD_INT 6
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: PUSH
19432: LD_OWVAR 67
19436: ARRAY
19437: PPUSH
19438: LD_INT 43
19440: PUSH
19441: LD_INT 43
19443: PUSH
19444: LD_INT 44
19446: PUSH
19447: LD_INT 44
19449: PUSH
19450: LD_INT 46
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 43
19462: PUSH
19463: LD_INT 43
19465: PUSH
19466: LD_INT 43
19468: PUSH
19469: LD_INT 44
19471: PUSH
19472: LD_INT 44
19474: PUSH
19475: LD_INT 46
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 43
19488: PUSH
19489: LD_INT 43
19491: PUSH
19492: LD_INT 43
19494: PUSH
19495: LD_INT 44
19497: PUSH
19498: LD_INT 44
19500: PUSH
19501: LD_INT 46
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: PUSH
19517: LD_OWVAR 67
19521: ARRAY
19522: PPUSH
19523: LD_INT 1
19525: PPUSH
19526: LD_INT 1
19528: PPUSH
19529: LD_INT 22
19531: PUSH
19532: LD_INT 22
19534: PUSH
19535: LD_INT 24
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 1
19544: PPUSH
19545: LD_INT 2
19547: PPUSH
19548: CALL_OW 12
19552: ARRAY
19553: PUSH
19554: LD_INT 24
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: LIST
19561: PUSH
19562: LD_OWVAR 67
19566: ARRAY
19567: PPUSH
19568: CALL 6009 0 7
// end ;
19572: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19573: LD_INT 17
19575: PPUSH
19576: CALL_OW 255
19580: PUSH
19581: LD_INT 3
19583: EQUAL
19584: PUSH
19585: LD_INT 17
19587: PPUSH
19588: CALL_OW 302
19592: AND
19593: PUSH
19594: LD_INT 2
19596: PPUSH
19597: CALL_OW 255
19601: PUSH
19602: LD_INT 3
19604: EQUAL
19605: AND
19606: PUSH
19607: LD_INT 2
19609: PPUSH
19610: CALL_OW 302
19614: AND
19615: IFFALSE 19682
19617: GO 19619
19619: DISABLE
// begin enable ;
19620: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19621: LD_INT 17
19623: PPUSH
19624: LD_INT 22
19626: PPUSH
19627: LD_INT 1
19629: PPUSH
19630: LD_INT 1
19632: PPUSH
19633: LD_INT 42
19635: PUSH
19636: LD_INT 43
19638: PUSH
19639: LD_INT 44
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: PPUSH
19650: LD_INT 3
19652: PPUSH
19653: CALL_OW 12
19657: ARRAY
19658: PPUSH
19659: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
19663: LD_INT 17
19665: PPUSH
19666: LD_INT 22
19668: PPUSH
19669: LD_INT 1
19671: PPUSH
19672: LD_INT 1
19674: PPUSH
19675: LD_INT 51
19677: PPUSH
19678: CALL_OW 185
// end ;
19682: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
19683: LD_INT 17
19685: PPUSH
19686: CALL_OW 302
19690: PUSH
19691: LD_INT 17
19693: PPUSH
19694: CALL_OW 255
19698: PUSH
19699: LD_INT 3
19701: EQUAL
19702: AND
19703: PUSH
19704: LD_INT 2
19706: PPUSH
19707: CALL_OW 302
19711: AND
19712: PUSH
19713: LD_INT 2
19715: PPUSH
19716: CALL_OW 255
19720: PUSH
19721: LD_INT 3
19723: EQUAL
19724: AND
19725: PUSH
19726: LD_INT 17
19728: PPUSH
19729: CALL_OW 313
19733: NOT
19734: AND
19735: IFFALSE 19829
19737: GO 19739
19739: DISABLE
19740: LD_INT 0
19742: PPUSH
// begin for i = 1 to 6 do
19743: LD_ADDR_VAR 0 1
19747: PUSH
19748: DOUBLE
19749: LD_INT 1
19751: DEC
19752: ST_TO_ADDR
19753: LD_INT 6
19755: PUSH
19756: FOR_TO
19757: IFFALSE 19827
// begin uc_side = 3 ;
19759: LD_ADDR_OWVAR 20
19763: PUSH
19764: LD_INT 3
19766: ST_TO_ADDR
// uc_nation = 3 ;
19767: LD_ADDR_OWVAR 21
19771: PUSH
19772: LD_INT 3
19774: ST_TO_ADDR
// hc_gallery :=  ;
19775: LD_ADDR_OWVAR 33
19779: PUSH
19780: LD_STRING 
19782: ST_TO_ADDR
// hc_name :=  ;
19783: LD_ADDR_OWVAR 26
19787: PUSH
19788: LD_STRING 
19790: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19791: LD_INT 0
19793: PPUSH
19794: LD_EXP 34
19798: PPUSH
19799: LD_EXP 35
19803: PPUSH
19804: CALL_OW 12
19808: PPUSH
19809: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
19813: CALL_OW 44
19817: PPUSH
19818: LD_INT 17
19820: PPUSH
19821: CALL_OW 52
// end ;
19825: GO 19756
19827: POP
19828: POP
// end ;
19829: PPOPN 1
19831: END
// every 2 2$0 do var i , j ;
19832: GO 19834
19834: DISABLE
19835: LD_INT 0
19837: PPUSH
19838: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19839: LD_INT 14700
19841: PUSH
19842: LD_INT 33600
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: PPUSH
19852: LD_INT 2
19854: PPUSH
19855: CALL_OW 12
19859: ARRAY
19860: PPUSH
19861: CALL_OW 67
// disableHealAI = 1 ;
19865: LD_ADDR_EXP 33
19869: PUSH
19870: LD_INT 1
19872: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19873: LD_ADDR_VAR 0 1
19877: PUSH
19878: LD_INT 22
19880: PUSH
19881: LD_INT 3
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 25
19890: PUSH
19891: LD_INT 4
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PPUSH
19902: CALL_OW 69
19906: PUSH
19907: FOR_IN
19908: IFFALSE 19921
// ComExitBuilding ( i ) ;
19910: LD_VAR 0 1
19914: PPUSH
19915: CALL_OW 122
19919: GO 19907
19921: POP
19922: POP
// wait ( 0 0$1 ) ;
19923: LD_INT 35
19925: PPUSH
19926: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19930: LD_INT 35
19932: PPUSH
19933: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19937: LD_ADDR_VAR 0 1
19941: PUSH
19942: LD_INT 22
19944: PUSH
19945: LD_INT 3
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 25
19954: PUSH
19955: LD_INT 4
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PPUSH
19966: CALL_OW 69
19970: PUSH
19971: FOR_IN
19972: IFFALSE 20049
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19974: LD_ADDR_VAR 0 2
19978: PUSH
19979: LD_INT 19
19981: PPUSH
19982: LD_INT 22
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 25
19994: PUSH
19995: LD_INT 12
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PPUSH
20006: CALL_OW 70
20010: PUSH
20011: FOR_IN
20012: IFFALSE 20045
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
20014: LD_VAR 0 1
20018: PPUSH
20019: LD_VAR 0 2
20023: PPUSH
20024: CALL_OW 250
20028: PPUSH
20029: LD_VAR 0 2
20033: PPUSH
20034: CALL_OW 251
20038: PPUSH
20039: CALL_OW 191
// end ;
20043: GO 20011
20045: POP
20046: POP
// end ;
20047: GO 19971
20049: POP
20050: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
20051: LD_INT 22
20053: PUSH
20054: LD_INT 3
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 25
20063: PUSH
20064: LD_INT 4
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PPUSH
20075: CALL_OW 69
20079: PUSH
20080: LD_INT 0
20082: EQUAL
20083: PUSH
20084: LD_EXP 32
20088: PUSH
20089: LD_INT 6
20091: PUSH
20092: LD_INT 7
20094: PUSH
20095: LD_INT 8
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: LIST
20102: PUSH
20103: LD_OWVAR 67
20107: ARRAY
20108: GREATEREQUAL
20109: OR
20110: PUSH
20111: LD_INT 19
20113: PPUSH
20114: LD_INT 22
20116: PUSH
20117: LD_INT 0
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 25
20126: PUSH
20127: LD_INT 12
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PPUSH
20138: CALL_OW 70
20142: PUSH
20143: LD_INT 0
20145: EQUAL
20146: OR
20147: IFFALSE 19930
// disableHealAI = 0 ;
20149: LD_ADDR_EXP 33
20153: PUSH
20154: LD_INT 0
20156: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
20157: LD_ADDR_VAR 0 1
20161: PUSH
20162: LD_INT 22
20164: PUSH
20165: LD_INT 3
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 25
20174: PUSH
20175: LD_INT 12
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PPUSH
20186: CALL_OW 69
20190: PUSH
20191: FOR_IN
20192: IFFALSE 20208
// SetClass ( i , 16 ) ;
20194: LD_VAR 0 1
20198: PPUSH
20199: LD_INT 16
20201: PPUSH
20202: CALL_OW 336
20206: GO 20191
20208: POP
20209: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20210: LD_ADDR_VAR 0 1
20214: PUSH
20215: LD_INT 22
20217: PUSH
20218: LD_INT 3
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 25
20227: PUSH
20228: LD_INT 4
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PPUSH
20239: CALL_OW 69
20243: PUSH
20244: FOR_IN
20245: IFFALSE 20264
// ComMoveXY ( i , 113 , 94 ) ;
20247: LD_VAR 0 1
20251: PPUSH
20252: LD_INT 113
20254: PPUSH
20255: LD_INT 94
20257: PPUSH
20258: CALL_OW 111
20262: GO 20244
20264: POP
20265: POP
// end ;
20266: PPOPN 2
20268: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
20269: LD_INT 21
20271: PPUSH
20272: CALL_OW 255
20276: PUSH
20277: LD_INT 3
20279: EQUAL
20280: PUSH
20281: LD_INT 21
20283: PPUSH
20284: CALL_OW 302
20288: AND
20289: PUSH
20290: LD_INT 22
20292: PUSH
20293: LD_INT 3
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 34
20302: PUSH
20303: LD_INT 51
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PPUSH
20314: CALL_OW 69
20318: PUSH
20319: LD_INT 0
20321: EQUAL
20322: AND
20323: IFFALSE 20355
20325: GO 20327
20327: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
20328: LD_INT 21
20330: PPUSH
20331: LD_INT 23
20333: PPUSH
20334: LD_INT 1
20336: PPUSH
20337: LD_INT 1
20339: PPUSH
20340: LD_INT 51
20342: PPUSH
20343: CALL_OW 185
// wait ( 5 5$0 ) ;
20347: LD_INT 10500
20349: PPUSH
20350: CALL_OW 67
// enable ;
20354: ENABLE
// end ; end_of_file
20355: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
20356: LD_EXP 26
20360: PUSH
20361: LD_INT 0
20363: LESSEQUAL
20364: IFFALSE 20513
20366: GO 20368
20368: DISABLE
20369: LD_INT 0
20371: PPUSH
20372: PPUSH
20373: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20374: LD_ADDR_VAR 0 2
20378: PUSH
20379: LD_INT 22
20381: PUSH
20382: LD_INT 1
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 21
20391: PUSH
20392: LD_INT 3
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 2
20401: PUSH
20402: LD_INT 30
20404: PUSH
20405: LD_INT 0
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 30
20414: PUSH
20415: LD_INT 1
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: LIST
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: LIST
20431: PPUSH
20432: CALL_OW 69
20436: ST_TO_ADDR
// for i in tmp do
20437: LD_ADDR_VAR 0 1
20441: PUSH
20442: LD_VAR 0 2
20446: PUSH
20447: FOR_IN
20448: IFFALSE 20481
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
20450: LD_ADDR_VAR 0 3
20454: PUSH
20455: LD_VAR 0 3
20459: PUSH
20460: LD_VAR 0 1
20464: PPUSH
20465: CALL_OW 274
20469: PPUSH
20470: LD_INT 1
20472: PPUSH
20473: CALL_OW 275
20477: PLUS
20478: ST_TO_ADDR
20479: GO 20447
20481: POP
20482: POP
// if yourCrates >= needCrates then
20483: LD_VAR 0 3
20487: PUSH
20488: LD_EXP 25
20492: GREATEREQUAL
20493: IFFALSE 20506
// begin FinishMission ( yourCrates ) ;
20495: LD_VAR 0 3
20499: PPUSH
20500: CALL 20516 0 1
// end else
20504: GO 20513
// begin YouLost ( matmin ) ;
20506: LD_STRING matmin
20508: PPUSH
20509: CALL_OW 104
// end ; end ;
20513: PPOPN 3
20515: END
// export function FinishMission ( crates ) ; begin
20516: LD_INT 0
20518: PPUSH
// if crates + 100 > crates then
20519: LD_VAR 0 1
20523: PUSH
20524: LD_INT 100
20526: PLUS
20527: PUSH
20528: LD_VAR 0 1
20532: GREATER
20533: IFFALSE 20557
// begin AddMedal ( cans , 1 ) ;
20535: LD_STRING cans
20537: PPUSH
20538: LD_INT 1
20540: PPUSH
20541: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20545: LD_INT 1
20547: PPUSH
20548: LD_STRING 06_crates_1
20550: PPUSH
20551: CALL_OW 39
// end else
20555: GO 20578
// begin AddMedal ( cans , - 1 ) ;
20557: LD_STRING cans
20559: PPUSH
20560: LD_INT 1
20562: NEG
20563: PPUSH
20564: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20568: LD_INT 0
20570: PPUSH
20571: LD_STRING 06_crates_1
20573: PPUSH
20574: CALL_OW 39
// end ; if unitLost < 2 then
20578: LD_EXP 30
20582: PUSH
20583: LD_INT 2
20585: LESS
20586: IFFALSE 20600
// begin AddMedal ( people , 1 ) ;
20588: LD_STRING people
20590: PPUSH
20591: LD_INT 1
20593: PPUSH
20594: CALL_OW 101
// end else
20598: GO 20611
// begin AddMedal ( people , - 1 ) ;
20600: LD_STRING people
20602: PPUSH
20603: LD_INT 1
20605: NEG
20606: PPUSH
20607: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20611: LD_EXP 28
20615: PPUSH
20616: LD_STRING 06_remoteVehs_1
20618: PPUSH
20619: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20623: LD_EXP 28
20627: PUSH
20628: LD_INT 1
20630: EQUAL
20631: IFFALSE 20645
// begin AddMedal ( remote , 1 ) ;
20633: LD_STRING remote
20635: PPUSH
20636: LD_INT 1
20638: PPUSH
20639: CALL_OW 101
// end else
20643: GO 20685
// begin if GetTech ( 18 , 1 ) = state_enabled then
20645: LD_INT 18
20647: PPUSH
20648: LD_INT 1
20650: PPUSH
20651: CALL_OW 321
20655: PUSH
20656: LD_INT 1
20658: EQUAL
20659: IFFALSE 20674
// begin AddMedal ( remote , - 1 ) ;
20661: LD_STRING remote
20663: PPUSH
20664: LD_INT 1
20666: NEG
20667: PPUSH
20668: CALL_OW 101
// end else
20672: GO 20685
// begin AddMedal ( remote , - 2 ) ;
20674: LD_STRING remote
20676: PPUSH
20677: LD_INT 2
20679: NEG
20680: PPUSH
20681: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
20685: LD_EXP 20
20689: PPUSH
20690: LD_STRING 06_KurtStatus_1
20692: PPUSH
20693: CALL_OW 39
// GiveMedals ( Main ) ;
20697: LD_STRING Main
20699: PPUSH
20700: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20704: LD_INT 50
20706: PUSH
20707: EMPTY
20708: LIST
20709: PUSH
20710: LD_INT 22
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 21
20722: PUSH
20723: LD_INT 1
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 25
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 25
20745: PUSH
20746: LD_INT 2
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 25
20755: PUSH
20756: LD_INT 3
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 25
20765: PUSH
20766: LD_INT 4
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: PPUSH
20786: CALL_OW 69
20790: PPUSH
20791: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20795: LD_EXP 1
20799: PPUSH
20800: LD_EXP 43
20804: PUSH
20805: LD_STRING JMM
20807: STR
20808: PPUSH
20809: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20813: LD_EXP 2
20817: PPUSH
20818: LD_EXP 43
20822: PUSH
20823: LD_STRING Lisa
20825: STR
20826: PPUSH
20827: CALL 5412 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20831: LD_EXP 3
20835: PPUSH
20836: LD_EXP 43
20840: PUSH
20841: LD_STRING Bobby
20843: STR
20844: PPUSH
20845: CALL 5412 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20849: LD_EXP 4
20853: PPUSH
20854: LD_EXP 43
20858: PUSH
20859: LD_STRING Cyrus
20861: STR
20862: PPUSH
20863: CALL 5412 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20867: LD_EXP 5
20871: PPUSH
20872: LD_EXP 43
20876: PUSH
20877: LD_STRING Frank
20879: STR
20880: PPUSH
20881: CALL 5412 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20885: LD_EXP 6
20889: PPUSH
20890: LD_EXP 43
20894: PUSH
20895: LD_STRING Brown
20897: STR
20898: PPUSH
20899: CALL 5412 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20903: LD_EXP 7
20907: PPUSH
20908: LD_EXP 43
20912: PUSH
20913: LD_STRING Donaldson
20915: STR
20916: PPUSH
20917: CALL 5412 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20921: LD_EXP 8
20925: PPUSH
20926: LD_EXP 43
20930: PUSH
20931: LD_STRING Gladstone
20933: STR
20934: PPUSH
20935: CALL 5412 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20939: LD_EXP 9
20943: PPUSH
20944: LD_EXP 43
20948: PUSH
20949: LD_STRING Denis
20951: STR
20952: PPUSH
20953: CALL 5412 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20957: LD_EXP 15
20961: PPUSH
20962: LD_EXP 43
20966: PUSH
20967: LD_STRING Joan
20969: STR
20970: PPUSH
20971: CALL 5412 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
20975: LD_EXP 16
20979: PPUSH
20980: LD_STRING 06_JoanStatus_1
20982: PPUSH
20983: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20987: LD_INT 50
20989: PUSH
20990: EMPTY
20991: LIST
20992: PUSH
20993: LD_INT 22
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 21
21005: PUSH
21006: LD_INT 1
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: LD_INT 25
21018: PUSH
21019: LD_INT 1
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 25
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 25
21038: PUSH
21039: LD_INT 3
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 25
21048: PUSH
21049: LD_INT 4
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: PPUSH
21069: CALL_OW 69
21073: PUSH
21074: LD_EXP 1
21078: PUSH
21079: LD_EXP 2
21083: PUSH
21084: LD_EXP 3
21088: PUSH
21089: LD_EXP 4
21093: PUSH
21094: LD_EXP 5
21098: PUSH
21099: LD_EXP 6
21103: PUSH
21104: LD_EXP 7
21108: PUSH
21109: LD_EXP 8
21113: PUSH
21114: LD_EXP 9
21118: PUSH
21119: LD_EXP 15
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: DIFF
21136: PPUSH
21137: LD_STRING 06_other_survivors
21139: PPUSH
21140: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
21144: LD_INT 50
21146: PUSH
21147: EMPTY
21148: LIST
21149: PUSH
21150: LD_INT 22
21152: PUSH
21153: LD_INT 1
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 21
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: LD_INT 25
21175: PUSH
21176: LD_INT 12
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 25
21185: PUSH
21186: LD_INT 16
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: PPUSH
21204: CALL_OW 69
21208: PPUSH
21209: LD_STRING 06_other_apemans
21211: PPUSH
21212: CALL_OW 38
// YouWin ;
21216: CALL_OW 103
// end ; end_of_file
21220: LD_VAR 0 2
21224: RET
// every 1 1$0 trigger sendedConvoys = 3 do
21225: LD_EXP 39
21229: PUSH
21230: LD_INT 3
21232: EQUAL
21233: IFFALSE 21348
21235: GO 21237
21237: DISABLE
// begin enable ;
21238: ENABLE
// sendedConvoys = 0 ;
21239: LD_ADDR_EXP 39
21243: PUSH
21244: LD_INT 0
21246: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
21247: LD_INT 6
21249: PPUSH
21250: LD_INT 3
21252: PPUSH
21253: LD_INT 5
21255: PPUSH
21256: LD_INT 10
21258: PPUSH
21259: CALL_OW 12
21263: PUSH
21264: LD_INT 5
21266: PPUSH
21267: LD_INT 11
21269: PPUSH
21270: CALL_OW 12
21274: PUSH
21275: LD_INT 8
21277: PPUSH
21278: LD_INT 12
21280: PPUSH
21281: CALL_OW 12
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: PUSH
21291: LD_OWVAR 67
21295: ARRAY
21296: PPUSH
21297: LD_INT 0
21299: PPUSH
21300: LD_INT 0
21302: PPUSH
21303: LD_INT 0
21305: PPUSH
21306: LD_INT 3
21308: PPUSH
21309: LD_EXP 34
21313: PPUSH
21314: LD_EXP 35
21318: PPUSH
21319: CALL_OW 12
21323: PPUSH
21324: LD_INT 18
21326: PPUSH
21327: LD_INT 17
21329: PPUSH
21330: LD_INT 1
21332: PPUSH
21333: LD_INT 1
21335: PPUSH
21336: LD_INT 2
21338: PPUSH
21339: CALL_OW 12
21343: PPUSH
21344: CALL 9055 0 12
// end ; end_of_file
21348: END
// export function PrepareNature ; var i , un ; begin
21349: LD_INT 0
21351: PPUSH
21352: PPUSH
21353: PPUSH
// for i = 1 to Difficulty + 2 do
21354: LD_ADDR_VAR 0 2
21358: PUSH
21359: DOUBLE
21360: LD_INT 1
21362: DEC
21363: ST_TO_ADDR
21364: LD_OWVAR 67
21368: PUSH
21369: LD_INT 2
21371: PLUS
21372: PUSH
21373: FOR_TO
21374: IFFALSE 21483
// begin hc_sex = sex_male ;
21376: LD_ADDR_OWVAR 27
21380: PUSH
21381: LD_INT 1
21383: ST_TO_ADDR
// uc_side = 0 ;
21384: LD_ADDR_OWVAR 20
21388: PUSH
21389: LD_INT 0
21391: ST_TO_ADDR
// uc_nation = nation_nature ;
21392: LD_ADDR_OWVAR 21
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// hc_class = class_tiger ;
21400: LD_ADDR_OWVAR 28
21404: PUSH
21405: LD_INT 14
21407: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21408: LD_ADDR_OWVAR 31
21412: PUSH
21413: LD_EXP 35
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 0
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21433: LD_ADDR_OWVAR 35
21437: PUSH
21438: LD_INT 5
21440: NEG
21441: PPUSH
21442: LD_INT 5
21444: PPUSH
21445: CALL_OW 12
21449: PUSH
21450: LD_OWVAR 67
21454: MUL
21455: ST_TO_ADDR
// un = CreateHuman ;
21456: LD_ADDR_VAR 0 3
21460: PUSH
21461: CALL_OW 44
21465: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21466: LD_VAR 0 3
21470: PPUSH
21471: LD_INT 20
21473: PPUSH
21474: LD_INT 0
21476: PPUSH
21477: CALL_OW 49
// end ;
21481: GO 21373
21483: POP
21484: POP
// for i = 1 to rand ( 3 , 4 ) do
21485: LD_ADDR_VAR 0 2
21489: PUSH
21490: DOUBLE
21491: LD_INT 1
21493: DEC
21494: ST_TO_ADDR
21495: LD_INT 3
21497: PPUSH
21498: LD_INT 4
21500: PPUSH
21501: CALL_OW 12
21505: PUSH
21506: FOR_TO
21507: IFFALSE 21601
// begin hc_sex = sex_male ;
21509: LD_ADDR_OWVAR 27
21513: PUSH
21514: LD_INT 1
21516: ST_TO_ADDR
// uc_side = 0 ;
21517: LD_ADDR_OWVAR 20
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// uc_nation = nation_nature ;
21525: LD_ADDR_OWVAR 21
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// hc_class = 18 ;
21533: LD_ADDR_OWVAR 28
21537: PUSH
21538: LD_INT 18
21540: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21541: LD_ADDR_OWVAR 31
21545: PUSH
21546: LD_EXP 35
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: ST_TO_ADDR
// hc_agressivity = 0 ;
21566: LD_ADDR_OWVAR 35
21570: PUSH
21571: LD_INT 0
21573: ST_TO_ADDR
// un = CreateHuman ;
21574: LD_ADDR_VAR 0 3
21578: PUSH
21579: CALL_OW 44
21583: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21584: LD_VAR 0 3
21588: PPUSH
21589: LD_INT 20
21591: PPUSH
21592: LD_INT 0
21594: PPUSH
21595: CALL_OW 49
// end ;
21599: GO 21506
21601: POP
21602: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
21603: LD_ADDR_VAR 0 2
21607: PUSH
21608: DOUBLE
21609: LD_INT 1
21611: DEC
21612: ST_TO_ADDR
21613: LD_INT 1
21615: PPUSH
21616: LD_INT 3
21618: PPUSH
21619: CALL_OW 12
21623: PUSH
21624: LD_OWVAR 67
21628: PLUS
21629: PUSH
21630: FOR_TO
21631: IFFALSE 21812
// begin hc_sex = sex_male ;
21633: LD_ADDR_OWVAR 27
21637: PUSH
21638: LD_INT 1
21640: ST_TO_ADDR
// uc_side = 0 ;
21641: LD_ADDR_OWVAR 20
21645: PUSH
21646: LD_INT 0
21648: ST_TO_ADDR
// uc_nation = nation_nature ;
21649: LD_ADDR_OWVAR 21
21653: PUSH
21654: LD_INT 0
21656: ST_TO_ADDR
// hc_class = class_apeman ;
21657: LD_ADDR_OWVAR 28
21661: PUSH
21662: LD_INT 12
21664: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21665: LD_ADDR_OWVAR 31
21669: PUSH
21670: LD_EXP 34
21674: PPUSH
21675: LD_EXP 35
21679: PPUSH
21680: CALL_OW 12
21684: PUSH
21685: LD_EXP 34
21689: PPUSH
21690: LD_EXP 35
21694: PPUSH
21695: CALL_OW 12
21699: PUSH
21700: LD_EXP 34
21704: PPUSH
21705: LD_EXP 35
21709: PPUSH
21710: CALL_OW 12
21714: PUSH
21715: LD_EXP 34
21719: PPUSH
21720: LD_EXP 35
21724: PPUSH
21725: CALL_OW 12
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
21736: LD_ADDR_OWVAR 35
21740: PUSH
21741: LD_INT 20
21743: PPUSH
21744: LD_INT 30
21746: PPUSH
21747: CALL_OW 12
21751: PUSH
21752: LD_INT 30
21754: PPUSH
21755: LD_INT 40
21757: PPUSH
21758: CALL_OW 12
21762: PUSH
21763: LD_INT 40
21765: PPUSH
21766: LD_INT 50
21768: PPUSH
21769: CALL_OW 12
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: PUSH
21779: LD_OWVAR 67
21783: ARRAY
21784: ST_TO_ADDR
// un = CreateHuman ;
21785: LD_ADDR_VAR 0 3
21789: PUSH
21790: CALL_OW 44
21794: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21795: LD_VAR 0 3
21799: PPUSH
21800: LD_INT 21
21802: PPUSH
21803: LD_INT 0
21805: PPUSH
21806: CALL_OW 49
// end ;
21810: GO 21630
21812: POP
21813: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
21814: LD_ADDR_VAR 0 2
21818: PUSH
21819: DOUBLE
21820: LD_INT 1
21822: DEC
21823: ST_TO_ADDR
21824: LD_INT 5
21826: PPUSH
21827: LD_INT 6
21829: PPUSH
21830: CALL_OW 12
21834: PUSH
21835: LD_OWVAR 67
21839: PLUS
21840: PUSH
21841: FOR_TO
21842: IFFALSE 21988
// begin hc_sex = sex_male ;
21844: LD_ADDR_OWVAR 27
21848: PUSH
21849: LD_INT 1
21851: ST_TO_ADDR
// uc_side = 0 ;
21852: LD_ADDR_OWVAR 20
21856: PUSH
21857: LD_INT 0
21859: ST_TO_ADDR
// uc_nation = nation_nature ;
21860: LD_ADDR_OWVAR 21
21864: PUSH
21865: LD_INT 0
21867: ST_TO_ADDR
// hc_class = class_apeman ;
21868: LD_ADDR_OWVAR 28
21872: PUSH
21873: LD_INT 12
21875: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21876: LD_ADDR_OWVAR 31
21880: PUSH
21881: LD_EXP 34
21885: PPUSH
21886: LD_EXP 35
21890: PPUSH
21891: CALL_OW 12
21895: PUSH
21896: LD_EXP 34
21900: PPUSH
21901: LD_EXP 35
21905: PPUSH
21906: CALL_OW 12
21910: PUSH
21911: LD_OWVAR 67
21915: PLUS
21916: PUSH
21917: LD_EXP 34
21921: PPUSH
21922: LD_EXP 35
21926: PPUSH
21927: CALL_OW 12
21931: PUSH
21932: LD_EXP 34
21936: PPUSH
21937: LD_EXP 35
21941: PPUSH
21942: CALL_OW 12
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: ST_TO_ADDR
// hc_agressivity = 0 ;
21953: LD_ADDR_OWVAR 35
21957: PUSH
21958: LD_INT 0
21960: ST_TO_ADDR
// un = CreateHuman ;
21961: LD_ADDR_VAR 0 3
21965: PUSH
21966: CALL_OW 44
21970: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21971: LD_VAR 0 3
21975: PPUSH
21976: LD_INT 22
21978: PPUSH
21979: LD_INT 0
21981: PPUSH
21982: CALL_OW 49
// end ;
21986: GO 21841
21988: POP
21989: POP
// end ; end_of_file
21990: LD_VAR 0 1
21994: RET
// every 0 0$1 trigger IsDead ( JMM ) do
21995: LD_EXP 1
21999: PPUSH
22000: CALL_OW 301
22004: IFFALSE 22016
22006: GO 22008
22008: DISABLE
// YouLost ( JMM ) ;
22009: LD_STRING JMM
22011: PPUSH
22012: CALL_OW 104
22016: END
